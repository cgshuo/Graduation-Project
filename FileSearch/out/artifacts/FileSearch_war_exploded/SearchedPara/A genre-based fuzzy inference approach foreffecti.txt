
Department of Information Management, Fu Jen Catholic University, Taipei, Taiwan Institute of Information Science, Academia Sinica, Taipei, Taiwan 1. Introduction
Recommender systems predict users X  preferences based on the users X  search behavior patterns on websites and recommend items that may be of interest to them. Since the mid-1990s, a great deal of research has focused on how to derive sufficient numbers of explicit ratings to construct users X  profiles, which are then used to predict users X  preferences [2,7,16,24]. Personalized recommendation systems, which provide users with one-to-one guidance, have become very important in electronic commerce. Various methods for learning users X  interests or preferences from text documents or Web pages have been proposed for real-world applications based on recommender systems; for example, adaptive Web page recommendation services [2,5,32], personalized online newspapers [24], movie recommendations [7], joke recommendations [11] and review article recommendations [20]. These approaches are based on learning algorithms that modify users X  profiles to reflect the users X  interests or preferences.
Various information filtering approaches have been proposed to predict users X  preferences. Generally, they can be classified as content-based filtering or collaborative filtering approaches. The latter, which are widely used in a large number of diverse applications [1,10], enable websites to recommend products based on the preferences of peer groups whose interests are similar to those of the target users. Grou-pLens [16] and MovieLens [7] are two well known collaborative recommender systems that recommend news and movies respectively. The GroupLens project applies a personalized neighborhood-based col-laborative filtering technique to Usenet news, a high-volume and high-noise set of discussion groups distributed across the Internet. In the MovieLens system, users provide ratings for movies they have seen. Then, the system applies a collaborative filtering algorithm to recommend movies that similar users liked. Although collaborative filtering is a promising way to expand a user X  X  profile of interests, it cannot resolve or m itigate the sparse ra tings problem, w hich occurs because an individua l can only vote for a small fraction of all the items available on a website. The problem is usually resolved by em-ploying hybrid methods, i.e., by combining content-based and collaborative filtering techniques [1,2,4]. Ma et al. [20] exploited users X  social trust networks and social tags, i.e., social context information, to alleviate the sparsity problem and improve the quality of recommendations. They conducted a series of experiments on the Epinions and Movielens datasets to demonstrate the effectiveness of their approach.
The computational efficiency of collaborative filtering algorithms has also motivated a substantial amount of research in recent years. Memory-based collaborative filtering algorithms are simple and make reasonable recommendation results; however, they have limited scalability and they are not ef-ficient in the training and prediction phases [9,12,27]. By contrast, model-based collaborative filtering algorithms, such as regression-based methods and Latent Semantic Indexing (LSI), are efficient in the prediction phase of recommendation, but constructing the model requires a substantial amount of time. Moreover, model-based algorithms are more suitable for static data [27,31]. To satisfy the increasing requirements of interactive recommender systems and information retrieval systems, an effective recom-mendation system must be able to 1) produce accurate predictions based on low density data; 2) make recommendations in a timely manner; and 3) fit the Web context to learn users X  dynamic preferences. To improve the performance of webpage searches and personalize the retrieved results, Kim and Cho [14] utilized a fuzzy inference method to construct a fuzzy concept network based on the user X  X  profile. In this work, we propose a genre-based fuzzy (G-Fuzzy) inference and grouping approach that estimates the unknown values in a sparse matrix and identifies appropriate neighborhoods by apply-ing an  X  -cut operation. The contribution of our research is threefold. 1) To resolve the cold start and sparse rating problems, we propose a novel hybrid movie preference filtering approach called G-Fuzzy. 2) We integrate the fuzzy inference method described in [15] with the proposed genre-based filtering method to locate users X  with similar interests and identify the neighborhood of users. 3) We evaluate the content-based, collaborative and hybrid filtering methods under various levels of sparse ratings for movies. To evaluate the tradeoff between the methods, we conduct a series of experiments that verify the effectiveness of the proposed approach in terms of the precision rate and computation time. The remainder of this paper is organized as follows. The next section contains a review of related work. In Section 3, we describe the framework of the proposed approach; and in Section 4, we introduce a genre-based fuzzy inference approach in detail. Sections 5 and 6, we consider the experimental methods, and results; and Section 7 contains some concluding remarks. 2. Related works
A recommendation system uses a customer X  X  purchase history to determine his preferences and iden-tify products that he may wish to purchase. They have been integrated with e-commerce applications to support product recommendations [28]. Most researchers have focused on recommendation technolo-gies that rely explicitly on users X  ratings. Content-based and collaborative filtering are usually used to make recommendations. Hybrid techniques that exploit the strengths of content-based and collaborative filtering methods have also been proposed.
 2.1. Content-based filtering
In content-based systems, products are described by a common set of attributes extracted from the available product descriptions [6]. Customers X  preferences are predicted by analyzing the relationship between the product ratings that an individual has given and the corresponding product attributes. The major limitation of content-based filtering methods is that they may not have a serendipitous finding to the user because they rely on the user X  X  historical preferences to build the profile or prediction model. Another problem with such systems is that a large set of key attributes must be identified [6]. If the set is too small, there will be insufficient information to build the customer X  X  profile. However, too many attributes may also be problematic because there will be a large number of trainable parameters in the model, which will result in a poor performance [23]. Blanco-Fern X ndez et al. [3] improved the perfor-mance of content-based filtering by compiling user profiles with the aid of an ontology of items and investigated a TV program domain. Their approach integrates content-based filtering with a spreading activation process and semantic reasoning mechanisms in the ontology to improve the accuracy of rec-ommendations. Although the approach alleviates the overspecialization problem in content-based filter-ing and resolves the sparsity problem in collaborative filtering, it requires additional information about the target domain and must maintain detailed user profiles. 2.2. Collaborative filtering
Usually, collaborative filtering (CF) methods exploit nearest-neighborhood algorithms to recommend products to target customers based on the preferences of neighbors; that is, customers who have simi-lar preferences to the target customers [13,18]. The methods can be classified as either memory-based or model-based. Memory-based CF methods, such as neighborhood-based and item-based approaches, use the entire user-item database, or a sample of it, to generate predictions [30]. Users are classified into several groups based on similar interests. The neighborhood-based CF algorithm is a widely used memory-based CF filtering technique that (1) calculates the similarities between users; (2) determines the neighborhood of the target user; and (3) produces a prediction for the active user [12,25,30]. Nor-mally, the cosine measure and the correlation-based similarity measure are used to calculate the simi-larities between users based on their previous ratings, as shown in Eq. (1). The equation formulates the similarity between the target user l and a neighbor k . k respectively. Equation (2) shows the formula used to predict an item for the target user. where, P l,i represents the predicted item i for the target user l ,and n is the number of neighbors that rated item i .
Model-based collaborative filtering methods, such as Bayesian models or clustering models, use clas-sification algorithms as CF models if the user ratings are categorical. Regression models and SVD meth-ods can be used for numerical ratings [30]. Both memory-based and model-based methods are affected by the cold-start and rating sparsity problems.  X  Cold-start: This problem arises when a new product is introduced to the market because there are no  X  Rating sparsity: Most commercial recommender systems have a large set of items and customers.
A number of hybrid CF recommendation algorithms have been proposed to address the shortcom-ings of content-based and collaborative filtering methods [12]. For example, Fab is a well known clas-sic content-based CF recommender system that retrieves information available from the World Wide Web [2]. 2.3. Hybrid filtering
Although CF algorithms are effective, they cannot resolve the cold-start and sparsity problems. How-ever, a hybrid filtering approach, which exploits collaborative filtering as the primary technique and content-based filtering to make recommendations [19,22,34], is used to deal with the problems. In other words, the hybrid approach exploits the strengths of content-based and collaborative filtering. It has been found that hybrid CF algorithms, such as the content-boosted CF algorithm, can resolve the spar-sity problem by using external content information to make predictions for new users or new items [30]. Hybrid filtering techniques may be linear or sequential combinations of collaborative and content-based filtering techniques [19]. Linear combinations use the prediction results of the CF and content-based filtering methods together. The relative weights of the two techniques depend on the number of users, as in the Tango system [1]. By contrast, sequential combinations apply a content-based filtering algorithm to find users with similar interests to the target user, and then use a CF algorithm to make predictions, as in the Fab system [2]. In this work, we adopt the concepts of the sequential combinations of hybrid filtering approach. Namely, we propose a novel hybrid movie preference filtering approach based on movie genres to take the strength of content-based and CF methods. A user X  X  movie preferences can be expressed as a vector of genres with associated scores to mitigate the cold start problem. We also use a fuzzy inference method to resolve the sparse ratings problems and improve the computation time in the prediction phase. 3. The framework Figure 1 shows the system framework of the proposed genre-based fuzzy inference approach. Movie rating collection module: We use the MovieLens data sets collected by the GroupLens research group at the University of Minnesota. The data sets contain information about 943 users, 1682 movies and 100,000 ratings. We extract samples from the original data sets based on the number of ratings given by each user, which may be 150, 250, or 300 ratings. In addition, we capture users X  on-line search behavior when they browse movies, and each user X  X  explicit ratings for movies are recorded by the system. A log-parsing engine in the user behavior tracking module analyzes the log-files that track the user X  X  interaction with the system. We discuss the sparseness rates of sample data in Section 4. Movie preference modeling and inference modules: As mentioned earlier, the proposed content-based movie preference modeling approach is based on movie genres. Each user X  X  movie preferences can be To resolve the sparse matrix problem, we utilize a fuzzy inference method to infer the implicit and transitive relationships among users. Moreover, to reduce the computation time required to identify neighborhoods of users, we use the  X  -cut method to group users that have similar movie preferences. Recommendation module: This module matches a genre-based user X  X  profile with the database to stream-line the movie recommendation process. We use Genre-based , Collaborative, Fuzzy Inference and Genre-based Fuzzy Inference filtering methods to evaluate the recommendations in terms of the pre-cision rate and computation time. 4. The genre-based fuzzy modeling and inference approach 4.1. Genre-based user movie preference modeling User preference modeling: A movie may belong to more than one genre, for example, Toy Story III be-longs to the animation, adventure, and comedy genres. Each user X  X  movie preferences ( UP ) are expressed as a set of movie genres with associated scores, as shown in Eq. (3); where r k denotes the ratings for movies belonging to genre j ,and n j is the number of movies that belong to the j th genre . Thus, Genre j,useri means the x th user X  X  average movie preference for genre j . Accordingly, the UP of user x can be expressed as follows: Movie preference prediction: A user X  X  preference for a target movie t can be derived from his/her histor-ical UP ,asshowninEq.(5); where M t is the predicted preference score for a movie t, and SG denotes the total number of genres that the t belongs to. Note that SG is a subset of UP x for movie t .
 Example 1: Table 1(a) lists users X  ratings for movies with the corresponding genres. We use the table to calculate a user X  X  preferences for different movie genres. The user X  X  preference for a target movie is calculated based on Eq. (3). The results are shown in Table 1(b). We predict user 4 s (U4) preference for movie 4 (M4) based on Eq. (5). Note that movie 4 belongs to the Adventure, Crime and War genres. Accordingly, the predicted preference rating is 0.633, which is calculated as follows: 4.2. Genre-based fuzzy inference and grouping method 4.2.1. Fuzzy inference method
We employ a fuzzy inference method that identifies users with similar movie interests by analyzing the results of genre-based preference modeling. The steps of the process are as follows. Step one: A user -movie relation matrix is constructed according to Definition 1 .
 movie.

Then, we calculate Pearson X  X  correlation coefficient to measure the similarity of users X  movie prefer-ences and construct a user-user similarity matrix to represent their movie interests.
 Step two: To resolve the sparse matrix problem, we use the fuzzy inference method to infer the implicit and transitive relationships among users X  preferences. The method identifies users with similar interests there are very few explicit similarity scores in the similarity relationship matrix S .WeemployKlirand Yuan X  X  [15] transitive max-min closure method to derive a reflective, symmetric, and transitive matrix, which is a fuzzy equivalence matrix. The fuzzy equivalence relation can be used to classify the matrix X  X  outputs. Note that a fuzzy relation reflexivity, symmetry, and transitivity. Klir and Yuan X  X  definition of a transitive max X  X in closure S T in a similarity matrix S is given in Definition 2 .
 Definition 2: Given an n -by-n fuzzy similarity relationship matrix S representing the fuzzy relations among a set of users X ,where | X | = n , a transitive max-min closure S T of S is derived as S T = S y by applying a sequence of max-min operations on the relation matrix until S y = S y +1 = ... = S  X  .Note that S y = S y  X  1  X  S y  X  1 ,where y is an integer, 1 y n  X  1 and  X  denotes a fuzzy max-min operation. The max-min composition and max operator for set unions are used to derive the transitive max-min fuzzy transitive property will not be satisfied. Thus, the above similarity relation S does not satisfy the fuzzy transitivity property because s is not a fuzzy equivalence relation. After two more compositions, the fuzzy transitive relation S 3 = S  X  S  X  S is obtained and all three conditions of the fuzzy equivalence relation are satisfied, as shown in Fig. 2. 4.2.2. Fuzzy clustering: Selection of groups with similar interests
Next, we apply the  X  -cut operation to generate a proper set of neighborhoods. The operation can be ap-Different subsets of equivalence relations can be derived by setting different  X  degrees in the matrix S T to partition set X . One way to improve the quality of recommendations is to provide collaborative rec-ommendations based on a group of users that have similar movie preferences. A standard (non-fuzzy or  X  Example 3: If the strength of the relation between i and j is greater than or equal to  X  , it is set at 1; otherwise, it is set at 0. The outputs are classified based on the values of  X  . For example, if we set  X  = 0.7, we obtain the crisp equivalence relation matrix shown in Fig. 3(a). We can identify three groups in
Finally, the predicted value of a movie recommended to the target user is computed as the weighted sum of the neighbors X  ratings. 5. Experiment setup and procedure 5.1. Dataset analysis
We used one of the MovieLens data sets, collected by the GroupLens research group at the University of Minnesota. The data sets have proven useful in research on algorithms for recommender systems, as well as in numerous collaborative filtering publications (http://www.grouplens.org/node/12) [7,22]. They contain information about 943 users and 1682 movies with 100,000 ratings, as shown in Table 2. In the MovieLens system, users rate movies they have seen on a scale of 1 to 5. Then, the system makes recommendations via a collaborative filtering algorithm that that identifies movies that similar users liked. We sampled data from the MovieLens dataset based on the number of ratings ( RNs )givenby each user, which were at least 150, 250, or 300 ratings. Accordingly, the total number of ratings for the three sample data sets were 58,071, 31,205, and 14, 363, and the sparse rates were 84.76%, 78.69%, and 72.38%, respectively. Table 2 provides an analysis of the sparse rates of each sample data sets from the MovieLens dataset. We also calculated the distribution of the different rating scales with respect to the population and different data samples, as shown in Fig. 4. Clearly, the distribution of the sampled data was similar to that of all the data. 5.2. Experimental methods and procedures 5.2.1. Experimental methods and parameter settings We conducted two experiments to compare the effectiveness of the proposed Genre-based Filtering , Fuzzy Inference Filtering and Genre-based Fuzzy (G-Fuzzy) Inference Filtering methods with that of the promising Collaborative-based Filtering (CF) method. The methods are described in detail in Table 3. In Experiment 1, we evaluated the effectiveness of the proposed Genre-based Filtering method and the traditional automatic Collaborative Filtering ( CF ) method. The latter is a statistical approach that automates all the recommendation procedures used to predict user preferences based on the preferences of similar users [10]. Recall that an individual may only vote for a small number of items in a database, so ratings tend to be sparse. To resolve the problem, we propose two hybrid methods, namely, the Fuzzy Inference method and the G-Fuzzy Inference method. In Experiment 2, we evaluated the effectiveness of the two hybrid methods and compared the precision and time complexity of all the methods. We also compared the performance of the correlation-based and cosine similarity measures applied by the two hybrid methods. 5.2.2. Experimental procedures The experimental procedures for the Fuzzy Inference and G-Fuzzy Inference methods are shown in Fig. 5. The steps are as follows. (1) A genre-based profile is generated for each user, as mentioned in Section 4.1. (2) The Fuzzy Inference method infers the user X  X  preferences, as explained in Section 4.2. The G-Fuzzy Inference method inputs the null values of the user X  X  movie matrix, S , based on the genre preference values in advance. It then uses the Fuzzy Inference method to infer the user X  X  preferences. (3) The  X  -cut operation is applied to generate a proper set of neighborhoods. (4) We sample the training set and testing set to predict the user X  X  movie preferences. 6. Experiment results and discussion 6.1. Experiment 1: Comparison of genre-based and CF methods
In this experiment, we compared the performance of the Genre -based Filtering method and CF method for different numbers of p @ n recommended movies, i.e., the precision of the first n movies recom-mended. For the Genre-based Filtering method, we aggregated a user X  X  ratings for movies in terms of movie genres (e.g., action, comedy, drama, etc.) in order to predict the user X  X  ratings for unrated movies based on Eq. (4) and make recommendations. The CF method, which is based on the traditional au-tomatic collaborative filtering (CF) technique, makes a recommendation by computing the similarity between the target user X  X  preference and the preferences of other users. The rationale behind the method is that recommendations about products or services are often passed on by word of mouth [25,29]. CF algorithms must be able to (1) deal with very sparse data, (2) scale up with increasing numbers of users and items, and (3) make satisfactory recommendations in a timely manner [30]. We use Pearson correla-we varied the proportions of the training and testing sets using 60/40, 70/30, 80/20, and 90/10 splits for 10-fold cross validation (CV) of the three RN settings, i.e., 150, 250, and 350 ratings. 6.1.1. Genre-based filtering results Observation 1: Table 4 shows that the 90/10 split achieves the best performance in terms precision in cases and the average cases is similar under the 90/10 split of the sampling data set.
 Observation 2: Figure 6 shows that the best average performance is achieved when the number of ratings (RNs) is greater than 250, irrespective of the proportions of the training and testing sets. 6.1.2. The CF method
In the CF method, we set the threshold to select the proper number of neighborhoods. In this experi-ment, we chose users whose correlation values were in the top 20%, 30% and 40% of the targeted users as our thresholds. The groups of targeted users are called user preference similarity groups ( UPS ), i.e., UPS (0.2), UPS (0.3), and UPS (0.4) respectively. The experiment results are shown in Table 5 and Fig. 7. Observation 1: Table 5 shows that the 90/10 split achieves the best performance in terms of precision when the number of ratings (RNs) is greater than 250 or 350 in terms of precision in nearly all cases. Observation 2: Figure 7 shows that the best average performance is achieved when the number of ratings (RNs) is greater than 150, irrespective of the proportions of the training and testing sets. When the number of RNs is greater than 250, the performance is slightly worse than that of 150. Interestingly, more ratings, i.e., RNs 350, do not improve the performance of collaborative filtering. Thus, the results are influenced by the number of users used to recommend items.
 Observation 3: Table 5 and Fig. 8 show that, on average, UPS (0.2) and UPS (0.3) perform slightly better than UPS (0.4). Varying the number of neighborhoods seems to influence the result of a dataset with higher density and a smaller number of neighborhoods, i.e., when the number of RNs is greater than 350.
 6.1.3. Discussion
Figure 8 shows that the CF method outperforms the Genre-based Filtering method in terms of preci-sion, regardless of the sparseness rates. However, it requires much more computation time, especially for a dataset with a higher sparseness rate and more users, as shown in Fig. 9. Note that although a sample in which the set number of ratings ( RNs ) is greater than 150 yields the best performance, it requires much more computation time than the other sample sets. On the other hand, the computation time of the Genre-based Filtering method is not sensitive to the sparseness rates, as shown in Fig. 9. Accordingly, there can be a trade-off between the precision rate and computational cost when selecting a method to build the recommendation model. In the next section, we introduce and compare two hybrid methods that incorporate the strengths of the proposed genre-based and CF methods. 6.2. Experiment 2: Comparison of hybrid methods 6.2.1. Experiment 2-1: The pearson correlation-based hybrid methods
Based on the results of Experiment 1, we try to minimize the sparsity problem and the computa-tion time. Specifically, we propose two hybrid methods: the Fuzzy Inference Filtering method, and the Genre-base d Fuzzy Inference Filtering method ( G-Fuzzy Inference ). The methods combine the features of the CF and the Genre-based Filtering methods, which were introduced in Sections 2.2 and 4.2. We used Pearson X  X  correlation coefficient to predict users X  movie preferences. For the two hybrid filtering methods, we set different  X  degrees to cluster users into groups. In this experiment, we set  X  at 0.4, 0.5, and 0.6 respectively to group users. Table 6, Figs 10 and 11 show the experiment results. Observation 1: Table 6 shows the results of varying the proportions of the training and testing sets as 60/40, 70/30, 80/20, and 90/10 for 10-fold cross validation (CV) for the three RNs settings. Interestingly, in contrast to the results of the Genre-based Filtering and CF methods, these results show that the 90/10 split yielded the worst average precision performance. The 60/40 and 70/30 splits achieved better average precision performances. The finding suggests that the proposed hybrid methods can achieve a better performance without significant amounts of training data.
 Observation 2: Figure 10 shows that the average precision performance is the worst when the number of ratings ( RNs ) is greater than 150, regardless of the  X  -cut level. In addition, RNs 250 and RNs 350 returned similar results under different levels of  X  -cut settings. Observation 3: Finally, we compare the Fuzzy Inference and G-Fuzzy Inference Filtering methods. Figure 11 shows that, in terms of precision, the G-Fuzzy method outperformed the Fuzzy Inference Filtering method under various  X  -cut settings. The Fuzzy Inference method achieved the best perfor-mance under various training/test dataset splits when  X  was set at 0.4. For the G-Fuzzy Inference Fil-tering method, the results are similar regardless of the  X  -cut levels. The results show that the Pearson correlation-based G-Fuzzy Inference Filtering method yields better precision rates and more stable re-sults than the Fuzzy Inference method, regardless of the parameter settings. 6.2.2. Experiment 2 X 2: The cosine similarity-based hybrid methods In this experiment, we compared the performance of the cosine similarity measure with that of the Pearson correlation-based method. We evaluated two cosine similarity-based hybrid methods, namely the Fuzzy Inference Filtering method and the Genre-based Fuzzy Inference Filtering method ( G-Fuzzy Inference ). In both methods, we set different  X  degrees to cluster users into groups. Specifically, we set  X  at 0.4, 0.5, and 0.6 respectively to group users. Table 7, Figs 12 and 13 show the experiment results. Observation 1: Table 7 shows the results of varying the proportions of the training and testing sets as 60/40, 70/30, 80/20, and 90/10 for 10-fold cross validation (CV) under three RN settings for the two hybrid methods. In contrast to the results of the Genre-based Filtering and CF methods, the 90/10 split yielded the worst performance in terms of the average precision. The 60/40 and 70/30 splits achieved the best average precision performance. The results are similar to those of the correlation-based hybrid methods.
 Observation 2: Figure 12 shows that the average precision performance is the worst when the number of ratings ( RNs ) is greater than 150, regardless of the  X  -cut level. In addition, the RNs 250 and RNs 350 results were similar under different  X  -cut levels, especially for the Genre-based Fuzzy Inference Filtering method with the cosine measure. The Genre-based Fuzzy Inference Filtering method performed slightly better than the Fuzzy Inference Filtering method .
 Observation 3: Finally, we compare the Fuzzy Inference and G-Fuzzy Inference Filtering methods. Figure 13 shows that the G-Fuzzy Inference Filtering method achieved a better precision performance than the Fuzzy Inference method under various  X  -cut levels. The Fuzzy Inference method achieved the best performance under various training and testing splits when we set  X  at 0.4. The results of the G-Fuzzy Inference Filtering method are similar, regardless of the  X  -cut level. We conclude that the cosine similarity-based G-Fuzzy Inference Filtering method yields a better recommendation performance and more stable results than the Fuzzy Inference method under all parameter settings. 6.2.3. Discussion
In Fig. 14, we compare the precision of the correlation-based and cosine similarity measures for the two hybrid methods. Clearly, the Genre-based Fuzzy Inference Filtering method outperforms the Fuzzy Inference Filtering method on the two sampled data sets whose sparseness rates are 78.69%, and 72.38% respectively. The sparseness rate affects the performance of the Fuzzy Inference Filtering method; however, the Genre-based Fuzzy Inference Filtering method X  X  performance is not influenced by the sparseness rate. Moreover, the results of the Fuzzy Inference Filtering method vary under different  X  -cut levels, but the Genre-based Fuzzy Inference Filtering method X  X  results are similar under different  X  -cut levels. Overall, the Genre-based Fuzzy Inference Filtering method yields a better recommendation performance and more stable results under both similarity measures. 6.3. Overall discussions among methods
In Fig. 15, we compare the performance of the recommendation methods under two sparseness rates: 78.69%, and 72.38%, i.e., RNs 250 or RNs 350 respectively. The proposed G-Fuzzy Inference Filtering method outperforms the other methods in terms of precision. Moreover, the Fuzzy Inference Filtering and CF method achieve similar results. In contrast, the Genre-based Filtering method yields the worst performance. Basically, the genre-based fuzzy inference approach is a model-based framework that including training and testing phases to build and validate the model. For the training phase, the method infers the implicit and transitive relationships among users X  preferences by the transitive max X  min closure method [15]. It then identifies appropriate neighborhoods, i.e., group users, by applying an  X  -cut operation. For the prediction phase, the method only needs to compute the most relevant cluster prediction ratings. The computation complexity of the training phase and prediction phase is O( n 2 )and O( c ) respectively, where n denotes the number of users and c represents the number of cluster. However, for the prediction phase in the collaborative filtering (CF) method, the time complexity is approximately O( mn ), where n denotes the number of users and m is the number of items. Thus, compared to the other approaches, the CF method requires a significant amount of time to make predictions, as shown in Fig. 16. The presented hybrid approach, i.e., G-Fuzzy Inference , outperformed the other methods in terms of precision and computational efficiency. With regard to the density of the data, the hybrid methods achieve the best performance on datasets with 78.69% and 72.38% sparseness rates, i.e., the RNs are higher than 250 and 350 respectively. The experiment results confirm that it is practical to integrate simple  X  -cut grouping method reduces the computation time required to select neighborhoods without reducing the precision of the recommendations. Table 8 summarizes the advantages, disadvantages, and usage timing (context) for make effective recommendation. 7. Conclusion
Recommendation techniques are used in electronic commerce to predict users X  preferences based on the users X  ratings for items on websites. Then, items that may be of interest are recommended to the target user. In this work, we propose a genre-based fuzzy inference filtering approach that exploits the strengths of content-based and collaborative filtering techniques to predict users X  movie preferences. The approach classifies users X  ratings for movies into genres to mitigate the sparse ratings problem and make further mitigate the sparse matrix problem; and (2) the  X  -cut approach to group users in order to reduce the computation time required to select neighborhoods. The results of experiments on a dataset with different sparseness rates show that the proposed approach exploits the strengths of content-based and collaborative filtering to achieve a better performance than the CF and content-based filtering methods in terms of precision. In addition, the  X  -cut approach reduces the computation time. Note that an effec-tive recommendation system must be able to (1) collect users X  preferences for items explicitly, and (2) determine users X  search behavior patterns implicitly. Thus, the higher the number of ratings collected from users, the better will be the performance of the system. The proposed method can be applied to the on-line product-based recommendation, e.g., movies and books, as well as text-based recommenda-tion, e.g., review articles, and webpages. We will also seek data sets for use in extensive experiments to investigate the effectiveness of the proposed method.

The experimental results confirm that the proposed G-based Fuzzy Inference Filtering method can be integrated with an interactive movie recommendation system for use in a dynamic Web context. Some recent studies have shown that an individual X  X  preferences are correlated with his/her personality and prior knowledge [13,26]. Hu and Pu [13] proposed a personality-based system and demonstrated that users prefer to use a quiz-based recommendation system rather than a traditional ratings-based recom-mendation system. For example, Whattorent.com is a service that provides recommendations based on users X  personality traits and moods. The user X  X  i nput can also be used to fine tune the recommendation results. For example, MovieGEN [8] an expert system for making movie recommendations, utilizes a well-trained support vector machine (SVM) to predict the genres and the period of the movies that the user prefers based on his/her personal information. The system can ask the user questions to further refine the recommendation results. In a recent work, we proposed an anchor-based hybrid filtering approach that makes interactive movie recommendations. We utilized the proposed G-fuzzy inference filtering method in the back-end of the system. For the front-end, we introduced an interactive anchor-based user preference elicitation method that determines a user X  X  preference for a specific genre of movies via a series of quizzes [33]. In addition, Ma et al. [20] showed that integrating social context information into the filtering and recommendation process is effective. In a future work, we will also investigate whether recommendations.
 Acknowledgments This research was supported by the National Science Council of Taiwan Government and Fu-Jen Catholic University under the grant NSC99-2815-C-030-013-H and No. 409931074078 respectively. References
