 As an XML-based geographic modeling language proposed by Open Geospatial Consortium (OGC), Geography Markup Language (GML) has become an in-ternational standard [1] for encoding and exchanging geographic data in various Geographic Information System (GIS) applications. Similar to XML documents, GML documents are pretty readable while their redundant structural tags and text-like file storage usually make them extreme large in size. The worse is that GML documents are often much bigger than XML documents for containing a great amount of high-precision spatial data. In GML documents, geometric characteristics of geographic entities are described by spatial data items, each of which consists of a list of coordinates. If each coordinate is stored in binary format, it needs only 4 bytes (by using float type) or 8 bytes (by using dou-ble type). However, in GML documents, ea ch coordinate is stored in characters format and its storage space is up to tens of bytes (depending on precision).
The huge size of GML documents causes heavy cost on storage and trans-mission. As a result, GML compression becomes an important problem in GIS applications, especially in the mobile GIS scenarios where storage and trans-mission bandwidth are still and will continue to be relatively scare resources. The existing compression techniques for plain text files and XML documents are applicable to GML compression, nevertheless the compression performance is not satisfactory. On the one hand, plain text compression techniques [2 X 6] do not distinguish structural tags and data in GML documents. On the other hand, XML compression techniques [7 X 12] focus only structural tags, without an effective compression on spatial data in GML documents. We developed the first GML specific compressor GPress [13 , 14], which compresses structural tags and data in GML documents separately and adopts a floating-point delta encod-ing scheme in compressing spatial data. The compression principles of GPress are followed by the other GML compressors [15 X 17]. However, this floating-point delta encoding scheme is not effective and efficient in compressi ng all coordinates one by one in their occurring order in a GM L document. Because coordinates are not always monotonically increasing or decreasing and there may exist repeated X-coordinates, Y-coordinates or Z-coordinates in GML documents.

To compress GML documents effectively and efficiently, in this paper we pro-pose GPress++, a spatial proximity based GML compression method. GPress ++ is an improved version of GPress [13, 14], it is more effective in compressing spatial data, by transforming the spatial data items into blocks of coordinates (each block contains a fixed number of coordinates) and compressing the coor-dinates in each block via the following steps: constructing ordered coordinate dictionaries, encoding coordinates as their ordinal numbers in coordinate dic-tionaries, compressing coordinate dictionaries by applying delta encoding and compressing coordinate ordinal numbers by applying LZW encoding. We im-plemented GPress++ and conducted extensive experiments on real GML doc-uments to evaluate the performance of GPress++. Experimental results show that the proposed method outperforms the state of the art XML and GML document compressors in compression ratio, whiling maintaining an acceptable compression efficiency. Spatial proximity refers to the duplication and nearness of spatial coordinates or points. The proposed GPress++ compressor exploits spatial proximity to improve the compression of spatial data in GML documents. In this section, we present the architecture of GPress+ + and the implementation detail on the compression of spatial data. 2.1 The Architecture Figure 1 show the architecture of GPress++. Similar to GPress, while doing compression, GPress++ parses a GML doc ument firstly. The parsed structural tags are encoded as integers and saved in the structure container. The parsed data is divided into different groups according to the paths to the root element. Data in different groups is compressed b y different semantic compressors and directed to the corresponding data containers. All containers are allocated in memory, the contents of which are compressed by the gzip compressors and written to the output compressed GML document finally. Specially, spatial data items are grouped and compressed by the Coordinate Compressor and forwarded to the spatial data container.

AsshowninFigure1,the Coordinate Compressor comprises of five major modules, i.e., the Coordinate Parser ,the Coordinate Dictionary ,the Dictio-nary Encoder ,the Delta Encoder and the LZW Encoder . In compression, the Coordinates Parser module parses spatial data items into blocks of coordinates. When coordinates in a block reach a number, the Coordinate Dictionary module is called to collect unique coordinates in the block into ordered coordinate dic-tionaries. Then the Dictionary Encoder module encodes all coordinates in the block as their ordinal numbers at the coordinate dictionaries. Next, the Delta Encoder module compresses the ordered coordinate dictionaries and the LZW Encoder module compresses the sequence of coordinate ordinal numbers. Finally, the delta encodings and LZW encodings are streamed to the spatial data con-tainer. The decompression procedure of the Coordinate Compressor is inverse to the compression procedure. Due to limitations of space, we are not going to discuss the decompression procedure in this paper. 2.2 Implementation of the Coordinate Compressor In this subsection, we present the main implementation detail of the coordinate compressor, including the data structures and the various encoding schemes.  X  Data Structures. In the first scan of a coordina te block, GPress++ collects  X  Encoding Schemes. In the second scan of a coordinate block, GPress++ To evaluate the performance of the proposed coordinate compressor, we test 20 GML documents and compare the performance of GPress++ with that of the general text compressor gzip1.2.4 [18], the XML compressors XMill0.7 [7] and XWRT3.2 [12], and the original GPress [13, 14]. The 20 test GML documents include 15 real documents and 5 synthetic documents. The 15 real documents are selected randomly from three sources, including CityGML [19], GeoSciML [20] and OSMasterMap [21], their sizes ranging from 212KB to 84MB. The five syn-thetic GML documents are transformed from the same Oracle Spatial sample file about road features of USA and Canada, their size increased from 2.5MB to 1GB. All of the two XML compressors and the two GML compressors (GPress and the proposed GPress++) use the general text compressor gzip at back end. All the compressors are pre-compiled C++ applications which can be executed directly. All experiments are conducted on a PC with a 3.10GHz Intel Core i3-2100 CPU and 3GB RAM, running Windows XP OS.

We evaluate the performance of compressors by the following metrics: 1) Com-pressor performs better if it achieves lower CR values and is more efficient if it achieves higher CS/DCS values.

Figure 2(a) illustrates the average CR results of the five compared compres-sors over 20 test documents. The averaged CRs of all compressors lie between 0.2 and 2.5, and GPress++ outperforms the other compressors in averaged CRs over almost all datasets except performing worse than XWRT over the GeoSciML dataset. Especially, on the Synthetic dataset, GPress++ achieves a 77 . 1% im-provement on gzip and a 32 . 0% improvement on GPress in averaged CR.
Figure 2(b) and Figure 2(c) illustrates the averaged CS and DCS results of the five compared compressors over 20 test documents. The averaged CS values of all compressors lie between 9.3 to 60.0, and the averaged DCS values lie between 4.6 to 142.2. GPress++ performs moderately in averaged CS or DCS however runs faster than XWRT and/or GPress over serval datasets. For example, on the GeoSciML dataset, GPress++ achieves a 63 . 5% improvement on XWRT in averaged CS. On the Synthetic dataset, GPress++ achieves a 95 . 2% improvement on GPress in averaged DCS. High-precision spatial data in GML do cuments often causes heavy cost in GML storage and transiting as well as parsing. In this paper, we propose a spatial proximity based GML compression method GPress++, which transforms spatial data into blocks of coordinates and compress coordinates effectively. Experiments over 20 GML documents show that averagely the GPress++ compressor outper-forms major existing compressors, incl uding the general text compressor gzip, the state of the art XML compressors XMill and XWRT, and GML compressor GPress in compression ratio, while main taining an acceptable compression effi-ciency. Therefore, GPress++ is especially suitable for the applications such as mobile services, where resources of network and at mobile ends are very pressing. The future work is improving the encoding schemes in GPress++ to optimize interaction with compressed GML data.
 Acknowledgments. This research was partially supported by the National Nat-ural Science Foundation of China (NS FC) under grant No . 61173118.Jihong Guan was also supported by the  X  X huguang X  Program of Shanghai Municipal Educa-tion Commission and the Fundamental Research Funds for the Central Universi-ties. Qingting Wei was also supported by the Science and Technology Project of Jiangxi Provincial Department of Education under grant No. GJJ12147.
