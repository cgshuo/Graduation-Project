 Universal Character Set (UCS) is a union of characters/symbols of most languages in compose web links, web pages, and emails. However, there are many similar charac-Malicious people can use various similar characters from different languages to mimic  X  X itibank X , as shown in Figure 2. A real case is that another  X  X aypal.com X  (in which the second  X  X  X  is U-0430 in Unicode) was successfully registered in 2005. Un-wary users (and even expert users) could be easily spoofed by such phishing scam to expose their security sensitive information, such as credit card number, password, etc. This attack is referred to as homograph attack [4] and can also be expanded to web-pages and emails, in which similar characters can be used to generate content with the same reading effect to human users but escap able of content based phishing detection and spam filtering. In this paper, we address this problem and propose a method based on coloring to differentiate  X  X bnormal X  weblinks, webpages, and emails from the relatively  X  X ormal X  ones. 
We have ever briefly mentioned in [3] to color the Unicode strings to help end us-fixed coloring scheme and an adaptive coloring scheme. Both schemes are based on the same coloring algorithm we proposed, which selects colors from a set of available colors and assigns them to a set of required languages/scripts such that each lan-guage/script is displayed uniquely in color, while the color difference among different languages is maximized. As the characters in Unicode belong to different language regions [6], a straightforward idea is to assign the characters in each language region with an identical color, as used in Quero Toolbar [10]. However, our study shows that there are actually similar characters from the same language, as shown in Figure 1(a). Nevertheless, some languages are sharing with the same set of characters, e.g., basic Latin characters are used by French, German, and Dutch, etc. Hence, we analyze the UCS first and design a grouping mechanism to classify the characters, and assign each group of characters with one specific color. The additional color property could provide users with more information for understanding Internationalized Resource Identifiers (IRIs) or document context semantics. According to our proposed coloring scheme, we prototyped this idea and conducted user study on this Unicode string coloring scheme. Our user study shows that well designed coloring algorithms can warn the users better against homograph obfuscation. The rest of this paper is organized as follows. Section 2 introduces related work. In Section 3, we discuss the Unicode character coloring issues, which include character grouping, coloring palette construction, and the two coloring schemes. Section 4 demonstrates our prototype tool, Unicode String Illustrator. Section 5 presents our user study, which shows the effectiveness of the proposed coloring schemes. Finally, we conclude this paper in Section 6 and discuss future work in Section 7. 2.1 Anti-phishing The Web facilitates our daily lives, but also causes a lot of security problems, includ-ing DoS, worms, DNS poisoning, and router attacks. In recent years, phishing has emerged very quickly as a new but serious threat. It was reported that U.S. consumers lost 630 million US dollars over the past two years to fraudulent phishing e-mail scams, c.f. Consumer Reports [12]. The amount of money lost to online banking fraud figures from banking industry body, c.f. Apacs [11]. As a consequence, phishing becomes a hot topic to discuss in both the computer security society and the law en-forcement society. Most frequently used anti-phishing strategies focus on toolbars or extensions of Web browsers (e.g., Firefox and MS IE7). These can be classified into 5 main catego-ries by their methodologies. (1) Black/white list. The representative black/white list based systems include Phish-(2) Reputation scoring . This technique can use reputation scores either reported from (3) Malware detection . Malware is not phishing but it can be used to assist phishing. (4) Relevant domain name suggestion . This technique suggests users the most rele-(5) Personalized visual indicator . This technique is like posting a personalized stick 
These tool bar based strategies are end-user level solutions only and heavily rely on the end-users X  education level, experience, and vigilance. However some research-ers have shown that security tool bars do not effectively prevent phishing attacks [14]. many false alarms. In [1], Liu et al proposed an active and more comprehensive anti-phishing strategy, which determines suspicious links from emails (at end-users X  email readers/senders, or enterprise email serv ers, e.g., bounced-backed emails) and all possible cousin domain names. The webpage pages at the suspicious links are taken and compared with the protected webpages. Visually similar webpages are reported. Especially, enterprise users can use this st rategy for early detection of possible phish-ing Web pages and prepare themselves to clear potential security threats in their e-commerce environments without inconveniencing any end user. 2.2 Homograph Obfuscation Gabrilovich et al demonstrated homograph a ttacks [4] that visually identical weblinks can be created in International Domain Name (IDN). Phishers can simply find similar characters from UCS to replace certain ones in the legitimate web link to carry out the attack. Major Web browsers, such as Microsoft IE7 and Firefox, can display an IDN in Punycode (a translation of Unicode into the ASCII plane) in the address bar. How-ever, many users prefer to display their IDNs in their own language scripts. Because Punycode is an ASCII based encoding form rather than a user understandable form. It is to make IDN compatible to ASCII based DNSes. However, it is very difficult for a human to understand the meanings of the Punycode strings. Homograph attack is kind of Unicode attack [3], however, Unicode attack refers to more than visually similar two tools, IRI/IDN SecuChecker [3] and REGAP [2], developed to fight against Uni-code attack. The Unicode attack detection tools can help ICANN [5] and DNS regis-trars to detect malicious registration applications. 2.3 Coloring Techniques The standard color space is represented with the RGB system. Other color systems (such as Non-linear R'G'B', HSV, CIE L * a * b * and CIE L * u * v * , YCbCr, YIQ, and YUV etc.) have direct mappings to the RGB system. Each color system has its advantage for a specific representation. Although Non-linear R'G'B', YUV, and CIE L*u*v* are considered as better for differentiating colors, Riemersma X  X  investigation [8] shows that all of them have disadvantages and an approximated color distance assessment formula based on the RGB system is proposed, as shown in Eq. (1). Since about one some color safe strategy in our Unicode coloring scheme and we found the web safe color palette proposed by BT (Br itish Telecommunications) [7] is a quite g ood match for this requirement. 3.1 Criteria for Coloring Scheme Design Coloring Unicode strings is not as straightforward as assigning colors randomly to each language/scripts type. A good design should have the following features. Differentiability Visually similar characters could be identifiable from one another in the same context. A suitable color distance is necessary to measure the human X  X  perception to differen-tiate colors. We can use such measure to generate a reasonable color palette to use. By candidate color set. In addition, we should construct a color palette with as many colors as possible. Scalability UCS is a developing and growing repertoire, which means the Unicode consortium [6] is continuously adding more scripts to UCS to make it more  X  X omplete X  in each new version. Hence, the scalability of the coloring scheme is important. We indeed hope the proposed coloring scheme is st ill workable after the Unicode consortium publishes new versions of UCS. Readability/Usability The coloring scheme is to vividly show the mixture of different languages in certain context. We need to make the coloring resu lt comfortable for users. As we know, too colorful or contrastive images could make readers feel uneasy. Therefore, one big concern of the coloring scheme is the readability/usability problem. 3.2 Unicode Character Grouping We first should divide all the Unicode characters into different language/script groups. Phishers may carry out Unicode attack by employing different language scripts into the same context.  X  X ww.citibank.com X  is an example combining both Latin Basic and Cyrillic symbols. The highlighted  X  X  X  in this IDN is Cyrillic while the others are Latin Basic. Hence, the motivation of Unicode grouping is to list all of the elementary groups that we should assign colors to, such that we can finally distinguish how many and what languages/scripts are used in a particular Unicode string. 
It is reasonable to display characters of different languages/scripts in different col-ors. The Unicode consortium classified the Unicode characters into 11 region based groups and 122 subgroups based on different language scripts. We can assign one color to each subgroup. The complete list is available at [13]. However, these sub-instance, when we want to differentiate Simplified Chinese, Traditional Chinese, Japanese, and Korean in a Unicode string, we found that some of these characters are actually used by two or more languages. According to [6], the Unicode consortium merges all of the Chinese style characters in to CJK Ideographs. If we simply present CJK Ideographs into an iden tical color, we cannot differentiate these four scripts. Therefore we need more specific level subgroups to replace CJK Ideographs. We STJ, STK, SJK, TJK, STJK, e.g., ST denotes the group containing only Simplified Chinese and Traditional Chinese but no Japanese and Korean. 3.3 Coloring Palette Construction Before we start the coloring process, we n eed to know how many and what colors are available for us to use. Such set of colors is referred to as the color palette. It should contain as many differentiable colors as possible. We also design the palette as color-blindness safe; because 5% to 8% of men and 0.5% of women in the world are born colorblind (We limit the discussion to prot ans (red weak) and deutans (green weak) because they make up 99% of this group) . The department for older and disabled customers of British Telecom (BT) proposed a list of safe web colors for color-deficient vision in [7], which consists of 216 colors. We can simply choose colors from these colors to generate our coloring palette. In order to provide the best differ-palette from the most distinguishable to the least and we can use the ones having inter-distances greater than a threshold. This problem is equal to the Maximum Clique Problem [9], which is NP-Complete. To simplify the computation, we use a greedy solution in most times, however, our experiment with approximated optimal algo-rithm [15] shows similar result to the greedy algorithm but with worse computational performance). In the greedy algorithm, we first choose the color which is the most distant to the background and foreground, and then recursively choose the one which colors ranked in the descendant order of preference. Both the algorithm and the color-minimum color distance among all of the first n colors. E.g.,  X 0 255 51 MinDis-tance=516 X  (green color in the 4 th row) means the minimum distance among the first four colors is 516. The first color in the list does not have minimum distance to any previous color and is therefor e considered as infinite. 3.4 Unicode String Coloring Given a color palette, the Unicode string coloring algorithm assigns colors in the palette to each language/script subgroup of Unicode where we should follow the crite-ria in Section 1.4 for best of user experience. We propose two coloring schemes: Fixed Coloring Scheme and Adaptive Coloring Scheme. Fixed Coloring Scheme In the fixed coloring scheme, each language/script subgroup is assigned to a fixed color. Therefore, users will have a straightforward association between language and foreground color (e.g., black) such that the highly-reputable websites, such as www.hsbc.com and www.citibank.com, are displayed as they are. It is also acceptable main foreground color) the URLs in the white list. Figure 2 shows some examples of colored  X  X itibank X  using the fixed coloring scheme. In these examples, we use UC-SimList_v0.9 [3], which is now referred to as Similar Unicode Character Index the visually similar character groups with 90% or higher similarity using the pixel-overlapping assessment method. Adaptive Coloring Scheme Sometimes, we may want to be aware of the diversity of language/script usage in a given basic background and foreground, and do not really care about the association between language/scripts and colors. Hence, we can use the given background and needed from the palette. 
We can use it to illustrate the diversity of language/script usage in webpage blocks or document context. Figure 3 demonstrates some examples colored by the adaptive coloring scheme. Obviously, we can understand the diversity of language/script usage after coloring. Suppose we have one Unicode string composed by three languages, as shown in Figure 3(a) (white as the back ground color and black as the foreground color; the most frequently used language/script is assigned the foreground color). The column on the right side. Figure 3(c) and Figure 3(d) show more results using differ-ent color palettes. We prototyped the Unicode string coloring scheme and call it Unicode String Illustra-tor. It contains two parts, IRI Illustrator (the fixed coloring scheme) and Context Illus-trator (the adaptive coloring scheme). 4.1 IRI Illustrator When users are accessing (by clicking or copy-and-pasting) phishing IRI(s), the lan-guage/scripts X  property will be illustrated by different colors. 4.2 Context Illustrator Context Illustrator is a tool to present the language/script X  X  diversity in a context. The background color and foreground color ar e configurable. The coloring palette is automatically generated using the greedy algorithm. Figure 4 shows the coloring 
White) results of the Context Illustrator processing English, Chinese, and Japanese context with different background and foreground configurations. 
We can see that both the IRI Illustrator and the Context Illustrator can render Uni-code strings into a style that is effective to observe character-based obfuscation. We have done a user study to show the effectiveness of our coloring scheme through user study, which consists of two parts: Part I is to test the effect of Unicode coloring on the subjects X  ability to recognized different languages; and Part II is to compare the usability of the two coloring approaches. Three questionnaires (QN1, QN2, and QN3) white/black coloring approach (WBA). In this approach, characters are always in black and the background is always white . QN2 tests the random coloring approach (RA). In this approach we assign a random color to each language/script group and coloring approach (FAA, which is the colori ng approach we presented in Section 3 and demonstrated in Section 4). 
We recruited 15 subjects. None of them has previous knowledge of Unicode color-ing and none of them has color blindness disease. 5 subjects form a team and one team take one of questionnaires. Part I, Language/Script Usage Understanding posed by one or more language/script(s). The subjects are requested to count the number of used language/script(s) for each Unicode string. 
Figure 5 shows the experiment result. Among the 11 (number of Unicode strings) * 5 (number of subjects) = 55 answers, there are in total 11 questions correctly an-swered by the subjects of QN1, and 27 for QN2, and 29 for QN3. We can see that in all questions, subjects from QN2 and QN3 can do much better than the ones in QN1, and subjects from QN3 can do slightly better than the ones from QN2. Hence, we can conclude that coloring (RA and FAA) can do much better than none-coloring (WBA) on users X  language/script(s) usage understanding. We also conclude that FAA can do result. Hence, FAA cannot show much advantage to RA. However, when a Unicode string contains many colors, FAA should perform much better than RA. Part II, Usability Comparison for Different Coloring Approaches We request the subjects to compare the usability of different coloring approaches. QN1 compares WBA with RA, QN2 compar es WBA with FAA, and QN3 compares RA with FAA. 
Figure 6 shows the experiment result. Figure 6(a) shows that WBA is relatively similar to RA. The reason could be that RA does not consider the background and the used colors. Hence RA could assign similar color(s) to other language/script(s) or background. Figure 6(b) shows that FAA is much better than WBA, and Figure 6(c) shows that FAA is better than RA. Hence, FAA is better than both WBA and RA. Therefore we conclude that a well designed coloring approach can help end users better understand language/script(s) usage in a Unicode string. level obfuscation. We proposed two coloring schemes: Fixed coloring and Adaptive coloring. The fixed coloring scheme assigns a specific color to each language/script as web address coloring. The adaptive colori ng scheme calculates a coloring palette based on the given background, foreground colors, and the language/script composi-users to understand the language/script diversity in a Unicode string context. We coloring is a generally useful method to show the mixture of different languages/scripts and is useful for revealing the obfuscation intentions, only well designed coloring schemes can keep high usability and effectiveness for reading and understanding the colored Unicode strings. We have demonstrated that Unicode string coloring can help illustrate lan-guage/script(s) usage in IRIs and text paragraphs. However, it cannot illustrate the phishing intention of strings such as  X  X ww.citi-bank.com X . We plan to add this color-ing scheme into other phishing detection systems, such as REGAP [2], to make detec-1.0, we do not use all of the 15 subgroups of CJK. We only considered two sub-groups: Simplified Chinese and the rest CJK characters. We leave the more thorough number of colors by doing so. The work described in this paper was fully supported by a grant from the Research Grants Council of the Hong Kong Special Administrative Region, China [Project No. CityU 117907] and the National Grand Fundamental Research 973 Program of China under Grant No. 2003CB317002. We would like to thank Yeung Wan Hang, Chau Kin Man, and Mak Sheung Man for their help in the experiments and user studies in this project. 
