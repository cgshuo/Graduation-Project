 Today, individuals, companies, organizations and national agencies are increas-ingly interconnected, forming complex and decentralized information systems. In some of these systems, the very fact of exchanging information can constitute a safety critical concern. Take for instance Space Situation Awareness applications (SSA), in which space observation capabilities belonging to different nations are mutualized in order to build a complex information gathering, analysis and alert diffusion system. The mission of the system is to warn when situations of poten-tial collision between orbiting objects are detected. The system must, in case of potential collision, send relevant alerts and associated information to the right agents so as to allow them to avoid the collision, while guaranteeing that sensitive information about the orbiting objects, such as their exact nature, their trajec-tories, man X uvre capabilities, etc. will not be leaked. Another example is Global Earth Observation and Surveillance Systems (GEOSS). Observation information is exchanged by cooperating agencies or states, and it must be ensured that infor-mation about natural disasters will always reach the relevant authorities so that population protection measures can be taken in due time, while not revealing sensitive information about the earth observation means of the members taking part in the surveillance effort. In systems like SSA or GEOSS, qualified authorities must absolutely be warned as soon as evidence showing imminent natural disaster is acquired. We call such requirements: need-to-share requirement. In fact, the true requirement is the authorities need to know the information and from that we derive the need-to-share requirement. In a paradoxical way, because agents from different organi-zations share information, any risk of leakage of private or sensitive information about the cooperating parties must be prevented. So, the challenge is to reconcile these two antagonist requirements: firstly, ensuring that actors will always receive the information they need to perform their designated mission; secondly, ensur-ing that no sensitive information will be released in an uncontrolled manner. To do so, need-to-share and non-diffusion requirements should be expressed in a specification language which allows to formally specify the conditions under which agents have either the obligation, the permission or the interdiction to communicate information to other agents in the system. We call such specifica-tions information exchange policies . Besides the formalization of requirements, our goal is also to provide means of automatic formal verification of a num-ber of generic properties of policies. To obtain the high degree of automation needed by system designers while retaining a high performance of analysis, we provide peps -analyzer, an automatic semantic analyzer for policies, which works by translating property verification problems for policies to satisfiability mod-ulo theory problems, which are resolved using a state-of-the-art SMT solver, Microsoft Z3 in our case.
 In this paper, we give in section 2 a brief overview of an existing framework to specify information exchange policies and explain how we use satisfiability checkers to perform automatic analyses on them. After that, in section 3 we detail the running example of this paper. In sections 4 and 5 , we give formal definitions of two classes of generic properties, related to the need-to-share requirement on the one hand, and to the non-diffusion of information requirement on the other hand. Then, in section 6 , we proceed to identify cases in which these properties become logically incompatible and detail how the need of information filtering operations arises naturally. Last, section 7 concludes the paper and outlines perspectives to this work. In [ 5 ], we provided a formal framework named peps 1 , for the specification and verification of information diffusion policies. In this section, we show how we extend peps to take into account both diffusion and non-diffusion requirements explicitly.
 The benefit of using unified frameworks has previously been studied in the context of information access. In [ 11 ] for instance, the authors propose a mod-elling language, in fact a meta-model, which allows to express security and pri-vacy requirements; In [ 1 ] and [ 12 ] the authors propose similar approaches for security requirements. 2.1 The peps Formal Language The formal system underlying peps is many sorted first-order logic with equality [ 7 ](MSFOL).So, peps allows the use of sorts ( A , B , ...), free constants ( ...), f unctions and predicates (first letter in uppercase), polymorphic equality (=), usual logical connectors (  X  ,  X  ,  X  ,=  X  ) as well as sorted variables letter in lowercase), together with universal (  X  ) and existential ( Full details about the peps syntax and semantics can be found in [ 5 ]. tions and predicates. However, peps comes equipped with a minimalist set of core concepts, in the form of predefined sorts, functions and predicates: Sorts A , I , T represent respectively agents, information items and information topics. In addition, we have the following domain-predicates ,or D-predicates for short: K ( A, I ) is used to express that an agent A knows an information item predicate Topic ( I,T ) is used to express that information item topic T (a single information item can be relevant of many different topics). ator, because we focus on the concept of obligation to send information item from agent a to agent b . So, dedicated normative-predicates , called N-predicates , are provided: O Send ( A, B, I ), P Send ( A, B, I )and F tively encode the obligation, permission and interdiction for an agent an information I to another agent B .
 deontic logic. However tools dedicated to modal logic are less efficient than stan-dard logic solver tools [ 13 ] such as SAT solvers or SMT-solvers. By not repre-senting obligation with a modal operator we lose expressiveness, but we gain the use of efficient logic solvers to perform fully automatic analyses. axiom (D) which expresses that if a proposition P is obligatory then permitted. In peps , we translate this axiom to a first-order property we also call (D): if communication of an information item is mandatory between two agents, then it is also permitted.
 Definition 1 (D).
 obligation, permission or interdiction to send a piece of information to another agent. An exchange policy ( EP ) is a collection of exchange rule formulas. Definition 2 (Exchange Rule). An exchange rule is a closed of one of the following syntactical forms: where:  X  x  X   X  is a quantifier-free and N-predicate -free formula;  X  t , t 2 are quantifier-free terms of sort A ;  X  t 3 is a quantifier-free term of sort Also part of a peps specification is a formal description of in which the policy is meant to apply. The declaration of additional sorts and domain predicates needed to build a domain model suitable for a particular application is left to the user. These new predicates and sorts can be used in the left member  X  of the implication forming a rule, but not in the right member ( peps is extensible only with new sorts, functions and D-predicates, and not with new N-predicates).
 The combination of an exchange policy EP and set of domain constraints is called an exchange policy specification and is noted EPS = In the following sections, we will often have to assert that a policy specifi-cation EPS is in effect under the domain constraints and the hence introduce the following notation for what we call the policy formula . Definition 3 (Policy Formula).
 Last, we will use the notation P | = Q to state that Q is a logical consequence of
P , ie that any model of P is also a model of Q . 2.2 Formal Policy Verification In this section we first provide details on satisfiability checking algorithms used in the peps -analyzer tool, and then provide details on the generic properties that can be checked using the tool.
 The Peps-Analyzer Tool. We provide a tool which can be used both to find bugs in policies and to check that properties hold on policies. A semantic verification tool such as peps -analyzer is a valuable help. Even with as few as a dozen of rules, complex interactions between rules make it hard to identify and understand incoherences, incompleteness or redundancy using solely a mental model of the policy, or using test cases, or to be absolutely sure the policy indeed works as intended. With peps -analyzer we address verification problems which can be expressed as (one or more) satisfiability checks. In order to verify that P | = Q , meaning Q is a logical consequence of P , where MSFOL formulas, the unsatisfiability of P  X  X  Q is checked using an MSFOL satisfiability solver.
 Earlier versions of peps -analyzer were based on a pure SAT encoding of MSFOL satisfiability problems, where sorts were interpreted over finite domains, and by using a bounded model checking approach: domain cardinalities were increased iteratively up to user-specified bounds, and quantifiers grounded on these finite domains. This approach was fully automatic, but the validity of the analyses was only up to a finite and relatively small number of information items, agents, topics, etc.
 fication to satisfiability, however MSFOL formulas generated by (always involving quantifiers) are now directly given to an MSFOL-capable satisf-fiabilit solver which natively supports quantifiers, and handles quantifier instan-tiation internally using advanced algorithms. Quantifier handling in SMT solvers has come a long way since the early days, and Microsoft Z3 [ 10 ], the back-end solver used by peps -analyzer, is able to handle the quantified formulas arising from policy verification without user interaction or manual tuning. The huge advantage is that proofs obtained this way hold for sort interpretation domains of infinite cardinality. Models returned by Z3 for satisfiable formulas are pre-sented to the user when they represent counter example to policy properties. Generic Policy Properties. peps -analyzer allows to either prove or disprove four generic properties: consistency , applicability minimality ,and completeness . by the domain model such that an agent is both obliged (or permitted) and prohibited to send an information to another agent. The applicability property holds if for each rule, there exists at least one situation allowed by the domain model in which the rule applies. The minimality property holds if no rule can be deduced from a combination of the other rules, under the domain constraints. ness property holds if and only if, in any situation allowed by the domain model, for any information topic, any agent who knows an information item is either obliged, permitted or prohibited to send it to any other agent. Completeness checking aims at detecting situations in which the policy does not tell the agent what to do with a piece of information.
 numerous works with few variations, as in the case of access control in a multi-level security context [ 4 ] or in the problem of merging two policies [ 8 ]. is most of the time decomposed in phases, and in each phase the designer(s) might want to focus on a subset of the possible information topics covered by the policy. Second, policies might be designed collaboratively by distinct parties, each one paying attention only to a certain subset of all possible topics. In the context of Earth observation for instance, military operators may want to ensure that the policy is complete for any military-relevant topic, without much care for other topics. In situations like these, the completeness check will fail as long as the policy is in an intermediary state and missing rules. It could be interesting to define a restricted form of completeness, which would be checkable as the design of the policy progresses, without waiting for the policy to be in its final state. So, we propose to adapt the completeness notion by making it relative to a given information topic T . We call this restricted form of completeness T -completeness.
 Definition 4 ( T -Completeness of a Policy Specification). Let EPS =  X , EP be an exchange policy specification, and T a constant of sort that EPS is complete relative to T ,or T -complete if and only if the following holds:
EPS | =  X  a,  X  b,  X  i, ( K ( a, i )  X  Topic ( i, T ) So, a policy is T -complete if and only if for any agent who knows a piece of information relevant of a topic T , the policy specifies whether the agent is obliged, permitted or prohibited to send it to any other agent. We now introduce a simple running example which will help us illustrate the rest of the paper. In this example, agents represent anything from individuals to organizations in possession of earth observation means. We distinguish a specific group of agents: the Geohazard Management Group , noted GMG , whose mission is to prevent false geohazard warnings and to organize disaster management plans. The policy for this system is very simple and consists of four rules: r1  X  X ny agent not part of the GMG has the obligation to communicate any geohazard-related information to at least one member of the GMG. X  r1b  X  X ny agent not part of the GMG has the permission to communicate any geohazard-related information to any agent part of the GMG. X  r2  X  X ny agent which is not part of the GMG is forbidden to communicate geohazard-related information to any agent not part of the GMG. X  r3  X  X gents of the GMG have the permission to communicate geohazard-related information to any agent. X  Therule( r1 ) shows that we are indeed dealing with the need-to-share require-ment, the necessity for other agents to communicate geohazard-relevant informa-tion to a member of the GMG is essential for the GMG to accomplish its mission. The rule ( r1b ) handles the cases ignored by ( r1 ), any agent external to GMG knows what to do with respect to any agent of the GMG besides the one for which communication is mandatory. The rule ( r2 ) prevents the risk of mass-panic movements which could result from a brutal dissemination of geohazard information to the general public. The rule ( r3 ) illustrates the benefits of the permission modality: details of the criteria used by the GMG , which could involve human appreciation, to eventually issue a public alert or not are abstracted away by the optional nature of the permission. The permission operator hence allows to model policies at a high abstraction level , which is desirable for an early use of this formalism in the design process.
 sort T representing the geohazard information topic and a new domain predicate GMG ranging over the agent sort A .
 we need it. In this example, and for the rest of this paper, we choose to model groups in a simple and abstract way. For that, we introduce a predicate over the agent sort for each group. These predicates can be viewed as membership predicates, characterizing groups of agents. Each predicate acts as a character-istic function for the group it represents, i.e. the predicate evaluates to for agents which are part of the group, and to  X  for agent which are not part of the group. Note that, of course other ways to model groups are possible in instance by introducing a sort G to represent the groups, and by using a predicate mb ( g : G ,a : A ) for membership testing, as found in OrBAC [ 9 ] models. false when it is not.
 peps as follows: tem, by adding the domain constraint d :  X  X ny information is relevant of at least one topic. X  to the policy, which is written in peps as follows: d : { d } , { r1 , r1b , r2 , r3 } is Geo -complete, consistent, applicable and minimal. In systems like GEOSS or SSA, it is frequent that some designated group of agents has missions requiring it being aware of any piece of information relevant of some topic T . In our example, the group GMG needs to know any piece of information related to the topic Geo . It can hence be desirable to check that the rules of a policy guarantee that the said group never misses such information. We call this notion T -awareness, and define it formally as follows: Definition 5 ( T -Awareness of a Group G ). Let EPS =  X , EP be an exchange policy specification, T be a constant of sort T and ranging over the sort A , characterizing a group of agents T -aware according to EPS if and only if:
EPS | =(  X  a,  X  i,  X  b, K ( a, i )  X  Topic ( i, T )  X  X  G ( So, the group G is T -aware according to EPS if and only if any agent outside of
G knowing a T -relevant information item has the obligation to send it to at least one agent belonging to the group G .
 If the group contains only one agent A , then G ( a test ( a = A ), and after simplification we get the following definition of agent-awareness.
 Definition 6 ( T -Awareness of an Agent A ). Let EPS =  X , exchange policy specification, T be a constant of sort T and sort A . We say that A is T -aware according to EPS if and only if:
EPS | =  X  b,  X  i, K ( b, i )  X  Topic ( i, T )  X  X  ( b = A So, the agent A is T -aware according to EPS if and only if any other agent knowing a T -relevant information item has the obligation to send it to On a side note, if an agent is T -aware for all possible topics it is called omni-scient , but this case somehow lies at the border of our scope of study. Indeed, an omniscient agent is an agent which has a total knowledge of the system, meaning information is centralized by one agent, which does not correspond to systems we are studying here.
 Using peps -analyzer, we check that the example policy { d satisfies the Geo -awareness property for group GMG (indeed, rule ( r1 ) is a direct instantiation of the property). If the T -awareness property allows to verify that T -related information is sent to the right group of agents in a system, it can be interesting to verify a dual property, namely that information about some topic (presumably a sensitive one) cannot reach a group of agents, a single agent or can simply not be disseminated at all. Given a group of agents, one can be interested in regulating the diffusion of information in the following cases: purely outside of the group, from outside to inside or from inside to outside the group. The case of diffusion within the group is not relevant here since we are interested in characterizing the diffusion of information with respect to the boundary defined by the group.
 Definition 7 ( T -Restriction to a Group G ). Let T be a constant of sort G be a predicate ranging over the sort A , characterizing a group of agents, and let EPS be a policy specification. (a) T -out-out-restricted according to EPS if and only if: (b) T -out-in-restricted according to EPS if and only if: (c) T -int-out-restricted according to EPS if and only if: of T -relevant information is only allowed within the group.
 mation in a system, expressed as: communication of T -relevant information is forbidden between any pair of agents.
 Definition 8 (Strict T -Restriction). Let T be a constant of sort EPS be a policy specification. The topic T is said to be strictly restricted accord-ing to EPS if and only if: empty G group, modelled as  X  a, G ( a )  X  X  X  .
 r2 , r3 } satisfies the Geo -out-out-restriction for the group GMG . Indeed, Geo -relevant information cannot be sent between agents outside of GMG , however agents of GMG can receive information from external agents, and also have the permission to communicate with other agents outside of the group. 6.1 Incompatibility between Awareness and Restriction Properties Let us further assume that the example system will also have to deal with sen-sitive information, and that we would like to ensure strict non-diffusion of this new kind of information. We add the following rule ( r4 ) to the exchange policy: r4  X  X t is forbidden to exchange any piece of sensitive information. X  sort T to model the new topic, and add the following rule: The consequences of adding ( r4 ) are rather important, since the example policy { d } , { r1 , r1b , r2 , r3 , r4 } is now inconsistent.
 The phenomenon is the following: if an agent knows a piece of information which is relevant of both Geo and Sens topics (imagine for instance a single satellite picture taken by a military satellite, showing a risk of natural disaster entailing the interdiction for the agent to send this piece of info to any agent of one agent of GMG (according to ( r1 )). These two requirements are obviously contradictory, and violate the consistency property defined for policy by permitting and forbidding the communication of an information item relevant of both Geo and Sens topics.
 In fact, the problem is not specifically tied to this example, it is more general. If we consider the T 1 -awareness property for a group G 1 restriction properties for a group G 2 in a strictly logical way, depending on the domain constraints and on how G 1 and G 2 behave under them, it can be possible to build models satisfying both properties and where it is both mandatory and forbidden to send an information from an agent to another agent all have the same structure: at least one piece of information relevant of both topics T 1 and T 2 exists, and the group predicates G 1 and agents exist inside and/or outside G 1 and G 2 while satisfying the premises of the properties. 6.2 An Ad-Hoc Solution In order to fix the problem of possible conflict between the necessity of diffusion and the obligation of non-diffusion, we propose to introduce an abstract operator in the framework, noted P , and to give it properties allowing to obtain both Geo -awareness for GMG and strict non-diffusion for the topic Sens . Information being a multidimensional entity, a piece of information can be relevant or more than one topic, we might be able to resolve the conflict by having this new operator selectively forget or erase the problematic topic from a multi-topic information item.
 In the case of our example policy, we introduce the new operator as a func-tion taking an information item and returning an information item, with the signature P ( i : I ): I . We want this operator to forget about the sensitive part of an otherwise geohazard-related piece of information, so we have two domain constraints: ( p1 ) an information produced by P is never relevant of the Sens topic and ( p2 ) an information remains Geo -relevant when which the operator needs to be used and the ones where it does not. Firstly, we item is related to Geo and not to Sens , agents have the obligation to send it to a member of the GMG , but if the item is also Sens -relevant, the agents need to apply the abstract operation P before sending it. r11 :  X  a,  X  i,  X  b, K ( a, i )  X  Topic ( i, Geo )  X  Topic ( r12 :  X  a,  X  i,  X  b, K ( a, i )  X  Topic ( i, Geo )  X  X  Topic ( rules ( r1b1 ) and ( r1b2 ) to take the new Sens topic into account. r1b1 :  X  a,  X  i,  X  b, K ( a, i )  X  Topic ( i, Geo )  X  Topic ( r1b2 :  X  a,  X  i,  X  b, K ( a, i )  X  Topic ( i, Geo )  X  X  Topic ( member of the GMG is allowed to communicate a piece of information related to geohazards to any other agent if the piece of information is not sensitive. r3 :  X  a,  X  b,  X  i, K ( a, i )  X  Topic ( i, Geo )  X  X  Topic ( { d , p1 , p2 } , { r11 , r12 , r1b1 , r1b2 , r2 , r3 , r4 } consistent, applicable, minimal and satisfies the strict restriction property for topic Sens .
 more, for the following reason: in some situations the rules specify to send the result of applying the P operation to a Geo -relevant information item instead of the information item itself, whereas the awareness property requires this infor-mation to be sent.
 sent all possible information items related to the Geo topic, be it the raw items or the items after a modification such as P , as long as the Geo -relevant part is preserved. So, the Geo -awareness property for the GMG group needs to be reformulated to reflect this nuance. We will now consider that the GMG group is Geo -aware if and only if any agent outside of the GMG and knowing a Geo -relevant information has the obligation to send it to a GMG member, or the obligation to send it to a GMG member after applying P , as long as the Geo -relevant part of the information.  X  a,  X  i, K ( a, i )  X  Topic ( i, Geo )  X  X  GMG ( a )=  X  Another important point to remark here is that the conditions specifying when to use or not to use P are not given in this property, for the following reason: we want this property to be generic and more abstract than the policies against which it will be checked, and we want it to be only expressed in terms of the Geo topic, and not the Sens topic.
 In fact, the operator P operates as a topic-filtering operator, and corresponds to an operation already routinely performed by any organization managing sen-sitive data, prior to releasing it to a tier. Depending on the field and exact In the next sections, we will propose more elegant and general definitions of the filtering operation and awareness property. 6.3 A Generic Information Filtering Operator In order to model operations such as declassification and its variants in we introduce a new generic filtering operator , parameterized by a filtering mode . Each mode specifies which topics are preserved by the filtering and which topics are removed from the information item by the filtering.
 In peps this is modelled by introducing a sort M representing the filtering modes, the filtering operator as a function with signature Filter ( I and two predicates Preserves ( m : M ,t : T )and Removes ( specifying if a given topic is preserved or respectively removed by a mode. The following axioms formalize the behaviour of the filtering operator with respect to the mode properties.
 Definition 9 ( F Axioms). The first axiom enforces coherence between preservation and removal predi-cates, it states that if a mode preserves a topic, then it does not remove it. The second (respectively, third) axiom states that if an information item is relevant of a topic preserved (respectively, removed) by a mode, then it is still relevant (respectively, not anymore relevant) of this topic after filtering using this mode. The ad-hoc P operator, defined in the last section for the running example, can now be replaced by the generic Filter operator. First, we declare a constant FilterSens of sort M , representing the mode which filters the sensitive contents out of an information item. Second, we add the following domain constraint stating that the mode FilterSens preserves the topic Geo and removes the topic Sens : Last, all occurrences of P ( i ) in the rules of the policy are replaced with Filter operator, and satisfying the same properties.
 predicates is only partial, since other conditions must be taken into account when using the operator, such as the agent capacity to actually perform the filtering, the fact that filtering could be applicable only on information items satisfying specific conditions, etc. All extra conditions characterizing filtering modes can be grouped to form what we call a filtering policy . Similar notions already exist in extensibility of peps and the expressive power of the underlying logic certainly allows to model such details, but we deliberately do not develop further this topic in the present paper. 6.4 Generic Awareness and Restriction Properties Wiser from the filtering operator definition we can redefine the awareness prop-the restriction properties of Definition 7 . Now, a group of agents is only if any agent outside the group knowing a T -relevant information item the obligation to send I directly, or to send Filter ( M, I M preserving the topic T , to at least one agent belonging to the group. Definition 10 ( T -awareness for a Group G ). The group G in the presence of filtering if and only if the following property holds:
EPS ,F | =(  X  a,  X  i, K ( a, i )  X  Topic ( i, T )  X  G ( a (  X  b, G ( b )  X  ( O Send ( a, b, i )  X  X  X  m, Preserves ( m, T mulation. The non-diffusion of a piece of information related to a restricted topic is achieved by using the filtering operation in the exchange policy. This moti-vates the use of the Removes predicate to specify which topics are removed by each filtering mode.
 icy { d , f } , { r11 , r12 , r1b1 , r1b2 , r2 , r3 , r4 } operator, satisfies both the new Geo -awareness and the Geo -out-out restriction for the group GMG and the strict restriction for Sens topic, in addition to Geo -completeness, Sens -completeness, consistency, applicability and minimality. In this paper, after giving a brief reminder about peps , a formal information exchange policy specification language, and about peps -analyzer, an SMT-based property checker for peps , we introduced and formalized two new antagonist classes of properties: the awareness and the restriction properties. We showed that in some cases satisfying both properties can be logically impossible, which in turn motivated the definition of an information filtering operator. Thanks to this new operator, we obtain a framework in which both exchange policies and filtering policies can be specified, and awareness and diffusion restriction properties can be formally verified.
 Ongoing work aims at extending the core peps modelling language with notions of organization and agent roles , taking inspiration from existing work on organization-based and role-based access control policies (OrBAC [ 9 ]). This will allow peps users to specify more generic and high-level diffusion rules in terms of roles and organizations, and let them assign specific agents to roles and organizations in a second step, for a particular application context of the policy. Another important topic on our road-map is that of automatically deriving information filtering requirements, based on counter-examples to non-diffusion requirements: for rules involved in the violation of a non-diffusion requirement, peps -analyzer will identify where to insert relevant information filtering opera-tion to prevent non-diffusion violation, while preserving diffusion properties, and present suggestions of modifications of rules to the user.

