 We describe a technique to automatically classify a web page into an existing bookmark category to help a user to book-mark a page. HyperBK compares a bag-of-words represen-tation of the page to descriptions of categories in the user X  X  bookmark file. Unlike default web browser dialog boxes in which the user may be presented with the category into which he or she saved the last bookmarked file, HyperBK also offers the category most similar to the page being book-marked. The user can also opt to create a new category; or save the page elsewhere. In an evaluation, the user X  X  pre-ferred category was offered on average 61% of the time. H.3.3 [ Clustering ]: Information Search and Retrieval Algorithms Automatic Classification, Bookmarks, Web Browsers
Bookmark management systems that can help classify bookmarked web pages, track web pages that have moved since they were bookmarked, help a user to find web pages similar to pages that were bookmarked, and that generally assist with their own organisation are becoming increasingly important. Recent surveys indicate that a user X  X  bookmark file contains on average 184 entries [3], and that approxi-mately 73.7% of pages visited are page revisits [5], with in-teraction through either a bookmark file, or the history list of recently visited sites, or the browser X  X  back button being the most common ways of revisiting a page. Web brows-ing software, such as Mozilla Firefox and Microsoft Internet Explorer, provide only limited support for automatic man-agement of bookmarked web pages [6], and even less support is provided for navigating through the list of recently visited web pages to enable a user to return to a recently visited page [5]. HyperBK [2] addresses some of the issues. Hy-perBK is implemented as a Firefox extension and utilises a third-party search engine to track bookmarked Web pages that have changed location. A user can be reminded of the query that had been used to find a web page before it was bookmarked, or HyperBK can suggest a query to use to find web pages similar to a category of bookmarked web pages. HyperBK provides a variety of views to potentially make it easier for a user to find an entry in the list of recently visited web pages. Finally, HyperBK automatically recommends a bookmark category into which to store a web page to be bookmarked. This last feature is the subject of this paper.
Similar systems are reported in Sect. 2. The web page classification algorithm is described in Sect. 3, and results of the evaluation are presented in Sect. 4. We give our future work and conclusion in Sect. 5.
Bookmark management systems are usually offered as stand-alone systems -unlike HyperBK, none is integrated into a browser [2], and as discussed in our earlier work [2], web browsers offer minimal bookmark management facilities. Most systems do not offer automatic web page classification fea-tures, although Abrams, Baecker, and Chignell [1] list some requirements for bookmark management systems. Among their requirements are improving the organisation of book-marks on behalf of the user, possibly by automatically  X  X il-ing X  new bookmark entries, and integrating the bookmark management system with a web browser. Feng and Brner [4] use  X  X emantic treemaps X  to categorise bookmark entries. Li and Yamanishi [7] use a  X  X inite mixture model X  to classify documents, but this requires the prior existence and stan-dard description of categories in which to place documents. On the other hand, Shen, et. al. [9] use a page summary on which to base a classification.
We parse each accessed web page using its Document Ob-ject Model (DOM) to extract the text components. We re-move stop words, HTML and JavaScript tags, and the re-maining words are stemmed using the Porter Stemmer [8]. The five stems with the highest term frequency are selected to represent the page, but only if they have a frequency of at least two, otherwise only three stems are selected. This helps to keep down computational costs. If a web document con-tains META keywords, then the five META keywords that occur most frequently in the document are used instead.
Categories;  X  X its X  = bookmarks allocated into correct category;  X  X isses X  = bookmarks allocated wrongly;  X  X ear (excluding the Bookmarks Root);  X  X pprox Precision X  =
The algorithm used to select the candidate category is based primarily on simple keyword matches. As was de-scribed above, each time a web page is accessed, represen-tative keywords are extracted and stored. If the page is bookmarked into a category, these terms are added to the set of terms that represent the category. The recommended category is the category that has the greatest number of keyword matches for the incoming web page. If this fails, then the recommended category will be the category that contains another page from the same domain, as long as the category and page share at least one keyword in common. Finally, if even this fails, then the page title is compared to the category descriptions. The category with the highest number of term matches is recommended.
We collected real user X  X  bookmark files to see if HyperBK would assign bookmarked pages to categories in the same way that the users did. We require bookmark files to be organised (and to contain some categories), and we assume that the user has assigned each bookmarked page to the correct category. This is a weak assumption but we had insufficient time to conduct a longitudinal study.
Students following the BSc IT (Hons) degree programme at the University of Malta were invited by e-mail to submit their bookmark files. Of approximately 200 students con-tacted, 30 submitted their bookmark files (a return of about 15%). Of these, 22 files were considered inappropriate for use because they did not contain more than one or two cat-egories, and we felt that including them in the evaluation could unfairly bias the results in HyperBK X  X  favour.
We randomly removed 10 URLs from categories of 5 of the remaining 8 bookmark files. We removed less than 10 URLs from the other three: in two cases because there were too few categories overall and in the third case (79231 in Table 1) because although there were many categories, most of them contained very few bookmarks. The challenge was to place the randomly chosen bookmarks into the same categories selected by the users. The results are given in Table 1.
We would hope for a generally high precision, perhaps dropping slightly as the number of categories grows, espe-cially if categories become less distinguishable from each other (because only 5 terms are selected to describe a page). For two bookmark files containing 38 and 45 categories, pre-cision drops to below 0.7, which is probably unacceptably low. However, one of the two bookmark files contains many similar categories, and the other had many categories most of which contained unrelated bookmarks.
Automatic bookmark file classification could be a useful extension to web browsers. Instead of just offering the last category used to store a bookmark, or dumping the newly created bookmark into a default location, HyperBK recom-mends a category based on a simple matching algorithm, which has been extended to consider the domain names of previously bookmarked pages and keyword extraction from titles. In an experiment, 61% of bookmarks were classified correctly. Next, we intend to modify the approach to key-word selection and category representation. First, we will segment a document into its component topics, and extract keywords from the topic most likely to be relevant to the user. A Web page is likely to contain information about more than one topic, but it is unlikely that the user has bookmarked the page because of an interest in all of its top-ics. Representing a category and a document to be book-marked using only keywords that occur in topics of interest to the user may help to improve precision. [1] D. Abrams, R. Baecker, and M. Chignell. Information [2] I. Bugeja. Managing WWW browser X  X  bookmarks and [3] A. Cockburn and B. McKenzie. What do web users do? [4] Y. Feng and K. Brner. Using semantic treemaps to [5] E. Herder. Forward, Back, and Home Again -[6] W. Jones, H. Bruce, and S. Dumais. Keeping found [7] H. Li and K. Yamanishi. Document classification using [8] M. F. Porter. An algorithm for suffix stripping. [9] D. Shen, Z. Chen, Q. Yang, H.-J. Zeng, B. Zhang,
