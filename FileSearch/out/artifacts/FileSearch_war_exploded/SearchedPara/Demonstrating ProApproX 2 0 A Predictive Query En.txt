 ProApproX 2.0 allows users to query uncertain tree-structured data in the form of probabilistic XML documents. The demonstrated version integrates a fully redesigned query engine that, first, produces a propositional formula that represents the probabilistic lineage of a given answer over the probabilistic XML document, and, second, searches for an optimal strategy to approximate the probability of the lineage. This latter part relies on a query-optimizer X  X ike approach: exploring different evaluation plans for different parts of the formula and predicting the cost of each plan, using a cost model for the various evaluation algorithms. The demonstration presents the graphical user interface of ProApproX 2.0, that allows a user to input an XPath query and approximation parameters, and lists query results with their probabilities; the interface also gives insight into the way the computation is performed, by displaying the compila-tion of the query lineage as a tree annotated with evaluation operators.
 H.2.5 [ Database Management ]: Heterogeneous Databases; G.3 [ Probability and Statistics ]: Probabilistic algorithms (including Monte Carlo) Algorithms, Design Approximation algorithm, cost model, probabilistic data, query processing, XML
Probabilistic XML suggested itself as a natural represen-tation choice in many applications that require uncertainty management [6] and where data is already semi-structured, such as uncertain data integration, XML warehousing, un-certain version control, or Web information extraction. An example probabilistic XML document is shown in Figure 1, as an excerpt from the probabilistic movies database, real-life uncertain data obtained from a probabilistic data integration application [2, 3].
 The distributions of the event variables are stored elsewhere, and are gathered from the original document.

Our query language is tree-pattern queries extended with joins [6] and the major challenge behind query processing is the confidence computation of a given answer. This problem turns out to be that of evaluating the probability of a propo-sitional formula. This is because ProApproX constructs for each query match the conjunction of all probabilistic literals on the path from the root to one of the node matched by the query. The obtained formula happens to be always in a disjunctive normal form (DNF). The problem computing its probability of a formula in DNF is known to be #P -hard in general, even when all events have the same distributions [11]. This problem, however, admits a fully-polynomial random-ized approximation scheme [4], as does that of querying a PrXML cie document [5].

We briefly describe next the design of the approach im-plemented in ProApproX 2.0, for answering a query over an PrXML cie document (for more detail, see the full description in [10]), before moving to the presentation of the demon-strated interface.

A companion video for this demonstration, as well as the full code of ProApproX 2.0, is freely available at http: //www.infres.enst.fr/~souihli/ProApproX2.0.html .
ProApproX implements a number of exact and approx-imate algorithms for computing the probability of a DNF formula, each associated with a cost model [10]. This cost model was established in order to predict the best compu-tation method for a given input formula. The second key principle behind the ProApproX 2.0 query engine relies on a simplification of the computation process via a decomposition of the probabilistic lineage into independent computational units [10].

Figure 2 illustrates the architecture of the system: (1) The user XPath query is translated into a different query ex-pressed in ithe XQuery language, used to extract the proba-bilistic lineage. (2,3) The lineage queries are evaluated over the XML dataset through the XML::DB API for BaseX 1 , the native XML DBMS. (4) The gathered probabilistic lineage is compiled by ProApproX: Lineage preprocessing: optimizations over the DNF (re-Compilation: repeated application of a number of oper-Exploration: construction of possible evaluation plans by Computation: execution of the computation at each node (5) The probability of the user query is then displayed. We note that, with respect to the first version of Pro-ApproX [9], in addition to adding numerous features (more complete set of evaluation algorithms, better XPath support, http://basex.org/ of time spent at different steps of the evaluation process, namely: the query translation, the BaseX lineage extraction time, performance of optimizations (pre-computation phase), the compilation time, and what was spend on finding and executing the best evaluation plan. (4) The lineage query panel in the result section, displays the translations of the input XPath query into lineage queries. The first one is related to the Boolean projection of the query, and returns a DNF composed of a disjunction between lineages of every matching path in the tree. The second translation produces the list of result items, grouped by their values, each with its DNF lineage. (5) The item list table is then displayed with omputed probability values, most probable results appearing first. (6) The evaluation tree panel plots a graphical repre-sentation of the evaluation tree where the root node holds the DNF lineage of the query. Inner nodes store independent parts of the initial formula at that given compilation stage, with a logic operator that links the further decompositions at the children level. Ultimately, the leaves will store the last possible decomposition of a previous-level formula. The subtree shown in red is the most efficient execution plan for this query, where red nodes are assigned with computation algorithms. The evaluation of this plan gives the desired probability result. (7) By picking a node from the graphical representation, its related information will be displayed in the node info panel: the propositional formula and logical operator, for internal nodes, or assigned algorithm name, for leaves of the best execution plan. (8) The database view simply displays the currently selected XML database. This work has been partly supported by the Dataring project of the French ANR. [1] S. Abiteboul, B. Kimelfeld, Y. Sagiv, and P. Senellart.
