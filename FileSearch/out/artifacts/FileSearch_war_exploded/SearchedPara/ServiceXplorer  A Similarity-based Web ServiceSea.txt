 Finding relevant Web services and composing them into value-added applications is becoming increasingly important in cloud and service based marketplaces. The key problem with current approaches to finding relevant Web services is that most of them only provide searches over a discrete set of features using exact keyword matching. We demonstrate in this paper that by utilizing well known indexing scheme such as inverted file and R -tree indexes over Web services at-tributes, the Earth Mover X  X  Distance (EMD) algorithm can be used efficiently to find partial matches between a query andadatabaseofWebservices.
 H.3.5 [ On-line Information Services ]: Web-based ser-vices; H.3.4 [ Systems and Software ]: Distributed systems Web Services, Search Engine, Earth Mover X  X  Distance
Similarity-based search of Web services has been a chal-lenging issue over the years. Currently, most existing ser-vices search engines such as Woogle [1], WSExpress [6], and Titan systems [5] adopt keyword based search strategy be-cause it is easy to implement and work well in some cases. However, the traditional keyword-based service search en-gines still have several limitations when they are applied to Web services. First, due to the heterogeneous naming con-ventions used by different service providers, keyword-based approach may result in a large term dictionary especially when scaling to massive number of Web services. Second, as Web service descriptions are typically comprised of lim-ited terms, the resultant term vectors will become extremely sparse in the space of distinct terms used by all services. Matching services based on traditional similarity measures (e.g., cosine similarity) leads to poor results as large sparse term vectors are less likely to coincide on common terms. Furthermore, traditional keyword-based search engines com-pute a similarity score by only matching the keywords at the same positions in both the query and the document vectors, without considering the impact of the keywords at neighbor-ing positions.

To overcome these limitations, we have developed an EMD-based similarity search algorithm [3], for finding similar Web services based on partial matching of Web service attributes (e.g., operations, messages, description, service name) or a combination of them. EMD has been widely employed in multimedia databases [4] to better approximate human vi-sual perception, speech recognition, and document retrieval because EMD can effectively capture the differences between the distributions of two objects X  main features, and allow for partial matching. To overcome the limitation of EMD-based computation complexity, we exploit filtering techniques to minimize the total number of actual EMD computations. Furthermore, we have developed a generalized independent minimization lower bound as a new EMD filter for partial matching technique that is suitable for searching Web ser-vices. The filter is then incorporated into a k -NN algorithm for producing top-k results.

In this paper, we demonstrate an EMD-based Web ser-vices search engine: ServiceXplorer , which implements the techniques presented in [3]. ServiceXplorer adopts a two-step approach for EMD based Web service search: filter and refine . The filter step selects potential candidate Web ser-vice records from a database by removing those unqualified Web service records. In this step, an indexing scheme (in-verted file index, R -tree) is used to find the nearest leaf nodes to the query when a query is evaluated. At the end of this step, all records belonging to the found nodes are con-sidered to be the potential candidates, forming a potential candidate set (PCS). The refine step computes the similar-ity between the query and Web service records in PCS based on EMD distances, and picks up the top-k most similar re-sults. In the following sections, we overview the design and implementation of ServieXplorer and report the proposed demonstration.
The system architecture (Figure 1) consists of four main components: Web service registration , Web service record creation , index construction ,and EMD similarity search . The Web service registration component provides a web-based GUI where users can perform several activities such as uploading a WSDL file, and entering short descriptions
Figure 1: System architecture of ServiceXplorer and categories/tags for the uploaded WSDL file. Currently, we store the information extracted from WSDL files in a Web service database which is implemented in MySQL. The WSRecords is the main relation which is being referred by all the other relations. It stores the unique service key, service name, and the description. Each WSDL can have multiple messages, operations, QoS, and categories, which are stored in WSOperation , WSMessage , WSQoS ,and WSCategory respec-tively.

The index construction component is responsible for cre-ating the inverted file index for the registered Web services. The inverted file index list is implemented as a normalized relation with both WSDL unique term and the service key as the primary key. Note that we do not keep track of term frequency since the inverted index is used purely for filtering purpose, not for ranking relevancy of a term in a Web service document. For the non-functional quality of service (QoS) attributes such as reliability and availability, their values can be expressed as a range. Therefore, R -tree indexes are created on WSQoS by using the create spatial index data def-inition statement in MySQL. The collection of QoS is done by a separate monitoring component which is not within the scope of this paper. Interested readers are referred to [2].
In this section, we demonstrate the functionality of Ser-viceXplorer. ServiceXplorer can find desired services by providing users with simple search interfaces and effective search algorithms with EMD. In particular, we demonstrate the search functions through three main search scenarios: service registration , simple similarity search ,and advanced similarity search . The system can be accessed from: http: //eil.cs.txstate.edu/ServiceXplorer .
 Service Registration. Service providers can register their services through the registration interface, provided by Ser-viceXplorer. Through the interface, the users can choose appropriate services, specify the function descriptions of the selected services, and provide related tags. The selected ser-vices will be stored in the system after pressing the upload button. Once registered in the system, the services are fur-ther refined and stored as records in a database for effective similarity search.
 Simple Similarity Search. In this scenario, ServiceX-plorer handles the similarity search of Web services by us-ing EMD as the underlying similarity distance only. In the simple similarity search interface, a user can type a single keyword or multiple keywords, and our system will return the relevant services to the user. From Figure 2 we can see that using EMD similarity strategy, there is a higher proba-bility that the top results are always the most relevant ones. For example, for the query of Temperature Converter ,the second top result is Convert Temperature while using VSM (vector space model), that particular service is only ranked the 23 rd .
 Advanced Similarity Search. ServiceXplorer also offers an advanced similarity search that enables users to locate services by selecting different index structures, specifying QoS parameters and comparing the search performance with that of VSM. For example, if a user chooses EMD search with index structure, she can simply click the radio button ( With ) to select the index. The input query will be pro-cessed against the inverted index list by filtering unqualified services and then executed against services records in the database to locate desired Web services using EMD similar-ity search. [1] X. Dong et al. Similarity Search for Web Services. In [2] Y.Liu,A.H.Ngu,andL.Zeng.QoSComputationand [3] J. Ma, Q. Z. Sheng, K. Liao, Y. Zhang, and A. H. Ngu. [4] Y. Rubner, C. Tomasi, and L. Guibas. The Earth [5] J.Wu,L.Chen,Y.Xie,andZ.Zheng.Titan:A [6] Y. Zhang, Z. Zheng, and M. Lyu. WSExpress: A
