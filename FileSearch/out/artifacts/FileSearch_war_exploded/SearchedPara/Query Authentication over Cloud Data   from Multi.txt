 With the rising popularity of cloud storage [1] and the gradual establishment of vari-ous authorization relationships between cloud storage users, there exists a special data data, but also authorize part or all of their data to other users to release. In such scena-query over data sets released by one publisher, the query results may consist of mul-setting of cloud environment, a set of safe and efficient query authentication scheme is indispensable. 
At present, most scholars focus on validating query over data from single contribu-tor in outsourced database. References [3, 4] present data validation method based on simple digital signature. References [5-9] describe data validation method based on complex authentication data structure. And references [10-12] introduce data valida-tion method based on probability. In the outsourced data management applications, the digital signature or authentication data structure can only validate the correctness of the publisher X  X  own data. If the query authentication method used in the outsourced database is used to validate the query result s in the cloud environment, the contributor needs to establish the corresponding authenticat ion data structure of data authorized to the publisher before the authorization. With more and more authorization, the contri-butor will face great burden of managing the increasing authentication data structures. Besides, queries on data published by only one publisher may involve authentication overhead and computational overhead. Ther efore, the above methods cannot apply to the cloud environment with multiple data contributors. For this special data authorization setting in cloud environment, we adopt Merkle Hash Tree (MHT) [13] as the basic authentication data structure (ADS), and combine the data authorization with the update of ADS. Our method needs only one ADS to result validation in the cloud environment with multiple data contributors. 
Our original contributions can be summarized as follows: 
The remaining of this paper is organized as follows. We discuss related work on query authentication in Section 2. Our architecture and notations is presented in Sec-tion 3. In Section 4, we present the specific method for authenticating query on data from multiple contributors. Section 5 contains experimental evaluation and analysis, and Section 6 concludes the paper. data services, which can be classified into the following three categories. 
As mentioned above, many researches have been carried out to address the problem of query authentication in cloud computing and other outsourced data management efficient and scalable query authentication over cloud data from multiple data contri-butors. In our paper, we focus on authenticating query over data from multiple contri-butors in the cloud environment. involves cloud service provider (CSP), data contributor, data publisher and data re-quester. Data contributor and data publisher are both cloud data owners, data contri-butor is the one who authorize all or part of his cloud data to data publisher to release, well as data authorized by several other data contributors. In this system model, CSP data contributors and data publishers are trustworthy data sources and publishers. 
In the architecture showed in Figure 1, if data publisher U i wants to publish his own data set D i to CSP, he will generate an authentication data structure (ADS) S i accord-authorization. from S i . Finally, R and VO are both returned to data requester, and the data requester can validate the correctness of R with VO locally. 
The ADS mentioned above is based on Merkle Hash Tree (MHT). MHT is a binary digital signature. Our paper is aimed at authenticating cloud data from multiple con-tributors securely and efficiently. Before describing the solution, we first define some notations as listed in Table 1. For the cloud environment with multiple data contributors, we put forward a query section, we detail the proposed scheme as follows. 4.1 ADS Generation Before a data publisher U i releases his own data set D i , an ADS S i (Merkle Hash Tree) generated from data contained in D i . compute the hash value of all the data contained in D i with hash function, which can from the bottom up with two adjacent leaf n odes combined from left to right until the leases data D i and structure S i with signed root node sig ( root i ) to CSP. 4.2 ADS Fusion Mechanism rectness of query results with only one ADS, the verification information of D j  X  needs to be merged into S i . Algorithm 1 describes the ADS fusion algorithm based on MHT. Algorithm 1. ADS Fusion Algorithm Input: S i , D j  X  , Seq i
Output: updated S i and Seq i 1. verify the validity of S i 2. update the value of leaf nodes with hash value of D j  X  3. update S i with the updated leaf nodes 4. U j signs new root node root i  X  of updated S i 5. add U j to Seq i 6. upload the updated S i and Seq i to CSP should be computed. And there are two cases when updating the leaf node. value of leaf node v in will be changed as follows. value of leaf node v in can be expressed in the following formula: 
In the updated ADS S i , the hash values of internal nodes are modified with the up-dated leaf nodes according to the discipline to construct MHT. Then, the updated root private key, and the signed root node is sig ( root i  X  ). 4.3 Verification Obj ect Generation If data requester wants to search information on the data released by U i , he will send a query request Q on data released by U i to CSP. Then, CSP computes the query result R which may contain data authorized by many data contributors. To validate the cor-rectness of R , CSP needs to generate verification object VO used to validate the query result R , Algorithm 2 describes the verification object generation algorithm. Algorithm 2. Verification Object Generation Algorithm Input: Q , S i , D i , { D j  X  |1  X  j  X  | Seq i |} 
Output: VO and R 1. for each leaf node in S i 2. add data satisfying the query condition Q to R 3. get hash value of data failing to satisfy Q from S i , and add them to VO 4. merge VO vertically and horizontally 5. add sig ( root i  X  ) to VO 6. return VO and R to data requester 
In cloud environment with large amount of data, to reduce the transmission over-head and computation cost on the client side of data requester, CSP needs to simplify VO before returning it to data requester, and the way of simplification is to merge VO vertically and horizontally. 
Firstly, CSP merges VO vertically. If data authorized by multiple contributors cor-responding to the validation information contained in a leaf node of S i doesn X  X  satisfy the query condition Q , the data X  X  hash values will be unified as a string, replacing all the hash values constituting the leaf node in VO . For example, a leaf node v in contains ( d will contain the leaf node v in . Then, CSP merges VO horizontally. If VO contains ad-jacent nodes with the same parent node, replace the child nodes with the parent node until there are no adjacent nodes with the same parent node in VO . VO merged verti-cally and horizontally are most simplified. When VO is generated, CSP will send VO , R and Seq i to data requester. 4.4 Query Result Validation correctness of the query results. Then, both query results R and verification object VO are used to rebuild a Merkle Hash Tree, whose root node value is to be compared with value of the signed root node of data publisher U i  X  X  fused ADS . As the query results R need to be built firstly. Algorithm 3 describes the query result validation algorithm. Algorithm 3. Query Result Validation Algorithm Input: R , VO , Seq i
Output: validation result 1. for each leaf node v in  X  needed to be recomputed 2. extract data from R needed to compute v in  X  3. extract data from VO needed to compute v in  X  4. compute v in  X  with data extracted above according to Seq i 5. reconstruct MHT with the leaf nodes, and get the root node value root s 6. verify sig ( root i  X  ) and get root i  X  7. compare root s with root i  X  , and output the validation result 
If any data contained in the query results is wrong, the value of corresponding leaf definitely be different from the real root node value root i  X  , the cloud storage user will be aware that the query results returned is not correct. Our experiment mainly focuses on the storage space taken by ADS and time taken by query result validation, comparing these two aspects between validation on separated ADS s and validation on fused ADS . record the storage space taken by ADS and time taken by query result validation, and then conduct comparison and analysis. 
The comparison of storage space taken by ADS is shown in figure 2. We can see the storage space of fused ADS is much less than that of separated ADS s. The main reason is that the fused ADS built based on the data publisher X  X  original ADS always has only one root node, and by merging data from different users into a leaf node, the number of inter-nal nodes generated from the leaf nodes keeps the least. However, each of the separated ADS s has a root node, and as the number of leaf nodes equals to that of data, numerous extra internal nodes will be built, which leads to great storage cost. 
The comparison of time cost by query result validation on the client side is shown in figure 3. We can see the time cost by query result validation on fused ADS is much construct the leaf nodes, but spent much less time to build the internal nodes. Besides, validation on the fused ADS only needs to verify the root node once, but validation on separated ADSs needs to verify multiple times which equals to the number of data data publisher, query result validation on fused ADS becomes increasingly efficient. validate the correctness of data from multiple contributors on one authentication data structure in the cloud environment. Experimental evaluation shows that our method can authenticate query result containing data from multiple contributors with small storage cost and low computational overhead, and outperform the traditional single-method. 
