 Privacy considerations often constrain data mining projects. This paper addresses the problem of association rule mining where transactions are distributed across sources. Each site holds some attributes of each transaction, and the sites wish to collaborate to identify globally valid association rules. However, the sites must not reveal individual transaction data. We present a two-party algorithm for efficiently dis-covering frequent itemsets with minimum support levels, without either site revealing individual transaction values. H.2.8 [Database Management]: Database Applications--Data mining; H.2.4 [Database Management]: Systems--Distributed databases; H.2.7 [Database Management]: Database Administration--Security, integrity, and protec-
Data mining technology has emerged as a means for iden-tifying patterns and trends from large quantities of data. Mining encompasses various algorithms such as clustering, classification, association rule mining and sequence detec-tion. Traditionally, all these algorithms have been developed within a centralized model, with all data being gathered into a central site, and algorithms being run against that data. 
Privacy concerns can prevent this approach -there may not be a central site with authority to see all the data. We present a privacy preserving algorithm to mine association rules from vertically partitioned data. By vertically parti-tioned, we mean that each site contains some elements of a transaction. Using the traditional "market basket" example, one site may contain grocery purchases, while another has clothing purchases. Using a key such as credit card number and date, we can join these to identify relationships between purchases of clothing and groceries. However, this discloses permission and/or a fee. SIGKDD '02 Edmonton, Alberta, Canada Copyright 2002 ACM 1-58113-567-X/02/0007 ... $5.00. the individual purchases at each site, possibly violating con-sumer privacy agreements. 
There are more realistic examples. In the sub-assembly manufacturing process, different manufacturers provide com-ponents of the finished product. Cars incorporate several subcomponents; tires, electrical equipment, etc.; made by independent producers. Again, we have proprietary data collected by several parties, with a single key joining all the data sets, where mining would help detect/predict malfunc-tions. The recent trouble between Ford Motor and Firestone Tire provide a real-life example. Ford Explorers with Fire-stone tires from a specific factory had tread separation prob-lems in certain situations, resulting in 800 injuries. Since the tires did not have problems on other vehicles, and other tires on Ford Explorers did not pose a problem, neither side felt responsible. The delay in identifying the real problem led to a public relations nightmare and the eventual replacement of 14.1 million tires[16]. Many of these were probably fine -Ford Explorers accounted for only 6.5 million of the re-placed tires [11]. Both manufacturers had their own data -early generation of association rules based on all of the data may have enabled Ford and Firestone to resolve the safety problem before it became a public relations nightmare. 
Informally, the problem is to mine association rules across two databases, where the columns in the table are at differ-ent sites, splitting each row. One database is designated the primary, and is the initiator of the protocol. The other database is the responder. There is a join key present in both databases. The remaining attributes are present in one database or the other, but not both. The goal is to find association rules involving attributes other than the join key. 
We must also lay out the privacy constraints. Ideally we would achieve complete zero knowledge, but for a practical solution controlled information disclosure may be accept-able. Finally, we need to quantify the accuracy and the efficiency of the algorithm, in view of the security restric-tions. We first outline related work and the problem background. In Section 3, we formally define the problem and give the overall solution. Section 4 presents the component scalar product protocol, the key privacy-preserving part of the so-lution. We discuss what the method discloses in Section 5, and present extensions that further limit disclosure. Section 6 analyzes the security provided and communication costs of the algorithm. We conclude by summarizing the contri-butions of this paper and giving directions for future work. 1. L1 = {large 1-itemsets} 2. for (k=2; Lk-1 ~  X ; k++) do begin 7. else 8. let A have l of the attributes and B have the remaining m attributes  X  " + Cn,(,/~+I) * yn + R~&gt; "  X  + c~,((~-l)n/r+l) * yn  X  R,.) +(x2 + c2,1 * R1 + c2,2 * R2 +... + c2,n * Rn) * y2  X (x. + cn,1 * R1 + cn,2 * R2 + .." + Cn,n * Rn) * yn +(yl * cz,1 * R1 + yl * cl,2 * R2 + .'. + yl * cl,n * R,~) +(Yn * cn,1 * R1 + yn * cn,2 * R2 +'" + y,~ * c,~,, * Rn) +{P~z,~/~ * (cl,2./~ * y2,~l~ + c2,2n/~ * y2 + 
Now A factors out the R/ from the first two components q'-R(r-1)nlr+l * (Cl,(r--1)nlr.-t-1 * Y(r--1)nlr+l + +R,~ * (c1,,~ * yl + c2,~ * y2 +"' + c~,. * y~ + PC) -.Rn/~+l * P~ ..... R2./r * I~2 -R(~_i)./~+~  X  PC ..... R.  X  PC 
A already knows the n Ri values. B also sent n other 
A multiplies the n values received from B with the corre-
Temp = E xi * Yl Factoring out the R~ gives: 
Temp = 
To get the desired final result (viz. ~i=1 xl yi), A needs 
In step 3, A sends the r values to B, and B (knowing R') 
The above protocol requires a matrix C of values that 
With high probability, a coefficient matrix generated by 
The goal of this work is to create a practical, efficient preventing a "cheater" from probing to find a specific value (e.g., by setting all values but one to 0 -a problem for true zero-knowledge scalar product protocols, but detectable and thus preventable with our method) are omitted due to space constraints. 
The nature of the problem -each party knows its own data, and learns the resulting global association rules -re-sults in some disclosure. For example, if we have a support threshold of 5%, a rule A1 ~ B1 holds, and exactly 5% of the items on A have item A1, A knows that at least those same items on B have property B1. It is acceptable for the protocol to disclose knowledge that could be obtained from the global rules and one's own database. 
This method discloses more than just the presence or ab-sence of a rule with support above a threshold. Side A learns the exact support for an itemset. This increases the proba-bility that A will learn that a set of items on B have a given property. This occurs when the global support equals A's support, not just when A's support is at the threshold. In any case, A learns the probability that an item in the set supported by A has a property in B, computed as the ratio of the actual support to A's support. 
It is unlikely that specific individual data values will be disclosed with certainty by this method. This possibility can be reduced further by allowing approximate answers. 
When we mine boolean association rules, the input values (xl and yi values) are restricted to 0 or 1. This creates a disclosure risk, both with our protocol and with other scalar product protocols [10, 13]. Recall that A provides n + r equations in 2n unknowns. From these B can get r equations in only in the xl values. If the equations have a unique solution, B could try all possible values of 0 and 1 for all the y~ to obtain the correct solution. This 2 '~ brute force approach enables B to know the correct values for the yl. An analogous situation exists for B since A can get n-r equations in only the yi values. 
One way to eliminate this problem is to ensure there are multiple solutions to the equations, by cleverly selecting the ci,j values such that it is not evident exactly which of the xi/yi are l's. One way to accomplish that is as follows. Consider the form of any equation sent by B: c1,1 * yl + c2,1 *y2 +"'+c~,l*Yn+R~. B can group the yi into pairs of 0 and 1 and selectively set the coefficient of some pairs to be the same. Thus, even if A finds a solution to the equation, it is not unique and does not disclose which of the yl is 0 and which is 1. The duplicated cl,j values can also be used to force multiple solutions to the equations sent by A. Thus B is unable to verify that a given set of xi by checking if they allow a unique solution to the Ri values. 
This requires that B communicate whic h Cl d should be the same. Alternatively, B can specify a periodic generator and communicate the order of the x/y values so pairs match the period. This increases communication cost by O(n). Also, this creates a problem in security for A. As a result of duplicating half of the cld, the security of A's x values decrease; if B knows an x value, B can determine the value for the corresponding x of the pair. *MaxValSz = Maximum bits to represent any input value 
The security of the scalar product protocol is based on the inability of either side to solve k equations in more than k unknowns. Some of the unknowns are randomly chosen, and can safely be assumed as private. However, if enough data values are known to the other party, the equations can be solved to reveal all values. Therefore, the disclosure risk in this method is based on the number of data values that the other party might know from some external source. Table 1 presents the number of unknowns and equations generated. This shows the number of data values the other party must have knowledge of to obtain full disclosure. 
The scalar product protocol is used once for every candi-date item set. This could introduce extra equations. When the candidate itemset contains multiple attributes from each side, there is no question of linear equations so it does not perceptibly weaken the privacy of the data. 
It is also possible to have multiple w-itemsets in the can-didate set split as 1, w -1 on each side. Consider two possi-ble candidate sets A1, B1, E2, Bs and A1, B2, B3. If A uses new/different equations for each candidate set, it imperils the security of A1. However, B can reuse the values sent the first time. The equations sent by B can be reused for the same combinations of Bi, only a new sum must be sent. This reveals an additional equation, limiting the number of times B can run the protocol. This limit is adjusted by r, and is unlikely to be a reached if the number of entities is high relative to the number of attributes. 
The total communication cost depends on the number of candidate itemsets, and can best be expressed as a (con-stant) multiple of the i/o cost of the apriori algorithm. Com-puting support for each candidate itemset requires one run of the component scalar product protocol. The cost of each run (based on the number of items n is as follows: A sends one message with n values. B replies with a message con-sisting of n + 1 values. A then sends a message consist-ing of r values. Finally B sends the result, for a total of four communication rounds. The bitwise communication cost is O(n) with constant approximately 2 (assuming r is constant). This is summarized in Table 2. 
There is also the quadratic cost of communicating the ci,i values. However, this cost can made constant by agreeing on a function and a seed value to generate the values. 
The major contributions of this paper are a privacy pre-serving association rule mining algorithm given a privacy preserving scalar product protocol, and an efficient proto-col for computing scalar product while preserving privacy of the individual values. We show that it is possible to achieve good individual security with communication cost compara-ble to that required to build a centralized data warehouse. 
There are several directions for future research. Handling multiple parties is a non-trivial extension, especially if we consider collusion between parties as well. This work is limited to boolean association rule mining. Non-categorical attributes and quantitative association rule mining are sig-nificantly more complex problems. 
The same privacy issues face other types of data mining, such as Clustering, Classification, and Sequence Detection. Our grand goal is to develop methods enabling any data mining that can be done at a single site to be done across various sources, while respecting their privacy policies. 
The authors thank Murat Kantarcioglu for suggestions on addressing boolean attributes. Portions of this work were supported by Grant EIA-9903545 from the National Science Foundation, and by sponsors of the Center for Education and Research in Information Assurance and Security. [1] D. Agrawal and C. C. Aggarwal. On the design and [2] R. Agrawal, T. Imielinski, and A. N. Swami. Mining [3] R. Agrawal and R. Srikant. Fast algorithms for mining [4] R. Agrawal and R. Srikant. Privacy-preserving data [5] P. Chan. An Extensible Meta-Learning Approach for [6] P. Chan. On the accuracy of meta-learning for [7] R. Chen, K. Sivakumar, and H. Kargupta. Distributed [8] D. W.-L. Cheung, V. Ng, A. W.-C. Fu, and Y. Fu. [9] W. Du and M. J. Atallah. Secure multi-party [10] W. Du and M. J. Atallah. Secure multi-party [11] Ford Motor Corporation. Corporate citizenship report. [12] O. Goldreich, S. Micali, and A. Wigderson. How to [13] I. Ioannidis, A. Grama, and M. Atallah. A secure [14] M. Kantarcioglu and C. Clifton. Privacy-preserving [15] Y. Lindell and B. Pinkas. Privacy preserving data [16] National Highway Traffic Safety Administration. [17] A. Prodromidis, P. Chan, and S. Stolfo. Meta-learning [18] S. J. Rizvi and J. R. Haritsa. Privacy-preserving [19] R. Wirth, M. Borth, and J. Hipp. When distribution [20] A. C. Yao. How to generate and exchange secrets. In 
