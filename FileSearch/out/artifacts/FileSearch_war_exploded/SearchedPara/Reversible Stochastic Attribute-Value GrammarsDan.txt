 Reversible grammars were introduced as early as 1975 by Martin Kay (1975). In the eighties, the popularity of attribute-value grammars (AVG) was in part motivated by their inherent reversible na-ture. Later, AVG were enriched with a statistical component (Abney, 1997): stochastic AVG (SAVG). Training a SAVG is feasible if a stochastic model is assumed which is conditioned on the input sen-tences (Johnson et al., 1999). Various parsers based on this approach now exist for various languages (Toutanova et al., 2002; Riezler et al., 2002; van Noord and Malouf, 2005; Miyao and Tsujii, 2005; Clark and Curran, 2004; Forst, 2007). SAVG can be applied for generation to select the most fluent real-ization from the set of possible realizations (Velldal et al., 2004). In this case, the stochastic model is conditioned on the input logical forms. Such gener-ators exist for various languages as well (Velldal and Oepen, 2006; Nakanishi and Miyao, 2005; Cahill et al., 2007; de Kok and van Noord, 2010).

If an AVG is applied both to parsing and gen-eration, two distinct stochastic components are re-quired, one for parsing, and one for generation. To some extent this is reasonable, because some fea-tures are only relevant in a certain direction. For instance, features that represent aspects of the sur-face word order are important for generation, but ir-relevant for parsing. Similarly, features which de-scribe aspects of the logical form are important for parsing, but irrelevant for generation. Yet, there are also many features that are relevant in both direc-tions. For instance, for Dutch, a very effective fea-ture signals a direct object NP in fronted position in main clauses. If a main clause is parsed which starts with a NP, the disambiguation component will fa-vor a subject reading of that NP. In generation, the fluency component will favor subject fronting over object fronting. Clearly, such shared preferences are not accidental.

In this paper we propose reversible SAVG in which a single stochastic component is applied both in parsing and generation. We provide experimen-tal evidence that such reversible SAVG achieve sim-ilar performance as their directional counterparts. A single, reversible model is to be preferred over two distinct models because it explains why pref-erences in a disambiguation component and a flu-ency component, such as the preference for subject fronting over object fronting, are shared. A single, reversible model is furthermore of practical inter-est for its simplicity, compactness, and maintainabil-ity. As an important additional advantage, reversible models are applicable for tasks which combine as-pects of parsing and generation, such as word-graph parsing and paraphrasing. In situations where only a small amount of training data is available for parsing or generation, cross-pollination improves the perfor-mance of a model. If preferences are shared between parsing and generation, it follows that a generator could benefit from parsing data and vice versa. We present experimental results indicating that in such a bootstrap scenario a reversible model achieves better performance. As Abney (1997) shows, we cannot use relatively simple techniques such as relative frequencies to obtain a model for estimating derivation probabili-ties in attribute-value grammars. As an alternative, he proposes a maximum entropy model, where the probability of a derivation d is defined as: f i ( d ) is the frequency of feature f i in derivation d . A weight  X  i is associated with each feature f i . In (1), Z is a normalizer which is defined as fol-lows, where  X  is the set of derivations defined by the grammar: Training this model requires access to all derivations  X  allowed by the grammar, which makes it hard to implement the model in practice.

Johnson et al. (1999) alleviate this problem by proposing a model which conditions on the input sentence s : p ( d | s ) . Since the number of derivations for a given sentence s is usually finite, the calcula-tion of the normalizer is much more practical. Con-versely, in generation the model is conditioned on the input logical form l , p ( d | l ) (Velldal et al., 2004). In such directional stochastic attribute-value gram-mars, the probability of a derivation d given an input x (a sentence or a logical form) is defined as: with Z ( x ) as (  X ( x ) are all derivations for input x ): Consequently, the constraint put on feature values during training only refers to derivations with the same input. If X is the set of inputs (for parsing, all sentences in the treebank; for generation, all log-ical forms), then we have: Here we assume a uniform distribution for  X  p ( x ) . Let j ( d ) be a function which returns 0 if the deriva-tion d is inconsistent with the treebank, and 1 in case the derivation is correct.  X  p ( x,d ) is now defined in such a way that it is 0 for incorrect derivations, and uniform for correct derivations for a given input:
Directional SAVG make parsing and generation practically feasible, but require separate models for parse disambiguation and fluency ranking.

Since parsing and generation both create deriva-tions that are in agreement with the constraints im-plied by the input, a single model can accompany the attribute-value grammar. Such a model estimates the probability of a derivation d given a set of con-straints c , p ( d | c ) . We use conditional maximum en-tropy models to estimate p ( d | c ) :
We derive a reversible model by training on data for parse disambiguation and fluency ranking simul-taneously. In contrast to directional models, we im-pose the two constraints per feature given in figure 1: one on the feature value with respect to the sentences S in the parse disambiguation treebank and the other on the feature value with respect to logical forms L in the fluency ranking treebank. As a result of the constraints on training defined in figure 1, the fea-ture weights in the reversible model distinguish, at the same time, good parses from bad parses as well as good realizations from bad realizations. To evaluate reversible SAVG, we conduct experi-ments in the context of the Alpino system for Dutch. Alpino provides a wide-coverage grammar, lexicon and parser (van Noord, 2006). Recently, a sentence realizer has been added that uses the same grammar and lexicon (de Kok and van Noord, 2010).
 In the experiments, the cdbl part of the Alpino Treebank (van der Beek et al., 2002) is used as train-ing data (7,154 sentences). The WR-P-P-H part (2,267 sentences) of the LASSY corpus (van Noord et al., 2010), which consists of text from the Trouw 2001 newspaper, is used for testing. 3.1 Features The features that we use in the experiment are the same features which are available in the Alpino parser and generator. In the following section, these features are described in some detail.
 Word adjacency. Two word adjacency features are used as auxiliary distributions (Johnson and Rie-zler, 2000). The first feature is the probability of the sentence according to a word trigram model. The second feature is the probability of the sentence ac-cording to a tag trigram model that uses the part-of-speech tags assigned by the Alpino system. In both models, linear interpolation smoothing for un-known trigrams, and Laplacian smoothing for un-known words and tags is applied. The trigram mod-els have been trained on the Twente Nieuws Corpus corpus (approximately 110 million words), exclud-ing the Trouw 2001 corpus. In conventional pars-ing tasks, the value of the word trigram model is the same for all derivations of a given input sentence. Lexical frames. Lexical analysis is applied dur-ing parsing to find all possible subcategorization frames for the tokens in the input sentence. Since some frames occur more frequently in good parses than others, we use feature templates that record the frames that were used in a parse. An example of such a feature is:  X  X  X o play X  serves as an intransi-tive verb X . We also use an auxiliary distribution of word and frame combinations that was trained on a large corpus of automatically annotated sentences (436 million words). The values of lexical frame features are constant for all derivations in sentence realization, unless the frame is not specified in the logical form.
 Dependency relations. There are also feature templates which describe aspects of the dependency structure. For each dependency, three types of de-pendency features are extracted. Examples of such features are  X  X  pronoun is used as the subject of a verb X ,  X  X he pronoun  X  X he X  is used as the sub-ject of a verb X ,  X  X he noun  X  X eer X  is used as the object of the verb  X  X rink X  X . In addition, features are used which implement auxiliary distributions for selectional preferences, as described in Van No-ord (2007). In conventional realization tasks, the values of these features are constant for all deriva-tions for a given input representation.
 Syntactic features. Syntactic features include fea-tures which record the application of each grammar rule, as well as features which record the application of a rule in the context of another rule. An exam-ple of the latter is  X  X ule 167 is used to construct the second daughter of a derivation constructed by rule 233 X . In addition, there are features describing more complex syntactic patterns such as: fronting of sub-jects and other noun phrases, orderings in the middle field, long-distance dependencies, and parallelism of conjuncts in coordination. 3.2 Parse disambiguation Earlier we assumed that a treebank is a set of cor-rect derivations. In practice, however, a treebank only contains an abstraction of such derivations (in our case sentences with corresponding dependency structures), thus abstracting away from syntactic de-tails needed in a parse disambiguation model. As in Osborne (2000), the derivations for the parse disam-biguation model are created by parsing the training corpus. In the current setting, up to at most 3000 derivations are created for every sentence. These derivations are then compared to the gold standard dependency structure to judge the quality of the parses. For a given sentence, the parses with the highest concept accuracy (van Noord, 2006) are con-sidered correct, the rest is treated as incorrect. 3.3 Fluency ranking For fluency ranking we also need access to full derivations. To ensure that the system is able to generate from the dependency structures in the tree-bank, we parse the corresponding sentence, and se-lect the parse with the dependency structure that corresponds most closely to the dependency struc-ture in the treebank. The resulting dependency structures are fed into the Alpino chart generator to construct derivations for each dependency struc-ture. The derivations for which the corresponding sentences are closest to the original sentence in the treebank are marked correct. Due to a limit on gen-eration time, some longer sentences and correspond-ing dependency structures were excluded from the data. As a result, the average sentence length was 15.7 tokens, with a maximum of 26 tokens. To com-pare a realization to the correct sentence, we use the General Text Matcher (GTM) method (Melamed et al., 2003; Cahill, 2009). 3.4 Training the models Models are trained by taking an informative sam-ple of  X ( c ) for each c in the training data (Osborne, 2000). This sample consists of at most 100 ran-domly selected derivations. Frequency-based fea-ture selection is applied (Ratnaparkhi, 1999). A fea-ture f partitions  X ( c ) , if there are derivations d and d in  X ( c ) such that f ( c,d ) 6 = f ( c,d 0 ) . A feature is used if it partitions the informative sample of  X ( c ) for at least two c . Table 1 lists the resulting charac-teristics of the training data for each model. We estimate the parameters of the conditional Generation 1727 3688 141808 Reversible 25578 10811 518228 maximum entropy models using TinyEst, 1 with a Gaussian ( ` 2 ) prior distribution (  X  = 0 ,  X  2 = 1000 ) to reduce overfitting (Chen and Rosenfeld, 1999). 4.1 Parse disambiguation Table 2 shows the results for parse disambiguation. The table also provides lower and upper bounds: the baseline model selects an arbitrary parse per sen-tence; the oracle chooses the best available parse. Figure 2 shows the learning curves for the direc-tional parsing model and the reversible model.
The results show that the general, reversible, model comes very close to the accuracy obtained by the dedicated, parsing specific, model. Indeed, the tiny difference is not statistically significant. We compute statistical significance using the Approxi-mate Randomization Test (Noreen, 1989). 4.2 Fluency ranking Table 3 compares the reversible model with a di-rectional fluency ranking model. Figure 3 shows the learning curves for the directional generation model and the reversible model. The reversible model achieves similar performance as the direc-tional model (the difference is not significant).
To show that a reversible model can actually profit from mutually shared features, we report on an ex-periment where only a small amount of generation training data is available. In this experiment, we manually annotated 234 dependency structures from the cdbl part of the Alpino Treebank, by adding cor-rect realizations. In many instances, there is more than one fluent realization. We then used this data to train a directional fluency ranking model and a re-versible model. The results for this experiment are shown in Table 4. Since the reversible model outper-forms the directional model we conclude that indeed fluency ranking benefits from parse disambiguation data.
 We proposed reversible SAVG as an alternative to directional SAVG, based on the observation that syntactic preferences are shared between parse dis-ambiguation and fluency ranking. This framework is not purely of theoretical interest, since the exper-iments show that reversible models achieve accura-cies that are similar to those of directional models. Moreover, we showed that a fluency ranking model trained on a small data set can be improved by com-plementing it with parse disambiguation data.
The integration of knowledge from parse disam-biguation and fluency ranking could be beneficial for tasks which combine aspects of parsing and genera-tion, such as word-graph parsing or paraphrasing.
