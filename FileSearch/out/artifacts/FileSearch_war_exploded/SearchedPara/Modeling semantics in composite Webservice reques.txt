 REGULAR PAPER Qianhui Althea Liang  X  Jen-Yao Chung  X  Steven Miller Abstract When meeting the challenges in automatic and semi-automatic Web service composition, capturing the user X  X  service demand and preferences is as important as knowing what the services can do. This paper discusses the idea of semantic service requests for composite services, and presents a multi-attribute utility theory (MAUT) based model of composite service requests. Service re-quests are modeled as user preferences and constraints. Two preference structures, additive independence and generalized additive independence, are utilized in cal-culating the expected utilities of service composition outcomes. The model is also based on an iterative and incremental scheme meant to better capture requirements in accordance with service consumers X  needs. OWL-S markup vocabularies and associated inference mechanism are used as a means to bring semantics to ser-vice requests. Ontology conceptualizations and language constructs are added to OWL-S as uniform representations of possible aspects of the requests. This model of semantics in service requests enables unambiguous understanding of the ser-vice needs and more precise generation of the desired compositions. An applica-tion scenario is presented to illustrate how the proposed model can be applied in the real business world.
 Keywords Web service composition  X  MAUT  X  Semantic service request  X  Expected utility  X  Preference structure  X  Additive independence  X  Generalized additive independence  X  Iterative and incremental request elicitation 1 Introduction Sharing and reusing resources is made much easier with the Web services model and through service-oriented software development. A Web services framework simplifies software development by allowing a new system to be composed out of existing components which have been made very easy to describe, publish, find, bind and invoke in the framework. Two related concepts in service-oriented computing are composite (complex) services and service composition. A complex (composite) Web service is conceived as a combination of simpler Web services over a designated flow structure [18]. The elemental services are referred to as member services or component services. Service composition is the construction of composite services. Similar ideas, such as compositional verification [7, 21] have been used in the design of complex knowledge-based systems before service composition evolved into a separate research topic.
 have been used as representations of semantic Web knowledge. Semantics of Web services [22, 23, 25] are the key to service composition, especially to automat-ing the composition process. To satisfy the complex service needs, the discovery agents will have to pick out  X  X ervice components X  from existing services that can accomplish certain jobs, and to organize them into a larger service. Behind the scene, the component services work as a collaborative team and in combination provide the requested service. Understanding what the registered services actually provide to its users is important in identifying the required component services, because the composition system must have this knowledge to tell whether a ser-vice can perform a certain job within the larger service. WSDL [37], DAML-S [8], and OWL-S [27] have emerged as marking up languages of Web services. They allow service providers to present descriptions of their services and to mark up their service descriptions in order to share knowledge of services and to perform knowledge inferences.
 derstanding of the service needs and matching the available services with the service needs. Service needs of service requestors are presented in the form of service requests. Service requests can be issued by a user looking for services or by a computer program representing its human clients and discovering services automatically. Among what makes automatic service composition difficult is the non-straightforwardness and incompleteness of the service requests, which keeps service needs from being well understood by machines. Lacking good semantics, service requests cannot make it clear what client really wants, How to interact with the user, and what the client prefers and cannot accept. Just as in the physical service world, only with the client X  X  need clearly in mind can services be com-posed correctly. This suggests to us that semantics of service requests make up an integral part of semantic Web services and have to be addressed properly. tained and developed in an incremental and iterative way. Interactions from human beings are unavoidable, especially when requests need to be modified for various reasons. Preferences of users must be captured and non-determinism of service providers and requestors must be considered. Our model is designed to satisfy these requirements. sition approach reported in the previous work. In Sect. 3, we discuss the semantics of service requests for service composition. In Sect. 4, we present a new multi-attribute utility theory (MAUT)-based method to model semantic service requests using the OWL-S semantic framework. Two preference structures, i.e. additive independence and generalized additive independence, are applied to possible ser-vice requests and discussed in detail. OWL-S construct extensions for incremental request elicitation are introduced in this section too. In Sect. 5, we provide an ex-ample of using the model to represent the semantics for a request for a complex service and comment on the evaluation of the incremental scheme. We discuss re-lated work in Sect. 6. Our conclusions are stated in Sect. 7 and a list of references isgiveninSect.8. 2 Composition in extended Web services model One purpose of service composition systems is to respond to such service requests that can only be satisfied with results of compositions of services. Therefore, such systems can be mutually beneficial with an enhanced Web services model that has the capability to discover and invoke composite Web services in some automated manner. We extended the standard Web service model by introducing a Service Registry that, in addition to the well-known functions, is capable of answering complex queries by constructing or discovering composite services dynamically based on the semantic markups of registered services. We also introduced an add-on component called Composite Service Processor. It is in charge of invoking composite services discovered according to the interaction policy semantics. Our belief is that the enhanced model offers an explicit mechanism allowing compos-ite service processing to be studied in the same framework as simple Web ser-vices. It, therefore, eases the process of service-oriented application development. It also provides transparency to requesters, who then do not have to care whether the requested services are composite or simple services. This enhanced model is described in detail in our previous papers [18].
 ifications of restrictions on services in service descriptions of service providers. In this paper, we provide supplementary constructs to the OWL-S semantic Web service language that enable a service requestor to query the (Intelligent) Service Registry in a high-level declarative way. With these supplemental language con-structs (to be described in Sect. 4.2), OWL-S can be used to make up a service request with the exact semantics required to construct a composite service. looks for a registered simple service(s) in its database of services. If necessary, it may have to construct a composite service(s) on the fly. While constructing the service, the (Intelligent) Service Registry also ensures that the composite service is valid against the requestor X  X  particular requirements. It then generates a com-posite service specification, which can be registered with the (Intelligent) Service Registry. If the requestor would like to have the composite service invoked, he contacts a Composite Service Processor, which takes the composite service spec-ification, calls the registered component services and returns the result. is incomplete in most cases and there is non-determinism in resolving a requester X  X  preferences on services, the (Intelligent) Service Registry is designed based on a semi-automatic approach [18]. Besides automatic AI search techniques, comple-mentary human critiques are also considered and modifications of service requests may explicitly or implicitly guide the next run of search. This process is iteratively carried out until an acceptable composition is produced. 3 Semantics in service requests In the context of service composition, the role and responsibility of service users is to provide a request to describe the service need precisely. Considering the fact that, in most cases, a complex service need cannot be described using one word or by one parameter, users want to present the description information to the compo-sition system in a well-structured and easy-understandable way. The issue of how to make composition systems understand the exact service need goes hand in hand with the issue of how to allow users to specify their service needs unmistakably. Due to the limitations in both human cognition and machine representation, both of these tasks have proven to be major obstacles in automating service composi-tion. The purpose of the paper is to develop such a semantic model for both the user and the composition system to communicate and improve the composition goal in the form of a service request.
 Web services model can refer to when discovering the services. Semantics of ser-vice requests refer to the conceptualizations of the types of information required to describe a request for services. Here, we are only concerned of composite ser-vices, because requests for simple services are trivial. The conceptualizations of the information types and their mapping into the elements of the MAUT model we established for service composition will be discussed in Sects. 4.2.1 and 4.2.2. When semantics of service descriptions become explicit and understandable to machines, it is possible to use a piece of software to analyze the specifics of ser-vices. Similarly, when a Web service request specifies the desired service in such a way that the service demand is clearly understood by machines, it is also possible for a piece of software to select and compose services automatically. Furthermore, since the construction of a composite service involves selecting and organizing multiple services and dealing with multiple service providers, the importance of semantics of requests becomes more obvious. Semantics of service requests can be captured by designing a semantic model of service requests. A good semantic model must include information that makes automatic service composition possi-ble and feasible. A good semantic model shall also provide a mechanism that is natural and easy to use by the requestors. The rest of the section gives a briefing on these two considerations.
 structing the flow structure of the component services. In other words, the prob-lem is to decide what component services shall be selected and in what manner they shall be organized and collaborating. Prior to a detailed functional and non-functional description of the desired service, the service composition system can ask the requestor to identify the domains that the requested service falls in. Au-tomatic discovery of composite services is made feasible if the services under consideration are limited to particular domains. We believe a specific service re-quest can be narrowed down to one or several service domains under some service categorizations. Therefore, the composition always happens within the context of certain domains.
 priate constituent Web services to perform the sub tasks and to make sure these services comprise a valid and useful service as requested. The service discovered must adhere to requested properties [25]. A user located in Singapore may say, for example,  X  X ake the travel arrangement for my conference trip. If morning flights are unavailable, I will go by sea. X  With such preferences, a composite ser-vice that uses an airplane as the transportation mode but flies the passenger by an evening flight is not acceptable to the user. Therefore, in addition to understand what the requester wants to do, we must also understand the requester X  X  prefer-ences and constraints. The composition agent shall compare the constraints of ser-vice providers, such as  X  X ingapore Airlines does not have morning services from Singapore to Beijing X  with the specification of the concerns of service requesters to achieve an acceptable composition of services. Further, if there are conflicts between the user preferences and the service products or between one preference and another, the composition agent will have to resolve the conflicts.
 flicts if needed, one requirement is a mechanism that allows the user to elicit ser-vice requests with preferences easily and that assists the user to achieve their goals to the greatest extend possible. A good thing to do when modeling the semantics of requests is to introduce an iterative and incremental mechanism for a flexible yet effective request elicitation. Most fully automatic approaches to services composi-tion assume that the requester can put together their requirements and preferences all at once, within one iteration. They do not allow a user to develop the prefer-ence model incrementally and make tradeoffs by adjusting the preferences. Such inflexibility prevents the discovery result from being acceptable.
 tion of their needs, not all description information shall be compulsory as user input for composition. The composition system following the model makes an in-formed guess if it is not provided with the complete information, and displays a list of proposed composite services to the user to verify and select from. 4 Modeling semantic service requests for composite Web services In this section, we discuss the modeling of the requirements of a service request with the mentioned considerations. Since OWL-S is the most prevalent language used to encode Web service capabilities both for advertisement and for requests [22], we chose to model service requests using the OWL-S semantic framework. However, our modeling is not dependent on a particular semantic framework. Gen-erally speaking, according to the OWL-S service ontologies [27], requirements on services can relate to the profile aspect, the grounding aspect or the process model aspect of the semantic services.
 service process. As such, we augment [23] X  X   X  X eb service lifecycle in OWL-S ontologies X  by adding a function for Request Semantic Analysis. The amended diagram is listed in Fig. 1.
 is user requirements presented as constraints and preferences. The second level is iterative and incremental constraint (preference) revision. We also propose the OWL-S based service request language constructs to accommodate these seman-tics. 4.1 Multi-attribute utility theory and service requests Multi-attribute utility theory (MAUT) and preference elicitation have been stud-ied extensively in the literature of decision analysis [15]. If a user has preferences on the multiple attributes of a product or a system, the user needs a systematic method to make decisions about the kind of multi-dimensional tradeoffs that are best for his preferences. Without a supporting method, people or agents have prob-lems with making multi-attribute decisions because the satisfaction of a preference along one dimension may result in a failure to meet preferences along other di-mensions. In service-oriented computing, a service is an object that has its own attributes. A systematic and quantifiable method of meeting service requests us-ing available services can be based on the same techniques developed for decision analysis and for analyzing multi-dimensional user preferences in decision-support systems.
 Applying it to the (Web) service domain, the set of the service alternatives, i.e., the outcome, S , is defined by a set of value dimensions, as in (1).
 arguments are in V , i.e., from 2 V options. The following relationship among the outcome services, s ,in S is defined: The preference relation is an asymmetric ( s s  X  X  ( s s ) ) and transitive ( s s )  X  ( s s )  X  ( s s ) ) [16] binary relation on the set of options. s s indicates that the alternative s is preferred to alternative s . s and s are said to be indifferent, if (  X  ( s s )  X  X  ( s s ) ). A utility function is indicating a unique preference order over the individual outcomes in S , i.e., Z ,..., Z regarding ,ifforanyPr 1 and Pr 2 that have the same marginal on Z i for all V , Pr 1 and Pr 2 are indifferent. It has been proved [15] that Z 1 independent only if the utility function u , can be written as a sum of the utility functions of Z i , i.e., couple of issues. First, in general cases, a dimension d is usually a function of the relevant simple attributes [31], i.e. d = f ( a 1 , a 2 , ...) . In the case of Web ser-vices, the variables of services in the service requests are heterogeneous, which makes it inconvenient to subsume them in a hierarchy. Also, it is sufficient to ask a requestor to present the required properties in higher-level ontologies of OWL-S with a flat structure. Based on the above considerations, when modeling the ser-vice requests, we use a simple model that directly operates on variables avoiding a more complex model that involves a dimension hierarchy. We will use the fol-lowing definition of the service outcome space: V ={ v 1 ,v 2 ,...,v n } ,where v i are service variables that the requester can use to express their desired service. non-functional, which could span all three classes of service descriptions (profile, process model and grounding) in OWL-S. A functional requirement consists of descriptions of functional properties of the service using ontology of service func-tions in OWL-S. An example is a  X  X ookselling service X  or an  X  X irline ticketing service X . A non-functional requirement consists of descriptions of non-functional properties of the service, which are usually conditions or restrictions, such as  X  X lightDepatureDate between June 3rd, and June 5th X  or  X  X ncrypt a header with an X.509 token X . We use the multi-attribute utility to handle all the requirements in the same framework. To achieve this, we uniformly model all requirements as  X  X onstraints X  on services and differentiate hard constraints and soft constraints. nience for service users, but at the same time introduces challenges in capturing the service needs. Denying the requestor X  X  follow-up descriptions or preference changes to enforce  X  X ne-time X  decisions or non-intervention are inflexible and re-stricted. Besides, it limits the exploration of the user X  X  true service needs and con-cerns, and makes the discovery harder. All these may lead to the inapplicability of the discovery results. Therefore, the request semantics must have mechanisms to allow incremental development of the request model. 4.2 Service request modeling This section discusses the model of service requests through explaining what do we mean by service constraints and preferences in Sect. 4.2.1., highlighting the related ontology conceptualizations of OWL-S and illustrating the service attribute structure to use when they are all additive independent in Sect. 4.2.2 and when they are not additive independent in Sect. 4.2.3, and showing the accommodation of iterative and incremental constraint elicitation in Sect. 4.2.4. 4.2.1 Service constraints and preferences In this section, we will show how we adapt multi-attribute utility theory to model service requests, especially for composite services, and describe our efforts to-wards attacking the three issues mentioned in Sect. 4.1.
 that meet conditions are acceptable. For example, the user may say that  X  X  first-class seat is required X  when requesting an air ticket booking service. Preferences are  X  X oft X , which means if there are choices the user will have a preference on one option over the other. For example,  X  X  first-class seat is preferred X  is a prefer-ence. Since constraints can be seen as a special type of preferences, in this paper, constraints and preferences are used interchangeably to refer to both hard and soft constraints.
 composition: to provide information in defining the structure of the composite service and to describe identifying properties that validate suitable component service providers. Constraints serving the first purpose are usually functional re-quirements. Some of such constraints indicate control flows that must be satisfied by two or more component services in the requested service. When defining the flow structure of the composite service, we extract control flow information from the requestor X  X  concerns and establish various links for the involved services in the solution space. Consequently, the discovered solution complies with the flows implied by the constraints. Such constraints may also indicate possible usefulness of a component service that will not be considered as required otherwise. On the other hand, a majority of constraints are so-called attribute constraints, which are defined upon attributes or parameters. They describe interesting properties and tell  X  X ualified X  providers of a certain service from  X  X nqualified X  ones. They are used to filter out providers that are in conflict with the requesters X  interests or concerns. In service-oriented paradigm, attributes are defined for each service object to de-scribe its identifying properties. Therefore, attribute constraints can be defined as restrictions imposed on single or multiple attributes of one or more services that must be complied with. Attribute constraints on a single attribute are referred to as single-attribute constraints and attribute constraints on more than one attribute are referred to as inter-attribute constraints. 4.2.2 Additive independence request structure In order to take into consideration semantics about a condition that has to be qual-ified to make a solution acceptable for the request and about the criterion that makes a solution a better one, we highlight in the paper the following four on-tological concepts related to composite services, i.e. Service Category , Service Operation/Atomic Process , Service Parameter and Control Construct . All four concepts are from OWL-S. The concept of Service operation is in WSDL, which corresponds to the most canonical grounding of atomic process in OWL-S. We will use service operation in the rest of the text. With these ontological concepts, we ask requesters to impose different requirements on a requested composite ser-vice. Accordingly, we model service requests over a set of variables A of MAUT [15]. Each requirement is considered as a constraint defined as a relation on any combination of variables of one of the four variable types corresponding to the four ontological concepts, indicated in (5) and (6): a) The single attribute c of type C corresponds to the service categories of the b) The single attribute o of type O corresponds to the service operations of the c) Attributes of type AT define the parameters on the concerned and differentiat-d) Attributes of type OD link operations with one another and are used to define where each of which takes on values from a set of domains respectively: example, c can take { transportation service category } as its value. Within the iden-tified service categories, there are multiple alternative services for achieving the requester X  X  goal. Useful service operations will be referred to by attribute o .For example, the operation attribute can take the value of { transport by a rental car service } , or alternatively { transport through an air flying service } . The domain of an attribute of type AT ,or a  X  A AT ,isallthevaluesthat a can take while satis-fying the constraints or preferences. All attributes of type OD are binary variables that are defined on pairs of named operations, i.e. r l =  X ( o i , o j ), o i , o j  X  o .The function  X  maps operation pairs to { 1, 0 } . It is mapped to 1, when the pair has a precedence relationship, meaning one operation has to be performed before the other. Otherwise 0, i.e., when there is not a precedence relationship. Note that this definition of OD attributes only reflects one specific type of such constructs de-fined in OWL-S, because we do not expect the user to provide complicated control structures. This definition can be expanded to include more complicated structures if there X  X  a need.
 the preference or constraint is fully unsatisfied and is scaled to 1, if the preference is fully satisfied. In this section, we assume that the service variables are additive independent [15]. Additive independence means that if a set of attributes X  values are fixed, the preference scores on the solutions with varying values of its comple-mentary variable set will not be different. For an example, the user X  X  preference on air ticket price does not depend on whether or not the ticket booking is processed before or after the hotel reservation.
 totype [20], proposed an interactive user preference assessment model. Assuming additive independence, the user X  X  preference on the requested service is formulated by ATA as a weighted sum of preference functions as in (9). With this assumption, there are no interactions among any variables of any of the above four types and thus the preference of a requestor only depends on each variable. candidate composite service. Assuming additive independence, preferences over service compositions can be formulated as probabilistic estimations on the val-ues of possible service compositions defined over all its service variables. Ser-vice providers, under many circumstances, show non-deterministic or probabilis-tic characteristics. Some variables, therefore, represent certain aspects of the ser-vice composition process that are probabilistic in nature. For this reason, only the likelihood of each possible outcome can be known instead of which outcome will appear for certainty. This is the case for online businesses serving a large amount of transactions at the same time. The customer cannot be guaranteed by 100% the availability of the merchandizes or services. In another scenario, the business model, such as buyer auction as successfully adopted by companies like price-line.com, determines that the service requester will not be notified of the exact output. Our model is listed in (10). sition by two nested summations. The inner summation sums up the products w , or how important it is to satisfy the constraint on that variable. The outer summation is the expected value of the utility functions on various outcomes, or EU, as a dot product of the outcome utility vector and the particular lottery over the outcome space, Pr ( s ) . The weights and preference scores can both be adjusted for different runs of composition to produce the most preferred ser-vice. We show an example of the weighted preference scores of a composi-tion in Table 1. PM E means afternoon flights and PM L means evening flights. (Air Ticket Booking, Hotel Reservation) means that air ticket booking proceeds hotel reservation. Since the weight of SUV rental is only 0.1, relatively lower than all other weights, SUV rental service is not considered as import as other requirements.
 expected utility. The candidate compositions are represented by probability distri-butions over the outcome space, S . (11) shows the preference relationships among candidate compositions.
 requests into our service request language by introducing the language con-structs. Due to space limit, only a few snippets of the constructs are in list 1.
 vice providers for the composing system to use. Such service data can be obtained from marketing research companies that constantly conduct customer surveys to collect service data and observe service provider behavior or from the customer feedback provided to the organization that runs the composing system. Data from the latter source may be limited to a small number of businesses. However, most businesses in the same domain usually share common types of business rules in handling customer demands when they do not have the capacity to meet all in-dividual customers. We believe it is reasonable to assume at this stage that data obtained from a small sample of businesses is likely to be applicable to other busi-nesses in the same business domain. An alternative way to obtain this information is for service providers to provide such statistics to the service composition sys-tem, which uses it only for composition purpose without releasing the business confidential information to the public. List 1 . Snippet of language constructs for user preference model of composite service requests 4.2.3 Generalized additive independence request structure In some circumstances, the assumption of variables being additively independent, as Sect. 4.2.2., may not be true to the complete set of individual variables. For example, how much an operation is preferred by the requestor as necessary will change the structure of the preference relation of outputs. At the very least, those outputs with different satisfaction levels on that particular operation will be af-fected. In this case, we need to generalize the assumption of additive indepen-dence.
 ities. Unlike additive independence, it allows interactions between variables and decomposes the utility function into a sum of sub-utilities on the sets of interacting attributes. If there exists a not necessarily disjoint partition of the original variables set, such that the utility function, u (  X  ) can be decomposed as a summation of the utility functions of the partitioned variable sets [10], these variables are referred to as generalized additive independent for the preference relation defined by u (  X  ) . GAI is a less stronger independence assumption than additive independence and provides more flexibility in the structure of utility function [1, 10 X 12]. Since GAI is reasonably applicable to the service composition domain, we model the user utility function as GAI by rewriting (10) into (13) through the substitution of (12). Variable set { v k } are decomposed into { V I set to v and  X  K k = 1 I k ={ 1 ,..., K } . I k and V I respectively. The union of all V I score (v 1 ,...,v k ,...) = ous section, different types of variables can correlate to other variables in different ways. Studying whether variables interact with each other and what variables in-teract with each other is necessary to decide the partition of the variables. Variable c identifies the service categories involved. It represents what the service requestor wants to do, which shall not be affected by the distribution of other aspects of the outcome. Therefore, this variable forms the first participation. Variable o deter-mines the service operations that are believed to be useful constituency of the complex service. It may correlate with the variables of type AT . For example, whether a traveler considers taking a train or a flight may depend on whether a nonstop-flight is likely or whether the discount ticket fare is likely. Variable o may also interact with the variables of type OD . The traveler preference of a flight or a train may affect his preference of a taxi pick-up before checking into the hotel, given the common sense that airports always locate far away from the city while train stations may be close to the city area. A variable of type AT may correlate with other variables of its own type. For example, the preference over price may depend on whether a flight departs during the preferred timeframe.
 composing the composition utility. It starts by instantiating service variables c and o . c is assigned all service categories selected by the user as in step (b) and o is as-signed all service operations picked from the selected categories as in step (c). The algorithm then goes to set the binary variables of type OD as in step (d) through to step (e). For each operation pair in o , if the user has defined a precedence over it, the corresponding variable in OD is set to 1, otherwise 0. Since there are J  X  J possible ordered pairs (where J is the number of operations in o ), the variables can be indexed by a linear order indicated in the algorithm. After these initializations, algorithm starts creating partitions of service variables. It firstly creates a partition for the single variable of type C as in step (f). Each inter-attribute constraint is then examined and a new partition is created as in step (g) through to step (k). The algorithm repeatedly does the following two things: Whenever an attribute that is not already in this partition is seen, it is added to the current partition. Whenever an operation is seen, o is added to the current partition if not already in. After inter-attribute constraints, the algorithm checks each single-attribute constraint. If the attribute is not in any of the created partitions, a new singly partition is created for that attribute as in step (h). The last two jobs of the algorithm are to create a partition for each non-zero variable of OD if that variable is not part of the created partitions as in step (i), and to create a partition for variable o if it is not in any partitions as in step (j).
 Algorithm 1. Algorithm to establish service variable partitions for decomposing the composition utility of each variable sub set in the partition, or u k ( V I can build the utility function of the complete variable set, or score (v 1 ,...,v k ,...) as in (13).
 tions for each sub set of the variable set. We continue to use the same notation of V and V I i . V denotes the complete set of service variables and V I i denotes the sub set of variables indexed by the numbers in I i . To simplify the notation, we use V i to denote V I i . Under GAI, the sub-utility functions for each sub set can be shown as in (14). Sub-utility u k (  X  ) on subset V k ,or u k ( V k ) , is calculated as a sum of utilities of certain several other outcomes, u ( V [ I ] ) . These outcomes have the same value as V k on some variables and have the default values on the rest variables. For example, outcome V [ I 1 ] has the same values as in V for variables that are index by the numbers in I 1 and has default values for all other variables. There are two important related notions. The notion of a default outcome, denoted V [ I ] refers to a (complete) outcome where variables in I remain the same value as in V and all others are set to the corresponding arbitrary value in V 0 . The sec-ond formula in (14) tells that the sub-utility function u k (  X  ) on the local sub set of variables, V k , is defined as the sum of the utility function of outcome V [ I k ] and a two-level nested summation. In the outer summation, it switches the sign of the in-ner summation between 1 and  X  1 to indicate either adding or lessing the result of the inner summation. The inner summation iterates through a certain number, j ,of sub sets to find out the intersection between each sub set V i s iterated through and the local sub set V k . j intersecting sets are then intersected again to get the utility function on V [ j s = 1  X  X  X ] . All utilities with different iteration numbers j , ranging from 1 to k  X  1, are then added together and multiply by 1 or  X  1. ities of certain several outcomes. However, notice that V [ I k ] is still a complete outcome over all variables in the complete variable set. This means that to cal-culate sub-utilities, the user still has to assess the tradeoffs in domains of many variables, which may be hard for the user. To further reduce the complexity, we can restrict elicitations to utilities of subsets of variables instead of the complete variable set. Braziunas et al. suggested separating the elicitation process into local elicitation and global scaling [6], which we adopted.
 V [ I respectively. C i is the conditioning set of I i , defined as the union of all subsets that overlap with I i excluding the variables in I i ,or C j = j  X  I V { v 0 Budget } . C 1 ={ v 2 }={ flightDepartureTime } and V 0 the top anchor outcome of I 1 is V [ I 1 ] T = ( V T I and the bottom anchor outcome of I 1 is V [ I 1 ]  X  = ( V  X  I Budget } .
 be used to evaluate local outcomes, because the rest variables are irrelevant to the local outcome preference levels. Using local value functions, which are only locally calibrated value functions, sub-utility functions can be defined on v(  X  ) , anchor outcomes. For details, please refer to [17]. 4.2.4 Iterative and incremental request elicitation Iterative and incremental request elicitation improves the effectiveness of compos-ite service building. Such process gives service requestors more flexibility when describing their needs and allows decision-support systems to improve the utility model to deliver better payoff to the user. We would like to discuss briefly why we need iterative and incremental service request elicitation.
 position system, due to their cognitive limitation in describing the service needs. Automated generation of a service process structure can only be based on an  X  X s-timation X  of the customer X  X  service need. The automation process relies on the requestor X  X  critiques to make the decision. Research on incremental utility elic-itation [3, 13, 30] has also provided proof that an incremental and interactive theoretic framework can benefit the decision making by updating the incomplete model based on user feedback.
 group X  X  requirement document [34], when composing a service, relaxation or tightening the constraints shall be allowed. To take advantage of this flexibil-ity, requesters tend to iteratively revise their preferences in achieving their main objectives. Third, services over the Web show very varying, dynamic and non-deterministic features. Users X  constraints may be in conflict with the existing ser-vices or even themselves. These conflicts are not obvious until the composition system builds the user preference model and tries to resolve them. Resolving the conflicts is an iterative process, which gives opportunities for the user to adapt their needs to the available services in the real world.
 need for feedbacks on service attribute constraints provided by the requestors such that the request can be modified into a more complete or non-conflict one. Feedbacks can take different forms depending on the problems in the requests. If a requested data entity cannot be generated due to not enough input data entities provided, possible operations and the data entity input(s) that may have to be provided to produce the requested output shall be reminded using attribute o .If the failure of service composition is due to a particular non-satisfiable constraint, the constraint will be prompted to the user, along with a suggestion for how to relax that constraint via the attributes of type AT . 4.2.4.1 Iterative elicitation . Iterative elicitation refers to user changing their previ-ous specifications on the weights and scores, possibly in repetition. This provides the system with the adaptability of changes of both users and the service providers. This also provides opportunities for the decision making process to retreat from unsuccessful efforts in solving unsolvable problems.
 including version, validity, weight and score . We introduce corresponding lan-guage constructs to make the iterative process easy both for the requesters to make changes on their previous requests and preferences, and for the compo-sition system to produce the acceptable composition. Please refer to List 2 for details. We tend to keep the history of all incremental changes making the ser-vice requests stateful. UserConstraint encloses language constructs that capture the version evolvement of the user constraint and the validity of the constraint. Each elicitation of user preference is labeled with a version number, which takes on non-negative integer numbers and is incremented by 1 for every change on the preference. In this case, the user is allowed to change six times. At the same time, every time the user weight or score is revised, the new weight or score is appended to the end of the weight list or score list. In order to support history recording, the ranges of hasWeight and hasScore are declared as container resources.
 List 2 . Language constructs to make iterative process 4.2.4.2 Incremental elicitation. Incremental elicitation refers to user adding new preferences to give more complete descriptions of the utility model of service compositions. Incremental elicitation helps to achieve better utility function esti-mations, when the utility functions cannot be precisely derived based on the lim-ited number of user elicitations. In the case that the utility function estimation does not turn out to be satisfying, incremental elicitation drives the system towards a better solution.
 estimation from a number of single-variable sub-utility functions as shown in (4). Each of the sub-utility function is then factored into a local value function u k (v k ) and a weighting factor w k , as in (10). When a new preference on two outcomes, a b , is added, we get w  X  a &gt; w  X  b ,where w is the weighting vector. So w  X  ( a  X  b )&gt; 0. We can now transform the problem of introducing the new elicitation into the old utility model to the problem of solving the following set of constraints, as suggested in Bylthe [3]: ing to a conservative updating scheme [3]. w is an n -dimension weighting vector. A has rows of preference vectors 5 Application scenario and scheme evaluation In this section, we demonstrate how the proposed approach of modeling service requests is applied to a real-world business scenario. We will first give an example for additive independence. We then revise this example to show how GAI works for composite service requests. We also propose a possible way to evaluate the iterative and incremental scheme of the model. 5.1 Additive independence The case is about a service request for a composition of a travel arrangement service. Assume the requestor wants a package of a round trip flights, 2-day hotel reservation service and preferably 2-day SUV rental service. Air ticket booking must be done before hotel reservation. The cost must be between $650 and $900 and cost must be minimized. Travel on 22nd May or 23rd May. Morning flights are preferred. This could be from an agency or an individual. The scenario of the service client is as follows:  X  Travel Arrangement category.  X  Need Air ticket booking service.  X  Need hotel reservation.  X  SUV Rental is preferred.  X  Cost &lt; $650 preferred and Cost &gt; $900 not acceptable.  X  FlightDepartureDateTime &lt; 12 PM on 22nd May or 23rd May is preferred.  X  Air ticket booking precedes hotel reservation.
 registry is as follows: this model, we will walk through how the process proceeds and how tradeoffs in different aspects of possible service compositions are assessed. We ask the user to select service categories and pick service operations. We when ask the user to specify all constraints, which are what we have in the first part of the scenario description at the beginning of this section. The above information will be used to establish service variables and populate some of the variables. We will then build the partitions of the variables. In the case of the additive independent request structure, all partitions are singly partitions. We will then get the utility of certain values. For example, u 1 ( a 1 = $650 ) = 1and u 1 ( a 1 = $901 ) = 0, if a 1 represents Cost. The user also has to explicitly give the weights of all the variables. Pr sume that the statistics of taking on different data values can be collected and the probabilistic distributions can be induced from the data.
 and GAI requests.
 scores of all the attributes, weights and probability distribution of different out-Hotel X  X  lottery and Table 3 is for Budget Hotel X  X  lottery. In both tables, we use different shades to show different sub-outcomes. Probabilities of outcomes are also given in cells with corresponding shades. We calculate the expected utilities of two options and select the one has a large expected utility.
 If we sketch out possible solutions, the alternatives are between Royal Hotel and Budget Hotel with tradeoffs between different travel time and the availability of promotional hotel booking. For both hotels, the only two possibilities are to fly on 22nd by a morning flight without the discount hotel rate or to fly on 23rd evening and enjoy the discount hotel rate. Budget Hotel has a lower regular rate and a higher discount rate compared to Royal Hotel. Understandingly, its utility on regular rate is higher and the utility on discount rate is lower compared to those of Royal Hotel. We need also take into consideration the probability distributions of both hotels, which is 30 X 70% for Budget Hotel and 50 X 50% for Royal Hotel. Because the latter shows dominance in higher utility, it turns out to be a better choice. 5.2 Generalized additive independence To make the previous scenario a bit more complicated, we add in two constraints i.e.  X  X f the flight is a morning flight (arrival during working hours), a rental car is more preferred X , and  X  X f the flight is a morning flight, the user is more willing to pay a higher price. X   X  FlightDepartureTime &lt; 12 PM  X  Rental car service is more preferred.  X  FlightDepartureTime &lt; 12 PM  X  Preference on a relatively higher cost in-A C ={ c } , c ={ travel arrangement } ; A O ={ o } , o ={ Air ticket booking, RoomEPassIssue, SUV Rental } ;
A AT ={ a 1 , a 2 , a 3 } , a 1 = FlightDepartureTime, a 2 = Cost, a 3 = FlightDepar-
A OD ={ r 1 , r 2 , r 3 } , r 1 =  X  (Air ticket booking, RoomEPassIssue) = 1, r 2 =  X  tion decomposition. functions and utilities of the anchor outcomes as: u 2 ( a 1 , o ) = u T 2  X  u  X  2 v 2 ( a 1 , o )  X  v 2 ( a 0 1 , o 0 ) , 5.3 Proposed effectiveness measurement We have walked through the travel scenario to prove the applicability of the model by showing how the model works for both additive and generalized additive re-quest structures. The other important issue is to evaluate the effectiveness of the iterative and incremental scheme of the model and show how this scheme helps the process of composition. Intuitively, for complex services, most users are not able to put together all their requirements at once nor are they able to guarantee the requirements they have are not in conflict. Such an iterative and incremental scheme will be needed under most circumstances to fix the tentative problems of the users communicating service needs to the system.
 of human subjects as service users and to design some experiments on composing services for their service requests. We propose a simple two-dimensional evalu-ation matrix against various types of composition tasks submitted by the group of subjects, as shown in Fig. 2. The upper bound of the interactions allowed for between the system and the users is also assumed.
 sus non-functional requirements. On the other dimension are effectiveness and correctness. First, how effective the scheme is in terms of helping satisfy the func-tional requirements of the users is evaluated. The frequency that the functional requirements of service requests are met by one-time composition effort can be measured. One minus this frequency gives us the effectiveness of the scheme on this dimension. The frequency of unsatisfied composition results despite of the allowed number of interactions is observed, one minus which gives us the cor-rectness of the scheme on this dimension. Second, how helpful the scheme is in terms of framing out the reasonable non-functional requirements of the users and satisfying the requirements is evaluated. For the same functional requirements, the frequency that the non-functional requirements of service requests are met by one-time composition effort can be measured. One minus this frequency gives us the effectiveness of the scheme on the non-functional dimension. The frequency of various non-functional requirements of the same functional requirements that are failed by the system with the model despite of the maximum number of allowed interactions is also recorded. An average of such frequencies over all functional requirements is taken. One minus the average gives the correctness of the scheme on the non-functional dimension. 6 Related work The concept of Semantic Web services was first proposed by McIlraith et al. [25]. These researchers initiated the discussion on the semantic Web technology and on how it makes information on the Web better understood by computers. McIl-raith et al. applied Semantic Web to Web services and developed markups of Web services that benefit Web service discovery, execution and composition [25]. They also pointed out that user constraints and preferences are the main thing that makes service discovery, execution and composition difficult. In that paper and in related papers [24], they described a semantic Web service composition system based on a LP language and AI planning techniques. They believe that requests of com-plex services are often for a limited number of common services with different personalized preferences. Therefore, most of requests can be fulfilled by making use of pre-built general templates. We argue that sometimes requests are not able to be represented by general templates. Automatic or semi-automatic composi-tion should facilitate construction of the service process structure given a request, without assuming whether the request can be represented by a limited number of general templates. At the same time, the incompleteness of knowledge on the ser-vice need makes discovering the service process structure even more challenging. We propose the interactive and interactive semi-automatic approach for service composition, also keeping in mind the needs of interactions in resolving user con-straints and preferences.
 mantic Web X  an ontology-based framework for automatic Web service compo-sition [26]. They use a high-level declarative language to describe services and  X  X omposability rules X  to check the composability of services from both the syn-tactic and semantic perspectives. The proposed ontology-based descriptions of Web services are modeled as a graph composed of nodes and edges representing the WSDL and extended service description concepts and relationships of these concepts respectively. Based on the ontology, they define the concepts of mode, message, operation and Web services, on top of which, they demonstrate syntac composability (mode and binding composability) and semantics composability (message composability, operation semantics composability, qualitative compos-ability and composition soundness). The composition algorithm is composed of four phases including the specification phase using a CSSL language, matchmak-ing phase using the composability rules defined, selection phase based on quality of composition and the generation phase to generate a detailed composite service description. Their work is similar to ours in the high-level declarative descriptions of services and their concept composability is very similar to service constraints. Our MAUT model serves as a mapping between the description of the service need and the complete process of service composition in a streamlined manner, which irons out a better-formalized systematic approach to service composition. teractive decision systems [4, 11, 12, 20, 29]. Literatures have reported a number of interactive and incremental ways to help the user to establish a preference model and to make decisions on tradeoffs among multiple preferences. Reported research on user preference elicitation focuses on the design of effective interaction inter-faces, and on developing appropriate models of the preference or utility function [6, 10 X 12]. Some of the work has been targeted towards applications in certain vertical domains such as the airline and travel business. On the other hand, there are a few efforts in making use of decision theories in selecting service providers. For example, Benatallah et al. presented a model-driven service composition sys-tem and peer to peer service orchestration with multi-attribute provider selection policies [2]. They suggested a set of predefined attributes, such as execution price, execution duration, reputation and etc., and their corresponding score functions. Liang et al. models service attribute constraints by MAUT and solves the compo-sition problem by decision-support system techniques [19]. As another example, Fakas et al. developed a multi-context information based intelligent navigation system to incorporate user profile including their preferences and interests [9]. In this paper, we consider multi-dimensional preferences in the semantic Web service request context, and study the applicability of MAUT as the enabling model for both functional and non-functional requirement satisfaction on complex services. In our model, MAUT serves a more general role in selecting and composing the desired services, compared to quality comparisons in Benatallah et al. [2]. comes from the AI community. In [17, 28], the authors pointed out that BPEL [5] lacks the flexibility in responding to the unforeseen situation. They reported a request language called XML Service Request Language (XSRL) that integrates AI planning and constraint satisfaction techniques, and a planning architecture that accepts requests in XSRL. The planning strategy is on an interleaving of planning and execution. We tried to take into consideration user preferences for service composition, and to present them in the semantic Web framework. We perceive that the semantics of the request have to be analyzed against the whole composite service instead of its component services and therefore, see it beneficial to com-pose the service first before actually invoking the service. 7 Conclusions The contribution of the paper is to demonstrate the applicability of multi-attribute utility techniques to the problem of modeling semantics in service requests for composite services. The key to the idea is to model the request semantics as revis-able user constraints and preferences and apply multi-attribute utility techniques to resolve the user preferences. In this model, non-deterministic aspects in service composition are captured in expected utilities. Two preference structures, i.e. addi-tive independence and generalized additive independence, are discussed in detail for the model. We enhance OWL-S with language construct extensions that make possible a clear and uniform way of representing the semantics of both functional and non-functional aspects of service requests. We also work out an example to demonstrate the process of modeling the service requests and of comparing vari-ous solutions according to the preferences.
 processing capability of the Web services model as it eases the interfacing of the service demand descriptions with service discovery and composition. Benefits of Web services framework favor a roll out of the request processing capability that adds value to the automatic service discovery, invocation and integration. Bet-ter request processing relies on a model where semantics of service requests can be captured by machines. This model must handle a range of requests. Requests can range from very brief ones that have only a single operation to very compli-cated ones that provide sophisticated structure of operations with constraints on correlated multiple service variables. Our work provides a design of such request models that facilitate the request processing and promote better service discovery and integration.
 continue extending the models and methods for semi-automatic and automatic composition of Web services. (1) There are uncertainties involved when discover-ing and composing Web services. In some cases, probability distributions cannot be derived. Extensions towards an appropriate uncertainty model can be made to complement the request processing. (2) Some criteria regarding services may be common to all customers. Extension work on identifying both the aspects that can be treated as common and their criteria is valuable. (3) As part of the future work, we will look into deploying the implementation of the model/system into the public domain in order to carry out evaluation based on real usage and user experience.
 References Author Biographies
