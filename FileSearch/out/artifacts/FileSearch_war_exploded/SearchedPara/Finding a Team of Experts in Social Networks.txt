 Given a task T , a pool of individuals X with different skills, and a social network G that captures the compatibility among these individuals, we study the problem of finding X 0 , a sub-set of X , to perform the task. We call this the Team For-mation problem. We require that members of X 0 not only meet the skill requirements of the task, but can also work ef-fectively together as a team. We measure effectiveness using the communication cost incurred by the subgraph in G that only involves X 0 . We study two variants of the problem for two different communication-cost functions, and show that both variants are NP-hard. We explore their connections with existing combinatorial problems and give novel algo-rithms for their solution. To the best of our knowledge, this is the first work to consider the Team Formation problem in the presence of a social network of individuals. Experi-ments on the DBLP dataset show that our framework works well in practice and gives useful and intuitive results. H.2.8 [ Database Management ]: Database Applications X  Data mining ; G.2.2 [ Discrete Mathematics ]: Graph The-ory X  Graph algorithms Algorithms, Experimentation, Theory team formation, social networks, graph algorithms
The success of a project depends not only on the exper-tise of the people who are involved, but also on how effec-tively they collaborate, communicate and work together as  X  Part of this work was done when the author was at IBM Almaden Research Center.
 Figure 1: Network of connections between individuals in { a, b, c, d, e } . a team. Assume, for example, an IT project manager who wants to build a team of engineers skilled in the following areas: T = { algorithms, software engineering, distributed sys-tems, web programming } . Also assume there are five can-didates, { a, b, c, d, e } , with the following backgrounds: X a = { algorithms } , X b = { web programming } , X c = { software engineering, distributed systems } , X d = { software engineer-ing } and X e = { software engineering, distributed systems, web programming } . The relationships among these candidates are represented by the social network shown in Figure 1, where the existence of an edge between two nodes in G indi-cates that the corresponding persons can collaborate effec-tively.

Without considering how effectively these people can col-laborate, the manager can select either X 0 = { a, b, c } or X 00 = { a, e } , since both these teams have the required skillset. However, the existence of graph G makes X 0 = { a, b, c } a su-perior solution, since the structure of G indicates that a and e cannot work together at all.

The existence of a social network between individuals is quite common in real scenarios. In a company, the network may capture the hierarchical organization of the employ-ees. In this case, the graph encodes the fact that people in the same group or department can communicate easier than people working in different divisions. In a research commu-nity, the network captures previous successful collaborations among scientists. Other examples of social networks be-tween professionals include LinkedIn ( www.linkedin.com ), Xing ( www.xing.com ) and others.

The problem: In this paper, we study the problem of finding a group of individuals who can function as a team to accomplish a specific task. We assume that there exists a pool of n candidates X = { 1 , . . . , n } , where each candi-date i has a set of skills X i . We also assume that these candidates are organized in a weighted and undirected so-cial graph G ( X , E ). The weights on the edges of G should be interpreted as follows: a low-weight edge between nodes i, j implies that candidate i and j can collaborate and/or communicate more easily than candidates connected with a high-weight edge. These weights can be instantiated in dif-ferent ways in different application domains. For example, in a company, the weight between two employees may corre-late to the length of the path from one employee to another through the organizational chart. In a scientific research community, the weight between two scientists is related to the total number of publications they have coauthored. In-terpersonal relationships among individuals can also be us ed to calculate the weights.

Given a task T that requires a set of skills, our goal is to find a set of individuals X 0  X  X , such that every required skill in T is exhibited by at least one individual in X 0 tionally, the members of team X 0 should define a subgraph in G with low communication cost . The communication cost measures how effectively the team members can collaborate: the lower the communication cost, the better the quality of the team.

Our contributions: To the best of our knowledge, we are the first to consider the Team Formation problem in the presence of a social network of individuals. We study two instances of this problem, analyze them rigorously and present algorithms for their solution. Our experiments ill us-trate that our problem definitions, as well as our algorithms , work well in practice and give useful and intuitive results.
Roadmap: The rest of the paper is organized as follows: in Section 2 we review the related work on team formation and task allocation. In Section 4 we formally define the Team Formation problem and identify the two variants that we are going to consider in this paper. In the same section, we also study their computational complexity. In Section 5 we give algorithms for the different variants of the Team Formation problem and in Section 6 we illustrate the usefulness of our methodology on a real collaboration dataset. We conclude the paper in Section 7. There is a considerable amount of literature on Team Formation in the operations research (OR) community [3, 7, 17, 16]. A trend in this line of work is to formulate the Team Formation problem as an integer linear pro-gram (ILP), and then focus on finding an optimal match between people and the demanded functional requirements. The problem is often solved using techniques such as sim-ulated annealing [3], branch-and-cut [17] or genetic algo-rithms [16]. The main difference between the studies above and our work is that we explicitly take into account the so-cial graph structure of the individuals, in the process of te am formation. In most of the previous work, the organizational or social bonds among individuals are ignored and the focus is limited on their skills. Moreover, the problem formula-tions we provide, and the algorithmic approaches we take, are fundamentally different from those proposed in the OR literature.

The necessity of effective collaboration among individuals in a team has been considered in the past. Fitzpatrick and Askin [9] use the Kolbe Conative Index (KCI) to measure individuals X  drive and temperament, which in turn reflects the quality of the team. Chen and Lin [7] use the Myers-Briggs test to measure the candidates X  personality and eval -uate their interpersonal relationships as team members. Al -though these approaches are interesting from the anthropo-logical/psychological point of view, they also ignore the e x-isting graph structure among individuals. Therefore, thes e approaches should be considered complementary to ours.
The network structure between individuals in a workforce pool has been taken into account by Gaston et al. [11]. The authors provide an experimental study of how differ-ent graph structures among the individuals affect the per-formance of a team. Although related, the work presented in [11] does not address the computational problem of find-ing a team of experts in a given network. Some work has also been devoted to the construction of the social network [5, 16], given a pool of skilled individuals.

The dynamics of group-formation processes and their im-pact on the formation of communities in networks have been recently addressed in [2]. The game-theoretic aspects of th e same problem have been studied in [12]. These studies are complementary to ours and mostly focus on providing useful insights about social processes.
We assume a pool of candidates consisting of n individu-als, X = { 1, . . . , n } . We also assume A = { a 1 , . . . , a a universe of m skills. Each individual i is associated with a set of skills X i  X  A . If  X  j  X  X i we say that individual i has skill a j ; otherwise individual i does not have skill a We often use the set of skills an individual possesses to refe r to him. Also, we say that a subset of individuals X 0  X  X possesses skill a j if there exists at least one individual in X that has a j .

A task T is simply a subset of skills required to perform a job. That is, T  X  A . If a j  X  T we say that skill a j is required by task T . We can also define the cover of a set of individuals X 0 with respect to task T , denoted by C ( X to be the set of skills that are required by T and for which there exists at least one individual in X 0 that has them. That is, C ( X 0 , T ) = T  X   X  i  X  X  0 X i . Given a skill a  X  A , we define its support set (or simply support ), denoted by S ( a ), to be the set of individuals in X that has this skill. That is, S ( a ) = { i | i  X  X  and a  X  X i } .

As we have already discussed, we assume that individuals are organized in an undirected and weighted graph G ( X , E ). Every node of G corresponds to an individual in X ; E is the set of edges connecting the nodes. The edges of G are weighted; edges of low (high) weight represent low (high) communication cost between the nodes they connect. With-out loss of generality, we assume that the graph G is con-nected; we can transform every disconnected subgraph to a connected one, by simply adding edges with very high weight between every pair of nodes that belong to different connected components. Note that this very high weight is a number higher than the sum of all pairwise shortest paths in G .

For every two nodes i, i 0  X  X we define the (graph) dis-tance function d ( i, i 0 ) to be the weight of the shortest path between i and i 0 in G . Note that this distance function be-tween the nodes is a metric and thus satisfies the triangle inequality. For every pair of nodes we also use Path ( i, i represent the set of nodes that are along the shortest path from i to i 0 . Apart from computing the distance between two nodes in G , we will often need the distance between a node i  X  X  and a set of nodes X 0  X  X  . We define this to be to represent the set of nodes that are along the shortest path from i to the node j = arg min i 0  X  X  0 d ( i, i 0 ).
Finally, given graph G and X 0  X  X , we use G [ X 0 ] to denote the subgraph of G that contains only the nodes in X .
In this section, we formally define the Team Formation problem that we address in this paper. Our problem defini-tions reflect our belief that efficient communication among team members is an important factor for the successful com-pletion of a task.
Problem 1. [ Team Formation ] Given the set of n in-X 0  X  X  , so that C ( X 0 , T ) = T , and the c ommunication cost Cc ( X 0 ) is minimized.

In order to stress the generality of the Team Formation problem, we have deliberately avoided defining the commu-nication cost in the definition of Problem 1. In this paper, we focus on two instantiations of the communication-cost function. We chose these instantiations as we believe they are practical, simple and intuitive.
 Diameter ( R ) : Given graph G ( X , E ) and a set of individ-Minimum Spanning Tree ( Mst ) : Given graph G ( X , E )
We call the Team Formation problem with communica-tion function Cc-R , the Diameter-Tf problem. Similarly, we refer to the Team Formation problem with communi-cation function Cc-Mst as the Mst-Tf problem.
 Proposition 1. The Diameter-Tf problem is NP-complete. Proof. We prove the proposition by a reduction from the Multiple-Choice Cover ( Mcc ) problem [1]. An instance of the Mcc problem consists of a universe V = { 1 , . . . , N } of N elements, a N  X  N symmetric real matrix D with non-negative entries, and a S = { S 1 , . . . , S k } such that each S V . Given constant K , the decision version of the Mcc prob-lem asks whether there exists V 0  X  V such that for every K .

We transform an instance of the Mcc problem to an in-stance of the Diameter-Tf problem as follows: for every set S in the Mcc problem we create a skill a i . The task T to be performed requires all the k skills. That is, T = { a 1 , . . . , a For every element v  X  V of the Mcc instance, we create an individual i v with skills X v = { a i | v  X  S i } . Two individu-als i v and i 0 v are connected in the graph G by an undirected edge with weight equal to D ( v, v 0 ). Given this mapping it is easy to show that there exists a solution to the Mcc prob-lem with cost at most K if and only if there exists a solution to the Diameter-Tf problem with Cc-R cost at most K . The problem is trivially in NP.

Note that the above reduction does not assume anything about the distance function between the nodes in G . How-ever, from [1], we know that the Mcc problem is NP-hard even when the distance matrix D corresponds to a metric. Therefore, the Diameter-Tf problem is NP-hard when the distance function d between the individuals in G is a metric. Observe that the above reduction is approximation preserv-ing . Therefore, the approximation properties of the Mcc problem described in [1] carry over to the Diameter-Tf problem as well.

For the Mst-Tf problem, we have the following hardness result: Proposition 2. The Mst-Tf problem is NP-complete. Proof. We prove the proposition by a reduction from the Group Steiner Tree ( Gst ) problem [13]. An instance of the Gst problem consists of an undirected graph G ( V, E ), cost function c : E  X  R and k subsets of vertices (called groups) { g 1 , . . . , g k } with g i  X  V, i  X  X  1 , . . . , k } .
Given constant K , the decision version of the Gst problem asks whether there exists a subtree T ( V 0 , E 0 ) of G ( V, E ) (i.e., V 0  X  V and E 0  X  E ) such that | V 0  X  g i | &gt; 0 for every i  X  X  1 , . . . , k } and cost P e  X  E 0 c ( e )  X  K .
We transform an instance of the Gst problem to an in-stance of the Mst-Tf problem as follows: for every group g in the Gst problem we create a skill a i . The task T to be performed requires all the k skills. That is, T = { a 1 , . . . , a For every node v  X  V of the Gst problem we create an in-dividual i v with skills X v = { a i | v  X  g i } . The graph G the Mst-Tf problem is identical to the graph G of the Gst problem, where the cost function c determines the weights of the edges in the Mst-Tf instance of the problem. Given this mapping it is easy to show that there exists a tree solu-tion to the Gst problem with cost at most C if and only if there exists a solution to the Mst-Tf problem with Cc-Mst cost at most C . The problem is trivially in NP.

As before, note that the proofs above do not assume any-thing about the distance function between individuals in G . However, since the Gst problem remains NP-hard even when the graph edge weights satisfy the triangle inequality , so does the Mst-Tf . As in the case of the Diameter-Tf problem, the above reduction is approximation preserving. Therefore, the approximation properties of the Gst prob-lem ([6] and references therein) carry over to the Mst-Tf problem as well.
In the definition of the Team Formation problem and its specializations, we focused on minimizing the communi-cation cost among team members. Other notions of the  X  X f-fectiveness X  X f a team can lead to different optimization fun c-tions. For example, if the communication cost was not a con-cern, we could define as our goal to find X 0  X  X  , such that C ( X 0 , T ) = T and |X 0 | is minimized. Such a problem defini-tion ignores the existence of the underlying graph G ( X , E ), and is actually an instance of the classic Set Cover prob-lem, which can be solved by the standard GreedyCover al-gorithm. Details are presented in Sections 5.2 and 6.
Optimizing both the cardinality of the team and the com-munication cost between its members would require the min-imization of a function of the form  X   X |X 0 | +(1  X   X  )  X  Cc ( X where  X   X  [0 , 1]. For  X  = 1 the problem seeks for teams with the minimum cardinality. For  X  = 0 this problem is the Team Formation problem. However, for values of  X  in (0 , 1) it is not clear that optimizing this alternative function makes sense; this is mostly because the two terms in the sum are in different scales and there is no knowledge on how these scales relate.

Alternatively, these two objectives (team size and commu-nication cost) could be taken into account simultaneously b y defining the problem as a bi-objective optimization problem . In such cases the goal is to find Pareto-optimal solutions [4]. Note that a solution is called Pareto-optimal if there does n ot exist another solution that is better in both objectives. Fo r many problems, the set of Pareto-optimal solutions is expo-nential to the size of the input and thus cannot be found in polynomial time. Although we do not study this bi-objective version of the problem in this paper, we note that a solu-tion with minimum communication cost implicitly requires a small team, since larger teams typically result in higher communication costs.

In our setting, we assume that individuals either have a skill or not; we do not allow for a scaling of the nodes X  abili-ties. Similarly for the tasks; we assume that a task requires a certain set of skills, without considering the special imp or-tance that different skills might have for the completion of the task. Therefore, a straightforward generalization of t he Team Formation problem would be its graded variant. In such a variant, the degree of skillfulness of individuals an d the extent to which a skill is required for the completion of a task can be modelled by means of an integer weight in some interval, e.g., { 0 , 1 , . . . ,  X  } . In this case, the task specification explicitly states for every required skill a the minimum level requirement  X  j . Similarly, for every in-dividual i with skill a j , the level of his competence with respect to a j is specified. Then, all individuals with com-petence level higher or equal to the minimum required level are capable of contributing in covering this skill for the gi ven task. Conceptually, we assume that an individual has a skill , only if his respective competence level is equal or higher to the required level. In this way, this  X  X raded X  version of the problem becomes identical to the basic version of the Team Formation problem, studied in this paper. In this section, we present algorithms for the Diameter-Tf and Mst-Tf problems. Our algorithmic solutions ex-ploit the relationship of these two problems with the Mcc and Gst problems, respectively.
Algorithm 1 shows the pseudocode of the RarestFirst algorithm for the Diameter-Tf problem. The algorithm is a variation of the Multichoice algorithm presented in [1]. First, for every skill a required by the task T , we compute S ( a ), the support of a . Then, the algorithm picks the skill a rare  X  T with the lowest-cardinality support S ( a rare ). Note that at least one individual from the set S ( a rare ) needs to be included in the solution. Among all candidates from the set S ( a rare ), the algorithm picks the one that leads to the smallest diameter subgraph, when connected to its closest individual in all other support groups S ( a ) ( a  X  T and a 6 = a Algorithm 1 The RarestFirst algorithm for the Diameter-Tf problem.
 1: for every a  X  T do 2: S ( a ) = { i | a  X  X i } 3: a rare  X  arg min a  X  T | S ( a ) | 4: for every i  X  S ( a rare ) do 5: for a  X  T and a 6 = a rare do 6: R ia  X  d i, S ( a ) 7: R i  X  max a R ia 8: i  X   X  arg min R i 9: X 0 = i  X   X  X  Path ( i  X  , S ( a )) | a  X  T }
Recall that in line 6 of Algorithm 1, d i, S ( a ) is simply min i 0  X  S ( a ) d ( i, i 0 ). Also recall that Path ( i is the set of nodes in the graph that are along the short-est path from i  X  to i 0 , where i 0 is such that i 0  X  S ( a ) and d i  X  , S ( a ) = d ( i  X  , i 0 ). We assume that all pairs shortest path have been pre-computed, and we use hash tables for storing the attributes of every individual and a different se t of hashtables for storing the individuals that posses a spe-cific attribute. Then, the running time of the RarestFirst algorithm is O ( | S ( a rare ) | X  n ). A worst-case analysis sug-gests that | S ( a rare ) | = O ( n ). Thus the worst-case running time of the RarestFirst is O n 2 . However, in practice, the running time of the algorithm is much less that this worst-case analysis suggests.

Since the employed distance function d is a metric, we can state the following for the approximation factor of the RarestFirst algorithm:
Proposition 3. For any graph-distance function d that satisfies the triangle inequality, the Cc-R cost of the solu-tion X 0 , given by RarestFirst for a given task, is at most twice the Cc-R cost of the optimal solution X  X  . That is, Cc-R ( X 0 )  X  2  X  Cc-R ( X  X  ) .

Proof. The analysis we present here is similar to the analysis of the Multichoice algorithm presented in [1]. First, consider the solution X 0 output by the RarestFirst algo-rithm, and let a rare  X  T be the skill possessed by the least number of individuals in X . Also, let i  X  be the individual picked from set S ( a rare ) to be included in the solution X Now consider two other skills a 6 = a 0 6 = a rare and individuals i, i 0  X  X 0 such that i  X  S ( a ) , i /  X  S ( a 0 ) and i 0  X  S ( a S ( a ). If i, i 0 are part of the team reported by the Rarest-First algorithm, it means that i = arg min j  X  S ( a ) d ( i and i 0 = arg min j  X  S ( a 0 ) d ( i  X  , j ). Due to the way the algo-rithm operates, we can lowerbound the Cc-R cost of the optimal solution as follows:
Cc-R ( X  X  )  X  d ( i  X  , i ) and Cc-R ( X  X  )  X  d i  X  , i Since we have assumed that the distance function d satisfies the triangle inequality we also have that d ( i, i 0 )  X  d ( i d ( i  X  , i 0 ). By applying the bounds given in (1) in the triangle inequality, we get the proposed approximation factor. In this section we describe two algorithms for solving the Mst-Tf problem: the CoverSteiner and EnhancedSteiner algorithms. Both algorithms are motivated by the resem-blance of Mst-Tf to Steiner tree problems. Algorithm 2 The CoverSteiner algorithm for the Mst-Tf problem.
 1: X 0  X  GreedyCover ( X , T ) 2: X 0  X  SteinerTree ( G, X 0 )
The first heuristic we present for the Mst-Tf problem proceeds in two steps. In the first step, the social network is ignored and the algorithm focuses on finding a set of in-dividuals X 0  X  X such that  X  i  X  X  0 X i  X  T . In the second step, the algorithm finds the minimum cost tree that spans all the nodes in X 0 , and possibly other nodes in X \X 0 that way, a set of nodes X 0 such that X 0  X  X 0  X  X is re-ported. We call this two-step algorithm the CoverSteiner algorithm.
 The pseudocode of this algorithm is given in Algorithm 2. The goal of the first step is to solve an instance of the classic Set Cover problem: the universe of elements to be covered are the requirements of task T and each individual in X is a subset of the universe. To solve this, we use the stan-dard GreedyCover algorithm for the Set Cover problem. The GreedyCover algorithm is an iterative greedy procedure, adding at each step t the individual X t that possesses the most yet uncovered required skills in T . For details on this algorithm see [15].

In its second step, the CoverSteiner algorithm solves an instance of the Steiner Tree problem on graph G . Recall that in the standard Steiner Tree problem, we are given an undirected graph with non-negative edge costs. The ver-tices of this graph are partitioned into two sets: the re-quired and the Steiner vertices. The Steiner Tree prob-lem then asks for the minimum-cost tree in the input graph that contains all required vertices and any subset of the Steiner vertices. In our case, the set of nodes X 0 reported by the GreedyCover algorithm corresponds to the set of re-quired vertices, while the vertices in X \X 0 represent the Steiner vertices. Given graph G ( X , E ), the goal of line 2 of Algorithm 2 is to find the solution X 0 that minimizes Cc-Mst ( X 0 ), under the constraint that X 0  X  X  0 . There exist many algorithms for solving the classic Steiner Tree problem. The pseudocode of the algorithm we use for our experiments is given in Algorithm 3. We call this algo-rithm the SteinerTree . The algorithm is due to [14], and is in fact a greedy heuristic for the Steiner Tree . The algo-rithm incrementally adds to the current solution X 0 nodes Algorithm 3 The SteinerTree algorithm.
 1: X 0  X  v , where v is a random node from X 0 . 2: while ( X 0 \X 0 ) 6 =  X  do 3: v  X  X  X  arg min u  X  X  4: if Path ( v  X  , X 0 ) 6 =  X  then 5: X 0  X  X  0  X  X  Path ( v  X  , X 0 ) } 6: else 7: Return Failure from the required set X 0 . At every step, a single node from X 0 is added; this is the node v  X  that has the minimum dis-tance to the set of nodes X 0 already added to the solution (line 3). If such node exists v  X  along with all the nodes in the shortest path from it to X 0 are added to the solution set. Otherwise, failure is reported.

The running time of the CoverSteiner algorithm is the summation of the running times of GreedyCover and Stein-erTree . The time required for the execution of the Greedy-Cover algorithm is O ( | T | X |X| ) or O ( mn ). The time re-quired for the execution of SteinerTree shown in Algo-rithm 3 is O ( |X 0 | X | E | ). Thus, in the worst case, the running time of CoverSteiner is O n 3 (this is because |X 0 | = O ( n ) and | E | = O n 2 ). However, in practice the cardinalities of sets X 0 and E are much less than their worst-case upper bounds.

The main disadvantage of the CoverSteiner algorithm is that, in the first step, it completely ignores the underlying graph structure. This can lead to teams with a high com-munication cost, or may even lead to failure, even in cases where a solution to the Mst-Tf problem actually exists.
The inadequacies of the CoverSteiner algorithm can be alleviated by the EnhancedSteiner algorithm that we de-scribe in this section.

The EnhancedSteiner algorithm starts by first enhanc-ing graph G with additional nodes and edges to form the enhanced graph H . Then, SteinerTree is evoked to solve the Steiner Tree problem on the enhanced graph H (for similar applications of Steiner tree algorithms see [8]). T he pseudocode that corresponds to these two steps of the En-hancedSteiner algorithm is shown in Algorithm 4.
 Algorithm 4 The EnhancedSteiner algorithm for the Mst-Tf problem.
 1: H  X  EnhanceGraph G, T 2: X H  X  SteinerTree ( H, { Y 1 , . . . , Y k } ) 3: X 0  X  X  H \{ Y 1 , . . . , Y k }
Let the task to be performed require k skills, i.e., T = { a 1 , . . . , a k } . The routine Enhance (line 1 of Algorithm 4) makes a linear pass over the graph G and enhances it as follows: an additional node Y j is created for every skill a T . Each such new vertex Y j is connected to a node i  X  X if and only if a j  X  X i . The distance between node Y j and nodes i  X  S ( a j ) are set to be d ( Y j , i ) = D where D is a large real number, larger than the sum of all the pairwise distances of the nodes in the graph G . Finally, every node i  X  X  that has abilities X i is replaced by a clique C i of size | X i | . Each node in the clique C i should be considered as a copy of individual i that has only a single distinct skill from the set X i . The distance between every two nodes in the clique C i is set to zero. Each node in the clique C maintains all the existing connections of node i to the rest of the graph  X  including the connections to nodes { Y 1 , . . . , Y
The set of nodes X H that participate in the Steiner tree of the enhanced graph H are found by calling the SteinerTree algorithm with required nodes Y 1 , . . . , Y k . In a final step, the algorithm removes from set X H the artificially added nodes Y 1 , . . . , Y k (and their incident edges) to obtain the final solution X 0 .

The following claim can be made with respect to this algo-rithm. Let X  X  H be the set of nodes in the optimal Steiner tree of the enhanced graph H , and X  X  be the optimal team for the Mst-Tf problem. Then, we have that Cc-Mst ( X  X  ) = Cc-Mst ( X  X  H \{ Y 1 , . . . , Y k } ). That is, if we remove nodes Y , . . . , Y k (and their incident edges) from the optimal solu-tion of the Steiner tree problem on the enhanced graph H , then the remaining nodes form the optimal solution to the Mst-Tf problem.

Observe that the replacement of every individual i with a clique C i of size | X i | is only conceptual. In practice, the im-plementation of the algorithm does not require this. There-fore, the enhanced graph H contains only k more nodes than the input graph G , namely the nodes Y 1 , . . . , Y k . Therefore, following the analysis of the SteinerTree done in the previ-ous section, we have that the running time of the Enhanced-Steiner algorithm is O ( k  X | E | ).

The EnhancedSteiner algorithm is motivated by the obvi-ous similarity between the Mst-Tf problem and the Group Steiner Tree ( Gst ) problem; the connection was already highlighted in the proof of Proposition 2. In general, inste ad of the EnhancedSteiner algorithm, any other (approxima-tion) algorithm for the Gst problem can also be used to solve the Mst-Tf problem. We have picked the Enhanced-Steiner algorithm because it is simple, intuitive and works well in practice. The best approximation ratio achieved by an algorithm is O (log 3 n log k ) [10]. For a review of some recent approximation algorithms for the Gst problem see [6, 8, 10] and references therein. In this section we evaluate the proposed algorithms for the Team Formation problem using the scientific-collaboration graph extracted from the DBLP bibliography server. We show that our algorithms for both the Diameter-Tf and Mst-Tf problems give high-quality results in terms of the communication cost , the cardinality of the team , and the con-nectivity of the team . Examples of teams reported by our methods illustrate the effectiveness of our framework in rea l scenarios.
In addition to the algorithms we described in Section 5, we also experiment with some straightforward greedy heuris -tics, that would be natural alternatives for solving the Team Formation problem. The rationale of these algorithms is to form a solution iteratively. At round t , team X t is formed by adding to the team X t  X  1 a node i  X  X  \X t  X  1 . The node i is selected so that it maximizes the ratio i = arg max That is, the node i that achieves the best ratio of newly cov-ered skills in T divided by the corresponding communication cost is picked. We refer to the variation of the greedy algo-rithm that uses the Cc-R (resp. Cc-Mst ) communication-cost function, as GreedyDiameter (resp. GreedyMST ).
We use a snapshot of the DBLP data taken on April 12, 2006 to create a benchmark dataset for our experiments. We only keep entries of the snapshot that correspond to pa-pers published in the areas of Database ( DB ), Data mining ( DM ), Artificial intelligence ( AI ) and Theory ( T ) confer-ences. For each paper, we have information about its au-thors (names), title, the forum where it was published and the year of publication. We end up with a total of 19 venues categorized as follows: DB = { sigmod, vldb, icde, icdt, edbt, pods } , DM = { www, kdd, sdm, pkdd, icdm } , AI = { icml, ecml, colt, uai } and T = { soda, focs, stoc, stacs } . We refer to the set of selected papers as the DBLP dataset.

We now proceed to generate the input to the Team For-mation Problem as follows. The set of skilled individuals X dblp consists of the set of authors that have at least three papers in the DBLP dataset. The skillset X i of each such author i consists of the set of terms that appear in at least two titles of papers in DBLP that he has co-authored. The above procedure creates a set X authors consisting of 5508 individuals and 1792 distinct skills. Two authors i, i 0 connected in the graph G dblp ( X dblp , E ) if they appear as co-authors in at least two papers in DBLP . This threshold leads to a graph G dblp that has 5588 total edges. The weight of an edge connecting nodes i, i 0 is w ( i, i 0 ) = 1  X  | P i (resp., P i 0 ) is the set of papers authored by i (resp., i In other words, the weights on the edges represent pairwise Jaccard distances between all pairs of connected nodes. We compute the graph distance between two nodes in graph G dblp using the shortest path distance as we described in Section 3.
This section evaluates the Team Formation algorithms on the communication cost , the cardinality of the team and the connectivity of the team .
 Task generation: Every generated task is characterized by two parameters: 1) t  X  the number of required skills in the task; and 2) s  X  the diversity of the required skills in terms of their corresponding areas. We use T ( t, s ) to refer to a task generated for a specific configuration of these parameters.
Specifically, a task T ( t, s ) is generated as follows: first, we select a subset of the research areas S  X  { db, dm, ai ,t } with | S | = s . Then, we randomly pick t required skills from the terms appearing in papers published in conferences belonging to these areas. For the results we report in this section we use t  X  { 2 , 4 , . . . , 20 } and s = 1. For every ( s, t ) configuration we generate 100 random tasks for this con-figuration and report the average results obtained by the different methods. Experiments for s = 2 , 3 , 4 exhibit simi-Figure 3: Figure 3(a): Average cardinality of the teams reported by lar trends as those for s = 1 and thus are not presented due to space constraints.
 Communication cost: Figure 2(a) shows the average Cc-R costs of the solutions achieved by RarestFirst and Greedy-shows the average Cc-Mst costs of the EnhancedSteiner , CoverSteiner and GreedyMST algorithms on the same set of tasks. Note that the average is calculated for the solutions X 0 that result in a connected graph G [ X 0 ]. If, for a specific task, the solution produced by a specific algorithm does not lead to a connected graph, we simply ignore it.
 It can be observed that, in terms of the diameter cost, RarestFirst significantly outperforms GreedyDiameter . Sim-ilarly, in terms of the MST cost, EnhancedSteiner generally gives better results than CoverSteiner and GreedyMST . The conclusion is that our proposed algorithms can form teams that are able to accomplish a given task with low communi-cation efforts.
 Cardinality of the team: Since the size of the team often has a positive correlation with the expenses of a project, we evaluate the cardinality of the teams formed by every Team Formation algorithm. The results in Figure 3(a) show that the RarestFirst algorithm tends to report relatively large teams, especially for large values of t . On the other hand, the EnhancedSteiner algorithm generally finds teams of small size. This can be explained by the fact that the RarestFirst algorithm aims to minimize the diameter of the graph, which is less likely to be affected by the introduction of new nodes. On the other hand, the EnhancedSteiner algorithm tries to minimize the Mst cost, which is always increased when a new node is added to the team.

For comparison purposes, we also include the cardinality of the teams reported by the GreedyCover algorithm. Re-call that GreedyCover ignores the existence of the graph and only reports a set of individuals who can perform the task by simply looking at their skillsets. Therefore, the cardinal ity of this solution is a lower bound on the cardinality of the so-lutions produced by all the five aforementioned algorithms. However, since GreedyCover ignores the graph structure, it often forms teams of members that cannot communicate. That is, the subgraph of the original graph defined by the members of such teams is not connected. The following ex-periment illustrates the validity of this claim.
 Connectivity of the team: Given a task T , it might be the case that there does not exist a team X 0 such that the members of X 0 simultaneously have all the skills required by T , and also define a connected subgraph. Further, even if such a team exists, it might be the case that some algorithms fail to find it. In this experiment, we evaluate the effective-ness of the different algorithms in finding teams that corre-spond to connected subgraphs of the original graph. Recall that connected subgraphs have significantly lower commu-nication costs (both Cc-R and Cc-Mst ) than disconnected ones.

Figure 3(b) shows, for every algorithm and every t  X  X  2 , 4 , . . . , 20 } , the number of times a team formed by an algorithm defines a disconnected subgraph. The count is taken over the 100 independent tasks generated for every T ( t, 1). We can observe that RarestFirst , GreedyDiameter , Enhanced-Steiner and GreedyMST produce approximately the same number of disconnected teams. We conjecture that the tasks for which these algorithms fail to report a connected sub-graph are in fact those that have no connected team as a so-lution. On the other hand, CoverSteiner and GreedyCover often fail to find a connected team, even in cases where such a team actually exists. The results indicate that, although GreedyCover produces teams of small size, the members of this team cannot communicate efficiently.
The goal of this experiment is to show that our problem definitions and their corresponding algorithms produce rea -sonable and intuitive results in practical settings. As inp ut to our problem, we again consider the individual authors in X dblp and the corresponding co-authorship graph G dblp that we described in Section 6.2. We test our framework on 10 distinct tasks. The required skills for each task are defined by the words appearing in the title of an already pub-lished paper. The papers were chosen from the  X  X ost Cited Computer Science Articles X  list, maintained by CiteSeerX ( citeseerx.ist.psu.edu/stats/articles ). We thus form 10 tasks by selecting the top-10 cited papers from the list, which were also published in one of the 19 conferences cov-ered by the DBLP Dataset. Table 1 shows the titles of the these papers.
 Table 2 shows the ten teams of authors obtained by the RarestFirst and EnhancedSteiner algorithms. The set of original authors for every paper is also reported. The names highlighted in bold in the last two columns of the table in-dicate authors that have been selected because they covered some required skill of the input task. The names appearing not in bold correspond to authors that were included in the team as mediators, i.e., communication nodes that ensure the connectivity of the graph.

We can observe that for papers 3, 6, and 9, RarestFirst finds a single-node solution, whereas EnhancedSteiner fails to do so. This is due to the fact that EnhancedSteiner starts with a random node from X 0 , so it may be the case that none of the nodes in the final team possesses all the required skill s. On the other hand, RarestFirst examines every node who has the skill with the lowest-cardinality support. If a node of them happens to have all other required skills, the proces s simply reports that node and terminates.

In general, both algorithms produce teams of reasonable size; note that not too many mediator nodes (nodes without skill contribution) are introduced. In many cases, the actu al authors of a paper were included in the formed team. This is reasonable, since the real teams are more likely to combine skill coverage with a low communication cost. This attests not only to the effectiveness of the algorithms, but also to the validity of the problem definitions.
 Table 1: Titles of the top-10 most cited papers from the DBLP
In this paper, we addressed the problem of forming a team of skilled individuals to perform a given task, while minimi z-ing the communication cost among the members of the team. We explored two alternative formulations for the communi-cation cost, which we believe are practical and intuitive. We proved that the Team Formation problem is NP-Hard for both formulations and proposed appropriate approxima-tion algorithms. In a thorough experimental evaluation, we evaluated the performance of our algorithms, and compared them against reasonable baseline approaches. We concluded with a qualitative evaluation, reporting the teams formed b y our algorithms on a set of real tasks. [1] E. M. Arkin and R. Hassin. Minimum-diameter [2] L. Backstrom, D. Huttenlocher, J. Kleinberg, and [3] A. Baykasoglu, T. Dereli, and S. Das. Project team [4] S. Boyd and L. Vandenberghe. Convex Optimization . [5] M. Cheatham and K. Cleereman. Application of social [6] C. Chekuri, G. Even, and G. Kortsarz. A greedy [7] S.-J. Chen and L. Lin. Modeling team member [8] C. W. Duin, A. Volgenant, and S. Vo[ss]. Solving [9] E. L. Fitzpatrick and R. G. Askin. Forming effective [10] N. Garg, G. Konjevod, and R. Ravi. A polylogarithmic [11] M. Gaston, J. Simmons, and M. desJardins. Adapting [12] M. Jackson. Network formation. The New Palgrave [13] G. Reich and P. Widmayer. Beyond steiner X  X  problem: [14] H. Takahashi and A. Matsuyama. An approximate [15] V. Vazirani. Approximation Algorithms . Springer, [16] H. Wi, S. Oh, J. Mun, and M. Jung. A team formation [17] A. Zzkarian and A. Kusiak. Forming teams: an
