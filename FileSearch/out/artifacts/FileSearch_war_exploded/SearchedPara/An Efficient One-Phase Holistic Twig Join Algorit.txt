 In view of the inefficiency of the traditional two-phase Twig-Stack algorithm, we propose a single-phase holistic twig pat-tern matching method based on the TwigStack algorithm by applying a novel stack structure.
 H.2.4 [ Database Management ]: Query processing Algorithms, Performance, Design.
 XML, TwigQuery, Query optimization
The traditional XML twig query processing algorithms usually first decompose the twig pattern into a set of bi-nary patterns [1] or single paths [2] and then stitch the indi-vidual matches together. The two-phase based approaches could generate a large number of intermediate results and cause the substantial storage and merge cost. To address this problem, we propose a new holistic one-phase twig join algorithm, which outputs the twig matches in their entireties without the need for a later merge operation. The new al-gorithm yields no intermediate results, which eliminates sig-nificant amounts of time and space overheads.
The merging phase of TwigStack turns out to be a very expensive process since an m-way merge is needed, where m is the number of individual paths in the twig pattern. The size of the individual path matches can be very large as nodes can be stored multiple times if they are on multi-ple paths.The overhead can be devastating if these matches cannot be held in memory.

In order to keep the holisticity of the twigs, we opt to de-lay the output of individual path matches by holding them Figure 2: Execution Time on Random Data Sets Figure 3: Space Requirements of Random Data Sets ferent characteristics are used to study the performance of the two algorithms. We measure the elapsed time in seconds and space requirements in bytes.

Figures 2 and 3 compare the performance of both ap-proaches on random data sets. As expected, our algorithm may spend a little more time on stack manipulation and forming the twig matches than the first phase of TwigStack. But after adding up the time for merging phase, TwigStack takes more time than ours. TwigStack is slower for two rea-sons: (i) the recursive execution of the solution exhibition algorithm; and (ii) an additional scan of the intermediate results for the merge phase. Ours requires much less space than TwigStack as shown in Figure 3 since we don X  X  need to hold all the intermediate results. The query result size is probably the most important factor that distinguishes the performance of the two algorithms. In Figure 4 and 5, the larger the query results, the more time and space the al-gorithm needs, especially the TwigStack. The differences become larger, in general, as the query result sizes increase. Figure 4: Execution Time of Q1 on Random Data Sets
