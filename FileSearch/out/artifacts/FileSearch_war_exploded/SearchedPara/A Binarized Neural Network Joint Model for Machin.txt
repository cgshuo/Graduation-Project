 Neural network translation models, which learn mappings over real-valued vector representations in high-dimensional space, have recently achieved large gains in translation accuracy (Hu et al., 2014; Devlin et al., 2014; Sundermeyer et al., 2014; Auli et al., 2013; Schwenk, 2012; Sutskever et al., 2014; Bahdanau et al., 2015).

Notably, Devlin et al. (2014) proposed a neural network joint model (NNJM), which augments the n -gram neural network language model (NNLM) with an m -word source context window, as shown in Figure 1a. While this model is effective, the computation cost of using it in a large-vocabulary SMT task is quite expensive, as probabilities need to be normalized over the entire vocabulary. To solve this problem, Devlin et al. (2014) pre-sented a technique to train the NNJM to be self-normalized and avoided the expensive normaliza-tion cost during decoding. However, they also Figure 1: (a) the traditional NNJM and (b) the pro-posed BNNJM note that this self-normalization technique sacri-fices neural network accuracy, and the training process for the self-normalized neural network is very slow, as with standard maximum likelihood estimation (MLE).

To remedy the problem of long training times in the context of NNLMs, Vaswani et al. (2013) used a method called noise contrastive estimation (NCE). Compared with MLE, NCE does not re-quire repeated summations over the whole vocab-ulary and performs nonlinear logistic regression to discriminate between the observed data and artifi-cially generated noise.

This paper proposes an alternative framework of binarized NNJMs (BNNJM), which are similar to the NNJM, but use the current target word not as the output, but as the input of the neural network, estimating whether the target word under exam-ination is correct or not, as shown in Figure 1b. Because the BNNJM uses the current target word as input, the information about the current target word can be combined with the context word in-formation and processed in the hidden layers.
The BNNJM learns a simple binary classifier, given the context and target words, therefore it can be trained by MLE very efficiently.  X  X ncor-rect X  target words for the BNNJM can be gen-erated in the same way as NCE generates noise for the NNJM. We present a novel noise distribu-tion based on translation probabilities to train the NNJM and the BNNJM efficiently. Let T = t | T | 1 be a translation of S = s | S | 1 . The NNJM (Devlin et al., 2014) defines the following probability, where target word t i is affiliated with source word s abilities, the NNJM uses m source context words and n  X  1 target history words as input to a neural network and performs estimation of unnormalized probabilities p ( t i | C ) before normalizing over all words in the target vocabulary V , where C stands for source and target context words as in Equation 1.

The NNJM can be trained on a word-aligned parallel corpus using standard MLE, but the cost of normalizing over the entire vocabulary to calcu-late the denominator in Equation 2 is quite large. Devlin et al. (2014) X  X  self-normalization technique can avoid normalization cost during decoding, but not during training.

NCE can be used to train NNLM-style models (Vaswani et al., 2013) to reduce training times. NCE creates a noise distribution q ( t i ) , selects k noise samples t i 1 , ..., t ik for each t i and introduces a random variable v which is 1 for training exam-ples and 0 for noise samples,
NCE trains the model to distinguish training data from noise by maximize the conditional like-lihood,
The normalization cost can be avoided by using p ( t i | C ) as an approximation of P ( t i | C ) . 2 In this paper, we propose a new framework of the binarized NNJM (BNNJM), which is similar to the NNJM but learns not to predict the next word given the context, but solves a binary classifica-tion problem by adding a variable v  X  { 0 , 1 } that stands for whether the current target word t i is cor-rectly/wrongly produced in terms of source con-t
The BNNJM is learned by a feed-forward neural network with m + n inputs s v = 1 / 0 .

Because the BNNJM uses the current target word as input, the information about the current target word can be combined with the context word information and processed in the hidden lay-ers. Thus, the hidden layers can be used to learn the difference between correct target words and noise in the BNNJM, while in the NNJM the hid-den layers just contain information about context words and only the output layer can be used to dis-criminate between the training data and noise, giv-ing the BNNJM more power to learn this classifi-cation problem.

We can use the BNNJM probability in transla-tion as an approximation for the NNJM as below,
As a binary classifier, the gradient for a sin-gle example in the BNNJM can be calculated efficiently by MLE without it being necessary to calculate the softmax over the full vocabu-lary. On the other hand, we need to create  X  X ositive X  and  X  X egative X  examples for the clas-sifier. Positive examples can be extracted di-rectly from the word-aligned parallel corpus as s be generated for each positive example in the same way that NCE generates noise data as s 4.1 Unigram Noise Vaswani et al. (2013) adopted the unigram proba-bility distribution (UPD) to sample noise for train-ing NNLMs with NCE, where occur ( t i 0 ) stands for how many times t i 0 occurs in the training corpus. 4.2 Translation Model Noise In this paper, we propose a noise distribution spe-cialized for translation models, such as the NNJM or BNNJM.

Figure 2 gives a Chinese-to-English parallel sentence pair with word alignments to demon-strate the intuition behind our method. Focusing on s a range  X . For this positive example, UPD is allowed to sample any arbitrary noise, such as t i 0 =  X  ba-nana  X . However, in this case, noise t i 0 =  X  banana  X  is not useful for model training, as constraints on possible translations given by the phrase table en-sure that  X   X   X   X  will never be translated into  X  ba-nana  X . On the other hand, noise t i 0 =  X  arranges  X  and  X  arrangement  X  are both possible translations of  X   X   X   X  and therefore useful training data, that we would like our model to penalize.

Based on this intuition, we propose the use of another noise distribution that only uses t i 0 that are possible translations of s a U ( s a words aligned to s a
Because U ( s a tain many wrong translations caused by wrong alignments,  X  banana  X  may actually be included in U ( X   X   X   X ). To mitigate the effect of un-common examples, we use a translation proba-bility distribution (TPD) to sample noise t i 0 from U ( s a where align ( s a aligned to s a
Note that t i could be unaligned, in which case we assume that it is aligned to a special null word. Noise for unaligned words is sampled according to the TPD of the null word. If several target/source words are aligned to one source/target word, we choose to combine these target/source words as a 5.1 Setting We evaluated the effectiveness of the proposed ap-proach for Chinese-to-English (CE), Japanese-to-English (JE) and French-to-English (FE) transla-tion tasks. The datasets officially provided for the patent machine translation task at NTCIR-9 (Goto et al., 2011) were used for the CE and JE tasks. The development and test sets were both provided for the CE task while only the test set was provided for the JE task. Therefore, we used the sentences from the NTCIR-8 JE test set as the development set. Word segmentation was done by BaseSeg Japanese. For the FE language pair, we used stan-dard data for the WMT 2014 translation task. The training sets for CE, JE and FE tasks contain 1M, 3M and 2M sentence pairs, respectively.
 For each translation task, a recent version of Moses HPB decoder (Koehn et al., 2007) with the training scripts was used as the baseline (Base). We used the default parameters for Moses, and a 5 -gram language model was trained on the tar-get side of the training corpus using the IRSTLM Feature weights were tuned by MERT (Och, 2003).

The word-aligned training set was used to learn BNNJM, we set m = 7 and n = 5 . The NNJM was trained by NCE using UPD and TPD as noise distributions. The BNNJM was trained by stan-dard MLE using UPD and TPD to generate nega-tive examples.

The number of noise samples for NCE was set to be 100. For the BNNJM, we used only one neg-ative example for each positive example in each training epoch, as the BNNJM needs to calculate Table 1: Epochs (E) and time (T) in minutes per epoch for each task.
 Table 2: Translation results. The symbol + and * represent significant differences at the p &lt; 0 . 01 level against Base and NNJM+UPD, respectively. Significance tests were conducted using bootstrap resampling (Koehn, 2004). the whole neural network (not just the output layer like the NNJM) for each noise sample and thus noise computation is more expensive. However, for different epochs, we resampled the negative example for each positive example, so the BNNJM can make use of different negative examples. 5.2 Results and Discussion Table 1 shows how many epochs these two models needed and the training time for each epoch on a lation results are shown in Table 2.

We can see that using TPD instead of UPD as a noise distribution for the NNJM trained by NCE can speed up the training process signifi-cantly, with a small improvement in performance. But for the BNNJM, using different noise distribu-tions affects translation performance significantly. The BNNJM with UPD does not improve over the baseline system, likely due to the small num-ber of noise samples used in training the BNNJM, while the BNNJM with TPD achieves good per-formance, even better than the NNJM with TPD on the Chinese-to-English and French-to-English translation tasks.

From Table 2, the NNJM does not improve translation performance significantly on the FE task. Note that the baseline BLEU for the FE Table 3: Translation examples. Here, S: source; R: reference; T 1 uses NNJM; T 2 uses BNNJM. task is lower than CE and JE tasks, indicating that learning is harder for the FE task than CE and JE tasks. The validation perplexities of the NNJM with UPD for CE, JE and FE tasks are 4.03, 3.49 and 8.37. Despite these difficult learning circum-stances and lack of large gains for the NNJM, the BNNJM improves translations significantly for the FE task, suggesting that the BNNJM is more ro-bust to difficult translation tasks that are hard for the NNJM.

Table 3 gives Chinese-to-English translation ex-amples to demonstrate how the BNNJM (with TPD) helps to improve translations over the NNJM (with TPD). In this case, the BNNJM helps to translate the phrase  X   X   X   X   X   X   X   X  bet-ter. Table 4 gives translation scores for these two translations calculated by the NNJM and the BN-NJM. Context words are used for predictions but not shown in the table.

As can be seen, the BNNJM prefers T 2 while the NNJM prefers T 1 . Among these predictions, the NNJM and the BNNJM predict the translation for  X   X   X  most differently. The NNJM clearly pre-dicts that in this case  X   X   X  should be translated into  X  X o X  more than  X  X ntil X , likely because this exam-ple rarely occurs in the training corpus. However, the BNNJM prefers  X  X ntil X  more than  X  X o X , which demonstrates the BNNJM X  X  robustness to less fre-quent examples. 5.3 Analysis for JE Translation Results Finally, we examine the translation results to ex-plore why the BNNJM with TPD did not outper-form the NNJM with TPD for the JE translation task, as it did for the other translation tasks. We found that using the BNNJM instead of the NNJM on the JE task did improve translation quality sig-nificantly for infrequent words, but not for fre-quent words.

First, we describe how we estimate translation quality for infrequent words. Suppose we have a test set S , a reference set R and a translation set T with I sentences, T i contains J individual words, T o ( W ij ) is how many times W ij occurs in T i and R o ( W ij ) is how many times W ij occurs in R i .
The general 1 -gram translation accuracy (Pap-ineni et al., 2002) is calculated as, This general 1 -gram translation accuracy does not distinguish word frequency.

We use a modified 1 -gram translation accuracy that weights infrequent words more heavily, where Occur ( W ij ) is how many times W ij oc-curs in the whole reference set. Note P c will not be 1 even in the case of completely accurate trans-lations, but it can approximately reflect infrequent word translation accuracy, since correct frequent word translations contribute less to P c .

Table 5 shows P g and P c for different transla-tion tasks. It can be seen that the BNNJM im-proves infrequent word translation quality simi-larly for all translation tasks, but improves gen-eral translation quality less for the JE task than the other translation tasks. We conjecture that the rea-son why the BNNJM is less useful for frequent word translations on the JE task is the fact that the JE parallel corpus has less accurate function word alignments than other language pairs, as the
Table 5: 1 -gram precisions and improvements. grammatical features of Japanese and English are will make noise sampling less effective and there-fore lower the BNNJM performance for function word translations. Although wrong word align-ments will also make noise sampling less effec-tive for the NNJM, the BNNJM only uses one noise sample for each positive example, so wrong word alignments affect the BNNJM more than the NNJM. Xu et al. (2011) proposed a method to use binary classifiers to learn NNLMs. But they also used the current target word in the output, similarly to NCE. The BNNJM uses the current target word as input, so the information about the current target word can be combined with the context word in-formation and processed in hidden layers.

Mauser et al. (2009) presented discriminative lexicon models to predict target words. They train a separate classifier for each target word, as these lexicon models use discrete representations of words and different classifiers do not share fea-tures. In contrast, the BNNJM uses real-valued vector representations of words and shares fea-tures, so we train one classifier and can use the similarity information between words. This paper proposes an alternative to the NNJM, the BNNJM, which learns a binary classifier that takes both the context and target words as input and combines all useful information in the hidden layers. We also present a novel noise distribution based on translation probabilities to train the BN-NJM efficiently. With the improved noise sam-pling method, the BNNJM can achieve compara-ble performance with the NNJM and even improve the translation results over the NNJM on Chinese-to-English and French-to-English translations.
