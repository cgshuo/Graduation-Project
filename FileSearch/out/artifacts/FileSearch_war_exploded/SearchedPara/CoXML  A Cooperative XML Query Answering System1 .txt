 The growing use of XML in scientific data repositories, digital libraries and Web appli-cations has increased the need for flexible and effective XML search methods. There are two types of queries for searching XML data: content-only (CO) queries and content-and-structure (CAS) queries. CAS queries are more expressive and thus yield more ac-curate searches than CO queries. XML structures, however, are usually heterogeneous due to the flexible nature of its data model. It is often difficult and unrealistic for users to completely grasp the structural proper ties of data and specify exact query structure constraints. Thus, XML approximate query answering is desired, which can be achieved by relaxing query conditions.

Query relaxation is often user-specific. For a given query, different users may have different specifications a bout which conditions to relax and how to relax them. Most existing approaches on XML query relaxation (e.g., [1]) do not provide control during relaxation, which may yield undesired approximate answers. To provide user-specific approximate query answering, it is essential for an XML system to have a relaxation language that allows users to specify their relaxation control requirements and to have the capability to control the query relaxation process.

Furthermore, query relaxation returns a set of approximate answers. These answers should be ranked based on their relevancy to both the structure and content conditions of the posed query. Many existing ranking models (e.g., [2], [3]) only measure the content similarities between queries and answers, and thus are inadequate for ranking approxi-mate answers that use structure relaxati ons. Recently, [4] proposed a family of structure scoring functions based on the occurrence frequencies of query structures among data without considering data semantics. Clearly, using the rich semantics provided in XML data in design scoring functions can improve ranking accuracy.

To remedy these shortcomings, we propose a new paradigm for XML approximate query answering that places users and their d emands in the center of design approach. Based on this paradigm, we develop a cooperative XML system that provides user-specific approximate query answ ering. More specifically:  X  First, we develop a relaxation language that allows users to specify approximate  X  Second, we introduce a relaxation index structure that clusters twigs (as introduced  X  Third, we propose a semantic-based tree ed iting distance to evaluate XML structure  X  Finally, our experimental studies using the INEX 05 benchmark test collection 1 2.1 Query Model A fundamental construct in most existin g XML query languages is the tree-pattern query or twig , which selects elements and/or attributes with tree-like structures. Thus, we use twig as the basic query model. Fig. 1(a) illustrates a sample twig, which searches for articles with a title on  X  data mining,  X  a year in 2000 and a body section about  X  fre-quent itemset . X  Each twig node is associated with an unique id , shown in italic beside the node. The IDs are not needed when all the node labels are distinct. The text under a node is the content constraint on the node.

For a twig T ,weuse T.V and T.E to represent its nodes and edges respectively. For a twig node v ( v  X  T.V ), we use v.label to denote the node label. We use e u,v to denote the edge from nodes u to v , either parent-to-child ( X / X ) or ancestor-to-descendant ( X // X ). 2.2 Query Relaxation In the XML model, there are two types of query relaxations: value relaxation and struc-ture relaxation. Value relaxation, successfully used in relational models (e.g., [6]), is orthogonal to structure relaxation. In this pa per, we focus on structure relaxation. Many structure relaxation types have been proposed ([7], [8], [1]). We use the following three structure relaxation types, similar to the ones in [1], which capture most of the relax-ation types proposed in previous work.  X  Node Relabel. A node can be relabeled to similar or equivalent labels according  X  Edge Generalization. A parent-to-child edge can be generalized to an ancestor- X  Node Deletion. A node v may be deleted to relax the structure constraint. If v is
Given a twig T ,a relaxed twig can be generated by applying one or more relaxation operations to T .Let m be the number of relaxation operations applicable to T ,then there are at most m 1 + ... + m m = 2 m relaxation combinations, i.e., 2 m relaxed twigs. A number of XML approximate search languages have been proposed. Most extend standard query languages with constructs for a pproximate text search (e.g., XIRQL [3], TeXQuery [9]). XXL [10] provides users with constructs for users to specify both ap-proximate structure and content conditions, which however, does not allow users to control the relaxation process. Users may of ten want to specify their preferred or re-jected relaxations, non-relaxable query c onditions, or to control the relaxation orders among multiple relaxable conditions.

To remedy this shortcoming, we propose an XML relaxation language that allows users to both specify approximate conditions and to control the relaxation process. A relaxation-enabled query Q is a tuple ( T , R , C , S ), where:  X  T is a twig as described as Section 2.1;  X  R is a set of relaxation constructs specifying which conditions in T may be ap- X  C is a boolean combination of controls stating how the query shall be relaxed;  X  S is a stop condition indicating when to terminate the relaxation process.
The execution semantics for a relaxation-enabled query are: we first search for an-swers exactly matching the twig; we then test the stop condition to check whether relax-ation is needed. If not, we repeatedly relax the twig based on the relaxation constructs and control until either the s top condition is met or the twig cannot be further relaxed.
Given a relaxation-enabled query Q ,weuse Q . T , Q . R , Q . C and Q . S to represent its twig, relaxation constructs, control and stop condition respectively. Note that a twig is required to specify a query, while relaxation constructs, control and stop condition are optional. When only a twig is present, we iteratively relax the query based on similarity metrics until the query cannot be further relaxed.

A relaxation construct for a query Q is either a specific or a generic relaxation oper-ation in any of the following forms:  X  rel ( u,  X  ) ,where u  X  X  . T .V , specifies that node u may be relabeled when needed;  X  del ( u ) ,where u  X  X  . T .V , specifies that node u may be deleted if necessary;  X  gen ( e u,v ) ,where e u,v  X  X  . T .E , specifies that edge e u,v may be generalized.
The relaxation control for a query Q is a conjunction of any of the following forms:  X  Non-relaxable condition ! r ,where r  X  X  rel ( u,  X  ) , del ( u ) , gen ( e u,v ) | u , v  X   X  P ref er ( u, l 1 , ..., l n ) ,where u  X  X  . T .V and l i is a label (1  X  i  X  n), specifies that  X  Reject ( u, l 1 , ..., l n ) ,where u  X  X  . T .V , specifies a set of unacceptable labels for  X  RelaxOrder ( r 1 , ..., r n ) ,where r i  X  X  . R (1  X  i  X  n), specifies the relaxation  X  UseRType ( rt 1 , ..., rt k ) ,where rt i  X  X  node relabel, node delete, edge generalize }
A stop condition S is either:  X  AtLeast ( n ) ,where n is a positive integer, specifies the minimum number of an- X  d ( Q . T ,T )  X   X  ,where T stands for a relaxed twig and  X  a distance threshold,
We now present an example of using our relaxation language to express INEX 05 topic 267 (Fig. 2(a)). The topic consists of three parts: castitle (i.e., the query formu-lated in an XPath-like syntax), description and narrative .The narrative part contains the detailed description of a user X  X  information needs and is used for judging result rel-evancy. The topic author considers an article X  X  title, i.e., atl , non-relaxable and regards titles about  X  X igital libraries X  unde r the bibliography part, i.e., bb , irrelevant. Based on this narrative, we formulate this topic using our relaxation language as in Fig. 2(b).
We have developed a GUI interface for users to specify relaxations. Users may first input the twig using an XPath-like syntax. Based on the input twig, the interface au-tomatically generates a set of relaxation candidates. Users can then specify relaxation constructs and controls by selecting relaxations from the candidate set. 4.1 XML Type Abstraction Hierarchy -XTAH Several approaches for relaxing XML or graph queries have been proposed ([7], [4], [11], [1], [12]). Most focus on efficient algorithms for deriving top-k approximate answers without relaxation control. To remedy this condition, we propose an XML relaxation index structure, XML Type Abstraction Hierarchy (XTAH), that clusters re-laxed twigs into multi-level groups based on relaxation types and distances. Each group consists of twigs using similar types of relaxations. Thus, XTAH enables systematic relaxation control based on users X  specifications. For example, Reject can be imple-mented by pruning groups of twigs w ith unacceptable relaxations. RelaxOrder can be implemented by selecting the relaxed twigs from groups based on the specified order.
An XTAH for a twig structure T , denoted as XT T , is a hierarchical cluster that represents relaxed twigs of T at different levels of relax ations based on the types of operations used by the twigs and the distances between them. More specifically, an XTAH is a multi-level labeled cluster with two types of nodes: internal and leaf nodes. A leaf node is a relaxed twig of T . An internal node represents a cluster of relaxed twigs that use similar operations and are closer to each other by a given distance metric. The label of an internal node is the common relaxation operations (or types) used by the twigs in the cluster. The higher level an internal node in the XTAH, the more general the label of the node, the less relaxed the twigs in the internal node.

Fig. 3 shows an XTAH for the sample twig in Fig. 1(a). 2 For ease of reference, we associate each node in the XTAH with an unique ID, where the IDs of internal nodes are prefixed with I and the IDs of leaf nodes are prefixed with T X  .
 Given a relaxation operation r ,let I r be an internal node with a label { r } .Thatis, I represents a cluster of relaxed twigs whose common relaxation operation is r .Due to the tree-like organizatio n of clusters, each relaxed twig belongs to only one cluster, while the twig may use multiple relaxation operations. Thus, it may be the case that not all the relaxed twigs that use the relaxation operation r are within the group I r .For may belong to either group I 4 or group I 7 but is closer to the twigs in group I 4 .
To support efficient searching or pruning of relaxed twigs in an XTAH that use an operation r , we add a virtual link from internal node I r to internal node I k where I k is not a descendant of I r but all the twigs within I k use operation r . By doing so, relaxed twigs that use operation r are either within group I r or within the groups connected to I r by virtual links. For example, internal node I 7 is connected to internal nodes I 16 and I 35 via virtual links. Thus, all the relaxed twigs using the operation gen ( e $4 , $5 ) are within the groups I 7 , I 16 and I 35 .

XTAH provides several significant advantages: 1) we can efficiently relax a query based on relaxation constructs by fetching relaxed twigs from internal nodes whose la-bels satisfy the constructs; 2) we can relax a query at different granularities by traversing up and down an XTAH; and 3) we can control and schedule query relaxation based on users X  relaxation control requirements. Fo r example, relaxation control such as non-relaxable conditions, Reject or UseRType can be implemented by pruning XTAH inter-nal nodes corresponding to unaccep table operations or types.
 Due to space limitations, the algorithm for building XTAH is not presented here. Interested readers should refer to [5] for details. 4.2 XTAH-Guided Query Relaxation Process Fig. 4 presents the control flow of a relax ation process based on XTAH and relax-ation specifications in a query. The Relaxation Control module prunes irrelevant XTAH groups corresponding to unacceptable relaxatio n operations or type s and schedules re-laxation operations such as Prefer and RelaxOrder , as specified in the query. More specifically, the process first searches for exactly matched answers. If there are enough number of answers available, there is no need for relaxation and the answers are re-turned. Otherwise, based on the relaxation control, the algorithm prunes XTAH internal nodes that correspond to unacceptable opera tions such as non-relaxable twig nodes (or edges), unacceptable node relabels and r ejected relaxation types. This step can be efficiently carried out by using internal node labels and virtual links. After pruning dis-qualified internal groups, based on relaxation constructs and control such as RelaxOrder and Prefer ,the Relaxation Control module schedules and searches for the relaxed query that best satisfies users X  specifications fro m the XTAH. This step terminates when either the stop condition is met or all the constructs have been processed. If further relaxation is needed, the process then iteratively sear ches for the relaxed query that is closest to the original query by distance, which may use relaxation operations in addition to those specified in the query. This process terminates when either the stop condition holds or the query cannot be further relaxed. Finally, the process outputs approximate answers. 5.1 Experiment Setup We have implemented the CoXML system in Java, which consists of a relaxation lan-guage parser, an XTAH builder, a relaxation controller and a ranking module. The rank-ing model evaluates the relevancy of an answer A to a query Q , denoted as sim ( A , Q ) , based on two factors: the structure distance between A and Q , struct dist ( A , Q ) ,and the content similarity between A and Q , denoted as cont sim ( A , Q ) , as shown in (1). where  X  is a constant between 0 and 1; cont sim ( A , Q ) is an extended vector space model for evaluating XML content similarity [2]; and struct dist ( A , Q ) is a tree edit-ing distance metric that evaluates relaxation cost based on its semantics [5].
We use INEX 05 document collection, content-and-structure queries and relevance assessment ( X  X old standard X ) to study the effectiveness of approximate answers re-turned by our system. We use the INEX 05 evaluation metric to evaluate experimental results: normalized extended cumulative gain (nxCG). For a given rank i, the value of nxCG@i reflects the relative gain an user accumulated up to that rank, compared to the gain the user could have obtained if the system would have produced the optimum best ranking. For any rank i, the ideal nxCG@i performance is 1. 5.2 Experimental Results The first experiment evaluates the effectiveness of our semantic-based tree editing distance for evaluating structure similarity. We used the 22 single-branch content-and-structure queries in INEX 05 for the experiment. Table 1 presents the nxCG@10 eval-uation results (averaged over the 22 queries) with the semantics-based tree editing distance as compared to that with uniform-cost tree editing distance. The results val-idate that differentiating the operation cost improves relaxation performance.
The second experiment tests the effectiveness of relaxation control by comparing the results with relaxation control against the results without relaxation control for topic 267 in INEX 05 (Fig. 2). The evaluation result in Table 2 demonstrates that relaxation specifications enable the system to control the relaxation process and thus yield results with greater relevancy. In this paper, we have developed an XML system that cooperates with users to provide user-specific approximate query answering. More specifically, we first introduce a re-laxation language that allows users to speci fy approximate conditions and relaxation control requirements in a posed query. We t hen propose a relaxation index structure, XTAH, that clusters relaxed twigs into mu lti-level groups based on relaxation types and their inter-distances. XTAH enables the system to provide user-desired relaxation control as specified in the query. Our experimental studies with INEX 05 test collec-tion reveal the expressiveness of the relaxation language and the effectiveness of using XTAH for providing user-desired relaxation control.

