 1. Introduction
Modeling is at the core of both organizational design and information systems (IS) development [15]. In particular, the importance of business process modeling is suggested by many IS success factor studies, especially those reporting on large-scale multimillion dollar implementations, such as Enterprise Systems implementation projects [4,12,18,30] .
One of the primary purposes of a business process model is to serve as a means of communication : it facilitates the under-standing of a complex business process among various stakeholders [20,23,24,29] . Business process models may be used to this end much as an architect will use models to ascertain the views of users, to communicate new ideas, and to develop a shared understanding amongst participants [21]. Typical examples of stakeholders are managers, end-users, IT system devel-opers, human resource staff, quality professionals, etc. Because business process models are increasingly used to demon-strate a company X  X  compliance with various regulations (e.g. SOX, Basel II, UCITS) external authorities and accountants can be considered important stakeholders too.

The intensive use of business process models has its flip side: organizations are facing an ever-increasing burden of dis-closing up-to-date business process models to their stakeholders. To appreciate the size of this maintenance effort, it should be noted that one project alone may result in the creation of dozens, hundreds or even thousands of business process models and relate to thousands of different agents with varying skills and responsibilities. Because many organizations are in a per-manent flux of reorganization programs, introduce new products and services on a regular basis, and are subjected to new and changing legislations all the time, business process models need frequent updates. We will refer to the overall problem of (1) maintaining a large set of business process models and (2) disclosing them in a way that is meaningful to a mixed audi-ence of stakeholders as  X  X  X usiness process model management X .

This paper proposes a way to simplify business process model management. The key idea is that business process models can be combined into aggregate models, exploiting the commonalities between them. For example, consider two process models in a banking context, which capture the handling of loan applications from respectively corporate and private clients.
Even though many of the checks to be executed differ for these different types of clients, the two process models may include a similar procedure for preparing and sending out the loan proposal. An aggregate model will combine both models into one, where the common part is included only once. In addition, it will contain some unique parts from each of the separate mod-result of applying aggregate models, fewer models need to be maintained and updates to common parts will only need to be carried out once.

Of course, aggregate models will become larger and more complex than ordinary business process models. And because stakeholders cannot be expected to be modeling experts themselves [6], every effort must be made to give them access, through process models, to the information they desire. The way we propose to do this is to allow for the on-demand extrac-ious purposes, such a singular model is exactly what a business user may want to see. In this paper, an algorithm is presented that implements this idea.

The presented approach to aggregate process models builds on the Event-driven Process Chain (EPC) modeling language [19,38] . In comparison with some other modeling techniques, the EPC language is relatively easy to use by business people and the resulting models are fairly easy to understand [37]. Moreover, the modeling language is the core technique for depicting business processes within both the ARIS Toolset and the SAP R/3 system. These are the market leaders for process modeling and Enterprise Resource Planning, respectively. The presented approach is inspired by the business environment of
ING Investment Management, a global asset manager, and implemented as an add-on to the ARIS Toolset that is used in this organization.

This paper is structured as follows. Section 2 provides some preliminaries, in particular the explanation of the EPC mod-eling language. In Section 3, we will present a list of requirements on aggregate models that we used to develop our ideas.
After that, we will informally explore in Section 4 what the extraction algorithm should look like, which can spawn off sin-gular process models from aggregate process models. Subsequently, in Section 5, the extraction algorithm itself is presented.
In Section 6, we will show the feasibility of our approach by discussing its application within ING Investment Management and demonstrate how it has been integrated in the ARIS Toolset. This paper ends with a section on related work, a conclusion, and an agenda for future work. 2. Preliminaries
In this section, we introduce the preliminaries that are needed for the remainder of this paper. We will formally introduce some graph notions and the Event-driven Process Chain (EPC) modeling language. 2.1. Graph theory
Definition 1 (Directed graph, path, cycle, connected, pre-set, post-set). A directed graph G is an ordered pair G  X  X  V ; D  X  :
A path in a directed graph is a sequence of nodes h v 1 ; v where the start node and end node are the same. A directed graph is connected when for every two nodes n ; m 2 V there is ilarly, n  X f m 2 V j X  n ; m  X 2 D g is the set of successors of n in G ( post-set ).
 from r to v . A path that leads from the root to a leaf is called a root path .

Note that we will overload the notions of path, pre-set and post-set in this paper for the graph-like structures as they appear within EPC X  X . From the context, it will become clear to which graph structure we refer. 2.2. Event-driven Process Chains The EPC language was developed in 1992 at the Institute for Information Systems in Saarbr X cken in cooperation with SAP
AG [19]. The primary goal behind this development was to allow business users to describe processes on the level of their blocks:  X  Functions : The basic building blocks are functions. A function corresponds to an activity (task, process step) which  X  Events : Events describe the situation before and/or after a function is executed. An event corresponds to the post con- X  Logical connectors : Connectors can be used to show the different paths the process can take. Through the use of con- X  Arcs : Functions, events and connectors are connected by directed arcs.
 The building blocks can be graphically represented as shown in Fig. 1 .

In an EPC, the business process is given as a chain of events and functions. given as follows [19].

Definition 3 (Event-driven Process Chain). An Event-driven Process Chain is a five-tuple  X  E ; F ; C ; l ; A  X  :  X  E is a finite (non-empty) set of events.  X  F is a finite (non-empty) set of functions.  X  C is a finite set of logical connectors.  X  l 2 C !f^ ; XOR ; _g is a function which maps each connector onto a connector type.  X  A #  X  E F  X [ X  F E  X [ X  E C  X [ X  C E  X [ X  F C  X [ X  C F  X [ X  C C  X  is a set of arcs.

From the specification of relation A in this definition it can be seen that it is not allowed to have an arc connecting two functions or two events. There are many more requirements an EPC should satisfy, e.g. only connectors are allowed to the use of connectors [1]. To formalize these requirements we build on additional concepts and notations from [35], in par-ticular to distinguish between the various types of connectors.
 Definition 4.  X  N ; C ^ ; C _ ; C XOR ; C J ; C S ; C EF ; C  X  N  X  E [ F [ C is the set of nodes of EPC .  X  C ^  X f c 2 C j l  X  c  X  X ^g is the set of AND connectors.  X  C _  X f c 2 C j l  X  c  X  X _g is the set of OR connectors.  X  C XOR  X f c 2 C j l  X  c  X  X  XOR g is the set of XOR connectors.  X  C J  X f c 2 C jj c j P 2 g is the set of join connectors.  X  C S  X f c 2 C jj c j P 2 g is the set of split connectors.  X  C EF # C is the set of connectors on a path from an event to a function, i.e. c 2 C  X  C FE # C is the set of connectors on a path from a function to an event, i.e. c 2 C  X  C EE # C is the set of connectors on a path from an event to an event, i.e. c 2 C  X  C FF # C (the set of connectors on a path from a function to a function) such that c 2 C These notations allow for the definition of the syntactical correctness of an EPC, as follows.

Definition 5 (Correctness of an Event-driven Process Chain). An Event-driven Process Chain EPC  X  X  E ; F ; C ; l ; A  X  is syntactically correct if and only if the following requirements are satisfied:
The first requirement of this definition states that each component has a unique identifier. Note that connector names are omitted from the graphical representation of an Event-driven Process Chain in a diagram. The other requirements corre-spond to restrictions on the relation A . Events cannot have multiple input arcs and there is at least one start event and one final event. Each function has exactly one input arc and one output arc. A connector c is either a join connector on a path from an event to a function or on a path from a function to an event.

Because each of the sets f C J ; C S g ; f C EF ; C FE g , and f C connector of type C EF cannot be of type XOR or type _ , i.e. C restriction, there are no choices between functions sharing the same input event. A choice is resolved after the execution of a function, not before . In the formalization of EPCs, we will not impose this restriction and consider C and C s \ C EF \ C _  X ; as a guideline rather than a strict requirement. This is also consistent with the modeling guidelines of ING Investment Management, our case environment. 3. Design of the aggregate EPC
Several approaches can be conceived to arrive at the design of an aggregate EPC, such that it allows for creating aggregate Section 3.3 a so-called product hierarchy as a means to efficiently support the representation of the aggregate EPC.
Note that in the remainder of this paper, we will mostly refer to  X  X  X roduct X  as the aspect that distinguishes different pro-cess models from each other while at the same time being very similar in many other respects. However, one may also think of, for example, different  X  X  X ervices X  or  X  X  X ustomer groups X  that require (partly) different processes for their support. 3.1. Requirements
When aggregating process models in a naive, straightforward way, there is a risk of loosing information about the model illustrated in Fig. 2 .

In this figure, we see at the left-hand side so-called singular process models for products A and B . These can be combined into an aggregate model in a straightforward manner, such as depicted at the right-hand side of the figure. that we want to determine the process model for either A or B on the basis of the aggregate model and we have no other infor-mation than the aggregate model itself. Then, it is not clear whether the path from the top XOR connector to the bottom XOR process of A or to the process of B (or perhaps to both). The former observation leads to the following design requirements: ( R1 ) At any time it must be possible to extract from the aggregate model again the original, singular process models. ( R2 ) The context information from the original models needs a graphical manifestation in the process diagram of the aggre-
In the remaining part of this section, we will focus on requirement R2 , which deals with the representation of the aggre-much deeper issue, which deserves more elaboration. 3.2. Representation alternatives
To fulfill requirement R2 , which states that context information on single process models has to be added graphically to the process model, the use of labels in the aggregate model seems a promising approach. We have considered five alternative implementations that build on the use of such labels, which we will review here shortly.

First of all, the use of configurable EPCs was considered. Configurable EPCs (C-EPCs) have been proposed as a modeling language to capture reference models for the configuration of Enterprise Systems, such as SAP [35]. The special feature of
C-EPCs is that  X  unlike most existing reference modeling languages  X  they allow for the inclusion of configurable elements, i.e. configuration decisions that have to be made in transferring a reference model to an actual implementation. In this way, of a general model. Note that this one-to-many relationship between models is similar to how one aggregate EPC integrates an arbitrary number of process models for different products. A particular feature of C-EPCs is that connectors can be labeled in an aggregate EPC to label connectors, in this way indicating which of its outgoing (or incoming) paths relate to which par-ticular product. Unfortunately, even though such logical expressions can be conceived and processed by experienced process modelers, they are much too complex to understand by most business users. Our experiences with trying C-EPCs in the busi-ness environment of ING Investment Management confirmed this expectation.

As a second alternative, we experimented with moving the complex product logic at the individual connectors to their to product P and the outgoing path that starts with function B relates to product Q , function A would simply carry a  X  X roduct
P  X  label and function B a  X  X roduct Q  X  label. This solution turned out to be unsatisfactory too. Even though the labels them-selves could be understood by business users, they found it difficult to understand for unlabeled parts of the aggregate EPC to which products they referred to.

Based on these experiences, it became clear to us that simple labels (i.e. labels without any logic) with an extensive dis-tribution over the aggregate EPC would be the preferable way to implement requirement R2 in an actual business domain. model. That usage, however, takes place within the context of process models that are created primarily for execution pur-poses  X  not communication.

We considered three levels of labeling the various nodes in an aggregate model, where a label simply lists the set of prod-ucts for which this node is relevant: (1) to label all functions, (2) to label all functions and events, (3) to label all functions, events, and connectors.
 aggregate EPC.

Definition 6 (Aggregate EPC). An aggregate EPC (aEPC) is a septuple  X  E ; F ; C ; l ; A ; AL ; al  X  , where:
From this definition it follows that an aEPC is an EPC to which labels have been attached to all functions and events. Like to attach one or more labels to a function or event.

Even though the use of aEPCs turned out to be an acceptable and understandable way to represent aggregated process models to business users, there is a risk that the process model becomes swamped with product labels in case of many dif-ferent products. In the next subsection, we will deal with this issue. 3.3. Product hierarchy
When many different products exist also many labels may occur along the nodes in an aEPC. But even though all such products differ from each other in some respect, some products are  X  X  X ore equal than others X . In other words, some products together can be considered as a sub-family of the entire family of products. A good way to limit the number of prod-sub-families instead of to all their members. The inspection of product aspects that are of great influence on the actual pro-sions in a process model.

To support the idea of labels representing multiple products, we introduce the product hierarchy. An example is shown in the top right corner of Fig. 3 . In a product hierarchy we distinguish between two kinds of labels: leaf labels and hierarchy labels of the leaves to which there are directed paths from that node. label AA can be used to represent mortgages of both kinds, which can be seen from the directed paths that lead from AA to both AAA and AAB .
 This leads to the following definition of a product hierarchy.

Definition 7 (Product hierarchy, aEPC match). A product hierarchy is a rooted tree RT  X  X  V ; D  X  . It is said to match with an aEPC  X  E ; F ; C ; l ; A ; AL ; al  X  when AL # V .

A product hierarchy that matches a particular aEPC expresses for each of the labels in the aEPC (1) whether it represents a single product or multiple products and (2) to which product(s) it refers.

By introducing a product hierarchy, the number of labels in an aEPC can be reduced in comparison to the situation where products have to be identified with an individual label. This reduction is likely to positively influence both the understand-ability and maintainability of the model. After all, process models with fewer elements are generally easier to understand [27] and contain fewer errors than larger models [28].

Even though in the context of this paper we will use exactly one product hierarchy that matches a given aEPC, it can be imagined for a business scenario that multiple product hierarchies are in use simultaneously. In this way, orthogonal cate-gorizations of the various functions and events can be given. For example, in the setting of ING Investment Management sep-arate product hierarchies are maintained for (1) product groups and (2) customer groups.

Note that the use of a product hierarchy does not prohibit associating a set of labels to a separate event or function, as can be seen from Definition 6 . Furthermore, if a set of labels is associated to an event or function, it may consist of a list of leaf labels, hierarchy labels, or a mix of both. It is up to the modeler to make the trade-off between, for example, introducing a label for a new sub-family or to use a listing of existing labels to characterize an event or function. 4. Extracting singular EPCs from an aggregate EPC
This entire section is devoted to requirement R1 , which was identified in Section 3.1 but has not been satisfied yet: at any time it must be possible to again extract from an aggregate process model the original, singular process models. Although aEPCs are beneficial to reduce the amount of similar process models, process models for specific products are still needed by various stakeholders at various occasions. For example, consider a manager who wants to provide work instructions to a new employee. If the employee will be concerned with a limited set of products, such an instruction preferably takes place on the basis of a process model that is specific for this sub-family of products.
 To illustrate this idea, consider the aEPC in Fig. 3 . The model describes the aggregated process for the products AAA ,
AAB , ABA and ABB . The labels indicate that a function or event belongs to the process of one or more of these products.
Let us assume that a manager wants to show the process for products ABA and ABB . As can be seen in the product hier-aEPC in Fig. 3 also contains nodes that are of no relevance for the new employee concerned with the AB process, like the function F10 , which is labeled with AAA , and event E10 , which is labeled with AA . Neither AAA nor AA are part of the AB sub-family.

It would be time-consuming and error-prone to manually remove the irrelevant nodes from an aEPC, restore the logic flows between them, and generate again an aEPC for a specific product or set of products. An automatic solution is there-fore preferable, provided that it exactly generates the functions, events, connectors, and paths that are relevant for the execution of the process of the products under consideration. In this section, we will explore what such an algorithm should look like.
For the remainder of this section, we will conduct a  X  X  X hought experiment X  for the aEPC in Fig. 3 . We will assume an inter-est in the particular AB sub-family of products and informally describe the steps to extract a process model from this aEPC.
Along the way, requirements and issues will be addressed. 4.1. Selecting functions and events
If one would carry out our thought experiment, an obvious question would be: which nodes in Fig. 3 are relevant in the events E2 , E7 , E8 and E9 and the functions F6 , F7 and F8 .
 been attached to those. Note that if A was not the root and would have had a predecessor of its own, then that node would need to be considered too.

In the product hierarchy, it can also be observed that AB has ABA and ABB as successors , i.e. ABA and ABB are specializations mean for the intended process model that we wish to extract? Clearly, when a task is executed for either ABA or ABB it con-cerns the products that are part of the AB family. The most desirable guideline that comes forward from our practical use of aEPCs and product hierarchies within ING Investment Management is that somebody who is interested in a particular prod-labels ABA and ABB have been attached to them, respectively. Note that this interest would have extended to further succes-sors as well, would they have existed.

So, in general, when extracting a process model for a particular product, all functions and events that are labeled with either generalized or specialized forms of that product should be selected. To select those functions and events we introduce a new function, which builds on the notion of root paths we introduced earlier (see Definition 2 ).
 as follows: H  X  RT ; x  X  X f y 2 V jh v 1 ; v 2 ; ... ; v n
The functions and events that need to be selected to extract a model for a product that is represented by a specific label in a product hierarchy can now be determined as follows: it is the union of all products represented by the nodes in the product hierarchy that are on the root paths through that node, which can be determined with H . 4.2. Selecting connectors
Until now, we did not say anything about which connectors to select when extracting a singular product model from an aEPC. It follows from our choice not to label connectors (see Definition 6 ) that it is not directly obvious which connectors evant functions and events are selected in an aEPC there will be: (1) connectors through which no path leads from a node that is selected to another node that is selected (e.g. c8 ), (2) connectors for which there is a single path that leads from a node that is selected to another node that is selected (e.g. (3) connectors which are on multiple paths between nodes that are selected (e.g. c6 is on a path from F6 to E7 and on a
For the nodes in the first category, it is quite obvious that such connectors should not appear in the extracted model as and single output, are superfluous in determining the possible flows: only a single path through them can be followed. Such without the connector that was originally on it. Finally, the third category of connectors is unproblematic: such connectors are on multiple paths and should appear in full in the extracted model. If we would continue our thought experiment in this way, we arrive at the model that is shown in Fig. 4 .

As can be easily verified, the resulting model is a syntactically correct EPC. For the example connectors we just mentioned, we can see that: (1) c8 does not appear in the model, (2) c5 is also removed but the path between E5 and F6 is still present, and (3) c6 is preserved including both paths that run through it from F6 , i.e. to E7 and E8 .
In many practical cases, this approach works satisfactorily. However, a particular style of creating aEPCs may lead to ambiguous results, as will be elaborated in the following section. 4.3. Solving ambiguities Consider the simple aEPC and product hierarchy as shown in Fig. 5 . The latter consists solely of root A and products AA and
AB . Suppose now that we would be interested in product AA and want to extract a process model from the aEPC in the fashion as described so far. We would then arrive at the process model in Fig. 6 .
 In the latter figure, we see that all events and functions are preserved from the aEPC that either carried label A (e.g. event predecessor of AA in the product hierarchy. Also, connectors are preserved that support more than a single path between selected nodes. For example, c2 lies on a path from function F1 to event E2 and also on a path from function F1 to event tion F1 and connector c1 to connector c4 and event E3 . Therefore, c3 is removed and only the path between c1 and c4 is preserved.

What is curious here is that the extracted model offers a path for product AA that does not include event E2 , i.e. in case E3 as the implicit choice between carrying out the process for either product AA or product AB . In the former case, both events E2 and E3 would take place; in the latter case, there is a further choice between which of the events E3 or E4 will happen.
The problem is that we do not exactly know what the modeler intended, the original model is ambiguous. Part of the ambiguity problem here is caused by our choice to not label connectors, because of the overload of connectors in an aEPC this will generate (see Section 3.2). Another part of this ambiguity is caused by the modeling style that is applied here. tinction we can identify ambiguous situations before we commence to extract a singular process model from an aEPC. function edge : A ! P  X  AL  X  is defined as follows:
For any  X  a 1 ; a 2  X 2 A ; x 2 edge  X  a 1 ; a 2  X  if and only iff:
With the definition of the edge function, for each arc in an aEPC it can be determined for which products it is used . This is determined by first considering all paths, flowing from a single event or function to an event or function immediately fol-lowing it, that such an arc is on. Note that in an EPC, multiple connectors may succeed each other in between events and functions. Secondly, all products are considered that relate to both the start and the end node of such a path, where a node the product hierarchy. If a product is present as label of both the start and end node of such a path, the arc in question is considered to be in use for that product. If a more generalized form of that product is present as label at both the start and the end node of this path, this is the case too. Note how we can check this using H (see Definition 8 ).
The particular application of the edge function useful to us now is to determine for which products the incoming and out-going arcs of connectors are used. By doing so, we can distinguish between product-dependent and product-independent connectors, as follows.
 independent connectors C indep # C and product-dependent connectors C  X  c 2 C indep () X  8 x ; y : x 2 c ; y 2 c : edge  X  x ; c  X  X  edge  X  c ; y  X  X  , case for one of its outgoing arcs. For a product-independent connector , the incoming and outgoing paths are used for exactly the same set of products. Intuitively, we distinguish here between connectors that respectively do take the difference of products into account and those that do not.
 and are normally not shown to end-users. From the figure, it can be seen that connectors c1 and c4 are product-independent connectors, while c2 and c3 are product-dependent connectors. Intuitively, this means that for c1 and c4 the exact product products can be distinguished. In other words, their behavior depends on a distinction between products.
A non-ambiguous alternative to the example process would be the model as shown in Fig. 8 . In contrast to the earlier model, event E3a is inserted between c2 and c4 and event E3b is inserted between c3 and c4 ; they are labeled with AA event E3a , function F2 , and event E5 . By selecting the connectors as elaborated in the previous section, this will lead to the process model as can be seen in Fig. 9 . Note that in this model it is impossible to skip event E2 , which was the problem for the example model of Fig. 5 .

Ambiguity problems like the one in the example we discussed can be effectively prevented by prohibiting the extraction of singular process models from an aEPC if the latter contains: (1) A product-dependent split connector that is not directly followed by functions or events for its outgoing arcs. (2) A product-dependent join connector that is not directly preceded by functions or events for its incoming arcs.
By preventing these situations, we basically only allow for sequences of connectors if their combined, logical behavior is independent of product characteristics. Otherwise, we require labeled nodes to be interleaved with such connectors  X  thus removing ambiguity problems. This is exactly the way that the non-ambiguous alternative in Fig. 8 was created, i.e. by inserting events E3a and E3b after the product-dependent connectors c2 and c3 . Note that the prevention measures are suf-ficient but not necessary conditions to avoid ambiguity problems. For example, the non-ambiguous alternative to the simple see how the above conditions can be met by including more events and functions into this model. 4.4. Correctness
By now, it is clear what elements need to be selected from an aEPC to extract a singular process model of interest. If we carry the original labels of the aEPC it has been extracted from. As we explained, nodes may have been selected that are car-ried out for specialized or generalized forms of the product or product sub-family of interest. Stakeholders will want to have aEPC, i.e. an EPC that is extended with labels from a product hierarchy.

However, for an extracted model to be considered as a correct aEPC it must be so that the underlying EPC should be syn-aEPC with its accompanying product hierarchy. It is clear to see that it is syntactically correct, conform the requirements in Definition 5 .

If we would extract from this aEPC the singular process model for product AA in correspondence with the steps we dis-ing style that was used for this example. The following notion of correctness is introduced to mend this problem. correctly iff:  X   X  8 x : x 2 V :  X 9 e ; y : e 2 E ^ y 2 AL : j e j X  0 ^ y 2 al  X  e  X ^ x 2 H  X  y  X  X  X  ,  X   X  8 x : x 2 V :  X 9 e ; y : e 2 E ^ y 2 AL : j e j X  0 ^ y 2 al  X  e  X ^ x 2 H  X  y  X  X  X  ,  X   X  8 f ; a 1 ; a 2 : f 2 F ^ X  a 1 ; f  X 2 A ^ X  f ; a 2  X 2 A : edge  X  a
In this definition, the first requirement states that for each product in the product hierarchy a start event exists such that end event exists with this property. In this way, it is guaranteed that  X  regardless of the product under consideration  X  al-ways at least one start and at least one end event exist in an extracted aEPC for any product or product sub-family. the aEPC in the example violates both the first and the second requirement of Definition 11 .

The third requirement deserves some special attention. In the first place, it states that for each function its incoming path our example, the following holds:  X  edge  X  E 2 ; F 2  X  X f AB g ,  X  edge  X  F 2 ; E 3  X  X f AA g , and  X   X  S y : y 2 al  X  F 2  X  : H  X  y  X  X  \ leaves  X  RT  X  X  H  X  A  X \ leaves  X  RT  X  X f AA ; AB g .

It is clear that this third requirement is violated as well. The incoming and outgoing arcs for function F2 are somehow in use for different products  X  f AB g versus f AA g  X  which hints at an undesirable discontinuity. What is more, the label AA of play a role in the formal proof of the claim that the proposed extraction approach  X  provided that the original aEPC is cor-rectly labeled  X  once more generates an aEPC.
This ends our exploration of extracting process models from aEPCs. It has led us to a blueprint for the formal specification of the extraction algorithm, a way of preventing an ambiguous modeling style, and criteria to decide on the correct labeling of aEPCs. 5. Extraction algorithm
Based on the informal exploration in the previous section of how to extract a singular process model from an aEPC, the algorithm for this purpose is presented in pseudo-code as shown below.
 function that generates a product-specific aEPC Q for product label pl from V . Hence, Q  X  extract  X  P ; pl  X  .
Q is constructed in a number of steps, as follows: (1) IF  X 9 c 1 ; c 2 :  X  c 1 ; c 2  X 2 A : c 1 2 C S \ C dep (2) Q :  X  X  E 0 ; F 0 ; C 0 ; l 0 ; A 0 ; AL 0 ; al 0  X  with (3) C :  X f c 2 C 0 jjf n 1 2 E 0 [ F 0 [ C 0 j X  n 1 ; c  X 2 A (4) WHILE C  X  ; DO{ END
In step (1), the algorithm checks whether there are product-dependent split (join) connectors that are not preceded (fol-lowed) or followed by (labeled) events or functions. If so, the algorithm halts because the aEPC is ambiguous. Otherwise, the algorithm continues.

In step (2), the algorithm prunes irrelevant events, functions, and connectors from the original aEPC. Only those events and ized form of that product are retained. Also, all the paths and connectors between retained nodes are retained themselves.
In step (3), the set of connectors is determined that have a single incoming and a single outgoing arc. These connectors are superfluous and not allowed in an EPC.
 moved. This process continues until there are no such connectors left.

Following these steps, all relevant nodes and the paths through them are selected. Due to the initial ambiguity check, no superfluous paths are included in the model. What remains to be proven is that application of the algorithm results in an aEPC itself.
 the matching product hierarchy RT  X  X  V ; D  X  .IfQ  X  extract  X  P ; pl  X  for some pl 2 V, then Q is an aEPC. Proof. Let Q  X  X  E 0 ; F 0 ; C 0 ; l 0 ; A 0 ; AL 0 ; al 0 part from it for which it is not immediately obvious that it is satisfied, is whether  X  E
We will consider the requirements one by one (see Definition 5 ):  X  It is easy to see that sets E 0 ; F 0 , and C 0 are pairwise disjoint, because E ; F , and C are so too.  X  Potentially, only the addition of arcs can violate the requirement that all events in E  X  For the same reason, there is still at least one end event in Q .  X  Because P is correctly labeled, all functions in F 0 will still have exactly one incoming and one outgoing arc. The reason  X  C 0 j and C 0 s will partition C 0 , just like C j and C  X  C 0 EF and C 0 FE will partition C 0 ,as C 0 EE and C 0
This ends the formal part of this paper. In the next section we will describe how aEPCs support model management in practice. 6. Application of aggregate EPCs
In the previous sections, we presented a method for describing several processes with one aEPC and an algorithm that extracts from such an aEPC a process model that describes the process for a specific product or product group. Furthermore, we explained that the design of the aEPC was guided by our desire to help decrease the number of process models that need to be maintained with a  X  X  X icher X  process model, which is nonetheless still comprehensible for end-users. Consequently, there is a need to show the applicability of our approach in practice. To this end, we will consider as case study the corporate ac-tions process from the business environment of ING Investment Management. First we will introduce the context of this com-pany, describe the case study, and then present the results from a wider evaluation of the use of aEPCs within this specific business context.
 6.1. ING Investment Management
ING Investment Management (ING IM) is one of the world X  X  largest asset management companies. The company provides a comprehensive range of investment solutions and services to its clients and partners. The company manages assets for under management and a staff of 2500 professionals. It operates along regional lines with centers of expertise in Europe, the America X  X  and the Asia X  X acific region.

In Europe about 100 business processes are in place which produce all the solutions and services to ING IM X  X  clients. All these 100 processes are described in process models with the ARIS Toolset. When these EPCs with their descriptions are printed on A4 paper format, this results in about 500 pages of documentation. About seven people within ING IM X  X  Informa-tion and Process Engineering department have a full time job to advice stakeholders in all stages of the Business Process Man-important role. However, not only performance improvement drives Business Process Management within ING IM, also com-pliance and risk management are drivers. Compliance means that the processes should comply to laws and regulations. The regulator requires that all relevant processes are described and that these descriptions are indeed compliant. Regulators have the process modelers to keep the descriptions up-to-date. From a risk management perspective the process descriptions also tions controls are tested. In-control-statements from auditors and accountants are typically based on these test reports. This underlines, also from the Risk Management perspective, that accurate process descriptions are of the utmost importance.
Having stated on the one hand the importance of process descriptions and their actuality, but on the other hand their maintenance burden, this clearly explains the desire for improved model management at ING IM. The main goal is to store process models as efficiently as possible: namely, only once. Clearly, such a situation has many advantages. Updates have to be carried out only on one model instead of on a set of related models. And consequently, consistency of models is less of an issue. Also, a better overview of how models are related emerges when modeled in such an integrated way.
Since products and services within ING IM are often built on a similar set of capabilities, there is also potentially a large business case to create aggregated process models. Services to the client are often a composition of various more basic ser-vices which are internal to the organization. And products are built on a standardized set of investment capabilities. Trans-lated to the processes which produce these products and services this implies that large parts of the process models overlap (when aggregate EPCs are not used). 6.2. The corporate action process
The specific process we consider here for illustrative purposes deals with corporate actions. A corporate action is defined a corporate action, each of which requires a slightly different processing by ING IM. These corporate actions can be catego-rized into three sub categories (or sub-families of corporate actions), i.e. corporate actions: (1) for which only cash can be delivered, (2) for which only stocks can be delivered, (3) for which a choice between stock and cash has to be made.

Basically, we can distinguish here a product hierarchy for corporate actions (root), 3 sub-families (nodes that are not leaves), and 15 single products (leaves).

If an corporate action is taken, then the processing of it by ING IM is roughly as follows. For a corporate action where a choice must be made between cash or stock, the involved investment manager decides on what has to be delivered. After that, a number of checks need to be done in cooperation with some relevant parties, it has to be checked whether everything is processed correctly in the systems of ING IM, and some administrative operations have to be carried out as well. For the last two processing parts, a clear distinction can be made between the activities that have to be done when cash is delivered or when stock is delivered.

At ING IM, the ARIS Toolset is used for modeling the various business processes. The application of our idea to aggregate the various process models into one implied that it must be possible (1) to model aEPCs in the ARIS Toolset and (2) that extractions on aEPCs could be applied automatically. To allow for aEPCs to be created, we were able to simply use the facil-ing labels to functions and events. Furthermore, to allow for extracting singular models from the aEPCs, we developed a tool that directly interacts with the ARIS Toolset.

This interaction is facilitated by the general XML Export/Import facility of the ARIS Toolset. After that an export to XML has been made from the aEPC and its corresponding product hierarchy, the extraction of a singular process model is executed with our tool and the XML file is adapted in such a way that the data in the XML file corresponds with the result of the singular process model. The adapted XML file can then be imported again in the ARIS Toolset and a new diagram, which contains the result of the extraction, is obtained. By performing extensive testing, we were able to demonstrate the correct functioning of the tool. Note that beyond its basic functionality, the developed tool can check whether a model conforms to archy, etc.), and it can check whether an aEPC is correctly labeled with respect to a product hierarchy (e.g. whether a given product hierarchy matches a particular aEPC).
 Returning to our example, the aEPC for the corporate actions process and its corresponding hierarchy was modeled in the this process can be seen in this screenshot. In the middle of the screenshot, a function is present that is labeled  X  X nput CA details in CA form X . From the product label that is attached to it, it can be deduced that this function must be executed most outgoing path leads to the  X  X tock X  event, while its rightmost outgoing path leads to the  X  X ash X  event. The product labels that are attached to these events show for which kinds of corporate actions these events are appropriate. What is interesting to note here is that the  X  X ash X  label is only attached to the rightmost event.

As with all other aEPCs now in use within ING IM, extractions can be generated from this particular aEPC. Let us assume tions and events that are relevant for return of capital itself, for cash specifically, and for corporate actions in general.
For the same part of the aEPC that is shown in Fig. 11 , the resulting part of the extracted, singular process model for the in the model of Fig. 11 . This is correct too: because the extracted model concerns cash but not stock, there is a direct con-nection from the  X  X nput CA details in CA form X  function to the  X  X ash X  event. 6.3. Evaluation
The provided, real-life example from ING IM shows that instead of creating fifteen separate models that describe the pro-this is much more efficient from a maintenance perspective.

To discuss the effectiveness of aEPCs on a more general level, we sat down together with three of the seven process analysts from ING IM X  X  Information and Process Engineering department to discuss their experiences with the use of aEPCs in practice.
All three modelers are familiar with the notation and have experience in applying it. We used a semi-structured interview scheme in this discussion, which covered the topics of (a) the effectiveness of the developed tool with respect to improved model management, (b) the acceptance of aEPCs among business users, and (c) the ease of creating and maintaining aEPCs.
All process analysts were of the opinion that aEPCs deliver a tangible contribution to decreasing the burden of managing a large set of process models. Its biggest value was seen in the aggregation of processes that span multiple departments, because in these situations process models are used most effectively to communicate with involved stakeholders. It was expected by one of the process analysts that the aEPCs would become even more useful if  X  X  X ownstream X  and  X  X  X pstream X  process models within the same value chain would be further integrated in single models. This is one of the tasks that is currently under way.

With respect to aEPCs the process analysts were unanimous that such models would not at all be acceptable as com-munication means with business users. In other words, the facility to extract a specific model from an aEPC is a strict necessity. Furthermore, the process analysts indicated that the background of the business user in question probably plays a role in this too. The more someone is process-minded, in the sense that he or she commits to the idea that a process is a valuable entity to be coordinated, the more willing is such a person to study and discuss process models.
A shortcoming of the current tool was also mentioned, i.e. that the deletion of irrelevant parts of an aEPC as a result of an extraction does not trigger an improved drawing of the remaining model. For the example in Fig. 12 it would im-prove the understanding and attractiveness of the model if the event  X  X ash X  would be aligned under the preceding func-tion,  X  X  X nput CA details in CA form X . This is a clear indication of another factor that presumably plays a role in the acceptance and use of process models.

Most surprisingly perhaps was the opinion of the process analysts about the ease of modeling an aEPC: this was not con-labels in a product hierarchy that matches an aEPC, the process analysts answered that these labels were often quite obvious.
After all, they immediately relate to business concepts that are in use throughout ING IM to distinguish various tasks and duties. Finally, the process analysts acknowledged that it is time-consuming to keep aEPCs up-to-date, but not more so than this would be the case in general.
 business environment of ING IM suggests that they are valuable for improved model management, that the models extracted from it  X  by a push of a button  X  can be used well in the communication with business users, and that aEPCs are reasonably easy to create and maintain. Currently, ING IM is in the process of developing aggregate process models for all its processes. 7. Related work
The management of process models as valuable business artifacts is a rather unexplored subject. The challenges with re-spect to creating, maintaining, and sharing process models have already been identified by Madhusudan et al. [25,26] . Where the emphasis in this work has been on the creation of new models, our work is complimentary in its focus on the use and disclosure of existing models.

The perspectives-based configurative reference process modeling approach by Becker et al. [5] is closely related to our idea of describing the process for several products with one process model and selecting its relevant parts. It focuses on adaptation mechanisms and proposes several mechanisms for automatically transforming a reference model into an individ-ual model. However, to the best of our knowledge, no formalization has been given for these mechanisms. For our case, this hampers their translation towards tool support.

Additionally, the work of Rosemann and Van der Aalst [35] pursues a reference model-driven approach with which indi-vidual models can be obtained, called configurable EPCs (C-EPCs). As we reflected on earlier in this paper, C-EPCs are rather difficult to understand, especially for end-users with a non-technical background. We could clearly establish this during the various discussions with business users at ING IM, where our case study has been carried out. It must be noted, however, that purposes, however, C-EPCs are less suitable as our focus is primarily on the communicative power of the process models
The wider research area on reference process models, which are intended to be configured in a specific setting such that the various approaches can be found.

In this paper, we encountered the issue to resolve ambiguities from an aEPC in such a way that (a particular notion of) correctness is preserved. There have been previous approaches that also relate to transforming a process model while safe-guarding its initial correctness. In [32,34] the focus is on appropriate dynamic adaptions of process models, both at the type and instance level, to provide flexible support for workflow enactment. In [44] adaptions are discussed of process models that reside in large repositories to uphold their maintainability. Note that neither of these approaches puts an emphasis on the compositional or integrative nature of process models, as is the case in our work on aEPCs.
Composition and integration of process artifacts have been dealt with in other areas. A well-known issue in the field of workflow management is that execution is often distributed across various organizations and systems. In this context, different researchers have focused on so-called private views on the integrated workflow model and have proposed ways to manage the relationship between such views and the overall model, see e.g. [11,16,39] . Similarly, extensive attention has been devoted to the support of composing web services from more elementary services [7,8,45] . Typically, the work in the areas of distributed workflow execution and web services displays a high sophistication with respect to the automatic support for integrating and decomposing various models/views/web services. An important difference with our work is that our concern has been with models that are mainly used for communication purposes. This particular focus has motivated the tions for different business users. 8. Conclusion and outlook
In this paper, we described an approach to combine descriptions for various related process models into an aggregated process model. We formally introduced the aEPC and some supporting concepts to this end. Additionally, we presented an add-on for the ARIS Toolset which implements these concepts and illustrated how it is used in the context of model man-agement issues in an industrial setting.

We argue that our approach is effective to simplify model management in practice, as it can contribute to a considerable reduction of the number of models that needs be maintained and updated. Also, the development of the aEPC is heavily guided by a desire to support human communication. This explains our focus on simple aids as labels to enrich the meaning of an aEPC (in comparison to simple EPCs), as well as our interest in the development of an algorithm to generate singular labels, may result in various correctness and ambiguity issues.

We believe that the aEPC and it relates concepts are widely applicable in settings where there is a need to reduce the amount of process models of a highly similar sort. ING IM is a typical example of such a setting, but many other organizations in the (financial) services domain can be imagined to have a comparable supply of models and a comparable need to effi-ciently and accurately manage their content.

Our approach is characterized by a number of limitations. First of all, the creation and evaluation of the various design alternatives for an aggregate process model has taken place in close collaboration with business professionals, but no rigor-ous empirical methods (e.g. surveys, experiments, etc.) have been employed to test the differences between these with re-spect to model comprehension. A more methodological evaluation of our approach could be the aim of future work. This agenda fits nicely with recent work of ourselves and others in this field [10,27,33,42] . In particular, an experimental set-up as described in [37] seems suitable to approach this evaluation.

Second, our approach is specifically geared towards the use of EPCs. On the one hand, one can argue that this will cater for a large part of the business community, considering the extensive use of the ARIS Toolset. On the other hand, we have given to generalize our approach to other activity-oriented modeling techniques  X  provided that such a technique incorporates a mechanism to use labels. For example, the Protos Toolset would be a good candidate [43].

Third, our approach does not take evolutionary development into account. Over time it can be needed to develop different erence models and a solution is presented for the version management of jointly designed reference models. A similar mech-anism is highly relevant for our work as well.

A last limitation that is worth mentioning relates to our focus on syntactical correctness in this work, while many other properties that relate to process model quality can be distinguished. Some of the first additional relevant criteria that come model to always terminateeventuallyin a desirable end situation. For C-EPCs inparticular it has already been shown in [3] that whenthe referenceprocess modelis behaviorallysound, the individualizedprocess modelsare guaranteed tobe sound as well. Because of the formalization that underlies our work it will be relatively easy to extend our work in this direction.
Finally, we stress that our contribution addresses yet a small part of the issues that are involved with model manage-ment. For example, it is an open issue how the right balance can be determined between the complexity of an aggregated process model on the one hand and the number of models in a collection of process models on the other. It is safe to say that the management of process models as a discipline is at its infancy in comparison with fields like product and soft-ware management. Therefore, we hope that our work and experiences inspire others to pursue further research in this area.

References
