 Microblogging platforms, such as Twitter, Tumblr etc., have been established as key components in the contemporary Web ecosys-tem. Users constantly post snippets of information regarding their actions, interests or perception of their surroundings, which is why they have been attributed the term Live Web . Nevertheless, research on such platforms has been quite limited when it comes to identify-ing events, but is rapidly gaining ground. Event identification is a key step to news reporting, proactive or reactive crisis management at multiple scales, efficient resource allocation, etc. In this paper, we focus on the problem of automatically identifying events as they occur , in such a user-driven, fast paced and voluminous setting. We propose a novel and natural way to address the issue using notions from emotional theories, combined with spatiotemporal informa-tion and employ online event detection mechanisms to solve it at large scale in a distributed fashion. We present a modular frame-work that incorporates all of our key ideas and experimentally val-idate its superiority, in terms of both efficiency and effectiveness, over the state-of-the-art using real life data from the Twitter stream. We also present empirical evidence on the importance of spatiotem-poral information in event detection for this setting.
 H.2.8 [ Database Management ]: Database Applications X  Data Min-ing live web; event identification; sentiment analysis; emotions
Microblogging services, such as Twitter, Tumblr and Plurk, are rapidly gaining in attention, by all involved parties: academia, in-dustry, and the real content providers: the users. For instance, Twit-ter now counts more than 200 million active users, with an approx-imate 400 million  X  X weets X  on a daily basis 1 . Users can post short https://business.twitter.com/audiences-twitter, access Aug 2013 messages, up to 140 characters, mimicking a web-based version of the cell-phone SMS technology. The result is a constant flow of user generated content, arriving at varying rates depending on various factors, and is usually referred to as the Twitter stream.
Although blogs are also user generated, the significant advan-tage of microblogs lies in their constant updating, which has earned them the name  X  Live web  X  or  X  Now web  X . In that respect, these platforms may serve as real-time news reporting and / or crisis-management services, as exemplified with the recent political ter-moil in the Middle East, with Japanese earthquakes [35], or the 2007 Southern California wildfires [40]. This characteristic of fast change, along with the imposition of an upper length limit, is what sets microblogs apart from other social networking services.
Unfortunately, automatically identifying real-life events from mi-croblogs is not that easy. By event , we mean important phenomena with a local and temporal dimension in the physical world. Some of the challenges are: i ) The large adoption means that we must pro-cess in real time voluminous amounts of data. ii ) The content (text) is short , very noisy, with a lot of slang and personal style, and di-verse in numerous ways, regarding location, languages and themes. Finally, iii ) the precise location of a user is generally scarce leading to several techniques for location extraction [11, 18, 35, 41].
Taking into account these impediments, it is no surprise that most existing works that deal with event detection in Twitter simplify the problem by focusing on a specific event type [8, 35, 38]. They then monitor the stream for specific terms, or #hashtags (i.e., user gen-erated topic labels). However, this can only work when the event can be described by a handful of terms, e.g.,  X  X ..] now shaking [..] X  for earthquakes. Clearly, it is impossible to detect genuine events by such means, as the descriptive terms are unknown a priori.
Another alternative is to use online clustering [2, 7, 27] or term burstiness [20, 22], so that trends emerge as a set of frequently co-occurring terms. However, these techniques suffer from scala-bility issues, as they are known to be quite inefficient even for a small fraction of the Twitter stream [2, 22]. They are also sensi-tive to popular terms or large groups of users with similar interests. Spammers are also known to use such terms in their tweets, in or-der to  X  X lend in X  and obtain a higher visibility for their posts[14], only making matters worse. Combined with highly personal [33], and poor writing style the terms describing the event may take a while to surface with these approaches. Furthermore, a trend is not necessarily indicative of an event. Rather the contrary, since they are always present, as users constantly discuss their interests and popular terms emerge. They can also be the result of recurring phe-nomena, such as a prominent hashtag, e.g.  X  X ollow Friday X  (#FF), or misleading at times:  X  X ear santa X  and  X  X erry Christmas X  were trending at some point in May and June 2012, respectively, despite the fact that they are really out of season. In fact, as we experimen-Figure 1: Tweets reflecting real-life events. Permalinks: a) http://twitter.com/137650823/status/202677925663866880 b) http://twitter.com/Number10Gov/status/337244366181634050 tally show, clustering approaches are also ineffective, when trying to return events in a timelier manner, in such a noisy setting. Objective : In this paper, we address the problem of detecting events in a stream of microblogs. The main challenge is to devise tech-niques that work regardless of the category such events belong to, e.g., sports, politics, natural phenomena, etc. To achieve this, we employ techniques grounded on influential theories of emotions, such as Cognitive and Affective [28]. According to these theories, users are urged to express themselves due to an event from the real world. Figure 1 shows indicative tweets, based on real life events of varied gravity. In both cases the users externalized their thoughts as a result of a real life event, but, as the user in Figure 1a) puts it, tweeting about that event was his very first reaction.
 By monitoring the Twitter stream we can access these reactions. Moreover, we argue that such tweets will not be a flat description of the event, but will also convey the user X  X  emotional state , partially disclosing how it affected them. An event can then be modeled as a time -and place -related phenomenon, which triggered a significant change in the emotional state of a (potentially large) group of peo-ple and our goal is to automatically capture such sudden changes.
Figure 2 validates our claim: We plot the relative occurrence of the 4 most prominent emotions, from a sample of the Twitter stream, between May and March 2012. We ommit neutral tweets, which we assert to be non-informative. Surges in anger in early April are related with the Syrian uprising, whereas the high values of joy towards the end are due to the Champions League final, the Eurovision song contest etc.

To address the sheer volume of data, we employ online event detection techniques applied on user input, thereby reinforcing the social sensors naming convention. More specifically, we use ag-gregate information, making our approach scalable and efficient. Figure 2: A timeseries on the daily emotions identified in the Twit-ter stream, between March 15 and May 24 2012 The general idea is to group users together and assign them to a vir-tual sensor, which will monitor their emotional state over time and space, in an online fashion. Information aggregation also ensures that the identified events are of interest to a large group of people. Our technique can be run in parallel, achieving high throughput and scalability, managing to efficiently process large volumes of data.
Overall, our contributions can be briefly described as follows:
We also note that, contrary to alternatives, our approach inher-ently serves a dual purpose: detect new events and monitor a group X  X  emotional reaction to it. This could prove extremely useful in deci-sion making or social sciences.

The rest of the paper is organized as follows: Section 2 presents existing work on related material with our approach. Section 3 discusses our event detection model and algorithmic approach, fol-lowed by Section 4 which gives an engineering perspective of our system. Section 5 contains the experimental evaluation, and Sec-tion 6 concludes our work and presents future directions.
Despite our paper X  X  ties with psychology and sentiment analy-sis, it is impractical to provide a detailed overview of these fields. Therefore, we focus on key aspects that relate to our problem and discuss research regarding event detection from microblogs, which is our main objective.
 Psychology: Emotions are a major discipline in psychology, and several theories have been proposed to understand them [24] from various aspects, including evolutionary, social and cultural, as well as procedural. The basic intuition of our work can be seen to have grounds on procedural as well as cognitive and affective theo-ries [28]. The latter, in particular, argue that emotions are the result of an external stimulus (i.e., an event), which will influence a per-son X  X  attitude or behavior. Under such an affective state of mind, users are more likely to externalize their thoughts.
 Sentiment analysis: Sentiment analysis and opinion mining [32] have been broadly studied in various domains and settings. Textual content is classified to a positive or negative class, and works have been proposed for Twitter in particular [4, 13]. Extensions deal with strength of polarity or by considering more target classes [9, 21, 23, 29]. Our current research differs from this body of work in that sentiment analysis is for us a tool to achieve our goal, i.e., event detection of real world phenomena. Therefore any such proposed technique can fit our algorithmic framework.
 Event detection in Social Media: Event identification from Twit-ter appears to receive an increasing interest lately. Early works fo-cus on events of specific types, e.g. earthquakes [35] or news [36]. They whitelist specific keywords and phrases, e.g.  X  X ..] now shak-ing [..] X , or sources of information, respectively. Evidently, these approaches are inapplicable for type-independent event detection, in a medium as dynamic and diverse as Twitter.
A closely related concept is trending topics or trends , i.e., terms which gain in popularity over a period of time. Trends are prac-tically bursty phenomena [20] of term or hashtag cooccurrences. However, trends are not necessarily indicative of events; rather the contrary, since they are always present. For instance, a big fan base discussing their popular music idol, easily results in a trending topic, regardless of an event actually happening. They are also re-lated with recurring phenomena, such as TV shows, or memes , e.g., the  X  X ollow Friday X  (#FF) hashtag. Given that our definition of an event ties it to a specific location in the physical world, techniques for spatiotemporal burstiness [22] might be considered. However, these share the same inefficiencies with the classical bursty ap-proaches, and are also computationally expensive.

A type-independent approach was proposed in [7], where the au-thors applied online clustering through appropriate similarity mea-sures. However, their methodology was meant for Flickr, an on-line photo-sharing service, with characteristics very different from Twitter: i ) Shooting a photo requires the physical presence of user u at location l at time t . This information is not always available. ii ) Users select the tags of their photos carefully, in order to max-imize their visibility. iii ) Microblogs are voluminous and updated at a very fast pace.

The most closely related work to ours is [44], which is the current state-of-the-art for event detection in Twitter. The authors employ wavelet-based techniques to capture important differences in the  X  energy  X  of individual terms in sliding windows. Tokens are then used to represent nodes in a graph, where edge weights encode strength of cooccurrence between terms. Subsequently, they apply a modularity-based graph partitioning algorithm to obtain groups of terms that share similar burstiness patterns. Evidently, this method has huge memory requirements, as it must maintain a sliding win-dow with the occurrences of every token, even if it was encountered only once, because it may become bursty in the future. To address the quadratic complexity of the clustering step, the authors filter out tokens with the median absolute deviation . However, when applied online, this measure filters out important tokens as well. Moreover, at the conceptual level, the authors X  claim that  X  X motional expres-sions are not useful in defining events X . We argue the exact oppo-site, motivated by emotional theories. We return to this approach in our experimental section.

The works in [6, 34] aim to better understand the temporal infor-mation in tweets (e.g.,  X  X ..] tomorrow I [..] X ), and build full calendars of events. Finally, we note the works in [16, 31] that deal with the quality of extracted events from Twitter. These techniques address an orthogonal problem, and they could be applied to our output.
In this section we formalize our definition of an event, and pro-ceed with our problem statement. Similarly to [5], we define an event as follows:
An event e is a real-world phenomenon, that occurred at some specific time t and is usually tied to a location l .

However, we are only able to monitor the aftermath of the event, i.e., its effects on actual people who provide their input. According to influential theories of emotions [28], the event will have a sig-nificant impact on the emotional state of the users that experienced it. Because of this, they will be urged to externalize their emotional state, i.e., the way they feel, and will be inclined to post a message about it. Therefore, we can model the emotional state of a user as the number of tweets they post conveying one of several emotions or moods [23]: excited, sad, angry, confused , etc. Since an event
Figure 3: An example assignment of groups to virtual sensors. from the real world is by definition tied to a location, we expect the first responders to be geographically linked as well.
 Taking all that into account, our problem can be stated as: P
ROBLEM S TATEMENT 1. [Event Detection] Given a time or-dered stream of tweets as input, identify those messages which i ) al-ter significantly and abruptly the emotional state of a (potentially) large group of users, and ii ) can be traced back to event e .
This definition fits nicely with an outlier detection formalisation, whereby we observe a sudden and significant change in the emo-tions of users, with respect to the recent history. Monitoring indi-vidual users is very inefficient resource-wise, and will not provide significant clues regarding the event anyhow. It also raises ethical questions at best, as being very intrusive on a user X  X  privacy.
To overcome these limitations, we use aggregate information, extracted from larger user groups, G i . Users are clustered together according to their geographical location, extracted from available information. We then monitor the emotional state of each geo-graphically distributed group independently of the others and re-port an event when the group X  X  cumulative emotional state changes suddenly. Note that this approach covers inherently the part of the definition that wants the event to affect large groups of users.
Instead of putting all users to a single group, which has no local coherency, we decompose G into smaller groups G i and organize them hierarchically. We denote G j i as group i at level j , assuming that leaf nodes are at j = 0. The hierarchy can be administrative (e.g., country, state, etc.), or constructed algorithmically, e.g., via hierarhical clustering. For a fixed level j in the hierarchy, it holds that  X  X  j i = G and  X  X  j i =  X  , and G j i =  X  X  j  X  1 k . Evidently, this de-composition is a trade-off, providing high-level granularity versus a higher need in resources.

We then assign each group G 0 i to a virtual sensor s i , which senses (i.e., reads) all of the tweets from that group. Sensors at higher lev-els gather information from their children. Figure 3 shows an ex-ample of user grouping, with their assigned virtual sensor nearby. Upon arrival, each tweet is classified to one of the emotions that we monitor. Using an aggregation interval a (e.g., a =1min), the sensor produces a single value for each emotion, which is the respective count of tweets conveying that emotion during that period. The aggregation interval acts as a discretization unit, to cope with the streaming nature of the medium. The sensor operates over the w most recent points with a sliding window. This results in a much simpler model than the more intricate, 2-stage, multi-level wavelet coefficients of [44]. The combination of a and w specify the history length, based on which the sensor will identify events.

Assume, for instance, a sensor s i , with a = 5 minutes and w = 12. The sensor maintains a history of the past 5  X  12 = 60 minutes.
World Map image from http://www.wpclipart.com/ Every 5 minutes, s i will process a single value for each emotion, ex-tracted from the tweets received during that interval from the group of users that it monitors. The oldest point will be discarded and the new one will take its place.
Given that a user X  X  emotional state is a result of several factors, it would be unfounded to assume that it will follow a predefined distribution, much less a static one. In fact, we need to approxi-mate it and maintain it efficiently in an online fashion. To achieve this, we can estimate the Probability Density Function ( PDF ) of the distribution, by observing the reactions of each group G parametric models are a great fit for this purpose and kernel es-timators have been shown to achieve good performance for this task [15], while being efficient.

Kernel estimation is based on the idea that each point distributes its weight in its surrounding area, and the kernel function describes how this is done. The function f ( x ) which describes the distribu-tion to approximate is given by the following equation Here, T is the actual set of values that we want to approximate, R is a sample of the data, that each sensor s i maintains, and k ( x ) is the kernel function that describes how each data point distributes its weight. Given that the choice of the kernel function has little sig-nificance over the estimation output [37], we use the Epanechnikov kernel, which has a closed form integral, and can thus be computed very efficiently. The Epanechnikov kernel is given by the following equation where B i is the kernel X  X  bandwidth, computed with Scott X  X  rule [37], B data and  X  i is the standard deviation for the i -th dimension (i.e., emotion), which can be efficiently and accurately maintained in an online fashion. For simplicity, we ignore the interplay of emotions, and set d = 1. Finally, we note that values are normalized in the [0 , 1] d space. However, we do not find this really restrictive: As a straightforward approach, we can normalize with the maximum value allowed by the system X  X  architecture (e.g., 2 32  X  1 for int). Al-ternatively, we could rely on system specification requirements re-garding the load it must sustain, which will also be an upper bound (within constant factor) on the values it can process.

Since we operate under a sliding window model, we need to effi-ciently approximate the distribution of the data which currently fall within the window. Figure 4 graphically portrays this requirement, demonstrating for two consecutive time instances the contents of a sliding window (points in blue) and their respective PDF. As time advances (from top to bottom), new points arrive and expired ones are evicted. Therefore, we must update our kernel estimation at each timepoint; using data aggregation during time intervals, in-stead of monitoring a stream, makes this computation tractable.
In order to approximate the data distribution, we need to i ) main-tain online a random sample over the data that fall within the win-dow w , and ii ) keep track of the standard deviation  X  of the val-ues within w . Both of these values are very easy to maintain in a streaming environment. We use  X  X hain sampling X  [3] to produce Figure 4: Approximating the data distribution in a sliding window. the random sample, which will randomly select a point s from the sample to evict, regardless of s being expired or not, and replace it with the new point p . Although we could maintain the entire stream, given enough resources, this is not necessarily a good idea, as shown in Section 5. Moreover, sampling can be seen as an indi-rect way for filtering spurious bursts.
Having our online kernel density estimator in place, we can now use it to identify changes in the data distribution. The rationale is to identify events on the basis that the most recent aggregate emotional state of users was not  X  X s expected X , according to what we have seen so far. Therefore, if a sudden change was observed, this could be caused by an external phenomenon.

Due to our  X  X hain-sampling X  approach, we always maintain a sample which reflects the latest distribution from the data, and con-sequently, the most recent emotional state among the users. Similar problems have been examined in sensor networks [39], but we have the advantage that i ) we can maintain the full window, if we want to, as we are not as heavily constrained on our resources, and ii ) an event of significance will have a more lasting effect on the users, so we expect at least one point to be inserted in the sample.
To characterize the new point as a significant deviation, we first compute its probability mass over the sample R , according to our kernel k ( x ) . More specifically, for each new point p we evaluate the quantity The value r is the neighborhood range, within which to search for points from R . From the definition of the Epanechnikov kernel, the values need to be in the ( p i  X  r  X  B i ,p i + r + B contribute to the integral. If that probability P ( p,r ) is below a cer-tain threshold, we say that this tuple is an outlier. In our setting this means that a significant change was detected in the emotional state of the observed population. Since this could be the result of an oc-curring event, we should trigger additional mechanisms to describe it. Therefore, event detection is decoupled from event description.
In this section we discuss the components that make up our sys-tem, as well as the data and its workflow. There are several compo-nents, in order to provide the desired functionality, each of which works independently of the others. Consequently, we can substitute any one of them with better alternatives. Twitter Data: Our only source of information is the Twitter stream, receiving tweets through the service X  X  streaming API 3 . Having ac-cess to the gardenhose we receive a 10% sample of all public tweets that are posted to the service. Unlike previous techniques, we do not rely on external sources [31, 25] or whitelists [36]. Emotion Classification: Emotions are a key ingredient in our ap-proach, and constitute the basic input to our algorithm (following the tweet). We use a set of 6 emotions proposed by American psy-chologist Paul Ekman [12]: anger, fear, disgust, happiness, sad-ness, surprise . We also use a neutral ( None ) state, to describe the absence of an emotion. We do not consider neutral tweets, as we think that they are uninformative.

In order to extract emotions from tweets, we have trained a clas-sifier using both structural and semantic features. We consider general punctuation, such as exclamation marks, question marks, quotation marks, etc. We also consider letter capitalization / du-plication (e.g.  X  yesssss!!!  X  instead of  X  yes  X ), number of retweets, whether it is a retweet (RT) itself, number of mentioned entities, hashtags and urls. The basic rationale behind using structural fea-tures of the tweet is that we expect truly spontaneous reactions to contain these characteristics. Moreover, these features are very easy to extract, because they are either directly provided by Twitter (e.g., retweets), or can be extracted through shallow parsing. We also compiled lists of emoticons from online resources (e.g., Wikipedia) and by manual inspection of the tweets, which are good indicators of sentiment [13, 4]. Finally, we use lists of words and phrases which are known to be related to emotions. For this pur-pose, we use the Affective WordNet [26] vocabulary, and the moods dataset [23] which contains several sentiment-tagged words.
It is important to note that classifying tweets to emotions is harder than classic sentiment analysis. The reason is not only the additonal target classes, but rather the inherent ambiguity of certain words and the way we use them. For instance, according to Affective WordNet,  X  X mazing X  is related to surprise . However, in the sen-tence  X  X hat book was amazing! X , the intent is to express joy . Sen-timent analysis would correctly identify the sentence as  X  X ositive X , but an emotions classifier may easily mislabel it. Similarly, disgust can easily be misinterpreted as anger , as in  X  X  hate eggplants!!!! X , but in either case the sentiment will be  X  X egative X .
 Location Extraction: To extract a user X  X  location, we could rely on online mapping services (e.g. Google Maps, Yahoo! maps, etc.) or build custom geocoding services [41, 43]. More elaborate tech-niques could also be considered [18, 1], but these require a sig-nificant amount of data for each Twitter user, to build an accurate language profile.

In our system, we apply the technique proposed in [41]. More specifically, we create a local geocoding service, built on top of the GeoNames database 4 . We use Flickr data 5 to create an admin-istrative hierarchy of places. The administrative hierarchy is nec-essary to discriminate between places with the same name, such as  X  X thens X  in Georgia, US from  X  X thens X  in Greece. Flickr pro-vides data up to a town or suburb level, which we feel is more than sufficient for our purposes.

Along with every tweet, the Twitter service also sends informa-tion about the poster, such as the  X  X ocation X  field of her profile. Tweets are mapped to locations as follows: First check whether it contains a GPS signal, which occurs when the tweet is automati-cally posted from a location based service (e.g. Foursquares). Oth-erwise, use the  X  X ocation X  field and map the user with our custom https://dev.twitter.com/ http://geonames.org/ http://www.flickr.com/places/info/
Figure 5: Schematic interaction of our system X  X  components gazetteer. Therefore, for that particular tweet, the user is assigned to the sensor that monitors the respective area. We do not consider tweets from users who can not be mapped to a location.
 Event Detection: We assume a set of virtual sensors, each of which is in charge of monitoring a specific location. Each sensor runs the event detection mechanism presented in Section 3, applied on the counts of each emotion, measured in every aggregation interval. Event detection runs in an online fashion, to address the  X  as events occur  X  requirement of our problem. When an event is detected in the emotional state of the users, a signal is raised, notifying the event extraction mechanism to be put into effect. The general idea is to run a lightweight, yet effective, mechanism for event detection, which will trigger the more heavyweight event extraction module when it should be executed, instead of constantly running the latter. Event extraction: The event extraction mechanism is responsible for finding the most informative terms which describe the event that occurred. The input of this component is a set of tweets (e.g., their ids) that have been classified under the same emotion, and were observed during the aggregation interval that triggered the event. The output is a set of keywords which can effectively describe the event. Various techniques can be employed at this stage, ranging from simple ones, e.g., term frequency, TF-IDF, to more elaborate ones, such as similarity-based ones [10, 30, 7]. Given that the pur-pose of this module goes beyond the scope of this paper, we will not elaborate further.

It is important to point out that the same event may invoke dif-ferent emotions. For example, a presidential election will be wel-comed by some but will displease some others. This fact, which we are aware of, can be handled in a straightforward way, because such tweets will share a fair amount of common terms and, therefore, can be grouped together. Note that clustering based approaches will also fail, unless the tweets share some terms. The user can then be notified of the event and the emotions in an aggregate way (e.g., 60% happy, 30% angry, 10% sad). In fact, informing the end-user of the different emotions that an event may elicit adds a semantic dimension, which can be very helpful for social scientists and decision makers alike. This is a unique trait of our technique, not shared by any other existing approach.
From the description of an event e and our event detection mech-anism, it should be clear by now that we need the following infor-mation: a location l , the time of occurrence t , a set of keywords to describe it, and the emotions that were elicited as a result of the event. The standalone subsystems used to extract this information have already been described. Therefore, in the next paragraphs, we describe how we put the pieces of the puzzle together to serve our ultimate goal of event detection.

Figure 5 shows a schematic view of the components and their interaction 6 . The Twitter stream is our system X  X  input, feeding two components, namely the emotions classifier and the location ex-traction subsystem. Through the location extraction process, each incoming tweet is mapped to a location, which will also be the loca-tion of the event (assuming one occurs). As discussed in Section 3, we use a set of virtual sensors, each of which is solely responsible for a specific location. Therefore, the tweet will be forwarded to the virtual sensor responsible for the location it was mapped to.
Meanwhile, the tweet has been classified to one of the 7 emo-tions that we use. If the classifier indicated that the tweet conveys a non-neutral emotion, the virtual sensor will further process it. Oth-erwise, no additional actions are performed. In any case, we store all tweets in our database. It is worth noting that this approach al-lows for an elegant integration with spam detection mechanisms: spam tweets can be cast to the neutral class, thereby preventing them from any subsequent processing.

All in all, when a sensor receives a tweet for further processing, we already know its location and which of the 6 non-neutral emo-tions it has been cast to. For each emotion independently, the sensor counts how many tweets it has received during the last aggregation interval, and produces a single value (the respective count) at the end of each aggregation interval. Each such value serves as input to a separate instance of the event detection mechanism we have previously described, running on the same sensor. The event de-tection module updates its values and identifies whether a surge, i.e., an event, in any emotional state has occurred. In such a case, we report the end time of the aggregation interval as the event X  X  time of occurrence t . Additionally, the tweet ids that caused the peak for that particular emotion are passed on to the event extrac-tion mechanism, which will go over them and summarize the event appropriately. This final step will provide the descriptive keywords of the event, which can then be presented to the user with all the necessary information: location, timestamp, emotion and descrip-tion . Notice how the event extraction step is put into motion only if an event was detected. A sample output can be found in [42]. Dataset: We have a dataset of nearly 300 million tweets, between the start of April and end of May 2012, obtained through Twitter X  X  Gardenhose. This gives us a 10% sample of all public tweets posted on Twitter. Therefore, we have no control over the tweets that we receive in terms of content, location, or language, nor the rates in which they arrive. Given that very few users changed their profile location during this period, we assume that their actual location is the one defined in the profile. We go over all tweets from users who have been mapped to a location and, using language detection software [17], ignore anything that is not: english, spanish, ger-man or greek . We also only consider users from Canada, France, Greece, Germany, Ireland, Spain, UK, US . This gives us approxi-mately 33.5M tweets, from a little less than 400K unique users. We order the tweets by their timestamp and replay the stream, feeding them to the event detection mechanism. We apply no other data
Storage image by Barry Mieny, under CC BY-NC-SA license. cleaning, since we would like to perform our evaluation as it should occur in a real-life setup.
 Techniques: We have implemented our system, TwInsight , and the state-of-the-art, EDCoW [44], in Java 1.6, both of which rely on Twitter alone as input. We run our experiments on a Quad Core machine, @3.5 GHz, with 16GB RAM. We report the average re-sults of three runs.
 Emotions Classification: To train our classifier, we asked from 30 individuals, of varied expertise on Twitter, to annotate a set of tweets with one of Ekman X  X  emotions, or a  X  X one X  option, accord-ing to their belief that the tweet conveyed (or not) an emotion. They were also allowed to skip tweets they felt unsure about. The tweets were randomly selected from the initial dataset of 300M, to avoid biasing the evaluation, and no consesus phase took place.
This process created a gold standard of nearly 6700 tweets From these, we removed about 100 tweets that were outside the set of accepted languages, despite the Twitter users having indicated otherwise in their profiles. Taking our objective into account, we performed the following cleaning: For every tweet with an emotion and more than 100 retweets, we created an identical entry in the dataset with a random retweet count of up to 100. We then replaced the annotator X  X  choice with  X  X one X  in the initial tweet and kept both versions. Most of these tweets were funny quotes and memes  X  a commonplace in Twitter  X , and had the same id, thus they could be efficiently identified through simpler mechanisms (counting the id of a tweet), even if they refer to an ongoing event. Finally, we feel that a user reporting an event, will tweet about it in their own words, than search for an existing one and retweet it.

We experimented with various classifiers in Weka [17], includ-ing SVMs and decision trees. Selecting the most frequent class ( X  X one X ) would give a  X  34% accuracy. In the end, a C4.5 decision tree returned the highest accuracy ( 64.39% ), in 10-fold cross vali-dation, with other classifiers yielding similar results. Clearly, these values can be improved, but one should also consider the subjec-tive nature of the experiment. Most importantly, though, this did not prevent us from identifying meaningful events. Finally, tech-niques such as [19] are applicable, given the high discrepancy in sizes between our gold standar and the experimental dataset.
In this section we evaluate the effect of parameters of our kernel-based mechanism in the event identification process. In particular, we want to see how they affect the times a trigger is raised, putting the event extraction phase into motion. Although a high number of triggering might fulfill more users X  needs, it also means that TwIn-sight is stressed more, especially if these are false positives.
Table 1 shows the number of times that the event extraction phase was triggered, for various neighborhood ranges and sample sizes. We use 1 minute aggregation and maintain a window of 30 points, resulting in a history length of 30 minutes. We compare against an approach that relies on simple counting of received tuples ( X  X eu-tral X ), instead of distinguishing between emotions.

Evidently, increasing the neighborhood range results in less trig-gers, because each point distributes its weight to a broader area. Therefore, new points receive more weight from previous ones, and are less likely to raise an event. Note that the actual numbers may seem quite high, but only account for less than 2.5% of all minutes in the 2 month period.

In addition to the semantic implications of distinguishing among tweets using emotions, this technique also appears to be a more lightweight approach when looking for events, as there is a 3  X 
The dataset will be available upon request Table 1: #Times a trigger was raised, compared to the neighbor-hood range. a = 1min, w = 30, p = 0.1 cut-down of triggering times. Also note that far fewer tuples are considered, because tweets classified as  X  X one X  are dropped. In other words, subsequent modules will be triggered fewer times and operate on fewer tweets, resulting in a reduced load overall.
In this section we discuss the effect of spatio-temporal locality of emotions, and its importance in event detection. Figure 6 shows the number of times we raised an event as a function of the history we maintain, when aggregating emotions over the past 1 minute and monitoring the entire stream at once (we use only one sensor).
Interestingly, a bigger sample size results in more triggers. This is due to maintaining outdated information compared to the fast pace of the medium. As we increase the history length, trigger-ing drops slowly (Figure 6(b)), because new points can be matched against more sampled data, and are less likely to be flagged as out-liers. Recall that we monitor the entire stream here, implying that there is a continuous flow among all the regions we monitor.
On the other hand, Figure 6(a) leads to a very interesting obser-vation. Using a 50% sample, there is a dramatic drop in the number of triggers, when we increase the window size from 10 to 15; from that point, until a window size of 30, triggering events increases slightly, and begins decreasing from that point on. This means that for 1 minute aggregations, there are rapid changes in the observed emotions; therefore a window of 10 points may be too narrow, to maintain a representative  X  X istory X . On the other hand, a window between 15  X  30 minutes seems like a better choice. This result correlates very well with the real time nature of the medium, where people tend to speak and respond very quickly to their tweets. It also means that events that are present in our data create some mo-mentum over a mid-size period (  X  30minutes), and then dissipate.
Given that 1-minute aggregations may be too aggressive, we also experimented with 5-minute aggregations. As shown in Fig-ure 7 the 5-minutes aggregations are smoother, when using the 50% sample. Moreover, triggering is increased towards the end, where the window size is at least 24 points, i.e. 2hours. However, most triggers did not correspond to particularly meaningful events using simple term frequency for event description. This implies that there are not such sudden changes in 5-minute aggregations, when mon-itoring the entire stream. This has also been validated with longer aggregation periods.
 What is more interesting, however, is the spike we observe in Figure 7(b), for a window size of 15 points (75 minutes), which does not exhibit a similar behavior with the one of Figure 6(a). The explanation is given in Figure 7(c), where we plot the emotion of joy for Canada compared to the average of the rest of the countries. The discrepancy between the two lines for w =12 and w =15 is the cause of the spike shown in Figure 7(b). In practice, this means that emotions are also exhibit spatial coherency. Therefore, it is better to perform localized monitoring, rather than bluntly looking into the entire stream at once.
In the following paragraphs, we compare TwInsight in terms of efficiency and effectiveness against EDCoW [44], the current state-of-the-art for event detection in Twitter.

Table 2 summarizes for both systems the average time taken by each component to apply its functionality on a newly received tu-ple. Location extraction is a common component. Therefore, any differences lie in the classification and event detection steps.
We achieve a total 6  X  speed-up compared to EDCoW , with the event detection step being orders of magnitude faster. In other words, our approach requires considerably less time to identify events, and is expected to scale better as the number of tweets in-creases. The reason is that TwInsight operates in an online fashion, and new tuples are processed only once upon arrival. On the con-trary, EDCoW requires between 20 and 200ms, depending on the value of  X  , which specifies the number of Stage-2 signals. This difference in efficiency is the result of several reasons: i ) EDCoW revisits tuples to produce the Stage-2 signal values, ii ) computes the wavelet coefficients in all levels, which is a function of  X  , iii ) computes signals X  autocorrelations  X  an unavoidable cost, iv ) ap-plies the median absolute deviation filter twice and iii ) performs the clustering step each time anew.

We would also like to note that we have run TwInsight on a sim-ple laptop with 2GB RAM. On the contrary, EDCoW can not oper-ate with so little memory, as it must maintain (at least) the stage-1 signals for every word it has encountered.
To evaluate the effectiveness of the techniques, we compare their ability to identify significant events from our dataset. Obviously, neither technique can identify events which are not mentioned at all. For this reason, we present significant events that each tech-nique extracted, cross validating them with online resources. EDCoW: We initially run EDCoW with the parameters suggested by the authors, i.e., 10 minute intervals for stage-1 signals,  X  = 6,  X  = 40, over the duration of one day. As described in [44], an event must contain at least two terms, but not too many . Note that, for these parameters, the average description length of an event in their dataset was 2.23 terms, with at most 3 tokens.
 In our dataset, EDCoW finds 709 events with at least 2 keywords. However, the average event description is 39.7 terms (  X  = 26.6). Therefore, we set  X  = 200, to increase the number of filtered tokens. Although this is 5  X  higher than what the authors originally used, the average description remains high: 21 terms (  X  = 23.2). In other words, most of the identified events would have been filtered out due to low significance.

Regardless, we searched for terms that we knew to have occurred during our crawl. The terms  X  X urovision X  (the contest),  X  X ayern X  and  X  X rogba X  (for the Champions League final), did not return any results. The term  X  X helsea X ,  X  the other competing team  X , appears in 4 events, when using  X  = 40; the term does not appear when  X  = 200. Most importantly, though, the term appears on May 24 2012, 5 days after the match. One of those 4 cases is shown below. Clearly, most of the terms are unrelated: bobcat, liar, desir, doc, chainz, push, selena, quedo, pasado, un-derstood, gustan, howard, older, rare, technolog, chelsea , stadium, phoenix, fit, concern, psalm, thug, duda, pacer, irish, hah, hacerlo, provid, debat, swag, mum, pregunto, lama, vou, lux, strike, swal-low, cuerpo, grow, goal, theori, singer, yung, lookin, 500, slapen, lea, suspens, 2016, ignor, marri
Given our goal to identify events in a timely fashion, we also experimented with 1 minute aggregations,  X  = 5,  X  = 40, over the duration of half an hour, similarly to our parameters. This gives 588 events, with an average description length of 6 tokens, but is filled with cusses. The only exception of a real-life event is the case of  X  X on,celtic X  identified on May 27, 00:27 GMT. The event most likely refers to the Boston Celtics game, which took place on May 26, 8:00 ET (i.e., May 27, 00:00 GMT).

All in all, EDCoW failed to identify meaningful events that we knew about during this period. We identify two key reasons: a ) Un-like [44], our dataset was processed as received, without applying any cleaning that would ensure adequate volume of the remaining tokens, b ) the clustering step is prone to the data cleaning process and groups tokens together aggressively. This can be validated by the need for EDCoW X  X  event significance step, to prune clusters with too many terms.
 TwInsight: On the contrary, TwInsight identified several events during this period, and Table 3 presents a brief summary of the most prominent, along with the associated emotion, where and when it was discovered, given our objective to identify events as they occur .
Event 1 concerns the speech that Erskine Bowles, a renowned figure in the US, gave to the graduates of an american university on that day. Given that posted excerpts contained terms such as  X  X ebt X , and  X  X razy X , they were flagged with the emotion of  X  X ear X .
Event 2 is about an australian company that failed to raise a re-quired amount of $150m, to finish the construction of the Ararat prison. The company went under voluntary administration 8 Event 3 can be traced back to various NBA games occurring on May 15 , but are observed on May 16 due to the time difference. Both  X  X purs X  and  X  X eat X  played on May 15 ( X  X purs X  when the event was detected), and  X  X KC X  had a game the following day. Note that these games appear together because we report events at the country level, rather than the city level.

Event 4 refers to the  X  X lockupy Frnakfurt X  movement in Ger-many on May 16/05.
 Event 5 is about a major event in our dataset, the Champions League (CL) 2012 finals, between Bayern and Chelsea, that took place on May 19. The game began at 20:45 CEST (18:45 GMT), and there are supportive tweets for the teams just as the match was about to begin.

Event 6 is related to Chris Kreider, a NY Rangers (NYR) Hockey player, who scored a goal in 5 X  16 X  of the 3rd period. A regu-lar hockey game has three 20 X  periods, with 2 intermissions of 17 X  each. The game began at 18:00 GMT (13:00 ET 9 ), placing the goal no sooner than 19:19 GMT, not accounting for any delays, and certainly no later than 19:27, when we identify it.
 Event 7 is related to the goal by Bayern X  X  football player, Thomas M X ller, in the CL final. The goal was scored in the 83rd minute of http://www.theaustralian.com.au/business/property/st-hilliers-arafat-arm-fails-to-secure-150m-goes-into-administration/story-fn9656lz-1226357382452 http://www.nhl.com/ice/recap.htm?id=2011030313
ID Emotion Where When (GMT) Description 6 Joy UK 19/05, 19:27 15th 3rd 5th chris game games goal kreider nyr wel 14 Anger Greece 26/05, 19:52 eurovision rain too much #Eurovision2012 kuulaaaaaaa the match, i.e. on 22:23 CEST (20:23 GMT). This places our find-ing the event the moment that it actually occurred and was posted. We identify similar tweets in Canada and Spain, at the exact same timestamp. Clearly, the event is related with Joy.
 Event 8 is about the equilizer, scored by Didier Drogba in the CL finals. The goal was scored in minute 88 X  of the game, i.e. on 22:28 CEST (20:28 GMT), and we identify several joyous tweets on 20:29, right after the goal.

Event 9 is about the death of Bee Gee X  X  singer Robin Gibb. He was pronounced dead at 23:30 BST (22:30 GMT) on May 20th 10 and a surge in sad tweets is seen at 22:42, only 10 X  after his death.
Event 10 concerns the riots in Chicago, where protestors were opposing Nato X  X  Summit 11 . Due to words  X  X rotestors X ,  X  X ppos-ing X ,  X  X iot X , the conveyed feeling is anger.

Event 11 is about the earthquake in Italy, on May 20, that re-sulted in the death of six people, among them a woman.

Event 12 refers to Assef Shawkat, deputy Minister of Defense of Syria. On May 20, 2012, there was a claim he had been mur-dered 12 , and tweets requesting proof were posted. We have also found tweets on 26th and 27th of May regarding the Houla Mas-sacre of the Syrian civic war which occurred on May 25. We ommit such tweets, as they contain URLs to pictures of immense brutality.
Event 13 is about Keith Fahey, an Irish football player, who was injured and pulled out of the national team.

Event 14 is one of many regarding the Eurovision contest, which took place on May 26. Most of them are related with Joy, however, the one we show here is related with anger. The original tweets are in greek and we show the transliteration. The day of the contest was a rainy and the phrase  X  X oo much X  indicates the posters X  dis-like of both the contest and the fact that it was raining. Moreover, Kuula was the name of the Estonian song, but also happens to be a Greek name, popularized by an 80 X  X  greek comedy, to convey an-guish. Moreover, the tweets we have identified follow the sequence in which the songs were performed. For instance, the tweets of this event appear after tweets containing  X  X urovision X  and  X  X taly X , which is expected, as Estonia performed right after Italy. Finally, http://www.bbc.co.uk/news/entertainment-arts-18140862 http://www.huffingtonpost.com/2012/05/20/nato-summit-chicago-protesters_n_1530789.html http://newsfromsyria.com/2012/05/20/asef-shawkat-assassinated/ the contest started at 21:00 CET 13 (19:00 GMT), and the Estonian song was performed 52 minutes within the contest 14 . Therefore, we identify the event as timely as possible.

Event 15 is about the NBA game between Boston Celtics and the 76ers. The game started at 20:00 ET, 26 May 2012, which is 1:00 am GMT, May 27th . Discussions on Twitter prior to the game, especially as it was about to start, led to the event being detected. There were also some feelings of excitement concerning Nicki Minaj X  X  upcoming performance in Ireland.

To sum up, TwInsight identified several events of varying types, emotions, and intensity, even though we use simpler techniques for event description. Note that we also identified different events happening on the same day, because we can operate effectively in smaller time intervals. Moreover, depending on its type, an event X  X  transition from a latent state to one where it has gained enough visibility may vary, nevertheless, we are still able to capture such changes. Therefore, we have been able to identify considerably more meaningful events, with more efficient techniques, compared with EDCoW . Finally, it is worth noting that, even though we pre-sented the locations where the events were observed, we are able to identify most of them even when we monitor the entire stream.
In this paper, we focused on the problem of automatically iden-tifying events from the Live Web as they occur . We combined no-tions from emotional theories with spatiotemporal information, and tackled the problem using online event detection techniques. We integrated our ideas in a modular framework and experimentally demonstrated its superiority over the state-of-the-art.

We plan to improve our work on several fronts, e.g., i ) perfor-mance of the location extraction method, by applying online loca-tion clustering, using GPS signals, ii ) event description / summa-rization technique, iii ) classification accuracy to filter uninforma-tive points even further, etc. We also plan conduct an analysis over a more extended period of time.
 Acknowledgements : The authors would like to thank the data annotators. This work has been co-financed by EU and Greek http://www.eurovision.tv/page/baku-2012/about/shows http://www.youtube.com/watch?v=fjue0I4Hyko#t=51m40s National funds through the Operational Program "Education and Lifelong Learning" of the National Strategic Reference Framework (NSRF) -Research Funding Programs: Heraclitus II fellowship, THALIS -GeomComp, THALIS -DISFER, ARISTEIA -MMD" and the EU funded project INSIGHT. [1] A. Ahmed, L. Hong, and A. J. Smola. Hierarchical [2] F. Alvanaki, S. Michel, K. Ramamritham, and G. Weikum. [3] B. Babcock, M. Datar, and R. Motwani. Sampling from a [4] L. Barbosa and J. Feng. Robust sentiment detection on [5] H. Becker, F. Chen, D. Iter, M. Naaman, and L. Gravano. [6] H. Becker, D. Iter, M. Naaman, and L. Gravano. Identifying [7] H. Becker, M. Naaman, and L. Gravano. Learning similarity [8] E. Benson, A. Haghighi, and R. Barzilay. Event discovery in [9] J. Bollen, H. Mao, and A. Pepe. Modeling public mood and [10] D. Chakrabarti and K. Punera. Event summarization using [11] J. Eisenstein, B. O X  X onnor, N. A. Smith, and E. P. Xing. A [12] P. Ekman, W. Friesen, and P. Ellsworth. Emotion in the [13] A. Go, R. Bhayani, and L. Huang. Twitter sentiment [14] C. Grier, K. Thomas, V. Paxson, and M. Zhang. @spam: the [15] D. Gunopulos, G. Kollios, V. J. Tsotras, and C. Domeniconi. [16] M. Gupta, P. Zhao, and J. Han. Evaluating event credibility [17] M. Hall, E. Frank, G. Holmes, B. Pfahringer, P. Reutemann, [18] L. Hong, A. Ahmed, S. Gurumurthy, A. J. Smola, and [19] N. Katariya, A. Iyer, and S. Sarawagi. Active evaluation of [20] J. Kleinberg. Bursty and hierarchical structure in streams. In [21] T. Lansdall-Welfare, V. Lampos, and N. Cristianini. Effects [22] T. Lappas, M. R. Vieira, D. Gunopulos, and V. J. Tsotras. On [23] G. Leshed and J. J. Kaye. Understanding how bloggers feel: [24] M. Lewis, J. Haviland-Jones, and L. Barrett. Handbook of [25] C. Li, A. Sun, and A. Datta. Twevent: segment-based event [26] B. M. Luisa Bentivogli, Pamela Forner and E. Pianta. [27] M. Mathioudakis and N. Koudas. Twittermonitor: trend [28] M. Mikolajczak, V. Tran, C. Brotheridge, and J. J. Gross. [29] G. Mishne and M. de Rijke. Capturing global mood levels [30] J. Nichols, J. Mahmud, and C. Drews. Summarizing sporting [31] M. Osborne, S. Petrovic, R. McCreadie, C. Macdonald, and [32] B. Pang and L. Lee. Opinion mining and sentiment analysis. [33] J. W. Pennebaker and L. A. King. Linguistic styles: language [34] A. Ritter, Mausam, O. Etzioni, and S. Clark. Open domain [35] T. Sakaki, M. Okazaki, and Y. Matsuo. Earthquake shakes [36] J. Sankaranarayanan, H. Samet, B. E. Teitler, M. D. [37] D. Scott. Multivariate Density Estimation: Theory, Practice, [38] D. A. Shamma, L. Kennedy, and E. F. Churchill. Tweet the [39] S. Subramaniam, T. Palpanas, D. Papadopoulos, [40] J. Sutton, L. Palen, and I. Shlovski. Back-channels on the [41] G. Valkanas and D. Gunopulos. Location extraction from [42] G. Valkanas and D. Gunopulos. A ui prototype for [43] J. Vosecky, D. Jiang, and W. Ng. Limosa: a system for [44] J. Weng and B.-S. Lee. Event detection in twitter. In ICWSM ,
