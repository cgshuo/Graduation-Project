 WrapRec is an easy-to-use Recommender Systems toolkit which allows users to easily implement or wrap recommen-dation algorithms from other frameworks. The main goals of WrapRec are to provide a flexible I/O, evaluation mech-anism and code reusability. WrapRec provides a rich data model which makes it easy to implement algorithms for dif-ferent recommender system problems, such as context-aware and cross-domain recommendation. The toolkit is written in C# and the source code is publicly available on Github under the GPL license.
 H.3.3 [ Information Search and Retrieval ]: Information Filtering Recommender Systems; Open Source Library
Personalized recommender systems are becoming very pop-ular in online marketing, social networks and mobile appli-cations. RecSys and machine learning communities have de-veloped several successful libraries for recommender systems such as MyMediaLite 1 , Apache Mahout 2 and LensKit 3 .
Most of existing libraries require specific data formats, usually as text files, and are not flexible enough to support new data formats. Data processing is an important step in recommender systems which are usually neglected in current RecSys libraries. The existing frameworks usually require the users to provide the data in a specific format, and similarly they output results in a specific format. As an example consider that a user has a data source with a particular format which is not supported by the existing http://mymedialite.net http://mahout.apache.org http://lenskit.grouplens.org toolkits. A common practice to use this data is to convert to a format which is supported by the toolkit and then run the experiment on the converted data. Now, if the user wants to repeat the experiment for many different scenarios, usually the data preprocessing is done by an external application in a semi-manual way which makes the usage of toolkits difficult and error prone.

WrapRec is a toolkit, with defined routines. It allows users to incorporate any data processing steps easily into the ex-periment, without requiring to change the underlying algo-rithms. The toolkit is a wrapper around existing libraries, which allows them to be plugged into the system. The main goal of the toolkit is to provide high-level interfaces for low-level services to make it easier to run RecSys algorithms. WrapRec X  X  solution to this goal is to provide a rich data object model to make data access flexible and safe. This feature makes it easier to implement algorithms which rely on multiple data sources such as context-aware and cross-domain recommendation scenarios. Furthermore, WrapRec provides high level interfaces to potential algorithms that can be wrapped into the toolkit. Similarly an abstraction layer for evaluation of algorithms is defined in the toolkit to implement custom evaluators and re-use evaluation logics for different RecSys algorithms. The WrapRec toolkit consists of three main components: Data Layer, Recommendation Engine and Evaluation Pipeline. The components are made independent of each other, mean-ing they can be modified and extended without requiring to change other components. Figure 1 illustrates the high level architecture of the toolkit. Below, we briefly describe each component:
Figure 1: The overall architecture of WrapRec.
The current version of WrapRec is implemented as a .Net library which can be added to a .Net project and be called through its public APIs. The WrapRec toolkit can be easily installed in a .Net project by installing its package through the Nuget 5 package management system, or by adding the library file directly to the references of the project. The source code of the toolkit is publicly available under GPL license on Github 6 .

A major goal of WrapRec is to be easy to use. Based on the architecture of the system, to run a RecSys experiment msdn.microsoft.com/en-us/library/ff963548.aspx http://www.nuget.org/ https://github.com/babakx/WrapRec users need to define three main objects: a data interface, an algorithm interface and an evaluation pipeline. More advance scenarios can be defined by extending each of the mentioned three objects. Listing 1 lists a simple RecSys experiment which trains a model on the Movielens 1M dataset 7 using MyMediaLite X  X  rating prediction algorithms. The model is then tested using two evaluation metrics on 30% of the data.
 Listing 1: Sample three step code to run a recom-mender system experiment
Each of the three steps in the above example can be extended without modifying other steps. For example, to read a dataset with a different format, a different dataset reader needs to be defined in step 1. More advanced scenarios and samples can be found in the online documentation of the toolkit. In this demo paper, we briefly introduced an open source RecSys toolkit that can be used for various purposes. The toolkit is currently available on Github and is in active development. The current version of the toolkit is available as a Nuget library and can be easily installed in any .Net project. In the future, we plan to further integrate this project with MyMediaLite and other existing libraries to take the advantages of the existing frameworks more. This research is supported by funding from two European Commission X  X  7th Framework Program projects under grant agreements no. 610594 (CrowdRec) and no. 601166 (PHENICX). [1] Z. Gantner, S. Rendle, C. Freudenthaler, and [2] S. Rendle. Factorization machines with libfm. ACM http://grouplens.org/datasets/movielens/
