 Data sparsity, scalability and prediction quality have been recognized as the three most crucial challenges that every collaborative filtering algorithm or recommender system con-fronts. Many existing approaches to recommender systems can neither handle very large datasets nor easily deal with users who have made very few ratings or even none at all. Moreover, traditional recommender systems assume that all the users are independent and identically distributed; this assumption ignores the social interactions or connections among users. In view of the exponential growth of infor-mation generated by online social networks, social network analysis is becoming important for many Web applications. Following the intuition that a person X  X  social network will affect personal behaviors on the Web, this paper proposes a factor analysis approach based on probabilistic matrix fac-torization to solve the data sparsity and poor prediction ac-curacy problems by employing both users X  social network information and rating record s. The complexity analysis indicates that our approach can be applied to very large datasets since it scales linearly with the number of observa-tions, while the experimental results shows that our method performs much better than the state-of-the-art approaches, especially in the circumstance that users have made few or no ratings.
 H.3.3 [ Information Search and Retrieval ]: Information filtering; J.4 [ Computer Applications ]: Social and Be-havioral Sciences Algorithms, Experimentation Recommender Systems, Collaborative Filtering, Social Rec-ommendation, Matrix Factorization
Recommender Systems attempt to suggest items (movies, books, music, news, Web pages, images, etc.) that are likely to interest the users. Typically, recommender systems are based on Collaborative Filtering , which is a technique that automatically predicts the interest of an active user by col-lecting rating information from other similar users or items. The underlying assumption of collaborative filtering is that the active user will prefer those items which the similar users prefer [13]. Based on this simple but effective intuition, col-laborative filtering has been widely employed in some large, famous commercial systems, such as Amazon 1 . However, due to the nature of collaborative filtering, recommender systems based on this technique suffer from the following in-herent weaknesses: (1) Due to the sparsity of the user-item rating matrix (the density of available ratings in commercial recommender systems is often less than 1% [19]), memory-based [10, 12, 13, 24] collaborative filtering algorithms fail to find similar users, since the methods of computing simi-larities, such as the Pearson Correlation Coefficient (PCC) or the Cosine method, assume that two users have rated at least some items in common. Moreover, almost all of the memory-based and model-based [8, 9, 18, 20] collabora-tive filtering algorithms cannot handle users who have never rated any items. (2) In reality, we always turn to friends we trust for movie, music or book recommendations, and our tastes and characters can be easily affected by the company we keep. Hence, traditional recommender systems, which purely mine the user-item rating matrix for recommenda-tions, give somewhat unrealistic output.

Traditional recommender systems assume that users are i.i.d. (independent and identically distributed); this assump-tion ignores the social interactions or connections among users. But the fact is, offline, social recommendation is an everyday occurrence. For example, when you ask a friend for a recommendation of a movie to see or a good restaurant, you are essentially soliciting a verbal social recommendation. Sinha et al. in [22] have shown that, given a choice between recommendations from friends and those from recommender systems, in terms of quality and usefulness, friends X  recom-mendations are preferred, even though the recommendations given by the recommender systems have high novelty factor. Friends are seen as more qualified to make good and use-ful recommendations compared to traditional recommender systems [1]. From this point of view, the traditional recom-mender systems that ignore the social network structure of users may no longer be suitable. http://www.amazon.com
In the most recent research work conducted in [21], by analyzing the who talks to whom social network on the MSN instant messenger 2 over 10 million people with their related search records on the Live Search Engine 3 ,P.Singla and M. Richardson revealed that people who chat with each other (using instant messaging) are more likely to share in-terests (their Web searches are the same or topically simi-lar). Therefore, to improve th e recommendation accuracy, in modern recommender systems, both social network struc-ture and user-item rating matrix should be taken into con-sideration.

In order to overcome the weaknesses mentioned above, based on the intuition that a user X  X  social network will af-fect her/his personal behaviors on the Web, we propose to fuse a user X  X  social network graph with the user-item rat-ing matrix in order to make mo re accurate and personalized recommendations, which is called Social Recommendation . Actually, the method we develop is applicable not only to social recommendation, but also to social search and many other tasks in information retrieval and data mining.
To achieve this goal, this paper proposes a method in-tegrating social network stru cture and the user-item rating matrix, based on probabilistic factor analysis. We connect these two different data resources through the shared user latent feature space, that is, the user latent feature space in the social network structure i s the same in the user-item rat-ing matrix. By performing factor analysis based on proba-bilistic matrix factorization, the low-rank user latent feature space and item latent feature space are learned in order to make social recommendations. The experimental results on the Epinions 4 dataset shows that our method outperforms the state-of-the-art collaborative filtering algorithms, espe-cially when active users have very few ratings or even none at all. Moreover, the complexity analysis indicates that our approach can be applied to very large datasets since it scales linearly with the number of observations.
 The remainder of this paper is organized as follows. In Section 2, we provide an overview of several major approaches for recommender systems and some related work. Section 3 presents our work on social recommendation. The results of an empirical analysis are presented in Section 4, followed by the conclusions and future work in Section 5.
In this section, we review several major approaches for recommender systems, especially for collaborative filtering. Two types of collaborative filtering approaches are widely studied: memory-based and model-based.

The memory-based approaches are the most popular pre-diction methods and are widely adopted in commercial col-laborative filtering systems [12, 16]. The most analyzed ex-amples of memory-based collaborative filtering include user-based approaches [2, 7, 10, 25] and item-based approaches [4, 12, 19]. User-based approaches predict the ratings of active users based on the ratings of similar users found, and item-based approaches predict the ratings of active users based on the computed information of items similar to those chosen by the active user. User-based and item-based approaches often use the PCC algorithm [16] and the VSS algorithm [2] http://www.msn.com http://www.live.com http://www.epinions.com as the similarity computation methods. PCC-based collab-orative filtering generally can achieve higher performance than the other popular algorithm VSS, since it considers the differences of user rating style.

In the model-based approaches, training datasets are used to train a predefined model. Examples of model-based ap-proaches include the clustering model [25], aspect models [8, 9, 20] and the latent factor model [3]. [11] presented an algo-rithm for collaborative filteri ng based on hierarchical clus-tering, which tried to balance robustness and accuracy of predictions, especially when few data were available. [8] pro-posed an algorithm based on a generalization of probabilistic latent semantic analysis to continuous-valued response vari-ables. Recently, several matrix factorization methods [15, 17, 18, 23] have been proposed for collaborative filtering. These methods all focus on fitting the user-item rating ma-trix using low-rank approximations, and use it to make fur-ther predictions. The premise behind a low-dimensional fac-tor model is that there is only a small number of factors influencing preferences, and that a user X  X  preference vector is determined by how each factor applies to that user.
All the above methods for recommender systems are based on the assumption that users are independent and identically distributed, and ignores the social activities between users, which is not consistent with the reality that we normally ask friends for recommendations. Based on this intuition, many researchers have recently started to analyze trust-based rec-ommender systems. In [14], a trust-aware collaborative fil-tering method for recommender systems is proposed. In this work, the collaborative filtering process is informed by the reputation of users which is computed by propagating trust. Trust values are computed in addition to similarity measures between users. The experiments on a large real dataset shows that this work increases the coverage (num-ber of ratings that are predictable) while not reducing the accuracy (the error of predictions). Bedi et al. in [1] pro-posed a trust-based recommender system for the Semantic Web; this system runs on a server with the knowledge dis-tributed over the network in the form of ontologies, and uses the Web of trust to generate the recommendations. These methods are all memory-based methods which employ only heuristic algorithms to generate recommendations. There are several problems with this approach, however. The rela-tionship between the trust network and the user-item matrix have not been studied systematically. Moreover, these meth-ods are not scalable to very large datasets since they may need to calculate the pairwise user similarities and pairwise user trust scores.

In this paper, by conducting latent factor analysis using probabilistic matrix factorization, we learn the user latent feature space and item latent feature space by employing a user social network and a user-item matrix simultaneously and seamlessly. Although recently, similar factor analysis methods have been employed in [27, 28] for document re-trieval and document classification, our approach has three essential differences compared with these methods: (1) Our method can deal with missing value problem, while their methods cannot. (2) Our method is interpreted using a probabilistic factor analysis model. (3) Complexity analysis shows that our method is more efficient than their methods and can be applied to very large datasets.
In this section, we first demonstrate our social recommen-dation framework using a simple but illustrative toy exam-ple. Then we introduce the factor analysis method for social recommendation using probabilistic matrix factorization. Let us first consider the typical social network graph in Fig. 1(a). There are 6 users in total (nodes, from u 1 to u with 8 relations (edges) between users in this graph, and each relation is associated with a weight w ij in the range [0 , 1] to specify how much user u i knowsortrustsuser u j In an online social network Web site, the weight w ij is often explicitly stated by user u i . As illustrated in Fig. 1(b), each user also rates some items (from i 1 to i 8 )ona5-pointin-teger scale to express the extent of favor of each item. The problem we study in this paper is how to predict the miss-ing values of the user-item matrix effectively and efficiently by employing two different data sources. As mentioned in Section 1, motivated by the intuition that a user X  X  social connections will affect this user X  X  behaviors on the Web, we therefore factorize the social network graph and user-item matrix simultaneously and seamlessly using U T Z and U T V , where the shared low-dimensional matrix U denotes the user latent feature space, Z is the factor matrix in the social net-work graph, and V represents the low-dimensional item la-tent feature space. If we use 5 dimensions to perform the matrix factorization for social recommendation, we obtain
V = where U i and V j are the column vectors and denote the la-tent feature vectors of user u i and item v j , respectively. Note that the solutions of U and V are not unique. Then we can predict the missing value w ij in Fig. 1(b) using U T i V fore prediction, we need to first transfer the value of U using logistic function g ( x ) and another mapping function f ( x ), which will be introduced in Section 3.2 and Section 3.3 respectively). Therefore, all the missing values can be pre-dicted using 5-dimensional matrices U and V ,asshownin Fig. 1(c). Note that even though user u 4 does not rate any items, our approach still can predict reasonable ratings.
Since this example is a toy example, we cannot evaluate the accuracy of the prediction. However, the experimental analysis in Section 4 based on Epinions dataset tests the effectiveness of our approach. In the following sections, we will present the details of how we conduct factor analysis for social recommendation using probabilistic matrix factoriza-tion.
Suppose we have a directed social network graph G = (
V , E ), where the vertex set V = { v i } n i =1 represents all the users in a social network and the edge set E represents the relations between users. Let C = { c ik } denote the m  X  matrix of G , which is also called the social network matrix in this paper. For a pair of vertices, v i and v k ,let c ik denote the weight associated with an edge from v i to v k and c ik = 0, otherwise. The physical meaning of the weight c ik can be interpreted as how much a user i trusts or knows user k in a social network. Note that C is an asymmetric matrix, since in a social network, especially in a trust-based social network, user i trusting k does not necessary indicate user k trusts i .

The idea of social network matrix factorization is to de-rive a high-quality l -dimensional feature representation U of users based on analyzing the social network graph G .Let U  X  R l  X  m and Z  X  R l  X  m be the latent user and factor feature matrices, with column vectors U i and Z k represent-ing user-specific and factor-specific latent feature vectors, respectively. We define the conditional distribution over the observed social network relationships as p ( C | U, Z,  X  2 C )= where N ( x |  X ,  X  2 ) is the probability density function of the Gaussian distribution with mean  X  and variance  X  2 C ,and I is the indicator function that is equal to 1 if user i trusts or knows user k and equal to 0 otherwise. The function g ( x )is the logistic function g ( x )=1 / (1+ exp(  X  x )), which makes it possible to bound the range of U T i Z k within the range [0 , 1]. Figure 2: Graphical Model for Social Recommenda-tion We also place zero-mean spherical Gaussian priors [5, 18] on user and factor feature vectors: Hence, through a simple Bayesian inference, we have
In online social networks, the value of c ik , which is mostly explicitly stated by user i with respect to user k , and it can-not accurately describe the relations between users since it contains noises and it ignores the graph structure informa-tion of social network. For instance, similar to the Web link adjacency graph in [26], in a trust-based social network, the confidence of trust value c ik should be decreased if user i trusts lots of users; however the confidence of trust value c ik should be increased if user k is trusted by lots of users. Hence, we employ the term c  X  ik which incorporates local au-thority and local hub values as a substitute for c ik in Eq. (1), where d + ( v i ) represents the outdegree of node v d ( v k ) indicates the indegree of node v k .
Now considering the user-item matrix, suppose we have m users, n movies, and rating values within the range [0 , 1]. Actually, most recommender systems use integer rating val-ues from 1 to R max to represent the users X  judgements on items. In this paper, without loss of generality, we map the ratings 1 , ..., R max to the interval [0 , 1] using the function f ( x )=( x  X  1) / ( R max  X  1). Let R ij represent the rating of user i for movie j ,and U  X  R l  X  m and V  X  R l  X  n be la-tent user and movie feature matrices, with column vectors U i and V j representing user-specific and movie-specific la-tent feature vectors respectively. We define the conditional distribution over the observed ratings as where I R ij is the indicator function that is equal to 1 if user i rated movie j and equal to 0 otherwise. We also place zero-mean spherical Gaussian priors on user and movie feature vectors: Hence, similar to Eq. (3), through a Bayesian inference, we have
As analyzed in Section 1, in order to reflect the phe-nomenon that a user X  X  social connections will affect this user X  X  judgement of interest in items, we model the prob-lem of social recommendation using the graphical model de-scribed in Fig. 2, which fuses both the social network graph and the user-item rating matrix into a consistent and com-pact feature representation. Based on Fig. 2, the log of the posterior distribution for social recommendation is given by ln p ( U, V, Z | C, R,  X  2 C , X  2 R , X  2 U , X  2 V , X  2 Z )= where C is a constant that does not depend on the parame-ters. Maximizing the log-posterior over three latent features with hyperparameters (i.e. the observation noise variance and prior variances) kept fixed is equivalent to minimizing the following sum-of-squared-errors objective functions with quadratic regularization terms: L ( R, C, U, V, Z )= 1 2 + where  X  C =  X  2 R / X  2 C ,  X  U =  X  2 R / X  2 U ,  X  V =  X  2  X  / X  2 Z ,and  X  2 F denotes the Frobenius norm. A local minimum of the objective function given by Eq.(9) can be found by performing gradient descent in U i , V j and Z k  X 
L  X  X   X 
L  X  X   X 
L  X  X  where g ( x ) is the derivative of logistic function g ( x )= exp( x ) / (1 + exp( x )) 2 . In order to reduce the model com-plexity, in all of the experiments we conduct in Section 4, we set  X  U =  X  V =  X  Z .
The main computation of gradient methods is evaluating the object function L and its gradients against variables. Because of the sparsity of matrices R and C , the compu-tational complexity of evaluating the object function L is O (  X  R l +  X  C l ), where  X  R and  X  C are the numbers of nonzero entries in matrices R and C , respectively. The computa-tional complexities for gradients  X  L  X  X  ,  X  L  X  X  and  X  L Table 1: Statistics of User-Item Rating Matrix of Epinions fore, the total computational complexity in one iteration is O (  X  R l +  X  C l ), which indicates that the computational time of our method is linear with respect to the number of obser-vations in the two sparse matrices. This complexity analysis shows that our proposed approach is very efficient and can scale to very large datasets.
In this section, we conduct several experiments to compare the recommendation quality of our social recommendation approach with other state-of-the-art collaborative filtering methods. Our experiments are intended to address as the following questions: 1. How does our approach compare with the published 2. How does the model parameter  X  C affect the accuracy 3. What is the performance comparison on users with 4. Can our algorithm achieve good performance even if 5. Is our algorithm efficient for large datasets? In the following, Section 4.3 gives answers to question 1, Section 4.4 addresses question 2, Section 4.5 describes exper-iments for questions 3 and 4, and lastly, Section 4.6 shows the analysis of question 5. A tremendous amount of data has been produced on the Internet every day over the past decade. Millions of people influence each other implicitly or explicitly through online social network services, such as Facebook 5 .Asaresult, there are many online opportunities to mine social networks for the purposes of social recommendations.

We choose Epinions as the data source for our experiments on social recommendation. Epinions.com is a well known knowledge sharing site and review site that was established in 1999. In order to add reviews, users (contributors) need to register for free and begin submitting their own personal opinions on topics such as products, companies, movies, or reviews issued by other users. Users can also assign prod-ucts or reviews integer ratings from 1 to 5. These ratings and reviews will influence future customers when they are deciding whether a product is worth buying or a movie is worth watching. Every member of Epinions maintains a  X  X rust X  list which presents a network of trust relationships between users, and a  X  X lock (distrust) X  list which presents a network of distrust relationships. This network is called the  X  X eb of trust X , and is used by Epinions to re-order the product reviews such that a user first sees reviews by users that they trust. Epinions is thus an ideal source for exper-iments on social recommendation. Note that in this paper, we only employ trust statements between users while ignor-ing the distrust statements, for the following two reasons: (1) The distrust list of each user is kept private in Epin-ions.com in order to protect the privacies of users, hence it is not available in our dataset. (2) As presented in [6], the understanding of distrust is more complicated than trust, which indicates that the user trust latent feature space may not be the same as the user distrust latent feature space. The study of distrust-based social recommendation will be conducted in future work.

The dataset used in our experiments consists of 40,163 users who have rated at least one of a total of 139,529 dif-ferent items. The total number of reviews is 664,824. The density of the user-item matrix is We can observe that the user-item matrix of Epinions is relatively very sparse, since the densities for the two most fa-mous collaborative filtering datasets Movielens 6 (6,040 users, 3,900 movies and 1,000,209 ratings) and Eachmovie 7 (74,424 users, 1,648 movies and 2,811,983 ratings) are 4 . 25% and 2 . 29%, respectively. In particul ar, in the Movielens dataset all the users are guaranteed to have voted on at least 20 items, while in our Epinions dataset, 18,826 users, repre-senting 46.87% of the population, submitted fewer than or equal to 5 reviews. Moreover, an important reason that we choose the Epinions dataset is that user social network in-http://www.facebook.com http://www.cs.umn.edu/Research/GroupLens. http://www.research.digital.com/SRC/EachMovie. It is now retired by Hewlett-Packard (HP). formation is not included in the Movielens and Eachmovie datasets. The statistics of the Epinions user-item rating ma-trix are summarized in Table 1.

As to the user social network, the total number of issued trust statements is 487,183. The indegree and outdegree dis-tributions of this social network fit with a power-law distri-bution, as has been found in many social networks. The de-gree distributions of the Epinions social network are shown in Fig. 3.
We use the Mean Absolute Error (MAE) metrics to mea-sure the prediction quality of our proposed approach in com-parison with other collaborative filtering methods. MAE is defined as: where r i,j denotes the rating user i gave to item j , r i,j notes the rating user i gave to item j as predicted by our approach, and N denotes the number of tested ratings.
In this section, in order to show the performance improve-ment of our Social Recommendation (SoRec) algorithm, we compare our algorithm with some state-of-the-art algorithms: Maximum Margin Matrix Factorization (MMMF) [15], Prob-abilistic Matrix Factorization (PMF) [18], and Constrained Probabilistic Matrix Factorization (CPMF) [18].

We use different amounts of training data (99%, 80%, 50%, 20%) to test all the algorithms. Training data 99%, for example, means we randomly select 99% of the ratings from Epinions dataset as the training data to predict the remaining 1% of ratings. The random selection was car-ried out 5 times independently. The experimental results are shown in Table 2. The parameter settings of our ap-proach are  X  C = 10,  X  U =  X  V =  X  Z =0 . 001, and in all the experiments conducted in the following sections, we set all of the parameters  X  U ,  X  V and  X  Z equal to 0 . 001. From Table 2, we can observe that our approach outperforms the other methods. On average, our approach improves the ac-curacy by 11.01%, 9.98%, adn 7.82% relative to MMMF, PMF and CPMF, respectively. The improvements are sig-nificant, which shows the promising future of our social rec-ommendation approach.
The main advantage of our social recommendation ap-proach is that it incorporates the social network informa-tion, which helps predict users X  preferences. In our model, parameter  X  C balances the information from the user-item rating matrix and the user social network. If  X  C =0,we only mine the user-item rating matrix for matrix factoriza-tion, and if  X  C = inf, we only extract information from the social network to predict users X  preferences. In other cases, we fuse information from the user-item rating matrix and the user social network for probabilistic matrix factorization and, furthermore, to predict ratings for active users.
Fig. 4 shows the impacts of  X  C on MAE. We observe that the value of  X  C impacts the recommendation results signif-icantly, which demonstrates that fusing the user-item rat-ing matrix with the user social network greatly improves the recommendation accuracy. As  X  C increases, the predic-tion accuracy also increases at first, but when  X  C surpasses a certain threshold, the prediction accuracy decrease with further increase of the value of  X  C . This phenomenon co-incides with the intuition that purely using the user-item rating matrix or purely using the user social network cannot generate better performance than fusing these two resources together. From Fig. 4, no matter using 5-dimension or 10-dimension representation, we observe that for this Epinions dataset, our social recommendation method achieves the best performance when  X  C  X  [10 , 20], while smaller values like  X  C =0 . 1 or larger values  X  C = 100 can potentially de-grade the model performance. Moreover, the insensitivity of the optimal value of  X  C shows that the parameter of our model is easy to train.
One main task we target in this paper is to provide accu-rate recommendations when users only supply a few ratings or even have no rating records. Although previous work al-ways notices this critical problem, few approaches perform well when few user ratings are given. Hence, in order to compare our approach with the other methods thoroughly, we first group all the users based on the number of observed ratings in the training data, and then evaluate prediction ac-curacies of different user groups. The experimental results are shown in Fig. 5. Users are grouped into 10 classes:  X = 0 X ,  X 1  X  5 X ,  X 6  X  10 X ,  X 11  X  20 X ,  X 21  X  40 X ,  X 41  X  80 X ,  X 81  X  160 X ,  X 160  X  320 X ,  X 320  X  640 X , and  X  &gt; 640 X , denoting how many ratings users have rated.

Fig. 5(b), Fig. 5(d), Fig. 5(f) and Fig. 5(h) summarize the distributions of testing data according to groups in the training data. For an example, in Fig. 5(d), there are a to-tal of 1,089 user-item pairs needing to be predicted in the testing dataset in which the related users in the training dataset have no rating records ( X = 0 X ). Actually, Fig. 5(f) does not have the label  X  &gt; 640 X  since no user has rated more than 640 items; Fig. 5(h) does not have the labels  X 320  X  640 X  and  X  &gt; 640 X  for the same reason. In Fig. 5(a), Fig. 5(c), Fig. 5(e), and Fig. 5(g) we observe that our al-gorithm generally performs better than other methods, es-pecially when few user ratings are given. When users have no rating records ( X = 0 X ), our method performs much bet-ter than MMMF, PMF and CPMF, and increase the perfor-mancemorethan36 . 75%, 40 . 82%, and 41 . 75%, respectively. Although as the number of users X  observed ratings increases, the performances of all the algorithms converge, our model still generates better predictions than the other methods at all level.
The complexity analysis in Section 3.5 states that the computational complexity of our approach is linear with re-spect to the number of ratings, which proves that our ap-proach is scalable to very large datasets. Actually, our ap-proach is very efficient even when using a very simple gra-dient descent method. In the experiments using 99% of the data as training data, each iteration only needs less than 1 second. Also, as shown in Fig. 6, when using 99% of the data as training data (Fig. 6(a)), our method needs less than 1,200 iterations to converge, which only needs approxi-mately 18 minutes. When using 20% of the data as training data (Fig. 6(d)), we only need less than 5 minutes to train the model. All the experiments are conducted on a normal personal computer containing an Intel Pentium D CPU (3.0 GHz , Dual Core )and1 Giga byte memory.

From Fig. 6, we also observe that when using a small value of  X  C ,suchas  X  C =0 . 1or  X  C = 1, after 200 to 300 iterations, the model begins to overfit, while a larger  X  such as  X  C = 10, does not have the overfitting problem. These experiments clearly demonstrate that in this Epinion dataset, using little social network information can cause overfiting problem, and that the predictive accuracy can be improved by incorporating more social network information. (b) Distribution of Testing Data (99% as
Training Data) (d) Distribution of Testing Data (80% as
Training Data) (f) Distribution of Testing Data (50% as
Training Data) (h) Distribution of Testing Data (20% as Training Data)
In this paper, based on the intuition that a user X  X  so-cial network will affect this user X  X  behaviors on the Web, we present a novel social recommendation framework fusing a user-item rating matrix with the user X  X  social network us-ing probabilistic matrix factorization. The experimental re-sults show that our approach outperforms the other state-of-the-art collaborative filtering algorithms, and the complex-ity analysis indicates it is scalable to very large datasets. Moreover, the data fusion method using probabilistic ma-trix factorization we introduce in this paper is not only ap-plicable to social recommendation, but also can be applied to other popular research topics, such as social search and many other tasks in information retrieval and data mining.
In this paper, we employ the inner product of two vec-tors to fit the observed data; this approach assumes that the observed data is a linear combination of several latent factors. Although we use the logistic function to constrain the inner product, a more natural and accurate extension for this assumption is to use a kernel representation for the two low-dimensional vectors, such as a Gaussian Kernel or a Polynomial Kernel, which map the the relations of two vectors into a nonlinear space, and thus would lead to an increase in the model X  X  performance.

We only use inter-user trust information in this paper, but in many online social networks, the distrust information is also stated by many users. Because a user trust feature space may not be consistent with the corresponding user dis-trust feature space, we cannot simply incorporate the dis-trust information into our model. In the future, we need to investigate the following two problems: whether the distrust information is useful to increase the prediction quality, and how to incorporate it.

When fusing the social network information, we ignore the information diffusion or propagation between users. A more accurate approach is to consider the diffusion process between users. Hence, we need to replace the social net-work matrix factorization with the social network diffusion processes. This consideration will help alleviate the data sparsity problem and will potentially increase the prediction accuracy.
The authors appreciate the anonymous reviewers for their extensive and informative comments for the improvement of this paper. The work described in this paper was fully supported by two grants from the Research Grants Coun-cil of the Hong Kong Special Administrative Region, China (Project No. CUHK4150/07E and GRF #412507). [1] P. Bedi, H. Kaur, and S. Marwaha. Trust based [2] J. S. Breese, D. Heckerman, and C. Kadie. Empirical [3] J. Canny. Collaborative filtering with privacy via [4] M. Deshpande and G. Karypis. Item-based top-n [5] D. Dueck and B. Frey. Probabilistic sparse matrix [6] R.Guha,R.Kumar,P.Raghavan,andA.Tomkins.
 [7] J.L.Herlocker,J.A.Konstan,A.Borchers,and [8] T. Hofmann. Collaborative filtering via gaussian [9] T. Hofmann. Latent semantic models for collaborative [10] R. Jin, J. Y. Chai, and L. Si. An automatic weighting [11] A. Kohrs and B. Merialdo. Clustering for collaborative [12] G. Linden, B. Smith, and J. York. Amazon.com [13] H. Ma, I. King, and M. R. Lyu. Effective missing data [14] P. Massa and P. Avesani. Trust-aware collaborative [15] J. D. M. Rennie and N. Srebro. Fast maximum margin [16] P. Resnick, N. Iacovou, M. Suchak, P. Bergstrom, and [17] R. Salakhutdinov and A. Mnih. Bayesian probabilistic [18] R. Salakhutdinov and A. Mnih. Probabilistic matrix [19] B. Sarwar, G. Karypis, J. Konstan, and J. Reidl. [20] L. Si and R. Jin. Flexible mixture model for [21] P. Singla and M. Richardson. Yes, there is a [22] R. R. Sinha and K. Swearingen. Comparing [23] N. Srebro and T. Jaakkola. Weighted low-rank [24] J. Wang, A. P. de Vries, and M. J. T. Reinders. [25] G.-R.Xue,C.Lin,Q.Yang,W.Xi,H.-J.Zeng,Y.Yu, [26] D. Zhou, B. Scholkopf, and T. Hofmann.
 [27] D.Zhou,S.Zhu,K.Yu,X.Song,B.L.Tseng,H.Zha, [28] S. Zhu, K. Yu, Y. Chi, and Y. Gong. Combining
