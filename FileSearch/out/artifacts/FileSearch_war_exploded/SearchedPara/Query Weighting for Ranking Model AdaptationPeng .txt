 Learning to rank, which aims at ranking documents in terms of their relevance to user X  X  query, has been widely studied in machine learning and information retrieval communities (Herbrich et al., 2000; Fre-und et al., 2004; Burges et al., 2005; Yue et al., 2007; Cao et al., 2007; Liu, 2009). In general, large amount of training data need to be annotated by domain experts for achieving better ranking per-formance. In real applications, however, it is time consuming and expensive to annotate training data for each search domain. To alleviate the lack of training data in the target domain, many researchers have proposed to transfer ranking knowledge from the source domain with plenty of labeled data to the target domain where only a few or no labeled data is available, which is known as ranking model adapta-tion (Chen et al., 2008a; Chen et al., 2010; Chen et al., 2008b; Geng et al., 2009; Gao et al., 2009).
Intuitively, the more similar an source instance is to the target instances, it is expected to be more useful for cross-domain knowledge transfer. This motivated the popular domain adaptation solution based on instance weighting, which assigns larger weights to those transferable instances so that the model trained on the source domain can adapt more effectively to the target domain (Jiang and Zhai, 2007). Existing instance weighting schemes mainly focus on the adaptation problem for classification (Zadrozny, 2004; Huang et al., 2007; Jiang and Zhai, 2007; Sugiyama et al., 2008).

Although instance weighting scheme may be ap-plied to documents for ranking model adaptation, the difference between classification and learning to rank should be highlighted to take careful consider-ation. Compared to classification, the learning ob-ject for ranking is essentially a query, which con-tains a list of document instances each with a rel-evance judgement. Recently, researchers proposed listwise ranking algorithms (Yue et al., 2007; Cao et al., 2007) to take the whole query as a learning object. The benchmark evaluation showed that list-wise approach significantly outperformed pointwise approach, which takes each document instance as in-dependent learning object, as well as pairwise ap-proach, which concentrates learning on the order of a pair of documents (Liu, 2009). Inspired by the principle of listwise approach, we hypothesize that the importance weighting for ranking model adapta-tion could be done better at query level rather than document level.

Figure 1 demonstrates the difference between in-stance weighting and query weighting, where there are two queries q s 1 and q s 2 in the source domain and q t 1 and q t 2 in the target domain, respectively, and each query has three retrieved documents. In Figure 1(a), source and target domains are repre-sented as a bag of document instances. It is worth noting that the information about which document instances belong to the same query is lost. To avoid this information loss, query weighting scheme shown as Figure 1(b) directly measures importance weight at query level.

Instance weighting makes the importance estima-tion of document instances inaccurate when docu-ments of the same source query are similar to the documents from different target queries. Take Fig-ure 2 as a toy example, where the document in-stance is represented as a feature vector with four features. No matter what weighting schemes are used, it makes sense to assign high weights to source queries q s 1 and q s 2 because they are similar to tar-get queries q t 1 and q t 2 , respectively. Meanwhile, the source query q s 3 should be weighted lower because q q q it X  X  not quite similar to any of q t 1 and q t 2 at query level, meaning that the ranking knowledge from q s 3 is different from that of q t 1 and q t 2 and thus less useful for the transfer to the target domain. Unfor-tunately, the three source queries q s 1 , q s 2 and q s 3 would be weighted equally by document instance weighting scheme. The reason is that all of their documents are similar to the two document instances in target domain despite the fact that the documents of q s 3 correspond to their counterparts from different target queries.

Therefore, we should consider the source query as a whole and directly measure the query impor-tance. However, it X  X  not trivial to directly estimate a query X  X  weight because a query is essentially pro-vided as a matrix where each row represents a vector of document features. In this work, we present two simple but very effective approaches attempting to resolve the problem from distinct perspectives: (1) we compress each query into a query feature vec-tor by aggregating all of its document instances, and then conduct query weighting on these query feature vectors; (2) we measure the similarity between the source query and each target query one by one, and then combine these fine-grained similarity values to calculate its importance to the target domain. The basic idea of instance weighting is to put larger weights on source instances which are more simi-lar to target domain. As a result, the key problem is how to accurately estimate the instance X  X  weight indicating its importance to target domain. (Jiang and Zhai, 2007) used a small number of labeled data from target domain to weight source instances. Re-cently, some researchers proposed to weight source instance only using unlabeled target instances (Shi-modaira, 2000; Sugiyama et al., 2008; Huang et al., 2007; Zadrozny, 2004; Gao et al., 2010). In this work, we also focus on weighting source queries only using unlabeled target queries. (Gao et al., 2010; Ben-David et al., 2010) pro-posed to use a classification hyperplane to separate source instances from target instances. With the do-main separator, the probability that a source instance is classified to target domain can be used as the im-portance weight. Other instance weighting methods were proposed for the sample selection bias or co-variate shift in the more general setting of classifier learning (Shimodaira, 2000; Sugiyama et al., 2008; Huang et al., 2007; Zadrozny, 2004). (Sugiyama et al., 2008) used a natural model selection procedure, referred to as Kullback-Leibler divergence Impor-tance Estimation Procedure (KLIEP), for automat-ically tuning parameters, and showed that its impor-tance estimation was more accurate. The main idea is to directly estimate the density function ratio of estimate the importance of source instances. Model parameters were computed with a linear model by minimizing the KL-divergence from p t ( x ) to its esti-objective only contains model  X  w ( x ) .

For using instance weighting in pairwise rank-ing algorithms, the weights of document instances should be transformed into those of document pairs (Gao et al., 2010). Given a pair of documents  X  x weight w ij could be estimated probabilistically as w further estimated as the average value of the weights over all the pairs, i.e., w q = 1 M is the number of pairs in query q . Additionally, to take the advantage of both query and document in-formation, a probabilistic weighting for  X  x i , x j  X  was modeled by w q  X  w ij . Through the transformation, instance weighting schemes for classification can be applied to ranking model adaptation. In this section, we extend instance weighting to di-rectly estimate query importance for more effec-tive ranking model adaptation. We present two query weighting methods from different perspec-tives. Note that although our methods are based on domain separator scheme, other instance weighting schemes such as KLIEP (Sugiyama et al., 2008) can also be extended similarly. 3.1 Query Weighting by Document Feature Our first query weighting method is inspired by the recent work on local learning for ranking (Geng et al., 2008; Banerjee et al., 2009). The query can be compressed into a query feature vector, where each feature value is obtained by the aggregate of its cor-responding features of all documents in the query. We concatenate two types of aggregates to construct the query feature vector: the mean  X  X  = 1 | q | and the variance  X  X  = 1 | q | is the feature vector of document i and | q | denotes the number of documents in q . Based on the ag-gregation of documents within each query, we can use a domain separator to directly weight the source queries with the set of queries from both domains.
Given query data sets D s = { q i s } m i =1 and D t = { q Input: Output: 1: y s =  X  1 , y t = +1 ; 2: for i = 1 ; i  X  m ; i + + do 3: Calculate the mean vector  X  X  i and variance vector  X  X  ; 5: end for 6: for j = 1 ; j  X  n ; j + + do 7: Calculate the mean vector  X  X  j and variance vector  X  X  j ; 9: end for 10: Find classification hyperplane H st which separates D s from D 11: for i = 1 ; i  X  m ; i + + do 12: Calculate the distance of  X  X  i s to H st , denoted as
L (  X  X  s ) ; 14: Add W i to IW s ; 15: end for 16: return IW s ; mains, we use algorithm 1 to estimate the proba-bility that the query q i s can be classified to D t , i.e. P ( q i s  X  D t ) , which can be used as the importance of q relative to the target domain. From step 1 to 9, D  X  s and D  X  t are constructed using query feature vectors from source and target domains. Then, a classifi-cation hyperplane H st is used to separate D  X  s from D t in step 10. The distance of the query feature vector  X  X  i s from H st are transformed to the probabil-ity P ( q i s  X  D t ) using a sigmoid function (Platt and Platt, 1999). 3.2 Query Weighting by Comparing Queries Although the query feature vector in algorithm 1 can approximate a query by aggregating its documents X  features, it potentially fails to capture important fea-ture information due to the averaging effect during the aggregation. For example, the merit of features in some influential documents may be canceled out in the mean-variance calculation, resulting in many distorted feature values in the query feature vector that hurts the accuracy of query classification hy-perplane. This urges us to propose another query weighting method from a different perspective of query similarity.

Intuitively, the importance of a source query to the target domain is determined by its overall sim-ilarity to every target query. Based on this intu-ition, we leverage domain separator to measure the similarity between a source query and each one of the target queries, where an individual domain sep-arator is created for each pair of queries. We esti-mate the weight of a source query using algorithm 2. Note that we assume document instances in the same query are conditionally independent and all queries are independent of each other. In step 3, D  X  q i structed by all the document instances {  X  X  k } in query q s with the domain label y s . For each target query q , we use the classification hyperplane H ij to es-timate P (  X  X  k  X  D  X  document  X  X  k of q i s is classified into the document set of q j t (step 8). Then the similarity between q i s and q is measured by the probability P ( q i s  X  q j t ) at step 9. Finally, the probability of q i s belonging to the target domain P ( q i s  X  D t ) is calculated at step 11.
It can be expected that algorithm 2 will generate Input: Output: 1: y s =  X  1 , y t = +1 ; 2: for i = 1 ; i  X  m ; i + + do 4: for j = 1 ; j  X  n ; j + + do 5: Set D  X  6: Find a classification hyperplane H ij which separates D 7: For each k , calculate the distance of  X  X  k to H , denoted as L (  X  X  k ) ; 8: For each k , calculate P (  X  X  k  X  D  X 
D ) ; 10: end for 11: Add W i = P ( q i s  X  D t ) = 1 n ) to IW s ; 12: end for 13: return IW s ; more precise measures of query similarity by utiliz-ing the more fine-grained classification hyperplane for separating the queries of two domains. To adapt the source ranking model to the target do-main, we need to incorporate query weights into ex-isting ranking algorithms. Note that query weights can be integrated with either pairwise or listwise al-gorithms. For pairwise algorithms, a straightforward way is to assign the query weight to all the document pairs associated with this query. However, document instance weighting cannot be appropriately utilized in listwise approach. In order to compare query weighting with document instance weighting, we need to fairly apply them for the same approach of ranking. Therefore, we choose pairwise approach to incorporate query weighting. In this section, we ex-tend Ranking SVM (RSVM) (Herbrich et al., 2000; Joachims, 2002)  X  one of the typical pairwise algo-rithms for this.

Let X  X  assume there are m queries in the data set of source domain, and for each query q i there are  X  ( q i ) number of meaningful document pairs that can be constructed based on the ground truth rank labels. Given ranking function f , the objective of RSVM is presented as follows: ferent rank label, and z ij = +1 if  X  X  j (1) q i is labeled more relevant than  X  X  j (2) q i ; or z ij =  X  1 otherwise.
Let  X  = 1 2 C and replace  X  ij with Hinge Loss func-tion ( . ) + , Equation 1 can be turned to the following form: min  X  ||  X  X  || 2 +
Let IW ( q i ) represent the importance weight of source query q i . Equation 2 is extended for inte-grating the query weight into the loss function in a straightforward way: min  X  ||  X  X  || 2 +  X  where IW ( . ) takes any one of the weighting schemes given by algorithm 1 and algorithm 2. We evaluated the proposed two query weighting methods on TREC-2003 and TREC-2004 web track datasets, which were released through LETOR3.0 as a benchmark collection for learning to rank by (Qin et al., 2010). Originally, different query tasks were defined on different parts of data in the collection, which can be considered as different domains for us. Adaptation takes place when ranking tasks are per-formed by using the models trained on the domains in which they were originally defined to rank the documents in other domains. Our goal is to demon-strate that query weighting can be more effective than the state-of-the-art document instance weight-ing. 5.1 Datasets and Setup Three query tasks were defined in TREC-2003 and TREC-2004 web track, which are home page finding (HP), named page finding (NP) and topic distilla-tion (TD) (Voorhees, 2003; Voorhees, 2004). In this dataset, each document instance is represented by 64 features, including low-level features such as term frequency, inverse document frequency and docu-ment length, and high-level features such as BM25, language-modeling, PageRank and HITS. The num-ber of queries of each task is given in Table 1.
The baseline ranking model is an RSVM directly trained on the source domain without using any weighting methods, denoted as no-weight . We im-plemented two weighting measures based on do-main separator and Kullback-Leibler divergence, re-ferred to DS and KL , respectively. In DS measure, three document instance weighting methods based on probability principle (Gao et al., 2010) were implemented for comparison, denoted as doc-pair , doc-avg and doc-comb (see Section 2). In KL mea-sure, there is no probabilistic meaning for KL weight Query Task TREC 2003 TREC 2004 Topic Distillation 50 75 Home Page finding 150 75 Named Page finding 150 75 and the doc-comb based on KL is not interpretable, and we only present the results of doc-pair and doc-avg for KL measure. Our proposed query weight-ing methods are denoted by query-aggr and query-comp , corresponding to document feature aggrega-tion in query and query comparison across domains, respectively. All ranking models above were trained only on source domain training data and the labeled data of target domain was just used for testing.
For training the models efficiently, we imple-mented RSVM with Stochastic Gradient Descent (SGD) optimizer (Shalev-Shwartz et al., 2007). The reported performance is obtained by five-fold cross validation. 5.2 Experimental Results The task of HP and NP are more similar to each other whereas HP/NP is rather different from TD (Voorhees, 2003; Voorhees, 2004). Thus, we carried out HP/NP to TD and TD to HP/NP ranking adaptation tasks. Mean Average Precision (MAP) (Baeza-Yates and Ribeiro-Neto, 1999) is used as the ranking performance measure. 5.2.1 Adaptation from HP/NP to TD
The first set of experiments performed adaptation from HP to TD and NP to TD. The results of MAP are shown in Table 2.

For the DS-based measure, as shown in the table, query-aggr works mostly better than no-weight , doc-pair , doc-avg and doc-comb , and query-comp per-forms the best among the five weighting methods. T-test on MAP indicates that the improvement of query-aggr over no-weight is statistically significant on two adaptation tasks while the improvement of document instance weighting over no-weight is sta-tistically significant only on one task. All of the improvement of query-comp over no-weight , doc-pair , doc-avg and doc-comb are statistically signifi-cant. This demonstrates the effectiveness of query 0 . 2142  X  0 . 2313  X  X   X  0 . 1807  X  weighting compared to document instance weight-ing.

Furthermore, query-comp can perform better than query-aggr . The reason is that although document feature aggregation might be a reasonable represen-tation for a set of document instances, it is possible that some information could be lost or distorted in the process of compression. By contrast, more ac-curate query weights can be achieved by the more fine-grained similarity measure between the source query and all target queries in algorithm 2.
For the KL-based measure, similar observation can be obtained. However, it X  X  obvious that DS-based models can work better than the KL-based. The reason is that KL conducts weighting by density function ratio which is sensitive to the data scale. Specifically, after document feature aggregation, the number of query feature vectors in all adaptation tasks is no more than 150 in source and target do-mains. It renders the density estimation in query-aggr is very inaccurate since the set of samples is too small. As each query contains 1000 documents, they seemed to provide query-comp enough samples for achieving reasonable estimation of the density functions in both domains. 5.2.2 Adaptation from TD to HP/NP
To further validate the effectiveness of query weighting, we also conducted adaptation from TD to HP and TD to NP . MAP results with significant test are shown in Table 3.

We can see that document instance weighting schemes including doc-pair , doc-avg and doc-comb can not outperform no-weight based on MAP mea-sure. The reason is that each query in TD has 1000 retrieved documents in which 10-15 documents are relevant whereas each query in HP or NP only con-sists 1-2 relevant documents. Thus, when TD serves as the source domain, it leads to the problem that too many document pairs were generated for train-ing the RSVM model. In this case, a small number of documents that were weighted inaccurately can make significant impact on many number of docu-ment pairs. Since query weighting method directly estimates the query importance instead of document instance importance, both query-aggr and query-comp can avoid such kind of negative influence that is inevitable in the three document instance weight-ing methods. 5.2.3 The Analysis on Source Query Weights
An interesting problem is which queries in the source domain are assigned high weights and why it X  X  the case. Query weighting assigns each source query with a weight value. Note that it X  X  not mean-ingful to directly compare absolute weight values between query-aggr and query-comp because source query weights from distinct weighting methods have different range and scale. However, it is feasible to compare the weights with the same weighting method. Intuitively, if the ranking model learned from a source query can work well in target do-main, it should get high weight. According to this intuition, if ranking models f q 1 0 . 6292  X  X   X  0.5198  X  X   X  0.5551  X  X   X  0 . 6358  X  X   X  0.4726 0 . 5559  X  X   X  from queries q 1 s and q 2 s respectively, and f q 1 forms better than f q 2 of q 1 s should be higher than that of q 2 s .
For further analysis, we compare the weight val-ues between each source query pair, for which we trained RSVM on each source query and evaluated the learned model on test data from target domain. Then, the source queries are ranked according to the MAP values obtained by their corresponding rank-ing models. The order is denoted as R map . Mean-while, the source queries are also ranked with re-spect to their weights estimated by DS-based mea-sure, and the order is denoted as R weight . We hope R weight is correlated as positively as possible with R map . For comparison, we also ranked these queries according to randomly generated query weights, which is denoted as query-rand in addition to query-aggr and query-comp . The Kendall X  X   X  = P  X  Q P + Q is used to measure the correlation (Kendall, 1970), where P is the number of concordant query pairs and Q is the number of discordant pairs. It X  X  noted that  X   X  X  range is from -1 to 1, and the larger value means the two ranking is better correlated. The Kendall X  X   X  by different weighting methods are given in Table 4 and 5.

We find that R weight produced by query-aggr and query-comp are all positively correlated with R map and clearly the orders generated by query-comp are more positive than those by query-aggr . This is another explanation why query-comp outperforms query-aggr . Furthermore, both are far better than weighting TD03 to HP03 TD04 to HP04 doc-pair 28,835 secs 21,640 secs query-aggr 182 secs 123 secs query-comp 15,056 secs 10,081 secs query-rand because the R weight by query-rand is ac-tually independent of R map . 5.2.4 Efficiency
In the situation where there are large scale data in source and target domains, how to efficiently weight a source query is another interesting problem. With-out the loss of generality, we reported the weighting time of doc-pair , query-aggr and query-comp from adaptation from TD to HP using DS measure. As doc-avg and doc-comb are derived from doc-pair , their efficiency is equivalent to doc-pair .
As shown in table 6, query-aggr can efficiently weight query using query feature vector. The reason is two-fold: one is the operation of query document aggregation can be done very fast, and the other is there are 1000 documents in each query of TD or HP, which means that the compression ratio is 1000:1. Thus, the domain separator can be found quickly. In addition, query-comp is more efficient than doc-pair because doc-pair needs too much time to find the separator using all instances from source and target domain. And query-comp uses a divide-and-conquer method to measure the similarity of source query to each target query, and then efficiently combine these fine-grained similarity values. Cross-domain knowledge transfer has became an important topic in machine learning and natural lan-guage processing (Ben-David et al., 2010; Jiang and Zhai, 2007; Blitzer et al., 2006; Daum  X  e III and Marcu, 2006). (Blitzer et al., 2006) pro-posed model adaptation using pivot features to build structural feature correspondence in two domains. (Pan et al., 2009) proposed to seek a common fea-tures space to reduce the distribution difference be-tween the source and target domain. (Daum  X  e III and Marcu, 2006) assumed training instances were gen-erated from source domain, target domain and cross-domain distributions, and estimated the parameter for the mixture distribution.

Recently, domain adaptation in learning to rank received more and more attentions due to the lack of training data in new search domains. Existing ranking adaptation approaches can be grouped into feature-based (Geng et al., 2009; Chen et al., 2008b; Wang et al., 2009; Gao et al., 2009) and instance-based (Chen et al., 2010; Chen et al., 2008a; Gao et al., 2010) approaches. In (Geng et al., 2009; Chen et al., 2008b), the parameters of ranking model trained on the source domain was adjusted with the small set of labeled data in the target domain. (Wang et al., 2009) aimed at ranking adaptation in heterogeneous domains. (Gao et al., 2009) learned ranking mod-els on the source and target domains independently, and then constructed a stronger model by interpo-lating the two models. (Chen et al., 2010; Chen et al., 2008a) weighted source instances by using small amount of labeled data in the target domain. (Gao et al., 2010) studied instance weighting based on do-main separator for learning to rank by only using training data from source domain. In this work, we propose to directly measure the query importance in-stead of document instance importance by consider-ing information at both levels. We introduced two simple yet effective query weighting methods for ranking model adaptation. The first represents a set of document instances within the same query as a query feature vector, and then directly measure the source query impor-tance to the target domain. The second measures the similarity between a source query and each tar-get query, and then combine the fine-grained simi-larity values to estimate its importance to target do-main. We evaluated our approaches on LETOR3.0 dataset for ranking adaptation and found that: (1) the first method efficiently estimate query weights, and can outperform the document instance weight-ing but some information is lost during the aggrega-tion; (2) the second method consistently and signifi-cantly outperforms document instance weighting. P. Cai and A. Zhou are supported by NSFC (No. 60925008) and 973 program (No. 2010CB731402). W. Gao and K.-F. Wong are supported by national 863 program (No. 2009AA01Z150). We also thank anonymous reviewers for their helpful comments.
