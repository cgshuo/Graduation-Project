 The World Wide Web (WWW) has become a major platform for hosting, discovering, and compos ing web services. Web service clustering is a technique for efficiently facilitating web service discovery. Most web service clus tering approaches are based on suitable semantic similarity di stance measure and a threshold. Threshold selection is essentia lly difficult and often leads to unsatisfactory accuracy. In this paper we propose a taxonomic clustering algorithm for groupi ng functionally similar web services. We have tested the algorithm on both simulation based randomly generated test data a nd the standard OWL-S TC test data set. We have observed prom ising results both in terms of accuracy and performance. H.3.5 [ Information Storage and Retrieval ]: Online Information Services  X  Web-based services Theory, Design, Performance Ontology, Web Service Clustering, Semantic Similarity The World Wide Web (WWW) has become a major platform for hosting web service advertisem ents published by service providers so that consumers may access them on-demand. In order to facilitate dynamic access to web services we need an efficient way of discovering the required web services out of a large pool of functionally differe nt web services. Web service discovery can become very efficient when service advertisements are categorically organized into well-defined access structures such as Universal Description Discovery &amp; Integration (UDDI [1]) and Distributed Hash Tables (DHT [2]). A conventional way of grouping web services into categories is to use unsupervised learning techniques such as cl ustering by representing web services as samples having specific feature vectors. One kind of categorization is to cluster functi onally similar web services based upon their functional descriptions (that may be textual or semantically well-defined profile s written in languages such as OWL-S [3]). Clusters can then be indexed into centralized registries or into DHTs dependi ng upon the application, domain, and underlying network overlay issues. A consumer query is then processed over the cluster space and the service having the best match is selected. This process can be recursively repeated till a desired composite service is fina lly produced. Thus, we see that for efficient web service discovery we need a web service clustering algorithm that is fast, accurate, and scalable. Web service clustering algorithms can be classified into two general approaches: (i) similarity distance measure based and (ii) self-organization based. Both the approaches have the capacity to exploit semantic information of the service descriptions. Most distance-based approaches in service clustering strike a balance between the accuracy and the computational cost incurred by the algorithm. However, there are several limitations that can be observed in this approach. To begin with, for any sort of sample space having an independent, identical probability distribution ( I.I.D ) it is difficult to construct a classifier that classifies the samples into their correct clusters. One of the reasons is that the accuracy of the algorithm depends upon the order of sample selection during clustering. In this paper we have proposed a self-organizing based clustering algorithm called Taxonomic clustering for taxonomically organizi ng semantic web service discovery. The approach overcomes the problem of sample selection order as well as suboptimal choice of threshold. In this way the algorithm guarantees a much higher accuracy than distance-based approaches. We have also tested the algorithm on both simulation based randomly ge nerated test data and the standard OWL-S TC test data se t. We have observed promising results both in terms of accuracy and performance. The rest of the paper is divided as follows: in Section 2, we discussed related work where standard service discovery infrastructure and service ma tching techniques have been introduced. In Section 3, we desc ribe web service discovery as a query matching problem where the motivation behind the proposed clustering technique has been laid. In Section 4, we present the taxonomical clustering approach. Section 5 evaluates the proposed approaches and Sec tion 6 concludes this paper. Web service discovery problems have been treated as a special case of information retrieval problem by most researches. The common principle is to cluster sim ilar services in groups that are stored in backend system. Back-end systems can be classified into three types: (i) index table base d (such as UDDI [1]), (ii) DHT-based (such as CHORD [2]), and (iii) taxonomical hierarchy based (such as capability graphs [4]). Currently, the most popular backend implementation for servi ce discovery is UDDI. However, the services are not categorized w ith respect to their functionality. This is a major drawback in terms of design as consumer access is mainly based on the functional attributes of web services. The most widely researched approach for web service clustering is distance based. This distance measure can be of two types: (i) keyword based [5] and (ii) ontology based [6]. In keyword based distance measures the similarity of two services is computed using a vector space model based on TF/IDF technique derived from IR research. As an alternative approach, there has been significant research on ontology ba sed semantic distance measure [7]. Semantic distance measures can be classified into three categories: (i) taxonomic distance based [8], (ii) information content (IC) based [9], and (iii) concept property based [8]. In the case of service similarity meas ure a simple taxonomic distance based or IC based measure cannot gi ve us precise results. This is because a web service is a complex concept with independent multi-faceted dimensions like functionality, context and QoS. In general most research approach es choose a specific similarity distance measure. Then similarity is separately computed at the attributive level -namely, input (I), output (O), pre-condition (P), and post-condition/result (R) [10]. Based on such computation a decision rule is applied that tells whether two services are similar or not with respect to a defined global threshold. The other alternative service clustering approach is self-organization. Self-organization of web services takes place on a conceptual plane (rather than a metric plane). The basis of clustering in this case is subsumptive matching instead of similarity computation. The subsumptive match model [10] covers exact match , plug-in , subsumes . It has been argued in several researchers that in the context of service discovery a s ubsume match is considered the weakest match while an exact match is the strongest [4]. A user provides a query that typi cally involves a desired service. Existing services that match the desired service need to be found out of a large collection of serv ices. This requires a pair-wise query matching between the functi onal dimensions of the query and the services. The functional di mensions of services constitute four dimensions: (i) Input (I) , (ii) Output (O) , (iii) Pre-condition (P), and (iv) Result (R). Query matching for service discovery is most often based on the web se rvice match model proposed by Paolucci et al in [10]. Accordi ng to this model the strength of match between any query and a given service is in the order: subsumes &lt; plugin &lt; exact . We argue that the validity of the order is not unconditioned (or unive rsal). In order to provide a justification we first need to discriminate the basic types of queries that can be possible over a service space. Queries can be broadly classified into: (i) simple queries , (ii) complex queries , and (iii) compound queries . A simple query does not contain any conjunctive or disjunctive implication in its clauses. In other words, it cons titutes only one query clause. An example would be Q 1 :  X  find all services that provide vehicles  X . A complex query constitutes a simple query whose clausal literals are constrained via the use of qualifiers. An example would be Q : " find all services that provide vehicles which operate within city X  X . In this case the query has a simple query Q clausal literal vehicle is qualified as:  X  all vehicles which operate in city X  X . Finally, a compound query is a partially ordered set (poset) of simple and/or complex queries logically associated via conjunctions and/or disjuncti ons. An example would be Q all services that provide hosp itals and find all services that provide names of neurologists attending all such hospitals and find all services that provide vehic le transportation to at least one of these hospitals  X . A compound query is conventionally referred to as tasks in [11]. Most researches in service discovery and composition assume that queries are in the form of a task. However, this is a gross gene ralization and often leads to computationally expensive service discovery. This is because a consumer query is normally far fro m being a well-formed task. It is extremely difficult to articulate one X  X  desire for a service by breaking it into concrete sub desires that are logically connected with each other so as to form a valid poset of desires. In [12] it is shown that queries in general are more often complex than compound. In the model proposed thereby a user initiated query is an ordered pair of two complex/simple sub queries in the form: &lt; initial query, target query &gt;. Definition 1 : The initial query (or Type 2 query ) searches for services that can respond to the query by taking in the query information as input. Specifically, it is to search all services that have: (i) P dimension satisfied by the query, and (ii) I dimension satisfied by the query. Definition 2 : The target query (or Type 1 query ) searches for services that can output the final desired world state. Specifically, it is to search all functionally similar services that have: (i) R dimension similar to desired Rs, and/or (ii) O dimension similar to desired Os. An example would be a query Q 4 :  X  find all services that provide vehicle where the customer X  X  name, address, and age are disclosed  X . In this example the info rmation provided in the query is name , address and age . Thus, Q 4 is a complex query that consists of Type 1 query Q 1 :  X  find all services that provide vehicle  X  and Type 2 query Q 5 :  X  find all services that have input name, address, and age  X . Under a very special circumstance a query can be both Type 1 and Type 2 at the same time. This happens only when the desired output or world state is given by a class of services that is also capable of taking in the given query information as input. In such a cas e there is a possibility that all the four dimensions (I, O, P, R) ar e needed to match. In this paper, the P and R dimensions are disregarded in the example for simplicity. However, such a query can always be split into its two component types and mapped i ndependently over the service cluster space. Thus, we see that web service discovery can be conducted in two independent phase s: one for Type 1 component of a query and the other for Type 2 component of the query. Type 2 service discovery is meaningf ul only if Type 1 discovery produces results. This calls for a stratification of the web service sample space before clustering is done. Sample space stratification provides a significan t improvement in clustering as well as discovery performance because the average overall match computation for each discovery phase is greatly reduced. It also improves the accuracy by avoiding false negatives by including services that exclusively match to each of the two query components. We now define the scope of the problem which is to cluster web services according to their functionality for their efficient and accurate discovery. Given a finite set of web services generate a set of clusters such that if a member web service of a particular cluster has a particular class of functionality then all the other members of the same cluster must have same class of functionality subject to the constraints:  X  The selection of web services from the sample space follows 
I.I.D (i.e., independent, identical distribution)  X  The selection order of samples does not affect the accuracy of the clustering process (no effect of sample selection order )  X  Fuzzy clusters are not allowed (no probabilistic membership of sample within a cluster) In this paper we propose a stratif ied approach of clustering web services. The basic idea behind the clustering algorithm is to generate clusters over the sample space for each dimension independently. As a result, we get four different levels of cluster spaces  X  each corresponding to the four functional dimensions. We now formally define a cluster space as follows: Definition 3 : A cluster space (denoted as CS ) w.r.t to a particular functional dimension g is a well-defined finite set of g-type taxonomic clusters such that any member taxonomic cluster may have g-subsumption relation k taxonomic cluster via corre sponding member samples. Definition 4 : A g-type taxonomic cluster (denoted as T partial-order of web service (samples) over g-subsumption relation k parent ) called the root . Definition 5 (g-subsumption) : s 1 .g k s 2 .g = true iff ( s s .g ) = s 1 .g where T is intersection over g dimension; g = {I, O, P, R} .
 The cluster spaces corresponding to the O and R dimensions are called Type 1 cluster spaces ( T1CS ) as the Type 1 component of a query is directed towards this cluster space. The cluster spaces corresponding to the I and P dimensions are called Type 2 cluster space (T2CS) as the Type 2 component of a query is directed towards this cluster space. It may happen that the topology of one cluster space is different from the topology of the others. If s s form one cluster in the O -cluster space while they are disjoint in the I -cluster space. This aspect can only be captured through stratified clustering (as opposed to integrated approaches). In integrated approaches, for th e above example, either: (i) s form a cluster or (ii) they are di sjoint (i.e. functionally dissimilar) with respect to all the four dime nsions. As the s econd case is false let us take the former one. Thus, a query ( Q 8 ) searching for  X  all services that take in customer password and provide car with the address of service  X  will result in both s 1 and s 2 and select s on an integrated match. However, s 1 and s 2 are, unfortunately, false positives. As the proposed taxonomic web serv ice clustering is essentially a subsumptive match based technique hence, we first need to compare any two given services with respect to a particular dimension (i.e, I, O, P or R-spaces) for three possibilities: (i) one is the ancestor/predecessor of the other (i.e., subsumption), (ii) both are sibling under a common parent, and (iii) both are mutually disjoint with no possibl e abstraction. Fast subsumption testing of a well-defined feature domain has been performed using our SGPS encoding technique [13]. The basic outline of the proposed taxonomic clustering algorithm involves positioning a randomly selected sample from the given sample space and semantically positioning it in the cluster space by searching for the most specific parents ( MSP ) and the least specific children (LSC) . An important optimization can be made here by restricting the search for LSC s only to the children of the MSP s already discovered. Sema ntic positioning is based on subsumption matching between the sample and the already clustered samples in the cluster space. Thus, a sample after positioning either forms a new taxonomy (i.e. cluster) or joins an existing set of taxonomies. It is important to note that as the proposed algorithm is stratified the algorithm outline remains same for all the four cluster spaces (viz. O-space, I-space, P-space, and R-space ). We tested the performance of the proposed Taxonomical Clustering algorithm on a system having a CPU cycle of 1.4 GHz and a RAM of 2 GB. The evaluation methodology is (A) runtime clustering performance evaluation and (B) accuracy evaluation. The performances are measured based on: randomly generated samples via simulation and OWL-S TC v.2 test sets of 981 web services. For generating the ra ndom sample space we designed a simulation platform where sample spaces of different sizes (50 to 981 web services) were randomly generated using a domain space that consisted of 10 domain ont ologies and 3401 concepts. The runtime for the pre-processing is 2.16 seconds. Clustering Performance : The clustering performance was evaluated on the basis of average runtime for clustering of given sample sets (randomly generate d data and OWL-S TC data). Firstly, when we conducted our experiment with randomized sample sets we found a fairly good runtime clustering performance within an average range of 0.003 seconds (for 50 samples) to 0.277 seconds (for 850 samples) (Fig 1). For the OWL-S TC sample space the runtime was approximately similar with an average range of 0.011 seconds (for 50 samples) to 0.337 seconds (for 871 samples) (Fig 1). Accuracy Performance : For evaluating our algorithm over the OWL-S TC sample space we observed: the effect on entropy of relevant set. It is a query ma pping independent cluster analysis. For the former we took the given relevant result sets of 29 different test queries as the basi s of the evaluation. We observed the instability caused to each of the relevant result sets by our proposed algorithm. For measuring the instability we chose to compute the entropy of the result sets conditioned on the O-clusters that were formed when each of the result sets were fed as test sample space to the model. The entropy is computed based on the following equation: where H(Rq) stands for the entropy of resultant set Rq of query q , M is the total number of clusters (i.e. splits) formed by our algorithm, N C is the number of services in cluster C common to Rq , and N R is the total number of services in the relevant set. Lower is the entropy the better is our algorithm with respect to the result set. Ideally, a clustering algorithm should reproduce the entire result set within a single cluster without breaking it. In other words the entropy is 0. If the algorithm splits up the result set into clusters with single member samples then it performs worst. When we tested the entropy effect of our algorithm on the relevant result sets we observed average entropy of 0.19551 over 29 relevant sets (Fig 2). The proposed taxonomic clustering algorithm has been shown to be free from the effect of sample selection order. This provides a significant edge over other known approaches with respect to accuracy. This provides significant improvement on the runtime performance as well. As query matching is a sub-problem of sample clustering we can also conclude that the average query response time should also be significantly low. We keep query response analysis as a future work. This work has been supported by National Science Foundation (IIS #0742666). [1] Universal Description, Discove ry, and Integration (UDDI): [2] Stoicay, I., Morrisz, R., Liben-Nowellz, et al. Chord: A [3] Martin, D., et al. OWL-S: Semantic Markup for Web [4] Mokhtar, S., Preuveneers, D., Georgantas, N., Issarny, V., [5] Lara, R., Corella, M. A., Castells, P. A Flexible Model for [6] Bianchini, D., Antonellis, V ., Pernici, B., Plebani P. [7] Hau, J., Lee, W., Darlington, J. A semantic similarity [8] G. Meditskos, N. Bassiliadis.  X  Structural and Role-Oriented [9] Resnik, P. Using information content to evaluate semantic [10] Paolucci, M., Kawamura, T., Payne, T., Sycara, K. Semantic [11] J. Sousa, V. Poladian, D. Garlan, B. Schmerl, M. Shaw. [12] S. Dasgupta, S. Bhat, Y. Lee, An Abstraction Framework for [13] S. Dasgupta, S. Bhat, Y. Lee, SGPS: a semantic scheme for 
