 The popularity of online location services provides opportunities to discover use-ful knowledge from trajectories of moving objects for various applications. This paper addresses the problem of mining longest common route (LCR) patterns. Mining LCR patterns is one of the fundamental issues in mining trajectories of moving objects. LCR patterns are the longest LSPs (Long, Sharable Patterns)[1]. However, different from [1], the aim of this paper is to tackle the following two challenges to retrieve LCR patterns: (1 ) Accuracy Challenge: As a trajectory of a moving object is generally represented by a sequence of discrete locations sampled with an interval, the different tra jectory instances along the same route may be denoted by different sequences of points (location, timestamp) [2] [3] [4]. (2) Efficiency Challenge: the sampling interval can be very small to ensure the accuracy of trajectories but this approac h generates a large number of useless points on trajectories [3][5] [2].
 To tackle the above two challenges, we propose a novel mining algorithm for LCR patterns based on popular Turning regions (LCRTurning) and explain its effectiveness using examples in Fig. 1. We classify LCR patterns into two classes: Polygon line based LCR (P-LCR) and Direct line based LCR (D-LCR), as shown in Fig. 1 (a) and (b), respectively. We observe that the turning points, where objects change their directions, are always critical and thus we abstract each tra-jectory by using a sequence of turning points. In Fig. 1 (a), two trajectories are simplified as A 1 B 1 C 1 D 1 FH and A 2 B 2 C 2 D 2 EG , by using turning points. Then, we group all the turning points on both simplified trajectories into different clus-ters based on their spatial proximity; examples are cluster 1: { A 1 , A 2 } ,cluster 2: { B turning region be an area that encloses at least min sup (minimal number of supports) points in a cluster and assume min sup = 2; examples include Region A , B , C and D . Finally, we unify the two trajectories as two strings: ABCDF H and ABCDEG . By the above three steps, problem of mining LCR from tra-jectories is mapped into the traditional problem of mining Longest Common subsequences (LCS) from strings. Obviously, the common string is ABCD in this example. Then we refine ABCD by ABCDE and ABCDE is a P-LCS pat-tern in this case. Meanwhile, D-LCR patterns are discovered by another method. For example, the moving object MO1 travels from A to B in Fig. 1 (b), where MO1 also passes other four regions: E , C , D and F , but these four points are not recorded in the trajectory of MO1. So, we retrieve common direct line segments to find D-LCR patterns (e.g. EF in Fig. 1 (b)). Therefore, the LCRTurning algorithm simplifies trajectories by turning points to remove a large number of useless points and then discovers po pular turning regions to simplify trajec-tories further; these tackle Efficiency C hallenge. Moreover, it tackles Accuracy Challenge by unifying simplified trajectories based on popular turning regions.
Our LCRTurning algorithm is different from already exist algorithms and can retrieve LCR efficiently and accura tely and we explain as follows. In [2], Douglas-Peucker (DP) algorithm [6] is used to simplify the trajectories, which tackles Efficiency Challenge. We not only validate that DP algorithm is effec-tive to find turning points in single trajectory in our proposed algorithm, but also consider global popularity of a turning region to simplify trajectories fur-ther. Moreover, we discover LCR patterns mainly through clustering turning points other than mainly clustering direct line segments in [2]. In [3], CuTS (Convoy Discovery using Trajectory Simplification) algorithm is provided, which firstly retrieves coarse candidate results based on DP-simplified trajectories and then validate candidates by clustering locations at every timestamp. The coarse searching screens a large volume of points to be checked further to increase the efficiency, but it did not evaluate the a ccuracy of CuTS since the correct pat-terns were unknown. In this paper, to evaluate both false positive rates and false negative rates of our LCRTurning algorithm, we develop a benchmark method to denote a trajectory by using the inter sections and every tr ajectory along the same route can be detected exactly by the sequences of intersections. Note that our LCRTurning algorithm do not depend on any road network information. In [5], popular regions visited frequently by moving objects, are used to dynami-cally define region of interests (RoIs) and then help discover trajectory patterns. However, the popular regions cannot be discovered precisely because the large number of meaningless locations may lead to find false popular regions. Also, if we use intersections as RoIs and define a neighborhood of each intersection to help remove useless non-intersection loc ations on sampled original trajectories to tackle Accuracy Challenge, it is time consuming to retriev e common patterns since there are a huge number of intersections; our experimental results validate this. The efficiency of our LCRTuring algorithm is validated by an experimental study based on various sizes of moving objects datasets.
 The rest of this paper is organized as follows. We model the problem in Section 2. The LCRTurning algorithm is provided in Section 3, while the per-formance of the proposed algorithm is evaluated in Section 4. Finally, Section 5 concludes the paper. We formally define basic terms and then model the problem.
 Definition 1. A trajectory of moving object is a sequence of points S = &lt; p a snapshot,  X  0  X  u&lt;k , t u &lt;t u +1 ,and ( x u ,y u ) are 2-D locations. Definition 2. Distance, d lp ( p, AB ) , between one point p =( x, y ) and one direct line segment AB is the minimal distance between p and any point on AB . Definition 3. Turning point is a point p i =( x i ,y i ,t i ) , on a trajectory S = &lt; p old), where 2  X  b, i, a  X  k  X  1 ,and p b is sampled before p i and p a is sampled after p i ; any other point, p j ( b&lt;j&lt;a ), a point on original trajectory between p p j and p b p a .
 Definition 4. A turning point simplified trajectory is a sequence of turning Definition 5. Interest region. Given the following condition:(1) A is a 2-D re-gion area with arbitrary shape; (2) a set of turning point simplified trajectories TP 1  X  ...T P u ...  X  TP m and ( x i ,y i )  X  A ;and(3) min sup is the minimal number of supports. There are two types of Interest region: (1) If c  X  min sup ,then A is a (Explicit) Popular turning region .(2)If c&lt;min sup and a set Q j =( loc j , t j ) popular turning region .
 Definition 6. A Longest Common Route (LCR) pattern of moving objects is a that is visited by a set of moving objects MOset = { MO 1 ,MO 2 , ......, M O k } and an LCR pattern satisfies three conditions: (1) k  X  min sup ;(2) k is the maximum value, no other moving objects MO i /  X  MOset visit the whole route  X  ;(3)  X  is the longest route visited by the whole set MOset .
 Definition 7. A Polygon line based LCR (P-LCR) pattern is an LCR pattern which includes at least two popular turning regions.
 Definition 8. A Direct line based LCR (D-LCR) pattern is an LCR pattern which includes at most one popular turning region and at least one implicit popular turning region.
 Definition 9. Given N sequences, Longest Common Subsequence (LCS) is the longest subsequence with at least min sup supports, 2  X  min sup  X  N . Definition 10. Distance, d ll , between two direct line segments AB and CD is the minimal distance between any point p on AB and CD , that is, d ll = min ( d pl ( p, CD ) ), where p Definition 2 and Definition 10 are based on the similar definitions in [3]. Then, the problem of mining LCR patterns is modeled as follows. We first detect turning points (Definition 3) by the DP algorithm and a single trajectory is denoted by a turning point simplified trajectory (Definition 4). We then group all the turning points in a set of trajectories into clusters and turning points in the same cluster are taken as in the same popular turning region (Definition 5). Thus, a trajectory can be abstracted using a sequence of popular turning region IDs. Note that we only mark region IDs on the turning points but keep the original locations in order to compute the distance between re gion IDs. Therefore, we can discover P-LCR patterns (Definition 7) by mining LCS (Definition 9). Finally, we discover implicit popular turning regions (Definition 5). Based on d lp (Definition 2), we compute d ll (Definition 10) of two direct line segments. Two direct line segments can be grouped into the same cluster, if d ll is in a bounded error and the angle between the two direct line segments is also in another bounded error. So, for each direct line segment cluster, we discover the implicit popular turning regions through analyzing the overlap part of the direct line segments. This is the process we retrieve D-LCR patterns (Definition 8). We prove that P-LCR and D-LCR patterns compose the whole set of LCR patterns (Definition 6).
 Theorem 1. Given a P-LCR pattern set S PLCR ,a D-LCR pattern set S DLCR andaLCRpatternset S LCR for the same input trajectories, then they satisfy: Proof. (1) We use a pair of interest region IDs, P , to denote for a D-LCR pattern and a sequence (no less than two) of interest region IDs , H , to denote for a P-LCR pattern . P  X  S DLCR and H  X  S PLCR . We firstly may insert the implicit popular turning regions in P into H , denoted by H ,if P is included in a piece of segment of H and any of P  X  X  ID is not in H yet. There are two cases:
Case 1: a D-LCR pattern is fully included in a P-LCR pattern ,thatis H  X  P (this means P is a subsequence of H ), since a P-LCR pattern includes no less than two popular turning region IDs and a D-LCR pattern includes at most one popular turning region IDs. If H = P ,then P is not the longest common route and thus P is not a LCR; this also means P/  X  S DLCR . Therefore, H = P ,a D-LCR pattern is a sub sequence of a P-LCR pattern , in this case, we neglect this D-LCR pattern .
 Case 2: two lists of moving objects, MOSet 1and MOSet 2 supports H and P , respectively and a part of a D-LCR pattern is included in a P-LCR pattern , that is H  X  P  X  P or ( P  X  H )  X  H =  X  .If MOSet 1= MOSet 2, then this produces a paradox: moving objects that supports both H and P not only changed direction but also went straight without direction c hange. Therefore, MOSet 1 = MOSet 2and H  X  P =  X  . This proves Theorem 1(1). (2) According to definition 7 and 8, S PLCR  X  S LCR and S DLCR  X  S LCR . Thus, S PLCR  X  S DLCR  X  S LCR . Suppose except P-LCR patterns and D-LCR patterns, there is another type of patterns, say X pattern, which belong to LCR According to definition 7, a P-LCR pattern includes m popular turning regions, m  X  2. According to definition 8, a D-LCR pattern includes n popular turning regions, 0  X  n&lt; 2. Suppose an X pattern includes k popular turning regions, because S X  X  ( S PLCR  X  S DLCR )=  X  ,0  X  k&lt; 2and( k&lt; 0or k  X  2). Thus, k&lt; 0. This is not correct, since k  X  0. So, S X =  X  . This proves Theorem 1 (2). In this section, we present the LCRTurning algorithm. 3.1 Discovering Turning Regions According to Definition 3, DP algorithm [6][7] is suitable to detect turning points for trajectory simplification. The main idea of the DP algorithm in [7] is given as follows. The first point and the last point of one trajectory are chosen as the anchor point and float point respectively. For intermediate points, the cut point is the point with the maximum perpendicular distance, which is greater than a pre-defined threshold,  X  , to the line connecting anchor and float points. The cut point becomes the new float point for the first segment and the anchor point for the second segment. If no cut point exists, the procedure stops. This procedure is recursively repeated for both segments.

Then we develop a following Clustering Turning Points (CTP) algorithm based on DBSCAN algorithm [8][9] to group turning points (Definition 3) into popular turning regions (Definition 5): Step 1 . Build neighbour lists of each point on trajectories. The neighbours of point q ( x , y , t ) must satisfy the criteria that the locations of neighbours are in the neighbourhood circle area with ( x , y ) as the centre and eps as the radius. Step 2 . Build a core point set, I . The number of a core point X  X  neighbors is greater than MinPts .
 Step 3 . All core points are marked  X  X nused X . For each unused core point p , put p and p  X  X  neighbors into cluster class id and mark the point as  X  X sed X . Any core point r in cluster class id will recruit r  X  X  neighbors into cluster class id . Step 4 . Unused points are assigned into a special noise cluster.
 Finally, trajectories are denoted by sequences of popular turning region IDs. 3.2 Retrieving Longest Common Route Patterns (1) Mining Polygon Line based LCR (P-LCR) Patterns In the MPLCR algorithm (Algorithm 1), SuffixTree CS procedure retrieves the common sequences based o n suffix trees [10][11] and Remove SubSeq proce-dure removes short patterns. Fig. 2 (b) shows an example LCS: BCD . Assuming BCD has a support list of m  X  min sup ( min sup =3) moving objects, we may check the direct line segments that connect to the two ends of the LCS, shown in Fig. 2(b). Note that only the trajectories of moving objects that support BCD are checked. We develop CL DBSCAN (CL denotes Constraint Line) based on the DBSCAN algorithm to cluster the direct line segments at each end of an LCS by checking whether they have the same moving direction. Then, the i th ( i = min sup ) longest direct line segment is the newly discovered part of the route; DK in Fig. 2(b) shows an example. Given min sup =2, Q 1 BCDK and Q 2 BCDK in Fig. 2(b) are two P-LCR patterns. (2) Mining D-LCR Patterns In the MDLCR algorithm (Algorithm 2), DL DBSCAN (DL denotes Direct Line) clusters direct line segments based on two criteria to determine the simi-larity of two direct line segments: (1) Spati al closeness to each other; (2) Similar direction. We use d ll (Definition 10) to define the spatial closeness and measure two vectors respectively. DL angle and DL eps are the threshold angle and the threshold distance. The DIP Algorithm (Algorithm 3) discover implicit popu-lar turning regions (Definition 5). Suppose DL DBSCAN generates n clusters direction, axes so that the X axis is parallel to representative trajectory i n a direct line segment cluste r is given in [12]. Taking a different approach, we rotate a cluster of di rect line segments to help discover cuts (or implicit popular turning regions). Given RDLSCluster = { AB, CD, F E } , E ( x 5 ,y 5 )and F ( x 6 ,y 6 )in X  X  Y coordinate by Eq. 1. Given x 6 &lt;x 1 &lt;x 3 &lt;x 5 &lt;x 4 &lt;x 2 in Fig. 4 (b), for each direct line segment cluster, we find all the cut points and sort them. The list of sorted cuts line segments in RDLSCluster , the number of supports are counted. Note that one direct line segment here may be supported by more than one moving ob-jects. Finally, all the longest consecuti ve cut sections with supports no less than min sup are put into DLCRSet . In Fig. 4 (b), given min sup =3, the original Short D-LCR patterns may be neglected.
 In our experiments, we used a Network-based Generator of Moving Objects [13] to generate various sizes of moving object datasets described in Table 1, where we chose an open road map of Oldenburg (a city in Germany) as the network input. Several parameters of our algorithms are given in Table 2. We set DL eps = eps and MinPts = 2. We now briefly describe our experimental setup. Given the trajectories exactly denoted by intersections provided by the simulator, we ran MPLCR algorithm to retrieve a set of lo ngest common sub-sequences of inter-sections supported by at least min sup moving objects as benchmarks (shown in Table 1), which were used to measure the accuracy of our proposed methods. We studied three cases of proposed algorithms: DP2, DP5 and DP10, where DP i denote using DP (  X  = i ) to abstract trajectories as input for LCRTurning algorithm (e.g. CTP, MPLCR and MDLCR). First, we studied the optimal eps and optimal DL angle by setting min sup = 2. Then, we observed the scala-bility based on datasets with various data sizes shown in Table 1. We adopted the same optimal values of eps and DL angle in the scalability test. We use false positive rate and false negative rate to measure the accuracy of patterns. Given the benchmark total pattern length, L , and the total retrieved pattern length, L = L c + L e ,where L c is the correct retrieved pattern length and L e is the error retrieved pattern length. False positive rate is L e /L and false negative rate is ( L  X  L c ) /L . All experiments were conducted on an IBM Laptop with Microsoft Windows XP, Genuine Intel 1.83GHz CPU and 512MB main memory. We implemented the proposed algorithms mainly by using C++, and the suffix tree based retrieving LCS algorithm was implemented by Java. 4.1 Optimal eps and DL angle Letting L Angle =5 o , L eps = eps and min sup =2, we ran our proposed al-gorithms on dataset Test1. Time spent on retrieving LCR patterns is plotted in Fig. 5 (a); it shows that the greater the value of eps is, the less time spent on running algorithms DP2, DP5 and DP10. DP10 performed more efficiently than both DP2 and DP5, and DP5 was more efficient than DP2. We analyze the accuracy of patterns shown in Fig. 5(b)(c). The whole trend of the three algorithms in Fig. 5 (b) is that the lowest values of false positive rate are all at eps =15. Also, DP2 performs better than DP10 and DP5, with the lowest false negative rate (4.7%) at eps =30 as shown in Fig. 5 (c). Overall, the best effective-ness and false negative rate is achieved at eps =30, while the best false positive rate is achieved at eps =15. Since all three algorithm s performed more efficiently at eps =30 than at eps =15, eps =30 was the optimal one w ith best effectiveness.
Letting L eps = eps = 30, we studied the optimal DL angle . We plotted time changing with angles in Fig. 5(d), where DP2 consumes more time than DP5 and DP10. DP2 achieves best false negative rate, near to zero at L Angle =35in Fig. 5 (f). Fig. 5 (f) also shows that the greater the angle is, the lower the value of false negative rate, while Fig. 5 (e) shows that the value of false positive rate is increased with the angle. Overall, DP 2 is more accurate but less efficient. The best false positive rate and the best time efficiency are achieved at L Angle =5 and the best false negative rate is achieved at L Angle = 35. 4.2 Efficiency and Accuracy Based on the results in Section 4.1, we let eps =30 and L Angle =35 o to evaluate the efficiency and accuracy of our algorithms in various dataset sizes.
Our proposed algorithms are more efficient than both Benchmark and Impre-cise Intersections methods as shown in Fig. 6 (b). In the Imprecise Intersections method, where the intersections provid ed by the simulator are not repeated ex-actly, we use the CTP algorithm with eps =0 . 1 to group imprecise intersections into region clusters and mine LCS of region IDs. The Imprecise Intersections method is not efficient, since a huge number of imprecise intersections make the CTP algorithm time-consuming. The time costs of DP2, DP5 and DP10 are all nearly linear, while the time cost of B enchmark and Imprecise Intersections climbed quickly with increased data size, up to around four times and twelve times respectively that spent on DP10. The Imprecise Intersections method -that has worst time efficiency -also validates that using turning regions to re-trieve LCR patterns is efficient. Fig. 6 (a) shows in DP2, the time spent on CTP is increased around 14 times from 24s at data size of 3.2Mb to 356s at 13.7Mb, and the time spent on MPLCR is increased around 18 times from 10s to 186s, while time spent on MDLCR is unchanged at around 24s. The time spent on CTP is around twice that spent on MPLCR.

The accuracy of our proposed algorithms is shown in Fig. 7(a)(b). When data size is increased, false positive rate stays in the range of 30%-35%, and false negative rate is lower, always less than 15%. Fig. 7(c) shows that the correct lengths of D-LCR patterns are nearly the same in various data sizes, which also only constitute a very small part of the total lengths. The correct length of P-LCR patterns is the major part: from 86% at data size=3.2Mb to 98% at data size =13.7Mb. Although we evaluate our proposed algorithm by using simulating traffic moving objects, LCRTurning algorithm can be used widely to any trajectories of moving objects that may not follow a network, since turning regions are discovered automatically from trajectories.
 We proposed a novel LCRTurning algorithm to retrieve longest common route patterns from moving object trajectories. The LCRTurning algorithm have wide applications for any trajectories that may not follow a network. Experimen-tal results validated that the LCRTurning algorithm is more efficient than the algorithms that retrieve LCR patterns by using intersections while achieving reasonable accuracy.
 This work was partially supported by Australian Research Council projects (Grant No. LP100200682, LP0882957, LP100100554), as well as the National Natural Science Foundation of China (Grant No. 70602034, 70621001, 60970030) and CAS/SAFEA International Partnership Program.

