 Full NP coreference, the task of discovering which non-pronominal NPs in a discourse refer to the same entity, is widely known to be challenging. In practice, however, most work focuses on the subtask of linking NPs with different head words. Decisions involving NPs with the same head word have not attracted nearly as much attention, and many systems, especially unsupervised ones, op-erate under the assumption that all same-head pairs corefer. This is by no means always the case X  there are several systematic exceptions to the rule. In this paper, we show that these exceptions are fairly common, and describe an unsupervised sys-tem which learns to distinguish them from coref-erent same-head pairs.

There are several reasons why relatively little attention has been paid to same-head pairs. Pri-marily, this is because they are a comparatively easy subtask in a notoriously difficult area; Stoy-anov et al. (2009) shows that, among NPs headed by common nouns, those which have an exact match earlier in the document are the easiest to resolve (variant MUC score .82 on MUC-6) and while those with partial matches are quite a bit harder (.53), by far the worst performance is on those without any match at all (.27). This effect is magnified by most popular metrics for coref-erence, which reward finding links within large clusters more than they punish proposing spu-rious links, making it hard to improve perfor-mance by linking conservatively. Systems that use gold mention boundaries (the locations of NPs marked by annotators) 1 have even less need to worry about same-head relationships, since most NPs which disobey the conventional assumption are not marked as mentions.

In this paper, we count how often same-head pairs fail to corefer in the MUC-6 corpus, show-ing that gold mention detection hides most such pairs, but more realistic detection finds large num-bers. We also present an unsupervised genera-tive model which learns to make certain same-head pairs non-coreferent. The model is based on the idea that pronoun referents are likely to be salient noun phrases in the discourse, so we can learn about NP antecedents using pronom-inal antecedents as a starting point. Pronoun anaphora, in turn, is learnable from raw data (Cherry and Bergsma, 2005; Charniak and Elsner, 2009). Since our model links fewer NPs than the baseline, it improves precision but decreases re-call. This tradeoff is favorable for CEAF, but not for b 3 . Unsupervised systems specify the assumption of same-head coreference in several ways: by as-sumption (Haghighi and Klein, 2009), using a head-prediction clause (Poon and Domingos, 2008), and using a sparse Dirichlet prior on word emissions (Haghighi and Klein, 2007). (These three systems, perhaps not coincidentally, use gold mentions.) An exception is Ng (2008), who points out that head identity is not an entirely reliable cue and instead uses exact string match (minus deter-miners) for common NPs and an alias detection system for proper NPs. This work uses mentions extracted with an NP chunker. No specific results are reported for same-head NPs. However, while using exact string match raises precision, many non-matching phrases are still coreferent, so this approach cannot be considered a full solution to the problem.

Supervised systems do better on the task, but not perfectly. Recent work (Stoyanov et al., 2009) attempts to determine the contributions of various categories of NP to coreference scores, and shows (as stated above) that common NPs which partially match an earlier mention are not well resolved by the state-of-the-art RECONCILE system, which uses pairwise classification. They also show that using gold mention boundaries makes the corefer-ence task substantially easier, and argue that this experimental setting is  X  X ather unrealistic X . We begin by examining how often non-same-head pairs appear in the MUC-6 coreference dataset. To do so, we compare two artificial coreference systems: the link-all strategy links all, and only, full (non-pronominal) NP pairs with the same head which occur within 10 sentences of one another. The oracle strategy links NP pairs with the same head which occur within 10 sentences, but only if they are actually coreferent (according to the gold annotation) 2 The link-all system, in other words, does what most existing unsupervised systems do on the same-head subset of NPs, while the oracle system performs perfectly.

We compare our results to the gold standard us-ing two metrics. b 3 (Bagga and Baldwin, 1998) is a standard metric which calculates a precision and recall for each mention. The mention CEAF (Luo, 2005) constructs a maximum-weight bipar-tite matching between gold and proposed clusters, then gives the percentage of entities whose gold label and proposed label match. b 3 gives more weight to errors involving larger clusters (since these lower scores for several mentions at once); for mention CEAF, all mentions are weighted equally.

We annotate the data with the self-trained Char-niak parser (McClosky et al., 2006), then extract mentions using three different methods. The gold mentions method takes only mentions marked by annotators. The nps method takes all base noun phrases detected by the parser. Finally, the nouns method takes all nouns, even those that do not head NPs; this method maximizes recall, since it does not exclude prenominals in phrases like  X  X  Bush spokesman X . (High-precision models of the internal structure of flat Penn Treebank-style NPs were investigated by Vadas and Curran (2007).) For each experimental setting, we show the num-ber of mentions detected, and how many of them are linked to some antecedent by the system.
The data is shown in Table 1. b 3 shows a large drop in precision when all same-head pairs are linked; in fact, in the nps and nouns settings, only about half the same-headed NPs are actually coref-erent (864 real links, 1592 pairs for nps ). This demonstrates that non-coreferent same-head pairs not only occur, but are actually rather common in the dataset. The drop in precision is much less obvious in the gold mentions setting, however; most unlinked same-head pairs are not annotated as mentions in the gold data, which is one reason why systems run in this experimental setting can afford to ignore them.

Improperly linking same-head pairs causes a loss in precision, but scores are dominated by re-call 3 . Thus, reporting b 3 helps to mask the impact of these pairs when examining the final f-score.
We roughly characterize what sort of same-headed NPs are non-coreferent by hand-examining 100 randomly selected pairs. 39 pairs denoted different entities ( X  X ecent employ-ees X  vs  X  X mployees who have worked for longer X ) disambiguated by modifiers or sometimes by discourse position. The next largest group (24) consists of time and measure phrases like  X  X en miles X . 12 pairs refer to parts or quantities Oracle 1929 1164 100 32.3 48.8 54.4 Link all 1929 1182 80.6 31.7 45.5 53.8 Alignment 1929 495 93.7 22.1 35.8 40.5 Oracle 3993 864 100 30.6 46.9 73.4 Link all 3993 1592 67.2 29.5 41.0 62.2 Alignment 3993 518 87.2 24.7 38.5 67.0 Oracle 5435 1127 100 41.5 58.6 83.5 Link all 5435 2541 56.6 40.9 45.7 67.0 Alignment 5435 935 83.0 32.8 47.1 74.4 and f-scores drop. ( X  X embers of... X ), and 12 contained a generic ( X  X n a corporate campaign, a union tries... X ). 9 contained an annotator error. The remaining 4 were mistakes involving proper noun phrases headed by Inc. and other abbreviations; this case is easy to handle, but apparently not the primary cause of errors. Our system is a version of the popular IBM model 2 for machine translation. To define our generative model, we assume that the parse trees for the en-tire document D are given, except for the subtrees with root nonterminal NP, denoted n i , which our system will generate. These subtrees are related by a hidden set of alignments, a i , which link each NP to another NP (which we call a generator ) ap-pearing somewhere before it in the document, or to a null antecedent. The set of potential genera-tors G (which plays the same role as the source-language text in MT) is taken to be all the NPs occurring within 10 sentences of the target, plus a special null antecedent which plays the same role as the null word in machine translation X  it serves as a dummy generator for NPs which are unrelated to any real NP in G .

The generative process fills in all the NP nodes in order, from left to right. This process ensures that, when generating node n i , we have already filled in all the NPs in the set G (since these all precede n i ). When deciding on a generator for NP n i , we can extract features characterizing its relationship to a potential generator g j . These fea-tures, which we denote f ( n i ,g j ,D ) , may depend on their relative position in the document D , and on any features of g j , since we have already gener-ated its tree. However, we cannot extract features from the subtree under n i , since we have yet to generate it!
As usual for IBM models, we learn using EM, and we need to start our alignment function off with a good initial set of parameters. Since an-tecedents of NPs and pronouns (both salient NPs) often occur in similar syntactic environments, we use an alignment function for pronoun corefer-ence as a starting point. This alignment can be learned from raw data, making our approach un-supervised.

We take the pronoun model of Charniak and El-sner (2009) 4 as our starting point. We re-express it in the IBM framework, using a log-linear model for our alignment. Then our alignment (parame-terized by feature weights w ) is:
The weights w are learned by gradient descent on the log-likelihood. To use this model within EM, we alternate an E-step where we calculate the expected alignments E [ a i = j ] , then an M-step where we run gradient descent. (We have also had some success with stepwise EM as in (Liang and Klein, 2009), but this requires some tuning to work properly.)
As features, we take the same features as Char-niak and Elsner (2009): sentence and word-count distance between n i and g j , sentence position of each, syntactic role of each, and head type of g j (proper, common or pronoun). We add binary fea-tures for the nonterminal directly over g j (NP, VP, PP, any S type, or other), the type of phrases mod-ifying g j (proper nouns, phrasals (except QP and PP), QP, PP-of, PP-other, other modifiers, or noth-ing), and the type of determiner of g j (possessive, definite, indefinite, deictic, other, or nothing). We designed this feature set to distinguish prominent NPs in the discourse, and also to be able to detect abstract or partitive phrases by examining modi-fiers and determiners.

To produce full NPs and learn same-head coref-erence, we focus on learning a good alignment using the pronoun model as a starting point. For translation, we use a trivial model, p ( n i | g a if the two have the same head, and 0 otherwise, except for the null antecedent, which draws heads from a multinomial distribution over words.
While we could learn an alignment and then treat all generators as antecedents, so that only NPs aligned to the null antecedent were not la-beled coreferent, in practice this model would align nearly all the same-head pairs. This is true because many words are  X  X ursty X ; the prob-ability of a second occurrence given the first is higher than the a priori probability of occurrence (Church, 2000). Therefore, our model is actually a mixture of two IBM models, p C and p N , where p C produces NPs with antecedents and p N produces pairs that share a head, but are not coreferent. To break the symmetry, we allow p C to use any pa-rameters w , while p N uses a uniform alignment, w  X  ~ 0 . We interpolate between these two models with a constant  X  , the single manually set parame-ter of our system, which we fixed at . 9 .

The full model, therefore, is: p ( n i | G,D ) =  X p T ( n i | G,D ) p
T ( n i | G,D ) = p T ( n i | G,D ) =
NPs for which the maximum-likelihood gener-ator (the largest term in either of the sums) is from p
T and is not the null antecedent are marked as coreferent to the generator. Other NPs are marked not coreferent. Our results on the MUC-6 formal test set are shown in Table 1. In all experimental settings, the model improves precision over the baseline while decreasing recall X  that is, it misses some le-gitimate coreferent pairs while correctly exclud-ing many of the spurious ones. Because of the precision-recall tradeoff at which the systems op-erate, this results in reduced b 3 and link F. How-ever, for the nps and nouns settings, where the parser is responsible for finding mentions, the tradeoff is positive for the CEAF metrics. For in-stance, in the nps setting, it improves over baseline by 57%.

As expected, the model does poorly in the gold mentions setting, doing worse than baseline on both metrics. Although it is possible to get very high precision in this setting, the model is far too conservative, linking less than half of the available mentions to anything, when in fact about 60% of them are coreferent. As we explain above, this ex-perimental setting makes it mostly unnecessary to worry about non-coreferent same-head pairs be-cause the MUC-6 annotators don X  X  often mark them. While same-head pairs are easier to resolve than same-other pairs, they are still non-trivial and de-serve further attention in coreference research. To effectively measure their effect on performance, researchers should report multiple metrics, since under b 3 the link-all heuristic is extremely diffi-cult to beat. It is also important to report results using a realistic mention detector as well as gold mentions.
 We thank Jean Carletta for the S WITCHBOARD annotations, and Dan Jurafsky and eight anony-mous reviewers for their comments and sugges-tions. This work was funded by a Google graduate fellowship.
