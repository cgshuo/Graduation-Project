 Research issues and data mining techniques for product rec-ommendation and viral marketing have been widely stud-ied. Existing works on seed selection in social networks do not take into account the effect of product recommenda-tions in e-commerce stores. In this paper, we investigate the seed selection problem for viral marketing that consid-ers both effects of social influence and item inference (for product recommendation). We develop a new model, Social Item Graph (SIG) , that captures both effects in the form of hyperedges. Accordingly, we formulate a seed selection problem, called Social Item Maximization Problem (SIMP) , and prove the hardness of SIMP. We design an efficient algo-rithm with performance guarantee, called Hyperedge-Aware Greedy (HAG), for SIMP and develop a new index structure, called SIG-index, to accelerate the computation of diffusion process in HAG. Moreover, to construct realistic SIG models for SIMP, we develop a statistical inference based framework to learn the weights of hyperedges from data. Finally, we perform a comprehensive evaluation on our proposals with various baselines. Experimental result validates our ideas and demonstrates the effectiveness and efficiency of the pro-posed model and algorithms over baselines.
 viral marketing; product recommendation; frequent pattern
The ripple effect of social influence [4] has been explored for viral marketing via online social networks. Indeed, stud-ies show that customers tend to receive product informa-tion from friends better than advertisements on traditional media [19]. To explore the potential impact of social influ-ence, many research studies on seed selection , i.e., selecting a given number of influential customers to maximize the spread of social recommendation for a product, have been reported [7, 17]. 1 However, these works do not take into All the top 5 online retailers, including Amazon, Staples, Apple, Walmart, and Dell, are equipped with sophisticated recommendation engines. They also support viral marketing by allowing users to share favorite products in Facebook. account the effect of product recommendations in online e-commerce stores. We argue that when a customer buys an item due to the social influence (e.g., via Facebook or Pin-terest), there is a potential side effect due to the item in-ference recommendations from stores. 2 For example, when Alice buys a DVD of  X  X tar War X  due to the recommenda-tion from friends, she may also pick up the original novel of the movie due to an in-store recommendation, which may in turn trigger additional purchases of the novel among her friends. To the best of our knowledge, this additional spread introduced by the item inference recommendations has not been considered in existing research on viral marketing.
Figure 1 illustrates the above joint effects in a toy ex-ample with two products and four customers, where a dash arrow represents the association rule behind the item infer-ence recommendation, and a solid arrow denotes the social influence between two friends upon a product. In the two separate planes corresponding to DVD and novel, social in-fluence is expected to take effect on promoting interests in (and potential purchases of) the DVD and novel, respec-tively. Meanwhile, the item inference recommendation by the e-commerce store is expected to trigger sales of addi-tional items. Note that the association rules behind item inference are derived without considering the ripple effect of social influence. In the example, when Bob buys the DVD, he may also buy the novel due to the item inference recom-mendation. Moreover, he may influence Cindy to purchase the novel. However, the association rules behind item in-ference are derived without considering the ripple effect of social influence. On the other hand, to promote the movie DVD, Alice may be selected as a seed for a viral marketing campaign, hoping to spread her influence to Bob and David to trigger additional purchases of the DVD. Actually, due to the effect of item inference recommendation, having Alice as a seed may additionally trigger purchases of the novel by Bob and Cindy. This is a factor that existing seed selection algorithms for viral marketing do not account for.
I n this paper, we refer product/item recommendation based on associations among items inferred from purchase transactions as item inference recommendation.
W e argue that to select seeds for maximizing the spread of product information to a customer base (or maximizing the sale revenue of products) in a viral marketing campaign, both effects of item inference and social influence need to be considered. To incorporate both effects, we propose a new model, called Social Item Graph (SIG) in the form of hy-peredges, for capturing  X  X urchase actions X  of customers on products and their potential influence to trigger other pur-chase actions. Different from the conventional approaches [7, 17] that use links between customers to model social relationship (for viral marketing) and links between items to capture the association (for item inference recommenda-tion), SIG represents a purchase action as a node (denoted by a tuple of a customer and an item), while using hyper-edges among nodes to capture the influence spread process used to predict customers X  future purchases. Unlike the pre-vious influence propagation models [7, 17] consisting of only one kind of edges connecting two customers (in social in-fluence), the hyperedges in our model span across tuples of different customers and items, capturing both effects of so-cial influence and item inference.

Based on SIG, we formulate the Social Item Maximiza-tion Problem (SIMP) to find a seed set, which consists of selected products along with targeted customers, to maxi-mize the total adoptions of products by customers. Note that SIMP takes multiple products into consideration and targets on maximizing the number of products purchased by customers. 3 SIMP is a very challenging problem, which does not have the submodularity property. We prove that SIMP cannot be approximated within n c with any c &lt; 1, where n is the number of nodes in SIMP, i.e., SIMP is ex-tremely difficult to approximate with a small ratio because the best approximation ratio is almost n . 4
To tackle SIMP, two challenges arise: 1) numerous com-binations of possible seed nodes, and 2) expensive on-line computation of influence diffusion upon hyperedges. To ad-dress the first issue, we first introduce the Hyperedge-Aware Greedy (HAG) algorithm, based on a unique property of hy-peredges, i.e., a hyperedge requires all its source nodes to be activated in order to trigger the purchase action in its destination node. HAG selects multiple seeds in each seed selection iteration to further activate more nodes via hyper-edges. 5 To address the second issue, we exploit the structure of Frequent Pattern Tree (FP-tree) to develop SIG-index as a compact representation of SIG in order to accelerate the computation of activation probabilities of nodes in online diffusion.

Moreover, to construct a realistic SIG model for SIMP, we also develop a statistical inference based framework to learn the weights of hyperedges from logs of purchase ac-tions. Identifying the hyperedges and estimating the cor-responding weights are major challenges for constructing of an SIG due to data sparsity and unobservable activations. To address these issues, we propose a novel framework that employs smoothed expectation and maximization algorithm (EMS) [21], to identify hyperedges and estimate their values by kernel smoothing.
SI MP can be extended to a weighted version with differ-ent profits from each product. In this paper, we focus on maximizing the total sales.
While there is no good solution quality guarantee for the worst case scenario, we empirically show that the algorithm we developed achieves total adoptions on average compara-ble to optimal results.
A hyperedge requires all its source nodes to be activated to diffuse its influence to its destination node.
Our contributions of this paper are summarized as follows.
The rest of this paper is organized as follows. Section 2 re-views the related work. Section 3 details the SIG model and its influence diffusion process. Section 4 formulates SIMP and designs new algorithms to efficiently solve the problem. Section 5 describes our approach to construct the SIG. Sec-tion 6 reports our experiment results and Section 7 concludes the paper.
To discover the associations among purchased items, fre-quent pattern mining algorithms find items which frequently appear together in transactions [3]. Some variants, such as closed frequent patterns mining [20], maximal frequent pat-tern mining [16], have been studied. However, those existing works, focusing on unveiling the common shopping behav-iors of individuals, disregard the social influence between customers [26]. On the other hand, it has been pointed out that items recommended by item inference may have been introduced to users by social diffusion [25]. In this work, we develop a new model and a learning framework that consider both the social influence and item inference factors jointly to derive the association among purchase actions of customers. In addition, we focus on seed selection for prevalent viral marketing by incorporating the effect of item inference.
With a great potential in business applications, social in-fluence diffusion in social networks has attracted extensive interests recently [7, 17]. Learning algorithms for estimat-ing the social influence strength between social customers have been developed [10, 18]. Based on models of social in-fluence diffusion, identifying the most influential customers (seed selection) is a widely studied problem [7, 17]. Pre-cisely, those studies aim to find the best k initial seed cus-tomers to target on in order to maximize the population of potential customers who may adopt the new product. This seed selection problem has been proved as NP-hard [17]. Based on two influence diffusion models, Independent Cas-cade (IC) and Linear Threshold (LT), Kempe et al. pro-pose a 1  X  1 /e approximation greedy algorithm by exploring the submodularity property under IC and LT [17]. Some follow-up studies focus on improving the efficiency of the greedy algorithm using various spread estimation methods, e.g., MIA[7] and TIM+[24]. However, without considering the existence of item inference, those algorithms are not ap-plicable to SIMP. Besides the IC and LT model, Markov random field has been used to model social influence and cal-culate expected profits from viral marketing [9]. Recently, Tang et al. propose a Markov model based on  X  X onfluence X , which estimates the total influence by combining different sources of conformity [23]. However, these studies only con-sider the diffusion of a single item in business applications. Instead, we incorporate item inference in spread maximiza-tion to estimate the influence more accurately.
Here we first present the social item graph model and then introduce the diffusion process in the proposed model.
We aim to model user purchases and potential activations of new purchase actions from some prior. We first define the notions of the social network and purchase actions.
Definition 1. A social network is denoted by a directed graph G = ( V, E ) where V contains all the nodes and E contains all the directed edges in the graph. Accordingly, a social network is also referred to as a social graph .
Definition 2. Given a list of commodity items I and a set of customers V , a purchase action (or purchase for short), denoted by ( v, i ) where v  X  V is a customer, and i  X  I is an item, refers to the purchase of item i by cus-tomer v .

Definition 3. A purchase log is a database consisting of all the purchase actions in a given period of time.
Association-rule mining (called item inference in this pa-per) has been widely exploited to discover correlations be-tween purchases in transactions. For example, the rule { hotdog , bread } X  X  pickle } obtained from the transac-tions of a supermarket indicates that if a customer buys hotdogs and bread together, she is likely to buy pickles. To model the above likelihood, the confidence of a rule { hotdog , bread } X  X  pickle } is the proportion of the trans-actions with hotdogs and bread to those also including pick-les [12]. It has been regarded as the conditional probability that a customer buying both hotdogs and bread would trig-ger the additional purchase of pickles. To model the above rule in a graph, a possible way is to use two separate edges (see Figure 2; one from hotdog to pickle, and the other from bread to pickle, respectively), while the probability associ-ated with each of these edges is the confidence of the rule. In the above graph model, however, either one of the hot-dog or bread may trigger the purchase of pickle. This does not accurately express the intended condition of purchasing both the hotdog and bread. By contrast, the hyperedges in Graph Theory, by spanning multiple source nodes and one destination node, can model the above association rule (as illustrated in Figure 2). The probability associated with the hyperedge represents the likelihood of the purchase action denoted by the destination node when all purchase actions denoted by source nodes have happened.

On the other hand, in viral marketing, the traditional IC model activates a new node by the social influence probabil-ities associated with edges to the node. Aiming to capture both effects of item inference and social influence, we pro-pose a new Social Item Graph (SIG). SIG models the likeli-hood for a purchase (or a set of purchases) to trigger another purchase in the form of hyperedges , which may have one or multiple source nodes leading to one destination node. We define a social item graph as follows.

Definition 4. Given a social graph of customers G = ( V, E ) and a commodity item list I , a social item graph is denoted by G SI = ( V SI , E H ) , where V SI is a set of purchase actions and E H is a set of hyperedges over V SI . A node n  X  V SI is denoted as ( v, i ) , where v  X  V and i  X  I . A hyperedge e  X  E H is of the following form: Note that the conventional social influence edge in a so-cial graph with one source and one destination can still be modeled in an SIG as a simple edge associated with a corre-sponding influence probability. Nevertheless, the influence probability from a person to another can vary for different items (e.g., a person X  X  influence on another person for cos-metics and smartphones may vary.). Moreover, although an SIG may model the purchases more accurately with the help of both social influence and item inference, the complexity of processing an SIG with hyperedges is much higher than simple edges in the traditional social graph that denote only social influence.

For simplicity, let u and v (i.e., the symbols in Typewriter style) represent the nodes ( u, i ) and ( v, i ) in SIG for the rest of this paper. We also denote a hyperedge as e  X  U  X  v , where U is a set of source nodes and v is the destination node. Let the associated edge weight be p e , which represents the activation probability for v to be activated if all source nodes in U are activated. Note that the activation probability is for one single hyperedge U  X  v . Other hyperedges sharing the same destination may have different activation probabil-ities. For example, part of the source nodes in a hyperedge { a , b , c , d } X  x can still activate x , e.g., by { a , b , c a different hyperedge with its own activation probability.
Next, we introduce the diffusion process in SIG, which is inspired by the probability-based approach behind Indepen-dent Cascade (IC) to capture the word-of-mouth behavior in the real world [7]. 7 This diffusion process fits the item inferences captured in an SIG naturally, as we can derive conditional probabilities on hyperedges to describe the trig-ger (activation) of purchase actions on a potential purchase.
The diffusion process in SIG starts with all nodes inactive initially. Let S denote a set of seeds (purchase actions). Let a node s  X  S be a seed. It immediately becomes active. Given all the nodes in a source set U at iteration  X   X  1, if they are all active at iteration  X  , a hyperedge e  X  U  X  v has a chance to activate the inactive v with probability p e . Each
N otice that when u 1 = u 2 =  X  X  X  = u m = v , the hyperedge represents the item inference of item i . On the other hand, when i 1 = i 2 =  X  X  X  = i m = i , it becomes the social influence of user u on v . Several variants of IC model have been proposed [5, 6]. However, they focus on modeling the diffusion process be-tween users, such as aspect awareness [6], which is not suit-able for social item graph since the topic is embedded in each SIG node. Fi gure 3: A non-submodular example node ( v, i ) can be activated once, but it can try to activate other nodes multiple times, one for each incident hyperedges. For the seed selection problem that we target on, the total number of activated nodes represents the number of items adopted by customers (called total adoptions for the rest of this paper).
Upon the proposed Social Item Graph (SIG), we now for-mulate a new seed selection problem, called Social Item Max-imization Problem (SIMP), that selects a set of seed pur-chase actions to maximize potential sales or revenue in a marketing campaign. In Section 5, we will describe how to construct the SIG from purchase logs by a machine learning approach.

Definition 5. Given a seed number k , a list of targeted items I , and a social item graph G SI ( V SI , E H ) , SIMP se-lects a set S of k seeds in V SI such that  X  G SI ( S ) , the total adoption function of S , is maximized.

Note that a seed in SIG represents the adoption/purchase action of a specific item by a particular customer. The total adoption function  X  G SI represents the total number of prod-uct items (  X  I ) purchased. By assigning prices to products and costs to the selected seeds, an extension of SIMP is to maximize the total revenue subtracted by the cost.
Here we first discuss the challenges in solving SIMP be-fore introducing our algorithm. Note that, for the influence maximization problem based on the IC model, Kempe et al. propose a 1  X  1 /e approximation algorithm [17], thanks to the submodularity in the problem. Unfortunately, the submodularity does not hold for the total adoption function  X 
SI ( S ) in SIMP. Specifically, if the function  X  G SI ( S ) satis-fies the submodularity, for any node i and any two subsets of nodes S 1 and S 2 where S 1  X  S 2 ,  X  G SI ( S 1  X  example is illustrated below.

Example 1. Consider an SIMP instance with a cus-tomer and five items in Figure 3. Consider the case where S 1 = { u 4 } , S 2 = { u 1 , u 4 } , and i corresponds to node u . For seed sets { u 4 } , { u 2 , u 4 } , { u 1 , u 4 } and  X  2 . 9 , and  X  G SI ( { u 1 , u 2 , u 4 } ) = 4 . 4 . Thus,  X   X 
SI ( S 1 ) = 1 &lt; 1 . 5 =  X  G SI ( S 2 the submodularity does not hold.

Since the submodularity does not exist in SIMP, the 1  X  1 /e approximation ratio of the greedy algorithm in [17] does not hold. Now, an interesting question is how large the ratio becomes. Example 2 shows an SIMP instance where the greedy algorithm performs poorly.

Example 2. Consider an example in Figure 4, where nodes v 1 , v 2 ,..., v M all have a hyperedge with the probabil-ity as 1 from the same k sources u 1 , u 2 ,..., u k , and  X  is an arbitrarily small edge probability  X  &gt; 0 . The greedy al-gorithm selects one node in each iteration, i.e., it selects u , u  X  2 ... u  X  k as the seeds with a total adoption k + k X  . How-ever, the optimal solution actually selects u 1 , u 2 ,..., u
Figure 5: An illustration of graph transformations the seeds and results in the total adoption M + k . There-fore, the approximation ratio of the greedy algorithm is at least ( M + k ) / ( k + k X  ) , which is close to M/k for a large M , where M could approach | V SI | in the worst case.
One may argue that the above challenges in SIMP may be alleviated by transforming G SI into a graph with only sim-ple edges, as displayed in Figure 5, where the weight of every u  X  v ) with u i  X  U can be set independently. However, if a source node u m  X  U of v is difficult to activate, the prob-ability for v to be activated approaches zero in Figure 5 (a) due to u m . However, in Figure 5 (b), the destination v is inclined to be activated by sources in U , especially when U is sufficiently large. Thus, the idea of graph transformation does not work. Here, we propose an algorithm for SIMP, Hyperedge-Aware Greedy (HAG) , with performance guarantee. The approximation ratio is proved in Section 4.3. A hyperedge requires all its sources activated first in order to activate the destination. Conventional single node greedy algorithms perform poorly because hyperedges are not considered. To address this important issue, we propose Hyperedge-Aware Greedy (HAG) to select multiple seeds in each iteration.
A naive algorithm for SIMP would examine C | V SI | k combi-nations to choose k seeds. In this paper, as all source nodes of a hyperedge need to be activated in order to activate its destination, an effective way is to consider only the combi-nations which include the source nodes of any hyperedge. We call the source nodes of a hyperedge as a source combi-nation . Based on this idea, in each iteration, HAG includes the source combination leading to the largest increment on total adoption divided by the number of new seeds added in this iteration . Note that only the source combinations with no more than k sources are considered. The iteration con-tinues until k seeds are selected. Note that HAG does not restrict the seeds to be the source nodes of hyperedges. In-stead, the source node u of any simple edge u  X  v in SIG is also examined.
 Complexity of HAG. To select k seeds, HAG takes at most k rounds. In each round, the source combinations of | E
H | hyperedges are tried one by one, and the diffusion cost is c dif , which will be analyzed in Section 4.2. Thus, the time complexity of HAG is O ( k  X | E H | X  c dif ).
To estimate the total adoption for a seed set, it is neces-sary to perform Monte Carlo simulation based on the diffu-sion process described in Section 3.2 for many times. Find-ing the total adoption is very expensive, especially when a node v can be activated by a hyperedge with a large source set U , which indicates that there also exist many other hy-peredges with an arbitrary subset of U as the source set to activate v . In other words, enormous hyperedges need to be examined for the diffusion on an SIG. It is essential to reduce the computational overhead. To address this issue, we pro-pose a new index structure, called SIG-index , by exploiting FP-Tree [12] to pre-process source combinations in hyper-edges in a compact form in order to facilitate efficient deriva-tion of activation probabilities during the diffusion process.
The basic idea behind SIG-index is as follows. For each node v with the set of activated in-neighbors N a v , X  in iteration  X  , if v has not been activated before  X  , the diffusion process will try to activate v via every hyperedge U  X  v where the last source in U has been activated in iteration  X   X  1. To derive the activation probability of a node v from the weights of hyperedges associated with v , we first define the activation probability as follows.

Definition 6. The activation probability of v at  X  is where N v , X   X  1 and N v , X   X  2 denote the set of active neighbors of v in iteration  X   X  1 and  X   X  2 , respectively. The operations on an SIG-index occur two phases: Index Creation Phase and Diffusion Processing Phase. As all hy-peredges satisfying Definition 6 must be accessed, the SIG-index stores the hyperedge probabilities in Index Creation Phase. Later, the SIG-index is updated in Diffusion Pro-cessing Phase to derive the activation probability efficiently.
Index Creation Phase. For each hyperedge U  X  v , we first regard each source combination U = { v 1 , ... v as a transaction to build an FP-tree [12] by setting the minimum support as 1. As such, v 1 , ... v | U | forms a path r  X  v 1  X  v 2 ...  X  v | node v | U | in U . Different from the FP-Tree, the SIG-index associates the probability of each hyperedge U  X  v with the last source node v | U | in U . 8 Initially, the probability associ-ated with the root r is 0. Later the SIG-index is updated during the diffusion process. Example 3 illustrates the SIG-index created based on an SIG.

Example 3. Consider an SIG graph with five nodes, v -v 5 , and nine hyperedges with their associated probabil-ities in parentheses: { v 1 } X  v 5 (0.5), { v 1 , v 2 } X  v (0.4), { v 1 , v 2 , v 3 } X  v 5 (0.2), { v 1 , v 2 , v 3 , v { v 1 , v 3 } X  v 5 (0.3), { v 1 , v 3 , v 4 } X  v 5 (0.2), { v (0.2), { v 2 , v 3 , v 4 } X  v 5 (0.1), { v 2 , v 4 } X  v 5 (a) shows the SIG-index initially created for node v 5 .
Diffusion Processing Phase. The activation probabil-ity in an iteration is derived by traversing the initial SIG-index, which takes O ( | E H | ) time. However, a simulation may iterate a lot of times. To further accelerate the travers-ing process, we adjust the SIG-index for the activated nodes in each iteration. More specifically, after a node v a is ac-tivated, accessing an hyperedge U  X  v with v a  X  U be-comes easier since the number remaining inactivated nodes in U  X  X  v a } is reduced. Accordingly, SIG-index is modified by traversing every vertex labeled as v a on the SIG-index in the following steps. 1) If v a is associated with a probability
F or ease of explanation, we assume the order of nodes in the SIG-index follows the ascending order of subscript. p , it is crucial to aggregate the old activation probabilities p of v a and p p of its parent v p , and update activation prob-ability associated with v p as 1  X  (1  X  p a )(1  X  p p ), since the source combination needed for accessing the hyperedges as-sociated with v a and v p becomes the same. The aggregation is also performed when v p is r . 2) If v a has any children c , the parent of c is changed to be v p , which removes the pro-cessed v a from the index. 3) After processing every node v in the SIG-index, we obtain the activation probability of v in the root r . After the probability is accessed for activating v , the probability of r is reset to 0 for next iteration.
Example 4. Consider an example with v 2 activated in an iteration. To update the SIG-index, each vertex v 2 in Figure 6 (a) is examined by traversing the linked list of v First, the left vertex with label v 2 is examined. SIG-index reassigns the parent of v 2  X  X  child (labeled as v 3 ) to the vertex labeled as v 1 , and aggregate the probability 0.4 on the v 0.5 on vertex v 1 , since the hyperedge { v 1 , v 2 } X  v 5 accessed if the node v 1 is activated later. The probability of v becomes 1  X  (1  X  p v 1 )(1  X  p v 2 ) = 0 . 7 . Then the right vertex with label v 2 is examined. The parent of its two children is reassigned to the root r . Also, the probability of itself (0.2) is aggregated with the root r , indicating that the activation probability of node v 5 in the next iteration is 0.2. Complexity Analysis. For Index Creation Phase, the initial SIG-index for v is built by examining the hyperedges two times with O ( | E H | ) time. The number of vertices in SIG-index is at most O ( c d | E H | ), where c d is the number of source nodes in the largest hyperedge. During Diffusion Processing Phase, each vertex in SIG-index is examined only once through the node-links, and the parent of a vertex is changed at most O ( c d ) times. Thus, the overall time to complete a diffusion requires at most O ( c d | E H | ) time.
From the discussion earlier, it becomes obvious that SIMP is difficult. In the following, we will prove that SIMP is inap-proximable with a non-constant ratio n c for all c &lt; 1, with a gap-introducing reduction from an NP-complete problem 3-SAT to SIMP, where n is the number of nodes in an SIG. Note that the theoretical result only shows that for any algo-rithm, there exists a problem instance of SIMP (i.e., a pair of an SIG graph and a seed number k ) that the algorithm can not obtain a solution better than 1 /n times the optimal solution. It does not imply that an algorithm always per-forms badly in every SIMP instance. Later in Section 6.3, we empirically show that the total adoption obtained by HAG is comparable to the optimal solution.

Lemma 1. For a positive integer q , there is a gap-introducing reduction from 3-SAT to SIMP, which trans-forms an n var -variables expression  X  to an SIMP instance with the SIG as G SI ( V SI , E H ) and the k as n var such that  X  if  X  is satisfiable,  X   X  G SI  X  ( m cla + 3 n var ) q , and  X  if  X  is not satisfiable,  X   X  G SI &lt; m cla + 3 n var , where  X   X  G SI is the optimal solution of this instance, n the number of Boolean variables, and m cla is the number of clauses. Hence there is no ( m cla + 3 n var ) q  X  1 approximation algorithm for SIMP unless P = NP.

Proof. Given a positive integer q , for an instance  X  of 3-SAT with n var Boolean variables a 1 , . . . , a n var and m clauses C 1 , . . . , C m cla , we construct an SIG G SI with three node sets X , Y and Z as follows. 1) Each Boolean variable a corresponds to two nodes x i , x i in X an d one node y i Y . 2) Each clause C k corresponds to one node c k in Y . 3) Z has ( | X | + | Y | ) q nodes. (Thus, G SI has ( m cla + 3 n
Fig ure 7: An illustration instance built for 3-SAT m cla + 3 n var nodes.) 4) For each y j in Y , we add direct edges x j  X  y j and x j  X  y j . 5) For each c k in Y , we add direct edges  X   X  c k ,  X   X  c k and  X   X  c k , where  X  ,  X  ,  X  are the nodes in X corresponding to the three literals in C 6) We add a hyperedge Y  X  z v from all for every z v  X  Z . The probability of every edge is set to 1. An example is illustrated in Figure 7.

We first prove that  X  is satisfiable if and only if G SI has a seed set S with n var seeds and the total adoption of S contains Y . If  X  is satisfiable, there exists a truth assignment  X  . Let S = { x i | T ( a i ) = 1 } X  X  x j | T ( a j ) = 0 n var nodes and the total adoption of S contains Y . On the other hand, if  X  is not satisfiable, apparently there exists no seed set S with exactly one of x i or x i se lected for every i such that the total adoption of S contains Y . For other cases, 1) all seeds are placed in X , but there exists at least one i with both x i and x i selec ted. In this case, there must exist some j such that none of x j or x j are selcted (since the seed number is n var ), and thus Y is not covered by the total adoption of S . 2) A seed is placed in Y . In this case, the seed can be moved to an adjacent x i without reducing the total adoption. Nevertheless, as explained above, there exists no seed set S with all seeds placed in X such that the total adoption of S contains Y , and thus the total adoption of any seed set with a seed placed in Y cannot cover Y , either. With above observations, if  X  is not satisfiable, G SI does not have a seed set S with n var seeds such that the total adoption of S contains Y . Since the nodes of Z can be activated if and only if the total adoption of S contains Y if and only if  X  is satisfiable, we have  X  if  X  is satisfiable,  X   X  G SI  X  ( m cla + 3 n var ) q , and  X  if  X  is not satisfiable,  X   X  G SI &lt; m cla + 3 n var . The lemma follows.

The orem 1. For any  X  &gt; 0 , there is no n 1  X   X  approxima-tion algorithm for SIMP, assuming P  X  = NP.
 Proof. For any arbitrary  X  &gt; 0, we set q  X  2  X  . Then, by Lemma 1, there is no ( m cla +3 n var ) q  X  1 approximation algo-rithm for SIMP unless P = NP. Then ( m cla + 3 n var ) q  X  3 n any  X  &gt; 0, there is no n 1  X   X  approximation algorithm for SIMP, assuming P  X  = NP. The theorem follows.

The orem 2. HAG with SIG-index is n -approximated, where n is the number of nodes in SIG.

Proof. First, we prove that SIG-index obtains ap v , X  cor-rectly. Assume that there exists an incorrect ap v , X  , i.e., there exists an hyperedge U  X  v satisfying the conditions in Defi-is not aggregated to r in  X  . However, the probability can not be aggregated before  X  since U * N v, X   X  2 and it must be aggregated no later than  X  since U  X  N v , X   X  1 . There is a contradiction.

Proving that HAG with SIG-index is an n -approximation algorithm is simple. The upper bound of total adoption for the optimal algorithm is n , while the lower bound of the total adoption for HAG is 1 because at least one seed is selected. In other words, designing an approximation algorithm for SIMP is simple, but it is much more difficult to have the hardness result for SIMP, and we have proven that SIMP is inapproximable within n 1  X   X  for any arbitrarily small  X  .
Cor ollary 1. HAG with SIG-index is n -approximated, where n is the number of nodes in SIG, because SIG-index only improves the efficiency.
To select seeds for SIMP, we need to construct the SIG from purchase logs and the social network. We first create possible hyperedges by scanning the purchase logs. Let  X  be the timestamp of a given purchase v = ( v, i ). v  X  X  friends purchase and her own purchases that have happened within a given period before  X  are considered as candidate source nodes to generate hyperedges to v . For each hyperedge e , the main task is then the estimation of its activation probability p . Since p e is unknown, it is estimated by maximizing the likelihood function based on observations in the purchase logs. Note that learning the activation probability p e for each hyperedge e faces three challenges.
 C1. Unknown distribution of p e . How to properly model p e is critical.
 C2. Unobserved activations. When v is activated at time  X  , this event only implies that at least one hyper-edge successfully activates v before  X  . It remains unknown which hyperedge(s) actually triggers v , i.e., it may be caused by either the item inference or social influence or both. Therefore, we cannot simply employ the confidence of an association-rule as the corresponding hyperedge probability. C3. Data sparsity. The number of activations for a user to buy an item is small, whereas the number of possible hy-peredge combinations is large. Moreover, new items emerge every day in e-commerce websites, which incurs the notori-ous cold-start problem. Hence, a method to deal with the data sparsity issue is necessary to properly model an SIG.
To address these challenges, we exploit a statistical infer-ence approach to identify those hyperedges and learn their weights. In the following, we first propose a model of the edge function (to address the first challenge) and then ex-ploit the smoothed expectation and maximization (EMS) algorithm [21] to address the second and third challenges.
To overcome the first challenge, one possible way is to model the number of success activations and the number of unsuccessful activations by the binomial distributions. As such, p e is approximated by the ratio of the number of suc-cess activations and the number of total activation trials. However, the binomial distribution function is too complex for computing the maximum likelihood of a vast number of data. To handle big data, the previous study reported [14] that the binomial distribution ( n, p ) can be approximated by the Poisson distribution  X  = np when the time dura-tion is sufficiently large. According to the above study, it is assumed that the number of activations of a hyperedge e follows the Poisson distribution to handle the social in-fluence and item inference jointly. The expected number of ev ents equals to the intensity parameter  X  . Moreover, we use an inhomogeneous Poisson process defined on the space of hyperedges to ensure that p e varies with different e .
In the following, a hyperedge is of size n , if the cardinality of its source set U is n . We denote the intensity of the number of activation trials of the hyperedge e as  X  T ( e ). Then the successful activations of hyperedge e follows another Poisson process where the intensity is denoted by  X  A ( e ). Therefore, the hyperedge probability p e can be derived by parameters  X  ( e ) and  X  T ( e ), i.e., p e =  X  A ( e )  X 
The maximum likelihood estimation can be employed to derive  X  T ( e ). Nevertheless,  X  A ( e ) cannot be derived as ex-plained in the second challenge. Therefore, we use the ex-pectation maximization (EM) algorithm, which is an ex-tension of maximum likelihood estimation containing latent variables to  X  A ( e ) which is modeled as the latent variable. Based on the observed purchase logs, the E-step first derives the likelihood Q-function of the parameter p e with  X  A ( e ) as the latent variables. In this step, the purchase logs and p are given to find the probability function describing that all events on e in the logs occur according to p e , whereas the probability function (i.e., Q-function) explores different possible values on latent variable  X  A ( e ). Afterward, The M-step maximizes the Q-function and derives the new p e for E-Step in the next iteration. These two steps are iterated until convergence.

With the employed Poisson distribution and EM algo-rithm, data sparsity remains an issue. Therefore, we further exploit a variant of EM algorithm, called EMS algorithm [21], to alleviate the sparsity problem by estimating the in-tensity of Poisson process using similar hyperedges . The parameter smoothing after each iteration is called S-Step, which is incorporated in EMS algorithm, in addition to the existing E-Step and M-Step.
Let p e and  X  p e denote the true probability and estimated probabilities for hyperedge e in the EMS algorithm, respec-tively, where e = U  X  v . Let N U and K e denote the num-ber of activations of source set U in the purchase logs and the number of successful activations on hyperedge e , respec-tively. The EM algorithm is exploited to find the maximum likelihood of p e , while  X  A ( e ) is the latent variable because K cannot be observed (i.e., only N U can be observed). There-fore, E-Step derives the likelihood function for { p e } (i.e., the Q-function) as follows, where  X  p ( i  X  1) e is the hyperedge probability derived in the pre-vious iteration. Note that N U and p ( i  X  1) e are given pa-rameters in iteration i , whereas p e is a variable in the Q-function, and K e is a random variable governed by the dis-and  X  A ( e ), we derive the likelihood P ( K e , N U | p It is assumed that { K e } is independent with { N U } , and Q ( p e ,  X  p ( i  X  1) e ) can be derived as follows:  X  Since only the first term contains the hidden K e , only this term varies in different iterations of the EMS algorithm, be-cause { N U } U  X  V SI in the second term always can be derived by finding the maximum likelihood as follows. Let p U,k de-note the probability that the source set U exactly tries to ac-tivate the destination node k times, i.e., p U,k = P { N U The log-likelihood of  X  T is =  X   X  T + (ln  X  T ) We acquire the maximum likelihood by finding the derivative with regard to  X  T : Thus, the maximum log-likelihood estimation of  X  T =  X  k kp U,k , representing that the expected activation times set, where each log ( v ,  X  ) represents that v is activated at time  X  . N U is calculated by scanning A and find the times that all the nodes in U are activated.

Afterward, we focus on the first term of Q ( p e ,  X  p ( i p e,k = P { K e = k } denote the probability that the hyperedge e exactly activates the destination node k times. In E-step, we first find the expectation for K e as follows.  X  = = =
Since 1, the log-likelihood of the first term is further simplified as Afterward, M-step maximizes the Q-function by finding the derivative with regard to p e : Therefore, the maximum likelihood estimator  X  p e is E [ K  X   X  ( U ) is N U , and  X   X  A ( e ) = E [ K e ].

The problem remaining is to take expectation of the la-the conditional probability that v is activated by the source set U of e at  X  given v is activated at  X  , and let E a de-note the set of candidate hyperedges containing every pos-sible e with its source set activated at time  X   X  1, i.e., E { ( u 1 , u 2 ,  X  X  X  , u n )  X  v i | X  i = 1 ,  X  X  X  , n, u i  X  A} . It X  X  easy to show that given the estimation of the probability of hyperedges, w e,a = ^ p e 1  X   X  1  X  vated by any hyperedge at time  X  . The expectation of K of each successful activation of v from hyperedge e , and E
H,n = { ( u 1 , u 2 ,  X  X  X  , u n ; v )  X  E H } contains all size n hy-peredges.

To address the data sparsity problem, we leverage infor-mation from similar hyperedges (described later). There-fore, our framework includes an additional step to smooth the results of M-Step. Kernel smoothing is employed in S-Step. In summary, we have the following steps: E-Step :
M-St ep:
S-Step : To address the data sparsity problem, we lever-age information from similar hyperedges (described later). Therefore, in addition to E-Step and M-Step, EMS in-cludes S-Step , which smooths the results of M-Step. Kernel smoothing is employed in S-Step as follows: where L h is a kernel function with bandwidth h , and F is the mapping function of hyperedges, i.e., F ( e ) maps a hy-peredge e to a vector. The details of dimension reduction for calculating F to efficiently map hyperedges into Euclidean space are shown in [2] due to space constraint. If the hyper-edges e and e  X  are similar, the distance of the vectors F ( e ) and F ( e  X  ) is small. Moreover, a kernel function L h ( x ) is a positive function symmetric at zero which decreases when | x | increases, and the bandwidth h controls the extent of auxiliary information taken from similar hyperedges. 9 Intu-itively, kernel smoothing can identify the correlation of  X  p with e 1 = U 1  X  v 1 and  X  p e 2 with e 2 = U 2  X  v 2 for nearby v and v 2 and similar U 1 and U 2 .
We conduct comprehensive experiments to evaluate the proposed SIG model, learning framework and seed selection algorithms. In Section 6.1, we discuss the data preparation for our evaluation. In Section 6.2, we compare the predictive power of the SIG model against two baseline models: i) in-dependent cascade model learned by implementing Variance Regularized EM Algorithm (VAREM) [18] and ii) the gener-alized threshold (GT) model learned by [11]. 10 In addition, we evaluate the learning framework based on the proposed EM and EMS algorithms. Next, in Section 6.3, we evalu-ate the proposed HAG algorithm for SIMP in comparison to a number of baseline strategies, including random, sin-gle node selection, social, and item approaches. Finally, in
A symmetric Gaussian kernel function is often used [13]. http://people.cs.ubc.ca/  X welu/downloads.html Section 6.4, we evaluate alternative approaches for diffusion processing, which is essential and critical for HAG, based on SIG-index, Monte Carlo simulations and sorting enhance-ment.
Here, we conduct comprehensive experiments using three real datasets to evaluate the proposed ideas and algorithms. The first dataset comes from Douban [1], a social networking website allowing users to share music and books with friends. Dataset Douban contains 5 , 520 , 243 users and 86 , 343 , 003 friendship links, together with 7 , 545 , 432 (user, music) and 14 , 050 , 265 (user, bookmark) pairs, representing the music noted and the bookmarks noted by each user, respectively. We treat those (user, music) and (user, bookmark) pairs as purchase actions. In addition to Douban , we adopt two pub-lic datasets, i.e., Gowalla and Epinions . Dataset Gowalla contains 196 , 591 users, 950 , 327 links, and 6 , 442 , 890 check-ins [8]. Dataset Epinions contains 22 , 166 users, 335 , 813 links, 27 categories of items, and 922 , 267 ratings with times-tamp [22]. Notice that we do not have data directly reflect-ing item inferences in online stores, so we use the purchase logs for learning and evaluations. The experiments are im-plemented on an HP DL580 server with 4 Intel Xeon E7-4870 2.4 GHz CPUs and 1 TB RAM.

We split all three datasets into 5-fold, choose one subsam-ple as training data, and test the models on the remaining subsamples. Specifically, we ignore the cases when the user and her friends did not buy anything. Finally, to evalu-ate the effectiveness of the proposed SIG model (and the learning approaches), we obtain the purchase actions in the following cases as the ground truth: 1) item inference -a user buys some items within a short period of time, and 2) social influence -a user buys an item after at least one of her friends bought the item. The considered periods of item inference and social influence are set differently according to [15] and [27], respectively. It is worth noting that only the hyperedges with the probability larger than a threshold pa-rameter  X  are considered. We empirically tune  X  to obtain the default setting based on optimal F1-Score. Similarly, the threshold parameter  X  for the GT model is obtained empirically. The reported precision, recall, and F1 are the average of these tests. Since both SIGs and the independent cascade model require successive data, we split the datasets into continuous subsamples. Tables 1 present the precision, recall, and F1 of SIG, VAREM and GT on Douban , Gowalla , and Epinions . All three models predict most accurately on Douban due to the large sample size. The SIG model significantly outperforms the other two models on all three datasets, because it takes into account both effects of social influence and item in-ference, while the baseline models only consider the social influence. The difference of F1 score between SIG and base-lines is more significant on Douban , because it contains more items. Thus, item influence plays a more important role. Also, when the user size increases, SIG is able to extract more social influence information leading to better perfor-mance than the baselines. The offline training time is 1.68, 1.28, and 4.05 hours on Epinions , Gowalla , Douban , respec-tively.

To evaluate the approaches adopted to learn the activation probabilities of hyperedges for construction of SIG, Fig. 8 compares the precision and F1 of EMS and EM algorithms on Epinions (results on other datasets are consistent and Figure 8: Comparisons of precision and F1 in various  X  and h on Epinions thus not shown due to space limitation). Note that EM is a special case of EMS (with the smoothing parameter h = 0, i.e., no similar hyperedge used for smoothing). EMS outper-forms EM on both precision and F1-score in all settings of  X  (the maximum size of hyperedges) and h tested. Moreover, the precision and F1-score both increases with h as a larger h overcomes data sparsity significantly. As  X  increases, more combinations of social influence and item inference can be captured. Therefore, the experiments show that a higher  X  improves F1-score without degrades the precision. It mani-fests that the learned hyperedges are effective for predicting triggered purchases.
We evaluate HAG proposed for SIMP, by selecting top 10 items as the marketing items to measure their total adop-tion, in comparison with a number of baselines: 1) Random approach (RAN) . It randomly selects k nodes as seeds. Note that the reported values are the average of 50 random seed sets. 2) Single node selection approach (SNS) . It selects a node with the largest increment of the total adoption in each iteration, until k seeds are selected, which is widely employed in conventional seed selection problem [6, 7, 17]. 3) Social approach (SOC) . It only considers the social influ-ence in selecting the k seeds. The hyperedges with nodes from different products are eliminated in the seed selection process, but they are restored for calculation of the final to-tal adoption. 4) Item approach (IOC) . The seed set is the same as HAG, but the prediction is based on item inference only. For each seed set selected by the above approaches, the diffusion process is simulated 300 times. We report the average in-degree of nodes learned from the three datasets in the following: Douban is 39.56; Gowalla is 9.90; Epinions is 14.04. In this section, we evaluate HAG by varying the num-ber of seeds (i.e., k ) using two metrics: 1) total adoption, and 2) running time.

To understand the effectiveness, we first compared all those approaches with the optimal solution (denoted as OPT) in a small subgraph sampled, Sample , from the SIG of Douban with 50 nodes and 58 hyperedges. Figures 9 (a) dis-plays the total adoption obtained by different approaches. As shown, HAG performs much better than the baselines and achieves comparable total adoption with OPT (the dif-ference decreases with increased k). Note that OPT is not scalable as shown in Figures 9 (b) since it needs to examine all combination with k nodes. Also, OPT takes more than Figure 9: Total adopting and running time of Sample in various k Figure 10: Total adoption  X  G SI and running time in various k 1 day for selecting 6 seeds in Sample . Thus, for the rest of experiments, we exclude OPT.

Figures 10 (a)-(c) compare the total adoptions of different approaches in the SIG learned from real networks. They all grow as k increases, since a larger k increases the chance for seeds to influence others to adopt items. Figure 10 (a)-(c) manifest that HAG outperforms all the other baselines for any k in SIG model. Among them, SOC fails to find good solutions since item inference is not examined during seed selection. IOC performs poorly without considering social influence. SNS only includes one seed at a time without con-sidering the combination of nodes that may activate many other nodes via hyperedges.

Figure 10 (d) reports the running time of those ap-proaches. Note that the trends upon Gowalla and Epin-ions are similar with Douban . Thus we only report the run-ning time of Douban due to the space constraint. Taking the source combinations into account, HAG examines source combinations of hyperedges in E H and obtains a better solu-tion by spending more time since the number of hyperedges is often much higher than the number of nodes.
Diffusion processing is an essential operation in HAG. We evaluate the efficiency of diffusion processing based on SIG-index (denoted as SX), in terms of the running time, in comparison with that based on the original Monte Carlo simulation (denoted as MC) and the sorting enhancement Figure 11: Running time of different simulation methods (denoted as SORTING), which accesses the hyperedges in descending order of their weights. Figure 11 plots the run-ning time of SX, SORTING, and MC under various k using the Douban , Gowalla , and Epinions . For each k , the av-erage running times of 50 randomly selected seed sets for SX, SORTING, and MC, are reported. The diffusion pro-cess is simulated 300 times for each seed set. As Figure 11 depicts, the running time for all the three approaches grows as k increases, because a larger number of seeds tends to increase the chance for other nodes to be activated. Thus, it needs more time to diffuse. Notice that SX takes much less time than SORTING and MC, because SX avoids ac-cessing hyperedges with no source nodes newly activated while calculating the activation probability. Moreover, the SIG-index is updated dynamically according to the activated nodes in diffusion process. Also note that the improvement by MC over SORTING in Douban is more significant than that in Gowalla and Epinions , because the average in-degree of nodes is much larger in Douban . Thus, activating a des-tination at an early stage can effectively avoid processing many hyperedges later.
In this paper, we argue that existing techniques for item inference recommendation and seed selection need to jointly take social influence and item inference into consideration. We propose Social Item Graph (SIG) for capturing purchase actions and predicting potential purchase actions. We pro-pose an effective machine learning approach to construct an SIG from purchase action logs and learn hyperedge weights. We also develop efficient algorithms to solve the new and challenging Social Item Maximization Problem (SIMP) that effectively select seeds for marketing. Experimental results demonstrate the superiority of the SIG model over existing models and the effectiveness and efficiency of the proposed algorithms for processing SIMP. We also plan to further ac-celerate the diffusion process by indexing additional infor-mation on SIG-index. [1] The Douban dataset download. [2] When social influence meets association rule learning. [3] R. Agrawal, T. Imielinski, and A. N. Swami. Mining [4] R. M. Bond, C. J. Fariss, J. J. Jones, A. D. Kramer, [5] S. Bourigault, S. Lamprier, and P. Gallinari. [6] S. Chen, J. Fan, G. Li, J. Feng, K. Tan, and J. Tang. [7] W. Chen, C. Wang, and Y. Wang. Scalable influence [8] E. Cho, S. A. Myers, and J. Leskovec. Friendship and [9] P. Domingos and M. Richardson. Mining the network [10] A. Goyal, F. Bonchi, and L. V. S. Lakshmanan. [11] A. Goyal, W. Lu, and L. V. S. Lakshmanan.
 [12] J. Han, M. Kamber, and J. Pei. Data Mining: [13] N. L. Hjort and M. C. Jones. Locally parametric [14] R. V. Hogg and E. A. Tanis. Probability and statistical [15] R. Jones and K. Klinkner. Beyond the session [16] R. J. B. Jr. Efficiently mining long patterns from [17] D. Kempe, J. M. Kleinberg, and  X  E. Tardos. [18] H. Li, T. Cao, and Z. Li. Learning the information [19] J. Nail. The consumer advertising backlash, 2004. [20] N. Pasquier, Y. Bastide, R. Taouil, and L. Lakhal. [21] B. W. Silverman, M. C. Jones, J. D. Wilson, and [22] J. Tang, H. Gao, H. Liu, and A. D. Sarma. etrust: [23] J. Tang, S. Wu, and J. Sun. Confluence: conformity [24] Y. Tang, X. Xiao, and Y. Shi. Influence maximization: [25] H. Vahabi, I. K. F. Gullo, and M. Halkidi. Difrec: A [26] Z. Wen and C.-Y. Lin. On the quality of inferring [27] J. Yang and J. Leskovec. Modeling information
