 Ohio Center of Excellence in Knowledge-enabled Computing (Kno.e.sis), Department of Computer Science and Engineering, Wright State University, Dayton, OH 45435, USA Tel.: +1 937 775 4642; E-mail: keke.chen@wright.edu 1. Introduction
With widely deployed internet applications, sensor networks, and various data collection tools, the size of dataset is growing fast. By incorporating users into the analysis loop, interactive visual data analysis has become the most effective exploratory data analysis method for discovering useful informa-shown unique advantages in visually validating algorithmic clustering results, understanding clusters with domain knowledge, and interactively refining cluster definitions for multidimensional data [5,18, 19,22].

Compared to other multidimensional visualization methods, such as scatter-plot matrix [3] and parallel coordinates [18], star-coordinate models [5,19] are probably the most scalable technique for visualizing large datasets. Scalability here refers to both visual representation and data processing. 1. In spite of different underlying mapping models for star coordinates, such as the Kandogan 2. The star-coordinate visualization can scale up to many points, with the help of density-based repre-3. Most importantly, star-coordinate based cluster visualization does not try to calculate pairwise
There are two important design principles for star-coordinate based cluster exploration. (1) The visu-result as a frame, because the visual distortion is unavoidable when data is projected data from multidi-mensional space to two-dimensional display. Typically, data clusters are preserved, but they may overlap each other in the visualization. (2) It depends on visual parameter tuning to identify the overlapping in multiple frames. Thus, effective visual and interactive design is required for users to efficient identify the visual overlapping. We believe that effective visual and interactive design is fundamentally related to the underlying mathematical models.

Processing big data 1 puts different requirements on the visual and interactive design. If the system is working on small datasets, for instance, with tens of thousands of records, as shown with current prototypes [5], users X  interactions to adjust the visualization can result in almost instant visualization updates. Because of the small size of data, a single workstation can guarantee low response time. However, in the emerging era of big data, the size of data can grow to terabytes, petabytes, or even larger, which cannot be handled by a single workstation. Massive parallel processing infrastructures such as Hadoop/MapReduce [25] have to be used to process data, which are often stored remotely in the cloud [2]. As a result, new algorithms/systems have to generate visual frames with a balance on high-throughput and low-latency. For instance, a batch-interaction model proposed by our recent work [7] can be applied to address this balance, where batches of visual frames are generated in the cloud and the desired interactivity and the latency caused by remotely processing big data.

As visual frames are generated remotely, the system cannot afford to generate too many low-quality frames, which previously could be simply ignored or easily corrected by user X  X  interactions in a lo-cal system. Thus, optimizing the visualization models to generate quality visualizations and minimize unnecessary interactions is critical to effective visual exploration of remote big data.
In this paper, we study the mathematical underpinnings of the star-coordinate systems and empirically evaluate the visual performance of different model settings to find the optimal design of star-coordinate models. With the optimal modeling setting, the user now can find more details or clues of clustering structure with higher-quality cluster visualization and less interactions.

This paper consists of two components. The first part focuses on formal analysis of the typical star-coordinate models: the Kandogan model [19] and the VISTA model [5], and unifies them to a single representation. Based on the unified model, we describe the major interactive methods that help find visual cluster overlapping. By analyzing the statistical properties of randomly generated visualization visual exploration. This property also helps the design of the batch-frame processing algorithm RandGen for processing big data in the cloud.

The second part is focused on the experimental study of parameter settings. We design a set of sta-tistical measures to quantify the effectiveness of a dynamically changing cluster visualization, and an algorithm to collect the data and calculate these measures. Concretely, we use Coverage to represent the effectiveness of use of visualization space, Purity to represent whether visualization results in cluster overlapping, and Out-of-area Rate to describe the need of additional adjustment opera-tions. A grid-based data structure is developed to collect the information from dynamically changing visualization, which is then used to calculate the measures. Experimental results support our analysis on the optimal parameter setting.
The rest of the paper is organized as follows. In Section 2, we briefly review the related visualization techniques for exploratory visual cluster analysis. In Section 3, we study the features of star-coordinate based models in the unified model and also develop the intuition for parameter settings. In Section 4, we propose a set of statistical measures based on the micro-structure of visualization for experimental evaluation, and design a procedure for collecting these measures. Finally, we present the experiments on parameter settings, based on the proposed measures and the data collecting procedure. 2. Related work
Interactive multidimensional data visualizatio n is commonly recognized a s a useful method for un-derstanding the sophistication in datasets. As an important subarea of data cluster analysis, interactive cluster visualization plays an important role in visually validating and refining the clusters in multidi-mensional datasets [5,21].
 fundamentally an iterative exploration process. There is no one algorithm, similarity measure, or param-the application requirements best. (2) Users often have domain knowledge that can guide cluster anal-ysis, and thus need a tool to conveniently incorporate the domain knowledge. (3) Clustering structures might be very irregular (e.g., non-spherical or some kind of manifolds), which need users to understand, validate, and refine, where visualization can be convenient.

Many efforts have been made to visualize clusters. The early research on plot-based data visualization is Grand Tour and Projection Pursuit [9]. Since there are numerous projections from a multidimensional data space to a 2D space, the purpose of the Grand Tour and the Project Pursuit is to guide the user to continuous change of visualization. Yang [26] extends the Grand Tour technique to show projections in an animation.

The VISTA system [5] has shown that interpolation of visualizations might not be necessary that user cluster visualization. Star-coordinate based models [5,17,19,22] in general, including the VISTA model, are particularly good for cluster visualization for the simplicity of model and the convenience of inter-action design. In particular, linear mapping models are often used in these systems, which satisfies the performance requirement of visualizing very large datasets.

Other density-based visualization systems include HD-Eye [16] and OPTICS [1]. OPTICS works well in finding the 1D sketch of arbitrarily shaped clusters. However, 1D visualization provides less information and less flexibility than 2D visualization such as the star-coordinates based models. Most other visualization techniques, such as Scatterplot matrices, coplots, prosection [8] and FastMap based visualization [14] are only good for generating static cluster visualizations for low-dimensional data. 3. Star-coordinate models and unification
Star-coordinate based visualization models have been successfully used in cluster analysis and valida-tion, as in the Kandogan system [19] and in the VISTA system [5]. Although the definitions of different models look quite different, they are inherently related because of the use of the same star-coordinate system. In this section, we first describe these two specific models and then unify them into one general model. The unified model allows us to conveniently study the features shared by similar star-coordinate models and develop concise analysis. With the unified model, we analyze the principles behind the inter-active exploration on star-coordinate visualization, and discuss the relationship between the parameter setting and the effectiveness of interactive visualization.

To begin with, we define the notations used in this paper. A dataset is defined as a table with k columns We use bold lower cases to represent vectors and normal lower cases to represent scalars. 3.1. Unifying star-coordinate models
A star-coordinate based visualization system arranges multiple coordinates in a  X  X tar X  shape over the display area. As Fig. 1 shows,  X  X  X  is the visual center and s i are coordinates. Each coordinate corre-sponds to one particular dimension and a multidimensional data record is mapped to one point on the star coordinate system through certain mathematical mapping model. If the mapping model preserves density, clusters in the original space will be mapped to point clouds on star coordinates. Figure 5 is an implementation of the star-coordinate system.

In the following, first, we give the definition of the two popular mapping models, and then present the unified model. With this unified model, it is easier to conduct the analysis on the class of linear star-coordinate models and understand the features shared by these models. 3.1.1. The VISTA model
The VISTA model has two steps: (1) Normalization. A multidimensional point is normalized to elim-inate the bias brought by different value ranges for different columns. (2) The normalized data is trans-formed with the  X  -mapping function.

Normalization is used to unify value ranges of columns. There are a few common methods, such as the max-min normalization and the standardization method [11]. VISTA uses the max-min normalization. Let [ min i ,max i ] i =1 ...k be the bounds of the column (or dimension) i , min i =min { values in column i } and max i =max { values in column i } . VISTA model requires the values are normalized to the range [  X  1, 1]. Let v be the original value and v be the normalized.  X  -mapping is a parameterized linear mapping designed for star coordinates. Let 2D point Q ( x, y ) rep-the angle of the coordinate i . The contribution of dimension i of the point P to the visual position Q is is the center of the display area and c is a visual scaling parameter.  X  -mapping is defined as follows. or, Q ( x, y ) is represented as where x i is the normalized dimensional value and  X  i is in the range [  X  1, 1]. 3.1.2. The Kandogan model
With the same definitions of Q ( x, y ) , x i , min i ,and max i in the VISTA model. The mapping function used in paper [19] is defined as follows.
 where, axis along the i -th dimension, and both of its length and direction can be changed interactively in the visualization system. 3.1.3. The unified model
For easier investigation of the models, we unify the above two models. Let X  X  examine the meaning of the Kandogan model and covert it to the VISTA representation. d i in the Kandogan model is related to s in the definition of u xi and u yi , to Eq. (4), we get  X  -mapping in the VISTA model.
 There are two differences from the VISTA model. (1) The definition of x i actually normalizes the orig-inal value to the range [0,1]. (2) The  X  parameters have a range of [0 ,  X  ) . It is equivalent to use c  X  [0 ,  X  ) and  X   X  [0 , 1] to replace  X   X  [0 ,  X  ) , which results in the exact form of the VISTA model. With the above understanding, we define the unified model as follows. It includes two steps: To instantiate the unified model, the VISTA model has  X  1 =  X  1 , X  2 =1 , X  1 =  X  1 , and  X  2 = 1, while the Kandogan model has  X  1 =0 , X  2 =1 , X  1 = 0, and  X  2 = 1.
 3.2. Properties of the unified model
A good understanding of the unified model will help us better understand the parameter settings and their effect on visualization and interaction. Below we will give some intuition about the unified model, which also applies to the VISTA model and the Kandogan model. It will also explain why these models are good for exploring clustering structures.

First, we look at the implication of a single static visualization to data clustering. With all parameters fixed, we can represent the mapping with a standard matrix form in terms of the normalized input data x =( x 1 ,...,x k ) , where A is a constant matrix and
Because the max-min normalization can be represented as an affine transformation as well, the G() form to analyze the properties. Based on this setting, the unified model is essentially a simple linear model with dimensional adjustable parameters  X  i . The rationale behind the model is Proposition 1. If Euclidean distance is used as the similarity measure, an affine mapping does not break clusters but may cause cluster overlapping.

Proof. Let X  X  model arbitrary shaped clusters with a Gaussian mixture [12]. Let  X  be the density center, and  X  be the covariance matrix of the Gaussian cluster. A cluster C i is an ellipsoid, which can be represented with Geometrically,  X  describes the position of the cluster and  X  describes the spread of the dense area. After an affine transformation, say G ( x )= A x + b , the center of the cluster is moved to A X  i + b and the covariance matrix (corresponding to the shape of dense area) is changed to A  X  i A T as illustrated by clusters may overlap each other. As the unified model is an affine model, this proposition also applies to the unified model.

Since there is no  X  X roken cluster X  in the visualization, any visual gap between the point clouds reflects distinguish the distance distortion and cluster overlapping introduced by the mapping. Uniquely different different perspectives, which gives dynamic visual clues for distinguishing the visual overlapping. 2 3.2.1. Non-Euclidean distances
Because human visual perception is very sensitive to Euclidean distance, in particular the clusters (or dense areas) formed by Euclidean distance, other metric spaces will need to be converted to Euclidean spaces. This line of research is known as Euclidean embedding [4,24]. We have been working on scalable embedding algorithms, such as the MapReduce implementation of Landmark MDS (LMDS) [10] and FastMap [14], which can serve as the pre-processing step. However, this topic is out of the scope of this paper. Thus, we will not explore in more details. 4. Optimal design of star-coordinate visualization
As we have discussed, the unified model is clearly an affine mapping [15] from multidimensional space ( &gt; 3 D ) to two-dimensional space. If Euclidean distance is used dissimilarity measure for clus-tering, which is also the most common case, these dense areas are clusters [13]. The major problem of the linear models are partial cluster preserving, which means the dense areas are preserved but they may overlap each other in visualization. In the following, we discuss how to design interactive operations to help distinguish the visual cluster overlapping.
The discussed model has a rich set of tunable parameters, i.e., the normalization ranges  X  1 and  X  2 ,  X  having too many possible parameter tuning methods may also overload the user visual perception and interaction. We address this problem from three aspects. (1) Among all of the possible tuning methods, what are the minimal set of the operations that are necessary to achieve the target of finding visually separated clusters? (2) Can we use heuristic rules to minimize the number of interactions? (3) Will dif-ferent parameter-range settings affect the effectiveness of visualization? We will discuss these problems in detail. 4.1. The minimal set of necessary interactive operations
A typical visual design enables the convenient manipulation of the three sets of parameters,  X  i ,  X  i and c . Figure 4 shows the VISTA visual design. The  X  -widgets (the blue dots) are used to interactively adjust the value of  X  values. Clicking on these  X  -widgets, the user can change the  X  values.  X  -gauges (the colored rays from the display center) represent the scale of  X  value.  X  -widgets can also be dragged around the center to change the  X  parameters. These visual designs are naturally combined with the star zooming to scale c ,and rotating to change the direction of coordinates.

The Kandogan system has some similar design for these three types of operations. With the increase of dimensionality, the number of parameter combinations will increase exponentially. As a result, the with which we can still achieve the same goal of using the whole set of operations.

The first method is to eliminate the rotation operation that changes the  X  values from the necessary set of operations. We notice that rotating is equivalent to a pair of  X  -adjustment operations.
Figure 6 illustrates how one rotating operation can be decomposed to a pair of  X  -adjustment opera- X  v turns to negative.

Since zooming does not really change the visual density distribution, but rather changes the detail level of the visualization, the most significant operation for finding the visual overlapping is only one type of operation:  X  -adjustment. 4.2. Heuristic rules for interactive exploration
There is the practical meaning of  X  -adjustment. Large  X  i values emphasis the weight of the i -th di-mension to the visual clustering results. However, the number of possible combinations of  X  -adjustments still too large for high dimensionality. We recognize that visual exploration is not a process of simply enumerating all possible parameter settings  X  more importantly, we want to incorporate user X  X  visual intuition into the exploration process.

We introduce the intuition of exploration and then give some heuristic rules to help significantly im-prove the efficiency of exploration. Dense areas in the original space are visualized as point clouds in star-coordinates visualization and changing  X  values causes the moving of point clouds. In interactive visual rendering, some dimensions often show some  X  X ignificant change X  to visualization in a series of continuous  X  -adjustment, i.e., changing  X  i value results in distinct point clouds moving in different directions, or causes the emergence of visible  X  X aps X  between point clouds (Fig. 7). Intuitively, these dimensions play important roles in distinguishing the visual overlapping and thus we name them as  X  X he visually dominating dimensions X , and also the others as  X  X he fine-tuning dimensions X . In practice, the following heuristic rules can be used. 1. Sequentially try rendering each dimension, if the dimension is a visually dominating dimension, 2. Use the fine-tuning dimensions to polish the visualization. Adjust their  X  values finely so that the
These rules have heavily depended on the effectiveness of visualization. For example, we want  X  -adjustment of dominating dimensions to easily separate the point clouds; we want fine tuning can result in visualization with sufficient details. These problems might be related to the initial setting of the normalization range and the  X  value ranges. We discuss these parameter settings in the next section. 4.3. Statistical properties of randomized exploration and its application to big data
In the single workstation mode for medium-size data, the workstation can quickly respond to user X  X  the remote server generates a batch of relevant visualization results; the results, which have a much smaller size than the dataset, are sent back to the local user; then, the user interactively explore them. There is a critical problem in this batch-interaction method  X  how to generate meaningful batches of visualizations.

In this section, we discuss the frame-based random visualization generation algorithm RandGen, and show that its statistical properties can help user effectively identify the visual cluster overlapping. We define aframe as a visualization result according to one setting of the model parameters. Since we only need to encode the density information of a frame, we represent a frame with a two-dimensional density map, where each cell represents a coordinate and records the number of points that are mapped to the cell.
 The RandGen algorithm is a random perturbation process that generates a collection of related frames. According to the previous discussion, we tune only the  X  parameters to update the visualization. Starting from the initial  X  values that are given by the user, RandGen applies the following small stochastic updates to all dimensional weights simultaneously. Let  X   X  i represent the  X  parameter for dimension i in frame  X  , the new parameter  X   X  +1 i is defined randomly as follows. where t is a predefined step length, often set to small values, e.g., 0.01  X  0.05, and B is a coin-tossing random variable  X  with probability 0.5 it returns 1 or  X  1.  X  i is generated independently at random for each dimension.  X   X  +1 i is also bounded by the range [  X  1, 1] to minimize the out-of-bound points (those mapped out of the display). This process repeats until the  X  parameters for a desired number of frames are generated. Since the adjustment at each step is small, the change between the neighboring frames is small and smooth. As a result, sequentially visualized these frames will create continuously changing visualization. The following analysis shows why the RandGen algorithm can help identify visual cluster overlapping. 4.3.1. Identifying clustering patterns with RandGen
We formally analyze why this random perturbation process can help us identify the clustering struc-ture. The change of visualization by adjusting  X  values can be described by the random movement of each visualized point. Let v 1 and v 2 be the images of the original data record x for the two neighboring frames, respectively. Then, the point movement is represented as By definition of B ,wehave E [  X  i ]= tE [ B ]=0 .Since  X  i are independent of each other, we derive the expectation of  X  i  X  j Thus, it follows the expectation of point movement is zero: E [ X  u ]=0 . That means the point will of the movement var ( X  u )= There are a number of observations based on the variance. (1) The larger the step length t ,themore actively the point moves; (2) As the values s ix and s iy are shared by all points, the points with larger vector length k i =1 x 2 i tends to move more actively.

Since we want to identify cluster overlapping by observing point movements, it is more interesting to see how the relative point positions change. Let w 1 and w 2 be the images of another original data record between the pair of points in the initial frame would be Then, the change of the squared distance after the perturbation is 0 . 25 t 2 , it follows the expectation of the distance change is i.e., the average change of distance is proportion to the original distance between the two points. That means, if points are distant in the original space, we will have higher probability to see them distant in the visual frames; if the points are close in the original space, we will more likely observe them move together in the visual frames. This dynamics of random point movement helps us identify possible cluster overlapping in a series of continuously changing visual frames generated with the RandGen method. 4.4. Parameter range setting and the effect of interaction have significant impact on the resultant visualization and interactions. We use the VISTA model X  X  setting (normalization range [  X  1 , 1] and  X  range [  X  1, 1]), and the Kandogan system X  X  setting (normalization range [0, 1] and  X  range [0 , 1] ), for example.

Because the goal of exploration is to distinguish the visually overlapped clusters, we want to maximize save computations in the cloud [2]. There are some heuristics guiding our design of the model. (1) We so that the possible overlapping details are unfolded. (2) We also want to reduce the chance of mapping points out of the display area, because otherwise additional adjustments (interactions) will be needed.
We assume the data points are samples from a joint multidimensional distribution. Let x represent a random variable of that distribution. Correspondingly, the mapped results have a two-dimensional distribution. Let y represent a random variable of the two-dimensional distribution. To centering the visualization is equivalent to centering the two-dimensional distribution, which means E [ y ]= 0. Let X  X  assume tuning the  X  parameters is independent of the data distribution. 3 Now applying the unified model, we get Thus, to have E [ y ]=0 , we need either E [ x i ]=0 or E [  X  i ]=0 . Apparently setting the normalization skewed visualization, which inefficiently uses the display area. E [  X  i ]=0 indicates that the random use the display space.
Tuning  X  in the range [  X  1, 1] also brings more dynamic information. As shown in Fig. 7, let X  X  as-them, and decreasing will contract them. Changing  X   X  i to  X   X   X  i will map the two modes to the mirror  X  X otation X  animation, which provides more vivid information to the user.

The above discussion has given the statistical justification and the intuition how the parameter ranges a specific model. For example, ([  X  1, 1], [  X  1, 1]) represents the VISTA model. In following section, we will present an evaluation approach to empirically studying the effect of parameter range settings. 5. Experiments on the effect of parameter settings
The above discussion on the parameter range setting has given the intuition of the impact of different range settings on visualization results. In this section, we design experiments to evaluate how the range settings affect the visualization. First, we design a number of statistical measures that approximately structure and the algorithm for collecting these measures. Finally, we run experiments on a number of real datasets to compare the settings based on the measures. 5.1. Design of empirical statistical measures
A good design of the model will allow us to see more details in each visualization result, with less auxiliary adjustments. Based on these observations, we design the following pixel-based measures.  X  Coverage is the percentage of pixels in the display space covered by data points, which is used to  X  Purity is the percentage of pixels covered by points from the same cluster. Again, this helps visually  X  Out-of-area Rate is used to evaluate the percentage of visual points mapped out of the effective These rates are to be collected and estimated from the experiment. We design a data structure and a data collection procedure for this experiment. 5.2. Procedure for collecting data and calculating the metrics 5.2.1. Micro structure entire display area is divided into column-by-row cells, where each cell corresponds to a pixel or (a block of pixels) of the display area. Multiple k -dimension points may be mapped to one cell. Suppose these points from different data clusters (dense areas) are labeled with different cluster ID (CID). We use two indicators for each cell to describe the possible situations. One is topCID , which records the cluster label of the k -D point mapped to the top of the cell. The user can see these top points on the integer ( topCID &gt; 0 ), and empty cells have topCID = 0. The other indicator is the Purity of the cell, which is a boolean variable  X  true represents that all points mapped to this cell have the same cluster label, and false otherwise.

With the micro-structure, we can easily calculate the Purity Rate and Out-of-area Rate by counting the = true )be p , the total number of cells be C and the cells with topCID = 0, i.e., empty cells, be C 0 . Let the number of points mapped out of grid be t , and total number of points be N .
 However, Coverage cannot be simply evaluated with the number of covered cells. Intuitively, with the to distinguish visual cluster overlaps. Therefore, we include eight neighbor cells of a covered cell as its contribution to the coverage rate, which takes the sparsity into account. Figure 8 shows the micro structure and eight neighbors of a cell. The calculation of coverage rate consists of two steps: the first among all cells is calculated as the Coverage .

Apparently, the zooming factor will significantly affect the above rates. Visualization with small zoom-ing factor c will map the data to a small area, resulting in both small Coverage and Purity ;if c is too large, the Out-of-area rate may increase. To fairly evaluate these rates crossing different parameter set-tings, we need to properly adjust the zooming factor so that the visualization is extended enough but without too many points out of the display. This adjustment can be done by the following  X  X utomatic zooming X  procedure. 5.2.2. Procedure for collecting the data
Automatic zooming (AutoZoom) is designed to make the Out-of-area Rate within [0, 0.1%]. It is the Out-of-area Rate . The following describes the AutoZoom algorithm. scales down to reduce the Out-of-area rate until it falls in the desired range.

We run the RandGen algorithm to generate randomized continuously changing visual frames. Initially, we use the AutoZoom algorithm to appropriately set c . At each step, after  X  values are updated, the visualization is regenerated. We collect the Out-of-area rate , apply AutoZoom again, and then calculate the Coverage and the Purity . After repeating a number of steps, we average the collected rates. 5.3. Experimental setup model [5] and ([0, 1], [0, 1]) by the Kandogan model [19], using the designed procedure. Datasets
We use five real datasets for evaluation. The clusters in these datasets are already labeled. These datasets are wisc-breast-cancer, satellite-image, image-segmentation, page-block and shuttle, all from UCI machine learning database. 4 Wisc-breast-cancer is a small dataset with two unclearly separated also have irregular clusters with heavy cluster-overlapping in visualization. We list some detailed de-scriptions in Table 1, where N is the number of points, k is the number of dimensions, and n c is the number of labeled clusters. 5.4. Discussion on experimental results 5.4.1. Impact of parameter ranges
We run 10 rounds of experiments for each setting of model parameters for the same dataset. Each round of experiments starts a randomly chosen  X  values, and consists of 100 steps of the RandGen algorithm. We use multiple rounds to remove the side-effect of the initial parameter setting. The average measures of the 100 snapshots are used as the estimated rates in one round of experiments. Finally, we average the rates of the 10 rounds and calculate the standard deviation. The results are shown in Coverage and Purity. However, the difference of Out-of-area rate are not statistically significant (with p-value &gt; 0.05). 5.4.2. Comparison on visual clustering results
We also show some visualization results to give the intuition how the range settings affect the visual-[ and less detailed, as we have mentioned in the formal analysis.

Better visualization results help find better clustering results. We try to identify the clusters based on the observed dense point clouds and manually label them. The results are compared with the existing cluster labels. The Error Rate of the result is calculated as follows. Suppose K clusters are identified. Error Rate is defined based on the confusion matrix , where each element c ij 1 i, j K represents the number of points from the originally labeled cluster j assigned to cluster i in the clustering result. Let {(1),(2),...,(K)}beapermutationofsequence{1,2,...,K}.Thereisapermutationthatbestmatches the visual clustering result and the originally labeled result that maximizes the number of consistent points m c . We define the Error Rate as 1  X  m c N ,where N is the total number of points. Our result shows the average from 91.6% to 95.7% for wisc-breast-cancer and from 67.2% to 75.2% for image-segmentation data, by using the setting ([  X  1, 1], [  X  1, 1]). 6. Conclusion
The star-coordinate based visualizations are effective in interactive visual clustering. The goal of in-teractions in such systems is to find the possible visual cluster overlapping caused by star-coordinate mapping models. To better understand the star-coordinate based cluster visualization, we unify the math-ematical models of the existing systems and study the design of interactive operations, heuristic explo-interaction and visualization. Our formal analysis and empirical study show the fundamental features of the star-coordinate visualization and indicate the optimal design principles for such systems. References
