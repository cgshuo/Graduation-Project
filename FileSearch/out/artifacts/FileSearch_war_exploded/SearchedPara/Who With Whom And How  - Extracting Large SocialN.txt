 Social network analysis is leveraged in a variety of applica-tions such as identifying influential entities, detecting com-munities with special interests, and determining the flow of information and innovations. However, existing approaches for extracting social networks from unstructured Web con-tent do not scale well and are only feasible for small graphs. In this paper, we introduce novel methodologies for query-based search engine mining, enabling efficient extraction of social networks from large amounts of Web data. To this end, we use patterns in phrase queries for retrieving entity connections, and employ a bootstrapping approach for iter-atively expanding the pattern set. Our experimental evalu-ation in different domains demonstrates that our algorithms provide high quality results and allow for scalable and effi-cient construction of social graphs.
 H.3.3 [ Information Systems ]: Information storage and re-trieval; E.1 [ Data Structures ]: Graphs and networks pattern based queries, social network extraction
Networking and communication are natural human activ-ities that are massively supported through modern infor-mation technologies, most prominently the internet. Large networks of people are present in many parts of the Web, for instance, in form of contacts and friends in Social Web platforms, co-occurring named entities in web pages, or co-authors of articles in scientific portals. Social networks ex-tracted from these information sources are exploited for var-ious purposes: Node centrality measures in networks can help to identify important and influential persons or com-munities in areas such as entertainment, science, or politics. Information on social connections in customer networks can be leveraged as part of recommender systems that suggest c Figure 1: Subgraph of a network extracted using our ap-p roach along with examples for connecting phrase patterns. items and new contacts to their users. Furthermore, know-ing the topology of social graphs can shed light on the prop-agation of ideas and trust in social networks [36, 1, 12], and can enhance various IR applications such as personalized query expansion and media recommendation [4, 13].
In order to enable the analysis of social networks they have to be extracted from underlying data in the first place. Some sources already provide explicit and easy to extract information about user relations. This includes online plat-forms such as Facebook, Twitter, or LinkedIn that main-tain user databases and offer software interfaces for ac-cessing contacts, friends, or followers. Other sources -for instance, email corpora revealing communication links be-tween persons, or scientific portals comprising information on co-authorship -contain more implicit, yet easy to extract network information. However, in many cases information about social connections is hidden within unstructured data such as Web pages, archives, and multimedia repositories. Search engines constitute our main access points to the Web, and there exists a number of works that employ search queries for detecting co-occurrences of entities and leverage these connections for extracting social networks [20, 25, 30]. However, the suggested algorithmic approaches do not scale well and are only suitable for rather small datasets compris-ing just a few hundred or a few thousand nodes.
In this paper, we exploit pattern-based search engine q ueries for efficient acquisition of large scale networks from unstructured Web data. These queries consist of entities (e.g.  X  X arack Obama X ) and connecting patterns (e.g.  X  X eets with X ,  X  X nd his wife X ) leveraged for mining links between persons. Using such search patterns we can simultaneously explore a large number of connections with a single query. Starting with an initial set of entities, we iteratively expand both entity pair and pattern sets. We identify connections which are likely to be important and use this information to formulate subsequent queries, thereby greatly reducing the number of search engine requests. For illustration, a small excerpt of a constructed graph is shown in Figure 1.
The main contributions of this work can be summarized as follows:
The remainder of this paper is organized as follows: Sec-tion 2 discusses related work on social network construc-tion from semi-structured data sources, search engine based network mining, and extraction of semantic relationships. In Section 3 we describe our methods for network extrac-tion including search patterns and their expansion based on bootstrapping as well as different search prioritization crite-ria. The evaluation presented in Section 4 studies the cost efficiency and accuracy of our methods, and provides fur-ther insights about the structure of the extracted networks. Finally, in Section 5 we conclude and describe directions of our future work.
There is a plethora of work on social network extraction from text and visual data. In [9], for instance, social connec-tions between fictional characters are inferred from dialogs in books, and, similarly, in [19] a social network is extracted from the narrative of an Ottoman scholar and world trav-eler. In [10] social connections are constructed from a his-torical multimedia repository by leveraging co-occurrences of faces in images. Bird et al. [3] extract social networks us-ing information about senders and recipients obtained from headers in email corpora. Social networks extracted from other (semi-)structured sources include academic networks or co-citation graphs in publication databases [28, 34].
Information extraction tackles the problem of deriving structured information from unstructured data. There is a body of work on semantic relationship mining based on textual patterns [2, 22]. In [32] a bootstrapping algorithm is employed for iteratively discovering new patterns and se-mantic connections. In [33] and [5] categorical facts and con-cept hierarchies are extracted from web and news corpora as entity-pattern-entity triples. Cimiano et al. [7, 8] leverage pattern-based search engine queries for building ontologies. In [16] comparable entities such as consumer items are ex-tracted using an expandable set of contrasting expressions (e.g.  X  X s. X  and X  X nstead of X ); Jiang et al. [17] use similar rela-tions for constructing entity graphs and product recommen-dations in web search. The KnowItAll system [11] employs a supervised learning approach for validating facts extracted using search engine queries based on manually provided pat-tern templates. Open information extraction systems such as TextRunner [35] employ shallow parsing, and, as pat-terns, employ normalized expressions between noun phrases in an unsupervised manner. The output of these systems are databases that contain fact tuples such as  X  (Berkley, located in, Bay Area)  X  or  X  (Oppenheimer, professor of, the-oretical physics)  X . In contrast to works focusing on general fact mining, we provide a novel methodology for extracting social networks. Our contributions include the systematic construction of connected social graphs, their efficient and intelligent expansion, as well as the analysis of their struc-tural properties.

The first approach employing search engines for network mining is probably the work by Kautz et al. [20]. The au-thors exploit co-occurrences of names on result pages to identify connections between persons; the resulting networks are relatively small and just centered around a single per-son. The POLYPHONET system [25, 26] determines co-occurrence counts in Google queries to identify pairwise con-nections. In addition, different types of relationships and correlations with topic-related keywords are taken into ac-count to disambiguate entities. In [6] search engines are used to retrieve connected email addresses. The Flink sys-tem [27] focuses on the mining of author networks and com-bines web search with information from emails and pub-lications. In [29] co-occurrences of persons in search result snippets are leveraged. There are a few attempts to increase efficiency in discovering entity relations on the web [15, 30]; they focus on snippet clustering and entity disambiguation to reduce the number of search requests. However, all of the current methods are based on pair-wise entity queries, making them infeasible for mining larger graphs.
 To the best of our knowledge, our methods are the first to go beyond pair-wise querying for social connections and use intelligent query pattern construction and prioritization approaches for graph expansion that allow for tunable and larger scale network construction.
In this section we describe our methodology for mining social graphs using search engines. To this end, we first in-troduce an efficient basic algorithm using web search with a fixed pattern set for identifying connections between per-sons. We then extend this method by an iterative approach for automatically collecting new patterns. Finally, in order to further improve the cost efficiency of network construc-tion, we introduce methods for prioritizing nodes for graph expansion.
Given an initial seed set of entities I and a set of pat-terns P , we use connectivity search queries of the form  X  X arack Obama meets X ) in order to identify links to other entities. We iteratively issue these queries over an initial seed set of entities (e.g. a list of a politicians). In this way we obtain links between entities in the seed set as well as new entities. This is repeated for all patterns in our pattern set (in our experiments we used a small initial set consisting of the single term  X  X nd X ). For snippets of the top-k search results in Bing we check for exact strings of the person name in a database (we were using entities from querying entities is repeated for the newly discovered enti-ties in a  X  X readth-first X  manner. The resulting (undirected) edges between two entities are weighted by the overall oc-currence count in the snippets across all patterns, omitting edges whose weight is below a threshold  X  .

Algorithm 2 shows the details of the algorithm. The net-work and a priority queue of nodes are initialized based on the entity seed set (lines 2 X 4). Here the priority queue is a simple  X  X irst-in-first-out X  queue; in Section 3.3 we will in-troduce more enhanced mechanisms for prioritization. The nodes in the queue serve as input for pattern-based queries (line 8), and query results are used for expanding the social network and updating the queue (lines 9 X 17). The network expansion continues until the query budget is spent or un-til there are no unvisited nodes left (line 19). The running time of the algorithm is linear in the sum of nodes and edges visited and found.
We extend the Graph Mining method described above through an approach for iteratively discovering new pat-terns. To this end, we start with an initial set of seed pat-terns and extend it in each round of the algorithm, taking into account the weights of edges extracted in that round.
We then iterate over the top-h resulting edges with the highest weight and use them to issue queries of search results are then checked for strings of the form between two different entities; &lt; c &gt; becomes a candidate for a new pattern. Among the candidates we want to identify patterns with high coverage in the result snippets. To this end, let n be number of occurrences of candidate pattern &lt; c &gt; (support), m be the number of distinct entity pairs (diversity) and d be the number of distinct domains (spam resistance) comprising the pattern. We include &lt; c &gt; into the pattern set if n  X  m  X  d 2 is above a threshold  X  . Extracting top-k patterns can be managed effectively using a priority queue with log ( n ) running time for operations like insertion and updating. This pattern mining method is employed af-ter each complete iteration of the algorithm described in the previous paragraph.
Algorithm 1: G raph Construction with Pattern Set Ex-pansion Input : I : initial set of entities
IP : initial set of patterns  X  : threshold for edge weights  X  : threshold for pattern weights maxIter : maximum number of iterations
Output : social graph G = ( V, E ) begin 2 E  X   X  3 V  X  I 4 Cand  X  I // graph extension candidates 5 P  X  IP // pattern set 6 iter  X  0 7 repeat 8 N ewCand  X  X  X  9 NewP atterns  X  X  X  10 for e  X  Cand do 11 e dges  X  search ( e, P,  X  ) // web search for 12 for ( { e, e i } , w )  X  edges do 13 i f { e, e i }6 X  E then 14 V  X  V  X  { e i } 15 NewCand  X  NewCand  X  X  e i } 16 E  X  E  X  X  ( { e, e i } , w ) } 17 e lse 18 E  X  E \ { ( { e, e i } , x ) } 19 E  X  E  X  X  ( { e, e i } , x + w ) } 20 C and  X  Cand  X  NewCand 21 NewP atterns  X  pSearch ( E,  X  ) // web search 22 P  X  P  X  NewP atterns ; iter  X  iter + 1 23 until iter = maxIter ; 24 return ( V, E ) The details of the algorithm are shown in Algorithm 1. S eed patterns and entities are first used to initialize the bootstrapping approach (lines 2 X 5). Then, for a fixed num-ber of iterations, the social network is expanded based on the current query patterns (lines 11 X 19), and, conversely, the pattern set is expanded using the current edges in the network (lines 21 X 22). The running time of the algorithm is linear in the sum of nodes and edges visited, multiplied by the number of patterns found.
The algorithms described so far expand the social graph in a  X  X reath-first-search X  manner. The advantage of this approach is its good coverage: Seedset and subsequentially found nodes are systematically visited and expanded until our budget of connectivity queries is exhausted. However, in order to further optimize budget usage we might want to put higher priority on more  X  X ssential X  nodes during the network expansion process. In the following we focus on two criteria for prioritizing nodes: popularity and novelty. Algorithm 2: G raph Construction with Static Pattern Set Input : I : initial set of entities
P : set of patterns  X  : threshold for edge weights maxReq : maximum number of requests pQueue : A container which sorts the candidates according to the employed algorithm
Output : social graph G = ( V, E ) begin 2 E  X   X  // Edges 3 V  X  I // Vertices 4 pQueue.addAll ( I ) // graph extension candidates 5 requestCnt  X  0 6 repeat 7 e  X  p Queue.pop () 8 ( edges, requests )  X  search ( e, P,  X  ) // web 9 for ( { e, e i } , w )  X  edges do 10 i f { e, e i }6 X  E then 11 V  X  V  X  { e i } 12 E  X  E  X  X  ( { e, e i } , w ) } 13 if e i 6 X  pQueue then 14 p Queue.push ( e i ) 15 e lse 16 E  X  E \ { ( { e, e i } , x ) } 17 E  X  E  X  X  ( { e, e i } , x + w ) } 18 r equestCnt  X  requestCnt + requests 19 until requestCnt  X  maxReq or pQueue.empty (); 20 return ( V, E )
Popularity in this context intuitively corresponds to the i mportance of nodes within the network. We employ the number of inlinks  X  in the current version of the social graph during the extraction process as popularity measure. Al-though very effective in our experiments, one could easily imagine using alternative node centrality measures such as PageRank [31], hub scores in HITS [21], or one of their var-ious variants (e.g. [23, 18]).

Novelty, on the other hand, corresponds to how recently a node was added in the course of our network construction process. Intuitively, exploring more recent nodes can help to reach out more quickly to new communities within the network. We combine popularity and novelty into a priority measure  X  for a node v using exponential temporal decay responds to the number of expansion node steps conducted since the node was added to the queue, and  X  is a param-eter for balancing the influence of popularity and novelty. Exponential decay is often used for time dependent ranking of items in the context of IR (see e.g. TempPageRank [37]). This approach can be directly integrated in the framework provided in Algorithm 2 using a priority queue based on the  X  score, and could, in principle, also be integrated into the dynamic pattern mining process (Algorithm 1).
In this section we evaluate the network extraction meth-ods described in Section 3, starting with entities from two domains: politics and movies. The objective of our evalua-tion was to study (1) the cost efficiency of different strate-gies in terms of network size obtained with a given budget of search engine requests, (2) the accuracy of the extracted networks, and (3) the structure of the social graphs as well as properties of discovered social relations. In our exper-iments, more than 300,000 persons and 1.4 million social connections were retrieved using two seed sets containing just 342 politicians and 100 actors. The resulting networks are coined WikiNet and IMDbNet. used two entity seed sets from political and movie domains as follows: In order to simplify named entity recognition in search en-gine snippets, we restricted the set of possible persons in our WikiNet to those listed in DBpedia Version 2014 (containing about 1 million distinct person names) and in the IMDbNet to names from the IMDb directory (about 2 million distinct names).
 Engine API for issuing our network expansion queries. Pre-liminary tests showed that in most cases the overall result list returned per query did not exceed k = 200 entries, al-though the estimated number of results often went beyond thousands. Therefore, we issued 4 requests per query as Bing provides 50 results per request (if available). In order to avoid recurring API requests we simultaneously cached results from previous queries. The search API has some technical limitations, including the fact that a few (special) characters, like  X &amp; X ,  X , X ,  X + X  cannot be used as search query. Furthermore, most of the snippets returned for disjunctive queries do not contain query terms, and, thus, cannot be used for relation extraction.
 Table 1: Number of nodes and edges obtained for different s trategies.
 We set the edge weight threshold  X  to 2 for all algorithms. For PatternIter we set the cut-off value  X  for pattern se-lection to 5, and used value h = 100 for top connections employed for discovering new patterns. The initial query pattern sets used in our experiments consisted only of the general pattern  X  X nd X ; for extracting connections from snip-pets we employed an additional small set of manually se-struction using search engines are based on pairwise entity queries. As baseline we tested the method described in [25] (POLYPHONET) which tries to reduce the number of pair-wise queries by identifying subsets of promising query pairs. More specifically, starting with a seed set of entities, for each entity a list of candidate entities (contained in the entity set) is extracted from Web pages obtained by querying for the entity. Then queries for the pairs of seed entities and the candidates for associated entities are issued in order to ob-tain co-occurrence values based on search result counts, and edges with a value above a threshold t are included in the graph. In order to allow for network expansion beyond the seed set, we included further entities found in the Web pages for identifying additional query candidates.
Table 1 shows the number of nodes and edges in the ex-panded networks computed by our methods using the same seed sets and exhausting a fixed budget of 200k queries per run. The main observations are the following:
Note, that in addition to the number of search engine requests taken into account for this evaluation, the base-line also introduces a substantial overhead by requiring the download and processing of a large set of Web pages (about 85,000 pages in our experiments). In contrast, our methods avoid these extra costs by working directly on search result snippets.

Figure 2 provides additional details about the network size development with respect to the amount of search engine requests spent. The effect of a stronger emphasis on novelty (corresponding to higher  X  ) is reflected in a slight increase in the number of new nodes, starting from around 50k  X  100k requests. On the other hand, prioritization of popular nodes with high in-degree (lower  X  ) leads to a high increase in the number of edges (starting from around 10k requests for both datasets).
In the following we describe structural properties of the extracted networks as well as the development of the net-works during the execution of our algorithms.
 provides summary statistics for the distribution of nodes and edges in the extracted networks. For all experiments we observe a right-skewed distribution of nodes and edges with median node degree of 1 or 2 and median edge weight of 3. (The edge weights in all the experiments follow a power law distribution as exemplarily depicted in Figure 5 for the BF -constructed WikiNet.) The decay parameter  X  for the Prio strategy has a clear impact on the distributions: Decreasing the value of  X  results in an increase of the means for both node degree and edge weights due to the higher prioritiza-tion of nodes with already high degree, and also results in a wider X  X pread X  X f the values as reflected by a higher standard deviation.

Figure 3 shows the degree distributions of the nodes in the constructed networks. The distribution for the breadth-first ( BF ) strategy is close to a power law distribution. For the Prio strategies the described effect for the decay parameter  X  interferes with the power law, resulting in two local extrema: a minimum for nodes with lower in-degree followed by a maximum for nodes with higher in-degree.
 obtained for different methods and seed sets. For the prior-itization strategy Prio the decay parameter  X  has a strong influence on the network structure: For a stronger focus on popularity (  X  = 0) the larger number of edges results in higher graph density; putting more emphasis on novelty (  X  = 0 . 01) leads to a wider spread of the graph, providing a bird X  X  eye view of the discovered space. A more in-depth exploration of community structures is subject to our future work. connections in the IMDbNet found by the BF method. Among those connections are famous co-actors ( X  X erence Hill X  and  X  X ud Spencer X ), romantic couples ( X  X yan Gosling X  and  X  X va Mendes X ), or a combination of both ( X  X rad Pitt X  and X  X ngelina Jolie X -the strongest connection obtained). In addition, we observe that our methods are also capable of discovering connections from other domains ( X  X ergey Brin X  and  X  X arry Page X ).
We conducted a large user study to evaluate the quality of the constructed networks with overall 5,600 evaluated edges. The goal of our evaluation was two-fold: First to check the correctness of the extracted social connections; second to evaluate strength of the connections in more detail. nection between two persons is a difficult task for human as-sessors. Therefore, instead of letting assessors directly assign a relevance value, we first asked them to choose between two reference connections. One of the connected pairs was ob-tained using our method and the other consisted of persons uniformly sampled from the entity set (the order of these two options was randomized). Users were asked the follow-ing question:  X  X hich of the given pairs has the stronger relation? X , and were encouraged to use any source including search engines to answer this question (as an aid we provided links to a Google search page). The assessors consisted of 15 undergraduate students of Computer Science and other disciplines, and 5 graduate students of Computer Science.
Table 4 shows that all of our methods achieved accuracy values between 95% and 99%, demonstrating the correct ex-traction of almost all tested edges. Overall, for 4694 out of 4800 edge pairs the users preferred the connections discov-ered by our algorithms. We measured inter-rater agreement with 5 users for a subset of 200 edges from each of the con-structed networks and obtained an average pairwise percent agreement of 93.7% and 96.5% for WikiNet and IMDbNet, respectively, also reflected by high Fleiss X  Kappa [14] values of 0.83 for WikiNet and 0.97 for IMDbNet. Figure 5: Edge weight distribution for the B F algorithm applied on WikiNet seed set Table 3: Top-15 social relations found for IMDbNet using t he BF extraction method.
 Table 4: User evaluation results: accuracy of different m ethods
We also tested how many of the edges in our graphs corre-sponded to co-workers in movies as listed in IMDb. A large percentage of edges found by our algorithms (e.g. 33.8% for method BF , and 32.7% for method Prio with  X  = 0) were co-acting in the same movies. However, our algorithms are capable to additionally reveal many relationships be-tween actors not appearing in the same movie as captured by IMDb (for instance,  X  X om Cruise X  and  X  X atie Holmes X ). wise checks described above we also directly assessed strength and correctness of individual connections using a 5 point Likert scale. Levels 1 to 5 corresponded to the following answers to the question  X  X re these people connected? X : 1 - X  X trongly disagree -Persons are not connected X , 2 - X  X is-agree -Persons do not likely know each other in person X , 3 - X  X ot known -it is not clear whether the persons know each Table 5: Top-25 patterns after 1st iteration of pattern min-i ng algorithm PatternIter applied to IMDbNet other in person or not X , 4 - X  X gree -Persons most probably know each other in person X , 5 - X  X trongly agree -Persons are strongly related or know each other well (in person) X . We assessed 600 edges (100 edges per dataset for each of our methods) sampled from the generated social networks and mixed in random order with 200 uniformly sampled pairs of unconnected nodes. Pairs of nodes generated using our approaches obtained an average rating of 4.55 (stdv 0.87), in contrast to an average of 1.81 (stdv 0.99) for unconnected nodes. We also found that just 10.2% of the social connec-tions found in our networks obtained a rating of 3 or lower. These results further confirm the high accuracy of our graph construction methods.
In this subsection we show results for the cost efficiency and accuracy of the iterative pattern mining algorithm de-scribed in Section 3.2, and analyze the phrase patterns ob-tained for social connections.
 ations of the pattern mining algorithm leading to 100,319 requests for IMDbNet and 44,089 for WikiNet and obtained over 2,100 and over 5,000 distinct patterns (occurring with frequency of at least 10) for WikiNet and IMDbNet, respec-tively. The extracted patterns provide additional informa-tion about type and topical focus of the extracted social connections. Overall the resulting WikiNet contained 20,622 nodes and 40,342 edges, and the resulting IMDbNet 35,649 nodes and 129,326 edges.

A human assessment of edges extracted by the algorithm, which was conducted in the same way as described in Sec-tion 4.4, resulted in accuracy values of more than 0.96 and 0.97 for the graph expansions of the WikiNet and IMDb-Net seed sets, respectively -with 95% confidence intervals of 0 . 01. This demonstrates the viability of our approach for constructing high-quality networks. politicians in Wikipedia and actors in IMDb.
 patterns extracted by searching for the 100 most highly weighted edges after the first iteration of actor seeded graph construction, and computing pattern ratings as described in Section 3.2. Apart from obvious -yet useful -relationship patterns like  X  X ith X  ,  X  X r X  , and  X  X n X  , many of the mined pat-terns consist of special characters such as  X , X  ,  X &amp; X , and  X   X  w hich often serve to connect persons linked to each other. Although English patterns are prevalent, our method found also useful patterns in other languages allowing for more gen-eral, multilingual retrieval of social connections, and widen-ing the scope of the mined networks. One such pattern was, for instance, the conjunction term  X  X nd X  in Spanish, French, and German (  X  X  X  ,  X  X t X  , and  X  X nd X  ). Just a small number of patterns do not describe relations between persons. This holds for instance the phrase  X  X ictures Photos of X  which oc-curred in a large spam site containing many person names. However, this pattern obtained a comparably low rating be-cause it appeared in just a single domain. Finally, we observe a few more specific patterns such as  X  X nd US president X  ,  X  X nd actors X  ,  X  X nd his wife X  that can help to reveal inter-esting information about the type of detected relationships and contexts.
 clues on domains and topical foci of extracted (sub)networks. Although general patterns like  X  X nd X  and  X  X ith X  occurred, for instance, very frequently both in the context of movies and politics we also found various domain specific differences: Patterns such as  X  X eets X  ,  X  X n conversation with X  , and  X  X s joined by X  were more dominant in the politician seed based networks, while patterns like  X  X nd director X  ,  X  X nd actress X  ,  X  X s starring alongside X  were more prominent in the movie domain.

In order to obtain the most discriminative terms from the patterns, we computed the Mutual Information (MI) mea-sure [24] from information theory, which measures how much the joint distribution of features (terms from patterns in our case) and categories deviates from a hypothetical dis-tribution in which features and categories ( X  X olitics X  and  X  X ovies X ) are independent of each other. Table 6 shows the top-50 representative stemmed words automatically ex-tracted from our query patterns for the politician and actor seeded networks described in Section 4.1. Many of the terms in the patterns falling into the politics category describe per-sonal roles like leadership (  X  X inist X  ,  X  X resid X  ,  X  X enat X  ) and peripheral or assisting positions (  X  X uard X  ,  X  X ssist X  ,  X  X ecre-tari X  ), as well as concepts related to competition (  X  X efend X  ,  X  X core X  ,  X  X eat X  ). In contrast, terms from patterns in the movie domain mostly refer to actors (  X  X tar X  ,  X  X ctor X  ,  X  X c-tress X  ), film shooting (  X  X ast X  ,  X  X creenwrit X  ,  X  X lai X  ), and fam-ily relations (  X  X usband X  ,  X  X ister X  ,  X  X oyfriend X  ). This result indicates that terms found in patterns are often strongly cor-related with social communities, and illustrates the potential merit of using machine learning techniques for domain spe-cific selection of pattern candidates. This opens promising directions for focused, topic-oriented network expansion.
We have introduced efficient methods for extracting so-cial networks from unstructured Web data using connectiv-ity search queries. Our graph expansion algorithms lever-age pattern based query mining enhanced by a bootstrap-ping approach for finding new query phrase patterns and by methods for intelligently prioritizing nodes. Our evaluation shows the applicability of our methods for extracting large scale social networks, and demonstrates the high accuracy of our approach. We also found that popularity and novelty of nodes are important criteria for controlling the network con-struction process: Popularity of nodes can be leveraged for efficiently extracting networks with more connections and higher density, while exploiting novelty is useful for faster exploration of more entities. An in-depth analysis of the characteristics of the extracted networks sheds additional light on information obtained though connectivity queries and on properties of our algorithms.

In our future work we aim to analyze pattern to reveal sen-timent and other information about the social connections found: Are the linked individuals friends or foes? Do they have a personal or private connection? Are the relation-ships bidirectional or rather unidirectional? Furthermore, we plan to improve the efficiency of our algorithms by priori-tizing search patterns based on the context of an entity using observed structures in graphs as training data for machine learning approaches. Finally, we aim to study strategies for extracting social graphs in a way that allows for simultane-ously detecting communities in an efficient way. We think that this work has direct applications to social graph ex-ploration and people search and provides a foundation for interesting analyses and findings about social networks and communities. T his work is partly funded by the European Research Council under ALEXANDRIA (ERC 339233) and by the European Commission FP7 under QualiMaster (grant agree-ment No. 619525). [1] A. Anagnostopoulos, R. Kumar, and M. Mahdian. [2] N. Bach and S. Badaskar. A Review of Relation [3] C. Bird, A. Gourley, P. Devanbu, M. Gertz, and [4] M. R. Bouadjenek, H. Hacid, and M. Bouzeghoub. [5] M. J. Cafarella, J. Madhavan, and A. Halevy.
 [6] X. Canaleta, P. Ros, A. Vallejo, D. Vernet, and [7] P. Cimiano, S. Handschuh, and S. Staab. Towards the [8] P. Cimiano, G. Ladwig, and S. Staab. Gimme X  the [9] D. K. Elson, N. Dames, and K. R. McKeown.
 [10] L. W. et al. Building the social graph of the history of [11] O. Etzioni, M. Cafarella, D. Downey, S. Kok, A.-M. [12] A. Goyal, F. Bonchi, and L. V. Lakshmanan. Learning [13] I. Guy, N. Zwerdling, I. Ronen, D. Carmel, and [14] K. Gwet. Handbook of Inter-rater Reliability: The [15] J. He, Y. Liu, Q. Tu, C. Yao, and N. Di. Efficient [16] A. Jain and P. Pantel. Identifying comparable entities [17] Z. Jiang, L. Ji, J. Zhang, J. Yan, P. Guo, and N. Liu. [18] X. Jin, S. Spangler, R. Ma, and J. Han. Topic initiator [19] C. Karbeyaz, E. Can, F. Can, and M. Kalpakli. A [20] H. A. Kautz, B. Selman, and M. A. Shah. The hidden [21] J. M. Kleinberg. Hubs, authorities, and communities. [22] N. Konstantinova. Review of relation extraction [23] A. N. Langville and C. D. Meyer. Google X  X  PageRank [24] C. Manning, P. Raghavan, H. Schutze, and [25] Y. Matsuo, J. Mori, M. Hamasaki, K. Ishida, [26] Y. Matsuo, H. Tomobe, and T. Nishimura. Robust [27] P. Mika. Flink: Semantic web technology for the [28] A. Mohaisen, A. Yun, and Y. Kim. Measuring the [29] M. K. M. Nasution and S. A. Noah. Superficial [30] R. Nuray-Turan, Z. Chen, D. V. Kalashnikov, and [31] L. Page, S. Brin, R. Motwani, and T. Winograd. The [32] P. Pantel and M. Pennacchiotti. Espresso: Leveraging [33] M. Pasca. Acquisition of categorized named entities [34] J. Tang, J. Zhang, L. Yao, J. Li, L. Zhang, and Z. Su. [35] A. Yates, M. Cafarella, M. Banko, O. Etzioni, [36] S. Ye and S. Wu. Measuring message propagation and [37] P. S. Yu, X. Li, and B. Liu. On the temporal
