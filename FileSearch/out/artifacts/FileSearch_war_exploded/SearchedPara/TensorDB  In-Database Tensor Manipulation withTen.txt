 Today X  X  data management systems increasingly need to sup-port both tensor-algebraic operations (for analysis) as well as relational-algebraic operations (for data manipulation and integration). Tensor decomposition techniques are com-monly used for discovering underlying structures of multi-dimensional data sets. However, as the relevant data sets get large, existing in-memory schemes for tensor decomposi-tion become increasingly ineffective and, instead, memory-independent solutions, such as in-database analytics, are ne-cessitated. We introduce an in-database analytic system for efficient implementations of in-database tensor decomposi-tions on chunk-based array data stores, so called, TensorDB. TensorDB includes static in-database tensor decomposition and dynamic in-database tensor decomposition operators. TensorDB extends an array database and leverages array op-erations for data manipulation and integration. TensorDB supports complex data processing plans where multiple re-lational algebraic and tensor algebraic operations are com-posed with each other.
 H.2.8 [ Database Management ]: Database Applications X  Data mining Tensor Decomposition; In-Database Tensor Decomposition
Multidimensional data have various representations. As well as the tensor model provides a natural representation in modeling multidimensional data, the availability of math-ematical tools, such as tensor decomposition, that support multi-aspect analysis of multidimensional data promotes the use of tensors in many application domains including scien-tific data management, sensor data management, and social This work is partially funded by NSF grants 116394,  X  X an-Kloud: Data Partitioning and Resource Allocation Strate-gies for Scalable Multimedia and Social Media Analysis X  and 1016921,  X  X ne Size Does Not Fit All: Empowering the User with User-Driven Integration X  To support a tensor model and tensor algorithms such as CP and Tucker decompositions for data analysis, MATLAB-based in-memory linear algebra operations are widely used. However, these implementations are limited with the amount of memory available to the MATLAB software. As the today X  X  data sets get large, these in-memory based schemes for tensor decomposition become increasingly in-effective. Moreover tensor decomposition operations often result in large intermediary data that renders purely in-memory implementations of tensor-decomposition difficult. In-database tensor decomposition operation on disk-resident tensor data can be a solution to eliminate the challenge posed by the memory limitations.
We introduce an in-database analytic system for efficient implementations of in-database tensor decompositions on chunk-based array data stores, so called, TensorDB.
TensorDB extends an open source software platform of data management and analytic system for array data, SciDB [1]. As an extension of SciDB, TensorDB shares the basic system architecture and the query languages of SciDB and performs all-in-one from the query interface to the query execution for tensor-relational operations.

TensorDB provides static and dynamic in-database tensor decomposition operators that address the constraints im-posed by the main memory limitations when handling large and high-order tensor data.

TensorDB is based on a tensor-relational model (TRM) [7], which brings together relational algebraic opera-tions (for data manipulation and integration) and tensor al-gebraic operations (for data analysis). Leveraging the SciDB engine and SciDB languages, TensorDB supports tensor-relational query plans of tensor decomposition operations, along with relational operations such as selection and join operations, which we will demonstrate.
 Figure 2 illustrates the query processing workflow of TensorDB for tensor-relational query plans using tensor-algebraic and relational-algebraic operations.
The array model [1, 3] is a natural representation to store multidimensional data and facilitate multidimensional data analysis. How arrays are organized and stored depends largely on whether they are dense or sparse. Approaches to represent array based data can be broadly categorized into four types. (a) The first approach is to represent the array in the form of a table. (b) A second approach is to use blob type in a relational database as a storage layer for array data [3]. (c) Sparse matrices can also be represented using a graph-based abstraction [9]. (d) The last approach is to consider a native array model and an array-based storage scheme, such as a chunk-store, as in SciDB [1].

SciDB uses multidimensional arrays as its basic storage and processing unit. Arrays are partitioned into chunks and each chunk is processed in a parallel manner, whenever pos-sible. SciDB also provides various chunk-based array ma-nipulation operations, including linear algebra operators.
Most array databases provide limited built-in array oper-ations and leave the responsibility of implementing complex operations through user-defined functions (UDF) and ag-gregates (UDA) [5] to the users. One critical limitation of
TensorDB supports tensor-relational query plans needed for both data manipulation and integration, and data anal-ysis. SciDB provides data manipulation operations such as SELECT , subarray , slice , etc. and data integration opera-tions such as JOIN . For details of the SciDB operators, see the SciDB user guide [1]. TensorDB provides tensor decom-position operations for data analysis, e.g., cp_als.py , which is a python application for the CP decomposition. 2 Figure 4 shows examples for these query plans.
We describe a number of demonstration scenarios for tensor-relational query plans. We use tensors of differ-ent densities, different tensor representations: sparse ten-sor representation (shortly referred to as STR), where only non-zero entries are kept, and dense tensor representation (DTR), and different dimensionality and numbers of modes.
Example 3.1. slice and cp_als operations.  X 
Example 3.2. subarray and cp_als operations.  X 
Example 3.3. join and cp_als operations.  X 
The source code and user guide of TensorDB are available at https://github.com/mkim48/TensorDB .
