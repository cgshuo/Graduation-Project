 Generating navigation instructions in the real world for pedestrians is an interesting research problem for researchers in both computational linguistics and geo-informatics (Dale et al., 2003; Richter and Duckham, 2008). These systems generate verbal route directions for users to go from A to B, and techniques range from giving  X  X  priori X  route direc-tions (i.e. all route information in a single turn) and incremental  X  X n-situ X  instructions, to full interactive dialogue systems (see section 4). One of the major problems in developing such systems is in evaluat-ing them with real users in the real world. Such eval-uations are expensive, time consuming and painstak-ing to organise, and are carried out not just at the end of the project but also during the development cycle. Consequently, there is a need for a common platform to effectively compare the performances of verbal navigation systems developed by different teams us-ing a variety of techniques (e.g. a priori vs. in-situ or rule-based vs. machine learning).

This demonstration system brings together exist-ing online data resources and software toolkits to create a low-cost framework for evaluation of pedes-trian route instruction systems. We have built a web-based environment containing a simulated real world in which users can simulate walking on the streets of real cities whilst interacting with differ-ent navigation systems. This evaluation framework will be used in the near future to evaluate a series of instruction-giving dialogue systems. The GIVE challenge developed a 3D virtual in-door environment for development and evaluation of indoor pedestrian navigation instruction systems (Koller et al., 2007; Byron et al., 2007). In this framework, users can walk through a building with rooms and corridors, similar to a first-person shooter game. The user is instructed by a navigation sys-tem that generates route instructions. The basic idea was to have several such navigation systems hosted on the GIVE server and evaluate them in the same game worlds, with a number of users over the in-ternet. Conceptually our work is very similar to the GIVE framework, but its objective is to evaluate sys-tems that instruct pedestrian users in the real world. The GIVE framework has been successfully used for comparative evaluation of several systems generat-ing instructions in virtual indoor environments.
Another system,  X  X irtual Navigator X , is a simu-lated 3D environment that simulates the real world for training blind and visually impaired people to learn often-used routes and develop basic naviga-tion skills (McGookin et al., 2010). The framework uses haptic force-feedback and spatialised auditory feedback to simulate the interaction between users and the environment they are in. The users simulate walking by using arrow keys on a keyboard and by using a device that works as a 3D mouse to simulate a virtual white cane. Auditory clues are provided to the cane user to indicate for example the differ-ence between rush hour and a quiet evening in the environment. While this simulated environment fo-cusses on the providing the right kind of tactile and auditory feedback to its users, we focus on provid-ing a simulated environment where people can look at landmarks and navigate based on spatial and vi-sual instructions provided to them.

User simulation modules are usually developed to train and test reinforcement learning based in-teractive spoken dialogue systems (Janarthanam and Lemon, 2009; Georgila et al., 2006; Schatzmann et al., 2006). These agents replace real users in interac-tion with dialogue systems. However, these models simulate the users X  behaviours in addition to the en-vironment in which they operate. Users X  dialogue and physical behaviour are dependent on a number of factors such as a user X  X  preferences, goals, knowl-edge of the environment, environmental constraints, etc. Simulating a user X  X  behaviour realistically based on many such features requires large amounts of data. In contrast to this approach, we propose a sys-tem where only the spatial and visual environment is simulated.

See section 4 for a discussion of different pedes-trian navigation systems. The evaluation framework architecture is shown in figure 1. The server side consists of a broker module, navigation system, gameworld server, TTS engine, and a city model. On the user X  X  side is a web-based client that consists of the simulated real-world and the interaction panel. 3.1 Game-world module Walking aimlessly in the simulated real world can be a boring task. Therefore, instead of giving web users navigation tasks from A to B, we embed navigation tasks in a game-world overlaid on top of the simu-lated real world. We developed a  X  X reasure hunting X  game which consists of users solving several pieces of a puzzle to discover the location of the treasure chest. In order to solve the puzzle, they interact with game characters (e.g. a pirate) to obtain clues as to where the next clue is. This sets the user a number of navigation tasks to acquire the next clues until they find the treasure. In order to keep the game interest-ing, the user X  X  energy depletes as time goes on and they therefore have limited time to find the treasure. Finally, the user X  X  performance is scored to encour-age users to return. The game characters and enti-ties like keys, chests, etc. are laid out on real streets making it easy to develop a game without develop-ing a game-world. New game-worlds can be easily scripted using Javascript, where the location (lati-tude and longitude) and behaviour of the game char-acters are defined. The game-world module serves game-world specifications to the web-based client. 3.2 Broker The broker module is a web server that connects the web clients to their corresponding different naviga-tion systems. This module ensures that the frame-work works for multiple users. Navigation systems are instantiated and assigned to new users when they first connect to the broker. Subsequent messages from the users will be routed to the assigned navi-gation system. The broker communicates with the navigation systems via a communication platform thereby ensuring that different navigation systems developed using different languages (such as C++, Java, Python, etc) are supported. 3.3 Navigation system The navigation system is the central component of this architecture, which provides the user instruc-tions to reach their destinations. Each navigation system is run as a server remotely. When a user X  X  client connects to the server, it instantiates a navi-gation system object and assigns it to the user ex-clusively. Every user is identified using a unique id (UUID), which is used to map the user to his/her re-spective navigation system. The navigation system is introduced in the game scenario as a buddy sys-tem that will help the user in his objective: find the treasure. The web client sends the user X  X  location to the system periodically (every few seconds). 3.4 TTS engine Alongside the navigation system we use the Cere-proc text-to-speech engine that converts the utter-ances of the system into speech. The URL of the audio file is then sent to the client X  X  browser which then uses the audio plugin to play the synthesized speech to the user. The TTS engine need not be used if the output modality of the system is just text. 3.5 City Model The navigation system is supported by a database called the City Model. The City Model is a GIS database containing a variety of data required to sup-port navigation tasks. It has been derived from an open-source data source called OpenStreetMaps 1 . It consists of the following:  X  Street network data: the street network data  X  Amenities: such as ATMs, public toilets, etc.  X  Landmarks: other structures that can serve as
The amenities and landmarks are represented as nodes (with latitude and longitude information). The City Model interface API consists of a number of subroutines to access the required information such as the nearest amenity, distance or route from A to B, etc. These subroutines provide the interface between the navigation systems and the database. 3.6 Web-based client The web-based client is a JavaScript/HTML pro-gram running on the user X  X  web browser software (e.g. Google Chrome). A snapshot of the webclient is shown in figure 2. It has two parts: the streetview panel and the interaction panel.
 Streetview panel: the streetview panel presents a simulated real world visually to the user. When the page loads, a Google Streetview client (Google Maps API) is created with an initial user coordinate. Google Streetview is a web service that renders a panoramic view of real streets in major cities around the world. This client allows the web user to get a panoramic view of the streets around the user X  X  vir-tual location. A gameworld received from the server is overlaid on the simulated real world. The user can walk around and interact with game characters using the arrow keys on his keyboard or the mouse. As the user walks around, his location (stored in the form of latitude and longitude coordinates) gets updated locally. Streetview also returns the user X  X  point of view (0-360 degrees), which is also stored locally. Interaction panel: the web-client also includes an interaction panel that lets the user interact with his buddy navigation system. In addition to user lo-cation information, users can also interact with the navigation system using textual utterances or their equivalents. We provide users with two types of in-teraction panel: a GUI panel and a text panel. In the GUI panel, there are GUI objects such as buttons, drop-down lists, etc. which can be used to construct requests and responses to the system. By clicking the buttons, users can send abstract semantic repre-sentations (dialogue actions) that are equivalent to their textual utterances. For example, the user can request a route to a destination by selecting the street name from a drop down list and click on the Send button. Similarly, users can click on  X  X es X ,  X  X o X ,  X  X K X , etc. buttons to respond to the system X  X  ques-tions and instructions. In the text panel, on the other hand, users are free to type any request or response they want. Of course, both types of inputs are parsed by the navigation system. We also plan to add an ad-ditional input channel that can stream user speech to the navigation system in the future. This framework can be used to evaluate a variety of navigation systems. Route navigation has been an interesting research topic for researchers in both geoinformatics and computational linguistics alike. Several navigation prototype systems have been de-veloped over the years. Although there are several systems that do not use language as a means of com-munication for navigation tasks (instead using geo-tagged photographs (Beeharee and Steed, 2006; Hi-ley et al., 2008), haptics (Bosman et al., 2003), mu-sic (Holland et al., 2002; Jones et al., 2008), etc), we focus on systems that generate instructions in natu-ral language. Therefore, our framework does not in-clude systems that generate routes on 2D/3D maps as navigation aids.

Systems that generate text/speech can be further classified as follows:  X   X  X  priori X  systems: these systems generate  X   X  X n-situ X  or incremental route instruction sys- X  Interactive navigation systems: these systems Navigation systems can be evaluated using two kinds of metrics using this framework. Objective metrics such as time taken by the user to finish each navigation task and the game, distance trav-elled , number of wrong turns , etc. can be directly measured from the environment. Subjective met-rics based on each user X  X  ratings of different features of the system can be obtained through user satisfac-tion questionnaires. In our framework, users are re-quested to fill in a questionnaire at the end of the game. The questionnaire consists of questions about the game, the buddy, and the user himself, for exam-ple:  X  Was the game engaging?  X  Would you play it again (i.e. another similar  X  Did your buddy help you enough?  X  Were the buddy instructions easy to under- X  Were the buddy instructions ever wrong or mis- X  If you had the chance, will you choose the same  X  How well did you know the neighbourhood of We aim to evaluate navigation systems under a vari-ety of scenarios.  X  Uncertain GPS: GPS positioning available in  X  Output modalities: the output of navigation  X  Noise in user speech: for systems that take  X  Adaptation to users: returning users may have
Errors in GPS positioning of the user and noise in user speech can be simulated at the server end, thereby creating a range of challenging scenarios to evaluate the robustness of the systems. We plan to organise a shared challenge for outdoor pedestrian route instruction generation, in which a variety of systems can be evaluated. Participating research teams will be able to use our interfaces and modules to develop navigation systems. Each team will be provided with a development toolkit and documentation to setup the framework in their local premises for development purposes. Devel-oped systems will be hosted on our challenge server and a web based evaluation will be organised in con-sultation with the research community (Janarthanam and Lemon, 2011). At the demonstration, we will present the evaluation framework along with a demo navigation dialogue system. The web-based client will run on a laptop using a high-speed broadband connection. The nav-igation system and other server modules will run on a remote server.
 The research has received funding from the European Community X  X  Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 216594 (SPACEBOOK project www.spacebookproject.org).

