 The complexity of biological systems provides a great diversity of correlations among genes/gene clusters. Analysis of these regulatory relationships can provide insights into the interactions of genes/gene clusters, which facilitates the study of genetic regulatory networks.

Table 1(a) shows an example of microarray dataset, D, consisting of a set of rows and a set of columns, where the rows denote genes, G = { g 1 ,g 2 ..., g m } , and the columns denote different time points, T = { t 1 ,t 2 ..., t n } . Note that the expression value of a gene, g i , on a certain time point, t j , is denoted by d i,j .For simplicity, certain cells have been left blank in the table. We assume that these are filled by some random expression values. Table 1(b) is a transposed version of the running example in Table 1(a) after some row permutations, where two different regulation groups emerge. The first one, shadowed and enveloped by a solid polygon, is plotted in Figure 1(a) against every gene X  X  expression profile within it. Similarly, Figure 1(b) corresponds to the second one not shadowed but enveloped by a dashed rectangle. Note: any pair of genes within a regula-tion group must have one of known regulatory relationships. For example, when present the scaling pattern [3] since d 6 ,T =3  X  d 3 ,T , and genes 3 and 8 present the shifting-and-scaling pattern [3,4] since d 8 ,T =4  X  d 3 ,T + 5. All co-regulations shown in Figure 1(b) are synchronous since the products of a gene immedi-ately affect other genes X  exp ression. Moreover, all synchronous co-regulations [5] can be generalized into two categories: activation and inhibition .Intheacti-vation process, an increase (resp. decrease) i n certain genes X  expression levels will increase (resp. decrease) some other genes X  expression levels, such as the simultaneous pattern [6] between genes 1 and 4 in Figure 1(a), but during the inhibition process, the case is just the reverse, such as the inverted pattern [6] between genes 1 and 5.

In fact, from time-series gene expression data, it is apparent that most genes do not co-regulate each other simultaneously but after a certain time lag [7], which we call asynchronous co-regulation asshowninFigure1(a).Also,itis divided into activation, such as time-shifting pattern between genes 1 and 7, and inhibition, such as inverted-time-shifting pattern between genes 1 and 2.
Existing methods used for identifying regulatory relationships from microar-ray data fall into two major categories: the pattern/tendency-based subspace clustering [8,9] and the  X  X wo genes, one relationship per alignment X  approach [6]. However, the former usually considers gene expression levels for pure shift-ing [2, 1] or pure scaling [3] patterns under the same subset of conditions, and does not take any synchronous relationships into consideration . So it ignores many additional relationships implicit in expression time-course. The process of the latter can be characterized as  X  X wo genes, one relationship per alignment X , which means that each alignment can deci de only one relationship between two genes. Such an approach in some ways is not very computationally efficient. Moreover, since this approach evaluates the expression profile similarity of genes over all conditions, it is not sensitive to the case where a small but interesting part of the genes is co-regulated while th ere is no distinct relationship between the remaining parts.

The main contributions of this work are: (1) We propose a new cluster-ing model, namely R eg-C luster, to capture all synchronous and asynchronous co-regulation patterns in a holistic manner, which is a generalization of the pattern/tendency-based subspace clustering. (2) We propose a new coding-based approach with which two genes are co-regulated if they have the same gcode, and propose a new tree-based clustering algorithm, i.e. FBLD, with some prun-ing rules, to efficiently find all significant reg-clusters. (3) Based on the proposed coding schema, the more detailed co-regulation information can be easily derived from the resulting clusters, such as activation or inhibition and how many time points lagged between activated or inhibited genes. (4) We conducted extensive experimental studies on both real data sets and synthetic data sets to confirm the effectiveness and effici ency of our algorithm.
 The remainder of this paper is organi zed as follows: Section 2 presents the R eg-C luster model and the problem statem ent. Section 3 gives the FBLD al-gorithm in detail. Experimental results and analysis are shown in Section 4. Finally, Section 5 concludes this paper. experimental time points. A two dimensional microarray time series dataset is a real-valued m  X  nmatrix D = G  X  T = { d ij } ,where i  X  [1 ,m ], j  X  [1 ,n ], two dimensions of which correspond to gen es and times respectively. Each entry d ij records the expression value of gene g i at time point t j .
 T to be an l -segment regarding the number of prototypal subsequence of length 2, because a prototypal subsequence of length 2 is a basic regulation unit. The number of elements in T ,denoted | T | , is called the length of T .
 Definition 2. Significant Regulation. Given a gene, g a ,anda 1 -segment, &lt;t i j , t i k &gt; ,wesaytheregulationofgene g a from time point t i j to t i k is sig-nificant. A significant regulation is up-regulated when d a,i k  X  d a,i j &gt; X  ,denoted R R eg ( g a ,( &lt;t i j , t i k &gt; )) =  X   X .
 Definition 3. gCode. Given a gene, g a ,andan l -segment, T l = &lt;t i 1 , t t properties: (1) O ( , )=1; O ( , )=1; (2) O ( , )=0; O ( , )=0; Definition 4. Synchronous Co-regulation. For two given genes, g a and g b , T )=gCode( g b , T l ), then we say g a and g b to be synchronous co-regulated each k  X  [1 ,l ] , the synchronous co-regulation between g regulation between g a and g b is inhibition.
 Definition 5. Asynchronous Co-regulation. Given two genes, g a and g b ,ifex-ists two l -segments, T l = &lt;t i 1 , t i 2 ,  X  X  X  , t i l +1 &gt; and T l = &lt;t i gCode( g a , T l )=gCode( g b , T l )and t i d ( &gt; 0) is a constant time-lag, then we say g a and g b to be asynchronous co-where k  X  [1 ,l ] ,wesay g a asynchronous activation co-regulate g b after d time-lags. Otherwise, if R eg ( g a , &lt;t i k ,t i k +1 &gt; )=  X  X  eg ( g b , &lt;t i g a asynchronous inhibition co-regulate g b after d time-lags.
 Definition 6. R eg-Cluster. Let C = r i =1 G i  X  T i ,where G i is a subset of genes ( G if and only if: (1)  X  T i ,T j , 1  X  i  X  j  X  r , | T i | = | T j | ,and(2)  X  g a  X  G i ,  X  g T = &lt;t j 1 ,t j 2 ,  X  X  X  ,t j k &gt; .
 Problem Statement. Given: (1) D , a microarray data matrix, (2)  X  ,auser-specified maximum regulation threshold, (3) min t , a minimal number of time points, and (4) min g , a minimal number of genes, the task of mining is to find all maximal reg-clusters that satisfy all the given thresholds. The R eg-C luster algorithm has two main steps: (1) Construct initial R eg-tree. The preliminary reg-clusters on 1-segment s are preserved in this step, (2) Develop initial R eg-tree recursively to find all maximal reg-clusters. Unlike the previous algorithms, we take a  X  X irst breadth-first and last depth-first X  searching strategy to make the algorithm more efficient while the pruning rules special for breadth-first and depth-first are applied respectively. 3.1 Construct Initial R eg-Tree We first look at the appearance of the initial R eg-tree, and then describe how it is developed recursively.

Figure 2 (a) shows the initial R eg-tree constru cted from Table 1, which con-tains the reg-clusters on 1-segments according to Definition 6. There are two branches under each leaf node. One, with  X   X , represents all genes under it are significantly up-regulated, and the other, with  X   X , represents all genes under it are significantly down-regulated. Each reg-cluster C = r i =1 G i  X  T i is composed of a set of numbered buckets. We call the buckets with number  X 0 X  baseline buck-ets since the prototypal subsequence, T 1 , of a baseline bucket is composed of the time points in the path from the root to the node that the reg-cluster C linked to. The number within each bucket denotes the time intervals that T i is lagged behind T 1 . For example, in Figure 2 (a), the leftmost reg-cluster under t 1 t 3 is composed of five buckets. The prototypal subsequence of the baseline bucket, &lt;t 2 ,t 4 &gt; since the bucket X  X  number is 1. Similarly, the prototypal subsequence of the third bucket is &lt;t 3 ,t 5 &gt; ,andsoon. 3.2 R eg-Tree for 2-Segments In this subsection, we construct a R eg-tree with height 2 for all 2-segments, based on the initial R eg-tree with height 1 for all 1-segments.

In a R eg-tree with height 2, a 2-segment, T 2 = &lt;t i ,t j ,t k &gt; , is generated by There are two clusters for every 2-segment, T 2 , in a leaf node. For convenience, we denote the two clusters as L -cluster and R -cluster respectively. The L -cluster up or both down), i.e. the gCodes of genes in the L -cluster are all 1. Similarly, regulations (up/down or down/up), i.e. the gCodes of genes in the R -cluster are all 0. It is important to know that all co-regulated genes are clustered into either L -cluster or R -cluster.

Next, we explain the R eg-tree construction for 2-segments below using an example. Consider the R eg-tree for 1-segments in Figure 2 (a). There are two and the other, with  X   X , contains { g 5 } . Also, there are two baseline buckets for the 1-segment &lt;t 2 ,t 4 &gt; .One,with X   X , contains { g 1 ,g 4 } , and the other, with  X   X , contains { g 5 } .Inthe R eg-tree for 2-segments in Figure 2 (b), the 2-segment, &lt;t 1 ,t 2 ,t 4 &gt; , has two clusters, L -cluster and R -cluster, each of which consists of a set of sub-clusters with different time-lag d . They are constructed as follows. 3.3 R eg-Tree for l -Segments( l&gt; 2) Hereafter, we start to develop the R eg-tree recursively. Unlike the previous al-gorithms, we propose a  X  X irst breadth-first and last depth-first X  searching strat-egy to make the reg-cluster algorithm more efficient. As its name implies, the development consists of two phases, i.e. the first phase, BFD( X  X readth-first de-velopment X ), and the second phase, DFD( X  X epth-first development X ).

In BFD phase, different from previous work [3], there is no need to grow R eg-tree level by level until R eg-tree is with height min t  X  1. We can skip several levels of R eg-tree based on the following min t -based jumping pruning rule. l )) -segment, jumping over ( k +1) -segment  X  MIN ( min t , ( k + l  X  1)) -segment, if Once the height of R eg-tree grows up to min t  X  1, the development switches to the next phase, DFD. DFD allows a special pruning: Pruning Rule 2. Given two pathes X and Y of a R eg-tree, where X corre-If X  X  Y and the reg-clusters under X is the same as those under Y , then the t ,t i 2 ,t i m can be pruned because they are guaranteed not to contain any maximal reg-cluster.
FBLD is a hybrid of BFD and DFD. It first develops R eg-tree in a breadth-first way. Once the height of R eg-tree grows up to min t  X  1, the development switches to the next phase, i.e. DFD. Pruning rule 1 and pruning rule 2 can be used in FBLD successively, so it outperforms single BFD or single DFD in performance. Limited by space, our c omplete pseudocode of FBLD is omit. We implemented our approaches in C++. For simplicity, the basic breadth-first approach is called BBFS, the basic depth-first approach is called BDFS, and the first breadth-first and last depth-first approach is called FBLD. Since no other work to our best knowledge can discover the reg-clusters in the same manner ,we only compare the efficiency and the eff ectiveness of the three approaches on a 2.4-GHz DELL PC with 512 MB main memory running Windows XP. For the real dataset we use Spellman X  X  yeast dataset(downloaded from http://genome-www.stanford.edu/cellcycle/data/rawda ta/), which contains 6178 genes at 35 time points. The synthetic datasets can be obtained by a data generator algo-rithm [10] with three input parameters: number of genes (#gene), number of conditions (#sample), and number of embedded clusters (#cluster). 4.1 Efficiency We first evaluate the performance of the three approaches, i.e. BBFS, BDFS and FBLD, on synthetic data sets as we increase the number of genes and the number of time points in the data sets. The average run times of the three algorithms are illustrated in Figure 3 respectively, where we vary the parameters invoked with min g =30, min t =5, and  X  =0.01 .
Figure 3(a) shows the scalability for three approaches under different number of genes, when the number of time points is fixed to 6. Figure 3(b) shows the scalability for three approaches under different number of time points, when the number of genes is fixed to 30. FBLD cuts down the search space significantly, so it spends the least response time. BBFS need to decide which buckets(reg-clusters) can be joined with a given bucket during the development of R eg-tree, however, BDFS need not. So BBFS will spend more time than BDFS.

Next, we study the impact of the parameters( min g and min t )towardsthe response time on the real datasets. The results are shown in Figure 4. As min g and min t increase, the response time shortened. 4.2 Effectiveness Every reg-cluster can provide a further in sight into the concrete relationships between co-regulated genes. Figure 5 deliv ers a hierarchical structure of the reg-cluster 18 discovered from Spellman X  X  dataset. The root node summarizes all expression profiles of 179 genes on 35 time points, which corresponds to the whole reg-cluster 18. We first derive a set of sub-clusters, based on the time-lag d ,at the second level to identify the synchronous/asynchronous co-regulation. Genes taken from the same sub-cluster of level 2 must synchronous co-regulate each other, either activation or inhibition. G enes taken from different sub-clusters of level 2 must asynchronous co-regulate each other, either activation or inhibition, and the accuracy value of time-lag can be inferred by the difference of starting time point of the two different sub-clusters. For more details, i.e. activation or inhibition, we drill down to level 3. Genes from the same sub-cluster must synchronous activation co-regulate each other; Genes from different sub-clusters but with the same parent node, must synchronous inhibition co-regulate each other; Genes from different sub-cluste rs and with different parent nodes must asynchronous co-regulate. If they are all the left(right) children, the relationship is activation. If some are the left children and some are the right children, the relationship is inhibition. In this paper, we have proposed a new maximal subspace co-regulated gene clustering model, R eg-C luster, for simultaneously identifying all synchronous and asynchronous co-regulations from time series gene expression data. Based on a proposed coding schema, i.e. gCode, genes with any of the known co-regulation relationships, i.e. synchronous activation, synchronous inhibition, asynchronous activation and asynchronous inhibition, are grouped together. A  X  X irst breadth-first and last depth-first X  searching strategy with several useful pruning rules is also devised to make the maximal reg-clusters mining more efficient. Further, the detailed and complete co-regulation information, which facilitates the study of genetic regulatory networks, can be easily derived from the resulting clusters. This work is supported by National Key Technologies Research and Development programming in the 10th Five-year(2004BA721A05) of P.R.China.

