 Twitter and other micro-blogging services are highly attractive for information extraction and text mining purposes, as they offer large volumes of real-time data, with around 65 millions tweets posted on Twit-ter per day in June 2010 (Twitter, 2010). The quality of messages varies significantly, however, ranging from high quality newswire-like text to meaningless strings. Typos, ad hoc abbreviations, phonetic sub-stitutions, ungrammatical structures and emoticons abound in short text messages, causing grief for text processing tools (Sproat et al., 2001; Ritter et al., 2010). For instance, presented with the input u must be talkin bout the paper but I was thinkin movies ( X  X ou must be talking about the paper but I was thinking movies X ), 1 the Stanford parser (Klein and Manning, 2003; de Marneffe et al., 2006) analyses bout the paper and thinkin movies as a clause and noun phrase, respectively, rather than a prepositional phrase and verb phrase. If there were some way of preprocessing the message to produce a more canon-ical lexical rendering, we would expect the quality of the parser to improve appreciably. Our aim in this paper is this task of lexical normalisation of noisy English text, with a particular focus on Twitter and SMS messages. In this paper, we will collectively refer to individual instances of typos, ad hoc abbre-viations, unconventional spellings, phonetic substi-tutions and other causes of lexical deviation as  X  X ll-formed words X .
 The message normalisation task is challenging. It has similarities with spell checking (Peterson, 1980), but differs in that ill-formedness in text mes-sages is often intentional, whether due to the desire to save characters/keystrokes, for social identity, or due to convention in this text sub-genre. We propose to go beyond spell checkers, in performing deabbre-viation when appropriate, and recovering the canon-ical word form of commonplace shorthands like b4  X  X efore X , which tend to be considered beyond the remit of spell checking (Aw et al., 2006). The free writing style of text messages makes the task even more complex, e.g. with word lengthening such as goooood being commonplace for emphasis. In ad-dition, the detection of ill-formed words is difficult due to noisy context.

Our objective is to restore ill-formed words to their canonical lexical forms in standard English. Through a pilot study, we compared OOV words in Twitter and SMS data with other domain corpora, revealing their characteristics in OOV word distri-bution. We found Twitter data to have an unsur-prisingly long tail of OOV words, suggesting that conventional supervised learning will not perform well due to data sparsity. Additionally, many ill-formed words are ambiguous, and require context to disambiguate. For example, Gooood may refer to Good or God depending on context. This provides the motivation to develop a method which does not require annotated training data, but is able to lever-age context for lexical normalisation. Our approach first generates a list of candidate canonical lexical forms, based on morphological and phonetic vari-ation. Then, all candidates are ranked according to a list of features generated from noisy context and similarity between ill-formed words and can-didates. Our proposed cascaded method is shown to achieve state-of-the-art results on both SMS and Twitter data.

Our contributions in this paper are as follows: (1) we conduct a pilot study on the OOV word distri-bution of Twitter and other text genres, and anal-yse different sources of non-standard orthography in Twitter; (2) we generate a text normalisation dataset based on Twitter data; (3) we propose a novel nor-malisation approach that exploits dictionary lookup, word similarity and word context, without requir-ing annotated data; and (4) we demonstrate that our method achieves state-of-the-art accuracy over both SMS and Twitter data. The noisy channel model (Shannon, 1948) has tradi-tionally been the primary approach to tackling text normalisation. Suppose the ill-formed text is T and its corresponding standard form is S , the ap-proach aims to find arg max P ( S | T ) by comput-ing arg max P ( T | S ) P ( S ) , in which P ( S ) is usu-ally a language model and P ( T | S ) is an error model. Brill and Moore (2000) characterise the error model by computing the product of operation probabilities on slice-by-slice string edits. Toutanova and Moore (2002) improve the model by incorporating pronun-ciation information. Choudhury et al. (2007) model the word-level text generation process for SMS mes-sages, by considering graphemic/phonetic abbrevi-ations and unintentional typos as hidden Markov model (HMM) state transitions and emissions, re-spectively (Rabiner, 1989). Cook and Stevenson (2009) expand the error model by introducing infer-ence from different erroneous formation processes, according to the sampled error distribution. While the noisy channel model is appropriate for text nor-malisation, P ( T | S ) , which encodes the underlying error production process, is hard to approximate accurately. Additionally, these methods make the strong assumption that a token t i  X  T only depends on s i  X  S , ignoring the context around the token, which could be utilised to help in resolving ambigu-ity.

Statistical machine translation (SMT) has been proposed as a means of context-sensitive text nor-malisation, by treating the ill-formed text as the source language, and the standard form as the target language. For example, Aw et al. (2006) propose a phrase-level SMT SMS normalisation method with bootstrapped phrase alignments. SMT approaches tend to suffer from a critical lack of training data, however. It is labor intensive to construct an anno-tated corpus to sufficiently cover ill-formed words and context-appropriate corrections. Furthermore, it is hard to harness SMT for the lexical normali-sation problem, as even if phrase-level re-ordering is suppressed by constraints on phrase segmenta-tion, word-level re-orderings within a phrase are still prevalent.

Some researchers have also formulated text nor-malisation as a speech recognition problem. For ex-ample, Kobus et al. (2008) firstly convert input text tokens into phonetic tokens and then restore them to words by phonetic dictionary lookup. Beaufort et al. (2010) use finite state methods to perform French SMS normalisation, combining the advantages of SMT and the noisy channel model. Kaufmann and Kalita (2010) exploit a machine translation approach with a preprocessor for syntactic (rather than lexical) normalisation.

Predominantly, however, these methods require large-scale annotated training data, limiting their adaptability to new domains or languages. In con-trast, our proposed method doesn X  X  require annotated data. It builds on the work on SMS text normalisa-tion, and adapts it to Twitter data, exploiting multi-ple data sources for normalisation. 3.1 Task Definition of Lexical Normalisation We define the task of text normalisation to be a map-ping from  X  X ll-formed X  OOV lexical items to their standard lexical forms, focusing exclusively on En-glish for the purposes of this paper. We define the task as follows:  X  only OOV words are considered for normalisa- X  normalisation must be to a single-token word,
Given this definition, our first step is to identify candidate tokens for lexical normalisation, where we examine all tokens that consist of alphanumeric characters, and categorise them into in-vocabulary (IV) and out-of-vocabulary (OOV) words, relative to a dictionary. The OOV word definition is somewhat rough, because it includes neologisms and proper nouns like hopeable or WikiLeaks which have not made their way into the dictionary. However, it greatly simplifies the candidate identification task, at the cost of pushing complexity downstream to the word detection task, in that we need to explic-itly distinguish between correct OOV words and ill-formed OOV words such as typos (e.g. earthquak  X  X arthquake X ), register-specific single-word abbre-viations (e.g. lv  X  X ove X ), and phonetic substitutions (e.g. 2morrow  X  X omorrow X ).

An immediate implication of our task definition is that ill-formed words which happen to coincide with an IV word (e.g. the misspelling of can X  X  as cant ) are outside the scope of this research. We also consider that deabbreviation largely falls outside the scope of text normalisation, as abbreviations can be formed freely in standard English. Note that single-word abbreviations such as govt  X  X overnment X  are very much within the scope of lexical normalisation, as they are OOV and match to a single token in their standard lexical form.

Throughout this paper, we use the GNU aspell dictionary (v0.60.6) 2 to determine whether a token is OOV. In tokenising the text, hyphenanted tokens and tokens containing apostrophes (e.g. take-off and won X  X  , resp.) are treated as a single token. Twit-ter mentions (e.g. @twitter ), hashtags (e.g. #twitter ) and urls (e.g. twitter.com ) are excluded from consid-eration for normalisation, but left in situ for context modelling purposes. Dictionary lookup of Internet slang is performed relative to a dictionary of 5021 items collected from the Internet. 3 3.2 OOV Word Distribution and Types To get a sense of the relative need for lexical nor-malisation, we perform analysis of the distribution of OOV words in different text types. In particular, we calculate the proportion of OOV tokens per mes-sage (or sentence, in the case of edited text), bin the messages according to the OOV token proportion, and plot the probability mass contained in each bin for a given text type. The three corpora we compare are the New York Times (NYT), 4 SMS, 5 and Twit-ter. 6 The results are presented in Figure 1.
Both SMS and Twitter have a relatively flat distri-bution, with Twitter having a particularly large tail: around 15% of tweets have 50% or more OOV to-kens. This has implications for any context mod-elling, as we cannot rely on having only isolated oc-currences of OOV words. In contrast, NYT shows a more Zipfian distribution, despite the large number of proper names it contains.

While this analysis confirms that Twitter and SMS are similar in being heavily laden with OOV tokens, it does not shed any light on the relative similarity in the makeup of OOV tokens in each case. To further analyse the two data sources, we extracted the set of OOV terms found exclusively in SMS and Twit-ter, and analysed each. Manual analysis of the two sets revealed that most OOV words found only in SMS were personal names. The Twitter-specific set, on the other hand, contained a heterogeneous col-lection of ill-formed words and proper nouns. This suggests that Twitter is a richer/noisier data source, and that text normalisation for Twitter needs to be more nuanced than for SMS.

To further analyse the ill-formed words in Twit-ter, we randomly selected 449 tweets and manu-ally analysed the sources of lexical variation, to determine the phenomena that lexical normalisa-tion needs to deal with. We identified 254 to-ken instances of lexical normalisation, and broke them down into categories, as listed in Table 1.  X  X etter X  refers to instances where letters are miss-ing or there are extraneous letters, but the lexi-cal correspondence to the target word form is triv-ially accessible (e.g. shuld  X  X hould X ).  X  X umber Substitution X  refers to instances of letter X  X umber substitution, where numbers have been substituted for phonetically-similar sequences of letters (e.g. 4  X  X or X ).  X  X etter&amp;Number X  refers to instances which have both extra/missing letters and number substitu-tion (e.g. b4  X  X efore X ).  X  X lang X  refers to instances of Internet slang (e.g. lol  X  X augh out loud X ), as found in a slang dictionary (see Section 3.1).  X  X ther X  is the remainder of the instances, which is predomi-nantly made up of occurrences of spaces having be-ing deleted between words (e.g. sucha  X  X uch a X ). If a given instance belongs to multiple error categories (e.g.  X  X etter&amp;Number X  and it is also found in a slang dictionary), we classify it into the higher-occurring category in Table 1.

From Table 1, it is clear that  X  X etter X  accounts for the majority of ill-formed words in Twitter, and that most ill-formed words are based on morpho-phonemic variations. This empirical finding assists in shaping our strategy for lexical normalisation. Our proposed lexical normalisation strategy in-volves three general steps: (1) confusion set gen-eration, where we identify normalisation candidates for a given word; (2) ill-formed word identification, where we classify a word as being ill-formed or not, relative to its confusion set; and (3) candidate selec-tion, where we select the standard form for tokens which have been classified as being ill formed. In confusion set generation, we generate a set of IV normalisation candidates for each OOV word type based on morphophonemic variation. We call this set the confusion set of that OOV word, and aim to include all feasible normalisation candidates for the word type in the confusion set. The confusion can-didates are then filtered for each token occurrence of a given OOV word, based on their local context fit with a language model. 4.1 Confusion Set Generation Revisiting our manual analysis from Section 3.2, most ill-formed tokens in Twitter are morphophone-mically derived. First, inspired by Kaufmann and Kalita (2010), any repititions of more than 3 let-ters are reduced back to 3 letters (e.g. cooool is re-duced to coool ). Second, IV words within a thresh-old T c character edit distance of the given OOV word are calculated, as is widely used in spell check-ers. Third, the double metaphone algorithm (Philips, 2000) is used to decode the pronunciation of all IV words, and IV words within a threshold T p edit dis-tance of the given OOV word under phonemic tran-scription, are included in the confusion set; this al-lows us to capture OOV words such as earthquick  X  X arthquake X . In Table 2, we list the recall and av-erage size of the confusion set generated by the fi-nal two strategies with different threshold settings, based on our evaluation dataset (see Section 5.1).
The recall for lexical edit distance with T c  X  2 is moderately high, but it is unable to detect the correct candidate for about one quarter of words. The com-bination of the lexical and phonemic strategies with T of candidates has also soared. Note that increasing the edit distance further in both cases leads to an ex-plosion in the average number of candidates, with serious computational implications for downstream processing. Thankfully, T c  X  2  X  T p  X  1 leads to an extra increment in recall to 88.8%, with only a slight increase in the average number of candidates. Based on these results, we use T c  X  2  X  T p  X  1 as the basis for confusion set generation.

Examples of ill-formed words where we are un-able to generate the standard lexical form are clip-pings such as fav  X  X avourite X  and convo  X  X onversa-tion X .

In addition to generating the confusion set, we rank the candidates based on a trigram language model trained over 1.5GB of clean Twitter data, i.e. tweets which consist of all IV words: despite the prevalence of OOV words in Twitter, the sheer vol-ume of the data means that it is relatively easy to col-lect large amounts of all-IV messages. To train the language model, we used SRILM (Stolcke, 2002) with the -&lt;unk&gt; option. If we truncate the ranking to the top 10% of candidates, the recall drops back to 84% with a 90% reduction in candidates. 4.2 Ill-formed Word Detection The next step is to detect whether a given OOV word in context is actually an ill-formed word or not, rel-ative to its confusion set. To the best of our knowl-edge, we are the first to target the task of ill-formed word detection in the context of short text messages, although related work exists for text with lower rel-ative occurrences of OOV words (Izumi et al., 2003; Sun et al., 2007). Due to the noisiness of the data, it is impractical to use full-blown syntactic or seman-tic features. The most direct source of evidence is IV words around an OOV word. Inspired by work on labelled sequential pattern extraction (Sun et al., 2007), we exploit large-scale edited corpus data to construct dependency-based features.

First, we use the Stanford parser (Klein and Man-ning, 2003; de Marneffe et al., 2006) to extract de-pendencies from the NYT corpus (see Section 3.2). For example, from a sentence such as One obvious difference is the way they look , we would extract dependencies such as rcmod(way-6,look-8) and nsubj(look-8,they-7) . We then trans-form the dependencies into relational features for each OOV word. Assuming that way were an OOV word, e.g., we would extract dependencies of the form (look,way,+2) , indicating that look oc-curs 2 words after way . We choose dependencies to represent context because they are an effective way of capturing key relationships between words, and similar features can easily be extracted from tweets. Note that we don X  X  record the dependency type here, because we have no intention of dependency parsing text messages, due to their noisiness and the volume of the data. The counts of dependency forms are combined together to derive a confidence score, and the scored dependencies are stored in a dependency bank.

Given the dependency-based features, a linear kernel SVM classifier (Fan et al., 2008) is trained on clean Twitter data, i.e. the subset of Twitter mes-sages without OOV words. Each word is repre-sented by its IV words within a context window of three words to either side of the target word, together with their relative positions in the form of (word1,word2,position) tuples, and their score in the dependency bank. These form the pos-itive training exemplars. Negative exemplars are automatically constructed by replacing target words with highly-ranked candidates from their confusion set. Note that the classifier does not require any hand annotation, as all training exemplars are constructed automatically.

To predict whether a given OOV word is ill-formed, we form an exemplar for each of its confusion candidates, and extract (word1,word2,position) features. If all its candidates are predicted to be negative by the model, we mark it as correct; otherwise, we treat it as ill-formed, and pass all candidates (not just positively-classified candidates) on to the candidate selection step. For example, given the message way yu lookin shuld be a sin and the OOV word lookin , we would generate context features for each candidate word such as (way,looking,-2) , and classify each such candidate.

In training, it is possible for the exact same fea-ture vector to occur as both positive and negative ex-emplars. To prevent positive exemplars being con-taminated from the automatic generation, we re-move all negative instances in such cases. The (word1,word2,position) features are sparse and sometimes lead to conservative results in ill-formed word detection. That is, without valid fea-tures, the SVM classifier tends to label uncertain cases as correct rather than ill-formed words. This is arguably the right approach to normalisation, in choosing to under-rather than over-normalise in cases of uncertainty.
 As the context for a target word often contains OOV words which don X  X  occur in the dependency bank, we expand the dependency features to include context tokens up to a phonemic edit distance of 1 from context tokens in the dependency bank. In this way, we generate dependency-based features for context words such as seee  X  X ee X  in (seee, flm, +2) (based on the target word flm in the context of flm to seee ). However, expanded depen-dency features may introduce noise, and we there-fore introduce expanded dependency weights w d  X  { 0 . 0 , 0 . 5 , 1 . 0 } to ameliorate the effects of noise: a weight of w d = 0 . 0 means no expansion, while 1.0 means expanded dependencies are indistinguishable from non-expanded (strict match) dependencies.
We separately introduce a threshold t d  X  { 1 , 2 ,..., 10 } on the number of positive predictions returned by the detection classifier over the set of normalisation candidates for a given OOV token: the token is considered to be ill-formed iff t d or more candidates are positively classified, i.e. predicted to be correct candidates. 4.3 Candidate Selection For OOV words which are predicted to be ill-formed, we select the most likely candidate from the confusion set as the basis of normalisation. The final selection is based on the following features, in line with previous work (Wong et al., 2006; Cook and Stevenson, 2009).

Lexical edit distance, phonemic edit distance, prefix substring, suffix substring, and the longest common subsequence (LCS) are exploited to cap-ture morphophonemic similarity. Both lexical and phonemic edit distance (ED) are normalised by the reciprocal of exp ( ED ) . The prefix and suffix fea-tures are intended to capture the fact that leading and trailing characters are frequently dropped from words, e.g. in cases such as ish and talkin . We cal-culate the ratio of the LCS over the maximum string length between ill-formed word and the candidate, since the ill-formed word can be either longer or shorter than (or the same size as) the standard form. For example, mve can be restored to either me or move , depending on context. We normalise these ra-tios following Cook and Stevenson (2009).

For context inference, we employ both language model-and dependency-based frequency features. Ranking by language model score is intuitively ap-pealing for candidate selection, but our trigram model is trained only on clean Twitter data and ill-formed words often don X  X  have sufficient context for the language model to operate effectively, as in bt  X  X ut X  in say 2 sum1 bt nt gonna say  X  X ay to some-one but not going to say X . To consolidate the con-text modelling, we obtain dependencies from the de-pendency bank used in ill-formed word detection. Although text messages are of a different genre to edited newswire text, we assume they form similar dependencies based on the common goal of getting across the message effectively. The dependency fea-tures can be used in noisy contexts and are robust to the effects of other ill-formed words, as they do not rely on contiguity. For example, uz  X  X se X  in i did #tt uz me and yu , dependencies can capture rela-tionships like aux(use-4, do-2) , which is be-yond the capabilities of the language model due to the hashtag being treated as a correct OOV word. 5.1 Dataset and baselines The aim of our experiments is to compare the effec-tiveness of different methodologies over text mes-sages, based on two datasets: (1) an SMS corpus (Choudhury et al., 2007); and (2) a novel Twitter dataset developed as part of this research, based on a random sampling of 549 English tweets. The En-glish tweets were annotated by three independent annotators. All OOV words were pre-identified, and the annotators were requested to determine: (a) whether each OOV word was ill-formed or not; and (b) what the standard form was for ill-formed words, subject to the task definition outlined in Section 3.1. The total number of ill-formed words contained in the SMS and Twitter datasets were 3849 and 1184, respectively. 7
The language filtering of Twitter to automatically identify English tweets was based on the language identification method of Baldwin and Lui (2010), using the EuroGOV dataset as training data, a mixed unigram/bigram/trigram byte feature representation, and a skew divergence nearest prototype classifier.
We reimplemented the state-of-art noisy channel model of Cook and Stevenson (2009) and SMT ap-proach of Aw et al. (2006) as benchmark meth-ods. We implement the SMT approach in Moses (Koehn et al., 2007), with synthetic training and tuning data of 90,000 and 1000 sentence pairs, re-spectively. This data is randomly sampled from the 1.5GB of clean Twitter data, and errors are gener-ated according to distribution of SMS corpus. The 10-fold cross-validated BLEU score (Papineni et al., 2002) over this data is 0.81.
In addition to comparing our method with com-petitor methods, we also study the contribution of different feature groups. We separately compare dic-tionary lookup over our Internet slang dictionary, the contextual feature model, and the word similar-ity feature model, as well as combinations of these three. 5.2 Evaluation metrics The evaluation of lexical normalisation consists of two stages (Hirst and Budanitsky, 2005): (1) ill-formed word detection, and (2) candidate selection. In terms of detection, we want to make sense of how well the system can identify ill-formed words and leave correct OOV words untouched. This step is crucial to further normalisation, because if correct OOV words are identified as ill-formed, the candi-date selection step can never be correct. Conversely, if an ill-formed word is predicted to be correct, the candidate selection will have no chance to normalise it.

We evaluate detection performance by token-level precision, recall and F-score (  X  = 1 ). Previous work over the SMS corpus has assumed perfect ill-formed word detection and focused only on the candidate selection step, so we evaluate ill-formed word de-tection for the Twitter data only.

For candidate selection, we once again evalu-ate using token-level precision, recall and F-score. Additionally, we evaluate using the BLEU score over the normalised form of each message, as the SMT method can lead to perturbations of the token stream, vexing standard precision, recall and F-score evaluation. 5.3 Results and Analysis First, we test the impact of the w d and t d values on ill-formed word detection effectiveness, based on dependencies from either the Spinn3r blog corpus (Blog: Burton et al. (2009)) or NYT. The results for precision, recall and F-score are presented in Fig-ure 2.
 Some conclusions can be drawn from the graphs. First, higher detection threshold values ( t d ) give bet-ter precision but lower recall. Generally, as t d is raised from 1 to 10, the precision improves slightly but recall drops dramatically, with the net effect that the F-score decreases monotonically. Thus, we use a smaller threshold, i.e. t d = 1 . Second, there are dif-ferences between the two corpora, with dependen-cies from the Blog corpus producing slightly lower precision but higher recall, compared with the NYT corpus. The lower precision for the Blog corpus ap-pears to be due to the text not being as clean as NYT, introducing parser errors. Nevertheless, the differ-ence in F-score between the two corpora is insignif-icant. Third, we obtain the best results, especially in terms of precision, for w d = 0 . 5 , i.e. with ex-panded dependencies, but penalised relative to non-expanded dependencies.

Overall, the best F-score is 71.2%, with a preci-sion of 61.1% and recall of 85.3%, obtained over the Blog corpus with t d = 1 and w d = 0 . 5 . Clearly there is significant room for immprovements in these results. We leave the improvement of ill-formed word detection for future work, and perform eval-uation of candidate selection for Twitter assuming perfect ill-formed word detection, as for the SMS data.

From Table 3, we see that the general perfor-mance of our proposed method on Twitter is better than that on SMS. To better understand this trend, we examined the annotations in the SMS corpus, and found them to be looser than ours, because they have different task specifications than our lexical normal-isation. In our annotation, the annotators only nor-malised ill-formed word if they had high confidence of how to normalise, as with talkin  X  X alking X . For ill-formed words where they couldn X  X  be certain of the standard form, the tokens were left untouched. However, in the SMS corpus, annotations such as sammis  X  X ame X  are also included. This leads to a performance drop for our method over the SMS cor-pus.

The noisy channel method of Cook and Stevenson (2009) shares similar features with word similarity ( X  X S X ), However, when word similarity and con-text support are combined ( X  X S+CS X ), our method outperforms the noisy channel method by about 7% and 12% in F-score over SMS and Twitter corpora, respectively. This can be explained as follows. First, the Cook and Stevenson (2009) method is type-based, so all token instances of a given ill-formed word will be normalised identically. In the Twit-ter data, however, the same word can be normalised differently depending on context, e.g. hw  X  X ow X  in so hw many time remaining so I can calculate it? vs. hw  X  X omework X  in I need to finish my hw first . Second, the noisy channel method was developed specifically for SMS normalisation, in which clip-ping is the most prevalent form of lexical variation, while in the Twitter data, we commonly have in-stances of word lengthening for emphasis, such as moviiie  X  X ovie X . Having said this, our method is superior to the noisy channel method over both the SMS and Twitter data.

The SMT approach is relatively stable on the two datasets, but well below the performance of our method. This is due to the limitations of the training data: we obtain the ill-formed words and their stan-dard forms from the SMS corpus, but the ill-formed words in the SMS corpus are not sufficient to cover those in the Twitter data (and we don X  X  have suffi-cient Twitter data to train the SMT method directly). Thus, novel ill-formed words are missed in normal-isation. This shows the shortcoming of supervised data-driven approaches that require annotated data to cover all possibilities of ill-formed words in Twit-ter.

The dictionary lookup method ( X  X L X ) unsurpris-ingly achieves the best precision, but the recall on Twitter is not competitive. Consequently, the Twitter normalisation cannot be tackled with dictio-nary lookup alone, although it is an effective pre-processing strategy when combined with more ro-bust techniques such as our proposed method, and effective at capturing common abbreviations such as gf  X  X irlfriend X .

Of the component methods proposed in this re-search, word similarity ( X  X S X ) achieves higher pre-cision and recall than context support ( X  X S X ), sig-nifying that many of the ill-formed words emanate from morphophonemic variations. However, when combined with word similarity features, context support improves over the basic method at a level of statistical significance (based on randomised estima-tion, p&lt; 0 . 05 : Yeh (2000)), indicating the comple-mentarity of the two methods, especially on Twitter data. The best F-score is achieved when combin-ing dictionary lookup, word similarity and context support ( X  X L+WS+CS X ), in which ill-formed words are first looked up in the slang dictionary, and only if no match is found do we apply our normalisation method.

We found several limitations in our proposed ap-proach by analysing the output of our method. First, not all ill-formed words offer useful context. Some highly noisy tweets contain almost all misspellings and unique symbols, and thus no context features can be extracted. This also explains why  X  X S X  fea-tures often fail. For such cases, the method falls back to context-independent normalisation. We found that only 32.6% ill-formed words have all IV words in their context windows. Moreover, the IV words may not occur in the dependency bank, further de-creasing the effectiveness of context support fea-tures. Second, the different features are linearly combined, where a weighted combination is likely to give better results, although it also requires a cer-tain amount of well-sampled annotations for tuning. In this paper, we have proposed the task of lexi-cal normalisation for short text messages, as found in Twitter and SMS data. We found that most ill-formed words are based on morphophonemic varia-tion and proposed a cascaded method to detect and normalise ill-formed words. Our ill-formed word detector requires no explicit annotations, and the dependency-based features were shown to be some-what effective, however, there was still a lot of room for improvement at ill-formed word detection. In normalisation, we compared our method with two benchmark methods from the literature, and achieved that highest F-score and BLEU score by integrating dictionary lookup, word similarity and context support modelling.

In future work, we propose to pursue a number of directions. First, we plan to improve our ill-formed word detection classifier by introducing an OOV word whitelist. Furthermore, we intend to allevi-ate noisy contexts with a bootstrapping approach, in which ill-formed words with high confidence and no ambiguity will be replaced by their standard forms, and fed into the normalisation model as new training data.
 Acknowledgements
