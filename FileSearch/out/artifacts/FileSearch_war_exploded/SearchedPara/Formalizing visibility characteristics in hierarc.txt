 1. Introduction
Hierarchical systems are prevalent everywhere. While hierarchical systems provide an elegant mechanism to analyze sys-tem functionality at different levels of abstraction, most of them allow interaction only between adjacent (parent X  X hild) lay-ers. Such restricted means of communication are often not sufficient for real-life scenarios. For example, in a supply chain management system, Lin et al. [20] state the visibility requirement across levels as follows:  X  X  X he information required by downstream entities are mainly material and capacity availability information from their suppliers. The information ac-quired by an upstream entity is information about customer demand and orders. The depth of information penetration can be specified in various degrees, e.g., isolated, upward one tier, upward two tiers, downward one tier, downward two text, call for nodes having visibility over their ancestors, descendents and siblings. On the other hand, allowing arbitrary interaction among the hierarchical entities, without any restrictions, may not be an acceptable solution either. In a dynamic and heterogeneous environment, issues such as trust and autonomy force an entity to be selective in the interactions it has with others. For example, Busatto et al. [9] consider hierarchical modeling of hypertexts in the WWW. The WWW can be modeled as a large graph with Web pages as nodes and hyperlinks as edges. With respect to a site S , its corresponding graph consists of the pages provided by its departments d 1 ; d be hierarchically decomposed as follows: (i) By department: The pages (and the corresponding hyperlinks) belonging to a department d are grouped together; (ii) By page structure: Here, we consider a page as an abstraction on its own; This can be useful for an author who wants to change a page while having an overview of its structure. With the above represen-an abstraction has been identified in [9] as follows:  X  X  X  hierarchical graph data model must allow the representation of this to hidden nodes). X  The situation is worse for large scale systems where the number of involved entities may be in hundreds.
We encountered the above issues while studying hierarchical Web services compositions in [4]. However, we believe that the issues and the proposed solutions are applicable for most hierarchical systems in general. Thus we need a model to cap-whether X has visibility over Y . In a general setting, X has visibility over Y if: X wishes to see Y : X may be interested in Y due to functional or non-functional requirements;
Y does not have any objection to X seeing it: As mentioned earlier, security, privacy, confidentiality and other issues play an important role in determining the visibility allowed by a provider; and
Remaining nodes in the hierarchy do not have any objections to X seeing Y : Contractual agreements between Y and another node Z may have a bearing on X seeing Y .

The requested visibility is usually with respect to some attribute of the nodes in the hierarchy. Examples of possible attri-the provider, and service and execution details are required for non-functional aspects such as recovery, monitoring, audit-ing, and others.

The main contribution of this paper is to propose a generic conceptual model to express visibility. Towards this end, we and their representations.

The rest of the paper is organized as follows. First, we review some related work in Section 2. In Section 3, we provide an informal introduction to SoV using an e-shopping scenario. The formal definitions of SoV, coherence and correlation prop-
SoN and brings out the relationship between the visibility and noticeability notions. Section 7 considers a special visibility assignment. Section 8 concludes the paper and provides some directions for future work. 2. Related works
The term visibility obviously originates from the notion of physical visibility. In Computer Graphics (CG) [15], a point is visible to another point if the line segment connecting them is not obstructed by any obstacle in the scene. Here, by default, objects have visibility over each other, unless obstructed by something. This is in contrast to our basic premise where we start with zero visibility and only give as much visibility as required.

The notion of visibility graphs [13] in CG is used to compute the shortest path between a pair of points in space. For a set S to test whether the line segment connecting them intersects any obstacle. Such a test takes O  X  n  X  time when done naively, in arbitrary order, but concentrate on one node at a time and identify all the other nodes visible from it, and then use that information while processing the next node. In our case, we do not consider the actual construction of the SoV graphs in this paper. Given a set of visibility requirements and restrictions (obstacles), we can use something like the shortest path algo-rithm to check if a node X is visible to Y , that is, if X should be in the SoV of Y .
 erties help in a compact representation of n 2 graphs in n graphs, and, in special cases, even in a single graph. However, we would like to mention that there is a fundamental difference between the hierarchical visibility data structures in [24,18] an object X than its parent. We are more interested in systems where the hierarchical structure is given by some other sys-tem property, e.g. physical connectivity (P2P systems), and we study visibility properties on top of that. There are other the root node. As soon as a node is found to be completely visible or invisible, the current branch of traversal can be termi-discuss this type of visibility algorithms and also show how spatial and temporal coherence can be exploited to optimize them. This is in line with our emphasis on coherence and correlation properties to capture visibility relationships.
The notion of spheres is based on the concept of Spheres of Control (SoC) introduced by Davies [14]. A Sphere of Control encapsulates entities sharing a similar set of properties or having a dependency relation. The dependency relations consid-ered in [14] are atomicity, commitment, resource allocation, recovery, auditing, consistency, etc. SoV and SoN logically group the nodes (and their attributes) visible to another node in a hierarchy. Also, Davies [14] considers homogeneous and non-autonomous systems where visibility is not an issue. Our work can be considered as complementary to the work in [14] to heterogeneous and autonomous systems.

Later works have extended the initial concept of SoC to Spheres of Atomicity [1] and Commitment [25]. Alonso and Hagen [1] utilize the properties of the processes (pivot, compensatable and retriable) in a Sphere of Atomicity to determine if the sphere, as a whole, guarantees atomicity. Yolum and Singh [25] apply the concept of SoC to Multi-Agent Systems (MAS) to structure agents based on their commitment guarantees. These works are not directly related to the work presented in this paper. We mention them for the sake of completeness.

At a high level, SoV seems close to the Role Based Access Control (RBAC) mechanism [22]. In RBAC, the possible roles of an organization are categorized into a hierarchy, where each role has certain permissions/restrictions with respect to accessing resources (objects) of the organization. Each employee (subject) of the organization is assigned a role. Thus, whether a sub-
Deviations to inheritance can be modeled as exceptions in RBAC. In a SoV context, inheritance corresponds to  X  X  X orrelated X  visibility, and we also consider other accessibility relations, e.g., coherence. And,  X  X  X xceptions X  are accommodated as first class citizens in the SoV formalism. Access control mechanisms are usually implemented using a pair of operations such as SQL Grant/Revoke which facilitate both giving access rights on objects to subjects and allowing the subjects to propagate the access rights to other subjects. These facilities can be implemented in a more sophisticated way in our model, but in a hierarchical setup. We elaborate this in Section 8.

Another interesting application scenario is that of WordNet [27] or Quillian X  X  spreading activation networks [11]. Here, words  X  X  X elated X  to some given keywords. However, in such a scenario, the structure of the hierarchy is determined by the relationship between words. We are more interested in a P2P kind of scenario where a peer X  X  neighbor may not always be directly connected to the peer. Thus, a neighbor is someone visible to the peer, and the  X  X  X eighbor relationship X  among peers is defined on top of the underlying physical connection infrastructure. As such, P2P systems are an ideal application scenario for SoV, and we consider the application in detail in [6].

Other related scenarios include privacy preserving applications such as DARPA X  X  Total Information Awareness (TIA) [12] or Microsoft X  X  MyLifeBits Project [21]. The objective of both, and similar, applications are to build haystacks of electronic information about people. The needle in such haystacks corresponds to information about a particular person, e.g., a terrorist derive information about others (to protect their privacy) from the returned information. Thus, there is a need to analyze the sphere of noticeability (of a piece of information) of a person over others.

No other work that we are aware of has attempted to formalize visibility in hierarchical systems. Some of the works which have touched upon this aspect are the following: Moffet [22] identifies real-life scenarios where there might be a need to deviate from the inheritance of access rights upwards through the hierarchy in a role-based access control. Chen and Dayal [10] study visibility within nested transactional systems. Basically, they advocate the provision to be able to expose the re-sults to a particular ancestor to improve performance. Bocchi [8] proposes a formal model based on p -calculus to capture the propagation: up-propagation, down-propagation, down-specific propagation and non-propagation. Biswas and Genest [2] and Biswas et al. [3] study the problem of determining a minimal set of workflow activities which need to be logged such that atomicity can be guaranteed for any execution path. Fiege [16] considers visibility with respect to sending publish/sub-scribe notifications for event based systems. Khambatti et al. [19] model P2P systems, where a node has knowledge of (vis-ibility over) only a subset of the remaining nodes, abstracted as P2P communities. However, none of the above works considers the effect of relationships which might exist among the visibilities of different entities of a system.
From a programming language point of view, Aspect Oriented Programming (AOP) deserves special mention here.  X  X  X ep-aration of Concerns X  is an important characteristic of AOP and, according to Filman and Friedman [17], AOP can be differen-tiated from other programming languages based on the following two parameters: quantification and obliviousness . Roughly, quantification corresponds to the restrictions a class A imposes on another dependent/related class B . Obliviousness corresponds to the degree of independence with which (the dependent/related) class B can be programmed (oblivious of the other words, why we study SoV and SoN separately as two complementary notions. While AOP relies on an  X  X  X ntelligent X  run-time environment to resolve any visibility issues (including conflicts) at run-time, we consider a more static scenario where model the assigned visibility/noticeability.

In a previous work [4], we introduced the SoV concept with respect to hierarchical Web services compositions, and showed its application in the context of performing compensation under visibility constraints. The concept was strength-ened and notions of noticeability, coherence and correlation were introduced in [5]. Moreover, only vertical visibility (that
The discussions with respect to visibility policies and single visibility (noticeability) graph representations are also novel contributions of this paper. 3. An informal introduction to SoV to some attribute A such as provider, service and execution details (discussed earlier). We assume that the visibilities of a determined based on properties such as (a) functional and non-functional requirements of the provider, (b) security, privacy and anonymity characteristics of the providers whose visibility is sought, and (c) global policies and constraints imposed by the environment.

For example, let us consider an e-shopping scenario (Fig. 1 ). A customer U orders a few goods from a store S . S splits the processing payment for the goods. This involves charging a credit card by the credit card company H and awarding bonus air miles by another service B . The store also uses a monitor/auditor M to keep track of the service execution. Taking the attribute A as service details, the SoVs of some providers in the hierarchy of Fig. 1 may be as follows, shown in nodes, if any, are represented in thin ovals: (Fig. 2 a). only concerned with the customer X  X  credit card number and the purchase amount without any need to know the context , namely the goods purchased and the store. We call the visibilities of B over H and U as weak visibilities , whereas the vis-section.) details ( Fig. 2 c). 4. The courier company C -B has strong visibility over S -B , S and U (Fig. 2 d). gets the service details of H only to forward to U and not for its own use.
 hide the details of C -B from S , whereas C -B has visibility over S (Fig. 2 d). 8. Visibilities of the providers in the hierarchy need not be related. For example, U has weak visibility over B (Fig. 2 e) to ensure that the bonus air miles are credited, but U  X  X  child S does not have visibility over B (Fig. 2 a). 4. Formal SoV terminology. We consider a hierarchy H as an undirected tree. For any graph G , the set of nodes in G is denoted V  X  G  X  , and that V X  X ; X , for every X , is the graph containing just the node X .
 Definition 4.1 ( Sphere of visibility ). The Sphere of Visibility of a node X in hierarchy H , denoted SoV subgraphs V X  X ; Y , for Y in H .
 of visibility. If V X  X ; Y is H  X  Y 1 ; Y , for Y 1 in the path from X to Y , then it is denoted as  X  Y  X  X ; Y  X  , and weak reference will be  X  Y ; Y  X  or simply  X  Y  X  .
 nodes X and Y , should be null, weak, partially strong or strong visibility. This is highly application-dependent. We are con-cerned only with properties and representations of visibility assignments.

As mentioned earlier, the visibilities are defined with respect to some attributes. In this sense, the underlying hierarchical organization of the nodes may be known to all the nodes and may even be used to forward information from one node to another, but knowledge of the values of attributes at the nodes may be specified by the visibility assignments. We illustrate this with two examples.

Application-SD: Here we consider service details attribute in hierarchical Web service composition. A Web service is a functionality offered across the Web. Each Web service has a provider, is published in a registry, and hence can be found and their execution requested by other users. Some services can be combined to get a composite service which again can be published in the registry and requested by others. For example, a flight reservation service and a hotel reservation service can be combined (along with others) to form a travel agency service. Composite services can further be combined to get higher level compositions. Service details in this context may include details necessary for compensating an execution of a service. For example, a hotel reservation made by a travel agency for an user can be cancelled directly by the user if the details are known to the user. Otherwise, the user has to contact the travel agency for cancelling the reservation.
 nodes in the path  X  Y 1 ; Y  X  . Thus, in the case of weak visibility, Y cates that the details at Y are not available to X .

Application-OUTSOURCING: We consider a simplified outsourcing scenario. A plant (for example, a car plant) manufac-tures some products. It uses, as sub-products, some products manufactured in some other plants, which in turn may get some products from other plants and so on. The manufacturing of each product must adhere to certain (governmental, envi-ronmental and other) regulations. Some regulations may be local. Some others may be inherited from ancestral nodes. This can be depicted in a hierarchy as follows: The nodes represent different sites (plants) and the edges represent parent X  X hild outsourcing relationships.
Each site manufactures some products which may be used as sub-products manufactured in other sites. One site may manufacture products for several sites, and a site may get (sub-)products from several sites. The products manufactured by site S i for site S j are denoted P ij .

The regulations at site S i that are applicable to every product manufactured at that site are denoted R
In addition, the regulations of one or more additional sites must be adhered to for the products sent to other sites. We denote the regulations for (the products manufactured by S
Here R ij can be modeled as V X  S j ; S i . If the value is  X  S is the union of the regulations at all the sites from S k
Strong visibility means the regulations of each intermediate node in the path from S may mean that no regulations need to be adhered to, perhaps because P for S j .

In general, a visibility assignment may prescribe V X  X ; Y for each pair of nodes X and Y individually. As in the e-shopping scenario of Section 3, with such a general assignment, the SoVs of the various nodes can be quite arbitrary and unrelated to each other. However, when the SoVs are related in some way, meaningful visibility assignments can be obtained. The rela-tionship among the SoVs may be influenced by the type and the intended use of the attributes over which visibility is sought, whether the hierarchy is intra-organizational (where the visibilities can be very flexible) or inter-organizational (where the visibilities need to be restricted due to trust and security concerns), hierarchical control and authorization policies, etc.
Meaningful relationships among the SoVs may also help formulate global visibility policies and the individual assignments based on these policies.

In the following, we identify two special relationships among the SoVs, coherence and correlation. These are intuitive and at the same time appear very fundamental for several applications. 4.1. Coherence the path from X to Z in H , Y not equal to X or Z , V X  X ; Z \ H  X  X ; Y is a subgraph of V X  X ; Y .
Nodes X , Y and Z are illustrated in Fig. 3 . We use this figure to comprehend and relate the different properties in this pa-
OUTSOURCING, coherence implies that if the regulations at W are applicable to products manufactured at Z for X , then they to products manufactured at Y for X , but not for those manufactured at Z for X .

Fig. 4 describes several pairs of V X  X ; Z and V X  X ; Y in coherent and non-coherent visibility assignments. 4.2. Correlation
Correlation property captures the intuitive notion that, referring to Fig. 3 again, the strength of visibility of Y over Z is impose the restriction that Y is allowed to forward the service details of Z to X (or any other node) only if Y can get the
Z for itself, but does not forward them to X . In Application-OUTSOURCING, if the regulations at Y are applied to products manufactured at Z for X , then they must be applied for those manufactured (at Z ) for Y also. Again, it is possible that the regulations at Y are applicable to the products manufactured at Z for Y , but not to the products manufactured (at Z ) for X . in the path from X to Z in H , Y not equal to X or Z , V X  X ; Z \ H  X  Y ; Z is a subgraph of V X  Y ; Z . the other nodes along the path.

We note that coherence and correlation are orthogonal properties. Fig. 6 shows a visibility assignment which is coherent but not correlational: X 1 is visible to X 4 , but not to its parent X not coherent: V X  X 4 ; X 1 \ H  X  X 4 ; X 2 is not a subgraph of V X  X 4.3. Related properties
In this section, we define some variants of the coherence and correlation properties that will be useful in some application environments. First we consider coherence. By replacing  X  X  X ubgraph X  by  X  X  X upergraph X  in the definition of coherence, we get inverse coherence. For graphs G and G 0 , we call G a supergraph of G and every node Y in the path from X to Z in H , Y not equal to X or Z , V X  X ; Z \ H  X  X ; Y is a supergraph of V X  X ; Y .
Informally, inverse coherence means that the strength of visibility of X over Y is at most as much as the strength used for details of Z from W but not the service details of Y from W . Analogous to coherence, it can be used to enforce the following and inversely coherent visibility assignments. In Application-OUTSOURCING, inverse coherence implies the possibility that is inversely coherent.

Another variant of the coherence property is the following. Here,  X  X  X ubgraph X  in the definition of coherence is replaced by  X  X  X qual to X .
 and every node Y in the path from X to Z in H , Y not equal to X or Z , V X  X ; Z \ H  X  X ; Y is equal to V X  X ; Y .
For instance, in Application-SD, uniform coherence implies that for every node W such that X could get the service details of Z from W , it could get the service details of Y also from W , and vice versa. In Application-OUTSOURCING, uniform coherence implies for every node W such that the regulations at W are applicable to products manufactured at Z for X , those regulations are applicable to products manufactured at Y also, again for X , and vice versa.
 Note that uniform coherence is the same as uniform inverse coherence. Fig. 9 illustrates the notion of uniform coherence.
Uniform coherence implies that when V X  X ; Z \ H  X  X ; Y is null, V X  X ; Y must also be null. This must be so irrespective of ence that allows this possibility: is equal to V X  X ; Y .

Uniform coherence facilitates representing SoV X , of a node X , in a single graph. The graph is obtained just by merging all component of V X \ H  X  X ; Y that contains Y is denoted V By an extension of a path  X  X ; Y  X  we mean a path  X  X ; Z  X  , for some Z , such that  X  X ; Y  X  is a sub-path of  X  X ; Z  X  . Proposition 4.1. For a uniformly coherent visibility assignment V , V equals V X  X ; Y , for every Y.
 Proof. For any Y , clearly, V X  X ; Y # V X  X  X ; Y . We show the equality. We need to consider only the case where V at least the node Y ), and it should be equal to V X  X ; Y , by uniform coherence. Thus, V X  X ; Y cannot be null. If V X  X ; Y is strong, that is,  X  X ; Y  X  , then clearly, V  X  Y 1 ; Y  X  for some Y 1 in the path from X to Y . We claim that V on the contrary, that for node Y 2 preceding Y 1 in the path from X to Y , V
Y in the extension of the path  X  Y 2 ; Y 1  X  , V X  X ; Y 0 must contain  X  Y may be in a completely different path from Y 1 . (An instance of the last case is illustrated in Fig. 10 .) In all cases,
V X  X ; Y 0 \ H  X  X ; Y 1 should equal V X  X ; Y 1 by uniform coherence and hence contain  X  Y coherence, V X  X ; Y \ H  X  X ; Y 1 should equal V X  X ; Y 1 otherwise. The proof is complete. h to X with strength  X  T 1 ; T  X  , then every node T 0 in the extension of  X  X ; T  X  is visible to X with strength  X  T Y i , for each i , is visible with strength  X  X ; Y i  X  ;
Z 3 , Z 4 and Z 5 are visible with strengths  X  Z 3  X  ,  X  Z Z 8 is visible with strength  X  Z 8  X  ; V 1 is visible with strength  X  V 1  X  ; and W 1 and W 2 are not visible.

The above proposition is applicable for non-null uniform coherency also. Fig. 12 illustrates non-null uniformly coherent visibility. Here, in addition to the nodes visible according to Fig. 11 , we have:
Z 1 and Z 6 are visible with strengths  X  X ; Z 1  X  and  X  X ; Z W 1 is visible with strength  X  X ; W 1  X  .

Fig. 13 a illustrates a non-null uniformly coherent SoV of the user U in Fig. 1 . Note the change in V X  U ; S -A (for uniform coherence) and the addition of V X  U ; P (for coherence), compared to the SoV of U shown in Fig. 2 e. Fig. 13 a is depicted in strong visibility of S -A over M in Fig. 2 f has been changed to a strong visibility in Fig. 14 . We now consider variants of the correlation property. The definitions are similar to those of coherence. and every node Y in the path from X to Z in H , Y not equal to X or Z , V X  X ; Z \ H  X  Y ; Z is a supergraph of V X  Y ; Z . the difference in the set of affected nodes in comparison to (inverse) coherence. While coherence imposes conditions on a
It is easy to check that the visibility assignment in Fig. 8 , where adjacent nodes are weakly visible and non-adjacent nodes are strongly visible, is also inversely correlated (in addition to being inversely coherent).
 Z , and every node Y in the path from X to Z in H , Y not equal to X or Z , V X  X ; Z \ H  X  Y ; Z is equal to V X  Y ; Z .
For example, in Application-SD, uniform correlation means that Y can forward the service details of Z to X if and only if it can get those details for itself. In Application-OUTSOURCING, uniform correlation means that the regulations at Y are applied to products manufactured at Z for X if and only if they are applied for those manufactured (at Z ) for Y . is equal to V X  Y ; Z .

In Fig. 5 , for uniform correlation, V X  X 2 ; Z , V X  X 1 ; Z , etc. will be the same as V X  X there; the strength may increase, then remain the same. With non-null uniform correlation, the visibility may become null at some point. If so, it will stay null from thereon. Replacing V X  X visibility.

As with uniform coherence, uniform correlation can also be depicted in a single graph. We show this in Section 6. 5. Visibility policies that have not joined the hierarchy yet, in a dynamic environment.
 We start with a policy that is already illustrated in Fig. 8 .
 Policy 1: Weak visibility to adjacent nodes and strong visibility to all other nodes.
 As mentioned earlier, this visibility has inverse coherence and inverse correlation properties.

We illustrate the rest of the policies with the path  X  X  X  Y edges to all other nodes. That is, V X  X ; Y is:  X  X ; Y  X  if Y is adjacent to or at distance 2 from X , and  X  Y 2 ; Y  X  if Y is at distance greater than 2 from X , where Y This visibility assignment is coherent and uniformly correlated.
 Example of coherence is, V X  X ; Y \ H  X  X ; Y 2 is  X  Y 2  X  , and is a subgraph of V X  X ; Y 2 which is  X  Y 4 ; Y 2  X  .
 An example of uniform correlation is, V X  X ; Y \ H  X  Y 4 ; Y is  X  Y 2 ; Y  X  , and is equal to V X  Y 4 ; Y which is also  X  Y 2 ; Y  X  .
 consisting of a path with two edges to nodes at distance 3 or 4, and no visibility of all other nodes. That is, V X  X ; Y is:  X  X ; Y  X  if Y is adjacent to or at distance 2 from X ,  X  Y 2 ; Y  X  if Y is at distance 3 or 4 from X , where Y 2 null if Y is at distance 5 or more.
 This visibility assignment is coherent and non-null uniformly correlated. Here, uniform correlation is satisfied only when V X  X ; Y is not null.
 Policy 4: (Fig. 17 ) No visibility to adjacent nodes and weak visibility to all other nodes.
 form inverse coherence). For any i , V X  X ; Y \ H  X  Y i ; Y is  X  Y  X  , equal to V X  Y correlation.

Policy 5: (Fig. 18 ) Strong visibility to nodes at distance 1 and 2, weak visibility to nodes at distance 3 or 4, and strong visibility to all other nodes.

It is not clear where such visibility assignment will be useful. This assignment does not have any of the properties we have discussed. We are stating this policy just to illustrate that a visibility assignment need not satisfy any properties. Example of coherence is, with X , Y 3 and Y 2 , V X  X ; Y 2 is  X  Y 2  X  .
 V X  X ; Y 2 \ H  X  X ; Y 3 is null, and is a subgraph of V X  X ; Y 3 which is  X  X ; Y 3  X  .
 Example of inverse coherence is, with X , Y 1 and Y , V X  X ; Y is  X  X ; Y  X  .
 V X  X ; Y \ H  X  X ; Y 1 is  X  X ; Y 1  X  , and is a supergraph of V X  X ; Y 1 which is  X  Y 1  X  .
 An example of inverse correlation is, with X , Y 3 and Y , V X  X ; Y is  X  X ; Y  X  .
 V X  X ; Y \ H  X  Y 3 ; Y is  X  Y 3 ; Y  X  which is a supergraph of V X  Y 3 ; Y which is  X  Y  X  .
 An example of correlation is, with X , Y 3 and Y 1 , V X  X ; Y 1 is  X  Y 1  X  .
 V X  X ; Y 1 \ H  X  Y 3 ; Y 1 is  X  Y 1  X  which is a subgraph of V X  Y 3 ; Y 1 which is  X  Y 3 ; Y 1  X  .
 6. Sphere of noticeability visibility and noticeability notions are complementary, V and N definitions are also complementary. That is, for N that  X  X  X or-oval inside a rectangle, Y is represented by a thick oval, and other nodes, if any, are represented in thin ovals. Definition 6.1 ( Sphere of noticeability ). The Sphere of Noticeability of a node X in hierarchy H , denoted SoN null subgraphs N X  X ; Y , for Y in H .
 Note that, for a specific node X , SoV X is the set of V X  X ; Y s for different Y s, whereas SoN
An obvious application of SoN is for change management. An example is a provider X notifying the providers, who have vis-details), log format (execution details), etc. An interpretation of the relationship between SoV and SoN using the e-shopping scenario introduced earlier (Fig. 1 ) follows. For a node X , SoV (input) is expected, and SoN X can be considered as the nodes to which some information (output) is to be sent. In both cases, hand, SoN B may contain U , P and H , reflecting that B should send confirmation of the air miles reward to U , P and H .
Coherence and correlation properties for noticeability assignments can be defined analogous to those for visibility assignments.

Definition 6.2 ( Coherence properties of noticeability ). A noticeability assignment N is coherent (respectively, inversely X , N X  Z ; X \ H  X  Z ; Y is a subgraph of (respectively, a supergraph of, equal to) N X  Z ; Y .
 then it is equal to N X  Z ; Y .
 Here also, both uniform and non-null uniform coherence facilitate merging all the subgraphs of SoN single graph. The graph is denoted N X . The connected component of N Proposition 6.1. For a uniformly coherent noticeability assignment N , N equals N X  X ; Y , for every Y.
 Proof. For any Y , clearly, N X  X ; Y # N X  X  X ; Y . We show the equality. We need to consider only the case where N coherence, contrary to the assumption.
 If N X  X ; Y is strong, that is,  X  X ; Y  X  , then clearly, N say  X  X ; Y 1  X  for some Y 1 in the path from X to Y . We claim that N
Suppose, on the contrary, that for a node Y 2 following Y some Y 0 in the extension of the path  X  Y 1 ; Y 2  X  , N X  X ; Y  X  X ; Y  X  , or may be in a completely different path from Y should equal N X  X ; Y 2 by uniform coherence, and hence contain  X  Y
N X  X ; Y \ H  X  X ; Y 2 should equal N X  X ; Y 2 and so N X  X ; Y must contain the edge  X  Y otherwise. The proof is complete. h
With uniformly coherent noticeability, if X is noticed by a node T with strength  X  X ; T by every T 0 in the extension of  X  X ; T  X  with the same strength  X  X ; T noticeability.
 X is noticeable to:
Y 1 with strength  X  X ; Y 1  X  ; each Y i , for i &gt; 1, with strength  X  X ; Y 2  X  ; V 1 with strength  X  X  X  ; Z j , for j equal to 6, 7 and 8, with strength  X  X ; Z 6  X  ; Z k , for k from 1 to 5, with strength  X  X ; Z 1  X  ; and X is not noticeable to W 1 and W 2 .

Again, the above proposition is applicable to non-null uniform coherence also. Fig. 21 illustrates a non-null uniformly coherent noticeability. Note that X is not noticeable to Z of  X  X ; Y  X  .
 respectively.
 We now define the correlation property and its variants.
 or X , N X  Z ; X \ H  X  Y ; X is a subgraph of (respectively, a supergraph of, equal to) N X  Y ; X . null, then it is equal to N X  Y ; X .
 Finally, we show that the coherence and correlation properties are indeed related.
 null uniformly coherent) if and only if the corresponding noticeability assignment N is correlated (respectively, inversely correlated, uniformly correlated, non-null uniformly correlated), and vice versa.

Proof. The proof follows from the complementary relationship between visibility and noticeability. Recall that, for N visibility definition, we get the correlated noticeability definition and vice versa. The same applies to the other equivalences.

We note that due to the equivalence of uniformly correlated visibility and uniformly coherent noticeability, and the property that uniformly coherent noticeability can be represented in a single graph, it follows that uniformly correlated in a single visibility graph.

Application-E-CONTRACT: We illustrate the utility of SoN notion, and coherent and correlated properties of noticeability, and payments. The activities are to be executed by the parties satisfying the clauses, with the associated terms of payment.
Consider, for example, a contract for building a house. The parties of this contract include a customer, a builder and a bank. The customer will apply for a loan for the construction from the bank. The builder will construct the house according to and procuring raw material, (ii) giving part of the work such as carpentry, plumbing and electrical works to sub-contracts, (iii) receiving payments from the customer or from the bank, (iv) making payments to his staff and sub-contract parties, and (v) handing over the constructed house to the customer.

Activities in a contract are complex and interdependent. They may be executed by different parties autonomously and in a loosely coupled fashion. They may be compensated and/or re-executed at different times relative to the execution of other activities. The multi-level composition model given by Vidyasankar et al. [26] for e-contract activities enables depicting the example of a composite activity where the nodes represent its constituent activities. The partial ordering of the execution of the activities is top-down.

In an e-contract environment, whether an activity has been executed successfully or not may not be known until some other subsequent activities have been executed. Then, if that execution is not successful, then executions of several other may be known only after Z 4 and Z 5 are executed, and if unsuccessful then adjustments of the executions of Z might be required in addition to that of Z 3 . With the assumption that all the affected nodes are close to the node under consideration, we can designate the sub-tree containing the affected nodes as thesphere of noticeability of the current node.
The SoNs of several nodes are shown in Fig. 27 . The noticeability assignment N is uniformly coherent, assuming that the non-affected nodes also notice the sub-tree of the current node. (This property can be verified in a straight-forward manner.) the bubble moves unidirectionally as we traverse the nodes. That is, as the bubble moves, new nodes are included in the bubble and some current nodes get excluded from the bubble such that once a node is out of the bubble, it never re-enters the bubble. In Fig. 27 , as we traverse from X to Z 5 , Z that it will not be in the SoNs of the descendents of Z 3 execution of Z 1 . This information can be used to commit the execution of Z making sure that the executions of the descendents along the other children of Z under the assumption that possible adjustments in the execution of Z the execution of Z 1 ). If the correlation property is not satisfied, (for example, when N committed until all its descendents have successfully terminated. This applies to both the present and future descendents also, in case the composition is dynamic. h 7. A special case We have shown that uniformly coherent visibility facilitates representing the SoV of any node X in a single graph V all nodes in H can be represented in a single graph.
 We note that, under uniformly coherent visibility assignment, the single graph representing V rooted at X , with edges directed towards X . Similarly, for a node Y different from X , V The sv-symmetricity property enables representing the edges in undirected form, in a single graph representation. properties: non-null uniform coherence; non-null uniform correlation; sv-symmetricity; and if a node is visible to some node in H , then it is visible to every node in H .
 A noticeability assignment N is harmonious if its corresponding visibility assignment is harmonious. It turns out that for a harmonious visibility assignment, the visibility graph V nodes in H .
 Proposition 7.1. For a visibility assignment V , V X for any node X, represents V in a  X  X  X ossless  X  fashion (that is, V any nodes Y and Z, where V X  X  Y ; Z  X V X \ H  X  Y ; Z ), iff the visibility assignment is harmonious. Proof. First, we show the sufficiency.
 be in V X . In the following, we consider the case where V X  Y ; Z is non-null. Let V from Y to Z . Note that Z 1 could be Y , Z , or some other node. We will show that V X  Y ; Z is also  X  Z
We consider the various possibilities of the relative positions of X , Y and Z in H , illustrated in Fig. 28 . (a) X is in an extension of the path  X  Z ; Y  X  .
 (b) X is in the extension of the path  X  Y ; Z  X  .
 (c) X is in the path  X  Y ; Z  X  .
 (d) X is neither in  X  Y ; Z  X  nor in any of its extensions.

Then let W be the node in  X  Y ; Z  X  common to the paths  X  X ; Y  X  and  X  X ; Z  X  . Two subcases arise. (i) Z 1 is in the path  X  W ; Z  X  , and is different from W . Then, V X  X ; Z must be  X  Z Next, we show the necessity of all four properties of a harmonious visibility assignment, for single graph representation.
Necessity of: non-null uniform coherence: Fig. 29 a satisfies all but the non-null uniform coherence property required for a harmonious assignment (as V X  X ; Z \ H  X  X ; Y is non-null, but not equal to V X  X ; Y ). Then, V non-null, but not equal to V X  Y ; Z ). Then, V X  X  Y ; Z  X  V X  Y ; Z . V
Y  X  X ; Z  X  V X  X ; Z . required for a harmonious assignment (as Z is visible to Y , but not to X ). Then, V The proof is complete. h
The above proposition asserts that when the visibility assignment is harmonious, a single graph can represent the visi-ibility of Y .

The requirement of harmonious visibility assignment for single graph representation is clearly very restrictive. In the se-quel, we show that a subset of the conditions suffices for single graph representation, if we are interested only in upward or downward visibility. The notions of upward and downward visibilities come naturally for hierarchical systems. Basically, in upward (downward) visibility, a node is allowed visibility only over nodes higher up (lower down) in the hierarchy. We can define the upward and downward orientations with respect to the root and leaf nodes as follows: A node Y is higher up (low-er down) in the hierarchy than a node Z if H  X  X ; Z contains Y , where X is the root node (a leaf node). Proposition 7.2. For a downward visibility assignment V , V V  X  Y ; Z  X V X  Y ; Z for any pair of nodes Y and Z, Z lower than Y, in the hierarchy) iff the visibility assignment V satisfies: non-null uniform coherence; non-null uniform correlation; if a node is visible to some node in H, then it is visible to every node in H.
 Proof. First, we show the sufficiency.
 By uniform coherence property and Proposition 4.1 , V X is a lossless single graph representation of SoV V  X  X ; Z  X V X  X ; Z , for any Z .
 proposition. Therefore Z will not be in V X . In the case where V X  Y ; Z is non-null, by non-null uniform correlation, V X  X ; Z \ H  X  Y ; Z is V X  Y ; Z .

Next, we show the necessity of the three properties, for single graph representation. Necessity of: null, but not equal to V X  X ; Y ). Then, V X  X  X ; Z  X  V X  X ; Z . non-null, but not equal to V X  Y ; Z ). Then, V X  X  Y ; Z  X  V X  Y ; Z . visible to Y , but not to X ). Then, V X  X  Y ; Z  X  V X  Y ; Z .
 The proof is complete. h Proposition 7.3. For an upward visibility assignment V , V ment V satisfies: non-null uniform coherence; non-null uniform correlation; if a node is visible to some node in H, then it is visible to every node in H.
 V  X  Y ; Z  X V X  Y ; Z is analogous to the proof of Proposition 7.2 .

Suppose there is another extension of the path  X  Z ; Y  X  leading to another leaf X
Thus, V X  Y ; Z is represented in a lossless fashion in V X
The proof is complete. h 8. Discussion and conclusion
In complex systems with a large number of nodes (entities), the visibility a node X has over (some attributes of) other nodes is a very relevant and important issue. In this paper, we have defined the sphere of visibility SoV which nodes X can see and (ii) how X can see them. The semantics of both these aspects is highly application dependent, governed by system policies and constraints. In general, the SoVs of different nodes can be arbitrary and independent. In practice, they can be expected to be related in some way. Such relationships will help to justify the visibility assign-ments (in global level). In this paper, we have identified two simple and intuitive relationships, coherence and correlation, and their variants, and shown their utility in forming/analyzing global policies and in representing the assignments.

A main focus of this paper is on the strength of visibility. The most obvious notion of visibility is the weak visibility, namely, simple references to all nodes that can be seen. The strong visibility notion adds some  X  X  X epth X  to visibility. Our first definition of the sphere of visibility comprised of only strong and weak visibilities. Even that definition is powerful enough to deal with some complicated issues. Note that strong visibility notion is inherent in common policies such as  X  X  X pward one tier and downward two tier X  visibility. While trying to devise algorithms to assign SoVs to the different nodes, we came across coherence and correlation properties. The weak and strong visibilities appeared to be two ex-tremes, and we tried to define an intermediate notion of partially strong visibility that will bridge them. Defining partially strong visibility in a natural and meaningful way, and formulating (the intuitively sensible) coherence and correlation properties accommodating the partial strength are the main contributions of this paper. Their inverse and uniform vari-ants are also useful, giving rise to different perspectives for global policies. We believe that most visibility assignments used in real life are based on weak and strong visibilities only. The partially strong visibility notion, and the properties discussed in this paper, will hopefully enable designing novel and sophisticated visibility assignments, not thought of so far.

The generalization of visibility assignment to include partially strong visibility forces representation of the sphere of property enables a single graph representation of SoV X , and similarly, the uniform correlation property enables a single graph representation of the sphere of noticeability SoN X of both visibility and noticeability of all the nodes in one single graph led to the harmonious visibility assignment notion.
We are sure that there are many different other ways of defining V X  X ; Y and hence the SoVs, and many different useful properties other than coherence and correlation. Other formulations, generic or tailored to specific applications, will also prove to be useful.

Through our definitions in this paper, we have shown that visibility can be defined and exploited in sophisticated ways. As a specific example, we show how the visibility formalism can be utilized in an access control mechanism, such as Discretionary Access Control (DAC) discussed by Rosenthal and Sciore [23]. In DAC, a system consists of subjects and objects. Subjects can only access those objects over which they have access rights. By default, subjects have full access rights over the objects they create; they are owners of those objects. The owners can then give (full or partial) access rights over their objects to other subjects. Once a subject has received access rights over an object, the question of whether it can propagate it further to other subjects arises. The SQL Grant/Revoke operators and their extensions pro-posed in [23] address this. In our formalism, access rights, subjects and objects correspond to visibility, nodes and their attributes, respectively.
 not have Y , it could be due to any of the above properties (with W in place of X ) not being true. With SQL Grant/Revoke operators, only (i) can be controlled. (ii) cannot be controlled as SQL operators do not provide the necessary fine grained control where a subject is allowed to propagate a received access right to some, but not all. The extensions proposed in [23] allow SQL operators to control (ii), but still not (iii). There are no provisions for a subject s
This restriction cannot be imposed with SQL operators. There, the properties of the nodes are not interdependent. Simi-larly, revocation of access rights can also be done in a fine-grained way with our formalism but in a hierarchical setup.
An additional benefit with our formalism is keeping track of access privileges and propagation rights in a distributed fash-ion. For example, in each node, the access rights over the objects created in that node can be recorded and updated in its SoN.

We have studied visibility in hierarchical networks. However, the hierarchy is not necessarily directed, that is, not nec-essarily a rooted tree. Also, our definitions accommodate not only upward and downward visibilities, which we call vertical overlaying a hierarchy on a non-hierarchical system, we can carry over the study to non-hierarchical networks also to some extent. Studying properties directly on non-hierarchical networks may be complicated. For instance, defining partially strong visibility and coherence properties in non-hierarchical networks directly will be much more complicated, if not impossible.

Consider a node X of a static hierarchy H . Initially, X has some visibility requirements and noticeability restrictions. Note Y over which X would like to have visibility. The same applies for SoN main dependent and beyond the scope of this paper. Basically, we assume the existence of a nonconflicting set of visibility requirements for H .
 systems or at least to special cases. From an implementation perspective, we would also like to consider dynamic hierarchies functional aspects, such as transactions, monitoring and security.
 Acknowledgements
We sincerely thank the referees for their critical reviews and valuable suggestions which helped to improve both the con-tent and the presentation of this paper considerably.

References
