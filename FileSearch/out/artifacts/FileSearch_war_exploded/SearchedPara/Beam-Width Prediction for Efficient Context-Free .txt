 Statistical constituent parsers have gradually in-creased in accuracy over the past ten years. This accuracy increase has opened the door to automati-cally derived syntactic information within a number of NLP tasks. Prior work incorporating parse struc-ture into machine translation (Chiang, 2010) and Se-mantic Role Labeling (Tsai et al., 2005; Punyakanok et al., 2008) indicate that such hierarchical structure can have great benefit over shallow labeling tech-niques like chunking and part-of-speech tagging.
Although syntax is becoming increasingly impor-tant for large-scale NLP applications, constituent parsing is slow  X  too slow to scale to the size of many potential consumer applications. The exhaus-tive CYK algorithm has computational complexity O ( n 3 | G | ) where n is the length of the sentence and | G | is the number of grammar productions, a non-negligible constant. Increases in accuracy have pri-marily been accomplished through an increase in the size of the grammar, allowing individual gram-mar rules to be more sensitive to their surround-ing context, at a considerable cost in efficiency. Grammar transformation techniques such as linguis-tically inspired non-terminal annotations (Johnson, 1998; Klein and Manning, 2003b) and latent vari-able grammars (Matsuzaki et al., 2005; Petrov et al., 2006) have increased the grammar size | G | from a few thousand rules to several million in an explic-itly enumerable grammar, or even more in an im-plicit grammar. Exhaustive search for the maximum likelihood parse tree with a state-of-the-art grammar can require over a minute of processing for a sin-gle sentence of 25 words, an unacceptable amount of time for real-time applications or when process-ing millions of sentences. Deterministic algorithms for dependency parsing exist that can extract syntac-tic dependency structure very quickly (Nivre, 2008), but this approach is often undesirable as constituent parsers are more accurate and more adaptable to new domains (Petrov et al., 2010).

The most accurate constituent parsers, e.g., Char-niak (2000), Petrov and Klein (2007a), make use of approximate inference, limiting their search to a fraction of the total search space and achieving speeds of between one and four newspaper sen-tences per second. The paradigm for building state-of-the-art parsing models is to first design a model structure that can achieve high accuracy and then, after the model has been built, design effective ap-proximate inference methods around that particu-lar model; e.g., coarse-to-fine non-terminal hierar-chies for a given model, or agenda-based methods that are empirically tuned to achieve acceptable ef-ficiency/accuracy operating points. While both of the above mentioned papers use the CYK dynamic programming algorithm to search through possible solutions, their particular methods of approximate inference are quite distinct.

In this paper, we examine a general approach to approximate inference in constituent parsing that learns cell-specific thresholds for arbitrary gram-mars. For each cell in the CYK chart, we sort all potential constituents in a local agenda, ordered by an estimate of their posterior probability. Given fea-tures extracted from the chart cell context  X  e.g., span width; POS-tags and words surrounding the boundary of the cell  X  we train a log linear model to predict how many constituents should be popped from the local agenda and added to the chart. As a special case of this approach, we simply pre-dict whether the number to add should be zero or greater than zero, in which case the method can be seen as a cell-by-cell generalization of Roark and Hollingshead X  X  (2008; 2009) tagger-derived Chart Constraints. More generally, instead of a binary classification decision, we can also use this method to predict the desired cell population directly and get cell closure for free when the classifier predicts a beam-width of zero. In addition, we use a non-symmetric loss function during optimization to ac-count for the imbalance between over-predicting or under-predicting the beam-width.

A key feature of our approach is that it does not rely upon reference syntactic annotations when learning to search. Rather, the beam-width predic-tion model is trained to learn the rank of constituents in the maximum likelihood trees. 1 We will illus-trate this by presenting results using a latent-variable grammar, for which there is no  X  X rue X  reference la-tent variable parse. We simply parse sections 2-21 of the WSJ treebank and train our search models from the output of these trees, with no prior knowl-edge of the non-terminal set or other grammar char-acteristics to guide the process. Hence, this ap-proach is broadly applicable to a wide range of sce-narios, including tuning the search to new domains where domain mismatch may yield very different ef-ficiency/accuracy operating points.

In the next section, we present prior work on approximate inference in parsing, and discuss how our method to learn optimal beam-search param-eters unite many of their strengths into a single framework. We then explore using our approach to open or close cells in the chart as an alternative to Roark and Hollingshead (2008; 2009). Finally, we present results which combine cell closure and adap-tive beam-width prediction to achieve the most effi-cient parser. 2.1 Preliminaries and notation Let S = w 1 ...w | S | represent an input string of | S | words. Let w i,j denote the substring from word w i +1 to w j ; i.e., S = w 0 , | S | . We use the term chart edge to refer to a non-terminal spanning a specific substring of the input sentence. Let N i,j denote the edge labeled with non-terminal N spanning w i,j , for example NP 3 , 7 . We define an edge X  X  figure-of-merit (FOM) as an estimate of the product of its inside (  X  ) and outside (  X  ) scores, conceptually the relative merit the edge has to participate in the final parse tree (see Figure 1). More formally: With bottom-up parsing, the true inside probability is accumulated and  X  ( N i,j ) does not need to be esti-mated, improving the FOMs ability to represent the true inside/outside distribution.
 In this paper, we use a modified version of the Caraballo and Charniak Boundary FOM (1998) for local edge comparison, which computes  X   X  ( N i,j ) using POS forward-backward scores and POS-to-nonterminal constituent boundary transition proba-bilities. Details can be found in ( ? ).

We also note that in this paper we only use the FOM scoring function to rank constituents in a local agenda. Alternative approaches to rank-ing competitors are also possible, such as Learning as Search Optimization (Daum  X  e and Marcu, 2005). The method we present in this paper to learn the op-timal beam-search parameters is applicable to any ranking function, and we demonstrate this by com-puting results with both the Boundary FOM and only the inside probability in Section 6. 2.2 Agenda-based parsing Agenda-based parsers maintain a global agenda of edges, ranked by FOM score. At each iteration, the highest-scoring edge is popped off of the agenda, added to the chart, and combined with other edges already in the chart. The agenda-based approach includes best-first parsing (Bobrow, 1990) and A* parsing (Klein and Manning, 2003a), which differ in whether an admissible FOM estimate  X   X  ( N i,j ) is required. A* uses an admissible FOM, and thus guarantees finding the maximum likelihood parse, whereas an inadmissible heuristic (best-first) may require less exploration of the search space. Much work has been pursued in both admissible and in-admissible heuristics for agenda parsing (Caraballo and Charniak, 1998; Klein and Manning, 2003a; Pauls et al., 2010).

In this paper, we also make use of agendas, but at a local rather than a global level. We maintain an agenda for each cell, which has two significant ben-efits: 1) Competing edges can be compared directly, avoiding the difficulty inherent in agenda-based ap-proaches of comparing edges of radically differ-ent span lengths and characteristics; and 2) Since the agendas are very small, the overhead of agenda maintenance  X  a large component of agenda-based parse time  X  is minimal. 2.3 Beam-search parsing CYK parsing with a beam-search is a local pruning strategy, comparing edges within the same chart cell. The beam-width can be defined in terms of a thresh-old in the number of edges allowed, or in terms of a threshold on the difference in probability relative to the highest scoring edge (Collins, 1999; Zhang et al., 2010). For the current paper, we use both kinds of thresholds, avoiding pathological cases that each individual criteria is prone to encounter. Further, un-like most beam-search approaches we will make use of a FOM estimate of the posterior probability of an edge, defined above, as our ranking function. Fi-nally, we will learn log linear models to assign cell-specific thresholds, rather than relying on a single search parameter. 2.4 Coarse-to-Fine Parsing Coarse-to-fine parsing, also known as multiple pass parsing (Goodman, 1997; Charniak, 2000; Char-niak and Johnson, 2005), first parses the input sen-tence with a simplified (coarse) version of the tar-get (fine) grammar in which multiple non-terminals are merged into a single state. Since the coarse grammar is quite small, parsing is much faster than with the fine grammar, and can quickly yield an es-timate of the outside probability  X  (  X  ) for use in sub-sequent agenda or beam-search parsing with the fine grammar. This approach can also be used iteratively with grammars of increasing complexity (Petrov and Klein, 2007a).

Building a coarse grammar from a fine gram-mar is a non-trivial problem, and most often ap-proached with detailed knowledge of the fine gram-mar being used. For example, Goodman (1997) suggests using a coarse grammar consisting of reg-ular non-terminals, such as NP and VP, and then non-terminals augmented with head-word informa-tion for the more accurate second-pass grammar. Such an approach is followed by Charniak (2000) as well. Petrov and Klein (2007a) derive coarse gram-mars in a more statistically principled way, although the technique is closely tied to their latent variable grammar representation.

To the extent that our cell-specific threshold clas-sifier predicts that a chart cell should contain zero edges or more than zero edges, it is making coarse predictions about the unlabeled constituent structure of the target parse tree. This aspect of our work is can be viewed as a coarse-to-fine process, though without considering specific grammatical categories or rule productions. 2.5 Chart Constraints Roark and Hollingshead (2008; 2009) introduced a pruning technique that ignores entire chart cells based on lexical and POS features of the input sen-tence. They train two finite-state binary taggers: one that allows multi-word constituents to start at a word, and one that allows constituents to end at a word. Given these tags, it is straightforward to com-pletely skip many chart cells during processing.
In this paper, instead of tagging word positions to infer valid constituent spans, we classify chart cells directly. We further generalize this cell classification to predict the beam-width of the chart cell, where a beam-width of zero indicates that the cell is com-pletely closed. We discuss this in detail in the next section. 3.1 Constituent Closure We first look at the binary classification of chart cells as either open or closed to full constituents, and pre-dict this value from the input sentence alone. This is the same problem that Roark and Hollingshead (2008; 2009) solve with Chart Constraints; however, where they classify lexical items as either beginning or ending a constituent, we classify individual chart cells as open or closed, an approach we call Con-stituent Closure . Although the number of classifi-cations scales quadratically with our approach, the total parse time is still dominated by the O ( n 3 | G | ) parsing complexity and we find that the added level of specificity reduces the search space significantly.
To learn to classify a chart cell spanning words w i +1 ...w j of a sentence S as open or closed to full constituents, we first map cells in the training corpus to tuples: where x is a feature-vector representation of the chart cell and y is the target class 1 if the cell con-tains an edge from the maximum likelihood parse tree, 0 otherwise. The feature vector x is encoded with the chart cell X  X  absolute and relative span width, as well as unigram and bigram lexical and part-of-speech tag items from w i  X  1 ...w j +2 .

Given feature/target tuples ( x ,y ) for every chart cell in every sentence of a training corpus  X  , we train a weight vector  X  using the averaged perceptron al-gorithm (Collins, 2002) to learn an open/closed bi-nary decision boundary: where H (  X  ) is the unit step function: 1 if the inner product  X   X  x &gt; 0 , and 0 otherwise; and L  X  (  X  ,  X  ) is an asymmetric loss function, defined below.

When predicting cell closure, all misclassifica-tions are not equal. If we leave open a cell which contains no edges in the maximum likelihood (ML) parse, we incur the cost of additional processing, but are still able to recover the ML tree. However, if we close a chart cell which contains an ML edge, search errors occur. To deal with this imbalance, we intro-duce an asymmetric loss function L  X  (  X  ,  X  ) to penalize false-negatives more severely during training. We found the value  X  = 10 2 to give the best per-formance on our development set, and we use this value in all of our experiments.
 Figures 2a and 2b compare the pruned charts of Chart Constraints and Constituent Closure for a sin-gle sentence in the development set. Note that both of these methods are predicting where a complete constituent may be located in the chart, not partial constituents headed by factored nonterminals within a binarized grammar. Depending on the grammar factorization (right or left) we can infer chart cells that are restricted to only edges with a factored left-hand-side non-terminal. In Figure 2 these chart cells are colored gray. Note that Constituent Closure re-duces the number of completely open cells consider-ably vs. Chart Constraints, and the number of cells open to factored categories somewhat. 3.2 Complete Closure Alternatively, we can predict whether a chart cell contains any edge, either a partial or a full con-stituent, an approach we call Complete Closure . This is a more difficult classification problem as par-tial constituents occur in a variety of contexts. Nev-ertheless, learning this directly allows us to remove a large number of internal chart cells from considera-tion, since no additional cells need to be left open to partial constituents. The learning algorithm is iden-tical to Equation 2, but training examples are now assigned a positive label if the chart cell contains any edge from the binarized maximum likelihood tree. Figure 2c gives a visual representation of Complete Closure for the same sentence; the number of com-pletely open cells increases somewhat, but the total number of open cells (including those open to fac-tored categories) is greatly reduced.

We compare the effectiveness of Constituent Clo-sure, Complete Closure, and Chart Constraints, by decreasing the percentage of chart cells closed un-til accuracy over all sentences in our development set start to decline. For Constituent and Complete Closure, we also vary the loss function, adjusting the relative penalty between a false-negative (clos-ing off a chart cell that contains a maximum like-lihood edge) and a false-positive. Results show that using Chart Constrains as a baseline, we prune (skip) 33% of the total chart cells. Constituent Closure im-proves on this baseline only slightly (36%), but we see our biggest gains with Complete Closure, which prunes 56% of all chart cells in the development set.
All of these open/closed cell classification meth-ods can improve the efficiency of the exhaustive CYK algorithm, or any of the approximate infer-ence methods mentioned in Section 2. We empir-ically evaluate them when applied to CYK parsing and beam-search parsing in Section 6. The cell-closing approaches discussed in Section 3 make binary decisions to either allow or completely block all edges in each cell. This all-on/all-off tactic ignores the characteristics of the local cell popula-tion, which, given a large statistical grammar, may contain hundred of edges, even if very improbable. Retaining all of these partial derivations forces the search in larger spans to continue down improbable paths, adversely affecting efficiency. We can further improve parsing speed in these open cells by lever-aging local pruning methods, such as beam-search.
When parsing with a beam-search, finding the op-timal beam-width threshold(s) to balance speed and accuracy is a necessary step. As mentioned in Sec-tion 2.3, two variations of the beam-width are of-ten considered: a fixed number of allowed edges, or a relative probability difference from the highest scoring local edge. For the remainder of this pa-per we fix the relative probability threshold for all experiments and focus on adapting the number of allowed edges per cell. We will refer to this number-of-allowed-edges value as the beam-width, notated by b , and leave adaptation of the relative probability difference to future work.

The standard way to tune the beam-width is a sim-ple sweep over possible values until accuracy on a heldout data set starts to decline. The optimal point will necessarily be very conservative, allowing outliers (sentences or sub-phrases with above aver-age ambiguity) to stay within the beam and produce valid parse trees. The majority of chart cells will require much fewer than b entries to find the max-imum likelihood (ML) edge, yet, constrained by a constant beam-width, the cell will continue to be filled with unfruitful edges, exponentially increasing downstream computation.

For example, when parsing with the Berkeley latent-variable grammar and Boundary FOM, we find we can reduce the global beam-width b to 15 edges in each cell before accuracy starts to decline. However we find that 73% of the ML edges are ranked first in their cell and 96% are ranked in the top three. Thus, in 24 of every 25 cells, 80% of the edges are unnecessary (12 of the top 15). Clearly, it would be advantageous to adapt the beam-width such that it is restrictive when we are confident in the FOM ranking and more forgiving in ambiguous contexts.

To address this problem, we learn the optimal beam-width for each chart cell directly. We define R i,j as the rank of the ML edge in the chart cell spanning w i +1 ...w j . If no ML edge exists in the cell, then R i,j = 0 . Given a global maximum beam-width b , we train b different binary classifiers, each using separate mapping functions  X  k , where the tar-get value y produced by  X  k is 1 if R i,j &gt; k and 0 otherwise.

The same asymmetry noted in Section 3 applies in this task as well. When in doubt, we prefer to over-predict the beam-width and risk an increase in processing time opposed to under-predicting at the expense of accuracy. Thus we use the same loss function L  X  , this time training several classifiers:
Note that in Equation 4 when k = 0 , we re-cover the open/closed cell classification of Equa-tion 2, since a beam width of 0 indicates that the chart cell is completely closed.

During decoding, we assign the beam-width for chart cell spanning w i +1 ...w j given models  X  , X  1 ,... X  b  X  1 by finding the lowest value k such that the binary classifier  X  k classifies R i,j  X  k . If no such k exists,  X  R i,j is set to the maximum beam-width value b :
In Equation 5 we assume there are b unique clas-sifiers, one for each possible beam-width value be-tween 0 and b  X  1 , but this level of granularity is not required. Choosing the number of classification bins to minimize total parsing time is dependent on the FOM function and how it ranks ML edges. With the Boundary FOM we use in this paper, 97.8% of ML edges have a local rank less than five and we find that the added cost of computing b decision boundaries for each cell is not worth the added specificity. We searched over possible classification bins and found that training four classifiers with beam-width deci-sion boundaries at 0, 1, 2, and 4 is faster than 15 in-dividual classifiers and more memory efficient, since each model  X  k has over 800,000 parameters. All beam-width prediction results reported in this paper use these settings.

Figure 3 is a visual representation of beam-width prediction on a single sentence of the development set using the Berkeley latent-variable grammar and Boundary FOM. In this figure, the gray scale repre-sents the relative size of the beam-width, black being the maximum beam-width value, b , and the lightest gray being a beam-width of size one. We can see from this figure that very few chart cells are classi-fied as needing the full 15 edges, apart from span-1 cells which we do not classify. We run all experiments on the WSJ treebank (Mar-cus et al., 1999) using the standard splits: section 2-21 for training, section 22 for development, and section 23 for testing. We preprocess the treebank by removing empty nodes, temporal labels, and spu-rious unary productions ( X  X  X ), as is standard in published works on syntactic parsing.

The pruning methods we present in this paper can be used to parse with any grammar. To achieve state-of-the-art accuracy levels, we parse with the Berke-ley SM6 latent-variable grammar (Petrov and Klein, 2007b) where the original treebank non-terminals are automatically split into subclasses to optimize parsing accuracy. This is an explicit grammar con-sisting of 4.3 million productions, 2.4 million of which are lexical productions. Exhaustive CYK parsing with the grammar takes more than a minute per sentence.

Accuracy is computed from the 1-best Viterbi (max) tree extracted from the chart. Alternative de-coding methods, such as marginalizing over the la-tent variables in the grammar or MaxRule decod-ing (Petrov and Klein, 2007a) are certainly possible in our framework, but it is unknown how effective these methods will be given the heavily pruned na-ture of the chart. We leave investigation of this to future work. We compute the precision and recall of constituents from the 1-best Viterbi trees using the standard EVALB script ( ? ), which ignores punc-tuation and the root symbol. Accuracy results are reported as F-measure ( F 1 ), the harmonic mean be-tween precision and recall.

We ran all timing tests on an Intel 3.00GHz pro-cessor with 6MB of cache and 16GB of memory. Our parser is written in Java and publicly available at http://nlp.csee.ogi.edu. We empirically demonstrate the advantages of our pruning methods by comparing the total parse time of each system, including FOM initialization, chart cell classification, and beam-width prediction. The parse times reported for Chart Constraints do not in-clude tagging times as we were provided with this pre-tagged data, but tagging all of Section 22 takes less than three seconds and we choose to ignore this contribution for simplicity.

Figure 4 contains a timing comparison of the three components of our final parser: Boundary FOM ini-tialization (which includes the forward-backward al-gorithm over ambiguous part-of-speech tags), beam-width prediction, and the final beam-search, includ-ing 1-best extraction. We bin these relative times with respect to sentence length to see how each com-ponent scales with the number of input words. As expected, the O ( n 3 | G | ) beam-search begins to dom-inate as the sentence length grows, but Boundary FOM initialization is not cheap, and absorbs, on average, 20% of the total parse time. Beam-width prediction, on the other hand, is almost negligible in terms of processing time even though it scales quadratically with the length of the sentence.
We compare the accuracy degradation of beam-width prediction and Chart Constraints in Figure 5 as we incrementally tighten their respective prun-ing parameters. We also include the baseline beam-search parser with Boundary FOM in this figure to demonstrate the accuracy/speed trade-off of ad-justing a global beam-width alone. In this figure we see that the knee of the beam-width prediction curve (Beam-Predict) extends substantially further to the left before accuracy declines, indicating that our pruning method is intelligently removing a sig-nificant portion of the search space that remains un-pruned with Chart Constraints.

In Table 1 we present the accuracy and parse time for three baseline parsers on the development set: exhaustive CYK parsing, beam-search parsing using only the inside score  X  (  X  ) , and beam-search parsing using the Boundary FOM. We then apply our two cell-closing methods, Constituent Closure and Com-plete Closure, to all three baselines. As expected, the relative speedup of these methods across the var-ious baselines is similar since the open/closed cell classification does not change across parsers. We also see that Complete Closure is between 22% and 31% faster than Constituent Closure, indicating that the greater number of cells closed translates directly into a reduction in parse time. We can further apply beam-width prediction to the two beam-search base-line parsers in Table 1. Dynamically adjusting the beam-width for the remaining open cells decreases parse time by an additional 25% when using the In-side FOM, and 28% with the boundary FOM.

We apply our best model to the test set and report results in Table 2. Beam-width prediction, again, outperforms the baseline of a constant beam-width by 65% and the open/closed classification of Chart Constraints by 49%. We also compare beam-width prediction to the Berkeley Coarse-to-Fine parser. Both our parser and the Berkeley parser are written in Java, both are run with Viterbi decoding, and both parse with the same grammar, so a direct compari-son of speed and accuracy is fair. 2 We have introduced three new pruning methods, the best of which unites figure-of-merit estimation from agenda-based parsing, local pruning from beam-search parsing, and unlabeled constituent structure Parser Sec/Sent F 1 CYK 70.383 89.4 CYK + Constituent Closure 47.870 89.3 CYK + Complete Closure 32.619 89.3 Beam + Inside FOM (BI) 3.977 89.2 BI + Constituent Closure 2.033 89.2 BI + Complete Closure 1.575 89.3 BI + Beam-Predict 1.180 89.3 Beam + Boundary FOM (BB) 0.326 89.2 BB + Constituent Closure 0.279 89.2 BB + Complete Closure 0.199 89.3 BB + Beam-Predict 0.143 89.3 prediction from coarse-to-fine parsing and Chart Constraints. Furthermore, our pruning method is trained using only maximum likelihood trees, allow-ing it to be tuned to specific domains without labeled data. Using this framework, we have shown that we can decrease parsing time by 65% over a standard beam-search without any loss in accuracy, and parse significantly faster than both the Berkeley parser and Chart Constraints.

We plan to explore a number of remaining ques-tions in future work. First, we will try combin-ing our approach with constituent-level Coarse-to-Fine pruning. The two methods prune the search space in very different ways and may prove to be complementary. On the other hand, our parser cur-rently spends 20% of the total parse time initializing the FOM, and adding additional preprocessing costs, such as parsing with a coarse grammar, may not out-weigh the benefits gained in the final search.
Second, as with Chart Constraints we do not prune lexical or unary edges in the span-1 chart cells (i.e., chart cells that span a single word). We ex-pect pruning entries in these cells would notably re-duce parse time since they cause exponentially many chart edges to be built in larger spans. Initial work constraining span-1 chart cells has promising results (Bodenstab et al., 2011) and we hope to investigate its interaction with beam-width prediction even fur-ther.
 Parser Sec/Sent F 1 CYK 64.610 88.7 Berkeley CTF MaxRule 0.213 90.2 Berkeley CTF Viterbi 0.208 88.8 Beam + Boundary FOM (BB) 0.334 88.6 BB + Chart Constraints 0.244 88.7 BB + Beam-Predict (this paper) 0.125 88.7
Finally, the size and structure of the grammar is the single largest contributor to parse efficiency. In contrast to the current paradigm, we plan to inves-tigate new algorithms that jointly optimize accuracy and efficiency during grammar induction, leading to more efficient decoding.
 We would like to thank Kristy Hollingshead for her valuable discussions, as well as the anony-mous reviewers who gave very helpful feedback. This research was supported in part by NSF Grants #IIS-0447214, #IIS-0811745 and DARPA grant #HR0011-09-1-0041. Any opinions, findings, con-clusions or recommendations expressed in this pub-lication are those of the authors and do not necessar-ily reflect the views of the NSF or DARPA.

