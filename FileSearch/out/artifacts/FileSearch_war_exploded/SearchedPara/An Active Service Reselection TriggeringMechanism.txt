 Ying Yin, Tiancheng Zhang, Bin Zhang, Gang Sheng, Yuhai Zhao, and Ming Li The advantage of composite Web services is that it realizes a complex appli-cation by connecting multiple component services seamlessly. However, in real applications, Web service lives in a highly dynamic environment, both the net-work condition and the operational status of each of the constituent Web Ser-vices(WSs) may change during the life-ti me of a business process itself. The instability brought on by various uncertain factors often makes the composite services to be interrupted or interrupted temporally. Therefore, it is very impor-tant to ensure the normal execution of the composite service applications and to provide a reliable software system[11].

Reselection mechanisms for failed servi ces are important technologies which ensures the reliability of composite services. On the other hand, reselection of services triggered by interruptions may not be suitable as the pre-computing of the Quality of Service (QoS) is costly both in time and financial cost. The system can identify the unreliable service by predicting potential interrupting factors in advance and then avoids the exceptional service interruption. That is, prediction has gradually become a valid method to trigger service reselection [9]. Prediction is realized by some algorithms which monitor and evaluate the quality of composite services. There are several prediction methods, such as ML-based methods known in literature[2], QoS-aware based methods[3,4] and collaborative filtering-based methods[5,9] and so on.

Despite the existence of previous work, prediction methods still three major challenges remain, as defined below. First of all, most of the traditional prediction models, such as Support Vector Machines (SVM) and Artificial Neural Networks (ANN), can only take input data as vectors of features [12]. However, there are no explicitly features in sequential data. Secondly, prediction models based on QoS monitoring, such as Naive Bayes and Markov model[10], which assume that sequences in a class are generated by an underlying model M and the probability distributions are described by a set of parameters. These parameters however, are obtained by predicting the QoS during the whole lifecycle of the services and will therefore lead to high o verhead costs. Another method is prediction based on sequence distance, such as collaborative fil tering[9], this type of methods require the definition of to define a distance function to measure the similarity between a pair of sequences. However, how to select an optimal similarity function is far from trivial, as it will introduce numerous parameters and measures for distances can be subjective.

In order to maintain the reliability of composite services, an important thing for us is actively identify exception patte rns and trigger servi ce reselection algo-rithm quickly. In this paper, we proposes an efficient service reselection mech-anism by mining previous patterns in advance. The system will trigger service reselection once the currently executing sequence matches any mined historical sequence indicating imminent failure.

The remainder of this paper is organized as follows: Section 2 discusses the system architecture. In Sect ion 3, we present the proces s of extracting execution instances from execution logs while in Section 4 the basic related definitions are given, and an efficient method for id entifying early patterns based on an interest measure is proposed, and methods for implementation are presented. We summarize our research and discuss some future work directions in Section 5. Below we describe the system architect ure of our service reselection trigger-ing mechanism. After accepting a user X  s query specification, our BPEL Engine should be able to provide a composite s ervice execution sequence. Once some latent exception is identified during execution, our system will trigger the rese-lection process.

There are four phases in the trigger process: (1) recording the composite service execution log information to generate the execution service sequence repository; (2) cleaning collected data and converting service log into service execution sequences; (3) mining early pre diction patterns from converted execu-tion sequences and deducing predictive rules ; (4) triggering the service reselection process as soon as an executing service sequence matches one of the early predic-tion patterns. Figure 1 shows the whole reselection triggering process and below each of the steps will be briefly discussed.
 Recording of composite service execution log. During this phase, the system needs to collect large amounts of failed composite service execution information, aiming to mine useful knowledge and to analyze the causes of failure reason so as to trigger service reselection as quickly as possible. The generated composite service execution log repository forms the basis for early prediction.
 Extracting of the service execution sequence. the original service log includes a large variety of information, such as Web Service Description Language (WSDL) information, keywords, IP address, QoS and so on. The data needs to be cleaned and QoS information needs to be transfe rred into sequences so as to mine early pattern effectively. For the functionally similar Web services, even for each Web service itself, perceptive QoS values may differ at different time points or different network environments thus presumably indicating the difference in quality. That means that the quality of Web service might different in different situation. Therefore, extracting descriptive infor mation from the servi ce log and converting it into forms that can readily be mined are the key part of our methods. The details of this step will be given in Section 3.
 Mining of early prediction pattern . Various behavioral patterns in different envi-ronment can be lead to composite servi ce execution failure. However, both the time when the fault occurs and the length of the behavioral pattern influence when the service reselection will be tri ggered. Under the various environments, mining triggering patterns with minimal cost and triggering the reselection as earlier as possible are the important issues in our work. The contents of this part will be described in Section 4. Triggering of Reselection . These mined execution sequence patterns can be used to timely detect whether the composite s ervice deviates from normal execution. This kinds of knowledge should be applied to improve the reliability of the composite service. Based on these mine d rules, how to construct an efficient search tree aiming to trigger the resel ection process becomes an more important issues in promoting the reliability. The details of this part will be described in the further work. Once a service-oriented application or a composite service is deployed in a run-time execution environment, the applic ation can be executed in many execu-tion instances. Each execution instance is uniquely identified with an identifier (i.e., id). In each execution instance, a s et of service sequences can be triggered. Various uncertain factors may make a execution instance fail. Reason for this phenomenon is that there exists a large number of potential exception status information under different uncertain factors. We record triggered events in a log which contains different types of information. We are interested in failed QoS information. It is helpful for service quality management by extracting the execution status information from execution log to predict the service reliability.
In order to depict various exception status information clearly, for each com-ponent service, we only consider two QoS attributes as an example, such as the availability attribute ( AV ) and the execution time attribute( EXE ). There are three possible states for AV , namely inaccessible, intermittently accessible and accessible, which are denoted by av 0 , av 0 . 5 and av 1 respectively. EXE on the other hand can only signify two states, namely exe 0 and exe 1 representing de-layed execution and normal execution re spectively. Under these situations, we can obtain five possible groups of service execution statuses information which are shown in Table 1: &lt;av 0 ,exe 0 &gt; , denoted by S 0 , represents server unavail-able but runtime delay, &lt;av 0 . 5 ,exe 0 &gt; , denoted by S 1 , represents server avail-able intermittently but runtime delay, &lt;av 1 ,exe 0 &gt; , denoted by S 2 ,represents server available but runtime delay, &lt;av 0 . 5 ,exe 1 &gt; , denoted by S 3 ,represents server available intermittently but normal execution and &lt;av 1 ,exe 1 &gt; , denoted by S 4 , represents server available but norm al execution. However, for the status information &lt;av 0 ,exe 1 &gt; , denoted by S 0 , represents server unavailable but nor-mal execution. We do not consider this status, as it cannot occur in practice.

Based on the description assumption above large collections of composite service execution records D which are stored as sequential data as shown in Table 2. Let S = { S 1 , S 2 ,..., S n } , then each record consists of one or more com-ponent services from S. Note that every component service will have different QoS expression values, which can evaluat e describe the execution status of that component service. For simplify, we let t he capital letters with subscript, such as S 1 , S 2 , S 3 , S 4 , denotes different ab stract service class and the superscript, denotes different QoS statuses of the component service. Table 2 only shows a service execution data with 15 failed users(not including successful users) and four abstract service class. Bellow are some definitions related. In order to classify the each service sequ ence status into different fault types, we need to extract features from executi on service log. Due to the unsupervised nature of the service log data, the first step is to mine those patterns that are effective for predicting services to be failed. 4.1 Basic Definition In this section, we introduce some of the basic concepts for mining statuses and give the problem definition.
 Definition 1. Pattern .Let D be an execute service log with service set S , S or a subset of the execution sequence with different status information, s k l denotes the k th status information of the i th service, where { i, j, k } X  [0 , 1 , 2 , 3 , 4] .A component service with status information or a set of component pairs is called a Pattern. .
 Given a pattern p= s i 1 s j 2 , ...p k m , we say pattern p appears in a sequence s if there For example, p = { acd } appears in sequence s = { aacdfgacde } . However, a pattern p may appear multiple times in a sequence. Below, we give the minimal prefix length definition.
 Definition 2. Earliest Matching Pattern . Given Pattern p and sequence s, where p  X  s. The Earliest Matching Pattern (EMP) is the distance from initial position of s to the first occurrence of p in s, and is denoted by EMP ( P, S ) . Definition 3. Earliest Support .Letpbeapattern.The Earliest Support (ES) of pattern p is the ratio of the sum of the reciprocals of the earliest position of p to the number of instances in the data set, i.e.: Problem Statement . For a given failed service log entry, a Pattern p should satisfy: (1) Pattern p should frequently be present in failed type; (2) Pattern p should be as short as possible and should have low prediction cost; All patterns satisfy the above conditions called Early Patterns . the optimal rules are deduced called Early and Concise (EC) Rule Sets . 4.2 Early Pattern Mining Algorithm Previous existing pattern mining methods r equire the definition of various thresh-olds as quality measures such as support, confidence , such that only those relatively frequent rules are selected for classifier construction. However, these mining methods are ineffective in practice and the set of mined rules are still very large. It is very hard for a user to seek out appropriate rules. In our case, we consider the earliness and conciseness properties to design a utility measure and only preserve those early, concise patterns passing the measure from the training database.

The mining process is conducted on a prefix tree. Limited by space, we omit the description of constructing such a prefix tree structure. A complete pseudo-code for mining optimal EP sets is presented in Algorithm 1.

Finding interesting contrast sequence rules by checking all subsequence along the paths is still a tough task. Various pruning rules are introduced below to prevent unnecessary rule generation and only preserve interesting rules. Reduc-ing the search space are extremely important for efficiency of EP. In algorithm 1, we use two efficient pruning rules to improve efficiency.
 Pruning Rule 1. Pruning by ES .
 Given ES (Definition 3), Pattern pa denotes pattern p and all its possible proper supersets. If 0 EP (p)  X  , then pattern p and its supersets will not be an optimal rule.
 Note: The presentation of pruning rule 1 describes the early support of a pat-tern, not the general support. Becaus e in a exception execution log, pattern p may emerge several times. We only record the first position so as to trigger ser-vice reselection procedures as soon as possi ble. This is difference with traditional association rules.
 Pruning Rule 2. Pruning by concise.
 If pattern p satisfy EP (p)= EP (pa), where pa denotes its proper superset, then pattern pa and all its possible proper supersets will not be useful for EP. Limited by space, we omit the proof. The above pruning rules are very efficient since it only generates a subset of frequent patterns with maximal interestingness instead of all ones. In this paper, we discuss the mining of early prediction patterns which are im-portant for predicting service reliability, and propose two interest measures in order to decide whether the rules are concise and as short as possible in length for quickly identifying exception patterns. Based on the proposed interest measures, we propose a new algorithm with efficient pruning rules to mine all optimal EP rules. Acknowledgments. This work was supported by a grant from the National Natural Science Foundation of China under grants (No.61100028, 61272182, 61272180, 61073062); the New Century Excellent Talents in University Award (NCET-11-0085); the Ph.D. Programs Fo undation of Ministry of Education of China(young teacher )(No.20110042120034); the Fundamental Research Funds for the Central Universities under grants (No. N 110404017, N110404005); China Postdoctoral Science Fo undation (N o. 20100481204, 2011M500568, 2102T50263);
