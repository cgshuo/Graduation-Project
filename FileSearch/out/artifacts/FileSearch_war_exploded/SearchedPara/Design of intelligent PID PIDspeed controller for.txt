 1. Introduction
Due to the increase in intricacies of practical applications, indus-tries are in need of higher performance drives, which should be robust and reliable than the existing, apart from satisfying the industrial requirements. A few applications of high-performance drives include areas of rolling mills, machine tools, traction and robotics ( Paresh, 1990 ). These applications need drive systems that can provide quick dynamic response, control characteristics that are insensitive to parameters and swift recovery from speed drops caused via sudden high performance drive systems should at least track dynamic speed command and also should maintain load-regulating response. The above requirements can be easily met by employing Direct Current (DC) motor drives ( Dubey, 2009 ). DC motor drives are highly preferred andwidelyusedinapplicationsdem anding adjustable speed, frequent starting and good speed regulati on because of their excellent control of speed for acceleration and deceleration ( Dubey, 2009;
Subrahmanyam, 2011 ). Although AC motor drives popularity is on upswing for many industrial applications, even now the variable speed applications are dominated by DC drives because of their lower cost, simple control and good reliability ( Paresh, 1990 ). The decoupled nature of fi eld magnetomotive force (mmf) and armature mmf is one of main advantage of using DC motors. The power supply of DC motor is directly fed to fi eld of motor, which allows for a precise voltage control, and which in turn aids speed and torque control applications.
Another advantage of these motors includes, providing starting and accelerating torques in excess of 400% load and one of the primary applications of DC motors is Electrical traction ( Dubey, 2009; Subrahmanyam, 2011 ).

Single Input Single Output (SISO) systems having speed (torque) characteristics well suited with most mechanical loads. This property of DC motors makes them controllable over wide range of speed by providing good adjustment schemes to terminal voltage. These exemplary features makes DC motors to be a good choice for the state-of-art control algorithms and also the speed control concept of these motors can be extendable to other types of motor as well ( Sundareswaran, 2000 ).

Typically for speed control of DC motor drive a closed loop operation with PI/PID controllers with an inner current and outer speed loop is preferred and employed ( Dubey, 2009 ). Out of various closed loop controllers available, Proportional-Integral-
Derivative (PID) based control scheme is widely preferred in many industrial applications because of their ease in structure and implementation. PID based speed control scheme has many advantages like good steady state accuracy, less settling time, quick control and low cost ( Subrahmanyam, 2011 ). Conventional notion of integer order (IO) PID controllers has been generalized to a more fl exible structure PI  X  D  X  controller by Podlubny (1999) with the fractional differo-integral operators and controller gains as design variables. PI  X  D  X  or fractional order (FO) PID controller that exhibits dynamical behavior is described by differential equations including derivatives and integrals whose order is not an integer ( Das, 2011 ). Literature studies since early 2000s reveal that there has been surge of applications centered on fractional or non-integer calculus and also its extensions to wide gamut of problems ranging from physics to biology ( Tenreiro Machado et al., 2010 ).
FO controllers are shown to be more robust and can outperform normal PID controllers if they can be designed effectively ( Pan and Das, 2013; Monje et al., 2010 ).

A typical FOPID controller consists of fi ve interdependent para-meters i.e., proportional ( K P ), integral ( K I ), derivative ( K derivative (  X  )andorderofIntegral(  X  ). A FOPID controller can also be used as IOPID controller for  X   X   X   X  1. Hence, designing an optimum
PID and FOPID control structures for meeting design speci DC drive requires fi ne tuning of parametric gains { K P , K
This in return calls for real parameter optimization in 3-dimensional (for PID controller) and fi ve-dimensional hyperspace (for FOPID controller). The design of controllers for application concerned is generally carried out using time and frequency domain approach.
The time domain based design of controllers focus on obtaining good response of system while monitoring time indices in transient and steady state. While on other hand with the help of frequency domain rules iso-damping property ( Das, 2011 ) can be introduced into the system. The basic idea of frequency domain approach is to design a controller such that open loop transfer function (T/F) refers to Bode  X  s ideal T/F which has a property of no variation in phase margin with respect to variation in gain crossover frequency. This kind of design and analysis enables user to choose his desired method. In both domains, the controller variables are related to a single objective function and a global optimization procedure is applied to obtain optimal controller gains.

Out of all existing swarm intelligent algorithms based on bees like BCO, BA, MBO, etc., arti fi cial bee colony (ABC) algorithm has gained wide reputation in swarm intelligence (SI) research com-munity because of its outstanding performance on various kinds of practical problems ( Karaboga and Akay, 2009 ). ABC was fi devised and developed by Karaboga (2005) for numerical function optimization. Due to its ease in structure, implementation fol-lowed by a well-organized exploitation and exploration mechan-isms; ABC remained to be the best contender for existing state-of-art evolutionary methods. A comprehensive view of recent devel-opments and real world applications can be found in Karaboga et al. (2012) . To further enhance the performance of conventional
ABC algorithm we propose opposition based arti fi cial bee colony (OABC) algorithm, which draws its inspiration from opposition based DE ( Rahnamayan et al., 2008 ). Opposition methods play a pivotal role in discovering global solution when there is a strict limitation on number of iterations. In this present work ABC and OABC are chosen as optimization algorithms for fi nding the opti-mal parametric gains of PID and FOPID controller. Computer simulations and wide range of analysis revealed that an optimally designed FOPID controller could outperform PID based control scheme. To check the superiority of OABC on controller design application we also compared its performance with existing meta-heuristics like genetic algorithm (GA), particle swarm optimization (PSO) along with basic version of ABC. Further observations from our studies revealed that both the controllers are dependent upon objective function de fi ned; hence a well-posed objective function, aided by robust optimization technique leads to better perfor-mance of plant/process considered.

The rest of paper is organized as follows. Section 2 deals with the literature survey of various design methods used for designing FOPID controllers in time and frequency based domain. In Section 3 mathematical modeling of closed loop control of DC motor drive is performed. A brief introduction to fractional order systems and controllers are provided in Section 4 . Rudiments of arti fi cial bee colony and Opposition-ABC algorithms are presented in Section 5 . Time domain based and frequency domain based design of controllers and their performances are discussed in Sections 6 and 7 respectively. Conclusions inferred from the results obtained and future work details are provided in Section 8 . 2. Related research for designing FO controllers
Among existing quantitative measures of the performance of a system, time integral performance indices are commonly used to evaluate performance of control systems designed ( Tavazoei, 2010 ). The most common indices include ITAE, IAE, ITSE and ISE ( Tavazoei, 2010 ). Several intelligent techniques have been pro-posed for tuning optimal FOPID controllers based on minimizing these indices (and also variants as well) ( Pan and Das, 2013 ). Rajasekhar et al. (2013) used ITAE based scheme for designing FOPI controller in a PMSM drive using Hybrid Differential Arti Colony Algorithm. Maiti et al. (2008) developed a FOPID controller for stable minimum phase systems by optimizing ITAE with PSO algorithm. Rajasekhar et al. (2012) also tuned a FOPID controller with help of aforementioned criterion for servo hydraulic posi-tioning system using micro ABC algorithm. Notable applications of ITAE based fractional controllers include works carried out by Cai et al. (2009) using multi-parent evolutionary algorithm, Luo and Li (2009) used blend of Bacterial Foraging and PSO (BF-PSO) approach; load frequency control via fractional controllers by Alomoush (2010) ; Xue and Chen veri fi ed the advantage of both ITAE and ISE in the presence of nonlinearities using DC motor as test bed, for position systems by Chen ( Xue et al., 2006 ). Few interesting approaches based on rest of indices include fractional control of heat diffusion systems by Jesus and Tenreiro Machado (2008) . Recently few researchers, apart from considering above-mentioned error centered metrics also focused on minimizing control signal. The most widely used one are Integral Squared Controller Output (ISCO), and deviation output (ISDCO) ( Pan and Das, 2013 ). Cao et al. (2005) used GA to optimize weighted sum of ISE and ISCO to fi nd out controller parameters and also Cao and Cao (2005) used PSO for similar application. Pioneering works involving combinations of time integrals and controller integrals and their tuning using various evolutionary algorithms for appli-cations ranging from process control, MIMO systems, networked control systems, chaotic systems can be found in Pan and Das (2013) . Apart from single objective optimization, a multi-objective chaotic NSGA-II has been used to handle objectives ITSE and ISCO in AVR systems by Pan and Das (2012) . Apart from evolutionary and swarm intelligent based designs, fuzzy rules are also incorporated in FOPID structure and which lead to the formation of fuzzy fractional order controller ( Das et al., 2012 ). Other approaches apart from time integrals include dominant pole placement based optimization problems using Differential Evolution (DE) by Biswas et al. (2009) ,
Cauchy mutated ABC by Rajasekhar et al. (2011) . Venu Kishore et al. (2009) designed PSO based optimizing framework for minimizing weighted sum rise time ( t r ), overshoot ( M p ), settling time ( t for minimizing power systems inter-area oscillations can be found in Zhao et al. (2009) .

Although many design methods of fractional controllers revolved around the time domain approach, there are also few works concentrated on developing FO controllers using frequency domain rules. Monje et al. (2004) used constrained Nelder-mead simplex algorithm to auto tune fractional controllers based on frequency domain rules. Dorack et al. (2007) developed frequency domain based fractional order PID controller using self-organizing migrating algorithm (SOMA). Pan and Das (2013) devised a single objective optimization frame work based on frequency domain rules and developed FO controllers for reduced fractional tem-plates of various higher order process control systems. Few researchers also developed weighted sum of time domain and frequency domain criteria optimization framework to tune FO controllers. Zamani et al. (2007) and Karimi-Ghartemani et al. (2007) applied aforementioned framework to tune FOPID con-troller for an automatic voltage regulator (AVR). 3. Mathematical modeling of DC motor drive
The speed of separately excited DC motor can be regulated above and below rated speed using chopper as a converter. This paper deals with an armature voltage controlled scheme while maintaining fi eld fl ux constant. The basic idea of this type of DC motor speed control is that the output speed can be altered by controlling armature voltage for achieving desired speed (under constant fi eld current) ( Subrahmanyam, 2011; Gopakumar ). To have good speed regulation characteristics, closed loop speed control is preferred. Fig. 1 portrays the actual closed loop speed and current control model of DC motor drive. Block diagram represented in Fig. 1 can be reduced to the model in Fig. 2 , involving only single closed speed control loop, mainly used for analysis purposes.

The error signal i.e., resultant of reference speed ( N ref feedback ( N f ) is fed as input to speed controller. The controller provides required voltage signal ( E c ) to control the operation of duty cycle of converter. As a result converter (chopper) provides suf fi cient armature voltage ( V a ) to bring motor speed to the desired level. The output speed of motor is measured with the help of Tacho-Generator. Since the Tacho voltage obtained will include few ripples in the measured speed (not be in perfect DC form) a fi lter with an optimal gain is provided in the feedback path of speed control loop ( Gopakumar ). 3.1. Modeling of separately excited DC motor armature winding, each of them are provided with separate supply ( Fig. 3 ). Field windings of motor are used to excite the fl ux. The rotor draws armature current with the help of brush and commutator segment. A separately excited DC motor is excited by a fi eld current ( I f ) and as a consequence an armature current ( I fl ows in the circuit. As a result motor develops a back EMF and a torque to balance the load torque at a particular speed level. of separately excited DC motor in Fig. 3 will leads to armature voltage Eq. (3.1) and the equivalent Torque generated is given by Eq. (3.2) .
 V a  X  I a R a  X  L a dI a dt  X  E b  X  3 : 1  X 
T d  X  J d where V a , armature voltage (V); E b , motor back EMF (V); I armature current (A); R a , armature resistance (  X  ); L a inductance (H); T L , load torque (N m); T d , developed torque (N m);
J , moment of inertia (kg/m 2 ); B , friction coef fi cient of motor; angular velocity (rad/s).
 friction in motor ( B  X  0). Further denoting  X  as fi eld fl
K (V/A s/rad) as back EMF constant, corresponding simpli fi equations of back EMF and torque developed can be obtained:
T d  X  J d E b  X  K  X  X   X  3 : 4  X  T d  X  K  X  I a  X  3 : 5  X 
With the help of above equations and by applying Laplace trans-form to Eq. (3.1) the following equations in  X  s-domain  X  derived:
I a  X  s  X  X  V a E b R  X   X  s  X  X  T d T L Js  X  K where T a represents armature time constant and is given by
T  X  L a / R a . The equivalent model of DC motor is shown in Fig. 4 (annotated in green). By applying block reduction technique to the motor model in Fig. 4 , the following transfer function can be obtained:  X   X  s  X 
V  X  s  X   X   X  K
Assuming T m  X  JR a /( K  X  ) 2 as electromechanical time constant and replacing K  X  by K m ( T L  X  0) Eq. (3.8) can be further reduced to
Eq. (3.9) :  X   X  s  X 
V  X  s  X   X  1
From Eq. (3.9) it is clear that the two-time constants i.e., T
T of the above system transfer function (T/F) are accountable for the response of system. 3.2. Current control loop
Due to the presence of electromechanical time constant, motor will consume some time to speed up ( Gopakumar ). On the other hand speed controller used will be acting very fast. Initially speed feedback is zero, and this result in maximum converter voltage signal ( V a ). This ultimately leads to large amount of current the motor because of zero back EMF. In course of time this current may exceed the motor maximum current limit and can damage the motor windings. Hence there is a need to control motor armature current. This problem can be eliminated if closed loop current control scheme can be implemented. As it is clear that speed error indicates the required acceleration, more torque is required for desired speed, which is nothing but more current requirement.

Whenever there is an increase in reference current ( I ref signaled by speed controller, motor armature current increases and thereby providing required acceleration and torque. On the other hand if speed error reduces, the current and torque reduces to drive motor to desired speed. The main objective of current control loop is to make the armature current follow the current reference signal ( I ref ). As the components such as power electronic converter, motor windings etc., are designed for particular rating care has to be taken such that the current or voltage signals higher than these rating should be clamped out. Hence current control loop acts as a heart of DC motor drive in providing safety for the equipment apart from assisting in getting desired response.
Due to this type of control, applied voltage ( V a ) not only depends on speed error but also relies on current error as well. Hence a current controller is required in the closed loop current control to ensure that V a applied during positive and negative torques will not draw more than the rated current. In this work we considered chopper as converter. Typically chopper is a static power electronic component, which converts fi xed DC input voltage to a variable DC output. Since they involve one-stage conversion chop-persaremoreef fi cient when compared to rest of them. Since, chopper works on the principle of pulse width modulation it involves no time delay in its operation. Hence, a chopper can be represented DC-choppers and their relevant mathematical expressions can be obtained in Bimbhra (2006) .

Since there will be more amount of current fl ow in armature circuit of motor, the current controller should be designed for extreme conditions (i.e., back EMF  X  0). Equivalent model of current control loop can be found in Fig. 4 (annotated in red). The equivalent Transfer function of the close loop current control is given by the following equation:
I  X  s  X  I  X  s  X  To achieve faster response the current controller time constant T has to be chosen such that largest time constant in above transfer function (T/F) should be canceled. This is achieved by assuming T c  X  T a ; now Eq. (3.10) can be reduced to Eq. (3.11) :
I  X  s  X  I  X  s  X  K  X  current loop fi lter lag; T 2  X  current loop fi lter lag. The char-acteristic equation of Eq. (3.11) will be equivalent to standard second order system equation. To get proper response, the con-stant  X  of the 2nd order system is set to 0.707 and equating this to our current T/F (3.11) results in value of K 0 in terms of K given by K 0  X  1/(2 K 2 T 2 ).

From Eq. (3.11) it is very clear that zero in the T/F may result in overshoot. Hence a time lag fi lter is used to cancel its effect. As current loop time constant is much higher than the fi lter time constant, a small time delay will not affect the system (s) V performance. By above expressions Eq. (3.11) is simpli fi following form:
I  X  s  X 
I  X  s  X  3.3. Speed control loop
After considering few approximations in the aforementioned equations, complete layout of closed loop speed control scheme involving inner current control loop in chopper fed DC motor drive is shown in Fig. 4 . The speed controller either PID or FOPID has to be designed based on user/drive speci fi cations such that desired speed is achieved within the constraints levied. The controller is designed in two different environments i.e., using time domain indices and using frequency domain rules. As the time domain based approach requires minimization of objective function based on time integrals, closed loop control demonstrated in Fig. 4 will be suf fi cient. On the other hand frequency domain based design of controllers requires frequency responses for DC drives and con-trollers. Hence the individual blocks of model depicted in Fig. 4 are reduced to convenient form based on discussions in Section 3 .
A reduced form of speed controller loop is depicted in Fig. 5 , which is a simpli fi ed model of Fig. 4 . 4. Fundamentals of fractional order controllers
Since the inception of fractional order PID or PI  X  D  X  controllers ( Podlubny, 1999 ), they are used in diverse fi elds of engineering.
They are also known as generalized version of conventional PID controller. The basic idea of fractional order controllers derives its origin from the concept of fractional calculus ( Das, 2011; Oldham and Spanier, 1974 ). Fractional calculus is a branch of mathematical analysis (having 300 years history) that considers and studies the possibility of taking arbitrary real number (not necessarily real) power of the integration and differential operator. Although most popular de fi nitions of fractional derivative like Riemann Loville and Grunwald  X  Letnikov are prevalent in fractional calculus litera-ture, Caputo de fi nition is widely preferred for designing fractional order systems ( Das, 2011 ). The main advantage of using Caputo s de fi nition is that it allows for consideration of easily construable bounded initial conditions, which means the derivative of constant is equal to zero. This particular de fi nition is used to derive fractional order T/F models from fractional order differential equations with zero initial conditions. The  X  th order derivative of a function f ( t ) with respect to time t according to Caputo de fi nition is given as follows ( Das, 2011 ):
D f  X  t  X  X  1  X   X  m  X   X  domain representation can be obtained: where  X   X   X   X  X  F  X  s  X  X  linear FO system, it is often considered that initial conditions of FO differential equation are zero. With these assumptions the time domain operator D  X  can be simply represented in frequency domain as s  X  . To perform a fractional integral operation is multiplied by negative sign. Hence by above expressions FOPID controller can be represented as weighted sum of fractional operators along with controller gains. The continuous transfer function representation of FOPID controller is given by ( Podlubny, 1999; Pan and Das, 2013 ): C  X  s  X  X  K P  X  K I s  X   X  K D s  X   X  4 : 3  X  controller in time domain may be given as follows: u  X  t  X  X  K P e  X  t  X  X  K I D  X  e  X  t  X  X  K D s  X  e  X  t  X  X  4 where e ( t ) represents error signal and u ( t ) indicates the control signal produced. Hence a typical controller consists of proportional gain ( K P ), proportional gain ( K I ), derivative gain ( K fractional operators i.e., integral order  X  and derivative order
When  X  and  X  equals zero it implies a simple proportional ( P ) control, for  X   X  0and  X   X  X  1 we get normal PD control,  X   X  X  1and  X   X  0 implies PI controller and for  X   X  X  1and  X   X  X  1 we get classical
PID controller in parallel structure. This justi fi es that all these classical types of PID controllers are the special cases of FOPID controller. The FOPID controller generalizes the integer order PID controller and also from Fig. 6 it can be perceived that it expands from point representation to plane. This extension provides good supervisory control over the plant/process considered.
Oustaloup  X  s band limited frequency domain based rational approximation technique is used in the present paper ( Oustaloup et al., 2000 ). 4.1. Digital realization of fractional order controllers ted using the famous Grunwald  X  Letnikov (G  X  L) de fi nition, which is nothing but a fi nite difference approximation of fractional derivative (integral) with long memory behavior. Though G de fi nition is preferred in terms of implementation, the rationale behind choice of Oustaloup based frequency domain rational approximation of FOPID controller is that it can be very easily implemented in real hardware using higher order In fi nite Impulse
Response (IIR) type digital or analog fi lters. PID based control schemes are well established in wide range of automation related areas due their simple realization and ease in structure. On the other hand fractional order based control schemes requires rigor-ous mathematical calculations for realizations and yet they are complex in terms of implementation.

Hence there is threshold between performance levels i.e., in applications where control effort is cheap and where design speci fi cations are not an issue undoubtedly PID controller is preferred. But in cases of accuracy and hard limits over design speci fi cations, FOPID controller will be having good edge rather than PID control scheme. So, appropriate controller for a particular application is left to designer  X  s choice.

Due to the in fi nite dimensional nature of fractional order integrator (differentiator) in FOPID controller structure, it creates hardware implementation issues. However, recent research results demonstrated and shown that band-limited implementation of
FOPID controllers using higher order rational transfer function approximation of the integro-differential operators gives accepta-ble performance in industrial applications and automation ( Effe, 2011 ). In this paper, Oustaloup  X  s recursive approximation that has been implemented to realize fractional integro-differential opera-tors in frequency domain is given by the following equations: s  X  K  X  N where N represents required number of poles (or zeros) for truncation.  X  0 k and  X  k represents the zeros and poles of above rational transfer function. Here zeros, poles and gain of the above fi lter can be recursively evaluated as follows:  X   X   X 
K  X  h  X  4 : 8  X 
In above equations  X  is the order of the differ-integration, (2 N  X  1) is the order of the fi lter and (  X  b ,  X  h ) is the expected range of frequencies, where  X  b is the lower cut-off frequency and  X  is the upper cut-off frequency. Hence the output of any input signal passing through the fi lter (4.5) can be termed as approxi-mated fractionally integrated (differentiated) signal with respect to order  X  . In the current study, 5th ( N  X  5) order Oustaloup recursive approximation has been chosen for approximating the integro-differential operators within a frequency band of the constant phase elements (CPEs) as  X  A f 10 2 ; 10 2 g rad/s. 5. Arti fi cial bee colony (ABC) algorithm
A bee colony can be considered as a swarm intelligence algorithm, whose individual social agents are bees. Bees (precisely hone bees) live in extremely populous colony and maintain a unique elaborate social organization. The exchange of information among bees leads to the formation of tuned collective knowledge.
Arti fi cial bee colony (ABC) algorithm is one of well established swarm intelligent based stochastic optimization algorithm, which draws its inspiration from foraging and communication behavior of bees. Since its inception in 2005, ABC has shown remarkable performance in different environments ranging from large scale optimization to complex real world problems. A few challenging applications of ABC algorithm can be found in the areas of clustering ( Zhang et al., 2010 ), economic load dispatch ( Nayak et al., 2009 ), design of digital fi lters ( Karaboga, 2009 ) and on multi-objective problems as well ( Omkar et al., 2011 ).
In ABC algorithm the foraging arti fi cial bees are categorized into three groups namely employed bees , onlooker bees and scouts . The sum of employed bees and onlooker bees results in total number of bees in a colony (usually they are chosen to be same). The role of employed bee is to hover over a potential food source and to collect, store information regarding a food source in its memory. Onlooker gets information regarding food sources via dances of employed bees. One to one selection is done by on-lookers for choosing an employed bee and onlookers try to exploit the food source to gather nectar. For every food source, there is only one employed bee and the employed bee of abandoned food source becomes scout. This scout helps in discovering or exploring sites for more potential food sources. Hence ABC algorithm satis fi es the qualities of good optimization algorithm by maintain-ing a balance between exploitation via employed (onlooker) and exploration via scout bees. In ABC algorithm, each possible solu-tion to the problem is considered as food source and is represented by a D -dimensional real-valued vector, whereas the fi tness asso-ciated to the source is termed as nectar amount. The only para-meters in ABC that are to be set by user are number of number of bees. Like other population based optimization approaches ABC also progresses towards optimum iteratively.

The algorithm initiates by mapping all employed bees with randomly generated food sources (solutions). The position of i food source (solution) that corresponds to a employed bee in D-dimensional hyperspace can be represented by X i  X  [ x i 1 This can be generated between search space bounds with the help of the following equation: x  X  lb j  X  rand  X  ubound j lbound j  X  X  5 : 1  X  sources (equivalent to half to total number of bees) and D represents total number of variables to be optimized; rand is a random number in the range (0, 1); ubound j and lbound j corre-sponds to upper and lower bounds of the j th dimension, respec-tively. Once employed bee discovers a potential food source it tries to exploit in the vicinity of food source associated to it and updates its search based on the following equation: x new  X  x ij  X  R  X  x ij x kj  X  X  5 : 2  X 
Here subscript k is a randomly chosen index such that k number in the range of [ 1, 1]. As soon as x new is produced, a greedy mechanism is applied between x new and its parent x fi tness value. If the obtained new fi tness value is better than the fi tness value achieved so far, then the bee moves to this new food source discarding the old source. After successful execution of exploitation phase by employed bees, they share their information regarding food sources with onlooker bees. An onlooker bee selects a particular food source X i based on the probability P i follows: P  X  fit i  X  FS fi t i corresponds to fi tness value of i th food source, as the chosen problem is a minimization problem fi tness is calculated according to following equation: fit  X  1 1  X  J  X  X  X   X  5 : 4  X 
J ( X ) represents objective function to be minimized. Based on above probability relation (analogous to selecting source based on its pro fi tability) onlooker chooses a food source in proximity of previous food source selected by employed bee. There after onlooker tries to exploit a food source making use of Eq. (5.2) and similar greedy mechanism is performed.

The exploitation phase carried out by employed and onlooker bees are performed in round robin fashion. As the search is random in due course of iterative process, it may likely happen that a food source cannot be exploited after some number of iterations and this ultimately leads to delay in optimization process. To eliminate this and to strengthen the search process further, exploration scheme is incorporated in the algorithm via scout bee. Each bee performance is monitored for certain number particular bee role is escalated to scout bee. Food source associated to the scout bee is abandoned and is initialized to random food source via Eq. (5.1) . This entire optimization process is continued till the required solution is obtained or termination criteria is obtained. 5.1. Concept of opposition based learning
Literature studies reveal that conventional ABC algorithm suites only for few applications and it requires some additional support to show it  X  s exploratory and exploitation power irrespective of problem considered. Inspired by pioneering work of Rahnamayan et al. (2008) we applied opposition based learning (OBL) mechan-ism in arti fi cial bee colony method to further strengthen its performance. All evolutionary (swarm) based algorithms start with random guesses and computation time towards optimum depends on how much distance these initial solutions are away from optimal solutions. According to the concept of OBL the chance of improving the start of algorithm with a closer solution can be done by checking the opposite solution. To strengthen the algorithm further this concept can be extended to each solution in the current solution.
 in a D-dimensional hyperspace, where x 1 ; x 2 ; x 3 ; ... ; x point associated ( j th variable or dimension in a food source associated to a bee) to X is given by X o  X  X  x o 1 ; x o 2 de fi ned as follows: x  X  lbound i  X  ubound i x i  X  5 : 5  X 
Now with above de fi nition of opposite point the opposition based optimization scheme can be formulated as follows. Assum-and according to the above given de fi nitions of X and X f  X  X  X  Z f  X  X  X  (similar analogy for minimization also) then the point
X can be replaced with X o ; hence the solution and its opposite solution are evaluated simultaneously in order to select fi 5.2. Opposition based arti fi cial bee colony algorithm (OABC)
Opposition based ABC or OABC differs from conventional ABC mainly in two steps. After initializing the employed bees (  X  FS) to random food sources, opposite population of size FS are also generated using Eq. (5.5) and out of 2 FS number of solutions best FS solutions are selected via fi tness value. Unlike the original
Jumping Rate mechanism in Opposition based Differential Evolu-tion (ODE) in this approach we applied opposition concept for continuous search variable in every generation. This is done after completion of onlooker bee phase. As the search is for less number of iterations selecting opposite population by a random probability with respect to Jumping Rate ( Rahnamayan et al., 2008 ) will be worthless. Flow chart of OABC algorithm is provided in Fig. 7 . Pseudo code of OABC algorithm
Bees , limit . 1. Initialize the food source, which corresponds to initializing the 2. Produce the opposite food solutions using Eq. (5.5) . 3. Evaluate both of the food sources and select best FS food 4. Set counter Iter  X  1 5. While Iter o Max Iterations (or termination criteria) Do 6. End While 7. Report the best solution obtained so far. 6. Time domain based design of PID/FOPID controllers tracking of different types of reference inputs such as ramp and step are one of the prominent control objectives ( Tavazoei., 2010 ).
Integral performance indices that are based on system error e ( t ) and time t are considered as reckonable measure of performance of feedback controls. A controller for a system is considered optimum when its parameters are adjusted such that plant meets it design constraints and when index reaches its minimum. The well-known time indices include Integral Absolute Error (IAE), Integral Time Squared Error (ITSE), and Integral Time Absolute
Error (ITAE). In this application we considered following time indices for tuning the controllers using GA, PSO, ABC and OABC algorithms. The algorithmic parameters considered for tuning are provided in the Appendix.
 J 1  X  ITSE  X  J 2  X  ITSE  X  ISCO  X 
J  X  ITAE  X 
J  X  ITAE  X  ISCO  X 
As a matter of fact every integral performance has its own advantages in designing control systems. ITSE criterion has an advantage of penalizing error more and due to presence of time multiplication term the oscillations in the systems are damped out quickly. However, ITSE suffers when there is sudden change in set-point leading to large control signal than the ITAE based con-trollers. On the other hand, the time multiplication term in ITAE term penalizes error more at later stages and helps in reducing of minimization of overshoot ( M p %). The other integrals discussed in Section 2 will also try to optimize performance of controller by minimizing various time domain indices. However, error objective function based methods mere focus is only on error minimization, which ultimately results in very high control signal, which may also result in saturation of actuator leading to integral wind-up. To overcome these problems weighted sum involving integral indices and controller output is preferred. Integral Squared Controller Output (ISCO) is usually preferred for control signal minimization. For the sake of simplicity and to give equal importance we considered weights w 1  X  w 2  X  1. A total of four objective functions represented in Eqs (6.1)  X  (6.4) are used to design optimum PID and FOPID controllers.

In Fig. 8 , we provided few surface plots of objective functions for change in integral and derivative orders for stochastically tuned controller gains K P , K I and K D using ABC algorithm. These plots clearly show the complexity an algorithm faces to fi controller gains that have to meet the speci fi cations of user. Hence apart from variable gains the variable orders i.e., integral and derivative orders are also to be tuned properly to get required optimal solution. This in turn calls for a robust optimization algorithm, which can provide optimal solution. This problem also enabled us to develop OABC optimization algorithm to obtain optimal solutions within less number of iterations. 6.1. Results and discussion 6.1.1. J 1 and J 2 based designs
Under constant full load torque condition, (see Appendix for full range of parameters considered) for a reference speed of 55 rad/s and simulation time of T  X  10 s the speed control of DC motor drive has been performed and analyzed (for illustration purpose in case of ITSE and ITAE Fig. 9 (a) and (c) are shown up to time of 2 s). Fig. 9 (a) and (b) shows the speed response of DC drive controlled with optimally tuned PID/FOPID controllers, which are designed by minimizing ITSE and ITSE  X  ISCO objective functions using arti fi cial bee colony algorithms. In case of ITSE or J function, from Fig. 9 (a) and bar chart Fig. 15 it is evident that OABC based FOPID controller provided very less settling time while ABC-
PID and OABC-PID controller produced less shoots and less rise time, respectively. Interestingly PSO-PID controller also provided quick rise time but failed in remaining aspects. Although actual goal i.e., minimization of objective function was optimal for OABC-
FOPID than ABC, PSO, GA based controllers, it failed to provide optimum set of time indices. In Figs. 15  X  17 the optimum values are highlighted in bold text.

On the other hand in case of ITSE  X  ISCO or J 2 the results provided by OABC-FOPID are quite promising than the former case. Fig. 9 (b) clearly shows that OABC-FOPID provided smooth response, where it provided high overshoots for J 1 case. From
Figs. 14(c) and 16 (d) it is clear that objective value of J
OABC-FOPID is far less than GA, PSO, ABC based PID and FOPID controllers. Although rise time and settling time of OABC-FOPID are greatly improved while overshoot remained to be poor when compared to ABC tuned FOPID controller (as evident from Fig. 16 ). we also recorded the speed responses under full load at T  X  10 s (simulation time T  X  20 s) for various controllers. From
Fig. 10 (a) and (b), OABC based fractional controllers tried to bring back the speed to normal within very less time and also close observation reveals the PID control failed to track the reference speed. This reveals the superiority of FOPID controller in accurate load tracking while maintaining required transient performance. 6.1.2. J 3 and J 4 based designs we tried another set of objective functions based on absolute speed response of J 3 objective function based DC motor drive under full load torque condition for various controllers. From the plots it is quite obvious that OABC based FOPID controller out-performed the rest of controller  X  s performances. Peak overshoot (%), settling time (s) of ITAE based FOPID via OABC are far improved when compared to ITSE case. In this case also, in terms of objective function minimization OABC outperformed GA, PSO and ABC methods and can be seen in bar chart depicted in Fig. 17 . based PID and FOPID controllers for a DC motor drive. In this case
OABC tuned FOPID controller outperformed rest of all controllers (including ITSE  X  ISCO) performances in terms of objective func-tion minimization, percentage overshoot, rise time and settling time. From bar chart Fig. 18 (a) it can be seen that OABC-FOPID controller produced no overshoot.
 Under sudden loading conditions ITAE (ITAE  X  ISCO) based OABC-FOPID controllers gave smooth and superior performance.
From Fig. 10 (c) and (d) it can be seen that they are able to track the reference signal within no time. While PID controllers once again failed to track the reference signal and also they resulted in overshoots followed by slow response. From Figs. 9, 10 and 15  X  18 it is clear enough that FOPID controllers can show remark-able performance if a proper objective function aided by robust optimization technique is selected. In this application objective functions based on ITAE and ITAE  X  ISCO are proved to be the most suitable methods when implemented with robust optimization technique like OABC. 6.1.3. Comparison of OABC controller performances over the other competitive designs In this section we compared and contrasted the OABC based PID/FOPID controller to rest of the controller  X  s performances. Case ( a ) :ITSE
Time indices values such as percent overshoot, rise time and settling time of ITSE based controllers are recorded in Fig. 15 .
Although ABC based PID provided less overshoot it failed to maintain same consistency with respect to rise time and settling and thereby resulting in poor performance (similar results can be seen for GA and PSO based designs also). While on the other hand, apart from maintaining minimum objective function value, OABC based PID controller provided optimum set of time indices. In the case of FOPID also OABC based design outperformed its competitors, but the overshoot remained too high when compared to PID controller.
 Case ( b ) :ITSE  X  ISCO
From Fig. 16 it is clear that every FOPID based design out-performed its corresponding PID controller performance. A close observation also reveals that overshoot of DC motor drive involving FOPID controllers has been drastically reduced than case (a). The inclusion of controller signal minimization helped in restricting the larger shoots thereby resulting in a smooth operation. Fig. 16 (d) bar graph clearly shows the effectiveness of OABC in minimizing the objective function both in PID and
FOPID. The involvement of fractional operators helped in further minimization of objective function value in the case of FOPID controller.
 Case ( c ) :ITAE In Fig. 17 , we reported the time indices and objective values of
ITAE based controllers. From Figs. 15(a) and 17 (a) it can be seen that overshoot of FOPID controllers in later case decreased. ITAE objective function mostly suited the current application as it provided optimum set of parametric gains, when compared to
ITSE. Except in case of overshoot, each and every competitive Speed(rad/sec) algorithm resulted in optimum FOPID controller and OABC based controllers remained to be the best performer. Settling time has been greatly improved and this can be also visualized from speed response plots.
 Case ( d ) :ITAE  X  ISCO
Fig. 18 provides the results of ITAE  X  ISCO based controller on performances. The inclusion of the additional term to ITAE resulted in zero overshoot in OABC-FOPID controller case.
Though rest of time indices are not as good when compared to ITAE, the comparison should be made with respect to
ITSE  X  ISCO not alone with ITAE. All the competitor algorithms i.e., GA, PSO, ABC, OABC based PID/FOPID controller designs produced less rise time, overshoot and also optimal objective function values. As our interest is in load handling also
ITAE  X  ISCO based controller outperformed other controller performances as visualized in Fig. 10 . 6.1.4. Impact of PID/FOPID controllers on output control signal
Fig. 11 depicts the control signals produced by ABC and OABC tuned PID/FOPID controllers for various objective functions. From all fi provide low intensity control signals, while PID controller very high control signals which are dangerous for practical implementation.
Acloserobservationat Fig. 11 indicates that ABC tuned PID or FOPID one particular value. Interestingly FOPID controller reached the steady value within less time apart from providing less oscillations and minimum peak value. On other hand OABC tuned FOPID controllers tried to provide control signals that are able to converge to even less value than its counterpart. From Fig. 11 (c) and (d) it can be observed and J 4 helped the controllers to provide signals that are lower than J outperformed rest of all the controllers  X  performances. essential to analyze their frequency domain stability as well. For this purpose, we used the equivalent model depicted in Fig. 5 .
Bode plots are obtained for OABC tuned PID and FOPID controllers and from Fig. 12 , it can be seen that the both the gain and phase margins of FOPID controller are better than normal PID control scheme. In neither of case i.e., for PID controller gave a stable performance. This indicates that FOPID controllers even though failed in few time indices (ITSE case) it maintained good stability margins, which plays a key role in implementation. Also, due to the presence of fractional elements the bandwidth of operation is also increased in case of FOPID controllers. Few applications require robustness to variations in gain, where the speed response should not disturbed when gain is increased. For these kinds of applications designing controllers based on time integrals is complex and hence frequency domain based design is preferred.
Section 7 provides deep insights on designing PID and FOPID controller based on frequency-based domain.
 values and faster convergence as evident in Fig. 14 and their respective objective function values including mean and standard deviation (from 25 independent trails) are provided via bar charts in Figs. 15  X  18 . The optimum parametric gains of proposed con-trollers including ABC, GA and PSO are provided in Tables 1 and 2 .
The variations of interdependent parameters in PID and FOPID controllers during optimization process via OABC algorithm are shown in Fig. 13 (a)  X  (d). In almost all the cases OABC method provided optimum values with good convergence. 7. Frequency domain based design of PID/FOPID controllers
The frequency domain based design of controllers for the DC motor drive is based on the model shown in Fig. 5 . Let P ( s ) be the overall transfer function of the drive considered, then the primary objective is to design a controller C ( s ), such that the open loop a. Phase margin criterion
Arg  X  G  X  j  X  gc  X  X  Arg  X  C  X  j  X  gc  X  P  X  j  X  gc  X  X   X   X   X  b. Gain crossover frequency criterion j G  X  j  X  gc  X j X j C  X  j  X  gc  X  P  X  j  X  gc  X j X  1  X  7 : 2  X  c. Robustness to variations in gain criterion d d  X   X  Arg  X  G  X  j where  X  gc and  X  m are the gain crossover frequency and phase margin, respectively. Each criterion has its implications on the performance of system. Eq. (7.1) imposes the user de fi ned phase margin (  X  m ) at the crossover frequency (  X  gc ) for the open loop system G ( s ) to control the most important time index parameter percentage overshoot for the closed loop system. Eq. (7.2) moni-tors the rise time of system by enforcing the user speci fi crossover frequency. The last and most important criterion refers to Eq. (7.3) , it says that derivative of phase of open loop system parallel to frequency axis. This criterion is also known as iso-damping property ( Das, 2011 ) and plays very important role in designing high performance control systems. These three design rules can be conglomerated into single objective function and a global optimization method can be applied to obtain the optimum controller parameters: J  X  X  Arg  X  C  X  j  X  gc  X  X  Arg  X  P  X  j  X  gc  X  X   X   X  m  X  X  X  C  X  j
Eq. (7.4) represents the sum of phase margin, gain crossover and iso-damping criteria. OABC algorithm is used to minimize the objective function in order to design IO/FO controllers. In order to carry out this optimization task, it is essential to know the frequency responses of plant, controller and also Eq. (7.4) structures. 7.1. Frequency response of DC drive and controllers 7.1.1. DC motor drive model
Based on discussions in Section 2 and also from reduced model shown in Fig. 5 , the transfer function of drive considered (excluding controller) can be represented by the following:
P  X  s  X  X  R a K 1 K
The frequency response of the above model (7.5) can be obtained by transforming s domain representation to j  X  domain. The constant term ( R a K 1 / K 2 K m T m ) is replaced by K 1:
P  X  j  X   X  X  K 1
The corresponding magnitude and phase of DC motor drive model described in (7.6) will be of the following form:
Arg  X  P  X  j  X   X  X  tan 1 1 2
The derivative of phase of controller with respect to frequency given by the following: d  X   X  Arg  X  P  X  j 7.1.2. Integer order PID controller
PID controller, when both integral-derivative orders equals to then Eq. (4.3) reduces to conventional integer order PID controller and its frequency response is given by the following: C PID  X  j  X   X  X  K P  X  K I  X  j  X   X   X  K D  X  j  X   X  X  K P  X  j K The magnitude and phase of PID controller is described in Eq. (7.10) can be calculated as follows: Arg  X  C PID  X  j  X   X  X  tan 1 K I  X  K D The derivative of phase of controller (7.10) with respect to frequency  X  is as follows: d d  X   X  Arg  X  C PID  X  j  X   X  X  X  K P  X  K I  X  K D 7.1.3. Fractional order PID controller
The frequency response of Fractional order PID controller de fi ned in Eq. (4.3) is given by following set of equations: C
FOPID  X  j  X   X  X  K P  X  K I  X  j  X   X   X  K P  X  K I  X   X  cos  X  K P  X  K I  X   X  cos
The magnitude, phase and derivative of phase with respect to of FOPID controller are shown in the following equations: C Arg  X  C FOPID  X  j  X   X  X  tan 1 K D 7.2. Impact of frequency domain based controllers on performance of DC motor drive
To obtain optimum controller parameters, the objective func-tion (7.4) is de fi ned using frequency response of drive; controller structures Eqs. (7.5)  X  (7.17) and is minimized with the help of OABC algorithm. Based on the bode plots obtained in Fig. 12 the frequency design criteria are considered to be crossover frequency  X  gc  X  4 : 5 rad = s and phase margin of  X  m  X  80 3 . The controller variables search space and the algorithm parameters are provided in Appendix B. To verify the robustness of algorithm via statistical norms, mean and standard deviation (std) values of evolutionary algorithms used are recorded for 25 independent trails for both the controller structures. 7.2.1. Integer order PID control
For the design criteria mentioned the resulting integer PID controller is given in Eq. (7.18) . It is evident from bode plots ( Fig. 19 ) that PID controller tried to meet the design criteria while it was not successful in maintaining a complete fl at phase around gain crossover frequency. Robustness against gain variation is observed by increasing motor gain in steps and resulting step responses are depicted in Fig. 20 . Though PID controller tried to with stand variations in gain by providing a response closer to normal one, for large gain variation it failed to track the reference: C
PID  X  s  X  X  2 : 1081  X  =w
ITSE+w ISCO
J 3 =w
ITAE+w ISCO
Table 3 shows various time indices parameters for increase in gain. As the gain increased the time indices parameter values decreased. Due to presence of iso-damping nature overshoot hasn  X  t increased though the gain is increased to 80%. 7.2.2. Fractional order PID control
Itcanbeobservedfrombodeplot Fig. 21 that fractional order PID controller perfectly met the design criteria while main-taining fl at phase around gain crossover frequency. Unlike to the PID controller, FOPID maintained good robustness against gain variation.
Further from Table 3 it is evident that the FOPID outperformed PID controller in terms of percentage overshoot, rise time and settling time and (also objective function value). The optimal frequency domainbasedFOPIDcontrollerisgiveninEq. (7.19) .From Figs. 21 and 22 it can be seen that Fractional elements helped to provide iso-damping characteristics for wide range of gain.

C FOPID  X  s  X  X  2 : 0563  X  0 of iso-damping characteristics also tried to maintain 0% percent overshoot for increase in gain. In this frequency based design also FOPID controller outperformed PID controller in all time domain indices. Corresponding objective function values of PID and FOPID tuned via OABC method is provided in Table 3 . 8. Conclusions
In this research, the performance of opposition based arti bee colony algorithm (OABC) has been investigated for designing PID and FOPID controllers for speed control of chopper fed DC motor drive. Objective functions based on ITSE and ITAE and ISCO are considered for designing the controller in time domain and an objective function based on frequency rules is considered for designing controller in frequency domain. Extensive analysis over the results obtained in terms of performance and stability revealed that for the application considered ITAE methods proved to be worth full than ITSE creation. This paper also addressed the added advantages of time domain methods and also frequency domain method of design (to obtain iso-damping characteristics) and the ultimate decision is left to the user. Our studies also revealed that fractional controllers when designed optimally could outperform conventional PID controllers.

Our future research would focus on designing multi-objective framework for controller tuning to achieve still promising results under different circumstances like levying constraints on the control signals, time domain based fractional order objective functions, etc.
 Acknowledgments tions Center of Excellence project, Reg. no. CZ.1.05/1.1.00/02.0070 by operational program Research and Development for Innova-tions funded by the Structural Funds of the European Union and state budget of the Czech Republic, EU.
 (Reactor Control Division at Bhabha Atomic Research Center, India) ( Das, 2011 ) for his tremendously valuable comments on the improvement of this paper and also his discussions on concepts of iso-damping properties.
 Appendix Back EMF constant ( K m )  X  8.5 V s/rad Armature resistance ( R a )  X  0.02342  X  Current feedback ( T 2 )  X  3.5 ms Tachometer constant ( T 1 )  X  25 ms
Electromechanical time constant ( T m )  X  J R a /( K m ) 2 Controller time constant ( T c )  X  L a / R a  X  30 ms Armature time constant ( T a )  X  T c  X  30 ms Chopper constant ( K t )  X  max rated voltage/10  X  46 Speed loop fi lter gain ( K 1 )  X  10/55  X  0.19 Current loop fi lter gain ( K 2 )  X  10/current limit  X  0.0083 Controller gain ( K c )  X  T a R a /(2 K 2 K t T 2 )  X  0.2618 B. Algorithmic parameters Binary GA ( Biswas et al., 2009 ) Initial population size  X  50 No. of bits per gene  X  50 Mutation probability  X  0.01 Crossover probability  X  0.6 PSO ( Zamani et al., 2009 ) Population size  X  30 Inertial weight w max  X  0.9, w min  X  0.4 Acceleration coef fi cients c 1  X  2, c 2  X  2 ABC and OABC No. of bees ( N B )  X  20 No. of food sources (FS)  X  N B /2 Limit  X  30 Boundary settings No of iterations  X  100 Run time  X  25 independent trails Controller gains range  X  0 r K P ; K I ; K D r 10 Fractional orders range  X  0 r  X  ;  X  r 1 C. Computer settings
All the simulations have been carried out by developing dedicated software programmes in MATLAB 7.9 version, compiled by Intel core i3 processor, and ran on 2.40 GHz computer with 2 GB of memory under windows 7 environment.
 References
