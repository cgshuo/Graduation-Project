
Modern day websites o  X  er applications with sophisticated user interfaces and dynamically interactive data [1]. Un-derstanding how a user interacts with a search service, in particular, is an e  X  ective way to determine the usability and quality of the search experience [1, 2]. Gathering the nec-essary data to analyse user interactions with a web based search application can be done either server side and/or client side. Server side solutions provide a course grained approach to logging specific discrete events such as when a query is issued, a web page is viewed, etc. Client side solutions, however, can provide a much richer set of data re-garding the specific micro interactions performed by a user given the web application interface (i.e. when there is a mouse over, a scroll, a click, a key press, etc). While a number of logging applications have been previously devel-oped, such as UsaProxy [1], MLogger [2] and Wrapper [3], there are number of issues with these loggers. UsaProxy only intercepts calls between a client/web browser and the webserver and requires the client to set up a proxy. While this is appropriate for lab based studies, it does not work well in less controlled setups. No implementation of MLog-ger is available (and it is based on Moschkit which is no longer supported), while Wrapper is a Windows/IE6 logger and requires client side installation. Other notable loggers require client side setup (e.g. Lemur Query Log Toolbar and CrowdLogger both require browser plug-ins), do not provide any facilities to remotely capture interaction data or are not freely available to download/use (e.g. Morea and Camtasia).
This demonstration paper introduces ALF which provides a light-weight client side logging application and a server for collecting user interaction data. ALF has been designed as a loosely coupled independent service that runs in parallel with the IR web application that requires logging. Figure 1 shows how the services are related, where (1) the IR ap-plication requests ALF to log interactions, this set ups (2) a record of the applications currently being logged, and re-turns a piece of Javascript (alf.js) to be included in the client interface (with certain parameters). When the Web Search interface is used, the ALF Javascript on the web interface client sends interaction data to the ALF Server. On receipt of the data an acknowledgment is send back (4), if there is no acknowledgment the data is re-sent. Once received the inter-action data for that application is checked and then logged
