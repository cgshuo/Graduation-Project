 Many recommender systems use collaborative filtering, a method that makes recommendations based on what are liked by other users with similar interests. Serious privacy issues may arise in this process, especially for online social communities, as sensitive personal information (e.g., content interests) may be collected and disclosed to other parties. In this paper, we propose YANA (short for X  X ou are not alone X ), a group-based content recommender system for online so-cial communities, which protects users X  interest privacy via interest-based groups and pseudo users. We have developed a prototype system on desktop and mobile devices, and eval-uated it using real-world data. The results demonstrate that YANA can effectively protect users X  privacy, while achieving high recommendation quality and energy efficiency. H.3.3 [ Information Search and Retrieval ]: Information filtering; K.4.1 [ Public Policy Issues ]: Privacy Algorithms, Experimentation Collaborative filtering, Privacy, Efficiency
Many recommender systems [3, 2, 6]) adopt collaborative filtering (CF), a popular recommendation method that has high accuracy, low overhead, and is generally applicable to various domains. In CF-based systems, the server collects user information and predicts a user X  X  interest on an item based on the decisions (or ratings) of other similar users. In this process, users X  personal interests are exposed to the recommender server, which raises several privacy concerns.
Recent research efforts towards privacy-preserving collab-orative filtering (PPCF) have generated solutions in two main categories. One is based on secure multi-party compu-tation (SMPC) [5, 9], and the other is based on randomiza-tion [4, 10]. SMPC-based methods require a large amount of computation and communication in order for users to jointly compute a value (e.g., overall rating for an item) without dis-closing their individual values. This is inefficient for online social communities, where the number of users and items can be millions or even billions. What is more, many users tend to access online social communities via their smartphones or tablet PCs, which have limited computation capability and battery capacity. The efficiency of PPCF is thus critical. Randomization-based methods trade accuracy for privacy, which means users will receive lower-quality recommenda-tion in order to protect their privacy.

In this paper, we propose YANA (short for  X  X ou are not alone X ), a privacy-preserving content recommender system for online social communities. YANA can protect user pri-vacy, while at the same achieving high recommendation qual-ity and energy efficiency. YANA is group based  X  it auto-matically organizes users into groups with diverse interests such that each user X  X  private interests can be hidden among a set of users. A number of pseudo users are created for each group, each representing a unique interest and the union of them covers all interests of the group. The pseudo users communicate with the recommender server on behalf of the real users. The real users can then obtain personalized rec-ommendations based on the server X  X  recommendations to the pseudo users, without exposing their private data to the server. To the best of our knowledge, this is the first work that targets efficient privacy-preserving collaborative filter-ing for recommender systems in online social communities.
Targeting the large-scale users and items in online social communities, YANA is designed to be highly efficient and scalable. As illustrated in Figure 1, YANA consists of three key components:  X 
User groups . YANA automatically organizes users into groups with diverse content interests, and individual users X  content interests are hidden and aggregated within each group. Thus, user privacy is protected from the server. In-side each user group, users collaborate via privacy-preserving mechanisms, including efficient secure multi-party computa-tion (SMPC), to protect user privacy from being inferred by other members in the group.  X 
Pseudo users . To obtain recommendations, the users in a group maintain a set of local pseudo users, each of which represents a unique interest liked by at least one group member. The pseudo users together cover all interests of the group members. The server makes recommendations to the pseudo users based on their interests, and the real users can re-calculate their personalized recommendations based on their own interests distribution and the server X  X  recommendations to the pseudo users.  X 
Recommendation algorithm . To make recommenda-tions, the server first needs to collect users X  item ratings. We achieve this through efficient secure multi-party com-putation inside each group, and the aggregated decisions of each group are sent to the server via pseudo users. The server then runs the proposed collaborative filtering algo-rithm to make recommendations to the pseudo users. These recommendations to pseudo users are used by the real users to calculate their own personalized recommendations.
We leverage user groups to hide individual users X  content interests among a set of users with diverse interests, such that no one can associate any specific interest with a partic-ular user. A user group is defined as following:
Definition 1 (User Group). A user group g is a 4-tuple: {U g , WU g , S g , P g } ,inwhich U g is a set of users who have joined g and collaborate together to hide the privacy of each other, WU g is a set of users who want to join the group (i.e., on the waiting list of g ), S g is the set of interests that users in U g have, and P g is a set of pseudo users who communicate with the server on behalf of the real users.
Given the user group definition above, we propose a method to automatically organize users into groups with diverse in-terests in a distributed and privacy-preserving way. The basic process of user group construction works as follows: 1) some random users are chosen to host groups; 2) other users choose the groups that are hosted/joined by their friends; 3) users in groups check if their privacy requirements (e.g., the number of users and the number of interests inside a group) are satisfied via distributed privacy-preserving computation.
Condition checking in Step 3) can be reduced to comput-ing the sum of n real values privately held by n parties. To achieve secure n -party computation, we adopt an efficient se-cure multi-party summation protocol SecureSum [8]. The basic idea is as follows: 1) users randomly divide their local value into r parts with the property that the sum of the r parts equals their local value; 2) users randomly send/receive parts to/from other random users (i.e., random shuffling of the split parts); 3) after some rounds, each user sums its local parts and sends the sum to a host; 4) the host sums all values and returns the final result to all users.
After user grouping, pseudo users are generated to pro-tect user privacy and provide recommendations to real users. Real users interact with servers through the pseudo users, and all the information sent to the server by the pseudo users are the aggregated results of a group of users, so that the server cannot identify the information of individual real users. Each pseudo user acts as a  X  X elegate X  for a particular interest, and the recommendations to the pseudo user can be utilized by real users who have that interest.
Local pseudo users are formed based on the interests of the users inside each group. Let S g be the set of interests for a given group g . Then the group members will construct |P g | = |S g | pseudo users. For each pseudo user p with in-terest s p , the items that p likes is the union of the items liked by users in the group who have interest s p . One issue in maintaining local pseudo users is to update the interest profiles of the pseudo users as new items are generated in online social communities. This step is important, as we rely on the pseudo users X  item decisions (or ratings) to make recommendations to pseudo users (with similar interest) in other user groups. Given a new item x ,whether x is liked by pseudo user p depends on the number of real users who share interest with p and like x : where w x,u =1if u has read x , and 0 otherwise. s p is the interest of pseudo user p ,and  X  ( u, s p )= | X s p  X  X u (where X u is the set of items that u is interested in). Equa-tion 1 can be computed securely by the SecureSum proto-col among a group of users. Item x is then assigned to the pseudo user with the highest non-zero w x,p value.
After the generation of local pseudo users, the server can collect the interest profiles of local pseudo users of all groups. The server can then make recommendations to the pseudo users based on the item ratings of other pseudo users. How-ever, the use of pseudo users and user groups, while protect-ing user interest privacy, introduces new challenges to the recommendation process:  X  Group ratings of new items. Given a group g with K users. Each pseudo user represents a specific content in-terests, and some real users may have shared interests. How to measure the importance of an item within a group g is challenging. To determine the rating of an item inside a group, we need to consider two factors: 1) how the users in the group like it, and 2) the importance (or  X  X xpertise X ) of the users in the group for that kind of items. The first fac-tor can be measured by w x,p in Equation 1, as higher value indicates that the item is more popular in the group. The second factor can be measured similarly as follows. Since the pseudo user p represents a specific interest s p ,theim-portance of user u with regard to s p can be measured by the fraction of items liked by u that belong to s p .Moreover, the weight of the users who do not like s p will be 0, which means that the  X  X on-experts X  will not influence the rating of an item. Thus, the rating of item x by the users in group g can be computed as follows: where  X  p =argmax p  X  X  g { w x,p } . The user who maintains pseudo user  X  p will send the pair ( w x,  X  p ,v x,g ) to the server.  X 
Server-side recommendation. The server cannot get a standard user-item matrix, which is required in the stan-dard collaborative filtering algorithm. Thus, another chal-lenge is how to adapt the standard collaborative filtering algorithm to work in the new form of data. The server gen-erates the rating of item x for pseudo user q as follows: where P is the set of all pseudo users, g p is the group that pseudo user p belongs to, sim ( p, p ) is the Jaccard Similarity between pseudo user p and p . w x,p and v x,g p are obtained from the pseudo user p . After the calculation of  X  ( x, p ), the server will recommend highly-rated items to pseudo user p .  X 
Client-side recommendation. In our system, the server makes recommendations only to the pseudo users, each of which stands for a unique interest. But the real users may have diverse interests. How to generate personalized rec-ommendations for each real user based on the recommenda-tions for the pseudo users is another challenge. As an item may have different ratings for different pseudo users, and real users also have different levels of interests for different pseudo users. We combine the ratings as follows: where P g is the set of pseudo users in u  X  X  group, and s the interest of pseudo user p .
We have developed a prototype system of YANA and con-ducted detailed evaluation using Fudan BBS [1], a pop-ular online social community with mobile client support. YANA emphasizes high-quality, high-efficiency, and privacy-preserving content recommendation. We compare YANA with two state-of-the-art CF solutions. One is a privacy-preserving SVD-based collaborative filtering framework pro-posed by Canny [5]. The other is a probabilistic latent semantic indexing (PLSI) based collaborative filtering al-gorithm proposed by Hofmann [7], and later adopted by Google News [6].
YANA is implemented both on desktop and mobile de-vices using Java. The mobile client is implemented on HTC Magic smartphones. The HTC Magic runs Android 2.1 op-erating system with 528 MHz CPU and 288 MB Ram. It supports Wi-Fi of IEEE 802.11 b/g. And the battery ca-pacity is 1340 mAh. The energy consumption of YANA is measured by monitoring the run-time battery capacity of the mobile phone. The recommendation server is also devel-oped using Java on workstation, which collects pseudo users X  information, clusters items, and computes item recommen-dations for the pseudo users.

YANA is tested with Fudan BBS, a popular online social forum among Chinese universities. It has over 60,000 users and supports various content-related user interactions, in-cluding posting, reading, and replying to articles and mul-timedia content. Everyday, there are approximately 20,000 new posts, and over 180,000 reads. Fudan BBS has over 100 subcommunities, and our experiments are conducted on 10 of the most popular subcommunities. We have collected data over three consecutive weeks, and divided the data into training set (Weeks 1 and 2) and testing set (Week 3). The training set is used to construct user groups and pseudo user profiles, and the testing set is used to evaluate the quality and efficiency of recommendations.
Figure 2 shows the recommendation quality of YANA compared with the SVD and PLSI algorithms 1 .Please note that, higher precision at the same recall indicates bet-ter recommendation quality. As we can see, YANA outper-forms PLSI in all the 10 subcommunities (by 23.2% on av-erage), and outperforms SVD in 8 of the 10 subcommunities (by 16.3% on average), and achieves comparable quality in the other 2 subcommunities. The improvement is achieved through the accurate interest grouping and the novel interest based recommendation, which can accurately identify user interests, reduce false negative user decisions, and improve the overall recommendation quality of less popular items.
To evaluate recommendation efficiency, we compare YANA with SVD, both of which are privacy-preserving collabora-tive filtering algorithms. The computation and communi-cation complexities of SVD are both O ( k m log n ) per user, where k is the decomposition factor of SVD, m is the num-ber of items, and n is the number of users. In contrast, the computation and communication complexities of YANA are both O ( km ) per user. Since k and k have similar order and n is usually big for online social communities, YANA can be much more efficient than SVD in terms of computation and communication complexities.

Latency. Figure 3 shows the overall latency of recom-mending each item to a user. We only consider the overall client-side latency as it would be the bottleneck of the whole system. Please note that, for the SVD solution, we cannot
The number of users per group K is set to 10 in these experiments. We have also tested with different K values (from 10 to 50) and the quality results are similar. Figure 3: Comparison of recommendation latency (per user and per item) between YANA (with different group size K ) and SVD. measure its communication latency, as it requires a large-scale ( O ( k m log n )) peer-to-peer communication. Thus, we only measure the computation latency of the clients of SVD. Still, we can see that YANA outperforms SVD both on desk-top and mobile devices in all the cases by at least 30%. The latency of YANA on desktop is between 20 and 60 millisec-onds, which is fairly efficient. The latency on mobile devices is around 1 second, which is also reasonable and practical for users of mobile devices.

Energy Efficiency. Figure 4 shows the daily energy con-sumption of YANA mobile clients in the ten subcommuni-ties, as compared with SVD. The daily energy consumption of YANA ranges from less than 0 . 01 mAh to 0 . 16 mAh ,which is really small compared with the total capacity of the bat-tery (1340 mAh ). In contrast, the energy consumption of SVD ranges from about 0 . 6 mAh to 5 . 36 mAh ,whichisover 30 times higher than that of YANA. The high energy con-sumption of SVD is due to its encryption and decryption op-erations in the singular value decomposition process, which is both time consuming and energy expensive.
In this work, we propose YANA, a group-based privacy-preserving content recommender system for online social communities. YANA automatically organizes users into groups with diverse content interests, which help protect individual users X  private interests from the server. Inside the groups, ef-ficient secure multi-party computation protocols are adopted to ensure privacy among group members. Pseudo users are created within each group to communicate with the server on behalf of real users, and the recommendations they re-ceive from the server can be re-calculated locally to provide customized recommendation for individual real users. We have developed a prototype system and evaluated it using real-world traces of an online social community. The experi-mental results demonstrate that YANA can protect user in-terest privacy, achieve better recommendation quality, and is much more efficient compared against state-of-the-art col-laborative filtering solutions.
 This work was supported in part by the National Natural Science Foundation of China under Grant No. 60736020 and No. 60803118, the Shanghai Leading Academic Discipline Project under Grant No. B114, and the National Science Foundation of USA under Grant No. CNS X 0910995.
