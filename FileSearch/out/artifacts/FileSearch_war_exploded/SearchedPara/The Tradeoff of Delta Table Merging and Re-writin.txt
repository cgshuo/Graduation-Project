 What-if queries based on hypothetical scen arios can provide adequate information for are how to represent hypothetical updates in a read-only historical dataset and how to process multi-dimension queries in a hypothetical data warehouse just like in an ordi-nary data warehouse. 
What-if analysis includes two types. One is based on hypothetical updates targets, the other is based on the expression of hypothetical update which can be seen as the realization for all types of what-if analysis. For hypothetical updates target, hypotheti-cal update can occur on schema, dimension and fact table. For the expression of hypo-query and delta cube. What-if analysis tools based on spreadsheet are also employed under research[4,5]. But this kind of what-if analysis usually focuses on key data view and key enterprise parameters; it is not general enough for the purpose of OLAP analysis. 
Among the realization techniques of what-if analysis, delta cube is based on incre-mental cube maintenance [1,3,6,7] and mate rialized views are needed. In our project of  X  Main Memory OLAP Server  X  , few materialized views are created because of under main-memory OLAP server in other research papers. [8,9] mainly focus on multi-version schema hypothetical updates, and can provide what-if OLAP analysis need further research work. [10] discusses the framework of what-if analysis and the main research works in the future. writing query algorithm [2] proposes a set of query algebra operators to perform what-if Delta table can be used as materialized results of re-writing hypothetical update queries. 
The performance of what-if query is important for what-if applications. More re-searchers focus on re-writing query algorithm than delta table merging algorithm because of the low performance with set operations of the latter and there is no com-prehensive comparison between the two solutions. We extend the delta table merging algorithm under what-if OLAP scenario with novel algorithms which can improve the performance and we carefully design experiments to measure the two types in differ-ent what-if data scenarios. Our work is the base research work for algorithm selection module in our prototype system. 
Our contributions are as follows: 1. We improve traditional delta table merging algorithm based on set operation. 2. We propose a novel pre-merging algorithm based on delta table and analyze 3. We carefully analyze the performance of re-writing algorithm under uniform 4. We propose the tradeoff policy of delta table merging and re-writing algo-
The background notions and conventions are presented in Sec.2. Algorithms are discussed in Sec. 3. Sec.4 shows the result of experiments. In Sec.5 we conclude the cusses future work. Traditional delta table merging algorithm is based on set operation, where each base table maintains two delta tables, one for insertion delta tuples, and the other for dele-tion operation. where D denotes updated tuple values; F denotes three what-if update flags with val-delta tuple with 0 for updated delta tuple, 1 for inserted delta tuple and -1for deleted delta tuple. hypothetical data view. The following queries on hypothetical data view are arbitrary. what-if queries limited in OLAP areas. What-if analysis={OLAP query//what-if up-gregate computation, i.e. what-if analysis  X  {what-if queries}. Traditional delta table merging algorithm based on set operation is described as: W=R there are no delta tuples, what-if data view can be obtained by re-writing query. The costly set difference operation can be re-written with proper where clauses, for exam-the performance remarkably. Because of the advantages in space cost and perform-with re-writing query, some what-if updates contain complex computing but small ments increase. 
For what-if updated and deleted delta tuples, the process is: factTuple i deltaUorI j deltaUorI j independently entering SUM accumulator results in the same result, we can regard this feature as associative law in ag gregating computation. If we pre-merge the fact table and delta table with union operation and then perform the unique group-by operation, the merging cost can be saved. The process is described as: 
Fact table  X  delta table pre-merge set of what-if data view OLAP query results. 
But with COUNT function, merged tuple get the result of 1, but fact tuple and delta We can get AVERGE value by SUM/COUNT. MAX and MIN functions need to be further studied; other aggregate functions such as MEDIAN do not suit the pre-merge algorithm. 
We compare the key procedure of join and set difference operations, in main-more than 10 times. We will discuss detailed algorithms in next section. In our research work, we classify delta table merging algorithm by thee types, one is based on set operation, another is based on jo in operation and the last type is based on pre-merge algorithm. We realize those algorithms with FoodMart dataset and SQL statement in order to perform experiment in a real ROLAP system. We select a typical MDX query for performance testing and transform it into SQL statement. SELECT store.store _ state, time _ by _ day.the _ year, time _ by _ day.quarter, product _ class.product _ family, SUM(sales _ fact _ 1997.store _ sales) FROM store,time _ by _ day,product _ class,product,sales _ fact _ 1997 WHERE sales _ fact _ 1997.store _ id=store.store _ id AND sales _ fact _ 1997.time _ id=time _ by _ day.time _ id AND sales _ fact _ 1997.product _ id=product.product _ id AND product.product _ class _ id=product _ class.product _ class _ id GROUP BY store.store _ state,time _ by _ day.the _ year, time _ by _ day.quarter,product _ class.product _ family; 3.1 Set Operation Based Delta Table Merging Algorithm A. Simple set operation based delta table merging algorithm In traditional set operation based delta table merging algorithm, what-if update opera-tional fields carry on necessary information, the value fields are same structure as fact table, and changed values are stored in relative fields. We assumed that in the phase of what-if update, new delta tuples satisfy the entity integrity check, we can use UN-ION ALL instead of UNION which is much more efficient. So we can simply de-scribe set operation based delta table merging algorithm(set BDM) as: Algorithm1. set BDM B. Improved set operation based delta table merging algorithm In practical applications, single delta table is usually used to store the what-if updates of set operation based delta table merging algorithm(improvedSetBDM) as: Algorithm2. improvedSetBDM
Algorithm 1 and 2 in this section are the same time complexity, unique delta table thetical update operation. 3.2 Join Based Delta Table Algorithm set difference operation, so we propose join based delta table merging algorithms. tuple and updated delta tuple is visible; No.3 denotes current fact tuple has a D type delta tuple and current fact tuple is invisible; No.4 denotes that there is a new inserted delta tuple and the delta tuple is visible; No.2 and No.5 denote that current fact tuple statement of  X  full join  X  , and output merged tuples through table scan operation on the full join table. decide whether fact tuple or delta tuple is visible. If we use delta value, the merging operation is just to compute the sum value of fact tuple field and delta tuple field, if value in delta table in the following algorithms. A. Full join based delta table merging algorithm We use  X  case...when...then...  X  clause to process the merging procedure. Algorithm3. fullJoinBDM group-by operation. 
With fullJoinBDM algorithm, set difference operation is replaced with full join op-rithm with different delta tuple type policy. B. left join based delta table merging algorithm What-if inserted delta tuples can be merged with fact table with union all command, so we separate the inserted delta tuples from delta table and directly merge them with have NULL values in the left part, so we can perform left outer join operation instead of full join, the time cost can be lower and only measure fields need to be re-written with case clause, which will greatly reduced the comparison process time . Algorithm4. leftJoinBDM 3.3 Pre-merge Based Delta Table Algorithm As we discussed in section 2, we can perform SUM based OLAP queries with pre-merge algorithm, we also develop algorithms for COUNT and AVERAGE functions. Algorithm5. pre-mergeBDM(SUM)
If aggregate function is COUNT, we use the SUM value of count field as COUNT value. This method can be applied in multi-version scenario too. Multi-version what-tuple is still 1, what-if delete on one fact tuple can only occur once, the re-insertion of deleted fact tuple is just stored as a new what-if insertion delta tuple. 
To COUNT and AVG aggregate operation, we use  X  SUM(sales_fact_view.count)  X  instead of  X  COUNT (measure i )  X  , and  X  SUM(measure i )/COUNT(count)  X  as AV-ERAGE(measure i ). In order to get a credible experiment results, we perform our test with typical dataset FoodMart and design all our algorithms with SQL statements. We perform our test on a HP Intel Itanium-64 server with two 1.6G CPUs running Red Hat Enterprise Linux ES release 4 (kernel version 2.6.9) with 2GB RAM, 2GB Swap and 80GB hard disk. We develop a tool for test data generation, which can generate the give amount of fact tuples and ten delta tuple datasets with the delta rate to fact tuples varies from 1% to 10%. In our experiments, we use a dataset of 8,000,000 fact tuples. 
We also construct query re-writing algorithms for comparison, what-if updates are statements for pure what-if update, what-if deletion, what-if insertion and mixed type complex aggregate based update with join and aggregate operations. 
We select the open source main-memory MonetDB database as our testing data-base which is column sorage(DSM) MMDB and has better performance in OLAP queries than many databases. The Power@Size  X  Throughput@Size  X  QphH@Size measures in TPC-H test of MonetDB are much more better than typical DRDBs, and also better than typical row-storage(NSM) MMDBs. A. Performance analysis of different delta table merging algorithms mark test. We can find that two set operation based algorithms are much costly than other algorithms, in both 1% and 10% delta rate conditions, more than 90% percents of time spends on the merging procedure between fact table and delta table, as figure 1(a) and (b) show. 
We do further test on the great gap between set operation based algorithms and join based algorithms, we design test SQL statements for set operation and join operation between fact table and delta table. The average rate of set difference operation to join operation is 97.23, the rate remains stable as fact table or delta table increase.We can delta table merging algorithm. 
DSM model is less efficient than NSM model in set operations, so we perform the same test in other databases, the results show that set operations are usually less effi-NSM database is smaller than DSM database. We will do further experiments with other databases in our future work. B. Performance of different delta table merging algorithms as delta rate increases. 
In figure 2, time cost grows larger with the increase of delta rate at average ratio of about 1% in setBDN algorithm. In improvedSetBDM algorithm, the amount of set difference operation tuples grow larger and the join operation tuples grow smaller, the whole time cost curve slowly decline as delta rate increases at average ratio of about 0.2%. Time cost of both join based algorithms increases with nearly the same ratio of about 0.5%, the average time cost of fullJoinBDM algorithm is about 10% percents more than leftJoinBDM algorithm, it owes to the smaller delta tuple set without what-if insertion delta tuples in left-JoinBDM algorithm and the benefit of left join substitutes full join. 
We can see the time cost curve rises as delta rate increases because the amount of group-by tuples grows. The average ratio of time cost increase is about 1%. The aver-age time cost of join based algorithms is about 2.25 times of the average time cost of based algorithms, pre-merge algorithm has the best performance. C. Comparison between delta table merging and query re-writing algorithm We measure the performance of simple query re-writing, complex query re-writing scenarios of pure update, pure deletion, pure insertion and mixed what-if updates. We have the following several observations in our experiments as figure 3 shows: (1) In re-writing query algorithm, mixed hypothetical updates take more time (2) Time cost of complex query re-writing is about 28% more than that of simple (4) To delta table merging algorithm, inserted delta tuples can be directly merged (5) The comparison of four algorithm shows that complex query re-writing algo-the policy of tradeoff in what-if analysis applications should consider four factors: (1) Usability: delta table can represent either regular what-if updates based on other (2) Space cost: query re-writing algorithms are superior to delta table merging algo-(3) Time cost: OLAP application on massive dataset provides poor performance, We analyze the performance bottleneck of delta table merging algorithm and propose improved algorithms based on join operation and pre-merge policy, by experiments we obtain the performance feature of each algorithm. We also design complete ex-sion management in our future work. 
