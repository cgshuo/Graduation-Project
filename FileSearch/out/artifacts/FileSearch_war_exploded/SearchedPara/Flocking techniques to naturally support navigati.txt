 1. Introduction
The recent research on technolog ies for 3D graphics has brought us the ability to digitally create ast onishing interactive 3D graphics.
Hardware especially designed for processing 3D graphics is now very mature and libraries to take advantage of this hardware have been created to facilitate the development of 3D applications. As a result, technology allows us today to construct visually impressive virtual environments. Virtual environments have already been employed in different contexts and for differe nt applications such as scientific visualization ( Bourke, 2008 ), scientific research ( Bainbridge, 2007 ), education ( Delwiche, 2006 ), medicine ( Kim et al., 2007 ), virtual heritage ( Bogdanovych et al., 2009 )andart( Grau, 2004 )among others. However, while technology allows us to move in real time in realistic environments, we realize that this is not enough. The worlds are visually impressive, but they lack other aspects of reality that need a certain degree of intelligence. These aspects need to be taken into account in order to come to more interactive, user-friendly and engaging environments. As Hoorn et al. (2003) have argued, it is now necessary to augment relevance, instead of realism, in order to improve the user experience in virtual environments.

One of the main challenges the users face when interacting with virtual environments is the navigation process. People experience difficulties navigating through virtual environments for a variety of reasons. These can include the difficulties common to navigation in real-world environments, as well as some problems unique to virtual worlds, such as lack of landmarks, reduced level of details, and lack of exposure (users visit a given environment infrequently). Several methods for supporting navi-gation have already been proposed by a number of authors. These methods address many possible contexts, but not all of them. approach to support navigation which complements the so far proposed mechanisms. Our approach is intended to suggest places to visit in a natural an peripheral manner. Actually, the user does not explicitly know that he is been guided. In particular, we propose the use of animal flocks to naturally suggest places to visit in large and open virtual environments. Very briefly, the main idea of our approach is as follows. The virtual environment is inhabited by a flock of virtual animals and the system has a set of interesting locations to suggest. From this set, at each moment only one location is selected as actively suggested location. When an actively suggested location is selected, the flock of animals moves toward this location and the animals move around this location when they reach it. In this way, they try to attract the user X  X  attention to the suggested location.
 initiated in Iba  X  n  X  ez et al. (2008) , where both the general approach and a preliminary version of the algorithms were introduced. In the present paper we improve the model to extend its applicability and flexibility. In particular, the algorithms have been extended in order to deal with: (i) dynamic lists of locations; (ii) the case when the nearest location is so far away from the user that he could not see the flock of animals on this location; (iii) the case when there are interesting locations to be suggested that are near enough the user to be seen by him, but he cannot see them because of his orientation; and (iv) the case when the user seems to not pay attention to the flock of animals.

Moreover, the paper reports on a user study which investi-gated whether the proposed model has an effect on the user experience when exploring a virtual environment. The results of this study suggest that the proposed approach is a suitable technique for suggesting places to visit in large and open virtual worlds.

The structure of the paper is as follows. First we review related work, in both group animation and navigation support areas.
Then we frame our approach in the state of the art of navigation support techniques, showing that our approach does not compete with other approaches but they are complementary to each other.
Next we detail the proposed model. Then we describe the user study and discuss its results. Finally we show the conclusion. 2. Related work
This section describes related work on both animation of group behavior and mechanisms to support navigation in virtual environments. 2.1. Group animation
Group animation, and particularly crowd animation, has recently been used to improve believability of virtual environ-ments ( Ulicny and Thalmann, 2002 ). As pointed out by Parent (2002) , when animating groups of objects, three general classes of techniques are usually considered, depending on the number of elements being controlled and the sophistication of the control strategy. These general types of techniques are particle systems, flocking and autonomous behavioral animation.

A particle system is a large collection of objects (particles) which, taken together, represent a fuzzy object ( Reeves, 1983 ).
Particle systems are based on physics, and particles themselves are supposed not to have intelligence, therefore this kind of technique is usually employed to animate groups of objects that represent non-living objects. Flocking systems typically have a medium number of objects, each one of them controlled by a relatively simple set of rules that operate locally. The objects exhibit some limited intelligence and are governed by some relatively simple physics. This type of technique is usually employed to animate objects that represent living objects with simple behavior. Particle systems and flocking systems both produce emergent behavior, that is, a global effect generated by local rules. Autonomous behavior is usually employed to animate one or at most a few objects which are supposed to be intelligent.
Therefore this kind of technique is usually employed to animate groups of objects that represent living things. Generally each object is controlled by a sophisticated set of rules.

We are trying to simulate medium-size flocks of living objects with simple behavior. Thus, we decided to base the group animation algorithm on flocking techniques. The collective beha-vior of flocks, herds and schools has been studied in artificial life ( Langton, 1995 ) and complex systems ( Flake, 1999 ) areas. This kind of behavior seems complex, however, as Reynolds (1987) suggested, it can be modeled by applying a few simple rules to every individual. In his model of so-called boids , every individual (boid) tries to fulfil three conditions: cohesion or flock centering (attempt to stay close to nearby flockmates), alignment or velocity matching (attempt to match velocity with nearby flockmates), and separation or collision avoidance (avoid collisions with nearby flockmates). The boids model has been extensively utilized (even to animate the behavior of flocks in famous movies). 2.2. Navigation support
Several methods for supporting navigation in virtual worlds have been proposed by a number of authors. Techniques include the introduction of particular cues and landmarks in the worlds as well as virtual agents and view management techniques that augment the environment in some ways. Other works propose guidelines to include landmarks and organize the layout of the environments. Furthermore, the inclusion of querying facilities in the environments to support navigation has also been investigated.
Some techniques have been proposed to include artificial cues and landmarks in virtual environments. A worldlet ( Elvins et al., 1997 ) is a 3D thumbnail of a landmark designed to decrease navigation time to a destination by increasing the familiarity with and recognizability of said destination. Another proposal, World in Miniature (WIM) ( Stoakley et al., 1995 ), is a miniature version of the virtual world currently inhabited by a user. Every object in a WIM is linked to its full size counterpart in the virtual world. The Interactive 3D BreakAway Map (I3BAM) ( Chittaro et al., 2005 ) is an extension of the WIM that supports user navigation in virtual buildings as a navigation aid, but also provides a means of examining any floor of a virtual building without having to necessarily navigate it. The WIM approach has also been explored as an interaction technique for hands-free multi-scale navigation through virtual environments ( LaViola et al., 2001 ). The use of trails in a virtual world as a navigation aid for users has also been explored. In ( Ruddle, 2005 ), trails were displayed as white lines that showed exactly where a user had previously traveled. Trails were found to cut in half the amount of time it took users to search a complex virtual world for target objects. However, for subsequent searches,  X  X  X ollution X  X  caused by trails from earlier searches minimized the benefits of this approach.

Apart from visual cues, audio has also been used as a cue in virtual environments. AudioDoom ( Lumbreras and Sanchez, 1999 ) is a 3D environment in the same vein as the classic game Doom. However, each of the different objects in AudioDoom emits a different sound in order to facilitate navigation. More recently, Dodiya and Alexandrov (2008) proposed a navigation aid serving route decision in virtual environments which employs continuous musical sound to guide the user through the virtual environment.
Virtual agents provide an alternative method for supporting navigation in virtual environments. For instance, virtual humans can give directions or transport users to locations ( van Dijk et al., 2001 ). Characters can also orient the user, point to interesting objects and automatically direct their view ( Wernert and Hanson, 1999 ). Characters can provide information to the user by either acting as presenters ( Nijholt, 2006 ) or as storytellers ( El-Nasr et al., 2008 ).

View management techniques are mechanisms that maintain visual constraints on the projections of objects on the view plane, such as locating related objects near each other, preventing objects from occluding others, or manipulating viewpoint. The approach presented in Bell et al. (2001) accomplishes view-management by modifying selected object properties, including position, size and transparency, which are tagged to indicate their constraints. Hughes and Lewis (2002) proposed two particular techniques. The first technique is characterized by the system automatically aligning the viewpoint with the ideal direction of the gaze as the viewer explores the environment. In the second technique the ideal gaze direction is used to aim at a spotlight, illuminating objects of interest.

Some authors have proposed guidelines for the design of virtual worlds so that they are more navigable. Darken and Sibert (1996) assert that knowledge about human wayfinding in the physical world can be applied to construct aids for wayfinding in virtual worlds. In this sense, they proposed a series of principles for world organization and map design. Vinson (1999) presents a set of 13 design guidelines to ease navigation in large-scale virtual environ-ments. These guidelines focus on the design and placement of landmarks in virtual environments. More recently, Biggs et al. (2008) focused not on an arrangement of obvious landmarks but instead on the organization of objects that form patterns of much smaller scale in their spatial combination to trace how users structure and comprehend these environmental patterns. Their approach was based on a combination of the architectural theories by Lynch (1960) , Alexander et al. (1977) ,and Alexander (1979) .
Querying techniques have also been proposed for supporting navigation. In van Dijk et al. (2001) and Nijholt et al. (2001) avirtual environment that models an existing music theater is described. The visitor can ask about existing locations in the theater. In van
Ballegooij and Eli  X  ens (2001) , the authors discuss several issues concerning querying information i n virtual worlds. They especially address the concept of navigation by querying and present a prototype which employs simple keywords matching to solve the approach for querying in virtual environments. It is based on techniques from fuzzy set theory and it is able to work with queries expressing the vagueness inherent to human conceptualization of visual perception (for example tall tree , a park with many tall trees ,or a park bench near approximately five tall trees ). 3. Why another technique for supporting navigation?
As shown in the previous section, interesting approaches for supporting navigation has already been suggested in the litera-ture. However, there is no universal solution. Each technique has advantages and drawbacks. Thus, the above described techniques are complementary to one another. Several techniques can be combined in the same environment. Moreover, each technique is more appropriate for some particular kinds of application than for others. For instance, the view management techniques are sui-table for providing guided tours to the user in a virtual museum.
However, these techniques are not appropriate for large scale open environments, as they limit the user X  X  freedom (they con-strain the user X  X  movement or viewpoint) and they are not natural.

For better understanding how our proposal relates to other approaches, we will characterize the navigation process and then we will show the cases that each navigation support technique is appropriate for. After that, we will see that our proposed model is adequate for particular situations not covered by current techni-ques. We will start by defining the components of navigation. In this sense, we like the definition provided by Jul and Furnas (1997) . According to them, the process of navigating throughout an environment can be considered to be composed of two tasks and two tactics. The tasks are: searching (looking for a known target) and browsing (looking to see what is available in the world). The tactics are: querying (submitting a description of the object being sought to a search engine which will return relevant contents or information) and navigation (moving oneself sequen-tially around an environment, deciding at each step where to go next based on the task and the parts of the environment seen so far). A combination of a task with a tactic produces a navigation process.
 take into account the perspective of the user. However, virtual environments are interactive. That means that the environment can influence the user decision in the same way as the user can change the environment through his actions. A proactive envir-onment can suggest places to visit to the user and change, as a result, the user navigation process. For instance, a proper virtual representation of La Rambla (in Barcelona) should include virtual waiters asking the user to go into their restaurants for a meal.
If the user goes into a restaurant (even tough the user had a different well defined target), the environment (in this case a virtual waiter) has changed the user navigation process. A proactive environment is able to influence the navigation process. Thus, we extend the definition of navigation by Jul and Furnas with an additional component: the environment proactivity .
 their fitness for the navigation dimensions (tactics/tasks and proactivity). Table 1 shows this characterization. First of all, for supporting the navigation tactic, design guidelines can be utilized for designing the environment. These guidelines are based on knowledge about human wayfinding in the physical world and urban planning. Thus, they are clearly good practices and the result will be natural for users. The use of this guidelines will help to support the navigation tactic for both tasks (searching and browsing). If the environment still requires further support for the navigation tactic, artificial cues such as worldlets can be useful. For supporting the querying tactic, the best option is to use a query engine. Note that a query engine supports the querying tactic for both searching (queries for concrete objects) and browsing (exploratory queries) tasks.
 options are available: view management techniques and virtual humans. We have compared these techniques in terms of several characteristics, as shown in Table 2 . Note that our approach is included in the comparison, as it is an adequate technique to proactively propose places to visit. The view management tech-niques are useful in contexts where the user should be guided and you want to be sure that he visits or sees particular places or objects. However, these techniques limit the user X  X  freedom (constraint the user X  X  movement or viewpoint). The virtual human approach is appropriate for dynamic contexts. We expect a virtual human to be dynamic. Thus, virtual humans can move in a virtual environment without awakening suspects. However, the problem is that virtual humans create false expectations. As stated by Norman (1994) , one aspect of people X  X  attitudes about agents is over-exaggerated expectations. Norman argues that it is partly due to the nature of people X  X  tendency to false anthro-pomorphizing, seeing human attributes in any action that appears in the least intelligent. Or, as stated in Dehn and van Mulken (2000) , the human-like behavior of the agent in some aspects may lead the user to believe that the agent resembles human beings in other cognitive and emotional aspects as well. Because of this generalization, the user may ascribe capacities to the system that it does not possess, thus leading to wrong expectations about the system X  X  behavior.

As shown in Table 2 , our approach is appropriate for particular conditions that no other technique fulfills. The animal flock model is natural and peripheral. Moreover, it does not limit the user freedom, it is adequate for dynamic and large environments, and it does not create false expectations. Thus, our approach is the more appropriate option for exploratory environments (and exploratory video games) where the user X  X  freedom should be granted and false expectations should be avoided. However, our approach is not explicit enough. Thus, it is not an appropriate option if you need to guarantee that the user sees particular objects. Finally, an additional positive point of our approach is that it could improve the user X  X  experience, as recent studies ( Delgado-Mata et al., 2007 ) show that the inclusion of life (particularly animals and flocks of animals) in virtual environ-ments improves the user X  X  experience. 4. Our approach
Our approach comprises two complementary algorithms. The first one is a flocking algorithm which creates an emergent group behavior from simple individual rules. The second one is a control algorithm which manages the list of places, decides the particular place to suggest at each time and parameterizes the flocking behavior to control it.

The different components of our approach will be described in the next two subsections, but a general overview at this point will help to understand how both algorithms relate to each other and to the whole system. Fig. 1 shows an overall diagram of the system. Note that apart from our two algorithms, the diagram includes application dependant algorithms. These algorithms constitute the logic behind the concrete application, which clearly depends on the nature of the particular application where the model is being used (the logic of a video game, for instance, is very different from the logic of a virtual city). The application depen-dant algorithms are responsible for updating the location of each target that should be suggested. This task is clearly application dependant, as each particular application could have particular criteria for deciding which targets are interesting for the user.
In the first place, the control algorithm shares the list of interesting places to suggest ( L ) with the application dependant algorithms. The concrete application initializes L and can modify it in runtime depending on the particular application nature and state. In addition, several parameters of the control algorithm ( thresholdDist , maximumDist , thresholdTime , DefaultTc , MinTc and MaxTc , described in Section 4.2 ) are set up by the concrete application and should be configured by the administrator of the system (note that different applications may require different values for these parameters).

The flocking algorithm is mainly configured by the admin-istrator, which can set a series of parameters ( Cf , Af , Sf and MaxVelocity ) which are described in Section 4.1 . More relevant L for our description is that the control algorithm can set, at each step, the value of the following two variables which are shared by both the control and flocking algorithms: the active sug-gested location ( ASL ) and the tendency control factor ( Tc ). On the one hand, ASL is the location currently selected by the control algorithm to be suggested to the user. In other words, it is the location the flock should approach to. Therefore, by changing the value of ASL , the control algorithm controls the flock of animals to approach another location. On the other hand, Tc allows the control algorithm to weigh the relative importance of one of the four component vectors of the flocking behavior (described in Section 4.1 ), more precisely the ten-dency vector which attempts to approach the ASL . Thus, by regulating Tc , the control algorithm regulates the tendency of the flock to approach the ASL . 4.1. Flocking algorithm
The flocking behavior in our system is based on the classic boids model ( Reynolds, 1987 ), although we have extended it with two new elements. On the one hand, we have added an additional rule (tendency) to the repertoire of behavioral rules. On the other hand, a control algorithm (which is described in Section 4.2 ) parameterizes the flocking behavior. The tendency rule is used to influence the behavior of each boid in such a way that it tends to get near a particular location. This location, known as the active suggested location (or ASL ), is set by the control algorithm at each time step.

Next, we formally describe the flocking behavior. Let VA be a flock composed of m virtual animals VA  X f Va i , i  X  1 , ... , m g
Each virtual animal Va i has two properties: position pos velocity ~ vel i . Every virtual animal Va i has also a set of nearby neighbors N i which is defined as the set of virtual animals that are nearer than a certain distance d from Va i
N  X f Va j A VA : 9 Va i Va j 9 o d , j  X  1 , ... , n g
In our model each virtual animal moves itself along a vector, which is the resultant of four component vectors, one for each of the behavioral rules, which are:
Cohesion  X  attempt to stay close to nearby flockmates. Cv i  X 
Alignment  X  attempt to match velocity with nearby flock-mates. Av i  X 
Separation  X  avoid collisions with nearby flockmates. Sv i  X 
Tendency  X  attempt to approach the active suggested location (set by the control algorithm at each time step). Tv i  X  ASL pos i
Taking into account the just described component vectors, the velocity vector of each virtual animal is recalculated at each step as follows: vel i  X  ~ vel i  X  X  Cf ~ Cv i  X  where Cf , Af and Sf are factors representing the importance of the component vectors ~ Cv i , ~ Av i and ~ Sv i respectively. These factors allow us to weight each component vector independently. rithm) which uses four different values to control the tendency of the flock to approximate the active suggested location. The control algorithm sets the value of Tc to zero when there is no place left to suggest. In that case, the flock of animals will behave as a flock which freely moves around the environment without paying attention to any particular location. Tc is set to DefaultTc when there is a place to suggest. In that case, the flock approaches the target ( ASL ) and keeps moving in circles around it. Finally, if after a given time the user has not yet approached the suggested place, Tc is alternatively set to the values MaxTc and MinTc during a short time. As a result, the animals approach (due to the MaxTc value) and leave (due to MinTc ) the target in a sharp but convincing manner.
 speed: vel i  X  limit  X  ~ vel i , MaxVelocity  X  where MaxVelocity is the maximum velocity allowed to the virtual being. limit is a function with two parameters. The first parameter is a vector and the second one is a number (which represents a maximum magnitude). The value of the function is equal to its first parameter (the vector) if its magnitude is not greater than the second parameter. Otherwise the function value is equal to a copy of the vector but with its length limited to the magnitude given by the second parameter (that is, the new vector has the direction of the first parameter but its magnitude is equal to the second parameter).
 pos i  X  pos i  X  n t ~ vel i where n t is the time elapsed since the last update. 4.2. Control algorithm list of places, decides the particular place to suggest at each time step and parameterizes the flocking behavior. Note that the particular list of places the application deals with is application dependant. Moreover, the list can be dynamic. During the appli-cation runtime, new places could be added to the list and other places could be removed by the particular application depending on several criteria (which are also application dependent). functions employed by the algorithm. The algorithm itself is shown in Fig. 2 and it is described next. The algorithm receives, as input, the values for a set of parameters as well as three references to shared variables. The values for the set of para-meters ( DefaultTc , MaxTc , MinTc , maximumDist , thresholdTime , thresholdDist ) are set by the main application. One of the shared variables ( L ) is shared with the main application and the other two ( ASL and Tc ) are shared with the flocking algorithm. other steps (block A) are repeated while there are interesting locations to visit left (that is, the set of interesting locations to suggest is not empty). Steps 2 and 3 set the current user X  X  location and orientation. Steps 4 X 6 select the set of interesting locations that are currently visible from the user X  X  point of view.
Steps from 7 to 19 (block B) select the active suggested location ( ASL ). Steps 7 X 10 (block C) select the active suggested location as the nearest one from the set of visible locations, if possible (if there is any). If there is no visible location from the user X  X  location, two possibilities are considered. On the one hand, steps 11 X 14 (block D) deal with the case that there are interesting locations to be suggested that are near enough the user to be seen by him, but he cannot see them because of his orientation. In this case, the nearest location is selected. Note that the user cannot see the flock of animals at the moment, but he could rotate his point of view and see it. On the other hand, steps 15 X 19 (block E) deal with the case that the nearest location is so far away from the user that he could not see the flock of animals at this location.
In this case, a temporal target (for the flock) is created between the user and the location to be suggested and such that it is located nearer than a certain distance from the user so that it is visible from his point of view. Note that as the user approaches the flock, the animals accordingly move toward the location to actually be suggested.

Thus, as a result of the previous steps, the flock of animals moves toward the selected active suggested location and they move around this location when they reach it. In this way, they try to attract the user X  X  attention to the suggested location. If after a given time the user has not yet approached the suggested place, steps 20 X 23 (block F) force the animals to move showing a sharper behavior during a few seconds, in order to attract the user X  X  attention. In particular, this is accomplished by alterna-tively increasing and decreasing the value of Tc . In particular, Tc is alternatively set to the values MaxTc and MinTc during a short time. As a result, the animals approach (due to the MaxTc value) and leave (due to MinTc ) the location in a sharp but convincing manner. The maximum and minimum values of Tc (while increas-ing and decreasing it), so that the animals X  movement is believ-able, depend on both the particular implementation and the values of the other parameters (as it is an emergent behavior). In Section 5.2.2 we describe the values of the parameters in our current implementation including the extreme values for Tc .
Steps 24 X 28 (block G) remove the visited locations (if any) from the set of interesting locations. Steps 29 X 30 (block H) repeat the cycle jumping to step 2, if the set of interesting locations is not empty. Finally, steps 31 X 38 (block I) deal with the case that the set of interesting locations is empty (that is, the user has visited all the interesting locations). In that case, the tendency control factor of the flocking algorithm is set to zero (step 32). As a consequence of that, the flock of animals will behave as a free flock which freely moves around the environment without paying attention to any particular location. Then, steps 33 X 35 just wait until the list of interesting locations is not empty, that is, the control algorithm waits until the main application (the set of application dependant algorithms) updates the shared variable L with new locations to visit. When that happens, the normal guiding behavior of the flock is restarted by setting the tendency control factor to its default value (step 36) and jumping to step 2 (step 37).

As an interesting remark, we must say that when we designed the first version of this algorithm, we considered an additional value which we finally did not need. We wanted the virtual animals to approach the active suggested location till they were at a certain distance from this location. Then we wanted the animals to move around this location maintaining approximately this particular distance from the location. We thought we would need this distance as a parameter. However, by interacting with our first developed system we realized that it is not necessary. By choosing an appropriate value for Tc the required effect is accomplished (the flock keeps moving in circles around the target location as an emergent phenomenon). 4.3. Heuristic method for determining the parameters
Although the flocking behavior is modeled by applying a few simple rules to every individual, the resulting system is a complex system. Thus, the obtained emergent behavior is unpredictable. Therefore, appropriate values for the parameters cannot be defined a priori (as the value of each parameter depends on both the particular implementation details and the values of the other parameters). However, they can be experimentally found. That is the reason why the application should provide a user interface which allows the administrator to vary, in real time, the values of the algorithm parameters. By employing this interactive user interface we easily find particular values for all the parameters that, taken together, shape a believable behavior for the virtual birds. We find the set of parameters in an intuitive way. However, we must admit that we are used to work with flocking algorithms.
Thus, perhaps our intuition is guided by some kind of implicit and unconscious knowledge (which takes advantage of our experience with flocking behaviors).

In this sense, we carefully analyzed our behavior in order to understand the implicit knowledge behind it. Our aim was to define a heuristic set of rules that can help other engineers to find appropriate parameters for their particular implementations.
More concretely, we employed the thinking-aloud method. We verbalized each action we carried out (and justified it) while interacting with the user interface. Then, we extracted and analyzed the knowledge which was implicit in the provided explanations. Finally, we organized that knowledge into a set of heuristic rules which are shown below. 1. Find a believable flocking behavior : The aim of this step is to obtain a believable flocking behavior where the virtual animals move in a group in a natural way.
 2. Find adequate values for the tendency component : The aim of this step is to obtain appropriate values for DefaultTc , MaxTc and MinTc . In order to achieve that, start by gradually increas-ing the value of Tc till the flock keeps moving in circles around the target. Then slowly increase/decrease the value of Tc in order to find three different values: Take into account these two rules (while varying the value of Tc ):
In order to validate the utility of the heuristic set of steps, we conducted a very simple user study. Five participants took part in the study. They had no experience with flocking algorithms. They were presented with an interactive 3D application which imple-ments the designed model. The application provides a user interface which allowed the participants to vary, in real time, the values of the algorithm parameters. The participants were informed about the components of the flocking algorithm.
They were also informed about the heuristic procedure to find adequate values for the parameters. The participants were then asked to find a set of appropriate values for the algorithm parameters by following the heuristic procedure. They kept a printed copy of the heuristic procedure while looking for the set of values by interacting with the user interface.

We annotated the time it took each participant to obtain an appropriate set of values. The average time duration was 968 s (SD  X  276.47), that is, 16 min and 8 s. Thus, it seems that the proposed heuristic process is appropriate for finding adequate values for the parameters in a reasonable period of time. 5. User study
This section deploys an experiment which investigates whether the addition of the proposed model has an effect on the user experience when exploring a virtual environment. Note that we do not aim to compare our model to other approaches as we think that each approach is appropriate for particular different situations. Thus, the different techniques are not competitors but complementary approaches for supporting navigation. Probably this is the main reason why there is hardly any formal compar-ison among techniques in the literature. 5.1. Aim and hypothesis
The aim of the study is to investigate if the use of the proposed model has an effect on the user navigation process when explor-ing a virtual world. Our hypothesis is that the addition of the model will influence the user behavior in such a manner that he will be more likely to visit the places suggested by the flock of virtual being, even though the user does not know the flock X  X  intention to guide him. 5.2. Method 5.2.1. Participants
Thirty participants, age group between 22 and 37, took part in the experiment (mean age  X  27.80, SD  X  3.93). There were 19 males and 11 females. Participants were asked to rate their experience with computers and vi rtual environments (including 3D videogames). Experience with computers ranged from moderate to very experienced, with a majority rating their experience as reasonable or better. Experience with virtual environments ranged from none to reasonable, with a majority having little experience. 5.2.2. Equipment
For the experiment, we developed an interactive 3D applica-tion which implements the designed model. The application was developed in VRML and Java ( McCarthy and Descartes, 1998 ; Roehl, 1997 ). More concretely, the virtual environment is modeled as a VRML virtual world while a Java program imple-ments the described algorithms to control a flock of virtual birds (aimed to suggest places to visit) in the environment. This application allowed us to explore our ideas in virtual environ-ments and evaluate them through a user study which is described in the next section. The application also provides a user interface which allows the administrator to vary, in real time, the values of the algorithm parameters. By employing this interactive user interface we found the set of values shown in Table 5 that, taken together, shaped a believable behavior for the virtual birds. We used a large virtual environment in the evaluation (see Figs. 3 and 4 ). Actually, there is no common definition of large virtual environment in the literature, even though the term is frequently used. According to Kuipers (1978) , a large virtual environment is a virtual space whose whole structure cannot be observed from a single viewpoint. Generally speaking, in the context of this paper, a large virtual environment is a virtual world that contains at least two interesting areas (that is, non-empty areas) such that it takes the user a long time to walk from one area to the other due to the distance between them. In a more concrete way, we use the idea of region employed in Second Life.
In Second Life, the world is partitioned into uniformly sized 256-m 256-m regions ( Bell et al., 2010 ). Each region is hosted by a simulator service, which maintains and updates the state of everything within a region. We think a virtual world can be considered to be large if it contains at least 16 regions.
The size of the virtual environment used in the evaluation is 1500-m 1500-m. Thus, it approximately contains 36 regions.
The virtual environment consisted of a virtual residential area composed of 900 blocks (30 30) widely spaced. Each block consists of either a house (between 3 and 6 m tall) or a park with trees (between 1 and 3 m tall). More specifically, 80% of the blocks contain a house while the other 20% of the blocks contain a park.
The user X  X  avatar height was set to 1.80 m. 5.2.3. Procedure
The experiment was conducted in a quiet room free of distraction. Before beginning the study, subjects were allowed to spend as much time as they wanted familiarizing themselves with the navigation controls. No participant spent more than 5 min. They practiced in a virtual environment quite similar to the one used in the evaluation.

Each subject was then exposed to one of the following two conditions:
Condition A: Exploring a virtual environment without the addition of the flocking model.

Condition B: Exploring the same virtual environment with the addition of the flock model.

Each participant was only exposed to one condition. Fifteen participants (the control group) were exposed to condition A, and 15 participants (the experiment group) were exposed to condition
B. Participants were randomized and distributed so that the degree of participants X  experience with computers and virtual environments were balanced across conditions.

The participants were asked to freely explore the environment on their own for 10 min, without any special indication. That is, the users that explored the environment inhabited by the animal flock (condition B) were not informed about the guiding abilities of the virtual animals.

Five locations were internally annotated in the system as inter-esting locations to be suggested by the animal flock in condition B.
These locations were such that they were visually identifiable when the user was near, but were not identifiable from a long distance (that is, they were not remarkable landmarks). More concretely, each of these locations included a poster with a text message regarding the place (for example  X  X  X his is the house where the village X  X  poet was born X  X ). Three of these posters were located in parks, and the other two posters where located on the pavement in front of particular houses.
 cipant visited one of these five particular locations (the partici-pant was near enough to see one of the text messages). In addition, each participant was asked, after the experiment, about the particular places and text messages just to make sure that they were aware of them.
 who was exposed to condition B some informal questions about the interaction. In particular, we asked them if they found the flock of animals useful (and if so, why). 5.3. Statistical analysis esting locations) visited by participants was compared across con-ditions. Mann X  X hitney U test ( Mann and Whitney, 1947 ) (2-tails) was applied between conditions A and B. The statistical inference was carried out by using the SPSS software, version 11.0.1. 5.4. Results and discussion a box and whisker diagram (or box plot), as shown in Fig. 5 . The box represents the range within which 50% of the data falls (the middle half of the sample). The horizontal bold line within the box is the median. The  X  X  X  shape shows us the limits within which all of the data fall. The first impression is that condition B performed better than condition A, that is, participants in condi-tion B (exploring the virtual environment with the addition of the flocking model) visited more interesting locations than partici-pants in condition A (exploring the virtual environment without the addition of the flocking model).
Table 6 shows the test statistics of Mann X  X hitney U test on the comparison between conditions A and B. The Mann X  X hitney
U test shows a significant difference ( p o 0 : 001) between the two conditions for the number of interesting locations visited by participants. Participants that explored the virtual environment with the addition of the flocking model (condition B) significantly ( p o 0 : 001) visited more interesting locations than participants that explored the virtual environment without the addition of the flocking model (condition A). Thus, the statistical results supports the idea that the inclusion of the proposed model has an effect on the user navigation when exploring a virtual environment. The results suggest that the proposed approach is useful for suggest-ing places to visit in large and open virtual environments.
As we mentioned before, we also asked each participant who was exposed to condition B some informal questions after the experiment. The participants X  answers provide interesting quali-tative information abut the user X  X  perception of the system. In particular, we first asked them  X  X  X id you find the flock of animals useful? X  X . Fourteen out of 15 participants answered yes, even though they were not warned about the flock utility. We then asked the users about their reason to answer yes (if they did so).
We also encouraged them to provide any comment they could find interesting about the flock. All the users that found the flock useful recognized that they found at least some of the interesting locations thank to the flock. One of the participants said  X  X  X he virtual environment is the virtual animals environment, so they should know the environment better than me! That is why I trusted their experience X  X .

Some users seemed to have perceived the virtual animals as useful and not disturbing. One of the users said  X  X  X  found the flock very natural, actually I only paid attention to the flock of animals when I was not concentrated on any particular task, then I found it useful X  X . Another user said  X  X  X  felt free to move anywhere, but somehow I guessed I could follow the flock if I got bored X  X .
Another one said  X  X  X  liked the virtual animals because they did not ask me anything. Even though I think they are useful, I decided where to go and they did not complain X  X . These results are positive and seem to indicate that this line of research deserves more attention.

The virtual environment used in the evaluation consisted of a virtual residential area which contained houses between 3 and 6 m tall (along with parks). Thus, we should reckon that the successful results we have obtained are applicable to this kind of environment (environments with a height up to 6 m). We think that the approach could be used as well in underwater virtual environments (using a school of fishes instead of a flock of birds).
However, we do not know if the approach would be useful in a virtual city with very tall buildings, as the flock of birds could not be visible (from the user point of view) in most cases due to the buildings X  height. More explorations are necessary in this line of research. 6. Conclusion and future work
This paper has proposed and explored the use of animal flocks to naturally suggest places to visit in large and open virtual environments. The described model was developed and evaluated through a user study which investigated whether the addition of the proposed model has an effect on the user experience when exploring a virtual environment. The results suggest that the proposed approach is a suitable technique for suggesting places to visit in large and open virtual worlds.

The proposed approach complements the so far proposed mechanisms to support navigation in virtual worlds. It does not intend to constitute a total solution. We should take into account that the proposed approach is not explicit (it does not explicitly ask the user to go to a particular place). Therefore (depending on the particular application) it could have to be combined with more explicit methods when necessary. For instance, consider the case of an adventure video-game. When the game starts, the user has nearly no information about the game plot. While playing, the game provides the player with clues about the story he is immersed in. In this sense, there are two extreme approaches. On the one hand, the game can explicitly indicate to the player the next location he should visit. In this case the game plot is controlled by the game, while the player X  X  freedom is quite limited. On the other hand, the game can let the player freely explore the environment till he finds a new clue on his own. In this case, the game is less predefined and therefore the user feels more autonomous. However, if the user does not find any clue for a while, he could get bored. Solutions somewhere in-between both extremes are desirable. In this sense, our approach can be used to suggest spatial clues to the player while preserving the player X  X  autonomy. However, as the approach is not explicit, it should be combined with other techniques when necessary. For instance, a virtual character (asking the user to look at a particular object) could be employed in cases where it is necessary to guarantee that the user is aware of particular objects.
Other applications, apart from 3D video-games, could benefit from the proposed approach. For instance, this is the case of training virtual environments. In those environments, the virtual worlds are used as recreations of real spaces so that future users of the real space can learn (in advance) to move in the real space by practicing in the virtual one. In this sense, some years ago we designed a large virtual environment representing a real Center of Environmental Education. This is a large space which includes several buildings and large open spaces. The virtual environment is used by future users of the center (researchers that will stay at the center for several days) to get used to it. We realized that in this kind of environment, the user should feel free to move anywhere, as the learning process (including the spatial orienta-tion) improves when the user is proactive. In this sense, subtly providing spatial clues could be a good strategy. Other kinds of virtual environments where our approach can be useful are 3D virtual cities (environments built on a semantic level that inte-grate urban information and create public spaces for people living in the real cities) and open spaces in online virtual worlds such as Second Life. Other potential contexts where the proposed model could be employed (beyond 3D virtual environments) are digital 2D maps (where 2D flocks of digital birds could be employed) and augmented reality applications (where flocks of digital animals could be employed to suggest places to visit in the real world in real time).

Our future research includes further studies with other kinds of environment with different settings (different building heights, different types of objects, etc.) in order to analyse how the flock influences the user X  X  behavior under each condition. We want to understand the extent to which each environment feature (height, density, noise, dynamic content, etc.) influences the performance of the flock as a guide.

We will also explore the use of the presented approach as a support to find moving targets. Note that the described algorithms (the flocking algorithm and the control algorithm) can be directly applied for dealing with moving targets (as long as the location of each target is properly updated). In fact, (while testing the algorithms) we did already apply the algorithms for suggesting moving targets. However, further research (particularly user studies) is necessary in order to understand if the proposed approach is suitable (from the user point of view) for suggesting moving targets.
 Acknowledgment The authors would like to express their gratitude to Leticia
Lipp for generously proofreading. We would also like to thank the anonymous reviewers for their wise comments. We think they have clearly improved the quality of the paper in several aspects. References
