 1. Introduction Quality of Service (QoS) aspects are becoming more and more important in each type of service provisioning. In particular,
Web-Service-based Real Time content provisioning is assuming relevance in various application domains, where products including text, video, sound, and images are requested by users. The attainment of quality in complex products and services has become a pivotal concern: while quality in tangible goods has been described and measured by marketers, quality in services is still largely undefined and researched. Moreover, QoS of Web-Services related to Real Time content provisioning needs to be studied in order to provide a uniform approach to the provision of multimedia objects, respecting the QoS ex-pected by the user.
The Service Oriented Architecture (SOA) 2 is widely adopted for delivering composite services to end-users. Such composed according to user preferences.

Complex services can be handled both as orchestrated services, and thus executed by an orchestration engine or, under a more loosely-coupled perspective, as choreographed services, expressing constraints on admissible ordering of messages can represent an anomaly in the behavior of the complex service defined by the choreography.

A particular type of service which is gaining interest in advanced application is provisioning of Real Time content. The provisioning is often activated through Web-Service interactions, i.e., the global service combines Web-Service technologies and Real Time content provisioning, although the user perceives this combination as a single service. Also in this case it would be important to measure and control the QoS in a combined approach.

The purpose of this paper is to propose an integrated approach to QoS measurement and adaptivity for Web-based pro-visioning of delivered objects, and in particular of Real Time contents. We deal both with the QoS of Web-Services and with the QoS of the delivered objects, namely, streaming contents (images, videos, text and sound, and so on). We model and of messages) and the parameters that characterize such content (such as, for streaming objects, bandwidth or frame rate). The two measurements are combined using a common description based on an ontology of both the Web-Service and the through a combined application of recovery actions aimed at adjusting the QoS level of the delivery.
We consider complex composed processes, organized at two communication levels: the level of Web-Services interaction, ers are separate for what concerns service provisioning, and communicate when dealing with QoS aspects.
We propose two different QoS models, one for Web-Service quality and one for RSTP quality, and mechanisms for mon-itoring the QoS and reacting to possible QoS violations, also through adaptiveness. For Web-Services, our concept of QoS is composed of a set of parameters customizable by means of contracts between a client (service consumer) and a server (ser-mechanisms can be employed to repair the fault, each with a given cost. For the RSTP level, QoS is modeled through suitable parameters, monitored and then repaired through adaptation mechanisms that aim at adjusting some parameters (e.g., the bandwidth) in order to keep the QoS compliant with the user preferences. To such aim, the preferences are stored and man-sidered as a unique composition of a Web-Service part and a streaming part, the provided mechanisms can lower the layer separation producing effects also in the layer where the QoS fault is not (still) raised. In the Web-Service world, a system supporting these features is called a Self-Healing System [25,31] . These systems are composed of different cooperating nodes, each equipped with different modules in order to handle the application context, the QoS variations, the monitoring functions, and the recovery mechanisms. We consider that a QoS fault detection module (in our approach called Controller ; see Section 3) and a Recovery Manager module are present to face QoS mismatches. The former is devoted to catch a fault, while the second works to choose the proper set of recovery actions to be performed to recover from a QoS violation. An advanced function provided by our approach is the prediction of future QoS violations. The prediction is obtained at the predicted faults. A choreography monitor is also exploited, namely, a Web-Service able to trace the message exchanges and detect possible anomalies at the communication level (e.g., interaction protocol violations). Thus, the framework at the Web-Service layer works both under a choreography perspective, used to face the global coordination aspects, and under an orchestration perspective, which considers a single orchestrated node where the single actor can handle its business pro-cess, and its interactions with the other Web-Services participating in the choreography, as an orchestration.
In the paper, we also describe some architectural aspects related to the design of a software architecture devoted to de-velop a tools framework to support adaptive systems. Such architecture is proposed in the context of the Quadrantis Project, the Italian PRIN project wherein we have studied and developed the present QoS analysis models and tools.
The paper is structured as follows. Section 2 presents the QoS models for Web-Services and for the RSTP, respectively. Sec-how the proposed models deal with the issue of reaction to QoS faults, in particular using adaptation mechanisms at the RTSP 2. QoS modelling
This section introduces the two QoS models: the Web-Service quality model and the RSTP quality model, considering also how they relate to each other through an ontology framework.

In order to deal with quality of Web-Services, we refer to the insights obtained in an extensive exploratory investigation request for a complex object for the end-user. On the other side, the growing world of provisioning streaming services, the Quadrantis project is to combine the world of services with the world of the RTSP objects. In order to combine the two quality measurements, an ontology supports the description of Web-Services and their quality, and an ontology de-scribes the delivered RTSP object. Through such an enrichment, we aim at obtaining a joint measurement of the  X  X  X ser sat-rate of a video).

Fig. 1 shows our reference scenario: a user requires, and eventually receives, a complex service managed through a cho-reography of different Web-Services, one of which (WS3 in the figure) controls the provisioning of streaming content. WS1 2.1. QoS at the Web-Service layer
The model for Web-Service QoS considers the parameters proposed for QoS in [4], and employes seven of them, related to a single synchronous operation provided by the considered server. The following list shows the meaning of each parameter:
Response Time ( T . Resp ). Time elapsed between the instant a request is sent from the client and the instant when the response has been computed by the server ( T . Resp in Fig. 2 ).
 Price ( P ). Amount a client has to pay to the server for the operation provisioning.
 Availability ( Avail ). Probability that a given operation is really accessible at the required moment.
Reputation ( Rep ). Ratio between the number of invocations which respected the required QoS and the total number of invocations.
 DataQuality Timeliness ( DQ . Timel ). Freshness (up-to-date) degree of data.

DataQuality Accuracy ( DQ . Acc ). Correspondence between a given data item and a reference data item considered as correct.

DataQuality Completeness ( DQ . Compl ). Cover of exchanged data with respect to the total data representing the information.
 Table 1 shows the metrics selected to define the parameters.
 Let us consider the set of parameters QoSParameters and each single QoS parameter Qparam . Formally:
QoSParameters  X  Qparam 1 Qparam 2 Qparam i 1 Qparam i  X  Q According to Table 1 , each QParam i assumes a value in the corresponding domain. This value is identified as V each QoS parameter, a correspondence is defined among ranges of values R fined on finite set of values (e.g., { High , Medium , Low }). The coverage of the possibility space is complete. Formally 2.1.1. Global QoS
It is now necessary to define a concept of QoS which can be used to group all the QoS parameters, and that is valid both for the concept of global QoS as a tuple composed of the union of different QoS values or levels. The global QoS Value GlobQoSV of a given operation i of a service S is the set composed of the union of each QoS Value corresponding to a QoS Parameter. Formally, if V QParam J is the value of a QoS Parameter QParam The Global QoS Level GlobQoSL of a given operation i of a service S is the set composed of the union of each QoS level L QoS QParam j corresponding to a QoS Parameter QParam j .

To provide an example of associations between values and levels and QoS Contracts, let us assume the following: Under this assumption we could have 2.1.2. Ontology of Web-Service QoS
Effective delivery through the Web is strictly connected with the semantic representation of information contained there-among heterogeneous applications, in order to automate several operations that are still manually executed [7].
The description of Web-Services quality in our approach relies on ontologies for the semantic representation of the quality domain. The cooperating nodes share the quality ontology to describe at a semantic level the quality of the exposed
Web-Services and the structure/content of the exchanged messages, since a common knowledge about both Web-Service quality and exchanged message content is needed.

In particular, the ontology describes the semantics of Web-Service quality parameters reported in Table 1 . The ontology, implemented using OWL (Web Ontology Language), 4 provides the description of the attributes of general quality, their rela-the same conceptualization for the generic QoS parameters and redefining (or adding some particular QoS parameters), based generic QoS parameter (see Fig. 3) are interpreted as follows:
QoSParameter  X  All identified QoS parameters are sub-classes of QoSParameter . The properties of this class may be mea-surable and may hold mutual relationships.

Metric  X  This class defines the way each QoS parameter is associated with a value. The association with the QoSParameter class occurs through the hasMetric object property. Each individual of this class has two associated datatype properties:
MetricType and Value . Furthermore, the hasUnit property binds the Metric class to the description of the associated mea-suring unit adopted to measure the identified QoSParameter .

QoSImpact  X  This class allows the representation of some indicators about the service quality perceived by the user on one particular QoSParameter value.

The main properties of the ontology classes are the following: service execution, dynamic otherwise. isAggregated  X  This relation expresses the binding between two or more quality parameters. hasRelationship  X  This property binds a quality parameter to a Relationship class describing the way the parameter is cor-related with the other parameters. Relationship can be categorized as Strong , Medium or Weak .
 whose meanings have been presented at the beginning of Section 2.1.

An analysis carried out on the selected quality parameters did not show any new property relation, however, the onto-logical representation using OWL allows the specialization of the definitions when needed. 2.1.3. Web-Service QoS contract the server, on the other side, we leverage on the concept of QoS Contract. A QoS Contract is stipulated between a service provider (server) and a service consumer (client) about a set of parameters.

Specifically, given a user i and a server S , a user contract UC R i S used to determine whether a QoS violation occurs.

Each operation provided by the server to the client has to adhere to the corresponding Contract, referring to the level of agreed Web-Service QoS.
 the contract owner to define his/her set of feasible values with respect to a fixed value stored in the contract. Table 2 shows an example of Contract. Formally:
This is useful to show that, through its rule portion R UC two subsets, S UC i S and NS UC i S respectively, the former being the set of Global QoS levels that also satisfy UC being the set of Global QoS levels that do not satisfy UC has to be managed, e.g., by raising a QoS fault, as illustrated later in the paper.
 For example, referring to C 1in Table 2 and in Table 3 for three measurements (for sake of simplicity reported as levels),
Meas.1 respects the contract because each measured value exactly adheres to the requested QoS levels, Meas.2 does not re-spect the contract because T.Resp value do not adhere to the corresponding requested QoS level, and Meas.3 respects the contract because each measured value is in the feasible set as defined in the contract rule (the Medium value for T.Resp is defined as acceptable in the contract rule).
 2.1.4. QoS prediction
In our approach, QoS faults can be predicted through a prediction model and a support framework based on monitoring and machine learning. Starting from the consideration that in the run-time environment the actual Global QoS varies, the
Global QoS is determined by observing (and then reacting to) a set of QoS parameter variations (for the prediction, we con-sider as Global QoS the tuple containing only the Web-Service quality parameters). Some regularities can emerge from the ple, the Global QoS on the same sequence of operations can change, and this regularity can be useful to determine the range time environment is available, behavioral models for the QoS can be obtained through the analysis of these data, looking for regularities, and hence predicting the Global QoS .

This objective can be achieved by using Machine Learning (ML) techniques [38] to provide suggestions on possible vari-tinction is between supervised and unsupervised learning techniques. Supervised machine learning requires a set of  X  X  X re-classified X  data. This means that each example is associated to a label expressing the category it belongs to. By observing long to that category. Unsupervised machine learning does not require a pre-classification step. These techniques generate groups of examples ( clusters ) that share common characteristics, on the basis of some  X  X  X istance X  measures.
Learning systems need a preliminary step aimed at defining a learning problem. The learning problem allows the defini-and operational, meaning that it should be applied to real examples. Information supplied to the ML system is a set of in-stances. Each instance is an example, single and independent, of the concept to learn.

In the following, we describe the main characteristics of the learning system developed in Quadrantis, referred to the QoS parameters defined for the Web-Service layer.

Fig. 5 shows a sample process used as a reference for defining the learning problem. A process instance uses the two ser-vices S 1 , S 2 , and invokes several operations (defined as O follows: Given an answer to a process operation S i . O i and given the current Global QoS Level Curr certain probability P globalQoS , the Global QoS Level globalQoS operation of S i .

Since the class of the examples we want to learn is known ( Global QoS Level), we can apply a supervised machine learning the following features: Service Name S , identifying the server providing the current operation.
 Operation Name O , identifying the current operation.
 Target Operation O Target , identifying the next operation upon which the QoS prediction will be performed.
Training examples provided to the classifier contain the input instance features together with the GlobalQoS observed on the target operation and are obtained by annotating the features values at run-time.
 the execution of the target operation is obtained. 2.2. QoS at the RTSP layer
In this section we illustrate in detail our approach to modelling the QoS of a multimedia stream. To this purpose, we have considered two classes of parameters, namely:
User-Related parameters . These express the needs and preferences of a user in accessing multimedia services. User-related parameters allow the evaluation of how relevant each component (i.e., video, audio and data) of the multimedia flow is to the user.
 Network-related parameters . The main goal of these parameters is to assess the amount of available network resources.
In order to handle both user-related and network-related parameters we adopt suitable user profiles . In this section, we first introduce some preliminary notions about both user modelling and user profile construction. Then, we propose a spe-cific user profile tailored to represent needs and preferences of a user accessing multimedia services. Finally, we describe how user-related parameters can be mapped onto network-related ones. 2.2.1. The concept of user profile
User modelling is the process of collecting information about user preferences, needs and behaviors in order to simplify and enhance the interaction between a software system and a user. The information gathered at the end of this process is stored in a suitable data structure called user profile .

The usage of profiles allows the preferences and needs of different users to be stored and the behavior of a software sys-(which can better cooperate with existing users and presumably optimize the management of available resources).
A user profile typically includes a user X  X  characterization in terms of age range, profession, and so on, and information logical traits.
 ests frequently changing and associated with a short time period.

There are many ways to represent user profiles. The simplest approach represents a user profile as a vector of pairs , each of the form h k i , w i i , where k i is a keyword identifying a user interest and w profiles are represented by means of a tree in which leaf nodes represent ephemeral interests whereas parent nodes are asso-
These approaches allow basic preferences to be combined in such a way as to infer new (and generally more refined) preferences.

In the literature several techniques have been proposed to construct user profiles. According to [21], they can be grouped into two main categories, namely:
Collaborative Approaches. These are based on the assumption that people belonging to the same  X  X  X roup X  (e.g., people living in the same town or belonging to the same education level) behave similarly and, thus, have similar profiles.
Content-Based Approaches. They assume that, if a user shows a particular behavior under a given set of circumstances, then he is likely to show analogous behavior in similar circumstances. 2.2.2. Exploitation of user profiles to handle multimedia services
In this section we describe the user profile we designed to manage user preferences/needs in accessing multimedia appli-cations. As previously pointed out, our profile handles both user-related and network-related parameters. User-related parameters are: Access Counter , denoting the number of times the user has accessed multimedia streaming services in the past.
Video Access Counter , Audio Access Counter , Data Access Counter , indicating the number of times the network has been accessed in the past by the user for video, audio or data downloading.

Video Degradation Counter , Audio Degradation Counter and Data Degradation Counter , representing the number of times the user decided to downgrade the video quality, the audio quality and the speed of data downloading, respectively. the past.

Average Chrominance , Average Luminance , Average Frame Rate required by the user; recall that Chrominance denotes the colors used to codify an image, Luminance is related to the brightness of an image while frame rate denotes the number of frames received per second.

Average Audio Channels , Average Audio Codex , Average Audio Frequency , representing the average number of channels, the average number of bits necessary to encode the audio signal, and the average sampling frequency required in an audio transmission, respectively.
 As for network-related parameters, we considered the following: Video Bandwidth , denoting the bandwidth assigned to video transmission.
 Audio Bandwidth , denoting the bandwidth assigned to audio transmission.
 Data Bandwidth , denoting the bandwidth available for downloading data.

A summary of all parameters is reported in Table 4 . In the construction of a user profile we dealt with two challenging issues.

The former concerns the large  X  X  X raining set X  (i.e., the large number of sessions) necessary to our system for both produc-ing a profile actually capable of describing user characteristics and predicting her/his future actions with a high accuracy degree. In this case, a mere content-based approach does not appear suitable because the time necessary to our system for correctly operating might become unacceptably long.
 The latter problem arises from the following situations that might cause changes in the user profile: ficients. As an example, a budget limitation might lead the user to require a decrease in the desired quality, thus implying changes in the setting of some coefficients of her/his profile.

Changes of the physical network status . Modifications of the physical network status could cause changes in user profile coefficients. As an example, suppose that the interference level in a wireless connection exploited by the user remains temporarily high for a reasonably long period of time, then the physical resources devoted to the user are reduced. In order to keep the connection alive, he could be obliged to decrease the quality of the transmission associated to each multimedia component, thus determining the update of the parameters of her/his profile.

As a consequence, a mere collaborative-filtering approach does not seem fully appropriate because it does not give the right relevance to past user history.

We applied a hybrid-strategy [10] to build and update user profiles. This strategy combines the collaborative-filtering and content-based profiles described in Section 2.2.1. Our hybrid-strategy acts in two phases: a new user is provided with a default profile determined by means of a collaborative-filtering technique; the default profile is  X  X  X mproved X  by means of a content-based technique.

The hybrid technique guarantees the immediate availability of a profile for each user. Then, along time, the system col-lects a large set of information and provides a more accurate description of user habits. 2.3. Mapping user-related parameters to network-related ones
As previously pointed out, network-related parameters and user-related parameters are inter-related. As an example, consider video transmission and: (i) let R x be the horizontal resolution of the transmitted flow, (ii) let R Video bandwidth B v is related to R x , R y , C , L and F by the following formula: Analogously, consider an audio transmission and let Ch be the number of audio channels, let Co be the audio codex and let Fr be the audio sampling rate; the bandwidth B a associated with the transmission of an audio stream is
An example of user profile is reported in Table 5 . 6 2.3.1. Ontology of RTSP QoS
The ontology designed to describe RTSP parameters ( streaming for short) was designed by examining some existing ontologies specifically aimed at representing multimedia objects. In particular, the ontology developed within the AMIGO project [27] was the closest to our goals. However, we deeply modified and customized it in such a way as to match some requirements of our reference scenario. The final ontology is sketched in Fig. 6 .

Our ontology introduced the concept of ProvidedObject class, which is a superclass able to describe each possible object that can be supplied by a Web-Service. Each ProvidedObject class is provided with a property hasPrice specifying the price required for delivering the corresponding multimedia object.
 A ProvidedObject class is specialized into a Streaming class describing the features of the multimedia flow delivered by a Web-Service.

The StreamingQualityParameter class represents the abstract concept of quality for a multimedia stream. This class is linked to the Streaming class through the hasStreamingQuality property. The class StreamingQualityParameter is specialized into three subclasses: AudioQuality class, assessing the quality of audio flow received by a user. It comprises the following subclasses: Sampling-
Frequency (for the audio signal sampling frequency), NumberOfChannels (for the number of channels used for coding audio signal) and AudioCodex (for the number of bits needed to encode an audio signal).
 resolution of a video image), Chrominance (describing the colors codification used for video image representation), Lumi-nance (describing the brightness of video image) and FrameRate (describing the number of video frames received per sec-ond by the user).

The notion of user profiles, as proposed in various contexts, such as mobility tracking and path prediction for networks, or even impossible, to establish a contract for all types of provisioning conditions, which mostly happen at run-time. While most studies have employed fixed allocation of a set of resources for profiled users, such approaches would lead to higher
QoS at the cost of low resource utilization. Some studies propose a more dynamic approach but do not provide a model for to decide whether a required QoS parameter can be respected or not and an adaptation mechanism that allows to adjust the parameters to prevent QoS violations. Note we do not speak of faults in the RTSP area but rather of disagreements w.r.t. ex-pected QoS, since we do not deal with Contracts (too fine grained). 2.4. Relationship between Web-Service and RTSP QoS models
In order to reach our aim of self-tuning streaming delivery, we consider that the object delivered by a Web-Service in our approach has a set of quality parameters on which usually the Web-Service (the object container) has no direct insight into, or control over. In our framework, a Contract is the formal agreement between collaborating entities regarding the Web-Ser-vice levels, potentially supporting parties (e.g., performing contract monitoring) in facing the Web-Service QoS faults. In-stead, when a QoS violation occurs at the streaming level, we aim at adjusting the streaming parameters on the basis of
RTSP Contracts. Hence, for example, a contract between Web-Services can contain descriptions of provided operations, adaptation, rather than through a whole set of recovery actions, to provide a soft mechanism to adhere to the user preferences. More precisely, the only mechanism we are currently providing to face streaming quality violations is to adjust ring again to the Contract. Consequently, all aspects of quality related to the ProvidedObject in the Ontology of Fig. 5 are explicitly and formally captured in the user profiles, in terms of user wishes, while the Web-Service quality is explicitly and formally represented in the Contract, in terms of conditions of provisioning that must be fulfilled. For the Web-Service part, contract fulfillment becomes the primary means of managing the composition of Web-Service and of the delivered ob-parameters of the streaming are subclasses of such object. While we provide recovery actions, such as the substitution of a faulty service with another one, recovery for streaming is only an adaptation to the user preferences and a run-time adjust-ment of the monitored Bandwidth.
 3. QoS monitoring model
This section introduces our monitoring model, presenting the characteristics that are necessary to actually give an imple-mentation thereof (some implementation hints are reported in the conclusions). 3.1. Web-Service layer monitoring
The monitoring functionality cover different purposes: (i) to check if the execution of the complex service correctly fol-the QoS of next operations for preventing QoS fault. Fig. 7 shows the framework way of working considering a single inter-action client X  X erver. 3.1.1. Choreography monitoring
As mentioned in the previous paragraphs, in a Web-Service choreography none of the involved services runs a central execution engine: each participant is only aware of its own status and does not own any global view encompassing all the involved services. Our proposal is to exploit the global perspective represented by the choreography specification by endowing the execution environment with a Choreography Monitor , able to track the progress of the complex service execu-tion with respect to the choreography specification (see also [5,39] ).
 The Choreography Monitor, relying on the notification messages received by each Web-Service (more precisely, by the
Message Handler of each Web-Service) and on the global choreography description, can track the progress of the complex service execution. Thus, it is able to detect possible mismatches between the order of message exchanges occurring during service execution against the order prescribed by the choreography. More precisely, the monitoring functionality is imple-mented by two logical components:
A central Choreography Monitor , implemented as a Web-Service, that uses the description of the global choreography to check the complex service execution, and that interacts with the services involved in the choreography through the Mes-sage Handlers (see Fig. 7 ).

Inbound/Outbound Message Handlers , implemented by all the Web-Services participating in the choreography, that (i) intercept inbound/outbound messages and notify their arrival/departure to the Monitor; (ii) expose a communication interface used by the Monitor to query services about their status.

The Web-Service starting a new instance of a choreographed service sends a message to the Monitor, which creates a new sage exchanges is detected, the Monitor raises a Choreography Fault Exception to the Recovery Manager(s) of the involved service(s); (see Fig. 7 ).
 3.1.2. QoS monitoring
QoS parameters are defined as an element of the context of each service operation. The different modules involved in QoS monitoring are shown in Fig. 7 .

The context has to be identified when a message is leaving an actor, and has to be controlled when a message reaches an it reports to the Recovery Manager.

Each node in the Quadrantis model is associated with a (local) Service Manager . This is a (local) Web-Service in charge of managing the local context, that is, of computing the values of the QoS parameters when requested. The interaction with the Context Service is performed by Context Handlers (see Fig. 7 ) attached to the application. Context
Handlers can be inbound or outbound: outbound handlers are in charge of forwarding the context by encapsulating the con-incoming QoS values and maps them onto the corresponding QoS levels. Then, it checks whether the Global QoS level respects QoS Fault Exception towards the Recovery Manager that undertakes proper recovery steps. The Controller can also ask the QoS
Predictor to perform a QoS prediction. 3.1.3. QoS prediction system
The way the QoS prediction system builds the prediction is described in Section 2.1.4. In details, the Web-Service has two interfaces, namely: (1) getClassificator ( TrainingSet ), that builds a classifier from the given training set.
Both TrainingSet and Instance are serialized as XML objects. Every training set instance is formed by the values for the input instance features together with the value of the GlobalQoS observed on the target operation. possible to ask more than one prediction at the same time. This characteristic is needed when the process workflow has choice constructs. In this case, the process manager needs to know the prediction for every branch of the construct with a certain probability that it is used to discriminate between them. Furthermore, the process manager already keeps proper information about a probability over both paths. This information is sent to the prediction service which then normalizes it based on the precision of the classifier.

Table 6 shows an example of input to the QoS prediction system (referred to the process of Fig. 5 ), assuming the proba-bility that O 3 be included in P Path 1 and P Path 1 be = 75% and that O forwardly that the path probability is 1 when the request concerns a single future operation.

The output of the QoS prediction system will be the identification of which QoS Level GlobalQoS ability P globalQoS ) identifies the Curr QoS S output of the QoS prediction system, related with the above input instance. Since a choice construct is present, the output provides the path probabilities computed as P path j P globalQoS next operation of S 1 is GlobalQoS 4 with 55% of probability and GlobalQoS 3.2. Monitoring at the RTSP layer
In this section, we describe how our approach monitors the bandwidth QoS parameter for RTSP. In fact, the issue of mon-video, IPTV, VoIP and so on). Specifically, the knowledge of the bandwidth available on each link of the network allows the bottleneck link to be detected. This activity is essential for regulating and improving the QoS associated with a streaming application.

In the latest years, many approaches have been proposed to estimate the bandwidth available for a service containing a multimedia component; some of these techniques rely on the definition of suitable mathematical models capable of describ-ing packets X , namely specific packets which are transferred over the network at a fixed rate. The techniques based on the methodology of the probing packets allow the estimation of the available bandwidth starting from the packet transmission rate.

We propose a technique belonging to the category of probing packets, and, in particular, belonging to the class named one-way-delay .

Let S be an information source delivering a multimedia flow and let R be a user receiving it; let us also assume that the sender forward K equally-sized packets to the receiver.

We assume that both S and R are two nodes of a computer network connected through a path P such that the capacity of each edge of this path is C i ; finally, let us assume that the number of hops composing the path P be H .
The time required for transferring a packet from S to R depends on the following terms: (i) The time required by the pack-ing delay in each intermediate node.
 term D D will be a positive number.

We can use this result to design an algorithm capable of effectively determining the bandwidth across the path P [16]. The algorithm uses two support variables: R min (which is initially set equal to 0) and R forms a loop. At the n th iteration, the following activities are made: (1) The sender emits packets at a rate equal to R n . (2) The receiver analyzes the packet delay. If the delay is positive, then the sender updates its probing rate to a value R the algorithm converges in O  X  log 2  X  R 0 max 2  X  X  steps where R 3.3. Relationship between Web-Service and RTSP layers
The monitoring model of each layer follows its own peculiarity due to its nature (e.g., the Web-Service interaction is dis-crete while the streaming interaction is continuous). Their interaction between them relies on the possibility for the Web-node erogating the streaming includes:
The operation necessary to refer to the user profile (in case a profile update is needed because of changes during the streaming).
 is worth noting that this modification can derive from different actors (having the correct privileges to perform this operation) involved in the Business Process.
 The operation which notifies the Web-Service layer of the QoS of the streaming flow.

According to this model, the RTSP layer can be viewed as partially controlled by the Web-Service layer. Such control de-rives from the consideration that the streaming is just one part of a more complex process and that the Web-Service layer is aware of more information about QoS and choreography than the single element providing the streaming. 4. Reaction and adaptation to QoS faults
This section explains how the proposed models deal with the adaptive issues and the reaction to QoS faults. In particular, we describe the reaction to QoS faults in the Web-Service layer and the adaptation in the RTSP layer. 4.1. Reacting to QoS faults at the Web-Service layer
The recovery functionality can be activated to react to a Choreography fault, a QoS fault or a prediction of a QoS fault. 4.1.1. Reacting to choreography faults
In the simplest case, if a problem in a message exchange occurs, the Choreography Monitor can notify all the involved to the Monitor. Moreover, the Choreography Monitor can be aware of both the status of each single service and of the pro-gress of the global complex service execution. Thanks to this knowledge, it can suggest different reactions to a particular vice affected by the fault is necessary for the correct termination of the service. 4.1.2. Reacting to QoS faults
A QoS fault exists when the Controller , checking if the QoS Contract between the process and an external Web-Service is the re-execution of the operation for getting an answer respecting the Contract. In a more complex scenario, where many instances are concurrently running and the control of the external Web-Services is available, it is possible to reconfigure the Web-Service choreography trying to respect the Contracts. For a complete description of the recovery aspects in a
Web-Service-based business process, the interested reader is referred to [15,25,24,31] . 4.1.3. Reacting to predicted QoS faults
A different scenario occurs when the QoS fault does not exist currently, but is predicted with a certain probability for the next operation of the same service. As explained in the previous sections, this knowledge in the Quadrantis model is avail-to a predicted QoS fault.
 probability of QoS fault is really high, this could be a good solution.
 4.1.4. Reacting to QoS faults at the RTSP layer
The RTSP layer has its own adaptation policies, presented in detail in the next section. In this section, we describe what Recovery Manager can simply suspend the streaming provisioning waiting for better conditions, or can throw the fault to the
Recovery Manager associated with the node which requested the streaming. In the latter case, the streaming node is declaring the problem can be treated as a traditional Web-Service layer problem. 4.2. Adaptation of QoS in the RTSP layer
In this section we describe how QoS can be adapted at the RTSP layer. The adaptation process is mainly driven by user profiles; specifically, the information in each user profile is exploited to determine those multimedia components appearing nents should be handle with a good quality and which of them could be more  X  X  X afely X  degraded. In this way, the system resource distribution policy becomes  X  X  X ser adaptive X , i.e., it always tries to obtain user satisfaction. Our approach to adapting QoS in RTSP layer consists of two main phases. Firstly, it defines a linear optimization problem. video component is more relevant than the audio one for a particular user). Our approach solves this optimization problem and determines the new values  X  B v ; B a ; B d  X  of video, audio, and data bandwidth.

Once the optimal video, audio, and data bandwidth distribution has been computed, our approach determines the com-bination of QoS streaming parameters that maximize the QoS perceived by the user under the current bandwidth availabil-bandwidth; the various parameters presumably have different importance for the user and, consequently, different QoS val-ues could be obtained with the same video (resp., audio, data) bandwidth.

For this reason, our approach considers the average values of the various parameters required by the user in her/his pro-file, and derives some weights to be used in a further optimization problem aimed to maximize the value of an ad hoc defined index D S measuring the satisfaction degree of the user. D horizontal resolution or luminance) are close to the corresponding maximum and minimum values specified by the user. In details concerning the definition of the two optimization problems, along with the analytical procedures for solving them.
The first optimization problem is solved by the well-known simplex method [12], whose worst case computational com-plexity is O(2 n ), where n denotes the number of variables associated with the function to be optimized. A polynomial solu-tion of the LP problem, known as the Karmarkar X  X  method is illustrated in [17]; such an approach requires O( n only occasionally superior to the simplex in real cases; therefore, in our system, we have exploited this latter method.
The second optimization problem aims to optimize a quadratic function defined on a compact set, i.e., on a closed and bounded set; this problem is usually solved by means of iterative methods, such as the Penalty Method ( PM ) or the Gradient
Projection Method ( GPM ) [8]. 4.3. Relationship between the two layers
Since the Web-Service and RTSP layers are characterized by many differences, as illustrated so far, their interaction is the node providing the streaming object simply throws the fault to the Web-Service layer. This is managed in our model through an interaction with the Recovery Manager that can then implement specific recovery actions in a stand-alone mode, or by involving the analogous modules of other nodes.

At the Web-Service layer, the recovery actions can concern the node which is providing the streaming object, considering modification of the streaming QoS parameters. In the latter case the streaming parameters are adjusted according to the cur-the streaming is available only for those external nodes holding the privilege enabling them to perform such actions. For instance, if several recovery actions being performed involve the user, it is preferable to temporarily stop the video and resuming it once the interaction is completed.

According to our models, most of the knowledge is in the Web-Service layer, and hence our recovery/adaptation scenario adopts the loosely-coupled approach whenever possible; when such policy is no longer applicable, the Web-Service layer acts as a master and the RTSP layer as slave. 5. Related work
Self-healing systems are considered in Autonomic Computing [19] as systems capable of self-management, and in advocates the need of extending the Service Oriented approach considering service management. Several approaches have been proposed in the composed services and workflows systems areas to provide adaptive mechanisms in particular for such process-based systems. In Mosaic [6] a framework is proposed for modelling, analyzing, and managing service models, focus-ing on systems design. Meteor-S [11] and other semantic-based approaches, such as WSMO where a general framework for supporting self-*properties in composed Web-Services is advocated. Other proposals tackle sin-terms of QoS optimization and reconfiguration. The approach proposed in the WS-DIAMOND project ture provided by PAWS (Processes with Adaptive Web-Services ) [3], a framework and toolkit for designing adaptable services, defining QoS agreements, and optimizing at run-time service selection, substitution, and adaptation.
QoS has been the topic of several researches efforts crossing distinct communities, in particular the Web and Web-Service community [18,32] and the networking and internetworking communities. The highly fluctuating radio channel conditions, nelinformationsystems.Theirproposalincludestheconceptofserviceprovidercommunitiesasabasisforahomogeneousdef-emerging for highly distributed processes is execution monitoring. Mechanisms for automatically augmenting processes with erogeneous environment such as Internet. A methodological approach is needed to design all aspects of such systems, focusing on exception handling and compensation mechanisms [29]. In the MAIS project, adaptive Web-based process execution is basedonflexibleservices,consideringservicesimilarityandQoS,andrun-timeservicesubstitutionmechanisms [31].Extended such non-functional aspects as QoS descriptions, monitoring information, repair options in case of failure, and so on.
In [22] a multi-agent system, capable of dynamically and adaptively managing the QoS in a radio-mobile environment, is proposed. The proposed system stores past user behaviors to deduce if a certain typology of connection is preferable w.r.t. some other ones.

Both our system and that described in [22] propose an adaptive platform for the QoS management and handle user pref-erences for making decisions on resource allocation, de-allocation and reservation. As for the main differences, we observe that our system manages both network and user information for constructing an optimization problem allowing the optimal resource distribution to be determined. On the contrary, the approach of [22] improves the resource exploitation by means of an interesting communication protocol named MTP (Message Transfer Protocol); this guarantees a better performance w.r.t. a classical communication protocol specifically conceived for a wireless environment; however, it needs a significant amount of resources to ensure a reliable communication among its agents. In addition, differently from our approach, the approach proposed in [22] is not able to separately handle video, audio and data bandwidths.

Trzec and Huljenic [35] propose a multi-agent system for QoS Management. The proposed system is multi-layer: the var-incompatible w.r.t. user specifications and, finally, define the mapping between the parameters of QoS at the user level and ular, both: (i) define a dynamic and adaptive protocol for QoS Management; (ii) define a mapping between the user-level and eters by means of a suitable interface. The human intervention is also necessary when a change in user preferences/needs oc-curs, since the planning engine does not include any mechanism for unobtrusively revising the user profiles.
In [14] an adaptive and proactive technique for network management is proposed. The authors exploit various agents dis-tributed on the nodes of a network, which cooperate to construct a global view of the network status. The excerpted infor-mation is collected and elaborated in order to maximize network performance.
 Both the approach of [14] and our approach are adaptive, dynamic and automatic; in addition, both of them are generic.
The main differences are that the approach proposed in [14] cannot separately manage video, audio and data bandwidths, and that it does not take the user behavior into account.

Nygren et al. [26] introduce a multi-agent system for managing  X  X  X edia on Demand X  services. The purposes of this system capable of distinguishing between the video, audio and data components in information transmission; in addition, it exploits a sort of  X  X  X daptive profiles X  for managing user preferences. Finally, both the two systems are able to manage generic tele-communication networks.

In [9], a multi-agent system for resource handling in a mobile network is proposed. Compared to our system, the proposal contained in Ref. [9] exploits optimization algorithms for distributing available resources. However, while our system can operate on various kinds of telecommunications networks, the system described in [9] is specialized for cellular networks and implements ad hoc algorithms for this application context. In addition, it is worth noticing that in our approach QoS is optimized through user profiles whereas, in [9], QoS management is performed through an intelligent control technique work, the number of users within each cell, and so on) and does not consider user preferences.

Verscheure et al. [37] present a system for optimization of the quality perceived by a human user. The main similarities with our approach can be summarized as the following: (i) both aim at relating QoS parameters to human perception; (ii) both aim at maximizing the QoS perceived by the user; (iii) both dynamically manage video, audio and data flows. However, in [37], QoS optimization is achieved by means of sophisticated techniques (e.g., adaptive quantization algorithms, hierar-chical encoding and so on) while our approach exploits user profiles for QoS optimization. 6. Discussion and concluding remarks
This paper has presented an approach to a combined handling of QoS of Web-Services and of the streaming content deliv-ered through the Web-Services-based process. We have discussed how we model and monitor both the quality parameters of the service delivering the content (e.g., response time, price, or availability) and the parameters that characterize the delivered object, which is in particular a streaming content, whose quality parameters are, for example, the bandwidth and the frame rate.
 The two measurements are combined using a common description based ontologies for Web-Service and for streaming.
The control of QoS violations, obtained via a monitoring and prediction approach, is applied at both levels; moreover, an approach to repair from QoS faults through a combined application of recovery actions at the Web-Services level, and an adaptation approach at the RTSP level, aimed at adjusting the QoS level of the delivery, have been illustrated.
A number of issues are still open in our proposal. In the following we summarize the basic points we are currently ana-lyzing and the future work. 6.1. Role of QoS contracts
One possible enhancement to the presented approach regards the role of QoS Contract. QoS contracts between a client and a server concern the quality of all operations provided by a server. Usually, the client of the process has no knowledge tracts between the process and the external Web-Services. This translation can be very complex. The simplest translation applies the contract between the server and the end-user to all the contracts between the server and the external Web-Ser-vices. This solution is the more conservative, but probably it is not the best one because it does not take into account the specific characteristics of the external services.
 A more advanced translation is based also on considerations about the past behavior (concerning the QoS) of an external end-user. This solution is based on a knowledge base that has to be built for providing these information. It is also possible not to stipulate any contract with Web-Services if they do not support contracts or if it is not useful.
The more complex, and probably efficient, translation of a contract in several contracts has to consider the topology of the the process is a simple sequence composed of an invocation of a Service S ( S relax, or in the dual case to pose more restrictions on, the QoS constraints. 6.2. Thorough evaluation of the approach
In order to test the approach we have developed a prototype software architecture composed of one module for each of the QoS aspects presented in the paper. The Quadrantis architecture is composed of a set of nodes cooperating to provide a complex service (based on a business process). To support monitoring, fault detection, and recovery, they need specific fea-tures: the minimal feature requested to consider a node as active is that it support monitoring and expose a management and recovery, and considered as black boxes.

The architecture model considers a business scenario where several services are simultaneously Providers of Real Time content. Process management is composed of the two distinct communication layers: one for Web-Services interaction and one for streaming content provisioning.

The heterogeneity of used protocols and the deficiency of the SOAP protocol for delivering streaming services, lead us to QoS, the architecture supports information exchange between the two layers for reacting to QoS fault.
Currently, the choreography monitoring tool of Quadrantis exploits the WS-Coordination protocol,
Web-Service Coordinator with the Web-Service Monitor.
QoS parameters are defined as the element of the context of each service operation and are managed according to the context across multiple execution endpoints.

In future work, a more extended architecture implementation is planned, in order to combine the different modules, each be evaluated in combination.

References
