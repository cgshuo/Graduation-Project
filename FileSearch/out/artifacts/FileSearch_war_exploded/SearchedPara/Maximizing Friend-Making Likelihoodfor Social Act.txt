 Chih-Ya Shen 1( With the popularity and accessibility of online social networks (OSNs), e.g., Facebook, Meetup, and Skout 1 , more and more people initiate friend gatherings or group activities via these OSNs. For example, more than 16 millions of events are created on Facebook each month to organize various kinds of activities and more than 500 thousands of face-to-face activities are initiated in Meetup The activities organized via OSNs cover a wide variety of purposes, e.g., friend gatherings, cocktail parties, concerts, and marathon events. The wide spectrum of these activities shows that OSNs have been widely used as a convenient means for initiating real-life activities among friends. On the other hand, to help users expand their circles of friends in the cyberspace, friend recommendation services have been provided in OSNs to sug-gest candidates to users who may likely become mutual friends in the future. Many friend recommendation services employ link prediction algorithms, e.g., [ 10 , 11 ], to analyze the features, similarity or interaction patterns of users in order to derive potential future friendship between some users. By leveraging the abundant information in OSNs, link prediction algorithms show high accu-racy for recommending online friends in OSNs.
 As social presence theory [ 16 ] in social psychology suggests, computer-mediated making activities may be favorable to their on-line counterparts in cyberspace. Therefore, in this paper, we consider the scenarios of organizing face-to-face friend-making activities via OSN services. Notice that finding socially cohesive groups of participants is essential for maintaining good atmosphere for the activity. More-over, the function of making new friends is also an important factor for the success of social activities, e.g., assigning excursion groups in conferences, inviting attendees to housewarming parties, etc. Thus, for organizing friend-making social activities, both activity organization and friend recommendation services are fundamental. However, there is a gap between existing activity organization and friend recom-mendation services in OSNs for the scenarios under consideration. Existing activity organization approaches focus on extracting socially cohesive groups from OSNs based on certain cohesive measures, density, diameter, of social networks or other other hand, friend recommendation services consider only the existing friendships to recommend potential new friends for an individual (rather than finding a group of people for engaging friend-making). We argue that in addition to themes of com-mon interests, it is desirable to organize friend-making activities by mixing the  X  X otential friends X , who may be interested in knowing each other (as indicated by a link prediction algorithm), with existing friends (as lubricators). To the best knowl-edge of the authors, the following two important factors, 1) the existing friendship among attendees, and 2) the potential friendship among attendees, have not been considered simultaneously in existing activity organization services. To bridge the gap, it is desirable to propose a new activity organization service that carefully addresses these two factors at the same time.
 In this paper, we aim to investigate the problem of selecting a set of can-didate attendees from the OSN by considering both the existing and potential friendships among the attendees. To capture the two factors for activity organi-zation, we propose to include the likelihood of making new friends in the social network. As such, we formulate a new research problem to find groups with tight social relationships among existing friends and potential friends (i.e., who are not friends yet). Specifically, we model the social network in the OSN as a heterogeneous social graph G =( V, E, R ) with edge weight w : R where V is the set of individuals, E is the set of friend edges ,and R is the set of potential friend edges (or potential edges for short). Here a friend edge ( u, v ) denotes that individuals u and v are mutual friends, while a potential edge [ u ,v ] indicates that individuals u and v are likely to become friends (the edge weight w [ u ,v ] quantifies the likelihood). The potential edges and the corresponding edge weights can be obtained by employing a link prediction algorithm in friend recommendation.
 formulate a new problem, namely, Hop-bounded Maximum Group Friending (HMGF) , to find a group that 1) maximizes the likelihood of making new friends among the group, i.e., the group has the highest ratio of total potential edge weight to group size, 2) ensures that the social tightness, i.e., hop count on friend edges in G between each pair of individuals is small, and 3) is a suffi-ciently large group, i.e., too small a group may not work well for socialization activities.
 Figure 1(a) shows a social graph, where a dash line, e.g., [ a, b ] with weight 0.6, is a potential edge and a solid line, e.g., ( c, d ), is a friend edge. Figure 1(b) shows agroup H 1 : { a, e, f, g } which has many potential edges and thus a high total weight. However, not all the members of this group have common friends as social lubricators. Figure 1(c) shows a group H 2 : { c, d, f, g friend edges. While H 2 may be a good choice for gathering of close friends, the goal of friend-making in socialization activities is missed. Finally, Figure 1(d) shows H 3 : { d, e, f, g } which is a better choice than H activities because each member of H 3 is within 2 hops of another member via friend edges in G . Moreover, the average potential edge weight among them is high, indicating members are likely to make some new friends.
 are many important factors to consider, including hop constraint, group size and the total weight of potential edges in a group. Indeed, we prove that HMGF is an NP-Hard problem with no approximation algorithm. Nevertheless, we prove that if the hop constraint can be slightly relaxed to allow a small error, there exists a 3-approximation algorithm for HMGF. Theoretical analysis and empirical results show that our algorithm can obtain good solutions efficiently.
  X  For socialization activity organization, we propose to model the existing the first problem that considers these two important relationships between attendees for activity organization.  X  We prove that HMGF is NP-Hard and there exists no approximation algo-rithm for HMGF unless P = NP . We then propose an approximation algo-rithm, called MaxGF, with a guaranteed error bound for solving HMGF efficiently.  X  We conduct a user study on 50 users to validate our argument for consider-ing both existing and potential friendships in activity organization. We also perform extensive experiments on real datasets to evaluate the proposed algorithm. Experimental results manifest that HMGF can obtain solutions very close to the optimal ones, very efficiently.
 The rest of this paper is organized as follows. Section 2 formulates HMGF and proves it NP-Hard with no approximation algorithm. Section 3 reviews the related works, and Section 4 details the algorithm design. Section 5 reports a user study and experimental results. Section 6 concludes this paper. Based on the description of heterogeneous social graph described earlier, here we formulate the Hop-bounded Maximum Group Friending (HMGF) tackled in this paper. Given two individuals u and v ,let d E G ( u, v ) be the shortest path between u and v via friend edges in G . Moreover, given H  X  G ,let w ( H ) denote the total weight of potential edges in H and let average weight ,  X  ( H )= average weight of potential edges connected to each individual in H formulated as follows.
 Problem: Hop-bounded Maximum Group Friending (HMGF).
 Given: Social network G =( V, E, R ), hop constraint h , and size constraint p . Objective: Find an induced subgraph H  X  G with the maximum  X  ( H ), where |
H | X  p and d E G ( u, v )  X  h,  X  u, v  X  H .
 Efficient processing of HMGF is very challenging due to the following reasons: 1) The interplay of the total weight w ( H ) and the size of H . To maximize  X  ( H ), finding a small H may not be a good choice because the number of edges in a small graph tends to be small as well. On the other hand, finding a large H (which usually has a high w ( H )) may not lead to an acceptable  X  ( H ), either. Therefore, the key is to strike a good balance between the graph size total weight w ( H ). 2) HMGF includes a hop constraint (say h = 2) on friend edges to ensure that every pair of individuals is not too distant socially from each other. However, selecting a potential edge [ u, v ] with a large weight w [ u, v ] may not necessarily satisfy the hop constraint, i.e., d E based on existing friend edges. In this case, it may not always be a good strategy to prioritize on large-weight edges in order to maximize  X  ( H ), especially when u and v do not share a common friend nearby via the friend edges. within any factor. In other words, there exists no approximation algorithm for HMGF.
 Theorem 1. HMGF is NP-Hard and there is no approximation algorithm for HMGF unless P = NP .
 Proof. Due to the space constraints, we prove this theorem in the full version of this paper (available online [ 1 ]).
 Nevertheless, we show that HMGF becomes approximable if a small error h is allowed in the hop constraint. More specifically, in Section 4 , we first propose an error-bounded approximation algorithm for HMGF, which returns a solution with guaranteed  X  ( H ), while d E G ( u, v ) for any two vertices u and v in H may exceed h but is always bounded by 2 h . Afterward, we present a post-processing procedure to tailor the solution for satisfying the hop constraint. Extracting dense subgraphs or social cohesive groups among social networks is a natural way for selecting a set of close friends for a gathering. Various social cohesive measures have been proposed for finding dense social subgraphs, e.g., sive measures cover a wide range of application scenarios, they focus on deriv-ing groups based only on existing friendship in the social network. In contrast, the HMGF studied in this paper aims to extract groups by considering both the existing and potential friendships for socialization activities. Therefore, the existing works mentioned above cannot be directly applied to HMGF tackled in this paper.
 ness among existing friends [ 5  X  9 ] have been reported in the literature. Social-Temporal Group Query [ 5 ] checks the available times of attendees to find the social cohesive group with the most suitable activity time. Geo-Social Group Query [ 6 , 7 ] extracts socially tight groups while considering certain spatial prop-erties. The willingness optimization for social group problem in [ 8 ] selects a set of attendees for an activity while maximizing their willingness to participate. Finally, [ 9 ] finds a set of compatible members with tight social relationships in the collaboration network. Although these works find suitable attendees for activities based on existing friendship among the attendees, they ignore the like-lihood of making new friends among the attendees. Therefore, these works may not be suitable for socialization activities discussed in this paper. individuals in order to recommend possible friends to the users [ 10  X  14 ]. Link pre-diction algorithms employ different approaches including graph-topological fea-tures, classification models, hierarchical probabilistic model, and linear algebraic methods. These works show good prediction accuracy for friend recommendation in social networks. In this paper, to estimate the likelihood of how individuals may potentially become friends in the future, we employ link prediction algorithms for deriving the potential edges among the individuals.
 To the best knowledge of the authors, there exists no algorithm for activity organization that considers both the existing friendship and the likelihood of making new friends when selecting activity attendees. The HMGF studied in this paper examines the social tightness among existing friends and the likelihood of becoming friends for non-friend attendees. We envisage that our research result can be employed in various social network applications for activity organization. 4.1 Algorithm Description To tackle HMGF, a naive approach is to enumerate all possible combinations of vertices, and extracts the subgraph H with the maximum  X  ( H ) following the hop and group size constraints. However, this approach is computationally expensive and thus not applicable for a large-scale social network. To efficiently answer HMGF, we propose an algorithm, called MaxGF , which is a 3-approximation algorithm with a guaranteed error bound h . MaxGF limits the search space of candidate solutions by dividing the graph into different hop-bounded subgraphs such that their sizes are much smaller than | V | . Then, it employs a greedy app-roach on the hop-bounded subgraphs to iteratively remove the vertices that are inclined to generate a small  X  ( H ). Specifically, we define the incident weight of a vertex v in an induced subgraph H  X  G as  X  H ( v ), where  X  i.e., the incident weight of v is the total weight of the potential edges incident to v in H . By carefully examining the incident weights of the vertices, we can remove from the hop-bounded subgraph those vertices that contribute no gain in the objective function. Moreover, we propose an effective pruning strategy for trimming redundant search. Finally, a post-processing procedure is proposed to ensure that the returned solution follows the hop constraint.
 The pseudo code of MaxGF is presented in Algorithm 1. Basically, to obtain the hop-bounded subgraphs, MaxGF sorts the vertices in terms of their incident weights and iteratively selects a vertex v with the maximum incident weight from G as a reference vertex. A hop-bounded subgraph H v is constructed from v by including every vertex u with at most h hops from v on the friend edges, i.e., H v = { u | d E G ( u, v )  X  h } . Moreover, if | H examine H v because any subgraph in H v will never be a feasible solution due to the size constraint. Therefore, redundant search space is effectively pruned. In addition, another pruning condition is also proposed to further prune the resulted subgraph H v .Let S AP X denote the best solution obtained so far. If half of the maximum incident weight among the vertices u in H max u  X  H v  X  H v ( u ), does not exceed  X  ( S AP X ), there will never be any solution Algorithm 1. MaxGF better than  X  ( S AP X )in H v . The reason is that the average weight  X  ( H )ofany subgraph H  X  H v must satisfy the following inequality, H v with the average weight larger than  X  ( S AP X ), and H weight, which includes | H v | steps. Let S i +1 denote the subgraph after removing avertex X  v i from S i in step i . That is, we set S 1 = H afterwards, S i +1 is the subgraph S i  X  X   X  v i } . During each step i , X  v vertex which has the lowest incident weight in S i , i.e.,  X  v This is based on the intuition that excluding vertices with low incident weights is more inclined to increase the average weight of the the remaining subgraph. Then,  X  v i and its incident potential edges are removed from S graph is S i +1 . Then, S i +1 is processed in the next step i +1. The above procedure ends until S i is empty.
 graph H v is processed, S  X  v is extracted as the subgraph S  X  ( S i )in H v where | S i | X  p .If  X  ( S  X  v ) &gt; X  ( S Then, we continue to extract the next vertex v for examining the corresponding hop-bounded subgraph H v until all vertices have been examined. Afterward, a post-processing procedure (detailed in Section 4.3 ) is employed on the best solution obtained in the algorithm, i.e., S AP X , to ensure that the hop constraint is satisfied and to further maximize  X  ( S AP X ). Finally, S solution. 4.2 Theoretical Bound In the following, given the hop-bounded subgraph H v , we first prove that there exists a subgraph F  X  H v such that 3  X  w ( F ) is an upper bound of the total potential edge weight of the optimal solution to the HMGF instance on H Then, we prove that for each H v , the average weight of S of HMGF on H v . Finally, based on the properties of the hop-bounded subgraph and S
AP X , we prove that the proposed algorithm is a 3-approximation algorithm with guaranteed error bound to HMGF.
 Let S OP T v denote the optimal solution of the HMGF instance on H  X  ( S v ) &gt; 0, we first prove that the largest subgraph F in H  X  ( S v ),  X  u  X  F , is not an empty graph.
 Lemma 1. The largest subgraph F  X  H v ,where  X  F ( u )  X  2 is not an empty graph.
 Proof. The proof is presented in the online version [ 1 ].
 With the existence of F proven above, we now derive an upper bound of the total potential edge weight of S OP T v , i.e., w ( S OP T Lemma 2. w ( S OP T v ) is upper bounded by 3  X  w ( F ) , i.e., 3 Proof. The proof is presented in the online version [ 1 ].
 Then, with the properties derived above, we turn our attention to analyzing MaxGF proposed in this section. In MaxGF, given H v and when we are itera-tively extracting  X  v i which has the minimum incident weight in S first extracted vertex such that  X  v i  X  F (i.e., step i is the earliest step such that  X  v  X  F ), then we have the following lemma.
 Lemma 3. Given H v in MaxGF, if step i is the earliest step where the extracted  X  v from S i is in F , then  X  S i ( u )  X  2 3  X  ( S OP T v ) , Proof. The proof is presented in the online version [ 1 ].
 We combine the results obtained above, and derive the bound on  X  ( S S is the group S i which has the maximum  X  ( S i ) among all S obtained by MaxGF in H v . Please note that Lemma 3 proves that during the steps of extracting  X  v i from S i , there exists  X  v i with  X  Theorem 2. Given H v in MaxGF, let i be the earliest step such that  X  v  X  ( X  v Proof. The proof is presented in the online version [ 1 ].
 Finally, let S OP T denote the optimal solution of HMGF on G , the following theorem proves that the solution obtained by MaxGF, i.e., S at least 1 3  X   X  ( S OP T ), and the error is bounded by h .
 Theorem 3. MaxGF returns the solution S AP X with  X  ( S AP X d ( u, v )  X  2  X  h ,  X  u, v  X  S AP X .
 Proof. The proof is presented in the online version [ 1 ]. 4.3 Post Processing and Time Complexity A post-processing procedure is designed to tailor S AP X for meeting the hop constraint and further maximizing the average weight. More specifically, given S AP X obtained in the algorithm, we first define the notion of boundary vertices . A vertex u in S AP X is a boundary vertex if there exists at least one other vertex v in S AP X such that the shortest path from u to v via friend edges contains more than h edges. Let B denote the set of boundary vertices. MaxGF includes the following adjustment steps in the post-processing procedure. 1) Expand: a vertex v  X  ( V \ S AP X ) can be added into S AP X if adding v does not increase increases  X  ( S AP X ). We give priority to the v which maximizes  X  ( S Shrink: given a boundary vertex u  X  B , u can be safely removed if after removing maximizes  X  ( S AP X  X  X  u } ). Please note that the above post-processing procedure minimizes max u,v  X  S AP X d E G ( u, v ) while increasing  X  ( S processing, the performance and error bounds in Theorem 3 still hold. Time Complexity. The time complexity of MaxGF is O ( | V | The detailed analysis is presented in the online version of this paper [ 1 ]. We implement HMGF in Facebook and invite 50 users to participate in our user study. Each user, given 12 test cases of HMGF using her friends in Facebook as the input graph, is asked to solve the HMGF cases, and compare her results with the solutions obtained by MaxGF. In addition to the user study, we evaluate the performance of MaxGF on two real social network datasets, i.e., FB [ 15 ]and the MS dataset from KDD Cup 2013 5 . The FB dataset is extracted from Face-book with 90K vertices, and MS is a co-author network with 1.7M vertices. We extract the friend edges from these datasets and identify the potential edges with a link prediction algorithm [ 11 ]. The weight of a potential edge is ranged within (0,1]. Moreover, we compare MaxGF with two algorithms, namely, Baseline and DkS [ 3 ]. Baseline finds the optimal solution of HMGF by enumerating all the subgraphs satisfying the constraints, while DkS is an O ( algorithm for finding a p -vertex subgraph H  X  G with the maximum density on E  X  R without considering the potential edges and the hop constraint. The algorithms are implemented in an IBM 3650 server with Quadcore Intel X5450 3.0 GHz CPUs. We measure 30 samples in each scenario. In the following, Fea-Ratio and ObjRatio respectively denote the ratio of feasibility (i.e., the portion of solutions satisfying the hop constraint) and the ratio of  X  ( H ) in the solutions obtained by MaxGF or DkS to that of the optimal solution. 5.1 User Study Figure 2 presents the results of the user study. Figure 2(a) compares the required time for users and MaxGF to solve the HMGF instances. Users need much more time than MaxGF due to challenges brought by the hop constraint and tradeoffs in potential edge weights and the group size, as explained in Section 2 .As or h grows, users need more time because the HMGF cases become more com-plicated. Figure 2(b) compares the solution feasibility and quality among users and MaxGF. We employ Baseline to obtain the optimal solutions and derive FeaRatio and ObjRatio accordingly. The FeaRatio and ObjRatio of users are low because simultaneously considering both the hop constraint on friend edges and total weights on potential edges is difficult for users. As shown, users X  Fea-Ratio and ObjRatio drop when | V | increases. By contrast, MaxGF obtains the solutions with high FeaRatio and ObjRatio. In Figure 2(c) , we ask each user to compare her solutions with the solutions obtained by MaxGF and DkS, to validate the effectiveness of HMGF. 74% of the users agree that the solution of MaxGF is the best because HMGF maximizes the likelihood of friend-making while considering the hop constraint on friend edges at the same time. By con-trast, DkS finds the solutions with a large number of edges, but it does not differentiate the friend edges and potential edges. Therefore, users believe that the selected individuals may not be able to socialize with each other effectively. 5.2 Performance Evaluation Baseline can only find the optimal solutions of small HMGF cases since it enumer-ates all possible solutions. Therefore, we first compare MaxGF against Baseline and DkS on small graphs randomly extracted from FB. Figure 3(a) compares the execution time of the algorithms by varying the size of input graph. Since Baseline enumerates all the subgraphs H with | H | X  p , the execution time grows exponen-tially. The execution time of MaxGF is very small because the hop-bounded sub-graphs and the pruning strategy effectively trim the search space. Figures 3(b) and 3(c) present the FeaRatio and ObjRatio of the algorithms, respectively. MaxGF has high ObjRatio because MaxGF iteratively removes vertices with low incident weights from each hop-bounded subgraph H v , and extracts the solution S maximized  X  ( S AP X ) among different subgraphs in different H balance on total edge weights and group sizes as describe in Section 2 .Moreover, the high FeaRatio and ObjRatio also indicate that the post-processing procedure effectively restores the hop constraint and maximizes the average weight accord-ingly. By contrast, DkS does not consider the hop constraint and different edge types in finding solutions and thus generates the solutions with smaller FeaRatio and ObjRatio.
 by varying h . When h increases, the execution time of MaxGF grows slowly because the pruning strategy avoids examining the hop-bounded subgraphs that do not lead to a better solution. The FeaRatio and ObjRatio of MaxGF with different h are high because MaxGF employs hop-bounded subgraphs to avoid generating solutions with large hop distances on friend edges, and the post-processing procedure effectively restores the hop constraint and maximizes the objective function.
 4(a) and 4(b) present the FeaRatio and the solution group sizes with different h . As h increases, MaxGF on both datasets achieves a higher FeaRatio due to the post-processing procedure adjusts S AP X and further minimizes d S
AP X . Moreover, it is worth noting that the returned group sizes grow when h increases in MS. This is because MS contains large densely connected compo-nents with large edge weights. When h is larger, MaxGF is inclined to extract larger groups from these components to maximize the objective function. By contrast, FB does not have large components and MaxGF thereby tends to find small groups to reduce the group size for maximizing the objective func-tion. In fact, the solutions in FB are almost the same with different h . Finally, MaxGF needs to carefully examine possible solutions with the sizes at least p , and thus Figure 4(c) shows that when p increases, the execution time drops because MaxGF effectively avoids examining the candidate solutions with small group sizes. To bridge the gap between the state-of-the-art activity organization and friend recommendation in OSNs, in this paper, we propose to model the individu-als with existing and potential friendships in OSNs for friend-making activ-ity organization. We formulate a new research problem, namely, Hop-bonded Maximum Group Friending (HMGF), to find suitable activity attendees. We prove that HMGF is NP-Hard and there exists no approximation algorithms unless P = NP . We then propose an approximation algorithm with guaran-teed error bound, i.e., MaxGF, to find good solutions efficiently. We conduct a user study and extensive experiments to evaluate the performance of MaxGF, where MaxGF outperforms other relevant approaches in both solution quality and efficiency.

