 (Semi-)automatic data cleaning is a difficult task in the data quality management cycle. Detection and removal of erroneou s data like invalid attribute value com-binations are important processes in that cycle [11]. Data cleaning depends on the involvement of domain experts [13], because domain specific knowledge is re-quired for the detection and cleaning of semantic and domain specific anomalies. As described in [9], automatic cleaning is important due to the large amount of data which are normally processed during data validation. This amount requires a lot of time for an expert to clean the data manually.

We use ontologies [5] for modeling domains of discourse and to represent valid and invalid attribute value combinations[3].

Data validation consists of checking tuples for correctness [8]. When invalid tuples are being detected, they have to b e modified using valid tuples stored in the ontology. Correction suggestions can be proposed by ontology-based data cleaning systems using the hierarchical o ntology structure to infer possible cor-rections for this tuple. User can then select a valid tuple from these suggestions. User selections are being saved and us ed to identify replacement rules.
We propose an algorithm for rule mining in ontology-based data quality man-agement environments. This algorithm depends on user-performed replacement operations. User identify invalid tuples and replace them with a valid one, which can be chosen by a set of correction suggestions made by the system. Frequen-cies in these user selections are being an alyzed and, when defined tresholds are reached, used for rule creation.
 This section describes how ontologies can be used for data cleaning purposes and how rules can be found in data cleaning ontologies. First, we describe our approach for ontology based data cleaning and rule mining informally. Then we provide an algorithm for automatic rule detection in data cleaning environments. 2.1 Basic Idea The key idea of our approach is to model specific domains of discourses as on-tologies. A discourse world can be descr ibed by a set of concepts, instances, and relations between both. Concepts of the discourse world often can be at-tributed manifold. We use concepts to model these attributes. In many real world scenarios like tumour classification many well defined attributes exist. We use instances to model the ranges of these attributes. In most cases more than one attribute is needed to describe a concept like a tumour. Then restrictions exists on combining attribute values. We use relations between instances of the classifying concepts. The International Classification of Diseases (ICD)[10] is a classification scheme which describes the topology of diseases. For instance, the range of gender consists of  X  X ale X  and  X  X emale X , the range of the ICD is much more complex and furthermore hierarchical.  X  X reast cancer (ICD-code 174.0) X , for instance, can not be combined with  X  X ale X .

Valid combinations are initially learned from a data source, e.g. a data ware-house, which is defined as containing only valid attribute value combinations. New valid and invalid combinations are learned by user interaction during data integration or data validation processes if a user classifies combinations as valid or invalid which hitherto were not modeled in the ontology.

A part of an ontology used for tumour documentation in epidemiological can-cer registries is shown in figure 1. On the left it shows instances of ICD.  X  X  X 02 X  X  describes a malignant neoplasm of the tongue,  X  X  X 02.1 X  X  describes the borders of the tongue,  X  X  X 02.2 X  X  describes the bottom of tongue, and  X  X  X 02.3 X  X  describes the front part. The instances of dignity on the right desribe several benign and malign characteristi ca of tumours. The ICD values have a hierarchical struc-ture, which means that the values C02.x are more specific than  X  X 02 X . Valid (from  X  X 02.3 X  to  X 1a X - X 1d X ) and invalid (from  X  X 02.3 X  to  X 1e X ) attribute value combinations are defined. Valid combinations can be used to describe a tumour correctly. Invalid combinations instead are impossible pairs of values. In a data validation process for a given tuple it has to be decided whether it is valid or not. Then these valid and invalid combinations are used .The valid combinations can be used for suggesting correcions when invalid tuple were found and when they have to be corrected.

The ontology can be used to suggest valid combinations when invalid combi-nations occur. The user can choose a valid combination which shall replace the invalid tuple. In most cases there is more than one possible valid combination, which can be presented to a user. The user then decides which combination has to be used to correct the invalid data. Data cleaning systems can store these user selections and use them to mine rule s. When a treshold is reached and it is obvious that in most cases the same valid combination is chosen, a rule can be created. This rule then will always be applied when the invalid combination is detected again and users must not be asked.

When a tuple has to be corrected, then the other data in the same row are used to correct the invalid combination. This is done by using a tuple as an input for the ontology, which means that each attribute value is searched in the ontology and then the ontology determines whether all combinations are valid or not. Then the invalid attributes are modified until the whole tuple is valid. 2.2 Rule Mining Algorithm We now present a concrete rule mining algorithm. This algorithm identifies sig-nificant replacement operations for wh ich rules can be created. We assume an ontology O with sets of concepts C and instances I . Relations between instances of different concepts define valid and invalid tuples. Let INV ( c )bethesetof invalid tuples, where the tuples contain instances of concept c. Let VAL ( c )be defined analog with valid tuples.

A replacement operation is defined as an operation r : i  X  v with i  X  INV ( c ) and v  X  VAL ( c ). These operations represent how invalid tuples i were replaced with valid tuples v . User perform these operations during the data validation task in data integration environments.

We assume that a set REP of replacement operations r has been stored during data integration processes or data quality managment tasks. REP consists of operations r together with occurence values. These occurences store how often a replacement operation has b een performed or selected.

We describe the number of occuren ces of a replacement operation as supp ( i  X  v ). A predefined treshold minsupp defines a value used for rule creation as follows:
The significance sig of a replacement operation r : i  X  v is defined as and describes how often a replacement operation v has been performed in respect to another operation containing v .

Arule i  X  v can be defined if for all v  X  VAL which occur in a replacement operation i  X  v .

Now we are able to construct an algorithm which identifies possible rules for invalid tuples from the concepts of the ontology: for all concepts c in O:
Now we provide an example which demonstrates how the algorithm identifies rules. The example is based on figure 1 and table 2. The figure describes a part of an ontology containing ICD (left side) and dignity values. Valid and invalid attribute value combinations are shown for the instance  X  X 02.3 X .

The whole set of invalid tuples when focusing on ICD is defined as INV ( ICD ) { in the figure.

The set of replacement operations REP is shown in table 2. The table lists invalid combinations and shows which valid tuple has been used to correct the tuple. The last column contains how often valid combinations have been chosen to replace the invalid tuple.

When the algorithm is being executed, it first iterates over the concepts of the ontology, starting at ICD. Then the set of invalid tuples is iterated, starting at (C02.3, 1e). Now, all replacement operations containing the tuple (C02.3, 1e) are identified: { #1 , #2 , #3 , #4 } . For each operation sig ( r )iscalculated,shown in table 3. The value of sig (1) is lower than minsupp for all other replacement operations. This is true for sig (2) and sig (3). Only the calculated values for sig (4) are greater than minsupp ,sotherule can be created.

Furthermore the algorithm creates the following rules:
We identified minsupp = 10 as a practicable treshold. Our approach is related to the field of asso ciation rule mining (ARM) [1], the mining of rules existing in a data set. Rules are expressions X  X  Y ,where X and Y are sets of items. X  X  Y then means that when a transaction contains X , then it often contains Y . ARM is often performed on shopping cart data to find products that are bought together is many cases. As not to perform mining on all data, ARM approaches like [4,6,12] partition the search space into frequent and infrequent itemsets to minimize the search effort. The frequent itemsets then are these fulfilling minsupp . Contrary to ARM, we mine replacement rules based on sets of operations i  X  v . When mining rules for an invalid tuple i ,the search space can be partitioned into replacement operations containing i and into operations not containing i .

Ontologies are also being used for semantic information integration [7]. Exist-ing approaches like [2] use ontologies to describe semantic similarities of concepts occuring in data sources. Therefore first a global ontology is being created. This acts as a global schema and can be equal to the target data schema. Second the existing data sources are integrated in the global ontology. Here the concepts of the sources are being described as deriv ed concepts of concepts from the global ontology. The third step is used for query processing. Queries are being described as concepts, too. All concepts which are more specific than the querying concept are correct results. Data validation and cleaning are important but expensive tasks. They are highly depending on domain specific knowledge. In many cases domain experts have to be involved for detecting and correcting e rroneous data. Unfortunately, in some cases when large sets of data are being processed, manual correction of data is not possible. We use ontologies for semi-automatic data cleaning. Knowledge de-scribing valid and invalid tuples can be modeled using ontologies. This knowledge can be used for detecting invalid tuples and for generation of correction sugges-tions. After a learning phase ontology-based data cleaning systems are able to mine rules. The presented algorithm uses a set of user-performed replacement operations. The rules can then be applied automatically when erroneous data is detected. The presented algorithm is a good tool for minimizing the effort for data cleaning, because large sets of manu ally performed replacement operations are being executed automatically.

