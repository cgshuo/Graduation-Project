 To query web pages, extracting the enc oded information in web pages and con-verting it into structured data (e.g. relational data for SQL) or semistructured data (e.g. XML data for XQuery) is nece ssary. Now, a number of systems or tools are available for web information extraction [1,4,5,8,9,10]. They can be classified into two categories: automatic or manual. Automatic approaches are possible for the web pages having a predefined schema and encoded with structured data [2,3,6,7].
 US patent web pages [11] include structured data (e.g. patent number, title, inventors, and registration date) and unstructured data (e.g. claims, drawings, and details). The web pages have no predefined schema, and users should specify an ontology for the data they want to extract. For example, Embley et. al [7] specified an ontology using obj ect-relationship model.
 for matching the ontology and web pages. In this paper, we propose a new web information extraction system that uses an ontology and HTML tag pattern descriptions as guideline. We implemented the proposed system and applied it to the US patent web site for evaluation. To extract information from web pages, the user should first define the ontology about web pages. In this paper, the ontology consists of the conceptual model of the data the user wants to extract. The conceptual model is defined using a UML class diagram. Figure 1 shows the conceptual model for the US patent data to be extracted. The conceptual model is exported into a textual format  X  the Petal format  X  for PIES to process. The Petal format is automatically generated by Rational Rose.
 xRule is a language with which we can specify the extraction rules for the at-tribute values of the objects specified in the ontology. An xRule statement is for a single attribute.
 Basic Syntax: An xRule statement has such structure as shown in Figure 2. A class name comes first following the keyword  X  X ONTEXT X . And then, an attribute name comes at the left-hand side of the operator  X = X  and the TagRex expression at the right-hand side. The return value of the TagRex expression is set to the value of the attribute.
 Variable: An xRule statement can have a variable. The variable stores an HTML tag sequence matched with the specified TagRex expression as shown in Figure 3. All variables in xRule are global and used in an iteration statement as explained below.
 Iteration: There are two kinds of iteration statements: one is for array type (Figure 4) and the other for multiple instance objects (Figure 5). A nested iteration is also possible (Figure 6). Set Location: The matching always starts from the beginning of a web page. However, we can change the starting location from which the matching begins. Figure 7 shows the syntax of the statement  X  X et Location X . The TagRex expres-sion specifies the starting location. multiple instance objects and nested iter ation. It can well match with an object-oriented model. Furthermore, since the rules described in xRule are independent from each other, executing rules in parallel is possible for performance. TagRex is a specially designed regular expression language to describe the pat-tern of HTML tag sequences. A TagRex expression is used in an xRule rule. Table 1 shows all the TagRex expression s used in xRule rules. TagRex expres-sions for HTML tag strings are different from regular expressions for character strings. In a TagRex expression, the basic matching unit is a single HTML tag. We consider a text segment in an HTML document as a single tag. Then, we can consider an HTML document as an HTML tag sequence. A TagRex expression, delimited by the symbol  X # X , is a pattern with which we search an HTML tag sequence for matching data and returns the matched data. The returned data is set to an attribute value of an object. Both symbols  X % X  and  X   X   X  X atchwith any number of HTML tags. The symbol  X % X  returns the data matched, while the symbol  X   X   X  skips. In some cases, we need to make a choice because web pages use different words for the same thing. We use the symbol  X  |  X  for the choice. A web page may contain many text segments. TagRex allows for using a common regular expression, delimited by the symbol  X $ X , for character string. In some cases, the value we want to search for is contained in an HTML tag X  X  attribute value. The symbol  X  X  X  specifies the attribute of an HTML tag.
 level. Thus, writing patterns for HTML tag sequences is significantly easy be-cause the number of tags is much smaller than that of characters in an HTML web page. For a US patent web page, the former is more than ten times smaller than the latter. Figure 8 shows the overall architecture of PIES. It consists of two main modules: Rule Matching Engine (RME) and XML Document Generator (XDG). RME inputs the rules expressed in xRule from a user and compiles them to efficiently match with web pages. RME also inputs the web pages collected by the web crawler in the form of HTML tag sequence generated by the HTML parser. RME matches the xRule rule s with HTML tag sequences.
 XML documents. XDG inputs the ontology expressed in the Petal format and the extracted web information expre ssed in objects from RME. XDG validates the objects based on the ontology. If the objects are valid, XDG converts them into XML documents. When XDG generates XML documents, it converts an object into an XML element.
 platform with 2GHz CPU and 512MB RAM. We evaluated PIES with respect to performance and robustness. We tested more than thousands of US patent web pages. Even though all the US patents does not have the same structure of web pages, the system successfully extracted all the information specified in the ontology. Furthermore, it extract ed and generated a single XML document in less than one second. In this paper, we proposed a new web information extraction system. The main contributions of this paper are as follows: (1) We designed a new language, xRule, to describe the extraction rules for the attribute values of the objects in the user-specified ontology. We deal with the web pages having no predefined schema and containing both structured and unstructured data. (2) We designed a new regular expression language, TagRex, to describe a pattern of HTML tag sequence. (3) We implemented the propose d web information extraction system, PIES, and extracted more than thousands of U.S. patent information from the real U.S. patent web pages. The U.S. patent has a lot of information. Thus, users need to specify their own ontology about the information they want to extract. This work was supported by the Post-doctoral Fellowship Program of Korea Science &amp; Engineering Foundation (KOSEF).

