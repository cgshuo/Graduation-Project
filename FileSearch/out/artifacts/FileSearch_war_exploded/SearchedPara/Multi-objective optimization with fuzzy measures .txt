 1. Introduction tion of multi-objective optimization (MOO) problems mainly due to their inherent characteristics concerning the population set-based exploration of the search space of a given problem. For this reason, the last decade there is a considerable growing research interest for addressing MOO problems using various forms of evolutionary algorithms (see Coelo, 1999 , Van Veldhuizen and
Lamont, 2000 , Jones et al., 2002 , Tiwari et al., 2002 , Gandibleux et al., 2004 , Talbi, 2009 , Zhou et al., 2011 for recent surveys).
However, solving a general MOO problem is extremely difficult ( B  X  ack, 1996 ). An exact solution to such problems at which all decision variables satisfy the associated constraints and all of the individual objectives have reached their associated optimal values may not even exist. Usually, there is no single optimal solution to a MOO problem but rather a set of optimal solutions known as
Pareto-optimal solutions. The solutions in this set are such that they are non-dominated by any other solution when all the objectives are considered, and moreover, they do not dominate each other in the set. Hence, a MOO algorithm, is in fact, in a situation where, its attempt is to optimize each individual objective to the greatest possible extend.

Traditionally, when designing a MOO algorithm a weighted aggregating operator is employed to model the objective function as an aggregation of the various optimization criteria. The most common aggregation functions are the families of averaging operators lying between the families of conjuctive and disjunctive aggregation functions ( Beliakov et al., 2007 ). According to
Grabisch (1996) none of these functions is able to model an interaction between the optimization criteria in a tangible way.
Fuzzy measures (Grabisch 1996) are able to represent certain kind of interactions among criteria such as synergy (positive interac-tion) or redundancy (negative interaction). Choquet and Sugeno integrals are two classes of averaging aggregation functions defined with respect to a fuzzy measure, and are commonly used as multi-objective functions. However, the richness of fuzzy integrals is paid by the complexity of the model, since the number of coefficients (known as fuzzy measures) involved in the fuzzy integrals, are exponentially increasing. Hence, usually, the designers of a MOO algorithm assume that the criteria are independent in order to simplify the decision-making problem.
This paper is devoted to the search of Pareto-optimal solutions in a multi-objective flow-shop scheduling problem (FSSP) considering the interactions among the objectives. Three objectives are considered namely, makespan, maximum tardiness, and total flow-time. The aim is to simultaneously minimize all the objectives considering their interactions. A new hybrid meta-heur istic referred to herein as multi-objective genetic-variable neighborhood search (MOGVNS) is intro-duced for dealing with the particular problem. MOGVNS consists of the following components: a main evolving population initially randomly generated, a secondary population to hold the Pareto-optimal solutions, and two interconnected meta-heuristics: a genetic algorithm (GA) and a reduced variable neighborhood search (RVNS) technique ( Hansen et al., 2008 ). GA is used to perform global exploration among the main population while maintaining and updating the Pareto population. RVNS is applied (in every generation) on the population best solution performing local exploitation around its structure with the hope to improve its quality. The Choquet integral ( Grabisch 1996 , Grabisch and Labreuche, 2010 )isusedto aggregate the interacting criteria in order to compute the evaluation score of a solution alternative. A core feature of the developed approach is its generality and ability to be easily applied on any MOO problem with multiple interacting objectives. Note that the majority of the FSSP algorithms are special-purpose, designed and tailored to address only specific forms of FSSP, e.g., instances with two or three machines with a single optimization criterion (which is usually the makespan).

To the best of our knowledge, MOGVNS is the first algorithm that addresses the MO permutation FSSP taking into account the interactions among the various objectives. This observation stems from a literature review performed with the aim of positioning MOGVNS within the relevant research field. In particular, after a comprehensive literature review for papers which use the Choquet integral method in MO production scheduling problems we identified the following four research articles: Saad et al. (2006 , 2008) proposed a GA which uses the Choquet integral as a tool for making decisions with multiple criteria for the solution of the flexible job-shop scheduling problem. The considered objec-tives were to minimize makespan, the workload of the critical machine, the total workload of machines, the penalties of ear-liness/tardiness, and the production cost. Khalouli et al. (2008) developed an ant colony based approach which uses the Choquet integral as an aggregation multi-criteria method to address the scheduling of flow shops with multiple parallel machines per stage. This problem is known as the hybrid FSSP. Yazgan et al. (2010) employed the Choquet integral method together with an analytical network process model for the selection of dispatching rules in FMS scheduling problems.

FSSP is a significant decision problem in the field of production management arising when a set of n different jobs needs to be processed on a set of m machines in the same order. Except in the case of two-machine, and a special case of three-machine problem, FSSP cannot be solved to optimality with state-of-the-art enumeration methods. Rinnooy Kan (1976) showed that FSSP is strongly NP -hard, and thus large size instances of the problem must be addressed through the use of heuristic techniques. Several heuristics have been proposed in the literature for solving the FSSP, with single-objective to minimize the makespan. These heuristics are characterized as either constructive, or improve-ment. Constructive heuristics ( Palmer, 1965 , Cambell et al., 1970 , Gupta, 1971 , Dannenbring, 1977 , Nawaz et al., 1983 ) generate a schedule from scratch, and are usually extensions of the Johnson X  X  algorithm ( Johnson, 1954 ) for solving the two and three-machine FSSP. On the other hand, improvement methods start from a solution generated by some sequence generating heuristic, and using suitable schemes try to improve this solution with the hope of approaching the  X  X lobal X  optimum. Improvement methods are generally based on meta-heuristic approaches such as GAs ( Reeves, 1995 , Chen et al., 1995 , Nearchou, 2004a , Ruiz et al., 2006 ), simulated annealing ( Osman and Potts, 1989 , Ishibuchi et al., 1995 , Nearchou, 2004b , Varadharajan and Rajendran, 2005 ), tabu search ( Taillard, 1990 , 1993 , Ben-Daya and Al-Fawzan, 1998 ,
Grabowski and Wodecki, 2004 , Eren and G  X  uner, 2008 ), scatter search ( Nowicki and Smutnicki, 2006 ), ant-colony algorithms ( Ying and Liao, 2004 , Yagmahan and Yenisey, 2008 , 2010 ) and hybrid systems ( Zobolas et al., 2009 ).

Since the pioneered work of Johnson (1954) several criteria have been considered for optimization including makespan, total tardiness, maximum tardiness, total flowtime, maximum flow-time, etc. (see Baker and Scudder, 1990 , Hejazi and Saghafian, 2005 , Ruiz and Vazquez-Rodriguez, 2010 , for a survey). While the majority of the works on FSSP assume a single optimization criterion, real-world scheduling problems often require the loca-tion of more than one objective at a time. To that purpose, rather recently, several researchers turned their attention to MO FSSP optimization. For example, Daniels and Chambers (1990) consid-ered the trade-off between the makespan and the maximum tardiness in FSSP. Rajendran (1992) proposed a branch and bound technique together with two simple heuristics to minimize the total flowtime with a constraint condition on the makespan.
Gangadharan and Rajendran (1994) addressed the bi-criteria FSSP through a heuristic technique and a simulated annealing algo-rithm, respectively. Murata et al. (1996) addressed the MO FSSP with two and three objectives via a weighted-sum Pareto multi-objective GA. Besides makespan, the authors adopted two more criteria: to minimize the maximum tardiness, and to minimize the total flowtime. Later, Ishibuchi and Murata (1998) extended this algorithm by incorporating a local search procedure to the evolving population. This procedure is applied to every member of the population with the hope to maximize its quality. Chang et al. (2002) addressed the MO FSSP respecting makespan, total flow time, total tardiness, and maximum tardiness through a gradual-priority weighting approach. Rajendran and Ziegler (2004) proposed two ant-colony algorithms for FSSP with the objective of minimizing the makespan, followed by the considera-tion of minimization of total flow time of jobs. Varadharajan and
Rajendran (2005) proposed a simulated-annealing algorithm for scheduling in flow-shops and objective to minimize the make-span and total jobs X  flowtime. Yandra and Tamura (2007) devel-oped a GA with a heterogeneous population approach to address
FSSP with makespan and total flowtime as optimization objec-tives. Recently, a number of researchers focused their attempt to solve the problem using swarm intelligence based methods such as particle swam optimization, ant colony optimization, and artificial immune systems. For instance, Rahimi-Vahed and
Mirghorbani (2007) developed a particle swarm algorithm for a bi-criteria FSSP where weighted mean completion time and weighted mean tardiness are to be minimized simultaneously.
Yagmahan and Yenisey (2008 , 2010) addressed MO FSSP using a hybrid ant colony algorithm combined with a local search strategy and considering the makespan, total flow time and total idle time as optimization objectives. Tavakkoli-Moghaddam et al. (2007) developed a MO immune algorithm for a no-wait FSSP with objective to minimize both the weighted mean completion time and the weighted mean tardiness. Amin-Tahmasbi and
Tavakkoli-Moghaddam (2011) tackled a FSSP with sequence-dependent setup times and objective functions to minimize the total completion time and the total earliness/tardiness for all jobs.
The rest of the paper is organized as follows: Section 2 presents and analyzes the mathematic background of fuzzy measures and integrals. Section 3 formulates FSSP, while Section 4 gives a brief review of the general GA and VNS meta-heuristics.
Section 5 introduces MOGVNS for solving the tri-criterion FSSP with fuzzy measures. Computational results concerning the performance of MOGVNS and comparisons with a set of repre-sentative existing multi-objective evolutionary algorithms are provided in Section 6 ; while, conclusions and directions for future work are pointed out in Section 7 .
 2. Fuzzy measures and integrals: mathematical background among which the decision maker must choose. In addition, consider a set of Q criteria Cr  X  Cr 1 , Cr 2 , ::: , Cr Q tion among every member of S to Cr ( Grabisch and Labreuche, 2010 ): x i  X  x i 1 , x i 2 , ::: , x i Q A R Q , i  X  1 , ::: , R set function: u : 2 Cr -0 , 1  X  with u |  X  0 and u  X  Cr  X  X  1.
Cr . It is not only the weight factors defined in every criterion separately but, in addition, weight factors are defined for all the combinations among the criteria of the set Cr .
 weighted arithmetic mean, is the discrete Choquet integral ( Grabisch and Labreuche, 2010 ): C u x i :  X  where, u A F Cr , F Cr denotes the set of all fuzzy measures on Cr , u indicates a permutation of Cr such that x j r ::: r x Q , ACr criteria the fuzzy measures must be specified. It is difficult to show the importance of each criterion using only fuzzy measures uCr i fg  X  X  ( i  X  1 , ::: , Q ). The global importance of each criterion is easier to be determined using a normalized value. The importance index or Shapley value of criterion Cr i with respect to u is defined by ( Grabisch and Labreuche, 2010 ) j u , Cr i  X  X  :  X  where, 9 W 9 indicates the cardinal of W , and W is formed by all combinations on Cr \ Cr i fg . These values are normalized having the property P j u , Cr j  X  1 with which is easier for the decision maker to indicate the importance of each criterion.
 the sign of uCr i , Cr j uCr i fg  X  X  uCr j . If the sign is negative (positive), the criteria Cr i , Cr j presents a positive (negative) corre-lation which expresses a negative (positive) interaction. If Cr are negatively correlated then if one of them has a good value then the other usually presents a bad value and vice versa. If Cr ,
Cr j are positively correlated then if one of them has a good value then the other usually presents a good value. If uCr i , Cr uCr i fg  X  X  X  uCr j the criteria are independent. A proper modeling of interaction should take into consideration all the combinations on Cr . The average interaction index between two criteria Cr Cr j with respect to the fuzzy measure u is defined by Iu , Cr i , Cr j  X  exchanged without changing the aggregation mode. Then uW [ Cr i fg  X  X  X  uW [ Cr j , 8 W A Cr = Cr i , Cr j . of it leads to a global bad (good) score whatever the degree of satisfaction of the other criteria. Then the score is computed by S  X  Cr i 4 Cr u Cr Cr i fg  X  X  veto effect  X  X  X  4  X 
S  X  Cr i 3 Cr u Cr Cr i fg  X  X  pass effect  X  X  X  5  X  3. Decision making in FSSP Problem formulation
FSSP is a strongly NP -hard (Rinnooy 1976) combinatorial optimization problem formally described as follows: let n jobs from a job set {1,2, y n }, with n 4 1, have to be processed on m machines {1,2, y , m } in the order given by the indexing of the machines. Each job consists of m operations and each operation requires a different machine. The processing time of each job j machine k is fixed and denoted by pt  X  j i , k  X  ( i  X  1,
Preemption is not allowed, thus, the operation of each job on a machine requires an uninterrupted period of time. Each job can be processed on one machine at a time and each machine can process only one job at a time. Let C  X  j i , k  X  ( i  X  1, denotes the completion time of job j i on machine k , and let j , j 2 , ... , j n denote a permutation of the n jobs, then the comple-tion time for an n -job m -machine FSSP called makespan and denoted by C max (see Eq. (6)) often constitutes the main objective for FSSP which has to be minimized.

C  X  j 1 , 1  X  X  pt  X  j 1 , 1  X 
C  X  j 1 , k  X  X  C  X  j 1 , k 1  X  X  pt  X  j 1 , k  X  , k  X  2 , ... , m
C  X  j i , 1  X  X  C  X  j i 1 , 1  X  X  pt  X  j i , 1  X  , i  X  2 , ... , n
C  X  j i , k  X  X  max C  X  j i 1 , k  X  , C  X  j i , k 1  X   X  pt  X  j i
C max  X  C  X  j n , m  X  X  6  X 
Besides makespan, two other important criteria usually used in FSSPs are to minimize the maximum tardiness, and to mini-mize total flowtime of the jobs. Assuming a due-date d i for each of job j i if it fails to meet its due date, or zero otherwise
T  X  max 0 , C  X  j i , m  X  d i  X  7  X 
Assuming zero ready times for all the jobs, flowtime F i for job j is defined as F i  X  C  X  j i , m  X  . Total flowtime TFT is therefore defined as follows: TFT  X  3.1. Modeling the multi-objective function using the discrete Choquet Integral
In MO FSSP we ideally seek for a feasible solution that simultaneously minimizes the three objectives: makespan, max-imum tardiness, and total flowtime. Since this is almost impos-sible for any MOO problem ( B  X  ack, 1996 ), what we really attempt to do is to optimize each individual objective to the greatest possible extent. Assuming again an n -job m-machine FSSP, then the MOO problem considered is usually formulated using the weighted arithmetic mean as in the following: Minimize f  X  w 1 U C max  X  w 2 U T max  X  w 3 U TFT  X  9  X 
In Eq. (9), T max  X  max  X  T 1 , T 2 , ... , T n  X  denotes the maximum tardiness of the n jobs. In addition, the weights w z ( z  X  1,2,3) (with P w z  X  1), specify the relative importance of the corre-sponding objectives. The determination of the suitable values for these weights is in general a difficult task and constitutes a critical research question in MOO. However, the interaction among criteria cannot be modeled using the weighted arithmetic mean. This study introduces the use of Choquet Integral for the determination of the objective function in order to take into account the interaction among criteria.
 The objective function f will be calculated using the discrete Choquet Integral as it is defined in Eq. (1), with the three criteria presented in Section 2 . According to the mathematical back-ground presented in Section 2 the criteria set Cr is defined as Cr  X  C max , T max , TFT fg X  10  X  where C max : the makespan. T max : the maximum tardiness of the n jobs. TFT : the total flow time.

In this case, 2 Cr 2  X  6 fuzzy measures must be addressed since u |  X  0 and u  X  Cr  X  X  1.

First the fuzzy measures, uC max fg  X  X  , uT max fg  X  X  , uTFT fg  X  X  for each criterion, must be addressed that shows the importance for each of them. The fuzzy measures for the interaction between criteria should be addressed in order to satisfy specific characteristics. In this case, the alternative solutions that will present low make-span, low maximum tardiness and low TFT will be favored. In this case the fuzzy measures for the interaction of the criteria are fg  X  X   X  uT max fg  X  X   X  uC max , T max fg  X  X  fg  X  X  X  uTFT fg  X  X  o uC max , TFT fg  X  X  fg  X  X  X  uTFT fg  X  X  o uT max , TFT fg  X  X  X  11  X 
According to Eq. (11), there is strong synergy between make-span and total flow time, and tardiness and total flow time; while there is no interaction between makespan and tardiness. The objective function is therefore, determined using the discrete Choquet Integral: fx i  X  f  X  where x i j is a profile of an alternative solution x 1  X  x 1 lation of the score according to formula (12) are shown in Table 1 .
In this paper, the values of the fuzzy measures are subject to the following four conditions: (a) Ranking of criteria, expressing the importance of every (b) Ranking of pairs of criteria, expressing the importance of (c) Interaction conditions presented in Eq.(11). (d) Monotonicity conditions imposed by the mathematical for-
The first two conditions express the expert knowledge con-cerning the problem. In this study in regard to condition-(a), makespan and maximum tardiness are considered to have the same importance, and be more important than total flow time. Hence, the values of the fuzzy measures of these criteria must be higher than that of total flow time. In regard to condition-(b), it is considered that C max , T max fg set is more important than C and T max , TFT fg sets that present synergy. In addition, C considered to be more important than T max , TFT fg set.
For the case of condition-(c) Eq. (11) is considered, so that makespan and maximum tardiness do not interact with each other and the fuzzy measure of the set C max , T max fg will be the sum of fuzzy measures of each criterion. The value of the fuzzy measure of the set
C max , TFT fg is greater than the sum of the fuzzy measures of each synergy between them. The same rule is applied for the set
T , TFT fg . Considering now condition-(d), the fuzzy measures of the sets with cardinality equal to one should have lower values than the fuzzy measures of the sets with cardinality equal to two. All the above fuzzy measures should have values lower than one, which is the fuzzy measure of the set defined in Eq. (10).

The final values of the fuzzy measures used in this work are shown in Table 2 . Since only five values (the sixth one can be determined by the equality in Eq. (11)) have to be specified, a simple method with 0.05 resolution was used in order to max-imize the distinctness among the solutions subject to the above conditions. Our purpose is to extend this method in the future by the use of a global optimizer such as a micro GA. 4. A brief review on GAs and VNS meta-heuristics 4.1. Genetic algorithm (GAs)
GAs are population-based search procedures that have been found to perform better than the classical heuristics or gradient based methods, especially when addressing the problem of optimizing multi-modal, non-differentiable, or discontinuous functions ( Goldberg, 1989 ). Since their invention in seventies ( Holland, 1975 ), they have been applied with high success on many complex combinatorial optimization problems, including FSSP. Independently of the form of the optimization problem, any
GA undergoes the following mechanism: (a) Create (usually randomly) a population of individuals that represent potential solutions to the physical problem. (b) Evaluate the quality of each individual in the population, by computing the fitness function of each individual. (c) Promote individuals of higher quality by introducing selective pressure on the entire population. (d) Generate new individuals by applying variation operators such as crossover and mutation on the population. (e) Repeat steps (b) X (d) several times until the satisfaction of a suitable termination criterion.

There exists a large number of possible ways to implement the above five steps involved in a GA, however, the major considera-tions are the following: the representation mechanism (i.e., a way of encoding problem X  X  solutions to artificial chromosomes), the evaluation mechanism (i.e., the computation of the fitness func-tion), the genetic operators (which type of crossover and muta-tion operators to use, how to select the parent chromosomes), and the appropriate settings for the control parameters (i.e., popula-tion size, crossover and mutation rates, number of generations) which control how the various components of the GA combine and operate. 4.2. The variable neighborhood search (VNS) method
VNS is introduced by Mladenovic and Hansen (1997) as a general meta-heuristic for solving hard combinatorial optimiza-tion problems. The main difference behind VNS and the tradi-tional local search methods is the use of two or more neighborhoods and the systematic change of the neighborhood during the search procedure. The general mechanism of the basic
VNS undergoes the steps given below. Further modifications to the basic VNS are analyzed and discussed in ( Hansen et al., 2008 ). , that will be used in the search. Determine an initial solution x to start with, and set a stopping condition.
 is met: 1) Set k  X  1; 2) Repeat the following steps until k  X  k max : neighborhood of the current solution. In particular, a random point x X  is selected from the N k neighborhood of the current point x . There are many ways to model a neighborhood search. Two such popular neighborhood models are the adjacent pairwise interchange (API) scheme, and swap (or exchange ) scheme. In the former, two adjacent terms in x are randomly selected and interchanged; in the latter scheme, two (non adjacent) terms are randomly selected and interchanged. The solution x 0 gener-ated during shaking step is then being improved using a suitable local search heuristic ( local search step ). Finally, the new solution x 00 created by local search heuristic is compared to that of the original solution x and accepted when its quality is higher. VNS is terminated when an appropriate user-defined stopping condition is satisfied. This condition may be a maximum permitted number of iterations, or a maximum processing time allowed, or a maximum number of iterations between two improvements, etc. 5. The MOGVNS algorithm for the tri-criterion FSSP
Pareto set of optimal solutions. Pareto set contains all those non-dominated solutions to the problem under investigation such that no other solutions are superior to them in respect to all the discrete objectives. To that purpose, the proposed MOGVNS tries to find a set of non-dominated FSSP solutions rather a single solution. The main features of MOGVNS are described below.
Fig. 1 illustrates a schematic overview of the algorithm, while its full pseudo-code is given in Appendix A of the paper. population of Np -1 random permutation vectors, with each vector corresponding to a unique FSSP solution. For example, assuming a 7-job, 3-machine FSSP the vector (2 5 4 7136) represents the order in which the jobs are executed on the three machines, i.e., job 2 followed by job 5, followed by job 4, etc. Permutation vectors seem to be the most suitable solution representation scheme for any evolutionary algorithm ( Reeves, 1995 , Cheng et al., 1996 ) when addressing combinatorial optimization pro-blems having the permutation property . The reason is twofold: first, any permutation vector always represents a feasible FSSP solution. Second, permutation encoding has full Lamarkian prop-erty ( Cheng et al., 1996 ); i.e., the  X  X erits X  of the chromosomes can be inherited from population to population through common genetic operation. The initial population is filled with a heuristic solution generated by the NEH rule ( Nawaz et al., 1983 ). NEH corresponds to the most powerful FSSP constructive heuristic to date.

Global exploration by GA: A GA is applied on the main popula-tion to improve its quality. The developed GA is similar to that appeared in a previous work ( Nearchou, 2004b ) of one of the authors of this paper. Nearchou (2004b) studied through exhaus-tive experimentation the impact of a set of well-known crossover and mutation operators on the genetic search for the solution of
FSSPs with makespan as the optimization objective. We briefly describe here the main characteristics of this GA:
Representation mechanism : chromosomes are permutation vectors as described above.

Evaluation mechanism : fitness function for each chromosome i is defined as f itness i  X  f i :  X  13  X 
With f being the objective function given by Eq. (12). Hence, the higher the fitness value of a chromosome, the better quality is the FSSP solution represented by this chromosome.
Parent selection : parent solutions are selected using binary tournament strategy ( Goldberg, 1989 ).

Recombination and mutation operators : offspring are created using a synergy of a pair of crossover operators (2 -point and 3-point crossover) followed by a shift mutation operator. These operators are illustrated in Fig. 2 . The synergy between the two crossover operators has been implemented using the following scheme ( Nearchou, 2004a ). flip (0.5) is a function that generates randomly a floating number r A (0,1) and returns true if r is less than or equal to 0.5, otherwise it returns false . X denotes 2-point-crossover, while Y denotes the 3-point crossover. As it was experimentally shown ( Nearchou, 2004a ), the adaptive combination of two crossovers outperforms the sole usage of the best type of crossover operator. However, the best combination of crossover found by Nearchou (2004a) for the case of the single-objective FSSP was a synergy between 1-point and 3-point crossovers. In this study for the 3-criteria MO FSSP we determined after exhaustive experimental effort that the use of 2-point and 3-point crossover is the best choice to be used within the context of the developed MOGVNS algorithm. We will illustrate these results in the experimental section below.

Survival selection : the generational survival scheme was adopted ( Goldberg, 1989 ). That is, in each generation the entire population of the parent chromosomes is replaced by the population of offspring.

Control parameters : the best settings investigated in Nearchou (2004a) were adopted. That is, a fixed population size ( Np )of 30 chromosomes and a fixed crossover rate ( P c ) equal to 1.
Meaning that, two (randomly) selected parent chromosomes are always being  X  X rossed X  and produce a pair of offspring. An adapted mutation rate ( P m ) which is high at the beginning and decreases slowly by the population X  X  diversity. If the popula-tion X  X  diversity becomes too  X  X mall X , then the mutation rate takes again its original high value. More specifically, P initially defined equal to P m _ init  X  0.8, and decreased in each new generation by a factor y  X  0.99 using the relation.
P  X  y P m  X  14  X 
The population X  X  diversity is characterized  X  X mall X  when the minimum population fitness ( fitness min ) and the average popula-tion fitness ( fitness avg ) are almost the same, i.e., when the ratio fitness min / fitness avg exceeds a user-defined threshold D (  X  0.95).
When this condition holds, the chromosomes in the entire population are almost the same, and thus we have the case of population X  X  convergence. GA stops when a maximum number of MAXGEN (  X  10000) generations has been surpassed.

Local exploitation by RVNS: In each generation the best chro-mosome of the evolving population undergoes a local search improvement using a reduced VNS (RVNS) technique aiming to improve its performance. RVNS is a VNS variant ( Hansen et al., 2008 ) which does not use any local search procedure after shaking (see Step 2 of the VNS algorithm in sub-Section 4.2 ) thus searching the solution space much faster than VNS. The devel-oped RVNS heuristic uses two neighborhood structures, namely k in the location of gene j j+1 s hift and exchange . In the former two genes (jobs) j and k ( j are randomly selected along the chromosome (permutation vector). Then, the contents at position j are removed and inserted in position k . In the latter scheme, two jobs j and k ( j randomly selected and interchanged. Fig. 3 shows the way these schemes work. RVNS procedure was defined to terminate when after 10 successive iterations no improvement of the current best solution is encountered.
 optimal FSSP solutions is maintained; updated iteratively genera-tion by generation. Moreover, using an elitist preserving strategy a portion of the evolving (main) population is randomly replaced by a number of  X  X lite X  Pareto solutions. In a general MOO problem a solution with the best values for each objective can be regarded as an elite solution. Hence, for the tri-criterion FSSP under consideration, there are three elite (extreme) solutions in the evolving population each of which optimizes one objective. These solutions are always copied into Pareto population. Pareto set is further completed by additional elite solutions using a mechan-ism explained below. The Pareto population of the final genera-tion contains the near-optimal solutions to MO FSSP. The decision maker can then select that solution accomplishing more her or his preferences. 6. Experiments and discussion 6.1. Experimental setup five representative MO evolutionary algorithms identified in the literature: (a) a Pareto weight-sum GA proposed by Murata et al. (1996) ; (b) a hybrid Pareto weight-sum GA combined with a local search procedure developed by Ishibuchi and Murata (1998) . Both of them were introduced as MO optimizers to address FSSP with two and three-objectives (including the criteria already discussed in Section 3 ). We will refer to these algorithms with the abbrevia-tions MOGA1 and MOGLSA respectively. (c) The strength Pareto evolutionary algorithm-2 (termed as SPEA2) proposed by Zitzler et al. (2001) ; (d) the non-dominated sorting GA-II (termed as
NSGAII) introduced by Deb et al. (2002) . Both of them are very popular in the Evolutionary Computation community as effective
MO optimizers and due to their efficiency often constitute test beds against any new MO algorithm. SPEA2 and NSGAII have been introduced for MOO over continuous search spaces as enhance-ments of their ancestors known as SPEA and NSGA, respectively.
Bagchi (1999) extended NSGA to solve sequencing problems including FSSPs. In this study we adopted Bagchi (1999)  X  X  imple-mentation (concerning the chromosome syntax and the employed crossover/mutation operators) for both NSGAII and SPEA2. That is, chromosomes are permutation vectors each one corresponding to a unique job sequence. Recombination is performed by one-point crossover while mutation is performed by adjacent two-job change operator (i.e., two adjacent jobs in a given sequence are exchanged). (e) The Lorenz non-dominated sorting GA (termed as
L-NSGA) is a new MOGA introduced recently by Dugardin et al. (2010) . L-NSGA is based on NSGAII but uses the Lorenz dom-inance relationship instead of the Pareto dominance with the aim to provide a stronger selection of the non-dominated solutions.
Following the indications of its founders we adopted a one-point crossover and one-point mutation (adjacent swap) with L-NSGA. (f) Furthermore, a reduced version of MOGVNS was developed (and included in the overall experimental comparisons) which uses only the GA during its execution (VNS component is inactivated). We will refer to this reduced variant of MOGVNS with the abbreviation MOGA2.
 All the heuristics were implemented in Pascal and run on a
Pentium 4 (1.7 GHz) PC. The experimental evaluations were carried out over selected benchmarks instances borrowed from the public available set of the Taillard X  X  FSSP benchmarks ( Taillard, 1993 ). Note that, the existing upper bounds on the optimal objective function values for these benchmarks concern only one optimization criterion, that of minimal makespan. In the experiments we included test instances from nine benchmarks categories concerning the scheduling of 20-, 50-, and 100-jobs, on 5, 10, and 20 machines. More specifically, the first five test instances for each one of the nine benchmarks categories were conducted for experimentation. Each test instance contains the processing time of each job on each machine. The due date d each job j i ( i  X  1, y , n ) was estimated using a procedure similar to that appeared in Crauwels et al. (1998) in which the authors generated the well-known benchmarks test problems for the classical weighted tardiness scheduling problem. This procedure is as follows: instance classes of varying hardness were generated by using different uniform distributions for generating the due dates. For a given relative range of due dates, RDD (  X  0.4, 0.6, 0.8) and a given average tardiness factor, TF (  X  0.8), an integer due date d i for each job j i was randomly generated from the uniform distribution [ P  X  1 TF RDD  X  = 2, P  X  1 TF  X  RDD  X  = 2]; with P  X  the m machines.

To be fair with the stochastic behavior of the seven heuristics we run each one of them 15 times over every test instance and the solutions quality were averaged. This means that, each heuristic was run over 9 5 15  X  675 test experiments in total. All the heuristics were defined to evolve a fixed size population of
Np  X  30 individual solutions, and run for a maximum of 10,000 generations. The maximum size of the Pareto population main-tained by each heuristic was defined to be equal to Np solutions.
Moreover, to determine the final Pareto set solutions for each algorithm we applied the following procedure: the Pareto solu-tions generated in every different run are combined into a single union set. After the completion of the 15th (last) run the first Np non-dominated solutions of this union set constitute the final Pareto set solutions for the particular algorithm.

The settings for the GA control parameters used in MOGVNS and MOGA2 have been described in Section 5 . Recall that, these settings have been investigated to be the most suitable after an extensive experimental study concerning the performance of GAs when applied on the permutation single-objective FSSP ( Nearchou, 2004a ). In regard to which crossover and mutation operator to be used we followed the suggestions of Nearchou (2004b) : that is, we employed an adaptive combination of a pair of crossovers (not a single crossover as usual) and a small perturbation scheme for mutation. To that purpose, we experi-mented with 10 different crossover combination schemes and 3 mutations. Details about these schemes can be found in
Nearchou (2004b) . The experimental results showed that the use of an adaptive combination of a 2-point and 3-point crossover followed by a shift mutation is by far the most suitable for use within the developed approach. The full results are given in a separate table in Appendix B . We do not discuss these results here since we must first explain the methodology used to quantify the quality of the solutions and the performance measures employed in this study. All these issues are explained in detail in the next sub-section.
 To determine the appropriate crossover and mutation rates for
SPEA2, NSGAII, and L-NSGA we used the following design-of-experiments (DEO) framework: firstly, we set the mutation rate
P m to a fixed value within the discrete range {0.01, 0.1, 0.3} and experimented with various crossover rates P c A {0.3, 0.5, 0.7, 0.9, 1.0}. Secondly, we applied the control scheme described in Section 5 for the case of MOGVNS. That is, a fixed crossover rate equal to 1 and an adapted mutation rate computed by Eq. (14). The best combination ( P c , P m ) was chosen according to the notion of non-dominance, as follows: all the Pareto solutions obtained after a fixed number of generations are pooled together and their performance is measured using Zitzler ( Zitzler and Thiele, 1999 ) and RNI ( Tan et al., 2005 ) indices. These performance indices will be described in detail in the next sub-section. Table 3 shows the best crossover and mutation rates obtained after the termination of the runs subject to the above DOE. 6.2. Comparative results over the Taillard X  X  benchmarks
The effectiveness of each heuristic was quantified by five performance indices: (a) The quality of the generated solutions in regard to the various (b) The diversity of the solutions, i.e., the ability of a heuristic to (c) The Zitzler measure ( Zitzler and Thiele, 1999 ) here denoted as (d) The Ratio of Non-dominated Individuals (RNI) introduced by (e) The actual CPU time (in seconds) spent by each heuristic until
Fig. 4 displays the quality of the solutions obtained by the three heuristics over the Taillard X  X  benchmarks. The abbreviations 20 5, 20 10, etc., stand for a 20-job 5-machine FSSP, a 20-job 10-machine FSSP, and so on. As it is clear from Fig. 4 , MOGVNS as well as its reduced version MOGA2 (forth and third column of each sub-graph respectively) outperform the other heuristics generating solutions of higher quality in regard to the three objectives (makespan, tardiness, and flow time). In particular, both versions of the developed heuristic managed to generate schedules of shorter makespan, lower tardiness and lower total flow time in the majority of the test instances. However, it is not clear from this figure which algorithm is the best. Similarly, the next best performance was attained by SPEA2 and L-NSGA but again one cannot clearly distinguish which of them is the best. Lower quality results have been generated by MOGA1 and MOGLSA. The interested reader can find in Table 4 the detail numerical results obtained by the seven heuristics averaged after running 15 times over each benchmark test instance. For each test instance the best solution obtained in regard to the three objectives is given in bold. For example, for 20 5 FSSP test instance #1 the best solutions obtained are 1310 for C max (MOGVNS), 387 for T max (MOGA2), and 14,170 for TFT (L-NSGA). As one can easily observe from Table 4 the high performance of
MOGVNS is much clearer in the case of medium-sized ( n  X  50) and large-sized problems ( n  X  100 jobs).

In regard to the variety of solutions one can find in Table 5 the mean number of the Pareto solutions generated by each heuristic averaged over the examined benchmarks instances. For more clarity, the results obtained are classified according to the number of the jobs to be scheduled. As can be seen from this Table, for test problems with 20 and 50 jobs, MOGA2 was found able to create more Pareto solutions than the other heuristics. While for the case of the 100-job problems, MOGLSA and MOGVNS outperformed all the others heuristics as far as the diversity performance index is concerned. However, the creation of a large number of Pareto solutions for a particular algorithm does not say anything about the quality of these solutions. See for example Fig. 5 which displays the non-dominated solutions obtained by each heuristic over the 5th test instance of the 100 20 FSSP. The illustrations are given by projecting the obtained Pareto solutions in the 3-D objective space. A deep observation of this figure reveals that, in regard to the three objectives ( makespan total flow time , maximum tardiness ) the Pareto solutions generated by MOGVNS and MOGA2 dominate those generated by the other heuristics. However, this is just an observation for a single test problem. So, the basic question remains unanswered: which algorithm is the best for the problem under consideration? Can we make more safe conclu-sions about the performance of the examined heuristics? The answer to these questions passes through the computation of Zitzler and RNI performance indices.

Table 6 (a) displays the Zitzler and RNI indices corresponding to the seven heuristics over the 5th test instance of the 100 20 FSSP. Note that, both of these performance indices are estimated through an algorithm-to-algorithm comparison iterated proce-dure. That is, each one of the algorithms is compared against to all the others. Let us examine the Zitzler index (upper part of Table 6 (a)); observe for example cell (MOGLSA, SPEA2). The number (  X  36.67%) in this cell is the Zitzler index of MOGLSA against SPEA2 and means that 36.67% of the solutions generated by MOGLSA are dominated by at least one SPEA2 solution. The Zitzler index is not symmetric and therefore we must also examine the value in cell (SPEA2, MOGLSA) in order to make a safe conclusion concerning the two algorithms. Z (SPEA2, MOGLSA)  X  0.0% which means that none of the SPEA2 solutions is dominated by any MOGLSA solution. Hence, since Z (SPEA2, MOGLSA) o Z (MOGLSA, SPEA2) we can safely conclude that SPEA2 is superior from MOGLSA (for the specific test problem).
Let us now examine RNI index for these two algorithms. As already mentioned the higher the RNI value the better the algorithm is. RNI for (MOGLSA, SPEA2) is 0.23 which means that: 23% of the solutions in the union set of the Pareto solutions generated by the two algorithms are MOGLSA solutions while the rest 77% are SPEA2 solutions. This clearly indicates that SPEA2 is by far superior from MOGLSA. Comparing MOGLSA with the rest of the algorithms we can see that this algorithm is superior to
MOGA1 in regard to RNI index. Performing similar observations for each cell of the table we can distinguish the effectiveness of the examined algorithms. Table 6 (b) summarizes the effective-ness of the algorithms for the particular test problem. As can be seen from this Table, MOGVNS outperforms all the other 6 heur-istics generating the biggest Zitzler index; this is depicted with a score 6 in the related column of Table 6 (b). Additionally, its RNI index was bigger than that of all the other 6 heuristics; this gives to MOGVNS an additional score 6. Hence, the overall score (Zitzler  X  RNI) of the algorithm is 12. The second best performance was achieved by MOGA2 with an overall score equal to 10. Next comes SPEA2 with a total score equal to 8.

Obviously, we cannot give in a single table the detail Zitzter and RNI values for the seven algorithms over all the examined benchmarks problems. However, we can report the champion algorithms per test instance in regard to these indices. Table 7 displays the champion algorithms in regard to Ziztler ( Table 7 (a)) and RNI ( Table 7 (b)) indices over each one of the examined test problems. Observe from Table 7 that some cells include more than one algorithms, this indicates a tie between two or more algorithms. Summing up for each algorithm the number of the times it became the winner we have the results displayed in
Table 7 (c). From this Table we can now conclude about the overall performance of the examined algorithms. MOGVNS attained the highest total score (equal to 49). Particularly, in regard to Ziztler index, MOGVNS outperformed all the other algorithms in 26 out the 45 in total test problems. While in regard to RNI index,
MOGVNS became the champion in 23 out of 45 in total test problems. The second best performance was attained by MOGA2 with a total score equal to 26. The third best performance was achieved by SPEA2 with a total score equal to 16. Forth comes
L-NSGA with a total score equal to 3; which means that this algorithm became the winner in only 3 out of 45 in total test problems. The remaining three algorithms (i.e., MOGLSA, MOGA1, and NSGAII) showed poor solution quality performance.
A final issue concerns the computational speed of the algo-rithms. Fig. 6 illustrates the CPU time in seconds spent in average by each algorithm till the convergence. For clarity we distinguish the test problems in 3 classes according to the number of the jobs to be scheduled. One can see from Fig. 6 that the fastest algorithm is NSGAII. Spending in average approx. 2.5 s for 20-jobs, 3 s for 50-jobs, and 3.5 for 100-jobs FSSPs. Near to these levels of speed but slightly worse is the convergence ability of SPEA2 and
L-NSGA. MOGVNS needs more CPU time; in particular, MOGVNS spent in average 3.4, 4.7 and 5.8 s, for problems with 20, 50 and 100 jobs respectively. The corresponding running times for the rest of the algorithms were even higher with MOGA1 being the slowest. 7. Conclusion and future work
Consideration was given to a multi-objective (MO) flow-shop scheduling problem (FSSP) with the goal to simultaneously minimize makespan, maximum tardiness, and total flow time of a set of n jobs on m machines. The interactions between the three criteria have been taken into account through the concept of the discrete Choquet Integral. Aiming to determine a set of Pareto-optimal solutions to the particular tri-criterion FSSP a new hybrid meta-heuristic termed as MOGVNS was presented having the following main characteristics: (a) It combines a genetic algorithm for solutions evolution with a reduced variable neighborhood search (RVNS) technique for a fast solution improvement. RVNS is applied on the best population member at every generation. (b) The initial population is randomly generated and seeded by a single heuristic solution generated by the well-known NEH constructive rule. (c) It uses the discrete Choquet integral method to formulate the cost function of each individual solution thus taking into accoun t the interaction among the three objectives. (d) It maintains a separa te population with diverse Pareto-optimal solutions which generation by generation is being update with new non-dominated solutions from the entire population.
MOGVNSwasexperimentallycomparedandfoundsuperior(in regard to solutions quality, diversi ty and domination of solutions) to five existing representative MO evolutionary algorithms including the well known SPEA2 and NSGAII algor ithms and the recently published
L-NSGA algorithm. The experiments were conducted over public available benchmarks test problem s taken from the open literature.
There is much ground for further research. A particularly interesting issue is to enhance MOGVNS so that to tackle with success more complex MO optimization problems. In practice, many MO optimization problems have multiple conflicting objec-tive functions expressed in differing units, and with an inverse, nonlinear relationship among themselves. These objectives may be even imprecise (or fuzzy) in nature to be defined. Adding to the developed approach mechanisms and ideas borrowed from the field of nonlinear goal programming ( Lee, 1972 ) may result to a promising optimization tool for these problems. Goal program-ming needs the decision maker to provide a numeric goal (together with a priority level) for each objective, and then seeks for a solution that minimizes the weighted-sum of the deviations of the objective functions from their respective goals.
MOGVNS on other more difficult multi-criteria production problems, such as job-shop scheduling problems, assembly line balancing problems, etc. Furthermore, the development of a dynamic, auto-adaptable method for determining the appropriate fuzzy measures in the objective function is a very important task for future work.
Ongoing research efforts aimed at investigating this issue with the means of a micro genetic algorithm. Finally, a formal performance comparison of MOGVNS against recent MO meta-heuristics (such as ant-colony algorithms, particle swarm optimization algorithms, differential evolution algorithms, etc.) for the solution of scheduling problems appears very interesting. However, given the large number of existing MO meta-heuristics this is not a trivial task. The outcome of such an experimental study cou ld clearly serve as an invaluable tool in the development of efficient algorithms for the solution of such hard and frequently encountered problems.
 Appendix A
Step 6: Update Pareto population Step 6: Elitist preserving strategy STEP 7: Update data Return G ; Appendix B
Table 8 displays the impact of 10 different crossover synergy schemes and 3 mutations on the performance of MOGVNS over two classes of FSSPs. For every different combination of mutation and crossover schemes we can see the total number of the non-dominated solutions obtained, and the number of the times the algorithm became the winner in regard to Zitzler and RNI indices respectively. As one can see from this Table, MOGVNS attained its highest performance using the combination (M3, C6), that is using a synergy between 2-point crossover and 3-crossover followed by a shift mutation. Details about these crossover/mutation schemes can be found in Nearchou (2004a) .
 References
