 Existing XML query pattern-based caching strategies focus on extracting the set of frequen tly issued query pattern trees based on the number of occurrences of the query pattern trees in the history . Each occurrence of the same query pattern tree is considered equally importan t for the caching strategy . However, the same query pattern tree may oc-cur at di X eren t timep oints in the history of XML queries. This temp oral feature can be used to impro ve the caching strategy . In this paper, we prop ose a novel type of query pattern called conserve d query paths for e X cien t caching by integrating the supp ort and temp oral features together. Conserv ed query paths are paths in query pattern trees that never change or do not change signi X c antly most of the time (if not always) in terms of their supp ort values during a speci X c time period. We prop osed an algorithm to extract those conserv ed query paths. By ranking those conserv ed query paths, a dynamic-c onscious caching (DCC) strategy is prop osed for e X cien t XML query processing. Experimen ts show that the DCC caching strategy outp erforms the exist-ing XML query pattern tree-based caching strategies. Categories and Subject Descriptors: H.2.8 [Database Managemen t]: Database Applications { Data Mining . General Terms: Algorithm, Design, Experimen tation. Keyw ords: XML, Query , Cache Strategy .
XML has emerged as the leading textual language for rep-resen ting and exchanging data over the Web. As a result, di X eren t XML query optimization techniques such as path index [3], structural join [1], appro ximate query processing [4], and caching [2, 5] have been prop osed. Recen tly, di X er-ent caching strategies have been prop osed based on the fre-quen t query patterns from historical XML queries [5]. How-ever, this may not always be true in real life applications, where the timestamps for di X eren t occurrences of an XML query in the history can a X ect the caching strategy signi X -cantly. The importance of the timestamps of XML queries can be observ ed from both the dynamic nature of the XML data itself and the dynamic nature of the XML queries. From the above observ ations, we believe that a more ef- X cien t caching strategy can be built by incorp orating the dynamic nature of the XML queries. However, to the best
Based on the two metrics, we prop ose an algorithm to disco ver two groups of interesting RQPs from the historical QPTs, called the frequent conserve d query paths (FCQP) and the infrequent conserve d query paths (ICQP) . An RQP P is called conserve d query path if and only if the standard deviation of the history of supp ort values of P is no greater than the deviation threshold  X  and the degree of dynamic is no greater than the DoD threshold  X  . A conserv ed query path is frequent (FCQP) if and only if the mean value of the sequence of supp ort values in the history is no less than the minimum mean threshold  X  . Similarly , a conserv ed query path is infrequent (ICQP) if and only if the mean value is no greater than the maximum mean threshold  X  0 . For example, let  X  = 0 : 4,  X  0 = 0 : 3,  X  = 0 : 03, and  X  = 0 : 1. Then RQP 1 is a FCQP and RQP 4 is an ICQP in Figure 1.

Observ e that in the frequen t and infrequen t conserv ed query paths, the supp orts of RQPs do not change signi X -cantly (conserv ed) and their supp ort values can be poten-tially large or small. Then, we prop osed a more e X cien t caching strategy called DCC by ranking the set of extracted conserv ed query paths using our prop osed rank metric. The idea is to cache the results for the FCQPs with the largest rank scores by replacing the cache results of the ICQPs with the smallest rank scores. Di X eren t from existing query pat-tern based approac hes, not only the supp ort values of the RQPs are considered, the historical change patterns and the size of the RQPs are also taken into accoun t in the ranking for assigning priorities of caching.
Due to the space limitation, we brie X  X  presen t some pre-liminary results about the performance of the DCC caching strategy . In the following experimen ts, we use the set of conserv ed query paths extracted from the DBLP dataset that consists of 300,000 synthetic QPTs, which are gener-ated according to the Zip X an distribution and divided into 100 QPGs. The queries for evaluation have the average num-ber of 7.4 nodes, max depth of 8, max fanout of 12.
To evaluate the e X ectiv eness of the prop osed caching (de-noted as DCC ), two performance metrics are de X ned. The cost ratio is prop osed to represen t the response time with DCC strategy against the response time without caching strategy for all the query examples. Another metric is aver-age response time for all the query examples, which is the ra-tio of total response time to the number of query examples. Experimen ts were conducted to compare the DCC strat-egy with other existing caching strategies such as the orig-inal LRU caching strategy and the 2PXMiner-based LRU caching strategy (denoted as 2PX) [5]. Also, it is compared with dynamic-conscious caching strategy that only considers the FCQPs and the ICQPs are ignored (denoted as DCC f ) and strategy that does not rank the query paths (denoted as DCC u ).

Figure 2(a) shows how the number of queries a X ects the cost ratio of the above caching strategies. In the experi-ments, the cache size is  X xed to 40Mb, while the number of queries varies from 1000 to 50000 (we use the DBLP dataset). It can be observ ed that cost ratio of the DCC is much lower than that of the 2PX approac h. Also, the DCC u and DCC f approac hes are less e X ectiv e than the DCC approac h but outp erform the nativ e LRU based ap-proac h. Similarly patterns can be observ ed for the average response time as shown in Figure 2(b).
