 incident detection [ 2 ] and travel time prediction [ 3 ], real-time map matching is a crucial step. It is because deviation generally exists between GPS traces obtained by real-time positioning system and actual paths. Real-time map matching is the process of identi X  fying the correct road segment on which the vehicle is traveling and the vehicle location on it. It receives a trajectory point stream which comes in a high rate and output the matching road segment in se quence in a real-time fashion.
 The most obvious real-time map matching al gorithm is to simply match each point with the nearest road segment, wh ich is called geometric analysis [ 7 , 8 ]. Due to meas X  urement noise, however, this algorithm is prone to error [ 5 ]. Topological analysis [ 6 ] extends geometric analysis by taking into account the relationship between road segments while results are far from expect ed. Although either geometric analysis or topological analysis is easy to implement and runs fast, its matching accuracy could not satisfy our matching accuracy demands. B ecause of problems like this, modern map matching algorithms paid great effort on improving the matching accuracy and proba X  bilistic model is widely used in map matching methods. The matching process can be illustrated by Fig. 1 (a) These algorithms can achieve a better matching accuracy for the reason that they use human labeled datasets as inputs to machine learning models to get some parameters used in the matching process. Nevertheless, they are not suitable for real-time map matching in different traffic conditions unless taking a lot of time labeling and training different dataset collected from various regions.
 Our work was motivated by an idea of developing an real-time map matching algo X  rithm that can adapt to the complex and changeable city traffic conditions without time-consuming human labeling in advance. See Fig. 1 (b), we use online learning techniques, which takes into account a small piece of tr ajectory data and their matching result to support the subsequent matching process. We evaluate the effectiveness of the proposed approach using ground truth dataset supplied by Microsoft in [ 5 ]. The results demon X  strate that our method is superior to the state-of-art real-time map matching algorithms at matching accuracy. To summarize, we make the following contributions:  X  We propose an accurate real-time map matching algorithm called OLMM without time-consuming human labeling beforehand.  X  Online learning is used in the matching process which makes the algorithm more universality to different travel conditions.  X  The proposed approach has a comparable running time with existing real-time map matching algorithms. It is followed by Sect. 3 , in which some preliminary definitions Conducted experiments are demonstrated in Sect. 5 and finally Sect. 6 concludes our contributions. matching. More than thirty map-matching algorithm are surveyed by Quddus et al. in [ 6 ]. They were categorized into four groups: geometric, topological, probabilistic and other advanced techniques.
 Geometric Analysis: Algorithms using geometric analysis take into account only the shape of the links, and not consider the way how they are connected. The simplest way known as point-to-point matching [ 7 ] simply match the trajectory point to the closest node of a road segment. This approach is easy to implement but low in matching accu X  racy. Another option is point-to-curve matching [ 8 ] which matches the current position unstable in dense urban networks. The othe r geometric approach known as curve-to-curve matching compare the vehicle X  X  trajectory against known roads and determining  X  X urve distance X  between them. Also, this appro ach is quite sensitive to outliers and not accuracy enough.
 Topological Analysis: A map-matching algorithm which makes use of the geometry of the links as well as the connectivity and contiguity of the links is known as a topo X  logical map-matching algorithm [ 6 ]. The brief version of the algorithm uses only coor X  dinate information on observed position of the user [ 9 ] which makes it very sensitive to outliers. To improve the performance of the algorithm, additional criteria and parameters are introduced including heading and speed [ 10 ].
 Probabilistic Map-Matching Algorithms: Probabilistic map-matching algorithms define a confidence region around the trajectory point obtained from GPS sensor and use evaluations including heading, connectiv ity and closeness to determine the optimal match segment [ 11 ]. An enhance version of probabilistic map-matching algorithm only construct an error region when the vehicle tr avels through a junction thus eliminate the introduction of incorrect link and unnecessary computation process [ 12 ]. Advanced Techniques: Advanced algorithms usually combine both topological and probabilistic information, while applying various techniques to assign road links to GPS readings [ 13 ]. They use more refined concepts such as Kalman Filter [ 14 ], Dempster-Shafer X  X  theory [ 15 ], Hidden Markov Model [ 4 , 5 , 16  X  18 ] and etc.
 While some map-matching algorithms using HMM have already been proposed, there are some issues that haven X  X  been considered in an real-time algorithm before. Most state-parameters used in their algorithms [ 4 ]. However, these parameters cannot been applied to process trajectories in different regions and time intervals. Moreover, it would spend a lot of time in labeling the dataset and train the parameters. For these reasons, using dynamic parameters is a feasible way to deal with these problems. We use local sequence learning process and sliding window to obtain dynamic parameters that will be used in our matching process. Detailed information will be illustrated in Sect. 4 . In this section, we will give the preliminaries and baseline model to formally define the problem of real-time map matching. 3.1 Problem Statement Definition 1 Trajectory. A trajectory T = p . lon , the latitude p i . lat and the time stamp p i . t .
 Definition 2 Road Segment. A road segment is a tuple R identify number of the road, R.v is the speed limit.
 Definition 3 Road Network. Road network is a collection of road segments which express digital map in an undirected graph G = ( V , E ) tions or end points of road segments while arcs E from V i to V j .
 Definition 4 Hidden Markov Model. Hidden Markov Model is a statistical Markov model in which the system being modeled is assumed to be a Markov process with unobserved (hidden) states. It can be represented in a tuple H H.S is a set of hidden states, H.O is a set of observations, H. X  is a matrix for initial state probabilities, H.A is a matrix for transition probabilities between hidden states and H.B is a matrix for emission probabilities which describes how likely an observation will appear for a given hidden state.
 Figure 2 , shows an ideal Hidden Markov Model process. The upper sequence S , S , ... , S observations. The arrows in the diagram denote conditional dependencies. And a represents the transition probability between S 1 and S probability that S 1 correspond to O 1 . 3.2 Baseline Model Before illustrating the flow path of our algorithm, some important concepts in Hidden Markov Model should be explained as background knowledge.
 for providing solutions to temporal recognition applications. In our map-matching algo X  rithm, the hidden states of the HMM are th e candidate road segments, the observations are trajectory points, the matrix of initial state probabilities describes how likely the first matching point is on its initial candidate road segments. Moreover, transition probabil X  ities depict the transition chance between road segments. Obviously, road segments close to each other or have a same connect ion node have higher transition probability than other road segment pairs. Finally, emission probability matrix describe the proba X  bility that the vehicle is on the candidate ro ad segment. Our goal is to match each location measurement with its proper road segment. Map-matching problem naturally fits the HMM, and practice has proved that it performs well in map matching algorithms. 4.1 Algorithm Framework The framework of our proposed OLMM map-matching algorithm is shown in Fig. 3 . It is compose of three major components: candi date preparation, transition analysis and matching result. The calculation of N-connection Matrix in transition analysis phase is the only offline pre-computing part in our algorithm.  X  Candidate Preparation: Data receiving and range query will be done in this phase.  X  Transition Analysis: This component constructs n-connection matrix construction matrix to calculate transition probabilities between road segments. After this compo X  nent, some candidate road segments will be removed using transition features in our n-connection matrix.  X  Matching Result: This component includes dynamic parameter generation and output map matching result. We use online learning techniques and maintain a sliding window to keep the dynamic parameter  X . And  X  will be used to calculate emission probabilities in HMM. The specific calculation process will be demonstrate in Sect. 4.3 . Meanwhile, online Viterbi algorithm is used to do our map matching process and matching results will be output.
 Here is an example: In offline pre-compu ting part, we input the road network and finish the computation of n-connection matrix. After that, in online computing and matching phases, we first identify a set of candidate road segments for every trajectory point. Then using transition probability from last candidate set and emission probability, we could find the maximum likelihood path over the Markov chain. The process is demonstrated in Fig. 4 .
 4.2 Transition Analysis In transition analysis, we use topological information of the road network to construct an n-connection matrix and calculate transition probabilities between road segments. Definition 5 n-connection. If two road segments have one common end point, they are 1-connection, else if they can be connected via n-1 road segments, they are n-connection. However, if the possible path violates traffic rules (e.g. a reverse drive is forbidden in a one-way road segment), the transition probability between them is zero. Transition probability decreases wh ile n increases in n-connection road segment adjacency matrix. graph nodes describes road segments X  end points, E are straight road segments connected by two end points. Figure 5 (b) shows the n-connection adjacency matrix for road network in Fig. 5 . The header of columns represents the  X  X rom X  road segment and the header of the rows are  X  X o X  road segments . Finally, we got the normalized formula to calculate the transition probability from a given road segment to others. while a[i][j] stands for the adjacency coefficient in the matrix. In addition, k refers to all road segments X  id that satisfy a [ i ][ k ] != 0 .
 200 m to the current GPS point as its candida te road segments. For those whose transition current candidate set to reduce computation time in our matching process.
 4.3 Matching Result parameter  X , and then calculate the emission probabilities from the candidate road segment to the current trajectory point.
 Emission probability refers to the possibility that the trajectory point is on that road segment. We model the emission probability with Gaussian distribution because this model is proved to be effective in previous works. [ 5 ] We denote emission probability that p  X  is the estimated standard deviation of GPS error, ground circle distance between the trajectory point and its projection point on the road before running the algorithms using human-labeled datasets. However, due to the differ X  different matching conditions to obtain a best matching result. Moreover, human labeling and parameter training will take unpredictable time which makes it not univer X  sality in real time navigation systems.
 Therefore, we use online learning techni que to get a dynamic parameter  X  during our matching process. Firstly, we assume that the distribution of trajectory points from its correct matched road segments complies with standard Gaussian distribution, that is to say, we set  X  = 1 as an initial parameter. Secondly, we maintain the latest m matching indicates. This online learning technique co uld adapt to changeable urban traffic condi X  tions for the reason that during our matching process,  X  will be updated refer to the latest matching result. When we calculate the distance from point p to its projection point on a candidate road segment, we use Haversine Formula. The Haversine formula is an equation impor X  distance is given by d = 2r a rc Our matching process uses online Viterbi Algorithm which was detailed described in [ 4 ], so we just leave out this part. 5.1 Experiments Setup In our experiment, we conduct our algorithm on a ground truth dataset. The dataset is collected by Microsoft in [ 5 ] and is publicly available. It contains 7531 time stamped latitude/longitude pairs sampled at every second on the Seattle road network that consists of 418 k cross points and 875 k road segments. The route is about 80 km (50 miles) long. OLMM map matching algorithm is implemented in C++. Experiments are conducted on PC with Intel X  Core X  i5-2450 M CPU and 4G memory under Windows.
 of the map matching algorithm is quantified by comparing the ground truth route to the route determined by our algorithm. We sum the lengths of correctly matched route and divide this sum by the length of the ground truth route, which is the matching accuracy value we report. This standard can be demonstrate by formula ( 6 ).
 5.2 Accuracy Performance Figure 6 (a) shows the impact of sliding window si ze on the average of  X . In the figure we could infer that dynamic parameter varies along with the sliding window size changes, while fixed parameter stays stable. When the sliding window size is up to fifteen or more, the average number of  X  becomes almost the same and we could say that using a sliding window larger than fifteen could get a stable output of matching result. Figure 6 (b) illustrates the impact of sliding window size on the matching accuracy of OLMM. In the figure, it is obvious that OLMM could get an almost stable and high matching accuracy around 98.5 % when the slid ing window size is up to fifteen or more. Table 1 demonstrates the best accuracy pe rformance of different map-matching algorithm using the same dataset. Point-to-point map-matching matches the trajectory point to its nearest road segment, OHMM map-matching [ 4 ] uses SVM to train the human labeled dataset and a fixed trained parameter was used to do real-time map matching, OLMM is our algorithm which uses online learning. From the table we can conclude that our matching algorithm outperforms point-to-point map-matching and OHMM map matching in best matching accuracy.
 5.3 Running Time Performance In Fig. 7 , comparison of candidate road segm ents for OLMM whether using transition analysis is displayed. It is obvious that using transition analysis to filter incorrect road segments greatly reduce the number of can didate road segments for trajectory points while accuracy performance is not affected acco rding to the experime nt result. For 7531 trajectory points in our dataset, more than 2200 points only have candidate road segments of 0 ~ 5 using transition analysis filter instead of around 600. This will sharply reduce running time in the matching process.
 Running time performance of matching algorithms using transition analysis or not matching time for 7531 trajectory point from 1275.11 s to 504.844 s. For each trajectory point, the average matching time is cut down from 0.1693 s to 0.0670 s. In this paper, we describe an accurate real-time map matching algorithm called OLMM. The algorithm employs online learning tech nique to execute map matching process in a real-time fashion, without any human labeling in advance.
 more, we analyze the performance on ground truth data in two dimensions: accuracy and running time. The experiment results show that our algorithm can be used in real time GPS devices to acquire a more precision matching result than existing real-time map matching algorithms even without time-consuming human labeling in advance.
