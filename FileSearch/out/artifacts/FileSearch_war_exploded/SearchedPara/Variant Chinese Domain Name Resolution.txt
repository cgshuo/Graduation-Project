 JENG-WEI LIN Tunghai University JAN-MING HO Academia Sinica LI-MING TSENG National Central University and FEIPEI LAI National Taiwan University 11: 2  X  J.-W. Lin et al. 1. INTRODUCTION Many efforts in past years have been made to lower the linguistic barriers for non-native English speakers to access the Internet. However, the tra-ditional Internet Domain Name System (DNS) [Lampson 1985; Mockapetris 1987; Danzig et al. 1992] does not support multilingual scripts. Traditionally, the composition of domain labels 1 is restricted to ASCII letters, digits, and hyphens (abbreviated as LDH characters). The introduction of IDN (Interna-tionalized Domain Name) allows people to use their native language to name and access Internet hosts. Examples of IDNs are  X  c ' x .tw, W X K X [ X  .jp, and tsch  X  u X .de. The IETF (Internet Engineering Task Force) IDN Working Group focused on the development of a specification to access domain names in a range of scripts that is broader in scope than the original ASCII. This work resulted in Internet standard RFC 3490, referred to as IDNA (Internationaliz-ing Domain Names in Applications), that specifies the encoding and decoding of IDLs (Internationalized Domain Labels), which are Unicode strings, into and out of LDH domain labels [Faltstrom et al. 2003; Hoffman and Blanchet 2003; Costello 2003]. To process IDNs properly, IDNA requires that an IDNA-compliant module be integrated into every Internet application so that the current DNS infrastructure can be used without modification.
 However, IDNA does not address the linguistic issues of individual cultures. Domain names usually appear in URLs, e-mail addresses, etc., which are vis-ible to users. It is likely that users recognize domain names as meaningful words or phrases. Consequently, domain name resolution is a string matching problem that takes not only codepoint comparison into account. In the real world, equivalent names (or aliases) can be introduced in many ways: char-acter variant substitution, word variant substitution, content-based synonym substitution, and so on. In the traditional DNS, ASCII letters in a domain name are case-insensitive. In addition, to associate an alias with its registered domain name, the alias is enumerated explicitly by using a CNAME [Lamp-son 1985; Mockapetris 1987] or DNAME [Crawford 1999] resource record (RR). As shown in Figure 1, ADMIN.FOO, admin.foo, advisor.who.foo, and ad-viser.idv.foo all refer to adviser.idv.foo. However, most existent systems did not support DNAME RRs when this article was written. Therefore, the domain registrars had to explicitly create these domains and properly configure the corresponding zone files.

IDNA enlarges the name space of domain names by introducing Unicode characters into the DNS. However, the use of characters that have simi-lar interpretations and/or appearances could create confusion. For example, some Cyrillic characters fully coincide with Latin characters in lower case: a 11: 4  X  J.-W. Lin et al. (U+0430 2 ), c, e,  X  , M , o, p, x, y. Also, 12 Cyrillic characters fully coincide with Latin characters in upper case: A (U+0410), B, C, E, H, K, M, O, P, T, X, y . Note that ASCII capital letters and small letters are considered as case-insensitive, for example, ASCII A (U+0041) = ASCII a (U+0061), when they are used in a domain name; as well, in the IDNA architecture, Cyrillic A is case-mapped (or case-folded) to Cyrillic a. However, ASCII a and Cyrillic a are not recog-nized as the same character. Consequently, a security alert, referred to as IDN spoof, was issued in February 2005 [Secunia Stay Secure 2005]. Similar lin-guistic issues arise in other languages. For example, a Chinese domain name may have two forms, one in Simplified Chinese and another in Traditional Chi-nese; a Japanese domain name may have three forms in Kanji, hiragana, and katakana, respectively. Therefore, IDNs are further required to be localized.
Due to region-specific interpretations of strings used in IDNs, the confu-sion may require different solutions. Individual zone administrators may find it necessary to impose restrictions and procedures to reduce the likelihood of confusion and unstable references within their own environments. Some re-searches suggested that while these issues are important, they could best be addressed administratively, rather than through restrictions embedded in the protocols [Konishi et al. 2004]. John Klensin proposed a multilayer search ar-chitecture that addresses the linguistic issues in a mechanism layered above the DNS [Klensin 2004]. 1.1 Han Character Variants In this article, we address the resolution of variant IDNs into their registered IDNs. Specifically, we target at Han character variants [Zhang et al. 1989; Hanyu da zidian Editorial Committee 1986; Education Ministry of the ROC 2001; State Council of the PRC 1986]. Note that the relationship between Simplified Chinese and Traditional Chinese is a special case of Han character variant relationships. Two Han characters are said to be (character) variants of each other if they have the same meaning and are pronounced the same. Furthermore, Han character variants usually have similar appearances. 3 In other words, they should be matched as equivalent characters. For example, and (U+771E). Chinese people recognize  X  (mosque, U+6E05 U+771F U+5BFA) and  X   X  (U+6DF8 U+771E U+5BFA) as equivalents. Clearly, this will cause confusion if the two terms yield different results when they are used to access the same object.

A variant IDN, derived from an IDN by replacing some characters with their variants, should match the original IDN. If variant IDNs are considered as different IDNs by IDN registries and registered by different name holders, the confusion may cause serious consumer protection problems. For example, tricksters may register @ (U+570B U+7A0E U+5C40) to cheat or defraud users who want to access the Web site of @ (National Taxation Bureau, U+570B U+7A05 U+5C40). In another scenario, cybersquatters may register -O b (U+4E2D U+784F U+9662) to extort money from the name holder who owns -b (Academia Sinica, U+4E2D U+7814 U+9662).

The codepoint substitution of Han character variants is somewhat similar to the case folding of ASCII letters. However, Han character variant relation-ships are more complicated. Some are context-free while others are context-sensitive. Some are used more frequently than others, and some are only found in ancient literature. In addition, variant relationships recognized in one re-gion may not be recognized in other regions. For example, the variant rela-tionship between  X  (U+5DBD) and  X  (U+5CB3) is context-sensitive. Chinese speakers recognize  X   X  (the Five Mounts, U+4E94 U+5DBD) as equivalent to  X   X  (U+4E94 U+5CB3), but do not recognize  X   X  (U+5DBD U+98DB) as equivalent to  X   X  (a Chinese hero X  X  name, U+5CB3 U+98DB).  X  (U+62FE) is equivalent to A (U+5341) when they are used for counting. For example, Chi-nese speakers recognize  X  (ten dollars, U+62FE U+5713) as equivalent to A (U+5341 U+5713). However, they do not substitute A for  X  in the idiom  X   X  ' (U+62FE U+91D1 U+4E0D U+6627). Chinese speakers recognize  X  (U+82B8) as a simplified variant of S (U+8553), and z (U+827A) as a sim-plified variant of  X  (U+85DD). Meanwhile, people in Taiwan also recognize  X  as a variant of  X  . In some ancient literature, 6 (U+7136) and  X  (U+71C3) were used interchangeably to mean burning. Today, 6 and  X  are rarely inter-changeable in common usage.

The People X  X  Republic of China published in 1964 and republished in 1986  X  X  Complete Set of Simplified Chinese Characters X  which specifies how Tra-ditional Chinese characters are simplified [State Council of the PRC 1986]. It includes three tables which totally list 2,235 Simplified Chinese characters simplified from 2,261 Traditional Chinese characters. It also includes an ap-pendix which lists 39 selected variants to replace 46 Traditional Chinese char-acters. Note that according to the simplifying rules, there are other Simplified Chinese characters derived from Traditional Chinese characters, but not listed in the three tables. The relationships between Simplified Chinese characters and Traditional Chinese characters are not always one-to-one mapped. For example, both | (U+767C) and  X  (U+9AEE) are simplified to  X  (U+53D1); both w (U+6B77) and  X  (U+66C6) are simplified to  X  (U+5386). The interpretations of such Simplified Chinese characters are context-sensitive. Furthermore, some Simplified Chinese characters are frequently-used Tra-ditional Chinese characters, which have their own meanings in Traditional Chinese contexts. For example,  X  (U+81FA),  X  (U+6AAF), and  X  (U+98B1) 11: 6  X  J.-W. Lin et al. are simplified to  X  (U+53F0). In Traditional Chinese contexts,  X  and  X  al-most have the same meanings, but  X  ,  X  , and  X  seldom do. ~ (U+4E7E), y (U+5E79), and  X  (U+69A6) are simplified to r (U+5E72). However, the four characters almost have different meanings in Traditional Chinese contexts. Furthermore, ~ is not simplified to r when used in the following contexts: ~ d (U+4E7E U+5764), ~  X  (U+4E7E U+9686), and so on.

Over the centuries, the evolution of Han characters in different regions has given rise to the situation where one conceptual character can have different appearances and be identified by several different codepoints in computers. Consequently, the charset encodings used in different regions, such as BIG5, GB-2312/GBK, JIS X 0208, and KS C 5601 4 , might give preference to some character variants. For example, 3 (U+5433), 4 (U+5434), and I (U+5449) are the same character with different appearances in BIG5, GB-2312, and JIS X 0208 respectively. They have separate codepoints and are variants of each other in Unicode. Table I shows some other preferences in Han character vari-ants in Chinese, Japanese, and Korean (abbreviated as CJK). Meanwhile, peo-ple in different areas may give new meanings to a Han character. For example, &lt; (U+4E3C) in Chinese resembles the sound of throwing a stone into a well (  X  , U+4E95); in Japanese, &lt; means a food bowl with rice in Japanese cuisine. Today, many Chinese also recognize such usage of &lt; . 1.2 Language Variant Tables and IDL Packages Due to the inherent complexity of Han character variant relationships, generic Han character folding X  X eferring to codepoint-base substitution for Han char-acter variants, similar to case folding of alphabetic characters X  X s usually treated as technically hard. Furthermore, domain names are usually short strings without a context. For example,  X   X  (U+53F0 U+98CE) may refer to  X  X  (typhoon, U+98B1 U+98A8) or  X   X  (stage manner, U+81FA U+98A8). Name holders and Internet users may have different usage of Han character variants, even if they speak the same language and live in the same region. For example, although many people recognize  X  (U+5CF0) and  X  (U+5CEF) are context-free character variants, some still prefer  X  and refuse to use  X  in their names. Some researchers considered that Han character folding is out of the scope of IDN standardization and should best be addressed administra-tively [Seng et al. 2001]. On the other hand, in order to minimize the need to do multiple registrations and delegations for variant IDLs, Tseng et al. pro-posed to convert Han characters between Traditional Chinese and Simplified Chinese if the character variants used in an IDN are context-free [Tseng et al. 2001; Lee et al. 2001]. 11: 8  X  J.-W. Lin et al.
 In RFC 3743 [Konishi et al. 2004], referred to as JET (Joint Engineering Team) Guidelines, a set of IDN registration and administration guidelines is defined for applying restrictions to CJK scripts and the zones that use these scripts. A domain registry could define its own local rules for permitted charac-ters and the handling of IDLs and their variants. The Language Variant Table (LVT) mechanism is used to enforce language-based character variant prefer-ences. In a LVT, each row lists a valid character that is permitted to be used in an IDL, its preferred variants and other variants. As shown in Figure 2 and Figure 3, LVT t w [TWNIC 2005] and LVT cn [CNNIC 2005] are the LVTs for Traditional Chinese and Simplified Chinese, submitted to IANA (Internet As-signed Numbers Authority) by TWNIC (Taiwan Network Information Center, the domain registry for . tw ) and CNNIC (China Internet Network Information Center, the domain registry for . cn ) respectively.
 When an IDL is registered, a collection of its variant IDLs, known as an IDL package, is created according to the zone-specified LVTs. All variant IDLs in the IDL package are unavailable to other name holders. In addi-tion to the registered IDL, the name holder can request the domain registry to activate some of the variant IDLs in the IDL package, free or by an ex-tra fee. Activated IDLs are stored in the zone files and thus become resolv-able, and other IDLs are reserved. If a domain registry allows an IDL to as-sociate with more than one language or script, multiple LVTs will be used to create the IDL package. For example, TWNIC and CNNIC employ a reg-istration policy that allows an IDL to associate with both Traditional Chi-nese and Simplified Chinese. When an IDL  X  c ' x (National Taiwan Uni-versity, U+81FA U+7063 U+5927 U+5B78) is registered, an IDL package is created according to LVT t w and LVT cn . By substituting one or more char-acters in the IDL with their variants, the package includes 30 IDLs that are mutually variant IDLs of each other, as shown in Figure 4. While two of them,  X  c ' x and  X  ~ ' f , are activated, others are reserved. Note that we can use the expression [  X   X   X  I  X  ] [ c ~ ][ ' ][ xf ] to enumerate the set of the variant IDLs in this package. The expression is an OR-AND-like expression [IEEE Standard 1003.2-1992], in which the n -th bracketed clause lists the character variants of the n -th character in the IDL and the 11: 10  X  J.-W. Lin et al.
 concatenation of a character in each bracketed clause forms a variant IDL. 5 We denote the expression as the variant expression of this IDL package in this article. In some cases, context-sensitive character variants might be improper in an IDL package, such as  X  , I , and  X  in this example. A domain registry may optionally impose additional rules and processing activities to reduce an IDL package. For example, at the moment the authors wrote this article, when registering an IDL in TWNIC, name holders might see a Web page on which they could manually select proper character variants among all character vari-ants listed in the zone-specific LVTs. Figure 5 shows a reduced version of the IDL package shown in Figure 4, after the domain registry has removed some improper variant IDLs, and the name holder has requested to activate one more variant IDL,  X  c ' x . Again, we can enumerate the variant IDLs in the reduced IDL package by the variant expression [  X   X  ] [ c ~ ][ ' ][ xf ].
An IDL package is an atomic unit for IDL registration. Once an IDL package is created, no IDLs can be inserted into or removed from the IDL package during its lifetime. However, the name holders can dynamically request the domain registry to activate and deactivate some variant IDLs. When the IDL package is destroyed, due to either unregistered or revoked, all IDLs in the package are available again to all name holders at the same time.

Note that the complete and proper IDL packages from the viewpoints of the domain registry, name holder, and users may still differ. People may have dif-ferent usage of some character variants even though they live in the same re-gion and speak the same language. Furthermore, some popular domain names may be demanded by many name holders. However, an IDL should be owned by one name holder in the domain name system. That is, IDL packages should not overlap. A domain registry has to take some administrative processes to prevent from overlap with IDL packages. In general, a domain registry can em-ploy some FCFS (first come, first serve)-like registration policy. A name holder can claim the ownership of an IDL package including an IDL and its variant IDLs according to the domain specific LVTs. When an IDL is registered, the name holder can ask help from linguists to create a proper IDL package. When there is disputation, that is, there are two or more name holders claiming the ownership of an IDL, the name holders or domain registry may refer to the local laws of trademark or other related specifications to resolve the disputa-tion. Once the ownership of an IDL or its variant IDL is transferred or revoked, it may result in the revocation of the whole IDL package and recreation of a new IDL package. 1.3 Activation of Variant IDLs Zone-specific LVTs provide a mechanism for domain registries and name hold-ers to find possible variant IDLs and the atomicity of IDL packages suppress the possibility of problems such as IDN spoofing, IDN cybersquattering, and so on. The JET Guidelines focuses upon the administration of IDL registration; however, it does not address the implementation issue.

It is intuitive for domain registries to enumerate each of the activated vari-ant IDLs through DNAME and CNAME RRs explicitly so that they become resolvable, as shown in Figure 6. However, an issue of scalability arises when there are a large number of variant IDLs to be activated. The DNS is a hier-archical distributed database. It usually requires seamless cooperation from multiple domain registries to make a correct configuration so that the DNS can provide reliable and efficient domain name resolution. When the number of variant IDLs is large, it becomes very complex for domain registries to keep track of activated and reserved-only variant IDLs and to make sure which are resolvable and which are not. In addition, some Internet services need more than domain name resolution. For example, Web and e-mail services use a do-main name to identify a network object, such as a Web page, an e-mail address, and so on. When a user requests a network object via a variant IDN, the server will reject the request because generic string comparison does not match the variant IDN with its registered IDN. Therefore, administrators of such ser-vices have to explicitly enumerate the variant IDNs as aliases into the server configuration files. However, the number of an IDN X  X  variant IDNs is usually much larger. For an IDN composed of three IDLs, each of which has three vari-ant IDLs, the number of its variant IDNs is 64. In Section 3, we will see that such IDNs are not unusual when Han characters are used. At the moment the authors wrote this article, in addition to the registered IDL, TWNIC and CNNIC by default activated two variant IDLs, one consists of only Traditional Chinese characters, and the other consists of Simplified Chinese characters. 11: 12  X  J.-W. Lin et al.
 However, it is not easy for generic users to understand why some variant IDLs are resolvable and others are not. Since most existent systems did not support DNAME RRs, only a few IDLs are registered as a new zone, and most of them are used only for Web access. In Lin et al. [2006], it is shown that many un-successful IDN accesses in the Internet are caused by incorrect configuration of domain name servers and Web servers. A mechanism to resolve the variant IDNs into the registered IDN is therefore needed.
 This article presents a resolution protocol to resolve the variant IDLs in an IDL package into the registered IDL. Instead of using DNAME or CNAME RRs to enumerate each of the variant IDLs, we introduce a new RR type, denoted as VarIdx, to associate a variant expression, such as [  X   X  ][ c ~ ][ ' ][ xf ] in the previous example, with the registered IDL, as shown in Figure 7. The label of a VarIdx RR, denoted as the variant index, is computed by an indexing function that is designed to give the same variant index to all of the variant IDLs enumerated by the variant expression. When an IDL is registered, the registrar partitions its variant IDLs according to the indexing function so that all variant IDLs in a part have the same variant index. The registrar then stores a VarIdx RR for each part. When one of the variant IDLs is used to access a network object, Internet applications can compute the variant index, look up the VarIdx RRs, and finally, resolve the variant IDL into the registered IDL.

This article also presents a Web redirection service that employs our reso-lution protocol to resolve the variant IDLs in user requests and then redirects the requests by replacing the variant IDLs with the registered IDLs. We build a three-level trial IDN service of six domains in which the registrar stores the registered IDLs, as well as the related VarIdx RRs into the zone files. Mean-while, we set up a Web redirection server that uses VarIdx RRs to resolve the variant IDLs in an IDL package into the registered IDL. In each domain, a  X * X  RR, that will match any unregistered domain label, is stored in the zone files so that user requests with unregistered domain labels in this domain will be sent to the redirection server. On receipt of a user request, the redirection server finds the unregistered label, computes its variant index, and looks up the VarIdx RRs. If the right VarIdx RR is found, the request can be redirected to the URL with the registered IDL. Label by label, user requests with variant IDNs can be redirected to the URLs with the registered IDNs.

The remainder of this article is organized as follows. In Section 2, we de-scribe the construction of the indexing functions, the partition of the variant IDLs, and the resolution protocol. In Section 3, we further study different indexing functions based on different LVTs. In Section 4, we present a mul-tilevel redirection service that employs our resolution protocol to resolve the variant IDNs in user requests into the registered IDNs. Finally, in Section 5, we present our conclusions. 2. VARIANT IDL RESOLUTION 2.1 Variant Expression When an IDL is registered, an IDL package is created according to the zone-specific LVTs.

As the examples shown previously, given a registered IDL L = X 1 1 X 1 2  X  X  X  X 1 d variant IDLs of L can be enumerated by the variant expression Note that individual registries may optionally impose additional rules and processing activities to modify the IDL package. If some (context-sensitive) in the reduced IDL package can be enumerated by The numbers of the variant IDLs enumerated by E and E 0 are n 1 * n 2 *  X  X  X  * n d and m 1 * m 2 *  X  X  X  * m d respectively. 2.2 Construction of Indexing Functions In this subsection, we describe the construction of an indexing function H that will give the same value to the variant IDLs enumerated by a variant expres-sion.

The idea is to assign the same value to character variants. If X and Y are character variants of each other, we assign For an IDL L = X 1 X 2  X  X  X  X d , we assign as the variant index. If X 0 is a character variant of X i (1  X  i  X  d ), by definition, equals H ( L ) .
 We can construct an indexing function as follows.

Character variants are grouped together according to language variant ta-bles. Figure 8 shows a snapshot of the graph of variant groups for the construc-tion of an indexing function H t w cn according to LVT t w cn (the union of LVT t w and LVT cn ). Each node in the graph represents a character and each edge 11: 14  X  J.-W. Lin et al.
 represents a variant relationship between two character variants. A connected component represents a group of character variants. A character that does not have any variants forms a variant group on its own. Note that because of the transitive law, two characters may be grouped together, even if they are not variants of each other. For example, | (U+767C) and  X  (U+9AEE) are grouped together because they are variants of  X  (U+53D1). After grouping all character variants, we assign a unique value for each variant group. For an n -member variant group G = { C 1 , C 2 ,... C n } , we assign where the function MIN() returns the minimal value of the input set. Referring to Figure 8, we have 2.3 Partition of Activated Variant IDLs For each zone, the domain registry can construct an indexing function accord-ing to the zone-specific LVTs such that the indexing function will give the same variant index to all of the variant IDLs in an IDL package registered in that zone. For example, H t w cn will give the same variant index to all of the variant IDLs in an IDL package registered in a zone that adopts LVT t w cn .
However, individual domains may adopt different LVTs. For example, in some domain,  X  (U+82B8) is recognized as a variant of  X  (U+85DD), and z (U+767A) as a variant of | (U+767C). However, the two variant relationships are not listed in LVT t w cn , as shown in Figure 8. We assume that a name holder registers an IDL M  X  | h (U+624D U+85DD U+767C U+8868 U+6703) in that domain and its variant IDLs are enumerated by the variant expression H w cn ( M  X  | h ) 6 = H t w cn ( M  X  z h ). H t w cn will not give the same variant index to all of the variant IDLs enumerated by E  X  .

The domain registry can construct a proprietary indexing function H 0 , whose graph of variant groups is shown in Figure 9, such that H 0 gives the same variant index to all of the variant IDLs enumerated by E  X  . On the other hand, the domain registry can use H t w cn to partition the set {  X  ,  X  , z ,  X  } into two subsets {  X  ,  X  , z } and {  X  } , and also partition { | , B ,  X  , z } into { | , B ,  X  } and { z } . Therefore, the variant IDLs enumerated by E  X  can be partitioned into four parts as follows:
As a result, H t w cn gives M  X   X  h , M  X  z h , M  X   X  h , and M  X  z h four variant indices can be enumerated by the variant expression [ M ][  X   X  ][  X  z ][ h ][ ].

Given an indexing function H , for a registered IDL L = X 1 1 X 1 2  X  X  X  X 1 d and the set of its variant IDLs enumerated by a variant expression proper variants of X 1 i for 1  X  i  X  d , we can decompose E such that 11: 16  X  J.-W. Lin et al. 1  X  i  X  d ; that is, (2) 5 a i  X  5 b i =  X  , if a 6 = b , (3) H ( x ) = H ( y ) , if x , y  X  5 a i , and (4) H ( x ) 6 = H ( y ) , if a 6 = b , x  X  5 a i , y  X  5 b i .
 In other words, we can decompose E into k 1 * k 2 *  X  X  X  * k d parts, each of which is H will give the same variant index to all variant IDLs in a part. The number of variant IDLs enumerated by E is The set of different variant indices is and the number of different variant indices is where Unique () is the function that returns the set of each unique member in the input set. 2.4 Variant IDL Resolution Protocol To provide information for variant IDL resolution, a new RR type, denoted as VarIdx, is introduced to associate a variant expression with its registered IDL. When an IDL L is registered, its variant IDLs are partitioned according to an indexing function H . We assume E =  X  E i . For each part E i , the registrar stores a VarIdx RR in the zone files to associate E i with L . The label of that RR is H ( L i ), where L i is a variant IDL of L in E i . The format of the VarIdx RR is as follows: Instead of storing | E | CNAME (or DNAME) RRs, the registrar stores | I H ( E ) | VarIdx RRs in the zone files. For example, in a zone that adopts H t w cn , the registrar stores the following VarIdx RR for the IDL  X  c ' x in the zone files.
For the IDL M  X  | h , the registrar stores the following four VarIdx RRs in the zone files.

When an Internet application gets a variant IDL L 0 , either from user input or application content, it can compute H t w cn ( L 0 ), look up the VarIdx RRs, and find the registered IDL, as shown in Figure 10.

Since an indexing function may give two characters the same value, even if they are not variants of each other, it may give two IDLs the same variant index, even if they are not variant IDLs of each other. For example, H t w cn will give the same variant index  X   X  (U+53F0 U+51E8) to the following two IDLs  X  X  (typhoon, U+98B1 U+98A8) and  X   X  (stage manner, U+81FA U+98A8), that is,
If two IDL packages, enumerated by [  X   X  ][  X  X  ] and [  X  ][  X  X  ] respectively, are both registered, there will be two VarIdx RRs labeled as the same variant index, as shown in Figure 10. This phenomenon is referred to as a collision. Note that the two IDL packages do not overlap. The ownership of  X   X  is determined by the domain-specific disputation resolution process. As a result, when one variant IDL of the two IDLs is queried, the domain name server will return two VarIdx RRs at the same time, one for each other. Therefore, Internet applications must verify each of the returned VarIdx RRs to ensure that the right VarIdx RR is used to resolve the variant IDL in question. 11: 18  X  J.-W. Lin et al.

Assume H is the adopted indexing function. The pseudo code of variant IDL resolution is as follows:
For an IDL package enumerated by a variant expression E , the space re-quirement is reduced from | E | CNAME (or DNAME) RRs to | I H ( E ) | VarIdx RRs. In Section 3, we will see that although the number of variant IDLs is usually large, the number of variant indices is significantly reduced to 1 or 2 by using a good index function, such as H t w cn . Since there are less RRs in the database of the domain name server, the time for each RR lookup is reduced. The time to compute the variant index of an IDL is trivially linear to the length of the IDL by table lookups. However, small devices, such as PDAs or cellular phones, may suffer the large memory size of the indexing function.
Note that individual zones may define their own indexing functions, or just adopt a well-defined indexing function, such as H t w cn . From the viewpoint of software practice, there must be a mechanism to specify the indexing function for each zone; otherwise, all zones must use the same indexing function. We will evaluate different indexing functions in Section 3.

The proposed resolution protocol can be integrated into domain name servers, DNS resolvers, application servers, clients, or proxies. In Section 4, we will investigate a server-side redirection service that employs the protocol to redirect user requests to the URLs with the registered IDNs. 3. EVALUATION OF INDEXING FUNCTIONS In this section, we further study different indexing functions constructed ac-cording to different variant tables. We consider an indexing function good when it meets the following requirements: 1) for an IDL, the number of VarIdx RRs required for activating its variant IDLs is small, and 2) there are few col-lisions of variant indices, even in a large domain in which thousands or maybe more IDLs are registered. Note that on receipt of a VarIdx query, the domain name server will return all VarIdx RRs that associate with the specified vari-ant index. If there are many VarIdx RRs in match, the DNS response will cost a large data transmission on the Internet. We collect Chinese IDLs registered currently and calculate the numbers of VarIdx RRs required for activating all of their variant IDLs and collisions of variant indices when different indexing functions are applied.
 We collect Chinese IDLs from two registries, TWNIC for the .tw domain and CNNIC for the .cn domain. They both implement a registration policy that allows a registered IDL to associate with Traditional Chinese and Simplified Chinese. However, when a Traditional/Simplified Chinese IDL is registered, the name holder can activate only one variant Simplified/Traditional Chinese IDL in the IDL package. Table II shows some statistics of these IDLs. On average, the IDLs registered in CNNIC are shorter than those in TWNIC. Al-though the average number of variant IDLs that an IDL may have is small, the maximum number is large.
 Figure 11 and Figure 12 show the distribution of the registered IDLs in CNNIC and TWNIC respectively, according to their lengths, that is, the num-ber of characters in an IDL. In CNNIC, 72% of the IDLs are shorter than five characters. In TWNIC, 40% of the IDLs are shorter than five characters, but there is a peak distribution (19%) where the length is seven characters. In both registries, long IDLs are usually the names of entities in hierarchical organiza-tions, such as  X  -q @ l @ (the Office of Zhongshan District, Taipei City). It reveals the inadequacy of the current implementation for IDN delegations in the DNS hierarchy.

Figure 13 and Figure 14 show the distribution according to the numbers of their variant IDLs. In CNNIC, 94% of the IDLs have fewer than eight vari-ant IDLs, while in TWNIC, 91% of the IDLs have fewer than 16 variant IDLs. However, 607 IDLs in CNNIC and 861 IDLs in TWNIC have more than 64 11: 20  X  J.-W. Lin et al.
 variant IDLs; and 41 IDLs in CNNIC and 28 IDLs in TWNIC have more than 512 variant IDLs. Although the ratio of these IDLs is small, they do have a large number of variant IDLs. Figure 13 and Figure 14 also show the distribu-tion curves of different lengths, which shift to the right as the length increases. This is reasonable, because the longer an IDL, the more variant IDLs it might have. Figure 15 and Figure 16 also exhibit this property.

We study three indexing functions in this section. The first is H unihan , con-structed according to LVT unihan (the Unihan database [The Unicode Consor-tium 2002]); the second is H t w cn , constructed according to LVT t w cn ; the third is H hanyu , constructed according to LVT hanyu (the character variant table in Hanyu Da Dictionary [Hanyu da zidian Editorial Committee 1986]). Table III shows some statistics of the three indexing functions. LVT hanyu lists several more variant relationships than the others. Figure 17 and Table IV show some differences among the three index functions.

We calculate the numbers of VarIdx RRs required for activating all of the variant IDLs and collisions of variant indices when these indexing functions are adopted. Figure 15 and Figure 16 show that, on average, for a Chinese IDL, we only need to store one VarIdx RR in the zone files to activate all of its variant IDLs. LVT unihan lists fewer variant relationships. If one relation-ship out of LVT unihan is used in an IDL registration, H unihan cannot give the same variant index to all of its variant IDLs. Therefore, the IDL package is partitioned and the registries need to store slightly more VarIdx RRs. Table V shows the maximum number of VarIdx RRs required in the two domains. The numbers are all small. In fact, 99.99% of the IDL packages in both . tw and . cn domains require just one VarIdx RR. The scalability issue that arises 11: 22  X  J.-W. Lin et al.
 when there are a large number of variant IDLs to be activated is successfully eliminated.

Table V also shows the maximum numbers of collisions of a variant index (the maximum number of VarIdx RRs that have the same variant index) and the numbers of total collisions (the number of variant indices that are used by two or more VarIdx RRs) in the two domains when the three indexing functions are adopted. Among the 72,020 IDLs and 21,734 IDLs registered in CNNIC and TWNIC respectively, at most two VarIdx RRs have the same variant index when H unihan or H t w cn is used and at most five VarIdx RRs have the same index when H hanyu is used. These numbers are small. The data transfer for VarIdx RRs in a single DNS response is small. However, the numbers of total collisions significantly increase when H hanyu is used. LVT hanyu lists several more variant relationships than the other LVTs. Many characters are grouped together even though they are not variants of each other. We observe that the largest variant group in H hanyu has 81 character variants, which are divided into 65 variant groups in H unihan and 62 variant groups in H t w cn , respectively. The possibility of collisions increases when H hanyu is adopted.
 slightly more VarIdx RRs to activate all of the variant IDLs in an IDL package. On the other hand, LVT hanyu lists several more variant relationships. The possibility of collisions increases. We believe that H t w cn is a good candidate for global use in resolving variant Chinese IDNs. 4. VARIANT IDN REDIRECTION SERVICES The proposed resolution protocol can be integrated into the DNS or Internet applications. For some Internet applications, such as Telnet and FTP, which simply use a domain name to look up the IP address for connection setup, inte-gration of the resolution protocol into the DNS can provide transparent variant IDN resolution. However, some Internet applications, such as Web and e-mail, also use domain names to identify network objects. These applications have to resolve a variant IDN into the corresponding registered IDN. Generally speak-ing, when resolving variant IDLs in the server side, the load on the servers of a single query increases. When resolving variant IDLs in the client side, however, it requires additional messages and introduces a longer delay. Fur-thermore, resource-constraint devices, such as cellular phones and PDAs, may suffer the large memory size of the indexing function. In this section, we in-vestigate a server-side redirection architecture which employs our resolution protocol to redirect a user request with a variant IDL to the URL with the registered IDL. 4.1 Redirection Service Architecture To comply with JET Guidelines, when an IDL is registered, an IDL package is created according to LVT t w cn . However, we store only the registered IDL in the zone files. We use H t w cn to partition its variant IDLs and store a VarIdx RR for each part, as stated in Section 2. The VarIdx RR is simulated by using a TXT RR [Mockapetris 1987] as follows: variant index TXT VARIDX: variant expression  X  registered IDL
We set up a Web redirection server that uses VarIdx RRs to resolve the vari-ant IDL in a user request into the corresponding registered IDL. In the zone files of the IDL domain, we store a  X * X  RR so that when an unregistered do-main label under that domain is queried, the domain name server will return the IP address of the redirection server. Therefore, when a user accesses an (unregistered) variant IDL rather than the corresponding registered IDL, the request will be sent to the redirection server. The redirection server is config-ured to execute a redirection script that will examine the domain name in the 11: 24  X  J.-W. Lin et al.
 request header [Fielding et al. 1997] and try to resolve the variant IDL into the registered IDL. When the redirection server receives a user request, the script locates the unregistered domain label, computes the variant index, and looks up the VarIdx RRs. If a VarIdx RR enumerating the unregistered domain label is returned, the registered IDL is found. The script redirects the request to the new URL with the registered IDL, as shown in Figure 18. If there is no VarIdx RR enumerating the unregistered domain label, the script returns an error message to the user.

An IDN service provider can duplicate such redirection service to form a multi-level redirection service that resolves a variant IDN into its registered IDN, label by label, as shown in Figure 19. Note that individual domains can adopt different indexing functions and redirection services in their own en-vironments. They can customize their products independently so that users will experience better services. For simplification, we use the same indexing function and redirection server in the experiment. 4.2 Experiment Results We built a trial IDN service of a three-level DNS hierarchy consisting of six do-mains. Figure 20 is a snapshot of the six domains. Under the domain vcdnr . cc , we register five IDN subdomains, which have a total of 52 variant IDN subdo-mains. Under these subdomains, we register 40 IDNs, which have a total of 1,880 variant IDNs. For example, the IDN subdomain  X   X   X   X  .vcdnr.cc has six variant IDN subdomains enumerated by [  X   X   X  ][  X  ][  X  ][  X  ].vcdnr.cc. In-stead of storing six NS RRs and six zone files, we store only one VarIdx RR and one zone file to activate all six variant IDN subdomains. The IDN  X   X  .  X   X   X   X  .vcdnr.cc has 12 variant IDNs enumerated by [  X  ][  X fi ].[  X   X   X  ][  X  ][  X  ][  X  ].vcdnr.cc. Instead of storing 12 A RRs, we store one VarIdx RR and one A RR. Furthermore, we host only one Web site rather than create 12 virtual hosts. Table VI shows some comparisons between the traditional approach and the proposed one.

We set up a generic PC that runs FreeBSD operating system as the redirec-tion server. An Apache Web server that listens on popular HTTP service ports is configured to execute a redirection script when a user wants to access an object on a host whose hostname matches  X *. vcdnr . cc  X . In the zone files of each of the six domains, a  X * X  RR is stored and associates with the IP address of the redirection server.

On receipt of a user request, the script recognizes the charset encoding by converting the requested URL from a candidate charset encoding to Unicode. Note that browsers may send the URL in various charset encodings, such as GB-2312/GBK, BIG5, or UTF-8. The charset encodings to be tested, and their priorities, are determined by the policy of the redirection service. In some zone administrations, the URL can be converted to two or more Unicode URLs, because different charset encodings are used. For example, l  X  (U+516C U+53F8).vcdnr.cc encoded in GB-2312 has the same octet sequence as  X  (U+9F20 U+4F97).vcdnr.cc encoded in BIG5. We believe that it would be better to prevent this situation during IDL registration. Currently, the script returns a page that lists these URLs so that users can click the correct URL. In other words, we give different charset encodings the same priority currently.
The script then locates the unregistered domain label, computes the variant index, and looks up the VarIdx RRs. If a VarIdx RR that enumerates the un-registered domain label is returned, the script redirects the request to the new URL with the registered IDL. If there are other unregistered domain labels in the new URL, the resolution process will be invoked in a cascading manner in the corresponding subdomain until the redirection server finally returns the 11: 26  X  J.-W. Lin et al.
 URL with the registered IDN, or the redirection server cannot resolve the un-registered domain label.

We use variant IDNs in different Web browsers on different platforms to access the registered IDNs. Context-free and context-sensitive variants listed in the LVT t w cn are used to form the variant IDNs. For example, for the IDN  X   X  .  X   X   X   X  .vcdnr.cc, we use LVT t w cn to generate 32 IDNs enumerated by [  X   X  ][  X fi ].[  X   X   X  X  ][  X  ][  X  ][  X  ].vcdnr.cc. Among these, 12 IDNs enumerated by [  X  ][  X fi ].[  X   X   X  ][  X  ][  X  ][  X  ].vcdnr.cc. are variant IDNs and the others are not. We examine each of these IDNs for IDN resolution. As shown in Table VII, the experiment gives a perfect result. In total, 12,330 IDNs are generated according to LVT t w cn for the registered IDNs and IDN subdomains. Among these, 1,932 IDNs are variant IDNs of these registered IDNs and IDN subdomains. They are all successfully resolved into the registered ones. As well, other IDNs are not resolved as expectedly.

Experiment results show that the VarIdx RRs provide sufficient information for the redirection server to redirect user requests with the variant IDNs by resolving the variant IDLs into the registered IDLs.

In this architecture, the initial delay may be long if several redirections are invoked. However, subsequent requests will use the registered IDN and, therefore, no more redirections are required. 5. CONCLUSIONS The JET Guidelines focuses upon the administration of IDL registration; how-ever, it does not address the implementation issue. An issue of scalability arises when there is a large number of variant IDLs to be activated. When the authors wrote this article, in addition to the registered IDL, TWNIC and CNNIC by default activated two variant IDLs, one consists of only Traditional Chinese characters and the other consists of Simplified Chinese characters. However, it is not easy for generic users to understand why some variant IDLs are resolvable and others are not.
 Based on the LVT mechanisms, we present the resolution of the variant IDLs in an IDL package into the registered IDL with the help of VarIdx RRs. To address the issue of scalability that arises when the number of variant IDLs to be activated is large, VarIdx RRs use variant expressions to enumerate the variant IDLs. An indexing function is designed to give the same variant index to the variant IDLs enumerated by a variant expression so that Internet applications can use any of the variant IDLs to look up the VarIdx RRs and find the registered IDL.

Individual zones may have their own rules about permitted characters and the variant relationships of these characters. From the viewpoint of software practice, there must be a mechanism to specify the indexing function for each zone; otherwise, all zones must use the same indexing function. The study in Section 3 indicates that an indexing function may exist for global use. LVT unihan lists the fewest variant relationships. Registries that adopt H unihan may need to store more VarIdx RRs to activate all variant IDLs. LVT hanyu lists several more variant relationships; however, when registries adopt H hanyu , the possibility of collisions increases. We believe that H t w cn is a good candidate for global use.

We start with a trial IDN service of six domains. Meanwhile, we set up a redirection server and store a  X * X  RR in the zone files of each of the six domains so that user requests with unregistered domain labels under these domains will be served by the redirection server. On receipt of a user request, the redi-rection server computes the variant index of the unregistered domain label and looks up the VarIdx RRs. If the right VarIdx RR is found, the server redi-rects the user request to the new URL by replacing the variant IDL with the registered IDL. Although the initial delay may be long if several redirections are invoked, subsequent requests will use the registered IDN and no more 11: 28  X  J.-W. Lin et al. redirections are required. Our experiments show that VarIdx RRs provide sufficient information for variant IDL resolution.

Human language can take multiple forms, and especially Chinese language can be very flexible. For example, sometimes people may say  X  c  X  q w ' x (Tunghai University in Taiwan) instead of q w ' x .  X  c . We will further study the real name redirection in the future.

