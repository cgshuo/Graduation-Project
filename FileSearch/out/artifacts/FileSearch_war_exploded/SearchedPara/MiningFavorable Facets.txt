 The imp ortance of dominance and skyline analysis has been well recognized in multi-criteria decision making applica-tions. Most previous studies assume a xed order on the attributes. In practice, di eren t customers may have dif-feren t preferences on nominal attributes. In this pap er, we iden tify an interesting data mining problem, nding favor-able facets , whic h has not been studied before. Giv en a set of points in a multidimensional space, for a speci c target point p we want to disco ver with resp ect to whic h com bina-tions of orders (e.g., customer preferences) on the nominal attributes p is not dominated by any other points. Suc h com binations are called the favorable facets of p .
We consider both the e ectiv eness and the eciency of the mining. A given point may have man y favorable facets. We prop ose the notion of minimal disqualifying condition (MDC) whic h is e ectiv e in summarizing favorable facets. We dev elop ecien t algorithms for favorable facet mining for di eren t application scenarios. The rst metho d computes favorable facets on the y. The second metho d pre-computes all minimal disqualifying conditions so that the favorable facets can be looked up in constan t time. An extensiv e per-formance study using both syn thetic and real data sets is rep orted to verify their e ectiv eness and eciency . H.2.8 [ Database Applications ]: Data mining &amp; Spatial databases and GIS Algorithms, Theory , Performance, Exp erimen tation skyline, preference, spatial data, materialization, warehouse
R. C-W Wong and A. W-C Fu are supp orted in part by the RGC Earmark ed Researc h Gran t of HKSAR CUHK 4120/05E. J. Pei is supp orted in part by NSER C Disco v-ery Gran t 312194-05. All opinions, ndings, conclusions and recommendations in this pap er are those of the authors and do not necessarily re ect the views of the funding agencies. Cop yright 2007 ACM 978-1-59593-609-7/07/0008 ... $ 5.00.
Dominance analysis is imp ortan t in man y multi-criteria decision making applications. As an example, consider a customer looking for a vacation pac kage to San Jose using three criteria: price, hotel-class and num ber of stops. For two pac kages p and q , if p is better than q in one factor, and is not worse than q in any other factors, then p is said to dominate q . For example, we have three pac kages (price, hotel-class, num ber-of-stops): p 1 (1600 ; 4 ; 1), p 2 (3000 ; 5 ; 2) and p 3 (2000 ; 3 ; 2). We kno w that lower price, higher hotel class and less stops are more preferable. Thus, p 1 dominates p 3 because p 1 has lower price, higher class and less stops. Package p 2 does not dominate p 3 because p 3 has lower price than p 2 . Similarly p 3 does not dominate p 2 because p higher hotel class than p 3 . A point that is not dominated by any other point is said to be a skyline point or it is in the skyline .

Recen tly, skyline analysis [18, 14] has receiv ed a lot of interest from both researc h and applications. Con tinuing with our example of vacation pac kages. Package p is in the skyline if it is not dominated by any other pac kages. The pac kages in the skyline are the best possible tradeo s among the three factors in question. For example, p 1 is in the skyline because it is not dominated by p 2 and p 3 . Similarly , p 2 is also in the skyline. However, p 3 is not in the skyline because p 3 is dominated by p 1 .

In order to conduct a skyline analysis, an (either total or partial) order is assumed on eac h attribute to re ect the users' preference. In our example, lower price, higher ho-tel class and less stops are more preferable. Most previous studies [18, 14, 15, 2, 3, 4] assume that orders on attributes are prede ned for all users. Recen tly, some studies [6, 5, 11, 10] consider that the orders on attributes are di eren t for di eren t users. However, in some situations, we may be in-terested in the orders that can mak e a given point a skyline point.
 Consider a skyline analysis on selecting vacation pac kages. Table 1 sho ws a syn thetic data set as our running example. Unlik e the attributes price and hotel-class on whic h a total order exists for all customers, for the attribute hotel-group, di eren t users may have di eren t preferences. We refer to suc h an attribute whic h does not come with a xed order for all users a nominal attribute .

Nominal attributes are common in data analysis. For choosing vacation pac kages, some commonly encoun tered nominal attributes include hotel-group and airline. It is easy to name a few other imp ortan t business applications, suc h as realities (where type of realt y, style and regions are examples of nominal attributes) and selecting air igh ts (where airline and transition airp ort are examples of nominal attributes).
What challenges do nominal attributes bring to skyline Table 1: Table whic h con tains a set of pac kages Table 2: Table whic h con tains customer preferences analysis? The change of preference orders on nominal at-tributes may lead to changes in skylines. Due to the changes of the orders on nominal attributes, some skyline points may become dominated by other points and some points that are not in the original skyline may become so if they are pre-ferred by the updated order.
 Example 1 (Skylines in Different Preferences) .
 Consider the pac kages in Table 1 and the customer prefer-ences in Table 2. In Table 1, the numeric attributes, price and hotel-class, are totally ordered. The lower the price and the higher the hotel-class, the more preferable a vacation pac kage is. Hotel-group is a nominal attribute. Di eren t customers have di eren t preferences on that attribute. In Table 2, \ T M " denotes that the customer prefers Tulips to Mozilla.

When a customer suc h as Fred prefers Mozilla to Tulips, pac kage f is in the skyline. However, for another customer suc h as Alice who prefers Tulips to Mozilla, f is not in the skyline anymore since it is dominated by a . Similarly , for a customer suc h as Chris preferring Horizon to Mozilla, f is not in the skyline, either, since it is dominated by c . Another interesting observ ation is that pac kages a and c are alw ays in the skyline no matter what preference order is chosen (because a has the lowest price and c has the highest hotel class). Also, b and d are alw ays dominated.

From the above example, we observ e that, with di eren t preferences, a particular pac kage may or may not be in the skyline. How is suc h information useful in applications?
Example 2 (Applica tions) . Let us consider the pac k-ages in Table 1 and the customer preferences in Table 2 again. Supp ose that hotel-group Mozilla wants to promote its own pac kages to poten tial customers. The best strategy is to promote to those customers who may choose its pac k-ages rather than other pac kages. Whic h customers should Mozilla target for mark eting?
Consider pac kage f of hotel-group Mozilla. As describ ed in Example 1, Fred prefers Mozilla to Tulips and f is in the skyline in this case. Thus, Fred should be one of the targets for promotion. On the other hand, Alice and Chris should not be in the target list for promotion of f since f is not Table 3: Recommendation of pac kages to customers in Example 2
Table 4: Disqualifying Conditions in Example 2 in the skyline with resp ect to their preference orders. The targets for promotion are those customers who include f in their skyline sets. Similarly , we can also consider pac kage e for promotion. Table 3 sho ws whether we should promote pac kages e and f to eac h customer, resp ectiv ely. Table 4 sho ws the conditions under whic h e or f will be disquali ed as skyline points. How to nd these conditions will be the core of our study . These conditions give the hotel-group bet-ter understanding of the reason why a pac kage is favorable or not favorable. Therefore, they are considered interesting and useful information whic h is hidden in the data.
From the above examples, we conclude that whether a customer is in the target list of a particular pac kage de-pends on his/her preference. Giv en a particular pac kage, it is interesting to nd a set of preference conditions that favor the pac kage. We mo del this task as mining favorable facets. This information is valuable to target the righ t customers whose preferences are consisten t with the orders.
Generally , given a set of points in a multidimensional space where some nominal attributes are presen t, for a point p , favorable facet mining is to nd the orders with resp ect to whic h p is in the skyline. With favorable facets, we can understand not only whether p is in the skyline of a pref-erence, but also the conditions on the dimensions that can a ect the skyline mem bership of p .

While enumerating all favorable facets is helpful, there can be a large num ber of suc h orders. In the example, in Table 1, as long as Tulip does not dominate Mozilla, e will be a skyline point. The favorable facets can be M T H , T H , H T , H M , M H T , M T , M H , or no preference on hotel. Therefore, instead of returning all favorable facets, returning a succinct summarization of the facets suc h as the disqualifying conditions is more useful.
A naiv e metho d to compute the favorable facets is to enu-merate the skylines for all possible com binations of the or-derings of the nominal attributes. However, it is not scalable since there will be an exp onen tial num ber of possible com bi-nations. In this pap er, we prop ose much more ecien t ways of mining a summarization of the favorable facets.
To the best of our kno wledge, the problem of mining favor-able facets has not been iden ti ed before. Favorable facets can disclose novel information about skylines that cannot be addressed by the existing metho ds. We believ e that this is the rst work to study the problem.

In addition to iden tifying a new data mining problem, we also give e ectiv e and ecien t solutions. Returning all fa-vorable facets is exp ensiv e because there are typically man y suc h orders. Also, it is dicult for the user to understand man y orders in the result set. To tackle this problem, we prop ose to use a succinct represen tation called the minimal disqualifying condition (MDC) whic h can summarize favor-able facets and is meaningful to the user.

In order to conduct ecien t mining, we dev elop two al-gorithms. The rst metho d nds on-the-y the minimal conditions on the preference orders that disqualify a query point from the skyline. Using those minimal disqualifying conditions, we can answ er querying of favorable facets e ec-tively.

The second metho d pre-computes all minimal disqualify-ing conditions of every data point, and organize them in a compact way. Then, favorable facets can be analyzed online.
We presen t a systematic performance study using both real data sets and syn thetic data sets to verify the e ectiv e-ness and the eciency of our metho ds. The exp erimen tal results sho w that mining favorable facets is interesting, and our prop osed metho ds are ecacious.

The rest of the pap er is organized as follo ws. We discuss related work in Section 2. In Section 3, we investigate the changes of skylines due to changes of orders on attributes, and prop ose the notion of minim um disqualifying conditions (MDC). The MDC On-the-y metho d and the MDC mate-rialization metho d are dev elop ed in Section 4. A systematic performance study is rep orted in Section 5. The pap er is concluded in Section 6.
Skyline queries have been studied since 1960s in the the-ory eld where skyline points are kno wn as Par eto sets and admissible points [9] or maximal vectors [8]. However, ear-lier algorithms suc h as [8, 7] are inecien t when there are man y data points in a high dimensional space. The problem of skyline queries was introduced in the database con text in [1].

We can categorize the existing work into two ma jor groups { full-sp ace skyline queries and subsp ace skyline queries .
Man y ecien t metho ds have been prop osed for full-space skyline queries whic h return the set of skyline points in a spe-ci c space. Some represen tativ e metho ds include a bitmap metho d [18], a nearest neigh bor (NN) algorithm [14], and branc h and bound skylines (BBS) metho d [15].

Recen tly, skyline computation has been extended to sub-spaces. Subspace skyline queries return the skylines in all subspaces [20, 17, 19, 16].

Most of the existing studies assume that only numeric attributes presen t. Some recen t studies [2, 3, 4, 6, 5, 11, 10] consider partially-ordered attributes. For example, [2, 3] transform eac h partially-ordered attribute into two integer attributes. Then, the con ventional skyline algorithms can be applied. [4] studies estimating the cost of skyline operator involving the partial ordered attribute.

Nev ertheless, most existing work assumes that each at-tribute has only one order: either a total or a partial order . In this pap er, we consider the scenarios where di eren t users may have di eren t preferences on nominal attributes. That is, more than one order need to be considered in nominal attributes.

Some latest works consider skylines on nominal attributes. [6, 5] study how to specify a query based on preferences on nominal attributes. When preferences change, the query re-sults can be incremen tally re ned. In [11], a user can specify some values in nominal attributes as an equiv alence class to denote the same \imp ortance" for those values. Whenev er a value v has a higher preference than a value v 0 in the equiv-alence class, v also has a higher preference than all the other values in the equiv alence class. [10] is an extension of [11]. In [10], whenev er a user performs a query and obtains the results, if s/he nds that there are a lot of irrelev ant results, s/he can mo dify the query by adding more conditions in the query so that the result set is smaller to suit her/his need.
Clearly , all those studies still focus on skyline computa-tion. In this pap er, we study the problem of favorable facet mining. The output is a represen tation for the facets. No previous studies has addressed the problem studied here.
A skyline analysis involves multiple attributes. A user's preference on the values in an attribute can be mo deled by a partial order on the attribute. A partial order is a re exiv e, asymmetric and transitiv e relation. A partial order is also a total order if, for any two values u and v in the domain, either u v or v u . We write u v if u v and u 6 = v . A partial order also can be written as R = f ( u; v ) j u v g . u v also can be written as ( u; v ) 2 R . By default, we consider points in an m -dimensional 1 space S = D 1 D m . For eac h dimension D i , we assume that there is a partial or total order R i . For a point p , p:D pro jection on dimension D i . If ( p:D i ; q:D i ) 2 R i write p:D i q:D i or simply p D i q . We can omit D i if it is clear from the con text.

For points p and q , p dominates q , denoted by p q , if, for any dimension D i 2 S , p D i q , and there exists a dimension D 0 2 S suc h that p D i 0 q . If p dominates q , then p is more preferable than q according to the preference orders. The dominanc e relation R can be view ed as the integration of the preference partial orders on all dimensions. Thus, we can write R = ( R 1 ; : : : ; R m ). It is easy to see that the dominance relation is a strict partial order.

Giv en a data set D con taining n points in space S , a point p 2 D is in the skyline of D (i.e., a skyline point in D ) if p is not dominated by any points in D . The skyline of D , denoted by SKY ( D ), is the set of skyline points in D .
In an application, there often exist some orders on the dimensions that hold for all users. In our running example as sho wn in Table 1, a lower price and a higher hotel-class are alw ays more preferred by customers. Even, for nominal attributes, there may exist some univ ersal partial orders. For example, in a realt y mark et, detac hed houses are often more preferred than semi-detac hed houses. Hence, we as-sume that we are given a template , whic h con tains a partial order for every dimension. The partial orders in the tem-plate are applicable to all users. Eac h user can then express his/her speci c preference by re ning the template. The con tainmen t relation of orders captures the re nemen t.
For partial orders R and R 0 , R 0 is a re nement of R , denoted by R R 0 , if for any ( u; v ) 2 R , ( u; v ) 2 R 0 . Moreo ver, if R R 0 and R 6 = R 0 , R is said to be weaker than R 0 and R 0 be stronger than R .

Example 3 (Preference orders). Let R = f ( T; M ) g 1 In this pap er, we use the terms \ attribute " and \ dimension " interc hangeably . and R 0 = f ( T; M ) ; ( H; M ) g . Then, R R 0 . That is, R 0 is a re nemen t of R by adding a preference H M . As R 6 = R 0 , R is weak er than R 0 and R 0 is stronger than R .
Proper ty 1. For orders R = ( R 1 ; : : : ; R m ) and R 0 = 1 , : : : , R 0 m ) , R R 0 if and only if R i R 0 i for 1 i m .
Now, we are ready to de ne the problem of favorable facets formally .

Definition 1 (Favorable facets). If p is a skyline point with resp ect to an order R p , R p is called a favor able facet of p . Giv en a data point p and a template R , the problem of mining favor able facets is to nd all R p that are favorable facets of p and are re nemen ts of R (i.e. R R p How can we compute the favorable facets of a point p ? Let us consider a na X ve approac h whic h computes all skyline points with all possible re nemen ts of a given template R . After the computation, all re nemen ts with resp ect to whic h p is a skyline point are selected as the favorable facets of p .
All the possible re nemen ts of a given template order form a partially ordered set (poset) L where the ordering is gov-erned by the re nemen t relationship, and the template order serv es as the unit(greatest) elemen t in L . For example, all possible orders on attribute hotel-group in our running ex-ample form a poset as sho wn in Figure 1. In our running example, the template order R on dimension hotel-group is ; . That is, the template does not prefer any hotel-group to another. Eac h node in the gure is asso ciated with a re-nemen t of the template. The skylines with resp ect to the orders are also sho wn. We write the orders in the form of a fully expanded transitiv e closure. For example, we do not have a node lab eled f ( T; H ) ; ( H; M ) g because its transitiv e closure is f ( T; H ) ; ( H; M ) ; ( T; M ) g . The node at the top corresp onds to the template order. The node at the bottom is a special node whic h corresp onds to a zero(least) elemen t &gt; , and with this node, the poset L forms a lattice. The skyline with resp ect to &gt; is de ned to be ; .

In the lattice, b is not a skyline point because it is dom-inated by a on attributes price and hotel-class and it has the same value as a on hotel-group. Interestingly , although e and f are less preferable than a on attributes price and hotel-class, a does not dominate e nor f since the template does not prefer T to M . In fact, both e and f are skyline points with resp ect to the template.

From Figure 1, we observ e an imp ortan t monotonicit y prop erty.

Theorem 1 (Monotonicity) . Given a data set D and a template R , if p is not in the skyline with respect to R , then p is not in the skyline with respect to any re nement R 0 of R .
 Pro of. Consider order R and points p and q suc h that q p with resp ect to R . Then, for any attribute D , we have q D p with resp ect to R . Let R 0 be a re nemen t of R where R R 0 . Then, q D p still holds in R 0 . That is, q p still holds in R 0 .

Theorem 1 indicates that, when the orders on dimensions are strengthened, some skyline points may be disquali ed. However, a non-skyline point nev er gains the skyline mem-bership due to a stronger order. This monotonic prop erty greatly helps in analyzing skylines with resp ect to various orders.

When there are multiple nominal attributes, eac h attribute has a corresp onding lattice based on the template and re-nemen ts. The lattice for multiple attributes is the pro duct of the lattices for individual attributes. The prop erties for the single nominal attribute carry forw ard to the pro duct lattice.

Note that this lattice is di eren t from SKYCUBE [20] because this lattice has the monotonic prop erty whic h does not generally exist in SKYCUBE.
Although the lattice helps us to mine favorable facets, there can be man y favorable facets for one query point. It is dicult for users to comprehend a large num ber of favorable facets. How can we represen t the mining result in a concise and meaningful way?
Example 4. In Table 1, with resp ect to what re nemen ts of the template R that f is in the skylines? The re nemen t order lattice in Figure 1 can be used to nd all favorable facets. f is in the skyline pro vided that none of the follo wing two conditions hold: T M (otherwise, a f ) or H M (otherwise c f ). Thus, ( T; M ) and ( H; M ) are called the minimal disqualifying conditions .

In the re nemen t order lattice, if an order R x con tains neither T M nor H M , any order weak er than R x does not con tain these conditions. On the other hand, if an order R x con tains one of these two conditions, so does every or-der stronger than R x . Based on the monotonicit y prop erty, there exists a border between the orders that qualify f as a skyline point and those that disqualify f whic h partitions the lattice into two parts: f is a skyline point in the upp er part and is not a skyline point in the lower part, as sho wn in Figure 1.

Based on the observ ations in Example 4, to mine favorable facets, we only need to compute the border. Particularly , we can use the set of minimal disqualifying conditions.
Let R and R 0 be two partial orders. R and R 0 are con ict-free if there exist no values u and v suc h that u 6 = v , ( u; v ) 2 R , and ( v; u ) 2 R 0 . R [ R 0 is still a partial order if R and R 0 are con ict-free. For example, if R = f ( T; H ) g and R 0 = f ( T; M ) g , R and R 0 are con ict-free. If R = f ( T; H ) g and R 0 = f ( H; T ) g , R and R 0 are not con ict-free. Definition 2 (Minimal disqualifying condition) .
 For a skyline point p and a template order R , a partial order R 0 is called a minimal disqualifying condition (or MDC for short) if (1) R 0 \ R = ; , (2) R 0 and R are con ict-free, (3) p is not a skyline point with resp ect to R [ R 0 , and (4) there exists no R 00 suc h that R 00 R 0 and p is not a skyline point with resp ect to R [ R 00 . The set of minimal disqualifying conditions for p is denoted by M DC ( p ).

Example 5 (Minimal disqualifying condition) . In our running example, R 0 = f ( T; M ) g and R 00 = f ( H; M ) g are the minimal conditions that disqualify f as a skyline point. They are the minimal disqualifying conditions of f . That is, M DC ( f ) = ff ( T; M ) g ; f ( H; M ) gg .
Based on the monotonicit y in Theorem 1, we can sho w that minim um disqualifying conditions can be used to sum-marize favorable facets e ectiv ely.

Theorem 2 (MDC) . For a point p and a template or-der R , p is in the skyline with respect to a re nement R 0 of R if and only if (1) p is in the skyline with respect to R , and (2) 8 R x 2 M DC ( p ) , R x 6 R 0 . In this section, we dev elop ecien t algorithms to compute MDCs for favorable facet mining. We describ e the MDC On-the-y metho d in Section 4.1 and the MDC Materialization metho d in Section 4.2.
For two skyline points p and q with resp ect to the template order R = ( R 1 ; : : : ; R m ), two cases may arise.
Case 1: There is an attribute D i 0 suc h that p D i Then, q nev er dominates p in any re nemen t of R , and thus cannot lead to a minimal disqualifying condition for p . For example, in Table 1, c nev er dominates a because the Price value of a is smaller than that of c .

Case 2: There does not exist any attribute D i 0 suc h that Then, q may dominate p with resp ect to some re nemen ts of R , and thus may lead to a minimal disqualifying condition of p .

Formally , q quasi-dominates p if ( p:D i ; q:D i ) 62 R i i m . For example, in Table 1, a quasi-dominates f because a has a lower price and a higher hotel-class than f . The only reason that a does not dominate f in the template is that T does not dominate M . As sho wn in Example 5, in a re nemen t R 0 = f ( T; M ) g of R , a dominates f . Thus, R 0 is a minimal disqualifying condition for f .

Giv en a template order R = ( R 1 ; : : : ; R m ), if q quasi-dominates p , the minimum condition that q dominates p is R q ! p = f ( q:D i ; p:D i ) j q:D i 6 = p:D i and ( q:D R i for 1 i m g . It is easy to see that q dominates p in ( R [ R q ! p ). R q ! p strengthens the template in a minimal way suc h that q dominates p .

Based on the above idea, we have the MDC-O (for MDC on-the-y) algorithm as sho wn in Algorithm 1 to compute the minimal disqualifying conditions of a point p as follo ws. Let R be the template order. We assume that in a pre-pro cessing step the skyline SKY ( R ) has been computed. Algorithm 1 MDC On-the-y Metho d MDC-O ( p , D , R ) Input: a data point p , data set D , order template R , and Output: the minimal disqualifying conditions of p 1: supp ose that the skyline SKY ( R ) is f p 1 ; : : : ; p 2: if p 62 SKY ( R ) then 3: return that p cannot be a skyline point with resp ect 4: else 5: set M DC ( p ) = ; 6: for j := 1 to k do 7: if p 6 = p j and p j quasi-dominates p then 8: if M DC ( p ) does not have a condition weak er 9: add R p j ! p to M DC ( p ) and remo ve any 10: return M DC ( p ) Let SKY ( R ) = f p 1 ; : : : ; p k g . We chec k whether p is in SKY ( R ). If no, we rep ort to the user that p is not in the skyline with resp ect to any re nemen t of R . Otherwise, we initialize M DC ( p ) to ; . For eac h p j where 1 j k and p j 6 = p suc h that p j quasi-dominates p , if M DC ( p ) does not have a condition weak er than R p j ! p , then we insert R j ! p into M DC ( p ) and remo ve any stronger conditions in M DC ( p ).

Here, if there are two disqualifying conditions and one is stronger than the other, we store the weak er one. Since both conditions disqualify a data point as a skyline point, the stronger one is redundan t and can be remo ved.
The algorithm assumes a pre-pro cessing step for comput-ing the skyline points with resp ect to R . One can adopt any existing algorithm (e.g., [2, 3]) for computing the skyline for partially ordered domains.

Let us analyze the complexit y of MDC-O. We have to chec k whether p 2 SKY ( R ), whic h tak es O ( k ) time, where k is the num ber of skyline points with resp ect to R . For eac h skyline point p j quasi-dominating p , the minim um condition is computed with cost O ( m 0 ), where m 0 is the num ber of nominal dimensions. The minim um conditions are inserted into the set of minimal disqualifying conditions if the cur-ren t set does not have a weak er condition. The insertion tak es cost O ( l ), where l is the maxim um num ber of minimal disqualifying conditions of a skyline point. Thus, the overall complexit y is O (( m 0 + l ) k ). When there are man y skyline points in SKY ( R ), the MDC-O algorithm can be costly and may not return the MDCs in real time. In some applications, online resp onse may be required. For example, a salesp erson may want to chec k online whether a pro duct is in the skyline with resp ect to a customer's preference.

In order to meet the online resp onse requiremen t, one fea-sible solution is to materialize all minimal disqualifying con-ditions of all data points in the data set. We prop ose an algorithm as sho wn in Algorithm 2 for this purp ose.
The algorithm consists of two parts. The rst part com-putes the skyline points with resp ect to R . The second part nds all MDCs.

Let us analyze the complexit y of the second part of our al-gorithm. Since we have to chec k every pair of skyline points Algorithm 2 MDC Materialization Metho d MDC-M ( D ; R ) Input: data set D and order template R Output: the set of skyline points with resp ect to R and 1: compute the skyline with resp ect to R , supp ose the sky-2: set M DC ( p i ) = ; for (1 i k ) 3: for i := 1 to ( k 1) do 4: for j := ( i + 1) to k do 5: if p i quasi-dominates p j then 6: if M DC ( p j ) does not have a condition weak er 7: add R p i ! p j to M DC ( p j ) and remo ve any 8: if p j quasi-dominates p i then 9: if M DC ( p i ) does not have a condition weak er 10: add R p j ! p i to M DC ( p i ) and remo ve any 11: return M DC p and q , and deriv e the corresp onding minimal disqualifying conditions for p over q and for q over p , the overall complex-ity is O (( m 0 + l ) k 2 ). However, the lookup of the MDC for a given point p will be very fast. If an arra y is used to store all MDCs, it tak es constan t time or O (1) time to reac h the required MDC.
 Example 6 (The MDC Materializa tion Method) .
 Let us illustrate Algorithm 2 using Table 5, whic h is an ex-tension of Table 1 by adding one more nominal attribute, airline. Supp ose that the template R on hotel-group and airline are set to ; .

For the rst step, we compute the skyline with resp ect to R , whic h is f a; c; d; e; f g . We can remo ve data point b because b is not in the skyline with resp ect to R .
Then, we chec k whether any skyline point quasi-dominates another. We compare a and c rst, whic h do not quasi-dominate eac h other. Then, we compare a and d . a quasi-dominates d . The minim um condition that a dominates d R a ! d = f ( T; H ) ; ( G; R ) g . Similarly , we compare a and e and obtain R a ! e = f ( T; M ) ; ( G; R ) g . We compare a and f and obtain R a ! f = f ( T; M ) ; ( G; W ) g . The MDC of eac h data point after a is compared with all other points is sho wn in Table 6.
 In the second iteration, we compare c with other points. First, we compare c and d . c quasi-dominates d . The mini-mum condition that c dominates d R c ! d = f ( G; R ) g . From Table 6, the curren t MDC of d con tains only f ( T; H ) ; ( G; R ) g , whic h is stronger than f ( G; R ) g . Thus, we insert f ( G; R ) g and remo ve f ( T; H ) ; ( G; R ) g . Similarly , we compare c with e and f . We obtain the MDC as sho wn in Table 7 after pro cessing c .

Similarly , we con tinue with the remaining iterations. It can be veri ed that the nal MDCs are as sho wn in Table 7.
When the given template R consists of a set T of totally ordered attributes and a set N of nominal attributes with no total order, we can mak e use of an indexing structure Package ID Table 5: A table whic h con tains a set of pac kages with two nominal attributes.
 Table 6: MDCs of points after comparing a to other points.
 Table 7: MDCs of points after comparing c to other points. for speeding up the pro cess for either the on-the-y or the materialization approac h. The idea is based on the follo wing lemma.

Lemma 1. Given a template with a set T of total ly or-dered attributes. Given a point p , if q quasi-dominates p , then for each attribute D i in T , q D i p .

In either MDC-O or MDC-M, the rst step is to compute the skyline SKY ( R ). An R-tree [12] can be built with di-mensions only for the totally ordered attributes T . Points in the skyline set SKY ( R ) are inserted into this R-tree based on the attributes in T . Then, to nd points that quasi-dominates p , a range searc h is conducted on the R-tree with a range of &lt; = p:D i for eac h dimension D i in the R-tree. The set of points Q returned by the range searc h is a sup erset of the set of points that quasi-dominate p. We then examine the nominal attributes in N of eac h point q in Q . First we chec k whether ( q:D i ; p:D i ) for eac h D i 2 N is con ict-free with R . If there is any con ict with R , point q is discarded. Otherwise, the minim um condition that q dominates p is given by R q ! p = f ( q:D i ; p:D i ) j D i 2 N ^ q:D i 6 = p:D We then try to insert R q ! p in the same manner as in MDC-O and MDC-M.

With the R-tree searc h metho d above, the time com-plexit y for the MDC computation in MDC-O will become O (( m + l ) r ), where O ( r ) is cost of a range searc h in the R-tree. For the materialization algorithm MDC-M, the time complexit y for computing the MDCs for all points becomes O (( m + 1) kr ). The complexit y for looking up the MDC of a particular point with MDC-M remains O (1). We have conducted extensiv e exp erimen ts on a Pentium IV 3.2GHz PC with 2GB memory , on a Lin ux platform. The algorithms were implemen ted in C/C++. In our exp er-imen ts, we adopted the data set generator released by the authors of [1]. As this data set generates only numeric at-tributes, we mo di ed the program to generate both numeric attributes and nominal attributes. The numeric attributes are totally ordered and are generated as in [1]. The nominal attributes are generated according to a Zip an distribution [13]. By default, we set the Zip an parameter = 1. The default values of other exp erimen tal parameters are sho wn in Table 8. Note that the total num ber of dimensions is equal to the num ber of numeric dimensions plus the num ber of nominal dimensions. By default, we adopted a template where the most frequen t value in a nominal dimension has a higher preference than all other values. For R-tree indexing, eac h node occupies one page size of 4Kb ytes. In the default settings, with this page size, the maxim um branc hing factor is 130, and the minim um num ber of children is set to 65.
We denote the on-the-y metho d and the materialization metho d without any indexing by M DC -O and M DC -M , re-spectiv ely. We denote the two metho ds with R-tree indexing [12] by M DC -O ( I ) and M DC -M ( I ), resp ectiv ely.
We evaluate the performance of the algorithms in terms of (1) the memory requiremen ts, (2) pre-pro cessing time, and (3) the execution time of a favorable facet searc h, whic h nds the MDC for a given data point. We also evaluate the algorithms in term of the prop ortion of the skyline points with resp ect to the template and the average size of MDCs of eac h data point stored. For pre-pro cessing, M DC -M and M DC -M ( I ) construct a materialized MDC set, and M DC -O ( I ) and M DC -M ( I ) construct an R-tree, and all metho ds require the computation of the skyline set for template R , SKY ( R ). M DC -M and M DC -M ( I ) stores a materialized MDC set and M DC -O ( I ) stores an R-tree for the searc h. The favorable facet searc h time of M DC -M and M DC -M ( I ) is the lookup time in the materialized MDCs while that of M DC -O is the execution time of Algorithm 1 and that of M DC -O ( I ) is the time of an on-the-y searc h using the R-tree.

For measuremen ts (1) and (2), eac h exp erimen t was con-ducted 100 times and the average of the results was rep orted. For measuremen t (3), in eac h exp erimen t, we randomly se-lected 100 data points from the data set for the favorable facet searc h, and the average searc h time is rep orted.
Three types of data sets are generated as describ ed in [1]: (1) indep endent data sets , (2) correlate d data sets and (3) anti-c orrelate d data sets . The detailed description of these data sets can be found in [1]. For the interest of space, we only sho w the exp erimen tal results for the anti-correlated data sets. The results for the indep enden t data sets and the correlated data sets are similar in the trend but their execution times are much shorter.
 Comp arison with Na X ve Metho d: We compare M DC -O and M DC -M metho ds with the na X ve metho d ( N aiv e ) describ ed in Section 3.1. We use the default values except that the car-dinalit y is equal to 5 because the na X ve metho d ran out of storage when the cardinalit y is above 5. In the default data set, the storage size and the pre-pro cessing time of N aiv e are 9MB and 954,801s, resp ectiv ely. In comparison M DC -M re-quires 22.6KB for storage and 49s for pre-pro cessing. Con-sider the favorable facet searc h time. For the materialized metho ds, on average, M DC -M requires 0.001s and N aiv e requires 22s for the searc h. M DC -M is much faster than the na X ve metho d because it returns the concise MDC results. Thus, the MDC metho ds outp erform the na X ve metho d. In the follo wing, we focus on the MDC metho ds.
We xed the num ber of numeric attributes to 3 and varied the num ber of nominal attributes from 1 to 4. Figure 2(a) sho ws that the R-tree sizes increase with the num ber of nom-inal attributes.The increase in materialization size is due to the increase in the num ber of conditions in the MDC for eac h data point. When the num ber of nominal attributes increases, the storage size of the materialized MDC set sur-passes that of the R-tree indexing. This is because the MDC sizes increase very rapidly with the num ber of nominal at-tribute while the R-tree sizes are less sensitiv e to this factor. As sho wn in Figure 2(b), the pre-pro cessing times of M DC -M , M DC -M ( I ) and M DC -O ( I ) increase with the num ber of nominal attributes. This is because more nominal at-tributes need to be compared in order to generate a minimal disqualifying condition for eac h data point when the num-ber of nominal attributes increases. The pre-pro cessing time of M DC -O ( I ) is smaller than M DC -M ( I ) because M DC -M ( I ) involves the additional step of MDC materialization. M DC -M is the slowest because it does not bene t from any speedup by the indexing technique. M DC -O is the fastest because it only computes the skyline set SKY ( R ). From Figure 2(c), the favorable facet searc h times for M DC -M and M DC -M ( I ) are close to zero since it is a simple lookup of the materialized MDC set. With increase in the num ber of nomimal attributes, the searc h time in-creases for M DC -O ( I ) since there are more skyline points and the index size is larger. M DC -O needs to nd the MDCs of a point from the skyline set SKY ( R ). When there are more nominal dimensions, it tak es more time. M DC -M and M DC -M ( I ) are much faster than M DC -O because they pre-computed the result. It is interesting to see that M DC -O ( I ) is very fast because M DC -O ( I ) builds an index whic h speeds up the searc h. In Figure 2(d), as we exp ected, the num ber of skyline points increases when the num ber of nominal attributes increases. This is because there is higher chance that a data point is not dominated by other data points. Besides, it is trivial that the average size of MDCs among all points stored increases when there are more nom-inal attributes.

The e ects of variations in the num ber of numeric at-tributes have been studied and the results are sho wn in Fig-ure 3 where we xed the num ber of nominal attributes to 1 and varied the num ber of numeric attributes from 2 to 5. As exp ected, both the execution time and the storage size increase with the num ber of numeric dimensions. Besides, we observ e that the average size of MDCs decreases when the num ber of numeric attributes increase. When there are more numeric attributes, there is higher chance that a data point the data set is not quasi-dominated by other points. It is more likely that the data point is a skyline point with resp ect to any re nemen t of the template and thus has no MDCs stored. Thus, the average size of MDCs decreases.
In this exp erimen t, the num ber of tuples are varied from 250K to 1,000K. Figure 4(a) sho ws that the storage sizes of all algorithms increase with the num ber of tuples. When there are more tuples, SKY ( R ) increases in size whic h leads to bigger R-tree and increase in the materialization size. The pre-pro cessing time of all algorithms except M DC -O increases as sho wn in Figure 4(b), because more tuples are pro cessed. The searc h time of M DC -O increases with the data size. In Figure 4(d), the prop ortion of skyline points decreases with the num ber of tuples because there is a higher chance that a data point is dominated by another data point when there are more data points. The average size of MDCs is not a ected because it is mainly dep enden t on the nominal values.
We next studied the e ect of di eren t template sizes. Let v be the most frequen t value in the nominal attribute. We started the exp erimen t with a template that was an empt y set. Then, one binary order was added to the template at a time. The binary order to be added was v c v i , where v was a value in the nominal attribute, v i 6 = v c , and v was not in the curren t template. We observ e that there is no signi can t e ect of the template size in Figures 5(a), (b), (c) and (d). This is because the storage size, the pre-pro cessing time and the searc h time are mainly dep enden t on the size of SKY ( R ), and when the template con tains more orders, the num ber of skyline points decreases sligh tly. This is because the more order pairs in the template creates more chance of domination among the tuples. The average MDC size decreases also since MDC stores the conditions whic h do not app ear in the template.

Let us call the above set of templates (A). We have also conducted the exp erimen ts with two other kinds of tem-plates: (B) the templates where the least frequen t value has a higher preference than the other values and (C) the tem-plates in whic h the \median" frequen t value has a higher preference than the other values, where the \median" fre-quen t value is the value rank ed in the middle of the values. The storage size for the MDC materialization is the small-est when we apply the template con taining the least fre-quen t value with a higher preference. This is because there is less chance for the data points with the lowest preference (on nominal attributes) to be quasi-dominated by the data points with the higher preference (on nominal attributes). As there are a lot of data points with the lower preference and we now do not need to store MDCs related to these data points, the storage size is thus smaller.
Figure 6 sho ws the results with the variation of the car-dinalit y of a nominal attribute. In Figure 6(a), the storage sizes of the MDC materializations increase with the cardi-nalit y. As there are more values in the nominal attribute, the num ber of the minimal disqualifying conditions for a data point is greater, yielding the increase in the storage size of the MDCs. Since there are more values in a nominal attribute, the R-tree sizes increase. For similar reasons, in Figure 6(b), the pre-pro cessing times of M DC -M , M DC -M ( I ) and M DC -O ( I ) increase with cardinalit y. The pre-pro cessing time of M DC -O remains unc hanged. The favor-able facet searc h times of all algorithms (Figure 6(c)) remain nearly the same because the cardinalit y of nominal attribute does not a ect the searc h signi can tly. In Figure 6(d), the prop ortion of skyline points increases with the cardinalit y of nominal attribute. This is because there is higher chance that a data point is not dominated by others when the car-dinalit y is larger. It is trivial that the average MDC size increases with the cardinalit y of nominal attribute. We have also conducted exp erimen ts with variation of the Zip an parameter . When increases, the storage sizes of all algorithms decrease. When is large, there are more tu-ples with the frequen t value in the nominal attribute. Thus, there is a higher chance that these tuples quasi-dominate other tuples, yielding disqualifying conditions. However, the template con tains a binary order where the most frequen t value has a higher preference than other values. Thus, these disqualifying conditions are not minimal and are not stored. The pre-pro cessing time and the favorable facet searc h time decreases when increases. The reasons are similar. The num ber of skyline points increases when increases. This is because there is higher chance that a tuple is not dominated by others when is larger. The average MDC size remains nearly the same since does not a ect the average MDC size signi can tly.
 Conclusion: Comparing the on-the-y metho d and the ma-terialization metho d, there is a trade-o between pre-pro cessing time plus storage and the searc h time. The R-tree indexing helps to greatly reduce the searc h time for the on-the-y metho d on the exp enses of more pre-pro cessing and more storage. The R-tree also reduces the pre-pro cessing time of the materialization metho d in most cases.
To demonstrate the usefulness of our metho ds, we ran our algorithms on two real data sets.
The rst set is Nursery , whic h is publicly available from the UCIrvine Mac hine Learning Rep ository 2 . Nursery was deriv ed from a hierarc hical decision mo del originally de-velop ed to rank applications for nursery schools in Ljubl-jana and Slovenia where the rejected applications frequen tly needed an objectiv e explanation. Eac h tuple is an applica-tion to the nursery schools. Seman tically , if an application is in the skyline, it can be considered a good candidate. Dif-feren t nursery schools may have di eren t order preferences on the nominal attributes.

In the Nursery data set, there are 12,960 instances and 8 attributes. We transformed 6 attributes (paren ts, has nurs, housing, nance, social and health) to numeric attributes be-cause these values are totally ordered. For example, the \so-cial" attribute has three possible values: non-problematic, http://kdd.ics.uci.edu/ sligh tly problematic and problematic, we matc hed them to the num bers 0, 1 and 2, resp ectiv ely. The remaining two attributes are form of the family (e.g. incomplete family and foster family) and the num ber of children, since there is no trivial order on their values, they would be our nominal attributes. (Note that although the num ber of children is a numeric attribute, it is not clear whether a family with one child is \better" than a family with two children.) The cardinalit y of both nominal attributes are equal to 4. We have adopted the default settings for the remaining settings in this exp erimen t. The results in the performance are sim-ilar to those for the syn thetic data sets. The storage size of the materialized MDC set is 91KB. The pre-pro cessing times of M DC -O ( I ), M DC -M and M DC -M ( I ) are 92s, 94s and 60s, resp ectiv ely. The storage size of the R-tree index is 902KBytes. The favorable facet searc h time of the materialization metho ds and M DC -O ( I ) is negligibly small.
Our second real data set is Automobile , also adopted from the UCIrvine Mac hine Learning Rep ository . Our goal is to study the utilit y of favorable facets. We have chosen four attributes in the exp erimen ts, namely \sym boling", \normalized-losses", \price" and \mak e". Attribute \sym-boling" is the assigned numeric insurance risk rating. The smaller the value is, the safer the vehicle is. Attribute \normalized-losses" is the relativ e average loss paymen t per insured vehicle year. If the value is smaller, the loss will be smaller. Hence, the only nominal attribute is \mak e", rep-resen ting the car brand names. There were only 205 tuples. The computation times were negligibly small. We are in-terested to see the meaning and utilization of the favorable facets for di eren t data points. Three car brand names are chosen for our study , namely Honda, Mitsubishi and Toyota. We would nd the disqualifying condition for 3 data points that belong to these three brand names, resp ectiv ely. 1. Our rst selected data was a Honda car whic h was a 2. The second data was a Mitsubishi car and the minimal 3. Finally , we chose a Toyota car and it gave an empt y
From the above results, a salesp erson for the rst car should not try to promote the car to a customer that prefers Toyota to Honda, but he may promote it to a customer who prefers Mitsubishi to Honda, since the car has some other adv antage that can be attractiv e. The second car should be promoted to someone who prefers Mitsubishi. The third car can be promoted to any customer.
In this pap er, we iden tify and tackle an interesting data mining problem, nding favorable facets, whic h has not been studied before. Giv en a set of points in a multidimensional space suc h as a collection of pro ducts with attributes like brand, type, color and price, for a speci c target point we want to disco ver with resp ect to whic h com binations of or-ders (e.g., customer preferences) on the nominal attributes the given point is not dominated by any other points. We consider both the e ectiv eness and the eciency of the min-ing. We prop ose the notion of minimal disqualifying condi-tion (MDC) whic h is e ectiv e in summarizing the favorable facets. We dev elop ecien t algorithms for favorable facet mining for di eren t application scenarios. An extensiv e per-formance study using both syn thetic and real data sets is rep orted to verify their e ectiv eness and eciency .
As future work, dominance analysis with resp ect to dy-namic data and ordering is an interesting topic.
