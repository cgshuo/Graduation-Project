 Spam, the so-called junk email, has become an imperative problem to the email communication today. In fact, there are a huge percentage of all emails sent are spams. The statistics [1] shows that more than 50% of emails are spams in 2004, up from 8% in 2001. Even worse, spam not only annoys email users, but also threatens the whole email applicat ion. Some systems have been presented to prevent the disturbance of spams. However, each of them has drawbacks and no one settles the problem completely.

For data mining researchers, spam detection is brand-new and challenging. At the initial stage, they commonly treated the spam detection as a text classifica-tion task. In this way, the contents of em ails are exploited for spam detection. Some conventional machine learning techniques have been conducted. Among them, Naive Bayes methods [2] and SVMs [3] were the most popular. Though they have certainly reported quite excellent results, it is obvious that the spam problem does not nearly go away. These filters generally work only when the scale is miniature. When they are employed on a large scale, spammers always find new ways to attack the filters. Moreover, t he contents of spam change over time. Only filters with constant re-training can attain high performance permanently.
The other group of researchers try to l ook for other clues, such as the email traffic [4], the email social network [5], and so forth [6]. These approaches are categorized as  X  X on-content-based spam filters X . Compared with content-based approaches, these methods possess several advantages. First, less processing time is required. Instead of going through the entire email contents, it is much more efficient in dealing with non-content know ledge. Second, to crea te the counterfeit non-content information is relatively difficult. Finally, the privacy issue of the email contents has always been concerned. It is noted that non-content-based approaches evade this issue inherently.

Due to above merits, we decide to use the non-content knowledge of email so-cial network formed by human email communication for spam detection. Mail-Rank [5], presented by Chirita et al , investigated the feasibility of rating the sender addresses in the email social network. The well-known reputation algo-rithm, PageRank [7], is the kernel of the rating mechanism of MailRank. Accord-ing to the score obtained by the algorithm, an arriving email can be classified as a spam or a ham. Although the authors claimed high performance of MailRank, there are still some drawbacks that can be improved. MailRank constructs a graph for email social network. Each node represents an email address and each arrow points from a sender to a receiver. In this way, according to the concept of PageRank algorithm, a sender gives a t rust vote to a receiver. However, the key idea of PageRank is that the rank of a web page is given by the pages point-ing to this page. Therefore, if an arrow points from a sender to a receiver, it means the receiver gets the trust vote f rom the sender. This scoring scheme is a contradiction to the real world. The trust score of an email address should be determined by the number of trusted emails it has sent instead of the number of emails received. In addition, only a si ngle link is allowed between two nodes in MailRank. This diminishes the effect of different numbers of email communica-tions between two nodes. In the real-world situation, the more spams a node has sent, the more suspicious to be a spammer it is. Moreover, MailRank collects merely the ham emails as training data. All links in the graph are legitimate emails. This may lack the information of communications of junk emails.
In this paper, we propose a spam detection system ProMail , which utilizes the non-content knowledge of the email social network. According to the latest email interaction and reputation of users, an arriving email can be classified as a spam or a ham. Three primary contributions of this paper are as follows. (1) We design an innovative modeling graph of the email social network, whose concept is illustrated in Figure 2 and is elaborated in Section 3.1. (2) The progressive update scheme is presented to catch the evolving feature of the real-world communication. Newly training emails are included and the obsolete emails are pruned away. This crucial scheme makes ProMail more suitable for modeling the latest email social network and thus with higher attack resilience.
 (3) The reputation procedure, SpGrade , is proposed to rate each email ad-dress in the modeling graph. SpGrade , which follows the concept of PageRank [7], accelerates the convergence rate without re-running the reputation algorithm and hence ProMail efficiently keeps the most up-to -date information for spam detection. Consequently, ProMail is capable of handling a great quantity of arriving emails in real time. Figure 1 demonstrates the system model of ProMail . Three input parameters, T m (the maximum time span of which emails retained in the modeling graph), T i (the time span for Incoming Update), and T p (thetimespanforPeriodical Update) are given. There are two major phases in the system, namely, off-line training phase and on-line maintaining phase. In the off-line training phase, Pro-Mail includes initial training emails, whi ch are collected from users for every T m , to construct our new modeling graph. Then, the proposed reputation pro-cedure SpGrade is conducted to compute the initial objective score for each node in the modeling graph. At this stage, ProMail is able to be put on-line to do the spam detection based on th e initial objective scores.
 Three individual modules, Spam Detection, Incoming Update, and Periodical Update are involved in the on-line maintaining phase. Whenever a new email ar-rives, Spam Detection instantly reports the result based on the objective scores obtained by SpGrade . It is noted that Spam Detect ion can be computed in real time without delaying the delivery time of arriving emails. In addition, to keep the latest information, the feedback mechanism is introduced, and the reported feedback emails are buffer ed temporarily. For every T i , the system automatically triggers the Incoming Update and includes buffered emails into the modeling graph. In the meantime, SpGrade progressively adjusts the objective scores of email users related to or influenced by the feedback emails. Note that SpGrade considers only associated nodes rather than re-rating all nodes in the model-ing graph. Meanwhile, the decaying effect , which conveys the concept that the significance of emails decays over ti me, is also taken into account in SpGrade . Periodical Update is triggered for every T p . Those nodes which were not modified in the previous time span T p are re-rated. For efficiency concern, T p is normally set larger than T i by several times. Moreover, the obsolete emails which exceed the maximum time span T m are eliminated in Periodical Update. Consequently, ProMail is self-adjusting and always retains the most up-to-date knowledge of human email communication for spam d etection with limit ed memory space. 3.1 Modeling Graph of the Email Social Network Figure 2 shows our new modeling graph of the email social network in ProMail . Each node denotes an email user represented by the email address. Each arrow indicates an email communication between two nodes. There are four significant features of the innovative modeling graph. (1) The direction of an arrow points f rom a receiver to a sender. This demon-strates the situation tha t the receiver gives the trust vote to the sender. (2) There can be more than one link co nnected between two nodes. Namely, each link is weighted in accordance with the number of emails. For the ease of readability, we put all links in the modeling graph to emphasize the weighting ef-fect. In addition, the decaying effect, w hich emphasizes the decays of importance over time, is also contained on the links. (3) Both spam and ham links are included. Solid arrows stand for spam links, while hollow arrows represent ham links. Two types of email links are distin-guished with each other. Thus, two resp ective email social networks are fused together in the modeling graph. Each node maintains two corresponding scores for the spam network and the ham network. (4) The composite node, which consists of senders who appeared just once and had identical IP address, is introdu ced. This is because the email header is easily tampered by spammers. However, the IP address of the sending machine is valid. Large amounts of spams sent from one machine may have different fake sender addresses, but their sender IP addresses are the same. As a result, these nodes should be enclosed to form a composite node. Comparatively, other nodes are named as common nodes. Though normal users may be mis-enclosed together as well, they will jump out and form a new common node by itself at the moment they appear the second time. The dashed circle in Figure 2 illustrates a composite node. 3.2 Algorithm ProMail Algorithmic form of ProMail is shown in Figure 3(a). The major objectives of ProMail are to maintain the progressive email social network as time goes by and to report the classification res ults whenever new emails arrive. There are two primary phases in ProMail . One is off-line training phase, and the other is on-line maintaining phase. Initially, a large set of training emails are fed into ProMail for the off-line phase. In this phase, from line 4 to line 6, three procedures are included. ConstructGraph utilizes the training email set to construct the modeling graph of the email social network. The training set contains the emails arriving in previous T m . The reputation procedure SpGrade is then applied to rate each node in the graph. Two corresponding scores, ham and spam, are produced for each node. By the linear combination of two scores, each node obtains the objective value which indicates the extent of suspicion to be a spammer. The last step of the off-line phase is to determine the separation threshold S th to classify emails into spams and hams. First, ProMail samples the nodes in the graph uniformly, and sorts the sample set of nodes by their objective values. Then, the separation threshold is determined according to the proportion of spams and hams in the training data. For example, if there are 1,000 sampled nodes and half of the training data are spams, S th will be set the same as the value of the node whose rank of the objective value is 500. At this stage, ProMail finishes the off-line training phase and goes into the on-line maintaining phase from line 8 to line 16. Two types of update schemes, Incoming Update and Periodical Update, are involved. Incoming Update, from line 8 to line 10, includes new feedback emails from users by ConstructGraph . Feedback emails are buffered temporarily and Incoming Update is triggered for every T i . Since some nodes and links are inserted into the graph, SpGrade is conducted in line 10 to re-rate the scores of the related nodes. To achieve the efficient update, SpGrade considers merely the nodes associated with the feedback nodes. On the other hand, Periodical Update, from line 11 to line 14, is triggered for every T . The main objectives of Periodical Update are to eliminate the obsolete links and to update the nodes which have not been updated in previous T p . In line 13, DeleteGraph excludes the obsolete links which exceed the time span T m from the graph. While DeleteGraph examines the obsolete links, the nodes which have not been updated in previous T p are also marked so that these nodes can be updated in the following procedure. Finally, SpGrade is employed to re-rate corresponding nodes. Owing to the operation of Incoming Update and Periodical Update, ProMail is able to keep the most up-to-date information and delete the obsolete knowledge for spam detection with limited memory space. In addition, for efficiency concern, T p is set larger than T i by several times. In the following subsections, the reputation mechanism SpGrade will be elaborated in detail. 3.3 Details of Procedure SpGrade SpGrade, the reputation mechanism of ProMail , is presented in Figure 3(b). SpGrade takes charge of rating and updating the scores of nodes in the mod-eling graph. To catch the concept of the importance of links decays over time (called the decaying effect), d factor , the exponential decaying factor, is intro-duced to diminish the scores of links according to the existing time. In addition, to accelerate the convergence rate, SpGrade adopts two crucial measures. First, only the marked nodes are considered. In the first iteration, two types of marked nodes are involved. One is the nodes which are associated with the insertion and the deletion of the graph. The other is th e nodes which have not been updated in T . During each iteration, SpGrade marks the nodes which are required to be updated for the next iteration. The second crucial measure is that the constraint of update propagation is included. The primary purpose of the constraint is to avoid triggering too many slight updates caused by a single marked node. The node triggers the update propagation only when the change percentage of scores in a node is greater than the error threshold err th . In addition, the constraint of update propagation is enforced on the link score as well. From line 7 to line 10, the targeted marked node re-computes the score by summing all inlink scores with the decaying effect. Meanwhile, each inlink decayS , the decayed score which has been acquired by the terminal node, is updated. Providing that the score change percentage of this node exceeds err th , the update propagation, from line 12 to line 19, is executed. The node averagely shares the score to all of the outlinks. From line 14 to line 16, SpGrade first updates the outlink score by the decaying effect. Then, if the score ch ange percentage of this outlink also exceeds err th , the terminal node of this link will be marked for the update in the next iteration. This measure effectiv ely accelerates the convergence rate of SpGrade , and does not influence the detection results. Finally, in line 19, the outlink decayS is updated. It is noted that the entire nodes in the graph should be processed concurrently. The newly updated scores become effective in the next iteration but not in the current iteration. Both ham and spam scores are processed in the same way. In this section, we conduct experiments to validate the feasibility of ProMail . The real dataset used in the experimen ts is the email server log of Computer Center in National Taiwan University. There are about 200,000 emails per day in this dataset. Since the classified labels of emails are not available in practice, we utilize the detection results from the well-known existing system, SpamAs-sassin, as the correct labels. There are 30% of emails are spams in this dataset. The competitive approach, MailRank, is included for comparison. We implement ProMail and MailRank using C++ language, and execute the programs on a computer with Pentium 4 -3GHz CPU and 1.5GB RAM.
 4.1 Accuracy Evaluation The training dataset used in Figure 4(a) consists of emails in one week ( T m is one week), and there are totally about 1,400,000 emails. T i and T p are both set as one day. Another 7 days of emails are used as testing data. The procedures of the experiment are as follows. Each day of testing emails represents the arriving emails and are tested day by day. Then, all emails are viewed as the feedback emails for the system. In addition, two values in the first column of Figure 4(a) stand for the interval between the definitely ham threshold and the interval between the definitely spam threshold with S th . The sender address whose score is between these two thresholds is classified as uncertain. The sender address which does not appear in the graph is classified as unknown. The false positive rate and the false negative rate are investigated. As mentioned in Section 1, the false positive costs much than the false negative for spam detection problem. As shown in Figure 4(a), the false positive rate of ProMail is lower than 0.5% in all cases. This validates the high performance of ProMail .

Figure 4(b) shows the comparison results against MailRank. The unknown rate of MailRank is much higher than ProMail since only hams are consid-ered in MailRank. Moreover, ProMail outperforms MailRank in false positive rate considerably. The main reason is that some email senders who have sent fewer emails possess low score, and are mis-classified as spammers by MailRank. However, ProMail can handle this drawback well. In this paper, we proposed a spam detection system ProMail , which utilizes the non-content knowledge of the email social network. The innovative modeling graph was presented to model the human email communication. In addition, the progressive update scheme was introduced to include new feedback emails and delete the obsolete ones, and hence the most up-to-date information is al-ways kept for spam detection. Moreover, we designed the reputation mechanism SpGrade to accelerate the convergence rate without re-running the reputa-tion algorithm. The experimental results showed that ProMail outperforms the competitive algorithm MailRank significantly. Furthermore, the outstanding false positive rate justifies the practicability of ProMail in real applications. The work was supported in part by the National Science Council of Taiwan, R.O.C., under Contracts NSC93-2752-E-002-006-PAE.

