
Hayato Kuwada 1 , Kenji Hashimoto 2 , Yasunori Ishihara 1 , and Toru Fujiwara 1 XML (Extensible Markup Language) is a markup language for describing struc-tured data and used for a variety of applications and database systems. Accord-ingly, many schemas are defined to specify document structures, and schema description languages such as DTD (Document Type Definition) are used for specifying schemas. A schema mapping is the basis of data transformation from one schema to another caused by data exchange or schema evolution. In partic-ular, schema mappings for XML are called XML schema mappings . A mapping is a triple of a source schema ,a target schema ,andasetof dependencies ,which are pairs of document patterns and specify correspondence of data. Consistency of schema mappings, which means that some document conforming to the source schemacanbemappedintoadocument conforming to the target schema ac-cording to the given dependencies, is an essentially necessary property. It is also important for schema mappings to be absolutely consistent , that is, every document conforming to the source schema can be mapped into a document conforming to the target schema according to the given dependencies. Example 1. Define the source and target schemas D S and D T as follows: First, consider the following dependency set  X  1 :  X   X  1 states that if there is a document of D S such that a phone node has both home and mobile nodes as its children, then the document is mapped into a document of D T with a phone node which has, again, both home and mobile nodes as its children. However,  X  1 is not consistent because in any document of D T ,a phone node cannot have both home and mobile nodes as its children. Next, consider the following dependency set  X  2 :  X  2 = { student/phone[home][other]  X  X  X  student/phone[home][other] } .  X  2 is consistent because there is a document of D S which has no other nodes. Such a document vacuously satisfies  X  2 . On the other hand,  X  2 is not absolutely consistent because of the si milar reason to the case of  X  1 . Lastly, consider the following dependency set  X  3 :  X  3 is absolutely consistent b ecause for every document of D S ,ifithasa phone node with children home , mobile ,and other , then it can be mapped into a document of D T which has (at least three) phone nodes one of which has home , another has mobile , and the other has other as their children.
 Amano et al. investigated the computational complexity of the problems of deter-mining consistency and absolute cons istency of XML schema mappings [1]. The main focus of [1] is XML schema mappings with data values, but they addressed also mappings without data values. The results of the case without data values are shown in Table 1. In this paper we use XPath expressions for specifying doc-ument patterns, although in [1] tree patterns is used. Using XPath expressions allows us to utilize the rich known results on the satisfiability problem for our problem. XPath expressions consist of  X  (child axis),  X   X  (descendant-or-self axis),  X  (parent axis),  X   X  (ancestor-or-self axis),  X  (next-sibling axis),  X   X  (following-sibling-or-self axis),  X  + (following-sibling axis),  X  + (preceding-sibling axis),  X  (path union), [ ] (qualifier), and  X  (wild card). Table 1 describes computa-tional complexity of each class including only axes and operators with the  X + X . Nested relational DTDs are non-recursive DTDs such that each content model l
As can be seen from Table 1, constraints under which decision problems of con-sistency and absolute consistency are s olvedinPTIMEhavebeenlittleknown, even if data values are not concerned. Thus, the purpose of this paper is to find practically wide classes of DTDs and XPath expressions for which both problems canbesolvedinPTIME.Asafirststepforachievingthis,wefocusonthecase without data values in this paper.
 In this paper, we use a restricted class of DTDs called disjunction-capsuled DTDs (DC-DTDs), which were proposed in [2]. DC-DTDs are an important class from the theoretical point of view because many tractability results on XPath satisfiability under DC-DTDs are known. Such results can be exploited for con-sistency and absolute consistency problems. DC-DTDs are also a meaningful class from the practical point of view, because 7 out of 22 real-world DTDs, 853 out of 950 real-world DTD rules are actually DC [3]. Although DC-DTDs are incomparable to nested-relational DTDs, the tractability results on the satisfia-bility under DC-DTDs can be extended to a wider class, called DC ?+ -DTDs [3], which is a proper superclass of nested-relational DTDs. 13 out of 22 DTDs, 928 out of 950 rules are DC ?+ .

The results of this paper are shown in Table 2.  X + X  acrossing multiple cells represents  X  X ne of them X . First, it is shown that consistency of mappings be-tween DC-DTDs is solvable by deciding satisfiability and validity of document patterns linearly many times . Precisely speaking, we show that under DC-DTDs, satisfiability of a set of dependencies can be decomposed into satisfiability and validity of each document pattern in the dependencies. Hence, if the document patterns are in an XPath class for which satisfiability and validity are tractable, then consistency is also tractable. Next, it is shown that absolute consistency of mappings between DC-DTDs is solvable by deciding satisfiability of document patterns linearly many times . Again, the technically important point is that sat-isfiability of a set of dependencies can be done by independently checking the satisfiability of each document pattern in the dependencies. Hence, if the doc-ument patterns are in an XPath class for which satisfiability is tractable, then absolute consistency is also tractable.
 The rest of this paper is organized as follows. Several definitions are given in Section 2. Sections 3 and 4 present tractability results of consistency and absolute consistency of mappings between DC-D TDs, respectively. Section 5 summarizes the paper. 2.1 XML Documents and DTDs In this paper, we regard elements of XML documents as labeled nodes, and entire XML documents as labeled order ed trees. In what fo llows, we write trees to mean labeled ordered trees. Let  X  ( v ) denote the label of a node v .Fora
A regular expression over  X  consists of (empty sequence), the symbols in  X  , and operators  X  (concatenation, usually omitted in the notation), | (disjunction), and  X  (repetition). We exclude  X  (empty set) because we are interested in only nonempty regular expressions. Let L ( e ) denote the string language represented by a regular expression e .
 Definition 1. A DTD D is a triple (  X , r, P ) ,where  X   X  is a finite set of labels,  X  r  X   X  is the root label, and  X  P is a mapping from  X  to the set of regular expressions over  X  . P ( l ) is called Atree T conforms to a DTD D =(  X , r, P ) if the root label of T is r ,andforeach L ( P (  X  ( v ))) .LetTL ( D ) denote the set of all the trees conforming to D . Next, we introduce DC-DTDs, a restricted class of DTDs. Definition 2. A regular expression e is disjunction-capsuled [2], or DC for in  X  or in the form of ( e i )  X  for an arbitrary regular expression e i . For example, ( a | b  X  )  X  ba  X  is disjunction-capsuled, and is also disjunction-capsuled because is  X  . On the other hand, a  X  | b  X  is not disjunction-capsuled. Definition 3. Let D =(  X , r, P ) . D is a disjunction-capsuled DTD ,or DC-DTD for short, if P ( l ) is disjunction-capsuled for each l  X   X  . 2.2 XPath Expressions XPath is a query language for XML documents.
 Definition 4. The syntax of an XPath expression p is defined as follows: where l  X   X  .Let X denote the set of all XPath expressions.
 Note that  X  (next-sibling axes) and  X   X  (following-sibling-or-self axes) are ex-cluded from X because they are not proper axes in W3C XPath. Moreover,  X  (wild card) is also excluded because it can be represented by using  X  (path union). On the other hand, X contains  X  (self axis), which is not considered in previous research. Self axis makes our discussion simpler without destroying the known tractability results of XPath satisfiability.
 Definition 5. The semantics of an XPath expression p over a tree T is defined as follows, where p and q are regarded as binary and unary predicates over nodes of T , respectively:  X  T | =(  X  :: l )( v, v ) if  X  ( v )= l ;  X  T | =(  X  :: l )( v, v ) if v is a child of v and  X  ( v )= l ;  X  T | =(  X  :: l )( v, v ) if v is a parent of v and  X  ( v )= l ;  X  T | =(  X   X  :: l )( v, v ) if v is v or a descendant of v ,and  X  ( v )= l ;  X  T | =(  X   X  :: l )( v, v ) if v is v or an ancestor of v ,and  X  ( v )= l ;  X  T | =(  X  + :: l )( v, v ) if v is a following sibling of v and  X  ( v )= l ;  X  T | =(  X  + :: l )( v, v ) if v is a preceding sibling of v and  X  ( v )= l ;  X  T | =( p  X  p )( v, v ) if T | = p ( v, v ) or T | = p ( v, v ) ;  X  T | =( p [ q ])( v, v ) if T | = p ( v, v ) and T | = q ( v ) ;  X  T | = p ( v ) if there is v such that T | = p ( v, v ) ;  X  T | =( q  X  q )( v ) if T | = q ( v ) and T | = q ( v ) ;  X  T | =( q  X  q )( v ) if T | = q ( v ) or T | = q ( v ) .
 Atree T satisfies an XPath expression p if there is a node v such that T | = p ( v 0 ,v ) ,where v 0 is the root node of T .
 Definition 6. An XPath expression p is satisfiable under a DTD D if some T  X  TL ( D ) satisfies p . Moreover, an XPath expression p is valid under a DTD D if every T  X  TL ( D ) satisfies p .
 2.3 XML Schema Mappings In this section, we define XML schema mappings according to [1,4,5]. Definition 7. A dependency is an expression of the form  X   X  X  X   X  ,where  X  and  X  are XPath expressions called document patterns .An XML schema mapping M is a triple ( D D T is a DTD representing a target schema, and  X  is a finite set of dependencies. Hereafter, XML schema mappings are referred to as just mappings.
 Originally, in [1,4,5], document patterns are defined by means of tree patterns. However, we use XPath expressions in order to exploit many results on XPath satisfiability and validity.
 Definition 8. Apairoftrees T S  X  TL ( D S ) and T T  X  TL ( D T ) satisfies ade-pendency  X   X  X  X   X  if the following condition is satisfied: If T S satisfies  X  ,then T T satisfies  X  .
 The set of all pairs of trees which satisfy all dependencies of M is denoted as M . Then, consistency and absolute co nsistency are defined as follows: Definition 9. Let M =( D S ,D T , X  ) . M is consistent if M =  X  .Onthe other hand, M is absolutely consistent if, for every tree T S conforming to D S , there exists a tree T T conforming to D T such that ( T S ,T T )  X  M . 3.1 Deciding Consistency of Mappings between General DTDs To begin with, we show that the consistency decision problem can be solved by deciding validity and satisfiability of combinations of document patterns in dependencies. The following lemma is essentially equivalent to the statement given in the proof of the EXPTIME-completeness of deciding consistency under general DTDs [5].
 Lemma 1. Let M =( D S ,D T , X  ) and  X  = {  X  i  X  X  X   X  i | i  X  [ n ] } where [ n ]= { 1 , 2 ,...,n } .Then, M is consistent if and only if there are two disjoint subsets I = { i 1 ,  X  X  X  ,i k } and J = { j 1 ,  X  X  X  ,j k } of [ n ] such that I  X  J =[ n ] ,  X   X  :: r S [  X  i 1  X  X  X  X  X   X  i k ] is not valid under D S ,and  X   X  :: r T [  X  j 1  X  X  X  X  X   X  j where r S and r T are the root labels of D S and D T , respectively. Proof. Suppose M is consistent. Then, a pair of trees ( T S ,T T ) belongs to M . Let J = { j 1 ,  X  X  X  ,j k } be a subset of [ n ] such that T T satisfies  X  j
Conversely, suppose that  X  :: r S [  X  i 1  X   X  X  X   X   X  i k ] is not valid under D S and  X  :: r T [  X  j 1  X   X  X  X   X   X  j J = { j 1 ,  X  X  X  ,j k } such that I  X  J =  X  and I  X  J =[ n ]. The non-validity of  X   X  or T T satisfies  X  l for each  X  l  X  X  X   X  l  X   X  where l  X  [ n ].
 According to Lemma 1, the problem of d eciding consistency of schema map-pings can be solved by using the decision procedure of validity and satisfiability of XPath expressions under DTDs. However, the complexity of this decision procedure for consistency of schema mappings between general DTDs is high, because deciding validity and satisfiability of XPath expressions under general DTDs is known to be intractable [6] and combinatorial explosion occurs in the choice of disjoint subsets I and J of [ n ]. In fact, consistency of mappings be-tween general DTDs is known to be EXPTIME-complete [5] even if the class of document patterns is restricted to downward axes and qualifiers. 3.2 Deciding Consistency of Mappings between DC-DTDs Now we restrict source and target schemas to be DC-DTDs. We shall give tractability results of consistency of mappings between DC-DTDs by showing the following facts: 1. Satisfiability for broad XPath subclasses under DC-DTDs is decidable in 2. Validity for XPath expressions in X (i.e., the whole XPath class of this 3. Under DC-DTDs, we can decide consistency of a schema mapping by decid-First, we recall that satisfiability under DC-DTDs for several XPath subclasses can be decided in polynomial time [2,3]. Table 3 shows the known tractability results of XPath satisfiability under DC-DTDs.

Next, we show that validity of XPath expressions in X under DC-DTDs is expression obtained by replacing with each subexpression e i such that e i = ( e )  X  for some regular expression e i .ForaDC-DTD D =(  X , r, P ), let  X  D = because each content model  X  e in  X  D does not contain any disjunction operator and thus it represents only one sequence over  X  .TheDTD  X  D has the following property on validity of XPath expressions under a DC-DTD D .
 Lemma 2. For an XPath expression  X  in X andaDC-DTD D , the unique tree  X  t in TL (  X  D ) satisfies  X  if and only if  X  is valid under D .
  X  w  X  L ( P ( l )). Let t be an arbitrary tree in TL ( D ). Then there is an injective mapping  X  from the set of nodes of  X  t to that of t such that  X   X  ( v )=  X  (  X  ( v )) for each node v of  X  t , t | =  X  (  X  ( v ) , X  ( v )). Thus, t also satisfies  X  .
 Lemma 2 leads to tractability of XPath validity checking under DC-DTDs. That is, validity of an XPath expression  X  in X under a DC-DTD D is linear-time reducible to evaluation of  X  on the tree  X  t  X  TL (  X  D ). Since a polynomial-time algorithm for evaluation is known [7], validity of XPath expressions in X under DC-DTDs can be decided in polynomial time.

Lastly, we can avoid combinatorial explosion mentioned in Section 3.1 by the following lemmas.
 Lemma 3. Let  X  1 and  X  2 be XPath expressions in X and D be a DC-DTD. under D ,where r is the root label of D .
 By the semantics of  X  ,  X  t satisfies at least one of  X  1 and  X  2 . Without loss of generality, we assume that  X  t satisfies  X  1 . From Lemma 2,  X  1 is valid under D . Lemma 4. Let  X  1 and  X  2 be XPath expressions in X and D be a DC-DTD. under D ,where r is the root label of D . Proof. The if part is trivial. For the only if part, assume that both  X  1 and  X  2 are satisfiable under D . Then, there are trees t 1 and t 2 in TL ( D ) such that t and t 2 satisfy  X  1 and  X  2 , respectively. Because X does not include negation operator and next-sibling axis, if a tree t satisfies XPath expression  X   X  X  ,any tree obtained by inserting arbitrary subtrees to t also satisfies  X  [3]. Thus, if we canobtainthesametree t 12 from t 1 and t 2 by inserting subtrees (see Fig. 1), t 12 w 2 are subsequences of w . This property holds because DC regular expressions cannot specify non-co-occurrence among labels.
 From the above, we can refine Lemma 1 for deciding consistency of mappings between DC-DTDs as follows.
 Lemma 5. Let M be a mapping ( D S ,D T , X  ) such that the schemas D S and D T are DC-DTDs. Then,  X   X  X  X   X  in  X  such that  X  is valid under D Proof. Let  X  = {  X  i  X  X  X   X  i | i  X  [ n ] } and r S and r T be the root labels of D S and D T , respectively. From Lemma 1, we prove this lemma by showing the next condition: there is no  X   X  X  X   X   X   X  such that  X  is valid under D S and  X  is not valid under D S ,and  X  :: r T [  X  j 1  X  X  X  X  X   X  j
Assume that there is no  X   X  X  X   X   X   X  such that  X  is valid under D S and  X  is is not valid under D S and  X  :: r T [  X  j 1  X  X  X  X  X   X  j Conversely, assume that there are two disjoint subsets I = { i 1 ,...,i k } and under D S ,and  X  :: r T [  X  j 1  X  X  X  X  X   X  j and 4,  X  l is not valid under D S for any l  X  I and  X  l is satisfiable under D T for any l  X  J .Since I  X  J =[ n ], there is no  X   X  X  X   X   X   X  such that  X  is valid under D S and  X  is not satisfiable under D T .
 Here, in order to decide consistency of mappings between DC-DTDs, we just have to check validity of  X  under D S and satisfiability of  X  under D T for each  X   X  X  X   X  in  X  . Therefore, if we choose as the class of document patterns the XPath subclasses in which validity and satisfiability under DC-DTDs are tractable, deciding consistency of schema mappings is tractable.
 Theorem 1. Let M be a mapping ( D S ,D T , X  ) ,where D S , D T are DC-DTDs, such that for each  X   X  X  X   X   X   X  ,  X   X  X  and  X   X  X  T ,where X T is an XPath subclass for which satisfiability is decidable in polynomial time under DC-DTD (see Table 3). Then, consistency of M can be decided in polynomial time. 4.1 Deciding Absolute Consistency of Mappings between General We begin with a lemma stating that absolute consistency of a mapping M = ( D S ,D T , X  ) can be determined by checking satisfiability of all XPath expres-sions induced by all subset of  X  . Again, this lemma is essentially equivalent to the statement in the explanation of  X  p 2 -completeness of abs olute consistency of mappings between general DTDs [1].
 Lemma 6. Mapping M =( D S ,D T , X  ) is absolutely consistent if and only if the following condition holds: For every subset  X  = {  X  1  X  X  X   X  1 ,..., X  k  X  X  X   X  k } is satisfiable under D T ,where r S and r T are the root labels of D S and D T , respectively.
 Proof. Suppose that mapping M =( D S ,D T , X  ) is absolutely consistent, and consider an arbitrary subset  X  = {  X  1  X  X  X   X  1 ,..., X  k  X  X  X   X  k } of  X  . Also suppose  X  X  X  X   X 
Conversely, suppose that for every subset  X  = {  X  1  X  X  X   X  1 ,..., X  k  X  X  X   X  k }  X  ,..., X  k  X  X  X   X  k } be a subset of  X  such that T S satisfies  X  i for each i (1  X  i  X  satisfiable under D S . Then, by assumption, there must be T T  X  TL ( D T )such M is absolutely consistent.
 Similarly to the case of consistency, the above lemma tells us that the hardness of deciding absolute consistency stems from the combinatorial explosion caused by checking all the subset of dependencies as well as the hardness of deciding XPath satisfiability. 4.2 Deciding Absolute Consistency of Mappings between DC-DTDs To obtain tractability results on abso lute consistency, we focus on DC-DTDs again. Similarly to the case of consistency, the combinatorial explosion of sub-sets of dependencies can be avoided, that is, satisfiability can be independently checked for each dependency.
 Lemma 7. Let D S and D T be DC-DTDs. Mapping M =( D S ,D T , X  ) is ab-solutely consistent if and only if for every dependency  X   X  X  X   X   X   X  ,if  X  is satisfiable under D S ,then  X  is satisfiable under D T .
 Proof. Suppose that mapping M =( D S ,D T , X  ) is absolutely consistent. Then, by Lemma 6, for every subset  X  = {  X  1  X  X  X   X  1 ,..., X  k  X  X  X   X  k } of  X  ,if  X  :: r under D T . This immediately implies the only if part of the lemma.
Conversely, suppose that for every dependency  X   X  X  X   X   X   X  ,if  X  is satisfi-able under D S ,then  X  is satisfiable under D T . By the property of DC-DTDs (Lemma 4), two XPath expressions  X  1 and  X  2 are satisfiable under DC-DTD D the other hand, by the assumption, if  X  1 ,...,  X  k are satisfiable under D S ,then  X  under D T . Therefore, the if part holds.
 Now, the next theorem immediately follows from the above lemma: Theorem 2. Let M be a mapping ( D S ,D T , X  ) ,where D S , D T are DC-DTDs, such that for each  X   X  X  X   X   X   X  ,  X ,  X   X  X  T ,where X T is an XPath subclass for which satisfiability is decidable in polynomial time under DC-DTD (see Table 3). Then, absolute consistency of M can be decided in polynomial time. This paper has discussed the consistency and absolute consistency problems of XML schema mappings between DC-DTDs. First, we have shown that consis-tency of mappings between DC-DTDs can be solved by deciding validity and sat-isfiability of XPath expressions linearly many times. Moreover, we have proved that the XPath validity problem in the presence of DC-DTDs can be solved in polynomial time. From these facts, we have proved that the consistency of mappings between DC-DTDs can be solved in polynomial time if the document patterns are in an XPath class for which satisfiability and validity are tractable under DC-DTDs. Next, we have shown that absolute consistency of the map-pings between DC-DTDs can also be solved by deciding satisfiability of XPath expressions in the presence of DC-DTD linearly many times. So the absolute consistency of mappings between DC-DTDs can also be solved in polynomial time if the document patterns are in an XPath class for which satisfiability is tractable under DC-DTDs.
 As stated in Section 1, there is a superclass of DC-DTDs, called DC ?+ -DTDs [3]. They allow two operators ? (zero or one occurrence) and + (one or more occurrences) of regular expression s in a restricted manner. Actually, DC ?+ -DTDs are also a proper superclass of nested-relational DTDs. The tractability re-sults of absolute consistency of mappings between DC-DTDs can be extended to mappings between DC ?+ -DTDs because DC ?+ -DTDs inherit all the tractability of XPath satisfiability of DC-DTDs. Howev er, as for consistency, the tractability results do not seem to be extended to mappings between DC ?+ -DTDs because we are conjecturing that XPath validity under DC ?+ -DTDs is coNP-hard. Now we are trying to prove the coNP-hardness and then propose a DTD class which is a superclass of both nested-relational DTDs and DC-DTDs but under which XPath validity is tractable.

We are also planning to incorporate data values into mappings. As stated in [1], consistency of mappings with data values can be reduced to consistency of mappings without data values. However, such reduction is not possible for absolute consistency. It is interesting to find XPath classes such that absolute consistency of mappings between DC-DTD s with data values becomes tractable. Acknowledgment. The authors thank Mr. Yohei Kusunoki of Osaka Univer-sity for his insightful comments and suggestions on deciding XPath validity under DC-DTDs. The authors are also thankful to the anonymous reviewers for their helpful comments. This research is supported in part by Grant-in-Aid for Scien-tific Research (C) 23500120 from Japan Society for the Promotion of Science.
