 1. Introduction vs. conservation, and formal organizations that are direct competitors in a market.  X  increases loyalty within the group and improves the survivability of the group in the long run. communities in Web 2.0 social networks.
 a balanced set of views. An extended discussion of potential applications of DACs is provided in Section 6 . mining maximal bi-cliques.
 follows: 1. We propose a new problem of mining antagonistic communities from signed social networks. enabling our approach to scale too. 3. We experiment our approach to extract antagonistic communities from real signed social networks. relationships with each other.
 and issues. We conclude and describe future work in Section 7 . 2. Related work from Vuong et al. X  X  work, we mine direct antagonistic communities from signed networks. networks.
 Liu, 2007 ), frequent graphs ( Yan &amp; Han, 2002 ), etc.
 nodes. The resultant technique scales well to mine from large real networks at low minimum size thresholds. imal bi-cliques. 3. Preliminaries and problem definition formalize some new definitions and our problem statement. 3.1. Preliminaries ven in Definitions 1 X 4 respectively.
 from one node to another node.
 is maximal in size.
 and V5) form a strongly connected sub-graph (SCS) but do not form an SCC. 1. There are no edges among the nodes in each set 2. Each node is connected to every node in the other set.
 used in frequent item-set mining first proposed by Agrawal and Srikant (1994) . transactions in the DB containing S.
 imum support threshold min _ sup if sup ( P )&gt; min _ sup .
 sup ( P 0 )= sup ( P ).
 is not closed. Item-set {A,B,C,D} however is closed. 3.2. Definitions and problem statement network as a signed network defined in Definition 9 . E , N respectively.

Our goal is to mine a set of antagonistic communities with two sub-communities/groups, where members of each bi-clique considering bi-directional negative edges. We denote it as [ L , R ]. threshold is set at 3.
 Definition 11 . As an example, Fig. 3 shows a sub-bi-clique of the bi-clique shown in Fig. 1 b. either L 0 # L and R 0 R ,or L 0 L and R 0 # R . A sub-bi-clique of a bi-clique is a bi-clique. inition 12 . Only non-redundant DACs would be mined.
 another DAC a 0 2 ASET , where a is a sub-bi-clique of a 0 .
 Based on the above concepts and definitions, our problem is defined as follows:
DACs. 4. Mining antagonistic communities mine them. 4.1. Properties membership to a significant DAC.
 significant DACs.
 not be a part of any DACs. h in a signed network.
 We now define a new operation to convert a graph to a transaction database. operation applied to a graph G as GTD ( G ).
 and closed patterns is established by Property 3 .
 corresponds to the set {(c,map(c)) j c 2 CLS} where CLS is the set of all closed patterns in GTD(G). Proof. The above property has been proven by Li et al. (2007) . h 4.2. Proposed algorithm for DACs, we perform the following steps: 1. Project input signed network G , to a graph G + keeping only positive edges in graph G .
Properties 1 and 2 ). We keep the set of nodes N + ={ n j n is a node in the identified SCCs}. 3. Project the input signed network G , to a graph G keeping only nodes in N 5. For each bi-clique ( L , R ) in BCQ containing a set of nodes n L work G , to graphs G n L
SCCs SCC L and SCC R from the projected networks G n L set of DACs {[ l , r ] j l 2 SCC L ^ r 2 SCC R }. DACs generated at step 5 and remove redundant ones based on Definition 12 . rows) and bi-directional negative edges (denoted as dashed bi-directional arrows). 4.2.1. Pruning by positive edges: steps 1 and 2 nected to any other nodes. Hence, a large number of nodes could be removed from consideration. network. We extract nodes that are parts of maximal SCCs with sizes P min _ size . nodes that are parts of SCCs. 4.2.2. Pruning by negative edges: steps 3 and 4 must form a bi-clique with respect to the bi-directional negative edges. ative edges.
 clique with L = {V1,V2} and R = {V4,V5,V6}. 4.2.3. Formation of DACs: step 5 sarily form an SCS with respect to positive edges. Thus, a maximal bi-clique could map to 0 or more DACs. que in which each of the two sets of nodes forms an SCS of size larger than min _ size . which could then be included in the final result.
 circles in the figure. 4.2.4. Removal of redundant DACs: step 6 to decide whether one is a sub-bi-clique of the other.
 the DAC in Fig. 10 a is redundant and needs to be removed. 4.2.5. Pseudocode dancy check is performed at line 16.
 Algorithm 1. Mine direct antagonistic communities Input: G : Signed network; min _ size : Minimum size threshold;
Output Direct antagonistic communities with each opposing sub-community X  X  size P min _ size ; 1: Let Result = {}; 2: Let G + = Projected network of G containing only positive edges; 3: Let SCCList = Get maximal SCCs from the graph G t by running ( Tarjan, 1972 ); 4: Let N + ={ n j n 2 s 1 ^ s 1 2 SCCList ^j s 1 j P min _ size }; 5: Let G = Projected network of G containing only nodes in N 6: Let T = GTD( G ); 7: Let CP = Mine for closed item-sets from T with minimum support = min _ size ; 8: for each p in CP do 9: if j p j P min _ size then 10: Let BC = Form bi-clique ( p , map ( p )); 11: Let LT = Construct SCCs from nodes in BC . L wrt. positive edges; 12: Let RT = Construct SCCs from nodes in BC . R wrt. positive edges; 13: Remove SCCs from LT and RT with size &lt; min _ size ; 14: for each pair l 2 LT and r 2 RT do 15: Create a new DAC adc from l and r ; 16: Add adc to Result ; 17: end for 18: end if 19: end for 20: Remove redundant DACs from Result ; 21: return Result ; 4.3. Baseline algorithm threshold.
 line 7).
 Algorithm 2. Baseline algorithm: main Input: G : Signed network; min _ size : Minimum size threshold; max _ size : Maximum size threshold;
Output: Direct antagonistic communities satisfying min _ size and max _ size thresholds; 1: Let M All = Get the set of all nodes or members in G ; 2: for each member m in M All do 3: Grow ( G , min _ size , max _ size ,{ m }, M All ); 4: end for Algorithm 3. Baseline algorithm: grow procedure 1: if j ms j is a DAC d satisfying min _ size and max _ size then 2: Output d 3: end if 4: if j ms j + 1 still satisfies max _ size then 5: for each m 0 2 M All but R ms then 6: Let ms 0 = ms S { m 0 } 7: Grow ( G , min _ size , max _ size , ms 0 , M All ); 8: end for 9: end if the following steps are performed: 1. We run Tarjan algorithm and generate SCCs. 2. We check if there are only two SCCs and both of them are of size no less than the min _ size threshold. 3. We check if every member of an SCC has negative edges with all members of the opposite SCC. 5. Experiments and analysis performed on two real datasets, a signed network from Epinions more than 90% of the edges are positive ones.
 when adding pseudo negative edges.
 edges than the number of negative edges in the original dataset. 3. The algorithm is written in Visual C#.Net. 5.1. Scalability experiment using synthetic datasets erated. The synthetic network generation process follows the steps outlined in Algorithm 4 . Algorithm 4. Generate a synthetic signed network Input: j N j : Number of nodes; j E j : Number of edges; s : Proportion of negative edges;
Output: Synthetic Signed Network ( N , E ); 1: Initialize N and E to be empty; 2: Create j N j nodes and assign to N unique node labels; 3: for each node n in N do 4: Create j E j j N j edges from n to other nodes randomly and assign them to E ; 5: Randomly assign s j E j edges from E as negative edges; 6: Assign the remaining (1 s ) j E j edges from E as positive edges; 7: end for 8: return ( N , E ); rithm and our baseline algorithm (with maximum DAC size threshold set at 5). signed network using our proposed algorithm and our baseline algorithm in Table 4 . ger signed networks (i.e., networks (c) X (e)). This result shows the power of our proposed pruning strategies. 5.2. Scalability and efficacy experiments using real datasets information from mined DACs. 5.2.1. Scalability experiments of slightly larger sizes. myGamma does not have any DACs of sizes 5 and above.
DACs from the original datasets, except when we mine with the minimum size threshold set at 1. 5.2.2. Efficacy experiments first type of interactions to be affirmative while the second type to be unfriendly. and about 4.5 M ratings. Given a pair of members ( u i , u opposing user pairs and allied user pairs derived from DACs. For each DAC ( U u ) j u i 2 U s , u j 2 U t }, and allied user pairs as {( u i , u the same trend as that from the original Epinions dataset.
 reviews compared with allied users. the Jaccard similarity of G i and G j :
Note that gsim is symmetric, i.e., gsim ( u i , u j )= gsim ( u user pairs in both the original and enriched myGamma datasets are greater than that of opposing user pairs. pairs in opposing sub-communities in a DAC differ significantly from those in the same sub-community. 6. Discussion and issues.
 6.1. Applications of mined DACs we leave as future work.
 behaviors frequently? What are some common precursor events that trigger antagonistic behaviors? could create inefficiency in a company, or even violence, riot, or anarchy in a community. mation, e.g., the purchasing power of different market segments/sub-communities. 6.2. Time complexity above could be simplified to O (( j N jj E jj MB j )+( j DAC j rithm, which is the most expensive operation, as noted in our experiments. 6.3. Scalability and dealing with large signed networks ative edges. 6.4. Ground truth than allied user pairs in myGamma dataset. 6.5. Relaxing SCC constraint these extensions for future work.
 6.6. Comparisons to other baselines munities are not directly comparable. 6.7. Volatility and evolution of antagonistic communities atile? We plan to investigate this and other related questions in our future work. 7. Conclusion and future work the opposing community have bi-directional negative relationships. scale to 1,000,000 nodes and 6,000,000 edges.
 algorithm to accommodate various possible extensions described in Section 6 . Acknowledgments their dataset with us, and National Research Foundation (NRF) (NRF2008IDM-IDM004-036) for funding the work. References
