 1. Introduction increased all over the world. This large number of vehicles leads to heavy traf fi c congestion, air pollution, high fuel consumption and consequent economic issues ( Narzt et al., 2010 ). In 2010, the American people faced a lot of dif fi culties due to vehicle congestion which forced their government to spend 101 billion dollars on the purchase of extra fuel ( Schrank et al., 2012 ). Based on a report by Texas A&amp;M Transportation Institute ( Schrank et al., 2012 ), it is estimated that fuel consumption will rise up to 2.5 billion gallons (from 1.9 billion gallons in 2010) with a cost of 131 billion dollars in 2015. Accordingly, fi nding effective solu-tions with reasonable cost for congestion mitigation is one of the major concerns of researchers and industries in recent years.
Building new, high-capacity streets and highways can mitigate some of the aforementioned problems. Nevertheless, this solution is very costly, time consuming and in most cases, impossible because of space limitations. On the other hand, optimal usage of the existing roads and streets capacity can lessen the congestion problem in large cities at a lower cost.
 Intelligent Transportation System (ITS) ( Dimitrakopoulos and
Demestichas, 2010 ) is a newly emerged system which collects real-time data for congestion monitoring using road side units (e.g. video cameras, radio-frequency identi fi cation (RFID) readers and induction loops) and vehicles as mobile sensors (i.e. in-vehicle technologies or smart phones). These data are used by car navigation systems (CNSs) to fi nd the shortest path or optimal path from a source to a destination. Previous researches ( Noto and Sato, 2000; Yue and
Shao, 2007; Nazari et al., 2008 ) concentrated on using static algo-rithms (e.g. Dijkstra, 1959 )andA n ( Hart et al., 1968 )to shortest path in CNSs. Conversely, current studies primarily focus on fi nding the optimal paths, considering various criteria by utilizing dynamic and meta-heuristic algorithms ( Liu et al., 2007; Salehinejad and Talebi, 2008; Boryczka and Bura, 2013 ). This trend happens due to the dynamic nature of vehicular environments which depends on both predictable and unpredictable events and also because of the multi-criteria nature of CNSs. Multi-criteria means that distance is not the only objective of CNSs and the drivers. Other key factors include congestion, number of traf fi c lights, number of route lines, accident risk and travel time. Hansen proved that the multi-criteria shortest path problem is an NP-problem since it requires enumerat-ing all the possible routes ( Hansen, 1980 ).

Recently, Google and Microsoft have predicted vehicle conges-tion and its duration by performing an advanced statistical predictive analysis of traf fi c information ( Pan and Khan, 2012 ). This traf fi c information was provided by the existing infrastruc-tures (e.g. Road Side Units) in order to propose a traf fi shortest path for users and drivers. Therefore, this information is not only based on the current traf fi c information but is also based on other metrics such as weather and historical traf fi c information. It is worth noting that their system is reactive and avoids vehicle congestion implicitly, which is still not enough, due to the non-recurring congestion. These types of congestion include more than 50% of all vehicle congestion ( Coifman and Mallika, 2007 ). More-over, the same path is suggested to users by this system and similar to static algorithms, congestion will be switched from one route to another if a signi fi cant number of drivers utilize this system. Swarm intelligence algorithms are proposed to solve the aforementioned drawbacks.

Swarm intelligence algorithms are newly emerged algorithms which simulate the behavior of different animals in nature such as ants, bees, fi sh and birds ( Merkle and Blum, 2008; Ahmed and Glasgow, 2012; Yang et al., 2013 ). These algorithms are able to produce fast, multi-criteria, low cost and robust solutions for various problems such as routing, scheduling and assignment ( Merkle and Blum, 2008; Panigrahi et al., 2011 ). Among these heuristic algorithms, the use of ant-based algorithms has been reported as promising and one of the best approaches for conges-tion control and traf fi c management in many research projects ( Tatomir and Rothkrantz, 2004; Liu et al., 2007; Dhillon and Van Mieghem, 2007 ). This paper moves one step forward by presenting a multi-objective ant-based vehicle congestion avoidance system (AVCAS) for proactive congestion avoidance based on real-time traf fi c information. Our main goal in AVCAS includes proposing the shortest path with the least congestion and travel time, as well as higher vehicle speed. Moreover, non-recurring congestion (e.g. accident, working zones, weather conditions) are also implicitly considered and handled in AVCAS. AVCAS periodically computes n shortest paths, where n is the number of alternative paths, based on the average travel speed prediction and vehicle density for various Origin  X  Destination (OD) pairs instead of computing these paths for each vehicle (i.e. the number of vehicles is much bigger than the number of OD pairs) and re-routes the vehicles through the least congested path based on their destinations. Implicitly, air pollution and fuel consumption are decreased by this system.
The remainder of this paper is organized as follows: an overview of the ant-based algorithm and its various types and applications are presented in Section 2 . Section 3 discusses the ant-based algorithm usage in vehicle congestion control systems. AVCAS and its operation are presented in Section 4 ,while Section 5 includes the simulation results and system evaluation. Finally, Section 6 concludes the paper and suggests the direction for future research. 2. Ant-based algorithms: de fi nition, types, and applications
How do real ants communicate with each other in fi nding food sources and accumulate food in their nest using the shortest path, considering the fact that they are blind insects? This question has attracted the attention of many researchers and scientists for many years. The answer is that the ants release a chemical liquid, called pheromone, on their traversed paths based on the quality of the food resource found while moving from their nest to the food source and vice versa. This pheromone trail helps other ants to fi nd the food resources by snif fi ng the pheromone. The phero-mone intensity decreases (pheromone evaporation) over time in order to increase the probability of fi nding new paths. This phenomenon forms the infrastructure of an Ant System (AS) and
Ant Colony Optimization (ACO) algorithms proposed by Dorigo et al. (1991, 1999) and Dorigo (1992) to simulate real ant behaviors by using arti fi cial ants.

Most of the characteristics of real ants are mimicked by arti fi cial ants in order to simulate the behavior of an ant colony for the solution of optimization and distributed control problems.
The most common characteristics of real and arti fi cial ants are discussed as follows:
Pheromone trail based stigmergy communication : Pheromone trails assist ants to fi nd the shortest path from nest to food source. While stigmergy communication is a self-organizing behavior of ants which is required to interact with each ant ( Theraulaz and Bonabeau, 1999 ). This communication occurs in an indirect manner which means that an ant alters its surrounding environment by laying pheromone on its tra-versed paths and the other ants respond to this modi fi cation at a later time ( Bonebeau et al., 1999 ). Stigmergy can be transferred to arti fi cial ants by assigning numerical information to the problem space variables and by giving the arti fi cial ants local access to these variables ( Dorigo et al., 1999 ).
Implicit shortest path fi nding : An implicit shortest path happens by reinforcement on the shortest path for both real and arti fi cial ants. More pheromone is laid on the shortest paths because they are completed more faster than longer paths ( Di Caro, 2004 ).

Concurrent and independent iterations : The arti fi cial individual ant, similar to the real one, is able to fi nd a path from nest to food, but it is not the only ant that does this task. The other ants do the same task concurrently and independently in order to converge to the optimal path in a short time ( Dorigo and Birattari, 2010 ).

Discrete world : Arti fi cial ants, unlike real ants, live in a discrete world which means that their actions are transitions from one discrete condition to another ( Dorigo et al., 1999 ).
Synchronized vs. desynchronized system :Arti fi cial ants move from their nest to the food source and vice versa in each iteration.
Therefore, they move in a synchronized way unlike real ants which move in a desynchronized pattern ( Blum, 2005 ).
Memory : The arti fi cial ant utilizes an embedded memory to store the traversed path information. It is used for building and evaluating possible solutions, for backtracking from destination to source and for updating the pheromone value on the found path. In comparison, real ants do not have memory but use their sensing capability for this purpose.

Pheromone evaporation strategy : Pheromone evaporation hap-pens very slowly in nature and its rate is constant ( Deneubourg et al., 1990 ). This mechanism and its evaporation rate vary from one problem to another in the simulation environment for arti fi cial ants.

Extra capabilities :Arti fi cial ants use extra capabilities to increase the ef fi ciency of the whole system that can be augmented with capabilities such as future pred iction, local optimization, and backtracking, while these capabilities cannot be found in real ants. 2.1. Ant colony optimization (ACO)
In this section, we describe the procedure of ACO algo-rithm. Even though many changes have been applied to the ACO algorithm in the last two decades, its basic mechanism and steps are still remained unchanged. The steps of the ACO algorithm are as follows: 1. Problem graph depiction : Arti fi cial ants move from one discrete 2. Initialization : A number of arti fi cial ants ( N a ) are located on  X  3. Pheromone update : The ants start to move from source to
 X 
 X  where Q is the constant value and f k is the cost of found route by ant k . 4. Stopping procedure : The ACO algorithm is completed by reach-ing a prede fi ned number of iterations whereas an ant is dropped by arriving at a prede fi ned maximum number of hops before reaching its destination. 2.2. Types of ACO and its applications
The fi rst study to adopt the ant system (AS) and the ACO algorithm aims to solve the salesman problem by introducing the Traveling Salesmen Problem ( Dorigo et al., 1991; Dorigo, 1992 ).
Promising results in its initial experiments and also its novelty attracted researchers attention and a number of extensions of the principle were introduced in recent years that could improve the
ASs performance in a signi fi cant way. These extensions include elitist AS ( Dorigo, 1992 ), rank-based AS ( Bullnheimer et al., 1997 ), and MAXMIN AS ( St X tzle and Hoos, 2000 ). The main differences between the initial AS and these extensions are the pheromone update procedure and some additional details in the pheromone trails management. There are some other ACO algorithms that modify the features of the AS in the literature. More details about these approaches and their differences can be found in Dorigo and Birattari (2010) and Dorigo and St X tzle (2010) .

In addition to proposing different extensions of the ACO algo-rithm, ACO has been widely utilized in different research areas and industries in recent years. Computer, electronic, civil and mechanical engineering are the most predomi nant domains that receive more bene fi ts from ACO. Routing algorithms ( Di Caro and Dorigo, 2011;
Misra et al., 2010 ), digital image processing ( Siang Tan and Mat Isa, 2011; Tian et al., 2011 ), bridge piers design ( Mart X nez et al., 2010, 2011 ) and scheduling ( Chen et al., 2010; Berrichi et al., 2010 )are some areas which have used ACO to improve ef fi ciency. More information about ACO applications can be found in Dorigo and St X tzle (2010) and Chandra Mohan and Baskaran (2012) .
ITS merges computer network-based information (e.g. vehicular networks and wireless sensor network) and electronic technologies (e.g. sensors and cameras) with transportation technologies to provide vehicle routing and congestion control mechanisms.
Recently, studies have augmented the ACO algorithm into vehicle routing and congestion control systems obtaining promising results.
These systems are discussed in the following section. 3. Progress of ant-based vehicle congestion control systems
Before describing an ant-based vehicle congestion control system, it is worth noting that most of the recent approaches and solutions in vehicle traf fi c domain utilize the collected traf data via Global Positioning Systems (GPS), Geographical Informa-tion Systems (GIS), Vehicle-to-Vehicle (V2V) and Vehicle-to-
Infrastructure (V2I) communications to predict the future traf information on the roads ( Gong et al., 2008 ). Although prediction of traf fi c information such as vehicle density, travel speed and time are important factors for vehicle traf fi c routing, it is a dif process due to various unpredictable events and dynamic nature of vehicular environments. Neural networks are utilized by some researchers ( Shen, 2008; Van Lint et al., 2005; Dia, 2001; Park et al., 2011 ) for vehicle travel time and speed prediction due to their learning capabilities. In these approaches, proposed algorithms trained with historical traf fi c data and used real-time traf for vehicle travel time and speed prediction. Vehicle travel time prediction is used in most of the existing approaches. Predicted data can be used for appropriate vehicle routing and congestion avoidance.

Traf fi c congestion recognition and avoidance approach by using vehicular networks is proposed by Wedel et al. (2009) . Average travel speed of vehicles is used for congested road detection and congestion avoidance. Congestion avoidance and route allocation using virtual agent negotiation (CARAVAN) ( Desai et al., 2013 )isa multi-agent system that is developed for fi nding optimal paths within a short time and with low communication overheads. Vehicles exchange preference information and use virtual negotia-tion for collaborative route allocation through inter-vehicular communications in CARAVAN. Combination of the Dijkstra algo-rithm and a heuristic algorithm (e.g. Particle Swarm Optimization, Simulated Annealing or Tabu Search) is proposed as a hybrid vehicular re-routing strategy for vehicle traf fi c congestion avoid-ance by Wang et al. (2013) . Three re-routing strategies, namely multi-path load balancing consider future vehicle positions (EBkSP), random multi-path load balancing (RkSP), and Dynamic Shortest Path (DSP), are presented by Pan and Khan (2012) , for vehicle congestion avoidance that use V2I communications for real-time data collection. Batool and Khan (2005) proposed another travel time and traf fi c congestion prediction method using ad hoc networks. They developed a multilayer feed forward neural network combined with a back-propagation algorithm ( Rumelhart et al., 1988 ) for traf fi c congestion prediction. Since our proposed approach, AVCAS, is based on an ant-based algorithm, we present a comprehensive overview of ant-based vehicle congestion control systems in the following paragraphs.

Initially, Fan et al. (2004) proposed an ant-based algorithm to solve the shortest path problem without considering vehicle congestion. Since the ant-based algorithm was proposed and examined for static problems (e.g. shortest path problem), researchers have started to improve the steps or found optimal values for various parameters of the ACO to prepare it for dynamic problems such as vehicular environments. Some limited studies have been conducted in fi nding the best values for the parameters in ACO to reduce vehicle congestion on the roads ( Liu et al., 2007; Nahar and Hashim, 2011; Ok et al., 2011 ). On the other hand, most of the efforts were performed on modifying the ants performance or the probability function in the second step of ACO. For instance, a new type of ant, namely the check ant, was introduced to preserve better routes and discard degraded ones by considering the travel time as an evaluation metric ( Ghazy et al., 2012 ). City agent, road supervisor agent and intelligent vehicle-ant agent are three different ants which were used to fi nd the best route, based on real-time data from a vehicular network ( Kammoun et al., 2010 ). In addition, other studies ( Ge et al., 2011; Bedi et al., 2007; Hallam et al., 2004 ) described modi fi ed probability functions for the next hop fi nding. However, most of the probability functions are similar to the basic probability function; the only differences are minor modi fi cations such as the addition or omission of parameters from the basic probability function.

In the second stage of the research, road map segmentation was utilized by Narzt et al. (2010) , Tatomir and Rothkrantz (2006) and Claes and Holvoet (2012) to overcome dynamic and quick changes of vehicular environments. A hierarchical routing system (HRS) based on the ant algorithm that splits a road map into several smaller and less complex maps was proposed ( Tatomir and Rothkrantz, 2006 ). HRS considers only historical and present traf fi c conditions and does not pay attention to future conditions ( Tatomir et al., 2009 ). The ant-based algorithm was used to guide a vehicle at each intersection by creating routing tables. Narzt et al. (2010) introduced another technique that uses segmentation as a principle to overcome traf fi c control problems. In this approach, a novel pheromone update with a user preference assignment system was adopted to divide the environment into different clusters. This approach adopts only the pheromone mechanisms without considering real-time information that can be collected by new technologies ( Kanamori et al., 2012 ). A cooperative ant-based algorithm was proposed, based on the region concept ( Claes and
Holvoet, 2012 ) where near segments are grouped together to form a region. Thereafter, routing is performed according to the regions instead of segments. However, maintaining the additional data needed for each speci fi c region presents a high overhead to this approach ( Dias et al., 2013 ).

Besides segmentation, prediction based congestion control systems were proposed which utilized the traf fi c patterns or traf fi c condition prediction to reduce congestion on the road. Link travel time or vehicle queue length prediction based on real-time information was used for congestion prediction and reduction ( Claes and Holvoet, 2011; Tatomir et al., 2009; Ando et al., 2006 ).
Arti fi cial intelligence algorithms were adopted, such as machine learning, neural networks and fuzzy logic to predict the traf pattern. Youse fi and Zamani (2013) proposed an optimal routing method using a machine learning algorithm to reduce vehicle travel time by combining ACO and learning approaches based on the length of paths. Jiang et al. (2007) proposed the shortest path fi nding method by modifying the pheromone update rule and adding a learning strategy into the ACO. In the case of neural network and fuzzy logic, dynamic route selection was proposed by
Abbas et al. (2011) and Salehinejad and Talebi (2010) to avoid traf fi c congestion. Fuzzy logic and neural network were utilized for pheromone update and traf fi c prediction, respectively. Although using traf fi c prediction can improve the congestion avoidance procedure, it explicitly leads to the identi fi cation of sub-optimal paths instead of optimal paths in most cases ( Dooms, 2013 ).
Moreover, using arti fi cial intelligence techniques for traf diction may increase both system overhead and complexity which is not suitable for vehicle traf fi c routing systems. A comprehensive review of ant-based vehicle traf fi c routing systems can be found in our previous study ( Jabbarpour et al., 2014 ).

Although most of the reviewed approaches obtained promising results for vehicle congestion control, we believe that combining segmentation with short-term prediction and avoiding congestion instead of recovering from it is a better solution for congestion problems in a vehicular environment. In addition, although acci-dents are one of the main reasons for vehicular congestion ( Wang, 2010 ), they were not considered in most of the current approaches due to their complexity and unpredictability. However, AVCAS which implicitly considers accidents in its routing process is proposed in this paper to achieve congestion avoidance. This algorithm uses segmentation, the average travel speed of links as a short-term prediction metric, vehicle density and average travel time to accomplish this goal. 4. Ant-based vehicle congestion avoidance system (AVCAS)
Before explaining the various steps of AVCAS, we discuss the technical architecture that AVCAS uses and whether it is centralized or decentralized. In a decentralized architecture, route fi computation takes place for each vehicle individually using the on-board processor and memory of that vehicle. It is ideal if vehicles receive traf fi c information through wireless communication (e.g. vehicle-to-vehicle or vehicle-to -infrastructure) and include road maps and GPS. In a centralized architecture, route fi nding and computation takes place through a central server in response to requests from drivers. In this architecture, the central server has access to the historical or real-time traf fi c information database and computes routing algorithms based on this information. More information about centralized or decentralized architectures and their pros and cons can be found in Suson (2010) .

AVCAS is designed for decentralized architecture, however the architecture is not yet available to be used, since all vehicles are not equipped with on-board units and wireless transceivers.
AVCAS can be con fi gured to be distributed over several on-board vehicle navigation systems, but at this moment, it can only be executed in a centralized manner. Therefore, AVCAS is part of a group of distributed centralized servers (see Section 4.1 for more details) which provides route advice to the drivers who are equipped with transceiver devices (e.g. mobile phones, PDAs,
Tablets). Our model also assumes that the system can detect the position of the vehicles via GPS. AVCAS is expected to guide vehicles through the least congested shortest paths to their destinations. As was discussed previously, problem environment depiction, initialization, pheromone update and stopping proce-dure are the main steps of ant-based algorithms (see Section 2.2 ).
Each of these steps in AVCAS is discussed in the following subsections. 4.1. Problem environment depiction and to reduce system overhead and complexity, problem environ-ment depiction includes two phases, namely segmentation and layering, which are explained in the following. Using a distributed centralized management system (instead of one centralized sys-tem) is another advantage of these phases. Our proposed layered and segmented model which consists of the following four different bottom-up layers is illustrated in Fig. 1 and explained as follows: 1. Physical layer : This layer shows the real road map and nodes map is converted to a graph and this graph is given by
G p  X  ( N p ; L p ), where N p and L p are the set of nodes and links, respectively.

The segmentation phase happens in this layer and divides road map into number of segments with different sizes. Specifying the segments size is based on the number of nodes (i.e. junctions, intersections) in each segment. In other words, their sizes are assigned in such a way that there is approximately identical number of nodes in each segment. Different sizes of segments are considered in order to maximize the use of resources such as processors and storage devices, and also to balance and reduce the routing overhead in different segments.
Moreover, dynamic and quick changes of vehicular environ-ments can be managed using map segmentation and routing is accomplished for each segment individually instead of the whole map. This segmentation is applied in physical layer and each segment is managed by one navigator. Navigators are responsible for creating and updating the routing table for their own segment, which is called the Intra Segment
Table ( Intra ST  X  i  X  ), using an assigned weight to each link in the graph based on the pheromone update rule (Eq. (11) ), where i is the segment number (or identi fi er). Besides, Table of
Segment ( ToS ) is created in segmentation phase which includes the nodes' name, ID and their segment in order to give a complete road map view to all navigator servers. This table is distributed among all servers and helps them to detect the destination nodes' segments in the routing procedure.

One of the main requirements of CNSs, using decentralized processing system, is achievable through the segmentation phase. It means that several centralized servers (navigators) are distributed throughout the segmented road map (i.e. one server for each segment), namely distributed centralized ser-vers, to guide the vehicles to their destinations. In this way, the road map searching time and the size of routing tables are reduced signi fi cantly. This is because each navigator is released from maintaining the whole map information and maintains only small routing tables with local information. Using different strategies (i.e. different types of ants, pheromone update rules, pheromone trail laying rules and probability functions) for different segments is another advantage of road map segmen-tation in AVCAS. 2. Junction layer : Ineffective nodes which do not correspond to a junction are eliminated on the junction layer due to identi tion of an impossible turning. Junctions are the most critical points in the vehicle routing process. 3. Border nodes layer : Junctions and their links which connect two different segments in junction layer are retained, otherwise, they are pruned. The remaining nodes (junctions) are called the border nodes. The Border Nodes Table ( BNT  X  i  X  ), which stores border nodes information, is created for each segment and used for routing to surrounding segments. The BNT of each segment is disseminated among all junctions of same segment. Thus, this layers information can be used whenever the source and the destination of a vehicle are not in the same segment, but there is a direct link between them. 4. Routing layer : The information in this layer is used whenever a vehicle travels over long distances and thus traverses more than one segment to reach its destination. To achieve this goal, a node is assigned to each segment and a link is added between two nodes if there is a link between these two segments' bor-der nodes. An Inter Segment Table ( Inter-ST ) is created based on this new graph ( G R ) and is used for distant destination routing (e.g. between segments). G R  X  X  N R ; L R  X  , where N R is the set of nodes assigned to each segment, therefore their numbers are equal to the number of segments, and L R is the set of links between N R . The Inter-ST is disseminated among all segments navigators to give an overall view of the map to the distributed navigators.
 Three different cases may occur in the routing process of a vehicle from a node I (source) in X segment to node y (destination) in Z segment: 1. the source and destination nodes are in the same segment; 2. the destination node is within one of the source nodes surrounding areas; 3. other (neither case 1 nor 2).
 It is worth noting that servers detect the segments of sources and destination nodes through ToS .Therefore,incase1,the Intra ST used by the navigator for each routing decision. In case 2, the Intra ST  X  x  X  is used to guide the source node to a border node of thesamearea.Thenthe BNT  X  x  X  is used to guide the source node to a border node of the destination segment. After that, the Intra ST used to guide the source node to a destination node within the destination area. In case 3, a similar strategy as in case 2 is used, however the Inter-ST is used to guide the source node from the previously selected border node to the proper border node of the next segment until it reaches its destination segment. All of these the ant-based algorithm which is discussed in following section. 4.2. Initialization
Ants are the cornerstone of our system in the initialization phase and we discuss the various types of ant agents used in AVCAS in this subsection. Vehicle as ANT (VANT) and Packet as ANT (PANT) are the two main types of ant agents modeled. PANTs are further divided into two types, namely Forward ANT (FANT) and Backward ANT (BANT). 4.2.1. Vehicle as ANT (VANT)
Vehicles are used as real ants in our system in order to collect accurate real-time information using VANET infrastructures. Vehi-cles send basic data such as ID , time and direction as a message to road side units, which are located at junctions. Using these data, the navigation servers predict the travel speed of each link ( PTS in its segment based on historical and real-time speed informa-tion. Based on Kwon and Petty (2005) , Nanthawichit et al. (2003) , and Chien and Kuchipudi (2003) , both current traf fi c conditions and historical data are required for accurate short-term prediction of the time it takes for a driver from an origin to arrive at a destination. Because vehicles' traveling time, speed and density or in other words the cost or probability of each road/street on the road map are not constant over time, for this prediction, we add a vertical time axis and break the time into discrete intervals ( I ; I 1 ; ... ; I n ) (i.e. 10 s), where I k  X  X  start k ; end beginning at time instant start k and ending at time instant end in order to consider the dynamic aspect of these data. As a result, our proposed links probability function (Eq. (7) ) for Forward ANTs (FANTs) in the next section is a discrete and time-dependent function and a set of time-dependent cost or probability is assigned to edges (roads). A discrete time dynamic network can be represented as a static network using a time-expanded network model ( K X hler et al., 2002 ), which is a useful implicit tool for visualizing, formulating and solving discrete time dynamic short-est path problems. By adopting this model, probability or cast can be satisfactory approximated for each interval. Historical Travel Speed (HTS) and Current Travel Speed (CTS) are calculated and assigned to each link ( i , j ) for each TI. If we assume that t current time, CTS and HTS for link ( i , j ) at time n are calculated using Eqs. (4) and (5) , respectively, as follows:
CTS  X  LL ij NV ij  X   X 
HTS  X  where NV ij is the number of vehicles on link ( i , j ), and LL length of link ( i , j ) and has a constant value.  X  t ID duration used by speci fi c vehicle ( ID ) to traverse a road between two consecutive junctions. The navigation server of each segment is able to calculate  X  t ID and NV ij for its segments links (roads or streets) as illustrated in Fig. 2 .

NV ij is obtained from the number of vehicle IDs in the table of junction i ( NV ij is 3 in our depicted example). Vehicles' information is omitted from the junction table upon reaching a new junction and is used by the navigation server to calculate  X  t ID . In the example in Fig. 2 , the information of the vehicle whose ID of 12 was omitted from junction 1's table and  X  t 12 is calculated as 1 : 14 1 : 11 min  X  3 min. The Short-term Predicted Travel Speed (PTS) of link ( i , j ) at time t  X  n  X  1 is computed as follows:
PTS where  X  and  X  weight the effect of historical and current travel speeds on the predicted travel speed of roads respectively.
It is worth noting that both HTS and CTS are used for PTS calculation in order to consider both recurring (regular) and non-recurring congestion, respectively. Delay on a road can be caused by incidents for example by accidents (non-recurring congestion or delay). But there are also regular delays in the rush hours.
Regular (recurring) delays exist in historical data. It is important that our system be sensitive to both of these delays and adapts immediately. That is why Eq. (6) includes current speed and the regular speed from the historical data. In the non-recurring delay cases that the delays differ completely from the historical data, the adaptation is suboptimal by taking care of historical data. But in most cases the delay will be similar to the historical data so it is good that our system anticipates the regular delays from historical data even if the current speed does not show any delay. Taking care of only current speed reduces the adaptability of our system.
For example, if one driver drives slower than the normal speed it will affect the other vehicles speed as well since its rear vehicles try to change their lane and this lane changing will also affect the vehicles speed on the other lanes. However, since this speed reduction is instant and temporary its impact on the routing system should be reduced. This can be obtained by considering historical data because real-time data on its own is not adequate for mitigating this issue. 4.2.2. Packet as ANT (PANT)
After the gathering of real-time information by VANTs, PANTs are used to explore and fi nd the shortest least congested path between source and destination. FANTs and BANTs are used for this purpose. We have improved the ant packet header which was proposed in AntNET ( Dorigo and Sttzle, 2004 ) due to the changes in problem environment depiction (i.e. segmentation and layer-ing). Two new fi elds are added to represent the source and destinations segments. The new header is used by PANTs during road map exploration and path fi nding procedure. This packet header is illustrated in Fig. 3 . (a) Forward ANT (FANT): FANTs explore the road map and con-
 X 
 X 
 X 
 X  (b) Backward ANT (BANT): When a FANT reaches its destination, it 4.3. Pheromone update
When all the FANTs have reached their destinations, the pheromone level of each link is updated. This update can either increase or decrease the pheromone trial values. These two phases are called pheromone reinforcement and evaporation in ant-based algorithms. BANTs use the FANTs memory to return from the destination to the source node. Therefore, they can evaluate the cost of the solutions that they generate and use this evaluation to modulate the amount of pheromone that they deposit on the links in return mode. Making pheromone update a function of the generated solution quality can help in directing future ants more strongly toward better solutions. In fact, by letting ants deposit a higher amount of pheromone on the optimal paths, the ant's path searching is more quickly biased towards the best solutions. The intensity of pheromone is increased or decreased by using Eq. (11) , which is called the pheromone update rule in our system: where  X  A (0, 1] is a constant value, named pheromone evapora-tion, and n is the number of nodes in the desired segment. The amount of pheromone laid on links i and j by ant k is calculated using where TT k ij ; D k ij and LL ij k are the travel time, vehicle density and length of each link of the found route by ant k , respectively. As a result, if a link belongs to a found route by an ant, its pheromone value is increased (reinforcement) considering its travel time, vehicle density and length. If it does not belong to a found route, its pheromone value is decreased (evaporates). It means that
Eq. (11) fi rst decreases the pheromone value of all links and then increases it for the links belonging to the found route. Pheromone evaporation improves the exploration factor of the search and encourages the ants to fi nd new routes instead of insisting on the fi rst found route.

Most of the current approaches do not consider accidents in their system due to the complexity of these unpredictable events.
In order to consider accidents, we have to deal with two main points: First, the accident, that is, its accurate position, time and status (i.e. how serious it is) should be detected based on the collected data via sensors and video cameras or received through reports from other drivers via their smart phones or devices.
Second, fi nding a way to update the routing tables in the shortest time possible with the least delay on the accident condition is a necessity. It is worth noting that some of the current approaches such as the HRS ( Tatomir and Rothkrantz, 2006 ), disable (i.e. ignore) the road where an accident has happened for a while and let the system perform without considering that road in the routing process. The point with the ant-based algorithm is that it handles this situation with some delay due to the stochastic feature of the searching approach and this causes many vehicles to unknowingly join in the congestion before the routing tables are updated. To solve this drawback and to consider accidents implicitly without any concern of the two aforementioned points, TT ij ; D k ij and LL ij k are used simultaneously at Eq. (12) in AVCAS. By using this new approach, the ants get an additional penalty if they choose the congested roads or the roads with longer travel time which may happen in an accident situation. In this way, roads with less traf fi c density and travel time are favored even if those roads are somewhat longer.

Another important issue which should be considered in vehicle traf fi c routing is that, most of the time, all roads are occupied during rush hours making rerouting impossible. Vehicle traf routing is effective and applicable as long as the full capacity of the roads is not occupied or congested. This issue is considered in AVCAS by fi nding and utilizing n alternative paths between various OD pairs simultaneously from the early stage of the routing system. AVCAS periodically, called re-generation period,  X  ates pre-de fi ned number of FANTs, N a , in order to compute and use alternative paths in its routing procedure. FANTs are located on each node of segments as origin points. Then, they start to explore road map using Eq. (7) and considering the other nodes of their segment as destination points. They fi nd up to n alternative paths (i.e. at least one path and at most n paths) to the other nodes of their segment. After that, BANTs return to origin points from destination points and update the visited links' pheromone value by using Eq. (11) . Intra ST  X  i  X  is created and updated by using this information and procedure. Intra ST  X  i  X  includes m smaller tables where m is the number of nodes in segment i . Each of these smaller tables consists of at least m and at most m n rows as a possible destination, since AVCAS computes up to n alternative paths between various OD pairs of its own segment. Moreover, these tables consist of 3 columns: destination node, next node and route probability. It means that different paths with various criteria (e.g. distance, capacity, density, travel time and speed) are used for routing vehicles with the same OD pairs. In this way, road capacities are utilized more ef fi ciently. It is worth noting that these n alternative paths are ordered and got priority based on the probability value calculated by Eq. (7) which encompasses all the mentioned criteria for each same OD pair. It means that the path with highest probability value gets the highest priority ( n ), while the path with lowest probability value gets the lowest priority (1). Vehicles are routed through these alternative paths in such a way that more number of vehicles are routed to the path with the highest probability value and the fewer number of them are routed to the path with the lowest probability value. Cross-multiplication rule is used in Eqs. (13) and (14) in order to identify the portion of routing requests that should be routed through each of the n found alternative paths as follows: Z  X  100 P  X  n Z :  X  14  X  where P n indicates the portion or percentage of the vehicles that should be guided through the path with the priority n . Besides, n ; n 1 ; ... ; 1 are the mentioned priorities assigned to the n alternative paths.

This may appear to cause delays for some vehicles because they are routed through longer routes but in fact, it leads to a shorter average travel time for the whole cohort because the congestion is spread to n paths instead of only one path. The optimal number of alternative paths ( n ), pre-de fi ned number of FANTs ( N generation period (  X  ) are obtained through the simulation results. 4.4. Stopping procedure
ACO should be stopped or completed when a prede fi ned condition(s) is reached. A prede fi ned number of iterations, execu-tion time or maximum visited nodes by ants and the pheromone value remaining unchanged for a number of consecutive iterations are some examples of the stopping criteria. However, AVCAS executes for an in fi nite number of cycles. A cycle completed by reaching a prede fi ned number of iterations where an ant is dropped by arriving at a prede fi ned maximum number of hops before reaching its destination and is set to n  X  1, where n is the number of nodes in a speci fi c segment. It can also be used as an algorithm loop prevention criteria. 4.5. AVCAS in the real world
To implement AVCAS in the real world, the road map is split into different segments using segmentation phase and one server is assigned to each segment. Each navigation server is responsible for a spatially limited area, where it handles routing requests from vehicles within its segment. Vehicle-to-infrastructure communi-cation is a necessity for collecting real-time traf fi c information.
Every crossing vehicle sends some information such as time, direction and destination to the located road side units at the junctions. This information is then transferred to the navigation servers which are the cornerstone of AVCAS. Vehicle position is transmitted by GPS-enabled devices (e.g. personal navigation assistant or smart phone) to its nearby road side unit. Navigation servers use this information to compute HTS, CTS and PTS for each road within their own segment by using Eqs. (4)  X  (6) , as explained in Fig. 2 .

Navigation servers regenerate a number of FANTs ( N a )at prede fi ned TIs, namely re-generation period (  X  ) and use them to compute up to n alternative paths (i.e. at least one path and at most n paths) between various OD pairs of its own segment by applying AVCAS. After that, BANTs return to origin points from destination points and update the visited links' pheromone value by using Eqs. (11) and (12) . Intra ST  X  i  X  is created and updated by using this information and procedure. Intra ST  X  i  X  is used to guide vehicles to their destination if they are within their destination segment, otherwise they are routed to the proper border nodes.
Vehicles with a same origin and destination are routed through n calculated alternative paths instead of one path.

The navigation servers communicate via wired networks due to high security and their resistance against interference. They utilize the border nodes and routing layers' (third and fourth layers of our layering model) information to create and update BNT and Inter-ST in order to fi nd proper border nodes to route the vehicles between two different segments. Using all these data, an OD routing is performed, where each vehicle receives an individual routing guidance based on its current position and destination before each junction in due time by using infrastructure-to-vehicle communication. There is a serious real-time challenge to be solved since each vehicle has its own deadline to receive the routing information based on its speed. AVCAS ef fi ciency is evaluated through simulation in the next section. 5. Simulation results
In this section, the simulation results are discussed by compar-ing the proposed AVCAS with other existing systems. It is worth noting that since vehicular environment changes dynamically and quickly based on many unpredictable factors, the choice of an ef fi cient and meaningful simulation setup was a very dif
In order to overcome this dif fi culty, a limited set of tunable factors was de fi ned such as the topological and physical properties of the selected road map, traf fi c patterns, evaluation metrics, and com-peting algorithms and their variables' values. 5.1. Simulation setup extracted from OpenStreetMap in the form of XML formatted.osm fi les and used as the physical road map in our simulation which is illustrated in Fig. 4 . Different numbers of lanes and speed limits were assigned to different roads in order to get closer to the real vehicular scenarios. Table 1 represents the different statistic speci fi cations for this road map.
 movement patterns on the extracted map of Kuala Lumpur. SUMO ( Krajzewicz et al., 2012 ) is the most widely used open-source and time discrete microscopic road traf fi c simulation package avail-able. Along with the road map network, some other speci fi such as speed limits, number of lanes and detectors at junctions are de fi ned in SUMO. We have utilized Netconvert and Traf deler ( Papaleondiou and Dikaiakos, 2009 ) tools in SUMO to convert the map into a SUMO suitable format (i.e. from osm to net fi le in XML format) and to generate vehicular traf fi movements. Various numbers of vehicles (i.e. ranging from 100 to 1000) were generated and located on each of the desired origins.
In Fig. 4 , arrows represent these origins and the highlighted red road is the vehicle's destination. In SUMO, we have utilized the default settings for most of the attributes; however the value of some of these attributes has been changed. Table 2 represents these attributes and their default and new values.

The fi rst 60 s of the output from SUMO was discarded to get more accurate results. TraNSLite, which is a GUI tool for generating realistic mobility traces for simulating vehicular networks in NS-2, was used to convert the generated traf fi c scenario into a usable format for NS-2.33. The output of TraNSLite is a TCL fi le which was used as the traf fi c pattern for NS-2. AVCAS was simulated in NS-2 and its output, i.e. the new values for each link of the map, was transferred to SUMO for evaluation purposes. This process is illustrated in Fig. 5 and Table 3 summarizes the simulation parameters used for NS-2. All results represent an average of over 25 executions with different scenarios (maximum error of 10% with a degree of con fi dence of 90%). The evaluation process consists of two steps: (1) fi nding the proper values for AVCAS parameters using NS-2 and (2) comparing AVCAS with other mechanisms using SUMO. A static shortest path algorithm (e.g.
Dijkstra algorithm, Dijkstra, 1959 ) was used as the default algo-rithm in SUMO. Therefore, we used it with the new link value in order to compare our algorithm to other existing algorithms ( Papaleondiou and Dikaiakos, 2009 ). 5.2. Simulation results for AVCAS parameters ' value
To fi nd the best value for the various parameters of AVCAS, their impact on this algorithm were examined individually through simulation and explained as follows. A simple road map, which includes 12 nodes (junctions) of which 2 are border nodes, 15 links (roads), and 2 segments, was used for this purpose and is illustrated in Fig. 6 . The average travel time was utilized as a measurement criterion in this section.
 HTS information power (  X  ): This parameter speci fi es the effect of
HTS information on the short-term prediction travel speed of roads. The historical data in fl uence has increased by raising the value of  X  , while, decreasing the value of  X  will reduce the effect of historical data on the path selection procedure.

CTS information power (  X  ): The function of this parameter is very similar to  X  but the difference is that it controls the CTS information impact on the path selection procedure. It is worth noting that this information is gathered by VANTs.

Therefore, there should be a proper trade-off between  X  and (i.e.,  X   X   X   X  1, called weighted mean, Terr, 2004 ). In our simulation environment, the best condition occurs when  X   X  0.4 and  X  for AVCAS evaluation. Fig. 7 illustrates the average travel time of the found paths by AVCAS as a function of the HTS and the CTS information power, considering other parameters as follows:  X  0.5,  X   X  0.5, N a  X  15, n  X  3,  X   X  5 TIs (50 s). The average travel time converges towards two different values at the beginning ( from 0 to 0.2) and at the end (  X  from 0.8 to 1) of this diagram. This is because, at the beginning, path fi nding is more based on HTS information (0.8 r  X  r 1) whereas at the end, it is more based on
CTS information (0 : 8 r  X  r 1). Our obtained results, assigning higher value to  X  compared to  X  (i.e.  X   X  0.6,  X   X  0.4), can be supported by the following reasons: (1) considering non-recurring congestion condition (i.e. accident, working zones, and weather conditions) in vehicle routing is one of our main concerns.
Based on the results obtained by Rakha and Van Aerde (1995) , the traf fi c conditions vary considerably from one day to the next day in non-recurring congestion condition. Consequently, the histor-ical data will be insuf fi cient for commuters to fi nd the optimum routes through the network, and the provision of current traf information could provide major bene fi ts, and (2) moreover, theoretically and based on the obtained results by Karbassi and
Barth (2003) , the prediction gets more and more close to the true value with increasing the number of real-time observations. of a link to being selected based on its pheromone value and also the impact of the gathered data by PANTs. The data in fl uence and the exploitative nature of PANTs are increased by increasing the value of  X  . Decreasing the value of  X  will increase the PANTs' exploration and decrease the effect of pheromone value on the path selection procedure.
 is very similar to  X  but the difference is that it controls the real-time information impact on the path selection procedure. This information is gathered by VANTs.
 and  X  (i.e.,  X   X   X   X  1). The best condition occurs when  X   X   X  0.6 in our simulation environment for AVCAS evaluation. Fig. 8 illustrates the average travel time of the found paths by AVCAS as a function of the pheromone and real-time information. The average travel time converges towards two different values: 160 s and 185 s at the beginning (  X  from 0 to 0.2) and at the end ( 0.8 to (1) of this diagram, respectively. This is because, at the beginning, path fi nding is based more on vehicles real-time information (0 : 8 r  X  r 1) whereas at the end, it is based more on pheromone trial information (0 : 8 r  X  r 1).

Pheromone evaporation rate (  X  ): Based on Di Caro (2004) , this parameter plays an important role when there are multiple paths for selection and the characteristics of the environment change rapidly and dynamically. The described status is very similar to the vehicular environment which is the main focus of this paper. Since has a direct effect on having the proper trade-off between exploration and exploitation as well as the convergence speed of the algorithm, different values are examined for fi nding the best value of this parameter through the simulation and its result is demonstrated in Fig. 9 . At low values of  X  , the convergence speed is high because of the slow changes in the pheromone value of the links, while the algorithm does not converge at higher values of because of the quick changes of pheromone trails on the links. The lowest average travel time happened when  X   X  0.3.

Number of alternative paths ( n ): It is worth noting that although a large number of alternative paths for each OD pair allow better vehicle congestion avoidance and balancing, this leads to higher computational complexity. Moreover, since distance is one of the main metrics in AVCAS, a large number of alternative paths which leads to computational overhead and long paths are not necessary. Selecting the proper value for this parameter can lead to decreasing both the average travel time and the computational cost. Since system response time is very critic al criteria in a vehicular environ-ments because of rapid changes, n  X  3 was selected for AVCAS based on the results in Fig. 10 .

It means that AVCAS fi nds up to 3 alternative paths for each OD pairs in each segment. These three alternative paths are ordered based on the obtained probability value by Eq. (7) which encom-passes various criteria (e.g. distance, capacity, density, travel time and speed) for each same OD pair. Consequently, the path with highest probability value has higher priority and a chance of being suggested to vehicles. For each OD pair, a First Come First Serve (FCFS) strategy is used in order to route the vehicles through these three alternative paths. The fi rst 50% of routing requests are routed via the fi rst path, i.e. the least congested shortest path. The next 30% of routing requests are routed through the second path which is longer than the fi rst path but is still less congested. The last 20% of routing requests are routed via the last path (3rd path). This routing cycle is continued for the coming routing requests. If AVCAS fi nds at most 2 alternative paths between speci fi it routes 70% of vehicles through the fi rst path and the other 30% is routed via the second path. However, all the vehicles are routed via the same path if there is only one path between speci pair. This last case is usually occurred when the vehicles are close to their destination. All of the above-mentioned percentages are obtained via Eqs. (13) and (14) .

Number of ants ( N a ) and re-generation period (  X  ): In AVCAS, the new path fi nding process is started periodically by regenerating a prede fi ned number of new FANTs at prede fi ned TIs. In general, a lower value for  X  and a higher value for N a lead to better average travel time and algorithm convergence speed, respectively. As a result, the computational cost and communication overhead of the system have increased. Fig. 11 illustrates the average travel time for different values of  X  .

Considering the trade-off between the average travel time on one side and the communication overhead and computational cost on the other, 30 s or 3 TIs is selected as the regeneration period of FANTs in AVCAS. Moreover, the number of ants is chosen as a function of the number of destination nodes ( n 1) in the segment and alternative paths (the number of nodes (source) in the segment alternative paths). In our scenario, 15 ants (i.e. 3 (alternative paths) 5 (destination nodes in the segment)) are put at each of the start point (source). The con fi guration para-meters of AVCAS in NS-2 are summarized in Table 4 . 5.3. Simulation results for AVCAS evaluation
After investigating the effects of different values on the AVCAS parameters and fi nding their proper values, the ef fi ciency of
AVCAS was evaluated by comparing with Dijkstra (1959) , pure ant colony optimization (PACO) ( Fan et al., 2004 ) and HRS ( Tatomir and Rothkrantz, 2006 ) systems. The Dijkstra algorithm was selected because it is a very popular algorithm and is used in most of the CNSs for fi nding the shortest paths. The ACO algorithm was utilized in the AVCAS mechanism and PACO was chosen to verify and validate our proposed changes and modi fi cations. The comparison between PACO and AVCAS is summarized in Table 5 .
Finally, the HRS algorithm was compared with AVCAS because of their similarities in the use of segmentation and an ant-based algorithm for path fi nding and vehicle congestion reduction. These four mechanisms were compared, based on the average travel time, speed and distance by considering various vehicle densities ranging from 100 to 1000 vehicles. These three metrics were selected due to their predominant role in vehicular environments.
Average travel time : This metric was calculated and the results are illustrated in Fig. 12 for each of the mentioned mechanisms (i.e. Dijkstra, PACO, HRS and AVCAS). The obtained results, which are con fi rmed by Daganzo (1994) , show that a vehicle's average travel time has a direct relationship with vehicle density: as the number of vehicles increases, the average travel time increases.
However, this increment was too sharp in the Dijkstra system versus other systems. This is because by using the Dijkstra system; all of the vehicles with the same OD were guided through the same path without paying attention to other factors such as vehicle congestion and accidents. In comparison, ant-based sys-tems (i.e. PACO, HRS and AVCAS) improved the average travel time signi fi cantly. The average travel time at low vehicle densities (from 100 to 400) was almost the same for all systems, while this metric varied between each system at higher densities (from 500 to 1000). AVCAS had the best results in different vehicle densities and it decreased travel time up to 19%, 11% and 6% compared with
Dijkstra, PACO and HRS, respectively. AVCAS improves the average travel time since it avoids congestion instead of recovering from it, which is not considered in PACO and HRS. Moreover, in PACO and
HRS, if many vehicles have the same OD pair at the same time, congestion can be transferred from one road to another. This problem is solved in AVCAS since it balances the traf fi c up to three alternative paths ( n ).

Average travel speed : The relationship between the average travel speed and CO 2 emissions (and therefore, fuel consumption) was investigated by Barth and Boriboonsomsin (2009) and they discovered that there is a U-shape relationship between these metrics. This means that at a very low average travel speed, which normally occurs during vehicle congestion, and with a high number of stop-and-go driving events and extended engine idling on the road, the fuel consumption as well as CO 2 emissions increased by an average of 30% ( Barth and Boriboonsomsin, 2009; Spalding, 2008 ). Conversely, at very high speeds, the vehicle's engine requires more power which leads to higher fuel consumption and more CO 2 emissions. Moderate average travel speeds ranging from 40 to 60 mph ( C 17.9  X  26.8 m/s) leads to the lowest fuel consumption and CO 2 emissions. The average travel speed of Dijkstra, PACO, HRS and AVCAS at various vehicle densities is illustrated in Fig. 13 . AVCAS obtained the best average speed rate at all vehicle densities by avoiding congestion and providing alternative paths before congestion occurred. By increasing the vehicle density, the average speed decreased smoothly from 25 to 17.7 m/s in AVCAS and this speed range is the reported range for low fuel consumption and CO 2 omissions as in Barth and Boriboonsomsin (2009) . The worst average travel speed and average travel time were generated by the Dijkstra algorithm and ranged from 25 to 10.5 m/s. The results for low vehicle densities (e.g. 100, 200 vehicles) were the same for all systems since the congestion level is low and all systems route the vehicles via the same path which is the shortest path. illustrated in Fig. 14 for Dijkstra, PACO, HRS and AVCAS. The worst average travel was associated with AVCAS and this is related to having a better average travel speed and time compared with the other systems. AVCAS improves congestion by proposing slightly longer paths with less congestion instead of the shortest paths with congestion. This leads to an increase in the travel distance but a decrease in the travel time and speed. It is worth noting that the average travel distance had increased at most 15% compared to the shortest path which was proposed by Dijkstra. Since AVCAS utilizes three alternative paths for avoiding and reducing vehicle congestion, its average travel distance is higher than PACO and
HRS which propose one alternative path and may transfer the congestion from one point to another point. Moreover, the average travel distance is constant and not dependent on vehicle density, congestion or accidents and therefore is less suitable for vehicle congestion and avoidance systems.
 every driver will follow the routing systems guidance. Therefore, in addition to the average travel time, speed and distance, the usage rate (i.e. the proportion of drivers who use a speci guidance system and accept its guidance) was also investigated in this paper. Fig. 15 presents the effect of various usage rates of
Dijkstra, PACO, HRS and AVCAS on an average travel time. The results indicate that the average travel time can be enhanced almost at the same rate using all of the mentioned systems under low usage rate (from 10% to 40%). The lowest average travel time for Dijkstra, PACO and HRS was achieved when half of the drivers used these systems. If the usage rate of these systems exceeds 50% of the drivers, it has a negative impact on the average travel time.
This is because, most of the vehicles are routed to the same route thus congestion is increased. However, periodic re-routing and considering link (road) travel time reduce this negative impact on
PACO and HRS, respectively. AVCAS had the best result in this case and improved the average travel time even at higher usage rates (from 50% to 80%), however its performance degraded slightly for very high usage rates (from 90% to 100%) due to the higher than necessary re-routing for congestion avoidance.
 the behavior of AVCAS when an accident takes place compared with the other three systems. We split the vehicles into four categories based on their chosen routing system, i.e. Dijkstra,
PACO, HRS and AVCAS. We generated 100 vehicles for each category and dedicated 25 vehicles of each category to four starting points (i.e. arrows in Fig. 4 ) in our simulation environ-ment. The total simulation period was 1000 s. An accident was generated at one of the main roads, which is depicted via a cross sign in Fig. 4 , after 300 s. This accident was omitted from the road at the 700th second of simulation. Vehicles may be forced to stop or halt on the lane for a de fi ned time span by using the stop element in SUMO and this works similar to real accidents on the roads ( Hrizi and Filali, 2010 ). The travel time necessary for vehicles to reach their destination was counted for each category to measure the performance of these systems and is illustrated in
Fig. 16 . As it can be seen before the accident happened, all of the vehicles are guided through the shortest path via Dijkstra, PACO and HRS, and through the n alternative least congested shortest paths via AVCAS. However, after the accident and because of the congestion on the link with the accident, PACO and HRS started to reroute the vehicles through another alternative path, while
AVCAS continued vehicles routing through the n alternative least congested shortest paths. This did not happen in Dijkstra due to the lack of attention to the dynamic changes of the vehicular environments. As a result, travel time started to increase sharply for vehicles routed via the Dijkstra system. In addition, travel time started to increase earlier for vehicles routed via HRS and AVCAS due to the use of prediction in these two systems. This increment for HRS was greater than AVCAS since HRS blocks the link with the accident while AVCAS reduces its chosen probability. From 400 to 700 s of simulation, PACO, HRS, AVCAS rerouted the vehicles through the alternative paths and stabilized the travel time value.
At the 700th second when the accident was cleared from the link, the average travel time decreased rapidly for all of the systems and all the graphs smooth out to reach their initial values. AVCAS had the best reaction for congestion since it uses travel time and vehicle density and travel speed prediction for vehicle routing and uses alternative paths from the beginning before congestion happens. 6. Conclusion
This paper addresses vehicle traf fi c congestion, which is one of the major challenges of metropolises. Congestion is affected by the limited capacity of roads and the high number of vehicles on the road. An ant-based algorithm was combined with map segmenta-tion and the average travel speed prediction of roads in order to derive an improved congestion avoidance system. Segmentation and short-term prediction were used to overcome the dynamicity and quick changes of vehicular environments. Applying an ant-based algorithm to our system required some modi fi cations to the basic and original ACO algorithm. These modi fi cations include map segmentation and layering, new probability function, and new reinforcement and evaporation rules and parameters.
 The NS-2 simulator was utilized to fi nd the best values for
AVCAS parameters (i.e.,  X  ;  X  ;  X  ;  X  and n ). The experimental results show how the performance of AVCAS can be changed by different values for the parameters. Using these modi fi cations makes AVCAS more easily deployable in distributed and dynamic vehicular environments. AVCAS's ef fi ciency was evaluated by comparing it with other algorithms such as Dijkstra, PACO and HRS, taking into consideration the average travel time, speed and distance as the evaluation metrics. The results from SUMO show that AVCAS outperforms the others in the case of the average travel time and speed even at high usage rates (i.e., Z 50 % ).

Further studies might focus on designing a smarter system which considers different types of vehicles such as ambulances, police and fi re trucks in its guidance system. It would also be useful to develop a more cost-effective system that uses vehicle-to-vehicle communications instead of vehicle-to-infrastructure communications, which are used in AVCAS. Besides, other features of computing intelligence such as adaptation, fl exibility and learning will be considered as an extension of AVCAS. Value of time (VOT) represents how much money the user is willing to trade off for time saving. By considering this preference as an input variable for AVCAS, we can contribute to the improvement of model in our future work.
 Acknowledgments This research is supported by UM High Impact Research MoE Grant UM.C /625/1/HIR/MOHE/FCSIT/09 from the Ministry of Education Malaysia.
 References
