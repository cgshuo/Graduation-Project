 The efficient execution of multi-criteria queries has gained increasing interest over the last years. In the present pape r we propose an R-tree based approach for queries addressing textual as well as geographic filter conditions. Whereas mos t previous approaches use an index structure optimised for a single criterion adding special treatment for the other cri te-rion at the leaf nodes or end points of this index structure, our approach uses a deeper integration. In short, R-trees ar e maintained for certain subsets of the whole term set. Fur-thermore, in each of these R-trees bit sets are used within the nodes to indicate whether entries for the terms associ-ated with the single bits can be found in the corresponding sub-tree. Our index structure aims to be both, time and space efficient. The paper investigates the efficiency and applicability of the proposed index structure via practica l experiments based on real-world and synthetic data. Categories and Subject Descriptors: H3.3 Information Storage and Retrieval: Information Search and Retrieval [search process]; H3.4 Information Storage and Retrieval: Systems and Software [Performance Evaluation] General Terms: Algorithms, Performance Keywords: R-Tree, Inverted Index, Geographical IR
Information systems increasingly manage heterogeneous data types. Beside conventional object-relational data al so documents with text and images as well as spatially refer-enced data needs to be handled. Although specialised solu-tions exist for all this data, seamless access to these differ ent types of data is still not obvious and often not sufficiently supported by existing systems. A key challenge is the fast access with search conditions combining textual and spatia l criteria. The major drivers for this domain are probably spatial search engines as the next generation Internet sear ch engines (e.g. [1, 9, 10]). This paper proposes a hybrid index structure addressing this challenge. As a general purpose index structure seems to be still difficult, we assume two constraints motivated by the specific application domain of a search engine for news: (1) We consider only point coor-dinates as geographical positions since news articles usua lly provide the location by the name of a larger town or a city. As a consequence the geographic footprint of a document is stored as one or more point positions. (2) We assume a static set of positions. This constraint is motivated by the use of a given gazetteer for deducing the geographical positions from place names.
Index structures support quick navigation to search re-sults avoiding the checking of every individual entry. A typ -ical index structure is the B-tree (see [2]) which is availab le in every (O)RDBMS. Text databases use an inverted index which is more appropriate in this context. An inverted index manages a set of terms where every term points to all docu-ments containing it. Spatial searches are usually supporte d by specialised index structures such as the R-tree and its variants (see [7, 3]). Although R-trees are probably the bes t indexing method for spatial search at present, it is difficult to ensure fast responses for very large databases in every case (e.g. [11]). For some special cases however this tree can be optimised to meet efficiency requirements (e.g. [6]).
A spatial search engine needs to support search conditions combining textual and spatial search criteria. This means that specific search indexes need to be available for this pur -pose. In general three different options are possible: 1. Independent indexes are built for the spatial and the 2. The index structures for spatial and text search are 3. A search could be supported by a single index structure
Option 2 is described in [13]. The authors compare option 2.1 and 2.2 by applying them to some test data. These first tests seem to indicate that searches can be processed faster for option 2.2. However, no worst case analysis for time and space is provided and no hybrid solution in between 2.1 and 2.2 is considered. A worst case analysis is given in [5]. In option 2.1 the worst case occurs for a large geographical region and a rare term. In this case most or even all nodes of the R-tree need to be searched, without returning any search results. Although this case does not occur for option 2.2 thi s option uses significantly more space than option 2.1 because many terms will occur in a large number of documents. This may result in space requirements which grow significantly faster than linear.

Hybrid index structures provide information in every node on both, its spatial extend and the terms contained in doc-uments below it. In the geospatial case the spatial region is usually provided by upper and lower bounds for longitude and latitude (bounding box). The set of terms available be-low a node may be represented either directly by these terms (e.g. coded by integers) or by bit lists where every position represents the presence or absence of a term.

So far only few papers address concepts combining spatial and textual criteria in one node. [8] proposes the KR*-tree assigning a list of terms to every node. Bit list approaches are proposed by [4] for answering geographic nearest neigh-bour queries including search terms and [12] considering th e problem of retrieving a set of k coordinates with the least spatial extension for k entries with alternative coordinates. For these papers space requirements are not yet sufficiently addressed. It is obvious that the bit list will probably re-quire less space. But even bit lists may become too large for a spatial search engine.

The present paper proposes an approach which excludes terms occurring only in few documents from these lists. Queries containing these rare terms are treated separately from other queries. The few documents for a rare term are searched sequentially. Such a sequential search can be per-formed fast due to the small number of documents.
With the aforementioned ideas in mind we propose an index structure made up of the following three components: 1. On the top level there is a global inverted index. This 2. In addition for the more frequent terms (occurring 3. Finally, for each point position maintained in the leaf
Figure 1 gives an overview of the hybrid index structure which will be explained in more depth in the following. Figure 1: Overview of the proposed hybrid in-dex structure, assuming a value of RLimit = 3 and BLength = 5 ; rare terms for which no tree structure is maintained are shaded grey
Documents are at the beginning only added to the global inverted index. This index provides also information about the frequency of terms (how many documents contain this term). If this frequency exceeds a certain limit ( RLimit ) for a term t i , then the information for term t i is also stored in an extended R-tree. For this purpose the term in the global inverted index additionally points to the corresponding tr ee structure.

One important characteristic of our hybrid index struc-ture is that up to BLength terms (which occur in more than RLimit documents) are maintained in one extended R-tree. Each reference to a node in the extended R-tree is accompa-nied by a bounding box (maximum and minimum latitude and longitude) enclosing all positions associated with doc -uments in that subtree and a bit list of length BLength in which one bit is associated with each term maintained in the extended R-tree. This bit is set to 1 if the term occurs in at least one document in the subtree, and to 0 otherwise.
To start with, the hybrid index structure is initialised as an empty global inverted index. Furthermore, a static tree is created. We use a static R-tree containing all geographi-cal positions from the gazetteer as a blueprint, since R-tre es containing all documents for BLength terms will have to maintain a huge subset of these positions anyway for realis-tic values of BLength . Furthermore, this allows for the effi-cient application of tree packing algorithms. Although thi s blueprint contains already a bit list of the specified length ( BLength ), all positions are unassigned. A first copy of this tree structure becomes the  X  X urrent tree structure X  for the global inverted index.

The insertion of a new document works as follows: For ev-ery contained term the algorithm adds a reference into the global inverted index. A term will also be added to the asso-ciated tree if the number of references exceeds RLimit . This last visit: 8.6.09) is used with approximately 150,000 entr ies, i.e. point positions, after some data cleansing. may require that a reference to the current tree is assigned to the considered term, if RLimit has not been exceeded before the insertion of the new document.

A reorganisation of the extended R-tree is required if the bit list has reached its capacity BLength . In this case the blueprint is used to generate a new R-tree. Afterwards two options exist:
It remains to mention that for each position in an ex-tended R-tree a local inverted index is maintained together with a bit list indicating whether the associated terms occu r in documents associated with that position or not. Conse-quently, lists with document references exist only for term s with a 1 at the associated position of the bit list (cf. figure 1 ).
A search request with a bounding box and a single term is processed as follows:
The algorithm uses the frequency of the search term to decide whether the search is performed by the global in-verted index or by the related tree structure. In the case of a search in the global inverted index (search term occurs in at most RLimit documents) all document descriptions ref-erenced by the term are searched sequentially to identify al l documents meeting the spatial criterion. Otherwise (searc h term occurs in more than RLimit documents) the extended R-tree associated with the search term is traversed using th e bounding rectangles and the bit lists for pruning and finally the encountered local inverted indexes are used to calculat e partial results which are merged subsequently.
 A search with multiple terms (connected with a logical AND) is also well supported by this index structure:
If one of the conjunctive terms is a rare term, then the corresponding documents in the global inverted index are sequentially searched to check the spatial search conditio n and the presence of the other terms. If none of the search terms is a rare term, then every term is assigned to an R-tree. In the optimal case all search terms refer to a single tree and the search can be performed using a bit list as a search pattern. With this approach the search procedure identifies a number of point positions each referencing a set of documents via an inverted index. At this point the in-verted index of a point position is used to identify all resul t sets for every search term. The intersection of these sets provides the documents for a point position containing all search terms.

It may also happen that the search terms reference dif-ferent tree structures. Here it is necessary to generate the result sets for every tree structure separately and compute the intersection of these sets. This computation may be costly if these result sets are large. In this case it could he lp if frequent terms are stored in a single tree and the other trees contain less frequent terms. Then, no intersections would need to be generated between large result sets of very frequent terms, since these terms are maintained in one tree structure.
A theoretical analysis of hybrid index structures is given in [5]. This analysis shows, that these hybrid index struc-tures have both moderate space requirements and accept-able search efficiency. Under certain constraints these inde x structures can even ensure a logarithmic search time com-plexity in the average case.

The proposed concept was evaluated by a prototype sup-porting the generation of the hybrid index as well as the execution of search requests. The generation is controlled by several parameters including the capacity of inner nodes and leaf nodes and the target ratio between width and height of bounding rectangles for tree nodes.

The index structure was tested with synthetic data and real data. Tests with synthetic data facilitate a detailed analysis of strength and weaknesses of such an index struc-ture because the distribution and size of these data sets can be controlled completely.

Figure 2 summarises the result of an experiment with syn-thetic data. This figure shows the search effort relative to a growing number of points (positions in the gazetteer) and documents. This experiment uses a Gaussian distribution for the points which are randomly assigned to documents (5 positions per documents). Every term is randomly as-signed to 1 i documents where i is the position of the term in an ordering of the terms simulating a Zipf distribution. Queries consist of a rectangle and a search term occurring in one out of 500 documents. The experiment starts with 100 points and 1000 documents. Both values are doubled for every step. At the same time the area of the spatial search rectangle is decreased by a factor of 2. This figure seems to confirm that the search effort does not grow faster than logarithmic.
Figure 3 summarises the results of an experiment with real world data. The selected data set consists of geotagged Wikipedia articles from the English Wikipedia. Every ar-periment about 100,000 English articles were used. The ex-periment was performed for subsets with different sizes. For every size 100 searches were performed. The centre coor-dinates of a search region were randomly generated assum-ing a uniform distribution. The size of the search rectangle was manually adjusted to ensure the same number of results for each subset. Search conditions include a single frequen t term occurring in 16,180 documents (solid line) or a single rare term occurring in 260 documents (dashed line). As ex-pected the search effort for a rare term is significantly below the effort for a frequent term. Also here both lines seem to indicate that the search complexity does not grow faster than logarithmic.

Several other experiments were performed. All of these experiments seem to confirm that the search time does not grow faster than logarithmic for this index structure. This is somehow surprising since the theoretical analysis does n ot strictly require this behaviour in every case. In further ex -periments we plan to identify critical cases for this index structure.
In the present paper we have described a novel hybrid in-dex structure designed for the efficient execution of queries using textual and geographical selection conditions at the same time. The structure maintains classical inverted list s for rare terms X  X ccurring in no more than RLimit docu-ments X  X nd additional extended R-trees for more frequent terms. To keep the overhead small up to BLength terms are mapped to one R-tree. RLimit and BLength are useful design parameters for tuning the index structure. To im-prove the selectivity of the structure bit lists are maintai ned in each node to indicate whether documents containing the corresponding terms can be found in the respective subtree.
Although the present paper describes only a first version of this new hybrid index structure the preliminary experi-mental results are encouraging. Nevertheless, various ope n issues and optimisation opportunities exist. This include s a more detailed investigation of the design parameters RLimit and BLength and its impact in real world scenarios. This also includes the analysis of allocation techniques associ ating terms to extended R-trees considering objectives like load balancing or performance for multi term queries. referenzierung/Wikipedia-World, last visit: 2.6.09 [1] E. Amitay, N. Har X  X l, R. Sivan, and A. Soffer. [2] R. Bayer and C. McCreight. Organization and [3] N. Beckmann, H.-P. Kriegel, R. Schneider, and [4] I. Felipe, V. Hristidis, and N. Rishe. Keyword search [5] R. G  X  obel and A. de la Cruz. Computer science [6] R. G  X  obel. Towards logarithmic search time complexity [7] A. Guttman. R-trees: A dynamic index structure for [8] R. Hariharan, B. Hore, C. Li, and S. Mehrotra. [9] J. T. Heuer and S. Dupke. Towards a spatial search [10] C. B. Jones, A. A. I, D. Finch, G. Fu, and S. Vaid. [11] K. R. Kanth and A. Singh. Optimal dynamic range [12] D. Zhang, Y. Chee, A. Mondal, A. Tung, and [13] Y. Zhou, X. Xie, C. Wang, Y. Gong, and W. Ma.
