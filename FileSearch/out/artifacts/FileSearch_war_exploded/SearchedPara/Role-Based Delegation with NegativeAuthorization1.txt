 Delegation is the process whereby an acti ve entity grants access resource permis-sions to another entity in a distributed environment. Delegation is recognised as vital in a secure distributed computing environment [Abadi et al. 1993; Barka and Sandhu 2000a]. However, a conflicting secure problem may arise when one user grants permission of a role to a dele gated user and another user does reject the permission to the delegated user. T he most common delegation types include user-to-machine, user-to-user, and machine-to-machine delegation. They all have the same consequence, namely the propagation of access permission. Propaga-tion of access rights in decentr alized collaborative system s presents challenges for traditional access mec hanisms because aut horization decisions are made based on the identity of the resource requeste r. Unfortunately, access control based on identity may be ineffective when the requester is unknown to the resource owner [Wang et al. IEEE03]. Recently some distr ibuted access control mechanisms have been proposed: Lampson et al. [1992] present an example on how a person can delegate its authority to others; Blaze et al. [1999] introduced trust manage-ment for decentralized authorization; Abadi et al. [1993] showed an application of express delegation with access control calculus; and Aura [1999] described a delegation mechanism to support access m anagement in a distributed computing environment. All these papers have not analysed the conflicting secure problem.
The National Institute of Standards and Technology developed role-based access control ( RBAC ) prototype [Feinstein, 1995] and published a formal model [Ferraiolo et al. 1992]. RBAC enables managing and enforcing security in large-scale and enterprise-wide systems. Many enhancements of RBAC models have been developed in the past decade. In RBAC models, permissions are associated with roles, users are assigned to appropriate roles, and users acquire permissions through roles. Users can be easily reassigned from one role to another. Roles can be granted new permissions and perm issions can be easily revoked from roles as needed. Therefore, RBAC provides a means for empowering individual users through role-based delegation in distributed collaboration environments. However, there is little work on delegation with RBAC .

This paper analyses role-based delegation model based on RBAC and pro-vides a solution for the conflicting problem adopting negative authorization. The remainder of this paper is organized as follows: Section 2 presents the related work associated to delegation model and RBAC . As the results of this section, we find that both of group-based delegation with RBAC and negative authorization for delegation model has never analysed in the literature. S ection 3 proposes a delegation framework which includes group-based delegation. Granting autho-rization with pre-requisite conditions and revocation authorization are discussed. Section 4 provides an approach for the conflicting problem by adopting negative authorization and briefly discusses how to use negative authorization in delega-tion framework. Section 5 concludes the paper and outlines our future work. The concept of delegation is not new in authorizations [Aura 1999; Barka and Sandhu 2000a; Wang et al. IEEE03; Wang et al. ACSC05], role-based delega-tion received attention only recently [Barka and Sandhu 2000a, 2000b; Zhang et al. 2001, 2002]. Aura [1999] introduced key-oriented discretionary access control systems that are based on delegation of access rights with public-key certificates. A certificate denotes a signed message that includes both the signature and the original message. With the certificate, the issuer delegates the rights R to some-one. The systems emphasized decentraliz ation of authority and operations but their approach is a form of discretionar y access control. Hence, they can nei-ther express mandatory policies like Bell-LaPadula model [1976], nor possible to verify that someone does not have a certificate. Furthermore, some important policies such as separation of duty policies cannot be expressed with only certifi-cates. They need some additional mechanism to maintain the previously granted rights and the histories must be updated in real time when new certificates are issued. Delegation is also applied in decen tralized trust management [Blaze et al. 1999; Li et al. 2000]. Blaze et al [1999] identified the trust management problem as a distinct and important component of security in network services and Li et al [2000] made a logic-based knowledge representation for authorization with tractable trust-management in large-scale, open, distributed systems. Delega-tion was used to address the trust management problem including formulating security policies and security credential s, determining whether particular sets of credentials satisfy the relevant polic ies, and deferring trust to third parties. Other researchers have investigated machine to machine and human to machine delegations [Wang et al. WISE01; Abadi et al. 1993]. For example, Wang et al [WISE01] proposed a secure, scalable ano nymity payment protocol for Internet purchases through an agent which provided a higher anonymous certificate and improved the security of consumers. The agent certified re-encrypted data after verifying the validity of the content from consumers. The agent is a human to machine delegation which can provide ne w certificates. However, many impor-tant role-based concepts, for example, ro le hierarchies, constraints, revocation were not mentioned.

Zhang et al [2001, 2002] proposed a rule-based framework for role-based dele-gation including RDM2000 model. RDM2000 model is based on RBDM0 model which is a simple delegation model supporting only flat roles and single step delegation. Furthermore, as a delegation model, it does not support group-based delegation.

This paper focuses exclusively on a ro le-based delegation model which sup-ports group-based delegation and provides a solution of the conflicting problem with negative authorization in the role-based delegation model. We will extend our previous work and propose a delegation framework including delegation granting and revocation models, group-based delegation. To provide sufficient functions with the framework, this project will analyse how does original role assignment changes impact delegation results. This kind of group-based dele-gation and negative authorization within delegation framework have not been studied before. In this section we propose a role -base d delegation model called RBDM which supports role hierarchy and group delegation by introducing the delegation re-lation. 3.1 Basic Elements and Components RBAC involves individual users being associated with roles as well as roles being associated with permissions (Each permission is a pair of objects and operations). As such, a role is used to associate users and permissions. A user in this model is a human being. A role is a job function or job title within the organization asso-ciated with authority and responsibility. As shown in Figure 1, the relationships between users and roles, and between role s and permissions are many-to-many.
Many organizations prefer to centrally control and maintain access rights, not so much at the system administrator X  X  personal discretion but more in ac-cordance with the organization X  X  protection guidelines [David et al. 1993]. RBAC is being considered as part of the emerging SQL3 standard for database man-agement systems, based on their implementation in Oracle 7 [Sandhu 1997]. Many RBAC practical applications have been implemented [Barkley et al. 1999, Sandhu 1998].

A session is a mapping between a user and possibly many roles. For example, a user may establish a session by activating some subset of assigned roles. A session is always associated with a single user a nd each user may establish zero or more sessions. There may be hierarchies within roles. Senior roles are shown at the top of the hierarchies. Senior roles inherit permissions from junior roles. Let x&gt;y denote x is senior to y with obvious extension to x  X  y . Role hierarchies provide a powerful and convenient means to enforce the principle of least privilege since only required permissions to perform a task are assigned to the role.
Although the concept of a user can be extended to include intelligent au-tonomous agents, machines, even networks, we limit a user to a human being in our model for simplicity.

Figure 2 shows the role hierarchy structure of RBAC in an example of a problem-oriented system POS which has two projects.
 The following Table 1 expresses an example of user-role assignment in POS . There are two sets of users associated with role r: Original users are those users who are assigned to the role r; Delegated users are those users who are delegated to the role r.

The same user can be an original user of one role and a delegated user of another role. Also it is possible for a user to be both an original user and a delegated user of the same role. For example, if Christine delegates her role HO1 to Richard, then Richard is both an original user (explicitly) and a delegated user (implicitly) of role Co1 because the role HO1 is senior to the role Co1. The original user assignment (UAO) is a many-to-many user assignment relation between original users and roles. The d elegated user assignment (UAD) is a many-to-many user assignment relation between delegated users and roles. We have the following components for RBDM model:
U, R, P and S are sets of users, roles, permissi ons, and sessions, respectively. 1. UAO  X  U  X  R is a many-to-many original user to role assignment relation. 2. UAD  X  U  X  R is a many-to-many delegated user to role assignment relation. 3. UA = UAO  X  UAD. 4. Users: R  X  2 U is a function mapping each role to a set of users. Users ( r )= 5. Users ( r )= Users O ( r )  X  Users D ( r ) 3.2 Role-Based Delegation The scope of our model is to address user-to -user delegation supporting role hier-archies and group delegations. We consider only the regular role delegation in this paper, even though it is possible and desirable to delegate an administrative role.
A delegation relation (DELR) is exist ed in the role-based delegation model which includes three elements: origina l user assignments UAO, delegated user assignment UAD, and constraints. The motivation behind this relation is to address the relationships among different components involved in a delegation. In a user-to-user delegation, there are five components: a delegating user, a delegating role, a delegated user, a dele gated role, and associated constraints. For example, ((Tony, DIR), (Christine, DIR), Friday) means Tony acting in role DIR delegates role DIR to Christine on Friday. We assume each delegation is associated with zero or more constraints. The delegation relation supports partial delegation in a role hierarchies: a user who is authorized to delegate a role r can also delegate a role r that is junior to r . For example, ((Tony, DIR), (Ahn, Re1), Friday) means Tony acting in role DIR delegates a junior role Re1 to Ahn on Friday. A delegation relation is one-to-many relationship on user assignments. It consists of original user delegation (ORID) and delegated user delegation (DELD). Figure 3 illustrates components and their relations in a role-based delegation model.

From the above discussions, the following components are formalized: 1. DELR  X  UA  X  UA  X  Cons is one-to-many delegation relation. A delegation 2. ORID  X  UAO  X  UAD  X  Cons is an original user delegation relation. 3. DELD  X  UAD  X  UAD  X  Cons is a delegated user delegation relation. 4. DELR = ORID  X  DELD
In some cases, we may need to define whether or not a user can delegate a role to a group and for how many times, or up to the maximum delegation depth. We only analyze one-step group delegation in this paper which means the maximum delegation path is 1. The new relation of group delegation is defined as delegation group relation (DELGR) which includes: original user assignments UAO, delegated user assignments UAD, delegated group assignments GAD, and constraints. In a user-group delegation, there are five components: a delegating user (or a delegated user), a delegatin g role, a delegated group, a delegated role, and associated constrains. For ex ample, ((Tony, DIR), (Project 1, DIR), 1:00pm X 3:00pm Monday) means Tony acting in role DIR delegates role DIR to All people involved in Project 1 during 1:00pm X 3:00pm on Monday. A group delegation relation is one-to-many relationship on user assignments. It consists of original user group delegation (ORIGD) and delegated user group delegation (DELGD). Figure 4 illustrates components and their relations in role-based delegation model.

We provide elements and functions in group delegation: 1. G is a set of users. 2. DELGR  X  UA  X  GA  X  Cons is one-to-many delegation relation. A delegation 3. ORIGD  X  UAO  X  GAD  X  Cons is a relation of an original user and a group. 4. DELGD  X  UAD  X  GAD  X  Cons is a relation of a delegated user and a 5. DELGR = ORIGD  X  DELGD This section analyses delegation authorization and provides an approach for the conflicting secure problem wit h negative authorization. 4.1 Authorization Models The delegation authorization goal imposes restrictions on which role can be delegated to whom. We partially adopt the notion of prerequisite condition from Wang et al. [ADC03] to introduce delegation authorization in the delegation framework.

A prerequisite condition CR is an expression using Boolean operators  X  and  X  on terms r and  X  r where r is a role and  X  means  X  X nd X ,  X  means  X  X r X , for example, CR = r 1  X  r 2  X  r 3 .
 The following relation authorizes user-to-user delegation in this framework: where R, CR, N are sets of roles, prerequisite conditions, and maximum dele-gation depth, respectively. For group-ba sed delegation mentioned last section, N =1.Themeaningof( r, cr, n )  X  Can delegate is that a user who is a member of role r (or a role senior to r ) can delegate role r (or a role junior to r )toany user whose current entitlements in roles satisfy the prerequisite condition CR without exceeding the maximum delegation depth n .

There are related subtleties that arise in RBDM concerning the interaction between delegating and revocation of user -user delegation membership and the role hierarchy.
 Definition 1. A user-user delegation revocation is a relation Can  X  revoke  X  R  X  2 R ,where R is a set of roles.

The meaning of Can-revoke ( x, Y )isthatamemberofrole x (oramemberof an role that is senior to x ) can revoke delegation relationship of a user from any role y  X  Y ,where Y defines the range of revocation . Table 2 gives the Can-revoke relation in Figure 2.

There are two kinds of revocations [Wang et al. ADC03]. The first one is weak revocation; the second one is strong revocation.
 Definition 2. Auser U is an explicit member of a role x if ( U, x )  X  UA ,and that U is an implicit member of role x if for some x &gt;x, ( U, x )  X  UA .
Weak revocation only revokes explicit membership from a user and do not re-voke implicit membership. On the other hand, strong revocation requires revocation of both explicit and implicit membership. Strong revocation of U s membership in x requires that U be removed not only from explicit membership in x , but also from explicit (implicit) membership in all roles senior to x .Strong revocation therefore has a cascading eff ect up-wards in the role hierarchy. For ex-ample, suppose there are two delegations (( Tony,DIR ) , ( Ahn, AP ) ,Friday )and (( John, Re 1) , ( Ahn, AP ) ,Friday ) and Tony wants to remove the membership of AP from Ahn on Friday. With weak revocation, the first delegation relationship is removed, but the second delegation has not yet removed. It means that Ahn is still a member of AP . With strong revocation two delegation relationships are removed and hence Ahn is not a member of AP . 4.2 An Approach for the Conflicting Problem In the real world of access control, the re are two well-known decision policies [Bertino et al. 1997]: a. Closed policy: This policy allows access if there exists a corresponding positive authorization and denies it otherwise. b. Open policy: This policy denies access if there exists a corresponding neg-ative authorization and allows it otherwise.
 It is quite popular to apply closed policy in centralize management system. However, in uncentralized environmen t, the closed policy approach has a major problem in that the lack of a given authorization for a given user does not pre-vent this user from receiving this authorization later on. Bertino et al. [1997] proposed an explicit negative authorization as blocking authorizations. When-ever a user receives a negative authorizati on, his positive authorizations become blocked. Negative authorization is typi cally discussed in the context of access control systems that adopt open policy. The introduction of negative autho-rization brings with it the possibility of conflict in authorization, an issue that needs to be resolved in order for the access control model to give a conclusive result. The types of conflicts brought about by the negative authorization are beyond this paper. Negative authorization is rarely mentioned in RBAC litera-ture, mainly because RBAC Models such as RBAC96 and the proposed NIST standard model are based on positive permissions that confer the ability to do something on holders of the permissions.
 As we previously discussed a delegation relation (( u 1 ,r 1) , ( u ,r ) ,Cons 1)  X  DELR , which means the delegating user u 1withrole r 1 delegated role r to user u who satisfies the constraint Cons 1. What will happen if there is another delegation (( u 2 ,r 2) , ( u ,  X  r ) ,Cons 2)  X  DELR which means the delegating user u 2withrole r 2 rejected to delegate role r to user u who satisfies the constraint Cons 2. We analyse the solution of this conflicting problem with role hierarchy. We may use one of the following policies: 1. Denial takes precedence (DTP): Negativ e authorizations a re always adopted 2. Permission takes precedence (PTP): Positive authorizations are always
These two policies are too simple for enterprise collaborations since it is not an efficient solution. In enterprise environm ent, role hierarchy is a very important feature since a senior role has all permissions of its junior roles. It means a senior role is more powerful than a junior role. Therefore, some differences with negative authorization between a senior role and its junior role are necessary. A practical solution for the above conflicting problem is: 1. Role r can delegate to user u if r 1isseniorto r 2, 2. Role r cannot delegate to user u if r 1 is junior to r 2.

For the security reason, we suggest using DTP policy for two roles without hierarchy relationship when a conflicting problem happens. We summarize the above discussion for the conflicting problem. 1. Role r can delegate to user u if r 1isseniorto r 2, 2. Role r cannot delegate to user u if either r 1 is junior to r 2orthereisno This paper has discussed role-based delegation model and negative authorization for a solution of conflicting secure problems which may easy arise in distributed environment. We have analysed not only delegating framework including dele-gating authorization and revocation with constraints, but also group-based del-egation. To provide a practical solution for the conflicting problem, we have analysed role hierarchies, the relationship of senior and junior role, and positive and negative authorizations. The work in this paper has significantly extended previous work in several aspects, for example, the group-based delegation and negative authorizations. It also begins a new direction of negative authorizations.
The future work includes develop algorithms based on the framework and solution proposed in this paper and the delegating revocation model including constraints.

