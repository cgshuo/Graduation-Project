 Knowledge management approaches for weakly-structured, ad-hoc knowledge work processes need to be lightweight, i.e., they cannot rely on high upfront modelin g efforts. This paper presents TaskNavigator, a novel prototype to support weakly-structured processes by integrating a standard task list application with a state-of-the-art document classification system. The resulting system allows for a task-oriented view on office workers' personal knowledge spaces in order to realize a proactive and context-sensitive information support during daily, knowledge-intensive tasks. Moreover, TaskNavigator supports process know-how reuse by proactively suggesti ng similar tasks or rele vant process models, based on textual similarities. Finally, we report on a feasibility test and a case study that have been c onducted in order to evaluate the system in the context of daily research task management and software requirements analysis. H.3.3 [Information Search and Re trieval] H.4.1 [Office Automa-tion]: Groupware; Workflow management, H.5.3 [Group and Organization Interface]: Computer-supported cooperative work; Web-based interaction, H.2.4 [S ystems]: Distributed databases. Management, Performan ce, Human Factors Agile workflows, Process-orie nted knowledge management, pro-active information delivery The recent emergence and popularit y of new desktop search en-gines such as Google Desktop Search 1 , x-friend 2 , MSN Desktop manage their personal knowledge space (PKS). Typically, the documents needed by a knowledge worker for the task at hand are spread over various places such as e-mail folders, file system folders, or paper stacks on the desk. While the concept of a desktop-wide search certainly relieves the user from the bur-den of querying several differen t information sources (e-mail, local and network drives, etc.), cu rrent desktop search engines still follow the standard, passive query/retrieve model: the user has to explicitly 'pull' for information that might be relevant for a task he is currently trying to accomplish. Besides being inefficient, em-pirical studies have shown that su ch pull approaches typically lead to suboptimal reuse rates of avai lable documents [11]. To address this issue, several business proc ess-oriented knowledge manage-ment approaches have been deve loped for proactively providing process participants with information that is relevant with regard to their current tasks [2]. However, as most of these approaches rely on static workflow/process specifications, they are typically inadequate for weakly-structured processes such as knowledge-intensive office work processes. Currently, state-of-the-art work flow and document management systems offer valuable support only for routine activities in office work. Despite this support, it has been claimed that knowledge-intensive office work has not reached satisfying increases in pro-ductivity in recent years (cf. [15]). The reason for this perceived lack of productivity increase in such office work is seen in the insufficient understanding of the nature of knowledge-intensive work and the lack of adequate integration of information support and work activities. From our experience, knowledge work con-highly interleaved. Whereas recent project support systems aim at uniformly supporting users in both kinds of processes [14], an integrated approach for informat ion support in the form of proac-tive information delivery still seems to be missing. In this paper, we present TaskNavigator, a novel workflow man-agement system capable of suppor ting agile workflows. The sys-tem aims at improving productivity of users and user groups dur-ing knowledge-intensive work, by enhancing process information reuse individually and among the group members. http://desktop.google.com/ http://www.x-friend.de/ http://toolbar.msn.com/ This paper is organized as follows : in Section 2, we provide an overview on the approach for lightweight process-oriented knowl-edge management that underlies the TaskNavigator prototype. Sections 3 and 4 describe TaskNavi gator X  X  functionalities in detail and illustrate the usage of the system with the help of an example scenario. Evaluation results are presented in Section 5, followed by a discussion of related work (Section 6) and a conclusion (Sec-tion 7). Our work aims at developing a light-weight approach for business process-oriented knowledge mana gement (BPOKM) that can be applied for flexible knowledge wo rk processes such as R&amp;D or consulting processes. Since such processes cannot be defined and modeled sufficiently in advance to allow for workflow-like en-actment support, standard appro aches to BPOKM (see e.g. [3]) that are based on formal process models and formally specified information needs cannot be applied. Moreover, companies are often not willing to make high upfront investments into process and knowledge modeling activities when it is unclear if and when these investments are going to pay off. Therefore, we propose the following bottom-up approach, called PERL cycle, for introducing BPOKM into a company in order to support knowledge workers in thei r daily activities, without re-quiring upfront process-or ontology-modeling. Figure 1 depicts the PERL cycle graphically: the approach is based upon an inte-application) and proactive (i.e. push-like) information delivery. The cycle builds upon the following two assumptions: 1. Knowledge workers are willing to use a task list application 2. Information that is relevant for the knowledge workers X  Consequently, Figure 1 depicts a (logical) central repository where the knowledge workers X  ta sks and documents are stored within the company. Four phas es, called  X  X ropose X ,  X  X nrich X ,  X  X efine X , and  X  X earn X  are grouped around this repository, and need to be supported by an appropriate tool environment. Propose: For a newly created (or newly selected) task, the system should proactively provide the knowledge worker with both avail-able documents and process know-how that might be relevant in order to successfully complete the task. Enrich: In order to receive more relevant document suggestions, the system should support the knowledge worker in easily enrich-ing a task X  X  description informally , e.g. by associ ating documents created or handled in the context of the task. Reuse: The system should support the knowledge worker in reus-ing process know-how by both proactively suggesting similar former tasks (together with their decomposition into subtasks) from the repository and process guidelines, either textual or for-mal process definitions (if availabl e) for the current task. Reuse of similar tasks should be supported by enabling the knowledge worker to create corresponding copies of the subtasks of similar tasks; reuse of process models should be supported by enabling the knowledge worker to instantiate subtasks according to the decomposition specified in the pr ocess model. In both cases, new (sub-) tasks are being created, for which the cycle will start again with phase  X  X ropose X . Learn: The system should continuously learn by storing the ac-tual decomposition of each task into subtasks, store new docu-ments (e.g. emails, downloaded pape rs, work results etc) in the repository, support generalization of tasks into formal process models, learn how to categoriz e tasks to corresponding process models, and improve its proact ive document suggestions over time. In order to analyze the feasibility of such an approach, we devel-oped a prototype, called TaskNavi gator, implementing most parts of the PERL cycle. In the follo wing, we will desc ribe TaskNavi-gator X  X  functionalities in more detail. In accordance to the PERL approach, TaskNavigator provides tool support for:  X  Agile task management  X  Proactive information delivery  X  Process know-how reuse We will present these functionalities in the following sections in more detail. TaskNavigator provides users with the standard functionalities of common task management tool s known from MS Outlook. Users can create and edit tasks, specifying a task X  X  due date, priority, current state, etc. In addition, TaskNavigator allows users to main-tain task-specific, hi erarchical bookmark lists by attaching docu-ments or URLs to a task and organizing them in (task-specific) folder structures. Moreover, users can define simple ad hoc workflows by specify-ing predecessor relationships task s, expressing that a task should remain in state  X  X aiting X  until its predecessors are in state  X  X om-pleted X . However, unlike rigid workflow management systems, the order of working with tasks in TaskNavigator is not strictly predefined. Task states have a recommending character, and users may start working on waiting tasks before preceding tasks are completed. Tasks in TaskNavigator can be de legated to other users of the system (including subtasks an d attached bookmarks). Automatic email notifications are sent to delegates, and the delegated tasks are added to their task lists. TaskNavigator allows delegatees to either accept or reject a delegated task; in either case, the delega-tor is informed via email and can track the task X  X  current state on his list of delegated tasks. In order to help users organizing their tasks, TaskNavigator allows decomposing a task into subtasks, resulting in hierarchical work breakdown structures. Figure 2 de picts an example screenshot from TaskNavigator: the left-hand frame shows an expanded task/subtask hierarchy, while the right-hand side shows details for the currently selected task  X  X repare Visit of CEO of Company A X . In order to build a TaskNavigator document repository that con-tains relevant information, we start with the contents of the com-pany X  X  shared network drives and users X  local file systems. In order to exploit the users X  native structures, their desktops as well as the structures from the company X  X  shared network drives, we make use of BrainFiler [4], a commercial system which realizes a personalized document management environment, allowing multi-criterial classification of document s, search functionalities such as Boolean search and document similarity evaluation, as well as incorporation of remote (peer-to-peer) BrainFiler instances. BrainFiler enables a user to build a personal information model by allowing to import (and synchronize) native structures such as e-mail folders, bookmarks, and file directories together with con-tained e-mails respectively documents (see Figure 3). The im-ported structures are shown as trees (usually interpreted as is-a hierarchies) and can be arranged in different views. The meaning of the nodes (interpreted as concepts) is determined statistically by a document term-similarity vect or on the basis of the assigned documents A user is now able to elaborate the personal information model by creating new or rearranging existi ng structures, building relations between concepts (a concept can have multiple parents), and as-signing documents to several concepts (i.e., annotating/tagging a document with concepts). These structures then can be used for a conceptual search (e.g., all documents annotated with concepts X and Y ) as well as a combi-nation with the keyword-based sear ch (e.g., all documents anno-tated with concept X and containing term T ). With BrainFiler, the knowledge worker has a personal desktop search spanning nearly all information sources, allowing multi-criterial classification and diff erent views on his personal docu-ment collections as well as on those of his workgroups. The created BrainFiler indexes for personal and company-wide documents provide the basis for task-specific, proactive informa-tion delivery. In addition to task-centered info rmation structuri ng, TaskNaviga-tor realizes task-oriented proactiv e information delivery (PID), i.e. the system automatically retrieves potentially relevant documents from various different informat ion sources and suggests these documents to the user (see e.g. Figure 2, pane  X  X uggested Docu-ments X ). For each suggested docu ment, a short excerpt is shown in form of the most relevant terms extracted by BrainFiler below its hyperlink which allows direct access to the document. For document retrieval, TaskNavigator transparently triggers a query to BrainFiler (see Figure 4). The que ry for a task is determined by the task X  X  name, the task X  X  description, and the attached book-marked documents. Technically, this is realized by creating a (virtual) concept (see Section 3.2) within BrainFiler for each task, that contains the task X  X  name and description as files, as well as all bookmarked documents. Using Brai nFiler X  X  document classifica-tion suggestion functiona lities, all documents that BrainFiler sug-gests to be classified under th e task-specific concept node (and exceeding a user-defined relevance threshold value) are listed by TaskNavigator as suggested documents for that task. TaskNavigator also uses the PI D component to proactively sug-gest process know-how in the form of similar tasks or available process types (see Section 3.4). Figure 5 shows the task detail frame with the expanded Suggested Documents section. Users can m odify the query manually by edit-ing keywords or selecting concep ts, and can also provide positive or negative relevance feedback on selected documents by pushing  X + X  or  X - X  button respectively. As a consequence, TaskNavigator will update the list of suggeste d documents, taking into account the relevance feedback. If a user considers a suggested document relevant for the current task, he/she has two alternatives to associ-ate the task with the document:  X  Making the user X  X  own copy of the document  X  Making a link to the document User and system interaction related to the proactive information delivery is logged by the system in order to evaluate the effective-ness of the PID (see Section 5). Nowadays, the success of any enterprise heavily depends on the competence and productivity of each employee. The productivity can be drastically increased by reusing process know-how created and gathered within the enterprise over the years [19]. During knowledge-intensive workflow s, rigid and agile processes are often interleaved [16]. While modeling rigid processes is sup-ported by state-of-the-art proces s modeling tools, agile processes are a subject of discussion in curre nt scientific and technological research. Despite the flexible a nd unpredictable nature of agile processes, it is highly desirable to be able to reuse them, espe-cially for knowledge-intensive work. The easiest case of process know-how reuse without requiring process modeling efforts is the so called instance-based task reuse. In case of instance task reuse, users are provided with the func-tionality for retrieving similar tasks (see Figure 8). In TaskNavigator, similar task s earch is based on the BrainFiler functionality for finding similar document categories. Every task in TaskNavigator corresponds to a certain BrainFiler category: the similarity between two tasks is derived from the similarity be-tween the corresponding document categories computed by BrainFiler. The information about retrieved si milar tasks (i.e. task descrip-tions, decomposition into subtasks, information items attached to similar tasks) can be adapted and reused during the enactment of the current process. Newly created task instances are retained in the respective reposi-tory (i.e. the task case base) and can be reused by the user himself or others. By analyzing the rate of different reuse activities, the most frequently reused tasks (typical tasks) can be identified. If these frequently recurring tasks are relevant for the enterprise, and the enterprise is willing to make an investment into process mod-eling, such typical tasks can be modeled more formally using process types. 
Figure 6: Model-based and instance-based activity reuse ap-A process type is a semi-formal abstract description of a process activity containing a num ber of attributes:  X  a textual description of the activity,  X  pre-and post-conditions for the activity,  X  possible approaches for executing the activity (decomposi- X  activity-related documents. Every process type decomposition contains zero or more sub-activities. Tasks created as instances of a certain process type inherit the properties of that pro cess type like related documents or possible decompositions into sub-activities. During process type instantiation, users can choose the necessary decomposition of the process type and tailor the task structure according to their situation. Process types are managed within the Process Type Library (PTL), a central repository where the available process types are stored and maintained. While the PTL is regarded the center of process know-how, the PTL should be available for all project members with proper access control. Our suggestion is that by combin ing agile process modeling, task instance reuse, and proactive in formation delivery, we provide a basis for effective sharing of process know-how among partici-pants of agile knowledge intensive processes. The concept of a Wiki has beco me a widely used collaboration platform in both small and large institutions. Its flexibility and lightweight characteristics match very well with TaskNavigator concepts. In TaskNavigator, Wikis enable the following aspects to help users collaborate on tasks and their related information:  X  An additional document reposit ory for PID: TaskNavigator  X  Means for informal process descriptions: Corresponding to  X  A platform for task-related discussions: When a task is dele-First experiences with TaskNaviga tor revealed some shortcoming of our approach:  X  While working on a task, typical users spend a considerable  X  Wiki pages should contain func tions to categorize and organ-We extended the PID functionality to solve these problems. PID now suggests related documents as well as document folders when users are viewing/editing Wiki pages. TaskNavigator per-forms an information retrieval using the page name and its con-ment-oriented PID. Suggested re lated documents/folders can be attached to the Wiki page like tasks. These new attachments are immediately visible to other users who view the page. Wiki page categorization is also extended with PID. Wiki catego-ries are now unified with document classification categories in the DMS BrainFiler. PID recommends possible categorizations for the current Wiki page based on the similarity of its contents to Wiki pages that are already categorized. Users can accept the recommendation by clicking a button. This Wiki page categoriza-tion is also visible from task-oriented PID. User groups can share and evolve information categorization hierarchies, uniformly from both task-and document-oriented views. Figure 7 illustrates how Wiki based PID may help the user. In this example, the user is workin g on a Wiki page that describes different software tes ting tools. TaskNavigator searches its re-positories to find documents and document folders related to test-ing. Also, Wiki categories relate d to testing and tools are sug-gested as a possible categorization. Let us assume the following situ ation: a TaskNavigator user in company A is preparing the task  X  X isit of CEO of company A X  that is a Japanese company. The user creates a new subtask  X  X re-pare visit of CEO of company A X  in the task  X  X oint project with company A X  (see task hierarchy on Figure 2), and clicks on it to see task details in the right frame. The TaskNavigator system performs a query through the integrated DMS and retrieves documents from the document repository that might be relevant for preparing the visit. For the current task the system has found 10 documents (see  X  X uggested documents X  pane on Figure 5). Listed on top is an e-mail containing details about the CEO X  X  visit and a scanned article about the CEO. The user decides that these 2 documents are interesting. He ca n download them or attach them to the task (see attach and link buttons on Figure 5). Since the user has not prepared such a visit before, he wonders if colleagues might have. After clicking the  X  X heck X  button in the  X  X imilar tasks X  pane (see Figure 8) he rece ives a list of tasks that are likely to be similar to the current one. The task  X  X repare visit of CFO of company A X  once performed by a colleague looks very similar. The colleague decomposed this task into three subtasks:  X  Find suitable gifts for delegation  X  Prepare presentations  X  Reserve meeting room. Because all subtasks are relevant for the current visit preparation as well, the user copies this s ubtasks to his own task list via TaskNavigator. Moreover, for the task "Find suitable present", the user notices that his colleague attached some documents on Japa-nese business culture that he fo und useful. Seemingly, he had searched the Internet for related information. The two documents he found and attached are now also available to the current user. In this section, we describe the experiments we conducted to evaluate TaskNavigator X  X  performance. While pilot tests were conducted with students, the feas ibility test and the case study were done with office workers. In this section, we explain the e xperimental settings of the feasi-computer science researchers at the Knowledge Management department at the DFKI. Around 20 researchers used the TaskNavigator system for their daily task management. They were experienced scientists work ing with large volumes of infor-mation and they understood the main concepts of TaskNavigator -PID and Agile Task Management (ATM). Since some researchers at the same time intensely used BrainFiler, which is the backend system of the TaskNavigator, we provided the local PID functionality that allows searching documents on the local desktop realized by local BrainFiler installation. The document repository contains over 20000 documents, including papers, specifications, and other shared documents of the group. The duration of the test was two months; the first half was used to get accustomed with the system, during the latter half, we evalu-ated the users X  activities. We collected several metrics to evaluate the usage of the system functionalities. This enabled us to validate the qualitative feed-back. Here we show an excerpt:  X  Number of attached information items.  X  Number of access to the attached information items.  X  Number of suggested information items.  X  Number of access to the sugge sted information items.  X  Number of created task s and delegated tasks. In combination with basic metric s, e.g. the number of tasks and the total time spent on the system, we can derive useful measures to evaluate the system, e.g. th e number of suggested information items per unit time or per task. A summary of the results of the DFKI feasibility test is shown in Table 1, containing the usage data of around 20 users for their daily tasks. Since the contexts of the experiments are completely different, we cannot directly compare the results from the SRCB case study with the feasib ility test at the DFKI. The amount of created tasks and the numbers of suggested and accessed documents indicate that TaskNavigator was used inten-sively. It is remarkable that no t all users were equally engaged with TaskNavigator (7 users created 6 or less tasks). On the aver-age, every user created 25.6 tasks. Even after the test was con-cluded, about 50% of the users (10 people) continued using TaskNavigator for their daily work. Considering the amount of attached (151) and accessed (163) information items, some information items were used more fre-quently than others. In addition, the number of created tasks (518) and the accumulative number of suggested information items (30198) indicate that on the aver age 58 information items were suggested for a single task. The number of accesses to the s uggested information items (271) is considerably smaller than th e number of suggestions. This is due to the fact that TaskNaviga tor suggests a newly calculated set of information items every time a user accesses to a task. Conse-quently, the accumulative number of suggested information items became large. However, comparing the number of accesses to attached information items (163) with the number of accesses to suggested items (271), the information items suggested by TaskNavigator seems to have been regarded as useful as the information items that were manually attached to tasks by the user. The large difference between the numbers of created tasks (518) and delegated tasks (10) reveals th at the system was mainly used for organizing one X  X  own work. Since the researchers are working in a similar context and have been in touch with each other every day, they might not have needed the task delegation function dur-ing the short test period. The TaskNavigator case study was conducted at the Ricoh Soft-ware R&amp;D Center in Beijing (SRCB) with experienced research-ers as test persons. Here, we tested the requirements analysis ac-tivity, which is an example of knowledge-intensive work. Two researchers at SRCB took the role of requirements engineers ana-lyzing requirements of a software product. Three other researchers at SRCB were domain experts to help the two researchers by pro-viding product information. They communicated with researchers in the Ricoh Software Research and Development department (SRDG) in Tokyo, who were cust omers. In the case study, they analyzed a product with regard to the replacement of an existing component. In this analysis, they could utilize design documents of the existing component. The duration of the case study was three months, the first month was used to get accustomed to the system, and during the latter two months we tested the system. The two requirements engineers provided output documents about use cases and domain models for the analysis. The summary shown in Table 2 shows the activ ities of the requirement engi-neers during the last month derived from a questionnaire. We analyzed the results of the metrics and the questionnaire integrally. In comparison with the results of the feasibility test, the number of task delegations per user is high. Most of the delegations were for reviewing requirements. The number of the attached information items per task and the number of accesses to the attached informa-tion items are also high. The ratio of the numbers of items and accesses shows that the researchers accessed the attached informa-tion items 3.1 times on the averag e. Almost the same number of accesses was realized regarding the suggested information items. As we explained in the feasibility test, the ratio of suggested items and accesses is lower than the one of the attached items. On the average 36 information items were suggested for a task by PID. The higher number of the access to the attached items could mean that the requirements analysts attached very valuable information items to their tasks. Compared to that, there is still room for im-proving the accuracy of PID. In the questionnaire, one of the two analysts mentioned that the PI D functionality was useful during the requirements analys is activities, especially for understanding the problem domain, while the othe r one complained that informa-tion suggested by PID (predefined process information of re-quirements analysis) was not ade quate. This shows that the use-fulness of the PID functionality depends on the information re-pository, and on the expertise of the user. We assume the PID functionality is useful especially for new employees or individuals who are newly assigned to a project. In the questionnaire, the subjects indicated that the ATM enables them to organize tasks faster an d to improve the efficiency and productivity in planning and organizi ng tasks. In addition, they also stated that the ATM functionality is easy to learn and intui-tive. They also mentioned that the TaskNavigator system is easy to use in general, including learning the operations. However, they slightly disagreed to both effici ency improvement and productiv-ity increase by applying TaskNaviga tor. This could be caused by the quality of the stored information in the repository. For the case study, we prepared requirements engineering process and domain information by conducting pilot te sts on requirements engineering with students, and by conducting a survey on the internet. How-for a certain requirements analys is. Inadequateness of the infor-mation in the repository was also noted by one of the require-ments engineers. Aside from the difficulties with the information repository prepa-ration the case study results show that the subjects gave a positive feedback on the system functiona lities, the ATM and the PID. This supports our idea that, reusi ng tasks or task models effective in situations where the integrity of prior information is doubtful. The issues addressed by the approach presented here stem mainly from the areas of process-orie nted knowledge management and desktop search engines. In the following, we briefly compare ex-isting works with the approach de scribed in this paper. Most work on integrating knowledge ma nagement and process support has been done in the field of business processes (see [2] for a re-cent overview of Business Process-Oriented Knowledge Man-agement). Prominent approaches such as EULE [12], OntoBroker [17], WorkBrain [18], PreBIS [6], or DECOR [1] focus mainly on fairly static (in contrast to weakly-structured) processes with re-gard to proactive information delivery; hence, they rely on struc-tured task representation and ontologies. Caramba [7] realizes an activity-based knowledge manageme nt approach for ad-hoc proc-esses by enabling knowledge work ers to link knowledge artifacts to tasks. However, only artifacts that have already been linked to a task are made accessible for the task's enactors; a proactive distri-bution of potentially relevant artif acts based on the content of artifacts already linked to the task is not provided. The CALVIN project [10] inves tigates lessons learned systems supporting the process of finding information relevant to a par-ticular research task. CALVIN learns about information sources by automatically recording cases that represent the consulted in-formation sources. As the user browses for information, the sys-tem maintains the user's current research context (e.g., a set of keywords describing the main topics) and compares it with former contexts. If the similarity betw een the current and a former con-text exceeds a certain threshold, the resources associated with the former context are presented to the user as relevant in his current context. Other approaches to provide ligh t-weight, proactive information delivery are based on collaborative filtering (CF) technology, e.g., GroupLens [13] or Entree [5]. Current desktop search engines (e.g., Google Desktop Search, x-friend, MSN Desktop Search) do not yet have a notion of a user's provides on-the-fly recommendation links to available documents that are relevant to the user's active window (e.g., an open docu-ment or e-mail editor). In this paper we presented TaskNavigator, a prototype that real-izes a light-weight approach to task-specific, proactive document delivery. The term vector similarity-based approach used here by relying on BrainFiler X  X  functionalities is intended to complement our earlier work on more heavy-weight approaches based on for-mal process models and ontologie s [8][9], which require consid-erably more modelling effort on behalf of the users. Although we used a flexible workflow management system as a basis for the prototype, the presented approach is also applicable to simpler to-do list applications as found in the personal information manage-ment tools (e.g., PDAs) of today' s office workers. It should be noted that the approach allows starting formal modeling of proc-esses and information needs at any time, should the company be willing to make such investments. The current TaskNavigator version has been evaluated in form of distributed software development pr oject. Due to lack of a quanti-tative evaluation, we cannot show statistical significance of the results. However, based on the positive qualitative results col-lected so far concerning TaskNavigator usage, and taking into account the positive evaluation results already obtained for our process-embedded information suppor t [8], we believe that an efficiency gain can also be achieved in an everyday office setting with the approach presented here, by making documents more easily available during the office worker's tasks, and helping to prevent that relevant documents might be overlooked. Work funded in part by  X  X tiftung Rheinland-Pfalz f X r Innovation X  (InnoWiss, TEAL). The authors thank Christian Denger and Mi-chael Eisenbarth (Fraunhofer Institu te of Experimental Software Engineering) for preparing the questionnaire used in the case study. ____________________________ [1] Abecker, A., Bernardi, A., Ntioudis, S., Mentzas, G., [2] Abecker, A., Hinkelmann, K., Ma us, H., and M X ller, H.-J., [3] Abecker, A., Papavassiliou, G. , Ntioudis, S., Mentzas, G., [4] BrainFiler home page. [5] Burke, R. (1999). Integrating knowledge-based and collabo-[6] Delp, M., Bhm, K., and Engelbach, W. (2004). Pre-built [7] Dustdar, S. (2004). Reconc iling knowledge management and [8] Elst, L. v., Aschoff, F.-R., Bernardi, A., Maus, H., and [9] Holz, H. (2003b). Process-Ba sed Knowledge Management [10] Leake, D., Bauer, T., Maguitm an, A., and Wilson, D. (2000). [11] Mahe, S., Rieu, C.,  X  X oward a Pull-Approach of KM For [12] Reimer, U., Margelisch, A., Novotny, B., and Vetterli, T. [13] Resnick, P., Iacovou, N., Such ak, M., Bergstorm, P., and [14] Riss, U., Rickayzen, A., Maus , H., and Aalst, Wv (2005). [15] Schuett, P.,  X  X issensma nagement im E-Learning X , J.UCS, [16] Schwarz, S., Schwach strukt urierte Workflows f X r das [17] Staab, S. and Schnurr, H.-P. (2000). Smart task support [18] Wargitsch, C., Wewers, T., and Theisinger, F. (1998). An [19] Wiig, K.M. Perspectives on In troducing Enterprise Knowl-
