 1. Introduction
TCP, the predominant Internet transport protocol, has the capability to adapt its sending throughput to the changing bandwidth available congestion signal by halving its current emission window of packets. occurring in one TCP window during one current round trip time period. When a drop tail queue overflows, several TCP sources can observe a bunch of losses which can lead to a decrease of the throughput involving a brutal decrease of the buffer occupancy. ordertooccupythemostcapacitypossible.Asaresult,thiseffectresults in an accordion phenomenon where queues are constantly oscillating.
Thisbehaviourisharmfulfortheend-hostswhichobserveaconstant oscillation of their current throug hput that can be problematic for applications which need a relatively stable rate over the time.
More than 10 years ago, the random early detection (RED) was proposed to avoid congested Internet links ( Floyd and Jacobson, 1993 ). The goal was to replace the current deployed drop tail queues known to provoke large queue oscillations when router X  X  buffers overflow. The main idea of the RED algorithm is to drop packets before the queue is full. As a consequence, when a TCP source gets such preventive drops, it decreases the emitted throughput according to the AIMD (additive increase multiplica-tive decrease) algorithm inherent to the TCP protocol. RED drops packets with an increasing probability (max p ) when the occupancy
REDisto maintaina small buffer occupancyand avoidcasual bursts of packet losses.
 neous queue oscillations lead the system to a chaotic state. They show that the root of the problem comes from the estimated average queue size which is computed with inaccurate initial values. Then, during an experiment, the queue dynamics slide from a stable fixed point to an oscillatory behaviour and finally to a chaotic state. As a direct consequence, the network operators cannot provide any Quality of Service (QoS) guarantee to their customers as they would need to continuously adapt their parameters for different traffic conditions.
 the authors in May et al. (1999) and Ziegler et al. (2001) have weighted up the disadvantages for deploying such a mechanism over the Internet. In certain cases, increasing the number of dropped packets can have unexpected effects on the overall performance ( Ziegler et al., 2001 ). This has motivated the use of preventive marking instead of preventive dropping with the use of 2001 ) of IP packets. In this case, instead of dropping packets, the
RED queue marks the IP packet X  X  ECN flag to notify senders that they are crossing a congested link and that they should decrease theirsendingrate.Althoughthisflagiscurrentlyimplementedboth in end-hosts (GNU/Linux, Mac OSX and Windows Vista and newer) and inside the core network (Cisco IOS implements a RED/ECN variant called WRED/ECN), ECN still remains disabled by default for all these systems and the following study ( Medina et al., 2005 ) published in 2004 precises that ECN is only used by 2.1% of computers.

Despite of all these issues, the RED algorithm is recommended by the Internet Engineering Task Force (IETF) with the expectation that the providers make their own effort to select suitable RED control parameters for their network ( Braden et al., 1998 ). Unfor-tunately, some past work have already suggested that RED is fundamentally hard to tune ( Low et al., 2003 ) while others claim
All these configuration problems partly explain the reason why network operators do not enable this algorithm. Thus, it seems obvious and necessary to find a method to easily and automatically tune the RED parameters.

Several studiesattemptedtoe nhancethebasicREDalgorithm( Feng
Low et al., 2003; Suthaharan, 2007; Kim and Yeom, 2008 ). As a non-(ARED) ( Floyd et al., 2001 ) introduced the notion of adaptive AQM.
These adaptive strategies recompute the max p probability value following an AIMD algorithm. However, the parameters that weight genericaswewillseeinoursimulation.In Lowetal.(2003) ,theauthors show that RED parameters can be tuned to improve stability, but only
Suthaharan (2007) , the author introduces an interesting approach where the algorithm dynamically adjusts the moving exponential weighted computation parameter which is normally static, in order to queueing approaches have been proposed to improve the efficiency of
RED-like algorithms in various network conditions, the parameters used to set these new AQM are sometimes more complex to determine do not yet exist whatever the AQM used and we could discuss whether the problem is in fact solvable.

Although the validity of RED concept is still debated, we claim that the parameters X  settings are one of the main barrier to its acceptance and that this problem is a perfect candidate for the neural networking area. In this paper, we seek at evaluating whether neural network theory can help by simply acting on the standard RED parameters. As a result, this paper does not attempt to extend the prolific models previously proposed. We do not attempt to design another queueing mechanism or propose to enhance the core mechanism itself. We only focus on the optimal estimation of the probability parameter denoted max p . Thus, this paper aims at illustrating the impact of the role of learning mechanisms on core network Internet problems with similar motivation than the one presented in Beverly and Sollins (2007) . networks to solve this stability issue without requesting complex tuning from network engineers.

This paper is structured as follows. Section 2 presents the motivation of this work. Section 3 gives pointers related to the implementation of the core mechanism. Then, Section 4 evaluates 2. Motivation of using a Kohonen neural network
Kohonen networks ( Kohonen, 2001 ) are a class of neural networks known to solve the pole balancing problem ( Makarovic, 1991 ). movement along a single axis. The cart is able to move along a track with a fixed length as represented in Fig. 2 (a).Theaimoftheproblem is to keep this pole balanced by applying forces to the cart.
The main idea of our contribution is based on the analogy existing between this balancing problem and the RED queueing problem. In RED, we can compare the pole balancing to the evolution of the queue occupancy which oscillates between both thresholds (min th , max th ).

As shown in Fig. 1 , the probability to drop (or to mark) packets increases when the buffer occupancy increases following the probability scheme configured (i.e. following both thresholds set andtheslope oftheprobabilitycurve).Thephysicalforcesresulting on the pole have a similar role to the packets arrival rate in the queue. Fig. 2 illustrates this view.
Self-configuring RED schemes such as FRED or ARED update the (1999) , the authors explain the queue length variation by the need of dynamically changing max p as function of the queue occupancy.
They propose to recompute this probability following an AIMD algorithm.The update isdone as function of the average queue size.
If the average queue size is around max th , the algorithm increases max p to drop more packets and decreases max p if the value is around min th .
 The AIMD algorithm performed by FRED is different from ARED. Indeed, FRED updates max p each time a packet is enqueued while
ARED has another parameter allowing to update this value during a time interval. This action period can smooth the effect of an aggressive setting of the AIMD factors. Moreover, FRED does not apply consecutive decrease or consecutive increase of the max p value. This choice can be problematic in case of rapid traffic change.
 The neural network we use here is known as the Kohonen Self
Organizing Map (SOM) ( Kohonen, 2001 ). It consists in a one-or two-dimensional information processing layer of functional enti-ties called neurons. It is connected to input data seen as input vectors and provides output data also as vectors. We present in
Table 1 the entries used to feed the neural network in both cases and the resulting output. The input vector contains the previous and the current queue length and the output vector the max probability. For a sake of comparison, we give in this table the vectors used with the pole balancing problem. The input data are fully mapped onto the Kohonen layer X  X  neurons which respond to this data according to the weight assigned to the connections between input vectors and neurons and deliver an output response vector.Tobeginwith,theneuralnetworkispresentedalearningset of example input vectors and adjusts (i.e. learns) appropriate weights for its neurons by comparing the input vectors to the weight vectors for each neuron thus electing a  X  X  X inning X  X  neuron  X  X  X lose X  X  to the input vector.
 learning feature, which implies neu ral neighbourhood generalization of a correct learning experience so as to create clusters of neurons responding to similar input vectors without necessarily having explicitly learnt them. If a neuron learns that a given input vector should respond, only in a lesser way, depending on their topological well adapted to stability preservation tasks as the one we present here. Once the learning procedure is over, i.e. when the neural network produces an acceptable amount of erroneous responses during learning, the weights of the neural connections to the data input are frozen. That means that the training process needs to be done only once without specific s cenario and should work for every kind of situation.
 seen before and produce adapted responses. In this way, the conservationofa direction,anequilibriumorthe correctparameter to adjust a RED mechanism is made possible although there is no way of predicting the way the neural network learns to solve this particular problem. In our case, the learnt sequences of input vectors are not the ones used in our tests, in order to prove that the learning method provides a general purpose neural network for the resolution of the problem we deal with here. trained for.
 multi-layer perceptron to adapt the a and b coefficients of a PI controller. In Cho et al. (2005) , the authors do not improve the queue length stability but smooth the PI dynamic and in average, results obtained are globally similar. We think that such a neural network is well adapted to pattern and shape recognition problems, whilst a SOM such as the Kohonen SOM could be better
Indeed, this Kohonen SOM algorithm preserves topological relationships between neighbouring vectors.

Eachtimeapacketisenqueued,theKohonennetworkcomputes a new max p following the previous and the current average queue size. No other parameters are needed to perform this operation. 3. Implementation
One important point of dealing with Kohonen networks is the small memory footprint required by the implementation. In our case, we have implemented our proposal in ns-2 network simulator . The most complex structure is simply a square matrix 25 25 which represents the Kohonen network. The code used is a modification of the well-known Karsten Kutza X  X  implementation. For the sake of comparison, all the scripts and ns-2 implementation used in this study are available for download at the author X  X  webpage. 2 25 50 75 100 number of TCP flows # of packets # of packets 100 150 200 100 150 200 100 150 200 # of packets 4. Evaluation and analysis This section presents the experiments driven to evaluate the
KRED and comments the results obtained. For the sake of compar-isonpurpose,webaseourhypothesisandinitialREDparameterson this following recent and exhaustive study ( Kim and Yeom, 2008 ).
This allows the reader to better compare our results with existing work and simulations realized in this area as well as avoiding any fancy or unjustified use of initial RED parameters. 4.1. Testbed and assumptions represented in Fig. 3 . We compare our proposal to RED, Fair RED (FRED), ARED, random exponential marking (REM) ( Athuraliya et al., 2001 ) and proportional integral (PI) AQM. The parameters used for each queue are given in Table 2 . For each queue, every threshold is set in order to obtain a stabilization around half the queue size. # of packets # of packets # of packets # of packets # of packets # of packets
The parameters given in Table 2 come from standard recom-mendation from the networking communityand are recalled in our reference paper ( Kim and Yeom, 2008 ). All these parameters have been deeply investigated by the past and are consistent with the following study. Furthermore, the testbed and the networking conditions have not been chosen randomly, they strictly follow ( Kim and Yeom, 2008 ) in order to allow a fair comparison with the results presented.

The TCP flows are NewReno with a large window size set to 10 000 packets. The RED queue is configured to drop and not to mark packets. In order to evaluate our proposal, we drive two distinct experiments. In the first scenario, the number of TCP flows in the network is increasing from 50 to 250 flows following the allows us to verify the impact of the traffic load on our proposal compared to other AQMs. In the second experiment, the traffic changes every 50 s following the scenario presented in Fig. 4 (b).
The rationale for using this traffic pattern is to evaluate our proposal under wide traffic variations. 4.2. The training process
The KRED queue has been trained with an arbitrarily chosen number of 20 long-lived TCP/Newreno flows emitted during 600 s the core link was set to 50 ms which corresponds to an RTT of 100 ms. We choose this RTT following this measurement study ( Aikat et al., 2003 ) which shows that the global RTT observed over the Internet is equally spread around 100 ms over an interval rangingfrom1 msto1 s.Theneuralnetworkmaplearnttostabilize the KRED queue with the KRED parameters given in Table 2 after 179 s. No further training has been done.

The learning process is automatically stopped when the relative error tends towards zero (i.e. when the queue value is correctly stabilized between the two requested bounds). The scenario used to train the neural network is the most simple one as no traffic variation is introduced. We attempted to train KRED following a process in that case was much longer (around 500 s). When we experimented the resulting Kohonen map, we did not obtain better similar); however, the Kohonen map did not perform well with scenario #1 or any other scenarios involving other traffic patterns. WeconcludedthatourresultingKohonenmap wasoverspecialized and decided to come back to a simple training scenario. The best and the more generic map was obtained by training the neural network with a relatively small number of TCP sources without introducinganytrafficvariations.Asaresult,theresultingKohonen map is used thereafter in all experiments. We also have driven other measurements, not presented in this paper, and clearly obtained the same results with other traffic variation. 4.3. First scenario
Results are given in Fig. 5 . Each graph presents the instanta-neous and the average queue size. The results presented for the KRED queue are obtained after the training process. As shown in stable queue length between both thresholds compared to the other queues. To better illustrate the performance of our algorithm, we compare the queue delay and the average drop rate of all these proposals in Table 3 . This table clearly shows that both ARED and # of packets # of packets 100 150 200 100 150 200 100 150 200 # of packets
KRED obtain similar performances in terms of drop rate ratio and queue delay. We remark that we have not reported in this table the link usage obtained by each queue as the latter is equal to 4.96 Mbit/s with a nil standard deviation for all the experiments.
As in Kim and Yeom (2008) , it seems that ARED is the best competitor, we then compare ARED to KRED with various end-to-end RTT. The results are presented in Fig. 6 . This figure globally shows that KRED and RED stabilizes the queue around the target valueof100packetswhatevertheRTTofthenetwork.However,we can notice a slight advantage for KRED which is more stable when the RTT increases.
 performances of ARED and KRED are similar in terms of stability of the queue when the traffic load increases. As a result, both initial
ARED parameters (given in Table 2 ) which tune the aggressiveness of the additive increase and multiplicative decrease drop prob-ability value and KRED algorithm reach their goal.
 these measurements by changing the traffic pattern during the simulation. The original parameters remain unchanged in order to assess the adaptability of these AQM to the rapid traffic change conditions. # of packets # of packets # of packets # of packets # of packets # of packets 4.4. Second scenario
Asshownin Fig.7 ,the KREDqueueobtainsastablequeuelength between both thresholds compared to the AIMD process method of
KRED reacts rapidly to the traffic change compared to ARED. Due to this fast traffic changing, the max p value is constantly recomputed and the previous computed value strongly impacts on the current result. In the case of an AIMD process which estimates the max the pace of convergence to the optimal value is slow and if the weights are high, the resulting probability can strongly oscillate when the traffic is changing. As a consequence, the initial config-uration parameters used with success in the first scenario by ARED are not adapted to the second one. Thus, our proposal allows to managed by the Kohonen neural network. Finally, Table 4 gives the statisticsof thisscenarioandshows thatKRED obtainsstable queue length without average queuing delay compromise.
 In Fig. 8 , we also change the nominal RTT value between all hosts.
The immediate observation is that KRED reacts much faster to the difficulties to stabilize the que ue. Indeed, we do not take into consideration as in Kim and Yeom (2008) the evolution of the RTT acontrolfeedbackloopsystem,thereactionofthesources is delayedan
RTT later. In case of high load, the high number of multiplexed TCP
Obviously, if we take into account the RTT of each flow and that we consider an average value of the RTT evolution, we could add to KRED another useful entry parameter w hich indicates to the system the minimum reaction delay. However, realizing such passive measure-per-flowstateinsidetherouterandg reatlycomplexifiesthecorerouter internal computation. This violates the well-known Internet paradigm is generic enough to be used in a broad context compared to other competitive proposals that involv e complex setting parameters. As compared to other proposals. 4.5. Second scenario with variable RTT
In this last experiment, we still use the second experiment basic scenario, each flow has a random RTT ranging from x to x +38 ms. This corresponds to a variable RTT of the access link which is ranging from 1 to 20 ms of delay.

The purpose is to simulate a more realistic traffic behaviour to assess the performance of KRED in a general context and in particular, if we consider the active queue placed near the edge or inside the core network. Then, using various RTT ranges, we illustrate several localization contexts. We do not claim that the scenario proposed perfectly simulates a real topology, we just want to illustrate the versatility of our proposal.

Fig. 9 and Table 5 report the results obtained for each queue where each flow gets an RTT randomly chosen between # of packets # of packets 100 150 200 100 150 200 100 150 200 # of packets [104, 142] ms. Once again, KRED and ARED seem the most efficient queues. If we investigate the case of smaller and higher RTT ranges in Fig. 10 , KRED remains the most versatile queue. 5. Statistical analysis
To improve the confidence and better interpret the results obtained, we have computed the mean, standard deviation and used a metriccommonlyused inthecontrol theoryareato estimate gives the percentage of instantaneous values inside and outside an envelop defined between 7 20 % of the computed mean. This metric allows to assess a relative stability of both queueing disciplines. As each computed mean is different, we have also computed the coefficient of variation (also known as relative standard deviation which corresponds to the ratio between the standard deviation and the mean) to ease the comparison.
Tables6 X 8 providetheresultingstatistics,respectively,for Figs.6,8 suppress the non-steady phase. All these results show that the dispersion is always smaller for KRED. Clearly, the best scores are always obtained by KRED. Although we can observe a slight advantage for KRED in Table 6 , the results obtained by ARED are inthesameorderofmagnitude.Thisisexplainedbythescenario#1 which performs smooth changes (we recall that in this scenario the load is gradually increased) compared to scenario #2 where more abrupt changes occur, thus preventing the correct adaptability of
ARED algorithm. 6. Conclusion
This paper introduces Kohonen-R ED: an adaptive RED mechanism easilyimplementable.The ideadeals with theuseofaKohonenneural network to compute the optimal probability parameter in order to # of packets # of packets # of packets achieveastablequeue length.KREDreduces thenumber ofparameter settings and in particular the non-obvious ones. The Kohonen network does not need to be retrained and therefore can be put in hardwareinthecontextofarouterimplementation.Themechanism X  X  efficiency has been illustrated through ns-2 simulation where other schemes fail. In this work, we use a Kohonen-based neural network main contribution of this study is to show the feasibility of using neural networks to solve a networking stability problem and the throughput, queue size, y ) in order to provide several maps to fit several contexts.

Now, considering other engineering domains, we know this neural network can solve several stability problems that belong to mechanical engineering. Today and to the best of our knowledge, this application to network problems is original. As a future work, we are still investigating this class of neural network to assess whether it could help to stabilize a TCP sender throughput or could be used in other networking issues. Finally and following these promising preliminary results, we are currently evaluating other neural network algorithms and considering the development of this algorithm inside the GNU/Linux kernel.
 Acknowledgments The authors would like to thank Sebastien Ardon and Guillaume
Jourjon and Max Ott for the discussion about this mechanism and the support of the National ICT Australia (NICTA).
 References
