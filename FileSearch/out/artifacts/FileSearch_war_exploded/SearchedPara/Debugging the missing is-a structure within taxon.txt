 1. Introduction workshop on debugging ontologies and ontology mappings having been held in 2012 [40]. regarding style include such things as unintended redundancy. More interesting and severe defects are the modeling defects which require domain knowledge to detect and resolve, and semantic defects such as unsatisfiable concepts and inconsistent of the is-a structure of ontologies.
 semantically-enabled applications. For instance, the is-a structure is used in ontology-based search and annotation. In influence on the quality of the ontology alignment results [1].
 the 2008 and 2009 Ontology Alignment Evaluation Initiative (OAEI) two ontologies, Adult Mouse Anatomy Dictionary [3] (MA, 2744 concepts) and the NCI Thesaurus anatomy [46] (NCI-A, 3304 concepts), and a partial reference alignment (PRA, a set of structure of the ontologies.
 most likely prefer to add the is-a relation  X  limb joint is-a joint were not found before (e.g.  X  hand joint is-a joint  X  ). In general, such a decision should be made by domain experts. E nvironment), which allows a domain expert to debug the missing is-a structure of ontologies in a semi-automatic way.
Before we introduce our work, we note that the  X  is-a relation classes in the is-a relation have monadic qualities by which they can be characterized (e.g. classification of trees). scarlet is-a red). Specification covers things such as  X  careful painting systems the different kinds are mixed. The latter is also addressed in [19] where the author discusses the problem of is-a follows from decisions that were made by the developers of the ontologies and the PRAs.
The remainder of this paper is organized as follows. In Section 2 we present the theory for our debugging approach. The presented in Section 9 and the paper concludes in Section 10 . 2. Theory the structure of the ontologies. 2.1. Preliminaries
The setting that we study is the case where the ontologies are defined using named concepts and subsumption axioms. Most setting.

De fi nition 1. An ontology O is represented by a tuple C ; I  X  X  with C its set of named concepts and I is-a structure.
 we consider equivalent (  X  ), subsumed-by (  X  ) and subsumes ( mappings.

De fi nition 2. A Partial Reference Alignment (PRA) between O i such that for each mapping in the PRA with c i a concept in O represented by ( c j , c i ); and c i  X  c j is represented by both ( c
De fi nition 3. An ontology network N is a tuple O ; P  X  X  with O network (called the networked ontologies) and P  X P ij n i ; j  X  1 ; i b j
Further, the induced ontology O N for N is an ontology O N
In the remainder of the paper we assume that the sets of named concepts for the different ontologies in the network are disjoint. 2.2. Theory for detecting
Given an ontology network, assuming that all existing is-a relations in the ontologies are correct, we use the domain the ontology, which can be inferred using logical derivation from the induced ontology of the network, but not from the networked ontology alone.

De fi nition 4. Given an ontology network N X  O ; P  X  X  where O  X O for the networked ontology O k derivable from the ontology network N , denoted by M a ; b  X  X   X  C k C k O N  X  a  X  b  X  O k  X  a  X  b jg f . Further, the set of missing is-a relations for the networked ontologies ontology network N , denoted by M N , is the set of is-a relations
As an example, consider the ontology network in Fig. 2 . It contains two ontologies with their is-a hierarchies (marked by definition above, there are two missing is-a relations derivable from the network, ( ankle _ joint as ( knee _ joint 1 , joint 1 ) and ( hip _ joint 2 , limb _ joint now on in this paper, whenever missing is-a relations are mentioned, we mean the missing is-a relations derivable from the network, unless explicitly stated otherwise. 2 2.3. Theory for repairing
Therefore, the structural repair only contains is-a relations between concepts within the same ontology. The elements in a structural repair are called repairing actions .

De fi nition 5. Let M N  X   X  n
O k = C k ; I k  X  X  and M k the set of missing is-a relations for O
O with respect to M k , denoted by R k , is a set of is-a relations such that R
C ; I k  X  R k  X  X   X  a  X  b . Further, a structural repair for the networked ontologies relations such that R N  X   X  n k  X  1 R k , where R k is a structural repair for O structural repair for the networked ontologies also constitutes a structural repair. a number of heuristics and preference relations between structural repairs for the networked ontologies.
Not all repairing actions are always needed in a structural repair. For example, in the case of Fig. 2 ,{( ankle _ joint ( knee _ joint 1 , joint 1 ), ( ankle _ joint 2 , limb _ joint repairing the missing is-a relations. Therefore, {( ankle _ joint preferred to {( ankle _ joint 1 , joint 1 ), ( knee _ joint structural repair is also a structural repair, then the subset is preferred to its superset.
De fi nition 6. Given an ontology network N X  O ; P  X  X  , let R respect to M N , then R N is axiom-preferred to R  X  N (notation R case of Fig. 2 , the structural repair {( limb _ joint 1 , joint repair the ontologies than the structural repair {( ankle _ joint notion of  X  more informative than  X  for repairing actions as follows.
De fi nition 7. Let ( x 1 , y 1 ) and ( x 2 , y 2 ) be two different repairing actions for the same ontology O (i.e. x say that ( x 1 , y 1 ) is more informative than ( x 2 , y
This definition implies that if ( x 1 , y 1 ) is more informative than ( x derive ( x 2 , y 2 ) (and possibly more). Indeed, when ( x is more informative than ( x 2 , y 2 )), x 1  X  y 1 (added) and y
By using more informative repairing actions, we are able to add more (and sometimes within the network previously unknown) knowledge to our ontology. For instance, in the case of Fig. 2 ,( limb _ joint joint 1 ), and by adding limb _ joint 1  X  joint 1 , we have also introduced ankle _ joint was also missing, but could not be derived from the network).

Another example is that ( hinderlimb _ joint 2 , wrist _ joint hinderlimb _ joint 2  X  wrist _ joint 2 3 to the ontology will lead to the derivation of ankle _ joint Our second preference relation is based on this notion.

De fi nition 8. Given an ontology network N X  O ; P  X  X  , let R N respect to M N . Then R N is information-preferred to R  X  informative than ( x 2 , y 2 ).

We note, however, that the most preferred structural repairs according to
For instance, {( ankle _ joint 1 , joint 1 ), ( hinderlimb _ joint domain (i.e. a hinderlimb joint is not a wrist joint). Therefore, in contrast to will choose the most preferred structural repairs among the correct ones.

Further, some structural repairs may introduce equivalence relations between concepts in some ontology which are only connected by an is-a relation in the original ontology. For example, in the case of Fig. 2 , the structural repair {( bone ( ankle _  X  joint 2 , limb _ joint 2 )} will change the original is-a relation ( joint third preference relation prefers not to change is-a relations in an original ontology into equivalence relations.
De fi nition 9. Given an ontology network N X  O ; P  X  X  , let R N ontologies O X  O k fg n k  X  1 with respect to M N , where for every k , O R  X  SH R  X  N ) iff  X  O i  X  O and a ; b  X  X   X  I i : O i  X  a  X  at the same time the second structural repair is preferred to the first one. For example, in the case of Fig. 2 , let R repair {( limb _ joint 1 , joint 1 ), ( ankle _ joint 2 , limb _ joint limb _ joint 2 )}. Then R 1  X  I R 2 and R 2  X  I R 1 . The first preference is based on the fact that ( limb _ joint than ( ankle _ joint 1 , joint 1 ), while the second preference is based on the fact that ( hinderlimb _ joint ( hinderlimb _ joint 2 , limb _ joint 2 )}, that is strictly more information-preferred than both. single is-a relations, rather than a chain of is-a relations. For instance, it is more likely that ( ankle _ joint than ( ankle _ joint 2 , x 1 ) and ( x 1 , x 2 ), and ... 3. Overview of the approach missing is-a relations is described in Section 4 .
 (Phase 3).
 most informative repairing actions supported by domain knowledge (Phase 4). Once the user chooses a repairing action to changed. Further, some new missing is-a relations may be found.

At any time during the process, the user can switch to another ontology or start earlier phases. 4. Detecting the missing is-a relations such that the repairing of the latter also repairs the former.
 at least one concept from another ontology in the network, for instance z , such that O in different ontologies, the relation a  X  z must be supported by a mapping between a concept in O and a concept in another ontology in the network, for instance x  X  x  X  (or x  X  x  X  another ontology in the network, for instance y  X   X  y (or y O . We can then deduce that xwy is derivable from the ontology network because O network, and the repairing of missing is-a relation ( x , y ) also repairs ( a , b ). derivable from the ontology network. Therefore, our algorithm in Fig. 4 considers only missing is-a relations between PRA concepts.
 first time, M N is initialized to be the empty set. The global variable M to find missing is-a relations in the networked ontologies. Before the algorithm is run for the first time, M set of pairs ( a , b ) where a and b are PRA concepts in the same ontology. For each element ( a , b )in M a ( a , b )to M N , and remove it from M  X  N . Otherwise, a will be found.
 suppose we repair ( ankle _ joint 1 , joint 1 ) by adding the is-a relation ( limb _ joint detection algorithm, we find a new missing is-a relation ( limb _ joint we need to re-run the detection algorithm to find new missing is-a relations. The initial value of M detection algorithm is the same as the final value of M  X 
M . 5. Repairing the missing is-a relations
As explained in Section 3 , our approach deals with the networked ontologies one at a time. For the ontology under repair, needs to be updated, and updates these. 5.1. Generating repairing actions 5.1.1. Basic algorithm that all missing is-a relations will be repaired (least informative repairing action), but we do not take into account the where s is an element from its Source set and t is an element from its Target set.
The algorithm computes repairing actions for each of the missing is-a relations. Structural repairs can be constructed by Source and Target sets is based on computing super-concepts and sub-concepts in a finite taxonomy.
Further, every repairing action in such a structural repair repairs at least one missing is-a relation (preference
Definition 6 ). We note, however, that these may not always be the most preferred structural repairs according to from the structural repair, we have a structural repair that is more preferred according to expensive step and in our implemented system, we have not implemented this. However, as we repair one missing is-a further.

Every possible repairing action ( s , t ) computed by the algorithm satisfies a itself as well as structural repairs that are more preferred according to
We note that the algorithm does not only compute the most preferred structural repairs according to the missing is-a relation itself.
 equivalence relations, where in the source ontology 6 we have only is-a relations (preference was only an is-a relation. This means that there exist a u and v such that u now also have v  X  u . As adding a  X  t leads to v  X  u , we have that v that in the source ontology t  X  u , u  X  v and v  X  a , and thus t not introduce new equivalence relations. We note, however, that a choice of repairing action ( s , t ) where t given to the user.

As an example, consider the case presented in Fig. 6 , where O X  C is-a relations (shown in full lines in Fig. 6 ) I X  7 ; 5  X  X  M X  5 ; 4  X  X  ; 3 ; 2  X  X  fg . The algorithm then generates the following Source and Target sets. under consideration is highlighted in bold. Elements in a Source set are annotated with not be generated when we do not take into account that missing is-a relation (3,2) will be repaired. also leads to making 1 and 4 equivalent. 5.1.2. Extended algorithm possible repairing actions for ( a , b ). The Source and Target sets are now computed relative to the x and y .
Consider the case presented in Fig. 9 ,where O X  C ; I  X  X  is an ontology with concepts C X  1 relations (shown in full lines in Fig. 9 ) I X  7 ; 6  X  X  ; 6
The extended algorithm in Fig. 8 adds the concepts x 1 , y (Fig. 10 ).
 The sets generated by the extended algorithm indicate that there is an influence between the two missing is-a relations. between x 1 , respectively y 1 , and concepts in the ontology. The appearance of x is-a relation indicates that the concept chosen to be equivalent to x missing is-a relation (5,4) then (3,2) is a possible repairing action for missing is-a relation (8,4). is-a relation and recompute repairing actions for the other missing is-a relations. 5.2. Ranking repairing actions without counting the extra-added new concepts. The user can choose to use the ranking or ignore it. 5.3. Recommending repairing actions the user can ask for recommendations for repairing actions. We developed an algorithm that recommends the most informative repairing actions (see Definition 7 ) that are supported by some external domain knowledge. We assume that there is domain knowledge which we can query regarding subsumption between concepts. There are several such sources such as general thesauri (e.g. WordNet) or specialized domain-specific sources (e.g. the Unified Medical Language System).
Essentially, the recommendation algorithm selects, among the structural repairs computed by the algorithm that generates repairing actions ( Section 5.1), the structural repairs that contain the most informative repairing actions (preference Definition 8 ) that are also supported by domain knowledge. The user can choose to accept the recommendations or not. minimal elements with respect to the is-a relation in the Target set. The elements from X recommend is-a relations that are less informative than others already recommended. In step iv we check whether there is repairing actions are removed from the recommendation set. If not, then we check whether there is support in the domain repairing actions. 5.4. Executing repairing actions
For a missing is-a relation under repair, the user selects from the generated repairing actions, possibly based on a recommendation, a repairing action to repair the missing is-a relation. We note that, whenever the user selects a more the chosen repairing action. Source and Target sets for missing is-a relation (8,4) become the following for the basic algorithm: and the following for the extended algorithm:
When we compare the computed repairing actions after the choice of (2,9) for repairing (5,4) with the repairing actions (3,6), (3,7), (8,5), (8,6) and (8,7) for the basic algorithm) are removed after the choice of (2,9) (preference have repaired (8,4) first using one of these repairing actions, and afterwards repaired (5,4). global variable M N as described in the detection algorithm in Fig. 4 . 6. Implemented system of MA and NCI-A regarding the concept joint , as well as a PRA with 8 equivalence mappings. in Fig. 1 ).
 ontology there is an is-a relation a  X  b , and according to the network b b means that a and b are equivalent. These missing is-a relations are therefore immediately repaired by adding them to the ontology and essentially introducing an equivalence between the concepts. The other stage is to identify and remove the redundant missing is-a relations which are derivable from the ontology extended with other missing is-a relations. After preprocessing, repairing actions for each missing is-a relation are computed and presented as Source and Target sets. The used.

Once the Source and Target sets are computed, the missing is-a relations are ranked with respect to the number of possible actions of the missing is-a relations are generated using the basic algorithm. The selection of the missing is-a relation is-a joint  X  displays its Source and Target sets in the panels. They contain 3 and 26 concepts respectively. For the selected missing is-a relation, the user can also ask for recommended repairing actions by clicking the Recommend on WordNet, making use of the WordNet senses and hypernym relations to verify the subsumption relation between concepts.
UMLS Metathesaurus. On the interface, the two checkboxes allow the user to specify the external domain knowledge used for generating recommendations. In our case, the system uses WordNet and recommends to add an is-a relation between limb joint recommended repairing action are identified by round boxes in the panels. The user can repair the missing is-a relation by ontology in the network.
 missing is-a relations are found or unrepaired in the network. 7. Experiments
In this section, we present experiments using our debugging approach. We use different cases for which we run complete debugging sessions. In the  X  OAEI Anatomy  X  experiments we debug a network in the biomedical domain consisting of the two an ontology which is an integrated ontology based on several core ontologies and domain extensions, and a PRA.
The experiments for OAEI Anatomy and OAEI Bibliography were performed on an AMD Dual Core Processor 2.90 GHz desktop machine with 4 GB DDR2 memory under Windows Vista Business operating system (SP2) and Java 1.6 compiler. The ONKI experiment was run on an Intel Xeon Processor 3.46 GHz server with 12 GB DDR3 memory under Debian 6.0.6 and Java 1.6 compiler. 7.1. OAEI Anatomy
In the OAEI Anatomy experiments we debug a network consisting of the two ontologies and the PRA from the 2008 Anatomy between them contains 988 equivalence mappings (see Table 1 ). Our debugging leads to the detection of 205 missing is-a relations in MA and 177 in NCI-A. These were repaired by the addition of 101 is-a relations in MA and 87 in NCI-A.
The test runs for this experiment were done by the authors. As we are not domain experts for this experiment, we have used [15] to decide on possible choices and used the recommendation algorithm. 7.1.1. Run with basic algorithm for generation of repairing actions
The total debugging session took about 3 h. This includes the computation by RepOSE, the user interaction with RepOSE as well as the looking up of domain knowledge by the user.

As a first step in the session the two ontologies and the PRA were loaded. Then the detection algorithm was run. This took  X 
A further check shows that some missing is-a relations are actually equivalence relations (column have 115 missing is-a relations in MA and 80 in NCI-A (column small and thus can be easily visualized in the panels of our system.
 this case was always the missing is-a relation itself (columns other cases the recommendation algorithm was used. RepOSE generated recommendations using WordNet. The running time was the recommendation by RepOSE was used (columns with  X  use recommended (columns with  X  more informative  X  ) 10 thereby adding new knowledge to the network. relations (of which 5 needed to be repaired) in MA and 10 (of which 7 needed to be repaired) in NCI-A. Every newly derived latter.

After these missing is-a relations were repaired, no more were detected and the debugging session was concluded. 7.1.2. Using the extended algorithm for generation of repairing actions
We have also experimented with the extended algorithm for generating repairing actions. Table 7 shows the influences between different missing is-a relations that can be computed using our extended algorithm. The last column (ST) shows the For instance, in NCI-A we find missing is-a relations between each of Bronchus_Basement_Membrane , Bronchus_Cartilage , concerning body cavity/lining , lymphoid tissue , and brain nucleus with 7, 4 and 6 missing is-a relations, respectively. 7.2. OAEI Bibliography bibliography domain called 101, 301, 302, 303 and 304 and r etain from these ontologies only the taxonomic part. tothedetectionof2,18,1and9missingis-arelationsfortherespectivenetworksandthesewererepairedbytheadditionof2,7,1and7 of 48 missing is-a relations in the ontologies and these were repaired by the addition of 16 is-a relations. domain expert. As it was obvious which repairing actions to choose, the recommendation algorithm was not used. The largest session for this case took less than 5 min. 7.2.1. Case 1  X  four small networks repairing actions were used for 101 in network 101  X  302 and for 101 and 304 in network 101 missing is-a relations, no more were detected and the debugging session was concluded. 7.2.2. Case 2  X  one network each. For 304 we find 23 missing is-a relations of which 13 are redundant. 3 new missing is-a relations of which 1 needed to be repaired.
 7.3. ONKI In the ONKI experiment we debug a network consisting of two ontologies and their PRA as available in the Finnish Ontology 32,000 concepts. The PRA between KOKO and MERO contains 266 equivalence mappings. (See Table 15 .)
Our debugging leads to the detection of 25 missing is-a relations in KOKO and 37 in MERO. These were repaired by the addition of 23 is-a relations in KOKO and 34 in MERO.

After having repaired these missing is-a relations, we found 1 new missing is-a relation for KOKO and 13 for MERO. All new detected after this.
 2 cases a more informative repairing action was recommended and these were accepted. 8. Discussion 8.1. Detecting missing is-a relations
In general, detecting defects in ontologies without the support of a dedicated system is cumbersome and unreliable. In the experiments outlined in this paper RepOSE clearly provided a necessary support.
 both an advantage and a limitation. It is advantageous that no external knowledge is needed. However, there are also other and could be integrated in a future version of RepOSE.

Another advantage of our logic-based approach is, that it is guaranteed that all missing is-a relations derivable from the network are found. Further, the detection algorithm is fast, with a running time of only 2 min for the Anatomy case. relations are then treated in the same way as in our approach, while the wrong is-a relations would lead to a debugging opportunity for removing wrong information from the ontologies or alignments. 8.2. Generating repairing actions As generating all possible structural repairs in general is infeasible, our algorithms support a number of heuristics. In
Section 5.1 we have shown how our algorithms for generating repairing actions support the solutions for a missing is-a relation with respect to 8.3. Executing repairing actions
RepOSE stores information about all changes made, and computes and stores the consequences. Again, without the support of a dedicated system this is cumbersome and unreliable.

Repairing influenced the number of repairing actions for other missing is-a relations. For Anatomy, during the repairing the Target set increased. The Source sets remained the same.
 2 such relations for KOKO and 3 for MERO. For Bibliography case 1, there were no changes in this respect. be derived from the ontology network. A new round of detection therefore only needs to be started when more informative repairing actions are used. 8.4. Recommending repairing actions The recommendation algorithm computes the most informative repairing actions that are supported by domain knowledge.
We used the recommendation in the Anatomy and ONKI experiments. In almost all cases the recommendation was used. 8.5. User interface For the experiments described in this paper, RepOSE was very responsive and interaction with the user was easy.
The Source and Target set panels seem to be a convenient way to show all possible computed choices for repairing a missing is-a relations with implicit ordering with respect to  X  I missing is-a relations in MA and 10 in NCI-A.
 Further, the visualization of the results of the recommendation algorithm is integrated in the Source and Targets panels. and the usefulness was confirmed in work for the Swedish National Food Agency [26] in which we debugged a toxicology ontology created by the Swedish National Food Agency based on an alignment to MeSH [45]. 8.6. In fl uence of additional ontologies and PRAs in the network the small networks in Bibliography case 1 are sub-networks of the network in Bibliography case 2.
When we compare the results of Bibliography cases 1 and 2, we notice that for 301, 302 and 303 the same missing is-a remaining 9, 8 also appear in case 2. The last missing is-a relation in case 1 (that was found in 101 can be derived by combining knowledge from 304 with knowledge from 101 and 302. The experiment shows thus that debugging ontologies). 9. Related work 9.1. Debugging missing is-a relations
There is not much work on debugging is-a relations in networked ontologies. 9.1.1. Detecting missing is-a relations context of ontology enrichment. Given two pairs of terms between two ontologies which are linked by the same kind of ontologies before starting the actual alignment process.

Detecting missing is-a relations may be seen as a special case of detecting relations. There is much work on finding as supplement to the domain knowledge or for repairing. 9.1.2. Repairing missing is-a relations structural repair. It essentially means that after removing redundancy the least information-preferred ( small ontologies. 9.2. Other relevant topics 9.2.1. Debugging semantic defects
Most of the work in ontology debugging has addressed semantic defects and aims at identifying and removing logical there is little support for ontologies connected by mappings [20].

In [54] minimal sets of axioms are identified which need to be removed to render an ontology coherent. In [35,34,33] presented in [56]. Complexity issues are discussed in [50].
 some of the mappings to restore consistency. The solutions are often based on the computation of minimal unsatisfiability-preserving sets or minimal conflict sets. The work in [52] further characterizes the problem as mapping revision. Another was used for the alignment and debugging of ontologies for the Swedish National Food Agency [26]. where the intuition is that an ontology can import knowledge from another ontology. The mappings are often equivalence and
This means that knowledge propagation only occurs in one direction. Regarding the detection of semantic defects, within a of ontologies (e.g. [55]). 9.2.2. Debugging modeling defects be detected by checking these properties. In [59] shallow semantic representations are constructed for the concepts in the the hypotheses were confirmed in the tests. The authors claim that the proposed hypotheses can be used for detection of inappropriate is-a relations.

In [36] two reasoning services are proposed for detecting flaws in OWL property expressions. The defects relate to the property is-a hierarchy, domain and range axioms and property chains. 9.2.3. Logic-based approaches within the same ontology that are not derivable from the ontology network. Further, preference irredundancy criterion that is often used in logic-based abduction.
 would be repaired by the combination of new is-a relations ( a , x
For our application, this is, however, a reasonable assumption. Further, we do not require minimality according to during the generation, but do an additional check when it is needed. A consequence of these choices is that our algorithms perform well in practice and response times in RepOSE are low.
 knowledge base KB in language L ,concepts C i , D i for 1 is coherent. Then a solution to the generalized TBox abduction problem for ( KB ,{( C { G j  X  H j | j  X  n } of TBox assertions in L concepts and we only consider is-a relations between those concepts. The (C solution S GT is a structural repair.

There is very few work related to TBox abduction. The work in [24] proposes an automata-based approach to TBox abduction which is then solved with automata-based methods. A PTIME algorithm is proposed for the language EL . belief expansion. It accommodates the structural repair as a new piece of information, and adds it to the ontology without approach does not introduce logical contradictions. 9.2.4. Ontology engineering methods for modular ontology development (e.g. [49]).

According to [18] a methodology should define the activities management (which includes a feasibility study pre-development), development (which includes domain analysis, conceptualization and implementation) and support (which includes maintenance and use of the ontology  X  post-development). Several of the methodologies are developed with a would benefit from using an ontology. Most of the methodologies cover the development process, although the actual questions. In the conceptualization step domain terms are identified and possibly definitions from other ontologies can be They lack some project management processes, ontology development-oriented processes or integral processes. we propose in this paper would take place after the representation of the ontology in a formal knowledge representation language. We would argue that debugging should be an iterative and integrated part of the implementation step of the development phase.

The study in [57] collected data using interviews and questionnaires from 148 ontology engineering projects from industry and academia in different areas such as information systems, commerce, multimedia and tourism. They found that the larger projects used a methodology and among those METHONTOLOGY was most popular. Two of the major findings in the study were efficiency gains. The work in this paper addresses these concerns at their core. 10. Conclusion
Semantically-enabled applications require high-quality ontologies and a key step towards this is the debugging of the ontology engineering and become a natural part of steps in ontology engineering methodologies.
We also implemented a system and described and discussed experiments using ontologies from the OAEI and ONKI. We have our recommendation algorithm recommends among these the most informative that are supported by domain knowledge. Our
The approach and system have, however, some limitations which require further work. Our detection algorithm is based on the knowledge inherent in the network, but, there are methods that use external knowledge. As these approaches are ontologies or PRAs and lead to the detection and repairing of semantic defects. We would also need to investigate possible relations as well as the possibility for users to add their manually detected missing is-a relations.
Further, we are interested in investigating the following issues. One issue is to deal with ontologies represented in more expressive representation languages. The techniques described in this paper may be partly used for these ontologies, but a ranking approach should reflect this.
 Acknowledgments
We thank the reviewers for their insightful comments and suggestions and Rajaram Kaliyaperumal for help with the ONKI the Swedish Research Council (VR) and the Swedish e-Science Research Centre (SeRC). Availability The system described in this paper is available for download at http://www.ida.liu.se/~patla/research/RepOSE/. Appendix A
References
