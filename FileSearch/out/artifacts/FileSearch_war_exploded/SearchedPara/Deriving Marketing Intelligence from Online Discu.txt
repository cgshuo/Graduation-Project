 Weblogs and message boards provide online forums for dis-cussion that record the voice of the public. Woven into this mass of discussion is a wide range of opinion and commen-tary about consumer products. This presents an opportu-nity for companies to understand and respond to the con-sumer by analyzing this unsolicited feedback. Given the volume, format and content of the data, the appropriate ap-proach to understand this data is to use large-scale web and text data mining technologies.

This paper argues that applications for mining large vol-umes of textual data for marketing intelligence should pro-vide two key elements: a suite of powerful mining and visual-ization technologies and an interactive analysis environment which allows for rapid generation and testing of hypotheses. This paper presents such a system that gathers and anno-tates online discussion relating to consumer products using a wide variety of state-of-the-art techniques, including crawl-ing, wrapping, search, text classification and computational linguistics. Marketing intelligence is derived through an in-teractive analysis framework uniquely configured to leverage the connectivity and content of annotated online discussion. Categories and Subject Descriptors: H.3.3: Informa-tion Search and Retrieval General Terms: Algorithms, Experimentation Keywords: text mining, content systems, computational linguistics, machine learning, information retrieval
The Internet has enabled many online forms of conversa-tion and communication, such as e-mail, chat groups, news-groups, message boards, and, more recently, weblogs. Some channels are private, some public, some mixed. In many ar-eas, there is a wealth of consumer information to be tapped from online public communications. For example, there are message boards devoted to a specific gaming platform, news-groups centered around a particular make and model of mo-torcycle, and weblogs devoted to a new drug on the market. Both the consumer and the corporation can benefit if on-line consumer sentiment is attended to: the consumer has a voice to which the corporation can respond, both on the personal level and on the product design level.

This paper describes an end-to-end commercial system that is used to support a number of marketing intelligence and business intelligence applications. In short, we describe a mature system which leverages online data to help make informed and timely decisions with respect to brands, prod-ucts and strategies in the corporate space. This system pro-cesses online content for entities interested in tracking the opinion of the online public (often as a proxy for the gen-eral public). The applications that this data is put to range from:
Early implementations of these applications in the indus-try were enabled by sample-and-analyze systems where a human analyst read a tiny fraction of the data available and made observations and recommendations. As these ap-proaches can not handle realistically-sized data sets, modern approaches are built on technology solutions which use com-prehensive crawling, text mining, classification and other data driven methods to describe the opinion reported in on-line data.

Other systems described in research literature have also focused on aggregating knowledge from the web. The We-bKB project [9] was an early effort to automatically extract factual information about computer science research depart-ments, people, and research projects using departmental web sites. Their emphasis was on the application of machine learning techniques to the extraction of data and facts, with-out emphasis placed on the access or understanding of the data. The CiteSeer project [5] extracts information from brand indicated. online research papers. This project emphasizes the col-lection and extraction of information, as well as making the data publicly accessible through a search interface. Our sys-tem goes beyond collection, extraction, and access, and also provides a significant capability to interactively analyze the data to form an understanding of the aggregate expression of knowledge backed by the data. Our work is similar to the Takumi project [20] in providing a system that does anal-ysis over extracted information from text data X  X all center data in their case. Our work emphasizes challenges created by focusing on web data, and the appropriate technologies used to meet these challenges.

The application described here applies, develops and con-tributes to many areas of research. The requirements of the application have directed specific research in the areas of focused crawling and wrapping, active learning, sentiment analysis, phrase discovery, and aggregate metrics. Bringing these technologies together in an application constrained by document type, genre, and language allows us to leverage the promise of text mining for the domain of consumer sen-timent analysis.
This section presents a specific example of how a project can be used to discover marketing intelligence from internet discussion data. As is described in the following sections, a project is configured to collect internet discussion in a target domain, classify the discussion across a number of domain-specific topics (e.g. brand, feature, price) and perform a base analysis of the sentiment regarding combinations of topics. A typical project will analyze anywhere from tens of thou-sands of messages to tens of millions of messages.
The following case study presents such a project in the do-main of handheld computers, including PDAs, Pocket PCs, and Smartphones. Some of the basic questions a brand manager might ask are  X  X hat are people saying about my brand? X  and  X  X hat do people like and dislike about my brand? X . This paper argues that these questions are best answered through interactive analysis of the data. Manual review of a small fraction of the data or simple search and IR techniques over the whole data are generally not compre-hensive or deep enough to quickly provide answers to these basic questions.

Figure 1 shows a screenshot of our interactive analysis tool. One way to analyze messages is through a top-down methodology, that starts with broad aggregate findings about a brand, and then follows through to understand the drivers of those findings. The Comparatives analysis shown is a simple way of breaking down the messages and generating a variety of metrics over each segment. Figure 1 shows all the messages about handhelds broken down by the brand being discussed. The Dell Axim is the most  X  X opular X  brand, as measured by buzz volume, capturing 12% of all discussion about handheld devices. However, by a measure of overall sentiment, the Dell Axim does not do so well. The Polarity column shows a 1-10 score representing the aggregate mea-sure of sentiment about this brand (see Section 4.2). The Axim X  X  score of 3.4 is a relatively low score. As a brand man-ager, you would like to drill down on these high-volume but low-sentiment aggregate measures to understand the drivers of this discussion.

With a few clicks in the application, an analyst can select just the messages saying negative things about the Axim. By analyzing these messages, one can understand drivers of the Polarity metric value. The Phrases tab identifies the dis-tinguishing words and phrases for negative Axim discussion Table 1: The top eight words and phrases for neg-ative comments about the Dell Axim. Words like  X  X OM X ,  X  X ncompatible X  and phrases like  X  X D card X  and  X  X F slot X  are at the top of the list, indicating specific problems people have with the Dell Axim. through a combination of statistical and NLP techniques. Table 1 shows the top eight words and phrases, as calculated by our phrase-finding technology described in Section 4.1. Further drilling down on these words and phrases to the messages containing them reveals, for example, that a num-ber of  X  X D cards X  are  X  X ncompatible X  with the Axim, and that  X  X OM X  updates are needed to make Personal Internet Explorer work correctly on the Axim.

A second way of analyzing data is through a bottom-up methodology. Here, analysis starts with all relevant discus-sion to identify nuggets or clusters of information that can be distilled down through interactive analysis into action-able intelligence. One such technique in our application is a social network analysis. Figure 2 displays the social network for discussion regarding the Dell Axim on one of the pop-ular Pocket PC discussion boards. Each node in the graph is an author, and links between authors are created when authors interact by posting in the same thread. The length of each link connecting two nodes is inversely proportional to the strength of their interaction, determined through the Table 2: Five representative automatically ex-tracted negative sentences about the Dell Axim within a cluster of discussion identified by social net-work analysis. The quotes indicate that the main topic of discussion within the group was the poor quality of the Axim X  X  audio and IR components. frequency of participation in the same threads. Each author is weighted (and displayed by font size) by their author-ity, as determined by their propensity to spark discussions with many interactions. Authors and links can be filtered through threshold selection sliders to allow the analyst to focus in on just the most salient clusters of discussion. Fig-ure 2 shows three such clusters. By selecting just the right-most cluster of messages, the analyst can quickly proceed to the Quotes analysis, which displays sentences with high sen-timent about the selected brand (see Section 3.6). Table 2 shows results of this analysis for negative sentiment about the Axim within that authorial cluster. The quotes clearly show a brand manager that a group of people are unhappy about the audio and IR components of the Dell Axim.
This case study illustrates two key points. First, an in-teractive analysis system can be used to quickly derive mar-keting intelligence from large amounts of online discussion. Second, the integration of many different state-of-the-art technologies are necessary to enable such a system. The remainder of this paper describes the technologies underly-ing the different components of the system.
The case study above illustrates the power of interactive analytics over data collected from online sources. These an-alytics represent an application of a large-scale web enabled system.

The system is comprised of three main components, as shown in Figure 3. The content system crawls the web for weblog, message board and Usenet content and populates internal search indices (as described in Section 3.1). The production system uses a set of queries to retrieve messages from the content stores and applies analyses to the messages, producing a set of tagged messages. These tagged messages form the project data over which interactive analytics are run using the application shown in the previous section.
Discovery and harvesting of message data is the first com-ponent of our system. We have modules for harvesting from Usenet newsgroups, message boards and weblogs. Discov-ery and harvest from Usenet newsgroups is straightforward since the Usenet distribution mechanism makes discovery of newsgroups simple and because Usenet posts are well-defined structures.

On the other hand, both message boards and weblogs pose both discovery and harvesting difficulties. Discovery entails finding message boards and weblogs pertinent to a particular domain. Harvesting consists of extracting mes-sage board posts and weblog posts from semi-structured web pages. The first step in both cases is designing a crawling strategy. The second step entails a kind of reverse engineer-ing for message boards and weblogs to reconstruct message board posts and weblog posts. The solutions devised depend on the data source. Below, we discuss first our approach to crawling and segmenting weblogs and second our approach to crawling and segmenting message boards.
Weblogging has emerged in the past few years as a new grassroots publishing medium. Like electronic mail and the web itself, weblogging has taken off. Recent estimates place the number of active weblogs at over 4 million and doubling in size every 5 months 1 .

The weblogging microcosm has evolved into a distinct form, into a community of publishers. The strong sense of community amongst bloggers distinguishes weblogs from the various forms of online publications such as online journals,  X  X ines and newsletters that flourished in the early days of the web and from traditional media such as newspapers, maga-zines and television. The use of weblogs primarily for pub-lishing, as opposed to discussion, differentiates blogs from other online community forums, such as newsgroups and message boards. Often referred to as the blogosphere, the network of bloggers is a thriving ecosystem, with its own internally driven dynamics.

More recently, marketing groups are becoming aware of the strong influence that highly networked bloggers can have over their readers. The top tier of bloggers have as many readers as regional newspaper columnists. Even more inter-esting to marketers is the middle segment of bloggers who have managed to carve out audiences of hundreds to thou-sands of readers with specific interests.

There is no comprehensive centralized directory of we-blogs. In fact, an opt-in directory would become stale very quickly as the half-life of a weblog is approximately four months 2 . However, one key aspect of weblog authoring soft-ware is that it automatically pings one or more centralized services when the weblog is updated. (In some cases, this feature can be turned off or customized.) We collect the list of recently updated weblogs from these services. These services include the update lists from: blogrolling.com, we-blogs.com, diaryland.com, livejournal.com, xanga.com, blo.gs and myspace.com. From this list of updated weblogs, we can retrieve the weblog page itself. As of 11/2004, we are finding about 300,000 updated weblogs per day.

Our goal is to harvest newly published weblog posts from the updated weblogs. Thus, we have the task of extracting structured data from the semi-structured weblog home page: the title, date, author, permalink and content of each newly published post. We call this task weblog segmentation . We use a model-based approach to segment weblogs into posts. We assume that the format of a weblog is: http://www.sifry.com/alerts/archives/000387.html http://www.perseus.com/blogsurvey/
The title field is optional, and we require that there be at least two entries on the weblog home page.

The first step in segmentation is to recognize the dates in the weblog. This is done using a date extractor. We then sort the dates into groups with equivalent xpaths. Next, we apply a set of heuristics to choose which group corresponds to the dates of the entries for the weblog. For example, the list of dates must be monotonically decreasing; the list of dates must correspond to dates in the current year; the list of dates must conform to a common format.

Once we have segmented the weblog into entries, we next segment each entry into posts. We have several heuristics for finding post boundaries, such as title xpaths. If the al-gorithm is unable to segment the entry into posts, the entire entry is assumed to be one post.

The last step is to attempt to identify a permalink and author for each segmented post. Again, we apply an ordered set of heuristics to identify these.

The success rate of this approach is about 60% with 90% accuracy. That is, we are able to segment about 60% of weblogs into posts, and accuracy rates for the fields of the extracted posts is approximately 90%. Our main sources of error are: (1) failure to extract dates for the weblog (our extractor fails on foreign language dates); (2) parity errors that occur when our model fails to accurately represent the weblog, (e.g. when the title of the entry appears before the date of the entry); and (3) only one entry on the weblog home page.

We complement our approach to model-based segmenta-tion using weblog feeds when available. The weblog feed contains the updated content of the weblog in standardized XML format (different flavors of RSS; Atom). A number of weblog hosting systems, such as livejournal and xanga, auto-matically provide a full-content feed for each hosted weblog. For such weblogs, we automatically use the feed to extract new posts with near 100% accuracy instead of crawling and segmenting the weblog. This allows us to improve our over-all coverage to about 80%.

Overall, our approach to harvesting weblog posts can be summarized as follows: 1. Gather recently updated weblog URLs; 2. Automatically find feed for weblog; 3. If feed is full content, index posts from the feed; 4. Otherwise, apply model-based segmentation approach
Search over this index of weblog posts is publicly available at http://www.blogpulse.com [11].
Message boards are an important communication system for tens of thousands of online communities X  X n fact, for many small online communities, message boards are the pri-mary communication system.

As there is no centralized index of message boards, dis-covery is not trivial. We locate new boards from which to harvest by searching for keyphrases indicative of message boards on Web search engines. We then refine the search using terms indicative of a particular domain, such as auto-motive or gaming. In many cases, our customers also provide a list of message boards to include in harvesting.
We have implemented a system called BoardPulse for har-vesting from online message boards. BoardPulse is built on two technologies X  X eb-site wrapping and intelligent crawl-ing [10]. Wrapping message boards is difficult for two rea-sons. The first issue is site complexity: while message board sites share a common structure, most boards are very com-plex, and many are highly customized. The second issue is one of scale. There are many thousands of different mes-sage board sites, all of which change dynamically. Message board sites cannot be efficiently crawled and indexed with-out detailed understanding of the structure of the site and of the mechanisms used to update the site. Acquiring and maintaining this understanding for each one of thousands of different sites is challenging.

To overcome these problems, BoardPulse exploits certain common properties that hold for most message boards. The typical message board site has a top level page listing a set of forums . Each forum is hyperlinked to a second level: a page (or pages) containing the set of topics for that forum. In turn, each topic links to a third level, the set of postings for the topic. Many large message boards also have a fourth sub-forum level.

Most message boards are also generated by one of a hand-ful of message board software systems. This leads to less regularity than one would expect, however, because widely-used message board software systems are highly customiz-able. This customizability means that we have potentially tens of thousands of wrappers to create and maintain.
To address this issue, we use wrapper learning methods to reduce the cost of developing wrappers [8, 13] and the new technique of cluster wrapping to learn wrappers which apply to multiple message board systems. The wrapper learning system we use was also extended to take advantage of pro-grammatic markers left in the HTML generated by message board software systems. A final property of the wrapper-learning system that we exploited was the transparency of the wrappers it produces: learned wrappers are designed to be human-readable, and can be manually modified (for in-stance to complete a wrapper for a cluster that could not be completely learned).

Another significant problem is how to minimize the im-pact of our spider on the message board servers; since many message boards are run by small communities, they often do not have the resources to allow frequent complete crawls. To address this issue, we have derived wrapper rules that extract not only data values, but also links to extract and enqueue to the spider. (The wrapping systems described in [4, 19] likewise include rules for directed crawling.) We then extended the wrapper-directed spider so that links are added to the spider queue only when two criteria hold: (1) the link matches a rule in the wrapper; and (2) a data item extracted by the wrapper has changed since the last crawl. This enables BoardPulse to perform incremental, directed crawls of message boards. BoardPulse only follows links to forums, topics, and message pages; in addition, BoardPulse only follows a link to a forum if the displayed number of posts to that forum has changed since the last crawl, and only follows a link to a topic if the displayed number of posts to that topic has changed since the last crawl. These incremental crawling strategies all reduce the impact on the board itself.
Our content system indexes hundreds of millions of inter-net messages. For any given project, only a small fraction of these messages are relevant. The combined purpose of search and relevance classification is to select a large portion of relevant messages from the content system while includ-ing only a small fraction of unrelated messages for analysis. The system uses a two-stage approach, combining complex boolean queries to the search engine and a machine learning relevancy classifier trained by active learning.

A well defined boolean query has a high message relevance recall at a tolerably low precision for this stage ( &gt; 10%). Our system allows for six different categories of terms to be specified which are combined to construct the complex boolean query for the search. These include:
All messages retrieved by the search queries are further filtered by a machine learning text classifier. To train this classifier during the configuration process a random sample of messages matching the search query are retrieved. An analyst labels training and testing sets using an active learn-ing process that creates both a bag-of-words classifier and precision/recall performance estimates. The active learning process incorporates a heterogeneous blend of active learn-ing strategies that leverage domain knowledge provided by the analyst through the keyword lists above, as well as tra-ditional active learning strategies for text classification [15, 16, 18].

Typically, the configuration of the queries and the rele-vance component is an iterative process. To this end, the configuration process encourages early exploration of mes-sages and refinement of the search criteria. This helps min-imizes unnecessary decision making by postponing the bulk of message labeling until a satisfactory search precision and recall are achieved. Th active learning is structured to quickly highlight poorly chosen required terms or ones that need fur-ther qualification through the use of confusion terms. Short-cuts are provided which easily enable addition or removal of query terms by selecting text in messages being inspected.
Document analysis is concerned with interpreting an en-coding of a document and deriving a logical structure (e.g. chapter, section, paragraph). The logical structure is gen-erally a graph and most often a tree. Document analysis of discussion messages in web documents presents a num-ber of interesting challenges. First, web pages (i.e. single HTML files) are different in many respects to other encod-ings of documents. Two of the main differences are periph-eral content (e.g. navigation, adverts, branding elements) and distributed content (the document may be logically or physically broken down across many web pages). Second, the document elements (messages) that our system deals with are generally presented in a collection on a single web page. Weblogs present posts as date ordered sequences and message boards collect threads (or parts of threads) in a similar manner. 3
Consequently, our document analysis solution really be-gins in the crawling stage where wrappers (either static mod-els or inferred) are used to segment pages (see Section 3.1). This process navigates sites, removes the peripheral content and segments the web page into post granularity.
 The online messages we analyze exist in a social context. Message boards and Usenet data are posted to forums or groups. They are parts of threads. Some or all of this information is encoded in the document either as explicit meta-data, or as document structure. The explicit meta-data often encodes forum and group information as well as, in the case of Usenet data, link information representing the thread tree. Message boards typically have a less explicit thread structure which can be inferred from the ordering of messages (post time) and the quoted content.

We model the logical structure of a message body as a tree with the following possible node types:
In addition, text blocks are segmented into paragraph blocks and, at a later stage, we segment the paragraphs and other text blocks into sentences where appropriate.
The document analysis system, designed with both effi-ciency and accuracy in mind, follows the explicit tree struc-ture of the logical model -a set of analysis modules accept nodes and produce zero or more children. These analyses
This issue presents a significant challenge to indexing en-gines such as Google that are web-page based and can not deal with sub-page indexing. are run in a cascade, refining the output of previous analy-ses. An executive algorithm controls which analyses are run at which time.

A simpler system could be built with no document anal-ysis, taking the entire text of the document as a single data type. However, the document analysis provides a number of important benefits:
The document analysis system is built on a common frame-work with specialized implementations for different types of document sources, and source-dependent (and indepen-dent) analyses. Preformatted data, such as Usenet, encodes newline information at the object level whereas HTML doc-uments encode it via the meta tags contained in the docu-ment. Specific encoding systems provide a uniform interface to certain views of the documents. For example, we can iter-ate over the lines in a document regardless of the underlying encoding.

Determining the quote structure requires access to the meta-tags for HTML documents. Usenet data, on the other hand, requires recognition of distinguished symbols ( &gt; , | , etc.) and an algorithm to disentangle multiple re-wrappings of lines withing the context of these symbols.

Signatures are analyzed in two ways. The simple analy-ses looks for signature demarcations at the bottom of text blocks: generally ASCII-art lines. A more sophisticated ap-proach captures signatures that do not follow this type of pattern. We take a set of documents and look for repeated content across messages at the end of messages or quoted text blocks (cf [6]). In this way, we develop a database of unique signature patterns and are able to tag a signa-ture without explicit boundary markers if it occurs multiple times in the data.
In a marketing intelligence application of data mining, there are typically topics of discussion in the data that war-rant explicit tracking and identification. The most prevalent type of topics are brand-related, i.e. one topic for each prod-uct or brand being tracked, such as the Dell Axim . To fa-cilitate this taxonomic requirement, analysts compose well-written hand-built rules to identify these types of topics. These rules are based on words and phrases, and allow for stemming, synonymy, windowing, and context-sensitivity based on document analysis.

From one point of view, these brands are entities occur-ring in the text, and it might be considered that entity ex-traction would be the most appropriate technology to apply. However, to facilitate tracking and identification, extracted entities must be normalized to a set of topics. For example, Axim , Dell Axim , and the Dell PDA should all fall into the Dell Axim topic. An approach following that of [7] could be established to automatically normalize entities. However, since our customers typically know exactly which brands they want to monitor, pre-building the rules in this case is both more accurate and the performance is more predictable and can be easily measured.

In addition to brand-like topics defined through rules, it X  X  often the case that other topics are more accurately recog-nized from a complex language expression that is not eas-ily captured by a rule. For example, topics such as Cus-tomer Service are not so simply captured by sets of words, phrases and rules. Thus, we often approach topic classifica-tion with machine learning techniques. The provided classi-fier is trained with machine learning techniques from a col-lection of documents that have been hand-labeled with the binary relation of topicality. The hand-labeling by the ana-lysts is performed using an active learning framework (sim-ilar to Section 3.2). The underlying classifier is a variant of the Winnow classifier [17], an online learning algorithm that finds a linear separator between the class of documents that are topical and the class of documents that are irrelevant. Documents are modeled with the standard bag-of-words rep-resentation that discards the ordering of words and notices only whether or not a word occurs in a document. Empiri-cally, we have found Winnow to be a very effective document classification algorithm, rivaling the performance of Support Vector Machines [14] and k-Nearest Neighbor [26], two other state-of-the-art text classification algorithms. This machine learning classification and application is described more fully in [12].
The detection of sentiment, or polarity, in text is an area of research gaining considerable momentum ([24]). Broadly speaking there are three main approaches described in the current literature. Firstly, methods which build on docu-ment classification methods [23]. Here the features used by the system are features of the text (unigram, bigrams, etc.) and supervised machine learning algorithms are trained on some collection of labeled data. Secondly, there are those methods which use linguistic analysis of some type [21]. These approaches often employ a lexicon of important terms and shallow parsing methods. Thirdly, there are those ap-proaches which aim to use aggregate social cues from the context within which documents are published [2]. The ap-proach described here is of the second type.

Polarity analysis (as we will refer to this task) is concerned with determining whether or not a piece of text describes some topic favorably or unfavorably. For example the game was incredible is a favorable description, the car steers shakily is an unfavorable one. In many contexts there are two types of polarity. Firstly, expressions which refer to emotional state (e.g. I hated that film ). Secondly, ex-pressions which refer to a state of affairs that is generally accepted as favorable or unfavorable (e.g. The tire blew out on me ). This distinction is made as the majority of work on sentiment refers to the class of emotive expressions, and not those expressions that may be termed objective, but which have a generally accepted negative orientation, such as The computer crashed .

There are many syntactic, semantic and discourse level constraints which effect the interpretation of polarity, in-cluding:
The polarity module consists of the following elements:
In developing the POS tagger, we encountered two signif-icant issues. Firstly, the standard training sets used in the literature for training do not cover the online text or doc-ument genres that we are working with. Most importantly, for terms with multiple possible tags, the distribution of term/tag pairs is often quite different. like appears in the WSJ most often as a preposition. However, in our data like appears mostly as a verb. Certain senses of this verb, of course, carry polar meaning. To deal with this problem we had to create our own auxiliary data to train the tagger.
The second problem, and again, one which distinguishes our tagger from the standard paradigm, is our internal model of the object data. The standard paradigm is to accept a string, partition this string into tokens (which we might call words) and tag the words. However, in the genre of text that we are dealing with, this model is not suitable. For ex-ample, in the segment ill buy a new one there is no single tag that can be applied to the token ill . This token can-not be split arbitrarily (into i and ll ) due to the ambiguity with that token as a single word (the adjective indicating poor health). Consequently, the model of text that we work with considers the text layer as a signal generated by a se-quence of words. Our goal is to tag this underlying sequence of words, not a partitioning of the text generated from those words by a tokenizer. We use hand crafted rules to recover the words and are currently formalizing this approach. The shallow parser we use is a cascade of transducers. Effectively, each cascade may build internal structure. The structure built is similar to a phrase marker, though is not constrained to capture grammatical structure per se ([1]).
Once this approximate grammatical structure is derived, the semantics of the expression is computed in a bottom up compositional manner resulting in a polarity feature for the span of text. The features and rule application for polarity extraction is described in full detail in [22].
Having each message tagged according to the topics and polarity identified within the message allows for some types of analysis. However, a message-level tagging does not allow any conclusions to be drawn about the intersections of topics and sentiment. For example, a message that is positive and contains the topics of Dell Axim and Display does not nec-essarily say anything positive about Dell Axim X  X  display. To facilitate this, a further analysis of fact extraction is layered on top of the sentiment and topic analysis to understand at a finer level the expressions made within a message.
In previous work [12] we showed that in the domain of online message discussion, intersecting sentiment with topic classifiers at the sentence level provides precision around 65%. We extend this same approach to intersections of sen-timent with multiple topics at a time. However, relying on message intersection provides fairly low recall. To increase this recall, we use simple resolution techniques to associate brand-like topics (e.g. Dell Axim ) with topics describing features of brands (e.g. Customer Service or Peripherals ). For example, a brand can be referenced in the Subject line of a blog, and feature-like topics mentioned in the body of the blog resolve back to the brand topics in the subject line when other brands are not mentioned in the body. In this way, we identify facts that can be thought of as triples of brands, their (optional) features, and the (optional) polarity of the authorial expression. Each fact is backed by a seg-ment of text (a sentence or a paragraph) that can be used for finer-grained analysis during interactive use of the system.
Fact extraction is the culmination of the content system and the production system configured for a specific domain. Retrieved relevant messages are tagged with topics and then analyzed for sentiment and combination of brand topics with other topics. At this point, these extracted facts could be exported to a traditional data mining system. However, since each fact is backed by a segment of text, advanced text data mining algorithms are more appropriate for analysis. The case study in Section 2 gave some examples of specific text analyses that led to marketing intelligence. The next section describes some of these technologies in more detail.
We have designed our analysis tool around two simple concepts: data selection and data viewing. On top of this, we provide a powerful pervasive capability: any view offers standard mechanisms to further refine the data selection -drill-down. For example, when viewing a message we can highlight a word and click through. This will segment the data to include only those messages that contain that word. This principle provides a key interface strategy in the battle against complexity: predictable and intuitive mechanisms available through consistent interactions at any time.
The data selection mechanism (slicing) essentially builds a tree of filters. These filters (e.g. relevance, topic, phrase, etc.) are applied in sequence resulting in a current data set of facts and messages. Forward and backwards buttons supply browsing capabilities similar to a web browser and a history panel provides the complete data selection history.
The currently selected set of facts and messages can be ap-plied to a variety of data exploration and analyses. Some of these are straightforward, such as keyword-in-context, and full display of all messages or facts. Others are reminis-cent of traditional data analysis, such time series analysis. Others, described in this section, leverage the unique text characteristics of the data.
Suppose we have identified that a certain product has a lot of negative comments associated with it, and would like to quickly know what issues people are mentioning in those messages. When the volume of the target set of messages is large, browsing messages is not an efficient way to under-stand the contents of the messages.

Phrase finding, which enables the user to identify key con-cepts by browsing a list of automatically extracted phrases, is a useful tool for such situations. There are three types of data-oriented phrase finding capabilities in the system: 1. Given a set of messages, find keyphrases which are 2. Given two sets of messages, find the set of keyphrases 3. Given a phrase and surrounding context from a set
One of the challenges in extracting an informative set of phrases is that a frequent word or phrase is not necessar-ily a good keyphrase. If we simply extract frequent words or phrases, you end up with function words or idiomatic phrases. To capture informativeness, we make use of the relationship between a foreground and a background corpus.
The target document set from which keyphrases are ex-tracted is called the foreground corpus. The document set to which this target set is compared is called the background corpus. Examples of foreground and background corpora in-clude: a web site of a company and web data in general; a newsgroup and the whole Usenet archive; and research pa-pers of a certain conference and research papers in general.
For our example of extracting keyphrases in Table 1, the background corpus is the set of messages about the Axim and the foreground corpus is the paragraphs in these mes-sages having negative polarity about the Axim. Our system enables us to quickly set both foreground and background corpora simply by double-clicking a table row, selecting a time range, or selecting a cluster in a social network graph.
The collocation extraction algorithm also uses the fore-ground and background corpus using the local contexts in which the target phrase appears as the foreground corpus. In the workbench, the collocation extraction mechanism is integrated into the Keyword In Context (KWIC) analysis. This enables the user to select the width of the target con-text interactively and try various collocation metrics.
A phrase finder is typically a pipeline of phrase finder com-ponents. A phrase finder component takes a foreground cor-pus and optionally a background corpus and/or a list of seed phrases, and returns a list of phrases together with an asso-ciated score for each phrase. A seeded phrase finder compo-nent may be implemented to act as filters and rescorers, as well as to provide methods to extend phrases in phrase list or expand the phrase list in some way. The following is the typical pipeline we use to extract key noun phrases: 1. A KeyBigramFinder , which takes foreground and 2. An AprioriPhraseExpander , which takes the top 3. A ConstituentFilter is used when we want to ex-
The resulting phrase list is sorted by either document fre-quency or by an informativeness score and presented as the results of the analysis.

Efficiency for phrase finding is very important, since re-sults are computed in real-time during interactive analysis. The backing data structure to facilitate efficient phrase find-ing we call a corpus. A corpus is a collection of tokenized messages, which is derived from the result of the document analysis step described in Section 3.3 by applying paragraph and sentence segmenter, tokenizer, then applying part-of-speech tagger over the resulting token sequence. After up-per/lower case is normalized, the token is looked up in a symbol dictionary and a tokenized message is represented as a sequence of integers. Source information of a token such as document analysis result (e.g. within a quoted text or signa-ture block), original case information, sentence/paragraph boundaries, and part-of-speech tags, are stored as a set of annotations into the corpus. This enables one to extract phrases only from unquoted text and to use part-of-speech information for extracting phrases, for example.

An inverted index is also created for each corpus, which returns document IDs and offset positions a word or phrase occurs. This allows phrase finders to inspect the corpus-wide nature of phrase candidates quickly.
To facilitate top-down exploration of data, a number of metrics have been created that provide a high-level sum-mary of the relevant online discussion across a number of dimensions. The key base metrics we provide are:
These metrics serve two purposes. First, they give a starting point for top-down exploration. Second, they pro-vide dashboard-style summary statistics that can be dis-seminated within an organization, tracked over time, and monitored for improvement or directionality.
Online discussion, in the form of blogs and boards, rep-resents a valuable opportunity for many types of analyses. This paper has described an end-to-end system that gathers specific types of online content and delivers analytics based on classification, NLP, phrase finding and other mining tech-nologies in a marketing intelligence application.
The analysis system allows a user to rapidly characterize the data and drill down to discover and validate specific is-sues. The system delivers both qualitative and quantitative accounts of features derived from online messages. [1] S. Abney. Partial parsing via finite-state cascades. In [2] R. Agrawal, S. Rajagopalan, R. Srikant, and Y. Xu. [3] R. Agrawal and R. Srikant. Fast algorithms for mining [4] R. Baumgartner, S. Flesca, and G. Gottlob.
 [5] K. D. Bollacker, S. Lawrence, and C. L. Giles. [6] H. Chen, J. Hu, and R. W. Sproat. Integrating [7] W. W. Cohen. Data integration using similarity joins [8] W. W. Cohen, L. S. Jensen, and M. Hurst. A flexible [9] M. Craven, D. DiPasquo, D. Freitag, A. McCallum, [10] N. Glance and W. Cohen. BoardViewer: Meta-search [11] N. Glance, M. Hurst, and T. Tomokiyo. BlogPulse: [12] M. Hurst and K. Nigam. Retrieving topical sentiments [13] L. S. Jensen and W. Cohen. Grouping extracted fields. [14] T. Joachims. Text categorization with support vector [15] D. D. Lewis and J. Catlett. Heterogeneous uncertainty [16] D. D. Lewis and W. A. Gale. A sequential algorithm [17] N. Littlestone. Learning quickly when irrelevant [18] A. McCallum and K. Nigam. Employing EM in [19] J. Myllymaki. Effective web data extraction with [20] T. Nasukawa, M. Morohashi, and T. Nagano.
 [21] T. Nasukawa and J. Yi. Sentiment analysis: [22] K. Nigam and M. Hurst. Towards a robust metric of [23] B. Pang, L. Lee, and S. Vaithyanathan. Thumbs up? [24] J. G. Shanahan, Y. Qu, and J. Weibe, editors. [25] T. Tomokiyo and M. Hurst. A language model [26] Y. Yang. An evaluation of statistical approaches to
