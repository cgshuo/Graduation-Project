 As Weiser noted,  X  X he most profound technologies are those that disappear. They weave themselves into the fabric of everyday life until they are indistin-guishable from it. X  X 18], to realize this invisible and transparent characteristic of the technologies[12], the technologies have to be aware of the users X  situation and context[1]. Context-aware computing is to make information appliances and environments more user-friendly, flexible, and adaptable for the users by captur-ing, representing, and processing context information (e.g. location, time, and other persons nearby)[3].

Our company, as office equipment producer, offers information appliances, for example, copiers, printers, and digital cameras. Information technology capabil-ities of these appliances are gradually extending. Taking a copier as an example, it is no more just a copier (e.g. a machine that makes copies of printed or graphic matter). It has ability to connect to the network, and it involves much sophisti-cated services like a document management system, a user logging system, and so on. Integration and combination of various functions of information appliances would develop information services both qu alitatively and quantitatively. These multi-functional information appliances would be located everywhere in upcom-ing ubiquitous computing situation. Increased mobility of the users, devices, and applications suggests that information services should adapt themselves to the activities of the users based on knowledge of both location and the task contexts of the users.

Context-aware computing enables the users to seamlessly manipulate infor-mation through the relevant contexts, how ever, it is problematic for application developers to search for the particular contexts they could use, and to determine how reliable the contexts are and how the contexts are depending on each other.
Also, the capabilities of information appliances need to be invisible and trans-parent for the users, however, they also need physical and tangible user interface where they could interact with their users[7]. Beyond making technologies in-visible and transparent, interaction techniques that physically, effortlessly, and uniformly elicits mix-and-match functional capabilities to manipulate informa-tion would be highly expected.
 This paper describes a ser vice-oriented framework o f context-aware systems. We propose a XML-based context information syndication format called  X  X on-text summary X , and its browsing web-base d service called  X  X ontext gallery X . We also propose several novel interactive systems to facilitate information sharing among the multiple devices by providing physically and location-aware opera-tion. We then discuss how each application system loosely coupled with each other through context information on our framework. 2.1 Service-Oriented Framework for Context-Aware Services No application should be alone. To develop capabilities of information technolo-gies and to leverage variety of context data by combining multiple applications, an information architectur e needs to be more net-centric than platform-centric. We think that the most remarkable feature to differentiate context-aware com-puting and other computing styles is the merit of scale in services. A considerable degree of services has to be provided both quantitatively and qualitatively for the particular context-aware enviro nment to bring certain advantages to the end-users. We have been practicing a ser vice-oriented architecture to flexibly and effectively integrate variety of context -aware services. A service-oriented ar-chitecture is essentially a collection of s ervices, and these s ervices communicate with each other. The communication can i nvolve either simple data passing or it could involve two or more servi ces coordinating some activity.

Fig. 1 shows a design of our service-oriented framework model for building context-aware systems. Every service is basically composed of three function lay-ers: (a) to capture some specific contexts , (b) to process captured context, and (c) to represent them by certain applications. Every service can flexibly com-municate with each other in each layer , for example, (d) a context processing layer of service 2 can utilize captured context data of service 1, or (e) a partic-ular application in service 2 can utilize context information processed in service 1. Single service can have multiple applications (f), for example, a particular location-based service can have a museum navigation guide and a reminder sys-tem at the same time. One of the particular kind of service is a database repos-itory for managing context data and processed information. Multiple services can asynchronously share context data a nd information via context repository service (g).

We designed requisite minimum interface specifications to support application-to-application communication. We let the a pplication developers to provide exter-nal interfaces for accessing raw captured context layer and/or context processing layer using standard protocols (XML/SO AP). We also accepted rather legacy pro-tocols (CGI, FTP, SMTP, and simple socket) for the devices which are not ready for the advanced web-based services. 2.2 Context Summary and Context Gallery It is problematic for application developers to look for the particular contexts that other applications offer, and to determine reliability and dependency of con-texts. We provide a notion called  X  X ontext summary X  which facilitates an appli-cation to share context information with other applications. A context summary is a XML-based format extending RSS (RDF Site Summary)[13] format that allows the syndication of lists of contexts and developmental process of contexts that each application manages. RSS is a family of XML file formats for web syndication mostly used by news websites and weblogs. We let each application developer to manually describe a context summary format for their applications. From this format, all the other developers can estimate reliability and accuracy of each context information that the application offers.

Fig. 2 shows an excerpt result of contex t summary request that an application name  X  X n/Out Board X  generated a context named  X  X resence of the user X  from the context  X  X serid X  and  X  X vg. rfid signal level X  of external application  X  X oca-tion Capture X . In this way, application developers can presume reliability and accuracy of context information that they are going to leverage.

A Context Gallery is an web-based aggregator software which collects context summary information from various applications and provides them in a simple web form. Application developers could browse a list of context information that each application provides and dependency among contexts which could further be utilized for deciding reliability and accuracy of contexts. It also notifies the updates of contexts. Thereby, efficiency and reusability of contexts for developers could be enhanced. A variety of research efforts have explored physical interaction to seamlessly incorporate both digital and physical information [6,7,10,11,14,17]. These ap-proaches show promise of physical and tangible UIs in particular application areas, however, building physical and tangible UI systems are problematic be-cause a large amount of effort in developing physical and tangible input technique is needed by designers and developers.

Toolkit and platform approach can reduce costs related to the development of UI prototype systems for designers and developers[8]. The Context Toolkit focuses on separating context sensing from context use and making context-aware application easier to develop[15]. It consists of three different types of components, which are widgets, servers and interpreters. Papier-Mache aims to provide a interactive toolkit for building tangible user interfaces(TUI)[9]. It highly abstracts technologies, for exampl e, computer vision, e lectronic tags, and bar-codes, that TUI application designers have to work with. It also facilitates portability of application systems. Also, many researches on multi-device user interface platforms are aiming to allow a user to interact using various kinds of computers including traditional office desktop, laptop, palmtop, PDA with or without keyboards, and mobile telephone[16]. These approaches provide different views of the same information and coordinate the services available to users from different computing platforms. Toolkit approaches enhance efficiency, reusability and portability of UI systems, however, considerable research and development efforts may need to apply these techniques as practical services that synergize a variety of applications. Platform approaches interconnect various applications to organize them as a cohesive service, however, it is problematic to cover a broad range of application domains from the initial designing stage.

Providing variety of interactive applications are not enough to realize real ubiquitous computing situation. To realize such situation, applications should be interconnected each other, however, toolkit and platform approaches have difficulty in covering a broad range of application domains. We think that a service-oriented architecture should fit in well to our approach which is to flexibly design and interconnect application systems.

Service-oriented middleware for build ing context-aware services has been proposed[4]. It provides a formal context model based on ontology using Web On-tology Language. Our approach is not focusing on describing general hierarchy of semantic concept of contexts in particular application domain. Our approach is basically focusing on providing an essential key information for application developers to estimate reliability, accuracy and dependency of context informa-tion, and to facilitate developers to introduce context information to build into their applications. We also aim to provide a practical way of describing con-text information for developers rather than just enhancing descriptive power of context model. We have been developing a variety of application systems that leverage context information. Some of these applications are loosely coupled with each other by context information. In this section, we introduce part of our application systems. 4.1 Sneaker Ubiquitous computing pro mises the constant access t o information and com-putational capabilities, however, information related to our specific work are generally deconcentrated by each application sub-system (e.g. e-mail, word pro-cessor, web browser, groupware, and so on). The goal of the  X  X neaker X  system is to provide an interactive software to be able to navigate hypertext relationships between user X  X  documents and context inf ormation(Fig. 3). The system monitors and collects information manipulated by the user, and the system automatically categorize them by correlation of the context information extracted from them. A family of information which are strongly associated with is represented in a visual object( X  X ask X ). The user can effo rtlessly access to the information that are relevant each other.
 4.2 In/Out Board One of the common and potential location-aware application for office work environment is an in/out board. We developed a simple web-based in/out board which could share location, text messages, and digital documents among multiple users (Fig. 4). In our lab, each lab mem ber carries active RFID tag for user identification. More than twenty RFID reader devices are mounted every rooms where we frequently use. Whenever we come close to the particular place, the reader device recognizes the ID of tags and sends to the server. It also handles information like short text messages, digitally captured documents, schedule, and list of recent shared documents that are relevant to each user. 4.3 Coin  X  X oin X  system facilitates information sharing among multiple devices by pro-viding physically-aware operation(Fig. 5). Using coin-shaped small RFID tags, the user can transfer information from one device to another by physical and tangible operation ( X  X rom this to that X ). Software agent running on an informa-tion appliance recognizes the operation of the user, and it determines what the user is performing and focusing on that device. When the user put a tag close to the device, the system associate the tag ID with the task information that the user is performing on the device, an dsendthoseinformationtotheserver through the network. When the user put that tag close to another device, the stored information is downloaded from the server and would be activate that device according to the type of the information.

For example, the user can transfer scanned image from the scanner appliance to the PC just by putting the tag closer to the scanner and then to his or her PC, or the user can process binarization and resize of digitally captured color image data just by hopping to the  X  X inarization X  device and to the  X  X esize X  device. 4.4 Position Messenger We developed a location-aware mobile system that could represent information that are relevant to the user X  X  contexts (e .g. location, time, other persons nearby, and scheduled events). While the user carries a PDA with an active RFID tag, the system reminds and recommends information when the user satisfies conditions of contexts associated with the particular locale.

A basic user interface composed of layout maps of building floors, and the user can easily drag and drop documents on the point on the map where he or she wants to associate information with. The user can also define conditions like when or who is nearby to elicit and represent information which was associated with the particular locale.
 4.5 Bookmark Everything  X  X ookmark Everything X  system can give marks, scores and comments to what-ever information the user is browsing on his or her computer screen. Bookmarked information can be utilized as a personal reminder or can be shared as recom-mendation for other users.

A software agent running on the user X  X  PC monitors and captures what the user is performing and browsing on the computer window screen, for example, directory paths of the documents, URLs, titles of the application window screens, mouse events, keyboard events, and so on. As the user hold a special keyboard command down, the software agent pops up a dialog window and the user can give scores or put comments for the current information that the user is browsing, and it sends captured data to the server system. 4.6 Snichin A  X  X nichin X  is a software agent (chat-bot) that could interactively browse in-formation of other application systems. For example, the user can retrieve a location of the particular user by chat up to the agent character in the text command. The system is connected to the internet that the user can look up a on-line dictionary, breaking news, and so on. The system also has a capability of reading RSS feeds from various websites that it could incorporate updates of relevant websites into the topic for impromptu chatting. 4.7 Location Capture A  X  X ocation Capture X  system is a simpl e networked server software to manage information of RFID tags. A person wears an active RFID tag, and the system collects and manages information of the t ag when he or she entered certain areas. Information included in the tag are, for example, user-ID, user name, location name, RFID reader name, and level of signal. In this section, we discuss how the applications we introduced here are loosely coupled with each other on our framework.

Our project was two years project and i t consisted of six researchers taking very agile project management approach[5] in order to develop numbers of ap-plication systems in a short span of time. Instead of making strict development plan before starting our project, we encouraged individual ideas and develop-ment style to get advantage of scale in numbers of context-aware application systems. Alternatively, we set approximate research goals for each project mem-ber, and we made a developing guidelines that each application system has to syndicate its own context summary information. We also made a policy for each project member to release his/her applic ation systems among project members for trial operation when the systems are almost completed in development and ready to use.
As the phase of development proceeds, several application systems has been released for trial use. Some application systems would be judged to be practi-cal and continually used, on the other hand, some application systems are left unused. From iterative improvement and trial use of application systems, each project members would be able to experien ce the advantages and robustness of the systems that implies the reliability and accuracy of each context information the system contains. If some researcher decide to develop certain application system, he/she could browse context gallery system to forage through context information which had been created by prior releas ed systems for latter development.
We analyzed how part of our application systems introduced here are loosely coupled with each other on our framew ork. We collected syndicated context summary information from each application system, and analyzed the correla-tion between each contexts on the context gallery system. Table 1 shows a cross-tabulation of recipient of context information by provider of context in-formation. This table is similar to the design structure matrix[2], and it shows relationships and interdependencies among context information each application system contains. Note if particular application provides or utilizes particular context information by itself, it would be mapped in the corresponding diagonal element (gray areas in the table).

From this table, we can assume the chara cteristics of each application that whether particular application tends to provide context information for the oth-ers, or it tend to leverage context information provided by the others. For ex-ample, application (g), a service for managing user RFID tags, provides user ID and location information for other applications, meanwhile application (d) mainly leverages context information provided by other applications like (a), (b), (c) and (g).

Each application leverages particular context information of other applica-tions by various factors including credibility, accuracy, accessibility, and rel-evancy. For example, application (f) us es location information of (c), while application (c) uses location information of (g). Application (g) manages raw context information, for example, user-I D, location(RFID reader device name), and RFID signal level, while application (c) processes those raw context informa-tion from (g) to calculate higher abstract context information, for example, legal name of the users, specific location name, and so on. Here in our framework, ap-plication (f) could flexibly use already processed abstract context information of application (c) that every application cou ld flexibly and efficiently reuse context information resource and computational power.

We do see large potential in automatically and indirectly inferring contexts from other contexts by reasoning technique or natural language processing tech-nique. However, over two years of our exper iences of development and sustainable utilization of applications, we think that contexts whose dependency are hidden from developers and end users have difficulty in getting reliability for practical use. We believe that our framework could facilitate developing context-aware applications which is to provide information that developers and end users can estimate reliability and accuracy of contexts by browsing the dependency among them.
 In this paper, we proposed the service-oriented framework of context-aware sys-tems which facilitates the flexible interconnection among applications through context information. We also proposed a XML-based context information syn-dication format called  X  X ontext summary X , and its web-browsing service called  X  X ontext gallery X . We demonstrated part of our prototype systems leveraging various context information, and discussed how these applications are loosely interconnected with each other by contexts, and how our framework facilitated developing context-aware applications.

We are currently specifying the requirement of context summary format through the practical operation of the system. Our future work would be to develop support tool for describing context summary, and to evaluate how our framework facilitates the use and reuse of context information for developers.
