 Building a federated search engine based on a large number existing web search engines is a challenge: implementing the programming interface (API) for each search engine is an exacting and time-consuming job. In this demonstration we present SearchResultFinder, a browser plugin which speeds up determining reusable XPaths for extracting search result items from HTML search result pages. Based on a single search result page, the tool presents a ranked list of can-didate extraction XPaths and allows highlighting to view the extraction result. An evaluation with 148 web search engines shows that in 90% of the cases a correct XPath is suggested.
 H.2.8 [ Database applications ]: Data mining; I.5.4 [ Pat-tern Recognition ]: Applications X  Text processing ; H.3.5 [ Information Storage and Retrieval ]: Online Informa-tion Services X  Web-based services Web extraction, Scraper, Wrapper, Search result extraction
Federated search engines combine the power of multiple engines in one: based on the user query the most appro-priate resources (search engines) are queried and their re-sults are merged into a single view. The search results from these resources have to be obtained in a machine readable way so they can be combined in a uniform view. Some resources provide an application programming inter-face (API) to achieve this, or provide their search results in commonly used syndication formats such as Atom and RSS. The OpenSearch 1 project has proposed standardized http://www.opensearch.org formats to exchange search results, but has seen only lim-ited adoption. As a result, the only way to obtain machine readable results from these search engines is to extract or scrape them from the generated HTML.

In this demonstration we present a browser plugin which aids search result scraping. Based on a single (currently viewed) search result page, SearchResultFinder returns a ranked list of XPath expressions which can be used to ex-tract results from pages based on the same template. XPath is a query language to select nodes from XML documents, or in this case, select nodes from the document object tree parsed from the HTML page.
 We first describe related systems and their shortcomings. Then we briefly describe the algorithm to extract and rank XPaths and the operation of the plugin. We describe an evaluation on 148 web search engines, and round up with a conclusion.
Related work can be found in the area of web informa-tion extraction and wrapper induction. Where early work focused on manual wrapper generation (e.g. [2]), later work focusses on interactive and fully automatic wrapper extrac-tion (e.g. [1, 3 X 5, 7, 8]). For a more detailed review, we refer the reader to [6].

Systems vary in 1) the number of required, sometimes manually labeled, example pages; 2) the type of features used for extraction. Some methods treat a page as a se-quence of tags, others exploit the tree structure and take into account rendering features; 3) the techniques used for extraction, varying from grammars and grammar learning to patricia trees, similarity learning and clustering techniques. Heuristics are frequently employed to reduce the complexity.
Typically a scraper or wrapper is constructed for each search engine: based on one or more search result pages from the same search engine, a program is generated or configured which can extract machine readable search results. The cur-rently available wrapper generators have serious drawbacks making them unattractive to use. Firstly, they require a lot of effort to operate: multiple search result pages have to be saved to file, the generator has to be run and the output has to be inspected seperately and manually. Secondly, they are not robust or the software has been outdated. Existing wrapper generators frequently rely on buggy HTML parsers which are not easy to upgrade. Thirdly and finally, they create wrappers which are hard to integrate in a federated system. The wrapper frequently is a standalone program which requires additional programming effort to integrate. Figure 1: The SearchResultFinder plugin in action
In this demonstration we present a system which: 1) is integrated in the browser and easy to operate; 2) requires only a single search result page for operation; 3) outputs reusable XPath expressions to extract search results using a programming language of your choice; 4) allows the user to visually inspect the extracted result.
Due to space limitations we can only give a brief descrip-tion of the algorithm for extracting XPaths. The full algo-rithm is described in Trieschnigg et al. [6].

The overall approach is as follows. The browser is used to fetch the webpage, construct a DOM tree and render the search results. Both the constructed DOM tree and information about its rendered components are used in the algorithm.

First a set of candidate XPaths is generated. Repeat-ing anchor ( &lt;a&gt; ) nodes are searched and grouped according to their generalized XPath, consisting of the node names encountered when traversing from the root to this an-chor (for instance, /html/body/div/div/a ). Based on at-tribute values of these anchor nodes and their ancestors, XPath predicates are generated and used to select sub-sets of (ancestor) nodes. These XPaths are simplified by adding predicates with unique attribute values. For in-stance the XPath //html/body/div/a might be generalized to
Second, this set of candidate XPaths is ranked based on a number of features including rendering and similarity of the nodes retrieved by this candidate XPath. The ranking is based on rules and manually set thresholds (based on a training collection described in [6]).

The algorithm is implemented in JavaScript and is avail-able as a plugin for Firefox. The user navigates to a search result page, starts the plugin and a popup is presented with the ranked list of candidate XPaths found for the page. The nodes selected by these XPaths can be visually inspected by ticking them in the list. Fig. 1 shows a screenshot of the plugin active on a webpage.
We evaluated the plugin on 148 web search engines in 23 diverse categories such as academia, audio, video, images, shopping, books, recipes, health and news. Table 1 lists the results. In more than 81% of the pages, the first suggested XPath correctly extracts the results. In 9% of the pages a correct XPath is found at the second or higher rank. For 10% of the pages, no correct XPath is suggested. The average running time per page is less than 1 second (on a basic pc).
In this demonstation we presented SearchResultFinder, a browser plugin for quickly and easily determining XPaths to scrape search results from web search engines. The plugin is available online 2 . In future work we plan to extend the plugin with automatic detection and labeling of attributes, such as primary anchor, title, and thumbnail.
 This research was supported by the Netherlands Organi-zation for Scientific Research, NWO, grants 639.022.809, 612.066.513 and CATCH project FACT.
 [1] M.  X  Alvarez, A. Pan, J. Raposo, F. Bellas, and [2] V. Crescenzi and G. Mecca. Grammars have [3] D. Freitag. Multistrategy learning for information [4] B. Liu, R. Grossman, and Y. Zhai. Mining data records [5] K. Simon and G. Lausen. Viper: augmenting automatic [6] D. Trieschnigg, K. Tjin-Kam-Jet, and D. Hiemstra. [7] H. Zhao, W. Meng, Z. Wu, V. Raghavan, and C. Yu. [8] S.Zheng,R.Song,J.-R.Wen,andC.L.Giles.Efficient http://snipdex.org/srf/
