 Conversational agents are of growing importance in facilitating smooth interaction between humans and their electronic devices, yet conventional dialog sys-tems continue to face major challenges in the form of robustness, scalability and domain adaptation. At-tention has thus turned to learning conversational pat-terns from data: researchers have begun to explore data-driven generation of conversational responses within the framework of statistical machine transla-tion (SMT), either phrase-based (Ritter et al., 2011), or using neural networks to rerank, or directly in the form of sequence-to-sequence ( S EQ 2S EQ ) models (Sordoni et al., 2015; Vinyals and Le, 2015; Shang et al., 2015; Serban et al., 2015; Wen et al., 2015). S
EQ 2S EQ models offer the promise of scalability and language-independence, together with the capacity to implicitly learn semantic and syntactic relations between pairs, and to capture contextual dependen-cies (Sordoni et al., 2015) in a way not possible with conventional SMT approaches (Ritter et al., 2011).
An engaging response generation system should be able to output grammatical, coherent responses that are diverse and interesting. In practice, how-ever, neural conversation models tend to generate trivial or non-committal responses, often involving high-frequency phrases along the lines of I don X  X  know or I X  X  OK (Sordoni et al., 2015; Serban et al., 2015; Vinyals and Le, 2015). Table 1 illustrates this phenomenon, showing top outputs from S EQ 2S EQ models. All the top-ranked responses are generic. Responses that seem more meaningful or specific can also be found in the N-best lists, but rank much lower. In part at least, this behavior can be ascribed to the relative frequency of generic responses like I don X  X  know in conversational datasets, in contrast with the relative sparsity of more contentful alterna-the likelihood of outputs given inputs, neural mod-els assign high probability to  X  X afe X  responses. This objective function, common in related tasks such as machine translation, may be unsuited to generation tasks involving intrinsically diverse outputs. Intu-itively, it seems desirable to take into account not only the dependency of responses on messages, but also the inverse, the likelihood that a message will be provided to a given response.

We propose to capture this intuition by using Max-imum Mutual Information (MMI), first introduced in speech recognition (Bahl et al., 1986; Brown, 1987), as an optimization objective that measures the mu-tual dependence between inputs and outputs. Below, we present practical strategies for neural generation models that use MMI as an objective function. We show that use of MMI results in a clear decrease in the proportion of generic response sequences, gen-erating correspondingly more varied and interesting outputs. The approach we take here is data-driven and end-to-end. This stands in contrast to conventional dialog systems, which typically are template-or heuristic-driven even where there is a statistical component (Levin et al., 2000; Oh and Rudnicky, 2000; Ratna-parkhi, 2002; Walker et al., 2003; Pieraccini et al., 2009; Young et al., 2010; Wang et al., 2011; Banchs and Li, 2012; Chen et al., 2013; Ameixa et al., 2014; Nio et al., 2014).

We follow a newer line of investigation, originally introduced by Ritter et al. (2011), which frames response generation as a statistical machine trans-lation (SMT) problem. Recent progress in SMT stemming from the use of neural language models (Sutskever et al., 2014; Gao et al., 2014; Bahdanau et al., 2015; Luong et al., 2015) has inspired attempts to extend these neural techniques to response gener-ation. Sordoni et al. (2015) improved upon Ritter et al. (2011) by rescoring the output of a phrasal SMT-based conversation system with a S EQ 2S EQ model that incorporates prior context. (Serban et al., 2015; Shang et al., 2015; Vinyals and Le, 2015; Wen et al., 2015) apply direct end-to-end S EQ 2S EQ mod-els These S EQ 2S EQ models are Long Short-Term Memory (LSTM) neural networks (Hochreiter and Schmidhuber, 1997) that can implicitly capture com-positionality and long-span dependencies. (Wen et al., 2015) attempt to learn response templates from crowd-sourced data, whereas we seek to develop methods that can learn conversational patterns from naturally-occurring data.

Prior work in generation has sought to increase diversity, but with different goals and techniques. Carbonell and Goldstein (1998) and Gimpel (2013) produce multiple outputs that are mutually diverse, either non-redundant summary sentences or N-best lists. Our goal, however, is to produce a single non-trivial output, and our method does not require iden-On a somewhat different task, Mao et al. (2015, Section 6) utilize a mutual information objective in the retrieval component of image caption retrieval. Below, we focus on the challenge of using MMI in response generation, comparing the performance of MMI models against maximum likelihood. Given a sequence of inputs X = { x 1 ,x 2 ,...,x N an LSTM associates each time step with an input gate, a memory gate and an output gate, respectively denoted as i k , f k and o k . We distinguish e and h where e k denotes the vector for an individual text unit (for example, a word or sentence) at time step k while h k denotes the vector computed by LSTM model at time k by combining e k and h k  X  1 . c k is the cell state vector at time k , and  X  denotes the sigmoid function. Then, the vector representation h k for each time step k is given by: generation tasks, each input X is paired with a se-quence of outputs to predict: Y = { y 1 ,y 2 ,...,y N The LSTM defines a distribution over outputs and se-quentially predicts tokens using a softmax function: p ( Y | X ) = between h k  X  1 and e y tation output from the LSTM at time k  X  1 . Each sentence concludes with a special end-of-sentence symbol EOS . Commonly, input and output use differ-ent LSTMs with separate compositional parameters to capture different compositional patterns.
During decoding, the algorithm terminates when an EOS token is predicted. At each time step, either a greedy approach or beam search can be adopted for word prediction. Greedy search selects the token with the largest conditional probability, the embedding of which is then combined with preceding output to predict the token at the next step. 4.1 Notation In the response generation task, let S denote an in-put message sequence (source) S = { s 1 ,s 2 ,...,s N where N s denotes the number of words in S . Let T (target) denote a sequence in response to source sequence S , where T = { t 1 ,t 2 ,...,t N is the length of the response (terminated by an EOS token) and t denotes a word token that is associated with a D dimensional distinct word embedding e t . V denotes vocabulary size. 4.2 MMI Criterion The standard objective function for sequence-to-sequence models is the log-likelihood of target T given source S , which at test time yields the statisti-cal decision problem: As discussed in the introduction, we surmise that this formulation leads to generic responses being gener-ated, since it only selects for targets given sources, not the converse. To remedy this, we replace it with Maximum Mutual Information (MMI) as the objec-tive function. In MMI, parameters are chosen to maximize (pairwise) mutual information between the source S and the target T : This avoids favoring responses that unconditionally enjoy high probability, and instead biases towards those responses that are specific to the given input. We use a generalization of the MMI objective which introduces a hyperparameter  X  that controls how much to penalize generic responses:
An alternate formulation of the MMI objective uses Bayes X  theorem: log p ( T ) = log p ( T | S ) + log p ( S )  X  log p ( S | T ) which lets us rewrite Equation 9 as follows:  X  T = arg max This weighted MMI objective function can thus be viewed as representing a tradeoff between sources given targets (i.e., p ( S | T ) ) and targets given sources (i.e., p ( T | S ) ).

Although the MMI optimization criterion has been comprehensively studied for other tasks, such as acoustic modeling in speech recognition (Huang et al., 2001), adapting MMI to S EQ 2S EQ training is empirically nontrivial. Moreover, we would like to be able to adjust the value  X  in Equation 9 with-out repeatedly training neural network models from scratch, which would otherwise be extremely time-consuming. Accordingly, we did not train a joint model ( log p ( T | S )  X   X  log p ( T ) ), but instead trained maximum likelihood models, and used the MMI cri-terion only during testing. 4.3 Practical Considerations Responses can be generated either from Equation 9, i.e., log p ( T | S )  X   X  log p ( T ) or Equation 10, i.e., (1  X   X  ) log p ( T | S ) +  X  log p ( S | T ) . We will refer to these formulations as MMI-antiLM and MMI-bidi, respectively. However, these strategies are difficult to apply directly to decoding since they can lead to ungrammatical responses (with MMI-antiLM) or make decoding intractable (with MMI-bidi). In the rest of this section, we will discuss these issues and explain how we resolve them in practice. 4.3.1 MMI-antiLM
The second term of log p ( T | S )  X   X  log p ( T ) func-tions as an anti-language model. It penalizes not only high-frequency, generic responses, but also flu-ent ones and thus can lead to ungrammatical outputs. In theory, this issue should not arise when  X  is less than 1, since ungrammatical sentences should always be more severely penalized by the first term of the equation, i.e., log p ( T | S ) . In practice, however, we found that the model tends to select ungrammatical outputs that escaped being penalized by p ( T | S ) . Solution Again, let N t be the length of target T . p ( T ) in Equation 9 can be written as: We replace the language model p ( T ) with U ( T ) , which adapts the standard language model by multi-plying by a weight g ( k ) that is decremented mono-tonically as the index of the current token k increases: The underlying intuition here is as follows. First, neu-ral decoding combines the previously built represen-tation with the word predicted at the current step. As decoding proceeds, the influence of the initial input on decoding (i.e., the source sentence representation) diminishes as additional previously-predicted words words, the first words to be predicted significantly determine the remainder of the sentence. Penalizing words predicted early on by the language model con-tributes more to the diversity of the sentence than it does to words predicted later. Second, as the influ-ence of the input on decoding declines, the influence of the language model comes to dominate. We have observed that ungrammatical segments tend to appear in the later parts of the sentences, especially in long sentences.

We adopt the most straightforward form of g ( k ) by setting up a threshold (  X  ) by penalizing the first  X  The objective in Equation 9 can thus be rewritten as: where direct decoding is tractable. 4.3.2 MMI-bidi
Direct decoding from (1  X   X  ) log p ( T | S ) +  X  log p ( S | T ) is intractable, as the second part (i.e., p ( S | T ) ) requires completion of target generation be-fore p ( S | T ) can be effectively computed. Due to the enormous search space for target T , exploring all possibilities is infeasible.

For practical reasons, then, we turn to an approxi-mation approach that involves first generating N-best lists given the first part of objective function, i.e., standard S EQ 2S EQ model p ( T | S ) . Then we rerank the N-best lists using the second term of the ob-jective function. Since N-best lists produced by S
EQ 2S EQ models are generally grammatical, the final selected options are likely to be well-formed. Model reranking has obvious drawbacks. It results in non-globally-optimal solutions by first emphasizing standard S EQ 2S EQ objectives. Moreover, it relies heavily on the system X  X  success in generating a suf-ficiently diverse N-best set, requiring that a long list of N-best lists be generated for each message.
Nonetheless, these two variants of the MMI crite-rion work well in practice, significantly improving both interestingness and diversity. 4.4 Training Recent research has shown that deep LSTMs work better than single-layer LSTMs for S EQ 2S EQ tasks (Vinyals et al., 2015; Sutskever et al., 2014). We adopt a deep structure with four LSTM layers for encoding and four LSTM layers for decoding, each of which consists of a different set of parameters. Each LSTM layer consists of 1,000 hidden neurons, and the dimensionality of word embeddings is set to 1,000. Other training details are given below, broadly aligned with Sutskever et al. (2014).  X  LSTM parameters and embeddings are initial- X  Stochastic gradient decent is implemented using  X  Batch size is set to 256.  X  Gradient clipping is adopted by scaling gradi-Our implementation on a single GPU processes at a speed of approximately 600-1200 tokens per second on a Tesla K40.

The p ( S | T ) model described in Section 4.3.1 was trained using the same model as that of p ( T | S ) , with messages ( S ) and responses ( T ) interchanged. 4.5 Decoding 4.5.1 MMI-antiLM
As described in Section 4.3.1, decoding using log p ( T | S )  X   X U ( T ) can be readily implemented by predicting tokens at each time-step. In addition, we found in our experiments that it is also important to take into account the length of responses in decod-ing. We thus linearly combine the loss function with length penalization, leading to an ultimate score for a given target T as follows: where N t denotes the length of the target and  X  de-notes associated weight. We optimize  X  and  X  using MERT (Och, 2003) on N-best lists of response can-didates. The N-best lists are generated using the de-coder with beam size B = 200 . We set a maximum length of 20 for generated candidates. At each time step of decoding, we are presented with B  X  B candi-dates. We first add all hypotheses with an EOS token being generated at current time step to the N-best list. Next we preserve the top B unfinished hypotheses and move to next time step. We therefore maintain beam size of 200 constant when some hypotheses are completed and taken down by adding in more unfinished hypotheses. This will lead the size of final N-best list for each input much larger than the beam size. 4.5.2 MMI-bidi
We generate N-best lists based on P ( T | S ) and then rerank the list by linearly combining p ( T | S ) ,  X p ( S | T ) , and  X N t . We use MERT to tune the weights  X  and  X  on the development set. 6 5.1 Datasets Twitter Conversation Triple Dataset We used an extension of the dataset described in Sordoni et al. (2015), which consists of 23 million conversa-tional snippets randomly selected from a collection of 129M context-message-response triples extracted from the Twitter Firehose over the 3-month period from June through August 2012. For the purposes of our experiments, we limited context to the turn in the conversation immediately preceding the message. In our LSTM models, we used a simple input model in which contexts and messages are concatenated to form the source input.
For tuning and evaluation, we used the develop-ment dataset (2118 conversations) and the test dataset (2114 examples), augmented using information re-trieval methods to create a multi-reference set, as described by Sordoni et al. (2015). The selection criteria for these two datasets included a component of relevance/interestingness, with the result that dull responses will tend to be penalized in evaluation. OpenSubtitles dataset In addition to unscripted Twitter conversations, we also used the OpenSub-titles (OSDb) dataset (Tiedemann, 2009), a large, noisy, open-domain dataset containing roughly 60M-70M scripted lines spoken by movie characters. This dataset does not specify which character speaks each subtitle line, which prevents us from inferring speaker turns. Following Vinyals et al. (2015), we make the simplifying assumption that each line of subtitle constitutes a full speaker turn. Our mod-els are trained to predict the current turn given the preceding ones based on the assumption that consec-utive turns belong to the same conversation. This introduces a degree of noise, since consecutive lines may not appear in the same conversation or scene, and may not even be spoken by the same character.
This limitation potentially renders the OSDb dataset unreliable for evaluation purposes. For eval-uation purposes, we therefore used data from the explicitly identifies which character speaks each line of the script. This allowed us to identify consecutive message-response pairs spoken by different charac-ters. We randomly selected two subsets as develop-ment and test datasets, each containing 2k pairs, with source and target length restricted to the range of [6,18]. 5.2 Evaluation For parameter tuning and final evaluation, we used B
LEU (Papineni et al., 2002), which was shown to correlate reasonably well with human judgment on the response generation task (Galley et al., 2015). In the case of the Twitter models, we used multi-reference B LEU . As the IMSDB data is too limited to support extraction of multiple references, only single reference B LEU was used in training and evaluating the OSDb models.

We did not follow Vinyals et al. (2015) in using perplexity as evaluation metric. Perplexity is un-likely to be a useful metric in our scenario, since our proposed model is designed to steer away from the standard S EQ 2S EQ model in order to diversify the outputs. We report degree of diversity by calculating the number of distinct unigrams and bigrams in gen-erated responses. The value is scaled by total number of generated tokens to avoid favoring long sentences (shown as distinct-1 and distinct-2 in Tables 2 and 3). 5.3 Results Twitter Dataset We first report performance on Twitter datasets in Table 2, along with results for different models (i.e., Machine Translation and MT+neural reranking ) reprinted from Sordoni et al. (2015) on the same dataset. The baseline is the S
EQ 2S EQ model with its standard likelihood objec-tive and a beam size of 200. We compare this base-line against greedy-search S EQ 2S EQ (Vinyals and Le, 2015), which can help achieve higher diversity
Machine Translation is the phrase-based MT sys-tem described in (Ritter et al., 2011). MT features include commonly used ones in Moses (Koehn et al., 2007), e.g., forward and backward maximum like-lihood  X  X ranslation X  probabilities, word and phrase penalties, linear distortion, etc. For more details, refer to Sordoni et al. (2015).

MT+neural reranking is the phrase-based MT sys-tem, reranked using neural models. N-best lists are first generated from the MT system. Recurrent neu-ral models generate scores for N-best list candidates given the input messages. These generated scores are re-incorporated to rerank all the candidates. Addi-tional features to score [1-4]-gram matches between context and response and between message and con-text (context and message match CMM features) are also employed, as in Sordoni et al. (2015).

MT+neural reranking achieves a B LEU score of 4.44, which to the best of our knowledge repre-sents the previous state-of-the-art performance on this Twitter dataset. Note that Machine Translation and MT+neural reranking are trained on a much larger dataset of roughly 50 million examples. A sig-nificant performance boost is observed from MMI-bidi over baseline S EQ 2S EQ , both in terms of B LEU score and diversity.

The beam size of 200 used in our main experiments is quite conservative, and B LEU scores only slightly degrade when reducing beam size to 20. For MMI-bidi, B LEU scores for beam sizes of 200, 50, 20 are respectively 5.90, 5.86, 5.76. A beam size of 20 still produces relatively large N-best lists (173 elements on average) with responses of varying lengths, which offer enough diversity for the p ( S | T ) model to have a significant effect.
 OpenSubtitles Dataset All models achieve signif-icantly lower B LEU scores on this dataset than on the Twitter dataset, primarily because the IMSDB data provides only single references for evaluation. We note, however, that baseline S EQ 2S EQ models yield lower levels of unigram diversity ( distinct-1 ) on the OpenSubtitles dataset than on the Twitter data (0.0056 vs 0.017), which suggests that other factors may be in play. It is likely that movie dialogs are much more concise and information-rich than typical conversations on Twitter, making it harder to match gold-standard responses and causing the learned mod-els to strongly favor safe, conservative responses.
Table 3 shows that the MMI-antiLM model yields a significant performance boost, with a B LEU score increase of up to 36% and a more than 200% jump in unigram diversity. Our interpretation of this huge per-formance improvement is that the diversity and com-plexity of input messages lead standard S EQ 2S EQ which fail to match the more interesting reference strings typical of this dataset. This interpretation is also supported by the fact that the MMI-bidi model does not produce as significant a performance boost as MMI-antiLM. In the case of MMI-bidi, N-best lists generated using standard S EQ 2S EQ models re-main conservative and uninteresting, attenuating the impact of later reranking. An important potential limitation of MMI-bidi model is thus that its perfor-mance hinges on the initial generation of a highly diverse, informative N-best list.
 Qualitative Evaluation We employed crowd-sourced judges to provide evaluations for a random sample of 1000 items in the Twitter test dataset. Ta-ble 6 shows the results of human evaluations between paired systems. Each output pair was ranked by 5 judges, who were asked to decide which of the two outputs was better. They were instructed to prefer outputs that were more specific (relevant) to the mes-sage and preceding context, as opposed to those that were more generic. Ties were permitted. Identical strings were algorithmically assigned the same score. The mean of differences between outputs is shown as the gain for MMI-bidi over the competing system. At a significance level of  X  = 0 . 05 , we find that MMI-bidi outperforms both baseline and greedy S EQ 2S EQ systems, as well as the weaker SMT and SMT+RNN baselines. MMI-bidi outperforms SMT in human evaluations despite the greater lexical diversity of MT output.

Separately, judges were also asked to rate overall quality of MMI-bidi output over the same 1000-item sample in isolation, each output being evaluated by 7 judges in context using a 5-point scale. The mean rating was 3.84 (median: 3.85, 1st Qu: 3.57, 3rd Qu: 4.14), suggesting that overall MMI-bidi output does
Table 7 presents the N-best candidates generated using the MMI-bidi model for the inputs of Table 1. We see that MMI generates significantly more inter-esting outputs than S EQ 2S EQ .

In Tables 4 and 5, we present responses generated by different models. All examples were randomly sampled (without cherry picking). We see that the baseline S EQ 2S EQ model tends to generate reason-able responses to simple messages such as How are you doing? or I love you . As the complexity of the message increases, however, the outputs switch to more conservative, duller forms, such as I don X  X  know or I don X  X  know what you are talking about . An oc-casional answer of this kind might go unnoticed in a natural conversation, but a dialog agent that always produces such responses risks being perceived as un-cooperative. MMI-bidi models, on the other hand, produce far more diverse and interesting responses. We investigated an issue encountered when applying S
EQ 2S EQ models to conversational response genera-tion. These models tend to generate safe, common-place responses (e.g., I don X  X  know ) regardless of the input. Our analysis suggests that the issue is at least in part attributable to the use of unidirectional like-lihood of output (responses) given input (messages). To remedy this, we have proposed using Maximum Mutual Information (MMI) as the objective function. Our results demonstrate that the proposed MMI mod-els produce more diverse and interesting responses, while improving quality as measured by B LEU and human evaluation.

To the best of our knowledge, this paper represents the first work to address the issue of output diver-sity in the neural generation framework. We have focused on the algorithmic dimensions of the prob-lem. Unquestionably numerous other factors such as grounding, persona (of both user and agent), and intent also play a role in generating diverse, conver-sationally interesting outputs. These must be left for future investigation. Since the challenge of pro-ducing interesting outputs also arises in other neural generation tasks, including image-description gener-ation, question answering, and potentially any task where mutual correspondences must be modeled, the implications of this work extend well beyond conver-sational response generation.
 We thank the anonymous reviewers, as well as Dan Jurafsky, Alan Ritter, Stephanie Lukin, George Sp-ithourakis, Alessandro Sordoni, Chris Quirk, Meg Mitchell, Jacob Devlin, Oriol Vinyals, and Dhruv Batra for their comments and suggestions.

