 The user interaction with the mobile device plays an im-portant role in user habit understanding. In this paper, we propose to mine the associations between user interactions and contexts captured by mobile devices, or behavior pat-terns for short, from context logs to characterize the habits of mobile users. The extensive experiments on the collected real life data clearly validate the ability of our approach for mining effective behavior patterns.
 H.2.8[Database Management] [ Database Applications ]: Data Mining Algorithms, Experimentation Mobile user, habit mining, behavior patterns.
The rich user interaction information captured by the mo-bile device can be used to understand user habits, which can bring a great business value, such as targeted advertising and personalized recommendation. A distinct property of the user interactions with mobile devices is that they are usu-ally associated with volatile contexts, such as waiting a bus, driving a car, or doing shopping. Intuitively, some user inter-actions are context-aware, that is, the occurrences of these user interactions are influenced by the contexts of users. For example, some users would like to listen to music with their smart phones when taking a bus to the workplace but rarely do the same thing on other contexts. Therefore, we argue that the associations between user interaction records and the corresponding contexts, which are refereed as behavior patterns , can be used to characterize user habits.
Context logs collect the history context data and interac-tion records of mobile users, and thus can be used as data sources for mining behavior patterns. However, mining be-havior patterns is not a trivial problem because it cannot be addressed by the traditional association rule mining [1]. To this end, we propose an effective approach for behavior pattern mining which takes context logs as time ordered se-quences of context records and calculates the support of a context by taking into account its time ranges of appear-ances. Experimental results on real data sets clearly show that our approach outperforms the traditional association rule mining approach for mining behavior patterns.
To ease presenting the problem of behavior pattern min-ing, we first define some related notions as follows.
Definition 1 (Context). Given a contextual feature tual feature-value pairs, i.e.,  X   X  = { (  X  1 :  X  1 ) , (  X   X  ) } , where  X   X   X   X  and  X   X  is the value for  X   X  ( 1  X   X   X   X  ). A context with  X  contextual feature-value pairs is called an  X  -context .

Definition 2 (Sub-Context, Super-Context). Given two contexts  X   X  and  X   X  , if  X   X  a contextual feature-value pair,  X   X  is called a sub-context of  X   X  and  X   X  is called a super-context of  X   X  .

A contextual feature denotes a type of context data, such as day period, location, audio level, etc. For simplicity of operating contexts, such as context comparison, we require that contextual feature-value pairs be sorted in a predefined order of contextual features.

Definition 3 (Interaction Record). An interaction record is an item in the interaction set  X  = {  X  1 ,  X  2 , ...,  X  where  X   X  (1  X   X   X   X  ) denotes a kind of user interaction.
Interaction records capture the occurrences of user inter-actions with mobile devices, such as listening to music, mes-sage session or Web browsing.

Definition 4 (Context Record, Context Log). A context record  X  = &lt;  X   X  X  X ,  X   X  ,  X  &gt; is a triple of a timestamp  X   X  X  X  , a context  X   X  , and a user interaction record  X  . A con-text log  X  =  X  1  X  2 ... X   X  by timestamps.
A context record captures the most detailed available con-text and the occurrence of a user interaction during a time interval. We mention  X  X vailable X  because a context record may miss the values of some contextual features though the set of context-features whose values should be collected is predefined. Moreover, interaction records can be empty (de-noted as  X  X ull X ) if no interaction happen during the time interval.

Context logs integrate the history context data and in-teraction records of mobile users, and thus can be data sources for mining behavior patterns. However, mining be-havior patterns is not a trivial problem because the tradi-tional association rule mining approach suffers the unbal-anced occurrences of contexts and interaction records. For example, suppose that Sam usually listens to rock music when taking a bus during workdays X  AM8:00-9:00. When the context { ( Is a holiday?: No ),( Time range: AM8:00-9:00 ),( Transportation: On vehicle ) } appears, Sam usually listens to rock music but the exact time points when the interaction happens are uncertain. Consequently, the oc-currences of the interaction Listening to rock music are very sparse compared with the occurrences of the context { ( Is a holiday?: No ),( Time range: AM8:00-9:00 ),( Transportation: On vehicle ) } in context records, which causes the traditional association rule mining approach can hardly discover the be-havior pattern { ( Is a holiday?: No ),( Time range: AM8:00-9:00 ),( Transportation: On vehicle ) } =  X  Listening to rock music . One may argue for a method in which we first ex-tract the context records which contain non-empty interac-tion records and then apply the traditional association rule mining. This alternative approach loses the discriminative information that how likely no interaction happens with a given context. As a result, the calculated confidence may be meaningless. The detailed explanation of the problem can be found in [2].

From context logs we observe that if a user interaction is influenced by the context  X   X  , the corresponding interac-tion record  X  usually co-occurs with  X   X  in the time ranges when  X   X  continuously appears in several adjacent context records. Therefore, we propose to not only consider the co-occurrences of contexts and interaction records in separate context records but also consider their co-occurrences in the whole time ranges of contexts. To be specific, we take con-text logs as time ordered sequences of context records and calculate the support of a context by taking into account its time ranges of appearances. For a candidate behavior pattern  X   X  =  X   X  , the support (denoted as  X  X  X  X  (  X   X  =  X   X  )) is still calculated by counting the context records where  X  and  X  co-occur. But for a context  X   X  , the support (denoted as  X  X  X  X  (  X   X  )) is calculated separately in two different cases. If  X   X  continuously appears in several adjacent context records and all of these context records only contain empty inter-action records, we will count  X   X  once. Otherwise, we will count  X   X  by the number of non-empty interaction records in these context records. We discriminate the two different cases because in this way we ensure that  X  X  X  X  (  X   X  ) is always not smaller than sumption for calculating the confidence.

The formal problem statement of behavior pattern mining is as follows.

Definition 5 (Match Context). A context record  X  = of  X   X  . For simplicity, we can use  X   X   X   X  to denote that  X  matches  X   X  .

Definition 6 (Context Range). Given a context  X   X  and a context log  X  =  X  1  X  2 ... X   X  is a context range of  X   X  iff 1)  X  1  X   X   X   X  (  X   X  +  X   X   X  (  X 
Definition 7 (Support, Confidence). Given a con-text  X   X  ,an interaction record  X  , and a context log  X  , the support of  X   X  w.r.t.  X  (  X  X  X  X  (  X   X  =  X   X  )) is where  X  X  X  X  X  X  X   X  (  X  ) denotes the occurrence number of  X  in the  X  -th context range of  X   X  .

Given an interaction set  X  , the support of  X   X  (  X  X  X  X  (  X  is  X  of context ranges of  X   X  that do not contain any non-empty interaction record. Moreover, the confidence of  X   X  w.r.t.  X  Definition 8 (Promising Context, Behavior Pattern). Given a context  X   X  , a context log  X  , two user defined pa-rameters min sup and min conf , if  X   X   X  X  X  X  (  X   X  =  X   X  )  X   X  X  X  X   X  X  X  X  ,  X   X  is called a promising context . Moreover, if  X  X  X  X  (  X   X  =  X   X  )  X   X  X  X  X   X  X  X  X  and  X  X  X  X  X  X  (  X   X  =  X   X  )  X  min conf,  X   X  =  X   X  is called a behavior pattern .
Most of the traditional association rule mining algorithms divide the mining procedure into two stages. In the first stage, all frequent itemsets are found from the transaction data base. In the second stage, the rules are generated from the frequent itemsets and their confidences are calculated. This strategy may significantly reduce the total memory re-quirement since the number of association rules may increase exponentially with the number of frequent items. For exam-ple, given a frequent itemset  X  X  X  X  , the possible association rules are  X  X  X  =  X   X  ,  X  X  X  =  X   X  ,  X  X  X  =  X   X  ,  X  =  X   X  X  X  ,  X  =  X   X  X  X  , and  X  =  X   X  X  X  . However, in behavior pattern mining, we can integrate the two stages because the upper bound of the number of behavior patterns is linear to the number of promising contexts.

A naive algorithm for behavior pattern mining enumer-ates all contexts appeared in the context log as candidate promising contexts and then counts their supports and con-fidences w.r.t. each interaction by scanning the context log. However, this algorithm is inefficient since its time complex-ity is  X  (  X   X   X  of context records and  X   X  indicates the number of values for the contextual feature  X   X  appeared in the context log. Wisely, we can reduce the number of candidate promising contexts the Apriori-property of behavior patterns. That is, given a context  X   X  and an interaction record  X  , if  X  X  X  X  (  X   X  =  X   X  ) &gt;  X  , for any sub-context of  X   X  denoted as  X   X  , we can conclude that  X  X  X  X  (  X   X  =  X   X  ) &gt;  X  . It means that if a context  X  not a promising context, i.e., !  X   X   X  X  X  X  (  X   X  =  X   X  )  X   X  X  X  X   X  X  X  X  , none of  X   X   X  X  super-contexts is promising. Along this line, we propose an algorithm for behavior pattern mining based on the framework of Apriori-all algorithm [1], which is named GCPM ( G enerating C andidate promising contexts for be-havior P attern M ining). The main idea of GCPM is to gen-erate candidate promising  X  + 1-contexts by joining promis-ing  X  -contexts. The notion of joining contexts is defined as follows.

Definition 9 (Join Context). Given two contexts  X   X  = { (  X  1 :  X  1 ) , (  X  2 :  X  2 ) , ..., (  X   X  :  X   X  ) } and  X   X  that  X   X  and  X   X  can join. The joined context of  X   X  and  X  is denoted as  X   X   X   X   X  = { (  X  1 :  X  1 ) , (  X  2 :  X  2 ) , ..., (  X   X  ) } .

Given a context log  X  and a user interaction set  X  = {  X  1 ,  X  2 , ... ,  X   X  } , GCPM first enumerates all 1-contexts ap-peared in  X  as  X  1 = {  X  1  X  } and set  X  to be 1. Then, given a set of candidate promising  X  -contexts  X   X  , the following pro-cedure is executed iteratively until no candidate promising contexts can be generated.
Through iterative joining stages, GCPM largely reduces the number of candidate promising contexts from to  X  in practice. Therefore, the time complexity of GCPM is  X  (  X   X   X 
The main cost of GCPM comes from counting the sup-ports of candidate promising contexts w.r.t. each interac-tion. To improve the efficiency of this stage, we introduce a novel data structure called CH-Tree ( C ontext H ash Tree ) for quickly updating the supports of candidate promising contexts w.r.t. each interaction when scanning context records. It is worth noting that Park et al. [4] proposed a hash based algorithm for association rule mining which can largely re-duce the number of candidate 2-frequent items. The ob-jective of their approach is different from ours because CH-Trees are designed for speeding up the support calculation but not for reducing the number of candidate promising con-texts. Actually, the latter problem has been addressed by the joining stage of GCPM.

A CH-Tree has a tree-like representation of the nodes as follows.
Initially, an empty CH-Tree only has a root node. The intermediate nodes and leaf nodes are created during the process of inserting candidate promising contexts. The oper-ation  X  X  X  X  X  X  X  X  X  () is used to insert candidate promising contexts into a CH-Tree. Given a received context  X   X  , the operation  X  X  X  X  X  X  X  X  X  () first selects a contextual feature  X   X  and assigns  X  to the intermediate node pointed by the  X  -th pointer of the root node, denoted as  X  X  X   X  . If  X  X  X   X  does not exist, the op-eration  X  X  X  X  X  X  X  X  X  () will create it first. Then it puts  X   X  the leaf node pointed by the  X  -th pointer of  X  X  X   X  , where  X  =  X  X  X  X  X  X  (  X   X  ) and  X   X  indicates the value of  X   X  in  X   X  larly, if the leaf node does not exist, the operation  X  X  X  X  X  X  X  X  X  () will also create it first.
 After all candidate promising contexts are inserted, the CH-Tree is used to calculate the supports of the candidate promising contexts in it when scanning a context log  X  . Given a context record  X  , the operation  X  X  X  X  X  X  X  () assign  X  to each existing intermediate nodes. When the intermedi-ate node  X  X  X   X  receives  X  , it returns the leaf node pointed by its  X  -th pointer as a leaf node that may contain contexts matched by  X  , where  X  =  X  X  X  X  X  X  (  X   X  ) and  X   X  indicates the value of  X   X  in  X  . Only the candidate promising contexts in these returned leaf nodes are checked for updating their supports. In contrast, in the original GCPM algorithm all candidate promising contexts are checked whether their sup-ports should be updated for  X  . Therefore, the efficiency of updating supports of contexts is improved by CH-Trees.
To reduce the average number of checked candidate promis-ing contexts, it is desirable to partition the contexts to each leaf node as equally as possible. To this end, we expect that the value distribution for the selected hash key  X   X  sparse as possible. Therefore, the operation  X  X  X  X  X  X  X  X  X  () selects the  X   X  in a sparseness descending order. The sparseness of the value distribution for  X   X  can be evaluated by the infor-mation entropy, i.e.,  X  (  X   X  ) =  X  where  X  (  X   X   X   X   X  ) denotes the probability that the value of  X   X  is  X   X  .  X  (  X   X   X   X   X  ) can be estimated as  X   X  X  X  X  (  X   X   X   X  X  X  X  (  X   X  ,  X   X  ) indicates the frequency of contextual feature-contextual feature  X   X  .
To evaluate the proposed approach, we conduct extensive experiments on real context logs of mobile users. We build a data collection system for collecting the rich context data such as GPS data, system information, GSM data, call log, sensor data, and interaction records of 50 college volunteers spanning for one month. Due to the page limitation, we only show the detailed experimental results for two randomly se-lected volunteers X  context logs, namely, data set D  X  and data set D  X  . But we still report the general phenomenon shown in the experiments for other context logs.

To evaluate the ability of our approach for mining behav-ior patterns, we use the association rule mining approach as the baseline method. Notice that in the following para-graph we use  X  X ssociation rules X  only to denote the associ-ation rules whose antecedents are contexts and the conse-quents are interaction records. The implementation of the association rule mining approach is based on the FP-Growth algorithm [3].

Figure 1 and Figure 2 compare the distribution of behav-ior patterns (CP) and that of association rules (AR) with respect to confidence in D  X  and D  X  , respectively. In these figures, the confidences are accurate to 0.01. To observe the difference of two distributions more clearly, we mark the av-erage confidences (Avg. Conf.) of each distribution. From these figures, we can see that the confidences of association rules are usually too low to let us distinguish meaningful rules from noisy data. The experiments on other context logs show the similar phenomenon. Figure 1: The distributions of behavior patterns and association rules in D  X  . Figure 2: The distributions of behavior patterns and association rules in D  X  .

We manually check the mined behavior patterns and find that most of them can reflect the habits of users. Table 1 shows some behavior patterns mined from D  X  and D  X  . These behavior patterns reflect some habits of the corresponding users. For example, the first pattern of D  X  implies that the corresponding volunteer usually listens to music dur-ing workdays X  AM8:00-9:00 when taking a vehicle (Speed: High( &gt; 20km/h)).

To achieve a more objective evaluation, we also ask vol-unteers to evaluate the behavior patterns mined from their own context logs. Precisely, for each volunteer, we mine all behavior patterns with  X  X  X  X   X  X  X  X  =2 and  X  X  X  X   X  X  X  X  X  X  =0.5 from his (or her) context log. Then we select at most top 20 be-havior patterns for each interaction instead of using all the mined behavior patterns. It X  X  because the total number of the mined behavior patterns usually exceeds to several hun-dreds and thus it may bring too much burden to evaluate all behavior patterns. Given a behavior pattern to be eval-uated, the volunteer can select one from the following three remarks:
To ensure the quality of the evaluation, we generate a copy for each behavior pattern and randomly mix them with the original ones. If a behavior pattern is assigned different remarks from that of its copy, we will revisit it again. The evaluation result shows that all volunteers gave more than 95% positive remarks (I+Y) for the mined behavior patterns and the average ratio of positive remarks for each volunteer is more than 98%.

We also evaluate the efficiency of the proposed algorithms including GCPM and its optimization, denoted as GCPM-H, for D  X  and D  X  . Both algorithms are implemented with standard C++ on a 2  X  2.0G CPU, 2G main memory PC. The experiments on all context logs show that the average running time of GCPM-H is about 10% of that of GCPM.
In this paper, we propose an effective approach for min-ing behavior patterns which takes context logs as time or-dered sequences of context records and takes into account the co-occurrences of contexts and interaction records in the whole time ranges of contexts. The experiments on real data sets clearly show that our approach is effective, efficient and promising.

Acknowledgement. This work is supported by grants from Natural Science Foundation of China (No.60775037), Key Program of National Natural Science Foundation of China (No.60933013) and Nokia.
