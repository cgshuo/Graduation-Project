 Tor Lattimore tor.lattimore@anu.edu.au Australian National University Marcus Hutter marcus.hutter@anu.edu.au Australian National University Peter Sunehag peter.sunehag@anu.edu.au Australian National University Reinforcement Learning (RL) is the task of learning policies that lead to nearly-optimal rewards where the environment is unknown. One metric of the efficiency of an RL algorithm is sample-complexity, which is a high probability upper bound on the number of time-steps when that algorithm is not nearly-optimal that holds for all environment in some class. Such bounds are typically shown for very specific classes of environ-ments, such as (partially observable/factored) Markov Decision Processes (MDP) and bandits. We consider more general classes of environments where at each time-step an agent takes an action a  X  A where-upon it receives reward r  X  [0 , 1] and an observation o  X  O , which are generated stochastically by the environment and may depend arbitrarily on the entire history se-quence.
 We present a new reinforcement learning algorithm, named Maximum Exploration Reinforcement Learn-ing (MERL), that accepts as input a finite set M := {  X  1 ,  X  X  X  , X  N } of arbitrary environments, an accuracy , and a confidence  X  . The main result is that MERL has a sample-complexity of where 1 / (1  X   X  ) is the effective horizon determined by discount rate  X  . We also consider the case where M is infinite, but compact with respect to a particular topology. In this case, a variant of MERL has the same sample-complexity as above, but where N is replaced by the size of the smallest -cover. A lower bound is also given that matches the upper bound except for logarithmic factors. Finally, if M is non-compact then in general no finite sample-complexity bound exists. 1.1. Related Work Many authors have worked on the sample-complexity of RL in various settings. The simplest case is the multiarmed bandit problem that has been extensively studied with varying assumptions. The typical mea-sure of efficiency in the bandit literature is regret, but sample-complexity bounds are also known and some-times used. The next step from bandits is finite state MDPs, of which bandits are an example with only a single state. There are two main settings when MDPs are considered, the discounted case where sample-complexity bounds are proven and the undiscounted (average reward) case where regret bounds are more typical. In the discounted setting the upper and lower bounds on sample-complexity are now extremely re-fined. See Strehl et al. (2009) for a detailed review of the popular algorithms and theorems. More re-cent work on closing the gap between upper and lower bounds is by Szita &amp; Szepesv  X ari (2010); Lattimore &amp; Hutter (2012); Azar et al. (2012). In the undiscounted case it is necessary to make some form of ergodicity assumption as without this regret bounds cannot be given. In this work we avoid ergodicity assumptions and discount future rewards. Nevertheless, our al-gorithm borrows some tricks used by UCRL2 (Auer et al., 2010). Previous work for more general environ-ment classes is somewhat limited. For factored MDPs there are known bounds, see (Chakraborty &amp; Stone, 2011) and references there-in. Even-dar et al. (2005) give essentially unimprovable exponential bounds on the sample-complexity of learning in finite partially observable MDPs. Maillard et al. (2013) show regret bounds for undiscounted RL where the true environ-ment is assumed to be finite, Markov and commu-nicating, but where the state is not directly observ-able. As far as we know there has been no work on the sample-complexity of RL when environments are completely general, but asymptotic results have gar-nered some attention with positive results by Hutter (2002); Ryabko &amp; Hutter (2008); Sunehag &amp; Hutter (2012) and (mostly) negative ones by Lattimore &amp; Hutter (2011b). Perhaps the closest related worked is (Diuk et al., 2009), which deals with a similar problem in the rather different setting of learning the optimal predictor from a class of N experts. They obtain an O ( N log N ) bound, which is applied to the problem of structure learning for discounted finite-state factored MDPs. Our work generalises this approach to the non-Markov case and compact model classes. The definition of environments is borrowed from the work of ? , although the notation is slightly more formal to ease the application of martingale inequalities. General. N = { 0 , 1 , 2 ,  X  X  X } is the natural numbers. For the indicator function we write [[ x = y ]] = 1 if x = y and 0 otherwise. We use  X  and  X  for logical and/or respectively. If A is a set then | A | is its size and A  X  is the set of all finite strings (sequences) over A . If x and y are sequences then x @ y means that x is a prefix of y . Unless otherwise mentioned, log represents the natural logarithm. For random variable X we write E X for its expectation. For x  X  R , d x e is the ceiling function.
 Environments and policies. Let A , O and R  X  R be finite sets of actions, observations and rewards re-spectively and H := A  X  O  X  R . H  X  is the set of infinite history sequences while H  X  := ( A  X  O  X  R )  X  is the set of finite history sequences. If h  X  H  X  then ` ( h ) is the number of action/observation/reward tuples in h . We write a t ( h ), o t ( h ), r t ( h ) for the t th action/observation/reward of history sequence h . For h  X  H  X  ,  X  h := { h 0  X  X   X  : h @ h 0 } is the cylin-der set. Let F :=  X  ( {  X  h : h  X  H  X  } ) and F t :=  X  ( {  X  h : h  X  H  X   X  ` ( h ) = t } ) be  X  -algebras. An en-vironment  X  is a set of conditional probability distri-butions over observation/reward pairs given the his-tory so far. A policy  X  is a function  X  : H  X   X  A . An environment and policy interact sequen-tially to induce a measure, P  X , X  , on filtered prob-ability space ( H  X  , F , {F t } ). For convenience, we abuse notation and write P  X , X  ( h ) := P  X , X  ( X  h ). If h @ h 0 then conditional probabilities are P  X , X  ( h 0 | h ) := P  X , X  ( h 0 ) /P  X , X  ( h ). R t ( h ; d ) := P d -step return function and R t ( h ) := lim d  X  X  X  R t ( h ; d ). Given history h t with ` ( h t ) = t , the value func-tion is defined by V  X   X  ( h t ; d ) := E [ R t ( h ; d ) | h the expectation is taken with respect to P  X , X  (  X | h V environment  X  is  X   X   X  := arg max  X  V  X   X  , which with our assumptions is known to exist (Lattimore &amp; Hutter, 2011a). The value of the optimal policy is V  X   X  := V  X  In general,  X  denotes the true environment while  X  is a model.  X  will typically be the policy of the algorithm under consideration. Q  X   X  ( h,a ) is the value in history h of following policy  X   X   X  except for the first time-step when action a is taken. M is a set of environments (models).
 Sample-complexity. Policy  X  is -optimal in his-tory h and environment  X  if V  X   X  ( h )  X  V  X   X  ( h )  X  . The sample-complexity of a policy  X  in environment class M is the smallest  X  such that, with high probability,  X  is -optimal for all but  X  time-steps for all  X   X  M . Define L  X , X  : H  X   X  N  X  X  X  X  to be the number of time-steps when  X  is not -optimal.
 where h t is the length t prefix of h . The sample-complexity of policy  X  is  X  with respect to accuracy and confidence 1  X   X  if P L  X , X  ( h ) &gt;  X  &lt;  X ,  X   X   X  X  . We start with the finite case where the true environ-ment is known to belong to a finite set of models, M . The Maximum Exploration Reinforcement Learning algorithm is model-based in the sense that it maintains a set, M t  X  M , where models are eliminated once they become implausible. The algorithm operates in phases of exploration and exploitation, choosing to ex-ploit if it knows all plausible environments are reason-ably close under all optimal policies and explore oth-erwise. This method of exploration essentially guar-antees that MERL is nearly optimal whenever it is exploiting and the number of exploration phases is limited with high probability. The main difficulty is specifying what it means to be plausible. Previous au-thors working on finite environments, such as MDPs or bandits, have removed models for which the tran-sition probabilities are not sufficiently close to their empirical estimates. In the more general setting this approach fails because states (histories) are never vis-ited more than once, so sufficient empirical estimates cannot be collected. Instead, we eliminate environ-ments if the reward we actually collect over time is not sufficiently close to the reward we expected given that environment.
 Before giving the explicit algorithm, we explain the operation of MERL more formally in two parts. First we describe how it chooses to explore and exploit and then how the model class is maintained. See Figure 1 for a diagram of how exploration and exploitation occurs.
 Exploring and exploiting. At each time-step t MERL computes the pair of environments  X  ,  X  in the model class M t and the policy  X  maximising the dif-ference  X  := V  X   X  ( h ; d )  X  V  X   X  ( h ; d ) , d := If  X  &gt; / 4, then MERL follows policy  X  for d time-steps, which we call an exploration phase. Other-wise, for one time-step it follows the optimal pol-icy with respect to the first environment currently in the model class. Therefore, if MERL chooses to ex-ploit, then all policies and environments in the model class lead to similar values, which implies that exploit-ing is near-optimal. If MERL explores, then either V  X  ( h ; d )  X  V which will allow us to apply concentration inequalities to eventually eliminate either  X  (the upper bound) or  X  (the lower bound).
 The model class. An exploration phase is a  X  -exploration phase if  X   X  [ 2  X   X  2 , 2  X   X  1 ), where For each environment  X   X  X  and each  X   X  X  , MERL associates a counter E (  X , X  ), which is incremented at the start of a  X  -exploration phase if  X   X  X   X  ,  X  } . At the end of each  X  -exploration phase MERL calculates the discounted return actually received during that explo-ration phase R  X  [0 , 1 / (1  X   X  )] and records the values where h is the history at the start of the exploration phase. So X (  X , X  ) is the difference between the return expected if the true model was  X  and the actual return and X (  X  , X  ) is the difference between the actual return and the expected return if the true model was  X  . Since the expected value of R is V  X   X  ( h ; d ), and  X  ,  X  are upper and lower bounds respectively, the expected values of both X (  X , X  ) and X (  X  , X  ) are non-negative and at least one of them has expectation larger than (1  X   X  ) / 8. MERL eliminates environment  X  from the model class if the cumulative sum of X (  X , X  ) over all exploration phases where  X   X  {  X  ,  X  } is sufficiently large, but it tests this condition only when the counts E (  X , X  ) has increased enough since the last test. Let  X  j :=  X  j for  X   X  (1 , 2) as defined in the algorithm. MERL only tests if  X  should be removed from the model class when E (  X , X  ) =  X  j for some j  X  N . This restriction ensures that tests are not performed too often, which allows us to apply the union bound without losing too much. Note that if the true environment  X   X  {  X , X  } , then E  X , X  X (  X , X  ) = 0, which will ultimately be enough to ensure that  X  remains in the model class with high probability. The reason for using  X  to bucket explo-ration phases will become apparent later in the proof of Lemma 3.
 Algorithm 1 MERL Subscripts. For clarity, we have omitted subscripts in the pseudo-code above. In the analysis we will refer to E t (  X , X  ) and M t for the values of E (  X , X  ) and M respectively at time-step t . We write  X  t for  X  i in line 21 and similarly  X  t :=  X   X   X  Phases. An exploration phase is a period of exactly d time-steps, starting at time-step t if 1. t is not currently in an exploration phase. 2.  X  := V  X   X  ( h t ; d )  X  V  X   X  ( h t ; d ) &gt; / 4. We say it is a  X  -exploration phase if  X  =  X  or  X  =  X  and a  X  -exploration phase if  X   X  [ 2  X   X  2 , 2  X   X  1 )  X  [  X  where  X  := 2  X   X  2 . It is a (  X , X  )-exploration phase if it satisfies both of the previous statements. We say that MERL is exploiting at time-step t if t is not in an exploration phase. A failure phase is also a period of d time-steps and starts in time-step t if 1. t is not in an exploration phase or earlier failure 2. V  X   X  ( h t )  X  V  X   X  ( h t ) &gt; .
 Unlike exploration phases, the algorithm does not de-pend on the failure phases, which are only used in the analysis, An exploration or failure phase starting at time-step t is proper if  X   X  X  t . The effective horizon d is chosen to ensure that V  X   X  ( h ; d )  X  V  X   X  ( h )  X  / 8 for all  X  ,  X  and h . Test statistics. We have previously remarked that most traditional model-based algorithms with sample-complexity guarantees record statistics about the tran-sition probabilities of an environment. Since the en-vironments are assumed to be finite, these statistics eventually become accurate (or irrelevant) and the standard theory on the concentration of measure can be used for hypothesis testing. In the general case, environments can be infinite and so we cannot col-lect useful statistics about individual transitions. In-stead, we use the statistics X (  X , X  ), which are de-pendent on the value function rather than individual transitions. These satisfy E  X , X  [ X (  X , X  ) i ] = 0 while E  X , X  [ X (  X , X  ) i ]  X  0 for all  X   X  M t . Testing is then performed on the statistic P  X  k i =1 X (  X , X  ) i , which will satisfy certain martingale inequalities.
 Updates. As MERL explores, it updates its model class, M t  X  M , by removing environments that have become implausible. This is comparable to the up-dating of confidence intervals for algorithms such as MBIE (Strehl &amp; Littman, 2005) or UCRL2 (Auer et al., 2010). In MBIE, the confidence interval about the empirical estimate of a transition probability is updated after every observation. A slight theoreti-cal improvement used by UCRL2 is to only update when the number of samples of a particular statis-tic doubles. The latter trick allows a cheap appli-cation of the union bound over all updates without wasting too many samples. For our purposes, how-ever, we need to update slightly more often than the doubling trick would allow. Instead, we check if an environment should be eliminated if the number of (  X , X  )-exploration phases is exactly  X  j for some j where  X  j :=  X  j and  X  := 4 of  X  j is still exponential, the union bound will still be applicable.
 Probabilities. For the remainder of this section, un-less otherwise mentioned, all probabilities and expec-tations are with respect to P  X , X  where  X  is the policy of Algorithm 1 and  X   X  X  is the true environment. E bility bounds on the number of failure and exploration phases respectively.
 Theorem 1. Let  X   X  X  = {  X  1 , X  2 ,  X  X  X   X  N } be the true environment and  X  be the policy of Algorithm 1. Then If lower order logarithmic factors are dropped then the sample-complexity bound of MERL given by Theorem three lemmas.
 Lemma 2.  X   X  X  t for all t with probability 1  X   X / 4 . Lemma 3. The number of proper failure phases is bounded by with probability at least 1  X   X  2 .
 Lemma 4. The number of proper exploration phases is bounded by with probability at least 1  X   X  4 .
 Proof of Theorem 1 Applying the union bound to the results of Lemmas 2, 3 and 4 gives the following with probability at least 1  X   X  . 1. There are no non-proper exploration or failure 2. The number of proper exploration phases is at 3. The number of proper failure phases is at most If  X  is not -optimal at time-step t then t is either in an exploration or failure phase. Since both are exactly d time-steps long the total number of time-steps when  X  is sub-optimal is at most d  X  ( G max + E max ). We now turn our attention to proving Lemmas 2, 3 and 4. Of these, Lemma 4 is more conceptually chal-lenging while Lemma 3 is intuitively unsurprising, but technically difficult.
 Proof of Lemma 2 If  X  is removed from M , then there exists a  X  and j  X  N such that Fix a  X   X  K , E  X  (  X , X  ) := lim t E t (  X , X  ) and X i X (  X , X  ) i . Define a sequence of random variables Now we claim that B n := P n i =1  X  X i is a martingale with | B i +1  X  B i | X  1 and E B i = 0. That it is a martingale with zero expectation follows because if t is the time-step at the start of the exploration phase associated with variable X i , then E [ X i |F t ] = 0. | B i +1  X  B because discounted returns are bounded in [0 , 1 / (1  X   X  )] and by the definition of X i .
 For all j  X  N , we have by Azuma X  X  inequality that Apply the union bound over all j .
 Complete the result by the union bound over all  X  , applying Lemma 10 (see Appendix) and the definition We are now ready to give a high-probability bound on the number of proper exploration phases. If MERL starts a proper exploration phase at time-step t then at least one of the following holds: 1. E [ X (  X  , X  ) E (  X  , X  ) |F t ] &gt; (1  X   X  ) / 8. 2. E [ X (  X , X  ) E (  X , X  ) |F t ] &gt; (1  X   X  ) / 8. This contrasts with E [ X (  X , X  ) E (  X , X  ) |F t ] = 0, which en-sures that  X  remains in M for all time-steps. If one could know which of the above statements were true at each time-step then it would be comparatively easy to show by means of Azuma X  X  inequality that all environ-ments that are not -close are quickly eliminated after O ( 1 2 (1  X   X  ) 2 )  X  -exploration phases, which would lead to the desired bound. Unfortunately though, the truth of (1) or (2) above cannot be determined, which greatly increases the complexity of the proof.
 Proof of Lemma 4 Fix a  X   X  K and let E max , X  be a constant to be chosen later. Let h t be the history at the start of some  X  -exploration phase. We say an (  X  , X  )-exploration phase is  X  -effective if
E [ X (  X  , X  ) E (  X  , X  ) |F t ]  X  (1  X   X  )( V  X   X  ( h t ; d )  X  V and  X  -effective if the same condition holds for  X  . Now since t is the start of a proper exploration phase we have that  X   X  X  t and so Therefore every proper exploration phase is either  X  -effective or  X  -effective. Let E t, X  := P  X  E t (  X , X  ), which is twice the number of  X  -exploration phases at time t and E  X  , X  := lim t E t, X  , which is twice the total number of  X  -exploration phases. 1 Let F t (  X , X  ) be the number of  X  -effective (  X , X  )-exploration phases up to time-step t . Since each proper  X  -exploration phase is either  X  -effective or  X  -effective or both, P  X  F t (  X , X  )  X  E t, X  Applying Lemma 8 to y  X  := E t (  X , X  ) /E t, X  and x  X  := F (  X , X  ) /E t (  X , X  ) shows that if E  X  , X  &gt; E max , X  there exists a t 0 and  X  such that E t 0 , X  = E max , X  and which implies that Let Z (  X  ) be the event that there exists a t 0 satisfying (1). We will shortly show that P { Z (  X  ) } &lt;  X / (4 N |K| ). Therefore
P { E  X  , X  &gt; E max , X  } X  P { X   X  : Z (  X  ) } X  X Finally take the union bound over all  X  and let where we used 1 2 E max , X  because E max , X  is a high-probability upper bound on E  X  , X  , which is twice the number of  X  -exploration phases. Bounding P { Z (  X  ) } &lt;  X / (4 N |K| ). Fix a  X   X  M and let X 1 ,X 2 ,  X  X  X  ,X E  X  (  X , X  ) be the sequence with X i := X (  X , X  ) i and let t i be the corresponding time-step at the start of the i th (  X , X  )-exploration phase. Define a sequence Let  X  ( E ) := q 2 E log E  X  time-step t  X  t 0 with E t (  X ,t ) =  X  j for some j  X  N is which exists and satisfies 1. E t (  X , X  ) =  X  j for some j . 2. E  X  (  X , X  ) &gt; E t (  X , X  ). 3. F t (  X , X  )  X  p E t (  X , X  ) E max , X  / (16 N ). 4. E t (  X , X  )  X  E max , X  / (16 N ). where parts 1 and 2 are straightforward and parts 3 and 4 follow by the definition of {  X  j } , which was chosen specifically for this part of the proof. Since E  X  (  X , X  ) &gt; E t (  X , X  ), at the end of the exploration phase starting at time-step t ,  X  must remain in M . Therefore where in (a) we used the definition of the confidence in-terval of MERL. In (b) we used the definition of Y i and the fact that E X i  X  0 for all i and E X i  X   X  (1  X   X  ) / 2 if X i is effective. Finally we used the lower bound on the number of effective  X  -exploration phases, F t (  X , X  ) then by applying Lemma 9 with a = 2 9 N 2 b = 1 / X  1 we obtain
E Multiplying both sides by  X  j and rearranging and us-ing the definition of  X  (  X  j ) leads to Inserting this into Equation (3) shows that Z (  X  ) im-plies that there exists an  X  j such that P  X  j i =1 Y  X   X  (  X  j ). Now by the same argument as in the proof of Lemma 2, B n := P n i =1 Y i is a martingale with | B i +1  X  B i | X  1. Therefore by Azuma X  X  inequality Finally apply the union bound over all j .
 Recall that if MERL is exploiting at time-step t , then  X  t is the optimal policy with respect to the first en-vironment in the model class. To prove Lemma 3 we start by showing that in this case  X  t is nearly-optimal. Lemma 5. Let t be a time-step and h t be the corre-sponding history. If  X   X  M t and MERL is exploiting (not exploring), then V  X   X  ( h t )  X  V  X  t  X  ( h t )  X  5 / 8 . Proof of Lemma 5 Since MERL is not exploring (a) follows by truncating the value function. (b) fol-lows because  X   X  M t and MERL is exploiting. (c) is true since  X  t is the optimal policy in  X  t .
 Lemma 5 is almost sufficient to prove Lemma 3. The only problem is that MERL only follows  X  t =  X   X   X  til there is an exploration phase. The idea to prove Lemma 3 is as follows: 1. If there is a low probability of entering an explo-2. The number of time-steps when the probability Before the proof of Lemma 3 we remark on an eas-ier to prove (but weaker) version of Theorem 1. If MERL is exploiting then Lemma 5 shows that V  X   X  ( h )  X  Q  X  ( h, X  ( h ))  X  5 / 8 &lt; . Therefore if we cared about the number of time-steps when this is not the case (rather than V  X   X   X  V  X   X  ), then we would already be done by combining Lemmas 4 and 5.
 Proof of Lemma 3 Let t be the start of a proper failure phase with corresponding history, h . Therefore V  X  ( h )  X  V V  X  ( h )  X  V and so We define set H  X   X  X   X  to be the set of extensions of h that trigger  X  -exploration phases. Formally H  X   X  H  X  is the prefix free set such that h 0 in H  X  if h @ h 0 and h triggers a  X  -exploration phase for the first time since t . Let H  X ,d := { h 0 : h 0  X  X   X   X  ` ( h 0 )  X  t + d } , which is the set of extensions of h that are at most d long and trigger  X  -exploration phases. Therefore 3 8 (a) follows from Equation (4). (b) by noting that that  X  =  X  t until an exploration phase is triggered. (c) by replacing H  X  with H  X ,d and noting that if h 0  X  H  X   X  H V  X  ( h truncate the value functions. (e) by the definition of a  X  -exploration phase.
 Since the maximum of a set is greater than the aver-age, there exists a  X   X  X  such that P h 0  X  X  2  X   X   X  3 / |K| , which is the probability that MERL en-counters a  X  -exploration phase within d time-steps from h . Now fix a  X  and let t 1 ,t 2 ,  X  X  X  ,  X  X  X  ,t G  X  sequence of time-steps such that t i is the start of a fail-ure phase and the probability of a  X  -exploration phase within the next d time-steps is at least 2  X   X   X  3 / |K| . Let Y i  X  { 0 , 1 } be the event that a  X  -exploration phase does occur within d time-steps of t i and define an auxiliary infinite sequence  X  Y 1 ,  X  Y 2 ,  X  X  X  by if i  X  G  X  and 1 otherwise. Let E  X  be the num-ber of  X  -exploration phases and G max , X  be a constant to be chosen later and suppose G  X  &gt; G max , X  , then P E max , X  or E  X  &gt; E max , X  , where the latter follows be-cause Y i = 1 implies a  X  -exploration phase occurred. Therefore We now choose G max , X  sufficiently large to bound the first term in the display above by  X / (4 |K| ). By the definition of  X  Y i and Y i , if i  X  G  X  then E [  X  Y 2  X   X   X  3 / |K| and for i &gt; G  X  ,  X  Y i is always 1. Setting is sufficient to guarantee E [ P G max , X  i =1  X  Y i ] &gt; 2 E an application of Azuma X  X  inequality to the martingale difference sequence completes the result. Finally we apply the union bound over all  X  and set G max := P In the last section we presented MERL and proved a sample-complexity bound for the case when the envi-ronment class is finite. In this section we show that if the number of environments is infinite, but compact with respect to the topology generated by a natural metric, then sample-complexity bounds are still pos-sible with a minor modification of MERL. The key idea is to use compactness to cover the space of envi-ronments with -balls and compute statistics on these balls rather than individual environments. Since all environments in the same -ball are sufficiently close, the resulting statistics cannot be significantly different and all analysis goes through identically to the finite case. Define a topology on the space of all environ-ments induced by the pseudo-metric Theorem 6. Let M be compact and coverable by N -balls then a modification of Algorithm 1 satisfies The main modification is to define statistics on ele-ments of the cover, rather than specific environments. 1. Let U 1 ,  X  X  X  ,U N be an -cover of M . 2. At each time-step choose U and U such that  X   X  U 3. Define statistics { X } on elements of the cover, 4. If there exists a U where the test fails then elimi-The proof requires only small modifications to show that with high probability the U containing the true environment is never discarded, while those not con-taining the true environment are if tested sufficiently often.
 If the environment class is non-compact then we can-not in general expect finite sample-complexity bounds. Indeed, even asymptotic results are usually not possi-ble.
 Theorem 7. There exist non-compact M for which no agent has a finite PAC bound.
 The obvious example is when M is the set of all en-vironments. Then for any policy M includes an envi-ronment that is tuned to ensure the policy acts sub-optimally infinitely often. A more interesting example is the class of all computable environments, which is non-compact and also does not admit algorithms with uniform finite sample-complexity. See negative results by Lattimore &amp; Hutter (2011b) for counter-examples. We now turn our attention to the lower bound. In specific cases, the bound in Theorem 1 is very weak. For example, if M is the class of finite MDPs with | S | states then a natural covering leads to a PAC bound with exponential dependence on the state-space while it is known that the true dependence is at most quadratic. This should not be surprising since infor-mation about the transitions for one state gives infor-mation about a large subset of M , not just a single environment. We show that the bound in Theorem 1 is unimprovable for general environment classes except for logarithmic factors. That is, there exists a class of environments where Theorem 1 is nearly tight. The simplest counter-example is a set of MDPs with four states, S = { 0 , 1 ,  X  , } and N actions, A = { a 1 ,  X  X  X  ,a N } .
 The rewards and transitions are depicted in the figure on the right where the transi-tion probabilities depend on the action. Let M := {  X  1 ,  X  X  X  , X  N } where for  X  k we set ( a i ) = [[ i = k ]] (1  X   X  ).
 Therefore in environment  X  k , a k is the optimal ac-tion in state 1. M can be viewed as a set of bandits with rewards in (0 , 1 / (1  X   X  )). In the bandit domain tight lower bounds on sample-complexity are known and given in Mannor &amp; Tsitsiklis (2004). These re-sults can be applied as in Strehl et al. (2009) and Lat-timore &amp; Hutter (2012) to show that no algorithm has Summary. The Maximum Exploration Reinforce-ment Learning algorithm was presented. For finite classes of arbitrary environments a sample-complexity bound was given that is linear in the number of envi-ronments. We also presented lower bounds that show that in general this cannot be improved except for log-arithmic factors. Learning is also possible for com-pact classes with the sample complexity depending on the size of the smallest -cover where the distance between two environments is the difference in value functions over all policies and history sequences. Fi-nally, for non-compact classes of environments sample-complexity bounds are typically not possible.
 Running time. The running time of MERL can be arbitrary large since computing the policy maximising  X  depends on the environment class used. Even as-suming the distribution of observation/rewards given the history can be computed in constant time, the val-ues of optimal policies can still only be computed in time exponential in the horizon.
 Future work. MERL is close to unimprovable in the sense that there exists a class of environments where the upper bound is nearly tight. On the other hand, there are classes of environments where the bound of Theorem 1 scales badly compared to the bounds of tuned algorithms (for example, finite state MDPs). It would be interesting to show that MERL, or a vari-ant thereof, actually performs comparably to the opti-mal sample-complexity even in these cases. This ques-tion is likely to be subtle since there are unrealistic classes of environments where the algorithm minimis-ing sample-complexity should take actions leading di-rectly to a trap where it receives low reward eternally, but is never (again) sub-optimal. Since MERL will not behave this way it will tend to have poor sample-complexity bounds in this type of environment class. This is really a failure of the sample-complexity op-timality criterion rather than MERL, since jumping into non-rewarding traps is clearly sub-optimal by any realistic measure.
 Acknowledgements. This work was supported by ARC grant DP120100950.
 Lemma 8. Let x,y  X  [0 , 1] N satisfy P N i =1 y i = 1 and P Lemma 9. Let a,b &gt; 2 and x := 4 a (log ab ) 2 . Then x  X  a log bx .
 Lemma 10. Let  X  j :=  X  j where  X  := 4 P Auer, P., Jaksch, T., and Ortner, R. Near-optimal regret bounds for reinforcement learning. J. Mach.
Learn. Res. , 99:1563 X 1600, August 2010. ISSN 1532-4435.
 Azar, M., Munos, R., and Kappen, B. On the sam-ple complexity of reinforcement learning with a gen-erative model. In Proceedings of the 29th interna-tional conference on machine learning , New York, NY, USA, 2012. ACM.
 Chakraborty, D. and Stone, P. Structure learning in ergodic factored mdps without knowledge of the transition function X  X  in-degree. In Proceedings of the Twenty Eighth International Conference on Ma-chine Learning (ICML X 11) , 2011.
 Diuk, C., Li, L., and Leffler, B. The adaptive k -meteorologists problem and its application to struc-ture learning and feature selection in reinforcement learning. In Danyluk, Andrea Pohoreckyj, Bottou,
L  X eon, and Littman, Michael L. (eds.), Proceedings of the 26th Annual International Conference on Ma-chine Learning (ICML 2009) , pp. 249 X 256. ACM, 2009.
 Even-dar, E., Kakade, S., and Mansour, Y. Reinforce-ment learning in POMDPs without resets. In In IJCAI , pp. 690 X 695, 2005.
 Hutter, M. Self-optimizing and Pareto-optimal policies in general environments based on Bayes-mixtures. In Proc. 15th Annual Conf. on Computational
Learning Theory (COLT X 02) , volume 2375 of LNAI , pp. 364 X 379, Sydney, 2002. Springer, Berlin. URL http://arxiv.org/abs/cs.AI/0204040 .
 Lattimore, T. and Hutter, M. Time consistent dis-counting. In Kivinen, Jyrki, Szepesv  X ari, Csaba,
Ukkonen, Esko, and Zeugmann, Thomas (eds.), Al-gorithmic Learning Theory , volume 6925 of Lecture
Notes in Computer Science . Springer Berlin / Hei-delberg, 2011a.
 Lattimore, T. and Hutter, M. Asymptotically optimal agents. In Kivinen, Jyrki, Szepesv  X ari, Csaba, Ukko-nen, Esko, and Zeugmann, Thomas (eds.), Algorith-mic Learning Theory , volume 6925 of Lecture Notes in Computer Science . Springer Berlin / Heidelberg, 2011b.
 Lattimore, T. and Hutter, M. PAC bounds for dis-counted MDPs. Technical report, 2012. http://tor-lattimore.com/pubs/pac-tech.pdf.
 Maillard, Odalric-Ambrym, Nguyen, Phuong, Ort-ner, Ronald, and Ryabko, Daniil. Optimal regret bounds for selecting the state representation in re-inforcement learning. In Proceedings of the Thirti-eth International Conference on Machine Learning (ICML X 13) , 2013.
 Mannor, S. and Tsitsiklis, J. The sample complexity of exploration in the multi-armed bandit problem. J. Mach. Learn. Res. , 5:623 X 648, December 2004. ISSN 1532-4435.
 Ryabko, D. and Hutter, M. On the possibility of learn-ing in reactive environments with arbitrary depen-dence. Theoretical Computer Science , 405(3):274 X  284, 2008.
 Strehl, A. and Littman, M. A theoretical analysis of model-based interval estimation. In Proceedings of the 22nd international conference on Machine learn-ing , ICML  X 05, pp. 856 X 863, 2005.
 Strehl, A., Li, L., and Littman, M. Reinforcement learning in finite MDPs: PAC analysis. J. Mach. Learn. Res. , 10:2413 X 2444, December 2009.
 Sunehag, P. and Hutter, M. Optimistic agents are asymptotically optimal. In Proceedings of the 25th Australasian AI conference , 2012.
 Szita, I. and Szepesv  X ari, C. Model-based reinforce-ment learning with nearly tight exploration com-plexity bounds. In Proceedings of the 27th inter-national conference on Machine learning , pp. 1031 X 
