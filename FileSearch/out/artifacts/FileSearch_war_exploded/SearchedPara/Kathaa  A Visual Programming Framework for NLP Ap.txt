 Natural Language Processing systems are inherently very complex, and their design is heavily tied up with their implementation. There is a huge diversity in the way the individual components of the com-plex system consume, process and spit out infor-mation. Apart from that, many of the components also have associated services which in many cases are really hard to replicate and/or setup. Hence, most researchers end up writing their own in-house methods for gluing the components together, and in some cases, own in-house re-implementations of the individual components, often inefficient re-implementations. And on top of that, most of the popular NLP components make many assumptions about the technical proficiency of the user who will be using those components. All of these factors clubbed together shut many potential users out of the whole ecosystem of NLP systems, and hence many potentially creative applications of these com-ponents. With Kathaa, we aim to separate the design and implementation layers of Natural Language Pro-cessing systems, and efficiently pack every compo-nent into consistent and reusable black-boxes which can be made to interface with each other through an intuitive visual interface, irrespective of the software environment in which the components reside, and irrespective of the technical proficiency of the user using the system. Kathaa builds on top of numerous ideas explored in the academia around Visual Pro-gramming Languages in general(Green and Petre, 1996) (Shu, 1988) (Myers, 1990), and also on Vi-sual Programming Languages in the context of NLP (Cunningham et al., 1997). Kathaa Modules are the basic units of computa-tion in the proposed Visual Programming Frame-work. They consume the input(s) across multiple input channels, process them, and finally pass on their output(s) across the many output channels they might have. The user has access to a whole array of such modules with different utilities via the Kathaa Module Library. The user can connect together these modules in any combination as he pleases, as long as the modules are compatible with each other. The user also has the ability to tinker with the function-ality of a particular module in real time by using an embedded code editor in the Kathaa Web Interface during or before the execution of the Kathaa Graph. 2.1 Kathaa Data Blobs Every module receives inputs across multiple chan-nels, or ports. Every input channel receives the data in the form of a series of kathaa-data-blobs , and all the input channels have the exact same number of kathaa-data-blobs. Data blobs are processed in par-allel by different instances of the same module dur-ing execution, and most modules generate the same number of data blobs across all their output chan-nels. The concept of numerous data blobs spread across multiple input channels enables us to effi-ciently empower module writers to leverage from the inherent parallelizability in tasks performed by numerous NLP components. For example, some modules might work at the level of sentences, so if we have multiple sentences as inputs to this module, all of them are passed as different kathaa-data-blobs so that the framework can efficiently parallelize their processing depending, of course, on the availability of resources. Similarly, other modules could expect parallelizability at the level of words, or phrases or even a whole discourse. The kathaa-data-blobs were very much inspired by the data-blobs used in Caffe. (Jia et al., 2014) 2.2 Types of Kathaa Modules 2.2.1 Kathaa General Modules
As mentioned previously, most modules produce the exact same number of kathaa-data-blobs as they receive across their input channels. This can be guaranteed because during execution, all the paral-lel instances of the module are provided only a sin-gle kathaa-data-blob in each of their input channels, and when they are done processing, they write a sin-gle kathaa-data-blob across their output channels. The kathaa-orchestrator deals with the separation of the blobs before passing the inputs to the mod-ule instance, and the aggregation of the blobs after each instance of the module has finished processing their corresponding kathaa-data-blobs. These type of modules can be basically called as the Kathaa General Modules . To illustrate the above described concepts we implement a very simple Echo mod-a single channel, and spits out the same into a single output channel. We also have a very flexible imple-quick starting point when defining Kathaa General Modules. 2.2.2 Kathaa Blob Adapters
Kathaa Blob Adapters , on the other hand are a class of Kathaa Modules, which are provided with all the blobs across all their input channels at the same time, and they have the ability to modify the number of blobs and pass it over to their output channels. They can be used in giving the user a more fine grained control over the parallalizability of dif-ferent parts of their Kathaa graphs by using kathaa-data-blobs. For example, a graph which receives a whole discourse as a single blob, might want to pro-cess the sentences parallely, and they could use a as a single kathaa-data-blob into multiple kathaa-data-blobs each representing a single sentence, and when finally the user desired processing of the in-could be used to aggregate the processed sentences again into a single kathaa-data-blob. Similar kathaa-blob-adapters could be implemented to deal with splitting and aggregation of kathaa-data-blobs at the level of words, phrases, or even some custom logic. Kathaa Blob Adapters will be crucial in exercising the control over the inherent parallalisation support in Kathaa Orchestrator. For example, in contrast to the example cited above, if we are dealing cer-tain language processing tasks which are inherently not parallalizable after a certain level of granular-ity, like say Anaphora Resolution, Multi Document Summarisation, etc, the user will have to use an ap-propriate Kathaa Blob Adapter, to make sure that all the information that is required for the partic-ular language processing task is available as a sin-gle blob to be passed onto the module. In the case of Anaphora Resolution, a single Kathaa Blob will contain a string of N sentences, and in the case of Multi Document Summarisation, a single Kathaa Blob will contain a string of M Documents. In both the previous cases, the module can receive multi-ple such Kathaa Blobs, which can then be processed parallely based on the availability of resources. 2.2.3 Kathaa User Intervention Module
In some NLP systems, the overall execution of the system might have to halt for some kind of user feed-back. Like in the case of resource creation, where for example, you start with a bunch of sentences, parse them using an available parser module, and then you would want to add Anaphora annotations by a human annotator (Sangal and Sharma, 2001). In that case, a Kathaa User Intervention Module could be used, where the overall execution at the par-ticular node in the graph halts till the user modifies the kathaa-data-blobs as he pleases and resumes the execution at the said node. Kathaa core implements 2.2.4 Kathaa Resource Module Kathaa Resource Modules are the class of Kathaa Modules which do not do any processing of the data, but instead they store and provide a corpus of text which can be used by any of the modules in the whole graph during execution. 2.2.5 Kathaa Evaluation Module
The aim of Kathaa is to provide an intuitive en-vironment for not only prototyping and deployment but also debugging and analysis of NLP system. Hence, we include a class of modules called as Kathaa Evaluation Modules which very much like Kathaa Blob Adapters receive all the blobs across all the input channels, and do some analysis and spit out the results into the output channels. While in prin-ciple this a subset of Kathaa Blob Adapters, these modules enjoy a separate category among Kathaa Modules because of their utility in designing com-plex NLP systems. We implement a sample classi-up with easy to visualize confusion matrices to aid them in evaluating the performance of any of their subsystems. This could act as a starting point for easily implementing any other Evaluation modules. 2.3 Kathaa Module Services Most popular NLP Components work in completely different software environments, and hence stan-dardizing the interaction between all of them is a highly challenging task. Kathaa allows every mod-ule to define an optional service by referencing a publicly available docker container in the module definition. Kathaa deals with the life-cycle man-agement of the referenced containers on a config-urable set of Host Machines. The corresponding kathaa-modules function definition then acts as a light weight wrapper around this service. This fi-nally enables different research groups to publish their service in a consistent and reusable way, such that it fits nicely in the Kathaa Module ecosystem. 2.4 Kathaa Module Packaging and Kathaa Modules reside as a collection of Kathaa Module Groups in a publicly accessible git Repos-itory. Each of these modules have a specification definition file called as package.json , where the author of the module has to specify the basic meta-data about the module like the name, version, input channels, output channels, etc. The user has the op-tion to reference the corresponding Kathaa-Service by referencing the Docker container in this file. The type of the input and output channels can also be specified to mark compatibility of different modules with each other. A sample example of a Kathaa module template can be seen in the case of the cus-a particular Kathaa Instance can be referenced di-rectly by their publicly available links on the Kathaa Server, and under the hood, Kathaa deals with the dependency resolution of the modules, download-ing of all the modules, instantiation of the associated Docker Container if any, etc. 2.5 Kathaa Interface Kathaa Interface lets the user design any complex NLP system as a Directed Acyclic Graph with the Kathaa Modules as nodes, and edges being the flow of kathaa-data-blobs between them. Users have the option to not only execute any such graph, but also interact with it in real time by changing both the state and functionality of any of the module right from within the interface. It can be a really useful aid in debugging complex systems, as it lets the User easily visualize and modify the flow of kathaa-data-blobs across the whole Kathaa Graph. Apart from that, it also encourages code-reuse by lettings users  X  X ork X  a graph, or  X  X emix X  the designs of NLP sys-tems to come up with better and adapted versions of the same systems. 2.6 Kathaa Orchestrator Kathaa Orchestrator is at the core of the whole Vi-sual Programming Framework. Kathaa Orchestrator obtains the structure of the Kathaa Graph and the ini-tial state of the execution initiator modules from the Kathaa Interface, and then it goes on to efficiently orchestrate the execution of the graph depending on the nature and state of the modules, while dealing with process parallelisms, module dependencies, etc under the hood. Kathaa, as a Visual Programming Framework was developed with Sampark Machine Translation Sys-tem as a use case. We ported all the modules Pipelines of Sampark Machine Translation System into Kathaa (SAM, 2016). We then demonstrated the use of Kathaa in creation of NLP Resources by the use of Kathaa User Intervention modules, and also moved on to demonstrate visual analysis of dif-ferent classification approaches by using the Kathaa-Classification-Evaluation module. We are currently also exploring the use of Kathaa in classrooms to help students interact with and design complex NLP systems with a much lower barrier to entry. All these example Kathaa Graphs are the seed Graphs that are included in the repository, and can be used out of the box. It is important to note that these use cases that we managed to explore are only the tip of the iceberg when it comes to what is possible using a framework like Kathaa. One of the key features in Kathaa which enables for it to be used in a whole range of use cases is the easy extensibility. The Kathaa Module Defini-tion API, enables the user of the system to theoreti-cally define any function as a Kathaa Module. Also, Kathaa internally works using event triggers, hence making it a practical possibility to define modules which may run for days or weeks, quite helpful when exploring Kathaa for use cases where the user might want to define a Kathaa Module which trains a model based on some pre-processed data. The NPM(Tilkov and Vinoski, 2010) inspired packag-ing system, is again something which we believe can help with large scale adoption of a system like Kathaa. It paves the way for a public contributed repository of NLP components, all of which can be mashed together in any desired combination. The ability to optionally package individual services us-ing Docker Containers also helps make a strong case when pitching for the possibility of a large public contributed repository of NLP components. These are a few things which set Kathaa apart from already existing systems like LAPPS Grid(Ide et al., 2014), ALVEO(Cassidy et al., 2014) where the easy exten-sibility of the system is a major bottleneck in its large scale adoption. The interoperability between existing systems is also of key importance, and the design of Kathaa accommodates for its easy adap-tation to be used along with other similar system. The assumption, of course, is that a wrapper Kathaa Module has to be designed for each target system using the Kathaa Module Definition API. The wrap-per modules would be completely decoupled from the Kathaa Core codebase, and hence can be de-signed and implemented by anyone just like any other Kathaa Module.

A demonstration video of many features and use cases of Kathaa is also available to view at : We demonstrate an open source web based Visual Programming Framework for NLP Systems, and make it available for everyone to use under a MIT License. We hope our efforts can in some way cat-alyze more new and creative applications of NLP components, and enables an increased number of re-searchers to more comfortably tinker with and mod-ify complex NLP Systems.
 The first real world implementation of a Kathaa Graph was achieved by porting numerous modules from Sampark MT system developed during the  X  X n-dian Language to India Language Machine trans-lation X  (ILMT) consortium project funded by the TDIL program of Department of Electronics and Information Technology (DeitY), Govt. of India. Kathaa is built with numerous open source tools and libraries, an (almost) exhaustive list of which is available in the Github Repository of the project, and we would like to thank each and every contrib-utor to all those projects.

