 With the rapid prevalence of smart mobile devices, the num-ber of mobile Apps available has exploded over the past few years. To facilitate the choice of mobile Apps, existing mo-bile App recommender systems typically recommend popu-lar mobile Apps to mobile users. However, mobile Apps are highly varied and often poorly understood, particularly for their activities and functions related to privacy and secu-rity. Therefore, more and more mobile users are reluctant to adopt mobile Apps due to the risk of privacy invasion and other security concerns. To fill this crucial void, in this pa-per, we propose to develop a mobile App recommender sys-tem with privacy and security awareness. The design goal is to equip the recommender system with the functionality which allows to automatically detect and evaluate the secu-rity risk of mobile Apps. Then, the recommender system can provide App recommendations by considering both the Apps X  popularity and the users X  security preferences. Specifi-cally, a mobile App can lead to security risk because insecure data access permissions have been implemented in this App. Therefore, we first develop the techniques to automatically detect the potential security risk for each mobile App by exploiting the requested permissions. Then, we propose a flexible approach based on modern portfolio theory for rec-ommending Apps by striking a balance between the Apps X  popularity and the users X  security concerns, and build an App hash tree to efficiently recommend Apps. Finally, we evaluate our approach with extensive experiments on a large-scale data set collected from Google Play. The experimental results clearly validate the effectiveness of our approach. H.2.8.d [ Information Technology and Systems ]: Database Applications -Data Mining Mobile Apps, Recommender Systems, Security and Privacy Corre sponding Author.

Recent years have witnessed the rapid and increased preva-lence of smart mobile devices, such as smart phones, a huge number of mobile Apps have been developed for mobile users. For example, as of the end of July 2013, the Google Play has had over 1 million Apps and there have been over 50 billion cumulative downloads, and these numbers are still growing dramatically. Due to the prospering mobile App industry, the functionalities of smart devices have been in-tensely extended to meet diversified user needs. However, mobile Apps are highly varied and often poorly understood, particularly for their activities and functions related to pri-vacy and security. Indeed, to improve user experiences, more and more advanced mobile Apps are committed to provide intelligent and personalized services for users, such as loca-tion based services and social sharing services. These ser-vices usually involve access permissions of users X  personal data, such as real-time locations and the contact lists.
However, such intelligent mobile Apps may result in the potential security and privacy risks for users. For instance, users may not expect their locations (e.g., home locations, workplaces) and other privacy information (e.g., contact lists, SMS records) to be spied by the third party Apps. In fact, as reported by NBC News 1 , consumers have grown so con-cerned about privacy on their mobile phones. Many con-sumers have avoided downloading some mobile Apps, and many others have removed Apps which may have access to their personal data. Also, a recent survey from IDG News 2 reveals that 54% of U.S. mobile App users surveyed have de-cided not to install an App when they discovered how much personal information it would collect, and 30% of App users have uninstalled an App after learning about the personal information it collected. Therefore, the development of a mobile App recommender system with security and privacy awareness becomes critical for the healthy development of the mobile App industry.

In the literature, there are recent studies about security and privacy issues of mobile Apps, and mobile App recom-mendations. For example, some works are focused on mal-ware code detection [6, 13], the security middleware develop-ment [7, 20], and the App access permission model develop-ment [5, 8]. However, these works either need to analyze the source code of each mobile App, or detect the system API calls during the App running. Indeed, these approaches are very hard to be implemented in practice, since it is not a trivial task to efficiently and accurately detect the malware h ttp://www.nbcnews.com/ http://www.idg.com/ Fi gure 1: A demo system of mobile App recommen-dations with security and privacy awareness. codes for each mobile App and users often do not want some security software to frequently scan their devices. Mean-while, in the area of mobile App recommendation, some works studied the personalized App recommendation meth-ods [17], the intelligent mobile App recommendations by exploiting enriched contextual information [10, 21], and the problem of App ranking fraud detection [22]. However, all these works only consider user preferences about the Apps X  popularity (e.g., ratings, downloads), but not the security and privacy risks inherent in the mobile Apps.
 To this end, in this paper, we propose to develop a mobile App recommender system with security and privacy aware-ness. The design goal is to equip the recommender system with the ability to automatically detect and evaluate the security and privacy risks of mobile Apps. Also, when ap-plying this recommender system for App recommendations, it should be able to strike a balance between the Apps X  pop-ularity and the users X  security preferences. Figure 1 shows the interface of our demo system for mobile App recom-mendations with security and privacy awareness. In this system, users can select different evaluation metrics, such as Popularity, Security, and Hybrid, to obtain App recom-mendations with respect to their preferred security levels. While we do not aim at developing personalized App rec-ommender systems because the individual download statis-tics and App usage data are often not publicly available, our non-personalized App recommendations by consider-ing both popularity and security are very important for mo-bile App services. For instance, both Apple and Google pro-vide non-personalized top paid/free App recommendations based on the popularity information (e.g., overall download and rating) every day. However, they do not explore and consider the security preferences in their recommended top charts. Indeed, the developed system will be beneficial for the healthy development of the mobile App industry. However, there are two critical challenge for developing an App recommender system with security and privacy aware-ness. Specifically, the first challenge is how to effectively identify the security risks of mobile Apps from the large-scale mobile App data. The second challenge is how to strike a balance between the Apps X  popularity and the users X  con-cerns about security and privacy. Indeed, our careful ob-servation reveals that the potential security risks of mobile Apps are essentially caused by the data access permissions of each App, such as permissions requested for accessing real-time locations. Therefore, in this paper, we first pro-pose to exploit the requested permissions for detecting the potential security risk of each mobile App. The proposed approach is based on random walk regularization with an App-permission bipartite graph , which can learn the security risk of mobile Apps automatically without relying on any predefined risk function. Furthermore, based on the modern portfolio theory [16], we develop a flexible optimization ap-proach for recommending Apps by considering both Apps X  popularity and users X  concerns about security and privacy. Particularly, there are often many different security prefer-ences of mobile users, and a huge number of Apps as can-didates for recommendations. To enhance the performances of online App recommendations, we build an App hash tree to efficiently look up Apps. Finally, we evaluate our mobile App recommendation approach with extensive experiments on a large-scale real-world data set collected from Google Play, which contains 170,753 mobile Apps. The experimen-tal results clearly validate the effectiveness and efficiency of our approach in terms of different evaluation metrics.
In this section, we first introduce some preliminaries about the security/privacy problems of mobile Apps, and then in-troduce the framework of the proposed mobile App recom-mender system with security and privacy awareness.
The most advanced mobile operating systems, such as Ap-ple IOS, Google Android, and Microsoft Windows Phone, implement a sandbox which provides the security and pri-vacy policy for the third-party mobile Apps. To be specific, these operating systems isolate Apps from each other and the resources, thus feature a permission system [7]. To ac-cess the personal data in users X  mobile devices, the permis-sion system will convey users to grant corresponding data access permissions explicitly (e.g., IOS) or implicitly (e.g., Android) for each mobile App. Actually, these data access permissions may enter some sensitive resources in mobile users X  personal data, such as their locations or contact lists. For instance, Table 1 illustrates some examples of data ac-cess permissions in the Android system [1]. We can see that all these listed permissions contain potential security risks. For example, an App, which requests READ_CALENDAR and READ_SMS permissions, may access users X  personal calendar and short messages. This may not be comfortable for a busi-ness man due to the risks of leaking confidential information.
Indeed, all these data access permissions can be catego-rized into different levels with respect to their potential se-curity risks. For example, as defined by Android Develop-ers [1], there are three different threat levels for managing data access permissions,
To provide better services to users and gain more down-loads of Apps, mobile App developers try to request more and more data access permissions, which can help to im-plement the intelligent applications, such as social sharing services. However, these services may result in potential security and privacy risks. For example, Figure 2 shows an example of a mobile App in the Android market, which contains both popularity and security information. In this figure, we can observe that this App may request the per-mission of reading the users X  calender (i.e., READ_CALENDAR ), reading phone states (i.e., READ_PHONE_STATE ) and external USB/SD card storage (i.e., WRITE_EXTERNAL_STORAGE ). Al-though this is a quite popular App according to user ratings and the download information, it may still contain the po-tential risk of leaking user information. For instance, if this App is controlled by a Trojan, it could gather users X  calender information and phone numbers, then upload the informa-tion into external USB disk or SD card (when connected) via the above permissions. However, to the best of our knowl-edge, this kind of security risks is not taken into account in most existing mobile App recommender systems. Indeed, they only focus on the Apps X  popularity information (e.g., user ratings). Thus, we aim on developing a mobile App recommender system with security and privacy awareness.
Here, we first formally define the problem of mobile App recommendations with security and privacy awareness, and then show the recommendation framework.

Definition 1 (Problem Statement). Given a cat-egory label c , and a set of Apps A = { a } , each of which contains a set of data access permissions { p i } , profile infor-mation (e.g., category, popularity), the goal of mobile App recommendation with security and privacy awareness is to build an optimal ranked list of Apps in category c based on both the Apps X  popularity and users X  security preferences.
Indeed, the above problem statement raises two issues:
While it is appealing to provide mobile App recommenda-tions with security and privacy awareness, it is a non-trivial task to effectively discover and evaluate the security risks of Apps, and produce desirable ranking of Apps by considering both Apps X  popularity and users X  security preferences. In ad-dition, there are often many different security preferences of mobile users, and a huge number of Apps as candidates for recommendations. Thus, how to efficiently manage Apps for recommendation is also an open question. To that end, in this paper, we propose a novel recommendation framework to solve these problems.

Figure 3 shows the proposed recommendation framework, which consists of two stages. The offline learning stage au-tomatically learns the risk scores for Apps by leveraging the random walk regularization with an App-permission bipar-tite graph , and forms an App hash tree from the App data set for efficiently managing Apps. The online recommendation stage matches the given mobile users X  security preferences and App categories according to the App hash tree, ranks the candidate Apps with respect to both Apps X  popular-ity and users X  security preferences by leveraging the modern portfolio theory for recommendations.
Generally speaking, the risk score reflects the security level of an App. The smaller the score is, the more safe the App is. According to the above discussion, we can know the security risks are essentially caused by the data access permissions of Apps. Thus, an intuitive approach for mea-suring the risks of Apps is to directly check each of the dan-gerous permissions they request. However, there are many critical challenges along this line, which make the problem still under-addressed. First, it is hard to explicitly define a risk function with respect to different permissions for eval-uating the potential risks of mobile Apps, since the permis-sions are often very ambiguous and poorly understood [5, 8]. For example, we observe that although some permissions are dangerous (e.g., location related permissions), they are com-monly used in the Apps of some categories (e.g., navigation Apps). Second, the latent relationships between Apps and permissions should be taken into consideration, since similar Apps (permissions) should have similar risk scores. Finally, we should develop a scalable approach to refine risk scores, since rich external knowledge can be leveraged for evaluat-ing potential risks of Apps. For example, some external risk reports, the state-of-the-art security models in relevant do-mains as well as the prior knowledge from domain experts can be leveraged for improving the performance of ranking App risks. To deal with the above challenges, in this pa-per, we propose a regularization approach based on a bipar-tite graph, which can learn the security risk of mobile Apps automatically without relying on any predefined risk func-tion. Particularly, we develop an App-permission bipartite graph to build the connections between Apps and permis-sions, which is defined as follows.
 Definition 2 (App-permission Bipartite Graph).
 The graph can be denoted as G = { V; E; W } . V = { V a ; V is the node set, where V a = { a 1 ;  X  X  X  ; a M } denotes the set of Apps and V p = { p 1 ;  X  X  X  ; p N } denotes the set of permissions. E is the edge set, where e ij  X  E exists if and only if a quests the permission p j . W is the edge weight set, where each w ij  X  W represents the weight of e ij and denotes the probability that a i will request p j .

Figure 4 shows an example of App-permission bipartite graph. Intuitively, the weight w ij can be estimated by the permission records of all Apps in a i  X  X  category. Specifically, we can compute the weight by where f ij is the number of Apps in category c ( a i  X  c ) requesting permission p j . Furthermore, we can denote each App a j and permission p j as vectors and define the latent similarity between Apps a i and a j by the Cosine distance, Similarly, we define the latent similarity between permis-sions p i and p j as s p ij = Cos (
To estimate App risk scores with the App-permission bi-partite graph, we first define two scores Risk ( a i ) and Risk ( p for node a i  X  V a and p j  X  V p , respectively. Intuitively, Risk ( a i ) is the objective App risk score and Risk ( p ) is the global permission risk score. Second, we develop a regu-larization framework by regularizing the smoothness of the above two scores over the bipartite graph. Specifically, if we function as follows, wh ere and are the regularization parameters, e R a i and e R j are the prior risk scores derived from external knowledge . Intuitively, this cost function is formed by three parts. The first part controlled by defines the constraint that the two risk scores should fit prior knowledge. The second part controlled by defines the global consistency of the refined risk scores over the graph. Specifically, it satisfies that, if two Apps (permissions) have high latent similarity, their risk scores should be similar. The third part is the smoothness constraint between Apps and permissions, which guarantees that, if an App has high probability to request a specific per-mission, their risk scores should be similar. Therefore, the problem of estimating risk scores is converted to the opti-mization problem of finding optimal R a i and R p j to minimize the cost function Q . In this paper, we exploit the classic gradient descent method to solve this problem. Specifically, we first assign values to R a i = 1 =M and R p j = 1 =N and iter-atively update them by setting the following differentiated results to zero.
A fter each iteration, all the values of R a i and R a j will be nor-malized again, i.e.,  X  R a  X  1 = 1 and  X  R p  X  1 = 1. Finally, we can obtain the optimal risk scores after the results converge.
How to assign prior risk scores e R a i and e R p j from external knowledge is an open question. In practice, some intuitive solutions include inviting domain experts for assigning risk scores, building a security classifier through external risk reports, or exploiting state-of-the-art security models in rel-evant domains. In this paper, as an attempt, we leverage the probabilistic approach PNB (Naive Bayes with informa-tion Priors) proposed in [14] for this task, which is based on the scoring scheme, and thus can be directly adopted by our regularization framework. Specifically, PNB aims to learn a Naive Bayes model with parameter that can best explain the generative process of permissions, i.e., P ( p j | ). In this model, the parameter is assumed to follow the Beta prior Beta ( ; 0 ; 0 ), and the probability can be estimated by wh ere M is the total number of Apps and x i;j is a binary function which is equal to 1 (i.e., a i requests the permission p ) or 0 (i.e., a i does not request the permission p j ). Partic-ularly, PNB also defines three categories of permissions with respect to their threat levels (i.e., similar as the preliminaries in Section 2), and each category has a specific Beta ( ; 0 as informative priors. Therfore, the risk scores of permission p and App a i can be estimated by e R p j =  X  ln P ( p j | ) and e R both e R a i and e R p j are normalized before learning our regu-larization framework. Although PNB is a straightforward approach that cannot solve all the challenges mentioned be-fore, its effectiveness on ranking risks of Apps has been well proved. Therefore, using PNB as prior knowledge in our regularization framework is appropriate. A lgorithm 1 Automatic Detection of Security Levels 1: Rank A in descending order according to Risk ( a ); 2: L =  X  ; 3: for each i  X  [1 ; | A | ] do 4: A = L  X  X  A [ i ] } ; 6: if ( CV ( A ) &gt; ) then 7:  X  = L ; L =  X  is a new level; 8: else 9: L  X  = { A [ i ] } ; 10: end if 11: end for 12: return
Afte r computing the risk score for each mobile App, we can rank Apps in ascending order with respect to their risk scores for recommendations. Moreover, if some Apps have the same risk scores, they will be further ranked according to popularity scores (e.g., overall rating). However, for real-world App recommendation services, users may have difficul-ties to get clear perception about the risks of ranked Apps. A promising way to help users understand the different risks of Apps is to categorize the risks into discrete levels (e.g., Low, Medium, High). In fact, people often describe their perception about risk or security with such discrete levels. Therefore, in this paper, we further group Apps into differ-ent clusters, each of which has the same security level (e.g, Low or High). However, it is not easy to get an accurate and appropriate segmentation of Apps with respect to their risk scores due to the lack of appropriate benchmarks. To solve the above problem, we develop a Coefficient of Variation (CV) based approach to automatically segment mobile Apps. The main idea of this approach is that two adjacent Apps in the globally ranked list are assigned with different security levels, if their risk scores have dramatic differences, which can be captured by the CV, i.e., variance o f their risk scores. The detailed segmentation algorithm is shown in Algorithm 1. The parameter is a threshold used for determining the dramatic difference of CV. After segmentation, the Apps at lower security levels have higher security risk.

Now, we are able to recommend Apps for users. Specifi-cally, given a specific security level L and a category c , we can treat all the Apps in category c with security L  X  L as candidates. Intuitively, there are two types of ranking principles for recommending Apps.
Furthermore, we need to strike a balance between users X  security preferences and Apps X  popularity for recommenda-tions. To achieve such a balance, we also propose a hybrid principle for App recommendations, which is based on the modern portfolio theory [16]. The portfolio theory is origi-nally proposed in the field of finance, which focuses on the investment problem of financial market. For example, an investor often wants to select a portfolio of n stocks with a fixed investment budget, which will provide the maximum future return and the minimum risk. In our problem, the stocks can be regarded as Apps, the future return and risk can be regarded as popularity and security risk of Apps.
Specifically, an App portfolio  X  can be represented by a collection of n Apps with a corresponding weight w i assigned to each App a , i.e., Indeed, the weight w i in finance is the percentage of the bud-get invested in the i -th stock. According to the discussion in [19], the weight w i in our problem indicates how much attention the recommender system wants the target user to pay on the App a i . Therefore, the weights can be used to determine the ranks of Apps; that is, Apps should be ranked by the descending order of their weights. Before obtaining the weights, we first define the future return of the App portfolio as E [ X ], which can be computed by where  X  i is the rank of App a i in the popularity based ranked list  X  ( P op ) . Also, we define the future risk of the App portfolio as R [ X ], which can be computed by the following function [12], where  X  i is the rank of App a i in the risk based ranked list  X  ( Risk ) , and J ij is the risk correlation between Apps a and a j . Here, we estimate J ij according to the similarity of requested permissions. For any two Apps, the more common permissions are requested, the higher risk similarity they have. To this end, we compute J ij using Jaccard coefficient between Apps a i and a j by, where N i is the number of permissions requested by App a and N ij is the number of common permissions requested by two Apps a i and a j .

In our problem, the objective is to learn a set of App weights w for maximizing the future return and minimizing the risk of the App portfolio  X  that consists of recommen-dation candidates (App candidates), i.e., where b is a specified risk preference parameter, which is de-fined as the given security level L in our experiments. The above optimization problem can be solved by the efficient frontier based approach introduced in [19]. Specifically, we can obtain the optimal weight w by can be computed by where x = 1 T  X  1 1 , y = 1 T  X  1 E , and z = E T  X  1 E .
After ranking Apps with respect to three different princi-ples, the final challenge is how to organize and index such a large number of Apps with respect to their security levels and categories. Indeed, in an online App recommender sys-tem, it is necessary to quickly response users X  requests and efficiently manage Apps in its back-end servers. To this end, we propose a data structure for App retrieval, namely App hash tree . Figure 5 illustrates an example of an App hash tree, which contains two hierarchies, namely a category level and a security level. For each node in the tree, it holds a hash table to store the index of corresponding Apps. For example, the node  X  Root  X  c 1  X  l 3  X  may store the index of all Apps belong to category c 1 and security level l 3 . Note that the App hash tree can be easily built with some ba-sic tree search algorithms (e.g., Breadth-First-Search in our experiments). Actually, the ranking results of Apps in each node can be computed offline and pre-stored in the corre-sponding nodes of the App hash tree. Therefore, during the online recommendation, the system can quickly look up the ranked list for recommendations to users based on their specific security levels and App categories. In this section, we empirically evaluate the S ecurity and P rivacy aware mobile A pp R ecommendation (SPAR) ap-proach with a large-scale real-world data set.
 Fi gure 6: The percent of Apps and the average num-ber of requested permissions by each App in differ-ent categories.
 Fi gure 7: The top 25 most used permissions in our data set and the percent of Apps that request those permissions.
The experimental data were collected from Google Play (Android Market) [4] in 2012. This real-world data set in-cludes 170,753 Apps in 30 App categories, and the Apps have 173 unique data access permissions. Particularly, the data set includes more than 25% Apps available at the An-droid Market, which totally includes 675,000 Apps as of the end of September 2012 [3].

Figure 6 and Figure 7 illustrate some statistics of the data set. Specifically, Figure 6 shows the percent of Apps and the average number of requested permissions by each App in dif-ferent categories. In this figure, we can observe that Apps in categories  X  X ommunication X ,  X  X usiness X  and  X  X ocial X  re-quest more permissions. Figure 7 shows the top 25 most requested permissions and the percent of Apps that request those permissions. In this figure, we can find that most of the Apps request the network and location related permis-sions. To further study the relationship between permissions and Apps, we show the distributions of the number of Apps with respect to the number of requested permissions in Fig-ure 8 (a). We can see that most of the Apps only request few permissions, which may indicate that not many Apps have security risks. Figure 8 (b) shows the distribution of the number of Apps with respect to the number of their rat-ings. We can find that the distribution roughly follows the Figure 8: The distribution of the number of Apps w.r.t (a) the number of requested access permis-sions, and (b) the number of their ratings. Figure 9: The percent of (a) Apps and (b)-(d) App categories at different security levels. power law. This indicates that only using App popularity for recommendation is not enough.
In this subsection, we evaluate the performances of esti-mating App risk scores and segmenting security levels.
Specifically, we set the regularization parameters in Equa-tion 3 as = 0 : 5 and = 1, and the settings of PNB are similar as [14]. To segment Apps with respect to their risk scores, we empirically set = 0 : 01  X  CV ( A ) in Algorithm 1, where CV ( A ) is the CV of all App risk scores.

Figure 9 (a) shows the percent of Apps with respect to 6 segmented security levels. We can see that level 6 (i.e., most secure) contains most Apps and the App numbers from level 1 to level 4 are relatively even, which indicate most Apps are secure while only a few Apps have security risks.
Figure 9 (b)-(d) show the percent of App categories at security levels 1, 3, and 6, respectively. In these figures, we can find that Apps with more permissions (e.g., Apps in cat-egories  X  X ools X ,  X  X ravel&amp;Local X , and  X  X ommunication X ) are more likely to have potential risks, and vice versa (e.g., Apps in categories X  X ersonalization X  X nd X  X ooks&amp;Reference X ). Note that, since categories X  X ntertainment X  X nd X  X ersonalization X  contain the largest portion of Apps in our data set, they al-ways have high percent at all security levels. Figure 10: The performance of each approach w.r.t different metrics based on user judgment.
Evaluation Baselines. We adopt two state-of-the-art baselines to evaluate the performances of our SPAR ap-proach in terms of ranking App risks. To the best of our knowledge, there is only one relevant recent study [14], which can be directly leveraged for ranking App risks. Therefore, we leverage the recommended approach in this work as the first baseline. Naive Bayes with information Priors (PNB) [14] aims to learn a Naive Bayes model with param-eter that can best explain the generative process of per-missions, i.e., P ( p i | ). Therefore, the risk scores of App a can be estimated by e R a i =  X  ln P ( p 1 ;  X  X  X  ; p k | ), where each p  X  a i . Particularly, this baseline is also used for estimating the prior risk scores in our regularization framework. More-over, we also use a popular learning-to-rank approach as the second baseline for ranking App risks. RankSVM [9] aims to rank App risk by the RankSVM model. Specifically, we manually labeled 200 secure Apps and 200 insecure Apps according to some previous studies [6, 14, 20] as training data. For each App, we used its category, developer, and permissions as features to learn the ranking model.
Evaluation Metrics. Specifically, we set up the evalua-tion as follows. First, we implemented our SPAR approach and other baselines on all the Apps in the data set. For each approach, we selected 100 top ranked mobile Apps (i.e., most insecure), and 100 bottom ranked mobile Apps (i.e., most secure) in the result. Then, we merged all the selected Apps into a pool which includes 496 unique mobile Apps in our data set. For each App, we invited three users who are familiar with Android Apps to manually label these Apps with score 2 (i.e., Insecure ), 1 (i.e., Not Sure ), and 0 (i.e., Secure ). Each user gave a proper label by comprehensively considering their own experiences (i.e., they can download and try all these Apps), the App profile and the comments from other users. After user evaluation, each App a is as-signed a judgement score f ( a )  X  [0 ; 6]. Moreover, we com-puted the Cohen X  X  kappa coefficient [2] between each pair of evaluators to estimate the inter-evaluator agreement. The values of Cohen X  X  kappa coefficient are between 0 : 67 to 0 : 72 in the user evaluation, which indicate the substantial agree-men t [11]. Finally, we further ranked the 496 Apps by each approach, and obtained three ranked lists of Apps. Thus, we can exploit the popular metric Normalized Discounted Cumulative Gain (NDCG) for determining the ranking per-formance of each approach. Specifically, the discounted cu-mulative gain given a cut-off rank K can be calculated by where Rel ( a i ) = f ( a i ) is the relevance score. The N DCG @ K is the DCG @ K normalized by the IDCG @ K , which is the DCG @ K value of the ideal ranking list of the returned re-sults. In other words, we have N DCG @ K indicates how well the ranked order of the given Apps returned by an approach with a cut-off rank K . A larger N DCG @ K value indicates the better ranking perfor-mance. Particularly, if we treat the 83 commonly agreed in-secure Apps (i.e., f ( a ) = 6) as the ground truth, we can eval-uate each approach with the widely-used metrics, namely P recision @ K , Recall @ K , and F @ K .

Overall Performances. Figure 10 shows the results of each approach with respect to four different evaluation metrics. In this figure, we can see that SPAR consistently outperforms other baselines and the improvement is more significant for smaller K . These results clearly validate the effectiveness of our regularization based approach. Partic-ularly, the performances of PNB can be refined during the regularization on the bipartite graph. Also, SPAR and PNB outperform RankSVM, which indicates the straightforward learning-to-rank approach is not enough for estimating App risks. Indeed, the performances of learning-to-rank approaches mainly rely on the effectiveness of feature extraction. Based on the above observations, we can argue that SPAR is an appropriate approach for estimating App risks.

Case Study. This evaluation benchmark is based on some prior knowledge from other previous studies. As re-ported by Zhou et al [20], there are 13 Apps which may leak private information according to the TaintDroid sys-tem [6]. Here, we select 6 of them (i.e., Horoscope, La-yar, Trapster, Wertago, Astrid Task and DasTelefonbuch ), which are included in our data set, to evaluate SPAR and other baselines. Indeed, we study whether each approach can find these insecure Apps with high risk ranks, since a good approach should have the capability of capturing these suspicious Apps. Table 2 shows the top percentage position of each App in the ranked list returned by each approach. We can see that SPAR can rank those insecure Apps into higher positions than other baselines. Specially, all of these six Apps are categorized into low security levels (i.e., L L ) by the segmentation approach, which also validates the effectiveness of our approach.
 Figure 11: The recommendation performances of different ranking principles.
Here, we evaluate the recommendation performances of our approach SPAR. Particularly, we use the average rating as the popularity score for each App and the parameter b in Equation 11 equals to the given security level in experiments.
Since our App recommender system is non-personalized, there is no personal data could be used for evaluation. Also, there is no ground truth for us to evaluate which recommen-dation results really meet users X  information needs. Thus, in this paper, we focus on evaluating our recommendation approach SPAR by checking whether it can strike a balance between App popularity and user X  X  security preferences.
Specifically, there are three different ranking principles in our recommendation approach, i.e., popularity, security and hybrid principles. Given an App category and security level, each principle can generate a ranked App list as the recommendation result. Here, we propose to use two metrics N DCG P op and N DCG Sec to evaluate the the performance of each recommendation result. Compared with traditional N DCG , the relevance scores of N DCG P op and N DCG Sec are set to the popularity score and the reciprocal of risk score, respectively. Intuitively, if a recommendation result has higher N DCG P op ( N DCG Sec ), it has more emphasis on App popularity (App Security). Figure 11 shows the average recommendation performance across all App cate-gories with respect to different ranking principles and secu-rity levels. From the results, we can observe that the hybrid principle can rank Apps with a trade-off between popular-ity and security, which means the recommended Apps are both popular and secure. Also, with the increase of security levels, the recommendation results have more emphasis on App security than popularity.
To further evaluate the recommendation performances of different ranking methods, we study five Apps in category  X  App/Lifestyle  X , which are  X  X eterago X ,  X  X eNaughty X ,  X  X o-ment Diary X ,  X  X implyNoise X  and  X  X edside X . Particularly, T able 3: The case study of App recommendation.
  X  Weterago X  is one of the reported insecure Apps, and  X  X im-plyNoise X  is an App without requesting data access permis-sions. Table 3 shows the recommendation results, where SEC recommends most secure Apps based on risk scores with security level 1; POP is based on popularity scores (i.e., average ratings) with the security level 1; H-1, H-3, H-5 and H-6 denote the hybrid principle based recommendation with security levels 1, 3, 5 and 6, respectively. From these results, we can observe that the popularity-based method recommends insecure App  X  X eterago X  in the first position, while it has the highest risk score. In contrast, if only using risk scores to recommend Apps, some unpopular Apps (e.g., SimplyNoise) will be ranked higher. Furthermore, we can observe that H-3, H-5, H-6 do not recommend all five Apps for users. The reason is that these methods only take Apps with security levels higher than the given levels as candi-dates. Finally, we can see that the App  X  X oment Diary X  is ranked the highest by H-3, H-5, since the hybrid principle can reach some balance between popularity and security for App recommendation.
Our approach consists of an offline stage and an online stage. In the offline stage, the computational cost mainly comes from two parts: the computation of regularization for estimating risk scores, and the computation for security level segmentation and building the App hash tree. To eval-uate the efficiency and scalability of our approach, we test the running time of each part on different segmentation of the entire data set (i.e., 10%,..., 100%) to illustrate the scal-ability of our approach. All the tests were conducted on a 3.4GHZ  X  8-Core CPU, 8G main memory PC. Figure 12 shows the running time of each part with respect to differ-ent input data size. We can see that the computation times are almost linear with the size of input data. Thus, our approach is scalable in the offline stage.

In the online stage, given a security level and App cate-gory, the recommender system will return the ranked list of Apps to user according to different recommendation princi-ples. Indeed, since the popularity scores (e.g., overall rating) and risk scores can be obtained in the offline stage, and the portfolio optimization for hybrid principle has a close-form solution (e.g., Equation 12), the computational cost in on-line stage is relatively low. In particular, as discussed in Section 4, the main ranking process can be conducted in ad-vance and pre-stored in the App hash tree. In this case, the online recommendation process will be very fast.
Generally speaking, the related works of this study can be grouped into two categories.

The first category is about mobile App security. Indeed, many previous studies about security and privacy issues of mobile Apps have been reported. For example, Enck et al. [6] proposed a malware detection system named Taint-Droid, which can provide efficient real-time analysis of other third party mobile Apps through the monitor of their data Figure 12: The running time of (a) each iteration of regularization, and (b) security level segmentation and building the App hash tree. access behavior. Luo et al. [13] discussed the problem of at-tacks on WebView in the Android system, analyzed the fun-damental causes and proposed some potential solutions. To tame the information-stealing mobile Apps, Zhou et al. [20] proposed a new privacy model for Android system. Also, they developed a system named TISSA as security middle-ware to implement this model. Enck et al. [7] developed a rule-based certification model and system named Kirin, which can perform lightweight certification of mobile Apps at install time. Indeed, more and more advanced mobile Apps are committed to provide intelligent services for users by requesting various access permissions of users X  personal data. To understand these data access permissions, Au et al. [5] surveyed the permission systems of several popular smart phone operating systems, such as Apple IOS, and Android. They also discussed the problem of permission over-declaration and proposed some insightful directions of relevant research. Similarly, Felt et al. [8] studied the per-mission requests of over 900 mobile Apps in Android system, and developed a tool named Stowaway to detect the over-privilege in compiled Android Apps.

However, these approaches are very hard to be imple-mented in practice, since it is not a trivial task to efficiently and accurately detect the malware codes for each mobile App and users often do not want some security software to frequently scan their devices. Recently, Peng et al. [14] pro-posed a novel approach with various probabilistic models for ranking Apps with respect to their risk scores. Although this approach is straightforward and not scalable for external knowledge, it is effective for estimating App risk. Therefore, we propose to leverage this approach for assigning prior risk scores in our regularization framework.

Another category is about mobile App recommendation, which aims to facilitate the choice of mobile users. For exam-ple, Yan et al. [17] developed a collaborative filtering based mobile App recommender system, namely Appjoy. Different from other mobile App recommender systems, the Appjoy is based on users X  App usage records to build preference matrix but not explicit user ratings. However, sometimes the App usage records are very sparse. To solve this problem, Shi et al. [15] studied several recommendation models and pro-posed a content based collaborative filtering model named Eigenapp for recommending Apps in their Web site Getjar. Also, some researchers studied the problem of exploiting en-riched contextual information for mobile App recommenda-tion. For example, Yu et al. [18] proposed a novel person-alized context-aware recommender system by analyzing mo-bile user X  X  context logs. The proposed approach is based on Latent Dirichlet Allocation topic model and scalable for mul-tiple contextual features. Furthermore, Zhu et al. [21] pro-posed a uniform framework for personalized context-aware rec ommendation, which can integrate both context indepen-dency and dependency assumptions. The framework can mine user X  X  personal context-aware preferences for mobile App recommendation from the context logs of many mobile users. However, all the above recommendation approaches do not take consideration of the potential security/privacy risk of mobile Apps, which motivates our novel mobile App recommender system with security and privacy awareness.
In this paper, we developed a mobile App recommender system with security and privacy awareness. Specifically, without relying on any predefined risk functions, we de-signed a scalable and automatic approach for estimating the security risks of Mobile Apps. An unique perspective of this approach is the creative use of external knowledge as prior scores and the regularization techniques in an App-permission bipartite graph. Moreover, to consider both Apps X  popularity and users X  security preferences for recommenda-tions, we introduced a flexible App recommendation method based on the modern portfolio theory. Particularly, we also developed an App hash tree to efficiently look up Apps in recommendation. Finally, the experiments on a large-scale real-world data set clearly validated the effectiveness and efficiency of the proposed recommendation framework. This work was supported in part by grants from National Science Foundation for Distinguished Young Scholars of China (Grant No. 61325010), Natural Science Foundation of China (NSFC, Grant No. 71329201), and National High Technol-ogy Research and Development Program of China (Grant No. SS2014AA012303). This work was also partially sup-ported by grants from National Science Foundation (NSF, Grant No. CCF-1018151 and IIS-1256016), and UNC Char-lotte Faculty Research Grants 2014-2015.
