 A phrase-based SMT system takes a source sen-tence and produces a translation by segmenting the sentence into phrases and translating those phrases separately (Koehn et al., 2003). The phrase trans-lation table, which contains the bilingual phrase pairs and the corresponding translation probabil-ities, is one of the main components of an SMT system. The most common method for obtain-ing the phrase table is heuristic extraction from automatically word-aligned bilingual training data (Och et al., 1999). In this method, all phrases of the sentence pair that match constraints given by the alignment are extracted. This includes over-lapping phrases. At extraction time it does not matter, whether the phrases are extracted from a highly probable phrase alignment or from an un-likely one.

Phrase model probabilities are typically defined as relative frequencies of phrases extracted from word-aligned parallel training data. The joint counts C (  X  f,  X  e ) of the source phrase  X  f and the tar-get phrase  X  e in the entire training data are normal-ized by the marginal counts of source and target phrase to obtain a conditional probability
The translation process is implemented as a weighted log-linear combination of several mod-els h m ( e I 1 ,s K 1 ,f J 1 ) including the logarithm of the phrase probability in source-to-target as well as in target-to-source direction. The phrase model is combined with a language model, word lexicon models, word and phrase penalty, and many oth-ers. (Och and Ney, 2004) The best translation  X  e  X  I 1 as defined by the models then can be written as
In this work, we propose to directly train our phrase models by applying a forced alignment pro-cedure where we use the decoder to find a phrase alignment between source and target sentences of the training data and then updating phrase transla-tion probabilities based on this alignment. In con-trast to heuristic extraction, the proposed method provides a way of consistently training and using phrase models in translation. We use a modified version of a phrase-based decoder to perform the forced alignment. This way we ensure that all models used in training are identical to the ones used at decoding time. An illustration of the basic Figure 1: Illustration of phrase training with forced alignment. idea can be seen in Figure 1. In the literature this method by itself has been shown to be problem-atic because it suffers from over-fitting (DeNero et al., 2006), (Liang et al., 2006). Since our ini-tial phrases are extracted from the same training data, that we want to align, very long phrases can be found for segmentation. As these long phrases tend to occur in only a few training sentences, the EM algorithm generally overestimates their prob-ability and neglects shorter phrases, which better generalize to unseen data and thus are more useful for translation. In order to counteract these effects, our training procedure applies leaving-one-out on the sentence level. Our results show, that this leads to a better translation quality.

Ideally, we would produce all possible segmen-tations and alignments during training. However, this has been shown to be infeasible for real-world data (DeNero and Klein, 2008). As training uses a modified version of the translation decoder, it is straightforward to apply pruning as in regular de-coding. Additionally, we consider three ways of approximating the full search space: 1. the single-best Viterbi alignment, 2. the n -best alignments, 3. all alignments remaining in the search space
The performance of the different approaches is measured and compared on the German-English Europarl task from the ACL 2008 Workshop on Statistical Machine Translation (WMT08). Our results show that the proposed phrase model train-ing improves translation quality on the test set by 0.9 B LEU points over our baseline. We find that by interpolation with the heuristically extracted phrases translation performance can reach up to 1.4 B LEU improvement over the baseline on the test set.

After reviewing the related work in the fol-lowing section, we give a detailed description of phrasal alignment and leaving-one-out in Sec-tion 3. Section 4 explains the estimation of phrase models. The empirical evaluation of the different approaches is done in Section 5. It has been pointed out in literature, that training phrase models poses some difficulties. For a gen-erative model, (DeNero et al., 2006) gave a de-tailed analysis of the challenges and arising prob-lems. They introduce a model similar to the one we propose in Section 4.2 and train it with the EM algorithm. Their results show that it can not reach a performance competitive to extracting a phrase table from word alignment by heuristics (Och et al., 1999).

Several reasons are revealed in (DeNero et al., 2006). When given a bilingual sentence pair, we can usually assume there are a number of equally correct phrase segmentations and corresponding alignments. For example, it may be possible to transform one valid segmentation into another by splitting some of its phrases into sub-phrases or by shifting phrase boundaries. This is different from word-based translation models, where a typical as-sumption is that each target word corresponds to only one source word. As a result of this am-biguity, different segmentations are recruited for different examples during training. That in turn leads to over-fitting which shows in overly deter-minized estimates of the phrase translation prob-abilities. In addition, (DeNero et al., 2006) found that the trained phrase table shows a highly peaked distribution in opposition to the more flat distribu-tion resulting from heuristic extraction, leaving the decoder only few translation options at decoding time.

Our work differs from (DeNero et al., 2006) in a number of ways, addressing those problems. To limit the effects of over-fitting, we apply the leaving-one-out and cross-validation methods in training. In addition, we do not restrict the train-ing to phrases consistent with the word alignment, as was done in (DeNero et al., 2006). This allows us to recover from flawed word alignments.

In (Liang et al., 2006) a discriminative transla-tion system is described. For training of the pa-rameters for the discriminative features they pro-pose a strategy they call bold updating . It is simi-lar to our forced alignment training procedure de-scribed in Section 3.

For the hierarchical phrase-based approach, (Blunsom et al., 2008) present a discriminative rule model and show the difference between using only the viterbi alignment in training and using the full sum over all possible derivations.

Forced alignment can also be utilized to train a phrase segmentation model, as is shown in (Shen et al., 2008). They report small but consistent improvements by incorporating this segmentation model, which works as an additional prior proba-bility on the monolingual target phrase.

In (Ferrer and Juan, 2009), phrase models are trained by a semi-hidden Markov model. They train a conditional  X  X nverse X  phrase model of the target phrase given the source phrase. Addition-ally to the phrases, they model the segmentation sequence that is used to produce a phrase align-ment between the source and the target sentence. They used a phrase length limit of 4 words with longer phrases not resulting in further improve-ments. To counteract over-fitting, they interpolate the phrase model with IBM Model 1 probabilities that are computed on the phrase level. We also in-clude these word lexica, as they are standard com-ponents of the phrase-based system.
 It is shown in (Ferrer and Juan, 2009), that Viterbi training produces almost the same results as full Baum-Welch training. They report im-provements over a phrase-based model that uses an inverse phrase model and a language model. Experiments are carried out on a custom subset of the English-Spanish Europarl corpus.

Our approach is similar to the one presented in (Ferrer and Juan, 2009) in that we compare Viterbi and a training method based on the Forward-Backward algorithm. But instead of focusing on the statistical model and relaxing the translation task by using monotone translation only, we use a full and competitive translation system as starting point with reordering and all models included.
In (Marcu and Wong, 2002), a joint probability phrase model is presented. The learned phrases are restricted to the most frequent n -grams up to length 6 and all unigrams. Monolingual phrases have to occur at least 5 times to be considered in training. Smoothing is applied to the learned models so that probabilities for rare phrases are non-zero. In training, they use a greedy algorithm to produce the Viterbi phrase alignment and then apply a hill-climbing technique that modifies the Viterbi alignment by merge, move, split, and swap operations to find an alignment with a better prob-ability in each iteration. The model shows im-provements in translation quality over the single-word-based IBM Model 4 (Brown et al., 1993) on a subset of the Canadian Hansards corpus.

The joint model by (Marcu and Wong, 2002) is refined by (Birch et al., 2006) who use high-confidence word alignments to constrain the search space in training. They observe that due to several constraints and pruning steps, the trained phrase table is much smaller than the heuristically extracted one, while preserving translation quality.
The work by (DeNero et al., 2008) describes a method to train the joint model described in (Marcu and Wong, 2002) with a Gibbs sampler. They show that by applying a prior distribution over the phrase translation probabilities they can prevent over-fitting. The prior is composed of IBM1 lexical probabilities and a geometric distri-bution over phrase lengths which penalizes long phrases. The two approaches differ in that we ap-ply the leaving-one-out procedure to avoid over-fitting, as opposed to explicitly defining a prior distribution. The training process is divided into three parts. First we obtain all models needed for a normal translations system. We perform minimum error rate training with the downhill simplex algorithm (Nelder and Mead, 1965) on the development data to obtain a set of scaling factors that achieve a good B LEU score. We then use these models and scaling factors to do a forced alignment, where we compute a phrase alignment for the training data. From this alignment we then estimate new phrase models, while keeping all other models un-changed. In this section we describe our forced alignment procedure that is the basic training pro-cedure for the models proposed here. 3.1 Forced Alignment The idea of forced alignment is to perform a phrase segmentation and alignment of each sen-tence pair of the training data using the full transla-tion system as in decoding. What we call segmen-tation and alignment here corresponds to the  X  X on-cepts X  used by (Marcu and Wong, 2002). We ap-ply our normal phrase-based decoder on the source side of the training data and constrain the transla-tions to the corresponding target sentences from the training data.

Given a source sentence f J 1 and target sentence e , we search for the best phrase segmentation and alignment that covers both sentences. A segmen-tation of a sentence into K phrase is defined by where for each segment i k is last position of k th target phrase, and ( b k ,j k ) are the start and end positions of the source phrase aligned to the k th target phrase. Consequently, we can modify Equa-tion 2 to define the best segmentation of a sentence pair as:  X  s  X  K 1 = argmax The identical models as in search are used: condi-tional phrase probabilities p (  X  f k |  X  e k ) and p (  X  e within-phrase lexical probabilities, distance-based reordering model as well as word and phrase penalty. A language model is not used in this case, as the system is constrained to the given target sen-tence and thus the language model score has no effect on the alignment.

In addition to the phrase matching on the source sentence, we also discard all phrase translation candidates, that do not match any sequence in the given target sentence.

Sentences for which the decoder can not find an alignment are discarded for the phrase model training. In our experiments, this is the case for roughly 5% of the training sentences. 3.2 Leaving-one-out As was mentioned in Section 2, previous ap-proaches found over-fitting to be a problem in phrase model training. In this section, we de-scribe a leaving-one-out method that can improve the phrase alignment in situations, where the prob-ability of rare phrases and alignments might be overestimated. The training data that consists of N parallel sentence pairs f n and e n for n = 1 ,...,N is used for both the initialization of the transla-tion model p (  X  f |  X  e ) and the phrase model training. While this way we can make full use of the avail-able data and avoid unknown words during train-ing, it has the drawback that it can lead to over-fitting. All phrases extracted from a specific sen-tence pair f n ,e n can be used for the alignment of this sentence pair. This includes longer phrases, which only match in very few sentences in the data. Therefore those long phrases are trained to fit only a few sentence pairs, strongly overesti-mating their translation probabilities and failing to generalize. In the extreme case, whole sentences will be learned as phrasal translations. The aver-age length of the used phrases is an indicator of this kind of over-fitting, as the number of match-ing training sentences decreases with increasing phrase length. We can see an example in Figure 2. Without leaving-one-out the sentence is seg-mented into a few long phrases, which are unlikely to occur in data to be translated. Phrase boundaries seem to be unintuitive and based on some hidden structures. With leaving-one-out the phrases are shorter and therefore better suited for generaliza-tion to unseen data.

Previous attempts have dealt with the over-fitting problem by limiting the maximum phrase length (DeNero et al., 2006; Marcu and Wong, 2002) and by smoothing the phrase probabilities by lexical models on the phrase level (Ferrer and Juan, 2009). However, (DeNero et al., 2006) expe-rienced similar over-fitting with short phrases due to the fact that the same word sequence can be seg-mented in different ways, leading to specific seg-mentations being learned for specific training sen-tence pairs. Our results confirm these findings. To deal with this problem, instead of simple phrase length restriction, we propose to apply the leaving-one-out method, which is also used for language modeling techniques (Kneser and Ney, 1995).

When using leaving-one-out, we modify the phrase translation probabilities for each sentence pair. For a training example f n ,e n , we have to remove all phrases C n (  X  f,  X  e ) that were extracted from this sentence pair from the phrase counts that leaving-one-out. we used to construct our phrase translation table. The same holds for the marginal counts C n (  X  e ) and C out phrase probability for training sentence pair n is
To be able to perform the re-computation in an efficient way, we store the source and target phrase marginal counts for each phrase in the phrase ta-ble. A phrase extraction is performed for each training sentence pair separately using the same word alignment as for the initialization. It is then straightforward to compute the phrase counts after leaving-one-out using the phrase probabilities and marginal counts stored in the phrase table.

While this works well for more frequent obser-vations, singleton phrases are assigned a probabil-ity of zero. We refer to singleton phrases as phrase pairs that occur only in one sentence. For these sentences, the decoder needs the singleton phrase pairs to produce an alignment. Therefore we retain those phrases by assigning them a positive proba-bility close to zero. We evaluated with two differ-ent strategies for this, which we call standard and length-based leaving-one-out. Standard leaving-one-out assigns a fixed probability  X  to singleton phrase pairs. This way the decoder will prefer us-ing more frequent phrases for the alignment, but is able to resort to singletons if necessary. However, we found that with this method longer singleton phrases are preferred over shorter ones, because fewer of them are needed to produce the target sen-tence. In order to better generalize to unseen data, we would like to give the preference to shorter phrases. This is done by length-based leaving-one-out, where singleton phrases are assigned the Table 1: Avg. source phrase lengths in forced alignment without leaving-one-out and with stan-dard and length-based leaving-one-out. experiments we set  X  = e  X  20 and  X  = e  X  5 . Ta-ble 1 shows the decrease in average source phrase length by application of leaving-one-out. 3.3 Cross-validation For the first iteration of the phrase training, leaving-one-out can be implemented efficiently as described in Section 3.2. For higher iterations, phrase counts obtained in the previous iterations would have to be stored on disk separately for each sentence and accessed during the forced alignment process. To simplify this procedure, we propose a cross-validation strategy on larger batches of data. Instead of recomputing the phrase counts for each sentence individually, this is done for a whole batch of sentences at a time. In our experiments, we set this batch-size to 10000 sentences. 3.4 Parallelization To cope with the runtime and memory require-ments of phrase model training that was pointed out by previous work (Marcu and Wong, 2002; Birch et al., 2006), we parallelized the forced alignment by splitting the training corpus into blocks of 10k sentence pairs. From the initial phrase table, each of these blocks only loads the phrases that are required for alignment. The align-ment and the counting of phrases are done sep-arately for each block and then accumulated to build the updated phrase model. The produced phrase alignment can be given as a single best alignment, as the n -best alignments or as an alignment graph representing all alignments considered by the decoder. We have developed two different models for phrase translation proba-bilities which make use of the force-aligned train-ing data. Additionally we consider smoothing by different kinds of interpolation of the generative model with the state-of-the-art heuristics. 4.1 Viterbi The simplest of our generative phrase models esti-mates phrase translation probabilities by their rel-ative frequencies in the Viterbi alignment of the data, similar to the heuristic model but with counts from the phrase-aligned data produced in training rather than computed on the basis of a word align-ment. The translation probability of a phrase pair (  X  f,  X  e ) is estimated as where C FA (  X  f,  X  e ) is the count of the phrase pair (  X  f,  X  e ) in the phrase-aligned training data. This can be applied to either the Viterbi phrase alignment or an n -best list. For the simplest model, each hypothesis in the n -best list is weighted equally. We will refer to this model as the count model as we simply count the number of occurrences of a phrase pair. We also experimented with weight-ing the counts with the estimated likelihood of the corresponding entry in the the n -best list. The sum of the likelihoods of all entries in an n -best list is normalized to 1. We will refer to this model as the weighted count model. 4.2 Forward-backward Ideally, the training procedure would consider all possible alignment and segmentation hypotheses. When alternatives are weighted by their posterior probability. As discussed earlier, the run-time re-quirements for computing all possible alignments is prohibitive for large data tasks. However, we can approximate the space of all possible hypothe-ses by the search space that was used for the align-ment. While this might not cover all phrase trans-lation probabilities, it allows the search space and translation times to be feasible and still contains the most probable alignments. This search space can be represented as a graph of partial hypothe-ses (Ueffing et al., 2002) on which we can com-pute expectations using the Forward-Backward al-gorithm. We will refer to this alignment as the full alignment. In contrast to the method described in Section 4.1, phrases are weighted by their poste-rior probability in the word graph. As suggested in work on minimum Bayes-risk decoding for SMT (Tromble et al., 2008; Ehling et al., 2007), we use a global factor to scale the posterior probabilities. 4.3 Phrase Table Interpolation As (DeNero et al., 2006) have reported improve-ments in translation quality by interpolation of phrase tables produced by the generative and the heuristic model, we adopt this method and also re-port results using log-linear interpolation of the es-timated model with the original model.

The log-linear interpolations p int (  X  f |  X  e ) of the phrase translation probabilities are estimated as p int (  X  f |  X  e ) = p H (  X  f |  X  e ) where  X  is the interpolation weight, p H the heuristically estimated phrase model and p gen the count model. The interpolation weight  X  is ad-justed on the development corpus. When inter-polating phrase tables containing different sets of phrase pairs, we retain the intersection of the two.
As a generalization of the fixed interpolation of the two phrase tables we also experimented with adding the two trained phrase probabilities as ad-ditional features to the log-linear framework. This way we allow different interpolation weights for the two translation directions and can optimize them automatically along with the other feature weights. We will refer to this method as feature-wise combination . Again, we retain the intersec-tion of the two phrase tables. With good log-linear feature weights, feature-wise combination should perform at least as well as fixed interpo-lation. However, the results presented in Table 5 Table 2: Statistics for the Europarl German-English data TRAIN Sentences 1 311 815 DEV Sentences 2 000 TEST Sentences 2 000 show a slightly lower performance. This illustrates that a higher number of features results in a less reliable optimization of the log-linear parameters. 5.1 Experimental Setup We conducted our experiments on the German-English data published for the ACL 2008 Workshop on Statistical Machine Translation (WMT08). Statistics for the Europarl data are given in Table 2.

We are given the three data sets TRAIN , DEV and TEST . For the heuristic phrase model, we first use GIZA++ (Och and Ney, 2003) to compute the word alignment on TRAIN . Next we obtain a phrase table by extraction of phrases from the word alignment. The scaling factors of the trans-lation models have been optimized for B LEU on the DEV data.

The phrase table obtained by heuristic extraction is also used to initialize the training. The forced alignment is run on the training data TRAIN from which we obtain the phrase alignments. Those are used to build a phrase table according to the proposed generative phrase models. After-ward, the scaling factors are trained on DEV for the new phrase table. By feeding back the new phrase table into forced alignment we can reiterate the training procedure. When training is finished the resulting phrase model is evaluated on DEV Table 3: Comparison of different training setups for the count model on DEV . leaving-one-out max phr.len. BLEU TER baseline 6 25.7 61.1 none 2 25.2 61.3 standard 6 26.4 60.9 length-based 6 26.5 60.6 and TEST . Additionally, we can apply smooth-ing by interpolation of the new phrase table with the original one estimated heuristically, retrain the scaling factors and evaluate afterwards.
 The baseline system is a standard phrase-based SMT system with eight features: phrase transla-tion and word lexicon probabilities in both transla-tion directions, phrase penalty, word penalty, lan-guage model score and a simple distance-based re-ordering model. The features are combined in a log-linear way. To investigate the generative mod-els, we replace the two phrase translation prob-abilities and keep the other features identical to the baseline. For the feature-wise combination the two generative phrase probabilities are added to the features, resulting in a total of 10 features. We used a 4-gram language model with modified Kneser-Ney discounting for all experiments. The metrics used for evaluation are the case-sensitive B
LEU (Papineni et al., 2002) score and the trans-lation edit rate (TER) (Snover et al., 2006) with one reference translation. 5.2 Results In this section, we investigate the different as-pects of the models and methods presented be-fore. We will focus on the proposed leaving-one-out technique and show that it helps in finding good phrasal alignments on the training data that lead to improved translation models. Our final results show an improvement of 1.4 B LEU over the heuristically extracted phrase model on the test data set.

In Section 3.2 we have discussed several meth-ods which aim to overcome the over-fitting prob-Figure 3: Performance on DEV in B LEU of the count model plotted against size n of n -best list on a logarithmic scale. lems described in (DeNero et al., 2006). Table 3 shows translation scores of the count model on the development data after the first training iteration for both leaving-one-out strategies we have in-troduced and for training without leaving-one-out with different restrictions on phrase length. We can see that by restricting the source phrase length to a maximum of 3 words, the trained model is close to the performance of the heuristic phrase model. With the application of leaving-one-out, the trained model is superior to the baseline, the length-based strategy performing slightly better than standard leaving-one-out. For these experi-ments the count model was estimated with a 100-best list.

The count model we describe in Section 4.1 esti-mates phrase translation probabilities using counts from the n -best phrase alignments. For smaller n the resulting phrase table contains fewer phrases and is more deterministic. For higher values of n more competing alignments are taken into ac-count, resulting in a bigger phrase table and a smoother distribution. We can see in Figure 3 that translation performance improves by moving from the Viterbi alignment to n -best alignments. The variations in performance with sizes between n = 10 and n = 10000 are less than 0.2 B LEU . The maximum is reached for n = 100 , which we used in all subsequent experiments. An additional benefit of the count model is the smaller phrase table size compared to the heuristic phrase extrac-tion. This is consistent with the findings of (Birch et al., 2006). Table 4 shows the phrase table sizes for different n . With n = 100 we retain only 17% of the original phrases. Even for the full model, we Table 4: Phrase table size of the count model for different n -best list sizes, the full model and for heuristic phrase extraction.
 do not retain all phrase table entries. Due to prun-ing in the forced alignment step, not all translation options are considered. As a result experiments can be done more rapidly and with less resources than with the heuristically extracted phrase table. Also, our experiments show that the increased per-formance of the count model is partly derived from the smaller phrase table size. In Table 5 we can see that the performance of the heuristic phrase model can be increased by 0.6 B LEU on TEST by fil-tering the phrase table to contain the same phrases as the count model and reoptimizing the log-linear model weights. The experiments on the number of different alignments taken into account were done with standard leaving-one-out.

The final results are given in Table 5. We can see that the count model outperforms the base-line by 0.8 B LEU on DEV and 0.9 B LEU on TEST after the first training iteration. The perfor-mance of the filtered baseline phrase table shows that part of that improvement derives from the smaller phrase table size. Application of cross-validation (cv) in the first iteration yields a perfor-mance close to training with leaving-one-out (l1o), which indicates that cross-validation can be safely applied to higher training iterations as an alterna-tive to leaving-one-out. The weighted count model clearly under-performs the simpler count model. A second iteration of the training algorithm shows nearly no changes in B LEU score, but a small im-provement in TER. Here, we used the phrase table trained with leaving-one-out in the first iteration and applied cross-validation in the second itera-tion. Log-linear interpolation of the count model with the heuristic yields a further increase, show-ing an improvement of 1.3 B LEU on DEV and 1.4 B
LEU on TEST over the baseline. The interpo-Table 5: Final results for the heuristic phrase table filtered to contain the same phrases as the count model (baseline filt.), the count model trained with leaving-one-out (l1o) and cross-validation (cv), the weighted count model and the full model. Fur-ther, scores for fixed log-linear interpolation of the count model trained with leaving-one-out with the heuristic as well as a feature-wise combination are shown. The results of the second training iteration are given in the bottom row.
 baseline 25.7 61.1 26.3 60.9 baseline filt. 26.0 61.6 26.9 61.2 count (l1o) 26.5 60.6 27.2 60.5 count (cv) 26.4 60.7 27.0 60.7 weight. count 25.9 61.4 26.4 61.3 full 26.3 60.0 27.0 60.2 fixed interpol. 27.0 59.4 27.7 59.2 feat. comb. 26.8 60.1 27.6 59.9 count, iter. 2 26.4 60.3 27.2 60.0 lation weight is adjusted on the development set and was set to  X  = 0 . 6 . Integrating both models into the log-linear framework (feat. comb.) yields a B LEU score slightly lower than with fixed inter-polation on both DEV and TEST . This might be attributed to deficiencies in the tuning proce-dure. The full model, where we extract all phrases from the search graph, weighted with their poste-rior probability, performs comparable to the count model with a slightly worse B LEU and a slightly better TER. We have shown that training phrase models can improve translation performance on a state-of-the-art phrase-based translation model. This is achieved by training phrase translation probabil-ities in a way that they are consistent with their use in translation. A crucial aspect here is the use of leaving-one-out to avoid over-fitting. We have shown that the technique is superior to limiting phrase lengths and smoothing with lexical prob-abilities alone.

While models trained from Viterbi alignments already lead to good results, we have demonstrated that considering the 100-best alignments allows to better model the ambiguities in phrase segmenta-tion.

The proposed techniques are shown to be supe-rior to previous approaches that only used lexical probabilities to smooth phrase tables or imposed limits on the phrase lengths. On the WMT08 Eu-roparl task we show improvements of 0.9 B LEU points with the trained phrase table and 1.4 B LEU points when interpolating the newly trained model with the original, heuristically extracted phrase ta-ble. In TER, improvements are 0.4 and 1.7 points.
In addition to the improved performance, the trained models are smaller leading to faster and smaller translation systems.
 This work was partly realized as part of the Quaero Programme, funded by OSEO, French State agency for innovation, and also partly based upon work supported by the Defense Advanced Research Projects Agency (DARPA) under Con-tract No. HR001-06-C-0023. Any opinions, ndings and conclusions or recommendations ex-pressed in this material are those of the authors and do not necessarily reect the views of the DARPA.
