 This paper presents TWinChat , a Twitter and Web user interactive chat system to support simultaneous communication between mi-crobloggers and Web users in real time through both the contents of microblogs and Web pages. TWinChat provides a question answer-ing interface attached to Web pages, which allows Web users to chat with Twitter users in real time while presenting tweets that are associated with Web pages, i.e., simultaneous cross-media commu-nication. In order to map heterogeneous media, the system extracts relationship between tweets and Web pages by generating queries based on location names. Thus, our system can effectively present messages from Web users to help Twitter users immediately obtain useful information or knowledge, and it also can effectively present tweets from the Twitter users to help the Web users easily grasp the current situation in real time.
 H.3.4 [ Systems and Software ]: Question-answering (fact retrieval) systems; H.3.5 [ Online Information Services ]: Web-based ser-vices location-based microblogs; cross-media user communication
In recent years, microblogging services such as Twitter 1 blr 2 , and Plurk 3 , are now one of the most frequently used tools for online communication. For instance, Twitter users can broadcast and share information about their activities, opinions, and statuses https://twitter .com https://www.tumblr.com/ http://www.plurk.com/top/ in short messages (tweets), up to 140 characters long, using smart-phones at anytime and anywhere. Despite the useful information on Twitter, there still exists a lack of Twitter users X  requirements. That is, tweet senders are difficult to obtain useful information (e.g., bus timetables, sightseeing maps, etc.) about their current location, since they are often posted on Web pages, the tweet senders will have to access each Web page using smartphones. Meanwhile, Twitter users can gain information about current scenarios from tweet senders; however, Web users cannot simultaneously obtain this information through tweets while they browse Web pages. Fur-thermore, Twitter supports only limited communication between its users (i.e., followees and followers). Web users cannot access the most recent information from Web pages of popular places (e.g., tourist spots, shopping centers, etc.) because the Web pages are not updated in real time. Therefore, it is important to focus on associating Twitter feed and Web pages to facilitate simultaneous communication for Twitter and Web users.

Although several techniques on social communication have been studied [4, 6, 3], these studies have focused on content-based com-munication between users who browse the similar Web pages, they do not solve the mentioned issues without microblogging. We have proposed TWinChat , a novel simultaneous commutation system be-tween Twitter users and Web users in real time through both the contents of tweets and Web pages. To achieve this, we first ac-quired geo-tagged tweets based on content analysis and region se-lection. Therefore, our method can detect tweets if they are related to, or nearby, a target location, even though that they do not in-clude the location names, or it can also detect tweets from Twitter users who are not in the target location. Furthermore, the proposed method can filter out tweets from the target location for which the content is not related to the target location. The system then maps the acquired tweets and Web pages by generating queries based on location names is explained in Section 3. As depicted in Figure 1, TWinChat has two features: 1) streaming tweets are associated with each Web page that are presented to Web users based on the com-mon locations; 2) a chat box is attached to each Web page so that Web users can communicate with the Twitter users who follow an account of our system in real time. To use TWinChat , which is on the basis of existing Web services, Twitter users first required to follow an account 4 of our system, as https://T witter.com/@RtQAService followers of our service, and Web users first required to simply in-stall a toolbar (a Firefox add-on). Once a Web user browses a Web page, the system records the information into a server database, which is used for mapping tweets from Twitter users and the Web page, and he can chat with the Twitter users and other Web users. In our system, anonymous of all messages (tweets) can be maintained through a server.

The flow of TWinChat is described as follows: 1. A Web user selects a Web page to browse, the system then 2. When the Web user submits a message in the chat box, the 3. When the Twitter user replies the message of the Web user
An example is shown in Figure 1, which depicts a Web user browsing an official Website of Tokyo Skytree in the Web browser of our system. Streaming tweets, e.g.,  X  X ery nice view! X  located in the Tokyo Skytree, are associated with the Web page by generating a query based on a common location name,  X  X okyo Skytree, X  even though the tweets do not include the location name. This allows the Web user to gain insight into the congestion level or gain impres-sions of the Tokyo Skytree from the presented tweets in real time. On the other hand, this allows the Twitter user to obtain useful in-formation or knowledge such as observation deck or tallest tower rank of the Tokyo Skytree from the Web users by chatting through our system.
A conventional method based on a content analysis of tweets and hashtag search [5], it can detect the tweets of Twitter users who are not in the locations in the real world. Also, tweets can be acquired by identifying the location information from geo-tagged tweets [2]. However, many detected tweets are still not related to the locations of them, it is difficult to report the current situation from the detect tweets. Therefore, we first obtain geo-tagged tweets except dupli-cates from a specified region by using Streaming APIs (left part of Figure 2), and we analyze the content of the tweets focusing on nouns by a morphological analysis. The specified region is deter-mined by a northeast point and a southwest point, then, we can ob-tain streaming tweets in a rectangular region surrounding these two points. Next, we detect location names within a radius d of a region by using Google Places API v3 5 , from the latitude and longitude information of the obtained streaming tweets, and we empirically set d = 5 m by considering the movement of Twitter users. Then, our server database manages {Twitter user ID, icon URL, latitude, longitude, location name, tweet, word set, acquisition time} in a certain time (central part of Figure 2).
For selecting tweets related to the detected location names, we extract high frequency words from the tweets as feature terms of the locations. Then, we selected the tweets that contain many feature https://de velopers.google.com/place terms. For this, we obtain a total amount n of tweets in a certain time within a radius d of a region based on a given location of the acquired tweet t . The average of the frequency of each word i that appears in t is then calculated by the following equation: Here, q denotes the total number of words that appear in tweet t . If a value of Eq. (1) is more than the empirical threshold value, t related to the location of it is selected.

To extract location names from Web pages, we acquire URLs of the Web pages that Web users are browsing (right part of Figure 2). Then, we extract high frequency words from snippets of the ac-quired URLs as feature terms of the Web pages and detect location names of the Web pages by using a morphological analyzer.
Based on the above, when Twitter users post tweets and a Web user browses a Web page, the system can obtain and present the tweets that are relevant based on a common location name from the Web page and the tweets. In this case, the server database of the system stores the obtained tweets, the obtained Web pages, and the detected common location names (central part of Figure 2). The server side is built using Apache httpd 2.4, Java, PHP 5.5. The servlet can perform parallel processing for multiple requests, since it makes a  X  X ser thread X  for each request. When the user thread receives the requests from the clients, it parses them, per-forms the corresponding action, returns information to the request-ing user, and sends information to other users. The browsing, ac-quiring, and communication logs are stored in the server database using SQLite 3.8.5. The client side is implemented as a toolbar (browsing plug-in). The question answering interface is programmed using XUL (ex-tensible user interface language) and the development is programmed using JavaScript. A Twitter user is connected to the server using Twitter service, and a Web user is connected to the server using an asynchronous communication program running in a WebSocket http://gih yo.jp/dev/feature/01/websocket/0001
With TWinChat , Twitter users and Web users can communica-tion with each other in real time by chatting (see Figure 1), and a demonstration video is shown in [1]. TWinChat could present tweets from the Twitter users and messages from the Web users within 2 seconds, respectively; and the Web users could reply the tweets to the Twitter users within 3 seconds.
Web users can browse a Web page and simultaneously obtain a list of streaming tweets that with respect to the Web page in real time. The server database of our system stores the acquired tweets, the most recently viewed Web pages, and the detected common location names from them.

Since TWinChat presents tweets into a Web page that Web users are browsing, the Web users can gain the current situation in real time, not only through the presented tweets on the Web page but also through Twitter users of them. Twitter users and Web users can chat with each other in real time. TWinChat allows the Web users to send messages in the chat box to the Twitter users of the presented tweets or other Web users who browse the same Web page. If the Web user has a question about the current situation while browsing a Web page, he can immediately ask the Twitter users by entering the question in the chat box. The Twitter users, who follow the account of TWinChat , can receive the question and reply it to the Web user through Twitter service. The replies from the Twitter users can be simultaneously presented on Twitter and streaming tweet list of our system.

Meanwhile, if the Twitter user has a question about something on the Web page, he can immediately ask the Web users by posting the question on Twitter. The Web users can receive the question and send messages as tweets, reply to the Twitter user through the chat box. The messages from the Web users can be simultaneously presented on streaming tweet list of our system and Twitter.
This work was partially supported by SCOPE (the Ministry of In-ternal Affairs and Communications of Japan), and a Grant-in-Aid for Scientific Research (B)(2) 26280042 (the Ministry of Educa-tion, Culture, Sports, Science, and Technology of Japan). [1] Demostration Video Page of Developed TWinChat. [2] G. Ference, M. Ye, and W.-C. Lee. Location recommendation [3] S. Fragoso, R. R. Rebs, and D. L. Barth. Interface affordances [4] Y. Shiraishi, J. Zhang, Y. Kawai, and T. Akiyama.
 [5] S. Tajima and T. Ushiama. A method for composing ad-hoc [6] B. Wang, C. Wang, J. Bu, C. Chen, W. V. Zhang, D. Cai, and
