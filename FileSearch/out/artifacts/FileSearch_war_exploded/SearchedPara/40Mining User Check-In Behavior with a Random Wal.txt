 Many urban applications, such as navigational planning services [Yuan et al. 2011], urban planning [Yuan et al. 2012], and location-based advertisement [Lu et al. 2012], have been developed for the rapidly growing location-based services (LBSs) market. To improve the quality of smart urban living, it is beneficial that these LBSs can recom-mend to their users points-of-interest (POIs) in which they may be interested. Thus, effective and efficient urban POI recommendation techniques are desirable. Given a set of POIs, which is predetermined via a location-based social network (LBSN) [Zheng 2012; Zheng and Zhou 2011], the recommendation technique identifies the list of POIs that a user is most likely to visit. Intuitively, to model the relevance between the users and the POIs, we can construct a user X  X OI matrix in which rows denote the users and columns denote the POIs. Each entry in this user X  X OI matrix denotes a relevance score, showing the probability that the user will visit the POI. Therefore, as shown in Figure 1, we can see POI recommendations given some user query as a ranking over the rows of the matrix. Intuitively, each entry in the user X  X OI matrix could be estimated by users X  check-ins. However, users typically only check in to a small portion of all POIs. Consequently, we need to calculate a predicted score for the POIs that a user has not visited.

To address the calculation of these predicted scores for the user X  X OI pairs, random walk approaches have shown an excellent performance [Jamali and Ester 2009; Cao et al. 2010]. Using the random walk approach to predict scores for the user X  X OI pairs, a weighted graph is required. Generally, the weights associated with each edge of the graph should reflect the intention of the user to visit the POI [Zheng 2012]. On the basis of our observations, we categorize users X  intentions into three classes:  X  Social-Triggered Intentions (SI) : These intentions refer to the relationship between
POIs and a user X  X  social circle, and reflect the frequency with which the user X  X  social circle visits the POI. For example, as shown in Figure 2, we could recommend a
Chinese restaurant to user A, because his or her friends often check-in to such restaurants.  X  Preference-Triggered Intentions (PreI) : These intentions refer to the relationship be-tween the semantic labels of the POI and a user X  X  preferences, and reflect how often the user visits POIs with a specific semantic label. As shown in Figure 2, user B tends to check in to POIs in the  X  X offee X  category. Therefore, we may recommend other POIs in this category.  X  Popularity-Triggered Intentions (PopI) : These intentions refer to the relationship between POIs and their number of check-ins, and reflect the general phenomenon whereby people like to visit popular places. For example, as shown in Figure 2, most users go to Chinese restaurants for a meal. We thus recommend Chinese restaurants to other users.

Corresponding to these three types of intention, users X  check-ins can be viewed as the context of the behavior that is motivated by the aforementioned intentions. In other words, check-ins may be triggered by multiple intentions, inclusive of SI, PreI, and PopI. However, most existing techniques [Ye et al. 2010; Ye et al. 2011b] for recommending POIs are primarily focused on analyzing SI for enhancing collaborative filtering (CF)-based models. To extract the check-in behavior motivated by SI, existing methods usually extract social-based features from LBSN data. Due to the social binding of a user X  X  social circle, these recommendations tend to recommend the POIs that usually have been visited by the user X  X  friends. For example, as shown in Figure 2, users A and B have both visited coffee shops, implying that their preferences in restaurants are very similar. Suppose that user B likes to eat pizza. Thus, it is more reasonable to recommend a pizza parlor than a Chinese restaurant to user A. But the social inference recommendation models would recommend a Chinese restaurant to user A. Considering that these existing models do not address users X  preferences from semantic tags of visited POIs, we therefore exploit users X  preferences from semantic tags of visited POIs to recommend the POIs of LBSNs in an urban area.

Several works have addressed the check-in behavior motivated by PreI [Bao et al. 2012; Cao et al. 2010]. As mentioned earlier, semantic label plays a crucial role for representing users X  preference intention in urban POI recommendation. Unfortunately, these works only consider the predefined category of the POI as a rough semantic label while disregarding the user-generated annotation of the POI. Although we can also map users X  current positions to some POI database or road network to understand the POI tags given by users, this process does not work well in an urban area. This is because POIs in an urban area are very crowded, which means we cannot accurately tag a location just by determining users X  positions. Figure 3 shows that there are two totally different types of restaurant in the same building. Fortunately, we can view the LBSN of each user as a sensor for detecting semantic POI tags, thus improving POI recommendation in an urban area. Moreover, the check-in behavior motivated by PopI has still not been taken into consideration in the representation of user behavior. As mentioned earlier, users generally visit only a small portion of all POIs. This leads to the features extracted from the SI and PreI behavior being ineffective for recommending POIs that the user and his or her social circle never visit.
 On the basis of the observations prompted by the preceding examples, we propose Urban POI-Walk (UPOI-Walk). This is a new approach to urban POI recommendation that mines urban users X  check-in behavior based on three kinds of intentions. As shown in Equation (1), given a set of users U andasetofPOIs P , the problem of POI recom-mendation can be formulated as the prediction of relevance scores X  X hat is, the degree of interest X  X or a given user X  X OI pair:
Hence, POI recommendation in LBSNs can be addressed as the problem of nu-merical value prediction. Although numerical value prediction techniques have been developed for many applications, such as demographic prediction [Hu et al. 2007], bio life-cycle analysis [Menzies et al. 2003], and the prediction of natural phenomena [Etemad-Shahidi and Mahjoobi 2009], they have not yet been explored in the context of urban computing. In addition, the question of extracting significant features to support POI recommendations based on heterogeneous check-in intentions is also a critical and challenging issue. In building a numerical value prediction model, the fundamental is-sue is handling the heterogeneous features extracted from the heterogeneous data. As mentioned earlier, random walk approaches display an excellent performance in calculating predicted scores for the user X  X OI pairs. However, existing works [Jamali and Ester 2009; Cao et al. 2010] do not address such heterogeneous features, prefer-ring instead a straightforward aggregation of the extracted features, such as by linear combination. This leads to some features dominating over others.

To address the problem mentioned previously, we explore the movements of users triggered by SI, PreI, and PopI, and seek several descriptive features to explain the rel-evance of user X  X OI pairs. In contrast to conventional POI recommendation techniques, which are based solely on the check-in behavior motivated by SI, we also utilize the check-in behavior motivated by PreI and PopI to recommend POIs for LBSN users. Our UPOI-Walk method follows the HITS-based random walk approach [Cao et al. 2010]. This comprises an offline relevance learning module and an online top-k relevant POI search. To learn the relevance of each user X  X OI pair, the relevance learning module explores all social, personal preference, and popularity aspects of the POI check-ins being captured in the LBSN dataset. The relevance learning module includes three main steps. First, feature extraction involves the extraction of significant features of user X  X OI pairs in the forms of SI, PreI, and PopI. Second, user X  X OI graph (UPG) construction involves the construction of weighted bipartite graphs based on the ex-tracted features. The main idea underlying the HITS-based random walk approach is to predict the relevance of a user X  X OI pair in terms of the user X  X  ability to reach the POI; thus, the UPG plays a crucial role in the random walk model. Finally, Dynamic HITS-based Random Walk involves calculation of the relevance of each user X  X OI pair by performing a HITS-based random walk with dynamic selection of the constructed UPG. In the online recommendation module, the relevance between the properties of the POI and the user X  X  preference can be used to rank the recommendation list of POIs. After checking their coordinates, we obtain all qualified POIs for a particular user.
This research makes a number of significant contributions, which are summarized as follows:  X  X e formulate the problem of POI recommendation in an urban area as the problem of relevance score prediction. This problem has not previously been explored in the research community.  X  X e propose UPOI-Walk, a new approach for urban POI recommendation, by mining urban users X  check-in behavior. The proposed UPOI-Walk learns a random walk to estimate the relevance score of each user X  X OI pair. UPOI-Walk simultaneously explores three intentions of user check-in behavior, namely SI, PreI, and PopI, by exploiting LBSN data to extract descriptive features.  X  X e propose an extension to the HITS-based random walk model X  X ynamic HITS-based Random Walk  X  for estimating the relevance between POIs and users. Our proposed model can deal with the heterogeneous feature problem well by building several weighted complete bipartite graphs.  X  X e use two real datasets to evaluate the performance of UPOI-Walk in a series of experiments. One is obtained from Gowalla (http://en.wikipedia.org/wiki/Gowalla), and the other is from EveryTrail (http://www.EveryTrail.com/). The results show that
UPOI-Walk delivers superior performance over other recommendation techniques in terms of the popular normalized discounted cumulative gain and mean absolute error measures.
 The rest of this article is organized as follows. We briefly review the related work in Section 2 and provide an overview our urban POI recommendation approach, UPOI-Walk, in Section 3. In Section 4, the details of our proposed features are described. The proposed Dynamic HITS-Based Random Walk model is detailed in Section 5. Finally, we present the evaluation result of our empirical performance study in Section 6 and then discuss our conclusions and future work in Section 7. In this article, we review relevant previous studies and classify them into four cate-gories: (1) General Item Recommendation Systems, (2) Location or POI Recommenda-tion, (3) Spatial-Temporal X  X ased Data Mining, and (4) Numerical Value Prediction. 2.1.1. Collaborative Filtering-Based Models. To recommend general items to users, CF-based methods are highly effective. Generally, CF-based recommendations recommend items for users by using the records of similar users or similar items. Horozov et al. [2006] proposed an enhanced CF solution for personalized POI recommendations. Some approaches [Massa and Avesani 2007] have proposed a trust-aware recommendation system, which builds a trust metric and makes use of trust information to recommend items. Debnath et al. [2008] proposed a combined CF and content-based recommenda-tion system. Their approach can determine the weight values of attributes, which are obtained from a social network, using linear regression. To solve the problem of sparse data, many studies use CF-and item-based approaches to estimate missing values. The fundamental problem of the CF-based approach is the evaluation of user similar-ity and location similarity. Spertus et al. [2005] proposed six different measures for recommending online social networks. The six measures applied the cosine distance, mutual information measure, TF-IDF, and log-odds functions to measure the similar-ity of communities. Ye et al. [2012b] proposed a probabilistic generative model that naturally unifies the ideas of social influence and CF-and content-based methods for item recommendation.
 2.1.2. Social-Based Models. Generally speaking, social-based recommendations con-sider that a user X  X  interests would be influenced by his or her friends. Accordingly, social-based recommendations recommend items for a user by using the records of the user X  X  social circle. Jamali and Ester [2009] proposed a new kind of random walk X  X ased model called TrustWalker . The TrustWalker model performs the random walk on the so-cial network to predict item ratings for users. Trust-based random walk uses trust val-ues and user-to-item ratings to predict the item ratings. A trust value is the user-to-user rating. If two people X  X  interests are similar, they will have a high mutual trust value. TrustWalker can solve the  X  X old start problem X  with the same precision. 2.1.3. Content-or Geo-Aware Recommender. Levandoski et al. [2012] considered the user and item locations to be a constraint. They believed that users X  preferences were related to their location and that users usually move short distances. Therefore, considering user and item locations should improve the performance of item recommendation. Scellato et al. [2011] proposed a social link prediction model, which involves several geo-based features intended to improve the accuracy of prediction. For example, content-based recommendation systems [Ono et al. 2007] use Bayesian network modeling of user preferences to recommend movies. Bayesian networks are highly flexible, making them appropriate for representing the complex relations between users X  preferences and contexts. 2.2.1. Location Recommendation. Similar to POI recommendation, a location recom-mendation system recommends a specific geographical place to users. The major difference between POI recommendation and location recommendation is that the notion of a location usually refers to a region that is detected by some heuristic, such as a holiday destination [Zheng et al. 2009]. In recent years, many studies have addressed the issue of location recommendation. Zheng et al. [2010] employed an activity term, such as hiking, as a query term to request the location recommendation service. A mobile application framework was presented by Simon and Fr  X  ohlich [2007] to enable a mobile phone user to query geo-coded Wikipedia articles for landmarks in the vicinity, and a Cyberguide system [Abowd et al. 1997] was developed to provide information describing nearby buildings and related people X  X  identities. Takeuchi and Sugimoto [2006] developed CityVoyager to recommend shops. This system collected users X  histories of shop visiting based on GPS logs and applied an item-based CF method to recommend other shops similar to those visited previously. To recommending restau-rants, a system combining both users X  preferences and location contexts has also been studied in Park et al. [2007]. This used Bayesian learning to calculate recommendation values and provide a ranking list for restaurants. Zheng et al. [2009] selected tourist hotspots as the recommended locations. A HITS-based model was proposed to account for users X  travel experiences and locations of interest in forming the recommendations so that only especially popular places that were also recommended by experienced users were ranked. Cao et al. [2010] utilized a HITS-based random walk to learn the significance of certain locations. They also used the Yellow Pages directories to understand the semantic labels of a location. Although such semantic labels are not annotated by users, they may at least partially represent the relationship between location and user preference. Leung et al. [2011] proposed a collaborative location recommendation (CLR) framework based on co-clustering. This approach considers location, user, and activity to build a community location model (CLM) graph. The CLR approach then uses community-based agglomerative-divisive clustering (CADC) algorithms to iteratively merge and divide nodes in the CLM graph. After clustering users, locations, and activities by CADC, refined clusters of similar locations visited by similar users doing similar activities are obtained.
 2.2.2. POI Recommendation. Unlike location recommendation, POI recommendation is based on a predetermined location. Ye et al. [2010] developed a friend-based CF ap-proach for location recommendation based on collaborative POI ratings made by social friends. They also found that users X  common check-ins were proportional to their geo-distance. Accordingly, Ye et al. proposed a geo-measured approach to approximate friend-based CF, thus reducing computation time. Later, Ye et al. [2011b] proposed a CF-based POI recommendation framework. This framework fused user preference in-fluence, social influence, and geographic influence to infer the check-in probability for a given user at a POI. This approach also exploited a power-law distribution to build the geographical influence among POIs and used the CF method to depict user preference influence and social influence. Bao et al. [2012] elicited social opinions from the location histories of local experts and learned user personal preferences from users X  location his-tories. Based on the social opinions and user personal preferences discovered, Bao et al. designed a location-based and preference-aware recommendation system that offers a particular user a set of venues within a geospatial range. Berjani and Strufe [2011] proposed a regularized matrix factorization (RMF) system to recommend appropriate spots, which could be viewed as POIs, for users. This research used data crawled from Gowalla, an LBSN Web site. The RMF recommender is a personalized application for recommending places. It first maps users and spots to a joint latent factor space, then exploits a regularized singular value decomposition model to predict the ratings of users to spots. To understand a user X  X  preference, some research has been conducted that is devoted to mining location semantics or analyzing temporal information. For example, Ye et al. [2011a] proposed a semantic annotation approach in which user check-in behaviors and temporal information are utilized to form several useful features for improving the accuracy of semantic annotation. Ye et al. [2012a] conducted a series analysis of Temporal-Semantic Interaction. Based on this analysis, several LBSN applications could be improved, such as tag recommendation, place selection, and data cleaning. Cho et al. [2011] analyzed LBSN and cellphone data to generate user mobility patterns. According to their analysis, humans experience a combination of strong, short-range spatially and temporally periodic movement that is not impacted by the social network structure, whereas long distance travel is influenced more by social network ties. Such findings could be utilized to improve the accuracy of location prediction. Relevance estimation can be formulated as a numerical value prediction problem [Hu et al. 2007; Menzies et al. 2003; Etemad-Shahidi and Mahjoobi 2009]. The typical steps in training a numerical value prediction model are (1) feature extraction, (2) feature se-lection, and (3) model building. After selection, features are used as inputs for training a numerical value prediction model. Regression-tree models have shown an excellent performance in similar tasks [Etemad-Shahidi and Mahjoobi 2009]. Once the model is trained, the training data is divided according to the decreasing variance of the target attribute. Each piece of training data is then used to build an individual regression model. Meanwhile, the procedure of dividing the training data is recorded to build a decision tree. To overcome the heterogeneous features and data sparsity problems, we design a two-stage approach X  X POI-Walk X  X onsisting of a relevance learning module and a POI recommendation module, as shown in Figure 4. The system recommends urban POIs by mining user check-in behavior. In UPOI-Walk, the relevance learning module deals with the relevance estimation of user X  X OI pairs, whereas the POI recommendation module handles the POI recommendations based on the estimated relevance of each user X  X OI pair. In the learning module, there are two main phases: feature extraction and relevance estimation.

For a specific user X  X OI pair, we explore the check-in behavior motivated by SI as population features that abstract the aggregated check-ins of the user X  X  friends. We also explore the check-in behavior motivated by PreI between users and POIs to formulate the descriptive features of a given user X  X OI pair. Moreover, the check-in behavior motivated by PopI is considered for feature extraction in our recommendation model. The features derived from SI, PreI, and PopI are used to construct several complete bipartite graphs. In the relevance estimation phase, we apply the Dynamic HITS-based Random Walk approach to these graphs to calculate the relevance score of each user X  POI pair. We thus obtain a user X  X OI matrix that records the relevance between users and POIs. In the recommendation module, the relevance between users and POIs can be used to rank the POI recommendation list. After examining the coordinates of all POIs and user positions, we present all qualified POIs to the user. In the proposed UPOI-Walk approach, the relevance learning module is designed as a three-phase framework, as shown in Figure 4. The first phase deals with feature extraction. This task explores the three types of intention discussed in the Introduction. The second phase handles the relevance estimation. We build two complete bipartite graphs. Based on the extracted features, we can obtain two weighting functions to assign weights to the edges of the two graphs. Finally, in the third phase, we apply the Dynamic HITS-based Random Walk model to estimate the relevance between the user preferences and properties of the POI. For a specific user X  X OI pair, we explore the check-in behavior motivated by SI, PreI, and PopI to explain the relevance between users and POIs.
 4.1.1. Features from Social-Triggered Intentions. Our goal is to extract discriminative social-triggered features from check-ins among the user X  X  social circle at a POI. In-tuitively, the user is likely to share some interests with his or her friends. Thus, if a POI is visited many times by the user X  X  social circle, it may satisfy some of the user X  X  interests. Accordingly, aggregating friends X  relative check-ins at a POI can be used to infer the probability that a user likes that POI. Formally, given a friend f and a set of POIs P , f  X  X  relative check-ins at POI p is formulated as
However, it is possible that there are users whose interests are totally different to those of his or her friends. Thus, the similarity between the user and his or her friends must be involved. Accordingly, given a user X  X OI pair ( u, p ), the features extracted from SI can be generally formulated as where F ( u )isthesetofuser u  X  X  friends.

As mentioned earlier, measuring the similarity of two users is the key feature ob-tained from SI. Intuitively, the spheres of users and their friends can be utilized to measure their similarity based on the nature of their lifestyles and activities offered by their living areas. As a result, different similarities, naturally formed by the aggre-gated behavior of friends with respect to various kinds of POIs, are embedded in the friends X  check-in activities. In LBSN data, the most important information concerns a user X  X  common check-ins and the distance between users in terms of similarity. Next, we extract two population features to depict POIs. (1) Similarity by Common Check-Ins (CheckSim) :Weemploythe  X  2 test to ascertain (2) Similarity by Relative Distance (DisSim) : As discussed in Ye et al. [2010], most 4.1.2. Features from Preference-Triggered Intentions. As discussed in the Introduction, we can view each user in the LBSN as a sensor for detecting the semantic tags of a POI to improve recommendations in an urban area. In many LBSN Web sites, there are two kinds of semantic tags X  X redefined categories and user-annotated highlights X  X s in Gowalla, shown in Figure 7. The category tag is applied when the POI is created. Each place can have only one category tag (e.g., coffee, pizza). On the other hand, any user (even one who never visits the place) can arbitrarily annotate the highlight tag of a POI at any time. Indeed, the same tag can be applied to the same POI many times. Accordingly, the tag counts can be viewed to determine what type of activity occurs at a POI. Thus, the possibility that a tag t is annotated on a POI p can be formulated as where count ( t , p ) indicates the number of times t is annotated on p and T ( p ) indicates the set of tags of p . Taking Figure 7 as an example, the possibility that the tag  X  X offee X  is annotated on a POI is
Intuitively, PreI features capture how the semantic labels of the POI match the user X  X  personal preference. The personal preference reflects the degree to which the user likes particular semantic labels. Accordingly, given a user X  X OI pair ( u, p ), the features extracted from PreI can be generally formulated as where T ( p ) indicates the set of tags of POI p .

Significantly, we can observe that measuring a user X  X  individual preference for a semantic tag is the key feature extracted from PreI. Intuitively, users X  check-in histories can reflect their preference for types of POI. As a result, for each user, we aggregate the number of check-ins at POIs with the same tag to represent each user X  X  personal preference. Next, we extract two features to depict users X  preferences. (1) Preference in Category (CPref) : Based on our observations from the LBSN dataset,
As mentioned previously, people may annotate highlight tags on a POI and repeat the annotation many times. Based on this observation, to measure an individual user X  X  personal preference of POIs, we cannot directly normalize the aggregated number of check-ins based on the total number of user check-ins. From Tables I and III, we can employ a user X  X  total check-ins to normalize the aggregated number of check-ins, giving user i  X  X  personal preference for highlight tag a as
Using the total check-ins to normalize the aggregated number of check-ins, it is clear that the total personal preference of a user will be greater than 1.0 and the scale of the total personal preference of a user will fluctuate considerably. (2) Preference in Highlight (HPref) : Based on the preceding observation and the avail-4.1.3. Features from Popularity-Triggered Intentions. As discussed in the Introduction, check-in data is very sparse. This means that features extracted from the behavior motivated by both SI and PreI are not effective at recommending users X  POIs and his or her social circle never checks in. We employ the total number of check-ins of a POI to make a maximum likelihood estimation of the popularity of POIs. Thus, we can calcu-late the absolute proportion (AP) of check-ins to a POI to the total number of check-ins to all POIs. Formally, given a set of POIs P , the AP of check-ins for POI p is formulated as
For example, if a POI has been visited 1,000 times and the total number of check-ins at all POIs is 30,000, the AP of check-ins is 1/30. However, the type of POI affects users X  willingness to check in. For example, people may buy a cup of coffee in a coffee shop every day but rarely go to a French restaurant. Accordingly, we estimate the likelihood using conditional probability to find the relative popularity (RP) of a POI. RP indicates the probability that users visit the POIs that belong to category t . The formula for RP is as follows: where T ( p ) indicates the set of tags of POI p and C ( t ) indicates the set of POIs with category tag t . Take Tables I and II as an example. The POIs with category tag A are p1 , p2 ,and p5 . The total check-ins for POIs p1 , p2 ,and p5 are 3, 12, and 5, respectively. Thus, the popularity of POI p1 is 4.1.4. Summary of Features. We have proposed several features from SI, PreI, and PopI. An abstract description of these features is given in Table IV. Each intention contains two kinds of features. We can see that all features from SI and PreI are associated with the user X  X OI pair, but those from PopI are only associated with the POIs. Therefore, the features from PopI are usually ineffective for POI recommendations, but they can deal with the problem of data sparsity (or the problem of cold starts). Besides, the features from PreI are generated from individual user check-ins. This always leads to the problem of data sparsity, because the number of POIs that a user visits is always much less than the total number of POIs. Therefore, we argue that the features extracted from SI can make up for this shortage. After the feature extraction phase, the features derived from SI, PreI, and PopI are used as weights for building a UPG. The UPG is a weighted complete bipartite graph containing two partite sets X  X  user set and a POI set X  X s shown in Figure 8. Because there are several features, there are various weighting functions for building the UPG. The features derived from SI and PreI could not be associated with every user X  X OI pair; thus, we use the features derived from PopI to replace them. This heuristic is based on the assumption that users would visit a popular POI, whereas they would not go to an area in which no POIs have been visited by his or her friends or sat-isfy his or her individual preferences. Accordingly, we formally define several UPGs next.

Definition 4.1 . User  X  POI graph weighted by preference-triggered intentions (UPG PreI ). Given a user set U and a POI set P , the UPG weighted by PreI is a weighted complete bipartite graph with the edge set U  X  P . The weighting function is formulated as where u  X  U and p  X  P .

There are four UPGs weighted by PreI, because there are two features extracted from PreI and two extracted from PopI. Intuitively, we have four combinations for the UPG PreI &lt; HPref, AP &gt; ,andUPG PreI &lt; HPref, RP &gt; .
 Definition 4.2. User  X  POI graph weighted by social-triggered intentions (UPG SI ). Given a user set U and a POI set P , the UPG weighted by SI is a weighted com-plete bipartite graph with the edge set U  X  P . The weighting function is formulated as where u  X  U and p  X  P .

Similarly, because there are two features extracted from SI and two from PopI, there are four kinds of UPG weighted by SI. Accordingly, we have four combinations for the weighting function. We denote these as UPG SI &lt; CheckSim, AP &gt; ,UPG SI &lt; CheckSim, RP &gt; ,UPG SI &lt; DisSim, AP &gt; ,andUPG SI &lt; DisSim, RP &gt; . Existing random walk approaches do not address the heterogeneous features discussed in the previous sections but instead use a straightforward aggregation of the extracted features, such as a linear combination. This leads to certain features dominating others. Given m users and n POIs, we build an m  X  n adjacency matrix M for the UPG. Formally, M = [ w ij ], 0 i &lt; m ;0 j &lt; n , where w ij represents the weight of the edge linking the ith user and the jth POI. Formally, the random walk model applied to the UPG can be described as follows: where k indicates the number of iterations; M col indicates the column stochastic matrix of M (computed by normalizing each column in M ); M ro w indicates the row stochastic matrix of M (computed by normalizing each row in M );  X  1 indicates a matrix with all elements equal to 1 / m ;  X  2 indicates a matrix with all elements equal to 1/ n ;and  X  indicates the  X  X eleport probability, X  which represents the probability of a random surfer teleporting from a POI node to a user node (respectively from a user node to a POI node) instead of following the links in the UPG.

As we described earlier, there are eight types of UPG. Therefore, we can randomly select one of these as the matrix M in each iteration. Based on this idea, we propose the novel Dynamic HITS-based Random Walk model, as shown in Figure 9. First, the initial state of each user is obtained (see lines 1 through 3 of Figure 9). For each iteration, we randomly select one of the UPGs as the surfer teleporting between POI nodes and user nodes (see lines 4 through 8 of Figure 9). Finally, we can obtain the probability that each user achieves each POI v by the Dynamic HITS-based Random Walk (see lines 9 through 11 of Figure 9).
 M , M col ,and M ro w foraUPGisasfollows:
If we want to calculate the relevance of the first user to other users, we initialize x user as(1,0,0,0) T and then use the power iteration shown in Equation (14) to calculate the vectors x k user . If we set the number of iterations k to 2 and the teleport probability  X  to 1, the relevance of the first user to other users can be calculated as follows:
Accordingly, we find the relevance probabilities for the first user to the second, third, and fourth users to be 5/77, 1/6, and 4/21, respectively. After the relevance learning step, we must estimate the relevance between users and POIs. Considering that the POIs in urban areas are very crowded, there will be too many POIs in the recommendation list. Although we can use some conditions from the users X  environment, such as geographic distance, to filter the possible POIs, there may still be too many for users to handle. We thus use the relevance results to rank the POIs in the recommendation list. As demonstrated in Figure 1, the POI recommendation phase is similar to the process of information retrieval. All users are considered as queries to search for their top-k nearest POIs. After finding the top-k nearest POIs, the matrix recording the relevance between users and POIs is used to rank the list of POIs. For instance, using u k as a query, we retrieve the 10 nearest POIs based on the geographical distance between u k  X  X  current position and the positions of the POIs. The estimated relevance vector of the search results is then formulated according to the user X  X OI relevance matrix. Based on the estimated relevance vector, we can rank the POIs from high to low relevance. In this section, we present the results from a series of experiments to evaluate the performance of UPOI-Walk using Gowalla and EveryTrail datasets. All experiments are implemented in Java JDK 1.6 on an Intel Xeon CPU W3520 2.67GHz machine with 24GB of memory running Microsoft Windows 7. We first describe the preparation of the datasets and then introduce the evaluation methodology. Finally, we present and discuss our experimental results. 6.1.1. Gowalla Dataset. The Gowalla dataset is a check-in dataset collected from the Gowalla Web site. The dataset contains 1,964,919 POIs, 18,159 users, 5,341,191 check-ins, and 392,246 friend links. We normalize the check-ins for each user and use the normalized check-ins as the ground truth, which we refer to as the relevance ground truth. We normalize the check-in values in the range [0, 5]. The process of normalization is described by Equation (15).
 where x indicates the real check-in number of a user. The  X  X in, X   X  X ax, X  and  X  X vg X  designations indicate the smallest, largest, and average check-in number of a user, respectively. 6.1.2. EveryTrail Dataset. EveryTrail is a trip-sharing and social networking Web site on which users can upload, share, and find trips. The data includes GPS logs and photos within a trip. Users can also label an activity in a trip. The EveryTrail site provides a public API to allow other applications to integrate with their service, although some functionality in the API is broken. For this reason, we crawl Web pages in support of the API to obtain all necessary data. However, the trajectory data is very different from check-in data. We must preprocess the trajectory data to transform it into suitable check-in behavior. Accordingly, we generate locations from the trajectory dataset. Al-though there are many techniques to discover POIs from GPS data, such as grid-based approaches [Giannotti et al. 2006; Monreale et al. 2009] and density-based approaches [Jeung et al. 2008; Mamoulis et al. 2004], we want to know where users are checking in. To this end, the  X  X tay X  parameter is important for detecting POIs. Obviously, these works do not address the stay aspect. As a result, for each user, we adopt the notion of stay locations [Zheng et al. 2009] to represent users X  check-in behavior, as shown in Figure 10. To discover stay locations, we first detect the regions, called stay points ,in which a user stayed (i.e., s1 and s2 in Figure 10). We then cluster all detected stay points to form stay locations (i.e., Location2 and Location5 in Figure 10). As shown in Figure 10, the user moving along the trajectory could be viewed as checking in to Location2 and Location5. We directly use the activity tags of the trajectory to annotate the locations that it passes. Considering that the tags are provided by the user, and a location may be annotated with the same tag several times, we can treat this as a  X  X ighlight tag. X  In other words, the PreI features can also be extracted from the Ev-eryTrail dataset. After completing this process, we have 24,889 locations, 1,133 users, 843,009 check-ins, and 102,861 friend links. UPOI-Walk is based on the ranking of POI scores and can thus be viewed as an information retrieval system with users as the query terms. Therefore, we employ the popular measurement of normalized discounted cumulative gain (NDCG) [Manning et al. 2008] to evaluate the list of recommended POIs. NDCG is commonly used in information retrieval to measure the performance of search engines. A higher NDCG value for a list of search results indicates that highly relevant items have appeared earlier (with higher ranks) in the result list. For each list of recommended POIs, we can obtain a score list, where the scores are provided by the ground truth. Such a list is called the relevance vector . For example, suppose that the prediction model estimates the relevance scores of POIs F1 , F2 , F3 ,and F4 to be 4, 3, 2, and 1, respectively. Hence, the POIs will be ordered as &lt; F1 , F2 , F3 , F4 &gt; by the recommender. Suppose that the That is, the relevance scores of F1 and F2 are 2 and 3, respectively. The DCG of relevance vector G is computed by Equation (16). The premise of DCG is that highly relevant documents appearing lower in a search result list should be penalized, as the graded relevance value is reduced logarithmically in proportion to the position of the result. Here, the parameter b controls where we start to reduce the relevance value. For example, if the relevance vector is &lt; 2, 3, 0, 1 &gt; and b is set as 3, the DCG [Hu et al. 2007] is 2 + 3 + (0/log 3 3) + (1/log 3 4). In our experiments, b = 2: In particular, NDCG@ p , measures the relevance of the top p ,asshownin Equation (17): where IDCG [ p ] indicates the DCG [ p ] value of the ideal ranking list. For example, given 3, 1, 1, 1 &gt; . NDCG scores range from 0 to 1. The higher the NDCG score, the better the ranking result list. In the preceding example, the NDCG@5 is
However, NDCG is not comprehensive, because it only focuses on ranking perfor-mance, avoiding the absolute difference between estimated relevance and the ground truth. For example, given a ranking list of five items with estimated relevances &lt; 5, 4, can see that the NDCG will be 1.0, implying that the effectiveness of the recommender is good. Besides the ranking performance, we also want to examine how close our pre-dictions are to the eventual outcomes. Therefore, we employ the mean absolute error (MAE) to evaluate the list of recommended POIs: where f i indicates the estimated relevance scores of POI i and y i indicates the ground truth of relevance scores. The lower the MAE score, the fewer the number of errors. In the preceding example, the MAE is The experiments can be divided into internal and external components. For the inter-nal experiments, we first examine the optimal setting for the teleport probability (  X  )in terms of NDCG and MAE. We then compare the effectiveness of every feature extracted from all three types of intention according to these measures. For the external exper-iments, we compare our method with the following five state-of-the-art approaches in terms of NDCG and MAE:  X  CF-Based Models of Ye et al. : Ye et al. [2011b] proposed a CF-based POI recommenda-tion framework that fuses user preference influence, social influence, and geographic influence to infer the check-in probability of a given user at a POI. Therefore, this approach contains three subroutines, which we call CF-based ( user preference influ-ence ), CF-based ( social influence ), and CF-based ( geographic influence ).  X  CF-Based Models of Zheng et al. : Zheng et al. [2010] proposed a CF-based approach in which users can employ an activity term (semantic tag), such as hiking, as a query term to request the location recommendation service.  X  TrustWalker of Jamali and Ester : The TrustWalker model of Jamali and Ester [2009] combines a random walk model with a trust-based CF approach to predict the ratings of items. The trust-based CF approach uses trust values and user-to-item ratings to predict the item ratings. The trust value is the user-to-user rating.  X  HITS-Based Random Walk (denoted as linear combination) : We use the equal weight linear combination of all features mentioned in Section 4.1 to build a UPG and performs HITS-based random walk on it.  X  HITS-Based Random Walk of Cao et al. : Cao et al. [2010] perform a HITS-based random walk on the user X  X OI and POI X  X OI graphs. They utilized the number of check-ins as the weight of edge of UPG and the number of consequent check-ins as the weight of edge of POI X  X OI graph.  X  UPOI-Mine of Ying et al. (denoted as M5Prime) : This approach is our previous work [Ying et al. 2012], which uses the features stated in Section 4.1 to learn a regression tree model X  X 5Prime X  X or relevance estimation. 6.3.1. Tuning Parameters. Because the teleport probability (  X  ) plays a crucial role in the performance of HITS-based random walk, we vary it in our Dynamic HITS-based Random Walk. This allows us to understand the weighting required to achieve the optimal Dynamic HITS-based Random Walk performance. As shown in Figure 11, the optimal performance occurs for a teleport probability  X  = 0 . 4, except for NDCG@5 in the EveryTrail dataset. In other words, a lot of behavior is similar to  X  X andomly X  moving. This is because the check-in data is very sparse, as mentioned earlier, and thus a lot of behavior recorded in the data could be viewed as random movement. If we forced some heuristic to represent users X  behavior, the performance of the model would suffer. Accordingly, we set the teleport probability  X  = 0 . 4 in the following experiments. 6.3.2. Comparison of Various Features in Terms of NDCG. This experiment evaluates the performance of each feature in the proposed UPOI-Walk in terms of NDCG@5, NDCG@10, and NDCG@20. Figure 12 shows the results. We observe that the effec-tiveness of features from PreI is better than that of features from SI. This result shows that users X  self-preference motivates their check-in behavior more strongly than the preferences of their friends. However, we should still use features from PopI and SI to improve recommendations, because the effectiveness of using features from all intentions outscores the other combinations.
 In Figures 13 and 14, we compare all features in terms of NDCG@5, NDCG@10, and NDCG@20 for the Gowalla and EveryTrail datasets, respectively. We observe that the CPref feature outperforms all others, because the POI category is able to represent the users X  preferences. In the EveryTrail dataset, because the trajectory tags are provided by users, the PreI features reflect the users X  preferences completely. As a result, CPref and HPref outperform the other features. 6.3.3. Comparison of Various Features in Terms of MAE. This experiment evaluates the performance of each feature in the proposed UPOI-Walk in terms of MAE. Figures 15 and 16 both show that the MAE is smallest when combining all features, but the features from PreI are not significantly effective. This is because the three intentions are complementary when using a random walk model. If we try to utilize only one feature to perform the random walk, the model will overfit that aspect. This means that the model can only reflect partial properties of the dataset, damaging the accuracy of the model in some cases. 6.3.4. Comparison of Existing Recommendation Models. This experiment compares the per-formance of our proposed UPOI-Walk with that of HITS-based random walk [Cao et al. 2010], TrustWalker [Jamali and Ester 2009], UPOI-Mine [Ying et al. 2012], and two CF-based models [Zheng et al. 2010; Ye et al. 2011b] in terms of NDCG@5, NDCG@10, NDCG@20, and MAE. Figures 17 and 18 show that UPOI-Walk outperforms other existing works in terms of NDCG. This is because we consider check-ins motivated by PreI, whereas other methods do not. Although one of the CF-based models is de-scribed as being influenced by  X  X reference, X  it directly utilizes users X  common check-ins to estimate their POI preferences, instead of the preference for a semantic tag. Besides, we also can observe that the linear combination does not outperform our UPOI-Walk. Although the linear combination and our UPOI-Walk use the same fea-tures, features extracted from PopI might derive more influence for recommendation. Therefore, the influence of other features is diluted by the influence of features ex-tracted from PopI. We also found that the MAE of CF-based POI is large, as shown in Figure 19. Because of the sparsity of LBSN data, considering common check-ins for estimating users X  similarity will lead to many zero scores in the user X  X OI matrix. The reason for these large MAE values is that the zero scores are far from users X  actual relevance scores. On the contrary, UPOI-Walk, HITS-based random walk, and Trust-Walker evaluate the relevance between a user and a POI by using the check-ins of other users who have no common check-in with the user.
 6.3.5. Scalability in Dynamic HITS-Based Random Walk. Generally, random walk algorithms require many matrix multiplications in the iterative process. This makes them very time-consuming. To examine the scalability of our method, we measured the learning time using the dataset crawled from the Gowalla Web site under different number of POIs and number of users. The results are shown in Figure 20. We can observe that the learning time increased exponentially as the size of the dataset increased. Fortunately, the relevance learning can be processed offline. Besides, according to the observation of Cho et al. [2011], people rarely travel long distances. Thus, the data could be divided by city, and we could parallelize our Dynamic HITS-based Random Walk by performing relevance learning on each piece of data. The Gowalla dataset consists of POIs for the whole of New York City, so it is reasonable that the learning step takes about 4 hours. Through the preceding series of experiments, we have shown that the PreI features are significantly more effective than those of SI. This is because many activities are actually motivated by the users themselves, although most check-in behavior is affected by their friends. For example, people usually change their eating habits, although they seldom side with their friends. Accordingly, UPOI-Walk and UPOI-Mine outperform other existing recommenders, which focus only on the check-in behavior motivated by SI. Furthermore, we can also observe that UPOI-Walk outperforms UPOI-Mine, especially in terms of MAE. The reason for this is that our proposed Dynamic HITS-based Random Walk randomly selects different types of UPG for the random walk process. Hence, our model comprehensively considers all intentions used for feature extraction. Therefore, the Dynamic HITS-based Random Walk model is very effective for dealing with heterogeneous data problems. In this article, we proposed UPOI-Walk, a novel approach for recommending interesting urban POIs by mining users X  preferences. We also tackled the problem of mining user check-in behavior in an urban computing environment, which is a crucial prerequisite for effective POI recommendations in urban areas. The core task of POI recommenda-tion in urban areas is conveniently transformed to the problem of relevance score pre-diction. We evaluated the relevance score of each user X  X OI pair by training a random walk model. In the proposed UPOI-Walk, we explored SI, PreI, and PopI by exploiting LBSN data to extract descriptive features. To the best of our knowledge, this is the first work on urban POI recommendation that considers user check-in behaviors motivated by SI, PreI, and PopI in LBSN data. Furthermore, to deal with the heterogeneous feature problem, we proposed a novel random walk model X  X ynamic HITS-based Ran-dom Walk  X  to learn the user X  X OI relevance. Through a series of experiments using two real datasets, Gowalla and EveryTrail, we have validated the proposed UPOI-Walk and shown that it has excellent performance under various conditions. In future work, we plan to design more sophisticated methods to enhance the quality of our proposed Dynamic HITS-based Random Walk for various urban computing service applications.
