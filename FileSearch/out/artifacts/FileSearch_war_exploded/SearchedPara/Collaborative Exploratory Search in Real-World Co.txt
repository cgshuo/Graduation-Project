 We propose Collaborative Exploratory Search (CES) , which is an integration of dialog analysis and web search that involves multi-party collaboration to accomplish an exploratory information re-trieval goal. Given a real-time dialog between users on a single topic; we define CES as the task of automatically detecting the topic of the dialog and retrieving task-relevant web pages to sup-port the dialog. To recognize the task of the dialog, we apply the Author X  X opic model as a topic model. Then, attribute extraction is applied to the dialog to obtain the attributes of the tasks. Finally, a specific search query is generated to identify the task-relevant in-formation. We implement and evaluate the CES system for a com-mercial in-vehicle conversation. We also develop an iPad appli-cation that listens to conversations among users and continuously retrieves relevant web pages. Our experimental results reveal that the proposed method outperforms existing methods, which demon-strates the potential usefulness of collaborative exploratory search with practically usable accuracy levels.
 H.3.3 [ Information Systems ]: Information Search and Retrieval Algorithms Personalized and Collaborative Search, Information Extraction
During the last decade, web searching has become commonplace in our everyday lives. Currently, most search engines supply query-based searching that is designed to navigate a user to those web pages that are most relevant to the user X  X  query. The use of web searching has become very common in our lives. Therefore, many new scenarios of searching arise.

For example, as cars become smarter, a driver might want to search web pages while driving a car to obtain information related to destination or nearby events. Although current navigation sys-tems cannot not usually access the web, some car manufacturers, such as Toyota, already provide a premium service for customers to search information from the web assisted by a dedicated telephone operator. The following conversation illustrates such a situation.
In this scenario, the driver has an information need and the oper-ator makes a search, the search is conducted during a dialog, key-words are extracted from the dialog and fed into the search engine, and the search results are provided promptly and help the task in the dialog. In this paper, we specifically address such a situation: multiple persons collaboratively search the web during the conver-sation. Our system automatically analyzes the discourse, makes a customized query, and shows the results promptly.
 As described in this paper, we propose Collaborative Exploratory Search (CES) . CES can be considered as the combination of multi-domain exploratory search and collaborative search. It is an inte-gration of dialog analysis and web search that involves multiparty collaboration to accomplish an exploratory information retrieval goal. The goal of CES is to support users X  collaboration in search-ing. Given a real-time dialog between users on a single topic, CES extracts topic and attribute X  X alue pairs of a dialog and seeks rele-vant web pages automatically. Using real-time dialog as input data, it enables unconscious search and does not block collaboration.
The outline of the proposed method is shown in Figure 1. As shown in Figure 1, we break down the CES into three parts: (i) topic extraction, (ii) attribute extraction, and (iii) web search. For topic extraction, we apply the Author X  X opic (AT) model, an unsu-pervised topic detection algorithm to detect the topic of a dialog be-tween users. For attribute extraction, we apply a two-stage method to obtain attribute X  X alue pairs. Then the customized query is gen-erated and the search results are shown in part (iii). We evaluate our CES approach using an actual dialog dataset by drivers and op-erators in Toyota. The results show that we can detect the task in a conversation with 50% accuracy in unsupervised topic extraction, and attain a 0.67 F -measure in attribute extraction.
Exploratory search is defined as the situation in which the user starts from a not-so-well-defined information need and progres-sively discovers more on his need and on the information available to address it [6]. Kotov et al. [4] proposed a questionguided search, in which a retrieval system would generate potentially interesting questions to the users automatically. The question-guided search system returns  X  X ho is John Kennedy? X  or  X  X hen was Kennedy sworn as the President of the United States? X  if users entered query  X  X ohn kennedy X . Rajaraman [10] produced Kosmix web service Kosmix is a generalpurpose topic discovery engine, which responds to keyword search using a topic page that summarizes the most rel-evant information related to the subject associated to the search. Bozzon et al. [3] proposed Liquid Query, a paradigm that exploits the power of underlying search services and provides the user with a multi-domain exploratory search environment (e.g., travels, mu-sic, shows, food, movies, and so on). Recent studies have revealed that most people want to search with other people [5, 12]. A survey [7] of 204 people revealed that 53.4% of participants do some col-laborative search tasks: travel planning, shopping, literature search, technical information, and so on. For example, TeamSearch [9] is a tabletop application that enables small, co-located groups to search for digital photographs from a metadata-tagged repository. S3 [8] allows users to share useful sites found during a web search asyn-chronously by representing search results in a persistent file format that can be sent to and augmented by several people. Amershi et al. introduced CoSearch [1], a system that is intended to improve the experience of co-located collaborative web search by leverag-ing readily available devices such as mobile phones and extra mice.
Let us consider the situation where two agents, A and B , are having a dialog D about a particular topic T . Dialog D includes some attributes V . D can be represented as a vector (hereinafter designated as a dialog vector) where a i and b j are sequences of words (may or may not be com-plete sentences) uttered respectively by A and B . Elements in d http://www.kosmix.com/ are sorted in the order they are uttered by A and B . Only relative ordering of utterances is considered, thereby ignoring the absolute time information. Given a dialog vector d , we define collabora-tive exploratory search (CES) as the problem of retrieving a set of web documents L , that is relevant to the topic T and attributes V discussed in the dialog D . To develop a CES system we must perform three tasks: (a) extract the topic being discussed by the speakers in the dialog (Section 4), (b) extract attributes and their values regarding the main topic discussed in the dialog (Section 5), and (c) form queries using the extracted attributes and their values to domain-specific search engines to retrieve information to support the conversation (Section 6).
We briefly review the Latent Dirichlet Allocation (LDA) model and Author X  X opic (AT) model, which we use in our system. LDA is a Bayesian network that generates a document using a mixture of topics [2]. In its generative process, for each document d , a multinomial distribution  X  d over topics is randomly sampled from a Dirichlet distribution with parameter  X  ; then, to generate each word, a topic z di is chosen from this topic distribution, and a word, w di , is generated by random sampling from a topic-specific multi-nomial distribution  X  z di . Figure 2 (a) shows the graphical model for LDA.

Despite its simplicity and numerous applications, LDA cannot capture the authorship of documents. For example, multiple au-thors might contribute to a particular document and we might want to extract topics considering both word distribution as well the au-thors who wrote those words in a document. The Author X  X opic (AT) model [11] extends LDA by incorporating author information for topic extraction. Figure 2 (b) shows an AT model. Specifically, each author is associated with a multinomial distribution over top-ics, represented by  X  . Each topic is associated with a multinomial distribution over words, represented by  X  . The multinomial dis-tributions  X  and  X  have a symmetric Dirichlet prior with hyperpa-rameters  X  and  X  . For each word in a document, we sample an author x uniformly from a d , then sample a topic z from the multi-nomial distribution  X  associated with author x and sample a word w from a multinomial topic distribution  X  associated with topic z . This sampling process is repeated N d times to generate a docu-ment d (here, N d is the total number of words in document d ). The AT model has two sets of unknown parameters  X  A author-topic distributions  X  , and T topic distributions  X   X  as well as the latent variables corresponding to the assignments of individual words to topics z and authors x . It has been shown that parameter esti-mation via Expectation-Maximization (EM) algorithm engenders local maxima and is computationally inefficient in topic models. Consequently, Gibbs sampling has been used to estimate the pa-rameters in AT models. Once we have estimated the parameters  X  and  X  , we can use those values to compute the posterior probability of p ( t | D ) , to assign a topic to a given document D . We model a multi-party dialog using AT model as follows. Each author in the AT model is replaced by a speaker who participates in a dialog. A document in the AT model is replaced by a single dialog. Moreover, the words that comprise a document are replaced by the utterances in the corresponding dialog. By modeling a multi-party dialog as an AT model, we leverage on existing work on topic models to solve the collaborative explorative search problem.
Once we have identified the topic of the conversation, we must extract keywords related to that topic to retrieve information to sup-port the conversation from a Web search engine. We extract at-tributes and values for the main topic as keywords. For example, if the topic is about a hotel reservation, then we extract attribute val-ues such as the location of the hotel, the number of people staying, the check-in date, the check-out date, desired price range, Extract-ing attributes from texts has received much attention lately as a result of the increasing demand in information extraction systems. Watanabe et al. proposed a two-stage attribute extraction method [13], which we use in our CES system. First, given a dialog D , we mark all occurrences that are likely to be values of some at-tributes. We designate such occurrences as candidates . The can-didate identification is done using a named entity recognizing tool and a gazetteer. Entity types such as personal names, locations, and organizations are selected as candidate attributes. In addition, we create lists of awards, universities, nationalities, etc. and use those lists in a gazetteer to mark candidate attributes. Having input from both the named entity recognition tool as well as the gazetteer enables an attribute extraction system to recognize a large number of attributes in texts. In the second stage, from the set of identified candidates we select the ones that are likely to be attributes relevant to the topic of the dialog. For this purpose we employ a distance-based heuristic. Specifically, given a list of candidate attributes and their occurrences in a text, we compute the distance between each attribute and the topic of the document. Candidates that are in close proximity to the topic of the document are selected as attributes for that document.
After identifying the topic in a dialog and extracting appropri-ate keywords for that topic, we retrieve information relevant to the topic using domain specific search engines. Here, the input is the topic and attribute-value pairs extracted from the target dialog, and the output is a list of web pages which is most relevant to the task, which satisfies the requirement of attribute-value pairs. We obtain relevant information from not only surface web but also from the Table 1: Basic statistics for each task in Toyota dialog dataset. deep web using many web service APIs. We can thereby obtain the largest range of information and can mutually compare the results obtained using several web services. For example, the system gets HOTEL dialog among users and extracts attribute X  X alue pairs such as (place,  X  X okyo X ), (heads, 2), (price, $100). In this case, the sys-tem searches for a hotel in Tokyo with a twin-bed room for $100 or less. In order for a user to compare results, web pages are selected widely from various perspectives. For instance, if users are search-ing for a restaurant, then we show the most popular restaurant and high-class restaurants. Users can choose from them depending on their tastes.
We evaluate the performance of CES in this section. As shown in Figure 1, CES are decomposed into three tasks: topic extraction, attribute extraction, and web search. We conduct two sets of exper-iments to evaluate our CES system. First, we measure the perfor-mance of topic extraction. Then we evaluate the attribute extraction method and show how many attributes are correctly chosen.
We use a dialog dataset provided by Toyota Motor Corp. The dataset includes records of conversations between a driver and an operator: A call center operator provides a concierge service to drivers and provides information services such as recommendation and reservation of restaurants, hotels, or shops, and providing a phone number or the location of landmarks and so on. The data include a speaker, utterances obtained by speech recognition plus manual fixing, and time. For privacy reasons, the names of drivers and operators are anonymized. We target Japanese real-time di-alog, although our method does not depend on any specific lan-guage. The Toyota dialog dataset includes 604 dialogs and 47,322 utterances, consisting of 356,618 words. We extract attribute-value pairs and divide dialogs into six tasks as shown in Table 1. The RESTAURANT and NAVIGATION tasks are the most numerous.
 Drivers often want to know the locations of places, or want to search for restaurants. Although the durations of the dialogs are not so varied among tasks, the average number of turns presents some tendencies: HOTEL and RESTAURANT needs more turns than others. Drivers must clarify their preferences and a higher de-gree of interaction might be necessary.

We first measure the performance of topic extraction. The task is to classify the dialog into one of the six task types. We devide 604 dialogs into 404 training data and 200 test data. We annotated the task type of each dialog manually. We use pLDA 2 as a baseline with the number of topics T =10. LDA parameters are set to  X  = 0 . 1 and  X  = 0 . 01 . Table 3 presents the performance of AT model, used in our CES system, and a baseline. Overall, the precision and recall of AT are higher than those of LDA. Table 2 portrays a confusion ma-trix of classification. The upper part is the result of LDA; the lower part is the result of AT model. Apparently, LDA classifies dialog mostly to NAVIGATION and RESTAURANT , whereas AT model classifies into all tasks properly. From the AT result, we can find that HOTEL and RESTAURANT tasks are confusing because both http://code.google.com/p/plda/ Table 2: Confusion matrix of the topic extraction. Legend: H (HOTEL), N (NAVIGATION), R (RESTAURANT), S (SHOP), P (PARKING), C (CALL). Table 3: Performance of the proposed method and baselines. include conversations about the location, number of people, prices, and reservation. Next, we evaluate attribute extraction after obtain-ing the task of each dialog. We use 200 labeled dialogs as test data. We compare five methods: AE-clueword , AE-clueword-driver , AE-clueword-operator , AE-driver , and AE-operator . The AE-clueword is the proposed method, which extracts attribute values based on clue words. The AE-clueword-driver extracts informa-tion only from the utterances from a driver, and AE-clueword-operator extracts information only from those of an operator. The AE-driver and AE-operator extract attribute values using candi-dates of attribute values. Each chooses randomly one candidate value from either the driver X  X  utterances or from the operator X  X  ut-terances.

Table 4 presents results of the experiment. The proposed clue word methods score high. In dialog, an attribute and an attribute value often appear as an adjacency pair, so clue words to represent attributes are efficient to find attribute values for each task. Conse-quently, the AE-clueword-driver and AE-driver outperform AE-clueword-operator and AE-operator . It is apparent that a user X  X  utterances are likely to include attribute values rather than an oper-ator X  X  because CES in this context is mainly intended to fulfill the drivers information needs. Overall, the proposed methods on topic extraction and attribute extraction outperform the baseline meth-ods, demonstrating the effectiveness of our approach. Experimental results show that the CES model performs better than LDA in terms of both precision and recall on the topic extraction task. In the Toy-ota dialog dataset, there are two parties: an operator and a driver. Modeling those two speakers in the AT model enables us to de-tect the topic of the dialog accurately. Although there exist stan-dard benchmark test collections such as TREC evaluation bench-mark for Web information retrieval systems and standard evalua-tion measures such as average precision or normalized discounted cumulative gain (NDCG), evaluating a collaborative search system Table 4: Performance of the proposed method and baselines in the attribute extraction task.
 is a challenging task because of the lack of any gold standard for the collaborative search task or evaluation measures that take into account the collaborative nature of the task. Developing test col-lections and evaluation measures are important future research di-rections in this field. To underscore the effectiveness of the CES model, we developed a prototypical CES application for use on iPad.
We proposed collaborative exploratory search (CES), which in-volves multiparty collaboration to accomplish an exploratory infor-mation retrieval goal. Experimental results from a topic extraction and attributes extraction task showed that the proposed method out-performs baselines. [1] S. Amershi and M. R. Morris. Cosearch: A system for [2] D. M. Blei, A. Y. Ng, and M. I. Jordan. Latent dirichlet [3] A. Bozzon, M. Brambilla, S. Ceri, and P. Fraternali. Liquid [4] A. Kotov and C. Zhai. Towards natural question-guided [5] A. Large, J. Beheshti, and T. Rahman. Gender differences in [6] G. Marchionini. Exploratory search: from finding to [7] M. R. Morris. A survey of collaborative web search [8] M. R. Morris and E. Horvitz. S3: Storable, shareable search. [9] M. R. Morris, A. Paepcke, and T. Winograd. Teamsearch: [10] A. Rajaraman. Kosmix: Highperformance topic exploration [11] M. Rosen-Zvi, T. Griffths, M. Steyvers, and P. Smyth. The [12] M. B. Twidale, D. M. Nichols, and C. D. Paice. Browsing in [13] K. Watanabe, D. Bollegala, Y. Matsuo, and M. Ishizuka. A
