 An increasing number of users are nowadays facing the information deluge, which hinders the discovery of content and services of interest. Recommender systems address this problem through the provision of personalized recommendations to users. Personalization, however, entails another problem: potential leak of sensitive user data [10]. Indeed, accurate recommendations inherently require a large volume of personal user data, whic h may concern some users to the extent that they refrain from using the recommender despite its benefits [1].
While encryption technologies can mit igate the risk of eavesdropping when data is transferred to the recommender system, the retention of the data by the recommender exposes the users to additional privacy risks. Even seemingly innocuous preference information, like that typically stored by recommender sys-tems, introduces privacy risks, as demon strated in scenarios such as 1) inference of undisclosed sensitive personal information, e.g., relationship status or sexual orientation, through access to public user data [14,20,4,9]; 2) trading or broker-ingofpersonaldatatoanuntrustedthirdparty; 1 or 3) disclosure of sensitive personal information to l aw enforcement agencies, even without a warrant [6].
These issues fuel a growing concern that m otivates keeping personal user data away from a centralized storage, thereby mitigating data disclosure risks.
In this work, we leverage MF techniques [8] to investigate the use of a semi-decentralized recommender, which retains neither the user ratings nor the latent user vectors. Instead, user ratings are stored on the user side, e.g., on a device owned and carried by the user or on a secure cloud-based servi ce with a personal account. When a user rates a new item or a recommendation is required, the user X  X  ratings are provid ed to the MF recommender, which derives the latent user vector and updates the latent item matrix. Then, item ratings are predicted and the recommendations are generated. When the interaction with the user is concluded, the recommender discards both the ratings and the latent user vector. This semi-decentralized setting mi tigates the above risks by not retaining permanently any user-specific data that could be exploited for the inference of sensitive personal information, while allowing service providers to retain content-specific data, crucial for the provision of recommendations.

We carried out an experimental evaluatio n, considering scen arios in which the recommender transitio ns from the centralized to th e semi-decentralized model, as well as using the latter from the outset. The results demonstrate that the semi-decentralized model achieves accura cy that is close to that of the central-ized recommender, and the gap between the two diminishes over time, as more ratings become available to the system. To summarize, the main contributions of this paper are two-fold. Firstly, we p ropose a novel semi-decentralized vari-ant of MF without user data retention. Secondly, we evaluate several variants of the algorithm and perform a time-based simulation that demonstrates the applicability of the algorithm to a large-scale real-life MF recommender. Several studies focused on the privacy i mplications of access to user ratings. In the Netflix Prize competition, 2 data anonymization was used to protect user rat-ings. However, Narayanan and Shmatikov [14] demonstrated that it was possible to de-anonymize the ratings with a little background knowledge, and that sensi-tive and private information could be inferred from these ratings. In a later work, Calandrino et al. [2] demonstrated that it was possible to infer which items had been rated by a user by sampling changes to aggregated publicly available item recommendations. Weinsberg et al. [20] showed that demographic data could be derived from user ratings. The experiments showed that gender and other sensi-tive private information (age, ethnicity, political orientation) could be accurately inferred. Chaabane et al. [4] demonstrated a similar problem in information per-taining to users X  interests. By accessing supposedly harmless music interests of users, the authors were able to infer sensitive undisclosed information about user gender, age, country, and relationship status. Similarly, Kosinski et al. [9] were able to uncover sensitive information referring to sexual orientation, political alignment, religion, and race, based on Facebook  X  X ikes. X 
Decentralization of personal user dat a was previously studied in the context of online advertising, which entails gathering browsing and behavioral data. Ad-nostic [19] and Privad [7] are two privacy preserving systems, which offer adver-tisement services while storing private user data on the user side. This is achieved by pushing parts of the advertisement sel ection process to the client. However, this solution is inapplicable to MF and Collaborative Filtering recommenders, which are too computationally intensive to run on the client. Even if that was feasible, many recommenders would need to push to the user side additional information, such as item descriptions, similarity scores, or latent factors. Not only may this information be deemed too sensitive by service providers, it could also be used maliciously, e.g., for inferring other users X  data [2].
Our semi-decentralized variant of MF, which retains no user data, shares similarities with prior works on online MF [16,15,18,5,12]. These works leveraged incremental re-training of us er/item vectors (e.g., through folding-in [16]) when new ratings become available, to avoid the cost incurred by running the full factorization process, and improve system scalability and efficiency. In contrast to these approaches, we present a novel solut ion that relies neither on a centralized storage nor on the availability of past user ratings. In this section we present how a MF-based recommender can be modified to operate without retaining user ratings, profiles, or latent vectors. 3.1 Preliminaries and Notation Consider a set U of n users, who assign ratings to a set I of m items. We denote by S the set of available ratings, where each element is a triplet ( u,i,r ui ), and r ui denotes the rating that user u assigned to item i .Wedenoteby S v = { ( u,i,r ui )  X  S | u = v } the set of known ratings of user v . The recommendations are generated by predicting the values of unknown ratings. MF achieves this by learning two low-rank matrices with d latent factors: P n  X  d for users and Q m  X  d for items, where a row p u in P pertains to user u and a row q i in Q pertains to item i . The predicted rating of user u for item i is then computed by  X  r ui = p u q i .Given the known ratings in S , the latent matrices P and Q are obtained by solving the optimization problem where the loss function J S ( P,Q ) with regularization parameter  X  is given by
We consider the Stochastic Gradient Descent (SGD) technique for empiri-cal risk minimization, with a learning rate  X  [8]. In this process, P and Q are Algorithm 1. GetRecommendations( S u , Q ) modified for each r ui  X  S using the following update rules, which are applied iteratively until both P and Q converge: 3.2 Maintaining Decentralized User Profiles One way to avoid centralized retentio n of user profiles by a MF recommender is to off-load them to the user side. Predicting unknown scores  X  r ui for all unrated items of user u requires the latent user vector p u and the latent item matrix Q . In a semi-decentralized setting, u can send the user vector p u to the system, which holds the item matrix Q . The system then computes  X  r ui and provides the recommendations to u . Once the interaction with u is concluded, the system discards p u , as it is not needed for recommendations for other users. This elim-inates the need for a permanent centrali zed retention of all ratings of all users, and mitigates privacy concerns related to misuse of personal data  X  X t rest X .
One drawback of this setting is that the user X  X  p u may not reflect recent ratings provided by other users. In MF, p u is affected indirectly by ratings of other users, as new ratings gathered by the recommender affect Q and, in turn, affect vectors of users, who previously rated those items. Fixing latent user vectors and keeping them on the user side hinders these updates of p u , and can cripple the accuracy of the system. Folding-in techniques [16] circumvent this drawback, using an up-to-date matrix Q to re-evaluate the user vector p u by solving This optimization problem can be solved with the SGD technique by fixing Q and only applying update rule (3). Algorithm 1 shows the modified semi-decentralized reco mmendation proces s that recomputes p u from S u . 3.3 Maintaining the Item Matrix In addition to generating recommendations, the system needs to update the latent item matrix Q based on new ratings. In a standard MF setting, the user Algorithm 2. UpdateItem( S u , r ui , Q ,  X  ,  X  ) and item vectors are typically updated simultaneously. But this cannot be done in the semi-decentralized setting, as no use r ratings are retained. Alternatively, following the approaches outlined in [15,16], folding-in can be applied to update the item vectors by fixing the user matrix P , and retraining an item vector q i through applying SGD and update rule (4) to all the available ratings. While effective, this iterative update of item factors is also inapplicable unless all the ratings for i are available, and another solution is needed.

Algorithm 2 presents a modified process for updating Q that leverages the fact that for each new rating r ui , the update of q i requires access only to the vector p u of the user who provided the rating. First, the user u sends r ui along with previous ratings in S u to the system, which reconstructs p u . Then, update rule (4) is applied to the newly added rating and, finally, the system keeps the updated latent item vector and discards both p u and S u .

We consider two variants of this sch eme. In the first variant, denoted by new , we perform an update only with the newly added rating r ui , i.e., apply the update in instruction 4a of Algorithm 2. In the second variant, denoted by rated ,wetake advantage of the availability of the entire set of ratings S u andapplyaniterative update rule in instruction 4b of Algorithm 2 to the item vectors of all the items that were rated by u . We note that unlike the new variant, which updates one latent vector for every new rating, the rated variant updates the vectors of all previously rated items, which may bias the latent item matrix Q towards ratings of highly active users, who provided many ratings. However, this bias can be mitigated, e.g., by weighting the update according to the number of ratings that a user provided.
Note that the semi-decentralized se tting can be extended to support more complex variants of MF. For example, a common practice is to incorporate user bias b u = r from the gathered ratings prior to computing P and Q , and re-introduced when the predictions are computed:  X  r u,i = b u + p u q i . This bias can be stored at the user side, or be directly recomputed by the system from the gathered ratings, similarly to the user latent vector p u . In order to evaluate the proposed semi-d ecentralized variants of MF, we consider the following scenario. The recommende r collects user ratings until a cut-off time t s , after which it transitions to the sem i-decentralized mo del. All the data collected before t s is considered as the initial static data. Then, the recommender retains the latent item matrix Q s derived at t s and discards the latent user matrix P . As discussed in Section 3, from time t s and onwards the recommender retains neither the user ratings nor the latent user vectors.

The item matrix Q , initialized to Q s , is updated as outlined in Algorithm 2, when new ratings become available. We posit that the resulting Q will deviate from the hypothetical Q  X  that could be derived if the recommender retained user ratings as in the centralized MF. That is, the proposed approach can only approximate Q  X  , since not all user ratings are available when Q is updated. A  X  X ood X  approach for updating Q will be one that generates predictions as close as possible to those of the centralized MF that continuously updates P and Q .
We denote by R s the ratio between the number of ratings collected before time t , i.e., ratings used to derive Q s , and the overall number of ratings processed in the evaluation. R s represents the relative volume of the static initialization data. A special case of R s = 0 reflects a scenario in which the semi-decentralized recommender has no prior user data and starts from the outset with a randomly initialized Q .

In the evaluation, we use two public datasets: MovieLens and Netflix. Since the temporal information of MovieLens ratings was deemed unreliable (many ratings had the same timestamp), we use MovieLens to produce a random split of data and Netflix to produce a time-based split. Specifically, we use the Movielens 10M dataset to perform a 10-fold cross validation for randomly split non-overlapping training and test sets. For the Netflix dataset, we randomly sample 10% of users to obtain a comparable dataset of 10M ratings. For the time-based split we select the most recent 10% of ratings given by each user as the test set. We use RMSE to assess the performance of the proposed approach and the Wilcoxon X  X  signed-rank test to validate statistical significance [17].

We tune the MF parameters in an offline evaluation that is omitted due to space limitation. We set the number of factors to d = 10. When training with static data, we use SGD with regularization factor  X  =0 . 1, learning rate  X  = 0 . 01, and n = 200 iterations. We use the user and item biases as presented in Section 3.3. When deriving p u (Equation 5), we run n = 10 iterations of SGD. When updating Q (algorithm 2), the learning rate is set to  X  =0 . 005 and  X  =0 . 05 for the rated and new approaches, respectively. 4.1 Overall Performance In this section, we assess which of the prop osed variants of the semi-decentralized MF performs better and how they compare to the state-of-the-art MF that retains user data.
 random and time-based split of training and test data, respectively. We compare the two proposed variants of the semi-d ecentralized MF, which update the latent item vectors of either all the rated items ( rated ) or of the recently rated items only ( new ), to four baseline approaches: Baseline Standard centralized implementation of MF, using SGD and retaining Static Similar to baseline, but using only the static ratings available at t s , i.e., Online Centralized online MF proposed by Rendle and Schmidt-Thieme in [15], Slope-one A simplified item-based Collaborative Filtering (CF) that assumes a
We observe that for the random split (Figure 1a), the new variant outperforms the rated variant for R s  X  0 . 4, but its error is substantially higher for lower ra-tios of static data. This is due to the fact that new introduces fewer updates to the reasonably stable Q s than rated , and, just like the static approach that does not update Q at all, yields good performance for high values of R s .Conversely, the rated variant, which entails more updates, results in a stronger deviation of Q from Q s that has already stabilized for high R s , and this leads to less accurate predictions. The performance of the rated variant is, however, superior to that of new and static for lower ratios of R s , due to the repetitive vector updates of the rated items.

In the more realistic time-based split scenario portrayed in Figure 1b, rated outperforms new across the board: the repetitive updates of the latent vectors of all the rated items in S u keep Q closer to Q  X  as rating of users are processed over time. In contrast, the more conservative update process of new performs worse when ratings are fed in temporal order, since it is slower to incorporate ratings of new items, which are more important to accurately predict ratings in this setup (this is also shown in the static approach). 3 We conclude that, when taking a realistically behaving temporal factor of ratings into consideration, the rated variant is the best performing semi -decentralized MF approach, and its performance is stable across various values of R s .
 As expected, standard centralized MF achi eves the highest accuracy. However, MF is not sufficiently scalable and canno t be deployed in a practical Web-based recommender, since it requires the latent vectors to be re-trained for every new rating. In the following analysis, we consider the RMSE of standard MF as the lower bound for error achievable by other approaches and refer to its accuracy as the baseline.

Table 1 summarizes the performance of th e evaluated approaches with respect to the centralized MF base line. The performance is quantified by averaging the errors obtained for ten values of R s , ranging from 0 to 0.9. As can be seen, the average error of the online approach is only 0.12% higher than that of the MF baseline for the realistic time-based split. The rated and new semi-decentralized variants are inferior to MF by 1.02% and 2.33%, respectively. Finally, slope one and static demonstrate substantially higher error rates than MF.

Out of the two semi-decentralized MF variants, rated again outperforms new and comes closer to the baseline MF. Online is very close to MF and is consis-tently superior to our best performing rated variant. However, it should be noted that online benefits from access to all the availa ble ratings and c an re-train the latent factors, which explains its performance. Placing rated on the range be-tween the upper bound of accuracy set by the baseline MF and the lower bound set by slope one , we highlight that rated is much closer to MF than to slope one . We conclude that rated offers a reasonable compromise, as it performs online updates of the latent vectors, without retaining user data. 4.2 Impact of the Availability of User Ratings In this section we investigate how the number of available user ratings affects the performance of the proposed approach. We do this by measuring the fluctuations in the accuracy of the semi-decentralized rated variant, as a function of the volume of incrementally added training data. We fix the static data ratio to R s =0 . 3, and then gradually increase the number of ratings added on top of the static data from 0% to 100% of the remaining training ratings. We split the users into four equal-sized buckets acco rding to the number of their ratings, and average the user-based accuracy of the rated variant across the buckets.
Figures 2a and 2b show the relative difference between the RMSE of the rated variant and that of the baseline MF, respectively for the random split and the time-based split, both averaged on a bucket basis for an increasing number of incrementally added ratings. Generally, the performance of rated converges to MF as more ratings become available. For the random split, there is an evi-dent difference between the buckets, and the difference with respect to MF gets smaller with the number of user ratings. This is expected, as predictions based on many ratings are generally more accurate than those based on a few ratings. The convergence rate observed in the tem poral split evaluation is slower than that observed in the random split evaluation, since the temporal split empha-sizes prediction of ratings for new items, and in the early stages of the evaluation there is no sufficient training data perta ining to new items to perform such pre-dictions accurately. The difference between the buckets is less pronounced for the time-based split, and the behavior of the top two buckets, corresponding to users with more than 96 ratings, is similar.

Hence, we conclude that when users have a moderate amount of ratings, the prediction accuracy converges to the ba seline MF, while users with fewer ratings will suffer a slight impact on performance. 4.3 Time-Based Simulation Finally, we investigate the performance of the proposed approach in a realistic large-scale time-aware scenario. We per form this experiment using the complete Netflix 100M ratings dataset, to mimic the evolution of a Web-scale recommender system that transitions to the semi-d ecentralized MF mode l. We compare the accuracy of the two semi-decentralized variants that do not retain user data with the baseline MF. In this experiment, we sort all the available Netflix rat-ings according to their timestamps. 4 We then use the increasing-time window evaluation methodology with a window size of 1 month [3]. That is, we use the data of the first n  X  1 months as the training set, predict the ratings of the n -th month, and compute the RMSE for that month. Then, we add the data of the n -th month to the training set and predict the ratings of the n +1-thmonth, and so on. The overall span of Netflix ratings is 72 months and we initialize the training set with the first four months of data.

Figure 3 shows the RMSE of the new , rated , and MF recommenders (values on the left axis), as well as the relative difference between the rated variant and the MF baseline (right axis). Initially (months 4 to 24), the difference hovers around the 2% mark, and it steadily diminishes later on, as the training window size increases. Eventually, the difference becomes smaller than 1% around month 55 and virtually disappears from month 68 onward. 5 We note some lose of accuracy (spikes in the relative difference) up to months 38-40. These spikes are due to the introduction of a large number of new items into the system paired with a lower number of users in the system. This makes our algorithms more prone to error, as their update process is slower than that of the baseline (the new approach has a higher spike due to an even slower update cycle).

This large-scale simulation clearly demonstrates that the performance of the proposed approaches comes very close to that of the baseline MF, as more ratings become available to the recommender. 6 This result is encouraging, as it shows that although avoiding user data r etention comes at the cost of accuracy, the cost diminishes over time. Also, while rated outperforms new at most stages of the simulation, their performance converges at the later stages, as more rat-ings are included, implying that new could also be viable when enough training data is available. Overall, this simulation demonstrates that the proposed semi-decentralized MF variant can be deployed in a practical Web-scale recommender. In this work we present a novel semi-d ecentralized variant of MF that retains neither user ratings nor user latent factors. This way, we mitigate the risk of undesired access to personal data by malicious third parties and hinder the use of the data for purposes other than the recommendations. Our evaluation indicates that the proposed approach performs on a par with the state-of-the-art MF approaches, thus offering a viable alternative and moving a step forward towards privacy-aware recommender systems. At the same time, our approach allows service providers to keep control o f their domain knowledge, encapsulated in the latent item factors matrix.

Note that even if the service providers avoid user data retention, this does not prevent possible leakages of item-related data, which is retained by the service providers. While item-relat ed data does not contribute directly to user privacy risks, it could still be abused to derive personal information, as implied by Calan-drino et al. [2], and addressing this risk would require the use of complementing privacy mechanisms, such as differential privacy [13]. However, when compared to accessing readily-available user data, such attacks require more effort, depend on access to auxiliary data, and are harder to execute at scale.

The mitigation of privacy risks relies on the service provider discarding user data. One could argue that no privacy gain is achieved, as user ratings are still accessible to service providers when the recommendations are generated and the users have no means to verify that their d ata is discarded. Furthermore, since the recommendations requires access to all th e user X  X  ratings, service providers could still mine personal information when the ratings are sent to the system. However, such misconduct may be detrimental to user trust and to the reputa-tion of the service. While service providers need to balance user privacy with the benefits of acquiring personal data, it is worth to note the increased awareness of privacy, such that privacy is often advocated as a competitive advantage of ser-vices. 7 This incentivizes service providers to conform to privacy regulations and to embrace privacy preserving algorithms. We also note that our approach does not preclude law enforcement agencies from activating  X  X iretaps X  that record the data of certain users. In fact, as made evident in the mandatory data re-tention initiative, 8 and the recent revelations about the NSA and the PRISM program [6], service providers may be forced to put such mechanisms in place. However, we posit that requiring an explicit wiretap activation, as opposed to grabbing data that is already stored in the system, raises the bar for user privacy, and reduces the risk of users being subject to passive surveillance. In addition, cryptographic techniques could be leveraged for maintaining the confidentiality of user input, and pose an interesting future research direction.

