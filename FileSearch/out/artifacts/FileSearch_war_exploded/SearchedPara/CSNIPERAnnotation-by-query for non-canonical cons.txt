 Linguistic annotation by means of automatic pro-cedures, such as part-of-speech (POS) tagging, is a backbone of modern corpus linguistics; POS tagged corpora enhance the possibilities of corpus query. However, many linguistic phenomena are not amenable to automatic annotation and are not readily identifiable on the basis of surface features. Non-canonical constructions (NCCs), which are the use-case of the tool presented in this paper, are a case in point. NCCs, of which cleft-sentences are a well-known example, raise a number of issues that prevent their reliable automatic identification in cor-pora. Yet, they warrant corpus study due to the rel-atively low frequency of individual instances, their deviation from canonical construction patterns and frequent ambiguity. This makes them hard to distin-guish from other, seemingly similar constructions. Expert knowledge is thus required to reliably iden-tify and annotate such phenomena in sufficiently large corpora like the 100 mil. word British National Corpus (BNC Consortium, 2007). This necessitates manual annotation which is time-consuming and error-prone when carried out by individual linguists.
To overcome these issues, CS NIPER implements a web-based multi-user annotation scenario in which linguists formulate and refine queries that identify a given linguistic construction in a corpus and as-sess the query results to distinguish instances of the phenomenon under study ( true positives ) from such examples that are wrongly identified by the query ( false positives ). Each expert linguist thus acts as a rater rather than an annotator. The tool records as-sessments made by each rater. A subsequent evalua-tion step measures the inter-rater agreement. The ac-tual annotation step is deferred until after this evalu-ation in order to achieve high annotation confidence.
CS NIPER implements an annotation-by-query ap-proach which entails the following interlinking func-tionalities (see fig. 1):
Query development: Corpus queries can be de-veloped and refined within the tool. Based on query results which are assessed and labeled by the user, queries can be systematically evaluated and refined for precision. This transfers some of the ideas of relevance feedback, which is a common method of improving search results in information retrieval, to a linguistic corpus query system.

Assessment: Query results are presented to the user as a list of sentences with optional additional context; the user assesses and labels each sentence as representing or not representing an instance of the linguistic phenomenon under study. The tool imple-ments a function that allows the user to comment on decisions and to temporarily mark sentences with uncertain assessments for later review.

Evaluation: Evaluation is a central functional-ity of CS NIPER serving three purposes. 1) It in-tegrates with the query development by providing feedback to refine queries and improve query pre-cision. 2) It provides information on sentences not labeled consistently by all users, which can be used to review the assessments. 3) It calculates the inter-rater agreement which is used in the corpus annota-tion step to ensure high annotation confidence.
Corpus annotation: By assessing and labeling query results as correct or wrong , raters provide the tool with their annotation decisions. CS NIPER anno-tates the corpus with those annotation decisions that exceed a certain inter-rater agreement threshold.
This annotation-by-query approach of querying, assessing, evaluating and annotating allows multiple distributed raters to incrementally improve query re-sults and achieve high quality annotations. In this paper, we show how such an approach is well-suited for annotation tasks that require manual analysis over large corpora. The approach is generalizable to any kind of linguistic phenomena that can be lo-cated in corpora on the basis of queries and require manual assessment by multiple expert raters.
In the next two sections, we are providing a more detailed description of the use-case driving the de-velopment of CS NIPER (sect. 2) and discuss why ex-isting tools do not provide viable solutions (sect. 3). Sect. 4 discusses CS NIPER and sect. 5 draws some conclusions and offers an outlook on the next steps. The initial purpose of CS NIPER is the corpus-based study of so-called non-canonical grammatical con-structions (NCC) (examples (2) -(5) below): 1. The media was now calling Reagan the front-2. It was Reagan whom the media was now calling 3. It was the media who was now calling Reagan 4. It was now that the media were calling Reagan 5. Reagan the media was not calling the front-
NCCs are linguistic constructions that deviate in characteristic ways from the unmarked lexico-grammatical patterning and informational ordering in the sentence. This is exemplified by the con-structions of sentences (2) -(5) above. While ex-pressing the same propositional content, the order of information units available through the permissi-ble grammatical constructions offers interesting in-sights into the constructional inventory of a lan-guage. It also opens up the possibility of comparing seemingly closely related languages in terms of the sets of available related constructions as well as the relations between instances of canonical and non-canonical constructions.

In linguistics, a cleft sentence is defined as a com-plex sentence that expresses a single proposition where the clefted element is co-referential with the following clause. E.g., it-clefts are comprised of the following constituents:
The NCCs under study pose interesting chal-lenges both from a linguistic and a natural language processing perspective. Due to their deviation from the canonical constructions, they come in a vari-ety of potential construction patterns as exemplified above. Non-canonical constructions can be expected to be individually rarer in any given corpus than their canonical counterparts. Their patterns of usage and their discourse functions have not yet been described exhaustively, especially not in representative corpus studies because they are notoriously hard to identify without suitable software. Their empirical distribu-tion in corpora is thus largely unknown.

A major task in recognizing NCCs is distin-guishing them from structurally similar construc-tions with default logical and propositional content. An example of a particular difficulty from the do-main of it-clefts are anaphoric uses of it as in (6) be-low that do not refer forward to the following clause, but are the antecedents of entities previously intro-duced in the context of preceding sentences. Other issues arise in cases of true relative clauses as exem-plified in (7) below: 6. London will be the only capital city in Eu-7. It is a legal manoeuvre that declined in cur-
Further examples of NCCs apart from the it-clefts addressed in this paper are wh-clefts and their sub-types, all-clefts , there-clefts , if-because-clefts and demonstrative clefts as well as inversions. All of these are as hard to identify in a corpus as it-clefts .
The linguistic aim of our research is a comparison of non-canonical constructions in English and Ger-man. Research on these requires very large corpora due to the relatively low frequency of the individ-ual instances. Due to the ambiguous nature of many NCC candidates, automatically finding them in cor-pora is difficult. Therefore, multiple experts have to manually assess candidates in corpora.

Our approach does not aim at the exhaustive an-notation of all NCCs. The major goal is to improve the understanding of the linguistic properties and us-age of NCCs. Furthermore, we define a gold stan-dard to evaluate algorithms for automatic NCC iden-tification. In our task, the total number of NCCs in any given corpus is unknown. Thus, while we can measure the precision of queries, we cannot mea-sure their recall. To address this, we exhaustively annotate a small part of the corpus and extrapolate the estimated number of total NCC candidates.
In summary, the requirements for a tool to support multi-user annotation of NCCs are as follows: 1. querying large linguistically pre-processed 2. assessment of sentences that are true instances 3. evaluation of inter-rater agreement and query
In the following section, we review previous work to support linguistic annotation tasks. We differentiate three categories of linguistic tools which all partially fulfill our requirements: querying tools , annotation tools , and transformation tools .
Linguistic query tools: Such tools allow to query a corpus using linguistic features, e.g. part-of-speech tags. Examples are ANNIS2 (Zeldes et al., 2009) and the IMS Open Corpus Workbench (CWB) (Christ, 1994). Both tools provide powerful query engines designed for large linguistically annotated corpora. Both are server-based tools that can be used concurrently by multiple users. However, they do not allow to assess the query results.

Linguistic annotation tools: Such tools allow the user to add linguistic annotations to a corpus. Examples are MMAX2 (M  X  uller and Strube, 2006) and the UIMA CAS Editor 1 . These tools typically display a full document for the user to annotate. As NCCs appear only occasionally in a text, such tools cannot be effectively applied to our task, as they of-fer no linguistic query capabilities to quickly locate potential NCCs in a large corpus.

Linguistic transformation tools: Such tools al-low the creation of annotations using transforma-tion rules. Examples are TextMarker (Kluegl et al., 2009) and the UAM CorpusTool (O X  X onnell, 2008). A rule has the form category := pattern and creates new annotation of the type category on any part of a text matching pattern . A rule for the annotation of passive clauses in the UAM CorpusTool could be passive-clause := clause + containing be% partici-ple . These tools do not support the assessment of the results, though. In contrast to the querying tools, transformation tools are not specifically designed to operate efficiently on large corpora. Thus, they are hardly productive for our task, which requires the analysis of large corpora. We present CS NIPER , an annotation tool for non-canonical constructions. Its main features are:
Annotation-by-query  X  Sentences potentially containing a particular type of NCC are retrieved us-ing a query. If the sentence contains the NCC of interest, the user manually labels it as correct and otherwise wrong . Annotations are generated based on the users X  assessments.

Distributed multi-user setting  X  Our web-based tool supports multiple users concurrently assessing query results. Each user can only see and edit their own assessments and has a personal query history.
Evaluation  X  The evaluation module provides in-formation on assessments, number of annotated in-stances, query precision and inter-rater agreement. 4.1 Implementation and data CS NIPER is implemented in Java and uses the CWB as its linguistic search engine (cf. sect. 3). Assess-ments are stored in a MySQL database. Currently, the British National Corpus (BNC) is used in our study. Apache UIMA and DKPro Core 2 are used for linguistic pre-processing, format conversion, and to drive the indexing of the corpora. In particular, DKPro Core includes a reader for the BNC and a writer for the CWB. As the BNC does not carry lemma annotations, we add them using the DKPro TreeTagger (Schmid, 1994) module. 4.2 Query (Figure 2) The user begins by selecting a 1  X  corpus and a  X  construction type (e.g. It-Cleft ). A query can be chosen from a 3  X  list of examples, from the 4  X  per-sonal query history, or a new 5  X  query can be en-tered. The query is applied to find instances of that construction (e.g.  X  X t X  /VCC[] /PP[] /RC[] ). Af-ter pressing the 6  X  Submit query button, the tool presents the user with a KWIC view of the query results (fig. 3). At this point, the user may choose to refine and re-run the query.

As each user may use different queries, they will typically assess different sets of query results. This can yield a set of sentences labeled by a single user only. Therefore, the tool can display those sentences for assessment that other users have assessed, but the current user has not. This allows getting labels from all users for every NCC candidate. 4.3 Assessment (Figure 3) If the query results match the expectation, the user can switch to the assessment mode by clicking the  X  Begin assessment button. At this point, an An-notationCandidate record is created in the database for each sentence unless a record is already present. These records contain the offsets of the sentence in the original text, the sentence text and the construc-tion type. In addition, an AnnotationCandidateLabel record is created for each sentence to hold the as-sessment to be provided by the user.

In the assessment mode, an additional 8  X  Label column appears in the KWIC view. Clicking in this column cycles through the labels correct , wrong , check and nothing . When the user is uncertain, the label check can be used to mark candidates for later review. The view can be 9  X  filtered for those sen-tences that need to be assessed, those that have been assessed, or those that have been labeled with check .  X  comment can be left to further describe difficult cases or to justify decisions. All changes are imme-diately saved to the database, so the user can stop assessing at any time and resume the process later.
The proper assessment of a sentence as an in-stance of a particular construction type sometimes depends on the context found in the preceding and following sentences. For this purpose, clicking on the 11  X  book icon in the KWIC view displays the sentence in its larger context (fig. 4). POS tags are shown in the sentence to facilitate query refinement. 4.4 Evaluation (Figure 5) The evaluation function provides an overview of the current assessment state (fig. 5). We support two evaluation views: by construction type and by query .
By construction type: In this view, one or more  X  corpora , 13  X  types , and 14  X  users can be selected for evaluation. For these, all annotation candidates and the respective statistics are displayed. It is pos-sible to 15  X  filter for correct , wrong , disputed , incom-pletely assessed , and unassessed candidates. A can-didate is disputed if it is not labeled consistently by all selected users. A candidate is incompletely as-sessed if at least one of the selected users labeled it and at least one other did not. Investigating dis-puted cases and 16  X  inter-rater agreement per type using Fleiss X  Kappa (Fleiss, 1971) are the main uses of this view. The inter-rater agreement is calculated using only candidates labeled by all selected users.
By query: In this view, query precision and as-sessment completeness are calculated for a set of  X  queries and 18  X  users . The query precision is cal-culated from the labeled candidates as:
We treat a candidate as a true positive ( TP ) if: 1) the number of correct labels is larger than the number of wrong labels; 2) the ratio of correct labels compared to the number of raters exceeds a given  X  threshold . Candidates are conversely treated as false positives ( FPs ) if the number of wrong labels is larger and the threshold is exceeded. The thresh-old controls the confidence of the TP and, thus, of the annotations generated from them (cf. sect. 4.5). If a candidate is neither TP nor FP , it is unknown ( UNK ). When calculating precision , UNK candi-dates are counted as FP . The estimated precision is the precision to be expected if TP and FP are equally distributed over the set of candidates. It takes into account only the currently known TP and FP and ig-nores the UNK candidates. Both values are the same once all candidates have been labeled by all users. 4.5 Annotation When the assessment process is complete, corpus annotations can be generated from the assessed can-didates. Here, we employ the thresholded major-ity vote approach that we also use to determine the TP / FP in sect. 4.4. Annotations for the respective NCC type are added directly to the corpus. The aug-mented corpus can be used in further exploratory work. Alternatively, a file with all assessed candi-dates can be generated to serve as training data for identification methods based on machine learning. We have presented CS NIPER , a tool for the an-notation of linguistic phenomena whose investiga-tion requires the analysis of large corpora due to a relatively low frequency of instances and whose identification requires expert knowledge to distin-guish them from other similar constructions. Our tool integrates the complete functionality needed for the annotation-by-query workflow. It provides dis-tributed multi-user annotation and evaluation. The feedback provided by the integrated evaluation mod-ule can be used to systematically refine queries and improve assessments. Finally, high-confidence an-notations can be generated from the assessments.
The annotation-by-query approach can be gener-alized beyond non-canonical constructions to other linguistic phenomena with similar properties. An example could be metaphors, which typically also appear with comparatively low frequency and re-quire expert knowledge to be annotated. We plan to integrate further automatic annotations and query possibilities to support such further use-cases.
