 With the explosive growth of the Internet, recommender systems have been proposed as a solution for the problem of informa tion overload. Recommender systems assist most successful technologies among recommender systems is Collaborative Filtering (CF). Numerous commercial systems (e.g. amazon.com, half.com, cdnow.com) apply this technology to serve recommendations to their customers. The traditional task in CF is to predict the utility of a certain item for the target user (often called an active user) from the user X  X  previous preferences or the opinions of other similar users, and thereby make appropriate recommendations [2]. However, despite its success and popularity, traditional CF suffers from severa l problems, including sparsity, scalabil-ity, cold start, shilling problem. A number of studies have attempted to address the problems related to collaborative filtering [2, 5, 6, 7, 10, 14]. 
One notable challenge in a CF is the cold start problem, which can be divided into cold start items and cold start users [13]. The cold start user , the focus of the present research, describes a new user that joins a CF-based recommender system and has not system cannot generate predictions or provide recommendations for the user. In addi-tion, the system is generally unable to make high quality recommendations when users have presented few opinions [14]. In this paper, we present a novel approach to provide enhanced recommendation quality derived from explicit ratings. The main objective of this research is to develop an effective approach that provides high-quality predictions and recommendations even when users have little rating informa-tion. A model-based approach is employed to overcome the sparsity and scalability problems [2, 12]. The proposed approach first determines similarities between the items and subsequently identifies errors of past predictions, which are used in the process of online predictions and recomme ndations. This paper also presents a method of updating the model incrementally, collectively called a user-item error matrix , from explicit user feedback. 
The subsequent sections of this paper are organized as follows: The next section contains a brief overview of some related studies. In section 3, the approach for CF, an error-based CF algorithm, is described. An experimental evaluation is presented in section 4. Finally, conclusions and future works are presented. This section briefly explains previous studies related to CF-based recommender sys-tems. The various approaches developed in this area can be divided into two classes: Memory-based CF (also known as nearest-neighbor or user-based CF) and Model-based CF [1]. Following the proposal of GroupLens [3], the first system to generate automated recommendations, user-based approaches have seen the widest use in rec-ommendation systems. User-based CF uses a similarity measurement between new items or unrated products. Though user-based CF algorithms tend to produce more accurate recommendations, they have some serious problems stemming from the complexity of computing each recommendation as the number of users and items grow. In order to improve scalability and real-time performance in large applications, a variety of model-based recommendation techniques have been developed [2, 3, 12]. In particular, a new class of item-based CF, which is one of model-based CF ap-proaches, has been proposed. This model-based approach, which is the focus of the present work, provides item recommendations by first developing a model of user ratings. In comparison to user-based appro aches, item-based CF is typically faster in terms of recommendation time, although the method may require expensive learning or a model building process [4]. Instead of computing similarities between users, item-based CF reviews a set of items rated by the target user and selects k most simi-lar items, based on the similarities between the items. Sarwar et al. [2] evaluated vari-ous methods to compute similarity and approaches to limit the set of item-to-item similarities that must be considered. Desh pande et al. [5] proposed item-based top-N recommendation algorithms that are similar to previous item-based schemes. They separated the algorithms into two distinct parts for building a model of item-to-item similarities and deriving top-N recommendations using this pre-computed model. While item-based CF algorithms are effective, they still have some weaknesses with research efforts have focused on the use of trust concepts during the recommendation process [7, 14]. In addition, distributed recommender systems have been proposed to deal with the existing weaknesses [10, 12]. Fig. 1 provides a brief overview of the proposed approach. The proposed method is divided into two phases, an offline phase and an online phase. The offline phase is a model building phase to support fast online predictions and the online phase is either a prediction or recommendation phase. 3.1 Building an Error Matrix Before describing the algorithms, some definitions of the matrices are introduced. Definition 1 (User-item actual rating matrix, A). If there is a list of k users explicit ratings, k  X  n user-item data can be represented as a rating matrix. This matrix columns represent items, and A u,j represents the rating of a user u on item j . Some of the entries are not filled, as there are items not rated by some users.
 Definition 2 (User-item predicted rating matrix, P). This is a matrix of users and sent users, the columns represent items.
 Definition 3 (User-item error matrix, E). From the given set of actual and predicted E , can be filled as errors, which can be co mputed by subtracting the predicted ratings for users on items from the actual rating for users on items. Each entry E u,j in E repre-filled, as there are items not rated by some users. For constructing matrix E , firstly the user X  X  rating should be predicted for an item that has already been rated. To this end, an item-based prediction measure is used as pre-sented in equation (1) [7]. The prior prediction for the target user u on item i , P u,i , is obtained as follows: where MSI(u) is the set of k most similar items to the target item i among items rated by the user u and A u,j is the rating of user u on item j . In addition, and j , which can be calculated using diverse similarity algorithms such as cosine-based similarity, correlation-based similari ty, and adjusted cosine similarity [2]. However, we also consider the number of users X  ratings for items in generating item-to-item similarities, namely the inverse item frequency . 
When the inverse item frequency is applied to the cosine similarity technique, the similarity between two items, i and j is measured by equation (2). Likewise, the inverse user frequency, the main concept of the inverse item frequency dictates that users rating numerous items present less contribution with regard to simi-larity than users rating a smaller number of items [7]. 
Once the predictions for users on items ar e represented on a user-item predicted rating matrix, the error of each prediction can be computed for constructing a user-data in the user-item matrices, the prediction error E u,j is calculated as: 
Fig. 2 illustrates the process of a user-item error matrix construction. 3.2 Prediction Computation Using Prior Prediction Errors As noted previously, the proposed CF approach constructs an error model ( an Error Matrix, E ), which can be accomplished offline, prior to online pr ediction or recom-mendation. Since most tasks can be conducted in the offline phase, this approach can result in fast online performance. In addition, model-based approach assists in solving the sparsity and scalability problems [2, 5]. The proposed method also provides an-other advantage, the ability to overcome the cold start users. 
The most important task in CF is to generate a prediction, this is, attempting to speculate upon the rating that a user would provide for an item [2]. In order to com-pute the recommending score 1 of the target user u for the target item i that has not yet been rated by user u , the sum of the prior prediction errors of user u are used as de-fined in equation (3). prediction error of user u on item j . In addition, items i . 
From the simple example given in Table 1 and Table 2, suppose the system is trying to compute how much Alice will prefer Titanic . In the case of  X  = 0.4, a set of Lowest Error Items on Alice , LEI(Alice) = {Seven, Toy Story, Matrix}. Therefore, we can -0.3)/4 = 2.35. sorted in the order of descending the recommending score. Thereafter, a set of N items that have obtained higher recommending scores are identified for user u ( top -N recommendation). Definition 4 (Lowest Error Item). Given a user-item error matrix E and a set of items I u that have been rated by target user u , item j is deemed the lowest error item of predetermined error value  X  (| E u,j |  X   X  ). Definition 5 (Top-N recommendation). Let I be a set of all items, I u an item list that i will be of more interest to user u than item j if and only if the recommending score S TopN u  X  IP u . 3.3 Incremental Updates of the Error Matrix In comparison to user-based approaches, model-based approaches, by using pre-computed models in the offline phase, are typically faster in terms of recommendation time. In addition, these approaches help alleviate the sparsity and scalability prob-lems. However, model-based CF tends to require expensive learning time for building a model [4]. Moreover, once the model is built, it is difficult to reflect user feedback despite its significance in the recommender system. 
In order to alleviate the weak points of model-based CF, the proposed approach is designed such that the model is updated effectively and users X  new opinions are reflected incrementally, even when users pr esent explicit feedback . As illustrated in the system recommended before according it a recommending score. Subsequently, the model, an error matrix E, can easily update the error value, which is computed by subtracting the score from the rating of feedback rating. Therefore, the proposed method can update information instantaneously for new predictions as well as make enhanced recommendations regarding user preferences. In this section, experimental results of the proposed method are presented. The per-formance evaluation is divided into two dimensions. The quality of the prediction based on prior errors is first evaluated, and then the quality of the top -N recommenda-tions is evaluated. All experiments were carried out on a Pentium IV 3.0GHz with 2GB RAM, running a MS-Window 2003 server. In addition, the recommendation system for the web was implemented using MySQL 5.0 and PHP 5.1 on an Apache 2.0 environment. 4.1 Data Set and Evaluation Metrics The experimental data is taken from MovieLens , a web-based research recommenda-tion system (www.movielens.org). The data set contains 100,000 ratings of 1682 movies rated by 943 users (943 rows and 1682 columns of a user-item matrix A ). Evaluation of Prediction Quality. For evaluating the quality of the prediction meas-urement, the total ratings were divided into two groups: 80% of the data (80,000 rat-matrix E should first be constructed. Therefore, the training data set was further sub-divided into training and testing portions, and a matrix E was generated using a 5-fold cross validation scheme. In order to m easure the accuracy of the predictions, mean absolute error (MAE), which is widely used for statistical accuracy measurements in defined as: and the recommending score (predicted rating in benchmark algorithms) pairs of user u in the test data. Finally, the MAE of all users in the test set is computed as: Evaluation of TOP-N Recommendation. To evaluate the performance of top -N recommendations, we divide the data set into a test set (9,430 ratings) with exactly 10 mendations, recall , a measure of how often a list of recommendations contains an item that the user has actually rated, was used for the evaluation metric [5, 6, 11, 12]. The hit-ratio for user u is defined as: mended item list for user u . Finally, the overall recall of the top -N recommendation is computed as: Benchmark Algorithms. In order to compare the performance of the proposed method, a user-based CF algorithm, wherein the similarity is computed by the well known Pearson correlation coefficient (denoted as UserCF ) [3], and the item-based CF approach of [2], which employs cosine-based similarity (denoted as ItemCF ), were implemented. The prediction quality and the top -N recommendation of an error-based strategy ( ErrorCF+x , where x is the similarity method used in building an error matrix E ) were evaluated in comparison with benchmark algorithms. 4.2 Experimental Results As noted previously, a user-item error matrix , E , which is closely connected with the similarity algorithm, should first be built for an error-based CF algorithm. Thereby, four error matrices are constructed using different item-item similarity algorithms such as cosine-based similarity (denoted as ErrorCF+Cos ), correlation-based similarity (denoted as ErrorCF+Corr ) as described in [2], cosine-based similarity with inverse item frequency (denoted as ErrorCF+CosIIF ), and correlation-based similarity with inverse item frequency (denoted as ErrorCF+CorrIIF ) as described in Section 3.1. 4.2.1 Experiments with th e Prior Prediction Errors As stated in Section 3.2, the prediction quality in an error-based CF is affected by the set of Lowest Error Items (cf. Definition 4). Fig. 4 presents the variation of MAE ob-tained by changing the  X  value used for selecting the Lowest Error Item. It is observed demonstrate similar types of charts. The approaches of the inverse item frequency applied to the similarity ( ErrorCF+CosIIF and ErrorCF+CorrIIF ) elevate the predic-deteriorates. Likewise, ErrorCF+Cos and ErrorCF+Corr improved until a  X  value of 1.2 and 1.6, respectively. When we compare the best MAE of original similarity methods with those of the similarity methods applying the inverse item frequency, it is found that ErrorCF+CosIIF (MAE of 0.8058) and ErrorCF+CorrIIF (MAE of 0.8043) perform better than ErrorCF+Cos (MAE of 0.8064) and ErrorCF+Corr (MAE of 0.8056), respectively. 4.2.2 Experiments with k Neighbor Size The following experiments investigate the effect of the neighbor size on the perform-ance of collaborative filtering, especially in relation to the cold start problem. The size of the neighborhood has a significant influence on the recommendation performance [7, 11]. Therefore, different numbers of user/item neighbors k were used for the pre-diction generation: 2, 4, 6, 8, 10, and 30. In the case of ErrorCF+x , the parameter k denotes the number of Lowest Error Items ( k lowest error items) whereas it is the size of the nearest users for UserCF ( k nearest neighbors) and the size of the most similar items for ItemCF ( k most similar items). Table 3 summarizes the results of the ex-periment while Fig. 5 depicts the improved MAE of error-based CF over item-based (left graph) and user-based CF (right graph) algorithms. 
The result demonstrates that, for a small neighborhood size, the proposed algo-rithm provides more accurate predictions than the traditional user-based and item-based algorithms. For example, when the neighborhood size is 2, ErrorCF+CosIIF yields an MAE of 0.827, which is the best prediction quality within the ErrorCF+x , whereas ItemCF and UserCF give an MAE of 1.042 and 0.909, respectively. In other words, the proposed method achieves 26% and 9% improvement compared to ItemCF and UserCF , respectively. However, the classic user-based scheme provides better quality as the neighbor size increases. Although the prediction quality of the ErrorCF+x is slightly worse than that of UserCF at a large neighborhood size, nota-bly the proposed methods provides better qu ality than the traditional user-based and item-based algorithms in the event of cold start users. 4.2.3 Top-N Recommendation Evaluation For evaluating the top -N recommendation, the number of recommended items (the value of N) were increased, and we calculated the recall achieved by UserCF , Er-rorCF+CosIIF , and ItemCF using a neighborhood size of 30. Fig. 6 presents the re-sults of the experiment. The recall was measured by generating a list of the top-N provided on the top -N list recommended for each user. 
In general, with the growth of recommend ed items N, recall tends increase. As we can see from Fig 6, ErrorCF+CosIIF shows considerably improved performance on all occasions compared to UserCF . In addition, comparing the results achieved by ErrorCF+CosIIF and ItemCF , the recommendation quality of the former is superior to that of ItemCF as top-N is increased, although the performance is diminished slightly in the case of top -10. For example, the proposed method achieves 34% im-provement in the case of top -50 (N=50), and 45% improvement in the case of top -100 (N=100) compared to the item-based scheme. We conclude from this experiment that the proposed prediction strategy for top-N recommendation is effective in terms of improving the performance. Collaborative Filtering for Recommendations is a powerful technology for users to find information relevant to their needs. In the present work, we have presented a novel approach to provide enhanced recommendation quality and to overcome some of the limitations in traditional CF systems. We also propose a new method of building a model, namely a user-item error matrix , for CF-based recommender systems. The major advantage of the proposed approach is that it supports incremental updating of the model by using explicit user feedback. The experimental results demonstrate that the proposed method offers significant advantages both in terms of improving the recommendation quality and in dealing with cold start users as compared to traditional CF algorithms. However, the proposed method gives slightly worse prediction than user-based CF in the case of a sufficient neighborhood. 
A research area that is attracted attention at present is a recommender system based on collaborative tagging. We are currently extending our algorithm to allow for per-sonalized recommendation using semantic tagging information. Therefore, we plan to further study the impact of using a folkso nomy or collective intelligence for a recom-mender system. 
