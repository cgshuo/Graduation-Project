 Address geocoding, the process of finding the map location for a structured postal address, is a relatively well-studied problem. In this paper we consider the more general problem of crosslingual location search, where the queries are not limited to postal addresses, and the language and scri pt used in the search query is different from the one in which the underlying data is stored. To the best of our knowledge, our syst em is the first crosslingual location search system that is able to geocode complex addresses. We use a statistical machine tr ansliteration system to convert location names from the script of the query to that of the stored data. However, we show that it is not sufficient to simply feed the resulting transliterations into a monolingual geocoding system, as the ambiguity inherent in the co nversion drastically expands the location search space and significantly lowers the quality of results. The strength of our approach lies in its integrated, end-to-end nature: we use abstraction and fuzzy search (in the text domain) to achieve maximum c overage despite transliteration ambiguities, while applying spatial constraints (in the geographic domain) to focus only on viable in terpretations of the query. Our experiments with structured and unstructured queries in a set of diverse languages and scripts (A rabic, English, Hindi and Japanese) searching for locations in different regions of the world, show full crosslingual location search accuracy at levels comparable to that of commercial monolingual systems. We achieve these levels of performa nce using techniques that may be applied to crosslingual searches in any language/script, and over arbitrary spatial data. H.3.1: Content Analysis and Inde xing; H.3.3: Information Search and Retrieval Keywords : Crosslingual Informati on Retrieval. Address Geocoding. Location Search. Address Geocoding is the well-known problem of mapping a postal address to a geocode (a geographic identifier such as a location on a map). Address geoc oding features prominently in several information retrieval scenarios, such as, locating an address, finding directions, visual izing geographic distribution of a set of addresses, etc. Addr ess geocoding is solved well by current commercial systems for certain countries [7]. A more general class of problem is Location Search , which deals with postal addresses, as well as informally specified textual descriptions of a location (e.g.,  X  Corner of Grand Ave and Walnut St in Everett  X ). Searching for locations with unstructured information is very useful when a precise postal address is not known, but other fragments, such as, street, loca lity, nearby landmark, etc., are known. In th is paper, we further extend the location search problem to what we call Crosslingual Location Search: Allowing users to search using languages and scripts different from the one in which the underlying geographic data is stored. Popular map search serv ices, such as Google Maps X , Yahoo Maps X  and Windows Live Lo cal X , currently handle only the English version correctly. Fi gure 1 is a screenshot from our prototype system that shows th e successful pinpointing of the location in Snohomish, Washingt on, given a complex query in Japanese. Table 1 gives a set of search queries written in different languages for another location. English Brunswick Park Gardens, 130, Barnet London Arabic  X  X  X  X  X  X  X   X  X  X  X   X  X  X  X  X   X  130  X   X  X  X  X  X  X   X  X  X  X  Hindi  X  X  X   X   X  X  X  X  X  X  X  X  X  X   X  X  X   X  X   X  X  X  X   X  X   X  X  X  X , 130,  X  X  X  X   X   X   X   X   X  X  X  Geographic data, and particularly map data, are intrinsically tied to given regions, and hence are av ailable predominantly in local languages. In addition, the busin ess, resource and interoperability considerations often dictate that such data are created only for a small set of languages. Yet in today X  X  increasingly globalized world, there is a clear need fo r accessing geographic information across languages. Examples range from Indian citizens who want to query in their own local languages, the land records traditionally created in Englis h, through cross-lingual geographic indexing of documents, to visito rs at the 2008 Olympics who will want to find Beijing locations us ing many languages other than Mandarin Chinese. Despite the cl ear motivation for crosslingual location searches, to the best of our knowledge, there are no academic or commercial systems that support general crosslingual location search. A possible approach to crosslingual location search would be to create and represent all geographi c entities in al l languages, but this is financially and logistically unviable (for example, a country of the size of the US has several million unique streets, localities, landmarks, etc., and moreover, these are updated on a continual basis). Alternatively, one could use a machine translation/transliteration system to convert the query terms to the target language, and then process the results in a monolingual geocoder in the target language. Howe ver, as we show later in this paper, the linguistic am biguities inherent in the process, increase the search space exponentially, and degrade the accuracy of results greatly. In addition, the fact that descriptions of locations and addresses are structured differ ently in different regions  X  or may be unstructured altogether  X  makes cross lingual location search a particularly challenging research problem. In this paper, we develop an under lying set of techniques to tackle the crosslingual location search problem. These techniques use a combination of transliteration, translation and abstraction to map text query fragments to spatial re gions in the underlying map data, and spatial constraints among the el ements of map data to narrow down the search space. We present our implementation as an end-to-end system, which can successf ully handle crosslingual queries of the kind listed in Table 1, ac curately computing the geographic position to within 1 km in most cases. Our current implementation supports queries in 4 genetically distinct languages with different scripts (namely, Arabic, Englis h, Hindi and Japanese), over geographic data (in English) fro m different regions (USA, UK, and India) of the world. As no comparable systems exist currently, we evaluate our system by comparing its performance to two baselines: first, commerc ial monolingual location search systems and, second, a sequen tial approach of feeding transliteration results into these commercial monolingual geocoding systems. We show experimentally that our crosslingual system compares well with th e state-of-the-art monolingual geocoders, and is significantly more robust and accurate than sequential transliteration followed by monolingual geocoding. The core strength and the novelty of our approach lies in its generality, and the way it completely integrates address translation/transliteration and spat ial constraint processing. The key contributions of this paper are: 1. A precise formulation of the crosslingual location search 2. The use of spatial constraints to manage ambiguity 3. A comparative evaluation of crosslingual location search for Our approach has been implemente d as a fully functional end-to-end system, as described in [8]. Address geocoding is a specific instance of location search, concerned with finding the geographic coordinates given a postal address. Address geocoding is central to services provided by companies such as ESRI X , as well as online location based services such as Google Maps X . Although the problems of address parsing and geocoding are widely studied [7,14,18], we find very few end-to-end address geocoding techniques discussed in the literature; [3] describes one such system, which is a geocoding system with an address parser based on HMMs and a rule-based matching engine, app lied to the Australian National Address File system. In earlier work [17], we describe a system that supports monolingual location search queries. A location search query contains a subset of terms that, taken together, identify the spatial scope (typically, a location on a map) of the query. Location search queries can include structured (postal) addresses, as well as informal, or unstructured descriptions of locations. In this paper, we present a precise formulation of the problem, and focus on computing the spatial scope of th e query as accurately and as robustly as possible when the que ry is in a script that is different from that of the names of the underlying geographic entities in the geocoding system. Over the last decade, the CLEF [4] forum had been active in promoting crosslingual IR resear ch, and one of its subtasks, namely GeoCLEF [6], specifi cally focuses on geographic information retrieval scenarios. While the systems showcased are either text based systems or monolingual geocoders working on multiple languages, the system we present here is truly a crosslingual location search system. Location search is challenging even with the assumption that the query and the underlying spatial da ta share the same language. Figure 2 contains the key reasons for this.  X  Geometric coordinates need to be computed  X  Address formats differ wide ly across countries[15]  X  Unstructured queries can have endless variations in format  X  Terms in the query are not al ways delimited, so boundaries  X  Misspelled, irrelevant (not matching anything) or conflicting  X  Non-unique (e.g., many roads called  X  Main St  X ), or similar Nevertheless, there are several commercial location service providers, such as Google X  Ma ps, Windows X  Live Maps, and Yahoo X  Maps, which provide good re sults for several countries and are somewhat tolerant to mi sspellings and address variations. Crosslingual location search adds a significant level of difficulty to the monolingual location search problem, as the additional issues listed in Figure 3 need to be overcome.  X  Proper nouns need to be transliterated, a process that is  X  Common nouns (such as  X  Hospital  X  or  X  Road  X ) may be  X  Orderings of terms may be ch anged because of language and The bulk (not all) of words in geographic entity names are proper nouns, and in general cannot be translated readily like other parts of speech (such as, common nouns, adje ctives, verbs, etc.) that are a part of standard bilingual dict ionaries. Where source and target language share the same script, the problem is not readily apparent as the proper nouns are ge nerally identical (for example,  X  Berlin  X  is correct in German, Eng lish, and Italian, though some variations in orthography an d pronunciation exist, such as,  X  Antwerp  X  is  X  Antwerpen  X  in Dutch,  X  London  X  is  X  Londres  X  in Spanish, etc.). For different scri pts, a name in the source language needs to be transliterated, that is, converted into a string in the target script which preserves the original pronunciation of the source word, yet conforming to the pronunciation rules of the target language. Since the mapping between pronuncia tion and spelling is not fully deterministic in both languages, tr ansliteration is an inherently ambiguous process. For example, the transliterations of  X  (representing " Palmer ") could be  X  Palmer  X ,  X  Bilmar  X  etc. [1], as Arabic does not distinguish between  X  X  X  and  X  X  X  and short vowels may not be represented in Arabic orthography. Similarly, the English transliterations of Hindi syllable  X   X  X   X  could be highly ambiguous , as many English phonetic c onstructs, such as,  X  key  X ,  X  kee  X ,  X  ki  X  and  X  kea  X  are possible. As a consequence, for each source word, several translitera tion candidates have to be considered to achieve a reasonable confidence that the correct transliteration is included. This leads to a large number of possible interpretations of a multiword query, as illustrated in Table 2, which shows some machine transliteration results for the Arabic address fragment  X   X  X  X  X   X  X  X   X  X  X  X  X  X  X  X   X  X  X  X   X , which should be transliterated as  X  Palmer Road Redbridge London  X . Another source of ambiguity is that queries can contain common nouns, which can both be translated and transliterated. For example, depending on context, either the transliteration  X  al -matar  X  or the translation  X  airport  X  may be preferable for the word  X   X  X  X  X  X  X   X  in an Arabic language query. Consider the impact of having to consider many alternatives to each word in the query, especially in the absence of tokens such as commas to delimit one potential term from another. If k transliterations/translations need to be considered for each word in an n word query, which can be partitioned into subsequences in 2 n -1 ways, then the total number of possible combinations of non-overlapping subsequences to be considered is k n 2 n -1 , which, even for the short (four word) Arabic query above, with k =5, amounts to 5000 combinations. The crosslingual challenges su mmarized in Figure 3 compound with the monolingual ch allenges listed in Figure 2. In fact, we claim in this paper that the ambiguity in spellings, names and orderings inherent in cross lingual matching make simple composition of translation/transliteration with monolingual location search an unviable option. Our exper imental results in Section 5 confirm this. A key aspect of our approach is harnessing the power of spatial constraints to resolve the ambiguities discussed above. In the above example there were many possible interpretations for the English candidate transliterations of the Arabic location query. However, of these, only sets of entities that spatially overlap are plausible candidates . Thus the fact that 3 particular entities named  X  Palmer Road  X ,  X  Redbridge  X , and  X  London  X  (in the U.K.) all interpretation from all possible interpretations of the query, as illustrated in Figure 4. Moreover, the region of overlap (the gray region in the figure) of these three entities defines the geometric scope of the result. To systematically exploit such spatial constraints, we reformulate the crosslingual location search problem as an end-to-end problem, perhaps for the first time . Our definition is intentionally more general than location sear ch over map data  X  it covers monolingual and crosslingual text based search over arbitrary spatial data. The following definition of th e crosslingual and monolingual location search problem is a more precise and general form of the definition in [17], which cons iders only monolingual location queries. A query is a text string about which our only assumption is that it can be parsed into a list of tokens (typically, words, numbers, etc.), represented by Q = ( q 1 , q 2 , q 3 ,...,q the terms in query Q are assumed to identify some spatial region. A query subsequence is a list of contiguous tokens of Q . We represent the subsequence ( q i , q i+1 , q i+2 , ..., q  X  X  X  X  X  X  X   X  X  X  X  X  X  X  X   X  X  X   X , q 2-3 represents subsequence  X   X  X  X  X   X  . X  Some subsequences (such as " Palmer Road ", perhaps after translation or transliteration) are expected to refer to named entities in a spatial repository consisting of geometric objects. The presence of these subsequences is the defining aspect of location search queries. We model the underlying spatial repository as a set of entities that have geometry (points, lines, polygons, etc., embedded in a universal metric space) and one or more textual names . The spatial repository typically includes entities whose geometry repres ents the spatial boundaries of landmarks, roads, rivers, city boundaries, etc. Names typically identify an entity (e.g.  X  Redbridge "), but they can also represent multiple names (e.g., a street can have multiple names), and the same name can apply to multiple entities (e.g., many streets can share the name  X  Main Street  X ). An entity, e , is thus represented as and the n i  X  X  are the names associated with the entity.
 repository S , is a set of one-to-one mappings from non-overlapping subsequences of Q , to distinct spatial entities in S . An interpretation thus has the form {( q i1-j1 , e 1 ), ( q , e m )}. There are a very large number of possible Interpretations, but only a small number are consiste nt, and, informally, the goal of location search is to find th e most consistent interpretations. Consistent Interpretations have two key properties: 1. There must be textual affinity between each subsequence and a name of its corresponding entity in the Interpretation. 
Informally, the subsequences should  X  X ound like X , or more generally, be  X  X elated to X , the names of the entities that they are mapped to. This needs to hold true even if the query is in a different script from that of the names of the entity. For example, the subsequences  X  Bridge Port Way  X , and also  X   X  X  X  X  X  X  X  X  X  X   X  X  X  X   X  (roughly " BuRiJyuPorTo Wai " in 
Japanese Katakana sc ript) both have textual affinity to an entity named  X  Bridgeport Way  X . Textual affinity can include semantic or ontological si milarities, as between  X  Main Street  X  and  X  Main Road . X  2. There must be spatial coherence amongst all entities in the Interpretation. Informally, this means that all the entities in the 
Interpretation must roughly overlap in space. We define spatial coherence as a Boolean property of a set of entities, parameterized by a boundary-width parameter  X  . A set of entities is spatially coherent with boundary-width  X  if there is a region in space, where all the entities, first expanded outwards by  X  , overlap. 
The region of overlap is called the geometric scope of the Interpretation. In 
Figure 5, the entities e 1 and e 2 (but not e 3 ) are spatially coherent, with geometric scope indicated by the shaded area. In terms of these definitions, we now define the crosslingual location search problem as follows: The definition can be made more precise by introducing a textual affinity function, say  X  , that computes a textual similarity score for an interpretation, and cast th e problem as: jointly optimize for maximum  X  and minimum  X  . However, the definition of  X  , and of the joint optimization function ar e highly domain specific and not easy to pin down. In this paper we take the pragmatic approach of using fixed values of  X  for each entity type, and crafting an  X  that improves end-to-end performance of the system with respect the specific domain of cross lingual location search over geographic (map) data. Our algorithm that computes a ranke d list of Interpretations first constructs an ordered list of  X  X at ch candidates X  (MCs). Each MC, ( q i-j , name ), maps query subsequence q i-j to a name name in the spatial repository, S . Recall that many entities in S may share the the name name . Figure 6 contains our algorithm, XL-QUERY. Figure 7 illustrates our system that implements the algorithm. The algorithm computes the list of match candidates using a combination of transliteration and translation, abstraction (defined later), and approximate text lookup. The algorithm then incrementally computes Interpretations, preserving spatial coherence, using a depth first algorithm. XL-QUERY uses several pre-bui lt indexes and access functions: 1. One or more language-specific dictionaries, with access 2. A second Fuzzy Text Index, FI A ( S ), used for looking up The algorithm uses seve ral pluggabl e functions: 1. A Machine Transliteration (MT) function, T ( l , w ), that 2. An Abstraction function, A ( w ), that transforms a word w into 3. A ranking function R ( I ) that assigns a real number score to The FindInterpretations function implemen ts the TEXSPACE algorithm from [17]. The algorithm X  X  input includes a geometric region or scope, called Focus . The scope is successively narrowed as the working interpretation grows. The Filter function needs to compute the boolean expression  X  Entities ( name y coherent with Focus . X  This may seem com putationally expensive, since this is asking the question: does the scope represented by Focus spatially overlap any of the entities with name name first growing their respective boundaries by  X  as explained in the previous section) . However, as explained in [8], by using the linear quadtrees [5] to represent the spatial extents of the collection of spatial entities, as well as Focus , we can efficiently compute spatial coherence. In fact, we have found that the overall computation time taken up by function FindInterpretations is typically less than 15% of the overall execution time. The transliteration process, T ( l , w ) can be implemented either by using hand-crafted language specific transliteration rules, or by a system which uses machine learning to build a statistical transliteration model from training data. Unlike rule-based systems, statistical transliteration systems have the advantage that they scale well for many languages pairs, as they follow generic, language-independent approaches and need only appropriate training data to be adapted to new language pairs. Such statistical machine transliteration systems typically calculate the transliteration probability P(t|s ) (the probability of a target language name t being the transliteration of a source language name s ), by segmenting s and t into n Transliteration Units (TUs) that typically represent zero or more characters, and expressing the transliteration probability as: where, s is represented as the sequence ( s 1 ... s n ) and, t , by ( t Early papers [10] used a generative approach that explicitly models the transliteration of a source language TU string s to a target grapheme space (spelling) of the source language to the phoneme space (pronunciation), and then to the grapheme space of the target language. However, subsequent resear ch publications report [1,13] that a direct mapping from source to target TUs without an intermediate phonetic representati on often leads to better results. Such grapheme-to-grapheme transliteration approaches usually follow a two-step training process: First, an alignment algorithm is used on the name pairs in the trai ning data to align each TU of a source language word with a TU in the corresponding target language word, to build a probability model based on the evidence. Then, a classifier is trained to predict the probability of a target language TU, given a source language TU and its context (e.g. the preceding and following TUs). A range of different statistical machine transliteration systems were compared in [13]. They find that , in scenarios where pronunciation information for the source word cannot be looked up from an external resource (e.g. pronunc iation dictionary), grapheme-to-grapheme transliteration using a maximum entropy classifier (and a context window of n preceding and following source TUs) outperforms all other approaches [9]. As we show later in Section 4, the maximum entropy classifier based transliteration used in our crosslingual location search system, performs at a level comparable to the best of the breed [11]. Given that there are no available pronunciation dictionary resources for worldwide geographical entities written in diverse scripts, this is an appropriate approach to machine transliteration for crosslingual location search. We have implemented an end-to-end location search system that takes a location search query in one of the supported languages as input and directly produces Interpretations. Distinguishing features of our implementation are that the geocoding is deeply integrated within the system and that it uses no language-or region-specific rules. Instead, our system employs the machine-learning based transliteration and the general text/space processing algorithms presented in the previous section. This has allowed us to easily build a system to support new languages and diverse geographic regions. Our system currently supports source queries in Arabic, English, Hindi and Japanese, for underlying ma p data that is in English. We 
XL-QUERY ( Q , S, F ) // Return a ranked list of Interpretations of query Q given spatial // repository S and initial focus F . See text for explanation. 1. for each token q i in query Q 2. for each n ( n +1)/ 2 possible subsequences q i-j of Q
FindInterpretations ( MCList , Focus, WorkingInterpretation ) // Recursively grow partially constructed Interpretation // WorkingInterpretation , and narrowing Focus, by trying // successive elements of MCList in turn. 3. if MCList is empty 4. NextMC  X  head of MCList 5. NewWorkingInterpretation  X  append NextMC to end of 6. newFocus  X  geometric in tersection of Focus and entities 7. CompatibleMCs  X  Filter ( NextMC, MCList, newFocus ) 8. // Perform recursive depth-first-search 
Filter ( NextMC, MCList, Focus ) // Return the MCs in MCList that are textually non-overlapping // and spatially coherent with NextMC. 9. ( q i-j , name )  X  NextMC 10. filteredList  X  {} 11. for each ( q k-l , name y ) in MCList 12. return filteredList have indexed detailed map data to build a system that supports cross-lingual queries over several large cities in three countries. Figure 7 illustrates our system, which implements the XL-QUERY algorithm described in Figure 6. We now explain how a query flows through the various components of our system. The query is first passed into a Word Breaker and Language Detector , which detects the language based on Unic ode code pages (this could be extended to other language detection algorithms), and breaks the character stream into words using whitespace and punctuation marks as guidelines. The individual words are then passed into our Machine Transliteration (MT) and Selective Translation (ST) components. MT implements a Maximum Entropy classifier, details of which are provided later in this section. The ST component contains language-specific dictionaries that contain a relatively small set of common words which often are translated instead of our current implementation translates only common nouns as above, the ST component may be enhanced with known mappings between the query language entities and target language entities (for example,  X  Vienna  X  is  X  Wien  X  in German, and  X  Becs  X  in Hungarian). Such mapping may be obtained from multilingual Gazetteers, and when implemented, may improve the quality of crosslingual location search significantly. The MT component suggests multiple transliterations for each input word , and the ST may add additional words. The set of word alternatives are then combined into a set of most promising transformed subsequences of the query, by taking the cross-product of the word-l evel candidates. This set of transformed subsequences is ra nked by probabilistic estimates provided by the MT system and a small number (currently 4) of top-ranked candidate subsequences are then passed on to the next stage. This number was determined based on experiments on the efficacy of considering variou s numbers of transliteration permutation alternatives. The multiple transformed subsequences are then passed through our abstraction component, a more discriminating form of the SOUNDEX technique, which reduces textual variations inherent in transliteration. The transformed subsequences, along with their abstracted versions, are then passed on to our Approximate Footprint Lookup (AFL) component, which looks up the spatial footprint (a linear quad-tree [5] representation ) of entity names that approximately match each transformed subsequence. Our approximate text matching system is based on [2]. The resultant spatial footprints are passed into our Interpretation Finder , which implements the FindInterpretations depth-first-search described in the previous section, to come up with a ranked list of candidate Interpretations. Finally, found interpretations are ranked by a pluggable Ranker , which presents the more relevant results first. The Ranker is not specific to crosslingual search and its role is described in [17] and in more detail in [8]. Our MT system uses Viterbi training alignment and a Maximum Entropy classifier to generate target language transliteration candidates for a source language word. We use our own alignment algorithm to align each single char acter of a training source word with zero or more characters in the target language transliteration. Because it takes the strictly monotonic nature of alignments in transliteration into consideration, it is better suited for the task than general machine translation alignment tools. Based on the resulting alignments, we train a maximum entropy classifier (adapted from [12]) to estimate the probability th at source language character, in the context of the 3 preceding and the 3 following source characters, should be transliterated to a given target language string. After training (on 15000 name-pairs for each source-target language combination) is finished, a beam search decoder is used to obtain the n most likely transliteration candidates for a (previously unseen) source language word. Figure 8 illustrates tr ansliteration pe rformance for transliteration from three different languages into English, obtained on a test set of 2,700 words. It plots the probability that a transliteration, which either exactly matches the reference transliteration ( X  X xact X ) or has an edit distance of at most one character ( X   X   X  1 char X ), is found among the highest ranked n ( X  X op n  X ) transliteration candidates. The graph shows that there is a high probability (70% for Arabic, 86% for Hindi and 88% for Japanese) of having at least one very close match (within one char edit distance) amongst the top four transliteration candidates, and the quality improvements are asymptotic beyond top four candidates. Our location search system inde xes around 240,0 00 entities (street names, locality names, postal codes etc.) belonging to three big cities, one each from UK, USA and India, on a 3.2GHz (Pentium 4) system with 2GB RAM. The ge neration of 15 transliteration candidates for a source word takes approximately 30 ms (without any optimization for speed) while fuzzy text lookup performs within 10 ms per subsequence. The approximate text lookup for a full query can be expensive since a single location search can yield several tens of subsequences with word breaking, transliteration/translation and subsequence regeneration. We use caching to reduce the overall cost of Approximate Footprint Lookup. In this section, we first establish a baseline using our transliteration module and co mmercial monolingual location search systems, since no other comparable crosslingual location search system exists. Based on our experiments, we find that our system enables broad crosslingual support for a wide variety of location search queries, with results that compare well with the best monolingual location search providers. Furthermore, we establish that straightforward approach of transliteration followed by monolingual geocoding, performs poorly across the board. A set of 275 random English address queries, both structured and unstructured, covering geographic regions from the United States and India were collected from users and user location search query logs. The Arabic, Hindi and Ja panese versions of these test queries were created manually by an external agency to remove any bias. Thus, we have 275 test queries in each of these languages, making up a total of 825 crosslingual queries. A sample query, along with its transliterations in all three languages, is given in Table 1. For each English query, the gold standard geographic location (Latitude, Longitude) was obtained by majority consensus among multiple commercial location search engines, namely, Google Maps  X , Windows Live Local X , and Yahoo Maps X , or by manuall y locating it on a map. As there are currently no commercial or academic crosslingual location search systems available, we construct a baseline, using our transliteration system and the commercial location search engines (referred to as, T + CS ) listed above, as follows: we first transliterate each of the test queries (in Arabic, Hindi and Japanese) to English using our transliteration engine, and then send the four highest ranked transliteration candidates to the three commercial location search engines. We also experimented with larger number of transliteration candidates, but found moving beyond 4 transliterations did not improve the baseline result quality significantly. This is also corroborated by the graph in Figure 8, which shows only as ymptotic improvement in transliteration quality, beyond the top-4 candidates, especially for the fuzzy matching. For example, consider the Japanese query  X  835,  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X ,  X  X  X  X ,  X  X  X  X  X  X  X  X  " (a manually created Japanese version of  X  835, Central Ave N, Kent  X ). For this Japanese query, the machine transliteration system would typically create candidates such as " 835 sentral avenu en kento " , etc. It should be noted here th at our geocoder contains data for specific regions in India, US and UK, and hence we were restricted to selecting the test queries only for these areas. To ensure parity in comparing our results with commercial services that are set up for the whole world, we make one important modification. We append the name s of the region and country, in error-free English, to each query that were sent to the commercial engines to narrow down the scope of the search. We evaluated the three commercial location search engines, and here we are presenting as the baseline, the performance of the best of the three commercial services , when supplied with the four highest ranked transliterations from our transliteration system. Of the 275 test queries, 155 were structured addresses, conforming to the local conventions for postal addresses, and the rest were unstructured addresses informally describing a geographic location. Language Table 3 shows our experimental results for both structured and unstructured test addresses fro m US and India. The numbers denote the percentage of queries for which the geocoding result was within 1 km distance of the gold standard location. In the left half of Table 3, we show the results for geocoding 155 structured or full postal addresse s, in English, Arabic, Hindi and Japanese. It should be noted that in the monolingual case, the unmodified English test queries were provided to the baseline system (along with the region and country information), as well as to our implementation. We observe that our system's performance is marginally poorer than the baseline on monolingual structured data for the USA, but it is si gnificantly better on monolingual Indian queries. For crosslingual structured queries, our system considerably outperforms the baseline combination of transliteration and commercial location search engine in all scenarios. In the right half of Table 3, we present results for experiments with 120 random unstructured queries . For these, we synthesized unstructured location descriptions by selecting combinations of overlapping features from the underlying repository from each city such as intersecting roads, localities, etc. (described in more detail in [17]). We followed the same process of transliterating and appending the region and country information as in structured queries. The results show that fo r unstructured queries our system very significantly outperforms the baseline system in the monolingual case, and even more so for in the crosslingual case. Our claim that integrating transliteration results in an end-to-end system (rather than combining transliterations and monolingual geocoding) will lead to crosslingual performance that is close to monolingual levels is clearly supported by our experimental results illustrated in Figure 9. The figure shows performance (queries geocoded within 1 km, on structured data for US locations) for crosslingual queries, relative to the performance on the original monolingual (English) que ries. It illustrates that, even if queries are written in a completely different language and script, our system can still ge ocode (within 1 km) between 85% (for Arabic) and 90% (Hindi, Japanese) of the queries it can geocode in English. In compar ison, the baseline system supplied with the highest ranked 4 translit erations of the foreign language queries, achieves only 8% (Jap anese), 35% (Arabic) and 54% (Hindi) of the monolingual base line performance. We have deliberately chosen structured queries for US locations as a basis for demonstrating the relative cr osslingual performance, because this is the scenario where the commercial baseline has strongest performance on monolingual queries. Our system performs dramatically better than the baseline of transliteration followed by mono lingual geocoding. Even for the USA, where the baseline outperforms us on structured monolingual data, we achieve between 75% and 88% on crosslingual unstructured data, wh ereas the baseline is between 3% and 6%. In this paper we addressed, possi bly for the first time, the problem of processing complex crosslingual location search queries, where the underlying map data are in a different language than that of the query. We demonstrat e empirically that the simple composition of machine translite ration followed by monolingual geocoding performs poorly, as the ambiguities in the transliteration/tran slation process compound to unacceptable levels for multi-word queries. We then reformulate the crosslingual location search as an end-to-end problem: finding the geometric scope of a query by simultaneously maximizing the crosslingual textual affinity and spatial coherence (i.e., innovatively using spatial constraints to effectively resolve translation ambiguities). We provide results for queries in Arabic, English, Hindi and Japanese, ove r detailed English map data covering multiple cities. Experiments confirm full crosslingual location search accuracy at levels comparable to that of commercial monolingual systems. We are pursuing several promisi ng extensions to this work: Currently, we are working on extending our algorithms to include  X  X hat X  terms, to support loca l search queries such as  X  hospitals near Bellevue downtown  X  (and their crosslingual versions). In addition, our current prototype system [8] that is deployed in 3 demographics supporting 4 language s, is being extended as a distributed system that can handle two orders of magnitude larger data than that used for results in this paper. In addition, we are also exploring improving coverage of entity translation between languages, by mining comparable co rpora for equivalent entities. Our approach is generic, and may be used for crosslingual searches in any language/script, over arbitrary spatial data. We hope that this facilit ates its adoption in spatial domains beyond geographic location search, such as crosslingual queries over scientific spatial data. We would like to thank the Microsoft Windows Live Local team for providing us Gigabytes of detail ed spatial map vector data for several countries. We thank Kalik a Bali for several sessions of fruitful discussions on linguistic s/phonetics and specific language related issues. In addition, we thank Osama Shabaneh and Pushkar Chitnis for their significant help in validating Arabic and Japanese queries and search results. [1] Al-Onaizan, Y. and Knight K. Machine transliteration of [2] Chaudhary, S., Ganjam, K., Ganti, V., and Motwani, R. Robust [3] Christen, P., Churches, T. and Willmore, A. A probabilistic [4] CLEF Forum. http:// www.clef-campaign.org/. [5] Gargantini, I. An effective way to represent quadtrees. In [6] GeoCLEF. http://ir.shef.ac.uk/geoclef/. [7] Goldberg, D. W., Wilson, J. P., and Knoblock, C. A. From text [8] Joshi, T., Joy, J., and Sengar, V. Robust Location Search. [9] Goto, I., Kato, N., Uratani, N. and Ehara, T. Transliteration [10] Knight, K. and Graehl, J. Machine transliteration. [11] Kumaran, A. and Kellner, T., A generic framework for [12] Lin, Dekang. MaxEnt Classifier. 2003. [13] Oh,J., Choi, K. &amp; Isahara, H. A comparison of different [14] Pouliquen, B., Steinberger, R., Ig nat, C., and D. E. Groeve, T. [15] Rhind, G.R. Global Sourcebook of Address Data Management [16] Russell, R. Soundex. US Patent 1,261,167, 1918. [17] Sengar, V., Joshi, T., Joy, J. , Prakash, S., and Toyama, K. [18] Viola, P. and Narasimhan , M. Learning to extract 
