 Existing algorithms for trajectory-based clustering usually rely on simplex representation and a single proximity-related distance (or similarity) measure. Consequently, additional information mark-ers (e.g., social interactions or the semantics of the spatial layout) are usually ignored, leading to the inability to fully discover the communities in the trajectory database. This is especially true for human-generated trajectories, where additional fine-grained mark-ers (e.g., movement velocity at certain locations, or the sequence of semantic spaces visited) can help capture latent relationships between cluster members. To address this limitation, we propose TODMIS: a general framework for T rajectory c O mmunity D iscovery using M ultiple I nformation S ources. TODMIS combines addi-tional information with raw trajectory data and creates multiple similarity metrics. In our proposed approach, we first develop a novel approach for computing semantic level similarity by con-structing a Markov Random Walk model from the semantically-labeled trajectory data, and then measuring similarity at the distri-bution level. In addition, we also extract and compute pair-wise similarity measures related to three additional markers, namely tra-jectory level spatial alignment (proximity), temporal patterns and multi-scale velocity statistics. Finally, after creating a single simi-larity metric from the weighted combination of these multiple mea-sures, we apply dense sub-graph detection to discover the set of dis-tinct communities. We evaluated TODMIS extensively using traces of (i) student movement data in a campus, (ii) customer trajectories in a shopping mall, and (iii) city-scale taxi movement data. Exper-imental results demonstrate that TODMIS correctly and efficiently discovers the real grouping behaviors in these diverse settings. Categories and Subject Descriptors: H.2.8 Database applications: Data mining General Terms: Algorithms; Experimentation.
 Keywords: Trajectory community discovery, multiple informa-tion, semantic information.
The objective of trajectory clustering is to identify clusters from a set of trajectory data of moving objects, where the trajectories in a specific cluster exhibit similarity in one or more movement-related features [25, 9]. Examples of trajectory data include vehicle po-sition data, animal movement data and human behavior tracking data. The recent proliferation of location tracking systems, both in outdoor environments (e.g., GPS) and in indoor buildings (e.g., using Wi-Fi-based positioning), has made it much easier to collect detailed trajectory data. Consequently, there is an increasing in-terest in performing data mining and behavior analysis over such trajectory datasets [31, 4].

Our interest lies in developing an efficient and effective trajectory-based grouping algorithm, that can accommodate the various latent attributes embedded within the raw trajectory data. We are moti-vated by a couple of important use cases: 1. Knowing the size of a group of people (e.g., friends, couples, 2. By combining knowledge of the real world physical inter-
In this paper, we focus on trajectory-based community discov-ery , which aims to identify groupings of objects from trajectory data based on additional behaviorally-driven markers of individual and collective movement. The difference between cluster and com-munity (or group) is that a cluster is a set of objects related purely through spatial proximity, whereas a community is a set of objects whose proximity or movement similarity is likely a manifestation of some underlying mutual interaction or shared relationship. As an example illustrated in the left part of Figure 1 (a), taxi drivers in a city may be apportioned in groups, where each group internally shares information for improved profits; drivers of the same group may exhibit a set of distinct trajectory patterns. Similarly, as illus-trated in the right part of Figure 1 (a), shoppers in a mall may move around in groups, based on shared social relationships.
Previous studies normally perform trajectory clustering based on only a single information source, such as location data [3, 9, 16]; by viewing shared location as the sole determinant of community relationship, real relationships may be missed or non-existent com-munities may be falsely identified. In the social graph community detection literature [10, 22, 7], a community is usually defined over a link-based graph capturing direct pair-wise interactions; such ex-plicit interaction markers are obviously hard to directly obtain in many practical environments due to privacy concerns or technolog-ical limitations. Hence, we focus on infering groups based only on trajectory-related information (e.g., spatial disperson, temporal Figure 1: Trajectory community discovery and its challenges. (a) Human behavior traces naturally result in trajectory com-munity which can help us to understand behavior and decision-making process. (b) In a shopping mall, two trajectories in a community are compared locally (left) and globally (right) from different information sources. Only patterns in dashed box are perfectly matched. We can see that only globally con-sidering the multiple information sources, we can detect the true community. duration, movement velocity) of individual users and the semantic information of the space.

In our approach, we assume that the trajectories are generated and observed in physical spaces, with the individual X  X  movement within the space being encoded by multiple information markers. For example, the trajectories in a mall contain information on what kind of stores the customers visit, how long they would stay, the transition likelihood between stores, and how fast they are walking. The key observation is that it is hard to detect the real community-driven behavior from analysis performed over a single timescale or over a single feature . Indeed, as seen in Figure 1 (b), apparently unrelated trajectories may turn out to have strong similarity, when viewed at certain time-scales or in terms of certain features (infor-mation markers). Therefore, our approach is to develop a unified framework for community discovery, given a set of trajectories and semantic information of sites visited by those trajectories: this uni-fied framework leverages upon different information markers em-bedded within the basic trajectory data.

Furthermore, when choosing features for trajectory analysis, pre-vious approaches usually leverage upon information from an in-dividual trajectory or from long-term movement trends, but not both. We propose to encode both the global statistical informa-tion and individual information into the semantic feature, and then extract similarity measures through the use of kernels that operate on the probability distribution of semantic-level movement. This approach avoids the  X  X urse of dimensionality X  and overcomes the difficulty in measuring the similarity among features with unequal length. More importantly, they jointly model the complicated inter-connection of trajectories within members of a community. More specifically, we propose an approach, T rajectory c O mmunity D iscovery using M ultiple I nformation S ources (TODMIS). TOD-MIS consists of three distinct phases:
Our key contributions are summarized as follows. 1. Multi-Dimensional Linear Model for Community Detec-2. Novel Similarity Metrics: First, we propose a model for ex-3. Experiments on Multiple Real-life Datasets: We evalu-
Section 2 discusses related work. Section 3 presents an overview of our approach. Section 4 and Section 5 propose how to model se-mantic, spatial, temporal and velocity information. Section 6 pro-poses how to learn similarity with multiple information sources. Section 7 presents the results of applying TODMIS on different empirical datasets. Finally, Section 8 concludes the paper.
Trajectory clustering : Trajectory clustering is a diverse research area, with significant diversity in clustering measures and the end goals. Trajectory has been studied using a variety of measures, ranging from probability function of time [3], behavior correla-tion representation [29], density-based distance function [16, 5] and uncertainty measurement of trajectories [20]. Different similar-ity measures (time and location distances) and clustering method-ologies have their strengths and weaknesses [15]. In contrast to most prior work, our method is able to handle multiple informa-tion sources (not just movement trajectories but also the semantics of the underlying space) and apply a general metric-based learning framework to the clustering problem. Trajectory-based clustering has been used for different broad objectives, such as discovering common sub-trajectories [9], identifying spatial structures [18], es-timating common patterns of behaviors and isolating outliers [1], semantic region modeling [27], as well as application-specific ob-jectives such as video surveillance and monitoring systems [21], vehicle motion analysis [11] and discovering object groups that travel together (the objects spatially close at a snapshot). But such work is based purely on spatial locations, making it hard to to ex-tend it to incorporate semantic, velocity or other information that may contain distinctive markers of real community interaction.
Semantic trajectory analysis : There are three common types of approaches for addressing semantic analysis of trajectories: 1) segmentation-based method which segments a scene into seman-tic regions [28] or maps a trajectory into a multidimensional space [19]; 2) conceptual model which structures movement data into countable semantic units [23]; 3) segmentation and annotation-based approach which transforms the raw mobility data into stops and moves [30]. But the previous analysis do not consider multiple in-formation sources and are difficult to generalize to incorporate ad-ditional similarity metrics. Our approach is different from not only the previous techniques, but also the problem of finding semanti-cally similar individuals, who may or may not be visiting the same semantic sites within the same time period (for purposes such as profile-building of individuals). Furthermore, on the feature design for trajectory analysis, previous approaches usually extract either individual information from the trajectory data or long-term move-ment trends, but not both. For example, GAK [2] measure the sim-ilarity between trajectories by applying the dynamic time warping kernels to trajectories. On the other hand, the global statistical in-formation measures the trend and probability how a user may act, and is more robust to noise and missing information in individual trajectories. Thus both the global statistical information and in-dividual information are needed jointly to model the complicated inter-connection of trajectories.

Community detection : Communities in networks are groups of vertices within which connections are dense, but between which connections are sparser. There are mainly four types of methods [17, 10, 22, 7]: hierarchical clustering, similarity on edge between-ness scores, counts of short loops and voltage differences in resis-tor networks. These methods focus on detection given a network structure and social-link distance between nodes which are hard to be captured from trajectories. If we construct such input based on spatial and temporal information, the detection results are not promising (Figure 5 (d) and Figure 6 (d)).
First, we define a trajectory database X = [ x 1 , ..., x where each trajectory x k is a structured element containing infor-mation from multiple aspects, namely, the two dimensional spatial coordinate sequence c k , the site annotation of the sequence s time marker e k and velocity v k associated with each spatial coor-dinate. Second, we have the following problem definition. Problem definition : Given a set of trajectories, we aim to discover a set of trajectory groups, which we name as the community in this paper. The trajectories in a certain community demonstrate similar behaviors, when evaluated under different measures (both spatial and semantic).

D EFINITION 1. Given N trajectories, we define a trajectory affinity graph G (  X  ) with N vertices, denoted by x i , i = 1 , ...N . The weight of the edge between two vertices represent the similar-ity of the two trajectories.
 The similarity between the vertexes in the graph is a weighted com-bination of a set of similarities calculated from multiple informa-tion sources, i.e. , the semantic kernel K s , the temporal kernel K the spatial kernel K p and the velocity kernel K h . We denote the weighted combined similarity K which is defined as: where K m denotes the element of one type of kernel (similarity) from the kernel set. The  X  m denotes the pre-assigned weights re-flecting the specific interests of the problem domain.

For example, when one prefers to find the trajectories with simi-lar semantic relation, temporal relation and similar spatial relation, and emphasize the semantic relation, the weight can be:  X   X  2 = 1 / 4 ,  X  3 = 1 / 4 ,  X  4 = 0 . To acquire the best performance of community discovery, we can fine-tune the kernel weight  X  on a given validation set.
 Trajectory community discovery framework : Our algorithm con-sists of three phases -1) modeling the similarity of trajectories by first applying kernels along four dimensions: semantic-level move-ment, temporal, spatial (proximity) and velocity; and then 2) deriv-ing an overall similarity measure between every pair of trajectories in G (  X  ) through a weighted combination of multiple information sources [26]; finally followed by 3) detecting trajectory commu-nities from these similarity values. The framework is illustrated in Figure 2. Based on this framework, the problem of trajectory-based community discovery is equivalent to the computation of cliques on G (  X  ) . Note that unlike the traditional trajectory clustering ap-proach, each trajectory is not necessarily assigned to a community ID, as some trajectories in real-life data show a unique motion pat-tern that are totally distinct from the rest. We denote these trajecto-ries without any community ID as the  X  X utliers" in our study. We provide Table 1 to describe notations in this paper for convenience.
Given the trajectory database X , we can extract the following description for the sequential record of the sites visited by an indi-vidual user considering that the number of spatially distinct sites is M . For example, the site visiting record of trajectory k : s s  X  s 4 ...
 Our concern is to measure the traverse statistic on the sites from X , and use this statistic to measure the semantic correlation of user trajectories. To this end, we propose the solution outlined below.
Markov state transition: We construct the Markov state transi-tion matrix A  X  R M s  X  M s , where A ( s a , s b ) represents the transi-tion probability from site s a to site s b . To calculate A , firstly we collect all the pairs from the whole trajectory database. Then we count the number of occurrence of each transition pair. Finally, we do column normalization of A , satisfying
Temporal intervals: For many applications, the time spent at each site and the time taken to transit from site s a to site s acquired. Let t k ( s a ) denotes the time spent of k -th trajectory at site s and t k ( s a , s b ) be the time taken to move from site s Then, the temporal interval of k -th trajectory is: [ t k t (3) , t k (3 , 8) , t k (8) , t k (8 , 4) ].

The interval vector may indicate the corresponding level of inter-est shown by the objects (for example, when a shop is very  X  X nter-esting X , the shoppers may choose to stay longer), or illustrates the convenience of moving from site s a to site s b (showing the seman-tic relation of two sites). This resembles a Markov Random Walk with self-loop. Figure 3: Location uncertainty. Due to the error of the signal sensing and processing, the spatial coordinates may be inaccu-rate. Therefore, a soft assignment of the coordinates to the sites can be used to alleviate the negative effect of hard-assignment to the nearest sites. The weights of soft assignment is deter-mined as described in Eq.3.

To calculate A by considering temporal interval, firstly, we nor-malize the time interval vectors for all user trajectories to ensure the total time taken for each trajectory is 1. For example, we normal-ize the vector of k -th trajectory so that t k (1) + t k (1 , 3) + t t (3 , 8) + t k (8) + t k (8 , 4) = 1. Secondly, accumulation is done by using the time interval vector by A ( s a , s b ) = A ( s We proceed similarly for the time spent at other locations. For ex-ample, if we have t k ( s a ) , then A ( s a , s a ) = A ( s nally, we normalize each column of A to ensure
Dealing with location inaccuracy: In many cases, the loca-tion information may be inaccurate due to the error of the sensors. Therefore, probabilistic weighted accumulation is preferred over determinant accumulation. The probabilistic weighting scheme is shown in Figure 3, where the crosses denote the detected location center, and the in-dashed circle represents the range of uncertainty of the signals (localization error bounds).
 In this case, the degree of site membership should be constructed. A reasonable way is to use the Nadaraya-Watson kernel regression on the Gaussian kernel to approximate the probabilistic site mem-bership, which we denote by o . For example, the probabilistic site membership of Coordinate 1 for site a , b and c in Figure 3 is: where  X  denotes the uncertainty range of the sensor. Similar cal-culations can be done on Coordinate 2. Therefore, if there is a pair from Coordinate 1 to Coordinate 2 for User k , and the transition time is denoted by t k ( c 1 , c 2 ) , we conduct probabilistic weighted accumulation as follows:
Representative distribution of a user X  X  site visits: Given a user trajectory, we calculate the stable distribution which represents the probability a user appearing at one site. We denote such stable distribution for k -th trajectory as r k  X  R M s . To this end, we firstly construct the Markov state transition matrix A by the above-mentioned method. Then we collect the set of sites where the users appears, and enumerate the number of visits. For example, by con-sidering the temporal interval information, we calculate the person-alized appearance vector of k -trajectory:  X  o k =[ t k (1) , 0, t k (3) , t k (4) ,0,0,0, t k (8) ,0,0]
Furthermore, the values of  X  o k should be represented in a prob-abilistic form based on the probabilistic site membership o to deal with location inaccuracies. (This extension is straightforward and omitted here). We normalize  X  o k , to make each trajectory, we apply an iterative process to calculate the sta-tionary distribution r k for each trajectory,where: 1. FOR t = 1 to T A r k =  X  A  X  r k + (1  X   X  )  X  o k 2. Normalize r k so that
The process is inspired by the famous personalized Pagerank method in [6]. To analyze the property of r k , we have the following lemma.

L EMMA 1. Each semantic feature r k converges to a unique an-alytical solution when T A  X  X  X  1 .

P ROOF . At T A -th iteration, we have: r k = (  X  A ) T A r 0 k + (1  X   X  )  X  o k where r 0 k denotes the initialized value of r k . Note that the maxi-mum eigenvalue of A is 1. When 0 &lt;  X  &lt; 1 and T A  X  inf , the first term converges to 0, which means that the final solution is ir-relevant with the initial value r 0 k . For the second term, we have the following analytical form: From the analytical solution, we see that r k is determined by  X  and  X  . When  X  = 0 , r k =  X  o k . When  X  = 1 , r k corresponds to the eigenvector of A with eigenvalue 1.
 Remark : If rank ( A ) = M s  X  1 and 0  X   X  &lt; 1 , for any  X  satisfying ||  X 
P ROOF . If rank ( A ) = M s  X  1 , consider that the maximal eigen-value of A is 1, when 0  X   X  &lt; 1 , I  X   X  A is invertible and the maximal eigenvalue is bounded. Therefore, for any  X  : where  X  max denotes the maximal eigenvalue of ( I  X   X  A )
From the remark we see that, if the personalized pattern  X   X   X  is similar, their semantic features will be similar as well. By using r k as the stable distribution of the sites, the semantic diver-gence between k -th and k  X  -th trajectory can be easily calculated. The non-zero dimensions in r k not only tells that how long a user has stayed on the certain site, but also provide a probability that how likely a user would be visiting the site if it is not visited by user k in the initial site occurrence vector  X  o k . The proposed stationary feature encodes more abundant semantic information by using the global statistical information, and thus it helps to better discrimi-nate among the semantic behavior of different people.

Another issue to be considered is the semantic annotation of the site. While each element of the probability vector r k denotes a site, it is possible for multiple sites to be semantically equivalent : e.g., there may be three coffee shops in a shopping mall. To accommo-date this equivalence, we apply a simple post-processing step on each stationary distribution r k . We merge and accumulate the di-mensions of the probabilities of those sites with the same semantic
Typically, setting T A to 20 comfortably guarantees convergence. meaning into one dimension, and then the M s -dimensional station-ary distribution feature r k is reduced to M  X  , where M  X  that, after the post-processing step, r k is still guaranteed to be a sta-ble probability distribution and
Given semantic residency distributions, r k and r k  X  , their seman-tic similarity can be computed by Histogram Intersection kernel: K ( k, k  X  ) = tion (RBF) kernel: K s ( k, k  X  ) = exp(  X   X   X  r k  X  r k  X  denotes the bandwidth parameter of RBF kernel.

For parameter tuning of the semantic feature using RBF, we can experiment with some reasonable choices of  X  (such as  X  =0.8, 0.7 or 0.6). When similarity is computed using the histogram inter-section kernel, no parameters are required. When we use the RBF kernel with parameter  X  , we calculate the pairwise distance ma-trix D with N  X  N , where D ( i, j ) = || r i  X  r j || 2 . A heuris-tic setting of  X  can be the inverse of the average of all the el-ements in D where  X  0 = 1 mean ( D ) . Giv en  X  0 , we select  X  = K , and finally the kernel with the best performance is selected. In our studies and presented results, we shall focus solely on the RBF kernel, as it consistently provides superior results.
For each trajectory k , we extract a vector with four dimensional time stamps w from the time marker e k : w k (1) records the first showing time; w k (2) (the first meeting time stamp for two visitors in a group; w k (3) denotes the ending time: w k (4) is the day index. The time stamp trajectory features describe the temporal activity pattern for real-life communities. For example, young people may prefer to go shopping or play together in the afternoon and evening, while the elderly may prefer to get up earlier and collectively go for exercise. Moreover, the teenagers may be seen to spend an ap-preciable amount of time waiting for the arrival of their friends, whereas the elderly may be more punctual. To appropriately mea-sure the temporal similarity, the temporal kernel can be formulated as: where  X  1 and  X  2 denote the bandwidth factors. While these need to be adjusted for the specific trajectory mining scenario, the adjust-ment process is not very complicated. One feasible approach for setting  X  1 and  X  2 is as follows: 1. Given N trajectories, calculate the average temporal pattern 2. To acquire the best performance, one can conduct parameter
We can directly use the Global Alignment Kernel (GAK) [2] to measure the spatial similarity between two trajectories. We denote the similarity of spatial information as K p . According to the anal-ysis in [2], the GAK is positive definite.

However, GAK only measures the spatial closeness of individ-ual trajectories, which may be incapable of discovering the true communities if a large mass of additional trajectories exhibit sim-ilar proximity. For example, if Alice, Bob and 100 other people are waiting in a concourse area, then the spatial similarity between the trajectories of Alice and Bob should not be too significant, be-cause this concourse may be the only way for people to traverse through the space. However, if Alice and Bob are the only two people in the group study room on a college campus, and everyone else is in a different classroom, then these two trajectories should be viewed as significantly similar. Based on this intuitive obser-vation, we propose a new Global Alignment Kernel with Inverse Proportion (GAK-IP) (inspired by TF-IDF in IR research), that in-tuitively weighs the spatial similarity in inverse proportion to how many other people are located within the similar distance range. To describe this in detail, we first explain how an unmodified GAK works. Consider two time series (trajectories): where each c x ( i ) or c y ( j ) can be the two dimensional spatial co-ordinates or the indicator of a certain site. An alignment is  X  = (  X  1 ,  X  2 ) where a pair of increasing integral vectors of length p n + m  X  1 . Note that such alignment may not be unique, we write A ( n, m ) for the set of all alignments between two time series of length n and m . The Global Alignment Kernel is defined as the exponential soft-minimum of all alignment distances.
 where D  X  ( c x , c y ) def = c It is equivalent with the following formulation:
In our modified version of GAK-IP, we revise the definition of distance as follows: where w  X  ( i ) denotes the weight calculated by considering the num-ber of people within a range or on the same site. We denote the number of people on the site  X  ( i ) at the time when c x pear together as n  X  ( i )  X  1 , w  X  ( i ) can be calculated as:
Note that using log e reduces the disproportionate impact of a site where the pair are co-resident with a very large number of objects (a high n  X  ( i ) ), which may cause that K p will be highly dependent at a certain location with crowded objects. h Figure 4: Temporal pyramid matching. h k (1)+ h k (6) = 1 .
 L EMMA 2. GAK-IP is positive definite.
 P ROOF . Since
Obviously, by the enclosure property of kernel, the weighted combination of kernel is still guaranteed to be positive definite.
The information encoded in velocity pattern of moving objects is also critical for real-life trajectory analysis. For example, the younger taxi drivers tend to drive fast, while the experienced driver will keep a safe speed. However, we face two challenges when modeling the velocity pattern. The first is that trajectories are with non-uniform lengths, which brings about difficulty in directly mea-suring their pairwise similarity from velocity aspect. The second challenge is that velocity characteristics are diversified on different object, time and location, therefore, it is hard to directly construct their velocity pattern correlation. To analyze the velocity consis-tency of the trajectories by addressing the two challenges, we de-sign a temporal pyramid kernel by considering different temporal resolutions, which is inspired by [8] in image classification domain on calculating the image level similarity.

We suppose each trajectory is attached with a velocity vector v with unequal lengths. We uniformly quantize the velocity into L levels 2 . Given v k with length l k , we calculate the normalized his-togram h k (0) on v k . Then we equally divide v k into two parts v  X  [v k (1) , v k (2)] , where both v k (1) and v k (2) are also veloc-ity vectors with l k 2 . We calculate the normalized histogram h and h k (2) on v k (1) and v k (2) , respectively, and normalize them so that divide v k (1) or v k (2) into two parts again and calculate the his-tograms in the same way.
 Such process can be conducted until a predefined level is achieved. We concatenate all the histograms with predefined weights. The de-tailed process is demonstrated in Figure 4. Note that Figure 4 cor-responds to a three-level temporal pyramid, therefore, the weight of each level is assigned with [1/4, 1/4, 1/2], where the bottom level is assigned with the highest weight [8]. For a four-level pyramid, the weight vector is [1/8,1/8,1/4,1/2].

Based on this, we can extract a velocity histogram h k of equal length D h with coarse-to-fine temporal resolution. The similar-ity between user trajectory k and k  X  can be either calculated with histogram intersection or Chi-Square kernel. The histogram inter-
In fact, the quantization scheme can be application dependent section and the Chi-Square kernel are: where  X  denotes the bandwidth parameter for the Chi-Square ker-nel.  X  may be tuned as follows: 1. Given N trajectories, calculate the average velocity pattern 2. Set the initial value  X  0 as 1 /d h . 3. To acquire the best performance, we can conduct parameter
Now we have several types of kernels representing the similarity from different information sources. The kernel set includes seman-tic kernel K s , temporal kernel K  X  , spatial kernel K p kernel K h . Based on the similarity definition in Eq. 1, we detect the trajectory communities from the trajectory database. Note that the trajectory data is collected from open environment with diver-sified customer behaviors, so that each trajectory does not have to be assigned with a community label. To this end, we use the dense sub-graph detection method proposed by [13] which robustly de-tects a set of highly connected sub-graphs (cliques) from the graph, where the nodes represent the trajectories and the weights of the vertices represent the pair-wise similarity among trajectories.
The method represents a set of vertices by a probabilistic clus-ter, which is a unit vector in the space of standard simplex. Then, a quadratic function is introduced to measure the average edge weight among them and the dominant set is defined as the sub-graph with the largest average edge weight. In this paper, we refer to such average edge weight as the dominance of a subgraph. More detailed as: 1. The probabilistic cluster is defined as z  X   X  N , where  X  2. The dominance of the probabilistic cluster z is defined in Eq.
The dense sub-graph seeking problem can be formulated as a standard quadratic optimization problem [13]. It can be solved by the replicator dynamics method, where z is the probabilistic cluster Algorithm 1 TODMIS algorithm Input: Data: X , P arameters:  X  ,  X  ,  X  ,  X  1 ,  X  2 ,  X  Output: z  X  c  X  , c  X  = 1 , ..., C 1: Construct K s on X with parameters  X  and  X  . 2: Construct K  X  on X with parameters  X  1 and  X  2 . 3: Construct K p on X with GAK-IP. 4: Construct K h on X with parameter  X  . 5: Construct K 0 based on [ K s , K  X  , K p , K h ] and  X  . 6: c  X  = 1 . 7: while The vertex set in G (  X  ) is not empty do 8: Get z  X  c  X  by solving Eqn. 19 on K c  X   X  1 . 9: Exclude the vertexes with non-zero elements in z  X  c 11: c  X  = c  X  + 1 12: end while and t indicates the iteration time.
For the graph G (  X  ) with N vertices, the probabilistic cluster is initialized as: z (0) = easy to implement and easy to calculate and according to the ex-periment results, it converges in 4 iterations on average for a graph with less than 100 vertices. After detecting one dense sub-graph using the above process ( i. e. , find an optimal solution z the method in Eq. 19 [13]), we exclude the vertexes with non-zero value in z  X  , and start the optimization process again on the reduced graph, where the new affinity matrix K  X  is the sub matrix of K . This process is repeated until the vertex set becomes empty. For each z  X  , we define the average similarity of the currently detected dense sub-graph as ( z  X  ) T Kz  X  . The whole procedure of TODMIS is demonstrated in Algorithm 1.

According to the analysis in [13], the time complexity depends on the number of edges, which is O ( N 2 ) for fully connected graph. However, for processing large trajectory database, a sparse near-est neighbor graph can be constructed instead of a fully connected graph. Therefore, the time complexity can be reduced to O ( qN ) , which is linear with respect to the number of trajectories N and the number of nearest neighbors q .
Real-life data sets: We conduct our experiments on three real life data sets: 1) Campus student tracking data ( Campus ): We col-lected 1,000 students X  trajectories with time duration as long as one week in one level of a university campus building. Based on the students X  real activities (ground truth data), we are able to label 40 real groups (a.k.a. trajectory community). 2) Customer shopping behavior data ( Mall ): We collected 5,000 customers X  trajectories (over an observation duration of two days) in one level of a big shopping mall in Singapore. In this data set, we introduced 16 controlled groups (ground truth) to test if TODMIS can identify these groups. 3) Taxi driver tracking data ( City )[14]: We collected 10,000 taxi drivers X  trajectories (over an observation duration of one week) from a big city in China. In this data set, there exist 650 groups (ground truth from taxi company), such that each group is assigned a region to traverse by the company). The whole city has more than 20,000 road segments, around 10,000 taxis belonging to more than 100 taxi companies; each company partitions its drivers (c) Precision in city test into several taxi groups (10 to 50 groups). The tracking records including Taxi ID, instant speed, driving direction, location, com-pany ID, taxi type ID and group ID (associated with company ID). From the data, we observe that taxi drivers do exhibit a grouping pattern (community): given a region (described as a set of road segments), they always traverse in this region in a given time pe-riod. Thus in this experiment, we create a grid-based representation of the city (based on the road segments) and investigate the effec-tiveness of TODMIS by applying it on the collected trajectories of the drivers, and then comparing the identified groups with the real groups defined by the company (ground truth). To compare our detected trajectory community (trajectory-based) against a tra-ditional social network-based clustering approach, we collected the social contact information of the above taxi drivers, consisting of the phone call (from a communicator on taxi) records including caller taxi ID, callee taxi ID, start time, end time, start location and end location.

Experiment environment: Our experiments and latency obser-vations are conducted on a standard server (Linux), with four Intel Core Quad CPUs, Q9550 2.83 GHz and 32 GB main memory.

Baseline methods: For the trajectory data, we compare our method with BU algorithm [24], M-Atlas [16, 5] and Multifeature [1]. BU algorithm is used to detect traveling companions from streaming trajectories. M-Atlas is used to create and navigate a catalog of the mobility behaviors of a territory (GPS data). Multifeature is used to estimate common patterns of behaviors and isolates out-liers in video data. For the social connection data, we compare our method with DSHRINK (one of the latest community detec-tion algorithms), a distance-based clustering algorithm for detect-ing communities in incomplete information networks with missing edges [12]. The parameters for the various baseline methods will be described shortly.

Evaluation metrics: In our experiments, we use the total exe-cution time (at different scales) to evaluate the computational ef-ficiency . We utilize the precision and recall to evaluate effective-ness . The detailed definitions of the above evaluation metrics are explained in the experimental results. The parameters of all the kernels for TODMIS are tuned strictly according to the methods described in the previous sections.
In this experiment, precision is defined as the fraction of re-trieved communities that are relevant to the search. The recall is defined as the fraction of the communities that are relevant to the query that are successfully retrieved. The F1 score can be easily calculated based on precision and recall , and we omit it here.
Single kernel: We conduct experiments to validate the advan-tage of using multiple information sources over single informa-tion source. We compare TODMIS using average kernel weight (  X  m = 0 . 25 , m = 1 , ..., 4 , which has been widely accepted in multiple-feature fusion paradigm) with TODMIS using single ker-nel corresponding to  X  m = 1 , m = 1 , ..., 4 , respectively. For ex-ample, in the Mall setting with 1,000 trajectories, the precision of TODMIS using average weight is 0.61, which outperforms the best performance of the single kernel version (the best precision is 0.45 achieved by using semantic kernel K s ). The recall of TODMIS using average weight is 0.58, which outperforms the best recall of the single kernel version (the best recall is 0.41 achieved by using K ). For the City scenario, with 2,000 trajectories, the precision of TODMIS using average weight is 0.59, which outperforms the best performance of the single kernel version (the best precision is 0.39 achieved by using velocity kernel K h ). The recall of TODMIS using average weight is 0.58, which outperforms the best recall of the single kernel version (the best recall is 0.35 achieved by using K h ). Our experiments thus provide strong evidence of the benefit of using multiple information sources.

Multiple kernels: Based on the results from Figure 5 and Fig-ure 6, TODMIS performs better precision and recall than the base-line methods. Note that even if we simplistically weigh the se-mantic, temporal, spatial and velocity measures equally , TODMIS still performs better. From the parameter tuning, we can find that different measures impact the precision and recall in different sce-narios. For the Campus scenario, we observe that the grouping performance is more sensitive to the semantic and temporal simi-larity measures (rather than the spatial and velocity measures). In-tuitively, this is due to the fact that groups perform different activ-ities in different spaces (e.g., lectures in lecture halls, project work in group study rooms) and for different durations (e.g., lectures for 1.5 hours, project work for longer durations), whereas the spatial and velocity information are less discriminative (especially because the floor is very crowded). In the Mall scenario, the semantic simi-larity measure (each store is treated as a distinct semantic label) is obviously important as, intuitively, members of a group are likely to visit the same stores in a similar sequence. However, unlike the campus, we cannot perform any significant state-space reduction during post-processing, as it is highly unlikely to find two outlets of the same store in the mall. Also, similar to the Campus sce-nario, the spatial and velocity similarity measures in the Mall are less significant for clustering.

For the City scenario, the observations are quite different: for taxi traffic, the semantic information of different sites and the ve-locity information of drivers are more discriminative than the other two measures (although the temporal and spatial measures do play a role). Note that TODMIS is less accurate in our experiment on taxi drivers X  trajectories, compared to the Campus and Mall scenar-ios. The reason is that even though we utilize the road segment to identify each taxi driver X  X  trajectory, taxi drivers do not traverse the roads in groups (unlike students on campus or shoppers in the mall). But TODMIS still achieves promising effectiveness as shown in Figure 5 (c) and Figure 6 (c). In Figure 5 (d) and Figure 6 (d), we Figure 7: Efficiency evaluation. TODMIS is efficient and scal-able in different scenarios. report the experiment results of community detection based on so-cial links (phone calls between drivers). The precision and recall tests are based on the real group (community) information from the company. It is obvious that our method, even without velocity kernel, is still better than DSHRINK (close to but not better than TODMIS without velocity kernel). From the results, we notice that the real social connection based community is actually not the same as the community information from taxi companies. On investigat-ing the reasons for the poor performance of DSHRINK, we found that 4.5% taxi drivers actually make less than 5 calls per day and 18% taxi drivers make more out-going calls to other communities (in the same company) than to their own community. For TOD-MIS, we not only capture the calling behavior between drivers, but also their semantic, temporal, spatial and velocity similarities from the actual movement, which is a better indicator of the community as opposed to the call records.
In Figure 7, we report the total execution time of the clustering algorithm, as a function of the number of trajectories. We see that TODMIS X  X  computational efficiency is close to Multi-feature but better than the other two baseline methods. Moreover, TODMIS shows a close-to-linear relationship between execution time and the number of trajectories.
The spatial granularity of trajectory data has great impact on the clustering result/ community discovery quality. To study this, we run TODMIS on the City scenario, with different trajectory (spatial grid) granularities. More specifically, we experiment with different road segment lengths (where each road segment defines a sample point in the trajectory data). As shown in Figure 8, TODMIS is tolerant to different trajectory granularities (different road segment lengths). More specifically, the results for segment lengths of 200 meters and 400 meters are very similar, but the precision begins to decrease if resolution gets coarser (segment lengths of 600 me-Figure 8: Sensitivity evaluation. TODMIS is tolerant to differ-ent trajectory granularities. ters and higher). Intuitively, we note that 55.4% of the true road segments within our test area have length between 200-400 meters, implying that larger values of segment lengths (e.g., 600 meters) causes TODMIS to miss out features distinct to each individual true segments. However, in general, we find that TODMIS is fairly ro-bust to different trajectory granularity values.
Outliers in trajectories : Since the trajectories are collected from real-life scenarios, it is obvious that some outliers will be included in the database. These outliers act differently with all the other trajectories within the detected communities, so they cannot be in-cluded into any of them. For example, for the taxi driver X  X  tra-jectories, the taxi may encounter with traffic accident and stay in certain location for a very long time to wait for the traffic police, or some drivers may interrupt their business due to unpredictable emergency. These trajectories act differently and they are not simi-lar from other trajectories in all the information sources. Therefore, they are automatically assigned to the  X  X ackground" by our algo-rithm and the average similarity of the background are very low (usually less than 0.2).

Automatically learning kernel weights : Besides manually set-ting, the weights for different kernels can be automatically learned towards certain objective. For example, given labels describing if the trajectories belong to the same community or different com-munities, we can learn the kernel weights to maximize the per-formance of community discovery. In future, we plan to apply to techniques such as metric learning on multiple kernels [26] to learn similarity weights better.

Noise tolerance and heterogeneity : Noise is ubiquitous due to inaccurate signal sensing and localization. In our algorithm, the risk of model degradation brought by noise can be alleviated by the weighted combination of the information in multiple kernels. For example, if the noise level of spatial kernel K p is unexpect-edly high, the influenced can be reduced by decreasing its weight and the missing information can be complemented by other ker-nels such as the semantic kernel. Moreover, the trajectories are collected from different people in real-life; hence, the community behavior can be influenced by many factors, such as age, nation-ality, culture and gender. Therefore, the compactness and average similarity levels are not consistent from community to community. Our proposed method is robust to such kind of heterogeneity, since we can choose the sub-graphs with top ranked average similarity levels as the discovered community, or we just choose the top c sub-graphs where there is a significant drop between the average similarity level of c  X  -th and ( c  X  + 1) -th sub-graph.
In this paper, we proposed TODMIS, a trajectory-based com-munity detection technique, consisting of three phases: 1) model-ing semantic information of locations, temporal, spatial and veloc-ity information with kernels; 2) creating a unified similarity mea-sure via weighted combination of multiple information markers; 3) identifying communities via dense sub-graph mining. Extensive experiments were conducted on three real life data sets: customers in a shopping mall, students in a campus building and taxi drivers in a city. The results demonstrated that TODMIS outperformed other clustering algorithms in detecting the correct groups from different trajectory data.

In future work, we plan to enhance our work on trajectory-based community discovery as follows: 1) we will collect more real-life trajectory data; 2) we will attempt to construct a trajectory dictio-nary from the underlying data, where each element in the dictionary represents a canonical user behavior; 3) we will try to develop au-tomated learning of kernel parameters and multi-marker weights given some level of specific community information; 4) we will study the usefulness of community-aware recommendation tech-niques, especially for targeted mobile advertising.
This research was supported by the T-SET University Trans-portation Center sponsored by US DoT Grant No. DTRT12-G-UTC11, the Singapore National Research Foundation under its In-ternational Research Centre @ Singapore Funding Initiative and administered by the IDM Programme Office and National Basic Research Program of China (973 Program): 2012CB316400. The authors also thank Lionel Ni for valuable discussions and support regarding this work. [1] N. Anjum and A. Cavallaro. Multifeature object trajectory [2] M. Cuturi. Fast global alignment kernels. In ICML X 11 . [3] S. Gaffney and P. Smyth. Trajectory clustering with mixtures [4] Y. Ge, H. Xiong, Z. hua Zhou, H. Ozdemir, J. Yu, and K. C. [5] F. Giannotti, M. Nanni, D. Pedreschi, F. Pinelli, C. Renso, [6] D. Horowitz and S. D. Kamvar. The anatomy of a large-scale [7] J. Huang, H. Sun, J. Han, H. Deng, Y. Sun, and Y. Liu. [8] S. Lazebnik, C. Schmid, and J. Ponce. Beyond bags of [9] J.-G. Lee, J. Han, and K.-Y. Whang. Trajectory clustering: a [10] J. Leskovec, K. J. Lang, and M. W. Mahoney. Empirical [11] X. Li, W. Hu, and W. Hu. A coarse-to-fine strategy for [12] W. Lin, X. Kong, P. S. Yu, Q. Wu, Y. Jia, and C. Li. [13] H. Liu, L. J. Latecki, and S. Yan. Fast detection of dense [14] S. Liu, Y. Liu, L. M. Ni, J. Fan, and M. Li. Towards [15] B. Morris and M. M. Trivedi. Learning trajectory patterns by [16] M. Nanni and D. Pedreschi. Time-focused clustering of [17] M. Newman. Detecting community structure in networks. [18] R. T. Ng and J. Han. Clarans: A method for clustering [19] A. N. Papadopoulos. Trajectory retrieval with latent semantic [20] N. Pelekis, I. Kopanakis, E. E. Kotsifakos, E. Frentzos, and [21] C. Piciarelli, G. L. Foresti, and L. Snidaro. Trajectory [22] C. Shi, P. S. Yu, Y. Cai, Z. Yan, and B. Wu. On selection of [23] S. Spaccapietra, C. Parent, M. L. Damiani, J. A. F. [24] L. A. Tang, Y. Zheng, J. Yuan, J. Han, A. Leung, C.-C. [25] M. Vlachos, D. Gunopulos, and G. Kollios. Discovering [26] S. Wang, Q. Huang, S. Jiang, and Q. Tian. S 3 MKL: scalable [27] X. Wang, K. T. Ma, G. W. Ng, and W. E. L. Grimson. [28] X. Wang, K. Tieu, and E. Grimson. Learning semantic scene [29] T. Xiang and S. Gong. Beyond tracking: Modelling activity [30] Z. Yan, D. Chakraborty, C. Parent, S. Spaccapietra, and [31] H. Zhu, J. Su, and O. H. Ibarra. Trajectory queries and
