 With the rapid growth of the travel industry, tourism is becoming one of the key ele-ments affecting urban development, and the need for fast and intelligent travel services has increased strongly during the past decades [Ricci 2002]. A major effort along this line is the development of travel recommender systems, which are significantly differ-ent from the classical recommender systems due to the specific characteristics of travel data and the recommendation objectives. For instance, given a large collection of histor-ical travel data, travel package recommendation has a goal of recommending suitable travel packages to the right tourists. Unlike traditional items (i.e., movies and books) for recommendation, travel packages usually include a set of selected landscapes and have a lot of additional context information, such as area and season, price, travel time, and route constraints.

This additional information has a significant impact on the choices of tourists. Tak-ing the price and the time cost for movies and travel packages as an example, movies commonly have a 2-hour length and similar prices, but travel packages can vary from a 1-day excursion to a half-month luxury holiday. Thus, tourists must make decisions considering their funds and spare time. Therefore, there is an interactive process be-tween the features of travel packages and the specific situations of tourists. People have actually studied how to exploit some of this additional context information for enhancing travel package recommendation. For instance, Ge et al. [2011] considered incorporating finances and time cost into travel package recommendation, and Liu et al. [2011] tried to capture the correlations among two features (i.e., area and season) of travel packages. However, both only took some specific features into consideration, and they lack the capability to exploit all the additional context information. Recently, the urban environment has presented a new challenge of using multiple context data to im-prove travel recommendation. For instance, Zheng et al. [2012] developed an integrated and effective mobile recommendation system including three algorithms to answer location-related queries for location-based services. Meanwhile, beyond the tourism domain, there are some recommendation works that exploit additional user/item fea-tures to improve recommendation results. For instance, for academic collaboration recommendation, Tang et al. [2012] proposed the Cross-Domain Topic Learning (CTL) model to highlight the existing relationships of authors through implicit topic layers and publications. However, these algorithms are not suitable for travel package rec-ommendation, and more importantly, they do not pay close attention to the intrinsic connections among the features of users or items.

In summary, to the best of our knowledge, the existing studies usually consider additional context information in a case-by-case manner, and there is no systematic solution to simultaneously and dynamically incorporate multiple types of contexts. This motivates us to find novel methods for improving the recommendation effects. In this article, we define a systematic solution for dealing with the multifarious context information. In this way, the extra overhead for processing different types of additional information will be avoided and thus more efficient recommendation methods can be proposed. Specifically, we are inspired by the idea of Object-oriented programming, where the key-value pairs are used for saving information of Objects. Similarly, the users or items in recommender systems are also abstract concepts, so it is natural to consider them as Objects following the Object-oriented programming. To that end, we propose to develop an open framework, the Object-Oriented Recommender System (ORS), for developers, which has the ability to import all the available additional con-text information in the recommendation process in a systematic and cost-effective way.
Along the lines of the development of the ORS framework, we first analyze the key characteristics of the travel packages and provide a new way to represent the travel data. Specifically, the different types of context information in the travel packages are extracted and represented as feature X  X alue pairs and the Object is defined as the collection of these feature X  X alue pairs. In the ORS framework, a travel record is an Object and thus can be represented by a collection of feature X  X alue pairs. For instance, for a travel record, Alice (a 20-year-old girl) took a 1-day tour of Hong Kong in the summer of 2011, so this travel record can be represented as {Name: Alice, Age: 20, Gender: female, Days: 1, Area: Hong Kong, Season: Summer, Year: 2011}. Similarly, we can also regard the tourists and the travel packages as Objects; for instance, a tourist owns a set of features about him-or herself and his or her travel histories.
Then, we propose two models that can be used in the ORS framework to mine the implicit relationships (similarities) among the Objects. The first one is a novel topic model named the Objected-Oriented Topic Model (OTM), which considers the tourist correlations as the latent topics hidden in the collection of intrinsic feature X  X alue pairs of the Objects. The second one is another simple Bayesian network model, the Objected-Oriented Bayesian Network (OBN), which can more efficiently infer the cotravel prob-abilities of two tourists by calculating the co-occurrence times of the feature X  X alue pairs. Next, based on the relationships mined by OTM or OBN, the nearest neighbors for each tourist can be found and the recommendation list is generated by the collab-orative filtering method. Finally, the ORS framework is completed for travel package recommendation by considering some additional factors, including the annual behav-iors of tourists as well as the cold start problem of new packages.

We evaluate these two similarity models (OTM and OBN) and the ORS framework on real-world travel package data, and the experimental results show that the ORS framework is more flexible in terms of incorporating additional context information, and thus performs much better for travel package recommendation than state-of-the-art recommendation methods. Meanwhile, for feature selection in ORS, we define and compute the feature information entropy using the OTM model, and the corresponding experimental results on the ORS framework demonstrate that using features with lower entropies usually leads to better recommendation results. The rest of this article is organized as follows. Section 2 introduces the travel data analysis and the basic concepts. Sections 3 and 4 describe the details of the OTM model and the OBN model, respectively. In Section 5, we present the ORS framework for real-world applications based on the OTM or OBN model. Experimental results are shown in Section 6. Section 7 discusses how to select useful features. After introducing some related research works in Section 8, we conclude the article in Section 9. In this section, we first give the travel package recommendation scenario. Specifically, we aim to make personalized travel package (item) recommendation for tourists (users). Then, we analyze the unique characteristics of the travel package data in detail and describe the correlations among the additional context information. By considering the different types of additional information uniformly represented as feature X  X alue pairs, we give the definition of Object. Finally, we introduce other basic concepts for the development of the framework of the ORS.
 provided by a travel company for tourists, such as some landscapes, the travel days, and the price.
 We explore a real-world travel dataset provided by a travel company in China. From this dataset, we extracted 23,351 useful records from 5,211 tourists for 908 travel packages from the years 2000 to 2010, in which each tourist has traveled at least two different packages. Note that all the following discussions are based on the statistical analysis of this real-world dataset. There are some unique character-istics of the travel data, some of which have been briefly illustrated in Liu et al. [2011] and Liu et al. [2014]. First, it is very sparse. On average, each tourist has traveled only four times and only 0.49% of the entries in the corresponding tourist package matrix are nonzero. The extreme sparseness of the data raises challenges for traditional recommendation methods, such as collaborative filtering, which needs to discover enough and trustable similar users or items. It is also one of the rea-sons that we exploit the additional context information for improving travel package recommendation.

Next, the choice of tourists is highly dependent on the attribute correlations between tourists and travel packages. For example, tourists with different ages and genders also have different affordable prices. From Figure 1(a), we know that male tourists cost more money than female tourists on average, and tourists with different ages usually have different spending patterns. Thus, both the genders and the ages of tourists affect their choices when they go to travel. As Figure 1(b) shows, young tourists aged 15 to 24 year have half of their travel records occurring in summer, perhaps because of their spare time during the summer holiday. Also according to Figure 1(b), the percentage of elders traveling in the fall increases with age, perhaps because fall has more comfortable weather than other seasons. Let X  X  consider a simple example: if there is a 20-year-old girl named Alice, based on Figure 1(a) and Figure 1(b), she should have a higher possibility to choose a cheap short trip in the summer than a luxury one in the winter. Similarly, it is easy to find that there are many other features that affect the choices of tourists and the recommendation effects. Therefore, it is important to systematically incorporate these features and effectively use them for the travel package recommendation.

Finally, the travel data have much stronger time dependence. Indeed, Table I shows that most of the travel packages are new, where a new package means a package that does not previously exist and has recently been added into the system. As illustrated in Table I, tourists like to choose novel packages, so that each year the travel companies create new travel packages to replace the old ones. Without traveling records, the only way to recommend these new packages is to exploit their content/context information.
In summary, for a specific tourist, the travel package chosen by him or her is de-pendent on both his or her attributes (e.g., age and gender) and the features of that travel package (e.g., price and travel season). A toy example is shown in Table II, assuming that a group of tourists have an interest in traveling to Hong Kong. With-out the context information (e.g., package features and tourist attributes), it is hard to find out the reason they go to Hong Kong. By considering the features  X  X ge X  and  X  X rice X , according to Figure 1(a), we can infer that young tourists are interested in the cheap trip to Hong Kong, while middle-aged tourists may enjoy more expensive tours. Thus, we can provide appropriate services through recommending different packages to tourists with different attributes. We conclude that the context information provided by feature X  X alue pairs could describe the interests of the tourists more precisely. How-ever, analyzing each feature case by case is not an optimal choice as there are so many different types of features. Generally, in this article, we define feature X  X alue pair as the unified expression for the feature and its corresponding value of both tourists and travel packages.
 and its corresponding value of an instance in recommender systems.

In this way, a tourist or a package is just an encapsulation of some feature X  X alue pairs. We further assume that the interactions between tourists and packages are decided by their feature X  X alue pairs. Therefore, the instances in recommender systems (i.e., tourist, package, and travel record) can be abstracted to each Object by a collection of feature X  X alue pairs. Formally, we define Object in recommender systems as follows: pairs, which is an abstract description of an instance in the real world.

Generally, Object in recommender systems can be user, item (i.e., package in this arti-cle), or relationship between users and items. A travel record shows that a user chose a package at a certain time, so that the travel record X  X  feature X  X alue pairs are built from the feature X  X alue pairs of tourist, package, and travel time. For example, for Alice, who is referred to in Section 1, one of her travel records can be represented as {Name:Alice, Age:20, Gender:female, Days:1, Area:Hong Kong, Season:summer, Year:2011}, where each feature X  X alue pair is shown in the  X  X eature:value X  style.

Based on these definitions, all types of features can be represented simultaneously and uniformly, and new feature X  X alue pairs could be added dynamically and naturally. Meanwhile, in this way, the contributions of all the feature X  X alue pairs for each Object can be computed, rather than considering them case by case. It is obvious that the way to discover the relationships/similarities among Objects is the most important step. A common method is to directly compute the similarity of tourists feature X  X alue pairs, but it ignores the possible relations among these feature X  X alue pairs. For this reason, we propose two different models, the Object-Oriented Topic Model (OTM) and the Object-Oriented Bayesian Network (OBN), to capture both the relationships among Objects and the latent relations among these feature X  X alue pairs. Both of the models are proven to be effective in the experiments. Note that these two models also have their own unique characteristics: OTM can help developers select useful features, while OBN has better recommendation results and consumes fewer computing resources. In the following three sections, we first propose the OTM and OBN models respectively, and then present the whole working process of the ORS framework based on OTM or OBN. For the purpose of illustration, Table III lists some mathematical notations. In this section, we introduce the way to represent the Objects by a topic model for identifying correlations and relationships among feature X  X alue pairs. There are several reasons that we propose a topic model. First, a topic model can effectively explore tourists X  interests from the historical travel records [Liu et al. 2011]; that is, it helps understand the Objects by their latent topics. Meanwhile, following the strategies in Liu et al. [2011], Blei et al. [2003], Rosen-Zvi et al. [2004], McCallum et al. [2007], and Bao et al. [2010], the similarity between different Objects (e.g., packages and tourists) can be measured.

In recommender systems, the recommendation list is dependent on the interests of the given user. Because users X  interests are usually implicit, researchers can only explore them from the historical records [Adomavicius and Tuzhilin 2005]. Specifically, for a given tourist, his or her travel interests will be explored from the prior travel records. As discussed in Section 2, the travel record can also be encapsulated into an Object, which is a collection of feature X  X alue pairs. Meanwhile, a tourist may have traveled once or many more times, so his or her records include a number of different feature X  X alue pairs. Note that each tourist is also an Object in the ORS framework; therefore, the feature X  X alue pairs representing the tourist are composed by three parts: the personal profiles of the tourist, the attributes of the travel packages traveled by the tourist, and other feature X  X alue pairs recorded in his or her travel history. Then, the problem becomes how to measure the travel interests of the tourists by these feature X  value pairs. Considering that an Object is a collection of feature X  X alue pairs and a document in the topic model is a collection of words (i.e., bag of words) [Blei et al. 2003], the idea of projecting words into latent topics by topic models for finding the correlations between words can also be adopted for representing Objects and discovering feature X  value pair correlations. Then, the tourists X  travel interests can be mined, and the similarity between tourists will be computed.

Actually, topic models are generative models that have been successfully used for document modeling [Blei et al. 2003; Rosen-Zvi et al. 2004; McCallum et al. 2007]. In addition, Bao et al. [2010] developed an LDAC (Latent Dirichlet Allocation on Context) model for mobile user modeling where they chose the similar feature X  X alue pair rep-resentations. Recently, Agarwal and Chen [2010], and Liu et al. [2011, 2012] indicated that topic models can also be used for recommender systems. Generally, topic models assume that there are several topics for a corpus D , and a document d in D can be viewed as a bag of words w d , i , which are generated by these topics. Intuitively, if we take the feature X  X alue pairs as words, the Object (e.g., tourist) as the bags of feature X  value pairs, and the latent travel interests as topics, we can take advantage of topic models to learn tourists X  implicit interests.
 However, there are two key differences between traditional topic models and our Object modeling. First, the words in traditional models are just dependent on the distribution of the topics. In our scenario, the occurrences of the values are dependent on both the latent topics and the corresponding features. Actually, for generating a feature X  X alue pair, both the topic and the feature will be decided first, and then the corresponding value of the feature can be generated by the joint distribution of the topic and the feature. For instance, assume that there are 100 tourists, 40 of them have traveled in Hong Kong, 50 of them are young tourists, and 30 of the young tourists have traveled in Hong Kong. Without the feature  X  X ge, X  it is induced that tourists have a probability of 0 . 4 on the topic  X  X o to Hong Kong. X  If we take the feature  X  X ge X  into consideration, the probability of young tourists enjoying  X  X oing to Hong Kong X  increases to 0 . 6. Therefore, for a given tourist, if the related feature (e.g., age) and the corresponding value (e.g., young) are known, the estimation of his or her latent interest can be more accurate. Second, because the interests of the tourists are time sensitive, we consider the annual change of tourists X  preferences. For example, if we make recommendations for a tourist in the year 2010, it is inappropriate to recommend the package that he or she may like in 2007. Thus, we split the travel records by year for understanding and emphasizing the annual travel preferences of the tourists. Along this line, we extend the existing topic models [Bao et al. 2010; Liu et al. 2011] for the Object modeling.

Based on this discussion, we develop OTM, where feature X  X alue pairs are treated uniformly (except for the feature  X  X ear, X  and the reason has been given previously). Mathematically, the generative process corresponding to the hierarchical Bayesian model of OTM is shown in Figure 2, where shaded and unshaded variables indicate observed and latent variables, respectively.

In OTM, a specific document d ij ,oneofthe N documents in the travel record set D , is decided by U i and Y j , and it contains all the travel information (represented by a collection of N d feature X  X alue pairs) that tourist U i traveled in year Y j . As a result, the topic distribution of document d ij represents the interests of tourist U i in year Y j . For finding the latent topics in the corpus D , we first consider the document generation process. Specifically, we take the generation of the n th feature X  X alue pair ( f n ,v l )for d ij as an example. This process is as follows: (1) Choose  X  ij  X  Dirichlet (  X  ) . (2) Choose  X  k , f (3) Choose  X  ij  X  Dirichlet (  X  ) . (4) For the n th feature X  X alue pair ( f n ,v l )in d ij :
Similar to the LDA model [Blei et al. 2003], given the parameters  X  ,  X , and  X  ,we can obtain the marginal distribution of a document d ij with N d feature X  X alue pairs: where P ( U i )and P ( Y j ) stand for the probability of choosing tourist U i and year Y j , respectively. As these two values are constants and they can be directly computed from the travel records, in the following we omit them for better illustration. Then, taking the product of the marginal probabilities of single documents, we can obtain the probability of the entire travel record set D : For the inference purpose, we exploit the Gibbs sampling method [Griffiths and Steyvers 2004], a form of Markov chain Monte Carlo, to extract a set of topics from a large set of traveling records. During Gibbs sampling, the generation of each feature X  value pair token for a given travel record depends on the topic distribution of the corresponding tourist X  X ear pair and the value distribution of the topic X  X eature pair. Finally, the estimations of  X  ,  X , and  X  given the training set can be calculated by where n ijk is the number of the feature X  X alue pair tokens assigned to topic T k and tourist X  X ear pair ( U i , Y j ), n ijm is the number of the corresponding feature of the m th feature X  X alue pair in document d ij decided by U i and Y j ,and n kml is the number of the value v l assigned to topic T k and feature f m .

During Gibbs sampling, the more frequently two feature X  X alue pairs co-occurred, the more likely for them to be assigned by the same topic. Then, after the Gibbs sampling, all the tourists can be represented as different topic distribution vectors. By computing the similarity of their topic distribution vectors, we can find the similarities among the tourists. However, we should note that the inference of the OTM model is very time-consuming, and the computation cost will be higher if the travel records become larger. Since the travel topics evolve very slowly, we can update the inference process periodically in an offline manner.

In addition, there are other benefits of OTM. First, we can find the important feature X  value pairs for each topic. One step further, we make a detailed analysis in Section 7 about how to find the most important features by OTM. Also, it should be pointed out that new features can be added without any extra burden. Since the feature X  X alue pairs are processed as the words and the number of words nearly has no effect on topic models, this means OTM can harmoniously and almost unlimitedly import additional information. And last, similar to traditional topic models, the topics extracted by OTM are composed by feature X  X alue pairs, and thus these topics can be visualized, are explainable, and are easy to understand. OTM shows its capability in extracting hidden tourist interests as topics from ad-ditional information. However, there are still limitations to apply OTM in practical applications. The first and most important one is the high time consumption of es-timating a topic model. Although the training process can work offline, it still needs much computation as the tourist number increases. These limitations motivate us to find a simpler and more efficient method for discovering the relationship among feature X  X alue pairs. In this section, we propose the OBN model. Similar to OTM, the OBN model also can be used for finding the relationship among tourists and packages. However, OBN does not explain the reason that tourists choose packages by extracting some latent topics. Alternatively, it builds a Bayesian network [Breese et al. 1998] for tourists, packages, and feature X  X alue pairs to directly infer the probability of tourists X  cotravel; that is, OBN builds a hybrid Bayesian network, where the nodes can be the tourists, packages, or feature X  X alue pairs.

Bayesian models have been used for recommendation before. For instance, Breese et al. [1998] represented each item as a node in a Bayesian network, where the states of each node correspond to the possible rating values for that item. Similarly, Harvey et al. [2011] also proposed a Bayesian latent variable model for rating prediction. To the best of our knowledge, both of these Bayesian models are used for rating estimations rather than ranking prediction or travel package recommendation.

Before introducing the OBN model, we consider some simple scenarios. For example, as we have discussed in Section 2, we can draw assumptions like  X 40% of elders travel in fall X  and  X  X lice travel to Hong Kong with a probability of 90% X  by analyzing statistical data from the travel logs of elders or Alice. It is also easy to get similar results for other tourists from the travel logs. Actually, for a specified tourist, the travel package chosen by him or her is dependent on both his his or her personal attributes (e.g., age and gender) and the features of the travel package (e.g., price and season). Thus, we can consider the choices between tourists and packages as the choices of feature X  value pairs. Along this line, given the travel records, we learn the chosen probability between tourists and packages by maximum likelihood estimation (MLE). Here, we use P ( f v p | f v u ) to denote the probability of tourists with feature X  X alue pair f v u choosing packages with f v p :
With tourists being treated as one class of Object and travel packages as another, these two classes of Objects could link to each other through their features. Thus, a two-level Bayesian network as shown in Figure 3(a) can be built in which feature X  X alue pairs f v u belonging to tourists are the nodes of the first level and f v p are the second. If we want to know how likely tourist U i is to choose package P j , we can compute the probability P ( P j | U i ) by the following equation:
However, there are still some limitations. First, P ( P j | U i ) shares the same value for different tourists as long as they have the same feature X  X alue pairs. Second and more importantly, directly calculating P ( P j | U i ) ignores the influence from other tourists, which is the key factor that has been addressed by the idea of collaborative filtering [Resnick et al. 1994; Sarwar et al. 2001].

Thus, we propose the OBN model to directly infer the cotravel probabilities among tourists, rather than the chosen probability from tourists to travel packages. For solving the first limitation, we can define P ( f v p | U i ) denoting the probability of tourist U i choosing packages with feature X  X alue pair f v p : P ( f v p | U i ) is a personal probability for each tourist. In the OBN model, tourists, rather than feature X  X alue pairs, are the first-level nodes.

For the second limitation, instead of the direct inference from tourists to travel packages, we consider calculating the cotravel probability P ( U i | U j ) (i.e., the probability that when U j is traveling, U i also travels with him or her). We can calculate a weighted sum as final probability, which contains personal and global influence for each tourist: where the conditional probability P ( U i | f v p ) means the probability that tourist U i appears in the travel records of the packages having feature X  X alue pair f v p .Inthe right of previous equation, the first part is the global probability that U j travels with tourists having the same feature X  X alue pairs as U i , the second part is the personal probability that U j travels with U i ,and  X  is the weight, that is,  X   X  [0 , 1]. For collaborative filtering, P ( U i | U j ) can be considered as the similarity of U i and U j , Sim ( U i Figure 3(b) and Figure 3(c) show the global and personal probability of the cotravel, respectively.

It is easy to understand the OBN model, which is a simple and intuitive Bayesian network, and we can infer the relationship among feature X  X alue pairs or tourists just using the co-occurrence time of them. It can be implemented easily and updated in real time by just modifying the co-occurrences X  time. Therefore, this is a possible model to be adopted by large-scale practical recommender systems. Having said that, in this article, we propose a recommendation framework, named Object-Oriented Recommender System (ORS), which is very flexible and effective in terms of incorporating multiple types of additional context information represented by feature X  X alue pairs. In this section, we show the way to apply the ORS framework for travel package recommendation, so as to take full advantage of the feature X  X alue pairs and the Object. We hope ORS could help developers attract tourists before they make a travel decision (e.g., by email marketing). Generally speaking, the working process of the ORS framework is as follows: (1) Extracting feature X  X alue pairs from the raw travel records and segmenting con-(2) Encapsulating instances (e.g., tourists) to be Objects, with the feature X  X alue pairs (3) Developing models (i.e., OTM or OBN) for discovering similarities among tourists; (4) Generating the recommendation/ranking results by the annual collaborative filter-(5) Refining the recommendation list, that is, adding the new packages into the list by Figure 4 shows the flowchart of the ORS framework, where the OTM and OBN model are interchangeable because they both output the tourist similarities. Since the details of the OTM and OBN model have been described in Section 3 and Section 4, in the following, we introduce the techniques used in other steps. To describe the Object, seven major features are extracted from the raw travel data; these features are Age and Gender from tourists; Area , Price, and Days from travel packages; and Season and Year from travel records. Each feature represents one contextual characteristic of an Object. The age and gender describe the personal at-tributes; area is about geographical location; price and days are about the financial and time cost, respectively; and season and year show clearly the travel time, and season also suggests the macro-climate conditions. Then we consider the value range of these features in Table IV. While the sematic values of gender, days, and year are easy to understand, in the following, we show the technical way to segment the continuous values of the rest of the features into categorical values.

Area. We cannot simply view each city or province as an area because it will be too detailed and lead to the overfitting problem. In contrast, a coarse partition of the space will lead to the loss of spatial information. Thus, we divide the entire location space in the dataset into seven big areas according to the travel area segmentations provided by the travel company, which are South China (SC), Center China (CC), North China (NC), East Asia (EA), Southeast Asia (SA), Oceania (OC), and North America (NA). The area segmentation results are shown in Table V.

Season. We assume that the travel packages have a relatively stable distribution in each season. Then, we use an information gain-based method [Fayyad and Irani 1993] to get the season segmentation. The information entropy of season S P is given and p i is the proportion of package P i in this season. Initially, the entire year is viewed as a big season and partitioned into several seasons in a recursive binary way. In each iteration, we use the weighted average entropy (WAE) to find the best split: where S P 1 ( i )and S P 2 ( i ) are two subseasons of season S P when being split at the i th month. The best split month induces a maximum information gain given by E ( i ), which is equal to Ent ( S P )  X  WAE ( i ; S P ). As a result, January and February belong to winter, March to May are spring, June to September are summer, and the rest of the months are fall. The result is consistent with the prior knowledge that all the tourists in this data are from Southern China.

Price. Similar to season segmentation, we divide the prices of the packages based on the variance of prices in the travel data [Yuan et al. 2010]. The split result is as follows: very low price is (0 , 243]; low is (243 , 664]; medium is (664 , 1 , 740]; high is (1 , 740 , 5 , 478]; and very high price is higher than 5,478; the unit is RMB (CNY). The adopted methods for area, season, and price segmentations are similar to that in Liu et al. [2011].

Age. We divide the ages of the tourists using a similar method as the price segmenta-Middle: &gt; = 30 and &lt; 60; Old: &gt; = 60. Based on extracted feature X  X alue pairs of each Object, we use the OTM or OBN model to obtain the relationships among tourists. In this article, the whole travel record of a tourist in 1 year is treated as an Object. Thus, we can compute the similarity between each tourist in the specific year, and collaborative filtering can be adopted for generating the personalized candidate package set for each tourist.

Intuitively, in the collaborative filtering, for a given user, we recommend the items that are preferred by the users who have similar interests with him or her. However, the travel package recommendation is more complex than traditional ones. For a given tourist, we should find his or her nearest neighbors by ranking their similarity values and recommend the packages that are liked by the neighbors in the specific year. Thus, the packages that are favored by these neighbors but have not been traveled by the given tourist can be selected as candidate packages that form an initial recommen-dation list, and they are ranked by the probabilities computed by the collaborative filtering.

For OTM, we have obtained the annual topic distribution for each tourist, which is represented in vectors with the same length. For computing the similarity between tourist U m and U n in year Y j ,weuse correlation coefficient [Resnick et al. 1994], a simple but effective technique: tourist U m has never traveled in year Y j , then his or her total topic distribution  X  U m is used as an alternative throughout this article.
 For the OBN model, we have Sim ( U m , U n ) = P ( U m | U n ) from Section 4. We consider Age , Gender, and Year as the features belonging to tourists (i.e., f v u ), and Area , Price , Days, and Season as belonging to packages (i.e., f v p ). Thus, the annual simi-larity for tourists can be calculated, when the year is given: Sim Y When calculating P Y given year Y j . We introduce the way to refine the recommendation list so as to recommend new packages for alleviating the cold-start problem. For the travel data, as we have explored in Section 2, new packages are created every year and most of the active packages are the new ones. Since the packages are composed by the landscapes, and most of the landscapes will keep in use even after the original package has been discarded [Liu et al. 2011], we can compute the similarity between any pair of packages as follows: where L P pute the similarity between the new package and the given number (e.g., 10) of can-didate packages in the top of the recommendation list. Then, new packages are added into the recommendation list and the ranks of these new packages are based on the average probabilities of the similar candidate packages. Finally, after removing the packages that are no longer active, we will have the final recommendation list.
We can see that the ORS framework follows the hybrid recommendation strategy and combines many factors. Thus, the challenges mentioned in Section 2 could be addressed; for instance, the data sparsity is alleviated by importing additional context information while the recommendation effects of this context information is learned systematically and cost-effectively (by either OTM or OBN), and the time dependence is considered by including new travel packages into the recommendation list. In this way, the ORS framework is an open and effective framework in terms of incorporating additional context information as feature X  X alue pairs. In this section, we evaluate the performances of the ORS framework. For convenience, we use ORS-OTM and ORS-OBN to stand for the ORS framework with the OTM and OBN model separately. Because the OTM model is a topic model, we also demonstrate the predictive power of the OTM model measured by the perplexity value and the understanding of the topics extracted by the OTM model. Experimental Data. The dataset was divided into a training set and a test set. The last travel record of each tourist was chosen to be part of the test set, and the remaining records were used for training. In total, there are 5,211 tourists and 18,140 travel records for 805 packages in the training set, and 5,211 travel records and 601 travel packages for testing. There are 103 new packages traveled by 387 tourists in test set.

Benchmark Methods. For the recommendation evaluation, we compare with the following methods:  X  X hree similar frameworks based on topic models: LDA-P, LDA-L, LDA-F, which take the packages, landscapes, and feature X  X alue pairs as words, respectively, in the LDA model [Blei et al. 2003]. After the LDA model has been trained, the user-based collaborative filtering method is used for recommendation and the user similarities are based on the vector similarity of the latent topic distributions.  X  X eanwhile, we implemented the user-based collaborative filtering method (UCF-P) [Resnick et al. 1994], the item-based collaborative filtering method (ICF-P) [Sarwar et al. 2001], and the hybrid collaborative filtering method (HybridCF) [Li et al. 2005] for collaborative filtering.  X  X ince UCF-P and ICF-P only consider package-level information, for making a more fair comparison, we implemented two similar methods based on feature X  X alue pairs (UCF-F, ICF-F). Specifically, in UCF-F or ICF-F, we just calculate the set (collec-tion of feature X  X alue pairs) similarity between tourists or packages for collaborative filtering. And in UCF-P or ICF-P, the set is a collection of packages or tourists.  X  X e also compare ORS with the Cocktail recommendation approach based on the
TAST model [Liu et al. 2011].  X  X t last, we implemented the Always-Choose-Most-Popular method (MostPop) and a Bayesian Network classifier (UIBayes) based on Figure 3(a). The UIBayes model uses tourist and package features for input and the output is the probability that is given tourist chooses this package.
 All the aforementioned methods (UCF-P, ICF-P, UCF-F, ICF-F, LDA-P, LDA-L, LDA-F, HybridCF, Cocktail, MostPop, UIBayes) are the benchmarks. We adopt degree of agreement (DOA), Top-K, Normalized Discounted Cumulative Gain (NDCG), and Novelty as the evaluation metrics. All of them are commonly used, and they characterize the recommendation results from different perspectives, noting that the bigger the metrics are, the better. Also, we conduct a user study and let volunteers rate the recommendations.

DOA measures how many item pairs are ranked in the correct order [Fouss et al. 2007; Liu et al. 2012]. Let N U set nor in the test set of tourist U i ,and T U set. The function correctOrder U P , otherwise 0. Then, the individual DOA for user U i can be defined as follows: An ideal ranking list will lead to a 100% DOA, and we use the average DOA of all DOA U
Top-K indicates the effectiveness of the recommendation in a cumulative way [Koren 2008]. Let H i denote the number of hits to the test set of user U i ,and K means the selected top K % travel packages of all; the Top-K is defined as follows: NDCG evaluates the quality of a ranking result in information retrieval by assigning graded content relevance judgments [Xie et al. 2010; Liu et al. 2011]. The NDCG metric assumes that packages with higher correlation should have higher ranks in the recommendation list. In this article, we compute the content relevance of two travel packages R ( P i , P j )as package P i . Thus, the NDCG value at the k th position of the ranking list for a given tourist can be computed by: where P t is the test package, RL is the ranking list, and IRL is the ideal list.
Novelty can be seen as the ability of a recommender to introduce users to items that they have not previously experienced before in real life [Zhou et al. 2010]. We measure novelty with a metric introduced in Zhou et al. [2010]: item i in training set. For new packages, we set c i = 1. R uk gives the top k recommended items for user u . In the experiments, k ranges from 1 to 30.

User study. Since high ranking accuracy may still lead to a low-quality recom-mendation, we also conducted a user study and collected some extra data (volunteer feedback) to make the evaluation more reliable. The topic models are often evaluated by perplexity for measuring the goodness of fit. The lower in perplexity a model is, the better it predicts the new documents [McCallum et al. 2007]. When the tourist U i and the travel year Y j are given, the perplexity of an unseen travel record d ij including feature X  X alue pairs P d
For the fitness purpose, we compare OTM with the three topic models LDA-P, LDA-L, and LDA-F. We choose the fixed Dirichlet distributions with  X  = 50 / T and  X  = 0 . 1for these topic models, and these settings are also used in the existing works [Griffiths and Steyvers 2004; McCallum et al. 2007; Liu et al. 2011]. In the experiments, the Markov chains were run with different initializations, and the samples at the 1,001th iteration were used to estimate  X  and  X  . The average information rate (logarithm of perplexity) with different numbers of topics in the dataset is shown in Figure 5. As shown in the figure, OTM has significantly better predictive power than three other models. Among them, LDA-P performs the worst, because the information that LDA-P takes into consideration is the least. In contrast, LDA-L performs much better than LDA-P, and this again demonstrates the fact that landscapes are more useful and important than the packages themselves [Liu et al. 2011]. Here, we mainly focus on studying the relations between the topics and their charac-teristics from the Objects for better understanding the mined travel topics.
Table VI shows the feature X  X alue pairs with the highest probability from six topics in OTM trained with 200 topics. We choose these six topics from a 2-year period, so that we can see the topics are changed over time but still keep some similarities. For example, let us look at Topic 20 in 2008 and Topic 11 in 2009; they are all about the area of North China, but the price is higher and the number of days is shorter in 2009. Also, if we focus on a certain tourist group, such as middle-aged female in Topic 11 and 12, we can find that this group has two different types of consumption tendency. Then, different groups with different characteristics also have different travel interests. As shown in Topic 35 and 55, some older men tend to travel in Southeast Asia in spring, and some middle-aged women like to spend more time in the summer in Southeast Asia. This observation agrees with the statistical results as shown in Figure 1(b). Based on the correlations among the feature X  X alue pairs, all the topics can be understood as the latent interests of tourists. This suggests that OTM can precisely capture the user preferences. In this subsection, we present the performance comparison on recommendation effects between ORS and the benchmark methods. For the purpose of comparison, we fix topic = 200 for LDA-F, LDA-L, LDA-P, and ORS, because the variances of perplexity become less obvious since then, as shown in Figure 5. We also set the nearest-neighbor size of UCF as 1,000, and 500 for ICF. For the ORS-OBN method, we set the weight  X  as 0 . 5; that is, the global and personal probability are of equal importance. This compromise value is based on the results shown in Figure 6. As shown in Figure 6, when the weight  X  changes from 0 to 1, DOA remains approximately constant, while Top-K-10 and NDCG@ 10 are maximized near  X  = 0 . 5. Thus, the weight  X  = 0 . 5isa compromise solution.

DOA. The average ranking performance of each method is shown in Table VII, where we can see that both ORS-OBN and ORS-OTM outperform the benchmark methods, and ORS-OBN is the best one. However, other methods that consider additional in-formation (LDA-F, LDA-L, UCF-F, ICF-F, UIBayes) perform worse than traditional methods (UCF-P, ICF-P, HybridCF). As we have mentioned previously, properly incor-porating additional information into the recommendation model is not a trivial task.
Top-K. In addition, the cumulative distribution of Top-K ranking performances of each method is plotted in Figure 7(a). As shown in this figure, ORS-OBN still outper-forms other methods, and the improvement for each k is very significant; ORS-OTM is the runner-up. The Top-K result is very similar to the DOA result. Note that the result of HybridCF suggests that the hybrid methods based on both items and users have better recommendation quality than the collaborative filterings just based on either user or item. Please also note that there exists a leap in the lines of some benchmarks; this is because there are new packages that are not covered by the methods and they are given the same default rank. In summary, these methods focus on mining the re-lationships between tourists and travel packages, such as ORS-OTM, ORS-OBN, and Cocktail, which can get better results than other methods.

NDCG. We consider the NDCG scores for different algorithms as shown in Figure 7(b) with k = 1 ,..., 30. Different from DOA/Top-K, in this metric, ORS doesn X  X  perform the best and item-based collaborative filtering methods (i.e., ICF-F, ICF-P) become the worst ones. However, UCF-F performs the best, and UCF-F is the user-based collabo-rative filtering by feature X  X alue pairs. This indicates that even traditional recommen-dation algorithms can benefit from the feature X  X alue pair data representation. Novelty. The evaluation result of the novelty is shown in Figure 7(c). We note that ORS-OBN, ORS-OTM, and Cocktail outperform other methods because they can con-sider new package recommendations. Among these three methods, ORS-OBN performs better than Cocktail when k is less than 20 (the top positions in the recommendation list). ORS-OTM also has a better result than Cocktail when k is less than 15. Although Cocktail is better when k is more than 20, it is even worse than ICF-F when k is less than 10, and its overall performance is not good enough. Thus, we can conclude that ORS is more likely to recommend novel packages for each tourist.

User Study. We built a demo system (B/S structure) for making recommendations to end-users (volunteers), meanwhile collecting their feedback by the database (similar to that in Liu et al. [2014]). When a volunteer enters this system, he or she is first required to report gender and age, and then chooses five candidate travel packages that he or she is most likely to buy or has already traveled. Based on this information provided by the volunteer, the system outputs and lists the top 50 recommendations of each typical algorithm (i.e., ORS-OTM, ORS-OBN, UCF-P, UCF-F, LDA-F, and HybridCF). Next, the volunteer can rate the recommendations on a 5-point Likert scale ranging from 1 (Meaningless) to 5 (Excellent). Here, volunteers conduct  X  X lind reviews X  (i.e., they have no idea of each candidate algorithm) and they rate the recommendation results from their own perspectives. Finally, the feedback is used to evaluate the performance of each algorithm. In total, we collected 504 ratings for the six algorithms (i.e., 84 for each) from 84 volunteers. The final mean ratings and the standard deviations (Std Dev) for each algorithm are shown in Table VIII. We can see that the ratings for ORS-OTM and ORS-OBN are slightly higher than others, and ORS-OBN outperforms ORS-OTM. We also applied the z-test as a statistical test; Table IX shows the results. By applying the z-test, we find that the differences between the ratings obtained by ORS-OBN and the other four benchmark algorithms are statistically significant with | z | X  2 . 60 and | p | X  0 . 005. Meanwhile, ORS-OTM is a little bit worse than ORS-OBN when compared with the other four benchmark algorithms. From the aforementioned results, we know that the recommender ORS (including both ORS-OBN and ORS-OTM) performs the best in most situations for travel package recommendation, since it could address the specific challenges existing in the tourism domain. Meanwhile, we could summarize that the two proposed models, OTM and OBN, are effective in the experiments. Furthermore, the results suggest that the performance of a recommender system should be evaluated from multiple perspectives, and the choice of a proper system depends on the properties of the specific application [Shani and Gunawardana 2009]. Also, even though the additional context information has been effectively handled (e.g., by feature X  X alue pairs), we still need to design the recommendation method carefully for getting better results. For instance, though both UCF-F and ORS-OTM take advantage of the feature X  X alue pair representation, they lead to strikingly different recommendation results. Thus, it is not a trivial task to effectively aggregate the impact of this additional context information. Although the ORS framework is more flexible in terms of incorporating additional context information, it should be considered that not all features are helpful enough for the recommendation process. For example, the age and gender of Alice may affect her choice, but her height and weight will not have a significant impact. Meanwhile, in the sampling process of OTM, the computation complexity will increase as the feature number grows. It can be concluded that if we develop a feature selection method for ORS, only the useful features will be selected and better recommendation results may be observed, and meanwhile there will be less computing expense. As a topic model, OTM has the ability to capture the information entropy of feature X  X alue pairs as words. Therefore, in this section, we further define the feature information entropy and select features based on the entropy. Information entropy is a measure of the information content associated with a random variable. In traditional topic models, each word associates with each topic by different probabilities. If we treat the word as the random variable, the word associates a topic as an event, and the information entropy of each word w can be defined as follows: where T t means the t th topic in the topic model.

In OTM, the features are fixed into the model, each feature contains some values, and each value is treated as a word in traditional topic models. Thus, the informa-tion entropy of values also reflects the information content of the associated feature. Specifically, we define the feature information entropy as the average entropy of the associated values: where v  X  f means that the feature f contains the value v . In the ORS framework, the information entropies of six features, Age, Gender, Area, Price, Days, and Season, can be computed. The results based on our dataset are shown in Table X. From the definition of the feature information entropy, it is easy to conclude that higher entropy means the feature has higher randomness related to topics (i.e., cannot distinguish different topics). For this reason, the features with lower entropy should be selected, which can make the ORS framework obtain better recommendation results and have less computing expense.

For the purpose of evaluation, we trained six OTM models using a corpus that removes one of these six features respectively (denoted as delAge, delArea, delDays, delGender, delPrice, delSeason). We also trained another two OTM models, one using the three features with higher entropies (AreaDaysSeason) and the other choosing the rest of the three features (AgeGenderPrice). We compared the recommendation results in the ORS framework of all the aforementioned eight OTM models. For comparison, all the parameters are the same as in Section 6, and we still adopt DOA, Top-K, NDCG, and Novelty as the evaluation metrics.

DOA. The average ranking performance of each method is shown in Table XI, where we can see that the models that remove the features with higher entropy can keep better results and vice versa. If treating ORS as a benchmark, removing the top three features with higher entropy, Area, Days, and Season, makes the rec-ommendation results better than the benchmark. It supports that selecting the fea-tures with lower entropy can obtain better recommendation results as we previously assumed.

Top-K. In addition, the cumulative distribution of Top-K ranking performances of each method is plotted in Figure 8(a). Similar to DOA, as shown in this figure, the models that removed the features with higher entropy can still archive better results. It should be noticed that the differentials are relatively small, and for a more clear display, we just show the Top-K results from top 2% to top 10%.

NDCG. We consider the NDCG scores for different models as shown in Figure 8(b) with k = 1, ... , 5. The same as DOA/Top-K, in this metric, features with lower entropies also have better results, especially for the AgeGenderPrice model, which only considers three features but still gets the best result when k = 3, 4, 5. This observation is consistent with our analysis in Section 2, that the features like age, gender, and price play important roles when tourists make decisions.

Novelty. At last, the evaluation result of the novelty is shown in Figure 8(c). Dif-ferent from the other three metrics, removing features leads to the results becoming worse than ORS; we think the reason is that fewer features may not be distinguishable enough to find out which package is a novel one. In this section, we defined feature information entropy for OTM and the ORS frame-work and selected the features based on their entropies. We found that there are some correlations between feature entropy and the recommendation results, and the features with lower entropy actually contain more information and thus lead to better recom-mendation results. For applying the ORS framework in practice, developers could first use OTM for exploiting selecting features and then rebuild the OBN model or OTM based on the selected features for better recommendations. Related work can be grouped into four categories. The first category includes the most relevant work on travel package recommendation. Indeed, researchers have pointed out that some additional context information of travel packages, such as the financial and time cost information, are useful for travel recommendation [Ge et al. 2011]. By considering the travel cost (the financial and time cost), Ge et al. provided a study of cost-aware tour recommendations. Specifically, they developed cost-aware latent factor models, called the GcPMF model, to learn the user/item latent features and user cost preferences simultaneously. However, the GcPMF model is a specific model that only considered the cost-related features. Also, in Liu et al. [2011], the Tourist-Area-Season Topic (TAST) model was developed. Specifically, Liu et al. noticed that the choices of tourists are related with some features of the travel packages, such as the landscapes, the travel areas, and the travel seasons. Based on these discoveries, they creatively designed the TAST model by considering these three features for travel packages representation. However, the TAST model considered each feature as an inde-pendent factor, and it is not very scalable to dynamically incorporate some other useful features.

In the second category, we introduce the related work on intelligent travel self-services [Ricci 2002]. Tourists can use these systems to free plan their tours by themselves, rather than be regulated by the travel service providers. For instance, by exploiting a set of features for each tourist X  X  specific interaction session, Ricci et al. described two case-based reasoning approaches Ricci et al. [2006a, 2006b] for travel recommendation and advisory. Researchers have also targeted providing more context-aware travel information to the on-tour tourists with mobile devices [Ricci 2011; Ricci and Nguyen 2006], which is helpful for exploring the city area. Mahmood et al. [2009] used conversational systems to autonomously improve the recommen-dation strategy and applied their approach within a prototype of an online travel recommender system. Xie et al. [2010] proposed a composite recommendation method that can give a set of points of interest for travel planning in urban region according to tourists X  budgets. Considering that the trip planning is sensitive to the scalability of travel regions, Lu et al. [2011] proposed a novel data-mining-based approach, namely, Trip-Mine, for efficiently finding the optimal trip within a travel time constraint.
Also, there is a category of research using user location history (recorded in either check-in format or GPS trajectories) to perform travel recommendations in urban re-gions. By considering the geographic information, De Carolis et al. [2009] developed a mobile recommender system that helps users make travel plans in urban regions. Also, Yin et al. [2010] proposed an automatic trip-planning framework by leverag-ing geo-tagged photos and textual travelogs. Moreover, Hao et al. [2010] proposed a Location-Topic model by learning the local and global topics to mine the location-representative knowledge from a large collection of travelogs and used this model to recommend the travel destinations. Zheng et al. [2011] proposed a framework, re-ferred to as a hierarchical-graph-based similarity measurement (HGSM), to uniformly model each individual X  X  location history and effectively measure the similarities among users; in this way, both friends and travel locations can be recommended. Zheng and Xie [2011] modeled multiple users X  location histories with a tree-based hierarchical graph (TBHG) and proposed a HITS (Hypertext-Induced Topic Search)-based model to infer the interest level of a location and a user X  X  travel experience (knowledge). Yoon et al. [2012] proposed a social itinerary recommendation by learning from GPS trajectories of both residents and travel experts in a city, which can extract meaningful knowledge about the city. Wei et al. [2012] also presented a Route Inference framework based on collective lnowledge to construct the popular routes from uncertain trajectories for helping tourists plan trip routes. With the consideration of both user preferences and social opinions, Bao et al. [2012] proposed a novel recommender system that can fa-cilitate people X  X  travel not only near their living areas but also to a city that is new to them. Zheng et al. [2010, 2010, and 2012] developed an integrated and effective mobile recommendation system including three algorithms to answer location-related queries for location-based services. Applying parallel computing technology to recom-mender systems, Lu et al. [2012] proposed a novel framework named Personalized Trip Recommendation (PTR) to efficiently recommend personalized trips meeting multiple constraints of users by mining users X  check-in behaviors.

Beyond the tourism domain, the fourth category contains the recommendation works that also exploit additional user/item features. For example, Basu et al. [1998] applied the inductive rule learner Ripper to the task of recommending movies using both user ratings and content features. Also, Basilico and Hofmann [2004] designed an SVM-like model with a kernel function that is based on joint features of user ratings as well as attributes of items or users. Singh and Gordon [2008] provided collective matrix fac-torization for modeling pairwise relational data, where users X  ratings can be encoded using relations of movies, movies X  genres, and actors X  roles in movies. Moreover, Bao et al. [2009] proposed a hybrid recommendation system that combines component rec-ommendation engines at runtime based on user/item features. Cui et al. [2010] built a Feature Interaction Graph (FIG) and employed a probabilistic model based on Markov Random Field to describe the FIG for similarity measure between multimedia Objects. Agarwal and Chen [2010] proposed fLDA, another matrix factorization method to pre-dict ratings in recommender system applications. Finally, for academic collaboration recommendation, Tang et al. [2012] proposed the Cross-Domain Topic Learning (CTL) model to highlight the existing relationships of authors through implicit topic layers and publications.

However, these methods from other application domains cannot be directly applied to the tourism domain because of the unique characteristics of the travel data. Meanwhile, the tour recommendation approaches follow a case-by-case manner, and they lack a systematic and open framework to dynamically incorporate multiple types of additional context information. More importantly, to the best of our knowledge, none of the existing methods try to provide Object-oriented travel package recommendations. In this article, we provided the Objected-Oriented Recommender System for travel package recommendation. The ORS is an open framework and has the ability to sys-tematically and cost-effectively incorporate all the available context information.
Specifically, we first analyzed the multiple types of contextual factors from both travel packages and tourists, and these factors can be uniformly represented as feature X  X alue pairs. Then, we proposed the concept of Object, which is the collection of feature X  X alue pairs. Based on the Object-oriented ideas, we proposed two novel models; both of them can extract the implicit relationships among Objects by using the additional context information. By considering the correlation as the latent topics hidden in the collection of feature X  X alue pairs, we first designed an open topic model, the Objected-Oriented Topic Model, to represent the Objects and identify the tourists X  hidden travel inter-ests. For the efficiency issue, we then proposed another Bayesian network model, the Objected-oriented Bayesian Network, which can quickly infer the cotravel probabil-ity of two tourists. Based on the relationships mined by OTM or OBN, the nearest neighbors for each tourist can be found and the recommendation list is generated by the collaborative filtering method. We evaluated OTM, the OBN model, and the ORS framework on real-world travel data. The experimental results demonstrated that the ORS framework can lead to better performances for travel package recommendation by incorporating many additional factors than several state-of-the-art methods. Finally, we defined feature information entropy for measuring the importance of features, and thus selected the features based on their entropy to achieve the goal of using fewer features while getting better recommendation results.

Note that there are still many possible directions left for future research. For ex-ample, the ORS framework is now mainly focused on travel package recommendation. In the future, we plan to extend it to a more general solution for recommendation scenarios in some other application domains.

