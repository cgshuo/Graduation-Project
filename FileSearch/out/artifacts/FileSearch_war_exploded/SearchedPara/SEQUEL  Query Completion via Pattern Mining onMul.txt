 In this demonstration, we propose an interactive query completion system on structural data like DBLP, called SEQUEL. It is novel in several aspects: with patterns mined on the structural data us-ing newly devised algorithm, SEQUEL offers high-utility comple-tions composed with not only words but also phrases, and requires no explicit indications of corresponding columns. Instead of us-ing query logs exploited previously for unstructured data, more ef-fective completions are provided based on patterns mined directly from the records. Moreover, an effective index structure helps SE-QUEL respond fast at millisecond level for each keystroke. Categories and Subject Descriptors: H.2.8 : Database Manage-ment -Database applications[Data mining]; H.3.3 : Information Storage And Retrieval -Information Search and Retrieval Terms: Algorithm, Design Keywords: Pattern Mining, Query Completion, Structural Data
For query completion, many studies have been conducted. Based on the form of the suggested contents, some suggest single terms [6, 3, 2, 4] while others suggest phrases [1]. In the aspect of sug-gestion model, some generate suggestions through knowledge dis-covered from the query log [1], while others explore the underlying data directly [3]. Moreover, the existing works explore on different kinds of data source for retrieval. Some focus on the unstructured data, like web pages in Google Suggestion, and others focus on the structural data, e.g. DBLP in [3].

In this demonstration we proposes a novel system SEQUEL, to provide efficient and effective query completion over structural data. Comparing with other state-of-the-art systems, SEQUEL has several salient features. Instead of exploring query log, SEQUEL suggests phrases using patterns mined directly from underlying data collection, which generally indicate meaningful topics, like  X  X re-quent pattern mining X  and  X  X uery processing X  mined from DBLP, and often provide more information to formulate high-quality queries comparing to single terms. Besides, suggestions based on query log depend mainly on the amount and the quality of the query log which is not easy to be assured, especially on structural data. Since different columns could not be identified easily due to the incom-pleteness of query log, and in many cases it is even unavailable due to privacy consideration or nonexistence. Besides, SEQUEL offers a user-friendly suggestion process, with no necessity to explicitly distinguish different data columns and users could enjoy a flexi-ble input experience. While for previous systems like Complete-Search, special prefixes like  X  X enue: X  for specific columns need to be inserted explicitly before the corresponding terms. To our best knowledge, it is the first attempt to suggest phrases over structural data according to patterns directly mined from the data collection without losing structural information. In addition, mining desired patterns and providing completions efficiently are big concerns. In our system, we devise a new pattern mining algorithm working on multi-column data based on [7]. On-the-fly mining of infrequent patterns is also incorporated to discover the infrequent but useful patterns in sub-search spaces. With the help of high-performance index structure inspired from [5], our system responds very fast in millisecond scale when only one column is involved, and uses at most half second with extremely complex column combinations.
As indicated in Figure 1, our system consists of two parts. In the offline part, we mine frequent patterns directly from the orig-inal data, and index them in respective tries. Query completions on incomplete user input are suggested in the online part. We first try to match greedily on each column index and get patterns for each possible column combination, then top-k patterns from all last-matched columns are selected and displayed.
The underlying pattern structure could be viewed as a record composed of several different fields. Due to different column prop-erties and meanings in original data source, each field of the pattern could be different sub-patterns like a single-item pattern, an item-set pattern of several different items, or even a sequence pattern of several ordered items. For example, in DBLP a discovered pattern consists of one sequence sub-pattern on Title field, one item sub-pattern on Venue field, one item-set sub-pattern on Authors field, and one item sub-pattern on Year field. The compound pattern also shares an unique id and a frequency value. For example, we have the following pattern on DBLP: indicating that title phrase  X  X atterns X  appears 10 times with the au-thors  X  X iawei han X  and  X  X ong cheng X .
We apply trie as the underlying index structure for each of the column in the original data, which has been used in [5] for word-level index to provide interactive search on DBLP. A phrase-based variant is applied in our system. Each phrase is represented by one unique path started from the root, with each intermediate node denoting one character. Between each word, there is a blank node denoting a blank character. The end node of each phrase contains one inverted list of IDs of the corresponding phrase.
As Figure 1 shows, the basic idea of our suggestion process is to search the indexes of each column, find at least one combina-tion (matching order) of columns 1 matching on the input query and suggest on the predicted last inputting column. The column matching is greedy and it attempts to match as more words as it could. For example, a query text  X  X ww da X  may be matched in the following two combinations: where the first row indicates a single Title phrase  X  X ww da X , and the second row predicts that  X  X ww X  is a Venue name and  X  X a X  is an incomplete Title phrase.

Given one column matching order, we need to find top-K com-pletions on the last predicted column with the current text on that column as prefix, listed in descending order of ranking scores. Each completion is actually one trie-tree node on the last column trie in-dex. To determine the applicable trie-nodes, we first take the in-tersection of all inverted lists of matchings on each column except the last one, then suffixes on the last-column trie with one of the formerly-intersected pattern IDs in inverted list are selected. Take the second matching order described above as an example: we first get the pattern IDs of the matched venue  X  X ww X  (i.e, 3, 4, 8, and 10), then all suffixes of phrase  X  X a X  like  X  X ata X  and  X  X ata web X  are selected, since their ID lists contain 3 and 4 respectively.
Mining on multiple columns is a non-trivial problem. We may first mine single column patterns and then join them together for patterns on whole structural data. But the runtime cost will be really huge. Instead, we could use sequence mining algorithm to solve this problem indirectly. There are already several algorithms for mining sequence patterns, like PrefixSpan [7]. However, our sys-tem needs to further support building trie index structure simulta-neously during the mining process. Hence, a customized sequence mining algorithm is devised. Besides, due to the high complexity of the sequence mining algorithm, it is not feasible to mine directly the patterns with very low frequency like 2 or 3, and we could only dis-cover those relatively frequent patterns with a minimum frequency threshold under which the algorithm could finish in an acceptable time. Hereby we further incorporate an on-the-fly mining strategy to discover infrequent suffix patterns in need. When the recom-mendation quantity is less than a threshold, we attempt to mine in the sub-pattern space in a top-k manner. Since the original offline minimum frequency threshold is relatively small (In our system it is 10 on DBLP), the on-the-fly mining could be accomplished very quickly or even instantly.
We would like to present a demonstration showing how to pro-vide interactive query recommendations on structural data like DBLP via pattern mining technology, in a user-friendly manner typing in a single input form without additional auxiliary information. A sim-ple (one input form) but powerful (on multi-column structural data) Web-based user interface (as shown in Figure 2) is provided show-ing not only the efficiency but effectiveness of our system on com-plete DBLP data source. Besides the demonstration, our system de-sign and architecture would also be presented. The online demon-stration is available on http://dbgroup.cs.tsinghua.edu. cn/chuancong/sequel/ .

