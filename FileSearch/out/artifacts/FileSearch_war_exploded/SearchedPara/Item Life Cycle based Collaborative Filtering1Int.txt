 Recommender System (RS) has become an important feature in modern websites, such as movie rec ommendations (MovieLens, Netflix, Youku), product recommenda-tions (Amazon), and music recommendations (Last.fm, NetEase Music). Due to its high accuracy, good scalability, and the ability of executing without content analysis, collaborative filtering (CF) [ 1 ] has been widely used in recommender systems. Alt-hough there have been various recommendations and display methods for CF -based systems, the general idea is all that users who share common interests in the past would still prefer similar items in the future [ 2 ].

Although CF -based recommender systems are the most commonly u sed methods for personalized recommendations, these approaches often suffer from several short-comings, such as cold start and interest shift. Traditional collaborative filtering meth-ods consider that user X  X  preference for a specific item or item X  X  populari ty (public interest of an item) does not change with time. But in real life, user X  X  preference for an item fluctuates over time and item X  X  popularity is constantly changing as new se-lection emerges, which raise unique challenges. The existing time -aware mo dels have largely focused on predicting future rating value for a user -item pair by using time dynamics. Xiang et al [ 3 ] proposed a Session -based Temporal Graph re commendation method in which simultaneously models users X  long -term and short -term preferences over time. Koren [ 4 ] took both overall time and segmentation time int o account, and put forth a timeSVD++ model to learn user X  X  preference for items. Though the above works considered the preference shifting of a single user and improved the perfor-mance of classic recommenders in terms of precision, they did not take the po pularity of recommended items into account. Consequently, these methods always recom-mended items which are already out of fashion to the users [ 5 ]. As a matter of fact, an important issue affecting the recommendation results was the popularity of the items [ 6 ]. Lately, some works have been propounded to provide recommendation s based on item X  X  popularity. Liu et al [ 7 ] proposed a TimeKNNCF in which a new similarity function is defined based on the concept of Importance Degree of Item nam ed IDOI. Pera and Ng [ 6 ] introduced GroupReM recommendation model which makes movie recommendations appealing (to a certain degree) to members of a group by consid er-ing the popularity of movies at a movie website. Zou [ 8 ] proposed a popularity based recommendation algorithm in Twitter. He suggested that the popularity of twe ets can be measured by the value of user X  X  authority, while he ignored the fact that the popu-which provides novel recommended items to users by forecasting item X  X  popularity. These approaches modeled the popularity of items by the time decay function but neglected the state of fluctuation of item X  X  popularity.

As the traditional r ecommendation method always recommends outdated items for users, this paper introduces the concept of item life cycle to describe the item X  X  popu-larity which comes from the product life cycle theory. The product life cycle theory is an economic theory whic h was developed by Raymond Vernon in 1966 and can be used to describe the popularity of product [ 10 ]. It is defined as the period which starts with the initial product design (research and development) and ends with the with-drawal of the product from the marketplace. It is characterized by specific stages in-cluding introduction, growth, maturity and decline. The typical process of life cycle is shown in Fig. 1 (a). There are some special categories of product life cycles which should be distinguished, such as styles, fashions, fads and scallop ( Fig. 1 (c)). Similar-ly, the public interests of items show different patterns ( Fig. 1 (b)). As a kind of tacti-cal and empirical model, product life cycle is often used to direct product planning have gradually applied the product life cycle characteristic for popularity forecasting. Althoff et al [ 12 ] proposed a life cycle based forecasting model to presage the popu-online news stories by product life cycle with good effect. Seol et al [ 14 ] put forward a new approach based on the product life cycle theory towards popularity forecasting for new services such as Internet protocol TV ( IP TV). Traditional product life cycle theory is often used to model the popularity of a single product. Basallotriana et al [ 15 ] proposed a demand forecasting mode l of short life cycle products in which life cycle function is constructed by weighted linear regression. Kim et al [ 16 ] proposed a set of installed base concepts to describe the life cycle of consumer electronics, and associated with demand forecasting methodologies. However, due to the huge number of items, it is time -consuming to construct a life cycle function for each item and also difficult to construct a life cycle function for a new item. Therefore, we will establish a unified life cycle function for a given class of items.

Generally, the items are classified according to their functions. However, the life cycles of the items in the same function category will be affected by comprehensive factors, such as price, promotion and quality. According to the original classification, item life cycles in the same category show different features and some items in differ-ent categories show the same life cycle pattern. Owing to that the construction of life cy cle function according to the original classification is unacceptable, our method firstly clusters items according to their vitality. Then life cycle function is constructed by the result of the clustering. Based on this, an Item Life Cycle based Collabora tive Filtering (ItemLC -CF) approach is proposed, which stands on a foundation of two popular collaborative filtering algorithms: K -Nearest Neighbor Collaborative Filtering of items, clustering analysis is carried out to divide the items into several categories. Based on the clustering results, life cycle function is constructed for each category. At last, recommendation models are managed to rank the alternative items by taking both item life cycle and collaborative filtering into consideration.
The main contributions of this paper are as follows:  X  In order to solve the interest shift problem from the item X  X  perspective, inspired by the product life cycle theory in economic field, the item life cycle is proposed to quantitatively describe the complex change of item X  X  popularity over time.  X  Items are clustered into different categories by considering item X  X  vitality. Life cycle function is constructed f or each category which makes it possible to construct life cycle functions for large amount of items. Meanwhile, in order to describe the life cycle of new arriving items, an item classifier is constructed to classify the new items into corresponding categ ories.  X  By extending the KNNCF algorithms, ItemLC -CF is proposed, which ranks the candidate set of collaborative filtering by the vitality value of candidate items. Ex-periments on real world dataset show that the proposed life cycle method is well suited fo r the description of item X  X  popularity, and can greatly improve the perfor-mance of collaborative filtering.

The rest of this article is organized as follows. Sect. 2 illustrates the main idea and key techniques of our proposed approach for recommendation system in detail. In Sect. 3 , experiment evaluations are conducted to co mpare our approach with other methods. Finally, conclusions and future research directions are presented in Sect. 4 . In order to get a better description of the item X  X  popularity, traditional product life cycle is redefined as the item life cycle in Definition 1:
Definition 1: Item life cycle is the process that an item goes through from the initi-item life cycle can be described as four development stages of an item from birth to death: introduction, growth, maturity and decline. During the introduction stage, the item X  X  popularit y dictates that it will initially achieve only low rating volumes and slow rating growth. During this stage, the slope of the rating curve will remain rela-tively flat. If the items are attractive, this initial stage gives way to the growth stage, during wh ich the upward slope of the rating curve increases. When the items gain popularity, they have been rated by most of people who are interested in them and the cycle moves into the maturity stage during which the rating curve again flattens. Fi-curve slopes downward.

Similar with the product life cycle theory, there are a lot of item life cycle models which show different patterns, but we only describe the general model as an example. These stages develop with a gradual rise, peak, plateau and then a fall. The rating history of a ne w item will follow an S -shaped curve over time and can be character-ized by an item life cycle function. The item will pass through the four stage s of rat-ing growth depicted in Fig. 1 (a). In this section, we will describe the proposed item life cycle based recommendation algo rithm in detail. More specifically, the proposed algorithm consists of two procedures. (1) Item life cycle evaluation stage. Life cycle function is constructed by SVR for each category which is generated by item cluster according to their vitalities. When new items arrive, the classifier for new items is constructed by using the SVM ensemble classifier based on AdaBoost; (2) Recom-mendation stage. The life cycle feature and items information are aggregated by re -ranking the candidates of collaborative filtering according to thei r vitalit y to generate recommendations. The illustration of the proposed algorithm is depicted in Fig. 2 . More details are presented in the following subsections.
 2.1 Construction of item life cycle function based on item clustering The item life cycle is affected by not only the item X  X  function but also many other factors such as the time o nline, the manufacture information, and so on. It is unrea-sonable to construct the item life cycle function according to the existing classifica-tion which is generally only based on their functions, which will cause that the item life cycles of different c ategories have the similar patterns and those in the same cate-moment is called vitality, which is affected by multiple factors. Therefore, our method constructs the ite m life cycle function instead of considering the item X  X  specific cate-gories and contents.

The time period from the initiation that most items are available to the instant when they are rated by very few people is defined as the life span T . To measure item  X  X  vitality at different time unit, T is divided into segments equally, and each segment is a unit time t . We consider the vitality of item i as a vector p represents i at j th time unit and can be computed by using the formula (1). w here d i denotes the number of i rated by users during T and d i j denotes the number of i rated by users during j th time unit.

As it is extremely complicated to construct a life cycle function for each item, K -means clustering is used to cluster the items into different categories in this paper. Then life cycle function is constructed by the vitality of the clustering center. The sim ilarity of items is calculated as follow: w here t total denotes the time span between the initiation that most items are available and the instant when the y are rated by very few people.

I n order to get the best clustering results, K -means clustering needs to set the K values manually. Indicator named Dunn index [ 19 ] (3) is used to evaluate the effe cts of clustering. Intuitively, the larger indicator D , the greater the distances between clusters and the less the distance in a cluster. 2.2 Classification of new -arrival items by using Adaboost -SVM When new item arrives, it is impossible to construct a new item life cycle function due to the lack of enough data. Fortunately, we can match the new item to a given category whose popularity is same to it. However, only the basic information of the new item including the time online, manufacture information, the original categories of the item is available, which cannot provide enough support for us to find th e ap-propriate category for it. So, we construct a classifier through AdaBoost [ 20 ] based SVM ensemble for this classification task which takes the basic informatio n as input. The schematic illustration of item classification based on Adaboost -SVM is shown below in Fig. 3 .
Let x is the vector of input features of i th instance and {} is a discrete o f input features of its class. Initially, AdaBoost assigns an equal weight of 1 rounds through the rest of the algorithm. In round i , sampling with replacement is used to sample the tuples from D to form a training set D i . Each tuple X  X  chance of being selected is depend on its weight. After a classifier C i is constructed from the training set D i , its error e i (4) is then calculated usi ng D i as a test set. The weights of the training tuples are then adjusted as (5). where w i j denotes the weight of tuple j in round i . Once the boosting completes, each single SVM classifier will be assigned a weight W . The pixel x is labeled with the class y that has obtained by (6). 2.3 Item recommendation by using ItemLC -CF In order to recommend items which not only meet the user X  X  preference but also popular to users, the item life cycle function is integrated with collaborative filtering algorithm to learn the relative preference for items by re -ranking the candidate set of collaborative filtering according to the vitality. The proposed ItemLC -CF method stands on the foundation of two popular collaborative filtering algorithms: User -based CF and Item -based CF. Thus ItemLC -CF consists of two implementations: User -based ItemLC -CF and Item -based ItemLC -CF.

User -based CF assumes that a user will prefer items which are liked by other users who have similar preferences. In this method, the similarities between users are calcu-lated by their rating records. Then K neighbors are found by sorting the similarities. At last, items which have been rated by users neighbors instead of the user itself will be voted and then the recommendation list will be generated. The Cosine Similarity is used to calculate the similarity: where D i j denotes the items set rated by both user U i and user U j , 
Item -based CF recommends a user the items which are similar with the items he likes before. Hence, Item -based CF consists of two steps: (1) Calculating the similari-ty of items; (2) Generating the recommendation list for users according to the simi-calculated by formula (8). Afte r the similarity of items is obtained, ItemLC -CF calcu-lates the degree of user u being interested in item T j by formula (9). w here items which are most similar with item T j .
ItemLC -CF firstly clusters items into different categories according to their popu-larities and constructs life cycle function for each item. Then, SVM ensemble classifi-er based on AdaBoost is employed to construct classifier for new arrival items, and User -based CF and Item -based CF are used to get the candidate recommendation set. Lastly, the vitality of each item is calculated by life cycle function to re -rank the can-didate recommendation set. The detail steps of ItemLC -CF are as follow.
 Algorithm 1 ItemLC -CF Input: User rating records, D ; Item set, T ; Output:
Top -N recommendation, Rec ; 1. Initialize the vitality index matrix A ; 2. Get best cluster C : Cluster the item vitality index matrix A by K -Means and get 3. Construct item life cycle function M ; 4. Construct classifier D ; 5. Get candidate recommendation set S by User -based CF/Item -based CF; 6. Get the vitality of each item in S ; 7. Rank items in candidate set by Lc then get the Top -N recommendation set; return Rec ; 3.1 Experimental dataset and setup Our experiments are conducted on MovieLens -1M dataset, which consists of 1000209 ratings provided by 6040 users for 3952 movies, and the sparsity is 99.22%. To meas-ure the quality of recommendations, the rating data set is divided into two parts, train-ing -testing sets (80 -20%), in chronological order. Firstly, the items in training set are clustered into diff erent categories and the life cycle function of each cluster is con-structed by the result of clustering. Then, the basic information of movies in the train-new items. Fi nally, the proposed method is trained with training set and tested with testing set.

Firstly, three single classifiers: SVM, Naive Bayes and Decision Tree were com-pared. SVM and Decision Tree both achieved better classification effectiveness than Naive Bayes. Secondly, two ensemble classifiers based on AdaBoost: AdaBoost -SVM and AdaBoost -Decision Tree were compared and the classifier achieving the best classification effectiveness was finally chosen. The detail experimental setups are as follows: (1) Libsvm Chang and Lin [ 21 ] was used as the implementation tool of SVM algorithm. Hereinto, the kernel function was Radial Basis Function (RBF), pen-alty parameter C of the error term was 2.0 and kernel coefficient was 0.25. (2) Gauss-ianNB method and Deci sion Tree Classifier method in scikit learn toolkit 1 were re-spectively used as the implementation tools of Naive Bayes and Decision Tree, and the default parameters of these methods were used to the experiments. (3) AdaBoost -SVM and AdaBoost -Decision Tree were constructed by using the AdaBoost Classifi-er method in the scikit learn toolkit. Hereinto, Libsvm and Decision Tree were used as the base algorithms, the maximum number of estimators was 200 and the learning rate was 0.01. The above methods were all v erified by using 3 -fold cross validation.
In addition, User -based CF and Item -based CF were carried to verify the effective-ness of User -based Item LC -CF and Item -based ItemLC -CF. 3.2 Evaluation metrics Several widely used evaluation metrics are adopted in this paper to measure the quali-ty of our recommendations, including precision, recall and coverage. We give a brief description of the aforementioned metrics below:
Precision is the proportion of the number of relevant recommended items from the total number of recommendations. This measure should be as high as possible for good performance. The precision is computed as follows: where N t is the length of the recommendation list, and N r represe nts the number of items which are liked by the testing user and appears in the recommended list.

Recall is the proportion of relevant recommendations from the number of relevant items in the testing set. This measure is also as high as possible for good pe rformance. The recall score is computed as follows: where M T is the number of relevant items in the testing set.

Coverage is the proportion of the number of the items which appear in the recom-mendation list from the total number of items in the dataset. The coverage is comput-ed as follows: where N denotes the total number of the item in the dataset; N recommend denotes t he set of items that the recommendation system provides to all the users. 3.3 Experimental results In this section, several experiments are conducted on the movieLens -1M data set. In our method, we set the total time span d total = 196 days (as most of the movi es rarely appeared after 196 days). There are four parameters which can impact the perfor-mance of recommendation, including the unit time, the number of the clusters, the number of nearest neighbors and the number of recommendations. We will compare the pe rformance with differ ent values of these parameters.

Fig. 4 (a) shows the Dunn Index of the K -means algorithm under different time units and different number of clusters. When the unit times are 7, 14, 21 and 28, the Dunn Indexs are 2.48%, 2.34%, 0.76% and 0.91% respectively. When the unit time is 7 and cluster number is 2, the Dunn Index reaches the highest value, which is 50% higher than the second. Fig. 4 ( b ) shows the precision of User -based ItemLC -CF vary-precision of User -based ItemLC -CF are 15.35%, 14.76%, 12.86% and 12.92% respec-ItemLC -CF reaches the highest value, which is 4.34% higher than the second. As shown i n Fig. 4 (a) and Fig. 4 (b ), when unit time is 7 days and cluster number is 2, the Dunn Index and the precision of User -based ItemLC -CF reach the maximum. The life cycle functions fitted by SVM are shown in the Fig. 5 (a) and Fig. 5 (b).

Fig. 6 shows the precision of different classifiers. In single classifiers, the precision of SVM, Naive B ayes and Decision Tree are 38.34%, 27.05% and 30.60% respective-ly. SVM based classifier obtains a better precision than Native Bayes and Decision Tree. After introducing the conception of AdaBoost, the precision of Adaboost -SVM based classifier and Adaboost -Decision Tree based classifier are increased by 10.57% and 32.20% respectively compared to single SVM and single Decision Tree. The precision of Adaboost -SVM based classifier is increased by 4.77% compared to Ada-boostDecision Tree based classifier .
Fig. 7 shows the performances of different algorithms with different number of nearest neighbo rs. In Fig. 7 (a) and Fig. 7 (b) , Item -based CF and Item -based ItemLC -CF obtain better precision and recall when the K is less than 70. After considering the item life cycle, the precision and recall of Item -based CF are increased by an average of 2.26% and 1.36% respectively. On the other hand, User -based CF and User -based ItemLC -CF obtain better precisi on and recall when the K is larger than 70. After con-sidering the item life cycle, the precision and recall of User -based CF are increased by an average of 9.73% and 2.22% respectively. The precision of User -based ItemLC -CF is 17.62% when K = 150, which is the highest precision of all methods in our experi-ments. Although the coverage of all methods show n in Fig. 7 (c) decrease with the increase of the nu mber of neighbor, the coverage rate of recommendations are higher after considering the item life cycle.

Fr om Fig. 7 , w e note that on movieLens -1M dat aset, our item life cycle methods provide a high quality of recommendations. However, compared with the convention-al method, larger K values are required to achieve the highest precision in our life cycle methods. One possible explanation is that the data sets are segmented by time. This strategy will lead to the consequence that some items in testing set rarely appear in the training set. Therefore, the more neighbors to consider, the greater chances of vitality, the items which not only meet the user X  X  preference but also are popular will appear in the final recommendation list with a higher probability. This is also the most essential difference between our approach and popularity recommendation methods.
Fig. 8 shows the performances of different algorithms with different Top -N on the movieLens -1M dataset. Fig. 8 (a) and Fig. 8 (b) show that the precision decrease and the recall increase with the increase of the number of recommendation. The pr ecision of User -based ItemLC -CF and Item -based ItemLC -CF increase by the average of 9.33% and 6.54% respectively compared to User -based CF and Item -based CF. The recall of User -based ItemLC -CF and Item -based ItemLC -CF increase by the average of 3.21% and 6 .53% respectively compared to User -based CF and Item -based CF. Fro m Fig. 8 (c) , it can be seen that the coverage of life cycle methods are higher than the traditional methods. The coverage of Item User -based ItemLC -CF and Item -based ItemLC -CF increase by the average of 15.83% and 6.81% respectively compared to User -based CF and Item -based CF.

These experiments demonstrate that the proposed method can provide high quality of recommendations and obtain better performance than traditional methods. When it comes to the interest shift problem, the existing time -aware methods a lways recommend items which are already out of fashion to the users because they usually stand in the user X  X  point of view (user X  X  preference for a specific item) instead of item X  X  standpoint (item X  X  vitality). This paper is an attempt to solve the interes t shift problem by taking both user X  X  preference and item X  X  popularity and ItemLC -CF is proposed, in which item life cycle is presented to model the popularity of items stood on a foundation of produce life cycle. Firstly, items are clustered by their vita lity and life circle functions are constructed for each category. Secondly, a classifier is con-structed to classify the items into different categories, and then, the vitality of items is calculated by using their corresponding life cycle functions. Finall y, the Top -N items obtained by the proposed method are recommended to users. The comparison among the traditional KNN based collaborative filtering (including User -based CF and Item -based CF) and the formulated ItemLC -CF (including User -based ItemLC -CF and Itembased ItemLC -CF) shows that the proposed algorithm outperforms traditional collaborative filtering methods in terms of three metrics, including the precision, the recall and the coverage score. The improvement of precision and recall rate indicate tha t the recommendation method which considers item life cycle can select a more reasonable recommendation list. Some of the items which the users are really interest-ed in have upgraded their ranking in the recommendation list through the calculation of life cycle. The enhancement of the coverage indicates that the long tail can be bet-ter after considering the life cycle.

In future work, more information of the items such as online comments provided by users in the websites could be gathered to construct the i tem classifier more accu-rately. Furthermore, we plan to investigate the proposed method on other kinds of data sets (e.g. Netflix) to test the effectiveness of our method.

