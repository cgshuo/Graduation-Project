 Word alignment is a critical first step for build-ing statistical machine translation systems. In or-der to ensure accurate word alignments, most sys-tems employ a post-hoc symmetrization step to combine directional word aligners, such as IBM Model 4 (Brown et al., 1993) or hidden Markov model (HMM) based aligners (Vogel et al., 1996). Several authors have proposed bidirectional mod-els that incorporate this step directly, but decoding under many bidirectional models is NP-Hard and finding exact solutions has proven difficult.
In this paper, we describe a novel Lagrangian-relaxation based decoder for the bidirectional model proposed by DeNero and Macherey (2011), with the goal of improving search accuracy. In that work, the authors implement a dual decomposition-based decoder for the problem, but are only able to find exact solutions for around 6% of instances.

Our decoder uses a simple variant of the Viterbi algorithm for solving a relaxed version of this model. The algorithm makes it easy to re-introduce constraints for difficult instances, at the cost of increasing run-time complexity. To offset this cost, we employ optimality-preserving coarse-to-fine pruning to reduce the search space. The pruning method utilizes lower bounds on the cost of valid bidirectional alignments, which we obtain from a fast, greedy decoder.

The method has the following properties:  X  It is based on a novel relaxation for the model  X  To find optimal solutions, it employs an effi- X  Empirically, it is able to find exact solutions
We begin in Section 2 by formally describing the directional word alignment problem. Section 3 describes a preliminary bidirectional model us-ing full agreement constraints and a Lagrangian relaxation-based solver. Section 4 modifies this model to include adjacency constraints. Section 5 describes an extension to the relaxed algorithm to explicitly enforce constraints, and Section 6 gives a pruning method for improving the efficiency of the algorithm.

Experiments compare the search error and accu-racy of the new bidirectional algorithm to several directional combiners and other bidirectional al-gorithms. Results show that the new relaxation is much more effective at finding exact solutions and is able to produce comparable alignment accuracy. Notation We use lower-and upper-case letters for scalars and vectors, and script-case for sets e.g. X . For vectors, such as v  X  { 0 , 1 } ( I X J )  X  X  , where I and J are finite sets, we use the notation v ( i,j ) and v ( j ) to represent elements of the vec-tor. Define d =  X  ( i ) to be the indicator vector with d ( i ) = 1 and d ( i 0 ) = 0 for all i 0 6 = i . Finally de-fine the notation [ J ] to refer to { 1 ...J } and [ J ] 0 to refer to { 0 ...J } . The focus of this work is on the word alignment decoding problem. Given a sentence e of length | e | = I and a sentence f of length | f | = J , our goal is to find the best bidirectional alignment be-tween the two sentences under a given objective function. Before turning to the model of interest, we first introduce directional word alignment. 2.1 Word Alignment In the e  X  f word alignment problem, each word in e is aligned to a word in f or to the null word . This alignment is a mapping from each index i  X  [ I ] to an index j  X  [ J ] 0 (where j = 0 represents alignment to ). We refer to a single word align-ment as a link .

A first-order HMM alignment model (Vogel et al., 1996) is an HMM of length I + 1 where the hidden state at position i  X  [ I ] 0 is the aligned in-dex j  X  [ J ] 0 , and the transition score takes into account the previously aligned index j 0  X  [ J ] 0 . 1 Formally, define the set of possible HMM align-where x ( i,j ) = 1 indicates that there is a link between index i and index j , and x ( j 0 ,i,j ) = 1 indicates that index i  X  1 aligns to index j 0 and index i aligns to j . Figure 1 shows an example member of X .

The constraints of X enforce backward and for-ward consistency respectively. If x ( i,j ) = 1 , backward consistency enforces that there is a tran-sition from ( i  X  1 ,j 0 ) to ( i,j ) for some j 0  X  [ J ] whereas forward consistency enforces a transition from ( i,j ) to ( i + 1 ,j 0 ) for some j 0  X  [ J ] 0 . Infor-mally the constraints  X  X hain X  together the links.
The HMM objective function f : X  X  R can be written as a linear function of x transition and alignment scores. For a generative model of alignment, we might define  X  ( j 0 ,i,j ) = of alignment, we might define  X  ( j 0 ,i,j ) = w  X   X  ( i,j 0 ,j, f , e ) for a feature function  X  and weights w (Moore, 2005; Lacoste-Julien et al., 2006).
Now reverse the direction of the model and consider the f  X  e alignment problem. An f  X  e alignment is a binary vector y  X  Y where for each j  X  [ J ] , y ( i,j ) = 1 for exactly one i  X  [ I ] 0 . Define the set of HMM alignments Y  X 
Similarly define the objective function
Note that for both of these models we can solve the optimization problem exactly using the stan-dard Viterbi algorithm for HMM decoding. The first can be solved in O ( IJ 2 ) time and the second in O ( I 2 J ) time. The directional bias of the e  X  f and f  X  e align-ment models may cause them to produce differing alignments. To obtain the best single alignment, it is common practice to use a post-hoc algorithm to merge these directional alignments (Och et al., 1999). First, a directional alignment is found from each word in e to a word f . Next an alignment is produced in the reverse direction from f to e . Fi-nally, these alignments are merged, either through intersection, union, or with an interpolation algo-rithm such as grow-diag-final (Koehn et al., 2003).
In this work, we instead consider a bidirectional alignment model that jointly considers both direc-tional models. We begin in this section by in-troducing a simple bidirectional model that en-forces full agreement between directional models and giving a relaxation for decoding. Section 4 loosens this model to adjacent agreement. 3.1 Enforcing Full Agreement Perhaps the simplest post-hoc merging strategy is to retain the intersection of the two directional models. The analogous bidirectional model en-forces full agreement to ensure the two alignments select the same non-null links i.e. x  X  ,y  X  = arg max We refer to the optimal alignments for this prob-lem as x  X  and y  X  .

Unfortunately this bidirectional decoding model is NP-Hard (a proof is given in Ap-pendix A). As it is common for alignment pairs to have | f | or | e | over 40 , exact decoding algorithms are intractable in the worst-case.

Instead we will use Lagrangian relaxation for this model. At a high level, we will remove a subset of the constraints from the original problem and replace them with Lagrange multipliers. If we can solve this new problem efficiently, we may be able to get optimal solutions to the original prob-lem. (See the tutorial by Rush and Collins (2012) describing the method.)
There are many possible subsets of constraints to consider relaxing. The relaxation we use pre-serves the agreement constraints while relaxing the Markov structure of the f  X  e alignment. This relaxation will make it simple to later re-introduce constraints in Section 5.

We relax the forward constraints of set Y . With-out these constraints the y links are no longer chained together. This has two consequences: (1) for index j there may be any number of indices i , such that y ( i,j ) = 1 , (2) if y ( i 0 ,i,j ) = 1 it is no longer required that y ( i 0 ,j  X  1) = 1 . This gives a set Y 0 which is a superset of Y Figure 2(b) shows a possible y  X  Y 0 and a valid unchained structure.

To form the Lagrangian dual with relaxed for-ward constraints, we introduce a vector of La-multiplier for each original constraint. The La-grangian dual L (  X  ) is defined as Line 2 distributes the  X   X  X  and introduces a modi-fied potential vector  X  0 defined as  X  0 ( i 0 ,i,j ) =  X  ( i 0 ,i,j )  X   X  ( i,j ) +  X  ( i 0 ,j  X  1) for all i 0  X  [ I ] 0 ,i  X  [ I ] 0 ,j  X  [ J ] . Line 3 uti-lizes the relaxed set Y 0 which allows each y ( i,j ) to select the best possible previous link ( i 0 ,j  X  1) . Line 4 introduces the modified directional objec-tive g 0 ( y ;  X , X  ) =
The Lagrangian dual is guaranteed to be an up-per bound on the optimal solution, i.e. for all  X  , L (  X  )  X  f ( x  X  ) + g ( y  X  ) . Lagrangian relaxation attempts to find the tighest possible upper bound by minimizing the Lagrangian dual, min  X  L (  X  ) , using subgradient descent. Briefly, subgradient descent is an iterative algorithm, with two steps. Starting with  X  = 0 , we iteratively 1. Set ( x,y ) to the arg max of L (  X  ) . 2. Update  X  ( i,j ) for all i  X  [ I  X  1] 0 ,j  X  [ J ] 0 , where  X  t &gt; 0 is a step size for the t  X  X h update. If at any iteration of the algorithm the forward con-straints are satisfied for ( x,y ) , then f ( x )+ g ( y ) = f ( x  X  ) + g ( x  X  ) and we say this gives a certificate of optimality for the underlying problem.

To run this algorithm, we need to be able to effi-ciently compute the ( x,y ) pair that is the arg max of L (  X  ) for any value of  X  . Fortunately, since the y alignments are no longer constrained to valid tran-sitions, we can compute these alignments by first picking the best f  X  e transitions for each possible link, and then running an e  X  f Viterbi-style algo-rithm to find the bidirectional alignment.
 The max version of this algorithm is shown in Figure 3. It consists of two steps. We first compute the score for each y ( i,j ) variable. We then use the standard Viterbi update for computing the x vari-ables, adding in the score of the y ( i,j ) necessary to satisfy the constraints. Enforcing full agreement can be too strict an align-ment criteria. DeNero and Macherey (2011) in-stead propose a model that allows near matches, which we call adjacent agreement. Adjacent agreement allows links from one direction to agree with adjacent links from the reverse alignment for a small penalty. Figure 4(a) shows an example of a valid bidirectional alignment under adjacent agreement.

In this section we formally introduce adjacent agreement, and propose a relaxation algorithm for this model. The key algorithmic idea is to extend the Viterbi algorithm in order to consider possible adjacent links in the reverse direction. 4.1 Enforcing Adjacency Define the adjacency set K = { X  1 , 0 , 1 } . A bidi-rectional alignment satisfies adjacency if for all i  X  [ I ] ,j  X  [ J ] ,  X  If x ( i,j ) = 1 , it is required that y ( i + k,j ) =  X  If x ( i,j ) = 1 , it is allowed that y ( i,j + k ) =
Formally for x  X  X  and y  X  X  , the pair ( x,y ) is feasible if there exists a z from the set Z ( x,y )  X 
Additionally adjacent, non-overlapping matches are assessed a penalty  X  calculated as where  X   X  0 is a parameter of the model. The example in Figure 4(a) includes a 3  X  penalty.
Adding these penalties gives the complete adja-cent agreement problem
Next, apply the same relaxation from Sec-tion 3.1, i.e. we relax the forward constraints of the f  X  e set. This yields the following Lagrangian dual
L (  X  ) = max
Despite the new constraints, we can still com-pute L (  X  ) in O ( IJ ( I + J )) time using a variant of the Viterbi algorithm. The main idea will be to consider possible adjacent settings for each link. Since each z l ber of settings, this does not increase the asymp-totic complexity of the algorithm.
 Figure 5 shows the algorithm for computing L (  X  ) . The main loop of the algorithm is similar to Figure 3. It proceeds row-by-row, picking the best alignment x ( i,j ) = 1 . The major change is that the chart  X  also stores a value z  X  X  0 , 1 } K X K rep-resenting a possible z l the proposed z i,j in the inner loop, we can include the scores of the adjacent y alignments that are in neighboring columns, as well as the possible penalty for matching x ( i,j ) to a y ( i + k,j ) in a different row. Figure 4(b) gives an example set-ting of z .

In the dynamic program, we need to ensure that the transitions between the z  X  X  are consistent. The vector z 0 indicates the y links adjacent to x ( i  X  1 ,j 0 ) . If j 0 is near to j , z 0 may overlap with z and vice-versa. The transition set N ensures these indicators match up In general, it can be shown that Lagrangian relax-ation is only guaranteed to solve a linear program-ming relaxation of the underlying combinatorial problem. For difficult instances, we will see that this relaxation often does not yield provably exact solutions. However, it is possible to  X  X ighten X  the relaxation by re-introducing constraints from the original problem.

In this section, we extend the algorithm to al-low incrementally re-introducing constraints. In particular we track which constraints are most of-ten violated in order to explicitly enforce them in the algorithm.
 where p ( i,j ) = 1 indicates a previously re-laxed constraint on link y ( i,j ) that should be re-introduced into the problem. Let the new partially constrained Lagrangian dual be defined as
L (  X  ; p ) = max y ( i,j ) = If p = ~ 1 , the problem includes all of the original constraints, whereas p = ~ 0 gives our original La-grangian dual. In between we have progressively more constrained variants.

In order to compute the arg max of this op-timization problem, we need to satisfy the con-straints within the Viterbi algorithm. We augment the Viterbi chart with a count vector d  X  X  where D  X  Z || p || 1 and d ( i,j ) is a count for the ( i,j )  X  X h constraint, i.e. d ( i,j ) = y ( i,j )  X  Only solutions with count 0 at the final position satisfy the active constraints. Additionally de-fine a helper function [  X  ] D as the projection from without constraints.

Figure 6 shows this constrained Viterbi relax-ation approach. It takes p as an argument and en-forces the active constraints. For simplicity, we show the full agreement version, but the adjacent agreement version is similar. The main new addi-tion is that the inner loop of the algorithm ensures that the count vector d is the sum of the counts of its children d 0 and d  X  d 0 .

Since each additional constraint adds a dimen-sion to d , adding constraints has a multiplicative impact on running time. Asymptotically the new is a problem in practice as even adding a few con-straints can make the problem intractable. We ad-dress this issue in the next section. Re-introducing constraints can lead to an expo-nential blow-up in the search space of the Viterbi algorithm. In practice though, many alignments in this space are far from optimal, e.g. align-ing a common word like the to nous instead of les . Since Lagrangian relaxation re-computes the alignment many times, it would be preferable to skip these links in later rounds, particularly after re-introducing constraints.

In this section we describe an optimality pre-serving coarse-to-fine algorithm for pruning. Ap-proximate coarse-to-fine pruning algorithms are widely used within NLP, but exact pruning is less common. Our method differs in that it only eliminates non-optimal transitions based on a lower-bound score. After introducing the prun-ing method, we present an algorithm to make this method effective in practice by producing high-scoring lower bounds for adjacent agreement. 6.1 Thresholding Max-Marginals Our pruning method is based on removing transi-tions with low max-marginal values. Define the max-marginal value of an e  X  f transition in our Lagrangian dual as M ( j 0 ,i,j ;  X  ) = max where M gives the value of the best dual align-ment that transitions from ( i  X  1 ,j 0 ) to ( i,j ) . These max-marginals can be computed by running a forward-backward variant of any of the algo-rithms described thus far.

We make the following claim about max-marginal values and any lower-bound score Lemma 1 (Safe Pruning) . For any valid con-strained alignment x  X  X ,y  X  Y ,z  X  Z ( x,y ) exists a transition j 0 ,i,j with max-marginal value M ( j 0 ,i,j ;  X  ) &lt; f ( x )+ g ( y )+ h ( z ) then the tran-sition will not be in the optimal alignment, i.e. x  X  ( j 0 ,i,j ) = 0 .

This lemma tells us that we can prune transi-tions whose dual max-marginal value falls below a threshold without pruning possibly optimal tran-sitions. Pruning these transitions can speed up La-grangian relaxation without altering its properties.
Furthermore, the threshold is determined by any feasible lower bound on the optimal score, which means that better bounds can lead to more pruning. 6.2 Finding Lower Bounds Since the effectiveness of pruning is dependent on the lower bound, it is crucial to be able to produce high-scoring alignments that satisfy the agreement constraints. Unfortunately, this problem is non-trivial. For instance, taking the union of direc-tional alignments does not guarantee a feasible so-lution; whereas taking the intersection is trivially feasible but often not high-scoring.

To produce higher-scoring feasible bidirectional alignments we introduce a greedy heuristic al-gorithm. The algorithm starts with any feasible alignment ( x,y,z ) . It runs the following greedy loop: 1. Repeat until there exists no x ( i, 0) = 1 or This algorithm produces feasible alignments with monotonically increasing score, starting from the intersection of the alignments. It has run-time of O ( IJ ( I + J )) since each inner loop enumerates IJ possible updates and assigns at least one index a non-zero value, limiting the outer loop to I + J iterations.

In practice we initialize the heuristic based on the intersection of x and y at the current round of Lagrangian relaxation. Experiments show that running this algorithm significantly improves the lower bound compared to just taking the intersec-tion, and consequently helps pruning significantly. The most common techniques for bidirectional alignment are post-hoc combinations, such as union or intersection, of directional models, (Och et al., 1999), or more complex heuristic combiners such as grow-diag-final (Koehn et al., 2003).
Several authors have explored explicit bidirec-tional models in the literature. Cromieres and Kurohashi (2009) use belief propagation on a fac-tor graph to train and decode a one-to-one word alignment problem. Qualitatively this method is similar to ours, although the model and decoding algorithm are different, and their method is not able to provide certificates of optimality.
 A series of papers by Ganchev et al. (2010), Graca et al. (2008), and Ganchev et al. (2008) use posterior regularization to constrain the posterior probability of the word alignment problem to be symmetric and bijective. This work acheives state-of-the-art performance for alignment. Instead of utilizing posteriors our model tries to decode a sin-gle best one-to-one word alignment.

A different approach is to use constraints at training time to obtain models that favor bidi-rectional properties. Liang et al. (2006) propose agreement-based learning, which jointly learns probabilities by maximizing a combination of likelihood and agreement between two directional models.

General linear programming approaches have also been applied to word alignment problems. Lacoste-Julien et al. (2006) formulate the word alignment problem as quadratic assignment prob-lem and solve it using an integer linear program-ming solver.
 Our work is most similar to DeNero and Macherey (2011), which uses dual decomposition to encourage agreement between two directional HMM aligners during decoding time. Our experimental results compare the accuracy and optimality of our decoding algorithm to direc-tional alignment models and previous work on this bidirectional model.
 Data and Setup The experimental setup is iden-tical to DeNero and Macherey (2011). Evalu-ation is performed on a hand-aligned subset of the NIST 2002 Chinese-English dataset (Ayan and Dorr, 2006). Following past work, the first 150 sentence pairs of the training section are used for evaluation. The potential parameters  X  and  X  are set based on unsupervised HMM models trained on the LDC FBIS corpus (6.2 million words). Training is performed using the agreement-based learning method which encourages the directional models to overlap (Liang et al., 2006). This direc-tional model has been shown produce state-of-the-art results with this setup (Haghighi et al., 2009). Baselines We compare the algorithm described in this paper with several baseline methods. D IR includes post-hoc combinations of the e  X  f and f  X  e HMM-based aligners. Variants include union, intersection, and grow-diag-final. D&amp;M is the dual decomposition algorithm for bidirectional alignment as presented by DeNero and Macherey (2011) with different final combinations. LR is the Lagrangian relaxation algorithm applied to the ad-jacent agreement problem without the additional constraints described in Section 5. CONS is our full Lagrangian relaxation algorithm including in-cremental constraint addition. ILP uses a highly-optimized general-purpose integer linear program-ming solver to solve the lattice with the constraints described (Gurobi Optimization, 2013).
 Implementation The main task of the decoder is to repeatedly compute the arg max of L (  X  ) . To speed up decoding, our implementation fully instantiates the Viterbi lattice for a problem in-stance. This approach has several benefits: each iteration can reuse the same lattice structure; max-marginals can be easily computed with a gen-eral forward-backward algorithm; pruning corre-sponds to removing lattice edges; and adding con-straints can be done through lattice intersection. For consistency, we implement each baseline (ex-cept for D&amp;M) through the same lattice.
 Parameter Settings We run 400 iterations of the subgradient algorithm using the rate schedule  X  which the dual value did not improve. Every 10 iterations we run the greedy decoder to compute a lower bound. If the gap between our current dual value L (  X  ) and the lower bound improves significantly we run coarse-to-fine pruning as de-scribed in Section 6 with the best lower bound. For CONS, if the algorithm does not find an optimal solution we run 400 more iterations and incremen-tally add the 5 most violated constraints every 25 iterations.
 Results Our first set of experiments looks at the model accuracy and the decoding time of various methods that can produce optimal solutions. Re-sults are shown in Table 1. D&amp;M is only able to find the optimal solution with certificate on 6% of instances. The relaxation algorithm used in this work is able to increase that number to 54 . 7% . With incremental constraints and pruning, we are able to solve over 86% of sentence pairs includ-ing many longer and more difficult pairs. Addi-tionally the method finds these solutions with only a small increase in running time over Lagrangian relaxation, and is significantly faster than using an ILP solver.

Next we compare the models in terms of align-ment accuracy. Table 2 shows the precision, recall and alignment error rate (AER) for word align-ment. We consider union, intersection and grow-diag-final as combination procedures. The com-bination procedures are applied to D&amp;M in the case when the algorithm does not converge. For CONS, we use the optimal solution for the 86% of instances that converge and the highest-scoring greedy solution for those that do not. The pro-posed method has an AER of 26.4, which outper-forms each of the directional models. However, although CONS achieves a higher model score than D&amp;M, it performs worse in accuracy. Ta-ble 2 also compares the models in terms of phrase-extraction accuracy (Ayan and Dorr, 2006). We use the phrase extraction algorithm described by DeNero and Klein (2010), accounting for possi-ble links and alignments. CONS performs bet-ter than each of the directional models, but worse than the best D&amp;M model.

Finally we consider the impact of constraint ad-dition, pruning, and use of a lower bound. Table 3 gives the average number of constraints added for sentence pairs for which Lagrangian relaxation alone does not produce a certificate. Figure 7(a) shows the average over all sentence pairs of the best dual and best primal scores. The graph com-pares the use of the greedy algorithm from Sec-tion 6.2 with the simple intersection of x and y . The difference between these curves illustrates the benefit of the greedy algorithm. This is reflected in Figure 7(b) which shows the effectiveness of coarse-to-fine pruning over time. On average, the pruning reduces the search space of each sentence pair to 20% of the initial search space after 200 iterations. We have introduced a novel Lagrangian relaxation algorithm for a bidirectional alignment model that uses incremental constraint addition and coarse-to-fine pruning to find exact solutions. The algo-rithm increases the number of exact solution found on the model of DeNero and Macherey (2011) from 6% to 86%.

Unfortunately despite achieving higher model score, this approach does not produce more accu-rate alignments than the previous algorithm. This suggests that the adjacent agreement model may still be too constrained for this underlying task. Implicitly, an approach with fewer exact solu-tions may allow for useful violations of these con-straints. In future work, we hope to explore bidi-rectional models with soft-penalties to explicitly permit these violations.
 We can show that the bidirectional alignment problem is NP-hard by reduction from the trav-eling salesman problem (TSP). A TSP instance with N cities has distance c ( i 0 ,i ) for each ( i 0 ,i )  X  [ N ] 2 . We can construct a sentence pair in which I = J = N and -alignments have infinite cost.
Every bidirectional alignment with finite objec-tive score must align exactly one word in e to each word in f, encoding a permutation a . Moreover, each possible permutation has a finite score: the negation of the total distance to traverse the N cities in order a under distance c . Therefore, solv-ing such a bidirectional alignment problem would find a minimal Hamiltonian path of the TSP en-coded in this way, concluding the reduction. Acknowledgments Alexander Rush, Yin-Wen Chang and Michael Collins were all supported by NSF grant IIS-1161814. Alexander Rush was partially supported by an NSF Graduate Research Fellowship.
