 The hierarchical phrase-based model (Chiang, 2007) makes an advance of statistical machine translation by employing hierarchical phrases, which not only uses phrases to learn local translations but also uses hierarchical phrases to capture reorderings of words and subphrases which can cover a large scope. Be-sides, this model is formal syntax-based and does not need to specify the syntactic constituents of subphrases, so it can directly learn synchronous context-free grammars (SCFG) from a parallel text without relying on any linguistic annotations or as-sumptions, which makes it used conveniently and widely.
However, it is often desirable to consider syntac-tic constituents of subphrases, e.g. the hierarchical phrase can be applied to both of the following strings in Figure 1 and get the following translation, respectively In the former,  X  X  request X  is a NP and this rule acts correctly while in the latter  X  X iled X  is a VP and this rule gives a wrong reordering. If we specify the first X on the right-hand side to NP, this kind of errors can be avoided.

The tree-to-string model (Liu et al., 2006; Huang et al., 2006) introduces linguistic syntax via source parse to direct word reordering, especially long-distance reordering. Furthermore, this model is for-malised as Tree Substitution Grammars, so it ob-serves syntactic cohesion. Syntactic cohesion means that the translation of a string covered by a subtree in a source parse tends to be continuous. Fox (2002) shows that translation between English and French satisfies cohesion in the majority cases. Many pre-vious works show promising results with an as-sumption that syntactic cohesion explains almost all translation movement for some language pairs (Wu, 1997; Yamada and Knight, 2001; Eisner, 2003; Graehl and Knight, 2004; Quirk et al., 2005; Cherry, 2008; Feng et al., 2010).
But unfortunately, the tree-to-string model re-quires each node must be strictly matched during rule matching, which makes it strongly dependent on the relationship of tree nodes and their roles in the whole sentence. This will lead to data sparse-ness and being vulnerable to parse errors.

In this paper, we present a hierarchical chunk-to-string translation model to combine the merits of the two models. Instead of parse trees, our model intro-duces linguistic information in the form of chunks , so it does not need to care the internal structures and the roles in the main sentence of chunks. Based on shallow parsing results, it learns rules consisting of either words (terminals) or chunks (nonterminals), where adjacent chunks are packed into one nonter-minal. It searches for the best derivation through the SCFG-motivated space defined by these rules and get target translation simultaneously. In some sense, our model can be seen as a compromise between the hierarchical phrase-based model and the tree-to-string model, specifically  X  Compared with the hierarchical phrase-based  X  Compared with the tree-to-string model, it only  X  we refine our hierarchical chunk-to-string The experiments show that on the 2008 NIST English-Chinese MT translation test set, both the loose model and the tight model outperform the hi-erarchical phrase-based model and the tree-to-string model, where the loose model has a better perfor-mance. While in terms of speed, the tight model runs faster and its speed ranking is between the tree-to-string model and the hierarchical phrase-based model.
 Shallow parsing (also chunking ) is an analysis of a sentence which identifies the constituents (noun groups, verbs, verb groups, etc), but neither spec-ifies their internal structures, nor their roles in the main sentence. In Figure 1, we give the chunk se-quence in the first row for each sentence. We treat shallow parsing as a sequence label task, and a sen-tence f can have many possible different chunk la-bel sequences. Therefore, in theory, the conditional probability of a target translation e conditioned on the source sentence f is given by taking the chunk label sequences as a latent variable c : In practice, we only take the best chunk label se-quence  X  c got by Then we can ignore the conditional probability p (  X  c | f ) as it holds the same value for each transla-tion, and get: We formalize our model as a weighted SCFG. In a SCFG, each rule (usually called production in SCFGs) has an aligned pair of right-hand sides  X  the source side and the target side, just as follows: where X is a nonterminal,  X  and  X  are both strings of terminals and nonterminals, and  X  denotes one-to-one links between nonterminal occurrences in  X  and nonterminal occurrences in  X  . A SCFG produces a derivation by starting with a pair of start symbols and recursively rewrites every two coindexed non-terminals with the corresponding components of a matched rule. A derivation yields a pair of strings on the right-hand side which are translation of each other.

In a weighted SCFG, each rule has a weight and the total weight of a derivation is the production of the weights of the rules used by the derivation. A translation may be produced by many different derivations and we only use the best derivation to evaluate its probability. With d denoting a deriva-tion and r denoting a rule, we have Following Och and Ney (2002), we frame our model as a log-linear model: So the best translation is given by We employ the same set of features for the log-linear model as the hierarchical phrase-based model does(Chiang, 2005).

We further refine our hierarchical chunk-to-string model into two models: a loose model which is more similar to the hierarchical phrase-based model and a tight model which is more similar to the tree-to-string model. The two models differ in the form of rules and the way of estimating rule probabilities. While for decoding, we employ the same decoding algorithm for the two models: given a test sentence, the decoders first perform shallow parsing to get the best chunk sequence, then apply a CYK parsing al-gorithm with beam search. 2.1 A Loose Model In our model, we employ rules containing non-terminals to handle long-distance reordering where boundary words play an important role. So for the subphrases which cover more than one chunk, we just maintain boundary chunks: we bundle adjacent chunks into one nonterminal and denote it as the first chunk tag immediately followed by  X - X  and next fol-lowed by the last chunk tag. Then, for the string pair &lt; filed for bankruptcy, shenqing pochan &gt; , we can get the rule while for the string pair &lt; A request for a purchase of shares, goumai gufen de shenqing &gt; , we can get r The rule matching  X  X  request for a purchase of shares was X  will be r We can see that in contrast to the method of rep-resenting each chunk separately, this representation form can alleviate data sparseness and the influence of parsing errors.
In these rules, the left-hand nonterminal symbol X can not match any nonterminal symbol on the right-hand side. So we need a set of rules such as and so on, and set the probabilities of these rules to 1. To simplify the derivation, we discard this kind of rules and assume that X can match any nonterminal on the right-hand side.

Only with r derivation of the whole sentence in Figure 1 (a). In this case we need two special glue rules : Together with the following four lexical rules, r r r r Figure 3(a) shows the derivation of the sentence in Figure 1(a). 2.2 A Tight Model In the tight model, the right-hand side of each rule remains the same as the loose model, but the left-hand side nonterminal is not X but the correspond-ing chunk labels. If a rule covers more than one chunk, we just use the first and the last chunk la-bels to denote the left-hand side nonterminal. The rule set used in the tight model for the example in Figure 1(a) corresponding to that in the loose model becomes: r r r r r r
During decoding, we first collect rules for each span. For a span which does not have any matching rule, if we do not construct default rules for it, there will be no derivation for the whole sentence, then we need to construct default rules for this kind of span by enumerating all possible binary segmentation of the chunks in this span. For the example in Figure 1(a), there is no rule matching the whole sentence, so we need to construct default rules for it, which should be
NP-VP  X  h NP-VBD NP-VP  X  h NP-NP i . and so on.

Figure 3(b) shows the derivation of the sentence in Figure 1(a). In a parse tree, a chunk is defined by a leaf node or an inner node whose children are all leaf nodes (See Figure 2 (a)). In our model, we identify chunks by traversing a parse tree in a breadth-first order. Once a node is recognized as a chunk, we skip its children. In this way, we can get a sole chunk sequence given a parse tree. Then we label each word with a label indicating whether the word starts a chunk (B-) or continues a chunk (I-). Figure 2(a) gives an example. In this method, we get the training data for shallow parsing from Penn Tree Bank.

We take shallow Parsing (chunking) as a sequence label task and employ Conditional Random Field label tasks as it can avoid label bias and use more statistical correlated features. We employ the fea-tures described in Sha and Pereira (2003) for CRF. We do not introduce CRF-based chunkier in this pa-per and more details can be got from Hammersley and Clifford (1971), Lafferty et al. (2001), Taskar et al. (2002), Sha and Pereira (2003). In what follows, we introduce how to get the rule directionally word-aligned by the GIZA++ toolkit (Och and Ney, 2000) and then is refined using a  X  X inal-and X  strategy. We generate the rule set in two steps: first, we extract two sets of phrases, basic phrases and chunk-based phrases . Basic phrases are defined using the same heuristic as previous systems (Koehn et al., 2003; Och and Ney, 2004; Chiang, 2005). A chunk-based phrase is such a basic phrase that covers one or more chunks on the source side. We identity chunk-based phrases h c j 2 follows: 1. A chunk-based phrase is a basic phrase; 2. c 3. f Given a sentence pair h f , e ,  X  X  , we extract rules for the loose model as follows 1. If h f j 2 2. Assume X  X  h  X ,  X  i is a rule with  X  = We evaluate the distribution of these rules in the same way as Chiang (2007).

We extract rules for the tight model as follows 1. If h f j 2 2. Assume Y We evaluate the distribution of rules in the same way as Liu et al. (2006).

For the loose model, the nonterminals must be co-hesive, while the whole rule can be noncohesive: if both ends of a rule are nonterminals, the whole rule is cohesive, otherwise, it may be noncohesive. In contrast, for the tight model, both the whole rule and the nonterminal are cohesive.

Even with the cohesion constraints, our model still generates a large number of rules, but not all of the rules are useful for translation. So we follow the method described in Chiang (2007) to filter the rule set except that we allow two nonterminals to be adjacent. Watanabe et al. (2003) presented a chunk-to-string translation model where the decoder generates a translation by first translating the words in each chunk, then reordering the translation of chunks. Our model distinguishes from their model mainly in reordering model. Their model reorders chunks resorting to a distortion model while our model re-orders chunks according to SCFG rules which retain the relative positions of chunks.

Nguyen et al. (2008) presented a tree-to-string phrase-based method which is based on SCFGs. This method generates SCFGs through syntac-tic transformation including a word-to-phrase tree transformation model and a phrase reordering model while our model learns SCFG-based rules from word-aligned bilingual corpus directly
There are also some works aiming to introduce linguistic knowledge into the hierarchical phrase-based model. Marton and Resnik (2008) took the source parse tree into account and added soft con-straints to hierarchical phrase-based model. Cherry (2008) used dependency tree to add syntactic cohe-sion. These methods work with the original SCFG defined by hierarchical phrase-based model and use linguistic knowledge to assist translation. Instead, our model works under the new defined SCFG with chunks.

Besides, some other researchers make efforts on the tree-to-string model by employing exponentially alternative parses to alleviate the drawback of 1-best parse. Mi et al. (2008) presented forest-based trans-lation where the decoder translates a packed forest of exponentially many parses instead of i-best parse. Liu and Liu (2010) proposed to parse and to trans-late jointly by taking tree-based translation as pars-ing. Given a source sentence, this decoder produces a parse tree on the source side and a translation on the target side simultaneously. Both the models per-form in the unit of tree nodes rather than chunks. 6.1 Data Preparation Data for shallow parsing We got training data and test data for shallow parsing from the standard Penn Tree Bank (PTB) English parsing task by splitting the sections 02-21 on the Wall Street Journal Portion (Marcus et al., 1993) into two sets: the last 1000 sentences as the test set and the rest as the training set. We filtered the features whose frequency was lower than 3 and substituted  X  X  and  X  X  with  X  to keep consistent with translation data. We used L 2 algorithm to train CRF.

Data for Translation We used the NIST training set for Chinese-English translation tasks excluding training data, which contains 470K sentence pairs. For the training data set, we first performed word alignment in both directions using GIZA++ toolkit (Och and Ney, 2000) then refined the alignments using  X  X inal-and X . We trained a 5-gram language model with modified Kneser-Ney smoothing on the Xinhua portion of LDC Chinese Gigaword corpus. For the tree-to-string model, we parsed English sen-tences using Stanford parser and extracted rules us-ing the GHKM algorithm (Galley et al., 2004).
We used our in-house English-Chinese data set as the development set and used the 2008 NIST English-Chinese MT test set (1859 sentences) as the test set. Our evaluation metric was BLEU-4 (Pap-ineni et al., 2002) based on characters (as the tar-get language is Chinese), which performed case-insensitive matching of n-grams up to n = 4 and used the shortest reference for the brevity penalty. We used the standard minimum error-rate training (Och, 2003) to tune the feature weights to maximize the BLEU score on the development set. 6.2 Shallow Parsing The standard evaluation metrics for shallow parsing are precision P, recall R, and their harmonic mean F1 score, given by:
P =
R = Besides, we need another metric, accuracy A, to evaluate the accurate rate of individual labeling de-cisions of every word as For example, given a reference sequence B-NP I-NP I-NP B-VP I-VP B-VP, CRF out-puts a sequence O-NP I-NP I-NP B-VP I-VP I-NP, then P = 33 . 33% , A = 66 . 67% .
 Table 1 summaries the results of shallow parsing. For  X  X  and  X  X  were substituted with  X  , the perfor-mance was slightly influenced.

The F1 score of all chunks is 91.25% and the F1 score of One and NP, which in number account for about 90% of chunks, is 90.65% and 94.22% respec-tively. F score of NP chunking approaches 94.38% given in Sha and Pereira (2003). 6.3 Performance Comparison We compared our loose decoder and tight decoder with our in-house hierarchical phrase-based decoder (Chiang, 2007) and the tree-to-string decoder (Liu et al., 2006). We set the same configuration for all the decoders as follows: stack size = 30, nbest size = 30. For the hierarchical chunk-based and phrase-based decoders, we set max rule length to 5. For the tree-to-string decoder, we set the configuration of rule extraction as: the height up to 3 and the number of leaf nodes up to 5.

We give the results in Table 2. From the results, we can see that both the loose and tight decoders outperform the baseline decoders and the improve-ment is significant using the sign-test of Collins et al. (2005) ( p &lt; 0 . 01 ). Specifically, the loose model has a better performance while the tight model has a faster speed.

Compared with the hierarchical phrase-based model, the loose model only imposes syntactic cohe-sion cohesion to nonterminals while the tight model imposes syntax cohesion to both rules and nonter-minals which reduces search space, so it decoders faster. We can conclude that linguistic syntax can indeed improve the translation performance; syntac-tic cohesion for nonterminals can explain linguis-tic phenomena well; noncohesive rules are useful, too. The extra time consumption against hierarchi-cal phrase-based system comes from shallow pars-ing.

By investigating the translation result, we find that our decoder does well in rule selection. For exam-ple, in the hierarchical phrase-based model, this kind of rules, such as and so on, where  X  stands for the target component, are used with a loose restriction as long as the ter-minals are matched, while our models employ more stringent constraints on these rules by specifying the syntactic constituent of  X  X  X . With chunk labels, our models can make different treatment for different situations.
Compared with the tree-to-string model, the re-sult indicates that the change of the source-side lin-guistic syntax from parses to chunks can improve translation performance. The reasons should be our model can reduce parse errors and it is enough to use chunks as the basic unit for machine translation. Al-though our decoders and tree-to-string decoder all run in linear-time with beam search, tree-to-string model runs faster for it searches through a smaller SCFG-motivated space. 6.4 Influence of Cohesion We verify the influence of syntax cohesion via the loose model. The cohesive model imposes syntax cohesion on nonterminals to ensure the chunk is re-ordered as a whole. In this experiment, we introduce a noncohesive model by allowing a nonterminal to match part of a chunk. For example, in the nonco-hesive model, it is legal for a rule with the source side to match in Figure 1 (a), where  X  X equest X  is part of NP. As well, the rule with the source side can match In this way, we can ensure all the rules used in the cohesive system can be used in the noncohesive sys-tem. Besides cohesive rules, the noncohesive system can use noncohesive rules, too.

We give the results in Table 3. From the results, we can see that cohesion helps to reduce search space, so the cohesive system decodes faster. The noncohesive system decoder slower, as it employs
System Number Dev NIST08 Speed loose two 0.2936 0.4023 1.429 loose three 0.2978 0.4037 2.056 more rules, but this does not bring any improvement of translation performance. As other researches said in their papers, syntax cohesion can explain linguis-tic phenomena well. 6.5 Influence of the number of nonterminals We also tried to allow a rule to hold three nonter-minals at most. We give the result in Table 4. The result shows that using three nonterminals does not bring a significant improvement of translation per-formance but quite more time consumption. So we only retain two nonterminals at most in a rule. In this paper, we present a hierarchical chunk-to-string model for statistical machine translation which can be seen as a compromise of the hierarchi-cal phrase-based model and the tree-to-string model. With the help of shallow parsing, our model learns rules consisting of either words or chunks and com-presses adjacent chunks in a rule to a nonterminal, then it searches for the best derivation under the SCFG defined by these rules. Our model can com-bine the merits of both the models: employing lin-guistic syntax to direct decoding, being syntax co-hesive and robust to parsing errors. We refine the hi-erarchical chunk-to-string model into two models: a loose model (more similar to the hierarchical phrase-based model) and a tight model (more similar to the tree-to-string model).

Our experiments show that our decoder can im-prove translation performance significantly over the hierarchical phrase-based decoder and the tree-to-string decoder. Besides, the loose model gives a bet-ter performance while the tight model gives a faster speed. We would like to thank Trevor Cohn, Shujie Liu, Nan Duan, Lei Cui and Mo Yu for their help, and anonymous reviewers for their valuable com-ments and suggestions. This work was supported in part by EPSRC grant EP/I034750/1 and in part by High Technology R&amp;D Program Project No. 2011AA01A207.

