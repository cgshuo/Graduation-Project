 1. Introduction
In the automotive industry, the success of a design project is mainly based upon the diffusion of knowledge  X  not only between the stakeholders contributing to the current design project, but also between stakeholders contributing to different projects. As a consequence, knowledge management systems are born to provide required knowledge at the right time, to the right agent, in the required form ( Bernard and Tichkiewitch, 2008 ).

In this context, many approaches exist to manage and optimise the diffusion of knowledge and information during a product development process: personalisation-oriented approaches on one hand, and codification-oriented approaches on the other ( McMahon et al., 2004 ). Personalisation-oriented approaches focus on the setup of communities of practices ( Amin and Roberts, 2008 ).
Stakeholders in the design process are able to share their knowl-edge by setting up organisational structures (sector meetings, project platforms, websites for sharing data, etc.). Codification-oriented approaches focus on the formal expression of knowledge via models that are sufficiently complete and consistent for subsequent use. There are many types of solutions. They range from solutions aiming solely to take over the knowledge expressed by an individual (e.g. a book, an article) to those intended to give significant assistance to the individual in his task, or even replace him in carrying it out  X  e.g. knowledge-based engineering applica-tions using Artificial Intelligence technology ( Moka, 2000 ). The increase in data volumes in engineering ( Triantaphyllou et al., 2002 ) suggest that the solutions preferred today are those backed by digital technology.

In this article, we examine a digital solution, which is halfway between those described above, and is simple to implement. It relies on the use of parameterised files, which are frequently used in redesign processes  X  design processes encompassing routine and innovative design, as described by Gero (1990) . Such solu-tions are not new; but to our knowledge, there is no dedicated name for them in a knowledge-centric view. Here, we will call them Parameterised Knowledge Objects (PKOs). This terminology is discussed in Section 2.1 .

Based on the state of the art presented in Section 2 , we point out the following facts for this study: Fact 1 (discussed in Section 2.1 ) : PKOs are widely used and encapsulate part of the company knowledge. This knowledge is not static but dynamic in nature. It is completed during the product development process itself.
 Fact 2 (discussed in Section 2.2 ) : Knowledge Management Tools (KMTs) and Product Data Management (PDM) only manage files by using metadata. The user is therefore totally respon-sible for their content: project stakeholders must open the file in order to access a required piece of knowledge. The level of granularity of these tools is not refined enough for a good use of these PKOs in a design project.

Fact 3 (discussed in Section 2.3 ) : Knowledge expressed in PKO is redundant and few approaches exist to make them interact.
Based on these three facts, our motivation for this paper is to develop an information system enabling the automated exchange of parameters between PKOs . This system will save users from the fastidious, error-prone and time-consuming work of transferring information and knowledge between these objects. We propose a conceptual model, i.e. a model making it possible for its authors to bridge the gap between their mental representations of the solution their proposed and the solution itself ( Ben-Ari et al., 2006 ). This conceptual model is characterised by the integration of a semantics-oriented static representation of all the parameters encapsulated in the PKOs, and of a dynamic representation of the exchange of these parameters in a heterogeneous project environment  X  since there exist numerous applications to process these files. The model aims to help with the implementation of IKOES : an Inter-Knowledge Objects Exchange System.
 Section 2 details the state-of-the-art summarised above.
Section 3 is dedicated to presenting the conceptual model. The implementable nature of this model is validated in Section 4 through the presentation of a demonstrator tested on an applica-tion provided by our industrial partner, the Renault Powertrain
Technology Design Department. 2. Knowledge objects and support tools 2.1. Knowledge and knowledge objects
The work of various researchers has dealt with the characterisa-tion of knowledge in a conceptual approach ( Tsuchiya, 1993 ; Ermine et al., 1996 ; Baizet, 2004 ). A consensus seems to have been reached, on the fact that knowledge is reflected by adding a semantics level and a contextualisation level to tangible or intangible data. The formal expression of knowledge therefore resides in a representation of the whole  X  data, semantics and contextualisation  X  that is as faithful as possible. To convey this representation, a support medium is required. Knowledge objects are one such medium. The notion of knowledge objects has already been developed in the literature.
Baizet (2004) ,basedonworkby Prudhomme et al. (2001) ,describes them as artefacts that enable an individual to construct his own knowledge. In this work, a knowledge object is defined in a relatively generic manner. It can refer to a book, a calculation report, an equation, a simulation method, etc. More recently, following the same approach, Cacciatori (2008) has developed the notion of  X  X  X emory objects X  X . The author makes a distinction between two types of memory objects. On one hand, objects of a static nature containing  X  X  X ecommendations X  X , as we ll as relatively fixed representa-tions of knowledge that remain unchanged from project to project.
Above all, their goal is to enable the individual to construct his knowledge without the systematic assistance of the people who hold this knowledge. On the other hand, objects of a reconfigurable nature are  X  X  X onstructed through the recombination of relatively immutable components X  X . They do not replace dialogue between project stake-holders but are intended to provide them with a well-defined context.
They  X  X  X nable firms to build on experience, while maintaining the flexibility necessary to adapt to the specificities of each project. X  X  The author thus demonstrates how knowledge of a strategic nature (e.g. how to make a bid in a private finance initiative project) can be formally expressed and used by means of an Excel file.
In this article, we focus on these reconfigurable memory objects. However, Cacciatori (2008) specifies that the terms used ( X  X  X emory X  X ,  X  X  X emembering X  X ) have connotations. They are intended to represent the fact that the author is focussing on the processes of knowledge storage and extraction, not on those of creation and modification. On the other hand, we are interested in this dynamic aspect of knowledge. We will therefore use the term  X  X  X nowledge object X  X  which tends to represent the same concept from a different perspective. In light of the generic nature of this concept, we will make it more specific by using the term  X  X  X arameterised X  X . Parameterised Knowledge Objects (PKOs) are therefore defined as digital files that enable a predetermined set of data (or parameters) to be specified, in order to produce a result. The predetermined set of data and the expected result, together with the relationship between this data and this result constitute a representation of a certain part of the company X  X  knowledge. These PKOs are used to specify the data and to obtain the result, in a given project, in the context of a product redesign process (as defined in Section 1 ). 2.2. Knowledge Management Tools and Product Data Management Tools
PKOs encapsulate part of the company X  X  knowledge in a distributed manner. Their flexible nature generates possibilities for the dissemination of this knowledge, both inside and outside the company. Tools are therefore required in order to maintain control over this asset in the context of product design, namely KMTs and PDM.

KMTs are dedicated to managing a company X  X  knowledge assets. In view of the rapid development of this discipline since the Nineties, a particularly wide variety of technologies has been adopted. Nonetheless, authors who have carried out analyses of these tools all agree that they notably consist of databases in which the documents evidencing company knowledge can be stored and shared ( Ngai and Chan, 2005 ; Joo and Lee, 2009 ; Vaccaro et al., 2010 ). Joo and Lee (2009) endeavour to describe the causes of dissatisfaction of the users of such tools. One element of dissatisfaction is the lack of integration in terms of accessibility to the documents X  internal data, which constitutes an acknowledged limit to these tools. They propose the use of Semantic Web technology to circumvent this limit, but they accept that present tools do not enable the automatic extraction of unstructured data from sources such as spreadsheet files.

PDM, originally dedicated solely to the management of CAD files, is now being used to manage all product data and related information ( Hsu and Hwang, 2004 ; CIMdata, 2011 ). Nowadays, these tools appear to have the  X  X  X bility to capture and manage enterprise intellectual assets throughout the product definition life cycle X  X  ( CIMdata, 2011 ). It therefore positions itself as a possible competitor for knowledge management tools. However, an analy-sis conducted by Pikosz and Malmqvist (1996) refers to the same limitations as those of knowledge management tools in terms of integration. These tools  X  X  X an only see metadata, which is data about data (e.g. document ID, version, creator, status, etc.), whereas the document is treated as a black box X  X . Our bibliographic study has not revealed any sources more recent than the work of Pikosz and Malmqvist (1996) mentioning these shortcomings of PDM. However, although their analysis is not very recent, our use of tools such as Windchill (PTC), Enovia (Dassault Syst emes) and Team-Center (Siemens) has confirmed these limitations.

KMTs and PDM, although they are necessary to the manage-ment of PKOs, do not propose mechanisms that address optimisa-tion of the use of the content of these files. 2.3. Working towards an Inter-Knowledge Objects Exchange System
The knowledge encapsulated in tangible objects such as PKOs is necessarily incomplete, heterogeneous and redundant ( Grundstein et al., 2003 ). The incompleteness is due to their synthetic objective and their limited storage capacity. As PKO often act as boundary objects between various professional sectors ( Cacciatori, 2008 ), this leads to heterogeneity. And because of these two facts, redundancy appears when a same professional sector is involved with different PKOs. In this context, the more PKOs there are in the design project environment, the more it will be time-consuming and tedious to manually transfer information and knowledge between them. Nevertheless, there is currently no global approach to enable automatic sharing of knowledge expressed in these files.
The scientific field of Knowledge-Based Engineering (KBE), which  X  X  X oncerns computerisation of processes associated with industrial products  X  usually routine design X  X  ( Moka, 2000 ), is appropriate to situate this approach. However, it should differ from approaches, which aim to design actual KBE applications. Indeed, these applications, developed according to the MOKA methodology ( Skarka, 2007 ), the Common KADS methodology ( Sutton and Patkar, 2009 ), or more ad hoc methodologies ( Chapman and
Pinfold, 2001 ; Yoshioka et al., 2004 ), aim to solve very specific problems and broadly lead to developing rich ontological models.
Creating and maintain these models required the appropriation of a significant level of expertise, which does not match with the initial context of a need for simplification, which surrounds PKOs.
Moreover, literature mentions few tools whose goal is to share knowledge between PKOs. This type of approach appears to be taking shape in the work of Badin et al. (2010) in the context of the
Alliance des Donne  X  es Nume  X  riques (ADN) project. The authors propose a product model to interrelate files relating to CAD models and parameterised simulation models. This model should enable users to capitalise on parameters, mathematical relations, rules, limit conditions and discrete values according to several configura-tions of parameterised models. The implementation of this model is referred to but not in great detail. In addition, although the model is particularly complex, no consideration has been given to the stage at which the knowledge is formally expressed within the tool (this stage is viewed as being completed). 3. Proposed conceptual model
Our work positions itself on the grounds described in Section 2.3 but in a broader perspective in ter ms of the PKO formats considered (Excel files in particular), and a more restricted perspective in terms of the complexity of the underlying model  X  it must be possible for information to be fed into the model using quickly accessible expertise. These requirements relate to the industrial context for the implementation of our work, in close collaboration with a major manufacturer.
 In this article, we propose a Computational Independent Model (CIM)-type of conceptual model following a Model Driven
Architecture (MDA) approach ( OMGa, 2003 ). The purpose of this model is to describe a design solution from a design point of view. Specifically, it aims to be translated into a Platform Independent
Model (PIM) and then into a Platform Specific Model (PSM), in order to allow the implementation of IKOES. Throughout the description of the proposed conceptual model we will use the product example of a screwed assembly, to make this description more concrete. This example is based on the parameters described in Fig. 1 and is reused in Section 4 (validation section). 3.1. Conceptual model architecture To make the automated exchange of parameters between PKOs possible, our conceptual model is based on four pillars (cf.
Fig. 2 ) which enable the representation of the data ( data pillar), the structuring of the data ( data structure pillar), the representation of the activities using this data ( activities pillar), the sequentialisation of these activities ( process pillar).
The data and data structure pillars develop a static focus to represent the parameters as well as the relations between para-meters from a semantic point of view. The activity and process pillars develop a dynamic focus to represent exchanges of para-meters between one PKO and another. This dynamic focus is essential, since it underlies the added value of the IKOES informa-tion system, which we wish to implement. It represents the actual work of cross-matching and copying parameters, carried out by PKO users. Relatively to this focus, the static focus is necessary.
We will describe each of the pillars of this architecture in the following sections. In terms of completeness, the model has been evaluated, regarding whether it contained the basic bricks to enable exchanges. This evaluation is materialised by the devel-opment of a demonstrator tested on an industrial application presented in Section 4 . 3.2. Data structure The UML data structure model ( OMGb, 2009 ) is shown in
Fig. 3 . Its aim is to enable the specification of parameters by a user in such a way as to describe its semantics. It reflects a compro-mise between the rich ontological models, which can be found in a KBE application, and classic descriptive methods such as classifications.

The datum class represents the parameter to be shared without any particular reference to semantics. It enables the qualitative nature of the characteristics of the parameter to be described (e.g. its type:  X  X  X umerical X  X  or  X  X  X ext X  X ). The datum definition class represents the first level of semantic description associated with a datum (e.g. the parameter is a  X  X  X iameter X  X ). A datum can only be associated with one single datum definition . The aim of this constraint is to avoid the possibility of a misunderstanding. In this article we consider the set [ datum definition / datum ] as one piece of information. In order to complete this first level of semantics, a piece of information may be contextualised. To achieve this contextualisation, we use the principle of a faceted classification ( Ranganathan., 1950 ). We consider three contextua-lisation facets: organisational, functional and structural. These facets are evidenced by means of context objects organised in a hierarchical form. Hierarchical structures are defined beforehand and cannot be modified by the user.

The organisational context enables the PKOs to which the information belongs to be specified (e.g. a CAD screwed assembly model). This localisation viewpoint relates to the fact that our work takes place in a heterogeneous environment (cf. Section 1 ).
The functional context enables information to be channelled into the professional sector environment where the information is used and generally refers to a group of project stakeholders sharing a common activity (e.g. the static testing sector). The structural context is intended to specify which product element this information belongs to (e.g. the cylinder head). It is possible to specify several context classes of the same nature for a piece of information, except for the structural context . The restriction is justified by the need to maintain control over the specification of synonymous parameters by partly curbing the possibilities for contextualisation. Before defining a parameter, the user only needs to check that it has not already been defined for the product element involved  X  the choice of the structural context as the exclusive context is linked to our product data-oriented working environment in the context of a redesign process. We consider the set ( contexts [ datum definition / datum ]) as being knowledge representation (cf. Section 2.1 ). Knowledge represen-tation therefore consists of n organisational contexts , m functional contexts , one structural context , one datum definition and one datum with n Z 1 and m Z 1.

The flow objects enable relations between the parameters to be defined. These relations apply to the values of the parameters, which are to be specified over the course of the project. They are therefore not known beforehand. As is the case for data objects, flow objects are defined by the user. A compromise has therefore been made in this model, between the possibility of defining complex relations, and the user X  X  ability to model and subse-quently manage these relations. Thus the inter-data definition flow class corresponds to the representation of a one-direction relation with only one resulting datum definition (parameter semantics).
The simple nature and analysis possibilities of flows defined in this manner (i.e. simple association rules) have been the subject of several studies ( Chen et al., 2002 ; D X  X nza et al., 2008 ). This relation can be mathematical or rule-based (if structure). It will then become the subject of formal interpretation by a calculation tool, which can execute this type of relation. As for data, a level of semantics and contextualisation must be added to flows. The flow definition class represents the semantics level (e.g.  X  X  X hysical law X  X ). It must be contextualised. The organisational context class allows us to specify which supplier PKOs and which client PKOs can be brought into play in the inter-parameter relation. All the relation entry parameters must be available for a given supplier PKO. The functional context class provides information on the professional sector environment in which this flow is defined. Structural contextualisation is not necessary since the informa-tion ([ datum definition / datum ]) is exclusively classified according to this context.

Fig. 4 gives an example of an instance for flow-type knowledge representation. The dotted lines in the hierarchical structures express the fact that they are not fully represented for space and confidentiality reasons. It should be noted that this example highlights the fact that there is no notion of implicit inheritance relative to the hierarchical structures. Indeed, these structures use a subsumption relationship, the semantics of which are more conceptual (i.e. relative to a shared set-oriented logic) than formal. This inheritance must therefore be explicitly specified. 3.3. Data
The UML model relative to data is shown in Fig. 5 . The aim of this model is to accurately describe the parameters present in each PKO. It differs from the structure model, the aim of which is to reconcile the parameters present in a distributed manner in each PKO.

This model uses the semantic annotation concept. This is a concept known from the Semantic Web ( Gomadam et al., 2010 ). Its goal is to represent the semantics of a concept defined within an ontology, by means of a string of characters. An instance of a semantic annotation model is thus linked to a well-defined numerical parameter and evidenced within a PKO. It is made up of an ordered series of identifiers with separators taken from the data structure model. This series of identifiers is selected in such a manner as to model the semantics and the exact level of contextualisation of the selected parameter. Thus a semantic annotation is composed of h organisational contexts (since the selected parameter is located in an identified environment), p functional contexts (since the parameter can be shared by several professional sector environments), one structural context (since the data structure model is exclusive to this context), one datum definition and one datum with n Z h Z 1( n being the number of organisational contexts associated with knowledge representation that have the same datum definition in the data structure model) and m Z p Z 1( m being the number of functional contexts asso-ciated with knowledge representation, which have the same datum definition in the data structure model). It should be noted that a semantic annotation is less contextualised than the knowl-edge it refers to. This is due to the fact that a knowledge object has been constructed in a particular context and, this context does not encompass all the semantics reconciled in the data structure model, which corresponds to that of several PKOs. A semantic annotation can thus be seen as a fragment of knowledge representation. In certain cases, a PKO parameter may be generic over several structural contexts. This is the same PKO parameter that can be used to specify different products (e.g. a diameter parameter, which corresponds to the diameter of part 1 or part 2, depending on the ongoing study). In view of the exclusive nature of the structural context (cf. Section 3.2 ), this parameter cannot be described by just one semantic annotation concept. We propose to semanticise this type of parameter by defining several parameters on different structural contexts in the data structure model and then, use several semantic annotations. This method enables us to compensate for the descriptive limit of our data structure model.
 Fig. 6 shows an example of a semantic annotation instance.
This example is applied to the diameter parameter of a well-identified, parameterised CAD model. 3.4. Activities
In a dynamic approach, activities are intended to represent the operations that enable exchanges between knowledge objects based on our static approach (data structure model, data model). They are represented by means of BPMN models ( OMGc, 2011 )in
Fig. 7 . In these models, preparation activities for the exchange, publication and management of annotations require the assis-tance of a user. The others are automatic.

The exchange preparation activity (a) enables the user to select the supplier X  X  organisational context, the client X  X  organisational context and the functional context in which the exchange is to take place.

The publication activity (b) enables the user to select a list of parameters to be exchanged. It enables the recovery and publica-tion of a list of semantic annotations and related parameter values to be supported, from a PKO.

The aim of the semantic annotation management activity (c) is to handle the processing of simple and multiple semantic annota-tions (cf. Section 3.3 on the generic parameters relative to several structural contexts). In the case of simple annotations, it reduces the number of context identifiers in the annotations published. For the organisational contexts, only the supplier X  X  organisational context specified in the preparation task is retained. For the functional contexts, only the functional context, specified in the preparation task, is retained. Should multiple annotations exist, user intervention is requested to specify the current structural context. Based on this information, only the semantic annotation corresponding to the specified structural context is retained. This semantic annotation is then processed in the same way as a simple semantic annotation.

The purpose of the conversion activity (d) is to convert a list of semantic annotations and parameter values from one PKO to another.
This activity takes into account the relations between the parameters specified in the data structure model by means of flow objects. It brings into play a conversion mechanism, described in Fig. 8 .
The aim of the extraction activity (e) is to update a list of parameter values within a PKO, from a list of semantic annota-tions and related values. A simple mapping mechanism between the identifiers contained in the semantic annotations is used: for a given semantic annotation in the list, the annotation for the matching PKO parameter must contain at least the same identi-fiers. It can contain more (cf. definition of a semantic annotation in Section 3.3 ).

The close-off activity (f) enables us to indicate the end of the exchange.

The model indicates that the entry and/or output list artefacts for the first three activities are the subject of a contract. This contract relates to the fact that, although the model enables a certain level of semantics for a parameter to be taken into account, it does not cover the value of this parameter, which is specified during the project. This implicit contract requires that the value associated with the semantic annotation in the list artefact correctly matches the value related to the parameter in the PKO. 3.5. The process
The objective of the process model is to describe how activity sequences are established and to attach them to an executing application. Its implementation must enable user interventions to be kept to a minimum during an exchange between PKOs. Fig. 9 shows the BPMN model of the process.

The exchange process starts with an initialisation event triggered by the user from his/her professional application inter-face. The user then specifies the exchange conditions by means of the  X  X  X repare the exchange X  X  activity in the IKOES central module.
From this point, one application takes on the role of the client, and the other, that of the supplier. These roles can be reversed in subsequent exchanges. Activities are subsequently rolled out in sequence by means of events with the assistance of the user, when required (cf. Section 3.4 ).

This model proposes a distributed vision of IKOES, the system we aim to implement. It supposes the need to customise profes-sional sector applications and does not facilitate control over the life cycle of semantic annotations. Uren et al. (2006) have already proposed that the centralised management of annotations should enable greater control over the life cycle of these annotations.
However we have endeavoured to propose this solution for the following reason: access to PKOs in a project context is frequently regulated by means of PDM or KMTs. By using semantic annota-tions supported by PKOs we do away with difficulties such as: managing access rights to annotations (which are assumed on files by PDM or KMTs) and maintaining links between documents and their annotations (which would be fastidious depending of the life cycle of the file itself). In addition, giving the application, which handles PKOs the role of publishing and extracting these semantic annotations and the value of the associated parameters, enables us to limit interoperability problem  X  since the IKOES central module does not have to carry out the task of searching for these elements inside the file. 4. Validation of the conceptual model 4.1. Demonstrator architecture
To validate the implementable nature of our conceptual model, we have produced a demonstrator, the distributed archi-tecture of which is shown in Fig. 10 (the textures of the different boxes in Fig. 10 are linked to those in Fig. 2 ). 4.2. Details of demonstrator elements and implementation technology
Table 1 shows the demonstrator elements, their relationship with the conceptual model and the implementation technology used. 4.3. Demonstrator tests We implemented and tested this demonstrator at Renault Powertrain Technology Design Department, our industrial partner semantic annotations and for this work. Details of the application case study are given below.

The PKOs proposed are as follows: a parameterised CAD model, representing a screwed assembly (cf. Fig. 11 ), a parameterised Excel file to calculate tolerance stake-up for a screwed assembly (cf. Fig. 12 ).
 The applications used, which enabled the processing of these PKOs, were an off-the-shelf CAD application (CATIA V5) and the Excel application.

The first stage of our work involved the formal expression of knowledge in the dictionary, based on the following scenario: a PKO manager manually completes the PKO parameters in the
Excel dictionary file. The contexts defined are as follows: two organisational contexts (a CAD screwed assembly template, a screwed assembly dimension chain file), three structural con-texts (screw, exhaust manifold and cylinder head) and a functional context (static test). Fig. 13 shows an extract from this file where O1, O2, F1, S2 are, respectively, the identifiers for
CAD screwed assembly template, screwed assembly dimension chain file, static test and cylinder head, the PKO manager manually completes the formulas (in the form of VBA methods) in the converter then enters the identifiers for these formulas in the Excel dictionary file  X  i.e. in the  X  X  X elation X  X  attribute of the inter-data definition flow class (cf. Fig. 3 ), the PKO manager constructs the semantic annotations by retrieving the identifiers of elements from the dictionary and fill in the PKO semantic attributes (cf. Figs. 11 and 12 ).
The second stage of the work consisted of the actual specifica-tion of the PKO parameter values. This work constitutes an every day task of a designer in a redesign process. The following design loop was implemented: a designer sets the dimensions for the screwed assembly in the
CAD model, the designer automatically transfers the defined parameters (nominal dimensions) via the IKOES demonstrator to the tolerance stake-up file, the designer calculates the tolerance stake-up in the appro-priate PKO and thus balances the nominals, the designer automatically transfers the tolerance stake-up file parameters to the CAD model, via the IKOES demonstrator.
Following this stage, some research gaps have been high-lighted for our conceptual model:
The first research gap relates to the data structure model . The simultaneous transfer of several instances of the same para-meter is not supported. This case occurs when a PKO is able to process several configurations of a parameter with the aim of retaining only one of them.

The second research gap relates to the data structure model . The use of several syntaxes for the same datum is not supported (e.g. value x of the diameter parameter can be written as  X  X  x  X  X  or  X  X  X  x  X  X , depending on the PKO). In fact, our data structure model allows a datum definition to be associated with only one datum , cf. Fig. 3 .

The third research gap relates to the activity model. The algorithm for the conversion of semantic annotations and the exchange preparation activity can be optimised in order to manage the definition of relations, whose input parameters are distributed between several PKOs  X  as may be the case in an assembly.
The fourth research gap relates to the process model . At the time of an exchange, the considered parameters are necessarily  X  X  X ushed X  X  from the supplier PKO to the client PKO. If the client
PKO is not well-known by the user, it is therefore possible to transmit more parameters than is strictly necessary. Although the converter implements a filter (via the conversion algorithm, cf. Section 3.4 ) to ensure that only parameters that can be understood by the PKO are transmitted, this exchange is not optimal. A possibility for improvement of this point would be to define a parameter request process from the client PKO. 5. Discussion
Relative to our motivation expressed in Section 1 , the feedback from professional sector groups was positive. An information system of this type does not modify the initial objective of PKOs, which is to act as boundary objects and adaptable memory devices across projects ( Cacciatori, 2008 ). As shown in the case study, it does not imply any strong modification in the way knowledge is formulated and structured in the file due to the parameter approach. It is therefore possible to reuse existing
PKO X  X . Moreover by reducing the lead time and by making it less tedious to transfer parameter values between PKOs, this system should enable PKOs to be used further upstream in redesign projects.

Beyond these goals, the IKOES data structure model spawns elicitation of knowledge. Indeed, it enables the construction of a map on interrelated parameters; at level of granularity, which is not usually tackled by off-the-shelf tools (PDM and KMTs). This cartography supposes the preliminary identification of the PKOs sharing same parameters or parameters that can be deduced from one another following simple association rules. The complete identification of these files does not seem trivial to our industrial partner. Tools used to manage these files today, do not always show a sufficient descriptive quality to be used in this intent. For example, it can be difficult to extract from such tools, the overall parameterised files concerning a particular product part (these files likely having common or linked parameters). The works of
Joo and Lee (2009) , which mention the limitations of KMTs in terms of search capacity, tends to generalise this point. In addition, setup interviews in specific professional sectors can be particularly long. Indeed, as the use of these files is strongly fragmented, they cannot be identified by only a few individuals. A progressive supply of parameters in the system seems necessary (this would contribute to justify the simplicity requirement of the underlying model). Nevertheless, this last approach seems to be moderate insofar as the profitability associated with IKOES implementation has to be proven by first elements of cartogra-phy: to assess the overall gain in terms of lead times, a study is in process at Renault Powertrain Technology Design Department to map relevant PKOs. The time and resource-intensive nature of this work can be seen as an obstacle to the development of a system aiming at parameters management and probably justify that there is currently not much work done on this topic. Never-theless, we believe that it constitutes an important step for industrial organisations, enabling them to achieve a global approach of their knowledge considering a granularity level often out of control. 6. Conclusion
In large manufacturing companies, optimising the diffusion of knowledge is a lever towards improving the success of product redesign processes. Various approach strategies exist to contri-bute to this optimisation. Among them, the use of parameterised knowledge objects is a simple, flexible and often-used practice.
In this article, we have proposed a conceptual model to implement IKOES: an Inter-Knowledge Objects Exchange System.
This system enables users to avoid the fastidious work of copying or adapting parameter values from one PKO to another and thus reduces the resulting lead times and risks of error. Our conceptual model was evaluated by implementing a demonstrator and testing it in the context of a scenario proposed by our industrial partner, Renault Powertrain Technology Design Department.
Various prospects for future work have been proposed for this conceptual model. The aim of this work will be to enable the model to support the simultaneous exchange of several para-meter instances, the management of several syntaxes for the same parameter, and the integration of a  X  X  X ull processing X  X  parameter exchange.
 Acknowledgement
This work is part of a Ph.D. thesis project jointly undertaken with our industrial partner Renault (Powertrain Technology Design Department).
 References
