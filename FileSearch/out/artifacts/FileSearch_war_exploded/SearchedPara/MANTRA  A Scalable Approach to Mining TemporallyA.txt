 In this paper, we study the problem of mining temporally anoma-lous sub-trajectory patterns from an input trajectory in a scalable manner. Given the prevailing road conditions, a sub-trajectory is temporally anomalous if its travel time deviates significantly from the expected time. Mining these patterns requires us to delve into the sub-trajectory space, which is not scalable for real-time analyt-ics. To overcome this scalability challenge, we design a technique called MANTRA . We study the properties unique to anomalous sub-trajectories and utilize them in M ANTRA to iteratively refine the search space into a disjoint set of sub-trajectory islands . The ex-pensive enumeration of all possible sub-trajectories is performed only on the islands to compute the answer set of maximal anoma-lous sub-trajectories . Extensive experiments on both real and syn-thetic datasets establish M ANTRA as more than 3 orders of magni-tude faster than baseline techniques. Moreover, through trajectory classification and segmentation, we demonstrate that the proposed model conforms to human intuition.
With the proliferation of cheap location tracking sensors, there is an abundance of data that are in the form of trajectories [10, 19]. Trajectory datasets have been mined for applications such as cellu-lar network optimization [13], emergency detection [2], and taxi-route suggestions [19]. In this work, we study the problem of min-ing maximal temporally anomalous sub-trajectories in a scalable manner. Generally, an anomaly is defined as an observation O that deviates significantly from the rest of the data D . A trajectory is temporally anomalous if the time taken by it to cover a route, is significantly more, or less, than the typical time taken by the ma-jority of the vehicles covering the same route.

To illustrate our problem, consider Fig. 1. It depicts the move-ment of 5 different trajectories through the same route starting at road segment 1 and ending at road segment 10 ( x -axis). The y -axis denotes the time taken to cover the road segments. For ex-ample, the point X in the red trajectory T denotes that T has taken 0 . 75  X  60 = 45 minutes to cover the first 3 road segments. Thus, the slope denotes the speed of the trajectory. It is clear that the dotted Figure 1: Illustration of the problem of mining maximal tem-porally anomalous sub-trajectories. green trajectories follow a similar pattern and maintain a uniform speed. On the other hand, T moves much slower till segment 3, and thereon, it moves much faster than the rest of the population. Clearly, the driving pattern of T deviates from the rest. Mathemat-ically, however, we do not reach the same conclusion. Specifically, T takes an hour to reach segment 10 just like all of the remain-ing trajectories. This erroneous conclusion can be corrected if we perform a sub-trajectory level analysis. More specifically, T  X  X  sub-trajectory from segment 1 to 3, denoted as T [1 : 3] , is temporally anomalous since T takes roughly 45 minutes to cover this distance as against the 15 minutes taken by the remaining trajectories. On the other hand, T [4 : 10] is also temporally anomalous since it takes 15 minutes to cover this distance as opposed to 45 minutes taken by the remaining data. In other words, a non-anomalous tra-jectory may contain temporally anomalous sub-trajectories. Con-sequently, we need to delve into the sub-trajectory space.
A sub-trajectory level granularity also allows us to capture the se-mantics of the anomalies since a sub-trajectory could be anomalous due to under-speeding or over-speeding . Certainly, one can iden-tify over-speeding or under-speeding by comparing vehicle speeds with the permissible speed limits in the traveled road segments. However, such an approach has three weaknesses. First, a vast ma-jority of roads in developing countries, such as India, do not have any official speed limits. Second, even when speed limits are avail-able, the  X  X afe X  driving speeds vary with traffic congestion levels, stoppage at traffic signals, weather conditions, road conditions, etc. Finally, beyond modeling, the number of sub-trajectories of a tra-jectory grows quadratically with the number of segments in the tra-jectory and poses a significant scalability challenge. The proposed solution addresses all of the above weaknesses.

A deeper analysis of the example depicted in Fig. 1 reveals that sub-trajectories T [1 : 3] and T [4 : 10] are not the only anomalous sub-trajectories. T [1 : 2] , T [4 : 9] , T [5 : 9] , and in general, all sub-trajectories of T [1 : 3] and T [4 : 10] are also anomalous. However, as they are all fully contained within T [1 : 3] or T [4 : 10] , they do not provide any additional information over maximal anomalous sub-trajectories T [1 : 3] and T [4 : 10] . To remove this information redundancy, we only mine maximal anomalous sub-trajectories.
An obvious question arises at this juncture. Why not simply iden-tify contiguous stretches of road segments where a vehicle deviates from the rest? Semantically, a maximal temporally anomalous sub-trajectory indicates the entire stretch of commute where a vehicle travels significantly faster or slower than the rest. Now, consider a maximal anomalous sub-trajectory S of a bus that covers a route in 15 minutes as opposed to 30 minutes taken by remaining popula-tion. However, within S , the bus was forced to stop at bus stops and traffic signals. Further, in some portions, bus was forced to follow remaining vehicles due to traffic congestion. Thus, although the bus traveled significantly faster than the rest in S , it was interspersed with non-anomalous road segments which do not necessarily im-ply safe intentions of the driver. This pattern is fairly common in urban conditions. Consequently, just identifying anomalous edges does not produce the entire stretch of commute where an anoma-lous pattern is observed and fails to capture the right semantics. So, higher order applications relying on anomalous patterns suffer.
Our algorithm provides powerful insights that can be leveraged in wide range of applications. The anomaly depicted by T in Fig. 1 is a typical scenario that leads to Bus Bunching [14]. In bus bunch-ing, two or more buses that are scheduled to run on the same route at evenly spaced out time intervals, instead start to run together. One of the most common causes that leads to bus bunching is the revenue model where the driver X  X  income is directly proportional to the number of passengers ferried. To maximize revenue, when no other buses are close by, the driver drives slowly to pick as many passengers as possible. By this time, if the next bus catches up, the driver accelerates in an attempt to stay ahead and not lose pas-sengers to its competitor. By mining anomalous sub-trajectories, one can identify the drivers who indulge in such undesirable be-havior. Further, Cab companies (ex. Uber), City buses and trucks install GPS in their vehicles. Our algorithm provides the power be-yond merely rating the drivers. It enables to pinpoint where and how anomalous driving activities occurred, using the GPS traces. Furthermore, car insurance rates are calculated based on the risk profile of the driver. In such scheme, safe drivers gain through lower insurance premiums and companies gain through more ac-curate risk assessment. Currently assessment uses indirect factors such as education, gender, age etc. A more direct and accurate assessment using our algorithm, can be performed by mining the anomalous sub-trajectories in their historical records 1 .
The above applications often need a real-time analysis. For ex-ample, users of cab services rate a driver as soon as their trips end. Users need to be informed about the anomalous portions before they submit their rating. In situations like bus-bunching, a real time monitoring system can be set up to warn the drivers involved in ma-licious practices and to improve passenger safety. To enable such real time analysis, the mining technique must scale.

To address the unsolved problem of mining maximal temporally anomalous sub-trajectories in a scalable manner, we develop a tech-nique called MANTRA (Maximal ANomalous sub-TRAjectories) . Fig. 2 outlines the pipeline of M ANTRA . The road network, in con-junction with the speed distributions, constitutes the background model. M ANTRA derives its power by decomposing a trajectory into a set of anomalous islands . Anomalous islands are partitions of a trajectory such that all maximal anomalous sub-trajectories are contained in the set of islands. At the same time, no maxi-mal anomalous sub-trajectory spans across two islands. Based on these properties, M ANTRA performs a bi-directional sliding win-http://www.forbes.com/sites/jimhenry/2012/09/30/drivers-accept-monitoring-devices-to-earn-discounts-on-auto-insurance/ dow search to mine maximal anomalous sub-trajectories from each island. To summarize, our main contributions are the following:  X  We formulate the problem of mining maximal temporally anoma-lous sub-trajectory in trajectory dataset. We empirically validate, why identifying stretches of contiguous anomalous edges alone does not suffice from application context.  X  To scale the problem for real-time analysis on trajectory, we de-sign a technique called MANTRA . M ANTRA avoids the expensive sub-trajectory enumeration step on the majority of the trajectory by identifying a small set of islands .  X  Extensive experiments on real datasets show M ANTRA as more than 3 orders of magnitude faster than baselines, effective in intu-itive modeling of anomalous driving and up to 87% better in tra-jectory segmentation than using only anomalous edges. First, we define the concepts central to our paper.

D EFINITION 1. R OAD N ETWORK . A road network is a di-rected graph G ( V,E ) . V is the set of nodes representing intersec-tions and terminal points, and E is the set of edges e = ( v connecting v i ,v j  X  V , depicting road segments. The position of a node is characterized by its latitude and longitude.

Trajectories are received in the form of GPS traces, that are tem-porally ordered sequences of spatio-temporal points. A spatio-temporal point s = ( v,t ) is a tuple containing a spatial location v and a timestamp t encoding the time of the day at which v is tra-versed. These GPS-traces are map-matched to the road network G to construct network-constrained trajectories.

D EFINITION 2. N ETWORK -CONSTRAINED TRAJECTORY . T is constrained in a road network G ( V,E ) , if  X  T.s i , T.s and  X  T.s i , T.s i +1 , ( T.s i .v,T.s i +1 .v )  X  E .

In simple words, a network-constrained trajectory is a connected path in the road network. In the network-constrained form, we represent a trajectory T = [ st, ( e 1 ,t e 1 ) ,  X  X  X  , ( e dered sequence of edges and their corresponding travel times. st = T.s 1 .t denotes the time at which T started traveling. We use T.e to denote the i th edge visited by trajectory T and T.t e taken to travel edge e i . e  X  T denotes that T has traveled through e . | T | denotes the size of T in terms of the number of edges tra-versed. A sub-trajectory T [ m : n ] of a trajectory T is the sequence of edges from T.e m to T.e n . We denote the sub-trajectory rela-tionship using S  X  T , where S = T [ m : n ] and 1  X  m  X  | T | , m  X  n  X | T | . A super-trajectory is defined analogously.
Generally, a sub-trajectory S is anomalous if its commute time deviates significantly from the rest of the data D . D characterize the prevailing traffic conditions. We adopt the standard z-score based anomaly model [8]. Let the distribution of travel times in the route covered by S be N (  X  S , X  2 S ) , where  X  S is the mean and  X 
S is the variance. To quantify S as anomalous, we compare how many variances (or standard deviations) away the travel time of S is from  X  S . Mathematically, for a sub-trajectory S , we construct the background set BS ( S ) = { T  X  D | S  X  T } . More simply, the background set of S contains all trajectories in D that contain S as a sub-trajectory. The variance of travel times in these edges is For trajectory T  X  D , sub-trajectory S  X  T is anomalous if where  X  is a user provided threshold. The interpretation of  X  can be obtained from the z-score table [8]. For example, the probability of being more than 4 variance away from the mean, i.e. p ((  X  time S ( S )) 2  X  4  X  2 S )  X  0 . 05 . Based on whether a 0 . 05 chance is low enough to be termed as anomalous, one can set  X  .
 D EFINITION 3. M AXIMAL A NOMALOUS S UB -TRAJECTORY .
 A sub-trajectory S is maximal anomalous sub-trajectory (MAS) if @
S 0  X  T, S 0  X  S and S 0 is anomalous.
 P ROBLEM 1. Let D be the reference dataset of trajectories. For each incoming trajectory, identify all of its maximal temporally anomalous sub-trajectories under a user-provided threshold  X  with respect to D .
Given a trajectory T , the na X ve approach is to enumerate all possible sub-trajectories of T , check if they are anomalous, and then filter out those anomalous sub-trajectories that are not max-imal anomalous. This na X ve approach however suffers from mul-tiple issues. First, a trajectory T over n edges produces O ( n sub-trajectories. O ( n 2 ) is not scalable in real-time settings. Sec-ond, computing the deviation from mean itself is often not possi-ble due to data sparsity. Consider the database of trajectories in Fig. 3(a). Let us focus on T 3 in Fig. 3(a). For the sub-trajectory S = { b,d,c,e } of T 3 , BS ( S ) =  X  . As a result, the mean and the variance in this background set cannot even be computed. This is a common problem when sub-trajectory sizes are large. We establish this observation empirically. We pick random sub-trajectories from the T-drive [19] trajectory dataset and compute the average size of their background sets. As it can be seen in Fig. 3(b), the size of the background set plummets with the size of the sub-trajectory. This analysis gives us one key insight; if the sub-trajectory is small, then the z-score can be computed reliably. Else, we need an alternative.
Sec. 3 outlines the two key challenges of the proposed problem: data sparsity and scalability. First, we address the modeling issue. Figure 3: (a) A road network and a database of network-constrained trajectories. For simplicity, we ignore the times-tamps. (b) Illustration of data sparsity with sub-trajectory size. (c) Correlation among edges against the distance between them. Revisiting Fig. 3(a), we notice that although no trajectory in contains S = { b,d,c,e } , all edges in S have been visited by at least one trajectory. In this situation, a human being would esti-mate the expected time to cover S by aggregating the individual pieces of information on each edge. As shown in Fig. 3(b), there is enough data for individual edges, i.e., sub-trajectories of length 1, and data sparsity is not an issue in this 1-dimensional space. M
ANTRA builds on this same intuition to compute the expected time . Let D be the set of historical trajectories that were travelled on road network G ( V,E ) . For each edge e  X  E , we fit a normal distribution time ( e ) = N (  X  e , X  2 e ) to approximate the distribu-tion of travel times in e . Normal distributions have been shown to characterize traffic speed distributions well [9]. Thus, for a road network G = ( V,E ) , we learn a set N = S N (  X  e , X  2 e N encodes the ongoing traffic conditions.

We model distribution of travel times in sub-trajectory S as a multivariate distribution of its constituent edges. Thus, time ( S )  X  P  X  e  X  S time ( S.e ) = N (  X  S , X  cov ( e,e 0 ) is the covariance and it captures the dependence between travel times of the two edges e and e 0 .

In the above formulation, the term P  X { e,e 0 } X  S cov ( e,e quires storing the covariance matrix on the entire edge set of the road network. Storing the entire covariance matrix is not feasible due to both storage costs and the computation cost of updating them at the arrival of every new trajectory. However if two edges are far apart from each other, then they are likely to be independent in their traffic flow. We show this empirically in Fig. 3(c). It shows the re-sults and brings out two key properties. 1. Dependency exists between edges within 5 hops. 2.  X  e,e 0  X  E,cov ( e,e 0 )  X  0 .

The correlation is highest between edges that are immediate neigh-bors. As we move away from the edge, the correlation drops, and beyond 5, it is close to 0. Furthermore, we do not have negative cor-relation among edges. A negative correlation between edges x and y would mean that if a car takes more than expected time in x , then it would take less than expected time in y . Such a dependence is rare. The more common scenario is where a congestion spreads to neighboring edges or eases out which result in positive covariance. To gain more confidence on the absence of negative correlation, we remove the hop-based constraint and check correlation among 10000 randomly picked edge pairs. We found a correlation close to 0 in this study as well.

Armed with this observation, we integrate them in the M ANTRA framework for more efficient and accurate anomaly detection. We utilize the first property in condensing the covariance matrix. Specif-ically, for each edge we store the covariance matrix with all edges in its 5-hop neighborhood. Whereas non-existence of negative co-variance is utilized later to prune the search space.
We showed earlier that the travel time in a sub-trajectory S can be estimated by aggregating the distributions in its constituent edges. Applying z-score on this expected time of S , however, may produce the following counter-intuitive and impractical result.

T HEOREM 1. S can be anomalous even if the travel times in all of its constituent edges are non-anomalous.
 P
ROOF : Consider S = ( e 1 ,t e 1 ) , ( e 2 ,t e 2 ) . Let ( S.t  X  X  edges are non-anomalous. However, S is anomalous since
Let us now analyze the implications of the theorem in a real life scenario. Essentially, deviate from  X  e in each road segment e , and still be non-anomalous in that edge. This is analogous to driving within the permissible speed limits. Now, Theorem 1 shows that a driver who drove non-anomalously in all segments could still end up being classified as anomalous in sub-trajectory S . Clearly, such an anomaly model goes against the human intuition. We therefore need a model where for a sub-trajectory to be anomalous, it must contain at least one edge with an anomalous travel time. Towards that, we define the deviation of S by aggregating deviations in its constituent edges. where d e = |  X  e  X  S.t e | is the deviation from the expected time at edge e and I ( e ) is an indicator function detecting under-speeding or over-speeding.
 S is anomalous if We call an anomalous sub-trajectory S as positively anomalous if dist ( S ) is positive, and negatively anomalous otherwise.
T HEOREM 2. Based on the anomaly definition of Eq. 8, a sub-trajectory S cannot be anomalous unless it has at least one anoma-lous travel time in an edge.
 P
ROOF : Consider the case where the travel times in each edge deviates the most from their means without being anomalous and  X  e, I ( e ) = 1 . Therefore, d 2 e =  X  X  2 e . dist ( S ) = P  X  X 
S . S is non-anomalous since contribution from covariance.

E XAMPLE 1. Fig. 4 shows a sample trajectory T and the MASs contained in it. For each edge, Fig. 4 also shows the I ( e ) d nent to the dist ( T ) function (Eq. 8). Assume  X  e,e 0 , X  e ) = 0 , X  = 1 . Thus, a sub-trajectory S  X  T is anomalous if the average of I ( e ) d 2 e in its edges is larger than 1 or less than -1. Figure 4: The MASs in the shown example. Red edges denote the anomalous edges ( | I ( e ) d 2 e | &gt; 1 ).
 Algorithm 1 BSW( T ) 1: 2: 3: 4:
The na X ve algorithm described in Sec. 3 is agnostic to mining only maximal anomalous trajectories. More specifically, enumer-ating all possible sub-trajectories will lead us to candidates that are anomalous, but not maximal anomalous. To illustrate, consider a trajectory T where the travel times in all of its edges are anoma-lous. Here, if we first check for anomaly on T itself, then we will avoid the entire O ( | T | 2 ) cost of enumerating its sub-trajectories since none of them can be maximal anomalous. To extend this same intuition, it is beneficial to evaluate larger sub-trajectory candidates first since a sub-trajectory S  X  T being anomalous removes all of its O ( | S | 2 ) sub-trajectories from the O ( | T | 2 ) candidate space.
We develop a bi-directional sliding window technique that builds on the intuition that it may be beneficial to evaluate larger sub-trajectory candidates first. Alg. 1 outlines the pseudocode. Given a trajectory T , we maintain two pointers pointing to the two extreme ends of the trajectory (lines 2 and 7). These pointers indicate the boundaries of the sub-trajectory that is being evaluated for anoma-lous behavior. Initially, this sub-trajectory is T itself. Iteratively, we refine to smaller trajectories.

Revisiting Fig. 4, initially, the two pointers i and j point to 1 and 8 respectively. The sub-trajectory within this boundary is the entire trajectory itself, and we check if it is anomalous. Since, it is not, keeping i fixed at 1, we decrement j iteratively till we either find an anomalous sub-trajectory or j hits i (lines 8-13). At i = 1 , no anomalous trajectory is found. Next, i is incremented by 1 (line 14) to i = 2 and j is reset to 8. Repeating the same procedure, an anomalous sub-trajectory is found at j = 5 . It is guaranteed that this trajectory is a MAS since all its super-trajectories have already been evaluated. In addition, for any other MAS that has not yet been discovered, it must end beyond j = 5 (line 11). Thus, we restart the search procedure by resetting j = 8 and incrementing i = 3 . However, we need to search for j only in the range [6:8]. Following this procedure, we end when either i = 7 (line 4) or a MAS is found that ends at edge segment 8 (lines 5-6). The second case occurs in Fig. 4 when MAS 2 is found between segments 5 and 8. To summarize, Alg. 1 guarantees the following. Figure 5: A trajectory where the bi-directional sliding window algorithm is not efficient. Red edges denote anomalous ones.
T HEOREM 3. Alg. 1 does not evaluate any anomalous sub-trajectory that is non-maximal.

From Theorem 3, it is clear that the larger the size of the MASs in a trajectory, the less is the computation cost of Alg. 1. However, the sliding window technique is not always efficient. Consider the sce-nario in Fig 5. Here, the bi-directional sliding window technique performs almost as worse as na X ve since the MASs are all small, and consequently, does not prune out too many sub-trajectory can-didates. Furthermore, since the MASs are evenly spaced out, at most i and j , T [ i : j ] has at least one anomalous edge within it and consequently cannot be pruned out.

A closer analysis of Fig. 5 indicates that the MASs are small in size and the number of anomalous edges is less. So it is more effi-cient to start search procedure from around the anomalous edges it-self, and expand the search space by expanding to their neighboring edges till the MASs are found. Such an approach, however, is di-ametrically opposite to the philosophy of the sliding window tech-nique. Not only does this procedure generate non-maximal anoma-lous sub-trajectories, since two MASs can overlap, as in MAS 2 and MAS 3 of Fig. 5, the expansion procedure itself is complex. More critically, this approach suffers when the MASs are large.
The above discussion reveals that both the sliding window tech-nique and the neighborhood expansion approach have their weak-nesses. While they work well in certain situations, their efficiencies can deteriorate based on the distribution of the anomalous edges in a trajectory. We need a technique that is more robust to all distribu-tions. Towards that goal, M ANTRA adopts the unique approach of partitioning a trajectory into islands such that by performing slid-ing window on the islands only, all MASs can be mined. In Fig. 5, there are four islands, which are shown in Fig. 6. The islands are mined by performing a neighborhood expansion strategy, which we formalize in the next section. An island is likely to contain MASs that span almost the entire length of the island, and therefore, slid-ing window in an island is extremely efficient.
An island is essentially a sub-trajectory of trajectory T with spe-cial properties. Specifically, our goal is to identify a set of disjoint sub-trajectories, or islands I , that satisfies the following property in terms of maximal anomalous sub-trajectories M in T .
In other words, it is enough to perform sliding window only on the islands in I . It is easy to see that all anomalous edges must be contained in some island. The more non-trivial part is to identify the non-anomalous edges that could potentially be part of some MAS. A non-anomalous edge becomes part of an anomalous sub-trajectory when the excess anomaly from an anomalous edge spills over to its neighbors. M ANTRA builds on this intuition.
To formalize the approach of M ANTRA , we first introduce few terminologies. Two sub-trajectories T 1 [ m 1 : n 1 ] and T of T are said to be meeting if either m 2 = n 1 + 1 or m 1 Two sub-trajectories T 1 [ m 1 : n 1 ] and T 2 [ m 2 : n be overlapping if either m 2 &lt; n 1 &lt; n 2 or m 1 &lt; n Finally, synergy of k ( k  X  2 ) sub-trajectories T 1 [ m 1
Figure 6: The islands contained in the trajectory in Fig. 5 n ] ,  X  X  X  , T k [ m k : n k ] , denoted using the notation  X  ( T is the sub-trajectory T 1 k [ min ( m 1 ,  X  X  X  ,m k ) : max ( n More simply, synergy is the join of the k sub-trajectories.
E XAMPLE 2. Let T be the trajectory in Fig. 5. In T , MAS 2 and MAS 3 are overlapping, but not meeting. MAS 4 is meet-ing with T [8 : 10] .  X  ( MAS 2 ,MAS 3) = T [6 : 8] . The  X  ( MAS 1 ,MAS 2 ,MAS 3) = T [2 : 8] . MAS 1 is neither meeting nor overlapping with MAS 2.
 Alg. 2 outlines the pseudocode of M ANTRA . M ANTRA first ex-tracts the contiguous stretches of anomalous edges in a given tra-jectory T (line 2). For example, in Fig. 4, these stretches are S 1 = T [3 : 4] and S 2 = T [7 : 8] . We call these the seeds since the excess anomalies in these seeds spill over to neighboring edges. To understand the impact of these seeds, we need to bound the extent of this spill-over effect. For that purpose, we introduce the defini-tions of left boundary and right boundary .

D EFINITION 4. L EFT B OUNDARY . The left boundary of a sub-trajectory S = T [ i : j ]  X  T , denoted as LB ( S ) , is the sub-trajectory T [ l : j ]  X  T such that  X  v,l  X  v  X  i,T [ v : j ] is anomalous and either T [ l  X  1 ,j ] is not anomalous or l = 1 . The right boundary of a sub-trajectory S , denoted as RB ( S ) , is defined analogously. LB ( S ) essentially bounds the maximal spill-over effect on the left side and RB ( S ) bounds it on the right side.
E XAMPLE 3. At  X  = 1 , the two seeds in Fig. 4 are S 1 = T [3 : 4] and S 2 = T [7 : 8] . LB ( S 1 ) = T [2 : 4] and RB ( S 5] . LB ( S 2 ) = T [5 : 8] and RB ( S 2 ) = T [7 : 8] . Since LB and RB define the extent of the anomaly spread on ei-ther side of a seed S ,  X  ( LB ( S ) ,RB ( S )) bounds the entire range within which the impact of S is limited. Therefore, after identify-ing the seeds (line 2), M ANTRA computes the LB and RB of each one of them (lines 1-3 in Alg. 3). Now, if the impact region of each seed, which is the synergy of its LB and RB, is unaffected by the impact regions of the remaining seeds, then we can essentially guarantee that any MAS must be contained within the impact re-gions of the seeds. However, the impact regions of two seeds S and S 2 can interact giving rise to various unique situations: 1.  X  ( LB ( S 1 ) ,RB ( S 1 )) and  X  ( LB ( S 2 ) ,RB ( S 2.  X  ( LB ( S 1 ) ,RB ( S 1 )) meets  X  ( LB ( S 2 ) ,RB ( S 3.  X  ( LB ( S 1 ) ,RB ( S 1 )) and  X  ( LB ( S 2 ) ,RB ( S 4.  X  ( LB ( S 1 ) ,RB ( S 1 ))  X   X  ( LB ( S 2 ) ,RB ( S 2 5.  X  ( LB ( S 1 ) ,RB ( S 1 ))  X   X  ( LB ( S 2 ) ,RB ( S 2
Case 4 and Case 5 are easiest to manage. Specifically, since the impact region of one seed is contained within the other, the seed with the smaller impact region can be discarded (lines 10-14 in Alg. 2). An example of this scenario is shown in Fig. 7 where the impact region of seed ST 2 is contained with impact region of ST The interactions between impact regions in cases 1-3 are more com-plicated. We first analyze case 1 where two impact regions, which are potentially anomalous sub-trajectories of a trajectory, overlap.
T HEOREM 4. Synergy S of two overlapping anomalous sub-trajectories S 1 and S 2 may or may not be anomalous. P
ROOF : Let S 1 and S 2 be positively anomalous and all edges have 0 covariance between them. We denote overlapped portion as S and non-overlapping portions as S 11 in S 1 and S 22 in S S 11 , S 12 and S 22 are meeting. Assume overlapping portion S anomalous, whereas non-overlapping portions S 11 and S 22
Case 1: We consider the case where for the non-overlapping por- X  + c 12 , where c 12 &gt; 0 . Now, since S is the synergy of three meeting sub-trajectories S 11 , S 12 and S 22 , for S ,
Case 2: Since S 1 and S 2 are anomalous, let dist ( S 1 ) dist ( S 11 ) = dist ( S 22 ) = 0 . Therefore, dist ( S 12 (  X  + )  X  2 S 1 = dist ( S 2 ) = (  X  + )  X  2 S 2 . Thus, for the synergy,
Theorem 4 essentially shows that if the impact regions of two seeds S 1 and S 2 overlap, then there could be a MAS that spanning  X  (  X  ( LB ( S 1 ) ,RB ( S 1 )) , X  ( LB ( S 2 ) , RB ( S 2 Next, we analyze case 2 where two impact regions meet.

T HEOREM 5. Synergy of non-anomalous sub-trajectories S 1 S , which are meeting, is also non-anomalous.
 P
ROOF : From Eq. 8, dist ( S 1 )  X   X  X  2 S 1 and dist ( S
It is easy to see that the above theorems also hold for negatively anomalous sub-trajectories. If the sub-trajectories are a mixture of positively and negatively anomalous sub-trajectories then no defini-tive conclusions can be drawn. Thus, like in the case of overlap, in-teractions are possible between two meeting impact regions, which can result in a MAS spanning both these impact regions. Finally, we analyze the third case where two impact regions are separated by non-anomalous edges.

T HEOREM 6. If the number of separating non-anomalous edges between two impact regions I 1 , I 2 is more than one, then the syn-ergy can never be anomalous.
 P
ROOF : Assume a case where there are exactly two non-anomalous edges e 1 and e 2 between I 1 and I 2 . Without loss of generality we assume e 1 is adjacent to I 1 and e 2 and e 2 is adjacent to e From the construction of our impact regions, no impact region can be expanded by one non-anomalous edge and remain anomalous. Thus,  X  ( I 1 ,e 1 ) and  X  ( I 2 ,e 2 ) are both non-anomalous. These two synergies are again two meeting non-anomalous sub-trajectories and following Theorem 5, they can never be anomalous.

T HEOREM 7. Synergy of two impact regions separated by at most one non-anomalous edge can be anomalous.
 P
ROOF : Let the two impact regions be I 1 and I 2 and separated by a non-anomalous edge e and cov ( I 1 ,I 2 ) = 0 . From the construc-tion of our impact regions, we know that they cannot be expanded Algorithm 2 MANTRA( T ) 1: 2: 3: 5: further by an edge while keeping it anomalous. Thus, the maxi-Since e is non-anomalous,
Clearly, I 1 , e , I 2 are meeting sub-trajectories. Thus, for their synergy sub-trajectory S , we have dist ( S ) = =  X  +  X  X 
Combining Theorems 7 and 6, we can guarantee that two im-pact regions can interact only if they are separated by at most one non-anomalous edge. Thus, based on Theorems 4-7, interactions between impact regions can happen only if they are overlapping, meeting, or separated by one non-anomalous edges. With this deeper understanding of the behavior of anomalous sub-trajectories, we are now ready to formalize the M ANTRA algorithm.

M ANTRA starts by identifying the contiguous stretches of posi-tive anomalous edges or negative anomalous edges (line 2). These form the initial seeds and their left and right boundaries are com-puted and stored. The seeds are stored sorted based on their starting indices. For the scenario shown in Fig. 7, the corresponding stored items are shown in Table. 1. Next, M ANTRA iterates over each seed Algorithm 3 addSeed( S,ST ) 1: 2: 3: Figure 7: Illustration of seeds, left boundary, right boundary, and synergy. Red glowing edges denote anomalous edges. Yel-low glowing dashed edges denote non-anomalous edges that are in the left or right boundary of an anomalous edge. Refer to Ta-ble. 1 for the corresponding stored items in the seed set. and matches their impact regions (lines 5-20). If one impact region is found to be a subset of the other, then the smaller seed along with its boundaries are discarded from the seed set (lines 10-14). Other-wise, if the impact regions of two seeds S 1 and S 2 are found to be interacting, then their synergies are computed. This synergy now forms a new seed. Furthermore, S 1 and S 2 are discarded from the seed set (lines 15-19). Once all impact regions have been analyzed and the new seeds have been identified, M ANTRA re-starts the same analysis on the new larger seeds by computing their impact regions. The process continues till the impact regions of all existing seeds are found to be non-interacting. These non-interacting impact re-gions are the islands, and thus, sliding window is performed on these islands to compute the MASs.

E XAMPLE 4. The initial items in the seed set for Fig. 7 is shown in Table 1. From this set, the seed ST 2 is discarded since its im-pact region is a subset of the impact region of ST 3 . ST the seed set since its impact region is non-interacting with other im-pact regions. However, a new seed is formed in the second iteration by taking the synergy of the impact regions of ST 3 and ST they are separated by only one anomalous edge. After the second iteration, there are two seeds: ST 1 and sub-trajectory [6 : 12] .
T HEOREM 8. P ROOF OF CORRECTNESS : Every MAS is con-tained in the set of islands.
 P
ROOF : Our method of constructing islands ensures that every anomalous edge is part of some island. Hence there is no anoma-lous edge left out outside of our island boundary. Moreover, in M
ANTRA , the seed expansion is stopped only when there are at least two non-anomalous edges separating the impact regions of any pair of seeds. This guarantees non-interaction between the fi-nal impact regions, which are our islands (Theorem 5). Thus, no MAS can span across islands.
In this section, we empirically demonstrate the efficiency and efficacy of MANTRA. Our algorithms are implemented in Java JDK 1.7.0 and evaluated on a PC with 12GB memory and Intel i5 2.60GHz quad core processor running Ubuntu 13.04.
 Datasets: We use GPS-traces from two different sources: T-Drive [19] and GeoLife [21]. Both traces are from Beijing. T-Drive contains 136,759 trajectories and GeoLife contains 18,670 trajec-tories. While GeoLife is smaller, it is richer in terms of trajectory diversity containing traces from buses, cars, and walks. Road net-work of Beijing, which contains 623,975 nodes and 672,284 edges, is extracted from OpenStreetMap. The distribution of the trajectory sizes is shown in Fig. 8(a).

Experimental Setup: We benchmark scalability of M ANTRA against the Na X ve approach described in Sec. 3, and Sliding Win-dow (Alg. 1) on the entire trajectory instead of just the islands. Table 1: Seed set and their boundaries for the example in Fig.7 Unless specifically mentioned, we set  X  = 4 . In a normal distribu-tion N (  X , X  2 ) , the probability of being more that 4 variance away, i.e. p (( x  X   X  ) 2  X  4  X  2 )  X  0 . 05 , which is commonly considered as statistically significant.
First, we evaluate the growth rate of the running time against tra-jectory size (number of edges). Fig. 8(b) shows the average time taken to mine a trajectory in the T-Drive dataset. In this experi-ment, we mine a trajectory only if it contains at least one anomalous edge; otherwise, based on Theorem 2 it is guaranteed to be non-anomalous. MANTRA is up to three orders of magnitude faster. Even for trajectories of size 1000 and beyond, MANTRA consumes less than 25 ms. When the anomalous edges are spread out across the trajectory, Sliding Window processes almost the same number of sub-trajectories as Na X ve. Hence, Sliding Window does not show much speed-up over Na X ve. Another indicator of the efficiency of MANTRA is the number of edges processed. Given a trajectory, every time an edge in the trajectory is accessed by MANTRA or Sliding Window, it is considered  X  X rocessed X . Fig. 8(c) shows the results. As expected, the trend is similar to that of the running time.
Since the real driver of the running time is the number of anoma-lous edges in a trajectory instead of its size, we next investigate the growth rate of running time against this factor. Fig. 8(d) shows the results. As against trajectory size, MANTRA is more than three orders of magnitude faster than Sliding Window and Na X ve. How-ever, the growth rates of running times for both MANTRA and Sliding Window are different than the trend observed against tra-jectory size. In Sliding Window, the running time decreases when the number of anomalous edges in a trajectory increases. Looking deeper into these trajectories reveals that an increase in the number of anomalous edges does not correlate with increase in trajectory size. These anomalous edges are contiguous, which often corre-sponds to high traffic jams. In this scenario, when the number of anomalous edges goes up, the resulting MASs cover a significant portion of the overall trajectory. As analyzed in Sec. 4.3.1, this is the exact scenario where Sliding Window starts becoming effec-tive. Hence, we see a fall in its running time with an increase in the number of anomalous edges. For MANTRA, there is a hump in its growth rate. When the number of anomalous edges is small, the seed set converges quickly since there is less scope of interac-tion between impact regions. As the number of anomalous edges grows, the number of seeds goes up and consequently, the number of interacting impact regions increases resulting in higher number of iterations for seed set convergence. However, when the number of anomalous edges in a trajectory exceeds even further, the num-ber of seeds again starts to fall since many of the anomalous edges become contiguous and group together to form a single seed.
Fig. 8(e) further substantiates efficiency of MANTRA by evalu-ating its performance on number of edges processed. Trends are similar to Fig. 8(d). When number of anomalous edges is be-yond 400, Sliding Window processes less number of edges than MANTRA. Since when the entire trajectory, or a significant por-tion, is anomalous, identifying islands is a redundant operation.
Experiments against the number of anomalous edges, indirectly number of anomalous edges. show how the distribution of anomalous edges affects the running time. Consider a trajectory T , having 30% of its edges as anoma-lous edges. In two extreme cases, these 30% edges could either be evenly spread or grouped together as a single seed. Sliding Win-dow X  X  running times would drastically differ for these two cases. In next two experiments we observe the impact of this distribution directly. To have full control over the distribution of anomalous edges, only for this experiment, we synthetically alter the T-drive dataset. We randomly pick 10000 trajectories from T-Drive and al-ter their speeds to make them either anomalous or non-anomalous. The trajectory generation procedure uses two parameters:  X  Anomaly Percentage( AP ): AP regulates what percentage of a trajectory X  X  edges is anomalous.  X  Seed Size Percentage( SS ): SS controls the size of the em-bedded seeds in a trajectory T . For example, in trajectory of length 100 if AP = 40% , then 40 edges are to be set as anomalous. Now, setting SS = 20% means the size of each seed is 40  X  0 . 2 = 8 . This also means there will be 40 / 8 = 5 seeds that are evenly spaced out across the trajectory. Now, it is easy to see that keeping AP constant, if we set SS = 40% , the seeds would be larger and hence, more of the anomalous edges would be grouped together rather than being distributed across the trajectories. Our goal in the following experiments is to verify how the running time varies with the distribution of the anomalous edges in terms of their locations. We first fix SS = 15% and then vary AP from 5% to 50% . Results are shown in Fig. 9(a). For Sliding Window, the number of edges processed falls with AP . Even though an increase in AP translates to increase in anomalous edges, it also increases the size of the resultant MASs. As already explained, when the MAS sizes are large, Sliding Window is more effective and that behavior trans-lates to the shown plot. MANTRA also improves with increase in AP , which shows that mining problem is more difficult when anomalous edges are sparse and evenly distributed. For MANTRA, the job is harder at lower AP , since there is more scope of interac-tions between impact regions of seeds and consequently, the seed set consumes more iterations to converge. This also explains why we saw a similar dip in Fig 8(d) and Fig. 8(e) against the number anomalous edges. We further study the impact of seed distribution by fixing AP = 20% and varying SS from 5% to 100% . Fig. 9(b) shows the results. As expected, when SS = 100% both algorithms process least edges. With increase in SS % , the seeds are likely to be grouped together leading to quick convergence of seed sets.
Finally, we evaluate the growth rate of the running time against the anomaly threshold  X  . The running time of Na X ve decreases with increase in the anomaly threshold since the number of anomalous sub-trajectories decreases and consequently, the check for maxi-mal anomalousness is faster. For Sliding Window, the running time increases with anomaly threshold. As already discussed, Slid-ing Window performs better when the majority of the edges in a trajectory is anomalous. This happens at lower thresholds. For M
ANTRA , a hump is visible and this is due to the reasons explained earlier on how it performs best at the two extreme scenarios: ex-tremely few anomalous edges, or high portion of anomalous edges.
In Mantra, we estimate the travel time distribution in a sub-trajectory by aggregating the distributions in its constituent edges. In this section, we evaluate the accuracy of these estimations. For this purpose, we identify the 500 most frequent sub-trajectories of size X , with values of X ranging from 3 edges to 15 edges. We could not go beyond 15 edges since the number of trajectories cov-ering a specific sequence of 16 edges or more is rare. In fact, this issue of data sparsity is the reason behind the need to approximate travel-time distribution from the constituent edges.

To set up our experiment, for each of the frequent sub-trajectories, we compute the mean and the standard deviation of the travel times. Let us denote them as  X   X  and  X   X  . Next, we compute the approxi-mated mean and standard deviation,  X  and  X  respectively, from the edges within the sub-trajectory using the formula given in section 4.1. The accuracy of the approximation is computed as follows.
Accuracy for  X  is defined analogously. Higher the accuracy, bet-ter is the performance, with an accuracy of 1 signifying no error in approximation. Figs. 9(d) and 9(e) show the results in both T-drive and the three different classes of vehicles in the GeoLife dataset. Accuracy is above 0.9 for  X  across all sub-trajectory sizes. The re-sult is similar for  X  as well. As expected, the accuracies are slightly better for sub-trajectory sizes below 5 since we assume covariance to be 0 for edges more than 5 hops apart. More importantly, there is almost no drop in accuracy beyond the size of 7 .
Beyond mathematical modeling, in this section, we evaluate the accuracy of M ANTRA from the human view point; are we able to identify sub-trajectories that would be considered anomalous by humans? To answer this question, we perform trajectory classi-fication . We use GeoLife dataset for our experiments here. Ge-oLife contains labeled trajectories belonging to classes Car, Bus, and Walk. We hypothesize that if a model is learned on Walk, then trajectories of other classes should be considered anomalous. Figure 9: (a-b) Impact of the distribution of seeds on the performance of M First, we verify this intuition through trajectory classification. Towards that, we perform 5-fold cross validation on GeoLife. Given a training dataset containing trajectories from k classes, we first learn the background model B i for each class. Now, in the test set, for each trajectory we mine the set of MASs M i corresponding to the background model of class i . Based on the mined patterns, the trajectory is mapped to a k -dimensional space where the score corresponding to dimension (or class) i is the following. f i essentially computes the number of edges in T that are part of some MAS in T when mined against the background model of class i . The class label L ( T ) is therefore
To evaluate the performance of the classification algorithm, we perform 5-fold cross validation with balanced class labels. The accuracy of the classification is quantified using F-score [22] and shown in Table 2. As it can be seen, the F-scores are above 0.74 for all class pairs, and thus showcasing that M ANTRA conforms to human intuition.

To investigate the separation between class labels in greater de-tail, Figs. 10(a) and 10(b) plot the anomaly scores of each trajectory in the Car-Walk and Car-Bus classification problems respectively. In these plots, each axis shows the anomaly score (Eq. 14) with re-spect to the denoted class. Higher the score, the more anomalous a trajectory is with that class. Majority of the walk trajectories have a high anomaly score with Car and are therefore on the right side of the plot. In contrast, although the Bus trajectories are separa-ble from Car, their anomaly scores in comparison to Car are not as drastic as Walk. Thus, the middle zone has a significant number of Bus trajectories. This result is not surprising since discriminating between Car and Bus trajectories is difficult even for humans.
We also evaluate the performance of M ANTRA in 3-class clas-sification. In Table 3, each column shows the F-score when the corresponding class is considered as the positive class; trajectories from the remaining classes constitute the negative class. In three-class classification, a random classifier would achieve an F-score of 0.33. Against this backdrop, the performance of M ANTRA significantly higher across all combinations. This result shows that M ANTRA is robust even under multiple classes.
 Using the same hypothesis of anomaly, we further evaluate M and highlight its application in trajectory segmentation . Given a trajectory that is a mixture of multiple movement activities, tem-porally anomalous sub-trajectories can be mined to automatically annotate them. Consider a person who walks 1 KM to the bus stop, and then catches a bus to reach the university. By learning ap-propriate background models in a supervised setting, we can mine anomalous sub-trajectories and tag the various portions of the jour-ney with the correct travel mode. Such annotated trajectory data is useful in infrastructure management and urban planning.

First, we construct trajectories as a mixture of two modes of travel. Specifically, we find trajectories of two different modes, such as car and bus, that both contain at least one common edge. We arbitrarily select one such edge. Let us denote the first tra-jectory as T = [ e 1 ,  X  X  X  ,e i ,x,  X  X  X  ,e m ] and the second trajectory edge. From these two, we construct a merged trajectory T [ e ,  X  X  X  ,e i ,x,e 0 j ,  X  X  X  ,e 0 n ] . Our goal is now to annotate the sub-trajectory S = [ e 1 ,  X  X  X  ,e i ] with the label of T and S e ] with the label of T 0 .

The trajectory segmentation pipeline is setup in a manner similar to classification. We assume a training dataset that contains trajec-tories corresponding to each possible class. We learn a background model B i for each class i in the training set. Only difference in tra-jectory segmentation from classification is that the test set contains merged trajectories over a mixture of two classes. Thus, instead of classifying entire trajectory, we assign a label to each edge.
Ideally, if a sub-trajectory belongs to class i , then it should be anomalous to all other classes in the training set. However, that does not occur always in real-life. A stationary car stuck in an un-expected congestion would be anomalous even in the background model of a car. Such cases need to be taken care of. First, given a trajectory T from the test set, we mine the MASs with respect to each possible class. Any sub-trajectory S that is anomalous to all classes but one, is labeled with the non-anomalous class. For the ambiguous sub-trajectories, which is either non-anomalous with multiple classes, or anomalous with all classes, we extract the set of possible class labels. possibleClass ( S ) contains classes with which S is non-anomalous, or if S is anomalous with all classes, then possibleClass ( S ) contains all classes. Now, label for S is Figure 10: Anomaly scores distribution in two-class classifica-tion.
 Table 4: F-scores in trajectory segmentation by M ANTRA and Contiguous Anomaly (CA) classification based on edge speed. dist i ( S ) (Eq. 6) is deviation from background model of class i .
An obvious, alternative approach to segmentation is to classify each edge in a trajectory based on how close the speed is to the av-erage speed of Car, Bus and Walk trajectories and report contigu-ous stretches of anomalous edges. We compare the performance M
ANTRA with this Contiguous Anomaly (CA) based segmentation approach. Table 4 shows the results. The F-score is computed in terms of how many edge labels are predicted correctly. M performs significantly better since it analyses at a sub-trajectory level. On the other hand, in CA, each edge is classified indepen-dently. Thus, if a car slows down at a traffic signal, CA classifies it as Walk. Overall, these results show that our anomaly model in-deed follows the human intuition, is robust, and can be applied for effective trajectory classification and segmentation.
Anomaly detection on trajectory datasets can broadly be grouped into two categories: spatial anomalies [2,11,20] and temporal anoma-lies [12]. In [11] authors proposed a partition-and-detect frame-work to identify spatially outlying sub-trajectories based on density and distance. [7] proposed a spatial anomaly detection framework for evolving trajectories, using direction and density of the trajec-tories. To detect fraudulent taxi drivers, authors in [20] presented an anomaly detection framework for fixed source-destination pairs. In [2], a window based approach is proposed to mine anomalies in trajectory streams where a sub-trajectory inside a window is anomalous if its distance is significantly higher than its left and right neighbors. Anomaly detection framework presented in [3], detects taxi routes that deviate significantly from history. Several distance functions exist [4, 5, 16, 17] to match trajectories based on their spatial similarity and could be used for spatial anomalies.
In temporal anomaly mining, existing studies look into global network-level anomalies, such as unexpected congestion in a road network, instead of trajectory-level anomalous sub-trajectories that we have studied in our work. [12] use historical similarity trends to identify temporal outliers, using a temporal neighborhood vec-tor. However, none of these works addresses the particular aspect of temporal anomaly (over-speed or under-speed) on network con-strained trajectories. Time series clustering has been used to detect temporal anomalies on different fields such as e-commerce [1] and speech recognition [6] and DNA optimization [18]. Clustering on time-series streams has been studied by in [15].
In this paper, we studied the problem of mining temporal maxi-mal anomalous sub-trajectories from a given trajectory. We showed that complexity of the problem is quadratic with respect to trajec-tory size and therefore cannot be operationalized for real-time re-sults. To overcome this bottleneck, we developed MANTRA . M derives its power by iteratively refining the search space into a set of  X  X slands X . These islands guarantee that all maximal anomalous sub-trajectories reside only inside them and thus the remaining part of the trajectory can be discarded. The expensive sub-trajectory level analysis is performed only within these islands to identify the answer set. Extensive experiments on real trajectories showed M
ANTRA as more than 3 orders of magnitude faster than baseline techniques. In addition, M ANTRA achieves excellent accuracy in identifying anomalies and unleashes the ability to classify and seg-ment trajectories based on their vehicle types.
