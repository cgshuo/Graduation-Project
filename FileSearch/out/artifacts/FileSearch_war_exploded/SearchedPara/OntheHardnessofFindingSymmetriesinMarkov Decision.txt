 Shra van Matthur Narayanamurth y SHRAVANMN @ GMAIL . COM Yahoo! Labs, Bang alore Balaraman Ra vindran RAVI @ CSE . IITM . AC . IN Mark ov Decision Processes (MDPs) are widely emplo yed to model sequential decision problems. But current solu-tion techniques for MDPs do not scale well with the size of the MDPs, and hence are pro ving inadequate in solving lar ge real-w orld problems. While building abstract models of real-w orld problems, it can be seen that a high degree of redundanc y is present which can be exploited to reduce size of the model. This reduction in size could possibly lead to more efcient solution methods.
 One such notion of redundanc y is a degree of symmetry that is present in any real-w orld problem. (Amarel, 1968) rst look ed at exploiting such symmetries in solving a mis-sionaries and cannibals problem. In this work we use the notion of symmetries in MDPs introduced in (Ra vindran, 2004). While it is widely belie ved that nding symmetries in MDPs is a hard problem, no one has investig ated before exactly how hard this problem is.
 Intuiti vely this seems harder than nding symmetries in graphs, due to the additional structure introduced by MDPs. In this work we sho w that nding symmetries in MDPs is no harder than the problem of graph isomorphism. We also sho w that existing graph isomorphism solv ers can be used to nd symmetries in MDPs.
 We present some notation in the next section, and some re-lated work in Section 3. In Section 4 we formally dene the problem, and present a constructi ve algorithm in Sec-tion 5 for sho wing the equi valence to graph isomorphism. We discuss some results Section 6 and conclude in Section 7. Let B be a partition of a set X . For any x 2 X ; [ x ] B the block of B to which x belongs. An y function f from a set X to a set Y induces a partition (or equi valence relation) on X , with [ x ] f = [ x 0 ] f if and only if f ( x ) = x ; x 0 are f -equi valent written x f x 0 . Let B be a partition of Z X Y , where X and Y are arbitrary sets. The projection of B onto X is the partition B j X of X such that for any x ; x 0 2 X ; [ x ] B containing a pair in which x is a component also contains a pair in which x 0 is a component or every block containing a pair in which x 0 is a component also contains a pair in which x is a component.
 Definition 1. An MDP homomorphism h from an MDP M = h S ; A ; ; P ; R i to an MDP M 0 = h S 0 ; A 0 ; 0 ; is a surjection from to 0 , dened by a tuple of surjec-tions &lt; f ; f g s j s 2 S g &gt; , with h (( s ; a )) = f : S ! S 0 and g s : A s ! A 0 8 s ; s 0 2 S ; a 2 A s nience, we use &lt; f ; f g s g &gt; to denote &lt; f ; f g s j s 2 S g &gt; .
 Definition 2. Let M ' be an image of the MDP M under homomorphism h = &lt; f ; f g s g &gt; . For any s 2 S ; notes the set of actions that have the same image a 0 2 A under g s . Let 0 be a stochastic polic y in M 0 . Then 0 lifted to M is the polic y M 0 such that for any a 2 s ( a 0 ) ; 0 M ( s ; a ) = 0 ( f ( s ) ; a 0 ) = j g 1 s Definition 3. An MDP homomorphism h = &lt; f ; f g s g &gt; from MDP M = h S ; A ; ; P ; R i to MDP M 0 = h
S 0 ; A 0 ; 0 ; P 0 ; R 0 i is an MDP isomorphism from M to if and only if f and g s , are bijecti ve. M is said to be iso-morphic to M 0 and vice versa. An MDP isomorphism from MDP M to itself is called an automorphism of M . Definition 4. The set of all automorphisms of an MDP M , denoted by Aut M , forms a group under composition of homomorphisms. This group is the symmetry group of M . Let G be a subgroup of Aut M . The image of M under G is called the G -reduced ima ge of M .
 Definition 5. An MDP M 0 is said to be a reduced model of an MDP M , iff there exists an MDP homomorphism h : M!M 0 . MDP Minimization is a well studied problem. As stated earlier , in the model minimization approach, a reduced MDP that that preserv es some key properties as the orig-inal MDP is found by combining  X equi valent X  states. The reduced MDP found depends on the notion of equi valence between states used in the aggre gation. The notion of equi valence chosen will be fundamental in designing and analyzing algorithms for reducing MDPs. In (Dean &amp; Gi-van, 1997) a minimization algorithm is proposed based on the notion of stoc hastic bi-simulation homo geneity . Infor -mally , a partition of the state space for an MDP is said to be homogeneous if for each action, states in the same block have the same probability of transitioning to each other block. The y also pro vide an algorithm for nding the coarsest homogeneous renement of any partition of the state space of an MDP . The algorithm starts with an initial partition P 0 and iterati vely renes it by splitting the blocks until the coarsest homogeneous renement of P 0 is obtained. A notion of stability of a block with respect to an-other is dened and unstable blocks are split till all blocks of the partition are stable. The comple xity of the algorithm is expressed in terms of the partition manipulation opera-tions. Hence, the actual comple xity depends on the under -lying partition representation and manipulation algorithms. (Gi van et al., 2003) discuss the application of the algorithm to solving factored MDP problems. Enumerating the state space is avoided by describing lar ge blocks of equi valent states in factored form with the block descriptions being inferred directly from the original factored representation. (Ra vindran, 2004) proposes a more generic frame work based on the notion of MDP homomorphisms with state-dependent action recoding as introduced in Section 2. This allo ws a greater reduction in problem size and aids in mod-eling man y other notions of equi valence lik e symmetries. A polynomial time algorithm to nd the reduced model under the notion of MDP homomorphisms is also proposed by extending the algorithm proposed by (Gi van et al., 2003) and (Lee &amp; Yannakakis, 1992). Ag ain, the algorithm is polynomial in the number of block operations, the stability criterion is modied to suit the equi valence notion and the same process of iterati ve splitting is used. The notion of stability used is called the stoc hastic substitution property , which is an extension of the substitution property for nite state machines (Hartmanis, 1966).
 Ho we ver, literature on MDP minimization using symme-tries is sparse. (Zink evich &amp; Balch, 2001) dene symme-tries based on state-action equi valence but do not mak e any connections to group-theoretic concepts or minimization algorithms.
 Another dimension to analyze the literature is the approach to symmetry nding. Two main approaches exist: 1. To deri ve a set of necessary conditions for elements to 2. Pro ve Isomorphism Completeness and use a graph Intuiti vely symmetries seem easier to identify than homo-morphisms and we tried the rst approach to nd a polyno-mial time algorithm for symmetry nding, along the lines of the MDP homomorphism nding, with the moti vation of nding better algorithms for MDP minimization. The MDP homomorphism denition allo ws for deri ving this easily because, two state action pairs ( s 1 ; a 1 ) ; ( s 2 ; a morphically equi valent if for all s 0 2 S . This is the stochastic substitution property and it allo ws us to deal just with blocks without worry-ing about the actual functions. Ho we ver, a similar attempt for symmetries still needs the symmetry f in the necessary condition as belo w: (Flener et al., 2002) and (Cra wford, 1992) point that sym-metry nding for CSPs in general is Isomorphism Com-plete. Ho we ver, there also exist results sho wing that sym-metry nding is NP-complete (in case of geometric auto-morphism of graphs (Manning, 1990)). So we were still un-clear whether symmetry nding for MDPs is Isomorphism Complete or NP-complete due to the presence of factorially man y action recoding functions. A better understanding of the use of symmetries for abstraction in MDPs is the moti-vation for this work. To exploit the power of abstraction using symmetries, we identify them and construct a reduced model by abstract-ing away the symmetric portions. As the reduced model can be signicantly smaller , it can be easier to solv e. We use the notion of automorphisms to model symmetries. So formally , given an MDP M , 1. Find the automorphism group, Aut M and 2. Given the automorphism group, Aut M nd the corre-5.1. Pr oblem Simplification Let us consider the rst part of our problem, i.e., given an MDP M , nd the automorphism group of M , Aut M . We kno w that a group can be specied using its generators. So we simplify the problem to nding the generators of Aut M . Let AMGEN ( M ) denote the problem of nding the generators of Aut M . We write A / B if a problem A is polynomially reducible to B . We say that problems A and B are polynomially equi valent iff A / B and B / A . We denote polynomial equi valence by Definition 6. A problem A is Isomorphism Complete iff A is polynomially equi valent to nding whether two graphs are isomorphic.
 Let G 1 ; G 2 be two simple graphs unless otherwise men-tioned. The follo wing is a list of rele vant Isomorphism Complete problems (Booth &amp; Colbourn, 1977) on graphs: From (Mathon, 1979), (Read &amp; Corneil, 1977), (Miller , 1977) we have, DGEN ( G ) ISO ( G 1 ; G 2 ) .
 We intend to pro ve that AMGEN ( M ) is Isomorphism Complete . We are done if we pro ve that AMGEN ( M ) DGEN ( G in polynomial time from M , that is, AMGEN ( M ) / DGEN ( G to see that DGEN ( G can always construct a degenerate MDP from a digraph. So we need to pro ve that AMGEN ( M ) / DGEN ( G 5.2. Isomorphism Completeness of the problem An MDP M can be considered as a pseudograph with states acting as vertices and actions acting as edges. Since there can be more than one action affecting the transition be-tween 2 states, we need to represent this as a pseudograph. The transition probabilities and rewards can be thought of as weight functions. Ne xt, we formally pose AMGEN ( M ) as a problem on a weighted pseudograph.
 Let G sponding to M , where
Note, E = [ AMGEN ( M ) can be formulated as nding the generators of the group of bijections h : V a ! V a . h is dened by h ( u ; a ) = ( f ( u ) ; g u ( a )) , where W P ( f ( u ) ; g u ( a ) ; f ( v )) = W P ( u ; a ; v ) and
W R ( f ( u ) ; g u ( a ) ; f ( v )) = W R ( u ; a ; v ) 8 These two components of each generator can be interpreted as follo ws: 1. f is a function that permutes the states/v ertices 2. The set of functions f g u g dened for each state/v erte x Let us assume, for a moment, that we have a procedure that constructs a weighted digraph WD ing DGEN ( WD these were someho w same as the f s we are looking for , we still need a way to nd the SD AR functions. To achie ve this, we dene the notion of a set bijection which repre-sents a set of bijections very compactly . In the worst case, for each f , there can be factorially man y SD AR functions. So a normal explicit representation cannot be used. We also dene the operations of intersection between two set bijections to nd the bijections that are common to both set bijections , composition between two set bijections and an inverse of a set bijection . All these operations can be done in time polynomial of the number of elements in the domain of a bijection belonging to the set bijection . Definition 7. Consider two nite sets A and B . Let U A = f U titions of A and B respecti vely . U A and U B are said to be similar iff j U A j = j U B j and for each U A a unique U B U Note that, by denition the sets A and B will be of the same size.
 Definition 8. Let A and B be two nite sets and U A = f U titions of A and B respecti vely such that U A U B . A bijecti ve map X : U A ! U B where X ( U A j U A i j = j U B j j for all U A i 2 U A is called a set bijection . Informally , a set bijection can be interpreted as represent-ing a set of bijections from A to B . X ( U A sents all possible bijecti ve mappings from elements in U to elements in U B bijections that represent the set bijection , can be formed by collating mappings from each X ( U A jection represents all mappings that can be formed by such collations. To formalize this notion, we dene the interpr e-tation function next.
 Let X AB , f all bijections X : U A ! U B such that U A and U B are similar partitions of A and B respecti vely g all permutations from A ! B . Dene,  X  I : X AB ! 2 S j V such that  X  I ( X : U A ! U B ) = f all bijections l : A ! B j l ( x 2 U A only injecti ve and not surjecti ve as there exist sets of 2 S that cannot be represented by a set bijection . For example, consider the set of bijections, between f a ; b ; c g and L = f ( a ! 1 ; b ! 2 ; c ! 3) ; ( a ! 2 ; b ! 1 ; c ! 3) ; 2 ; b ! 3 ; c ! 1) g . Clearly there does not exist an X : U
A ! U B such that there exists an X such that L  X  I ( X ) . To get a bijecti ve interpretation function, we dene, I : X AB ! ima ge (  X  I ) a bijection and we call this the interpretation function. Definition 9. Let A be a nite set and let U 1 A = f partitions of A such that, U 1 tion of two similar partitions of a nite set as U 1 f Definition 10. Let A and B be two nite sets and U 1 A = f partitions of A and U 1 f dened from U 1 the two set bijections X = X 1 \ X 2 as follo ws: 8 U 1 X and it can be sho wn that I ( X ) = I ( X 1 ) \ I ( X 2 ) . Definition 11. Let A be a nite set. Let U 1 A = f similar partitions of A . Let X be a set bijection dened Definition 12. Let A , B and C be three nite sets and U U specti vely . Also let U A , U B and U C be pairwise similar to each other . Let two set bijections X 1 and X 2 be dened from U B to U C and U A to U B respecti vely . We dene the composition of X 1 and X 2 , X = X 1 X 2 as the set bijec-tion from U A to U C dened by X ( U A each U A exist, l 1 2 I ( X 1 ) and l 2 2 I ( X 2 ) such that l = l denotes normal function composition. We assume that a can be ordered and let O be such an ordering.
 Without loss of generality , we can assume that j E uv j = k ; 8 u ; v 2 V because, we can always tak e max u ; v 2 V j and if 9 u ; v 2 V such that ( u ; a ; v ) 2 E for some a and j E uv j &lt; k , then add dummy labels (chosen from the re-maining labels in a ) and zero weights to mak e j E uv j = This corresponds to the general assumption in MDPs that j
A s j = k , 8 s 2 S .
 senting the label of each edge in E uv . This being the same for all edges, we lea ve out labeling from the graph deni-tion.
 No w we dene the vector -weighted digraph corresponding to M , VWG M = &lt; V ; E 0 ; W P ; W R &gt; , as follo ws: E 0 = f ( u ; v ) j 9 a 2 a and ( u ; a ; v ) 2 E g W P : E 0 ! R k dened by W R : E 0 ! R k dened by where a 1 ; a 2 ;:::; a k are ordered as per O . We dene the sorted vector -weighted digraph, SV WG Note that, p uv and r uv are not unique. So we choose them such that the order O is preserv ed. Here we sho w that there exists a set bijection whose in-terpretation is the set of permutations that sort the vector -weights. Let N k be the set of rst k natural numbers. Let uv , f all permutations l : N k ! a j l sorts W P ( u ; v ) be dened for each ( u ; v ) 2 E 0 . So, W P W P ( u ; l (1) ; v ) ;:::; W P ( u ; l ( k ) ; v ) &gt; and W W P ( u ; l (2) ; v ) ::: W P ( u ; l ( k ) ; v ) . Clearly , partitioned into U uv W
P ( u ; l ( t ) ; v ) has the same value for each y = 1 ; and if t 2 N y W l ( x 2 N i Using a similar procedure, we can sho w that there exists set of permutations that sort W R ( u ; v ) .
 an automorphism for the MDP M . No w we dene the weighted digraph WG V ; E 0 ; W 0 &gt; as follo ws: W 0 : E 0 ! R such that W 0 ( u ; v ) = m ( W P Algorithm 1 Construction The procedure for nding symmetries of an MDP M is given in Algorithm 1.
 The comple xity of the algorithm is as follo ws. The con-struction steps in lines 3 to 5, are at most polynomial in j
E j . Using a constant access time data structure lik e a hash-table, Q P uv and Q R uv can be constructed in O ( j E uv j intersection tak es O ( j E uv j 2 ) time. Since this runs for erations, computation of Q uv is at most polynomial in j E Since m is kno wn, the construction of weighted digraph in line 13, is polynomial in j E j . With the use of procedures that return at most j V j automorphisms of AutW G 1979), the construction of G u for each f , from lines 15 to 26, runs for at most j V j iterations.
 The most expensi ve part of the loop from lines 20 to 26 is the computation of j V j 2 intersections. But this is still polynomial in j V jj E j time. Hence the algorithm tak es poly-nomially more time than the solution time of DGEN . Also to extract a solution from SOLN , we need to extract j V SD AR functions from  X  H f for each f , which tak es j E uv j if we use a constant access time data structure. So extrac-in j V jj E j . While one can intuiti vely see that the reduction is indeed polynomial time, the proof is presented in an as-sociated technical report (Narayanamurth y &amp; Ra vindran, 2008), due to lack of space. 5.3. Significance The abo ve result is signicant both theoretically and practi-cally . Practically speaking, the reduction to Graph Isomor -phism allo ws us to use any of the numerous off-the-shelf Graph Isomorphism solv ers to nd symmetries on MDPs. In fact, we use NAutY -No Automorphisms, Yes?, the best Graph Isomorphism solv er currently available (Skiena, 1997) to nd out symmetries in MDPs. NAutY solv es AGEN ( G ) . It uses backtracking and a renement proce-dure to nd the canonical labeling. If two dif ferent label-ings lead to the same graph, then an automorphism can be found using these labelings (McKay , 1981). In the worst case it can tak e exponential time. So it allo ws the use of a variety of verte x invariants, which act lik e heuristics, to solv e harder problems. Ho we ver, for random graphs with n vertices and edge probability 0 : 5 , average execution times for lar ge n are about n 2 nanosecs.W e use NAutY in the fourteenth line in the construction, where we need to solv e DGEN ( G ) . We rst con vert the weighted digraph into an unweighted digraph using standard procedure. We then use NAutY to nd the generators of the automorphism group of the so found digraph. From these we extract generators of AutW G as per the abo ve procedure. We present some re-sults in Section 6. The experiments were run on the follo wing two domains. We describe results per domain. 6.1. Pr obabilistic GridW orld The domain is an N N GridW orld with four probabilis-tic actions of going UP , DO WN, RIGHT and LEFT having a 90% success probability . The initial state was (0,0) and the goal states were f (0 ; N 1) ; ( N 1 ; 0) g . We used Al-gorithm 1 to nd the symmetries with NAutY being used as the DGEN solv er. We then used the symmetries to nd the partition of . We were able to nd the partition corre-sponding to the symmetry group, that is, for a grid of size M N , states (x,y), (y,x), (M-1-x,N-1-y) and (N-1,M-1-x) are equi valent. We present the time tak en by the algorithm for GridW orlds of dif ferent sizes. To complete the end-to-end approach, we ran the G -reduced image algorithm, presented in (Ra vindran, 2004), to nd the reduced image and ran the Value Iteration algo-rithm on the reduced image. To sho w the efcienc y of re-duction, we sho w the time tak en for reduction and solution separately . We also present the case of a handcrafted 2 -folded symmetry which is used with the G -reduced image algorithm and reduced model is used with Value Iteration. From Figure 1 it is evident that the reduced model con-struction is efcient and adds little overhead. Ho we ver, the results of the end-to-end approach sho w a signicant over-head due to symmetry nding. It cuts the saving by almost half. Still the results are signicant because the y double the size of the lar gest GridW orld that can be solv ed in some given time. 6.2. GridW orld Soccer The domain is a soccer -inspired grid domain. It is a slightly modied version of that described in (Bo wling, 2003). We rst describe the original version of the domain and then state the modication.
 It is an M N grid with two agents. One is denoted the attack er ( A ) who holds the ball and the other as the de-fender ( B ) who tries to snatch the ball from the attack er. The center lines/grids(depending on whether M and N are even or odd) for both x -axis and y -axis are chosen natu-rally . The state is dened by the non-identical positions of the attack er and the defender . This denes the state space with ( MN ) 2 ( MN ) states. The actions are mo vements in the four compass directions: N , E , W , S and the hold action H . It is a single player game, in that, only the at-tack er chooses actions deliberately while the defender ex-ecutes random actions. The action chosen by the attack er and the random action of the defender are executed in ran-dom order , which determines the next state. Ho we ver if the defender tries to mo ve into the attack er' s location then the state is unchanged and if the attack er tries to mo ve into the defender' s location, the game is reset to the initial state which is sho wn in Figure 2. The right hand section of the grid is the attack er' s half and the left hand section that of the defender . The goal is chosen to be situated beyond the rst column of grids occup ying one grid on each side of the y -axis central line/grid. A W action from the squares in front of the goal state leads to a goal with a reward of 1 and to the end of an episode. Ev erywhere else the reward is 0 . A 5 4 domain is sho wn in Figure 2.
 Intuiti vely , the domain seems symmetric around the y -axis center line. Ho we ver, the results of using Algorithm 1 on this domain sho wed us that the domain is not symmetric due to the existence of the reset action when the attack er tries to mo ve into the defender' s position. So we modied the domain to have symmetric reset, that is, reset happens to the initial state and its symmetric state around the y -axis center line with equal probability . This mak es the domain symmetric as per intuition, which the algorithm conrms. Interestingly , the algorithm also nds that the existence of the hold action adds further symmetry . The grids along the border of the domain act as walls. For example, the north-ern wall stops the N action lea ving the state unchanged which is the same result if the agent were to execute a H ac-tion. These additional symmetries which we did not think of before running algorithm were found by the algorithm. This suggests that there might exist complicated symme-tries that will be disco vered by the algorithm, which are hard to nd, even upon a close examination. Also in man y cases, symmetries are size invariant. So we can use the al-gorithm on a relati vely smaller version of the domain and nd symmetries which might still hold on the lar ger ver-sion.
 We present the time tak en by the algorithm for dif ferent sizes. An increment of one here means an increase of one along both axes. The presence of two agents, blo ws up the state space very rapidly and we hit the limit on the order of the graph imposed by NAutY very soon (for a 11 10 grid).T o present similar graphs as in the probabilistic Grid-World case, we use the explicit model minimization ap-proach with Value Iteration. The results are presented in Figure 3.
 In this case, we nd that the overheads due to the con-struction and the G -reduced image algorithm is negligible. Though efcienc y of the G -reduced image algorithm is ex-pected, the efcienc y of the construction can be possibly because of the structure of the domain yielding an easy graph to nd automorphisms on. In this work, we have pro vided a constructi ve proof for the Isomorphism Completeness of the problem of nding sym-metries. We have also proposed the use of this construc-tive proof along with an efcient minimization algorithm to solv e an MDP using symmetries and demonstrated it em-pirically . As part of future work, we are looking at adapting approximation algorithms for nding graph isomorphisms to nding approximate symmetries in MDPs.
 We would lik e to thank the revie wers for their valuable comments and inputs. We would also lik e to thank Google Research for supporting Dr. Ra vindran' s participation in the conference.

