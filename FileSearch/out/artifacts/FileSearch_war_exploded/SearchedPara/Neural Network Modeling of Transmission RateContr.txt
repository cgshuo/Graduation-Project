 Most Internet traffic utilizes protocols based on TCP, such as HTTP (Hypertext Transfer Protocol), SMTP (Simple Mail Transfer Protocol), FTP (File Trans-fer Protocol) and various other protocols [1][2]. However, with the increasing demand for real-time audio/video streaming applications such as IP telephony, audio players using the Internet and VOD, UDP based transmission is becoming an important factor in Internet traffic. Generally, real-time applications don X  X  use TCP [3], which is based on a complex retransmission algorithm, but rather the simpler UDP [3] algorithm, which doesn X  X  take congestion control into consid-eration. If congestion occurs on a single link shared by TCP and UDP traffic, TCP will react by reducing the transmission rate, in an attempt to solve the con-gestion problem. However, under the same circumstances, UDP will aggravate the congestion problem, due to its occupying almost all of the available band-width, by maintaining its initial transmission rate. In addition to the congestion problem, this will also lead to unfair use of the Internet.
 the same mechanism that is used for adjusting the transmission rate of TCP traffic. This revised mechanism for non-TCP traffic should be designed to in-clude the TCP-friendly property for the non-TCP applications. In addition, this system should support the equal distribution of traffic. There are several TCP-friendly algorithms which have been proposed to solve the problem of unequal distribution [4][5][6]. These include the Rate Adaptation Protocol (RAP) [7] and TCP Friendly Rate Control (TFRC) [8], and various other protocols.
 controls the transmission rate adaptively, by measuring the congestion situation in the present Internet. However, this algorithm stresses only the question of fairness with respect to TCP flow, but doesn X  X  consider QoS (Quality of Ser-vice) which affects the quality of the transmitted images [9]. In addition, the TCP-friendly algorithm controls the transmission rate using the round trip time (RTT) and packet loss rate (PLR). This study presents a prediction model which operates by estimating the bandwidth of the Internet corresponding to the esti-mated time period of the future data transmission. The parameters used are the RTT and PLR, which are the most important factors to consider, in order to be able to transmit data with an improved data transmission rate, while actively coping with problems of congestion. To accomplish this, the proposed method controls the transmission rate based on the prediction values obtained using a neural network.
 decision tree, decision rule, neural network and others. This study uses a neu-ral network that can model and implement an uncertain nonlinear system . A multi-layer perceptron structure [10] that can extract the properties of nonlinear input and output is used as the neural network model. In addition, Levenberg-Marquardt Back-propagation (LMBP) [11] is used to resolve the problem of con-vergence for the local minimum point that is a drawback of the Back-Propagation algorithm [12][13].
 equipped with the Linux operating system were installed at Seoul National Uni-versity and Chonbuk National University, respectively, each performing packet transmission by means of the TFRC algorithm. Moreover, IPERF, which is a kind of traffic generator, was used to generate various situations of network con-gestion. This paper is constructed as follows. Chapter 2 describes the TFRC algorithm used in the transmission test; Chapter 3 presents the structure of the neural network and LMBP training algorithm; Chapter 4 describes the results of the simulation for this study. Finally, in Chapter 5, we present our conclusions and future study directions. Any method based on TCP-Friendly congestion control should calculate the transmission rate based on a TCP model [14][15][16], in which the average trans-mission rate over time can modeled by considering the operation of TCP in the steady state. This depends on the operation of the TCP protocol, but can basi-cally be expressed as Eq. (1).
 where R is the transmission rate, PLR is the packet loss rate, and RT T is the round trip time.
 and shows an operation that reduces the size of the congestion window by half when packet loss occurs.
 is s , then the transmission rate before the loss of the packet can be expressed by R = W  X  s RT T . Then, the transmission rate after the loss of the packet is R = 0 . 5  X  W  X  s RT T when the size of the window is reduced to W 2 . Therefore, the average transmission rate for the whole series of four saw tooth cycles can be expressed as R =0 . 75  X  W  X  s RT T . The loss rate, p , for a single saw tooth, as shown in Fig. 1, is the effective transmission rate, R ( t ), for time t can be represented in the form of the approximate expression shown in Eq. (2) [19][20].
 In this paper, we collect data pertaining to the RTT and PLR through an ex-periment involving the use of Eq. (2). 3.1 Structure of the Neural Network The structure of the neural network used in this study is the multi-layer per-ceptron neural network and consists of an input layer, hidden layer and output layer, as shown in Figure 2.
 where  X  is a parameter vector that includes all of the adjustable parameters in the neural network structure, and { w j,l ,W i,j } are weights and biases, respectively. Typically, the bias is applied by means of equation 1. A set of training data including the relationship between the output,  X  y i , and the input,  X  l , are required to define the weights. The process that defines the weights using this training data is referred to as training.
 training data and the output of the neural network can be defined as in Eq. (4) where y n is the target value of the training data and o n is the output of the neural network.
 3.2 LM-BP Training Method Training algorithms used for training neural networks can be classified into three main categories, namely the Steepest Descent, Newton and Gauss-Newton meth-ods [21]. Among these methods, the Steepest Descent method suffers from a problem of convergence. On the other hand, the Newton method, which uses the secondary derivative function, has excellent convergence but is computa-tionally expensive. Therefore, the Gauss-Newton method is normally used for actual neural network training.
 solve dynamically the problems presented by the Steepest Descent and Newton methods. These algorithms operate in three stages. Firstly, the weight value is set to a large value, and the Steepest Descent method is applied in the early stages of training. This then provides the weight value for the Newton method, which is applied when convergence has occurred to a certain extent, corresponding to the state in which training is sufficiently advanced to produce a locally minimized convergence. Finally, the algorithm converges rapidly to the optimal solution, by reusing the Steepest Descent method.
 (5). where and  X  can be controlled dynamically.
 proximates the value of H since the second derivative produces computational problems. That is, the value of H used in the Newton method can be obtained by means of Eq. (9).

H =  X  2 F ( w ) ij = where the second term of Eq. (9) can be neglected, hence be eliminated.  X  F ( w i ) presented in Eq. (10) is defined by Therefore, the modified LMBP algorithm can be expressed as Eq. (12). Eq. (12) is a weight parameter that is adjusted in the m th repeated process. 4.1 Data Collection The experimental configuration used to collect the data used in the training and verification processes is shown in Figure 3. The transmission processor (tp), receiving-retransmission processor (rp), and RTT-PLR estimation proces-sor (RTT-PLR ep) were implemented using a socket program written in the ANSI C language. The transmission processor and RTT-PLR estimation pro-cessor were installed on the server at Chonbuk National University, while the receiving-retransmission processor was installed on the client at Seoul National University.
 method, as mentioned in Chapter 2. The packet transmission test was conducted using Eq. (2). The initial transmission speed is 100kb/s, and the whole packet size is 625 bytes, of which 64 bytes are reserved for the probe header. The probe header is attached to the header of the transmission packet, in order to estimate the RTT and PLR. In addition, it has a storage area used to store numbers, so as to keep track of the order in which the packets are transmitted from each proces-sor and their transmission time [19]. When the transmission processor transmits a packet to the receiving-retransmission processor, the receiving-retransmission processor separates the probe header from the received packet, inserts the packet number and current time into the probe header, and then retransmits it to the RTT-PLR estimation processor.
 and PLR are likely to fluctuate rapidly. Even though controlling the transmission rate can help to reduce the amount of traffic problems by rapidly applying these suddenly changed values of RTT and PLR directly to the TFRC mechanism, the quality of service of real-time applications will rapidly deteriorate. In order to prevent this problem, the RTT and PLR of the TFRC algorithm should adhere to the calculation method used by the RTT and PLR of the TCP algorithm. The TCP protocol can change the estimated values of RTT and PLR naturally by using a low-pass filter. The estimated values of RTT and PLR can be obtained by using the moving average as described in Eq. (13).

RTT  X  =  X  RTT  X  +(1  X   X  ) newRTT , PLR  X  =  X  PLR  X  +(1  X   X  ) newPLR (13) where  X  is a parameter that has a recommended value of 0.9, and newRTT and newPLR are recently estimated values of RTT and PLR, respectively. The moving average can be used to control the transmission rate, by reducing any sudden changes in the values of the RTT and PLR when traffic problems occur. In the transmission test, the RTT and PLR are estimated at every round (2 seconds), and the moving average RTT and moving average PLR are determined using Eq. (13). In this paper, we train the RTT, PLR, moving average RTT and moving average PLR, and verify the results of the prediction.
 period of one week. The RTT and PLR were estimated every round or, in other words, every 2 seconds. 4.2 Modeling The amount of data collected for RTT and PLR through the experiment de-scribed in this paper was about 150,000 for each item. 70% of the experimental data was used in the training phase performed to measure the parameters, while the other 30% was used in the verification phase, for the purpose of measuring the performance of the neural network.
 shown in Figure 2, in which a multi-layer neural network was constructed con-sisting of 20 nodes for the input layer, 8 nodes for the hidden layer, and 1 node for the output layer. In addition, LMBP was used for the training, as described in Chapter 3 [12].
 Figure 5 presents the results of the verification phase, involving the application of the remaining data to the neural network. The time period that shows an increase of the values of RTT in the figure corresponds to that where the load was controlled by the traffic generator. From the results of the training, it can be seen that, in the case where a substantial load is applied to the network, i.e. the period in which the value of RTT increases rapidly, the error is small. Although some errors were observed in the results of the verification conducted using data that wasn X  X  used in the training phase, it can be seen that the error in the prediction values is generally quite small when a load is applied to the network. The mean square error of the prediction value is 0.34ms for the training data and 1.004ms for the verification data, which represents a very small range of error in proportion to the entire range of RTT.
 verification of the neural network for different packet loss rates. A small change in the value of the packet loss rate has a large impact in the graph, because the measured values are very small. However, it can be seen that the errors in the prediction values are small when the network load is high. The mean square errors of the results of the training and verification phases are 1.52 (%) and 3.82 (%), respectively.
 for the prediction of the moving average RTT using Eq. (13). It can be seen that the improvement obtained from the training and prediction in the case of the moving average RTT was better than that for the RTT shown in Figures 4 and 5, because the moving average RTT shows a smooth variation, as compared with the RTT which shows a wider fluctuation. The performance of the prediction system is confirmed by the results, which show that the mean square error is 0.680ms, and the verification error is 0.7502ms. moving average PLR. It can be seen that the improvement in the moving av-erage PLR obtained from the training and prediction is similar to that for the PLR, which shows a rapid change. The mean square errors for the training and prediction performance are 0.87 (%) and 0.9 (%), respectively.
 In this paper, we designed a prediction model that can be used to predict the most important parameters of the transmission rate control mechanism used for data transmission through the Internet, in order to take into consideration the available bandwidth. A method of prediction modeling was developed using a neural network, which makes it possible to model a nonlinear system and the LMBP algorithm was used to training the neural networks. RTT and PLR data was collected by the TFRC transmission method, which is a kind of adaptive transmission control based on UDP, and used as the training data for the neu-ral network prediction model. Through the training of the neural network, the prediction model can predict the RTT and PLR after one step is completed. It can also be seen that the error in the predicted values is small. This result shows that the congestion situation of the Internet can be predicted using the proposed prediction model. In addition, it shows that it is possible to implement a mechanism, which allows for a substantial amount of data to be transmitted, while actively coping with a congestion situation. The complete verification of the prediction algorithm will be the subject of a future work, which involves con-figuring the system that controls the transmission rate of an actual multimedia application using the neural network prediction model proposed in this study and comparing its performance with that of the existing methods.
 Acknowledgements. The authors thank KEPCO (R-2004-B-120) and RRC (KOSEF) (R-12-1998-026-02003) for their financial support.

