 Skyline query has been received much attention due to its wide application backgrounds for multi-preference and deci-sion making. In this paper we consider skyline query evalua-tion and maintenance in wireless sensor networks. We devise an evaluation algorithm for finding skyline points progres-sively and a maintenance algorithm for skyline maintenance incrementally. We also conduct extensive experiments by simulations to evaluate the performance of the proposed al-gorithms on various datasets. The experimental results show that the proposed algorithms significantly outperform exist-ing algorithms in terms of network lifetime prolongation. H.2.4 [ Database Management ]: Query Processing Algorithm, Experimentation, Performance Keywords: WSN, skyline query, query optimization
To support data query processing in wireless sensor net-works (WSNs), several DB systems like TinyDB [5] and Cougar [11] have been developed. However, they only sup-port some basic operators. With further development of hardware techniques in sensors and wide applications of WSNs, it is becoming urgent that WSNs can also support more com-plicated queries like skyline queries. In this paper we focus on skyline query evaluation and maintenance in WSNs.
Extensive studies on skyline query in centralized databases [3, 4, 7] and distributed databases [1, 9] have been conducted in recent years, existing algorithms however are not appli-cable to WSNs due to the unique characteristics imposed on sensor networks including limited storage, energy-limited battery, slow processing capability, narrow communication bandwidth, etc. Several studies of skyline query in WSNs have been conducted in the past [2, 10], they mainly focused on optimizing the total energy consumption alone rather than the tradeoff between the total energy consumption and the maximum energy consumption among the sensors, while the maximum energy consumption among the sensors usu-ally is the bottleneck of the network lifetime [6]. Therefore, energy-efficient skyline query evaluation and maintenance in WSNs poses great challenges.
We consider a wireless sensor network consisting of n sta-tionary sensors randomly deployed in a region of interest, and each sensor is equipped with d sensing devices to mea-sure d attribute values. Each data point consists of d at-tribute values, referred to as a d -dimensional data point. There is a base station with unlimited energy supply serv-ing as the gateway between the sensor network and users. Each sensor can communicate with the other sensors and the base station via one or multi-hop relays. To transmit a message containing k bytes of data from one sensor to an-other, the amounts of transmission energy consumed at the sender are  X  t + R  X  k , and the amounts of reception energy consumed at the receiver are  X  r + r e  X  k ,where  X  t and  X  the sums of energy overhead on handshaking and transmit-ting and receiving header part of the message, R and r e are the amounts of transmission and reception energy per byte, respectively. Each data point is represented by 4  X  d bytes in this paper. The energy-efficient skyline query evaluation in sensor networks can be implemented through in-network processing paradigm by building a routing tree T rooted at the base station r and spanning all sensors.

Given a wireless sensor network G ( V, E )withbasesta-tion r ,where V is the set of sensors and E is the set of links. Assume that each sensor v in V has a set of snap-shot points P ( v ) generated during a given time interval, and P =  X  v  X  V P ( v ) forms the entire dataset. The skyline query on P is to find a subset of P , referred to as SK ( P ), in which the points cannot be dominated by any other points in P . Skyline maintenance is to maintain the skyline dynamically within sliding window environments. The data generated by sensors are treated as the boundless streaming data, it thus is impossible to perform a skyline query on all generated points so far due to the huge volume of data involved. In-stead, a sliding window skyline will only consider the skyline on the set of points generated within the current window. Let W be the length of sliding window which is equal to the lifespan of each point. The skyline maintenance at each time step t is to evaluate the skyline on P t = { p | t  X  p.time where p.time is the generated time step of point p .
For skyline evaluation, we introduce a simple algorithm, the skyline merge algorithm. If sensor v is a leaf node, it sends the skyline of local points to its parent; Otherwise, sen-sor v computes the skyline on the set of points at v including the points generated at v and forwarded by its children, and transmits the new skyline to its parent. Finally, the base station r obtains the skyline on the set of received points, which is the skyline on the set P .

The following observation is the cornerstone of the rest of the paper, which will be used later.

Definition 1. [3,7]Suppose p =( p 1 ,p 2 , ..., p d ) is a d -dimensional point, the radius of pR ( p ) is defined as the Euclidean distance between p and the origin o =(0 , 0 ,..., 0) , i.e., R ( p )=
Observation 1. [7] Let R ( p ) and R ( q ) be the radii of points p and q .If R ( p )  X  R ( q ) , p cannot be dominated by q .
In this section an evaluation algorithm DRP ( D ynamic R adius P artition ) is devised, which first parti-tions the dataset P into disjoint subsets based on dynamic partition radius, followed by evaluating the skyline on each subset progressively through the use of found skyline points as the global filter to filter out unlikely skyline points in the rest of subsets from transmission within the network.
Intuitively, algorithm DRP proceeds in a number of itera-tions k ,and k is dynamically determined by the data dis-tribution in the dataset. The dataset P is partitioned into several disjoint subsets and the partition radius in each it-eration is determined as follows.

Denote by LSK ( v ) i the skyline of the points at sensor v and the received points from the children of v in the i th iteration, 1  X  i  X  k .Let LF ( v ) i be the L ocal F ilter at sensor v and UR ( v ) i the upper bound of the transmission radius of sensor v in the i th iteration. If sensor v is a leaf node, UR ( v ) i is the maximum radius of all points forwarded by v .Otherwise, UR ( v ) i is calculated as follows. Assume that sensor v has d v children, u 1 ,..., u d v .Inthe i th iter-ation, sensor v receives the points from each child u j and calculates LSK ( v ) i ,1  X  j  X  d v . Then, UR ( v ) i is the min-imum among the d v maximum radii of the points sent by the children of v and the maximum radii of the points in LSK ( v ) i . Obviously, UR ( v ) i  X  UR ( u ) i when u is a descen-dant of v .Thus, UR ( r ) i  X  UR ( v ) i for any sensor v UR ( r ) i is the partition radius of the i th partitioned subset P , i.e., the radii of all the points in P i are no greater than UR ( r ) i . Therefore, the dataset is dynamically partitioned by UR ( r ) i ,1 &lt;i  X  k .

Assuming that algorithm DRP has performed the first ( i  X  1)th iterations already, and now proceeds the i th iteration as follows.

Each sensor v filters out the local points dominated by any point in LF ( v ) i .Ifsensor v is a leaf node, it trans-mits LSK ( v ) i to its parent, where LSK ( v ) i is the skyline of the points at sensor v . Otherwise, it calculates LSK ( v ) and the upper bound of the transmission radius of sensor v , UR ( v ) i .Sensor v then transmits the points in LSK ( v ) whose radii are no greater than UR ( v ) i to its parent. Hav-ing received the points from all children, the base station r calculates LSK ( r ) i and UR ( r ) i . The newly found skyline in the i th iteration is SK i = { p | p  X  LSK ( r ) i ,R ( p ) UR ( r ) i ,  X  q  X  X  X  i  X  1 j =1 SK j ,q  X  p } ,where q  X  p means that point q cannot dominate point p . Some points in SK i will be chosen for broadcast as the global filter to update the local filter of each sensor v .Incase SK i is empty, the sky-line merge algorithm will be applied to find the remaining skyline points. The algorithm terminates and the number of iterations k = i + 1 is determined. The skyline on P is SK ( P )=  X  k i =1 SK i . In the following we detail which points in SK i will be chosen.
Having obtained SK i at r ,asimplewaytoupdatethe local filter of each sensor v is to broadcast all the points in SK i to it. However, this naive approach will incur a much more energy overhead than needed. On the other hand, if none of the newly found global skyline points is broad-cast, the local filter of each sensor cannot filter out as many unlikely skyline points as possible without the help by the newly skyline points. To this end, we propose a method to tradeoff the energy consumption between broadcasting and data transmission, based on the volume of the efficient dominance region of points. The efficient dominance region of a point p is the subspace of the dominance region of p that has not been covered by the dominance regions of pre-viously found skyline points and all the points inside are not yet examined.

Denote by EDR ( p ) j an approximate volume of the effi-cient dominance region of point p at the j th dimension, 1 j  X  d .Let GSF i be the set of chosen skyline points to broad-cast after the i th iteration. Given a set P of d dimensional points, let MAX =( max 1 ,...,max d )and MinSK ( i )= ( minSK ( i ) 1 ,...,minSK ( i ) d )bethe virtual points ,where max j is the maximum value at the j th dimension of the points in P ,and minSK ( i ) j is the minimum value at the j th dimension of all found skyline points in previous iterations. The approximate volume of the efficient dominance region of point p =( p 1 ,p 2 , ..., p d )in SK ( P i )atthe j th dimension is EDR ( p ) j =( minSK ( i ) j  X  p j )  X  ( Q p in SK i with the maximum value of EDR ( p ) j is chosen and added to GSF i if p  X  GSF i and EDR ( p ) j &gt; 0. As a result, at most d skyline points (at most one point chosen in each dimension) are chosen for broadcast to update the local filters.
Once the initial skyline is found, what followed is to moni-tor the skyline with time progress. In this section we propose a novel algorithm MSM to maintain the skyline under a sliding window environment incrementally. Let t 0 be the time step at which the update starts and P t 0 is the initial set of points. The initial skyline, SK ( P is obtained by the proposed algorithm DRP . Algorithm MSM is used to maintain the skyline in the WSN at each time step t with t&gt;t 0 , which consists of two phases. One is to update the new skyline points by traversing the sensors in the routing tree in the bottom-up fashion. Another is that, the base station r determines which found skyline points so far to be broadcast to update the local filter of each sensor. In the following, we detail these two phases.
At time step t , each sensor first updates set P ( v ) t by re-moving expired points and adding newly generated points, where P ( v ) t is the set of points at sensor v .Eachsensor also removes expired points from its local filter LF ( v ) point p in P ( v ) t is dominated by another point q in either P ( v ) t or LF ( v ) t and q.time  X  p.time , p is safely removed. Let CSK ( v ) t be the set of remaining points in P ( v ) are not dominated by any point in LF ( v ) t . The skyline merge algorithm is then applied on set  X  v  X  V CSK ( v ) t obtain the skyline NewSK t , and the skyline on the union of NewSK t and the subset of SK ( P t  X  1 ) of non-expired points is the skyline of the dataset at time step t , i.e., SK ( P base station r then determines whether to broadcast some skyline points obtained since last broadcast to update the local filters, and which skyline points should be broadcast. In the following, this issue will be addressed.
We first address which found skyline points to be cho-sen for broadcast to avoid excessive energy consumption by broadcasting all the skyline points. To do so, two factors are to be taken into account: one is that a point with longer re-maining lifespan will potentially filter out much more points; another is that a point with larger volume of efficient dom-inance region will filter out more points. Specifically, de-note by GSF t the set of points broadcast at time step t and GSF t ( t )= { p | p  X  GSF t ,p.time &gt; t  X  W } ,where t is the current time step. Let Min t =( minSK ( t ) 1 ,..., minSK ( t ) d )bea d -dimensional virtual point, where minSK ( t ) is the minimum value at the i th dimension among all the points in GSF t ( t )attimestep t .Let margin ( p, t ) i rep-resent the distance from point p to the region being dom-inated by the skyline points in GSF t ( t )atthe i th dimen-sion. If minSK ( t ) i &gt;p i , margin ( p, t ) i = minSK ( t ) otherwise, margin ( p, t ) i =  X  . The approximate evalua-tion function of the efficient dominance region EDR ( p, t ) margin ( p, t ) i  X  EDR ( p, t ) i is able to filter out more points. For every point p in set SK ( P t )  X  GSF t ( t ), define the weight of p as w ( p ) i = EDR ( p, t ) i / ( W  X  t + p.time ) at each dimension i is calculated, and the point p is added to GSF t if w ( p ) min { w ( q ) i ,  X  q  X  SK ( P t )  X  GSF t ( t ) } and p  X  W  X  t + p.time is the remaining lifespan of p .
 We then investigate when the base station r broadcasts GSF t into the sensor network to update local filters. As-sume that r broadcasts GSF t 0 into the sensor network. At each time step t , the base station r computes GSF t as men-tioned above. Triggering a broadcast depends on whether the gain of filtering out more points by the updated local filters outweighs the broadcast overhead. We now analyze the gain of broadcasting GSF t . Assume that S t is the set of points received by the base station r and dominated by the points in GSF t  X  1 .If GSF t  X  1 was broadcast at time step t  X  1, all the points in S t will be filtered out from the trans-mission and thus the total amount of saved energy is at least  X   X  S t h ( p, v )4 d ( R + r e ), where h ( p, v ) is the number of hops between r and sensor v in which point p is originally located, which will be used to predict that it will bring the similar amounts of energy saving in future if GSF t is broadcast, and GSF t is expected to be part of the local filter within thetimeinterval( t, t + T t ], where T t is the average remain-ing lifespan of the points in GSF t . Thus, the total amount of energy saving E save ( t ) during ( t, t + T t ]isasfollows,
We finally evaluate the overhead on broadcasting GSF t at time step t , which includes the energy consumption over-head on broadcasting GSF t into the sensor network and the unpaid energy saving overhead on the last broadcast at time step t with t &lt;t . The total amount of energy overhead on broadcasting to the whole sensor network is no greater than ( d  X  4 d  X  ( R + r e )+(  X  t +  X  r ))  X  n ,where n is the number of sensors, because every sensor will receive a message from its parent and broadcast the message to its children. On the other hand, GSF t is expected to be part of the local filter of each sensor from t to t + T t ,where T t is the av-erage remaining lifespan of the points in GSF t . However, if r broadcasts GSF t at time step t during ( t ,t + T t ], this means that the last broadcast does not deliver its promised energy saving from t +1 to t + T t . Thus, the amounts of unpaid energy are  X  p  X  S t h ( p, v )4 d ( R + r e )  X  ( T where S t is the set of points being forwarded to the base station r and dominated by GSF ( t )attimestep t .Ac-cordingly, the overh ead on broadcasting GSF t , Cost ( t ), is thus If t&lt; T t + t , combined inequalities (1) and (2), we have  X   X  S t h ( p, v )4 d ( R + r e ) T t  X  (4 d 2 ( R + r e )+(  X  Otherwise,  X   X  S t h ( p, v )4 d ( R + r e ) T t  X  (4 d 2 ( R + r e )+(  X 
Thus, the base station r will trigger a broadcast if the inequality either (3) or (4) is met, depending on whether t&lt; T t + t . In this section we evaluate the performance of algorithms DRP and MSM against existing algorithms in terms of the total energy consumption and the maximum energy consumption among sensors. We assume that the sensor network con-taining 500 sensors with each being 10 meters transmission range is used to monitor a 100 m  X  100 m region of interest, and the base station is located at the square center. The en-ergy overheads on transmitting and receiving a header and handshaking are  X  t =0 . 4608 mJ and  X  r =0 . 1152 mJ .The energy consumptions of transmitting and receiving one byte are R =0 . 0144 mJ and r e =0 . 00576 mJ , respectively. In our experiments, the datasets are the real sensing datasets obtained by the Intel Lab at UC Berkeley [12].

We first evaluate the performance of algorithm DRP against existing algorithms by varying dimensionality d from2to4. We refer to the dynamic filter algorithm by Huang et al [2] as algorithm DF , the single point filter algorithm and grid index filter algorithm by Xin et al [10] as algorithms TF and GI , respectively. Fig. 1(a)-(d) show the total energy consumption and the maximum energy consumption among the sensors by various algorithms on real datasets. It can be seen that the proposed algorithm DRP outperforms the others significantly. (a) Total energy consumption on real datasets Figure 1: The performance of evaluation algorithms
We then study the performance of different algorithms for skyline maintenance on real sensing datasets. The window length is set W = 300. Fig. 2 plots the performance of dif-ferent maintenance algorithms within sliding windows from time step 301 to 3,600. From Fig. 2(a)-(f), algorithm MSM has the best performance among all the algorithms in terms of the total energy consumption and the maximum energy consumption among the sensors. With time going by, the performance gap between algorithm MSM and algorithm GI becomes bigger and bigger. Thus, algorithm MSM delivers a longer network lifetime than that of existing algorithms.
In this paper we first devised an algorithm DRP for sky-line query evaluation that returns the skyline points progres-sively. We then proposed an energy-efficient incremental al-gorithm MSM for skyline maintenance within sliding window environments. We also conducted experimental simulations on real sensing datasets. The experimental results show that the proposed algorithms significantly outperform existing al-gorithms in terms of various performance metrics. [1] W.T. Bakle, U. G  X  u ntzer, J.X. Zheng. Efficient [2] Z.Huang,C.S.Jansen,H.Lu,B.C.Ooi.Skyline [3] D. Kossmann, F. Ramask, S. Rost. Shooting stars in [4] K.C. Lee, B. Zheng, H. Lu, W-C. Lee. Approaching [5] S. Madden, M. J. Franklin, J. M. Hellerstein, W. (a) Total energy consumption on 2-dimensional datasets (c) Total energy consumption on 3-dimensional datasets (e) Total energy consumption on 4-dimensional datasets Figure 2: The performance of maintenance algo-rithms [6] S. Madden, M. J. Franklin, J. M. Hellerstein, W. [7] D. Papadias, Y. Tao, G. Fu, B. Seeger. An optimal [8] G. J. Pottie, W. J. Kaiser Wireless Integrated [9] S. Wang, Q. Vu, B. C. Ooi, Anthony K. H. Tung, L. [10] J. Xin, G. Wang, L. Chen, X. Zhang, Z. Wang.
 [11] Y. Yao, J. Gehrke. Query processing for sensor [12] http://db.csail.mit.edu/labdata/labdata.html, 2004.
