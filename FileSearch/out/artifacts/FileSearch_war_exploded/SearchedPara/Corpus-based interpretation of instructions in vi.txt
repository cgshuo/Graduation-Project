 Mapping instructions into automatically executable actions would enable the creation of natural lan-guage interfaces to many applications (Lau et al., 2009; Branavan et al., 2009; Orkin and Roy, 2009). In this paper, we focus on the task of navigation and manipulation of a virtual environment (Vogel and Jurafsky, 2010; Chen and Mooney, 2011).

Current symbolic approaches to the problem are brittle to the natural language variation present in in-structions and require intensive rule authoring to be fit for a new task (Dzikovska et al., 2008). Current statistical approaches require extensive manual an-notations of the corpora used for training (MacMa-hon et al., 2006; Matuszek et al., 2010; Gorniak and Roy, 2007; Rieser and Lemon, 2010). Manual anno-tation and rule authoring by natural language engi-neering experts are bottlenecks for developing con-versational systems for new domains.

This paper proposes a fully automated approach to interpreting natural language instructions to com-plete a task in a virtual world based on unsupervised recordings of human-human interactions perform-ing that task in that virtual world. Given unanno-tated corpora collected from humans following other humans X  instructions, our system automatically seg-ments the corpus into labeled training data for a clas-sification algorithm. Our interpretation algorithm is based on the observation that similar instructions ut-tered in similar contexts should lead to similar ac-tions being taken in the virtual world. Given a previ-ously unseen instruction, our system outputs actions that can be directly executed in the virtual world, based on what humans did when given similar in-structions in the past. Our environment consists of six virtual worlds de-signed for the natural language generation shared task known as the GIVE Challenge (Koller et al., 2010), where a pair of partners must collaborate to solve a task in a 3D space (Figure 1). The  X  X nstruc-tion follower X  (IF) can move around in the virtual world, but has no knowledge of the task. The  X  X n-struction giver X  (IG) types instructions to the IF in order to guide him to accomplish the task. Each cor-pus contains the IF X  X  actions and position recorded every 200 milliseconds, as well as the IG X  X  instruc-tions with their timestamps.
 We used two corpora for our experiments. The C m corpus (Gargett et al., 2010) contains instruc-tions given by multiple people, consisting of 37 games spanning 2163 instructions over 8:17 hs. The C s corpus (Benotti and Denis, 2011), gathered using a single IG, is composed of 63 games and 3417 in-structions, and was recorded in a span of 6:09 hs. It took less than 15 hours to collect the corpora through the web and the subjects reported that the experi-ment was fun.

While the environment is restricted, people de-scribe the same route and the same objects in ex-tremely different ways. Below are some examples of instructions from our corpus all given for the same route shown in Figure 1. 1) out 2) walk down the passage 3) nowgo [sic] to the pink room 4) back to the room with the plant 5) Go through the door on the left 6) go through opening with yellow wall paper
People describe routes using landmarks (4) or specific actions (2). They may describe the same object differently (5 vs 6). Instructions also differ in their scope (3 vs 1). Thus, even ignoring spelling and grammatical errors, navigation instructions con-tain considerable variation which makes interpreting them a challenging problem. Our algorithm consists of two phases: annotation and interpretation. Annotation is performed only once and consists of automatically associating each IG instruction to an IF reaction. Interpretation is performed every time the system receives an instruc-tion and consists of predicting an appropriate reac-tion given reactions observed in the corpus.
Our method is based on the assumption that a re-action captures the semantics of the instruction that caused it. Therefore, if two utterances result in the same reaction, they are paraphrases of each other, and similar utterances should generate the same re-action. This approach enables us to predict reactions for previously-unseen instructions. 3.1 Annotation phase The key challenge in learning from massive amounts of easily-collected data is to automatically annotate an unannotated corpus. Our annotation method con-sists of two parts: first, segmenting a low-level in-teraction trace into utterances and corresponding re-actions, and second, discretizing those reactions into canonical action sequences.

Segmentation enables our algorithm to learn from traces of IFs interacting directly with a virtual world. Since the IF can move freely in the virtual world, his actions are a stream of continuous behavior. Seg-mentation divides these traces into reactions that fol-low from each utterance of the IG. Consider the fol-lowing example starting at the situation shown in Figure 1: IG(1): go through the yellow opening IF(2): [walks out of the room] IF(3): [turns left at the intersection] IF(4): [enters the room with the sofa] IG(5): stop
It is not clear whether the IF is doing  X  3 , 4  X  be-cause he is reacting to 1 or because he is being proactive. While one could manually annotate this data to remove extraneous actions, our goal is to de-velop automated solutions that enable learning from massive amounts of data.

We decided to approach this problem by experi-menting with two alternative formal definitions: 1) a strict definition that considers the maximum reaction according to the IF behavior , and 2) a loose defini-tion based on the empirical observation that, in sit-uated interaction, most instructions are constrained by the current visually perceived affordances (Gib-son, 1979; Stoia et al., 2006).

We formally define behavior segmentation (Bhv) as follows. A reaction r k to an instruction u k begins right after the instruction u k is uttered and ends right before the next instruction u k +1 is uttered. In the example, instruction 1 corresponds to  X  2 , 3 , 4  X  . We formally define visibility segmentation (Vis) as fol-lows. A reaction r k to an instruction u k begins right after the instruction u k is uttered and ends right be-fore the next instruction u k +1 is uttered or right after the IF leaves the area visible at 360  X  from where u k was uttered. In the example, instruction 1  X  X  reaction would be limited to  X  2  X  because the intersection is not visible from where the instruction was uttered.
The Bhv and Vis methods define how to segment an interaction trace into utterances and their corre-sponding reactions. However, users frequently per-form noisy behavior that is irrelevant to the goal of the task. For example, after hearing an instruction, an IF might go into the wrong room, realize the er-ror, and leave the room. A reaction should not in-clude such irrelevant actions. In addition, IFs may accomplish the same goal using different behaviors: two different IFs may interpret  X  X o to the pink room X  by following different paths to the same destination. We would like to be able to generalize both reactions into one canonical reaction.

As a result, our approach discretizes reactions into higher-level action sequences with less noise and less variation. Our discretization algorithm uses an automated planner and a planning representation of the task. This planning representation includes: (1) the task goal, (2) the actions which can be taken in the virtual world, and (3) the current state of the virtual world. Using the planning representation, the planner calculates an optimal path between the starting and ending states of the reaction, eliminat-ing all unnecessary actions. While we use the clas-sical planner FF (Hoffmann, 2003), our technique could also work with classical planning (Nau et al., 2004) or other techniques such as probabilistic plan-ning (Bonet and Geffner, 2005). It is also not de-pendent on a particular discretization of the world in terms of actions.

Now we are ready to define canonical reaction c k formally. Let S k be the state of the virtual world when instruction u k was uttered, S k +1 be the state of the world where the reaction ends (as defined by Bhv or Vis segmentation), and D be the planning domain representation of the virtual world. The canonical reaction to u k is defined as the sequence of actions returned by the planner with S k as initial state, S k +1 as goal state and D as planning domain. 3.2 Interpretation phase The annotation phase results in a collection of ( u k , c ) pairs. The interpretation phase uses these pairs to interpret new utterances in three steps. First, we fil-ter the set of pairs into those whose reactions can be directly executed from the current IF position. Sec-ond, we group the filtered pairs according to their reactions. Third, we select the group with utterances most similar to the new utterance, and output that group X  X  reaction. Figure 2 shows the output of the first two steps: three groups of pairs whose reactions can all be executed from the IF X  X  current position.
We treat the third step, selecting the most similar group for a new utterance, as a classification prob-lem. We compare three different classification meth-ods. One method uses nearest-neighbor classifica-tion with three different similarity metrics: Jaccard and Overlap coefficients (both of which measure the degree of overlap between two sets, differing only in the normalization of the final value (Nikravesh et al., 2005)), and Levenshtein Distance (a string met-ric for measuring the amount of differences between two sequences of words (Levenshtein, 1966)). Our second classification method employs a strategy in which we considered each group as a set of pos-sible machine translations of our utterance, using the BLEU measure (Papineni et al., 2002) to select which group could be considered the best translation of our utterance. Finally, we trained an SVM clas-sifier (Cortes and Vapnik, 1995) using the unigrams Algorithm Bhv Vis Bhv Vis Jaccard 47% 54% 54% 70% Overlap 43% 53% 45% 60% BLEU 44% 52% 54% 50% SVM 33% 29% 45% 29% Levenshtein 21% 20% 8% 17% of each paraphrase and the position of the IF as fea-tures, and setting their group as the output class us-ing a libSVM wrapper (Chang and Lin, 2011).

When the system misinterprets an instruction we use a similar approach to what people do in order to overcome misunderstandings. If the system exe-cutes an incorrect reaction, the IG can tell the system to cancel its current interpretation and try again us-ing a paraphrase, selecting a different reaction. For the evaluation phase, we annotated both the C m and C s corpora entirely, and then we split them in an 80/20 proportion; the first 80% of data collected in each virtual world was used for training, while the remaining 20% was used for testing. For each pair ( u k , c k ) in the testing set, we used our algorithm to predict the reaction to the selected utterance, and then compared this result against the automatically annotated reaction. Table 1 shows the results.
Comparing the Bhv and Vis segmentation strate-gies, Vis tends to obtain better results than Bhv. In addition, accuracy on the C s corpus was generally higher than C m . Given that C s contained only one IG, we believe this led to less variability in the in-structions and less noise in the training data.
We evaluated the impact of user corrections by simulating them using the existing corpus. In case of a wrong response, the algorithm receives a second utterance with the same reaction (a paraphrase of the previous one). Then the new utterance is tested over the same set of possible groups, except for the one which was returned before. If the correct reaction is not predicted after four tries, or there are no ut-terances with the same reaction, the predictions are registered as wrong. To measure the effects of user corrections vs. without, we used a different evalu-ation process for this algorithm: first, we split the corpus in a 50/50 proportion, and then we moved correctly predicted utterances from the testing set to-wards training, until either there was nothing more to learn or the training set reached 80% of the entire corpus size.

As expected, user corrections significantly im-prove accuracy, as shown in Figure 3. The worst algorithm X  X  results improve linearly with each try, while the best ones behave asymptotically, barely improving after the second try. The best algorithm reaches 92% with just one correction from the IG. We presented an approach to instruction interpreta-tion which learns from non-annotated logs of hu-man behavior. Our empirical analysis shows that our best algorithm achieves 70% accuracy on this task, with no manual annotation required. When corrections are added, accuracy goes up to 92% for just one correction. We consider our results promising since state of the art semi-unsupervised approaches to instruction interpretation (Chen and Mooney, 2011) reports a 55% accuracy on manually segmented data.

We plan to compare our system X  X  performance against human performance in comparable situa-tions. Our informal observations of the GIVE cor-pus indicate that humans often follow instructions incorrectly, so our automated system X  X  performance may be on par with human performance.

Although we have presented our approach in the context of 3D virtual worlds, we believe our tech-nique is also applicable to other domains such as the web, video games, or Human Robot Interaction.
