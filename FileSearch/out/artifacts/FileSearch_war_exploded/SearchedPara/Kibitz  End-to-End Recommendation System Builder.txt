 Kibitz (kibitz.csail.mit.edu) is a web application and recommenda-tion system framework that helps inexperienced and novice pro-grammers to build recommenders without the need to program the back end for the system. The author uploads a table of items, and Kibitz produces a collaborative-filtering recommender for the up-loaded items. The recommender can be hosted by Kibitz or down-loaded and customized as a set of static pages hosted on the author X  X  personal web domain. Developers who want to avoid the hassle of writing their own recommender back end may choose to link their websites to our service through our easy to use API. A demo of our system can be found at kibitz.csail.mit.edu/video_demo/.
Personalized recommendation systems that provide users with recommendations based on ratings are becoming increasingly pop-ular among many websites and online services. To implement a rec-ommendation system, one may choose from a few implementations such as Apache Mahout or Lenskit [1, 4]. But the labor involved in installing and configuring such a system can be a deterrent for ex-perienced developers and an impassable barrier for novice users, which unnecessarily limits the adoption of recommender systems in places where they would be useful such as small businesses and startups, organization websites, and student researchers.
Our Kibitz system aims to reduce or eliminate barriers to the in-corporation of recommender systems for both developers and novices. Kibitz provides an easy to use web interface for creating a recom-mendation service X  X oth back end and front end. It also provides a simple API for linking the recommender back end to any front-end web page that an author provides. Novice users can deploy a hosted recommender service (both back and front end) on the Kibitz server or can download and customized front-end HTML to place on their own site. Developers can host their back end on Kibitz while con-necting any front end they write to it via a simple API.
We now present a more detailed description of Kibitz X  X  compo-nents. Kibitz supports the typical workflow of collaborative filter-ing: 1. The creater selects a set of items that will be rated and rec-2. Users rate items from this set. 3. Collaborative filtering computations are used to recommend
The Kibitz back end maintains a database of items and set of user accounts, receives and stores user ratings, and runs collabora-tive filtering algorithms to predict other ratings. We leverage our own separate project, Datahub [3], which provides a hosted SQL database, to store item information and user accounts. Kibitz as-sumes that items will be stored as rows of a database table with at least columns providing a title, description, and (optional) image for the items. We use Datahub X  X  existing APIs to help users create accounts and upload data items. The user then tells Kibitz which Datahub table contains their set of items. If they have a file of pre-vious ratings, they may choose to upload those ratings for initial training of the recommender.
 To compute recommendations, Kibitz uses Apache Mahout [1]. In the future, we plan to add new recommendation systems such as LensKit and new algorithms, which is as simple as adding another makeNewAlgorithmRecommendations method to our API.

Fig. 1 shows some of the steps a creator takes to create a recom-mender on Kibitz.

In addition to items, Kibitz uses Datahub to store user rating data as its input (see Fig. 3). This permits developers to use rating data for other purporses.
After creating a table of items on Datahub and completing the relevant info in the Kibitz form, we generate a default recommender front end containing the items in the table and methods for the user to rate the item. This basic front end allows users to browse items, search for items, rate, and receive recommendations based on rat-ings. Content creators may choose to enable certain types of recom-mendations such as most popular items and random. Fig. 1 shows the front end that is output by Kibitz based on information provided by the content creator. This front end is a simple HTML page with a small amount of JavaScript that uses calls to the (Thrift-based [2]) Kibitz API to let users log in to the recommender, to collect user ratings, and to deliver lists of recommended items based on ratings.
Kibitz allows creators who want a different look for their rec-ommender to download the HTML document providing the basic recommnder and customize it. The creator can define templates for presenting items and modify CSS to change the look of the rec-ommender. Fig. 2 shows some simple alterations to the CSS file main.css downloaded from Kibitz. Content creators may also choose to host their new front end under the Kibitz domain by up-loading their CSS files on the site.
A creator with web programming skills can create arbitary front ends, for example, embedding rating and recommendation func-tionality in any web application over a set of items, by directly making API calls to the Kibitz back end. Fig. 4 illustrates some calls made to the Kibitz server via JavaScript.

