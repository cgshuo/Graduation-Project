
A common problem in many data mining and machine learning applications is, given a dataset, to identify data points that show significant anomalies compared to the majority of the points in the dataset. These points may be noisy data, which one would like to remove from the dataset, or may contain information that is particularly valuable for the identification of patterns in the data.

The domain of outlier detection [1], [2] deals with the problem of finding such anomalous data, called outliers. Outlier detection can be viewed as a special case of unsu-pervised binary class separation in the case of  X  X are classes X . The dataset is separated into a large class of  X  X ormal cases X  and a small class of  X  X are cases X  or  X  X utliers X .

Outlier detection is particularly problematic as the di-mensionality d of the given dataset increases. Problems are often due to sparsity or due to the fact that distance-based approaches fail because the relative distance between any pair of points tends to become relatively the same, see [3].
One idea to overcome such problems is to rank outliers in the high-dimensional space according to how consistently they are outliers in low-dimensional subspaces, in which out-lierness is easier to assess. To this end, Lazarevic and Kumar developed Feature Bagging [4] and He et al. SOE1 [5], both taking an ensemble approach combining the outlier results over subspaces. SOE1 is remarkably simple, summing the local densities of each point for each individual attribute. While SOE1 looks only at 1-dimensional subspaces (i.e., at single attributes), Feature Bagging combines the results of the well-known LOF outlier detection method [6] applied to random subspaces with d/ 2 or more attributes (out of a total of d attributes). However, both methods have weaknesses.
SOE1. Looking only at 1-dimensional subspaces is very efficient but not always effective. It is simple to give ex-amples showing when this may lead to missed information; Figure 1 illustrates such a case. The point in the upper right corner is not a clear outlier with respect to either attribute 1 or attribute 2, but is obviously an outlier in the two-dimensional space. In two dimensions this is obvious, but the likelihood of such a scenario arising and being significant clearly declines as the subspace size increases  X  due to the phenomenon explored in [3].

Feature Bagging. Once the LOF algorithm, applied in the subspaces, becomes less effective (as d/ 2 rises beyond the dimensionality barrier shown by [3], see Section II), bagging will become less effective, too.

Motivated by that, we propose a method that employs a stable outlier detection algorithm for subspaces of a fixed low dimensionality k , 1 &lt; k &lt;&lt; d , and combines the results of that algorithm over all k -dimensional subspaces to provide an outlier ranking in d dimensions.
 This results in two major and novel contributions.

Contribution to Outlier Detection: We provide a new framework for outlier detection in an arbitrary number of dimensions, based on rankings obtained by investigating low-dimensional subspaces (as opposed to Feature Bagging) that consist of more than one attribute (as opposed to SOE1). Experiments show that our method is superior not only to SOE1 and Feature Bagging, but also to state-of-the-art outlier detection algorithms designed for multi-variate data. Those algorithms are the two distance-based methods ORCA [7] and Robust Mahalanobis Distance (RMD) [8], and the density-based LOF -method [6].

Contribution to Class Separation: Our outlier ranking can be applied to unsupervised class separation even when neither one of the classes is  X  X are X   X  with marked success. Class separation by means of an outlier score has, inciden-tally, been used indirectly for the sole purpose of validating outlier detection approaches [4], [5]. For lack of ground truth, unbalanced binary class training data were used with the assumption that the rare class points are outliers vis-` a-vis the dominant class [9]. In this work, we not only separate balanced as well as unbalanced classes of high dimensional data but also elucidate the phenomenon that allows this class separation.

The problems we address here are binary class separation problems in which the two classes are assumed to differ in variance . We argue that, for two underlying classes A and B of different variance, our outlier ranking basically separates all points in A from all points in B , even if the two classes overlap completely and are of the same size . As we will explain below, this is because points in the class of high variance are more likely to be outliers consistently in many low-dimensional subspaces and are thus ranked higher in the resulting outlier ranking.

We test this experimentally with positive results: not only is our method, applied to the case of balanced classes, frequently superior to other outlier detection methods, but it can even compete with supervised classification methods, which are fed with labelled training data.

Only few existing methods can cope with the problem of outlier detection in high-dimensional data, due to sparsity. The effectiveness of most common methods declines be-cause they rely on distances between points, something that becomes less meaningful in high dimensionality, because the distance between any two points tends to become relatively the same, cf. [3]. Real-world datasets frequently have large numbers of attributes so this poses a significant problem especially because approximation schemes in general and tree indices in particular tend to break down with more than 10-15 dimensions [3]. Beyond this dimensionality barrier, algorithms that work in the full dimensional space face considerable challenges in both efficiency and effectiveness.
This is the primary motivation for using information about outliers in lower-dimensional subspaces of the full high-dimensional space in order to determine which points are outliers in the full space.

While the literature on anomaly detection is vast, very few methods aim at investigating subspaces in high-dimensional data. Aggarwal and Yu [10] developed an evolutionary search algorithm to find low density subspaces, though the predominance of such spaces poses challenges, cf. [11]. Knorr and Ng [12] computed a dendogram to show the intensional knowledge in the hierarchy of subspaces in which a point is an outlier. Zhang and Wang [11] proposed HighDOD, a method that uses a sample based learning process based on the sum of the distances to the k nearest neighbours ( k -NN) to identify the subspaces in which a given point is an outlier.

SOE1 [5] and Feature Bagging [4] represent the current state-of-the art as far as ranking points according to their
Validating outlier detection methods was largely lacking until the idea of using rare classes as outliers in unbalanced supervised classification training data was introduced in [9]. Since then, others have used the separation of a rare class from a dominant class as a means to validate an outlier detection approach. However, the stated objective was never class separation per-se and the data used was typically heav-ily unbalanced for the exact purpose of validating outliers. Exploiting outliers for genuine class separation was never intended or explained.

We assume a dataset D  X  R d in d dimensions. Each of the dimensions represents a different attribute . For every point x  X  D and every i  X  { 1 , . . . , d } we denote by x the value in the i th attribute of x , i.e., x = ( x 1 , . . . , x k  X  d and S = { i 1 , . . . , i k } X  X  1 , . . . , d } , then D the set { ( x i on the attributes indexed by S .
 For every finite set Z , let | Z | denote the cardinality of Z . A. Algorithmic Idea
In this section we assume an efficient algorithm Outlier , which, given a subspace D S for a  X  X mall X  set S of attributes (in our experiments, | S | = 2 is sufficient) and a point x  X  D
S , determines a degree of  X  X utlierness X  of x in D S . Let denote this degree.

We will describe two such algorithms in detail in Ap-pendix A; however, the specific Outlier algorithm used for this purpose is not critical for our outlier detection approach in high dimensionality  X  other heuristics could be applied in the same way.
 Note that we have not defined what an  X  X utlier X  in D is, since there is no unique commonly accepted definition of that term. Different versions of the algorithm Outlier correspond to different interpretations of the term  X  X utlier in D S  X .

Our algorithmic approach to outlier detection in D can be sketched as follows. Intuitively, our algorithm accumulates an outlier score for every data point, by counting how often and to which degree it is an  X  X utlier X  in a set of all subspaces of a low dimension k . The top-ranked points are considered outliers. 1) Compute an outlier score for every point in D . 2) Rank the points in D with respect to their outlier
The crucial question in this approach is over which subspaces we should accumulate the outlier scores, i.e., how to choose the dimensionality k . On the one hand, taking all subspaces of a relatively high dimension k would be intractable. On the other hand, as argued in Section I, it is not advisable to accumulate only over subspaces of dimension 1 and when d is large, so remains d/ 2 .

As the experiments described in Section IV demonstrate, a value of k = 2 is sufficient to outperform standard outlier detection methods on typical datasets, while at the same time resulting in a very efficient and effective method.
 B. A Note on the Dimensionality d of the Original Dataset
It is important to note here that a high enough dimension-ality d of the original dataset is essential for our method to work as discussed in Section III-D.

Note that none of the closely related work on outlier detection attempts genomic or proteomic data. Outlier de-tection (classically) seeks to find individual anomalies or rare classes in the presence of major classes or distribu-tions. Genomic and proteomic data typically have a very small number of interesting features and no large coherent class(es). Thus such data has not been the focus of research on outlier detection so far and therefore we have also not studied this kind of data. The datasets we use for empir-ical evaluation below have between 20 and 166 attributes. Datasets over 10-15 dimensions can be considered  X  X igh X  due to the onset of high-dimensional effects [3].
 C. Application to Unsupervised Class Separation even beyond the  X  X are classes X  case immediately, if the given dataset fulfills the following conditions.  X  The given data separate in two classes, A and B . 2  X  Class B is of higher variance than class A .

Under the given assumptions, we propose the following straightforward unsupervised class separation method. 1) Run T  X  on the given dataset D to obtain a ranking 2) For every t  X  { 1 , . . . , | D |} assign a likelihood of the
The reason this method is expected to work well is based on the same intuition that our outlier detection method is based on:
Let us explain this intuition in more detail, assuming a density-based Outlier method applied in 2-dimensional subspaces (the argument easily carries over to other cases).
First, assume a point x is ranked high in the outlier subspaces D { i,j } of D , x is assigned a high outlier degree in D { i,j } by the corresponding Outlier method.
 This means that, for  X  X any X  2-dimensional subspaces D { i,j } of D , x is isolated (i.e., an outlier). Since the class A has low variance, points in A are expected to be not isolated in  X  X ost X  2-dimensional subspaces. Hence x is more likely to belong to B than to belong to A . Consequently, if a point has a score value above a certain threshold, this point is most likely to belong to B .

Second, assume a point x is ranked low in the outlier subspaces D { i,j } of D , x is not considered an outlier in D { i,j } by the corresponding Outlier method. This means that, for  X  X ost X  2-dimensional subspaces D { i,j } of D , x is in a dense region. Since the class B has high variance, points in B are expected to be isolated in  X  X any X  2-dimensional subspaces. Hence x is more likely to belong to A than to belong to B . Consequently, if a point has a score value below a certain threshold, this point is more likely to belong to A .

In particular, if the difference between the variance of A and the variance of B is high enough, and if d is high enough to provide a sufficient number of 2-dimensional subspaces, we expect thus to separate basically all points in B from all points in A  X  just because basically all points in B will have higher outlier scores than any point in A .

Since this observation is totally independent of the mean  X  around which the points in a class are distributed, our algorithm works well even if two classes overlap completely  X  as long as the two classes differ significantly in variance.
Figure 2 illustrates the general phenomenon. In Example (i), there are two equal variance classes and this results in their members being well mixed in the outlier score ranking. However, in Example (ii), the variances of the two classes are different and there is a tendency for the higher variance class c v to populate the higher outlier score rankings. If the classes are heavily overlapping, in any given subspace, only a few members of c v will visually appear as outliers. However, as their underlying variance is higher, accumulating over multiple subspaces, eventually almost all can differentiate themselves from the lower variance class.
In fact, for many real-world datasets it is the case that they contain two classes that differ significantly in variance. For instance, when considering medical data, it is often the case that the class representing healthy cases has lower variance than the class representing unhealthy cases. To date, outlier detection has been understood as beneficial in separating two such classes in the case of an extreme class imbalance, i.e., if the  X  X ealthy X  class is predominant in the sense that it contains many more data points than the  X  X nhealthy X  class. However, our outlier detection method allows for unsupervised class separation even in the case of perfectly balanced classes, as long as the classes differ in variance.
 D. Concentration of Measure
The basis of this intuition lies in the law of large numbers and its extension by V. Milman [13] which he termed the concentration of measure. Milman showed that this is applicable to a large class of functions (Lipschitz) that are smooth and have a finite mean. A measure over an ensemble size m of independent variables strongly tends to the mean as m  X   X  . A simple example is coin tosses. If a coin of unknown bias p is thrown m times giving the results { X 0 , X 1 , ... } , then For example, if a balanced coin is thrown once there is complete uncertainty regarding the outcome. If the coin is thrown 1000 times, the number of heads will, in all probability, be rather close to 500. The larger the number of tosses, the more predictable the outcome. Similarly, high-dimensional vectors radiating from a distribution mean will tend to be found concentrating at a mean length which is a function of the variance of the distribution. This is the basis of separating concentric classes that are randomly generated with different variances. This phenomenon is also the cause of the phenomenon of converging maximum and minimum interpoint distances with increasing dimensionality eluci-dated by Beyer et al. [3].

Thus, concentration of measure, while making points increasingly similar and thus undermining the concept of outlierness, also improves our ability to estimate certain properties of the underlying distributions, as we demonstrate for variance. Equation 1 shows the bound tightens exponen-tially with m and Beyer et al. showed empirically that the effect is important for greater than 10-15 dimensions. An ensemble of completely enumerated subspaces size k over d independent dimensions will contain at least d  X  k + 1 independent sets of subspaces. Thus datasets with more than 15 dimensions may exhibit this phenomenon when an ensemble approach such as that described in this paper ( k = 2 ) is applied.

In the framework of T*, many different heuristics for determining outliers in low dimensionality could be plugged in. We propose two novel and effective methods. One based on entropy, T*ENT, and the other based on the Resolution-based Outlier Factor (ROF) [14], called T*ROF. Both these original algorithms are presented in Appendix A. Since Feature Bagging uses LOF as a basis for determining outlier scores in subspaces, we also experimented with using LOF in the T* framework (T*LOF). While the Feature Bagging method of [4] uses a relatively small sample of high di-mensional spaces, T*LOF enumerates all the 2D spaces using LOF. These three are compared with Feature Bagging, SOE1, Robust Mahalanobis Distance (RMD), ORCA, and full-dimensional LOF.

As it is difficult to find data with any ground truth ranking of outliers, we consider two types of datasets for evaluation.
Type 1. The data are ranked and we expect a relationship between this ranking and outlierness. In this case, the rank. As type 1 datasets we used three National Hockey League (NHL) datasets [15], which are popular validation sets in outlier detection research. In professional sports data, the bulk of the players are often hard to differentiate from each other but the top players tend to stand out on many attributes. Players could potentially be outliers for many reasons, not just because they are top players in the league. However, due to the fact that many attributes (e.g., number of goals scored or number of assists) have many players with  X  X ad X  values, we expect low-ranked players to be in a fairly dense area and thus unlikely to be outliers. For illustration, consider Figure 3 (Appendix A). More isolated points can be found in the upper right corner, where both attributes have their higher and  X  X etter X  values. It is reasonable, therefore, to expect a stronger correlation of an outlier ranking for the leading players than for the less successful players.
Type 2. The data are labelled in two classes A and B and we expect B to contain outliers more often than A . In this case, the accuracy of the outlier algorithms is measured by testing how many of the topmost ranked outliers are in B , using the actual number of points in B as a cutoff. We also measure area under the ROC curve (AUC). Type 2 data have been exploited this way for validating outlier detection methods before [4], [10] using  X  X are X  classes. In our case a range of UCI datasets [16] are used; they all have higher dimensionality and have data of two classes that are likely to differ in variance. For example, medical data are often of type 2.
 A. Evaluation on Type 1 Data.

The NHL datasets for seasons 2003/04, 2005/06, 2006/07 (there was no 04/05 season) each provide an official rank and values in 15 or 16 attributes for about 1000 hockey players. The attributes vary from having fairly continuous values to having no more than four possible values.

The algorithms are evaluated under the assumption that top players are frequently outliers. Table I shows the re-sults for the three most successful algorithms. Every  X  X or. X  value is the Pearson Correlation between the outlier score and the NHL ranking. For 2006/07 the top seven outliers determined by T*ENT method contain the players with NHL ranks 3,4,5,6,8 (2,3,4,5,6,7,9,10 for 2005/06 and 1,2,4,6 for 2003/04) and none with rank lower than 60 out of about 1000 players. T*ROF also put high ranking players at the top of the outlier scores. SOE1 had less obvious success with the leading players. (None of the other algorithms yielded a statistically significant correlation so the ranking appears quite random.) To further illustrate the results, it is also shown for each algorithm, down to which depth in the resulting ranking one has to look in order to find any 5 out of the top 10 NHL-ranked players.

This type of data drew a clear line between two groups of algorithms as the other comparison algorithms performed poorly on or could not handle this data. RMD could not complete the NHL data, ORCA did not achieve a signifi-cant correlation (e.g. 2003/04: r =  X  0 . 071 ), and LOF, as published, and thus Feature Bagging, are not suitable for certain attributes of the NHL dataset due to many identical data points and gave non-significant results when the task was attempted.
 B. Evaluation on Type 2 Data.

The algorithms were tested on all UCI Repository [16] binary problem datasets, with 20 or more attributes, which they would all reasonably be expected to complete. This meant requiring non-categorical data without missing values or a very large number of attributes (  X  500 ). While these limitations could be reduced by modifying certain of the algorithms, they serve as a useful set of conditions to define a group of datasets that is both broad in scope and free of any question of experimenter bias. Out of the 12 datasets that meet these criteria, two were left out each being one of a pair of datasets based on the same data. For example, the SPECTF data with the highest number of attributes was chosen. The  X  X ill-Valley X  dataset was omitted since the task should not be amenable to this approach  X  whether a sequence has a peak or a trough does not imply any likely difference in variance between the classes. On the other datasets, it is reasonably possible that the two classes may have different variances due to some meaningful tendency in the data. The statistics for the datasets are given in Table II.

Table II gives an overview of these datasets showing that they represent various balances including a preponderance of the class B expected to be more often contributing outliers. Hardly any would meet the usual  X  X are X  class criterion. For example, the WDBC set consists of 569 samples labelled in two classes, 212 malignant and 357 benign with 30 attributes for each sample. In this dataset as in many medical scenarios, normal biopsies tend to have quite strongly clustered results while abnormal ones exhibit a higher variance.
 The results on the UCI datasets are summarised in Tables performed well. However, RMD is hampered by high run time and SOE1 by parameter sensitivity. Being parameter friendly approach. Since T*ENT gives a binary score for each subspace it does best if score is not less than the number of points).

Table V gives an indication of how the run-time of the var-ious algorithms scales with dataset size and dimensionality. Results for T*LOF are given but the implementation used, while effective, was inefficient for low dimensional spaces and thus these run times could be significantly improved. In general, the scaling is in line with the theoretical run times suggested by the authors. Purely for the purpose of this scaling experiment, the WDBC dataset was used as a seed to create datasets 10, 50 and 100 times the size of the actual WDBC set. This was done by creating multiple copies of each point and adding a random amount of jitter to each, not exceeding 1%, thus preserving the core characteristics of the dataset. Similarly, to test scaling with respect to the number of attributes, the WDBC data was used as a seed with up to 10% jitter to minimize correlation effects.
An extensive, but not necessarily exhaustive, literature search for the best results on these datasets using supervised classifiers yielded the following: Ionosphere : Wang [17] using a range of k -NN classifiers and 10-fold cross-validation (MCV) achieved an accuracy of 87.8%. A Support Vector Machine (SVM) ensemble tested with 10-fold MCV achieved 95.20% [18].
 SPECTF : Previously, the CLIP3 algorithm was used to generate classification rules from these patterns that were 81.34% accurate (as compared with cardiologists X  diag-noses) [19]. Ali et al. [20] report that the best Linear Dimensionality (LD) reduction Quadratic classifier had an error of 4.44% while the LD Linear classifier studied had an error rate of 17.64%.
 Sonar : The Sonar dataset is known to be difficult to separate. Harmeling et al. [21] tested a wide variety of supervised methods including Gaussian mixtures, Support Vector Data Description (SVDD), Parzen, a k -means based approach, and several k -NN methods. Their concept was using various local density based measures to rank the points for their degree of being typical as an outlier method does. Results varied from AUC 0.596 (SVDD) to 0.870 (new  X k NN method).
 WDBC : Jiang and Zhou used a neural network to edit the training data for k NN classifiers [22]. With a minimum of 250 points used as training data, 100% separation of the classes was been achieved. With 200 training points they achieved 96% accuracy. Ali et al. [20] report that the best Linear Dimensionality (LD) reduction Quadratic classifier had an error of 4.02% while the LD Linear classifier studied had an error rate of 2.99%.
 Parkinsons : No comparable supervised classification results were located in our literature search.
 Spambase : Neural Expert networks have been reported with an accuracy of 85% [23] using 10 fold MCV.
 Credit Card : This is the Statlog (German Credit Card) dataset. Eggermont et al. used Genetic Programming and compared with C4.5 with Bagging and Boosting and other algorithms. The best result was a 27.1% misclassification rate [24].
 Musk : This is a highly studied dataset. For example, Zafra and Venture report accuracy with SVMs of 87% and 93% with a genetic algorithm [25]. This dataset is only nominally two-class as both musks and non-musks are made up of multiple classes and thus is possibly not suitable for the outlier approach.
 Insurance : This was part of the COIL 2002 competition and proved difficult for all algorithms. The best results were only a few percentage points better than the best in Table IV (See e.g. [26]).

The very best supervised classifiers outperform the out-lier methods on most datasets tested but the margins are generally small. Remarkably, one of our unsupervised ap-proaches achieved the best result on two datasets  X  Sonar (T*ROF) and Credit Card (T*ENT). T*ENT and T*ROF are remarkably competitive considering that they simply exploit the difference in variance between the classes and operate unsupervised.
 C. Parameters parameter  X  which determines the minimum cluster size for a cluster to be considered  X  X ajor X  and thus not contribute to the outlier result. In all the Type 1 experiments and most of the Type 2 experiments, this was set by the heuristic advised in [27] for TURN  X  , that is  X  = min { 100 , | D | 100 datasets, WDBC and Parkinsons, somewhat better results were obtained when this value was reduced, showing some sensitivity to this setting. SOE1 builds a histogram of the data and thus requires either digitised data or a digitisation parameter. For each experiment, a series of different settings were tried and the best results reported. SOE1 proved quite sensitive to this parameter. A mean could have been reported but then this risked a bias due to the range of values tested. LOF and Feature Bagging have a parameter minpts but we found that a value of 30 generally gave the best results as previously reported. RMD and ORCA required no parameter settings.

This paper introduces an entirely novel concept of sepa-rating classes based on variance rather than spatial location. This distinguishes it from statistical and other approaches, which use variance to validate separation generated by exploiting spatial differences. We have shown that this can be done very successfully in two-class problems even when the classes are balanced showing that outlier detection has application beyond the traditional problem of finding small numbers of extreme data or rare classes. Two novel outlier methods are presented that outperform the state-of-the-art in outlier detection algorithms. These demonstrate that, while inspecting 2D spaces is more expensive than simply analysing 1D spaces, a clear effectiveness benefit is obtained and the cost is still well below that of standard statistical methods that involve computing a covariance matrix.

These methods are provably efficient and empirically shown to be very effective and robust with respect to param-eter settings. Due to its framework nature, single components (the outlier detection method used in the subspaces) can be replaced.

The benefit of our outlier scoring technique shows in its application to unsupervised class separation beyond the  X  X are classes X  case.

If good methods for outlier detection in 3 , 4 , 5 , . . . dimen-sions can be developed, it would be interesting to analyze our framework for different values of k , i.e., for different subspace sizes. Of course it might be too inefficient to detect outliers in all 3-dimensional spaces (there are in general too many of these), but instead of looking at all of them, a random sample might be sufficient.
 Two Outlier Algorithms Employable by T  X 
As stated in Section III, one could use different vari-ants of Outlier algorithms. We describe two variants here, algorithm which has shown to outperform various others (DBSCAN, CHAMELEON, CURE, ROCK, Wavecluster, and k -Means) and has the additional advantage of being dimensions so far, but scales exponentially in d , we restrict our use of the T  X  framework to k = 2 in this paper. However, our experimental results will show that this already yields a method outperforming the state-of-the-art methods on real-world datasets.
 introduce the concepts of nearest neighbours and of clusters, given a real-valued parameter r called resolution .

Neighbours and Nearest Neighbours. Let x, x 0  X  D , S = { i, j }  X  { 1 , . . . , d } , i 6 = j . x is a neighbour of x 0 in D with respect to S if | x i  X  x 0 i |  X  r and | x j  X  x 0 a nearest neighbour of x 0 with respect to S (an S -NN for short) if x is a neighbour of x 0 with respect to S and there is no y  X  D with
Internal Points and Clusters. Let S = { i, j } X  X  1 , . . . , d } , i 6 = j , and x, x 0  X  D . x is internal in D S if x has at least 4 S -NNs. x and x 0 are called reachable in D S if there are internal points n 0 , . . . , n z in D S such that x is an S -NN of n , n m is an S -NN of n m +1 for all m &lt; z , and n z S -NN of x 0 . A cluster in D S is a maximal set of points that are pairwise reachable in D S .
 a clustering algorithm, which, given a dataset D and a reso-lution r , assigns all points in D to clusters. Clusters are built starting with a not yet touched internal point and recursively adding nearest neighbours for every internal point reached. The second component varies the resolution fed to the first component in order to find the  X  X est X  clustering, repeatedly calling the first component. The reader is referred to [27] for details. It is important to note that the resolution parameter user.

In what follows we describe two Outlier methods; the
The Outlier method in T  X  ENT varies the resolution se-(see below) of the clusterings obtained while varying over different resolution values r . The entropy of the clusterings are computed for all the resolution values at which the mean density changes its trend, i.e., at which the series shows a  X  X nee X  suggesting an area of stability in the clustering results. Finally the clustering with the lowest entropy is selected as this likely has the least number of outliers. Once this clustering is found, all points in clusters that are smaller than a certain threshold  X  are defined outliers. The outlier degree out for a given point is then simply 1 if the point is an outlier (in a cluster of size &lt;  X  ) and 0 if the point is not an outlier (in a cluster of size  X   X  ). In particular, the outlier degree is just a binary value expressing whether or not we consider a point an outlier rather than a real value expressing how much we consider a point an outlier.
 In more detail, the behaviour of the Outlier method in described as follows. 2) Let r 1 , r 2 , . . . , r T be the sequence of resolutions 3) For every resolution r t , 1  X  t  X  T , compute a mean 4) Detect all the resolutions r  X  t for which there is a 5) Of all those resolutions r  X  t , pick the one for which 6) For every x  X  D , let
Note that the Outlier method in T  X  ENT requires setting the parameter  X  . We address this point in Section IV.
For illustration, consider Figure 3 for an NHL dataset [15] in which each point is a hockey player described by 16 attributes. The figure shows outliers flagged by the method attributes showing (i) the number of points scored by a player over the season, and (ii) the average number of shifts a player had per game.
 olutions
The Outlier method in T  X  ROF applies TURN  X  without the stopping criterion for optimal resolutions. It simply computes the out value of a point x as the resolution-based outlier factor (ROF) over all different resolutions that the sum of the ratios of cluster sizes of the cluster the point x is contained in, as resolution changes. ROF was previously applied successfully to a 3-dimensional engineering dataset, cf. [14], but not developed for higher dimensionality. In more detail, the behaviour of the Outlier method in T  X  ROF, applied to a 2-dimensional dataset D { i,j } , can be described as follows. 2) Let r 1 , r 2 , . . . , r T be the sequence of resolutions 3) For every x  X  D , let C. A Remark on Complexity T  X  ENT and T  X  ROF have a run time cost in all of the points in D have to be sorted according to their attribute values along both dimensions; this is what dominates the run time. The space complexity is dominated by holding a | D |  X  d matrix in memory. However, the algorithm only requires two attributes to be processed at any one time so the minimum size is O (2 | D | ) .

We gratefully acknowledge support by the Alberta Ingenu-ity Fund and NSERC. We thank Robert Holte for his helpful comments.

