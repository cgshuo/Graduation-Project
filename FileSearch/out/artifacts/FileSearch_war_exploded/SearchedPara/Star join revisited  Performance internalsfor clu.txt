 1. Introduction
Data warehouses contain large amounts of data for the support of on-line analytical processing (OLAP) type queries, which allow users to efficiently retrieve and analyze data for decision support purposes.
Typically, data warehouse environments are organized according to the multidimensional model as one or table is surrounded by multiple dimension tables that are linked to it through primary and foreign key relations. Fig. 1 shows an example of a star schema based on the TPC-H database [2] stored in the four-dimension tables: orders , part , supplier and part _ supp .
OLAP type queries are complex and ad hoc , and have predicates with high selectivity factors over the
OLAP applications place demand on parallel architectures to reduce the load imposed by these type of que-solution for massive parallelism in many software applications.

Our contributions : In this paper, we address the internal performance of ad hoc star join query process-
I/O and network performance of star join query processing for cluster architectures. We create a model to analyze: (i) the I/O within nodes, and (ii) the inter-node data traffic communication for three different ever, note that savings in the I/O and inter-node data traffic communication do result in reduced CPU processing.

Our analysis shows the difficulty of finding an optimal approach that reduces both I/O and communication ing a significant gain for a wide range of ad hoc star join queries.

Finally, we propose our hybrid solution and draw the conclusions in Sections 7 and 8 . 2. Cluster architectures and horizontal partitioning communicate with each other through an inter-network communication system. This way, each node stores a nodes work in parallel with the lowest possible inter-node data traffic communication. by repartitioning the non-collocated relation/s or broadcasting the smaller relation. the nodes through the Repartitioning Operator (RO), which is the operator from the query execution plan node (receiving end). Therefore, the query execution plan is the same on all nodes. The main difference of the large volumes of data managed. This is one of the focusses of this study. 2.1. Node configuration
Symmetric multiprocessor (SMP) architectures have shown to be a very good node configuration for cluster the control of one copy of the operating system. All the processes access the memory by using high-speed sors. Fig. 3 shows an example of the architecture that we address in this paper. 2.2. Importance of inter-node data traffic communication data communication becomes important, and makes the optimization of data processing even more relevant to achieve good performance. 3. Star join processing techniques reduce both I/O and data traffic communication.
 table is managed by one single node, which does not leverage the I/O cost incurred by the fact table. compared in this paper: bitmap join, multi hierarchical clustering, and star hash join. 3.1. Bitmap join (BJ)
Otherwise, it is set to zero. Usually, the row identifier, known as RID, is used to map each bit position and the rows indexed. Using this idea, the join between two tables T and S on a common column may be rep-k S k is held indicating which records of S join that record.

Consequently, we have a Bitmap index for each column of the dimension tables. In addition, we have Bit-indicate the rows from the corresponding Bitmap join index to perform the AND operations. The result is a up this last step, avoiding the complete scan on the fact table and the join with the dimension tables. these indices is a negative factor.
 techniques which try to reach the same goal in a more affordable way. 3.2. Multi hierarchical clustering (MHC)
The huge amount of data to be processed from the fact table are spread among all nodes in a cluster con-the fact table is organized with respect to multiple hierarchical dimensions.
 method for multidimensional point data and used as primary organization of the fact table. Here star join of accesses to the fact table is highly reduced.
 posed in previous works [5,6,18] .IBM DB2 Universal Database methods are extended for a fast retrieval of the data. 3.3. Star hash join (SHJ) to the scan operators of the query execution plan.
 This can be considered as an extension of the Bloomjoin technique [24] to cluster architectures. operators of the query execution plan, and inter-node communication by avoiding the transmission of data that would be filtered once received by the target remote node. 4. Mathematical model
We formulate a mathematical model exclusively aimed at analyzing the I/O and inter-node data traffic com-of the complexity of the architecture needed and the large size of the database required. Moreover, there would be a high cost for coding all these techniques under a parallel DBMS. Hence the mathematical model obtain in practice. 4.1. Notation and general assumptions
The mathematical model presented in this paper assumes uniform data, no correlation between values of isfied [25] .

We consider a cluster architecture as explained in Section 2 , which consists of s nodes formed by an SMP configuration each. The mathematical model assumes a star join query between n dimension tables,
D and the fact table is partitioned by one of its foreign keys.

Note that if the database system supports it, and if storage space, administration overhead, and synchro-node before the queries are run. Broadcasting records from these tables in this case does not need to be node.
 definitions:  X  D i  X  F j is the portion of the fact table stored in node j . join between one-dimension table and the fact table as F ffl key, jk i , is the same as the partitioning key for F and D  X  scan( X ) is the scan over relation X , where X can be either F or D  X  S X selectivity of relation X . We refer to X j as the partition of the relation X stored in node j .

Under the assumptions of the mathematical model, for any relation X , the following properties hold: k X k = k X 1 k = ... = k X s 1 k , and S X 4.2. Scenario
Without loss of generality, a star join query is assumed to be executed through a query execution plan as dimension tables are executed through n hybrid hash join operations (HSJOIN in Fig. 4 ). Dimension tables
F ffl generalized to bushy-tree query execution plans, considering any other kind of join operators such as the merge-sort join. 4.3. Assumptions for each technique
Different assumptions are considered for the techniques analyzed in this paper. For BJ, we model I/O and network communication without taking into account the overhead that the indices would introduce. We do for execution. Hence, we use this strategy as a benchmark for evaluating the MHC and SHJ techniques.
For the MHC technique, the model assumes that the data layout scheme used to multi-dimensionally orga-cluster fact table, such as the block oriented organization used by DB2 UDB [20,21] .
Finally, for the SHJ technique, when scanning the build relation, scan( D hybrid hash join algorithm, a bloom filter is created over the joining key, jk bloom filters; BF i
We will start by explaining the basic mathematical concepts related to bloom filters. Then, we will model the intra-node data traffic, the inter-node data traffic communication, and the I/O. 4.4. Bloom filters The bloom filter [17] is a bit vector aimed at representing a set of values for membership purposes.
In our case, the bloom filter is created during the build phase of the join F from the build relation (scan  X  D i jk . Each hash function, h 1  X  jk i  X  ; h 2  X  jk i  X  ; ... ; h tuple, we apply the d hash functions to jk i , and only if 8 l : l  X  1 ; ... ; d : h ifies, and will join a tuple of D i
We define S bf understand the fraction of tuples from the probe relation that pass through the filter without being dis-carded. In our case, values coming up from the build relations are assumed to be unique, thus, S directly related to P and to the selectivity of the build relation S filter as where  X  1 S D do not join with any tuple of the build relation.

Under the assumptions of the mathematical model, and given that for any dimension table D S 4.5. Intra-node data traffic
In order to model data network traffic communication and I/O, we need to find out the impact that each define the following terms:  X  OC i model, (i) we define OC i  X  NOC F  X  NOC i
Now, we calculate NOC F
BJ Because of the one to one mapping between records and bit positions, the bitmap join only needs infor-4.6. Network and I/O loads give the following definitions:  X  M memory pages available for a hash join.  X  size P size of a memory page in bytes.  X  rec_size F size in bytes of a record stored in the fact table.  X  rec_size scan size in bytes of a record projected from the fact table scan node.  X  rec_size ij size in bytes of a record resulting from the join F  X  SMP p degree of parallelism within all SMP nodes.  X  k fudge factor added in order to take into account the extra room needed to manage data from the build relation.  X  m fudge factor added in order to take into account the extra room needed to manage a single record.
For each technique, we quantify the inter-node data traffic network communication in bytes. The number of bytes sent by all nodes j 2 X  0 ; s 1 in the cluster can be quantified as follows:
Besides the collocated join F j ffl jk
When calculating the I/O saved by each technique, we might separate the I/O saved from the fact table scan, and the I/O saved during join processing.
 are filtered out once they are already scanned. On the other hand, MHC and the BJ do save I/O processing over the fact table, and the number of tuples scanned by each technique is equal to NOC incurred at every node j when scanning the fact table is: and then the scan is parallelized according to the SMP degree: build relation ( D i during the hash join processing. l i is calculated as where j D i we calculate the number of bytes read and written at any node j during join processing as follows: where j D i for each hash join. NOC F collocated join. NOC i it happened with the I/O from the fact table, having an SMP configuration within each node, processes can write and read in parallel partitions spilled to disk: 5. Evaluation set up
Based on the mathematical model explained in the previous section, we perform our evaluation analyzing an environment similar to those used for the TPC-H benchmark [2] . We model and analyze the execution of one TPC-H-like query over a 10 TBytes database on a cluster with 5 SMP nodes. Each node consists of 32 processors sharing 256 GBytes of main memory and 512 disks. Similar configurations have been used by IBM for 10 TBytes TPC-H benchmark [2] .

We assume that the TPC-H database is partitioned across the system with hash partitioning. For our anal-2 , this is a logical scheme since orders is the largest dimension table.

In Fig. 5 a, we show the execution plan of the part of the query that executes the star join. The memory in parallel sharing resources within each node.
 to analyze a wide range of situations for the different techniques being compared: we have different build relation is. The default fraction of false positives for any bit filter is set to P = 0.05.
The above scenario fulfils the assumptions of the mathematical model. The baseline output cardinality and new output cardinalities (OC i benchmark and the selectivities of the dimension tables. 6. Analysis not be feasible in a parallel DBMS because of the high overhead imposed by the indices needed. However, BJ only as a benchmark for evaluating MHC and SHJ.

For MHC, we will analyze its behavior depending on the attributes used to multi-dimensionally cluster the fact table. Table 1 shows the three different cases that we analyze in this paper. MHC-4D, MHC-2D, MHC-analysis.
 to 6 shown in Fig. 5 b. 6.1. Communication and I/O-join processing
Fig. 6 shows, for the join processing, the percentage of data communication reduction and the I/O reduc-tion by each technique compared to the baseline. Trends are similar in both plots:  X  MHC-4D reaches the optimal results, which are upper-bounded by BJ. MHC-4D shows benefits over 90% for by the use of bloom filters. query to restrict the dimension table, then MHC does not have so much benefit and strongly depends on
MHC-2D, for sets 1, 4 and 5, there is a small benefit both for I/O during join processing and inter-node for relations suppliers and ps _ partsupp , which have not been used in MHC-2D to cluster the fact table. Thus, because most of the reduction comes from the constraints applied to these dimension tables,
MHC-2D gets a low benefit. discarded at the very beginning, even for the baseline execution. 6.2. Fact table I/O processing
Fig. 7 shows the amount of I/O reduced when scanning the fact table. Bitmap Join and MHC-4D reduce I/O significantly. Also an important observation is that MHC-1D and MHC-2D obtain a good sets 2, 3, 4 and 6. We do not show results for SHJ because its execution does not affect the I/O of the fact table. 6.3. Trade off. Communication vs. I/O
Fig. 8 shows the total amount of communication, and I/O incurred by each technique. Again, it is impor-tant to note that results for BJ are only shown as a benchmark. Hence, we can observe that:  X  MHC-4D, as noted in earlier discussions, gets the optimal results. However, MHC, as we can observe in
MHC-1D and MHC-2D results, has a strong constraint: all attributes that restrict the dimension tables join queries, it is expected that a small range of queries will benefit with MHC-4D. any case.

O incurred by the fact table: in Fig. 7 , we observed that MHC reduces I/O in a wide spectrum of possible queries. Then, although SHJ reduces I/O during join processing, the overall I/O processing obtained with
SHJ is high when compared to MHC. more network communication than I/O: while the clustering scheme has a significant impact on the I/O, the inter-node data traffic communication, being the network one single resource shared by all nodes, remains the same no matter the number of nodes in the system. 7. Hybrid solution does not optimize the data communication for ad hoc query processing, and (ii) SHJ does tackle the commu-nication problem, and, in contrast, it is not as efficient as MHC in terms of I/O.
Therefore, we propose a hybrid solution that combines both the MHC and SHJ techniques. The goal is to is executed after the projection of those tuples.

The drawings follow the nomenclature defined through our mathematical model in Section 4 . Given a node j and n joins between dimension tables ( D i from the application of MHC over the fact table is processed as follows: (1) For each join in the query, we apply the shipping function used to distribute data to the joining key (2) Then, the tuple being processed is tested against the bit filter of the target cluster BF
We show the behavior of the hybrid technique in Fig. 10 . As a proof of concept, we show only results for the combination of SHJ with MHC-2D. In terms of inter-node data traffic communication, Fig. 10 a shows that the hybrid approach retains the properties of SHJ, outperforming MHC-2D, and showing results near the optimal in all the cases. On the other hand, in terms of I/O, the hybrid approach takes the advantage and 6. Moreover, the addition of the I/O savings during the join processing caused by SHJ, contributes to outperform MHC-2D executed alone, and to get results even closer to the optimal ones upper-bounded by BJ. 8. Conclusions size of the indices required, and has been used as a benchmark to measure the benefits of MHC and SHJ.
MHC schemes are good for star joins queries when the selectivity of the whole query is relatively small, since the cost of the query resides in reading the fact table. However, they have one important drawback: for a wide range of queries.

We conclude by proposing a hybrid solution that would guide us to a better compromise between I/O and inter-node data communication savings. With the hybrid approach, the disadvantages of MHC for ad hoc pro-approaches the optimal results for a broad spectrum of scenarios used in our evaluation. Acknowledgements
The DAMA-UPC authors thank Generalitat de Catalunya for its support through Grant Number GRE-Also, they want to acknowledge the continued support of the IBM CAS at the Toronto Lab.
References
