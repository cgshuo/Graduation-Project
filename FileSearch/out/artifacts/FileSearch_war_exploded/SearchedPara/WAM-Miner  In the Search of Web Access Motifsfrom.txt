 Existing web usage mining techniques focus only on discov-ering knowledge based on the statistical measures obtained from the static characteristics of web usage data. They do not consider the dynamic nature of web usage data. In this paper, we focus on discovering novel knowledge by analyz-ing the change patterns of historical web access sequence data. We present an algorithm called Wam-Miner to dis-cover Web Access Motifs (WAMs). WAMs are web access patterns that never change or do not change significantly most of the time (if not always) in terms of their support values during a specific time period. WAMs are useful for many applications, such as intelligent web advertisement, web site restructuring, business intelligence, and intelligent web caching.
 Categories and Subject Descriptors: H.2.8 [Database Management]: Database Applications  X  Data Mining . General Terms: Algorithm, Design, Experimentation. Keywords: Web Access Motif, Dynamic Pattern, Web Us-age Mining.
Web Usage Mining (WUM)  X  the application of data min-ing techniques to discover usage patterns from web data  X  has been an active area of research and commercialization [19]. Existing web usage data mining techniques include statistical analysis [19], association rules [11], clustering [15, 12], classification [13], sequential patterns [18], and depen-dency modeling [10]. Often, such mining provides insight that helps optimizing the website for increased customer loy-alty and e-business effectiveness. Applications of web usage mining are widespread, ranging from usage characterization, web site performance improvement, personalization, adap-tive site modification, to market intelligence.

Generally, the web usage mining process can be considered as a three-phase process, which consists of data preparation , pattern discovery , and pattern analysis [19]. Since the last Copyright 2005 ACM 1-59593-140-6/05/0010 ... $ 5.00. phase is application-dependent, let us briefly describe the first two phases. In the first phase, the web log data are transformed into sequences of events (called Web Access Se-quences ( WAS s)) based on the identification of users and the corresponding timestamps. For example, given a web log archive that records the navigation history of a web site, by using some existing preprocessing techniques [6, 21], the raw log data can be transformed into a set of WAS s. Table 1 shows an example of such WAS s. Here S ID represents a sequence id and a WAS such as  X  a, b, d, c, a, f, g  X  denotes a visiting sequence from web page a to pages b , d , c , a , f and finally to page g . Each sub-table in Table 1 records the collection of WAS s for a particular month. In the second phase, statistical methods and/or data mining techniques are applied to extract interesting patterns such as Web Ac-cess Patterns (WAPs)[18]. A WAP is a sequential pattern in a large set of WAS s, which is visited frequently by users [18]. That is, given a support threshold  X  and a set of WAS s (denoted as A ), a sequence W is a WAP if W appears as a subsequence 1 in at least  X   X |A| web access sequences of A . For clarity, in this paper we call such a WAP a frequent WAP. Consequently, a sequence that appears in fewer than  X   X  |A| web access sequences of A is called an infrequent WAP. These patterns are stored for further analysis in the third phase.
From Table 1, it is evident that web usage data is dynamic in nature. For instance, the WAS  X  b, d, e, a, f, g  X  did not exist in the first and second months but appeared in the third and fourth months. Similarly, the WAS  X  a, b, d, c, a, f, g  X  occurred in the first and the second months but disappeared after that. The WAS  X  e, f, g, i, n  X  became increasingly popular as it occurs only once in the first three months, but in the fourth month, it occurs twice. Note that the above dynamic behaviors of WAS s can be attributed to various factors, such as changes to the content of the web site, users X  familiarity to the web site structure, arrival of new web visitors, and effects of sudden occurrences of important real life events.

Such dynamic nature of web usage data poses both chal-lenges and opportunities to the web usage mining commu-nity. Existing web usage mining techniques focus only on discovering knowledge based on the statistical measures ob-tained from the static characteristics of web usage data. They do not consider the dynamic nature of web usage data. In particular, the dynamic nature of WAS data leads to the following two challenging problems. 1. Maintenance of WUM results: Take the WAS s 2. Discovering novel knowledge: Historical collec-
In this paper, we focus on discovering novel knowledge by analyzing the change patterns of historical WAS data. Dif-ferent types of novel knowledge can be discovered by mining the history of changes to WAS s. Particularly, in this pa-per we focus on discovering Web Access Motifs 2 (WAMs). WAMs are WAPs that never change or do not change sig-nificantly most of the time (if not always) in terms of their support values during a specific time period. For example, consider Figure 1, which depicts the support values ( y -axis) of four WAPs (denoted as W 1 , W 2 , W 3 , and W 4 ) from time period t 1 to t 5 ( x -axis). Note that t i in the x -axis represents a time period (e.g., day, week, month etc.) and not a par-ticular time point. The support values of W 1 do not change significantly (varying between 0.7 and 0.8 ), hence, W 1 can be considered as a WAM. Similarly, most of the support val-ues of W 2 hover around 0 . 1 (except for that at t 4 ), therefore, it can be considered as a WAM. However, the supports of W 3 and W 4 change significantly (e.g., support of W 3 changed
Figure 1: Support of WAPs over a time period from 0.8 to 0.4 during the transition from t 1 to t 2 ) and, thus, these two WAPs are not WAMs. As we shall see later, the degree of changes is measured using a metric called conser-vation rate . WAMs are useful for many applications such as intelligent web advertisement, web site restructuring, busi-ness intelligence, and intelligent web caching (discussed in Section 2).

We present techniques to discover two types of web access motifs: popular and unpopular WAMs. Given a popular support threshold  X  , a WAM is considered popular if most of the time its support is greater than  X  during a specific time period. For example, reconsider Figure 1. Let  X  = 0 . 7. Then, W 1 is a popular WAM as its support value is always greater than or equal to 0.7 during the time period of t 1 t . A popular WAM represents a sequence of pages that are consistently popular to the website X  X  visitors over a duration of time. Similarly, given an unpopular support threshold  X  , a WAM is considered unpopular if most of the time it has low support (i.e., its support values are less than  X  ) during a specific time period. An unpopular WAM thus represents a sequence of web pages that are rarely accessed by web users over a time period. For example, consider W 2 in Figure 1. Let  X  = 0 . 2, then most of the support values of W 2 are less than 0.2 during the period of t 1 to t 5 (except at t 4 ); hence, W 2 is an unpopular WAM. As discussed in Section 2, both popular and unpopular WAMs can be beneficial to many applications.
 At the first glance, it may seem that the above types of WAMs can be discovered by postprocessing the results of existing frequent WAP mining techniques [18, 21]. However, to the best of our knowledge, the complete set of WAMs cannot be efficiently discovered by those existing techniques for the following reasons (even if we apply them repeatedly to a sequence of snapshot data):
In summary, the major contributions of this paper are as follows.
The rest of this paper is organized as follows. In Section 2, we present some representative applications of WAMs. In Section 3, we describe the problem formally and illustrate it using an example. Section 4 introduces a model to represent the changes to WAPs and metrics used to detect WAMs. In Section 5, the WAM mining algorithm is described. Sec-tion 6 presents the experimental results. Section 7 reviews the related works. Finally, the last section concludes this paper.
Knowledge of WAMs can be useful in many applications, such as web advertisement, web site restructuring, business intelligence, and web caching. We now elaborate on some of these applications.
 Intelligent Web Advertisement: It has been claimed that 99% of all web sites offer standard banner advertise-ments [5], underlying the importance of this form of on-line advertising. For many web-based organizations, revenue from advertisements is often the only or the major source of income (e.g., Yahoo.com, Google.com) [3]. The most com-monly used pricing schemes employed in banner advertise-ments is the cost-per-thousand impressions (CPM) model where the cost is associated with the amount of exposure of the advertisement. Several sites also use the cost-per-click (CPC) model, where the advertiser pays the publisher each time the advertisement banner is clicked on. These two models indicate that one of the ways to maximize revenues for the party who owns the advertising space is to design intelligent techniques for the selection of an appropriate set of advertisements to display in appropriate web pages.
Consequently, there have been several recent research ef-forts on scheduling banner advertisements on the web [3]. Selection of banner advertisements is currently driven by the nature of the banner advertisement, Internet knowledge of the target market, relevance of the web page contents, and popularity of the web pages [3, 9]. However, none of these techniques consider the evolution of web access pat-terns for the advertisement selection problem. In particular, WAMs can be useful for designing more intelligent adver-tisement placement strategies. Let us illustrate this with a simple example. Consider the popular WAMs in Figure 2 as extracted by our Wam-miner algorithm at times t 1 and t 2 where t 2 &gt; t 1 . Observe that W 1 and W 2 remained as pop-ular WAMs at t 1 and t 2 . This indicates that the sequences of web pages in W 1 and W 2 consistently received a large number of visitors during the specified time period from t to t 2 and are expected to continue this trend in the near future. Hence, it makes sense to put relevant banner ad-vertisements on these pages in order to maximize revenues. Note that our approach can easily be integrated with any existing advertisement selection techniques and does not call for any drastic change to the existing frameworks. Web site restructuring: It is well known that ill-structured design of web sites prevents the users from rapidly access-ing the target pages. Recently web usage mining techniques have been successfully used as a key solution to this issue [15]. However, none of these techniques exploits the evolv-ing nature of WAPs to restructure web sites. Results of WAM mining can be used by web site administrators to restructure their web sites according to the historical ac-cess characteristics of web site visitors. Let us illustrate the usefulness of WAMs in this context with an example. Re-consider the WAMs in Figure 2. The following information can be gleaned which can be used to restructure web sites. Intelligent web caching: Web caching has been used by many business organizations to reduce the time that their customers must wait for their web search results. One of the most difficult issues in web caching is to identify which web pages to cache. The discovery of WAMs provides a solution to this problem. For example, pages in the popular WAMs W 1 , W 2 , W 3 , and W 6 in Figure 2 can be cached for future access because their support counts are large and are not expected to change.
In general, web log data can be considered as sequences of web pages with session identifiers [21]. Formally, let P = { p 1 , p 2 , . . . , p m } be a set of web pages. A session S is an ordered list of pages accessed by a user, i.e., S =  X  ( p 1 , t 1 ) , ( p 2 , t 2 ) , . . . , ( p n , t n )  X  , where p 1. Each session is associated with a unique identifier, called session ID. A web access sequence ( WAS ), denoted as A , is a sequence of consecutive pages in a session. That is, WAS . Note that it is not necessary that p i 6 = p j for i 6 = j in a WAS . This is because a web page may occur more than once in a session due to backward traversals or reloads [21].
The access sequence W =  X  p 0 1 , p 0 2 , p 0 3 , . . . , p web access pattern (WAP) of a WAS A =  X  p 1 , p 2 , p 3 , . . . , p denoted as W  X  A , if and only if there exist 1  X  i 1  X  i . . .  X  i m  X  n such that p 0 j = p i j for 1  X  j  X  m .
A WAS group (denoted as G ) is a bag of WAS s that occurred during a specific time period. Let t s and t e be the start and end times of a period. Then, G = [ A 1 , A 2 , . . . , A ] where p i is included in WAS A j for 1 &lt; j  X  k and p was visited between t e and t s . The size of G , denoted as | G | , reflects the number of WAS s in G . Note that, it is possible A i = A j for i 6 = j in a bag of WAS s. For instance, we can partition the set of WAS s on a daily, weekly or monthly basis, where the timestamps for all the WAS s in a specific WAS group are within a day, a week, or a month. Consider the WAS s in Table 1 as an example. They can be partitioned into four WAS groups on a monthly basis, where WAS s whose timestamps are in the same month are partitioned into the same WAS group.

Given a WAS group G , the support of a WAS A in G from the context, the support is denoted as  X ( A ). Similarly, when the WAS is obvious from the context, the support is denoted as  X .

In our investigation, the historical web log data is divided into a sequence of WAS groups. Let H G =  X  G 1 , G 2 , G 3 . . . , G k  X  be a sequence of k WAS groups generated from the historical web log data. Given a WAP W , let H W = support values of W in H G . Then, maximum popularity support of W (denoted as M W ) is defined as M W =  X  i where  X  i  X   X  j  X  0  X  j  X  k and i 6 = j . Similarly, minimum unpopularity support of W (denoted as U W ) is  X  r where  X  r  X   X  j  X  0  X  j  X  k and r 6 = j . The pair ( M W , U W ) is called the support range of W (denoted as R = ( M W , U W Furthermore, the conservation rate of W is denoted as C W F ( H W ) where F is a function (defined later in Section 4) that returns the rate of change of support values of W in H
W and 0  X C W &lt; 1.
Given the popularity threshold  X  and a conservation thresh-old  X  , a WAP W is a popular WAM if and only if  X  W 0  X  W , C W 0  X   X  and M W 0  X   X  . Similarly, given the unpopu-larity threshold  X  , a WAP W is a unpopular WAM if and only if  X  W 0  X  W , C W 0  X   X  and U W 0  X   X  . Our objective of WAM mining is to find all popular and unpopular WAMs in the historical web log data given some popularity and unpopularity thresholds, and conservation threshold. In this section, the problem of how to model the historical WAS s and measure their change patterns is discussed. We begin by discussing how a WAS Group is represented fol-lowed by the representation of WAS group history. Finally, we discuss the statistical summarization technique for the WAS group history.
Given a WAS denoted as A =  X  p 1 , p 2 , p 3 , . . . , p n literature, there are various ways to represent the relation-ship among web pages in the sequence [18, 22]. In [18], a WAS is represented as a flat sequence, while in [22] a WAS is represented as an unordered tree, which was claimed more informative with the hierarchical structure. In this paper, we adopt the unordered tree representation of WAS . A WAS tree is defined as T A = ( r, N, E ), where r is the root of the tree that represents web page p 1 ; N is the set of nodes where V = { p 1 , p 2 ,  X  X  X  , p n } ; and E is the set of edges in the maximal forward sequences of A . An example of WAS tree is shown in Figure 3 (a), which corresponds to the first WAS shown in Table 1 (a).
 As a result, a WAS group consists of a bag of WAS trees. Here, all occurrences of the same WAS within a WAS group are considered identical. Then the WAS group can also be represented as an unordered tree by merging the WAS trees. We propose an extended WAS tree to record the aggregated support information about the bag of WAS s within a WAS group. The extended WAS tree is defined as follows. Definition 1. [Extended WAS Tree] Let G = [ A 1 , A , . . . , A k ] be a bag of WAS s, where each WAS A i , 1  X  i  X  k, is represented as a tree T A i = ( r i , N i , E i the extended WAS is defined as T G = (r, N, E,  X  ), where N = N 1  X  N j  X  X  X  X  N k ; E = E 1  X  E j  X  X  X  X  E k ; r is a virtual root; and  X  is a function that maps each node in N to the support of the corresponding WAS . 2
Consider the first WAS group in Table 1. The corre-sponding extended WAS tree is shown Figure 3 (b), where the value associated with each node is the  X  value. It can be observed that the common prefix for different WAS trees is presented only once in the extended WAS tree. For ex-ample, the common prefix of  X  a, b, d, c, a, f, g  X  and  X  a, b, e, h, a, f, g  X  is  X  a, b, a, f, g  X  , which is presented once in the extended WAS tree. Details of how to construct the extended WAS tree will be discussed in Section 5.
The simplistic method of representing WAS Group His-tory is to merge the sequence of extended WAS trees to-gether to form an historical WAS tree (called H-WAS tree) in a similar way as we have merged the WAS trees in the previous section. However, the H-WAS tree and extended WAS tree are different in several aspects. Firstly, all occur-rences of the same WAS tree in one WAS group are con-sidered to be equal, while occurrences of the same extended WAS tree in a sequence of WAS groups may have different support values. Secondly, the order of extended WAS trees is important in the construction of the H-WAS tree, while the order of WAS trees is not important in the construc-tion of the extended WAS tree. Moreover, the purpose of the extended WAS tree is to record the support values in a specific WAS group, while the purpose of the H-WAS tree is to record the history of support values of the WAS s. As a result, the historical support values in the H-WAS tree are represented as a time series, where the i th element represents the support values of the WAS in the i th WAS group.

Definition 2. [H-WAS Tree] Let H G =  X  G 1 , G 2 , G 3 , . . . , G k  X  be a sequence of k WAS groups, where each WAS group G i , 1  X  i  X  k, is represented as an extended WAS tree, T G i = ( r i , N i , E i ,  X  ). Then, the H-WAS tree is defined as H G = (r, N, E,  X  ), where r is a virtual root; N = N  X  N j  X  X  X  X  N k ; E = E 1  X  E j  X  X  X  X  E k ; and  X  is a function that maps each node in N to the sequence of historical support values of the corresponding WAS . 2
Note that, in the H-WAS tree, there is a sequence of support values for each node; while there is only one support value for each node in the extended WAS . In this paper, rather than using the entire sequence of support values, we propose a metric called conservation rate that summarizes the history of support values and make the H-WAS tree more compact.
Given a WAS A and sequence of support values H A = values can be considered as a time series because the support values of a WAS may change over time in real life. Then, we propose to model the sequence of support values using the following linear regression model.

Here the idea is to find a  X  X est-fit X  straight line through the data points { ( X  1 ( A ), 1), ( X  2 ( A ), 2), . . . , ( X  where  X  0 ( A ) and  X  are constants called support intercept and support slope respectively. The most common method for fitting a regression line is the method of least-squares [20]. By applying the statistical treatment known as linear regres-sion to the data points, the two constants can be determined using the following formula [20].

Further, we propose to use the correlation coefficient to evaluate how the regression fits the data points. r = k
The correlation coefficient, r , always takes a value be-tween -1 and 1, with 1 or -1 indicating perfect correlation. The square of the correlation coefficient, r 2 , represents the fraction of the variation in  X  t ( A ) that may be explained by t . Thus, if a correlation of, say 0.8, is observed between them, then a linear regression model attempting to explain the changes to  X  t ( A ) in terms of t will account for 64% of the variability in the data [20].

Based on the above linear regression-based model for sup-port history we now propose the metric conservation rate .
Definition 3. [Conservation Rate] Let  X   X  1 ( A ) ,  X  2 ( A ) , . . . ,  X  k ( A )  X  be the sequence of historical support values of a WAS A , where  X  i ( A ) represents the i th support value for A and 1  X  i  X  k . The conservation rate of WAS A is defined as C A = r 2  X  X   X  | . 2
Note that the larger the absolute value of the slope, the more significantly the support changes over time. At the same time, the larger the value of r 2 , the more accurate is the regression model. Hence, the larger the conservation rate C A , the support values of the WAS change less sig-nificantly. In other words, the support values of a WAS are more conserved with the increase in the conservation rate. Also from the regression model, it can be inferred that |  X  | &lt; 1 k as 0  X   X  t ( A )  X  1. In real life the value of k can be huge, thus |  X  |  X  r  X  1. Consequently, we can guarantee that 0  X  C A  X  1. When C A = 1, the support of WAS A is a constant where r 2 = 1 and  X  = 0.

Based on the above notion of conservation rate, we can define the  X  function in the H-WAS tree as follows.
Definition 4. [  X  Function] Given an H-WAS tree, H G = (r, N, E,  X  ), where r is a virtual root; N = N 1  X  N j E = E 1  X  E j  X  X  X  X  E k ; the  X  function is defined to map each node n  X  N to a pair ( C A , R ) where C A is the conservation rate and R = ( M A , U A ) is the support range of a WAS A whose last page is represented by n . 2
Example 1. Figure 3 (c) shows a part of an H-WAS tree, where the associated values are the corresponding con-servation rate, unpopular support value, and popular sup-port value in turn. In this example, the WAPs  X  a, b, e, h  X  and  X  a, f, g  X  are popular WAMs, given the thresholds for conservation rate, popular support threshold, and unpopu-lar support threshold are 0.6, 0.3, and 0.05 respectively. In this section, we proposed an algorithm called Wam-Miner to discover the two types of WAMs from the his-torical web usage data. The mining process consists of two phases: the H-WAS tree construction phase and the WAM extraction phase. We discuss these phases in turn.
Given a collection of web log data, we assume that it is represented as a set of WAS s with corresponding timestamps. This phase consists of two steps. First, the sequence of ex-tended WAS tree is constructed. Then, the H-WAS tree is Algorithm 1 Extended WAS tree Construction.
 built. Both algorithms for extended WAS tree construction and H-WAS tree construction are similar. The basic idea is to match the trees and merge the common prefix to make the representation compact. As the only difference between the extended WAS tree construction and H-WAS tree con-struction is the attributes associated with the nodes, in this section, only details of the extended WAS tree construction are presented.

The extended WAS tree construction algorithm is shown in Algorithm 1. Given a WAS group, firstly, the extended WAS tree is initialized as the first WAS tree in the group with a virtual root node. Then, the next tree is compared with the existing extended WAS tree to merge them to-gether. That is, if a WAS tree or part of a WAS tree does not exist in the extended WAS tree, they will be inserted into the extended WAS tree. Otherwise, the WAS trees are merged into the subtrees that rooted at the node iden-tical to the root of the WAS trees. For both the extending and merging process, their support values are updated ac-cordingly. This process iterates for all the WAS trees in the WAS group.
 Similarly, given a sequence of extended WAS trees, the H-WAS tree is constructed. Note that, the extending and merging process follows the same rules as the above rules for constructing the extended WAS tree. However, the at-tributes in the H-WAS tree are different from the attributes in the extended WAS tree. For example, in the extended WAS tree, there are only one support values associated with each node as shown in Figure 3. In the H-WAS tree, ini-tially there will be a sequence of support values for a WAS , which is associated with the last node. In the H-WAS tree construction process, for each WAS , the sequence of sup-port values are transformed into the conservation rate and support range using the linear regression model we discussed before.
Given the H-WAS tree, with the user-defined threshold for conservation rate (  X  ), popularity threshold (  X  ), and un-popularity threshold (  X  ), the WAM extraction phase is ac-tually a traversal over the H-WAS tree. The algorithm of WAM extraction is shown in Algorithm 2. Here, the sup-port range is first compared with  X  and  X  to determine the potential groups of popular WAMs and unpopular WAMs to which the corresponding WAP belongs to. If M A  X   X  Algorithm 2 WAM Extraction and U A  X   X  then, the conservation rate is further compared with the threshold  X  . These WAPs whose conservation rate is no greater than  X  are assigned to the popular WAMs and unpopular WAMs accordingly. Lastly, the sets of popular and unpopular WAMs are returned.

Example 2. Let us take the H-WAS tree in Figure 3 (c) as an example. Let  X  = 0 . 3,  X  = 0 . 05, and  X  = 0 . 7. First, we check the root of the H-WAS tree, its M r &gt; 0.3 and C &gt; 0.7, then node a is included in the popular WAMs. Then, nodes b, d, c are checked in a similar way. In this example, node e is pruned out but its child node h is included, then node e is directly linked to node b in the final result.
In this section, we present experimental results to evaluate the performance of our proposed Wam-Miner algorithm. All experiments were conducted on a P4 1.80 GHz PC with 512Mb main memory running Windows 2000 professional. The algorithm is implemented in Java.

Both real and synthetic web log datasets are used in the experiments. The real data is the web log UoS obtained from the Internet Traffic Archive [1]. It records the histor-ical visiting patterns for University of Saskatchewan from June 1, 1995 to December 31, 1995. There were 2,408,625 requests with 1 second resolution and 2,981 unique URLs. The synthetic data set is generated using the synthetic tree generation program used in [23]. The characteristics of the synthetic data we used are shown in Table 2. The program first constructs a tree representation of the web site struc-ture based on two parameters, the maximum fan out of a node (denoted as F ) and the maximum depth of the tree (de-noted as D ). Based on the web site structure, a collection of WAS s with the corresponding timestamps are generated by mimicking the user behaviors. In Table 2, S is the average size of the WAS s and N is the number of WAS s in the corresponding datasets.
As the size of the web usage data collection can be affected by two factors: the number of WAS s and the average size of each WAS , two sets of experiments have been conducted to evaluate the scalability of our proposed algorithm. In the first set of experiments, denoted as E 1 in Figure 4 (a), synthetic datasets D 1 , D 2 , D 3 , D 4 , and D 5 are used, where the average size of each WAS is fixed while the number of WAS s is varied. In the second set of experiments, denoted as E 2 in Figure 4 (a), synthetic datasets D 2 , D 6 , D 7 and D 9 are used, where the number of WAS s is fixed while the average size of each WAS varies.

Figure 4 (a) shows the running time of the algorithm as the total number of nodes in the dataset increases. The user defined time interval,  X  ,  X  ,  X  are set to 12 hours, 0.01, 0.005, and 0.8 accordingly. The running time increases as the total number of nodes increases from 100k to 600k. The reason is that with more nodes, both the cost of constructing the trees and the traversal over the H-WAS tree becomes more expensive. However, we observed that even for the same total number of nodes, the running time is much expensive when the number of WAS s is large and the average size of each WAS is small. This is because the cost of calculation of  X  0 and the conservation rate is quite expensive when the number of extended WAS trees is large. Note that for the same user-defined time interval, a larger number of WAS s indicates that there are more extended WAS trees.
Besides the size of the datasets, experiments are also con-ducted to show how the parameters such as: user-defined time intervals, conservation rate, popularity threshold, and unpopularity threshold, affect the efficiency of the mining algorithm. Figure 4 (b) shows how the user-defined time in-terval affects the running time using D 1 , D 4 and D 9 . We set  X  = 0 . 1,  X  = 0 . 005, and  X  = 0 . 8. Here, we use the average number of WAS s in the WAS groups to represent the size of the time interval. It can be observed that the running time decreases as the size of the user-defined time interval increases. The reason is that the number of extended WAS trees is small as the average size of the WAS group increases. As a result, the computation cost of calculating the support range and conservation rate decreases.

Figure 4 (c) shows the relationship between the running time and the thresholds using D 9 . There are three variables in this figure, the x-axis k changed from 1 to 5, and the values of  X  ,  X  , and  X  are dependent on k . For example, in the first set of experiment,  X  = 0 . 005 and  X  = 0 . 8; while  X  = 0 . 05  X  k . Similarly, the values of  X  and  X  are changed in a similar way in the remaining two experiments. It can ob-served that when  X  increases, the running time decreases be-cause the number of popular WAMs decreases accordingly. When  X  increases, the running time increases because there are more unpopular WAMs. When  X  increases, the running time is almost stable, which is because of the computation cost is independent of the threshold of conservation rate.
As there are four parameters, the user-defined time in-terval,  X  ,  X  , and  X  , in our algorithm, in this section, we investigate how the four parameters affect the quality of the mining results. By varying one parameter and fixing the values for the other three parameters, the effects of each pa-rameter are evaluated in the following experiments. Note that the size of the time interval is measured by the aver-age number of WAS in each WAS group. In the following experiments, the UoS real dataset is used.

In the first set of experiments,  X ,  X  and  X  are fixed to 0.1, 0.005, and 0.8 respectively, the user-defined time in-terval varies from 40 to 200. Table 3(a) shows the num-ber of popular WAMs and unpopular WAMs with differ-ent user-defined time interval. We observed that as the time interval increases, the number of popular and unpop-ular WAMs increases. By looking into the the results, we observed that popular and unpopular WAMs with smaller user-defined time intervals are also popular and unpopu-lar WAMs with larger user-defined time intervals. We also compare the number of popular WAMs extracted by our Wam-Miner with the number of popular WAMs extracted by repeatedly using WAP-Mine 3 [18]. We observed that the WAP-Mine based approach cannot extract all the popular WAMs. Note that, in the WAP-Mine-based popular WAM extraction approach, the conservation rate is calculated us-ing the number of times a WAP is frequent in the sequence of WAS groups divided by the total number of WAS groups.
By fixing the user-defined time interval to 40, the effects of the other three parameters are evaluated in similar ways. Figure 4(d) shows how the total number of popular and unpopular WAMs changes with different  X  ,  X  , and  X  . Here, we introduce a variable, k , as the x-axis. Then, the values of  X  ,  X  , and  X  are represented using k . For example, in the first set of experiments,  X  = 0 . 005 and  X  = 0 . 8; while  X  = 0 . 05  X  k . It can be observed that the total number of WAMs increases as  X  increases,  X  decreases, or  X  decreases.
Table 3(b) shows the quality of the regression-based model for extracting WAMs. In this experiment, the UoS dataset is partitioned into 30 WAS groups and is divided into two parts, denoted as P 1 and P 2 . P 1 is used to construct the regression model and P 2 is used to evaluate the accuracy of the model. That is, we extract the popular and unpopular WAMs in P 1 using the regression model and check whether
Downloaded from http://www.cs.ualberta.ca/  X  tszhu these are still popular/unpopular WAMs in P 2 . The ac-curacy is defined as the percentage of popular/unpopular WAMs obtained from P 1 that are still popular/unpopular WAMs in P 2 . Formally, let R 1 and R 2 be the sets of pop-ular and unpopular WAMs returned by the Wam-Miner using P 1 . Let Z 1 and Z 2 be the sets of popular and un-popular WAMs based on the entire dataset. Then accuracy the accuracy of our model is quite high for different size of P . Furthermore, the quality of the model is robust and not affected by the user-defined thresholds as here we only identify whether a WAM is still popular/unpopular in P 2 .
Web access sequence mining is defined to extract hidden patterns from the navigation behavior of web users [6]. In the existing approaches, the sequential pattern mining al-gorithms are employed to extract the frequent access pat-terns such as WAP [18, 2], maximal forward frequent se-quence [6], maximal frequent sequence with backward tra-versal [21], maximal and closed access pattern mining [22]. The focus of the existing works is to propose different data structures such as WAP-tree [18], H-struct [17], and prefix tree [16], that can make the subsequence mining problem more efficient and scalable. These approaches focus on min-ing patterns based on the overall support counts of the access patterns at a particular timepoint. These approaches ignore the changes to the support values of the WAS . Differing from these approaches, our work is based on the changes to the support counts of the access patterns over a specific time period. The change patterns of the support values are expected to reflect the historical behaviors of the WAPs.
Considering the dynamic property of the datasets, there are several techniques proposed recently for maintaining and update previously discovered knowledge. They focus on two major issues. One is to actualize the knowledge discovered by detecting changes in the data such as the DEMON frame-work proposed by Ganti et al [8]. Another is to detect in-teresting changes in the KDD mining results such as the FOCUS framework proposed by Ganti et al [7], PAM pro-posed by Baron et al [4], and the fundamental rule change detection tools proposed by Liu et al [14].

Our effort differs from the above approaches in the fol-lowing ways. First, these techniques are proposed either for updating the mining results or detecting the changes to the mining results with respect to the changes to the data sources. Second, in previous approaches, only the or-der within web access sequences are considered, while we also consider the timestamps corresponding to each occur-rence of the same web access sequence. Lastly, unlike the above techniques, we also extract unpopular WAMs which can be useful in many applications as discussed in Section 2.
This work is motivated by the fact that existing web us-age mining techniques focus only on discovering knowledge based on the statistical measures obtained from the static characteristics of web usage data. They do not consider the dynamic nature of web usage data. We focus on dis-covering novel knowledge by analyzing the change patterns of historical web access sequence data. Specifically, we pro-pose an algorithm called Wam-Miner that extracts popular and unpopular Web Access Motifs (WAMs) from historical web usage data. WAMs are WAPs that never change or do not change significantly most of the time (if not always) in terms of their support values during a specific time period. WAMs are useful for many applications, such as intelligent web advertisement, web site restructuring, business intel-ligence, and intelligent web caching. Experimental results on both synthetic data and real datasets show that Wam-Miner is efficient and scalable. More importantly, it can extract novel knowledge that cannot be discovered by exist-ing web usage mining approaches.
