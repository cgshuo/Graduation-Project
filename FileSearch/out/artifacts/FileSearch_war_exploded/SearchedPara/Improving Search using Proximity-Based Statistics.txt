 H.3.1 [ Information Storage and Retrieval ]: Content Analysis and Indexing X  Indexing methods ; H.3.4 [ Information Storage and Retrieval ]: Systems and Software X  Performance evaluation k -term Proximity, Indexing, Efficiency Modern retrieval systems often use more sophisticated ranking mod-els. Although more new features are added in, term proximity has been studied for a long time, and still plays an important role. A recent study by Huston and Croft [2] shows that many-term de-pendency is a better choice for a large corpus and long queries. However, utilizing proximity-based features often leads to compu-tational overhead, and most of the existing solutions are tailored to term pairs. Fewer studies have focused on many-term proximity computation, and the plane-sweep approach proposed by Sadakane and Imai [6] is still state-of-the-art. Consider a multi-pass retrieval process where the proximity features could be an effective first pass ranker if we can reduce the cost of the proximity calculation.
In this PhD project, we consider the following questions: (i) How important are the proximity statistics in the term dependency mod-els and what is the cost of extracting the proximity features? (ii) Although all term dependencies are considered in ranking models, can we design an early termination strategy considering only partial proximity? Moreover, instead of viewing the term from the same level, can we utilizing its locality for obtaining more efficiency? (iii) How do we best organize the term proximity statistics to be more indexable, facilitating the extraction process? (iv) How do we best define the approximation form of term proximity in order to find the best trade-off between effectiveness and efficiency?
In a preliminary experimental study, Lu et al. [3] compare how different term dependency components affect the entire ranking models show that although the phrase component helps to improve the effectiveness in an overall sense, it degrades dramatically on some queries. Although the proximity part doesn X  X  always improve the effectiveness, it is more stable.

From the computational perspective, we have found that extract-ing single term dependency proximity using the plane-sweep al-gorithm is not a bottleneck. But it is a computational intensive job when processing each dependency feature separately. However, the extra cost of considering proximity independently can be reduced by extracting all dependencies together [4]. Further, since most of retrieval systems keep both a direct file and an inverted file, it is possible to exploit both representation to maximize the efficiency.
Although the cost of extracting proximity features can be re-duced compared to separate calculations, it is still less efficient when processing frequent query terms with long documents. Con-sidering the characteristics of all term dependency features, there is some redundant information. Thus, it may be possible for us to de-sign a rank-safe early termination strategy by only computing par-tial proximity features instead of extracting them all. Heuristically, to achieve this, we could map the proximity extraction problem into weighted interval ranking by taking TF and IDF values into ac-count. Besides the early termination method, it is also worth seek-ing an indexable organization of proximity statistics. The plane-sweep method in the extraction process reveals possibilities for building auxiliary structures to augment existing index structures.
Usually, accurate distances between terms will be captured in ranking models, but the definition varies. Clarke et al. [1] consider the cover and scores over sets of the covers, whereas Metzler and Croft [5] utilize an unordered window. But capturing actual dis-tance sets a higher requirement on both space and query time. In-stead of calculating the distance between terms, an approximation of proximity can also be considered. Especially when using the proximity feature as an effective first pass ranker, efficiency will be considered as a higher priority, without sacrificing too much ef-fectiveness. With suitable approximations, it may be possible to optimize the efficiency within a given threshold of effectiveness.
