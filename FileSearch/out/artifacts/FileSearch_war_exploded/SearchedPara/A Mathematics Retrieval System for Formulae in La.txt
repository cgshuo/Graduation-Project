 The semantics of mathematical formulae depend on their spatial structure, and they usually exist in layout presentations such as PDF, L A T E X, and Presentation MathML, which challenges previous text index and retrieval methods. This paper proposes an innovative mathematics retrieval system along with the novel algorithms, which enables efficient formula index and retrieval from both webpages and PDF documents. Unlike prior studies, which require users to manually input formula markup language as query, the new system enables users to  X  X opy X  formula queries directly from PDF documents. Furthermore, by using a novel indexing and matching model, the system is aimed at searching for similar mathematical formulae based on both textual and spatial similarities. A hierarchical generalization technique is proposed to generate sub-trees from the semi-operator tree of formulae and support substructure match and fuzzy match. Experiments based on massive Wikipedia and CiteSeer repositories show that the new system along with novel algorithms, comparing with two representative mathematics retrieval systems, provides more efficient mathematical formula index and retrieval, while simplifying user query input for PDF documents. H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval Mathematical Information Retrieval; Structure Matching; Layout Presentation; Scientific Information Extraction
Mathematical formulae are commonly used in various disciplines, such as STEM (Science, Technology,  X  Li angcai Gao is the corresponding author.
 Engineering, and Mathematics) research and education. For flexible display of mathematical concepts with high quality in various environments, mathematical formulae are Presentation MathML, or PDF documents. Due to the lack of semantic structures, the math formulae are difficult to be indexed, retrieved and consumed. Meanwhile, it is difficult for users to input formulae as queries to address their information need. Mathematics retrieval, targeting at facilitating the access, retrieval and discovery of math resources, becomes increasingly needed in many scenarios. For example, many traditional courses or massive open online courses (MOOCs) release the course resources (books, lecture notes and exercises, etc) in PDF or HTML. In these resources, mathematical formulae could be the most challenging part [8]. However, it is difficult for students to find useful complementary materials according to the formula that they encounter in the learning materials. On the other hand, users cannot directly obtain the formulae as queries by text copy&amp;paste from PDF documents, which is an important search behavior in classic web search engines of the formulae, they might not probably get the ideal results from the traditional text-based search engines. In that, classic search engines cannot properly index and retrieve mathematical formulae.

Although mathematics retrieval is useful for different applications, practical systems are still quite sparse. It is mainly because mathematical formulae are highly structured and domain-specific, while most math formulae available in existing information system are either in layout presentation or unstructured format (e.g., PDF). This problem challenges the construction of mathematics retrieval systems in query interface, normalization, indexing and ranking [16]:
Query interface : Unlike text-based search, mathematics retrieval system usually takes math formulae as queries. A query interface, which needs to concern how to input the highly structured formulae into the search engine, is essential to popularize the system. The current search engines require users to know the classification, or name of a formula or using an editor or string encoding (e.g., L A T E X) to enter formulae [7]. However, these interfaces would cost extra time and efforts of users to input query formulae. Moreover, for the junior users, learning encoding query language is a challenging task.

Normalization : Normalization is essential to ensure all the equivalent math formulae with different presentations or transformations can be recalled. Different from word stemming and thesaurus operation in text retrieval, formula normalization should overcome variation in variables, constants, spatial layouts or even semantics among equivalent formulae. For instance, X  a + b/c  X  X nd X  y/z + x  X , X  a an d X  a/b  X , X  x  X  2  X  X nd X  1 x 2  X  X  ave different layout presentations while presenting the same meaning.

Indexing and ranking : Intuitively, spatial layouts or semantics of math formula can be expressed or understood in tree-structures. In order to accurately calculate the structural similarities of formulae, attributes of tree structures are commonly considered, such as sub-trees and levels. For example, formulae containing the same main structure with different sub-trees (e.g., a + b  X  y vs. x + y ), and formulae containing different main structure with the same sub-trees (e.g., a + b  X  y vs. b  X  y ). A major difficulty with extracting structural attributes from formulae in layout presentation is that, the layout presentation usually contains limited semantics about the formulae. Take presents all symbols linearly without denoting the priority of operators. Moreover, how to calculate the similarity score according to the attributes of tree structures remains an open problem, because the motivations of different users of the mathematics retrieval systems vary according to their background and specific tasks [18].

In order to solve the aforementioned challenges, in this study, we propose a publicly available mathematics retrieval system 1 towards formulae in layout presentations. The contribution of this study is threefold: 1) Query interface : A novel query input interface is proposed to enable users to  X  X opy X  formula queries directly from PDF documents; 2) Normalization : A semantic enrichment technique is proposed to extract the structural and semantic information from the layout presentations of formulae. Additionally, normalization of operand orders and hierarchical structure generalization are proposed to support more reasonable fuzzy matching and similarity calculation; 3) Indexing and ranking : Effective online query is implemented by proposing the indexing technique towards both original and generalized sub-structures of formulae. In addition, we propose the novel similarity function, which addresses hierarchical and fuzzy matching between formulae. Moreover, the relevant score between query formula and a document (webpage or PDF) is calculated based upon the hybrid of a representative formula and a set of relevant formulae.
Mathematics retrieval has been researched since 2003 [9], and more than ten systems are reported. We summarize these systems according to the essential aspects of constructing a mathematics retrieval system in Table 1 and analyze the relevant approaches on query interface, formula presentation, indexing and ranking techniques as follows.
The existing user interfaces can be classified into four categories: 1) The first type of interface provides detailed taxonomy of mathematics (e.g., Wolfram 2 ) to support ht tp://www.icst.pku.edu.cn/cpdp/wikimirs2/ http://mathworld.wolfram.com retrieving formulae and related information in the function library. This interface requires users to know well about the name or category of the query formula. 2) The second category designs specially defined query language to capture users X  information needs (e.g., set wildcards for subexpressions or variables)[4]. 3) The third category provides an graphic equation editor for users to input formulae [5, 12]. Recently, handwritten methods are proposed to enable users to input handwritten formulae on smartphones or tablets [7]. These methods still cost users X  extra efforts to obtain the formula query and seems unbearable when the formula happens to be complicated. 4) The last category of interface requires users to input specific encodings of formulae such as L A T E X or MathML. This is used by most of the existing systems [9, 15] and is considered as the most convenient interface given the markups of query formula are already available to the user. Similarly with handwritten input, typing out the markups of the query formula manually is quite time-consuming and troublesome, especially for the users know little grammars of these markups. To settle this problem, a query input interface is proposed to support users to input query formula via clipping the formula region from PDF documents.
Formula presentation denotes the internal format of formulae of a mathematics retrieval system. It is important since it determines the compatibility of a mathematics retrieval system to the existing data sources. Early researches of mathematics retrieval focus on semantic presentations (e.g., Content MathML, OpenMath) [5], which mark up the semantic meanings of formulae. However, in practice, most math formula resources are presented in in the webpages or in unstructured forms (e.g., PDF) in documents. For instance, Wikipedia encodes formulae in webpages using L A T E X. In digital libraries, math concepts are encoded as unstructured symbols in PDF documents. Meanwhile, formula presentation determines the amount of information that the mathematics retrieval system can rely on. Since Presentation MathML, L A T E X or PDF only contain limited spatial layouts and few semantic information of formulae, existing mathematics retrieval systems based on these layout presentations can only support exact matching [11] or consider little about the structure matching [2, 14, 15]. To address this problem, this paper proposes to enrich structural and semantic information of formulae in layout presentations, so as to realize structure and fuzzy matching in mathematics retrieval.
The main indexing techniques of mathematics retrieval include text-based and tree-based, as classified in Table 1.
The idea of text-based indexing techniques [9, 10, 11] is to convert math formula markups into plain text strings, so that they can be indexed using existing text-based indexing tools like Lucene. Because mathematical formulae are highly symbolic and structured, the transformation from structural formulae into plain text strings mainly focuses on how to encode structures in text strings and normalize different presentations of formulae. Miller et al. convert all non-alphanumeric symbols in L A T E X into alphanumeric symbols and normalize the order of operands into a canonical form [9]. A similar method is proposed by Misutka et al. [11] with improvement via normalization of variables and constants. The structures of formulae are lost in those methods. Aimed at matching formula structures in the text-based indexing methods, Miner et al. [10] index n -gram terms, which are substructures with no more than n successive tags, meaning only substructure with no more than n nodes are indexed, and high-level structures or complex structures in the formula are rarely considered.
In tree-based methods, attributes of formula tree structures (e.g., substructures or paths) are extracted as index terms. In order to support substructure and fuzzy matching, a straightforward way is to index all substructures of formulae with term attributes (e.g., frequency, level) [15] However, fuzzy match between expressions sharing high-level structures cannot be realized. In order to better support fuzzy match, Hu et al. [2] propose to extract substructures from the L A T E X markups considering hierarchical generalization of substructures. Since this method is based on formulae X  X  layout presentations, the structural match between formulae encoded in one-dimensional markups cannot be supported (will be detailed in Section 3.4.1). In order to avoid explosive growth of index space when indexing all substructures of formulae, Kohlhase et al. [5]apply a substitution tree indexing technique to index substructures of semantic formula presentation. A substitution tree represents the structure of all the indexed first-order logic terms. Exact or similar matches can be found by backtracking all nodes of the substitution tree using different strategies. However, the substitution tree in [5] is built upon operator tree of formula, which is difficult to extract from formulae in layout presentations. To overcome this, Schellenberg et al. [14] employ the substitution tree indexing technique to index layout presentations of formulae. However, the insertion bias introduced in their paper has a significant impact on the results. To address the problem of supporting meaningful substructure and fuzzy match of formulae in layout presentations, a novel index technique with semantic enrichment and fine-grained hierarchical generalization is proposed in this paper. ht tps://mir.fi.muni.cz/mias/
There are other indexing methods, which are not text-based or tree-based. Based on Formal Concept Analysis, Nguyen et al. [13] extract math features and index them via constructing a mathematical concept lattice of these features. However, the construction of concept lattice relies on the semantic structures of formulae which are difficult to obtain from formulae in layout presentations. L A T E XSearch and Symbolab 5 are related commercial systems whose schemes are not reported publicly.
Most text-based methods use tf -idf to calculate similarities of formulae. Miner et al. [10] introduce weights for terms according to their levels, lengths and complexities. However, as only limited structure information of formulae is indexed in text-based models, the structure matching score is difficult to calculate properly. Some tree-based methods also use the modified tf -idf to calculate the matching scores of substructures. Sojka et al. [15] introduce weights to discriminate substructure matches in different levels based on the assumption that structures in higher level are more important than those at lower levels. Hu et al. [2] introduce weights based upon the distance of matched terms in query and the matched formulae. A main problem with this method is that substructures in lower level contribute more to the similarity score while a common sense of user is to understand a formula from high level to low level.
Besides tf -idf , some methods evaluate the similarities of formulae according to the similarity of feature sets. Nguyen et al. [13] index formulae in the mathematical concept lattice structure based on similarities of feature sets of each formula. To search for a formula, the query is inserted into the mathematical concept lattice and similar formulae are ranked according to their distances from the query. However, the system is only tested upon a small dataset including less than 500 formulae, and its query efficiency has not been analyzed. In the literature [14], each formula can be presented by a set of sub-expressions with their attributes (e.g., contents, neighbours) presented in a 5-tuple. Retrieved formulae are ranked according to the set similarity ht tp://www.latexsearch.com/ http://symbolab.com/ offline index flows). between formulae. However, the insertion bias introduced in their paper has a significant impact on the retrieval results. Kamali et.al. [4] calculate the formula similarity using tree edit distance, which cannot evaluate the structure similarity in different levels. Kamali et.al. [4] also propose to find relevant formulae using pattern matching. This method requires users to learn specific query language to input query X  X attern X  X nd also requires to predefine many patterns manually in advance.

Different from the existing methods, this paper proposes a method to calculate similarity between a query formula and a document containing multiple relevant formulae. The proposed similarity calculation considers not only the relevance of substructures in original forms or generalized forms, but also distance between sub-structures.
Figure 1 illustrates the workflow of the proposed system, including six modules: user interface , preprocessor , tree constructor , tokenizer , indexer and ranker . The solid lines denote the offline workflow: Firstly, preprocessor converts different data sources into uniform internal format (Presentation MathML). Secondly, semantics of formulae in Presentation MathML are enriched and semi-operator trees of formulae are constructed by tree constructor . Thirdly, terms are extracted by tokenizer with normalization and generalization. Lastly, the indexer calculates and stores the statistical data (e.g. tf -idf , term level) of each term in the inverted index files.

The dotted lines indicate the workflow how a user searches a formula (online computation): The user can input the query by either pasting the L A T E X markups or clipping the formula region using a PDF reader plugin. Then, the query is preprocessed into Presentation MathML and enriched with semantics. Next, the semi-operator tree is tokenized into terms and passed through ranker to find the matched terms in the index files. The relevance scores between query and documents are calculated based on the matched formulae in documents. Lastly, a list of ranked documents with relevant formulae are returned to the user.
In our system, two user interfaces are implemented to facilitate users to input query formulae from webpages or PDF documents. Firstly, users can input the query formula via manually typing or pasting the L A T E X markups into the search box at the front page of the proposed system (as shown in Figure 2(b)). For now, the system only accepts L A T E X markups, which are more easily recognized by
Figure 2: User interface of the proposed system ex perienced or advanced users [7]. However, this interface turns to be clumsy and less helpful when users are searching formulae in PDF documents. Meanwhile, this querying strategy is not useful when users have little experience in using L A T E X. To overcome the difficulty of obtaining formula query from non-structural documents like PDF, a novel query input interface is proposed in this paper. It enables users to obtain query formula directly from PDF via clipping the formula region in the document. Concretely, a plugin (as shown in Figure 2(a)) is implemented in a PDF reader to obtain the user X  X  action of clipping the formula region in the document. After the formula region is selected using mouse, a formula structure recovering method refined from the literature [17] is deployed to analyze the layout structure of the formula and output it as Presentation MathML. It is worth noting that the performance of this structure analysis method [17] is improved by utilizing precise character information obtained from PDF. The reader plugin is released as a publicly available tool 6 .
The goal of the preprocessor is to identify and convert formula markups from different sources into uniform internal storing formats, namely Presentation MathML. The data sources concerned in this paper include webpages and PDF documents. For webpages, the preprocessor extracts formula markups via identifying the pre-defined markup tags. For and tagged by  X  &lt; math &gt;  X . In the preprocessor, the L A T markups are converted into Presentation MathML using SnuggleTeX 7 . For PDF documents, formula recognition techniques are employed to identify the formula regions and ht tp://www.icst.pku.edu.cn/cpdp/Co-Reader/ http://sourceforge.net/projects/snuggletex/ recognize their layout structures. Concretely, characters an d their attributes (e.g., baselines) are extracted from documents via parsing the documents using the PDF parser (e.g., PDFBox). The precise boundaries of the math formulae are then detected using the refined formula identification method proposed in [6]. Lastly, the layout structures of formulae are analyzed and outputted as Presentation MathML using the refined formula structure analysis algorithm proposed in [17].
A layout presentation tree can be extracted directly based on Presentation MathML. See an example in Figure 3 c). As discussed in Section 2.2, the drawback of mathematics is that many useful semantic contents of formulae are lost in layout presentations. In this paper, we firstly compare and analyze the main differences of layout presentations and semantic presentations of formulae, and then propose a semantic enrichment technique in the semi-operator tree construction process to overcome this limitation.
Before discussing the difference between layout and semantic presentations, we first classify the relations in presentation tree of formulae into two categories: one-dimensional relations and two-dimensional relations. One-dimensional relations denote the symbols are horizontally connected, such as, expressions connected by  X + X ,  X - X ,  X   X   X , etc. Two-dimensional relations describe the symbols are connected in non-linear relations, such as,  X   X   X ,  X  P  X . In l ayout presentations, most of two-dimensional relations are equivalent to the semantic structures of the formula. In other words, most of the two-dimensional layout relations can be mapped or converted into semantic structures directly. However, symbols in one-dimensional relation is connected using the same horizontal tag (e.g.,  X  &lt; mrow &gt;  X  tag in Presentation MathML). And the semantic meanings (e.g., operator priority, operands) are unknown in the layout presentations. Therefore, the structures and semantics in one-dimensional relations cannot be utilized in mathematics retrieval. This is why semantic interpretation is needed to convert layout presentation in one-dimensional relation into corresponding semantic presentation.

Take  X ( x + y )  X  a b  X  a s an example, its layout and semantic presentations is illustrated in Figure 3 a)-b). The layout presentation of a fraction (in two-dimensional relation) can be converted into its semantic presentation using straightforward tag conversion as denoted in green nodes in Figure 3 a)-b), while the rest of structures (in one-dimensional relation) cannot be converted without special semantic interpretation. In this paper, we propose to convert layout presentations in a one-dimensional relations into corresponding semantic presentations using the following semantic enrichment technique.
Conversion from layout presentation to semantic presentation has been widely researched in the area of formula understanding [16], but satisfactory methods or conversion tools have not been proposed yet. How to disambiguate the meaning of symbols or structures in semantic presentation is quite difficult since contexts and Figure 3: Layout presentation and semantic pr esentation of ( x + y )  X  a b se mantic analysis are required. However, for the same conversion problem, mathematics retrieval has a different goal from that of the existing formula understanding methods [16]. Mathematics retrieval only needs to make use of the structures and semantics of formulae (e.g., operator priority, tree level) as much as possible and has a relatively high tolerance of ambiguities. In addition, as discussed above, the main problem with mathematics retrieval systems towards formulae in layout presentations is caused by the lost of the semantics in one-dimensional presentations. It is found that the one-dimensional expressions can be interpreted into the corresponding operator trees using classic expression calculation algorithm if disambiguation is not taken into account. The extracted operator trees are helpful for mathematics retrieval, since the semantics (e.g., hierarchical structures) are recovered.

Based on the aforementioned analysis, the semantic enrichment is carried out as follows: Firstly, one-dimensional presentations are found in MathML via identifying the analyzed using classic one-dimensional expression calculator algorithm as described as follows: 1) The contents under  X  &lt; mrow &gt;  X  tags are identified as the Infix Notations of the formula. The operators, variables and constants respectively. 2) A list is defined to describe the priority of operators and the Infix Notations are converted into Reverse Polish Notations (RPN) based on this list. Since the algorithm of converting Infix Notation into RPN is well-known, details of the algorithm is not given here.
The contents under  X  &lt; mrow &gt;  X  tags are replaced with a tree, which is the semantic presentation of these contents and is obtained by the aforementioned process. After executing this process from the lowest level to the highest level of the layout presentation tree recursively, a  X  X emi-operator X  tree is obtained, as shown in Figure 3 d). In this paper, we call it semi-operator tree rather than operator tree because there still exists a few ambiguities. For instance, implicit multiplication is not identified, such as xy may represent x  X  y or a single variable. In this paper, only later interpretation is taken. Equivalent transformation is also not considered, e.g., x  X  1 is equivalent to 1 x , b ut the conversion from x  X  1 to 1 x is not carried out here.
The goal of normalization is to convert different formulae with the same meaning into a uniform format, so as to en sure the high recall of relevant formulae. The objects of normalization generally includes variables, constants and order of operands. Values of variables or constants need to be normalized, since they have little effect on the structures of expressions. Similarly, operand order of commutative operator (e.g., +,  X  ) needs to be normalized in order to ensure that the relevant formulae with different order of operands can be retrieved. Most mathematics retrieval systems towards formulae in layout presentation can only normalize variables or constants, since there is little information about the order of operands in layout presentations. In this paper, the semi-operator tree obtained in previous steps can be used to normalize not only the variables or constants, but also the operand orders. Concretely, order of operands is firstly normalized as follows:
A list of commutative operators (e.g., +,  X  ) is predefined and the operand order of commutative operators are normalized as follows: The semi-operator tree is traversed level by level from bottom to top. For each internal node (non-leaf) in each level, if it is a commutative operator, sort the node X  X  children according to lexicographical order of the linear markups of the children. In this way, the order of operands is normalized. For instance,  X  X +V  X  C X  and  X  X   X  V+C X  will be normalized to the same expression,  X  X +C  X  V X , where  X  X  X  and  X  X  X  are the aliases of constant and variable, respectively.

Variables and constants are encoded in  X  &lt; mi &gt;  X  and  X  &lt; mn &gt;  X  tags in the semi-operator tree. They are normalized during the generalization process in term extractor. Specifically, the contents under these tags are removed in the generalization process, which is detailed in the following section.
Term extractor aims at extracting the index terms from the semi-operator tree of formula. Before introducing the term extraction method, the conventions how people read or understand formulae are firstly analyzed: Because operator trees of mathematical formulae are naturally hierarchical, they are conventionally read or understood in a hierarchical way with generalization step by step. More specifically, most of the formulae can be viewed as expressions containing an operator with a list of operands. Generalizing the content of operands as an alias is commonly applied to simplify complex structure into a concise expression. For example, is seen that generalization is an important behavior when people understand formulae. Additionally, generalization of substructures in low level can avoid overrating for the substructures in low level, which is a common problem occurring in tree-based indexing methods.

Based on the aforementioned analysis, a term extraction algorithm with generalization is proposed towards the semi-operator trees of formulae. In order to mimic the formula understanding process of users and support the substructure matching and fuzzy matching in mathematics retrieval, each substructure and its generalized forms are extracted. Through extracting generalized terms, formulae, which share substructures in high level, can be matched and their similarities can be calculated properly.

The tokenizing algorithm is described in Algorithm 1. It generates two categories of terms, namely original terms and generalized terms . The original terms are generated directly from the original sub-expressions of the formulae. The generalized terms are generated from the fuzzy sub-expressions, so as to describe the sketch of the expression. For each term, two attributes are extracted and recorded in a pair, namely ( content, level ). The content describes the MathML markup of the term and the level denotes the level of the term in the semi-operator tree whose root X  X  level is 1. Algorithm 1 To kenizer 1: Let cc ( e xp ) be contents of exp including its descendants 2: Let tag ( exp ) be the tag of exp node itself 3: Let text ( exp ) be the text inside the tag of exp node 4: procedure Tokenize ( exp, lev ) 5: if exp is not a leaf then 6: term set  X  ( cc ( e xp ) , lev )  X  original term 7: gen str  X  tag ( e xp ) 8: for each child c i of exp do 9: Insert tag ( c i ) as child of gen str 10 : Tokenize ( c i , lev + 1) 11: end for 12: term set  X  ( gen str, lev )  X  g eneralized term 13: else if length of text ( exp ) &gt; 1 then 14: term set  X  ( cc ( e xp ) , lev )  X  original term 15: end if 16: end procedure
Table 2 illustrates eight terms extracted from ( x + y )  X  a Th e level(L), original and generalized terms are described in the first three columns. For limited space, only the contents of the generalized terms are given in the last column.
L Original Generalized Generalized (contents)
In order to return a list of ranked documents containing the relevant formulae, the relevance between the query formula and the document should be calculated. The existing mathematics retrieval methods mainly focus on how to calculate the relevance between formulae. They cannot be directly applied to calculate the relevance between a formula and a document because the formulae and the documents are in many-to-many correspondences. A document may contain many formulae and one formula may appear in many different documents. To our best knowledge, how to calculate the relevance of a query formula and a document is rarely investigated in the previous studies. Some methods [11] simply combine the formula relevance score with the text relevance score without considering the combination of the scores of multiple relevant formulae in the document.
In this paper, we propose a more sophisticated indexing me thod to characterize the relevance of the document containing a number of relevant formulae. A straightforward way is to select the most relevant formula as the representative of the document and rank the documents according to their representatives [4]. However, this method ignores the relevances of the formulae in the document other than the selected representative, highly depends on the accuracy of the similarity calculation between the query formula and representative formula, and might miss the documents containing a lot of other relevant formulae. Another way is to calculate a relevance score between query formula and the document according to all the formulae in this document. In other words, we take all the terms of the query formula and all the terms extracted from all formulae in this document to calculate an overall relevance score between the formula and the document. This method combines all the relevance scores of the relevant terms appearing in different formulae in the document, and might overate the documents which are not really relevant. We find those two strategies are contrary and complementary to each other. In order to construct a reasonable strategy, a hybrid score based on those two strategies is proposed.
In order to support efficient online query, we calculate the statistics of each term offline and store them in the inverted index files. Two index files are built to calculate a hybrid similarity score of a query and a document: 1) Index file for terms and formulae is built to calculate the independent score , which denotes the similarity between the query and a single formula; 2) Index file for terms and documents is built to compute composite score , which describes the similarity between the query and all the relevant formulae in a document.

Index of terms and formulae : To calculate independent score , an index file (See Table 3) of terms and formulae is constructed and this file is referred to as index t f he reafter. For each term, a list of formulae, which contain this term, is recorded. A formula( f )  X  X ontains X  a term( t ) denotes that the content field of one of the terms extracted from f is exactly the same with that of t . For each term, iff ( t i ) describes the inverted formula frequency
For each pair of term t i appears in formula f j : tl f ( t denotes the level of t i in f j . Since there may be several occurrences of t i in f j and their levels may be different, tl ( t i , f j ) records all the unique levels of t i in f j describes the frequency of t i occurring in f j : tf f ( t
It is worth mentioning that, original terms and generalized terms , which are extracted by the tokenizer (see Section 3.5), are stored in the same index file. They can be discriminated by matching the content field of terms, which are generated from a query, because ge neralized terms can only be matched by generalized terms of the query.
Index of terms and documents : To calculate the composite score , the index file (See Table 4) of terms and documents is constructed and this index file is referred to as index t d he reafter. For each term t i , idf ( t i ) describes the inverted document frequency of t i : idf ( t i ) = 1 + t appears in document d j , tl d ( t i , d j ) records all unique levels of t i appearing in different formulae in document d j and tf d ( t i , d j ) describes the frequency of t i occurring in
When a user searches a formula, the system will firstly convert the query into Presentation MathML. Next, semi-operator tree of the query is obtained by tree constructor, and then it is tokenized into original terms and generalized terms . After the terms are generated, the inverted index files will be looked up and all the matched terms will be returned to calculate similarity in ranker. The similarity score between a query Q and a document D is defined in Equation 1, sim ( Q, D ) =  X   X  sim idp ( Q, D )+(1  X   X  )  X  sim cmp ( Q, D ) , (1) where sim ( Q, D ) is a weighted sum of the independent score, sim idp , and the composite score, sim cmp . The independent score, sim idp , denotes the similarity score between the query and the most similar formula in the document. For a document, the formula with the highest similarity score with the query is selected and its similarity score is taken as the independent score, sim idp , between the query and the document. The composite score, sim cmp , describes the similarity score between the query and all the relevant formulae in the document.  X  and 1  X   X  denote the weights for the independent score and the composite score. In our experiment,  X  is set as 0 . 7. Definitions of sim idp and sim are given in Equation 2 and Equation 4, respectively.
A document may contain many relevant formulae and the formula similarity score between the query, Q , and each formula in the document, F i , can be calculated. The sim idp ( Q, D ) chooses the formula with the highest similarity score as its document similarity score: sim idp ( Q, D ) = max The formula similarity score between a formula F i and a query Q is the weighted sum of similarity scores of all matched terms. For each term t generated from the query Q , a similarity score is calculated in Equation 2, where tf f and iff ( t ) are stored in the index file, index t f . W denotes the ratio of number of terms in Q matched by F to the total number of terms in Q . The term level weight, W le vel , is introduced to evaluate the distance of the matched terms on different levels:
W level ( t, Q, F ) = 1 There may be several occurrences of the term t in the formula F and they may be at different levels of the formula F . Therefore, different level distances may be obtained through calculating distances between the query term level ( level ( t, Q )) and each matched term level ( level j ( t, F )). In our system, a minimum level distance is taken as the level distance between the query term t and the formula F . In order to ensure that the exactly matched terms would always get higher similarity score than those who are approximately matched, the weight of generalization, W gen ( t ), is introduced as a penalty of the generalized terms. W gen ( t ) is assigned as 1 if t is an ordinary term, otherwise W gen ( t ) is set as  X  , where 0 &lt;  X  &lt; 1. In our experiment,  X  = 0 . 5. For instance, calculation of the independent score, sim idp , between formula, ( x + y ), and query, ( x + y )  X  a illustrated in Table 5.
 Table 5: Independent Score of ( x + y )  X  a b an d ( x + y )
Different from independent score, the composite score score cmp calculates the similarity of a query and a document based upon all the matched terms in a document and it is as defined in Equation 4, sim cmp ( Q, D ) = W cover ( Q, D )  X  X sim cmp combines the similarity scores of all the matched terms in the document. For each term t generated from the query Q , the similarity score is calculated according to the term frequency in document, tf d ( t, D ), and its inverted document frequency, idf ( t ). W level ( t, Q, D ) is similar with W level ( t, Q, F i ), but it chooses the shortest term level distance from a document rather than a formula. W cover ( Q, D ) is similar with W cover ( Q, F ), but it indicates the ratio of terms in Q , which are matched by a document rather than a formula.
The dataset used in this paper is collected from publicly available webpages and PDF documents. Therefore, comparative evaluation with further methods can be carried out via using the same dataset. Part of the dataset is collected from Wikipedia, whose copy can be freely downloaded. Concretely, the 2013-07-08 dump, whose size is 41 GB uncompressed, is used. This dataset contains 13.6 millions webpages and 521,782 mathematical formulae. The other part is collected from a publicly available PDF document set proposed for formula identification [6]. It contains 400 pages from 194 documents, which are crawled from CiteSeerX. The dataset consists 9,482 formulae. Since the precise boundaries of all the formulae are already provided in this dataset, their Presentation MathML markups are obtained based upon the given boundaries, via adopting formula structure analysis [17] with modification and manual correction.
The index files are constructed offline on a MacBook Pro with 2.8 GHz Intel Core i7, 4 GB DDR3 and 750 GB SATA Disk. The system is implemented using Scala based on Lucene. The time taken to construct the index files and the sizes of the index files are evaluated with increasing amount of indexed formulae, as shown in Table 6. It costs less than 40 minutes to generate two index files after the dataset is inputted to our system. The total size of index is less than 1.2 GB. As the number of indexed formulae increases, the construction time and sizes of index files increase steadily. Table 6: Construction Time and Sizes of Index Files
Table 7 illustrates the query time with increasing amount of indexed formulae. The minimum, maximum, median and average query time over 100 different queries are tested upon indexes based on increasing number of indexed formulae. It is seen that as the size of index file increases, the average query response time increases steadily. On average, it costs around 500ms to respond to a query. The maximum query time is cost by the queries containing many commonly seen terms (e.g., x 2 ), because the more number of formulae or documents contain the queried terms, more time is consumed to merge the document lists.

We compare the proposed method with two baseline tree-based indexing mathematics retrieval systems: 1) MIaS [15] indexes all the substructures of formulae and calculates the similarity of each substructure considering their levels. Because the MIaS is built upon arXiv dataset rather than Wikipedia, we re-implement this method to compare in this paper. 2) WikiMirs [2] is a representative tree-based indexing system without semantic enrichment based on Wikipedia. It indexes all substructures of the formulae in E X considering the generalization of substructures.
In order to verify the effectiveness of the proposed techniques (semantic enrichment in tree constructor, normalization and generalization in tokenizer), comparison is also carried out when these techniques are turned off se lectively. Concretely, four systems are constructed with four different configurations: 1) ours base : Neither semantic enrichment nor normalization or generalization are adopted and this is considered as a baseline method; 2) ours gen : Semantic enrichment and normalization of operand order are turned off, but generalization is adopted; 3) ours sem Semantic enrichment and normalization of operand order are adopted, but generalization is turned off; 4) Ours : The proposed system with all the proposed techniques turned on.
In this paper, a query set containing 100 queries is utilized for evaluation. Among this query set, 70 queries with one relevant page for each queries are provided by [4]. 12 queries are the queries used in the literatures [2] and [13]. The rest is newly added and they are collected from formulae in Wikipedia. In order to facilitate further comparison, the query set, along with the scores for corresponding retrieved documents given by the subjects, are publicly available at our system X  X  address.
For each test query, the top-k documents retrieved by the six different systems are evaluated. The relevances between the retrieved documents and the queries are judged by five postgraduates majoring in Computer Science. The query set is divided into five independant parts randomly and equivalently. And each part, containing 20 queries, is judged by a subject. For each query, top-k results returned by each system are presented to the subject in order. Each result (document), includes the title, URL, and a representative formula, which achieves the highest sim idp score. For each result, a subject gives a relevance score, where score  X  { 0 , 1 , 2 , 3 , 4 , 5 } . 0 denotes the no score has been assigned yet, 1 indicates the result is irrelevant, and 2  X  5 denotes the relevance between the result of the query, where higher score indicates higher relevance.

To increase the efficiency of manual measurement and insure the same result gets the same judge in different systems, a judging interface is implemented to reuse the labeled results via recording a map from ( Q, D ) to its labeled score. In other words, if a specific ( Q, D ) has been judged in a system, the subjects do not need to judge it again when scoring other systems. The labeled results of each system for all the queries are released along with the query set.
Average Precision (P) and Discounted Cumulative Gain (DCG) [3] are calculated based on the top-k retrieved documents over all queries. For each query, a list of scores of the top-k results is given by the subjects. The i -th element score i in the score list denotes the score of the i -th retrieved document. P is calculated based on whether the retrieved document is relevant ( score i &gt; 1) to the query or not ( score i = 1). P of the top-k results is calculated as, P based on the relevant score of the result according to its position in the result list. DCG of the top-k results is defined
The average P and DCG at top-k results over all queries are illustrated in Table 8. From the experiments, we find that WikiMirs usually retrieves a small number of results and most of them are relevant. MIaS retrieves much more results, but it does not rank the relevant results properly. This is mainly why MIaS achieves higher P 10 than WikiMirs, while has a lower DCG 10 than WikiMirs. It should be mentioned that MIaS is proposed towards arXiv and the parameters and settings are tuned for this dataset. We consider this might be an important factor affecting MIaS X  X  performance here. For WikiMirs, it is found that no result is returned for about 40 queries and it is considered as the main reason why WikiMirs achieves lower P and DCG .
By comparison, the proposed method achieves a significant improvement in P and DCG . Compared with the baseline strategy ( ours base ), both generalization strategy ( ours gen ) and semantic enrichment with normalization strategy ( ours sem ) achieves higher P 10 and DCG . It is seen that through adopting these strategies, the relevant results, which do not exactly match the query but share similar structures with different presentations, are retrieved back and ranked properly. The proposed system, using all these techniques, makes a distinct improvement in P and DCG , compared with the other methods.
 Table 8: Average Precision &amp; DCG at Top-k Results
Fo r each document, the formula with the highest formula-query score is selected to be the representative of this document. Table 9 shows two queries with top-5 results retrieved by different systems, ordered by document similarity scores with the query.
 containing exact content of the query are found by both WikiMirs and our system. However, the top-3 result of our system is obviously more relevant to the query, since it shares more common substructures with the query. It is mainly because more delicate substructure matching and similarity calculation is adopted in our paper.

Take f ( x ) = 1 x + 1 x a s an example, no result is returned by WikiMirs because the operand order of  X + X  in query is different from those in document set. Only one result is returned by WikiMirs even if the order of the operand  X + X  is the same with those in document set. Reasonable results are returned by our system in either cases. It is mainly because semantic enrichment is adopted, so that the substructure of 1 x + 1 x c an be extracted, hierarchical generalization enables equations containing such substructure rank higher, normalization of operand order overcome the different presentations of 1 x + 1 and 1 + 1
To facilitate the access and search for mathematical for-mulae in existing information systems, this paper investi-gates the main challenges in constructing mathematics re-trieval system for formulae in layout presentations. Mean-while, a mathematics retrieval system focusing on such for-mulae is proposed, with the following three contributions: 1) This system supports searching formulae from both web-pa ges and PDF documents with a novel query input inter-face, which enables users to input query formula directly when reading PDF documents. 2) A semantic enrichment technique is proposed to extract useful semantic informa-tion from formulae in layout presentation, resulting in bet-ter support for reasonable normalization of operand orders and generalization of substructures. 3) Hierarchical general-ization of substructures is proposed to generate index terms to support substructure matching and fuzzy matching. 4) The problem of scoring a document with multiple relevant formulae is addressed, and a hybrid scoring method, consid-ering both the most relevant formula and multiple relevant formulae, is proposed. Experiments for self-comparison are carried out to prove that the aforementioned techniques do help to improve the performance of mathematics retrieval. Moreover, comparison experiments with two representative systems also show that the proposed system achieves better performance.

The proposed system, dataset and query set are publicly available for further comparison. Meanwhile, we plan to re-evaluate and refine our system via participating in competition of NTCIR Task Math 8 , which provides a test collection and a set of tasks for mathematics retrieval. This work is supported by the National Natural Science Foundation of China (No.61202232). [1] A. Aula and M. K  X  aki. Understanding expert search [2] X. Hu, L. Gao, X. Lin, Z. Tang, X. Lin, and J. B. [3] K. J  X  arvelin and J. Kek  X  al  X  ainen. Ir evaluation methods [4] S. Kamali and F. W. Tompa. Retrieving documents [5] M. Kohlhase and I. Sucan. A search engine for ht tp://ntcir-math.nii.ac.jp/ [6] X. Lin, L. Gao, Z. Tang, J. Baker, and V. Sorge. [7] M. L  X  X  X ska, P. Sojka, and M. Ru X zicka. Similarity search [8] X. Liu. Generating metadata for cyberlearning [9] B. Miller and A. Youssef. Technical aspects of the [10] R. Miner and R. Munavalli. An approach to [11] J. Mi X sutka and L. Galambo X s. Extending full text [12] T. T. Nguyen, K. Chang, and S. C. Hui. A math-aware [13] T. T. Nguyen, S. C. Hui, and K. Chang. A [14] T. Schellenberg, B. Yuan, and R. Zanibbi.
 [15] P. Sojka and M. L  X  X  X ska. Indexing and searching [16] R. Zanibbi and D. Blostein. Recognition and retrieval [17] R. Zanibbi, D. Blostein, and J. R. Cordy. Recognizing [18] J. Zhao, M.-Y. Kan, and Y. L. Theng. Math
