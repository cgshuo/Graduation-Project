 Online commerce has gained a lot of popularity over the past decade. Large on-line C2C marketplaces like eBay and Amazon, feature a very large and long-tail inventory with millions of items (product offers) entered into the marketplace every day by a large variety of sellers. While some sellers (gener-ally large professional ones) provide rich, structured description of their products (using schemas or via a global trade item number), the vast majority only provide unstructured natural language descriptions.
To manage items effectively and provide the best user experience, it is critical for these marketplaces to structure their inventory into descriptive name-value pairs (called properties) and ensure that items of the same kind (digital cameras for instance) are described using a unique set of property names (brand, model, zoom, resolution, etc.) and values. For example, this is important for measuring item similarity and complementarity in merchandising, providing faceted navigation and various business intelligence applications. Note that structuring items does not necessarily mean identifying products as not all e-commerce inventory is manufactured (an-imals for examples).

Structuring inventory in the e-commerce domain raises several challenges. First, one needs to iden-tify and extract the names and the values used by individual sellers from unstructured textual descrip-tions. Second, different sellers may describe the same product in very different ways, using differ-ent terminologies. For example, Figure 1 shows 3 item descriptions of hard drives from 3 different sellers. The left description mentions  X  X otational speed X  in a specification table while the other two descriptions use the synonym  X  X pindle speed X  in a bulleted list (top right) or natural language speci-fications (bottom right). This requires discovering semantically equivalent property names and values across inventories from multiple sellers. Third, the scale at which on-line marketplaces operate makes impractical to solve any of these problems manually. For instance, eBay reported 99 million active users in 2011, many of whom are sellers, which may trans-late into thousands or even millions of synonyms to discover accross more than 20,000 categories rang-ing from consumer electronics to collectible and art.
This paper describes a two step process for struc-turing items in the e-commerce domain. The first step consists in an unsupervised property extrac-tion technique which allows discovering name-value pairs from unstructured item descriptions. The sec-ond step consists in identifying semantically equiv-alent property names amongst these extracted prop-erties. This is accomplished using supervised max-imum entropy based clustering. Note that, although value synonym discovery is an equally important task for structuring items, this is still an area of on-going research and is not addressed in this paper.
The remainder of this paper is structured as fol-lows. We first review related work. We then describe the two steps of our approach: 1) unsupervised prop-erty discovery and extraction and 2) property name synonym discovery. Finally, we present experimen-tal results on real large-scale e-commerce data. This section reviews related work for the two com-ponents of our method, namely unsupervised prop-erty extraction and supervised property name syn-onym discovery. 2.1 Unsupervised Property Extraction A lot of progress has been accomplished in the area of property discovery from product reviews since the pioneering work by (Hu and Liu, 2004). Most of this work is based on the observation, later formal-ized as double propagation by (Qiu et al., 2009), that in reviews, opinion words are usually asso-ciated with product properties in some ways, and thus product properties can be identified from opin-ion words and opinion words from properties alter-nately and iteratively. While (Hu and Liu, 2004) ini-tially used association mining techniques; (Liu et al., 2005) used Part-Of-Speech and supervised rule min-ing to generate language patterns and identify prod-uct properties; (Popescu and Etzioni, 2005) used point wise mutual information between candidate properties and meronymy discriminators; (Zhuang et al., 2006; Qiu et al., 2009) improved on previous work by using dependency parsing; (Kobayashi et al., 2007) mined property-opinion patterns using sta-tistical and contextual cues; (Wang and Wang, 2008) leveraged property-opinion mutual information and linguistic rules to identify infrequent properties; and (Zhang et al., 2010) proposed a ranking scheme to improve double propagation precision. In this pa-per, we are focusing on extracting properties from product descriptions which do not contain opinion words.

In a sense, item properties can be viewed as slots of product templates and our work bears similari-ties with template induction methods. (Chambers and Jurafsky, 2011) proposed a method for inferring event templates based on word clustering according to their proximity in the corpus and syntactic func-tion clustering. Unfortunately, this technique can-not be applied to our problem due to the lack of dis-course redundancy within item descriptions. (Putthividhya and Hu, 2011) and (Sachan et al., 2011) also addressed the problem of structuring items in the e-commerce domain. However, these works assume that property names are known in advance and focus on discovering values for these properties from very short product titles.

Although we are primarily concerned with unsu-pervised property discovery, it is worth mentioning (Peng and McCallum, 2004) and (Ghani et al., 2006) who approached the problem using supervised ma-chine learning techniques and require labeled data. 2.2 Property Name Synonym Discovery Our work is related to the synonym discovery re-search which aims at identifying groups of words that are semantically identical based on some de-fined similarity metric. The body of work on this problem can be divided into two major ap-proaches (Agirre et al., 2009): methods that are based on the available knowledge resources (e.g., WordNet, or available taxonomies) (Yang and Pow-ers, 2005; Alvarez and Lim, 2007; Hughes and Ra-mage, ), and methods that use contextual/property distribution around the words (Pereira et al., 1993; Chen et al., 2006; Sahami and Heilman, 2006; Pan-tel et al., 2009). (Zhai et al., 2010) propose a con-strained semi-supervised learning method using a naive Bayes formulation of EM seeded by a small set of labeled data and a set of soft constraints based on the prior knowledge of the problem. There has been also some recent work on applying topic mod-eling (e.g., LDA) for solving this problem (Guo et al., 2009).

Our work is also related to the existing research on schema matching problem where the objective is to identify objects that are semantically related cross schemas. There has been an extensive study on the problem of schema matching (for a comprehensive survey see (Rahm and Bernstein, 2001; Bellahsene et al., 2011; Bernstein et al., 2011)). In general the work can be classified into rule-based and learning-based approaches. Rule-based systems (Castano and de Antonellis, 1999; Milo and Zohar, 1998; L. Palopol and Ursino, 1998) often utilize only the schema information (e.g., elements, domain types of schema elements, and schema structure) to define a similarity metric for performing matching among the schema elements in a hard coded fashion. In contrast learning based approaches learn a similar-ity metric based on both the schema information and the data. Earlier learning based systems (Li and Clifton, 2000; Perkowitz and Etzioni, 1995; Clifton et al., 1997) often rely on one type of learn-ing (e.g., schema meta-data, statistics of the data content, properties of the objects shared between the schemas, etc). These systems do not exploit the complete textual information in the data con-tent therefore have limited applicability. Most re-cent systems attempt to incorporate the textual con-tents of the data sources into the system. Doan et al. (2001) introduce LSD which is a semi-automatic machine learning based matching framework that trains a set of base learners using a set of user pro-vided semantic mappings over a small data sources. Each base learner exploits a different type of in-formation, e.g. source schema information and in-formation in the data source. Given a new data source, the base learners are used to discover se-mantic mappings and their prediction is combined using a meta-learner. Similar to LSD, GLUE (Doan et al., 2003) also uses a set of base learners com-bined into a meta-learner for solving the match-ing problem between two ontologies. Our work is mostly related to (Wick et al., 2008) where they propose a general framework for performing jointly schema matching, co-reference and canonicalization using a supervised machine learning approach. In this approach the matching problem is treated as a clustering problem in the schema attribute space, where a cluster captures a matched set of attributes. A conditional random field (CRF) (Lafferty et al., 2001) is trained using user provided mappings be-tween example schemas, or ontologies. CRF bene-fits from first order logic features that capture both schema/ontology information as well as textual fea-tures in the related data sources. The first step of our solution to structuring e-commerce inventory aims at discovering and ex-tracting relevant properties from items.

Our method is unsupervised and requires no prior knowledge of relevant properties or any domain knowledge as it operates the exact same way for all items and categories. It maintains a set of pre-viously discovered properties called known proper-ties with popularity information. The popularity of a given property name N (resp. value V ) is defined as the number of sellers who are using N (resp. V ). A seller is said to use a name or a value if we are able to extract the property name or value from at least one of its item descriptions. The method is incremental in that it starts with an empty set of known properties, mines individual items indepen-dently and incrementally builds and updates the set of known properties.

The key intuition is that the abundance of data in e-commerce allows simple and scalable heuris-tic to perform very well. For property extraction this translates into the following observation: although we may need complex natural language processing for extracting properties from each and every item, simple patterns can extract most of the relevant prop-erties from a subset of the items due to redundancy between sellers. In other words, popular properties are used by many sellers and some of them write their descriptions in a manner that makes these prop-erties easy to extract. For example one pattern that some sellers use to describe product properties often starts by a property name followed by a colon and then the property value (we refer to this pattern as the colon pattern ). Using this pattern we can mine colon separated short strings like  X  X ize : 20 inches X  or  X  X olor : light blue X  which enables us to discover most relevant property names. However, such a pat-tern extracts properties from a fraction of the inven-tory only and does not suffice. We are using 4 pat-terns which are formally defined in Table 1. All patterns run on the entire item description. Pattern 1 skips the html markers and scripts and applies only to the content sentences. It ignores any candidate property which name is longer than 30 characters and values longer than 80 characters. These length thresholds may be domain dependent. They have been chosen empirically. Pattern 2, 3 and 4 search for known property names. Pattern 2 ex-tracts the closest value to the right of the name. It al-lows the name and the value to be separated by spe-cial characters or some html markups (like  X  &lt;TR&gt;  X ,  X  &lt;TD&gt;  X , etc.). It captures a wide range of name value pair occurrences including rows of specifica-tion tables.

Syntactic cleaning and validation is performed on all the extracted properties. Cleaning consists mainly in removing bullets from the beginning of names and punctuation at the end of names and val-ues. Validation rejects properties which names are pure numbers, properties that contain some special characters and names which are less than 3 charac-ters long. All discovered properties are added to the set of known properties and their popularity counts are updated.

Note that for efficiency reasons, Part-Of-Speech (POS) tagging is performed only on sentences con-taining the anchor of a pattern. The anchor of pat-tern 1 is the colon sign while the anchor of the other patterns is the known property name KN. We use (Toutanova et al., 2003) for POS tagging. In this section we briefly overview a probabilistic pairwise property synonym model inspired by (Cu-lotta et al., 2007). 4.1 Probabilistic Model Given a category C , let X C = { x 1 ,x 2 ,...,x n } be the raw set of n property names (prior to synonym discovery) extracted from a corpus of data associ-ated with that category. Every property name is as-sociated with pairs of values and popularity count (as defined in Section 3) V x where v i j is the j th value associated for the prop-erty name x i and c i ( v i j ) is the popularity of value v Given a pair of property names x ij = { x i ,x j } , let the binary random variable y ij be 1 if x i and x j are synonyms. Let F = { f k ( x ij ,y ) } be a set of fea-tures over x ij . For example, f k ( x ij ,y ) may indicate # Pattern Example 1 [NP][:][optional DT][NP]  X  X olor : light blue X  3 [!IN][KN]["is" or "are"][NP]  X  X olor is red X  4 [NP][KN]  X  X ed color X  whether x i and x j have both numerical values. Each feature f k has an associated real-valued parameter  X  . The pairwise model is given by: where Z x settings of y ij . This is a maximum-entropy classifier (i.e. logistic regression) in which P ( y ij | x ij ) is the probability that x i and x j are synonyms. To estimate  X  = {  X  k } from labeled training data, we perform gradient ascent to maximize the log-likelihood of the labeled data.

Given a data set in which property names are manually clustered, the training data can be cre-ated by simply enumerating over each pair of syn-onym property names x ij , where y ij is true if x i and x j are in the same cluster. More practically, given the raw set of extracted properties, first we manually cluster them. Positive examples are then pairs of property names from the same cluster. Neg-ative examples are pairs of names cross two dif-ferent clusters randomly selected. For example, let assume that the following four property name clusters have been constructed: { color,shade } , { size,dimension } , { weight } , { features } . These clusters implies that  X  X olor X  and  X  X hade X  are syn-onym; that  X  X ize X  and  X  X imension X  are synonym and that  X  X eight X  and  X  X eatures X  don X  X  have any syn-onym. The pair ( color,shade ) is a positive exam-ples, while ( size,shade ) and ( weight,features ) are negative examples.

Now, given an unseen category C 0 and the set of raw properties (property names and values) mined from that category, we can construct an undirected-weighted graph in which vertices correspond to the property names N C 0 and edge weights are propor-tional to P ( y ij | x ij ) . The problem is now reduced to finding the maximum a posteriori (MAP) setting of y ij s in the new graph. The inference in such mod-els is generally intractable, therefore we apply ap-proximate graph partitioning methods where we par-tition the graph into clusters with high intra-cluster edge weights and low inter-cluster edge weights. In this work we employ the standard greedy agglom-erative clustering , in which each noun phrase would be assigned to the most probable cluster according to P ( y ij | x ij ) . 4.2 Features Given a pair of property names x ij = { x i ,x j } we have designed a set of features as follows: Property name string similarity/distance: This measures string similarity between two names. We have included various string edit distances such as Jaccard distance over n-grams extracted from the property names, and also Levenstein distance. We have also included a feature that compares the two property names after their commoner morphologi-cal and inflectional endings have been removed us-ing the Porter Stemmer algorithm.
 Property value set coverage: We compute a weighted Jaccard measure given the values and the value frequencies associated with a property name.
J ( V x This feature essentially computes how many prop-erty values are common between the two property names, weighted by their popularity.
 Property name co-occurrence: This is an inter-esting feature which is based on the observation that two property names that are synonyms, rarely oc-cur together within the same description. This is based on the assumption that sellers are consistent when using property names throughout a single de-scription. For example when they are specifying the size of an item, they either use size or dimensions exclusively in a single description. However, it is more likely that two property names that are not syn-onyms appear together within a single description. To conform this assumption, we ran a separate ex-periment that measures the co-occurrence frequency of the property names in a single category. Table 2 shows a measurement of pairwise co-occurrence of a few example property names computed over the Audio books eBay category. Given a property name x let I ( x ) be the total number of descriptions that contain the name x . Now, given two property names x i and x j , we define a measure of co-occurrence of these names as:
In Table 2 it can be seen that synonym prop-erty names such as  X  X uthor X  and  X  X y X  have a zero co-occurrence measure, while semantically different property names such as  X  X ormat X  and  X  X ead by X  have a non-zero co-occurrence measure. This section presents experimental results on a real dataset. We first describe the dataset used for these experiments and then provide results for property extraction and property name synonym discovery. 5.1 Data set and methodology All the results we are reporting in this paper were ob-tained from a dataset of several billion descriptions corresponding to a year worth of eBay item (no sam-pling was performed).

For listing an item on eBay, a seller must pro-vide a short descriptive title (up to 80 characters) and can optionally provide a few descriptive name value pairs called item specifics, and a free-form html de-scription. Contrary to item specifics, a vast majority of sellers provide a rich description containing very useful information about the property of their item. Figure 1 shows 3 examples of eBay descriptions. eBay organizes items into a six-level category structure similar to a topic hierarchy comprising 20,000 leaf categories and covering most of the goods in the world. An item is typically listed in one category but some items may be suitable for and listed in two categories.

Although this dataset is not publicly available, very similar data can be obtained from the eBay web site and through eBay Developers API 1 .

In the following, we report precision and recall results. Evaluation was performed by two annota-tors (non expert of the domain). For property ex-traction, they were asked to decide whether or not an extracted property is relevant for the corresponding items; for synonym discovery to decide whether or not sellers refer to the same semantic entity. Anno-tators were asked to reject the null hypothesis only beyond reasonable doubt and we found the annotator agreement to be extremely high. 5.2 Property Extraction Results We have been running the property extraction method described in Section 3 on our entire dataset. The properties extracted have been aggregated at the leaf category level and ranked by popularity (as de-fined in Section 3). Because no gold standard data is available for this task, evaluation has to be per-formed manually. However, it is impractical to re-view results for 20,000 categories and we uniformly sampled 20 categories randomly.

Precision. Table 3 shows the weighted (by cat-egory size) average precision of the extracted prop-erty names up to rank 20. Precision at rank k for a given category is defined as the number of relevant properties in the top k properties of that categories, divided by k . Table 4 shows the top 15 properties extracted for five eBay categories.

Although we did not formally evaluate the preci-sion of the discovered values, informal reviews have shown that this method extracts good quality val-ues. Examples are  X  X /a X ,  X  X ell X ,  X  X torage or well X ,  X  X ould be by well X  and  X  X y well X  for the prop-erty name  X  X ater X  in the Land category;  X  X etal X ,  X  X lastic X ,  X  X ylon X ,  X  X cetate X  and  X  X urable o matter X  for  X  X rame material X  in Sunglasses; or  X  X crylic X ,  X  X il X ,  X  X crylic on canvas X  and  X  X il on canvas X  for  X  X edium X  in Paintings.

Sets of values tend to contain more synonyms than names. Also, we observed that some names exhibit polysemy issues in that their values clearly belong to several semantic clusters. An example of polysemy is the name  X  X ostmark X  in the  X  X ost-cards X  categories which contains values like  X  X one, postally used, no, unused X  and years ( X 1909, 1908, 1910... X ). Cleaning and normalizing values is on-going research effort.

Recall. Evaluating recall of our method requires comparing for each category, the number of relevant properties extracted to the number of relevant prop-erties the descriptions in this category contain. It is dauntingly expensive. As a proxy for name re-call, we examined 20 categories and found that our method discovered all the relevant popular property names.

It is quite remarkable that an unsupervised method like ours achieves results of that quality and is able to cover most of the good of the world with descriptive properties. To our knowledge, this has never been accomplished before in the e-commerce domain. 5.3 Synonym discovery results To train our name synonym discovery algorithm, we manually clustered properties from 27 randomly se-lected categories as described in Section 4. This re-sulted in 178 clusters, 113 of them containing a sin-gle property (no synonym) and 65 containing 2 or more properties and capturing actual synonym in-formation. Note that although estimating the co-occurrence table (see Table 2) can be computation-ally expensive, it is very manageable for such a small set of clusters. Scalability issues due to the large number of eBay categories (nearly 20,000) made im-practical to use the solutions proposed in the past to solve that problem as baselines.

Results were produced by applying the trained model to the top 20 discovered properties for each and every eBay categories. The algorithm discov-ered 10672 synonyms spanning 2957 categories.
Precision. To measure the precision of our algo-rithm, we manually labeled 6618 synonyms as cor-rect or incorrect . 6076 synonyms were found to be correct and 542 incorrect, a precision of 91.8%. Ta-ble 5 shows examples of synonyms and one of the categories where they have been discovered. Some of them are very category specific. For instance, while  X  X p X  means  X  X orsepower X  for air compres-sors, it is an acronym of a well known brand in con-sumer electronics.

Recall. Evaluating recall is a more labor inten-sive task as it involves comparing, for each of the 2957 categories, the number of synonyms discov-ered to the number of synonyms the category con-tains. As a proxy we labeled 40 randomly selected categories. For these categories, we found the recall to be 51%. As explained in Section 4, the overlap of values between two names is an important feature for our algorithm. The fact that we are not cleaning and normalizing the values discovered by our prop-erty extraction algorithm clearly impacts recall. This is definitively an important direction for further im-provements. We presented a method for structuring e-commerce inventory into descriptive properties. This method is based on unsupervised property discovery and ex-traction from unstructured item descriptions, and on property name synonym discovery achieved using a supervised maximum entropy based clustering al-gorithm. Experiments on a large real e-commerce dataset showed that both techniques achieve very good results. However, we did not address the issue of property value cleaning and normalization. This is an important direction for future work.
