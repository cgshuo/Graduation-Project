 Temporal data mining is a rapidly evolving area of research. Similar to other application fields, data segmentation is the fundamental task to temporal data mining. Only after the segmentation, can the subsequent analysis of temporal data, such as clustering, classification and association rules mining, be carried out. Conventionally, temporal data are modelled as time series. To the day, nu-merous approaches for segmenting time series have been proposed [1]. However, with pair-wise comparison strategy, most of them are sensitive to noises. To over-come the drawbacks, this paper proposes a novel temporal data segmentation method based on graph partition model. In the method, multi-pair comparison is performed. Meanwhile, a linear time algorithm is designed by importing the temporal constraints. The experiments show that the proposed approach is more robust than existing ones but less efficient.
 partition model with temporal constraints is introduced. In Section 3, we propose a temporal segmentation algorithm based on the above model. In Section 4, the proposed algorithm is evaluated on the TRECVID benchmarking platform and compared to existing approaches. Finally, the conclusion is made in Section 5. Clustering based on graph partition model has attracted a great interest recently [2]. Although so far there has been no good algorithms of polynomial time for the general graph partition problem, linear time algorithm exists for the one with the temporal constraints. 2.1 Computing Segmentation with Graph Cuts Given an undirected, weighted graph G = G ( V, E ) with a set of nodes V ,aset of edges E . Assume | V | = N , namely, there are N nodes in graph G .Let w ij denote the weight of edge e ( i, j )  X  E , i.e., the similarity between nodes i and j . The larger the w ij , the more similar between nodes i and j . To introduce the graph partition model more clearly, we first present some graph terminologies. A graph with 14 nodes and the related terminologies are depicted in Figure 1. Definition 1. The similarity matrix W is a N  X  N symmetric matrix, in which entry w ij represents the similarity of nodes i and j .
 Definition 2. The cut which divides graph G into subgraphs A and B is defined Definition 3. The association of subgraph A is defined as: assoc ( A )= node and linking an edge between each pair of the nodes. By defining the weight of the edge as the similarity of the samples, clustering can be formulated as a graph partition problem. In this way, the graph partition model helps to define more appropriate criteria. Initially, minimum cut is proposed to be a partition objective function. To avoid skewed cut, other objectives such as ratio cut, nor-malized cut and min-max cut are proposed successively [2]. From the point of view of clustering, min-max cut, defined by Equation 1, which tries to mini-mize the association between the two subgraphs while maximize the association within each subgraph, gives the best criterion: Unfortunately, this problem is NP-complete because of its combinatoric nature. An approximate optimal solution can be yielded by spectral graph theory[2]. However, it still is not able to deal with a huge amount of data because of the large calculation during the process of matrix spectral decomposition. 2.2 Cuts with Temporal Constraints When applied to temporal data, clustering based on graph partition model must satisfy some temporal constraints. For example, in temporal data segmentation, the method should guarantee the temporal continuity of each cluster. More pri-cisely, once two unadjacent samples belong to a cluster, any one between them must be grouped into the same cluster. By importing this temporal constraints, a feasible cut can only occur at one of the N  X  1 possible positions between any two adjacent samples. Thus, the size of feasible set is reduced from exponential to N  X  1, as illustrated in Figure 2. To get the optimal solution, we just need to compute the N  X  1 possible values, and then select the minimum one through a linear search. Formally, we define score ( i ) as the objective function of the i -th feasible cut: Then the cut with minimal score is the optimal solution. In Section 2, we only introduce the problem of partitioning a graph into two subgraphs. To segment data into more than two segments, we can partition the data recursively. In summary, the segmentation algorithm of the temporal data consists of the following steps: Step 1 . Given a data set, construct a weighted graph G = G ( V, E ). Treat each Step 2 . Compute w ij , the weight of each edge, to obtain similarity matrix W . Step 3 . Calculate scores of the N  X  1 feasible cuts according to Equation 2. The Step 4 . Recursively partition the segmented sequences if necessary. as [2]: where r is the size of the active weight matrix, outside of which the entries contribute little to objective function. Meanwhile, it is not necessary to involve all the entries while computing each score . Different from Equation 2, we redefine is constrained in a matrix of size r  X  r . With a temporal sequence of length N , considering the overlap of two successive active matrices, the overall time complexity is O ( Nr ). Compared with spectral clustering methods, it is much more efficient.
 makes decisions via multi-pair comparison strategy. As shown in Figure 3, the third sample is affected by noises and varies greatly from the second one. The methods based on pairwise comparison may consider it the boundary of two different segments and thus cause an over-segmentation. While with the proposed approach, the strong connectivity among the samples before and after the third one makes it unlikely to separate the sequence to two parts. Noises disturb the segmentation little. In this section, the proposed approach is implemented to perform video temporal segmentation and evaluated on the TRECVID benchmarking platform [3]. The 2003 test collections for shot boundary detection task is used for training, and the 2004 collection for testing. F 1 measure is adopted to rank the performance of the different algorithms [6]. Two graph-based methods and two non-graph ones are implemented for comparison, and they are: 1 . Fixed Threshold : Directly compare content variation with an appropriate 2 . Sliding Window : Employ a window of width 2 w + 1 to slide along the 3 . Graph+Fixed Threshold : Directly compare the score with an appropri-4 . Graph+SVM : Firstly, the 3-rd approach with a low enough 2 is employed ples are used to train SVM of a Gauss kernel function. The training process spends about 481 seconds and 1308 support vectors left. After the training on 2003 data set, the best parameter settings for each method are as follows: =0 . 85 for Fixed Threshold, w =4 and  X  =3 . 0 for Sliding Window, r =10 for both the graph based methods, 2 =0 . 18 for Graph+Fixed Threshold, for the SVM method,the standard deviation std =1 . 0. Their performance on the 2004 data set is depicted in Figure 4 and the elapsed time is in Table 1. Of the 12 videos, the fifth and the seventh video have more abrupt illumination changes and more great object or camera movement. As Figure 4 shows, non-graph based methods suffer evident drops of performance over these difficult videos. Both the graph-based methods perform excellently and robustly. In Graph+Fixed Thresh-old, even employing a single global threshold 2 , the performance is comparable to that of Sliding Window. Graph+SVM method performs best on all the videos but spends about three times of time more than non-graph based ones. In this paper, we propose a novel robust temporal data segmentation algorithm based on graph partition model. The method segments temporal sequence via multi-pair comparison strategy, and therefore is more robust to various noises than the existing pairwise comparison ones. By importing temporal constraints, linear time algorithm is designed to seek the optimal graph partition. The ex-periments on the TRECVID benchmarking platform show that the proposed approach is more robust. However, this paper has only focused on detecting abrupt transitions. To deal with gradual transitions, incorporating multi-scale strategy may be a promising direction.

