 Region-oriented queries have been recognized as important operations in many queries X  , and the dense region can be identified by examining whether its den-sity exceeds a density threshold. The previous work STING [6] conducted a study on speeding up the process of answering region-oriented queries by constructing an index structure to capture the statistical information of the data. Thus the accessing the raw data.
 may not exceed the density threshold. Therefore, discovering dense regions over in data.
 named  X  X emporal dense region query X  to address the dense region discovery in as (6AM  X 8AM) and (9AM  X 10AM). The problem of temporal dense region query the direct extension of their methods would be to delay the construction of in-for an interactive query environment. To the best of knowledge, despite of its importance, the problem of temporal dense region query had not been explicitly studied before.
 framework (abbreviated as QED ), to execute temporal dense region queries. The QED framework consists of two phases: (1) an offline maintaining phase, to maintain the summarized structures of the evolving data; (2) an online query processing phase, to provide an efficient algorithm to execute queries on the summarized structures. Note that since the query processing is only applied to the summarized structures rather than to the original data points, the QED framework proposed is very efficient in practice. Furthermore, in order to sup-interest, where the time slots are derived by segmenting the data into a number which can be separated or not. However the queried time periods are unknown ecuted efficiently in the online phase. Therefore a novel summarized structure, has the property that a number of RF-trees can be merged with one another RF-tree derived by merging the RF-trees with respect to the queried time slots. As validated by our experiments, the QED framework performs very efficiently while producing query results of very high quality.
 of temporal dense region query is explored. The offline maintaining phase of the QED framework is presented in Section 3, and the online discovering phase is described in Section 4. In Section 5 the empirical studies are conducted to evaluate the performance of QED. This paper concludes with Section 6. 2.1 Problem Description There are two concepts in the temporal dense region query: one is the dense region; the other is the set of time intervals to be queried for dense regions. In this paper, we use the grid-based approach to discover the dense regions. cells which are obtained by partitioning each of the d dimensions into  X  equal-predetermined density threshold  X . Thus based on these dense cells, the dense regions will be formed by a set of connected dense cells.
 specify a variety of time periods of interest. These time slots are obtained by Thus the time period specified in the query will be represented by one or some separated time slots.
 Problem Definition: (Temporal Dense Region Query) those data points contained in the queried time slots, where each of the dense regions is formed by a set of connected dense cells with the number of data points in each of them exceeding  X . 2.2 Overview of the QED Framework A  X  X uerying tEmporal Dense region X  framework (abbreviated as QED) , is pro-posed in this paper to deal with the temporal dense region query. The QED framework consists of two phases: (1) an offline maintaining phase, to maintain poral dense region queries on the summarized statistics.
 Phase 1: Offline maintaining phase data such that queries can be executed on the summarized information instead of the original data points, thereby enabling the dense region discovery to be very efficient. It is a two-step approach described as follows: Step1: Partition the data set: The data set is partitioned into time slots . Step2: Construct the RF-tree: For each time slot, a summarized structure, has the advantage that a number of RF-trees can be merged with one another time slots can be obtained by combining the corresponding RF-trees, and then queries can be executed on the combined RF-tree.
 Phase 2: Online query processing phase When the user issues the queries, it is the main task of the online processing step approach: Step1: Combine the RF-trees: Those RF-trees in the queried time slots are combined into a RF-tree by an efficient algorithm to describe in Section 4.1. Step2: Execute the query: The query is executed on the combined RF-tree the query. the uniform region which is discovered in the RF-tree for summarizing the cells in the data space. The algorithm for constructing the RF-tree will be described in Section 3.2. 3.1 The Definition of the Uniform Region regions which are defined as follows: Definition 1 (region): A region in the d-dimensional data space is defined by the intersection of one interval from each of the d attributes, and can be A d &lt;h d ) .
 Definition 2 (region feature): A Region Feature of a region R in the d  X  of cells.
 become smaller. Therefore, if the cells in a region have nearly the same number approximately uniformly distributed in it. Such a region is called as  X  X niform technique. The entropy is in essence a measure of the uncertainty of a random variable[2]. When the random variable follows the uniform distribution, we are ( N Therefore the entropy of the region R , H ( R ), can be defined as follows: Definition 3: (entropy of a region) outcomes of this random variable [2]. Analogously, the maximum entropy of a region R is defined as follows: Definition 4 (maximum entropy of a region): As defined above, N c is the num-ber of cells contained in the region R . The maximum entropy of the region R is defined as follows: Definition 5 (uniform region): A region R is a uniform region if 3.2 Algorithm for Constructing the RF-Tree discover the uniform regions by summarizing the cells in the data space. a region in the data space, and the node in level i corresponds to the union of whether it is a uniform region by applying the Definition 5 with the similarity threshold  X . Thus, if it is examined as a uniform region, it will become a leaf node; otherwise, it will be a nonleaf node and its children will be derived by the interval of each of the dimension of this region into two intervals. The main task of the online query processing phase is to execute the query by queried time slots. Section 4.1 introduces an efficient algorithm for combining executed on the combined RF-tree, which is described in Section 4.2. 4.1 Algorithm for Combining the RF-Trees In the following, algorithm COMB (combine RF-trees) outlined below is to combine two RF-trees, and it can be easily extended to deal with more than two RF-trees. Algorithm COMB is a top-down approach. Let the roots of the two RF-trees be denoted as r 1 , and r 2 , and the root of the combined RF-tree and Step 5, the RF (Region Feature) of r b is set up according to the RF of r 1 children of r b by taking r 1 ,r 2 , and r b as its inputs n 1 ,n 1 , and n b . only one of n 1 and n 2 is uniform (Step 26 to Step 38). into consideration such that n b will be a uniform region. Thus, procedure SC terminates. at most 2 d children. In Step 7, the 2 d children of n b are first generated by the same region of C are identified. Then, in Step 12 to Step 24, the RF of C corresponding children of C 1 by calling procedure AC (Assign Children), and C 1 and C 2 . that n 1 is non-uniform and n 2 is uniform such that n 1 will have at most 2 d 31, for each child C, C.p denotes the average number of data derived from the will be further averaged to the children of C if C will have children set up in procedure AC .
 RF-trees. It will terminate if Case 1 is encountered as shown in Step 3, or n 1 and n 2 are cells as shown in Step 1.
 Algorithm COMB: Combine RF-trees Input: RF-tree1, RF-tree2 Output: the combined RF-tree 1. // r 1 is the root of the RF-tree1, r 2 is the root of the RF-tree2 2. // r b is the root of the combined RF-tree 3. r b = entire data space 4. r b .N R = r 1 .N R + r 2 .N R 5. r b .N c = r 1 .N c 6. SC( r 1 , r 2 , r b ) Procedure SC: Set up Children Input: (node n 1 ,node n 2 ,node n b ) 1. if ( n 1 is a cell &amp; n 2 is a cell) 2. return 3. if ( n 1 is uniform &amp; n 2 is uniform) { //Case 1 4. return 5. } 6. else if ( n 1 is non-uniform &amp; n 2 is non-uniform) { //Case 2 7. Generate 2 d children of node n b 8. For each child node C 9. C.N c =( n b .N c ) / 2 d 10. C 1 = the child of n 1 with respect to the same region of C 11. C 2 = the child of n 2 with respect to the same region of C 12. if ( C 1 == null &amp;&amp; C 2 == null) 13. remove the chid node C from n b 14. else if ( C 1 ! = null &amp;&amp; C 2 == null) 15. C.N R = C 1 .N R 16. C.p =0 17. AC( C 1 , C ) 18. else if ( C 1 == null &amp;&amp; C 2 ! = null) 19. C.N R = C 2 .N R 20. C.p =0 21. AC( C 2 , C ) 22. else 23. C.N R = C 1 .N R + C 2 .N R 24. SC( C 1 , C 2 , C ) 25. } 26. else { // Case 3 27. // Suppose n 1 is non-uniform, and n 2 is uniform 28. Generate 2 d children of node n b 29. For each child node C 30. C.N c =( n b .N c ) / 2 d 31. C.p =( n 2 .N R ) / 2 d 32. C 1 = find a child of n 1 with respect to the same region of C 33. if ( C 1 == null) 34. C.N R = C.p 35. else if ( C 1 ! = null ) 36. C.N R = C.p + C 1 .N R 37. AC( C 1 , C ) 38 } Procedure AC: Assign Children Input: (node n 1 ,node n b ) 1. if ( n 1 has no children) 2. return 3. else 4. For each child node C 1 of n 1 5. Generate a child C with respect to the same region of C 1 6. if ( n b .p !=0) 7. C.p =( n b .p ) / 2 d 8. else 9. C.p =0 10. C.N R = C 1 .N R + C.p 11. C.N c = C 1 .N c 12. AC( C 1 ,C ) 4.2 Execute the Temporal Dense Region Query After the combing process, the query will be executed on the combined RF-tree. Initially all leaf nodes in the combined RF-tree are examined to discover the in this uniform region will have the same average number of data points, i.e. N if the value of N R /N c exceeds the density threshold  X , and then this uniform region will be put into the queue.
 grouping the connected ones in the queue. This can be executed by a breadth-first search. Each time we take out a leaf node n i from the queue, and examine taken out from the queue, and then the rest nodes are recursively examined on whether they are connected to the previous identified nodes. Finally, the leaf nodes connected to n i will become a dense region.
 5.1 Quality of the RF-Tree To evaluate the quality of the RF-tree, we generate a two dimensional data set of 5000 data points, and  X  is set to 16. The density threshold  X  is set to 1.1 From Figure 1, it is seen that the RF-tree is able to successfully discover the dense regions and the query result is very close to the expected one. 5.2 Performance of Combining RF-Trees of 25,0000 data points from the UCI KDD Archive [3] with three attributes, i.e. age, income, weight. The total data points are partitioned into five time slots W 1 ...W 5 such that there are 50000 data points in each one. We test the performance with queries with the number of queried time slots varying from in each cell under uniform distribution.
 number of time slots. The execution time for queries with the same number of time slots is averaged. In this experiment, STING is extended to deal with the temporal dense region queries with two steps: (1) constructing their proposed index hierarchy on all data in the queried time slots, and (2) using the index hierarchy to answer queries. As shown in Figure 2(a), QED outperforms the extended STING algorithm about by very prominent margin. Note that with the efficient combining procedure for the RF-trees, the execution time of QED only slightly increases when the number of queried time slots increases. the qualities of query result of the QED framework. Recall is defined as the percentage of the expected dense cells identified by QED. Precision is defined as the percentage of the dense cells identified in QED truly dense expectedly. shown in Figure 2(b), all of the expected dense cells are discovered by QED QED as expected, and the precisions are very close to 1. Moreover, QED is still remain very close to 1 as shown in the figure. Therefore, as validated in these experiments QED is effective and efficient for temporal dense region queries. dense regions in the queried time slots. We also propose the QED framework to execute temporal dense region queries. QED is advantageous in that various ported by using the concept of time slot and proposed RF-tree. With the merit of the efficiency of combining RF-trees, the QED framework scales well with respect to varied number of time slots. As evaluated by the synthetic and real data, QED is powerful in discovering the dense regions and outperforms prior methods significantly.
 Acknowledgements. The work was supported in part by the National Science Council of Taiwan, R.O.C., under Contracts NSC93-2752-E-002-006-PAE.
