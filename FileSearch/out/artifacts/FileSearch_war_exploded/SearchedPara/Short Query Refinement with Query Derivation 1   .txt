 One of the major challenges for present-day IR systems and search engines is the short query problem, namely, the users have become more and more accustomed to submitting short queries that consist of very few keywords, which are typically of broad use and meanings, and thus often include many possible purposes. Since the current mainstream technology of IR systems and search engines is keyword-based document indexing and retrieval [1], the returned results in response to short queries comprising ambiguous keywords are often heterogeneous in topics, genres and quality, which makes great difficulties for the users to ef ficiently find interested information. For example, the query  X  X irus X  (or  X  X otebook X ,  X  X p3 X , etc.) is a highly ambiguous search query, with which different users may express very different meanings: the search for biologic viruses, or a computer virus (software); and for each of the possible meanings, there may be various kinds of usage, e.g., in the computer virus case, the user X  X  search topic may be one of multiple possibilities: virus prevention, download of virus cleaning software, virus library updating, elements of computer viruses, etc. 
Some search engines and enterprise retrieval systems have employed a method to address the short query problem, which is called query refinement , or equivalently, that, when a submitted query is very ambiguous, the system will indicate that the user may try a few more refined, narrowed and less ambiguous queries for better results. Such method can be very helpful in many scenarios, especially when the user has only some vague idea to search. Although such query refinement method may handle the short query problem successfully to some extent, the method has not been popular in mainstream applications. 
In our opinion, this may be due to several limitations and shortcomings associated with such kind of query refinement. First, the refined, related, similar or suggested queries are usually queries that were submitted by other users in the search log, instead of mining from document contents, and hence may be still heterogeneous in topics. Understanding, properly selecting and retrying these refined queries would provide significant additional difficulties and burden to the user. Second, such refined queries are not utilized to generate or improve the final results presented to the user, and hence refined queries per se are obtained by keyword matching against the original short query, and thus are unrelated or not grouped in meaning, or still very ambiguous. The user would have to face many more longer but unrelated queries. With these and other reasons, current query refinement tends to be insufficient for handling the short query problem. 
In this paper, we present a new method for short query refinement. The method includes a query retrieval model that constructs multiple derived queries for the user X  X  query, where derived queries denote a set of queries that are closely related to the query submitted by the user. Each of the derived queries may represent a more specific meaning or a more concrete form of usage of the user X  X  query. Derived queries are obtained from many sources (including document contents) and can be efficiently obtained using the indexing and retrieval of a small-unit index. Each of the derived search query, its frequency of search, the number and ranks of the documents in its corresponding search results, etc. Describe that derived queries can be employed to improve or supplement the current query refinement method, or to provide a new mechanism for constructing the final results to return to the user. In this paper, we use derived queries to denote a set of queries that are closely related to a search query submitted by the user. Each of the derived queries represents a more specific meaning, or a more concrete form of usage, or a derived or auxiliary semantic, or a collocation with other associated words of the user X  X  query. For a given query, to obtain its derived queries effectively, a query set consisting of a large number of candidate queries, called a candidate query set , can be pre-constructed, wherein each of the queries may be used as a derived query of some search query. Such query sets can be constructed by extracting candidate queries from multiple sources, using semantic dictionaries, collocation libraries, phrase rules, document contents and corpus statistics, in addition to mining the user search query logs. The resulting candidate query set may consist of millions of candidate queries to sufficiently cover most of the closely related forms of each of its elements. 
With such a candidate query set, the process to obtain the derived queries of a given query becomes the process to find out its closely related candidate queries from the candidate query set, corresponding to various synonyms, semantic equivalents, ambiguous forms and collocations. There are multiple methods that can be used to implement such a lookup process. Since the number of query strings in the candidate query set may be very large, for the reason of efficiency, a special candidate query retrieval method using small index units can be employed, which comprises the following steps: index lexicon including only small index units; candidate queries, and via the inverted index of the candidate query set, selecting the candidate queries with a certain similarity with the search query. 
The retrieval method actually used for selecting similar candidate queries can be one of any retrieval models well known in the field, such as the Vector Space Model (VSM) method is the use of small (fine-grained) index units for the indexing of the candidate query set. In order to perform the retrieval of synonymy and equivalent use, the document vectors corresponding to candidate queries can be transformed into a set of semantic index units, which comprises the semantic classification tags of the entries of the above fine-grained index lexicon. With such transformation, the index terms are changed to the semantic classification tags , and the inverted index may be accordingly built with these tags. Such retrieval method is a semantic-based retrieval model. 
The semantic classification system used for indexing the candidate query set can be adapted from the lexical sense set of the WordNet project [4], where a semantic classification tag is denoted by a synset (synonym set). WordNet identifies a large number of semantic classes for commonly used words and denotes them with well-formed numerical tags, and further organizes these semantic classes with multiple semantic relations. Currently there are multilingual versions of the WordNet database [5], which can be used to support multilingual query derivation. 
The sense space of the candidate query set is constructed with the synset_id s being its dimensions. For example, if some query Q containing the word  X  X ank X , then Q will have non-zero components in the above 17 dimensions corresponding to the synset_id s of the word  X  X ank X . The concrete value of a component is determined by the term weighting method of the model. In this paper, the conventional VSM weighting scheme of  X  X erm frequency -inverse document frequency X  ( tf x idf weighting) is adopted to determine the component values on the sense dimensions, with the index term being the sense tags synset_id s, and thus the term frequency tf being the sense frequency sf . The similarity of any two candidate queries Q i and Q j , denoted by sim( Q i , Q j ), is measured by the cosine of the angle between their vectors on the sense space, 
As in conventional case, such similarity may be further adjusted by other factors like term proximity, Boolean relations, etc. In addition, other term weighting schemes and similarity measures may be adopted the same way. 
With such settings, the process of selecting multiple derived queries with a user X  X  search query Q would comprise the following steps:  X  Decomposing the query Q into small index units using the special index lexicon;  X  Looking up the inverted index of the candidate query set using Q  X  X  small index units to obtain a set of relevant candidate queries;  X  Computing the similarities of these relevant candidate queries with Q using the derived queries of Q , which have the largest similarity values (or have a similarity value that is larger than a given threshold). elaborated above, the search results of any Q i of these derived queries can be individually constructed according to the conventional document retrieval processing, and then a search result list of Q i is generated by sorting the results by their estimated similarities with the query Q i . The number of derived queries, however, may be very large, usually around the scale of thousands, namely n ~ 10 3 . It would take an exceedingly long time of processing if all the search results of these derived queries are individually constructed. On the other hand, the number of queries that can be simultaneously processed by the retrieval system is limited. Thus it is usually To make the query derivation method practical, each of the derived queries Q 1, ..., n can queries with higher ranks are selected to actually generate a search result list for each query. In the following, the ranks of the derived queries Q 1 , Q 2 , ..., Q n of a search query Q are denoted by QueryRank( Q i | Q ), i= 1, 2, ..., n . QueryRank( Q i | Q ) represents the priority degree that the system presents the derived query Q i together with its search results when the user X  X  search query is Q . The rank QueryRank( Q i | Q ) can be simply defined to be the similarity of the queries Q and Q, QueryRank 1 ( Q i | Q ) = sim( Q i , Q ) . 
In a more comprehensive implementation, QueryRank( Q i | Q ) would be determined search log of a search engine: where a and b are two adjustable parameters, representing the importance of the function v ( f ) takes a linear form as follows: document frequency (number of documents containing Q i ) in current document collection of the query Q i , and N is the total number of documents in the collection. 
After obtaining the derived queries Q 1 , Q 2 , ..., Q n of a user X  X  search query Q , the QueryRank 2 . In the first time of user interaction, the first group of the top m &lt; n derived queries Q' 1 , Q' 2 , ..., Q' m with higher ranks are selected to search the inverted index of the document collection, and a search result list is generated for each of them. In the second time of user interaction, when user chooses to look up more following derived selected and processed accordingly. So on and so forth. In our system, the range of m is among 5 ~ 15, which is the number of derived queries that are selected to actually generate search results at each time. The above mechanism of query derivation can be used in many applications. The first application would be a useful method to improve or supplement query refinement currently equipped in some IR systems. Another important application is to provide a new mechanism for constructing the final results to return to the user. In this section, we present a brief description of these two applications. 
Using the query derivation method as presented above, we design a Chinese short query refinement prototype system. For an input query, the system searches its derived queries with word senses as index terms. The sense set mostly consists of the top 2 level synsets of a Chinese version of WordNet [8]. For an input query Q =  X   X  X  X  (virus) X , its derived query list is returned as follows: where the rank of each derived query Q i is determined with QueryRank 1 ( Q i | Q ) above, which is the similarity of Q i and the original query Q . The rank values are normalized to be a percentage. As opposed to conventional query refinement, the candidate queries used by the system are constructed from many sources (including dictionaries and corpus statistics), and are indexed by word senses. The derived queries can be grouped (classified or clustered) with respect to word senses at different levels. Thus the user may use the system for better and comprehensive understanding of short queries. 
Derived queries can also be used to generate, organize or present the search results mechanism for grouping the search results, which presents top-ranked derived queries together with their search results to the user, such that derived queries with higher ranks and top-ranked documents of each derived query are preferentially presented. The final result list may be ordered with the above ClassRank( Q ' j | Q ) values determined for each hopefully in a more efficient manner. (The details of such application are beyond the scope of this paper and will be described elsewhere.) In this paper, we present a new method for disambiguating short queries. It uses a query retrieval model that constructs multiple derived queries for the user X  X  query, which may represent more specific meanings or more concrete forms of usage of the original query. Derived queries can be efficiently obtained using the indexing and retrieval of a small-unit index, which has index terms that are commonly used words and word senses. Each of the derived queries can be associated with a rank value according to its similarity to the user X  X  search query. We believe that derived queries are useful for improving the current query refinement method and for constructing the final results. In our future work, we will apply this query derivation method to a large-scale Web search engine to present better search results. The work described here was supported by National Natural Science Foundation of China (No. 60435020 and 60475020). 
