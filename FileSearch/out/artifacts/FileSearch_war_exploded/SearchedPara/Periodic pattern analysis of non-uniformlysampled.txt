 Department of Computer Science, University of Calgary, Calgary, AB, Canada 1. Introduction
A time series records features captured regularly at uniform interval of time. Real life has several examples of time series such as weather record, stock price movement, road or network traf fi c density pattern, sensory data, transactions record, etc. Time series database records such time ordered features and data mining aims at discovering in the database hidden information which can not be found by clas-sical database query languages like SQL. Often the information is in the form of patterns which may lead towards some sort of rules. For instance, association rules mining discovers patterns in which various data items appear together and then try to formulate some rules based on the discovered association.
Periodicity detection in time series databases is a data mining problem where periodically repeating patterns are discovered. Periodic patterns are found in weather data, transactions history, stock price movement, road and computer network traf fi c density, gene expression [28,29], etc. Periodic pattern which occur at unexpected time.
There are quite a few algorithms for periodicity detection targeting the problem with fourier or wavelet transforms [3,6], information theory [36], time warping [4] and max-sub pattern trees [5,10,12]. All of these approaches assumes that the data has no missing values and it is collected uniformly at regular most just ignore any missing value assuming that missing values are neither regular nor abundant in the data. Our analysis of stock market data reveals that this assumption does not hold with many datasets. In stock market data, recording 14 daily features, there are a large number of missing values for scheduled and an-scheduled holidays. Ignoring these missing values (treating Monday as the next day after Friday just as Wednesday is the next day after Tuesday) deteriorates the quality of result and fails to highlight some interesting patterns. We, therefore, analyze the periodic patterns in the non-uniform stock market data in this paper.

A time series is usually discretized before applying the periodic pattern mining and other data mining techniques [1 X 5,10]. The discretization process transforms the time series into a series consisting of a fi nite set of symbols. For example if weather data has temperature values ranging from  X  50 to +50 then a s = cddecbbac .

A time series may exhibit different types of periodicity; for example, a single symbol is periodic For instance, in s = abcabcabcabc , beside others symbol a and pattern bc are periodic with period value 3 while the series itself has full-cycle periodicity for the pattern abc.

Periodicity detection in time series is a very diverse problem in terms of what to discover and where in the series. A time series may have periodic patterns of any length, patterns can be repeating with any period value, the periodicity may start from any position in the time series and a pattern may stop exhibiting periodicity at any point. The problem becomes more challenging when the time series is The task becomes more challenging once the discovery of surprising (interchangeably called unusual or periodicity detection algorithms, and hence we bene fi t from our experience to expand into the discovery of periodic patterns in non-uniformly sampled data.

In this paper, we analyze the 10 years of stock market data to see if there is any periodicity in any of the recorded features. We analyze different ways of handling the non-uniformity of the data including the data that lead towards better understanding of the stock growth as well as may help in forecasting the future trend. The contributions of the paper include 1) A suf fi x tree based time ef fi cient periodicity detection algorithm that can detect symbol, sequence 2) Analysis of non-uniformly sampled data by considering (not ignoring) the missing values, 3) Detailed analysis of 10 years of stock market data to detect periodicity in different times and how 4) Detection of periodicity of missing values and patterns involving missing values.
 We believe that such analysis of non-uniformly sampled data has large number of applications in data mining and forecasting of future trends.

The rest of this paper is organized as follows. Section 2 covers the related work. The periodicity detection background and techniques to handle non-uniformly sampled data are presented in Section 3. Section 4 presents the periodicity detection approach, Section 5 present and analyze the experimental results while Section 6 presents the conclusion and directions of future work. 2. Related work
Although non-uniformly sampled data exists in several areas including network streams, signal pro-cessing, gene expression data in bio-informatics, time series, etc.; but the analysis of such data has not got the attention that it deserves. Researchers in different domains have highlighted the importance of such analysis. In [41], authors present an algorithm for producing fi xed-frequency time-series data using an input source of non-uniform sampled counter values, such as performance metric counters gathered from network devices or host resources using SNMP or other monitoring techniques. The authors try to output data at a uniform interval by estimating the frequency rate of the data mainly for network mon-itoring tasks and pipelining problems. In [42], non-uniform sampling in statistical signal processing is studied. The main idea is to use information about the stochastic sampling process to calculate a priori properties of approximate frequency transforms. The authors emphasize the need of methods to work with non-uniformly sampled signals. In [43,44] authors highlight the non-uniformly sampled gene ex-pression data in bio-informatics. Miika et al. [43] presented a periodicity detection algorithm for such non-uniformly sampled data. Their algorithm is based on statistical Fisher X  X  g-test and like many other ing method for non-uniformly sampled time series of gene expression data [44]. Their results show that such clustering performs better than classical clustering methods of uniformly sampled data especially in case of gene expression data. Joseph et al. [45] and Prabhu Babu et al. [46] presented several methods for non-linear and spectral analysis of non-uniformly sampled data. Prabhu [46] reviews four methods such as methods based on least squares, methods based on interpolation techniques, methods based on slotted resampling, and methods based on continuous time models.

All of these highlight and signify the need for the analysis of non-uniformly sampled data in different domains by using specialized methods. The trad itional methods assume non-uniform sampling as some sort of noise which does not have any regularity or does not add any information in the analysis. We, like many others mentioned above, argue the need of exclusive techniques to analyze non-uniformly sampled data especially for periodic pattern mining.

For periodicity detection in time series and sequence data, there are several algorithms that discover the frequent periodic patterns having (user speci fi ed) minimum number of repetitions or with minimum con fi dence (ratio between number of occurrences found and maximum possible occurrences), e.g., [3 X  6,10,11]. However, there is hardly any periodicity detection algorithm that attempts to fi nd periodic patterns in non-uniformly sampled data. Our algorithm being based on STNR [33] is fl exible to work of time series.
 some detect only symbol periodicity [3], and some detect only sequence or partial periodicity [10], while then check the time series for the patterns which are periodic with that period value. Providing such pattern. Our algorithm detect all embedded periods in the considered data and report the strength and coverage of all periodic patterns without any user provided expected period value. 3. Periodic patterns in non-uniformly sampled series  X  background
Here we start with the basic terminology of periodic patterns and then we will discuss the non-uniformly sampled series. Since, the proposed technique is based on our STNR algorithm [33], it is important to explain the terminology used in STNR and other relevant algorithms. We want to to intro-duce the handling of non-uniformly sampled series as a plug-in component of the general periodicity detection system where the user may search for periodic patterns in both uniformly and non-uniformly sampled series just by adjusting few parameters and by selecting different measures of the strength of the periodic patterns. 3.1. Periodicity detection ( | s | = n ) whose symbols are taken from the alphabet set  X  , where each symbol represents a range of values within the time series. A pattern X is a substring of length | X | from string s , 1 | X | 1 2 n .A pattern X is periodic starting from index position i s if and s [ y, z ] is a substring of s of length z starting at y .If f max is the maximum possible repetitions (frequency or support) of the pattern X within the range i and f is the actual number of repetitions (frequency or support) in the given range then the con fi dence (or relative support) of the period is calculated as: For example, consider the following string s ,
Pattern X = abc is repeating in s periodically with period: p =4 , starting at position i ending at position i f period, X ,is conf ( abc, 0 , 26 , 4) = 6 7 . Similarly, we have another period X = abcd , | X | =4 , i i threshold conf min , i.e.,
Existing literature attempts to identify three types of periodicity, namely symbol, sequence (or partial), and segment (or full-cycle) periodicity. As per the terminology de fi ned above, a time series is said to have the symbol periodicity for symbol c ,if | X | =1 and X = c ; and we have some frequent periodic pattern ( X = c, i has the symbol periodicity for symbol a , ( X = a, i i
A periodic pattern X is called partial periodic pattern (or the series is said to have sequence period-icity) if | X | 1 and X consists of symbols taken from  X   X  ,where  X  denotes a don X  X  care or any symbol, i.e., it may be fi lled by any symbol from  X  . For example, the time series s , has the partial periodic pattern a  X  d with the characteristics ( X = a  X  d, i Another partial periodic pattern is ab with the characteristics ( X = ab, i is obvious that symbol periodicity is just a special case of sequence periodicity where the length of the periodic pattern is strictly 1( | X | =1) .Wehavede fi ned the symbol periodicity separately to keep the terminology consistent with the existing work.

Finally, a time series is said to have the segment (or full-cycle) periodicity with pattern X and period p if | X | = p and the pattern repeats periodically throughout the time series. For example, the following time series s , exhibits the segment or the full-cycle periodicity with p =5 ,and X = ababc ;thecon fi dence is computed as conf ( X = ababc, i p =5 ,and X = aba  X  c with conf ( X = aba  X  c, i periodicity can be considered as a special case of sequence periodicity where the pattern size equals the and terminating at any position, repeating with any period value. 3.2. Non-uniformly sampled series
Most periodicity detection techniques assume that the data is collected uniformly at regular/uniform interval of time. Hence the time difference between any two consecutive feature values is always same throughout the time series or data sequence. While this assumption holds for some datasets, it is not business day and hence there are missing values for scheduled and unscheduled holidays. This means that each week or a month in the data does not always have same number of days. Most weeks have fi ve working days but there are quite a few which only has 3 or 4 working days. Ignoring the information of such missing data may lead to misleading, incorrect and complex results for periodicity detection. For example, when a trivial algorithm reports that the data has 5 days of periodic pattern starting from 2nd Monday of July 2001 to April 2005, this does not necessarily mean that every 5th data instance is a Monday because there might be some missing days (holidays) between July 2001 to April 2005. Also for a periodicity detection algorithm to detect as it would assume or expect every fi fth day to be the same Week day (all Mondays, all Tuesday, and so on). Although the handling of such non-uniformity is not very complex but ignoring this would decrease the signi fi cance of data mining results by great deal. To the best of our knowledge, no reported periodicity detection work in data mining has discussed such non-uniformly sampled series. In the following, we will present several ways to handle with such data to ef fi ciently mine the periodic patterns. Non-uniform sampling can be dealt in two broad ways; 1) without changing the original series and 2) modifying the original series and transforming it to uniformly sampled series. 3.2.1. Handling non-uniform sampling without changing the original series series is read only and the series is too large to duplicate with missing values, another reason could be that there are too many missing values that converting it to uniformly sampled requires much larger and processing the comparatively large series will take much more time for algorithms to process. On the downside, dealing with original, unchanged series requires special algorithms and this way we can approaches are highlighted in the next subsection where we discuss the conversion from non-uniformly sampled series to uniformly sampled series. 1) Handling with the time tolerance techniques: Some of the existing algorithms (including our algorithm) [4,33] have the concept of time tolerance window where periodic instances are allowed to deviate within the time tolerance window. For example, in series s period 3 starting at position 0. But if we have the time tolerance of say  X  1 then positions 7 and 10 can window (  X  1 ) of next expected position 6. This a pproach works well when the re is occasional noise in the system. But since in case of non-uniform sampling the entire pattern from one occurrence to the other is changed, this approach is not expected to perform well and detect all the periodic patterns. For example, the pattern of fi rst week might bbccb , for second week bccb and for third week bbcb . Since the patterns with each instance is changing, they would not be counted in these algorithms as the occurrence of the same periodic patterns. In fact, these approaches are designed to handle the insertion and deletion of using this approach is there are well established algorithms that can be directly applied to the series with appropriate time tolerance settings. 2) Recording time instance with feature value (convert sequence to series): The other approach is to record the time instances with the feature values thus converting the data sequence into data/time series. Let s s which event e algorithms. It requires recording the time values in the underlying structure and to process accordingly. For example in our suf fi x tree based algorithm, the time values are to be recorded with each leaf node and passed to parent nodes when constructing the occurrence vector. The occurrence vector is then disadvantage of using this approach is that it at least doubles the size of underlying structure (suf fi x tree in our case) by recording the extra timing information. Hence it is not advisable to use if the total missing values are estimated to be less than the original series size. 3.2.2. Transforming non-uniformly sampled data to uniformly sampled data
In this subsection, we discuss approaches which can be used to transform the non-uniformly sampled series to uniformly sampled series for the task of periodicity detection. The advantage of using this type of approach includes 1) It does not require new algorithms and existing already established algorithms can be directly 2) It generally performs better when the noise or missing values in the data are not too many, 3) In certain cases (described in the second technique below) it provides more useful and meaningful The disadvantage is it requires preprocessing which generally means an extra scan of the data but it could be avoided if online algorithms are used. Another problem with these approaches is that they increase the size of the data which requires more processing time but if there is not too much noise (missing values) in the system, these approaches performs well. 1) Interpolation to introduce missing values: The fi rst straight-forward and trivial approach is to interpolate the series to introduce missing values. For this purpose many interpolation, approximation and curve fi tting techniques can be employed . The missing values will be introduced as the approximated values with respect to the surrounding values. Once the interpolation is completed, all existing periodic pattern mining algorithms can be utilized. Again an extra scan is not always required as the missing values can be substituted on the fl y or when online algorithm is used. The problem arises when the missing values are not produced as a result of random noise but are introduced systematically, have some is applied to introduce approximate values for weekends and holidays as well then it would be dif fi cult (or even impossible) to contrast working days with holidays. But in datasets where there missing values are random, this approach might be useful. 2) Introducing a special symbol for missing values: Finally missing values can be dealt by intro-ducing a special symbol in the data that exclusively identify the missing values. For instance if we have series S with If X represents the missing value then S can be transformed into a sequence S such as or
With this transformation, all the existing periodic pattern mining algorithms can be applied. This approach is very interesting, it now clearly identi fi es where exactly is the missing value. For example, in series S above, one can see that the pattern abXc has 2 repetitions at positions 0 and 9, hence differentiating the fi rst and third occurrences of abc with the second one in original series S .More interestingly it can be used to detect the periodicity or regularity of missing values. For example, in series S above, every third event is a missing value and the missing values (symbol X ) itself has the in certain series such as every event followed by two missing values is y or the pattern pqr is always followed by one missing value if we detect periodic pattern to be pqrX .

We use this approach for the analysis of non-uniformly sampled stock market data in the rest of the paper as we found this to be more useful, accurate and ef fi cient for this type of data where we have regular missing values (weekends) and some irregular missing values (scheduled/unscheduled holidays). 4. Periodicity detection used to detect periodicity of the repeated substrings. 4.1. Suf fi xtree
Suf fi x tree is a commonly used data structure [14] that has been proved very useful in string pro-end marker for the string; a unique symbol that does not appear anywhere in the string (also called a sentinel).
 yield when traversing from the root to that leaf. Each intermediate node contains a number which is the length of the substring read when traversing from the root to that intermediate node. Each intermediate edge reads a string (from the root to that edge), which is repeated at-least twice in the original string. These intermediate edges form the basis of our algorithm presented later in this section. 4.2. Suf fi x tree annotation
Once the tree as presented in Fig. 1 is constructed, we traverse the tree in bottom up order to construct what we call occurrence vector for each edge connecting an internal node to its parent. We start with nodes having only leaf nodes as children; each such node passes the values of its children (leaf nodes) to the edge connecting it to its parent node. The values are used by the latter edge to create its occurrence vector (denoted occur _ vec in the algorithm). The occurrence vector of edge e contains index positions at which the substring from the root to edge e exist in the original string.

In case when we are recording the time instance as well with the event, the leaf node contains not the the rest of the algorithm remains same.

Second, we consider each node v having a mixture of leaf and non-leaf nodes as children. The oc-currence vector of the edge connecting v to its parent node is constructed by combining the occurrence vector(s) of the edge(s) connecting v to its non-leaf child node(s) and the value(s) coming from its leaf child node(s). Finally, until we reach all direct children of the root, we recursively consider each node u having only non-leaf children. The occurrence vector of the edge connecting u to its parent node is constructed by combining the occurrence vector(s) of the edge(s) connecting u to its child node(s). Ap-plying this bottom up traversal process on the suf fi x tree shown in Fig. 1 will produce the occurrence vectors reported in Fig. 2. The periodicity detection algorithm uses the occurrence vector of each inter-mediate edge (an edge that leads to a non-leaf node) to check whether the string represented by the edge is periodic. 4.3. Periodicity detection algorithm
As mentioned in the previous section, we apply the periodicity detection algorithm at each intermedi-ate edge using its occurrence vector. Our algorithm is linear distance based, where we take the difference Algorithm 1  X  Periodicity Detection Algorithm between any two successive occurrence vector elements leading to another vector called the difference vector . It is important to understand that we actually do not keep any such vector in the memory but this is considered only for the sake of explanation. Table 1 presents example occurrence and difference vectors. Each value in the difference vector is a candidate period starting from the corresponding occur-rence vector value (the value of occur _ vec in the same row). Recall that each period can be represented by 5-tuple ( X, p, stP os, endP os, conf ) , denoting the pattern, period value, starting position, ending frequency count of the period freq(p) if and only if the occurrence vector value is periodic with regard to stP os and p . This is presented formally in Algorithm 1. 5. Experimental analysis of non-uniformly sampled stock market data
In this section, we analyze the stock market data for periodic patterns. The data is non-uniformly sampled and contains variety of features. We apply the periodicity detection algorithm on each of the of considered time and there is hardly any periodic pattern that continues forever. Our algorithm has an edge here as it, unlike others [3 X 5,12], can detect periodic patterns in a section of data series. We also found signi fi cantly more interesting and useful results by analyzing the data as non-uniformly sampled as compared to when analyzed with ignoring the missing values or when dealt with time tolerance window. In the following sub-sections, we will fi rst introduce the data set and then present and analyze the periodicity detection results. 5.1. Stock market data The considered data is Dow Jones Industrial Average data that records several features each day from September 2000 to December 2009. 14 different features are recorded for 23 listed companies. The recorded features are listed in Table 2, while the listed companies are presented in 3. As can be seen in Table 2, some of the features are direct while others are derived from direct features. We discretize each feature values into fi ve distinct ranges uniformly between its minimum and maximum value, hence each feature value can be represented by symbols A, B, C, D and E. It is important to note that each feature is discretized separately between its own minimum and maximum values and no global discretization is done. Besides the 14 features listed in Table 2, we also applied the algorithm for the industrial average data which is the volume of the stock market for each considered day. It gives an overall performance of the stock market by aggregating the total volume of stocks. The missing values are represented by symbol X, hence the data series contains alphabets (or symbols) derived from the alphabet set  X = {
A, B, C, D, E, X } where A represents the lowest value range, E represents the maximum value range and X represents missing or no value. For the better understanding and interpretation of the results, the frequency distribution of alphabets in each of the features is presented in Table 4. In the following we present some of the interesting results found in the stock features of IBM, one of the companies in Table 3. 5.2. Experimental results
Now we will present some of the interesting results in each of the 14 features and the daily volume of industrial average. Each result set has the period value, number of weeks this period represent, starting position, con fi dence (strength) of the periodicity, number of times the pattern repeats and the actual pattern. It is interesting to note that most of the periods detected are either weekly or are in multiple of weeks, that is why, we have included the week count column in the results for easier interpretation. The periodic patterns for each feature are listed in the order of their frequency or repeat count, i.e., the period that repeats most is listed fi rst. As we have 14 features (besides Industrial Average Volume) for which we detected periodic patterns, we explain and discuss the results in three subsections with each presenting the results of some of the features. The separate subsections are created for the better organized presentation and the g rouping does not highli ght any intentional commonality among the features. 5.2.1. Periodic patterns in industrial average volume
The industrial average volume represents the trend of stock market as an entity. The periodic patterns found are presented in Table 5.  X  X  X  represents the lowest volume range and is most prevalent in the considered data (see Table 4). Two type of periodic patterns are detected here: weekly and monthly volume remained at lower side, while the second and third period highlight the time period when stock market shows some improvement and industrial average volume increases and stays in the volume range depicted by  X  X  X . The fi rst period shows the trend of four days while the second shows the similar trend for seven days. The second period is more strict and thus contains more alphabets and repeats less in result continues for over 14 months. 5.2.2. Periodic patterns in features: Price, capital, outstanding, ROA bottom EPS, ROA to ROE outstanding, ROA Bottom EPS and ROA to ROE. The periodic patterns detected for these features are presented respectively in Tables 6 X 10.

For price (Table 6),  X  X  X  and  X  X  X  are comparatively more frequent value ranges followed by  X  X  X . The fi rst three periods represent the time period when the stock price remains in the range depicted by  X  X  X , this period continues for 15 to 20 months. The rest of the periods highlight the time period when the stock price in range  X  X  X  shows periodicity. These results are interesting, for example the fourth result highlights the time period when e very 8th week has the pattern  X  DDDXXDD X , i.e., every 8th week (or a week after 2 month) is a strict  X  X  X  week and this continued for 14 months. The same is the case for the rest of the patterns.

For Capital (Table 7), value range  X  X  X  is comparatively more frequent followed by  X  X  X ,  X  X  X ,  X  X  X  and  X  X  X . Here the fi rst fi ve results represents the weekly period for the time when  X  X  X  is more common. The of number of days it covers in a week (number of alphabet positions fi lled in the pattern out of 7). The 6th period shows the pattern that lasts for an entire year where the four out of 7 days shows the same value range  X  X  X . The same is the case of 7th period while the last period is a large period that repeats only 3 times and is repeated after 19 weeks (almost 5 months).

For outstanding (Table 8),  X  X  X  is most frequent followed by  X  X  X  and  X  X  X . The results shows three time periods; the fi rst one has more days in  X  X  X  range, the second one has  X  X  X  range while the third one has an extended form of second last period.

For ROA Bottom EPS (Table 9), value range  X  X  X  is comparatively more frequent followed by  X  X  X  and  X  X  X . Here again the two time periods are detected, one having the periodicity of  X  X  X  range while the other with the periodicity of  X  X  X  range. The interesting results here are towards the end, for example in the second last period, the pattern repeats after 70 days (10 weeks or 2 and a half month). This pattern is 28 days long which repeats after every 10 weeks and is repeated 5 times in the data. Similarly the last period represents the pattern that repeats after 40 weeks and comprises of just two days.
For ROA to ROE (Table 10), all the results are weekly pattern with one representing days in  X  X  X  range while the other representing days in  X  X  X  range.
 5.2.3. Periodic patterns in features: EPS, invest to liability, operating margin, gross margin, pro fi t
In this subsection we present and discuss the periodic patterns found in the features earning per share (EPS), invest to liability, operating margin, gross margin and pro fi t margin. The periodic patterns de-tected for these features are presented respectively in Tables 11 X 15.

For earning per share (EPS) (Table 11),  X  X  X  is comparatively more frequent value range followed by  X  X  X  and  X  X  X . Two time periods are detected with one (represented by 1 X 4, 6 and 8th period) having days in  X  X  X  range showing periodicity while the other (represented by rest of the periods) having days in  X  X  X  range showing periodicity. Most periods are weekly except 2nd (which is biweekly) and the last which repeats after 17 weeks (almost 4 months).

For invest to liability (Table 12),  X  X  X  is comparatively more frequent value range followed by  X  X  X  and  X  X  X . Here three time periods are detected having days showing periodicity in  X  X  X ,  X  X  X  and  X  X  X  range. All periods detected are weekly except the last one which is biweekly. The patterns repeat for long time (50 to 90 weeks) and seems to stay stable in each of the three time periods.

For operating margin (Table 13), two time periods are detected with one having days in  X  X  X  range while the other having days in  X  X  X  range. For gross margin (Table 14), two time periods are detected with one having days in  X  X  X  range while the other having days in  X  X  X  range. All results in these two features are either weekly or biweekly, the periodic patterns are strong and last for longer time.
For pro fi t margin (Table 15), only two weekly periods are detected one having days in  X  X  X  range while other in  X  X  X  range. There are biweekly, triweekly and biannual periods. For example, the last one is the pattern that repeats after 6 months and the pattern continues for 3 and a half years in which 25 days pattern is repeated. 5.2.4. Periodic patterns in features: Revenue, GEO growth, sales diluted, volatility
In this subsection we present and discuss the periodic patterns found in the features revenue, GEO growth, sales diluted and volatility. The periodic patterns detected for these features are presented re-spectively in Tables 16 X 19.

For revenue (Table 16), the large part is covered by periodic pattern involving days in  X  X  X  range while with alphabets fi lling all the days in the week) and continues for long time.

For GEO growth (Table 17), there is only one weekly period detected that lasts for 14 months and have all the days in  X  X  X  range. The interesting results are 2nd and 3rd one which represent a pattern of 4 or 8 days (all in  X  X  X  range) that repeat after 41 weeks (almost 10 months). The pattern repeats just three time. This is an interesting an unusual pattern repeating after 10 months.

For sales diluted (Table 18), four weekly patterns are detected. The fi rst two represent the time period having days in  X  X  X  range while the last two highlight the time period having days in  X  X  X  value range. The periodic pattern are strong and repeats for long time; close to or over 100 weeks.

Finally for volatility (Table 19), the fi rst three periods are weekly having days in  X  X  X  range repeating for over 150 weeks (more than 3 years) strictly. The rest of the periods are larger periods with patterns involving  X  X  X  repeat after 11, 13 and 14 weeks, they repeats for 5 or 6 times. This could be interesting as it shows after almost 3 months, there is a similar week having all days in  X  X  X  value range and it goes on for 15 to 18 months. 6. Conclusions and future work
In this paper, we presented a detailed analysis of non-uniformly sampled stock market data for peri-odic patterns detected for 15 different features. We also presented 4 different ways to handle the non-uniformly time series data for task of periodicity detection. The proposed approach does count the miss-if they have some missing values and where exactly (at which positions) they were missed. The results thus produced provide more accurate, meaningful and useful results than when these missing values are ignored or dealt by considering them as random noise which do not contribute anything in the data mining results. Periodic patterns in stock market data help understand the nature and evolution process turn can be used to predict the future stock price movement and to facilitate the decision making process in stock investment. We believe that data mining for non-uniformly sampled data should be considered more seriously to better tackle the diverse real data sets.
 References
