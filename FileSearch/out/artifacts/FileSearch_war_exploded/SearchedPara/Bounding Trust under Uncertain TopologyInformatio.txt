 Reputation is one of the major techniqu es to manage trust in decentralized sys-tems. In a reputation system, after an interaction is completed, the participants may issue feedback that evaluates the services or behavior of others during the interaction. Before a new interaction is engaged, an entity may first assess the trustworthiness of potential participants based on the feedback issued by other entities. This trust evaluation process can be modeled as the application of a trust function , which takes as input the feedback information in a system and outputs a trust score for a target entity. Much work has been done on the design and efficient implementation of trust functions (see for example [2 X 7] for rep-resentative trust functions). However , most existing work a ssumes total access of information, i.e., an entity can always collect any feedback information when needed. Unfortunately, such an assumption often does not hold in practice, for example, due to access control restriction, unavailability of information holder or high cost of information collection.

A key question is then to assess the quality of trust evaluation given the uncertainty caused by missing information. Could the missing information cause a big change to the trust computed only based on current available information? If so, the trust score is not reliable. We need consult other means to collecting more information and improve the quality of trust before we can make a sound security decision. This problem can be formally described as a trust bounding problem: given the range of possible values taken by missing information, what are the possible trust scores for an entity? In particular, we are interested in establishing the worst-and best-possible trust scores for a target entity. Such a bound can help us make better trust-rel ated decisions. For example, suppose our policy is to only interact with entities whose trust scores are over 0.8. If the bounds of its trust score is [0 . 85 , 0 . 95], then it is safe to interact with that entity, even if some informatio n cannot be collected.

In general feedback information in a reputation system can be modeled as a weighted directed graph, whose nodes correspond to entities and whose edge weights indicate one entity X  X  feedback rating to another. Given this graph rep-resentation, two types of missing information may exist. The first type is the missing weight information: the graph topology is totally known, but the weights associated with some edges are not certa in. The second type is the missing topol-ogy information: it is unknown whether two entities had interactions before (not to say the feedback for such interactions). Mapping back to the graph repre-sentation, it means the existence of edges between them is unknown. In [1], we initiate the first effort to study the trust bounding problem under the first type of missing information. In this paper, we investigate techniques to bound trust when some topology information is unknown. Specifically, we make the following contributions. First, we give an exact formalism of the trust bounding problem under missing topology information through a general model of reputation-based trust assessment. Second, we identify an important property of trust functions called edge reducibility where the case of missing topology information can be re-duced to the case of missing weight information. We show that if a trust function is edge reducible, then the trust bounding problem can be efficiently solved. In general the interactions between en tities in a decentralized system can be modeled through uni-directional transactions with a clear distinction between a service provider and a service consumer . A feedback is a statement issued by a consumer about a provider on the quality o f service in a transaction. We denote a transaction as a four-tuple ( c, s, r, t ), meaning that consumer c issues a feedback about provider s with a rating r at time t . For simplicity, we focus on ratings from binary positive/negative votes, which is consistent with the design of most existing trust functions.

Though multiple transactions may happen between a consumer c and a provider s , most trust functions in the literature are defined over an aggregation of the rat-ings of those transactions, e.g., the ratio of positive or negative transactions among all transactions between them. We call such an aggregation c  X  X  local trust for s .The total information that are relevant to trust evaluation in a reputation system then can be modeled as a trust graph defined below.
 Definition 1 (Trust Graph). Given a set of entities P and a totally ordered domain of weights W ,a trust graph is a weighted directed graph G =( P,E ) . The edge ( c, s, w ) in the set E  X  P  X  P  X  W encodes the local trust w that the consumer c has for the service provider s .
 Figure 2 shows an example trust graph with six entities.
A trust function computes a trust score for an entity based on the feedback issued in a reputation system.
 Definition 2 (Trust Function). Let G be the set of all possible trust graphs, P be the set of all entities, and T be a totally ordered domain. A trust function F : P  X  P  X G  X  T is a function that takes as input a pair of entities u and v and a trust graph, and computes the extent of u  X  X  trust in v .
 Intuitively, given the feedback information stored in a trust graph, F computes the trustworthiness of v from u  X  X  point of view. We call u and v the source and target respectively of a trust evaluation.

As mentioned in section 1, several types of missing information may exist in practice, which we categorize next. Let u and v be two entities in a trust graph G ( P,E ). Then the relationship between u and v can be one of the following: (1) Known weight: it is known that v has provided services to u before, and u  X  X  local trust in v is also known for certain. Reflecting in the trust graph, it means ( u, v )  X  E with a known weight w ;(2) Unknown weight: we know that u used v  X  X  services before and issued feedback, but cannot collect all the feedback. Thus we can only derive a range for the possible local trust of u to v 1 ;(3) No edge: We know for sure that v did not provide services at all to u before, which means ( u, v )doesnotexistin G ;(4) Unknown edge: It is uncertain whether u has received v  X  X  services before. Therefore, the edge ( u, v ) may or may not exist in G , and if it exists, we do not know its weight at all. Unknown edges also mean the topology of G is uncertain.

The definition of trust graphs can be gen eralized to incorporate the above types of incomplete information.
 Definition 3 (Generalized Trust Graph). Given a set of entities P and a total ordered domain of weights W ,a trust graph is a weighted directed graph G =( P,E ) , such that the weight associated with an edge ( u, v ) can be one of the following: (1) a weight w  X  W , indicating u  X  X  local trust to v is w ; (2) a weight variable with range [ l,u ] , indicating u  X  X  local trust in v falls into [ l,u ] ;and(3) a special variable  X  , indicating the edge ( u, v ) may or may not exist in G . Note that if ( u, v ) is not in a generalized trus t graph, then it is certain that v did not provide services to u before. Figure 2 shows an example generalized trust graph. The edge from A to B is an unknown weight edge with weight variable x , and the edge from F to D is an unknown edge. If a trust graph does not contain any uncertain information, then we also say it is a concrete trust graph .
A generalized trust graph may correspond to a set of possible underlying trust graphs. For example, if an edge ( u, v ) is with a weight variable in the range [0 . 5 , 0 . 9], then assigning any value in the range as the weight will give us a different trust graph, which will result in different trust scores of a target entity when applying a trust function. Formally, we have: Definition 4 (Graph Extension, ( ). Let G ( P,E ) be a concrete trust graph and G ( P ,E ) be a generalized trust graph. We say G extends G ,denoted G ( G ,ifandonlyif(i) P = P ; (ii) ( u, v, w )  X  E  X  [( u, v, w )  X  E  X  ( u, v, x w )  X  E  X  ( u, v,  X  )  X  E ] ,where x w is a weight variable and w is in the range of x w ; and (iii) if there is no edge from u to v in G ,then ( u, v, w )  X  G either. Intuitively, for an unknown weight edge in a generalized graph, we can assign a weight value in the range to make it concrete. Similarly, for the edge ( u, v,  X  ), we can extend it by either assuming ( u, v )doesnotexistor( u, v, w ) exists with an arbitrary weight. It is easy to see that the concrete trust graph in figure 2 extends the generalized graph in figure 2.
 Definition 5 (Trust Bounding Problem). Given a generalized trust graph G , a trust function F , a source entity s , and a target entity t , the trust bounding problem is to compute the pair ( min G G F ( G, s, t ) ,max G G F ( G, s, t )) ,denoted as Bound ( F,s,t,G ) .
 Clearly, if we treat a trust function as a black box (i.e., without leveraging any properties of a trust function), we can only enumerate all the possible extensions of a generalized graph to establish bounds of trust. This process is clearly com-putationally expensive even with modest amount of missing information. In our past work [1], we investigated the trust bounding problem with only unknown weight edges. The main technique is to study the monotonicity property of trust functions. Intuitively, if a trust function is monotonic to the weight variable x of an edge, then we only need to extend that edge with the boundary values of x given its range, and obtain the trust bound. A nice property of monotonicity is that even for the case of multiple weight variables, as long as a trust function is monotonic to each of them, then the trust bound can be computed easily by examining the boundary combinations of these variables instead of exploring the whole possible space of extended graphs.

In this paper, we study how to bound trust under unknown edges. Our main technique is to establish the connection between unknown edges and unknown weight edges, and reduce the former to the latter so that techniques developed in [1] can be applied. One may already observe that an unknown edge ( u, v,  X  ) can actually be divided into two case. The first is a graph without the edge from u to v at all. And the other is to treat the edge as an unknown weight edge ( u, v, x ), where x is in the range [0 , 1]. So compared with the case with only unknown weight edges, it seems that we only need to compute trust for one more graph. This is true indeed if we only consider a single unknown edge. However, when we have multiple unknown edges, we have to consider all the possible combinations (with or without an edge) when extending a general trust graph, which would quick yield a total space that is hard to enumerate. For example, if there are n unknown edges, then extending them will give us 2 n possible topologies for extended trust graphs.

The question is then whether we can avoid enumerating all the possible topolo-gies. Our main technique is to study the relationship between the trust over a graph without the edge ( u, v ) and the trust bound over a graph with an edge ( u, v, x ). If we can show that the trust in the former case always fall into the trust bound of the latter, then we can ignore the former case when bounding trust for a generalized gr aph. We call this property edge reducibility ,whichis formally defined as follows.
 Definition 6 (Edge Reducibility). Let G ( P,E ) be a generalized trust graph whose only missing information is an unknown edge e =( u, v,  X  ) . Consider G 1 =( P,E with x is [0 , 1] . Given a trust function F and any pair of entities s and t ,wesay F is edge reducible if for all such G 1 and G 2 , Bound ( F,s,t,G 2 ) always covers F ( s, t, G 1 ) .
 Essentially G 1 corresponds to the case that we assume the unknown edge does not exist, and G 2 corresponds to the case that we assume the unknown edge exists but we do not know its weight. If a trust function is edge reducible, then the trust score over G is always within the trust bound over G 2 .Inotherwords, the trust bound of G is the same as that of G 2 . In the above definition, we assume the only missing information in G is an unknown edge. What if G has multiple unknown edges or unknown weight edges? A nice property of edge reducibility is that it can be extended to cover such ca ses. We have the following theorems. Theorem 1. Let G ( P,E ) be a generalized trust graph with a single unknown edge e =( u, v,  X  ) and multiple unknown weight edges. Let G 1 =( P,E  X  X  e } ) If a trust function F is edge reducible, then Bound ( F,s,t,G 2 ) always covers Bound ( F,s,t,G 1 ) for all source s and target t .
 Given the above theorem, we can further generalize it to the case with multiple unknown edges and unknown weight edges.
 Theorem 2. Let G ( P,E ) beageneralizedtrust graphwithunknown edges d 1 ,...,d n and unknown weighted edges e 1 ,...,e k .Let G 1 =( P,E  X  X  d 1 ,...,d n } ) and G 2 be the graph from G where all unknown edges are converted to unknown weight edges with range [0 , 1] . If a trust function F is edge reducible, then Bound ( F,s,t,G 2 ) al-ways covers Bound ( F,s,t,G 1 ) for all source s and target t . In this paper we study the problem of trust bounding under incomplete topology information in reputation systems. After presenting a formal definition of the problem, we identify an important property of trust functions, namely, edge reducibility. This property enables us to reduce the trust bounding problem with unknown edges to the case of unknown weight edges, which has been studies in our previous work. In our future work, we would like to investigate mechanisms to integrate trust bounding techniques with the design of reputation systems so that it can be used to guide effici ent information collection.
 Acknowledgment. This is research is partially supported by the NSF grant CCF-0914946.

