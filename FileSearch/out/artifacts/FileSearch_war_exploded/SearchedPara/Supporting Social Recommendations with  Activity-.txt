 In support of social interaction and information sh aring, online communities commonly provide interfaces for users t o form or interact with groups. For example, a user of the so cial music recommendation site last.fm might join the  X  X irst W ave Punk X  group to discuss his or her favorite band (The Clas h) and listen to playlists generated by fellow fans. Clustering tech niques provide the potential to automatically discover groups of u sers who appear to share interests. We explore this idea by describ ing algorithms for clustering users of an online community and aut omatically describing the resulting user groups. We designed t hese techniques for use in an online recommendation syst em with no pre-existing group functionality, which led us to d evelop an  X  X ctivity-balanced clustering X  algorithm that consi ders both user activity and user interests in forming clusters. H.5.3 [ Information Interfaces and Presentation ]: Group and Organizational Interfaces  X  Web-based Interaction ; I.5.3 [ Pattern Recognition ]: Clustering  X  Algorithms Algorithms, Design, Human Factors Activity-balanced clustering, user group summarizat ion. Online communities offer new opportunities for soci al interaction and information sharing. Interfaces that support ac tivities such as posting, tagging, and rating allow community member s to share information as well as to create and sustain relati onships. Online communities take many forms, from discussion forums to social bookmarking sites to recommender systems. Preece [8] advocates that community designers shoul d think both in terms of interface usability and in terms of community sociability . Usable interfaces allow members to discover and u se system features effectively, while sociable systems encourage user interactions and the formation of a community purpo se. In this paper, we consider algorithms in support of essenti ally sociable features  X  user groups and social recommendations  X  and examine techniques for making these features more understan dable for users. User group features are typically intended to facil itate information exchange and social interaction. For example, Flick r, an online photo sharing community, allows members to organize and join public and private groups in order to share and dis cuss photos among friends or others with shared interests. Larg e groups may form around common interests (e.g. the  X  X ardcore St reet Photography X  group has 12,000 members), and coexist with small groups that cater to more personal relationships (e .g. the  X  X riends of Hatfield Forest X  group has 4 members). Group interfaces effectively support the notion of social recommendations, where members trade recommendation s through social features rather than through an algo rithmic process such as collaborative filtering. Last.fm, an online community about music, allows members to publish information about the songs they listen to; the group features allow memb ers to find others with similar interests. Through browsing the 45 member  X  X anni X  group, one might find new friends or discov er new artists StumbleUpon, a social recommender for web pages, al so supports groups for interest areas. Members might join the  X  Cooking Websites X  group to find recommendations for great c ooking resources from other Stumblers who like to cook. In this research, we explore a new paradigm of user group features by looking at algorithms for automatically forming and describing user groups. By automatically assigning users to a group, all users have access to group-based social recommendations f rom their first login, whether or not they know others in the system and irrespective of their commitment to the system. Als o, automatic grouping has the capability of forming groups based on shared traits or preferences, which might improve the accu racy or believability of social recommendations. To be specific, we introduced  X  X ovie groups X  into M ovieLens (http://movielens.org), an online movie recommender system. MovieLens was originally built to allow members to rate movies and receive algorithmically generated movie recomme ndations [9]; it has over time evolved into an online commun ity that supports discussion [4] and tagging [10]. In this p aper, we describe the methods of  X  X ctivity-balanced clusteri ng X  and automatic  X  X ser group summarization X  we developed t o algorithmically form and describe the movie groups Clustering algorithms partition sets of data into g roups based on measurements of similarity between constituent elem ents [6]. In subsequent sections, we describe methods for cluste ring MovieLens users based on their movie rating profile s. To compute the similarity between two users, we calculate the adjusted cosine similarity between vectors of movie ratings; this i s standard practice in recommender systems research [9]. Based on our design of the movie groups feature, we wish to generate a fixed number of clusters, with each clus ter containing approximately the same number of users. Distributin g data equally among clusters is known as  X  X alanced clustering X  [1 ]. Most  X  X tandard X  clustering algorithms such as k-means ma y produce clusters of widely differing sizes. Our design is premised on the belief that movie gro ups are more interesting and useful if users can understand the characteristics that define and differentiate the groups. There are several approaches to the problem of describing clusters; m ost relevant to our research is the practice of choosing a cluster X  s  X  X epresentative X  items. For example, researchers ha ve summarized clusters of text documents by choosing representati ve words. Intuitive approaches for summarizing text may lead to choosing bland or obscure summary words [7], problems that w e revisit in this paper in a new context. Both algorithms that we present in this research dr aw on prior work on stable matching algorithms. Stable matching is a process for matching elements of two sets such that there d oes not exist any pair of elements that would both prefer to be m atched together over their current match. We use a variant of the Gale-Shapley matching algorithm [3], which begins with e ach element defining a ranked list of preferences for elements in the other set, and continues with a series of iterations where ele ments from one set  X  X ropose X  to elements in the other set. Our task is to create user groups; our approach is algorithmic clustering. Prerequisite to clustering is picking s ome dimension along which to define user similarity, data that mi ght be found by (implicitly observed). In MovieLens, we have chosen to group users based on their movie rating profiles, since t hese data offer us the greatest depth and coverage of any data availab le. Recall that we are designing for sociability. In su pport of this goal, we wish to create groups where each group con tains about the same number of active users, because groups wit hout activity cannot interact and share social recommendations. W e have chosen to define an  X  X ctive user X  as one who has lo gged in during each of the past three months. At the time of our s tudy, there were 1,394 such active users  X  25% of the total number o f users to visit MovieLens during those three months. These active u sers substantially affect visible contributions to Movie Lens, accounting for 84% of forum posts during this time period. However, they only accounted for 22% of movie ratin gs. Thus, in order to balance the level of shared ratings inform ation available for display, we added an additional requirement tha t all groups contain approximately the same total number of memb ers. Given our requirement for cluster balance, we do no t believe standard data clustering techniques are sufficient. Thus, we developed a new two stage approach to clustering us ers (see Algorithm 1). Stage 1 uses balanced agglomerative c lustering to build high-quality balanced clusters of hundreds of active users while Stage 2 uses stable matching, a computational ly efficient technique, for assigning thousands of less active u sers in a balanced fashion. This two stage approach is relate d to and inspired by prior work in balanced clustering algor ithms [1]. Let U be the set of all users, A be the set of recently active users, and U-A be the set of all other users. We desire k clus ters as output. 
Stage 1 : A balanced agglomerative clustering algorithm 
Stage 2 : A stable matching algorithm In this section, we provide a preliminary evaluatio n of the performance of activity-balanced clustering, using (1) standard clustering metrics, and (2) a comparison with stand ard k-means clustering on several key indicators. We collected data by running both the activity-balanced clustering procedure des cribed above and standard k-means on the dataset of MovieLens us ers who had logged in during the past year (n=18,760). Two useful metrics for evaluating the output of a c lustering algorithm are compactness and separation [5]. We strive for low compactness scores and high separation scores, sinc e a smaller compactness value represents a cluster with less va riance, and a higher separation value represents clusters that ar e more distinct. Table 1 shows the result of our analysis; activity-balanced clustering outperforms k-means for both metrics in this analysis. 
Table 1. Cluster compactness and separation for act ivity-
Activity-balanced 0.93 0.75 k-means 0.99 0.41 Cluster quality is not the whole story. We are also interested in the balancing performance of activity-balanced clusteri ng as compared with an unbalanced technique such as k-mea ns. Table 2 compares the activity-balanced clustering algorithm with k-means in terms of the standard deviation of the number of users per cluster and the number of active users per cluster. Activity-balanced clustering produces far more uniform clust ers than k-means, both in terms of the total number of users p er cluster, and in terms of the number of active users. K-means res ulted with one very large cluster (with 74% of all the users, and 84% of the active users) and nine very small clusters, reflect ed in the larger standard deviation. Clearly, k-means would not be a ppropriate given our requirements  X  contrary to our goal of so ciability, k-means might lead to one very successful group, and nine very quiet groups. In comparison, the clusters generated by activity-balanced clustering ranged between 9-11% of users e ach, and between 6-13% of active users each. 
Table 2. Standard deviation of the number of users or active 
Activity-balanced 2.87 22.00 k-means 4243.01 334.19 As a result of running activity-balanced clustering , we had ten  X  X ovie groups X  each consisting of thousands of user s. When users log in and discover their new group, they are bound to ask why they were assigned to one group and not another . Preece's call for considering usability tells us that we sho uld present the groups so that members can determine why they have been grouped, and what other users in their group might be like. We also wish for our groups to appear to be distinct f rom one another  X  having ten similar-looking groups might be confus ing to users. Previous work has described clusters by picking  X  X e presentative X  entities for display (e.g., [7]). Were we to take t his approach in MovieLens, we might pick a few users to display, or we might construct  X  X eta-users X  that represent cluster centr oids. Since all users express themselves through rating movies, we summarize clusters by displaying their representative movies.
 However, picking representative movies presents sev eral interesting challenges related to what has been cal led the  X  X anana problem X  [2]. Because bananas are such a commonly p urchased item in (United States) grocery stores, a recommend ation system that doesn't know any better might always recommend bananas, irrespective of context or state. The authors of th is paper might also label this the  X  X hawshank Redemption problem X , where all clusters of users show a strong (average) preferenc e for a 1994 movie called The Shawshank Redemption . Of the ten movie groups currently live in MovieLens, eight have The Shawshank Redemption as one of their two highest rated movies. Because we wish for our users to be able to distinguish betwee n clusters, we should not describe a cluster by simply listing its highest rated movies. Another approach for choosing representative movies for a cluster is to pick movies that a cluster likes more than ot her clusters. However, this approach also does not lead to unique lists of representative movies for each cluster, and tends t o pick  X  X verage X  movies as representative, which does not have face-validity to users. For example, many users will voc ally complain if they are placed in a group that is represented b y the movie The Return of the Texas Chainsaw Massacre . For good reason. Our cluster summarization algorithm, based on stabl e matching, is capable of picking well-liked, distinct movies for each cluster. Let C be the set of k clusters, and M be the set of j m ovies. Intuitively, we might trust 100 ratings with an ave rage of 4.5 stars more than a single 5 star rating. To model this, we linearly devalue similarity scores for movies that fewer tha n 50 co-ratings (see Algorithm 2, line 2). Other systems might choo se different smoothing techniques for devaluing items with littl e data. To evaluate the types of movies our algorithm retur ns, we compare it against several other plausible algorith ms:  X 
POP -( X  X opularly rated X ) Each cluster is summarize d by the movies its users have rated most often  X 
HR20 -( X  X igh ratings 20 X ) Each cluster is summariz ed by the movies its users have given the highest average rat ing. Only consider movies that have been rated by 20 or more of the cluster's users.  X 
DM20 -( X  X iffering means 20 X ) Each cluster is summa rized by the movies its users have rated the highest compare d with users in other clusters. Only consider movies that have b een rated by 20 or more of the cluster's users. In Table 3 we compare these three algorithms with o ur own algorithm (MATCH) on a number of dimensions. First, we consider  X  X opRank X  (popularity rank), a proxy for h ow commonly recognizable a movie is. The most often rated movie in MovieLens, Pulp Fiction, has popRank=1 out of the 9 ,500 movies in the database. Second, we consider  X  X vgRating X  (a verage rating), which can range between 0.5 stars and 5 st ars. Finally, we consider  X  X niqueness X , which we define to be the nu mber of unique movies that are shown in the ten clusters as the  X  X ive most representative movies X . The highest possible unique ness score is 50 (no clusters have overlap), and the lowest possi ble score is 5 (all clusters are summarized by the same 5 movies). In Table 4 we show the top two representative movies from one use r group (for illustrative purposes only). MATCH returns movies w ith fewer ratings and a lower average rating than the other a lgorithms, but does the best job of providing unique descriptions for each cluster. movies X  avg. popularity, avg. user rating, and uniq ueness. popRank 1754.0 53.5 801.6 3821.1 avgRating 3.9 4.1 4.2 3.2 uniqueness 50 11 34 48 Table 4. Top-two representative movies for one movi e group. MATCH Das Boot (1981), Blade Runner (1982) POP Pulp Fiction (1994), The Matrix (1999) HR20 The Godfather (1972), The Shawshank Redemption (1994) 
DM20 Return of the Texas Chainsaw Massacre (1994), Cursed (2005) In this paper, we have examined the problems of aut omatically grouping users and describing the resulting groups. Two methods result, one for activity-balanced clustering, and t he other for user group summarization by way of choosing representati ve movies. Using these groupings, we have modified MovieLens t o give each movie group a home page, where information about ac tivity, recent ratings, recent posts, etc. is shown. Member s may browse these pages to explore the MovieLens zeitgeist. Thi s research is part of a larger study where we are examining diffe rent forms of attachment in online communities. We save deep anal ysis of user behavior for future work. Based on user reactions p osted in the discussion forums (we have received over 90 forum p osts about the groups), there are several lessons to be learne d:  X 
Some users were astounded by how well they were gro uped, others by how badly  X  they appear to base their jud gment largely on how well they like the five representati ve movies we show on the group home page.  X  Users wish to know how they were assigned to their group. 
Although we told users that they were grouped accor ding to movie preferences, many wished for more detail.  X 
Many users agree that they should not be grouped un til they have reached a certain level of contribution (say, 100 movie ratings). Before then, users might be placed in a n ewbie-only group. This would encourage more accurate grouping, which users appear to value.  X 
Users were curious to learn about others in their g roup, and wished that we had built even more support for soci al recommendations than we did. Most importantly to nurturing the sociability of Mo vieLens, all groups have remained active since the launch of the groups (the standard deviation of the number of 3-month and 1-y ear active members across clusters is currently 25.6 and 76.6, respectively). Activity-balanced clustering has thus-far led to a sustainable set of user groups. Time will tell if automatic user grouping is a usef ul feature in encouraging sociability in an online community. In future work, we will examine this question deeply, and evaluate this work from the perspective of a community designer. We also ho pe to follow this work with a more rigorous investigation of the principles of clustering and describing users in online communiti es. Our thanks to Sara Drenner for her work implementin g the social recommendations software in MovieLens, to Loren Ter veen and John Riedl for early discussions about clustering, and to Yuqing Ren, Robert Kraut, Sara Kiesler, and Joe Konstan fo r their contributions to the broader scope of this research . This work is funded by the National Science Foundation, grant II S 03-24851. [1] Banerjee, A., Ghosh, J. Scalable Clustering with Ba lancing [2] Burke, R. Integrating Knowledge-Based and Collabora tive [3] Gale, D., Shapley, L. College Admissions and the St ability of [4] Harper, F., Frankowski, D., Drenner, S., Ren, Y., K iesler, S., [5] He, J., Tan, A., Tan, C., Sung, S. On Quantitative Evaluation [6] Jain, A., Murty, M., Flynn, P. Data Clustering: A R eview. [7] Popescul, A., Ungar, L. Automatic Labeling of Docum ent [8] Preece, J. Online Communities: Designing Usability, [9] Sarwar, B., Karypis, G., Konstan, J., Riedl, J. Ite m-Based [10] Sen, S., Lam, S., Cosley, D., Rashid, A., Frankowsk i, D., 
