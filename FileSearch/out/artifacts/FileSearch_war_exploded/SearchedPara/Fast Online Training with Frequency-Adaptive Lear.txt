 Since Chinese sentences are written as continuous sequences of characters, segmenting a character sequence into words is normally the first step in the pipeline of Chinese text processing. The major problem of Chinese word segmentation is the ambiguity. Chinese character sequences are normally ambiguous, and new words (out-of-vocabulary words) are a major source of the ambiguity. A typical category of new words is named entities, including organization names, person names, location names, and so on.

In this paper, we present high dimensional new features, including word-based features and enriched edge (label-transition) features, for the joint modeling of Chinese word segmentation (CWS) and new word detection (NWD). While most of the state-of-the-art CWS systems used semi-Markov conditional random fields or latent variable conditional random fields, we simply use a single first-order conditional random fields (CRFs) for the joint modeling. The semi-Markov CRFs and latent variable CRFs relax the Markov assumption of CRFs to express more complicated dependencies, and therefore to achieve higher disambiguation power. Alternatively, our plan is not to relax Markov assumption of CRFs, but to exploit more complicated dependencies via using refined high-dimensional features. The advantage of our choice is the simplicity of our model. As a result, our CWS model can be more efficient compared with the heavier systems, and with similar or even higher accuracy because of using refined features.
As we know, training a word segmentation system on large-scale datasets is already costly. In our case, adding high dimensional new features will further slow down the training speed. To solve this challenging problem, we propose a new training method, a daptive online gradient d escent based on feature f requency information (ADF), for very fast word segmentation with new word detection, even given large-scale datasets with high dimensional features. In the proposed training method, we try to use more refined learning rates. Instead of using a single learning rate (a scalar) for all weights, we extend the learning rate scalar to a learning rate vector based on feature frequency information in the updating. By doing so, each weight has its own learning rate adapted on feature frequency information. We will show that this can significantly improve the convergence speed of online learning. We approximate the learning rate vector based on feature frequency information in the updating process . Our proposal is based on the intuition that a feature with higher frequency in the training process should be with a learning rate that is decayed faster. Based on this intuition, we will show the formalized training algorithm later. We will show in experiments that our solution is an order magnitude faster compared with exiting learning methods, and can achieve equal or even higher accuracies.
The contribution of this work is as follows:  X  We propose a general purpose fast online  X  We propose a joint model for Chinese word  X  Compared with prior work, our system First, we review related work on word segmentation and new word detection. Then, we review popular online training methods, in particular stochastic gradient descent (SGD). 2.1 Word Segmentation and New Word Conventional approaches to Chinese word segmentation treat the problem as a sequential labeling task (Xue, 2003; Peng et al., 2004; Tseng et al., 2005; Asahara et al., 2005; Zhao et al., 2010). To achieve high accuracy, most of the state-of-the-art systems are heavy probabilistic systems using semi-Markov assumptions or latent variables (Andrew, 2006; Sun et al., 2009b). For example, one of the state-of-the-art CWS system is the latent variable conditional random field (Sun et al., 2008; Sun and Tsujii, 2009) system presented in Sun et al. (2009b). It is a heavy probabilistic model and it is slow in training. A few other state-of-the-art CWS systems are using semi-Markov perceptron methods or voting systems based on multiple semi-Markov perceptron segmenters (Zhang and Clark, 2007; Sun, 2010). Those semi-Markov perceptron systems are moderately faster than the heavy probabilistic systems using semi-Markov conditional random fields or latent variable conditional random fields. However, a disadvantage of the perceptron style systems is that they can not provide probabilistic information.

On the other hand, new word detection is also one of the important problems in Chinese information processing. Many statistical approaches have been proposed (J. Nie and Jin, 1995; Chen and Bai, 1998; Wu and Jiang, 2000; Peng et al., 2004; Chen and Ma, 2002; Zhou, 2005; Goh et al., 2003; Fu and Luke, 2004; Wu et al., 2011). New word detection is normally considered as a separate process from segmentation. There were studies trying to solve this problem jointly with CWS. However, the current studies are limited. Integrating the two tasks would benefit both segmentation and new word detection. Our method provides a convenient framework for doing this. Our new word detection is not a stand-alone process, but an integral part of segmentation. 2.2 Online Training The most representative online training method is the SGD method. The SGD uses a small randomly-selected subset of the training samples to approximate the gradient of an objective function. The number of training samples used for this approximation is called the batch size. By using a smaller batch size, one can update the parameters more frequently and speed up the convergence. The extreme case is a batch size of 1, and it gives the maximum frequency of updates, which we adopt in this work. Then, the model parameters are updated in such a way: where t is the update counter,  X  t is the learning rate, based on a training sample z z z i .

There were accelerated versions of SGD, including stochastic meta descent (Vishwanathan et al., 2006) and periodic step-size adaptation online learning (Hsu et al., 2009). Compared with those two methods, our proposal is fundamentally different. Those two methods are using 2nd-order gradient (Hessian) information for accelerated training, while our accelerated training method does not need such 2nd-order gradient information, which is costly and complicated. Our ADF training method is based on feature frequency adaptation, and there is no prior work on using feature frequency information for accelerating online training. Other online training methods includes averaged SGD with feedback (Sun et al., 2010; Sun et al., 2011), latent variable perceptron training (Sun et al., 2009a), and so on. Those methods are less related to this paper. 3.1 A Joint Model Based on CRFs First, we briefly review CRFs. CRFs are proposed as a method for structured classification by solving  X  X he label bias problem X  (Lafferty et al., 2001). Assuming a feature function that maps a pair of observation sequence x x x and label sequence y y y to a global feature vector f f f , the probability of a label sequence y y y conditioned on the observation sequence x x x is modeled as follows (Lafferty et al., 2001): where w w w is a parameter vector.

Given a training set consisting of n labeled estimation is performed by maximizing the objective function, The first term of this equation represents a conditional log-likelihood of a training data. The second term is a regularizer for reducing overfitting. follows, we denote the conditional log-likelihood of each sample log P ( y y y i | x x x i , w w w ) as  X  ( z z z objective function is as follows:
Since no word list can be complete, new word identification is an important task in Chinese NLP. New words in input text are often incorrectly segmented into single-character or other very short words (Chen and Bai, 1998). This phenomenon will also undermine the performance of Chinese word segmentation. We consider here new word detection as an integral part of segmentation, aiming to improve both segmentation and new word detection: detected new words are added to the word list lexicon in order to improve segmentation. Based on our CRF word segmentation system, we can compute a probability for each segment. When we find some word segments are of reliable probabilities yet they are not in the existing word list, we then treat those  X  X onfident X  word segments as new words and add them into the existing word list. Based on preliminary experiments, we treat a word segment as a new word if its probability is larger than 0.5. Newly detected words are re-incorporated into word segmentation for improving segmentation accuracies. 3.2 New Features Here, we will describe high dimensional new features for the system. 3.2.1 Word-based Features
There are two ideas in deriving the refined features. The first idea is to exploit word features for node features of CRFs. Note that, although our model is a Markov CRF model, we can still use word features to learn word information in the training data. To derive word features, first of all, our system automatically collect a list of word unigrams and bigrams from the training data. To avoid overfitting, we only collect the word unigrams and bigrams whose frequency is larger than 2 in the training set. This list of word unigrams and bigrams are then used as a unigram-dictionary and a bigram-dictionary to generate word-based unigram and bigram features. The word-based features are indicator functions that fire when the local character sequence matches a word unigram or bigram occurred in the training data. The word-based feature templates derived for the label y i are as follows:  X  unigram1 ( x x x, y  X  unigram2 ( x x x, y  X  bigram1 ( x x x, y  X  bigram2 ( x x x, y
We also employ the traditional character-based features. For each label y i , we use the feature templates as follows:  X  Character unigrams locating at positions i  X  2 ,  X  Character bigrams locating at positions i  X   X  Whether x  X  Whether x The latter two feature templates are designed to detect character or word reduplication, a morphological phenomenon that can influence word segmentation in Chinese. 3.2.2 High Dimensional Edge Features
The node features discussed above are based on a single label y i . CRFs also have edge features that are based on label transitions. The second idea is to incorporate local observation information of x x x in edge features. For traditional implementation of CRF systems (e.g., the HCRF package), usually the edges features contain only the information of y i  X  1 and y i , and without the information of the observation sequence (i.e., x x x ). The major reason for this simple realization of edge features in traditional CRF implementation is for reducing the dimension of features. Otherwise, there can be an explosion of edge features in some tasks. For example, in part-of-speech tagging tasks, there can be more than 40 labels and more than 1,600 types of label transitions. Therefore, incorporating local observation information into the edge feature will result in an explosion of edge features, which is 1,600 times larger than the number of feature templates.

Fortunately, for our task, the label set is quite small, Y = { B , I , E } 1 . There are only nine possible label transitions: T = Y  X  Y and | T | = 9 . 2 As a result, the feature dimension will have nine times increase over the feature templates, if we incorporate local observation information of x x x into the edge features. In this way, we can effectively combine observation information of x x x with label transitions y  X  1 y i . We simply used the same templates of node features for deriving the new edge features. We found adding new edge features significantly improves the disambiguation power of our model. As we will show in experiments, the training of the CRF model with high-dimensional new features is quite expensive, and the existing training method is not good enough. To solve this issue, we propose a fast online training method: a daptive online gradient d escent based on feature f requency information (ADF). The proposed method is easy to implement.
For high convergence speed of online learning, we try to use more refined learning rates than the SGD training. Instead of using a single learning rate (a scalar) for all weights, we extend the learning rate scalar to a learning rate vector, which has the same dimension of the weight vector w w w . The learning rate vector is automatically adapted based on feature frequency information. By doing so, each weight
ADF learning algorithm 1: procedure A DF ( q , c ,  X  ,  X  ) 2: w w w  X  0 , t  X  0 , v v v  X  0 ,  X   X   X   X  c 3: repeat until convergence 4: . Draw a sample z z z i at random 5: . v v v  X  U PDATE ( v v v , z z z i ) 6: . if t &gt; 0 and t mod q = 0 7: . .  X   X   X   X  U PDATE (  X   X   X  , v v v ) 8: . . v v v  X  0 10: . w w w  X  w w w +  X   X   X   X   X   X  g g g 11: . t  X  t + 1 12: return w w w 14: procedure U PDATE ( v v v , z z z i ) 15: for k  X  features used in sample z z z i 16: . v v v k  X  v v v k + 1 17: return v v v 19: procedure U PDATE (  X   X   X  , v v v ) 20: for k  X  all features 21: . u  X  v v v k /q 22: .  X   X   X   X  u (  X   X   X  ) 23: .  X   X   X  k  X   X  X   X   X  k 24: return  X   X   X  has its own learning rate, and we will show that this can significantly improve the convergence speed of online learning.

In our proposed online learning method, the update formula is as follows: The update term g g g t is the gradient term of a randomly sampled instance: In addition,  X   X   X  t  X  R f + is a positive vector-valued learning rate and  X   X   X  denotes component-wise (Hadamard) product of two vectors.

We learn the learning rate vector  X   X   X  t based on feature frequency information in the updating process . Our proposal is based on the intuition that a feature with higher frequency in the training process should be with a learning rate that decays faster. In other words, we assume a high frequency feature observed in the training process should have a small learning rate, and a low frequency feature should have a relatively larger learning rate in the training. Our assumption is based on the intuition that a weight with higher frequency is more adequately trained, hence smaller learning rate is preferable for fast convergence.

Given a window size q (number of samples in a window), we use a vector v v v to record the feature frequency. The k  X  X h entry v v v k corresponds to the frequency of the feature k in this window. Given a feature k , we use u to record the normalized frequency: For each feature, an adaptation factor  X  is calculated based on the normalized frequency information, as follows: where  X  and  X  are the upper and lower bounds of a scalar, with 0 &lt;  X  &lt;  X  &lt; 1 . As we can see, a feature with higher frequency corresponds to a smaller scalar via linear approximation. Finally, the learning rate is updated as follows: With this setting, different features will correspond to different adaptation factors based on feature frequency information. Our ADF algorithm is summarized in Figure 1.

The ADF training method is efficient, because the additional computation (compared with SGD) is only the derivation of the learning rates, which is simple and efficient. As we know, the regularization of SGD can perform efficiently via the optimization based on sparse features (Shalev-Shwartz et al., 2007). Similarly, the derivation of  X   X   X  t can also perform efficiently via the optimization based on sparse features. 4.1 Convergence Analysis Prior work on convergence analysis of existing online learning algorithms (Murata, 1998; Hsu et
MSR Baseline 50 4.7e3 72.6 96.3 95.9 96.1
CU Baseline 50 2.9e3 68.5 94.0 93.9 93.9
PKU Baseline 50 2.2e3 77.2 95.0 94.0 94.5 al., 2009) can be extended to the proposed ADF training method. We can show that the proposed ADF learning algorithm has reasonable convergence properties.

When we have the smallest learning rate  X   X   X  t +1 =  X  X   X   X  t , the expectation of the obtained w w w t is
E ( w w w t ) = w w w  X  + where w w w  X  is the optimal weight vector, and H H H is the Hessian matrix of the objective function. The rate of convergence is governed by the largest eigenvalue of the function C C C t = we can derive a bound of rate of convergence. Theorem 1 Assume  X  is the largest eigenvalue of the function C C C t = the proposed ADF training, its convergence rate is bounded by  X  , and we have where  X  is the minimum eigenvalue of H H H ( w w w  X  ) . 5.1 Data and Metrics We used benchmark datasets provided by the second International Chinese Word Segmentation Bakeoff to test our proposals. The datasets are from Microsoft Research Asia (MSR), City University of Hongkong (CU), and Peking University (PKU). Details of the corpora are listed in Table 1. We did not use any extra resources such as common surnames, parts-of-speech, and semantics.

Four metrics were used to evaluate segmentation results: recall ( R , the percentage of gold standard output words that are correctly segmented by the decoder), precision ( P , the percentage of words in the decoder output that are segmented correctly), balanced F-score defined by 2 P R/ ( P + R ) , and recall of new word detection (NWD recall). For more detailed information on the corpora, refer to Emerson (2005). 5.2 Features, Training, and Tuning We employed the feature templates defined in Section 3.2. The feature sets are huge. There are 2 . 4  X  10 7 features for the MSR data, 4 . 1  X  10 7 features for the CU data, and 4 . 7  X  10 7 features for the PKU data. To generate word-based features, we extracted high-frequency word-based unigram and bigram lists from the training data.

As for training, we performed gradient descent with our proposed training method. To compare with existing methods, we chose two popular training methods, a batch training one and an online training one. The batch training method is the Limited-Memory BFGS (LBFGS) method (Nocedal and Wright, 1999). The online baseline training method is the SGD method, which we have introduced in Section 2.2.

For the ADF training method, we need to tune the hyper-parameters q , c ,  X  , and  X  . Based on automatic tuning within the training data (validation in the training data), we found it is proper to set q = n/ 10 ( n is the number of training samples), c = 0 . 1 ,  X  = 0 . 995 , and  X  = 0 . 6 . To reduce overfitting, we employed an L 2 Gaussian weight prior (Chen and Rosenfeld, 1999) for all training methods. We varied the  X  with different values (e.g., 1.0, 2.0, and 5.0), and finally set the value to 1.0 for all training methods. 5.3 Results and Discussion First, we performed incremental evaluation in this order: Baseline (word segmentation model with SGD training); Baseline + New features; Baseline + New features + New word detection; Baseline + New features + New word detection + ADF training (replacing SGD training). The results are shown in Table 2.

As we can see, the new features improved performance on both word segmentation and new word detection. However, we also noticed that the training cost became more expensive via adding high dimensional new features. Adding new word detection function further improved the segmentation quality and the new word recognition recall. Finally, by using the ADF training method, the training speed is much faster than the SGD training method. The ADF method can achieve empirical optimum in only a few passes, yet with better segmentation accuracies than the SGD training with 50 passes.

To get more details of the proposed training method, we compared it with SGD and LBFGS training methods based on an identical platform, by varying the number of passes. The comparison was based on the same platform: Baseline + New features + New word detection. The F-score curves of the training methods are shown in Figure 2. Impressively, the ADF training method reached empirical convergence in only a few passes, while the SGD and LBFGS training converged much slower, requiring more than 50 passes. The ADF training is about an order magnitude faster than the SGD online training and more than an order magnitude faster than the LBFGS batch training.
Finally, we compared our method with the state-of-the-art systems reported in the previous papers. The statistics are listed in Table 3. Best05 represents the best system of the Second International Chinese Word Segmentation Bakeoff on the corresponding data; CRF + rule-system represents confidence-based combination of CRF and rule-based models, presented in Zhang et al. (2006). Prob. indicates whether or not the system can provide probabilistic information. As we can see, our method achieved similar or even higher F-scores, compared with the best systems reported in previous papers. Note that, our system is a single Markov model, while most of the state-of-the-art systems are complicated heavy systems, with model-combinations (e.g., voting of multiple segmenters), semi-Markov relaxations, or latent-variables. In this paper, we presented a joint model for Chinese word segmentation and new word detection. We presented new features, including word-based features and enriched edge features, for the joint modeling. We showed that the new features can improve the performance on the two tasks.

On the other hand, the training of the model, especially with high-dimensional new features, became quite expensive. To solve this problem, we proposed a new training method, ADF training, for very fast training of CRFs, even given large-scale datasets with high dimensional features. We performed experiments and showed that our new training method is an order magnitude faster than existing optimization methods. Our final system can learn highly accurate models with only a few passes in training. The proposed fast learning method is a general algorithm that is not limited in this specific task. As future work, we plan to apply this fast learning method on other large-scale natural language processing tasks.
 We thank Yaozhong Zhang and Weiwei Sun for helpful discussions on word segmentation techniques. The work described in this paper was supported by a Hong Kong RGC Project (No. PolyU 5230/08E), National High Technology Research and Development Program of China (863 Program) (No. 2012AA011101), and National Natural Science Foundation of China (No.91024009, No.60973053).
