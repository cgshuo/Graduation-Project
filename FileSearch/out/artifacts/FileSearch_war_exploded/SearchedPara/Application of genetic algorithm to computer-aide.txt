 1. Introduction
Computer-aided process planning (CAPP) is considered the key technology for computer-aided design/manufacturing (CAD/CAM) integration. It consists of the determination of processes and parameters required to convert a block into a finished product.
The process planning activity includes interpretation of design data, selection and sequencing of operation to manufacture the part, selection of machines and cutting tools, determination of cutting parameters, choice of jigs and fixtures, and calculation of machining times and costs. To clarify the process planning, parts are represented by manufacturing features. Fig. 1 shows a part composed of m features, in which each feature can be manufactured by one or more machining operations ( n operations in total for the part). Each operation can be executed by several alternative plans if different machines, cutting tools, or setup plans are chosen for this operation ( Case and Harun Wan, 2000 ; Maropoulos and Baker, 2000 ). A process plan for a part consists of all operations needed to process the part and their relevant machines, cutting tools, tool access directions (TADs), and operation sequences.

Two major tasks are involved within the process planning, namely, operation selection and operation sequencing. The operation selection is based on the form-feature geometry, its technological requirements and mapping these specifications to the appropriate operation or series of operations ( Weill et al., 1982 ). Operation sequencing is concerned with selection of machining operations in steps that can produce each form feature of the part by satisfying relevant technological constraints specified in part drawing, while minimizing the number of setups, maximizing the machines utilization, minimizing the number of tool changes, etc. In other words, the operation sequencing problem in the process planning is considered to produce a part with the objective of minimizing the sum of machine, setup, and tool change costs. In general, the problem has combinatorial characteristics and complex precedence relations, which makes the problem difficult to solve. A good process plan for a part is built up based on two elements: (1) the optimized sequence of the operations of the part and (2) the optimized selection of machine, cutting tool, and TAD for each operation. Although many CAPP systems have been reported in literature, only few of them have considered the optimization of the sequence of operations, and suggested alternative sequence of operations or process plans.
Operation sequencing is a complex task exhibiting the combina-torial nature. As the operations sequencing problem involves various interdependent constraints, it is very difficult to formulate and solve this problem using integer programming and dynamic programming methods alone.

Evolutionary algorithms, which mimic living organisms in achieving optimal survival solutions, can often outperform conventional optimization methods. In the past two decades, GA has been widely applied for solving complex manufacturing problems, e.g. job shop scheduling and process planning. In this paper, a genetic algorithm (GA) is chosen for solving this optimization problem. The process planning is divided into preliminary planning and secondary/detailed planning. In the preliminary stage, feasible sequences of operations is carried out considering compulsive constraints of operations using the proposed GA and during the secondary and detailed level of planning, the optimized sequence of the operations of the part, and the optimized selection of the machine, cutting tool, and TAD for each operation is acquired using a genetic algorithm considering additive constraints as well. It means during the secondary of planning, relevant manufacturing information, such as, machine tools, cutting tools, and TADs for the operations of the part is determined.

This paper is organized into five sections. Section 2 gives a literature review on the related research work. Section 3 illustrates our approach for determining the optimized operations sequence and determines a machine, cutting tool, and TAD for each operation. System implementation and a case study are presented in Section 4. Finally, conclusions are summarized in
Section 5. 2. Related research work
Computer-aided process planning, being a part of manufactur-ing automation solutions, has received much attention in both academia and industry during the last three decades ( Cay and
Chassapis, 1997 ). CAPP systems can be categorized into variant or generative types or their combinations. In a variant system, a set of standard plans is established and maintained for each part family. The plans are then retrieved using a classification and coding scheme as used for group technology. In a gene-rative system, a process plan for a new part is automatically created, synthesizing the process information. For this purpose, the decision logic is built into the computer system as decision tree, decision table, knowledge-based expert system and the like.

Feature sequencing and operation sequencing are two different levels of process sequencing in the literature. Feature sequencing is concerned with high-level process planning activities, e.g. setup planning ( Chen and LeClair, 1994 ). As a part may contain many features, a proper sequence for machining these features is vital in achieving efficient and high-quality manufacture of the part. Here, a setup refers to a group of features that can be machined in a certain fixturing configuration. Feature sequencing is also relevant to minimization of the number of setup and tool changes. On the other hand, operation sequencing deals with the problem of determining in what order to perform a set of selected operations such that the resulting sequence satisfies the precedence constraints established by both parts and operations ( Lee et al., 2001 ). The nature of operation sequence generation is to develop a feasible and optimal sequence of operations for a part based upon the technical requirements, including part specifications in the design, the given manufacturing resources, and certain goals, such as cost or time target. The operation sequence generation problem can usually be modeled as large-scale and combinational optimization problems ( Qiao et al., 2000 ). Integer programming, genetic algorithms, search heuristics, hybrid genetic algorithm, and simulated annealing approaches have been applied to operation sequencing.

Lin and Wang (1993) proposed a two-phase problem solving structure. In phase I, they focused on the selection of process plans for a group of parts to be machined for the next planning cycle. It was formulated and solved as a dynamic programming problem.
In phase II, two 0 X 1 integer programming models are formulated and solved for selection and sequencing operations and tools for those process plans. But regarding a single sequence of operations may not be the best for all the situations in a changing production environment with multiple objectives, such as minimizing number of setups, maximizing machine utilization, and minimiz-ing number of tool changes. Reddy et al. (1999) applied a genetic algorithm as a global search technique for a quick identification of optimal or near-optimal operation sequences in a dynamic planning environment. Since sequences can be obtained quickly, this algorithm can actually be used by the process planner to generate alternative feasible sequences for the prevailing operat-ing environment. Qiao et al. (2000) used a GA-based approach to machining operation sequencing for prismatic parts. Four types of process planning rules including precedence rules, clustering rules, adjacent order rules and optimization rules were considered and encompassed quantitatively in the fitness calculations for alternative operation sequences. The proposed GA proves effective for machining operation sequencing of prismatic parts, by incorporating various production environment considerations into process planning. Lee et al. (2001) developed six local search heuristics based on simulated annealing (SA) and tabu search (TS) to obtain good operation sequences for practical-sized problems within a reasonable amount of computational time. The results on randomly generated problems showed that the TS-based algo-rithms are better than the SA-based algorithms on overall average.
In particular, one of the tabu search algorithms suggested gave optimal solutions for most small-sized test problems within very short computation times. Li et al. (2002) modeled the process planning as a combinatorial optimization problem with con-straints, and a hybrid genetic algorithm and simulated annealing approach was developed to solve it. The evaluation criterion was the combined strengths of machine costs, cutting tool costs, machine change costs, tool change and setup costs. The GA was carried out in the first stage to generate some initially good process plans. Based on a few selective plans with Hamming distances between each other, the SA algorithm was employed to search for alternative optimal or near-optimal process plans. In the GA and SA algorithms, some preliminarily defined precedence constraints between features and operations were manipulated. A case study and comparisons with single GA and SA approaches showed that this hybrid approach could achieve highly satisfac-tory results. Automated processing planning based on GA and/or SA also have been reported by Ma et al. (2002), Li et al. (2002) and
Alam et al. (2003). Ding et al. (2005) presented an optimization strategy for process sequencing based on multi-objective fitness: minimum manufacturing cost, shortest manufacturing time and best satisfaction of manufacturing sequence rules. A hybrid approach was proposed to incorporate a GA, neural network and analytical hierarchical process (AHP) for process sequencing. A globally optimized fitness function was defined including the evaluation of manufacturing rules using AHP, calculation of cost and time and determination of relative weights using neural network techniques. The proposed GA-based process sequencing, the implementation and test results were discussed. Particle swarm optimization was also used by Cagnina et al. (2004) , and Guo et al. (2006) , Li et al. (2004) implemented a constraint-based TS approach for optimization of process plans.

In the present work, the CAPP is divided into preliminary and secondary/detailed planning. All of the proposed CAPP systems only regarded one of two planning, it means that they obtained the optimized sequence of operations by analyzing the compul-sive constraints (preliminary planning) or the optimized selection of the machine, cutting tool, and TAD for each operation using operations precedence relations and the additive constraints (secondary and detailed planning). In this research, in the preliminary stage, the feasible sequences of operations are carried out considering compulsive constraints of operations and during the secondary and detailed level of planning, the optimized sequence of operations of the part and the optimized selection of machine, cutting tool, and TAD for each operation is acquired by regarding additive constraints. It means during the secondary of planning, relevant manufacturing information, such as machine tools, cutting tools, and TADs for the operations of the part is determined. With emerging the preliminary and detailed plan-ning, implementing of compulsive and additive constraints, optimizing the sequence of the operations of the part and optimizing the selection of the machine, cutting tool, and TAD for each operation, simultaneously. This approach has useful contributions. 3. Materials and methods
The modular structure of the proposed CAPP system is shown in Fig. 2 , with the planning activities divided into preliminary planning and detailed planning. The preliminary planning generates feasible sequences of operations, considering compulsive constraints. The detailed planning generates optimal or near-optimal sequences of operations and selects a machine, cutting tool and TADs for each operation of these sequences, considering additive constraints.
 The basic input to any CAPP system is the part description. After the geometrical information (e.g., shape, dimensions, etc.) and technological information (e.g., tolerances, surface finish, etc.) are imputed by a CAD modeler or by a user interface, it is assumed that feature-based module represents the part. Then, the system selects operations that possess the capability to produce the form features based on its geometrical and technological requirements. The system also generates the compulsive constraints from the inter-relationships that exist between the operations. Using these constraints and a proposed GA the initial feasible sequences of operations are generated.

In the next phase, the detailed planning, machines and cutting tools that can perform the operations are selected by the system from the machine database and tool database. Then, based on selected machines and cutting tools for each operation, TADs are determined. In the next step, optimization of operation sequence and selection of machine and cutting tool and TAD for each operation based on the additive constraints are done. Finally, the system generates a process sheet that tabulates the operation number, operation description, machine tool, cutting tool and TAD for each operation. 3.1. Preliminary planning
If there are n operations in a part, then the aggregation S  X  { o o , y , o n } of operations has n members. Here o i indicates the i th operation. Each combination sequence of all operations in S represents one solution. Operation sequencing can be regarded as a process in which a series of constraints ( r i  X  { r 1 , r imposed on aggregation S one by one. Then the final operation sequence which can fully or mostly satisfy R is considered to be the optimal operation sequence. The goal of operation sequencing is to find the optimal operation sequence. It is known through technological practice that in operation sequencing, the theoretic constraints cannot be satisfied fully. So if the final operation sequence can satisfy obligatory constraints and other additive constraints, the operation sequence is reasonable. According to this condition, the constraint aggregation of the operation sequence can be divided into two categories: a compulsive constraint aggregation R b and an additive constraint aggregation R h .

In this research, order and clustering constraints are consid-ered as the compulsive constraint aggregation and the optimiza-tion constraint is considered as the additive constraint aggregation. In the preliminary planning the compulsive con-straint aggregation is implemented for acquiring the feasible operation sequences and in the secondary and the detailed planning the additive constraint aggregation is implemented for acquiring the optimized operation sequence and the optimized selection of machine, cutting tool, and TAD for each operation. In other words, based on analysis of the order and clustering constraints in operation sequencing, the feasible operation sequences are generated. Then, based on the optimization constraint using a GA, the optimized sequence of the operations, selection of the machine, cutting tool and TAD for each operation which can satisfy the constraints are obtained. 3.1.1. Analyzing constraints
In the preliminary planning, emphasis is on the feasible se-quences of operations rather than as the optimal or near-optimal sequence of operations with selection of machines, cutting tools, etc. For this purpose, the compulsive constraint aggregation is applied so that if a sequence of operations cannot satisfy the compulsive constraints, it is infeasible and must be eliminated.
There are two compulsive constraints: (1) Order constraint: An order constraint is represented in the form A -B meaning that Operation B cannot be done until operation A has been done before. This constraint is the most important constraint in operation sequencing. It includes first rough machining, last finish machining, first main machining, last subordinate machining, first basic reference and last others part, etc. (2) Clustering constraint: A clustering constraint is represented in the form of A 2 B which has two meanings. It may signify that two operations A and B that belong to the same machining stage must be handled together (i.e., the constraint indicates that these operations must be done with one holding/setup), such as the constraints that refer to a datum: parallelism, perpendicularity, angularity, concentricity, circular run-out, total run-out, symmetry and the like. It may signify that two operations A and B must be done together successively without attending to the order, such as the constraint of  X  X  X ough machining and fine machining separation X  X . This means that all the operations in the same azimuth side must be done together successively, and also means that the same kind of operations or the operation that can be applied with the same cutting tool done together successively. For cluster-ing constraint, the order is unimportant. 3.1.2. Genetic algorithm
The GA mimics the process of natural evolution by combining the survival of the fittest among solution structures with a structured, yet randomized, information exchange and creates offspring. In GA, a candidate solution is represented by a sequence of numbers known as chromosome or string. In the present work, each element (gene) in a string (chromosome) represents an operation. The order of the elements in the string represents the sequence to be followed. A judiciously selected set of chromo-somes is called a population and the population at a given time is a generation. The population size, which remains fixed from generation to generation, has a significant impact on the performance of the GA. This size is to be specified by the user depending upon the number of elements in the string and the problem complexity. A randomly generated set of sequences (strings) makes the initial population. Optimization of the initial sequences is done by GA, using an appropriately defined fitness function.

Fitness function : The fitness value F corresponding with a string that has n operations can be obtained by the following formula: F  X  selection END
Eq. (1) is the expression of the fitness function of operation sequences GAs, and only the main compulsive constraints are given in the formula. Other constraints can be also added behind it. The explanation of each item in the formula is shown in the following section: (1) a i : Weight of the i th order constraint. (2) b i : Weight of the i th clustering constraint. 3.1.2.1. Selection. The selection of individuals to produce successive generations plays an extremely important role in a GA.
A probabilistic selection is performed based upon the individual X  X  fitness such that the better individuals have an increased chance of being selected. An individual in the population can be selected more than once with all individuals in the population having a chance of being selected to reproduce into the next generation. Holland (1975) developed the roulette wheel, which was the first selection method. In addition, there are se-lection methods, such as roulette wheel X  X  extensions, scaling techniques, tournaments, elitist models, and ranking methods.
These selection operators were presented for numerical optimi-zation and the main objective is to reduce the sampling error and improve calculation precision. When using GAs for operations sequencing, the natural number is used for coding. The fitness value of individual is only a relative concept (only used for value comparing and the value itself is not concerned). So the problem of sampling error does not exist. Compared with other selection operators, the  X  X  X ournament selection X  X  is more suitable for the problem of operations sequencing. In order to guarantee the astringency of GAs, the optimal individual in one generation must be kept to the next generation. Other individuals in population are selected using the  X  X  X ournament selection X  X  operator. Suppose there are W individuals to be selected, selecting two individuals randomly from the population and keeping the better one for the next generation. Repeating this process W 1 times and then at last all individuals in the next generation are obtained. 3.1.2.2. Crossover. In this work, a partially mapped crossover (PMX) operator ( Gorges-Schleuter, 1985 ) is modified to produce offspring. After two parents are selected from the popu-lation, based on the string length (i.e., number of elements in the string), a crossover point is randomly generated and a segment of the string from that point to end of the string is selected. The offspring, child 1, is generated by arrang-ing the elements of the selected segment in this parent according to the order in which they appear in the other parent with the order of the remaining elements the same as in the first parent. The role of these parents is to generate another off-spring, namely, child 2. The crossover operator can be illustrated as follows:
Select two strings from the current population and denote them as parent 1 and parent 2: Parent 1 :  X  1 ; 4 ; 6 ; 3 ; 5 ; 2  X  Parent 2 :  X  4 ; 5 ; 6 ; 1 ; 2 ; 3  X 
Consider a random crossover site as X  X  2 and the segment from parent 1 from the crossover site till the end of the string (6, 3, 5, 2)
Arrange the selected elements in the order of parent 2 and obtain (5, 6, 2, 3).

Then the offspring, child 1 from parent 1 is generated as: (1,4,5,6,2,3). 3.1.2.3. Mutation. A mutation operator is used to investigate some of the unvisited points in the search space, and also to avoid pr emature convergence of the entire feasible space caused by some superchromosomes. This operator makes random changes in one or more elements of the string. Mutation is done with a small probability, called mutation probability or rate. This is done to protect loss of some potentially useful strings. Some individuals of the next generation, which are obtained through the two above-mentioned operators, are selected and then the positions of two codes in each individual are exchanged randomly to realize the mutation operation. For example, if the third and sixth posi-tions are the selected mutation positions in individual O1, new individual O1 0 will be obtained as follows: O1 :  X  1 ; 4 ; 5 ; 6 ; 2 ; 3  X ! O1 0 :  X  1 ; 4 ; 3 ; 6 ; 2 ; 5  X 
The chromosomes resulting from these operators are often known as offspring or children and these form the next genera-tion X  X  population. This process is repeated for generating feasible solutions. A feasible solution is a sequence of operations that considers all of the compulsive constraints. The fitness value for a feasible solution is zero. Therefore, when the fitness value for some of solutions is zero, the genetic algorithm stops and selects these solutions as feasible solutions. This process is repeated until the enough feasible solutions are generated.

A multi-feature prismatic part with 19 design features reported by Zhang (1997) will be used to evaluate the capability of the GA-based CAPP system. Fig. 3 shows the part with 23 operations that are reported by Zhang (1997) . Table 1 gives operation information and Table 2 gives the constraints obtained for this part. The precedence relationships between these operations shown in Table 2 are obtained from a set of order constraints including fixturability, tolerance factor, good manufacturing practice and operation stages requirement for machining one feature. This issue does not have the clustering constraints.

After the initial strings are created randomly and the initial population is established, the fitness values of the initial population are calculated shown in Table 3 . Any string in this table illustrates a sequence of operations. The fitness values are obtained by Eq. (1) and considering a i  X  b i  X  1 that means the weight of constraints is the same. In addition, for this part there are no clustering constraints. Therefore, P j  X  1 q f 2, j fitness value can be calculated by number of out-of-sequence operations in order for any string. As an example for string 1 in Table 3 , number of out-of-sequence operations in order by considering the order constraints in Table 2 are 54. The proposed GA was run for the initial population to create the feasible strings for which their fitness values are zero. By running the algorithm for five times, ten different feasible solutions were generated, as shown in Table 4 . 3.2. Secondary and detailed planning
In the secondary/detailed level of planning, the optimized sequence of operations of the part, and the optimized selection of machine, cutting tool, and TAD for each operation are obtained. For this purpose, the proposed GA is also applied to implement the optimization constraint as an additive constraint.
In this stage of planning, the feasible sequences of operations are used, as an initial solution. However, a new strategy coding is implemented. 3.2.1. Coding strategy
An element (gene) in a string (chromosome) represents an operation ID and the corresponding machine, tool and tool access direction (TAD), which is used to accomplish this operation. The order of the elements in the string represents the sequence to be followed. As a result, a process plan is represented by a random combination of genes. Fig. 4 shows the representation of a six-operation process plan.  X  X p3 X  represents operation 3; M01, T04 and x in the other rows represent the machine, tool and TAD, respectively, that will be used to perform operation 4, and so are the other columns. 3.2.2. Population initialization
To generate chromosomes, the feasible sequences of the operations generated are used. Once the number of the feasible sequences of the operations is prescribed, the procedures of initialization are given as follows: (1) Randomly select one sequence from the available feasible sequences of the operations list. (2) Visit the first selected operation. (3) Randomly select machines and tools that can be used for manufacturing the operation.
 (4) Randomly select one amongst all possible TADs for the (5) Repeat Steps 3 and 4, until each operation has been assigned a (6) Repeat Steps 1 X 5 until the feasible sequences of the opera-3.2.3. Fitness function
The fitness function, which is a measure function used to express the adaptability of a string, is used to connect the problem and the algorithm. The adaptability is expressed by the fitness value. In this stage, additive constraints can be implemented. The optimization constraint is often considered as an additive constraint. This constraint means that some target functions should be met in the technological sequence decision, such as minimum processing times, minimum production cost and so on.
In this research, the minimum production cost is employed to calculate the fitness of each operation sequence, and to measure the efficiency of a manufacturing system. The total production cost (PC) consists of machine cost (MC), tool cost (TC), machine change cost (MCC), tool-change cost (MCC), and setup change cost (SCC). The fitness function is computed by
Fitness  X  PC  X  MC  X  TC  X  MCC  X  TCC  X  SCC (2) 3.2.4. Selection operator
The tournament selection is used, and in this the proposed genetic algorithm for the preliminary planning was described. 3.2.5. Crossover operator
In this paper, an order crossover (OX) ( Davis, 1985 ) is adopted to ensure the local precedence of operations is met and a feasible offspring is generated. The procedure of the crossover operation is described as follows (see Fig. 5 ): (1) Based on the chromosome length, a crossover point is (2) Copy the left side of Parent 1 to form the left side of Child 1. (3) The role of these parents will then be exchanged in order to 3.2.6. Mutation operator
The mutation operator proposed in this paper randomly selects some individuals that are obtained through the two above-mentioned operators. Then the positions of two codes in each individual are swapped randomly. Example of the mutation operation is shown in Fig. 6 . A new operator was introduced in order to check the feasibility of the string obtained. If any string violates the constraints, the string is considered infeasible and the total score is given a very high value so that it will not come in the next generations. In other words, a penalty is given to the infeasible solutions: where a is a positive number as large as it can be.

The frequency of machine change increases time and cost for accomplishing a job. In general, an experienced process planner attempts to assign the same machine to as many operations of a job as possible. To decrease machine change, the machine change time or cost index can be increased. The chromosomes resulting from these three operators, namely selection, crossover and mutation, are often known as offspring or children and these form the next generation X  X  population. This process is repeated for a desired number of generations, usually up to a point where the system converges to significant well-performing sequences. 4. Results and discussion
For the described example, the operation information is shown in Table 1 . The feasible sequences of the operations are generated in the preliminary planning, shown in Table 4 . Available resources in the job shop and their cost indices are illustrated in Table 5 . The machines in the job shop are 3-axis. The cost indices of machine, tool and setup changes are MCCI  X  300, TCCI  X  10, and SCCI  X  90, respectively. Similar GA parameters used by Zhang (1997) are used for comparison. These parameters are: population size 50, crossover rate 0.7, mutation rates 0.6, and generations 8000 (the stopping criterion).

Since the performance of GAs is not guaranteed and can never be assessed on the basis of a single run, in this case, the program will be repeatedly run for 10 times, and the production cost of every optimal process plan is generated and it can be seen that the production cost varies from 1739 to 1745. Nevertheless, the frequency of the production cost (1742) is much higher than the
Parent1
Parent2
Child 1 
Child 2 other two. Two final alternative optimal/near-optimal sequences are depicted in Fig. 7 . From the result, it can be concluded that the precedence relationships shown in Table 3 are maintained, e.g. op-1 and op-2 are finished before op-3 due to good manufacturing practice, op-9 after op-8, op-8 after op-7 due to operation stages requirements, op-5 before op-21 due to fixturability, etc. The number of iterations for producing the optimal process plans is no more than 60 generations for each run, and the computation time on a PC with Intel Pentium IV 2GHz CPU and 1G RAM is about 10s. In the final process plan produced by Zhang (1997) , the result come out after iteration of 8000 generations, and the computation time on a Pentium PC at 133MHz is about 7min ( Zhang, 1997 ).
To compare the process plan reported in Zhang (1997) with the solution obtained by the proposed GA approach, it is seen that our proposed GA can generate the most optimal process plan. The results have the same quality as obtained by Zhang, within much fewer number of iterations compared to 8000 iterations (i.e., only about 50 iterations in our approach). In addition, the more significant improvement of the proposed GA approach is that it generates the feasible sequences based on the analysis of constraints in the operation sequences.

The proposed optimization of process planning based on GA developed in this work has been applied on an example part having 23 operations shown in Fig. 3 . Certain abstractions are necessary in the preliminary planning, as done without consider-ing the specific resources like machine tools, cutting tools, etc.
Therefore, any reference to processes, setups and tools is to be understood only as abstraction. Based on the order constraint and clustering constraint, the operation precedence relation is repre-sented. The genetic algorithm that is incorporated in the system consults the operation precedence and generates initial alter-native sequences. Typical sequences are shown in Table 3 .
The feasible sequences form the input for the optimization module used in the proposed GA. Then the new coding strategy is implemented to include machines, tools and, TADs in any string.
The fitness of each string in the population is calculated based on the optimality criteria as an additive constraint. The score for each string is computed. Then the selection operator utilizes this to produce successive generations. The crossover and mutation operators are then applied to modify the selected strings. The procedure is repeated for the given number of generations to obtain the optimal and near-optimal sequences. Two optimal and near-optimal sequences are shown in Fig. 7 . The order of Op-3 and
Op-8 corresponding to user X  X  preference can be changed and Op-17 can be machined by Slot cutter (T-07) or Milling cutter (T-05), because these two changes do not change the production cost.
If there are more than one part for planning, their processes can be planned by the proposed GA. However, it is necessary that the processes of each part are considered as a cluster in the preliminary planning. By using this approach, the break down in final stage of machining can be modeled each part. In addition, the presented model can plan the clamping and fixturing. For this purpose, the coding scheme should be extended for the proposed chromosome. In other words, a row for the fixture and a row for clam should be added in the chromosomes, and the fitness function should be extended so that it is included the cost of the fixturing or clamping change. By this approach, the fixturing or clamping change cost is also minimized. It is the worth noting that the speed coverage of the proposed GA is reduced when the number of chromosome rows increases. In this state, a trade-off should be considered between importance of the cost reduction and speed of coverage of the proposed GA. Finally, another important note is that with increasing the number of axes for machining, states for the tool access direction (TAD) are increased.
For example, for a machine with 4-axis, in addition the possible states ( x ,+ x , y ,+ y , z ,+ z ), two states should be considered for the fourth axis. 5. Conclusion
In this paper, the process planning was divided into prelimin-ary planning and secondary/detailed planning. The preliminary planning is independent of resources, as it involves abstractions of processes, setups, etc. In this stage after necessary operations for a part based on the form features selected and on the operations and their inter-relationships, the preliminary sequences are determined. During the preliminary planning, an efficient genetic algorithm is proposed to explore the large solution space of valid operation sequences under compulsive constraints. The proposed GA generates the initial feasible sequences based on the order and clustering constraints as compulsive constraints. The results of the preliminary planning are used in the next phase, the secondary/ detailed planning, in which machine tools, cutting tools and TADs are considered, and sequences of operations are optimized at the process level. Another proposed GA optimizes the sequences of the operations using a criterion involving the minimum produc-tion cost that represents machine changes, setup changes, and tool changes. The process planning is a combinatorial problem with interacting constraints, and the preliminary planning reduces the number of combinations to be examined. The proposed GA handles this combinatorial problem very well, and the reduction in the size of the problem at each stage makes the algorithm a very fast one.

The proposed GA can obtain optimal/near-optimal solutions, requiring about 10 X 40s, depending on the number of operations and the number of generations. Several case studies were considered and the related results were obtained in less than 40s. For a typical case of an oil pathway board with 29 operations, the results were obtained in 15s for a population size of 20 and 100 generations. The case study involving 38 operations took 20s.
Since the computational time taken to generate the optimal/near-optimal sequences is low, the software can be run several times to facilitate the process planner in obtaining alternative sequences. References
