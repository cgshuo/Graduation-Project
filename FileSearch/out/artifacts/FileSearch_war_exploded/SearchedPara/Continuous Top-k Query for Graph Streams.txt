 In this paper, we propose to query correlated graphs in a data stream scenario, where an algorithm is required to re-trieve the top k graphs which are mostly correlated to a query graph q . Due to the dynamic changing nature of the stream data and the inherent complexity of the graph query process, treating graph streams as static datasets is com-putationally infeasible or ineffective. In the paper, we pro-pose a novel algorithm, Hoe-PGPL, to identify top-k corre-lated graphs from data stream, by using a sliding window which covers a number of consecutive batches of stream data records. Our theme is to employ Hoeffding bound to discover some potential candidates and use two level candidate check-ing (one corresponding to the whole sliding window level and one corresponding to the local data batch level) to ac-curately estimate the correlation of the emerging candidate patterns, without rechecking the historical stream data. Ex-perimental results demonstrate that the proposed algorithm not only achieves good performance in terms of query pre-cision and recall, but also is several times, or even an order of magnitude, more efficient than the straightforward algo-rithm with respect to the time and the memory consump-tion. Our method represents the first research endeavor for data stream based top-k correlated graph query.
 H.2.8 [ Data Management ]: Database Applications X  Data Mining Algorithm Correlated Graph Query, Graph Stream, Pearson X  X  Correla-tion Coefficient
A straightforward approach to solve our problem is ex-haustive search, which uses a sliding window to scan the stream and computes the correlation by employing CGSearch [3] or TopCor [5] algorithms to query the top-k correlated graphs in each sliding window. While this exhaustive ap-proach can ensure complete and correct results, it is compu-tationally inefficient because the reoccurring query process in each window requires a significant amount of computa-tional costs. In this paper, we proposes a Hoeffding bound [2] based algorithm. More specifically, we utilize a Hoeffding bound to discover a set of top-k potential candidate graphs from each data batch. Then we design a global-local check scheme with two levels of lists to store candidate informa-tion, i.e. , potential global list (PG) and potential local lists (PLs). By maintaining and integrating the local lists and the global list carefully, we are able to estimate the true correlation of each candidate with small bias. Experimental results on chemical graph data stream demonstrate that our algorithm is several times more efficient than an exhaustive search method w.r.t. the system runtime and the memory consumption, and also achieves good performance in terms of query precision and recall.
We consider undirected, labeled connected graphs in this paper. A graph is denoted as g =( V,E, ), where V is the vertices set, E is the edge set, and is a labeling function to assign labels to a node or an edge. Given two graphs g 1 = ( V 1 ,E 1 , 1 )and g 2 =( V 2 ,E 2 , 2 ), a subgraph isomorphism from g 1 to g 2 is an injective function f : V 1  X  V 2 , such that  X  subgraph isomorphism is an NP-complete problem [1]. A graph g 1 is a subgraph of another graph g 2 ( g 1  X  g 2 )if there is a subgraph isomorphism from g 1 to g 2 .
Given a batch of graphs G i , the projected dataset with respect to a graph g is denoted by S G i g = { g | g  X  g ,g  X  G } , whose frequency N g is denoted by N g = | S G i g | ,where | X | denotes the cardinality of the set  X  .Thejointfrequency between two graphs g and q in G i is the number of graphs in G i which contains both graph g and q , denoted by N gq = | S Given a query graph q and a continuous graph stream G ,we emphasize on discovering top-k correlated graphs between q and G .Because G represents a dynamic graph stream which is constantly changing, we assume that graph data arrive batch by batch, and use a sliding window D = { G i  X  w +1 , G  X  w +2 ,  X  X  X  ,G i } to denote a consecutive region of the graph stream, where G j ,i  X  w +1  X  j  X  i represents a batch of graphs and G i is the most recent batch of the graph stream. Then our problem is to continuously monitor and report the top-k correlated graphs with the highest Pearson X  X  correla-tion with q in a sliding window (the most recent w batches). Atypicaltop-k correlated graph query in a data stream with window size w =3 is shown in Fig. 1.

Definition 1. Pearson X  X  Correlation Coefficient: Pear-son X  X  Correlation Coefficient [6] between two graphs g and q
Algorithm 1: Hoe-PGPL( G i ,PG,PLs,k,w,m ) 2 Get top-k correlated graphs in batch G i from S G i q ; 3 Get the k th correlation value  X  L and error s ; 4 PL i  X  { g |  X  L ( g,q )  X   X  L  X  2 s ,g  X  g ,g  X  G i } ; 5foreach g  X  PG do 6 Increasing N g , N gq ,and N q ; 7if some batch is deleted then 8 Decrease N g , N gq ,and N q ; 9 Merge ( PL i ,PG,PLs ) ; 10 Re-compute the top-k correlated graphs based on 11 if | PG | &gt;m  X  k then 12 Prune PG; 13 return A g ;
In our problem settings, we assume the correlation over data stream is a random variable, and stream data arrive batchbybatch. Ineachbatchweestimate  X  r =  X  L ( g,q ), whose expected correlation value in a sliding window (de-noted by  X  D ( g,q )) is at least  X  L ( g,q )  X  with high proba-bility 1  X   X  . Specifically, the  X  L ( g,q ) is computed in a batch over a number of | G i | graphs, and we assume this computed result can be viewed as an average of  X  L ( g,q ).
Based on the Hoeffding bound, we mine a set of poten-tial top-k correlated graphs in each batch over stream. For each candidate g ,wehave  X  L ( g,q ) &gt; X  L  X  2 s . Here, s = with q (all candidates are sorted in a descending order based on their correlation values), which can be discovered by us-ing the method in [5] or [3].
After discovering the potential k -correlated graphs in each batch, we use two levels of candidate lists to maintain these candidates, i.e. , a potential global list (PG) and a set of potential local lists (PLs). PG and PLs are also shown in Fig. 1. The detailed procedures of the proposed Hoe-PGPL algorithm is shown in Algorithm 1. In addition to the PG, PLs, and G i , Hoe-PGPL takes several parameters as inputs. Specifically, k indicates the number of answers (graphs) to be returned; w represents the size of the sliding window (in termsofnumberofbatches);and m is a parameter control-ling the maximum number of candidates in PG. The output of Hoe-PGPL is the top-k correlated graphs A g in the cur-rent sliding window.

Hoe-PGPL in Algorithm 1 mainly consists of four parts: (1) Hoeffding bound based candidate generation (steps 1-4); (2) Increasing and decreasing frequency information in PG (steps 5-8); When new batches arrive or become outdated, for each g  X  PG , we update the frequency information in the window D . (3) Inserting new candidates into PG (steps 9), which is a key step for estimating the correlations of candidates (the details are reported in Algorithm 2); (4) Pruning PG (steps 11-12). If | PG | exceeds m  X  k , we delete  X 
D be the k-th correlated graph in PG, we delete candidates whose correlation is smaller than  X  D  X  2 w .
  X  min be the graph with minimum correlation value in PG, if  X  D (  X  min ,q ) is smaller than the updated correlation value  X 
D (  X ,q ), we further revise the frequency information of g as we want  X  D (  X ,q ) &lt; X  D (  X  min ,q ) in a global perspective. In our implementation, if  X /  X  PL j ,j  X  [ i  X  w +1 ,i  X  1], we replace the frequency information of  X  in batch G j with the frequency information of  X  min in that batch. By doing so, the newly emerging candidates can be inserted into the PG with a precise estimation of its genuine correlation with query graph q . As a result, the ranking of PG will be more accurate and the query results can be more precise.
To validate the performance of our method, we collect graph data stream from a real-world NCI graph database 1 , which contains compound structures of cancer and AIDS data. The original dataset contains about 249,000 graphs. After preprocessing and removing some disconnected graphs, we have a data stream with about 233,000 graphs.

The query graphs in our experiments consists of 50 graphs, each of which is randomly selected with a support in the whole data stream is less than 0.05. In addition to the system runtime and memory consumption, Precision and Recall are used to measure the results of our algorithm. Suppose A g and T g denotes the returned answers and true answers respectively, then P recision = | T g A g | / | A g | and Recall = | T g A g | / | T g | . An algorithm is perfectly accurate if both precision and recall are equal to 1.

We compare our algorithms with an exhaustive search method (denoted by Fixwin ) in terms of system runtime and memory consumption. When implementing Fixwin, i.e. , whenever a new batch of graphs arrives, Fixwin restarts to mine the top-k correlated graphs in the sliding window from scratch. To justify our estimated scheme, we compare Hoe-PGPL with a Hoe-PG scheme, which only uses PG to estimate the emerging candidate pattern  X  (PLs are not employed). Unless specified otherwise, we set the default values  X  =0.05, k =30, w =10, m =5, and | G i | =5000.
In Fig. 2, we report the memory consumptions w.r.t. dif-ferent top-k values. The result shows that the exhaustive search method (Fixwin) consumes several times more mem-ory comparing to the Hoe-PGPL, mainly because Fixwin needs to store the graph data in the entire window while Hoe-PGPL only saves the most up-to-date batch of data and some candidates in PG and PLs. Meanwhile, the runtime performance in Fig. 2 demonstrates that Hoeffding bound based methods are about 5-10 times faster than the Fixwin method. On the other hand, when increasing the top-k val-ues, the results in Fig. 3 show that the precision and the recall values of Hoe-PG and Hoe-PGPL both decline, with Hoe-PGPL showing much better performance than Hoe-PG. This demonstrates that by combining the two levels of can-didate lists and the dynamic estimation of missing values of emerging candidate patterns (  X  ) in the historical batches, our method is able to maintain high effectiveness and high accuracy for stream-based top-k correlated graph query.
In this paper, we studied top-k correlated graph query from data stream, which discovers a query graph q  X  X  top-k correlated graphs in a sliding window covering a portion of http://cactus.nci.nih.gov/ncidb2/download.html
