 e.g. developers, project managers, customers, partners, or investors. The com-plexity of models and metamodels representing these systems is increasing rapidly. Thus, it is often necessary to look at a complex system or applica-tion from different points of view. Moreover, certain stakeholders may prefer or require a different view to express their concerns [ 11 , 17 ]. Views (also referred to as viewpoints) are used to deal with this complexity in (meta-)modeling frame-works. View-based modeling aims at creating partial metamodels and models, each one of them reflecting a set of concerns of the modeled system [ 17 ]. Previous research during the late  X 90 s covers viewpoints and the generation of views from metamodels, especially from a requirements engineering perspective [ 15 , 16 ]. The works also explore the generation of views from metamodels, in various industry or academia-driven information systems. However, as aforementioned, the Web 2.0 uprise has reshaped the social work behavior, making systems available for heterogeneous communities free or at a low cost, on the Web, which is also valid in the conceptual modeling case.
 Engineering scenario where developers and end users collaboratively built a Web application [ 4 ]. In this setting, a study was carried out using thirteen user evaluation sessions in groups of two or three, with a total of 36 participants. We observed how collaborative modeling can be leveraged by different stake-holders during the design phase of an information system. We provided both non-technical users and software developers with an NRT collaborative editor for modeling and generating Web applications. Based on a common application metamodel, they were given separate parts of a model for modeling the fron-tend and backend of the application. In a first stage, participants were allowed to model the backend of a given information system in NRT (services, data-base, service interface, etc.). Then, they were asked to model in the same way the interface for the already designed backend. The results show that many end users perceived parts of the model as too complicated or were finding the representation not relevant or intuitive for them. As such, they expressed the desire to reduce complexity of a model by only being presented with relevant aspects, which in the specific case were mostly considered to be HTML5 frontend elements. Furthermore, many end users expressed the desire to have familiar rep-resentations of such objects. Following these outcomes, this paper explores the NRT collaborative definition of views through a metamodel-based approach and their usage in NRT collaborative modeling scenarios.
  X  How can various stakeholders collaboratively define views as part of a meta-model in NRT? ( RQ1 );  X  How to generate customized views based on the metamodel definition where stakeholders can further collaboratively edit parts of a generated model? ( RQ2 );  X  Do views impact NRT collaborative modeling with respect to user experience improvement and the modeling process speed ( RQ3 )? for a model editor for the specified modeling language. A VLS is defined visually using a graph-based visual modeling language (VML). An arbitrary number of model editors can be generated based on the defined VLS. The NRT collabora-tion takes place at both metamodeling and modeling layers. The implementation details, architecture and interface offered by SyncMeta are detailed in the pre-vious work [ 5 ]. The gray elements in Fig. 1 depict the view extension integrated into the SyncMeta framework. These also reflect the contributions of this work. On the metamodeling layer metamodelers may collaboratively define viewpoints in SyncMeta X  X  metamodel editor. For the definition of a viewpoint the underlying VML was extended with additional view types. The view types define references to classes of the metamodel and offer to define conditions on the attributes of the referenced class ( RQ1 ). Additionally the appearance and rules for each view type can be redefined in a view. To facilitate the metamodeling process a Closed-View Generation (CVG) algorithm based on [ 20 ] was implemented to automatically add classes and relationships to the viewpoint when a reference to an object or relationship is defined in the metamodel ( RQ1 ).
 view specification (VVS) is generated which consists of a construction plan for the view in the modeling layer ( RQ2 ).Here,anexistingmodelcanbeusedin combination with a certain VVS to generate a view on the model. Modelers may collaboratively edit any view or the model itself in NRT, with all actions being propagated to collaborators and reflected in all views and in the model ( RQ2 ). Domain-specific experts from a certain community, software architects and soft-ware developers can define a metamodel for the information systems which should be developed in the respective community. For that, they create the metamodel collaboratively on the Web in NRT. Then, more VVS are defined in the metamodel, e.g. a view for frontend elements as modeling objects for commu-nity end users, a backend view for developers and a communication view between frontend and backend. Based on the defined VVS, a model editor is generated together with corresponding views. Community end users can collaboratively create the frontends they require on the frontend view, together with develop-ers. Developers can give immediate feedback on the functionality required by end users. Developers can also edit in NRT the application backend and the communication between the backend and frontend, while architects can see in NRT the entire model and check the integrity of the modeled system. The view extension framework  X  following the same implementation policies of SyncMeta  X  is Web-based and fully open source (available in GitHub 1 ). The terms view and viewpoint are used interchangeably in many different reports and are often just introduced as examples. We therefore offer formal definitions for these terms and explain the relations between the different concepts used in Definition 2. Let VT C = {  X  ( c ) | c  X  C } and  X  ( l, t, A )=( l ,t ,A ,l ) with l the new unique label, t is ViewObject or ViewRelationship if t is Object or Relationship, else t = t . Obviously, A  X  A  X  P .
 model. The reference is the unique name l . Thus, a viewpoint is not independent of the metamodel.
 Definition 3. A viewpoint with respect to VT C is a metamodel with G = ( V ,E ) ,and  X  c  X  V : c  X  VT C  X  type ( c )= ViewObject.
 we can define the concept of viewpoint applied to a model of the modeling layer of SyncMeta ( RQ1 ). For the generation of the model editor instance a VLS of the metamodel is generated. For simplicity we think of the VLS as the metamodel described in Definition 1 . First we formally define the relation between the metamodel defined in the metamodeling layer and the model. Definition 4. Based on graph G =( V, E ) of a metamodel, a model is a directed graph M =( V ,E ) with  X  v  X  V : type ( v )  X  label ( V ) and  X  e  X  E : type ( e )  X  label ( E ) .
 type or edge type defined in the metamodel. To generate views we first need to define a function which applies a view type to an entity within the model: Definition 5. Let VP =( V, E ) be a VVS of a viewpoint. Let  X  v ( n ): ( l, t, A )  X  ( l, type ( v ) ,A ) , v  X  VT V is a view type class of VP . A  X  P is the new set of properties defined by view type v . Analogously, the function for edges is defined attributes defined for v .
 Definition 6. Let VP =( V VP ,E VP ) be a VVS of a viewpoint and M = ( V
M ,E M ) amodel.A view V =( V V ,E V ) is a subgraph of M with V V = {  X  v ( c ) | v  X  V VP  X  c  X  V M } X  V M and E V = {  X  v ( e ) | v  X  V VP  X  e  X  E M } X  E M . whose type is referenced to a view type in the VVS is part of the view (RQ2). For the view generation we need a VVS and a existing model as input. Widgets. Figure 2 depicts an overview of the widgets offered by SyncMeta with the view extension. The canvas widget visualizes the current state of the model and provides mechanisms to manipulate the model X  X .g. adding nodes and edges, drag &amp; drop, and similar. Each edit that alters the model is propagated locally Metamodeling and Viewpoint Modeling( RQ1 ) . In the previous section we have presented the formal definitions of viewpoints, views and view types and shown that we can apply the NRT collaborative modeling approach of SyncMeta also to the view extension. SyncMeta implements a four-tier metamodel hierar-chy, which is depicted in Fig. 3 . Tier 3 defines the basic elements of a graph-based modeling language. Tier 2 defines the node and edge types of the VML as well as the view types of the viewpoint models. As stated in Sect. 3 , Definition 2 ,a viewpoint does not contain any Object or Relationship types. We replace them by using the ViewObject and ViewRelationship types, which are a specialization of Object and Relationship , respectively. These contain a reference to a node type or an edge type in the metamodel. It is also possible to define conditions on the attributes of the referenced class, i.e. in contrast to a simple object class a view-object offers functionalities to customize the attributes of a view. Meta-modelers are able to hide and rename attributes. The Conjunction attribute determines the logical connector of the conditions. This can be either the logical AND or OR. Thus, we can build a formula with the predicates  X  1 , ..,  X  n , either with a conjunction over all predicates  X  1  X  ...  X   X  n or with a disjunction over all predicates  X  1  X  ...  X   X  n . Conditions on attributes allow metamodelers to make simple queries on the attributes of an object class and filter the entities of this class in the view canvas of the model editor.
 each view type. Tier 1 defines the actual metamodel or viewpoint. Metamodelers are allowed to develop an arbitrary number of viewpoints in the same NRT was also used in the evaluation (see Sect. 5 ). Figure 4 (b) depicts a possible view on the model, which is called  X  X ellerView X . It contains only nodes and edges within the boundary of the  X  X eller X  actor, along with their edges. For demon-stration purposes we also defined a slightly different styling for node and edge types. The palette widgets adapts to the view by only displaying node and edge types defined in view.
 Limitations. As described in [ 5 ], the visual-based (meta-) modeling approach of SyncMeta has some restrictions, such as model checking functionalities on the (meta-)modeling layer. By extension, the views do not allow the specifica-tion of cardinalities or multiplicities with regard to the relationships and view-relationships. Also, it is not possible to define conditions on inherited attributes of super classes. Currently, only the definition of conditions for the attributes of the referenced class is allowed. A simple solution for this problem is that we define the attribute directly in the referenced class, but this is suboptimal and fails to exploit the inheritance hierarchy. Finally, the view-based model-ing approach requires an automatic diagram layout mechanism. In the current implementation, a big disadvantage is that elements of a view are placed at the same position as in the model. Solutions to these limitations are planned to be implemented in future versions, since they are not critical for a research prototype. We performed an end user evaluation of the model editor. The main goal was to evaluate the usability and usefulness of the view-based modeling approach and monitor the NRT collaboration features ( RQ3 ).
 Participants. The end user evaluation comprised four sessions with four partic-ipants each with a total of 16 participants, who were recruited from researchers and students of our department. Their expertise in conceptual modeling, i  X  and SyncMeta was measured using seven-point Likert scale (from 1=novice to 7=expert). The results show that users had varying existing knowledge of mod-eling. As such, expertise with graphical editors is quite high, but has a high standard deviation ( M =4 . 38; SD =2 . 42). The same holds for user X  X  general expertise in conceptual modeling ( M =4 . 5; SD =2 . 46). However, the level of expertise with i  X  is rather low ( M =2 . 44; SD =2 . 5).
 Methodology. In each session, the four participants were split into two groups ( Group Alpha and Group Beta ) with two people each. Both groups had to com-plete two tasks of comparable scope. Each task comprised a list of detailed instructions to extend a given i  X  model with additional nodes and edges. This could be performed without any i  X  expertise. The collaborators could decide for themselves how to complete the instructions by communicating with each other via chat or just start modeling and let SyncMeta resolve potential conflicts. The first task was solved by Group Alpha and consisted of a predefined view applied, was on average about 24 s or 15 % longer in comparison to Task 1 with views enabled ( M = 167 s; SD = 31) . The lower improvement factor for the Beta groups compared to the Alpha groups can be explained by a learning curve. The Alpha groups used the views during the second task, where they were more familiar with how to work with the tool. Conversely, the Beta groups used the views during the first task when it was the first use with the tool for most of them. This actually shows that modeling with views speeds up the modeling process even for users who are unfamiliar with the tool ( RQ3 ).
 modeling process; they can also be used to customize the model editor in order to ease adoption and to improve stakeholder involvement during the collaborative modeling process. Participants also provided some textual comments about the view-based modeling approach. They stated that they liked switching between views and that the reduced palette gives a better orientation, which may explain the faster modeling times with views enabled. The NRT collaboration features were already evaluated in SyncMeta [ 5 ], but challenges were also encountered. In the evaluation, NRT collaboration and edits awareness were only available between views and the entire model editor. However, the evaluation results have shown that users require also collaboration directly between individual views and this feature was implemented as consequence ( RQ3 ). Table 1 demonstrates that views and related concepts have been successfully used in many research fields, including object-oriented databases (OODB) [ 2 , 20 ], enterprise architecture (EA) [ 10 , 22 ] and corresponding frameworks and in conceptual modeling (CM) [ 1 , 6 , 9 , 12 , 13 ].
 guages. One of the most popular view extensions is called MultiView [ 2 ], a simple and powerful tool for supporting multiple views in the Gemstone OODB [ 19 ]. Multiview introduced the CVG-algorithm to facilitate the definitions of view-points. A similar approach is provided by our view extension (cf. Sect. 2 ). ferent point of view X  X .g. data, function, networks, organizational, structures, schedules and strategy. The ARIS Framework [ 10 ] provides various model edi-tors to build complex enterprise architectures, e.g. location allocation diagram, network diagram, technical resource model. All entities of these model editors are integrated into one comprehensive metamodel. The Zachman Framework [ 22 ] is a two dimensional classification schema for descriptive representations of an organization. It is an abstract guideline which proposes perspectives on a par-ticular system of an enterprise in different development stages.
 is a tool set to define modeling languages and generate model editors. Unlike SyncMeta only a locking collaboration approach is used. AT oM 3 [ 12 ]and ADOxxx [ 6 ] are domain-independent metamodeling frameworks with focus on In this work, we explored how metamodel-based view generation can be effec-tively combined with NRT collaboration in modeling for teams with different competences and roles. For this purpose, we presented a view extension for the SyncMeta metamodeling framework which allows the generation of views for focusing on particular aspects of a complete model. The views are editable and all edits are reflected in all views and in the model. Thus, we offer a unique approach of NRT collaboration for free conceptual model editing on the Web using optimistic concurrency control mechanisms, combined with known tech-niques for views definition and generation from information systems domain. The view-based extension was evaluated in group sessions using an instance of the i  X  language generated and initialized with a simple model and views. The evalua-tion results show that NRT collaboration for view-based authoring is possible, that by using views the modeling speed is slightly improved and that the views are useful for reducing complexity, especially when dealing with big models. directions. We plan to enhance the expressiveness of the conditions on a view type to allow more complex queries and model perspectives. Moreover, to improve the NRT collaboration features of the framework we have replaced the OpenCoWeb implementation and are currently evaluating SyncMeta Views with Yjs [ 14 ], a real-time P2P shared editing framework for arbitrary data types, as it over-comes scalability drawbacks and is much easier to use by developers. Further-more, in order to improve the feedback during collaborative modeling and to support end-users working with the views extension, we are currently develop-ing an intelligent assistant system for collaborative modeling scenarios to guide collaborators during the modeling process using different strategies like remote support or conflict avoidance. Together with an automatic distributed approach to deal with co-evolution of metamodels and models, these improvements will gear the framework towards use in real-world information systems engineering projects.

