 We present a hierarchical tree structure for online mainte-nance of time-decaying synopses over streaming data. We exemplify such an amnesic behavior over streams of loca-tions taken from numerous moving objects in order to ob-tain reliable trajectory approximations as well as affordable estimates regarding distinct count spatiotemporal queries. Categories and Subject Descriptors: H.2.8 [Database Management]: Database Applications General Terms: Algorithms, Management, Performance Keywords: Compression, Data Streams, Moving Objects, Trajectories, Continuous Queries
Recent advances in telecommunications and geoposition-ing facilities enable online collection of locations from many moving sources (e.g., humans, vehicles). Thus, streams of positional updates are created, particularly useful in mon-itoring applications ranging from traffic surveillance to en-vironmental protection. Apart from ever-increasing stor-age requirements, this rapidly accumulating data should be processed in a timely fashion for providing real-time re-sponse to multiple continuous user requests.

It is apparent that the significance of each isolated loca-tion is inherently time-decaying , since any recorded position of an object will be soon outdated by forthcoming ones. This motivates the need for an amnesic treatment of the positional updates gathered for each object: we argue that the older a data item gets, the coarser its representation could become in a progressive fashion, implying that greater precision should be reserved for the most recent positions. With respect to approximation of one-dimensional time se-ries, a wide range of amnesic functions has been identified in [2], useful in controlling the amount of error tolerated for every single point in the time series. In addition, we think that different levels of abstraction are inherent in semantics related to multi-scale representation of spatiotemporal fea-tures, allowing progressive refinements of their evolution at additional cost in storage consumption and processing time.
In this work, we present the multiple-granularity AmTree framework that accepts streaming items and maintains sum-maries over hierarchically organized levels of precision, es-sentially realizing an amnesic behavior over stream portions. This time-aware scheme distantly resembles SWAT [1], but it is considerably more generic, since it is not intrinsically bound to wavelet transform of scalar stream values. In con-trast, AmTree can even deal with multi-dimensional points with user-specified approximation functions.

The proposed mechanism can efficiently handle streaming locations from moving objects and retain a compressed out-line of their entire trajectories, always preserving contiguity among successive segments for each individual object. In conjunction with FM sketches, AmTree can further be used in spatiotemporal aggregation for providing good-quality es-timates to distinct count queries over locations of moving objects.
The general structure of an AmTree is illustrated in Figure 1. For ease of presentation, we opt for a summarization scheme that manipulates pairs of items at every level of the amnesic tree structure, so we assume that a time granule at each level spans two granules half its size at the level beneath. However, AmTree is much more general and can be easily calibrated to work with a varying number of nodes (i.e., time granules) at each level.

Except for the root, each level i of the tree consists of a right ( R i )andaleftnode( L i ). At the lowest (0 th ) level, node R 0 accepts data with reference to the finest time gran-ularity (e.g., seconds), which characterizes every timestamp attached to incoming tuples. Each node at the i th level contains information about twice as many timestamps as a node at the ( i  X  1) th level. Hence, a node at level i contains information characterizing 2 i timestamps.

We consider a user-defined mapping f that is applied over the batch of tuples with current timestamp value  X  ,and transforms them into a single tuple that can become the content of a tree node (operation new (  X  )). As illustrated in Figure 1, the resulting content is assigned to node R 0 while the previous content of R 0 is shifted to node L 0 (op-eration shif t ( i )). Astimegoesbyandnewdatacomesin, the contents of each level are combined using a function g and propagated higher up in the tree, retaining less detail (operation merge ( i )). Note that node R 0 is the only entry point to the synopsis maintained by the AmTree.

When this structure consumes streaming items, node up-dates are performed in a bottom-up fashion. It can be eas-ily shown that each level i is updated every 2 i timestamps, where i =0 , 1 , 2 ,... Each time, the update procedure reaches a maximum level M of the tree, which depends on the timestamp value of the incoming item. Therefore, AmTree updates can be carried out online in O (1) amortized time per tuple with only logarithmic requirements in memory storage.
We believe that AmTree is best suited for summarizing streams of sequential features, i.e., time series that must re-tain contiguity among their consecutive elements. This is exactly the case of streaming locations collected from mov-ing objects. Next, we describe amnesic synopses concerning singleton trajectories, as well as a sketch-based variant of AmTree for computing spatiotemporal aggregates.
As an alternative representation to a time series of points, the trajectory of a moving object can be represented with a polyline composed of consecutive displacements .Everysuch line segment connects a pair of successive point locations recorded for this object, eventually providing a continuous, though approximate, trace of its movement.

With respect to compressing a single trajectory, we sug-gest an instantiation of AmTree that manipulates all succes-sive displacement tuples recorded for this object. In direct correspondence to the generic AmTree functionality, map-ping f converts each current object position into a displace-ment tuple taking into account its previous location. This displacement is then inserted into the R 0 node of AmTree, possibly triggering further updates at higher levels. When the contents of level i must be merged to produce a coarser representation, a simple concatenation function g is used to combine the successive displacements stored in nodes L i and R . After eliminating the common articulation point of the two original segments, a single line segment is produced and then stored in node R i +1 . As a result, endpoints of all dis-placements stored in AmTree nodes correspond to original positional updates, while displacements remain connected to each other at every level. Evidently, an amnesic behavior is achieved for trajectory segments through levels of gradually less detail in this bottom-up tree maintenance.

As long as consecutive displacements are preserved, the movement of a particular object can be properly recon-structed by choosing points in descending temporal order, starting from its most recent position and going steadily backwards in time. Any trajectory reconstruction process can be gradually refined by combining information from multiple levels and nodes of the tree, leading to a multi-resolution approximation for a given trajectory.
Next, we present a summarization technique that is able to provide unbiased estimates for the number of objects that move in an area of interest during a specified time interval. When each object must be counted only once, the problem is known as distinct counting [4].

We consider a regular decomposition of the 2-d Euclid-ean plane into equal-area cells, which are used to main-tain a simplified spatial reference of moving objects instead of their actual locations. To accommodate temporal ex-tents, we make use of a hierarchical AmTree. Thus, each cell points to an AmTree, which maintains gradually ag-ing information concerning the number of moving objects inside that cell. Query-oriented compression is achieved using FM PCSAsketches. EachnodeofanAmTreecor-responds to m bitmap vectors utilized by the FM PCSA sketch. Hence, we avoid enumeration of objects, as we are satisfied with an acceptable estimate of their distinct count given by the sketching algorithm.

In order to estimate the number of distinct objects moving within a given area  X  during a time interval  X   X  , we first identify the grid cells that completely cover region  X  .Those cells determine the group of qualifying AmTree structures that maintain the aggregates. For each such tree, we need to locate the set of nodes that overlap time period  X   X  specified by the query; these nodes are identical for each qualifying tree. By taking the union of the sketches attached to these nodes (i.e., an OR operation over the respective bitmaps), we finally compute an approximate answer to our query.
We conducted a series of experiments confirming the ap-proximation quality and processing performance achieved by our approach. It was verified that recent trajectory segments always remain more accurate, while overall error largely depends on the temporal extent of the query in the past. Even for heavily compressed trajectories, accuracy is proven quite satisfactory for answering spatiotemporal range queries. With respect to distinct count queries, it was ob-served that a finer grid partitioning incurs more processing time at the expense of increased accuracy.

We believe that the suggested AmTree framework is a modular amnesic structure with exponential decay charac-teristics, especially tailored to cope with streaming posi-tional updates. As further explained in [3], instead of just computing aggregate statistics, our particular concern is to maintain age-biased synopses that are able to provide re-duced approximations. We plan to adjust amnesic behavior with user-specified aging patterns and study more complex schemes of multiple, concurrently updated AmTrees.
