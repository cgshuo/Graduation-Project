
Fan-Kai Chou 1 , Meng-Fen Chiang 1 , Yi-Cheng Chen 2 , and Wen-Chih Peng 1 As the emergence of on-line social media, users can easily share information to their friends via Mobile Social Media Apps such as Gmail, WhatsApp, Facebook using their mobile devices. Social media gather and syndicate these information to target users. Users can browse through the information shared by their friends. Most existing social media generally re nder information based on recency, that is, latest information always appear on top of personal feed walls. Some may provide manual tools for users to explicitly adjust friend circles so that users can control how information are rendered on their walls or which friend circles to share information with. Such great efforts motivate us to wonder: Is it possible to design a dynamic circle recommendation system which can automatically suggest a ranked list of friend candidates driven by both historical interaction statistics and contextual information such as time point?
Most studies on formation of groups mainly focus on static group formation, where a group is a fixed set of friedns manually pre-defined by a user. We argue that the notion of group should dynamically adapt to context information such as location, time, etc. That is, some users may have the tendency to share information to different groups of friends at certain time points while some users may share information to the same group of friends at all time. For example, a user may have the tendency to share information to his/her family during daytime and share information to his/her close colleagues in the evening. To discover time-dependency for a target user, we need to identify his/her tendency at different time point. Following this, we need to provide a ranked list of friends that a user has the highest probability to interact with at each time point.
The general problem of recommendati on system has been widely studied [6]. Several prior studies attempt to consider temporal factor in designing recommendation systems [9][3][2][11]. For example, [9] leveraged user X  X  long-term and short-term preferen ces for temporal recommendation. Nonetheless, non of them addresses the fact that user interactions are not always correlate with time as users present diverse variation of temporal dependency. For example, some users have higher temporal dependency in sharing information. Moreover, a user may only be sensitive to certain time points during a day. In this paper, we argue that temporal tendency should be analyzed individually for each pair of query user and friend candidate at each time point. As an evidence, Figure 1 interactions only fall into a few time slots during a day, they have lower entropy and thus indicating higher time centrality and vice versa. We observe that over 60% pairs of users X  have higher time centrality in interactions (entropy  X  0.5), meaning the rest 40% user interactions are driven or dominated by other factors.
In this paper, we propose a framework to discover personalized dynamic circle for a given time point. Given a query user, a time point, and historical communication logs, our recommendation system returns a ranked list of friends (referred to as Circle) for the query user at given time point. To achieve this, we propose a temporal probabilistic model ( TCircleRank ) to capture user behaviors in terms of three factors: frequency, r ecency and time-dependency. After this, we utilize TCircleRank to derive two types of dynamic circle recommendation: Seedset Generation : single interaction suggestion and Circle Suggestion : multiple interactions suggestion. TCircleRank considers the dynamic importance of each candidate user for a query user to incorporate the factor, different users show different temporal dependency with related to a target user at different time . Seedset Generation aims t o generate a candidate user by TCircleRank for two purposes: shifting the burden for query users (especially mobile users) to provide a list of users who intent to interact with at the very beginning, and the query user merely interact with a single user at given time.

Recommending dynamic circle is useful in many applications. For example, dynamic circle can be utilized to enhance the ranking results for content-based on-line social media (e.g., Gmail, WhatsApp, Facebook), where the information for each user can be adjusted based on the dynamic circle. Moreover, it can be used in location sharing services (e.g., Foursquare), where the ranking of locations can be adjusted based on a user X  X  dynamic circle at particular time point. To summarize, our contributions are as follows.  X  We propose a framework to discover per sonalized dynamic circle for a query  X  We propose a temporal probabilistic model (TCircleRank) to capture user X  X   X  We consider three fundamental factors in user interactions and propose  X  We proposes two methods to find the most appropriate time interval for our  X  We conduct experiments on real datasets to demonstrate the effectiveness of
This paper is organized as follows. Sectio n 2 presents the related work for this paper. Section 3 introduces TCircleRank and then discusses the two types of dynamic circle recommendati on. Section 4 presents two methods to infer time interval for TCircleRank. Section 5 shows the experimental results using the three real datasets. Sectio n 6 concludes this paper. 2.1 Relationship Link Prediction Friends suggestion can be modeled as relationship link prediction, if we predict the occurrence of an interaction at a giv en time. Liben-Nowell and Kleinberg [4] formalized the link prediction problem and employed random walk methods to address this problem. Yang et al. [10] proposed FIP model bridges between Collaborative Filtering (CF) and link prediction to provide a unified treatment for interest targeting and friendship prediction. Sun et al. [7] built a relationship building time prediction model, which uses learning algorithms to fit different distributions and then gets a probability for building relationships between two nodes. However, the edges are only con structed once, so we cannot use it for communication networks which change over time. 2.2 Friends Suggestion System Our main idea is based on Roth et al. [5], who proposed a friends recommendation system for Gmail using group information and three criteria. Gmail is a well-known mail system constructed by Google ,whichmayhavemanyhistory records to retrieve for friends suggestion. However, the algorithm in [5] could not work effectively for sparse data, insufficient interaction history resulting in some recommendation lists to be empty. Moreover, Time -Dependency of user interactions is not addressed in their work. Bartel and Dewan [1] enhanced [5] with a hierarchical structure, which re-orders the recommendation list by ranking past communication group and hierarchically predicts next group. Wu et al. [8] proposed a interactive learning framework to formulate the problem of recommending patent partners into a factor graph model. Similarly, no attention has been paid to address the problem of Time -Dependency of user interactions. We propose a framework for dynamic circle recommendation without requiring query users to provide any information as a prior. The system framework overview is illustrated in Fig. 2. Our system consists of two phases: Seedset Generation and Circle Suggestion. Seedset Generation automatically derives a set of core users ( referred to as seedset ) with the highest probability to be contacted with the query user. Seed set Generation is achieved by mining frequent and time-dependent communication patterns from historical interaction logs. Circle Suggestion phase aims to provide a group of friends whenever the query user intends to interact with multiple users at the same time ( referred to as circle ) based on the derived seedset. Once the query user chooses partial members from the list, our system updates the circle suggestion list by adding selected users to current seedset and then launching Circle Suggestion again to update the ranked list of friends. This process continues until no more friends can be suggested or the query user drops this session. Notice that our recommendation system provides a g eneric framework where the Circle Suggestion component can be replaced by other state-of-the-art algorithms to serve different requirements.
 3.1 TCircleRank When a query user attempts to share information (e.g., photos), the query user forms a list of friends in his/her mind. Without any assistance, query users has to manually and sequentially select the list of friends by scanning through their friends pool. This brings lots of unnecessary efforts. To solve this problem, we first propose Seedset Generation that uses TCircleRank to predict a set of users as seeds for Circle Suggestion.

We claim that if a query user interacts with a user in a particular time interval, the query user has a higher probability to interact with the user in the time interval as well . Fig. 1 verifies this by showing that, over 60% of interactions are strongly temporal-correlated with entropy is no greater than 0.5.
To address this, we propose a framework, TCircleRank, to predict a ranked list of friends who are most likely to be interacted with the query user a given time point. There are three factors considered in TCircleRank: 1.Frequency: Receivers who have more i nteractions with the query user are 2.Recency: More recent interactions s hould have more importance whereas 3.Time-Dependency: If receivers always interact with the query user in a Frequency is a straightforward yet effective measurement. Inspired from Interaction Rank [5], we unify Frequency with Recency into a single measurement as shown in Equation (1). [5] introduced a decaying parameter  X  ,to control the importance of every interacti on according to its time. Namely, every interaction decays exponentiation over time with a half life  X  . To fit TCircleRank, we form the two factors into a probability, which can be expressed as: where P ( R n ) is the probability of the query user interacting with R n in the past, between query user and R n . d is a decay function which is expressed as t now  X  t i  X  , where t now is the current time, t i is the time of interaction i  X  I , and a half-life parameter  X  that assigns score 1 to an interaction at current time and decays the importance of an interaction to 1 2 with the half-life  X  .

To incorporate the third factor, Time -Dependency , we formulate a conditional probability as: Equation (2) shows the probability of the query user interacting with R n in a time interval t ,where P ( R n  X  t )and P ( t ) can be derived like Equation 1 if we change I ( R n )to I ( R n  X  t )and I ( t ). To take into the following three factors into consideration, Frequency , Recency and Time -Dependency . Intuitively, we combine P ( R n )and P ( R n | t ) by a linear combination with a tunable parameter  X  , which can be formulated as follows: where  X  is the weight of Time -Dependency and the range of  X  is between 0 and 1. In general, Equation (3) does no t make sense, because when a candidate receiver R n has higher P ( R n ) and also has higher P ( R n | t ), it should be chosen with more chances. When both probabilities are not relative to each other, we should think about other methods to merge them. Calculating the mean between P ( R n )and P ( R n | t ) is a good idea to balance Equation (3), because it considers the influence from not only specific time intervals but also all time intervals. We adjust Equation (3) by using geometric mean, and thus the equations can be expressed as follows: where  X  represents the weight of a specific time interval. We find that geometric mean makes sense for our assumption: if one of P ( R n ) and P ( R n | t ) is much lower than the other, their mean should be closer to the lower one .
To refine Equation (4), we need to define the best  X  . According to our observations, we find that not all receivers have high time-dependency, as some shows similar behaviors regardless of any time points. In other words, receivers have different time-dependencies in different time intervals. Thus, time-dependencies will vary from person to person. To achieve this, we change  X  to another conditional probability, P ( t | R n ), which is indicates the probability of R n interacting with the query user in time interval t .If P ( t a higher time-dependency with the query user and vice versa. We then utilize Z-score to normalize importance of time-dependency. Because Z-score may be negative, we normalize Z-score by considering the central point from the range [-3, 3] to [0, 1]. Therefore, we can reformulate Equation (4) as follows: where NZ ( R n ) is the normalized Z-score and the range is from 0 to 1. 3.2 Seedset Generation Seedset Generation phase derives a set o f core friends who are most likely to be the receivers with related to the query user at given time. In a sense, Seedset Generation can serve as a Circle Sugge stion in a special case when query users intend to communicate with a single user instead of a group of users. In that case, Seedset Generation phase return s the potential receivers as a top-k list of users. Without specific groups information, Seedset Generation adopts TCircleRank mentioned before predicting which friends in the past are most likely to be the receivers, merely based on specified q uery time. The algorithm of Seedset Generation is summarized in Algorithm 1.
 Algorithm 1. Seedset Generation Algorithm 3.3 Circle Suggestion Circle Suggestion can be applied to any seed-based suggestion approach. In this subsection, we propose an enhanced approach, Circle Suggestion, by incorporating the state-of-the-art ranking model [5] with TCircleRank.
TCircleRank can be combined with Interaction Rank [5]. Interaction Rank only considered three factors, Frequency , Recency and Direction ,andwe consider one additional factor, Time -Dependency . Interaction Rank is formally defined as follows: where I out ( g ) is the set of outgoing interactions between a query user and a group, I in ( g ) is the set of incoming interactions and  X  out is the weight of outgoing interactions to represent Direction . To form a circle of friends, we adopt Intersection Weighed Score , which considers the intersection of group and seedset to weight the score of the group. As reported in [5], Interaction Weighted Score achieves the best performance among their proposals. Considering the following scenario: A user A has a regular behavior to call user B after user A finishes his works during 5:00pm and 6:00pm. One day, user A has finished his works early at 3:30pm and he calls user B immediately. Should the interaction at 3:30pm be considered as reference interactions in suggesting friends? To answer this question, we propose two approaches to identify the time intervals as references in ranking f riends. The main idea is to analyze the time distribution of interactions in one day and then determine an optimal time interval to describe the interaction behaviors. 4.1 Entropy Examination We utilize entropy as a measurement to determine the optimal time interval. A narrow time interval indicates regular behavior and a broad time interval indicates relatively irregular behavior. To measure the regularity of user behaviors, we start with 24 time slots and calculate the entropy for user interactions across each time slots. If the entropy is lower than a threshold, which means the level of regularity is higher enough, we choose ( h  X  1) / 2asthe optimal time interval, where h is the length of each time slot. Otherwise, we continue to split 24 hours into 16, 12, 8, 6 or 4 time slots until the entropy is lower than a threshold. 4.2 Close Peak Detection To detect the close peak, we only need to know the trends between each time slot. The goal is to find the cluster that contains the current time slot and then we can choose this cluster as optima l time interval. First, we consider the trend between two adjacent time slots. L arger number of interactions time slot should be less or equal  X  times than smaller number of interactions time slot, where  X  is a threshold for clustering time slots. Otherwise, the detection would be terminated and the final cluster has b een determined. Algorithm 2 describes Close Peak Detection in detail.
 Algorithm 2. Close Peak Detection 5.1 Datasets Social interactions present in calling and mailing behaviors. Therefore, we use calling behavior and mailing behavior datasets to simulate general social behavior dataset. In our experiment, we use three real datasets, Enron Mail 1 , call detail records (cdr) from Chunghwa Telecom (CHT) 2 and Reality Mining Dataset (RMD) from MIT 3 . The basic information of each dataset is shown in Table 1, where Enron Mail contains multiple interaction data and the others only contains single interaction data. Therefore, we adopt Enron Mail to evaluate Seedset Generation and Circle Suggestion, and the others two dataset to evalute Seedset Generation.
 5.2 Time Centrality Analysis In time centrality experimen t, we constrained the number of interaction between the user and the test query user exceeds four times, because we split the time of one day into four time slots of six hours.

We observe the difference of time centrality distribution between Enron and other datasets on Fig. 3 and find that Enron Mail has higher time centrality because its entropy is relatively lower than those of CHT and RMD. This indicates that mailing behavior is relatively regular for the same receiver, i.e., most user tend to send their mail to the same recei ver at particular time points. Unlike mailing behavior, calling behavior does not show strong time centrality. The calling behaviors in CHT and RMD are similar and they distribute around entropy 0 . 5. This explains that when the entropy is 0 . 5, the users call callees not only at the same time slot but also at the adjacent time slots. In other words, the regular calling behavior may shift to the temporally close time points occasionally. 5.3 Experimental Setup For Enron Mail, we chose 21,262 mails from Enron Mail to be the testing data and extracted 30 days before testing data to be the training data, where the rule in selecting testing data is as follows: (1) the mail should be sent to at least two receivers, or a group , and (2) the sender of the mail had sent no less than four mails before. CHT, which is a single interaction data, do not have group information, because CHT consists of cell phone call records and we only need to predict the most likely callee. We ch ose 30,295 records from CHT to be the testing data and extracted 30 days before testing data to be the training data. The testing data is all in the last day in CHT. We chose 44,166 records from RMD to be the testing data and extracted 30 days before testing data to be the training data. Parameter settings are shown in Table 2.

To evaluate the recommendation quality, we adopt normalized discounted cumulative gain (nDCG) as the measurements. DCG measures the gain of a hit result based on its rank in the list, where the top rank has more gain and the lower rank has less gain. 5.4 Circle Recommendation Quality Evaluation on Seedset Generation: Figure 4(a)(b)(c) shows the impact of each fundamental factor: Frequency (F), Recency (R) and Time-dpendency (T) on Seedset Generation quality. We also compare with RecentLog which directly generates the recommendation lis t in order by the recent contacts.
In Fig. 4(a), the pink line (All) is our proposal which considers all factors and outperforms other models with at most 4.2% increase in accuracy compare to the baseline. In Fig. 4(b), it is worth mentioning that the lines assemble the log-likelihood, because CHT only has o ne receiver for reco mmendation in each record. Our proposal outperforms oth er models with 26% increase in accuracy compare to the baseline when k is 5. The similar results could be found on RMD. Fig. 4(c) shows the nDCG comparison for four models and our proposal outperforms other models with 16% incr ease in accuracy to the baseline when k is 5. Based on above results, we conclude that TCircleRank presents consistent improvement than straightforward su ggestion such as frequency or recency. Evaluation on Circle Suggestion: Fig. 4(d) shows the performance comparison of Gmail Approach [5] and TCircleRank. Because Gmail Approach is a seed-based suggestion approach, we use Seedset Generation to generate a seedset with k = 3 and pass the input to Gmail and TCircleRank respectively. The final recommendation list contains the seeds which are different from the original Gmail Approach, but it will not affect the recommendation result because the seeds appears at the top of the list and they are also uncertain receivers for the query user. We use the same test data from Enron Mail as in Fig. 4(a). In Fig. 4(d), the x-axis is top-k (1  X  k  X  30) and the y-axis is the nDCG value, where the red line is Gmail Approach and the green line is TCircleRank. We can see that no matter in what situation, TCircleRank always has higher nDCG than Gmail Approach. 5.5 Time Interval Adjustment Quality We compare fixed time interval and our proposed methods. We set  X  to 0 . 5for Entropy Examination (EE) and  X  to 2 for Close Peak Detection (CPD). In Fix Time Interval (Fix), we fixed the time interval to 1 hour because it results in highest nDCG among all fixed time intervals.

Fig. 4(e) shows three methods comparison on CHT. The x-axis is top-k and the y-axis is the nDCG. CPD has the lowest nDCG among three methods, and it has 4% decrease in accura cy compare to Fix when k is 3. EE outperforms other methods, and it has 5% increase in accuracy compare to Fix when k is 3. On the other hand, Fig. 4(f) shows different comparison results on RMD, where the worst method among the three methods i s Fix. CPD becomes an useful method with 17% increase in accu racy compare to Fix when k is 3. This is because that RMD shows stronger time centrality against CHT. EE outperforms the other methods and achieves 24% increase in accuracy compare to Fix when k is 3. We conclude that EE is the best methods for our datasets. In summary, inferring relevant time interval is useful for dynamic circle recommendation. In this paper, we study the problem of suggesting friends by implicit social graph and temporal importance. In this paper, we propose a temporal probabilistic model (TCircleRank) that combine three factors, Frequency , Recency and Time -Dependency to address the fact that different users have different importance of time for a query user . Based on TCircleRank, Seedset Generation generates a set of seeds automatically. To recommend circles, we utilize the seedset generated by TCircleRank and considers an additional feature, Direction of interactions in our Circle Suggestion approach. We enhance the probabilistic model by further dynamically determine the time interval, which is a parameter to identify time-dependent interactions in derived time intervals. Our experiment results show that TCircleRank and dynamic circle recommendation system are effective on three real datasets, Enron Ma il, CHT call detail records and Reality Mining Dataset. We also show that inferring optimal time interval is useful for dynamic circle recommendation. We will extend TCircleRank by automatically deciding the number of seeds and using user clusters. We will further apply our approach in other applications such as content-based sharing and temporal community detection.

