 Coreference resolution is the problem of identifying which noun phrases (NPs, or mentions ) refer to the same real-world entity in a text or dialogue. Accord-ing to Webber (1979), coreference resolution can be decomposed into two complementary tasks:  X (1) identifying what a text potentially makes available for anaphoric reference and (2) constraining the can-didate set of a given anaphoric expression down to one possible choice. X  The first task is nowadays typ-ically formulated as an anaphoricity determination task, which aims to classify whether a given men-tion is anaphoric or not. Knowledge of anaphoric-ity could improve the precision of a coreference sys-tem, since non-anaphoric mentions do not have an antecedent and therefore do not need to be resolved.
Previous work on anaphoricity determination can be broadly divided into two categories (see Poe-sio et al. (2004) for an overview). Research in the first category aims to identify specific types of non-anaphoric phrases, with some identifying pleonas-tic it (using heuristics [e.g., Paice and Husk (1987), Lappin and Leass (1994), Kennedy and Boguraev (1996)], supervised approaches [e.g., Evans (2001), M  X uller (2006), Versley et al. (2008)], and distribu-tional methods [e.g., Bergsma et al. (2008)]), and others identifying non-anaphoric definite descrip-tions (using rule-based techniques [e.g., Vieira and Poesio (2000)] and unsupervised techniques [e.g., Bean and Riloff (1999)]).

On the other hand, research in the second cat-egory focuses on (1) determining the anaphoricity of all types of mentions, and (2) using the result-ing anaphoricity information to improve coreference resolution. For instance, Ng and Cardie (2002a) train an anaphoricity classifier to determine whether a mention is anaphoric, and let an independently-trained coreference system resolve only those men-tions that are classified as anaphoric. Somewhat sur-prisingly, they report that using anaphoricity infor-mation adversely affects the performance of their coreference system, as a result of an overly conser-vative anaphoricity classifier that misclassifies many anaphoric mentions as non-anaphoric. One solu-tion to this problem is to use anaphoricity infor-mation as soft constraints rather than as hard con-straints for coreference resolution. For instance, when searching for the best partition of a set of mentions, Luo (2007) combines the probabilities re-turned by an anaphoricity model and a coreference model to score a coreference partition, such that a partition is penalized whenever an anaphoric men-tion is resolved. Another, arguably more popular, solution is to  X  X mprove X  the output of the anaphoric-ity classifier by exploiting the dependency between anaphoricity determination and coreference resolu-tion. For instance, noting that Ng and Cardie X  X  anaphoricity classifier is too conservative, Ng (2004) first parameterizes their classifier such that its con-servativeness can be varied, and then tunes this pa-rameter so that the performance of the coreference system is maximized. As another example, De-nis and Baldridge (2007) and Finkel and Manning (2008) perform joint inference for anaphoricity de-termination and coreference resolution, by using In-teger Linear Programming (ILP) to enforce the con-sistency between the output of the anaphoricity clas-sifier and that of the coreference classifier.
While this ILP approach and Ng X  X  (2004) ap-proach to improving the output of an anaphoricity classifier both result in increased coreference per-formance, they have complementary strengths and weaknesses. Specifically, Ng X  X  approach can di-rectly optimize the desired coreference evaluation metric, but by treating the coreference system as a black box during the optimization process, it does not exploit the potentially useful pairwise probabil-ities provided by the coreference classifier. On the other hand, the ILP approach does exploit such pair-wise probabilities, but optimizes an objective func-tion that does not necessarily have any correlation with the desired evaluation metric.

Our goals in this paper are two-fold. First, moti-vated in part by previous work, we propose a graph-cut-based approach to anaphoricity determination that combines the strengths of Ng X  X  approach and the ILP approach, by exploiting pairwise corefer-ence probabilities when co-ordinating anaphoricity and coreference decisions, and at the same time al-lowing direct optimization of the desired corefer-ence evaluation metric. Second, we compare our cut-based approach with the five aforementioned ap-proaches to anaphoricity determination (namely, Ng and Cardie (2002a), Ng (2004), Luo (2007), De-nis and Baldridge (2007), and Finkel and Manning (2008)) in terms of their effectiveness in improv-ing a learning-based coreference system. To our knowledge, there has been no attempt to perform a comparative evaluation of existing approaches to anaphoricity determination. It is worth noting, in particular, that Luo (2007), Denis and Baldridge (2007), and Finkel and Manning (2008) evaluate their approaches on true mentions extracted from the answer keys. Since true mentions are com-posed of all the NPs involved in coreference rela-tions but only a subset of the singleton NPs (i.e., NPs that are not coreferent with any other NPs) in a text, evaluating the utility of anaphoricity deter-mination on true mentions to some extent defeats the purpose of performing anaphoricity determina-tion, which precisely aims to identify non-anaphoric mentions. Hence, we hope that our evaluation on mentions extracted using an NP chunker can reveal their comparative strengths and weaknesses.

We perform our evaluation on three ACE coref-erence data sets using two commonly-used scor-ing programs. Experimental results show that (1) employing our cut-based approach to anaphoric-ity determination yields a coreference system that achieves the best performance for all six data-set/scoring-program combinations, and (2) among the five existing approaches, none performs consis-tently better than the others.

The rest of the paper is organized as follows. Sec-tion 2 describes our learning-based coreference sys-tem. In Section 3, we give an overview of the five baseline approaches to anaphoricity determination. Section 4 provides the details of our graph-cut-based approach. Finally, we present evaluation results in Section 5 and conclude in Section 6. Our baseline coreference system implements the standard machine learning approach to coreference resolution (see Ng and Cardie (2002b), Ponzetto and Strube (2006), Yang and Su (2007), for instance), which consists of probabilistic classification and clustering , as described below. 2.1 The Standard Machine Learning Approach We use maximum entropy (MaxEnt) classification (Berger et al., 1996) in conjunction with the 33 fea-tures described in Ng (2007) to acquire a model, P for determining the probability that two mentions, m P C ( m i , m j ) = P ( COREFERENT | m i , m j ) . In the rest of the paper, we will refer to P as the pairwise coreference probability between m and m ploy Soon et al. X  X  (2001) procedure, relying on the training texts to create (1) a positive instance for each anaphoric mention, m tecedent, m paired with each of the intervening mentions, m m parameters of the MaxEnt model, we use 100 it-erations of the improved iterative scaling (IIS) al-gorithm (Della Pietra et al., 1997) together with a Gaussian prior to prevent overfitting.

After training, the coreference model is used to select an antecedent for each mention in a test text. Following Soon et al. (2001), we select as the an-tecedent of each mention, m ing mention that is classified as coreferent with m where mention pairs with pairwise probabilities of at least 0.5 are considered coreferent. If no such men-tion exists, no antecedent will be selected for m essence, we use a closest-first clustering algorithm to impose a partitioning on the mentions. As mentioned previously, we will use five existing approaches to anaphoricity determination as base-lines in our evaluation. Common to all five ap-proaches is the acquisition of an anaphoricity model, P m P A ( m j ) = P ( ANAPHORIC | m j ) To train P and create one training instance from each mention in a training text. Hence, each instance represents a single mention and consists of 37 features that are potentially useful for distinguishing anaphoric and non-anaphoric mentions (see Ng and Cardie (2002a)
The classification of a training instance  X  one directly from the coreference chains in the associ-ated training text. Like the coreference model, the anaphoricity model is trained by running 100 iter-ations of IIS with a Guassian prior. The resulting model is then applied to a test text to determine the probability that a mention is anaphoric.

In the rest of this section, we provide an overview of the five baseline approaches to anaphoricity deter-mination. We will characterize each approach along two dimensions: (1) whether it attempts to improve P anaphoricity information is used as hard constraints or soft constraints by the coreference system. 3.1 Ng and Cardie (2002a) Ng and Cardie (N&amp;C) do not attempt to improve P simply using the anaphoricity information it pro-vides as hard constraints for coreference resolution. Specifically, the coreference system resolves only those mentions that are determined as anaphoric by P classification threshold is at least 0.5. 3.2 Ng (2004) P as N&amp;C report a significant drop in the perfor-mance of their coreference system after incorpo-rating anaphoricity information, owing in part to their overly conservative anaphoricity model that misclassifies many anaphoric mentions as non-anaphoric. To address this problem, Ng (2004) at-tempts to improve P parameter c to adjust the conservativeness of P as follows. Given a specific c (0  X  c  X  1), a mention m only if P that decreasing c yields progressively less conserva-tive anaphoricity models (i.e., more mentions will be classified as anaphoric). The parameter c is tuned using held-out development data to optimize the per-formance of the coreference system that employs anaphoricity information (as hard constraints). In essence, Ng X  X  approach to improving P the coreference system as a black box, merely se-lecting the value for c that yields the best score ac-cording to the desired coreference evaluation met-ric on the held-out data. In particular, unlike some of the anaphoricity determination approaches dis-cussed later on, this approach does not attempt to co-ordinate the anaphoricity decisions and the pairwise coreference decisions. Nevertheless, as mentioned before, a unique strength of this approach lies in its ability to optimize directly the desired coreference evaluation metric. 3.3 Luo (2007) Among the five anaphoricity determination ap-proaches, Luo X  X  (2007) is the only one where anaphoricity information is exploited as soft con-straints by the coreference model, P
Specifically, Luo X  X  algorithm attempts to find the most probable coreference partition of a given set of mentions. To do so, it scores a partition us-ing the probabilities provided by P us illustrate how this can be done via the follow-ing example. Given a document with four men-tions, m { [ m 1 , m 3 , m 4 ] , [ m 2 ] } , automatically produced by some coreference system, Luo X  X  algorithm scores the partition by considering the mentions in the document in a left-to-right manner. As the first mention in the document, m and the probability that it is non-anaphoric is 1  X  P according to the partition is non-anaphoric, and the probability of its being non-anaphoric is 1  X  P erent with m nally, it processes m and m the cluster consisting of m be max( P Luo X  X  algorithm. The score of this partition is the product of these four probabilities, two provided by P is penalized whenever a mention that is unlikely to be anaphoric (according to P some antecedent according to the partition.

Nevertheless, it is computationally infeasible to score all possible partitions given a set of mentions, as the number of partitions is exponential in the number of mentions. To cope with this computa-tional complexity, Luo employs the algorithm pro-posed in Luo et al. (2004) to heuristically search for the most probable partition by performing a beam search through a Bell tree . In essence, only the most promising nodes in the tree are expanded at each step of the search process, where the  X  X romise X  of a node is defined in terms of the probabilities pro-vided by P this process can be found in Luo et al. (2004). 3.4 Denis and Baldridge (2007) As mentioned before, Denis and Baldridge (D&amp;B) aim to improve the outputs of P ploying Integer Linear Programming (ILP) to per-form joint inference for anaphoricity determination and coreference resolution. The ILP approach is mo-tivated by the observation that the outputs of these two models have to satisfy certain constraints. For instance, if P not coreferent with any other mentions in the as-sociated text, then P non-anaphoric. In practice, however, since P P other constraints cannot be enforced.

ILP provides a framework for jointly determining anaphoricity and coreference decisions for a given set of mentions based on the probabilities provided by P sions satisfy the desired constraints while respecting as much as possible the probabilistic decisions made by the independently-trained P cally, an ILP program is composed of an objective function to be optimized subject to a set of linear constraints, and is created for each test text D as fol-lows. Let M be the set of mentions in D , and P be the set of mention pairs formed from M (i.e., P = { ( m i , m j ) | m i , m j  X  M, i &lt; j } ). Each ILP pro-gram has a set of indicator variables . In our case, we have one binary-valued variable for each anaphoric-ity decision and coreference decision to be made by an ILP solver. Following D&amp;B X  X  notation, we use y to denote the anaphoricity decision for mention m and x ing mentions m is associated with an assignment cost. Specifically, let c C x the complementary cost of setting x similarly define the cost associated with each y ting c A 1, and  X  c A tary cost of setting y aim to optimize the following objective function: min subject to a set of manually-specified linear con-straints. D&amp;B specify four types of constraints: (1) each indicator variable can take on a value of 0 or 1; (2) if m anaphoric ( y it must be coreferent with some preceding mention m coreferent with any mention. Note that we are mini-mizing the objective function, since each assignment cost is expressed as a negative logarithm value. We use lp solve 2 , an ILP solver, to solve this program. It is easy to see that enforcing consistency using ILP amounts to employing anaphoricity informa-tion as hard constraints for the coreference system. Since transitivity is not guaranteed by the above con-straints, we follow D&amp;B and use the aggressive-merge clustering algorithm to put any two mentions that are posited as coreferent into the same cluster. 3.5 Finkel and Manning (2008) Finkel and Manning (F&amp;M) present one simple ex-tension to D&amp;B X  X  ILP approach: augmenting the set of linear constraints with the transitivity con-straint. This ensures that if x then x do not need to be co-ordinated by a separate cluster-ing mechanism. As mentioned in the introduction, our graph-cut-based approach to anaphoricity determination is mo-tivated by Ng X  X  (2004) and the ILP approach, aim-ing to combine the strengths of the two approaches. Specifically, like Ng (2004), our approach allows di-rect optimization of the desired coreference evalua-tion metric; and like the ILP approach, our approach co-ordinates anaphoricity decisions and coreference decisions by exploiting the pairwise probabilities provided by a coreference model. In this section, we will introduce our cut-based approach, starting by reviewing concepts related to minimum cuts. 4.1 The Minimum Cut Problem Setting Assume that we want to partition a set of n objects, { x 1 , x 2 , . . . , x n } two types of scores concerning the x  X  X  and the Y  X  X : membership scores and similarity scores. The mem-bership score, mem tity that approximates the  X  X ffinity X  of x the other hand, the similarity score, sim ( x a non-negative quantity that provides an estimate of the similarity between x
Informally, our goal is to maximize each object X  X  net happiness, which is computed by subtracting its membership score of the class it is not assigned to from its membership score of the class it is assigned to. However, at the same time, we want to avoid assigning similar objects to different classes. More formally, we seek to minimize the partition cost:
There exists an efficient algorithm for solving this seemingly intractable problem when it is recast as a graph problem. So, let us construct a graph, G , based on the available scores as follows. First, we create two nodes, s and t (called the source and the sink , respectively), to represent the two classes. Then, we create one  X  X bject X  node for each of the n objects. For each object, x edges, one from s to x and the other from x Moreover, for each pair of object nodes, x we add two directed edges (one from x another from x sim ( x j , x k ) . A cut in G is defined as a partition of the nodes into two sets, S and T , such that s  X  S , sum of the weights of the edges going from S to T . A minimum cut is a cut that has the lowest cost among all the cuts of G . It can be proved that find-ing a minimum cut of G is equivalent to minimizing the partition cost defined as above. The main advan-tage of recasting the above minimization problem as a graph-cut problem is that there exist polynomial-time maxflow algorithms for finding a minimum cut. 4.2 Graph Construction Next, we show how to construct the graph to which the mincut-finding algorithm will be applied. The ultimate goal is to use the mincut finder to parti-tion a given set of mentions into two subsets, so that our coreference system will attempt to resolve only those mentions that are in the subset correspond-ing to ANAPHORIC . In other words, the resulting anaphoricity information will be used to identify and filter non-anaphoric mentions prior to coreference resolution. The graph construction process, which takes as input a set of mentions in a test text, is com-posed of three steps, as described below.
 Step 1: Mimicking Ng and Cardie (2002a) To construct the desired graph, G , we first create the source, s , and the sink, t , that represent the tively. Then, for each mention m we create one node, n , and two edges, sn and nt , connecting n to s and t . Next, we compute w and w A natural choice would be to use P weight of sn and ( 1  X  w will assume throughout that w 1  X  w sn .) If we apply the mincut finder to the cur-rent G , it should be easy to see that (1) any node n where w node n where w and (3) any remaining node will be assigned to one of them. (Without loss of generality, we assume that such nodes are assigned to s .) Hence, the set of mentions determined as anaphoric by the mincut finder is identical to the set of mentions classified as anaphoric by P that is functionally equivalent to N&amp;C X  X . This also implies that G shares the same potential weakness as P mention as anaphoric.
 Step 2: Mimicking Ng (2004) One way to  X  X mprove X  G is to make it functionally equivalent to Ng X  X  (2004) approach. Specifically, our goal in Step 2 is to modify the edge weights in G (without adding new edges or nodes) such that the mincut finder classifies a node n as anaphoric if and only if P from Step 1 that the mincut finder classifies a node n as anaphoric if and only if w to achieve the aforementioned goal, we just need to ensure the property that w P a sigmoid function: where  X  is a constant that controls the  X  X teepness X  sigmoid satisfies the aforementioned property. As noted before, w spired by Ng (2004), the value of the parameter c will be tuned based on held-out development data to maximize coreference performance.
 Step 3: Incorporating coreference probabilities Like Ng X  X  (2004) approach, the current G suffers from the weakness of not exploiting the pairwise probabilities provided by P probabilities can be naturally incorporated into G as similarity scores. To see why these pairwise prob-abilities are potentially useful, consider two men-tions, m are both anaphoric. Assume that the graph G con-structed from D has these edge weights: w w ilarity scores, the mincut finder will correctly deter-mine m non-anaphoric. On the other hand, if the similarity scores are taken into account, the mincut finder will correctly determine both mentions as anaphoric.
The above discussion suggests that it is desirable to incorporate edges between two nodes, i and j , when m P plementation, we tune this new parameter, c with c (see Step 2) on development data to maxi-mize coreference performance. While it is possible to imagine scenarios where incorporating pairwise probabilities is not beneficial, we believe that these probabilities represent a source of information that could be profitably exploited via learning appropri-ate values for c and c 5.1 Experimental Setup For evaluation, we use the ACE Phase II coreference corpus, which is composed of three sections: Broad-cast News (BNEWS), Newspaper (NPAPER), and Newswire (NWIRE). Each section is in turn com-posed of a training set and a test set. For each section, we train an anaphoricity model, P a coreference model, P evaluate P ent approaches to anaphoricity determination) on the test set. As noted before, the mentions used are ex-tracted automatically using an in-house NP chunker. Results are reported in terms of recall (R), precision (P), and F-measure (F), obtained using two corefer-ence scoring programs: the MUC scorer (Vilain et al., 1995) and the CEAF scorer (Luo, 2005). 5.2 Results and Discussions  X  X o Anaphoricity X  baseline. Our first baseline is the learning-based coreference system described in Section 2, which does not employ any anaphoric-ity determination algorithm. Results using the MUC scorer and the CEAF scorer are shown in row 1 of Tables 1 and 2, respectively. As we can see, MUC F-score ranges from 55.0 to 61.7 and CEAF F-score ranges from 55.3 to 61.2.
 Duplicated Ng and Cardie (2002a) baseline. Next, we evaluate our second baseline, which is N&amp;C X  X  coreference system. As seen from row 2 of Tables 1 and 2, MUC F-score ranges from 50.5 to 60.0 and CEAF F-score ranges from 54.5 to 59.4. In comparison to the first baseline, we see drops in F-score in all cases as a result of considerable pre-cipitation in recall, which can in turn be attributed to the misclassification of many anaphoric mentions by the anaphoricity model. More specifically, MUC F-score decreases by 1.7 X 5.5%, whereas CEAF F-score decreases by 0.5 X 1.8%. These trends are con-sistent with those reported in N&amp;C X  X  paper. Duplicated Ng (2004) baseline. Our third base-line is Ng X  X  (2004) coreference system. Recall that this resolver requires the tuning of the conservative-ness parameter, c , on held-out data. To ensure a fair comparison between different resolvers, we do not rely on additional data for parameter tuning. Rather, c , for which we tested values from 0 to 1 in steps of P 1 and 2, where MUC F-score ranges from 57.0 to 61.9 and CEAF F-score ranges from 55.5 to 60.6. In comparison to the first baseline, we obtain mixed re-sults: MUC F-score increases by 2.0% and 0.2% for BNEWS and NPAPER, respectively, but drops by 0.1% for NWIRE; CEAF F-score increases by 0.2% and 1.1% for BNEWS and NPAPER, respectively, but drops by 0.6% for NWIRE.
 Duplicated Luo (2007) baseline. Results of our fourth baseline, in which the anaphoricity and pair-wise coreference probabilities are combined to score a partition using Luo X  X  system, are shown in row 4 of Tables 1 and 2. Here, we see that MUC F-score ranges from 55.8 to 62.1 and CEAF F-score ranges from 56.3 to 61.5. In comparison to the first base-in all cases: MUC F-score increases by 0.2 X 0.8%, whereas CEAF F-score increases by 0.3 X 1.0%.
 Duplicated Denis and Baldridge (2007) base-line. Our fifth baseline performs joint inference for anaphoricity determination and coreference res-olution using D&amp;B X  X  ILP approach. Results are shown in row 5 of Tables 1 and 2, where MUC F-score ranges from 56.2 to 63.8 and CEAF F-score ranges from 56.9 to 61.5. In comparison to the first baseline, MUC F-score always increases, with improvements ranging from 1.2% to 2.1%. CEAF results are mixed: F-score increases signifi-cantly for BNEWS, drops insignificantly for NPA-PER, and rises insignificantly for NWIRE. The dif-ference in performance trends between the two scor-ers can be attributed to the fact that the MUC scorer typically under-penalizes errors due to over-merging, which occurs as a result of D&amp;B X  X  using the aggressive-merge clustering algorithm. In addi-tion, we can see that D&amp;B X  X  approach performs at least as good as Luo X  X  approach in all but one case (NPAPER/CEAF).
 Duplicated Finkel and Manning (2008) baseline. Our sixth baseline is F&amp;M X  X  coreference system, which is essentially D&amp;B X  X  approach augmented with transitivity constraints. Results are shown in row 6 of Tables 1 and 2, where MUC F-score ranges from 55.8 to 63.8 and CEAF F-score ranges from 56.7 to 61.3. In comparison to the D&amp;B baseline, we see that F-score never improves, regardless of which scoring program is used. In fact, recall slightly de-teriorates, and this can be attributed to F&amp;M X  X  ob-servation that transitivity constraints tend to produce smaller clusters. Overall, these results suggest that enforcing transitivity for coreference resolution is not useful for improving coreference performance. Our graph-cut-based approach. Finally, we evaluate the coreference system using the anaphoric-ity information provided by our cut-based approach. jointly tuning the two parameters, c and c ing, we tested values from 0 to 1 in steps of 0.1 for both c and c bles 1 and 2. As we can see, MUC F-score ranges from 59.4 to 63.9 and CEAF F-score ranges from 59.4 to 63.8, representing a significant improvement over the first baseline in all six cases: MUC F-score rises by 2.0 X 4.4% and CEAF F-score rises by 2.6 X  4.1%. Such an improvement can be attributed to a large gain in precision and a smaller drop in recall. This implies that our mincut algorithm has success-fully identified many non-anaphoric mentions, but in comparison to N&amp;C X  X  approach, it misclassifies a smaller number of anaphoric mentions. Moreover, our approach achieves the best F-score for each data-set/scoring-program combination, and significantly outperforms the best baseline (D&amp;B) in all but two cases, NPAPER/MUC and NWIRE/MUC. We have presented a graph-cut-based approach to anaphoricity determination that (1) directly opti-mizes the desired coreference evaluation metric through parameterization and (2) exploits the proba-bilities provided by the coreference model when co-ordinating anaphoricity and coreference decisions. Another major contribution of our work is the em-pirical comparison of our approach against five ex-isting approaches to anaphoricity determination in terms of their effectiveness in improving a coref-erence system using automatically extracted men-tions. Our approach demonstrates effectiveness and robustness by achieving the best result on all three ACE data sets according to both the MUC scorer and the CEAF scorer. We believe that our cut-based approach provides a flexible mechanism for co-ordinating anaphoricity and coreference decisions. We thank the three anonymous reviewers for their invaluable comments, Kazi Saidul Hasan for his help on using lp solve , and NSF for its gracious sup-port of this work under Grant IIS-0812261. The de-scription of the minimum cut framework in Section 4.1 was inspired by Pang and Lee (2004).

