 In this paper, we introduce a novel method for mapping high-level instructions to commands in an external environment. These instructions spec-ify goals to be achieved without explicitly stat-ing all the required steps. For example, consider the first instruction in Figure 1  X   X  X pen control panel. X  The three GUI commands required for its successful execution are not explicitly described in the text, and need to be inferred by the user. This dependence on domain knowledge makes the automatic interpretation of high-level instructions particularly challenging.

The standard approach to this task is to start with both a manually-developed model of the en-vironment, and rules for interpreting high-level in-structions in the context of this model (Agre and Chapman, 1988; Di Eugenio and White, 1992; Di Eugenio, 1992; Webber et al., 1995). Given both the model and the rules, logic-based infer-ence is used to automatically fill in the intermedi-ate steps missing from the original instructions.
Our approach, in contrast, operates directly on the textual instructions in the context of the in-teractive environment, while requiring no addi-tional information. By interacting with the en-vironment and observing the resulting feedback, our method automatically learns both the mapping between the text and the commands, and the un-derlying model of the environment. One partic-ularly noteworthy aspect of our solution is the in-terplay between the evolving mapping and the pro-gressively acquired environment model as the sys-tem learns how to interpret the text. Recording the state transitions observed during interpretation al-lows the algorithm to construct a relevant model of the environment. At the same time, the envi-ronment model enables the algorithm to consider the consequences of commands before they are ex-ecuted, thereby improving the accuracy of inter-pretation. Our method efficiently achieves both of these goals as part of a policy-gradient reinforce-ment learning algorithm.

We apply our method to the task of mapping software troubleshooting guides to GUI actions in the Windows environment (Branavan et al., 2009; Kushman et al., 2009). The key findings of our experiments are threefold. First, the algorithm can accurately interpret 61.5% of high-level in-structions, which cannot be handled by previous statistical systems. Second, we demonstrate that explicitly modeling the environment also greatly improves the accuracy of processing low-level in-structions, yielding a 14% absolute increase in performance over a competitive baseline (Brana-van et al., 2009). Finally, we show the importance of constructing an environment model relevant to the language interpretation task  X  using textual instructions enables us to bias exploration toward transitions relevant for language learning. This ap-proach yields superior performance compared to a policy that relies on an environment model con-structed via random exploration. Interpreting Instructions Our approach is most closely related to the reinforcement learning algo-rithm for mapping text instructions to commands developed by Branavan et al. (2009) (see Section 4 for more detail). Their method is predicated on the assumption that each command to be executed is explicitly specified in the instruction text. This as-sumption of a direct correspondence between the text and the environment is not unique to that pa-per, being inherent in other work on grounded lan-guage learning (Siskind, 2001; Oates, 2001; Yu and Ballard, 2004; Fleischman and Roy, 2005; Mooney, 2008; Liang et al., 2009; Matuszek et al., 2010). A notable exception is the approach of Eisenstein et al. (2009), which learns how an environment operates by reading text, rather than learning an explicit mapping from the text to the environment. For example, their method can learn the rules of a card game given instructions for how to play.

Many instances of work on instruction inter-pretation are replete with examples where in-structions are formulated as high-level goals, tar-geted at users with relevant knowledge (Winograd, 1972; Di Eugenio, 1992; Webber et al., 1995; MacMahon et al., 2006). Not surprisingly, auto-matic approaches for processing such instructions have relied on hand-engineered world knowledge to reason about the preconditions and effects of environment commands. The assumption of a fully specified environment model is also com-mon in work on semantics in the linguistics lit-erature (Lascarides and Asher, 2004). While our approach learns to analyze instructions in a goal-directed manner, it does not require manual speci-fication of relevant environment knowledge.
 Reinforcement Learning Our work combines ideas of two traditionally disparate approaches to reinforcement learning (Sutton and Barto, 1998). The first approach, model-based learning , con-structs a model of the environment in which the learner operates (e.g., modeling location, velocity, and acceleration in robot navigation). It then com-putes a policy directly from the rich information represented in the induced environment model. In the NLP literature, model-based reinforcement learning techniques are commonly used for dia-log management (Singh et al., 2002; Lemon and Konstas, 2009; Schatzmann and Young, 2009). However, if the environment cannot be accurately approximated by a compact representation, these methods perform poorly (Boyan and Moore, 1995; Jong and Stone, 2007). Our instruction interpreta-tion task falls into this latter category, 2 rendering standard model-based learning ineffective.

The second approach  X  model-free methods such as policy learning  X  aims to select the opti-E 0  X  p ( E 0 |E ,c ) , and the list of mapped words is updated to W mal action at every step, without explicitly con-structing a model of the environment. While pol-icy learners can effectively operate in complex en-vironments, they are not designed to benefit from a learned environment model. We address this limitation by expanding a policy learning algo-rithm to take advantage of a partial environment model estimated during learning. The approach of conditioning the policy function on future reach-able states is similar in concept to the use of post-decision state information in the approximate dy-namic programming framework (Powell, 2007). Our goal is to map instructions expressed in a nat-ural language document d into the corresponding sequence of commands ~c =  X  c 1 ,...,c m  X  exe-cutable in an environment. As input, we are given a set of raw instruction documents, an environ-ment, and a reward function as described below.
The environment is formalized as its states and transition function. An environment state E spec-ifies the objects accessible in the environment at a given time step, along with the objects X  prop-erties. The environment state transition function p ( E 0 |E ,c ) encodes how the state changes from E to E 0 in response to a command c . 3 During learn-ing, this function is not known, but samples from it can be collected by executing commands and ob-serving the resulting environment state. A real-valued reward function measures how well a com-mand sequence ~c achieves the task described in the document.

We posit that a document d is composed of a sequence of instructions, each of which can take one of two forms:  X  Low-level instructions : these explicitly de- X  High-level instructions : these correspond to Our innovation takes place within a previously established general framework for the task of mapping instructions to commands (Branavan et al., 2009). This framework formalizes the mapping process as a Markov Decision Process (MDP) (Sutton and Barto, 1998), with actions encoding individual instruction-to-command map-pings, and states representing partial interpreta-tions of the document. In this section, we review the details of this framework. trol panel. X  E d is the starting state, and c 1 through c are candidate commands. Environment states are E States and Actions A document is interpreted by incrementally constructing a sequence of ac-tions. Each action selects a word span from the document, and maps it to one environment com-mand. To predict actions sequentially, we track the states of the environment and the document over time as shown in Figure 2. This mapping state s is a tuple ( E ,d,W ) where E is the current environ-ment state, d is the document being interpreted, and W is the list of word spans selected by previ-ous actions. The mapping state s is observed prior to selecting each action.

The mapping action a is a tuple ( c,W a ) that represents the joint selection of a span of words W a and an environment command c . Some of the candidate actions would correspond to the correct instruction mappings, e.g., ( c = double-click sys-tem , W a =  X  X ouble click system X ). Others such as ( c = left-click system , W a =  X  X ouble click sys-tem X ) would be erroneous. The algorithm learns to interpret instructions by learning to construct sequences of actions that assign the correct com-mands to the words.

The interpretation of a document d begins at an initial mapping state s 0 = ( E d ,d,  X  ) , E d being the starting state of the environment for the document. Given a state s = ( E ,d,W ) , the space of possi-ble actions a = ( c,W a ) is defined by enumerat-ing sub-spans of unused words in d and candidate commands in E . 5 The action to execute, a , is se-lected based on a policy function p ( a | s ) by find-ing arg max a p ( a | s ) . Performing action a in state s = ( E ,d,W ) results in a new state s 0 according to the distribution p ( s 0 | s,a ) , where: The process of selecting and executing actions is repeated until all the words in d have been mapped. 6 A Log-Linear Parameterization The policy function used for action selection is defined as a log-linear distribution over actions: where  X   X  R n is a weight vector, and  X  ( s,a )  X  R n is an n -dimensional feature function. This repre-sentation has the flexibility to incorporate a variety of features computed on the states and actions. Reinforcement Learning Parameters of the policy function p ( a | s ;  X  ) are estimated to max-imize the expected future reward for analyzing each document d  X  D : where h = ( s 0 ,a 0 ,...,s m  X  1 ,a m  X  1 ,s m ) is a history that records the analysis of document d , p ( h |  X  ) is the probability of selecting this analysis given policy parameters  X  , and the reward r ( h ) is a real valued indication of the quality of h . We expand the scope of learning approaches for automatic document interpretation by enabling the analysis of high-level instructions . The main chal-lenge in processing these instructions is that, in contrast to their low-level counterparts, they cor-respond to sequences of one or more commands. A simple way to enable this one-to-many mapping is to allow actions that do not consume words (i.e., | W a | = 0 ). The sequence of actions can then be constructed incrementally using the algorithm de-scribed above. However, this change significantly complicates the interpretation problem  X  we need to be able to predict commands that are not di-rectly described by any words, and allowing ac-tion sequences significantly increases the space of possibilities for each instruction. Since we can-not enumerate all possible sequences at decision time, we limit the space of possibilities by learn-ing which sequences are likely to be relevant for the current instruction.

To motivate the approach, consider the deci-sion problem in Figure 3, where we need to find a command sequence for the high-level instruction  X  X pen control panel. X  The algorithm focuses on command sequences leading to environment states where the control panel icon was previously ob-served. The information about such states is ac-quired during exploration and is stored in a partial environment model q ( E 0 |E ,c ) .

Our goal is to map high-level instructions to command sequences by leveraging knowledge about the long-term effects of commands. We do this by integrating the partial environment model into the policy function. Specifically, we modify the log-linear policy p ( a | s ; q, X  ) by adding look-ahead features  X  ( s,a,q ) which complement the local features used in the previous model. These look-ahead features incorporate various measure-ments that characterize the potential of future states reachable via the selected action. Although primarily designed to analyze high-level instruc-tions, this approach is also useful for mapping low-level instructions.

Below, we first describe how we estimate the partial environment transition model and how this model is used to compute the look-ahead features. This is followed by the details of parameter esti-mation for our algorithm. 5.1 Partial Environment Transition Model To compute the look-ahead features, we first need to collect statistics about the environment transi-tion function p ( E 0 |E ,c ) . An example of an envi-ronment transition is the change caused by click-ing on the  X  X tart X  button. We collect this informa-tion through observation, and build a partial envi-ronment transition model q ( E 0 |E ,c ) .

One possible strategy for constructing q is to ob-serve the effects of executing random commands in the environment. In a complex environment, however, such a strategy is unlikely to produce state samples relevant to our text analysis task. Instead, we use the training documents to guide the sampling process. During training, we execute the command sequences predicted by the policy function in the environment, caching the resulting state transitions. Initially, these commands may have little connection to the actual instructions. As learning progresses and the quality of the interpre-tation improves, more promising parts of the en-vironment will be observed. This process yields samples that are biased toward the content of the documents. 5.2 Look-Ahead Features We wish to select actions that allow for the best follow-up actions, thereby finding the analysis with the highest total reward for a given docu-ment. In practice, however, we do not have in-formation about the effects of all possible future actions. Instead, we capitalize on the state tran-sitions observed during the sampling process de-scribed above, allowing us to incrementally build an environment model of actions and their effects.
Based on this transition information, we can es-timate the usefulness of actions by considering the properties of states they can reach. For instance, some states might have very low immediate re-ward, indicating that they are unlikely to be part of the best analysis for the document. While the usefulness of most states is hard to determine, it correlates with various properties of the state. We encode the following properties as look-ahead fea-tures in our policy:  X  The highest reward achievable by an action  X  The length of the above action sequence.  X  The average reward received at the envi-
Because we can never encounter all states and all actions, our environment model is always in-complete and these properties can only be com-puted based on partial information. Moreover, the predictive strength of the properties is not known in advance. Therefore we incorporate them as sep-arate features in the model, and allow the learning process to estimate their weights. In particular, we select actions a based on the current state s and the partial environment model q , resulting in the following policy definition: where the feature representation  X  ( s,a,q ) has been extended to be a function of q . 5.3 Parameter Estimation The learning algorithm is provided with a set of documents d  X  D , an environment in which to ex-ecute command sequences ~c , and a reward func-tion r ( h ) . The goal is to estimate two sets of parameters: 1) the parameters  X  of the policy function, and 2) the partial environment transition model q ( E 0 |E ,c ) , which is the observed portion of the true model p ( E 0 |E ,c ) . These parameters are mutually dependent:  X  is defined over a feature space dependent on q , and q is sampled according to the policy function parameterized by  X  .

Algorithm 1 shows the procedure for joint learning of these parameters. As in standard policy gradient learning (Sutton et al., 2000), the algo-rithm iterates over all documents d  X  D (steps 1, 2), selecting and executing actions in the environ-ment (steps 3 to 6). The resulting reward is used to update the parameters  X  (steps 8, 9). In the new joint learning setting, this process also yields sam-ples of state transitions which are used to estimate q ( E 0 |E ,c ) (step 7). This updated q is then used to compute the feature functions  X  ( s,a,q ) during the next iteration of learning (step 4). This pro-cess is repeated until the total reward on training documents converges.

Algorithm 1: A policy gradient algorithm that also learns a model of the environment.

This algorithm capitalizes on the synergy be-tween  X  and q . As learning proceeds, the method discovers a more complete state transition function q , which improves the accuracy of the look-ahead features, and ultimately, the quality of the result-ing policy. An improved policy function in turn produces state samples that are more relevant to the document interpretation task. We apply our algorithm to the task of interpret-ing help documents to perform software related tasks (Branavan et al., 2009; Kushman et al., 2009). Specifically, we consider documents from Microsoft X  X  Help and Support website. 7 As in prior work, we use a virtual machine set-up to al-low our method to interact with a Windows 2000 environment.
 Environment States and Actions In this appli-cation of our model, the environment state is the set of visible user interface (UI) objects, along with their properties (e.g., the object X  X  label, par-ent window, etc). The environment commands consist of the UI commands left-click , right-click , requires a UI object as a parameter, while type-into needs an additional parameter containing the text to be typed. On average, at each step of the in-terpretation process, the branching factor is 27.14 commands.
 Reward Function An ideal reward function would be to verify whether the task specified by the help document was correctly completed. Since such verification is a challenging task, we rely on a noisy approximation: we assume that each sen-tence specifies at least one command, and that the text describing the command has words matching the label of the environment object. If a history h has at least one such command for each sen-tence, the environment reward function r ( h ) re-turns a positive value, otherwise it returns a neg-ative value. This environment reward function is a simplification of the one described in Branavan et al. (2009), and it performs comparably in our experiments.
 Features In addition to the look-ahead features described in Section 5.2, the policy also includes the set of features used by Branavan et al. (2009). These features are functions of both the text and environment state, modeling local properties that are useful for action selection. Datasets Our model is trained on the same dataset used by Branavan et al. (2009). For test-ing we use two datasets: the first one was used in prior work and contains only low-level instruc-tions, while the second dataset is comprised of documents with high-level instructions. This new dataset was collected from the Microsoft Help and Support website, and has on average 1.03 high-level instructions per document. The second dataset contains 60 test documents, while the first is split into 70, 18 and 40 document for training, development and testing respectively. The com-bined statistics for these datasets is shown below: Reinforcement Learning Parameters Follow-ing common practice, we encourage exploration during learning with an -greedy strategy (Sutton and Barto, 1998), with set to 0.1. We also iden-tify dead-end states, i.e. states with the lowest pos-sible immediate reward, and use the induced en-vironment model to encourage additional explo-ration by lowering the likelihood of actions that lead to such dead-end states.

During the early stages of learning, experience gathered in the environment model is extremely sparse, causing the look-ahead features to provide poor estimates. To speed convergence, we ignore these estimates by disabling the look-ahead fea-tures for a fixed number of initial training itera-tions.

Finally, to guarantee convergence, stochas-tic gradient ascent algorithms require a learning rate schedule. We use a modified search-then-converge algorithm (Darken and Moody, 1990), and tie the learning rate to the ratio of training documents that received a positive reward in the current iteration.
 Baselines As a baseline, we compare our method against the results reported by Branavan et al. (2009), denoted here as BCZB09.

As an upper bound for model performance, we also evaluate our method using a reward signal that simulates a fully-supervised training regime. We define a reward function that returns posi-tive one for histories that match the annotations, and zero otherwise. Performing policy-gradient with this function is equivalent to training a fully-supervised, stochastic gradient algorithm that op-timizes conditional likelihood (Branavan et al., 2009).
 Evaluation Metrics We evaluate the accuracy of the generated mapping by comparing it against manual annotations of the correct action se-quences. We measure the percentage of correct actions and the percentage of documents where every action is correct. In general, the sequential nature of the interpretation task makes it difficult to achieve high action accuracy. For example, ex-ecuting an incorrect action early on, often leads to an environment state from which the remaining instructions cannot be completed. When this hap-pens, it is not possible to recover the remaining actions, causing cascading errors that significantly reduce performance. BCZB09 0.647 0.375 0.021 0.022 0.000 BCZB09 + annotation  X  0.756 0.525 0.035 0.022 0.000 Our model 0.793 0.517  X  0.419  X  0.615  X  0.283 Our model + annotation 0.793 0.650  X  0.357 0.492 0.333 As shown in Table 1, our model outperforms the baseline on the two datasets, according to all evaluation metrics. In contrast to the base-line, our model can handle high-level instructions, accurately interpreting 62% of them in the sec-ond dataset. Every document in this set con-tains at least one high-level action, which on av-erage, maps to 3.11 environment commands each. The overall action performance on this dataset, however, seems unexpectedly low at 42%. This discrepancy is explained by the fact that in this dataset, high-level instructions are often located towards the beginning of the document. If these initial challenging instructions are not processed correctly, the rest of the actions for the document cannot be interpreted.

As the performance on the first dataset indi-cates, the new algorithm is also beneficial for pro-cessing low-level instructions. The model outper-forms the baseline by at least 14%, both in terms of the actions and the documents it can process. Not surprisingly, the best performance is achieved when the new algorithm has access to manually annotated data during training.

We also performed experiments to validate the intuition that the partial environment model must contain information relevant for the language in-terpretation task. To test this hypothesis, we re-placed the learned environment model with one of the same size gathered by executing random com-mands. The model with randomly sampled envi-ronment transitions performs poorly: it can only process 4.6% of documents and 15% of actions on the dataset with high-level instructions, com-pared to 28.3% and 41.9% respectively for our al-gorithm. This result also explains why training with full supervision hurts performance on high-level instructions (see Table 1). Learning directly from annotations results in a low-quality environ-ment model due to the relative lack of exploration, Figure 4: Examples of automatically generated paraphrases for high-level instructions. The model maps the high-level instruction into a sequence of commands, and then translates them into the cor-responding low-level instructions. hurting the model X  X  ability to leverage the look-ahead features.

Finally, to demonstrate the quality of the learned word X  X ommand alignments, we evaluate our method X  X  ability to paraphrase from high-level instructions to low-level instructions. Here, the goal is to take each high-level instruction and con-struct a text description of the steps required to achieve it. We did this by finding high-level in-structions where each of the commands they are associated with is also described by a low-level instruction in some other document. For exam-ple, if the text  X  X pen control panel X  was mapped to the three commands in Figure 1, and each of those commands was described by a low-level in-struction elsewhere, this procedure would create a paraphrase such as  X  X lick start, left click set-ting, and select control panel. X  Of the 60 high-level instructions tagged in the test set, this ap-proach found paraphrases for 33 of them. 29 of these paraphrases were correct, in the sense that they describe all the necessary commands. Fig-ure 4 shows some examples of the automatically extracted paraphrases. In this paper, we demonstrate that knowledge about the environment can be learned and used ef-fectively for the task of mapping instructions to ac-tions. A key feature of this approach is the synergy between language analysis and the construction of the environment model: instruction text drives the sampling of the environment transitions, while the acquired environment model facilitates language interpretation. This design enables us to learn to map high-level instructions while also improving accuracy on low-level instructions.

To apply the above method to process a broad range of natural language documents, we need to handle several important semantic and pragmatic phenomena, such as reference, quantification, and conditional statements. These linguistic construc-tions are known to be challenging to learn  X  exist-ing approaches commonly rely on large amounts of hand annotated data for training. An interest-ing avenue of future work is to explore an alter-native approach which learns these phenomena by combining linguistic information with knowledge gleaned from an automatically induced environ-ment model.
 The authors acknowledge the support of the NSF (CAREER grant IIS-0448168, grant IIS-0835445, and grant IIS-0835652) and the Mi-crosoft Research New Faculty Fellowship. Thanks to Aria Haghighi, Leslie Pack Kaelbling, Tom Kwiatkowski, Martin Rinard, David Silver, Mark Steedman, Csaba Szepesvari, the MIT NLP group, and the ACL reviewers for their suggestions and comments. Any opinions, findings, conclusions, or recommendations expressed in this paper are those of the authors, and do not necessarily reflect the views of the funding organizations.

