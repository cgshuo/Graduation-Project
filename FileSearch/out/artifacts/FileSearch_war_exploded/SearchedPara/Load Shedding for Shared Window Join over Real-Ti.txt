 Data stream is defined as a real-time, continuous, ordered sequence of data items [1]. One primary characteristic of Data Stream Management System (DSMS) is that its data is active and its query is passive. It is impossible to control the arrival rates and including CPU and memory, are not enough to meet all requirements of the current system, and then the system becomes overlo aded. Therefore, load shedding which is to drop redundant tuples is a new challengeable issue. Join is a fundamental operation for relating information from different data streams in streaming systems. The execu-tion of multiple queries over shared windows separately wastes the system resources, because the common join X  X  execution between these queries will be repeated. Imple-menting multiple queries shared join in a single execution plan avoids such redundant processing [8]. The shared join operation pr ocesses every window once in a join exe-cution and produces multiple output data to the next operators in the operator degradation sharply when such a system is overloaded. 
In this paper, we propose a load shedding algorithm for shared window join to effi-ciently handle huge fluctuant overload in real-time DSMS. The algorithm realizes queries X  execution by adjusting processing window sizes, and only drops tuples in the largest window during overload. Experiment results show that this algorithm has better performance. Load shedding over data streams is discussed broadly since 2002. According to the ways of dropping tuples, it is classified into random load shedding and semantic load shedding [3]. From the perspective of system implementation architecture, it is classi-based on opened loop control [2-7]. From the perspective of the query plan, it can be ding aimed at join characteristics [4-7]. From the perspective of real-time property, all above approaches don X  X  consider real-time property. There are some load manage-ment approaches in real-time DSMS, such as [10] which presented a two-level load management method aimed at periodic queries. But these approaches don X  X  specially consider the situation of shared join operation over real-time data streams. 
The shared execution of multiple queries over data streams could optimize the sys-At present, the study of load shedding for shared window join is rarely. The literature [7] firstly discussed this problem, and proposed two load shedding strategies (uniform strategy and small window accuracy strategy) to improve query throughput. But these completed within their deadlines. sliding window being discussed in this paper and count-based sliding window [1]. Our target is to provide firm real-time query services, in which overdue results have no value for the system. There are two input streams S 1 and S 2 , and N real-time binary join queries shared one window join. CPU restriction is one of the reasons for mem-ory restriction [6], so we only consider that the system has limited CPU and unlimited memory. 
Compared with the unary operators, such as select and project, join is a high over-head operator in a data stream processing system. Shared window join could reduce the number of join probe, and improve system execution efficiency. For example, in intelligent system building, plenty of sensors monitor the temperature and smoke viscosity of each room. A monitoring system receives sensor data continuously, and produces alarming and statistic information for users. There are two queries. Q : SELECT S 1 .Timestamp, S 1 .RoomID, S 1 .Temp, S 2 .Smoke FROM S 1 [Range 6 seconds], S 2 [Range 6 seconds] WHERE S 1 .RoomID= S 2 .RoomID AND S 1 .Temp&gt;40 AND S 2 .Smoke&gt;0.03 DEADLINE 5 seconds; Q : SELECT S 1 .RoomID, AVG ( S 1 .Temp), AVG ( S 2 .Smoke) FROM S 1 [Range 10 minutes], S 2 [Range 10 minutes] WHERE S 1 .RoomID= S 2 .RoomID GROUP BY S .RoomID DEADLINE 2 minutes; The above two queries would waste system resources if they are separately executed. Because these queries are all join operations on stream S 1 and S 2 , and their join condi-tions are same, implementing them in a single shared execution plan would avoid redundant processing. As shown in Fig.1, the processing of the shared query plan select operator (  X  ) of Q 1 and the aggregate operator (avg) of Q 2 . A new LS-SJRT-CW algorithm (Load Shedding for Shared window Join over Real-Time data streams based on Changeable Window size) is proposed to handle overload of shared window join. This algorithm ad justs practical processing window size ac-sliding window. The basic idea of adjusting window size has been mentioned in [13]. Different from them, this paper mainly discusses load shedding algorithm based on adjusting the processing window size. The LS-SJRT-CW does not need to buffer the dropped tuples, and then reduces the overhead of load shedding.  X  Sample Ratio produce query results. We allow the users to specify the relationship between output quality and sample ratio by a two-dimensional QoS graph [11] which is shown in Fig.2. For simplicity, the QoS graph is sh own as a piece-wise linear function of sam-current query could be decided by the two-dimensional QoS graph according to users X  denotes the number of operators in the query plan of Q i . O ij (Assume that j =1 in this tor. There are m r UnitTime = X  ( UnitTime denotes one unit time) tuples in its one side Time) of one side join direction is estimated as follows. SRO D T RT = X   X  , where T ij is the wasted time. 
The sample ratio P i of the window segment Seg i could be computed by SRO ij  X  Adjusting Window Size Assume that the deadline D i of query Q i is the shortest one in all deadlines. The sys-of query Q i is in the range of quality. ( SR i &lt;1) means that we should sample tuples in query Q i , the results of window W i +1 share these of window W i . Because of dropping some tuples on query Q i , the precision of query Q i +1 would be also reduced. However, deadline. The architecture of the LS-SJRT-CW is shown in Fig.3. 
W i ' denotes the adjusted sliding window. After getting the sample ratio of the join size T i . 
From the point of intuition, this approach has little overhead to release system workload by adjusting the window size acco rding to the sample ratio of join operator.  X  Algorithm Description according to the QoS graph. The LS-SJRT-CW algorithm is described as follows. Seg i after adjusting it. redundant tuples in the largest window. Step3. Recover the initiation window size immediately once detecting that the system is normal. The main drawback of the LS-SJRT-CW algorithm is that its output tuples aren X  X  strictly processed on the basis of the window size specified by users. We carry out many simulated experiment results to evaluate our proposed algorithm. dow size. We choose the small window first algorithm (LS-SWF for short) proposed in [7] to compare with our algorithm. The sy stem is under unstable workload, and the maximum workload is about 1.5 times maximum system capacity.  X  Evaluation Metrics In our experiments, we use Average Miss Ratio ( AMR ) as the metric of evaluating the algorithm X  X  performance. dropped tuples are part of tuples that missed their deadlines when computing the larger the throughput, and vice versa .  X  Experiment Results There are three kinds of query deadline distri butions in this experiment. (1) the short-distributes in a medium window, denotes as set 2 ; (3) the shortest deadline distributes in a large window, denotes as set 3 . The LS-SWF and the LS-SJRT-CW are compared on AMR shown in Fig.4 and Fig.5. Although LS-SWF is a better load shedding algorithm for shared window join, LS-SJRT-CW under the same deadline distribution. The LS-SJRT-CW would de-crease AMR under greater changeable workloads, that is, the number of output tuples that are not missed deadlines is more. The number of effective window segments is little in the query distribution set 3 where the query with minimum deadline distrib-utes in maximum window, so schedulin g overhead is decreased. Thus, the AMR of the LS-SJRT-CW in set 3 are smaller than these in set 1 and set 2 . Gradient of each curve is larger and larger with increasing workload in Fig.5. When the system is seriously overloaded, the LS-SWF shows poor performance. This is why the slope of the LS-SWF is greater than that of the other algorithm. The problem of load shedding for shared window join over real-time data streams is described in this paper. An algorithm LS-SJRT-CW based on adjusting sliding win-dow size is proposed to handle overload of shared window join effectively. The LS-SJRT-CW algorithm would decrease AMR . For future work, we will experiment further with different workloads and configurations. In addition, we plan to study adaptive join and asymmetric shared window join. 
