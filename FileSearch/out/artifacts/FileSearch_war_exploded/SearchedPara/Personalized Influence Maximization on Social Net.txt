 In this paper, we study a new problem on social network influence maximization. The problem is defined as, given a target user w , finding the top-k most influential nodes for the user. Different from existing influence maximization works which aim to find a small subset of nodes to maximize the spread of influence over the entire network (i.e., global optima), our problem aims to find a small subset of nodes which can maximize the influence spread to a given target user (i.e., local optima). The solution is critical for personal-ized services on social networks, where fully understanding of each specific user is essential. Although some global in-fluence maximization models can be narrowed down as the solution, these methods often bias to the target node itself. To this end, in this paper we present a local influence maxi-mization solution. We first provide a random function, with low variance guarantee, to randomly simulate the objective function of local influence maximization. Then, we present efficient algorithms with approximation guarantee. For on-line social network applications, we also present a scalable approximate algorithm by exploring the local cascade struc-ture of the target user. We test the proposed algorithms on several real-world social networks. Experimental results validate the performance of the proposed algorithms. J.4 [ Social and Behavioral Sciences ]; G.3 [ Probability and Statistics ]  X  (Does NOT produce the permission block, copyright information nor page numbering). For use with ACM PROC ARTI CLE-SP.CLS. Supported by ACM.
 Personalization; Social Networks; Influence Maximization
Social networks, as a popular and effective medium for information dissemination, play an increasingly important role in daily communication among individuals, groups and communities. Influence maximization is a problem of finding a subset of nodes in a social network that can maximize the spread of influence [1]. This research has been found useful in market recommendations, such as products, services, and innovative ideas, etc [2 X 5], through the powerful word-of-mouth effect in social networks.

There are a line of research work in influence maximiza-tion in social networks [1, 3, 6 X 26]. However, they all fo-cus on finding global influential nodes over the entire social networks, through which the influence spread can be max-imized. These work cannot answer the following question: given a specific target node w , which nodes are the most in-fluential ones to w ? Or more straightforward, who influence me most on a social network?
The above concern is critical for personalized services on social networks, such as personalized recommendation and search, target advertising, personal product promotion, per-sonal misinformation limitation, to name a few. In these Fig ure 2: (a)User-neighbor Distribution (b)Top-K Influential Users and Their Influence Sphere applications, it is essential to fully understand social influ-ence on each specific user.

Actually, identifying top-k influential nodes for a given target user w is challenging, which cannot be easily obtained by intuitively selecting from w  X  X  neighbors, or simply choos-ing the global influential nodes. We use two examples for explanation.

Example 1. We take the social network in Fig. 1 for example. The objective is to identify the most influential node to a given target node w . To achieve this goal, we calculate the influence spread from each user to w 1 . From the figure, we can observe that the most influential node to w is neither its neighbors { w 1 ;  X  X  X  ; w 6 } , nor the global influential node m , but surprisingly, its second-nearest node u !
Example 2. We use a small data set, crawled from a popular social network site in China, weibo.sina.com , for further explanation. The data set has 602 users and 17,595 links. We summarize the statistical characteristics of the data set in Figs. 2(a) and 2(b). From Fig. 2(a), we can observe that for a given user, there are always dozens, or even hundreds of neighbors. Thus, it is hard to determine which neighbors are the top-k influential nodes to a target user, especially when k is small. In Fig. 2(b), we summarize the influence coverage of the global top-k influential nodes ( k from 1 to 30) under the independent cascade model. We can observe that even for the top-30 influential persons, there are still large blank of influence coverage, which validates our claim that finding the global influential nodes may not fulfill the personalized (local) influence maximization task.
Based on the above two observations, we summarize the challenges of the proposed problem as follows: We will explain the details in Sections 3 and 4.
 In this paper, we study the problem of local influence max-imization. The objective function is to find the top-k most influential nodes for a given target user. We simulate the objective function by a random function with low variance guarantee, under the IC propagation model. As the opti-mization problem is NP-hard, We present a near-optimal algorithm with (1-1/e) approximation based on the sub-modular property of the optimization problem, and speed up the approximate algorithm X  X  efficiency by inducing a s-maller graph via the target node X  X  neighbors. Furthermore, to scale well to large volumes of social data, we present an approximate algorithm by exploring the local cascade struc-ture of the target user. Experimental results validate the performance of the proposed algorithms.

The rest of the paper is structured as follows. Section 2 formulates the proposed problem. Section 3 provides ap-proximate algorithms. Section 4 presents experimental re-sults. Section 5 surveys related work and Section 6 concludes this paper.
In this section, we formulate the personalized influence maximization problem under the popularly used indepen-dent cascade model. Major symbols are summarized in Ta-ble 1.
In this part, we introduce fundamental concepts of per-sonalized influence calculation for a given target user w in a social network. Consider a social network G = ( V; E ), where V and E denote nodes and edges respectively, the influence in G is propagated under the independent cascade model, IC model for short.

The IC model is the most basic model in information dif-fusion area. In this model, each node in G is either in active state or inactive state. The state of a node can be switched from being inactive to active, but not vice versa. When a node v firs t becomes active in step t , the influence is inde-pendently propagated from node v to its currently inactive to activate each of its inactive neighbors. Node v i  X  C  X  comes active with the activation probability along the edge ( v; v i ) at step t + 1. No matter v succeeds in activating v or not, v cannot make any further attempts on v i . As time unfolds, more and more of nodes become active, and the process runs until no more activations are possible.
Let X be a random activation result (consisting of live edges [1], through which all activated nodes can be reached from U ) in the whole network G with the seed set U . Then the influence degree from set U to the target w can be mea-sured as shown in Eq. (1), where P U is the probability measure via seed set U , and the notation w  X  X represents that w is a node in the ac-tivation result X . Hence, the influence degree R w ( U ) is the probability that w is successfully activated by the propaga-tion process when the initial seed set is U .
The personalized influence maximization problem aims to find a seed set U  X  = { u 1 ; u 2 :::u k } X  V \{ w } , such that R w ( U in the network G . Thus, the objective function of per-sonalized influence maximization problem can be formally described as in Eq. (2),
Note that the objective function of our problem is different from that of existing global influence maximization problem [1, 6] given in Eq. (3), where R ( U ) is the influence degree from a seed set U to the nodes in the network.

The key point of our problem is how to calculate the prob-ability R w ( U ), which is a # P  X  hard problem, as we will ex-plain in Section 2.3. An alternative method is to use Monte-Carlo simulation to evaluate R w ( U ). Based on Eq. (1), we have where the indicative function 1 { w  X  X } = 1 if w  X  X stands, otherwise, 1 { w  X  X } = 0.

In particular, let  X  U be the sample space of all possible activation results throughout the whole network G under the IC model with the seed set U , then by Eq. (4), the influence degree on w from set U can be calculated in Eq. (5), where P ( X = x ) is the probability of x in the sample space  X 
U , and
From Eq. (5), we can observe that 1 { w  X  X } is an unbiased statistics to R w ( U ). However, its variance is somewhat large when it is used in Monte-Carlo simulation. So the next ques-tion is, how to find a better random function to simulate the objective function? To answer the question, we use Example 3 for explanation.

Example 3 : We calculate the influence degree R w ( U ) from the seed set U = { 1  X  X  on the target node w = 3  X  in Fig. 3. The activation probability is marked along the directed edges. Fi gure 3: (a)The original graph G , (b) The generat-ed graph G w withou t w .

We first list the path probability in network G under seed set U , as shown in Table 2. Take path 3 for example, the probability of x = ( 1  X  X  X  2  X  X  X  4  X  ) in the sample space  X  can be calculated as follows,
From T able 2, we have two observations. First, R w ( U ) can be calculated as shown in Eq. (5), by summing up all the probabilities P ( X = x ) with w  X  x , i.e., R w ( U ) =
Secon d, we remove the target node w from each activation result x in G . Let F ( w; x ) denote the activation result with-out w , then by simply merging identical terms in the fourth column of Table 2, we get the probability for each merged result, including P ( F ( w; x ) = 1  X  ) = 0 : 6, P ( F ( w; x ) = 1 2  X  ) = 0 : 36, P ( F ( w; x ) = 1  X  X  X  2  X  X  X  4  X  ) = 0 : 04.
Obviously, the distribution of F ( w; x ) is identical with the random activation result (which can be denoted as Y ) throughout the whole network without the target node, as shown in Fig. 4.

For a given target node w  X  V , each neighbor has its own propagation probability to the target. Thus, the personal-ized influence in network G on the user w can be calculated by combining two parts:
Therefore, we can obtain the result by taking Y into ac-count under the IC model, 2
We can observe that the results in Eqs. (6) and (7) are the same. This is not a coincidence, we will theoretically prove the point. Actually, based on the property of the conditional probability [27], we have
Namely, 1  X  R w ( U ). Moreover, it has smaller variance than 1 { w  X  X fact, we have To sum up, we can obtain Theorem 1 as follows,
Theorem 1. The statistics 1  X  ased for evaluating R w ( U ) , and it has smaller variance than 1
The influence degree from U to the target w can be mea-sured as in Eq. (8), which is demonstrated effective to mea-sure the personalized influence degree with provable smaller variance by Theorem (1).

By combining Eqs.(2) and (8), we obtain the objective function in Eq.(9),
There are two challenges, given in Theorems 2 and 3, in solving the objective function in Eq.(9).
 Theorem 2. The problem is NP-hard, and an instance of the classical set cover problem can be viewed as a special case of this problem.

Proof. Consider a collection of subsets S 1 ; S 2 ; :::; S a ground set U = { u 1 ; u 2 ; :::; u c } , the set cover problem is to find whether there exist k of the subsets, whose union is equal to the ground set U (We assume that k&lt;c&lt;m ).
Given an arbitrary instance of the set cover problem, we can define a directed bipartite graph with | V | + | C w | as shown in Fig.5, where V denotes the node set in graph G w , | V | = m , and each node i  X  V corresponding to a set S C w denotes the neighbors of the target node w , | C w | = c , and each node j  X  C w corresponding to a element u j . Each edge &lt; i; j &gt; with propagation probability p ij = 1, if u this way, the set cover problem is equivalent to deciding if there is a k -node seed set U in this bipartite graph that can active all C w . If any k -node seed set can reach this target, then the Set Cover problem must be solvable.
 Figure 5: Bipartite graph with | V | + | C w | nodes
As the given problem is NP-hard, it is impractical to solve with brute force, especially when the network is large. To solve the problem with provable accuracy, we prove that the objective function has the sub-modular property, which can be exploited to develop (1  X  1 =e )(  X  63%) approximate algorithms (e.g., greedy algorithms).
 Theorem 3. The computing is #P-hard, as it can be viewed as a reduction from an in-stance of the classical counting problem of s-t connectness in a directed graph.

Proof. Consider the classical counting problem of s -t connectness in a directed graph. This problem is equiva-lent to computing the probability that s is connected to t , when we set the connection probability of each edge in G with p =1 = 2.

We define R w ( s; G ) to denote the influence degree from a given set { s } to a target node w in G , and define R w ( s; G to denote the influence degree from a given set { s } to a tar-get node w in G  X  , where G  X  is a graph induced by adding a new neighbor w  X  of w , and two directed edges &lt;w  X  ; w&gt; with p fore, R w ( s; G  X  )  X  R w ( s; G ) = (1  X  R w ( s; G ))  X  where p st;G denotes the propagation probability from the seed set s to t in G . As a result, R w ( s; G )  X  R w ( s; G related to the probability that s connects to t . If R w ( s; G ) R w ( s; G able.

As the local influence spread is #P-hard, we present two approximation solutions: (I) we use Monte-Carlo method to simulate the influence cascade. The number of possible activation results is expo-nential, simulating the random diffusion process with suf-ficient times can obtain arbitrarily close approximations to R w ( U ) with high probability. Let D denote the number of simulation times, Y denote the random activation result (consisting of live edges) with seed set U in G w ,  X  U w a sample space of all possible activations. On the basis of Eq. (8), R w ( U ) can be computed as in Eq. (10),
For simplicity, we denote 1  X  With a limited simulation number N , we get R w ( U ) as shown in Eq. (11).
 (II) we construct a local cascade community that consists of only the shortest paths between each node in the graph and the target node, and restrict computations within this community only. This method significantly reduces the un-certainty during the influence propagation, and shrinks com-putation cost. In doing so, the approximate estimations of the local influence propagation can be efficiently calculated.
In this section, we present two near-optimal algorithm-s and an on-line algorithm for the personalized influence maximization.
We first prove that the optimization problem in Eq. (2) has the sub-modular [1,28] property. Based on this property, we then develop a greedy hill-climbing solution, referred to as the local greedy algorithm (LGA for short).

Theorem 4. The objective function in Eq. (2) has the sub-modular property.
 Proof. First, we show that R w ( U; Y ) is sub-modular. Let A , B denote the node set in graph G ( A  X  B  X  V ),  X 
R w ( A v ; Y ) = R w ( A  X  v; Y )  X  R w ( A; Y ) denote the marginal influence degree on the target node w in R w ( v; Y ) that are not already in the union is no less than  X  R w ( B v ; X ), which can be converted as R w ( A  X  v; Y )  X  R w ( A; Y )  X  R w ( B  X  v; Y )  X  R w ( B; Y ), this satisfies the definition of sub-modularity. As sub-modular functions are closed under nonnegative linear combinations, the objective function in Eq. (2) has the sub-modular prop-erty.
 For a non-negative, monotone sub-modular function r , let S be a set of size k obtained by selecting elements one at a time, each time choosing an element that provides the largest marginal increase in the function value. Let S  X  be a set that maximizes the value of r over all k -element sets. Then r ( S )  X  (1  X  1 =e ) r ( S  X  ). In other words, S provides a (1  X  1 =e )-approximation [1,28].

Now we introduce the LGA algorithm. The algorithm starts with an empty seed set, and repeatedly adds a node that gives the maximum marginal gain into the set, until k nodes has been obtained.
 We summarize LGA in Algorithm 1. The input is a graph G , a target node w and a positive number k which is the expected number of nodes to be selected in the seed set U . We use RanCas to denote a random process in M onteCarlo stochastic simulation.

LGA first adds one node as seed each round, such that this node can maximize the marginal influence degree on w , as Algori thm 1: Local Greedy Algorithm (LGA) well as the maximize the influence spread on w together with current seed set. For this purpose, the influence spread of each node is estimated with D repeated simulations of Ran-Cas Y ( i; v; G w ). Due to the sub-modularity of the objective function, LGA guarantees a solution which can achieve at least a constant fraction (1  X  1 =e ) of the optimal score.
We now discuss the complexity of LGA. In one random simulation, the influence spread calculation from each node in G w takes O ( m ) time, where m is the number edges in G w . LGA estim ates the random diffusion process with D repeated simulations. Thus, the time complexity of selecting one seed in LGA is O ( nDm ), where n is the number of nodes in G w . Fo r k seed nodes in U , the time complexity is O ( knDm ).
We present a more efficient local greedy algorithm (ELGA for short), based on the above LGA algorithm. Compared to LGA, ELGA reduces the time complexity from O ( knDm ) to O ( kD  X  ( m + m  X  )), where m  X  denotes the average number of edges of all induced smaller graphs.

In fact, in one random activation result Y , whether the influence propagated through an edge or not [11] is deter-mined, so we don X  X  need to simulate the influence cascade for all the nodes in graph G w one b y one, as the LGA algo-rithm does. An alternative method is to induce a graph G  X  from the original graph G w in each random process i first, by simulating the influence cascade on all edges in graph G w and then calculate the R w ( U; G  X  i ) for nodes in the graph in one time, shown as Fig.6.

The following steps also are used to further increase the efficiency of ELGA algorithm.

First, further reduce the scale of graph G  X  i . As a seed node always influences the target node w through w  X  X  neighbors, we can remove the nodes and edges that can not reach w  X  X  neighbors in G  X  i , which will have no impact on the calcula-tion results, to further reduce the scale of graph G  X  i .
Second, reduce unnecessary calculation. If a node v is already activated by the current seed set U , then the node v Figure 6: The Comparison between LGA and ELGA has no contribution to our influence calculation [10] on the target w . As a result, for each node v  X  V \ U , R w ( U  X  X  v } ; G where U denotes the nodes activated (reachable) by the current seed set U .
 Algo rithm 2: Efficient Local Greedy Algorithm (EL-GA)
We sum marize the improvements in Algorithm 2. The complexity of ELGA can be calculated in detail as follows. In each random process of influence cascade, ELGA first takes O ( m ) time to induce the graph by simulating the in-fluence cascade on all edges in graph G w , then takes O ( m of the new induced graph G  X  i , where m  X  i denotes the num-ber of edges in each G  X  i from the original graph G w . Fo r D repeated simulations with Monte-Carlo, the time complexi-ty of finding k seed nodes is O ( kD  X  ( m + m  X  )), where m denotes the average number of edges of all the induced s-maller graphs G  X  i , which shows that ELGA achieves better Algori thm 3: Local Cascade Algorithm (LCA) efficien cy than LGA.
The increasing popularity of many on-line social network sites motivates our online algorithm in this section. We present an efficient and effective heuristic algorithm, referred to as local cascade algorithm (LCA for short). Instead of u-tilizing Monte-Carlo simulation, LCA constructs a local cas-cade community consists of only the shortest paths between each node in the graph and the target node, then restricts computations [13,29] within the shortest path community.
In doing so, LCA nearly matches the accuracy of the greedy algorithms, meanwhile significantly reduces the time cost, as we will see later in the experiments.

As shown in Algorithm 3, LCA mainly consists of three steps. First, we construct a local cascade community con-sisting of only the shortest paths between each node and the target node. Longer paths are viewed as slight influence propagation and omitted in the algorithm. For example, for the node u in Fig. 1, we count only the shortest path-s ( u  X  w 2  X  w ), ( u  X  w 4  X  w ), ( u  X  w 5  X  w ) and ( u  X  w 6  X  w ) to construct a local cascade community for the influence spread from u to w . Then, We estimate the local influence degree. Instead of using expensive Monte-Carlo method, LCA efficiently estimates the local influence spread by enumerating the shortest simple paths starting from the seed nodes toward the target node. As a result, for a target node w and an arbitrary node v  X  V \ w , the local influence degree R w ( v ) in L ( v; w ) can be estimated as in Eq. (14), where L ( v; w ) denotes the corresponding local cascade community from v to w .

At the last step, we mine top-k seed nodes based on E-q. (15) for a given target node w in LCA.

The time complexity of LCA is O ( m + n  X  ( L + k )), where L deno tes the average number of edges in all L ( v; w ). Hence, LCA is much faster than the greedy algorithms LGA and ELGA.
We implement our algorithms using C++ with 3.3Hz CPU and 4GB memory. We use four data sets, one is crawled from a popular social network site in China, weibo.sina.com , and the other three are downloaded from Jure Leskovec X  X  Website [30]. We summarize the statistical information of the four data sets in Table 2.
 We use other three algorithms as benchmark methods. Moreover, we use Monte-Carlo to choose seed sets in the greedy algorithms, and evaluate their influences on a given target node, as shown in Eq. (11).
We evaluate the performance on Dataset-1, by varying k from 1 to 10 with p = 0 : 03 in Figs. 7(a) and 7(b).From the results, we can come to three conclusions: (1) The local influence degree of seed sets in LGA and ELGA consistently outperforms the other four algorithm-s. For example, given the target node ID=132, for k =10, the influence degrees on the target node 132 of LGA and ELGA are both 0.3723, while that of LCA, LND, LDegree, LRandom algorithms are 0.3354, 0.3218, 0.1595, and 0.1632 respectively. In other words, LGA and ELGA improve the degree by 0.0369 (or 11.00%) compared to LCA, 0.0505 (or 15.69%) LND, 0.2128 (or 133.42%) LRandom and 0.2091 (or 128.13%) LDegree. This is because LGA and ELGA have performance guarantees as we analyzed before. (2) The local influence degree of seed sets in LCA is very close to that in LGA and ELGA w.r.t. different values of k , which validates the effectiveness of LCA. Meanwhile, LND outperforms LCA in Fig.7(a) for k =1 to 3. This is because LND chooses initial nodes from the perspective of the target node, taking both the factors of distance and degree into consideration. However, as they depend on neighbors of the target node, their superiorities are random and unstable. (3) The local influence degrees of seed sets in LDegree and LRandom are always worse than the other four algorithms w.r.t. most values of k , which means that LDegree and LRandom only choose initial nodes globally, while losing the local structure w.r.t. the target node itself.
 Efficiency. The results are shown in Figs. 8(a) and 8(b). We report five algorithms except the LGA greedy algorithm which always consumes the heaviest time. Several conclu-sions can be made from these results: (1) the running time of ELGA is consistently far worse than the other four algo-rithms for all values of k . For example, given the target node ID=132, for k =3 and p =0.03, the running time of ELGA is 720, 616ms, while that of LCA, LDegree, LRandom and L-ND algorithms are 15ms, 4ms, 4ms, and 1ms respectively. Moreover, the efficiency of ELGA is more sensitive w.r.t. the increasing number of nodes in the seed set than the oth-er four algorithms. This is because ELGA X  X  time complex is O ( kDm  X  ), which means each round of a new seed node searching process takes O ( Dm  X  ) time. While Monte-Carlo method needs to simulate the random process with sufficien-t times to obtain very good estimates, D is typically more than 10,000 times, which is very expensive. Therefore, EL-GA keeps the computation accuracy at the cost of efficiency. (2) The running time of LCA is very close to the other three benchmark algorithms, for all values of k , which testifies the efficiency of LCA. For example, given a target node ID=132, for k =6 and p =0.03, the running time of LCA is 14ms, while that of LDegree, LRandom and LND are 4ms, 4ms and 1ms respectively. Moreover, the efficiencies of LCA, LND, LDe-gree and LRandom are nearly the same with the increasing of the number of nodes in the seed set. Fig ure 7: (a)Local influence degree of the target n-ode ID 132 with p=0.03. (b)Local influence degree of the target node ID 125 with p=0.03. Fig ure 8: (a)Running time of target node 132 with p=0.03(b)Running time of target node 125 with p=0.03.
We evaluate the performance on Dataset-1, by varying p from 0.01 to 0.1 with k =6. The results are shown in Figs. 9(a) and 9(b). Fi gure 9: (a)Local influence degree of the target n-ode 132 with k = 6 . (b)Local influence degree of the target node 125 with k = 6 . (1) The quality of seed sets in LGA and ELGA consis-tently outperforms the other four algorithms for all values of p . For example, given the node ID=132, for k =6 and p =0.05, the influence degree of LGA and ELGA are both 0.5513, while the evaluation of LCA, LDegree, LRandom and LND are 0.5168, 0.4642, 0.4048 and 0.4046 respective-ly. In other words, LGA and ELGA improve the influence degree of seed sets by 6.7% (LCA), 18.8% (LDegree), 36.2% (RRandom) and 36.3% (LND). (2) the quality of seed sets in LCA is very close to that of LGA and ELGA for most values of p , with different target nodes, which testifies the effectiveness of LCA. Meanwhile, the quality performance of LND even performs better than LCA in Fig.9(a) for p =0.09. However, their dominance is randomness and unstable. For example, given the target n-ode ID=132, for k =6 and p =0.06, the influence degree of LND and LCA are 0.5700 and 0.6297 respectively. While given the same node 132 for k =6 and p =0.09, the estima-tion of LND and LCA are 0.8035 and 0.7931 respectively. In other words, LND drops 9.5% (LCA) for p =0.06, while improves the evaluation of influence degree by 1.3% (LCA) for p =0.09. (3) The quality of seed sets in LDegree and LRandom are unstable, which always performs worse than the other four algorithms for most values of p . For example, given the node ID=125, for k =6 and p =0.03, the influence degree of LDe-gree and LRandom are 0.2606 and 0.2488 respectively, while the evaluation of LGA, ELGA, LCA and LND are 0.3686, 0.3686, 0.3554 and 0.3120 respectively. In other words, LDe-gree and LRandom drop their evaluation influence degrees by 26.7% and 29.3% (LGA/ELGA), 30.0% and 20.3% (L-CA), an d 20.3% and 16.5% (LND).

Efficiency. Figs. 10(a) and 10(b) report the running time performance. Several conclusions can be drawn from these results. (1) The running time of ELGA is consistently far worse than the other four algorithms for all values of p . For ex-ample, given the target node ID=125, for k =6 and p =0.02, the running time of ELGA is 1,326,346ms, while that of L-CA, LDegree, LRandom and LND is 13ms, 3ms, 3ms and 1ms respectively. Meanwhile, the efficiency performance of ELGA is more sensitive to the increasing of the propagation probability than the other four algorithms. As the number of activated nodes in the graph is growing with the propaga-tion probability, it further causes the increasing in the scale of the new induced graph G  X  in each iteration, and results in the efficiency-reduction of ELGA. (2) The running time of LCA is very close to that from the other four benchmark algorithms, for all values of p , which testifies the efficiency of LCA. For example, given the target node ID=125, for k =6 and p =0.04, the running time of LCA is 15ms, while that of LDegree, LRandom and LND are 4ms, 4ms and 1ms respectively. Meanwhile, the efficiencies of LCA, LND, LDegree and LRandom are almost unchanged with the increasing of the propagation probability. This is because the propagation probability in the seed set has little connection with efficiency performance. Fig ure 10: (a)Running time for the target node ID 132 with k = 6 (b)Running time for the target node ID 125 with k = 6 .
We evaluate the LCA algorithm under different network scales (from Dataset-1 to Dataset-4). Fig.11(a) shows the efficiency results with k varying from 1 to 10 and p =0.03. Fig.11(b) shows the efficiency results with p varying from 0.01 to 0.1 and k =6. We can observe that LCA has good adaptability under different networks, it can handle large-scale data sets with different values of parameters. For ex-ample, in Fig. 11(b), for p varying from 0.05 to 0.07, the running time on Dataset-4 is 93ms (or 0.7%) and 15ms(or 0.1%), which can be viewed as a relatively stable process.
Given a social network with influence weights, the glob-al influence maximization aims to identify a subset of seed nodes (i.e., leaders), through which the influence can be spread to the largest number of users in the social network.
The pioneer work in global influence maximization, to the best of our knowledge, can be traced back to Domingos and Fi gure 11: (a)Running time with p = 0 : 03 (b)Running time with k = 6 Richardson [7, 8]. Then, Kempe et al. [1] formulated the influence maximization problem as a discrete optimization problem, and provided algorithms with provable approxima-tion guarantees.

For algorithms, most recent work [3,9 X 16,21,26] focus on the efficiency of the influence maximization problem, due to expensive computation on large-scale social networks. These research can be divided into two complementary direction-s. One direction is greedy algorithms and their extensions with provable approximation guarantees [3,10 X 12,16,21,26]. For example, Leskovec et al. [3,11] and Goyal et al. [16] ex-ploited the sub-modularity property of problem objective to reduce the number of evaluations on the influence spread of nodes. Kimura et al. [10] estimated all quantities on the basis of bond percolation and graph theory. Chen et al. [11] removed the edges that not contribute to propagation from the original graph, and performed the influence diffusion on a smaller graph. Wang et al. [12] found influential nodes based on communities detecting and selecting. Barbieri et al. [26] studied social influence from the topic modeling per-spective.

The other direction is to develop efficient heuristic algo-rithms on large-scale networks [9, 11, 13 X 15]. For example, Kimura and Saito [9] proposed two shortest-path based influ-ence cascade models for efficient estimation. Chen et al. [11] found influential nodes under the assumption that the influ-ence spread increases with the degree of nodes, and gained efficiency by restricting computations on the local local in-fluence communities of nodes [13,14]. Goyal et al. [15] com-puted the spread by exploring simple paths in the neighbor-hood. Different from greedy algorithms, heuristics has high efficiency, but without provable performance guarantee.
However, existing work on global influence maximization cannot be directly transplanted to our local optimization problem. Therefore, we present several local near-optimal algorithms with approximation guarantee.
We have studied a new problem of personalized (local) influence maximization on social networks. We have pro-vided a random function, with lower variance guarantee, to randomly simulate our objective function. Then, we have presented efficient algorithms with approximation guaran-tees. Experimental results have validated the performance of the proposed algorithms.

There are some interesting problems in the future. First, our local influence maximization model is based on the IC model. How to model the problem under other cascade mod-els (e.g., the linear threshold model) needs further study. Second, with the availability of big social network data gen-erated by online shopping, advertising and instant messag-ing, how to identify the most influential users for a given target user across multiple sources is also a challenge.
This work is supported by the Research Project of Insti-tute of Information Engineering of Chinese Academy of Sci-ences (No. Y3Z0062101), the National Science Foundation of China (No. 61003167), the National High Technology Re-search and Development Program of China (No. 2011AA-010703 and 2011AA01A103), the Strategic Leading Science and Technology Projects of Chinese Academy of Sciences (No. XDA06030200). [1] David Kempe, Jon Kleinberg, and  X  E va Tardos. [2] Xiaodan Song, Belle L.Tseng, Ching-Yung Lin, and [3] Jure Leskovec, Andreas Krause, Carlos Guestrin, [4] Jianshu Weng, Ee-Peng Lim, Jing Jiang, and Qi He. [5] Eytan Bakshy, Winter A. Mason, Jake M. Hofman, [6] Elchanan Mossel and Sebastien Roch. On the [7] Domingos Pedro and Richardson Matt. Mining the [8] Richardson Matthew and Domingos Pedro. Mining [9] Masahiro Kimura and Kazumi Saito. Tractable models [10] Masahiro Kimura, Kazumi Saito, and Ryohei Nakano. [11] Wei Chen, Yajun Wang, and Siyu Yang. Efficient [12] Yu Wang, Gao Cong, Guojie Song, and Kunqing Xie. [13] Wei Chen, Chi Wang, and Yajun Wang. Scalable [14] Wei Chen, Yifei Yuan, and Li Zhang. Scalable [15] Amit Goyal, Wei Lu, and Laks V.S Lakshmanan. [16] Amit Goyal, Wei Lu, and Laks V.S Lakshmanan. [17] Ceren Budak, Divyakant Agrawal, and Amr El [18] Shishir Bharathi, David Kempe, and Mahyar Salek. [19] Smriti Bhagat, Amit Goyal, and Laks V.S [20] Tim Carnes, Chandrashekhar Nagarajan, Stefan M. [21] Jure Leskovec. Dynamics of Large Networks .
 [22] Seth A. Myers and Jure Leskovec. Clash of the [23] Julian McAuley and Jure Leskovec. Learning to [24] Seth A. Myers, Chenguang Zhu, and Jure Leskovec. [25] Manuel Gomez-Rodriguez, Jure Leskovec, and [26] Nicola Barbieri, Francesco Bonchi, and Giuseppe [27] David Williams. Probability with martingales. [28] G.L. Nemhauser, L.A. Wolsey, and M.L. Fisher. An [29] Jure Leskovec, Ajit Singh, and Jon Kleinberg. [30] http://snap.stanford.edu/data/index.html.
