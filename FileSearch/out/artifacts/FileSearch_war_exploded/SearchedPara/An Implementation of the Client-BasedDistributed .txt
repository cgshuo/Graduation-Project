 A method that transmits information by using the web these days is recognized as a new medium for media and has an explosive increase of the Internet users. The bottleneck of networks or the exceeding requests for a server will be a ma-jor factor for the increase of delay and possibility of failure. In order to solve these problems, some study for the reducing the total delay time has been per-formed by avoiding the bottleneck of network, distributing the requests that are concentrated to a single web server through the installed cache, which will be installed near the user X  X  client, and supplying the copied information of the orig-inal servers to the clients. These studies are classified into the two categories. The one uses the communication method according to the object assignment and searching method between the shared caches [4-7], and the other one applies a hash function [8-11][1][3] which is called a hash routing method. The commu-nication methods assign a single configured cache due to the characteristics of the client in the system. Thus, it is not able to use the storing space effectively because the requested objects may exist between the shared caches by this as-signment. In addition, if there is no object requested by the clients in the cache, the absence of the object can be verified by applying a request for all of the shared caches. Then, the object is stored in the cache from the original server and transmitted to the client at the same time. It will include a delay time for an inquiry and lower the performance of a distributed web caching system and waste the resources of the network. On the other hand, the hash routing meth-ods have been proposed to solve these problems. The Consistent Hashing [3] used in GHS (Global Hosting System) [2] by Akamai and CARP (Cache Array Routing Protocol) designed by Microsoft [1] have been used in recent years as a representative methods for applying a hash function even though they have different ways in their applications.
 by using DNS [14]. In addition, it can be considered in order to control the load by controlling the value of TTL (Time To Live) of DNS [14] and optimizing the assignment of objects of the caches [22]. Similarly, the Consistent Hashing requires DNS essentially to assign an object and control the loads. In the case of adding or using DNS by the necessity in a distributed web caching system by this way, it will be noted by an Additional-DNS in the main body hereafter. This may be operated as an average web environment that uses DNS all the time to find an object in DNS and has a DNS delay time (Of course, the total time is very small.), the waiting time for the response of an inquiry between the DNSs in order to find an object. Therefore, if CARP [1] and Consistent Hashing [3] have a complex domain delegation for DNS due to the system that becomes a huge scale, the system becomes complex so that the DNS delay time may increase. reduced in the existing web environments. Moreover, it is possible to configure a simple system that doesn X  X  require an installation of the Additional-DNS in the present distributed web caching system (CARP or GHS). This will reduce the DNS delay time that is included in the total delay time in order to bring an object by using the existing distributed web caching system. Consequently, it can improve the performance of a distributed web caching system. Then, the loads of DNS can be reduced in the present network system. This paper develops a simple client-based distributed caching system. It doesn X  X  require an Additional-DNS for CARP [1] and Consistent Hashing [3]. This system doesn X  X  lower its performance compared with the present hash routing scheme when it proved through a implementation to the Heterogeneous Cache System that is similar to an actual environment.
 cache protocol and its problems. Chapter 3 includes the configurations and con-tents of the developed client-based distributed web caching system. Chapter 4 describes the experimental setup and the results. Finally, Chapter 5 describes the conclusions of this study. According to the use of the object allocation methods which assign an object to caches and search the location in shared caches. The shared cache protocols can be classified with the communication methods using ICP and the Hash Routing methods. It has been developed by complementing the demerits of each method. This ICP [8] is a kind of distributed web caching method to solve the problems arise in a single cache with multiple users, such as the processing speed, storing capacity, and number of connected users. As shown in Figure 1, a system that basically uses the ICP will communicate between the shared caches by steps (2) and (3) if the configured cache is the Shared Cache 1 when the first Client 1 requests an inquiry to the original server by using the UDP/IP to search an object. In the worst-case scenario, it should communicate with N-1 caches and then requests an object by connecting the original server by step (4) in which the configured cache stores the object and transmits to the Client 1 at the same time. Therefore, the ICP method has a delay time inherently due to the communication to search an object in the shared caches result in waste the bandwidth of the network due to the excess of the ICP communication if the objects do not exist in the cache. Moreover, it has a demerit that wastes the whole storing spaces of the caches because the requested objects are duplicated in the each shared cache.
 these problems only by using ICP through hashing the URL of an object that the client wants to find with a basic hash function. These methods are expressed by the Hash Routing Protocol. According to the main factors for the assignment of an object in the system, it can be classified into tree types which are Client-type, Cache-type and DNS-type. In the Client-type system, a client will assign and take an object by connecting the cache directly through a hash function. In the Cache-type system, a cache will assign and take an object by using a hash function, which is configured in the client. In the DNS-type system, a client will assign and take an object by using a DNS, which is requested by the client. On the other hand, the hash routing methods can also be classified into the Simple Hash Routing [8-11] and Robust Hash Routing methods [1][3]. A method applying a simple hash routing in the ICP [8-11] uses a basic hash function is expressed by equation (1) in a distributed cash environment, where u is the URL [13], h ( u ) is a hash function that is able to form a fixed hash value, such as MD4 and MD5, and p is the number of caches. Therefore, it is possible to know where the hashed values of u , are to be located. In addition, the duplication of the objects can be reduced by configuring the system that directly connects to each cache. However, this method will reassign all of the URLs and assign the objects to the cache when a cache is added or removed. Therefore, it presents a problem because the errors or faults for the requests of the user are increased and will lead to the lowering of the hit ratio. In order to solve these problems, the CARP [1] and the Consistent Hashing [3] use a different Robust Hash Routing methods[10][3].
 figuration, assuming that each client has the same hash functions for allocating an object to the shared caches. If the client already know the IP Address of each shared cache, the system can be configured as shown in Figure 2. The Client 1 can find which IP address of the shared cache is for the object X  X  URL through the hash function. Therefore, it is possible to take the object from the Shared Cache 1 that is to be assigned an object when the cache is connected. If the cache has no object to be taken from it, the Shared Cache 1 stores an object by taking it from the original server and transmits it to the Client 1 at the same time. The configuration of the Client-type system can be setup by modifying the browser. However, it is actually hard to change the browser so that the system will be configured as a similar the Client-type system to the Cache-type system or the DNS-type system as presented in Figures 3 and 4 respectively. Actually, the system configuration of the CARP [1] is the Cache-type system, and the Consistent Hashing [3] system is the DNS-type system. The CARP [1] is config-ured as shown in Figure 3 in which the clients use the Robust Hashing [10]. In this case, the Client 1 brings the IP address of the shared cache 1(Configured Cache) which assigned by step (1) and then requests and gets the objects in step (2). While it waits for receiving of the object, the Configured Cache hashes the URL of u and cache domain name of c for the numbers of N and makes each 2 through taking a high score value of these pairs, it requests an object for the Shared Cache 2 and gets the object in step (3). During the step (3), Shared Cache 2 immediately forwards the object to the Configured Cache if there is a proper object. Otherwise, the Shared Cache 2 requests the object to the Origi-nating Server. At this time, it saves the object obtained from Originating Server in step (4) and forwards this to Configured Cache(Shared Cache 1) at the same time in step (3). Finally, the Configured Cache transmits the object to Client 1 without the duplication of the object in step (2).
 cache can be assigned to the cache by considering the probability of the hash value of the URL for the different capacities of each shared cache in their hash function. However, the protection of the load concentration for a particular cache using Round Robin method [14] of an Additional-DNS which assigns a domain name of configured cache to N IP Addresses of each shared cache doesn X  X  reduce the present use of DNS and DNS delay time caused by the DNS for the clients. The system of the Consistent Hashing [3] used in the GHS [2] is configured as shown in Figure 4 in which the clients use the hash value to be taken by the use of a simple hash function for the URL of an object. Then, it makes a virtual domain name that has a hash value to assign the URL to N virtual cache names. For instance, a URL like v101.cnn.com can be produced. The Low Level DNS periodically reassigns the IP address of both the virtual domain name and shared cache through the DNS-Helper which is an assistant program to consider the load for each cache, the addition and the disappearance of the shared cache in this system. Thus, it is possible for the Client 1 to get the IP Address of real shared cache for the URL of the object. For step (1) presented in Figure 4, the Client 1 brings the IP address of the virtual domain name related to the URL of an object from the Low Level DNS (Additional-DNS), that is, an IP address of the Shared Cache 1 that is to be assigned for the object. Next, it requests the URL of the object for the Shared Cache 1 in step (2). If a requested object doesn X  X  exist in the Shared Cache 1, the Shared Cache 1 brings the object from the Originating Server, transmits it to the Client 1 and stores it at the same time in step(2) and (3). After that, if there is a request for the same object, the stored object in the Shared Cache 1 will be transmitted immediately. The Consistent Hashing [3] is required to use existing DNS same as CARP [1] and has a DNS delay time of the Additional-DNS. Moreover, if this system expand in scale, the DNS Delay time will be increased and a problem may exist for managing the Additional-DNS. A client-based distributed web caching system proposed in [23] is configured as a type of Single-tier which is a hybrid robust hash routing client system (hereafter, this will be expressed as the 2HRCS). Each client is configured to include the Consistent Hashing algorithm [3]. However, a load control algorithm is excluded and used which a cache load control algorithm. From the system con-figuration shown in Figure 5, it shows that the system is simplified by excluding the Additional-DNS, the same as the CARP [1] presented in Figure 3 and the Consistent Hashing [3] illustrated in Figure 4. The main elements of the system are CP Helper, Proxy Helper, and client.
 CP(Contents Provider). The information has load and Hot page in each cache and is transmitted by CP Helper to the multi-client. The multi-client uses it to assign an object to the each cache when each client connects to the CP at the first request for a page. The Proxy Helper is a program module that generates the information of each shared cache. The information will be obtained from the log files of the each cache. Also it assigns the maximum number of request that each proxy can handle. The Proxy Helper is programmed by C&amp;C++ language for the TCP/IP communication and PERL script is used for the log file analy-sis. The proxy helper is triggered by the CP Helper. When CP Helper requests information to the Proxy Helper, the Proxy Helper provides the Hot Pages and load conditions to the CP helper after analysis of the log files. The Hot Page is a popular page. The page will be assigned as a Hot Page when its request exceeds 30% of the total request of cache in 3 minutes.
 dition, it can receive a simple HTML source from a CP server and be imple-mented by using a TCP/IP communication to receive the information of caches from the CP Helper at the same time. The client uses the existing DNS when it finds the IP address of the first CP server. It can be defined by the self-installed hash function (Consistent Hashing method) and load control algorithm without an Additional-DNS for assigning the URL of an object included in the HTML source brought by the CP. Therefore, the client doesn X  X  use the DNS except for the request to get an IP address which corresponds to the name of the CP. It reduces the use of general DNS, minimizes the DNS delay time and doesn X  X  need the Additional-DNS. The clients receive the load information of the shared caches and the Hot Page (Hot Virtual Name) whenever they connect to the CP server and have an algorithm to control the load by controlling the assignment of the virtual name to the actual caches according to the levels of the load. The 2HRCS has a simple load control algorithm that distributes the assignment of Hot page to the shared cache with most lower load. It X  X  possible to distribute the number of requests based on the cache information updated periodically. If the load information of i th cache denotes  X  i , we assume it is  X  i = r i R is the maximum number of requests that can processed by the i th cache in given period and r i is the number of present requests processed by the i th cache in the same period. If each shared cache has a same capacity or not in the system, it is able to control the load of each shared cache since it can control the value of R i .
 of each shared cache which has a different capacity without using a complex calculation. The information of each shared cache is downloaded from the CP Helper when it connects to the CP Helper. Consequently, the proposed system is simplified and improved by removing the Additional-DNS. 4.1 Configurations of a Experimental System The existing Surge [15] developed by Boston University is modified for the inves-tigation of the proposed system. The MD4 [16] in the Surge is used to produce a hash value for the object X  X  URL. Each client thread in the Surge takes the role of a client and brings the cache information of every shared cache from the CP Helper located in the CP Server in every 30 seconds. The cache information has IP Addresses, the load and Hot Pages of each shared cache. In addition, the Surge produces more than 1000 virtual caches through the modulo calculation, it is similarly as in the Consistent Hashing [3] method, and stores the hash values of the IP addresses of the actual caches by using a binary tree. Moreover, by using 10-copied caches of virtual caches, the distribution of the virtual caches is improved.
 to the name of virtual cache that existed in the binary tree by using the hash values of the URL. Then it requests the object to the cache and receives the object. Moreover, the Surge can control the variables of the Zipf X  X  law to produce the requests by considering the characteristics of the cache [17-19]. If all pages are requested to a certain server, the numbers required for a single file can be expressed by p =  X  X   X  where  X  is a constant, the ranking is expressed by was loaded when it is assumed to be 1 for the web server. In this experiment, the value of  X  was defined by 0.75. This makes it possible to increase the requests for a certain object and creates the Hot Spot in the given time. The Surge is installed on the Intel Pentium III 500Mhzx2 computer which uses Linux Redhat 7.2 Kernel version 2.4.7 for the Operating System.
 7.2 Kernel version 2.4.7 operating system by installing the Apache release 1.3 [21] in a Pentium III 800Mhz computer. The CP Helper is installed to the CP server. For configuration of the shared cache servers, the Squid release 2.3 [20] is installed to three Intel Pentium II machines with the same OS. The Proxy Helper is installed to each shared cache server. is installed in each shared cache server. When it was requested for the informa-tion of cache from CP Helper, it transmits the cache information including the analyzed load information and also Hot Pages in every 2 minutes.
 than 2 minutes, the cache information will be overlapped for 90 seconds. shared cache. The experimental system is configured to compare the consistent hashing with 2HRCS on the private network in Figure 6. 4.2 Implementation Results In this experiment, the shared cache has different capacity of handling the re-quests. The average delay time of the Consistent Hashing and the proposed 2HRCS are presented in Figure 7 and Figure 8. The experiment has been per-formed by applying 300,000 requests for 50 minutes with 5,000 different files. The files were produced by Surge generation program. This experiment was per-formed for five times. Figure 7 presented the average delay time of each service with respect to the object size for the hash routing scheme (CARP, GHS) and the proposed scheme (2HRCS). Although it looks almost same for each one, the proposed system shows a little better than the Consistent Hashing system for the local area network. In order to show a more certain difference, the total delay time of the request occurred in each interval of object size has been presented in Figure 8. it shows that the proposed scheme completes the service with smaller delay time.
 This paper examines the problems of the existent distributed web caching sys-tem and simplifies it to the Client-type system by removing the Additional-DNS that is an element of the CARP and Consistent Hashing through the modifica-tion of the client browser. By implanting the proposed system into the real local network, the proper operation of system was verified. Furthermore, the perfor-mance of the proposed system is better than the consistent hashing scheme in the aspect of the service delay time. In conclusion, the advantage of the proposed scheme is the simplicity of the system and the shorter delay time of service. Acknowledgements. The authors thank KEPCO R-2004-B-120 and RRC (KOSEF) R-12-1998-026-02003 for their financial support.

