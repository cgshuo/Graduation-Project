 Syntactic parsing has made tremendous progress in the past 2 decades (Magerman, 1994; Ratnaparkhi, 1997; Collins, 1997; Charniak, 2000; Klein and Manning, 2003; Carreras et al., 2008), and accu-rate syntactic parsing is often assumed when devel-oping other natural language applications. On the other hand, there are plenty of language applications where basic syntactic information is insufficient. For instance, in question answering, it is highly desir-able to have the semantic information of a syntactic constituent, e.g., a noun-phrase (NP) is a person or an organization; an adverbial phrase is locative or temporal. As syntactic information has been widely used in machine translation systems (Yamada and Knight, 2001; Xiong et al., 2010; Shen et al., 2008; Chiang, 2010; Shen et al., 2010), an interesting question is to predict whether or not a syntactic con-stituent is projectable 1 across a language pair.
Such problems can be abstracted as adding addi-tional annotations to an existing tree structure. For example, the English Penn treebank (Marcus et al., 1993) contains function tags and many carry seman-tic information. To add semantic information to the basic syntactic trees, a logical step is to predict these function tags after syntactic parsing. For the prob-lem of predicting projectable syntactic constituent, one can use a sentence alignment tool and syntac-tic trees on source sentences to create training data by annotating a tree node as projectable or not. A generic tree annotator can also open the door of solv-ing other natural language problems so long as the problem can be cast as annotating tree nodes. As one such example, we will present how to predict empty elements for the Chinese language.

Some of the above-mentioned problems have been studied before: predicting function tags were studied in (Blaheta and Charniak, 2000; Blaheta, 2003; Lintean and Rus, 2007a), and results of pre-dicting and recovering empty elements can be found in (Dienes et al., 2003; Schmid, 2006; Campbell, 2004). In this work, we will show that these seem-ingly unrelated problems can be treated uniformly as adding annotations to an existing tree structure, which is the first goal of this work. Second, the proposed generic tree annotator can also be used to solve new problems: we will show how it can be used to predict projectable syntactic constituents. Third, the uniform treatment not only simplifies the model building process, but also affords us to con-centrate on discovering most useful features for a particular application which often leads to improved performances, e.g, we find some features are very effective in predicting function tags and our system has significant lower error rate than (Blaheta and Charniak, 2000; Lintean and Rus, 2007a).

The rest of the paper is organized as follows. Sec-tion 2 describes our tree annotator, which is a con-ditional log-linear model. Section 3 describes the features used in our system. Next, three applications of the proposed tree annotator are presented in Sec-tion 4: predicting English function tags, predicting Chinese empty elements and predicting Arabic pro-jectable constituents. Section 5 compares our work with some related prior arts. The input to the tree annotator is a tree T . While T can be of any type, we concentrate on the syntac-tic parse tree in this paper. The non-terminal nodes, N = { n : n  X  T } of T are associated with an order by which they are visited so that they can be indexed as n ber of non-terminal nodes in T . As an example, Figure 1 shows a syntactic parse tree with the pre-fix order (i.e., the number at the up-right corner of each non-terminal node), where child nodes are vis-ited recursively from left to right before the parent node is visited. Thus, the NP-SBJ node is visited first, followed by the NP spanning duo action , followed by the PP-CLR node etc.

With a prescribed tree visit order, our tree annota-tor model predicts a symbol l from a predefined finite set L , for each non-terminal node n The visit order is important since it determines what are in the conditioning of Eq. (1).

P ( l i | l 1 ,  X  X  X  , l i  X  1 , T ) in this work is a conditional log linear (or MaxEnt) model (Berger et al., 1996): where is the normalizing factor to ensure that ability and { g
There are efficient training algorithms to find op-timal weights relative to a labeled training data set once the feature functions { g lected (Berger et al., 1996; Goodman, 2002; Malouf, 2002). In our work, we use the SCGIS training al-gorithm (Goodman, 2002), and the features used in our systems are detailed in the next section.
Once a model is trained, at testing time it is ap-plied to input tree nodes by the same order. Figure 1 highlights the prediction of the function tag for node 3(i.e., PP-CLR -node in the thickened box) after 2 shaded nodes ( NP-SBJ node and NP node) are pre-dicted. Note that by this time the predicted values are available to the system, while unvisited nodes (nodes in dashed boxes in Figure 1) can not provide such information. The features used in our systems are tabulated in Ta-ble 1. Numbers in the first column are the feature in-dices. The second column contains a brief descrip-tion of each feature, and the third column contains the feature value when the feature at the same row is applied to the PP -node of Figure 1 for the task of predicting function tags.

Feature 1 through 8 are non-lexical features in that all of them are computed based on the labels or POS tags of neighboring nodes (e.g., Feature 4 computes the label or POS tag of the right most child), or the structure information (e.g., Feature 5 computes the number of child nodes).
Feature 9 and 10 are computed from past pre-dicted values. When predicting the function tag for the PP -node in Figure 1, there is no predicted value for its left-sibling and any of its child node. That X  X  why both feature values are NONE , a special sym-bol signifying that a node does not carry any func-tion tag. If we were to predict the function tag for the VP -node, the value of Feature 9 would be SBJ , while Feature 10 will be instantiated twice with one value being CLR , another being TMP .

Feature 11 to 19 are lexical features or computed from head nodes. Feature 11 and 12 compute the node-internal boundary words, while Feature 13 and 14 compute the immediate node-external boundary words. Feature 15 to 19 rely on the head informa-tion. For instance, Feature 15 computes the head word of the current node, which is to for the PP -node in Figure 1. Feature 16 computes the same for the parent node. Feature 17 tests if the current node is the head of its parent. Feature 18 and 19 compute the label or POS tag and the predicted value of the head child, respectively.

Besides the basic feature presented in Table 1, we also use conjunction features. For instance, applying the conjunction of Feature 1 and 18 to the PP -node in Figure 1 would yield a feature instance that cap-tures the fact that the current node is a PP node and its head child X  X  POS tag is TO . A wide variety of language problems can be treated as or cast into a tree annotating problem. In this section, we present three applications of the statisti-cal tree annotator. The first application is to predict function tags of an input syntactic parse tree; the sec-ond one is to predict Chinese empty elements; and the third one is to predict whether a syntactic con-stituent of a source sentence is projectable , meaning if the constituent will have a contiguous translation on the target language. 4.1 Predicting Function Tags In the English Penn Treebank (Marcus et al., 1993) and more recent OntoNotes data (Hovy et al., 2006), some tree nodes are assigned a function tag, which is of one of the four types: grammatical, form/function, topicalization and miscellaneous. Ta-ble 2 contains a list of function tags used in the English Penn Treebank (Bies et al., 1995). The  X  X rammatical X  row contains function tags marking the grammatical role of a constituent, e.g., DTV for dative objects, LGS for logical subjects etc. Many tags in the  X  X orm/function X  row carry semantic in-formation, e.g., LOC is for locative expressions, and TMP for temporal expressions.
 Type Function Tags Grammatical (52.2%) DTV LGS PRD Form/function (36.2%) ADV BNF DIR Topicalization (2.2%) TPC Miscellaneous (9.4%) CLF CLR HLN TTL 4.1.1 Comparison with Prior Arts In order to have a direct comparison with (Blaheta and Charniak, 2000; Lintean and Rus, 2007a), we use the same English Penn Treebank (Marcus et al., 1993) and partition the data set identically: Section 2-21 of Wall Street Journal (WSJ) data for training and Section 23 as the test set. We use all features in Table 1 and build four models, each of which pre-dicting one type of function tags. The results are tabulated in Table 3.

As can be seen, our system performs much better than both (Blaheta and Charniak, 2000) and (Lin-tean and Rus, 2007a). For two major categories, namely grammatical and form/function which ac-count for 96 . 84% non-null function tags in the test set, our system achieves a relative error reduction of 77 . 1% (from (Blaheta and Charniak, 2000) X  X  1 . 09% to 0 . 25% ) and 46 . 9% (from (Blaheta and Charniak, 2000) X  X  2 . 90% to 1 . 54% ) , respectively. The per-formance improvements result from a clean learn-ing framework and some new features we intro-duced: e.g., the node-external features, i.e., Feature 13 and 14 in Table 1, can capture long-range statis-tical dependencies in the conditional model (2) and are proved very useful (cf. Section 4.1.2). As far as we can tell, they are not used in previous work. Type Blaheta00 Lintean07 Ours Grammar 98.91% 98.45% 99.75%
Form/Func 97.10% 95.15% 98.46% topic 99.92% 99.87% 99.98% Misc 98.65% 98.54% 99.41% 4.1.2 Relative Contributions of Features Since the English WSJ data set contains newswire text, the most recent OntoNotes (Hovy et al., 2006) contains text from a more diversified genres such as broadcast news and broadcast conversation, we decide to test our system on this data set as well. WSJ Section 24 is used for development and Sec-tion 23 for test, and the rest is used as the training data. Note that some WSJ files were not included in the OntoNotes release and Section 23 in OntoNotes contains only 1640 sentences. The OntoNotes data statistics is tabulated in Table 4. Less than 2% of nodes with non-empty function tags were assigned multiple function tags. To simplify the system build-ing, we take the first tag in training and testing and report the aggregated accuracy only in this section.
We use this data set to test relative contributions of different feature groups by incrementally adding features into the system, and the results are reported in Table 5. The dummy baseline is predicting the most likely prior  X  the empty function tag, which indicates that there are 78.21% of nodes without a function tag. The next line reflects the performance of a system with non-lexical features only (Feature 1 to 8 in Table 1), and the result is fairly poor with an accuracy 91.51%. The past predictions (Feature 8 and 9) helps a bit by improving the accuracy to 92.04%. Node internal lexical features (Feature 11 and 12) are extremely useful: it added more than 3 points to the accuracy. So does the node external lex-ical features (Feature 13 and 14) which added an ad-ditional 1.52 points. Features computed from head words (Feature 15 to 19) carry information comple-mentary to the lexical features and it helps quite a bit by improving the accuracy by 0.64%. When all features are used, the system reached an accuracy of 97.34%.

From these results, we can conclude that, unlike syntactic parsing (Bikel, 2004), lexical information is extremely important for predicting and recover-ing function tags. This is not surprising since many function tags carry semantic information, and more often than not, the ambiguity can only be resolved by lexical information. E.g., whether a PP is locative or temporal PP is heavily influenced by the lexical choice of the NP argument. 4.2 Predicting Chinese Empty Elements As is well known, Chinese is a pro-drop language. This and its lack of subordinate conjunction com-plementizers lead to the ubiquitous use of empty el-ements in the Chinese treebank (Xue et al., 2005). Predicting or recovering these empty elements is therefore important for the Chinese language pro-cessing. Recently, Chung and Gildea (2010) has found it useful to recover empty elements in ma-chine translation.

Since empty elements do not have any surface string representation, we tackle the problem by at-taching a pseudo function tag to an empty element X  X  lowest non-empty parent and then removing the sub-tree spanning it. Figure 2 contains an example tree before and after removing the empty element * pro * and annotating the non-empty parent with a pseudo function tag NoneL . The transformation procedure is summarized in Algorithm 1.

In particular, line 2 of Algorithm 1 find the lowest parent of an empty element that spans at least one non-trace word. In the example in Figure 2, it would find the top IP -node. Since * pro * is the left-most child, line 4 of Algorithm 1 adds the pseudo function tag NoneL to the top IP -node. Line 9 then removes its NP child node and all lower children (i.e., shaded subtree in Figure 2(1)), resulting in the tree in Fig-ure 2(2).

Line 4 to 8 of Algorithm 1 indicate that there are 3 types of pseudo function tags: NoneL , NoneM , and NoneR , encoding a trace found in the left, mid-dle or right position of its lowest non-empty parent. It X  X  trivial to recover a trace X  X  position in a sentence from NoneL , and NoneR , but it may be ambiguous for NoneM . The problem could be solved either us-ing heuristics to determine the position of a middle empty element, or encoding the positional informa-tion in the pseudo function tag. Since here we just want to show that predicting empty elements can be cast as a tree annotation problem, we leave this op-tion to future research.

With this transform, the problem of predicting a trace is cast into predicting the corresponding Algorithm 1 Procedure to remove empty elements and add pseudo function tags.
 Input : An input tree Output : a tree after removing traces (and their empty parents) and adding pseudo function tags to its lowest non-empty parent node 1:Foreach trace t 2: Find its lowest ancestor node p spanning at least one non-trace word 3: if t is p  X  X  left-most child 4: add pseudo tag NoneL to p 5: else if t is p  X  X  right-most child 6: add pseudo tag NoneR to p 7: else 8: add pseudo tag NoneM to p 9: Remove p  X  X  child spanning the trace t and all its children pseudo function tag and the statistical tree annota-tor can thus be used to solve this problem. 4.2.1 Results We use Chinese Treebank v6.0 (Xue et al., 2005) and the broadcast conversation data from CTB velopment and blind test as shown in Table 6. The partition is created so that different genres are well represented in different subsets. The training, de-velopment and test set have 32925, 3297 and 3033 sentences, respectively.

We then apply Algorithm 1 to transform trees and predict pseudo function tags. Out of 1,100,506 non-terminal nodes in the training data, 80,212 of them contain pseudo function tags. There are 94 nodes containing 2 pseudo function tags. The vast major-ity of pseudo tags  X  more then 99.7%  X  are attached to either IP , CP , or VP : 50971, 20113, 8900, respec-tively.

We used all features in Table 1 and achieved an accuracy of 99 . 70% on the development data, and 99 . 71% on the test data on gold trees.

To understand why the accuracies are so high, we look into the 5 most frequent labels carrying pseudo tags in the development set, and tabulate their per-formance in Table 7. The 2nd column contains the number of nodes in the reference; the 3rd column the number of nodes of system output; the 4th column the number of nodes with correct prediction; and the 5th column F-measure for each label.
 From Table 7, it is clear that CP-NoneL and IP-NoneL are easy to predict. This is not sur-prising, given that the Chinese language lacks of complementizers for subordinate clauses. In other words, left-most empty elements under CP are al-most unambiguous: if a CP node has an immediate IP child, it almost always has a left-most empty el-ement; similarly, if an IP node has a VP node as the left-most child (i.e., without a subject), it almost always should have a left empty element (e.g., mark-ing the dropped pro). Another way to interpret these results is as follows: when developing the Chinese treebank, there is really no point to annotate left-most traces for CP and IP when tree structures are available.

On the other hand, predicting the left-most empty elements for VP is a lot harder: the F-measure is only 86.8% for VP-NoneL . Predicting the right-most empty elements under VP and middle empty elements under IP is somewhat easier: VP-NoneR and IP-NoneM  X  X  F-measures are 92.3% and 93.6%, respectively. 4.3 Predicting Projectable Constituents The third application is predicting projectable con-stituents for machine translation. State-of-the-art machine translation systems (Yamada and Knight, 2001; Xiong et al., 2010; Shen et al., 2008; Chi-ang, 2010; Shen et al., 2010) rely heavily on syn-tactic analysis. Projectable structures are impor-tant in that it is assumed in CFG-style translation rules that a source span can be translated contigu-ously. Clearly, not all source constituents can be translated this way, but if we can predict whether a non-terminal source node is projectable, we can avoid translation errors by bypassing or discourag-ing the derivation paths relying on non-projectable constituents, or using phrase-based approaches for non-projectable constituents.

We start from LDC X  X  bilingual Arabic-English treebank with source human parse trees and align-ments, and mark source constituents as either pro-jectable or non-projectable. The binary annotations can again be treated as pseudo function tags and the proposed tree annotator can be readily applied to this problem.

As an example, the top half of Figure 3 con-tains an Arabic sentence with its parse tree; the bot-tom is its English translation with the human word-alignment. There are three non-projectable con-stituents marked with  X # X : the top PP# spanning the whole sentence except the final stop, and NP#1 and NP#2 . The PP# node is not projectable due to an inserted stop from outside; NP#1 is not pro-jectable because it is involved in a 2-to-2 alignment with the token b# outside NP#1 ; NP#2 is aligned to a span the Iraqi official  X  X  sudden obligations . , in which Iraqi official breaks the contiguity of the translation. It is clear that a CFG-like grammar will not be able to gener-ate the translation for NP#2 .

The LDC X  X  Arabic-English bilingual treebank does not mark if a source node is projectable or not, but the information can be computed from word alignment. In our experiments, we processed 16,125 sentence pairs with human source trees for training, and 1,151 sentence pairs for testing. The statistics of the training and test data can be found in Table 8, where the number of sentences, the number of non-terminal nodes and the number of non-projectable nodes are listed in Column 2 through 4, respectively.
We get a 94.6% accuracy for predicting pro-jectable constituents on the gold trees, and an 84.7% F-measure on the machine-generated parse trees. This component has been integrated into our ma-chine translation system (Zhao et al., 2011). Blaheta and Charniak (2000) used a feature tree model to predict function tags. The work was later extended to use the voted perceptron (Blaheta, 2003). There are considerable overlap in terms of features used in (Blaheta and Charniak, 2000; Bla-heta, 2003) and our system: for example, the label of current node, parent node and sibling nodes. How-ever, there are some features that are unique in our work, e.g., lexical features at a constituent bound-aries (node-internal and node-external words). Table 2 of (Blaheta and Charniak, 2000) contains the ac-curacies for 4 types of function tags, and our results in Table 3 compare favorably with those in (Blaheta and Charniak, 2000). Lintean and Rus (2007a; Lin-tean and Rus (2007b) also studied the function tag-ging problem and applied naive Bayes and decision tree to it. Their accuracy results are worse than (Blaheta and Charniak, 2000). Neither (Blaheta and Charniak, 2000) nor (Lintean and Rus, 2007a; Lin-tean and Rus, 2007b) reported the relative usefulness of different features, while we found that the lexical features are extremely useful.

Campbell (2004) and Schmid (2006) studied the problem of predicting and recovering empty cate-gories, but they used very different approaches: in (Campbell, 2004), a rule-based approach is used while (Schmid, 2006) used a non-lexical PCFG sim-ilar to (Klein and Manning, 2003). Chung and Gildea (2010) studied the effects of empty cate-gories on machine translation and they found that even with noisy machine predictions, empty cate-gories still helped machine translation. In this paper, we showed that empty categories can be encoded as pseudo function tags and thus predicting and recov-ering empty categories can be cast as a tree anno-tating problem. Our results also shed light on some empty categories can almost be determined unam-biguously, given a gold tree structure, which sug-gests that these empty elements do not need to be annotated.

Gabbard et al. (2006) modified Collins X  parser to output function tags. Since their results for predict-ing function tags are on system parses, they are not comparable with ours. (Gabbard et al., 2006) also contains a second stage employing multiple clas-sifiers to recover empty categories and resolve co-indexations between an empty element and its an-tecedent.

As for predicting projectable constituent, it is re-lated to the work described in (Xiong et al., 2010), where they were predicting translation boundaries. A major difference is that (Xiong et al., 2010) de-fines projectable spans on a left-branching deriva-tion tree solely for their phrase decoder and models, while translation boundaries in our work are defined from source parse trees. Our work uses more re-sources, but the prediction accuracy is higher (mod-ulated on a different test data): we get a F-measure 84.7%, in contrast with (Xiong et al., 2010) X  X  71%. We proposed a generic statistical tree annotator in the paper. We have shown that a variety of natural language problems can be tackled with the proposed tree annotator, from predicting function tags, pre-dicting empty categories, to predicting projectable syntactic constituents for machine translation. Our results of predicting function tags compare favor-ably with published results on the same data set, pos-sibly due to new features employed in the system. We showed that empty categories can be represented as pseudo function tags, and thus predicting empty categories can be solved with the proposed tree an-notator. The same technique can be used to predict projectable syntactic constituents for machine trans-lation.

There are several directions to expand the work described in this paper. First, the results for predict-ing function tags and Chinese empty elements were obtained on human-annotated trees and it would be interesting to do it on parse trees generated by sys-tem. Second, predicting projectable constituents is for improving machine translation and we are inte-grating the component into a syntax-based machine translation system.
 This work was partially supported by the Defense Advanced Research Projects Agency under contract No. HR0011-08-C-0110. The views and findings contained in this material are those of the authors and do not necessarily reflect the position or policy of the U.S. government and no official endorsement should be inferred.

We are also grateful to three anonymous reviewers for their suggestions and comments for improving the paper.

