
Department Matem X tica Aplicada II, Universitat Polit X cnica de Catalunya, Barcelona, Spain CA Labs, CA Technologies, Barcelona, Spain 1. Introduction
There are many phenomena that can be modeled as graphs. Social networks, communication networks or the Internet are just some examples that can enlighten the importance of the study of graph-like data. Analyzing this information is becoming crucial for many applications. However, most of these graph-like datasets contain confidential information about individuals, that must not be released. Therefore, a confidential information is masked.

In a classical scenario, data are organized in tabular databases. Before releasing them, some privacy preserving techniques are applied to perturb these data in order to avoid the disclosure of confidential information from real individuals. The study of these techniques has raised a lot of interest, and there exist several proposals for anonymizing tabular databases (see [39] for a survey).
 To anonymize graph databases, it would be desirable to find a way to adapt existing tabular techniques. However, even if graphs can be easily represented with a table  X  either via the relational model or using the adjacency matrix  X  tabular anonymization techniques seek to preserve the accuracy of tabular queries and do not take into account graph semantics. This results in the loss of graph properties when directly applying tabular anonymization techniques [7]. Because of this, several privacy preserving techniques have been devised to specifically work on graphs [5,16,27,40,42].

The main contribution of this paper is the proposal of a framework that allows to reuse classical tab-ular anonymization techniques to anonymize graphs, contrary to the common belief in the community. We show that, with our proposal, by using existing anonymization algorithms on tabular data, explicit methods for preventing vertex disclosure in graphs become immediately available and are able to com-pete with actual proposals of graph anonymization. This opens a door for further research on adapting classical anonymization techniques to graph-like data. In addition, we propose a new method to adapt tabular (quantitative) measures for evaluating disclosure risk and information loss to graphs.
The key observation for our framework is the fact that most tabular anonymization techniques are eventually based on distances. We translate this premise into graphs by using metric embeddings .A metric embedding of a graph G is a mapping that maps each vertex of the graph into a point in R d .This path distance between the corresponding vertices in the graph. With such embedding, points that are close correspond to adj acent vertices with hi gh probability. Moreover, if we perturb the position of a point, it will first approach to vertices that are close in the graph distance, making metric embeddings suitable to reuse classical tabular techniques.

The remainder of this paper is organized as follows. We start by presenting the attack model and reviewing previous work on data privacy both from the classical tabular point of view and for graph databases. In Section 4, we present our three-step framework, and in Section 5, we provide ways to evaluate numerically the quality of graph anonymization techniques. We evaluate our proposal and com-pare it with the most well-known graph anonymization proposals presented in the literature in Section 6. Finally, Section 7 presents some conclusions and potential future lines of research. 2. Theoretical model
In this section, we define the theoretical model to describe confidential data and the attacks we aim to prevent in this work.

Microdata refers to the information data at the level of an individual statistical unit. It stands opposite to tabular data , that comprises  X  X ggregate X  data. However, tabular data is usually used as a synonym of microdata. In this paper, we also make the same assumption. In general, it is assumed that microdata can be represented as a two-dimensional table, where rows represent the individual records, and columns the set of variables. This allows us to model a microdata table as a mapping  X  : V  X  D 1  X  X  X  X  X  D m , where V is the set of records, and D i is the domain of the i th variable. This m -dimensional function is of record x .If V consists of n elements V = { v 1 ,...,v n } , we identify a microdata table with an n  X  m matrix X such that X ij =  X  j ( v i ) .
 dividual unequivocally (e.g. the passport number). Quasi-identifier attributes are those that do not reveal the identity of the corresponding i ndividual by themselves, but they can be combined with other quasi-identifiers to finally disclose it. Quasi-identifiers can themselves be classified as Confidential and Non-
To avoid privacy concerns, data must follow an anonymization process before being released to the identifiers are either removed or encrypted. Confidential data is the main objective of the study and is unknown to the intruder, so it is released without changing. Non-confidential quasi-identifiers are modified to prevent the reidentification of the entities and the disclosure of the confidential data. Then where f denotes the anonymizing perturbation. An attacker might have access to another public dataset whose microdata table is  X  =(  X  I , X  nc ) where the identifiers have not been deleted, and try to link the values in  X  nc with those in  X   X  nc , making it possible to reveal confidential data  X  c .
The transition from tabular databases to graph databases entails new anonymization challenges. Pri-vacy attacks on graph-like data can be mainly classified into: (i) vertex disclosure , which focuses in the identification of the individual represented by a vertex, and (ii) edge disclosure , when the presence or absence of a link or edge between given vertices is sensitive data. In this paper, we design anonymiza-tion techniques that prevent vertex disclosure, and we consider edges as non-confidential data. In the setting where confidential data is r eleased unchanged, edges must be considered non-confidential, since releasing the whole set of edges without perturbation entails several privacy concerns [2]. A different paper.

In our attack model, a graph database ( G,  X  ) consists in a graph G with vertex set V and edges E , together with a microdata table  X  : V  X  D 1  X  X  X  X  X  D m . As before, the mapping  X  can be divided into  X  version of G (a graph with the same vertex set, but different edges) and  X   X  has gone through a classical tabular anonymization process; that is,  X   X  I =  X  ,  X   X  c =  X  c and  X   X  nc = f (  X  nc ) =  X  nc .
In particular, the confidential attributes are left unchanged, and the goal of the anonymization is to identifiers. For this, the published graph  X  G must be a perturbed version of G . The attacker might have had access to some public graph database where identifiers were not deleted (it could even be the same graph G ), and now information on the topology of the graph can be used to discover the identity of the vertices of the graph, and hence to link vertices of the graph with its identifiers. 3. Previous work on anonymization
In this section we present a brief overview on classical anonymization methods, as well as methods proposed to anonymize graphs, which will be used later in the experimental section. Some of them make the assumption that all the domains correspond to real numbers ( D i = R ).

Authors in [11] present a quantitative comparison of different tabular anonymization methods. For instance, microaggregation is a family of methods based on two steps. First of all, the records of the table are divided into a set of clusters of size at least k . Then, each record of the group is replaced by the group centroid. Privacy is already achieved making each vertex indistinguishable from at least other k  X  1 . When attributes are real-valued, the clustering is chosen to minimize the information loss, by minimizing the total sum of square error Because finding the optimal microaggregation for multiple attributes is an NP -hard problem [32], there are several proposals of different heuristics to perform microaggregation such as for instance the Maxi-mal Distance to Average Vector algorithm (from now on MDAV ) [31]. For multivariate data, there exists another version of MDAV that does not provide k -anonymity but has less information loss: Multivariate MDAV [11,31]. The idea is to split the variables into different blocks of size v i , and then apply in par-allel MDAV on the subtables defined by these blocks of variables. When all the blocks are of the same size v , we will refer to this method as v -MVMDAV. Other similar methods try to decrease disclosure risk by providing different and more sophisticated anonymity measures, such as p -sensitivity [38] or l -diversity [29].

Another widely used microdata protection method is Rank Swapping [8]. The main idea behind the method is to swap the values of the attributes between two records. With Rank Swapping , given a pa-rameter P on the j th attribute, records are sorted in increasing order of attribute  X  j . So we can assume that  X  j ( x k )  X  j ( x l ) for k l . Then the value of  X  j of x k is swapped with the value of a record x k&lt;i k + P . Finally records are unsorted. In the usual setting, the procedure is repeated for each attribute, and P is chosen as a percentage of the number of records n .

Masking the original data via the addition of noise has been also studied [21,34,35]. It consists in to the variances of the variables:  X  2 ij =  X  X  2 (  X  j ) ,where  X  is a parameter that models the degree of distortion.

We refer to the surveys [18,39] and the references therein for more anonymization methods, both for numerical or categorical data. In particular, there are several proposals for achieving k -anonymity [36] and l -diversity [29] for any kind of data domains. In this paper, we take three of these techniques as representative of tabular anonymization methods and apply them to graphs. Specifically, we use Rank Swapping , v-MVMDAV and Noise Addition . They are summarized in Table 1. 3.1. Graph anonymization
The first natural approach to anonymize a graph is to simply replace the original unique identifiers by new random ones, and then release the network to the public. However, this naive approach does not preserve data privacy. In [2], authors show the need for more robust graph anonymization techniques. Such techniques can be mainly divided into (i) perturbative , which add random vertices and edges to the graph in order to turn its elements undisclosable; (ii) aggregative , which return a summarized graph an artificial graph from scratch that shares some properties with the original. In this paper we focus on perturbative techniques. More information about aggregative techniques might be found in [5,16]. For synthetic techniques see [25].

The strategy to perturb the graph defines the anonymization technique. Similarly to the tabular case, some approaches try to preserve k -anonymity. Liu and Terzi present in [27] an efficient algorithm that, from a given graph G =( V,E ) , looks for the smallest graph  X  G =( V,  X  E ) that is k -degree anonymous of G ). A graph G =( V,E ) is k -degree anonymous if for each vertex v  X  V ,thereexist k  X  1 different vertices v 1 ,...,v k  X  1  X  V with the same degree as v ,thatis deg( v )=deg( v 1 )=  X  X  X  =deg( v k ) . They also propose a version that allows for edge additions and deletions. Other proposals, such in [42], try to find graphs that fulfill the stronger condition of being k-neighborhood anonymous, where the neighborhood of a vertex v  X  V is the subgraph induced by v and its neighbors.

In [17], a random anonymizing method is presented. Given the graph G =( V,E ) ,agraph  X  G is constructed by deleting m edges chosen uniformly at random in E , and then adding m edges chosen also uniformly at random among the set of edges of the complementary graph. The method proved to this method Random Edge Switch .

In [40], random perturbations that preserve spectral properties of the graph are studied. Namely, the authors take into account  X  1 , the greatest eigenvalue of the adjacency matrix of the graph and  X  2 ,the second smallest eigenvalue of its Laplacian matrix. They switch random pairs of edges with the following and  X  2 (and the equivalent constraints). This procedure is repeated m times on random pairs of edges. We call this method Spectral Edge Switch .

Other proposals use clustering methods for network anonymization, although their graph data model is different from the one considered here. In [41] they use networks with one kind of vertex type but several edge types. In [7] they address the anonymization of bipartite graphs G =( V,E ) , where vertices V = V 1  X  V 2 represent two different types of data. Additional information on graph anonymization may be found in [15,26,43].

Note that, although we do not focus on anonymizing attributes, most of these techniques do not con-sider them while it is straightforward to extend our proposal to handle them, as we mention later.
For our experiments, we take three of these techniques as representative of graph anonymization per-turbative methods: k -degree anonymization, Random Edge Switch and Spectral Edge Switch .Table2 summarizes their description. 4. Graph anonymization via metric embeddings
In this section, we present our main contribution, a framework that allows to reuse classical tabular anonymization techniques to anonymize graphs. The framework is divided into three stages as depicted in Fig. 1.

In the first stage, the graph is mapped into R d (hence, as a table) using a Metric Embedding . In our proposal, a metric embedding of a graph G is a mapping that maps each vertex of the graph into a point of R d , so that the distance between a pair of these points in R d is as close as possible to the shortest path distance between the corresponding vertices in the graph. Therefore, when the position of one of In the second stage, a classical anonymization method is used to perturb the graph. The final step is to translate anonymized tabular data back to a graph, using geometric graphs. 4.1. Metric embedding
In this section, we discuss metric embeddings, the first stage of the framework. The basic idea behind a metric embedding is to identify a family of points belonging to a metric space (i.e. a family of points whose pairwise distances are known) with another family of points belonging to a different metric space (thus, with new pairwise distances), so that the old and new distances are as close as possible.
In our case, we try to embed the vertices of a graph G into the Euclidean space R d . The distance between two points in R d isgivenbythe Euclidean metric: dist ( x, y )= i ( x i  X  y i ) 2 .Inagraph G =( V,E ) ,weusethe Shortest Path metric, that defines the distance between a pair of vertices u and v ,dist G ( u, v ) , as the number of edges present in the shortest path from u to v .
The metric information of a finite set of n points can be encoded in a Metric Matrix :asymmetric n  X  n matrix M with entries M the two indexed points. See an example at Fig. 2.

To settle notation, let G =( V,E ) be a graph with n vertices that we denote v 1 ,...,v n .Let  X  ij := x x i as the rows of an n of points x 1 ,...,x n such that D  X  M . The map that sends v i  X  x i will be our metric embedding. Definition 1. A metric embedding between two metric spaces E and E with metric functions dist E and dist E is a mapping f : E  X  E .Itiscalledan isometric embedding when it preserves distances. That is, if dist E ( f ( x ) ,f ( y )) = dist E ( x, y ) for all x, y  X  E .
 Unfortunately, even the simpler graphs cannot be isometrically embedded into any euclidean space. For example, the two graphs with four vertices (a star and a cycle) from Fig. 3 cannot be isometrically embedded into any euclidean space. This follows from the fact that a path can only be embedded into R d one point that is both at distance 1 from A and distance 2 from B (the point opposite to B with respect to A ). But then we should place both C and D at that position, and they would not be at distance 2 from each other.

Therefore, we have to settle for embeddings  X  X s close as possible X  to isometry. 4.1.1. Multidimensional scaling
The embedding techniques that we use are based on Multidimensional Scaling (from now on MDS), which is one of the most widely used tools for metric embeddings [3]. There exist several variants, but the underlying idea is always to find points whose pairwise distances are as close as possible to a set of of embedding has been extensively used for graph visualization, since it allows representing the graph in
R 2 and thus providing a planar visualization [4]. We consider two kinds of multidimensional scaling: the metric multidimensional scaling and the non-metric multidimensional scaling.
 Metric multidimensional scaling
The Metric Multidimensional Scaling (MMDS) essentially follows an optimization algorithm to obtain d
The point configuration that minimizes the summation of all these errors is the least squares approxi-mation. In [24], Kruskal introduced this objective function, and called it Raw Stress :
The objective of MMDS is to find a point configuration X that minimizes Stress. For this, we use an algorithm called SMACOF , which was presented in [9]. Non-metric multidimensional scaling
Opposite to the previous approach, Non-metric MDS or Ordinal MDS (from now on NMDS) only between vertices a and b in the graph is smaller than the distance between vertices c and d ,thenwewant than the distance between x c and x d , without imposing more constraints on these distances.
Formally, instead of approximating the original distances, we admit some monotonous transformation constraints that we impose to any  X  d ij are
Therefore, now we need to find some disparities  X  d ij that satisfy the constraints in Expression (2) and a d Raw Stress: Stress . The Stress of a configuration X and a set of distances  X  D = {  X  d ij } is defined as We minimize the Stress with respect to the d ij  X  X  (hence, the coordinates of the point configuration X ) and with respect to the  X  d ij  X  X . This is done in a two-phase algorithm, following the initial proposal by Kruskal in [24]. From an initial configuration X ,all d ij are calculated. Then Stress is minimized with found via steepest descent, d ij  X  X  are recalculated and the process is repeated until convergence. Observation 1 (Local and global connectivity information) . The metric matrix of a graph is completely determined by its adjacency matrix, and one could ask for an embedding that preserves adjacencies instead of the whole metric. In fact, using Lov X sz X  X  Vector Representations [28] to embed the graph, the geometric graph (see Section 4.3) recovered always coincides with the original and in this sense it is  X  X sometric X .

However, the fact that the positions of the points encode (a perturbation of) the whole metric matrix is very important, because we want to take into account the whole topology of the graph when anonymiz-ing. Recall that we want to make local changes on the adjacencies that have small impact on the global structure of the graph. This encourages the use of all distances of the graph, because long distances are much more robust with respect to perturbations than small distances (adjacencies). Therefore, even after the anonymization, the global connectivity information will be maintained. 4.1.2. The dimension
So far we have presented our need for embedding the graph into some euclidean space R d without stat-ing which is this d . However, the choice of d marks a compromise between the quality of the embedding and the computational complexity.

The first obvious fact is that we never need dimensions d greater than the number of vertices n .The dimension of the affine span of n points is at most n  X  1 , thus if d was greater, we could always project the representation to its affine span without changing pairwise distances. However, usually d = n is still too much, and we need to find lower dimensional representations. The Johnson-Lindenstrauss Lemma is a powerful result that allows for reducing the objective dimension.
 Theorem 1 (Johnson-Lindenstrauss Lemma [19]) . Given  X &gt; 0 and an integer n ,let k be a positive integer such that k k 0 = O (  X   X  2 ln n ) . For every set P of n points in R d there exists f : R d  X  R k such that for all u, v  X  P
In short, when using an embedding method, we can always project it to a space of logarithmic dimen-sion (almost) preserving pairwise distances.

Now we focus again in multidimensional scaling. To decide the dimension of the destination space, the key observation will be that the embedding methods that we are using are all optimization methods. In particular, the point configuration that they return seeks to be the one that minimizes either Raw Stress or Stress. In the following reasoning, we will use S to denote this minimizing function, meaning simultaneously raw Stress and Stress.

We know that there exists an optimal configuration that belongs to R n ,let X n be this configuration (that is, S ( X n ) S ( X ) for all X  X  R n of size n ). However, from Theorem 1, we also know that we can project this configuration into a space of logarithmic dimension, with pairwise distances almost preserved. Let d = O (  X   X  2 ln n ) be the dimension given by the theorem, and f the projection. The almost unchanged: S ( X d )  X  S ( X n ) .
 But now, let Y d be the optimal configuration in the d -dimensional space ( S ( Y d ) S ( Y ) for all Y  X  R d of size n ). By definition of optimality, in R d and in R n , the following two expressions hold almost as good as the optimal configuration in R n . Therefore, we can settle for directly looking for the optimal configuration in R d .

It remains to choose the precise dimension to use. In Theorem 1 it is used d = C X   X  2 ln n ,forsome constant C ,where  X  controls the desired accuracy in distance preservation. It is known that this bound on the dimension is asymptotically optimal. For our experiments, we set C =1 and  X  =0 . 5 . This means that we will use the dimension In the experimental section (see Section 6.2), we will see that this dimension is good enough to capture the graph. 4.1.3. A running example
Now, we illustrate this first step of our proposal by embedding a specific graph example, depicted in Fig. 4. Although we have ignored it up to now, extending our method to graphs with attributes is direct as we show in this simple example. The graph database contains an identifying attribute, two non-confidential quasi-identifiers and a confidential one.

First of all, we remove the identifying attributes (in this example, id ). The confidential attributes are published without modification, therefore we also remove the attribute c before proceeding to anonymize. With the remaining attributes, we create the attribute matrix X  X  . Then, we perform a metric embedding of G . We have chosen to use MMDS to embed into R 2 (according to our formula, the ap-propriate dimension would be 10 , but for the sake of clarity in the drawings we have chosen dimension equal to 2 ), and we obtain the coordinate matrix X M . We have to attach the coordinate matrix with the attribute matrix to obtain X =( X M | X  X  ) presented in the first half of Table 3.

To understand this embedding, we show the position of the vertices in R 2 in Fig. 5. 4.2. Tabular anonymization
The second stage of our process is straightforward. Once the graph is embedded, we need to apply a tabular anonymization method. Depending on the election of this method, we will obtain different graph anonymization alternatives.
 Continuing with our running example, we have chosen to apply Noise Addition anonymization (see Section 3). For this, we need to distort the table X adding a Gaussian noise matrix E whose entries  X  =0 . 3 . The noise matrix is in Table 3. The anonymized table is  X  X = X + E . Noise anonymization can be used on this example because it only uses real-valued attributes. If these had been discrete-valued, we would have had to use another tabular anonymization method. For example, rank swapping.

After applying the noise, points move from their original position. In Fig. 6, we have shown the new positions in diamonds, as well as a vector that goes from the original position to the new position. 4.3. Graph retrieval: Geometric graphs
As important as the mapping of a graph into R d is the inverse operation: recovering the graph from a collection of points in R d . Now, we proceed to describe the third step depicted in Fig. 1. For solving this problem, we use Geometric Graphs . Given a set of points X in R d , and a threshold r  X  R ,we also called (Unit) Disk Graphs [6]. In this paper, we choose the threshold r that gives rise to the same number of edges as in the original graph. For this, we use a variation of Kruskal X  X  Minimum spanning tree algorithm.
 Observation 2 (Connectedness) . Observe that the geometric graph of a set of points does not need to be connected. This will imply that we might start with a connected graph and after the anonymization process we recover a graph with more than one connected component.
However, in some applications, connectedness is a very important aspect of the networks, and we need of an Euclidean Minimum Spanning Tree are included in the recovered geometric graph.

When dealing with graphs with attributes, the first d columns of  X  X constitute  X  X M from where we last m columns of  X  X .
 Resuming our running example
Following with our running example, the next step corresponds to retrieving the geometric graph  X  G from the anonymized coordinates  X  X M . In this particular case, to recover 23 edges (the number of edges of the original graph) we need to make spheres of radius 1.75. In Fig. 7, we have shown the point set and spheres of different radius, as well as the edges they generate.

We can see the final anonymized graph in Fig. 8. We have substituted the identifiers by encrypted unique variables. The confidential attributes have been left unaltered. We have perturbed the attributes using the tabular anonymization technique. And we have masked the graph topology altering some edges. From the original 23 edges, we have removed 5 edges and added 5 new edges.

After the anonymization, the structure remains the same, two communities of vertices joined by a pivot. However, the role of pivot, which used to be played by vertex number 5 is played now by vertex number 3.

It is important to highlight that it makes no sense to anonymize a tiny graph. On a small graph, the modification of enough edges to provide anonymity destroys all the statistical utility of the graph (for an extreme example, imagine a graph with two vertices). 5. Anonymization quality measures
The extent to which information loss and disclosure risk are reduced indicates the quality of an anonymization method. Therefore, to evaluate the goodness of our proposals, we need methods to eval-uate both measures.

We present new unified measures for disclosure risk and information loss that will be used to compare in a quantitative way different proposals for graph anonymization. They adapt their tabular analogues to graph databases and take into account several graph parameters that have been previously used for evaluating graph anonymization techniques in the literature. 5.1. Disclosure risk
As introduced in Section 3, the attack that we consider is the reidentification of a vertex (we want to avoid its linkage with the confidential attributes). That is, we treat the edges of the graph as quasi-identifiers and try to prevent the reidentification of the vertex using information from the edges. There-fore, we assume that the attacker has had previous access to (some part of) the network and tries to use this information to disclose the value of the confidential attributes that we released with the anonymized graph.
 Our proposal to evaluate disclosure risk is based on taking advantage of the existing tabular methods. Again, we construct tables from graphs, and then test the disclosure risk for these tables.
From the original graph G we construct a table T = T ( G ) . Then, using the same method on the At this point, we can treat T as an original table (independently of G ) to which a tabular anonymization In order to construct T ( G ) , we compute some graph topological measures associated to each vertex in the graph. This defines an array of real numbers for each vertex. The union of these arrays constitutes the table T . Our approach consists in considering that the risk of vertex disclosure with respect to these measures can be approximated by the tabular disclosure risk based on T ( G ) .

The set of measures that define T are the following:  X  deg( v ) :Degreeofvertex v .  X  C ( v ) : Local Clustering Coefficient. It computes the ratio of the number of links in the neighborhood  X  E ( H 1 ( v )) : H 1 ( v ) is the subgraph of G induced by the neighbors of v . We study the number of  X   X  1 ( H 1 ( v )) : Main eigenvalue of the neighborhood. Let A be the Adjacency Matrix of the graph G .  X   X  2 ( H 1 ( v )) : Algebraic connectivity of the neighborhood. Let D be the diagonal matrix of the de- X  C B ( v ) : Betweenness Centrality of vertex v .  X  C C ( v ) : Closeness Centrality of vertex v .  X   X  v : Entry in the Perron Vector. The eigenvalue  X  1 of the adjacency matrix has an associated eigen- X  F v : Entry in the Fiedler Vector. The associated eigenvector of  X  2 (the second smallest eigenvalue
They include some of the different aspects of a network that an attacker might use: centrality indicators (Degree, Betweenness, Closeness), local measures (Local Clustering Coefficient, Neighborhood) and spectral properties (  X  1 ,  X  2 , Perron and Fiedler vectors). Many of these have already been used in the literature for evaluating graph anonymization techniques (e.g. [17,27,40]). Note that we combine local measures such as the degree with measures that encode global properties such as Betweenness, Closeness and Perron and Fiedler vectors.

To avoid scaling problems, these measures need to be standardized. In particular, we normalize with the maximum absolute value that the measure takes on all records. This way we ensure that all values are comprised between  X  1 and 1 . Summing up, the table T ( G ) that we compute is the following: In the following subsection, we explain the tabular disclosure risk measure used in this paper. 5.1.1. Distance based record linkage
Distance Based Record Linkage was introduced in [33], and has now been expanded and adapted to several contexts [12]. We have an original table T and a distorted version of the same table  X  T .The records of T and  X  T can be interpreted as points in R d , and hence we can compute distances among records (the euclidean distance).
 If  X  t represents the same vertex as t 2 in reality, we label it as linked to 2nd . The records that are linked are those whose identity can be easily disclosed by an attacker. The global objective will be to minimize the number of linked records. To measure disclosure risk, we will also consider vertices linked to 2nd as dangerous vertices, as it is done in [12].
 With this we can define as our measure of disclosure risk. 5.2. Information loss
To measure the Information Loss , we need to quantify the similarity between two networks. We will use two procedures.

The first one, tabular information loss, is inherited from tabular methods. It is inspired on the measure presented in [10], where a tabular measure of information loss is calculated comparing the covariance matrix, the correlation matrix, the vector of averages of variables and the vector of variances of vari-ables for the original and the anonymized table. Here we will use T and  X  T . The second one, graphical information loss, is a measure that we have designed directly for graph anonymization techniques.
Combining these two measures, we will derive a way to quantify the information loss in Section 5.2.3. 5.2.1. Tabular information loss
Let T and  X  T be the n  X  m tables defined in the previous section corresponding to the original graph G and the anonymized graph  X  G ( n is the number of vertices and m the number of graph measures). Let V and R be the covariance matrix and the correlation matrix of T ;let T be the vector of variable averages
Given some value x and its approximation  X  x , the relative error of the approximation is defined as x . For scalar values we will use the absolute value norm x = the euclidean norm v = v 2 1 +  X  X  X  + v 2 n . For matrices, we will use the Frobenius norm M F = lowing: 5.2.2. Graphical information loss
Table T encodes individual properties of the vertices of G . Therefore studying the variations of T means studying the variations of the graph at a local level.

On the other hand, we can also study some global properties of the network and compare them from the original graph G to the anonymized graph  X  G . In particular, we study the following global measures:  X  p : Path-length distribution.  X   X  : Degree distribution.  X  C ( G ) : Clustering Coefficient.  X   X  1 : main eigenvalue of the adjacency matrix A .  X   X  2 : algebraic connectivity, second smallest eigenvalue of the Laplacian matrix L . These measures have also been previously used for evaluating graph anonymization (e.g. [16,27,40]). We define the graphical information loss IL G as the average of the relative errors of these measures: 5.2.3. Absolute and relative information loss
The Absolute Information Loss of an anonymization process, IL , is defined as the average of the tabular and the graphical information loss.

This is a measure of information loss. However, it is difficult to interpret its real meaning. The anonymization process that should have the maximal information loss is to substitute the original graph with a completely random graph. And it is with respect to this measure that we will compare. Given a graph G with n vertices and m edges, we will generate a random graph of the Erd  X  os-R X nyi model [13] G independently at random with probability p = m n ( n  X  1) / 2 . In particular, the expected number of edges is m .
 Now let  X  G be the anonymized version of our graph. then we define the Relative Information Loss as
This measures how much information we are losing in comparison to a random graph. So now, IL r = 0 when we are returning the original graph, and IL r =1 when we are not providing any valuable are  X  X pposite X  to G in terms of IL . Yet this makes no sense in the context where we want to achieve the minimal information loss. Since the generation of G r follows a random procedure, to obtain more stable results we will generate a family of k random graphs, and then compute the mean of the relative information loss with respect to them. 5.3. Anonymizing quality and score
In the literature, it has been widely used the notion of Score to evaluate the quality of an anonymizing process [10,11]. It measures a tradeoff between information loss and disclosure risk. Namely, if IL r and DR are measures of information loss and disclosure risk, then
Despite the wide use of the score, one has to be careful when interpreting such a measure. It adds directly IL r with DR , but the theoretical meaning of this addition is debatable, since they are measures in completely different units. Also, score assumes that information loss and disclosure risk should be without guarantees of a certain level of privacy, even if there is few information loss. A real publisher will set a disclosure risk threshold, and will look for the anonymization method that gives the least information loss among all those that reach the privacy threshold.

In the following section, a part from using the score, we propose alternative points of view in the evaluation of the tradeoff between information loss and disclosure risk.
 6. Experiments
In this section, we present some experiments to evaluate the validity of our proposal. The aim of these experiments is to gain insights on the particular characteristics of graph anonymization via metric em-beddings. Moreover, we also try to show its strengths and weaknesses in comparison to other proposals in the literature.

First, we present the datasets that have been used in the experiments. Then, we show the results of the experiments. On the one hand, these experiments must be a tool to get the final understanding on how the framework works and which its properties are. On the other hand, the results of these experiments have to determine whether the methods that emerge from our framework are competitive with existing proposals. This involves evaluating different aspects of their quality and comparing the results with existing algorithms. 6.1. The datasets
Following, we present the datasets used through the experimentation. They are real datasets coming from different backgrounds.  X  lesmis: Les Miserables [22], a network based on Victor Hugo X  X  novel  X  X es Miserables X . It is a  X  polbooks: Books about US po litics [23]. The 105 vertices of this dataset represent books about  X  jazz: Jazz musicians network [14]. The network vertices are 198 jazz bands that played between  X  polblogs: Political Blogs , from a web crawl of political blogs at the time of the 2004 presidential 6.2. Comparing the embedding methods
Before entering into the matter of anonymization techniques, we need to analyze the effect of the embedding techniques in the information loss. To quantify the loss of information produced by the embedding itself, we will perform the following experiment. We will embed a graph G into R d and then recover the geometric graph  X  G without performing any anonymization. We will study the information loss from G to  X  G . This will let us compare the two embedding methods presented in Section 4.1.1. With this experiment we can also evaluate the ideal dimension calculated in Section 4.1.2. There should not be much difference between the information loss of the embedding in R n and the information loss of the embedding into R d with d = 4ln n .

Figure 9 shows information loss for MMDS and NMDS for two of our datasets (results for other datasets are omitted since they behave in a very similar way). With a vertical dotted line, we mark d = 4ln n , which is the suggested objective dimension. In general, we can observe that NMDS outperforms MMDS, obtaining the least information loss. Also, we can see that we get enough resolution with d = 4ln n . In general, this bound is located after the  X  X lbow X  where we can observe a drastic quality change. This elbow can be understood as the intrinsic dimensionality of the graph and, therefore, we accept the dimension d = 4ln n as a good approximation of the dimensionality. 6.3. Embedding-based anonymization methods
In this subsection, we present the results obtained with our framework, testing it with some of the most efficient classical perturbative anonymization techniques. Namely, Noise Addition , Rank Swapping and v-MVMDAV . The experiments are based on the computation of disclosure risk DR and relative information loss IL r . Since all the methods have a parameter that affects the amount of anonymization, we study the variations of DR and IL r against the variations of these parameters.

Figure 10 shows IL r and DR for the two embedding approaches, the three anonymization methods and These are marked with a dotted vertical line at DR =0 . 2 .) In general, we observe that the quality of the methods grows with the size of the networks. This reflects the fact that the key for success of anonymity resides in the possibility of an individual to hide in the crowd and this becomes easier as the crowd grows. Also, in general NMDS tends to reduce more both metrics compared to MMDS. We can observe this by finding the point ( x, y ) with minimum x + y .

The effect of each parameter on the quality of the anonymization varies depending on the specific method used. For instance, when using Noise Addition , parameter  X  has a large effect on both IL r and DR , meaning that it can be used to tune the method. With Rank Swapping , the information loss variance is in general smaller, specially for smaller graphs. However, the disclosure risk has an almost constant size P of the rank-window has. There is almost no difference between small windows and large windows. This means that this method does not allow us to tune the anonymization. Finally, we specifically test 3 -MVMDAV. This consists in splitting the attributes into blocks of size three. On each of these blocks, MDAV microaggregation is applied. As a vertex may belong to different clusters for different blocks, of the anonymization changes depending on the network we are working on, and specifically on its size. In this case, the dependence on the parameter is more noisy. Although it is possible to appreciate that the overall tendency is that when k grows IL r grows and DR descends, this dependence has a large variance the degree of anonymization with the modification of the value of the parameter.
 jazz IL 6.4. Comparison with existing proposals In this section, we compare our proposals with the state of the art solutions for graph anonymization. In particular, we will compare with the k -degree anonymization , Random Edge Switch and the Spectral Edge Switch , introduced in Subsection 3.1. This comparative section is divided into two parts. First of all, we present the same kind of plots as those in the previous section, but for these methods. Then we make a direct comparison of our framework against these proposals. 6.4.1. Results for previous proposals
Figure 11 shows IL r and DR for these three graph anonymization techniques. Note that, with k -degree anonymization, since it reaches levels of information loss above 1 , we change the scale of our plots to jazz IL include the whole data. The fact that it reaches levels above 1 is explained from the fact that when we ask for k -degree anonymity for a high value of k , we have to add several new edges to the graph. This leads to a situation where a random graph with the same number of edges as the original graph has more resemblance to the original graph than this almost complete graph. To avoid confusion, when this happens, we mark the limit of our original plots with a thick horizontal line. Again, we observe that in general the quality of anonymization improves with the increase of the size of the graph. These results show that adding edges until k -degree anonymity is attained is not a robust method. For small values of k , we do not need to add a lot of edges to obtain k -degree anonymity, so the graph does not suffer severe modifications and there is small information loss. However, even if the resulting graph is k -degree anonymous, it is easy to discover the identity of the vertices. We can see this in the high disclosure risk values. When k is increased to avoid the disclosure risk, the information loss grows quickly.
 Regarding edge switching methods, we can observe that both methods almost follow the same curve. The main difference is that Random Switch goes much faster in distorting the graph. However, as the number of switches is a parameter that is chosen by the user, we can achieve the same levels of quality with both methods. 6.4.2. Score comparison
In the previous sections we have already shown the results using tabular methods in our framework and with other existing graph-oriented methods. Now, we compare them. In order to perform a fair comparison, we have selected those values of the parameters that gave the best score for each method. In Fig. 12, we compare the best scores obtained by the different anonymization techniques for the four gets a better score than Random Switch, Spectral Switch and k -degree. The next observation concerns the quality differences between em bedding methods. NMDS is the one wi th better performance. How-ever, we can see that the importance of these differences between the two embedding methods depends on the graph.

Rank Swapping with NMDS is the approach that works better in general, independently of the topol-ogy of the graph. This is coherent with our previous results where we showed that this approach does not present a strong variability and, thus, it is reliable in terms of quality. Regarding the other two ap-proaches based on our framework, they are comparable in general with Random Switch which is the best performing among the three baseline approaches chosen in this paper. 7. Conclusions and future work
We have seen that metric embeddings are a powerful tool that can be used to adapt classical tabular anonymization techniques to graph databases. With the aid of metric embeddings, we have arranged a framework that can get instantiated into a full family of anonymization methods for graph databases. This disproves the claim that tabular anonymization methods cannot be used to anonymize graphs, and opens a new line of research.
We also defined new measures of information loss and disclosure risk for graph databases that adapt classical tabular measures. Even if these measures can be refined, they are useful to provide an objective anonymization evaluation. In addition, we have seen that it would be straightforward to extend our proposal to graphs with attributes. This is an important feature for an eventual release to the real world, as real graph databases contain attributes.

In our work, we present a generic framework to use classical anonymization methods for graphs. One possible future research line is studying how to provide privacy guarantees through this framework. For instance, one obvious mechanism would be through aggregation. The techniques presented in this paper may also be adapted to produce aggregative graph anonymization techniques. If within our frame-work one uses a tabular anonymization technique that produces k -anonymous tables (any element is indistinguishable from at least k other elements), then we would produce metagraphs where every node represents a subset of k -vertices of the original graph.

The goal of this paper was to prove the viability of this approach for graph anonymization. Having this settled, we will have to perform a detailed analysis of which tabular methods are more adequate for the framework, as well as to study for which kinds of graph are they more suitable. This will also entail a comparative study with other graph anonymization methods, and decide the situations where each technique should be prefered.

A future line of work may imply studying other search strategies for NMDS and MMDS or other embeddings. Also, our original definition of graph database does not allow for attributes on the edges. However, the usual definition of a graph database usually admits attributes on the edges [30]. A possible solution would be to provide some kind of one-to-one matching between the original edges and the anonymized edges (recall that we impose that there is always the same number of edges), and on this identification apply a tabular anonymization technique to mask the attributes. Another line of research is to study the framework adaptation to variations of the theoretical model. For example, adapting it to prevent edge disclosure when some or all of the edges are considered confidential information.
As a matter of fact, any method for graph anonymization reduces to some rules on adding and remov-ing edges, usually based on a probability distribution. One of the challenges that arises from this work is to study the rules that arise from tabular methods from a theoretical point of view. This could extend our understanding on the reasons that make the different tabular methods used in this paper a good choice to anonymize graphs, in practice.
 Acknowledgments We want to thank Jordi Nin for helpful discussions. Arnau Padrol thanks the SUR del DEC de la Generalitat de Catalunya and the ESF for his FI-DGR 2012 grant, as well as the support of the DGR grant 2009-SGR-1040. Victor Munt X s-Mulero wants to thank the Ministry of Industry, Tourism and Trade of Spain for its support through grant 2/2010-18. Also, this work was partially done while Victor was a professor at UPC. Victor wants to thank the Ministry of Science and Innovation of Spain and Generalitat de Catalunya, for grant numbers TI N2009-14560-C03-03 and SGR-1187, respectively. References
