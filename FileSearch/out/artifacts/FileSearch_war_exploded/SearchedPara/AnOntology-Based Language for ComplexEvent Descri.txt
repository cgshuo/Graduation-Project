 Internet of Things (IoT) [ 1 ] refers to an intelligent network infrastructure that connects physical, cyber, human spaces, and pr ovides real -time situation perception and cont rol -ling. One of the important cornerstones for IoT to discover potential knowledge from massive underlying data roots in the concept of event [ 2 ] and Complex E vent P rocess -ing ( CEP ) technologies [ 3 ] . Event processing technique s combine data streams from multiple IoT sensing sources and detect complex event patterns that implies intere sted circumstances of higher -level semantics. The primary goal of event processing in IoT is to identify these meaningful events (they could be oppor tunities or threats) and res -ponse as quickly as possible [ 4 ] . In IoT systems, complex events happen across multi -modal sensing data streams , for example, environment, visual/acoustic, and even phy -siological sensor signal s. Accurate and understandable des cription of the under ly ing _______________________________ sematic of complex event is a major challenge for IoT event processing. While t he con -cept of event and event processing technologies have been widely adopted into various applica tion domains, for instance, healthcare, transportation, smart grid and logistics, legacy systems own their specific event models. As a result, event inter pretation and interoperability are becoming one of the fundamental pro blems for the interaction and collaboration between existing event processing systems and future IoT app lications.
In this paper, we propose OntoEvent, a novel ontology -based complex event des -crip tion language for IoT systems. The contribution of this work is manifolds: first, in t he semantic model of OntoEvent language, we divide the core concepts into two levels: general concepts and domain -specific instances, which promises OntoEvent can be dy-na mic extended for dif ferent IoT application usage. Second, we model and describe co mplex events in the form of event ontology based on logical and temporal operators , and further extended them into nature language event operators. Third, we propose an even t -sharing frame work and event processing prototype based on OntoEvent to inter -operate with other types of description language. W e use examples of industrial IoT to de mon strate the usage of OntoEvent . Our analysis proves that OntoEvent is of rich expres siveness and interoperability between different domains and legacy languages. E xperimental results prove that OntoEvent -based prototype has a higher throughput than other selected CEP models especially when processing multiple complex event onto logies. Various event description languages have been proposed and adopte d for modelling and definition of complex events, which can be classified into four types [ 2 ] : transforming , declarative , imperative and pattern -based . Transforming language, such as the lan -guage adopted in TelegraphCQ [ 5 ] , declares transforming rules to specifying operations like filtering, joining, and aggregating, which is usually adopted in Data stream man-agement systems (DSMSs) . Declarative languages, for instance, the CQL con tinuous query language [ 6 ] and Esper Event Processing Language (EPL) [ 7 ] , are the most dom-inant way to specify event patterns, attributes and actions in a SQL -like structure. The event description language in CEP systems such as NextCEP [ 8 ] , SASE/SASE+ [ 9 , 10 ] , Siddhi [ 11 ] and MPEP [ 12 ] follows this style. Imperative languages, for example, Au-rora  X  s Stream Query Algebra (SQuAl) [ 13 , 14 ] , define rules by specifying a com bina-tion of event operators as the data flows in DSMSs. Pattern -based languages is a formal composition of language notations and event oper ators, see for example, the Padres [ 15 ] system. 
In order t o provide interoperability and situation aware ness, recently, there are in -crea s ing works focus on semantic event modelling and semantic complex event pro -ces sing (SCEP). Some ontologies are proposed which includes the concept of events such as Event -Model -F [ 16 ] , EventML [ 17 ] , OpenCyc Ontology [ 18 ] , Semantic Sensor Net Ontology [ 19 ] , LODE [ 20 ] , etc. As for the SCEP systems, Hasan et al. proposed an approximation -enabled rule language and an approximate event matcher for IoT sys -tems [ 21 ] . Zhou et al. proposed SCEPter [ 22 ] , a semantic complex event pro cessing the disjunction of them. Moreover, for the temporal relationship, the adverb  X  then  X  is used to define the primitive event sequence. Simi larly,  X  keep  X  and  X  within  X  are intro-duced into OntoEvent to indicate the repetition and main tenance of certain pattern. 
Notice that there are large number of synonyms for a certain semantic in natural language. In order to support synonym keyword in even t description without ambiguity, we introduce WordNet [ 32 ] to establish the set of synonym keywords. WordNet is a lexical semantic database /network for the English language . It groups words into sets of synonyms called synsets , provides a number of relations among these synonym sets or their members. There are manifolds benefits for using WordNet synset to replace single keyword in event description: first, the introduction of WordNet synset can avoid repetition of similar keyword definitions. For a same semantic, we use a set of synonym and use it by a repre sentative operator. In Table 1, we present and explain some typical representative operators and their equivalent WordNet synset. In this work, the Word -Net database includes 155,327 word form and 117,597 synonym set in total. Second, complex event query by natural or semi -natural language from end -use rs can be pro-cessed by natural language processing (NLP) into word segmentation results. The key-words can be mapped into their equi valent operators as they are defined by their se-mantic and grouped into a same synset in WordNet. By this means, we can furt her provide a user -friendly interface in complex event querying. Third, as it is impossible to define all the event operators in natural language. Moreover, the logical and temporal relationship is difficult to define completely. OntoEvent language can be extended by defining additional event operators or add new synonymy into existing synset to des -cribe new event pattern s . 3.2 Application Scenario and Event Example We use examples of industrial IoT to demonstrate the usage of OntoEvent language. The application scenario lies in high -speed railway domain . We present our event def-i ni tion model using complex event examples from h igh -speed train onboard system . H igh -speed train onboard system plays a key role in pro viding safe, efficient and inte -lli gent opera tions in railway operation . Primitive e vent s in high -speed train onboard system are collected from several multi -modal sources: speed sensor, track balise, track circuit and driver machine interface (DMI). Th e system provides se veral con trol modes by integrating information from heterogeneous devices to control the train in a safe ope r ation status . In this application, we introduce two complex event s to demon strate the usage of OntoEvent language :
Event Description 1. ( Speeding ) . If t he system is in OnSi ght mode and the speed exceeds 45 km/h, system automatically outputs a standard brak ing signal.

In complex event Speeding , if we denote e 1 as the pri mitive event of the system mode, and e 2 as the primitive event of speed sensor data , t he complex event Speeding is the logical combination of e 1 and e 2 . In the RCEDA [ 33 ] complex event description model, it can be defined as: Speeding=e 1  X  e 2 , where notation  X  is the binary con junction op-e rator in RCEDA language. According to the OntoEvent definition, E ={ e 1, e 2 }, O ={  X  }, A ={ e 1 .value= OnSight, e 2 .value &gt;45 }, where e . value returns the attribute value of prim-itive event e . Using OntoEvent language, Figure 3 presents the ontology des cription model for this complex event. This com plex event is a combination of the pri mitive Control Mode and SpeedData . They are instances of class OntoEvent : Activity : Event : -Pri mitiveEvent , and the two components of operator and (declared by has Com ponent property). The source and attributes of the two primitive events are linked with has-Source and hasData properties, respectively.

Event Description 2. ( NotPressAlert ) . If the system tra n s fers into OnSight mode then the driver does not press the Alert button through the DMI system within 60 seconds, a standard braking signal will be triggered.

This event describes that the driver should press Alert button in DMI panel to ensure a secure driving status within each 60 seconds every time when the onboard system trans fers into OnSight mode. Let e 1 be the primitive event of the system mode and e 2 be the primitive event of the DMI operation. The complex event NotPressAlert repre -sents a temporal and logical rela tionship betw een e 1 and e 2 . That is, e 1 occurs before e 2 , and e 2 has a negation and temporal restriction of 60 seconds. Using SASE ++ event model [ 9 , 10 ] , this complex event is defin ed as NotPressAlert=SEQ ( e 1, WITHIN ( X  e 2 , 60s )) , where the notation SEQ is a binary operator for sequence occurrence in SASE ++ la nguage and WITHIN is the binary operator for repeatedly occurrence of certain com -ponent. The notation  X  indicates the negation event. Therefore, in OntoEvent model, E ={ e 1, e 2 }, O ={ SEQ , WITHIN ,  X } , A ={ e 1 . value =OnSight, e 2 .value=Alert, WITHIN -.value=60s } , where o perator . value means the property of operator. Using OntoEvent model, the ontology established for the event NotPressAlert is shown in Figure 4. The event is defined by primitive event ControlMode , Operation Signal , several event oper-ators and their properties. The event pattern is defined by operator then and its com po-nents des cribing the primitive event ControlMode should occurs first. The event Not-PressAlert is a composition by with in operator to des cribe that the composition event s hould occur within a time period, which is specified by within .hasAttribute =60. The com ponent of within operator is a negation oper ator not , describing the negation of its com ponent event, Opera tion Signal . The time window of NotPressAlert is defined as NotPress Alert .has Sliding Window= 900 and the action is declared by the property Not-PressAlert .hasAction = Standa r d Braking.
 In this section, we analyze and compare the expressiveness of OntoEvent language with other proposed complex event description language or systems (see the survey in Sec -tion 2). We classif y these languages in types and compare their expressiveness in sev-eral expressiveness aspects: logical , tem poral , window and feature . As we can see from the details summarized in Table 2, OntoEvent is of rich expressiveness in logical and temporal aspects. I t provides a set of synonym operator to describe event iteration or recurrence . Especially , Onto Event can be extended by defining additional event opera-tors to support diversified event expression . By the nature of ontology, complex event can be defined and demonstrated in a user -friendly and visualized paradigm with On-to Event language . As an ontology -based language, OntoEvent is designed to be a mid-dle -language to provide interopera bility among differ ent event processing systems by language rewri ting techniques. OntoEvent language plays as a middle layer between existing CEP application and event descriptions. It establishes an extendable frame -work for semantic event processing in CEP systems which include a set of general up -per ontology and flexible inter faces for different application domain ontology exten -sions. Moreover, natural language event descriptions can be trans formed into Onto -Event ontology by NLP. Besides, exist ing non -semantic event descriptions in exist ing CEP systems can be transformed into OntoEvent lang uage by event rewriting. As we have mentioned in Section 2, alth ough there are four different types of event description languages. However, their language structures can be de c om posed into primitive event, event attribute, event oper ator and other common elements. As a result, event language rewriting between them is possible with the help of Onto Event model.

In order to evaluate the proposed models, w e implement a prototy pe CEP sy stem b ased on OntoEvent. We use the same application scenario f or high -speed train control of industrial IoT to build a comprehens ive complex event set by OntoEvent language and transform them into a multi -patter n ev ent detection model as we have proposed in [ 12 ] . An event stream generator is designed to collect real data from Jurid ical Recording Unit in high -speed train, which collects 910 , 899 primitive events in total from a period of 24 hours record . According to the function of h i gh -speed train o nboard system , w e implement a series of complex event ontologies ( 135 event s in total) to perform parti -cular operation un der different control modes: full supervision, partial supervision, on sight, shunting, sleeping, standby, isolation and reversing. These mode s refer to differ-ent operational status and corresponding functions . S o that, the detection model of these complex events will trigger the output function and sends information to DMI or trans-its the system from one mode to another. In experiments, we aim to compare the relative performance of our prototype sy stem with selected mainstream CEP systems , SASE++ [ 9 , 10 ] , Siddhi [ 11 ] and Esper [ 7 ] . In the experiment, we examine the number of pro-cessed event by in creas ing the amount of compl ex event ontology from 20 to 100. The evaluation system is implemented in Java programming language. E xperiments were performed on a workstation with an Intel Xeon CPU 3.4GHz and 64GB RAM running Java HotSpot Server VM in 64 bit Windows 10. All experimenta l results are averaged over twenty different round of tests .

Figure 6 shows the results of the performance experiment. We can see that, when the num ber of complex event ontology is 20 (denoted as N =20 ) , Esper has the highest thro -u gh put of around 81,000 events per second while other models have lower through put. SASE++ model produces a throughput of around 75,0 00 events / second while Onto -Event has the throughput around 67,000 events / second. With the increase of complex event ontologies , the throughput of other system obviously decrease more than Onto -Event . Consequently, when N =100, OntoEvent provides much hig her processing throu -gh put than other models.

