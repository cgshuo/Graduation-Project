 Comparing alternative options is one essential step in decision -making that we carry ou t every day. For example, if someone is interested in ce r-tain products such as digital cameras, he or she would want to know what the alternatives are and compare different cameras before making a purchase. This type of comparison activity is very common i n our daily life but requires high knowledge skill. Magazines such as Consumer Reports and PC Magazine and online media such as CNet.com strive in providing editorial co m-pa r ison content and surveys to satisfy this need. 
In the World Wide Web era, a comparison a c-tivity typically involves: search for relevant web pages containing information about the targeted products, find competing products, read reviews, and identify pros and cons. In this paper, we f o-cus on finding a set of comparable entities giv en a user X  X  input entity. For example, given an ent i-ty, Nokia N95 (a cellphone), we want to find comparable entities such as Nokia N82 , iPhone and so on. 
In general, it is difficult to decide if two ent i-ties are comparable or not since people do co m-pare a pples and oranges for various reasons. For example,  X  Ford  X  and  X  BMW  X  might be comp a-rable as  X  X ar manufacturers X  or as  X  X arket se g-ments that their products are targeting X , but we rarely see people comparing  X  Ford Focus  X  (car model) and  X  BMW 328i  X . Things also get more complicated when an entity has several functi o-nalities. For example, one might compare  X  iPhone  X  and  X  PSP  X  as  X  X ortable game player X  while compare  X  iPhone  X  and  X  Nokia N95  X  as  X  X obile phone X  . Fortunately, plenty of compar a-tive questions are po sted online, which provide evidences for what people want to compare, e.g.  X  Which to buy, i P od or i P hone ? X . We call  X  iPod  X  and  X  iPhone  X  in this example as comparators . In this paper, we define comparative questions and comparators as:  X  Comparative question : A question that i n- X  Comparator : An entity which is a target of 
According to these definitions, Q1 and Q 2 b e-low are not comparative questions while Q3 is.  X  iPod Touch  X  and  X  Zune HD  X  are comparators. Q 1:  X  X hich one is better? X  Q2:  X  X s Lumix GH -1 the best camera? X  Q3:  X  X hat X  X  the difference between iPod Touch and Zune HD? X 
The goal of this work is mining comparators fro m comparative questions. The results would be very useful in helping users X  exploration of alternative choices by suggesting comparable entities based on other users X  prior requests. 
To mine comparators from comparative que s-tions, we first have to detect whether a question is comparative or not. According to our defin i-tion, a comparative question has to be a question with intent to compare at least two entities. Please note that a question containing at least two entities is not a comparative question if i t does not have comparison intent. However, we observe that a question is very likely to be a comparative question if it contains at least two entities. We leverage this insight and develop a weakly supervised bootstrapping method to ide n-tify comparative q uestions and extract compar a-tors simultaneously.

To our best knowledge, this is the first attempt to specially address the problem on finding good comparators to support users X  comparison activ i-ty. We are also the first to propose using co m-parative questio ns posted online that reflect what users truly care about as the medium from which we mine comparable entities. Our weakly supe r-vised method achieves 82.5% F1 -measure in comparative question identification, 83.3% in comparator extraction, and 76.8% in end -to -end comparative question identification and comp a-r a tor extraction which outperform the most rel e-vant state -of -the -art method by Jindal &amp; Liu (2006b) significantly. The rest of this paper is organized as follows. The next section discusses previous work s . Se c-tion 3 presents our weakly -supervised method for comparator mining . Section 4 reports the evalu a-tions of our techniques , and we conclude the p a-per and discuss future work in Section 5 . 2.1 Overview In terms of discovering related items for an ent i-ty, our work is similar to the research on reco m-mender systems, which recommend items to a user. Recommender systems mainly rely on sim i-larities between items and/or their statistical co r-relations in user log data (Linden et al., 2003). For exam ple, Amazon recommends products to its customers based on their own purchase hist o-ries, similar customers X  purchase histories, and similarity between products. However, reco m-mending an item is not equivalent to finding a comparable item. In the case of Ama zon, the purpose of recommendation is to entice their cu s-tomers to add more items to their shopping carts by suggesting similar or related items. While in the case of comparison, we would like to help users explore alternatives, i.e. helping them make a de cision among comparable items.

For example, it is reasonable to recommend  X  iPod speaker  X  or  X  iPod batteries  X  if a user is interested in  X  iPod  X , but we would not compare them with  X  iPod  X . However, items that are co m-parable with  X  iPod  X  such as  X  iPhone  X  or  X  P SP  X  which were found in comparative questions pos t-ed by users are difficult to be predicted simply based on item similarity between them. Although they are all music players,  X  iPhone  X  is mainly a mobile phone, and  X  PSP  X  is mainly a portable game device. Th ey are similar but also different therefore beg comparison with each other. It is clear that comparator mining and item reco m-mendation are related but not the same. 
Our work on comparator mining is related to the research on entity and relation extraction in information extraction (Cardie, 1997; Califf and Mooney, 1999; Soderland, 1999; Radev et al., 2002; Carreras et al., 2003). Specifically, the most relevant work is by Jindal and Liu (2006a and 2006b) on mining comparative sentences and relations. Their methods applied class sequential rules (CSR) (Chapter 2, Liu 2006) and label s e-quential rules (LSR) (Chapter 2, Liu 2006) learned from annotated corpora to identify co m-parative sentences and extract comparative rel a-tions respectively in the news and revie w d o-mains. The same techniques can be applied to comparative question identification and comp a-r a tor mining from questions. However, their m e-thods typically can achieve high precision but suffer from low recall (Jindal and Liu, 2006b) (J&amp;L). However, ensuri ng high recall is crucial in our intended application scenario where users can issue arbitrary queries. To address this pro b-lem, we develop a weakly -supervised bootstra p-ping pattern learning method by effectively lev e-raging unlabeled questions. 
Bootstrapp ing methods have been shown to be very effective in previous information extraction research (Riloff, 1996; Riloff and Jones, 1999; Ravichandran and Hovy, 2002; Mooney and B u-nescu, 2005; Kozareva et al., 2008). Our work is similar to them in terms of metho dology using bootstrapping technique to extract entities with a specific relation. However, our task is different from theirs in that it requires not only extracting entities (comparator extraction) but also ensuring that the entities are extracted from comparative questions (comparative question identification), which is generally not required in IE task . 2.2 Jindal &amp; Liu 2006 In this subs ection, we provide a brief summary of the comparative mining method proposed by Jindal and Liu (2006a and 2006b), which is used as baseline for comparison and represents the state -of -the -art in this area. We first introduce the definition of CSR and LSR r ule used in their approach, and then describe their comparative mining method. Readers should refer to J&amp;L X  X  original papers for more details.
 CSR and LSR CSR is a classification rule. It maps a sequence pattern S (  X  1  X  2 ...  X   X  ) to a class C . In our problem, C is either comparative or non -comparative . Given a collection of sequences with class i n-formation, every CSR is associated to two par a-meters: support and confidence . Support is the proportion of sequences in the collection contai n-ing S as a subsequence. Confidence is the propo r-tion of sequences labeled as C in the sequences containing the S . These parameters are important to evaluate whether a CSR is reliable or not. quence pattern  X  (  X  1  X  2 ...  X   X  ...  X   X  ) to a labeled ken (  X   X  ) in the input sequence with a designated label (  X   X  ). This token is referred as the anchor. The anchor in the input sequence could be e x-tracted if its corresponding label in th e labeled sequence is what we want (in our case, a comp a-rator). LSRs are also mined from an annotated corpus, therefore each LSR also have two par a-meters: support and confidence . They are sim i-larly defined as in CSR.
 Supervised Comparative Mining Method J&amp; L treated comparative sentence identification as a classification problem and comparative rel a-tion extraction as an information extraction pro b-lem. They first manually created a set of 83 ke y-words such as beat , exceed , and outperform that are likely indica tors of comparative sentences. These keywords were then used as pivots to create part -of -speech (POS) sequence data. A manually annotated corpus with class inform a-tion, i.e. comparative or non -comparative , was used to create sequences and CSRs were mined. A Na X ve Bayes classifier was trained using the CSRs as features. The classifier was then used to identify comparative sentences.

Given a set of comparative sentences, J&amp;L manually annotated two comparators with labels $ES1 and $ES2 and the feature compared with label $FT for each sentence. J&amp;L X  X  method was only applied to noun and pronoun. To differe n-tiate noun and pronoun that are not comparators or features, they added the fourth label $NEF, i.e. non -entity -feature. These labels were used as pivots togeth er with special tokens l i &amp; r j 1 (token position), #start (beginning of a sentence), and #end (end of a sentence) to generate sequence data, sequences with single label only and min i-mum support greater than 1% are retained, and then LSRs were created. When applying the learned LSRs for extraction, LSRs with higher confidence were applied first.

J&amp;L X  X  method have been proved effective in their experimental setups. However, it has the following weaknesses:  X  The performance of J&amp;L X  X  method relies  X  Users can express comparative sente nces or  X  Example CSRs and LSRs given in Jindal &amp; In the next section, we introduce our method to address these shortcomings. Our weakly supervised method is a pattern -based approach similar to J&amp;L  X  s method, but it is di f-ferent in many aspects: Instead of using separate CSRs and LSRs, our method aim s to learn s e-quential patterns which can be used to identify comparative question and extract comparators simultaneously. 
In our approach, a sequential pattern is defined as a sequence S ( s 1 s 2 ... s i ... s n ) where s i can be a word, a POS tag, or a symbol denoting either a comparator ( $C ) , or the beginning (#start) or the end of a question ( #end ). A sequential pattern is called an indicative extraction pattern (IEP) if it can be used to identify comparative questions and extract compa rators in them with high reli a-bility. We will formally define the reliability score of a pattern in the next section. 
Once a question matches an IEP, it is classified as a comparative question and the token s e-quences corresponding to the comparator slots in the IEP are extracted as comparators. When a question can match multiple IEPs, the longest IEP is used 2 . Therefore, instead of manually creating a list of indicative keywords, we create a set of IEPs. We will show how to acquire IEPs automatically usin g a bootstrapping procedure with minimum supervision by taking advantage of a large unlabeled question collection in the following subsections. The evaluations shown in section 4 confirm that our weakly supervised method can achieve high recall while retai n high precision.

This pattern definition is inspired by the work of Ravichandran and Hovy (2002 ) . Table 1 shows some examples of such sequential pa t-terns. We also allow POS constraint on compar a-tors as shown in the pattern  X &lt;, $C /NN or $C /NN ? #end&gt;  X . It means that a valid comparator must have a NN POS tag. 3.1 Mining Indicative Extraction Patterns
Our weakly supervised IEP mining approach is based on two key assumptions:  X 
If a sequential pattern can be used to extract many reliable comparator pairs, it is very likely to be an IEP.  X  If a comparator pair can be extracted by an IEP , the pair is reliable .

Based on these two assumptions, we design our bootstrapping algorithm as shown in Figure 1. The bootstrapping process starts with a single IEP. From it, we extract a set of initial seed co m-parator pairs. For each comparator pair, all que s-tions containing the pair are retrieved from a question collection and regarded as compara tive questions. From the comparative questions and comparator pairs, all possible sequential patterns are generated and evaluated by measuring their reliability score defined later in the Pattern Eva l-uation section. Patterns evaluated as reliable ones are IEPs and are added into an IEP repository. 
Then, new comparator pairs are extracted from the question collection using the latest IEPs. The new comparators are added to a reliable comp a-rator repository and used as new seeds for pattern learning in the nex t iteration. All questions from which reliable comparators are extracted are r e-moved from the collection to allow finding new patterns efficiently in later iterations. The process iterates until no more new patterns can be found from the question collectio n. 
There are two key steps in our method: (1) pa t tern generation and (2) pattern evaluation. In the following subsections, we will explain them in details. Pattern Generation To generate sequential patterns, we adapt the surface text pattern mining method introduced in (Ravichandran and Hovy, 2002). For any given comparative question and its comparator pairs, comparators in the question are replaced with symbol $Cs. Two symbols, #start and #end , are attached to the beginning and the en d of a se n-tence in the question. Then, the following three kinds of sequential patterns are generated from sequences of questions :  X  Lexical patterns: Lexical pattern s indicate  X  Generalized patterns: A lexical pa ttern can  X  Specialized patterns: In some cases, a pa t-Note that generalized patterns are generated from lexical patterns and the specialized patterns are generated from the combined set of generalized patterns and lexical patterns. T he final set of candidate patterns is a mixture of lexical patterns, generalized patterns and specialized pa tterns. Pattern Eval uation According to our first assumption, a reliability score  X   X  (  X   X  ) for a candidate pattern  X   X  at iter a-tion k can be defined as follows: , where  X   X  can extract known reliable comparator tor pair repository accumulated until the (  X   X  1 )  X   X  it e r a tion.  X   X  (  X  ) means the number of questions satisfying a condition x . The condition  X   X   X   X   X   X  d e notes th at  X   X   X  can be extracted from a question by applying pattern  X   X  while the co n-dition  X   X   X   X  denotes any question containing pattern  X   X  . 
However, Equation (1) can suffer from i n-complete knowledge about reliable comparator pairs. For example, very few reliable pairs are generally discovered in early stage of bootstra p-ping. In this case, the value of Equation (1) might be underestimated which could affect the effectiveness of equation (1) on distinguishing IEPs from non -reliable patterns. We mitigate thi s problem by a lookahead procedure. Let us denote the set of candidate patterns at the iteration k by  X   X  . We define the support  X  for comparator pair  X   X   X  which can be extracted by  X  exist in the current reliable set : where  X   X   X   X   X   X  means that one of the pattern s in  X  ly, if  X   X   X  can be extracted by many candidate reliable one in the next iteration. Based on this intuition, a pair  X   X   X  whose support S is more than a threshold  X  is regarded as a likely -reliable pair . Using likely -reliable pairs, lookahead reliability score  X   X   X  is defined : , where  X   X  pairs based on  X   X  . 
By interpolating Equation (1) and (3), the final reliability score  X  (  X   X  ) fined as follows: Using Equation (4), we evaluate all candidate patterns and select patterns whose score is more than threshold  X  as IEPs. All necessary param e-ter value s are empirically determined. W e will explain how to determine our parameters in se c-tion 4. 4.1 Experiment Setup So urce Data All experiments were conducted on about 60M questions mined from Yahoo! Answers X  question title field. The reason that we used only a title field is that they clearly express a main intention of an asker with a form of simple question s in general . Evaluation Data Two separate data sets were created for evalu a-tion. First, w e collected 5,200 questions by sa m-pling 2 00 questions from each Yahoo! Answers category 3 . Two annotators were asked to label each question manually as comparative , non -comparative , or unknown . Among them, 139 (2.67%) questions were classified as comparative, 4,934 (94.88%) as non -comparative, an d 127 (2.44%) as unknown questions which are diff i-cult to assess . W e call this set SET -A.

Because there are only 139 comparative que s-tions in SET -A, we created another set which contains more comparative questions. W e m a-nually construct ed a keyword set con sisting of 53 words such as  X  or  X  and  X  prefer  X , which are good indicators of comparative questions. In SET -A, 97.4% of comparative questions contain s one or more keywords from the keyword set. We then randomly selected another 100 questions from each Yahoo! Answers category with one extra condition that all questions have to contain at least one keyword. These questions were labeled in the same way as SET -A except that their co m-parators were also annotated . This second set of questions is referred as S ET -B. It contains 853 comparative questions and 1,747 non -comparative questions . For comparative question identification experiments, we used all labeled questions in SET -A and S ET -B. For comparator extraction experiments, we used only SET -B. All the remai ning unlabeled questions (called as SET -R) were used for training our weakly supe r-vised method.

As a baseline method, we carefully impl e-mented J&amp; L X  X  method. Specifically, CSR s for comparative question identification were learned from the labeled questions, and then a statistical classifier was built by using CSR rules as fe a-tures. We examined both SVM and Na X ve Bayes (NB) model s as reported in their experiments. For the comparator extraction, LSR s were learned from SET -B and applied for comparator extracti on. 
To start the bootstrapping procedure, we a p-plied the IEP  X &lt; #start nn/$c vs/cc nn/$c ?/. #end&gt; X  to all the questions in SET -R and g a-thered 12,194 comparator pairs as the initial seeds . For our weakly supervised method, there are four parameters, i.e.  X  ,  X  ,  X  , and  X  , need to be determined empirically. W e first mined all pos s-ible candidate pattern s from the suffix tree using the initial seeds . From these candidate patterns, we applied them to SET -R and got a new set of 59,410 candidate comparator pairs. Among these new candidate comparator pairs , we randomly selected 100 comparator pairs and manually cla s-sif ied them into reliable or non -reliable compar a-tor s. Then we found  X  that maximiz ed precision without hurting recall by investigating freque n-cies of p airs in the labeled set. By this method,  X  was set to 3 in our experiments. Similarly, the threshold parameters  X  and  X  for pattern evalu a-tion w ere set to 10 and 0.8 respectively. For the interpolation parameter  X  in Equation (3), we simply set the value to 0.5 by assuming that two reliability scores are equally important . 
As evaluation measures for comparative que s-tion identification and comparator extraction , we used precision, recall, and F 1 -measure. All r e-sult s were obtained from 5 -fold cross validation. Note that J&amp;L X  X  method needs a training data but ours use the unlabeled data (SET -R) with weakly supervised method to find parameter setting. This 5 -fold evaluation data is not in the unl a-beled data. Both metho ds were tested on the same test split in the 5 -fold cross validation . All evaluation scores are averaged across all 5 folds.
For question processing, w e used our own st a-tistical POS tagger developed in -house 4 . 4.2 Experiment Results Comparative Question Identification and Comparator Extraction
Table 2 shows our experiment al results . In the table,  X  X dentification only X  indicates the perfo r-mances in comparative question identification,  X  X xtraction only X  denotes the performances of comparator extraction when only comparative questions are used as input, and  X  X ll X  indicates the end -to -end performances when question ide n tification results were used in comparator extraction. Note that the results of J&amp; L X  X  method on our collections are very comparable to what is reported in their paper . 
I n terms of precision, the J&amp; L X  X  method is competitive to our method in comparative que s-tion identification. However, the recall is signif i-cantly lower than ours . In terms of recall, our method outperforms J&amp; L X  X  method by 35% and 22% in comparative question identification and comparator extraction respectively. In our anal y-sis, the low recall of J&amp; L X  X  method is mainly caused by low coverage of lea r ned CSR patterns over the test set. 
In the end -to -end experiments , our weakly s u-pervised method performs significantly better than J&amp; L X  X  method. O ur method is about 55% better in F1 -measure . This result also highlights another advantage of our method that identifies comparative questions and extract s comparators simulta neously using one single pattern . J&amp; L X  X  method us es two kinds of pattern rules , i.e. CSRs and LSRs. Its performance drops significantly due to error propagations . F 1 -measure of J&amp; L X  X  method in  X  X ll X  is about 30% and 32% worse than the scores of  X  X dentifica tion only X  and  X  X  x-traction X  only respectively , our method only shows small amount of performance decrease (approximately 7 -8%). 
We also analyzed the effect of pattern gener a-lization and specialization. Table 3 shows the results. Despite of the simplicity of our methods, they significantly contribute to performance i m-provements. This result shows the importance of learning patterns flexibly to capture various comparative question expressions . Among the 6,127 learned IEPs in our database, 5 , 930 pa t-terns are generalized ones, 171 are specialized ones, and only 26 patterns are non -generalized and specialized ones. 
To investigate the ro bustness of our bootstra p-ping algorithm for different seed configurations, we compare the performances between two di f-ferent seed IEPs. The results are shown in Table 4. As shown in the table, the performance of our bootstrapping algorithm is stable regard less of significantly different number of seed pairs ge n-erated by the two IEPs. This result implies that our bootstrapping algorithm is not sensitive to the choice of IEP.

Table 5 also shows the robustness of our boo t-strapping algorithm. In Table 5,  X  All X  indicates the performances that all comparator pairs from a single seed IEP is used for the bootstrapping, and  X  X artial X  indicate the performances using only 1,000 randomly sampled pairs from  X  All X  . As shown in the table, there is no significant pe r-forman ce difference. 
In addition , we conducted error analysis for the cases where our method fails to extract co r-rect comparator pairs:  X  23.75% of errors on compara tor extraction  X  The remaining 67.63% of errors come from Examples of Comparator Extraction By applying our bootstrapping method to the entire source data (60M questions), 328,364 unique comparator pairs were extracted from 679,909 automatically identified comparative questions. 
Table 6 lists top 10 frequently compared ent i-ties for a target item, such as Chanel , Gap , in our question archive. As shown in the table, our comparator mining m e thod successfully disco v-ers realistic comparators. For example, for  X  Ch a-nel X  , most results are high -end fashion brands such as  X  Dior X  or  X  Louis Vui t ton X  , while the ran k-ing results for  X  Gap X  usually contains similar a p-parel brands for young people, such as  X  Old Navy X  or  X  Banana Republic X  . For the basketball player  X  Kobe  X , most of the top ranked comparators are also famous basketball players. Some interesting comparators are shown for  X  Canon  X  (the comp a-ny name). It is famous for different kinds of its products, for example, digital cameras and pri n-ters, so it can be co m pared to different kinds of companies. For exa m ple, it is compared to  X  HP X  ,  X  Lexmark X  , or  X  X e rox X , the printer manufacturers, and also co m pared to  X  Nikon X  ,  X  Sony X  , or  X  Kodak X , the digital camera manufactures. Besides gene r-al entities such as a brand or company name , our method also found an interesting comparable enti ty for a specific item in the experiments . F or example, o ur method recommend s  X  Nikon d40i  X ,  X  Canon rebel xti  X ,  X  Canon rebel xt  X ,  X  Nikon d3000  X ,  X  Pe n tax k100d  X ,  X  Canon eos 1000d  X  as comparator s for the specific camera product  X  N i-kon 40d  X  .

Table 7 can show the difference between our comparator mining and query/item recommend a-tion . A s shown in the table ,  X  Google related searches  X  generally suggests a mixed set of two kinds of related queries for a target entity : (1) queries specified with subtopic s for an original query ( e.g.,  X  Chanel handbag  X  for  X  X  hanel  X  ) and (2) its comparable entities (e.g.,  X  Dior  X  for  X  Ch a-nel  X  ) . It confirm s one of our claim s that c ompar a-tor mining and query/item recommendation are related but not the same. In this paper, we present a novel weakly supe r-vised method to identify comparative questions and extract comparator pairs simultaneously. We re ly on the key insight that a good comparative question identification pattern should extract good comparator s , and a good comparator pair should occur in good comparative questions to bootstrap the extraction and identification process. By leveraging large amount of unl a-beled data and the bootstrapping process with slight supervision to determine four parameters, we found 328,364 unique comparator pairs and 6,869 extraction patterns without the need of creating a set of comparative question indicator keywor ds. 
The experimental results show that our m e-thod is effective in both comparative question identification and comparator extraction. It si g-nificantly improves recall in both tasks while maintains high precision. Our examples show that these comparator pa irs reflect what users are really interested in comparing.

Our comparator mining results can be used for a commerce search or product recommendation system. For example, automatic suggestion of comparable entities can assist users in their co m-parison activities before making their purchase decisions. Also, our results can provide useful information to companies which want to identify their competitors. 
In the future, we would like to improve extra c-tion pattern application and mine rare extract ion patterns. How to identify comparator aliases such as  X  LV  X  and  X  Louis Vuitton  X  and how to separate ambiguous entities such  X  Paris vs. London  X  as location and  X  Paris vs. Nicole  X  as celebrity are all interesting research topics. We also plan to develop me thods to summarize answers pooled by a given comparator pair. This work was done when the first author worked as an intern at Microsoft Research Asia.
