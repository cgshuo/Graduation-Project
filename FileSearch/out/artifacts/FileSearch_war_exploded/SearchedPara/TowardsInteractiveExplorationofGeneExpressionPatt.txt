 Analyzing coheren t gene expression patterns is an importan t task in bioinformatics researc h and biomedical applications. Recen tly, various clustering metho ds have been adapted or prop osed to identify clusters of co-expressed genes and rec-ognize coheren t expression patterns as the centroids of the clusters. However, the interpretation of co-expressed genes and coheren t patterns mainly depends on the domain knowl-edge, which presen ts several challenges for coheren t pattern mining and cannot be solved by most existing clustering ap-proac hes.
 In this paper, we introduce an interactive exploration sys-tem GeneX (Gene eXplorer) for mining coheren t expression patterns. We develop a novel coherent pattern index graph to provide highly con X den t indications of the existence of coheren t patterns. Typical exploration operations are sup-ported based on the index graph. We also provide a bunc h of graphical views as the user interface to visualize the data set and facilitate the interactiv e operations. To help users to interpret and validate the mining results, we design the gene annotation panel that connects the genes with some public annotation databases. The experimen tal results show that our approac h is more e X ectiv e than the state-of-the-art metho ds in mining real gene expression data sets. DNA microarra y technology has made it now possible to monitor simultaneously the expression levels of thousands of genes during importan t biological processes (e.g., [21]) and across collections of related samples (e.g., [16]). It is often an importan t task to identify the co-expressed genes and the coheren t gene expression patterns from the gene ex-pression data. A group of co-expressed genes presen t similar expression patterns, while a coherent gene expression pat-tern (or coheren t pattern in short) characterizes the com-mon trend of expression levels for a group of co-expressed genes. In other words, a coheren t gene expression pattern is a \template", while the expression pro X les of the corre-sponding co-expressed genes yield to the pattern with small
This researc h is partly supp orted by NSF grants DBI-0234895, IIS-0308001 and NIH grant 1 P20 GM067650-01A1. All opinions,  X ndings, conclusions and recommen-dations in this paper are those of the authors and do not necessarily re X  X ct the views of the National Science Foun-dation or the National Institutes of Health. Figure 1: Examples of groups of co-expressed genes and corresp onding coheren t expression patterns divergence.
 For example, the well known Iyer's data set [21] records the expression pro X les of 517 human genes with respect to a 12-point time-series. A list of 10 groups of co-expressed genes and the corresp onding coheren t gene expression patterns are also given and well accepted as the ground truth . Figure 1 demonstrates three groups of the co-expressed genes in the ground truth (the left column) and the corresp onding coher-ent patterns (the right column). Clearly , the co-expressed genes share the common trends in their expression pro X les. The error bar at each time point of the coheren t patterns delineates the standard deviation of the expression levels within the corresp onding group of co-expressed genes. Why do we want to  X nd co-expressed genes and coherent gene expression patterns? In practice, co-expressed genes may belong to the same or similar functional categories and indicate co-regulated families [42]. Coheren t gene expression patterns may characterize importan t cellular processes and suggest the regulating mechanism in the cells [33]. In a DNA microarra y gene expression data set, there are usually multiple groups of co-expressed genes and the cor-responding coheren t patterns. Previous studies (e.g., [2; 11; 21]) suggest that there is usually a hierarchy of co-expressed genes and coherent patterns in a typical gene expression data set . For example, Figure 2 shows a group S of co-expressed genes in the Iyer's data set, which can be split into two subgroups, S 1 and S 2 , and the subgroup S 2 can be further split into two sub-subgroups. Genes in each subgroup have more uniform expression pro X les, i.e., the pattern is more coheren t than the one at the higher level. In other words, at the high levels of the hierarc hy, large groups of genes appro ximately follow some \rough" coheren t expression patterns. At the low lev-els of the hierarc hy, the large groups of genes are divided into small subgroups that follow some \ X ne" coheren t expression patterns. The \ X ne" coheren t expression patterns inherit some characteristics from the high level \rough" patterns, and add some speci X c characteristics.
 One subtlet y here is that there is no general and objective standard to identify co-expressed gene groups . The interpre-tation of co-expressed genes and coheren t patterns mainly depends on the domain knowledge. Typically , two situations may happ en in the analysis of gene expression data. To  X nd co-expressed genes and disco ver coheren t expression patterns, many clustering algorithms have been developed, including the conventional metho ds, such as K-means [42], SOM (Self Organizing Map) [41], and the traditional hierar-chical approac hes (e.g., [11; 2]), as well as some newly pro-posed metho ds dedicated to gene expression data, such as CAST [6], CLICK [40] and DHC [22]. Please see Section 2 for a brief survey. Generally , those clustering algorithms partition the set of genes into clusters. Each cluster is con-sidered as a group of co-expressed genes and the coheren t expression pattern can be simply the mean (the centroid) of the expression pro X les of the genes in that cluster. While previous studies con X rm that the clustering algorithms are useful to identify co-expressed gene groups and disco ver co-heren t expression patterns, due to the speci X c characteristics of gene expression data and the special requiremen ts from the biology domain, clustering gene expression data is still facing the following challenges. Can we provide a  X  X xible tool for biologists so that they can interactively unfold the hierarchy of groups of co-expressed genes and derive the corresponding coherent patterns with their domain knowledge? In this paper, we prop ose a frame-work GeneX for interactive exploration of coherent patterns for gene expression data , and make the following contribu-tions.
 The remainder of the paper is organized as follows. In Sec-tion 2, we give a short survey on related work. The at-traction tree structure and the interactiv e exploration of coheren t patterns using coheren t pattern index graph are presen ted in Section 3. In Section 4, we introduce a system under construction that sets up a general framew ork to sup-port the interactiv e exploration. The paper is concluded in Section 5. Clustering is the process of grouping data objects into a set of disjoin t classes, i.e., clusters , so that the objects within a class are similar to each other, while the objects in dif-feren t classes are dissimilar. To  X nd co-expressed genes and disco ver coheren t expression patterns, various conventional clustering algorithms are adapted, and some new metho ds dedicated to gene expression data are prop osed.
 In this section, we give a brief survey of some represen tativ e clustering metho ds applied to gene expression data. Basi-cally, the metho ds can be classi X ed into three categories, namely , partition-b ased approaches , hierarchical approaches and pattern-based approaches . Moreo ver, based on di X eren t clustering assumptions and optimization models, we can fur-ther divide the partition-based metho ds into four subcate-gories: the K-means algorithm and its derivatives , the Self Organizing Map (SOM) algorithm and its extensions , the graph-based algorithms and the model-based algorithms . On the other hand, the hierarc hical metho ds can be further di-vided into the agglomer ative algorithms and the divisive al-gorithms based on how the hierarc hical structure is formed. The K-means algorithm [26] is a typical partition-based clus-tering metho d. Given a pre-sp eci X ed number K , the algo-rithm partitions the data set into K disjoin t clusters such that the sum of the squared distances of objects from their cluster centers is minimized.
 In [42], Tavazoie et al. apply the K-means algorithm on the gene expression data collected by Cho et al. [9]. They  X nd that each cluster contains a signi X can t portion of genes with similar functions. Furthermore, by searc hing the upstream DNA sequences of genes within the same cluster, they ex-tract 18 motifs, which are promising candidates for novel cis -regulatory elemen ts.
 The K-means algorithm has some drawbac ks. The K-means algorithm requires the number of clusters as the parameter. However, it is often hard for a user to pre-determine the number groups of co-expressed genes in the data set. More-over, gene expression data is typically noisy and contains a large number of outliers. However, the K-means algorithm forces each gene into a cluster, which may cause the cen-troids of clusters, i.e., the coheren t patterns to be reported, dragged astra y by the outliers.
 To overcome the above two drawbac ks, several new algo-rithms [32; 19; 13] have been prop osed. We call them deriva-tives of the K-means algorithm , since essen tially they also minimize the overall divergence of objects from their clus-ter centers. For example, the k-medoids algorithms use an object closest to the center of a cluster as the represen ta-tive (medoid) such that the total distance between the k selected medoids and the other objects is minimized. The k-medoids algorithms are more robust to the outliers than the k-means algorithm. Another group of algorithms use some thresholds to control the coherence of clusters. For example, Ralf-Herwig et al. [32] introduce two parameters  X  and  X  , where  X  is the maximal similarit y between two separate cluster centroids, and  X  corresp onds to the mini-mal similarit y between a data point and its cluster centroid. In [19], the clusters are constrained to have a diameter no larger than d . Motiv ated by [19], Smet et al. [13] prop ose a more e X cien t algorithm Adapt Cluster . Data object x will be assigned to cluster c if the assignmen t has a higher probabilit y than threshold S .
 The clustering process of the above algorithms turns out to be extracting all the clusters with quali X ed coherence from the data set. Therefore, users do not need to input the number of clusters. On the other hand, with the coher-ence control, outliers may only end up with trivial clusters, i.e., clusters with very few mem bers. Thus, they will not compromise the signi X can t groups of co-expressed genes and corresp onding coheren t patterns.
 Basically , K-means algorithm and its deriv atives require some global parameters, i.e., either the number of clusters or some coherence threshold. The clustering process is like a \blac k box". There is no intensiv e interaction between the user and the mining procedures. Therefore, they are not  X  X xible to the local structures of the data set, and can hardly supp ort interactiv e exploration for coheren t expression patterns. The Self-Organizing Map (SOM) was developed by Koho-nen [24], on the basis of a single layered neural network. The data objects, usually of high dimensionalit y, are mapp ed onto a set of neurons organized with low dimensional struc-tures, e.g., a two dimensional p  X  q grid. Each neuron is associated with a reference vector, and each data point is mapp ed to the neuron with the \closest" reference vector. During the clustering process, each data object acts as a training sample that directs the movemen t of the reference vectors towards the denser areas of the input vector space, so that those reference vectors are trained to  X t the distribu-tions of the input data set. When the training is complete, clusters are identi X ed by mapping all data points to the out-put neurons.
 Tamayo et al. [41] apply the SOM algorithm in a study of hematop oietic di X eren tiation. The expression patterns of 1 ; 036 human genes are mapp ed to a 6  X  4 SOM. After the clustering process, the genes are organized into biologi-cally relev ant clusters that suggest novel hypotheses about hematop oietic di X eren tiation. For example, they report that Cluster 15 captures 154 genes involved in the \di X eren tia-tion therap y", which is part of the standard treatmen t for patien ts with acute prom yelocytic leukemia. Among the 154 genes, some show unexp ected regulation patterns. This pro-vides interesting insigh ts into the mechanism of di X eren tia-tion, which is uncertain yet.
 One of the remark able features of SOM is that it allows users to impose partial structure on the clusters, and arranges sim-ilar patterns as neigh bors in the output neuron map. This feature facilitates easy visualization and interpretation of the clusters, and thus partly supp orts the explorativ e anal-ysis of gene expression patterns.
 However, similar to the K-means algorithm, SOM also re-quires a user to specify the number of clusters, which is typ-ically unkno wn in advance for gene expression data. More-over, as pointed out in [18], if the data set is abundan t with irrelev ant data points, such as genes with invarian t patterns, SOM will produce an output where irrelev ant data points will populate the vast majority of clusters, while most inter-esting patterns will be missed since they are collapsed into only a few clusters.
 Recen tly, several new algorithms [18; 43; 27] have been pro-posed based on the SOM algorithm. Those algorithms can automatically determine the number of clusters and dynam-ically adapt the map structure to the data distribution. For example, Herrero et al. [18] extend the SOM by a binary tree structure. At  X rst, the tree only contains a root node con-necting two neurons. After a training process similar to that of the SOM algorithm, the data set is segregated into two subsets. Then the neuron with less coherence is split in two new neurons. This process is repeated level by level, until all the neurons in the tree satisfy some coherence threshold. Other examples of SOM extensions are Fuzzy Adaptiv e Res-onance Theory (Fuzzy ART) [43] and supervised Network Self-Organized Map (sNet SOM) [27]. In general, they pro-vide some approac hes to measure the coherence of a neuron (e.g., vigilance criterion in [43] and grow parameter in [27]). The output map is adjusted by splitting the existing neurons or adding new neurons into the map, until the coherence of each neuron in the map satis X es a user-sp eci X ed threshold. SOM is an e X cien t and robust clustering technique. Hi-erarc hical structure can also be built based on SOM (e.g., SOTA). Moreo ver, by systematically controlling the split of neurons, SOM can easily adapt to the local structures of the data set. However, the curren t approac hes control the split-ting process by some coherence threshold, which is hard for users to specify. The graph-based algorithms model a gene expression data set as a weighted graph G ( V; E ), where each gene is repre-sented by a vertex v 2 V . For example, in Click [40], a pair of genes x; y 2 V are connected by an edge e ( x; y ) 2 E with a weight based on the similarit y between the expression pat-terns of x and y . In CAST [6], the similarit y of x and y is mapp ed to [0 ; 1], and the edge e ( x; y ) is created in the graph if the mapp ed value is 1. The problem of clustering a set of genes is then converted to some classical graph-theoretical problems, such as searc hing for the minimum cut [17; 40], the minimum spanning tree [46], or the maximum cliques [6] in graph G .
 Hartuv et al. [17] prop ose an algorithm HCS (for Highly Connected Subgraph), which recursiv ely splits the weighted graph G into a set of highly connected comp onen ts along the minim um cut. Each highly connected comp onen t is consid-ered as a cluster. Motiv ated by HCS , Shamir et al. presen t the algorithm CLICK (for CLuster Identi X cation via Con-nectivit y Kernels) in [40]. CLICK sets up a statistic frame-work to measure the coherence within a subset of genes and determine the criterion to stop the recursiv e splitting pro-cess.
 Ben-Dor et al. [6] introduce the idea of a corrupted clique graph data model. The input data set is assumed to come from the underlying cluster structure by \contamination" with random errors. Clustering a dataset is equiv alent to identifying the original clique graph from the corrupted ver-sion with as few errors as possible. A heuristic algorithm CAST (for Cluster A X nit y Searc h Techniques) is developed to iterativ ely identify the \corrupted cliques" (clusters) once at a time. The coherence of the clusters is controlled by a user-sp eci X ed parameter, called a X nity threshold . In [46], Xu et al.  X rst generate a Minimum Spanning Tree (MST) from the weighted graph G of data set X . By re-moving ( K  X  1) edges from the generated MST, the data set is partitioned into K clusters. Three alternate algorithms are presen ted to determine the edges to be remo ved. The graph-based algorithms stem from some classical graph-theoretical problems. Although with solid mathematical ground, they may not be suitable for gene expression data without adaption. For example, in gene expression data, groups of co-expressed genes may be highly connected by a large amoun t of \intermediate" genes [23]. In this case, the approac hes based on minim um spanning tree and minim um cut may lead to clusters including genes with incoheren t pro X les but highly connected by a series of \intermediate" genes. The model-based clustering approac hes (e.g., [12; 48; 15; 28]) provide a statistical framew ork to model the cluster structure of gene expression data. The data set is assumed to come from a mixture of underlying probabilit y distribu-tions, with each comp onen t corresp onding to a di X eren t clus-ter. The goal is to estimate the parameters  X  = f  X  i j 1  X  i  X  k g and  X  = f  X  i r j 1  X  i  X  k; 1  X  r  X  n g that maximize the likeliho od L mix ( X  ;  X ) = P k i =1  X  i r f i ( x r j  X  the number of data objects, k is the number of comp onen ts, x r is a data object (i.e., a gene expression pro X le), f i ( x is the densit y function of x r in comp onen t C i with some unkno wn set of parameters  X  i , and  X  i r represen ts the prob-abilit y that x r belongs to C i . Usually , the parameters  X  and  X  are estimated by the EM (Expectation-Maximization) algorithm [10].
 Several early studies, including [12; 48; 15], impose a model of multivariate Gaussian distributions on gene expression data. Although the Gaussian model works well for gene-sample data where the expression levels of genes are mea-sured under a collection of samples, it may not be e X ectiv e for time-series data (the expression levels of genes are moni-tored during a continuous series of time points). The reason is that the Gaussian model treats the time points as un-ordered, static attributes, and ignores the inheren t depen-dency of the gene expression levels over time.
 To better describ e the gene expression dynamics in time-series data, several new models have been introduced, such as [5; 25; 33; 36]. In [5], each gene expression pro X le is modelled as a cubic spline and each time point in X  X ences the overall smooth expression curve. Luan et al. [25] in-dependen tly develop a similar model of B-splines . In [33], Ramoni et al. assume that the time-series follow an autore-gressive model , where the value of the series at time t is a linear function of the values at several previous time points. Schliep et al. [36] prop ose a restricted hidden Markov model to accoun t for the dependencies in time-series data. An importan t advantage of the model-based approac hes is that they provide an estimated probabilit y  X  i r that data ob-ject x r belongs to cluster i . Since it is typical for a gene to participate multiple cellular processes, there may be in-stances that a single gene has a high correlation with two di X eren t clusters. Therefore, the probabilistic feature of model-based clustering is particularly suitable for gene ex-pression data. Moreo ver, model-based clustering does not need to de X ne a distance (or similarit y) between two gene pro X les. Instead, the measure of coherence is inheren tly em-bedded in the statistical framew ork. This feature makes the model-based clustering more robust to the dimensionalit y of attributes (samples or time points).
 However, model-based clustering relies on the assumption that the data set  X ts a speci X c distribution. This may not be true in many cases [48]. The modelling of gene expres-sion data sets, in particular, is an ongoing e X ort by many researc hers, and, to the best of our knowledge, there is cur-rently no well-established general model for gene expression data. Although some models are reasonably robust when the distribution of real expression data is deviated from the assumption, the best results can only be expected when the real data  X ts the model well. Agglomerativ e algorithms (i.e., bottom-up approac hes) ini-tially regard each data object as an individual cluster, and at each step, merge the closest pair of clusters until all the groups are merged into one cluster.
 Eisen et al. [11] apply an agglomerativ e algorithm called UPGMA (for Unweighed Pair Group Metho d with Arith-metic Mean) and adopt a metho d to graphically represen t the clustered data set. In this metho d, each cell of the gene expression matrix is colored according to the measured  X  X -orescence ratio, and the rows of the matrix are re-ordered based on the hierarc hical dendrogram structure and a consis-tent node-ordering rule. After clustering, the original gene expression matrix is represen ted by a colored table (a clus-ter image ) where large contiguous patches of color represen t groups of genes that share similar expression patterns over multiple conditions.
 Hierarc hical clustering not only groups together genes with similar expression pattern but also provides a natural way to graphically represen t the data set. The graphic represen ta-tion gives users a thorough inspection of the whole data set so that the users can obtain an initial impression of the dis-tribution of data. Eisen's metho d is much favored by many biologists and has become one of the most widely-used tools in gene expression data analysis [11; 2; 1; 21; 31]. However, as pointed out in previous studies [41; 4], tradi-tional agglomerativ e clustering algorithms may not be ro-bust to noise. They often make the decisions of merging based on local information and never trace back, i.e., any \bad" decisions made in the initial steps may never get cor-rected later. In addition, hierarc hical clustering only pro-vides a tree structure (called dendrogram ). There is no stan-dard to decide where to cut the dendrogram to deriv e clus-ters. Given a typical gene expression data with thousands of genes, it is hard for users to manually inspect the whole tree.
 To make the traditional agglomerativ e metho d more robust to noise,  X  S X  X  X  X ik et al. [35] prop ose a novel approac h called per-colation clustering . In essence, percolation clustering adopts a statistical bootstrap metho d to merge two data objects (or two subsets of data objects) when they are signi X can tly co-heren t with each other. In [4], Bar-Joseph et al. replace the traditional binary hierarc hical tree with a k -ary tree, where each non-leaf node is allowed to have at most k children. A heuristic algorithm is also presen ted to construct the k -ary tree, reduce the susceptibilit y to noise and generate an op-timal order for the leaf nodes. The two approac hes above make the deriv ed hierarc hical tree more robust. However, neither of them indicates how to cut the dendrogram to ob-tain meaningful clusters.
 Seo et al. [39] develop an interactiv e tool, Hierarchical Clus-tering Explorer (HCE) , to help users deriv e clusters from the dendrogram. To be speci X c, HCE visualizes the den-drogram by setting the distance from the root to an internal node N according to the coherence between the two children N 1 and N 2 of N . That is, the more coheren t are N 1 and N , the more distan t is N from the root. A user can select how to cut the dendrogram in horizon tal by dragging the \minimum similarity bar" . However, the system of HCE is only a visualization tool that facilitates the inspection of the dendrogram. In other words, it does not provide any hint to where the dendrogram should be cut. The divisiv e algorithms (i.e., top-do wn approac hes) start with one cluster containing all the data objects. They it-erativ ely split clusters until each cluster contains only one data object or certain stop criterion is met. For divisiv e approac hes, the essen tial problem is to decide how to split clusters at each step.
 Alon et al. [2] apply an algorithm called the deterministic-annealing algorithm (DAA) [34] to split the clusters of genes. First, two initial cluster centroids C j ( j = 1 ; 2) are randomly de X ned. The expression pattern of gene k is represen ted by a vector ~g k , and the probabilit y of gene k belonging to cluster j is assigned according to a two-comp onen t Gaussian model: The cluster centroids are recalculated as The EM algorithm is then applied to solve P j and C j . For  X  = 0, there is only one cluster, C 1 = C 2 . When  X  is increased in small steps until a threshold is reached, two distinct, converged centroids emerge. The whole data set is recursiv ely split until each cluster contains only one gene. In [22], Jiang et al. prop ose a densit y-based divisiv e ap-proac h, DHC , to clustering genes. The basic idea is that a group of co-expressed genes, i.e., a cluster, forms a dense area in the data object space. Data objects (genes) at the \center" of the dense area have high densit y and carry the coheren t pattern shared by other genes within the whole dense area. On the other hand, genes at the peripheral or boundary area of the cluster have low densit y and will be \attracted" toward the \core" area level by level. To measure the densit y of a data object O , the neigh bor-hood of O is  X rstly discretized into a series of hyper-shells f Shell O k j 1  X  k  X  K g , such that each hyper-shell occupies exactly a unit volume. Then, a weight w k is assigned to each hyper-shell Shell O k according to the distance between Shell O k and object O . Last, the number of data objects falling in each hyper-shell (denoted as n k ) is collected and the densit y is deriv ed by density ( O ) = P K k =1 w k  X  n ure 3).
 Figure 3: Hypersphere and hyper-shells w.r.t. data object O Once the densit y of data objects is de X ned, an attraction tree structure is constructed to record the coherence information among genes (See Section 3.1 for details). Algorithm DHC splits the data set recursiv ely. At the root, DHC regards the whole data set D as one dense area. It searc hes the attraction tree and identi X es the subarea D 1 with the highest densit y. It then generates two children, D 1 and ( D  X  D DHC relies on two parameters to identify the dense subareas: the similarity threshold  X  and the minimum number of object threshold M inP ts . A group of data objects O form a dense subarea if the data object of the highest densit y among O has at least M inP ts neigh bors within a distance of  X  . The divisiv e process is repeated until no leaf node can be further split into two dense subareas.
 DHC shares the similar clustering theme with DAA [2], SOTA [18] and the graph-based approac hes HCS [17] and CLICK [40], but is based on di X eren t assumptions of data distribution and uses di X eren t models of clustering. The experimen tal study shows that the densit y-based model is particularly robust to noise and well suited to analyze com-plex cluster structure, e.g., embedded clusters and highly intersected clusters [22]. However, similar to some other ap-proac hes, DHC splits the data set according to some global thresholds that are hard to set. The clustering algorithms discussed so far are examples of \ global clustering ". That is, given a data set to be clustered, the attribute space is globally determined and shared by all resulting clusters. However, it is well known in molecular biology that any cellular process may take place only in a subset of the attributes (samples or time points). Recen tly a series of pattern-based clustering algorithms have been pro-posed to capture coherence exhibited by a subset of genes on a subset of attributes.
 In [8], Cheng and Church introduce the concept of biclus-ter to measure the coherence between genes and attributes (either time series or samples). Given a set of genes and a set of conditions, a bicluster is a subset of genes coher-ent with a subset of attributes. Yang et al. [47] prop ose a move-based algorithm to  X nd biclusters more e X cien tly. Both algorithms in [8] and [47] adopt heuristic searc h ap-proac hes, and thus cannot guaran tee to  X nd the complete set of biclusters in the data set.
 In [45], Wang et al. prop ose a new model of pattern-based cluster. Given a subset of objects O and a subset of at-tributes A , pair ( O; A ) forms a pattern-based cluster if for any pair of objects x , y 2 O , and any pair of attributes a , b 2 A , the di X erence of change of values on attributes a and b between objects x and y is smaller than a threshold  X  . In a recen t study [30], Pei et al. prop ose an e X cien t algorithm, MaPle , to mine the complete set of maximal pattern-based clusters. In this section, we presen t an interactiv e approac h to explore gene expression data sets. Our approac h is in the following three steps.

Step 1: Extracting distance information. We extract
Step 2: Indexing coheren t patterns and genes. The
Step 3: User interaction. A user may choose the pulses We illustrate the technical details of the above steps in the following subsections and elaborate the metho d using one real case { the Iyer's data set [21]. An attraction tree records the related information for min-ing coheren t patterns from a gene expression data set. In-tuitiv ely, to form clusters, a gene with a high densit y in a data set can be regarded as \ attracting " other genes with low densit y.
 The densit y of a data object re X  X cts the distribution of the other objects in its neigh borhood. We adopt the the densit y de X nition from a recen tly prop osed metho d Denclue [20], since it is particularly suitable for drilling down to the sub-sets of genes. Denclue uses an in X  X ence function to describ e the in X  X ence between two objects. For example, the Gaus-sian in X  X ence function is de X ned as follows. where d ( O i ; O j ) is the distance between objects O i and  X  is a parameter. We will address how to determine an appropriate value for parameter  X  in Section 3.3.
 We normalize the attribute values of the data objects as follows. Given an object O , for each attribute d , let O  X  O , where  X  O and  X  O are the mean and the standard deviation of all the attributes of O , respectiv ely. O 0 normalized object of O .
 The similarit y and distance between data objects O i and O j are de X ned as the Pearson's correlation coe X cien t and Euclidean distance between the transformed objects O 0 i and O , respectiv ely. That is, and Given a data set D , the densit y of an object O is the sum of the in X  X ences from all the objects in the data set except for itself. That is, The attraction between two data objects O i and O j ( O i O ) is de X ned by the in X  X ence function (Equation 1). The attraction is said from O i to O j if density ( O i ) &lt; density ( O denoted as O i ! O j . In the case that two objects are tie in densit y, we can arti X cially assign O i ! O j for ( i &lt; j ). Thus, an object O is attracted by a set of objects A ( O ) whose densit y are larger than that of O , i.e., A ( O ) = f O j j density ( O j ) &gt; density ( O ) g . The attractor of O is the object O j 2 A ( O ) with the largest attraction to O , i.e., According to the in X  X ence function, the attractor of an ob-ject O is its closest neigh bor with a higher densit y. The only exception is object O hd whose densit y is the highest in the data set. We de X ne the attractor of O hd is O hd itself. The attraction from object O i to object O j (i.e., O i ! O forms a partial order. Based on this partial order, we can deriv e an attraction tree T . The root of the tree is O hd object that is the attractor of itself. Each non-ro ot node in the tree corresp onds to an object O , whose paren t node is its attractor. We de X ne the weight of each edge e ( O i ; O the attraction tree T as the similarit y between O i and O The attraction tree has two nice prop erties. On the one hand, an attraction tree is self-close d . That is, a group of objects following the same coheren t pattern forms an attrac-tion subtree. Objects following di X eren t coheren t patterns are not mixed in the same attraction subtree. On the other hand, the attraction tree is robust to noises . The root of each attraction subtree has the locally maximal densit y and represen ts the coheren t pattern in this attraction subtree. Objects closely matc hing the coheren t pattern stay at the high levels of the tree, while noises (or intermediate objects) stay at the low levels of the tree. Even in a data set having a large amoun t of noises or intermediate objects, since the densit y of noises or intermediate objects are relativ ely lower than that of the co-expressed objects, the structure of the high levels of the attraction tree will not be a X ected and the represen tativ es of coheren t patterns will not be deviated by the noises or the intermediate objects. To plot the genes as well as its probabilit y to be a \leader" in a group of co-expressed genes in a 2-dimensional space, we need to order the genes into a list. An ordering, index list , can be devised based on the following three observ ations. 1. In the attraction tree, an edge connecting a pair of 2. An edge has a moderate weight if it connects a pair of 3. The edges connecting a pair of objects O 1 and O 2 fol-Based on the above idea, we develop an algorithm to or-der the genes, as shown in Figure 4. In the algorithm, we main tain an FIFO list, called processedVertex , to record the visiting order of the nodes in the attraction tree T . We start from the root of T . All the edges connecting the root with its children are put into a heap, where the edges are sorted in the weight descending order. Then, we iterativ ely extract the edge with the highest weight from the heap. At this point, the start vertex of the edge must have been processed (Otherwise, the edge could not be put into the heap.) We put the end vertex of the edge currentVertex into the list processedVertex and put all the edges connect-ing currentVertex and its children into the edg eH eap . The loop continues until all of the edges in the tree have been vis-ited. The processedVertex is the index list of the data genes. Supp ose that we check the genes one by one in the order of index list, if we  X nd a consecutiv e subsequence S of genes such that the genes in S are much more coheren t to their paren ts in the attraction tree than the genes in the preceden t subsequence of S do, then it may strongly suggest that S is the starting segmen t of a group of co-expressed genes. Remem ber that in the constructions of attraction tree and index list, co-expressed genes are located in subtrees and thus are arranged as neigh bors in the index list. This is the intuition of the design of coheren t pattern index. The philosoph y here is similar to that in [3].
 Then, the problem becomes how to  X nd those prob es { the short subsequences of genes at the beginning of the groups of co-expressed genes .
 For a gene g i in an index list g 1  X  X  X  g n , let Sim ( g similarit y between g i and its paren t in the attraction tree. Sim ( g i ) = 0 if ( i &lt; 1) or ( i &gt; n ). Let p be the minim um size of prob e as a parameter. We de X ne the coheren t pattern index CP I ( g i ) as follows.
 Intuitiv ely, a high coheren t pattern index value indicates a strong potential that the gene is the starting one of a group of co-expressed genes. The graph plotting the coheren t pat-tern index values with respect to the index list is called the coherent pattern index graph . In particular, from the above de X nition, the  X rst ( p  X  1) genes in the index list always bring the  X rst sharp pulse.
 Figure 5 is the coheren t pattern index graph for Iyer's data set with p = 5. The coheren t pattern index graph indicates the existence of coheren t patterns clearly . Figure 5: The coheren t pattern index graph for the Iyer's data Figure 6: The coheren t pattern index graph for a subset of genes in the Iyer's data set From Figure 5, we can immediately tell that there are 5 major coheren t patterns in the data set. However, can we further investigate the groups of co-expressed genes following the coherent patterns and identify subgroups of co-expressed genes that follow any derivation patterns? Supp ose that a user accepts the 5 major coheren t patterns reported by the system and clicks on the corresp onding peaks in the coheren t pattern index graph. The system will split the attraction tree T for the whole data set into 5 ex-clusiv e attraction subtrees. Each subtree corresp onds to one coheren t pattern and the genes following that coheren t pat-tern are gathered in the subtree.
 If a user now selects the  X rst subset of genes D 1 (as shown in Figure 5) and wants to zoom in D 1 . Figure 6 shows the local coheren t pattern index graph for the selected subset of genes. Please note that Figure 6 is not simply extracted from Figure 5 with a higher resolution. Instead, we collect D 1 from the attraction tree such that only the genes follow-ing the coheren t pattern are selected. Then, the attraction tree, the index list and the coheren t pattern index graph are generated, respectiv ely. Only the genes in the selected subset are considered. The user can specify local parame-ters (e.g.,  X  ) for computing the in X  X ence and densit y in the subset of genes.
 Now, let us discuss how to set the value of  X  . According to the in X  X ence function (Equation 1), a smaller  X  will boost the relativ e in X  X ence of a gene to its neigh borhood. A de-tailed discussion on the e X ect of  X  on the in X  X ence calcula-tion can be found in [20]. We use the standard deviation of the pairwise distance between genes as  X  . When the data set is split into smaller subsets, the standard deviation will decrease. To lower the computational cost, we use a small sample of the data set to appro ximate the standard devia-tion. Figure 7 illustrates the exploration process. At the begin-ning, the coheren t pattern index graph for the whole data set indicates  X ve \major" coheren t expression patterns. Sup-pose that the user accepts the indication and asks the sys-tem to split the data set accordingly . Some subsets show clear coheren t patterns, such as the 2 nd and the 4 th sub-sets in the second row of the  X gure. The others need to be further investigated.
 The system generates the coheren t pattern index graphs for the remaining subsets, respectiv ely (i.e., the 1 st , the 3 the 5 th subsets in the second row of the  X gure). In each of the coheren t pattern index graphs for the subsets, there are multiple signi X can t pulses.
 How should we further split the data set and explore the  X ner patterns? Generally , the highest peak acts as a good signal. The user can ask the system to split the subset according to the highest peak in the graph. If the splitting result is not satisfying, the user can easily \roll back" to the previous level and choose the second highest peak to split the data set. (In our experimen t, we just assume the user chooses the highest peak in each subset and split the data set ac-cordingly .) The hierarc hy extends to the third level. Such an interactiv e exploration can be conducted recursiv ely, un-til the user is satis X ed with the patterns and the groups of co-expressed genes.
 We also compare the coheren t expression patterns disco v-ered by GeneX with the ground truth and the results from some other metho ds. In our experimen t, at each step, GeneX takes the strong pulses to split.
 Let f P 1 ; : : : ; P n g be the set of coheren t expression patterns in the ground truth and f ~ P 1 ; : : : ; ~ P m g be the set of coheren t expression patterns disco vered by one mining metho d. For each pattern P i in the ground truth, we  X nd the most similar pattern ~ P j from the mining results, and call ~ P j match the ground truth pattern P i . In Figure 8, we list the similarit y between the patterns in the ground truth and the matc hing patterns from various metho ds. The ground truth coheren t expression patterns that are matc hed with a similarit y value larger than 0 : 9 are highligh ted in bold. The numbers in the paren thesis in the  X rst row are the numbers of coheren t patterns returned by the metho ds. Please note that not every pattern returned by a method is necessarily a pattern in the ground truth.
 The results show that GeneX disco vers most of the patterns Figure 8: Coheren t patterns disco vered in Iyer's data set by in the ground truth in the Iyer's data set, and outp erforms all other metho ds. In particular, we can observ e the follow-ing. We also test the performance of GeneX on other related aspects, including the e X ect of the prob e size, the scal-abilit y and the coheren t pattern index graph versus the reachabilit y-plots of Opitcs [3] on both other real world gene expression data sets and synthetic data sets. The results re-ported in [22; 23] show that our metho d is insensible to the setting of prob e size, and is scalable w.r.t. the num-ber of genes. The index list is also more e X ectiv e than the reachabilit y-plot by Optics. Limited by space, we omit the details here. Gene expression data sets are often complex in clustering structure. Moreo ver, biology domain knowledge should be integrated into the mining process. Interactiv e exploration of gene expression data may lead to more biologically mean-ingful mining results and substan tially impro ve the inter-pretabilit y of the results. Therefore, we are building GeneX , a gene expression data mining system supp orting interactiv e exploration of coheren t gene expression patterns. GeneX has the following distinct features: As shown in Section 3.4, our system starts with the root node corresp onding to the whole data set. With the explo-ration and visualization tools provided by the system, the users can unfold the hierarc hical structure of coheren t pat-terns inheren t in the gene expression data. Each node on the hierarc hical tree represen ts a coheren t pattern and the corresp onding group of co-expressed genes. To better appre-ciate the local structure of a speci X c node, users can choose alternate plug-ins and adjust parameters repeatedly until a satisfying result is achieved. Given a speci X c subset of genes, i.e. a node on the hieratical tree, our system will generate the coheren t pattern index graph as describ ed in Section 3.2. Each pulse in the graph
Please also see Gene Ontology , http://www.geneon tology .org indicates a potential coheren t pattern existing in the subset. Based on the index graph that demonstrates the clustering structure of the gene subset and users' domain knowledge, the online analytic processing (OLAP) operations can be de- X ned (the theoretical foundation is justi X ed in [29]). GeneX supp orts the exploration operations as follows. The clustering structure of gene expression data is usually complicated. There may be several di X eren t ways to split a speci X c subset of genes. Di X eren t splitting results may cor-respond to di X eren t hypothesis about the gene function and gene regulation. To avoid missing any valuable hypothesis, users may want to try each meaningful split and use their domain knowledge to interpret the splitting results. There exists very rich literature about the functions and regulation mechanisms of genes collected during the past studies. Some genes have been well annotated about the molecular function they perform, the biological process they participate in and the cellular comp onen t where they locate. It would be very helpful to integrate such domain knowledge into the system.
 For example, given a group of co-expressed genes, biolo-gists may postulate the functions of the novel genes in the group based on those well annotated ones in the same group. Moreo ver, the gene panel can also help validate the mining results. If a group of co-expressed genes scatter into diverse functional categories, biologists may further split this group or try other split path.
 To meet this need, we design a gene annotation panel . Given a speci X c node on the hierarc hical tree, the panel will dis-play the name and the annotation (if any) for each gene belonging to the node. The gene annotations can be down-loaded from some public databases, such as the Gene Ontol-ogy Consortium (http://www.geneon tology .org) and MIPS (http://mips.gsf.de).
 The genes in the panel follow the same order as in the in-dex list that we describ ed in Section 3.2. Therefore, the expression pro X le of the  X rst gene in the panel represen ts the coheren t pattern shared by all the genes in the panel. The similarit y measures between the coheren t pattern and the expression pro X le of the individual genes decrease grad-ually along the list. The genes in the front part of the panel have high coherence with the coheren t pattern. Those genes are considered as the co-expressed genes. The genes in the rear part of the panel may have low coherence with the co-heren t pattern. As explained in Section 3.2, those genes are mostly \intermediate genes", which do not belong to any co-expressed gene groups. Users can manually select and remo ve those genes from the panel. In GeneX , we provide the following graphical views to vi-sualize the data set from various aspects and in di X eren t resolutions. The four views above serve as the graphical user interface for the interactiv e exploration. The users not only can have a thorough overview of the clustering structure in the data set, but also can zoom in a view to a speci X c coheren t pattern of particular interest, or even focus on individual genes. The developmen t of microarra y technology provides a great opportunit y for functional genomics. Identifying co-expressed genes and coheren t expression patterns in gene expression data can help biologists understand the molecular functions of the genes and the regulatory network between the genes. However, due to the distinct characteristics of gene expres-sion data and the special requiremen ts from the biology do-main, mining coheren t patterns from gene expression data presen ts several challenges, which cannot be solved by tra-ditional clustering algorithms.
 In this paper, we introduce an interactive exploration sys-tem GeneX for mining coheren t expression patterns from gene expression data. The system consists of three major comp onen ts, the coheren t pattern index graph, the gene an-notation panel and a bunc h of graphical views. Instead of a direct partition of the data set, our system provides users a graphical represen tation of the clustering structure. Users can try splitting the data set in di X eren t ways based on the clustering structure as well as their domain knowledge. In the future, we plan to extend our system in the following two aspects. On the one hand, besides the gene expression data, recen t technological advances have enabled collecting many di X eren t types of data at a genome-wide scale, e.g., protein-protein interactions from the yeast two-hybrid as-say [44] and mass spectrometry [14]. A joint mining from combined data with more than one type of the above data may impro ve the mining results [37; 38]. For example, the complex process of microarra y experimen t typically brings in a large amoun t of errors in the resulted gene expression data. Com bining gene expression data with protein interac-tion data may increase the signal-to-noise ration and achieve more robust results. In our interactiv e system, we provide a coheren t pattern index graph to demonstrate the (local) data structure purely based on the expression pro X les of genes. In the future, we will study whether we can integrate other types of data and make the index graph more robust and biologically meaningful.
 On the other hand, as more and more gene expression data are accum ulated (e.g., 134 data sets in the Stanford Microar-ray Database ), in addition to analyzing genes and conditions within a single microarra y experimen t, it is importan t to an-swer analytical queries about various \summarizations" over gene expression data sets. For example, biologists may ask \ Which genes of yeast are co-expressed both in the Diauxic Shift Sporulation processes and what are the trends in their expression patterns? " Our hierarc hical approac h provides a  X  X xible model to organize the expression patterns in individ-ual data sets. In the future, we will focus on how to store, index and retriev e expression patterns across multiple data sets and supp ort complex analytical queries e X cien tly.
