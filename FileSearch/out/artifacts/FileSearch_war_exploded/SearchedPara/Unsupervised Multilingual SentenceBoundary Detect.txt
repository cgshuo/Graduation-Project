 Ruhr-Universit  X  at Bochum
In this article, we present a language-independent, unsupervised approach to sentence boundary detection. It is based on the assumption that a large number of ambiguities in the determination accuracy using three criteria that only require information about the candidate type itself and are independent of context: Abbreviations can be defined as a very tight collocation consisting two other important subtasks of sentence boundary disambiguation, namely, the detection different languages and on different text genres. It achieves good results without any further amendments or language-specific resources. We evaluate its performance against three different literature. 1. Introduction
The sentence is a fundamental and relatively well understood unit in theoretical and computational linguistics. Many linguistic phenomena X  X uch as collocations, idioms, and variable binding, to name a few X  X re constrained by the abstract concept  X  X entence X  in that they are confined by sentence boundaries. The successful determination of these boundaries is thus a prerequisite for proper sentence processing. Sentence boundary detection is not a trivial task, though. Graphemes often serve more than one purpose in writing systems. The period, which is employed as sentence boundary marker, is no exception. It is also used to mark abbreviations, initials, ordinal numbers, and ellipses.
Moreover, a period can be used to mark an abbreviation and a sentence boundary at the same time. In such cases, the second period is haplologically omitted and only one pe-riod is used as end-of-sentence and abbreviation marker. 1 thus has to be considered as an instance of ambiguity resolution. The ambiguity of the period is illustrated by example (1).
 Example 1
CELLULAR COMMUNICATIONS INC. sold 1,550,000 common shares at $21.75 each yesterday, according to lead underwriter L.F. Rothschild &amp; Co. (cited from Wall Street Journal 05/29/1987) markers or vice versa do not only introduce errors in the determination of sentence boundaries. As has been reported in Walker et al. (2001) and Kiss and Strunk (2002b), segmentation errors propagate into further components, which rely on accurate sen-tence segmentation, and subsequent analyses are affected negatively.
 on language-independent methods and determines sentence boundaries with high accuracy. It does not make use of additional annotations, part-of-speech tagging, or precompiled lists to support sentence boundary detection, but extracts all necessary data from the corpus to be segmented. Also, it does not use orthographic information as primary evidence and is thus suited to processing single-case text. It focuses on languages without any further adjustments. At the same time, the modular structure of the system makes it possible to integrate language-specific methods and clues to further improve its accuracy. The basic algorithm has been determined experimentally on the basis of an unannotated development corpus of English. We have applied the resulting system to further corpora of English text as well as to corpora from ten other languages: Brazilian Portuguese, Dutch, Estonian, French, German, Italian, Nor-wegian, Spanish, Swedish, and Turkish. Without further additions or amendments to the system produced through experimentation on the development corpus, the mean accuracy of sentence boundary detection on newspaper corpora in the eleven languages is 98.74%.
 ations in the text. Quantitatively, abbreviations are a major source of ambiguities in sentence boundary detection since they often constitute up to 30% of the possible candidates for sentence boundaries in running text; see Section 6.1. Abbreviations can be characterized by a set of robust as well as cross-linguistically valid properties. The same cannot be said of the concept  X  X entence boundary X . The end of a sentence cannot easily be characterized as either appearing after a particular word, between two par-ticular words, after a particular word class, or in between two particular word classes.
But, as we will show, an abbreviation can be cross-linguistically characterized in such away.
 and the following period, and hence, that methods for the detection of collocations can be successfully applied to abbreviation detection. Firth (1957, page 181) characterizes the collocations of a word as  X  X tatements of the habitual or customary places of that word. X  In languages that mark abbreviations with a following period, one could say that the abbreviation is habitually made up of a truncated word (or sequence of words) and a following period. But this might even be too weak a formulation. While typical elements of a collocation can also appear together with other words, the abbreviation is strongly tied to the following period. Ideally, in the absence of homography and typing 486 errors, an abbreviation should always end in a final period. abbreviation as a very strict collocation and use standard techniques for the detection of collocations. These techniques will be modified appropriately to account for the stricter tie between an abbreviated word and the following period. It should be clear from the outset that abbreviations cannot simply be handled by listing them because they form a productive and hence open word class; see also M  X  uller, Amerl, and Natalis (1980, pages 52ff.) and Mikheev (2002, page 291). We corroborate this fact with an experiment in Section 6.4.4.
 ties, which only rely on the candidate word type itself and not on the local context in which an instance of the candidate type appears. First, as was already mentioned, an abbreviation looks like a very tight collocation in that the abbreviated word preceding the period and the period itself form a close bond. Second, abbreviations have the tendency to be rather short. This does not mean that we have to assume a fixed upper bound for the length of a possible abbreviation, but that the likelihood of being an abbreviation declines if candidates become longer. Using the length of a candidate as a counterbalance to the collocational bond between candidate and final period allows our method to identify quite long abbreviations, as long as the collocational bond between the candidate type and the period is very strong. As a third characteristic property, we have identified the occurrence of word-internal periods contained in many abbre-viations. While we have determined the aforementioned properties experimentally, we believe that they indeed represent crucial traits of abbreviations.
 a mean accuracy of 99.38% on newspaper corpora in eleven languages. The effectiveness of the three properties is further corroborated by an experiment we have carried out with a log-linear classifier; compare Section 6.4.7. The reported figure does not include initials and ordinal numbers because these subclasses of abbreviations cannot be discov-ered using these characteristics and have to be treated differently. The complete system with special heuristics for initials and ordinal numbers achieves an accuracy of 99.20% for the detection of abbreviations, initials, and ordinal numbers.
 sentence boundaries because all periods occurring after non-abbreviation types can be classified as end-of-sentence markers. Such a disambiguation on the type level, however, is insufficient by itself because it still has to be determined for every period following an abbreviation whether it serves as a sentence boundary marker at the same time. The detection of initials and of ordinal numbers, which are represented by digits followed by a period in several languages, also requires the application of token-based methods because these subclasses of abbreviations are problematic for type-based meth-ods. These observations suggest a two-stage treatment of sentence boundary detection, which is both type and token based. We define a classifier as type based if it uses global evidence, for example, the distribution of a type in a corpus, to classify a type as a whole.
In contrast, a token-based classifier determines a class for each individual token based on its local context.
 types and ordinary word types. After this stage, the corpus receives an intermediate annotation where all instances of abbreviations detected by the first stage are marked abbreviations are assumed to be sentence boundary markers and receive the annotation each individual token. The token-based classifier is particularly suited to determine abbreviations and ellipses at the end of a sentence giving them the final annotation detecting initials and ordinal numbers that cannot easily be recognized with type-based methods and thus often receive the wrong annotation from the first stage. The overall architecture of the present system, which we have baptized Punkt (German for period), is given in Figure 1.
 the heart of the present proposal. Both the type-based and the token-based classifiers employ likelihood ratios to determine collocational bonds between a possible abbrevi-ation and its final period, between the sentence boundary period and a word following 488 it, and between words that surround a period. Section 2 introduces the concept of a likelihood ratio and discusses the specific properties of the likelihood ratios employed by Punkt. Section 3 describes the type-based classification stage, while Section 4 in-troduces the token-based reclassification methods. Section 5 gives a short account of how Punkt was developed and how we determined some necessary parameters. The experiments carried out with the present system are discussed in Section 6. In
Section 7, we compare Punkt to other sentence boundary detection systems proposed in the literature. 2. Likelihood Ratios
Punkt employs likelihood ratios to determine collocational ties in the type-based as well as in the token-based stage. The usefulness of likelihood ratios for collocation detection has been made explicit by Dunning (1993) and has been confirmed by an evaluation of various collocation detection methods carried out by Evert and Krenn (2001). Kiss and Strunk (2002a, 2002b) characterize abbreviations as collocations and use Dunning X  X  log-likelihood ratio (log  X  ) to detect them on the type level. The present proposal differs from Kiss and Strunk X  X  earlier suggestion in employing a highly modified log-likelihood ratio for abbreviation detection in the type-based stage. The reasons for this divergence will be discussed in Section 2.1. In the token-based stage, we employ Dunning X  X  original log  X  , but add an additional constraint to make it one-sided. This version of log  X  will be described in Section 2.2. 2.1 Likelihood Ratios in the Type-based Stage
The log-likelihood ratio by Dunning (1993) tests whether the probability of a word is dependent on the occurrence of the preceding word type. When applied to abbrevi-ations, the following two hypotheses are compared in a Dunning-style log-likelihood ratio.

The null hypothesis in (1) states that the probability of occurrence of a period is not dependent on the preceding word. The alternative hypothesis in (2) assumes a depen-dency between the period and the preceding word. The log-likelihood ratio is calculated using the binomial distribution to estimate the likelihoods of the two hypotheses as in (3). As the probabilities p , p 1 ,and p 2 are determined by maximum-likelihood esti-mation (MLE) and the null hypothesis includes fewer parameters than the alternative hypothesis, the ratio log  X  is asymptotically  X  2 -distributed and can thus be used as a test statistic. alternative hypothesis in (5) differs sharply from the one suggested by Dunning.
The formulation of the alternative hypothesis in (5) reflects that we do not only require that a period occurs together with an abbreviated word more often than expected, but instead that a period almost always occurs after the truncated word. By choosing the value 0.99 instead of 1, we can provide for a certain probability that an abbre-viation type sometimes erroneously occurs without a final period in a corpus. The hypothesis in (5) captures our intuitions about abbreviations better than the original version in (2) because it is no longer sufficient that a word type appears more often than average with a following period to yield a high log-likelihood score. Instead, the likelihood of a period appearing after a type should be almost 1 in order for it to get assigned a high log-likelihood score and thus a high likelihood of being classified as an abbreviation.
 abbreviation detection is no longer asymptotically  X  2 -distributed. However, this is not a disadvantage since the resulting log-likelihood value expresses only one of three crucial properties of abbreviations. Since this value is counterbalanced by other factors and the resulting log-likelihood score thus scaled in various ways, the  X  be retained anyway, as will become clear in Section 3. 2.2 Likelihood Ratios in the Token-based Stage
In the token-based classification stage, Dunning X  X  log-likelihood ratio is used in two of words w 1 and w 2 surrounding a period and tests whether a collocational tie exists between them. A positive answer to this question is used as evidence against an intervening sentence boundary. The frequent sentence starter heuristic, described in
Section 4.1.3, makes use of the results of the type-based classifier and searches for word types that form a collocation with a preceding sentence boundary, that is, which occur particularly often after end-of-sentence periods.
 a pair of word types w 1 and w 2 , the null hypothesis H 0 and the alternative hypothesis H A : P ( w 2 | w 1 ) = p 1 is high if p 1 and p 2 significantly diverge from each other. But in fact, one should only consider those pairs of words as collocations for which p the latter case means that w 2 occurs more often than expected after w less than p 2 this means that w 2 occurs less often after w 490
Sch  X  utze (1999, page 172) comment in their description that  X  X w]e assume that p if Hypothesis 2 [i.e., the alternative hypothesis, TK/JS] is true. The case p and we will ignore it here. X  To us, this step seems to be premature since it ignores that
Dunning X  X  log  X  is a two-tailed test, where the equation in (6) holds. the usual case considered by Dunning (1993) and discussed by Manning and Sch  X  utze (1999), the right-hand side of the equation is larger than the left-hand side. A high log  X  value thus properly expresses the fact that w 1 and w the occurrence of w 2 after w 1 is more likely than expected from the unconditional likelihood of w 2 . If, however, the left side of the equation is greater than the right side, we still get a log  X  value greater than 0, but this time, this indicates that w a collocation.
 can indeed be considered safe, since the types w 1 and w 2
For this reason, we do not expect a large negative deviation, where the right-hand side of equation (6) is significantly smaller than the left-hand side. However, some of the types that we test for collocational ties in the token-based stage occur very often.
The frequent sentence starter heuristic, for example, tests whether a given word w forms a collocation with a preceding sentence boundary w 1 boundary symbol &lt; S &gt; inserted by the type-based first stage of Punkt. The abstract type  X  X entence boundary X  (i.e., &lt; S &gt; ) may be very frequent in many corpora, as can be wit-nessed from a sample from a German newspaper corpus, where C ( &lt; S &gt; ) = 35,775 and N = 847,206.
 they are frequent sentence starters or not. The first two words, ist (the third-person singular form of the verb sein  X  X o be X ) and zu (infinitive marker or preposition  X  X o X ) occur very often, while the latter two words do not occur so often. Neither ist nor zu should be considered frequent sentence starters, while both dennoch ( X  X evertheless X ) and erstens ( X  X irst X ) are true frequent sentence starters. Yet, all four words receive very high log  X  values, since in all cases p 1 diverges significantly from p dennoch and erstens that they occur more often after &lt; S &gt; than expected, while ist and and zu from being detected as collocates of a preceding sentence boundary, we add the constraint in (7) to log  X  calculations for the frequent sentence starter heuristic and similarly apply it to the collocation heuristic. (7) to the log-likelihood ratio used for the purpose of collocation detection. The version of the likelihood ratio that is calculated for the type-based classifier in Section 3 is not affected by this problem since it does not follow a  X  2 distribution and is in fact no longer two-tailed because of the form of the two hypotheses that are compared. 3. Type-based Classification
The type-based classification stage of Punkt employs three characteristic properties of abbreviations: 1. Strong collocational dependency: Abbreviations always occur with a 2. Brevity: Abbreviations tend to be short. 3. Internal periods: Many abbreviations contain additional internal periods.

As these three characteristics do not change for each individual instance of a type, we combine them in a type-based approach to abbreviation detection.
 the revised hypotheses introduced in (4) and (5). The list of all types that ever occur with a following period in the corpus is sorted according to this likelihood ratio. The resulting value for a type expresses the assumption that this type is more likely to be an abbreviation than all types having lower values.
 abbreviations are indicated in italics. The figures of occurrence in Table 2, which are drawn from an actual corpus sample comprising 351,529 tokens of Wall Street Journal text, also illustrate a potential problem, namely, that most of the candidate types are quite rare. As has been pointed out by Dunning (1993), the calculation of log  X  assumes a binomial distribution. It is therefore better suited to deal with sparse data than statistics that are based on a normal distribution, such as the t test. This consideration carries over to the modified log-likelihood ratio employed here.
 abbreviations or receive the same log-likelihood value as non-abbreviations. According to the criterion of strong collocational dependency, ounces is a very good candidate for an abbreviation, as it never occurs without a final period in the corpus. The collocational criterion alone is thus not sufficient to detect abbreviations with high precision. longer than the longest abbreviation. We therefore use brevity as a further characteristic 492 property to counterbalance the likelihood ratio. In contrast to other proposals such as the one by Mikheev (2002, page 299), we refrain from using a fixed maximum length for abbreviations. Instead, we multiply the likelihood ratio for each candidate with an inversely exponential scaling factor derived from the length of that candidate. The length of the candidate is defined as the number of characters in front of the final period minus the number of internal periods, as illustrated in example (8).
We exclude internal periods from the count because they are good evidence that a candidate should be classified as an abbreviation (see below). We thus prevent a coun-terintuitive, higher penalty for candidates with internal periods. The exact form of the length factor is given in (9).

We have chosen an inversely exponential scaling factor since it reflects well the likeli-hood that a type of a certain length is an abbreviation. Typically, short types are more likely to be abbreviations than longer types. The validity of this assumption can be witnessed from Figure 2. It shows that the ratio of the number of abbreviation types to the number of non-abbreviation types decreases with growing length in a Dutch newspaper corpus. While about 96% of all types of length one are abbreviations, this percentage drops rapidly to 59% for types of length two and to 15% for types of length three and so on.
 periods, we use another scaling factor F periods as given in (10). This factor expresses the intuition that a higher number of internal periods increases the likelihood that a type is a true abbreviation. The scaling factor has been designed to leave unchanged the values of candidates that do not contain internal periods, while those candidates that contain internal periods receive an extra advantage.

Multiplying the log-likelihood ratio with these two scaling factors leads to a signifi-cantly better sorting of the candidate list.
 an abbreviation just because it has occurred without a final period once or twice in the corpus if there is otherwise good evidence that it is a true abbreviation. For most lan-guages, this increased robustness is unproblematic because almost all ordinary words occur without a period a sufficient number of times. However, for some languages, the scaled log-likelihood ratio is not restrictive enough. Verb-final languages, such as
Turkish, where certain very common verbs appear at the end of a sentence most of the time, are one example. In such a case, the scaled log-likelihood ratio described so far runs into difficulties because it mistakes the occurrences of these verbs without a period as exceptions. To remedy this problem, the calculated log  X  values are multiplied by a third factor, which penalizes occurrences without a final period exponentially:
It should be noted that we use the length of the candidate as a basis for the calcula-tion because the likelihood of existence of homographic non-abbreviations for a given 494 abbreviation type is dependent on the length of the candidate. Homographic non-abbreviations occur particularly often with abbreviations of length 1, and accordingly, there will be no penalty at all. With a length of 2, the penalty factor is still moderate, but increases with length to reflect that longer abbreviations are not very likely to have homographic non-abbreviations. Furthermore, the penalty factor is exponentially scaled. Hence, it will mostly affect candidate types with a high number of occurrences without a final period. A candidate type that occurs six times in all and one time without a final period is much less affected by (11) than a candidate that occurs 600 times in all and 100 times without a final period. This reflects our intuition that homographic non-abbreviations and typing errors can always occur, but that a high number of instances without a final period requires a strong penalty.
 ratio (cf. Section 2.1), we propose a new threshold value. All candidates above it will be considered abbreviations; all candidates below it will be classified as ordinary words. We use the classification function defined in (12) with a threshold value of 0.3 X  represented by a dashed line in Table 2. We have determined the threshold value by manual experimentation (cf. Section 5) and have used it throughout the evaluation in Section 6.
 For each candidate word type w :
The last two columns of Table 2 show the final sorting of the candidates after applying the three scaling factors to the log-likelihood value for each candidate. Multiplication with the three factors has led to a much cleaner separation of the true abbreviation types from the non-abbreviations. 4. Token-based Classification
The second classification stage of Punkt operates on the token level and improves the intermediate annotation of the corpus provided by the type-based classification stage.
For every token with a final period, the system decides on the basis of its immediate right context whether the intermediate annotation has to be modified or corrected.
For this classification step, the relevant tokens are separated into different classes (cf. Figure 1). Each class triggers a reexamination with a different combination of a few basic heuristics. The most important classes are ordinary abbreviations and ellipses, which may appear at the end of a sentence. Moreover, there are two special classes of abbreviations, which are problematic for a type-based approach, namely, possible initials and possible ordinal numbers.
 orthographic heuristic, whose task is to test for orthographic clues for the detection of sentence boundaries after abbreviations and ellipses; the collocation heuristic, which determines whether two words surrounding a period form a collocation and interprets a positive answer to this question as evidence against an intervening sentence boundary; and finally the frequent sentence starter heuristic, which suggests a preceding sentence boundary if a word appearing after a period is found on a list of frequent sentence starters induced on the fly from the text that is to be segmented. 4.1 Heuristics in the Token-based Stage 4.1.1 The Orthographic Heuristic. At first sight, it might seem reasonable to rely on orthographic conventions for the detection of sentence boundaries. For instance, a capitalized word usually indicates a preceding sentence boundary in mixed-case text.
However, such a procedure is perilous for various reasons. To begin with, certain word classes are capitalized even if they occur sentence-internally as is the case with the majority of proper nouns in English and all nouns in German. Even a lowercase first letter does not guarantee that the word in question is not preceded by a sentence boundary. This is particularly evident for mathematical variables or names that are conventionally written without capitalization such as amnesty international ;seealso
Nunberg (1990, pages 54ff.). Finally, any method that relies solely on capitalization will not help at all with single-case text.
 determine whether an abbreviation or ellipsis precedes a sentence boundary or not; see Section 6.4.5 for a discussion of the importance of orthographic information in comparison to other types of evidence. In order to make the usage of orthographic information safer and more robust, Punkt counts how often every word type occurs with an uppercase and lowercase first letter at the beginning of a sentence and sentence-internally in the corpus; see Table 3 for some example statistics. It bases its calculations on the sentence boundaries determined by the type-based classification stage. It does not count tokens occurring after an abbreviation or an ellipsis because we have not yet determined whether they start a new sentence or not. The algorithm also ignores tokens that occur after possible initials and numbers. Again, a reclassification is likely to happen; see Section 4.3. In sum, as the counts are based on imperfectly annotated data, we try to exclude most doubtful cases.
 cides for a token following an abbreviation or an ellipsis on the basis of the orthographic statistics gathered for all word types whether it represents good evidence for a preced-ing sentence boundary or not.
 mines whether it occurs with a lowercase first letter in the text and whether it occurs with an uppercase first letter sentence-internally. Only if it occurs with a lowercase first letter at least once and never occurs with an uppercase first letter sentence-internally, the heuristic opts for a sentence boundary after the abbreviation or ellipsis. Otherwise, it returns undecided .
 496 heuristic decides against a sentence boundary if that type also occurs with an uppercase first letter or if it never occurs with a lowercase first letter after a sentence boundary. In all other cases, the heuristic returns undecided .
 the heuristic would return undecided given the data in Table 3, because the type a occurs capitalized both at the beginning of and inside a sentence. If the input is the lowercase token a , it would return no sentence boundary . For the proper name Smith ,theresult would be undecided since the name never occurs with a lowercase first letter at all. For the input tokens Across , Actual ,and Psychologists , the heuristic would decide in favor of a sentence boundary . If the same tokens were not capitalized, the decision would be no sentence boundary .
 would always return undecided . If all tokens in the corpus begin with a lowercase letter, it would either return undecided or no sentence boundary , which we think is the safest option since in this case, the heuristic cannot adduce any additional token-based evidence and most sentence boundaries have already been discovered by the type-based stage. The option to refuse a decision on the basis of capitalization information thus makes the orthographic heuristic very robust. 4.1.2 The Collocation Heuristic. The basic intuition behind the collocation heuristic is that sentence boundaries block collocational ties; compare, for example, Manning and
Sch  X  utze (1999, page 195). If a period is surrounded by two words that form a collocation, we do not expect it to act as a sentence boundary marker. A period should therefore be interpreted as an abbreviation marker and not as a sentence boundary marker if the two tokens surrounding it can indeed be considered as a collocation according to
Dunning X  X  (1993) original log-likelihood ratio amended with the one-sidedness con-straint introduced in Section 2.2. Following the asymptotic  X  original proposal, we require a log  X  value of at least 7.88, which represents a confidence of 99.5%. If this condition is met, we assume that the two words surrounding the potential sentence boundary form a collocation and hence represent evidence against an intervening sentence boundary. 4.1.3 The Frequent Sentence Starter Heuristic. We also employ Dunning X  X  log  X  as an unsupervised method for the extraction of frequent sentence starters, that is, word types that occur particularly often after a sentence boundary. We take the viewpoint of collocation detection and define a frequent sentence starter as a word type that has a strong collocational tie to a preceding sentence boundary. The occurrence of such a frequent sentence starter after a period can thus be used to adduce further evidence that the preceding period marks a sentence boundary.
 sentence starters from an additional corpus but use the test corpus itself. The basic idea is to build a list of frequent sentence starters on the fly by counting how often every word type occurs following a sure sentence boundary, as determined by the type-based first stage. Sure sentence boundaries are all single periods following words that have been classified as non-abbreviations and are not possibly initials or numbers, that is, single letters or a sequence of one or more digits. Once the problem has been formulated as a problem of collocation detection, we can use the amended version of Dunning X  X  log  X  , as described in Section 2.2, to test the candidate word types for a collocational tie to a preceding sentence boundary. Since we are relying on uncertain information, namely, the intermediate annotation, we assume an exceptionally high threshold value candidate on the list of frequent sentence starters. The high cutoff value has been determined experimentally during the development of Punkt (cf. Section 5).
 and the collocation heuristic described in the preceding section in that the frequent sentence starter heuristic may help to counterbalance the collocation heuristic. Some-times, the collocation heuristic will detect a collocation across a sentence boundary, particularly if the word preceding the boundary occurs quite often at the end of a sentence and the word following the sentence boundary is a frequent sentence starter.
By determining the frequent sentence starters in the corpus and preventing the detection of collocations with these types as second elements, collocation detection is made safer. 4.2 Token-based Reclassification of Abbreviations and Ellipses
The main question for all tokens classified as abbreviations by the type-based first stage and all ellipses is whether they precede a sentence boundary or not. A sentence bound-ary after these two classes of candidate tokens is assumed by Punkt if the orthographic heuristic applied to the token following the abbreviation or ellipsis decides in favor of a sentence boundary, or the token following the abbreviation or ellipsis is a capitalized fre-quent sentence starter. However, only abbreviations that are longer than one letter and thus not possibly initials are reclassified in this way. Initials present special problems and are therefore reclassified differently, as will be discussed in the following section. 4.3 Token-based Detection of Initials and Ordinal Numbers
Initials are a subclass of abbreviations consisting of a single letter followed by a period.
As there are only about thirty different letters in the average Latin-derived alphabet, the 498 likelihood of being a homograph of an ordinary word is very high for initials; consider, for example, the Portuguese definite articles o and a or the Swedish preposition i ( X  X n X ).
Moreover, there are also various other uses for single letters: in formulas, enumerations, and so on. Initials are therefore often not detected by the type-based first stage of the Punkt system. For this reason, all single letters followed by a token-final period are treated as possible initials during the token-based reclassification X  X egardless of whether they have been classified as abbreviations or not by the type-based stage. using collocational evidence. If a possible initial forms a collocation with the following token and the following token is not a frequent sentence starter, the period in between is reclassified as an abbreviation marker. Alternatively, if the orthographic heuristic decides against a sentence boundary on the basis of the token following the possible initial, the period is also reclassified as an abbreviation period. Last but not least, we employ a special heuristic for initials: If the orthographic heuristic returns undecided and the type following the possible initial always occurs with an uppercase first letter, it is assumed to be a proper name and the period between the two tokens is again classified as an abbreviation marker. The system never reclassifies a period following a possible initial as a sentence boundary marker because we assume that if a single letter is indeed not used as an abbreviation but, for example, as a mathematical symbol or if it is an ordinary word, there will usually be enough occurrences of this type without a final period so that the type-based stage will classify all periods following instances of the type in question as sentence boundary periods.
 marked by a token-final period; compare example (2).
 Example 2 Was sind die Konsequenzen der Abstimmung vom 12. Juni?
What are the consequences of the poll of the 12 th of June? (cited from NZZ 06/13/1994)
As every numeric type can also be used as a cardinal number, it cannot be decided by a type-based algorithm whether a period after a number is an abbreviation marker or a sentence boundary marker. Numbers are therefore treated in the same way as initials. If the token following a number with a final period forms a collocation with the abstract type ##number## 7 and is not a frequent sentence starter, the period in between is classified as an abbreviation period. The same conclusion is reached if the orthographic heuristic decides against a sentence boundary on the basis of the following token. 5. Development of the Punkt System
The three scaling factors used to improve on the initial sorting by the collocational criterion for abbreviation detection were obtained by manual experiments on a 10 MB development corpus of American English containing Wall Street Journal ( WSJ ) articles. This corpus is distinct from the portions of the WSJ we use for evaluation purposes in
Section 6. From this development corpus, a candidate list of possible abbreviation types was extracted and sorted according to the log-likelihood ratio described in Section 2.1.
We experimented with different factors and measured their impact in terms of precision and recall on the candidates above a given threshold value. Our goal was to maximize precision and recall for the top part of the list, that is, to get a clear separation of true
The factors F length (9) and F periods (10) were conceived and tested solely on the basis of the WSJ development corpus. We have added the third factor F the problem of very common ordinary words that precede a sentence boundary most of the time. We encountered this problem in the Turkish test corpus, but it would probably arise for other verb-final languages as well. After fixing the final form of the scaling factors, we also used the candidate list from the development corpus to determine the ideal threshold value for type-based abbreviation detection by manual inspection. The best combination of the different methods in the token-based stage and the threshold value 30 used for finding frequent sentence starters were also determined by manual experimentation on the development corpus. The same parameters and combinations of heuristics have been employed in all tests described in Section 6 unless otherwise noted. 6. Evaluation
We have tested our system extensively for a number of different languages and under different circumstances. We report the results that we obtained from our experiments in
Section 6.4, after giving a short characterization of the test corpora on which we did our evaluation in Section 6.1, defining the performance measures we use in Section 6.2 and proposing three baselines as lower bounds and standards of comparison in Section 6.3.
We compare our approach to other systems for sentence boundary detection proposed in the literature in Section 7. 6.1 Test Corpora We have evaluated Punkt on corpora from eleven different languages: Brazilian Portuguese, Dutch, English, Estonian, French, German, Italian, Norwegian, Spanish,
Swedish, and Turkish. For all of these languages, we have created test corpora con-taining newspaper text, the genre that is most often used to test sentence boundary detection systems; compare Section 7. Table 4 provides a short description for each one of these newspaper corpora. Five of them X  X utch, French, Italian, Spanish, and
Swedish X  X re parts of corpora taken from the CD-ROM Multilingual Corpus 1 dis-tributed by the European Corpus Initiative (ECI). For English, we have used sections 03-06 of the WSJ portion of the Penn Treebank (Marcus, Santorini, and Marcinkiewicz 1993) distributed by the Linguistic Data Consortium (LDC), which have frequently been used to evaluate sentence boundary detection systems before; compare Section 7. For the other languages, we have chosen newspaper corpora that were either available on the Internet (Brazilian Portuguese), distributed by the newspaper itself (German), or kindly provided to us by other research institutions (Estonian, Norwegian, and Turk-ish). While the Swedish corpus contains a small amount of literary fiction in addition to newspaper articles from several Swedish newspapers, the other corpora consist solely of newswire text.
 additionally evaluated it on a piece of American English literature (compare Table 5) obtained from Project Gutenberg (www.gutenberg.org). Last but not least, we have 500 also tested it on the Brown corpus of American English (Francis and Kucera 1982), which has often been used to evaluate other sentence boundary detection systems.
This corpus contains a mixture of text genres including news, scientific articles, and literary fiction.
 all periods were disambiguated by hand and labeled with the correct tag from Table 6.
Table 7 illustrates some statistical properties of the test corpora. For each corpus, we provide the number of tokens it contains and the number of all tokens with a final period, that is, all periods that had to be classified by Punkt. As an indication of the difficulty of the sentence boundary detection task, we also give information on how many abbreviations each corpus contains and what percentage of all the tokens with a final period actually are abbreviations. Finally, the last column shows the number of different abbreviation types occurring in each test corpus.
 &lt; S &gt; Sentence boundary &lt; A &gt; Abbreviation &lt; E &gt; Ellipsis &lt; A &gt;&lt; S &gt; Abbreviation at the end of sentence &lt; E &gt;&lt; S &gt; Ellipsis at the end of sentence 6.2 Performance Measures
The most important measure we use is the error rate given in (13). It is defined as the ratio of the number of incorrectly classified candidates to the number of all candidates.
In addition, we use precision and recall to provide better information on what kinds of errors were made by Punkt. Precision is the ratio between the number of candidate tokens that have been correctly assigned to a class and the number of all candidates that have been assigned to this class.
Recall is defined as the proportion of all candidates truly belonging to a certain class that have also been assigned to that class by the evaluated system. Finally, the so-called F measure is the harmonic mean of precision and recall (van Rijsbergen 1979).
 502
All the measures we use are based on counting true and false positives and true and false negatives. There are, however, three possibilities of what classifications could be regarded as a positive or a negative outcome because Punkt actually performs three classification tasks at the same time. The most important one is the decision whether a token-final period marks a sentence boundary or not. But the system also decides for each candidate token ending in a period whether it is an abbreviation or not and whether it is an ellipsis or not; compare Table 6. The performance measures for sen-tence boundary detection, abbreviation detection, and ellipsis detection do not directly depend on each other because a candidate can be an abbreviation (or an ellipsis) and precede a sentence boundary at the same time. We thus calculate error rate, precision, recall, and F measure for the sentence boundary detection problem and for the ab-breviation detection problem separately. For sentence boundary detection, we count &lt; A &gt;&lt; S &gt; are considered positives for the abbreviation detection task. As the correct classification of ellipses is straightforward, we do not give figures for the detection of ellipses. 6.3 Baselines In Sections 6.4.1 and 6.4.2, we evaluate Punkt against three different baseline algorithms.
These baselines serve several purposes. First, they establish a lower bound for the task of sentence boundary detection. Any sentence boundary detection system should perform significantly better than these baseline algorithms. Second, although we compare Punkt to other systems proposed in the literature in Section 7, most previous work on sentence boundary detection considered at most three different languages so that no direct comparison is possible for many of the corpora and languages that we have used in our evaluation. A comparison with the performance of the three baselines can at least give an indication of how well our system did on these corpora. Third, there is still an assumption held in the field that simple algorithms such as the baselines presented here are sufficiently reliable to be used for sentence boundary detection. This opinion was, for example, held by a reviewer of Kiss and Strunk (2002a). As will become clear in the following sections, a baseline algorithm may perform pretty well on one corpus, but this performance typically does not carry over to other languages or corpora. The baselines thus also serve to illustrate the complexity of the sentence boundary detection problem. tection we can think of. It simply assumes that all token-final periods in a test corpus represent sentence boundaries. Consequently, all periods are tagged with &lt; S &gt; . is a token-based approach that uses only orthographic information. All token-final pe-riods (including those that form part of an ellipsis) that do not precede a token starting with a lowercase letter, a digit, or one of the following sentence internal punctuation marks [; : ,] are classified as sentence boundary markers and annotated with &lt; S &gt; .All
Grefenstette (1999) and also by Mikheev (2002, page 299). It is a type-based approach that decides for each candidate type whether it is an abbreviation or not. All instances of candidates that ever occur in an unambiguous position, that is, before a lowercase letter or a sentence-internal punctuation mark [; : ,] are classified as abbreviations, and a period following them is not considered as an end-of-sentence marker. All other candidate types are treated as ordinary words and a period following them is classified as a sentence boundary marker. No sentence boundary is assumed after ellipses. 6.4 Experiments
We have tested Punkt on the various corpora introduced in Section 6.1. In all cases, it was only provided with the unannotated test corpus as input and no further data whatsoever, most importantly, no lexicon and no list of abbreviations. Its main classifi-cation task was to decide for all token-final periods whether they indicated the end of a sentence or not. 8 In addition, it had to decide for all token-final periods whether they were used as an abbreviation marker or were part of an ellipsis.

Those obtained for the remaining corpora are given in Section 6.4.2. In Section 6.4.3, we provide the results of an experiment in which we evaluated our system on all-uppercase and all-lowercase corpora. As many competing systems require a list of abbreviations, we have carried out an experiment to determine the usefulness of abbreviation lists derived from general-purpose dictionaries. The results are reported in Section 6.4.4. by examining the contributions of its individual parts, look at remaining errors and problems in Section 6.4.6, and discuss the hypothesis that the methods and heuristics we use can be called language independent in Section 6.4.7. 6.4.1 Results on the Newspaper Corpora. Table 8 shows the results that we obtained for the tasks of sentence boundary detection and abbreviation detection on the eleven newspaper corpora. We performed two test runs for each language: one with detection 504 of ordinal numbers and one without a special treatment of numbers. For languages such as English, which do not usually mark ordinal numbers with a final period, it is obviously preferable not to try to detect them. In Table 8, we only report the best result from the two test runs for each language. 9 Those languages in which the period is not usually used to mark ordinal numbers and for which the test without special treatment of numbers achieved better results are italicized in the following tables. How-ever, even if the special treatment of numbers was not turned off for such languages, the resulting increase in the error rate was not very high, maximally 0.03%; see also Section 6.4.5.
 eleven newspaper corpora range from 2.12% on the Estonian corpus to only 0.35% on the German corpus with an average error rate of 1.26%. The error rates for abbreviation detection are slightly lower, lying between 1.75% on the Estonian corpus and 0.26% on the German corpus with an average of 0.80% for all eleven corpora.
 error rates achieved by Punkt for the sentence boundary task are reduced by about 83% on average compared to the absolute baseline, by about 73% compared to the token-based baseline, and by almost 80% compared to the type-based baseline. The error rates for the abbreviation detection task have decreased even more considerably, namely, by approximately 89% in comparison to the absolute baseline, by about 83% in comparison to the token-based baseline, and by almost 86% in comparison to the type-based baseline. Table 9 also shows that whereas the good performance of our system is quite stable across the eleven corpora with a standard deviation of only 0.49% for sentence boundary detection and 0.46% for abbreviation detection, the performance of the baselines is not reliable at all. Although one of the baselines sometimes performed well on one corpus X  X uch as TokBL on the Swedish corpus, the only case where Punkt was not better than all of the baselines, or TypeBL on the Brazilian Portuguese and
Dutch corpora, the baselines exhibit a very large standard deviation in their error rates across the eleven corpora and sometimes seem to fail completely, such as TokBL on the
English corpus and TypeBL on the Turkish corpus. 6.4.2 Results on the Other Corpora. In order to show that Punkt is also suited to process text genres different from newspaper text and that its performance carries over to other text types, we have tested it on two additional corpora of American English X  X he entire
Brown corpus and The Works of Edgar Allan Poe (volumes I X  X II). Table 10 provides the results Punkt achieved on the two additional corpora.
 task and 0.82% for the abbreviation detection task. This represents a reduction of about 90% compared to the absolute baseline, a reduction of more than 85% compared to the token-based baseline, and a reduction of more than 70% compared to the type-based baseline; see Table 11. The error rate on The Works of Edgar Allan Poe is 0.80% for sentence boundary detection and 0.46% for abbreviation detection, which corresponds to a reduction of about 85% in comparison to AbsBL, a reduction by more than 80% compared to TokBL, and by about 75% compared to TypeBL. These results achieved on the literary Poe corpus and the Brown corpus with its balanced content fall within the range of the error rates achieved on the newspaper corpora and thus indicate that Punkt is also well suited to deal with literary texts and corpora containing mixed content. 6.4.3 Experiments with Single-case Corpora. We have also tested the applicability of Punkt to single-case text. The newspaper test corpora have been converted to all-uppercase and all-lowercase versions in order to determine how much Punkt is affected by the loss of capitalization information. In fact, one should keep in mind 506 that single-case text does not only lack useful capitalization information, but actually contains information that is highly misleading for systems that rely primarily on cap-italization. Table 12 shows the performance of our system on the single-case corpora.
The left half of the table contains the error rates and F values for sentence boundary detection and abbreviation detection on the lowercase corpora. The right half gives the corresponding values for the tests on the uppercase corpora. The last two rows of the table compare these results with those Punkt achieved on the mixed-case (MC) versions of the newspaper corpora; compare Section 6.4.1. As can be seen in Table 12, the performance of our system is only minimally affected by the loss of capitalization information, slightly more so on the all-lowercase corpora. The error rate our system produces for the task of sentence boundary detection is 0.41% higher on average on the lowercase corpora than on the mixed-case corpora. The increase in the error rate on the uppercase corpora is slightly lower: 0.29%. For the task of abbreviation detection, the increase in the error rates is even lower: 0.14% on the lowercase corpora and 0.13% on the uppercase corpora. This is expected because Punkt only uses capitalization information as evidence during the token-based correction and reclassification stage and not as primary evidence for the detection of abbreviations. The experiments on the single-case corpora show that Punkt is quite robust and well suited also to process single-case text. 6.4.4 Experiments with Additional Abbreviation Lists. Punkt is able to dynamically detect abbreviations in the test corpus itself. It therefore does not depend on precom-piled abbreviation lists like some of its competitors; compare Section 7. But even though an abbreviation list is not necessary for Punkt to perform well, such a list can simply added to those the system has detected in the test corpus after the type-based stage. Ideally, one would use a domain-specific abbreviation list if the domain of the test corpus is known beforehand. However, we wanted to determine the usefulness of general-purpose abbreviation lists derived from general-purpose dictionaries. We have therefore built such abbreviation lists by extracting by hand all abbreviations from a German spelling dictionary X  X he Rechtschreibduden (Dudenredaktion 2004) X  and all English abbreviations from a bilingual dictionary X  X he small Muret-Sanders
English-German dictionary by Langenscheidt (Willmann and Messinger 1996). This yielded a total number of 769 abbreviations for German and 1,537 for English; compare Table 13.
 tentially harmful entries: one from which we removed all abbreviations that had ob-vious non-abbreviation homographs, one from which we removed all single-character abbreviations, and one from which we removed both. Table 13 gives the number of remaining abbreviations for these different versions. We produced these additional versions to test how much care is needed when preparing abbreviation lists for a system like Punkt.
 corpora and the Brown corpus. In the first experiment, we tested how well Punkt performed when it was provided with the different abbreviation lists in addition to the abbreviations it was able to detect on the fly; see Table 14 for the results. lists, but only if these are prepared with care. Providing such a carefully prepared 508 abbreviation list reduced the error rate of our system on the WSJ corpus from 1.65% to 1.58%, the error rate on the Brown corpus from 1.02% to 0.92%, and the error rate on the German NZZ corpus from 0.35% to 0.32%. Additional general-purpose abbreviation lists thus do improve the performance of our system, but the decrease of the error rate is not very great. Table 14 also shows that abbreviation lists from which abbreviations homographic to ordinary words and single-character abbreviations have not been re-moved are not helpful at all and instead lead to an increased error rate on all of the three corpora.
 lists and was not allowed to add any additional abbreviations on the fly. This experi-ment thus really tests the coverage of general-purpose abbreviation lists and also the productivity of abbreviation use in the test corpora. Table 15 contains the results from this experiment. The column On the fly gives the error rates that Punkt achieved in its normal configuration detecting abbreviations on the fly without being provided with an additional abbreviation list. The remaining columns show the results it produced when it could use a fixed list of abbreviations only. A comparison between the first column and the other columns makes clear that abbreviation use in the corpora is quite productive and that fixed general-purpose abbreviation lists are clearly not sufficient for sentence boundary detection. A versatile sentence boundary detection system should therefore always be able to detect unknown abbreviations on the fly. 6.4.5 Contributions of the Individual Parts of the System. In this section, we take a look at the contributions of the individual parts of the system to its overall performance.
First, we tried to determine the effectiveness of reclassifying the different candidate classes in the token-based stage separately using specific combinations of evidence, namely, ordinary abbreviations, ellipses, initials, and numbers. We therefore built four different versions of our system, which are described in Table 16. The different config-urations become cumulatively more specialized in their treatment of the different can-didate classes from System 1 with no token-based reclassification at all to the complete System 4.
 eleven newspaper corpora. It shows that the cumulatively more specialized treatment of the different candidate classes helps to improve on the error rate of the type-based stage considerably. Moreover, a separate reclassification of initials and numbers is quite effective for reducing the error rate on the newspaper corpora, often even more so than the detection of sentence boundaries after abbreviations and ellipses. The separate treatment of initials is quite beneficial for the English corpus, for example, reducing the error rate from 2.06% to 1.65% (System 2 vs. System 3), but also for Dutch, French,
Italian, Norwegian and Spanish, while the detection of ordinal numbers is a very important factor for the German newspaper corpus, reducing the error rate from 2.25% to only 0.35% (System 3 vs. System 4), and also for the Estonian, Norwegian, and Turkish corpora. For all languages that use the period to mark ordinal numbers, the detection of ordinal numbers thus turns out to be a very important subtask of sentence boundary disambiguation. A comparison between System 3 and System 4 also shows that leaving the detection of ordinal numbers on for languages that do not mark them with a final period is not really harmful, resulting in a maximal increase in the error rate of 0.03%. used during the token-based stage. Table 18 provides information on the five different configurations we have evaluated. We have again added heuristics cumulatively: first, the collocation heuristic; next the frequent sentence starter heuristic; then the ortho-graphic heuristic; and finally, the special orthographic heuristic for initials. 510 paper corpora. It confirms that all heuristics contribute to the performance of the system, though to different degrees depending on the specific corpus. It also shows that the collocation heuristic is very effective in reducing the error rate on the different corpora, more effective in fact than the orthographic heuristic. This fact supports our argument that the importance of brittle orthographic evidence can be reduced and sentence boundary detection can be made more robust by relying more on collocational evidence. The collocation heuristic reduces the error rate from 7.37% to 2.94% on the Estonian corpus, for example, and is also very effective for German, Norwegian, and
Spanish. The impact of the frequent sentence starter heuristic is somewhat smaller,
French and to smaller reductions for all other languages. Although Punkt does not rely so much on capitalization, the orthographic heuristic still reduces the error rate from 2.80% to 2.18% for Estonian, for example, and leads to smaller improvements for the other languages except for English, where it causes a small increase in the error rate.
As most combinations of initials and a following proper name are already captured by the collocation heuristic, the special orthographic heuristic for initials is only applied to complex names that occur infrequently and thus does not result in a large reduction of the error rate. Still, it never has a negative effect and is able to reduce the error rate from 1.84% to 1.65% on the English corpus and from 1.78% to 1.54% on the French corpus.
We conclude that our heuristics are well motivated in that they decrease the error rates on the newspaper corpora substantially and never have any severe detrimental effect. Moreover, as Section 6.4.3 shows, they work effectively even for single-case corpora. 6.4.6 Remaining Errors and Problematic Cases. The preceding sections have shown that Punkt X  X  type-based abbreviation detection stage by itself is already quite effective and that the token-based heuristics are successful at further reducing the error rates on the test corpora. However, there remain some problematic cases, which Punkt currently is not able to deal with well and which we have to leave for further work. The problems that resulted in errors on the test corpora can be grouped into a few major types: (1) homography, (2) inconsistent use of abbreviations, (3) data sparseness, (4) insufficient or contradicting orthographic evidence, and (5) problems with text structure. breviation detection. Abbreviations may not be recognized as such and wrong sen-tence boundaries may be introduced if an abbreviation is a homograph of an ordinary word or an acronym because the type-based abbreviation detection stage is not able to distinguish between homographic types. For example, the English abbreviation in. for inch might not be recognized because it coincides with the frequent preposition in .All occurrences of in with and without a final period will be added together and the type in will most probably be classified as a non-abbreviation. All instances of in followed by a period will then be marked as ordinary words preceding a sentence boundary. This type of error was common in the English, Italian, and Portuguese test corpora. lem. Sometimes, (certain) abbreviations are not obligatorily marked with a final period.
For example, abbreviations for physical units such as m for meter or kg for kilogram are sometimes marked with a final period and sometimes not. If both usages occur within the same test corpus, Punkt may classify such a type as a non-abbreviation, which may lead to incorrectly introduced sentence boundaries if the final period of some instances of this type serves as abbreviation marker only. This problem was important for the
Swedish test corpus, where many frequent abbreviation types, such as osv.  X  X nd so on X , were sometimes used with a final period and sometimes without one.
 abbreviation type, especially a long one, occurs only very infrequently, there is simply not enough collocational evidence to recognize it as an abbreviation. Similarly, if an infrequent ordinary word by chance always occurs in front of a period, it might be mistaken for an abbreviation. This type of error occurred frequently in the Norwegian and Spanish corpora, in which quite a few long and rare abbreviations were used. The issue of data sparseness can also have an impact on the collocational and orthographic heuristics in the token-based stage.
 token following the period belongs to a type that does not provide good orthographic evidence for assuming a preceding sentence boundary. This is the case if the type is uppercase first letter within a sentence. If the type is rare it may also occur only at the beginning of a sentence by chance and will thus only be encountered in capitalized form. This lack of orthographic evidence had a detrimental effect on the recognition of abbreviations at the end of a sentence in the English corpus and on the detection of sentence boundaries after ellipses, for example, in the French corpus. 512 example, headlines are usually not terminated with a period. If an abbreviation is the last word in a headline, Punkt often tags it with &lt; A &gt;&lt; S &gt; because the following token starts a new sentence and may provide good evidence for a preceding sentence boundary. However, a human annotator will probably consider the period following the abbreviation as an abbreviation marker only and not as a sentence boundary period in analogy to other headlines. Another problem relating to text structure is the question of whether an ordinal number in an enumerated list belongs to the same sentence as the list item itself or whether there is a sentence boundary between them. List items often begin with a capitalized word; compare, for example, the enumeration in Section 3. Punkt therefore mostly assumes that there is a sentence boundary between the number and the list item. Our human annotators, however, have considered the ordinal number to be part of the following sentence. These problems suggest that the automatic recognition of text structure could be quite beneficial for sentence boundary detection. 6.4.7 Language Independence and Optional Recalibration. Punkt is conceived as a language and domain-independent corpus preprocessing tool that can be used out of the box for all languages that use an alphabetic writing system and employ the same symbol to mark abbreviations and the end of sentence. It is our hypothesis that the threshold values we use should not vary much from language to language and from corpus to corpus. We have therefore determined optimal thresholds once on an English development corpus and retained these values for all experiments described so far; compare Section 5. We have carried out two experiments to substantiate our hypothesis. abbreviation detection stage. Figure 4 shows that the threshold value of 0.3, which we have used so far, turns out to be the ideal value for three of the corpora and that the minimum error rate for all eleven newspaper corpora lies at or is very close to this threshold value. Table 20 gives the differences between the best error rate on each corpus and the error rate produced by our system with the chosen threshold value of 0.3. The maximal difference is 0.13% for Italian. However, the average difference is only 0.03%.
Moreover, Table 20 also indicates that the threshold values that produced the best results for the different languages X  X pecified in parentheses in the Lowest column X  X ll lie very close to 0.3. The biggest deviation is the optimal threshold value 0.6 for Estonian. The outcome of this experiment shows that abbreviations in the eleven languages behave very similarly and that the crucial type-based stage of Punkt can indeed be called language independent.
 alized linear models for the detection of abbreviation types on the eleven newspaper corpora using a logit link function and no intercept term. In this experiment, we used the following three factors, which correspond to the collocational factor, the length factor, and the internal periods factor used in the type-based stage of Punkt: 1. Ratio : The ratio of occurrences of a candidate with a final period to all 2. Length : The length of the candidate type (excluding periods). 3. Periods : The number of internal periods.
 determine whether the evidence we use in the type-based stage of Punkt is significant information for an effective model for abbreviation detection. All three factors always make a highly significant contribution and cannot be dropped from the models. The factor Periods is sometimes a little less important than the other two as there are some corpora in which most abbreviations do not contain internal periods. Figure 5 indicates the variation of the parameters that we obtained for the three factors (on the logit link scale). It is remarkably small. The coefficient for the factor Periods exhibits the most further substantiates our claim that the evidence we use for abbreviation detection can be considered language independent.
 we have chosen for the collocation heuristic and the frequent sentence starter heuristic, respectively, work well for our test corpora but are not always the optimal values for each individual corpus. Although Punkt is conceived as a flexible, unsupervised system, one can optionally recalibrate the threshold values by providing it with a hand-annotated training corpus. We have tested this possibility by annotating a second French 514 corpus by hand. It again comprises articles from the newspaper Le Monde . It contains 371,526 tokens in all and 13,664 tokens ending in a final period. Punkt achieved an error rate for sentence boundary detection of 1.84% on this corpus. We used this second
French corpus as training corpus to recalibrate the threshold values for the collocation heuristic and the frequent sentence starter heuristic. The optimal values determined on this training corpus were 17 for the collocation heuristic and 5 for the frequent sentence starter heuristic. We then used these values in a second test run on our original French test corpus. The resulting error rate for the task of sentence boundary detection was 1.44%, while the error rate for abbreviation detection was 0.71%. These results are a little better than the ones achieved without recalibration (1.54% and 0.72%); compare
Section 6.4.1. The optimal threshold values determined on the original test corpus itself are 6 for the collocation heuristic and 5 for the frequent sentence starter heuristic.
The large difference between the best threshold values for the collocation heuristic on the two French corpora shows that the ideal value can vary from corpus to corpus, even if two corpora contain text of the same language and the same genre: in this case newspaper articles from Le Monde . Nevertheless, the lower error rate obtained in this experiment shows that Punkt can optionally be recalibrated on a training corpus to further optimize its performance. It can thus benefit from supervised training data, such as abbreviation lists or a training corpus, but does not require such data in order to perform well. 7. Comparison to Other Systems
The results we presented in the previous section show that Punkt is able to achieve low error rates on corpora from eleven different languages, that it is well-suited to process different text genres, and that it is robust enough to deal with single-case text. Moreover, it reliably outperforms the three baseline algorithms, and its performance is much more stable than that of the baselines.
 that of competing systems and discuss advantages and disadvantages of the different approaches to sentence boundary detection. Unless otherwise indicated, the term error detection. 7.1 Rule-based Systems
Rule-based systems make use of hard-coded rules and fixed lists of lexical items such as abbreviations in order to identify which punctuation marks signal sentence boundaries and which do not; that is, they neither learn from an annotated training corpus nor use the test corpus itself to induce the required knowledge but rather employ precompiled resources usually provided by a human expert. We will discuss one such system by
Silla, Valle, and Kaestner (2003) and compare its performance directly with that of our system. Moreover, we will also refer to results by Grefenstette (1999). 7.1.1 The RE system by Silla, Valle, and Kaestner (2003). The RE system test corpus until it encounters a period. It then compares the one token preceding and the one token following the period with a database of regular expressions that describe exceptions such as Web addresses, decimal numbers, and, most importantly, abbrevi-ations, in which the period does not indicate the end of a sentence. If the preceding token and/or the following token match a regular expression in the database, the RE system concludes that the period does not indicate a sentence boundary and searches for the next period. If no matching regular expression is found, the period is classified as a sentence boundary.
 that of the RE system on two test collections: on articles from the WSJ taken from the
TIPSTER document collection (TREC reference number: WSJ-910130) and on the Brazil-ian Portuguese Lacio-Web Corpus (Aluisio et al. 2003). The RE system was specifically developed for English newspaper texts. In order to use it on the Portuguese Lacio-Web corpus, 240 new regular expressions, which match Portuguese abbreviations, had to be added. Silla and Kaestner (2004) describe the adaptation process as  X  X asy, although time consuming. X  worse than those of the RE system: The RE system reached a precision of 92.39% and a recall of 91.18%, which yielded an F measure of 91.78%, while Punkt achieved a slightly lower precision of 90.70% and a slightly higher recall of 92.34% resulting in an F measure of 91.51%. When comparing these results, it has to be kept in mind that the RE system employs a handcrafted list of more than 700 abbreviations and was specifically developed for English newspaper text, while Punkt was not given any information besides the test corpus itself. Punkt X  X  performance on the English TIPSTER corpus is thus quite impressive. This is further corroborated by the fact that Punkt was able to outperform the RE system on the Portuguese Lacio-Web corpus, even though 240 Portuguese abbreviations had been collected for the database of the RE system by hand:
The RE system scored a precision of 91.80% and a recall of 88.02%, which resulted in an F measure of 89.87%, while Punkt achieved a precision of 97.58% and a recall of 96.87%, yielding a much better F measure of 97.22%. In sum, Punkt almost matched the performance of the RE system on the English test corpus and clearly outperformed it on the Portuguese test corpus. 7.1.2 Grefenstette (1999). This book chapter by Grefenstette X  X hich is based on earlier work by Grefenstette and Tapanainen (1994) X  X iscusses different approaches to sen-516 tence boundary disambiguation using different sources of information and evaluates them on the Brown corpus, on which Punkt achieved an error rate of 1.02%. The first approach described is a simple regular expressions approach that tries to recognize abbreviations by matching against the following patterns (Grefenstette 1999, page 127):
This approach produces a high error rate of 2.34%. Moreover, it makes language-specific assumptions in that strings such as Mr might well be valid ordinary words in other languages. Grefenstette considers a second approach in which he additionally tries to identify abbreviations with a type-based heuristic, which inspired our type-based baseline (TypeBL) (Grefenstette 1999, pages 128 and 129): 1.65%, which is still much higher than that of Punkt. An alternative approach evaluated by Grefenstette is to use a lexicon containing all ordinary words in the Brown corpus but no abbreviations or proper names in combination with the type-based heuristic for ab-breviation detection. Even an approach with this massive amount of lexical knowledge still produces an error rate that is higher than that achieved by Punkt: 1.73% versus 1.02%. Only when he uses the complete lexicon and a list of common abbreviations, is Grefenstette (1999) able to attain a result that is slightly better than ours: His most resource intensive system achieves an error rate of 0.93%.
 when tested on the specific language and text type that they have been developed for.
Whereas rule-based systems either require extensive lexical resources or a large amount of manual labor, Punkt can be applied to new languages and corpora out of the box with no manual adaptation. The fact that it can recognize new abbreviations on the fly is especially a great advantage because the results of the RE system on the Lacio-Web corpus and our own experiments in Section 6.4.4 show that rule or list-based systems are often not sufficient to cover the productivity of abbreviation use in new corpora and languages; compare also Mikheev (2002, pages 298, 299, and 311) and Silla and
Kaestner (2004). 7.2 Supervised Machine-Learning Systems
In this section, we discuss several supervised machine-learning approaches to sen-tence boundary detection described in the literature and compare their results to those achieved by Punkt. We regard those sentence boundary systems as supervised that require a set of manually disambiguated instances as training data. 7.2.1 Riley (1989). Riley induces a decision tree for sentence boundary detection using the following features (Riley 1989, pages 351 and 352):
The resulting decision tree is able to classify the periods in the Brown corpus with a very low error rate of only 0.2%, which is 0.82% better than that achieved by Punkt.
However, the impressive performance of Riley X  X  approach also requires impressive amounts of training data: He calculated the probabilities that a certain word occurs before or after a sentence boundary from 25 million words of AP newswire text. Such a large training corpus is probably not available for many languages; see also the comments in Palmer and Hearst (1997, page 245). Moreover, the last of Riley X  X  features, namely, abbreviation class, requires quite specific lexical knowledge about abbreviation types that can only be taken from additional handcrafted resources. It is unclear how well his approach would do with a realistic amount of training data and without these specific lexical resources. 7.2.2 The Satz System by Palmer and Hearst (1997). The Satz system of the part-of-speech distribution of the words surrounding potential end-of-sentence punctuation marks as input to a machine-learning algorithm. The part-of-speech infor-mation is derived from a lexicon that contains part-of-speech frequency data. In case a word is not in the lexicon, a part-of-speech distribution is estimated by different guessing heuristics. In addition, Satz also uses an abbreviation list and capitalization information. After training the system on a small training and a small cross-validation corpus, which consist of documents with sentence boundaries annotated by hand, it can be used on new documents to detect sentence boundaries. The system can work with any kind of machine-learning approach in principle. Palmer and Hearst X  X  original results were obtained using neural networks and decision trees.
 preceding sections as Palmer and Hearst (1997) so that a direct comparison between the systems is possible. Palmer and Hearst report an error rate of 1.5% for the initial version of their system, which uses neural nets as machine-learning algorithm, a lexicon 518 of 30,000 words including an abbreviation list comprising 206 items, and was trained on slightly better than the error rate of 1.65% that we obtained with Punkt. Their best result was produced by a version of their system that used decision tree induction, a lexicon of 5,000 words including the 206 abbreviations, and was trained on a set of 6,373 hand-annotated items. This configuration achieved an error rate of 1.0% on the same test corpus. Palmer and Hearst have also evaluated their system on one French corpus and two German corpora. For the French corpus, they report an error rate of 0.4%. On the two German corpora, their system produced error rates of 1.3% and 0.5%, respectively. Whereas the results of the Satz system for French are better than those for our system, their results on the two German corpora are worse than ours. However, as we were not able to use the same test corpora in our evaluation, these results are not directly comparable. Strunk, Silla, and Kaestner (2006) give the results of a comparative evaluation of the present system against three other approaches, including Satz, on
English and Brazilian Portuguese corpora. For both of these corpora, Satz achieved a slightly lower error rate than our system; compare Table 22.
 only the case if enough training data and additional resources are available. When it was not provided with a precompiled list of abbreviations, for example, it produced an error rate as high as 4.9% on the WSJ corpus (Palmer and Hearst 1997, page 255).
This result combined with the results from Section 6.4.4, which showed that general-purpose abbreviation lists are not sufficient due to the productivity of abbreviation use, suggests that a reliable performance of the Satz system on new corpora can only be ensured if it is provided with an abbreviation list suitable for the domain in question and it is ideally trained on documents of the same genre as the corpus it will be tested on. Moreover, Palmer and Hearst report that Satz possesses a similar robustness with regard to single-case corpora as our system. However, this is again only the case if it has been retrained specifically on single-case corpora (Palmer and Hearst 1997, pages 255, 256, 259). 7.2.3 MxTerminator. Reynar and Ratnaparkhi (1997) use maximum-entropy modeling to learn contextual features from a hand-annotated training corpus that can be used to identify sentence boundaries. Their system, called MxTerminator, such as the token preceding a potential sentence boundary, the token following it, capitalization information about these tokens, whether one or both of them are abbrevi-ations or not, and so on in its most portable version. It also induces a list of abbreviations from the training corpus by considering as an abbreviation every token in the training corpus that contains a possible end-of-sentence symbol but does not indicate a sentence boundary. This portable version does not depend on any lexical resources such as the part-of-speech information required by Satz. Reynar and Ratnaparkhi also built a version specialized for English newspaper text, which makes use of additional hand-crafted resources: a list of honorific abbreviations such as Ms. and Dr. and a list of corporate-designating abbreviations such as Corp. and S.p.A. This specialized system achieved an error rate of 1.2% on the English WSJ test corpus also used by Palmer and
Hearst and in our work. While this result is clearly better than that of our system, which produced an error rate of 1.65%, MxTerminator had to be trained on 39,441 sentences of
WSJ text and used hand-crafted lexical resources. For the more portable version of their system without language-specific abbreviation lists, Reynar and Ratnaparkhi report an error rate of 2.0% on the same text corpus, an error rate that is higher than that achieved by our system without training or lexical resources.
 corpora using ten-fold cross-validation with nine tenths of the corpus as training set and one tenth as test set. Table 21 gives the average number of training cases and the mean error rates for MxTerminator on each corpus and compares them to those achieved by
Punkt. Although MxTerminator achieves a slightly lower error rate on two corpora, namely Brazilian Portuguese and English, it produces an average error rate of 1.77% on the newspaper corpora, which lies well above our system X  X  mean error rate of 1.26%, even though the number of training instances was sometimes as high as 34,256 (for
German) and never fell below 10,000. MxTerminator X  X  performance was also worse than that of our system in a comparative evaluation on English and Brazilian Portuguese corpora described in Strunk, Silla, and Kaestner (2006).
 of a machine-learning system carries over to new corpora written in the same language without retraining. When Reynar and Ratnaparkhi evaluated their system on the Brown corpus without retraining, it achieved a relatively high error rate of 2.1% (cf. Punkt X  X  error rate of 1.02%). The authors themselves remark:
This points to the general problem that supervised systems that are not able to dynamically incorporate new knowledge, for example, by discovering abbrevia-tion types on the fly, cannot be expected to perform reliably on new corpora if the specific domain or genre is not known beforehand; compare also Mikheev (2002, pages 298, 314). 7.2.4 Stamatatos, Fakotakis, and Kokkinakis (1999). These authors apply a specifically adapted version of transformation-based learning (Brill 1995) to the problem of sentence boundary detection. For the initial-state annotation, they assume that every possible sentence-ending punctuation mark does indeed indicate a sentence boundary. In the 520 ization of the token containing a possible end-of-sentence boundary marker and of the token immediately following it as possible triggering environments to learn rules that remove sentence boundaries. In the second stage, it learns rules that reinsert sen-tence boundaries using the same space of possible triggering environments. Stamatatos,
Fakotakis, and Kokkinakis (1999) trained their system on a hand-annotated corpus of Greek newspaper articles that contained 9,136 candidate punctuation marks. They tested it on a corpus containing articles from the same newspaper with 10,977 candidate punctuation marks and a lower bound of 79.6%. Their system learned 312 rules in all and produced an error rate of 0.6% on all punctuation marks, including periods, exclamation and question marks, and ellipses. When only periods and ellipses were considered, it achieved an error rate of 0.57% with a set of 234 rules. Punkt achieved a respectable error rate of 1.50% on this corpus without any training at all. As Stamatatos,
Fakotakis, and Kokkinakis (1999) use individual words and brittle features such as capitalization information as triggering environments, their system is probably not very robust in that it requires training on a corpus that is very close to the texts that the system is intended to be used on in order to guarantee a low error rate. 7.3 Unsupervised Machine-Learning Systems
Unsupervised systems are systems that neither require specific hand-written rules or lexical resources nor have to be trained on hand-annotated training examples.
Instead, they extract the required information from the test corpus itself and/or additional unannotated text. We also regard our own approach as an unsupervised system. 7.3.1 Mikheev (2002). Mikheev proposes to combine sentence boundary detection, proper name identification, and abbreviation detection in one system. He tackles the sentence boundary disambiguation task with a set of simple rules that can be applied after the tokens immediately to the left and to the right of a potential sentence boundary marker have been fully disambiguated. The most important questions are whether the token preceding a period is an abbreviation and whether the token following a period is a proper name. In order to answer these questions, he uses a combination of type-based abbreviation-guessing heuristics, some of which have already been discussed in Grefenstette (1999), and what he calls the document-centered approach to abbrevi-ation detection and proper name identification. This approach is based on the idea of classifying a candidate type as a whole as a proper name or an abbreviation based on instances of that type that occur in unambiguous contexts: For example, a type that always appears with a final period and occurs before a lowercase word is likely to be an abbreviation, while a type that occurs with an uppercase first letter in the middle of a sentence is likely to be a proper name. He enhances these methods with the ability to distinguish between homographs (between an abbreviation and an ordinary word and between a proper name and an ordinary word) by collecting common sequences of more than one token that contain the candidate. His system requires some additional resources, namely, a list of common words (i.e., not proper names), a list of common words that are frequent sentence starters, a list of frequent proper names that coincide with common words, and a domain-specific list of abbreviations, which can all be created from an unannotated corpus without human intervention.
 ican English, extracting the required additional resources from a 300,000 word corpus of New York Times articles. It achieved an error rate of 0.45% on the WSJ corpus and an error rate of 0.28% on the Brown corpus, while Punkt X  X  error rates on these corpora were 1.65% and 1.02%, respectively. 13 Mikheev himself admits that the use of an additional domain-specific abbreviation list, which has to be recreated for every new domain, is not always possible, especially if the system is expected  X  X o handle documents from unknown origin X  (Mikheev 2002, pages 305, 306). When his system was not equipped with an additional abbreviation list, the error rates rose to 1.41% on the WSJ corpus and 0.65% on the Brown corpus and were more comparable with those achieved by
Punkt. Mikheev also tested his system in conjunction with a morphological analyzer on a corpus of BBC articles in Russian and obtained an error rate of 0.1% for sentence boundary detection.
 advanced methods for the identification of proper names, while we have mostly con-centrated on abbreviation detection. In fact, combining Mikheev X  X  insights with our methods of abbreviation detection would most likely lead to another performance increase: Mikheev X  X  abbreviation detection methods achieved an error rate of 6.6% on the WSJ and an error rate of 8.9% on the Brown corpus for the task of abbreviation detection when no additional abbreviation list was used. Even when such a list was consulted, his error rates X 0.8% on the WSJ and 1.2% on the Brown corpus X  X emained above those achieved by Punkt X 0.71% and 0.82%, respectively.
 in Mikheev X  X  approach. Although Mikheev aims at a domain-independent system, he makes some decisions that could be harmful for domains other than news and literary fiction. He places an arbitrary length limit on possible abbreviations by applying his document-centered approach to abbreviation detection only to candidates that have a maximal length of four letters (Mikheev 2002, page 299). This limit is already too strict for some abbreviations found in English newspaper corpora, such as Messrs., Calif., and
Thurs. The abbreviation Calif. (ornia), for instance, occurs 88 times in the portion of the 522
WSJ corpus we used in our evaluation. The abbreviation lists that we have extracted from a German dictionary and a bilingual English X  X erman dictionary (cf. Section 6.4.4) show that such an arbitrary length limit can be quite problematic. In the German list, 28% of all abbreviation types have a length greater than four. In the English list, 26% are longer than four characters.
 tion information and therefore unable to uncover abbreviations that are always followed by a capitalized word, while our approach uses collocational information pertaining to the abbreviation itself and its final period and thus does not incur this problem.
Mikheev X  X  strong reliance on capitalization also renders his approach unsuitable for single-case text and leads to some problems for German where all nouns are always capitalized and not only proper names (Mikheev 2002, page 315). Last but not least,
Mikheev X  X  system does not include a specialized treatment of ordinal numbers, which we have shown to be quite important for some languages; compare Section 6.4.5. document-centered approach to abbreviation detection and proper name identification.
After bootstrapping the training process on 20,000 words of tagged text, he trained the tagger in the unsupervised mode on the Brown corpus and evaluated it on the WSJ corpus and vice versa. When he used the tagger alone for the disambiguation of possible end-of-sentence marks, it achieved an error rate of 1.95% on the WSJ corpus (vs. 1.65% achieved by Punkt) and an error rate of 0.98% on the Brown corpus (vs. 1.02% achieved by our system). Enhancing the tagger with the heuristics to identify proper names and abbreviations described above improved the error rates to 0.31% on the WSJ corpus and 0.20% on the Brown corpus. When the heuristics were applied only to the test corpora themselves and no additional abbreviation list was employed, the resulting error rates were 1.39% on the WSJ corpus and 0.65% on the Brown corpus. When comparing these results achieved by using a part-of-speech tagger with those of our system, it has to be kept in mind that although Mikheev trained his tagger in the unsupervised mode, this technique normally still requires an extensive lexicon that contains the possible parts of speech for each lexical item, a resource that is not always available for every language. 8. Conclusion
We have presented an unsupervised multilingual sentence boundary detection system that does not depend on any additional resources besides the corpus it is supposed to segment into sentences. It uses collocational information as a new type of evidence for the detection of abbreviations, initials, and ordinal numbers and is therefore much less dependent on orthographic information than competing systems. This fact enables it to accurately detect sentence boundaries even for single-case corpora. The experiments that we have carried out for eleven languages show that it is an accurate method well suited for different languages and text genres. Although its performance is slightly inferior to the best results published in the literature on sentence boundary detection (cf. Table 22), it can keep up well with rule-based methods and more straightforward supervised systems. Moreover, we were able to show that abbreviation use is quite productive and that systems that rely on resources such as abbreviation lists will have to be adapted specifically to every new language and every new domain, while no manual work and no language-specific resources are needed to adapt Punkt to new corpora. Acknowledgments References 524
