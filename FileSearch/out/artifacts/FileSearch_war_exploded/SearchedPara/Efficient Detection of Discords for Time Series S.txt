 Time discord is such subsequence that is the least similar to other sequence of time series. The detection of discords in time series data is an important problem in a great variety of applications, such as space shuttle telemetry, mechanical industry, biomedicine, and financial data analysis [1-3]. In real applications, time series data often has the form of data streams in which time series data points continuously arrives. For example, cardiogram time series of certain a patient often continuously flow during his/her each treatment. 
In this paper, we consider the problem of discord detection for time series stream, where time discords are detected from local segments of flowing time series stream. The existing methods, which aim to detect the global discords from the entire time series database but a segment of time series, fail to detect such local discords. In addition, the existing methods need to capture the entire time series before detecting time discords and that is impossible in the case of flowing time series stream environment. In this paper, two online detection algorithms are presented. The first algorithm BFHS (stands for Brute Force HOT SAX) is simple and intuitive. It extends the existing algorithm HOT SAX to local segments of time series stream to detect the local discords. time subsequence of local time series segment during each detecting. Then, in the second algorithm DCD (stands for Detection of Continuous Discords), we limit the search space to further enhance the detection efficiency. The proposed algorithms are experimentally evaluated using real and synthesized datasets. There are some other related works [4-6]. Different from our work, these works mainly focus on finding of time discord or anomaly from static time series database. The problem of text data streams clustering is studied in [7]. The concept-drifting mining problem is studied in [8]. The aggregate query over data streams is studied in [9]. Different from these work, our work focus on time series streams but general data stream or text stream. Some basic time series notations are similar to the previous works [2-4]. We denote a subsequences of length n from a given time series T by sliding a widow of size n across T . We use function Dist to measure the distance between two given time series M and C , the Euclidean distance is used, that is, is easy to know the function Dist is symmetric, that is, Dist ( C , M ) = Dist ( M , C ). Definition 1. Non-Self Match : Given a time series T , containing a subsequence C of length n beginning at position p and a matching subsequence M beginning at q , if | p  X  q |  X  n, we say M is a non-self match of C and their distance is Dist ( M , C ). Definition 2. Time Series Discord : Given a time series T , the subsequence D of length n beginning at position l is said to be the discord of T if D has the largest distance to its nearest non-self match. That is,  X  subsequences C of T , non-self matches M D of D , and non-self matches M C of C , min( Dist ( D , M D )) &gt; min( Dist ( C , M C )). We use time series buffer B to contain the local segment of flowing time series. In general, at certain a time point t , suppose B contains a time series of length n , B  X  T = t ,..., t n , and t new is the next arriving time series data point. At next time t +1, the time buffer is specified in advance. We use ( m , n )( t ) to denote the time subsequence whose n )( t ) are the same time subsequence for a given times series stream. The time discord found from B at time t is the local discord at time t and denoted as LD ( l , n )( t ). Definition 3. Non-Similar Distance : Given a time series T , for any subsequence P of distance of P . The non-similar distance of local discord is the distance between local discord and its nearest non-self match. We use the vector V of length n to record the non-similar then d 1 is the non-similar distance of the local discord at time t-n , d n is the non-similar the following conditions hold (a) k  X  l , and (b) valid ( dist , V ) = true, where dist denotes the non-similar distance of LD ( k , n )( t +1). The condition (a) assures the local discord at time t +1 is not same to the local discord at time t . The condition (b) avoids generating too many trivial local discords. The purpose of function valid is to determine the interesting discords through the historical non-similar distances of local discords. Our problem is to find the available discords from the given time series stream. 3.1 Online Detection Algorithm Framework The online detection framework in Fig.1 firstly initializes some basic data structures time series data points are added into time series buffer B . Next, the function FindDiscord is firstly called to find the local discord from B . The non-similar distance points from the flowing stream. After that, we continue to find the local discord from the updated time series in B by calling the FindDiscord function. If the local discord is available and different with the previous local discord (step 9), then we output the found local discord. Next, the position of the local discord and its non-similar distance are saved (steps 12 and 13). The loop continues until the time series stream is stopped. mean( V ) function is the mean value of vector member, threshold and the number of vector member n are specified in advance. A simple solution for FindDiscord function is to use the existing algorithm such as HOT SAX to find the discord from time series buffer. Such FindDiscord function is adopted in BFHS algorithm. But, BFHS algorithm is low since HOT SAX needs to search the entire local segment while detecting each time. 3.2 DCD Algorithm In DCD algorithm, we adopt a new FindDiscord function, which is shown in Fig. 2. Definition 5. Small match : For any subsequence P of a given time series T , Q is the current local discord of time series, then Q ( P ) is a small match of P ( Q ). Next, let observe the possible changes of local discords at two continuous time point. Assume current time is t . The position of current local discord is l . The position of the nearest non-self match of current local discord is lnn . Then at next time t +1, we have two cases: (a) The non-similar distance of the local discord at time t +1 is smaller than that of the local discord at time t , (b) The non-similar distance of the local discord at sub-cases. (a 1 ) The time series subsequence containing the arriving data points is the Then the local discord at time t may be not local discord at time t +1. (a 2 ) The position discord will be changed as a non-discord subsequence at time t +1 because the first case (b), due to deleting some time series points of time series buffer, there may be some subsequences whose non-similar distances are larger than that of the local discord at time t . These subsequences may become the new local discord at time t +1. For case (a), the non-similar distance of local discord at time t +1 will be smaller than that of the local discord at time t , we need to search all possible subsequences of time series buffer to find the new local discord at time t +1. For case (b), we can reduce the search space using the following lemma 1. Due to the limit of space, the proof of lemma1 is omitted here. t m-n+2 ,..., t m , t new )&gt; dist (i.e. the above case (b)), we have: if k discord at time t +1 is not the time series subsequence containing the arriving data In Fig.2, Candidate denotes the possible time subsequences could be the local discords. The Search function is similar to the discord discovery function of existing HOT SAX algorithm and is to quickly find the small matches of time subsequences. Due to the limit of space, the Search function is omitted here. The experimental computer system hardware is AMD Atholon 4400 CPU and 1G memory and the OS is Microsoft Windows XP. The algorithms are implemented using Mathlab 7.4.0. 
The first real dataset is the sensor dataset shown in Fig. 3(a). This dataset contains about 7000 data point. The period of this dataset is not fixed and is about 1000. From this figure, we can see that the seventh period has an anomaly. In this test, the length of discord is 256, the length of time series buffer is 3000, and the arguments of valid function are: n =600 and threshold =2. The running results of our algorithms on this dataset are shown in Fig. 3(d). In this figure, the above part shows the found discords, included in two dashed biases, at each time point. The biases indicate the changing trend of time series of sensor dataset between 1000 and 7000. The changes of non-similar distance are given in the below part of this part. The largest changing point is indicated by a dashed vertical line. From this line, we can see that the largest non-similar distance appears at position 6053 of time series at time point 3300. Compared with Fig. 3(a), we can see that this indicated point is matched with the anomaly. The second real cardiogram dataset is shown in Fig. 3(b) and contains about 10000 data point. The running results of our algorithms on this dataset are in Fig. 3(e). In this test, the length of discord is 256 and the length of time series buffer is 2500. The arguments of valid function are: n =600 and threshold =1.5. The third dataset is synthesized and shown in Fig. 3(c). The results for this dataset are in Fig. 3(f). The arguments of valid function are: n =100 and threshold =1.05. In this paper, we consider the problem of local time discord detection for time series stream. Two online detection algorithms BFHS and DCD are presented for our problem. The proposed algorithms are experimentally evaluated using real and synthesized datasets. How to determine the algorithm parameters such as valid function arguments n and threshold etc. according to the detailed application and enhance the detection algorithm efficiency is our future work. Acknowledgments. This paper is supported by the NSFC (60703111, 60773198). 
