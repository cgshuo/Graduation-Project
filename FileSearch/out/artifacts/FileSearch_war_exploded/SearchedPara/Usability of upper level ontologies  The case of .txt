 1. Introduction Many important information systems applications require access to very large amounts of data about the real world.
These include systems that support the Semantic Web, web queries, web-services, heterogeneous databases and multi-agent systems. These systems can be supported by stocks of knowledge, in the form of ontologies.

Domain ontologies specify concepts, relationships between concepts, and inference rules for an application domain (e.g. mation sharing among heterogeneous data sources [27], interpreting unstructured data on the Web [1], creating and eval-uating conceptual models [30], web queries and others.

The most well-known domain ontologies are the DAML ontologies (www.daml.org) and those ontologies found in Swo-ogle ( http://swoogle.umbc.edu/ ). However, it is difficult to find good libraries of domain ontologies for general use, even though some research is underway to automate their development [13]. Besides these efforts to develop individual ontolo-gies, there has been great interest in developing upper level or large scale ontologies. These are domain independent and intended to capture and represent the semantics of the real world to support large applications. To make the ontologies use-ful, however, we need to understand the current state of the art and analyze how it should progress in order to propose an agenda for future research.

The most massive effort in developing an upper level ontology is the Cyc project [20]. Cyc attempts to capture and encode large amounts of common sense knowledge about the real world [9]. However, it is unlikely that the first effort to capture such knowledge will be successful so competing projects should be undertaken [23]. Some general work on defining an agen-da for upper level ontologies has been undertaken by the Upper Level Ontology Summit [25]. However, more detailed anal-ysis is needed. An academic version of Cyc, called ResearchCyc (research.cyc.com) has been created and provides a unique opportunity for such detailed analysis.
The objectives of this paper, therefore, are to analyze ResearchCyc and make suggestions about future research on how upper level ontologies can be used in different applications. The contribution of the paper is to provide insights that can be ful in the creation of new, large scale ontologies to improve their structure and to make them more manageable. The paper also presents the architecture of a middleware that has been designed to mitigate the deficiencies of the existing ontology tools for large ontologies. This research is particularly relevant because of the increased interest and development of very large ontologies such as the GeneOntology (http://www.geneontology.org ) and UMLS [2]. 2. Domain and upper level ontologies
Research on the semantic web, data management, artificial intelligence, and information integration have identified the need for ontologies to serve as surrogates for representing knowledge about the real world and how it operates. One approach to capturing such knowledge is to develop rather small, domain ontologies that capture the concepts of a particular applica-ontologies [3,15,31] . The DAML ontologies ( www.daml.com ) were developed specifically for the Semantic Web and stored in a library of approximately 200 ontologies. The need for such libraries has long been recognized [24]. In fact, Embley [12] sug-gests that the development of ontologies is the key to solving the  X  X  X rand semantics X  problem of information systems.
For domain ontologies, versatile languages, tools and development environments are available such as Prot X g X  [17],OWL [34], or SPARQL [35]. These tools have different levels of maturity, completeness, and efficiency. There have also been at-tempts to develop semantic integration mechanisms [16,21] , based on mapping techniques.

An upper level ontology  X  X  X escribes very general concepts that are the same across all domains and usually consist of a hierarchy of entities and rules (both theorems and regulations) that attempt to describe those general entities that do not belong to a specific problem domain. X  Examples of upper level ontologies include Cyc, Basic Formal Ontology (BFO), DOLCE and DnS, General Formal Ontology (GFO), WordNet (wordnet.princeton.edu), GJXDM/NIEM, Suggested Upper Merged Ontol-ogy, and the Biomedical Ontology. Upper level ontologies are formal, but do not have well-developed  X  X  X ser guidelines, X  such as those for standard technologies such as cars, iPods or video machines. This makes the integration and the use of ontologies difficult.

The potential usefulness of upper level ontologies lies in the fact that they are domain independent. However, it is difficult to integrate them and make them truly useful [25]. Doing so requires a thorough analysis and understanding of existing upper level ontologies. 3. Cyc and ResearchCyc
The Cyc project has spent the past twenty years, and approximately 900 person-years of effort, building a knowledge base to capture and represent common sense knowledge. As a result, the Cyc Ontololy contains more than 4.5 million assertions (facts and rules) describing more than 250,000 terms, including 15,000 predicates. A version of the Cyc ontology, called
ResearchCyc, has been released for the scientific community. ResearchCyc contains both intensional information (entity to space, time and human perception) and linguistic information. In particular, the ResearchCyc lexicon contains entities for over 20.000 single-word noun, verb, adjective and adverb forms, 40.000 multi-word phrases, and over 100.000 proper names.

Unlike dictionary-based taxonomies such as WordNet, in which every node is identified with a word sense, the Cyc ontol-ogy is not an ontology of word senses. As a result, there is no comprehensive mapping of Cyc concepts into words of a natural language [8].

The Cyc general knowledge has a broad range and can be classified as:  X  Temporal knowledge that describes the temporality of the concepts and their temporal relationships, such as something happens before something else.  X  Spatial knowledge that describes spatial properties of concepts such as the superposition of objects, connection, nearness and location, and part-of relationships.  X  Event, information that describes the most common events that can happen, the actors involved in the events, and their constraints.  X  Geography information that describes the geographic area of the concepts.  X  Other general information such as emotional information.

One way to classify the information in ResearchCyc is on the abstraction level of the knowledge, which may be classified as:  X  Upper ontology : This represents very general concepts and relationships between them. For example, it contains asser-is ResearchCyc X  X  most general concept.  X  Core theories : These represent general facts about space, time, and causality and are essential to almost all common sense reasoning. Examples are geospatial relationships, human interactions and everyday items and events.  X  Domain-specific theories : These are more specific than core theories and deal with special areas of interest such as mil-itary movement, the propagation of diseases, finance, and chemistry.  X  Facts : These represent extensional information also known in ResearchCyc as ground-level facts.

The first three layers describe intensional information (conceptual information) and the last one extensional information (facts).
 A fragment from ResearchCyc related to cars is shown in Fig. 1 . Cars are represented by the concept Automobile in Cyc.
There are more than 300 relationships involving the Automobile concept. 3.1. Domain knowledge represented in ResearchCyc
ResearchCyc represents knowledge through microtheories (Mt). A microtheory represents a domain, and all of its valid assertions. Every assertion must be attached to one or more Mt X  X .

Mt X  X  in Cyc are arranged hierarchically, where a microtheory M facts that are true for supertype M 1 are also true for the subtype M not very usable for several reasons: 1. There are over 20 thousand Mt X  X  in Cyc with the taxonomical structure of Mt X  X  being as deep as 50 levels in some domains. 2. There are many redundant subtype relationships that make it difficult to determine its taxonomical structure. 3. Some of the Mt X  X  are almost empty, but difficult to discard. 4. Not all of the Mt X  X  follow a standard representation of knowledge.

The parent of all the microtheories is called the BaseKB . However, determining the hierarchical structure of the Mt X  X  is its indirect subtypes. For example, Mt ClothingGMt describes general information about clothing and is a direct subtype of which, in turn, is a subtype of BaseKB .
 It is common to define two Mt X  X  for the same domain, such as ArtifactGMt and ArtifactGVocabularyMt ,or ProductGMt and
ProductGVocabulary . One of them defines the vocabulary used in the domain (the entity types and the relationship types), and the other defines the rules about the domain (heuristics, general integrity constraints, and derivation rules). However, this distinction is not made for all of the microtheories.
 The huge number of microtheories and the redundancy in their taxonomy make it very difficult and inefficient to use.
Choosing the right microtheory can easily take several minutes for a trained ontologist who is familiar with the Cyc ontology and experienced in how best to organize knowledge for maximum utility [32]. Hence, the study of metaclasses of the microtheories is a better approach to summarizing the knowledge included in ResearchCyc. On the other hand, the Micro-theories taxonomy is useful if one wishes to study, in more detail, whether a domain is well represented.
Table 1 shows the main Metaclasses of Microtheories, the kind of information its instances represent, its instances X  pur-pose and number. We have omitted some metaclasses because they do not have any domain, their microtheories do not cov-er the domains they represent, or their instances are only used to exemplify the ontology or test a tool.
Some of the discarded microtheories that may be useful for specific domains include: (1) microtheories specific to certain pany for which they were conceived, and (2) microtheories representing cultural and belief knowledge because they currently contain too little information ( BeliefSystemMicrotheory ). Obviously, they will become useful as they are developed further. 3.2. Successful application of Cyc
The knowledge contained in the Cyc ontology (or its different versions: OpenCyc or ResearchCyc) has been utilized in con-works that use the Cyc knowledge to discover, rewrite and integrate novel and relevant data from other knowledge sources into Cyc (ontology management), and works that use Cyc to support knowledge intensive processes (ontology reuse).
In the area of ontology management, there are several approaches that use the Cyc ontology. Taylor et al. [32] present a method that automatically places new knowledge into a hierarchical ontology. This method has been implemented and tested in the Cyc Knowledge base system. Shah et al. [28] describe a method for finding facts from the World Wide Web and a framework for validating candidate facts. The facts targeted in the paper deal with the extraction of information about terrorist organizations. The system, however, needs human intervention to deal with the poor-quality of the extracted Web data.

As mentioned above, Cyc knowledge has been used to deal with some knowledge intensive processes. For example, in the security area, CycSecure [29] is a network risk assessment and network monitoring application that uses the knowledge and
Conesa and Olive [4] the conceptual schema of an Information System is created automatically by identifying an deleting the irrelevant parts of the Cyc ontology with respect to the information system under consideration. Even though this method is automatic, when Cyc does not contain some of the required knowledge, the process to refine Cyc with such relevant knowl-edge tends to be longer and more difficult than creating the conceptual schema from scratch. This makes the method useful only in specific cases.
 In the field of web query improvement, Conesa et al. [5] explain how to use the semantic and linguistic knowledge from Cyc and Wordnet together to improve web queries by query expansion and refinement techniques. Curtis et al. [8] also use
Cyc to create a semantic method for word sense disambiguation. The benefit of this method against the ones that use more linguistic ontologies, such as Wordnet, is the use of a much richer set of relations among word senses, enabling the devel-opment of more robust mechanisms for determining semantic closeness. The Cyc taxonomic knowledge has been used in other approaches to facilitate word sense disambiguation with human intervention. Two more examples of successful use of Cyc are the question-answering system of Curtis et al. [7] and the interactive knowledge acquisition system of Witbrock et al. [36]. Another project uses Cyc knowledge to combine a machine learning suite (WEKA) and common sense knowledge (Cyc) to discover patterns in Cyc X  X  own data and write its own rules [6]. This method has had average results when used to generate text classification.

Once Cyc reaches a certain level it can help in its own development and start using natural language parsers to augment its knowledge base [6]. The increase in the number of works that deal with automatic and semiautomatic ontology manage-ment approaches for Cyc seems to demonstrate that Cyc is reaching this  X  X  X evel X . However, as the number of elements of Cyc increases to reach such a  X  X  X evel, X  the ontology becomes more difficult to deal, requiring more tools to manage it adequately. As can be inferred from the related research, the Cyc ontology is mostly used by applications that use natural language pars-ers to deal with the ontology. Only three of the ten works presented in this section support direct user interaction with the
Cyc ontology. Thus, the knowledge of Cyc appears to have reached the desired level, although human beings are unable to interact with it efficiently without smart and usable software assistants. 4. Accessing ResearchCyc ResearchCyc is comprised of a large knowledge base of carefully selected content. However, a challenge using Research-
Cyc is discovering whether the information one is looking for is defined in the ontology. Doing so manually is difficult be-cause ResearchCyc has only a textual interface accessed using a browser. It does not provide any facility to query and understand its knowledge. The deficiencies in the linguistic knowledge of ResearchCyc make the searching process even more difficult. Even if one is not able to find the knowledge being searched for, the problem is the large amount of knowledge retrieved. This makes it impossible to automate any process without using heuristics to automatically discard the informa-tion that is irrelevant for a particular context or to infer its semantics.

The classification in Table 1 can be used to determine whether a given domain is defined in ResearchCyc. For example, if we are looking for biological knowledge, we know it should be an instance of generalMicrotheory or VocabularyMicrotheory .
Hence, we can search their instances to find a microtheory that deals with biological knowledge ( BiologyMt ). After locating the microtheory that contains the relevant knowledge, we would like to know the extent to which the domain is represented in ResearchCyc. To determine this, we must take into account the microtheory ( BiologyMt ) and its super microtheories ( Biol-ogyVocabularyMt and BiochemistryMt ). The definition of a local taxonomy of the selected microtheory is useful.
Regarding the inferences in ResearchCyc, the queries are executed using a microtheory as a context. Therefore, it is impor-tant to identify the correct microtheory for each query. Executing a query using a wrong Mt means that a query, which may be answered using ResearchCyc knowledge, will have no results. For example, the query  X  X  X n which city is the liberty bell located X  (represented as (# $ objectFoundInLocation # $ LibertyBell?CITY) ) has no answers under the BaseKB microtheory. How-ever, processing the same query using the CurrentWorldDataCollectorMt Mt, returns Philadelphia as a result. Unfortunately, there is no Mt that fits all of the queries because the correct microtheory depends upon the context of the query. For exam-ple, a query that deals with today X  X  facts may need the CurrentWorldDataCollectorMt , and a query that deals with linguistic information may need EnglishMt microtheory. This problem gets worse in web queries because the context of a web query cannot be obtained automatically from its terms. Therefore, even when ResearchCyc has relevant knowledge for a query, we may not be able to retrieve it because we cannot identify the microtheory upon which to focus.
 The amount of knowledge included in ResearchCyc should be simplified if we want to use it automatically. For example, can deal with them as simple partOf relationships. This simplification helps the program identify when a part-of relationship exists and its part and whole participants. 4.1. Using ResearchCyc for improving web queries
ResearchCyc has different kinds of knowledge: concepts and generalization relationships that represent the intensional information about a domain and individual and classification relationships that represent extensional information. Further-more, a concept of the ontology may represent either semantic or linguistic information. For example, in ResearchCyc there is a concept called DomesticPet , which is a noun and the denotation of the word Pet.

ResarchCyc also contains heuristics and integrity constrains. Although, in general, heuristics and integrity constraints are not required in an ontology, they enable inference and may be useful for detecting concepts that are related to the context in which the user is interested. For example, the heuristic which indicates that most pets have a pleasant personality may be a generalization relationship between Pet and Animal , a synonym relationship between friendly and pleasant, and a heuristic which indicates that Pets tend to be friendly.

Consider an application of ResearchCyc web query expansion [5]. Suppose a user wants to learn about the flutes (glasses) made with bohemian glass and he/she submits the query  X  X  X lute Bohemian Drink X  to Google. It will return 57,900 hits with only 5 relevant results from the first 20.

Suppose ResearchCyc is used to improve the query before its final submission to a search engine. If we search ResearchCyc for the term Flute, we obtain two results: the concept ChampagneFlute (that represents the glass) and the concept Flute (that represents the musical instrument). The concept ChampagneFlute has as a supertype, the concept DrinkingGlass . Taking into account that the query also contains the word drink, and that the concept DrinkingGla ss is a noun for  X  X  X rink X , we can deduce that the user is not interested in the instrument. Furthermore, searching for the word Bohemian returns two regions of the
Czech Republic. These two concepts are sub regions of the Czech Republic, so one could deduce that the user is interested in the Flute glasses made in such a country. The word drink was necessary to disambiguate the flute concept, but not necessary anymore. Hence, the query can be refined as  X  X  X hampagne + Flute + glass + Czech X . Submission of this query to Google results in 153,000 hits; 16 of the first 20 results are relevant to the user X  X  query.
 5. Observations and challenges
Although ResearchCyc has the potential for many domains and applications, several challenges emerge in its use, which can be divided into two categories. 1. Problems based on structure and representation of the ontology. 2. Problems based on usage.

These classifications are complementary because the first allows one to identify what part of the ontology should be mod-ified to reduce the search space for a given problem. The second indicates the processes that may be more difficult due to the ontology usage problems. 5.1. Problems associated with structure and representation
Several challenges arise when attempting to identify the most appropriate part of the upper level ontology (ResearchCyc or any other upper level one) to use for a given problem.  X  Actual content  X  whether the knowledge represented by the ontology is excessive or lacking or contains redundant information.  X  Support tools  X  whether the ontology tools exist and are adequate. Potential problems include: lack of graphical represen-tation and facilities to search and navigate through the ontology; high machine requirements; or functionality flaws.  X  Documentation:  X  lack or incorrectness of the documentation of the ontology or its tools.  X  Adopted language:  X  problems related to suitability of the language (or languages) used in the ontology.
Some of these problems are related to ontology content (maturity and learnability problems); most are not. See Fig. 2 . 5.2. Problems associated with usage
The SO/IEC 9126 quality model standard [18] defines a Software Quality Model. The reason for choosing this standard is because the problems are, not only related to the knowledge base of an upper level ontology, but also to the implementation (tools and browser).

Our classification ( Fig. 3) differentiates four kinds of problems:  X  Functionality: problems with the tools that support the use of ResearchCyc and their functions.  X  Usability: problems that deal with understandability, difficulty in learning the ontology knowledge, and difficulty in man-aging it.  X  Portability: technical problems that occur when trying to execute or install ResearchCyc in some environments.  X  Reliability: problems with the maturity of the ontology knowledge. 5.3. Problems identified In this section we classify the problems identified using ResearchCyc based upon the affected processes as outlined in Section 5.2. The following notations are used to denote the categories: C: Ontology content T: Ontology tools L: Ontology language D: Ontology documentation
For ResearchCyc, these problems are analyzed below, classified by their type.  X  Functionality problems:  X  Usability problems: These may be classified as:  X  Portability problems (T):  X  Reliability problems (C): 6. Suggestions for improving upper level ontologies
To address the challenges in using ResearchCyc, and other upper level ontologies, improvements are needed in the following areas: 1. Better documentation is required to describe the knowledge included in the ontology and the extent of its coverage. The documentation should be both human and computer readable. The documentation content should include: (1) the domains dealt with in the ontology, how deep they are, and their interaction, (2) other ontologies included or used and how, (3) the purpose for which the ontology and its described domains were created, and (4) other subjective infor-mation related to the whole ontology or its parts (domains or fragments). This subjective information may be, for exam-ple, reviews of people that used/queried the ontology. 2. Better classification of concepts in different domains (or contexts) is needed. Knowledge in the ontology may be inter-preted differently depending on the context. Cyc classifies the knowledge in the ontology differently according to differ-ent contexts using Microtheories. As contexts are interrelated, a taxonomy of contexts that describes their relationships would be helpful to identify the domains the ontology deals with. Obviously, the representation of contexts will make the ontology more generalizable. However, in Cyc, the taxonomy has some redundancy. A non-redundant domain tax-onomy that facilitates searching and helps the user determine the extent of knowledge represented in a domain would be useful. 3. Tools for searching and summarizing the concepts stored in the ontology are needed. There are some techniques that summarize conceptual schemas that may be applied to ontologies, such as the abstraction class diagrams [14]. These techniques can create an ontology that allows the user to identify the most relevant candidate terms the ontology deals with and the main relationships between them. Other techniques such as ontology pruning [33,4] or segmentation [19] may be used to select the part of the ontology in which the user is interested. These techniques can help the ontology user assess whether a domain is well represented or the extensions needed to adapt the ontology to his/her particular context. 4. Tools for graphical visualization of the content of the ontology would be useful when the user is a human. Unfortunately, some common ontology languages lack of a standard graphical representation. 5. Tools for browsing and navigating the content must be developed. Due to the size of Cyc, and the way its knowledge is represented, it is possible to visit all the neighbors of a relevant concept for the user without even noticing the concept X  X  existence. To facilitate searching the relevant elements in a neighborhood, tools that facilitate presenting and navigating through the content of the ontology are required. 6. Representation is usually geared towards human consumption but should also be focused on the consumption by appli-cations and software agents. Therefore, some mechanisms are necessary to help the non-human agents to determine whether the ontology is relevant to them, and, if so, help them to identify the specific, relevant parts. 7. Upper ontology management middleware
Many of the suggestions mentioned above are related to tool support; others to the ontology itself. Incorporating these suggestions for creating ontologies and building appropriate tools should significantly reduce the problems associated with large scale ontologies.

One way to address some of these problems with respect to ResearchCyc which will, hopefully, be generalizable to other upper level ontologies is to consider other approaches with large repositories of knowledge and the approaches that have been taken to make them more functionable. A notable example of this is the use of middleware, similar to Color-X and its interface with WordNet [11]. Color-X, attempts to bridge the gap between natural language and conceptual modeling techniques by developing a specification language (based upon natural language) with a graphical notation and using a lex-icon in natural language.

The Color-X method is implemented in a CASE-tool environment, which interfaces with WordNet++ [11]. This environ-ment consists of the following tools to support various functionalities in a scalable manner. The annotation tool is an ad-vanced text editor which supports scrolling and search options. It supports retrieving appropriate lexical information from WordNet++. The environment also has two graphical editors for creating Color-X static object diagrams and Color-X event diagrams. These editors perform requirements checks. The verifier tool performs syntax checks on single and multiple diagrams. The N L generator is a requirements validator that uses the lexicon. The finite state automata generator is used to generate language independent intermediate result of the code generation process. The code generator component generates
MOKUM [10] code. The system also uses several repositories such as a lexicon (WordNet++) and an application model repos-itory that stores previously created model parts and the relationships between them.

Thus, the design of the Color-X CASE-tool environment is modular and uses an open architecture such that each com-ponent can be modified independently and new components can be added to support additional functionalities. Just as the Color-X CASE-tool environment provides an interface to a large lexicon such as WordNet++, the same design ap-proach can be utilized in designing a middleware that can interface with a large upper level ontology repository such as ResearchCyc.

A major problem with existing upper level ontologies is the lack of a good user interface and a tool set that can be used to work with the ontology. The content of these ontologies is massive. Without adequate tool support, it becomes arduous to ontologies because of poor API. Thus, if an application attempts to retrieve relevant content from the ontology automatically ontologies widely usable, then, middleware that can act as the interface for both humans and applications would be helpful.
The upper ontology management middleware would need to support several functions as outlined below (see Fig. 4 ). 7.1. Architecture
The middleware should support the activities of both the end users who want to use the ontology for a particular task as well as the ontology engineers who create and maintain the ontology repository. Similar to how the Color-X CASE-tool environment provides an interface to WordNet++, our middleware provides an interface to ResearchCyc in supporting various functionalities to improve the use of ResearchCyc. To that end, the design of the middleware uses a modular archi-tecture with several components. The architecture of the middleware primarily consists of two major components: (a) ontology user component, and (b) ontology engineering component. The ontology user component provides tools for supporting the user in using the ontology in a meaningful manner. It contains the following modules: (a) browse mod-ule, (b) classification module, (c) representation module, (d) search module, (e) retrieval module, and (f) visualization module. The ontology engineering component provides tools for creating and maintaining the content of the ontology library. It contains the following modules: (a) documentation module, (b) content management module, and (c) import/ export module as described below.

Ontology user component : The Browse Module provides mechanisms for the user to browse and navigate through the content of the ontology. Often, users might want to obtain an understanding of the content of the ontology before using important for agents or applications for automatic retrieval of a fragment of the ontology by providing certain retrieval parameters. It facilitates ontology reuse. The Representation Module helps the user change the underlying representation of the ontology into other specific formalisms and representations. This will facilitate reuse of the content of the ontology by applications that are only equipped to deal with certain ontology representations that may not be commonly used. Thus, this module facilitates sharing of the knowledge contained in the repository and promotes interoperability between applications.

Since upper level ontologies may be very large, the Search Module provides basic mechanisms for searching the ontol-ogy using keywords or natural language. It also provides advanced search mechanisms to retrieve the candidate knowl-edge the user is searching for. This advanced search must provide disambiguation facilities, query expansion, and refinement facilities and use synonymy information and an inference engine to retrieve inferred results. After the search, the results must be preprocessed in a way that gives maximum information to the user. This might involve creating views or summaries of query results and their related concepts. Abstraction [14], pruning [4] and segmentation [19] techniques may be applied. The Classification Module provides such functionalities. The Visualization Module helps present the ontology content using visual formalisms. For example, responses to user queries may be represented graphically.
Thus, when the user is a human, the system should present the knowledge contained in the ontology graphically. Obvi-ously, the graphical interface needs to provide browsing facilities to allow the user the navigation through the ontology.
These browsing facilities should not only be limited to navigate through the taxonomy or the relationship types, but also through contexts.

Ontology engineering component : This component is used by the domain analyst or knowledge engineer for man-aging the upper ontology repository. The Documentation Module provides facilities for generating additional documen-tation regarding the content of the ontology, provide templates for creating different types of documentation, customized documentation, etc. The Content Management Module is used by the domain/knowledge engineer to perform repository maintenance operations. For example, it would provide tools for reorganizing the ontology, adding additional content to the repository, updating the ontology content, checking for the consistency of knowledge stored in the ontology, changing the storage mechanisms etc. This module takes care of the overall repository management func-tions. The Import/Export Module provides tools and mechanisms for importing or exporting the content of the ontology from other sources. The import function permits the ontology repository to evolve by adding new ontologies from external sources.
 7.2. Implementation
The implementation of the middleware is currently underway using J2EE technologies. It uses a web based client-server architecture where the user can invoke the functionalities provided by the middleware using a standard browser. Each of the modules is implemented as a set of Servlets and Java Server Pages (JSP) that make use of the standard repository API. Each module provides a number of features to accomplish a particular task. For example, the search mechanism provides appro-priate interface for specifying search queries using natural language. Some sample screenshots from the system that is cur-rently under implementation are shown below.

Fig. 5 shows the search interface where the user can enter a search query using keywords or natural language. The user can also specify the depth of the relationships to be considered in retrieving the related concepts. For example, the user can specify that only the immediately related concepts should be retrieved by adding the  X  X  X ne Level X  constraint. Fig. 6 shows the results of the concept search for automobile. If a natural language query is entered, it is parsed and the main concepts iden-tified and listed on the left hand side column. The user can select a particular concept and click on the Visualize button to view a graphical representation of the concept and the related concepts along with their relationships. This is shown on the right hand side column. The user can also select a main concept and click on the Subtypes or the Supertypes button to view the subclasses and the superclasses of the concept. The main concepts and the related concepts have a check box associated with them. By clicking on these check boxes, the user can select the desired concepts and click on the submit button to re-trieve them. 7.3. Discussion
Even though the proposed interfaces and functionalities of the middleware are simple, they greatly improve the usability of ResearchCyc. In particular, the tool related problems presented in Section 5 can be solved, or at least greatly minimized, with the middleware. Some of the salient characteristics of our middleware are: (a) synonyms are used to obtain better and more efficient results in the query module, (b) the tool provides an API for allowing automatic access to the ontology by using some very basic API calls based on web-services that provide upper level functionalities, (c) the graphical representa-tion of an ontology, (d) partial selection is allowed since different terms may be queried together and partial views of an ontology are provided as shown in Fig. 6 , and (e) the middleware is accessible from anywhere and any platform because the only requirement to access it is a web browser. The only problem that is not directly solved using our middleware is that of requiring a powerful server for running ResearchCyc because the ontology should be stored and its engine available to be queried from our prototype.

The presented middleware has been conceived primarily with ResearchCyc in mind. However, it can be redesigned to al-low for managing other kinds of ontologies such as OWL ontologies, UMLS, etc. To do so, we need to implement an interface for translating to and from our internal representation of ontologies to the language to be dealt with. This will improve the scope of the middleware because it will be able to include new ontologies into the repository by adding a new translation plug-in to the middleware specific to each language. 8. Conclusion
Upper level or large scale ontologies are intended to support a wide range of applications that require knowledge about the real world. This research has distinguished these large scale ontologies from domain ontologies and ana-lyzed ResearchCyc, a version of the most well-known upper level ontology. The use of ResearchCyc for web query improvement, and other applications, has the potential to be very successful. However, the quantity of information it contains, and the lack of mechanisms that organize this information in a usable way, makes ResearchCyc difficult to use. Although ResearchCyc has been used successfully in a number of projects, its use in our project related to web query expansion has not been highly successful mainly because of problems with retrieval and application of context-appropriate knowledge for query expansion. This may explain why only a few researchers are currently using it. Fur-thermore, ResearchCyc has very little linguistic information compared with other lexical ontologies such as WordNet.
In particular, in ResearchCyc, the denotations of all the concepts are not defined, with only a few synonyms and ant-onyms represented.

It would, however, be worthwhile to use ResearchCyc to support web queries. One reason is because it is the only ontol-ogy that contains linguistic, semantic and factual knowledge. Also, its knowledge covers more domains than other large scale upper ontologies. Furthermore, there are efforts underway to improve the Cyc knowledge with linguistic information from WordNet and factual information from the World Wide Web [22,26] . These efforts would reduce its maturity problems.
One of the factors that make the use of ResearchCyc a very arduous and time-consuming task is the lack of good interfaces and tools for dealing with large ontologies. This work proposes a middleware application to facilitate the effective use of
ResearchCyc. This middleware can be easily extended for use with other ontologies and should greatly reduce the usability problems of large, upper level ontologies.

Obviously, small ontologies are more usable than large ontologies such as Cyc. The question is whether the knowledge con-tained in large ontologies is better compared to ResearchCyc. To address this question experimentation is needed in which knowledge of different domains is compared to the knowledge represented in large ontologies. Doing so will require tools that provide support for ontology creation, such as Proteg X , to import domain ontologies. Then, we will compare these ontologies with each other, and against other large ontologies such as ResearchCyc. Our future work will include investigating whether the problems found with ResearchCyc are representative of most upper level ontologies. Finally, our future work will also in-volve an empirical study and detailed analysis of the usefulness of the proposed middleware in applications using ResearchCyc.
 Acknowledgement This work has been partly supported by the Ministerio de Educacion y Ciencia under project TIN 2008-00889-E, Georgia State University, and Sogang Business School X  X  World Class University Program (R31-20002) funded by Korea Research Foundation.

References
