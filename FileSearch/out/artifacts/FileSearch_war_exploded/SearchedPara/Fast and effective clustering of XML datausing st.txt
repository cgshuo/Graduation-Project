 Richi Nayak Abstract This paper presents the incremental clustering algorithm, XML documents Clus-tering with Level Similarity (XCLS), that groups the XML documents according to structural similarity. A level structure format is introduced to represent the structure of XML documents for efficient processing. A global criterion function that measures the similarity between the new document and existing clusters is developed. It avoids the need to compute the pair-wise similarity between two individual documents and hence saves a huge amount of computing effort. XCLS is further modified to incorporate the semantic meanings of XML tags for investigating the trade-offs between accuracy and efficiency. The empirical analysis shows that the structural similarity overplays the semantic similarity in the clustering process of the structured data such as XML. The experimental analysis shows that the XCLS method is fast and accurate in clustering the heterogeneous documents by structures. 1 Introduction The Web has become a dominant source of information exchange. Information is increas-ingly being created, exchanged and stored in the eXtensible Markup Language (XML) [ 23 ]. XML is used because of its flexibility and self-describing nature. Some examples of XML-based Web data include technical journals, bibliographical databases, Yahoo, EBay, and the government departments. The widespread adoption of XML as the main standard for both data and meta-data representation has led to the massive amounts of collection of XML data. Therefore, the methods are needed for finding useful knowledge from the vast amount of heterogeneous XML documents.

Several database tools are developed to deliver, store, integrate and query the XML data [ 6 , 10 , 15 , 22 ]. However, they do require efficient data management techniques such as index-[ 16 , 18 ]. The data mining technique such as clustering can facilitate these applications by grouping XML documents according to their structural similarity. The computation of struc-tural similarity is also a great value to the management of the Web data. Many techniques for the extraction and integration of relevant information from several Web data sources require grouping the data according to their structural similarity [ 8 ].

Clustering techniques have been around for several years for grouping the numerical, symbolic and text data [ 11 ]. Clustering of XML data significantly differs from the clustering of flat data and text, and is more complex. Firstly, XML allows in embedding the semantic and structural aspects to document contents, resulting in the semi-structured and hierarchical data. An XML document contains tags and the data enclosed within those tags [ 23 ]. The tag, that describes the element name, includes the semantics in the form of text data. The tags also define the structure of an XML document showing the relationships between elements of the document. The XML clustering algorithms should handle both semantic and structural aspects in the process. Secondly, everyone can design their own XML documents with great flexibility and few restrictions, in both structure and semantics. The heterogeneity in XML documents presents many challenges to find similarity among the XML documents.

Several XML data clustering methods [ 5 , 12  X  14 , 16 , 17 , 19 , 25 ] have been suggested, but there remains some problems. The major problem is scalability. Majority of these meth-ods rely on the notion of tree edit-distance developed in the combinational pattern-matching methods [ 25 ] to find common structures in tree collections. The process usually starts by con-sidering tree structures derived from the XML documents. To measure the similarity between two tree structures, the similarity of each pair of tags (or element names) of two trees is mea-sured and aggregated to form a similarity measure (distance) between them. A similarity matrix is generated that contains the similarity value for each pair of documents. This matrix becomes the input for the clustering process using either the hierarchical agglomerative clus-tering algorithm or the k -means algorithm [ 11 ]. The generation of similarity matrix can be computationally expensive when dealing with large data due to the need for the pair wise similarity matching among diverse documents.

This paper employs a different strategy from the pair-wise clustering approaches. It is inspired by the clustering algorithms developed for transactional data, LargeItem and Clope [ 21 , 24 ] that do not need to compute a pair-wise similarity. These methods define the clus-tering criterion function (or the global similarity measure) on the cluster level to optimize the cluster parameters. Each new data is compared against the existing clusters instead of comparing the individual data. The computation of global metrics is much faster than that of the pair-wise similarity metrics. However, LargeItem and Clope [ 21 , 24 ] cannot be applied to cluster the XML data since these methods do not consider the hierarchical structure of a document, (i.e., the level positions, context or relationships of elements).
 Utilizing the concept of global similarity measure, the XML documents Clustering with Level Similarity (XCLS) method for effectively grouping the heterogeneous XML docu-ments according to similar structure is presented in this paper. Another strength of XCLS is its Level Structure format that is developed to represent the documents efficiently for the clustering process. The semantics that is included in the tag names is ignored for generat-ing the Level structures for gaining speed in the clustering process. Instances, the content within the tags, are also not included in the clustering process. The novel global criterion function, called LevelSim measures the similarity at clustering level utilizing the hierarchal relationships between elements of documents. The experimental results show that XCLS is an accurate, fast and scalable method for grouping XML documents.

XCLS is then extended by incorporating the semantics included in the tags and investigated for the improvement. Each element of the XML document is compared with the elements of other XML documents for determining semantic similarity, and then clustering is performed. Several experiments are conducted to answer questions such as how important is the semantic similarity computation in finding clusters while dealing with XML documents. The empirical analysis reveals that the semantic measures do not play a major role in grouping the XML documents. The hierarchical relationships that exist in the XML data partly contribute to the semantic similarity.

This paper is organized as follows. The next section discusses the XCLS algorithm that groups the XML data by similar structures. Section 3 discusses the extended XCLS algo-rithm, XCLSE, which groups the XML data by similar structures with semantic checks at element level. The efficacy of XCLS and the influence of semantic similarity in grouping XML documents are analyzed by conducting extensive experiments in Sect. 4 . 2 XML documents clustering with LevelSim by structures Definition Given a set of XML documents D , the clustering solution C ={ C 1 , C 2 ,..., C q } [
C i  X  C j = ] for any 1  X  i , j  X  q ,where n is the number of XML documents; q is the number of clusters. C i denotes a cluster in the clustering solution.

Figure 1 shows an overall view of the XCLS method. Firstly, each XML document or its equivalent tree model is represented as the Level structure format. Progressively, the cluster-ing algorithm groups the documents according to the LevelSim measure. This global criterion function measures similarity at the clustering level considering the hierarchical structures of the XML documents. Each new document is compared with existing clusters instead of computing the similarity between each pair of documents.
 2.1 Level structure: inferring of XML documents structure Due to the flexible nature of XML documents, it cannot be assumed that each XML document on the Web has a schema that defines its structure. Additionally if they have one, many docu-ments depart from their structure definitions through multiple modifications. To be applicable to general Web documents and any type of XML documents (viz. well-formed, valid and ill-formed), the XCLS algorithm starts with inferring the structural information within the document. The documents are first represented as the ordered labeled trees. Each tag (or element name) is denoted by a distinct integer according to their appearance order. In doing so, we loose the semantic (or linguistic) information that can be inferred from the tag name; however, the clustering speed is improved. Figure 2 shows an XML document (X_Movie) and its corresponding structural tree (T_Movie).

When inferring the structure, the focus is on the paths of elements with content values (i.e., leaves in a document tree) without considering attributes in the document. The inferred structure preserves the hierarchy and the context of the document. XCLS does not consider the order of siblings when computing the similarity as the siblings order is not important for clustering. The multiple instances of values at same level are stored for an element as the occurrence of elements is important for clustering.

The level structure shows the levels and the tags in each level of a tree structure. It contains the information such as element names, their occurrences and levels in the hierarchy. Figure 3 shows the level structure for T_Movie presented in Fig. 2 . A cluster is also represented as a level structure. Each level of a cluster contains a collection of elements of the same level for all documents that are held within the cluster. Figure 4 shows the level structure of a cluster containing the  X  X ovie X  and  X  X ctor X  documents. The tree structure of a document on  X  X ctor X  information and its corresponding level structure are shown in Fig. 5 . 2.2 Level similarity (LevelSim): global clustering criterion function A new solution for measuring the structural similarity between two XML objects represented as level structures is developed which is called Level Similarity ( LevelSim ). An object can be a document as well as cluster. 1 Elements are matched according to the level information of each object. LevelSim measures the occurrences of common elements in each correspond-ing level. Elements in different level positions are allocated different weights. For example, the higher level (e.g., root) has more weight than the lower level (e.g., leaf). This is due to the assumption that the documents with different root nodes have higher chance of being assigned in different clusters. The hierarchical relationships of elements are also considered by counting occurrences of common elements sharing common ancestors.

The LevelSim measure in comparing the object 1 (document) with the object 2 (cluster) is as follows: where:
LevelSim returns the value between 0 and 1, where 0 indicates completely different objects and 1 indicates identical objects.

The operation LevelSim is not transitive. The order of matching between two objects is important due to the structural information present in each XML document. The Level Similarity between two objects is determined by measuring both LevelSim 1  X  2 and Level Sim 2  X  1 , and then by choosing the larger value: 2.3 Process of structure matching between two objects The steps of matching the elements of a document (object 1) to the elements of a cluster (object 2) are as follows: 1. Start with searching for common elements in the first level of both objects. If at least one 2. Move both objects to next level (level i ++, level j ++) and search for common elements in 3. Only move object 2 to next level (level j ), then search for common elements in the 4. Repeat the process until all levels in either object have been matched.
 Example Consider two documents:  X  X ovie X  and  X  X ctor X  (as shown in Figs. 2 and 5 , respec-tively). Initially object 1 is  X  X ovie X  and object 2 is a cluster that only contains  X  X ctor X . The comparison between these two objects is shown in the first case (as the top half) of Fig. 6 .Let us assume that these two documents are put together in a cluster. The second case (the bottom half) in Fig. 6 shows the matching between another  X  X ovie X  document and the cluster that now contains both  X  X ctor X  and  X  X ovie X  documents.

Consider a case when the object 2 is a sub-part of the object 1 as shown in Fig. 7 .The matching of object 1 to object 2, LevelSim 1  X  2 results in 0.0. However, the matching result of object 2 to object 1, LevelSim 2  X  1 is 1.0:
LevelSim 2  X  1
This shows that the operation LevelSim is not transitive. We solve this problem by choosing the larger value between these matching. Both LevelSim 1  X  2 and LevelSim 2  X  1 are measured and the larger value between those two is chosen, the resulting LevelSim between two objects becomes 1.0. 2.4 Clustering with level similarity The next task is to group the XML documents within various XML sources considering LevelSim . Motivated by incremental clustering methods [ 21 , 24 ], the clustering algorithm progressively places each coming XML document into a new cluster or into an existing clus-ter that have the maximum level similarity ( LevelSim ) with it. The XCLS algorithm uses a user-defined threshold LevelSim_Threshold below which the cohesion between two objects is not considered i.e., LevelSim &lt; LevelSim _ Threshold . Figure 8 outlines the algorithm that includes two phases namely allocation and reassignment. In the allocation phase, clusters are progressively formed driven by LevelSim .
The incremental clustering methods are usually criticized for being sensitive to the order in which the input data appears and, as a result, for only providing the local optimum solutions. XCLS incorporates the reassignment phase to handle the documents those are misplaced in clusters due to the initial order of entry. In the reassignment phase, as the name suggests, the derived clustering solution is refined by optimizing the LevelSim between each (randomly selected) new document and existing clusters. This phase consumes only a small number of iterations. 3 Incorporation of semantics in XCLS: element level (XCLSE) This section presents the semantic measures in XCLS at the individual element level before the structural clustering process begins. Each element of an XML document is first compared with the elements of other XML documents for the semantic similarity, and then clustering is performed. The LevelSim equation explained in the previous section is modified to incor-porate the semantic meanings of the element names. Instead of changing the element names into distinct numbers during the pre-processing phase in XCLS (Figs. 2 and 3 ), actual names are processed now. 3.1 Pre-processing of element names In a heterogeneous and flexible environment as the Web, element names of XML documents often can be a combination of lexemes (e.g., SigmodRecord, Act_Number), a single letter word (e.g., P for person), a preposition or a verb (e.g., related, from, to). This can make the two same tags syntactically different. Therefore, pre-processing of element names is necessary to improve the matching between two documents. Tags are pre-processed in two steps: 2. Elimination: tokens that are not letters or digits will be eliminated, as well as any extra-
A token set is formed for each element containing all the tokens. The token set also includes the synonyms, hyponyms etc. of each token that are retrieved from WordNet [ 7 ]. WordNet is a thesaurus in which each word token is associated with corresponding alternative meanings, known as synonym set or synset . The retrieval of the synonym set (e.g., movie  X  film) is done in this phase because the cost of accessing the WordNet in the clustering phase is too expensive. The synset includes all the synonyms of each token by only going down the first synset level of WordNet, thus reducing the time of accessing WordNet. 3.2 Matching element names Due to the flexibility in the design of XML documents, similar but un-identical elements can represent the same notion. Element names can be semantically similar (if two names are synonyms, e.g., person or people) or syntactically similar (e.g., edit or xedit). Four measures namely prefix, suffix, semantic and syntactic are utilized to determine the degree of similarity between names. The prefix and suffix measures are used prior to the semantic and syntactic measures.

The Prefix measure checks whether one tag name starts with the other. For example,  X  X ele-phone X  and  X  X elephoneno X  under the  X  X ontact X  tag could mean the same thing. The smaller word replaces the larger word if two words in a token set are found in the vicinity of 0.8 similarities showing the higher similarity in terms of sharing the similar characters. Similarly, the Suffix measure checks whether one input label ends with the other. The prefix and suffix measures are efficient in matching cognate words and similar acronyms but often syntactic similarity does not imply semantic relatedness. For example,  X  X ot X  has large prefix similar-ity with  X  X otel X , but it is wrong to say that  X  X ot X  equals  X  X otel X . We require the additional semantic measure to find similarity. That is why, the semantic and syntactic measures are appliedtothetokensets.

The Semantic measure determines the meaning of an element X  X  name, which includes information such as the synonym, hyponym etc. In the pre-processing phase, the token set including the synset is formed. The remaining task now is to find a common element in the token set of two tags. The Syntactic measure on the other hand, does not take the meaning of the tags into consideration but helps to identify abbreviations and acronyms that are com-monly used in XML data. XCLSE utilizes string edit distance [ 20 ]and n -gram functions [ 9 ] to measure the syntactic relationship between token names to ensure the accuracy and to reduce the mismatches of element names. The average of both methods is used to measure the degree of syntactically similarity.

The string edit distance method calculates the cost of transforming one token into another token by using the editing operations (insertion, deletion, or substitution). It is defined as where edit_distance ( t 1 , t 2 ) denotes the string edit distance function between two tokens t 1 and t 2 . On the other hand, the n -gram method counts the same sequences of n characters appear between two tokens. We use 2-grams (di-grams), an example of 2-grams for the token customer is cu, us, st, to, om, me, er .Itisdefinedas: where A is the number of unique n -grams in the first token, B the number of unique n -gram in the second token, and C is the number of unique n -grams common of the two tokens. For example, consider tokens: customer and customer1 , the syntactic similarity between the two is 0.933:
By using both string edit distance and n -gram methods, XCLSE are effective in matching acronyms and words with syntactic differences (e.g., PO and PO1 ).

In the pre-processing phase, each tag is tokenized into a set of tokens, T . The name similarity of each pair of tags is calculated based on either the semantic or the syntactic rela-tionships. The semantic relationship is first applied. If a pair of tags is semantically matched then the semantic similarity is returned 0.8. If there exists a case where semantic relationship between two tokens can not be measured (no synonyms exist in synset for any tokens), the syntactic relationship is then investigated.

The name similarity coefficient ( Nsim ) between a pair of tags is defined by the average of the best similarity of each token with a token in the other set, same as Cupid [ 14 ]: where | T 1 | and | T 2 | are the length of the token sets for two tags.

The output of the Nsim coefficient is in the range of [0, 1] indicating the strength of the tag similarity. High values correspond to similar tags (i.e., 1 indicates identical tags), whereas low values correspond to different tag names. 3.3 Structure matching and clustering The LevelSim measure in XCLS is modified to adapt the semantic measure while matching two objects. Instead of counting the number of common elements in LevelSim ,thesumof the NSim similarity coefficients is returned. We only include the NSim coefficients for the elements whose matching values is greater than a user-defined threshold value (usually in the range of 0.6 X 0.8).
 The modified LevelSim is as follows:
LevelSim 1  X  2 = where all other values are same except NSim i 1 and NSim j 2 .

NSim i 1 : Sum of the similarity coefficient of every element that exceeds a threshold in
NSim j 2 : Sum of the similarity coefficient of every element that exceeds a threshold in The rest of the clustering process utilizing LevelSim is same as in XCLS that is explained in Sect. 2.4 . 4 Experimental evaluation and discussion The XCLS and its variation algorithm XCLSE are evaluated on several data sets with vari-ous evaluation criteria. Two hypotheses are justified: (1) the global criterion function-based clustering can group the XML documents effectively, and (2) the structural information is sufficient for grouping the heterogeneous XML documents that are document-centric. To show the comparison between the pair-wise and global criterion-based clustering, the data sets are also clustered by using the constrained hierarchal agglomerative clustering algorithm, wCluto [ 4 ]. A similarity matrix is generated by measuring the similarity between each pair of documents in the database, and then wCluto is applied to group the documents utilizing the similarity matrix. 4.1 Data set The data used in experiments are (1) the XMLFiles data set obtained from [ 1 , 2 ]; and (2) the MovieDB corpus obtained from [ 3 ]. The XMLFiles data set contains 460 XML documents. The documents are from various domains such as (Movie (#Documents: 74), University (22), Automobile (208), Bibliography (16), Company (38), Hospitality message (24), Travel (10), Order (10), Auction data (4), Appointment (2), Document page (15), Bookstore (2), Play (20), Club (12), Medical (2), and Nutrition (1). The number of tags varies from 10 to 100 in these sources. The nesting level varies from 2 to 15. Majority of these domains contains a number of different documents that have structural and semantic differences. Hence, even though documents are from the same domain, they might not be considered similar enough to be grouped into the same clusters.

The MovieDB corpus has 11 thematic and 11 possible structure classes. The MovieDB collection is derived into many versions (m-db-s-0, m-db-s-1, m-db-s-2 and m-db-s-3) after a series of transformation for adding the complexity in the clustering process making each later version more difficult than former. Each movie set contains 4818 XML files. The MovieDB corpuses have 190 X 200 distinct labels (tags). 4.2 Evaluation criteria The performance of XCLS and XCLSE is evaluated using the standard criteria namely intra-and inter-cluster similarity, purity, entropy and FScore [ 26 ]. The entropy, purity and FScore are external cluster quality evaluation based on the comparison of clusters X  classes to known external classes, whereas, the intra-and inter-cluster similarity are internal cluster quality evaluation criteria.
 The intra-cluster similarity measures the cohesion within a cluster, how similar the docu-ments within a cluster are. This is computed by measuring the level similarity between each pair of documents within a cluster. The intra-cluster similarity of a cluster C i is the average of all pair-wise level similarities (between two trees) within the cluster: where n is the number of documents in C i .

The Level Similarity between two trees is quite similar to the level similarity measure between a tree and a cluster as defined in Sect. 2.2 .Itisdefinedas: where
The intra-cluster similarity of a clustering solution C ={ C 1 , C 2 ... C k } is the average of the intra-cluster similarities of all clusters taking into consideration the number of documents within each cluster: where n i is the number of documents in C i , N is the total number of documents and k is the number of clusters in the solution. Higher the intra-cluster similarity value, better the clustering solution is.
 The inter-cluster similarity measures the separation among different clusters. It is computed by measuring the level similarity between two clusters. The inter-cluster similarity of the clustering solution is the average of all pair-wise level similarities of two clusters. The Level Similarity between two clusters is defined as similar to two documents, using the objects as clusters: where The inter-cluster similarity for the clustering solution C ={ C 1 , C 2 ,..., C k } is: where k is the total number of clusters. Lower the inter-cluster similarity value, better the clustering solution is. The entropy measure looks at how the various classes of documents are distributed within each cluster. Given a particular cluster C i of size n i , the entropy of a cluster is defined as Where k is the number of classes in the dataset, and n r i is the number of documents of the r th class that are assigned to the i th cluster. The entire clustering solution entropy is the sum of the individual cluster entropies weighted according to the cluster size. The formula is given here:
A perfect clustering solution will be the one that leads to clusters that contain documents from only a single class, in which case the entropy will be zero. In general, smaller the entropy value, better the clustering solution is.
 Purity measures the extent to which each cluster contains documents primarily from one class. The formula of purity of a cluster is:
The purity of entire clustering solution is obtained as a weighted sum of the individual cluster purity: In general, larger the value of purity, better the clustering solution is.
 FScore is a combination of precision and recall. Precision define the rate of correct matches in the generated solution, and Recall define the rate of correct matches in the model solution.
Given an XML document category Z r with the n r number of similar XML documents, and a cluster C i with the n i number of similar XML documents categorized by the clustering algorithm. Let n r i be the number of documents in cluster C i belonging to Z r . Precision (correctness) is defined as: p ( Z r , C i ) = n r i / n i Recall (accuracy) is defined as: r ( Z r , C i ) = n r i / n r .
 The FScore combining precision and recall with equal weights is defined as:
The FScore value of a category Z r is the maximum FScore value attained in any cluster of the clustering solution. Hence, the FScore of the overall clustering solution is defined as the sum of the individual class FScores weighted differently according to the number of documents in the class: where k is the number of clusters. A good clustering solution has the FScore value closer to one. 4.3 Scalability evaluation Space complexity The XCLS and XCLSE require only the information of the current document (in process) and a small amount of information of each cluster in the RAM. The document structure X  X  information, called structure features, includes the number of levels and its level structure containing all distinct elements in each level. The cluster X  X  information, called cluster features, includes the number of documents and the level structure containing all distinct elements in each level of the cluster. Since just one document structure is kept in RAM, only the memory consumed by the level structures of clusters need to be analyzed for the space complexity.

Suppose that the maximum number of levels is N and the average number of elements in is approximately N * M *8 bytes using the array of 2*4-byte integers (4-byte for element id, 4-byte for occurrences). Therefore, an XML document with up to 50 levels and an average of 20 elements in a level of a level structure can fit into an 8M (50*20*8*1 k ) RAM with a clustering level structure of 1 k .
 Time complexity The time complexity of pair-wise clustering algorithms is at least O ( m 2 ) , where m is the number of elements of the documents. This is infeasible for large amount of data. XCLS computes the structure similarity between the document structure and clusters avoiding the need of pair-wise comparison. Its time complexity is O ( m  X  c  X  p  X  n ) : m is number of elements in documents; c is number of clusters; p is number of iterations; n is number of distinct elements in clusters.

The documents grouped into a cluster should have similar structures and elements. So the number of distinct elements of clusters is always less than the distinct elements of documents. The number of iterations is usually small and its maximum can be configured. (The maxi-mum is set as 6.) Therefore, if the number of clusters is less than the number of documents (that is usually the case) the time cost is linear to the number of documents. After adding the semantic measure in XCLS, the time complexity of XCLSE is O ( 2  X  m  X  c  X  p ) that is still linear to the number of documents.

Figure 9 shows a comparison of the time taken to cluster the XMLFiles data with XCLS and XCLSE. It also shows the performance of clustering with the pair-wise clustering method wCluto. The pair-wise similarity matrix for wCluto is generated in two ways: one without incorporating any semantic measure (labeled as pair-wise) and another one with incorporating semantic measures as explained in Sect. 3 [labeled as Pair-wise(s)].

Figure 9 shows that the pair-wise computation time increases extremely large as the num-ber of XML files increases, whereas there is no significant difference in computation time of XCLS. The computation time of XCLSE only increases in a small amount with respect to the number of XML files. The original XCLS without any semantic measure is extremely fast, finishing the clustering entire data set only in 17.2 s. In comparison, the pair-wise clustering algorithm took 19 min to cluster the entire data set when the similarity matrix did not include the semantic measure. The XCLSE clustering took 45.3 min. The pair-wise(s) clustering algorithm with semantic similarity measure took extremely long, finishing of clustering the entire data set in 333 min. 4.4 Quality evaluation Ta b l e 1 reports the quality performance of XCLS and XCLSE. All methods give a good performance on XMLFiles in comparison to MovieDB datasets. There is an excessive time to compute the semantic similarity in XCLSE in comparison to XCLS for all the data sets. XCLSE rarely produces better quality of clustering solution in terms of higher FScore, higher Purity and lower entropy in comparison to XCLS. Moreover, the improvement (if any) is not significant.
 Semantics vs. structural information Ta b l e 1 shows the number of clusters in the final clus-tering solution. The XCLS and XCLSE do not require the cluster number to be given in the beginning; rather they produce the clusters as required. The results reveal that XCLSE produces the same number of clusters as in XCLS. It shows that the structural similarity computation overplays the semantic similarity at element level in XCLSE and the overall clustering is almost same as XCLS.

It is interesting to see that both XCLS and XCLSE performed similarly in the entire movie corpuses, even though the transformations on the MovieDB collection have been defined so that each series should be more difficult to cluster than the preceding. For example, the second MovieDB data set classes have a higher overlap than for the first one to make the clustering more difficult. This shows the strength of the clustering criteria and the structure matching approach that XCLS includes.

The contingency matrix for all the MovieDB data sets shows that XCLS can group most documents belonging to the same class into one cluster; it seldom puts them into separate clus-ters. However, it sometimes groups documents from several classes into one cluster because of their higher level similarity, reflecting the somewhat lower values obtained for Purity and FScore and higher value obtained for Entropy. Many reasons can be considered behind this.
Due to the nature of XCLS, documents are not compared with each other, but, each docu-ment is compared with the existing clusters. Additionally, XCLS does not only consider the parent X  X hild relationship to measure the structural similarity, but also include the ancestor relationships of the data. This makes it more appropriate for clustering the heterogeneous data. Therefore, XCLS performs excellent in heterogeneous environment like XMLFiles, but not as good as in the homogenous environment data such as the MovieDB corpus. Also, the MovieDB data is a set of ordered documents. XCLS does not consider the order of siblings in computing the similarity.

XCLS is modified to take the semantic differences into consideration such as synonyms, hyponyms, hypernyms between two terms (or tags). The results, however, indicate that there is no significant improvement by applying XCLSE, except the degradation in time perfor-mance. This points out that the structural relationships of data partly contribute to semantic similarity if they are structurally similar. The hierarchical structure and relationship between elements are sufficient to measure the similarity between XML documents.
 Pair-wise vs. global criterion similarity function The performance of XCLS is thoroughly compared with the pair-wise clustering algorithm using the XMLFiles data set. The objective of clustering is to maximize the intra-class similarity in clusters and find the compact clusters. XCLS demonstrates this by achieving the intra-class similarity value to 1 as the number of clusters increases (Fig. 10 ).

Another objective of clustering is to minimize the inter-class similarity and find the well-separated clusters. Due to the nature of the XCLS algorithm, documents are allocated to the same cluster only if there is any similarity exists, otherwise the new clusters are formed. This causes the inter-class similarity among clusters to be near 0 from the very beginning of the process (Fig. 12 ). This also proves that XCLS does not need much iteration in the second phase, only minor adjustments are made in the consecutive passes.

Figure 12 shows the value of FScore near 1 showing that the data is clustered into groups according to natural distribution of domains in the XMLFiles data.

The graphs in Figs. 9 , 10 , 11 , 12 indicate that the incremental clustering algorithm XCLS achieves the similar quality results as the pair-wise clustering algorithms in much less time. Sensitivity evaluation There are two important parameters in XCLS: base weight and simi-larity threshold. Several experiments are carried out with different base weights and different similarity thresholds. Result concludes that XCLS is not sensitive with the parameters (base weight and similarity threshold). Since  X  X ase Weight X  means the increasing factor of weight for items in higher level, it must be larger than 1, and usually the suitable value is between 1.3 and 2. Similarity Threshold means the minimum value of level similarity in grouping a document to an existing cluster, so Similarity Threshold has the same range as the value of level similarity which ranges from 0 to 1. The results are excellent when it is between 0.5 and 0.7.
 Experiments are also evaluated to test the sensitivity of XCLS toward the input order. The clustering solutions do not significantly differ in quality and scalability, showing the input order independence of XCLS by inclusion of the reassignment phase in the clustering process. 5 Conclusion and future work A novel algorithm, XCLS, for clustering the heterogeneous XML documents by their struc-LevelSim . A new data structure, level structure, is proposed to include the hierarchal rela-tionships between elements. The widely used clustering algorithms use a locally defined criterion function based on pair-wise similarity between two objects. However, the computa-tions of a pair-wise matching approach is expensive for large databases in comparison with an incremental approach using the global similarity measure.

The XCLS does not compute the pair-wise similarity between two individual documents to determine the distance (or similarity) matrix for clustering. It rather computes the LevelSim to quantify the similarity between an XML document and existing clusters utilizing struc-tural information of the documents. It then progressively groups the XML documents to the cluster with the maximum level similarity. The LevelSim emphasizes different importance of elements in different level positions by allocating different weight to them. The hierarchical relationships of elements are also considered by only counting common elements sharing common ancestors. The derivation of the level structure from an XML document is straight-forward and the computation of LevelSim is quite effective. This simple idea behind XCLS makes it accurate, fast and memory saving in clustering. The experiments confirm that XCLS is a scalable (linear time cost), robust (independent of the data input order and less sensitive to parameters) and effective (good clustering quality) clustering algorithm for diverse and heterogeneous XML documents.

The XCLS is further modified to include the semantic measures in clustering and explored the influence of semantic computation in structured data such as XML. The empirical anal-ysis reveals that a significant computation effort is required in incorporating the semantic computation in XML data, as expected. However, there is no corresponding improvement in clustering quality. The hierarchical structure and relationship between elements are sufficient in measuring the similarity between XML documents.

The XCLS algorithm has its broad applicability such as in creating the hierarchical indexes of a large number of XML documents for browsing, in discovering element patterns when describing a specific object, in efficiently retrieving relating information for a query, and in creating learning models for the documents classification.

In future, the XCLS algorithm will be improved by combining both the pair-wise and incremental clustering approaches into its calculation. Also, XCLSE only includes the  X  X tring based X  element level linguistic measures for semantic incorporation. There are some other popular semantic measurers can be incorporated, for example,  X  X ense based X  and  X  X loss based X . By considering these measurers, the semantic similarity comparison can be more accurate.
 References Author Biography
