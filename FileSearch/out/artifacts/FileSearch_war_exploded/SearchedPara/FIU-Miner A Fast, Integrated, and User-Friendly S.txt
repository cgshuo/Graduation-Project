 The advent of Big Data era drives data analysts from differ-ent domains to use data mining techniques for data analy-sis. However, performing data analysis in a specific domain is not trivial; it often requires complex task configuration, onerous integration of algorithms, and efficient execution in distributed environments. Few efforts have been paid on developing effective tools to facilitate data analysts in con-ducting complex data analysis tasks.cloud:jplc2011 In this paper, we design and implement FIU-Miner, a F a st, I n tegrated, and U ser-friendly system to ease data anal-ysis. FIU-Miner allows users to rapidly configure a com-plex data analysis task without writing a single line of code. It also helps users conveniently import and integrate differ-ent analysis programs . Further, it significantly balances re-source utilization and task execution in heterogeneous envi-ronments . A case study of a real-world application demon-strates the efficacy and effectiveness of our proposed system. H.2.8 [ Database Management ]: Database Application-Data Mining Distributed Environment;Hadoop;Data Mining;Workflow
As the data scale and complexity increase explosively, the tasks of discovering knowledge from data have far beyond the processing ability of human being. In many application domains such as healthcare, manufactures, and finance, a typical data mining task often requires complex task con-figuration, integration of different types of data mining al-gorithms, and efficient execution on distributed computing environments. Therefore, it is imperative to build tools for data analysts in such domains to efficiently perform data analysis tasks.

Existing data mining products, such as Weka [1], SPSS, and SQL Server Data Tools, provide user-friendly interfaces to facilitate users to conduct the analysis. However, these products are designed for small scale data analysis and do not allow users to plug in new algorithms easily. The data mining algorithm libraries, such as Mahout [5], MLC++ [4], and MILK [3], include a large number of data mining algo-rithms. However, it requires advanced programming skills to use these libraries for task configuration and algorithm inte-gration in a complex data mining task. Integrated data min-ing frameworks, such as Radoop [7] and BC-PDM [10], pro-vide user-friendly interfaces to quickly configure data min-ing tasks. However, these frameworks are Hadoop-based and have limited support for non-Hadoop implementations. Moreover, they do not explicitly address the resource allo-cation under multi-user and multi-task scenarios.
To address the limitations of existing products, we de-velop FIU-Miner to facilitate data analysts to efficiently per-form data mining tasks. FIU-Miner provides a set of novel functionalities that help data analysts conveniently and effi-ciently conduct complex data mining tasks. Specifically, the system has the following significant merits:
User-friendly rapid data mining task configuration. Fol-lowing the Software-as-a-Service paradigm, FIU-Miner hides the low-level details irrelevant to the data analysis tasks.
Through the interface, users can easily configure a com-plex data mining task by assembling existing algorithms into a workflow without writing a single line of code.
Flexible cross-language program integration. FIU-Miner is able to make full use of the existing state-of-the-art data mining tools by allowing users to import them into its sys-tem algorithm library. There is no restriction on the choice of implementation languages for the imported programs, since FIU-Miner is capable of correctly distributing the tasks to appropriate computing nodes with suitable run-time environments.

Effective resource management in heterogeneous environ-ments. FIU-Miner supports the data mining tasks running in heterogeneous environments, including graphics work-stations, stand-alone computers, and computing clusters.
To optimize the resource utilization of the available com-puting resources, FIU-Miner schedules the tasks by con-sid ering various factors such as algorithm implementation, server load balance, and the data location.
FIU-Miner has been designed and developed by a research team consisting of 12 members for one year. A demo can be found in http://datamining-node08.cs.fiu.edu/FIU-Miner . Fig-ure 1 presents an overview of the system architecture of FIU-Miner. The system is divided into four layers: User Inter-face , Task and System Management , Abstracted Resource , and Heterogeneous Physical Resource .

To maximize the system compatibility, the user interface is presented as a pure HTML5 web-based application. There are three major modules of user interfaces and their func-tionalities and features are described as follows:
Task configuration and execution. (Figure 2) This module supports workflow-oriented task configuration. The work-flow of a data mining task is represented and visualized as a directed graph, where nodes denote specific algorithm and edges denote the data dependency among algorithms. A workflow can be quickly configured through GUI instead of programming. Moreover, the users can set the execu-tion plan of a data mining task that can be automatically executed whenever the time is up.

Program registration. (Figure 3) This module allows users to easily import external data mining programs to enrich the Algorithm Library . To import a program, a user needs to upload the executable files and provide the detailed pro-files of the program, including functionality description, re-quired runtime environment, dependencies, and parameter specification. The imported program can be written in any form as long as its runtime environment is supported by the backend servers. FIU-Miner currently supports Java (including Hadoop environment), Shell, Python, C/C++, etc. Therefore, almost all the mainstream data mining al-gorithm implementations, such as Weka-based programs,
Mahout-based programs, and MILK-based programs, can be imported into FIU-Miner. Users can also implement and import their own algorithms into the system.
System monitoring. (Figure 4) This module monitors the resource utilization of FIU-Miner in real time, and also tracks the running status of the submitted tasks. Note that this module only displays the abstracted resources (e.g., the available Workers, the tree structures of the file system) for users. The underlying physical resources are transparent to users.
This layer contains two major modules: task management and system management .
As previously mentioned, users are allowed to configure ad-hoc data mining tasks to fulfill their analysis require-ments. A user can pick the available algorithms registered in the Algorithm Library as a building block when config-uring a data mining task. The Workflow Integrator con-ducts task validation and reports invalid integration. Once th e configuration is done, the new data mining task will be automatically added to the Task Library and is ready for scheduling.

The Job Scheduler is responsible for assigning the com-puting jobs to the computing Worker(s) where the runtime environments are supported with the purpose of minimizing the running time. The scheduling in FIU-Miner is not trivial as it supports programs of different languages in a hetero-geneous environment. It is possible that the programs in a configured job have different runtime requirements; hence, simply assigning the job to an arbitrary worker may ren-der the job inexecutable. On the other hand, the I/O cost would increase when decomposing the job into different steps and running each step to a different worker. The schedul-ing would become even more difficult when considering the multi-user and multi-task situation. In FIU-Miner, to ad-dress the aforementioned challenge, we implement the sched-uler by considering the following factors: (1) runtime envi-ronment requirements of each step in a given job; (2) sup-ported runtime environment of each computing worker; (3) current running status of each computing worker; and (4) estimated data size of the input.
The Job Manager keeps track of the running status of a executed job. A user will be immediately notified the job status in real time.

Besides job monitoring, FIU-Miner also keeps track of the status of the workers and the underling computing re-sources. The Resource Monitor monitors the Worker s and provides the running status of the Workers to the Job Sched-uler to help make scheduling decisions. The Resource Man-ager manages all the available Worker s. A unique feature of FIU-Miner is that it does not need the manual registration of available physical resources. Once a worker is deployed on a physical server, the worker will automatically register the server to FIU-Miner by sending server profile to the Re-source Manager .
In FIU-Miner, the computing power of the physical servers is quantified by the number of Worker s and the data min-ing tasks are scheduled to the Worker s. This mechanism, as a simplified version of system virtualization, is able to maximize the utilization of the computing resources.
To effectively manage the computing resources, each worker is associated with a profile containing the detailed speci-fication of its capability, including the computing power, supported runtime environment, and running status, etc. The storage of a physical server is shared by all the tenant Worker s, including the available database, HDFS, and local file systems.
FIU-Miner has been deployed as the manufacturing pro-cess analysis platform at ChangHong Corporation, one of the world X  X  largest display product manufacturing compa-nies located in China. This system is currently running in a distributed environment containing one 64-node comput-ing cluster and several graphics workstations. Each node of the cluster consists of 4 Intel Xeon E5645 CPU, 32GB main memory and 1T hard disk space. And a graphics worksta-tion consists of 1 Intel i7 3820 3.6GHz CPU, 32GB main memory, and NVIDIA Tesla K20 with 3.52T FLOPS com-puting power.

To demonstrate the effectiveness of FIU-Miner, we present a case study of optimizing the Plasma Display Panel (PDP) manufacturing process using FIU-Miner. PDP manufactur-ing is a complex process, whose yield ratio highly depends on the parameter setting values associated with each produc-tion equipment. Due to the complexity of manufacturing procedure (75 assembling processes with over 300 produc-tion equipments), a large number of features (9364 involved parameters), and huge amount of operational data (300G per month), automatic analysis tools are needed for opti-mizing the production procedure.

One common task in the PDP process optimization is to extract important feature combinations that are highly re-lated to the yield ratio. To accomplish this task, a workflow and its associated components are depicted in Figure 5. The workflow invovles the following steps: 1. PDP dataset is loaded from HDFS by HDFS Data Loader , and Data Publisher dispatches the dataset to three dif-ferent Feature Selection algorithms including mRMR [6],
InfoGain [8], ReliefF [2]. 2. Important features are first extracted by the Feature Se-lection algorithms, and then combined by the Stable Fea-ture Selection component to output the stable features which are highly ranked by all the feature selection algo-rithms [9]. 3. Based on the selected stable features, the Finding Fre-quent Feature Combinations component is running itera-tively until the number of frequent feature combinations reaches the predefined threshold K . 4. The discovered top-K frequent feature combinations are stored into the database.
 Generally, three major phases (Component Preparation, Task Configuration and Task Execution) are needed to com-pose this complex task from the scratch. Table 1 compares the data analysis with and without FIU-Miner and demon-strates the advantages of FIU-Miner.

During Phase I, without FIU-Miner, users can use ex-isting tools at each component; however, they have to im-plement the data loading and storing procedures between components. By contrast, FIU-Miner provides customized user interfaces for data loading and storing. Users can easily prepare each component and integrate multiple algorithms without writing a single line of code.

During Phase II, without FIU-Miner, users need to man-age the dependence among different components. As the number of components increases, their dependence would become more complicated. It is difficult for users to sched-ule the tasks in a distributed environment. On the contrary, FIU-Miner provides a user-friendly GUI to build the de-pendence among all the components. It can also take full advantage of distributed environments to improve the effi-ciency of task execution, and the scheduling is transparent to users.

During Phase III, without FIU-Miner, users need to im-plement the monitor to track the mining process. There is no efficient mechanism for users to locate the failure compo-nents. Comparatively, FIU-Miner provides automatic func-tionalities to track the running status of each component in the workflow. In addition, users can easily find out the details of the failure components.
In this section, we design two sets of experiments to inves-tigate how FIU-Miner utilizes static and dynamic computing environments. To avoid conflicts with the production clus-ter, we use another 8-node cluster as a separate experiment environment.
 Exp I : Each node in the cluster is deployed with one Worker . We configure 10 tasks with different running times in FIU-Miner. To mimic the random job submission and task execution, we schedule these jobs to start at time 0 and repeat with a random interval ( &lt; 1 minutes). The system is observed in a 80-minutes period and the running status of the system is recorded. Figure 6 shows how FIU-Miner balances the workloads for the underlying infrastructures, where the x-axis denotes the time and the y-axis denotes the average number of completed jobs for each Worker . As is shown, the accumulated number of completed jobs (the blue bars) increases linearly, whereas the amortized number of completed jobs (the white bars) remains stable. These phenomena show that FIU-Miner achieves a good balance of the resource utilization by properly distributing jobs. Fi gure 6: Load Balance in
Exp II : We use the same job setting as in Exp I . To investi-gate the resource utilization of FIU-Miner under a dynamic environment, we initially provide four nodes, each with 1 Worker , and then add the other four nodes 10 minutes later. To emulate the nodes with different computing powers, the newly-added nodes are deployed with 2 to 5 Workers , re-spectively. Each Worker is restricted to use only 1 CPU core at a time, so the node deployed with more Workers can have more powerful computing ability. We observe the sys-tem for 110 minutes and Figure 7 shows the number of jobs completed by each node over time. As is shown, the first four nodes with 1 Worker have approximately the same number of completed jobs at each observation timestamp. The slopes of the newly-added nodes are higher than those of the first four nodes, since they have more computing powers. We also observe that the number of completed jobs is proportional to the number of Workers on each node. This experiment illustrates that FIU-Miner can balance the workloads under a dynamic environment.
In this demo paper, we present FIU-Miner, an integrated system that facilitates users to conduct the ad-hoc data min-ing tasks. FIU-Miner provides a user-friendly GUI to allow users to rapidly configure complex data mining tasks. It also allows users to conveniently import and integrate arbitrary data mining programs. Internally, FIU-Miner leverages Job Scheduler to effectively schedule the data mining jobs and leverages Resource Manager to manage the underlying re-source management. The case study shows that FIU-Miner is effective in configuring complex task, integrating various algorithms and executing tasks in distributed environments. This project is supported partially by NSF under Grant HRD-0833093 and CNS-1126619, and by the Army Research Office under Grant W911NF-12-1-0431.
