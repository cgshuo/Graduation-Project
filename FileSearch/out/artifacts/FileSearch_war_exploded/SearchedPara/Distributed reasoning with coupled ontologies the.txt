 Georgios Santipantakis  X  George A. Vouros Abstract Combining ontologies in expressive fragments of Description Logics in inherently distributed peer-to-peer settings with autonomous peers is still a challenge in the general case. Although several modular ontology representation frameworks have been proposed for combining Description Logics knowledge bases, each of them has its own strengths and limitations. In this paper, we consider networks of peers, where each peer holds its own ontology within the SHIQ fragment of Description Logics, and subjective beliefs on how its knowledge can be coupled with the knowledge of others. To allow peers to reason jointly with their coupled knowledge, while preserving their autonomy on evolving their knowledge, data, and subjective beliefs, we propose the E -SHIQ representation framework. The article motivates the need for E -SHIQ and compares it to existing representation frameworks for modular Description Logics. It discusses the implementation of the E -SHIQ distributed reasoner and presents experimental results on the efficiency of this reasoner.
 Keywords Distributed reasoning  X  Description Logics  X  Peer-to-peer systems 1 Introduction To combine the knowledge of autonomous peers in open and inherently distributed settings, we need special formalisms that take into account the complementarity and heterogeneity of independently evolved chunks of knowledge in multiple interconnected contexts (i.e., local theories). In these cases, peers being autonomous develop/maintain/evolve their knowledge independently from others, while they may hold subjective beliefs concerning  X  X ridging X  heterogeneity and coupling their knowledge with the knowledge of others. The subjectivity of these beliefs plays an important role in any such a setting, as autonomous peers may inherently (i.e., due to the restrictions of their task environment) have a partial or abstract view of the knowledge possessed by others, or they may not agree on the way they jointly shape knowledge. The above concerns rule out the possibility of a knowledge base shared between peers. In this paper, we consider that for each peer, a local theory is defined by the ontology it owns. Each such ontology in the rest of this paper is called a unit . The Semantic Web architecture is largely based on new languages, among which the Web Ontology Language (OWL) plays a prominent role. Description Logics have deeply influ-enced the design and standardization of OWL: OWL-Lite and OWL-DL correspond to logics SHIF ( D ) and SHOIN ( D ) . The proliferation of OWL ontologies, many of which have been developed independently, the need for fusing semantically annotated, voluminous data repositories, and sometimes streaming data sources, each one being autonomously evolved and described using different ontologies, make the combination of knowledge and the ability to perform distributed reasoning tasks with the coupled knowledge, absolutely necessary: In networks of peers, we require that participants cooperatively conduct reasoning tasks in a decentralized way, without necessarily sharing knowledge and beliefs with others. While standard logics may be used to deal with the issues of heterogeneity in the Semantic Web, special knowledge representation formalisms that are more appropriate for combining the knowledge of autonomous peers in inherently distributed settings have been proposed. These are called contextual logics or modular ontology languages . Apart from modular ontology representation frameworks, most proposals for distributed reasoning with ontolo-gies disregard the combination of knowledge that autonomous peers posses in an inherently distributed and open environment, while proposals on parallel reasoning with ontologies are considered orthogonal to what we propose here. These efforts concern languages of low expressiveness and are further discussed in Sect. 8 .
 Our goal was to provide a representation framework covering an expressive fragment of Description Logics for combining and reasoning with distinct ontologies in open, hetero-geneous, and inherently distributed settings. In these settings, we may expect that different ontologies may be combined in many different, subtle ways, while peers retain subjectivity of their beliefs on how their knowledge is coupled with that of others. Toward this goal, we propose the E -SHIQ representation framework and a distributed tableau algorithm. E -
SHIQ supports peers to reason jointly with the knowledge distributed in their ontologies, by combining local reasoning chunks.

Specifically, closely related to modular ontology languages, the representation frame-work E -SHIQ (a) provides constructors associated with link relations and inter-ontologies X  concept-to-concept correspondences, retaining the subjectiveness of specifications, (b) offers expressiveness for combining multiple units that can be interpreted over overlapping and dis-joint domains, (c) supports distributed reasoning by combining local reasoning chunks in a peer-to-peer fashion, and (d) inherently supports subsumption propagation between units.
Each peer with a specific unit holds a part of a distributed tableau, which corresponds to a distributed model. The E -SHIQ distributed reasoner has been implemented as an extension of the Pellet reasoner. 1 The paper presents experimental results with the E -SHIQ distributed reasoner, on different distributed settings of particular interest. The results show thatthereasonerachievesbetterperformancethanitscentralizedcounterpart,althoughfurther optimizations may be applied.
The paper is structured as follows: Sect. 2 provides background knowledge on modular ontology representation frameworks for combining units. Section 3 introduces a motivating scenario and highlights the features of the proposed framework. Section 4 specifies E -SHIQ , and Sect. 5 describes a tableau algorithm for reasoning with E -SHIQ . The implemented distributed reasoner for E -SHIQ is presented in Sect. 6 . Experimental results on the per-formance of the distributed reasoner are available in Sect. 7 . Section 8 discusses the related work and indicates how E -SHIQ differs from existing modular ontology representation frameworks. Finally, Sect. 9 thoroughly discusses the potential of the E -SHIQ represen-tation framework to serve as a new paradigm for combining and reasoning with multiple ontologies, presents future research plans, and concludes the paper. 2 Preliminaries Given a collection of SHIQ units, indexed by a non-empty set of indices I ,let N C i , N R i ,and N
O i be the mutually disjoint sets of concept, role, and individual names, respectively, for each i  X  I .Forsome R  X  N R N
R i } )isthesetof SHIQ -roles for the i -th unit. The set of SHIQ -concepts is the smallest set constructed by the constructors listed in Table 1 . Concepts are made distinct by the index of the unit to which they belong, which is used as a prefix, e.g., i:C denotes that the concept C belongs to the i -th unit. Cardinality restrictions can be applied on simple roles , i.e., roles whose sub-roles w.r.t. the transitive X  X eflexive closure of the role inclusion relation (denoted form C D ,where C , D concepts of the i -th unit define the TBox of the unit, denoted by T i .
The finite set of role inclusion axioms of the form R S and transitivity axioms for roles defines the role box R i for some unit i ,where { R , S } X  N R i . The finite set of assertions of the form a:C ,( a , b ) :R , a = b ,where a , b  X  N O i , i:R a possibly inverse role and i:C a concept, define the ABox of a unit i .

An interpretation for the i -th unit is a pair I i = i ,  X  I i ,where i = X  is the domain of the interpretation and  X  I i the interpretation function which maps every C  X  N C i to C I i  X  i , every R  X  N R i to R I i  X  i  X  i and each a  X  N O i to an element a I i  X  i .
 A full ( or empty ) hole interpretation is an interpretation I  X  i = i ,  X  I  X  i (respectively, I the domain i (respectively, for empty holes,  X  I i maps every concept X  X ncluding  X  and  X  X o the  X  ).
 An interpretation I i satisfies a role hierarchy if for any ( R S )  X  R i , it holds that R interpretation I i satisfies a GCI C D iff C I i  X  D I i .Wesaythat I i is a model of T i iff it satisfies each GCI in T i . A concept i:C is satisfiable w.r.t. R i and T i if C I i = X  ,and I i is a model of T i and R i . A concept D subsumes a concept C w.r.t T i and R i if C I i  X  D I i holds in every model I i of T i and R i . An interpretation I i satisfies each concept assertion a that satisfies each assertion in A i .
 Distributed Descriptions Logics (DDL) [ 3 , 29 ] extend the syntax of standard Description Logics with subjective concept-to-concept correspondences between any pair of units i , j  X  I , i = j . Correspondences are distinguished to concept onto concept rules of the form i:C  X  j:G ,andconcept into conceptrulesoftheform i:C  X  j:G ,where C  X  N C i , G  X  N C j . 2
While DDL allow combining knowledge from distinct ontologies interpreted over over-lapping logical domains , E -Connections has been proposed [ 10 , 11 , 24 ] for combining knowl-edge from distinct ontologies interpreted over disjoint logical domains . The ontologies can be expressed in any of the SHIQ , SHOQ , SHIO fragments of Description Logics, and be combined via link relations, assuming a set of constructors and properties for these relations. Given the finite index set I and i  X  I ,thesetof i -roles is the set of SHIQ roles for the i -th consider only ontologies in the SHIQ fragment of Description Logics. Link relations can be hierarchically related and be either transitive or restricted by value and qualified cardinality restrictions.

Further details on the modular representation frameworks are provided in Sect. 8 ,which also discusses their strengths and limitations. 3 Motivating scenario Aiming to support federated reasoning in settings with autonomous peers, maintaining the subjectiveness of peers X  specifications, allowing peers to combine their knowledge in many subtle ways, and to support them to jointly reach conclusions by combining their local reasoningchunks,wepropose E -SHIQ asagenericrepresentationframeworkforcombining ontologies within the SHIQ fragment of Description Logics and for performing distributed reasoning.

Decentralizing reasoning can be beneficial for several ontology-driven information shar-ing, matchmaking, and selection applications/services. An example can be the implementa-tion of an efficient registry providing advanced reasoning services for agents (software or human) to locate offers or requests about resources or services in a democratized Grid or Cloud environment, matching their interests. Such a matchmaking and selection service is provided by the Grid4All semantic information system (SIS) [ 33 ].

SIS considers a resource to be a tradable entity that is offered by a resource provider or requested by a resource consumer. Among the tradable resources in the SIS registry, we consider compute node and cluster resources, due to the complexity of their specifications: A compute node is a composite resource that comprises exactly one computational resource and any number of storage resources. A computational resource is also a composite resource, constructed by at least one CPU, a volatile memory, and an operating system, all installed on at least one machine. On the other hand, a cluster is an aggregated resource, as it comprises a set of compute nodes.

Each agent in this setting participates as a provider, as a consumer, or in both roles. SIS supports agents to discover markets that trade requested/offered resources and also satisfy specific requirements concerning availability, cost, quality, etc. Each registered resource order, offer or request, expands both the terminological (TBox) and assertional (ABox) parts of the SIS ontology. A request is formed as a concept specifying the restrictions an offered resource must match, while an offer is formed as an instance specifying the specific resource traded, and as a concept specifying the restrictions any matching request must satisfy. Doing so, the retrieval of instances per order is done by means of a classification task: The instances of the concepts classified under the concept of a request match the request.

Such a centralized registry, being highly expressive, with a large TBox and a large ABox, is a bottleneck for the scalability of SIS. Indeed, SIS needs to serve orders from a large number of agents in a timely fashion. However, even for a few hundreds of registered resources, Pellet fails to compute answers to complex queries [ 33 ], while these cases have been proved hard for HermiT 3 [ 21 ] as well. This is also the case for MORe 4 [ 25 ]: This optimization does not work as intended for the SIS ontology due to its expressiveness. In the experiments reported in Sect. 7 of this paper, we use different snapshots of the SIS registry and test the distributed reasoner in a variety of registry sizes, varying the number and type of registered resources.
It is apparent that the matchmaking reasoning service is unscalable for a centralized rea-soner exploiting the monolithic SIS ontology. This makes SIS a very interesting case for studying the behavior of the E -SHIQ distributed reasoner, given also that the environment is inherently distributed and open, comprising interconnected autonomous peers: Peers may posses information about distinct or similar aspects of their domain, while descriptions (con-ceptualizations) for similar aspects may vary in different ways between peers. Nevertheless, several peers have to combine their knowledge and reach joined conclusions concerning the appropriateness of their known orders.
 Figure 1 presents the kind of specifications and reasoning we aim to support with E -
SHIQ . This example illustrates four units, each corresponding to the knowledge of a specific peer, and shows how these units are combined by means of concept-to-concept cor-respondences and link relations. Other modular ontology representation frameworks, such as DDL, P-DL, and E -Connections, present certain limitations in combining the knowledge from these units: These are discussed in detail in Sect. 8 . This example in short indicates the features of E -SHIQ , and it will be used in the remaining part of the paper to exemplify the representation framework. Specifically,  X  E -SHIQ supports specifying correspondences between concepts in different units, in  X  E -SHIQ supports subjectiveness on concepts X  correspondences. As shown in Fig. 1 ,the  X  E -SHIQ supports punning by allowing roles and link relations to have the same name,  X  E -SHIQ supports subsumption propagation in a sequence of semantically connected 4 Combining ontologies using E -SHIQ 4.1 The E -SHIQ representation framework Given a collection of units indexed by the set of indices I , E -SHIQ , in addition to the SHIQ constructors in any unit i  X  I , supports the specification of the following entities. The set of ij -link relations relates individuals in two units i and j , i = j  X  I , denoted by E . Link relations are not pairwise disjoint, but are disjoint with respect to the set of concept names. An ij-relation box R ij includes a finite number set ij -linkrelation inclusion axioms, locality of specifications for the unit i .

Subsequently, roles and link relations are referred as  X  X roperties, X  and only when neces-it may hold that i = j , in which case the ij -property box is the RBox for the i -th unit, i.e., (with an abuse of notation) R ii = R i . Similarly, we refer to a property E ij , denoting either an i -role in case i = j , or a link relation in case i = j . In cases where i = j , then this is stated explicitly.

The sets of i -concepts are inductively defined by the constructors in Tables 1 and 2 ,given that R and S are i -roles, and E ij are ij -link relations.

Let i:C and i:D possibly complex concepts and i:C i:D (or i:C D )a general concept inclusion (GCI) axiom. A finite set of GCIs is a TBox for the unit i , and it is denoted by T i . Concept correspondences may be concept onto concept, or concept into concept: Let C  X  N C unit i to unit j from the subjective point of view of j is of the form i:C  X  j:D (corresp. i:C  X  j:D ).
 Definition 4.1 ( Distributed knowledge base )A distributed knowledge base = T , R , C is composed by the distributed TBox T , the distributed RBox R , and a tuple of sets of correspondences C = ( C ij ) i = j  X  I between units. A distributed TBox is a tuple of TBoxes T = ( T i ) i  X  I , where each T i is a finite set of i -concept inclusion axioms. A distributed RBox inclusion axioms and transitivity axioms.
 A distributed ABox (DAB) includes a tuple of local ABox X  X s A i for each unit i ,andsets A ij , i = j with individual correspondences of the form j:a spondences are specified from the subjective point of view of i , and together with assertions concerning linked individuals, these are made locally available to i . Example (Distributed knowledge base) For the knowledge base shown in Fig. 1 , let the set of indices be I ={ 1 , 2 , 3 , 4 } . The distributed knowledge base = T , R , C is composed by the distributed TBox T , the distributed RBox R , and a tuple of sets of correspondences C = ( C ij ) i = j  X  I between units. Specifically,  X  T = ( T i ) i  X  I ,where T i = X  , i  X  X  2 , 3 , 4 } and  X  R = (( R i ) i  X  I ,( R ij ) i = j  X  I ) ,where R i = R ij = X  , i , j  X  I ,  X  C = ( C ij ) i = j  X  I ,where C 21 ={ 2 :AbstractMarketOrder  X  1 :Request } ,  X  DAB = (( A i ) i  X  I ,( A ij ) i = j  X  I ) ,where A i = X  and A ij = X  ,forany i , j  X  I
Each TBox T i , i  X  I is locally interpreted by a local, possibly hole interpretation I i that .The ij -property boxes R ij , with i , j  X  I , are interpreted by valuation functions  X  I ij that map every ij -property to a subset of i  X  j .Let I ij = i , j ,  X  I ij , i , j  X  I .Itmustbe Definition 4.2 ( Domain relations ) Domain relations r ji , i = j  X  I represent equalities between individuals, from the subjective point of view of i .A domain relation r ji , i = j from j to i is a subset of j  X  i , s.t. in case d  X  r ji ( d 1 ) and d  X  r ji ( d 2 ) ,then according to the subjective view of i , d 1 = d 2 (denoted by d 1 = i d 2 ). Also, given a subset D of I i , r ji ( D ) denotes  X  d  X  D r ji ( d ) .
 d = i d 2 (it must be noticed that d 1 and d 2 are individuals in the unit i ). Therefore, E -SHIQ domain relations are globally one-to-one relations.
 Definition 4.3 ( Distributed interpretation) Given the index I and i , j  X  I ,a distributed interpretation I of a distributed knowledge base is the tuple formed by the interpretations I A local interpretation I i satisfies an i -concept C w.r.t. a distributed knowledge base , i.e., I i i:C iff C if C I i  X  D I i . Also, I ij satisfies an ij -property inclusion axiom R S ( I ij R S ) transitive.

The distributed interpretation I satisfies ( d ) the elements of a distributed knowledge base, if the following conditions hold 1. I d i:C D ,if I i C D 2. I d T i if I i:C D for all C D in T i 3. I d j:C  X  i:D ,if r ji ( C I j )  X  D I i 4. I d j:C  X  i:D ,if r ji ( C I j )  X  D I i 5. I d C ij ,if I satisfies all correspondences in C ij 6. I d R S ,if I ij R S ,where R S in R ij 7. I d R ij if I d R S and I d Trans ( E ; ( i , j )) for all inclusion and transitivity 8. I d if for every i , j  X  I , I d T i , I d R ij , I d A i and I d C ij
Finally, it also holds that I d i:a Notice that in case i = j , condition (7) becomes I d R i if I d R S and I d Trans ( E ) for all inclusion and transitivity axioms in R i .

According to the above, given an individual i:x in ( I i  X  I j ) , then, according to i y
Also, as a consequence of the fact that domain relations represent equalities, and given that individuals must satisfy constraints imposed by the semantics of specifications, then from the subjective point of view of the unit that holds the individuals correspondences, corresponding individuals must satisfy the same sets of constraints (i.e., they must belong to the denotation of the same concepts). Thus, while we do not require domain relations to be transitive, corresponding individuals must satisfy the same set of constraints. We exemplify this in the example that follows Definition 4.4 .
 Definition 4.4 ( Distributed entailment and satisfiability ) d X Y if for every I , I d implies I d X Y ,where X and Y are either i -concepts or ij -properties, i , j  X  I . is satisfiable if there exists a I s.t. I d . A concept i:C is satisfiable with respect to if there is a I s.t. I d and C I i = X  .
 Example (Entailments) Continuing the example shown in Fig. 1 , according to the semantics of specifications, we can prove that from the subjective point of view of unit 3, it holds that AtomicRequest Order .

Let x be an individual, s.t. x  X  AtomicRequest I 3 \ Order I 3 . Given that x /  X  Order I 3 , then according to C 43 , there cannot be any y s.t. y  X  MarketOrder I 4 and r 43 ( y ) = x . Also, 1 :Request  X  3 :AtomicRequest implies that there is an x  X  Request I 1 s.t. r 13 ( x ) = x . Given that domain relations represent (subjective) equalities, x must satisfy the con-straints for x , i.e., it must not have any correspondent individual in MarketOrder I 4 . This is a constraint imposed from the subjective point of view of unit 3. Given this constraint for 1 :x , and the fact that according to unit 1, there is an x in unit 2 s.t. x  X  AbstractMarketOrder I 2 and r 21 ( x ) = x ,anysuch x (and any of its corresponding individuals in any unit) must not belong in the denotation of concept 4 :MarketOrder .How-ever, according to unit 2, r 42 ( MarketOrder I 4 )  X  AbstractMarketOrder I 2 , implying that x  X  r 42 ( MarketOrder I 4 ) . This according to unit 3 leads to a contradiction.
As it can be observed from the above example, given that domain relations represent subjective equalities between corresponding individuals, these individuals must satisfy the same constraints concerning their inclusion in the denotation of specific concepts. Therefore, in our example, unit 3 does not possess any information about x , and about the correspon-dence between 3 :x and 2 :x . Nevertheless, unit 3 has set specific constraints that 3 :x and all corresponding individuals must satisfy, in conjunction to other units X  local and subjective specifications. The underlying assumption in this type of behavior is that peers possessing units are fully collaborative when searching for a distributed model, i.e., a model that satis-fies the subjective constraints set by all units. This propagation of constraints is enabled by additional tableau expansion rules toward the construction and maintenance of a distributed completion graph during reasoning, presented in the next section. 5 Reasoning in E -SHIQ 5.1 Overview The E -SHIQ reasoner implements a distributed tableau method for deciding concept satisfi-ability w.r.t. a distributed knowledge base. Thus, the reasoner constructs a model (i.e., a finite directed graph called completion graph ) for a concept C that it satisfies all the constraints implied by the semantics of the (local and subjective) specifications in the knowledge base. Subsequently, we use the term peer to specify the active reasoning entity that exploits the knowledge in a specific unit, jointly with other peers. Peers are distinguished by the set of units X  indices I : Peer i exploits the specifications in unit i .

Reasoning in E -SHIQ involves combining local reasoning chunks performed over at most SHIQ units. This is done by distributing the completion graph among the reasoning peers, while expansion rules assure expansion and maintenance of the completion graph in each of the peers, and the proper maintenance of correspondences among individuals in differentunits.Thisisdonesoastoretainthepropertiesofatableau(specifiedinDefinition 5.2 in Sect. 5.2 ). No peer has a global, complete view of the overall completion graph.
Each node and edge in the graph is labeled with a set of concepts and properties (i.e., roles or link relations), respectively. These labels specify the constraints that individuals in differ-ent units must jointly satisfy for a model to exist. Local chunks of the distributed completion graph are combined by means of the subjective equality correspondences between individu-als in different units. For E -SHIQ , where knowledge is distributed among units, individual (equality) correspondences imply that the set of constraints satisfied by an individual must also be satisfied by all individuals that correspond to it: Subsequently, this means that com-pletion graph nodes maintained by peer i are not only labeled by i -concepts, but also by concepts of other units, specifying constraints that corresponding individuals in those units must satisfy. To combine peers X  local completion graphs, the tableau algorithm for E -SHIQ uses expansion rules that project labels of individuals to their corresponding individuals in other units, updating their labels. This guarantees the propagation of (subjective) constraints and maintenance of a joined view of all the constraints that corresponding individuals in a model must satisfy.

The tableau reasoning algorithm repeatedly applies the expansion rules until constraints in a node are determined unsatisfiable (i.e., a clash occurs), or until a clash-free graph is constructed and no expansion rule can further modify the graph.

Blocking conditions guarantee termination of the tableau algorithm. A blocking mech-anism is correct if a path starting from a blocked node would never yield to a clash if the expansion rules had been further applied. While there may be different blocking strategies, in the case of SHIQ , the double blocking strategy is applied. Due to link relations and individual correspondences, we also use a subset blocking strategy. 5.2 A tableau for E -SHIQ We assume all concepts in negation normal form (NNF). 6 Given an i -concept C and the dis-tributed knowledge base = T , R , C ,theset sub i ( C , R ) (or simply sub i ( C ) ) is computed over the set of indices I , by the following conditions 2. if C is a complex concept of the form C 1 C 2 or C 1 C 2 ,then sub j ( C , R ) ={ C } X  3. if C is of the form  X  P . G ,  X  P . G ,  X  nP . G or  X  nP . G ,then sub j ( C , R ) ={ C } X  The closure of the i -concept C over = T , R , C ,is and cl i ( C , R ) is the set of concepts in sub i ( C , R ) under the NNF.

To define the distributed tableau for a concept k:C w.r.t. a distributed knowledge base , let us consider the non-empty set of individuals S k in the k -th unit. The label L k of each individual k:x in S k can contain any concept in cl j ( C ,) . Thus, according to the above conditions, it may contain any j -concept , with j  X  I . Doing so, each label L k can be seen as the union of disjoint sets L kj , each one including the j -concepts in L k , only. Such a set all the constraints that corresponding individuals of x in units different from k must satisfy. Furthermore, the neighborhood of unit k is defined to be the set N ( k ) ={ m | m  X  I and C km  X  E km = X  X  X  X  k } , i.e., N ( k ) denotes the set of units to which k is combined. N ( k ) specifies also the neighborhood of the peer k exploiting unit k .
 j L k ( x ) = X  ,and j:x
The rationale behind this definition is as follows: The j -projection of an individual from unit k includes in its label all i -concepts (i.e., constraints concerning membership of this individual), with i = k , since these concepts may eventually be propagated to the reasoning chunk for unit i , which should be able to detect a contradiction (clash) that is due to the coupled (subjective) knowledge of peers. The superset relation among labels indicates that the labels of k:x and j:x may include additional concepts due to (subjective) knowledge concerning j:x in unit j . This is further elaborated in subsequent paragraphs. Definition 5.2 ( Distributed tableau )A distributed tableau T for an i -concept D w.r.t. non-empty set of individuals in the k -th unit. L k maps each individual to a subset of where
The concept C K kj , k , j  X  I allows reducing T k and all subjective correspondences of unit k to any unit j , to a single formula. This is so, since from the subjective point of view of k , each distributed interpretation must satisfy T k and all the correspondences in C jk .
The tableau, as it is defined above, is distributed to different peers, where each peer holds a part of the tableau. Local chunks of the tableau are connected via projections between individuals.
 E ( following properties 1. if C  X  L i ( x ) ,then  X  C /  X  L i ( x ) 2. if ( C 1 C 2 )  X  L i ( x ) ,then C 1  X  L i ( x ) and C 2  X  L i ( x ) 3. if ( C 1 C 2 )  X  L i ( x ) ,then C 1  X  L i ( x ) or C 2  X  L i ( x ) , 4. if  X  E . Z  X  L i ( x ) and ( x , y )  X  a ij ( E ) ,then Z  X  L j ( y ) 5. if  X  E . Z  X  L i ( x ) , then there is some y  X  S j s.t. ( x , y )  X  a ij ( Es ) , Z  X  L j ( y ) 7. if (( x , y )  X  a ij ( E 1 )) and ( E 1  X  E 2 ) ,then ( x , y )  X  a ij ( E 2 ) 8. if  X  nE . Z  X  L i ( x ) ,then | E ij ( x , Z ) | X  n 9. if  X  nE . Z  X  L i ( x ) ,then | E ij ( x , Z ) | X  n 11. if L  X  i ( x ) = X  , then for each j  X  I with j = i and L ij ( x ) = X  , there is an individual
These properties address the seamless treatment of roles and link relations in each unit (given that for i , j  X  I , it may hold that either i = j or i = j ), and the maintenance of the labels of corresponding individuals in neighbor units, according to Definition 5.2 . Theorem (Satisfiability) An i-concept D is satisfiable w.r.t. the distributed knowledge base = T , R , C , iff it has a distributed tableau w.r.t. .
 Proof (Sketch) 7 Given a distributed tableau for the i -concept D w.r.t. ,wedefine I = ( I  X  A I i ={ s | A  X  L i ( s ) } for all atomic i -concepts A ,  X  E I ij = ( a ij ( E )  X  a i ( E )) if E  X  E ij  X  N R i , otherwise E I ij = ( a ij ( E )) , 8  X  r ij ( s I i ) ={ d  X  S j |  X  ji ( d ) = s } , s I i  X  i
We then prove that I is a distributed model for D w.r.t. . The proof follows by induction in the structure of i -concepts. Cases of particular interest to E -SHIQ concern the treatment of properties specified both as roles and as link relations in a unit, in conjunction to the treatment of concepts X  correspondences. The proof distinguishes cases for the different combinations of properties and correspondences.
 specify a distributed tableau as follows:  X  S i = i  X  a i ( E ) = E I i ,where E  X  N R i ,  X  x =  X  ji ( s ) if s  X  r ij ( x )
To prove that the above construction meets all the conditions required by a distributed tableau, the proof considers the additional cases for E -SHIQ concerning the treatment of properties that are specified both as roles and as link relations between units, as well as the treatment of inter-unit concept correspondences. Of particular interest is the treatment of projections and thus the satisfaction of tableau X  X  property 11. 5.3 A tableau algorithm for E -SHIQ In this section, we briefly present a distributed tableau algorithm that, given a concept X in NNF, the concepts C K kj and the property boxes R kj for each j , k  X  I , it constructs a distributed completion graph deciding about the satisfiability of X w.r.t. the distributed knowledge base .
 Definition 5.3 ( Distributed completion graph )A distributed completion graph for a concept X w.r.t. a distributed knowledge base is a directed graph G = ( V , U , L , = , node x  X  V is labelled with a set L i ( x )  X  ( m  X  I ( cl m ( D ,)) , and each edge x,y  X  U is labelled with L ( x,y )  X  ( E ij  X  N R i ) ,where i , m  X  I and j  X  N ( i ) .

For an edge i:x , j:y  X  U , j:y is called a j -successor of i:x , while i:x is an i -predecessor of j:y . If it holds that R  X  L ( i:x , j:y ) for any property with R  X  R R , it holds that j:y is of predecessor. A node i:y is a neighbor ( R -neighbor ) of a node i:x ,if i:y is an i -successor be neighbors only if they are related with an i -role.

Thedistributedcompletiongraphisinitializedwith n =| I | nodes x k , k  X  I ,with L i ( x k ) = {
X } ,if k = i ,and L i ( x k ) = X  , otherwise. The algorithm expands the graph by repeatedly applying the expansion rules presented in Table 3 . The rules may generate new nodes locally or to graphs of neighbor peers, or merge existing (local) nodes. We must notice that generative expansionrules(i.e.,  X  rule and  X  rule )maycreatenewsuccessornodesforan ij -linkrelation, i = j  X  I , either to the completion graph of i or to the graph of a neighbor j . Specifically, applying a generative expansion rule to node i:x concerning an E ij , i = j , the result may be either (a) a new node in the completion graph of j , e.g. y , that will be later projected to i , given that L ji ( x ) = X  , or alternatively, (b) a new node y in the completion graph of i that may strategies that a tableau algorithm may follow, affecting the number of messages exchanged between reasoning chunks for the maintenance of the corresponding nodes X  labels and thus the reasoning performance.

A node is not expanded if it contains a clash, i.e., in case there is a contradiction in one of the following forms in its label: (a) { i:C , i : X  C } X  L ( x ) for a concept name i:C and x  X  V ; clash may occur in any of the peers participating in the construction of the completion. The reasoning chunk in peer i can detect clashes of the form (a) in case C is j -concept, as well as of form (b), without relying to j .

A node is also not expanded in the case it is blocked , to ensure termination of the tableau algorithm. A node y directly blocks a node x if one of the following cases occur: (1) Both are i -nodes, x has ancestors x , y , y , none of its ancestors are blocked, and it holds
A node is blocked if either it is blocked directly, or in case one of its predecessors is blocked ( indirect blocking ).

The algorithm returns that a concept C is satisfiable with respect to , if it results to a clash-free (i.e., none of its nodes contains a clash) and complete (i.e., none of the expansion rules is applicable) completion graph. Otherwise, C is considered unsatisfiable w.r.t. . Theorem (Distributed satisfiability) A concept X is satisfiable w.r.t. the distributed knowl-edge base iff the application of expansion rules creates a clash-free and complete distrib-uted completion graph.
 Proof (Sketch) Given a finite set of indices I , each unit i  X  I has a finite number of units in its neighborhood N ( i ) . The number of possible concepts in a node label and the number of properties in an edge label are bounded, and the depth of the distributed completion graph is bounded. Given that concepts are never deleted from node labels, the proof that the tableau algorithm terminates is straightforward. The worst-case complexity of the algorithm is 2 NexpTime w.r.t the sum of the size of X and .

To prove soundness, we need to show that if the algorithm yields to a complete and clash-free distributed completion graph T comp for a concept X w.r.t. ,then X has a distributed tableau w.r.t . Using standard techniques, we inductively define the sets of paths Path ( T comp ) in T comp taking into account also the existence of projections between local completion graphs. Then, by means of those paths, we specify a distributed tableau T ={ S i , L i ,( a ij ), ( X  ij ) } , i , j  X  I ,fortheconcept X and the distributed knowledge base . We then prove that T satisfies all the properties of a distributed tableau for X and .
To prove completeness, we need to show that if the i -concept X has a distributed tableau w.r.t. , then the expansion rules of the algorithm can be applied in such a way that yields to a complete clash-free distributed completion graph.

Let T ={ S i , L i ,( a ij ), ( X  ij ) } , i , j  X  I a distributed tableau for X w.r.t. .WeuseTto guide the application of the expansion rules to the construction of a distributed completion graph T comp . To do this, we define a function  X  that maps nodes of T comp to the elements of the tableau in a consistent way. It has to be proved that if a rule is applicable to T comp during the execution of the algorithm, then the application of the rule results to a T comp , and the extension of  X  is well formed, providing a consistent mapping from T to T comp . Of particular interest to E -SHIQ , the proof distinguishes different cases to examine the possible interactions between roles, link relations, and projections.
 E -
SHIQ inherently supports the propagation of the subsumption relationships between connected units. This is done via the completion of the  X   X  rule and  X   X  update  X  rule and  X   X  update  X  rule + (Table 3 ), as it applies to the local chunks of the distributed completion graph. Let us consider the following example, concerning the distributed knowledge base in Fig. 2 .
 Example (Subsumption propagation) As shown in Fig. 2 , it holds that I ={ 2 , 3 , 4 } and = T , R , C ,where  X  T = ( T 2 , T 3 , T 4 ) , T 2 ={ Ser v ice Sof t w areResource } , T 3 = X  , T 4 = X   X  R = ( R 2 , R 3 , R 4 ,( R ij ) i = j  X  I ) , where each of these sets is equal to  X  .  X  It also holds that C = ( C ij ) ( i = j  X  I ) ,where We need to prove that MarketSer v ice Resource . Thus, we must prove that the concept MarketSer v ice  X  Resource is unsatisfiable w.r.t. the distributed knowledge base .
The distributed completion graph is initialized with three nodes x i , i  X  X  2 , 3 , 4 } . Consid-ering unit 3, initially it holds that The completion of the CErule results to The application of  X  rule results to
The completion of the projection  X   X  rule from unit 3 to unit 2 will result in the generation of a new node y in 2, s.t. 2 :y The completion of the CErule for y in 2 results to The application of  X  rule in the label L 2 ( y ) results to All the alternative branches for this node result to clashes. Thus, the concept MarketSer v ice  X  Resource is unsatisfiable w.r.t. the distributed knowledge base .
The following theorem proves that E -SHIQ inherently supports subsumption propaga-tion between remote units considering the generic distributed knowledge base depicted in Fig. 3 [ 14 ].
 Theorem (Subsumption propagation) Given an E-SHIQ distributed knowledge base with index set I ={ 0 , 1 , 2 ,... k } , a distributed TBox with k + 1 local TBoxes, and a family of correspondences between units, such that 1. d i : C i D i for 1  X  i  X  n 2. i+1:C i + 1  X  i:D i  X  C ( i + 1 ) i for 1  X  i  X  k 3. i:D i  X  i+1:C i + 1  X  C i ( i + 1 ) for k  X  i  X  n 4. 1:C 1  X  0:E  X  C 10 and n:D n  X  0:F  X  C n 0 , then d 0 : E F.
 Proof Letusassumethatthereisanindividual 0:x in I 0 ,s.t. x  X  ( 0 :E I 0  X  0 :F I 0 ) .According to the semantics of concept-to-concept correspondences, 0 :x cannot have any corresponding individual in k:D I k k . There should also be a corresponding 1:x in C I 1 1 with 1 :x that domain relations represent equalities, all individuals corresponding to 0:x must fulfill the
Continuing in the same way along the into concept-to-concept correspondences in the (
The  X   X  update  X  rule + expansion rule (Table 3 ) aids the subsumption propagation as it updates the labels of tableau nodes, in the reverse order along the projection paths that nodes have been projected, that is, along paths of the form ( k:x  X   X  X  X   X  1 :x  X  0 :x ) , s.t. i:x =  X (( i  X  1 ) :x ) ,where i = 1 ,... k . This expansion rule requires that if i:x is not blocked and there is a node j:x such that j:x L ( x )  X  L j ( x ) = L  X  i ( x )  X  L  X  j ( x ) .

The  X   X  update  X  rule + can be applied when peers have constructed local clash-free and a complete distributed completion graph (i.e., it is the last expansion rule applied). The update of labels of nodes using the  X   X  update  X  rule + in this case results to adding new concepts to the labels of nodes, assuring that no further application of expansions rules is required. The addition of new elements in nodes X  labels may result to the occurrence of clashes. It must be pointed out that by applying this rule, the property 11 of tableau needs no change, since the it holds that L i ( x )  X  L j ( x )  X  L  X  i ( x ) . 6 Implementation of the E -SHIQ distributed reasoner Given a set of indices I ,adistributed E -SHIQ knowledge base, and a set of peers such that the i peer is responsible for the unit i ,the E -SHIQ distributed reasoner combines the local reasoning chunks for each of these peers toward constructing a distributed tableau. Each peer exploits its own knowledge, in collaboration with any neighboring peers. Units are expressed in an at most SHIQ fragment of Description Logics and de/serialized in standard OWL files. Link relations and correspondences for both terminological and assertional specifications are included in enhanced C-OWL [ 4 ] files that in addition to correspondences specify link-relation restrictions and assertions.

The overall architecture of a reasoning peer is shown in Fig. 4 . The core component of the peer is the reasoner which implements the E -SHIQ tableau algorithm. This is an extension of the Pellet reasoner, although any other tableau reasoner would fit the purpose. The connector component communicates messages to/from other peers. Messages are mainly of two types: Projection  X  request messages and projection  X  response messages. The connector is activated on a separate thread per peer, enabling asynchronous communication, via TCP/IP sockets. For the deserialization of the knowledge base, each peer uses an OWL and a C-OWL parser. The reasoning peer has been implemented to operate over both HTTP and local file access. 6.1 C-OWL extension The C-OWL parser deserializes the concept-to-concept correspondences, as well as link relations, link assertions, and individual correspondences specified in a C-OWL file. These specifications extend the C-OWL specifications proposed in [ 4 ].

Specifically, we can distinguish the contents of a C-OWL file into two major parts. The first part contains the individual and concept-to-concept correspondences, and the second the link-relation restrictions and assertions. The correspondences are grouped under the element Mapping . Each Mapping element specifies a correspondence to a specific unit. This structure enables the specification of any number of mappings in a C-OWL file and any number of correspondences per mapping.

Considering the example in Fig. 1 , the concept-to-concept correspondences between the concepts AbstractMarketOrder and Request are specified in a C-OWL file for unit1 as follows:
Theelements cowl:sourceOntology and cowl:targetOntology setthesource and target ontologies for this cowl:Mapping element. The concept onto concept cor-respondence is specified in the cowl:bridgeRule element, by the child element cowl:Onto . The elements cowl:source and cowl:target specify the concepts for this correspondence. Similarly, we can specify individual and concept into concept corre-spondences, using the tags cowl:IndividualCorrespondence and cowl:Into , respectively.

The restrictions on links follow the structure of standard OWL role restrictions. For the link relation orders of unit1 in Fig. 1 , the C-OWL file for this unit contains the following specifications
The element cowl:Linking states that &amp;unit1;orders is a link relation and further includes restrictions for this property. The restriction shown defines that every &amp;unit1;Agent &amp;unit1;orders a &amp;unit4;MarketOrder . We can specify any number of restrictions in the same C-OWL file and for the same link relation.

This C-OWL extension has also important differences compared to the OWL extension proposed in [ 12 ].

By isolating peers X  local knowledge and by specifying how their knowledge is combined to the knowledge of others via correspondences and link relations, each of the peers can perform reasoning tasks in a completely isolated way, using only local knowledge, without considering link relations and correspondences. Doing so, a peer considers that all concepts in interpretation. This is important, since peers can identify whether inconsistencies result from local knowledge, or whether these result from combing local knowledge with knowledge in other units. Finally, the C-OWL extension proposed in [ 12 ] assumes that distinct units are interpreted over disjoint domains. As a consequence of this, a resource declared as a local i -concept cannot be used also as the range of an ij -link relation, i , j  X  I . Supporting punning in E -SHIQ ,an ij -link relation can be used as an i -role as well and thus be restricted to i -concepts, as well as to j -concepts. 6.2 The reasoning process Each peer operates in two phases: the initialization and the communication phase. Although these phases can be intertwined, current implementation considers them to be performed one after the other. This presents certain advantages discussed below.

The initialization phase includes the deserialization of the knowledge stored in the OWL and C-OWL files and the construction of the local completion graph, testing about the con-sistency of peer X  X  own local knowledge. A peer with consistent local knowledge participates in the distributed reasoning process toward computing an overall tableau, jointly with other peers, while a peer with inconsistent knowledge considers a hole interpretation for its own unit and informs the others for this: The consequence of this is that neighboring peers con-sider the ontology elements of that peer (i.e., concepts participating in link restrictions and/or concept correspondences) to be equivalent to the top concept. When the initialization phase is completed for all peers, each peer with consistent knowledge preserves the local completion graph for later use and switches to the communication phase.

At the communication phase, peers exchange projection-request and projection-response messages. A projection-request message directed from a peer i to a peer j asks for the projection of a (source) node corresponding to an individual i:x to the local completion graph of j . Such a projection request may specify the corresponding (target) individual of i:x (e.g., j:x ) in case peer i subjectively holds such a correspondence between individuals, or it may ask the creation of a new node in j according to Definition 5.1 . The projection-request message also contains the L  X  i fragment of the label of i:x as stated in Definition 5.1 .Itmust be noticed that projection-request messages are sent from i to any other neighbor peer j  X  I with L ij = X  . A projection-response message from peer j to peer i , is the response to a projection-request message sent to j from i . Such a response may either indicate a clash, or it may specify a (possibly empty) set of concept names to be added in the source node X  X  label (i.e., the node corresponding to i:x ), according to the  X   X  update  X  rule + . In case of a clash, then, the projection-response message will force the source node (i.e., the corresponding node in the completion graph of the sender) to close, and the tableau algorithm in the sender peer will seek for alternative branches in the local completion graph. Also, in response to a clash, to save computational resources, the sender of the request will inform the rest of its neighbors about this result, asking them to cancel their reasoning processes for this request. Obviously, this may lead to a reaction of  X  X ancel requests X  among peers, restoring an important amount of computational resources.

The benefit of separating the initialization phase from the communication phase is that inconsistent units are detected and are excluded from the distributed reasoning process in early stages. A further advantage is that standard SHIQ expansion rules do not apply to the labels of nodes after the construction of a complete local completion graph. Thus, projections include only concept names in nodes X  labels, simplifying communication between peers.
For optimizing the communication process, each peer packages all the projection-request (and projection-response) messages to be sent to any of its neighbor peers to a single message. Of course, this cannot be the case when the initialization and communication phases are intertwined. For each package of projection requests a peer receives, it will make a working copy of its local completion graph, which will be processed on a new thread. Doing so, peers are able to process multiple projection-request packages concurrently. For each requested projection in the package, the peer will update the label of existing nodes, or create new nodes. Next, the peer will check whether any of these additions result to a clash or to further updates in the labels of nodes in originating peer X  X  local completion graph.

Projection-request messages arrived on peer i may also  X  X rigger X  further projection requests to any of its neighbors j . These projection requests from i are packaged together with projections that are due to nodes in the  X  X riginal X  local completion graph of i . Sub-sequently, we refer to all these requests as requests that have been triggered by i . All the requests triggered by i are necessarily packaged, because each j has to reason w.r.t. peers X  coupled knowledge. Thus, nodes that have already been projected from i to j due to i own knowledge are re-projected to j so as these to be processed in combination with other pro-jection requests sent to i . Of course, this pattern of projections happens along any path of peers. This has important consequences to the efficiency of any reasoning task: Projection requests may be repeated several times, and for each single projection request from any peer to i , the peer i repeats numerous other projection requests to j . If this continues along a path, then there can be avalanches of projection requests. This phenomenon is further discussed in the  X  X xperimental results X  section.

Finally, given that a peer may issue the same projection request several times to the same neighbors, we further optimize the distributed reasoning process using what we have called a projection cache for each of the peers. Using the projection cache, a peer can store the projection-request messages it sends to its neighbors and the corresponding projection-response messages it receives from them. Specifically, each record in the cache is a tuple of the form PrRq , P , PrR ,where PrRq is a packaged projection-request message sent to peer P ,and PrR is the packaged projection-response message received from P (containing the response for each individual projection request in PrRq ). We do not implement a garbage collector for projection cache records, since this would be an overhead for the reasoner X  X  performance. When a packaged projection request is to be sent, the peer first queries its cache to find if this message has already been sent. If an exact match is found, the projection response is retrieved from the cache. Otherwise, the message is sent and the cache is updated with this message and with the response received. It must be noticed that in the current implementation, the package of all requested projections must match with a record in the projection cache. Further sophisticated mechanisms for matchmaking can be implemented, givenofcoursethatsophisticationwillnotincurfurtherexcessrequirementsoncomputational resources. 7 The impact of projections in the reasoning process: experimental results While peers reason jointly to combine their knowledge, it can easily be seen that since the initialization phases happen concurrently and locally to each of the peers X  X nd this is also the case for the computation and further exploitation of the projection-response messages X  X n E -
SHIQ reasoning process in comparison with a centralized reasoning process exploiting a monolithic ontology incurs an additional communication cost between peers, due to the projection messages required for combing the local completion graphs.

This section aims to demonstrate and discuss interesting aspects concerning the behavior of the implemented E -SHIQ distributed reasoner toward the implementation of a distributed registry for the SIS, briefly presented in Sect. 3 . While any other ontology could also be used for our purposes, it would require its partitioning to an E -SHIQ distributed knowledge base. Having said that, we must point out that the comparison of the E -SHIQ distributed reasoner with other distributed reasoners cannot be done in a direct way, given that such reasoners operate under different principles and assumptions, requiring knowledge to be specified in other representation frameworks. In addition to these, as already mentioned, the SIS ontology has been proved hard for reasoners such as HermiT, Pellet, and MORe, because of its size and expressiveness. Aiming to study the communication cost among peers reasoning with an E -SHIQ distributed knowledge base, experimental results compare the time that the distributed reasoner manages to classify distributed versions of the SIS registry, against the time needed by Pellet operating on the original, monolithic registries.
 For experimentation purposes, we have partitioned different versions of the SIS ontology. Each ontology version is a populated SIS ontology, specifying a snapshot of the SIS registry at a particular time point. This is further detailed in the section that follows. Although a sophisticated partitioning algorithm may achieve a better distribution of the axioms and of the individuals to different units, in these experiments, each SIS version has been partitioned manually and meticulously to distinct units so as to study the impact of projection messages in the distributed reasoning process. We distinguish the following cases as: (a) Having units of different sizes. The size of each unit is determined by the set of known (b) Having different configurations of units X  connectivity, also in combination with the direc-
To further justify the experimental settings chosen, we have to point out that having units of significantly different sizes we simulate a worst-case scenario, especially in the cases where concept and individual correspondences are symmetric between units, i.e., in cases where for each correspondence from the subjective point of view of a unit i to a unit j ,thereisa correspondence stating the same relationship between ontology entities from the subjective point of view of unit j to i . In these cases, while larger units have a much larger processing load than smaller units, the latter have to delay their processing until they receive responses to their projection requests. This  X  X lack time X  of peers with smaller units is much larger than the corresponding time required when knowledge in distributed in units in a balanced way. Furthermore, the effect of having units acting as multipliers of such messages between larger units, means that any large unit will receive X  X n the worst case X  X  large number of projection requests, which is equal to the sum of the number of projection requests emanating from each of the other large units. This, in combination with the local processing load of larger units, results to a rather unbalanced load between peers, further increasing the  X  X lack time X  of peers with smaller units. As already pointed out, in any balanced case, although the  X  X ultiplication effect X  will occur, the local processing load can be more balanced, and there will be a smaller amount of messages to each of the peers, due to the distribution of knowledge.
Another important remark is that the number of individual correspondences any unit possessesdoesnotaffectthecommunicationcost.Incontrasttothat,thenumberofindividuals known in each unit, in relation to the concept correspondences and link relations to other units, affects the communication cost: This is so, since any instance of a concept will cause a projection to another unit, if there is a concept-to-concept correspondence or a link relation from that instance to the other unit. This happens independently of the existence of individual correspondences between units. As already said, in case such an individual correspondence is known, then the node for this individual in the completion graph will be projected to the node of the individual specified in the correspondence. If there is no such individual correspondence, the projection-request receiver will be asked to open a new node in its completion graph. In our experiments, peers do not possess any correspondences between individuals.

Finally, distinguishing between the cases where knowledge in different units is coupled with concepts X  correspondences only, from the cases where knowledge is coupled with link relations only, is not important for measuring the efficacy of the distributed reasoner, given that during reasoning both types of constructors result to projection requests from one unit to the other. 7.1 Setup of experimental cases We have evaluated the E -SHIQ distributed reasoner over a variety of SIS registry versions, extracted from the Grid4All system. Each registry version is serialized in an OWL file, resulting to a set of ontologies of 300, 600, and 1,200 compute node (denoted by cn )and 50, 100, and 200 cluster (denoted by c ) orders. We denote these ontologies with the number of instances and their type, e.g., 300cn is the ontology with 300 compute nodes and 50c the ontology with 50 clusters. 10 Each ontology uses 28 object properties and 47 disjointness axioms. All ontologies are in the ALCHIQ fragment of Description Logics.

In this set of experiments, each ontology has been partitioned in a number of units that are connected in certain ways. We have implemented distributed knowledge bases of 2 and 4 units. 11 All units are at most in the ALCHIQ fragment of Description Logics. We have not used any specific modularization algorithm, since this is out of the scope of our current work, while the objective was to partition ontologies so as to be able to study the additional cost incurred by the communication between reasoning peers, as described in the introductory part of this section.

Networks of 4 units have been formed according to the topology shown in Fig. 5 ,where continuous edges denote concept-to-concept correspondences and the dashed edges denote link relations. The direction of the edges denotes the unit for which the correspondences or link-relation specifications hold. Thus, projection requests are sent to the opposite direction than that of the arrows. Units 1, 3, and 4 share knowledge for compute nodes, storage, and computational resources, while unit 2 holds knowledge about clusters, agents, and generic axioms about atomic resources. For this reason, unit 2 always holds the lower number of axioms and individuals than other units in the network, especially for the cases where the registry is being populated by compute nodes. The numbers at each edge denote the number of correspondences and links between units.

As it can be noticed in Fig. 5 , we study the behavior of the distributed reasoner in cases where (a) correspondences between units are symmetric (bidirectional), in the sense that subjective views of connected units concerning correspondences coincide. These cases are denoted as  X  X D X ; (b) correspondences exist from the point of view of the smaller unit (i.e., from unit 2). These cases are denoted by  X  X S X ; and (c) cases where correspondences are from the point of view of the larger units (i.e., from units 1, 3, 4) to the smaller unit. These cases are denoted by  X  X B. X  Of course, link relations have a specific direction in all cases. It must be emphasized that the same cases are studied for the settings of 2 units. While units 1, 3, 4 share the same specifications both at the terminological and assertional levels, we have not set correspondences between them, in order to have a clear picture of the impact of units X  size to the communication overhead. In any case, these correspondences do not add any further information to our understanding of the distributed reasoner behavior, given that long paths and cycles still exist in the BD and SB settings: While in the case of networks of type BS, there are no projection requests to unit 2, in networks of type BD or type SB, any projection request to unit 2 may trigger further propagation requests from unit 2 to any other unit.
The partitioning of knowledge in SIS registries is done in two steps. First, we distribute the axioms of an empty SIS registry to the units. The only criterion at this step is that unit 2 will possess mainly knowledge about clusters. Next, we proceed with the population of the units with orders available in each version of the SIS registry. For each individual x in the registry, we identify its types, as well as the role assertions in which it is involved, together with the related individuals. Then, the units that contain the corresponding concept(s) in their signature are identified. Assertions concerning the specific individual are added to the unit having the smaller ABox. In case of ties, we do a random selection among units. Any role assertion. An assertion is added in the unit as link relation assertion if the related individuals individuals in any assertion has not been placed in a unit, the assertion is placed in a queue until the unit of all individuals has been decided.
 The distribution of the concepts, axioms, and individuals in units is summarized in Table 4 . It must be noticed that unit 2 has much smaller TBox and ABox from all other units, while it has a central position in any network: This is the worst case described earlier, where large units in the periphery trigger projection requests to other larger units via unit 2. 7.2 Experimental results Experiments concern networks of 2 and 4 peers, where, as already said, each peer is respon-sible for a single unit.

Each peer performs the initialization phase, as already described, the communication phase that is necessary to complete the consistency check of the distributed knowledge base in conjunction with the other peers, and finally, the communication phase for the classification task. The whole task is initiated and executed by each peer concurrently to the others.
The experiments were conducted on a 8-core MacOS server (Intel(R) Xeon(R) E5620 2.4GHz) with 6GB memory, on Darwin 10.8.0 and Sun Java 1.7. Communication of peers in each experiment is performed using TCP/IP sockets on the same machine.

For each experiment, we measure the total time needed by all peers to complete the classification task: This is what indicated as the  X  X n sequence X  case in the tables that follow, given that this is the time that the network of peers needs to complete the classification task, when peers run in sequence. In contrast to the  X  X n sequence X  time, we also show the time that the network of peers needs to complete the classification task, when all peers start the classification task simultaneously: This is the larger time recorded by a peer to complete the whole task, and it is indicated as the  X  X arallel X  case: Please recall that even in this case, peers consume the resources of a single computer.

Finally, for each experimental case, we record the time required by the peers to complete the whole task in case they do not use the projection cache (indicated as cache disabled cases) and in the case they do use the projection cache (indicated as cache enabled cases).
Results are summarized in Table 5 . The first column of this table indicates whether the projection cache is being enabled or disabled, and the second column shows the number of peers in the network. Each network is of type BD, SB, or BS, as it is indicated in the third column of the table. Finally, each column, from the fourth to the last one, concerns a specific version of the SIS registry. For each ontology version, we indicate both the time needed by the network of peers to complete the classification task in the  X  X n sequence X  and in the parallel cases. The time that Pellet needs to complete the classification task for each version of the SIS registry is shown in the last row of the table.

As results in Table 5 show, the distributed reasoner is more efficient than Pellet when the projection cache is enabled by the peers. Indeed, results show that when the projection cache is disabled, the time needed X  X oth in the  X  X n sequence X  and in the parallel cases X  X s larger than that required by the Pellet reasoner. Nevertheless, we must point out that the (positive or negative) differences in the recorded time increase when the number of units increases (i.e., as the distribution of knowledge increases), and especially in cases where long paths and cycles of projections occur due to correspondences (BD cases), or due to correspondences and link relations (SB cases). Specifically, the times recorded by the distributed reasoner in networks of 4 peers, when the cache is enabled (in contrast to the cases where the cache is disabled), are much lower than those recorded by the Pellet, even in cases where cycles of projection requests exist, and despite the existence of large units. Notably, this is the case even if peers work in sequence.

To further illustrate the difference in the efficacy of the distributed reasoner as the number of units increase from 2 to 4, Table 6 shows the gain in time required for the classification task. The times concern the parallel cases recorded by the E -SHIQ distributed reasoner in any registry version, when the cache is enabled, and for networks of 2 and 4 peers. Specifically, for each of BD, SB, BS cases, we estimate the gain in time by means of the formula gain = t 2  X  t 4 t 2 and 4 peers, respectively, in any case. This table shows that in cases where correspondences are unidirectional from the smaller to the larger units, the time gain achieved is high in all cases, compared to the time gain achieved when correspondences and link relations cause cyclic projection requests and larger paths of projections to occur, in cases BD and SB. For these cases, and when registries are populated by clusters, the time gain achieved is lower compared to the cases where the registries are populated by compute nodes. This is so, due to the large number of projection requests triggered among units. This is further discussed below.
Tables 7 and 8 illustrate the projection-request messages triggered by units for each experi-mental case, depending on whether peers have enabled or disabled the projection cache. Each entry in the table records the total number of projection requests triggered by each of the peers. 12 The table shows the projection requests that concern the classification task only. We observe that for the BD and SB cases, and for the registries populated with clusters, the total number of projection requests triggered by the larger units is very large.

This is due to the fact that unit 2 acts as a multiplier of projection requests. Thus, for each package of projection requests that it receives from its neighbors, it will package requests triggered due to these projections plus its own projection requests. These packaged requests are sent to all of its neighbors. This is not the case for registries populated with compute nodes, since unit 2 does not hold correspondences that issue further projections for compute nodes. The increase in individuals in case units are populated with clusters result to a significant increase in the triggered projections along paths in the network. This significantly larger number of projections explain the decrease in gain observed in Table 6 for these cases.
Delving more into the behavior of individual peers, Tables 9 and 10 record the time required by each of the peers to complete its part in the overall classification task. The tables distinguish between registries, depending on the types of individuals populating each registry: compute nodes (Table 9 )orclusters(Table 10 ). Each entry per peer shows the time required by the peer for the whole task, while the time required by the peers to check the consistency of their distributed knowledge base is recorded in the rows labeled  X  X onsistency check. X  As it is shown, registries populated with clusters, due to the larger complexity of specifications and the number of projection requests triggered, require greater time in all tasks. Nevertheless, in both cases, the results show the following phenomena: (a) having the projection cache enabled, peers require less time compared to the time required by Pellet and of course the time required when the cache is disabled. (b) The positive and negative differences in the recorded time are much greater in all cases with 4 peers (compared to the time required by Pellet), even for the cases where cycles and longer paths of projection requests may occur (i.e., in the BD and SB cases).

In addition to the above experiments, we have employed the modularization algorithm presented in [ 26 ], to construct an additional set of distributed knowledge bases from the same ontologies shown in Table 4 . The purpose of these additional experiments was to show the performance of the E -SHIQ distributed reasoner in networks larger than 2 and 4 units, with arbitrary connectivity among units, also in comparison with the performance of Pellet. In these cases, the cache is always enabled, the distribution of axioms among units is more balanced than in the previous cases, while the networks have been constructed so as to keep the length of paths among units as short as possible (for further details on the algorithm used and statistics for the networks constructed please consult [ 26 ]).

For this set of experiments, Table 11 reports the CPU time (in seconds) for the classification task and for the  X  X n parallel X  case for 9 different E -SHIQ distributed knowledge bases constructedfromeachversionoftheregistry.Foreachversionoftheregistryandeachnetwork constructed, the table reports also the number of units constructed by the modularization method. The classification time reported by Pellet for each of the SIS registries is reported in the last row of Table 11 . All experiments have ran using the same configuration of the computational setting as with the other set of experiments. 7.3 Concluding remarks on experimental results The concluding remarks on the experimental results can be summarized as follows: First, the distributed E -SHIQ reasoner has the potential to report smaller times than its centralized counterpart (Pellet), and if projections are cached, there is a balanced distribution of knowl-edge among units, and there are no large paths of connected (via correspondences and link relations) units.

In more detail, for the cases of BS networks, the correspondences hold from the point of view of the smaller unit (i.e., unit 2). The time recorded for the larger units in these cases is very small. Obviously, the reason is that the large units have no correspondences or link relations that may trigger further projections; thus, large units compute their local concept taxonomy during the initialization phase and end their task when they have served the few projection requests from unit 2. This is indeed the case given that no messages are transmitted from any of the peers exploiting units 1, 3, 4 to the peer for unit 2 (as it is also shown in Table 8 ). On the other hand, during the classification, there is a small delay in peer 2, due to the projection messages it sends to its neighbors. However, these projection messages are evaluated almost instantly by the neighboring peers.

For the cases of SB networks, the correspondences hold from the point of view of larger units (i.e., units 1, 3, and 4). For the classification task of SIS registries with compute node orders, we must notice that peer 2 needs more time than its neighbors. The reason is that although it has no correspondences toward its neighbors, it still depends on them because of the link relations. Therefore, peer 2 transmits projection-request messages to its neighbors in this setting, as well. In cases with 4 units and cluster orders, we have many projection requests triggered between units. This fact affects the overall performance, since peer 2 will reply to a peer, only when it receives the projection responses from other peers. The delay is significantly reduced when the projection cache is enabled.

For the case of BD networks, correspondences hold for the viewpoint of both small and large units. This means that we have more correspondences in the BD cases, compared to the BS and SB cases. This affects the classification time in these cases, which is higher than the time recorded to any of the corresponding BS and SB cases. More correspondences result to more projection requests that are triggered during the reasoning tasks. This also affects the time spent for the consistency check of the distributed knowledge base, which is also higher than the corresponding time in the BS and SB cases.

Finally, when the cache of projections is disabled, the classification time recorded for the BD and SB cases is always higher than the time recorded by Pellet. This happens due to the triggering of projection-request messages along paths in the network, resulting to  X  X valanches X  of projection-request messages.
In addition to the above remarks, the CPU time reported in Table 11 indicates (a) that increasingthenumberofunitstendstoalsoincreasetheCPUtimeand(b)thattheperformance is not affected by the number of units. Indeed, increasing the number of units results to more correspondences, thus more projection requests to be served in the network. However, the CPU time is not always linear to the number of units for each version of the registry. This is due to the fact that the topology of the network and the distribution of knowledge among units are important factors, as indicated by the experiments. To further delve into these issues, we need to investigate different modularization options. 8 Related work E -
SHIQ shifts the attention from research efforts concerning distributed and parallel rea-soning with ontologies that do not consider how knowledge of peers can be coupled. These efforts do not take advantage of the heterogeneity/complementarity of peers X  knowledge in inherently distributed settings and do not consider peers X  subjective beliefs on combining their knowledge. Specifically, we may distinguish the following two broad categories of approaches (a) Distributed reasoning with languages of low expressiveness without considering how (b) Efficientparallelreasoningmethodsthatdonotconsidertheheterogeneity/complementarity
E -SHIQ is closely related to modular ontology representation frameworks, offering constructors that distributed Description Logics and E -connections have proposed. The para-graphs that follow succinctly present modular ontology representation formalisms closely related to our proposal, pointing out their advantages and limitations. 8.1 DDL: bridge rules and individual correspondences As already said, distributed Descriptions Logics (DDL) [ 3 , 29 ] extend the syntax of standard Description Logics with subjective concept-to-concept correspondences between any pair of units i , j  X  I , i = j . Correspondences are distinguished to concept onto concept and concept into concept correspondences.
 A DDL TBox is a T = T , B ,where T ={ ( T i , R i ) } i  X  I is a collection of SHIQ TBox X  X s T and RBox X  X s R i ,and B ={ B ij } i = j  X  I is a collection of bridge rules from unit i to j .
A DDL ABox A includes all A i for i  X  I , and subjective individual correspondences C ij which are either partial individual correspondence of the form i:a  X  j:b k , k = 1 ,..., n , or complete individual correspondence of the form i:a { j : b 1 , j : b 2 ,..., j : b n } X  N O j , and allow different levels of granularity.
 . Formally, a domain relation r ij  X  i  X  j specifies corresponding sets of individuals in the domains of i and j units, from the subjective point of view of j . Non-classical full-hole (or empty-hole ) interpretations prohibit the propagation of inconsistencies between units [ 29 ]. A distributed interpretation I satisfies the elements of a distributed TBox T (denoted by I | d ) according to the following clauses  X 
I | d ( T i , R i ) if I i | T i and I i | R i  X 
I | d i:C  X  j:D if r ij ( C I i )  X  D I j  X 
I | d i:C  X  j:D if r ij ( C I i )  X  D I j  X 
I | d B if I satisfies all bridge rules in B (i.e., in any B ij , i = j  X  I )  X  I | d a:C if I i a:C , I | d ( a , b ) :R if I i ( a , b ) :R ,forall a:C , ( a , b ) :R in A i
A I is a model of T (denoted as I | d T ), if I | d B , I | d T i ,and I | d R i for each i  X  I .A I also satisfies the A if for every i , j  X  I , I d A i and I d C ij .

DDL is supported by the DRAGO reasoning system [ 30 ] operating in a distributed, peer-to-peer setting. However, by definition, concept correspondences can be only employed when units have overlapping domains of interpretation. This is an important assumption for the open environment we consider, where no a priori knowledge is available about units and we cannot assume that these can be re-engineered.

DDL, as well as C-OWL, has been criticized that it does not model certain crucial prop-erties of subsumption relations (mainly due to the granularity of correspondences between individuals in different domains). Specifically X  X ccording to the original DDL semantics X  subjective subsumption relations do not propagate transitively. DDL even under the assump-composition) fails to propagate subsumption relationships between units in the general case (i.e., in the case where any number of into and onto concept-to-concept correspondences exists). This is due to the fact that entailments in one unit may be affected by correspon-dences between individuals in distant units. To overcome this limitation, DDL may assume transitive domain relations in distributed models [ 15 ]. However, under this condition, DDL cannot chain concept into concept correspondences. 8.2 E -Connections: i -concepts and link relations E -ConnectionshavebeenproposedforcombiningAbstractDescriptionSystems(ADSs)[ 18 ], several families of decidable logics, including Description Logics. E -Connections assure decidability, if reasoning is also decidable in each of the logics in combination. E -Connections for combining Description Logics knowledge bases [ 10 , 11 , 24 ] have been proposed as a suit-able technique for combining ontologies interpreted over disjoint logical domains . Consider-ing ontologies in SHIQ , link relations can be hierarchically related and be either transitive or restricted by value and qualified cardinality restrictions.

An i -roleaxiom is a role inclusion axiom of i -roles R and S .A combined role box is a tuple R = ( R i ) i  X  I ,where R i is the role hierarchy of the i -th unit.

The set of ij -link relations relating individuals in the i and j units, i = j  X  I , is denoted by
E ij . These sets are not pairwise disjoint, but are disjoint with respect to the sets of concept names.

An ij -linkrelationaxiom is an expression of the form E n ij E m ij , where the superscript inclusion axioms.

The combined LBox L contains all R ij , i , j  X  I , and a set of generalized transitive I  X  I .

Let ( N C i ) i  X  I be tuples of sets of concept names. The sets of i-concepts (i.e., concepts specifiedinthe i -th unit) are inductively defined as the smallest sets constructed by the constructors shown in Tables 1 and 2 ,where C and D are i -concepts, G is a j -concept, E ij is an ij -link relation with i = j ,and R is an i -role.

The E -connections definition of a combined TBox is a family of TBoxes T ={ T i } i  X  I , where T i is a finite set of i -concept inclusion axioms (inclusion axioms between i -concepts). A combinedknowledgebase = T , R , L iscomposedbythecombinedTBox T ,combined RBox R , and combined LBox L .

As an example, let us consider a knowledge base with I ={ 1 , 2 } ,where unit 1 specifies knowledge about Agents and unit 2 about market orders. These units are interpreted over disjoint logical domains, and E -connections are suitable for combining their knowledge. Specifically, we can consider the combined knowledge base = T , R , L ,where T = { T 1 , T 2 } , R = ( R 1 , R 2 ) , L containing the empty sets R 12 , R 21 ,and Trans is the empty set of transitivity axioms for link relations and roles. Specifically, In this example, orders is a 12-link relation and L = X  , and the specifications imply Consumer Agent and Pro v ider Agent .

Considering different units being connected by link relations only, an interpretation is a interpretation domain and i  X  j = X  ,for i = j . The valuation function  X  I i maps every concept to a subset of i and every i -role to a subset of i  X  i , while the function  X  I ij maps every ij -link relation to a subset of i  X  j .
If C and D are i -concepts, the interpretation satisfies the axiom C D if C I i  X  D I i and satisfies the combined TBox if it satisfies all axioms in all the component sets. Finally, the interpretation I satisfies the combined knowledge base = T , R , L , denoted by I | iff it satisfies T , R ,and L .

Reasoning services for E -connected ontologies can be provided only by a centralized reasoning engine that receives as input the connected knowledge base.

As already discussed, E -connections apply only on units that have disjoint domains of interpretation, which is an important assumption for the open environment we consider, i.e., we cannot apply any of the known reductions from E -connections to DDL and vice versa [ 10 ], because we cannot assume that this satisfies peers X  preferences.

Continuing our example, and given that the specifications in the different ontologies may evolve independently from each other, we may consider a case where the domains of the different ontologies become overlapping: Such a situation is shown in Fig. 6 ,where T 1 includes among others the specification Consumer (  X  orders . AtomicRequest ) ,where AtomicRequest is an 1  X  concept. Now, in order to show that Consumer Agent , knowl-edge from both units must be combined: If, for instance, we had a single SHIQ ontology including all the axioms, then to deduce that Consumer Agent , we need to specify an additional axiom specifying that AtomicRequest AbstractMarketOrder .
 Nevertheless, there are certain problems in this setting with E -connections: First, E -connections do not support reasoning with ontologies interpreted over overlapping logi-cal domains. Thus, we cannot combine knowledge by means of subsumption relationships between concepts in different ontologies. Second, orders appears as a local role for unit 1, as well as a 12-link relation. Specifications concerning the 12-link relation orders must be treated in conjunction with the specifications for the 1-role orders , so as knowledge from both ontologies to be coupled. We conjecture that this is so, given that unit 1 is  X  X espon-sible X  for the naming of 1-roles and 12-link relations in any specification. Punning in E -connections allows using the same name for roles and link relations in different domains. Then, the interpretation of a property in E -connections is the disjoint union of its interpre-tation in each unit. Punning is necessary in order to specify generalized transitivity axioms, specifying the domains in which relations are transitive. Transitivity specified by means of generalized transitivity axioms imposes the necessity of a  X  X ird X  X  eye view X  of the combined reasoning process: As far as we know, no distributed or federated reasoner has been imple-mented for reasoning with E -connected units supporting punning and generalized transitivity axioms. 8.3 P-DL In P-DL [ 2 ], a distributed (packaged) ontology is composed of packages . Each package is a unit (i.e., an ontology) that can use terms (concepts, properties, individuals) defined in other packages via importing these terms and their related axioms. Reusing terms support modeling inter-package concept subsumption and roles. Formally, given a finite index set I , a package P i imports any term t defined in any package P j , with i = j , denoted by P j t  X  P i . where I i = ( i ,  X  I i ) is the local model for each package P i ,and r ij  X  i  X  j is the indicates that y  X  j is an image of x  X  i . A concept i:C is satisfiable w.r.t. a P-DL { P i } , { P j  X  P i } i = j if there exists a distributed model such that i:C I i = X  . Also, the packaged ontology entails the subsumption i:C j:D iff r ij ( C I i )  X  D I j holds in every distributed model of the packaged ontology. Under P-DL semantics, image domain relations are one-to-one and compositional consistent ( r ij = r ik  X  r kj ,where  X  denotes relation com-position). It follows that semantic relationships between two terms in different packages can be inferred even if none of these packages imports terms directly from the other. This aspect imposes a kind of  X  X lobal X  domain relations, which is a strong assumption for any inherently distributed and heterogeneous setting.

To overcome the limitations of E -connections, we may use P-DL. According to P-DL, packages may also be interpreted in overlapping domains. As far as our example is concerned, terms from the package 2 may be imported to the package 1. In this case, the specifications in
T 1 are as follows:
However, there are two main issues: One concerns the fact that associations between the elements of different ontologies are not first-class constructs that can be manipulated and exploited in any independent way during reasoning. Also, while the subsumption relation of 1 :AtomicRequest and 2 :AbstractMarketOrder holds for package 1, this is handled as any other subsumption relation included in T 1 or T 2 . Indeed, unit 2 handles this subsumption relation as if it was one included in T 2 . The treatment of any such specification in an  X  X bjective X  way is a strong assumption given that the subjectiveness of associations between units is not preserved. The P-DL distributed ontology could still imply that Consumer Agent in case the axiom ( 1 :AtomicRequest 2 :AbstractMarketOrder ) is included in T 2 .Thismay not hold, if the associations had been subjective: P-DL can not distinguish between these two cases. 8.4 IDDL Integrated distributed Description Logics (IDDL) [ 35 ] takes a different paradigm than other contextual frameworks: this approach asserts correspondences from an  X  X xternal X  point of view, which encompasses ontologies in relation. One consequence of this approach is that correspondences can be manipulated and reasoned about independently of the ontologies, as first-class objects, allowing operations like inverting or composing ontology alignments. A reasoning procedure [ 6 ] for this formalism has been defined, where a centralized system detaining the correspondences can determine global consistency of a network of ontologies by communicating with local reasoners of arbitrary complexity. The motivation for separating local and global reasoning is to better prevent interactions between contexts, thus making IDDL quite robust to heterogeneity. However, it is required that all the correspondences in the distributed setting are a priori known and  X  X lobally X  accepted, which is a strong assumption for the types of settings we assume. 8.5 Distinguishing features of E -SHIQ Concluding the above, we must recall that E -SHIQ supports autonomous peers to combine their knowledge and jointly perform federated reasoning, while maintaining the subjective-ness of specifications and properly propagating subsumptions among them in the presence of concept-to-concept correspondences and link relations among their units. The distinguishing features of E -SHIQ are presented in comparison with other modular ontology representation frameworks in Table 12 :  X  E -SHIQ supports subjective concept-to-concept correspondences between concepts in different units and link relations in the specifications of concepts. These features allow some units to have overlapping domains of interpretation, while others may have disjoint domains, yet remain connected via link relations in the same network.  X  E -SHIQ supports subjectiveness on (concept to concept and individuals X ) correspon-dences. Correspondences concerning equivalences between concepts are specified as con-junctions of into and onto correspondences.  X  E -SHIQ supports punning by allowing roles and link relations to have the same name, within the same unit. This allows peers to reason with roles and link relations locally. To take further advantage of punning, E -SHIQ allows a restricted form of transitive axioms, aiming to support the computation of the transitivity closure of a role in any unit by local means.  X  E -SHIQ supports subsumption propagation in a sequence of semantically connected units. 9 Concluding remarks and future work Aiming to provide a rich representation framework for combining and reasoning with distinct ontologies in open, heterogeneous and inherently distributed settings, this article proposes the E -
SHIQ representation framework. In these settings, we can expect that different ontologies may be combined in many different, subtle ways, mostly by means of correspondences and domain-specific relations both in the terminological and assertional parts of the knowledge base, while peers retain subjective beliefs on how their knowledge is coupled with that of others. Our aim was to support peers to reason jointly with knowledge distributed in their ontologies, by combining local reasoning chunks, while respecting peer X  X  ownership of knowledge and data, and the subjectivity of specifications.

The E -SHIQ framework enables peers to combine their knowledge and supports them to participate in a collaborative distributed tableau algorithm, constructing a distributed com-pletion graph, i.e., each peer possesses a part of the overall graph, and graphs in different peers are combined by means of projections of graph nodes. No peer possesses the overall graph, and the collaboration between peers is realized via the maintenance of corresponding nodes X  labels from one chunk of the completion graph to another, via projection requests and projection responses.
 The proposed E -SHIQ tableau algorithm can in principle extend any tableau reasoner. The implementation presented in this article extends Pellet. An optimization performed dur-ing reasoning is the packaging and caching of the projection-request messages sent to a neighbor peer. Actually, for the E -SHIQ distributed reasoner presented, the communica-tion phase follows the initialization phase (as these are defined in Sect. 6.2 ), allowing the gathering of all possible projection requests from any peer to its neighbors. Further experi-mentation is necessary toward interleaving the construction of the local completion graphs and communicating projection requests and projection-responses under different conditions: For instance, we may expect that sending a small number of projection requests may decrease the idle time of peers (i.e., the time waiting for responses). However, this may not be the case when requests are sent to peers with large units, who have not yet constructed their local completion graph.

Current implementation of the distributed reasoner instructs the peers to replicate their local completion graph each time a projection-request message is received. Doing so, the peer is able to process the requested projections w.r.t. to own (local and subjective) knowledge and the subjective knowledge of peers that triggered the received requests. The preservation of the local completion graph reduces the cost of processing the projected nodes, because each unit does not need to reconstruct the local completion graph from scratch. However, the replication of the completion graph for each request received from any neighbor may result to a significant amount of required resources per peer. To achieve a good balance between the processing time and the resources required, further research is necessary: This may be handled by a task manager in each peer which will further organize the requests and the available resources, for better performance. Also, we need to recall that replications of completion graphs are not preserved (i.e., each replica is destructed once the projection requests are served).

Experimental results have shown that the caching of the projection requests is necessary to increase the efficiency of the distributed reasoner: Further research is necessary toward more sophisticated caching techniques (e.g., via abstraction methods), as well as toward more advanced matchmaking techniques between projection-request messages and cached projections.

Although the experimental results have shown that the distributed reasoning process pro-posed is more efficient than a centralized counterpart on a semantically equivalent monolithic ontology, they have also uncovered some limitations of the implemented reasoner. Specif-ically, we have seen that it is not possible to eliminate the idle time of peers: There will always be a peer that will have to wait for the results of the projection requests it has trig-gered. Nevertheless, as also evidenced by our experiments, to minimize the idle time of peers, knowledge has to be distributed to units evenly: In this case, the processing load is expected to be distributed to the peers evenly. Toward achieving this goal in settings with autonomous peers, where each peer evolves its knowledge independently from the others, self-organization mechanisms are necessary. This however may contradict two basic require-ments: (a) knowledge in a unit is local and is not available to others, (b) peers are autonomous and hold subjective knowledge concerning how their knowledge is combined with the knowl-edge of others. However, a self-organization approach may aid toward reducing the length of paths in any network of peers. This will reduce the number of projection requests triggered along any path in the network of peers.

There are important lines of research and development where E -SHIQ can be shown to be effective in real-world settings where large ontologies coexist. One of these concerns ontology modularization. Specifically, we need partitioning algorithms that will construct E -
SHIQ distributed knowledge bases with the aim to preserve the properties that make the distributed reasoning process as much efficient as possible. First, results toward this goal are reportedin[ 26 ].
 References
