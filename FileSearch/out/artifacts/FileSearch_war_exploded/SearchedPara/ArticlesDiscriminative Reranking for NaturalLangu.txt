 Massachusetts Institute of Technology derivation or a generative model which takes these features into account. We introduce a new
The method combined the log-likelihood under a baseline model (that of Collins [1999]) with obvious implementation of the boosting approach. We argue that the method is an appealing alternative X  X n terms of both simplicity and efficiency X  X o work on feature selection methods within log-linear (maximum-entropy) models. Although the experiments in this article are on translation, or natural language generation. 1. Introduction
Machine-learning approaches to natural language parsing have recently shown some success in complex domains such as news wire text. Many of these methods fall into the general category of history-based models, in which a parse tree is represented as a derivation (sequence of decisions) and the probability of the tree is then calculated as a product of decision probabilities. While these approaches have many advantages, it can be awkward to encode some constraints within this framework. In the ideal case, the designer of a statistical parser would be able to easily add features to the model that are believed to be useful in discriminating among candidate trees for a sentence.
In practice, however, adding new features to a generative or history-based model can be awkward: The derivation in the model must be altered to take the new features into account, and this can be an intricate task.
 probabilistic parser. The base parser produces a set of candidate parses for each parses. A second model then attempts to improve upon this initial ranking, using allows a tree to be represented as an arbitrary set of features, without concerns about which takes these features into account.
 approach to ranking problems described in Freund et al. (1998). The algorithm can be viewed as a feature selection method, optimizing a particular loss function (the exponential loss function) that has been studied in the boosting literature. We applied the boosting method to parsing the Wall Street Journal (WSJ) treebank (Marcus,
Santorini, and Marcinkiewicz 1993). The method combines the log-likelihood under a baseline model (that of Collins [1999]) with evidence from an additional 500,000 model achieved 88.2% F -measure on this task. The new model achieves 89.75% F -measure, a 13% relative decrease in F -measure error.
 approach should be applicable to many other natural language processing (NLP) problems which are naturally framed as ranking tasks, for example, speech recognition, machine translation, or natural language generation. See Collins (2002a) for an application of the boosting approach to named entity recognition, and Walker,
Rambow, and Rogati (2001) for the application of boosting techniques for ranking in the context of natural language generation.
 approach which takes advantage of the sparse nature of the feature space in the sparsity. Experiments show an efficiency gain of a factor of 2,600 for the new algorithm over the obvious implementation of the boosting approach. Efficiency issues are million parse trees and over 500,000 features. The improved algorithm can perform 100,000 rounds of feature selection on our task in a few hours with current processing speeds. The 100,000 rounds of feature selection require computation equivalent to  X  X  X aive X  X  implementation).
 features as arbitrary predicates of the entire tree have been noted before. In particular, previous work (Ratnaparkhi, Roukos, and Ward 1994; Abney 1997; Della Pietra, Della
Pietra, and Lafferty 1997; Johnson et al. 1999; Riezler et al. 2002) has investigated the use of Markov random fields (MRFs) or log-linear models as probabilistic models with global features for parsing and other NLP tasks. (Log-linear models are often referred to as maximum-entropy models in the NLP literature.) Similar methods have also been proposed for machine translation (Och and Ney 2002) and language understanding in dialogue systems (Papineni, Roukos, and Ward 1997, 1998). Previous work (Friedman,
Hastie, and Tibshirani 1998) has drawn connections between log-linear models and 26 boosting for classification problems. One contribution of our research is to draw similar connections between the two approaches to ranking problems.
 attractive alternative to maximum-entropy models, in particular, feature selection methods that have been proposed in the literature on maximum-entropy models. The earlier methods for maximum-entropy feature selection methods (Ratnaparkhi, Roukos, and Ward 1994; Berger, Della Pietra, and Della Pietra 1996; Della Pietra,
Della Pietra, and Lafferty 1997; Papineni, Roukos, and Ward 1997, 1998) require several full passes over the training set for each round of feature selection, suggesting that at least for the parsing data, the improved boosting algorithm is several orders of these earlier methods for feature selection, as well as the more recent work of McCallum (2003); Zhou et al. (2003); and Riezler and Vasserman (2004).
 based models for NLP and highlights the perceived shortcomings of history-based models which motivate the reranking approaches described in the remainder of the article. Section 3 describes previous work (Friedman, Hastie, and Tibshirani 2000;
Duffy and Helmbold 1999; Mason, Bartlett, and Baxter 1999; Lebanon and Lafferty 2001; Collins, Schapire, and Singer 2002) that derives connections between boosting and maximum-entropy models for the simpler case of classification problems; this work forms the basis for the reranking methods. Section 4 describes how these approaches can be generalized to ranking problems. We introduce loss functions for boosting and MRF approaches and discuss optimization methods. We also derive the investigating the performance improvements on parsing, efficiency issues, and the effect of various parameters of the boosting algorithm. Section 6 discusses related work in more detail. Finally, section 7 gives conclusions.
 this article we give considerably more detail in terms of the algorithms involved, their justification, and their performance in experiments on natural language parsing. 2. History-Based Models
Before discussing the reranking approaches, we describe history-based models (Black et al. 1992). They are important for a few reasons. First, several of the best-performing parsers on the WSJ treebank (e.g., Ratnaparkhi 1997; Charniak 1997, 2000; Collins 1997, 1999; Henderson 2003) are cases of history-based models. Many systems applied to part-of-speech tagging, speech recognition, and other language or speech tasks also fall [1999]) is used as the initial model for our approach. Finally, it is important to describe history-based models X  X nd to explain their limitations X  X o motivate our departure from them.
 given training examples  X  x i , y i  X  , where x i Z X , y
GEN  X  x  X  is a set of candidate trees for that sentence. A particular characteristic of the problem is the complexity of GEN  X  x  X  : GEN  X  x  X  can be very large, and each member of
GEN  X  x  X  has a rich internal structure. This contrasts with  X  X  X ypical X  X  classification prob-classification problems.
 to each  X  x, y  X  pair. 2 The most likely parse for each sentence x is then arg max a one-to-one mapping is defined between each pair  X  x , y  X  and a decision sequence b d written as ries into equivalence classes, thereby making independence assumptions in the model. model. The decision sequence b d 1 ::: d n  X  is defined as the sequence of rule expansions in a top-down, leftmost derivation of the tree. The history is equivalent to a partially built tree, and F picks out the nonterminal being expanded (i.e., the leftmost nonterminal in the fringe of this tree), making the assumption that P  X  d the nonterminal being expanded. In the resulting model a tree with rule expansions b A Y b i  X  is assigned a probability sidered to be a type of PCFG, where the rules are lexicalized. An example rule would be
Lexicalization leads to a very large number of rules; to make the number of parameters manageable, the generation of the right-hand side of a rule is broken down into a number of decisions, as follows: 28 mation in some cases.
 tree can be written as a linear sum of parameters a example, consider a PCFG with rules b A k Y b k  X  for 1 k m .If h of times b A k Y b k  X  is seen in the tree, and a k  X  log P  X  b with that rule, then
All models considered in this article take this form, although in the boosting models the score for a parse is not a log-probability. The features h vector of counts which represent the tree. The parameters a each feature on the score of a tree.
 profound influence on the parameterization of the model. (Similar observations have been made in the related cases of belief networks [Pearl 1988], and language models for speech recognition [Rosenfeld 1997].) When designing a model, it would be
Unfortunately, with history-based models adding new features often requires a modification of the underlying derivations in the model. Modifying the derivation to include a new feature type can be a laborious task. In an ideal situation we would be derivation that included these features.

Markov model (HMM). We might have the intuition that almost every sentence has at
HMM takes some ingenuity. The obvious approach X  X o add to each state the information about whether or not a verb has been generated in the history X  X oubles the number of states (and parameters) in the model. In contrast, it would be trivial to implement a feature h k  X  x , y  X  which is 1 if y contains a verb, 0 otherwise. 3. Logistic Regression and Boosting
We now turn to machine-learning methods for the ranking task. In this section we maximum-entropy) models and boosting. These methods form the basis for the reranking approaches described in later sections of the article. Maximum-entropy models are a very popular method within the computational linguistics community; see, for example, Berger, Della Pietra, and Della Pietra (1996) for an early article which introduces the models and motivates them. Boosting approaches to classification have received considerable attention in the machine-learning community since the intro-duction of AdaBoost by Freund and Schapire (1997).
 algorithms and maximum-entropy models, are perhaps not familiar topics in the
NLP literature. However there has recently been much work drawing connections between the two methods (Friedman, Hastie, and Tibshirani 2000; Lafferty 1999; Duffy and Helmbold 1999; Mason, Bartlett, and Baxter 1999; Lebanon and Lafferty 2001;
Collins, Schapire, and Singer 2002); in this section we review this work. Much of this work has focused on binary classification problems, and this section is also restricted to problems of this type. Later in the article we show how several of the ideas can be carried across to reranking problems. 3.1 Binary Classification Problems The general setup for binary classification problems is as follows:
We show that both logistic regression and boosting implement a linear, or hyperplane, output from the classifier is 30 where
Here  X  a a I 7  X  x  X  is the inner or dot product between the vectors  X  a a and 1ifz 0, sign( z )= 1 otherwise. Geometrically, the examples x are represented as
Points lying on one side of this hyperplane are classified as +1; points on the other side are classified as 1. The central question in learning is how to set the parameters  X  a a , given the training examples b  X  x 1 , y 1  X  ,  X  x 2 , y Helmbold 1999; Mason, Bartlett, and Baxter 1999; Lebanon and Lafferty 2001; Collins,
Schapire, and Singer 2002) has shown that the methods have strong similarities. The next section describes parameter estimation methods. 3.2 Loss Functions for Logistic Regression and Boosting
A central idea in both logistic regression and boosting is that of a loss function, which drives the parameter estimation methods of the two approaches. This section describes loss functions for binary classification. Later in the article, we introduce loss functions for reranking tasks which are closely related to the loss functions for classification tasks. to define a conditional probability estimation is often used for parameter estimation. The parameters are chosen to maximize the log-likelihood of the training set; equivalently: we talk (to emphasize the similarities to the boosting approach) about minimizing the negative log-likelihood. The negative log-likelihood, LogLoss(  X  a a ), is defined as LogLoss  X   X  a a  X  X 
There are many methods in the literature for minimizing LogLoss(  X  a a ) with respect to
Della Pietra 1996; Della Pietra, Della Pietra, and Lafferty 1997), or conjugate gradient methods (Malouf 2002). In the next section we describe feature selection methods, as described in Berger, Della Pietra, and Della Pietra (1996) and Della Pietra, Della Pietra, and Lafferty (1997).
 example x is the most likely label under the model, where as before, sign  X  z  X  X  1if z 0, sign  X  z  X  X  1 otherwise. Thus we see that the logistic regression model implements a hyperplane classifier.
 as
This loss function is minimized using a feature selection method, which we describe in the next section.
 (equation (6)). In making connections between the two functions, it is useful to consider a third function of the parameters and training examples, classified training examples under parameter values  X  a a .
 parameter values  X  a a ,as With these definitions, the three loss functions can be written in the following form:
The three loss functions differ only in their choice of an underlying  X  X  X otential function X  X  of the margins, f ( z ). This function is f ( z ) = log (1 + e 32 f  X  z  X  X  g z 0  X  for LogLoss, ExpLoss, and Error, respectively. The f(z) functions penalize nonpositive margins on training examples. The simplest function, f  X  z  X  X  g z 0  X  , gives a cost of one if a margin is negative (an error is made), zero otherwise. ExpLoss and
LogLoss involve definitions for f  X  z  X  which quickly tend to zero as z Y V but heavily penalize increasingly negative margins.
 f  X  z  X  X  log  X  1  X  e z  X  are both upper bounds on the error function, so that mini-mizing either LogLoss or ExpLoss can be seen as minimizing an upper bound on set; see, for example, Hoffgen, van Horn, and Simon [1995].) As z Y V , the func-f  X  z  X  X  e z shows an exponentially growing cost function as z Y V . In contrast, as z Y V it can be seen that log  X  1  X  e z  X  Y log  X  e asymptotically linear growth for negative z . As a final remark, note that both f  X  z  X  X  e with local minima when optimizing these two loss functions. 3.3 Feature Selection Methods
In this article we concentrate on feature selection methods: algorithms which aim to using a small number of features (equivalently, ensuring that most parameter values in  X  a a are zero). Roughly speaking, the motivation for using a small number of features is the hope that this will prevent overfitting in the models.
 by several authors (Ratnaparkhi, Roukos, and Ward 1994; Berger, Della Pietra, and Della Pietra 1996; Della Pietra, Della Pietra, and Lafferty 1997; Papineni, Roukos, and
Ward 1997, 1998; McCallum 2003; Zhou et al. 2003; Riezler and Vasserman 2004). The most basic approach X  X or example see Ratnaparkhi, Roukos, and Ward (1994) and
Berger, Della Pietra, and Della Pietra (1996) X  X nvolves selection of a single feature at each iteration, followed by an update to the entire model, as follows:
Step 1: Throughout the algorithm, maintain a set of active features. Initialize this set to be empty.

Step 2: Choose a feature from outside of the set of active features which has the largest estimated impact in terms of reducing the loss function LogLoss, and add this to the active feature set.
 only the active features to take nonzero parameter values when minimizing LogLoss. Return to Step 2 .

Methods in the boosting literature (see, for example, Schapire and Singer [1999]) can be considered to be feature selection methods of the following form: Step 1: Start with all parameter values set to zero.

Step 2: Choose a feature which has largest estimated impact in terms of reducing the loss function ExpLoss.

Step 3: Update the parameter for the feature chosen at Step 2 in such a way as to minimize ExpLoss  X   X  a a  X  with respect to this one parameter. All other parameter values are left fixed. Return to Step 2 .
 parameter value is adjusted, namely, the parameter corresponding to the newly chosen feature. Note that in this framework, the same feature may be chosen at more than one iteration. 5 The maximum-entropy feature selection method can be quite inefficient, as the entire model is updated at each step. For example, Ratnaparkhi (1998) quotes times of around 30 hours for 500 rounds of feature selection on a prepositional-phrase attachment task. These experiments were performed in 1998, when pro-cessors were no doubt considerably slower than those available today. However, ing: Our task involves around 1,000,000 examples, with perhaps a few hundred features per example, and 100,000 rounds of feature selection; this compares to 20,000 exam-ples, 16 features per example, and 500 rounds of feature selection for the PP attach-complexity scales linearly in these factors, 6 our task is 34 as large as the PP attachment task. These figures suggest that the maximum-entropy feature selection approach may be infeasible for large-scale tasks such as the one in this article.
 round of feature selection may be a disadvantage in terms of the number of features or the test data accuracy of the final model. There is reason for concern that Step 2 will at some iterations mistakenly choose features which are apparently useful in reducing optimized at the previous iteration of Step 3. However, previous empirical results for boosting have shown that it is a highly effective learning method, suggesting that this boosting approach, and for reasons of computational efficiency, we pursue the boosting approach to feature selection in this article. 3.4 Statistical Justification for the Methods
Minimization of LogLoss is most often justified as a parametric, maximum-likelihood (ML) approach to estimation. Thus this approach benefits from the usual guarantees for ML estimation: If the distribution generating examples is within the class of distributions specified by the log-linear form, then in the limit as the sample size goes to infinity, the model will be optimal in the sense of convergence to the true underlying distribution generating examples. As far as we are aware, behavior of the models for finite sample sizes is less well understood. In particular, while feature selection methods have often been proposed for maximum-entropy models, little theoretical justification (in terms of guarantees about generalization) has been given for them. It seems intuitive that a model with a smaller number of parameters will require fewer motivated either from a Bayesian perspective (through a prior favoring models with a smaller number of nonzero parameters) or from a frequentist/goodness-of-fit perspective (models with fewer parameters are less likely to fit the data by chance), but this requires additional research.
 algorithms were originally developed within the PAC framework (Valiant 1984) for machine learning, specifically to address questions regarding the equivalence of weak and strong learning. Freund and Schapire (1997) originally introduced AdaBoost and gave a first set of statistical guarantees for the algorithm. Schapire et al. (1998) gave a second set of guarantees based on the analysis of margins on training examples. Both examples and that the goal is to find a hypothesis with a small number of expected errors with respect to this distribution. The form of the distribution is not assumed to be known, and in this sense the guarantees are nonparametric, or  X  X  X istribution free. X  X 
Freund and Schapire (1997) show that if the weak learning assumption holds (i.e., distribution over the sample space X { 1, +1}), then the training error for the
ExpLoss method decreases rapidly enough for there to be good generalization to test examples. Schapire et al. (1998) show that under the same assumption, minimization of
ExpLoss using the feature selection method ensures that the distribution of margins on training data develops in such a way that good generalization performance on test examples is guaranteed.
 3.5 Boosting with Complex Feature Spaces
Thus far in this article we have presented boosting as a feature selection approach. In described as a method for combining multiple models, for example, as a method for forming a linear combination of decision trees. We consider only the simpler, feature selection view of boosting in this article. This section is included for completeness and because the more general view of boosting may be relevant to future work on boosting approaches for parse reranking (note, however, that the discussion in this section is not essential to the rest of the article, so the reader may safely skip this section if she or he wishes to do so).
 particular, we have assumed that m is relatively small (for example, small enough for algorithms that require O(m) time or space to be feasible). More generally, however, boosting can be applied in more complex settings. For example, a common use of boosting is to form a linear combination of decision trees. In this case each example x is represented as a number of attribute-value pairs, and each  X  X  X eature X  X  h decision tree built on predicates over the attribute values in x . In this case the number of features m is huge: There are as many features as there are decision trees over the given set of attributes, thus m grows exponentially quickly with the number of attributes that are used to represent an example x . Boosting may even be applied in situations in which the number of features is infinite. For example, it may be used to corresponds to a different parameter setting within the (infinite) set of possible parameter settings for the neural network.
 is generally not feasible to perform an exhaustive search (with O(m) time complexity) for the feature which has the greatest impact on the exponential an approximate search is performed. In boosting approaches, this approximate search over the training examples is maintained. The distribution can be interpreted as assigning an importance weight to each training example, most importantly giving higher weight to examples which are incorrectly classified. At each round of boosting network parameter setting) which has a relatively low error rate with respect to the usually referred to as  X  X  X he weak learner. X  X  The weak learner generally uses an with respect to the distribution. Freund and Schapire (1997) show that provided that at each round of boosting the weak learner returns a feature with greater than (50 + with the number of rounds of boosting. This fast drop in training errors translates to statistical bounds on generalization performance (Freund and Schapire 1997). 36 particularly simple case in which the weak learner can afford to exhaustively search through the space of possible features. Future work on reranking approaches might consider other approaches X  X uch as boosting of decision trees X  X hich can effectively consider more complex features. 4. Reranking Approaches
This section describes how the ideas from classification problems can be extended to reranking tasks. A baseline statistical parser is used to generate N -best output both for represented as a feature vector which includes the log-likelihood under the baseline model, as well as a large number of additional features. The additional features can in likelihood and the additional features is combined using a linear model. Parameter estimation becomes a problem of learning how to combine these different sources of information. The boosting algorithm we use is related to the generalization of boosting methods to ranking problems in Freund et al. (1998); we also introduce an approach related to the conditional log-linear models of Ratnaparkhi, Roukos, and Ward (1994), Papineni, Roukos, and Ward (1997, 1998), Johnson et al. (1999), Riezler et al. (2002), and Och and Ney (2002).
 introduces loss functions for reranking that are analogous to the LogLoss and ExpLoss functions in section 3.2. Section 4.3 describes a general approach to feature selection exponential loss (ExpLoss) function; section 4.5 introduces a more efficient algorithm algorithms for the LogLoss function. 4.1 Problem Definition
We use the following notation in the rest of this article:
Thus our training data consist of a set of parses, f x together with scores Score  X  x i , j  X  and log-probabilities L  X  x is an indicator function, for example,
We show that the restriction to binary-valued features is important for the simplicity and efficiency of the algorithms. 10 We also assume a vector of m + 1 parameters,  X  a a = { a , a 1 ,..., a m }. Each a i can take any value in the reals. The ranking function for a parse tree x implied by a parameter vector  X  a a is defined as
Given a new test sentence s , with parses x j for j =1, ::: , N , the output of the model is the highest-scoring tree under the ranking function scores meaning that x is more plausible. Competing parses for the same sentence are function X  X he log-likelihood L  X  x  X   X  X y setting a 0 to a positive constant and setting all other parameter values to be zero. Our intention is to use the training examples to pick parameter values which improve upon this initial ranking.
 feature selection methods for the different loss functions. 38 4.2 Loss Functions for Ranking Problems 4.2.1 Ranking Errors and Margins. The loss functions we consider are all related to the number of ranking errors a function F makes on the training set. The ranking error rate is the number of times a lower-scoring parse is (incorrectly) ranked above the best parse: where again, g p  X  is one if p is true, zero otherwise. In the ranking problem we define the margin for each example x i,j such that i =1, ::: , n , j =2, ::: , n and a competing parse x i,j . It follows that
The ranking error is zero if all margins are positive. The loss functions we discuss all turn out to be direct functions of the margins on training examples. 4.2.2 Log-Likelihood. The first loss function is that suggested by Markov random fields. As suggested by Ratnaparkhi, Roukos, and Ward (1994) and Johnson et al. (1999), the conditional probability of x i,q being the correct parse for the i th sentence is defined as
Given a new test sentence s , with parses x j for j =1, ::: , N , the most likely tree is
Hence once the parameters are trained, the ranking function is used to order candidate trees for test examples.

Under maximum-likelihood estimation, the parameters  X  a a would be set to maxi-mize the log-likelihood. Equivalently, we again talk about minimizing the negative log-likelihood. Some manipulation shows that the negative log-likelihood is a function of the margins on training data: LogLoss  X   X  a a  X  X 
Note the similarity of equation (9) to the LogLoss function for classification in equa-tion (4). 4.2.3 Exponential Loss. The next loss function is based on the boosting method methods described in Freund et al. (1998), with the ranking  X  X  X eedback X  X  being a simple binary distinction between the highest-scoring parse and the other parses. Again, the loss function is a function of the margins on training data:
ExpLoss  X   X  a a  X  is closely related to minimizing the number of ranking errors. follows from the fact that for any x , e x g x &lt; 0  X  , and therefore that
We generalize the ExpLoss function slightly, by allowing a weight for each example x experiments in this article, we use the following definition: 40 parse, such as the F -measure (see section 5 for the exact definition of Score used in our experiments). The definition for ExpLoss is modified to be
This definition now takes into account the importance, S i,j upper bound on the following quantity: which is the number of errors weighted by the factors S i,j
ExpLoss in equation (10) can be recovered by setting S i,j equal weight to all examples). In our experiments we found that a definition of S as that in equation (11) gave improved performance on development data, presumably because it takes into account the relative cost of different ranking errors in training-data examples. 4.3 A General Approach to Feature Selection
At this point we have definitions for ExpLoss and LogLoss which are analogous to the definitions in section 3.2 for binary classification tasks. Section 3.3 introduced the idea of feature selection methods; the current section gives a more concrete description of the methods used in our experiments.
 contribute most to reducing the loss function. The methods we consider are greedy, at each iteration picking the feature h k with additive weight d which has the most impact on the loss function. In general, a separate set of instances is used in cross-validation to choose the stopping point, that is, to decide on the number of features in the model. values as  X  a a with the exception of a k , which is incremented by d :
The d parameter can potentially take any value in the reals. The loss for the updated weight to update the model, and given that the current parameter settings are  X  a a , the optimal feature/weight pair  X  k , d  X  is parameter vector at the t th iteration): updating parameter values for all selected features at step 2b.
 feature/weight pair  X  k , d  X  . In both cases we take a two-step approach to solving this problem. In the first step the optimal update for each feature h all features k =1,..., m ):
The next step is to calculate the Loss for each feature with its optimal update, which we will call
BestWt and BestLoss for each feature having been computed, the optimal feature/ weight pair can be found:
The next sections describe how BestWt and BestLoss can be computed for the two loss functions. 4.4 Feature Selection for ExpLoss
At the first iteration, a 0 is set to optimize ExpLoss (recall that L  X  x likelihood for parse x i,j under the base parsing model): method (as opposed to simply setting a 0  X  1, for example). It ensures that the 42 exponential loss function. In our implementation a 0 was optimized using simple brute-force search. All values of a 0 between 0.001 and 10 at increments of 0.001 were tested, and the value which minimized the function in equation (12) was chosen. eters, a 1 ,..., a m . (Note that it might be preferable to also allow a these values have closed-form solutions, which is computationally very convenient.
We now describe the form of these updates. See appendix A for how the updates can be derived (the derivation is essentially the same as that in Schapire and Singer [1999]).
 1, or 0 (this follows from our assumption of binary-valued feature values). For each k we define the following sets:
Thus A + k is the set of training examples in which the k th feature is seen in the correct parse but not in the competing parse; A k is the set in which the k th feature is seen in the incorrect but not the correct parse.
 Given these definitions, it can be shown (see appendix A) that and where Z  X  in the BestLoss for all features and therefore does not affect their ranking. problematic, as they are undefined (infinite) when either W
Schapire and Singer (1999), we introduce smoothing through a parameter following new definition of BestWt: The smoothing parameter &amp; is chosen through optimization on a development set. ExpLoss. We use an array of values to indicate the gain of each feature (i.e., the impact that choosing this feature will have on the ExpLoss function). The features are ranked by this quantity. It can be seen that almost all of the computation involves the calculation of Z and W feature h k . Once these values have been computed, the optimal feature and its update can be chosen. 4.5 A New, More Efficient Algorithm for ExpLoss
This section presents a new algorithm which is equivalent to the ExpLoss algo-2,700 times more efficient for our task than the algorithm in Figure 3. The efficiency of the different algorithms is important in the parsing problem. The training data we eventually used contained around 36,000 sentences, with an average of 27 parses per ferent features.
 approaches for classification problems in which the representation also involves sparse [2000]). As far as we are aware, the new algorithm has not appeared elsewhere in the boosting literature.

Figure 3 shows that only margins on examples in the sets A when a feature k is selected. The feature space in many NLP problems is very sparse (most features only appear on relatively few training examples, or equivalently, most training examples will have only a few nonzero features). It follows that in many cases,
Therefore when updating the model from  X  a a to Upd  X   X  a a , k , d  X  , the values W remain unchanged for many features and do not need to be recalculated. In fact, only 44 features which co-occur with k * on some example must be updated. The algorithm in
Figure 4 recalculates the values of A  X  k and A k only for those features which co-occur with the selected feature k * .
 we define 46
Figure 4, updating the values of W  X  k and W k for the features which co-occur with k * involves the following number of steps: requires the following number of steps: iteration. In the worst case, when every feature chosen appears on every training example, then C/ T = 1, and the two algorithms essentially have the same running time.
However in sparse feature spaces there is reason to believe that C/ T will be small for most iterations. In section 5.4.3 we show that this is the case for our experiments. 4.6 Feature Selection for LogLoss
We now describe an approach that was implemented for LogLoss. At the first iteration, a is set to one. Feature selection then searches for values of the remaining parameters, a , ::: , a m . We now describe how to calculate the optimal update for a feature k with parse x i,q given parameter settings  X  a a : Recall that the log-loss is
Unfortunately, unlike the case of ExpLoss, in general an analytic solution for BestWt iterative scaling (Della Pietra, Della Pietra, and Lafferty 1997). We first define number of times that feature k is seen in the best parse, and  X  p p of times under the model that feature k is seen:
Iterative scaling then defines the following update d  X  leads to an improvement in the LogLoss (i.e., that LogLoss  X  Upd  X   X  a a , k , for finding BestWt  X  k ,  X  a a  X  :
Step 1: Initialization: Set d = 0 and  X  a a  X   X   X  a a , calculate
Step 2: Repeat until convergence of d : a: Calculate p  X  k (  X  a a  X  ). c:  X  a a  X  @ Upd  X   X  a a , k , d  X  .
 Step 3: Return BestWt  X  k ,  X  a a  X  X  d .
 fairly simple task, and there are many methods which could be used.
 analogous to the ExpLoss algorithm in Figure 4 (at least if the feature selection method iteration). A similar observation for LogLoss can be made, in that when the model is updated with a feature/weight pair  X  k , d  X  , many features will have their values for
BestWt and BestLoss unchanged. Only those features which co-occur with k on some example will need to have their values of BestWt and BestLoss updated. However, this more expensive than in the ExpLoss case. The procedure for finding the optimal value k . For example, the iterative scaling procedure described above must be applied for a number of features. For each feature, this will involve recalculation of the distribution f P  X  x i , 1 j s i  X  , P  X  x i , 2 j s i  X  , ::: , P  X  x takes only one feature that is seen on all training examples for the algorithm to involve updates in the improved boosting algorithm  X  W  X  k  X  W selection methods because of their inefficiency (see section 6.4 for more discussion about efficiency). 48 updating its weight may lead to efficient algorithms. Appendix B gives a sketch of one such approach, which is based on results from Collins, Schapire, and Singer (2002). We did not test this method; we leave this to future work. 5. Experimental Evaluation 5.1 Generation of Parsing Data Sets We used the Penn Wall Street Journal treebank (Marcus, Santorini, and 40,000 sentences) were used as training data, section 23 was used as the final test set.
The remaining 4,000 sentences were used as development data and to cross-validate the number of rounds (features) in the model. Model 2 of Collins (1999) was used to sentence. We achieved this by disabling dynamic programming in the parser and parses that fall within the beam. The number of such parses varies sentence by sentence.
 were parsed in 2,000 sentence chunks, each chunk being parsed with a model trained on the remaining 34,000 sentences (this prevented the initial model from being unrealistically  X  X  X ood X  X  on the training sentences). The 4,000 development sentences parsed with a model trained on all 40,000 sentences.
 standard parse (a value between 0 and 100), and Size( x i,j in the gold-standard parse for the i th sentence. Hence the Score function is sensitive to standard parse. 5.2 Features The following types of features were included in the model. We will use the rule VP Y
PP VBD NP NP SBAR with head VBD as an example. Note that the output of our baseline parser produces syntactic trees with headword annotations (see Collins [1999]) for a description of the rules used to find headwords). 50 count cutoff was implemented to keep the number of features down to a tractable number). 5.3 Applying the Reranking Methods
The ExpLoss method was trained with several values for the smoothing parameter {0.0001, 0.00025, 0.0005, 0.00075, 0.001, 0.0025, 0.005, 0.0075}. For each value of method was run for 100,000 rounds on the training data. The implementation was such that the feature updates for all 100,000 rounds for each training run were recorded in a file. This made it simple to test the model on development data for all values of N between 0 and 100,000.
 following criterion: where Score is as defined above, and z i is the output of the model on the i th development set example. The &amp; , N values which maximized this quantity were used nonzero values (note that the feature selection techniques may result in a given feature being updated more than once). The computation took roughly 3 X 4 hours on a machine with a 1.6 GHz pentium processor and around 2 GB of memory.
 model; the ExpLoss model gave a 1.5% absolute improvement over this method. The method gives very similar accuracy to the model of Charniak (2000), which also uses a rich set of initial features in addition to Charniak X  X  (1997) original model. made some tests on a smaller subset of the data (5,934 sentences, giving 200,000 parse trees) and 52,294 features. 15 On an older machine (an order of magnitude or more slower than the machine used for the final tests) the boosting method took 40 minutes 3,500 rounds (a factor of about 85 times slower). This was in spite of various heuristics that were implemented in an attempt to speed up LogLoss: for example, selecting features for some small K at the previous round of feature selection. In initial experiments we found ExpLoss to give similar, perhaps slightly better, accuracy than
LogLoss. 5.4 Further Experiments boosting algorithm: the effect of the &amp; and N parameters, learning curves, the choice of the S i,j weights, and efficiency issues. generative model alone in ranking parses, where the measure in equation (21) is used to measure performance. For example, a score of 101.5 indicates a 1.5% increase in this peak value after a large number (90,386) of rounds of feature selection.
 &amp; . Figure 6 shows learning curves for various values of other than &amp;  X  0.0025 can lead to undertraining or overtraining of the model. 52 5.4.2 The Effect of the S i,j Weights on Examples. In section 4.2.3 we introduced the experiments in this article, we have used the definition thereby weighting examples in proportion to their difference in score from the correct default definition of S i,j , namely, several values of the smoothing parameter &amp; and evaluated the performance on development data. Table 3 compares the peak performance achieved under the two definitions of S i,j on the development set. It can be seen that the definition in equation (22) outperforms the simpler method in equation (23). Figure 7 shows the learning curves for the optimal values of &amp; for the two methods. It can be seen that the learning curve for the definition of S i,j in equation (22) consistently dominates the curve for the simpler definition. 5.4.3 Efficiency Gains. Section 4.5 introduced an efficient algorithm for optimizing parsing data sets in this article.
 54
This is a measure of the number of updates to the W  X  k and W computation that the naive algorithm for ExpLoss, presented in Figure 3, requires for each round of feature selection.
 feature selection. Then we define the following quantity: This is a measure of the number of summations required by the improved algorithm in
Figure 4 at the t th round of feature selection. 56 define the following quantities: a single unit of computation corresponds to a pass over the entire training set. number of features, n . For example, if Savings  X  100  X  X  1,200, this signifies that for the first 100 rounds of feature selection, the improved algorithm is 1,200 times as efficient as the naive algorithm. Finally, Savings  X  a, b  X  indicates the relative efficiency between signifies that between rounds 11 and 100 inclusive of the algorithm, the improved algorithm was 83 times as efficient.
 from the improved algorithm are dramatic. In 100,000 rounds of feature selection, the improved algorithm requires total computation that is equivalent to a mere 37.1 passes over the training set. This is a saving of a factor of 2,692 over the naive algorithm. selection, presumably because in later stages relatively infrequent features are being selected. Even so, there are still savings of a factor of almost 50 in the early stages of the method. 6. Related Work 6.1 History-Based Models with Complex Features
Charniak (2000) describes a parser which incorporates additional features into a previously developed parser, that of Charniak (1997). The method gives substantial improvements over the original parser and results which are very close to the results of the boosting method we have described in this article (see section 5 for experimental results comparing the two methods). Our features are in many ways similar to those of
Charniak (2000). The model in Charniak (2000) is quite different, however. The additional features are incorporated using a method inspired by maximum-entropy models (e.g., the model of Ratnaparkhi [1997]).
 plied to parsing. Log-linear models are used to estimate the conditional probabilities account quite a rich set of features in the history.
 58 decisions, and we would argue that the techniques described in this article have more flexibility in terms of the features that can be included in the model. 6.2 Joint Log-Linear Models
Abney (1997) describes the application of log-linear models to stochastic head-driven phrase structure grammars (HPSGs). Della Pietra, Della Pietra, and Lafferty (1997) describes application of these methods to language modeling for speech x calculated explicitly. This is a problem for parameter estimation, in which an estimate of the denominator is required, and Monte Carlo methods have been proposed (Della Pietra, Della Pietra, and Lafferty 1997; Abney 1997; Rosenfeld 1997) as a technique for estimation of this value. Our sense is that these methods can be article. 6.3 Conditional Log-Linear Models
Ratnaparkhi, Roukos, and Ward (1994), Johnson et al. (1999), and Riezler et al. (2002) feature selection technique, employing instead an objective function which includes a
Values of Savings ( a , b ) for various values of a , b .
Gaussian prior on the parameter values, thereby penalizing parameter values which become too large:
Closed-form updates under iterative scaling are not possible with this objective function; instead, optimization algorithms such as gradient descent or conjugate gradient methods are used to estimate parameter values.
 conditional Markov random fields (CRFs) for tagging tasks such as named entity recognition or part-of-speech tagging (hidden Markov models are a common method insight of Lafferty, McCallum, and Pereira (2001) is that when features are of a significantly local nature, the gradient of the function in equation (28) can be calculated efficiently using dynamic programming, even in cases in which the set of candidates involves all possible tagged sequences and is therefore exponential in size. See also Sha and Pereira (2003) for more recent work on CRFs.
 values which achieve the global minimum of the objective function in equation (28)) is article or to the feature selection methods previously applied to log-linear models. The Gaussian prior (i.e., the
Rosenfeld 1999; Johnson et al. 1999; Lafferty, McCallum, and Pereira 2001; Riezler et al. 2002). The function in equation (28) can be optimized using variants of gradient descent, which in practice require tens or at most hundreds of passes over the training data (see, e.g., Sha and Pereira 2003). Thus log-linear models with a Gaussian prior are likely to be comparable in terms of efficiency to the feature selection approach reranking task, the efficient boosting algorithm requires computation that is equivalent to around 40 passes over the training data).
 around 11,000 (2%) of the features in our model having nonzero parameter values, log-linear models with Gaussian priors typically have very few nonzero parameters (see, e.g., Riezler and Vasserman 2004). This may be important in some domains, for number leads to difficulties in terms of memory requirements or computation time. 6.4 Feature Selection Methods
A number of previous papers (Berger, Della Pietra, and Della Pietra 1996; Ratnaparkhi 1998; Della Pietra, Della Pietra, and Lafferty 1997; McCallum 2003; Zhou et al. 2003;
Riezler and Vasserman 2004) describe feature selection approaches for log-linear models applied to NLP problems. Earlier work (Berger, Della Pietra, and Della Pietra 1996; Ratnaparkhi 1998; Della Pietra, Della Pietra, and Lafferty 1997) suggested methods that added a feature at a time to the model and updated all parameters in the current model at each step (for more detail, see section 3.3). 60 fitting a model takes p passes over the training set, these methods require f  X  p +1  X  passes over the training set, where f is the number of features selected. In our experiments, f , 10,000. It is difficult to estimate the value for p , but assuming (very conservatively) that p = 2, selecting 10,000 features would require 30,000 passes over the training set. This is around 1,000 times as much computation as that required for the efficient boosting algorithm applied to our data, suggesting that the feature selection methods in Berger, Della Pietra, and Della Pietra (1996), Ratnaparkhi (1998), and Della Pietra, Della Pietra, and Lafferty (1997) are not sufficiently efficient for the parsing task.
 has considered methods for speeding up the feature selection methods described in Berger, Della Pietra, and Della Pietra (1996), Ratnaparkhi (1998), and Della Pietra, Della
Pietra, and Lafferty (1997). McCallum (2003) and Riezler and Vasserman (2004) describe approaches that add k features at each step, where k is some constant greater and Vasserman (2004) test a variety of values for k , finding that k = 100 gives optimal performance. McCallum (2003) uses a value of k = 1,000. Zhou et al. (2003) use a different heuristic that avoids having to recompute the gain for every feature at every iteration.
 article may be preferable on the grounds of both efficiency and simplicity. Even with large values of k in the approach of McCallum (2003) and Riezler and Vasserman (2004) (e.g., k = 1,000), the approach we describe is likely to be at least as efficient as these alternative approaches. In terms of simplicity, the methods in McCallum (2003) and Riezler and Vasserman (2004) require selection of a number of free parameters constant (used in both McCallum [2003] and Riezler and Vasserman [2004]), and the precision with which the model is optimized at each stage of feature selection contrast, our method requires a single parameter to be chosen (the value for the smoothing parameter) and makes a single approximation (that only a single feature is updated at each round of feature selection). The latter approximation is particularly important, as it leads to the efficient algorithm in Figure 4, which avoids a pass over rounds of feature selection in our approach can take considerably fewer than f passes over the training set, in contrast to other work on feature selection within log-linear models).

Pietra, Della Pietra, and Lafferty (1997) and McCallum (2003) describe methods that induce conjunctions of  X  X  X ase X  X  features, in a way similar to decision tree learners. Thus a relatively small number of base features can lead to a very large number of possible approaches for the parsing problem. Another difference is that both McCallum, and
Riezler and Vasserman, describe approaches that use a regularizer in addition to feature selection: McCallum uses a two-norm regularizer; Riezler and Vasserman use a one-norm regularizer.
 machine-learning community: for example,  X  X  X ilter X  X  methods, in which feature selection is performed as a preprocessing step before applying a learning method, and backward selection methods (Koller and Sahami 1996), in which initially all features are added to the model and features are then incrementally removed from the model. 6.5 Boosting, Perceptron, and Support Vector Machine Approaches for Ranking Problems
Freund et al. (1998) introduced a formulation of boosting for ranking problems. The problem we have considered is a special case of the problem in Freund et al. (1998), in that we have considered a binary distinction between candidates (i.e., the best parse vs. other parses), whereas Freund et al. consider learning full or partial orderings over candidates. The improved algorithm that we introduced in Figure 4 is, however, a new algorithm that could perhaps be generalized to the full problem of Freund et al. (1998); we leave this to future research.
 describe experiments on tagging tasks using the ExpLoss function, in contrast to the
LogLoss function used in Lafferty, McCallum, and Pereira (2001). Altun, Hofmann, and Johnson (2003) describe how dynamic programming methods can be used to calculate gradients of the ExpLoss function even in cases in which the set of candidates again includes all possible tagged sequences, a set which grows exponentially in size with the length of the sentence being tagged. Results in Altun, Johnson, and Hofmann (2003) suggest that the choice of ExpLoss versus LogLoss does not have a major impact on accuracy for the tagging task in question.

Schapire (1999), are another alternative to boosting and LogLoss methods. See Collins algorithm. Collins (2002b) gives convergence proofs for the methods; Collins (2002a) directly compares the boosting and perceptron approaches on a named entity task; and Collins and Duffy (2001, 2002) use a reranking approach with kernels, which allow representations of parse trees or labeled sequences in very-high-dimensional spaces.
 ranking problems and apply support vector machines (SVMs) using tree-adjoining grammar (Joshi, Levy, and Takahashi 1975) features to the parsing data sets we have described in this article, with good empirical results.
 overview of statistical bounds for the boosting, perceptron, and SVM methods, as well as a discussion of the computational issues involved in the different algorithms. 7. Conclusions
This article has introduced a new algorithm, based on boosting approaches in machine learning, for ranking problems in natural language processing. The approach gives a 13% relative reduction in error on parsing Wall Street Journal data. While in this article the experimental focus has been on parsing, many other problems in natural language processing or speech recognition can also be framed as reranking problems, so the methods described should be quite broadly applicable. The boosting approach to ranking has been applied to named entity segmentation (Collins 2002a) and natural language generation (Walker, Rambow, and Rogati 2001). The key characteristics of 62 accuracy).
 which takes advantage of the sparse nature of the feature space in the parsing data that we use. Other NLP tasks are likely to have similar characteristics in terms of sparsity.
Experiments show an efficiency gain of a factor of over 2,600 on the parsing data for the new algorithm over the obvious implementation of the boosting approach. We maximum-entropy or (conditional) log-linear models. The article has drawn connec-tions between boosting and maximum-entropy models in terms of the optimization performance in empirical tests.
 Appendix A: Derivation of Updates for ExpLoss
This appendix gives a derivation of the optimal updates for ExpLoss. The derivation is very close to that in Schapire and Singer (1999). Recall that for parameter values  X  a a ,we need to compute BestWt  X  k ,  X  a a  X  and BestLoss  X  k ,  X  a a  X  for k  X  1,..., m , where and results in a simple additive update to the ranking function F : It follows that the margin on example  X  i , j  X  also has a simple update: The updated ExpLoss function can then be written as training sample into three sets depending on this value:
Given these definitions, we define W k + , W k , and W k 0 ExpLoss is now rewritten in terms of these quantities: ExpLoss  X  Upd  X   X  a a ,k, d  X  X  X  respect to d to zero, giving the following solution: Plugging this value of d back into (A.1) gives the best loss: where Z  X  ExpLoss  X   X  a a  X  X  appears in the BestLoss for all features and therefore does not affect their ranking. Appendix B: An Alternative Method for LogLoss 64 minimum of the loss given that the k th feature is updated an optimal amount:
In this section we sketch a different approach, based on results from Collins, Schapire,
Figures 3 and 4. Take the following definitions (note the similarity to the definitions in equations (13), (14), (15), and (16), with only the definitions for W altered): algorithm and the ExpLoss method.
 the following guarantee holds: and 4 could be altered to take the revised definitions of W to the largest guaranteed decrease in LogLoss. Note that this is now an approximation, tight. There are convergence guarantees for the method, however, in that as the minimum value.
 definitions of W  X  k and W k into account, thereby being modified to optimize LogLoss instead of ExpLoss. The denominator terms in the q i,j definitions in equation (B.1) may complicate the algorithms somewhat, but it should still be possible to derive relatively efficient algorithms using the technique.
 proofs, see Collins, Schapire and Singer (2002). We give a sketch of the argument here. First, we show that
This can be derived as follows (in this derivation we use g
LogLoss  X  Upd  X   X  a a ,k, d  X  X 
Equation (B.6) can be derived from equation (B.5) through the bound log  X  1+ x  X  x for all x .
 with respect to d . It can be verified that the minimum is found at at which value the right-hand side of equation (B.4) is equal to 66 Acknowledgments References 68
