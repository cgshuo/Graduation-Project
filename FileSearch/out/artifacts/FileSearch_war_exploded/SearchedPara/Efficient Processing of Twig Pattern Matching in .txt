 In order to find all occurrences of a twig pattern in XML documents, a consider able amount of twig pattern matching algorithms have been proposed. At the same time, previous work mainly focuses on twig pattern query under the complete semantics. However, there is often a need to produce partial answers because XML data may have missing sub-elements. Furthermore, the existed works fa ll short in their ability to support twig pattern query under different semantics in fuzzy XML. In this paper, we study the problem of twig matches in fuzzy XML. We begin by introducing the extended region scheme to accurately and effectively represent nodes information in fuzzy XML. We then discuss the fuzzy query semantics and compute the membership information by using Einstein operator instead of Zadeh X  X  min-max technique. On the basis, we propose two efficient algorithms for querying twig under complete and incomplete semantics in fuzzy XML. The experimental results show that our proposed algorithms can perform on the fuzzy twig pattern matching efficiently. H.2.4 [ Database Management ]: Systems  X  Query processing; H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval  X  Information filtering Algorithms, Experimentation, Theory. fuzzy XML; twig matches; query semantics; Einstein operator; With the prompt development of the Internet, the requirement of managing information based on th e Web becomes more and more important. XML is rapidly emerging and has been the de-facto standard for exchanging data on the Web. XML data are often represented as tree models, and an XML query is typically formed as a twig pattern with predicates additionally imposed on the significance to many practical applications, efficient processing of structural queries [3, 4, 13] has received significant attentions from both academic and industrial communities. At the same time, applications. Some data are inherently fuzzy since their values are subjective in the real applications. For example, consider values may have different satisfaction degree. As the next generation language of the Internet, XML plays an important role in the Semantic Web. In addition, imprecise and uncertain data has become an emerging topic for various research the combination of XML and imprecision/uncertainty. several proposed combination frame works. Current efforts have been mainly made on the problems of representing and querying incomplete or probabilistic data. In [1], Abiteboul et al. provide a model for XML documents and DTDs and a representation representations of probabilistic data in XML were proposed in other previous research papers [15, 17, 19]. A framework for querying and updating probabilistic XML information over two introduce a precise complexity analysis of queries and updates for probabilistic trees. Unfortunately, despite fuzzy values have been employed to model and handle impr ecise information in databases since Zadeh introduced the theory of fuzzy sets [21], relative little work has been carried out in extending and querying XML towards the representation of imprecise and uncertain concepts. In fact, handling imprecise and uncertain knowledge is becoming a critical research direction for the Semantic Web. Finding all occurrences of a twig pattern under fuzzy query semantics is a core operation in fuzzy XML query processing. fuzzy labeling scheme to capture the structural information of fuzzy XML documents, and then perform twig pattern matching based on the labels. By applyi ng the labeling schemes, the structure relationships between two elements in XML documents can be determined from their corresponding labels. Unfortunately, Due to lack of effective fuzzy labeling scheme on the web, XML is not able to process fuzzy twig query although querying with probabilistic and incomplete twig information [7, 8, 9, 10, 12] have been discussed extensively. In addition, when querying the fuzzy XML twig, we have to compute the answers as well as the memberships may be deemed irrele vant. Furthermore, it should be noted that partial answers with missing some elements in twig twig pattern query under differe nt semantics and output the answer with a membership above a given threshold. On the other hand, if we want to query twig in fuzzy XML compute membership information. Calculating the membership information of a given twig in fuzzy XML is one of the most fundamental challenges for processing fuzzy XML queries. Previous researches compute membership information mainly based on Zadeh X  X  min-max t echnique. However, min-max technique does not support the interaction of membership. Moreover, it is an operation only in a single direction, that is, it is impossible to revise the membership information reciprocally in fuzzy XML. Thus we introduce a fuzzy operator [11] which can interactively. To the best of our knowledge, this is the first effort on matching twig with interac tive operator in fuzzy XML. In this paper, we propose a novel fuzzy labeling scheme to capture the structural information of fuzzy XML documents. We also introduce the fuzzy operator and query semantics. On the matching twig in fuzzy XML under different semantics. A central contribution of this paper is the framework for querying fuzzy twig that is believed to be one of the foundations of implementing web-based intelligent information management. The main contributions of the paper are as follows: z We extend region scheme and enhance its ability, which z We introduce Einstein operator to compute the membership z Two fuzzy query semantics, that is, complete and z Based on the preliminary above, we present two efficient The rest of the paper is organized as follows. After a discussion of basic knowledge in Section 2, S ection 3 presents the extended region scheme and fuzzy query semantics to support the fuzzy XML twig query. We show the details of our algorithms in Section 4, and present the experi mental results in Section 5. Section 6 describes the related wo rk, and Section 7 concludes the paper. Based on the classification of im perfect information, different types and sources of imperfect info rmation have been investigated. Many of the existing approaches dealing with imprecision and distribution theory [21]. A fuzzy set, say {0.7/18, 0.95/19, 0.98/20, 0.85/21} for the age of Michael, is more informative because it 21 and we do not know which one is true) and uncertainty (the degrees of truth of all possible ag e values are 0.7, 0.95, 0.98, and 0.85) simultaneously. Let U be a universe of discourse. A fuzzy value on U is characterized by a fuzzy set F in U . A membership function  X   X  [0, 1] is defined for the fuzzy set F , where  X  F ( u ), for each u  X  U , denotes the degree of membership of u in the fuzzy set F . Thus the fuzzy set F is described as follows: F = {  X  F ( u be represented by u u F  X  ( u ) above is explained to be a measure of the possibility that a value is described by a possibility distribution  X  ( u )/ u 1 ,  X  X ( u 2 )/ u 2 , ...,  X  X ( u n )/ u n }. Here,  X  fuzzy value, respectively. We have two kinds of fuzziness in XML: the first is the fuzziness in elements and we use membership degrees associated with such elements and we use possibility distribution to represent such which takes a value between 0 and 1. This possibility attribute is possibility of a given element existing in the XML document. Another fuzzy construct called Dist is introduced to specify a possibility distribution. Typically a Dist element has multiple Val elements as children, each with an associated possibility. Since disjunctive or conjunctive. Due to space limitations, we cannot present the full definitions of fuzzy XML data model in this paper. More definitions can be found in the work [14]. XML Query can be expressed using tree structure. A twig pattern document. The twig node labels include element tags, attribute value comparisons, and string valu es. Such query patterns whose ancestor-descendant edges (depicted using a double line), can matching, we have: respectively. Each v V has a unique label, denoted Label( v ). We use ( v i , v j ) to represent a directed edge from node v Definition 2. (Twig Match) A match of a twig query Q = ( V mapping: T Q V V  X  :  X  , such that if  X  ( u ) = v for u  X  V  X  V T , then (i) Label ( u ) = Label ( v ) and (ii) if ( u (  X  ( u 1 ) ,  X  ( u 2 ))  X  E T . Region scheme is derived from the inverted index data structure in information retrieval. Similar to the technique to deal with text words in traditional IR systems, region scheme maps elements inverted list records all occurrences of elements with the same tag name in XML documents. In general, one record is represente d as a 3-tuple (start, end, depth) to identify the position of an el ement exclusively. While start exactly finds the occurrence position. End is the maximal start of elements in the subtree of current element, and depth gives additional information to determine the parent-child relationship of tree elements. query processing effectively. We need to do some revisions to represent the fuzzy XML information. We use a 5-tuple (DocId, LeftPos: RightPos, LevelNum, Fu zzy, FuzzySequence) to express the nodes X  position information in the XML documents, where z DocId is the identifier of the document. z LevelNum is the nesting depth of the element (or string value) in z FuzzySequence is an ordered set which stores the information of Figure 1 shows an extended region scheme instance based on fuzzy shown as triangular boxes. For si mplicity, we only use node names V to describe information of Fu zzySequence. Our method seems to node. For the structure relations among nodes, we have: Definition 3. (FSR) Let Node i ( D i , L i : R i information of extended region sc heme in fuzzy XML documents, where 1  X  i  X  m . The structure relationships among tree nodes are: z ancestor-descentdant (AD): If D 1 = D i , L 1 &lt; L i z real-parent-child (RPC): (i) If D 1 = D i , L 1 &lt; L z fuzzy-parent-child (FPC): If D 1 = D i , L 1 &lt; L In fuzzy XML documents, parent-ch ild (PC) structure relationship stems from the crisp one. It consists of RPC and FPC. visualized in Figure 1. Firstly, node CV 0 , CV 1 CV 10 are crisp nodes, and node V 1 , V 2 , V 3 , V 4 and V According to definition 3, the structure relationship between CV and CV 2 is RPC. In addition, the structure relationship between CV and CV 4 is also RPC. V 1  X  CV 1 , CV 9  X  V 5 and V The structure relationship between CV 0 and CV 8 is AD. Theorem 1. Let Element i ( D i , L i : R i , LN i , F L D Element i will not be an ancestor of any element Element LN k , F k , FS k ) with D k D n and L k &gt; L n . Definition 4. (Path Subsumption) Let node i and n be two elements in the fuzzy XML documents, and  X  (root, n) be the information of nodes and edges from root to node  X  , respectively. Theorem 2. Let Element i ( D i , L i : R i , LN i ( D L  X  L n , R n  X  R i , FS i  X  FS n .
 Proof . For each node corresponding to the elements in fuzzy XML documents D , we can have the related position information based on extended region scheme easily. (i) If Element Element n point to the same node in one XML document, clearly, we have L i L n , R n R i , FS i  X  FS n . (ii) If Element point to the different nodes, and  X  (root, i )  X   X  (root, n ), then we that  X  (root, i ) is the subgraph of  X  (root, n ) based on D Thus, L i &lt; L n , R n &lt; R i , FS i  X  FS n , namely, Element of Element i . As a consequence of the above, if D i D n i )  X   X  (root, n ), then we have L i  X  L n , R n  X  R i Definition 5. Let Element i ( D i , L i : R i , LN ( D documents, and  X  ( i , n ) be the relative fuzzy depth. If D  X  (root, n )  X  X  X  (root, i ), then we have  X  ( i , n ) = |  X  ( FS  X  is a function that gets the relative number of nodes. Theorem 3. Let Element i ( D i , L i : R i , LN i ( D have the structure relation between Element i and Element ( fuzzy-parent-child ). Proof. The intuition for the above th eorem is as follows. For each node corresponding to the elemen ts in fuzzy XML documents D , according to the above definitions, we have the relative fuzzy subgraph of  X  (root, n ) and i  X  n , then L i &lt; L is, the structure relation between Element i and Element AD ( ancestor-descentdant ) or PC ( parent-child ). If Element and Element n is AD, then we have F i +1  X  F k  X  F set). It is contradictory to the condition (| LN i  X  LN n Because of F i  X  F n = 0, we have Element i and Element crisp nodes. It is obvious that the structure relation between Element i and Element n is RPC( fuzzy-parent-child ). Let us illustrate the above theore ms with the following examples. Example 2. Consider the node information shown in Figure 1. CV 1 and CV 3 satisfy the conditions in theorem 1, such that D L &lt; L 3 , and CV 1 is not an ancestor of CV 4 CV 4 , CV 5 , ... , CV 9 and CV 10 are the descendant of CV In practice, a good visual presentation is obtained, that is, L R another example. Consider RPC nodes CV 3 and CV have  X  (3, 6) = | 0  X  2 | = 2, | LN 3  X  LN obvious that RPC nodes CV 3 and CV 6 meet the conclusion | LN LN 6 | =  X  (3, 6) + 1. We start by introducing some formal definitions. All operators in collection of data trees as output. Definition 6. For the fuzzy XML documents, we have F = ( V , 1. V = { V 1 ,..., V n } is a finite set of vertices. 2. 3. For each object v  X  V and each label  X   X  L , l ( v , 4.  X   X  T , here T is a set of types. 5.  X  is a mapping from the set of objects v  X  V to local Definition 7. Let F = ( V ,  X  , l ,  X  ,  X  ) and written ' f  X  F , when 2. If i  X  ' v and ( j , i )  X   X  , then j  X  ' v . 3. ' l and '  X  indicate the restriction of l and  X  Definition 8. Let fuzzy data trees 1 f = ( 1 v , 1 ( V , 1. 1 2. There is a one-to-one mapping, l  X  : 1 l  X  2 l , which makes Theorem 4. Fuzzy data tree F and its sub-tree isomorphic. definition. Definition 9. Let i f = ( i v , i  X  , i l , i  X  , ( v , j  X  , j l , j  X  , j  X  ) be two fuzzy data trees. If isomorphic, we have the fuzzy union and intersection definitions as follows. z Fuzzy intersection (  X  ): z Fuzzy union (  X  ): The intersection and union among crisp XML information are quite straightforward, thus th e main emphasis is made on the membership descriptions of fuzzy intersection and union. In fuzzy sets are represented by triangular norms (T-norms) and triangular concorms (T-conoums), respectivel y. Zadeh X  X  min-max technique is often used as the standard benchmark inference technique in many fuzzy systems. However, it is criticized for not allowing interaction of membership grad es. Thus we introduce Einstein operator which has been proved to be the effective method in the fuzzy system [11] to represent T-norms and T-conoums in fuzzy XML. Furthermore, we have  X  , Here, i  X  , j  X   X  [0,1].  X  z z The proofs of the theorems above are quite simple. It can be gotten from the inverse T-norms and T-conoums operator directly. We can revise the detailed membership information reciprocally in fuzzy XML by using Einstein operator. However, inverse operation usually returns a possi ble interval by using Zadeh operator in fuzzy XML. Figure 2. Whole membership in different fuzzy structures. In a fuzzy XML tree, we can define three kinds of fuzzy structure as follows: z Fuzzy nodes only appear in the single path (type-1). z Fuzzy nodes appear among the branches (type-2). z Fuzzy nodes appear in the complex structure (type-3). For simplicity, only the membership information is considered. Here, nodes A , B , C , D  X  V , and u 1 , u 2 , u memberships, u whole is the whole membership. We now introduce the semantics of fuzzy twig query. Two different semantics for applying tw igs are defined in fuzzy XML, namely, complete and incomplete . A match of a twig query under the complete semantics is a mapping from the nodes of the twig to way to keep fuzzy information with its own character in the complete answers. Definition 10. (Complete Semantics) A complete match (abbr. c-match) of a c-twig Q in an XML document D is a mapping  X  that satisfied the following: between i and j, then we have the revised fuzzy information of FS have t without considering condition 3 in Definition 10. Based on the the set of all c-matches of C in the original documents D , denoted structure relationships. Q 1 is the PC path query, and Q complex query that contains both PC and AD twig query. Example 3. Consider the node tree of Figure 1 and twig query Q According to the Complete Seman tics, there are three c-matches of C ( D ). They are { CV 0  X  CV 3  X  V u (2,3)  X  CV V u (2,4)  X  CV 5 } and { CV 0  X  CV 9  X  V 5  X  CV 10 }. Here, V V u (2,4) are the revised fuzzy information of partial track, u (2,3) = u track through fuzzy node, and  X   X   X  expresses the direct track among crisp nodes. Due to the limitations of user s X  knowledge, uncertainty often partial nodes that are close to the leaves in a long query path. The specific problem of incomplete twig query is to find potential embeddings for a given twig in XML. Under the incomplete semantics, a match of an incomp lete twig may be defined only over a subtree of the incomplete twig, rather than over the whole twig. At the same time, considering all of trivial matches is insignificant. In fact, matching partial twig, downward from root, is more meaningful and has been extensively researched in the practical applications. Thus under incomplete semantics, we focus on the matching nodes which can construct a partial path track comprised of one partial branch in the query twig from root down in this paper. Definition 11. (Incomplete Semantics) An incomplete match (abbr. i-match) of an i-twig Q in document D is a mapping : , such that, 1. Types and values of crisp node s are partial matched, i.e., In the incomplete semantics, it is obvious that analyzing fuzzy information as a whole is unavoida ble. Consider an incomplete  X   X  I ( D ), we say that  X  2 subsumes  X  1 , denoted by  X  denotes the domain of  X  . If  X  1  X   X  2 , then  X  2 properly subsumes  X  maximal i-matches of J is denoted by max ( J ) and is defined as the subsumes  X  . redundant i-matches, due to the fact that if  X  X  X  ( D ), then all the i-matches that are subsumed by  X  are also in  X  ( D ). Thus, we define contains only i-matches of  X  ( D ) that are not subsumed by other i-matches of  X  ( D ). Q in figure 3. The following are some i-matches of Q { CV 0 a CV 3 },  X  2 = { CV 0 a CV 3 a CV 5 },  X  { CV 0 a CV 3 a CV 5 , CV 0 a CV 2 , CV 0 is the branch node}. Both  X  2 and  X  3 subsume  X  1 . According to the whole membership formula, we have  X  (  X  1 ) = 1,  X  (  X  2 ) =0.25,  X  (  X  is in  X  ( D ). If  X  (Q) = 0.1, then only  X  3 is in  X  ( D ). twig in fuzzy XML. We present our algorithms (C-Twig and I-Twig) for finding all matches unde r complete and incomplete semantics. Next, we start with in troducing some notations used in our approach, and then describe the algorithms. A twig pattern can be represented with a tree, and a twig query is a query that imposes selection predicates on the nodes of XML its descendants. Function  X  ( i , j ) computes the fuzzy membership Interested readers may refer to TwigStack to know more details. Algorithm C-Twig, which computes complete answers to a query twig pattern in fuzzy XML, is pr esented in this section. This algorithm is inspired by TwigStack and operates in two phases. In We return solutions to individua l query root-to-leaf paths whose phase. In the second phase, these solutions are merge-joined to compute the answer to the whole que ry twig pattern. In this phase, can be output. Algorithm getNext( q ) 01 if (isLeaf( q )) return q 02 for q i in children( q ) 03 n i = getNext( q i ) 04 if ( n i  X  q i ) return n i 05 end for 06 n min = minarg ni nextL( T ni ) 07 n max = maxarg ni nextL( T ni ) 08 while (nextR( T q ) &lt; nextL( T nmax )) 09 advance( T q ) 10 if (nextL( T q ) &lt; nextL( T nmin )  X   X  ( q , q 11 else return n min Algorithm getNext( q ) in C-Twig has the effect that resembles the algorithm of getNext(q) in TwigStack. The key difference between two algorithms can be su mmarized as follows. In C-Twig, getNext( q ) not only satisfy node q has a descendant q i the streams T qi , but also meet the constraint under complete 10). As a result, the expense of C-Twig can be reduced greatly by the primary filtration. Algorithm C-Twig is analogous to Algorithm TwigStack. It be extended to total answer. We output the path solutions in root-leaf order so that they can be easily merged together to form final twig matches (line 16). The main difference between two algorithms occurs during the merge-joined phase. In C-Twig, we need to analyze the original twig answers under complete semantics in the merge-joined phase. In more detail, the answers the final answers that satisfy the query conditions can be obtained turn to analyze Algorithm C-Twig and show the correctness of our algorithm. Algorithm C-Twig( q ) 01 while not end( q ) 02 q act = getNext( q ) 03 if (not isRoot( q act )) 04 cleanStack(parent( q act ), nextL( q act )) 05 end if 07 cleanStack( q act , next( q act )) 09 if (isLeaf ( q act )) 10 showSolutionsWithBlocking( S qact , 1) 11 pop( S qact ) 12 end if 13 else advance( Tqact ) 14 end if 15 end while 16 mergeAllPathSolutions() 17//Assume that the intermediate answers and final answers were 18//kept in set M ( D ) and set C ( D ), respectively. 19 for each answer n m in M ( D ) 20 if( u whole ( n m ) &lt;  X  ( q )) 21 remove( n m ) 22 end for 23 C ( D )  X  M( D ) Theorem 6. The getNext( q ) of Algorithm C-Twig gets all nodes semantics. compact encoding using stacks. In particular, the condition that contribute to the final answers. Theorem 7. Given a twig query Q and an XML database D , Algorithm C-Twig returns all the answers for Q on D under complete semantics. Algorithm C-Twig can obtain all the complete answers from fuzzy XML documents. However, it may miss parts of potential answers which interest the users. In fuzzy XML, the phenomenon of missing sub-elements is common, because of sub-element with low memberships might be deemed missing for the practical purposes. Further, due to the limitations of users X  knowledge, especially to the partial nodes that are close to the leaves in a long query path. Algorithm getI-Twig( q ) 01 while not end( q ) 02 q min = getMinSource( q ) 03 for q i in subtreeNodes( q ) 04 while((not empty( S qi )  X  topR( S qi ) &lt; nextL( T 05 pop( S qi ) 06 end for 07 moveStreamToStack( T qmin , S qmin , pointer to top( S 08 if(isLeaf( S qmin )) 09 showSolutions( S qmin ,1) 10 pop( S qmin ) 11 end while 12 generateMaxIncompleteTwig() Function getMinSource( q ) return q i  X  subtreeNodes( q ) such that nextL( T qi Procedure moveStreamToStack( T q , S q , p ) 02 advance( T q ) The aspect of partial query over fuzzy XML can effectively Consequently, matching twig under incomplete semantics is quite significant. Next we will explain the specific algorithms under incomplete semantics. Algorithm generateMaxI-Twig() //Assume that the intermediate path answers and final answers //were kept in set I ( q ) and set Max ( d ), respectively. 01 for each n m in I ( q ) 02 if( u whole ( n m ) &lt;  X  ( q )) 03 remove( n m ) 04 end for 06 //merge the left paths which have common node and generate 07 Max pm ( d )  X  ( I (q)  X  I ( q ) haveCommonNode 08 While not end( t i ) 09 if( u whole ( t i )  X  X  ( q )) 10 Max tm ( d )  X  t i 11 else enumerate( t i , max i ) //enumerate t i , and find maximal incomplete twig max i 12 end while 13 Max ( d )  X  ( Max pm ( d )  X  Max tm ( d )  X  { max i Algorithm getI-Twig operates in tw o phases. In the first phase stream nodes in sorted order of their LeftPos values. In line 2, we identify the stream containing the ne xt node to be processed. Line extended to the answers under inco mplete semantics. When we put the intermediate nodes into its stack, we make sure that  X  ( q , q generated under the incomplete semantics. The character of incomplete twig is shown in Algorithm generateMaxI-Twig. We adopt piecewise-maximal parsing piecewise-maximal strategy parses each segment in Q , where a segment is the sequence of nodes on the path between consecutive root/branch/leaf nodes in Q . Each segment is parsed into maximal subpaths which are the longest possi ble paths associated with root in the intermediate answers until the incomplete semantics mismatch occurs. In the Algorithm generateMaxI-Twi g, Line 1-4 remove all the These steps are quite significant. By the primary filtration, we can reduce the expense and maintain the incomplete semantics before further merging processing. The corresponding maximal i-intermediate paths which have common nodes and can be merged based on extended region scheme in Li ne 5. Then, the rest of root-leaf paths which can not be merged are the maximal i-matches, intermediate answers after merging, if u whole ( t i that the intermediate answers are the maximal i-matches. Thus we add them to the set Max tm ( d ) in line 9-10. If u means that the intermediate answers are not the maximal i-i-matches. According to piecewise-maximal strategy, we can scratch nodes from leaf to root gradually and find the maximal i-matches (line 11). In line 13, we get the whole maximal i-matches answers Max ( d ) under current conditions. Algorithm I-Twig() 01 a 0 = getI-Twig() 02 while not end() 03 Q m  X  Q last 04 D m  X  D last 05 a m =getI-Twig() 06 end while Algorithm I-Twig shows the de tailed matching algorithm under incomplete semantics. It repeated ly calls getI-Twig() to process the query, as described next. First of all, we get the partial maximal i-matches from the original twig in line 1. Line 3 modifies the query input by re moving the lowest leaf nodes from the last input twig. We remove the nodes that have formed the maximal i-matches from the original XML documents in current query processing (line 4). Then by calling getI-Twig(), we can obtain the partial maximal i-matches from the current twig. Without the users X  interventi on, the removed operation would keep on before the disappearance of the current input twig. Finally, we get the whole maxi mal i-matches under incomplete semantics in line 7. Next, we turn to analyze Algorithm I-Twig and show the correctness of our algorithm. Theorem 8. At every point during computation of Algorithm I-Twig: elements in each stack are strictly nested under incomplete semantics. Theorem 9. Given a twig query Q and an XML database D , Algorithm I-Twig returns all the answers for Q on D under incomplete semantics. semantics obviously. In particular , Algorithm getI-Twig keeps all answers in set I ( q ). Then there are three cases for the maximal i-matches to be processed in Algor ithm generateMaxI-T wig. Case 1: When root-leaf path p i which cannot be merged with any other path, then p i is the maximal i-match. Case 2: When root-leaf path p which can be merged with other paths and the twig t paths and the twig t j after merging meets u whole piecewise-maximal strategy. To evaluate the effectiveness of Algorithm C-Twig and I-Twig, we compare the performance with the algorithms on the basis of possible words in [10]. The expe riments were performed on two XML data sets with different structures. All the algorithms were implemen ted in JDK 1.4, and performed on a system with 2.4GHz Pen tium IV processor, 768MB RAM and running on windows XP system. FAuction-Q1 /site/regions//item/name FAuction-Q2 //open_auction[//end]//text[/emph]/bold FAuction-Q3 //item[/shipping]/description//keyword FAuction-Q4 //people/person[ /name][//education]//watch Random-Q5 //a//b//c//d Random-Q6 //a//b[//f][//g]//j We used the following two data sets for the experimental evaluation: z FAuction: This data set came from part of well-known data z Random: We generated fuzzy random data set by using 0 3 6 9 12 15 For each data set, we tested several diverse structures of twig queries. Figure 4 shows the twig que ries used for the experiment. We compare our holistic twig query algorithms (C-Twig and I-Twig) against the algorithms based on the possible words (abbr. PC-Twig and PI-Twig) over the above data sets. We first use the queries shown in Figure 4 over the data set FAuction. Figure 5 shows the pe rformance results. As observed, our algorithms C-Twig and I-Twi g outperform PC-Twig and PI-Twig, respectively. The reasons for above phenomenon can be concluded as follows: (i) C-Twig and I-Twig reduce the processing, C-Twig and I-Twig can reduce the cost greatly. Also, the cost of C-Twig is much lower than I-Twig based on the same twig query. This is explained by the fact that I-Twig generates more intermediate results which may contribute to the final i-matches under the incomplete sema ntics. Besides, I-Twig needs during the generation period of maximal i-matches. We also evaluate the queries of Figure 4 over the data set Random. The execution time of twig queries with different numbers of fuzzy nodes in Random is presented in Figure 6. We observe that the execution time of each query is somewhat increased, along that the number of fuzzy nodes in fuzzy XML does not have a significant effect on the execution time of C-Twig and I-Twig. This finding can be explained by the character that only the effective fuzzy nodes contributed to the answers are processed in our algorithms. In summary, experimental results show a substa ntial performance improvement of our twig query algorithms under both complete and incomplete semantics. Clearly, the existence of fuzzy not the mainly negative factor that effects on the inefficient performance. Twig query matching is identified as a core operation in querying components, then the matches of each individual component are stitched together to get the final re sults [3]. The main drawback of the decomposition method is the larg e intermediate results. In [4], Bruno et al. proposed the holistic twig join algorithm to avoid producing a large intermediate result. In the real world applications, information is often vague or ambiguous. Effects are mainly made in processing the incomplete and probabilistic XML data queries [2 , 6, 8, 9, 10, 16, 17]. In [10], algorithm is suboptimal, and it need s to scan the XML documents for many times to get all of the intermediate results. At the same our work, we focuses on the fuzzy XML twig query processing, and our algorithms are the generaliza tions of the holistic twig join algorithm. Furthermore, our algorithms can greatly reduce the intermediate results before further processing. The recent work of Li et al. [12] introduces a probabilistic twig matching method. Our work is fundamentally differe nt from theirs. On the one hand, our work focuses on the fuzzy XML twig query processing, on semantics notion is valuable in fuzzy XML. Thus, a much wiser way is to distinguish twig patte rn query under different semantics and output the answer with a memb ership above a given threshold. The topic of fuzzy XML databases has been intensively studied, mainly made on representing fuzzy information in XML documents, less fulfill the requirements of managing fuzzy XML queries, especially in fuzzy twig pattern queries. In order to process the twig queries, a novel fuzzy labeling scheme to capture the structural information of fuzzy XML documents, as well as an important fuzzy XML operator (Einstein operator) are introduced (complete and incomplete semantics) and analyze the calculation of the membership information unde r different semantics. On the basis, we present two efficient algorithms for querying twig under complete and incomplete semantics in fuzzy XML. Results show matching efficiently. This work is supported by the National Natural Science Foundation of China (60873010). The authors thank Benny Kimelfeld and Jiaheng Lu for he lpful comments and suggestions. [1] Abiteboul S., Segoufin L. and Vianu V. 2001. Representing [2] Abiteboul S. and Senellart P. 2006. Querying and Updating [3] Al-Khalifa S., et al.2002. Structural Joins: A Primitive for [4] Bruno N., Koudas N. and Srivastava D.2002. Holistic Twig [5] Gaurav A. and Alhajj R.2006. Incorporating Fuzziness in [6] Hung E., Getoor L.and Subr ahmanian V.S.2003. PXML: A [7] Kanza Y., Nutt W. and Sagiv Y.2002. Querying incomplete [8] Kimelfeld B., Kosharovshy Y. and Sagiv Y.2008. Query [9] Kimelfeld B. and Sagiv Y.2007. Combining Incompleteness [10] Kimelfeld B. and Sagiv Y.2007. Matching Twigs in [11] Klir G., Folder T.1982. Fu zzy Sets, Uncertainty and [12] Li Y. et al.2009. Holistically Twig Matching in Probabilistic [13] Lu J., Ling T.W., Chan C. and Chen T.2005. From Region [14] Ma Z.M. and. Yan L.2007. Fu zzy XML Data Modeling with [15] Nierrman A. and Jagadish H.V.2002. ProTDB: Probabilistic [16] Smets P.1997. Imperfect In formation: Imprecision-[17] Senellart P. and Abiteboul S.2007. On the Complexity of [18] Turowski K. and Weng U.2002. Representing and [19] Van Keulen M., De Keijzer A. and Alink W.2005. A [20] XMARK the XML-benchmark project. Available from [21] Zadeh L. A.1978. Fuzzy Sets as a Basis for a Theory of 
