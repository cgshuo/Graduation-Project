 1. Introduction If the coefficients of a digital filter are quantized to the Signed
Power of Two (SPT) space, then it is possible to replace the multipliers by shift and add operations ( Hartley, 1996 ). Removing the multipliers is equivalent to reducing the circuit complexity and minimizing the power dissipation and chip area. In the SPT space, the CSD is a minimal representation as it represents a given decimal number using minimum number of nonzero SPT terms.
In CSD representation, subtractions are also used to carry out multiplications for efficient hardware usage. In this scenario, it is quite advantageous to extend the CSD representation to the digital filter designed using frequency response masking ( Yu and Lim, 2002a ).

FRM ( Lim, 1986 ) brings forth tremendous savings in the number of multipliers while designing sharp filters with arbitrary bandwidth. The design of the FRM filter having infinite precision coefficients has been well investigated. It involves the design of an interpolated band edge shaping filter and a pair of masking
FRM filter coefficients are obtained either by the separate optimization of the various sub-filters or joint optimization of all of them. Linear programming is used for the design of the sub-filters which minimized the weighted error in the pass band and stop band of the overall filter by Lim (1986) . Remez algorithm is used by Saramaki and Lim (2003) for the design of FRM FIR filter.
The joint optimization of the various sub-filters is done in the following papers. Weighted Least square method is employed by
Yu and Lim (2002b) and Lee et al. (2004) . Semi-definite program-ming ( Lu and Hinamoto, 2003 ) and second order cone program-ming ( Lu and Hinamoto, 2008 ) techniques are used for the design of the continuous coefficient FRM filter. Recently, Neural Network has been employed ( Wang and He, 2008 ) for the design of the
FRM filter, in which the coefficients of the sub-filters are opti-mized simultaneously.

The implementation complexity can be significantly brought down when the FRM filter is represented using CSD. The design of an FRM filter in the discrete space is a complicated process and it calls for the use of efficient nonlinear optimization techniques.
The classical gradient based optimization techniques cannot be directly applied to this problem, because here, the search space consists of integers. In this context, meta-heuristic algorithm is a good optimization tool since the proper tuning of the parameters with respect to a particular design problem can bring forth global solution.

Genetic algorithms have been established as a good alternative for the optimization of multimodal, multidimensional problem.
This is a population based evolutionary algorithm where, in each iteration, candidate solutions are generated using genetic opera-tions like reproduction, crossover and mutation. GA is used to design the FRM filter in the SPT space by Yu and Lim (2002a) . For
GA, there is a chance for entrapment in a local minima in some cases, thereby leading to sub-optimal solutions. This drawback can be avoided by properly modifying GA. A novel GA is reported by Mercier et al. (2007) where a look up table approach is used for the design of FRM filters in the CSD space. Here, the binary equivalent of the index of the look up table is used to obtain the initial seed.

This paper proposes the design of the CSD based discrete FRM filter with reduced computational time using two approaches, one using the recently emerged Artificial Bee Colony algorithm ( Karaboga and Basturk, 2008 ) and another using Differential has been chosen because it requires minimum number of para-meters in the initialization process. The ABC algorithm and
Differential Evolution algorithm have been modified in this work in such a way that, in the course of optimization, the candidate solutions are integers and efficient exploration and exploitation of the search space is done. A promising aspect of these approaches is that good quality solution is obtained with much reduced compu-tation time. Besides, the proposed joint optimization permits the simultaneous design of the various sub-filters of the FRM filter.
Another advantage of the proposed approaches is that, in the course of the optimization, restoration techniques are not needed to bring back the candidate solutions to the legitimate CSD codes, unlike in the design of CSD filters based on genetic algorithm ( Ashrafzadeh and Nowrouzian, 1997 ). For the purpose of compar-ison, integer coded GA ( Manoj and Elizabeth, 2009 ) is also used to design the discrete FRM filter. It was found that the design based on ABC approach outperforms that based on DE and the one using
DE performs better than that using integer coded GA in terms of the frequency domain specifications of the FRM filter. The paper is organized as follows. Section 2 gives an overview of frequency response masking. In Section 3 , the CSD representation is briefed. Section 4 gives a brief overview of the ABC algorithm and
Differential Evolution algorithm. The statement of the problem is done in Section 5 . The design of the continuous coefficient FRM filter is briefed in Section 6 . Section 7 illustrates the proposed design of multiplier-less FRM filter using the modified ABC algorithm. Section 8 is concerned with the design of the discrete
FRM filter using the modified Differential Evolution algorithm. The results and discussions are presented in Section 9 . 2. Overview of frequency response masking
Frequency response masking is a much acclaimed technique for the design of an arbitrary bandwidth, sharp FIR filter with reduced computational complexity ( Lim, 1986 ). Efficient hard-ware implementation of the filter designed using FRM is possible due to the large number of zero-valued coefficients. It consists of
H ma ( z ) and a complimentary masking filter H mc ( z ). The compli-the model filters are FIR in nature. The block diagram of the FRM filter is shown in Fig. 1 .

The overall transfer function of the FRM filter can be written as follows:
The prototype filter, also called the band edge shaping filter, is interpolated by a factor M and therefore its transition width is necessary spectrum repetitions for the formation of any arbitrary bandwidth filter under consideration. 3. Canonic Signed Digit representation
Multiplier-less techniques are used to avoid the need of establishing an expensive general purpose multiplier on, say, the FPGA. Among the multiplier-less techniques, Canonic Signed Digit representation is an encoding where a binary number contains the fewest number of nonzero bits ( Hartley, 1996 ). Therefore, the number of partial product additions in a hardware multiplier can be brought down, when the filter coefficients are encoded in the CSD format. The features are as follows. (a) It is a minimal representation. (b) It has a unique SPT representation for a given decimal input. (c) It is a ternary system. (d) No two consecutive bits are nonzero. (e) An N bit CSD number cannot have more than ( N  X  1)/2
Any infinite precision multiplier coefficient  X  d  X  can be repre-sented using the CSD format as follows: d  X  where  X  L  X  is the wordlength of the CSD number and integer  X  R  X  represents a radix point in the range 0 o R o L . Besides a a i 1  X  0  X  3  X  a i A f 1 ; 0 , 1 g X  4  X  4. Overview of the Artificial Bee Colony algorithm and Differential Evolution algorithm
This section gives an overview of the Artificial Bee Colony algorithm and Differential Evolution algorithm. 4.1. Artificial Bee Colony (ABC) algorithm Introduced by Karaboga and Basturk (2008) , the Artificial Bee Colony algorithm has been proven to be an efficient tool in finding out the potential solutions for a multidimensional, multimodal optimization problem. The artificial colony of the honey bees comprises the following types of bees: employed bees, onlookers and scouts. A bee waiting on the dance area for making the decision to choose a food source is called an onlooker and a bee going to the food source visited by itself previously is called an employed bee. The scout bee is responsible for carrying out random search. The food source represents a possible solution to the problem. The number of food sources is the same as the number of employed bees. The algorithm starts by deputing an employed bee at the randomly generated food source and then evaluating its nectar quality (fitness). Employed bees share their information with onlookers within the hive and then the onloo-kers select one of the food sources using  X  X  X oulette Wheel X  X  selection method ( Randy and Sue, 2004 ). A particular food source is selected by the onlooker bee depending upon the probability value associated with that food source. An artificial employed or onlooker bee probabilistically produces a modification on the solution in the memory for finding a new food source and tests the nectar amount of the new food source. The employed bee at the i th food source finds a new source by changing the parameter at the randomly selected location j . The new parameter at the j th position is obtained as follows: x  X  i , j  X  X  x t  X  i , j  X  X  fd  X  i , j  X  X  5  X  where f is a random variate E  X  1 ; 1 and d  X  i , j  X  is defined as follows: d  X  i , j  X  X  x t  X  i , j  X  x t  X  k , j  X  X  6  X 
Here x t  X  i , j  X  is the j th parameter of the i th food source, x the j th parameter of the new food source in the neighborhood and k
A the dimension of the food source. Although k is determined randomly, it has to be different from i . f is a random number between [ 1, 1]. After finding the new food source by applying the above modification, its nectar quality is compared with that of the old food source. If the new food source has a better nectar quality, then the old food source is replaced by the new one in the memory. In other words, a greedy selection mechanism is employed as the selection operation between the old and the current food sources. f controls the production of a neighbor food source position and the modification represents the comparison of the neighborhood food positions by the bee. It can be found x  X  k , j  X  decreases, the modification on the position x t too. Thus as the algorithm moves to convergence, the step length is adaptively reduced.

If a solution representing a food source is not improved by a predetermined number of trials, then that food source is aban-doned by its employed bee and the employed bee associated with that food source becomes a scout. As soon as an employed bee becomes a scout, it starts to search for a new food source randomly. The number of trials for releasing a food source is equal to the value of the  X  X imit X , which is an important control parameter of the ABC algorithm. 4.2. Differential Evolution (DE) algorithm
The DE algorithm is a stochastic, population-based optimiza-tion algorithm introduced by Storn and Price (1995) . It was proposed to optimize real parameter, real valued functions. Like the genetic algorithm, it has three operators; mutation, crossover, be used in an optimization where the objective function is non-differentiable, non-continuous and even nonlinear. Besides, it requires few control variables and is easy to use. The various phases of DE are briefed below. 4.2.1. Initialization
Select the size of the population and initialize the variables of the optimization. The initial parameters are randomly selected within the bounds specified for each parameter. The dimension of the candidate solution is given by  X  D  X . The design vector under consideration can be represented as x  X  G  X  is the generation number. The initial population is created by perturbing the above randomly. 4.2.2. Mutation
The role of mutation is that it expands the search space. For performing mutation, three vectors x k 1 , G , x k 2 , G and x domly selected from the initial population such that tion size. Now add the weighted difference of two of the vectors to the third to obtain the donor vector as follows: v
Here F is the mutation factor. It is a constant and falls in the range [0,2]. 4.2.3. Recombination
Here a trial vector is generated from the elements of the target vector and the elements of the donor vector. The elements of the donor vector enter the trial vector probabilistically with a prob-ability CR. u where jrand i is a random integer in [1, D ], where D is the dimension of the design vector, j A 1 ; 2 , 3 , ... , D and rand random number in [0,1]. 4.2.4. Selection
The motivation of the selection process is to identify the promising points in the search space and thus direct the search efficiently. The performance of the target vector and the trial vector is compared by evaluating the objective function. We have posed the optimization problem as a minimization type and hence the vector with the lowest objective function value is passed onto the next generation. x
Here f ( x ) denotes the objective function evaluated for the design vector x under consideration. In the DE algorithm, steps 4.2.2 X  4.2.4 are repeated, until the convergence criterion is satisfied. 5. Statement of the problem
Our aim is to design the FRM filter in the CSD space which is suitable for hardware implementation. The advantage of this approach is that multiplications can be replaced by shift and add operations. If we are directly rounding off the continuous coefficient filter with restricted SPT terms, degradation happens in the required performance specifications. In this context, we have to deploy a suitable optimization technique. Approaches that use meta-heuristic algorithms have been proposed for the optimization. Our contribution consists of modeling the problem as an approximation problem and thereby formulating a new objective function. The formulation of the objective function is discussed below. 5.1. Formulation of objective function
The objective function is defined as an approximation error after the filter is converted to the CSD space. We would like to propose a new objective function F 1  X  x  X  being the L 2 norm of the error of approximation. It is defined in the frequency domain as follows:
F  X  x  X  X  J H d  X  o  X  H  X  o , x  X  J 2  X  10  X  where H d  X  o  X  is the zero phase frequency response of the infinite precision FRM filter and H  X  o , x  X  is the zero phase frequency response of the optimized filter. If the sub-filters are assumed to be linear phase and the filter lengths given by N a , N 1
H  X  o , x  X  is given as follows ( Lu and Hinamoto, 2003 ). Here for convenience, only the case of odd values of N a , N 1 and N considered: H  X  o , x  X  X  X  b T c  X  o  X  X  b T ma c ma  X  o  X  X  X  1 b T c  X  o  X  X  b where b  X  X  h a  X  n 1  X  0 : 5 h a  X  n 1  X  1  X  :: 0 : 5 h a  X  N a c  X  o  X  X  X  1 cos M o :: cos  X  n 1 M o  X  T , n 1  X  X  N a 1  X  = 2  X  13  X  b ma  X  X  h ma  X  n 2  X  0 : 5 h ma  X  n 2  X  1  X  :: 0 : 5 h ma  X  N c ma  X  o  X  X  X  1 cos o :: cos  X  n 2 o  X  T , n 2  X  X  N 1 1  X  = 2  X  15  X  b mc  X  X  h mc  X  n 3  X  0 : 5 h mc  X  n 3  X  1  X  :: 0 : 5 h mc  X  N c mc  X  o  X  X  X  1 cos o :: cos  X  n 3 o  X  T , n 3  X  X  N 2 1  X  = 2  X  17  X  x is defined as follows and it is the vector constituted by the design variables resulting from the ABC optimization: x  X  X  b T b T ma b T mc  X  18  X 
To reduce the number of SPT terms in the CSD equivalents, a constraint has also been added to the optimization problem as
Here the constraint is included in the optimization problem using the penalty method ( Boyd and Vandenberghe, 2004 ) for convert-ing a constrained optimization to an unconstrained optimization.
Using the penalty method, the penalty function is defined as follows: g  X  x  X  X  max  X  0 , n  X  x  X  n b  X  X  19  X 
In our work, a variable number of SPT terms has been used for the synthesis of the optimum discrete FRM filter. This allocation has definite advantage over the CSD approximation using fixed number of SPT terms for each filter coefficient as pointed out by
Lim et al. (1999) . Using the minimum number of SPT terms calls for the reduction in implementation cost. Hence for designing the
FRM filter, computational complexity has also been considered other than the approximation accuracy. Therefore, the final objective function for the coefficient synthesis of FRM filter can be formulated as follows: Minimize F  X  x  X  X  a 1 F 1  X  x  X  X  a 2 g  X  x  X 
Here, a 1 and a 2 are positive weighting coefficients and can be taken according to the relative importance to be attached with each term of the objective function. 5.2. Encoding of the optimization variables
Once the infinite precision coefficients are obtained, the next phase in our work is to convert them to the SPT space, more clearly to the CSD space. The design of the FRM filter in the CSD way for the encoding is to use the ternary encoding of the CSD equivalents of the filter coefficients. But the disadvantage of ternary encoding is that in the course of optimization, the candidate solutions may turn out to be non-legitimate CSD numbers. This calls for restoration algorithms ( Ashrafzadeh and Nowrouzian, 1997 ) to bring them back to allowable CSD formats. Hence in this paper, we suggest an encoding of the optimization variables such that it avoids the use of restoration algorithms. To The four fields are index, CSD numbers, decimal equivalents and the number of nonzero SPT terms. A 14 bit CSD representation is used for a given decimal number with 12 bits for the fractional part and 2 bits for the integer part. A typical entry of a look up table is shown in Table 1 . In our design, we adopt the joint form the design vector in the optimization problem. Since the sub-filters are assumed to be linear phase filters, the number of optimization variables can be further reduced by extracting only half of the symmetrical filter coefficients of each sub-filter. Thus the dimension of the optimization problem has been significantly brought down.

In order to represent the filter coefficients in the CSD space, they are encoded as the signed indices of the look up table locations of the nearest CSD equivalent. According to Ashrafzadeh et al. (1998) , it can be shown that if  X  D  X  is the nearest CSD equivalent of a decimal number  X  d  X , then the CSD equivalent of  X  d  X  can be obtained as  X  D  X . Hence it is quite appropriate to encode the filter coefficients using the signed indices of the corresponding look up table locations. If the decimal filter coefficient is negative, then it is encoded as the negative of the index of the location of its positive counter part. Thus the initial solution is constituted by concatenating the integer encoded CSD coefficients of the model filter, masking filter and the compli-mentary masking filter. Such an encoding is quite useful because, the dimension of the candidate solution has been brought down significantly as compared to that by Mercier et al. (2007) . Through this procedure, the optimization algorithm is capable of designing the discrete sub-filters simultaneously. Since our search space consists of integers, the classical gradient based optimization techniques cannot be deployed. Therefore, we adopt the optimi-zation based on meta-heuristic approaches which can be properly modified to suit the problem posed. 6. Design of continuous coefficient FRM filter
The initial phase of our work is the design of the continuous coefficient FRM filter. The design specifications of the low pass FRM filter are shown as follows.
 Pass band edge frequency: 0 : 6 p .
 Stop band edge frequency: 0 : 61 p .
 Maximum pass band ripple: 0.1 dB.
 Minimum stop band attenuation: 40 dB.

The band edges of the various sub-filters H a  X  z  X  , H ma H mc ( z ) were found out as per the original work on FRM by Lim (1986) . The sub-filters were designed separately to reduce the computational complexity and Remez Exchange algorithm was used for the design. The orders of the sub-filters meeting the required specifications are 51, 45, and 41 respectively. The zero phase frequency response of the continuous coefficient FRM filter is shown in Fig. 2 .

The optimal interpolation factor M was chosen such that the total order of the sub-filters and therefore the computational complexity becomes minimum. Table 2 shows the orders of the sub-filters for varying interpolation factors. Interpolation factors have been varied from 2 to 14 for finding out the optimal interpolation factor. From the table, it is found that, for the interpolation factor 9, the total order of the sub-filters were minimum. The total order is obtained by adding the orders of the sub-filters. 7. Design of multiplier-less FRM filter using the proposed modified ABC algorithm
Since the optimization problem posed in Section 5 is multi-dimensional and multimodal, an efficient optimization technique is required to obtain good quality solutions. Hence the deploy-ment of ABC algorithm is quite suitable. Since this a meta-heuristic algorithm, it can manipulate on the encoded variables directly. An integer coded ABC algorithm had been proposed for the design of non-uniform filter bank trans-multiplexer by Manoj and Elias (in press) . We propose a modified ABC algorithm suitable for our framework. In order to begin with a wider search space, where the probability of finding good candidate solutions is more, the initial number of food sources is selected to be an integer multiple of the number of employed bees. The various phases involved are listed below. The proposed design flow is explicitly given in the flowchart in Fig. 3 . 7.1. Initialization of food sources
The infinite precision FRM filter coefficients obtained in the initial phase are CSD encoded as mentioned in Section 5.2 to generate the initial food source. It is then randomly perturbed to obtain the other food sources. A food source represents a candidate solution to the problem to be optimized. A typical food source is depicted in Table 3 . Here, xa , xma and xmc represent the
CSD encoded coefficients of the prototype filter, masking filter and complimentary masking filter respectively and n 1 , n are defined as per Eqs. (13), (15) and (17) respectively. 7.2. Prioritized enlisting of food sources
In order to ensure a wider search space and to obtain elite solutions, at the beginning, the total number of food sources is taken to be an integer multiple of the number of employed bees.
Now their fitness is evaluated and the food sources with good nectar quality are passed on to the optimization problem. The number of these prioritized food sources is taken to be the same as the number of employed bees. -100 -80 -60 -40 -20 0 20 magnitude response in dB 7.3. Employed bee phase
Employed bees determine a food source within the neighbor-hood of the food source in their memory and evaluate its nectar amount (fitness function). The employed bee at the i th food source finds a new source by changing the parameter at the randomly selected location j . The new parameter at the j th position is obtained as follows: x t  X  1  X  i , j  X  X  x t  X  i , j  X  X b fd  X  i , j  X c X  20  X  follows: d  X  i , j  X  X  x t  X  i , j  X  x t  X  k , j  X  X  21  X  the new food source in the neighborhood.

The above modification ensures that the candidate solutions generated in this phase truly belong to the search space consist-ing of integers. Besides, another step is initiated to the newly generated neighbor food sources to prevent them in crossing the boundaries of the CSD look up table. if x t  X  1  X  i , j  X  o v lb , then x t  X  1  X  i , j  X  X  v lb if x t  X  1  X  i , j  X  4 v ub , then x t  X  1  X  i , j  X  X  v ub
Here, v lb is the lower bound and v ub is the upper bound of a parameter in the food source. If the new food source has a better nectar quality, then the old food source is replaced by the new one in the memory. This is called the greedy selection mechanism. 7.4. Onlooker bee phase
In this phase, an onlooker bee evaluates the nectar information taken from all the employed bees and chooses a food source with a probability related to its nectar amount. With this scheme, good food sources will get more onlookers than the ones with less fitness. As in the case of the employed bee, the onlooker bee also produces a modification on the solution in its memory and evaluates the nectar quality of the candidate source. The mod-ification is done as in the employed bee phase. Similar to the employed bee phase, the greedy selection mechanism is employed as the selection operation between the old and new food sources. 7.5. Scout bee phase
A food source whose nectar quality shows no improvement, even after a certain number of cycles called the  X  X imit X  cycles is abandoned and a new food source is found out. The new food source is found by the scout and they are generated randomly as given as follows: x t  X  1  X  randi  X  X  lb , ub ,  X  X im X   X  where randi denotes random integer values from the uniform discrete distribution within the interval [lb,ub] with dimension of the food source specified by  X  X im X . Memorize the best food source found so far. 7.6. Termination
Termination is achieved either, when the approximation error becomes less than the tolerance specified or when a predeter-mined number of generations are reached. Steps 7.3 X 7.5 are repeated if neither of the above is not satisfied. Now the food sources are decoded and the best filter is taken as the optimal discrete FRM filter.

If the CSD encoding and decoding are avoided and the candidate vector consisting of integer variables are used instead of the initial solution consisting of CSD encoded variables, then this proposed optimization approach can be used for the solution of real world integer programming problems. 8. Design of multiplier-less FRM filter using the proposed modified DE algorithm
Differential Evolution (DE) algorithm owes its name to the special type of differential operator which generates the off springs from the parent chromosomes without adopting classical crossover or mutation. The DE algorithm has been modified so that it is suitable for the nonlinear optimization problem posed in Section 5 . 8.1. Initialization The optimization variables are formed by concatenating the CSD encoded coefficients of the sub-filters of the FRM filter, H H filters which are linear phase, only half the number of the filter coefficients are needed. The initial parameters are randomly selected within the bounds specified for each parameter. In order to begin with a wider search space, where the probability of obtaining good quality solutions are more, the initial number of candidate solutions are taken to be an integer multiple of the population being used in the subsequent exploration and exploitation phase of the optimization. The design vector under consideration can be represented as follows: x number. The initial population is created by perturbing the above randomly. 8.2. Prioritized Enlisting of candidate solutions
Prioritized Enlisting can bring forth promising solutions in the search process. The fitness function of the candidate solutions in the initialization process is evaluated and the best solutions are passed over to the subsequent stages of optimization. The number of these prioritized solutions is taken to be  X  P  X . 8.3. Mutation
In the mutation process, DE generates new parameter vector called donor vector by adding the weighted difference vector between two population members to a third member. If the resulting donor vector has a lower fitness function value than a predetermined population member, the newly generated vector replaces the original vector with which it was compared. For performing mutation, three vectors x k 1 , G , x k 2 , G and x randomly selected from the initial population. For each target vector x i , G the donor vector is produced by v Here F is the mutation factor and it will control the variation of falls in the range [0,2]. bc denotes rounding to the lower value. tion process ensures that the candidate solutions generated in this phase consist of integers. Another step is initiated to prevent the parameters in the candidate solutions from moving out of the boundary of the look up table created if v if v
Here, v lb is the lower bound and v ub is the upper bound of a parameter in the candidate solution. 8.4. Recombination
This step mimics the crossover in the genetic algorithm. Its purpose is to incorporate successful solutions from the previous generation. The target vector is mixed with the donor vector to produce a trial vector. The elements of the donor vector enter the trial vector probabilistically with a probability CR: u jrand i is a random integer in [1, D ], where D is the dimension of the 8.5. Selection
A greedy selection mechanism is used in this step after comparing the performance of the target vector and the trial vector. The performance is compared by evaluating the objective function of both the candidates. The motivation of the selection a minimization type, the vector with the lowest objective function value is selected and passed onto the next generation: x
Here f ( x ) denotes the objective function evaluated for the design vector x under consideration. 8.6. Termination
Steps 8.3 X 8.5 are repeated, until the convergence criterion is satisfied. Termination is achieved either when a pre-specified number of generations are reached or when the approximation error becomes less than a pre-determined value. The best solution is taken and decoded using the look up table to obtain the optimal FRM filter in the CSD space.

To make the above optimization approach suitable for the solution of real world integer programming problems, the only modification needed is to replace the CSD encoded variables by the candidate vector consisting of integer variables. 9. Results and discussions
The two proposed approaches in Sections 7 and 8 have been deployed for the discrete optimization of the FRM filter in the CSD space. The specifications of the filter to be designed were given in
Section 6 . The order of the various sub-filters H a ( z ), H
H ( z ) are 51, 45 and 41 respectively. The word length for the CSD filter coefficient is 14 bits, where 12 bits are used for the fractional part. Simulation was done using MATLAB 7.10.0 on a
Dual Core AMD Opteron processor operating at 3 GHz. The parameters used for ABC algorithm have been listed in Table 4 . The magnitude responses of the various sub-filters are shown in
Fig. 4 . The magnitude responses of the CSD rounded FRM filter and the filter optimized using the modified ABC algorithm are shown in Fig. 5 . The running time for the optimization was 204.536 s. The algorithm converged after 75 iterations. A remark-able aspect of this approach is that the Minimum Stop band
Attenuation of the FRM filter after optimization is better than that of the continuous coefficient filter. The performance comparison of the continuous coefficient FRM filter, CSD rounded filter and the optimized filter using the first proposed approach (ABC algorithm) is given in Table 5 .
 -100 -80 -60 -40 -20 20 magnitude response in dB -100 -80 -60 -40 -20 0 20 magnitude response in dB
Regarding the proposed discrete optimization of FRM filter in the CSD space using the second approach, the parameters of the modified DE algorithm are listed in Table 6 . The magnitude response of the FRM filter optimized using the proposed modified
DE algorithm is shown in Fig. 6 . The running time for the optimization was 125.071 s. The DE algorithm converged after 130 iterations.

For the purpose of comparison, our work is compared with the integer coded genetic algorithm (GA) proposed by Manoj and
Elizabeth (2009) .In Table 7 , the parameters employed in the above integer coded GA are listed. The magnitude response of the
FRM filter optimized using the integer coded GA algorithm, is shown in Fig. 7 . The performance results in the frequency domain in terms of the pass band and stop band ripple magnitude are compared in Table 8 . It is found that the first approach using our modified ABC algorithm, outperforms the one using our modified DE algorithm which is even better than the integer coded GA by
Manoj and Elizabeth (2009) . The performance of the FRM filter using the optimization approach based on Novel GA ( Mercier et al., 2007 ) is almost the same as that of our proposed approaches.

One of the objectives of our work is to reduce the computation time of the design process. The total running time for the optimization is used as a measure for evaluating the optimization complexity. The dimension of the candidate solution has a significant impact on the run time. Hence in order to compare the run time for the various optimization approaches, the existing algorithms namely, integer coded GA by Manoj and Elizabeth (2009) and novel GA by Mercier et al. (2007) are run using Matlab 7.10.0 on the same Dual Core Opteron Processor operating at 3 GHz, which has been used for all the proposed algorithms in this paper. The population size is chosen to be the same for all the approaches used for comparison. The dimension of the candidate solution and the run time of optimization for the various existing and the proposed approaches are tabulated in Table 9 . Thus a saving of 93.23% and 95.86% can be claimed in the computational time of our proposed approaches when compared to the novel GA ( Mercier et al., 2007 ).

For evaluating the computational complexity of the resulting filter, the number of SPT terms from the resulting FRM filter is employed. The number of SPT terms decides how many adders are needed to replace the multipliers. Now in our problem, the complexity can be given in terms of the number of SPT terms required for various sub-filters H a ( z ), H ma ( z ) and H parison of the computational complexity of the resulting FRM filter using the three approaches is given in Table 10 .Itis observed that the computational complexity is almost the same in the three approaches while the computational cost has been drastically reduced in our approaches as compared to the novel magnitude response in dB -100 magnitude response in dB
GA proposed by Mercier et al. (2007) . In short, good performance and significant reduction in computation time are the highlights of our proposed approaches. 10. Conclusions
In this work, we have proposed two approaches for the discrete optimization of FRM filter in the CSD space. To this end,
Artificial Bee Colony algorithm and Differential Evolution have been tailor made for the optimization problem posed here, where the search space consists of integers and the objective function is nonlinear. The above algorithms have been employed because, they have simple computational models, low implementation complexity, and the ability to get out of the local minima. A promising feature of the proposed joint optimization of CSD based
FRM filter is that, restoration techniques are not needed to bring back the candidate solutions to the permissible CSD codes in the course of optimization. The use of joint optimization permits the simultaneous design of the sub-filters. Simulation results show that these algorithms yield better performances than the integer coded GA algorithm ( Manoj and Elizabeth, 2009 ) in the frequency response specifications of the overall FRM filter designed. Besides, the computational complexity of the resulting filter is of the same order in the two proposed approaches as well as that of the integer coded GA. Yet another remarkable aspect of the proposed approaches is that the running time for optimization approaches have been significantly brought down as compared to the novel
GA proposed by Mercier et al. (2007) . The proposed optimization approaches can be used for the solution of many real world optimization problems in which the search space consists of integers.
 References
