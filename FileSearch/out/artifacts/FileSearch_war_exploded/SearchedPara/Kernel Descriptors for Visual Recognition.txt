 Image representation (features) is arguably the most fundamental task in computer vision. The problem is highly challenging because images exhibit high variations, are highly structured, and lie in high dimensional spaces. In the past ten years, a large number of low-level features over images have been proposed. In particular, orientation histograms such as SIFT [16] and HOG [3] recognition and 3D reconstruction. The success of SIFT and HOG naturally raises questions on how they measure the similarity between image patches, how we should understand the design choices in them, and whether we can find a principled way to design and learn comparable or superior low-level image features.
 In this work, we highlight the kernel view of orientation histograms and provide a unified way to low-level image feature design and learning. Our low-level image feature extractors, kernel descrip-tors, consist of three steps: (1) design match kernels using pixel attributes; (2) learn compact basis vectors using kernel principle component analysis; (3) construct kernel descriptors by projecting the infinite-dimensional feature vectors to the learned basis vectors. We show how our framework is applied to gradient, color, and shape pixel attributes, leading to three effective kernel descriptors. We validate our approach on four standard image category recognition benchmarks, and show that our kernel descriptors surpass both manually designed and well tuned low-level features (SIFT) [16] and sophisticated feature learning approaches (convolutional networks, deep belief networks, sparse coding, etc. ) [10, 26, 14, 24]. The most relevant work to this paper is that of efficient match kernels (EMK) [1], which provides a kernel view to the frequently used Bag-of-Words representation and forms image-level features by learning compact low dimensional projections or using random Fourier transformations. While the work on efficient match kernels is interesting, the hand-crafted SIFT features are still used as the basic building block. Another related work is based on mathematics of the neural response, which shows that the hierarchical architectures motivated by the neuroscience of the visual cortex is associated to the derived kernel [24]. Instead, the goal of this paper is to provide a deep understand-ing of how orientation histograms (SIFT and HOG) work, and we can generalize them and design novel low-level image features based on the kernel insight. Our kernel descriptors are general and provide a principled way to convert pixel attributes to patch-level features. To the best of our knowl-edge, this is the first time that low-level image features are designed and learned from scratch using kernel methods; they can serve as the foundation of many computer vision tasks including object recognition.
 This paper is organized as follows. Section 2 introduces the kernel view of histograms. Our novel kernel descriptors are presented in Section 3, followed by an extensive experimental evaluation in Section 4. We conclude in Section 5. Orientation histograms, such as SIFT [16] and HOG [3], are the most commonly used low-level features for object detection and recognition. Here we describe the kernel view of such orientation histograms features, and show how this kernel view can help overcome issues such as orientation binning. Let  X  ( z ) and m ( z ) be the orientation and magnitude of the image gradient at a pixel z . In HOG and SIFT, the gradient orientation of each pixel is discretized into a d  X  dimensional indicator vector  X  ( z ) = [  X  1 ( z ) ,  X  X  X  ,  X  d ( z )] with where b x c takes the largest integer less than or equal to x (we will describe soft binning further below). The feature vector of each pixel z is a weighted indicator vector F ( z ) = m ( z )  X  ( z ) . Ag-gradients: where e m ( z ) = m ( z ) / constant. P is typically a 4  X  4 rectangle in SIFT and an 8  X  8 rectangle in HOG. Without loss of generality, we consider L 2 -based normalization here. In object detection [3, 5] and matching based object recognition [18], linear support vector machines or the L 2 distance are commonly applied to sets of image patch features. This is equivalent to measuring the similarity of image patches using a linear kernel in the feature map F h ( P ) in kernel space: where P and Q are patches usually from two different images. In Eq. 3, both k e m ( z, z 0 ) = definite kernels. Therefore, K h ( P, Q ) is a match kernel over sets (here the sets are image patches) as in [8, 1, 11, 17, 7]. Thus Eq. 3 provides a kernel view of HOG features over image patches. For simplicity, we only use one image patch here; it is straightforward to extend to sets of image patches. The hard binning underlying Eq. 1 is only for ease of presentation. To get a kernel view of soft binning [13], we only need to replace the delta function in Eq. 1 by the following, soft  X  (  X  ) function: where a ( i ) is the center of the i  X  th bin. In addition, one can easily include soft spatial binning by normalizing gradient magnitudes using the corresponding spatial weights. The L 2 distance between kernel view can be provided in the same manner. Figure 1: Pixel attributes. Left : Gradient orientation representation. To measure similarity between two pixel orientation gradients  X  and  X  0 , we use the L 2 norm between the normalized gradient vectors e vectors, and the blue line represents the distance between them. Right : Local binary patterns. The values indicate brightness of pixels in a 3  X  3 patch. Red pixels have intensities larger than the center pixel, blue pixels are darker. The 8-dimensional indicator vector is the resulting local binary pattern. in gradient magnitude. k  X  ( z, z 0 ) measures the similarity of gradient orientations of two pixels: 1 if two gradient orientations are in the same bin, and 0 otherwise (Eq.1, hard binning). As can be seen, this kernel introduces quantization errors and could lead to suboptimal performance in subsequent stages of processing. While soft binning results in a smoother kernel function, it still suffers from similarity of image patches more accurately. 3.1 Gradient, Color, and Shape Match Kernels We introduce the following gradient match kernel, K grad , to capture image variations: is a Gaussian kernel over orientations. To estimate the difference between orientations at pixels z and z 0 , we use the following normalized gradient vectors in the kernel function k o : The L 2 distance between such vectors measures the difference of gradient orientations very well (see Figure 1). Note that computing the L 2 distance on the raw angle values  X  instead of the normalized gradient vectors e  X  would cause wrong similarity in some cases. For example, consider the two angles 2  X   X  0 . 01 and 0 . 01 , which have very similar orientation but very large L 2 distance. To summarize, our gradient match kernel K grad consists of three kernels: the normalized linear kernel is the same as that in the orientation histograms, weighting the contribution of each pixel using gradient magnitudes; the orientation kernel k o computes the similarity of gradient orientations; and the position Gaussian kernel k p measures how close two pixels are spatially.
 The kernel view of orientation histograms provides a simple, unified way to turn pixel attributes into patch-level features. One immediate extension is to construct color match kernels over pixel values: images). k c ( c ( z ) , c ( z 0 )) = exp While the gradient match kernel can capture image variations and the color match kernel can de-scribe image appearance, we find that a match kernel over local binary patterns can capture local shape more effectively: [19]: where e s ( z ) = s ( z ) / 3  X  3 neighborhood around z ,  X  s a small constant, and b ( z ) is binary column vector binarizes k Match kernels defined over various pixel attributes provide a unified way to generate a rich, diverse visual feature set, which has been shown to be very successful to boost recognition accuracy [6]. As validated by our own experiments, gradient, color and shape match kernels are strong in their own right and complement one another. Their combination turn out to be always (much) better than the best individual feature. 3.2 Learning Compact Features Match kernels provide a principled way to measure the similarity of image patches, but evaluating kernels can be computationally expensive when image patches are large [1]. Both for computational efficiency and for representational convenience, we present an approach to extract the compact low-dimensional features from match kernels: (1) uniformly and densely sample sufficient basis vectors from support region to guarantee accurate approximation to match kernels; (2) learn compact basis vectors using kernel principal component analysis. An important advantage of our approach is that no local minima are involved, unlike constrained kernel singular value decomposition [1]. We now describe how our compact low-dimensional features are extracted from the gradient kernel K grad ; features for the other kernels can be generated the same way. Rewriting the kernels in Eq. 5 the following feature over image patches: Because we use Gaussian kernels, F grad ( P ) is an infinite-dimensional vector.
 A straightforward way to dimension reduction is to sample sufficient image patches from training images and perform KPCA for match kernels. However, such approach makes the learned features depend on the task at hand. Moreover, KPCA can become computationally infeasible when the number of patches is very large.
 Sufficient Finite-dimensional Approximation. We present an approach to approximate match ker-nels directly without requiring any image. Following classic methods, we learn finite-dimensional features by projecting F grad ( P ) into a set of basis vectors. A key issue in this projection process is how to choose a set of basis vectors which makes the finite-dimensional kernel approximate well the original kernel. Since pixel attributes are low-dimensional vectors, we can achieve a very good approximation by sampling sufficient basis vectors using a fine grid over the support region. For basis vectors. Following the formulation in [1], such a procedure is equivalent to using a finite-dimensional kernel: e k o ( e  X  ( z ) , e  X  ( z 0 )) = k o ( e  X  ( z ) , X ) &gt; where k o ( e  X  ( z ) , X ) = [ k o ( e  X  ( z ) , x 1 ) ,  X  X  X  , k o ( e  X  ( z ) , x d tion k o , and the black, green and blue lines are the finite approximation kernels with different grid sizes. Right : root mean square error (RMSE) between KPCA approximation and the corresponding match kernel as a function of dimensionality. We compute the RMSE on randomly sampled 10000 datapoints. The three lines show the RMSE between the kernels K grad (red) and K col (blue) and K shape (green), and their respective approximation kernels. is now only d o  X  dimensional. In a similar manner, we can also approximate the kernels k p , k c and k b . The finite-dimensional feature for the gradient match kernel is e F grad ( P ) = e  X  ( z ) , and may be efficiently used as features over image patches. We validate our intuition in Fig. 2. As we expect, the approximation error rapidly drops with increasing grid sizes. When the grid size is larger than 16 , the finite kernel and the original kernel become virtually indistinguishable. For the shape kernel over local binary patterns, because the variables are binary, we simply choose the set of all 2 8 = 256 basis vectors and thus no approximation error is introduced.
 Compact Features. Although e F grad ( P ) is finite-dimensional, the dimensionality can be high due to the tensor product. For example, consider the shape kernel descriptor: the size of basis vectors on kernel k b is 256 ; if we choose the basis vectors of the position kernel k p on a 5  X  5 regular grid, the dimensionality of the resulting shape kernel descriptor F shape would be 256  X  25 = 6400 , too high for practical purposes. Dense uniform sampling leads to accurate approximation but does not guarantee orthogonality of the basis vectors, thus introducing redundance. The size of basis vectors can be further reduced by performing kernel principal component analysis over joint basis vectors: {  X  and d p is the number of basis vectors. The t  X  th kernel principal component can be written as where d o and d p are the sizes of basis vectors for the orientation and position kernel, respectively, centered kernel matrix with [ K c ] ijst = k o ( x i , x j ) k p ( y s , y t )  X  2 P accurately using the reduced basis vectors by KPCA. Under the framework of kernel principal com-ponent analysis, our gradient kernel descriptor (Eq. 5) has the form The computational bottleneck of extracting kernel descriptors are to evaluate the kernel function k k p between pixels. Fortunately, we can compute two kernel values separately at the cost d o + d p , rather than d o d p . Our most expensive kernel descriptor, the shape kernel, takes about 4 seconds in MATLAB to compute on a typical image ( 300  X  300 resolution and 16  X  16 image patches over 8  X  8 grids). It is about 1.5 seconds for the gradient kernel descriptor, compared to about 0.4 seconds for SIFT under the same setting. A more efficient GPU-based implementation will certainly reduce the computation time for kernel descriptors such that real time applications become feasible. We compare gradient (KDES-G), color (KDES-C), and shape (KDES-S) kernel descriptors to SIFT and several other state of the art object recognition algorithms on four publicly available datasets: Scene-15, Caltech101, CIFAR10, and CIFAR10-ImageNet (a subset of ImageNet). For gradient and shape kernel descriptors and SIFT, all images are transformed into grayscale ( [0 , 1] ) and resized to be no larger than 300  X  300 pixels with preserved ratio. Image intensity or RGB values are normalized to [0 1]. We extracted all low level features with 16  X  16 image patches over dense regular grids with spacing of 8 pixels. We used publicly available dense SIFT code at http://www.cs.unc.edu/ lazeb-nik [13], which includes spatial binning, soft binning and truncation (nonlinear cutoff at 0.2), and has been demonstrated to obtain high accuracy for object recognition. For our gradient kernel de-scriptors we use the same gradient computation as used for SIFT descriptors. We also evaluate the performance of the combination of the three kernel descriptors (KDES-A) by simply concatenating the image-level features vectors.
 Instead of spatial pyramid kernels, we compute image-level features using efficient match kernels (EMK), which has been shown to produce more accurate quantization. We consider 1  X  1 , 2  X  2 and 4  X  4 pyramid sub-regions (see [1]), and perform constrained kernel singular value decomposition (CKSVD) to form image-level features, using 1,000 visual words (basis vectors in CKSVD) learned by K-means from about 100,000 image patch features. We evaluate classification performance with accuracy averaged over 10 random training/testing splits with the exception of the CIFAR10 dataset, where we report the accuracy on the test set. We have experimented both with linear SVMs and Laplacian kernel SVMs and found that Laplacian kernel SVMs over efficient match kernel features are always better than linear SVMs (see (  X  4.2)). We use Laplacian kernel SVMs in our experiments (except for the tiny image dataset CIFAR10). 4.1 Hyperparameter Selection We select kernel parameters using a subset of ImageNet. We retrieve 8 everyday categories from the ImageNet collection: apple, banana, box, coffee mug, computer keyboard, laptop, soda can and water bottle. We choose basis vectors for k o , k c , and k p from 25 , 5  X  5  X  5 and 5  X  5 uniform grids, respectively, which give sufficient approximations to the original kernels (see also Fig. 2). We optimize the dimensionality of KPCA and match kernel parameters jointly using exhaustive grid search. Our experiments suggest that the optimal parameter settings are r = 200 (dimensionality following experiments, we will keep these values fixed, even though the performance may improve if considering task-dependent hyperparameter selection. 4.2 Benchmark Comparisons Scene-15. Scene-15 is a popular scene recognition benchmark from [13] which contains 15 scene categories with 200 to 400 images in each. SIFT features have been extensively used on Scene-15. Following the common experimental setting, we train our models on 1,500 randomly selected images (100 images per category) and test on the rest. We report the averaged accuracy of SIFT, KDES-S, KDES-C, KDES-G, and KDES-A over 10 random training/test splits in Table 1. As we see, both gradient and shape kernel descriptors outperform SIFT with a margin. Gradient kernel intensity kernel descriptor has a lower accuracy, as all the images are grayscale. The combination of the three kernel descriptors further boosts the performance by about 2 percent. Another interesting finding is that Laplacian kernel SVMs are significantly better than linear SVMs, 86 . 7% . In our recognition system, the accuracy of SIFT is 82 . 2% compared to 81 . 4% in spatial pyramid match (SPM). We also tried to replace SIFT features with our gradient and shape kernel descrip-tors in SPM, and both obtained 83 . 5% accuracy, 2 percent higher than SIFT features. To our best knowledge, our gradient kernel descriptor alone outperforms the best published result 84 . 2% [27]. Figure 3: Hyperparameter selection. left : Accuracy as functions of feature dimensionality for orien-tation kernel (KDES-G) and shape kernel (KDES-S), respectively. center : Accuracy as functions of  X  and  X  s . right : Accuracy as function of  X  o and  X  b .
 Table 1: Comparisons of recognition accuracy on Scene-15: kernel descriptors and their combination vs SIFT. Caltech-101. Caltech-101 [15] consists of 9,144 images in 101 object categories and one back-ground category. The number of images per category varies from 31 to 800. Because many re-searchers have reported their results on Caltech-101, we can directly compare our algorithm to the existing ones. Following the standard experimental setting, we train classifiers on 30 images and test on no more than 50 images per category. We report our results in Table 2. We compare our kernel descriptors with recently published results obtained both by low-level feature learning algorithms, convolutional deep belief networks (CDBN), and sparse coding methods: invariant predictive sparse decomposition (IPSD) and locality-constrained linear coding. We observe that SIFT features in con-junction with efficient match kernels work well on this dataset and obtain 70 . 8% accuracy using a single patch size, which beat SPM with the same SIFT features by a large margin. Both our gradient kernel descriptor and shape kernel descriptor are superior to CDBN by a large margin.
 We have performed feature extraction with three different patch sizes: 16  X  16 , 25  X  25 and 31  X  31 and reached the same conclusions with many other researchers: multiple patch sizes (scales) can boost the performance by a few percent compared to the single patch size. Notice that both naive Bayesian nearest neighbor (NBNN) and locality-constrained linear coding should be compared to our kernel descriptors over multiple patch sizes because both of them used multiple scales to boost the performance. Using only our gradient kernel descriptor obtains 75 . 2% accuracy, higher than the results obtained by all other single feature based methods, to our best knowledge. Another finding is that the combination of three kernel descriptors outperforms any single kernel descriptor. We note that better performance has been reported with the use of more image features [6]. Our goal in this paper is to evaluate the strengths of kernel descriptors. To improve accuracy further, kernel descriptors can be combined with other types of image features.
 CIFAR-10. CIFAR-10 is a labeled subset of the 80 million tiny images dataset [25, 12]. This dataset consists of 60,000 32x32 color images in 10 categories, with 5,000 images per category as training set and 1,000 images per category as test set. Deep belief networks have been extensively investigated on this dataset [21, 22]. We extract kernel descriptors over 8  X  8 image patches per pixel. Efficient match kernels over the three spatial grids 1  X  1 , 2  X  2 , and 3  X  3 are used to generate image-level features. The resulting feature vectors have a length of (1+4+9)  X  1000 (visual words) = 14000 per kernel descriptor. Linear SVMs are trained due to the large number of training images. Table 2: Comparisons on Caltech-101. Kernel descriptors are compared to recently published re-sults. (M) indicates that features are extracted with multiple image patch sizes. GIST[20] 54.7 fine-tuning GRBM 64.8 mcRBM 68.3 KDES-S 68.2 Table 3: Comparisons on CIFAR-10. Both logistic regression and SVMs are trained over image pixels.
 Table 4: Comparisons on CIFAR10-ImageNet, subset of ImageNet using the 10 CIFAR categories. We compare our kernel descriptors to deep networks [14, 9] and several baselines in table 3. One immediate observation is that sophisticated feature extractions are significantly better than raw pixel features. Linear logistic regression and linear SVMs over raw pixels only have accuracies of 36% and 39 . 5% , respectively, over 30 percent lower than deep belief networks and our kernel descriptors. SIFT features still work well on tiny images and have an accuracy of 65 . 2% . Color kernel descriptor, KDES-C, has 53 . 9% accuracy. This result is a bit surprising since each category has a large color variation. A possible explanation is that spatial information can help a lot. To validate our intu-itions, we also evaluated the color kernel descriptor without spatial information (kernel features are extracted on 1  X  1 spatial grid), and only obtained 38 . 5% accuracy, 18 percent lower than the color kernel descriptor over pyramid spatial grids. KDES-G is slightly better than SIFT features. The shape kernel feature, KDES-S, has accuracy of 68 . 2% , and is the best single feature on this dataset. Combing the three kernel descriptors, we obtain the best performance of 76% , 5 percent higher than the most sophisticated deep network mcRBM-DBN, which model pixel mean and covariance jointly using factorized third-order Boltzmann machines.
 CIFAR-10-ImageNet. Motivated by CIFAR-10, we collect a labeled subset of ImageNet [4] by retrieving 10 categories used in ImageNet: Airplane, Automobile, Bird, Cat, Deer, Dog, Frog, Horse, Ship and Truck. The total number of images is 15,561 with more than 1,200 images per category. This dataset is very challenging due to the following facts: multiple objects can appear in one image, only a small part of objects are visible, backgrounds are cluttered, and so on. We train models on 1,000 images per class and test on 200 images per category. We report the averaged results over 10 random training/test splits in Table 4. We can X  X  finish running deep belief networks in a reasonable time since they are slow for running images of this scale. Both gradient and shape kernel descriptors achieve higher accuracy than SIFT features, which again confirms that our gradient kernel descriptor and shape kernel descriptor outperform SIFT features on high resolution images with the same category as CIFAR-10. We also ran the experiments on the downsized images, no larger than 50  X  50 with preserved ratio. We observe that the accuracy drops 4-6 percents compared to those on high resolution images. This validates that high resolution is helpful for object recognition. We have proposed a general framework, kernel descriptors , to extract low-level features from image patches. Our approach is able to turn any pixel attribute into patch-level features in a unified and principled way. Kernel descriptors are based on the insight that the inner product of orientation his-tograms is a particular match kernel over image patches. We have performed extensive comparisons and confirmed that kernel descriptors outperform both SIFT features and hierarchical feature learn-ing, where the former is the default choice for object recognition and the latter is the most popular low-level feature learning technique. To our best knowledge, we are the first to show how kernel methods can be applied for extracting low-level image features and show superior performance. This opens up many possibilities for learning low-level features with other kernel methods. Considering the huge success of kernel methods in the last twenty years, we believe that this direction is worth being pursued. In the future, we plan to investigate alternative kernels for low-level feature learning and learn pixel attributes from large image data collections such as ImageNet. [1] L. Bo and C. Sminchisescu. Efficient Match Kernel between Sets of Features for Visual Recog-[2] O. Boiman, E. Shechtman, and M. Irani. In defense of nearest-neighbor based image classifi-[3] N. Dalal and B. Triggs. Histograms of oriented gradients for human detection. In CVPR , 2005. [4] J. Deng, W. Dong, R. Socher, L. Li, K. Li, and L. Fei-fei. ImageNet: A Large-Scale Hierar-[5] P. Felzenszwalb, D. McAllester, and D. Ramanan. A discriminatively trained, multiscale, [6] P. Gehler and S. Nowozin. On feature combination for multiclass object classification. In [7] K. Grauman and T. Darrell. The pyramid match kernel: discriminative classification with sets [8] D. Haussler. Convolution kernels on discrete structures. Technical report, 1999. [9] K. Jarrett, K. Kavukcuoglu, M. Ranzato, and Y. LeCun. What is the best multi-stage architec-[10] K. Kavukcuoglu, M. Ranzato, R. Fergus, and Y. LeCun. Learning invariant features through [11] R. Kondor and T. Jebara. A kernel between sets of vectors. In ICML , 2003. [12] A. Krizhevsky. Learning multiple layers of features from tiny images. Technical report, 2009. [13] S. Lazebnik, C. Schmid, and J. Ponce. Beyond bags of features: Spatial pyramid matching for [14] H. Lee, R. Grosse, R. Ranganath, and A. Ng. Convolutional deep belief networks for scalable [15] F. Li, R. Fergus, and P. Perona. One-shot learning of object categories. IEEE PAMI , 2006. [16] D. Lowe. Distinctive image features from scale-invariant keypoints. IJCV , 60:91 X 110, 2004. [17] S. Lyu. Mercer kernels for object recognition with local features. In CVPR , 2005. [18] K. Mikolajczyk and C. Schmid. A performance evaluation of local descriptors. IEEE PAMI , [20] A. Oliva and A. Torralba. Modeling the shape of the scene: A holistic representation of the [21] M. Ranzato, Krizhevsky A., and G. Hinton. Factored 3-way restricted boltzmann machines for [22] M. Ranzato and G. Hinton. Modeling pixel means and covariances using factorized third-order [23] B. Sch  X  olkopf, A. Smola, and K. M  X  uller. Nonlinear component analysis as a kernel eigenvalue [24] S. Smale, L. Rosasco, J. Bouvrie, A. Caponnetto, and T. Poggio. Mathematics of the neural [25] A. Torralba, R. Fergus, and W. Freeman. 80 million tiny images: A large data set for nonpara-[26] J. Wang, J. Yang, K. Yu, F. Lv, T. Huang, and Y. Guo. Locality-constrained linear coding for [27] J. Wu and J. Rehg. Beyond the euclidean distance: Creating effective visual codebooks using [28] K. Yu, W. Xu, and Y. Gong. Deep learning with kernel regularization for visual recognition.
