 Research has shown that social network analysis can be a promising approach to clarify the complex interactions among participants, human users, and their associated information and knowledge as well, by quantifying potential interactive processes to an interconnected relation graph or network [Tolsdorf 1976]. As a result, it not only makes it easier to enunciate interpersonal information, but, furthermore, enables researchers to discover those indirect relationships by mining information associated to common intersections [Palla et al. 2007]. The concept can also be applied to every domain in which the interactions may occur (e.g., links between Web pages, citations between research papers), by considering customized factors and metrics [Kumar et al. 2002; Raghavan 2002]. Hence, from a perspective of knowledge sharing, it raises emerging issues about patterning collective intelligence [O X  X eilly 2007].

In distance learning, a repository identifies not only a distributed storage for LO (Learning Objects), any digital resources for educational purposes, but also a common platform for it to be shared and reused. Thanks to Web 2.0, a growing number of In-ternet resources can be selected, assigning corresponding metadata [Van Assche et al. 2003], for the use in specific learning activities. However, the situation also brings an open issue on how a huge number of LOs can be managed in an efficient manner [Koppi et al. 2005]. As a preliminary solution, CORDRA (Content Object Repository Discovery and Registration/Resolution Architecture) was proposed to build an interop-erable federation for storing and sharing SCORM (Sharable Content Object Reference Model)-compliant LOs between heterogeneous underlying repository infrastructures [Vassiliadis et al. 2003].

From the viewpoint of instructors, repositories can be regarded as knowledge bases in which useful LOs can be obtained. Instructors can reassemble LOs in specific sequences for different objectives; and meanwhile, the original organization of LOs may be changed. On the other hand, the creation of a new lecture indicates a series of new connections. In an earlier work [Lin et al. 2009], a concept named Reusability Tree was proposed to track the organization alteration of LOs in a CORDRA-based repository (i.e., the MINE registry). This work not only recorded the changes but proposed quantitative metrics (i.e., similarity and diversity functions) to represent the difference degree between the newly created LO organizations and the original ones. As for the LO discovery, several approaches, such as ontological [Gasevic et al. 2007] and semantic [Tsai et al. 2006] representations, were adopted for facilitating the search process. Some metrics, such as ranking [Ochoa and Duval 2008] and inference rules [Khierbek et al. 2008] were also applied to develop customized search services. However, as a summary, there are two major challenges that we may face. (1) Time-Consuming Process of Lecture Generation . A huge numbers of queries have to (2) Uncertain Reuse Scenario of LO . Though the alteration histories can be tracked
As a preliminary solution to the issues stated before, this article, based on a system-atic reexamination of reuse scenarios, goes further to investigate the relations between LOs from a perspective of social networks. The relations are considered as external connections (e.g., in an Activity Tree), or internal attributes (e.g., prerequisite, inher-itance, and reference) between LOs. The information is utilized to construct a social structure (i.e., LOs as nodes and relations as links) in our repository. A set of metrics inspired by PageRank with time-series factor [Bringmann et al. 2010] and Hebbian rule [Stent 1973] are proposed to calculate the interdependency and to mine the implicit information within such a structure. In addition, an interactive search method, revised from Swarm Intelligence [Chen et al. 2007] and Relevance Feedback [Rocchio 1971], is proposed to assist instructors in obtaining not only a specific LO but a path, organized by past usage experiences, related to it. For instance, a possible path  X  X ntroduction -Sorting -Hashing X  may be returned if a result, labeling with  X  X ntroduction, X  is selected where the initial query goes  X  X ata Structure + Introduction X . In short, the aim of this work is to enhance the past search scenario for LOs, and to achieve optimization of its use on the basis of its past usage experiences. Although SCORM and CORDRA have provided preliminary solutions for searching and reusing LOs, a few fundamental issues are still left unsolved. For instance, an LO must have certain relations with other LOs. That is, LOs do not exist independently; so does the LO retrieval process. Recalling the search service provided by repositories, it makes use of metrics, ranking, or recommendation to assist users in obtaining desired LOs. However, the obtained LOs were isolated. That is, one query was made only for one best-fit LO (and other independent LOs with lower priorities). If users would like to search for other related LOs, they have to start a new query and to filter out the irrelevant results. This may increase the burden for instructors when reusing LOs, and thus discourage LO sharing.

To cope with this situation, we have two major contributions. First, the concept of social network is adopted to enhance reusability and searchability in the MINE reg-istry. The LONET (Learning Object Network), as an extension of Reusability Tree, is constructed to clarify the vague reuse scenario in the past, and to summarize collabora-tive intelligence through past interactive usage experiences. Once LOs are revised and reused for other specific objectives, relations among them can be graphed and quanti-fied through their newly added interdependency. Second, as a practical contribution, an interactive search method is proposed to gather possible organization paths for lecture generation in accordance with the past usage experience in the LONET. The obtained lectures are based on an input query and can be revised upon instructors X  immediate feedback. If there are newly added connections, they will be added to the LONET for further usage.

The organization of this article is given as follows. Related issues and works will be addressed in Section 2. The metrics to be used for quantification of implicit information among LOs will be discussed in Section 3. The interactive search method for mining possible patterns will be described in Section 4. The evaluation and experiment on this work will be given in Section 5. We will conclude this work and address possible future work in Section 6. And finally, the implementation results will be demonst rated in the Appendix. Three major issues related to the research will be discussed in this section. First, the reuse scenario of LOs is introduced. Then, the strategies for mining social networks will be addressed. And, at last, the methods for information retrieval issues within social networks will be described. 2.1.1. The Reusability Tree. Each Learning Object (LO) is made for a specific instruc-tional purpose. For example, an instructor can make an LO called  X  X ashing X  as a supplemental reference for an existing LO which introduces  X  X ata Structure. X  The correlation can be established as soon as  X  X ashing X  is produced. Similarly, links are constructed for all LOs in a repository. The history, such as creation and updating, can be recorded in the learning object repository. On the other hand, a content aggregation identifies a hierarchical organization of LOs; and each LO represents an instructionally relevant unit for learning. A content aggregation may consist of a launchable (i.e., ini-tially executable) LO and several other LOs. As an extension, the concept of Reusability Tree [Lin et al. 2009] was proposed. It is conceptually similar to a version derivation tree applied to a content aggregation. It consists of nodes and links, where nodes stand for associated LOs and links represent the sequence of these LOs. A child LO thus contains properties inherited from its parent LO, plus its own additional properties. When an LO is being reused, several types of changes may be made. And the changes are captured in the Reusability Tree. The metrics, such as similarity and diversity, defined in the Reusability Tree, can represent the relative information (i.e., degree of changes) in the organization of LOs. 2.1.2. Methods for LO Retrieval and Recommendation. To facilitate LO searching, usage of techniques in Information Retrieval (IR) is necessary. IR is usually applied to specific domains for being a filter to achieve retrieval and recommendation. A method named Contextual Attention Metadata [Ochoa and Duval 2008] was proposed to rank LOs by obtaining related information, such as course context and relations between learn-ers and authors, during the LOs X  lifecycle. As an extension, time-series methods are also applied as a factor for identifying the importance of LOs in different timescales [Yen et al. 2010]. For the recommendation aspect, IR can mainly be categorized into three types: (1) user-based filtering, which classifies users based on the similarity dis-criminating factors including users X  interests or hobbies, to generate the user model [Herlocker et al. 2002]. Moreover, the system can provide LOs adaptive to specific user groups; (2) item-based filtering, wherein with an increasing number of users, the user-based filtering method exposes the problem of excessive computation time. Sarwar et al. [2001] proposed a novel concept wherein the items that catch users X  interests must have certain similarity with the ones that users are interested in. It can pro-vide more stable recommendations based on the similarity between items. However, the recommendation accuracy may be low because it does not take consideration of the difference of users X  information [Balabanovic and Shoham 1997]; (3) model-based filtering, which is a type of recommendation that focuses on providing solutions to the limitations, such as information scarcity and scalability, that may cause the provision of inaccurate results. In brief, this method adopts the advantage from the user profile, the same as the one in user-based filtering, and trains the following usage experiences to make prediction. To take a search service in the MINE registry, we generate a profile for each user and obtain feedback, like ratings, to specific items in the search result list. And then the system can try to remove and/or rerank some results [Yen et al. 2011] that users may not be interested in, to save time in selecting possible LOs. SNA (Social Network Analysis) emphasizes on mining the exchange of resources among participants ranging from individuals to organizations [Haythornthwalte 1996]. Briefly speaking, the architecture of social networks can be divided into two types, homoge-nous and heterogeneous, in accordance with their internal attributes. Graph Theory [Wellman and Berkowitz 1988] is often used to make a clear description of connections between participants within a specific network. The original resources can be traced back to the studies on human relationships [Wegener 1991] around twenty years ago. And nowadays, the composition of networks, not limited to analysis of human beings, can be constructed by integrating customized factors into original mining methodolo-gies [Bates and Peacock 1989]. To obtain expected, often implicit, information from such networks, it is necessary to take some factors defined in graph theory into consideration by using the concept of data mining for implicit information and/or patterns discov-ery [Jensen and Neville 2002]. The methods for determining the significance of nodes and links are PageRank [Langville and Meyer 2006], HITS (Hyperlink-Induced Topic Search) [Kleinberg 1999], and EigenRumor [Fujimura et al. 2005] whose return val-ues can be regarded as weights of measuring the degree of centrality [Freeman 1979]. The semantic methods [Weng et al. 2009; Wolf et al. 2009; Lin and Kao 2010] are also widely used for describing interdependency within the social structure. The semantics of a node is modeled using its surrounding labeled network structure, represented by the sequences of labels (i.e., paths) together with some statistical dependency measures associated with them. A scalable mining method [Albert and Barabashi 1999] is also applied to assist researchers in discovering and generating the possible connections. As a practical contribution, the work in Yang et al. [2010] addresses the importance of prioritization to specific interactivity such as exchanging email messages. The method to SNA, such as degree of centrality, training methodology, and SVM (Support Vector Machine), were adopted to cluster delivered email messages to specific groups, and to determine the order of email receipt in accordance with an assigned priority weight. This concept is also referred by the latest introduced service  X  X riority Inbox X  provided by Google Gmail. To make efficient use of the analysis results, in this section, we go further to discuss the methods that may be applied to discover those indirect relationships between par-ticipants within a social network. Research [Scott 1991; Wasserman and Faust 1994] indicates that the social network complies with small world theory and has a feature of heavy-tail distribution [Stanley 1967]. We put it differently to explain this phe-nomenon. That is, it is possible to identify the follow-up (i.e., path) when obtaining an expected node. In other words, how to navigate such a structure is an open issue. Gen-erally speaking, the methods to search social networks can be categorized into (1) path oriented, and (2) efficiency oriented. The first one emphasizes on discovering shortest and complete paths to connect different nodes. The second one pays more attention to improving the overall search efficiency to reduce the possible time cost. For example, Kleinberg [2000, 2001] proved that a simple greedy strategy could achieve shortest path length, in O((ln N) 2 ) , in a scalable range (i.e., hierarchically nested groups) by converting the structure into specific dimensions of the space vector. To make improve-ment, several methods [Moody et al. 2005] were proposed to search the nonstructured social networks. NeuroGrid [Joseph 2002] utilized routing tables generated by past query histories to achieve intelligent route selection. The same method was applied to a study [Rowstron and Druschel 2001] which utilized tags to replace routing tables in order to improve the completeness. As another instance, SSON (Semantic Social Overlay Networks) [Lin and Chalupsky 2008; Loser et al. 2007] made use of response frequencies to obtain nodes that might respond to the requests, and utilized the LRU (Least Recently Used) to remove the redundant connections. As an extension, ESLP (Efficient Social-Like Peer-to-Peer Networks) [Lin and Chalupsky 2008] utilized query thresholds to determine the possibility of correct response to search results, and rank them for deciding how many query messages should be sent from a specific node. In addition, researchers [Ghanea-Hercock et al. 2006; Koo et al. 2006] posed the issue on neighborhood selection by assigning different weights to nodes. The Hebbian rule was applied in the weighted network to revise the swarm intelligence algorithm for optimal neighborhood selection within a social-like peer-to-peer network [Liu et al. 2009]. Research has pointed out the trends of social network development, which mainly emphasize how implicit information, such as neighborhood selection, associated to specific nodes is obtained within a specific network environment. This concept has also been applied in the scope of distance learning for learners to obtain appropriate models to follow. As for instructors X  aspects, difficulties to lecture creation are one of the issues that discourage the popularity of distance learning. In this work, we adopt the concept of social network to construct the social structure, based on Reusability Tree of the MINE registry, of LOs to clarify usage experiences of social knowledge, and to utilize the relationship between LOs to achieve intelligent lecture generation in a systematic way. To generate the possible path of lectures, it is necessary to declare relations between LOs. We utilize the alteration histories and past experiences of lecture generation to construct a social structure, called LONET (Learning Object Network), in our reposi-tory. In Section 3.1, we will give a brief definition of LONET and address the possible correlations between LOs. In Sections 3.2 and 3.3, the construction of LONET and metrics for quantifying the correlations will be discussed as the factors to be used in lecture path generation. A concrete instance will be given in Section 3.4. earning Object Network (LONET) is derived from the concept of social network. It consists of nodes and links, where nodes represent the main participants (or LOs) and the links stand for the correlations associated to two connected nodes. It is used to clarify the relationships between LOs, especially those used for assembling lectures for specific objectives, and is constructed by the possible alterations recorded by the Reusability Tree while generating lectures. The main purpose of LONET is to meet the following needs.  X  To represent relationships effectively. The matter for composing LOs to lectures varies in accordance with different teaching objectives. That is, the relationships among
LOs are thought to be intricate. Once the organizations of the lecture change, the correlations between related LOs will change (e.g., remove old or establish new LOs).
The repeated alteration processes are difficult to trace if an isolated hierarchical structure is the only method used. Thus, how to effectively represent the relations among a huge number of LOs is the first priority.  X  To facilitate lecture generation. Search engine can be regarded as a tool to assist instructors in retrieving resources from the repository. However, a lot of queries are required to obtain the desired LOs. Fortunately, the past experiences that instructors utilized to generate lectures for specific objectives can be tracked. Therefore, we can provide an interactive search method to mine possible patterns for lecture generation from such networks. The pattern is composed of several consecutive LOs, and can be revised based on instructors X  feedback. This may assist instructors in lecture generation. In this section, an example will be addressed first to illustrate the shift of structure from Reusability Tree (past experiences) to LONET (social structure). Following this example, we will go further to give a general expression to formulize the constructed LONET.
 3.2.1. From Reusability Tree to LONET. As mentioned before, past usage experiences are necessary for constructing the LONET. A simple example from the MINE registry is shown in Figure 1(a). Once a user sends a query, the system will return results in the form of a tree-based structure that represents the relations, similarity, and diversity between LOs from a macro point of view. Hundreds of such results will be shown to users for further usage 1 , but it also takes time for filtering out irrelevant ones. Considering different compositions of the activity tree in LOs, they can be taken as ways for generating specific objectives. Thus, to make an improvement, we take each node activity tree as an independent LO by giving corresponding metadata, and use a directed graph to describe the correlations as shown in Figure 1(b). In this situation, LOs not connected originally can be connected in accordance with the same objectives. This practice may strengthen the degree of binding between LOs, and may achieve a continuous process of LOs discovery that can assist instructors in lecture generation. In this figure, the elements for conversion from Reusability Tree to LONET are shown: the box is a subjective node; the circle is a common node; and the triangle is indicating a reference node, also known as the resource that can support the objectives, referred by specific LOs in LONET. The subjective node is often used to describe a specific topic, and the common node is the node that has actual learning content. 3.2.2. Definition of LONET. With the relations from the alteration history inherited from the Reusability Tree, the LONET is defined as a weighted digraph expressed by where V ={ v 1 ,v 2 ,...,v n } represents the set of nodes (i.e., LOs) used for a specific lecture generation, E = { e ij / if correlation exists between between two nodes; and the element w ij belongs to W and stands for the weight (or strength) of the links between vertex v i and vertex v j . Its value, ranging from decides the direction between v i and v j .If w ij is positive, the direction is from v and on the contrary, is from v j to v i . For the case of 0, it represents no direct correlation between LOs; that is, other nodes will be needed to make the connection. The value of w ij will be determined by the link(s) connecting v i and v (or interdependency) that forms the link(s) between nodes can be categorized into four major types shown as follows.  X  Prerequisite Correlation. This relation is a mandatory dependency. That is, some LOs have to be utilized before accessing the LO with perquisite attributes. If not, it will be considered as an invalid access. For instance, the LO  X  X inked List X  shalbe taught before LO  X  X ree X  while performing a lecture  X  X ata Structure. X   X  Inheritance Correlation. This relation is a weak dependency. That is, it is optional. It indicates a specific concept, usually a core concept that can be applied to other LOs for further usage. For instance, the LO introducing  X  X orting X  is related to the LO introducing  X  X orting in Tree. X   X  Reference Correlation. This relation does not possess dependency, that is, it can exist independently. It is the same as an inheritance relation as an optional item.
For example, it can be regarded as LOs that contain several videos or figures for describing the LO introduced as  X  X ree. X   X  Peer Correlation. This relation establishes through minor modification of specific
LOs. It can be regarded as connections among similar nodes within the networks because of their slight differences from each other. The difference between them can be calculated through a similarity coefficient [Cost and Salzberg 1993]. For example, several LOs might have been generated by different instructors for introducing the concept  X  X orting. X  LONET can be constructed in accordance with these correlations between LOs. Gener-ally speaking, nearly all of the information pertaining to correlations can be obtained from the past usage experiences of lecture generation. However, it is still insufficient to determine the  X  X rerequisite Correlation X . For instance, there may exist lots of possi-bility if there is a direction from v i to v j . Thus, in LONET construction, the LOM-based metadata is adopted to determine the predefined correlation (i.e., prerequisite), and the Reusability Tree is used to track for others (i.e., inheritance, reference, and peer).
To quantify the weight of links, two major factors (correlation type and usage fre-quency) have been taken into consideration. The first is the correlation properties of LOs and the second is the actual frequency of usages to specific links. Through require-ments, w ij can be quantified by where C ( e ij ) ={ C 1 | C 2 } , Here C C
For correlation type C(e ij ) , it can be categorized into two (i.e., C with its necessary independence. For instance, an LO with mandatory correlation indi-cates an irremovable connection, and must comply with the direction in accessing LOs. Therefore, the LO shall have a higher weight than others. Thus, the correlation belongs to  X  X rerequisite X  and  X  X o Relation X  is categorized in C 1 site X  equals 1 or  X  1, and 0 for  X  X o Relation X . For the rest (i.e., inheritance, reference, and peer), variable F(e ij ) is used to assign weights. Its range will be located between  X  1 to 1 but not equal both of them. In the past experiences to lecture generation, lots of correlations can be used to connect the LOs. For instance, the LO  X  X orting in Tree X  is inherited from LO  X  X orting X ; and the LO  X  X orting in Tree X  can also be a reference to introduce its parent LO. In other words, several links can exist between nodes in LONET. The variable m indicates the number of links between connected nodes. After confirming the types of correlation, the actual frequency of usage will be addressed.
The frequency of usage in LONET shall be interpreted as the patterns, from v v , adopted to generate lectures. Considering the revised Hebbian rule [Stent 1973], the weight of links shall be raised if they are triggered in accordance with existing patterns. On the other hand, it shall be reduced if the pattern is changed (i.e., only one of them is triggered). This approach is applied dynamically to adjust the weight of the link and to highlight the patterns often used. Thus, in Eq. (2), the additional weight, considering frequency of usage, is added to w ij by H coe where  X  ={ z /  X  1  X  z  X  1 , z = 0 } .

The link between v i and v j will be converted to vector with the frequency of usage. In order to avoid an extreme value, the vector projected onto a virtual coordinate space to obtain an additional increment or reduction to w ij under normalization. That is, the obtained value will be relative to every other node connected to the datum node. An equilibrium coefficient with the directional relation (or usage direction) between nodes. Its value will be within  X  1 and 1, but will not be equal to 0 since the existing pattern identifies that there is at least one link between nodes. In LONET, the value of H the credibility of specific patterns. The fundamental issue of a social network is how nodes within a specific network can be described and quantified, to produce the corresponding positional importance. In this section, the metrics to mine the implicit information, as factors to achieve lecture generation in LONET, are addressed. The role that a node takes can be quantified through several indexes described in this section. 3.3.1. Degree Centrality. The degree centrality identifies the links, incoming and outgoing, which a specific node v i may have within LONET. It can be quantified through Eq. (4). Its value reflects the importance of nodes within LONET. That is, it explains why a node is needed by other nodes or needs other nodes to support its existence. From the perspective of lecture generation, the path can be produced through the connection of links which identify the possible sequence of construction of specific objectives associated to nodes. Here where InDeg(v i ) = 0or OutDeg(v i ) = 0.

For a single node v i , its degree centrality will be the average of every incoming link node v i will not be 0 since every node was generated for specific objective(s), so that it must have at least one incoming or outgoing link. The metrics for obtaining the degree of incoming and outgoing links will be discussed as follows.

In LONET, the number of incoming links indicates the popularity (or degree of attention) a node has. From the perspective of lecture generation, the node with many incoming links can be regarded as a component often used for specific objectives. The PageRank algorithm is adopted as the basis for quantifying the incoming links. In addition, the time-series issue [Wassermann and Faust 1994] is also a factor that highlights the importance during different timescales. The formula can be simplified as in Eq. (5). We have where R in (Ts, v ji ) represents the incoming links to node v The least measurement unit for Ts is assumed to be one day, but can be adjusted by an administrator or instructor. The variable  X  (default value is 1) is used to balance the final outcome value if the extreme value happens. The variable T(v ditional weight that shall be assigned to incoming links to node v Tilt-Time Window Model [Chen et al. 2002] and Time-Fading Model [Chang and Lee 2003] to calculate the weight for a specific timescale by Eq. (6).

The T(v ij ) l indicates the weight of every other node v D .And n is the number of units with which we separate the total length of time for obtaining different weights of links from v j to v i . For instance, the weight of v will be T(v 12 ) 1 , and the weight of v 12 in D 2 will be T(v
Similarly, for nodes used to generate lectures, they are bound to have outgoing links in accordance with the definition in the IMS Simple Sequencing [Yang et al. 2004]. The exception can only happen in the starting node, which may have lots of outgoing links and no incoming link. For the end nodes, the types of missing links are opposite. The outgoing link, from v i to v j , can be calculated through Eq. (7).
 The major difference between Eqs. (6) and (7) is the direction of links, and the weighted values for the links in different timescales. 3.3.2. Eigenvalue. Eigenvalue is used to find out the contributing source within LONET by assigning relative values to each network participant. It is originated from the eigenvector. From another viewpoint, a node with high eigenvalue must have lots of incoming links or has been linked by nodes with higher InDegree (or authority). This value can be used to rank the nodes within LONET by
In Eq. (8), we only consider the direct interaction between two connected nodes when calculating the eigenvalue. That is, there is no existing intermediate node. With this definition, the eigenvalue of node v i will be the sum of part of the InDegree value, which depends on the percentage of w ij in |w ij /, from every connected node v this study, the eigenvalue can help to find the entry node when receiving the query, since a node with a high eigenvalue is considered to have more links and can be the basis for deciding a search direction.
 3.3.3. Betweenness Centrality. In general, there shall be one shortest path for connecting two nodes within LONET. The betweenness centrality is used to quantify how many times a specific node appears in the shortest paths connecting all other nodes. A node with high betweenness centrality could be an important node within the network, and can be regarded as a bridge that connects two clusters that have no direct link. If this node is removed from the network, it may cause fracture. The value can be obtained by where  X  lj indicates the sum of all pairs of shortest distances going from v  X  lj (v i ) represents the sum of shortest distances from v equal to | R in + R out | , indicates the sum of links that v lengths, we utilize | R | 2 as a denominator for normalization. The size of BetCent(v will affect the composition of lecture path generation. This situation often occurs in arrangement of nodes used to describe the same subject. For instance, it is how the sequence between  X  X inked List X  and  X  X ueue X  can be arranged when introducing the  X  X ata Structure. X  3.3.4. Closeness Centrality. The nodes are connected through links that can also be quantified to indicate the distance between nodes. The closeness centrality indicates a node that has the shortest path to access every other node within the network. In LONET, only the nodes in a specific area, close to a target cluster, will be calculated to obtain their closeness centrality. It will lead to a relative value for selecting alternative nodes when instructors make changes to the original lecture generation. The closeness centrality of a node can be obtained through where d ij represents the distance between v i and v j , and can be formed by
The closeness centrality of a node is defined by the inverse of the average length of the shortest paths to/from all the other nodes in LONET. The value will be taken as the first visit neighborhood to reproduce the following path if the changes have been made. For instance, an instructor would like to change the original sequence, from  X  X inked List X  to  X  X ueue, X  when generating a lecture introducing  X  X ata Structure. X  In this situation, every node connected by  X  X ueue X  shall be rearranged (or the path of  X  X inked List X  will be removed). The detailed algorithm to achieve this goal will be discussed in Section 4.3. We utilize five existing nodes, v 1 ( LO 1 ) ,v 2 ( LO 2 ), form a small group in LONET as an example to describe how the proposed metrics work. The relations between them are shown in Figure 2. We take v incoming link of v 1 , R in ( v 31 ), represents the partial link from v link of v 1 , R out ( v 12 ), is the link from v 1 to v 2
First, we assume that the age, the existing timescale, of v per month, and 12.5 days, say 102.5 days in total. The incoming/outgoing links of v are 55/30 times in the first three months, 25/20 times in following twelve days, and 20/15 times in the last half-day. And the sum of outgoing links from v this situation, we can separate the timescale into three parts and the weight of each incoming/outgoing timescale can be obtained through Eq. (6). The weights of the rest of the timescales, 0.117 and 0.004 for the second and the third timescale, respectively, can be obtained through the same equation. Thus, we can calculate InDegree and OutDegree of v 1 . The detailed process, with default value of variable  X  , is given as follows.
 InDeg ( v 1 ) =  X  OutDeg ( v 1 ) =  X 
After obtaining the degree centrality, including InDegree and OutDegree, we go further to calculate the eigenvalue of v 1 . The concept of eigenvalue is similar to the ranking algorithm used in search engines. The authority of a source node will affect the value. Thus, to start to calculate the eigenvalue of v 1 , the InDegree of v We assume the nodes, v 3 , v 5 ,and v 6 form another group as well in LONET, and the relations between them are shown in Figure 2.

We do the same calculation to obtain the InDegree of v 3 . The age of v and 5 days while the age of v 6 is 15.5 days. The incoming links from v the first month and 10 in the following 5 days, and the incoming links from v are 60 in the first half-month (15 days) and 35 in the following 0.5 days. Through the definition, we can calculate the weight of each timescale through Eq. (6) and obtain that T(v 53 ) 1 is 0.857, T(v 53 ) 2 is 0.143, and T(v 63 utilize the Eq. (5) again to obtain the InDegree of v 3 as follows.
 The value of InDegree of v 3 will be divided into two according to the portion of its outgoing links. Thus, through Eq. (8), we can obtain the one that will be added to v Then, we consider the betweenness centrality and closeness centrality of v dance with the definition of Eq. (9), there are two kinds of links that connect v One goes directly between v 2 and v 3 , while another one goes via v can obtain  X  23 ( v 1 ) equals to 165, the sum of R out ( the sum of R out ( v 32 ). Then, the value of betweenness centrality of
And, lastly, the closeness centrality depends on the distance between connected nodes. In distance learning, the optimal way to calculate the distance between objects is to adopt the corresponding metadata elements. We assume the metadata descriptions of v 1 and v 2 are as shown in Table I.

We defined each matched term in metadata as equaling  X 1 X  [Wu et al. 2008]. Thus, the similarity within category  X  X eneral X  between v 1 and v With the same process, we can also obtain the similarity in the of the rest categories of metadata. They will be  X 0 X ,  X 0 X ,  X 1 X ,  X 0.567 X ,  X 0 X ,  X 0 X ,  X 0.556 X , and  X 0 X , respectively. Thus the distance between v 1 and v 2 shall be and the closeness centrality of v 1 will be After the calculation, the results of attributes of each participant node within LONET can be applied to the search process addressed in the following section. In this section, issues related to lecture generation in accordance with LONET and attributes of its participating nodes will be discussed. Three parts are involved in this process. First, the search criteria that assist instructors in obtaining possible LOs will be defined. The possible lecture paths generated by analyzing the input query will then be addressed. And finally, the algorithm that will reorganize the path by dynamic changes from instructors will be described. The elements of the IEEE LOM have been used to assist users in obtaining LOs in our repository. Based on the elements of the IEEE LOM, the search criteria can be classified into the following groups: precise criteria, incremental criteria, precedence criteria, time/duration criteria, and single/multiple-choice criteria, which have already been addressed in Lin et al. [2009]. In these classifications, five selected elements [Rivera et al. 2004] have been adopted to strengthen the educational usage. There are two items, keyword and coverage, under the general category, and three others,  X  X earningResourceType, X   X  X ifficulty, X  and  X  X ypicalLearningTime, X  under the educa-tional category. A lecture path can be considered as the possible recomposition of LOs used to gener-ate lectures for specific objectives. This concept is used to reduce time and effort that instructors may spend in generating specific lectures. In our past experiences of search-ing for LOs, search results consists of lots of isolated LOs. In this article, in addition to providing LOs and their related recommendations, structures (or templates) with specific sequences are also generated. Instructors can choose to follow or make further revision of the structures. The revision will be taken as a new composition of a lecture. This may simplify the tedious lecture creation process encountered in the past through collaborative intelligence from users.

The lecture path is produced according to possible sequences within LONET. To achieve this, the first step is to analyze the queries from instructors, and to produce the entry nodes. The entry nodes here can be considered as a list of LOs returned by searching services from repository. Each of the nodes is considered as a center in a lecture web, and can be used to determine the direction to lecture path generation in accordance with its implicit properties. This iterative retrieval process will be kept in a temporary array to achieve a continuous path. Inspired by the swarm intelligence algorithm, which is used to discover the shortest path, we developed an algorithm to obtain the nearest-neighbor nodes when determining the entry nodes.

As for lecture generation, the shortest path is not the primary means to assemble the lecture, but rather the frequency of usage from users. The higher frequency of usage represents higher credibility, and can also be served as the countable reference for lecture path generation. Thus, common user experiences are used. The generation of a lecture path can be categorized into the following steps.  X  Step 1. In the beginning, the attribute array Aq[r w ][s ing the query from the user in accordance with its corresponding metadata descrip-tion. Then, to return the top-N items, V ent [v m ] , the matched objects in LONET will be ranked, from high to low, on the basis of their relative similarity. It could refer to the algorithm shown in Table II.  X  Step 2. The swarm algorithm will be revised to be the basis for visiting every node that has connections with node v m in V ent . The nodes with a shorter path, with less nodes between v m and v ( m , j ) , and a higher OutDegree value, will be the priority obtained. The main reason is that the node with a higher OutDegree identifies that more nodes can be accessed. In other words, the node offers more choices for the system to select. Thus, we set up a rule that if the visited node v
OutDegree value, a shorter distance than v m will replace the original one. And a new entry node array V ent  X  [ v m  X  X  will be generated. The process is shown in Table III.  X  Step 3. The returned entry array, V ent  X  [ v m  X  X , will be converted to a two-dimensional vector space P cdt [v x ][v y ] , where v x represents the entry nodes from v the possible path to v x as shown in Figure 3. The circle with light color represents the possible position of an entry node where the others are default set to null for expansion. Three possible positions are formed in the path generation process. In the left-hand side of Figure 3, the position identifies a start node regarded as the first object of a lecture (e.g., introduction). The middle position stands for the middle node that may achieve two-way expansions or be recognized as a middle object of a lecture. The right-hand side represents the end node opposite from the start node (e.g., conclusion). The algorithm shown in Table IV was applied.  X  Step 4. As shown in Figure 3, nodes used to generate the lecture path are supposed to have correlations with a specific sequence. But it is difficult for us to know if the entry node, the first node to generate the lecture, can be determined by a user X  X  query.
What we can do is to obtain an appropriate entry node, with a high OutDegree, in accordance with the user X  X  query. As for the entry node, it may be located at any order in the path. Hence, the proposed metrics, the weight of the edge between two con-nected nodes and eigenValue, are utilized to determine the possible direction of the path for those correlations that do not belong to  X  X rerequisite. X  The possible direc-tions can be tracked backward or forward. As stated in Section 3.2.2, the correlations can be categorized into four types, and there is only one mandatory interdependency (the other three are optional). That is, the correlations except  X  X rerequisite X  will not affect the generation rule of the lecture path. Thus, we only consider the edge with the prerequisite correlation. If such a kind of correlation exists, it will be added to the path without calculating the eigenValue, and the following direction will be determined. The detailed algorithm is listed in Table V.  X  Step 5. To avoid duplications (i.e., two same nodes appear in a same path), the mechanism named  X  X uplicated Nodes Removal X  has been utilized to make cross-comparison to all the nodes within P cdt [v x ][v y ] . If duplication exists, the node being added later will be removed directly, and the process will go back to the previous one to look for alternative nodes. If there is no existence of a duplicated node, the produced candidate array P cdt [v x ][v y ] will be converted to a list of single paths that will be the result responding to a user X  X  query. Then decisions can be made by users to make further modifications. The detailed algorithm is shown in Table VI. Once a user has received possible lecture paths from our repository, he/she can make further modifications. That is, the paths offered by the generation tool are regarded as templates for reference to generate specific lectures, not the final paths that must be followed. We make use of the metrics, betweenness centrality and closeness centrality, to develop a relevance feedback algorithm to achieve this purpose, which is shown in Table VII.

The processes to path modification can be mainly categorized into two aspects. The first is to add nodes into a path, while the second is to remove nodes from the can-didate path. In the adding process, we will first calculate the possible position of the nodes, which may be added, within the selected path through comparison of similarity constructed correlations (i.e., e a ( j + 1) , e a ( j  X  1) to the adding process, the removal process will be more complicated. When the system receives the instruction to remove a specific node v r , it will check which node (i.e., v shall be removed. Then, the system will calculate the nodes (possible alternative nodes) that have a higher closeness centrality to v ( y , j ) , and place them in a temporary set V X  . After that, the correlations associated with v r will be determined. If the correlation does not belong to  X  X rerequisite, X  the corresponding node v moved directly. Otherwise, if correlation belongs to  X  X rerequisite, X  two of them will be removed together. And the alternative nodes will be selected again through the same process to reorganize the revised path. The algorithms seem complicated. However, in the following section, we will demonstrate the feasibility. And an experimental system is illustrated in the Appendix.
 Our repository system, the MINE registry, has stored around 22,000 LOs in the past few years. Most of the learning objects were collected from open-access training programs, such as Open University, UK and ADL (Advanced Distributed Learning), USA, and from the local universities. The LOs in the MINE registry can mainly be categorized into four major types: Photoshop, Algorithms and Data Structure, Computer Science, and others; each containing about 6000, 9000, 5000, and 2500 LOs, respectively. And these are the nodes we used to construct LONET. To achieve lecture path generation, the fundamental issue is to determine the entry nodes in accordance with queries. In this situation, the performance of the search engine, especially the retrieved items and the ranked results, becomes important. Two experiments were conducted to obtain the performance of our proposed search service. In the beginning, the TREC [Buckley and Voorhees 2004] was adopted to evaluate the LOs stored in the MINE registry without further data processing. The metrics [Jarvelin and Kekalainen 2000] for estimating the performance are shown as follows, where P represents the precision value and R indicates the recall value. The nIAP , non-Interpolated Precision, was used to calculate the precision of a retrieved LO within a ranked result. In nIAP , the variable r j is the sum of queries sent to the system, the LO j (i) is the order of retrieved LO in a list, and the i is the order of query. To perform nIAP , the cut-off, number of documents in a result list, needs to be calculated. In this research, it was set to 10 by default. The results can be found in Table VIII. In Table VIII, two kinds of data are examined. The raw data represents the results of common LOs in the MINE registry while the noninterpolated data is for the ranked results. Through the preceding results, the precision-recall curve for both raw data and non-interpolated data are shown in Figure 4.

In addition, to enhance the searchability for specific categories in the MINE registry, the k-nearest method was adopted to make classification of the LOs in accordance with the corresponding metadata. As stated, three classifications, Photoshop, Algorithms and Data Structure, and Computer Science, were used in precision-recall evaluation. In this experiment, three queries, based on predefined search criteria (keyword as example), were used to perform the experiments. The first query (Q related LOs from the major type  X  X hotoshop X  with a query term  X  X hotoshop. X  The second query (Q 2 ) is for the major type  X  X lgorithms and Data Structure X  with term  X  X lgorithm + intro X . The third query (Q 3 ) is with term  X  X s major type  X  X omputer Science X . The corresponding results to these queries are shown in Table IX.

According to the results, it is worth mentioning that the precision and recall value reaches, in average, 90% and 94%, respectively, which reveales that our search mech-anism can assist users in obtaining related learning objects in an efficient way. And this result also shows that the entry nodes retrieved by our search service have certain creditability for being the basis of generated lecture paths.

As for lecture path review, another experiment on the accuracy evaluation of selected nodes in the generation process of the lecture path was conducted based on the same method. The selected nodes to generate the lecture path were utilized to compare with the ones we obtained in candidate array. This relation is used to generate a precision-recall curve. We involved two P-R curves in the previous experiment as the based line, which will be compared with the one generated according to the proposed interactive search mechanism. In Figure 5, the curved with circled dots on it is the result while using interactive search. The linear dashed line going across these three curves is the average trend. It is obvious that there is no prominent part in this curve through comparison with the baselines. But, by and large, the proposed search method can reach average accuracy. Another experiment was conducted to evaluate the usability of the proposed interactive search process. In this experiment, we focus on the implicit feedback from users. We collect the usage data from 25 instructors that includes 10 lecturers and 15 teacher assistants. Three major factors were collected while accessing the search service. The first one is the  X  X umber of visits per page X  to the item listed in the result list. In our search engine, the returned items within a result page are 10. The second one is the  X  X umber of selections X  to the returned items. The third one is the  X  X umber of query revisions X  that an instructor will send to obtain an expected item. The results are shown in Table X.

The results reveal that the interactive search can reduce the number of query revi-sions to at least 1.08, in average ((5 . 71  X  11 . 09) / 5), comparing with the basic search that follows the general core of the search engine. Also, the interactive search can raise the actual use of returned items within the result list because the average selection is up to 0.2 ((11 . 19  X  10 . 19) / 5) in average. Through this experiment, we can also observe that a preferable number of keywords, in this case, shall be in the range from 2 to 3.
In addition, the number of nodes in a lecture path is also recorded. The selected items in the result list are utilized to generate the initial path, and we collect the revision scenario of the generated paths. The length of a lecture path is, by default, set to be between 3 and 7. In this experiment, 200 paths, equal to 200 selected LOs, were utilized to reach the results. There are 40 in length 3, 50 in length 4, 35 in length 5, 35 in length 6, and 40 in length 7. We can observe that the preferable length of generated path is around 6, by rounding off the numbers in this experiment. The detailed results can be found in Table XI.
 Figure 6 shows a concrete example for the lecture path generation in accordance with query Q 2 . In this example, we only list one part, the  X  X lgorithms and Data Structure cluster X , of the overall LONET. With the query, the entry node  X 1 X  can be obtained through similarity calculation. Then, we look for the neighbor nodes associated to node  X 1. X  Through this figure, it is obvious that node  X 2 X  has the highest OutDegree through the number of outgoing links to node  X 1. X  Thus, the direction, compared to node  X 1 X , is headed to the left. Then, we go further to check the eigenValue and the correlations between following candidate nodes in accordance with the processes addressed in Section 4.2. A preliminary path to generate a lecture corresponding to the query Q is constructed through the interactive iterative search process. Through the query, the generated path has 11 nodes, and contains three different kinds of attributes. That is, there are four subjective nodes (blue color), one reference node (gray color), and six common nodes (purple color). The detailed definition has been given in Section 3.2.1. We only put emphasis on the common nodes. So the lecture path corresponding to the input query Q 2 shall be  X 1  X  3  X  5  X  7  X  9  X  11 X . The generation process will be ended when the next obtained common nodes have no direct usage history. The issues to learning object reuse have been widely discussed in the scope of distance learning literature. Although a simple approach to realize reusability relies on finding learning objects in a repository, the generation of lecture paths based on user experi-ences could lead to another dimension of reusability. In this article, we have presented an integrated approach to utilize user practical experiences in using a Reusability Tree, and proposed an associated searching mechanism. Based on the modification of LOs in a repository, a network structure among LOs is constructed. The structure is then used in the automatic generation of lecture paths.

The major contributions of this article can be summarized as follows. First, based on concepts from a social network, we proposed LONET (Learning Object Network). The extra weights are considered to highlight the commonly used links among LOs based on the revised Hebbian rule. Then, inspired by the swarm intelligence algorithm, two algorithms were proposed and developed to generate candidate paths and allow users to reorganize preference paths. By using the prerequisite relation among LOs, as well as the attributes from these LOs, candidate paths can be generated. The generated paths are templates which can be reorganized by the users themselves, and can be stored back to the repository for further reference and reuse. The implemented system has demonstrated high usability and user satisfaction. We believe that the proposed mechanism can make LOs in a repository reach high reusability, by providing an automatic mechanism to reduce the load of lecture creation.

However, there are some limitations. First, metadata of LOs are required to be carefully specified by the creators. With less precise metadata, the system returns less accurate results. Second, due to the limitation of user experiences, only a limited prototype was demonstrated in this study.

In the future, in addition to solving the preceding limitations, an enhanced mech-anism, based on instructional objectives, for lecture path generation is considered in a progressive way. Although educational theories tell us how lectures are designed to fit instructional purposes, a quantitative approach to measure effectiveness in the generation of learning activities is still difficult. We will try to give explicit descrip-tion to LONET, and/or its subnetwork, to achieve specific instructional purposes, and continuously provide solutions to the challenges mentioned before.
 In this appendix, a concrete example is addressed to give a demonstration in access-ing our repository, known as the MINE registry. Most learning objects stored in our repository were collected from online training programs, such as Open University and MIT OpenCourseWare, and have been reused for generating lectures corresponding to specific topics. Here, we utilize learning objects in the major type  X  X hotoshop X  for demonstrating an example. We focus on the search service that instructors may con-front and show the corresponding system interfaces. Interested readers are welcome to visit our official Web site at http://www.mine.tku.edu.tw/ for more detailed information.
The elements described in LOM-based metadata are adopted as the basis of search criteria. In this example, we make a query by using a combination of keywords,  X  X hotoshop + intro + example. X 
The results are ranked in accordance with the ranking value  X  Ref() , X  and the simi-larity and diversity that assist instructors in realizing the degree of derivation are also shown next to each result.
 Here we assume that the instructor selects the first result  X  X hotoshop Competency Showcase. X  The detailed information includes the metadata description, its original content, and the possible lecture path for the related objective.

Once the instructor clicks the  X  X ecture Path X  button in the upper menu, the possible composition lecture path is generated. The instructor can take this as a template, and make further modification by clicking the  X  X ore X  button.

