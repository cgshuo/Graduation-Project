 Corresponding Author: cstcfu@comp.polyu.edu.hk SB-Tree is a binary tree data structure proposed to represent time series according to the importance of data points. Its use in stock data management is distinguished by preserving the critical data points X  attribute values, retrieving time series data according to the importance of data points and facilitating multi-resolution time series retrieval. As new stock data are available continuously, an effective updating mechanism for SB-Tree is needed. In this paper, a study of different updating approaches is reported. Three families of updating methods are proposed. They are periodic rebuild, batch update and point-by-point update. Their efficiency, effectiveness and characteristics are compared and reported. E.1 [ Data Structures ]: trees.
 Keywords: Time series representation, Binary tree, Incremental data delivery, Multi-resolution visualization, Time series data management. Time series data can be easily obtained from scientific and financial applications. The characteristics of time series data include large in data size and high dimensionality. Indeed, a large set of time series data is from the stock market. Stock time series has its own characteristics and is typically characterized by a few critical points and multi-resolution consideration is always necessary for long-term and short-term analyses. It is always updated frequently and continuously. In addition, technical analysis is usually used to identify patterns of market behavior, which have high probability to repeat themselves. These patterns are similar in the overall shape but with different amplitudes and/or durations. In view of the need to manipulate stock time series data effectively and efficiently, a stock time series representation scheme called specialized binary tree (SB-Tree) is proposed in [1]. As new stock data are available continuously, an effective updating mechanism for SB-Tree is needed. In this paper, a study of different updating approaches is reported. Intuitively, it may be more efficient to accumulate a few data points and update them in batch instead of appending one after another. The idea here is to materialize the original SB-Tree and consider the newly arrived data points as a new tree. Therefore, the two segments of the time series can be joined together by adding the new tree built by a batch of new data points as a sub-tree to the original materialized SB-Tree. In STU, sub-trees are only appended to the rightmost part of the original SB-Tree without changing its structure. As a result, the tree will be biased to the right and retrieving the most important PIP X  X  might have problems. For this reason, rebuilding the whole SB-Tree should be applied after adding certain amount of new data points to eliminate the derivation between the sub-tree updating and the exact building of the tree. We term this approach sub-tree update rebuild (STUR). Although rebuilding the whole SB-Tree periodically could reduce the time of the updating process, the structure of the SB-Tree cannot be guaranteed after each update process. Moreover, the time consumed to rebuild the whole tree may be very long since its processing time increases exponentially as the number of points increases. In this subsection, two point-by-point updating methods are proposed and they are based on the determination of whether there is any change of the PIPs identified after adding a new data point. If the same PIPs are identified, it shows that there is no change in this iteration and the same checking can be carried out along the right-hand-side of the SB-Tree. It is because the new data point is appended to the rightmost of the time series, the potentially affected segment is only located on the right-hand side. In other words, if there is a change of the PIP at the root node, it will be the same as creating a brand new SB-Tree. On the other hand, if there is no change on the leaf nodes of the rightmost path, the new data point is simply added to the right-hand-side of the rightmost leaf node. Based on such an idea/checking, a guaranteed updating approach (GUA) and an approximate updating approach (AUA) are proposed. GUA can guarantee the preservation of the SB-Tree structure and inevitably it cannot be very efficient. AUA is proposed to speed up GUA by preserving the SB-Tree structure in a best effort manner. The performance of different updating approaches was evaluated in terms of precision and speed. Time series with 2500 data points captured from the past ten years of Hong Kong Hang Seng Index (HSI) was used. The size of the sub-tree is set to 10 for batch updating. Fig.2 shows the average precision and processing time of updating a data point for the process of updating the time series from 10 data points to 2500 data points using different updating methods. STU would update a point within the shortest time since it could add a number of points at a time. However, the advantage of STU could not be preserved when rebuild mechanism was introduced, i.e. STUR. It is because large am ount of time will be consumed by rebuilding the whole tree. For the point-by-point updating methods, the performance of AUA is satisfactory and only 0.016 second was required to update a point. 
