 Video recommendation has become an integral part of today X  X  online video ser-vices, such as those provided by YouTube and Netflix. Good recommendation not only increases user engagement, but also improves user loyalty. Although the problem of recommending videos on the basis of users X  viewing history has been well studied, it is still challenging to recommend videos for those users with little or no viewing history. In the literature, this is known as the data sparsity or cold start problem 1 . Common recommendation strategies can be categorized into three types: collaborative filtering (CF), content-based filtering (CBF), and hybrid strategies combining CF and CBF.
 CF [ 19 ], based on a user X  X  preference and behaviors of other users with sim-ilar preferences, can accurately recommend videos of interest given sufficient historical records. It is therefore widely used in online video systems. However, CBF [ 13 ] is based on clustering items with similar descriptions and matching them to users X  current selection. This strategy can exploit various advanced information retrieval techniques. However, a major weakness of the strategy is over-specification (keep on recommending items of the same type or with simi-lar descriptions). The hybrid system combines the strengths of CF and CBF to overcome the cold-start and over-specification problems, however, its advantage over the other two strategies has so far been marginal [ 26 ].
 An alternative strategy for overcoming the cold-start problem is to use social information [ 20 ]. By exploiting online social networks, videos viewed by a user X  X  friends can be used for recommendation. Although this strategy is quite promis-ing, it is not always effective because social information could be scarce for some users. In this study, instead of exploiting social information associated only with friends, we used social-group-based information for video recommendation. Our collaborator (Tencent Inc.) runs an online platform that provides multiple ser-vices, including online games, online videos, and instant messaging (QQ), and facilitates the formation of QQ groups by QQ users. QQ groups allow users to easily communicate within a small circle of typically 50 to 100 users, sharing common interests; for example, there are classmate groups, colleague groups, and interest groups of various types. We find that group affiliation is quite prevalent, and a user is typically affiliated with multiple groups. If we assume that a video viewed by a group mate is of potential interest, then QQ groups can provide con-siderably more candidate videos for recommendation compared with the number of candidate videos obtained by considering only the circle of friends. Although QQ groups substantially increase the pool of candidate videos avail-able for recommendation, the relevance of these videos depends strongly on the type of group the videos originate from. We propose an algorithm for ranking candidate videos from different groups and identifying the top R videos for rec-ommendation 2 . This is done in two steps. First, videos from a single group are ranked. If this is the only group the user is affiliated with, then this ranking pro-vides the order for recommendation. Otherwise, the ranked videos from multiple groups are (weighted) rank aggregated to obtain the final order for recommenda-tion, where the weight of each group is learned by a supervised learning method based on several calculated group features. sity because both these metrics are crucial to user satisfaction. To the best of our knowledgement, this is the first study to develop a video recommendation method based on different group affiliations and merely implicit feedback data and the method was tested in an online video system. Our contributions are summarized as follows.  X  We determined and analyzed the difference between the number of candidate videos obtained from social groups and that acquired from only a friend circle.  X  We proposed a video recommendation method based on social group infor-mation; the method can rank candidate videos from a single group as well as multiple groups that a user is affiliated with.  X  We evaluated the proposed social-group-based video recommendation algo-rithm by implementing it on the Tencent video system, and showed that it improves both click-through rate and video diversity.
 in Sect. 2 for identifying research gaps. We then describe (in Sect. 3 ) the studied system and demonstrate how the social-group-based approach can consider-ably increase the number of candidate videos, as the motivation of the social-group-based strategy. The ranking methodology and algorithms are detailed in Sect. 4 . In Sect. 5 , experimental results are presented. Finally, Sect. 6 concludes the paper. Collaborative filtering (CF) is a well-developed framework utilizing viewing his-tory of different users to provide personalized recommendation. A detailed survey of collaborative filtering is provided by [ 19 ], and various enhancements have also been developed [ 12 , 24 ]. The main drawback of collaborative filtering is the cold start problem, which has been discussed and studied in [ 3 , 27 ].
 mendation which capitalizes on social information has become more popular. Existing studies of social recommendation can be grouped into three types: (1) Extra social information is used to improve an existing recommendation sys-tem [ 10 , 11 , 14 ]; (2) Social information is used to create or enable a recommender system [ 6 ]; (3) Studying user trust and item reputation [ 23 ]. Despite the pop-ularity of social recommender systems, [ 20 ] points out that there are still some negative experiences in applying social recommender systems: (a) Social rela-tions are too noisy and may have negative impact on recommender systems; (b) For cold start users, they may also have few social relations; (c) Different types of social relations may affect social recommender systems differently, and the success of one type of social relation may not be applicable to others. While those social recommender systems utilize social information of friends, others turn to communities of users for recommendation. For example, [ 17 ] utilizes community detection approaches to find communities from different dimensions of social networks, and then performs collaborative filtering within community members. [ 25 ] develops a circle-based recommender system that infers category-specific social trust circles from available rating data combined with social network data, and it has also proposed several variants to weight friends based on their inferred expertise levels.
 Different from those community based approaches, which generate groups by virtue of community detection on top of interest similarity or the social relationship network, our work is based on explicitly defined groups formed autonomously by members because of common interest and other reasons. Fur-thermore, in our setting users can be affiliated with multiple groups which leads to a new challenge of how to exploit these groups together for recommendation. Tencent Video [ 22 ] is one of the largest online VoD (Video-on-Demand) service providers in China, supporting more than 50 million active users on a daily basis. During peak hours, more than 2 million concurrent users are served. Tencent Video X  X  video catalog includes movie, TV episodes, MVs (music video), news, UGC (user generated content) and many other types.
 The online social network used by us is Tencent QQ [ 15 ]. QQ is one of the most popular Instant Messaging service in China, through which one can make friends, chat with friends and join QQ groups. In June 2015, there are roughly 843 million active QQ accounts, with a peak of 233 million online QQ users [ 16 ]. Moreover, most users join multiple QQ groups (more than ten). For most QQ groups, there are more than 50 members.
 To help discuss our ideas precisely, we first define some notations. All users, videos and groups are assigned unique IDs. For user i , his viewing record list for the last 30 days is represented by set V i , i.e., if a video j is viewed by a user i , then j  X  X  i . The set G i represents the groups that user i joins. For a group k , all its members are represented by set U k .Ifuser u is a group mate of user i , there exists a group k , such that u, i  X  X  k . The set G is all the groups, and the total number of groups is G .Foragroup k , the video pool, i.e., the set of all videos that have been viewed by any user within the group, is represented by P =  X  set of friends for user i is F i , i.e., if user u is one of user i  X  X  friends, then u The friend video candidate pool for user i is represented by Currently, recommender systems based on collaborative filtering are already deployed in Tencent Video to provide personalized recommendation. One pri-mary challenge faced by the system is new-user cold start issue and data sparsity issue. Take the recommender system for movies as an example. According to sys-tem measurements, around 25 % of the daily users have not watched any movie in Tencent Video in the last 30 days, and thus can be treated as new users for a one-month window. In addition, the user viewing behavior is fairly sparse on the individual level, indicating data sparsity, as illustrated by the distribution curve of number of videos per user in Fig. 1 (a). In other words, the non-zero entries in the user-item consumption matrix take less than 0.01 % of the whole matrix. Video and Tencent QQ together. For a particular user, his viewing records, his friends X  viewing records and his group mates X  viewing records are jointly measured over 30 days. The results are summarized in Table 1 and Fig. 1 (a). The results show that for a user, there are more group mates than friends and more video records from group mates accordingly, which implies we may discover more interesting videos via groups. This motivates us to design the social-group-based recommendation strategy. 4.1 Objective and Challenges The problem we want to solve in this paper is to recommend a set of relevant and diverse 4 videos R i (with size R ) for user i from the group video candidate pool video candidate pool. The main challenges lie in the availability of only implicit feedback data as well as different cases of group affiliation. Merely with implicit feedback, it is not easy to generate effective recommendation, because there is no negative feedback. For example, the reason a user didn X  X  watch a certain video might be because she disliked the video or she didn X  X  know the video at all. Moreover, users joined different number of groups, as shown in Fig. 1 (b). Firstly, for users affiliated with a single group, we need an algorithm to rank videos viewed by users in the same group, which is the single affiliation problem . Secondly, if a user is affiliated with multiple groups, we need algorithms to rank videos from different groups, which refers to the multiple affiliation problem . In the real system, most users have joined multiple groups, however, we begin with the ranking algorithm in the single affiliation case for ease of clarifying the proposed algorithms. 4.2 Video Ranking for Single Affiliation Problem In this case, we need to resolve the intra-group video ranking problem. Dif-ferent from previous studies of group profiling [ 21 ] and recommendation with rank aggregation [ 2 ] that utilize explicit user preference, we only have implicit feedback data. Assume user i only joins group k , then P G Generally speaking, videos that are more representative of the group should be ranked higher. As argued by [ 7 ], a representative item is supposed to be frequent and discriminative , in other words, it should be frequent so as to be a  X  X attern X , and it can be used to distinguish one from others. Intuitively, the more members of a group viewed a video, the more the video is likely to attract other users in the group. However, frequent items are not necessarily discriminative. For example, for a group comprised of sports fans, some very hot videos, such as breaking news, are less discriminative than a certain sports video, although those hot videos were viewed by more members of this group.
 To capture videos that are both frequent and discriminative, we firstly define scores to quantify these two characteristics of a video respectively. We use a local popularity score to denote how frequently a video appears in the group video candidate pool, i.e., how many group members have viewed the video: where I ( j  X  X  i ) is an indicator with value 1 if video j was viewed by user i , otherwise 0.
 To measure how discriminative a video is for a group, we compare the total number of groups with the number of groups whose members have viewed video j , and define the discrimination score as where G is the total number of groups and I ( j  X  X  k ) is an indicator with value 1 if video j is viewed by any user from group k , otherwise 0. Therefore, videos liked by a less number of groups will get higher discrimination scores. combining its local popularity score and discrimination score to generate a score W where  X  k,j is the local popularity score, and  X  j is the discrimination score. The values of  X  k,j and  X  j are affected by the number of members in the target group and the total number of groups in the system respectively. For a certain video system, the values of  X  k,j and  X  j can be scaled (such as max-min scaling) before being multiplied. In sum, we prefer videos that are locally popular in the target group rather than videos favored by most groups.
 W k,j in the decreasing order. The ranked video list for group k is denoted by l .Ifuser i is only affiliated with group k , then the top R videos from removing videos viewed by user i , will be recommended to user i . 4.3 Video Ranking for Multiple Affiliation Problem In this case, we can firstly apply the intra-group video ranking algorithm described in Sect. 4.2 to each of the affiliated groups. Then, we should con-sider how to merge the ranked video lists from those groups, which is a rank aggregation problem [ 2 ]. However, groups are of different values in video rec-ommendation. For example, a highly interactive interest group may be more valuable than a colleague group because like-minded users are more likely to enjoy common videos. Thus, we need a group scoring algorithm to discriminate those groups.
 Group Scoring. To assess a group, we firstly define features that can distin-guish groups, and then use these features to calculate the group score. Group Features. Basically, we focus on two kinds of group features: social fea-tures and interest features. The social features we exploited comprise of social activeness and social conformity, which mainly take the social influence into account. For example, good friends may share common interests in viewing videos. We detect the social influence from the density of friendship inside the group and the strength of interaction among group members. For interest fea-tures, we consider interest activeness and interest conformity. Preferred groups are those whose members are fond of viewing (especially representative) videos and like-minded with each other.
 strength, trustworthiness, and homophily are three significant factors to affect the likelihood of users seeking and accepting someone X  X  advice for decision mak-ing. In online social network, tie strength can be measured by the frequency and duration of interaction, while trustworthiness corresponds to social relationship, and homophily means interest similarity.
 With the knowledge of the group information and historical viewing records, we calculate the feature scores for group k as below: sages sent by user i in group k in last 30 days, and |U k members in group k . Social activeness measures the intra-group interaction strength, which reflects the group-level tie strength. whether u and i are friends in QQ. Social conformity is the density of the friendship network inside this group, representing the trustworthiness on a group basis.  X  Interest activeness: I a k = j  X  X  group k calculated in Sect. 4.2 . This feature measures how representative the group video candidate pool is in total. (0 , 1).Asshownin[ 2 ], the more alike the users in the group are, the more effective the group recommendations will be. This is a group-level video inter-est similarity measure corresponding to homophily. The larger this value, the higher degree of common interest among this group.
 Calculation of Group Scores. Those feature scores provide a four-dimension com-parison among different groups. However, in order to merge video lists from multiple groups, we need to combine these features to generate a single score for each group.
 It is not easy to generate a group score with the feature scores. We should assign each feature a reasonable weight to combine them. We adopt the logistic function introduced in logistic regression to generate the group score, which is a value between 0 and 1 indicating the likelihood of a group to be effective for recommendation 5 .
 where  X  0 ,..., X  4 are weights that can be tuned to combine feature scores. We can use the supervised learning approach to learn the five feature weights. To prepare the training set, we choose in total m users randomly from all the online users. For each user i , we randomly select a group k proposed intra-group video ranking algorithm to recommend videos to the user. If any recommended videos is then selected and viewed by user i , then group k effective to recommend videos for user i , denoted by y k For each instance in the training set, such as using group k for user i , the empirical error is calculated by the log-loss cost function f which is defined as function shown below (using gradient descent approach): Video Aggregation. With the ranked video lists from multiple groups as well as the score of each group, we should address a weighted ranking aggregation problem. Borda Fuse [ 2 ] is a widely known approach proposed to merge ranking lists. In Borda Fuse, each ranked video list is like a voter, and each voter ranks a partial set of c video candidates. For each voter, the top ranked video is assigned c scores, the second ranked video is assigned c  X  1 points, and the like. If some videos left unranked by the voter, i.e., not in this ranked video list, the remaining scores are divided evenly among the unranked videos. In our case, we use a weighted Borda Fuse method to obtain the merged result R i score of video j after merging multiple video lists is where J k is the score of group k ,and D i is the number of distinct videos in user i  X  X  group candidate video pool P G position of video j in list l k , otherwise, to allocate the remaining scores among the unranked videos, where | l k | is the length of list l k . After ranking all the videos according to W and removing videos viewed by user i , we can obtain the final recommendation list R i .
 not utilize some model-based methods like those in CF 6 , for example, the pro-posed algorithm does not factorize the group information directly. Thus, the proposed algorithm is more like a memory-based one. Despite the higher accu-racy in general achieved by model-based methods, memory-based methods show the superiority in terms of simplicity, interpretability, and the ability of incre-mental updating [ 19 ], which makes them still prevalent in real systems. Instead of using historial data to conduct offline evaluations, we implement the social-group-based algorithm in the Tencent Video system to test it online. In our experiments, we focus on movie recommendation. In the current VoD service of Tencent Video, there are more than 5 million daily views of movies. To learn the feature weights in the group scoring algorithm, we randomly select 10 % of daily users along with random group selection, and use the intra-group video ranking algorithm to recommend movies. Then we collect the users X  (implicit) feedback to conduct feature weighting training. To evaluate the per-formance of feature weighting, we collect feedback data in two days, using the former day X  X  feedback data for training and the latter day X  X  for testing. The receiver operating characteristic (ROC) curve of the feature weighting is shown in Fig. 2 .
 For online testing of the proposed social-group-based algorithm, we also implement two state-of-art approaches as benchmark for comparison.  X  Implicit feedback-based collaborative filtering [ 9 ]: A matrix factorization model tailored for implicit feedback is utilized, where implicit feedback data is treated as indication of positive and negative preference associated with various confidence levels.  X  Ontology-content-based filtering [ 18 ]: Each item profile is represented with a set of concepts taken from a video-related ontology. And each user X  X  content-based profile, generated according to the user X  X  implicit feedback, consists of a weighted list of ontology concepts representing his/her interests. A cosine similarity measure is adopted to match users and items.
 We conduct abundant A/B testing [ 8 ] online to evaluate the recommendation performance of the three algorithms. In the A/B test, users whose past viewing behaviors follow the distribution in Fig. 1 (a) are diverted into several distinct sets evenly and randomly, where each set adopts a distinct setting for one targeted character and all other characters are fixed. These sets are then compared against one another over a set of predefined metrics. In our experiments, the targeted character is the adoption of different algorithms. To evaluate the performances of these algorithms in terms of relevance and diversity, we use two metrics in the experiments, namely, click-through rate (CTR) [ 5 ] and Gini coefficient [ 4 ]. recommendation, and  X # of click  X  is the number of recommendation whose recommended video lists are clicked after they are shown to users. mended, and d j is j -th lowest frequency of occurrence in all recommended video lists. The smaller the Gini coefficient, the more diverse the recommen-dation results are.
 second largest daily CTR to be 1 and the other two CTRs to be the ratio of it. The results of the normalized CTR and Gini coefficient are shown in Fig. 3 , where each value is averaged over the same day of three weeks CTR and smallest Gini coefficient, which means it can generate the most relevant recommendation in terms of hit rate and provide the most diverse results com-pared with the other two approaches. And this also indicates that the proposed algorithm can perform well in the cold-starting online video system. In this paper, we propose a social-group-based video recommendation framework by virtue of explicitly formed groups (QQ groups). We elaborate on three algo-rithms of the framework, namely, intra-group video ranking, group scoring, and video aggregation. To validate the effectiveness of our approach, we deployed it in the online video system and compare it with two state-of-the-art algorithms. The evaluation results show that our design can produce recommendation results with both high relevance and diversity. In the future work, we will implement more algorithms for comparison, such as hybrid CF and CBF algorithm, social-friend-based algorithm.

