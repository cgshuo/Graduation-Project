 Recently there has been a surge in research that predicts re-trieval relevance using historical click-through data[5]. While a larger number of clicks between a query and a document provides a stronger X  X onfidence X  X f relevance, most models in the literature that learn from clicks are error-prone as they do not take into account any confidence estimates. Spon-sored Search models are especially prone to this error as they are typically trained on search engine logs in order to predict click-through-rate (CTR). The estimated CTR ulti-mately determines the rank at which an ad is shown and also impacts the price (cost-per-click) for the advertiser. In this paper, we improve a model that applies collaborative filter-ing on click data by training a filter that has been trained to predict pure relevance. Applying the filter to ads that have seen few clicks on live traffic results in improved CTR and click-yield (CY). Additionally, in offline experiments we find that using features based on the organic results improves the relevance based filter X  X  performance.
 H.3.3 [ Information Retrieval ]: Information filtering Algorithms, Experimentation
Sponsored Search is the problem of finding candidate ads and ranking them for a search engine query. Advertisers sub-mit creatives and bid on keywords or search queries. Ads are ranked by a combination of their estimated click-through-rate (CTR) and bid. When an ad is clicked on by a user the advertiser is charged by the search engine for the click. In the generalized second price auction used by most search engines, the cost of the click is a function of the bid and relevance of the ad below the clicked ad [4]. Models to es-timate CTR are typically learned from click logs (eg., [5]). Clicks can be interpreted as a weak indicator of relevance, and models that learn from clicks are noisy due to issues of click fraud, accidental or exploratory clicks, and position-bias. Removing bad or irrelevant ads is particularly impor-tant in sponsored search problem because poor ads not only lead to a bad user experience, but also create a bad adver-tiser experience because a bad advertisement with a high bid can affect the cost paid by an advertiser whose ad is shown above this bad ad in the second price auction.
Our relevance filter is a binary classifier trained to detect relevant and non relevant advertisements, given a particu-lar search. We experimented with Support Vector Machines, Maximum Entropy and adaBoost Decision Trees. While all algorithms had similar performance, boosting was slightly better and hence we report those results. The baseline model had 22 features: query length and 7 features that separately compared the query to the three zones of an ad (the title, description and display url). These seven features included word overlap (unigram and bigram), character overlap (un-igram and bigram), string edit distance, cosine similarity, and a feature that counted the number of bigrams in the query that had the order of the words preserved in the ad zone. The first five features selected in the boosting itera-tions were (1) the cosine similarity between query and title, (2) character overlap between query and abstract (3) char-acter overlap between query and display url (4) query length and (5) a feature that counted the number of bigrams in the query that had the order of the words preserved in the title. This 22 feature model (M1) forms our baseline model.
Web-queries and ad-creatives are both very short, so we hypothesized that query-expansion would be useful. In the past query-expansion on web-results has been shown to be useful for ad retrieval[2]. We expand the query using the summaries of the top 10 results from the Yahoo! search engine by computing a language model for each query as: maximum likelihood probability and P ( D | Q ) is a triangle function of rank. We compute the similarity between the expanded query and each of the title and abstract to get an additional two features for our second model (M2). We also experimented with a model (M3) that had features that determined whether each of the top 100 words from an ad-corpus occurred in the title, description or display url. Model M4 has the web-expansion features in addition to the word features.
We report performance on 10-fold cross validation and on a held out test set. The dataset for cross validation has about 117,000 query-ad pairs sampled from a major search engine. The held out-test set is sampled from a method that predicts query-ad relevance scores based on a collaborative that achieves maximum F1. filtering algorithm and has about 8000 query-ad pairs. The collaborative filtering algorithm is based on a common fam-ily of approaches called  X  X eighborhood methods X  (eg., [1]). The method can also be considered analogous to one that does a random-walk of 3 on the query-ad click graph[3]. Rel-evance assessors labeled the training and held out data using a graded scale. The set of possible labels is shown in col-umn 1 of Table 2. For training and evaluating our classifiers all instances with a rating of somewhat attractive or better were marked relevant , and we measure precision and recall of relevant ads. In Table 1 we present results at the max F1 score for each model to provide a measure of the ranking quality of the models.
 We see that model M2 improves all metrics over model M1 on cross validation, while on the held out test set recall is improved, but precision is slightly hurt. Model M3 has better precision over model M1. In model M3, many fea-tures that are triggered based on the occurrence of words like cheap , insurance etc in the query and words like ship-ping in the creative are very important. The addition of such words seems to increase precision at the expense of recall. Overall, in terms of F1, models M2 and M4 are significantly better than model M1 and M3, showing that web-expansions provide some benefit.

For the held-out test set we also report filtration rate (per-centage of ads filtered) on the various editorial grades for ads in table 2. We find that using web-features (M2) and word features (M3) improves the performance of the model on the top 2 grades but causes more aggressive filtering on grades 3 and 4. Model M4 is excellent at not filtering Perfect ads and doing a good job at filtering non-relevant ads. Table 2: Filtration rates of the different models at operating points s.t. the Offensive/Risky filtration rate is the same for all methods. Numbers in paren-theses indicate the number of query-ad pairs.
Methods that infer relationships based on clicks can find relationships between phrases like running shoes and sneak-ers because they do not rely on strict word overlap. If we are  X  X onfident X  about the clicks observed, these mod-els can draw many meaningful associations. Our proposed relevance models rely heavily on word overlap, so (for live traffic) we wanted to apply it only on ads where the ad had not seen sufficient impressions to collect a robust observed click rate. The simplest way to implement this would be to apply a strict threshold on the number of impressions. However, the position bias in search engine logs makes com-paring absolute metrics problematic. For example, if one ad is observed 5 times in the first position (where user vi-sual attention is high) and a second ad has been observed the same number of time on the right hand side of the page (where user visual attention is very low) then we expect the second ad to have actually been seen by a user much fewer times. We compute an  X  X xpected clicks X  metric as: ec(q,a) = P r imp( q,a,r ) P (click | r ). The quantity ec( q,a ) is the expected number of clicks for a query ( q ) and ad ( a ) computed over all possible rank positions ( r ). The quantity P (click | r ) is estimated by observing the per-position click-through-rate on a size-able portion of the traffic for several days. For our experiment, a fraction of the search engine X  X  users were bucketed into two bins, a control (or baseline bin) and an experimental bin that applied our filtering model to only those ads for which the observed ec(q,a) as well as the observed clicks for the given query ad pair (q,a) were less than a threshold. We measured nCTR , a version of the CTR metric that computes clicks over the expected clicks . This metric removes the position bias from the raw CTR metric (clicks/views). We then compared nCTR for ads sug-gested by our collaborative filtering approach and found an 8% improvement in nCTR for those ads in our experimental bucket, where 1.5% of all ads were filtered. This improvemed click rate can be attributed to filtering low relevance ads.
In this work we have proposed a relevance model based filter to remove poor ads. We have shown in both offline (human assessment) and online (live-traffic CTR) scenarios that the model improves a collaborative filtering based sys-tem that was learned on noisy click log data. [1] J. S. Breese, D. Heckerman, and C. Kadie. Empirical [2] A. Z. Broder, P. Ciccolo, M. Fontoura, E. Gabrilovich, [3] N. Craswell and M. Szummer. Random walks on the [4] B. Edelman, M. Ostrovsky, and M. Schwarz. Internet [5] M. Richardson, E. Dominowska, and R. Ragno.
