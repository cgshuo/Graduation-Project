 In Grid Computing[2], many users are able to use commodity computer which is composed of heterogeneous resources and machines. Due to such a reason, many scientists and researchers would like to make use of grid computing environment for their research and development.

Globus Toolkits is a de facto standard to construct grid computing environ-ment. However, there are no applications and tools that provide collaboration among the users. For example, massive documents and records are produced from the experiments in real scientific r esearch. However, current grid comput-ing environment does not handle these valuable data for collaboration. Even though cooperative task is desirable choice for massive data analysis, no current application and tool support this functionality.

In this paper, we propose a collaborative editing system in grid computing environment to solve the absence of colla borative tools. CoEdiG is based on the grid computing and it provides full grid functionality -grid security infrastruc-ture, and grid service mechanism.

The rest of paper is organized as follows . Section2 describes the architecture of CoEdiG. Section 3 delves into the details of our implementation, and Section 4 outlines some future directions and conclusions.
 The architecture of CoEdiG conforms to client-server mechanism. Client side takes charge of the user-interface which contains not only a typical document-editor but also collaborative editing tools such as chatting, user-list, document-list. And it can be installed and operat ed in a grid web portal service. Hence, grid users are able to make use of this program without any extra effort.
Server side takes various operations from client-side. Moreover, it can analyze these requests and do some proper operation -authentication, member manage-ment, document file management, communication. Server program normally is located on web-server or file-server and as shown in figure 2.

In detail, CoEdiG client consists of two layers with a global point of view. As shown in figure 1, collaboration engine and application layer have an each role that provides their own functionality. At first, cooperative engine layer is the middle-ware components that suppor ts communication between many CoEdiG programs. Besides, it is capable of carrying out the authentication, session man-agement and document file management.

Application layer is on the basis of cooperative engine, which can provide col-laboration interface as well as basic docu ment editing interface. In cooperative function, application layer can support member login and logout with secured certificate. It also enables many users to edit multiple documents with many users. To achieve the consistency of documents, only one user can write at any moment with locking mechanism.[3] Ther efore, anyone who tries to write a doc-ument which is already opened by another user should wait in the reading list of that document. Any user who resides in the same document session can com-municate with other user with chatting.

CoEidG server and client have one unique protocol to process the request and response between each other. With th e predefined protocol, server can iden-tify the client request and it delegates any response into the proper handler. Currently server depends on common UNIX file system as document repos-itory. Hence, any shared document file conforms to the acces s permission of file-systems.

Figure 2 describes the deployment vie w of CoEdiG. In this figure, reposi-tory server has documents and records cre ated from the experiment results and researchers report. And web server cont ains and executes CoEdiG server pro-gram. At client side, multiple users should contact grid web portal site and then download program via Java Web Start. User can edit multiple files in their local machine via communication with server. Currently, we have implemented CoEdiG prototype as the part of our grid com-puting system for scientific research. Like figure 3, our prototype is implemented in Java. And this program can be downloaded and installed with JNLP(Java Net-work Launching Protocol) and Java Web Start. JNLP is a file which contains the information regarding how and what the program would be installed in client machine. And Java Web Start is a mechanism for program delivery through a standard Web server. Typically initiated through the browser, these programs are deployed to the client and executed outside the scope of the browser.
In our case, CoEdiG is deployed in grid portal site. After downloading pro-gram from portal site, it can be executed locally with Java Virtual Machine. To execute collaborative editing of the docu ments, user should be authenticated via GSI(Grid Security Infrastructure) mec hanism.[1] Figure 3 describes the screen which requests users auth entication information.

Next to the authentication, user can download any documents from repository and do some editing task. Technically, u ser session is created at this moment, which can be used for member management and document management. And at server side contains two information structures -user list and document list.
While editing documents, users communicate with others in the same doc-ument session. And users are able to re quest write-permission for some user who have the right of the document. Also, user can yield the document write permission to the user who needs the write permission. In this paper, we have proposed collaborative editing system for grid users. Currently CoEdiG is implemented with locking mechanism and supports various collaborative functionalities.

For the future works, we would like to design real-time collaborative editing mechanism with CoEdiG by using operational transformation. Even though op-erational transformation is not easy to implement, we guess that it would devote the real usage of CoEdiG.

