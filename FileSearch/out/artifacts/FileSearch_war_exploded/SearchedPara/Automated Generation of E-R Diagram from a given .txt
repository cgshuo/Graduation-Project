 An Entity Relationship (ER) data model describes the information about entities, attributes and relationships. Entity relationship model is a high level conceptual form which facilitates to design a database. This paper proposes a model which takes text description from the client as input and then generates an E-R Diagram after processing the text. The DBMS designer then can further interact to refine the model and remove any inconsistency. This will reduce initial burden and speed up the requirement analysis phase. This model uses some internal databases to store the frequent domain specific entity names and attribute names along with their synonyms database [verbs] which relate two entities. Ambiguous pronoun at the beginning of the sentence is resolved using the nearest noun that appeared in the previous statement. The number of entity names in any domain is in no way exhaustive so we can X  X  store institution names etc. Section 2 describes the related works, Section 3 describes the architecture of the system, Section 4 elaborates the Algorithm and implementation details. Section 5 winds up with conclusion and future scope of work. The construction of E-R Diagram is an important step in the requirement analysis phase of database designing. Peter Chen has proposed 11 rules to convert Natural Language to Entity Types and Relation Types in [1]. Commercial product for ER model generation includes Microsoft X  X  Visio, Tech X  X  ER Studio and Dia [2]. Much research works focus on developing methodologies and tools to draw ER diagram or generate a UML model from a given description in natural Language as in [2]. Hatem Herchi has proposed a DC builder system to generate UML class diagram from user requirements given in natural language in [3]. Hatem Herchi has presented 12 rules to extract class names from natural language and then generated an XML file that was refined to generate UML class diagram. A heuristics-based approach has been used to generate E-R diagram from natural language specification. ER elements like entities, attributes and relationships are determined using semantic heuristics as in [4]. Large scale Object-based Language Interactor, translator and Analyzer (LOLITA) [5] is a NLP system that produces an object model from natural language specification it considers nouns as objects. The system is written in Haskell. This approach is limited to identify classes and cannot extract objects in different NL specification in [6]. Automated Knowledge Provider System has been developed to extract knowledge from knowledge database. This system can able to process Natural Language queries in assertive sentence or in interrogative sentence. A rule based parsing technique has been applied on assertive and interrogative queries to convert those queries into SQL queries which is then executed on a database to fetch the answer(s) as in [7]. Requirement Analysis and Class Diagram Extraction (RACE) is a desktop instrument specification in natural language using Natural Language Processing and Domain Ontology techniques. It uses rules to identify classes, attributes and relationships and Domain Ontology to improve the performance of concept identification as in [8]. A method to convert Natural Language description to UML has been proposed in [9] to provide automatic assistance to developers. This paper focuses on generation of Activity Diagram and Sequence Diagram through Natural Language Processing. This system has proposed a novel technique that enhances the generation of UML model and provides automatic assistance to developers. Usama Iqbal and Imran Sarwar Bajwa have proposed a method to translate SBVR (Semantics of Business Vocabulary and Business Rules) rules into UML activity diagram. This method takes the system requirements in specifically in SBVR syntax then parses the whole input and chooses representation of selected information as in [10]. The dependency analysis based approach to derive UML class automatically from Natural Language requirements. Requirement statements are transformed to an intermediary frame-based structured representation using dependency analysis of requirements statements and Grammatical Knowledge patterns. Class diagram using rule based approach is derived have proposed a method that using Grammatical Knowledge Patterns and lexical and syntactic analysis of requirement text to create UML diagrams. First the text is transformed to intermediary structured representation-frames and then use the knowledge stored in frames to generate the UML diagrams as in [12]. M. O. Muss A and D. Wilson have described many existing rules that convert natural language to formal models such as Enhanced Entity Relationship Diagrams, Class Diagrams and Relational Database Schemas and explains their limitations. Also, many new rules are proposed for more accurate conversion. The rules are divided into three parts i.e. rules converting OWL to ERD. The most likely composition of ERD constructs that correspond to a given sequence of OWL axioms are selected using a Hidden Markov Model (HMM). OWL inputs are the observable states and ERD structures are the hidden states. Transmission and emission probabilities are heuristically set up through analysis of appropriate grammar describing the ERD syntax. Several OWL to ERD conversion rules are presented in [14]. The architecture proposed in the system uses both domain specific databases and rules to convert text to ER diagram. The Domain specific databases are needed specifically to increase the efficiency of pure rule based system. We have used a database that is specific to the domain of educational institutions. The general outline of the system architecture is given below followed by explanation of each of the steps. 3.1 Description of Steps 3.2 Domain Specific Database Six tables have been implemented which contains domain specific words and synonyms which are related to educational institutions. The tables are as follows: a) Entity Name Table: This table contains entity names for a particular domain. The Educational Institutions has been selected as a domain and Teacher, Student, Classroom etc. are example of entities. The sample table has been given below. b) Entity Synonym Database: This table contains synonym words for each entity which are assigned in Entity Name Table. Example  X  If an entity  X  X eacher X  is in the Entity Name Table then all the synonym of  X  X eacher X  word and  X  X eacher X  word itself should have in Entity Synonym table. The sample table has been given below. c) Attribute Name Table: This table contains name of all the domain specific attributes. This table has been implemented because once a word is detected as Noun we need to disambiguate between whether it is an Attribute or an Entity. The structure is similar to Entity Name Table. d) Attribute Synonym Table: This table stores the synonym of corresponding attributes present in Attribute Name Table. Structure is similar to Entity Synonym Table. e) Relation Name Table: This table contains basically verbs defining relation between two entities E.g. Works, teaches, takes etc. f) Relation Synonym Table: This table contains synonyms of the corresponding words present in Relation Name Table. These databases will be used in the Detect Entities, Attributes and Relationship phase. The user will post NL sentences. These sentences will be simple assertive sentences exclamatory sentences are generally exempted while specifying the requirements of a database. Requirements of database are most of the time established facts like  X  X eachers take classes X ,  X  X arden takes care of hostel X , etc. Assertive sentences are generally in the form of Subject + Verb + Object. Subject is most of the time Noun which specifies Entity [1].Verb makes the relationship attributes. 4.1 Sentence Processing Steps The paragraph (NL sentences) is represented as a 2D array of words where every line contains words from a single sentence. This process has been described in 3 rd step of description steps. General Assumption: ii. If two entities are linked by a verb which is detected as relation, then these iii. If a pronoun is present, then it represents most of the times the nearest object iv. Multiple attributes appearing in a sentence will be linked to the first entity Take each sentence and process it one by one. Entity and Attribute Detection: 1. Get the NOUN tags and search the word in the Entity Synonym Database. If it is 2. System will fetch all adjectives from the same sentence that denotes the attributes 3. Verb makes the relationship between two entities in ER diagram. Entity name and 4. The dictionary will be populated after step 3 of Algorithmic steps and system will 4.2 Algorithm 4.3 Example The example has been given below. Input Text: Student has name and address. Every boy has roll number. Student takes courses. Course has title, level and credits. Course has course_id. Step 1: First the paragraph (NL sentences) text is segmented into individual sentences (Fig. 2) and stored in an array. Statement segmentation has been done on the basis of placement of full stop (.) but at the same time considering some special uses of (.) like Mr., etc. Step 2: In this step, the sentences are segmented into individual words considering spaces as the separator between individual words. Step 3: In step 3 of Description step, the words are sent to POS tagger as argument and it returns the words along with the tags. The common tags have been used by POS tagger that is shown in Table 3. Below the full data structure has been give that is returned by the POS tagger after POS tagging. A domain specific database has been defined with Entities, Attributes, Relationships and its synonyms. After this step, Tags from Table 4 and the domain specific database have been used to generate the dictionary table. We specifically need domain specific database to remove ambiguities because only rules based on parts of speech tags can have ambiguities for e.g. 3 rd element in first row "Name" is detected as a verb which represents an attribute, thus to remove this form of ambiguities we use the domain shown in algorithms and implementation details section. The structure of the dictionary table has been given below. After First Statement: Sentence:  X  X tudent has Name and Address X  -The "Name" is detected as verb but since it is present in Attribute Synonym Database we consider it as an attribute. After Second Statement: Student and courses. Student is already present in the dictionary where courses is not present and will be included in the dictionary. Relationship is stored in form of two value tuple like (takes, Courses). Therefore, the dictionary will look like After third statement: Sentence:  X  X ourses has title, level, credits X , courses entity already exists in dictionary and now 3 attributes will be added to it since they are present in Attribute Synonym Database. Even if they were not and they were adjectives we could certainly say that these words are adjectives because adjectives represent attributes. After fourth statement: Sentence:  X  X ourses has course_id X  -courses is already present in the dictionary so it is detected as attribute of Courses entity. The final dictionary state contains all the information to generate the ER Diagram after all the sentences are processed. graph-viz has been used to render the graph into a SVG file. The dictionary as shown in Table 8 is traversed to create the image. After processing every entity, we mark it as done. First the entity in row 1 is processed and then we move on to the entity that is present in Relationship section of the current entity. If no relationship section exists move on to next entity and at end ensure all the entities are processed. This is a Breadth First Search with minor variations. The main use of the database in the system is to increase the efficiency of the system. Rule based system often have limitations processing any language since language by itself is vast and not defined by rules like programming languages. In large systems rules interact with each other and sometimes produce weird results. This system database size the larger the better. Work is still being done on automatic extraction of Named Entities from an annotated domain specific database which will automatically generate the database. Another area for improvement is using a Support Vector Machine to chunk multiword entity names. The proposed system expects the input to be simple assertive sentences and not highly complex ones like with predicates coming before object. It may not give correct output if the text given as input is complex.

