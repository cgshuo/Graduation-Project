 Internet users often face the challenge of identifying the most suitable product out of some pr oduct assortment available on a certain e-sales platform. Recommender systems can substantially alleviate this typically complex task. Since the rise of such systems a lot of effort has been done in developing different recommendation approaches and algorithms, which all of them have certain strengths and wea knesses. What has been widely ignored by the recommender commun ity so far are the potentials and impacts of psychologica l and decision theoretical phenomenons, which already have b een investigated and applied in the field of marketing. Such phenomenons promise big capability to support users in decision making when facing a comparison situation. This paper concentrates on two classes of phenomenons, which are decoy effect s and serial position effects. Tightly coupled to these phenome nons is the problem of getting the utility function of a recommender right, as this function serves both as the basis of result set calc ulation as well as the fundament of exploitation of above me ntioned phenomenons. Putting all these aspects together an extended architecture for recommender systems will be proposed in the end of the paper. I.2.1 [ Artificial Intelligence ]: Applications a nd Expert Systems. Human Factors, Economics, Theory. Recommender Systems, Decoy Effects, Serial Position Effects, Model-based Diagnosis. Recommender systems [3,4,15,18,19] support internet users in finding and identifying products and services suiting their individual demands (e.g.: digital cameras, financial services)[13]. Targeting this task various reco mmendation approaches have been developed. Collaborative filtering [15,18] uses users X  item ratings in order to calculate user similarities. On basis of such similarities the system is able to recommend items to a certain user, which similar users already have rated positively. Demographic recommendation [4] is somewhat similar to collaborative filtering. The difference is that instead of using user ratings the recommender uses demographic info rmation like age or gender in order to calculate similarities. Content-based filtering [19] exploits knowledge about item f eatures in order to recommend items which are similar to items a certain user has liked in the past. The recommender system then recommends items which show similar characteristics comp ared to those already positively rated items. Utility-based recommendation [4] matches user properties (such as demographic in formation, profession, wishes, needs, etc.) against item properties. By applying a utility function the recommender is able to rank items by means of value for a specific user. Apart from information about user properties and item properties knowledge-based recommender systems [3,5] additionally exploit deep domain knowledge, i.e. restrictions and implications dependent on th e domain (e.g.: legislative restrictions, physical limitations, relative importance of item attributes, etc.). The domain knowl edge is stored in a knowledge base in form of rules or constr aints which are often implemented in the form of filters [5]. To communicate with the user, a knowledge-based recommender typica lly offers an explicit sales dialog [8,9] where the recommender asks the user a sequence of questions in order to find out his/her preferences (in case of critique-based systems [21], the explicit dialog is substituted by critiques the user gives related to the proposed products). This dialog is supported by explanations [16] (i.e. to clarify certain questions and to explain product features) and intelligent repair mechanisms which serve the aim of dissolving inconsistent user requirements [5]. Once the require ments have been collected, the recommender application is able to calculate a suitable product set which is in turn presented to the user in the form of a product list or a corresponding product comparison page [9]. Often above described approaches are combined for the sake of more accurate and robust recommendations [4]. For example in knowledge-based recommendation it is very common to apply a utility function in order to rank the items in a calculated result set. Multi-Attribute-Utility-Theory (MAUT) [26] is a very common approach in order to match user properties against item properties in order to come up with a calculated utility. The basis of this calculation constitute so called interest dimensions. The overall utility ( utility ) is a sum of interest dimension specific sub utilities. Those sub utilities are products of customer scores ( c scores ( i d ). The higher the value of a certain property, the higher is the corresponding score (typically 1-10). Figure 1 shows the principle of calculation on basis of two interest dimensions, two customer and two item properties respectively. The remainder of the paper is structured as follows: Section 2 introduces decoy effects [1,20,23,24] and discusses how to exploit those effects in the context of MAUT and knowledge-based recommendation. Section 3 introduce the notion of serial position effects [2,14,17,25] and thei r implications for recommender systems. Section 4 addresses th e challenge of diagnosing MAUT in order to assure its consiste ncy which can be seen as basic prerequisite for the effective cont rolling of the effects covered in Section 2 and 3. Section 5 prop oses an integrated recommender architecture accounting for the implications of Section 2 -4. Decoy effects indicate that in a decision situation a certain target option (product) T can look much nicer compared to a certain competitor option C when a decoy element D is added to the set of alternative items. There are several types of de coys depending on the relative position (measured in terms of attribute values) to T (see Figure 2), namely: Attraction effect . D1 is the classical attraction effect as attraction of T increases by adding D1 . Asymmetric Dominance Effect . D2 is the element where the expression asymmetric dominance effect (ADE) is coming from as T dominates D2 in all attributes (i.e. better in quality and price) but C does not (i.e. only better in price). Compromise Effect . D3 is also called compromise effect as T becomes a good compromise between D3 and C after addition of D3 . D21 and D32 are special cases between D2 and D1/D3 dominated by both T and C . Figure 3 shows an example of the asymmetric dominance effect in the domain of plasma TVs: T (target) gains attraction after addition of D (decoy). The reason is the following. T is stronger than C (competitor) in one dimension (larger screen) and C is stronger than T in the other dimension (cheaper). From this point of view there is no clear winner. By comparing T and C with D it comes out that T is stronger than D in both dimensions (larger screen and cheaper) whereas C is stronger than D in only one dimension (only cheaper), which makes T seem to be the best product in the set. Figure 3: Example of Asymmetric Dominance Effect (ADE). Probably the most interesting applic ation field of decoy effects in the context of recommender systems are the presented result sets (i.e. result lists or comparison pa ges). Without mechanisms which make decoy effects predictable unforeseen side effects can occur in every result set. Therefore instruments for recommender systems have to be developed in order to make decoy effects calculable and manageable. The Simple Dominance Model (SDM) [12] is a mathematical model which allows to predict dominance values of items in a set of items and therefore makes decoy effects predictable. Th e SDM accounts for any number of items in the set and for any number of item properties those items are described by, as long as the property values conform to an ordinal scale. Furthermore, th e SDM is designed for the easy application on top of a MAUT system and thus offers the possibility of controlling for decoy effects in result sets of recommender systems by reordering the result set and adding or removing decoy items. Serial position effects are related to biases which are dependent on the position and ordering of items [25]. Two of the most well known effects of this class are the Primacy-and the Recency effect (PRE) [2,14,17]. The Primacy effect says that the first items in a list remembered better than the rest, whereas the Recency effect says that the items at the end of a list a remembered better. Which of these effects arises, if they both arise at the same time, or if they have no impact at al l is highly dependent on the domain, content, and presentation form. [6, 10] present empirical studies in the context of recommender systems which show clear position effects. Three application domains in this context emerge. Firstly, PRE in the result set. Depending on the position in the result set the perceived value of a result item may change. This aspect is relevant when knowledge-based systems are not incorporating some sort of utility function (l ike MAUT), and therefore no item ranking is available. Secondly, PRE in the ordering of item features. When presenting a set of items on a comparison page the order of the item features the items are presented is normally fixed and arbitrary. On which positi on the features a certain item outperforms (or under achieves) the set may have impact on the choice outcome. The informatio n about the importance of the various interest dime nsions and the information about to which extend item features contribute to those interest dimensions (this information is represented by MAUT) form the basis to put the most informative attributes for a certain user on salient positions (i.e. privileged in the sense of PRE). Thirdly, PRE in explanation orderings. Explanations in knowledge-based recommenders typically give some additional information about result items or repair alternatives. Those explana tions can be posi tive or negative. The ordering of those explanations (i.e. positive/negative explanations at the beginning or the end or mixed) may severely influence the observed value of an item. Fourthly, PRE in the context of repair mechanisms . Knowledge-based recommenders offer repair mechanisms in order to adapt user input (i.e. user properties) in case of inconsistent user requirements (e.g.: high profit but no risk in the financia l service domain) or when user requirements lead to an empty result set. In such situations usually more than one repair alternative is available which the user can choose from. Here, again the orde ring of those alternatives may have a clear impact on the probability of selection of a certain repair alternative. In all above mentioned cases a simple reordering entails big potential to lead the user quicker to an optimal product and increase satisfaction. One extremely important aspect which comes along with the effects described in the Sections 2 and 3 is the accuracy of the MAUT system (or any other utility function) as the task of controlling and predicting the eff ects described in the Sections 2 and 3 are highly dependent from th e correctness of the calculated utilities. Commonly, MAUT bases are designed by domain experts. Because of the sometimes overwhelming complexity such MAUT bases are often error-prone and the corrections are typically not manageable with out intelligent debugging support [13]. [7] presents an approach where the MAUT base as a whole is translated into a Constraint Satisfaction Problem . By providing desired ranking outputs of th e MAUT system a Model-based Diagnosis system [22] is able to detect differences between the desired output and the actual ou tput and furthermore comes up with a set of minimal changes on the MAUT system (i.e. score values) to turn the MAUT system consistent with the provided example outputs. The desired example outputs can either be provided by domain experts or have to be learned by the log data of the recommender system. Facing the challenges and potentials in the preceding sections some new recommender architecture is needed. Figure 4 is showing a proposal of a high level view of an architecture which extends a common recommender to cope both with psychological phenomenons as well as with errors in the MAUT system. After calculating a result set, a set of explanations, or a set of repair mechanisms the recommender system interacts with the Sales Theory Manager (STM) wh ich is the runtime component that is responsible for calculat ing dominance valu es (i.e. decoy effects), and optimal item-, explanation-and repair orderings for a current user. The Sales Theory Designer (STD) is basically the component which is responsible for managing all information concerning the execution of the STM, which includes: Moreover, the STD imports exam ple orderings and MAUT data produces a corresponding Constrai nt Satisfaction Problem and manages the communication with the diagnosis component. Central to all this is a GUI. In this paper various psycho logical phenomenons have been introduced and their implications for recommender systems have been revealed. The accompanyi ng research issue of debugging MAUT bases has been discussed in this context, as consistency and accuracy of MAUT systems constitute an important precondition in order to effec tively control for psychological phenomenons in utility-based recommender systems. The last section presents a high level view of an extended recommender architecture which accounts bot h for the incorporation of psychological phenomenons as well as for the debugging of MAUT bases. [1] D. Ariely, T. Wallsten, Seeking subjective dominance in [2] A. D. Baddeley and G. Hitch. Recency re-examined. I S. [3] R. Burke, Knowledge-bas ed Recommender Systems. [4] R. Burke, Hybrid Recommende r Systems. User Modeling [5] A. Felfernig, G. Friedrich, D. Jannach, M. Zanker, An [6] A. Felfernig, G. Friedrich, B. Gula, M. Hitz, G. Leitner, [7] A. Felfernig, G. Friedrich, E. Teppan, K. Isak. Intelligent [8] A. Felfernig, B. Gula, An Empirical Study on Consumer [9] A. Felfernig, B. Gula, E. Teppan, Knowledge-based [10] A. Felfernig, B. Gula, G. Leit ner, R. Melcher, S. Strau X , [11] A. Felfernig, B. Gula, G. Leitner, M. Maier, R. Melcher, E.C. [12] A. Felfernig, B. Gula, G. Leitner, M. Maier, R. Melcher, E.C. [13] Felfernig A. and Kiener A. Knowledge-based [14] F. B. Gershberg and A. P. Shim amura. Serial position effects [15] J. L. Herlocker, J. A. Kons tan, J.Riedl, Explaining [16] J. Masthoff, N. Tintarev, Effective explanations of [17] E. Maylor. Serial position effects in semantic memory: [18] M. Papagelis,D. Plexousakis, T. Kutsuras, Alleviating the [19] M. Pazzani,D. Billsus. Learning and Revising User Profiles: [20] H. Pechtl, Definitions-und Wirkungsbereiche des decoy-[21] J. Reilly, K. McCarthy, L. McGinty, B. Smyth, Incremental [22] Reiter R. 1987. A theory of diagnosis from first [23] I. Simonson,A. Tversky, Choice in context: Tradeoff contrast [24] I. Simonson, A. Tversky, Co ntext-Dependent Preferences, [25] C. Tan, Y. Chan, X. Yang, H. Chan, H. Teo, Effects of [26] Winterfeldt D., Edwards W. Decision Analysis and 
