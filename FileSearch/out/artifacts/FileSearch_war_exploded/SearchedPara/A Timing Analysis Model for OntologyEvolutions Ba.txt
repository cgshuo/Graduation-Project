 It is an important goal for ontology engineers to reuse knowledge-based sys-tems by building and sharing domain ontologies, which are semantically sound specifications of domain conceptualizations [1]. Especially within Semantic Web environment, many Web ontology languages have been developed such as OWL 1 . Moreover, Semantic Web will not be reali zed by agreeing on a single global ontol-ogy, but rather by weaving together a large collection of partial ontologies that are distributed across the Web [2]. Current research areas had rapidly shifted from applications based on simple ontology to some aspects such as representa-tion, evolutions and management of multiple ontologies in a distributed environ-ment [3]. These aspects can be tackled using mapping, combining and versioning among distributed ontologies [4,5,6].

On one hand, evolution and version management of multiple ontologies in a distributed environment should efficie ntly represent ontology changes in de-tails. This enables us to trace evolution history of multiple ontologies and assess whether any two ontology versions are based on different conceptualizations or whether they represent the same conceptualization. On the other hand, we also should specify change operations of ontologies and further analyze the different causalities in diverse cont exts because of these change operations. Current some ontology versioning approaches such as KAON 2 and Protege 3 , cannot jointly ad-dress the two aspects [7]. More importantly, considering ontology versioning is changing over time, we need an approach with time constraints for representing ontology versioning and evolution, especially for specifing ontology versioning and evolution with more specific time constraints. For example, the change op-eration op to ontology o occurs 3 time units earlier than the change operation op to ontology o ; the change operation op based on ontology o takes place 2 time units, and so on. In our opinion, we urgently need an ontology evolution manage-ment approach that not only can specify change details between ontologies and analyze ontology change operations and implications between these operations, but also can represent more expressive time constraints. This paper will work towards this goal.

In this paper, we propose a timing analysis model for ontology evolution management with more expressive time constraints. Using this timing analy-sis model, we can detect whether ontology evolutions are timing consistent in a distributed environment. Given a timi ng change operation sequence, we also can detect whether it is a timing evolutio n behavior of the distributed environ-ment. This enables us to better manage dynamic versioning and evolutions of distributed ontologies.

This paper is organized as follows: Section 2 briefly introduces the motivation of this paper. Section 3 first proposes the timing analysis model of ontology versioning and evolution based on a sing le context. Then in Section 4, we extend work of Section 3 to a distributed envi ronment. Meanwhile, we analyze some important properties from the timing analysis model. The time analysis model based on a single context is also suitable for distributed environments. Section 5 briefly introduces the architecture and implementation of prototype system called TEAM. Section 6 and Section 7 are the related work and conclusion, respectively. In a distributed environmen t, especially knowledge based system with real-time characteristics, diverse contexts probably own themselves ontologies that are se-mantically overlapped with each other. In the situation, when an ontology is changed with respect to an ontology change operation in some context, some ontology change operations in other contexts must be triggered to change their ontologies and hence keep semantic consis tencies between these distributed on-tologies. We use Figure 1 to illustrate our example.
In this example, there are three diverse contexts (columns) in the distributed environment. They are denoted e 1, e 2and e 3, respectively. These distributed contexts own themselves original ontology version. We use O ( ei, 0) to represent the original ontology from the context ei (1  X  i  X  3). O ( ei,n ) is used for represent-ing the n th ontology version from the context ei . For any context ei (1  X  i  X  3), it continually evolves in accord with the time axis from top to bottom. Consid-ering the example in Figure 1, in the context e 1, because of the ontology change operation op 1, the original ontology version O ( e 1 , 0) is changed to ontology version O ( e 1 , 1) . Of course, the change probably causes semantic inconsistencies with se-mantic terms from other contexts. In ord er to keep semantic consistency among semantic terms from these different contexts, another ontology change opera-tion op 2 is triggered which revises semantic terms in ontology version O ( e 2 , 0) in the context e 2to O ( e 2 , 1) . The eight ontology change operations in the figure have caused version evolutions of multiple ontologies in the whole distributed environment. Compatangelo et al. [7] formally specify three types of operations performed on distributed ontologies using rewriting rules which include creation of a concept , renaming of a concept and addition of attribute/value pair to a concept . In this paper, we will not concentrate on the specific types of these ontology change operations because our time analysis model is independent of specific types of ontology change operations.

The arrows denote the path of ontology changes. The dashed arrows denote the virtual path of ontology changes in a single context. In the bottom of the figure, each context owns a time constraint set which represents some time con-straints of the form c ,  X  X  X  , c n are real numbers ( b may be  X  ).

In this example, we must addres ssomeproblemsasfollows: 1) Given a specific sequence of change operations performed on these dis-tributed environments, how can we det ect whether the sequence reflects a cor-rect change behavior of distributed ontology evolutions. That is to say, we need to detect whether the sequence is timing consistent with respect to all the time constraints of the distributed environment. 2) Given all the time constraints of the distributed environment, how will we know whether there exists some timing co nsistent evolution behavior? That is, we need to know whether there exists a sequence of ontology change operations that satisfies all the time constraints of the whole distributed environment.
In order to specify ontology changes and evolution with exact time constraints in a distributed environment, we must answer the two questions. Regarding to the first question, if the given operation sequence cannot satisfy all the time constraints, then we know that these cha nge operations performed on distributed ontologies are meaningless because the sequence is not a correct change behavior w.r.t all the time constraints. As for the second problem, if there does not exist any sequence  X  such that  X  satisfies all the time constraints, then we know that the time constraints are unreasonable and they should be reset. Definition 1. In context e , O ( e, 0) is the original ontology. The set of evolving Definition 2. In context e , a timing analysis model for ontologies based on S e is denoted as TAM e =( S e ,OP e ,C e ,VS e ,T ) ,where  X  S e is the evolving ontology set  X  OP e is the set of ontology change operations performed on ontologies  X  C e is a set of time constraint marks of the form:  X  VS e is the version space based on ontology set S e and VS e  X  S e  X  OP e  X  S e  X  T is a linear ordering about change operation triggering T  X  OP e  X  OP e As for the example in Figure 1, we construct TAM e 2 with respect to the con-Because of the sequence of change operations from OP e 2 = { op 2 ,op 3 ,op 5 ,op 8 } , ontologies continually change from one version to another version. The version ( O op 5) } . The linear ordering set T = { ( op 2 ,op 3) , ( op 3 ,op 5) , ( op 5 ,op 8) } .
We use a change operation sequence for representing and modeling an un-timing evolution behavior of ontologies. Any operation sequence is of the form op 0  X  i  X  n  X  1, where op are triggered because of the causalities of them.
 Definition 3. As for the timing analysis of ontology evolutions based on e ,any operation sequence  X  = op 0  X  op 1  X  X  X  X  X  X  op n is untiming evolution behavior of untiming analysis model TAM e if and only if the following conditions hold:  X  all operations op i in OP e occur in the sequence  X  ,and op i = op j for any  X  for any op i ,op j such that ( op i ,op j )  X  T ,then 0  X  i  X  j  X  n . Considering the example in Figure 1, we say the sequence op 2  X  op 3  X  op 5  X  op 8 can be regarded as an untiming evolution behavior of ontologies based the context e 2. It is not difficult to give an algorithm to check if there is an untiming evolution behavior for a given time analysis model. As mentioned above, however, an untiming evolution behavior cannot fully specify dynamic evolution behavior of ontologies. We concentrate on the timing evolution behavior. A timing change is a change operation name, and for any i (0  X  i  X  n ), t i is a nonnegative real number that represents the performed time finishing operation op i . The sequence represents that op 0 takes place t 0 time units after ontology changes start, op 1 takes place t 1 time units after op 0 takes place,  X  X  X  , op n takes place t n time units after op n  X  1 takes place. The needed time pe rforming the whole sequence  X  is called performed time of  X  and denoted as PT (  X  ). The occurrence time of an operation op i in  X  is denoted as OT ( op i ). It is obvious to obtain the following lemma.
 Lemma 1. For any timing change sequence  X  =( op 0 ,t 0 )  X  ( op 1 ,t 1 )  X   X  X  X   X  ( op n ,t n ) of TAM e , its performing time is denoted as PT (  X  )=  X  n j =0 t j and OT ( op i )=  X  i j =0 t j for any i ( 0  X  i  X  n ).
 Definition 4. A timing change operation sequence  X  =( op 0 ,t 0 )  X  ( op 1 ,t 1 )  X   X  X  X  X  ( op if and only if the following conditions hold:  X  op 0  X  op 1  X  X  X  X  X  X  op n is an untiming evolution behavior of TAM e ,and  X  the different time units t 0 ,t 1 ,  X  X  X  ,t n must satisfy the time cons-From the previous definitions, we can d etect if a timing change operation se-quence is a timing evolution behavior of a given time analysis model. That is to say, we can judge whether the sequence corr ectly reflects version ing and evolution under specific time constraints. We have resolved the first problem put forward in Section 2. For example, we continue to consider the context e 2inFigure1, lution behavior of the given TAM e 2 because  X  satisfies every time constraint in C e 2 , whereas the sequence  X  =( op 2 , 1) regarded as a timing evolution behavior of TAM e 2 because it doesn X  X  satisfies thetimeconstraint { 0  X  2( op 5  X  op 3)  X  ( op 8  X  op 5) } .

We use the notation TEBS ( TAM e ) for representing the set of all timing evolution behaviors which are the change operation sequences satisfying all the time constraints in TAM e . In order to better represent time operation sequence, we define a special change operation  X  which represents the start of ontology changes.
 Definition 5. If there is a change operation sequence  X  =(  X , 0)  X  ( op 1 ,t 1 )  X   X  X  X  X  ( op ontology versioning and evolution based on TAM e is timing consistent. Considering the problem put forward in Section 2, we will discuss whether a given TAM e is timing consistent. We briefly give the following theorem. Theorem 1. Ontology versioning and evolution based on TAM e is timing con-sistent if and only if TEBS ( TAM e ) =  X  .
 Proof. According to the previous definitions, we know that TEBS ( TAM e )is the set of all of timing evolution behaviors of the time analysis mode TAM e basedonthecontext e . Next, according to definition 5, if ontology versioning and evolution based on TAM e is timing consistent, then there at least exists a timing evolution behavior of TAM e .Ofcourse, TEBS ( TAM e ) =  X  .

If TEBS ( TAM e ) =  X  , this means that at least exists a timing evolution behavior of TAM e , hence we know that ontology versioning and evolution based on TAM e is timing consistent.
 In the following, we will extend the time analysis approach to a distributed environment, we find that this approach will still work well in diverse contexts. Definition 6. A timing analysis model base on a distribute environment ENV is denoted as TAM , which is a six-tuple, TAM =( ENV,S,OP,C,VS,T ) ,where  X  ENV = { e 1 ,e 2 ,  X  X  X  ,e m } is the set of diverse contexts  X  S = e  X  ENV S e represents the set of all changing ontlogies in ENV  X  OP = e  X  ENV OP e represents the set of all change operations in ENV  X  C = e  X  ENV C e represents the set of all time constraints in ENV  X  VS is the version space in ENV ,and VS  X  S  X  OP  X  S  X  T is a linear ordering for representing triggering relations between change We consider the example in Figure 1. In the distributed environment, ENV = { e 1 ,e 2 ,e 3 } , OP = { op 1 ,op 2 ,op 3 ,  X  X  X  ,op 8 } , C = { 2  X  op 4  X  op 1  X  5 , 0  X  2( op 5  X  op 3)  X  ( op 8  X  op 5) } , Definition 7. Based on the time analysis model TAM in a distributed envi-ronment ENV , if there is a change operation sequence  X  =(  X , 0)  X  ( op 1 ,t 1 )  X   X  X  X  X  ( op ontology versioning and evolution based on TAM is timing consistent. From the theorem 1, we can easily obtain the following extended theorem. Theorem 2. Ontology versioning and evolution based on TAM is timing con-sistent if and only if TEBS ( TAM ) =  X  .
 The theorem gives a framework for detecting whether a given time analysis model is timing consistent based on a dis tributed environment. It can answer the second problem put forward in Section 2. Although theorem 1 provides a framework for detecting whether a given time analysis model is timing consistent, the framework is difficult to be operated well because we have no any straight-forward solution to check whether the set of the timing evolution behaviors is empty. Therefore, we need to deeply expl oit a framework and obtain a feasible and well-operated algorithm.

According to the previous definitions, a timing change operation sequence  X  =(  X , 0)  X  ( op 1 ,t 1 )  X   X  X  X  X  ( op n ,t n ) is a timing evolution behavior of TAM , time constraint set C of TAM ,whereforany1  X  i  X  k ,
If f j = op p ,and f j = op q for any p = q ,and1  X  p, q  X  n , where
From equations (2),(3) and (3 X ), we can find that all t 1 ,t 2 ,  X  X  X  ,t n , per se ,must inequalities as GI ( TAM ). We immediately will find a solution to judge whether a given sequence  X  is a timing evolution behavior of TAM .Thatis,if  X  is a timing evolution behavior of TAM ,then t 1 ,t 2 ,  X  X  X  ,t n must be a solution of the group of inequalities in accord with the time constraints in TAM .Ifthereis no any sequence that can satisfy the group of inequalities, i.e, the group has no solution, the ontology versioning based on TAM is not timing consistent. Then we will obtain the following theorem.
 Theorem 3. Ontology versioning and evolution based on TAM is timing con-sistent if and only if GI ( TAM ) has at least a solution.
 We will find that theorem 3 gives me a feasible and well-operated solution to dynamically detect evolution behaviors of distributed ontologies. The specific algorithm can be reduced to evaluating the group of inequalities corresponding to the TAM . This can easily be solved by linear programming. We developed a prototype system call TEAM (TimE Analysis Model) for simply simulating the specific time consistency analysis applications in distributed envi-ronments. This system provides a GUI interface for interacting with users. Each local ontology repository is used for storing partial ontology and its evolution versions. Each ontology from each repository can use time consistency checker for detecting their time consistency. Using main control component ,thewhole distributed system also can be configured and further detect time consistency based evolutions of distributed onto logies. Time Consi stency Checker is, per se , a solution resolver for an inequation set. We use LINDO API 4.1 [10] for our time consistency checker . It can be used to define and resolve a group of inequal-ities in accord with our time analysis model. Figure 2 gives an example of time consistency checking of an version evolving sequence.

One of key problems of the prototype system is how we can label the time marks for each evolution version. We use OWL language for describing ontology information. We know that each ontology description document includes some ontology version information such as &lt; owl:versionInfo &gt; . We can add some labels such as &lt; dc:revisionBegin &gt; and &lt; dc:revisionEnd &gt; into the version information description of ontology documents, their literal values are defined as built-in datatype time . When we want to extract information of performed time of version evolution operations, we can only find these labels and further calculate subtraction of corresponding values of these labels. Current research areas had rapidly shifted from applications based on simple ontology to some aspects such as representation, evolutions and management of multiple ontologies in a distributed environment. Some research approaches con-centrate on ontology versioning and evolution within a distribute environment with diverse but overlapped semantic co ntexts. These semantically overlapped research work includes some ontology versioning approaches such as KAON, Protege. Compatangelo et al [7] propose a blackboard architecture that also al-lows the centralized management of different ontology versions in distributed environments. They also formally specify three types of operations performed on distributed ontologies using rewriting rules which include creation of a con-cept , renaming of a concept and addition of attribute/value pair to a concept . It seems that these work above didn X  X  deal with ontology versioning and evolu-tions with explicit time constraints. Huang et al. [8] developed a temporal logic approach for reasoning multi-version ontologies based on LTLm , the standard model checking algorithm [9] for evaluating a query in the temporal logic LTLm . This approach can better express simple linear time constraints between ontol-ogy versions, e.g., ontology o occurs prior to ontology o . It is rather difficult for ontology engineers to specify ontology versioning and evolution with more specific time constraints. Compared with these works, our work is based on the work about different kinds of change operations specified in [7] and extends the work into ontology evolutions with real-t ime characteristics. It can represent multiple ontology versioning and evolutions with more explicit time constraints in distributed environments. Especially, it can detect valid dynamic evolution behavior of ontologies by the group of inequations. In the case, our model also is feasible and well-operated, and can easily be solved by linear programming. The prototype system can easily be implemented as plugins for some current ontology versioning and evolution management systems. We concentrate on timing ver-sioning of multiple and distributed ontologies because of their operation changes. Therefore, we do not consider semantic c hange relations between terminologies inside ontologies. In fact, semantic change relations have been partially addressed in above related work such as [8]. In future work, we will apply our distributed timing analysis model to real-time applications of electric power information and provide real-time information maintenance and decision supports. In this paper, we propose a timing analysis model for ontology evolutions with more expressive time constraints in distr ibuted environments. Dynamic version-ing and evolutions in the distributed environment can be represented and de-tected using this timing analysis model . All of these detections can be reduced to detecting whether a group of inequalities has solutions. This enables us to better manage dynamic versioning and evolutions of distributed ontologies. This work is supported by the Chinese National  X 863 X  High-Tech Program under Grant No.2006AA01Z231. This work also is supported by Doctor Degree Teacher Science Development Foundation in North China Electric Power University.
