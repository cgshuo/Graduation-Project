 Efficiently extracting dat a from Web pages and converting them into XML have many potential applications [6]. Unfortunately, since most Web pages are in HTML, which is not designed to describe t he content of data, there is no simple way to capture the semantic content in Web pages. Current wrapper approaches work well in extracting data from Web sources with the same structure, or with large sets of pages generated using a commo n temple by searchable databases on-line [1,10], but break down in extractin g data from Web sources with differently structured and frequently changing pages for a domain of interest.
 structured and frequentl y changing pages for a domain of interest. As XML de-scribes the contents of the data and ca nbequeriedandprocessedbyadatabase application [9], we use XML to represent the captured data. We define the domain-specific ontology as the shared conceptualization of knowledge in a par-ticular domain, which consists of thesaurus, label, keywords, begin-landmark, end-landmark, match and separator. According to HTML grammar, an HTML document consists of a sequence of blocks that may be heading , paragraph , list , and table etc. , which may not be in the same semantic hierarchy. As a heading element briefly describes the topic and sem antic hierarchy of the section it intro-duces, we can capture the inter-block semantic hierarchy of an HTML document according to different levels of heading in it. In such cases of using common for-matting information, rather than using heading to show the semantic hierarchy, we can capture the inter-block semant ic hierarchy by the common formatting information. After capturing the inter-block semantic hierarchy, we exploit the structural information that HTML tags imply, such as a list consists of items ,to capture the intra-block semantic hierarchy. After the semantic hierarchy struc-tures in Web pages be captured, then we can recognize and extract concepts by using ontology-based semantic matching.
 ontology. Section 3 and Section 4 present the approach to capturing inter-block and intra-block semantic hierarchy in Web pages, respectively. Section 5 discusses related work. Finally we conclude in Section 6. Domain-specific ontology is the shared conceptualization of knowledge in a par-ticular domain. It consis ts of concepts and relatio ns among the concepts. We formally define domain ontology as follows.
 Definition 1. Domain ontology O D is denoted by O D ( C, R ) , where C is the set of concepts in domain D, R the set of relation among the concepts in C , R A Web page is a string of tokens. We define a token to be a word, an HTML token or a punctuation, and a string to be a string of tokens. As different Web page may use different words to express the same concept in a domain, we need thesaurus of a concept and glob al name for each concept in a domain. And in order to recognize a concept in a Web page, we use thesaurus , label , keywords , begin-landmark , end-landmark , match and separator , which are page-specific independent and are formally defined below, to relate a concept. Definition 2. A concept c in a domain is denoted by: c = (name, thesaurus, label, keywords, begin-landmark, end-landmark, match, separator), where name is the global name of the concept; thesaurus is the set of all the synonym corre-sponding to the concept; label and keyword are set of strings to mark a nested concept name and the content of a concept, respectively; begin-landmark and end-landmark are the set of strings that mark the begin and end of the concept, respectively, where we use b , p , t to denote blank, punctuation, and HTML tags; match is a regular expression or a file name used to match the concept; separator is set of strings to separate the instances, if the concept has multiple instances. All the attributes except name are optional.
 c is called a primary key concept, if it can distinguish different instances of the root concept in a domain ontology. For example, in the domain ontology of home page, name is the primary key concept (suppose there is no duplicate name). And for the concept of Resea rchInterest, thesaurus = { research interest; domain of research; recent research } ,label= { research interest; domain of research; is called a simple string if it contains no labels and keywords of any concept in a domain ontology that marks nested concepts. To capture the nested concepts, we introduce three operators related to a domain ontology as follows. Definition 3. Let s be a string, the domain ontology O D .Then,  X  D ( s )= c ,if  X  c  X  C and  X  s ,where s is a sub-string of s ,and s  X  c.thesaurus ( c.thesaurus denotes the thesaurus attribute of c ); otherwise,  X  D ( s )= s .Ifthereisasubstring s in s that match the c.match of a concept c ,then  X  c ( s )= s .Let l be a label or key of a concept c in the domain ontology. Then  X  D ( l )= c .
 in the domain of home pages, then  X  D ( s ) = publishing; let l = recent areas of research, then  X  D ( l ) = ResearchInterest; let s = Tom Bush X  X  home page, then  X  name ( s ) = Tom Bush. In our system, a domain ontology may be provided man-ually by system users, domain experts, knowledge engineers, or automatically generated based on induction. It is generated once, but can be used many times. 3.1 Exploiting Structural Information An HTML document consists of a head element and a body element, and must have a title element in the head section. We capture the matched content of title as the content of the key concept in the domain ontology as follows. &lt;  X 
K ( T ) &lt;/K&gt; X  ( B ) &lt;/R&gt; ,where R , K are the name of the root element and the name of the key concept in the domain ontology, respectively, and  X  the converting function that converts an HTML document into an XML one. graph , table ,and list etc., but the sequence of blocks that are partitioned ac-cording to HTML grammar may not be in the same semantic hierarchy. As most HTML documents use heading blocks to express its semantic hierarchy, whose six levels from the most important ( h1 ) to the least important ( h6 ) briefly de-scribe the topic and semantic hierarchy of the block it introduces, we can use it to capture the semantic hierarchy of the sequence of blocks by converting the content of each of the most important heading into an XML element, and convert the block that the heading introduces as its content as follows, recursively. S m ,where hn is the most important heading in D ,andeachof S 0 ,...,S m is a is not a simple string, that is, it contains nested concepts recognized by labels or keywords, then  X  ( S i )=  X  ( T i )  X   X  ( S i ).
 the whole semantic hierarchy in a Web page is captured. 3.2 Exploiting Formatting Information Some Web pages may use formatting information, rather than using any heading blocks to show their semantic hierarchy. The formatting information that can be exploited for capturing semantic hierarchy includes bold tags, strong tags and the biggest font etc. In such case, the key is to find out all the text strings that have the most important formatting information, whose function is just as the most important heading in an HTML document. Take it as the important heading elements, then we can use the above approach to capture the semantic hierarchy and convert it into XML. Note t hat we can recursively use the strongest formatting information and take it as the heading elements, so that we can capture the whole semantic hierarchy in a Web page. 4.1 Paragraphs After recursively capturing the inter-blo ck semantic hierarchy, the next step is capturing the intra-block semantic hierarchy. First, consider the p element. If the content of a p element is a simple string, we n eed do nothing. Otherwise, the content of a p element contains nested concepts marked by labels and keywords in domain ontology. We capture the nested concept of p element as follows. if
S contains nested concepts, let S = S C 1 and respectively, then  X  ( D )=  X  ( S 1 )  X  &lt;c&gt; X  ( T ) &lt;/c&gt;  X   X  ( S 2 ) . 4.2 Lists In HTML documents, both unordered lists ul and ordered lists ol consist of li elements, which are their items. All the li elements logically belong to the same level, and can be taken as the children elements of its parent concept. So we can convert all the li elements into the children concept of the parent concept in the domain ontology as follows.
 is a li element and i =1 ,...,n . Let the name of the concept recognized before L is b .If b has a children elements c in domain ontology DTD, then  X  ( L )=  X  (
L  X  (
L )=  X  ( L s , ..., s n is the content of L 4.3 Tables In Web pages, table cells generally contain heading information via the th ele-ment and data via the td element, and may span multiple rows and columns. If a th or td element contains colspan = n or rowspan = n , the particular cell of the th or td is to be expanded to n  X  1 more columns, starting from the current cell in the current row, or to the next n  X  1 rows in the current column, respectively. By inserting redundant cells according to the attributes of colspan and rowspan , we can normalize an HTML table, in which each row has the same number of cells aligned. The attribute-value pairs in the normalized table is what we want to captured. The mapping rule is suited for the HTML tables with marked head-ings via th elements. To convert HTML tabl es without marked headings via th elements, we can recognize their headings by formatting information, which are mainly font (size, bold) [4]. In the case of tables are for creating some type of multiple-column layout for easy viewing, we just ignore the table tags. 4.4 Frames HTML frames allow authors to present documents in multiple views. An HTML document that describes frame layout (called a frameset document) has a HEAD, and a FRAMESET in place of the BODY. To capture the semantic hierarchy in a frame Web pages equals to capture each frame in the page.
 &lt; Then  X  ( D )=  X  ( f 1 )  X  ...  X   X  ( f n ) . The manually or semiautomatic approaches [8], and the induction approaches [3] to extract wanted data from a Web site work well in extracting data from multi-ple Web pages with the same structure, but break down when web pages changed and for large scale of differently structured web pages. The ontology-based or concept schema-based approaches [2,7,5] create a domain-specific wrapper called an extraction ontology, rather than creating a page-specific wrapper. These ap-proaches work well in the regularly formatted pages such of news papers Web sites, but breaks down in the domain where the page formatting can be more complex such as the domain of home pages. These approaches also partly rely on the page-specific formatting. In this paper, we improve our earlier work [4] by using ontology. A system based on the approach presented here has been implemented. We have performed exper iment to extract data on the home pages of researchers in universities with which existed related approaches have poor performance. The domain ontology of home pages is generated easily by manu-ally. The average precision (number of co rrectly extracted concepts / number of all extracted concepts) and the recall (n umber of correctly extracted concepts / number of all the concepts that should be correctly extracted) of our approach are approximately 81%, and 74%, respectiv ely, which are calculated by manually based on experiment data on randomly chose 100 home pages. Compared with other related approaches, our approach has the following advantages. need no any training on the format of those pages. It is adaptive for loosely structured pages and resilient to changes in pages for a domain of interest. tags to automatically capture the semantic hierarchy, and finer granularity in-formation in Web pages based on domain ontology. Moreover, it uses recursive function, so it can handle arbitrarily nested structure in Web pages. This paper defines the domain-specific ontology, exploits both structural in-formation and common formatting information to automatically capture the nested semantic hierarchy, and recognize and extract data in Web pages by us-ing ontology-based semantic matching. It is adaptive with loosely structured pages and resilient to changes in pages for a domain of interest.

