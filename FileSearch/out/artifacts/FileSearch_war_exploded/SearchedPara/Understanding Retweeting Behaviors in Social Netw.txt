 { caikeke, lizhang, suzhong } @cn.ibm.com Retweeting is an important action (behavior) on Twitter, in-dicating the behavior that users re-post microblogs of their friends. While much work has been conducted for mining textual content that users generate or analyzing the social network structure, few publications systematically study the underlying mechanism of the retweeting behaviors. In this paper, we perform an interesting analysis for the problem on Twitter. We have found that almost 25.5% of the tweets posted by users are actually retweeted from friends X  blog spaces. Our investigation unveils that for the retweet behav-iors, some statistics still follows the power law distribution, while some others violate the state-of-the-art distribution for Web. Based on these important observations, we pro-pose a factor graph model to predict users X  retweeting be-haviors. Experimental results on the Twitter data set show that our method can achieve a precision of 28.81% and recall of 37.33% for prediction of the retweet behaviors. H.2.8 [ Database Management ]: Data Mining; J.4 [ Computer Applications ]: Social and Behavioral Sciences Algorithms, Experimentation Twitter, Retweet behavior, Social influence, Factor graph
The rapidly developing Web-based social applications and media, such as Facebook, Twitter, and Flickr, have attracted much attention. Message forwarding (e.g., retweeting on Twitter.com) is one of the most popular functions in many existing social networks. In twitter, people can choose to retweet messages on their blog space. In this way, the infor-mation carried by the message can be quickly spread in the social network. A simple example is shown below, when a user is viewing the message m : which indicates that a message was originally posted by  X  X hree Ten X  and was retweeted by  X  X ahara X , and now is retweeted by the current user again. In general, a retweeted message consists of trace and content .Contentsthatwere-fertocanbeextendedtoanyformsaslongasitcanbe forwarded from users to others or shared by users with all their friends, such as real blogs, photos and external links.
While much work has been conducted for mining textual content that users generate or analyzing the social network structure [4, 2, 5, 7], few publications systematically study the underlying mechanism of the retweeting behaviors [1, 8]. Some specific messages posted by particular users are more likely spread widely while others attract attention from few users. It should be said that various reasons make the message to be propagated, and it is interesting to investi-gate why some messages can be spread widely in the social network. Specifically, we analyze the retweeting behavior for each individual user and message, and aim to under-stand why some users tend to retweet messages, while others not, and what factors are responsible for acts of retweeting of messages. Accordingly, an interesting and fundamental question is: can we predict the retweeting behaviors based on users X  history behaviors and the (global or local) trend on the Web?
Based on the analysis of the factors that are attributed to users X  decisions, messages, users, and the relations between them will be formally defined in this section, and then we formalize this problem.

To model the retweeting behavior, we collect a set of in-stances that describe the scenario when u i receives a mes-sage m ij = { c j , p ij } at time t ij .Variable c j denotes the content of the original message m ij .Vector p ij = { p ij 1 ,p ij 2 ,...,p ijl ij } denotes the trace of the message seen by the user. Although the contents seen by different users may be the same, the traces could be different among users. p ij 1  X  U is the initial poster of the message, p ijk  X  U is the k -th bearer of the message m ij on the trace, and l ij is the length of the trace. The follower-followee relationships are required to be satisfied between each consecutive user pair on the trace.

The spreads of messages proceed in a cascading fashion successively from the user who posts the message to some of his/her followers, and subsequently to some followers X  fol-lowers. Thus, each message in the input set of instances has an ancestor message, by linking all the retweets with their ancestors, we could obtain a set of retweet threads. in other words, retweeting instances constitute a set of directed retweeting trees embedded in the friendship network. Definition 1. Retweeting Prediction Problem : Given a social network G and a set M of tweets and retweet behaviors in history, we aim to predict (1) if users will retweet the tweet m to their friends after viewing it, (2) the range of spread for a new tweet m written by user u .
The first subproblem (referred to as local prediction )aims at predicting the behavior of users, based on the assumption that the message posted by one of their friends has already appeared on their timelines, and seen by the users. However in a more flexible conditions instead of being given a com-plete scenario, more factors are responsible for their retweet-ing/ignoring behaviors, especially their behaviors are highly restrained or promoted by their friends, which is depicted in the second problem (referred to as global prediction ).
In this section, we formalize our problem in a semi-supervised learning framework, then tackle it by a factor graph model [3, 6, 9], incorporating the local prediction problem with the global constraint, and apply a max-sum algorithm to train the probabilistic model.
As we describe in Section 2, the positive instances (labeled with y ij = 1) constitute a set of retweeting trees, and by in-tegrating the negative instances (labeled with y ij =0),we augment the retweeting trees into a set of augmented retweet-ing trees { A d } d (ARTs). The root of each ART represents the initial poster of the message, the interior nodes represent the positive instances, corresponding to the retweeting be-haviors, whereas the leaves represent the negative instances, corresponding to the ignoring behaviors.

The problem can be formalized as a semi-supervised learn-ing problem. We collect a set of labeled instances T consist-ing of non-root nodes { ( u i ,c j , p ij ,t ij ) ,y ij } ARTs, and a set of unlabeled instances S consisting of in-stances from a series of incomplete ARTs. When we try to estimate the propagation of a certain newly created mes-sage, the content c j and the initial poster p ij 1 are known for each user u i  X  U , and we may assume the content does not change during the propagation, however, the length of the trace l ij and all the other trace users p ij 1 ,...,p ijl j known. Therefore, the content c j , the initial poster p ij 1 the elapsed time t of the instances in T are fixed, whereas we could enumerate all the possible traces p ij starting from p and ending at some users { u i } i . Such a series of ARTs con-stitute the solution space, and finally, the unknown labels y ij is determined.
We introduce a factor f ij that ensures the extracted fea-tures x ij =( x k ij ) k could represent the decision y ij introduce a set of weight variables, denoted by  X  = (  X  k for each extracted feature. Each feature factor f k ij is defined as a regularized sum-of-square error function as follows: where  X  is the regularization coefficient that controls the rel-ative importance of the data-dependent error and the regu-larization term  X   X .

For unlabeled instances, we could define a feature factor g ( y ij ,  X ) similarly as for the labeled instances. Since the calculation for the features depends on the choice of trace p ij , and subsequently the factor should incorporate the un-known variable, i.e.,
From the perspective of validity of retweeting trees, we in-troduce a constraint factor for each unlabeled instance, and it is also defined in terms of y ij , which verifies the validity of each propagation path from the initial poster p ij 1 to the current user u i . Equivalently, the constraint can be defined for each consecutive bearers, e.g., u i and the preceding user p ijl j (denoted as u i I ) for the message m ij instead of the current user u i and the whole trace p ij , and formally,
To make the constraint satisfied, we could alter the val-ues of the decision variables y ij in two different ways: by setting y ij = 0 or setting y i I j = 1. Both approaches bring effects differently on other factors, the gains and losses of both approaches are evaluated in the optimization of the global objective by our algorithm.

In sum, the solution for problem that defined in Section 2 is tackled by solving the optimization objective, i.e., the normalized product of Eq. 1, 2, 3. where Z is a normalization factor,  X  is the set of variables,
We derive an iterative algorithm for the above objective function based on the loopy max-sum algorithm. Details are omitted due to space limitation.
In this section, we first statistically study the retweeting data, and then define features for modeling retweet behav-iors. We conduct experiments on the Twitter dataset for retweet prediction and spread prediction.
In this section, we demonstrate a statistical analysis on some specific features that motivate users to retweet instead of acts of ignoring messages, and conclude notable results. Retweeting activity of users For each retweet, we count the total number of retweets from each retweeter within the period of time and sort them in descending order with fixed unit interval. From Figure 1(a), we can see that most of the users retweet at a low frequency (and the average number of retweets of a user within 7 days is 197) and only a few users are retweet-aholic. A portion of 3.13% of the retweets are posted by users who retweet more than 1,000 times. It sat-isfies the long tail theory, i.e., the activity behavior of each the similarity scores is shown in Figure 3 in x-logarithmic scale.

We can see from the figure that if the users are interested in the message (the Jaccard distance is greater than 10  X  there is a higher probability for them to retweet it. If there are rarely common terms, then there is still a relatively high probability to retweet. Comparatively, if Jaccard distance is among 10  X  4 and 10  X  3 , users are more likely to ignore them. In fact, the average similarity of an arbitrary tweet and an arbitrary user lies in the same interval. Feature Description. As we have shown in Section 4.1, the delay periods are located around two different means (corresponding to short-term period t short i and long-term t i period). To predict the willingness of retweeting at time t ij ,delay( u i ,t ij ) is defined as where n short and n long are the prior probabilities calculated with EM algorithm of Gaussian mixture model. Intuitively, we could expect that the user u i with higher probability re-sponses to retweet at two different latencies corresponding to t short i and t long i . We define 22 features in the training pro-cess extracted from the users X  history preferences, messages X  contents, information of the trace, and the time delay and as the basis for the further prediction. Details are omitted due to space limitation.
 Dataset. In the task of predicting the pair-wise retweeting behavior, we split the datasets on the level of ARTs, instead of instances, into training set and testing set. To evaluate the propagation of messages, we choose a sub dataset from that used in predicting the pair-wise retweeting behavior. Measures and Baselines. For evaluating the prediction of pair-wise retweeting behavior, precision and recall are used to evaluate the performance. For evaluating the prediction of propagation spread of messages, it can be considered as a  X  X etweeter retrieval X  task, and both concepts in IR scenar-ios are applied. We apply two state-of-the-art methods in classification tasks, linear SVM and L1-regularized logistic regression (LogReg) for labeling the instances.
By employing the method proposed in Section 3 and the results are shown in Table 4.3. We can see that the proposed method does not outperform the baseline methods for the pair-wise classification task. In fact, as a task that only cares the isolated features of instances, it has been demon-strated that SVM and LogReg are more capable of repre-senting the characteristics of the distribution of samples in feature space, and tend to be more discriminable for unseen data. The discriminability of our approach is only based on the factor f , which is the least sum-of-square errors.
For the task of predicting the spread of messages, we it-eratively run the SVM classifier and the LogReg classifier for determining the behavior of a user that is consecutive to the initial poster or a  X  X etweeter X  that has been predicted to retweet in a cascade fashion. Different from the baseline methods, our method considers the entire graph as a whole, and the behaviors of users will be automatically judged by not only their followees, but also followers, who still pro-vide valuable information for the consistency of the com-plete propagation. Our method can achieve a performance of 0 . 2881 in terms of precision on average, whereas both SVM and LogReg fail to predict the range of propagation of messages, with precisions of 0 . 0144 and 0 . 0052 respec-tively. Our method outperforms LogReg but fails for SVM in terms of recall, which is because the recall is the arith-metic average for all the instances, and our method predicts that the message of some  X  X hort X  ARTs will not be prop-agated. Moreover we further observe the most important features, we find that the model learned by our approach prefers the authority of users on trace. Specifically, users in the trace of higher authorities can promote the propagation of messages more effectively than those of lower authorities, which makes it outperform the baseline methods.
In this paper, we perform an interesting analysis for the retweet problem on Twitter, and discover some interesting phenomena. Specifically, we analyze how the retweet be-havior is influenced by factors: user, message, time, etc. Based on these important observations, we propose a semi-supervised framework on a factor graph model to predict users X  retweet behaviors. Experimental results on a data set show that our method can achieve an precision of 28.81% and recall of 37.33% for prediction of the retweet behaviors in completely actual scenarios.
