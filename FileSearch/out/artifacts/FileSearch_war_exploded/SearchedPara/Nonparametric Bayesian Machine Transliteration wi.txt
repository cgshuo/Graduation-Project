 Proper names are one source of OOV words in many NLP tasks, such as machine translation and cross-lingual information retrieval. They are often trans-lated through transliteration, i.e. translation by pre-serving how words sound in both languages. In general, machine transliteration is often modelled as monotonic machine translation (Rama and Gali, 2009; Finch and Sumita, 2009; Finch and Sumita, 2010), the joint source-channel models (Li et al., 2004; Yang et al., 2009), or the sequential label-ing problems (Reddy and Waxmonsky, 2009; Ab-dul Hamid and Darwish, 2010).

Syllable equivalents acquisition is a critical phase for all these models. Traditional learning approaches aim to maximize the likelihood of training data by the Expectation-Maximization (EM) algorithm. However, the EM algorithm may over-fit the training data by memorizing the whole training instances. To avoid this problem, some approaches restrict that a single character in one language could be aligned to many characters of the other, but not vice versa (Li et al., 2004; Yang et al., 2009). Heuristics are introduced to obtain many-to-many alignments by combining two directional one-to-many alignments (Rama and Gali, 2009). Compared to maximum likelihood approaches, Bayesian models provide a systemic way to encode knowledges and infer com-pact structures. They have been successfully applied to many machine learning tasks (Liu and Gildea, 2009; Zhang et al., 2008; Blunsom et al., 2009).
Among these models, Adaptor Grammars (AGs) provide a framework for defining nonparametric Bayesian models based on PCFGs (Johnson et al., 2007). They introduce additional stochastic pro-cesses (named adaptors ) allowing the expansion of an adapted symbol to depend on the expansion his-tory. Since many existing models could be viewed as special kinds of PCFG, adaptor grammars give general Bayesian extension to them. AGs have been used in various NLP tasks such as topic modeling (Johnson, 2010), perspective modeling (Hardisty et al., 2010), morphology analysis and word segmenta-tion (Johnson and Goldwater, 2009; Johnson, 2008). In this paper, we extend AGs to Synchronous Adaptor Grammars (SAGs), and describe the in-ference algorithm based on the Pitman-Yor process (Pitman and Yor, 1997). We also describe how transliteration could be modelled under this formal-ism. It should be emphasized that the proposed method is language independent and heuristic-free. Experiments show the proposed approach outper-forms the strong EM-based baseline in the English to Chinese transliteration task. 2.1 Model A Pitman-Yor Synchronous Adaptor Grammar (PYSAG) is a tuple G = ( G G s = ( N , T s , T t , R , S,  X  ) Context-Free Grammar (SCFG) (Chiang, 2007), N is a set of nonterminal symbols, T s / T t are source/target terminal symbols, R is a set of rewrite rules, S  X  N is the start symbol,  X  is the distri-bution of rule probabilities, N adapted nonterminals, a  X  [0 , 1] , b  X  0 are vec-tors of discount and concentration parameters both indexed by adapted nonterminals, and  X  are Dirich-let prior parameters.
 Algorithm 1 Generative Process The generative process of a synchronous tree set T is described in Algorithm 1. First, rule probabil-ities are sampled for each nonterminal A  X  N (line 1) according to the Dirichlet distribution. Then syn-chronous trees are generated in the top-down fashion from the start symbol S (line 3) for each yield pair. For nonterminals that are not adapted, the grammar expands it just as the original synchronous grammar (function S AMPLE SCFG). For each adapted non-terminal A  X  N C Let z chronous subtree generated at the i th expansion of A . At some particular time, assuming n subtrees rooted at A have been generated with m different types in the cache of A , each of which has been gen-erated for n grammar either generates the ( n +1) th synchronous subtree as SCFG (line 17) or chooses an existing subtree (line 22), according to the conditional prob-ability P ( z | z
The above generative process demonstrates  X  X ich get richer X  dynamics, i.e. previous sampled subtrees under adapted nonterminals would more likely be sampled again in following procedures. This is suit-able for many learning tasks since they prefer sparse solutions to avoid the over-fitting problems. If we integrate out the adaptors, the joint probability of a particular sequence of indexes z with cached counts ( n 1 , . . . , n m ) P Y ( z | a, b ) = Given synchronous tree set T , the joint probability under the PYSAG is P ( T |  X  , a , b ) = Y where f times that rules r  X  R is the Beta function. 2.2 Inference for PYSAGs Directly drawing samples from Equation (2) is intractable, so we extend the component-wise Metropolis-Hastings algorithm (Johnson et al., 2007) to the synchronous case. In detail, we draw sample T  X  chronous tree T  X  A ( T i , T  X  i ) = min 1 ,
In theory, Q could be any distribution if it never assigns zero probability. For efficiency reason, we choose the probabilistic SCFG as the proposal dis-fore inference and save the structure of synchronous parsing forests. During the inference, we only change rule probabilities in parsing forests without changing the forest structures. The probability of rule r  X  X   X  rooted at A , and [ f rule r is used in the tree set T pling algorithm described in (Blunsom and Osborne, 2008) to draw a synchronous tree from the parsing forest according to the proposal Q .

Following (Johnson and Goldwater, 2009), we put an uninformative Beta(1,1) prior on a and a  X  X ague X  Gamma(10, 0.1) prior on b to model the uncertainty of hyperparameters. 3.1 Grammars For machine transliteration, we design the following where the adapted nonterminal Syl is designed to capture the syllable equivalents between two lan-guages, and the nonterminal NEC , SEC and TEC cap-ture the character pairs with no empty character, empty source and empty target respectively. Note that this grammar restricts the leftmost characters on both sides must be aligned one-by-one. Since our goal is to learn the syllable equivalents, we are not interested in the subtree tree inside the syllables. We refer this grammar as syllable grammar .

The above grammar could capture inner-syllable dependencies. However, the selection of the target characters also depend on the context. For example, the following three instances are found in the train-ing set: h a a g a a r d / D [ai]  X  [ge] [de] i where the same English syllable h a a i are translit-erated to h c [ao] i , h D [ai] i and h C [a] i respec-tively, depending on the following syllables. To model these contextual dependencies, we propose the hierarchical SAG. The two-layer word grammar is obtained by adding following rules: We might further add a new adapted nonterminal Col to learn the word collocations. The following rules appear in the collocation grammar :
Figure 1 gives one synchronous parsing trees under the collocation grammar of the example h m a x /  X  [mai]  X  [ke] d [si] i . 3.2 Translation Model After sampling, we need a translation model to transliterate new source string to target string. Following (Li et al., 2004), we use the n-gram translation model to estimate the joint distribution syllable pair of the string pair h s / t i .
The first step is to construct joint segmentation lattice for each training instance. We first generate a adapted nonterminals, then use synchronous parsing to obtain probabilities in the segmentation lattice. Specifically, we  X  X latten X  the collected subtrees un-der Syl , i.e. removing internal nodes, to construct new synchronous rules. For example, we could get two rules from the tree in Figure 1:
If multiple subtrees are flattened to the same syn-chronous rule, we sum up the counts of these sub-trees. For rules with non-adapted nonterminal as parent, we assign the probability as the same of the sampled rule probability, i.e. let  X   X  the adapted nonterminal Syl , there are two kinds of rules: (1) the rules in the original probabilistic SCFG, and (2) the rules flattened from subtrees. We assign the rule probability as where a and b are the parameters associated with Syl , m is the number of types of different rules flat-ten from subtrees, n the total number of flatten rules. One may verify that the rule probabilities are well normalized. Based on this merged grammar G  X  , we parse the training string pairs, then encode the parsed forest into the lattice. Figure 2 show a lattice example for the string pair h a a l t o / C [a] [er]  X  [tuo] i . The transition probabilities in the lattice are the  X  X nside X  probabilities of corresponding Syl node in the pars-ing forest.
After building the segmentation lattice, we train 3-order language model from the lattice using the use the Viterbi algorithm with beam search (Li et al., 2004) to find the best transliteration candidate. 4.1 Data and Settings We conduct experiments on the English-Chinese data in the ACL Named Entities Workshop (NEWS evaluation, we report the word accuracy and mean F-score metrics defined in (Li et al., 2009).
In the inference step, we first run sampler through the whole training corpus for 10 iterations, then col-lect adapted subtree statistics for every 10 iterations, and finally stop after 20 collections. After each it-eration, we resample each of hyperparameters from the posterior distribution of hyperparameters using a slice sampler (Neal, 2003). 4.2 Results We implement the joint source-channel model (Li et al., 2004) as the baseline system, in which the ortho-graphic syllable alignment is automatically derived by the Expectation-Maximization (EM) algorithm. Since EM tends to memorize the training instance as a whole, Li et al. (2004) restrict the Chinese side to be single character in syllable equivalents. Our method can be viewed as the Bayesian extension of the EM-based baseline. Since PYSAGs could learn accurate and compact transliteration units, we do not need the restriction any more.
 Table 2 presents the results of all experiments. From this table, we draw following conclusions: 1. The best results of our model are 67 . 1% / 87 . 2% 2. Comparing grammars of different layers, we 4.3 Discussion Table 3 shows some examples of learned syllable mappings in the final sampled tree of the syllable grammar. We can see that the PYSAGs could find good syllable mappings from the raw name pairs without any heuristic or restriction. In this point of view, the proposed method is language independent.
Specifically, we are interested in the English to-ken  X  X  X , which is the only one that has two corre-sponding Chinese characters ( X   X  d [ke si] X ). Ta-ble 3 demonstrates that nearly all these correct map-pings are discovered by PYSAGs. Note that these kinds of mapping can not be learned if we restrict the Chinese side to be only one character (the heuristic used in (Li et al., 2004)). We will conduct experi-ments on other language pairs in the future. This paper proposes synchronous adaptor gram-mars, a nonparametric Bayesian model, for machine transliteration. Based on the sampling, the PYSAGs could automatically discover syllable equivalents without any heuristic or restriction. In this point of view, the proposed model is language indepen-dent. The joint source-channel model is then used for training and decoding. Experimental results on the English-Chinese transliteration task show that the proposed method outperforms the strong EM-based baseline system. We also compare grammars in different layers and find that the two-layer gram-mars are suitable for the transliteration task. We plan to carry out more transliteration experiments on other language pairs in the future.
 We would like to thank the anonymous reviewers for their helpful comments and suggestions. We also thank Zhixiang Ren, Zhenghua Li, and Jun Sun for insightful discussions. Special thanks to Professor
