 Ontology, special domain ontology [1, 2], plays an important role in information extract and exchange. These ontology documents must be sound and complete. Now, most of them had been built by experts. On the one hand this work con-sumes lots of time, on the other hand these ontologies have personal features. Clustering existing lots of ontology documents on the WWW or the Semantic Web is important for user to refine ontology or integrate ontology.
 (Problem Solving Makeup Language). The core of PSML is distributed inference engines. The precondition of PSML is clustering appropriate contents and meta-knowledge like ontology information on the Semantic Web. Therefore clustering ontology documents on the WWW or the Semantic Web is very important for PSML.
 has become the new standard for ontology representation and exchange on the Internet. It uses characteristic of other ontology languages for reference in its de-veloping process. Clustering research in this paper aims at the OWL documents. Clustering other ontology languages like as: RDF, RDFS, DAML can amend the method in the paper. 1.1 Related Work A key problem in clustering research is computing semantic similarity between objects. Traditional distance-based method in computing similarity between database objects is not suitable for OWL documents. OWL essentially is semi-structure data. So evaluating semantic similarity can use methods of computing semantic similarity between XML documents for reference. The methods in lit-eratures [5 X 8] can be divided into two kinds: one is structure similarity [5, 7, 8] and another is semantic similarity [6]. The common feature of structure simi-larity is modelling XML document as XML tree and evaluating similarity by tree operation [8] or path structure [5, 7]. Semantic similarity firstly computes similarity between basic elements in document, then evaluates full document based on these similarities. However, t he methods can X  X  directly evaluate sim-ilarity between OWL documents. The reason is that the method of structure similarity lacks semantic information whereas the method of semantic similarity only considers basic elements in XML d ocument. OWL document is a language of representing knowledge. It can descr ibe all kinds of objects in world and re-lations between the objects. The most i mportant difference from XML is that OWL is an inferential language with semantic. It enhances inheritance between objects and complex classes representation.
 representation in OWL document. Then it proposes a method of computing se-mantic similarity between OWL documents and integrates it with hierarchical clustering algorithm to cluster OWL documents, which are built by experts or auto tools. The results of experiments show the algorithm has better effect on clustering OWL documents.
 1. The paper proposes a method of comput ing similarity between simple classes 2. When the paper evaluates similarity between complex classes, it uses set 3. The method in the paper has better effect on clustering OWL documents, 1.2 Paper Organization The paper is organized as follows. Section 2 discourses upon method of com-puting similarity between classes in OWL documents. Section 3 introduces how to compute similarity matrix of OWL documents set. Experimental results are found in section 4. Section 5 concludes the paper and presents future work. An OWL concerns classes, properties, instances of classes (named individual). To compute similarity of two OWL documents, it is necessary to compute similar-ity of elements in OWL documents. Basic elements in OWL are classes. Classes have three types: simple named classes, anonymous classes, and complex classes. Commonly anonymous classes have not own local names, but they have prop-erties which restrict instances of anonymous classes. Anonymous classes can be seen as special simple classes. DatatypeProperty in OWL denotes relation be-tween instances of classes and RDF liter als or XML Schema and ObjectProperty denotes relation between instances of two c lasses. Similarity of properties includ-ing DatatypeProperty and ObjectProperty just explains similarity of two classes, which are domains of these properties. We propose a method to compute simple classes similarity that considers the ba sic semantic, properties of classes. 2.1 Similarity of Two Simple Classes Members of simple classes generally are restricted by directly sup-classes and their properties as Figure 1. According to inheritance of class, a class can inherit its all sup-classes properties. In the way, restriction of sup-classes can translate into restriction of properties in sup-classes. In addition to consider basic semantic similarity of classes (names of simple nam ed classes denote semantic), similarity between properties which restrict the classes in computing similarity of two classes must be considered.
 cause two kinds of properties have different restrained rang, it is not meaning to compare similarity of different property typies. So similarity of two classes can be computed by basic semantic similarity BasicSim ( c 1 ,c 2 )(If c 1 ,c 2 have an anonymous class, then BasicSim ( c 1 ,c 2 ) = 0.), similarity of DatatypeProper-ties in two classes, and similarity of ObjectProperties in two classes as Equa-number ( sum )=1+ | number ( BMDP ) | + | number ( BMOP ) | , number ( BMDP ) and number ( BMOP ) are number of the most mapping DatatypeProperty pair and number of the most mapping ObjectProperty pair respectively.
 essentially resources. Deter mining basic semantic sim ilarity of these resources is matching their names. Their names include local names and namespaces. In general, different OWL documents have their own namespaces. Namespaces only denote location of resource. So computing similarity between names considers local name. Comparing rule is that if local names of two resources are same, value of their basic semantic similarity is  X 1 X ; otherwise value of their basic similarity is  X 0 X .
 DatatypeProperties may range over RDF literals or simple types defined in accordance with XML Schema datatypes. If DatatyperProperty has rang re-striction, determining similarity of DatatypeProperties must consider their rang restriction other than their basic semant ic similarity as resources. Rang restric-tion directly compares Datatypes in T able 1, which are recommended for use with OWL. The similarity of DatatypeProperties is defined as Equation 2.
DataP ropertySim ( p 1 ,p 2 )= be defined to be a specialization (subproperty) of an existing ObjectProperty. In the condition, it can inherit super property X  X  domain and rang as Figure 2. Similarity of ObjectProperty mainly is re stricted by their ran ges other than their basic similarity as resources. Though type restriction and cardinality restriction have a little influence on similarity of ObjectProperty, they can be neglected to avoid expensive time. So computing metho d of ObjectProperty similarity is the same as DatatypeProperty X  X  (Equation 3).
 from similarity of DatatypeProperty rang. It is mainly decided by similarity of classes which restricts ran g of ObjectProperty. Note that if class of represent rang includes class of represent domain, the computing method of simple class similarity can come forth infinity circulation. In the situation, similarity of Ob-jectProperty is to match their local names, that is basic semantic similarity. in the appendix. 2.2 Similarity of Complex Classes In order to improve reasoning capability, deducible ontology languages like as: DAML and OWL provide representation of complex classes comparing ontology language of metadata representation such as: RDF, RDFS. Representation of complex classes in OWL document includes Enumerated, Intersection, Union, Complement, and Equivalence. Complex classes also are sets. Evaluating their similarity can use similarity of two sets for reference.
 in OWL document. So similarity of two enumerated classes is the percent of number of same individuals in two classes on maximum number of individuals in every class. If there is only one Enum erated class in comparing two classes, similarity between them can directly use similarity of basic resource. OWL documents. According to the above comparing rule: uating similarity between Union (Intersection, Complement, Equivalence) and simple class can be translated into computing similarity between members in set operations and simple class. We use theory of fuzzy sets to evaluate their similarity for reference. Table 2 shows det ailed expression. Strictly speaking,the expression is not right. However, it can reflect value of similarity in a way. Note that if members of complex classes include complex classes again, the computing method will come forth infinite circulation. In the situation, comparing classes can directly be seen as resources and their similarity is their basic semantic similarity.
 ments. According to computing rule: In addition to classes, similarity betw een instances is also considered because we call the set of individuals the extension of the class. An OWL document can be parsed as set of classes and set of individuals. Similarity of two OWL documents is defined as weighted sum of classes sets similarity and individuals sets similarity.
 give birth to the matrix of m  X  n , in which every element is similarity of corre-sponding two class in sets according to the algorithm in section 2. Classes sets similarity is the following equation.
 ClassesSim ( o 1 ,o 2 )= Similarity of individuals sets satisfies the following equation.
 where number ( o 1 ,o 2 ) is number of same individuals in two OWL documents; number ( o 1 )and number ( o 2 ) is number of individuals in documents o 1 and o 2 respectively. Generally, OWL documents built by experts represent vocabularies in domain and rarely deal with individuals. OWL documents learned by auto tools include lots of individuals. From the point a view, selecting weight in com-puting similarity of two OWL documents is different.
 matrix is seen as similarity matrix in hierarchical clustering algorithm. However, we must select right weight, number of clusters, and threshold.
 culations. The first is computing similarity of two classes. Complication of the algorithm is product of number of properties in two classes. The second is used to compute similarity of two documents. Complication of the algorithm is product of number of classes or individuals in two documents. Complication of comput-ing similarity matrix is decided by number of documents and complication of computing similarity of two documents. To evaluate performance of the method in the paper, we collect two sets of OWL documents on different application domain from Internet. One is built manually; another is learned from text by auto tools. The number of classes and individuals in these documents ranges from 20 to 300. We implement the method in Java and run the experiments on 2.4GHZ Pentium 4 PC with 1GB RAM under Windows 2000 professional.
 better effect on two kind sets of documents: OWL documents built manually and OWL documents learned by auto tools. However, efficiency of auto sets is better than manual sets X . Through random sampling, we find that there are fewer complex classes and relation of class-property in auto sets than in manual sets. Computing similarity of two classes in manual sets expends more time than computing similarity of two classes in auto sets.
 documents that have clearly natural partitioning as Table 4. When setting right number of clusters, we obtain clusters that exactly match the original partition-ing. However, we select different weight and threshold for auto sets and manual sets in clustering these documents. Manual building OWL documents generally illuminate vocabularies in domain and include a few individuals. So weight of individuals set is little. Auto learning OWL documents generally include lots of individuals. So weight of individuals set is more. In addition to, we select differ-ent threshold for auto sets and manual sets. The reason is that manual building OWL documents in different domain have less similarity than auto learning OWL documents from text. Though auto learning OWL documents belong to different domain, they have some same node as: root node. In the condition, similarity between these documents generally is not  X 0 X . So threshold of cluster is greater. also compared it with tree-edit distance in literature [7]. To our best knowledge, there are not methods which focus on computing similarity between OWL doc-uments. This paper employs a method of computing similarity between XML documents X  X ree-edit distance to com pute similarity between OWL documents. From the performance angle, complicatio n of tree-edit distance is the same as the method in the paper. But practically, our experiments show that tree-edit distance algorithm has lower performance. The reason is that when parsing OWL document as normal XML tree, the num ber of nodes can be doubled. From the precision angle, when setting right number of clusters, we don X  X  obtain clusters that exactly match the original partitioning. We find that some OWL documents without correlation obtain large value of similarity using tree-edit distance. The reason is that the method of tree-edit dist ance only considers structure. For ex-ample, there are two ObjectProperties in OWL documents as Table 5. Their semantic are not completely the same, but structure is the same to some extent. The paper proposes a method about computing similarity matrix of OWL docu-ments set based on semantic analysis. In order to cluster OWL documents built by experts and auto tools, we integrate the method with hierarchical clustering algorithm. A great lot of experiments results show that the method has better effect on clustering OWL documents.
 ing results. Another interesting work is management of ontology knowledge base. The work is (Partially) supported by the NSFC major research program:  X  X a-sic Theory and Core Techniques of Non-Canonical Knowledge X  (60496322) and Open Foundation of Beijing Municipal Key Laboratory of Multimedia and In-telligent Software Technology.
 Al g o r i thm : C l ass Si m Output : C l ass s i m il ar i t y S tep 1: B as i cs i m il ar i t y S tep 2 : c o mput in gs i m il ar i t yo f D atat y pe P r o pert y S tep 3: c o mput in gs i m il ar i t yo fOb j ect P r o pert y S tep 4 : s i m il ar i t y bet w ee n s i mp l ec l asses
ClassSim = w P r o gram : DPSi m (T he pr o gram o f OP Sim ( c 1 ,c 2 )i ss i m il ar as i t .) Output :Si m il ar i t y sum
SimM atrix = SimM atrix  X  ( p
MatchList = LocalM atch ( SimM atrix, | DataP roperty ( c retur n DPSi m Property or ObjectProperty). It will produce a one-to-one mapping, i.e., a DatatypeProperty in c 1 matches one DatatyperProperty in c 2 and vice versa.
