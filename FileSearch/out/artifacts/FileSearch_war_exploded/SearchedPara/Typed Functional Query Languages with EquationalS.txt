 We present a framework for functionally modeling query lan-guages and data models. Data and queries are uniformly represented by rst-order functions, and query-language con-structs by polymorphic higher-order functions. The func-tions are typed by a database-oriented type system that supports polymorphism and nesting of types, thus one can perform static type-checking and type-inferencing of query-expressions. The query language can be freely extended by introducing new querying constructs as polymorphic higher-order functions.

While type information gives the input-output descrip-tion of the functions, the semantic information is captured by equational speci cations. Knowledge about the func-tions is represented as equalities of functional expressions in the form of equations. By equational axiomatization of the query language , database problems of query equivalence and answering-query with views can be posed as equational word-problems and equational matching.
 Categories and Subject Descriptors: H.2 [Database Management]: Languages General Terms: Languages, Theory Keywords: functional query languages, equational logic, type system, OLAP
The functional approach to database management has been the focus of research for many years [3, 4]. The e ort of applying functional languages for querying database has produced several functional query languages such as FQL [3], DAPLEX [8] and Machiavelli [6]. The advantages of these systems is that the query language is modular and typed, allowing more static checking for soundness of the queries. Unfortunately, many of the bene ts are language speci c. For instance, the type-inference algorithm in [4] is specialized to the proposed query-language.

We present a generic framework to describe functional query languages. First, we describe a flexible and database-centric type-system that allows polymorphism and nesting of types. Data objects are represented by concretely typed rst-order functions, while constructs in the query language by polymorphic rst-or second-order functional symbols. Queries are naturally de ned as functional expressions formed by syntactic composition of these functional symbols.
The type information is captured by the type-signature of the functional symbols, but it does not describe the seman-tics of the queries. In our framework, equations over queries as functional expressions are used to describe equivalence of queries. Thus, knowledge of a query language is represented by a set of equations, or an axiomatization of the functional symbols (data objects and/or querying constructs).
Our framework allows a uniform treatment of the type-checking and type-inference problem with a language inde-pendent approach. While static analysis of type-information prevents erroneous queries, it cannot address the semantic related issues such as query equivalence or, more generally, answering queries with views. For semantic reasoning, we rely on the equational speci cations of the functional sym-bols. We show that decidable equational theories can be e ectively used to address semantic query analysis.
Equational logic studies logical systems with functional symbols. It has a rich literature and long history, and has found applications in many areas of computer science. Many theoretical and algorithmic results are known in solving prob-lems in equational logic.

The two families of problems that are applicable to our work are the word problem [1] and equational uni cation [2, 5]. They are particularly interesting to us because query equivalence and rewriting with views can be posed as the word problem and the uni cation problem, respectively. We illustrate by example the elements of our framework. Type Expressions
We use an attribute-based type system to express type information of database objects and queries. This type system is similar to the record-types proposed in [7, 9], but we genearlize it by introducing attribute variables. A type-expression is a nested record in which row-variables and attribute-variables can be used to model polymorphism. Consider the type: It describes a partially speci ed nested-relation people .One of the attributes of people is unspeci ed, hence, denoted by the attribute variable u . The type of the attribute name is also unknown, hence denoted by a row-variable x ,whichcan be instantiated to any record. A type is concrete it does not contain variables, otherwise it is polymorphic. The type t above is polymorphic.
 Functions
Data objects are represented by rst-order functional sym-bols of the form: f : s  X  t where s and t are concrete type-expressions describing the type of input and output of the function f .If f does not require any input, then s = unit . A relational table people ( name , age ) is reprsented by the functional symbol: An OLAP cube data that tracks the sales of produces in di erent cities over time can be seen as a function:
Query constructs are polymorphic rst-or second-order functional symbols. A second-order functional symbol is of the form:  X  :( s 1  X  t 1 ) , ( s 2  X  t 2 ) ,..., ( s n  X  t t ).

We are able to model relational algebra as a collection of functional symbols.
Constructs found in functional query languages [4, 3] can also be represented as functional . This is an fragment a functional query language with aggregation:
Queries are functional expressions composed by symbols representing query-constructs and database objects. The type information of the functional symbols allows one to perform static type-checking on queries.
 Equational Specifications
We propose to use equations of functional expressions to express knowledge regarding the algebraic properties as well as knowledge about the meta-data such as pair-wise disjoint-ness of categories of products. An equation is a pair of func-tional expressions in which some functional symbols may be functional variables. We write an equation in the form of: where f i : sig ( f i ) are functional variables, and g, g functional expressions containing the variables f i .
The following is an axiomatization of the query constructs showninFigure2. As part of on-going work, we are interested to model XML query languages as functional alphabets with equa-tional speci cations.

We would also like to apply equational reasoning tech-niques to reason about query equivalence and cases of answering-query-with-views.

Finally, we would like to explore the usage of conditional equations to represent semantic information of the func-tional symbols.
