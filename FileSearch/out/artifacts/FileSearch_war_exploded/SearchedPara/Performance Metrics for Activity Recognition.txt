 JAMIE A. WARD Lancaster University PAUL LUKOWICZ
University of Passau and HANS W. GELLERSEN Lancaster University 1. INTRODUCTION
Human activity recognition (AR) is a fast-growing research topic with many promising real-world applications. As it matures so does the need for a compre-hensive system of metrics that can be used to summarize and compare different
AR systems. A valid methodology for performance evaluation should fulfil two basic criteria: (1) It must be objective and unambiguous. The outcome of an evaluation should (2) It should not only grade, but also characterize performance. When compar-
Ward et al. [2006a] demonstrated that the standard evaluation metrics currently used in AR do not adequately characterize performance. Information about typical characteristics of activity events are routinely ignored in favor of making recognition results fit standard metrics such as event or frame accuracy. For example, existing metrics do not reveal whether an activity has been fragmented into several smaller activities, whether several activities have been merged into a single large activity; or whether there are timing offsets in the recognition of an activity. This can lead to a presentation of results that can be confusing, and even misleading. As we will show in this article, this is not just a theoretical problem but an issue routinely encountered in real applications.

The problem of how to handle inexact time matching of ground truth to output has been identified in a range of AR research, with a typical solution being to ignore any result within a set margin of the event boundaries [Bao and Intille 2004], or to employ some minimum coverage rule [Tapia et al. 2004;
Westeyn et al. 2005; Fogarty et al. 2006]. The problem of fragmented output has been noted in a handful of publications, with solutions ranging from treating fragments as correct events [Fogarty et al. 2006], to incorporating them in an equal way to insertion and deletion errors (e.g.,  X  X everse splicing X  [Patterson et al. 2005]). Evidence of merging was hinted at by Lester et al. [2005], and is discussed as an  X  X pisode spanning two activities, X  by Buettner et al. [2009].
In a first attempt at characterizing AR performance, Ward et al. [2006a] introduced an unambiguous method for calculating insertions and deletions alongside four new types of error: fragmentation, merge and the timing offset errors of overfill and underfill. Corresponding frame-by-frame metrics derived from all of these categories were also proposed alongside a convenient visualisa-tion of the information. Although used in a handful of subsequent publications [Bulling et al. 2008; Minnen et al. 2007; Stiefmeier et al. 2006; Ward et al. 2006b], the original metrics suffer from a number of shortcomings: (1) visualisation of frame errors using the error division diagram (EDD), which (2) event errors were not represented in a metric format suitable for compari-
This article extends the previous work in four ways, specifically we: (1) in-troduce a system of frame-by-frame metrics which are invariant to class skew and (2) introduce a new system of metrics for recording and visualising event performance. We then (3) apply the metrics to three previously published data sets, and (4) show how these offer an improvement over traditional metrics. The contributed methods are based on sequential, segment-wise comparison, but it is worth noting that they also have a significant amount of tolerance against small time shifts in the recognition. Unlike in other approaches (e.g., dynamic time warping, DTW [Berndt and Clifford 1994]), the time shift is not masked (or hidden in an abstract number such as matching costs), but explicitly described in the form of underfill and overfill errors.

The article is organized as follows. We first lay the groundwork for our contri-bution with an analysis of the AR performance evaluation problem, including a survey of selected publications from the past six years of AR research. This is followed by the introduction of AR event categories that extend Ward et al. X  X  [2006a] scoring system (Section 3). We then introduce a new system of frame and event metrics and show how they are applied (Section 4). The metrics are then evaluated by application to results from three previously published datasets (Section 5), followed by a concluding analysis of their benefits and limitations (Section 6). 2. PERFORMANCE EVALUATION
In its general form AR is a multiclass problem with c  X  X nteresting X  classes plus a  X  X ULL X  class. The latter includes all parts of the signal where no relevant activity has taken place. In addition to insertions and deletions such multiclass problems can produce substitution errors that are instances of one class being mistaken for another. Note that insertions and deletions are a special case of a substitution with one of the classes involved being the NULL class.
In this article, we approach performance evaluation of multiclass AR by considering a class at a time. In doing so, the root problem we address is the characterization and summary of performance in a single, time-wise continu-ous, binary classification. That is, the output of the classifier at any one time is either positive, p or negative, n . Evaluation can then be viewed as a comparison of two discrete time-series (recognition output versus ground truth). We know that there is no objectively  X  X est X  similarity measure for time series comparison.
The quality of the similarity measure depends on the application domain and the underlying assumptions. Here, we make two fundamental assumptions: (1) Ground truth and classifier prediction are available for each individual (2) The time shift in which events are detected in the classifier output is 2.1 Existing Methods for Error Scoring
Performance metrics are usually calculated in three steps. First, a comparison is made between the returned system output and what is known to have oc-curred (or an approximation of what occurred). From the comparison a scoring is made on the matches and errors. Finally, these scores are summarised by one or more metrics, usually expressed as a normalised rate or percentage. Two basic units of comparison are typically used X  X rames or events:
Scoring Frames. A frame is a fixed-length, fixed-rate unit of time. It is often the smallest unit of measure defined by the system (the sample rate) and in such cases approximates continuous time. Because of the one-to-one mapping between ground and output, scoring frames is trivial, with frames assigned to one of: true positive (TP), true negative (TN), false positive (FP) or false negative (FN).

Scoring Events. We define an event as a variable duration sequence of posi-tive frames within a continuous time-series. It has a start time and a stop time.
Given a test sequence of g known events, E ={ e 1 , e 2 ,..., puts h return events, R ={ r 1 , r 2 ,..., r h } . There is not necessarily a one-to-one relation between E and R. A comparison can instead be made using alternative means: for example DTW [Berndt and Clifford 1994], measuring the longest common subsequence [Agrawal et al. 1995], or a combination of different trans-formations [Perng et al. 2000]. An event can then be scored as either correctly detected ( C ); falsely inserted ( I ), where there is no corresponding event in the ground truth; or deleted ( D ), where there is a failure to detect an event.
Commonly recommended frame-based metrics include: true positive rate ( tpr = TP TP + FN ), false positive rate ( fpr = FP TN + some combination of these (see 4.1.1). Similarly, event scores can be summa-2.2 Shortcomings of Conventional Performance Characterization
Existing metrics often fall short of providing sufficient insight into the perfor-mance of an AR recognition system. We illustrate this using the examples in
Figure 1. These plot a short section (300 s) of results described by Bulling et al. [2008] on the recognition of reading activities using body-worn sensors. Plot
A shows a classifier output with classes  X  X eading X  versus  X  X ot reading X ; plot B shows the same output but smoothed by a 30s sliding window; and gt shows the annotated ground truth. For both A and B, traditional frame metrics ( tpr , fpr , pr ) are calculated, as are event-based precision and recall ( Pre event analysis, a decision needs to be made as to what constitutes a  X  X orrect X  event. Here, we define a true positive event as one that is detected by at least one output. We also decide that several events detected by a one output count only as a single true positive.

The frame results show that the fpr of A is almost 10% higher than that of B. Together with a poorer event precision, this indicates a larger number of false insertions in A. A X  X  frame tpr is almost 10% lower than B. This might suggest more deletions, and thus a lower recall X  X ut in fact its recall is 8% higher. Why? The answer is not clear from the metrics alone so we have to look at the plots. This instantly shows that A is more fragmented than B X  X any short false negatives break up some of the larger events. This has the effect of reducing the true positive frame count, while leaving the event count (based on the above assumption of  X  X etected at least once X ) unaffected.

Three key observations can be made of Figure 1: (1) some events in A are fragmented into several smaller chunks (f); (2) multiple events in B are recog-nized as a single merged output (m); and (3) outputs are often offset in time.
These anomalies represent typical fragmenting, merge and time errors, none of which are captured by conventional metrics. Frame error scores of false pos-itive or false negative simply do not distinguish between frames that belong to a  X  X erious X  error, such as insertion or deletion, and those that are timing offsets of otherwise correct events. Traditional event-based comparisons might be able to accommodate offsets using techniques such as dynamic time warping (DTW), or fuzzy event boundaries. However, they fail to explicitly account for fragmented or merged events. 2.3 Significance of the Problem
To assess the prevalence of fragmenting, merge and timing errors, we surveyed a selection of papers on continuous AR published between 2004 and 2010 at selected computing conferences and journals (e.g., Pervasive, Ubicomp, Wear-able Computing, etc.) Table I highlights the main metrics used by each work, and whether these were based on frame, event, or some combination of both evaluation methods. The final three columns indicate, either through explicit mention in the article, or through evidence in an included graph, whether artefacts such as timing errors, fragmenting or merge were encountered.
The simple frame-based accuracy metric was heavily used in earlier work (often accompanied by a full confusion matrix), but has since given way to the pairing of precision and recall. Event analysis has been applied by several researchers, however there is no clear consensus on the definition of a  X  X orrect X  event, nor on the metrics that should be used. In most, however, there is strong evidence of timing offsets being an issue. Several highlight fragmenting and merge (though only those using EDD acknowledge these as specific error categories). 3. EXTENDED METHODS USING ADDITIONAL ERROR CATEGORIES
Ward et al. [2006a] introduced an extension to the standard frame scoring scheme that we adopt here for the single class problem. First, we introduce additional categories of events to capture information on fragmenting and merge behavior. We then show how these are scored in an objective and unambiguous way. 3.1 Addition Event Information
In addition to insertions I and deletions D , we define three new event categories:
Fragmentation. This is when an event in the ground truth is recognised by several returns in the output. An example of this is shown in Figure 1, where the event marked f is returned as 4 smaller events by output A . We refer to such an event as fragmented ( F ) and the returned events that cause it as fragmenting returns ( F ).

Merge. This is when several ground truth events are recognised as a single return (the inverse of fragmentation). This is exemplified in Figure 1 by the long return in B (marked m ) that covers 3 ground truth events. We say that these ground events are merged ( M ), and refer to the single return event as a merging return ( M ).

Fragmented and Merged. A ground event can be both fragmented and merged. Consider the section of A output that is marked fm in Figure 1.
The first ground truth event is clearly fragmented (into two returns). But the second return in A also covers another event, thus merging the two. We refer to the first ground event as being both fragmented and merged ( FM ). Similarly, a returned event can be both fragmenting and merging ( FM ). The long return in A that covers the two ground events is an example of this. 3.2 Scoring Segments
An alternative scoring strategy was introduced by Ward et al. [2006a] that provides a mid-way solution between the one-to-one mapping of frame scoring, while retaining useful information from event scoring. This hybrid scheme is based on the notion of segments . A segment is the largest part of an event on which the comparison between the ground truth and the output of the recog-nition system can be made in an unambiguous way. Segments are derived by comparing the system output with ground truth: any change in either the out-put or the ground truth marks a segment boundary. Unlike events, segments have a one-to-one relationship between the output and ground truth. For a bi-nary problem, positive (p) versus negative (n), there are four possible outcomes to be scored: TP s ,TN s ,FP s and FN s . The false positive and false negative er-rors, FP s and FN s , can be divided into the following subcategories to better capture useful event information (the example in Figure 2(a) shows how these might be assigned): Insertion, I s . AFP s that corresponds exactly to an inserted return, I .
Merge, M s . AFP s that occurs between two TP s segments within a merge return (i.e., the bit that joins two events).

Overfill, O s . AFP s that occurs at the start ( O  X  s )orend( O matched return, that is, the bit of a return that  X  X pills X  over the beginning or end of a ground event. (Combined overfill O = O  X  + O  X  .) Deletion, D s . AFN s that corresponds exactly to a deleted event, D .
Fragmenting, F s . AFN s that occurs between two TP s fragmented event (i.e., the  X  X ad X  fragment).

Underfill, U s . AFN s that occurs at the start ( U  X  s )orend( U event, that is, the timing offset that effectively  X  X eletes X  part of the beginning or end of an event. (Combined underfill U = U  X  + U  X  .)
Segments are scored according to the following procedure: First, assign every segment to one of the four standard scores. In a second pass, the FP scored segments are further assigned to one of the 8 new error categories.
This is done for each segment s i at index i by considering the preceding s and following s i + 1 segments. Figure 3 shows how assignments are made for every possible combination of s i  X  1 , s i and s i + 1 for segments at the very beginning or end of a sequence ( s example, the sequence TP s -FP s -TP s would classify s i
FN s -FP s -TP s would yield s i as a starting Overfill.
 3.3 Scoring Frames
Once we have assigned error categories to segments, it is a simple matter to transfer those assignments to the frames that constitute each segment. Thus, we have counts of frame insertions I f , deletions D f , merge M frame analysis. 3.4 Deriving Event Scores Using Segments
Figure 2(b) shows an example of how event scores can be unambiguously assigned using information provided by the corresponding segment scores.
Trivially, I  X  I s and D  X  D s . We can also assign F ( X  X ragmented event X ) to any event that contains at least one instance of an F s segment. Likewise we assign M ( X  X erging return X ) to any return that contains at least one instance of an
M s segment. 2
A merged event, M , is then assigned to any event that overlaps in time with a merging return M . Similarly, a fragmenting return, F , is assigned to any output event that overlaps with a fragmented event F . If an event is assigned both M and F , we call it a FM ( X  X ragmented and merged X ); similarly any return that is M and F is called FM ( X  X ragmenting and merging X ).

Note that a key difference between the frame (and segment) error scores and the event scores is that the former analysis focuses on characterising and reporting frame errors (FP and FN), whereas here we report on counts of matched events. Thus frame merge errors, represented by mr , are calculated from the number of false positive frames X  X he spaces in between ground truth events; whereas event merging, as introduced here, relates to the matched events M that have been merged.

Segments can also be used to define the  X  X orrect X  event score ( C ). However, this requires assumptions being made as to what constitutes a correct event. One common assumption is that an event is correct if it contains at least one
TP segment. This is a troublesome definition because it completely ignores the possibility of fragmentation. Such a measure might better be termed  X  X ccurred at least once X , for example, as in Tapia et al. [2004] and Choujaa and Dulay [2008]. We assume that it is better to classify correct only those events that cannot be applied to any of the other event categories. A correct event as used here is one that is matched with exactly one return event. 3.5 Limits of Time Shift Tolerance
A key concerns behind our work is to distinguish between errors that are caused by small shifts in the recognition timing (which may be irrelevant for many applications) and the more  X  X erious X  errors of misclassified instances.
Unlike other methods, such as DTW, we do not attempt to mask timing related errors but make them explicit. Thus, a recognition system that works well except for the fact that it produces events that are slightly shifted with respect to the ground truth will not appear to be artificially producing false positives or false negatives. Instead it will be described as being good in terms of spotting events, but with a timing problem.

This may seem surprising given the fact that our evaluation works on se-quential segment comparison. The explanation stems from the fact that we do not work on segments statically defined from the ground truth. Instead segment definitions are derived from the relation between ground truth and recognition system output. Also the score for a segment is influenced by neighbouring seg-ments. So long as the recognized event has an overlap with the ground truth there will be a segment that is identified as correct, and adjoining segments will be labelled as timing errors (or fragmentation/merge when relevant).
This explanation also exposes the limits of the time shift tolerance which are given by event duration. If the time shift of the recognition output is larger than event length then timing error becomes an insertion or deletion error (as there is no segment that is labelled as correct). Clearly, in cases that involve very short (in terms of the time scale of the sensor and recognition system), widely spaced events, this would be a problem. However, in AR, such cases are rare.
Even simple gestures such as pushing a button on pulling a drawer open take in a range of a second which amounts to 30 frames of video or 50 to 100 frames at a typical accelerometer sampling rate. Moreover, many applications look at complex longer term activities that can tale many seconds or even minutes. 4. METRICS
Once we have compared the recognition output with its ground truth and calculated scores for both frames and events, we then need to define metrics for summarizing and presenting the results. 4.1 Frame Metrics 4.1.1 Standard Metrics. Accuracy ( TP + TN P + N ) is the most commonly used metric that can be calculated from a confusion matrix. Its main drawback is that it hides information on the specific nature of errors (the proportions of FP and FN). Precision and recall avoid this problem and are well known in
AR. They are useful when it is difficult to gauge the size of N [van Rijsbergen 1979]. One drawback of precision is that it is heavily affected by changes in the proportions of classes in the dataset (class skew) [Fawcett 2004]. For this rea-son we prefer the skew-invariant fpr metric paired alongside tpr . This pairing can be plotted as an ROC curve for parameter-independent evaluation [Provost et al. 1998]. This is sometimes summarised in a single area-under-curve (AUC) metric [Ling et al. 2003]. 4.1.2 2SET Metrics. We extend the standard confusion matrix to include eight new error categories. This 2-class segment error table (2SET) is shown in Figure 4(a). In (b), we define eight new metrics based on these categories. In previous work, metrics were calculated as a percentage of the total experiment time N + P . This formed the basis of the error division diagram (EDD). The problem with this is that any skew in the proportion of classes represented in a dataset can lead to results that cannot easily be compared across datasets.
To maintain class skew invariance, the new 2SET metrics introduced here are based around tpr and fpr : that is, FN errors are expressed as a ratio of the total positive frames, P ; and the FP errors are expressed as a ratio of the total negative frames, N . This means we can express (1  X  tpr ) and fpr = ir + mr + o  X  + o  X  . 4.2 Event Metrics
From the categories laid out in 3.4, there are eight different types of event error scores. Four of these can be applied to ground truth events: deletions (D), fragmented (F), fragmented and merged (FM) and merged (M). The remaining four are applicable to returned events: merging (M X ), fragmenting and merging (FM X ), fragmenting (F X ) and insertions (I X ). Together with correct events (C), these scores can be visualised in a single figure (see Figure 5), which we term the event analysis diagram (EAD). The sum of events D + F + FM contains all of the possible events in ground truth. Likewise, C completely contains all of the returned events in a system output. The EAD trivially shows exact counts of the event categories. For ease of comparison across differently sized datasets, these counts can also be conveniently reduced to rates or percentages: of total events | E | , D | E | , 4.3 Application to Reading Example 4.3.1 Frame Results. To get an idea of how these metrics would be used in practice, we apply them to the examples of Figure 1 X  X hich we show again in Figure 6(a). The frame results for the two examples, A (unsmoothed) and
B (smoothed), are shown in pie chart format in Figure 6(b). For each result, one pie represents the breakdown of P frames ( tpr , dr , N frames (1  X  fpr , ir , mr , o  X  , o  X  ).

At first glance, these figures reveal the most striking (visual) differences between the two examples: the existence of insertion ( ir ) and fragmenting ( fr ) errors in A, where none are seen in B. We also see that the fpr of A is greatly influenced by end overfill frames ( o  X  = 7 . 7% compared to the o
Start underfill is also higher in A ( u  X  = 10%) than B ( u dicate that the outputs in B are generally shifted later in time. This influence of inexact timing is not apparent when the standard metrics in Figure 1 are used.
The charts are useful indicators at explaining how much of the false negative and false positive frames are given over to specific types of error. However, they do not give any information on the distribution of these frames: for example, the high insertion rate ( ir = 7 . 9%) in A might be caused by many short insertions, or it might be a single long one. This is where an event analysis is useful. 4.3.2 Event Results. Figure 6(c) shows the EADs for each of the results.
Instantly we see that A has many more returns than B (22 versus 6): with over 80% of A returns either fragmenting or insertions. In contrast 5 (83%) of B re-turns are correct, the remaining one is a single merge. Interestingly, this merge
M corresponds to exactly three merged events M in the ground truth (this is the m example from Figure 6(a)). This relationship between output and ground is typical for both merge and fragmenting. A fragmented event, for example, is reported by two complementary components: the number of fragmented events ( F ), and the number of correctly matching returned fragments ( F ). Together, these paint a picture of how the output might look: In A , for example, we see three events that are fragmented ( F ) by a total of nine fragments ( F ).
A slightly more complicated relationship is represented by the fragmenting and merge output FM in A : this corresponds to both the FM event the single M event and corresponds to the fm marked example in Figure 6(a).

With this detailed description of event performance, the EAD complements the frame analysis with information that would otherwise only be available using a visual analysis of the output plots. 5. DATASETS
To assess the utility of the proposed method, we use results calculated from three publicly available datasets: D1, from Bulling et al. [2008], D2, from Huynh et al. [2008], and D3, from Logan et al. [2007]. Following from the original pa-pers, each set is evaluated using a different classifier: D1 using string matching;
D2 using HMMs; and D3, decision tree. The aim of this diverse selection is to show that the method can be applied to a range of different datasets and us-ing different classifiers. We do not intend to compare these results with one another (nor with the original results as published). Rather, we wish to show how results compare when presented using traditional metrics against those presented using our proposed metrics. 5.1 EOG Reading Dataset (D1)
The example in Figure 1 was taken from a study by Bulling et al. [2008] on rec-ognizing reading activity from patterns of horizontal electrooculogram-based (EOG) eye movements. Six hours of data was collected using eight partici-pants. 4 The activities in this dataset are very fine-grained. There are 706 dis-tinct reading events, with event time-spans ranging from a few seconds up to several minutes at a time. Following the method described in the original paper, we use string matching on discretised sequences of horizontal eye movements.
A threshold is applied to the output distance vector to determine  X  X eading X  or not. The output is then smoothed using a 30s majority vote sliding window. 5.2 Darmstadt Daily Routines Dataset (D2)
Huynh et al. introduced a novel approach for modelling daily routines using data from pocket and wrist-mounted accelerometers. They collected a 7-day, single-subject dataset. The dataset is comprised of a 13-dimension feature space; this includes the mean and variance of the 3-axis acceleration from the wrist and pocket sensors plus a vector based on time of day. we replicate the method they use to provide a baseline in one of the several described experiments. We use Hidden Markov Models (HMM) to recognise each of four annotated routines (dinner, lunch, commuting and office work).
A remaining 25% of the dataset is not modelled here (the unclassified case, or  X  X ULL X ). We build a five state, left-to-right, mixed Gaussian HMM for each class using leave-one-day-out training. Each observation feature vector is mod-elled using a mixture of two Gaussian. The competing models are successively applied to a 30s sliding window. The highest likelihood model is chosen as the output class for each window. 5.3 MIT PLCouple1 Dataset (D3)
Logan et al. [2007] presented a study aimed at recognising common activities in an indoor setting using a large variety and number of ambient sensors. A single subject was tracked and annotated for 100 hours using the MIT PlaceLab [Intille et al. 2006]. A wide range of activities are targeted, five of which we choose as a representative sample of the dataset: watching T.V., dishwashing, eating, using a computer and using the phone. 6 The activities in this dataset are finer-grained than those of D2, covering relatively short durations (up to an hour) and over many more instances (between 18 and 165). The dataset also includes an example set of pre-computed output predictions calculated using a decision-tree classifier (on the MITES motion sensor data). It is these results that we use here. 7 5.4 Application of Metrics to Datasets 5.4.1 Standard Frame and Event Analysis. Table II shows how the results from the three datasets might be analysed using standard metrics. Judging by tpr and fpr , most classes (with the exception of  X  X inner X  and  X  X ommuting X  in
D2; and  X  X hone X  in D3), seem to be recognised fairly well ( tpr above 60%, fpr below 20%). These numbers are misleading, however. The event metrics reveal very different results. Most notably, all of the classes in D3 suffer from very low event precision (between 6% and 19%) And reading in D1 has a recall of less than 30%. On the plus side, it reveals that  X  X unch X  in D2 is recognised with perfect event accuracy. This simple comparison already shows the importance of considering both frame and event analysis when presenting recognition results in AR. 5.4.2 Using 2SET Frame Metrics. We extend the interpretation further by analysing the specific frame errors in the pie chart pairings of Figure 7. The  X  X  X  charts clearly show how the poor frame tpr results for  X  X inner X ,  X  X ommuting X  and  X  X hone X  are comprised. Alongside the deletion frame errors ( dr ) for these classes, we see that many of the frames have been underfilled ( u indicates something that is not visible from the standard metrics: that timing offsets often constitute a large portion of what is regarded as frame error. The opposite is also shown here: the  X  X  X  charts for the D3 classes show that by far the most common frame errors within fpr are insertions ( ir ). High ir correlates with what might be expected given the low event precision for these classes. 5.4.3 Using EAD Event Metrics. Finally, we flesh out the event-based re-sults using the EADs of Figure 8. This reveals a number of useful findings, including:
Reading, D1. Over half of reading events are merged together (M merged events). These merges are caused by 96 separate merging outputs (M X ).
Dinner and Commuting, D2. The event results for both of these activities correlate well to the standard analysis in Table II X  X hey include only deletion and insertion errors.

Office Work, D2. Almost 52% (14) of these events are merged together into 6 large merge outputs. Two of the events are also fragmented. None of these characteristics are apparent in the standard evaluation.

Computer, D3. Not shown by the standard metrics, most of the output returns for computer (58.9%) are fragmenting. (Fragmenting also plays a large part in the result for watch TV, albeit to a lesser extent at 28%). 6. DISCUSSION 6.1 Highlighting the Benefits
To illustrate the benefits of the proposed metrics we take a second, more de-tailed look at two examples from the data presented in 5.4.

Frame Level D2 Dinner and D3 Phone. In both classes, around 50% of the positive frames are correctly recognized. Using traditional metrics, this would imply around half of the correct frames being deleted or a recall of 0.5 which, by all standards, is a poor performance. Thus, in both cases, an application designer may by inclined not to use the system, or find a work-around that does not require the recognition of the particular classes. However, looking at the corresponding chart in Figure 7 we see that the extended metrics provide a different picture. For both classes, around half of non-recognized true positive frames are due to timing errors, not real deletions. From an application point of view, this is already a significantly better picture (unless timing is crucial for the application because it for example measures the time spent during different activities). For the dinner class, the remaining quarter are frame errors caused by real deletions. However, for the phone class, there are only around 8% real deletion related frames and 15% fragmentation related frame errors (frames which have been assigned to a different class because at the specific location the event was fragmented). Thus, if an application does not care about fragmentations, then the effective rate of deletion related frames is just 8% instead of 50% as suggested by traditional metrics.

D3 Watching TV, Dishwashing and Computer. All three classes have poor event level precision (6.3% for TV, 8.3% for dishwashing , and 18.7% for com-puter). This implies that the number of events that the system has returned is between 5 (for computer) and nearly 20 (for watching TV) times higher then the true number of events. In particular, for the watch TV class, this may again lead an application designer to discard the system as useless.

Taking into account traditional frame based analysis paints a different pic-ture. The false positive frame rates are 4.4% for TV, 6.5% for the dishwasher and 18.5% for computer. Thus, only a small percentage of the frames are wrongly labelled as belonging to the respective class and one may think that we have a usable system. Also TV that was by far the poorest performing class on event level performs best on frame level. For the computer class, it is exactly the other way around.

Using traditional metrics, an application developer would get conflicting information from the frame and the event level analysis. An experienced de-veloper may be able to make an educated guess and hypothesize that the discrepancy comes from timing and possible fragmentation issues. However, it is only by looking at the EAD and the 2SET charts generated by our approach that the full, consistent, and reliable picture emerges upon which an informed design decision can be made.

First, the EAD for dishwashing shows that the low event precision is almost entirely due to insertions which means that system performance is really as bad as traditional metrics suggest. The extended frame by frame metrics in Figure 7 confirms this as virtually all false positive frames are insertions (there are nearly no timing errors). Because there are many inserted events but the proportion of false positive frames is relatively small we can assume that the inserted events tend to be short. Taken together it tells the designer that (1) the systems often wrongly identifies events, (2) however, inserted events tend to be short, and (3) correctly spotted events are spotted very accurately in terms of timing and event length. This is far more information then can be extracted from the traditional metrics.

For the computer class, we can see that 58.9% percent of the returned events are fragmentations, while only 38.3% are insertions. This is less then half of the number of insertions suggested by the traditional event recall metrics. For the application designer, it suggest that the class is not as bad as originally thought (assuming fragmentations are not a big issue). On frame level, our method reveals that most false positive frames are actually insertions while most false negative frames are due to fragmentations. There are virtually no overfill errors and the proportion of false positive frames is much higher (in particular considering the lower level of event insertions). Thus, we know that inserted events tend to be long. We also know that the system is very sensitive to event boundaries. For the designer of the recognition system, the combination of large number of fragmentation with high sensitivity to boundaries suggest a possible improvement: increasing the threshold for the recognition of event end. Clearly, this may reduce the number of fragmentations (since they are caused by the system mistakenly thinking that an event ends). It may, of course, increase the amount of overfill, but we know that so far there were nearly none so that may be acceptable.

For the TV class, the considerations are similar to the computer except that the impact of fragmentations is much lower (just 28% of the returned events).
From the extended frame metrics, we can conclude that the insertions tend to be very short, while in the fragmentation events the  X  X nterruptions X  are quite long. Neither overfill nor underfill is an issue.

In summary, the above examples clearly show that the metrics proposed in this article can provide useful information to both application designers who use a recognition system and the developer of the recognition system. 6.2 Limitations and Challenges for Future Work 6.2.1 2SET Frame Metrics. Timing errors are currently represented by rates based on start and end overfill and underfill ( o  X  cause these rates are calculated with respect to the total number of frames of positive ground truth ( P ) or the total frames of negative ground truth ( N ), this means that the effects of poor timing might get lost for datasets involving long activities. As an example,  X  X ffice work X  reports a delayed detection of only u  X  = 5 . 8%. However, because this activity represents 56% of the dataset, the actual time involved with the delay may actually be quite large. Conversely, detection of the relatively short activity  X  X ommuting X  in D2 is typically delayed with u  X  = 39%. That X  X  39% of an activity that only takes up less than 6% of the total dataset. In real time, the actual delay in number of frames may be quite small (though for a short event this can be significant). One simple solution to this problem is to present the actual number of frames in addition to the rates. 6.2.2 EAD Event Metrics. The definition of  X  X orrect X  that we use in the analysis of events might be regarded as harsh, particularly for applications where,  X  X orrect if detected at least once, X  is preferred. EAD representation has the potential to render a poor correct count for results that might otherwise be regarded as quite acceptable. We believe that it is better to show all results in the brightest (coldest) light, and then give explanations afterwards if need be. Fragmented events, for example, might be acceptable for some applications. In these cases, the events marked F may be aggregated with C and presented in an additional, application-specific metric. 6.2.3 Extensions to Analysis. A recommended practice is to consider per-formance over a range of operating points, such as using ROC [Provost et al. 1998]. One crude attempt to achieve this would be to sweep the proposed frame metrics as a series of stacked bar charts (rather than pie) alongside one another.
For events, a series of EADs could be stacked on top of one another. An improved approach might be to aggregate a selection of some of the metrics and plot these in an ROC-style curve. How this might be done is a subject of ongoing research.
The metrics presented here can also be combined in a way that allows us to examine variance across different sets (e.g, participants, or classes). Again, a challenge for future work is how this information might be displayed in an informative way. 6.2.4 Evaluating Multiple Classes. The segment-based method presented by Ward et al. [2006a] is intrinsically multi-class: Each pairing of ground truth and output segment is assigned to exactly one of six categories (insertion-deletion, insertion-underfill, insertion-fragmenting, overfill-deletion, overfill-underfill, and merge-deletion). Scores of these errors are then recorded in a multi-class, confusion-matrix style segment error table (SET). Although SET completely captures both segment and frame errors, it can be difficult to in-terpret. But its main drawback is that there is no clear way of handling event errors X  X or example, in cases where an event of one class is fragmented by instances of several different classes.
 We developed 2SET and EAD to work around these problems. 8 tion we make is that each activity class can be evaluated independently of all others X  X ll else becomes, in effect, the NULL class. This assumption may not entirely hold for discriminative classifiers where the result for one class is influenced by the performance of the others. However, we believe the general practicability of our approach to outweigh this concern. 6.2.5 Interpretation of Results. With so many metrics to consider, it could be argued that the approach taken in this work does not lend itself well to a concise presentation of results in a research paper X  X articularly where many results and systems are to be compared. Researchers may choose instead to use a subselection of the most pertinent metrics to the specific problem being tackled. A single-value combination metric (similar to AUC or f derived for optimization tasks. Exactly how this might be done is still the subject of ongoing research. 6.3 Related Work in Other Areas
The common approach to event analysis of AR has its roots in automatic speech recognition (ASR), adapting variants of the word error rate components, inser-tion, deletion and substitution, to the activity scenario [McCowan et al. 2004].
But ASR, with its clearly defined atomic elements (words and characters) pro-vides no framework for capturing the  X  X ifficult X  issues of fragmenting, merge and vastly variable durations that occur in real world activity.

In early computer vision research, the problem of finding suitable ways of capturing difficult information was often sidestepped altogether in favor of showing typical example images [Hoover et al. 1996; M  X  uller et al. 1999]. Though suitable for establishing the feasibility of a method with a small number of samples, this approach does not scale well for studies using large datasets. The development of a complete framework for performance remains an active area of research, particularly with video analysis [Kasturi et al. 2009; Zhang 2001].
Shafait et al. [2008] recently introduced a framework of scoring methods and metrics for image segmentation with the goal of characterizing performance where existing metrics fail. In particular, they highlighted  X  X ver X   X  X nder X  and  X  X issed X  segmentation, which although expressed in a 2D context, are analo-gous to the temporal errors dealt with here. 7. CONCLUSION
We have shown that on results generated using published, nontrivial datasets, the proposed metrics reveal novel information about classifier performance, for both frame and event analysis. The additional information provided by fragmenting, merge, insertion, deletion, and timing errors allows crucial event information to be incorporated into the frame-by-frame evaluation. However, because it is based on total durations, or number of frames, this method of re-porting can be misleading when activity event durations are variable. A single, long, correct event, for example, can mask the presence of multiple, shorter insertions (and vice-versa). Event-based evaluation gets around this problem where rates based on counts of correct and incorrect events are reported. How-ever, AR researchers have largely avoided this method of evaluation, in part, because of the difficulty of scoring correct and incorrect activities. The introduc-tion of a full characterization of fragmented and merged events, and a revised definition of insertions and deletions, provides one possible solution to these dif-ficulties. We introduce the event analysis diagram (EAD) showing a complete breakdown of ground truth event counts alongside recognition output event counts. Rates based on these, together with timing information from a frame-analysis, can, we believe, provide a firm basis for a more complete evaluation of future work in activity recognition.

