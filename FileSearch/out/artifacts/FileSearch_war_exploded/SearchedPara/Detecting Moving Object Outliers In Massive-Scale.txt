 The detection of abnormal moving objects over high-volume trajec-tory streams is critical for real time applications ranging from mil-itary surveillance to transportation management. Yet this problem remains largely unexplored. In this work, we first propose classes of novel trajectory outlier definitions that model the anomalous be-havior of moving objects for a large range of real time applications. Our theoretical analysis and empirical study on the Beijing Taxi and GMTI (Ground Moving Target Indicator) datasets demonstrate its effectiveness in capturing abnormal moving objects. Furthermore we propose a general strategy for efficiently detecting the new out-lier classes. It features three fundamental optimization principles designed to minimize the detection costs. Our comprehensive ex-perimental studies demonstrate that our proposed strategy drives the detection costs 100-fold down into practical realm for applica-tions producing high volume trajectory streams to utilize. H.2 [ Information Systems ]: Database Management Outlier, Moving Object, Trajectory Stream Motivation. In recent years, the location-acquisition devices like GPS, smart phone, and RFID have become prevalent. These de-vices, monitoring the motion of vehicles, people, goods, services, and animals, are producing massive-volume high-speed trajectory streams. Many applications from traffic management [5], security surveillance [2], scientific studies [13], to mobile social networks [18] rely on continuously discovering abnormal objects in such tra-jectory streams to deliver critical decisions within an actionable time. *Authors contribute equally to this work. This work was done when Yanwei Yu visited Worcester Polytechnic Institute.

In security surveillance systems, a visitor at a miliary base will be considered as an outlier and thus a potential safety threat if he does not obey the strict order to stay together with his designated group members. In traffic management systems a taxi driver will be classified as an outlier in terms of his erratic behavior if he keeps changing lanes and switching his neighboring travel companions. Potentially this may help flag speeding, drunk driving, or other er-ratic behaviors of concern.

Similarly, if considering the price, volume, or gains of stocks at a particular time point as coordinates in a multi-dimensional space, then real time stock quotes can be modeled as a trajectory stream. Its analysts may reveal recent promising stocks by detecting the outlier stocks whose performance trajectories dramatically deviate from those of other stocks in the same industry.

Challenges. In all the applications described above, outliers can be characterized as moving objects that behave differently from the majority in trajectory streams. Despite the importance of continu-ously detecting such types of outliers, to the best of our knowledge, this problem has not previously been considered in the literature.
In the streaming context Bu et al. [2] defined when to consider a trajectory segment of a single moving object to be an outlier, while our work instead focuses on a much more complicated problem, namely locating outlier objects in the trajectory stream populated with massive scale moving objects. In [2] a given trajectory is di-vided into equal sized segments. A segment is said to be abnormal if it is not similar to a group of segments adjacent to it in time. The effectiveness of this definition is based on the local continuity ob-servation. Namely one moving object usually is expected to behave consistently within a short time interval. However in our context whether one moving object is an outlier or not depends on its re-lationship with other objects. The moving patterns of a large set of objects are more complex and dynamic than one single object X  X  path and hence cannot be modeled by the local continuity property. Therefore this definition cannot be applied to our problem.
In static spatio-temporal (time series) databases , a trajectory is said to be an outlier if it does not show the global characteristics of the majority of the trajectories in the overall database [8, 11]. Since all trajectories are known apriori, these techniques rely on expen-sive offline pre-processing. Normally they first mine all frequent patterns to build a model of global characteristics of the dataset. In the second phase the model is then used to classify each trajectory as being either an outlier or not. However in unbounded continuous trajectory streams where concept drift consistently arises, using one single (pre-computed) model to continuously detect outliers would inevitably lead to inaccurate results, while periodically rebuilding the global model can be prohibitively expensive for real time stream trajectory outlier detection due to the modeling costs.
Therefore to effectively identify abnormal objects in trajectory streams, new semantics have to be defined to satisfy the require-ment of streaming trajectory outlier detection. First, lightweight metrics suitable to identify outliers in place of complicated statisti-cal models are desirable. These metrics must capture the key char-acteristics of moving objects. Second, given the dynamic nature of stream trajectories this definition should be robust to concept drift and amenable to swiftly evicting obsolete models of outlierness.
Furthermore, if such a lightweight yet effective outlier definition could be found, we must be able to process this detection seman-tics to assure we can extract real time insights from high volume trajectory stream data, such as the streams of surveillance, stocks, or traffic. Thus strategies must be designed to efficiently discover the stream trajectory outliers online as stream data passes by.
Proposed Solution. In this paper, we propose new trajectory outlier definitions by introducing the notion of  X  X rajectory neigh-bor X  to measure the similarity among different trajectories. Unlike the traditional neighbor definition [8] which simply considers the physical distance among two objects at a given point of time, the trajectory neighbor concept captures the key properties of stream trajectories. Namely it not only considers the spatial proximity of trajectory objects, but also takes the duration of the spatial similar-ity across time into account.

Furthermore our analysis of realtime trajectory applications re-veals that applications vary in their particular synchronization re-quirements with respect to the neighbor relationships among mul-tiple trajectories. We thus propose two variants of the trajectory neighbor concept with different synchronization regulations that fa-cilitate users to customize the semantics via controlled parameters. By measuring the Precision and Recall on the GMTI [3] and Taxi [16, 17] data, our empirical study confirms that the new definitions successfully model the deviating behavior that characterizes out-liers in a rich variety of trajectory stream applications.
Moreover we design a comprehensive strategy to efficiently de-tect these new outlier types over high volume trajectory streams, called the m inimal ex amination (MEX) framework.

The MEX framework integrates three fundamental optimization principles that apply to both neighbor-based outlier definitions. First, given a trajectory Tr i , the minimal support examination principle guides MEX to always acquire only the minimal yet sufficient set of neighbor evidence called minimal support . The key insight is to stop immediately once the outlier status of Tr i has been proven. Second, MEX leverages the temporal relationships among trajec-tory points to prioritize the processing order among points during the neighbor search process. This principle, called time-aware ex-amination , guarantees that we find the relationships most useful for outlier detection. Furthermore MEX establishes the lifetime con-cept signaling the furthest window up to which we can predict the status of Tr i based on current trajectory evidence. This enables MEX to transform the periodical per-window based outlier detec-tion process into a lifetime-triggered detection process. Our exper-imental studies on the Taxi data show that MEX can successfully handle up to one million moving objects per second on a standard desktop, rendering trajectory outlier detection practical in massive-scale moving object streams.

Contributions. The main contributions of this paper include: 1) We propose novel neighbor-based trajectory outlier definitions which are theoretically shown to successfully model the abnormal behavior of moving objects in the trajectory stream. 2) We de-sign incremental algorithms for trajectory outlier detection which leverage the overlap of sliding windows. Our complexity analysis highlights the need for more sophisticated techniques. 3) We thus propose the minimal examination (MEX) framework equipped with three core optimization principles. 4) We propose efficient algo-rithms for the new trajectory outlier definitions based on the MEX framework, successfully driving the detection costs 100-fold down. 5) Our empirical study using GMTI and Taxi datasets demonstrate the robust Precision and Recall of our new proposed definitions.
We denote the set of n moving objects as MO = { o 1 , o 2 where o i is the moving object with id = i . The multi-dimensional data point p j i produced by the moving object o i at time t a trajectory point of Tr i . We assume a minimal time interval at which objects produce events as trajectory points. We utilize the term  X  X imebin X  to refer to this smallest time granularity. The tra-jectory of a moving object o i is thus an infinite sequence of tra-jectory points produced at timebins { t 1 , t 2 ,..., t j limited to an object equipped with location-acquisition device. In-stead it is an abstraction of any object that continuously observes distinct events along time. Correspondingly the trajectory point is not necessarily only a spatial position, but could be any multi-dimensional coordinate where each dimension corresponds to one of the domains of the attributes of an object X  X  observation.
We define a trajectory stream S of n moving objects in MO as an infinite sequence of trajectory points ordered by timebins S = points p i 1 p i 2 ... p i n are said to fall into the same timebin i in the stream S .

In this work, we use the periodic sliding window semantics as proposed by CQL [1] to define a finite sub-stream of an infinite tra-jectory data stream. In particular, a query Q specifies a fixed win-dow size w and slide size s for time-based windows, while count-based windows can similarly be defined. Each window W has a starting time W.T start and an ending time W.T end = W.T start w  X  1 . The population of the current window W c of S consists of all points whose timebin falls into W c . It is the finite subsequence of the trajectory stream S : { p t c  X  w + 1 1 p t c  X  w + 1 p 2 ... p timebin. Periodically the current window W c slides, causing W.T and W.T end to increase by s timebins. Henceforth a trajectory Tr refers to a set of trajectory points produced by one moving object o throughout a window W j .

We use the function dist ( p j m , p j n ) to denote the distance between two trajectory points p j m and p j n at the same timebin j . Without loss of generality, we utilize Euclidean distance as the distance measure, though any other distance measure could equally be plugged in.
Definition 1. (Point Neighbor). For two trajectory points p and p j n in the same timebin t j ,if dist ( p j m , p j n is a point neighbor of p j n , with d a given distance threshold.
For point p j n , all point neighbors of p j n at timebin t tance threshold d comprise the Point Neighbor Set of p j n as PN ( p j n , d ) .
 Definition 2. (Trajectory Neighbor). In window W , trajectory Tr m is called a trajectory neighbor of Tr n w.r.t. the given timebin count threshold thr t , iff there exist at least thr t timebins in W such that p m is a point neighbor of p n at each of these thr t with point neighbor as per Def. 1. The set of trajectory neighbors of a trajectory Tr n in the window W c , w.r.t. distance threshold d and timebin count threshold thr denoted as TN ( Tr n , d , thr t ) .
Definition 3. Given a distance threshold d , a neighbor count threshold k , and timebin count threshold thr t , a trajectory Tr the window W is called a point-neighbor based trajectory outlier , or in short, PN-Outlier ,if | T | &lt;thr t , where T = {  X  k , t j  X  [ W . T Start , W . T End ] } . Otherwise Tr i is a PN-Inlier . Any timebin t j with | PN ( p j i ,d ) | X  k is called a neighboring time-bin of Tr i .

This PN-Outlier is based on whether a trajectory has a suffi-cient number of neighboring timebins throughout the window. In-tuitively, a normal inlier trajectory has a sufficient number of mov-ing objects in its vicinity for most of the time, i.e., for at least thr timebins. That is, such inliers are in a crowd in at least thr bins. On the other hand, a trajectory is said to be an outlier if most of the time it differs from other objects in a significant fashion.
Example 1. See example of Def. 3 in Fig. 1. Suppose k =2 , thr t =4 . The trajectory Tr 3 only has two neighboring timebins { t 1 ,t 4 } , for which Tr 3 has more than k point neighbors. Thus |
T | &lt; 4 .So Tr 3 is a PN-Outlier. All other trajectories have at least thr t neighboring timebins, hence are PN-Inliers.

Applications. PN-Outlier effectively models the notion of out-liers prevalent in many real time applications. For example in the security surveillance, foreign personnel may be considered as po-tentially unsafe if he separates out from others for too much of the time during his visit. In a marathon race a runner who runs alone without any other competitors around him for long stretches of time might be considered as suffering from some physical discomfort and possibly needing medical assistance, or should be checked for possible cheating by taking shortcuts. Figure 1: 7 trajectories in a window W c with size w =6 . Small circle represents a trajectory point. Dashed oval indicates pair-wise point neighbors. PN -Outlier : Tr 3 . PN -Inliers : Tr Tr 2 , Tr 4 , Tr 5 , Tr 6 , and Tr 7 .
Definition 4. Given a distance threshold d , a neighbor count threshold k , and timebin count threshold thr t , a trajectory Tr in the window W is a trajectory-neighbor based trajectory outlier , the trajectory Tr i is a TN-Inlier .

This TN-Outlier definition classifies a trajectory Tr i as outlier if it does not have a sufficient number of trajectory neighbors through-out the window W . Put differently, there are not enough other ob-jects in the dataset that consistently behave similarly to Tr the observed time period W .

Example 2. Consider the trajectories in Fig. 2. Suppose k 2 , thr t =4 . Then Tr 4 is a TN-Outlier having no trajectory neigh-bor. Tr 1 and Tr 2 are trajectory neighbors of each other by Def. 2, because they are point neighbors at all 6 timebins. Tr and Tr 7 are pairwise trajectory neighbors, because all three tra-jectories meet at at least 4 timebins. Since Tr 1 , Tr 2 and Tr have k (2) trajectory neighbors, they are TN-Inliers. Tr 3 trajectory neighbors Tr 5 and Tr 6 . Thus Tr 3 is a TN-Inlier. Figure 2: 7 trajectories in a window with size w =6, k =2, thr 4. TN-Outlier : Tr 4 ; TN-Inlier : Tr 1 , Tr 2 , Tr 3 , Tr
Unlike the PN-Outlier definition (Def. 3), TN-Outlier concept does not care about whether a given trajectory has a sufficient num-ber of neighboring timebins, rather the granularity of similarity is instead at the level of complete trajectories and their relation-ship with Tr i . Thus although Tr 4 has four neighboring timebins (  X  thr t ), it is still a TN-Outlier as we have shown above.
Applications. TN-Outlier definition fits many real life appli-cations. Consider traffic management applications [15] where we expect most drivers to drive consistently in lockstep with neigh-boring cars on a highway, for instance in the same or in adjacent lanes. Deviating from the majority of other cars may indicate that the drivers change their neighbors frequently due to speeding (too fast) or drunk driving (too slow) and thus never stay long enough at similar speed with other cars. Similarly in the stock sticker stream, stocks in the same industry tend to exhibit similar trends. Therefore a stock whose performance consistently deviates from that of other stocks in the same industry will be considered as a TN-Outlier ,even if at many timebins some stocks (each time different ones) happen to be its neighbors. Now we analyze the effectiveness of our proposed definitions. Due to space restriction in this work we only focus on PN-Outlier . A similar analysis could be applied to TN-Outlier .

Although no single outlier definition effectively models all real world scenarios, the general notion of what constitutes an outlier was first introduced by Hawkins in [7]. An observation is said to be outlier if it statistically deviates so much from other observations as to arouse suspicion that it was generated by a different mechanism.
Next we establish a statistical model for trajectory outliers. It relies on the strong assumption that the stream data consistently follows a particular distribution. In reality we may not know the distribution of a given stream. Worst yet it may change its distri-bution at any moment, while computing the statistical model peri-odically would be highly inefficient. However idealistically it still provides a solid baseline to contrast our definition that rests upon zero assumption.

To facilitate analysis, let us consider the scenario where each tra-jectory point set D i composed of all trajectory points at any time-bin t i follows the normal distribution N (  X ,  X  2 ) . A trajectory point Tr j is considered as an outlier point in D i if it lies 3 or more stan-dard deviation  X  from the mean  X  [4]. Correspondingly given a trajectory Tr j with W trajectory points in a window, the proba-bility of Tr j having m of W outlier trajectory points will follow the binomial distribution Bin ( m | W , X  ) with  X  representing the probability of a given trajectory point Tr i j to be an outlier point in D i . Then statistically trajectories can be considered as outliers if they contain more than W  X  + 3 W  X  ( 1  X   X  ) outlier points. Here W  X  is the expectation of Bin , while W  X  ( 1  X   X  ) is the variance of Bin . We denote this definition as Def stat .
Now we show the effectiveness of PN-Outlier by proving the following lemma.

Lemma 1. Trajectory Tr j is an outlier according to Def stat Tr j is a PN-Outlier with d = 0 . 13  X  , k = 0.0012W, thr t =  X  3 0 . 0028 ( 1  X  0 . 0028 ) W .

Lemma 1 shows that our lightweight PN-Outlier definition will indeed produce the identical outliers that Def stat had produced if the stream is normal distributed for a given set of statistical deter-mined parameters.

P ROOF . We use probabilities to represent the number of points lying in a d-neighborhood. Specifically, the probability p is 0.0012 that the distance between 2 randomly sampled points s s from D i is less than or equal to d. s 1 and s 2 can be considered to be random variables following normal distribution N (  X ,  X  we define z 1 = s 1  X   X   X  and z 2 = s 2  X   X   X  as standard normal variables. That is, z 1 , z 2  X  N ( 0 , 1 ) . Given d = 0.13  X  , p = 0.0012, we get:
Pr ( | s 1  X  s 2 | X  0 . 13  X  )  X  0 . 0012  X  Pr ( s 1  X  0 . 13  X  s + 0 . 13  X  )  X  0 . 0012  X  Pr ( z 1  X  0 . 13  X  z 2  X  z 1 + 0 . 0012 .

Using the normal distribution table [4] we get z 1  X  X  X  3 . 0 or z  X  3 . 0  X  s 1  X   X   X  3  X  or s 1  X   X  + 3  X  . This proves that an outlier timebin t i of trajectory Tr j in PN-Outlier definition is an outlier point of D i in Def stat .

Next, by Def stat the probability of s 1 being an outlier point will be Pr ( z 1  X  X  X  3 . 0 )+ Pr ( z 1  X  3 . 0 ) = 2Pr ( z ( 1  X  Pr ( z 1  X  3 . 0 )) = 0 . 0028 . In other words, the mean of Bin  X  = 0.0028. Therefore the expectation of Bin E [ m ]= 0 . 0028W . Its variance var [ m ]= 0 . 0028 ( 1  X  0 . 0028 ) W .By Def jectory Tr j will be an outlier if it has more than E [ m outlier points. Since E [ m ]+ 3 var [ m ] = W  X  thr t , this is equivalent to the condition of PN-Outlier with thr t as the minimum number of neighboring timebins for Tr j to be an inlier. Given a trajectory stream S and the semantics of PN-Outlier or TN-Outlier , we need to design algorithms to continuously detect and output the trajectory outliers in each window W c . For this we now design the INC algorithm which detects both classes of outliers in a unified way. It first utilizes range queries to search for all point neighbors of each trajectory Tr i at each timebin. Then the acquired point neighbors are used as evidence to validate the status of Tr i . Furthermore INC leverages the fact that in sliding window streams adjacent windows overlap with each other. By cleverly maintaining the already known neighbor relationships, the INC algorithm successfully eliminates any redundant range query search at the previously examined timebins, resulting in saving in system resources.

We first introduce the data structures that enable the INC algo-rithm to extensively reuse the already recognized neighbor-related information. We use DB Tr to denote the set of all trajectories in the current window W c . To support PN-Outlier detection, each tra-jectory Tr i maintains a list Tr i .tlist , which stores the IDs of its neighboring timebins in W c .For TN-Outlier detection, we need to track the trajectory neighbors of Tr i to evaluate whether Tr a sufficient number of trajectory neighbors. Therefore a neighbor table, denoted as Tr i .NT , is maintained by each trajectory Tr which records information about all trajectories having at least one point neighbor with Tr i in the current window (see Fig. 4). Each record in the neighbor table Tr i .NT is a &lt; key, valueList &gt; pair, where key denotes the identifier of Tr i  X  X  neighboring trajec-tory Tr j , and valueList corresponds to the list of timebins during which Tr i and Tr j are point neighbors.
 Using an example-driven approach, we now describe how the INC algorithm detects the two outlier classes with the assistance of the just introduced Tr i .tlist and Tr i .NT structures. Fig. 3 shows 6 trajectories in two consecutive sliding windows with window size w =4 and slide size s =1 . Given a query Q with k =2 and thr t =3 . Fig. 4 illustrates how the INC algorithm incrementally processes Tr 1 and Tr 5 .

Data Structure Initialization. Given the trajectory dataset in the first window W 1 , INC first utilizes a range query operation to search for point neighbors of Tr 1 at timebin t 1 . The distance threshold d is used as the range. As shown in Fig. 3(a), Tr not have any point neighbor. So both Tr 1 .NT and Tr 1 .tlist are null. Tr 5 instead acquires one point neighbor p 1 2 at timebin 1. So the record &lt;Tr 2 , [ t 1 ] &gt; is created for p 1 2 Tr 5 .NT as shown in Fig. 10(a). Since only one point neigh-bor is acquired (&lt; k ), timebin t 1 is not a neighboring timebin of Tr 5 . Tr 5 .tlist thus is null. Similarly INC proceeds to detect point neighbors using a range query and updates the data structures at each time bin. After timebin t 4 is processed, the final neighboring information for W 1 is established as shown in Fig. 4(c).
Trajectory Outlier Detection. Then using Tr i .tlist and Tr INC can quickly detect both classes of trajectory outliers. As shown in Fig. 3(a), Tr 1 and Tr 5 can be immediately identified as PN-Outlier s, because the cardinality of Tr 1 .tlist and Tr 5 neighboring timebins) is smaller than thr t (3) respectively.
Similarly the TN-Outliers can be detected based on the neighbor table Tr i .NT . Tr 1 is a TN-Outlier because it does not have any trajectory neighbor in Tr 1 .NT . For that we only need to exam-ine Tr i .NT to find the trajectories having no less than thr neighbors with Tr i . Tr 5 however is not a TN-Outlier , because it has two trajectory neighbors { Tr 2 ,Tr 6 } ( k = 2) according to Tr 5 .NT .
Data Structure Update. After the new timebin t 5 arrives, the window slides from W 1 to W 2 (Fig. 3(b)). Since timebin t expired, all information of t 1 will be removed from Tr i Tr i .tlist . The INC algorithm only needs to detect the point neigh-bors for each trajectory Tr i at the new timebin t 5 . This again is done by a range query search. The corresponding data structures are then updated (see Fig. 4(d)).

Outlier re-examination. Then the status of all the trajectories will be re-examined by again checking the Tr i .tlist and Tr structures. In the new window W 2 , Tr 1 is still a PN-Outlier .How-ever Tr 5 has evolved into a PN-Inlier , because Tr 5 acquires an new neighboring timebin at t 5 . Thus now | Tr 5 .tlist | =
Tr 1 is still reported as a TN-Outlier in W 2 , because it still has no trajectory neighbor. Tr 5 remains a TN-Inlier , since it has four trajectory neighbors as shown in Tr 5 .NT of Fig. 4(d).

Complexity Analysis. The INC algorithm detects both types of outliers by first running a range query search for each trajectory at each new timebin. The complexity is O ( n 2 ) . Then INC detects PN-Outlier by checking the cardinality of each Tr i .tlist . The cost is O ( n ) . So the overall complexity of PN-Outlier detection is dom-inated by the range query whose complexity is O ( n 2 ) .
TN-Outlier detection is much more expensive than PN-Outlier due to the extra cost of having to traverse the neighbor table Tr to discover trajectory neighbors. Its worst case complexity is O Therefore the overall complexity of TN-Outlier detection is deter-mined by both the range query search and the lookup of the full neighbor relationship produced by range query.
Although the INC algorithm for the current window detection fully reuses the neighbor relationships collected in the previous window, it still incurs high computational costs when the num-ber ( n ) of the trajectories is large. This performance bottleneck is driven due to the O ( n 2 ) complexity of the expensive neighbor range query search and the corresponding neighbor lookup opera-tion as shown in the complexity analysis above. To further drive down the CPU and memory costs, we now present our m inimal ex amination ( MEX ) optimized framework. By proposing three innovative optimization principles, namely minimal support exam-ination , time-aware examination , and lifetime-triggered detection , the MEX framework thoroughly eliminates the performance bottle-neck of the INC algorithm caused by its  X  X ange query search first, outlier examination next X  strategy.
Each trajectory in a window W is eventually reported as either outlier or inlier . A trajectory will be labeled as inlier if sufficient neighbor evidence has been acquired for this object. This fact leads to an important observation. That is, to identify whether a trajec-tory is a neighbor-based inlier, we may not need to find out all its neighbor information. Instead a potentially small subset of the full neighbor evidence often can be sufficient to prove that it is an in-lier . Similarly a small subset of the non-neighbor evidence might also in some cases found to be sufficient to classify a trajectory as an outlier . To characterize the least amount of information needed to prove Tr i  X  X  status we define the concept of Minimal Support .
Definition 5. (Minimal Support). Given a stream trajectory outlier detection query Q and a trajectory set DB Tr in a window W c , for a trajectory Tr i  X  DB Tr , if the evidence pair ( composed of trajectory points and timebins with ( TR = { Tr ... Tr m | Tr x  X  DB Tr ( 1  X  x  X  m ) } , T = { t 1 ,... t [
W c . T Start , W c . T End ]( 1  X  j  X  n ) } ) is sufficient to validate that Tr i is either inlier or outlier, and for any subset TR  X  TR and T  X  T , the pair ( TR ,T ) is not sufficient to prove Tr i then ( TR, T ) is a minimal support of Tr i in W c .

The above structure of minimal support provides the minimal amount of evidence for identifying both inliers and outliers . This minimal support concept guides us to propose the minimal support examination principle (Sec. 4.2.1) to optimize the trajectory outlier detection process, in particular to reduce the neighbor search and lookup costs related to the range queries.

We also observe that the minimal support is not unique for a tra-jectory in each window. That is, several distinct minimal support sets may exist because the definition of the outlier only imposes a constraint on the neighbor evidence count, but not on which partic-ular neighbor evidence must be utilized.
 Next we introduce the second optimization principle, namely Predicted Support in Lemma 2. This principle guide our MEX framework to discover the best minimal support for each trajectory.
Lemma 2. Predicted Support: Given a stream trajectory out-lier detection query Q , if the evidence pair ( TR,T ) is a minimal support of trajectory Tr i in W c as per Def. 5, then ( TR,T a minimal support of Tr i in the subsequent windows from W W c + x , where W c + x .T start = Min ( T ) and Min ( T ) represents the minimal timebin in T .

P ROOF . By Defs. 3 and 4, the criteria we can use to determine the status of a trajectory Tr i remains constant in each window. Therefore as the stream slides to a new window W c +1 , if no el-ement of a minimal support set MS of Tr i expires, MS is still suf-ficient to determine the status of Tr i in W c +1 . Since W last window in which all elements of MS are guaranteed to survive, ( TR,T ) is still a minimal support for Tr i in the windows from W
Lemma 2 reveals two promising opportunities for optimizing stream trajectory outlier detection.

First, the status of Tr i can be predicted in certain future windows without first having to observe all data points of these windows. This insight inspires us to introduce the lifetime-trigged detection optimization principle in Sec. 4.2.3.

Second the more windows a minimal support of Tr i covers, the less re-evaluation effort will be needed for Tr i . Therefore acquir-ing the minimal support covering the longest window sequence with minimal CPU costs is critical for stream trajectory outlier de-tection. This observation guides us to propose the time-aware ex-amination optimization as highlighted in Sec. 4.2.2.
Based on the above minimal support and predicted support ob-servations, we now are ready to propose three fundamental princi-ples for optimizing the stream trajectory outlier detection process.
Leveraging the minimal support observation (Def. 5) the mini-mal support examination (MSE) principle eliminates the complete and thus expensive point neighbor search for each trajectory adopted by the INC algorithm.
P RINCIPLE 1. Given a trajectory outlier detection query Q and the trajectory set DB Tr of window W c , when evaluating a trajec-tory Tr i  X  DB Tr , the minimal support examination principle suggests that the status determination process of Tr i can be termi-nated as soon as k neighbors have been found.

This principle aims to prove the status of a given trajectory Tr by only discovering a small subset of its neighbors instead of search-ing through its complete neighborhood to classify all points. As shown in Corollaries 1 and 2, this principle is equally applicable to both PN-Outlier and TN-Outlier detection, although they each have different concepts of neighbor respectively.
 Corollary 1. Given a PN-Outlier detection query Q in window W c , a timebin t j can be safely classified as a neighboring timebin of Tr i if k point neighbors have been acquired for Tr i at t Corollary 2. Given a TN-Outlier detection query Q in window W c , a trajectory Tr i can be safely classified as a TN-Inlier if k trajectory neighbors have been identified for Tr i .

The proof of Corollaries 1 and 2 directly follows the definition of neighboring timebin (Def. 3) and TN -Inlier (Def. 4) respectively.
The MSE principle enables us to design a lightweight neighbor search operation called Examining to replace range query.
Definition 6. Given a trajectory Tr i in the window W c , exam-ining is an operation that evaluates the distance between the tra-jectory points of Tr i and the corresponding points of other trajec-tories until either k neighbors (either point or trajectory neighbors) are acquired or Tr i  X  X  entire neighborhood has been evaluated.
Since the neighbor-count threshold k is much smaller than the average number of the neighbors we expect each trajectory may have, this examining operation is fundamentally more efficient than the full range query search.
Our second optimization principle, called the time-aware exami-nation (TAE) further optimizes the process of acquiring the timebin set T of the minimal support pair ( TR,T ) .

P RINCIPLE 2. Time-aware Examination: Given the detection query Q and a trajectory Tr i in the current window W c , the exam-ining operation should identify the neighbor evidence for trajectory Tr i from the most recent to the earlier un-evaluated timebins until either neighbor evidence is found at thr t timebins or non-neighbor evidence are identified at ( w  X  thr t +1 ) timebins.

The TAE principle has two implications. First, the examining operation should evaluate the un-evaluated timebins in the latest time first order . Second, TAE provides the criteria for the exam-ining operation to terminate the neighboring timebin search pro-cess . Similar to the MSE principle, TAE can equally be applied to PN -Outlier and TN -Outlier .

For a PN -Outlier detection query w.r.t parameters ( d, k, thr the status of a trajectory Tr i can be determined once either of the termination conditions shown in the following lemmas is reached.
Lemma 3. Given a PN -Outlier detection query Q ,ifatra-jectory Tr i has already acquired t neighboring timebins in the cur-rent window W c , then Tr i is an PN -Inlier in W c as well as in the subsequent ( t l -W c .T Start ) windows, where t l is the oldest neigh-boring timebin acquired by Tr i .

P ROOF . First, by Def. 3, Tr i is a PN -Inlier in W c . Second,  X  timebin t j  X  T , t j  X  t l . Therefore the minimal timebin in T( Min(T) ) equals to t l . By Lemma 2, Tr i thus is also a PN -Inlier in the subsequent windows from W c +1 to W c + x , where W c + x .T Start = t l . Therefore, Tr i is guaranteed to be a PN -Inlier in the next ( t l -W c .T Start ) windows.

However, the status of Tr i after window W c + x (after t is uncertain because the remaining evidence ( k -1 neighboring time-bins) is no longer sufficient to prove its status. Therefore, t furthest foreseeable timebin until which the status of Tr anteed to be certain. We call t l the closed time of Tr i PN-Inlier .

Similarly the TAE principle is effective on the TN -Outlier (Lemma 4).

Lemma 4. Given a TN -Outlier detection query Q ,if Tr i has already acquired thr t neighboring timebins with a given trajectory Tr m in the current window W c , then Tr i and Tr m are guaran-teed to be trajectory neighbors in W c and in the subsequent ( t W c .T start ) windows, where t l is their oldest neighboring timebins.
For Lemma 4, timebin t l is called the closed time of Tr i trajectory neighbor of Tr m . Due to space restriction, the proof is omitted here.

In summary, TAE aims to not only find the minimal timebin set sufficient to determine the trajectory X  X  status, but also guarantees that the identified evidence is reused for the longest subsequent number of windows. Together the TAE and MSE principles guide the examining operation to effectively gather the optimal minimal support for each trajectory rather than conducting expensive and wasteful range query searches.
The above two principles focus on how to optimize each single examining operation. To further reduce the computational costs, we now introduce another optimization principle regarding to the mini-mization of the examining frequency, termed lifetime-triggered de-tection optimization (LTD).
 First, we define the lifetime concept of a trajectory.

Definition 7. (Lifetime). Given a trajectory Tr i in the current window W c ,if Tr i is guaranteed to keep its status (being inlier or outlier) until timebin t life ( W c .T Start  X  t life  X  expires according to the identified evidence, then t life lifetime of Tr i in the current window W c .

In other words the lifetime of Tr i indicates the duration of its current status (outlier or inlier).

Next we introduce a methodology for identifying the lifetime of a given trajectory for each of the two neighbor-based trajectory outlier definitions respectively.
 Lemma 5. Given a trajectory Tr i , the lifetime of Tr i to be a PN -inlier is the closed time of Tr i in W c .

P ROOF . Lemma 5 can be easily proven by Lemmas 3. If Tr i is a PN -inlier , Tr i will remain to be inlier until its close time expires by Lemma 3.
 Lemma 6. Given a trajectory Tr i , the lifetime of Tr i to be a TN -inlier is min { Tr j . closedTime | Tr j  X  TN } , where TN is the trajectory neighbor set of Tr i in W c .

P ROOF . Omitted due to space constrain.
Next we define the LTD optimization principle based on the above lifetime concept.

P RINCIPLE 3. Lifetime-triggered Detection: Given a trajec-tory Tr i , the examining operation will be triggered on Tr only if the lifetime of Tr i holds with: Tr i .life  X  W c
By the LTD principle, the status of a trajectory is re-examined only when its lifetime expires. This effectively transforms the con-tinuous query execution into lifetime-triggered execution. When-ever a trajectory is being re-examined, the examining operation which incorporates both MSE and TAE optimizations can be ex-ploited to re-establish the minimal support in the new window. It does so by only acquiring enough new evidence rather than build-ing a new minimal support from scratch. We call this enhanced examining operation lif et ime-aware examining or in short LIFT.
The high-level architecture of our MEX framework is depicted in Fig. 5. Similar to the INC algorithm, the MEX framework uti-lize the Tr i .tlist and Tr i .NT structures to store the meta-data. Therefore it also leverages the overlap of the adjacent windows in the sliding window stream.

Then the MEX framework continuously detects the trajectory outliers by conducting the LIFT operation on each trajectory. Given a trajectory Tr i , the LIFT operation is not triggered if W Tr i .lifetime . Once triggered, then LIFT employs both of the MSE and TAE principles to establish the new minimal support. The status and the lifetime of Tr i are also updated based on the new minimal support. Finally it outputs the outliers of the current window. The detailed description of the algorithm specific to each of the trajectory outlier definitions is described in the following section.
Alg. 1 shows the optimized PN -Outlier detection algorithm as extension of the MEX framework, named PN-Opt . For each tra-jectory Tr i , Tr i .untlist maintains the unchecked timebins in the current window, while Tr i .ntlist and Tr i .tlist correspond to the lists of non-neighboring and neighboring timebins of Tr i tively. The lifetime-triggered detection optimization is employed first (line 1). That is, only the trajectories whose lifetime has ex-pired are re-examined in the current window. For these triggered Algorithm 1 PN-Opt algorithm( PN -Outlier detection using MEX framework) 1: 2: trajectories that must be examined, PN-Opt utilizes the MSE op-timization principle to acquire new neighboring timbins (line 4). More specifically PN-Opt first checks whether Tr i can acquire k point neighbors in the new timebin by searching through the tra-jectories who have been neighbors with Tr i in at least one other timebin. The other remaining trajectory points will be tested only if Tr i still has not acquired k point neighbors (line 7). Then the TAE principle will be utilized to determine whether the neighbor-ing timebin search process should be terminated, namely whether thr t timebins have been acquired in the new window (lines 3, 12). Finally, the lifetime of Tr i , utilized by the LTD principle to deter-mine whether the status of Tr i should be re-examined, is updated (lines 14,15). Algorithm 2 TN-Opt algorithm ( TN -Outlier detection using MEX framework) 1: 2:
Alg. 2 utilizes the MEX framework to solve the TN -Outlier detection problem. Here, Tr i .NT denotes the neighbor table of Tr i . Each element of Tr i .NT contains three parts: tlist , ntlist, untlist . untlist maintains the unchecked timebins between Tr i and some trajectory Tr j , while ntlist and tlist are the lists of non-neighboring and neighboring timebins between Tr i and Tr j . Similar to Alg. 1, TN-Opt algorithm also employs the LTD first to check if the life-time of Tr i has expired (line 1). If so, then TN-Opt assesses the status of Tr i again.
TN-Opt first applies the TAE optimization principle (lines 4,9) to test whether a given trajectory Tr j is a trajectory neighbor of Tr Starting from the latest timebin, TN-Opt keeps testing the trajec-tory points at the unchecked timebins in untlist between Tr Tr j until point neighbors at t timebins are found. By the MSE principle (lines 5, lines 10), the trajectory neighbor search process stops immediately after Tr i acquires sufficient ( k ) trajectory neigh-bors or all the trajectories have been tested. Finally, the lifetime of Tr i is updated (lines 16,17).
All algorithms are implemented in JAVA on CHAOS stream en-gine [6]. Our experiments are performed on a PC with 3.4G Hz Intel i7 processor and 6GB memory, which runs Windows 7 OS. Real Datasets. We used two real streaming datasets. The Taxi Dataset is the real GPS trajectory data generated by 10,357 taxis in a period from Feb. 2 to Feb. 8, 2008 in Beijing [16] [17]. The total number of points in this dataset is about 15 million. The av-erage time interval between two points is around 177 seconds. To model timebins, we interpolate the time granularity to 1 minute per timebin. The GMTI (Ground Moving Target Indicator) dataset [3] records the real-time trajectories of 150 moving objects gathered by 24 different data ground stations or aircraft in 6 hours. It has around 100,000 records regarding the information of vehicles and helicopters moving in a certain geographic region. In our experi-ment, we used all 14 dimensions of GMTI while detecting outliers based on targets X  latitude and longitude.

Metrics &amp; Measurements. We evaluate both the effectiveness of our outlier definitions and the efficiency of our MEX outlier de-tection algorithms.

For the effectiveness evaluation, we measure the quality of re-ported outliers by Precision and Recall as follows: where R o denotes the set of annotated outliers in a dataset, namely the real outliers and D o the outliers detected by our algorithms.
For the efficiency evaluation, we measure two metrics common for stream systems, namely CPU resources and memory consump-tion. Experiments are conducted on 1,000 windows for the Taxi dataset. Both metrics are averaged over all windows.
We evaluate the effectiveness of the new proposed outlier defini-tions by measuring the precision and recall on the real GMTI and taxi datasets. For the GMTI dataset, we use the outlier set man-ually labeled by the experts familiar with the data as the ground truth R o . For the Taxi dataset the ground truth outlier set R instead produced by a user study. In this user study 100 sets of trajectories were selected from the taxi dataset. Each set contains 10 trajectories with 30 consecutive 6-minutes window. We invited 50 users from both WPI and USTB. The users were divided into 5 groups, with 10 trajectory sets assigned to each group. The users were asked to mark trajectories in each set that they believe are most likely to be outliers. Each trajectory marked by at least 5 users is labeled as a  X  X eal X  outlier.

We vary the thresholds k and thr t to investigate how Precision and Recall are impacted. The d threshold is fixed as 200 meter for GMTI data and 300 meter for Taxi data.

GMTI data . The results for GMTI data are shown in Figs. 6 and 7. From Figs. 6(a) and 7(a) the Precision of both PN-Outlier and TN-Outlier is nearly 100% once the parameters k and thr t rather large range. Fig. 7(b) shows that the Recall of TN-Outlier is also good and robust. However the Recall of PN-Outlier (Fig. 6(b)) is much worse than TN-Outlier . In the GMTI dataset the moving objects (soldiers) are divided into 3 military units. The members of each unit are expected to operate in a team. If they do not continu-ously operate together, they will be labeled as outliers even if they happen to stay close to others at times. TN-Outlier perfectly covers this scenario. However sometimes PN-Outlier might fail to locate the soldier separated from his own unit, since PN-Outlier would not classify an object as outlier if there are a sufficient number of moving objects in its vicinity.

Taxi data . We also investigate the effectiveness of PN-Outlier and TN-Outlier for the Taxi data. As shown in Figs. 8(a) and 8(b) PN-Outlier shows nearly 100% Precision and Recall when the pa-rameters k and thr t varies in a large range. However the Precision of TN-Outlier is worse than PN-Outlier (Fig. 9(a)), although its Recall is as good as PN-Outlier (Fig. 9(b)). In the user study the users tend to classify a taxi as an outlier if it always moves alone. Intuitively taxis do not necessarily move together with others as a group. The behavior of a taxi driver will be considered as ab-normal only if he always operates in areas that other drivers rarely visit. This scenario fits PN-Outlier better than TN-Outlier , since TN-Outlier tends to misclassify the taxis lack of consistent com-panions as outliers.

In summary the above empirical study confirms the effective-ness of our new proposed PN-Outlier and TN-Outlier definitions in capturing the moving object outliers with only a very loose param-eter setting requirement. Furthermore it shows that PN-Outlier and TN-Outlier best cover distinct application categories with different similarity requirement to be neighbors.
Next we evaluate the efficiency of our outlier detection algo-rithms using the Taxi data. The performance of MEX algorithms is compared with the INC algorithms. We denote the INC solution for PN -Outlier , TN -Outlier detection as PN-INC , TN-INC and the MEX -based solution as PN-Opt and TN-Opt respectively. We vary the most important parameters, to (1) assess the impact of our MEX framework versus the INC baseline, (2) evaluate sensitivity of parameter variations on each method.
CPU Resources. First, we evaluate the effect of varying the timebin count threshold thr t from 1 to the full window size. This varies the definition from very relaxed (that is, one trajectory Tr is inlier for instance if only in 1 of w timebins tr i has the needed neighbors) to very strict ( Tr i must have k neighbors in all w time-bins to be considered an inlier). We fix the window size to 30, k to 4, and d to 200 meters. As shown in Figs. 10, our MEX-based algorithms are superior to the corresponding basic INC-based so-lutions w.r.t the CPU time in all cases. In particular, PN-Opt is 117 times faster than PN-INC (Fig. 10(a)). When thr t is equal to the full window, the outliers rates of the two definitions are at their highest, namely 5% and 20% respectively. However, even in these cases the optimized algorithms still outperform their corresponding counterparts 31 and 5 fold.

We also notice that INC algorithms are not very sensitive to thr since INC always tests all timebins of each trajectory. Whereas by employing the TAE optimization principle (Sec. 4.2.2) MEX significantly reduces the distance calculation by only acquiring the minimal yet sufficient neighboring timebins.

Memory Resources. We see similar positive trends also for the memory usage. That is, TN-Opt uses on average 21% of the mem-ory consumed by its counterpart TN-INC algorithm. This can be explained by the fact that the MEX framework only maintains k trajectory neighbors for TN -Outlier , while the INC solution ag-gressively stores all neighbor information. As expected, the mem-ory consumption of TN-Opt increases as thr t increases, because more neighboring timebins have to be maintained for each trajec-tory neighbor as the required neighbor count thr t rises. As shown in Fig. 10(b), the memory usage of both PN-Opt and PN-INC is very small. PN-Opt uses a little more memory than PN-INC . For each trajectory Tr i , PN-Opt stores the trajectories which have point neighbors with Tr i in the history to reduce the trajectory search scope for acquiring new neighboring timebins. However this
Figure 12: Varying number n of trajectories on taxi data extra memory leads to huge gains in CPU processing resources (at least 31 times faster than PN-INC ).
Next we evaluate the performance of the four algorithms by vary-ing the neighbor count threshold k from 4 to 100. To be classified as an inlier the number of neighbors that a trajectory Tr discover increases from very few to a large number. That is, the inlier criteria for any trajectory Tr i changes from very relaxed to strict. We fix the window size to 30, thr t to 15, and d to 200.
CPU Resources. Fig. 11(a) shows both MEX-based algorithms clearly outperform their counterparts. The two MEX-based algo-rithms save on average 91% and 56% of CPU time compared to the corresponding INC solution. As k increases, the CPU time of the MEX-based solutions increases linearly since more neighbors have to be acquired to determine the status of a given trajectory. For the INC-based solutions instead we observe no sensitivity for varying k . This is because the INC-based solutions determine the status of Tr i always by first acquiring all neighbors with expensive com-plete range query searches no matter how large k is. However, the MEX-based solutions still outperform INC-based algorithms even for the extreme case of k = 100 . In this case the outlier rate is extremely high, namely 90%, and thus unrealistic.

Memory Resources. TN-INC only uses on average 55% of the memory compared to TN-INC (Fig. 11(b)). As k increases, they need to store more trajectory neighbors. Thus their memory con-sumption increases. As k increases to 100, TN-Opt uses more memory than TN-INC . Again this is an unrealistic setting we do not expect to see in practice, as surely 90% of all data would not be considered as  X  X xceptions X  (outliers) but rather as the norm.
We evaluate the scalability of our algorithms in the number of trajectories they can simultaneously handle. In this experiment we randomly select from 1k up to 10k trajectories from the Taxi data. We fix the window size to 30, k to 4, thr t to 15. To eliminate the effect of variations in the outlier rates, we stabilize the outlier rate in all cases to around 4% by slightly adjusting the distance threshold d from 200 to 300 meters.

CPU Resources. As shown in Fig. 12(a), the MEX algorithms exhibit much better scalability than their INC-based counterparts. As the number of trajectories increases, as expected all algorithms require more time to process more trajectories. However, the MEX algorithms outperform the INC-based ones more and more as the number of trajectories increases, because unlike the INC solution MEX avoids expensive range queries for the needed searches.
CPU Resources. As shown in Fig. 12(b), the memory con-sumption of all algorithms also increases as the number of trajecto-ries increases, because more trajectory information must be stored. However, TN-Opt saves more memory than TN-INC as n increases, while the memory usage of PN-Opt remains consistently small.
Trajectory Outlier Detection in Static Datasets. Knorr et al. [9] applied the distance-based outlier notion defined in [8] to spatio-temporal data. It first extracted features from the trajectories al-ready located in the database and mapped the trajectories into a feature space. Then it relied on the distance in this feature space to determine the relationships among the trajectories. The status of each trajectory was evaluated and reported only once. This defini-tion does not fit the requirement of streaming data. First the features of the stream trajectories keep evolving. Therefore no stable feature space exists. Furthermore the effect of the observed events keeps fading. Therefore the outliers have to be continuously reported in real time based on the latest events rather than reporting them only once based one the whole trajectory database.

Li et al. [12] proposed a classification-based trajectory outlier detection algorithm. In their algorithm, trajectories are represented using discrete pattern fragments called motifs. The set of motifs forms a feature space in which the trajectories are placed. Then a rule-based classifier is trained to classify the trajectories into either  X  X ormal X  or  X  X bnormal X . This algorithm cannot be adapted to the streaming context since it requires an offline training stage and a labeled training dataset to train the classifier.

Lee et al. [11] proposed a two-step trajectory outlier detection approach. At the first step, each trajectory is partitioned into a sequence of t-partitions. Within this set of t-partitions, outlying t-partitions are determined based on distance or density based met-rics. This work targets on a completely different problem, namely to discover unusual sub-trajectories within one single trajectory. In-stead we aim to locate abnormal moving objects.

Outlier detection over trajectory data streams. Bu et al. [2] detected abnormal trajectory segments in the stream context with the assumption that a stream trajectory is locally continuous. That is, a trajectory is expected to behave consistently within a short time interval. They use a base window to constrain the part of a trajectory they are interested in into a trajectory segment. Then whether a given trajectory segment is said to be anomalous or not is based on the similarity to its own historical trajectory in a larger window. Thus this method, focusing on identifying an outlying trajectory segment of one particular moving object, cannot address our problem, namely identifying suspicious moving objects signif-icantly deviating from other synchronously moving objects.
Liu et al. [14] studied causal interaction detection in traffic data streams. They first divide the city areas into regions. A graph is built by mapping each region to a vertex. The trajectories are then simplified into links connecting two corresponding regions. This much smaller dataset, i.e., a graph of regions, enables them to map their problem into frequent subgraph mining. That is, they determine the anomalous links in each time frame by comparing their load features of links in the graph (e.g., number of traversals) with those of their temporal neighbors. This method focuses on a totally different problem, namely discovering anomalous regions rather than abnormal moving objects.

Trajectory clustering and pattern mining. Other domains of mining moving object streams have been studied with clustering of trajectory the closest to outlier detection. Lee et al. [10] presented a clustering algorithm on discovering common sub-trajectories in static trajectory databases. Trajectories are first partitioned into a set of quasi-linear segments using the minimum description length principle. Then the line segments are grouped by a density-based clustering algorithm. Although this algorithm could potentially be applied in a reverse direction to detect abnormal trajectory seg-ment , it cannot solve our problem. First, the trajectory segments falling in one cluster are not necessarily observed at the same time period, while in trajectory stream to online detect abnormal mov-ing objects only the  X  X oncurrent X  behavior of the objects should be considered. Second, our goal is to continuously detect abnormal moving objects at real time rather than locate the unusual segments of the trajectories known apriori.
In this work we focus on the detection of abnormal moving ob-jects over massive-scale trajectory streams. After analyzing the requirements of stream trajectory applications, we propose novel neighbor-based trajectory outlier definitions. Our empirical study on the GMTI and Taxi data shows that our definitions can effec-tively capture moving object outliers in different scenarios. Fur-thermore we design an optimized MEX strategy scalable to big data trajectory streams to detect the new classes of outliers, rendering moving object outliers detection practical in real time applications.
