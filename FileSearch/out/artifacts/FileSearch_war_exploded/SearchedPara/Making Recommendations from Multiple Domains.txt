 Given the vast amount of information on the World Wide Web, rec-ommender systems are increasingly being used to help filter irrel-evant data and suggest information that would interest users. Tra-ditional systems make recommendations based on a single domain e.g., movie or book domain. Recent work has examined the corre-lations in different domains and designed models that exploit user preferences on a source domain to predict user preferences on a target domain. However, these methods are based on matrix fac-torization and can only be applied to two-dimensional data. Trans-ferring high dimensional data from one domain to another requires decomposing the high dimensional data to binary relations which results in information loss. Furthermore, this decomposition cre-ates a large number of matrices that need to be transferred and combining them in the target domain is non-trivial. Separately, re-searchers have looked into using social network information to im-prove recommendation. However, this social network information has not been explored in cross domain collaborative filtering. In this work, we propose a generalized cross domain collaborative fil-tering framework that integrates social network information seam-lessly with cross domain data. This is achieved by utilizing tensor factorization with topic based social regularization. This frame-work is able to transfer high dimensional data without the need for decomposition by finding shared implicit cluster-level tensor from multiple domains. Extensive experiments conducted on real world datasets indicate that the proposed framework outperforms state-of-art algorithms for item recommendation, user recommendation and tag recommendation.
 H.3.3 [ Information Storage and Retrieval ]: Search and Retrieval-Information Filtering Recommendation, Social trust, Personalization, Collaborative Fil-tering
With the increasing popularity of social media communities, we now have data repositories from various domains such as user-item-tag data from social tagging in book and movie domains, and friendship data between users in social networks. The joint analysis of information from various domains and social networks has the potential to improve our understanding of the underlying relation-ships among users, items and tags and increase user acceptance in recommender systems.

For example, users who like to read romance books generally have similar preferences as users who like to watch romance movies. By learning the characteristics of romance movie lovers from the Movie domain and transferring the learned characteristics to the Book domain, recommender systems can predict users X  preferences more accurately and provide more customized recommendations. Let us consider Tables 1 and 2 which show sample data from the Movie and Book domains respectively. Suppose we want to recom-mend some books to user u 1 in Table 2. Unfortunately, we cannot find similar users in the Book domain to base the recommendation on since u 1 is the only user who uses the tag fantasy. However, we can utilize the denser Movie domain dataset to learn the character-istics of users and make suitable recommendations for u 1
Recent works [1, 2] apply transfer learning methods to utilize data in some auxiliary domain such as Movie domain, and trans-fer knowledge that are consistent in this domain to a target domain such as Book domain. However, they are limited to transferring only binary relationships, e.g. user-item, in the form of matrices. Shi et al. [3] use tags as a bridge for cross domain transfer by decomposing the ternary user-tag-item relation into two binary re-lations user-tag and item-tag. However, this decomposition is lossy and may lead to inaccurate recommendations.

For example, the ternary relationship in the Movie domain (Table 1) can be decomposed into 3 binary relationships as shown in Table 3. Based on the binary User-Tag relationship in Table 3(a), we see that u 1 is similar to u 1 and u 2 because they all like fantasy items. Since u 1 and u 2 also watch other movies like comedy/action type movie  X  X ig Daddy X  or  X  X ron man X , the work in [3] will look for comedy/action books to recommend to u 1 , namely,  X  X ood omens X ,  X  X ames Bonds Girls X  and  X  X host rider X .

However, if we take a closer look at the ternary relationship in both Table 1 and Table 2, we realize that the book  X  X ew moon X , read by u 1 , has been tagged fantasy and romance. Between users u and u 2 , we observe that u 1 watches fantasy, romance and com-edy type of movies, while u 2 watches fantasy, adventure and action type of movies. Thus, we conclude that u 1 is more similar to u than u 2 . Further, from the Movie domain, we realize that users who like fantasy and romance type of movies also like comedy movies. Thus, we should recommend comedy books  X  X ood omens" to u 1
The above example illustrates the information loss when we de-compose ternary relationships to binary relations for cross domain recommendation. This is because users may have different inter-ests for an item, and items may have multiple facets. Although u and u 2 use same tag fantasy, however, u 1  X  X  notion of fantasy is related to the romance aspects of the movies while u 2  X  X  notion of fantasy is on the adventure aspects. Thus, we advocate that recom-mendation using cross domain data should be carried out without decomposition.

Another major source of information that has yet to be fully uti-lized is that of social network data. Researchers have proposed to use data from the social network domain to increase user accep-tance in recommender systems [4, 5]. The assumption is that the social network structure is useful for predicting users X  preferences because users X  interests may be affected by their friends. However, this assumption is not realistic as it implies that if two users, say u and u j , are friends, then u i will be influenced by u j ics/aspects.

Let us consider users u 4 and u 5 in Table 2. Suppose we know from some social network website that u 4 is a friend of u we assume that u 4 is influenced by u 5 to the same degree on all topics/aspects, then we will recommend the book  X  X host rider X  and  X  X corpia X  to u 4 since they have been tagged by u 5 previously. How-ever, u 4 may be friends with u 5 due to their common interests in action-related books, and u 4 may not like adventure books. Given the multi-facet nature of social trust among users, we advocate that trust is topic-specific and model the social relationship based on topics in our framework.

In this paper, we propose a tensor factorization based framework to fuse knowledge from different domains. We design a topic-based social trust regularization to integrate social network information with cross domain data. Our contributions are as follows:
To the best of our knowledge, this is the first study that com-bines cross domain recommendation and social network in a uni-fied framework.

The rest of this paper is organized as follows. Section 2 gives the problem formulation. Section 3 describes the unified frame-work. Section 4 presents the experimental results. We discuss re-lated work in Section 5 and conclude in Section 6.
A tensor is a multidimensional array. An N-order tensor A I , I 2 ,  X  X  X  I N . Let the target domain dataset be a list of tuples this target domain dataset as a 3-order tensor A tgt  X  U tgt V tgt , where U tgt is the set of users, T tgt is the set of tags, and V is the set of items/resources. A tgt ( u, t, v ) has a value of 1 if the tuple &lt; u, t, v &gt; exists, otherwise it has a value of 0. For example, we can model the tagging activities of users in Table 1 as a 3 -order tensor A with dimensions 5  X  5  X  8 . En-try A (1,1,1) has a value of 1 since it corresponds to the tuple &lt;u 1 , X  X antasy X , X  X wilight X  &gt; which is found in Table 1. On the other hand, the entry A (1,3,1) has a value of 0 since its corresponding tuple &lt;u 1 ,comedy,  X  X wilight X  &gt; does not exist in Table 1. Similarly, we model the dataset in the auxiliary domain as U aux  X  T aux  X  V aux . Note that our proposed approach can handle the case when U tgt  X  U aux =  X  and/or V tgt  X  V aux =  X  .
At the same time, suppose the users in the target domain are connected to each other via some social network. We model the user connections as a U tgt  X  U tgt trust matrix, F =[ f u,w u, w  X  U tgt and f u,w  X  [0 , 1] denotes the degree of social trust that u has on w . A value of 0 implies u does not trust w while a value of 1 suggests that u trusts w completely.

We formulate the recommendation problem as a tensor missing value prediction problem. The goal is to generate a ranked list of users/items/tags based on the predicted value in the tensor. Here, we show how to extract the informative, yet compact cluster-level tensor (knowledge we want to transfer) from the auxiliary domain along with the mappings of users, items and tags between target and auxiliary domains, and the social trust knowledge in the target domain to enable better prediction results in the target domain. In other words, we want to predict the missing values in A tgt knowledge from A aux and the trust matrix F =[ f u,w ] .
Let A  X  tgt be the tensor obtained. Based on A  X  tgt , we can use it to perform the following recommendation tasks.
In this section, we first describe our approach to establish a bridge from the auxiliary domain to the target domain. Then we present our framework to fuse the social network information and the cross domain data to generate recommendations.
The key to a successful knowledge transfer from the auxiliary domain to the target domain lies in extracting the appropriate in-formation from the auxiliary domain and establishing a mapping from the extracted knowledge back to the target domain. Here, the knowledge we want to extract are groupings of users, items, and tags that have similar characteristics. Our proposed method will construct a cluster tensor in the auxiliary domain. Then we will map the users, tags and items in the target domain to the clusters in the auxiliary domain.

We first perform a PARAFAC tensor decomposition on the auxil-iary tensor A aux . This decomposition maps users, items and tags into a shared latent feature space. In this shared space, we perform clustering to obtain groups of similar users, items, and tags. The PARAFAC tensor decomposition [6] for a tensor A of size I  X  I 2  X  X  X  X  I N with an input rank R is: where  X  U ( n ) of size I n  X  R for n =1 , ..., N and [  X  the j th column of matrix  X  U ( n ) and || A  X   X  A || 2 F || . vectors. The entry  X  A ( i 1 ,  X  X  X  ,i N ) is equal to R j [  X 
For the Movie dataset in Table 1, the PARAFAC tensor decom-position factorizes the auxiliary tensor A aux in the form of the latent feature representation  X  U ( i ) ( 1  X  i  X  3 ) as follows: where [  X  U ( i ) ]  X  j denotes the j th column of matrix The projection matrices  X  U ( i ) ( 1  X  i  X  3 ) obtained for the Movie dataset are as follows:
Based on the projection matrices, we apply some existing clus-tering algorithm to cluster the users, items, and tags. Table 4 shows the clusters obtained.

With this, we replace the ids of user, item and tag in the auxiliary dataset with their respective cluster id to obtain a cluster-level ten-sor, denoted as A cluster aux  X  R R  X  R  X  R . Table 5 shows the cluster-level tensor obtained for the Movie dataset. The Val column is the normalized count of the duplicate tuples obtained after replac-ing the ids. We use this tensor to transfer the knowledge from the auxiliary domain (Movie) to the target domain (Book).

Transferring knowledge from A aux to A tgt is achieved through a reverse process of summarization in the auxiliary domain. By as-suming that there exists implicit correspondence between the user/ tag/item group of the auxiliary domain and those of the target do-main. Based on the cluster-level tensor and the correspondence of user/tag/item group, we reconstruct the tensor A  X  tgt as follows: R | V tgt | X  R are user latent feature matrix, tag latent feature matrix and item latent feature matrix which we want to learn respectively, and  X  n is the n-mode product. The n-mode product of a tensor = are given by:
To compute the optimal A  X  tgt for recommendation, we need to served tensor A tgt and the reconstructed tensor A  X  tgt is mini-mized, that is,
Table 6 shows the correspondence  X  U ( i ) tgt (1  X  i  X  3) between the users, items and tags in the Book domain and the user, item and tag clusters in the Movie domain. The Weight column indicates how similar a user/item/tag is to the cluster.

Suppose we want to recommend some books to user u 1 in Table 2. User u 1 in the Movie domain forms a cluster User-G1. From Table 6, we observe that the mapping between user u 1 and cluster User-G1 has a weight of 0.2, indicating that u 1 has similar interests as the users in cluster User-G1. Since users in User-G1 like com-edy movies  X  X ig Daddy X , we may infer that user u 1 may also like comedy books and thus recommend the book  X  X ood Omens X  to u
Besides cross domain data, another valuable source of infor-mation is the social network information. Existing works on so-cial recommendations [4][5] are all based on the assumption that friends in the social network will have similar interests in all topics and areas. They incorporate such a network-based similarity prop-erty among users to regulate the latent factor modeling as follows. where F ij is the similarity between users u i and u j (defined in terms of either Vector Space Similarity (VSS) or Person Correction Coefficient (PCC) [5]), N is the number of users in the target do-main, D is a diagonal matrix whose diagonal elements D ii and tr(  X  ) denotes the trace of a matrix. The terms target to minimize the difference between the latent vectors of [  X  U (1) tgt [  X 
U
Here, we want to differentiate user interest based on topics. We define a similarity matrix F ( r ) for each topic r ( 1  X  where R is the dimension of user latent feature  X  U (1) tgt j are friends, then we define their similarity on a topic r , denoted by Otherwise their similarity F ( r ) ij =0 .

We introduce the topic-based similarity function into the latent factor model and modify Eq (3) to the following: where N is the number of users in the target domain, D ( r ) topic-based diagonal matrix whose diagonal elements D ( r ) , and tr(  X  ) denotes the trace of a matrix.

By combining Equations (2) and (4), we obtain the objective function for minimization:
Equation (5) can be reduced to a non-negative tensor factoriza-tion problem with regularization [7]. We derive the multiplicative updating rules for  X  U ( i ) tgt ( 1  X  i  X  3 ) as follows: where A ( n ) ( 1  X  n  X  3 ) is matrix unfolding of tensor Hadamard product. The matrix unfolding of an N-order tensor keeping the index d fixed while varying the other indices and is de-noted as A ( d ) . The Hadamard product of a matrix U = R I  X  J matrix V = R I  X  J , denoted as U V = R I  X  J where the entries are given by where 1  X  i  X  I and 1  X  j  X  J .

These multiplicative update rules have stationary points at local minimum, and will not break the non-negativity constraint for the plicative update rules can be proven by using the auxiliary function method similar to the work in [8].

Based on the above multiplicative update rules, we design an iterative algorithm to obtain  X  U ( i ) tgt ( 1  X  i  X  3 ) which minimize the objective function. Algorithm 1 shows the details. We observe Algorithm 1 FUSE Input: Output: 1: Initialization: From the tuple (users, items tag), we construct 2: Random initialize  X  U (1) tgt 3: for t =1 to NumIter do 4: for r =1 to R do 5: Update [  X  U (1) tgt ] t  X  r using Equation (6). 6: end for 7: Update [  X  U (2) tgt ] t using Equation (7). 8: Update [  X  U (3) tgt ] t using Equation (8). 10: end for that lines 5, 7 and 8 are the most time consuming steps. We exploit the sparsity of A ( n ) and compute A ( n ) [ S ( n ) ] T in a single scan of nonzero elements of A ( n ) . Let N 1 denote the number of non-zeros elements in A ( i ) . Then the complexity of Algorithm 1 is O ( NumIter  X  ( R  X  N 1 +( | U || V | + | U || T | + | V || experiments show that NumIter is typically less than 15.
Table 7 shows the A  X  tgt obtained using cross domain informa-tion with social network. Note that the last 6 tuples are newly added. Previously, we are unable to recommend any books to u since s/he is the only one who has used the tag  X  X antasy X . How-ever, the new tuple &lt; u 1 , comedy , Good Omens , 0.15&gt; associates the book  X  X ood Omens X  and the tag  X  X omedy X  with user u 1 with a weight of 0.15. Thus, we can now recommend the comedy book  X  X ood Omens X  to u 1 . In addition, although u 4 and u 5 are friends,  X  X corpia X  is not recommended to u 4 since action is their only com-mon topic of interest. With the new tuples, we can recommend  X  X host rider X  to u 4 .

In this section, we evaluate the effectiveness of the proposed framework for recommendation. We implemented 3 versions of FUSE for the various recommendation tasks:
We implement our framework in MATLAB and perform the ex-periments on a 2.33Ghz Intel Core 2 CPU with 4GB RAM, running Windows 7-64 bit. By default, R =50 and  X  =10 .

We use the following data sets in our experiments: Table 8 summarizes the characteristics of these two datasets.
We first evaluate the effectiveness of the proposed unified frame-work for item recommendation. We compare our methods with the following existing methods: 1. UPCC [9]. This method uses the Pearson X  X  Correlation Co-2. IPCC [10]. This method uses the Pearson X  X  Correlation Co-http://www.grouplens.org/node/73 http://www.librarything.com/ 3. TSA [11]. This method recommends items based on the tar-4. RMGM [2]. This is a state-of-the art cross domain collabo-5. TagCDCF [3]. This is a state-of-the art cross domain col-
We use the Hit Ratio [10] as the metric to evaluate the effective-ness of the various item recommendation methods. For each user u  X  U , we randomly choose one item v that has tagged by user pre-viously and withhold the tuples involving u and v [10]. Then we run the various methods to generate the top N items recommended for this user. If the item v is among the top N recommended items, then we say that a hit has occurred. The hit ratio of a method is given by:
Figure 1(a) shows the effect of utilizing cross domain informa-tion for item recommendation. We observe that FUSE  X  consis-tently outperforms TagCDCF, RMGM, UPCC and IPCC as we vary N from 10 to 100. In particular, RMGM outperforms UPCC and IPCC, indicating that cross domain transfer of binary relationships (user-rating) can improve recommendation accuracy. Further, TagCDCF outperforms RMGM demonstrating that tag informa-tion is useful in cross domain recommendation. However, since TagCDCF requires the decomposition of ternary relationship into two binary relationships (user-item and item-tag), there is informa-tion loss resulting in reduced accuracy compared to FUSE  X 
Figure 1(b) shows the effect of utilizing social trust for item rec-ommendation we vary N from 10 to 100. We observe that FUSE consistently outperforms FUSE  X  indicating the benefits of incor-porating topic-specific social regularization. Further, FUSE performs FUSE by an average of at least 8 % demonstrating that ac-curate modeling of topic-specific trust relationships leads to more accurate item recommendation.

Figure 1(c) shows the performance of FUSE + which combines both cross-domain and social trust information against existing rec-ommendation algorithms such as UPCC, IPCC, and TSA. We ob-serve that FUSE + is a clear winner, indicating that the joint anal-ysis of cross domain information and social network are useful in understanding the users X  interests better and providing better item recommendation compared to TSA which makes use of the social tagging network, and UPCC/IPCC which make use of the rating network only.
For the tag recommendation task, we evaluate our algorithm against two state-of-the-art methods: TSA [11] and RTF [12]. For each user u  X  U , we randomly choose one item v and remove all tuples involving u and v from the dataset [12]. Then we run the methods to generate the top N tags recommended for this user.

We use the standard recall and precision measures to evaluate the results: where T u,v is the set of tags used by user u on item v .
Figures 2(a) and 2(b) show the precision and recall of the meth-ods for varying values of N. We see that FUSE + is able to achieve a higher recall and precision compared to the other three methods. FUSE + outperforms FUSE by 2.5% on average in both recall and precision, indicating that topic-specific trust regularization can im-prove tag recommendation compared to traditional trust regulariza-tion. Both FUSE + and FUSE outperform FUSE  X  , indicating the effectiveness of incorporating social trust in tag recommendation. All our methods outperform state-of-the-art TSA demonstrating the effectiveness of using cluster-level tensor in transferring knowledge from the Movie domain to Book domain.
For user recommendation, we compare our algorithm with TSA [11]. For each user u  X  U , we randomly choose one of his/her friend u f and remove u f from u  X  X  friendship list. Then we run the algorithms to generate the top N users recommended for this user. We use the standard recall measures to evaluate the results:
Figure 3 shows the results for varying values of N. We observe that FUSE + achieves the best performance and outperforms FUSE by 10% on average, while the performance of FUSE  X  is very close to TSA. This confirms that both topic-specific trust and social net-work information are useful in user recommendation task.
In order to evaluate the effectiveness of our methods in recom-mending interesting users, we first determine the similarity of items among the recommended top N users [13] since users with shared interests are more likely to tag and rate similar items and with sim-ilar friends. We compute the item similarity as the cosine similarity of their TF  X  IDF tag term vector [13].

Let NB u be the set of top N users recommended to u . The intra-neighborhood similarity is given by the average cosine similarity of all items for the users in NB u : where I u and I w are the sets of items tagged by users u and w .
Let Random u be the set of N users randomly chosen from the set of users U  X  X  u } . We can determine the inter-neighborhood similarity as follows: where I u and I w are the sets of items tagged by users u and w respectively.

Table 9 shows the intra-similarity and inter-similarity of FUSE and TSA. We observe that the average intra-similarity is generally higher than the average inter-similarity for all the two methods. Furthermore, FUSE + have much higher intra-similarity and lower inter-similarity as compared to TSA. This indicates that more rel-evant users are found by FUSE + and hence lead to more accurate user recommendation.
 Table 9: Intra-and inter-similarity between FUSE and TSA
We also examine the effect of various parameters on the per-formance of Algorithm FUSE and FUSE + for item recommenda-tion. Figure 4(a) shows the results as we vary the tensor dimen-sion R . We observe that the proposed method FUSE + consistently outperforms the FUSE. This provides a evidence that the topic-based social recommendation is useful and can be used to improve the recommendation accuracy. We also find that the hit ratio of both FUSE and FUSE + increase as R increases, but decrease after R =50 which may be caused by model over-fitting when the latent dimensions are large. Thus we set R =50 .

Figure 4(b) shows the hit ratio for various values of  X  as we vary the number of iterations from 1 to 25. We observe that when we increase the iteration to be around 10, there seem to be little improvement for any large iteration. This suggests that a small number of iteration (such as 10) is enough for models. In other words, our algorithms typically converge after 10 iterations.
Figure 4(c) shows the impact of  X  on the recall rate of our algo-rithms. Recall that the parameter  X  control how much the informa-tion from social network will dominate the learning process. In the extreme case where  X  =0 , the social network information is not used. As we can see from Figure 4(c), adopting a larger  X  value can help to avoid the sparsity problem suffered by most MF-based CF methods. When we set  X &gt; 0 , we can achieve better results. This clearly demonstrates the impact of social network information, that is, adding more social network information can improve the gen-eralization ability of the model. Moreover, Figure 4(c) also shows that the performance might degrade when  X  is too large. In prac-tice, we should choose a moderate value of  X  . We observe that the best recall is obtained when  X  =10 indicating that social network information helps to improve item recommendation.
Finally, we show the scalability of Algorithm 1 after mapping it to the MapReduce framework. The expensive operations in the al-gorithm are the matrix multiplication in the update formulae in Eq. (6), (7). Following the idea of [14], we implemented the MapRe-duce version of Algorithm 1 on our in-house cluster, Awan cluster consists of 72 computing nodes, each of which has one Intel X3430 2.4GHz processor, 8GB of memory, two 500GB SATA hard disks and gigabit ethernet. On each node, we install CentOS 5.5 operating system, Java 1.6.0 with a 64-bit server VM, and Hadoop 0.23.6. All the nodes are connected via three high-speed switches.
We vary the dataset size from 2 million to 10 million by dupli-cating the users, items and tags in the original datasets and run the experiment by setting the model dimension R to 10 and 20 respec-tively. Figure 5 shows the results. We observe that the runtime increases linearly with respect to the dataset size for both R =10 and R =20 . This shows that our algorithm is scalable with respect to the dataset size.
Collaborative filtering (CF) in recommender systems can be roughly divided into two major categories. Memory-based methods aim at finding like-minded users to predict the active user X  X  preference http://awan.ddns.comp.nus.edu.sg/ganglia/ [9][10][15]. Model-based methods [11][12][16] model the user-item-rating or user-item-tagging interaction based on the observed rating or tagging. However, in reality, such data is sparse as users tend not to give much rating or tagging information. Data sparsity is a major challenge for CF methods.

Recently, researchers consider using auxiliary data to address the data sparsity problem. One promising approach is the user-side knowledge transfer for trust-based recommendation [4][5][17][18]. The other approach is user-item side knowledge transfer using re-lated but not aligned cross domain data for collaborative filtering [1][2][3].

For the trust-based recommendation, two different approaches have been proposed to compute trust: model-based [4][5][19], and memory-based [17][18]. Model-based approaches learn the pa-rameters of a model to determine the trust between users, while memory-based approaches typically use exploration and heuristics. The works in [4][5] propose a matrix factorization with social regu-larization approach for social recommendation. [19] develop a joint personal and social latent factor (PSLF) model which combines the collaborative filtering and social network modeling approaches.
On the other hand, memory-based methods such as [17] perform a modified breath first search in the trust networks to compute a prediction. They find users with the shortest path from the source user and aggregates their ratings based on the weights (degree of trust) between the source user and them. [18] proposes a random walk method to combine trust-based and item-based recommen-dation. All these works assume single trust relationships between users. However, we have shown that trust is topic-specific.
For the cross domain collaborative filtering, researchers have tried to utilize knowledge of users X  behavior in a different domain. These methods can be categorized into (a) binary relationships knowl-edge transfer [1][2]; and (b) ternary relationship knowledge trans-fer with decomposition [3]. For binary relationships knowledge transfer, [1] introduces a coordinate system transfer over multi-ple domains and transfer framework consisting of multiple data domains. These approaches share user/item latent feature spaces across CF domains and knowledge can be transferred through the shared latent features. [2] design a probabilistic method transfer for solving adaptive transfer learning problem in CF.

The work in [3] propose a matrix factorization based method use tags as bridge for cross domain transfer, by reducing the ternary relation to two 2D correlations and use these for regularization. A major difference from our work is that current cross domain rec-ommendation systems can only deal with the transfer binary rela-tionships knowledge such as users-items relationship [1][2] and/or ternary relationship with decomposition [3], while our method learns a ternary relation representation directly without information loss. To the best of our knowledge, this is the first work to integrate the cross domain and social trust for personalized recommendation.
In this work, we have presented a novel collaborative filtering method for integrating social network and cross domain network in a unified framework via latent feature sharing and cluster-level ten-sor sharing. This framework utilizes data from multiple domains and allows the transfer of useful knowledge from auxiliary do-main to the target domain. The results of extensive experiments performed on real world datasets show that our unified framework outperforms the state-of-the-art techniques in all the three recom-mendation tasks. We have also implemented the algorithm on a map-reduce infrastructure and have demonstrated its scalability. [1] W. Pan, N. N. Liu, E. W. Xiang, and Q. Yang,  X  X ransfer [2] B. Li, Q. Yang, and X. Xue,  X  X ransfer learning for [3] Y. Shi, M. Larson, and A. Hanjalic,  X  X ags as bridges between [4] M. Jamali and M. Ester,  X  X  transitivity aware matrix [5] H. Ma, D. Zhou, C. Liu, M. R. Lyu, and I. King, [6] L. D. Lathauwer, B. D. Moor, and J. Vandewalle,  X  X  [7] Y.-D. Kim and S. Choi,  X  X onnegative tucker decomposition. X  [8] D. D. Lee and H. S. Seung,  X  X lgorithms for non-negative [9] P. Resnick, N. Iacovou, M. Sushak, P. Bergstrom, and [10] M. Deshpande and G. Karypis,  X  X tem-based top-n [11] P. Symeonidis, A. Nanopoulos, and Y. Manolopoulos,  X  X  [12] S. Rendle, L. Balby Marinho, A. Nanopoulos, and [13] C. Wei, W. Hsu, and M. L. Lee,  X  X  unified framework for [14] C. Liu, H.-c. Yang, J. Fan, L.-W. He, and Y.-M. Wang, [15] G.-R. Xue, C. Lin, Q. Yang, W. Xi, H.-J. Zeng, Y. Yu, and [16] Y. Koren,  X  X actorization meets the neighborhood: a [17] J. A. Golbeck,  X  X omputing and applying trust in web-based [18] M. Jamali and M. Ester,  X  X rustwalker: a random walk model [19] Y. Shen and R. Jin,  X  X earning personal + social latent factor
