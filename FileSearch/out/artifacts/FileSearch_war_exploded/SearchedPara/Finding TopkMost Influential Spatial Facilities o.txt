 Uncertainty is inherent in many important applications, such as location-based services (LBS), sensor monitoring and radio-frequency identification (RFID). Recently, considerable research efforts have been put into the field of uncertainty-aware spatial query process-ing. In this paper, we study the problem of finding top k most influ-ential facilities over a set of uncertain objects, which is an impor-tant spatial query in the above applications. Based on the maximal utility principle , we propose a new ranking model to identify the top k most influential facilities, which carefully captures influence of facilities on the uncertain objects. By utilizing two uncertain object indexing techniques, R -tree and U -Quadtree, effective and efficient algorithms are proposed following the filtering and ver-ification paradigm, which significantly improves the performance of the algorithms in terms of CPU and I/O costs. Comprehensive experiments on real datasets demonstrate the effectiveness and ef-ficiency of our techniques.
 H.2.8 [ DATABASE MANAGEMENT ]: Database Applications X  Spatial databases and GIS Algorithms, Performance Spatial, uncertain
Bichromatic reverse nearest neighbor (BRNN) query has been extensively studied as an important spatial operator ever since it was introduced in [10] due to a wide spectrum of applications such as decision support, profile-based marketing, resource allocation, etc. Informally, given a set F of facilities (e.g., gas station, super-market) and a set of O of objects (e.g., car, person), the influence of a facility F can be evaluated by the number of objects whose near-est neighbors are F . Intuitively, it is desirable to identify the most influential facilities for various reasons such as resource allocation and decision making. Motivated by this, some existing work [20] proposed efficient algorithms to identify the influential facilities, in which they assume the location of an object or facility is pre-cisely described by a spatial point. As shown in Figure 1(a), we can calculate the influence score (e.g., the number of reverse near-est neighbors ) for each facility, where F 1 , F 2 and F 3 1 , 2 and 0 respectively. Nevertheless, in many applications the lo-cation of an object may be uncertain due to various reasons such as data randomness and incompleteness, the limitation of measuring equipment, delay or loss of data updates and privacy preservation. Following are two example applications.

In some warehouse management systems, the RFID tags are at-tached to the items and their current locations can be obtained by RFID readers. Since the RFID reading may be noisy due to the sensitivity of the low cost readers to various environmental fac-tors such as interference from nearby metal objects and contention among tags, the location of an object may be modeled as an uncer-tain object which is described by multiple instances. For instance, in Figure 1(b), the item A may appear at two positions a 1 with the same probability. The facilities in Figure 1(b) represent the dispatching points for various items. Suppose an item will be deliv-ered to the closest dispatch point. For a proper resource (e.g., labor, truck) allocation, the manager may want to know the k dispatching points with the highest influences (workload).
 Another example application is the location based service (LBS). The location of a mobile user can be described as an uncertain ob-ject, since her/his location may be derived based on the nearest contour lines of users possible location regarding the nearby tow-ers. In Figure 1(b), the mobile users are uncertain objects and su-permarkets correspond to the f acilities. S uppose that users tend to visit the nearby supermarket, it is meaningful to find the top k most promising supermarkets, i.e., supermarkets which influence the largest number of users.
 Challenges. Motivated by the above examples, it is desirable to study the problem of finding top k most influential facilities over uncertain objects. The challenges are twofold.

Firstly, unlike the traditional spatial database in which an object only contributes to the influence score of one facility 1 trivial to evaluate the influence of a facility because of the existence of multiple instances. As shown in Figure 1(b), the uncertain object A may be influenced by both F 2 and F 3 . Therefore, when we rank the influences of the f acilities, it is desirabl e to propose new model to capture the uncertainty of the uncertain objects.

In the paper, we follow the popular possible world semantics (See Section 3.1 for a formal definition), and the influence of each facility is modeled as a influence score distribution. The definition
Suppose the ties are broken arbitrar ily if there are mu ltiple nearest facilities for an object. of influence score of a facility in each possible world is exactly the same as the traditional BRNN query since only one instance occurs for each uncertain object in a possible world. Then we apply the maximal utility principle to rank the facilities. The maximal utility principle [14] has been widely used in various applications such as economic, finance and mathematics, and it selects the one with highest expected score as the optimal solution among a set of score distributions.

The second challenge is the efficiency of the algorithm. Com-puting the top k most influential facilities over uncertain objects is much more complicated than that of traditional objects (points). Although in Section 3 we show that our new model can avoid enu-merating all possible worlds, the computation cost is still expensive if we conduct the calculation in a straightforward way due to the ex-istence of multiple instances of uncertain objects. Therefore, in the paper, assuming the uncertain regions of uncertain objects are orga-nized by R -tree which is the most popular indexing technique used for uncertain objects in the literatu re, we propose an efficient algo-rithm following the synchronized R -tree traversal paradigm. More-over, based on a recent uncertain i ndexing technique [24], namely U -Quadtree, we further significantly improve the performance of the algorithm in terms of CPU and I/O costs.
 Contributions. Our contribution can be summarized as follows. Organization of the paper. The remainder of the paper is orga-nized as follows. Section 2 presents the related work in the pa-per. Then, we formally define the problem of top k most influential facilities over uncerta in objects, and introduce some preliminary work in Section 3. In Section 4, we propose our efficient algo-rithms based on R -tree and U -Quadtree respectively. Results of comprehensive performance studies are presented in Section 5. Fi-nally, Section 6 concludes the paper.
In the last decade, a lot of work has been done in the field of uncertain data processing and management. Since our work focus on the top k query of influential facilities over uncertain data, we briefly introduce the existing work on uncertain data processing and influential facilities query. Bichromatic reverse nearest neighbor query is first introduced by Korn et al. in [10]. Given a set F of facilities and a set the influence of a facility F can be measured by the number of ob-jects whose nearest neighbors is F . As one of its natural extension, the problem of finding top k influential facilities (T k IS), is pro-posed in [20]. Instead of computing the set of BRNNs for a given set of facilities, it returns the top k facilities with highest number BRNNs (influences). They provide novel pruning techniques based on a new metric called minExistDNN , and found the top k most influential facilities by browsing trees once systematically. Further-more, [9] found k locations from a set of candidate locations with the largest influence values according to a set of customers. On the other hand, the problem of optimal-location is studied in [21, 19] , aiming to find optimal area or location to set up a new facility such that it can attract the greatest number of facilities.
With the emergence of many recent important and novel appli-cations involving uncertain data, there has been a great deal of re-search attention dedicated to this field. Particularly, top k queries are important in analyzing uncertain data. Unlike a top k query over certain data which returns the k best alternatives according to a ranking function, a top k query against uncertain data has inher-ently more sophisticated semantics. Soliman et al [16] first relate top k queries with uncertain data. They define two types of impor-tant queries -U-Top k and U-k Rank, regarding discrete cases. The first one returns a set of k records which as a whole have the high-est probability to be the top k results in all possible worlds, while the second one retrieves k ordered records where the i -th record has the highest probability of ranking in the i -th position among all possible worlds. Following, a large amount of work has been ded-icated to top k queries with different semantics such as PT-k [8], Global-top k [22], expected rank top k [5] and unified top k [11] semantics.

Meanwhile, many spatial query techniques have been extended to solve uncertain problem. Nearest neighbor (NN) query over un-certain data is one of the most flourishing topic. Cheng et al. [4] is the first to tackle the probab ilistic nearest nei ghbor (PNN) query. whose aim is to determine probabilistic candidates for the near-est neighbor of a given target al ong with corresponding pr obability values. Zhang et al. [23] employ a rank based approach to pro-cess probabilistic k NN query, where k closest objects are returned according to their expected ranks. Cheema et al. [3] formalize PRNN query that is to retrieve the objects from the uncertain data that have higher probability than a given threshold to be the RNN of an uncertain query object. [12], [1] also propose techniques to solve PRNN queries over uncertain data. Moreover, some index-ing techniques are proposed for uncertain data such as R -tree [15], U -tree [17] and U -Quadtree [24].
To our best knowledge, Zheng et al. [25] is the only existing work which studies the problem of finding top k most influential facilities over uncertain objects. They assume that each object is characterized by multiple instances, and the facilities remain de-terministic, and adopt the expected rank as the ranking function to define the order of the facilities with probabilistic influences. The definition is that given a set of facilities S , a set of uncertain objects U , a query region Q , and a natural number k , the uncertain top k influential facility query returns the top k facilities in Q according to the expected rank semantics [5]. Based on attribute-uncertain model, an uncertain object may be influenced by multiple facili-ties instead of one as the deterministic case, so they use PRNN search to get the probability mass function (pmf) of the influence of a facility, and then compute expected rank of a facility across all possible worlds. They propose a general filter-refine style approach which includes efficient PRNN search, effective pruning schemes and divide-and-conquer based refinement to obtain the query result.
We present problem definition and necessary preliminaries in this section. For references, notations frequently used in the pa-per are summarized in Table 1.
 nnd _ min ( R 1 ,R 2 ) the minimal NND between rectangles nnd _ max ( R 1 ,R 2 ) the maximal NND between rectangles
A point (instance) x referred in the paper, by default, is in a d -dimensional numerical space. Given two points x and y , the dis-tance between them is denoted by d ( x, y ) . Euclidian distance met-ric is employed in the paper, and the techniques developed in the paper can be easily extended to other metric distances. In the paper, we focus on the bichromatic nearest neighbor search. Given a set F of facilities ( points) and the neares t neighbor of an object point x ( x is not a facility ) is its nearest facility, denoted by NN that is, d ( x, NN ( x )) = min { d ( x, F ) | F  X  X  ) } . Without loss of generality, we assume the nearest neighbor of a point x ( NN is unique.
 Uncertain Objects. An uncertain object can be described either continuously or discretely . In this paper, we focus on discrete case . Note that we can discretize a con tinuous proba bility density func-tion (PDF) of an uncertain object by sampling methods. In the dis-crete cases , an uncertain object consists of a set { u 1 of instances (points) where for 1  X  i  X  m , u i occurs with the probability p u i ( p u i &gt; 0 ), and m i =1 p u i =1 . For an uncertain object U , U mbr denotes the minimal bounding rectangle (MBR) of the instances of U .

Note that, in the paper, we assume the facilities are represented by points because usually their locations can be obtained precisely. The possible world semantics. Given a set of uncertain objects {
U 1 ,U 2 ,...,U n } , a possible world W = { u 1 ,u 2 ,...,u set of instances sequentially sampled from each object. Assume the uncertain objects are independent to each other, and the probability of W to appear is Pr ( W )= n i =1 p u i .Let W denote the set of all possible worlds, then W  X  X  Pr ( W )=1 . 0 .

E XAMPLE 1. In Figure 2(a), F consists of three facilities F F 2 and F 3 , and there are three uncertain objects A , B and C .Both A and B have two instances with th e same occurr ence pr obability (0.5), while C has only one single instance c 1 with p c 1 sequently, there are totally 4 possible worlds in this example, where W 1 = { a 1 ,b 1 ,c 1 } , W 2 = { a 1 ,b 2 ,c 1 } , W 3 = { { a 2 ,b 2 ,c 1 } and the pr obability of each possible world is ticularly, the possible world W 1 is illustrated in Figure 2(b).
For each possible world W ,let s ( F,W ) denote the influence score of the facility F regarding W , which is the number of reverse nearest neighbors of F in W ; In the paper, for each facility F ,we use S F to represent the influence score distribution of F ,where Pr ( S F = v )=
E XAMPLE 2. In Figure 2(b), we have s ( F 1 ,W )= 1 , s ,W )= 2 and s ( F 3 ,W )= 0 . Figure 2(c) illustrates the score distributions of F 1 , F 2 and F 3 . For facility F 1 , we have Pr 1) = 0 . 5 , Pr ( S F 1 =2)=0 . 5 . Similarly, Pr ( S F 2 Pr ( S F 2 =1)=0 . 5 , Pr ( S F 2 =2)=0 . 25 , Pr ( S F 3 =0)=0 and Pr ( S F 3 =1)=0 . 5 .

The influence score distribution of a facility F ( S F ) is a random variable, and hence we can apply the maximal utility principle to rank the facilities. The maximal utility principle [14] is one of the most popular models to select the one with highest expected score as the optimal solution among a set of score distributions. In the paper, the expected influence score of a facility F , denoted by I ( F ) ,isdefinedasfollows.

As the number of possible worlds grows exponentially regarding the number of uncertain objects in U and the number of instances in each uncertain objects, it is cost-inhibitive to apply Equation 1 straightforwardly by enumerating all possible worlds. Therefore, we will find an alternative of Equation 1 which can be derived with reasonable computational cost.
F b
Let NN ( U, W ) denote the nearest n eighbor (fac ility) of U in the possible world W ,and  X  ( NN ( U, W )= F )=1 if the facil-ity F is the nearest neighbor of U in the possible world W ,and  X  (
NN ( U, W )= F )=0 otherwise. Since we assume the un-certain objects are independent to each other, Equation 1 can be rewritten as follows.
 ,where Pr ( NN ( U )= F ) is the probability that F is the nearest neighbor of U , i.e., Pr ( NN ( U )= F )= u  X  U  X  NN ( u and NN ( u ) is the nearest neighbor of the instance (point) u .
Equation 4 implies that we can avoid enumerating all possible worlds since we can independently compute Pr ( NN ( U )= (i.e., nearest neighbor probability ) for each uncertain objects. Our empirical study shows that even a naive implementation of the Equa-tion 4 can outperform the existing work which follows the expected rank model.

In the light of maximal utility principle , we aim to find the k facilities with highest expected influence scores , which is formally described below.
 Problem Statement . Given a set of uncertain object O and a set of facility F ,findthe k facilities with the highest expected influence scores . We assume the number of facilities |F|  X  k , and ties are broken arbitrarily.
In [25], Zheng e t al. propose the expected rank based ranking model to evaluate the influence of the uncertain objects. For a given facility F , its expected rank , denoted by er ( F ) , is calculated as follows. ,where r ( F,W ) is the rank of F in the possible world W .Then the k facilities with highest ranks are retrieved.

Given a possible world W , the rank of a facility ( r ( F,W calculated based on its influence score (i.e., s ( F,W ) influence scores of other facilities, while the expected score com-putation is independent to other facilities. This implies that the expected rank based ranking model is much more complicate than the expected score based model. As shown in [25], we may have to enumerate all possible worlds in the worse case, which is cost-inhibitive in practise. Therefore, although novel pruning techniques are proposed to significantly improve the performance, the com-putational cost of the algorithm is still expensive due to the high complexity of the ranking model.

As mentioned in [5], the expected score based ranking approach does not satisfy the value invariance property, which implies that the ranking results of the expected rank model and the expected score model may be different if there are some inconsistent extreme scores in the possible worlds. For instance, a facility F has ex-tremely high score in a few of the possible worlds such that its rank is boosted by this extreme value. Nevertheless, under our prob-lem setting, for each possible world we have F  X  X  s ( F,W where n is the number of uncertain objects, and hence it is unlikely to have facilities with inconsistent extreme scores. This is con-firmed in our empirical study which shows that two models have almost the same top k results but new algorithms proposed in the paper are much more efficient (up to one order of magnitude faster) due to the simplicity of our new ranking model and efficiency of pruning techniques.
Various indexing techniques have been proposed to organize un-certain objects. In the paper, we apply R -tree and U -Quadtree based indexing techniques to facilitate the expected influence score computation. Note that the R -tree based indexing technique is the most widely used approach in the literature to index uncertain ob-jects [15], and U -Quadtree is the most recent indexing technique to support range search on uncertain objects.
 Given an uncertain object U ,weuse U mbr to denote the minimal bounding rectangle (MBR) of the instances of U . Figure 4 illus-trates the basic idea of the R -tree based indexing approach where the MBRs of the uncertain objects are indexed by R -tree [7]. As to each uncertain object, an aggregate R -tree is employed to organize the instances where the aggregate value of each intermediate entry is the probability mass of the instances in the entry.
 A quadtree [6] is a space partitioning tree data structure in which a d -dimensional space is recursively subdivided into (cells). In [24], the instances of an uncertain object U are orga-nized by a summary , denoted by S U , which consists of a set of entries { e } , where each entry records the object id ( e.oid ), the cell of the quadtree ( e.cid ) and the probability mass of instances al-located on this cell ( e.p ). The entries of the uncertain objects are organized by a B + tree where the cell ids are key values, which are generated based on Hilbert curve. Figure 3 illustrates an example of the U -Quadtree.

E XAMPLE 3. In Figure 3(a), objects A and B have 5 instances each and all instances have t he same occurr ence pr obability The height of the quadtree ( h ) is 3 and the ids of the cells are labeled. We may have S A = { (1 ,A, 0 . 2) , (6 ,A, 0 . 4) and S B = { (2 ,B, 0 . 4) , (6 ,B, 0 . 2) , (15 ,B, 0 . 4) }
Note that the summary of an object is not unique as an instance x can be assigned to any cell which contains x . In [24], a novel indexing construction algorithm is proposed to effectively build U -Quadtree based on the cost model. Moreover, the instances of each uncertain object are also organized by an aggregate R -tree in [24].
In this section, we investigate efficient algorithms to compute the top k most influential facilities based on their expected influ-ence scores . Section 4.1 presents a straightforward implementation of the algorithm. Assuming the uncertain objects are organized by R -tree, Section 4.2 improves the performance of the algorithm fol-lowing the filtering and verification paradigm. By taking advantage of an enhanced uncertain object indexing technique, U -Quadtree, Section 4.3 further improves the performance of the filtering and the verification algorithms.

In the paper, we assume facilities are organized by R -tree since it is one of the most popular index techniques in commercial spatial databases. Nevertheless, our techniques developed in the paper can be easily extended to other hierarchical spatial indexing techniques.
Algorithm 1 illustrates a naive implementation of the algorithm to compute the nearest neighbor probability of each instance re-garding all facilities following Equation 4. For each instance of an uncertain object, a nearest neighbor query [13] is issued to find its nearest facility F and the expected score of F is increased by the occurrence probability of the instance.
 Algorithm 1 : Naive Algorithm( S U , S F , k ) Input : k , Uncertain object set S U , Facility set S F
Output :Top k most influential facilities for each U  X  S U do
Return top k facilities with highest expected score;
Although we do not need to explore all possible worlds following the expected score semantics , the performance of the algorithm is not scalable to the number of instances and facilities because the in-stances of all objects are accessed in Algorithm 1 and the expected scores are calculated for all facilities, which leads to high CPU and I/O costs.
To address the scalability issue in the above naive algorithm, in this subsection, we propose the R -tree based algorithm following the filtering and verification paradigm. More specifically, based on the MBRs of the uncertain objects, which are organized by R -tree, we can come up with the lower and upper bounds of the expected influence scores of the facilities in the filtering phase. Then some facilities can be pruned based on the widely used top k filtering conditions; that is, a facility F will be eliminated from candidate set if there are a set Q of k other facilities such that I I  X  ( F ) for any facility F in Q ,where I + ( F ) ( I  X  ( F the upper (lower) bound of expected score for the facility F .In the refinement phase, we only need to explore the instances of the uncertain objects which may contribute to the expected scores of the facilities in the candidate set.

In the paper, we assume the MBRs of the uncertain objects and facilities are organized by an aggregate R -tree R O and a R -tree R respectively. We first introduce some notations used in the paper.
D EFINITION 1. Nearest Neighbor Distance (NND). Given a set of facilities F , the distance between a point x and its nearest neigh-bor F is the nearest neighbor distance of x regarding F , denoted by nnd ( x, F ) . In [20], effective method is proposed to compute the minimal and maximal nearest neighbor distances between two rectangles. In the paper, we use nnd min ( R 1 ,R 2 ) to denote the minimal nearest neighbor distance between two rectangles R R ; that is, for any point x in R 1 , its nearest neighbor distance regarding a set of facilities F contained by R 2 is not smaller than nnd min ( R 1 ,R 2 ) , i.e., nnd ( x, F )  X  nnd min ( R 1 same rationale, we have nnd max ( R 1 ,R 2 ) where nnd F
To enable computing the expected scores of the facilities in a level by level fashion, we introduce the concept of object tuple and facility tuple so that the expected score of a group of facilities or uncertain objects can be updated or pruned at the same time.
D EFINITION 2. Object Tuple ( T ). An object tuple T is em-ployed to maintain the information used for the NND computation of a set of uncertain objects in an entry e . Particularly, T.e is the object R -tree entry ( intermediate entry or data entry) associated with T , and T. F is a set of facility R -tree entries (intermediate en-try or data entry) which may contribute to the NND computation of the objects in T.e .

E XAMPLE 4. In Figure 5, there are four uncertain objects U U , U 3 and U 4 , and their MBRs are kept in data entries { .
 Suppose the object tuple T refers to the entry E 1 , then we have T.e = E 1 and T. F = { F 1 ,F 2 ,F 3 } where F 1 , F 2 , F ities entries which may contribute to the NND computation of the object associated with T .

Whenever there is no ambiguity, we use F to denote an entry in the facility R -tree. We use I  X  ( F ) and I + ( F ) to denote the lower and upper bounds of the expected score of F . Note that F may represent an intermediate entry which contains a set of facilities. R Motivation
The basic idea of the filtering algorithm is to conduct the NND computation on the high level entries of R O and R F such that we do not need to compute the NND regarding each individual object and facility, and hence improve the performance of the algorithm in terms of CPU and I/O costs.

In Figure 5, let T refer to the entry E 1 and T. F = { F 1 We can remove F 2 and F 3 from T. F since the maximal NND be-tween E 1 and F 1 ( nnd _ max ( E 1 ,F 1 ) ) is smaller than the minimal NND from E 1 to F 2 and F 3 ( nnd _ min ( E 1 ,F 1 ) and ( nnd _ min ( E , F 3 ))) , which implies tha t none of the f acilities in F can contribute to the NND computation of the objects in E hence T. F = { F 1 } . Similarly, we have T. F = { F 2 ,F T.e refers to E 2 . Moreover, let  X  be the k -th largest lower bounds of the expected scores for the facility entries seen so far, we do not need to further explore the entr ies since none of the facilities in the entry can be top k influential facilities. In the paper, we say a facility entry F is disabled if I + ( F ) &lt; X  .

Besides the facility entries, we can also prune object entries in the paper. In Figure 6(a), we have T.e = E 1 and T. {
F 1 ,F 2 ,F 3 } . Suppose F 1 isadataentry,i.e., F 1 corresponds to a single facility, and the maximal NND between F 1 and E 1 is smaller than the minimal NND from E 1 to F 2 and F 3 , then we can increase I  X  ( F 1 ) by agg ( E 1 ) where agg ( E 1 ) is the number of uncertain objects in E 1 . Clearly, we do not need to further explore the un-certain objects in E 1 and E 1 is marked as disabled . On the other hand, as shown in Figure 6(b), suppose all fac ility entries in T. are disabled (shown as grey rectangles in the example), we can also prune E 1 since objects in E 1 only contribute to the expected scores of the non-prom ising facilities.
 Algorithm 2 : R -tree based Filtering ( R O , R F , k ) Algorithm
Algorithm 2 illustrates the details of the R -tree based filtering algorithm on R O and R F , which follows the synchronized R -tree traversal paradigm used in spatial joins. A FIFO queue ( Q )isem-ployed to keep object tuples, and the first object tuple is initialized by the roots of R O and R F (Lines 2 -5 ). For each object tuple T popped from Q , Line 10 puts the object tuple T to S which keeps the objects need to be further explored in the refinement phase if all entries in T.e and T. F are data entries. Otherwise, Line 13 generates an object tuple t for each child entry of T.e for each facility entry in T. F , we put all of its child entries to t. F if it is not marked as disabled . Meanwhile, I I the maximal NND from T.e to facility entries in t. F , denoted by d max . For each facility entry e f in t. F , we exclude e if nnd _ min ( t.e, e f ) &gt;d max and decrease I + ( e f In the case that T.e isadataentry,wesimplyset t.e = T.e at Line 13. The same strategy goes for facilities in Line 16. e (Line 20-23). Recall that agg ( t.e ) is the number of uncertain ob-jects in t.e . The facility entry e f will be pruned in Line 25 if its upper bound of the expected score is smaller than  X  . In Line 26-28, we increase I  X  ( e f ) by agg ( t.e ) and do not further explore uncer-tain objects in t.e (i.e., prune t )if e f is the only data entry in e. In Line 29-30, we prune the object tuple t if all of the facilities in t.

F are non-promising f acilities. Line 32 pushes the object tuple t to Q if it is not disabled . Finally, Algorithm 2 terminates when Q is empty, and the facilities surviving the filtering phase ( returned as well as the object tuples in S .
 R After the filtering phase, we need to explore the instances of the uncertain objects in S such that we can come up with the top k in-fluential facilities in the refinement phase. Algorithm 3 illustrates the framework of the refinement procedure. For each object tuple T in S , we apply the function Refinement to refine the expected scores of the facilities in the candidate set. Note that we do not need to process T if all facilities in T. F are marked as disabled . Finally we have I ( F )= I  X  ( F ) ,andthe k facilities with the high-est expected scores are retrieved.
 Algorithm 3 : R -tree based Refinement ( C , S , k ) In the following, we first discuss the access orders at Line 2 of Algorithm 3 , then present the function Refinement at Line 6. Access Order. Intuitively, we should put high priority to the ob-jects which contribute to th e facilities with la rge upper bounds of the expected scores since they are more likely to be the top k influ-ential facilities, and hence leads to a tighter expected score thresh-old  X  , i.e., better pruning power. In the paper, an object tuple T is sorted by the largest upper bounds of expected scores for facili-ties in T. F . Our empirical study shows this strategy outperforms others alternatives such as the random order and ordering by the size of T. F , i.e., the number of facilities which may influence the uncertain objects associated with T.e .
 Refinement Algorithm. Algorithm 4 is used to update the ex-Algorithm 4 : Refinement( e , F ) pected scores of the facilities by exploring the instances kept in an aggregate R -tree entry e . It is similar to the R -tree based filtering algorithm (Algorithm 2) except that: ( i ) In Algorithm 2, both object entry and facility entry are drilled down in a level by level fashion, while in Algorithm 4 only the object entries are expanded since we already reach the bottom of the facility R -tree in the filtering phase. ( ii ) At Line 7, 10, 18 and 22 of Algorithm 4, p ( e ) represents the probability mass of the instances in the aggregate R -tree entry e .
Observe that the performance of R -tree technique is poor when the sizes of the MBRs of the uncertain objects are not very small because it is not effective to capture the instance distribution of an uncertain object by a single MBR. In [24], Zhang et al. propose a novel indexing structure based on the quadtree such that a good tradeoff can be achieved between the filtering cost and refinement cost.
Suppose the uncertain objects are organized by U -Quadtree and the instances of each uncertain object are kept in an aggregate R -tree, in this subsection, we present efficient U -Quadtree based al-gorithm to identify the top k influential facilities.
 U As the U -Quadtree is also a hierarchical spatial tree structure, Al-gorithm 2 can be modified to support the filtering procedure. Re-call that the MBR of an uncertain object U is kept for R -tree in-dex, while an uncertain object U is described by a summary S in U -Quadtree which consists of a set of entries where each en-try is represented by its corresponding cell in the quadtree and the probability mass of the instances assigned to the cell. Therefore, in Line 10 of Algorithm 2, an object tuple is kept in S if it is a cell at the lowest level and all facilities in T. F are data entries. Moreover, for an object tuple T , T.e corresponds to a cell c which maintains the entries of the uncertain object summaries assigned to c ,and T.

F records the facility entries which may influence the instances of the uncertain objects associated with c .When I  X  ( e f is increased (decreased), instead of agg ( T.e ) the probabilities sum of all entries on c (i.e., T.e ) will be used.
 U We first introduce the containment relationship between a cell c andanentry E in our algorithm description. The cell c fully con-tains the entry E if all points in the MBR of E are contained by the boundary of c .If c does not fully contain E but some points in the MBR of E are contained by the boundary of c ,then c par-tially contains E . Otherwise, there is no containment relationship between c and E . For instance, in Figure 7, E 2 is fully contained by c and E 1 is partially contained by c .

Algorithm 5 illustrates the details of the U -Quadtree based re-finement algorithm. For each uncertain object U survived in the filtering phase, we issue a set of window queries to update the ex-pected scores of the facilities in F . More specifically, a FIFO queue Q is employed to keep entries in the aggregate R -tree of the uncer-tain object U ( R U ), which is initialized by the root of R entry e in the R U , we will invoke the function Refinement if it is fully contained by c . Otherwise, the child entries of e are pushed to Q if e is partially contained by c . Note that a data entry will either be fully contained by c or have no containment relationship with c . Finally, we have I ( F )= I  X  ( F ) ,andthe k facilities with the highest expected scores are returned.
In this section, we present results of a comprehensive perfor-mance study to evaluate the efficiency and scalability of the pro-posed techniques in the paper. Following algorithms are evaluated. Algorithm 5 : U -Quadtree based Refinement ( C , S , k ,  X  )
Datasets. Three real spatial datasets, namely CA, USA and RT, are used to evaluate our techniques. CA and USA contain and 200 K 2 -dimensional points representing locations in the Los Angeles and the United States respectively which are available at [2]. The two datasets are separated into several groups of data re-spectively, and we choose one group of data with 996 points as the facilities and the other group of data with 21 , 050 points to rep-resent the centers of uncertain objects from CA as default dateset, whose distributions are showed in Figure 8. RT is obtained from the R-tree-Portal [18] with cultural landmarks and populated places in North America. The number of uncertain objects in USA and RT are 20 , 287 and 24 , 493 respectively. By default, around cilities are chosen from corresponding datasets. In our experiment, all dimensions are normalized to domain [ 0 , 10000 ], and the uncer-tain region of the uncertain object is a circle with expected radius r varying from 20 to 300 with default value 60 .Thereare m in-stances for each uncertain object and the expected m varies from 100 to 500 with default value 200 . Therefore, the total number of instances in default dataset is 4 , 210 , 000 . The instances of an uncertain object follow popular distributions Normal(N) and Uni-form(U) where Normal(N) distribution serves as default instance distribution.
All algorithms proposed in this paper are implemented in stan-dard C++ with STL library support and compiled with GNU GCC. Experiments are run on a PC with Intel Xeon 2 . 40 GHz dual CPU and 4 G memory running Debian Linux. The disk page size is fixed to 4096 bytes and the capacity of the entry page ( f )issetto In the paper, we evaluate the I/O performance of the algorithms by measuring the number of uncertain objects explored, i.e., uncer-tain objects whose aggregate R -tree are loaded in main memory. Query response time is recorded to evaluate the efficiency of the algorithms, which contains the CPU time and the I/O latency.
Table 2 lists parameters which may have an impact on our perfor-mance study. In our experiments, all parameters use default values unless otherwise specified.

The performance of UQuadTKIS is effected by the height ( h ) of the U -Quadtree. As expected, Figure 9(a) shows that number of objects visited in the refinement phase drops when h increases due to the larger size of uncertain object summaries. Nevertheless, UQuadTKIS becomes less efficient for larger h when h&gt; 9 implies that the algorithm cannot pay-off the larger index size when h&gt; 9 . In the following experiments, h is set to 9 .
Figure 10 reports the effectiveness of different access order strate-gies in R -tree based refinement algorithm where the sizes of the ra-dius grow from 20 to 100 . Particularly,  X  X y fac X  denotes the facili-ties expected score based access order strategy used in Algorithm 2, and  X  X y obj X  stands for the object based strategy, i.e., accessing in decreasing order of the number of facilities associated with each object. It is shown that our facility based strategy always outper-form the object based strategy.

We evaluate the filtering effectiveness of RTKIS and UQuadTKIS in Figure 11 by measuring the number of candidates (facilities) af-ter filtering phase. The performance of both algorithms degrade against the growth of r u . UQuadTKIS significantly outperforms RTKIS since more resources are allocated to the U -Quadtree to capture the distribution of the instances of the uncertain objects. Comparing Different Ranking models. Figure 12 evaluates the similarity of different ranking models ( expected rank and expected score ) on three datasets CA, USA and RT respectively, which shows the scatter-plot of the ranks of 100 facilities. Particularly, each point in the scatter-plot represents a facility where x -axis and y -axis record the rank of objects based on expected rank model and expected score model respectively. It is shown that all points line up along the diagonal, and the maximal difference of the ranks for a facility is only 2 in Figure 12 , which indicates that the results of two models are almost the same. Impact of Data Distribution. Figure 13 reports the response time and the number of uncertain objects accessed of the algorithms against different data distributions where CA N represent the dataset in which the centers of uncertain objects are from CA and the in-stances of each uncertain object follow the Normal(N) distribution. It is reported that UQuadTKIS significantly outperforms other al-gorithms under all data distributions, and UTKIS ranks the last due to the high complexity of the expected rank model. Particularly, on CA N dataset, The response times of four algorithms (UQuadTKIS, RTKIS, Naive and UTKIS) are 17 . 8 , 44 . 2 8, 84 and 140 spectively. They are 20 . 14 , 52 . 85 , 103 and 166 . 2 tively on RT U dataset. Impact of the number of instances ( m ). We evaluate the response time of the algorithms as a function of the number of instances ( m ) in each uncertain object which varies from 100 to 500 . Clearly, the refinement cost increases in refinement phase when m grows. Figure 14 shows that UQuadTKIS has the best scalability against m , followed by RTKIS, Naive and UTKIS.
 Impact of the radius( r u ). Figure 15 investigates the performance of four algorithms as a function of the radius size which various from 20 to 300 . It is shown that the scalability of UQuadTKIS is better than that of RTKIS regarding the growth of r u .
 Impact of the number of facilities and objects. We also evaluate the impact of the number of facilities as well as the number of ob-jects against four algorithms, where the number of facilities grows from 200 to 1000, and the number of objects varies from 10,000 to 50,000. Figure 16 and Figure 17 show that UQuadTKIS have the best scalability among four algorithms.
 Impact of k . In the last set of experiments, we evaluate the re-sponse time and the number of I/O accesses against various k val-ues in Figure 18, which indicates that the performance of all algo-rithms are not very sensitive to the k value. Summary. As a short summary, our comprehensive performance study shows that our ranking model has very similar ranking re-sult with that of expected rank model, while the efficiency of the algorithms under our ranking model is much better. Even a naive implementation can outperform UTKIS Algorithm which follows the expected rank model. The experiments also show the effec-tiveness and efficiency of the filtering and refinement algorithms proposed in the paper based on R -tree and U -Quadtree. The over-all performance of the U -Quadtree based algorithm (UQuadTKIS) always outperforms the R -tree based one (RTKIS) under various experiment settings because more sophisticated indexing structure is employed in UQuadTKIS.
In this paper, we investigate the problem of finding top k most influential facilities over a set of uncertain objects. Based on a new ranking model, we develop two effective and efficient algorithms by utilizing two uncertain objects indexing techniques, R -tree and U -Quadtree respectively. A set of pruning techniques are proposed in the paper to significantly improve the performance of the filtering and refinement algorithms. Our experiments convincingly demon-strate the effectiveness and efficiency of our techniques. Acknowledgement . Ying Zhang is supported by ARC DP110104880 and UNSW ECR grant PS27476. Wenjie Zhang is supported by ARC DP120104168 and DE120102144. Xuemin Lin is supported by ARC DP0987557, ARC DP110102937, ARC DP120104168 and NSFC61021004. [1] T. Bernecker, T. Emrich, H.-P. Kriegel, M. Renz, S. Zankl, [2] U. C. Bureau. [3] M. A. Cheema, X. Lin, W. Wang, W. Zhang, and J. Pei. [4] R. Cheng, D. V. Kalashnikov, and S. Prabhakar. Querying [5] G. Cormode, F. Li, and K. Yi. Semantics of ranking queries [6] R. A. Finkel and J. L. Bentley. Quad trees: A data structure [7] A. Guttman. R-trees: A dynamic index structure for spatial [8] M. Hua, J. Pei, W. Zhang, and X. Lin. Ranking queries on [9] J. Huang, Z. Wen, J. Qi, R. Zhang, J. Chen, and Z. He. Top-k [10] F. Korn and S. Muthukrishnan. Influence sets based on [11] J. Li, B. Saha, and A. Deshpande. A unified approach to [12] X. Lian and L. Chen. Efficient processing of probabilistic [13] A. Papadopoulos and Y. Manolopoulos. Performance of [14] M. Shaked and J. G. Shanthikumar. Stochastic Orders and [15] S. Singh, C. Mayfield, S. Prabhakar, R. Shah, and S. E. [16] M. A. Soliman, I. F. Ilyas, and K. C.-C. Chang. Top-k query [17] Y. Tao, R. Cheng, X. Xiao, W. K. Ngai, B. Kao, and [18] Y. Theodoridis. The r-tree-portal. [19] R. C.-W. Wong, M. T.  X zsu, A. W.-C. Fu, P. S. Yu, L. Liu, [20] T. Xia, D. Zhang, E. Kanoulas, and Y. Du. On computing [21] D. Yan, R. C.-W. Wong, and W. Ng. Efficient methods for [22] X. Zhang and J. Chomicki. On the semantics and evaluation [23] Y. Zhang, X. Lin, G. Zhu, W. Zhang, and Q. Lin. Efficient [24] Y. Zhang, W. Zhang, Q. Lin, and X. Lin. Effectively indexing [25] K. Zheng, Z. Huang, A. Zhou, and X. Zhou. Discovering the
