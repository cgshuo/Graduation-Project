 Webservices are a core technology in e-Business and are researched by a number of people by a spread using of XML(eXtensible Markup Language), WSDL(Web Ser-vice Definition Language), SOAP(Simple Ob ject Access Protocol). However, because a webservice is composed only by syntactic information described by in XML, the adaptation of the Semantic Web to webservices are gaining momentum. This enables webservices to be accessed by contents rather than by keywords. Webservices can be discovered, selected and composed automatically by other services[1]. This composition is very important because it presents approaches for all kinds of WWW activities. A static composition has problems in a dynamic WWW environ-ment. If a webservice is modified once, all composition plans having the modified webservice must be redesigned. It is largely an ad-hoc, time-consuming and error prone process. The dynamic composition of webservices is noticed by many research-ers [2]. These researchers X  studies have not been completed yet and therefore suitability in the diversity of a business environment cannot be determined. Dynamic composition generates an execution plan with webservices, IOPE(Input/Output/ Pre-condition/Effect). This execution plan is a sequence list of executions of simple web-services. But, there is no relationship between the Input/Output two webservice, so an execution plan including two services cannot be made dynamically. These services are executed in parallel and are composed as a composition service. This paper presents an ontology-based framework for dynamic composition of webservices. This ontology is designed by an extension of OWL-S[3]. A presented framework can generate an execution plan having a sequence or parallel execution plan of webservices automatically and selecting the best execution plan. A selected plan is translated into an OWL-S ServiceProcess model. This framework has some benefits which are not described previously. (1) It can create an execution plan having a sequence plan and a parallel plan. (2) It can select the best execution plan, using the QoS model presented by the designed ontology. (4) A selected execution plan is used in various execution environments, supporting OWL-S[4,5]. The dynamic composition of semantic web services creates proper execution plans of composite webservices and selects a best execution plan using the QoS properties of a composite webservices. In this section, we propose the ontology for execution plan creation, and the evaluation of an execution plan for best execution plan selection. It is based on extensions of OWL-S[3]. 2.1 Ontology Model We proposed an ontology model, the extension of OWL-S for this framework. Fig 1 describes this ontology model. The QoS ontology is composed of three properties. property has three values, min/average/max. A response time describes the time from calling an operation to getting a response from a webservice. An execution cost de-scribes the total cost in terms of resources utilization. Reliability describes the rate in which webservices are executed correctly. A connection between webservices is achieved by exchanging message. A message describes datatype, name, unit and role. The business role gives the semantics of the corresponding parameter. It takes its value from a predefined taxonomy for business roles. In order to connect between two webservices the mapping between messages of two webservices must be completed. The functionalities provided by a webservice are accessible through operation invoca-tions. We consider four operation modes.  X  X ne-way X ,  X  X otification X ,  X  X olicit-response X , service is executed using transaction methods. We designed properties for a transac- X  X locked X . This ontology is not within the scope in this paper. It will be published in a subsequent paper. 2.2 Webservice Composability In this section, we describe how the framework can decide whether two webservices can be composed together. A composition of two webservices is achieved by an op-webservices can be composed, message compatibility and operation compatibility are verified. Message Compatibility Interoperation is achieved by exchanging messages. A message could be composed of parameters, having specific datatypes. A sending parameter must be interoperable with a receiving parameter. Every parameter would have well-defined semantics ac-cording to that taxonomy. We consider two primary data-type-compatibility methods: direct and indirect compatibility. Two parameters are directly compatible if they have the same data type. A parameter p is indirectly compatible with a q if the type of p is derived from the type q. We extend the notion of data type compatibility to messages as follows: A message M is a datatype compatible with a message N if every parame-ter of M is directly or indirectly compatible with a parameter of N. Note that not all parameters of M need to be mapped to the parameters of N. Operation Compatibility In order to be compatible with other operations, these operations have a  X  X ual X  mode. For example, if an operation mode of one webservice is  X  X ne-way X  then the other operation mode must be  X  X otification X . Also, two operations have the same purpose properties and category properties. A detailed algorithm is omitted because of a re-stricted coverage in this paper. Automatic Creation of Execution Plan In this section, we describe how an execution plan can be created automatically. First, chainStartList is generated from user requirements. If a webservice can satisfy a satisfy a user X  X  combined requirement, the some webservice will be elements of chainStartList. The chainStartList variables, is used when composing a sequence of puts(weHave) then webservice composition in this chain is stopped. Finally, all chains are eturned for an xecution plan of composite webservices Algorithm 1 describes the creation of an automatic execution plan. Algorithm 1. Generation of Execution Plans. Input: weHave = {inputs provided by User Requirement}; Output : weWant = {outputs desired by User Requirment}; 
Begin chainStart.output); 
End In this section, we designed an ontology-based framework for composing semantic webservices. This framework supports dynamic composition of webservices and WebService Registrator, Composition Plan Generator and OWL-S Translator. In order to interpret the ontology, we use an OWL inference engine. This engines speci-fies are not within the scope of this research. WebService Register converts webser-vice description to PSO TRIPLE. The proposed ontology is based on OWL-S, there-fore, it is a subset of RDF(Resource Definition Framework)[6]. Conversion to TRIPLE elements are stored in a knowledgebase and used for matchmaking and se-into OWL-S. In this section, we describe how a designed framework creates a best execution plan. using properties. Assume user X  X  input message has parameter a b and user X  require-ment is r q. has a parallel execution plan having two sequences of webservices. Using S9 and S10 connected with a composition of S2and S7 and S5. Two composition plans are gener-ated (Line 15~18 in Algorithm 1) and a best execution plan among two compositions is selected. properties and is translated to OWL-S for executing in webservice composition en-gine. We designed the ontology based framework for the dynamic composition of webser-vices and a model for dynamic composition and calculation for finding the best exe-cution plan. This framework has some merits. (1) It can generate a best execution plan dynamically using ontology and QoS properties. It can be adapted to a variety of business applications. (2) This plan can be translated to OWL-S, for usage in any execution environment supporting OWL-S. In the future, we will extend this frame-work using a transaction model. This will achieve execution, monitoring, and fault handling of composite webservices. This work was supported by an INHA UNIVERSITY Research Grant 
