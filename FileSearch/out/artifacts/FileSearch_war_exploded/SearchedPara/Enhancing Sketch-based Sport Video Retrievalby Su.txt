 Searching for scenes in team sport videos is a task that recurs very often in game analysis and other related activities per-formed by coaches. In most cases, queries are formulated on the basis of specific motion characteristics the user re-members from the video. Providing sketching interfaces for graphically specifying query input is thus a very natural user interaction for a retrieval application. However, the quality of the query (the sketch) heavily depends on the memory of the user and her ability to accurately formulate the in-tended search query by transforming this 3D memory of the known item(s) into a 2D sketch query. In this paper, we present an auto-suggest search feature that harnesses spa-tiotemporal data of team sport videos to suggest potential directions containing relevant data during the formulation of a sketch-based motion query. Users can intuitively select the direction of the desired motion query on-the-fly using the displayed visual clues, thus relaxing the need for rely-ing heavily on memory to formulate the query. At the same time, this significantly enhances the accuracy of the results and the speed at which they appear. A first evaluation has shown the effectiveness and efficiency of our approach. H.3.3 [ Information Storage And Retrieval ]: Informa-tion Search and Retrieval; H.5.2 [ Information Interfaces and Presentation ]: User Interfaces Query-by-sketch; motion queries; query formulation; query expansion; video retrieval; content-based information retrieval
Sport analysts and coaches are in constant need of ways to facilitate their mission. Sport video retrieval is one of the critical tasks in sports analysis. Currently, most systems for supporting game analysis rely on data (spatiotemporal) that is obtained by extracting player and ball movements ei-ther manually such as in [1], from broadcast videos such as in [2, 3], or from on-the-field cameras specifically deployed to assist in providing tracking information such as in [4, 5, 6, 7, 8, 9]. Recently, the emergence of light-weight wireless sensor devices explicitly designed for the sports domain [10, 11] allows to capture a wider array of data including phys-iological data and, at the same time, obtain more accurate tracking information. There have been generic sketch-based approaches for the retrieval of motion queries within videos without the need for an overlay pattern of metadata, as in [12]. However, it will be impractical to use such an ap-proach for sport retrieval as it is limited to searching in short video sequences and does not have a holistic view of the field, in addition to only providing very simple direc-tional queries which will not be sufficient for sport retrieval. Other approaches provide solutions for querying location-tagged multimedia elements, or human locomotion patterns on a map as shown in [13, 14, 15]. The main limitation here is the fact that sports need other forms of query types due to the wide array of events happening within games.
SportSense [16, 17, 18] is an approach to search in team sports videos on the basis of motion paths sketched by a user. However, from our previous work, we have discov-ered that searching for known items in the form of motion queries relies to a great extent on the memory of users and their ability to project a 3D memory on a 2D screen in the form of a query sketch, and this affects the accuracy of the results and the ease of use of the system. In this paper, we present an approach that relaxes the need for extensive use of memory by relying on the system suggesting ways on how to continue the search process, thus simplifying the search process, increasing accuracy and even, at the same time, increasing the speed of the system. A first evaluation has proven that our approach is both effective and efficient.
In what follows, we present how users in query-by-sketch video retrieval can be supported by visual aids on spatiotem-poral information about various events within a game.
The most common scenario in which coaches and ana-lysts search for video scenes starts on a specific location on the field, then an event happens moving the ball to another place, then a subsequent event happens, and so forth. An example query searches for video snippets that start some-where in the midfield, with a path to the left side of the field, followed by a pass into the penalty box and ending with a goal or a shot on or off target. In our previous work in SportSense [16, 17, 18], we developed an event cascade query type in which the user sketches the areas in which each of the events happens in a chronological order. In this pipeline query, with each sketch, the results tend to narrow down until the desired results are reached as shown in Fig-ures 1(a) to 1(c). The main challenge of this type of query is that users had to remember exactly where the events hap-pened at every single step, and to correctly transform their 3D memory into a 2D sketch. This led the situations when a user could mistakenly sketch a smaller than required re-gion, early during the query formulation, and dramatically decrease the eventual recall rate of their query.

To overcome these limitations, we have developed an in-tuitive query type that allows to query a cascade of events happening in a game in a reverse chronological order by giv-ing users visual clues on how they would like to proceed with the query. This is inspired from the fact that when trying to recall a series of events happening within a game, such as football, usually the most important events tend to be easily remembered, in contrast to the events that lead to them. For example, a user can rather easily recall the field location of important goals or shots on target in a game but might have problems recalling 4 or 5 events back that led to these specific events. In other words, if we revisit the example query given in the previous paragraph, it would be much easier to start in a reverse chronological order and to draw a sketch of the region containing locations of the final events like goals and shots on goal and have the system au-tomatically suggest paths on how to proceed retrospectively by harnessing the indexed spatiotemporal data. The formu-lation of queries in reverse chronological order also avoids information overload, since important events tend to be se-lective and occur less frequently.

We incrementally formulate a query to allow for the ben-eficial use of the auto-suggest feature. After users initially select the important events that conclude the event sequence they are searching for and sketch a region containing their location, thus triggering a spatial query as in Figures 2(a) and 2(b), they incrementally expand the query until they achieve satisfying results. They accomplish this by choosing how they want their queries to expand by selecting which events lead to the currently filtered events as shown in Fig-ure 2(c). Accordingly, a query is performed and results are displayed visually on the field as shown in Figure 2(d). Users can either stop the search process and display the results in the form of the corresponding video snippets or they can use the suggested visual clues and filter-in only the events they want to further expand. Figures 2(e) to 2(h) show query expansion performed several times in a row. Finally, the user can select a specific motion path by clicking on it in the result list, allowing its path description to appear sepa-rately without other motion paths and at the same time the syncronized video starts to play as shown in Figure 2(i).
When users want to expand queries, they can select a sub-set of the selected events that they want to further expand upon using either the circular, rectangular or custom sketch selection tools according to their preference as demonstrated in Figures 2(c), 2(e) and 2(g) respectively.
The overlay of metadata on the sport video comprises events and their locations. It is stored in a spatial database to leverage the built-in index structures. SportSense sup-ports any spatial databases that follow the Open Geospatial Consortium (OGC) specifications. We have initially chosen two spatial databases for our prototype, SQLite with Spa-tialite extension which used R  X  -tree as a spatial index and SQL Server express edition which uses a multi-layered grid index.

In order to query for event cascades in reverse order, users initially perform a spatial database query to select the events they subsequently expand their query from. All subsequent expand queries are not spatial database queries but filter preceding events. When users constrain the location of pre-ceding events on the basis of a sketch and the specification of the type(s) of the event(s), we loop over all the selected events and perform a query for each event to obtain the event that lead to it using standard SQL and leveraging a B-tree index. This query simply searches for user-selected events that lead to currently selected events, within a time frame of 60 seconds. This time frame is given by default, however, the user can further extend it if no relevant results are obtained. Each query is sorted by time in a descending order and only the top event for each query is part of the result so as to obtain only the closest events, in terms of time, that lead to the currently selected events. It is worth emphasizing that only the initial query involves executing a spatial query, while all subsequent expand queries are classic queries that use a B-tree index, thus results are obtained in very interactive response times using traditional tablet PCs.
In this section, we present an evaluation of the effective-ness and efficiency of the auto-suggest retrieval feature when used with reverse chronological queries in sport videos.
For evaluating the auto-suggest motion query feature, we have set up a test collection based on the Manchester City Football Club analytics dataset [19]. This data set includes annotated metadata for events happening within a football game between Manchester City FC and Bolton Wanderers FC such as passes, corner-kicks, offsides, fouls, shots on tar-get, shots off target, goals, etc. Events stored are accompa-nied with their location information (relative to the field), the time they occurred and the players involved. Ten lay users participated in the evaluation of SportSense . We automatically logged information during each session to measure precision, recall and response time, in an effort to evaluate the effectiveness and efficiency of the system. Pre-cision and recall were calculated at the last retrieved item in the result set for each user, and then averaged for the 10 users. We used both SQLite with spatialite extention and SQL Server express for data storage. A Lenovo tablet PC (Intel Core i5 CPU @ 2.50 GHz) with 6 GB RAM was used. Each user was shown videos snippets of two attack-ing scenes by Manchester City in the first half of the game. The video scenes originate from the mid-field, then move to the left hand side of the field by team passes, then they are passed into the penalty box, and finally ending in a shot on or off goal. Then, they were asked to search for the two video snippets using the reverse chronological event cas-cade queries with auto-suggest enabled, in order to compare their performance with evaluations measured when using the chronological event cascade queries.
Table 1 shows the evaluation results of the reverse chrono-logical event cascade query type with auto-suggest enabled. Essentially, it outperforms the chronological event cascade query type in terms of precision, recall and response time. All users were able to obtain 100% precision and recall as op-posed to having a lesser average recall rate with the chrono-logical order event cascade query type. Moreover, users have reported that the reverse chronological event cascade is a more natural way to query for motion paths than the chrono-logical one, especially in the (most common) case where only the final events are memorized. It is worth mentioning that for the reverse chronological cascade query, precision and re-call rates were 100% even before sketching the final region that contains passes in the midfield, showing that starting with selective events and expanding the query has also the benefit of avoiding information overload on the screen and assists in narrowing down on results faster. This is also clear when inspecting the average number of results displayed. Fi-nally, due to the fact that the reverse chronological event cas-cade queries need just a single spatial database query while Scenario Avg. Precision Avg. Recall Avg. # of results Avg. Time Chronological Query Phase (1) Figure 1(a) 2.28% 95% 94.80 0.17 s 0.04 s Spatial SQL Chronological Query Phase (2) Figure 1(b) 62.01% 95% 3.10 0.09 s 0.03 s Spatial SQL Chronological Query Phase (3) Figure 1(c) 100% 95% 1.90 0.08 s 0.01 s Spatial SQL Reverse Chronological Auto-Suggest Query Phase (1) Figure 2(b) 51.86% 100% 4.2 0.17 s 0.04 s Spatial SQL Reverse Chronological Auto-Suggest Query Phase (2) Figure 2(c) 51.86% 100% 4.2 0.02 s 0.01 s Classic SQL Reverse Chronological Auto-Suggest Query Phase (3) Figure 2(e) 100% 100% 2 0.01 s 0.01 s Classic SQL Reverse Chronological Auto-Suggest Query
Phase (4) Figure 2(g) 100% 100% 2 0.01 s 0.01 s Classic SQL the rest are standard SQL queries, response times of phases two and beyond are significantly lower. Overall, SQL Server express has shown to better in the initial spatial query, with both DB systems providing interactive response time.
In this paper, we have introduced a novel auto-suggest fea-ture for searching for motion paths which is a type of query that is very common in sport videos. It exploits the use of an indexed overlay of spatiotemporal information of events and automatically suggests potential useful directions dur-ing the formulation of sketch-based motion queries. Users can intuitively select how they want to proceed with the query by filtering the results at each stage that they want to continue expanding upon. This relaxes the proactive use of memory and thus enhances accuracy of the results, and at the same time increases the speed of the system. The evaluation has shown the effectiveness and efficiency of this search utility in a practical set-up. In the future, we plan to investigate the use of graph databases for supporting new forms of queries while still maintaining interactive response times. In parallel, we also plan to further evaluate the sys-tem X  X  scalability characteristics with different query types on the basis of additional datasets of different sizes. This work has been partly supported by the Swiss National Science Foundation, project MM-DocTable.
