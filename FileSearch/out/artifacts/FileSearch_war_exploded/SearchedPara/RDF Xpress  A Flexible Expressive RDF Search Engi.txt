 We demonstrate RDF Xpress, a search engine that enables users to effectively retrieve information from large RDF knowledge bases or Linked Data Sources. RDF Xpress provides a search interface where users can combine triple patterns with keywords to form queries. Moreover, RDF Xpress supports automatic query relax-ation and returns a ranked list of diverse query results. H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval X  Query formulation, Retrieval models RDF, SPARQL, entity relationship search
RDF data is typically searched using triple-pattern-based query languages such as SPARQL. For example, to find a list of singers who have won an Academy Award, the following two triple-pattern query can be issued: ?x isA Singer . ?x won Academy_Award where ?x denotes a variable. In principle, this allows precise querying in the database spirit. However, RDF data may be highly diverse and queries such as the one above may return way too many re-sults, and thus ranking by informativeness measures is crucial to avoid overwhelming the users. Moreover, as the triples are usu-ally extracted from textual contexts or have community-provided annotations, it can be beneficial to also consider keywords for for-mulating search requests. For example, to find singers who have won an Academy Award and suffered from drug abuse issues, we can issue the same triple-pattern query as above and associate it with the keywords: drug and abuse . Finally, to improve the recall of queries with too few or even no results, which happens often due to the Boolean-match semantics of SPARQL queries, automatic query relaxation must be performed. For example, in the second triple pattern of our example query, we can relax Academy_Award to Golden_Globe_Award or won to nominatedFor to retrieve a list of singers who have won a Golden Globe Award or were nominated for an Academy Award, respectively.
RDF Knowledge Base: Our RDF knowledge base consists of a set of RDF triples. Moreover, each triple is associated with a bag of words which contains any keywords that are associated with that triple (i.e., present in the source from which the triple was extracted). In addition, each triple is associated with a witness count which is the number of sources from which the triple was extracted. Similarly, each triple-keyword pair is associated with a witness count reflecting the number of witnesses for the triple that contain the keyword. The witness counts are used as features that are used to rank query results.

Search Interface: RDF Xpress provides a user-friendly form-based interface to search the underlying RDF knowledge base. The search interface allows users to easily generate triple patterns by using an auto-complete feature for subjects, predicates and objects. Moreover, next to each generated triple pattern, there is a text field where users can freely type any keyword conditions.

Retrieval Engine: The retrieval engine processes the user X  X  query and retrieves a set of ranked results where the results are ranked based on a language modeling appr oach that utilizes the witness counts of triples as a ranking feature [2] .

Query Relaxer: In case there are no sufficient results for a given query, we generate a set of relaxed queries which are close in spirit to the given query, execute them and rank their results taking into consideration how well a result matches the original query [3].
Result Diversifier: To ensure that the top ranked results are highly relevant to the query and diverse from each other, we re-rank the top-k highest-ranked results using a Maximal-Marginal Relevance approach [1].
RDF Xpress ( http://www.mpi-inf.mpg.de/yago-naga/ rdf-express/ ) runs over two RDF knowledge bases. The first is constructed from a subset of the Internet Movie Database (IMDB) and automatically linked with YAGO [4]. The second is based on LibraryThing which is an online book catalogue and tagging com-munity. The audience will get a chance to interact with the sys-tem and issue their own queries that combine both structured triple patterns with keywords and investigate the ranked list of results re-turned for their queries.
