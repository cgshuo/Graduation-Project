 JEREMY D. FRANK, MICHAEL J. IATAURO, MATTHEW E. BOYCE, ELIF K  X  URKL  X  U, Electrical power is a highly constrained resource on the International Space Station (ISS), and is produced by its eight solar arrays. The ISS solar arrays are designed to automatically track the sun as the station orbits the earth, in order to maximize power production. However, normal ISS operations such as water dumps, docking spacecraft, attitude changes, thruster firings, and Extra Vehicular Activities (EVAs) can increase structural loads, environmental contamination, and thermal stresses on the arrays. A variety of operational safety constraints known as  X  X light Rules X  pre-scribe the correct operation of the arrays, in order to ensure safety of crew, systems, and vehicle, while other rules express preferences for vehicle longevity and mission ef-fectiveness. Ultimately, the flight rules define acceptable array orientations and opera-tional modes, which in turn limit power generation. The operational safety constraints include context-dependent constraints on legal configurations, temporal constraints limiting allowed transitions between configurations, and preferences on the order in which to satisfy the constraints under contingency operations. It normally takes about four weeks of calendar time to manually produce a solar array plan for a four-week planning horizon.

The Solar Array Constraint Engine (SACE) automatically generates solar array op-erations plans to optimize ISS solar array configurations subject to these constraints and user-configurable solution preferences. SACE is built on top of the Extensible Universal Remote Operations Planning Architecture (EUROPA) AI planning system. EUROPA X  X  built-in functionality was used to model some constraints, while EUROPA X  X  modular and extensible framework enabled the addition of custom code for modeling other constraints and optimizations, as well as the addition of custom planning al-gorithms to generate solar array plans. In addition, SACE provides flight controllers with a real-time situational awareness capability by monitoring the status of the var-ious constraints as the plans are executed. Flight controllers can also perform what-if analysis in SACE to address unplanned events that may cause station configuration changes. SACE is currently in use at the NASA Johnson Space Center (JSC) for mon-itoring ISS solar arrays; the planning functionality is being certified for operational use.

This article describes the planning problem, discusses how EUROPA is applied to solve the problem, and presents performance results from analysis of SACE on oper-ational solar array planning scenarios. The rest of the article is organized as follows. Section 2 formally describes the constraints and preferences on ISS solar array plans. Section 3 describes how the EUROPA framework was used to create SACE and presents some results. Section 4 describes how the work described here relates to previous work in the application of automated reasoning systems to space mission operations prob-lems. Finally, Section 5 draws some conclusions and describes opportunities for future work. Solar array planning is part of a larger activity to develop an integrated plan of opera-tions for the ISS. Timelines describing the orbit and orientation of the ISS are generated by the Attitude Determination and Control Officer (ADCO) based on higher-level ISS operations requirements, in close coordination with their Russian counterparts, and provided to Power, Heating, Articulation, Lighting Control Officer (PHALCON) in the form of attitude and thruster timelines. As discussed shortly, these timelines form the inputs to the solar array planning problem solved by SACE. The Operations Planners (OpsPlan) take as input the solar array plans and resulting power availability produced by SACE in order to develop activity plans for the crew.

This section fully describes the solar array planning problem. Section 2.1 provides a more complete description of the ISS solar arrays. Section 2.2 describes the inputs to the planning problem. Sections 2.3 and 2.4 describe the constraints and preferences on solar array plans. Section 2.5 provides a description of the problem from an academic point of view, along with a discussion of the practical limitations that flight controllers placed on the application and how they influenced the solution methodology. The ISS has eight solar arrays, each of which is mounted on a rotary joint called the Beta Gimbal Assembly (BGA, denoted  X  ij ). A set of four BGAs is mounted on a truss attached to a Solar Alpha Rotary Joint (SARJ, denoted  X  i ), with one SARJ on each of the starboard and the port sides of the ISS. Therefore, each solar array has two degrees of rotational freedom, though some degrees of freedom are constrained by the shared SARJs. Figure 1 shows the ISS solar array arrangement. In addition to the angle of orientation, the state of each rotary joint (SARJ and BGA) is determined by its mode, which can be one of Autotrack , Park ,or Lock for each SARJ, and Autotrack , Park ,or Latch for each BGA. In the Autotrack mode, on-board software automatically rotates the solar arrays so that the array surface is pointing directly at the sun. In the Park mode, a drive motor is engaged to maintain the current array angle facing. In the Lock or Latch modes, a physical barrier is engaged to maintain the current orientation. The state of ISS relevant to solar array power generation and safety is determined by a combination of parameters that collectively define a configuration , denoted c . The input to the solar array planning problem consists of a sequence of configurations such that the start time of a configuration c k equals the end time of the immediately preceding configuration c k  X  1 . Some configurations may have flexible start and/or end times and durations. Figure 2 shows a sample solar array planning problem with two main events that are broken down into subevents, each of which is associated with a time, solar beta angle, attitude type, reference frame, and Yaw, Pitch, and Roll (YPR). Events 5 and 6 have fixed start and end times, but other events have flexible end times. A thruster timeline (not shown) lists thrusters that are allowed to fire during various events, both during normal and contingency operations. As described previously, these inputs are generated by other parts of the ISS flight control team.

A configuration c combines all activities and states that influence solar array plan-ning over an interval of time. An attitude reference frame and the YPR of the station with respect to that frame determine the position and orientation of the ISS. In com-bination with the solar beta (angle between the solar vector, which points from the sun to the center of the Earth, and the ISS orbital plane) and the array orientation, this determines the shadowing on the arrays as well as the loads and forces on the arrays and their joints. Of course, the array facing relative to the sun, coupled with shadowing, influences power generation. Specific events (e.g., docking, EVA, water dump), the port to be used for docking, and the attitude control and reboost jet se-lects (configuration-specific combinations of thrusters fired, for attitude control and orbit maintenance, respectively) determine additional loads, environmental contami-nation (e.g., from thrusters) that can damage the solar arrays, and shadowing of the arrays. Other parameters that influence both the loads and contamination include the alternate jet selects used in case of thruster failure, and whether or not contingency operations are in effect.
 The orientation of a single array is defined by the pair of values of the SARJ and BGA. There are four classes of constraints that limit orientations: power generation (denoted P), structural load (L), environmental contamination due to particulate accumulation on array surfaces (E), and longeron 1 shadowing (S). These constraints are represented in tables (denoted t) mapping an orientation to a color from the set red (R), yellow (Y), and green (G). The set of colors is denoted Col . In most cases, red indicates infeasibility, for example, insufficient power to run life support or forces strong enough to cause structural damage to the station; yellow values are acceptable but may result in a reduction of vehicle longevity or achievable mission objectives, and green is optimal. A visual representation of an example 360x360 table is shown in Figure 3. These tables are provided by another part of the ISS flight control team as inputs to the solar array planning process.
 In a legal plan, each array joint is either Turning or in one of the modes Autotrack, Park, or Lock/Latch. Each configuration requires the arrays to be in one of the modes continuously while the configuration holds. Consecutive configurations can be  X  X overed X  by a long interval during which arrays remain in the same modes.

Each array type (SARJ and BGA) has a maximum rate at which the different joints can be slewed or turned. The BGA slew rate d  X  ij is 18  X  /min while the SARJ rate d  X  i defaults to 9  X  /min but is adjustable up to 30  X  /min (the SARJ rate is fixed over the course of a plan). Initiating turns or mode changes requires a minimum duration to account for time needed for authorizing and issuing commands and monitoring their completion. For example, transitioning into or out of Lock or Latch takes 20 minutes. Some modes have minimum duration constraints; for example, Autotrack mode must last at least 90 minutes. It is not permissible to turn during docking or undocking, reboost events, or station maneuvers. Finally, joints must be in position before setting the mode to Lock or Latch, and turns are executed when it is safe to do so. An array must be in the planned position and mode at the beginning of the configuration, according to the Flight Rules. This final constraint can be relaxed in an  X  X ttitude hold X  configuration, as no safety-critical events take place during this configuration. For a given configuration of the ISS, the objective is to find orientations and modes for the different arrays that maximize the power availability, but at the same time keep them in a feasible space with respect to the various constraints. 2 For a sequence of configurations, each successive orientation and mode selection must also satisfy the temporal constraints on mode changes and those imposed by the angular rotation rates.
A simplified version of the Flight Rule determining the mode in a given configuration c can be paraphrased as follows.

The modes cannot be independently determined for each joint, because four BGAs are mounted on each SARJ, and the legitimate modes for the SARJ depend on the behavior of the BGAs mounted on it. The actual Flight Rule has about forty lines of if-then-else clauses and involves calculating intermediate values for modes that get overwritten by other values depending on the intermediate values of the modes of other joints. The scope of this constraint is the orientations and modes of all rotary joints associated with each SARJ.

For orientation determination, the relevant Flight Rule can be paraphrased as follows.

Further objectives during planning include minimizing turns of the rotary joints once sufficient power is available to meet critical needs (power is in the green zone), minimizing the change in direction of rotation of the joints, and minimizing the number of locks and latches. These considerations arise to reduce wear on the joints. The presence of multiple (and sometimes conflicting) optimization criteria makes the resulting planning problem similar to other multicriteria problems becoming common in planning, such as planning for modular printers [Do et al. 2008]. However, the criteria for optimal array orientations are quite complex.

The ideal solar array plan is one that optimizes the orientations and modes in each configuration. However, there may be insufficient time to turn the arrays to a new orientation, or to command mode changes, especially from short configurations. Under these circumstances, flight controllers prefer to merge adjacent configurations and optimize the new configuration, rather than seek a suboptimal orientation for a prior configuration that satisfies the temporal constraints. Generating a solar array plan requires finding feasible and optimal values for the orientations and modes of the eight BGAs and the two SARJs in each input configuration, as well as actions to change the modes and orientations of the arrays from one configuration to the next. The problem state is composed of the orientations, modes, and the (sequence of) configurations. The possible actions include: mode changes (Park, Lock or Latch, Autotrack) of the different BGAs and SARJs, and the turn or slew actions to change the orientation of the arrays. Both the state and the action take time, and may have flexible duration. The goal of the planning problem is to find a set of actions, states, and their extents that are consistent, do not violate the constraints, and are optimal with respect to the solution preferences. The basic planning constraints are: (a) array orientations do not violate feasibility constraints on power, load, contamination, and shadowing as defined by the tables that apply in each configuration; (b) array modes are feasible for chosen orientations, again as defined by applicable tables; (c) joints are in position before parking, latching, or locking; (d) actions meet minimum duration requirements for commanding and execution; and (e) turns are executed when it is safe to do so.

A simple version of the solar array planning problem is tractable. Consider the problem for a single SARJ with N configurations. Focusing first on finding feasible array plans for N configurations reduces planning to a Constraint Satisfaction Problem (CSP). A CSP consists of a set of variables V each with an associated set of values D(V), and a set of relations over pairs of variables (V j ,V k ) that restricts the valid assignments to those variables. The constraint graph of the CSP consists of a node k for each variable V , and of an arc (j,k) between the nodes representing V j and V k wherever there is a relation limiting their assignment. Imposing an ordering on the nodes k, the width of a node is the number of arcs from k to a node j ordered before k. The width of an ordering is the maximum width over all nodes, and the width of a constraint graph is the minimum width over all orderings of the nodes.
 The CSP is formulated as follows: for SARJ i , and configuration c k , let a CSP variable V constraints can be either unary constraints on V k or binary constraints between vari-ables V k  X  1 and V k between successive configurations, ensuring that the time needed to change the orientations and modes of the SARJ and the BGAs is less than t k  X  1 -t k , where t k is the start time of c k . The resulting CSP, while having large variable do-mains, is nevertheless of fixed size for a single configuration. Since configurations are totally ordered sequences and constraints only limit the free variables in adjacent con-figurations, the resulting problem has bounded width, and thus finding feasible plans is tractable [Freuder 1982]. Stated another way, the complexity of the problem scales only with the number of configurations, and tractability is assured because the only constraints are those between consecutive configurations.

While optimizing each array orientation and mode requires searching a complex optimization landscape (described further in Section 3.4) over the domain of 360  X  360 possibilities, this cost is constant for a single configuration. Consider the goal of minimizing the sum of the minimum cost over all configurations. Due to the previously mentioned simple structure of the feasibility problem, this optimization problem is also tractable [Larrosa and Dechter 2003].

As previously stated, however, flight controllers neither use a global optimality criterion nor treat the problem as a single constrained optimization problem. Instead, they optimize configurations sequentially, constraining the solution of subsequent configurations based on the solution of previous configurations. Conflicts may arise because there is insufficient time for actions to switch between optimal solutions for the adjacent configurations. If the optimal solution to a configuration eliminates all solutions to the next configuration, flight controllers merge configurations and opti-mize again, rather than seeking new optimal solutions to the previous configuration. Flight controllers also merge short configurations (as described in Section 2.4). The problem is thus treated by the flight controllers as a sequence of tractable constrained optimization problems, with a variety of heuristics used to integrate sequences of configurations. It is also worth noting here that, as described in Section 2.1, the planning problem is one of many solved by the flight control team, and the constraints violated during solar array planning may have originated elsewhere in the planning process. Thus, unsolvable solar array planning may be addressed  X  X pstream X  in the planning process, leading to new inputs and a new planning problem. SACE uses the EUROPA framework for constraint reasoning and automated planning. EUROPA is a model-based AI planning system that accepts a declarative description of a planning problem consisting of a list of timelines (concurrent threads of a plan), a list of states that may hold on each timeline over an interval, and compatibilities de-scribing the relationships that must hold between states (including states on different timelines) in order for a plan to be valid. The EUROPA framework provides an interface that allows programmers to build customized planners that meet the needs of their applications. EUROPA incorporates special-purpose modules for reasoning about time, managing constraints, managing timelines, managing applicability of compatibilities, and managing search control heuristics.
 Section 3.1 describes the formulation of the solar array planning problem using EUROPA X  X  modeling language. Section 3.2 describes modeling and implementation of some of the more complex constraints. Section 3.3 gives a short description of the planning algorithm. Section 3.4 describes transforming the Flight Rules and other preferences into optimization criteria that govern orientation and mode selection for a single configuration, and the algorithm for optimization. Finally, Section 3.5 describes how this algorithm builds a solar array plan for a sequence of configurations. SACE uses the EUROPA modeling language, the New Domain Definition Language (NDDL), to declaratively represent the solar array planning problem. This greatly facilitated the rapid development of an initial solution, which was then iteratively modified in close consultation with the solar array planners at NASA JSC. The NDDL representation includes state and activity descriptions, as is common in planners using traditional modeling languages like the Planning Domain Definition Language (PDDL) [Gerevini et al. 2009; Hoffmann and Edelkamp 2005]. However, unlike PDDL, NDDL uses a state variable-value formalism. EUROPA thus takes its heritage from planning formalisms like IxTeT [Ghallab and Laurelle 1994] and SAS [Jonsson and Backstrom 1998]. EUROPA state variables are called timelines , and the values of timelines are sequences of states . States are temporally extended predicates, and consist of a propo-sition and a list of parameters, which by default includes the start, end, and duration times. For example, a state Turning(x,y) indicates that an array joint is turning from one orientation x to another orientation y. Timelines are totally ordered sequences of states; hence, a timeline can be in only one state at any instant. The final component of NDDL model is a set of compatibilities that govern the legal arrangements of states on, and across, timelines. These compatibilities are logical implications asserting that if a timeline is in a state, then other timelines must be in one of a set of compatible states. Compatibilities can incorporate explicit constraints on the parameters of the states. EUROPA provides a library of such constraints, and this library can be extended if new constraints are needed. For a detailed description of the EUROPA framework and the underlying concepts, please refer to Frank and J  X  onsson [2003].

The SACE model employs several timelines. One timeline represents the sequence of configurations for which an array plan must be generated. Each array joint also has an associated timeline. The configuration timeline states have the form Configuration( c ). The parameters c in this state are features of the configuration needed to identify the tables, for example, the attitude, reference frame, whether or not an EVA is taking place, and so on (as described in Section 2.2). The only decision variables on the configuration timeline are the start and end times of the configurations.
 The array joint states for each  X  i timeline and similarly for  X  ij timeline are ,  X  i o k  X  i s k ). For each configuration Configuration (c k ) there are 20 decisions to make in order to assign the mode and orientation of the 10 solar array joints. For each of the ten is shorthand for  X  i 1  X  i 2  X  i 3  X  i 4 . For legibility, the notation omits the superscripts when describing a single configuration and its variables. The notation denotes the domain of legal values of parameter variable x by d(x), and the value assigned to variable x by v(x). The domain of each mode variable d(  X  i s )ord(  X  ij s ) is either one of the modes from the set M = { A,P,L } or Turning(x, y), where A, P, and L correspond to Autotrack, Park, and Lock/Latch, respectively, and x, y are angles. For the orientation (or angle) noted Deg . When in Park, Lock, or Latch the angle is the fixed orientation of the joint throughout the configuration. However, the angle continuously changes while turning or when in Autotrack mode; in these cases the interpretation of the angle is the value at the end of the configuration.

EUROPA X  X  modeling language makes it easy to represent the turn rate constraints, temporal and mode duration constraints, and preconditions described in Section 2.3. As an example, a compatibility enforces a constraint that an interval Mode(  X  i s,  X  i o )must compatibility decomposes an attitude event (e.g., Event 5 in Figure 2) into a maneuver, followed by an attitude hold, followed by a thruster firing; each of these are distinct configurations requiring different table constraints to be applied.

Figure 4 shows a pictorial representation of how SACE uses EUROPA timelines to represent configurations and the states of one SARJ. The figure shows two consecutive configurations (labeled K-1 and K). In this example, there are two Mode states (labeled M-1 and M) on the SARJ timeline, separated by a SwitchMode state. The figure also shows a set of compatibilities (labeled C1 through C4) that enforce the constraints be-tween the various states. For example, C1 enforces the constraint that the configuration K-1 has to be contained within the temporal extent of the mode M-1. The compatibil-ity C2 ensures that all the table constraints that are relevant to configuration K-1 are enforced; it also enforces the lock-latch constraint LLC c (  X  i o ,  X  i o ) on the mode M-1. Sim-ilarly, C4 enforces the constraint that switching to Autotrack mode requires at least 20 minutes, and C3 enforces that the Autotrack mode has to be preceded by a SwitchMode state, and that mode M has a minimum duration of 90 minutes. The following section further describes how EUROPA models the tables and lock-latch constraints. The majority of the constraints in SACE are the table constraints. The set of all tables T is provided as an input to the problem. Tables map an orientation for a SARJ, BGA pair to a color, that is, each table  X  (  X  i o,  X  ij o ) is a function  X  : Deg 2  X  Col .Y(  X  )  X  {
P,L,E,S } denotes the class of table constraint  X  . Each table  X  may be applicable in one or more configurations. The applicability conditions are simple equality expressions over parameters of the configuration c ,suchasEVA = true. C(  X  ) denotes the set of configurations in which table  X  applies. T( c ) denotes the set of tables that apply in c . The set C(  X  ) and table type Y(  X  ) are provided with each table  X  . Problem inputs are restricted to sequences of ground configurations; the planner never needs to search over variables to ground the configuration. By design, exactly one table constraint from each of the classes P, L, E, and S constrains an orientation in a configuration c. Thus, | T( c ) |= 32 (8 SARJ-BGA pairs per configuration, and 4 tables per SARJ-BGA pair).
EUROPA makes it very easy to add new classes of constraints. The EUROPA infrastructure allows the creation of a constraint with a name that can then be used in compatibilities. These constraints must, at a minimum, report whether a ground assignment to all variables in the scope satisfies the constraint or not. Optionally, the constraints may prune values of variables given a partial assignment [Frank and Jonsson 2003]. SACE uses custom constraints for T( c ); these constraints are contained in compatibilities on the Configuration( c ) intervals as shown in Figure 4. The custom table constraint is a generic piece of code that reads tables in the format already used by the flight controllers; thus, the same constraint code is reused for each of the classes of constraint.

The Lock-Latch constraint, denoted LLC(  X  i o ,  X  i o , X  i s ,  X  i s , c ), constrains the modes of all array joints on one side (port or startboard) of the vehicle as a function of the orientations. As Section 2.4 shows, this is calculated using the tables. For example, to autotrack SARJ  X  i , requires constraining  X  (  X  i o , X  ij o ) = G for all values of  X  ij o in both Load and Environment tables. Recall that the set of tables T( c )isdefinedbya configuration c, and is therefore determined by the input to the planning problem. This constraint can be rewritten LLC c (  X  i o ,  X  i o ), which is a function LLC c : Deg 5  X  M 5 . Rep-resenting the full constraint in EUROPA required splitting the Flight Rule described previously into several parts, most of which were additional custom constraints that were added to EUROPA. These constraints are summarized in one element of the com-An overview of the complete solar array planning algorithm is shown in Figure 5. It has three main components: optimizing a single configuration (labeled 1), conflict resolution through configuration merging (labeled 2), and plan clean-up (labeled 3).
Optimizing mode and orientation for a single configuration is posed as an uncon-strained optimization problem. This requires transforming the applicable flight rules and preferences into a cost function defined over the modes and orientations. Some of the constraints and preferences are simple expressions, but some require solving a moderately complex problem simply to determine the cost function. To create a solar array plan, the planner optimizes configurations in chronological order, and stitches the resulting configurations together. The following section (3.4) describes the optimization problem, and the rest of the algorithm in Figure 5 is described in Section 3.5. The optimization problems for the starboard and port sides of the station are indepen-dent. The cost for a single SARJ is calculated from the costs of each orientation, which is first calculated independently for each solar array. The cost function X  X  design ensures that every infeasible orientation has worse cost than any feasible solution. An orienta-tion is feasible if its power table entry is not red, its load entries (SARJ and BGA) are not red, and its longeron entry is not red. The environment table entry is allowed to be red in feasible orientations. 3 The cost function for each SARJ  X  i is as follows. The component cost functions refer to the color cost, L c (due to different constraints being in the red, yellow, or green zones), the mode cost, L m (due to modes of the BGA and the SARJ), the distance cost, L d (due to the distance between orientations of arrays), the direction change cost, L  X  (due to change in direction of trajectory of arrays), and power cost, L p (due to incremental differences in power within a constrained power zone). While the cost function is less complex, a similar approach to combining objec-tives into a single cost function was used in planning for modular printers [Do et al. 2008]. The weights ( w c ,w m ,w d ,w  X  , and w p ) on the different component cost functions are designed such that mode cost matters only when colors are equal, distance cost matters only when modes are equal, direction change cost matters only when distances are equal, and power output cost matters only when all other components are equal.
The distance, direction change, and power cost functions are simple algebraic expres-sions. The mode cost is derived from a simplified version of the Flight Rule described in Section 2.4. For each SARJ-BGA pair, there are three BGA modes (Autotrack, Park, and Latch) and three SARJ modes (Autotrack, Park, and Lock); there are thus 9 mode costs, one per pair of modes for joints (  X  i , X  ij ). Autotrack is preferred to Park, which in turn is preferred to Lock or Latch, and the weights for each combination are chosen accordingly. The color cost function requires weighting the possible color outcomes for each table in conformance with the appropriate Flight Rule. The weights are a simple function of the preferences specified by the Flight Rule, so a Linear Programming (LP) formulation was able to solve for these weights offline. 4 Recall there are four constraint categories and The linear constraints on the color weight values use the Flight Rule for determining orientations, as described previously in Section 2. Yellow power (P) is preferable to red power; if yellow power is feasible, loads (L) take precedence; if green loads are feasible, then longeron shadowing (S) takes precedence; then lastly, environment (E) takes precedence. Figure 6 shows a decision tree representation of the preferences over combinations of table types (P,L,E,S) and colors (R,Y,G); only 15 distinct combinations are specifically represented as paths through the decision tree (e.g., if power is red, the values of the other tables are irrelevant to the LP cost function). Each path through the decision tree is written as a linear constraint on the color variables. The LP encoding is shown in Table I. Since only a feasible solution is required for this LP, SACE uses the minimization of the sum of the color weights as the objective function.
This subsection describes the details of the single configuration optimization (labeled 1 in Figure 5) and discusses its computational complexity. Optimization occurs in two stages. The color cost is optimized first, after which the combined mode and orientation is as follows.

L The total color cost calculation for the 4 BGAs mounted on each SARJ therefore takes 360  X  4  X  360  X | T( c k ) | table lookups, which are the dominant computational cost. all of the cells of the relevant tables in the worst case (e.g., Autotrack mode of both SARJ and BGA is permitted only if all of the cells of relevant tables are green). The total mode cost calculation for each SARJ therefore takes 360  X  4  X  360  X | T( c k ) | lookups as well.

During the second stage, the optimal cost for each value v(  X  i o k ) is calculated as the sum of the costs for the best v(  X  ij o k ) for the specified value of v(  X  i o k ). The previously (  X  follows.
 The mode costs used in the cost function of the first stage are optimistic lower-bound es-timates. Once an optimal orientation is determined, SACE then determines the modes for the different joints by propagating the LLC constraint described in Section 3.2. These constraints uniquely determine the mode given the colors of each table resulting from the angle; no search is needed.

Each of these cost function optimizations is implemented as a special-purpose soft-ware module that is integrated with EUROPA. The domain of array orientations is searched from 0 to 359, in that order; when multiple solutions of equal quality are present, the first optimal orientation is used. 5 This section describes how the orientation optimizations and resulting mode assign-ments are integrated to plan for a sequence of configurations. The optimal array ori-entations determined by the optimization algorithm hold throughout the configuration as indicated by component 1 of Figure 5, when the array timeline is in Park, Lock, or Latch states. In the case of Turning and Autotrack states, the results from the optimization algorithm only specify the orientations at the end of the configuration; the array orientations during the span of a configuration are calculated based on the BGA and SARJ slew rates, along with the orientations of the arrays at the end of the previous configuration. Once the orientations at the end of a configuration are known, these are used to prune the feasible orientations for the next configuration, once again based on the BGA and SARJ rates.

As described in Section 2.4, if the optimal orientations in successive configurations do not leave sufficient time to either turn or change modes, the configurations are merged and an optimal solution is obtained for the new merged configuration (component 2 in Figure 5). When two configurations are merged, a new configuration is created from the union of the properties in each configuration. The table constraints in the merged configuration are the sum total of all the tables from the constituent configurations. A single solution for the orientations and modes is obtained to cover both configurations, and must account for all applicable tables. For example, suppose that a configuration c k defined by a thruster firing requires a BGA position optimized for loads and con-tamination. The optimal array positions in this configuration may require slewing the arrays given the optimal orientation found for configuration c k  X  1 . If there is insufficient time for the turn, configurations c k and c k  X  1 are merged to create configuration C k ,and a new optimal orientation is found. All tables contribute to the cost function for this optimization. Then the temporal constraints are checked assuming the slew starts at the end of configuration c k  X  2 . Note that the configurations have been merged only with respect to the solar array operations, and the configurations are treated separately with respect to other actions such as the thruster firings or water dumps.
There is no backtracking, and hence there is no guarantee that a feasible solution is found even if one exists. However, SACE users have found that most conflicts are due to insufficient duration for actions and merges allow sufficient time to transition between optimal solutions of the new configurations.

Once the entire configuration timeline is processed and all temporal and precon-dition constraints are provably satisfied, the resulting BGA and SARJ timelines are processed to add the necessary SwitchMode(  X  i s k  X  1 ,  X  i s k ), SwitchToTurning, and Turning(  X  i o k  X  1 ,  X  i o k ) actions (component 3 in Figure 5). Consecutive Lock or Latch mode states, or sequences of the form Lock X  X ark X  X ock or Latch X  X ark X  X atch, are transformed into single intervals to prevent needless unlock or unlatch actions. The final plan, represented by the BGA and SARJ timelines, is postprocessed first to determine feasibility with respect to the longeron shadowing constraint because calculating the timers requires knowing the complete event sequence, and next to calculate the detailed power availability along the timeline. Figure 7 shows the SACE planning results window with the various timelines. This section describes the performance of SACE on representative solar array planning problems. Flight controllers do not have a quantitative measure of the goodness of a plan. For analysis, this article uses the time to plan as the primary performance metric. A secondary performance metric is the number of merged configurations, as each merge imposes more constraints on those configurations. This latter metric can be thought of as a weak measure of the possible suboptimality of the plan. Recall that Section 3.3 provided an intuition for planning time being roughly linear in the number of configurations and merges (each merge requires a new optimization with more applicable tables).

Table II presents empirical data from applying SACE to a set of seven ISS plan-ning problems. The first four are small problems created to test different aspects of SACE planner, and the last three are snippets of the actual ISS solar array planning problems over a three-to eight-day planning horizon. The  X  X onfigurations X  column in-dicates the number of configurations that must be planned, and the  X  X orizon X  column indicates the total time span, in minutes, covered by these configurations. The number of applicable table constraints depends on the specific configuration being optimized, and can influence the optimization time. The next two columns show the minimum and maximum number of applicable tables over all invocations of the optimizer. The next column shows the total number of table constraints invoked during the planning problem. The  X  X erges X  column shows the number of times configurations are merged during planning, and the  X  X ax Merged X  column shows the maximum number of ad-jacent configurations merged during optimization. The  X  X ptimizations X  column shows the number of times the optimizer is invoked during planning. Configurations that are shorter in duration than is required for command execution procedures are automati-cally merged with the previous configuration without first invoking the optimizer. For this reason, the first two problems have the same number of optimizations, even though there is an extra merge in the first problem. The  X  X ime X  column shows the planning time in seconds. These data are insufficient to fully and conclusively describe SACE performance. Nonetheless, these data match the intuition that planning takes longer on problems with more configurations, on problems with more applicable tables, and on problems that require merging.

Human planners spend roughly four weeks to plan for each four-week operations period. This includes the time spent in gathering information and generating the con-straint data. In order to compare the performance of SACE relative to human planners, a better metric would be the man-hours spent on planning excluding data preparation time. The last two problems in Table II have a time horizon of roughly 1 week, and each one took the planners about 80 man-hours. Manual planning is an iterative process, and the 80 man-hours included 6 iterations. This translates to about 800 minutes per itera-tion, compared to about 10 X 15 minutes with SACE. Some of the manual planning itera-tions are a result of the planning inputs being refined during the course of the planning exercise, and as such cannot be avoided even with SACE. Other iterations are a result of the human planners overlooking plan flaws until late in the planning process. SACE eliminates these iterations by automatically identifying and fixing draft plan flaws. The SACE tool has three major functions: it provides a  X  X elemetry view X  for situational awareness, a  X  X andbox view X  for what-if analysis and optimization, and a  X  X lan view X  for automated planning. As the focus of this publication is on the planning aspects of SACE, this section only provides a brief overview of the SACE tool. Both the telemetry and the sandbox use the same interface components with a few operational differences. In the telemetry view, SACE receives the state information (configuration, orientation, and mode) from the ISS telemetry stream through the ISP interface, whereas in the sandbox mode, the user can input the configuration and other state information. The main window, which has a common form for the telemetry and sandbox, is shown in Figure 8, and has three different areas. The top-left area shows the orientations, modes, and overall summary of the constraint status for the BGAs and SARJs. The top-right area shows the configuration variables, which determine the context for the different constraints. SACE reads the constraint information given in the constraint definition files, uses the configuration information in this region to determine the set of applicable constraints, evaluates each constraint, and provides an indication of whether the state of that constraint is unknown , safe , caution, or danger . Per-constraint state information is displayed at the bottom of the main window. SACE lets the flight controller to activate or deactivate individual constraints or groups of constraints using the check boxes. The aggregate safety status of array orientations and modes is displayed on the top left-hand side of the main window. The aggregation is based on a  X  X east-safe X  rule over all applicable constraints.

Contextual information, providing an indication of constraint states for ranges of angles other than the currently chosen ones, can be displayed in two primary forms in both the telemetry and sandbox: a map view displays a two-dimensional map (shown in Figure 3), showing the aggregate constraint state for any combination of SARJ and BGA orientations; a ring view displays a set of concentric rings, showing the constraint state of each individual constraint as well as the aggregate state for all BGA orientations for a specific SARJ orientation, and for all SARJ orientations given specific values for each BGA orientation. The map view consists of one map for each solar array, and uses color-coding to display the status of the constraints and uses intensity to show power availability.

The sandbox allows the user to evaluate arbitrary orientations in any given config-uration in terms of the various constraints and power availability. The user can also invoke the optimizer from the sandbox to automatically find orientations and asso-ciated modes that maximize power availability, subject to feasibility constraints with respect to the loads, power, contamination, and longeron shadowing. The user can arbi-trarily restrict the search space for the array orientations and modes, as well as change the preferences on whether to include, during optimization, a specific cost metric such as the distance cost.

The planning component of SACE loads user-specified attitude and thruster timeline files and automatically determines a solar array plan. The resulting plan is displayed as interactive timelines, as shown in Figure 7. The user can review the plan in this window, or dig deeper by loading each configuration into the sandbox by clicking on the desired configuration. The user can also edit the plan by moving ATL elements along the timeline or adjusting their duration and restricting the orientations and modes for the different joints. Among the elements in the planning window are the SARJ and BGA timelines, showing the modes (including orientations) and turns. The user can display other timelines (not pictured in Figure 7) to show the status of the longeron shadowing constraint and the power availability. SACE interacts with a trajectory and power modeling tool called SOLAR for calculating the power availability, the direction of the sun, and the paths taken by the arrays while tracking the sun.

The component of the SACE tool that monitors the solar array operations has been certified for flight operations. The planning component of SACE is currently approved for uncertified operations, with the human planner ultimately responsible for the final plans. The development team worked closely with human planners at JSC through-out the development timeframe, and incorporated much of their planning philosophy into the preferences encoded into the SACE optimization algorithm. Currently, only a limited set of test cases with a small number of configurations have been used by the flight controllers to verify the quality of the plans produced by SACE. Though all the test plans produced by SACE have been intuitive to the human planners, it is to be noted that most of the test cases have been short. A couple of long test cases (from prior flights) have produced plans that were nearly identical to the human-produced plans, except that in certain configurations, SACE was able to produce more optimal array orientations. A more extensive test suite (about 500 planning cases of various sizes) is being developed to prepare for flight certification of the complete SACE tool. In this section, we survey previous applications of automated planning technology for space mission applications. We first describe several fielded and prototype applications of planning, both for decision support systems and fully automated systems. We then compare the decision support applications to SACE. The first AI system to manage a spacecraft was the Remote Agent [Muscettola et al. 1998], which autonomously controlled the Deep Space 1 spacecraft for 29 hours. Part of the system was the Remote Agent planning system [J  X  onsson et al. 2000], which automatically generated plans to achieve operations goals, taking a simple power model into account.

One of the earliest decision support tools was SPIKE, an automated scheduler de-veloped to build observing plans for the Hubble Space Telescope or HST, launched in 1989 [Johnston and Miller 1994]. HST carries several instruments in a low earth orbit. HST schedules 10K  X  30K observations annually, and these observations have numerous constraints and preferences imposed by scientists; HST also has numerous power, data, and thermal constraints that must be respected. Another early tool was DATA-CHASER Automated Planner and Scheduler (DCAPS), an application used to generate command sequences for a three-instrument science payload flown on board the STS-85 Space Shuttle flight in 1997 [Chien et al. 1999]. The payload performed observations of the sun. DCAPS was used by payload operators to generate command sequences that were then uplinked to the payload. The problem featured a wide va-riety of activity types representing commands executed by the payload, temporally extended conditions describing attitude, communications availability both on board the Shuttle and between the Shuttle and the Earth, and resources such as communi-cation bandwidth and on-board memory (both tape drive and mass memory). Activities also featured goal decompositions (e.g., data acquisition activities were broken down by DCAPS into simpler activities which ultimately were broken down into individual payload commands).

The potential of automated on-board power management was demonstrated for a satellite with signal processing payloads [Shriver et al. 2002]. Though power generation is fixed, the on-board system can choose among data processing options of differing power consumption that provide different expected science return. NASA Goddard X  X  ST-5 mission used a ground-based power management system for a constellation of three nano-satellites that ran in an automated mode [Stanley et al. 2005], but it did not build schedules; its role was limited to characterizing the power system performance and notifying mission planners of future constraint violations in the mission schedule due to changes in expected power availability or consumption.

MAPGEN is a planning system that was designed to build activity plans to achieve science goals for the Mars Exploration Rover missions [Bresina et al. 2005]. Like SACE, MAPGEN was based on the EUROPA framework [Frank and J  X  onsson 2003] and assisted users with building efficient and safe rover plans each day. The problem addressed by MAPGEN features classical planning and scheduling elements; activities had both temporal and resource constraints as well as subgoals, and the problem in-cluded a simple notion of plan quality based on the science value of activities. MAPGEN checked plans for violations of temporal constraints, mutual exclusions, and numer-ous other constraints, and automatically generated plans for power-on of the CPU. It did not integrate activity and power planning, but rather relied on a simplified power model to do planning and then checked the plan against a more complex power system model.

More recent AI tools used in spacecraft mission operations are the MEXAR2 mixed-initiative planning tool, which is used to plan downlink operations for the Mars Ex-press spacecraft using detailed models of spacecraft memory, payloads, and downlink opportunities [Cesta et al. 2007], and MrSpock, a long-range activity planning tool for Mars Express [Cesta et al. 2009]. Like SACE, these applications (and others) are built on a general framework called the Timeline-based Representation Framework (TRF) [Fratini et al. 2008]. MEXAR2 solves a planning and scheduling problem similar to that solved by MAPGEN; there are temporal and resource constraints, as well as goal decompositions. Activities to schedule are downlink activities, and the schedule opti-mization criterion depends on the value of the data that is downlinked, the state of the resources, timeliness of data downlink, and schedule complexity.

The RADARSAT Modified Antarctic Mapping Mission (MAMM) used an automated planning system for acquiring and downlinking Synthetic Aperture Radar (SAR) data [Smith et al. 2008]. The SAR instrument is on an orbiting spacecraft; the scheduling problem is to acquire data over specific parts of the Antarctic while respecting con-straints imposed by the orbit of the spacecraft, downlink opportunities, and available on-board storage. The resulting application automatically developed a 24-day mission plan, including scheduling downlinks. Chouinard et al. [2008] present an automated planner for the Orbital Express space mission to demonstrate on-orbit satellite servic-ing scenarios that included autonomous rendezvous, propellant transfer, and robotic arm transfers of components. The planner, based on the ASPEN system [Chien et al. 2000], was developed to assist scenario resource planners in assigning communica-tions windows, monitoring resources, enforcing mission and satellite constraints, and sending commands to the spacecraft. The principal planning problem is to decompose the scenario into its constituent procedures and assign the communication windows to the procedures, at the same time enforcing the temporal, resource, and operational constraints on the elements of the procedures. The ASPEN AI planning system from NASA JPL was used in a demonstration of automated scheduling of part of the ISS power system [Knight et al. 2009]. This work includes a model of the power system that used the existing high-fidelity model (TurboSpeed) for the power system and solar array production, but did not plan solar array operations.

Chien et al. [2010] describe a timeline-based scheduling algorithm for weekly op-erations scheduling of the EO-1 Earth observing satellite. The objective is to record discrete scenes subject to constraints on visibility, time needed for pointing/maneuver, operational temperatures of instruments, data capacity, the priority of scenes, and downlink availability. Two of the more challenging constraints are the instrument thermal constraints and the satellite pointing constraints. The pointing of satellite uses three reaction wheels and a torque bar. The thermal duty cycle is a complex func-tion of the on-off cycle of the instrument and heat dissipation. The resulting scheduler increased the number of scenes acquired by 50%.

It is noteworthy that, when operational, SACE will be the first AI planning applica-tion used to plan the activities of a crewed spacecraft. In this section, we compare the technical approach used in SACE to other decision support-style planning systems, employing AI technology, used by flight controllers or mission operators. These include SPIKE, DCAPS, MAPGEN, MEXAR, MAMM, Orbital Express, and EO-1. As such, we omit discussion of those planning systems primarily used for autonomous systems.

Proposals are transformed by SPIKE into activities to schedule, which includes activ-ity ordering, task decomposition, and grouping activities. SPIKE employs a represen-tation that combines multiple constraints on the same activity into preferences called suitability functions that are then used to drive optimization; suitability functions are represented as piecewise constant functions. These are combined with classical con-sistency techniques, including path consistency, to prune legal start times of activities. The optimization algorithm is an iterative repair strategy driven by heuristics, with a phase at the end to remove any conflicts by deleting unscheduled objects.

Because of changes in circumstances during the mission (e.g., communication band-width, vehicle orientation), DCAPS [Chien et al. 1999] was designed as a mixed-initiative system, allowing the operator to add new constraints, add or delete activities, or reschedule activities. DCAPS employed an iterative repair strategy in which types of scheduling conflicts were resolved with different plan repair operators. An implicit plan quality function was employed in order to schedule as many data acquisitions as possible in the time allowed.

MAPGEN [Bresina et al. 2005] was designed to provide assistance to a science activ-ity planner, and as such provided a variety of services including: reporting constraint violations, enforcement of constraints when the mission planner changed the plan, au-tomatically selecting goals on priority, and automatically inserting subgoals of major activities that the mission planner chose to schedule. Because of the need for minimum disruption of the mission planners X  desires, MAPGEN employs a heuristic during plan revision that preserves the plan to the maximum extent possible while adding or rear-ranging activities to respect new constraints. Finally, due to tight planner performance guarantees, MAPGEN performed an incomplete backtracking search in order to gen-erate good plans quickly. Values were portioned into 4 classes, and low-value activities were discarded if they could not be inserted into a plan with a predefined amount of effort.

The design of MEXAR2 [Cesta et al. 2007] was also driven by the need for a mixed-initiative flavor; downlink plans have to change in response to changes in data volume of different types. The schedule optimization function is complex, consisting of a partial order among several different schedule criteria, including data loss, plan size, tardiness of data delivery, and flexibility with respect to data store availability. Users can adjust the importance of each of these elements of the final schedule quality. Thus, MEXAR2 provides users a high degree of control over the final schedule. MEXAR2 featured a sound and complete solver, unlike the other tools described.

The MAMM planner [Smith et al. 2008] used a greedy algorithm for generating data acquisition and downlink schedules. In this system, the mission planner selects a set of swaths to acquire, and the ASPEN-based automated planner expands it into a more detailed plan, develops a downlink schedule, and then checks it for resource oversubscriptions and other operational constraint violations. The planner did not use any plan-repair mechanism to fix constraint violations, instead reporting to the mission planner those swaths that caused operational constraint violations. It also generates what-if variations of draft plans for evaluating mission alternatives, assessing resource requirements, impact of alternative downlink scheduling policies, and effectiveness of alternative ground stations.

The EO-1 application [Chien et al. 2010] treats the temperature of an instrument as a resource, whose usage is modeled using a step-wise simulation model. The pointing of satellite is implemented using external constraints. A greedy heuristic scheduling algorithm is used to generate a schedule from a prioritized list of scenes to be scheduled. The planner incorporates some of the constraints in generating the schedule and tests it against the more complex constraints for violations. No schedule repair to fix violated constraints is incorporated. The scheduling algorithm does not guarantee optimality, but ensures that the highest numbers of high-priority scenes are scheduled. Similarly, the Orbital Express system [Choinard et al. 2008] used greedy variants of bin packing algorithms to assign the communication windows. If resource violations are detected, they are reported to the user rather than being repaired automatically.

We now compare these applications to SACE by comparing the needs of the users of the applications, the types of constraints and preferences characterizing the problem, and the characteristics of the solution methodology.

The users of all of the applications desired some amount of user control over the final plan. The MAPGEN, MAMM, DCAPS, and MEXAR2 applications were driven by a very high degree of user control over the final plan, with users of MEXAR2 specifying not only constraints and schedules but also preferences over plan quality. SPIKE benefitted from the ability to revise proposals and rebuild schedules. SACE has two methods of generating a complete solar array plan from its inputs. The operator can perform mode and orientation optimization and check constraints on modes and orientations for a single configuration in a mixed-initiative mode; this includes restricting the allowed set of modes and angles. The user can also generate a complete plan for a sequence of configurations. However, there was no requirement for the user to rearrange the order of configurations and revise the plan. The EO-1 application is fully automated.
While all of the other applications have a more classical set of planning and schedul-ing constraints, including goal decomposition, time, and resources, SACE features only goal decomposition and temporal constraints. The goal decomposition constraints of all of the applications are very hierarchical in nature; all of the applications resem-ble scheduling problems more than classical planning problems. The table constraints in SACE are somewhat unusual when compared to the constraints present in other applications. They are conditional in the sense that  X  X eneric X  actions (e.g., changing modes) are constrained by tables that depend on the configuration, but since all of the configuration information is present in the initial state, the applicable constraints can be calculated up-front and need not be recomputed during search. However, the lock-latch constraints are complex since, in general, they are functions of every element in every applicable table. The constraints handled by the EO-1 planner and SPIKE are the closest to those handled by SACE. The EO-1 thermal duty cycle is akin to the longeron shadowing constraints addressed by SACE, whereas the pointing constraints are similar to the constraints on SARJ and BGA mode and orientation changes. SPIKE X  X  constraints are also quite complex, including time, resources, and task decomposition. In terms of size (number of scheduled activities), SACE is among the smallest of the missions, while SPIKE is likely the largest.

The optimization problem that SACE must solve is more complex than that of most of the other applications. The Orbital Express and DCAPS problems have no explicit model of plan quality, but employ heuristics to try to maximize the number of activities scheduled. In MAPGEN, MAMM, and EO-1, plan quality is a function of the science value of scheduled activities, and this value is provided as part of the problem descrip-tion and is not subject to change by the users of the planning applications. SPIKE X  X  optimization incorporates weights derived from the types of constraints on proposals. In SACE, the value of a mode and orientation is a complex function of each class of table constraint (power, structural load, environmental contamination, and longeron shadowing) and the entries in the tables. While we used an LP to solve for the weights of the final form of the optimization criteria, the weights were computed once and not subject to change by the users. In this, SACE X  X  approach is closer to that used by SPIKE than many of the other applications. The schedule optimization criteria of MEXAR2 is of similar complexity; while SACE combines all criteria into a single optimization function, the MEXAR2 algorithm allows fine-grained user control to address different aspects of the solution quality.

SACE and MAPGEN both employ incomplete constructive search in order to control planning time. MAPGEN X  X  incomplete search may reject low-priority science goals in order to schedule higher-priority goals, while SACE, in contrast, merges constraints in order to find a common mode and orientation for consecutive configurations when there is not enough time to change modes between configurations. SACE X  X  incomplete search is also a direct implementation of the process used by flight controllers. All of the other applications, in contrast, perform incremental-repair-based search. Both EO-1 and SACE invoke external solvers to check some constraints after planning; the EO-1 planner checks thermal and pointing constraints, while SACE checks power generation and longeron shadowing constraints. All of the other applications reason over explicitly modeled constraints in order to find plans or schedules. The search for optimal solution for each configuration in SACE is quite simple, being a brute-force search over a bounded number of choices of mode and orientation. In contrast to this, in the search for optimal solutions, the other applications employ sophisticated heuristics to trade objectives while satisfying constraints. This article has described the challenging task of automated planning and optimiza-tion of ISS solar array operations. The problem includes a wide variety of constraints and preferences, including temporal constraints, conditional constraints, and multi-ple weighted optimization criteria. EUROPA, an automated planning and scheduling toolkit, addressed this problem. The solution depends on a combination of built-in functionality as well as EUROPA X  X  extensibility. The resulting application, SACE, re-duces the time it takes to produce solar array plans from weeks to hours by providing an end-to-end solution that starts with a timeline of ISS attitudes and events and automatically produces a solar array plan and a timeline of power availability.
The EUROPA framework and NDDL language made parts of SACE quite straight-forward. NDDL X  X  timelines and state-based modeling framework were well suited to handling the causal and temporal aspects of the problem. EUROPA X  X  extensible framework made it easy to add the custom table constraints required by the problem. However, significant work was needed to formalize the orientation and mode optimiza-tion problem correctly. As described in Section 3.3, parts of the optimization problem were complex enough that an LP was created for the sole purpose of determining how to weigh various aspects of the optimization criteria. The resulting complexity transcends that of optimization criteria found in other planning applications such as Do et al. [2008]. Also, SACE did not extensively use EUROPA X  X  support for automated planning because of the nature of the orientation and mode optimization problem, as well as the constraints the flight controllers placed on the search over all configurations (see Section 3.4). Specifically, only the most trivial  X  X euristics X  are employed: optimize in chronological order, select the first optimal orientation, and do not backtrack. These choices were not made to optimize performance, but because they conformed to the way that flight controllers search for solar array plans.

Parts of the solar array planning problem can be modeled using PDDL. The presence of temporal constraints and durative actions in the rules, and timed initial literals (the configurations arising from the ATL and TRTL span the planning horizon) requires at least PDDL 2.1 [Hoffmann and Edelkamp 2005]. The presence of the optimization criteria requires PDDL 3 [Gerevini et al. 2009], which allows expression of a plan-wide objective function expressed over states achieved in the plan. Since the objective is expressed over states, this would require expressing the LLC and table constraints as states. While this is possible, it may be less efficient than the solution used by EUROPA; as a practical matter, it would also require reformulating each table simply to create the PDDL representation of the domain.

Throughout the process of creating SACE, as is common in software development, requirements were continually refined, and new requirements were added. For ex-ample, constraints that initially were assumed to be simple table constraints turned into complex calculations. The model-based nature of EUROPA has led to less devel-opment of new code compared to application-specific methodologies, since EUROPA X  X  rules language is flexible enough to incorporate many of the desired changes. For ex-ample, metal shavings were discovered in one of the SARJs, requiring that the SARJ be turned as little as possible and be parked or locked otherwise. Due to the constraint-and model-based framework used in SACE, this was straightforward to model.
There are opportunities for future development of ISS array planning, and the more general problem of spacecraft power management. As noted previously, the configura-tion merging approach used in the planner is suboptimal, and could lead to a failure to find a valid plan even though one exists. While experience shows that the number of merges is small (typically 2 or 3), it is worthwhile to undertake a study examining the discrepancy between optimal solutions and those found by the existing algorithm. The planning problem is tractable, suggesting that planning time can be further reduced. However, the resulting tractable algorithm may not meet all of the flight controllers X  needs, thus requiring discussion with the flight controllers to bridge the gap between theory and practice.

