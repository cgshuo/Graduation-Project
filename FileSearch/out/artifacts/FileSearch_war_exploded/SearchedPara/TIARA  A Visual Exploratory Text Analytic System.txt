 In this paper, we present a novel exploratory visual ana-lytic system called TIARA ( T ext I nsight via A utomated R esponsive A nalytics), which combines text analytics and interactive visualization to help users explore and analyze large collections of text. Given a collection of documents, TIARA first uses topic analysis techniques to summarize the documents into a set of topics, each of which is repre-sented by a set of keywords. In addition to extracting top-ics, TIARA derives time-sensitive keywords to depict the content evolution of each topic over time. To help users understand the topic-based summarization results, TIARA employs several interactive text visualization techniques to explain the summarization results and seamlessly link such results to the original text. We have applied TIARA to sev-eral real-world applications, including email summarization and patient record analysis. To measure the effectiveness of TIARA, we have conducted several experiments. Our experimental results and initial user feedback suggest that TIARA is effective in aiding users in their exploratory text analytic tasks.
 H.2.8 [ Database Management ]: Database applications X  Data mining ; H.3.1 [ Information Storage and Retrieval ]: [Content Analysis and Indexing]; H.4 [ Information Sys-tems Applications ]: User Interfaces Algorithms; Experimentation Visual text analytics, exploratory analytics, document sum-marization, topic analysis, interactive visualization Figure 1: TIARA X  X  visual summary of the  X  X ea-son for visit X  field of the 23,000 + patient emergency room records, depicting 8 major reasons of visit.
Most of the enterprise information is contained in the form of text documents. Sifting through piles of text documents to locate needed information or simply deciding which doc-uments to preserve for business compliance becomes very costly and time-consuming. It thus becomes increasingly more important to develop effective text analytic tools that help users rapidly view, explore, and analyze large collec-tions of text. Although a number of text analysis technolo-gies have been developed [11, 1], the results produced by these technologies, which are often abstract and complex, may not be consumable by users. To help users comprehend the text analysis results, researchers have employed interac-tive visualization to help explain such results. For example, several basic visual metaphors, such as scatter plot [10, 4] or stacked graph [14, 9], have been used to present analytic results.

To aid users in exploring and analyzing large text collec-tions, we are building TIARA (Text Insight via Automated, Responsive Analytics), a novel visual analytic system that combines a set of rich and highly interactive visualization techniques with advanced text analytics. Previously, we have described how TIARA can automatically generate a visual summary of text analytic results [15]. Here, in this paper we focus on TIARA X  X  text analytic engine and its support of interactive visual exploration of analytic results.
TIARA X  X  text analytic engine first derives topics from a collection of documents using topic analysis techniques. Then it uses Lucene 1 to index each document and its associ-ated topics to support interactive topic and text exploration. Given a user query (e.g.,  X  X isual analytics X  for all the docu-ments containing these keywords), TIARA is able to present a summary of desired documents. The summary contains a set of topics, each of which is further represented by a set of keywords (Fig. 1). To depict the content evolution within each topic over time, TIARA also derives time-sensitive key-words (Fig. 1). To help users understand and consume the derived topics and their changes over time, TIARA allows the users to view and inspect its text analytic results at dif-ferent levels of granularity. For example, Fig. 1(a) shows the overview of eight derived topics, summarizing patients X  reason of visit to a hospital emergency room; and Fig. 1(b) presents a fisheye view, where the middle topic is drilled down and expanded to reveal more details.

TIARA has been applied to several real-world applications including email summarization and patient record analysis. Throughout the paper, we use examples from these applica-tions to illustrate the main functions of TIARA.

The remainder of the paper begins with a discussion of related work, followed by an overview of the TIARA sys-tem. We then present TIARA X  X  text analytic engine and its support of interactive visual exploration of analytic results. We also describe two TIARA applications and initial user feedback.
Our work is most relevant to two bodies of research effort: topic analysis and text visualization.
Researchers have developed various approaches to topic analysis, including supervised topic annotation (i.e., docu-ment classification) and unsupervised topic modeling. Here we focus on unsupervised topic modeling since it is most relevant to our work. Among them, document clustering [11] and latent topic modeling [2] are the most common ap-proaches.

Document clustering automatically organizes a document collection by its topic structure. Scatter/Gather [18, 12] is a cluster-based browsing technique for analyzing large text collections. It was shown to be effective in helping users build a X  X ore coherent conceptual image of a text collection X  [18]. http://lucene.apache.org/
Latent topic modeling such as LDA (Latent Dirichlet Al-location) [2] has been employed widely in text analysis. For example, in [25], LDA was used to improve ad-hoc docu-ment retrieval. LDA was also used in [6] to select summary keywords from emails. There is also work on topic trends analysis. For example, Mei and Zhai [17] proposed a general probabilistic method to build an evolution graph of themes. Wang et al. [23] presented an LDA-style topic modeling algorithm that produces interpretable topical trends.
While TIARA can benefit from all the topic modeling techniques mentioned above, it focuses more on postprocess-ing the topic modeling results to present the most meaning-ful content to the users. Furthermore, TIARA also leverages advanced visualization to make the analysis results easily comprehensible.
Visualization has been used extensively to present web search results. Xu et al. [26] introduced a new visual search interface which groups the returned results of a third-party search engine (such as Google). There are web clustering en-g ines, such as Carrot2 2 , which used visualization techniques to display the search results. Readers may refer to [3] for a survey on web clustering engine. Visualization techniques were also widely used in faceted browsing. For example, Clarkson et al. [5] described ResultMaps, which used a hier-archical Treemap to organize the search results. Smith et al. [20] presented FacetMap, an interactive, query-driven visu-alization to present metadata-rich data stores. It provided users with a dynamic, faceted browsing experience. More recently, FacetLens [13] extended FacetMap to allow users to observe trends and explore relationships within faceted datasets.

In addition to displaying search results, there is work on visualizing other types of text. For example, MemeTracker [14] is a new framework for tracking the changes of short phrases in online text over time while [10, 4] focused on vi-sualizing the results of document clustering. Word Tree [24] a nd Phrase Net [8] illustrated text content at the word and phrase level, respectively. While the above systems primar-i ly used simple visualizations (e.g., scatter plot) to organize and display the analysis results, TIARA automatically cre-ates more informative and powerful visual text summaries for analyzing large and complex data sets. In addition, com-p ared to previous work, TIARA provides rich interactions to aid users in their exploratory text analytic tasks.
T IARA is designed to visually analyze the topics in a text collection and their content changes over time to facilitate exploratory text analytics. With TIARA, users can inter-actively view, explore, and analyze large collections of text. Here, we provide an overview of TIARA, starting with its user interface, followed by its system architecture.
Fig. 3 shows the user interface of TIARA implemented for an email application. When interacting with TIARA, a user may enter a query term to search an email collection (Fig. 3a). The search results are presented in two views: the list view (Fig. 3b) and the topic view (Fig. 3c). The list view http://search.carrot2.org the user can observe the topic evolution over time. displays a list of email snippets that match the user query. In contrast, the topic view summarizes the retrieved emails visually as a stacked graph. Based on the visualization in the topic view, users can easily find the most salient topics. They can also understand how each topic changes over time, including its strength and content. Users can also interact with both the list and the topic views to perform further analysis. For example, a user may filter the search results based on the sender information in the list view; or s/he may drill down to a subset of the documents based on a topic or keyword by clicking on the topic or keyword in the topic visualization. Moreover, TIARA provides additional options for users to explore the topics. For example, a user can click on the topic list button (Fig. 3d) to show a linear list of topics without the detailed trend information.
Fig. 2 illustrates the TIARA architecture which includes an offline processing module and an online processing mod-ule.

As part of the offline processing, TIARA collects text doc-uments from either a file system or a database. The gath-ered documents are then processed by TIARA X  X  text pre-processing component. For example, the text pre-processing component in an email application performs stop word and email signature removal to reduce the noises in the emails. The text indexing component uses Lucene to index and store the textual content and the associated meta data. The processed text documents are then sent to the topic mod-eling component (Section 4.1), which automatically derives a set of latent topics. The topic analysis results, including the topic-keyword distributions and document-topic distri-butions, are also stored and indexed by Lucene during the topic indexing .

TIARA X  X  online process is often triggered by a user re-quest (e.g., a keyword query). In query parsing , TIARA analyzes a user X  X  request and then converts it to a Lucene-compatible query 3 , which is then used to find the matched documents from the text index. Once documents are re-trieved during the searching process, they are displayed in a list view and a topic view. To automatically generate the topic view, TIARA first extracts topic-related informa-tion from each document, including its topic keywords and document-topic distributions from the Lucene index using the index parsing component. Subsequently, the keyword-based topic summaries are generated by the topic summa-rization component (Section 4.3) and the time-sensitive key-words are selected and ranked by the time-sensitive key-word extraction and time-sensitive keyword re-ranking com-ponents (Section 4.4). The topics are also ranked by the topic ranking component (Section 4.2) so that the most mean-ingful topics can be shown first. Finally, the results are se-rialized and represented in JSON objects 4 , which are then sent to the TIARA visualization to produce the final visual summary. Moreover, during the snippet generation stage, TIARA generates a snippet to summarize the content of each retrieved document. Users can also interact with TIARA to provide feedback to the backend analysis components or articulate new data needs, TIARA X  X  feedback monitor col-lects user feedback to further refine and update the analysis results. We will describe the details of this feature in section 5.2.3.

In TIARA, the web container and the HTTP protocol are used to communicate and transfer data between the vi-sualization and text analytic modules. The TIARA server is implemented as a JAVA servelet using Tomcat 5 as the web container. This design makes it easy to deploy TIARA across multiple platforms.

TIARA is designed to process text collections with time s tamps. It provides a set of text processing and interac-tive visualization components that can help users explore and analyze text collections. Most components in TIARA can be reused in different applications. The components that often require customization are the text pre-processing component and the text indexing component. For example, in an email application, the text pre-processing component may perform email signature removal which is not needed in the patient record analysis application. Similarly, de-pending on the data fields available in an application, the text indexing component may need to index different struc-tured or unstructured fields. Moreover, the TIARA system is easily extensible and configurable. We have defined a set of standard APIs for each core analytic component, such as the time-sensitive keyword extraction and time-sensitive keyword re-ranking components. With these APIs, users can define new analytic functions by extending TIARA X  X  exist-ing analytic capabilities. http://lucene.apache.org/java/2_4_0/ queryparsersyntax.html http://www.json.org/ http://tomcat.apache.org/
In this section, we explain TIARA X  X  backend text analy-sis engine and the data interface between the text analytic module and the visualization module.
Topic analysis can be performed in different ways. For example, a document can be classified into pre-defined cate-gories. Document classification however typically requires a large number of human annotated training examples which can be costly to obtain in practice. As a result, it is often desirable to use unsupervised learning methods that auto-matically discover hidden themes in a document collection. We have built a general TIARA framework, and it currently supports k -means clustering [11], information-theoretic co-clustering (ITCC) [21], LDA [2], and hierarchal Dirichlet processes (HDP) [27]. Other clustering algorithms [11] and topic models [1] can also be embedded easily in TIARA.
In topic analysis, we denote a text collection with N docu-ments as D = { d 1 , d 2 , , d N } . Each document is composed of a sequence of words d i = { w i, 1 , w i, 2 , , w i,N is the number of words in d i . Let V = { v 1 , v 2 , , v note the vocabulary of size V and K denote the number of topics. Without loss of generality, we use the document-topic distribution matrix  X   X  R N  X  K and the topic-word dis-tribution matrix  X   X  R K  X  V to summarize the topic analysis results. Each row of these two matrices represents a prob-ability distribution. This distribution can be derived from either LDA [1] or clustering. For LDA, the distributions are directly inferred from a document collection by various inference techniques such as Gibbs sampling [7]. For cluster-ing, the document-topic distribution is a matrix of 0s and 1s where 0 means that a document does not belong to a topic while 1 means it belongs to a topic. Moreover, the topic-word distribution can be approximated by the term frequencies in each cluster.

TIARA uses a threshold-based method to assign one or more topics to a document. In particular, a topic (say j, 1  X  j  X  K ) is assigned to a document d i if the document-topic probability  X  i,j is greater than a pre-defined threshold  X  TIARA also stores and indexes the topic labels as well as the topic assignment for each word token in a document collection using Lucene. This information will be used later to generate time-sensitive topic keywords. For LDA, the token-topic assignment is directly inferred by LDA using Gibbs sampling. For clustering, we assign the cluster label to all the words in a document.
Both LDA and clustering are general topic models and their outputs may not directly satisfy all the information needs of users. For example, the topics derived by LDA are randomly ordered, and users need to manually navigate the entire topic list to find the ones that they are interested in the most. If there is a large number of topics, this task be-comes quite difficult and time consuming. To better help users find important topics, we rank all the topics such that the most important ones will be visualized first. Several methods have been investigated in [22] for topic ranking. Here we use a strategy that has both reasonable ranking performance and modest memory and CPU requirement.
We set  X  to 0.3 in our experiments. Specifically, we consider topics that cover a significant por-tion of the corpus content more important than those cover-ing less content. Moreover, we consider topics that appear in all the documents to be too generic to be interesting. As a result, the topic rank is measured by a combination of both topic content coverage and topic variance. The detailed topic ranking algorithm is presented in Algorithm 1. Algorithm 1 rank topics ( X ) Require: Document-topic distribution matrix  X . 1: for i = 1 to K do 5: end for 6: Rank the topic i according to r i {  X  1 and  X  2 are the
The topic keywords derived by LDA or clustering may not be ideal for users to understand the definition of a topic. For example, when LDA is applied to a financial news corpus, common words such as Dow, Jones, Wall, Street etc., are ranked high in many topics because they are relevant to all the topics. These words however are not useful in helping users identify interesting news topics since all of them are too general. To better help users understand the content, we re-rank the keywords within a topic to refine its topic definition. Inspired by the TF-IDF weighting scheme [19] used in the information retrieval community, we compute the rank of a topic keyword for topic j using Algorithm 2. Basically, if a word occurs frequently in a topic, it is important. Moreover, if the word also appears in many other topics, the word is not important because it is too common.
 Algorithm 2 summarize topic ( X  , j ) Require: Topic-word distribution matrix  X .
 Require: The summary length LENGT H . 1: Read and parse the keywords for topic j , denoted as W . 2: for each word w m in W do 3: The weight of w m , denoted by weight ( w m ), is cal-4: end for 5: Rank W w.r.t. weight ( w ). 6: return The top min ( LENGT H, | W | keywords as key-
To allow the user to visually analyze content evolution over time, TIARA automatically selects time-sensitive topic keywords for different time segments. Given a text collec-tion, TIARA first breaks the documents into several sub-collections, each of which is associated with a particular time interval. Note that we do not use fixed time intervals to di-vide the collection. In general, users are more likely to be interested in the time segments during which a topic is most
We set  X  1 =  X  2 = 1. active, we design an algorithm that will not break a topic near the peaks of a topic layer. 8 Algorithm 3 shows the details of this method.
 Algorithm 3 split time ( start, end ) Require: The number of maximal segments MAX SEG . Require: The number of time interval total time interval . 1: step = total time interval/MAX SEG 2: Calculate and collect the peaks of the topic trend. 3: k = 0 , begin = 0 4: while k &lt; total time interval do 5: k = step func ( k, total time interval, step ) 6: if k is a peak then 7: k = step func ( k, total time interval, 1) 8: end if 9: Mark k as a time tick { i.e. (begin, k] as a sub-segment 10: begin = k 11: end while 12: return 13: step func ( k, end, step size ) 14: incr = 0 15: while k &lt; end do 16: if + + incr &gt; step size then 17: break 18: + + k 19: end if 20: end while 21: return k Algorithm 4 extract ts keyword ( D j,i ) Require: Topic-word distribution matrix  X .
 Require: The maximal number of keywords 1: Read and parse the keywords for topic j from D j,i , de-2: Re-rank the T F scores by the topic-keywords proba-3: Rank the keywords, and select the top
Once the documents of a topic are divided into several sub-collections based on Algorithm 3, TIARA extracts time-sensitive keywords for each sub-collection. It uses the fol-lowing criteria to determine the importance of a topic key-word in a sub-collection: (1) if a word occurs frequently in the sub-collection, it is important; (2) if the word occurs t &lt; total time interval , where h ( t ) denotes the number of documents (or words) belonging to the topic at time range ( t  X  1 , t ].  X  1 and  X  2 were set empirically, and we set  X  1 =  X  2 = 0 . 5 in the current TIARA. in many other sub-collections, the word is not important. Specifically, let D j,i denote the documents about topic j for sub-collection i , the time-sensitive keywords are selected based on Algorithm 4. Figure 5: TIARA data interface for time-sensitive keywords.

TIARA also defines a set of standard data interfaces be-tween its backend analysis engine and its visualization mod-ule so that both of them can be used independently. For example, if a user is only interested in using TIARA visu-alization s/he can still take advantage of TIARA as long as the data to be visualized are described in TIARA X  X  data in-terface. Currently, TIARA X  X  data interfaces include several JSON objects. Fig. 4 shows the schema describing a topic while Fig. 5 is the schema for a topic layer that includes a sequence of time-sensitive keyword collections.
Since the analysis results derived above are complex, it can be a challenge to explain them to average users. In the following, we explain how TIARA leverage advanced in-teractive visualization to visually summarize text analysis results. In particular, TIARA automatically generates a vi-sual topic summary for a document collection. It also allows users to further interact with the visual summary to: (1) ex-amine the data from multiple perspectives; and (2) express additional information needs. Previously, we have described how to generate a visual summary [15], here we focus on explaining how a user can interact with such a summary.
Previous studies on information visualization have shown that metaphor compatibility has a significant effect on com-prehension [28] since it takes time and effort for users to interpret new and unfamiliar visual metaphors. Thus one of our design principles is to use common visual metaphors to convey analytic results. To visualize topics derived by LDA or clustering as well as their content changes over time, we choose a stacked graph based visual layout. Then we aug-ment the stacked graph visualization to generate a keyword-based visual text summarization.

Fig. 3 shows a visual summary created by TIARA. Each colored layer represents a topic. Each layer is depicted by a set of keyword clouds, summarizing the topic content and the content evolution over time. The height of a layer at a time point encodes the  X  X trength X  of the topic. In TIARA, the X  X trength X  X s measured by the number of documents cov-ering the topic. Please refer to [15] for more details on how to generate such a visualization.
Since the output of text analytics is not always perfect, to address this problem, we design several useful visual metaphors and rich interactions to allow users to interactively refine and improve text analytics.
There are many keywords in each topic and sometimes it is unclear why a particular keyword is associated with a topic. To help users understand a keyword-topic relations, TIARA allows a user to drill down from a topic to a set of documents containing such a keyword. For example, initially a user may not understand why X  X otable X  X ppears in the first topic in Fig. 3. When the user clicks on the keyword, TIARA automatically retrieves a set of emails containing  X  X otable X . After inspecting the results, the user now understand why  X  X otable X  is related to the topic.
Another feature in TIARA is to allow users to freely rollup from low level documents to high-level topics in context. For example, in the email application, when a user examines the emails of a topic, s/he may want to know who is involved in those emails and what has been discussed. For example, in Fig. 3, a user is reading an email sent by Amit. Since the message is very important, s/he may also want to retrieve all the emails sent by Amit. In this case, TIARA visually summarizes the content of the retrieved emails. Similarly, when a user is interested in a keyword such as X  X otable X , s/he may want to examine the topics associated with the word. In TIARA, the user can type  X  X ender:Amit X  or  X  X otable X  in the search input area (Fig. 3a) to obtain the topic visualizations associated with a sender or keyword.
The text analytic results are not always perfect, thus it is important to allow users to provide feedback to the backend system via visual interactions to compensate for the deficien-cies of the analysis. We have done some preliminary work on this. Particularly, at present TIARA supports interactive denote the specific year , month , and day of the end document. topic merging and splitting. For example, in Fig. 3, the user finds that both the first and third topics from the bottom are talking about  X  X isclosure X , and s/he would like to merge these two topics into a single one. Such actions will affect the topic analysis results or even the existing topic model. As for topic merging, when the user sends a merging request of two topics, the backend analytic module will automatically update the topic index by mapping different topic IDs into a single one so that both topics can be retrieved and pro-cessed together. As for topic splitting, when the user finds that one topic is still a mixture of several topics, s/he will ask the backend system to split it into several topics. This request is collected by the feedback monitor component and then an LDA or clustering-based topic model is employed on the documents belonging to the topic to divide them into the user-specified number of topics. We finally update the topic index which will be reflected in the later TIARA visu-alization.
To evaluate the effectiveness of TIARA X  X  analytic engine, we need to examine the quality of three main procedures: (1) topic ranking; (2) keyword based topic summarization; and (3) topic segmentation and time-sensitive keyword selection. In this experiment, we used the MALLET topic modeling t oolkit [16] to perform LDA topic analysis. The initial model parameters were set to the default values, and the maximum iteration was set to 1000. Previously, we have reported the evaluation results of the topic ranking and keyword based topic summarization procedures in [22], therefore, here we focus on the time-sensitive keyword extraction procedure. We will also present some experimental results on TIARA X  X  online response time.
Time-sensitive keywords are used to convey the content evolution of a topic over time. For each time segment, we select a set of most representative keywords for a topic. To evaluate the quality of time-sensitive keyword selection, we conducted our experiments using two data sets: a personal email collection with 8326 email messages and an emergency room data set containing 23,501 patient records. We use two evaluation metrics to measure the results:
Completeness : Defined as whether we can recover the original keywords of a topic by combining the keywords as-sociated with each time segment. Specifically, for each topic segment, we retrieve the top 15 keywords. Then the key-word union is compared with the top 50 keywords derived by the original topic model (e.g., LDA). Then, the complete-ness measure is defined as the F-measure between these two sets of keywords. Given a set of time-sensitive keywords ts j = ts j 1 , ts j 2 , . . . , ts j topic segments, and keywords based topic summary S j for topic j , the F-measure is calculated by: where The overall completeness is computed by the mean and stan-dard deviation of the F-measures of all the topics.
Distinctiveness : Defined as whether we can distinguish one topic segment from another based on their associated keywords to avoid redundancy. Here, we use the Kullback-Leibler (KL) divergence to measure the distinctiveness of two sets of keywords. Specifically, suppose we have L seg-ments in topic j . Each segment has a normalized keyword histogram h j l , s.t. P i h j l ( i ) = 1. The Kullback-Leibler di-vergence between h j l and h j m is Moreover, the symmetric Jensen-Shannon divergence is of topic j as Then the overall distinctiveness is measured by the mean and standard deviation of the distinctiveness of all the top-ics.

The evaluation results for both the email and the emer-gency room data sets are shown in Tables 2 and 3. Here, the baseline system selected time-sensitive keywords based on Table 2: Completeness and Distinctiveness Results on Email Data (mean  X  std).
 Table 3: Completeness and Distinctiveness Results on Healthcare data (mean  X  std).
 term frequencies while TIARA selected time-sensitive key-words based on Algorithm 4. We use the same time range splitting algorithm described in Algorithm 3. Here mean denotes the average and std represents the standard devi-ation of the completeness or distinctiveness values of K topics. As shown in the tables, TIARA outperformed the baseline system on both data sets. We also notice that the completeness of the time-sensitive keywords selected for the emails is lower than that for the emergency room records while the distinctness of the selected keywords for the emails is higher than that for the emergency room records. This seems to suggest that the topics derived from the emails evolve more quickly than those derived from the emergency room records.
We also conducted experiments to examine the response time of TIARA. In particular, we recorded six different types of response time: (1) the total response time ( Total ); (2) the time spent on search ( Search ); (3) the time spent on extract-ing and parsing information from the Lucene index ( Parse ); (4) the time spent on generating keyword-based topic sum-maries, topic segmentation and time-sensitive keyword selec-tion ( Keyword ); (5) the time spent on topic ranking ( Topic rank ); and (6) the time spent on generating JSON objects for topic visualization ( Json ). We asked two users to par-ticipate the study. They used TIARA in analyzing both personal emails and emergency room records. We wrote a time profiling program as a TIARA plugin. TIARA then automatically recorded different types of response time for each of the 100 queries issued by the users on each data set. The results are presented in Figs. 6 and 7. In the figures, the X-axis represents the number of documents that match a user X  X  query, and the Y-axis encodes the response time (in milliseconds).

As shown in Figs. 6 and 7, overall, TIARA is capable of producing results with reasonable response time, especially when the number of returned documents is less than a thou-sand (in this case, the total response time is less than 300 ms). The most time-consuming procedures are Search and Parse . Since we use the Lucene search engine, the search time is pretty standard. However, the time spent on Parse can be significantly reduced if we optimize the current topic keyword indexing and parsing algorithm.
In this section, we present two application scenarios and our initial deployment of the current system.

TIARA has been used in two real-world applications in-cluding email summarization and patient record analysis. Fig. 3 shows the TIARA user interface for the email appli-cation. Since we have discussed it in section 3, here we focus on the patient record analysis application. For more infor-mation about the email application, please see our video at http://domino.research.ibm.com/comm/research_teams. nsf/pages/iva.download.html/ .

The data set we used in the patient record analysis appli-cation is NHAMCS (National Hospital Ambulatory Medical Care Survey) data. It contains sample cases in ambulatory care services provided by several hospitals X  emergency and outpatient departments in the U.S. The current data set includes 23,000 patient records from 2002 to 2003. Fig. 8 shows its user interface. Here we show the top 8 out of 15 topics in total. Similar to the email application, a user may enter a query term to search the emergency room records (Fig. 8a). Since a patient record includes a few text fields (e.g.,  X  X iagnosis X ,  X  X eason for visit X  and  X  X ause of injury X ) and a few structured fields (e.g., patient gender), a user may interact with the facet navigation panel (Fig. 8b) to se-lect the information most relevant to their interests. In this case, the user is interested in the  X  X ause of injury X  and its relation to the patient X  X  gender. The search results are then summarized in TIARA X  X  main visualization view (Fig. 8c). Within the main visualization view there is a legend panel (Fig. 8d). It shows the main topics currently in display and the color coding scheme for the topic keywords (e.g., brown for female related keywords and dark green for male related keywords). When a user zooms into a specific topic by clicking on a topic layer (in this case, the user clicks on the  X  X nkle, basketball, twisted X  topic), TIARA automat-ically subcategories the documents into two subsets based on the patient X  X  gender and a set of time-sensitive keywords is extracted for each subset. As displayed in Fig. 8, visually, the selected topic layer is enlarged using a customized fish-eye distortion technique. The layer is also divided into two sub-layers to display keywords from each gender category. When we inspect the two sub-topics highlighted in yellow, some interesting patterns are revealed. The cause of injury for male patients tends to be sports-related, such as playing football or basketball; while for female patients, the injuries often occur when they perform routine activities, such as walking on a porch or stairs.
Currently, there are two ways to deploy TIARA: as a web service or as a desktop application. To deploy TIARA as a web application, we hosted an application server using Tom-cat as the web container for each application. Currently, two web services, one for email summarization and one for pa-tient record analysis, have been set up and users can access TIARA via standard web browsers like Internet Explorer 10 In this setting, users can only explore the data sets we pro-vided.

To deploy TIARA as a desktop application, we imple-mented TIARA as a plugin for IBM Lotus Notes 11 , an enter-prise email solution developed by Lotus. The TIARA Notes Plugin was deployed at an IBM internal software hosting service site and it was made available to all the IBM em-ployees world wide. After downloading and installing the TIARA Notes Plugin, users can directly launch TIARA in Notes to analyze their emails.

So far, 877 downloads have been recorded. We also re-ceived many comments from the users, such as,  X  X  was very impressed by the way it deals with un-structure data X ,  X  X  like the evolution graph with tagclouds on it; X ,  X  X he most impres-sive feature TIARA is its dynamic query and graphics ren-dering capability. X ,  X  X IARA visualization provides an quick overview of the documents being examined, which enables me to quickly find the active topics. It X  X  cool! X  .
Furthermore, our previous studies [15] showed that TIARA i s even more effective for business professionals. This obser-vation has also been confirmed by the customer feedback collected by our product groups. It has been suggested that the tool is more effective for those who have some back-ground knowledge on the data.
I n this paper, we present a novel visual exploratory text analytic system called TIARA that can help users rapidly view, explore, and analyze large collections of text. TIARA tightly integrates text analytics with interactive visualiza-tion to support effective exploratory text analysis. It also allows users to interact with a set of visualization widgets which help them comprehend and digest text summaries in context. We have applied TIARA to two real-world applica-tions such as email summarization and visual patient record analysis. Our experimental results and initial user feedback
Currently, we only provide access to our company employ-ees because we can not host external servers. http://www-01.ibm.com/software/lotus/products/notes/ received after its deployments show the effectiveness and ap-plicability of TIARA.

In the future, in addition to the keyword summaries, we plan to add sentence-based summaries to TIARA to provide users with another alternative of analyzing text collections. Moreover, since the framework of the current TIARA system is easily extensible to multilingual documents, we are work-ing on extending TIARA to support other languages (such as Chinese and Japanese). Finally, we plan to optimize the performance of the index parsing component to reduce the processing time and to make TIARA more responsive.
The authors would like to thank their IBM colleagues in the creation of TIARA. We would like to thank Xiaoxiao Lian, Xiaohua Sun, and Kevin Brown for their work on the TIARA UI design. We would also like to thank Paul Taylor, Kenny Ng, Seiji Hamada, Hiroaki Kikuchi for their help in deploying TIARA and collecting feedback from customers. [1] D. Blei and J. Lafferty. Topic Models , chapter: Topic [2] D. M. Blei, A. Y. Ng, and M. I. Jordan. Latent [3] C. Carpineto, S. Osi  X nski, G. Romano, and D. Weiss. A [4] Y. Chen, L. Wang, M. Dong, and J. Hua.
 [5] E. Clarkson, K. Desai, and J. D. Foley. Resultmaps: [6] M. Dredze, H. M. Wallach, D. Puller, and F. Pereira. [7] T. L. Griffiths and M. Steyvers. Finding scientific [8] F. V. Ham, M. Wattenberg, and F. B. Vi  X egas. [9] S. Havre, E. Hetzler, P. Whitney, and L. Nowell. [10] T. Iwata, T. Yamada, and N. Ueda. Probabilistic [11] A. Jain, M. Murty, and P. Flynn. Data clustering: A [12] W. Ke, C. R. Sugimoto, and J. Mostafa. Dynamicity [13] B. Lee, G. Smith, G. G. Robertson, M. Czerwinski, [14] J. Leskovec, L. Backstrom, and J. Kleinberg. [15] S. Liu, M. X. Zhou, S. Pan, W. Qian, W. Cai, and [16] A. K. McCallum. Mallet: A machine learning for [17] Q. Mei and C. Zhai. Discovering evolutionary theme [18] P. Pirolli, P. Schank, M. Hearst, and C. Diehl. [19] G. Salton and M. J. McGill. Introduction to Modern [20] G. Smith, M. Czerwinski, B. Meyers, D. C. Robbins, [21] Y. Song, S. Pan, S. Liu, F. Wei, M. X. Zhou, and [22] Y. Song, S. Pan, S. Liu, M. X. Zhou, and W. Qian. [23] X. Wang and A. McCallum. Topics over time: a [24] M. Wattenberg and F. B. Vi  X egas. The word tree, an [25] X. Wei and W. B. Croft. LDA-based document models [26] S. Xu, T. Jin, and F. C. M. Lau. A new visual search [27] J. Zhang, Y. Song, C. Zhang, and S. Liu. Evolutionary [28] C. Ziemkiewicz and R. Kosara. Preconceptions and
