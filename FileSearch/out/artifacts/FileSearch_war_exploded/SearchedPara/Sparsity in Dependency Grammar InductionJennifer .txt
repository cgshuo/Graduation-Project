 We investigate an unsupervised learning method for dependency parsing models that imposes spar-sity biases on the dependency types. We assume a corpus annotated with POS tags, where the task is to induce a dependency model from the tags for corpus sentences. In this setting, the type of a de-pendency is defined as a pair: tag of the dependent (also known as the child), and tag of the head (also known as the parent). Given that POS tags are de-signed to convey information about grammatical relations, it is reasonable to assume that only some of the possible dependency types will be realized for a given language. For instance, in English it is ungrammatical for nouns to dominate verbs, ad-jectives to dominate adverbs, and determiners to dominate almost any part of speech. Thus, the re-alized dependency types should be a sparse subset of all possible types.

Previous work in unsupervised grammar induc-tion has tried to achieve sparsity through priors. Liang et al. (2007), Finkel et al. (2007) and John-son et al. (2007) proposed hierarchical Dirichlet process priors. Cohen et al. (2008) experimented with a discounting Dirichlet prior, which encour-ages a standard dependency parsing model (see Section 2) to limit the number of dependent types for each head type.

Our experiments show a more effective sparsity pattern is one that limits the total number of unique head-dependent tag pairs. This kind of sparsity bias avoids inducing competition between depen-dent types for each head type. We can achieve the desired bias with a constraint on model posteri-ors during learning, using the posterior regulariza-tion (PR) framework (Gra X a et al., 2007). Specifi-cally, to implement PR we augment the maximum marginal likelihood objective of the dependency model with a term that penalizes head-dependent tag distributions that are too permissive.

Although not focused on sparsity, several other studies use soft parameter sharing to couple dif-ferent types of dependencies. To this end, Cohen et al. (2008) and Cohen and Smith (2009) inves-tigated logistic normal priors, and Headden III et al. (2009) used a backoff scheme. We compare to their results in Section 5.

The remainder of this paper is organized as fol-lows. Section 2 and 3 review the models and sev-eral previous approaches for learning them. Sec-tion 4 describes learning with PR. Section 5 de-scribes experiments across 12 languages and Sec-tion 6 analyzes the results. For additional details on this work see Gillenwater et al. (2010). The models we use are based on the generative de-pendency model with valence (DMV) (Klein and Manning, 2004). For a sentence with tags x , the root POS r ( x ) is generated first. Then the model decides whether to generate a right dependent con-ditioned on the POS of the root and whether other right dependents have already been generated for this head. Upon deciding to generate a right de-pendent, the POS of the dependent is selected by conditioning on the head POS and the direction-ality. After stopping on the right, the root gener-ates left dependents using the mirror reversal of this process. Once the root has generated all its dependents, the dependents generate their own de-pendents in the same manner. 2.1 Model Extensions For better comparison with previous work we implemented three model extensions, borrowed from Headden III et al. (2009). The first exten-sion alters the stopping probability by condition-ing it not only on whether there are any depen-dents in a particular direction already, but also on how many such dependents there are. When we talk about models with maximum stop valency V s = S , this means it distinguishes S different cases: 0 , 1 ,...,S  X  2 , and  X  S  X  1 dependents in a given direction. The basic DMV has V s = 2 .

The second model extension we implement is analogous to the first, but applies to dependent tag probabilities instead of stop probabilities. Again, we expand the conditioning such that the model considers how many other dependents were al-ready generated in the same direction. When we talk about a model with maximum child valency V c = C , this means we distinguish C different cases. The basic DMV has V c = 1 . Since this extension to the dependent probabilities dramati-cally increases model complexity, the third model extension we implement is to add a backoff for the dependent probabilities that does not condition on the identity of the parent POS (see Equation 2).
More formally, under the extended DMV the probability of a sentence with POS tags x and de-pendency tree y is given by: where y is the dependency of y c on head y p in di-rection y d , and y v c , y v s , x v r , and x v lence. For the third model extension, the backoff to a probability not dependent on parent POS can be formally expressed as: for  X   X  [0 , 1] . We fix  X  = 1 / 3 , which is a crude approximation to the value learned by Headden III et al. (2009). In our experiments, we compare PR learning to standard expectation maximization (EM) and to Bayesian learning with a sparsity-inducing prior. The EM algorithm optimizes marginal like-lihood L (  X  ) = log P Y p  X  ( X , Y ) , where X = { x 1 ,..., x n } denotes the entire unlabeled corpus and Y = { y 1 ,..., y n } denotes a set of corre-sponding parses for each sentence. Neal and Hin-ton (1998) view EM as block coordinate ascent on a function that lower-bounds L (  X  ) . Starting from an initial parameter estimate  X  0 , the algorithm it-erates two steps: Note that the E-step just sets q t +1 ( Y ) = p  X  t ( Y | X ) , since it is an unconstrained minimiza-tion of a KL-divergence. The PR method we present modifies the E-step by adding constraints.
Besides EM, we also compare to learning with several Bayesian priors that have been applied to the DMV. One such prior is the Dirichlet, whose hyperparameter we will denote by  X  . For  X  &lt; 0 . 5 , this prior encourages parameter sparsity. Cohen et al. (2008) use this method with  X  = 0 . 25 for training the DMV and achieve improvements over basic EM. In this paper we will refer to our own implementation of the Dirichlet prior as the  X  X is-counting Dirichlet X  (DD) method. In addition to the Dirichlet, other types of priors have been ap-plied, in particular logistic normal priors (LN) and shared logistic normal priors (SLN) (Cohen et al., 2008; Cohen and Smith, 2009). LN and SLN aim to tie parameters together. Essentially, this has a similar goal to sparsity-inducing methods in that it posits a more concise explanation for the grammar of a language. Headden III et al. (2009) also im-plement a sort of parameter tying for the E-DMV through a learning a backoff distribution on child probabilities. We compare against results from all these methods. We would like to penalize models that predict a large number of distinct dependency types. To en-force this penalty, we use the posterior regular-ization (PR) framework (Gra X a et al., 2007). PR is closely related to generalized expectation con-straints (Mann and McCallum, 2007; Mann and McCallum, 2008; Bellare et al., 2009), and is also indirectly related to a Bayesian view of learning with constraints on posteriors (Liang et al., 2009). The PR framework uses constraints on posterior expectations to guide parameter estimation. Here, PR allows a natural and tractable representation of sparsity constraints based on edge type counts that cannot easily be encoded in model parameters. We use a version of PR where the desired bias is a penalty on the log likelihood (see Ganchev et al. (2010) for more details). For a distribution p  X  , we define a penalty as the (generic)  X  -norm of expec-tations of some features  X  : For computational tractability, rather than penaliz-ing the model X  X  posteriors directly, we use an aux-iliary distribution q , and penalize the marginal log-likelihood of a model by the KL-divergence of p  X  from q , plus the penalty term with respect to q . For a fixed set of model parameters  X  the full PR penalty term is: where  X  is the strength of the regularization. PR seeks to maximize L (  X  ) minus this penalty term. The resulting objective can be optimized by a vari-ant of the EM (Dempster et al., 1977) algorithm used to optimize L (  X  ) . 4.1 ` 1 /`  X  Regularization We now define precisely how to count dependency types. For each child tag c , let i range over an enu-meration of all occurrences of c in the corpus, and let p be another tag. Let the indicator  X  cpi ( X , Y ) have value 1 if p is the parent tag of the i th occur-rence of c , and value 0 otherwise. The number of unique dependency types is then: Note there is an asymmetry in this count: occur-rences of child type c are enumerated with i , but all occurrences of parent type p are or-ed in  X  cpi . That is,  X  cpi = 1 if any occurrence of p is the par-ent of the i th occurrence of c . We will refer to PR training with this constraint as PR-AS. Instead of counting pairs of a child token and a parent type, we can alternatively count pairs of a child token and a parent token by letting p range over all to-kens rather than types . Then each potential depen-dency corresponds to a different indicator  X  cpij , and the penalty is symmetric with respect to par-ents and children. We will refer to PR training with this constraint as PR-S. Both approaches per-form very well, so we report results for both.
Equation 7 can be viewed as a mixed-norm penalty on the features  X  cpi or  X  cpij : the sum cor-responds to an ` 1 norm and the max to an `  X  norm. Thus, the quantity we want to minimize fits precisely into the PR penalty framework. For-mally, to optimize the PR objective, we complete the following E-step: which can equivalently be written as: where  X  cp corresponds to the maximum expecta-tion of  X  over all instances of c and p . Note that the projection problem can be solved efficiently in the dual (Ganchev et al., 2010). We evaluate on 12 languages. Following the ex-ample of Smith and Eisner (2006), we strip punc-tuation from the sentences and keep only sen-tences of length  X  10 . For simplicity, for all mod-els we use the  X  X armonic X  initializer from Klein and Manning (2004), which we refer to as K&amp;M. We always train for 100 iterations and evaluate on the test set using Viterbi parses. Before eval-uating, we smooth the resulting models by adding e  X  10 to each learned parameter, merely to remove the chance of zero probabilities for unseen events. (We did not tune this as it should make very little difference for final parses.) We score models by their attachment accuracy  X  the fraction of words assigned the correct parent. 5.1 Results on English We start by comparing English performance for EM, PR, and DD. To find  X  for DD we searched 0 . 25 to be the best setting for the DMV, the same as found by Cohen et al. (2008). DD achieves ac-curacy 46.4% with this  X  . For the E-DMV we tested four model complexities with valencies V c -V s of 2-1, 2-2, 3-3, and 4-4. DD X  X  best accuracy was 53.6% with the 4-4 model at  X  = 0 . 1 . A comparison between EM and PR is shown in Ta-ble 1. PR-S generally performs better than the PR-AS for English. Comparing PR-S to EM, we also found PR-S is always better, independent of the particular  X  , with improvements ranging from 2% to 17%. Note that in this work we do not perform the PR projection at test time; we found it detri-mental, probably due to a need to set the (corpus-size-dependent)  X  differently for the test set. We also note that development likelihood and the best setting for  X  are not well-correlated, which un-fortunately makes it hard to pick these parameters without some supervision. 5.2 Comparison with Previous Work In this section we compare to previously published unsupervised dependency parsing results for En-glish. It might be argued that the comparison is unfair since we do supervised selection of model complexity and regularization strength. However, we feel the comparison is not so unfair as we per-form only a very limited search of the model- X  space. Specifically, the only values of  X  we search over are { 80 , 100 , 120 , 140 , 160 , 180 } .
First, we consider the top three entries in Ta-ble 2, which are for the basic DMV. The first en-try was generated using our implementation of PR-S. The second two entries are logistic nor-mal and shared logistic normal parameter tying re-sults (Cohen et al., 2008; Cohen and Smith, 2009). The PR-S result is the clear winner, especially as length of test sentences increases. For the bot-tom two entries in the table, which are for the E-DMV, the last entry is best, corresponding to us-ing a DD prior with  X  = 1 (non-sparsifying), but with a special  X  X andom pools X  initialization and a learned weight  X  for the child backoff probabil-ity. The result for PR-AS is well within the vari-ance range of this last entry, and thus we conjec-ture that combining PR-AS with random pools ini-tialization and learned  X  would likely produce the best-performing model of all. 5.3 Results on Other Languages Here we describe experiments on 11 additional languages. For each we set  X  and model complex-ity (DMV versus one of the four E-DMV exper-imented with previously) based on the best con-figuration found for English. This likely will not result in the ideal parameters for all languages, but provides a realistic test setting: a user has avail-able a labeled corpus in one language, and would like to induce grammars for many other languages. Table 3 shows the performance for all models and training procedures. We see that the sparsifying methods tend to improve over EM most of the time. For the basic DMV, average improvements are 1.6% for DD, 6.0% for PR-S, and 7.5% for PR-AS. PR-AS beats PR-S in 8 out of 12 cases, though the average increase is only 1.5%. PR-S is also better than DD for 10 out of 12 languages. If we instead consider these methods for the E-DMV, DD performs worse, just 1.4% better than the E-DMV EM, while both PR-S and PR-AS con-tinue to show substantial average improvements over EM, 6.5% and 6.3%, respectively. One common EM error that PR fixes in many lan-guages is the directionality of the noun-determiner relation. Figure 1 shows an example of a Span-ish sentence where PR significantly outperforms EM because of this. Sentences such as  X  X leva tiempo entenderlos X  which has tags  X  X ain-verb common-noun main-verb X  (no determiner tag) provide an explanation for PR X  X  improvement X  when PR sees that sometimes nouns can appear without determiners but that the opposite situation does not occur, it shifts the model parameters to make nouns the parent of determiners instead of the reverse. Then it does not have to pay the cost of assigning a parent with a new tag to cover each noun that doesn X  X  come with a determiner. In this paper we presented a new method for unsu-pervised learning of dependency parsers. In con-trast to previous approaches that constrain model parameters, we constrain model posteriors. Our approach consistently outperforms the standard EM algorithm and a discounting Dirichlet prior.
We have several ideas for further improving our constraints, such as: taking into account the direc-tionality of the edges, using different regulariza-tion strengths for the root probabilities than for the child probabilities, and working directly on word types rather than on POS tags. In the future, we would also like to try applying similar constraints to the more complex task of joint induction of POS tags and dependency parses.
 J. Gillenwater was supported by NSF-IGERT 0504487. K. Ganchev was supported by ARO MURI SUBTLE W911NF-07-1-0216.
 J. Gra X a was supported by FCT fellowship SFRH/BD/27528/2006 and by FCT project CMU-PT/HuMach/0039/2008. B. Taskar was partly supported by DARPA CSSG and ONR Young Investigator Award N000141010746.
