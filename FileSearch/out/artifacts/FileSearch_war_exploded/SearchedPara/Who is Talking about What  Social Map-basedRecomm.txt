 Content-centric social websites, such as discussion forums and blog sites, have flourished during the past several years. These sites often contain overwhelming amounts of infor-mation that are also being updated rapidly. To help users locate their interests at such sites (e.g., interesting blogs to read or discussion forums to join), researchers have devel-oped a number of recommendation technologies. However, it is difficult to make effective recommendations for new users (a.k.a. the cold start problem) due to a lack of user informa-tion (e.g., preferences and interests). Furthermore, the com-plexity of recommendation algorithms often prevents users from comprehending let alone trusting the recommended re-sults. To tackle the above two challenges, we are building a social map-based recommender system called Pharos. A so-cial map summarizes users X  content-related social behavior over time (e.g., reading, writing, and commenting behavior during the past week) as a set of latent communities. Each community is characterized by the theme of the content be-ing discussed and the key people involved. By discovering, ranking, and displaying the most  X  X opular X  latent commu-nities, Pharos creates a visual social map of a website. This enables new users to obtain a quick overview of the site, al-leviating the cold start problem. Furthermore, we use the social map as a context to help explain Pharos-recommended content and people. Users can also interactively explore the social map to locate their interested content or people that are not being explicitly recommended, compensating for the imperfection in the recommendation algorithms. We have deployed Pharos within our company and our preliminary evaluation shows the usefulness of Pharos.  X 
This author conducted this work while he was an employee at IBM Research -China.
 we use the term social map to refer to a dynamically gener-ated marauder X  X  map 2 of a content-centric social website. Such a social map summarizes users X  content-related social behavior (e.g., reading, writing, and commenting) over time as a set of latent communities (Figure 1-a). Each latent community characterizes the implicit connections among a set of users and the content they generated. In other words, a latent community summarizes what is being talked about (content summary shown in green keywords in Figure 1-a) and who are involved (people summary in blue keywords shown in Figure 1-a). Since not all latent communities are equally important, Pharos uses several criteria to rank the communities, as well as the people and content in each com-munity by their  X  X otness X  (e.g., people X  X  social status and content popularity). It then recommends the top-K hottest latent communities on a social map. For example, Figure 1-a is a social map of the IBM internal blog site, depicting the top-7 hottest communities identified and recommended by Pharos. Figure 1 (b-c) also show Pharos-recommended content and people for a particular latent community (com-munity 1). As a result, a user especially a new user can use the social map to get a quick glimpse of a content-centric so-cial website and learn about the site X  X  social dynamics (e.g., relationships among content and people).

Since Pharos is able to use a social map to summarize and recommend the  X  X ottest X  activities of a social site to new users, it helps alleviate the cold start problem. The social map also provides a natural context for users to com-prehend the recommendation results (e.g., hot communities and hot items in each community). Specifically, a social map explains the existence of latent communities and their characteristics (e.g., highly influential content and individ-uals). Furthermore, the visual, interactive social map pro-vides users with a new navigation metaphor, with which the users can effectively explore a website in a structured man-ner (e.g., examining the latent communities one by one).
As a result, Pharos offers three unique contributions:
The rest of the paper is organized as follows. We first pro-vide a brief review of related work. We then describe a typ-ical usage scenario of Pharos before explaining how Pharos is built. Finally, we present a preliminary user evaluation of Pharos.
A magical map in Harry Potter : http://en.wikipedia. org/wiki/Magical_objects_in_Harry_Potter and occupation). In contrast, Pharos models the social dy-namics of a website and uses such information to create a social map of the site. As a result, the derived social map helps new users obtain a quick overview of a social website and facilitates the users X  information-seeking goals.
Our work is also related to the research topic on ensur-ing recommendation trustworthiness [9]. An early work on recommendation explanation is done by Herlocker et al. [8]. They explore the utility of explanations in automated collaborative filtering (CF) systems, by exposing neighbors and their ratings to end users. Donovan et al. [13] introduce PeerChooser, providing users with a visual explanation of the CF process. Guy et al. [6] study the effect of using so-cial network information to explain recommended items, and find that the degree of user interest in recommended items increases when explanations are provided. Vig et al. [25] employ a tag-based explanation, revealing why users might like items by linking items and users via tag relevance and tag preference. Symeonidis et al. [23] present MovieExplain, providing justifiable movie recommendations. Compared to the existing work, which mainly focuses on explaining how a recommendation algorithm works, Pharos externalizes its recommendation context (i.e., social map) and presents the recommended items (e.g., people and content) in such a con-text to help improve recommendation trustworthiness.
Furthermore, the interactive nature of Pharos is also re-lated to the effort of developing different interaction strate-gies for recommender systems. Traditional recommender systems normally present a single-shot of recommendation based on stored user preferences or activities (e.g., Ama-zon X  X  book recommendation). More advanced recommender systems have incorporated explicit user feedback in the rec-ommendation process to produce more effective recommen-dations [2]. More recently, researchers have developed con-versational recommender systems that can adaptively learn interaction strategies to better assist users in achieving their goals [17, 11, 24]. Compared to the existing work, Pharos employes a hybrid interaction strategy. At a high level, Pharos lets users use direct manipulation to interactively navigate its recommended social map including the recom-mended latent communities. At a low level, Pharos can engage a user in a turn-based  X  X onversation X , where the user can interactively request  X  X ot X  X ontent or people of a specific community and Pharos would then respond to such requests interactively.

Since Pharos needs to visually present users with a recom-mended social map, our work is also related to the efforts in visualizing online conversations. Conversation Map [18] is a Usenet newsgroup browser that visually presents the ana-lyzed message content, as well as the relevant participants. Judith et al. [3] discuss the design of graphical interfaces that reveal the social structure of the conversation by vi-sualizing patterns such as bursts of activity, the arrival of new members, and the evolution of conversational topics. While these works focus on the visual presentation of user online behavior, Pharos is on automatically generating a so-cial map to summarize users X  content-related social behavior and recommending such a map to users to guide their online activities. about what and locate desired information at content-centric Again, Alice can now learn more about the content and peo-ple involved in the  X  X Phone X  community.

In summary, Alice is able to use the social map created by Pharos to quickly understand the key activities on Blog-Central and easily learn about the  X  X ot X  topics and people that she might be interested in.
In this section, we will first give an overview of Pharos be-fore explaining how Pharos automatically generates a social map of a content-centric social website. We also describe how Pharos recommends  X  X ot X  content and people to users based on the generated social map, as well as how it visually explains its recommendations.
Pharos is designed to run on top of existing content-centric social websites. We assume that the target website has a database of all the site content and server logs that record user interaction behavior over time. As shown in Figure 3, Pharos has three key components: 1) social map genera-tor, 2) recommender, and 3) visual explainer. Based on users X  content-related social behavior (e.g., reading, writing, and commenting), which are often provided by a website X  X  database and server logs, Pharos dynamically generates a socia map. Based on the generated social map, the recom-mender uses several algorithms to recommend communities, content, and people to end users. The recommendation is explained visually by means of communities, portraying the social map of the website.
Since Pharos uses a social map to establish the context of making content and people recommendations, social map generation is a critical step in building Pharos. It takes three steps to create a social map: 1. community extraction 2. community/item/people ranking 3. community labeling
Before describing how Pharos generates a social map and uses it to make recommendations, first we give the formal definition of a social map and its components. often more informative than those in the body, they are as-signed higher weights. Using the prepared collection of con-tent items, we then use LDA to derive a set of latent topics. Each derived topic is characterized by a set of keywords, describing the main theme of the topic. For example, one topic derived from the entries in a technology-focused blog site might include keywords such as  X  Java  X  X nd X  program-ming language  X , while the other derived topic may contain keywords like  X  iPhone  X  X nd X  Apple  X .

Since LDA also computes the probabilistic distribution of each content item over topics, then a content item is con-sidered belonging to a topic if its probability over this topic is the highest among the other topics. Finally, we associate people to the content clusters based on their content-related social behavior (e.g., readership and writership). As a re-sult, we derive a set of latent communities, each of which describes a topic being discussed and a number of people who are involved in such a discussion.
Since the derived communities are not ranked themselves, our second step is to rank the communities based on their importance. The goal of this step is to identify  X  X ot X  X ommu-nities to be presented on a social map. There are a number of metrics to measure the  X  X otness X  of a community. Cur-rently, we measure the  X  X otness X  based on both content and people authorities. The key idea to measure content/people authority is that content items with more hits and replies are considered more popular. Similarly, people who post more popular content are considered having more authori-ties. Accordingly, content items written by people with more authorities are more likely to be popular.

To calculate the hotness of a derived community, we first compute the authorities of the content and people belong-ing to the community. Specifically, we build an interaction graph G ( P,I,E,w ), a directed bipartite graph, to model the relationships between the content and the people. Here, P denotes the set of people nodes, I is the set of content nodes, E is the set of edges corresponding to the people-content interactions contained in R ,and w : E  X  R denotes a non-negative weight function for edges. Each interaction between a person and a content item currently generates two directed edges, indicating the bi-directional relationships be-tween the person and the content that s/he has created. We assign different weights to different type of interactions. For example, authorship is considered a stronger type of rela-tionship than commentorship. So the edges indicating au-thorship weigh more than those of commentorship. We also consider the attenuation factor of time for each user behav-ior (represented by the edges) as follows: Here the parameter  X &gt; 0 is used to attenuate the weight of user behavior based on time decay  X  t . Specifically, more recent behavior is considered more important than the ones in the past.

Currently, we adopt the topic-sensitive PageRank algo-rithm [7] to compute the authority scores for all the content nodes and people nodes modeled by an interaction graph: Here PR is the PageRank vector holding the computed au-keywords in a content item or the time of their appearance). We then select the top-N topic keywords as the content sum-mary for the community.
Since the social dynamics of a website is constantly evolv-ing (e.g., the emergence of new topics or people), Pharos also needs to update its generated social map accordingly to reflect such changes at the site. To do so, Pharos must determine (1) an appropriate time window that will be used to compute the updates and (2) how to communicate the updates to users. As explained below, both of the issues are non-trivial and a full description of the solution is beyond the scope of this paper. Here we briefly describe the chal-lenges and our current approach in updating a social map. Our first challenge is to determine an appropriate time win-dow for computing the updates. If the time window is too small (e.g., hourly), there may not be sufficient data to com-pute the changes. On the other hand, if the time window is too large (e.g., monthly), there may be too many changes, which make it hard for both machines and users to process. From our experience, we find the size of the time window largely depending on the traffic of the site. Currently, we analyze the server logs periodically to approximate the win-dow size. For a site like IBM blog site, typically, we have around 500 posts and 10,000 visits daily, we do a bi-weekly update (update every two weeks). If we detect traffic surges or reductions in the server log, we would then adjust the window size (e.g., shortening or prolonging it).

Our second challenge is to communicate the changes to users. So far we have identified three types of changes and corresponding approaches to conveying such changes to users. First, a  X  X ot X  latent community may drop off from the  X  X ot X  list or simply disappear. In this case, we use color saturation to indicate the  X  X ctiveness X  of a community (e.g., community 1 versus 3 in Figure 4). Second, a new commu-nity becomes  X  X ot X . In this case, Pharos explicitly labels the  X  X ew X  community to catch a user X  X  attention (e.g., commu-nity 1 in Figure 4). Third, an existing  X  X ot X  X ommunity stays hot, however its content or people summary may have been updated. In this case, Pharos highlights the newly appeared keywords and de-highlights the old keywords that become less important (e.g., community 2 in Figure 4). Note that we realize that detecting the change in the social dynamics of a website is much more complex than described above. For example, a latent community may be morphed into one or more communities or multiple latent communities may be merged into one. As our ongoing work is addressing these issues, an in-depth description of such work is beyond the scope of this paper.
By using the social map, Pharos provides users with multi-faceted recommendations, including communities, content items, and people. First, Pharos recommends top-ranked,  X  X ot X  X ommunities to users with a summary to explain who X  X  talking about what within each community. By providing both a content summary ( what ) and a people summary ( who ), users could quickly assess if a community is interesting or relevant. When users select and drill down into a commu-nity on the social map, Pharos then recommends the most relevant content and people based on their computed au-thority scores. Moreover, Pharos interrelates the content as a  X  X ubble X , and its size is determined by the computed im-portance. We tend to display more important communities toward the center of the screen. We also use the Wordle 5 layout to tightly pack the related labels in each community. We have deployed Pharos internally to help IBM Blog-Central users navigate the blog site and locate their inter-ests. The back-end system of Pharos is implemented in Java, and the front-end user interface is implemented in HTML/JavaScript and Flex. The BlogCentral site already has several features that help users navigate the website. For example, it has a search box for searching blog entries by category (e.g., comments, tags, titles, and authors). On the home page, all blog entries are displayed in a list and the entries can be sorted by date, title, and the number of comments/ratings. A tag cloud is also used on the home page to summarize author-contributed tags associated with the entries.

To formally evaluate the usefulness and usability of Pharos in helping users locate relevant content and people, we de-signed two similar but not identical exploratory search tasks, asking users to find out the key content (top-3 most relevant blog entries) and people (top-3 most relevant authors) on a specific topic (e.g., mobile computing or lotus products). One was to be performed using Pharos, and the other using the original BlogCentral site. We recruited ten users (five females and five males) from IBM. We asked each user to perform both tasks, one using Pharos and the other using the original BlogCentral website. To eliminate potentail biases such as learning effects, we permuted the task order and system usage.

At the beginning of each user session, the user was asked to complete a pre-task questionnaire that assessed their knowl-edge about the given task (e.g., how much they know about  X  X obile computing X  already), and their familiarity of Blog-Central and Pharos. We then gave a brief tutorial of Pharos and BlogCentral. We allotted 15 minutes for each task. We logged the results of each task and recorded the time used to complete the task. After completing the task, the user was asked to fill in a post-task evaluation questionnaire, solicit-ing their subjective input on the usability and usefulness of Pharos, their most/least liked features, and suggestions for future improvements.
Using the logged data, we computed two objective mea-sures: taskTime and taskQuality . As shown in Figure 5, Pharos helped our users complete their tasks faster and better. Specifically, on average, it took the users 3 38 to complete a task when using Pharos, while it took them 8 59 when using the the original BlogCentral (Figure 5-a). Although our study involved only ten users, a repeated measures ANOVA test showed that the difference in task-Time was statistically significant (p=0.000). In addition to measuring taskTime , we also judged the quality of results ( taskQuality ) by two factors: relevance (how relevant the answers were to the topic) and importance (how popular http://www.wordle.net/
The users also had a number of suggestions for improv-ing Pharos. The top suggestion was to support a person-alized social map of Pharos, which would display commu-nities that a user is most interested. Since Pharos knows very little about a new user, its current recommendation is non-personalized. Instead, it recommends the most pop-ular communities to all users including new users, and all users see the same social map. In our ongoing work, we are extending Pharos to generate personalized social maps by taking into account user interaction patterns with a social map. For example, as a user becomes more and more in-volved in a particular community, this community should automatically become the center of the focus in his/her per-sonalized social map. Related to personalization, several users also suggested that giving them options to sort the order of the recommended content or people. For exam-ple, one user commented:  X  I don X  X  completely agree with the (current) ranking of content/people. I X  X  like to see multi-ple ranking criteria, then I can select the criteria myself to sort the content/people, e.g., the number of comments, the number of hits, etc.  X . It is interesting that users had con-flicted opinions about the community summary. Some found the current keyword-based summary too terse, while others found them too crowded. For example, one user mentioned that some time he had to guess the meaning of the key-words used in a community summary. He would like to see more meaningful summaries. On the opposite, a couple of users complained that the social map was too crowded and suggested that each community should only display two or three keywords summarizing people and content involved.
In this paper, we present Pharos, a social map based rec-ommendation technique, to address two challenges in rec-ommender systems. First, it provides an overview of a so-cial website, highlighting clustered  X  X ot X  X ontent and people. This helps users especially new users quickly understand the dynamics of a site and locate their interests, in part ad-dressing the cold start problem. Second, it uses the social map to explain recommendation results by means of relating content with user social activities, increasing recommenda-tion X  X  trustworthiness. In addition, the visual interactive social map allows users to explore the website by follow-ing links among different types of entities (e.g., communi-ties, content, and people), compensating for the inaccuracy of recommendation algorithms. Pharos has been deployed internally at IBM, helping bloggers navigate the IBM Blog-Central website. The results of our preliminary evaluation have shown that a social map is useful in helping users un-derstand and navigate a content-based social website. Feed-back from our pilot users also points future directions for improving Pharos, such as the generation of a personalized social map for experienced users. We thank Yingxin Pan, Fei Ma, Changyan Chi and Shixia Liu for their help and support of this paper.
