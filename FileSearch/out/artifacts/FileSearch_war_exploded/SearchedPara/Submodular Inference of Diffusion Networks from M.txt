 Bernhard Sch  X  olkopf 1 BS @ TUEBINGEN . MPG . DE MPI for Intelligent Systems and 2 Stanford University Over the last years, there has been an increasing interest in understanding diffusion and propagation processes in a broad range of domains: information propagation (Gomez-Rodriguez et al., 2010), social networks (Kempe et al., 2003), viral marketing (Watts &amp; Dodds, 2007), epidemiol-ogy (Wallinga &amp; Teunis, 2004), and human travels (Brock-mann et al., 2006).
 In the context of diffusion networks, one of the funda-mental research problems is how to infer the connectivity of a network based on diffusion traces (Gomez-Rodriguez et al., 2010; 2011; Myers &amp; Leskovec, 2010; Snowsill et al., 2011). In information propagation, we note when a blog or news site writes about a piece of information. However, in many cases, the blogger or journalist does not link to her source and therefore we do not know where she gath-ered the information from. In viral marketing, we get to know when customers buy products or subscribe to ser-vices, but typically cannot observe the trendsetters who in-fluenced customers X  decisions. Finally, in epidemiology, we can observe when a person gets ill but cannot tell who infected her. In all these scenarios, we observe spatiotem-poral traces of information spread (be it in the form of a meme, a decision, or a virus) but we do not know the paths over which information propagates. We note where and when information emerges but not how or why it does. In this context, inferring the connectivity of diffusion net-works is essential to reconstruct and predict the paths over which information spreads, maximize sales of a product or stop infections.
 Our approach to network inference. We consider that on a fixed hypothetical network, diffusion processes prop-agate as directed trees through the network. Since we only observe the times when nodes are reached by a diffusion process, there are many possible propagation trees that ex-plain a set of cascades. Naive computation of the model takes exponential time since there is a combinatorially large number of propagation trees. It has been shown that com-putations over this super-exponential set of trees can be performed in cubic time (Gomez-Rodriguez et al., 2010). However, to the best of our knowledge, efficient optimiza-tion of the model has been an open question to date. Here, we show that computation over the super-exponential set of trees can indeed be performed in quadratic time and sur-prisingly, we show that the resulting objective function is submodular. Exploiting this natural diminishing property, we can efficiently optimize the objective function to find a near-optimal network with provable guarantees that best explain the observed cascades. Lazy evaluation and the lo-cal structure of the problem can be used to speed-up our method. Considering all possible propagation trees enables us to learn a network from fewer observed cascades. This is important since social networks are highly dynamic (Back-strom &amp; Leskovec, 2011), changing and growing rapidly, and we can only expect to record a small number of cas-cades over a fixed network.
 Related work. The work most closely related to ours (Gomez-Rodriguez et al., 2010; 2011; Myers &amp; Leskovec, 2010) also uses a generative probabilistic model for inferring diffusion networks. N ET I NF (Gomez-Rodriguez et al., 2010) infers the network connectivity us-ing submodular optimization by considering only the most probable directed tree supported by each cascade. N ET -R
ATE (Gomez-Rodriguez et al., 2011) and C ON NI E (My-ers &amp; Leskovec, 2010) infer not only the network connec-tivity but either prior probabilities of infection or transmis-sion rates of infection using convex optimization by consid-ering all possible directed trees supported by each cascade. The main innovation of this paper is to tackle the network inference problem as a submodular maximization problem in which we do not consider only the most probable di-rected tree as in N ET I NF but all directed trees supported by each cascade as in C ON NI E and N ET R ATE . By con-sidering all trees, we are able to infer a network more ac-curately than N ET I NF when the number of observed cas-cades is small compared to the network size and by using the greedy algorithm for submodular maximization in con-trast to convex optimization, we are several order of mag-nitude faster than C ON NI E and N ET R ATE . Therefore, we present a network inference algorithm that may be capable of inferring real networks in the order of hundred of thou-sands of nodes with a small number of observed cascades. This comes with a drawback, our algorithm does not infer prior probabilities of infection nor transmission rates but only the network connectivity. However, in practice, our algorithm provides a measure of importance for each edge of the network through the marginal gain that each edge provides.
 Inferring how diffusion propagates over rapidly changing networks is crucial for a better understanding of the dynam-ics that govern processes taking place over information and social networks. In this context, scalability is a key point given the increasingly larger size of such networks and cas-cade data.
 The remainder of the paper is organized as follows: in Sec-tion 2, we describe the model of diffusion and state the network inference problem. Section 3 shows an efficient approximation algorithm with provable near-optimal per-formance. Section 4 evaluates our method using synthetic and real data and we conclude with a discussion of our re-sults in Section 5. In this section, we first describe the diffusion data our al-gorithm is designed for and continue revisiting the gen-erative model of diffusion introduced recently by Gomez-Rodriguez et al. (2010). We conclude with a statement of the network inference problem.
 Data. We observe a set C of cascades { t 1 ,..., t | C | } on a fixed population of N nodes. A cascade t c := ( t c 1 ,...,t is simply a N-dimensional vector recording when nodes in the population get infected. We only observe the time t c when a node i got infected but not who infected the node neither why it got infected. In each cascade, there are typi-cally nodes that are never infected, with infection times that are arbitrarily long. We assume there is an underlying un-observed network G that nodes in the population belong to, and cascades propagate over it. Our aim is to discover this unknown network over which cascades originally propa-gated by using only the recorded infection times. Pairwise transmission likelihood. We assume node j can infect node i with prior probability of transmission  X  . Now, consider that node j gets infected at time t and succeeds at infects node i at time t i . We then as-sume that the infection time t i depends on t j through a pairwise transmission likelihood f ( t i | t j ;  X  j,i ) . As in previ-ous studies of information propagation (Gomez-Rodriguez et al., 2010; 2011) and epidemiology (Wallinga &amp; Teunis, 2004), we consider two well-known monotonic parametric models: exponential, f ( t i | t j ;  X  j,i )  X  e  X   X  j,i power-law, f ( t i | t j ;  X  j,i )  X  ( t i  X  t j )  X  1  X   X  monotonic parametric model: Rayleigh, f ( t i | t j ;  X  ( t in networks in which the transmission rate  X  j,i of each edge can be different, in the remainder of the paper, for simplic-ity, we assume all transmission rates to be equal,  X  j,i =  X  . Importantly, our algorithm does not depend on the partic-ular choice of pairwise transmission likelihood and choos-ing more complicated parametric or non-parametric likeli-hoods does not increase its computational complexity. Likelihood of a cascade for a given tree. We assume that diffusion processes propagate as directed trees, i.e. , a node gets infected by action of a single node or parent. Then, for a given tree T and cascade t c , we can compute the likeli-hood of the cascade given the tree as follows: where E T is the edge set of tree T . Considering a spe-cific tree T for a cascade t c means to set which edges have spread successfully the information. Therefore, given the tree T , we can compute the likelihood of the infection times of the nodes in the cascade t c by using simply the pairwise transmission likelihood of each edge of the tree. Probability of a tree in a given network. In order to com-pute the likelihood of a cascade t c for a given tree T , we have considered the tree T to be given. We now compute the probability of a tree T in a network G as follows: where V T is the vertex set of tree T , E T is the edge set of tree T , E is the edge set of the network G and q = | E T | V
T | X  1 is the number of edges in T and counts the edges over which the diffusion process successfully propagated. For a particular cascade t c and tree T , V T is the set of nodes that belong to t c , i.e. , nodes where the infection time t  X  . The first product accounts for the active edges in G , i.e. , edges that define the tree T , and the second product accounts for the inactive edges in G , i.e. , edges where the diffusion process did not spread. For simplicity, we assume the same prior probability of transmission  X  for every edge of the network G .
 Likelihood of a cascade in a given network. Now, for a cascade t c , we consider all possible propagation trees T that are supported by the network G , i.e. , all possible ways in which a diffusion process spreading over G can create cascade t c : where t c is a cascade and T c ( G ) is the set of all the directed connected spanning trees on the subnetwork of G induced by the nodes that got infected in cascade t c , i.e. , t i t &lt;  X  . Figure 1 illustrates the notion of a cascade and all the connected spanning trees T induced by its nodes. All trees T  X  T c ( G ) employ the same vertex set V T and P ( T | G ) depends only the size of the vertex set V T . There-fore, assuming the same prior probability of transmission  X  for every edge of the network, P ( T | G ) is equal for all trees T on the subnetwork of G induced by the nodes that got infected in cascade t c and we simplify Eq. (2): Now, assuming conditional independence between cas-cades given the network G , we compute the joint likeli-hood of a set C of cascades occurring in the network G as follows: Network inference problem. Given a set of cascades { t 1 ,..., t N } , a prior probability of transmission  X  and a pairwise transmission likelihood f ( t v | t u ;  X  ) , we aim to find the network  X  G such that where the maximization is over all directed networks G of at most k edges. To the best of our knowledge, the optimization problem defined by Eq. (5) has been considered intractable in the past and proposed as an interesting open problem (Gomez-Rodriguez et al., 2010). We now show how to efficiently find a solution with provable sub-optimality guarantees by exploiting a natural diminishing returns property of the net-work inference problem: submodularity.
 To evaluate Eq. (4), we need to compute Eq. (3) for each cascade t c , i.e., compute a sum of likelihoods over all pos-sible connected spanning trees T induced by the nodes in-fected in each cascade. Although the number of trees can be super-exponential in the number of nodes in the cascade t , this super-exponential sum can be performed in time polynomial in the number n of nodes in t c , by applying Kirchhoff X  X  matrix tree theorem: Theorem 1 (Tutte (1948)) . Given a directed graph W with non negative edge weights w i,j , construct a matrix A such that a i,j = P k w k,j if i = j and a i,j =  X  w i,j if i 6 = j and denote the matrix created by removing any row x and column y from A as A x,y . Then, where T is each directed spanning tree in W that starts in y .
 Algorithm 1 Our network inference algorithm Require: C,k
G  X   X  K ; while | G | &lt; k do end while return G; In our case, we compute Eq. (3) by setting w i,j f ( t j | t i ;  X  ) and computing the determinant in Eq. (6). We then compute Eq. (4) by multiplying the determinants of | C | matrices, one for each cascade. For a fixed cascade t c , edges with positive weights form a directed acyclic graph (DAG) (only edges ( i,j ) such that t i &lt; t j have positive weights) and a DAG with a time-ordered labeling of its nodes has an upper triangular connectivity matrix. Thus, the matrix A x,y of Theorem 1, by construction, is also up-per triangular. Fortunately, the determinant of an upper tri-angular matrix is simply the product of the elements of its diagonal and then, This means that instead of using super-exponential time, we are now able to evaluate Eq. 4 in time O ( | C |  X  N where N is the size of the largest cascade, i.e. , the time re-quired to build A x,y and compute the determinant for each of the | C | cascades.
 Until now, we have ignored the role of missed infec-tions (Sadikov et al., 2011) or external sources as mass media (Katz &amp; Lazarsfeld, 1955; Watts &amp; Dodds, 2007) that can produce disconnected cascades. To overcome this point, we consider an additional node m that represents an external source that can infect any node u in a cascade. Therefore, we connect the external influence source m to every other node u with an  X  -edge. Every node u can get infected by the external source m with an arbitrarily small probability  X  . It is important to remark that adding the ex-ternal source results in a tradeoff between false positives and false negatives when detecting cascades. The higher the value of  X  , the larger the number of nodes that are as-sumed to be infected by an external source.
 Putting it all together, we include the additional node m in every cascade t c and we set the likelihood of a diffusion process to spread from m to any node j in the cascade t c to  X  . We assume that  X   X  f ( t j | t i ;  X  ) for any ( i,j ) . We then define the improvement of log-likelihood for cascade t under graph G over an empty graph  X  K :  X  -edges between m and all nodes in the cascade t c exist also for the empty graph  X  K .
 Finally, maximizing Eq. (5) is equivalent to maximizing the following objective function: where G is the variable.
 Efficient optimization. By construction, the empty the objective function F C is non-negative monotonic, F G . Therefore, adding more edges to G never decreases the solution quality, and thus the complete graph maximizes F
C . However, in real-world scenarios, we are interested in inferring sparse graphs with a small number of edges. Thus, we would like to solve: where the maximization is over all directed networks G of at most k edges. Naively searching over all k edge graphs would take time exponential in k , which is intractable. Moreover, finding the optimal solution to Eq. 9 is NP-hard: Theorem 2. The diffusion network inference problem de-fined by Eq. 9 is NP-hard.
 Proof. By reduction from the MAX-k -COVER pro-blem (Khuller et al., 1999).
 While finding the optimal solution is hard, we will now show that F C satisfies submodularity on the set of directed edges in G , a natural diminishing returns property, which will allow us to efficiently find a provable near-optimal so-lution to the optimization problem.
 A set function F : 2 W  X  R mapping subsets of a finite set W to the real numbers is submodular if whenever A  X  B  X  W and s  X  W \ B , it holds that F ( A  X  X  s } )  X  F ( A )  X  F ( B  X  X  s } )  X  F ( B ) , i.e., adding s to the set A increases the score more than adding s to the set B . We have the following result: Theorem 3. Let V be a set of nodes, and C be a collection of cascades hitting the nodes V . Then F C ( t 1 ,..., t is a submodular function F C : 2 W  X  R defined over sub-sets W  X  V  X  V of directed edges.
 Proof. Fix a cascade t c , graphs G  X  G 0 and an edge e = ( r,s ) not contained in G 0 . We will show that Let w i,j be the weight of edge ( i,j ) in G , and w G . Since G  X  G 0 , it holds that w 0 i,j  X  w i,j  X  0 . If ( i,j ) is contained in G and G 0 , then w i,j = w 0 i,j T T G,e . Hence, F ( t c | G  X  X  e } )  X  F ( t c | G ) = log proving submodularity of F ( t c | G ) . Now, since nonnega-tive linear combinations of submodular functions are sub-modular, the function is submodular as well.
 We now optimize F C ( G ) by using the greedy algorithm , a well-known efficient heuristic with provable performance guarantees. The algorithm starts with an empty graph  X  K and it adds edges that maximize the marginal gain se-quentially. That means, at iteration i we choose the edge e The algorithm stops once it has selected k edges, and re-turns the solution  X  G = { e 1 ,...,e k } . The greedy algo-rithm is guaranteed to find a set  X  G which achieves at least a constant fraction (1  X  1 /e ) (of the optimal value achiev-able using k edges (Nemhauser et al., 1978). Starting from the near-optimal solution given by the greedy algorithm, we could possibly improve the solution by applying a local search procedure.
 As in the original N ET I NF formulation, our algorithm also allows for two speeds-up: localized updates and lazy eval-uation (Algorithm 1). We can also obtain an on-line bound based simply on the submodularity of the objective func-tion (Leskovec et al., 2007).
 We evaluate our network inference algorithm in both syn-thetic and real networks. We use synthetic networks that aim to mimic the structure of social networks, and real information networks that are based on the MemeTracker dataset 1 . We compare our method in terms of precision, recall, accuracy and scalability with several state-of-the-art algorithms: N ET I NF , C ON NI E and N ET R ATE . For the comparisons, we use the public domain implementations of these algorithms. 4.1. Experiments on synthetic data Experimental setup. We first generate synthetic networks using two different well-known models of social networks: the Forest Fire (scale free) model (Barab  X  asi &amp; Albert, 1999) and the Kronecker model (Leskovec et al., 2010), and set the pairwise transmission rates of the edges of the networks by drawing samples from  X   X  U (0 . 5 , 1 . 5) . We then simulate and record a relatively small set of prop-agating cascades over each network using three different pairwise transmission likelihoods: exponential, power-law and Rayleigh. There are several reasons why we consider small set of cascades in comparison to the network size. First, all methods (including ours) assume that cascades propagate over a fixed network. Since social networks are highly dynamic (Backstrom &amp; Leskovec, 2011), changing and growing rapidly, we can only expect to record a small number of cascades over a fixed network. Second, track-ing and recording cascades is a difficult and expensive pro-cess (Leskovec et al., 2009). Therefore, it is desirable to develop network inference methods that work well with a small number of observed cascades.
 Accuracy. We compare the inferred and true networks via three measures: precision, recall and accuracy. Precision is the fraction of edges in the inferred network  X  G present in the true network G  X  . Recall is the fraction of edges of the true network G  X  present in the inferred network  X  if  X  &gt; 0 and I (  X  ) = 0 otherwise. Inferred networks with no edges or only false edges have zero accuracy.
 Figure 2 compares our method the precision, recall and accuracy of our method with for three different 1,024 node Kronecker networks: a random network (Erd  X  os &amp; and a core-periphery network (Leskovec et al., 2008) of precision-recall, our method is able to reach higher re-call values than N ET I NF , C ON NI E and N ET R ATE , i.e. , it is able to discover more true edges from a small number of cascades than other methods. For recall values that are reachable using N ET I NF , our method and N ET I NF a very similar precision value. Our methods allows for higher recall in comparison with N ET I NF because it gets exhausted 2 later for considering all possible trees per cas-cade instead of only the most probable one. In terms of accuracy, our method outperforms N ET I NF for more than half of their outputted solutions, and matches the remain-ing ones. C ON NI E and N ET R ATE  X  X  accuracy is typically significantly lower. However, N ET R ATE is able to beat all other methods for the hierarchical Kronecker network. If we compare with previous studies (Myers &amp; Leskovec, 2010), the performance of C ON NI E seem to degrade the most due to the limited availability in cascades and perhaps the variable transmission rates across the networks (as re-ported previously in Gomez-Rodriguez et al. (2011)). Performance vs. cascade coverage. Intuitively, the more cascades we observe, the more accurately any algorithm infers a network. Actually, when the number of cascades is large in comparison to the network size, we expect dif-ferences in performance among methods become negli-gible. Figure 3 plots the gain in Area Under the ROC curve (AUC) for our method in comparison with N ET I ber of observed cascades for several Kronecker networks and transmission models (  X  = 0 . 5 and  X   X  U (0 . 5 , 1 . 5) in all models). We observe that the difference in performance between our method and N ET I NF is greater for small num-ber of cascades and for a large enough number of cascades, both methods perform similarly or N ET I NF slightly outper-forms our method.
 Scalability. Figure 4 plots the average computation time per edge added against number of cascades. Since N ET -R
ATE is not greedy and instead solve a convex program for each node in the network, we divided their total running times by the number of edges that our method added until getting exhausted (until no edge has marginal gain greater than zero). We used the publicly available implementations of our algorithm and N ET I NF , both coded in C++. To carry out a fair comparison with N ET R ATE , we have developed a projected full gradient descend C++ implementation of N
ET R ATE , which is considerably faster than the publicly available Matlab implementation (that uses the CVX con-vex solver), and we run 10 and 20 iterations of full gra-dient descend (remarkably, even running one single itera-tion was slower than N ET I NF and our method). We do not report running times for C ON NI E since the publicly avail-able code is a Matlab implementation (that uses the SNOPT solver) and probably slower than a C++ implementation. Our method and N ET I NF are approximately one order of magnitude faster than N ET R ATE . Finally, note that the run-ning time of our algorithm does not depend on the network size but the number of cascades and cascade size. As an experimental validation, we run our algorithm in two net-works with 100 , 000 and 200 , 000 nodes and an average of two edges per node using 10 , 000 cascades and our algo-rithm took only 10 . 12 ms and 12 . 14 ms per edge added. 4.2. Experiments on real data Experimental setup. We use the publicly available MemeTracker dataset, which contains more than 172 mil-lion news articles and blog posts from 1 million online sources (Leskovec et al., 2009). Sites publish pieces of information and use hyperlinks to refer to their sources, which are other sites that published the same or closely related pieces of information. Therefore, we use hyper-links to trace information propagation over blogs and media sites. A hyperlink cascade is simply a collection of time-stamped hyperlinks between sites (in blog or news media posts) that refer to the same or closely related pieces of information. We record one hyperlink cascade per piece or closely related pieces of information. We extract the top 1,000 media sites and blogs with the largest number of doc-uments, 10,000 hyperlinks and 500 longest hyperlink cas-cades. We create a ground truth network G which contains an edge between a site u and a site v if there is at least a site post in the site u that links to a post on the site v . We then infer a network  X  G from the hyperlink cascades and evaluate precision, recall and accuracy with respect to G . We con-sider a power law pairwise transmission likelihood. Note that we trace the flow of information and create a ground truth network using hyperlinks because we are interested in a quantitative evaluation of our method in comparison with the state of the art. For richer qualitative insights, cascades based on short textual phrases should be considered, but that goes beyond the scope of this paper.
 Accuracy. Figure 5 shows precision, recall and accuracy of our method in comparison with N ET I NF , C ON NI E and N
ET R ATE . Our method reaches higher recall values than any other methods. In terms of accuracy, it beats others for the majority of their outputted solutions. As in the synthetic experiments, the shortage of recorded cascades degrades C ON NI E  X  X  performance dramatically.
 We have developed an efficient approximation algorithm with provable near-optimal performance that solves an open problem on network inference from diffusion traces (or cascades) first introduced by Gomez-Rodriguez et al. (2010). In our work, for each observed cascade we consider all possible ways in which a diffusion process spreading over the network can create the cascade, in contrast with N ET I NF , that considers only the most probable way (tree). Perhaps surprisingly, despite considering all trees, we show experimentally that the running time of our method and N
ET I NF are similar, and they are several orders of mag-nitude faster than alternative network inference methods based on convex programming as N ET R ATE and C ON NI E . Moreover, our algorithm typically outperforms N ET I N
ET R ATE and C ON NI E in terms of precision, recall and accuracy in highly dynamic networks in which we only ob-serve a relatively small set of cascades before they change significantly.
 Backstrom, L. and Leskovec, J. Supervised random walks: predicting and recommending links in social networks. In WSDM  X 11 , 2011.
 Barab  X  asi, A.-L. and Albert, R. Emergence of scaling in random networks. Science , 286:509 X 512, 1999.
 Brockmann, D., Hufnagel, L., and Geisel, T. The scal-ing laws of human travel. Nature , 439(7075):462 X 465, 2006. ISSN 0028-0836.
 Clauset, A., Moore, C., and Newman, M. E. J. Hierarchical structure and the prediction of missing links in networks. Nature , 453(7191):98 X 101, 2008.
 Erd  X  os, P. and R  X  enyi, A. On the evolution of random graphs.
Publication of the Mathematical Institute of the Hungar-ian Academy of Science , 5:17 X 67, 1960.
 Gomez-Rodriguez, M., Leskovec, J., and Krause, A. Infer-ring Networks of Diffusion and Influence. In KDD  X 10: Proceedings of the 16th ACM SIGKDD International
Conference on Knowledge Discovery in Data Mining , pp. 1019 X 1028, 2010.
 Gomez-Rodriguez, M., Balduzzi, D., and Sch  X  olkopf, B.
Uncovering the Temporal Dynamics of Diffusion Net-works. In ICML  X 11 , 2011.
 Katz, E. and Lazarsfeld, P.F. Personal influence: The part played by people in the flow of mass communications . Free Press, 1955.
 Kempe, D., Kleinberg, J. M., and Tardos,  X  E. Maximizing the spread of influence through a social network. In KDD  X 03: Proceedings of the 9th ACM SIGKDD International
Conference on Knowledge Discovery and Data Mining , pp. 137 X 146, 2003.
 Khuller, S., Moss, A., and Naor, J. The budgeted maximum coverage problem. Information Processing Letters , 70 (1):39 X 45, 1999.
 Leskovec, J., Krause, A., Guestrin, C., Faloutsos, C., Van-
Briesen, J., and Glance, N. Cost-effective outbreak de-tection in networks. In KDD  X 07: Proceedings of the 13th ACM SIGKDD international conference on Knowl-edge discovery and data mining , pp. 420 X 429, 2007. Leskovec, J., Lang, K. J., Dasgupta, A., and Mahoney,
M. W. Statistical properties of community structure in large social and information networks. In WWW  X 08 , 2008.
 Leskovec, J., Backstrom, L., and Kleinberg, J. Meme-tracking and the dynamics of the news cycle. In KDD  X 09: Proceedings of the 15th ACM SIGKDD Interna-tional Conference on Knowledge Discovery and Data Mining , 2009.
 Leskovec, J., Chakrabarti, D., Kleinberg, J., Faloutsos, C., and Ghahramani, Z. Kronecker graphs: An approach to modeling networks. The Journal of Machine Learning Research , 11:985 X 1042, 2010.
 Myers, S. and Leskovec, J. On the Convexity of Latent Social Network Inference. In NIPS  X 10 , 2010.
 Nemhauser, GL, Wolsey, LA, and Fisher, ML. An anal-ysis of approximations for maximizing submodular set functions. Mathematical Programming , 14(1):265 X 294, 1978.
 Sadikov, S., Medina, M., Leskovec, J., and Garcia-Molina, H. Correcting for missing data in information cascades. In WSDM  X 11: ACM International Conference on Web Search and Data Mining , 2011.
 Snowsill, T.M., Fyson, N., De Bie, T., and Cristianini, N.
Refining causality: who copied from whom? In KDD  X 11: Proceedings of the 17th ACM SIGKDD interna-tional conference on Knowledge discovery and data min-ing , pp. 466 X 474, 2011.
 Wallinga, J. and Teunis, P. Different epidemic curves for severe acute respiratory syndrome reveal similar impacts of control measures. American Journal of Epidemiology , 160(6):509 X 516, 2004.
 Watts, Duncan J. and Dodds, Peter S. Influentials, net-works, and public opinion formation. Journal of Con-
