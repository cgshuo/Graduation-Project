 The Online Social Network (OSN) is a ubiquitous feature in modern daily life. People access social networks to share thei r stories and connect with their friends. Many netizens commonly participate in multipl social networks, to cover their so-cial needs of reading, researching, sharing, commenting and complaining. There are a wealth of choices available to link their real-world social networks virtually, and to extend and enhance them online.

The variety of social networks are partially redundant but each has a niche focus that can provide different slants on an individual X  X  virtual lifestyles. People may communicate with friends in Facebook, share their opinions in Twitter, exhibit artistic photographs in Flickr and maintain business relationships in LinkedIn. Rarely do individuals use a single OSN to cover all such facets. As such, studies that seek to understand the virtual netizen that capture a user X  X  participation from only a single OSN will necessarily have a strong bias. To gain a holistic perspective, an understanding of an online individual is derivable from piecing together all of the myriad aspects of his online footprints. Furthermore, when the same users posts the same opinions in different OSNs, such user linkage is needed, to avoid double-counting and t o accurately estimatef social signals.
Variants of this problem  X  commonly referred to as record linkage  X  have been investigated in the datab ase community for decades. Relatively recent work has re-examined this problem in light of linkage within OSNs. Many works [4], [13], [15], [19] adapt standard supervised machine learning for linkage. These works focus on accuracy and rely on pairw ise comparisons (i.e., Is profile x in OSN a thesameasprofile y in OSN b ?). However these works are infeasible to apply to large-scale real-world datasets: as they do not address how to deal with the unbalanced ratio of positive to negative instances, and the enormous number of necessary pairwise comparisons. [12] carefully studies usernames and proposes a prior knowledge approach which significantly improves name-disambiguation performance in the user linkage task. [3] and [14] leverage the graphical struc-tures of social networks and [20] identi fies behavioral features extracted from usernames and user-generat ed content, both noting that external evidence can help in the linkage task. However, acquiring both forms of external evidence may be expensive, or even inaccessible. In summary, while the prior work we have surveyed here have introduced methods or features for the user linkage problem, few address the difficulties with the necessary quadratic complexity of pairwise comparison. None have reported their results on identifying individuals in real-world large-scale datasets.

In this paper, we address this problem of large-scale online social network user profile linkage . We investigate and optimally tune known techniques for record linkage, by applying them to the user profile linkage problem for the purpose of large-scale production use. The key contribution of our work is to link an individual user X  X  user profiles together, exploiting the idiosyncrasies of the problem to achieve accurate, time-efficient and cost-sensitive linkage. 2.1 Identifying Users across Social Networks User profile linkage is a research area that has developed in parallel with the development online social networks. At its core, methods compare the similarity between two users X  profiles (often, one from one social network and one from another) by carefully investigating their attributes [4], [13], [15], [19]. Vosecky et al. [19] and Carmagnola et al. [4] proposed linear threshold-based models, which combine each features with weights an d determine whether they belong to one identity by comparing to the preset threshold. Malhotra et al. [13] and Nunes et al. [15] adopt supervised classification to decide on matching.

Aside from attribute comparison, Narayanan et al. [14] and Bartunov et al. [3] leverage a user X  X  social connections to identify their OSN accounts. The former demonstrated that users can be de-anonymized without personal information, by exploiting the fact that users often have similar social connections in different OSNs. Bartunov et al. similarly reported that modeling the user graph improves performance by re-identifying users with similar relationship structures.
Several works also aim to disambiguate users of the same name ( X  X amesake users X ), a subtask termed name disambiguation [1], [18]. Zafarani et al. [20] explored how the behavior features of how users express themselves and generate their usernames. Perito et al. [16] studied username choice discloses our identities to public, while Liu et al. [12] improves name disambiguation by modeling the commonality of usernames, to help better estimate the linkage likelihood. 2.2 Record Linkage and Entity Resolution User profile linkage is similar to traditional record linkage (or entity resolution ). Surveys [8,9]. review the various approaches, including named attributes com-putations [5], schema mapping [2], [17] and duplicate detection in hierarchical data[10], all which inform the construction of profile linkage techniques.
Both profile linkage and record linkage face the computational complexity problem. A key insight to reducing practical complexity is to note that many user profile pairs are highly disparate, and unnecessary to compare. Indexing techniques can then be used to find rough clusters for which expensive pairwise comparison can be applied [6]. Canopying [7] is one such techniques, setting up soft constraints to form overlapping clusters (canopies), and only comparing instances within each canopy. We first define the associated terminology and then formalize the problem of profile linkage: Identity refers to a unique entity, usually identifiable in the real-world context. Identities usually correspond to individual people, but other physical and virtual entities  X  such as bands, companies and products  X  are also possible. The current U.S. president, Barack Obama, is an example of an identity.
 Profile refers to a projection of an identity into a particular social network. A profile is a data structure, consisting of a set of attributes with values and implicitly belongs to its identity. Identities may participate in multiple social networks, and thus project a profile for each network. For example, currently, Barack Obama is barackobama on LinkedIn and Facebook, BarackObama on Twitter, and +BarackObama on Google Plus.

Intuitively, profiles that are projected from the same identity should have high similarity with each other. Returning t o our example, We can see three of Barack Obama X  X  profiles use the same user ID (ignoring capitalization). Profile linkage hinges on this assumption of similarity.

Profile linkage is thus the matching task of determining which profiles are projections of the same identity.

More formally, let I = { I i } be set of identities, R = { R k } be set of social networks and P k denotes set of profiles in the online social network R k . I i has all his profiles P k,i in social network R k where P k,i  X  X  k . Note that identities ( I ) are not observed, so we must infer whether its projections  X  I i in the observed online social networks are linked and represent it, where  X  I i =  X  R k  X  X  P k,i .
We define the setwiseprofilelinkage problem as the task of fully recovering the set of  X  I i given online social networks R and profiles P k of each social network k . At a smaller scale, the pairwise profile linkage problem is the task of determining whether two profiles are projected from the same identity.

By repeatedly solving the pairwise profile linkage problem for all profile pairs from any two social networks and resolving all transitivity conflicts, we solve the setwise profile linkage task . Notice that if there are only two social networks, setwiseprofilelinkage reduces to pairwise profile linkage .

We address the pairwise profile linkage for the case of two social networks. For each query profile in OSN R  X  , we retrieve a set of similar n target profiles from R  X  , and determine (if any) of the P  X  link; i.e., originate from the same identity i that generated the query profile P  X  . In this paper, we additionally assume that each identity only projects at most a single profile per OSN. Given the large-scale and reliance on external data, our OPL ( X  X nline Profile Linkage X ) approach to profile linkage must consider computation cost at the core. OPL addresses the cost-sensitivity by controlling local computation by employing canopies to prune unnecessary pairwise comparisons.

OPL takes an indexing approach to accomplish setwise profile linkage. To avoid redundant comparisons, we sequentially traverse the two pending OSNs, by regarding one as a query profile source and the other as the target to be considered for linking. Our approach is symmetric, as either OSN can be treated as the query source. 4.1 Token-Based Canopies To construct our canopies, we use tokens from usernames and names, as these are ubiquitous sources common in all OSNs. Then we index these profiles by corresponding tokens. Based on our observations, we find that 96.1% matched profiles share at least one token. By  X  X oken X , we mean continuous letter or digit sequences segmented by intervening spaces or symbols. We make the implicit assumption that two matched profiles must share a common token.

Our detailed examination of tokens shows that they conform to a power law distribution very well (Zipf X  X  Law). Thus, high-frequency tokens do not serve to distinguish truly linked profiles. As such tokens would create canopies of limited use that are large (or equivalently, costly), we filter out high-frequency tokens from consideration: tokens above a frequency threshold  X  are discarded. Canopy Complexity Analysis. We prove that token-based canopies yield a linear complexity in this section. Let the size of query profiles Q be | Q | ,thesizeof target profiles T be | T | . Assuming that the set of all tokens is M and the frequency of token m  X  X  is N m , then the set of tokens (after filtering) is regarded as M = { m | m  X  X  ,N m  X   X  } .

The total number of comparisons is the summation of each query X  X  candidate profiles retrieved from the canopies: where M q  X  M is the query profile q  X  X  token set, which is a subset of the tokens M . D m denotes the set of target profiles indexed by specific token m and | D m | denotes its size.

Let the profile frequency of token m be N m,Q computed over Q and N m,T computed over T . Notice that D m equals to N m,T , and that all candidates of m are retrieved N m,Q times and that N m,Q + N m,T = N m . Therefore, we can compute the total number of comparisons C from a token perspective: Since the tokens X  distribution follow a power law (Zipf X  X  Law), we have: where s and H are parameters that characterize the distribution and r m is the rank of m . Substituting Equation 3 into Equation 2, we derive: where r  X  is the rank of the token(s) with frequency  X  , which equals to ( H/ X  ) s
By employing linear regression, we estimate approximate value of s to be 1 . 053, which follows the empirical observations that s  X  1and H  X  ( | Q | + | T | ) when applied to human language [11]. We derive a final, concise relationship: where  X  is a constant to ensure equality. We can thus tune  X  for a particular application scenario, knowing that we will have a complexity on the order of O ( | Q | + | T | ), i.e. linear in size of Q and T . 4.2 Feature Selection OPL uses a simple battery of features for linking in a supervised manner. We employ both local features extracted di rectly from profile attributes, and (op-tionally) external features acquired from the Web. All features are normalized to a range of [0 , 1] to simplify computation. Local Features (5 Features). Username : Name comparison is a well-studied problem and many fuzzy matching approaches have been designed and evaluated for it. We adopt the Jaro Winker metric, as it been reported to be one of the best performing [5] metrics for name-like feature.

As many identities may have similar or even identical namesakes, the user-names alone are not sufficiently discriminative. When linking across the entire web dataset or treating person names with high namesake conflicts such as Chi-nese, name disambiguation techniques become more important.

Language : This attribute refers to the language(s) spoken by the user. This attribute is a set of enumerated types, taking on values from a fixed finite set. We employ the Jaccard similarity for this set attribute to compute the feature.
Description : The description is a free-form short text provided by the user, commonly mentioning their associations to organizations, their occupations and interests. We calculate the vector-space model cosine similarity with TF  X  IDF weighting, a commonly-used standard, for this feature.

URL : Some profile attribute values are URLs, while other URLs can be ex-tracted from free text descriptions (e.g., description s).URLspointingtospe-cific pages (i.e., homepages, blogs) can be helpful. We split URLs into tokens, using cosine similarity with TF  X  IDF weighting of the tokens for comparison.
Popularity : We utilize the profile X  X  friend or connection count. This value reflects the popularity and connectedness of the profile. OSNs often cap the total number of connections that are displayed ; so to make two values comparable, we omit counts beyond this maximum limit. We adopt a normalized formula akin to Jaccard set similarity for popularity comparison: where friend q ( friend t ) is the count of friends for profile q ( t ). External Features (2 Features) Location : Locations come in a variety of forms  X  detailed addresses, lat-long coordinates, or bare city names  X  such that standard string similarity fails here. We rely on the Google Maps API (GeoCode) to convert arbitrary locality strings into geographic coordinates, cal-culating spherical distance d in kilometers for comparison. We employ e  X   X d to normalize the distance similarity within [0 , 1], where the scale parameter  X  is assigned to be 0 . 001.
 Avatar : is an image to represent the user, given as a URL in the profile. After downloading the image, we use a gray-scale  X  2 dissimilarity to compare the images. Our implementation is a bin-by-bin histogram difference based [21], which has been proved effective for textur e and object categories classification, defined as: where H q,i and H t,i represent the i th bin of the query profile q and target profile t  X  X  image gray-scale histograms.
 4.3 Probabilistic Classifier As previously stated, the token type distribution obeys Zipf X  X  law. This allows us to estimate the utility of a shared token for matching profiles based on its frequency within the collection. A shared rare token gives a larger probability of matching. We codify this evidence into a probablistic model.

To determine whether the query profile q and target profile t are from the same identity, we estimate its probability modeled as conditioned on the joint probabily of the similarity of the features and the set of shared tokens: Pr ( l q,t = 1 |
F q,t ,M q,t )where l q,t = { 0 , 1 } denotes whether q and t are matched, F q,t denotes similarity features and M q,t denotes the shared tokens between q and t .
We make the assumption that the feature similarity and overlapping tokens are independent of each other, yielding: the probability of observing feature k , conditioned on profile match or not.
Unfortunately, Pr ( l q,t | M q,t ) is difficult to measure in p ractice. We estimate it roughly as the fraction of profiles that have all observed tokens in q : where D m is all corresponding profiles indexed by token m and  X  (empirically set to 0 . 5) is a smoothing factor that prevents Pr ( l q,t | M q,t )frombeing1.By applying the equality Pr ( l q,t =0 | X  )+ Pr ( l q,t =1 | X  )=1toEquation8,wederive: sparse, it is difficult to properly model their distribution, we employ the kernel density estimator to estimate the features X  distributions. Given these estimates, we thus declare q to match t when  X  Pr ( l q,t =1 | F q,t ,Mq,t ) &gt; 0 . 5. We set up our experiments on linking over 150,000 users across two well-known social networks: Twitter and LinkedIn. We aim to answer the following questions: (1) How well does our approach perform on the real world large-scale dataset compared to other state-of-the-art approaches? (2) How does the setting of the canopy threshold  X  practically impact perf ormance and efficiency? 5.1 Dataset and Evaluation Metric We describe our approach to construct a realistic dataset for the profile linkage problem. We consider the problem of linking user profiles from Twitter and LinkedIn. We first collected tweets from Twitter for one week, 9 X 16 October 2012. Then we sampled 152,294 Twitter users from these tweets and downloaded their profiles. LinkedIn users are randomly sampled from LinkedIn directory 1 . In total, we obtained 154,379 LinkedIn user profiles.

It is impossible to obtain the full ground truth for the dataset, short of ask-ing each tweeter to disclose their Lin kedIn profile. Instead we use public data already provided in third party websites, such as About.me and Google+, which encourages users to manually submit their OSN profiles X  links. We assume that all social network accounts filled by one user belong to himself. We randomly crawl 180,000 Google+ profiles and extract this partial ground truth from the overlapping users of our dataset and the Google+ profiles.

The partial ground truth includes 4,779 matched Twitter X  X inkedIn users, 3,339 isolated Twitter users and 1,632 isolated LinkedIn users, a total of 9,750 identities. We adopt this partial ground truth to estimate the performance.
We employ the standard IR evaluation metrics: Precision ( Pre ), recall ( Rec ) and F 1 -measure ( F 1 ) to evaluate the pairwise linkage. We also report the identity-based accuracy ( I -Acc ), which the accuracy of setwise linkage restricted to true positive matches (i.e., correctly identified identities divided by the total number of ground truth identities). 5.2 User Profile Linkage We apply several approaches to link the Twitter X  X inkedIn dataset using a canopy framework. To the best of our knowledge, no related work has attempted the linkage of complete OSN profiles on two real-world large-scale datasets. Both Bartunov el at. [3] and Vosecky el at. [19] executed experiments on a small-scale datasets. In related work, Liu el at. [12] focuses only on disambiguating profiles with identical username namesakes and Malhotra el at. [13] studied the linkage effectiveness on an artificial dataset. No works have yet to benchmark profile linkage on a real-world large scale dataset.

However, such studies are relevant as the y describe comparable pairwise clas-sifier to ours. [13] shows that with similar features, simple classifiers like C4.5, SVM and Na  X   X ve Bayes perform well in the artificial, balanced dataset scenario. [12] provides an improved model that combines SVM and username n -gram prob-ability. We use these methods as comparative baselines. We use the WEKA3 2 library for its implementations of C4.5, SVM and Na  X   X ve Bayes classifiers. We re-implement Liu et al. (2013) approach following their work X  X  description.
In our experiment, we set Twitter as the query dataset and LinkedIn as target dataset. For our canopy threshold, we set  X  = 200, as our parameter tuning results. We randomly sampled 1,000 query instances from the ground truth, then retrieve all corresponding target instances by canopying to generate the training set.

Table 1 shows the experimental results. Our approach achieves the best per-formance, in both F 1 and I -Acc . The standard Na  X   X ve Bayes classifier outperforms SVM. While not strictly comparable, our Na  X   X ve Bayes-based approach also bet-ters Liu X  X  SVM-based method [12]. This validates the same conclusion in [13]. We believe the reason for SVM X  X  subpar performance is caused by missing features in a large proportion of the profiles, which we have described as quite significant an issue for profile linkage.

By reviewing the evaluation results, we observe that simple classifiers perform better in precision but underperform on recall. Although Malhotra et al. reports good performance on an artificially-balanced scenario, on real data, na  X   X ve classi-fiers prefer classifying instances as negat ive, as there is a much larger imbalance of negative instances. Both Liu et al. and our approach address this problem by employing prior knowledge about the rarity of tokens, that may carry stronger signals for matching. However, Liu X  X  work adopts this prior in a simple linear way, while OPL embeds it directly within its probabilistic model. 5.3 Canopy Performance and Efficiency Canopy settings affect both efficiency and linkage performance. Recall is reduced when  X  is set too small, preventing correct potential profiles from being in the same canopy. Fig. 1 X (a) illustrates the relationship between  X  and missing pair. These missing pairs are indeed matched but at least one profile was pushed out of a matching canopy, as all of its tokens X  frequencies are greater than the given  X  . The miss percentage reaches a steady state when  X   X  500, and we feel is already insignificantly different when  X   X  200.

On the other hand, too large a setting of  X  brings in noise that confuses classi-fiers. A large setting of  X  also increases computational overhead ( cf Section 4.1). Fig. 1(b) above illustrates the correlation between performance and  X  on the full scale of our dataset. Fig. 1(b) shows that F 1 -measure converges after  X   X  200, so we set  X  = 200 for our experiment.

While correct parameter setting primarily depends on the requirement of whether precision is mo re important than recall,  X   X  X  value also influences running time. The number of pairwise comparisons used by OPL over different scales of  X  is shown in the Fig. 2(a). We see that OPL using threshold-based canopies is approximately linear in computations to  X  . As the computation complexity depends on  X  , we also tune the performance against  X  , at different dataset scales. Each square in Fig. 2(b) represents the  X  with the best performance, and the respective vertical interval gives the acceptable range of  X  values, for which the resultantq loss in F 1 is less than 0 . 5%. From these results, we can see that OPL is largely insensitive to dataset scale, a good signal that OPL adequately constrains the linkage task to an approximate linear complexity.

Thereasonwhytheoptimal  X  values show only a neglible increase when the dataset size is scaled up is due to our choice of canopying on username tokens. To avoid conflicts, we find that users prefer to select fairly unique usernames, that may incorporate rarer tokens whose frequencies are less than a most useful choices of  X  . We investigate the problem of real world large-scale profile linkage and propose OPL, a probabilistic classifier to address this. OPL caters to specific character-istics of this problem that differentiate it from toy linkage datasets: handling a) the unbalanced nature of the dataset and b) the largeness of the dataset scale. To link the hundreds of thousands of profiles, we employ threshold-based canopies, which directly manipulate and control the resultant linear complexity of the linkage task, allowing an operator a higher degree of flexibility and control over expected run times.

In our experimental results, we show effective performance with 85% F 1 -measure and 86% I -accuracy, comparable to previous work. Our cost-sensitive framework also has the ability to prune unnecessary pairwise comparisons while keeping the loss in performance to an acceptable level.

In future work, we plan to improve OPL in two ways: first, to investigate more robust methods for linking OSNs when provided with other heterogeneous data. For example, linking an SNS user to a forum user, by way of the forum content. Second, to leverage the automatically identified set of users to build and test applications where the holistic user profile serves to better aggregate evidence for downstream applications, such as product sentiment estimation.
 Acknowledgments. This work was supported by Natural Science Foundation of China (61073071). Part of the work was done at the Tsinghua-NUS NExT Search Centre, which is supported by the Singapore National Research Foun-dation &amp; Interactive Digital Media R&amp;D Program Office, under research grant R-252-300-001-490.

