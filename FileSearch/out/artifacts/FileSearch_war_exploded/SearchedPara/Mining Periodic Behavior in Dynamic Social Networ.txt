
Social interactions that occur regularly typically corre-spond to significant yet often infrequent and hard to detect interaction patterns. To identify such regular behavior, we propose a new mining problem of finding periodic or near periodic subgraphs in dynamic social networks. We ana-lyze the computational complexity of the problem, showing that, unlike any of the related subgraph mining problems, it is polynomial. We propose a practical, efficient and scal-able algorithm to find such subgraphs that takes imperfect periodicity into account. We demonstrate the applicability of our approach on several real-world networks and extract meaningful and interesting periodic interaction patterns.
Monthly e-mail newsletters, yearly family reunions, and familiar faces of strangers at the morning coffee shop  X  these are all regular and significant patterns that are eas-ily lost to the observer in the mass of social interaction data. Due to recent technological advances, one can now mon-itor large populations of humans, animals and networked computers, and know precisely when one entity in the pop-ulation interacts with another. Whether it is an exchange of e-mails or a phone call between humans, connections made between networked computers or a GPS-tagged wild Zebra stallion associating with a specific harem [13], real-world patterns of interactions can be studied and recorded at a finer time scale than ever before. In this paper, we propose a formal and practical method for identifying periodically re-curring patterns from streams of interaction data, and show that the technique can be used to explore the inherent peri-odicity of interactions in a population.

Social networks are graphs that are used to model and analyze the structure of relationships between a set of enti-ties. The nature and scope of social network data, however, have grown well beyond traditional applications in sociol-ogy [28] and contemporary study in physics [2, 26]. Con-ventional social networks are now superseded by continu-ous streams of dynamic interaction data, or dynamic net-works, which have opened the way to new techniques for analyzing the underlying populations [2 X 4,9, 22, 23].
We propose a novel data mining problem for dynamic networks: periodic subgraph mining , or the discovery of all interaction patterns that occur at regular time intervals. Consider two potential applications of this technique: the first, based on the premise that periodic patterns represent stable interaction patterns, is that these patterns can be of qualitative interest in and of themselves. Ecologists, for example, tag wild herds of animals with tracking devices in order to study their movements and social patterns [19]. Periodic subgraphs in this case correspond to seasonal as-sociation or mating patterns, which are of biological inter-est, especially if these patterns are hidden in large quanti-ties of effectively random animal movements and associa-tions [13]. A second application stems from the fact that, by virtue of repeating regularly, periodic behavior can be pre-dictable behavior. Dynamically mining predictable interac-tions from sensor logs can be used, for example, in various types of ubiquitous and mobile computing [11].

We therefore center our work around two fundamental claims necessary for both applications: first, that many so-cial systems inherently do contain patterns that recur with a natural periodicity. Second, that all such patterns can be ex-tracted for analysis from a dynamic network in an efficient and tractable manner.

Our contributions in this paper are as follows:  X  We formally define the problem of periodic subgraph  X  We theoretically analyze the problem in Section 3 and  X  In Section 4, we propose a novel measure for ranking  X  In Section 5, we describe a polynomial time, parameter- X  In Section 6, we evaluate our algorithm and the gen-
Let V X  N represent a set of unique entities whose inter-actions are recorded over a period of time and divided into T discrete timesteps of equal duration. This type of data constitutes a dynamic network [22], where the objects of in-terest are interaction patterns between vertices and how they change over time. The analysis of dynamic networks is a relatively new field and recent work has focused on random graph models for the generation of dynamic networks [2, 22,25], mining for frequently occurring patterns [4,9], de-tecting communities and analyzing graph theoretic proper-ties [3,20].

In this paper, we are interested in finding interaction pat-terns in dynamic networks that occur periodically. The ap-proach we synthesize is based on two different problems in data mining  X  frequent pattern mining in transactional and graph databases [14, 18,21], and periodic pattern mining in unidimensional and multidimensional sequences [12, 15, 17,24, 30,31]. By combining aspects of both approaches, we obtain a theoretically sound characterization of periodic behavior in dynamic networks, that we will show in Sec-tion 6 is also empirically plausible.
 Definition 1. A dynamic network G = G 1 , ..., G T is a time-series of graphs, where G t =( V t ,E t ) is the graph of interactions E t observed at timestep t , among the set of uniquely labeled entities V t  X  X  .

A key characteristic of each graph G t  X  G is that ver-tices are uniquely labeled. From a computational point of view, this class of graphs has more in common with sets, and various hard graph problems such as maximum com-mon subgraph and subgraph isomorphism are reduced to quadratic complexity in the number of nodes [10]. Interac-tions can be either directed or undirected, and the exact def-inition of what constitutes an  X  X nteraction X  depends on the application. Generally, a continuous stream of interaction data is quantized into temporal segments of equal duration; the methods of such quantization are beyond the scope of this paper. The types of data that we deal with, however, have natural quantizations such as hours or days.
Before we formally define the problem of mining peri-odic subgraphs, we recall some concepts from the field of frequent pattern mining and extend them to dynamic net-works.
 Definition 2. For an arbitrary graph F =( V f  X  X  ,E f  X  V F is a subgraph of G t , denoted F G t : F is a frequent subgraph of G if | S ( F ) | X   X  where 1  X   X   X  T is a user-defined minimum support threshold.
Let F (  X  ) be the set of all frequent subgraphs of G at min-imum support  X  . Definition 2 implies that for any frequent subgraph F  X  X  (  X  ) all its subgraphs are also frequent and, thus, are also in F (  X  ) . This is the downward closure prop-erty and is the basis of early pattern mining algorithms like the apriori algorithm [1]. Naturally, there is a large amount of redundant information in such a set. The concepts of maximal and closed frequent subgraphs aim to reduce the size of F (  X  ) without losing much (or any) information. Definition 3. A frequent subgraph F  X  X  (  X  ) is maximal if there is no other frequent subgraph F  X  X  (  X  ) where F  X  F . F (  X  ) max  X  X  (  X  ) is the set of maximal frequent subgraphs.
 Definition 4. A frequent subgraph F  X  X  (  X  ) is closed if it is maximal at some support  X   X   X  [27]. F (  X  ) closed  X  X  ( the set of closed frequent subgraphs.

In Figure 1, F 1 = { (1 , 2) , (1 , 3) , (1 , 4) , (1 , 5) } only frequent maximal subgraph at  X  =2 . At the same min-imum support, there are three closed frequent subgraphs: F 1 itself, F 2 = { (1 , 2) , (1 , 3) } and F 3 = { (1 , 4) the latter two of which are maximal at  X  =3 . Note that F nentially smaller than F (  X  ) . Furthermore, both F (  X  )  X  ) can be recovered from F (  X  ) mial time). We thus restrict our attention to closed sub-graphs only, as they represent in a certain sense coherent and complete interaction patterns.
 Definition 5. A periodic support set or periodic subgraph embedding (PSE) of an arbitrary graph F =( V f ,E f ) in G , where V f  X  X  , is a maximal, ordered set of timesteps where
Figure 1. Frequent and periodic subgraphs at  X  =3 . { (1 , 2) , (1 , 3) } is frequent but not peri-odic, whereas { (1 , 4) , (1 , 5) } is both.
 F is a subgraph of G t , such that the difference between consecutive timesteps in the set is constant.
 The constant p is the period of F , and F is a periodic sub-graph if it has at least one such embedding with | S P ( F  X  , where  X  is the minimum support threshold.

The notion of a closed periodic subgraph carries over from Definition 4. Note that Definition 5 allows a subgraph F to have multiple periodic embeddings in G with different starting positions, supports and periods. Furthermore, these embeddings can overlap as long as each support set is max-imal. Figure 1 shows an example of a closed subgraph that is frequent but not periodic, and another that is both. Definition 6 ( Periodic Subgraph Mining Problem). Given a dynamic network G and a minimum support threshold  X   X  2 , the P ERIODIC S UBGRAPH M INING prob-lem is to identify all closed periodic subgraphs in G
Since real-world networks are unlikely to contain per-fectly periodic patterns, we conclude with a definition of what constitutes  X  X ear X  periodicity.
 Definition 7. A noisy subgraph exhibits jitter in its period if its period is near-constant rather than constant. Given a jitter value of J  X  0 , we extend Definition 5 to account for noise as follows: S
In this section, we prove that there are at most a poly-nomial number of closed periodic subgraphs embeddings in any dynamic network and obtain an exact upper bound on this number. Furthermore, what is surprising is that enu-merating all closed PSEs can be done in time polynomial in the size of the input , proving that the mining problem is in the complexity class P. This is in contrast to the more gen-eral frequent subgraph mining problem, which is NP-hard for enumeration and #P-complete for counting even with unique node labels [5,29]. We take advantage of the intrin-sic polynomial complexity of the problem to design an effi-cient single-pass mining algorithm in Section 5. We do not include jitter in the following analysis, and purely algebraic manipulations are omitted for brevity.
 Theorem 1. P ERIODIC S UBGRAPH M INING in dynamic networks is in P.

To prove Theorem 1, we derive an upper bound on the number of closed PSEs possible in a dynamic network of T timesteps, and then show that they can be enumerated (mined) in polynomial time. We explicitly construct the worst-case dynamic network to count all closed PSEs. In order to do this, we utilize the concept of a projection  X  X  periodic slicing of a discrete time sequence [12]. Definition 8. Given a dynamic network G ,a projection  X  m,p of G is a subsequence of graphs where p is the period of the projection and 0  X  m&lt;p is the phase offset .
 Proposition 1. A subgraph F is periodic at minimum sup-port  X  if and only if it is embedded in  X  consecutive posi-tions of some projection  X  m,p .
 Corollary 1. The maximal common subgraph of every  X  consecutive positions of every projection, if not empty, is a periodic subgraph.

The proof of Proposition 1 follows from the definitions of periodicity and projection. We use its corollary as the basis for constructing the worst-case instance: by placing a different edge in each  X  consecutive positions of every pro-jection of the network, we ensure that each edge becomes a unique periodic subgraph.
 Proposition 2. Given a minimum support  X  , a dynamic net-work G cannot contain more maximal PSEs than one in each  X  -length window of every projection of G . Proof. Consider a dynamic network G with the given prop-erty, i.e. that each  X  -length window of every projection contains a maximal PSE. Clearly, no more maximal PSEs can be created at support  X  , since they would overlap com-pletely with an existing maximal PSE and not increase the total count. PSEs at support less than  X  fall outside the prob-lem definition. Assume then that the number of maximal PSEs can be increased by creating one at support  X  +1 . By the Pigeonhole Principle, such F necessarily overlaps at least two other existing maximal periodic subgraphs at support  X  . Both of those subgraphs now contain F as a subgraph, but are still maximal because each contains an edge exclusive to it. Thus, F is not maximal and G cannot contain any more maximal PSEs.
To explicitly state the upper bound on the number of maximal periodic subgraphs we first compute bounds on several other parameters.
 Proposition 3. In a dynamic network with T timesteps, the maximum period of any periodic subgraph with support at least  X  is P = ( T  X  1) / (  X   X  1) .
 Proposition 4. In a dynamic network with T timesteps, the length of any projection is s = |  X  m,p | = ( T  X  m ) /p .
The proofs of the Propositions 3 and 4 are straightfor-ward and similar to those in [12]. Given the above expres-sions, we now derive an exact bound by construction. Theorem 2. In a dynamic network with T timesteps, there are at most O ( T 2  X   X  1 ) maximal periodic subgraphs at min-imum support  X  .
 Proof. From Proposition 2, we consider each projection  X  m,p independently. The maximal common subgraph, if not empty, of any  X  consecutive timesteps of this projection can constitute a unique maximal periodic subgraph. Let s be the length of the projection defined in Proposition 4. There are therefore at most s  X   X  +1 possible windows of size  X  in any projection, and thus as many maximal periodic subgraphs. Summing this expression over all possible values of m and p , we obtain the following upper bound on the total number of possible maximal periodic subgraphs:
Relaxing the floor and ceiling expressions from Proposi-an expression that is O ( T 2  X   X  1 ) .

We have computed an asymptotic upper bound on the number of maximal periodic subgraphs. We now extend our approach to compute an upper bound on the number of closed periodic subgraphs. In order to do this, we take ad-vantage of Definition 4 to construct a worst-case instance for closed periodic subgraph enumeration by simply adding a new set of maximal subgraphs for each support value greater than or equal to  X  .
 Theorem 3. In a dynamic network with T timesteps, there are at most O ( T 2 ln T  X  ) closed periodic subgraphs at min-imum support  X  .
 Proof. From Definition 4, the number of closed periodic subgraphs is the sum of the number of maximal periodic subgraphs for each level of support  X   X   X   X  T , which we obtain from Theorem 2:
Figure 2. A periodic subgraph (bold) with non-periodic embeddings.
 Relaxing again the floor and ceiling expressions, we ob-tain an expression that is O ( T 2  X  H ( T  X  1  X   X  1 )) , where H proximated by ln n . Thus, the number of closed pe-riodic subgraphs at minimum support  X  is bounded by O ( T 2 ln T
To finally prove Theorem 1, consider an algorithm that outputs the maximal common subgraph of every  X  length window of every projection. Since the maximal common subgraph can be found in time O ( V + E ) [10], the algorithm runs in time  X (( V + E ) T 2 ln T  X  ) and is guaranteed to output every closed periodic subgraph (as well as duplicates, but no non-periodic subgraphs). Thus, the mining problem is in P, and the exact bound on the number of closed PSEs is given in summation form in Theorem 3.
Frequent and periodic pattern mining methods can gen-erate a very large number of small patterns at all but the highest minimum support values. On the other hand, poten-tially significant patterns could occur at lower supports and be lost in the sheer number of such patterns. Thus, while we combinatorially extract periodic patterns, statistical or heuristic ranking schemes for mined patterns are useful for practical applications [6, 16,30]. We therefore propose an additional measure to rank periodic closed subgraphs ac-cording to how perfectly periodic they are.

A periodically recurring subgraph is not necessarily rep-resentative of an interaction pattern that occurs only period-ically, as shown in Figure 2. The purity measure expresses how likely it is that a periodic subgraph embedding occurs only at its periodically predictable timesteps.
 Definition 9. Given a periodic subgraph embedding F with period p , starting at timestep i and with support s | S to its total support in the timestep range [ i, i + p ( s purity ( F )=
It is sometimes advantageous to define the purity of a subgraph as the average purity of its edges. Doing so is more representative of the temporal characteristics of the subgraph as a whole and favors periodic subgraphs whose edges do not occur in between periodic embeddings. We use the term  X  X urity X  to refer to average purity for the remainder of this paper.
 Definition 10. The average purity of a subgraph F = (
V, E ) is the average purity of all of its edges.
We now present an efficient, single-pass, polynomial time and space algorithm for mining all closed periodic sub-graphs in a dynamic network. Our algorithm does not re-quire any parameters to be set but optionally accepts the following: 1. Minimum support threshold  X   X  2 (default: 2). 2. Minimum and maximum period P min and P max (de-3. Maximum jitter in period J  X  0 (default: 0).
Although there is a natural bound on the maximum pe-riod if the number of timesteps T is finite and known a priori , our algorithm is designed for cases when this infor-mation is not available, such as in streaming sensor data. Unrestricted period size in such cases places a very large computational burden on the algorithm as the entire dataset has to be retained. The optional user-defined P max parame-ter limits the maximum period of mined patterns and results in a truly online algorithm.
The foundation of the algorithm is a pattern tree that maintains information about all patterns that are either currently periodic or could become periodic at a future timestep. As each new timestep is read, the pattern tree is traversed and updated with the information. Any patterns that are no longer periodic are flushed, and new periodic patterns are possibly created.

The algorithm maintains two data structures: the pat-tern tree and a subgraph hash map . Each node in the pattern tree contains a subgraph and a descriptor for each closed periodic embedding of the subgraph encountered. Formally, a descriptor for a subgraph F is an ordered pair D = S = S P ( F ) ,p , where S is the periodic support set of the embedding of F and p the period. Let next(D) rep-resent the timestep at which F is next expected, i.e. the last element of the support set plus the period.

The structure of the pattern tree is subject to a single constraint: all descendants of a node F represent proper subgraphs of F , but not all subgraphs of F are necessarily its descendants. This property allows the tree to be built and manipulated quickly and represented using very little space. Since the pattern tree is traversed for each new ob-servation, once a new observation is known not to have any common subgraph with a particular node, all descendants of that node can be eliminated from the tree traversal. Figure 3 shows an example of a pattern tree.

The second component of the algorithm, the subgraph hash map, associates an arbitrary subgraph with its node in the tree, if one exists, in amortized constant lookup time. This is used by the update algorithm, and due to the unique node labels of each graph in the dynamic network, hashing subgraphs is efficient.
 Proposition 5. The time complexity of hashing a periodic subgraph F =( V, E ) of a dynamic network is at most the complexity of hashing a string of length | V | + | E | . Proof. Since V X  N , any given subgraph contains at most one node v = n for any n  X  N . Thus, each edge is uniquely identified by an arbitrary mapping  X  : v 1  X  v 2  X  N . Since no self-loops are allowed in the input, a singleton vertex v can be represented as  X  ( v, v ) . Applying  X  to every edge and singleton vertex in a subgraph maps it to a set of natural numbers, which can be hashed as a string.

To reduce redundancy in mined patterns we introduce the notion of pattern subsumption . For example, a periodic embedding of subgraph F at period 2 with support 5 also contains an embedding at period 4 with support 3, but the latter contains no new information given the former. Thus, the period 2 pattern subsumes the period 4 pattern. Note that subsumption does not strictly fall within Definition 6. Definition 11. Given two descriptors, D 1 = S 1 ,p 1 and D 2 = S 2 ,p 2 , for the same periodic closed subgraph, D 1 subsumes D 2 if S 2  X  S 1 and p 2 = kp 1 for an integer k&gt;
Although the algorithm is designed to operate in a single pass of the data, if the P max parameter is kept unrestricted, the entire dataset will be retained in memory as a subgraph of any timestep might become periodic in the future. With a restricted P max , only the relevant portion of the data will be retained.
We now describe the update algorithm for the pattern tree. Starting with an initially empty pattern tree, at timestep t the algorithm reads the next graph G t from the input stream and traverses the pattern tree to update nodes with the new information. At any point in the execution of the algorithm, a complete list of periodic subgraphs seen so far can be obtained from the tree.
For each G t , we selectively traverse the tree in a breadth-first manner. We end each tree update by ensuring that a node for G t in its entirety exists in the tree with an anchor descriptor for timestep t . This accounts for the possibility that G t is the first occurrence of a periodic subgraph. Dur-ing the breadth-first traversal of the tree, one of the follow-ing three conditions hold at each tree node N 1 : Update descriptors If N G t , then N has appeared in its entirety at timestep t . For all descriptors D ,if next(D) = t , then t is added to the support set. If next(D) &lt;t , then the descriptor is removed from the tree and flushed to the output stream if its support is greater than  X  . Finally, any anchor descriptors at N are used to generate new periodic descriptors if the resultant period p  X  P max .
 Propagate descriptors Let C = N  X  G t =  X  be the non-empty maximal common subgraph of N and G t . A sub-graph C of N is present at timestep t , and if N has any descriptors D such that next(D) = t , then the node for C receives a copy of D if it is not subsumed by an existing descriptor at C . If a node for C does not already exist in the tree (determined using the hash map), it is created as a child of N . Figure 3 illustrates this case. At timestep 5, there is no node for the subgraph F 3 = { (1 , 4) , (1 , 5) } , although one exists for the larger F 1 = { (1 , 2) , (1 , 3) , (1 , However, F 3 has been present at timesteps 1 and 3 as well, so it needs to receive a copy of the descriptor D = S = { 1 , 3 } ,p =2 .
 Dead subtree If C is empty, then G t and N have no com-mon subgraph. Furthermore, no child of N will have any common subgraph with G t either, since they are all sub-graphs of N . The subtree rooted at N is therefore elimi-nated from the rest of the tree traversal.

Figure 3 shows the pattern tree at each timestep during the execution of the algorithm on the network from Fig-ure 1. For brevity, we have described a very basic version of the full algorithm. Clearly, nodes and descriptors ex-pire after a certain amount of time and can be deleted from the tree, improving efficiency. Furthermore, subsumption of redundant descriptors can be performed efficiently while the algorithm is running. The basic outline described here, however, is efficient even without these optimizations.
To output all periodic patterns at any point during the execution of the algorithm, we traverse the tree and print all descriptors D = S, p and their associated subgraphs where | S | X   X  .
There are two types of nodes in the tree: those with only an anchor descriptor, and those with valid periodic descrip-Algorithm 1 U PDATE T REE ( G t ) Require: G t is the graph of timestep t 1: Q  X  new queue 2: push( Q , root.children) 3: while N  X  pop front( Q ) do 5: if C is not empty then 6: if N G t then 8: else 9: W  X  F IND N ODE ( N )orN EW N ODE ( N, C ) 11: end if 12: push( Q , children( N )) 13: end if 14: end while 16: Add anchor descriptor for G t to W . tors. The latter type represent periodic closed subgraphs with support greater than or equal to 2. Since each de-scriptor corresponds to a unique periodic embedding, the number of non-anchor descriptors (and hence the number of such nodes) is bounded by the number of periodic closed subgraphs at  X  =2 ,or O ( T 2 ln T ) . At most one anchor de-scriptor is added per timestep, so the asymptotic bound on the total number of nodes does not change. Since the tree is traversed exactly once per timestep, the overall worst-case time complexity for the algorithm is O (( V + E ) T 3 ln T The maximum period parameter (if set) greatly reduces the time and space complexity of the algorithm.
The jitter heuristic allows the detection of patterns with periods that are  X  X lmost X  constant. For a subgraph with pe-riod p , we allow a distance of p  X  J timesteps between con-secutive occurrences instead of exactly p . In cases where more than one occurrence of a subgraph satisfies this crite-ria, the occurrence that minimizes the time difference from the expected position is chosen. We note that the jitter heuristic does not preserve the theoretic complexity bounds of the algorithm, but is nonetheless efficient in practical cases as we will demonstrate in Section 6.
We use four real-world dynamic social networks to eval-uate our algorithm and the general characteristics of peri-odic subgraphs.
The tested dynamic social networks were collected using a variety of sources and cover a range of social dynamics. Enron E-mails The Enron e-mail corpus is a publicly avail-able database of e-mails sent by and to employees of the now defunct Enron corporation. 2 Timestamps, senders and lists of recipients were extracted from message headers for each e-mail on file. We chose a day as the quantization timestep, with a directed interaction present if at least one e-mail was sent between two individuals on a particular day. Plains Zebra Social interactions of Plains zebra ( Equus burchelli ) in Kenya were recorded by direct observations made by behavioral ecologists from Princeton Univer-sity [13]. The data is made from visual scans of the popula-tions, typically once a day over periods of several months. Each entity is a Plains zebra and the interactions represent association as determined by GPS spatial proximity and the domain knowledge of ecologists.
 Reality Mining Cellphones with proximity tracking tech-nology were distributed to 100 students at the Mas-sachusetts Institute of Technology over the course of an aca-demic year [11]. The timestep quantization was chosen as 4 hours [8].
 IMDB Celebrities The Internet Movie Database (IMDB) 3 maintains a large archive of tagged and dated photographs of individuals associated with the production of commer-cial entertainment, including actors, directors and musi-cians. One might reasonably assert that a degree of social association exists between people photographedtogether by the popular press. Thus, similar to the methodology of the Plains Zebra sightings, we collected metadata on 45,477 photos with two or more people, which collectively repre-sents a partial structure of the social network of people as-sociated with the entertainment industry. The quantization period was one day.
We implemented our algorithm in C++ and ran it on a dual-core AMD Athlon 64 system with 2 GB of RAM Dataset Vertices Timesteps Avg. density Enron 82,614 2,588 0.028  X  0.064 IMDB 15,011 13,967 0.22  X  0.23 Plains Zebra 313 1,276 0.31  X  0.27 Reality Mining 100 2,940 0.23  X  0.17 and Linux kernel 2.6.24. The subgraph hash map was im-plemented using the Google dense_hash_map library 4 , which is optimized for speed over memory usage. For fre-quent closed subgraph mining, we converted the dynamic networks to transactional itemsets using Proposition 5 and used the open-source MAFIA algorithm [7] running on an Intel Xeon quad-core server with 24 GB of RAM and Linux kernel 2.6.22. Since mining frequent subgraphs at low min-imum support is generally intractable, we started at a very high minimum support value and progressively reduced it until either the size of the mined pattern file exceeded 512 MB or the algorithm did not terminate after 5 days. 5
We first ran a series of experiments on our algorithm with  X  =3 and no jitter, i.e. mining only perfectly repeating patterns. We then ran a second set of experiments with  X  = 3 and variable amounts of jitter. For Enron and IMDB, we chose a jitter of  X  2 days so that the resulting 5-day slack window would capture monthly and annual patterns, e.g. those that occur on the first Monday of every month. Since Reality Mining is a relatively dense and heavily periodic dataset, we chose a minimal jitter value of  X  1 timestep, or  X  4 hours. For the Plains Zebra dataset, we chose the jitter to be the average time between consecutive observations.
Table 2 shows the performance of our algorithm and the number of periodic closed subgraphs mined from each dataset. The frequent subgraph mining algorithm took on the order of days to complete even at much higher mini-mum support values than 3. However, since it is inherently an exponential time algorithm, as compared to our poly-nomial time periodic subgraph miner, we do not compare their relative performances. Note that the P max parameter, not the minimum support, is the determining factor in the scalability of the algorithm. We left P max unrestricted, so Table 2 represents worst-case performance in this regard.
We return to our two initial claims: that dynamic so-cial networks have inherent periodicity, and that these pe-riodic interaction patterns can be extracted in an efficient and tractable manner. We also comment on the usefulness of our proposed measure and on the qualitative properties of some interesting mined subgraphs. 6.3.1 Inherent Periodicity Figure 4 shows the distribution of periods of patterns mined from the Enron and IMDB datasets. For Enron, we restrict our attention to patterns with a high average purity, i.e. pat-terns which are likely to capture truly periodic behavior. We note that daily interaction patterns are the most prevalent pe-riodic patterns, followed by weekly patterns as manifested by the clear peak at p =7 . For the IMDB dataset, we no-tice a similar peak at about p = 364 . This can be explained by celebrity sightings at annual events  X  awards shows, for example. Thus, our algorithm captures the inherent peri-odicity in the datasets with no prior knowledge and shows promise as a tool for exploratory analysis. The Plains Zebra dataset showed a wide range of periodicities, as one might expect of animal behavior.
 6.3.2 Tractability Table 2 demonstrates that our algorithm is eminently tractable in terms of execution time and space usage. How-ever, periodic subgraph mining is also tractable in the sense that, unlike frequent subgraph mining, it does not gener-ate an overwhelming number of patterns. Figure 5 shows characteristic examples of the support distribution of fre-quent subgraphs compared to periodic subgraphs. Ignoring the fact that we were unable to mine frequent subgraphs at supports below 25 for Enron and 11 for Plains (which mani-fests in the left-truncated histograms for frequent subgraphs in Figure 5), we can see that periodic subgraphs are much fewer and exist at lower support levels than frequent sub-graphs. Thus, under practical circumstances, the majority of this important class of patterns would be out of reach of frequent subgraph mining algorithms.

Figure 6 shows the size of the pattern tree at each timestep for the Enron and Plains datasets on a logarith-mic scale. It can be seen that the actual tree size is a small fraction of the theoretical upper bound, even when the jitter heuristic is used. Furthermore, limiting the maximum pe-riod of mined patterns has a large impact on reducing the tree size, as expected.

Figure 5. Partial view of support distribution of frequent (gray) and periodic (black) pat-terns. The frequent pattern distribution is left-truncated due to intractability. 6.3.3 Qualitative Analysis We now turn our attention to some qualitatively interesting periodic subgraphs discovered by our algorithm illustrating a range of periodic behavior. Figure 7(a) illustrates a some-what complex pattern from the IMDB photo database that repeated approximately every week. Although the support is relatively low, what is interesting about this subgraph is the repeated non-trivial grouping of people, all of whom turned out to be contestants on a weekly  X  X eality television X  show. Figure 7(b) is also from the IMDB database and is an approximately annually repeating pattern. The three indi-
Figure 6. Number of pattern tree descriptors compared to theoretical bound. viduals in the clique are actresses in a popular (circa 2004) television show, while the fourth node is the spouse (as of 2008) of one of the actresses. Given this context, the low average purity of the pattern is to be expected as the three actresses are very likely to have appeared together in be-tween what are likely to be award shows. The nontrivial links in such patterns are particularly interesting and are indicative of the show X  X  progression or relationships other than co-starring.

The subgraph shown in Figure 7(c) has the highest pe-riodic support in the Enron dataset, repeating every day for 84 consecutive days, including weekends. This is repre-sentative of a large number of similar periodic patterns in Enron, in which one person emails a group of people with periods ranging from 1 to 14 days. As shown earlier in Fig-ure 4, weekly emails seem to be particularly popular in a corporate setting such as this, and could be used to infer functional communities within the corporation.

Finally, we turn to the Plains Zebra dataset and to one of the most intriguing patterns shown in Figure 7(d). Although it is quite likely that the period of 7 days is an artifact of the manner in which the population was sampled, the high pu-rity of the pattern indicates that this is a relatively stable grouping. It is also by far the largest and most repetitive such pattern, parts of which are periodic at other times as well. In contrast, the subgraphs that repeat over multiple months are shown in Figures 7(e) and 7(f). Although the support of the latter two patterns is relatively low, the high purity of Figure 7(f) stands out and is representative of a large number of small but highly periodic patterns. More-over, all the patterns are of interactions of stallion male Ze-bras and correspond to their harems grouping for a period of time. Such groupings are indeed considered more stable for short periods of time than bachelor associations [13].
We have proposed and formalized the periodic subgraph mining problem for dynamic networks and analyzed the
Figure 7. Examples interesting periodic sub-graphs. computational complexity of enumerating all periodic sub-graphs. We have shown that there are at most O ( T 2 ln T closed periodic subgraphs at minimum support  X  in a dy-namic network of T timesteps. Furthermore, we have de-scribed a polynomial time, parameter-free, one-pass algo-rithm to mine all periodic subgraphs, including a  X  X itter X  heuristic for mining subgraphs that are not perfectly peri-odic. We have also proposed a new measure, purity , for ranking mined subgraphs according to how perfectly peri-odic a subgraph is. We have demonstrated our algorithm on four real-world dynamic social networks, spanning in-teractions between corporate executives, college students, wild Zebra, and Hollywood celebrities. Our algorithm effi-ciently mines all periodic patterns, is a provably tractable, and is a meaningful alternative to using frequent subgraph mining to look for interesting patterns in dynamic networks. We have shown that dynamic social networks contain inher-ently periodic non-trivial patterns, and our technique shows promise for exploratory analysis of natural periodicities. We are grateful to Dan Rubenstein, Ilya Fischhoff, and Siva Sundaresan of the Department of Ecology and Evo-lutionary Biology at Princeton University for sharing the Plains Zebra data. Their work was supported by the NSF grants CNS-025214 and IOB-9874523. We thank Kapil Thadani for valuable discussions. This work is supported by NSF grants IIS-0705822 and CAREER IIS-0747369.
