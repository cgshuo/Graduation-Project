 Redescription mining is a newly introduced data mining problem that seeks to  X nd subsets of data that a X ord mul-tiple de X nitions. It can be view ed as a generalization of asso ciation rule mining, from  X nding implications to equiv-alences; as a form of conceptual clustering, where the goal is to iden tify clusters that a X ord dual characterizations; and as a form of constructiv e induction, to build features based on given descriptors that mutually reinforce eac h other. In this pap er, we presen t the use of redescription mining as an im-portan t tool to reason about a collection of sets, esp ecially their overlaps, similarities, and di X erences. We outline algo-rithms to mine all minimal (non-redundan t) redescriptions underlying a dataset using notions of minimal generators of closed itemsets. We also sho w the use of these algorithms in an interactiv e con text, supp orting constrain t-based explo-ration and querying. Speci X cally , we sho wcase a bioinfor-matics application that emp owers the biologist to de X ne a vocabulary of sets underlying a domain of genes and to rea-son about these sets, yielding signi X can t biological insigh t. Categories and Sub ject Descriptors: H.2.8 [Database Managemen t]: Database Applications -Data Mining; I.2.6 [Arti X cial Intelligence]: Learning General Terms: Algorithms.
 Keyw ords: redescription, data mining, minimal genera-tors, closed itemsets.
Redescription mining is a recen tly introduced data min-ing problem [7] that seeks to  X nd subsets of data a X ording multiple de X nitions. The input to redescription mining is a vocabulary of sets (or boolean prop ositions) over a domain and the goal is to construct two distinct expressions from this vocabulary that induce the same subset over the do-main. Besides constituting a new class of patterns, we can think of redescriptions as a useful way to reason about over-laps, similarities, and di X erences in the given vocabulary . Figure 1: An example input to redescription mining.
T o see ho w, consider the four sets sho wn in Fig. 1 o v er ten ob jects (in this case, coun tries). The colors green, red, blue, and y ello w (from b ottom righ t, coun terclo c kwise) refer to the sets `p ermanen t mem b ers of the UN securit y coun-cil,' `coun tries with a history of comm unism,' `coun tries with land area &gt; 3 ; 000 ; 000 square miles,' and `p opular tourist destinations in the Americas (North and South).' W e will refer to suc h sets as descriptors .

Notice that the descriptors of Fig. 1 induce a partition con taining 6 non-empt y blo c ks although, with 10 ob jects, w e could ha v e had up to 10 non-empt y blo c ks. Another w a y to see this de X ciency is from the viewp oin t of the sets: four sets can supp ort 2 4 = 16 di X eren t ob jects but there are only 10 ob jects and ev en these 10 ob jects are not all dis-tinct. F or instance, f Chile, Brazil, Argen tina g are indistin-guishable from eac h other, and so are the mem b ers of f UK, F rance g , f Russia, China g . Empt y blo c ks in a partition are k ey to ho w redescriptions arise in a dataset.

Let us de X ne the b o olean prop ositions G , R , B , and Y (for `green,' `red,' `blue,' and `y ello w') to denote con tainmen t in the ab o v e four sets. Consider the coun tries denoted b y B Y  X  B ^ : Y , i.e., the set of coun tries with land area &gt; 3 ; 000 ; 000 square miles outside of the Americas ( Y and : Y denote the negation of Y ). W e can systematically re-state this expression as follo ws: between B Y (top) and RG (bottom).
 The  X rst step is by marginalizing over the variables R and G , the second step is an application of the distributiv e law, the third step is data-sp eci X c, and gets rid of conjunctions that denote empt y blo cks, the fourth step is again data-speci X c but this time intr oduc es empt y conjunctions, whic h are group ed in the  X fth step, and marginalized out  X nally . We have arriv ed at our  X rst redescription: i.e., `Coun tries with land area &gt; 3 ; 000 ; 000 square miles out-side of the Americas' are the same as `Permanen t mem bers of the UN securit y council who have a history of comm u-nism.' This redescription re-de X nes the set f Russia, China g . A redescription is hence a shift-of-v ocabulary , or a di X eren t way of comm unicating the same information. Redescrip-tion mining can therefore be view ed as a generalization of asso ciation rule mining, from  X nding implications to equiv-alences; as a form of conceptual clustering, where the goal is to iden tify clusters (here, of coun tries) that a X ord dual characterizations; and as a form of constructiv e induction, to build features based on given descriptors that mutually reinforce eac h other.
An intuitiv e way to understand the structure of redescrip-tion space is via a simple game on Karnaugh maps. The leftmost part of Fig. 2 depicts the Karnaugh map for four boolean variables, repro duced in both rows. Eac h cell in the map is a conjunction over four boolean variables. A colored cell indicates a non-empt y blo ck for our example dataset in Fig. 1. For example, the cell ( B Y ; RG ) denotes the blo ck f Russia, China g . We can interpret a map to be the disjunc-tion of all its cells; since the starting maps are the same, they both represen t the same 10 objects and hence consti-tute a trivial redescription, i.e., a tautology . The rules of the game are: 1. A colored cell can be remo ved as long as it is remo ved 2. An uncolored cell can be remo ved from either (or both) Some sample moves are sho wn in Fig. 2. At the end of the game, we read o X  a redescription by relating the disjunctions of cells remaining in both maps: simpli X cation of whic h yields B Y , RG , as before.
The above viewp oint rev eals two imp ortan t insigh ts. First, we can obtain redescriptions for any com bination of the col-ored cells, by just retaining them in both rows of the game. Second, even for a single choice of these sets, there are an exp onen tial num ber of redescriptions, eac h of whic h merely di X ers from another in the choice of uncolored cells that were retained. Interestingly , the form of expressions participat-ing in a redescription follo ws in a very natural way from the subset of colored and uncolored cells that are retained.
In Fig. 2 both maps permit descriptions as conjunctions because we are retaining all cells in a single row or column. Fig. 3 presen ts situations (from di X eren t datasets) with ex-pressions in di X eren t forms. The top left part of the  X gure represen ts a disjunction of all cells in the bottom three rows, or B _ Y . The bottom left part of Fig. 3 represen ts a dis-junction of all cells in the righ tmost two columns, whic h is represen ted quite succinctly as R . These maps hence cap-ture the redescription B _ Y , R . On the other hand, the righ t maps denote the redescription B _ Y , R _ G . The reader can easily design examples where we can neither simplify into conjunctions or disjunctions, and must instead adopt a more general bias, suc h as CNF (conjunctiv e normal form). In this pap er, due to space constrain ts, we restrict the discussion of redescription mining to those relating con-junctions on both sides (possibly involving negations). But the above discussion highligh ts how the framew ork can be extended to mining disjunctions and more general forms. Figure 3: Examples of redescriptions in di X eren t bi-ases. The left maps redescrib e a disjunction (top) to a conjunction (bottom). The righ t maps redescrib e a disjunction (top) into another disjunction (bot-tom).
One reason why we adopt the conjunctions bias is its suit-abilit y for the application con text of geneset exploration in bioinformatics. Here we are given G , a set of genes and D , a set of descriptors (gene subsets). Example descriptors are: `genes localized in cellular compartmen t nucleus,' `genes up-expressed two-fold or more in heat stress,' `genes enco ding for proteins that form the Imm unoglobin complex,' `genes involved in glucose biosyn thesis,' and even `genes targeted by Professor X for further study .' It can be argued that, in the post-sequencing era, bioinformatics is su X ering from an information overload of descriptors, as every scien tist pur-sues a preferred way of iden tifying subsets of genes from the massiv e cardinalit y of the genome. The goal of redescription mining is to connect these div erse vocabularies, by relating set-theoretic constructs formed over the corresp onding de-scriptors. For instance, we migh t  X nd that `genes expressed in the desiccation exp erimen t except those participating in univ ersal stress resp onse' are the same as `genes signi X can tly expressed 2-fold positiv ely or negativ ely in the salt stress ex-perimen t.' The underlying premise is that genesets that can indeed be de X ned in (at least) two ways are likely to exhibit concerted beha vior and are, hence, interesting.

Typically a biologist would like to study gene sets by  X rst iden tifying a focus set of genes and then systematically slic-ing and dissecting the set, to answ er questions suc h as: Because systematic pro jection of elemen ts out of a set in-volves either set intersection or set di X erences, we can ad-dress all of the above questions by mining redescriptions between conjunctions of descriptors.
The astute reader would have noticed the connections be-tween redescription mining and asso ciation rule mining. If we think of objects (e.g., coun tries, genes) as transactions and descriptors (including their negations) as items, then a colored cell in the Karnaugh map corresp onds to a close d itemset from the asso ciation mining literature [11]. This is because eac h cell is minimal in its con ten ts (transactions) but maximal in its use of descriptors (items). In particu-lar, all suc h closed sets will con tain all descriptors, in either negated or non-negated form 1 . A reducible row or column or submatrix of the Karnaugh map with some uncolored as well as colored cells corresp onds to a non-closed itemset. For instance, the disjunction of all four cells in the third row, corresp onding to B Y , can also be represen ted by just the fourth cell, i.e., B Y RG . The com bination of descriptors B Y is hence not closed (and its closure is given by B Y RG ). A row or column or submatrix of the Karnaugh map with only colored cells that is reducible to conjunctiv e form (e.g., the  X rst two columns in the last row of Fig. 2) is also a closed itemset; this will undoubtedly cover more transactions and be describ ed by few er items. With these observ ations, we can e X ectiv ely relate our goal of mining redescriptions in conjunctiv e form to the task of mining closed itemsets (de-scriptor sets) and then obtaining all reducible submatrices of the Karnaugh map (again, restricting our bias to con-junctions) to yield redescriptions. It is interesting that this natural extension of the asso ciation rule framew ork (from implications to equiv alences) has not been studied before (The reader should keep in mind that the Karnaugh map metaphor is used in this pap er primarily as a conceptual tool to understand redescription spaces and that our algo-rithms do not explicitly reason with cells of the Karnaugh map, as outlined here.)
We hasten to add that suc h a generalization of the asso-ciation rule framew ork is not as easy as it app ears. First, the datasets for redescription mining are highly dense. Since eac h gene participates in either a descriptor or its negation, the datasets are exactly 50% sparse. Studying redescrip-tions within this con text poses a unique set of challenging problems. One of our con tributions is that we explain how we can curtail the complexit y by adopting a constrain t-based approac h where we study the lattice of closed descriptor sets only around genes or descriptors of interest.

Our second con tribution is a precise theoretical form u-lation for a basis for all redescriptions using the notion of minimal generators of closed descriptor sets. We form ulate three classes of redescriptions: (i) exact, (ii) conditional, and (iii) appro ximate. They di X er from the viewp oint of 1 Throughout this paragraph, it is imp ortan t to remem ber that both the given descriptors and their negations consti-tute the items; without the negations, the analogies in this paragraph will not hold. Jaccard's coe X cien t. The Jaccard's coe X cien t J between two sets X and Y is the ratio of the size of their intersection tion has J = 1. An appro ximate redescription has J &lt; 1. Notice that this can happ en when either X or Y is a sub-set of the other and also when the two sets straddle, i.e., X  X  Y 6 = fg 6 = Y  X  X . A conditional redescription can be view ed as originating as an appro ximate redescription but whic h has been transformed into an exact redescription by supplying further information. For instance, the redescrip-tion X , Y could have J &lt; 1 but X \ Z , Y \ Z migh t hold at J = 1. In other words, conditional on Z , X and Y can be redescrib ed into eac h other. We write suc h redescrip-tions as X , Y j Z . Note that appro ximate redescriptions corresp ond to the minimal non-redundan t exact or inexact rules describ ed in [11], and thus we focus in this pap er only on exact and conditional redescriptions.

Finally , the algorithmic approac h prop osed here also dif-fers signi X can tly from CAR Twheels, an alternating algo-rithm for mining redescriptions presen ted in [7]. For in-stance, these two algorithms emplo y di X eren t biases: CAR T-wheels uses a disjunction of conjunctions bias, with length restrictions on the size of the expression (determined by the size of the CAR Ts used in the alternation), whereas our ap-proac h uses only a conjunctions bias (for this reason, it is not possible to compare the results of the two algorithms). More imp ortan tly, CAR Twheels's stochastic searc h policy can mine all redescriptions in a dataset only at the exp ense of redundancy (i.e., revisiting some redescriptions again and again). It is hence not suited for interactiv e and resp onsiv e analysis of very large-scale datasets. Our prop osed frame-work overcomes these dra wbac ks; we sho wcase its applica-tion to studying the transcriptome of the yeast S. cerevisiae with public-domain datasets (tak en from [7]).
Let D = f d 1 ; d 2 ; : : : ; d n g be a set of binary-v alued at-tributes or descriptors , and let G = f g 1 ; g 2 ; : : : ; g set of genes. Without loss of generalit y, we assume that, discoun ting iden tical genes, m &lt; 2 n (if m = 2 n there can be no redescriptions, since all cells are colored; m cannot be greater than 2 n since n descriptors can only a X ord that much variabilit y). A dataset S is then a subset of G  X  2 (note that 2 D denotes the power-set of D , i.e., the set of all subsets of D ); in other words, the dataset S is a set of tuples of the form ( g; X ), where g 2 G is a gene, and X  X  D a set of descriptors describing the given gene g . As men tioned in the introduction, the descriptors can be de X ned over man y vocabularies, suc h as gene expression, functional categoriza-tion. A subset of genes G  X  G is also called a geneset , and a subset of descriptors X  X  D is also called a dset . For example, consider the dataset sho wn in Table 1. Here we have six genes and sev en descriptors; gene g 1 participates in set notation for con venience and instead represen t the de-scriptors as a conjunction of boolean prop ositions as sho wn in Table 1.

For a dset X  X  D , we denote its corresp onding geneset as g ( X ), i.e., the set of all genes describ ed by X . For a geneset Y , we denote its corresp onding dset as d ( Y ), i.e., the set of descriptors common to all the genes in Y . The comp osi-tion of the two functions, namely , g that maps from dsets to genesets, and d that maps from genesets to dsets, is called a closur e operator [3], given as c ( X ) = d ( g ( X )). A dset X is said to be close d if and only if (i X ) c ( X ) = X [3, 11]. In other words, dset X must be a  X xed point of the closure op-erator. For instance, X = d 1 d 5 is not closed since c ( d d ( g ( d 1 d 5 )) = d ( g 1 g 3 g 4 g 5 ) = d 1 d 2 d 5 d d d 2 d 5 d 6 is closed since c ( d 1 d 2 d 5 d 6 ) = d ( g ( d there exists no prop er sup erset Y  X  X with g ( X ) = g ( Y ). Note that a dset X is said to be frequen t i X  its corresp ond-ing geneset has enough cardinalit y, i.e., i X  j g ( X ) j  X  minsup , where minsup is some user speci X ed threshold.

Let X be a closed dset. We say that a dset Y is a gener ator of X i X  1) Y  X  X , and 2) g ( Y ) = g ( X ). Equiv alen tly, Y is a gener ator of X if c ( Y ) = X . Y is called a proper generator i X  Y  X  X . A prop er generator cannot be closed, since by de X nition, no closed subset of X can have the same geneset as X . We say that Y  X  X is a minimal generator [1] of X i X  Y is a prop er generator of X , and there does not exist another prop er generator Z  X  Y of X .

Note that a closed dset X maximal ly describ es its corre-sponding geneset G = g ( X ), i.e., X represen ts the maximal set of descriptors describing the maximal set of genes G ; no other descriptor can be added to X to describ e the same geneset G , and no other gene can be added to G without changing the dset X (i.e., without remo ving some descrip-tors from X ). As men tioned before, in Fig. 2 this corre-sponds to colored cells and clusters of colored cells that are reducible (into a conjunctiv e form). On the other hand, a minimal generator of X , say Y , minimal ly describ es the same geneset G , since by de X nition g ( X ) = G = g ( Y ), and since Y is minimal, no descriptor can be remo ved from Y , and yet describ e the same geneset G . In Karnaugh map terminology , a minimal generator is a submatrix con taining both colored and uncolored cells that can be simpli X ed to a conjunction represen ting only the colored cells.

Figure 4 sho ws all the 10 closed dsets along with their genesets and their minimal generators, for our example dataset, arranged in a lattice (i.e., a link exists between two closed dsets X and Y i X  there does not exist another closed dset Z suc h that X  X  Z  X  Y ). For example the dset X = d d 2 d 4 d 5 d 6 maximally describ es the geneset G = g 1 g and its minimal generators are, Y 1 = d 1 d 4 , Y 2 = d 4 Y
Definition 2.1. Let X; Y; Z  X  D be dsets, and let G  X  G be a geneset. A conditional redescription for a geneset G is a rule of the form G : ( X ( ) Y ) j Z , such that i) X 6 = ; and Y 6 = ; , ii) X \ Y = X \ Z = Y \ Z = ; , iii) g ( X [ Z ) = g ( Y [ Z ) = G . Her e the dset Z is called the condition . The rule means that the dsets X and Y are equivalent or describ e the same geneset G given dset Z . If Z = ; , then the rule is simply an (unc onditional) redescription for geneset G ; in this case we get the simpler conditions: i) X 6 = ; and Y 6 = ; , ii) X \ Y = ; and iii) g ( X ) = g ( Y ) = G . Figure 4: Closed dsets, genesets, and minimal gen-erators.
 Definition 2.2. Let X; Y; Z  X  D and let G  X  G G : X ( ) Y j Z is a minimal (conditional) redescription for geneset G i X  ther e does not exist another redescription of the same geneset G G : X 0 ( ) Y 0 j Z 0 , such that Z  X  Z and X 0  X  X and Y 0  X  Y . A minimal redescription is also called a non-redundan t redescription.
 In other words a non-redundan t redescription describ es a (maximal) geneset using a minimal num ber of descriptors. Table 2 sho ws all the non-redundan t redescriptions for the given genesets in our example database. Those genesets not sho wn, have no redescriptions. For example, there are no redescriptions involving the geneset G = g 5 g 6 . It is mini-mally describ ed by the dset Y = d 3 d 4 , whic h is a minimal generator of the maximal descriptor set (i.e., closed) d 2 for G .
We now turn to e X cien t algorithms for mining the set of all non-redundan t redescriptions. The pro cess requires three main steps: 1) mining the lattice of closed dsets from a given dataset, 2) computing the minimal generators of the closed dsets, and 3) non-redundan t redescription mining from the minimal generators. We detail eac h step below.
To generate the minimal redescriptions, we need to con-struct the lattice of dsets. However, curren t closed set min-ing algorithms suc h as Closet+ [9], Ma X a [2], and Charm [12] do not output the lattice explicitly; their output is simply a list of all the closed sets found. It is possible to generate the lattice from a collection of closed sets C , but unfortunately , lattice construction has time complexit y O ( jC j 2 ) [5], whic h is too slow for a large num ber of closed dsets.

We decided to extend Charm to directly compute the lat-tice while it generates the closed dsets. The basic idea is that when a new closed set X is found, we e X cien tly determine all its possible closed sup ersets, P = f Y j Y 2 C ^ X  X  Y g . The minimal elemen ts in P form the \immediate" sup ersets or paren ts of X in the closed dset lattice. This approac h leads to a very e X cien t algorithm, whic h we call CHARM-L [13]. CHARM-L ( S  X  G  X  2 D ): 1. [ ; ] = f d i : d i 2 D g 2. Charm-L-Extend ([ ; ], L r = f;g ) 3. return L //lattice of closed sets Charm-L-Extend ([ P ], L c ): 4. for eac h X i in [ P ] with increasing j g ( X i ) j 5. [ X i ] = ; 6. Upd ate-C ( X i , [ P ]) 7. for eac h X j &gt; X i in [ P ] 8. X = X i [ X j , g ( X ) = g ( X i ) \ g ( X j ) and 9. Charm-L-Pr oper ty ( X; X i ; X j ) 10. L n = Subsumption-Check-La ttice-Gen ( L c ; X i ; C ( X 11. Charm-L-Extend ([ X i ], L n ) 12. delete [ X i ]
Figure 5 gives the pseudo-co de for CHARM-L (see [13] for full details). Let L denote the closed dset lattice, and L r the root node of the lattice; we assume that L r = ; . CHARM-L groups all dsets with pre X x P , in an equiv alence class, denoted [ P ]. CHARM-L starts by initializing the pre X x class [ ; ] with the individual descriptors (line 1). It then mak es a call to the extension subroutine, passing it the paren t equiv alence class and the lattice root as the curren t lattice node.
 Charm-L-Extend tak es as input the curren t lattice node L c (initially the root node), and an equiv alence class [ P ]. For eac h dset X i 2 [ P ] (line 4), we com bine it with other dsets X j &gt; X i in [ P ] (line 7) to form a longer dset. The routine Charm-L-Pr oper ty tests inserts the newly created dset X = X i [ X j in the new class [ X i ]. It also tests if two closed set prop erties are satis X ed: 1) if g ( X i )  X  g ( X we can replace the dset X i with the larger dset X i [ X j since whenev er X i describ es a geneset, it also involves the descriptors in X j , and 2) if g ( X i )  X  g ( X j ) then we replace X j with X j [ X i for the same reason (see [12] for more details). These prop erties allo w CHARM-L to e X cien tly prune the searc h tree. The routine Subsumption-Check-Lattice-Gen chec ks if the new pre X x X i is a closed set and if so inserts it into the closed dset lattice.

Whenev er CHARM-L generates a new closed dset it as-signs it a unique closed dset iden ti X er, called cid , and it main tains for eac h elemen t X i 2 [ P ] its corresp onding cid-set , denoted C ( X i ), whic h is the set of all cids of already mined closed dsets that are sup ersets of X i . Giv en C ( X and C ( X j ), one can obtain the set of closed dsets that con-tain X = X i [ X j by simply intersecting the two cidsets, i.e., C ( X ) = C ( X i ) \ C ( X j ) (line 8). Subsumption-Check-Lattice-Gen enumerates all closed sets whic h are not sub-sumed (i.e., do not have the same geneset as some sup er-set), but in addition, it also generates a new lattice node L for the new closed set X i , and inserts it in the appropriate place in the closed dset lattice L . This new lattice node L becomes the curren t node in the next recursiv e call of the extension subroutine (line 11). Since the list of closed sup er-sets of X i may change whenev er a new closed dset is added to the lattice, a chec k is made in line 6 to update C ( X eac h remaining elemen t in the class.
 Figure 6: Subsumption Chec king &amp; Lattice Gro wth. Subsumption Chec k and Lattice Generation: To chec k if a dset X i is closed (Figure 5, line 10), we apply Subsumption-Check-La ttice-Gen sho wn in Figure 6. This routine tak es as input the curren t lattice node L c , the new dset X , and the cidset C ( X ). The  X rst task is to chec k if X is subsumed. For this we consider all closed dsets P that are sup ersets of X (line 1). If X has the same geneset ( j g ( X ) j ) cardinalit y as any of its sup ersets Z 2 P (lines 2), then X is subsumed (this is true, since for X  X  Z , g ( X ) = g ( Z ) ( ) j g ( X ) j = j g ( Z ) j ) and we return (line 3). Otherwise, the new lattice node is initialized as L n = X (line 4). Eac h node in the lat-tice main tains a list of paren ts (immediate sup ersets) and children (immediate subsets). We add the new node L n as a paren t of the curren t node L c , and L c as child of L 5). Out of all the closed sup ersets of L n = X , the minimal sup ersets are found P min (line 6). Eac h minimal sup erset Z 2 P min becomes a paren t of L n (and L n a child of Z ) (line 8). Finally , for every child Z c of Z , if Z c  X  L paren t pointers have to be adjusted; we remo ve Z from Z paren ts (and Z c from Z 's children) (lines 9-10). Finally , we return the new lattice node L n (line 12).
 Up dating C : Consider the Upd ate-C routine in CHARM-L (Figure 5, line 6). After the recursiv e call to Charm-L-Extend (Figure 5, line 11), new closed sets may have been generated, so we need to update the cidsets for all remaining elemen ts in class [ P ]. That is for all dsets X j 2 [ P ], with X j  X  X i , Upd ate-C adds the cids of all newly generated closed sets to C ( X j ).
Once the set of all closed dsets, C , for a given dataset has been found using CHARM-L , the next step is to generate the set of minimal generators, M ( X ), for eac h dset X 2 C . Note that a minimal generator Z of a closed dset X is a minimal dset that is a subset of X , but not a subset of any of X 's immediate closed subsets in the closed dset lattice L . Let Y = f Y 1 ; Y 2 ;  X   X   X  ; Y k g be the set of immediate closed subsets of X in L , and let M ( Y i ) be the set of minimal generators of dset Y i . Further de X ne the dset  X  i = X  X  Y to be those elemen ts in X that are not in Y i , and let  X  = f  X  1 ;  X  2 ;  X   X   X  ;  X  k g . A dset Z is called a hitting set of  X  i X  Z \  X  i 6 = ; for all i 2 [1 ; k ]. A dset Z is called a minimal hitting set if there does not exist another hitting set Z that Z 0  X  Z .

Theorem 3.1. Given dset X , the set of minimal gener a-tors of X , namely M ( X ) is the same as the set of minimal hitting sets of  X  .
 A similar theorem was indep enden tly rep orted in [6]. // X is a closed dset, // Y , the set of adjacen t closed subsets of X in L
MinimalGenerators ( X; Y ): 1. H ( X ) = ; ; 2.  X  = f  X  i = X  X  Y i j Y i 2 Y g ; 3. for eac h k -tuple ( z 1 ; z 2 ;  X   X   X  ; z k ), with z 4. Z = f z 1 ; z 2 ;  X   X   X  ; z k g ; //remo ves duplicate z 5. H ( X ) = H ( X ) [ f Z g ; 6. M ( X ) = f Z 2 H ( X ) j Z is minimal in H ( X ) g ;
Our novel algorithm to  X nd minimal generators is sho wn in Figure 7, and is based on the above theorem. Giv en closed set X and the set Y of its immediate closed sub-sets (say jY j = k ), we  X rst determine the set of di X erences  X  (line 2). Next we construct eac h possible k -tuple of the form ( z 1 ; z 2 ;  X   X   X  ; z k ) by picking exactly one descriptor from eac h di X erence, i.e., z i 2  X  i (line 3). Let Z be the set con-structed from this k -tuple, i.e., Z = f z 1 ; z 2 ;  X   X   X  ; z Whereas the k -tuple may have duplicate items, Z will, by set de X nition, remo ve any duplicate elemen ts. By construc-tion, it is clear that Z is a hitting set for  X . All suc h hitting sets are added to a set M ( X ) (line 5), and  X nally only the minimal dsets in M ( X ) are added to M ( X ) (line 6), whic h thus con tains all minimal hitting sets of  X , whic h are also the minimal generators of X .

For example, consider the dset X = d 1 d 2 d 5 d 6 . As sho wn in Figure 4, it has only one immediate closed subset Y 1 = f d 2 ; d 5 g . Thus  X  1 = d 1 d 6 . In line 6, eac h elemen t in  X  will be picked in turn and added to H ( X ), and since a single elemen t is minimal, we have M ( X ) = f d 1 ; d 6 g , as sho wn in Figure 4. For the dset X = d 1 d 2 d 3 d 4 d 5 d 6 d 7 , with imme-diate subsets Y = f d 2 d 3 d 4 ; d 1 d 2 d 3 d 5 d 6 d 7 one elemen t from eac h  X  1 we get the hitting sets H ( X ) = f d The minimal sets in H ( X ) are given as M ( X ) = f d 1 d d d 4 d 5 ; d 3 d 4 d 6 ; d 4 d 7 g whic h are the minimal generators for X . Figure 4 sho ws the minimal generators for all closed dsets. Figure 8: Non-redundan t Redescription Generation. Let C be the set of all closed dsets. Giv en any closed dsets X 2 C and its corresp onding geneset G = g ( X ), as well as the set of minimal generators of X , given as M ( X ) = f Y j Y is a minimal generator of X g , Figure 8 sho ws the al-gorithm for generating minimal/non-redundan t (conditional) redescriptions. For eac h distinct pair Y; Z 2 M ( X ), we gen-erate the rule G : Y  X  Q ( ) Z  X  Q j Q , where Q = Y \ Z is the condition dset. Since we use minimal generators to pro duce the rule, we can guaran tee that the rule is minimal.
For example, consider the closed dset X = d 1 d 2 d 5 d 6 geneset G = g ( X ) = g 1 g 3 g 4 g 5 and minimal generators M = f d 1 ; d 6 g , as sho wn in Figure 4. The only possible (un-conditional) redescription is G : d 1 ( ) d 6 , as sho wn in Table 2. For the closed dset X = d 1 d 2 d 4 d 5 d 6 , with geneset G = g ( X ) = g 1 g 3 g 5 , and minimal generator set redescriptions: G : d 1 ( ) d 5 j d 4 ; d 5 ( ) d 6 j d 4 d j d 4 . All other redescriptions sho wn in Table 2 are obtained in a similar manner. Note that an unconditional redescrip-tion is found for any disjoin t pair of minimal generators, whereas a conditional redescription is found for any non-disjoin t pair of minimal generators.
 Observ e that (exact) redescriptions alw ays occur in pairs. When X , Y holds, so does : X , : Y . Due to our sup-port threshold minsup , however, we may not mine both forms explicitly . Even if both forms conform to the sup-port threshold, recall that we mine only those redescriptions where both sides obey the conjunctions bias; so if X or Y is a conjunction of more than one descriptor, its negation would be a disjunction, and hence outside the purview of our bias.
As describ ed above, our metho ds are oblivious of the mean-ing of a descriptor, i.e., the mining pro cess is not aware whic h of them are `positiv e' and whic h are negated. In gen-eral a large num ber of negated descriptors leads to a com-binatorial blowup in the num ber of closed dsets. To mak e mining tractable we introduce sev eral constrain ts. The  X rst constrain t enforces the presence of certain descriptors in the mined redescriptions. The input is in the form of a set of constrain t C i speci X es those descriptors that must all be presen t in a redescription. Eac h redescripion output must satisfy at least one constrain t C i . Thus the set of constrain ts are treated as a disjunction over conjunctions of descrip-tors. We e X cien tly chec k eac h constrain t during mining. In the CHARM-L pseudo-co de sho wn in Figure 5, we do the follo wing test on eac h pre X x class [ P ] (before line 4). Let U = S i X i 2 [ P ], then it su X ces to chec k if U is a sup er-set of at least one constrain t C j . If not, U cannot possibly satisfy any constrain t and thus we can discard the entire searc h tree under [ P ]. This leads to very e X ectiv e pruning. Another chec k of the constrain ts is made before adding a new closed set to the lattice.

We also introduce a constrain t on the genesets. As in the case of dsets, the input is in the form of sets over G and the meaning is similar. The chec k of these gene constrain ts are also done e X ectiv ely while mining as follo ws: whenev er we obtain a new geneset g ( X ) in Fig. 5 (line 4), we keep trac k of the genes not in the intersection. If at least one constrain t C i remains una X ected, the new dset is kept for the next step, or else it is pruned.

We also implemen ted the abilit y to imp ose a length con-strain t on the mined closed dsets. To implemen t this, it is not correct to simply stop extending a dset if its length exceeds some threshold, since this would most likely pro-duce a non-closed set, leading to wrong minimal generators. The correct way is to imp ose the length constrain t on the minimal generators! Note that every minimal generator will be visited by the CHARM-L algorithm while computing closed sets. So while we nev er pro duce a minimal generator with length exceeding the constrain t, a closed dsets migh t be longer. This ensures that the set of dsets with the length constrain t are a subset of those without the constrain t.
Finally , we have dev elop ed an interactiv e language, us-ing MA TLAB style scripting capabilities, to supp ort the ex-ploration of genesets through redescription analysis. The language con tains primitiv es to de X ne subsets of genes and descriptors, to request that a redescription be attempted for a selected set of genes (or involving those induced by a selected set of descriptors), to imp ose constrain ts on the mining pro cess, manage the resulting mined redescriptions, and to investigate how the space of possible answ ers changes with varying inputs. The next section con tains running ex-amples of how a bioinformatician would use this language.
We now presen t an application of redescription mining to studying gene expression datasets from microarra y exp eri-men ts conducted on the budding yeast Sac char omyc es cere-visiae . We utilize the three datasets from [7] (see Table 3) to study the scalabilit y and performance of our implemen ta-tions. The biological results are explained and detailed with speci X c reference to one of them, namely G1.

The speci X c details of the datasets can be had from [7] but we brie X  X  review their characteristics here. All datasets de X ne a small set of yeast genes (NumGenes in Table 3) but relativ ely greater num ber of descriptors (NumDesc). The average num ber of descriptors per dataset is also high (Avg-Size). The descriptors are dra wn a variet y of sources. Some denote expression levels in speci X c microarra y measuremen ts tak en from Gasc h et al. [4] and Wyric k et al. [10]. For instance, `genes negativ ely expressed one-fold or below in the 15 min ute time point of the 1M sorbitol exp erimen t' is one suc h descriptor. A second class of descriptors asserts mem bership of genes in targeted taxonomic categories of the Gene Ontology (biological pro cesses (GO BIO), cellular comp onen ts (GO CEL) or molecular functions (GO MOL)). A  X nal class of descriptors is based on clustering time course datasets using a k-means clustering algorithm [8] and using the clusters as descriptors. All descriptors are given an iden-ti X er as well as mnemonic for ease of interpretation.
We now presen t two interactiv e scenarios of how a biol-ogist will use our algorithms, with the G1 dataset, as well as one example of a cluster of genes dense in conceptual de-scriptor space. For the results presen ted in this section, we negated eac h of the 824 descriptors in the G1 dataset and added it bac k to the descriptor pool, so that the algorithm can be used to mine set di X erences in addition to intersec-tions. This yields a 74  X  1648 input boolean matrix. Recall that, by construction, suc h a dataset will be exactly 50% sparse. Figure 9: Interactiv e exploration of genesets using redescription analysis.
The  X rst scenario is depicted in Fig. 9 and illustrates a biologist who explores descriptors around his favorite gene | YOR374W, an ORF in S. cerevisiae that enco des for an aldeh yde deh ydrogenase (an enzyme -E.C.1.2.1.5 -that cat-alyzes the reaction from f aldeh yde, NAD+, H 2 0 g to f acid, NADH g ), and whic h he kno ws to be very highly expressed in time point 20 min utes of the Gasc h heat sho ck condition (more than  X ve fold). Aldeh yde deh ydrogenase is imp ortan t enzymatically because the system must obtain increased en-ergy from acetaldeh yde under stren uous gro wth conditions. The biologist begins the analysis by iden tifying the descrip-tors that Y0R374W participates in. One of them is descrip-tor d184 that denotes all ORFs that are expressed more than  X ve fold in the above time point; it con tains 19 genes. Looking at the nearb y time point (15 min utes) the biologist notices that the corresp onding descriptor (d183) con tains 21 genes, with 18 in common with d184. The Jaccard's coe X -cien t between these descriptors is already high (0.857) but the biologist is curious to determine if there could be an ex-act redescription by using the GO vocabularies. This migh t be signi X can t if physiologically some resp onse/repair could be asso ciated with the transition between the time points. He adds the GO molecular function taxonom y into the ses-sion but the Jaccard's coe X cien t doesn't impro ve. Then, he remo ves the GO molecular function taxonom y and adds the cellular comp onen t taxonom y and the biological pro cess taxonom y, in turn. None of the three choices impro ves the qualit y of the redescription. Finally , he adds all three tax-onomies sim ultaneously , and the system presen ts him with a perfect redescription: (In Fig. 9 note that the set subtractions represen ted as con-junctions of negated descriptors; in this con vention, sub-traction of descriptor d 388 is captured as conjunction of de-scriptor d 1212, whose index is 824 plus the original d 388): In other words, to mak e d183 equiv alen t to d184, we need to subtract descriptors d388, d460, and d515 on the left (to re-move 3 genes) and subtract descriptor d309 on the righ t (to remo ve 1 gene), bringing the commonalit y to 18, as desired. As Fig. 9 explains, d388 refers to the GO molecular function category: mannose transp orter, d460 refers to the GO cellu-lar comp onen t category: external protectiv e structure, and d515 refers to the GO biological pro cess category: fructose metab olism. d309, on the righ t side, inciden tally happ ens to refer to genes whose molecular function, according to GO, is unkno wn. The implied message, from the above redescrip-tion, is that as we go from time point 15 min utes to time point 20 min utes genes belonging to the above three cate-gories drop out of the highly expressed (  X  5 fold) category .
The above example sho wed how we can relate two dif-feren t time points but the task is relativ ely easy given the high degree of initial overlap between the sets. Let us add more complexit y to the mix and, this time, relate not only a di X eren t time point but also a less stringen t threshold. One suc h descriptor is d141 whic h is the set of genes ex-pressed more than (just) two fold in the 10 min utes time point (not 20 min utes, as in descriptor d184). Since d141 con tains 50 genes, it cannot enjo y a Jaccard's coe X cien t of more than 0.38 with descriptor d184. This time, the system is con X gured to use all available descriptors. It arriv es at 34 redescriptions involving d141 as well as d184, but all of them are expressed conditionally; example: Recall that d515 refers to the fructose metab olism category , but it cannot possibly help in impro ving the Jaccard's co-e X cien t as it remo ves only one gene from d141. Descriptor d608, on the other hand, refers to the set of genes expressed four-fold or above in a di X eren t exp erimen t (histone deple-tion). In other words, to go from genes expressed 2-fold or above to genes expressed 5-fold or above (across time points), we have to remo ve the genes asso ciated with fruc-tose metab olism and that have relativ ely high positiv e ex-pression in histone depletion. The conditional descriptor d183 can be view ed as a further conjunct on both sides, but since it already has signi X can t overlap with d183, has only an incremen tal `trimming' role to o X er (e.g., the remo val of few genes from both sides). The implied message from this redescription is that the genes that are only mo derately expressed (between 2-and 5-fold) in the heat sho ck time points are those that are highly expressed in the histone de-pletion time point. Further insp ection of the 34 redescrip-tions mined above rev eals that all of them con tain the only other aldeh yde deh ydrogenase represen ted in the dataset -YMR170C (NAD(P)+). This brings out the abilit y of re-description mining to bring concerted genes together.
If we view closed itemsets as biclusters then it is of in-terest to determine dense conceptual clusters underlying a given set of constrain ts. We restricted our atten tion to a set of genes clustered together in a k-means descriptor (d77; HS2 KMC 01) for the Heat Sho ck exp erimen t. When queried for all redescriptions (at J = 1 and a minim um supp ort threshold of 13) that involve this descriptor, we ob-tained 867 redescriptions! Recall that the total num ber of input descriptors is less than double of this num ber. On closer insp ection, we noticed that all these redescriptions comprised only 98 descriptors and all were conditional re-descriptions, with an almost ma jorit y having d 77 as the con-ditional. Hence, this means that, coupled with d 77, man y of these descriptors forms a minim um generator of the closure of d 77. Sometimes, two or more of these descriptors need to be conjoined in order to form the minim um generator. Thus these descriptors, together with the genes they cover (14 of them, out of the total 74) form a dense bicluster in the dataset.
We ran some more exp erimen ts to test the performance of our approac h. Here we only consider `positiv e' descriptors, since the whole set of descriptors (including negativ e ones) can only be mined using constrain ts. For example, if all descriptors are used, then the average size would be the same as NumDesc, for eac h dataset. Our exp erimen ts were run on a 3.2Ghz Pentium4 mac hine with 2GB of memory running Lin ux, with a 7200rpms 200GB IDE disk.

Figure 10 sho ws the running time for the various steps in mining redescriptions, as well as the rule cardinalities for the di X eren t datasets as a function of minim um supp ort threshold. The left column sho ws the time, where the leg-ends `Total' means the total execution time for the entire algorithm, `Lattice' means the time it tak es to build the fre-quen t closed dset lattice, 'Mingen' means the time it tak es to generate the minimal generators for eac h closed dset, and `Rules' means the time it tak es to extract the self and con-ditional redescriptions. The middle column sho ws the car-dinalities, where the legends `Closed' means the num ber of frequen t closed dsets mined, `Exact' means the num ber of exact redescriptions and `Cond' means the num ber of con-ditional redescriptions mined. The righ t column sho ws the longest closed dset found at a given supp ort threshold.
We can observ e that for the G1 and G2 datasets most of the time is spent in mining the closed dsets and constructing the lattice, whereas the minimal generator time is lower and rule generation time is even lower. However, as we decrease minim um supp ort, more closed dsets are found and there is an increase in the num ber of exact redescriptions. At the same time there is an even bigger explosion in the num ber of conditional rules. This leads to an increase in the running time for rule generation. Notice also that for G1 and G2 the longest closed set has size 40. For G3, the e X ect is even more pronounced. We  X nd that the num ber of exact and conditional rules increases dramatically , and thus the rule generation time dominates. The times for closed dset min-ing, lattice generation, and minimal generators is negligible. The longest dset mined for G3 has length 50!
We have demonstrated a formal approac h to redescription mining, along with examples of how a biologist would use suc h a facilit y interactiv ely. As biologists are emp owered to create their own vocabularies and descriptors and reason with them, there will be greater understanding of large scale bioinformatics datasets.

In future work, we plan to increase the expressiv eness of our form ulation in man y ways. First, we would like to re-describ e not just in a prop ositional logic, as describ ed here, but emplo ying a form of predicate logic. An example from bioinformatics would be the use of a homology relation to relate, for instance, descriptors from a yeast vocabulary to descriptors in a vocabulary designed for mouse genes. This is a natural generalization of the type of redescriptions con-sidered here. Second, we would like to create chains of (ap-pro ximate) redescriptions, e X ectiv ely forming a story from one gene set to another. Giv en two disjoin t sets, for in-stance, even though there could be no redescription connect-ing them, there could be a chain of appro ximate redescrip-tions going from one to the other. Finally , we would like to use redescriptions as a basis for kno wledge managemen t in domains rich in descriptors. Towards this goal, we aim to extend the expressiv eness of our mining algorithms towards other classes of expressions suc h as disjunctions, and also more generalit y, e.g., CNF or DNF.
 Zaki's work was supp orted in part by NSF CAREER Aw ard IIS-0092978, DOE Career Aw ard DE-F G02-02ER25538, NSF gran t EIA-0103708, and NSF gran t EMT-0432098. Ramakr-ishnan's work was supp orted in part by NSF gran ts IBN-0219332 and EIA-0103660. We ackno wledge the help of Deept Kumar, who furnished us with the datasets from [7] and Laxmi Parida, for useful discussions.
