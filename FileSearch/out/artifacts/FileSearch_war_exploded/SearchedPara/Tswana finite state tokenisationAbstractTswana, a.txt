 Abstract Tswana, a Bantu language in the Sotho group, is characterised by an agglutinative morphology and a disjunctive orthography, which mainly affects the verb category. In particular, verbal prefixes are usually written disjunctively, while suffixes follow a conjunctive writing style. Therefore, Tswana tokenisation cannot be based solely on whitespace, as is the case in many alphabetic, segmented lan-guages, including the conjunctively written Nguni group of South African Bantu languages. This paper shows how a combination of two finite state tokeniser transducers and a finite state morphological analyser are combined to solve the Tswana (verb) tokenisation problem. The approach has the important advantage of bringing the processing of Tswana, beyond the morphological analysis level, in line with what is appropriate for the Nguni languages. This means that the challenge of the disjunctive orthography is met at the tokenisation/morphological analysis level and does not in principle propagate to subsequent levels of analysis such as POS tagging and shallow parsing, etc. The tokenisation approach is novel and, when implemented and evaluated, yields an F 1 -score of 95 % with respect to a hand tokenised gold standard.
 Keywords Finite state computational morphology Tswana Disjunctive orthography Tokenisation Verb morphology 1 Introduction Words, syntactic groups, clauses, sentences, paragraphs, etc. usually form the basis of the analysis and processing of natural language text. However, texts in electronic form are just sequences of characters, including letters of the alphabet, numbers, punctuation, special symbols and whitespace. The identification of word and sentence boundaries is, therefore, essential for any further processing of an electronic text. Tokenisation or word segmentation may be defined as the process of breaking up the sequence of characters in a text at the word boundaries (see, for example, Palmer 2000 ). Thus, tokenisation may be regarded as a core technology in natural language processing.

In many languages such as English and the Nguni group of South African Bantu languages (Zulu, Xhosa, Swati and Ndebele) tokenisation mainly relies on whitespace as word boundary. This is not the case for the Sotho group (Tswana, Northern Sotho and Southern Sotho). For these languages it is particularly important to distinguish between an orthographic word and a linguistic word (Kosch 2006 ). An orthographic word is a unit of text bounded by whitespace, but not containing whitespace. A linguistic word is a sequence of orthographic words that, together, functions as a member of a word category such as, for example, nouns and verbs. Therefore, tokenisation may also be described as the process of identifying linguistic words, henceforth referred to as tokens (see also (Van Wyk 1958 , 1967 ) for Northern Sotho and (Kru  X  ger 2006 ) for Tswana).

In Tswana the main word categories include, amongst others, the noun, pronoun, verb and adverb (Kru  X  ger 2006 ). Tswana has an agglutinative morphology, in which the verb category is morphologically the most complex. The verb prefixes that may occur are the infinitive, negative, subject agreement, aspectual, temporal, object agreement and reflexive morphemes. Possible verb suffixes are the causative, applicative, reciprocal, perfect, passive and verb ending morphemes.

Moreover, Tswana has a so-called disjunctive orthography, in which all affixes are written conjunctively except the prefixes of the verb that are written disjunctively, i.e. as orthographic words.

These two characteristics of Tswana verb morphology have important implica-tions for tokenisation. The tokenisation of all word categories other than verbs may be done on whitespace, since in these categories orthographic and linguistic words coincide. This is not true for verbs, for which a linguistic word typically consists of more than one orthographic word. Therefore, this article pays special attention to the tokenisation of Tswana verbs.
It is well known that the Bantu languages are structurally closely related. Our contention is that precise tokenisation will result in comparable morphological analyses, and that the similarities and structural agreement between Tswana and languages such as Zulu will prevail at subsequent levels of syntactic analysis, which could and should then also be computationally exploited.

The following research problem is addressed: The development and application of a finite state tokeniser and morphological analyser for Tswana that takes cognizance of its disjunctive orthography so that future subsequent levels of processing could exploit the inherent structural similarities between the Bantu languages (Dixon and Aikhenvald 2002 :8) and allow a uniform approach.
The structure of the paper is as follows: The introduction states and contextualises the research problem. The following section discusses tokenisation in the context of the South African Bantu languages. Since the morphological structure of the Tswana verb is central to the tokenisation problem, the next section comprises a brief exposition thereof. The paper then proceeds to discuss the novel finite state computational approach that is followed. This entails the combination of two tokeniser transducers and a morphological analyser. The penultimate section concerns a discussion of the computational results and insights gained. A section on possibilities for future work concludes the article. 2 Tokenisation In order to contextualise our approach we briefly mention a number of approaches to tokenisation.  X  Tokenisation for languages such as English is considered a relatively simple  X  Taljard and Bosch ( 2006 ) advocate an approach to word class identification that  X  In contrast, Hurskainen et al. ( 2005 ) in their work on the computational  X  Anderson and Kotze  X  ( 2006 ) concur that in their development of a morphological Moreover, the tokeniser for Northern Sotho that Anderson and Kotze  X  ( 2006 ) and Kotze  X  ( 2011 ) refer to has not yet been completed, tested and published. 1
The disjunctive orthography of Tswana results in token internal whitespace in various constructions. Named entities, numbers and dates may be handled in ways 2003 ; Mikheev 2003 ; Palmer 2000 ). The important and widely occurring verb constructions in Tswana, on the other hand, are not adequately covered by these methods and present a unique challenge. We illustrate this by means of two examples:
Example 1 : In the English sentence  X  X hey will buy meat X  the four tokens (token boundaries indicated by  X  X / X  X ) are /they /will /buy /meat /. However, the same sentence in Tswana bone ba tla reka nama has only three tokens, viz. /bone /ba tla reka /nama / , shown as interlinear text:
Similarly, the English sentence  X  X hey will buy it X  is tokenised as /they /will /buy / it /, while the Tswana sentence ba tla e reka consists of one linguistic word, and therefore one token only, viz. /ba tla e reka/ :
Example 2 : Improper tokenisation may distort corpus linguistic conclusions and statistics. In a study on corpus design for Tswana lexicography Otlogetswe ( 2007 ) claims that  X  X  a  X  X  is the most frequent  X  X  X ord X  X  in his 1.3 million  X  X  X ords X  X  Tswana corpus. In these statistics the author does not distinguish between orthographic and linguistic words and considers concords as well as subject markers as linguistic words. Indeed, the orthographic word a in Tswana could be any of several linguistic words or morphemes as illustrated in the following sentences: As interrogative particle:
Declarative sentences are changed into questions when the interrogative particle precedes them: As demonstrative pronoun: As descriptive copulative: As possessive particle and descriptive copulative: As subject agreement morpheme: As negative morpheme:
This morpheme is concomitant with the negative morpheme ga when the negative of the perfect is indicated, an example of a separated dependency. In the six occurrences of a above only four represent linguistic words.
The above examples emphasise the importance of correct tokenisation of Tswana linguistic and lexicographic research. In particular, the correct tokenisation of verbs in disjunctively written languages is crucial for reliable and accurate corpus-based research (see, for example, Hurskainen et al. 2005 :450). 3 Morphology of the Tswana verb In a nutshell, the Tswana verb system may be described as follows: The core of any Tswana verb construction is the root, which, together with prefixes and suffixes, constitutes the verb. Except in the imperative, which is functionally an interjection, every verb must incorporate at least one prefix and at least one suffix. A subject agreement prefix is obligatory; other prefixes include one or more object agreement prefixes, and one or more tense prefixes. Similarly, except in a few immutable auxiliary verbs, a tense suffix is essential to any verb. Other suffixes include one or more extensions, which modify the basic significances of the roots in various ways, such as the applicative, causative and passive (Cole and Moncho-Warren 2012 :51).
A complete exposition of Tswana verb morphology falls outside the scope of this article (see Kru  X  ger 2006 ). Aspects that are relevant to tokenisation are briefly introduced and illustrated by means of examples.

Tswana grammar is governed by nominal classification (20 noun classes) and concordial agreement, which are reflected in the verb structure (Kru  X  ger 2006 ). The morphology is governed by a set of linguistic rules according to which the various prefixes and suffixes may be sequenced to form valid word forms, so-called morphotactics, and by a set of morphophonological alternation rules that model the sound changes that occur at morpheme boundaries. These formation rules constitute a model of Tswana morphology that forms the basis of the finite state morphological analyser, discussed in subsequent sections. 3.1 Morphotactics The most basic form of the verb in Tswana consists of an infinitive prefix ? a root ? a verb-final suffix (referred to as a verbal ending), for example, /go bona/ ( X  X o see X ) consists of the infinitive prefix go , the root bon -and the verb-final suffix -a : 3.1.1 Roots While verbs in Tswana may also include various prefixes and suffixes, the root lexical morpheme [that] can be defined as that part of a word which does not include a grammatical morpheme; cannot occur independently as in the case with words; constitutes the lexical meaning of a word and belongs quantitatively to an open class X  X . 3.1.2 Prefixes The verbal root may be preceded by one or more prefixes occurring in the order shown from left to right in Table 1 (cf. Kru  X  ger 2006 :171 X 183) of which only the subject agreement morpheme is obligatory.

Below we briefly introduce the various morphemes and comment on valid combinations that form a single verb token, delimited by slashes ( X / X ). The infinitive morpheme The infinitive morpheme go is written disjunctively, for example: The negative morphemes ga , sa and se The negative morphemes ga , sa and se are written disjunctively. Examples are:
The position of the negative morpheme ga always directly precedes the subject agreement morpheme, for example:
The negative morpheme sa follows the subject agreement morpheme, for example:
The negative morpheme se also follows the subject agreement morpheme, for example:
If the verb is in the imperative mood the negative morpheme se immediately precedes the verbal root, for example: Subject agreement morphemes The subject agreement morphemes, written disjunctively, include non-consecutive subject agreement morphemes and consec-utive subject agreement morphemes, distinguishing between the non-consecutive and consecutive moods. For example, the non-consecutive subject agreement morpheme for class 5 is le as in /lekau / le a tshega / ( X  X he young man is laughing X ), while the consecutive subject agreement morpheme for class 5 is la as in /lekau / la tshega / ( X  X he young man then laughed X ): The aspectual morphemes The aspectual morphemes are written disjunctively and include the present tense morpheme a , the progressive morpheme sa ( X  X till X ) and the potential morpheme ka ( X  X an X ). Examples are: The temporal morpheme The temporal morpheme tla (indicating the future tense) is written disjunctively, for example: Object agreement morphemes An object agreement morpheme is used when the object does not appear explicitly. It is usually written disjunctively. An object morpheme has a pronominal function in the verb as it refers to the object by means of a pronoun when translated into, for instance, English. Examples are: Multiple object morphemes may occur (Pretorius et al. 2012 ).
 The reflexive morpheme The reflexive morpheme i -( X -self X ) is always written conjunctively to the root, for example:
Object agreement morphemes and the reflexive morpheme always immediately precede the verbal root. No other prefix may be placed between the object agreement morpheme and the verbal root or between the reflexive morpheme and the verbal root. The occurrence of an aspectual morpheme and the temporal morpheme is mutually exclusive, that is, they cannot both be present. 3.1.3 Suffixes Various morphemes may be suffixed to the verbal root and follow the conjunctive writing style (see Table 2 ). Multiple suffixes may occur in variable order, depending on the semantics, but the verb always ends in a verb-final morpheme. The specific verbal ending depends, for example, on the polarity of the verb, as marked by the presence or not of a negative prefix, which constitutes a long distance dependency (see, for example, Kru  X  ger 2006 ).

An example of multiple suffixes is rekiseditse ( X  X old to/for X ) where the root is for X ). The surface form rekiseditse follows from the application of the appropriate sound changes (see Sect. 3.2 ).
 An example of a long distance dependency is where the negative morpheme ga requires the verbal ending -e .

Since (combinations of) suffixes are written conjunctively, they do not add to the complexity of the disjunctive writing style prevalent in verb tokenisation. 3.1.4 Auxiliary verbs and copulative verbs In addition to main verbs, Tswana also has auxiliary verbs and copulative verbs. Main and copulative verbs may be used independently while auxiliary verbs are which must be followed by a complementary predicate, which can be a verb or verbal group or a copulative group or an auxiliary verbal group, because it cannot function in isolation X  X . Consider the following example of the auxiliary verb tlhola ( X  X lways X ). The Tswana equivalent of the English sentence  X  X e always help them X  is re tlhola re ba thusa , which consists of two tokens, the auxiliary verb /re tlhola/ ( X  X e always X ) and the complementary predicate /re ba thusa/ ( X  X e help them X ):
Even though auxiliary verbs are necessarily followed by main or copulative verbs, they are recognised as an individual sub-category of verbs in Tswana and are therefore analysed as separate linguistic words 2 :
This tokenisation is in line with the approach followed in, for example, Zulu (Poulos and Msimang 1998 :219). The approach of Anderson and Kotze  X  ( 2006 ) deviates from this general understanding, as has been mentioned in Sect. 2 .
For a more detailed discussion of auxiliary verbs in Tswana, the reader is referred to Pretorius ( 1997 ).

Copulatives function as introductory members to non-verbal complements. The morphological forms of copulatives are determined by the copulative relation and the type of modal category in which they occur. These factors give rise to a large variety of morphological forms (Kru  X  ger 2006 : 275 X 281). The prefixes in copulatives are also written disjunctively, as seen in the following example: where the descriptive copulative ( le ) is followed by the locative complement /mo / setsidifatsing/ ( X  X n the refrigerator X ). 3.2 Morphophonological alternation rules Sound changes may occur when morphemes are affixed to the verbal root. 3.2.1 Prefixes We illustrate sound changes in verbal prefixes by means of three examples.  X  The object agreement morpheme of the first person singular ni or n in  X  In some instances the object agreement morpheme of the third person singular  X  When the subject agreement morpheme ke (the first person singular) and the 3.2.2 Suffixes Sound changes also occur under certain circumstances (see, for example, Kru  X  ger 2006 ), but do not affect the conjunctive writing style. 4 Finite state tokenisation In the previous section we gave a brief exposition of the salient features of Tswana verb morphology and specifically focussed on the disjunctive orthography and its implications for tokenisation. In this section we turn our attention to the computational modelling and implementation of this linguistic phenomenon.
Our methodology is based on a novel combination of a broad coverage finite state morphological analyser for Tswana catering for disjunctively written verb constructions, a verb tokeniser transducer and a tokeniser transducer that tokenises on whitespace. The process is described in Sect. 4.2 . Central to our computational approach is the assumption that (1) a token is valid if and only if it is successfully analysed and (2) strings that are not analysed are not valid linguistic words and therefore do not constitute tokens. Furthermore, we ensure that our process of tokenisation preserves word order since context is essential in human elicitation as well as in further phases of processing in a typical  X  X  X LP pipeline X  X . 4.1 Morphological analysis The morphological analyser prototype, developed with the Xerox finite state toolkit (Beesley and Karttunen 2003 ), implements morpheme sequencing (morphotactics) by means of a lexc script containing cascades of so-called lexicons, each of which represents a specific type of prefix, suffix or root. Sound changes at morpheme boundaries (morphophonological alternation rules) are implemented by means of xfst regular expressions. These lexc and xfst scripts are then compiled and subsequently composed into a single finite state transducer, which constitutes the morphological analyser (Pretorius et al. 2005 , 2008 ). The implementation of the morphotacticsand alternation rules is, in principle, complete and includes an extensive from roots included in the list, but does not recognise incorrectly formed or partial strings as words. The occurrence of multiple valid morphological analyses is typical and would require (context dependent) disambiguation at subsequent levels of processing, for example, /re tla dula/ ( X  X e will sit or stay X ) is analysed as follows: or
The analysis starts with part of speech information such as word category, mood, tense and polarity, followed by the actual morphological tags, given morpheme by morpheme. In the above example the word category is a verb in the indicative or participial mood, future tense, positive. The morphological tags indicating subject agreement first person plural, the temporal prefix, verb root and verbal ending correspond to the actual morphemes, as follows: The morphological tag set reflects linguistic terminology (Kru  X  ger 2006 ; Appendix Table 13 ). The current coverage of the morphological analyser is shown in Table 3 .
 4.2 Tokenisation algorithm In essence, the tokenisation algorithm is based on four principles: 1. Tokenisation on whitespace should proceed as is customary for alphabetic 2. Whitespace forms part of the  X  X  X lphabet X  X  of verb constructions. 3. A longest match strategy to ensure the identification of long candidate verb 4. Candidate verb constructions that are too long are systematically subdivided.
The rationale for the first two principles has been discussed in some detail in previous sections. The rationale underlying the last two principles is as follows:
Chunking together longest possible sequences of orthographic words allows for the possibility to identify long verb constructions that contain internal whitespace. In cases where such a longest match sequence turns out to be too long, it is systematically subdivided into shorter sequences. The subdivision is systematic in ... ,(s 1 s 2 ... s n-1 and s n ), whereby all shorter sequences will eventually be considered, if necessary.

Longest match can either be done left-to-right or right-to-left. We investigated, applied and compared both strategies. The alternative approach would be to tokenise on whitespace and then try to re-assemble valid verb constructions. In the latter approach there is, however, the possibility that a long verb construction will not be identified.

Firstly, we state the steps followed in the algorithm, secondly we explain each step in some detail using a short text fragment, and thirdly, we discuss some characteristics of the algorithm that are not exhibited by the chosen text fragment. For the latter we use other example fragments.
 4.2.1 Algorithm
Step 1: Normalise test data (in the form of running text) by removing Step 2: Tokenise on longest match, considering punctuation symbols as tokens.
Step 3: Assign a unique identification number (ID) to every candidate token in Step 4: Perform a morphological analysis of the candidate tokens from step 2.
Step 5: Separate the tokens that were successfully analysed (referred to as auto
Step 6: For each failure, s 1 s 2 ... s n , where each s i is an orthographic word,
Step 7: Extend the ID of every candidate token obtained in step 6 so that the
Step 8: Perform a morphological analysis of the candidate tokens obtained by Step 9: Repeat steps 5 X 8 until no further subdivision is possible.
 Step 10: Merge, according to their (extended) IDs, all auto tokens (and errors) This algorithm yields tokens obtained by computational means. Errors are typically strings that could not be analysed by the morphological analyser and should be rare, given the coverage of the morphological analyser. These latter strings should be subjected to human elicitation towards improving the morphological analyser. Finally, a comparison of the correspondences and differences between the hand-tokenised tokens (hand tokens) and the tokens obtained by computational means (auto tokens) is necessary in order to assess the reliability of the proposed tokenisation algorithm.

The test data consists of a Tswana 7858 (orthographic) word corpus of running text, excluding punctuation. The text was tokenised by hand and validated by a linguist in order to provide a gold standard against which the tokeniser could be evaluated. The text was normalised not to contain capitalisation (step 1 above). We also ensured that all word roots occurring in the text were represented in the root lexicons of the morphological analyser so that limitations in the analyser would not influence the tokenisation evaluation. 4.2.2 Illustration by means of an example Steps 2 X 10 in the above algorithm are now discussed in more detail and illustrated by means of the following fragment of running text: a ba a belega morwawe wa ntlha, a mo phutha ka masela, a mo latsa mo segopong sa dipitse; ka gonne ba ne ba se na bonno mo ntlong ya baeti. ( X  X he then gave birth to her first child, she (then) wrapped him in cloth, she (then) lay him down in the horse X  X  crib, as they did not have lodging in a boarding-house X )
Tokenised by hand as follows: /a ba /a belega /morwawe /wa /ntlha /, /a mo phutha /ka /masela /, /a mo latsa /mo / segopong /sa /dipitse /; /ka gone /ba ne /ba se na /bonno /mo /ntlong /ya / baeti /. / Step 2: Firstly, tokenisation is performed, based on principles (1), (2), (3) and (4). A grammar for linguistically valid verb constructions is implemented using xfst regular expressions, a fragment of which is shown in Fig. 1 . The longest match, by the final rule.
 choice operator. For example, the xfst instruction define A [a ? |b|c(d)] means that the non-terminal A can be rewritten as a string of one or more a  X  X  or b or c or .

Two replace rules offered by the Xerox regular expression calculus deserve special attention, with A, B, C, L, R denoting regular languages in the formal language theory sense. 1. Marking: [A -&gt;B ... C] is used to bracket any instance of the language A with 2. Directional conditional replacement: The rule A-&gt;@B||L_R means that
The longest right-to-left match strategy is implemented by means of the combination of rules of types (1) and (2): TOKEN -&gt;@ ... NL || [SP | NL] _ ensures that from a given position in the input stream of characters the longest possible string from right to left, which corresponds to the TOKEN pattern, is matched, provided that it has whitespace or a new line marker to its left, and is then replaced by itself (denoted by ... ) followed by a new line marker. The left-to-right match strategy is implemented in a similar way.
For the text fragment above, the right-to-left and the left-to-right tokenized candidate tokens happened to be identical:
Step 3: Assigning identification (TID number) to candidate tokens resulting from step 2 yields the following:
Step 4: Since a finite state transducer follows all possible paths, many candidate tokens, particularly verbs, allow several valid analyses. In our example we show only one analysis per token since the emphasis is on distinguishing between analysed and not analysed tokens. Failures to analyse are indicated with  X  X  ???  X  X . Punctuation symbols, here shown as failures, are not processed further until step 10.
Step 5: Failures that consist of multiple orthographic words are further processed as described in step 6. Such failures occur in our example as follows:
Step 6: The subdivision of a candidate token that has n occurrences of internal whitespace results in n different token pairs. The finite state transducer for this is shown in Fig. 2 .

The subdivision of the failures in step 5 yields the token pairs below. At this stage all pairs of shorter candidate tokens have the same TID.

Step 7: The examples below show how the token identification number (TID) extensions encode both the number of the pair (1, 2 or 3), as well as the number of the element in the pair (1 or 2):
Step 8: In the first pair ( 1.1.1 and 1.1.2 ) abaa failed to analyse, and thereby the first pair is discarded. Both the second and the third pairs were successfully analysed. This demonstrates that the algorithm may identify more than one valid token pair. The disambiguation of these token pairs would either require human elicitation on the basis of the context, or an automated process at a higher level based on the morphological analyses, e.g. syntactic parsing. For the purposes of our evaluation we followed the human elicitation approach.

In the case of all the other failures in step 5, both elements of the token pairs analysed successfully and are therefore accepted as valid (auto) tokens.
Step 9: Since our example does not require any further processing, we proceed to step 10.
 Step 10: Merging and sorting the identified tokens in the example, yield the result in Table 4 . A more detailed evaluation of the procedure is given in a subsequent section. 4.2.3 Other characteristics For completeness we briefly provide examples of text fragments for which auto short, as in the second fragment.

The first fragment : ( X  X he Tswana person says that it is the month that prevents you from traveling at night X ) should be tokenised as but the algorithm yields for both the right-to-left and the left-to-right longest match strategy.
Both strategies yield the too long auto token oreke . Since the string is a perfectly valid verb, the morphological analyser provides an analysis and thereby validates the token, which prevents further subdivision. However, in the context of the sentence it should have been tokenised as ore and ke .

The second fragment : ( X  X t has then dried out a lot X ) should be tokenised as but for both the right-to-left and the left-to-right longest match strategy the algorithm produced the following: containing the too short auto tokens lo and abo .

In both strategies the longest match resulted in two candidate tokens, namely lo and a bo lo omile . The hand token lo a bo was therefore unobtainable since, as mentioned before, the algorithm cannot recombine already obtained candidate tokens. The second candidate token yielded one correct auto token, lo omile , after subsequent subdivision. 5 Results and discussion is customary in natural language processing experiments where computational results are compared to actual data (see, for example, Jurafsky and Martin 2009 :489). terms of tokens and types (i.e. unique tokens). The main results are as follows:  X  As can be seen from Table 5 , tokenisation on whitespace would have yielded  X  A comparison of the hand tokens and the results obtained by applying the  X  Using both transducers, as described in detail in Sect. 4 , yielded an F 1 -score of  X  By combining the two strategies an F 1 -score of 95 % was obtained (see A more detailed discussion of the results follows.

Table 5 contains statistics about the test corpus, specifically the number of tokens consisting of one or more orthographic words, as manually tokenised. To prevent possibly skewed statistics due to multiple occurrences of tokens, we provide both the number of tokens and the number of types. Approximately 85 % of types consist of either one or two orthographic words, with significantly fewer consisting of three (13.29 %) or four (1.42 %) orthographic words.

Table 6 contains statistics about the correctly tokenised auto tokens, using the left-to-right (LTR) and right-to-left (RTL) strategies. The numbers are not significantly different, but it should be noted that this does not mean that the tokens that are correctly identified in the two cases are the same, for example ase ka is correctly identified by the LTR strategy, but not by the RTL strategy, and vice versa for e go kganelang . Table 7 contains the number of types for which only one of the two strategies was successful.

From Tables 6 and 7 it follows that, for two-word tokens, 648 types were correctly identified by both strategies, 26 types were correctly identified by LTR only and 5 types by RTL only. Similarly, for three-word tokens, 199 types were correctly identified by both strategies, 1 type by LTR only and 26 types by RTL only. This demonstrates that the LTR strategy performs better for shorter tokens while the RTL strategy improves with token length.

Table 8 contains statistics about the incorrectly tokenised auto tokens, using the left-to-right (LTR) and right-to-left (RTL) strategies. We distinguish between three distinct categories of incorrect tokens, namely tokens that are too long, tokens that are too short and pairs of consecutive tokens of which one is too short and the other too long.

The tendency that LTR favours shorter tokens and RTL longer tokens is again illustrated in rows one and two: LTR identified 75 too long types and the RTL 88 while LTR identified 103 too short types and RTL 68.

Rows three and four further illustrate the inherent difference between the two strategies. In these cases two hand tokens were expected, but LTR produced a token that is too long followed by a token that is too short while RTL produced the opposite. This is to be expected since LTR starts its longest match from the left and RTL starts its longest match from the right. Examples are provided in Tables 9 and 10 , respectively.

The evaluation of the tokeniser, employing the two strategies respectively, is given in Table 11 .

From Tables 6 , 7 , 8 , 9 and 10 it is clear that the two strategies are complementary and could form the basis of a combined approach. This was investigated and the results are given in Table 12 .

The F 1 -score of 0.95 in Table 12 is a good result for a complex problem. The algorithm yields correctly tokenised and morphologically analysed linguistic words, ready for subsequent levels of parsing. Finally, we reiterate that perfect tokenisation falls outside the scope of tokenisation and computational morphology. 6 Future work Aspects that warrant further work include the following:
The continued maintenance and extension of the word root lexicons of the morphological analyser. A possible alternative approach would be the use of a guesser variant of the morphological analyser that contains consonant/vowel patterns for phonologically possible roots to cater for absent roots.
More extensive application and testing on larger text corpora. This would require the availability of such corpora for Tswana and a gold standard for testing.
Bootstrapping the tokeniser for Northern Sotho and Southern Sotho. This will involve the bootstrapping of the morphological analyser for the mentioned languages X  X  project that is already underway.
 Appendix See Appendix Table 13 .
 References
 Abstract Tswana, a Bantu language in the Sotho group, is characterised by an agglutinative morphology and a disjunctive orthography, which mainly affects the verb category. In particular, verbal prefixes are usually written disjunctively, while suffixes follow a conjunctive writing style. Therefore, Tswana tokenisation cannot be based solely on whitespace, as is the case in many alphabetic, segmented lan-guages, including the conjunctively written Nguni group of South African Bantu languages. This paper shows how a combination of two finite state tokeniser transducers and a finite state morphological analyser are combined to solve the Tswana (verb) tokenisation problem. The approach has the important advantage of bringing the processing of Tswana, beyond the morphological analysis level, in line with what is appropriate for the Nguni languages. This means that the challenge of the disjunctive orthography is met at the tokenisation/morphological analysis level and does not in principle propagate to subsequent levels of analysis such as POS tagging and shallow parsing, etc. The tokenisation approach is novel and, when implemented and evaluated, yields an F 1 -score of 95 % with respect to a hand tokenised gold standard.
 Keywords Finite state computational morphology Tswana Disjunctive orthography Tokenisation Verb morphology 1 Introduction Words, syntactic groups, clauses, sentences, paragraphs, etc. usually form the basis of the analysis and processing of natural language text. However, texts in electronic form are just sequences of characters, including letters of the alphabet, numbers, punctuation, special symbols and whitespace. The identification of word and sentence boundaries is, therefore, essential for any further processing of an electronic text. Tokenisation or word segmentation may be defined as the process of breaking up the sequence of characters in a text at the word boundaries (see, for example, Palmer 2000 ). Thus, tokenisation may be regarded as a core technology in natural language processing.

In many languages such as English and the Nguni group of South African Bantu languages (Zulu, Xhosa, Swati and Ndebele) tokenisation mainly relies on whitespace as word boundary. This is not the case for the Sotho group (Tswana, Northern Sotho and Southern Sotho). For these languages it is particularly important to distinguish between an orthographic word and a linguistic word (Kosch 2006 ). An orthographic word is a unit of text bounded by whitespace, but not containing whitespace. A linguistic word is a sequence of orthographic words that, together, functions as a member of a word category such as, for example, nouns and verbs. Therefore, tokenisation may also be described as the process of identifying linguistic words, henceforth referred to as tokens (see also (Van Wyk 1958 , 1967 ) for Northern Sotho and (Kru  X  ger 2006 ) for Tswana).

In Tswana the main word categories include, amongst others, the noun, pronoun, verb and adverb (Kru  X  ger 2006 ). Tswana has an agglutinative morphology, in which the verb category is morphologically the most complex. The verb prefixes that may occur are the infinitive, negative, subject agreement, aspectual, temporal, object agreement and reflexive morphemes. Possible verb suffixes are the causative, applicative, reciprocal, perfect, passive and verb ending morphemes.

Moreover, Tswana has a so-called disjunctive orthography, in which all affixes are written conjunctively except the prefixes of the verb that are written disjunctively, i.e. as orthographic words.

These two characteristics of Tswana verb morphology have important implica-tions for tokenisation. The tokenisation of all word categories other than verbs may be done on whitespace, since in these categories orthographic and linguistic words coincide. This is not true for verbs, for which a linguistic word typically consists of more than one orthographic word. Therefore, this article pays special attention to the tokenisation of Tswana verbs.
It is well known that the Bantu languages are structurally closely related. Our contention is that precise tokenisation will result in comparable morphological analyses, and that the similarities and structural agreement between Tswana and languages such as Zulu will prevail at subsequent levels of syntactic analysis, which could and should then also be computationally exploited.

The following research problem is addressed: The development and application of a finite state tokeniser and morphological analyser for Tswana that takes cognizance of its disjunctive orthography so that future subsequent levels of processing could exploit the inherent structural similarities between the Bantu languages (Dixon and Aikhenvald 2002 :8) and allow a uniform approach.
The structure of the paper is as follows: The introduction states and contextualises the research problem. The following section discusses tokenisation in the context of the South African Bantu languages. Since the morphological structure of the Tswana verb is central to the tokenisation problem, the next section comprises a brief exposition thereof. The paper then proceeds to discuss the novel finite state computational approach that is followed. This entails the combination of two tokeniser transducers and a morphological analyser. The penultimate section concerns a discussion of the computational results and insights gained. A section on possibilities for future work concludes the article. 2 Tokenisation In order to contextualise our approach we briefly mention a number of approaches to tokenisation.  X  Tokenisation for languages such as English is considered a relatively simple  X  Taljard and Bosch ( 2006 ) advocate an approach to word class identification that  X  In contrast, Hurskainen et al. ( 2005 ) in their work on the computational  X  Anderson and Kotze  X  ( 2006 ) concur that in their development of a morphological Moreover, the tokeniser for Northern Sotho that Anderson and Kotze  X  ( 2006 ) and Kotze  X  ( 2011 ) refer to has not yet been completed, tested and published. 1
The disjunctive orthography of Tswana results in token internal whitespace in various constructions. Named entities, numbers and dates may be handled in ways 2003 ; Mikheev 2003 ; Palmer 2000 ). The important and widely occurring verb constructions in Tswana, on the other hand, are not adequately covered by these methods and present a unique challenge. We illustrate this by means of two examples:
Example 1 : In the English sentence  X  X hey will buy meat X  the four tokens (token boundaries indicated by  X  X / X  X ) are /they /will /buy /meat /. However, the same sentence in Tswana bone ba tla reka nama has only three tokens, viz. /bone /ba tla reka /nama / , shown as interlinear text:
Similarly, the English sentence  X  X hey will buy it X  is tokenised as /they /will /buy / it /, while the Tswana sentence ba tla e reka consists of one linguistic word, and therefore one token only, viz. /ba tla e reka/ :
Example 2 : Improper tokenisation may distort corpus linguistic conclusions and statistics. In a study on corpus design for Tswana lexicography Otlogetswe ( 2007 ) claims that  X  X  a  X  X  is the most frequent  X  X  X ord X  X  in his 1.3 million  X  X  X ords X  X  Tswana corpus. In these statistics the author does not distinguish between orthographic and linguistic words and considers concords as well as subject markers as linguistic words. Indeed, the orthographic word a in Tswana could be any of several linguistic words or morphemes as illustrated in the following sentences: As interrogative particle:
Declarative sentences are changed into questions when the interrogative particle precedes them: As demonstrative pronoun: As descriptive copulative: As possessive particle and descriptive copulative: As subject agreement morpheme: As negative morpheme:
This morpheme is concomitant with the negative morpheme ga when the negative of the perfect is indicated, an example of a separated dependency. In the six occurrences of a above only four represent linguistic words.
The above examples emphasise the importance of correct tokenisation of Tswana linguistic and lexicographic research. In particular, the correct tokenisation of verbs in disjunctively written languages is crucial for reliable and accurate corpus-based research (see, for example, Hurskainen et al. 2005 :450). 3 Morphology of the Tswana verb In a nutshell, the Tswana verb system may be described as follows: The core of any Tswana verb construction is the root, which, together with prefixes and suffixes, constitutes the verb. Except in the imperative, which is functionally an interjection, every verb must incorporate at least one prefix and at least one suffix. A subject agreement prefix is obligatory; other prefixes include one or more object agreement prefixes, and one or more tense prefixes. Similarly, except in a few immutable auxiliary verbs, a tense suffix is essential to any verb. Other suffixes include one or more extensions, which modify the basic significances of the roots in various ways, such as the applicative, causative and passive (Cole and Moncho-Warren 2012 :51).
A complete exposition of Tswana verb morphology falls outside the scope of this article (see Kru  X  ger 2006 ). Aspects that are relevant to tokenisation are briefly introduced and illustrated by means of examples.

Tswana grammar is governed by nominal classification (20 noun classes) and concordial agreement, which are reflected in the verb structure (Kru  X  ger 2006 ). The morphology is governed by a set of linguistic rules according to which the various prefixes and suffixes may be sequenced to form valid word forms, so-called morphotactics, and by a set of morphophonological alternation rules that model the sound changes that occur at morpheme boundaries. These formation rules constitute a model of Tswana morphology that forms the basis of the finite state morphological analyser, discussed in subsequent sections. 3.1 Morphotactics The most basic form of the verb in Tswana consists of an infinitive prefix ? a root ? a verb-final suffix (referred to as a verbal ending), for example, /go bona/ ( X  X o see X ) consists of the infinitive prefix go , the root bon -and the verb-final suffix -a : 3.1.1 Roots While verbs in Tswana may also include various prefixes and suffixes, the root lexical morpheme [that] can be defined as that part of a word which does not include a grammatical morpheme; cannot occur independently as in the case with words; constitutes the lexical meaning of a word and belongs quantitatively to an open class X  X . 3.1.2 Prefixes The verbal root may be preceded by one or more prefixes occurring in the order shown from left to right in Table 1 (cf. Kru  X  ger 2006 :171 X 183) of which only the subject agreement morpheme is obligatory.

Below we briefly introduce the various morphemes and comment on valid combinations that form a single verb token, delimited by slashes ( X / X ). The infinitive morpheme The infinitive morpheme go is written disjunctively, for example: The negative morphemes ga , sa and se The negative morphemes ga , sa and se are written disjunctively. Examples are:
The position of the negative morpheme ga always directly precedes the subject agreement morpheme, for example:
The negative morpheme sa follows the subject agreement morpheme, for example:
The negative morpheme se also follows the subject agreement morpheme, for example:
If the verb is in the imperative mood the negative morpheme se immediately precedes the verbal root, for example: Subject agreement morphemes The subject agreement morphemes, written disjunctively, include non-consecutive subject agreement morphemes and consec-utive subject agreement morphemes, distinguishing between the non-consecutive and consecutive moods. For example, the non-consecutive subject agreement morpheme for class 5 is le as in /lekau / le a tshega / ( X  X he young man is laughing X ), while the consecutive subject agreement morpheme for class 5 is la as in /lekau / la tshega / ( X  X he young man then laughed X ): The aspectual morphemes The aspectual morphemes are written disjunctively and include the present tense morpheme a , the progressive morpheme sa ( X  X till X ) and the potential morpheme ka ( X  X an X ). Examples are: The temporal morpheme The temporal morpheme tla (indicating the future tense) is written disjunctively, for example: Object agreement morphemes An object agreement morpheme is used when the object does not appear explicitly. It is usually written disjunctively. An object morpheme has a pronominal function in the verb as it refers to the object by means of a pronoun when translated into, for instance, English. Examples are: Multiple object morphemes may occur (Pretorius et al. 2012 ).
 The reflexive morpheme The reflexive morpheme i -( X -self X ) is always written conjunctively to the root, for example:
Object agreement morphemes and the reflexive morpheme always immediately precede the verbal root. No other prefix may be placed between the object agreement morpheme and the verbal root or between the reflexive morpheme and the verbal root. The occurrence of an aspectual morpheme and the temporal morpheme is mutually exclusive, that is, they cannot both be present. 3.1.3 Suffixes Various morphemes may be suffixed to the verbal root and follow the conjunctive writing style (see Table 2 ). Multiple suffixes may occur in variable order, depending on the semantics, but the verb always ends in a verb-final morpheme. The specific verbal ending depends, for example, on the polarity of the verb, as marked by the presence or not of a negative prefix, which constitutes a long distance dependency (see, for example, Kru  X  ger 2006 ).

An example of multiple suffixes is rekiseditse ( X  X old to/for X ) where the root is for X ). The surface form rekiseditse follows from the application of the appropriate sound changes (see Sect. 3.2 ).
 An example of a long distance dependency is where the negative morpheme ga requires the verbal ending -e .

Since (combinations of) suffixes are written conjunctively, they do not add to the complexity of the disjunctive writing style prevalent in verb tokenisation. 3.1.4 Auxiliary verbs and copulative verbs In addition to main verbs, Tswana also has auxiliary verbs and copulative verbs. Main and copulative verbs may be used independently while auxiliary verbs are which must be followed by a complementary predicate, which can be a verb or verbal group or a copulative group or an auxiliary verbal group, because it cannot function in isolation X  X . Consider the following example of the auxiliary verb tlhola ( X  X lways X ). The Tswana equivalent of the English sentence  X  X e always help them X  is re tlhola re ba thusa , which consists of two tokens, the auxiliary verb /re tlhola/ ( X  X e always X ) and the complementary predicate /re ba thusa/ ( X  X e help them X ):
Even though auxiliary verbs are necessarily followed by main or copulative verbs, they are recognised as an individual sub-category of verbs in Tswana and are therefore analysed as separate linguistic words 2 :
This tokenisation is in line with the approach followed in, for example, Zulu (Poulos and Msimang 1998 :219). The approach of Anderson and Kotze  X  ( 2006 ) deviates from this general understanding, as has been mentioned in Sect. 2 .
For a more detailed discussion of auxiliary verbs in Tswana, the reader is referred to Pretorius ( 1997 ).

Copulatives function as introductory members to non-verbal complements. The morphological forms of copulatives are determined by the copulative relation and the type of modal category in which they occur. These factors give rise to a large variety of morphological forms (Kru  X  ger 2006 : 275 X 281). The prefixes in copulatives are also written disjunctively, as seen in the following example: where the descriptive copulative ( le ) is followed by the locative complement /mo / setsidifatsing/ ( X  X n the refrigerator X ). 3.2 Morphophonological alternation rules Sound changes may occur when morphemes are affixed to the verbal root. 3.2.1 Prefixes We illustrate sound changes in verbal prefixes by means of three examples.  X  The object agreement morpheme of the first person singular ni or n in  X  In some instances the object agreement morpheme of the third person singular  X  When the subject agreement morpheme ke (the first person singular) and the 3.2.2 Suffixes Sound changes also occur under certain circumstances (see, for example, Kru  X  ger 2006 ), but do not affect the conjunctive writing style. 4 Finite state tokenisation In the previous section we gave a brief exposition of the salient features of Tswana verb morphology and specifically focussed on the disjunctive orthography and its implications for tokenisation. In this section we turn our attention to the computational modelling and implementation of this linguistic phenomenon.
Our methodology is based on a novel combination of a broad coverage finite state morphological analyser for Tswana catering for disjunctively written verb constructions, a verb tokeniser transducer and a tokeniser transducer that tokenises on whitespace. The process is described in Sect. 4.2 . Central to our computational approach is the assumption that (1) a token is valid if and only if it is successfully analysed and (2) strings that are not analysed are not valid linguistic words and therefore do not constitute tokens. Furthermore, we ensure that our process of tokenisation preserves word order since context is essential in human elicitation as well as in further phases of processing in a typical  X  X  X LP pipeline X  X . 4.1 Morphological analysis The morphological analyser prototype, developed with the Xerox finite state toolkit (Beesley and Karttunen 2003 ), implements morpheme sequencing (morphotactics) by means of a lexc script containing cascades of so-called lexicons, each of which represents a specific type of prefix, suffix or root. Sound changes at morpheme boundaries (morphophonological alternation rules) are implemented by means of xfst regular expressions. These lexc and xfst scripts are then compiled and subsequently composed into a single finite state transducer, which constitutes the morphological analyser (Pretorius et al. 2005 , 2008 ). The implementation of the morphotacticsand alternation rules is, in principle, complete and includes an extensive from roots included in the list, but does not recognise incorrectly formed or partial strings as words. The occurrence of multiple valid morphological analyses is typical and would require (context dependent) disambiguation at subsequent levels of processing, for example, /re tla dula/ ( X  X e will sit or stay X ) is analysed as follows: or
The analysis starts with part of speech information such as word category, mood, tense and polarity, followed by the actual morphological tags, given morpheme by morpheme. In the above example the word category is a verb in the indicative or participial mood, future tense, positive. The morphological tags indicating subject agreement first person plural, the temporal prefix, verb root and verbal ending correspond to the actual morphemes, as follows: The morphological tag set reflects linguistic terminology (Kru  X  ger 2006 ; Appendix Table 13 ). The current coverage of the morphological analyser is shown in Table 3 .
 4.2 Tokenisation algorithm In essence, the tokenisation algorithm is based on four principles: 1. Tokenisation on whitespace should proceed as is customary for alphabetic 2. Whitespace forms part of the  X  X  X lphabet X  X  of verb constructions. 3. A longest match strategy to ensure the identification of long candidate verb 4. Candidate verb constructions that are too long are systematically subdivided.
The rationale for the first two principles has been discussed in some detail in previous sections. The rationale underlying the last two principles is as follows:
Chunking together longest possible sequences of orthographic words allows for the possibility to identify long verb constructions that contain internal whitespace. In cases where such a longest match sequence turns out to be too long, it is systematically subdivided into shorter sequences. The subdivision is systematic in ... ,(s 1 s 2 ... s n-1 and s n ), whereby all shorter sequences will eventually be considered, if necessary.

Longest match can either be done left-to-right or right-to-left. We investigated, applied and compared both strategies. The alternative approach would be to tokenise on whitespace and then try to re-assemble valid verb constructions. In the latter approach there is, however, the possibility that a long verb construction will not be identified.

Firstly, we state the steps followed in the algorithm, secondly we explain each step in some detail using a short text fragment, and thirdly, we discuss some characteristics of the algorithm that are not exhibited by the chosen text fragment. For the latter we use other example fragments.
 4.2.1 Algorithm
Step 1: Normalise test data (in the form of running text) by removing Step 2: Tokenise on longest match, considering punctuation symbols as tokens.
Step 3: Assign a unique identification number (ID) to every candidate token in Step 4: Perform a morphological analysis of the candidate tokens from step 2.
Step 5: Separate the tokens that were successfully analysed (referred to as auto
Step 6: For each failure, s 1 s 2 ... s n , where each s i is an orthographic word,
Step 7: Extend the ID of every candidate token obtained in step 6 so that the
Step 8: Perform a morphological analysis of the candidate tokens obtained by Step 9: Repeat steps 5 X 8 until no further subdivision is possible.
 Step 10: Merge, according to their (extended) IDs, all auto tokens (and errors) This algorithm yields tokens obtained by computational means. Errors are typically strings that could not be analysed by the morphological analyser and should be rare, given the coverage of the morphological analyser. These latter strings should be subjected to human elicitation towards improving the morphological analyser. Finally, a comparison of the correspondences and differences between the hand-tokenised tokens (hand tokens) and the tokens obtained by computational means (auto tokens) is necessary in order to assess the reliability of the proposed tokenisation algorithm.

The test data consists of a Tswana 7858 (orthographic) word corpus of running text, excluding punctuation. The text was tokenised by hand and validated by a linguist in order to provide a gold standard against which the tokeniser could be evaluated. The text was normalised not to contain capitalisation (step 1 above). We also ensured that all word roots occurring in the text were represented in the root lexicons of the morphological analyser so that limitations in the analyser would not influence the tokenisation evaluation. 4.2.2 Illustration by means of an example Steps 2 X 10 in the above algorithm are now discussed in more detail and illustrated by means of the following fragment of running text: a ba a belega morwawe wa ntlha, a mo phutha ka masela, a mo latsa mo segopong sa dipitse; ka gonne ba ne ba se na bonno mo ntlong ya baeti. ( X  X he then gave birth to her first child, she (then) wrapped him in cloth, she (then) lay him down in the horse X  X  crib, as they did not have lodging in a boarding-house X )
Tokenised by hand as follows: /a ba /a belega /morwawe /wa /ntlha /, /a mo phutha /ka /masela /, /a mo latsa /mo / segopong /sa /dipitse /; /ka gone /ba ne /ba se na /bonno /mo /ntlong /ya / baeti /. / Step 2: Firstly, tokenisation is performed, based on principles (1), (2), (3) and (4). A grammar for linguistically valid verb constructions is implemented using xfst regular expressions, a fragment of which is shown in Fig. 1 . The longest match, by the final rule.
 choice operator. For example, the xfst instruction define A [a ? |b|c(d)] means that the non-terminal A can be rewritten as a string of one or more a  X  X  or b or c or .

Two replace rules offered by the Xerox regular expression calculus deserve special attention, with A, B, C, L, R denoting regular languages in the formal language theory sense. 1. Marking: [A -&gt;B ... C] is used to bracket any instance of the language A with 2. Directional conditional replacement: The rule A-&gt;@B||L_R means that
The longest right-to-left match strategy is implemented by means of the combination of rules of types (1) and (2): TOKEN -&gt;@ ... NL || [SP | NL] _ ensures that from a given position in the input stream of characters the longest possible string from right to left, which corresponds to the TOKEN pattern, is matched, provided that it has whitespace or a new line marker to its left, and is then replaced by itself (denoted by ... ) followed by a new line marker. The left-to-right match strategy is implemented in a similar way.
For the text fragment above, the right-to-left and the left-to-right tokenized candidate tokens happened to be identical:
Step 3: Assigning identification (TID number) to candidate tokens resulting from step 2 yields the following:
Step 4: Since a finite state transducer follows all possible paths, many candidate tokens, particularly verbs, allow several valid analyses. In our example we show only one analysis per token since the emphasis is on distinguishing between analysed and not analysed tokens. Failures to analyse are indicated with  X  X  ???  X  X . Punctuation symbols, here shown as failures, are not processed further until step 10.
Step 5: Failures that consist of multiple orthographic words are further processed as described in step 6. Such failures occur in our example as follows:
Step 6: The subdivision of a candidate token that has n occurrences of internal whitespace results in n different token pairs. The finite state transducer for this is shown in Fig. 2 .

The subdivision of the failures in step 5 yields the token pairs below. At this stage all pairs of shorter candidate tokens have the same TID.

Step 7: The examples below show how the token identification number (TID) extensions encode both the number of the pair (1, 2 or 3), as well as the number of the element in the pair (1 or 2):
Step 8: In the first pair ( 1.1.1 and 1.1.2 ) abaa failed to analyse, and thereby the first pair is discarded. Both the second and the third pairs were successfully analysed. This demonstrates that the algorithm may identify more than one valid token pair. The disambiguation of these token pairs would either require human elicitation on the basis of the context, or an automated process at a higher level based on the morphological analyses, e.g. syntactic parsing. For the purposes of our evaluation we followed the human elicitation approach.

In the case of all the other failures in step 5, both elements of the token pairs analysed successfully and are therefore accepted as valid (auto) tokens.
Step 9: Since our example does not require any further processing, we proceed to step 10.
 Step 10: Merging and sorting the identified tokens in the example, yield the result in Table 4 . A more detailed evaluation of the procedure is given in a subsequent section. 4.2.3 Other characteristics For completeness we briefly provide examples of text fragments for which auto short, as in the second fragment.

The first fragment : ( X  X he Tswana person says that it is the month that prevents you from traveling at night X ) should be tokenised as but the algorithm yields for both the right-to-left and the left-to-right longest match strategy.
Both strategies yield the too long auto token oreke . Since the string is a perfectly valid verb, the morphological analyser provides an analysis and thereby validates the token, which prevents further subdivision. However, in the context of the sentence it should have been tokenised as ore and ke .

The second fragment : ( X  X t has then dried out a lot X ) should be tokenised as but for both the right-to-left and the left-to-right longest match strategy the algorithm produced the following: containing the too short auto tokens lo and abo .

In both strategies the longest match resulted in two candidate tokens, namely lo and a bo lo omile . The hand token lo a bo was therefore unobtainable since, as mentioned before, the algorithm cannot recombine already obtained candidate tokens. The second candidate token yielded one correct auto token, lo omile , after subsequent subdivision. 5 Results and discussion is customary in natural language processing experiments where computational results are compared to actual data (see, for example, Jurafsky and Martin 2009 :489). terms of tokens and types (i.e. unique tokens). The main results are as follows:  X  As can be seen from Table 5 , tokenisation on whitespace would have yielded  X  A comparison of the hand tokens and the results obtained by applying the  X  Using both transducers, as described in detail in Sect. 4 , yielded an F 1 -score of  X  By combining the two strategies an F 1 -score of 95 % was obtained (see A more detailed discussion of the results follows.

Table 5 contains statistics about the test corpus, specifically the number of tokens consisting of one or more orthographic words, as manually tokenised. To prevent possibly skewed statistics due to multiple occurrences of tokens, we provide both the number of tokens and the number of types. Approximately 85 % of types consist of either one or two orthographic words, with significantly fewer consisting of three (13.29 %) or four (1.42 %) orthographic words.

Table 6 contains statistics about the correctly tokenised auto tokens, using the left-to-right (LTR) and right-to-left (RTL) strategies. The numbers are not significantly different, but it should be noted that this does not mean that the tokens that are correctly identified in the two cases are the same, for example ase ka is correctly identified by the LTR strategy, but not by the RTL strategy, and vice versa for e go kganelang . Table 7 contains the number of types for which only one of the two strategies was successful.

From Tables 6 and 7 it follows that, for two-word tokens, 648 types were correctly identified by both strategies, 26 types were correctly identified by LTR only and 5 types by RTL only. Similarly, for three-word tokens, 199 types were correctly identified by both strategies, 1 type by LTR only and 26 types by RTL only. This demonstrates that the LTR strategy performs better for shorter tokens while the RTL strategy improves with token length.

Table 8 contains statistics about the incorrectly tokenised auto tokens, using the left-to-right (LTR) and right-to-left (RTL) strategies. We distinguish between three distinct categories of incorrect tokens, namely tokens that are too long, tokens that are too short and pairs of consecutive tokens of which one is too short and the other too long.

The tendency that LTR favours shorter tokens and RTL longer tokens is again illustrated in rows one and two: LTR identified 75 too long types and the RTL 88 while LTR identified 103 too short types and RTL 68.

Rows three and four further illustrate the inherent difference between the two strategies. In these cases two hand tokens were expected, but LTR produced a token that is too long followed by a token that is too short while RTL produced the opposite. This is to be expected since LTR starts its longest match from the left and RTL starts its longest match from the right. Examples are provided in Tables 9 and 10 , respectively.

The evaluation of the tokeniser, employing the two strategies respectively, is given in Table 11 .

From Tables 6 , 7 , 8 , 9 and 10 it is clear that the two strategies are complementary and could form the basis of a combined approach. This was investigated and the results are given in Table 12 .

The F 1 -score of 0.95 in Table 12 is a good result for a complex problem. The algorithm yields correctly tokenised and morphologically analysed linguistic words, ready for subsequent levels of parsing. Finally, we reiterate that perfect tokenisation falls outside the scope of tokenisation and computational morphology. 6 Future work Aspects that warrant further work include the following:
The continued maintenance and extension of the word root lexicons of the morphological analyser. A possible alternative approach would be the use of a guesser variant of the morphological analyser that contains consonant/vowel patterns for phonologically possible roots to cater for absent roots.
More extensive application and testing on larger text corpora. This would require the availability of such corpora for Tswana and a gold standard for testing.
Bootstrapping the tokeniser for Northern Sotho and Southern Sotho. This will involve the bootstrapping of the morphological analyser for the mentioned languages X  X  project that is already underway.
 Appendix See Appendix Table 13 .
 References
