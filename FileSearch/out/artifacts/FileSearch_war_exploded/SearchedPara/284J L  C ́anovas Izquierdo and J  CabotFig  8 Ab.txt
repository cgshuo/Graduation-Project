
The collaboration took two weeks and resulted in two new versions of the MDRE workflow language released. The first version was mainly focused on the polishment of the abstract syntax whereas the second one paid more attention to the concrete syn-tax (this was not enforced by us but it came out naturally). Regarding the collaborations arisen, the first version involved 7 change proposals (3 were accepted) and 5 comments; whereas the second one included 7 proposals ( 4 were accepted) and 14 comments. Table 1 summarizes the main proposals/solutions accepted 7 . The collaboration regarding the abstract syntax involved the changes shown in grey-filled boxes in Figure 8 (note that the ExportInfos metaclass was removed). Regarding the concrete syntax, the com-munity preferred a textual-based notation 8 and mainly commented on which keywords or style should be used. 5.1 Lessons Learned The case study provided us with some useful insights on the collaboro process that since then have been already integrated in Collaboro. For instance, it turned out that conflicting proposals were frequent so we adde d a conflicting relationship information explicitly in the collaboration metamodel so that once one of them was accepted we could automatically shut down the related ones. We also noted an intensive use of com-ments (easier to add) in comparison with proposals and solutions. This, linked with the discussions of what constituted a new version and when to end the discussions (e.g., if there was a unanimity but not everybody had voted, should we wait for that person? for how long?) helped us to realize the need of an explicit community manager figure in charge of making sure the collaboration is always fluid and there are no bottlenecks or deadlocks. Moreover, concurrent access t o the models (supported by the tool) turned out to be a must as well since most of the time collaborations overlapped.
 The notation view allowed the participants to quickly validate the concrete syntax. This is specially important since for non-technical users is easier to discuss at the con-crete syntax level than at the abstract leve l. However, we are aware that the process of defining notation models (and the corres ponding example models to be rendered) im-plies a considerable workload. Thus, we plan to incorporate support for a  X  X hange by example X  approach where end-users can suggest changes by providing example models (possibly inconsistent with the current DSML version) of how they would like to repre-sent certain scenarios and ask the developers to adapt the DSML to render them valid, in a similar way as proposed in [10].

The only complain we got was regarding the limited support for voting. They would have preferred more options instead of just a boolean yes/no option. Note that this would have a non negligible impact on the decision algorithms that would need to be adapted to consider the new voting options. This is a clear trade-off to be analyzed individually for each DSML.

All in all, we believe the collaboration was a s uccess since all participants were happy about the final DSML and agreed that at least now they could actually use it (instead of the original one who was never adopted). Obviously, these results cannot be generalized since the number and profile of the users (a ll of them familiar with MDE technologies) is a clear threat to the validity of the experiment which would need to be replicated to gather more information about the benefits and challenges of using Collaboro. End-user involvement is a core feature of several software development methods (such as agile-based ones). The concept of community-driven development in the develop-ment of a software product was introduced in [11] and other authors have studied this collaboration as part of the requirement elic itation [12] and modeling phases of the soft-ware [2,13,14,15], but neither of them focuses on the DSML language design process nor they present the collaboration as a process of discussion and argumentation from the beginning to the end of the development process. End-user participation is also the core of user-centered design [16], initially focused on the design of user interfaces but lately applied to other domains (e.g., agile methodologies [17] or web development [18]). Again, none of these approaches can be directly applied to the specification of a DSML. Nevertheless, ideas from these papers have indeed influenced the Collaboro process.

Regarding specific approaches around collaboration in DSML development, [5,19,10] propose to derive a first DSML definition by means of user demonstrations, where example models provided by end-users are analyzed to derive the metamodel of the language. However, these approaches do not include any discussion phase nor val-idation of the generated metamodel with the end-users. In this sense, our approaches could complement each other, theirs could be used to create an initial metamodel from which start the refinement process based on the discussions among the different users.
Subsets of our proposal can also be linked to: i) specific tools for model versioning (e.g., AMOR repository 9 and [20]) that have already proposed a taxonomy of meta-model changes, ii) online-collaboration ([21,22]) promoting synchronous collabora-tion among developers, iii) metamodel-centr ic language definition approaches ([23,24]) where the concrete syntax is considered at the same level as the abstract one and iv) collaboration protocols [25]. In all cases, Collaboro extends the contributions of those tools with explicit collaboration and justification constructs, and provides as well the possibility of offline collaborations and a more formal representation of the interactions (e.g., voting system, explicit argumentation and rationale, traceability).

Finally, the representation of the collaboration rationale is related to the area of re-quirements negotiation, argumentation and justification approaches such as [7]. The de-cision algorithms proposed in those works could be integrated in our decision engine. We have presented Collaboro, a DSML to enable the participation of all members of a community in the specification of a new domain-specific language. Collaboro allows representing (and tracking) language change proposals, solutions and comments for both the abstract and concrete syntaxes of the language. This information can then be used to justify the design decisions taken during the language definition.

As further work, we are working on how t o support the collaborative definition of the well-formed rules (e.g., OCL constraints) for the DSML under development and the integration of  X  X odel by example X  approaches where users can propose new solutions by using example models they would like to be able to define (or not) with the DSML. We also plan to study how to encourage end-user participation (e.g., by applying gam-ification techniques) in the language definitio n process as well as how to provide some assistance along the way, for instance, by providing a notation recommender compo-nent implementing well-known guidelines for concrete syntax creation (like [26,27]) that could help users choose the best notation option for a given element/s.
