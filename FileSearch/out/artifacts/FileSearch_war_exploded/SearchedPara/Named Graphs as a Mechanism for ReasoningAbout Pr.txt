 The Semantic Web is intended to move the current  X  X extual X  Web into a Web of Knowledge. RDF [1] provides a way to describe relations between Web resources as a graph; it records these relationship s as (subject, verb, object) triples. De-scription Logic languages based on standards such as RDFS and OWL, model the interrelations between types of resource. RDF defines how we may merge a set of graphs into one, but does not provide mechanisms for showing relation-ships between graphs. This ability, for example, to attribute provenance to RDF will become important as the Semantic Web grows.

RDF defines the term reification in its formal semantics [2] as a means of recording descriptions of triples. Unfortunately, reified statements cannot be used in semantic inferences, and are not asserted as part of the underlying knowledge-base. The result of this is that Semantic Web practitioners must look elsewhere for provenance recording mechanisms.

Defining provenance and recording it is a non-trivial problem since the level of recording and its intended purpose varies from one application to another. Despite this, several solutions have been proposed to address the provenance problem in RDF, most of which are compatible with, and extend, RDF abstract syntax. These include Contexts, Quads and Named Graphs.

Named Graphs, introduced by Carroll et al. [3], defines an extension that labels RDF graphs; in this paper we describe how we have used Named Graphs to reason about provenance using existing Description Logics.

The remainder of this paper provides an overview of Named Graphs and our experiences of using them. Section 2 describes earlier work and how Named Graphs can naturally reco rd provenance. Section 3 de scribes an example online collaborative tool that uses Named Graphs extensively as a framework for version control. Section 4 r ecounts our experience of Named Graphs and the challenges faced in their deployment. We discuss related work in 5. Whilst the earlier work is of benefit for th e development of domain-specific prove-nance frameworks, it does little to show how provenance can be managed uni-formly. 2.1 Provenance in Bioinformatics The my Grid project 1 has developed Grid middleware to meet the needs of bioin-formatics. In this domain, it was essential to be able to capture and manipulate provenance information [4, 5]. The proj ect takes provenance records from sources such as the Freefluo 2 workflow orchestration tool and uses an ontology to anno-tate these provenance records for future analysis. 2.2 RDF Reification RDF reification was intended as a mechanism for making provenance statements and other statements about RDF triples. Each triple is described with a special vocabulary which includes rdf:Statement .

Several problems become apparent wh en we attempt to assert provenance in this way. The key issue is that the presence of a reified triple in the knowledge-base is unrelated to the presence of the triple itself; thus including the reification does not of itself assert the triple. If we choose to assert each triple as well as its reification, then it is asserted unconditionally and this triple is not bound to the reification.

One major consequence of these problems is that it is not possible to rea-son about triples in the context of their provenance through the RDF reifica-tion mechanism. If the reified triple is not bound to an asserted (or not as the case may be) triple, then RDF reification is of no real use in the recording of provenance. 2.3 Named Graphs Named Graphs provide a natural way to r ecord provenance. Ea ch graph is poten-tially labelled by a URI, which can then be referenced by other Named Graphs. Fig. 1 depicts two Named Graphs using the TriG syntax [6], where the first graph states that the second graph was made by Rowland Watkins, while the second graph self-references , stating its creation date.

Provenance with Named Graphs is not limited to simple assertions. Such assertions, whilst true according to the open world assumption, do not uniquely bind an owner to an assertion, or set of assertions. Cryptographic methods such as digital signatures offer one way to uniquely bind a security principal to a digital document and coupled with digital certificates add non-repudiation to signatures. Such methods are also a first step towards a basic level of trust on the Semantic Web.

RDF signatures have been realized as part of the Semantic Web Publishing framework (SWP), an extension to NG4J [7]. SWP defines an ontology that follows the XML Signature Recommendation. We create a canonical Named Graph [8] then hash it with an appropriate secure digest (SHA-1 in our case). This digest is placed in a special Named Graph called a Warrant Graph [3].
A Warrant Graph can contain any number of graph digests. Each digested graph is explicitly asserted by a known principal who possesses a digital certifi-cate (X.509) or PGP key. The Warrant Graph asserts itself and signs itself with the principals credentials, certifying that not only did the principal make the assertion, but that the assertion has not been altered. As an example of how Named Graphs can be used as a mechanism for reason-ing about provenance, we developed our document provenance ontology that describe resources in a software version control repository; this ontology became the basis for out online collaborative tool [9]. This was conceived as an alternative to systems such as CVS. Fig. 2 shows our ontology which makes maximum use of several other well known ontologies (DCMI 3 , FOAF, DOAP) to help maintain interoperability.

Although our ontology appears small and simplistic it does capture all the information that we might expect in version control metadata, e.g. relation-ships to other versions ( dcterms:replaces , dcterms:isReplacedBy ), author-ship ( foaf:maker ), and commit date ( dp:dateSubmitted ). By keeping our on-tology small we reduce complexity and increase maintainability.

We have used our ontology as the basis for a semantic version control system; class instances serve a similar role to a relational database that we query and display in a WikiWikiWeb interface. While RDF is an interesting method for storing data, it is invariably slower than a relational database. An OWL-DL ontology, however, has a distinct advantage over a relational database since we are able to perform semantic inferences over our instance data; inferred data might tell us new information based on qu estions (queries) made by a developer to the version control system. Applying Named Graphs to our OWL-DL ontology allowed us to effectively partition metadata which could then be signed using our work on SWP. Each top-level class instance in the Document Provenance ontology is contained in a Named Graph, signed with a digital signature in a Warrant graph. The combi-nation of digital signatures and Description Logic means at its base our online collaborative tool has two levels of internal verification: cryptographically verify the integrity of the our metadata; check the semantic consistency of our meta-data using the OWL-DL Class and Property axioms.

In addition to OWL-DL consistency checking, we have used the Jena 4 infer-encing engine because we are able to tailo r its inference rules to suit our needs. Custom rules have been used to answer complex queries in our online collabora-tive tool. Inferences over large semantic d atastores is inevitably a slow process; our strategy has been rather than update inferences incrementally, they are run as required since they are rederivable. TRIPLE [10] adopts a Named Graph approach; however, it incorporates data representation and Horn-clause logic in the same syntax. It is intended as a rule language supporting applications that require RDF reasoning and transfor-mation under different semantics. Its use of Horn-clause logic means it can be enacted by Prolog systems. 3Store [11], uses quads to track the provenance of triples which has been used in several novel applications including http://hyphen.info/. 3Store also supports RDFS entailment, although there does not appear to be any general purpose inference engine to date.
 Reggiori et al. [12] use contexts as a means to record provenance in their RDF-Store. They see contexts as an additional and orthogonal dimension to the RDF triple where each RDF statement is flagged as belonging to a specific context.
The Provenance Aware Service Oriented Architecture (PASOA) Project con-tinues some of the work done by the my Grid project on data provenance. Its aim is to investigate the nature of provenan ce and reason about the accuracy of data and service in the e-Science domain. It has so far developed a provenance recording service, called PReServ [13], an implement ation of the Provenan ce Recording Pro-tocol (PReP) [14] developed by the PASOA project 5 . PASOA can and will serve as a valuable frontend for gathering provenance data into our reasoning mechanism. Named Graphs provide a natural way to record provenance. They offer an al-ternative to RDF reification that is powerful and has been used in practice to associate digital signatures with graphs and reason about them.

Our work on semantic version control b rings together the Semantic Web, dig-ital signatures and the WikiWikiWeb, demonstrating Named Graphs to be of practical use. Not only does our solution have a query mechanism for displaying RDF in the Wiki, it also has an advanced semantic inference facility so that software developers can learn more about the software engineering process. Ex-perience from this work has taught u s a great deal about the effects Named Graphs have on Description Logic languages and semantic inference strategies.
Future work will see a grid service interface compatible with those provided by the Open Middleware Infrastructure Institute (OMII). Maven 6 integration would also be of benefit, integrating software project management with software version control.
