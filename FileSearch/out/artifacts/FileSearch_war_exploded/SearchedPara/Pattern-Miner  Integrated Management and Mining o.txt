 This demo presents Pattern-Miner, an integrated environment for pattern management and mining that deals with the whole lifecycle of patterns, from thei r generation (using data mining techniques) to their storage a nd querying, putting also emphasis on the comparison between pattern s and meta-mining operations over the extracted patterns. Patte rn comparison (comparing results of the data mining process) and meta-mining are high level pattern operations that can be applied in a variety of applications, from database change management to image comparison and retrieval. H.2.8 [Database Management]: Database Applications  X  Data Mining H.3.0 [Information Storage and Retrieval]: General. Design, Algorithms, Management. Pattern management, pattern base s, pattern comparison, pattern monitoring, meta-mining, data mining, pattern representation. Due to the wide application of Knowledge Discovery in Databases (KDD) and as a resu lt of data flood that appears nowadays, the amount of patterns extracted from heterogeneous data sources (e.g. business, scie nce, telecommunications, Web) is huge and, quite often, non-manageab le by humans. Thus, there is a need for efficient pattern management including issues like modeling, storage, retrieval and querying of patterns [6]. Pattern management is not an easy task. Except for the huge amount of the generated patterns, another reason is the large variety of pattern types, as a result of the different application needs that each type tries to accomplish. Traditionally, research work on Data Mining focuses on efficient mining, putting aside the pattern management problem. Recently however, the need for pattern management has been recognized by both scientific and industrial parts and several approaches have been proposed like PMML standard [3] and PMBS approach [5]. In this paper, we demonstrat e Pattern-Miner, an integrated environment that deals with the different aspects of the pattern management problem, namely pa ttern modeling, storage and retrieval issues, using state-of-t he-art approaches. This is in contrast to existing tools that deal with specific aspects of the pattern management problem, mos tly representation and storage. Although, pattern representation and storage are very important issues, the amount of patterns generated nowadays and the complexity of the different pattern types (clusters, decision trees, frequent itemsets, etc.) call for more sophisticated operations over the extracted patterns, like pattern comparison and meta-mining. Pattern-Miner offers an integrat ed environment that provides the capability not only to generate and manage the different types of patterns in a unified way, but also to apply more advanced operations over patterns, such as comparison and meta-mining, without facing interoperability or incompatibility problems if using different applications for each task. Pattern-Miner follows a modular architecture and integrates the different Data Mining components offering transparency to the end user. Before we proceed with the presentation of Pattern-Miner, we provide some basic notions on patterns and pattern bases, following the PBMS approach [5]. These notions comprise the logical model of our approach and the different retrieval capabilities over patterns are built upon them. The pattern concept is the cornerstone of a pattern-base. A pattern is a compact and rich in semantics representation of raw data. Patterns are stored in a so called pattern base for future analysis. The pattern base model consists of three layers: pa ttern types, patterns, and pattern classes. A pattern type is a description of the pattern structure, e.g. decision trees, association rules, clusters etc. A pattern type is pattern type, ss (structure schema) descri bes the structure of the pattern type (e.g. the head and the body of an association rule), ds (source schema) describes the da taset from which patterns are extracted, ms (measure schema) defines the quality of the source data representation achieved by patterns (e.g. the support and the confidence in case of an association rule pattern) and f is the formula that describes the rela tionship between the source data space and the pattern space. A pattern is an instance of the corresponding pattern type and a class is a collection of semantically related patterns of the same type. After this short overview of the pattern-base appr oach, we present in detail the components of the Pattern-Miner architecture. The Pattern-Miner architecture is depicted in Figure 1. In the core of the system lies the Pattern-Miner engine which arranges the communication between the diffe rent peripheral components (Data Mining engine, Pattern Ba se, Pattern Comparison module, Meta-mining module) and also provides the end user interface. Pattern extraction : The Pattern Extraction component is responsible for the extraction of patterns according to user defined criteria, like dataset selection, pre-processing, mining algorithms and their parameters. We employ for this task WEKA [7], since it is an open source tool and offers a variety of algorithms for different mining tasks (including classificati on, clustering, and association rule extraction) as well as preprocessing capabilities over the data. Pattern representation: Pattern representation is not a simple task mainly because one can find a great variety of pattern types (decision trees, clusters, etc.) of varying complexity. The need for pattern representation in KDD has been recognized by both research and industrial commun ities and several representation approaches have been proposed. The most popular choice is PMML [3], an XML-based language that provides a quick and easy way to define data mining and statistical models using a vendor-independent method and sh are these models between PMML compliant applications. Th e structure of the models in PMML is described by an XML Schema; different models have their own schemes. The term  X  X ode l X  in PMML is equivalent to the term  X  X attern type X  in our approach. In Pattern-Miner, we adopt the PMML standard for th e representation of patterns and thus, we convert the output of the Data Mining engine component into PMML format. Pattern storage: Since patterns are represented as XML documents (through PMML), a nativ e XML database system is used for their storage in the Pattern Base . In particular, we employ the open source Berkeley DBXML [8], which comprises an extension of the Berkeley DB with the addition of an XML parser, XML indexes and the XQuery data query language. Berkeley DBXML stores XML doc uments into logical groups, called Containers (the Collections in other native XML database systems). Users can define various properties for each container (whether to store the whole documen t or parts of it, which indexes to create, etc.). Apart from XML documents, non-XML documents as well as metadata for the XML documents can be stored. Metadata are user-defined in the form  X  X roperty-value X  and easily retrieved. Pattern querying: Pattern-Miner provides a basic environment for querying the pattern base. The user defines the pattern set to be queried, and imposes his/her query in the XQuery language. Regarding the supported query types, the user can retrieve either the whole pattern or any compone nt of the pattern (either the structure or the measure compone nt) and of course, to impose constraints over these component s. Pattern-Miner creates the proper connection to the pattern base and captures the result in order to return it to the user. Th e result is shown in the screen while it is also saved in the file system. Pattern comparison: One of the most important operations on patterns is that of pattern comparison . Defining dissimilarity operators for patterns could be used to express similarity queries, including k-nearest neighbor queries (i.e. find the k-most similar pattern(s) to a query pattern) and range queries (i.e. find the most similar pattern(s) to a given pa ttern within a given range). Dissimilarity could be also employed in order to monitor and detect changes upon patterns extracted from a dynamic environment [4]. Recognizing th e importance of dissimilarity assessment in pattern management , we distinguish the comparison process from the querying process and we implement it separately through the Pattern comparison module . The comparison is carried out on the basis of PANDA [1], a generic and flexible framework for the comparison of patterns defined over raw data and over other patterns as well. Comparison utilizes both structure and measure components of patterns. The user defines the patterns as well as the way that they s hould be compared, i.e. how the different components of PANDA are instantiated. The output is a dissimilarity score accompanied with a justification, a report actually of how the component pa tterns have been matched. In our experiments and for the needs of some real case studies [9] we enchanced the PANDA framework by adding a couple of new cluster comparison algorithms. Meta-mining: Due to the large amount of extracted patterns, several approaches have lately emerged that apply Data Mining techniques over patterns instead of raw data, in order to extract more compact information. The Meta-mining module takes as input a set of different clusteri ng results extracted from the same dataset (through different cluste ring algorithms or different parameters) or from different datasets (through from the same generative distribution) and app lies Data Mining techniques over them, in order to extract meta-patterns . So far, the meta-mining component focuses on meta-clust ering [2], i.e. grouping of clustering results into groups of similar clusterings. The user has full control of the clustering process by choosing the similarity function and the clustering algorithm. All Pattern-Miner components are developed in Java. To make clear the potential use and the value of Pattern-Miner, we consider a supermarket as a simple case study and its manager as the end user. Among other pattern types, the manager is interested in discovering the produc ts that customers tend to buy together, i.e. association rules. Except for knowing the product associations at each month, the manager also wants to know how these associations change from month to month: are there any new associations, did some old a ssociation disappeared, did some association became stronger (higher confidence) or weaker. Also, he/she wants to discover groups of months with similar associations, so as to decide some strategy for each group instead of each month. This process involves storage of the patterns discovered at each month, querying, comparison and meta-mining operations over them. Existing Da ta Mining tools do not address all these issues. On the contrary, Pattern-Miner provides the manager with all this information in an easy and transparent way. We describe below how each component works for this supermarket scenario. Pattern extraction and storage: The user defines the data source, the Data Mining algorithm a nd its parameters, e.g. in our case the supermarket database, the association rule algorithm and the minimum support and confidence parameters. The extraction takes place in the Data Mining engine and the results are converted into PMML format before being stored in a user-specified container in the XML pattern base (as well as in a file on the hard disk). In Figure 2 the pattern extraction and storage screen is depicted for the case of association rule patterns. Using PMML, the exchange of patterns be tween different applications is possible without the need for special import-export tools. Pattern query: The user defines the pattern set to be queried and the query itself, in Xquery language. Pattern-Miner engine creates the connection to the pattern base, executes the query and returns the results to the user (and also saves them to a file). A sample query is shown in Figure 3, de scribed in both natural language and Xquery. Figure 3: A sample query in natural language and in XQuery Pattern comparison: The user defines the patterns to be compared as well as the comparison parameters. In our example, the manager asks for the comparison of association rule patters extracted from the supermarket data of the two previous months, in order to inspect whether and how the buying behavior has been changed. The patterns are retrieved from the Pattern-Base. Then, the manager configures PANDA [1 ] by choosing the appropriate comparison function from the candi date functions implemented for each pattern type. It should be noticed that in the PANDA framework there are several comparison functions implemented, and the user, depending on the application can decide or test what function better fits his/her application. The results are returned to the manager, who can detect any changes in the sales-patterns and decide whether these changes were expected (based on company X  X  strategy) or not (indi cating some suspicious or non-predictable behavior). Based on the results, the manager can decide future strategies re garding offerings, supply etc. The manager can also extract clusters of customers based on their buying habits or their demographi cs. Comparing such clusters of customers can reveal buying patterns over the year, and thus the manager can decide about the supp lies. In Figure 4 the clustering comparison tab is shown. 
Retrieve the association rules from the super_market dataset that have a support value greater than 0.2. Meta-mining: The user defines the pattern sets to be used as input to the Meta-mining module (e .g. sets of rules extracted at each month of 2007), selects the clustering algorithm/ parameters, as well as the similar ity measure between sets of rules. The input sets are clustered into groups of similar sets of rules (e.g. March and April could be placed to the same group, since they depict similar buying behavior), which can be also stored in the pattern base for future use. The manager can exploit these results in order to decide similar strategies fo r months belonging to the same cluster. Pattern-Miner is an integrated environment for pattern management that supports the whole lifecycle of patterns from their generation to their retrieval, and also offers sophisticated operations over patterns, like comparison and meta-mining. Pattern-Miner follows a modular architecture that employs state-of-the-art approaches at each component. The different building blocks are implemented in JAVA. Several improvements can be ca rried out: First, the existing components can be enhanced. For example, the querying component could support more query types, like k-nearest neighbor queries, range queries and also the query processing could be more efficient by employing appropriate index structures. through appropriate indices a nd new query types could be supported. Also, the Meta-mining module can be extended so as to support more pattern types, like d ecision trees, association rules, sequences. Second, new components can be added, like a visualization module for better interpretation of the results or a pattern monitoring module for monitori ng and change detection over patterns extracted from a dynamic population. Except for the scenario we described, other potential applications include cluster-based image retrieval [9], pattern validation, monitoring/ change detection, comparison of patterns extracted from different sites in a distribut ed environment setting, etc. In this context, we are planning to incorporate to the PANDA framework, some innovative fuzzy clustering comparison techniques we have recently developed. 
