 Building and maintaining knowledge-rich re-sources is of great importance to information ex-traction, question answering, and textual entail-ment. Given the endless amount of data we have at our disposal, many efforts have focused on mining knowledge from structured or unstructured text, including ground facts (Etzioni et al., 2005), se-mantic lexicons (Thelen and Riloff, 2002), ency-clopedic knowledge (Suchanek et al., 2007), and concept lists (Katz et al., 2003). Researchers have also successfully harvested relations between en-tities, such as is-a (Hearst, 1992; Pasca, 2004) and part-of (Girju et al., 2003). The kinds of knowl-edge learned are generally of two kinds: ground instance facts ( New York is-a city , Rome is the cap-ital of Italy ) and general relational types ( city is-a location , engines are part-of cars ).

A variety of NLP tasks involving inference or entailment (Zanzotto et al., 2006), including QA (Katz and Lin, 2003) and MT (Mt et al., 1988), require a slightly different form of knowledge, de-rived from many more relations. This knowledge is usually used to support inference and is ex-pressed as selectional restrictions (Wilks, 1975) (namely, the types of arguments that may fill a given relation, such as person live-in city and air-line fly-to location ). Selectional restrictions con-strain the possible fillers of a relation, and hence the possible contexts in which the patterns ex-pressing that relation can participate in, thereby enabling sense disambiguation of both the fillers and the expression itself.

To acquire this knowledge two common ap-proaches are employed: clustering and patterns. While clustering has the advantage of being fully unsupervised, it may or may not produce the types and granularity desired by a user. In contrast pattern-based approaches are more precise, but they typically require a handful to dozens of seeds and lexico-syntactic patterns to initiate the learn-ing process. In a closed domain these approaches are both very promising, but when tackling an un-bounded number of relations they are unrealistic. The quality of clustering decreases as the domain becomes more continuously varied and diverse, and it has proven difficult to create collections of effective patterns and high-yield seeds manually.
In addition, the output of most harvesting sys-tems is a flat list of lexical semantic expressions such as  X  X ew York is-a city X  and  X  X irus causes flu X  . However, using this knowledge in inference requires it to be formulated appropriately and or-ganized in a semantic repository. (Pennacchiotti and Pantel, 2006) proposed an algorithm for au-tomatically ontologizing semantic relations into WordNet. However, despite its high precision en-tries, WordNet X  X  limited coverage makes it impos-sible for relations whose arguments are not present in WordNet to be incorporated. One would like a procedure that dynamically organizes and extends its semantic repository in order to be able to ac-commodate all newly-harvested information, and thereby become a global semantic repository.
Given these considerations, we address in this paper the following question: How can the selec-tional restrictions of semantic relations be learned automatically from the Web with minimal effort us-ing lexico-syntactic recursive patterns?
The contributions of the paper are as follows:  X  A novel representation of semantic relations  X  An automatic procedure to learn the se- X  An exhaustive human-based evaluation of the  X  A comparison of the results with some large
The rest of the paper is organized as follows. In the next section, we review related work. Section 3 addresses the representation of semantic rela-tions using recursive patterns. Section 4 describes the bootstrapping mechanism that learns the selec-tional restrictions of the relations. Section 5 de-scribes data collection. Section 6 discusses the ob-tained results. Finally, we conclude in Section 7. A substantial body of work has been done in at-tempts to harvest bits of semantic information, in-cluding: semantic lexicons (Riloff and Shepherd, 1997), concept lists (Lin and Pantel, 2002), is-a relations (Hearst, 1992; Etzioni et al., 2005; Pasca, 2004; Kozareva et al., 2008), part-of re-lations (Girju et al., 2003), and others. Knowl-edge has been harvested with varying success both from structured text such as Wikipedia X  X  infoboxes (Suchanek et al., 2007) or unstructured text such as the Web (Pennacchiotti and Pantel, 2006; Yates et al., 2007). A variety of techniques have been employed, including clustering (Lin and Pantel, 2002), co-occurrence statistics (Roark and Char-niak, 1998), syntactic dependencies (Pantel and Ravichandran, 2004), and lexico-syntactic pat-terns (Riloff and Jones, 1999; Fleischman and Hovy, 2002; Thelen and Riloff, 2002).

When research focuses on a particular relation, careful attention is paid to the pattern(s) that ex-press it in various ways (as in most of the work above, notably (Riloff and Jones, 1999)). But it has proven a difficult task to manually find ef-fectively different variations and alternative pat-terns for each relation. In contrast, when re-search focuses on any relation, as in TextRun-ner (Yates et al., 2007), there is no standardized manner for re-using the pattern learned. TextRun-ner scans sentences to obtain relation-independent lexico-syntactic patterns to extract triples of the form ( John , fly to , Prague ). The middle string de-notes some (unspecified) semantic relation while the first and third denote the learned arguments of this relation. But TextRunner does not seek spe-cific semantic relations, and does not re-use the patterns it harvests with different arguments in or-der to extend their yields.

Clearly, it is important to be able to specify both the actual semantic relation sought and use its tex-tual expression(s) in a controlled manner for max-imal benefit.

The objective of our research is to combine the strengths of the two approaches, and, in addition, to provide even richer information by automati-cally mapping each harvested argument to its su-pertype(s) (i.e., its semantic concepts). For in-stance, given the relation destination and the pat-tern X flies to Y , automatically determining that John, Prague ) and ( John, conference ) are two valid filler instance pairs, that ( RyanAir, Prague ) is another, as well as that person and airline are supertypes of the first argument and city and event of the second. This information provides the se-lectional restrictions of the given semantic rela-tion, indicating that living things like people can fly to cities and events, while non-living things like airlines fly mainly to cities. This is a significant improvement over systems that output a flat list of lexical semantic knowledge (Thelen and Riloff, 2002; Yates et al., 2007; Suchanek et al., 2007).
Knowing the sectional restrictions of a semantic relation supports inference in many applications, for example enabling more accurate information extraction. (Igo and Riloff, 2009) report that pat-terns like  X  attack on  X  NP  X   X  can learn undesirable words due to idiomatic expressions and parsing er-rors. Over time this becomes problematic for the bootstrapping process and leads to significant de-terioration in performance. (Thelen and Riloff, 2002) address this problem by learning multiple semantic categories simultaneously, relying on the often unrealistic assumption that a word cannot belong to more than one semantic category. How-ever, if we have at our disposal a repository of se-mantic relations with their selectional restrictions, the problem addressed in (Igo and Riloff, 2009) can be alleviated.

In order to obtain selectional restriction classes, (Pennacchiotti and Pantel, 2006) made an attempt to ontologize the harvested arguments of is-a , part-of , and cause relations. They mapped each argument of the relation into WordNet and identi-fied the senses for which the relation holds. Un-fortunately, despite its very high precision en-tries, WordNet is known to have limited cover-age, which makes it impossible for algorithms to map the content of a relation whose arguments are not present in WordNet. To surmount this limitation, we do not use WordNet, but employ a different method of obtaining superclasses of a filler term: the inverse doubly-anchored patterns DAP  X  1 (Hovy et al., 2009), which, given two ar-guments, harvests its supertypes from the source corpus. (Hovy et al., 2009) show that DAP  X  1 is reliable and it enriches WordNet with additional hyponyms and hypernyms. A singly-anchored pattern contains one example of the seed term (the anchor) and one open posi-tion for the term to be learned. Most researchers use singly-anchored patterns to harvest semantic relations. Unfortunately, these patterns run out of steam very quickly. To surmount this obstacle, a handful of seeds is generally used, and helps to guarantee diversity in the extraction of new lexico-syntactic patterns (Riloff and Jones, 1999; Snow et al., 2005; Etzioni et al., 2005).
 Some algorithms require ten seeds (Riloff and Jones, 1999; Igo and Riloff, 2009), while others use a variation of 5, 10, to even 25 seeds (Taluk-dar et al., 2008). Seeds may be chosen at ran-dom (Davidov et al., 2007; Kozareva et al., 2008), by picking the most frequent terms of the desired class (Igo and Riloff, 2009), or by asking humans (Pantel et al., 2009). As (Pantel et al., 2009) show, picking seeds that yield high numbers of differ-ent terms is difficult. Thus, when dealing with unbounded sets of relations (Banko and Etzioni, 2008), providing many seeds becomes unrealistic.
Interestingly, recent work reports a class of pat-terns that use only one seed to learn as much infor-mation with only one seed. (Kozareva et al., 2008; Hovy et al., 2009) introduce the so-called doubly-anchored pattern (DAP) that has two anchor seed positions  X   X  type  X  such as  X  seed  X  and *  X , plus one open position for the terms to be learned. Learned terms can then be replaced into the seed position automatically, creating a recursive procedure that is reportedly much more accurate and has much higher final yield. (Kozareva et al., 2008; Hovy et al., 2009) have successfully applied DAP for the learning of hyponyms and hypernyms of is-a rela-tions and report improvements over (Etzioni et al., 2005) and (Pasca, 2004).

Surprisingly, this work was limited to the se-mantic relation is-a . No other study has described the use or effect of recursive patterns for differ-ent semantic relations. Therefore, going beyond (Kozareva et al., 2008; Hovy et al., 2009), we here introduce recursive patterns other than DAP that use only one seed to harvest the arguments and su-pertypes of a wide variety of relations. (Banko and Etzioni, 2008) show that seman-tic relations can be expressed using a handful of relation-independent lexico-syntactic patterns. Practically, we can turn any of these patterns into recursive form by giving as input only one of the arguments and leaving the other one as an open slot, allowing the learned arguments to replace the initial seed argument directly. For example, for the relation  X  fly to  X , the following recursive pat-terns can be built:  X  * and  X  seed  X  fly to *  X ,  X   X  seed  X  and * fly to *  X ,  X  * fly to  X  seed  X  and *  X ,  X  * fly to * and  X  seed  X   X ,  X   X  seed  X  fly to *  X  or  X  * fly to  X  seed  X   X , where  X  seed  X  is an example like John or Ryanair , and (  X  ) indicates the position on which the ar-guments are learned. Conjunctions like and , or are useful because they express list constructions and extract arguments similar to the seed . Poten-tially, one can explore all recursive pattern varia-tions when learning a relation and compare their yield, however this study is beyond the scope of this paper.

We are particularly interested in the usage of re-cursive patterns for the learning of semantic re-lations not only because it is a novel method, but also because recursive patterns of the DAP fashion are known to: (1) learn concepts with high precision compared to singly-anchored pat-terns (Kozareva et al., 2008), (2) use only one seed instance for the discovery of new previously unknown terms, and (3) harvest knowledge with minimal supervision. 4.1 Problem Formulation The main goal of our research is:
Figure 1 shows an example of the task and the types of information learned by our algorithm.
Given a seed John and a semantic relation fly to expressed using the recursive pattern  X  * and John fly to *  X , our algorithm learns the left side argu-ments { Brian, Kate, bees, Delta, Alaska } and the right side arguments { flowers, trees, party, New York, Italy, France } . For each argument, the algo-rithm harvests supertypes such as { people, artists, politicians, airlines, city, countries, plants, event } among others. The colored links between the right and left side concepts denote the selectional re-strictions of the relation. For instance, people fly to events and countries , but never to trees or flow-ers . 4.2 System Architecture We propose a minimally supervised bootstrap-ping algorithm based on the framework adopted in (Kozareva et al., 2008; Hovy et al., 2009). The al-gorithm has two phases: argument harvesting and supertype harvesting. The final output is a ranked list of interlinked concepts which captures the se-lectional restrictions of the relation. 4.2.1 Argument Harvesting In the argument extraction phase, the first boot-strapping iteration is initiated with a seed Y and a recursive pattern  X  X   X  and Y verb+prep | verb | noun Z  X  , where X  X  and Z  X  are the placeholders for the arguments to be learned. The pattern is submit-ted to Yahoo! as a web query and all unique snip-pets matching the query are retrieved. The newly learned and previously unexplored arguments on the X  X  position are used as seeds in the subse-quent iteration. The arguments on the Z  X  posi-tion are stored at each iteration, but never used as seeds since the recursivity is created using the terms on X and Y . The bootstrapping process is implemented as an exhaustive breadth-first algo-rithm which terminates when all arguments are ex-plored.

We noticed that despite the specific lexico-syntactic structure of the patterns, erroneous in-formation can be acquired due to part-of-speech tagging errors or flawed facts on the Web. The challenge is to identify and separate the erroneous from the true arguments. We incorporate the har-vested arguments on X and Y positions in a di-rected graph G = ( V, E ) , where each vertex v  X  V is a candidate argument and each edge ( u, v )  X  E indicates that the argument v is gener-ated by the argument u . An edge has weight w cor-responding to the number of times the pair ( u, v ) is extracted from different snippets. A node u is ranked by u = which represents the weighted sum of the outgo-ing and incoming edges normalized by the total number of nodes in the graph. Intuitively, our con-fidence in a correct argument u increases when the argument (1) discovers and (2) is discovered by many different arguments.

Similarly, to rank the arguments standing on the Z position, we build a bipartite graph G 0 = ( V 0 , E 0 ) that has two types of vertices. One set of vertices represents the arguments found on the Y position in the recursive pattern. We will call these V y . The second set of vertices represents the arguments learned on the Z position. We will call these V z . We create an edge e 0 ( u 0 , v 0 )  X  E 0 be-tween u 0  X  V y and v 0  X  V z when the argument on the Z position represented by v 0 was harvested by the argument on the Y position represented by u 0 . The weight w 0 of the edge indicates the number of times an argument on the Y position found Z . Vertex v 0 is ranked as v 0 = a very large corpus, like the Web, we assume that a correct argument Z is the one that is frequently discovered by various arguments Y . 4.2.2 Supertype Harvesting In the supertype extraction phase, we take all &lt; X,Y &gt; argument pairs collected during the argu-ment harvesting stage and instantiate them in the inverse DAP  X  1 pattern  X * such as X and Y X  . The query is sent to Yahoo! as a web query and all 1000 snippets matching the pattern are retrieved. For each &lt; X,Y &gt; pair, the terms on the (*) position are extracted and considered as candidate supertypes.
To avoid the inclusion of erroneous supertypes, again we build a bipartite graph G 00 = ( V 00 , E 00 ) . The set of vertices V sup represents the supertypes, while the set of vertices V p corresponds to the  X  X,Y  X  pair that produced the supertype. An edge e shows that the pair  X  X,Y  X  denoted as u 00 harvested the supertype represented by v 00 .
 For example, imagine that the argument X  X  = Ryanair was harvested in the previous phase by the recursive pattern  X  X   X  and EasyJet fly to Z  X   X  . Then the pair  X  Ryanair,EasyJet  X  forms a new Web query  X * such as Ryanair and EasyJet X  which learns the supertypes  X  X irlines X  and  X  X arriers X  . The bipartite graph has two vertices v 00 1 and v 00 2 for the supertypes  X  X irlines X  and  X  X arriers X  , one ver-tex u 00 3 for the argument pair  X  Ryanair, EasyJet  X  , and two edges e 00 1 ( u 00 3 , v 00 1 ) and e 00 2 ( u 00 v Intuitively, a supertype which is discovered mul-tiple times by various argument pairs is ranked highly.

However, it might happen that a highly ranked supertype actually does not satisfy the selectional restrictions of the semantic relation. To avoid such situations, we further instantiate each supertype concept in the original pattern 1 . For example,  X  X ircompanies fly to * X  and  X  X arriers fly to * X  . If the candidate supertype produces many web hits for the query, then this suggests that the term is a relevant supertype.

Unfortunately, to learn the supertypes of the Z arguments, currently we have to form all possi-ble combinations among the top 150 highly ranked concepts, because these arguments have not been learned through pairing. For each pair of Z argu-ments, we repeat the same procedure as described above. So far, we have described the mechanism that learns from one seed and a recursive pattern the selectional restrictions of any semantic relation. Now, we are interested in evaluating the per-formance of our algorithm. A natural question that arises is:  X  X ow many patterns are there? X  . (Banko and Etzioni, 2008) found that 95% of the semantic relations can be expressed using eight lexico-syntactic patterns. Space prevents us from describing all of them, therefore we focus on the three most frequent patterns which capture a large diversity of semantic relations. The relative fre-quency of these patterns is 37.80% for  X  X erbs X , 22.80% for  X  X oun prep X , and 16.00% for  X  X erb prep X . 5.1 Data Collection Table 1 shows the lexico-syntactic pattern and the initial seed we used to express each semantic rela-tion. To collect data, we ran our knowledge har-vesting algorithm until complete exhaustion. For each query submitted to Yahoo!, we retrieved the top 1000 web snippets and kept only the unique ones. In total, we collected 30GB raw data which was part-of-speech tagged and used for the argu-ment and supertype extraction. Table 1 shows the obtained results. Table 1: Total Number of Harvested Arguments.
An interesting characteristic of the recursive patterns is the speed of leaning which can be mea-sured in terms of the number of unique argu-ments acquired during each bootstrapping itera-tion. Figure 2 shows the bootstrapping process for the  X  X ause X  and  X  X ress X  relations. Although both relations differ in terms of the total number of it-erations and harvested items, the overall behavior of the learning curves is similar. Learning starts of very slowly and as bootstrapping progresses a rapid growth is observed until a saturation point is reached.
The speed of leaning is related to the connectiv-ity behavior of the arguments of the relation. In-tuitively, a densely connected graph takes shorter time (i.e., fewer iterations) to be learned, as in the  X  X ork on X  relation, while a weakly connected net-work takes longer time to harvest the same amount of information, as in the  X  X ork for X  relation. In this section, we evaluate the results of our knowledge harvesting algorithm. Initially, we de-cided to conduct an automatic evaluation compar-ing our results to knowledge bases that have been extracted in a similar way (i.e., through pattern ap-plication over unstructured text). However, it is not always possible to perform a complete com-parison, because either researchers have not fully explored the same relations we have studied, or for those relations that overlap, the gold standard data was not available.

The online demo of TextRunner 2 (Yates et al., 2007) actually allowed us to collect the arguments for all our semantic relations. However, due to Web based query limitations, TextRunner returns only the first 1000 snippets. Since we do not have the complete and ranked output of TextRunner, comparing results in terms of recall and precision is impossible.

Turning instead to results obtained from struc-tured sources (which one expects to have high correctness), we found that two of our relations overlap with those of the freely available ontology Yago (Suchanek et al., 2007), which was harvested from the Infoboxes tables in Wikipedia. In addi-tion, we also had two human annotators judge as many results as we could afford, to obtain Preci-sion. We conducted two evaluations, one for the arguments and one for the supertypes. 6.1 Human-Based Argument Evaluation In this section, we discuss the results of the har-vested arguments. For each relation, we selected the top 200 highly ranked arguments. We hired two annotators to judge their correctness. We cre-ated detailed annotation guidelines that define the labels for the arguments of the relations, as shown in Table 2. (Previously, for the same task, re-searchers have not conducted such an exhaustive and detailed human-based evaluation.) The anno-tation was conducted using the CAT system 3 .
We allow multiple labels to be assigned to the same concept, because sometimes the concept can appear in different contexts that carry various con-ceptual representations. Although the labels can be easily collapsed to judge correct and incorrect terms, the fine-grained annotation shown here pro-vides a better overview of the information learned by our algorithm.

We measured the inter-annotator agreement for all labels and relations considering that a single entry can be tagged with multiple labels. The Kappa score is around 0 . 80 . This judgement is good enough to warrant using these human judge-ments to estimate the accuracy of the algorithm. We compute Accuracy as the number of examples tagged as Correct divided by the total number of examples.

Table 4 shows the obtained results. The over-all accuracy of the argument harvesting phase is 91%. The majority of the occurred errors are due to part-of-speech tagging. Table 3 shows a sam-ple of 10 randomly selected examples from the top 200 ranked and manually annotated arguments. 6.2 Comparison against Existing Resources In this section, we compare the performance of our approach with the semantic knowledge base Yago 4 that contains 2 million entities 5 , 95% of which were manually confirmed to be correct. In this study, we compare only the unique arguments of the  X  X ive in X  and  X  X ork at X  relations. We provide Precision scores using the following measures: Table 5 shows the obtained results.

We carefully analyzed those arguments that were found by one of the systems but were miss-ing in the other. The recursive patterns learn infor-mation about non-famous entities like Peter and famous entities like Michael Jordan. In contrast, Yago contains entries mostly about famous enti-ties, because this is the predominant knowledge in Wikipedia. For the  X  X ive in X  relation, both repos-itories contain the same city and country names. However, the recursive pattern learned arguments like pain , effort which express a manner of living, and locations like slums , box . This information is missing from Yago. Similarly for the  X  X ork at X  relation, both systems learned that people work at universities. In addition, the recursive pattern learned a diversity of company names absent from Yago.

While it is expected that our algorithm finds many terms not contained in Yago X  X pecifically, the information not deemed worthy of inclusion in Wikipedia X  X e are interested in the relatively large number of terms contained in Yago but not found by our algorithm. To our knowledge, no other automated harvesting algorithm has ever been compared to Yago, and our results here form a baseline that we aim to improve upon. And in the future, one can build an extensive knowledge harvesting system combining the wisdom of the crowd and Wikipedia. 6.3 Human-Based Supertype Evaluation In this section, we discuss the results of harvest-ing the supertypes of the learned arguments. Fig-ure 3 shows the top 100 ranked supertypes for the  X  X ause X  and  X  X ork on X  relations. The x-axis in-dicates a supertype, the y-axis denotes the number of different argument pairs that lead to the discov-ery of the supertype.
The decline of the curve indicates that certain supertypes are preferred and shared among differ-ent argument pairs. It is interesting to note that the text on the Web prefers a small set of supertypes, and to see what they are. These most-popular har-vested types tend to be the more descriptive terms. The results indicate that one does not need an elab-orate supertype hierarchy to handle the selectional restrictions of semantic relations.

Since our problem definition differs from avail-able related work, and WordNet does not contain all harvested arguments as shown in (Hovy et al., 2009), it is not possible to make a direct compar-ison. Instead, we conduct a manual evaluation of the most highly ranked supertypes which normally are the top 20. The overall accuracy of the super-types for all relations is 92%. Table 6 shows the top 10 highly ranked supertypes for six of our re-lations. We propose a minimally supervised algorithm that uses only one seed example and a recursive lexico-syntactic pattern to learn in bootstrapping fash-ion the selectional restrictions of a large class of semantic relations. The principal contribution of the paper is to demonstrate that this kind of pat-tern can be applied to almost any kind of se-mantic relation, as long as it is expressible in a concise surface pattern, and that the recursive mechanism that allows each newly acquired term to restart harvesting automatically is a signifi-cant advance over patterns that require a handful of seeds to initiate the learning process. It also shows how one can combine free-form but undi-rected pattern-learning approaches like TextRun-ner with more-controlled but effort-intensive ap-proaches like commonly used.

In our evaluation, we show that our algorithm is capable of extracting high quality non-trivial in-formation from unstructured text given very re-stricted input (one seed). To measure the perfor-mance of our approach, we use various semantic relations expressed with three lexico-syntactic pat-terns. For two of the relations, we compare results with the freely available ontology Yago, and con-duct a manual evaluation of the harvested terms.
We will release the annotated and the harvested data to the public to be used for comparison by other knowledge harvesting algorithms.

The success of the proposed framework opens many challenging directions. We plan to use the algorithm described in this paper to learn the se-lectional restrictions of numerous other relations, in order to build a rich knowledge repository that can support a variety of applications, includ-ing textual entailment, information extraction, and question answering.
 This research was supported by DARPA contract number FA8750-09-C-3705.

