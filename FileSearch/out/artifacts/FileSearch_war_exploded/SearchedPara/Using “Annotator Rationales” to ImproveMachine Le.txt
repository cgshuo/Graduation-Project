 We propose a new framework for supervised ma-chine learning. Our goal is to learn from smaller amounts of supervised training data, by collecting a richer kind of training data: annotations with  X  X a-tionales. X  When annotating an example, the hu-man teacher will also highlight evidence support-ing this annotation X  X hereby teaching the machine learner why the example belongs to the category. We provide some rationale-annotated data and present a learning method that exploits the rationales during training to boost performance significantly on a sam-ple task, namely sentiment classification of movie reviews. We hypothesize that in some situations, providing rationales is a more fruitful use of an an-notator X  X  time than annotating more examples. Annotation cost is a bottleneck for many natural lan-guage processing applications. While supervised machine learning systems are effective, it is labor-intensive and expensive to construct the many train-ing examples needed. Previous research has ex-plored active or semi-supervised learning as possible ways to lessen this burden.

We propose a new way of breaking this annotation bottleneck. Annotators currently indicate what the correct answers are on training data. We propose that they should also indicate why , at least by coarse hints. We suggest new machine learning approaches that can benefit from this  X  X hy X  information.
For example, an annotator who is categorizing phrases or documents might also be asked to high-light a few substrings that significantly influenced her judgment. We call such clues  X  X ationales. X  They need not correspond to machine learning features.
In some circumstances, rationales should not be too expensive or time-consuming to collect. As long as the annotator is spending the time to study exam-ple x i and classify it, it may not require much extra effort for her to mark reasons for her classification. We will not rely exclusively on the rationales, but use them only as an added source of information. The idea is to help direct the learning algorithm X  X  attention X  X elping it tease apart signal from noise.
Machine learning algorithms face a well-known  X  X redit assignment X  problem. Given a complex da-tum x i and the desired response y i , many features of x i could be responsible for the choice of y i . The learning algorithm must tease out which features were actually responsible. This requires a lot of training data, and often a lot of computation as well.
Our rationales offer a shortcut to solving this  X  X redit assignment X  problem, by providing the learning algorithm with hints as to which features of x i were relevant. Rationales should help guide the learning algorithm toward the correct classifica-tion function, by pushing it toward a function that correctly pays attention to each example X  X  relevant features. This should help the algorithm learn from less data and avoid getting trapped in local maxima. 1
In this paper, we demonstrate the  X  X nnotator ra-tionales X  technique on a text categorization problem previously studied by others. One popular approach for text categorization is to use a discriminative model such as a Support Vec-tor Machine (SVM) (e.g. (Joachims, 1998; Dumais, 1998)). We propose that SVM training can in gen-eral incorporate annotator rationales as follows.
From the rationale annotations on a positive ex-ample  X  X  X  x i , we will construct one or more  X  X ot-quite-as-positive X  contrast examples  X  X  X  v ij . In our text cat-egorization experiments below, each contrast docu-ment  X  X  X  v ij was obtained by starting with the original and  X  X asking out X  one or all of the several rationale substrings that the annotator had highlighted ( r ij ). The intuition is that the correct model should be less sure of a positive classification on the contrast exam-ple  X  X  X  v ij than on the original example ~x i , because  X  X  X  lacks evidence that the annotator found significant.
We can translate this intuition into additional con-straints on the correct model, i.e., on the weight vec-tor ~w . In addition to the usual SVM constraint on positive examples that ~w  X   X  X  X  x i  X  1 , we also want (for each j ) that ~w  X  ~x i  X  ~w  X   X  X  X  v ij  X   X  , where  X   X  0 con-trols the size of the desired margin between original and contrast examples.

An ordinary soft-margin SVM chooses ~w and ~  X  to minimize subject to the constraints where  X  X  X  x i is a training example, y i  X  X  X  1 , +1 } is its desired classification, and  X  i is a slack variable that allows training example  X  X  X  x i to miss satisfying the margin constraint if necessary. The parameter C &gt; 0 controls the cost of taking such slack, and should generally be lower for noisier or less linearly separable datasets. We add the contrast constraints where  X  X  X  v ij is one of the contrast examples con-structed from example  X  X  X  x i , and  X  ij  X  0 is an asso-ciated slack variable. Just as these extra constraints have their own margin  X  , their slack variables have their own cost, so the objective function (1) becomes The parameter C contrast  X  0 determines the impor-tance of satisfying the contrast constraints. It should generally be less than C if the contrasts are noisier than the training examples. 2
In practice, it is possible to solve this optimization using a standard soft-margin SVM learner. Dividing equation (4) through by  X  , it becomes the same form as equation (2), we simply add the pairs (  X  X  X  x ij , y i ) to the training set as pseudoexam-ples , weighted by C contrast rather than C so that the learner will use the objective function (5).
There is one subtlety. To allow a biased hyper-plane, we use the usual trick of prepending a 1 el-ement to each training example. Thus we require ~w  X  (1 ,  X  X  X  x i )  X  1  X   X  i (which makes w 0 play the role of a bias term). This means, however, that we must prepend a 0 element to each pseudoexample: In our experiments, we optimize  X  , C , and C contrast on held-out data (see section 5.2). In order to demonstrate that annotator rationales help machine learning, we needed annotated data that included rationales for the annotations.
We chose a dataset that would be enjoyable to re-annotate: the movie review dataset of (Pang et al., 2002; Pang and Lee, 2004). 3 The dataset consists of 1000 positive and 1000 negative movie reviews obtained from the Internet Movie Database (IMDb) review archive, all written before 2002 by a total of 312 authors, with a cap of 20 reviews per author per category. Pang and Lee have divided the 2000 docu-ments into 10 folds, each consisting of 100 positive reviews and 100 negative reviews.

The dataset is arguably artificial in that it keeps only reviews where the reviewer provided a rather high or rather low numerical rating, allowing Pang and Lee to designate the review as positive or neg-ative. Nonetheless, most reviews contain a difficult mix of praise, criticism, and factual description. In fact, it is possible for a mostly critical review to give a positive overall recommendation, or vice versa. 4.1 Annotation procedure Rationale annotators were given guidelines 4 that read, in part: The last two paragraphs were intended to provide some guidance on how many rationales to annotate. Even so, as section 4.2 shows, some annotators were considerably more thorough (and slower).

Annotators were also shown the following exam-ples 5 of positive rationales: and the following examples 5 of negative rationales:
The annotation involves boldfacing the rationale phrases using an HTML editor. Note that a fancier annotation tool would be necessary for a task like named entity tagging, where an annotator must mark many named entities in a single document. At any given moment, such a tool should allow the annota-tor to highlight, view, and edit only the several ra-tionales for the  X  X urrent X  annotated entity (the one most recently annotated or re-selected).

One of the authors (A0) annotated folds 0 X 8 of the movie review set (1,800 documents) with ra-tionales that supported the gold-standard classifica-tions. This training/development set was used for all of the learning experiments in sections 5 X 6. A histogram of rationale counts is shown in Figure 1. As mentioned in section 3, the rationale annotations were just textual substrings. The annotator did not require knowledge of the classifier features. Thus, our rationale dataset is a new resource 4 that could also be used to study exploitation of rationales un-der feature sets or learning methods other than those considered here (see section 8). 4.2 Inter-annotator agreement To study the annotation process, we randomly se-lected 150 documents from the dataset. The doc-uments were split into three groups, each consisting of 50 documents (25 positive and 25 negative). Each subset was used for one of three tasks: 6  X  Task 1: Given the document, annotate only the  X  Task 2: Given the document and its class, an- X  Task 3: Given the document, annotate both the We carried out a pilot study (annotators AX and AY: two of the authors) and a later, more controlled study (annotators A1 and A2: paid students). The latter was conducted in a more controlled environ-ment where both annotators used the same annota-tion tool and annotation setup as each other. Their guidelines were also more detailed (see section 4.1). In addition, the documents for the different tasks were interleaved to avoid any practice effect.
The annotators X  classification accuracies in Tasks 1 and 3 (against Pang &amp; Lee X  X  labels) ranged from 92% X 97%, with 4-way agreement on the class for 89% of the documents, and pairwise agreement also ranging from 92% X 97%. Table 1 shows how many rationales the annotators provided and how well their rationales agreed.

Interestingly, in Task 3, four of AX X  X  ratio-nales for a positive class were also partially highlighted by AY as support for AY X  X  (incorrect) negative classifications, such as: 4.3 Annotation time Average annotation times are in Table 2. As hoped, rationales did not take too much extra time for most annotators to provide. For each annotator except A2, providing rationales only took roughly twice the time (Task 3 vs. Task 1), even though it meant mark-ing an average of 5 X 11 rationales in addition to the class.

Why this low overhead? Because marking the class already required the Task 1 annotator to read the document and find some rationales, even if s/he did not mark them. The only extra work in Task 3 is in making them explicit. This synergy between class annotation and rationale annotation is demon-strated by the fact that doing both at once (Task 3) was faster than doing them separately (Tasks 1+2).
We remark that this task X  X inary classification on full documents X  X eems to be almost a worst-case scenario for the annotation of rationales. At a purely mechanical level, it was rather heroic of A0 to at-tach 8 X 9 new rationale phrases r ij to every bit y i of ordinary annotation. Imagine by contrast a more local task of identifying entities or relations. Each lower-level annotation y i will tend to have fewer ra-tionales r ij , while y i itself will be more complex and hence more difficult to mark. Thus, we expect that the overhead of collecting rationales will be less in many scenarios than the factor of 2 we measured. Annotation overhead could be further reduced. For a multi-class problem like relation detection, one could ask the annotator to provide rationales only for the rarer classes. This small amount of extra time where the data is sparsest would provide extra guid-ance where it was most needed. Another possibility is passive collection of rationales via eye tracking. 5.1 Feature extraction Although this dataset seems to demand discourse-level features that contextualize bits of praise and criticism, we exactly follow Pang et al. (2002) and Pang and Lee (2004) in merely using binary uni-gram features, corresponding to the 17,744 un-stemmed word or punctuation types with count  X  4 in the full 2000-document corpus. Thus, each docu-ment is reduced to a 0-1 vector with 17,744 dimen-sions, which is then normalized to unit length. 7
We used the method of section 3 to place addi-tional constraints on a linear classifier. Given a train-ing document, we create several contrast documents, each by deleting exactly one rationale substring from the training document. Converting documents to feature vectors, we obtained an original exam-ple  X  X  X  x i and several contrast examples  X  X  X  v i 1 ,  X  X  X  v i 2 Again, our training method required each original document to be classified more confidently (by a margin  X  ) than its contrast documents.

If we were using more than unigram features, then simply deleting a rationale substring would not al-ways be the best way to create a contrast document, as the resulting ungrammatical sentences might cause deep feature extraction to behave strangely (e.g., parse errors during preprocessing). The goal in creating the contrast document is merely to suppress features ( n -grams, parts of speech, syntactic depen-dencies . . . ) that depend in part on material in one or more rationales. This could be done directly by modifying the feature extractors, or if one prefers to use existing feature extractors, by  X  X asking X  rather than deleting the rationale substring X  X .g., replacing each of its word tokens with a special MASK token that is treated as an out-of-vocabulary word. 5.2 Training and testing procedures We transformed this problem to an SVM problem (see section 3) and applied SVM light for training and testing, using the default linear kernel. We used only A0 X  X  rationales and the true classifications.
Fold 9 was reserved as a test set. All accuracy results reported in the paper are the result of testing on fold 9, after training on subsets of folds 0 X 8.
Our learning curves show accuracy after training on T &lt; 9 folds (i.e., 200 T documents), for various T . To reduce the noise in these results, the accuracy we report for training on T folds is actually the aver-age of 9 different experiments with different (albeit overlapping) training sets that cover folds 0 X 8: where F j denotes the fold numbered j mod 9 , and acc ( Z |  X , Y ) means classification accuracy on the set Z after training on Y with hyperparameters  X  .
To evaluate whether two different training meth-ods A and B gave significantly different average-accuracy values, we used a paired permutation test (generalizing a sign test). The test assumes in-dependence among the 200 test examples but not among the 9 overlapping training sets. For each of the 200 test examples in fold 9, we measured ( a i , b i ) , where a i (respectively b i ) is the number of the 9 training sets under which A (respectively B) classified the example correctly. The p value is the probability that the absolute difference be-tween the average-accuracy values would reach or exceed the observed absolute difference, namely | 1/2 chance of being replaced with ( b i , a i ) , as per the null hypothesis that A and B are indistinguishable.
For any given value of T and any given train-ing method, we chose hyperparameters  X   X  = ( C,  X , C contrast ) to maximize the following cross-validation performance: 9  X   X  = argmax We used a simple alternating optimization procedure that begins at  X  0 = (1 . 0 , 1 . 0 , 1 . 0) and cycles repeat-edly through the three dimensions, optimizing along each dimension by a local grid search with resolu-tion 0.1. 10 Of course, when training without ratio-nales, we did not have to optimize  X  or C contrast . 6.1 The value of rationales The top curve (S1) in Figure 2 shows that perfor-mance does increase when we introduce rationales for the training examples as contrast examples (sec-tion 3). S1 is significantly higher than the baseline curve (S2) immediately below it, which trains an or-dinary SVM classifier without using rationales. At the largest training set size, rationales raise the accu-racy from 88.5% to 92.2%, a 32% error reduction.
The lower three curves (S3 X  X 5) show that learn-ing is separately helped by the rationale and the non-rationale portions of the documents. S3 X  X 5 are degraded versions of the baseline S2: they are ordinary SVM classifiers that perform significantly worse than S2 ( p &lt; 0 . 001 ).

Removing the rationale phrases from the train-ing documents (S3) made the test documents much harder to discriminate (compared to S2). This sug-gests that annotator A0 X  X  rationales often covered most of the usable evidence for the true class.
However, the pieces to solving the classification puzzle cannot be found solely in the short rationale phrases. Removing all non -rationale text from the training documents (S5) was even worse than re-moving the rationales (S3). In other words, we can-not hope to do well simply by training on just the rationales (S5), although that approach is improved somewhat in S4 by treating each rationale (similarly to S1) as a separate SVM training example.

This presents some insight into why our method gives the best performance. The classifier in S1 is able to extract subtle patterns from the corpus, like S2, S3, or any other standard machine learn-ing method, but it is also able to learn from a human annotator X  X  decision-making strategy. 6.2 Using fewer rationales In practice, one might annotate rationales for only some training documents X  X ither when annotating a new corpus or when adding rationales post hoc to an existing corpus. Thus, a range of options can be found between curves S2 and S1 of Figure 2.
Figure 3 explores this space, showing how far the learning curve S2 moves upward if one has time to annotate rationales for a fixed number of documents R . The key useful discovery is that much of the ben-efit can actually be obtained with relatively few ra-tionales. For example, with 800 training documents, annotating (0%, 50%, 100%) of them with rationales gives accuracies of (86.9%, 89.2%, 89.3%). With the maximum of 1600 training documents, annotat-ing (0%, 50%, 100%) with rationales gives (88.5%, 91.7%, 92.2%).
 To make this point more broadly, we find that the R = 200 curve is significantly above the R = 0 curve ( p &lt; 0 . 05 ) at all T  X  1200 . By contrast, the R = 800 , R = 1000 , . . . R = 1600 points at each T value are all-pairs statistically indistinguishable.
The figure also suggests that rationales and docu-ments may be somewhat orthogonal in their benefit. When one has many documents and few rationales, there is no longer much benefit in adding more doc-uments (the curve is flattening out), but adding more rationales seems to provide a fresh benefit: ratio-nales have not yet reached their point of diminishing returns. (While this fresh benefit was often statisti-cally significant, and greater than the benefit from more documents, our experiments did not establish that it was significantly greater.)
The above experiments keep all of A0 X  X  rationales on a fraction of training documents. We also exper-imented with keeping a fraction of A0 X  X  rationales (chosen randomly with randomized rounding) on all training documents. This yielded no noteworthy or statistically significant differences from Figure 3.
These latter experiments simulate a  X  X azy annota-tor X  who is less assiduous than A0. Such annotators may be common in the real world. We also suspect that they will be more desirable. First, they should be able to add more rationales per hour than the A0-style annotator from Figure 3: some rationales are simply more noticeable than others, and a lazy anno-tator will quickly find the most noticeable ones with-out wasting time tracking down the rest. Second, the  X  X ost noticeable X  rationales that they mark may be the most effective ones for learning, although our random simulation of laziness could not test that. Our rationales resemble  X  X ide information X  in ma-chine learning X  X upplementary information about the target function that is available at training time. Side information is sometimes encoded as  X  X irtual examples X  like our contrast examples or pseudoex-amples. However, past work generates these by automatically transforming the training examples in ways that are expected to preserve or alter the classification (Abu-Mostafa, 1995). In another for-mulation, virtual examples are automatically gener-ated but must be manually annotated (Kuusela and Ocone, 2004). Our approach differs because a hu-man helps to generate the virtual examples. Enforc-ing a margin between ordinary examples and con-trast examples also appears new.

Other researchers have considered how to reduce annotation effort. In active learning, the annotator classifies only documents where the system so far is less confident (Lewis and Gale, 1994), or in an in-formation extraction setting, incrementally corrects details of the system X  X  less confident entity segmen-tations and labelings (Culotta and McCallum, 2005).
Raghavan et al. (2005) asked annotators to iden-tify globally  X  X elevant X  features . In contrast, our ap-proach does not force the annotator to evaluate the importance of features individually, nor in a global context outside any specific document, nor even to know the learner X  X  feature space. Annotators only mark text that supports their classification decision. Our methods then consider the combined effect of this text on the feature vector, which may include complex features not known to the annotator. Our SVM contrast method (section 3) is not the only possible way to use rationales. We would like to ex-plicitly model rationale annotation as a noisy pro-cess that reflects, imperfectly and incompletely, the annotator X  X  internal decision procedure.

A natural approach would start with log-linear models in place of SVMs. We can define a proba-bilistic classifier where ~ f (  X  ) extracts a feature vector from a classified document.

A standard training method would be to choose  X  to maximize the conditional likelihood of the train-ing classifications: When a rationale r i is also available for each ( x i , y i ) , we propose to maximize a likelihood that tries to predict these rationale data as well :
Notice that a given guess of  X  might make equa-tion (10) large, yet accord badly with the annotator X  X  rationales. In that case, the second term of equa-tion (11) will exert pressure on  X  to change to some-thing that conforms more closely to the rationales. If the annotator is correct, such a  X  will generalize better beyond the training data.

In equation (11), p  X  0 models the stochastic process of rationale annotation. What is an annotator actu-ally doing when she annotates rationales? In par-ticular, how do her rationales derive from the true value of  X  and thereby tell us about  X  ? Building a good model p  X  0 of rationale annotation will require some exploratory data analysis. Roughly, we expect that if  X  h f h ( x i , y ) is much higher for y = y i than for other values of y , then the annotator X  X  r i is corre-spondingly more likely to indicate in some way that feature f h strongly influenced annotation y i . How-ever, we must also model the annotator X  X  limited pa-tience (she may not annotate all important features), sloppiness (she may indicate only indirectly that f h is important), and bias (tendency to annotate some kinds of features at the expense of others).
One advantage of this generative approach is that it eliminates the need for contrast examples. Con-sider a non-textual example in which an annotator highlights the line crossing in a digital image of the digit  X 8 X  to mark the rationale that distinguishes it from  X 0. X  In this case it is not clear how to mask out that highlighted rationale to create a contrast exam-ple in which relevant features would not fire. 11 We have proposed a quite simple approach to im-proving machine learning by exploiting the clever-ness of annotators, asking them to provide enriched annotations for training. We developed and tested a particular discriminative method that can use  X  X n-notator rationales X  X  X ven on a fraction of the train-ing set X  X o significantly improve sentiment classifi-cation of movie reviews.

We found fairly good annotator agreement on the rationales themselves. Most annotators provided several rationales per classification without taking too much extra time, even in our text classification scenario, where the rationales greatly outweigh the classifications in number and complexity. Greater speed might be possible through an improved user interface or passive feedback (e.g., eye tracking).
In principle, many machine learning methods might be modified to exploit rationale data. While our experiments in this paper used a discriminative SVM, we plan to explore generative approaches.
