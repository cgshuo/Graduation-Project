 In this paper, we are concerned with a case of semi-supervised learning that is close to unsupervised learning, in that the labelled and unlabelled data points are from the same domain and only a small set of seed rules is used to derive the labelled points. We refer to this setting as bootstrapping . In contrast, typical semi-supervised learning deals with a large number of labelled points, and a domain adaptation task with unlabelled points from the new domain.
The two dominant discriminative learning meth-ods for bootstrapping are self-training (Scud-der, 1965) and co-training (Blum and Mitchell, 1998). In this paper we focus on a self-training style bootstrapping algorithm, the Yarowsky algo-rithm (Yarowsky, 1995). Variants of this algorithm have been formalized as optimizing an objective function in previous work by Abney (2004) and Haf-fari and Sarkar (2007), but it is not clear that any perform as well as the Yarowsky algorithm itself.
We take advantage of this formalization and in-troduce a novel algorithm called Yarowsky-prop which builds on the algorithms of Yarowsky (1995) and Subramanya et al. (2010). It is theoretically well-understood as minimizing an objective func-tion at each iteration, and it obtains state of the art performance on several different NLP data sets. To our knowledge, this is the first theoretically mo-tivated self-training bootstrapping algorithm which performs as well as the Yarowsky algorithm. Abney (2004) defines useful notation for semi-supervised learning, shown in table 1. Note that  X  , V , etc. are relative to the current labelling Y . We additionally define F to be the set of all features, and use U to denote the uniform distribution. In the bootstrapping setting the learner is given an initial partial labelling Y (0) where only a few examples are labelled (i.e. Y (0) x =  X  for most x ).

Abney (2004) defines three probability distribu-tions in his analysis of bootstrapping:  X  fj is the pa-rameter for feature f with label j , taken to be nor-malized so that  X  f is a distribution over labels.  X  x is the labelling distribution representing the current Y ; it is a point distribution for labelled examples and uniform for unlabelled examples.  X  x is the predic-tion distribution over labels for example x . The approach of Haghighi and Klein (2006b) and Haghighi and Klein (2006a) also uses a small set of seed rules but uses them to inject features into a joint model p ( x,j ) which they train using expectation-maximization for Markov random fields. We focus on discriminative training which does not require complex partition functions for normalization. Blum and Chawla (2001) introduce an early use of trans-ductive learning using graph propagation. X. Zhu and Z. Ghahramani and J. Lafferty (2003) X  X  method of graph propagation is predominantly transductive, and the non-transductive version is closely related to Abney (2004) c.f. Haffari and Sarkar (2007). 1 3.1 Yarowsky A decision list (DL) is a (ordered) list of feature-label pairs (rules) which is produced by assigning a score to each rule and sorting on this score. It chooses a label for an example from the first rule whose feature is a feature of the example. For a DL the prediction distribution is defined by  X  x ( j )  X  shown in algorithm 1. Note that at any point some training examples may be left unlabelled by Y ( t ) .
We use Collins and Singer (1999) for our exact specification of Yarowsky. 2 It uses DL rule scores where is a smoothing constant. When constructing a DL it keeps only the rules with (pre-normalized) score over a threshold  X  . In our implementation we add the seed rules to each subsequent DL. 3 3.2 Yarowsky-cautious Collins and Singer (1999) also introduce a variant algorithm Yarowsky-cautious. Here the DL training step keeps only the top n rules ( f,j ) over the thresh-old for each label j , ordered by |  X  f | . Additionally the threshold  X  is checked against |  X  fj | / |  X  f | instead of the smoothed score. n begins at n 0 and is incre-mented by  X  n at each iteration. We add the seed DL to the new DL after applying the cautious pruning. Cautiousness limits not only the size of the DL but also the number of labelled examples, prioritizing decisions which are believed to be of high accuracy.
At the final iteration Yarowsky-cautious uses the current labelling to train a DL without a threshold or cautiousness, and this DL is used for testing. We call this the retraining step. 4 3.3 DL-CoTrain Collins and Singer (1999) also introduce the co-training algorithm DL-CoTrain. This algorithm al-ternates between two DLs using disjoint views of the features in the data. At each step it trains a DL and then produces a new labelling for the other DL. Each DL uses thresholding and cautiousness as we describe for Yarowsky-cautious. At the end the DLs are combined, the result is used to label the data, and a retraining step is done from this single labelling. 3.4 Y-1/DL-1-VS One of the variant algorithms of Abney (2004) is Y-1/DL-1-VS (referred to by Haffari and Sarkar (2007) as simply DL-1). Besides various changes in the specifics of how the labelling is produced, this algorithm has two differences versus Yarowsky. Firstly, the smoothing constant in (1) is replaced by 1 / | V f | . Secondly,  X  is redefined as  X  x ( j ) = inition of  X  . This definition does not match a literal DL but is easier to analyze.
 We are not concerned here with the details of Y-1/DL-1-VS, but we note that Haffari and Sarkar (2007) provide an objective function for this al-gorithm using a generalized definition of cross-entropy in terms of Bregman distance, which mo-tivates our objective in section 4. The Breg-man distance between two discrete probability dis-tributions p and q is defined as B  X  ( p,q ) = P i [  X  ( p i )  X   X  ( q i )  X   X  case we have B t 2 ( p,q ) = P i ( p i  X  q i ) 2 = || p  X  q || Then Bregman distance-based entropy is H t 2 ( p ) =  X  P i p 2 i , KL-Divergence is B t 2 , and cross-entropy follows the standard definition in terms of H t 2 and B t 2 . The objective minimized by Y-1/DL-1-VS is:
X 3.5 Yarowsky-sum As a baseline for the sum definition of  X  , we intro-duce the Yarowsky-sum algorithm. It is the same as Yarowsky except that we use the sum definition when labelling: for example x we choose the label j with the highest (sum)  X  x ( j ) , but set Y x =  X  if the sum is zero. Note that this is a linear model similar to a conditional random field (CRF) (Lafferty et al., 2001) for unstructured multiclass problems. 3.6 Bipartite graph algorithms Haffari and Sarkar (2007) suggest a bipartite graph framework for semi-supervised learning based on their analysis of Y-1/DL-1-VS and objec-tive (2). The graph has vertices X  X  F and edges { ( x,f ) : x  X  X,f  X  F x } , as in the graph shown in figure 1(a). Each vertex represents a distribution over labels, and in this view Yarowsky can be seen as alternately updating the example distributions based on the feature distributions and visa versa.
Based on this they give algorithm 2, which we call HS-bipartite. It is parametrized by two functions which are called features-to-example and examples-to-feature here. Each can be one of two choices: average ( S ) is the normalized aver-age of the distributions of S , while majority ( S ) is a uniform distribution if all labels are supported by equal numbers of distributions of S , and other-wise a point distribution with mass on the best sup-ported label. The average -majority form is similar to Y-1/DL-1-VS, and the majority -majority form minimizes a different objective similar to (2).
In our implementation we label training data (for the convergence check) with the  X  distributions from the graph. We label test data by constructing new  X  x = examples-to-feature ( F x ) for the unseen x . 3.7 Semi-supervised learning algorithm of Sub-Subramanya et al. (2010) give a semi-supervised al-gorithm for part of speech tagging. Unlike the algo-rithms described above, it is for domain adaptation with large amounts of labelled data rather than boot-strapping with a small number of seeds.

This algorithm is structurally similar to Yarowsky in that it begins from an initial partial labelling and repeatedly trains a classifier on the labelling and then relabels the data. It uses a CRF (Lafferty et al., 2001) as the underlying supervised learner. It dif-fers significantly from Yarowsky in two other ways: First, instead of only training a CRF it also uses a step of graph propagation between distributions over the n -grams in the data. Second, it does the propa-gation on distributions over n -gram types rather than over n -gram tokens (instances in the data).
They argue that using propagation over types al-lows the algorithm to enforce constraints and find similarities that self-training cannot. We are not con-cerned here with the details of this algorithm, but it motivates our work firstly in providing the graph propagation which we will describe in more detail in section 4, and secondly in providing an algorithmic structure that we use for our algorithm in section 5. 3.8 Collins and Singer (1999) X  X  EM We implemented the EM algorithm of Collins and Singer (1999) as a baseline for the other algorithms. They do not specify tuning details, but to get com-parable accuracy we found it was necessary to do smoothing and to include weights  X  1 and  X  2 on the expected counts of seed-labelled and initially unla-belled examples respectively (Nigam et al., 2000). The graph propagation of Subramanya et al. (2010) is a method for smoothing distributions attached to vertices of a graph. Here we present it with an alter-nate notation using Bregman distances as described in section 3.4. 5 The objective is  X  X where V is a set of vertices, N ( v ) is the neighbour-hood of vertex v , and q v is an initial distribution for each vertex v to be smoothed. They give an iterative update to minimize (3). Note that (3) is independent of their specific graph structure, distributions, and semi-supervised learning algorithm.

We propose four methods for using this propaga-tion with Yarowsky. These methods all use con-stant edge weights ( w uv = 1 ). The distributions and graph structures are shown in table 2. Figure 1 shows example graphs for  X  - X  and  X  -only.  X  - X  and  X  -only are similar, and are described below.

The graph structure of  X  - X  is the bipartite graph of Haffari and Sarkar (2007). In fact,  X  - X  the propa-gation objective (3) and Haffari and Sarkar (2007) X  X  Y-1/DL-1-VS objective (2) are identical up to con-stant coefficients and an extra constant term. 6  X  - X  therefore gives us a direct way to optimize (2).
The other three methods do not correspond to the objective of Haffari and Sarkar (2007). The  X  - X  method is like  X  - X  except for using  X  as the distribu-tion for example vertices.

The bipartite graph of the first two methods dif-fers from the structure used by Subramanya et al. (2010) in that it does propagation between two dif-ferent kinds of distributions instead of only one kind. We also adopt a more comparable approach with a graph over only features. Here we define adjacency by co-occurrence in the same example. The  X  -only method uses this graph and  X  as the distribution.
Finally, we noted in section 3.7 that the algo-rithm of Subramanya et al. (2010) does one addi-tional step in converting from token level distribu-tions to type level distributions. The  X  T -only method therefore uses the feature-only graph but for the dis-tribution uses a type level version of  X  defined by  X  We call our graph propagation based algorithm Yarowsky-prop. It is shown with  X  T -only propaga-tion in algorithm 3. It is based on the Yarowsky al-gorithm, with the following changes: an added step to calculate  X  T (line 4), an added step to calculate  X  P (line 5), the use of  X  P rather than the DL to update the labelling (line 6), and the use of the sum defini-tion of  X  . Line 7 does DL training as we describe in sections 3.1 and 3.2. Propagation is done with the iterative update of Subramanya et al. (2010).
This algorithm is adapted to the other propagation methods described in section 4 by changing the type of propagation on line 5. In  X  -only, propagation is done on  X  , using the graph of figure 1(b). In  X  - X  and  X  - X  propagation is done on the respective bipartite graph (figure 1(a) or the equivalent with  X  ). Line 4 is skipped for these methods, and  X  is as defined in section 2. For the bipartite graph methods  X  - X  and  X  - X  only the propagated  X  values on the feature nodes are used for  X  P (the distributions on the exam-ple nodes are ignored after the propagation itself).
The algorithm uses  X  fj values rather than an ex-plicit DL for labelling. The (pre-normalized) score for any ( f,j ) not in the DL is taken to be zero. Be-sides using the sum definition of  X  when calculating  X  , we also use a sum in labelling. When labelling an example x (at line 6 and also on testing data) we use arg max j P f  X  F the sum is zero. Ignoring uniform  X  P f values is in-tended to provide an equivalent to the DL behaviour of using evidence only from rules that are in the list.
We include the cautiousness of Yarowsky-cautious (section 3.2) in the DL training on line 7. At the labelling step on line 6 we label only examples which the pre-propagated  X  would also assign a label (using the same rules described above for  X  P ). This choice is intended to provide an equivalent to the Yarowsky-cautious behaviour of limiting the num-ber of labelled examples; most  X  P f are non-uniform, so without it most examples become labelled early. We observe further similarity between the Yarowsky algorithm and the general approach of Subramanya et al. (2010) by comparing algorithm 3 here with their algorithm 1. The comments in al-gorithm 3 give the corresponding parts of their algo-rithm. Note that each line has a similar purpose. 6.1 Tasks and data For evaluation we use the tasks of Collins and Singer (1999) and Eisner and Karakos (2005), with data kindly provided by the respective authors.

The task of Collins and Singer (1999) is named entity classification on data from New York Times text. 7 The data set was pre-processed by a statisti-cal parser (Collins, 1997) and all noun phrases that are potential named entities were extracted from the parse tree. Each noun phrase is to be labelled as a person, organization, or location. The parse tree provides the surrounding context as context features such as the words in prepositional phrase and rela-tive clause modifiers, etc., and the actual words in the noun phrase provide the spelling features . The test data additionally contains some noise examples which are not in the three named entity categories. We use the seed rules the authors provide, which are the first seven items in figure 2. For DL-CoTrain, we use their two views: one view is the spelling fea-tures, and the other is the context features. Figure 2 shows a DL from Yarowsky training on this task.
The tasks of Eisner and Karakos (2005) are word sense disambiguation on several English words which have two senses corresponding to two dif-ferent words in French. Data was extracted from the Canadian Hansards, using the English side to produce training and test data and the French side to produce the gold labelling. Features are the original and lemmatized words immediately adja-cent to the word to be disambiguated, and origi-nal and lemmatized context words in the same sen-tence. Their seeds are pairs of adjacent word fea-tures, with one feature for each label (sense). We use the  X  X rug X ,  X  X and X , and  X  X entence X  tasks, and the seed rules from their best seed selection:  X  X lco-hol X / X  X edical X ,  X  X cres X / X  X ourt X , and  X  X eads X / X  X erved X  respectively (they do not provide seeds for their other three tasks). For DL-CoTrain we use adjacent words for one view and context words for the other. 6.2 Experimental set up Where applicable we use smoothing = 0 . 1 , a threshold  X  = 0 . 95 , and cautiousness parameters n 0 =  X  n = 5 as in Collins and Singer (1999) and propagation parameters  X  = 0 . 6 , X  = 0 . 01 as in Subramanya et al. (2010). Initial experiments with different propagation parameters suggested that as long as  X  was set at this value changing  X  had relatively little effect on the accuracy. We did not find any propagation parameter settings that outper-formed this choice. For the Yarowsky-prop algo-rithms we perform a single iteration of the propa-gation update for each iteration of the algorithm.
For EM we use weights  X  1 = 0 . 98 , and  X  2 = 0 . 02 (see section 3.8), which were found in initial experi-ments to be the best values, and results are averaged over 10 random initializations.

The named entity test set contains some examples that are neither person, organization, nor location. Collins and Singer (1999) define noise accuracy as accuracy that includes such instances, and clean ac-curacy as accuracy calculated across only the exam-ples which are one of the known labels. We report only clean accuracy in this paper; noise accuracy tracks clean accuracy but is a little lower. There is no difference on the word sense data sets. We also report (clean) non-seeded accuracy, which we define to be clean accuracy over only examples which are not assigned a label by the seed rules. This is in-tended to evaluate what the algorithm has learned, rather than what it can achieve by using the input information directly (Daume, 2011).
 We test Yarowsky, Yarowsky-cautious, Yarowsky-sum, DL-CoTrain, HS-bipartite in all four forms, and Yarowsky-prop cautious and non-cautious and in all four forms. For each algo-rithm except EM we perform a final retraining step as described for Yarowsky-cautious (section 3.2). Our programs and experiment scripts have been made available. 8 6.3 Accuracy Table 3 shows the final test set accuracies for the all the algorithms. The seed DL accuracy is also included for reference.

The best performing form of our novel algo-rithm is Yarowsky-prop-cautious  X  -only. It numer-ically outperforms DL-CoTrain on the named entity task, is not (statistically) significantly worse on the drug and land tasks, and is significantly better on the sentence task. It also numerically outperforms Yarowsky-cautious on the named entity task and is significantly better on the drug task. Is significantly worse on the land task, where most algorithms con-verge at labelling all examples with the first sense. It is significantly worse on the sentence task, although it is the second best performing algorithm and sev-eral percent above DL-CoTrain on that task.

Figure 3 shows (all) three examples from the named entity test set where Yarowsky-prop-cautious  X  -only is correct but none of the other Yarowsky variants are. Note that it succeeds despite mis-leading features;  X  X aker X  and  X  X ompany X  might be taken to indicate a company and  X  X resident-of X  an organization, but all three examples are locations.
Yarowsky-prop-cautious  X  - X  and  X  - X  also per-form respectably, although not as well. Yarowsky-prop-cautious  X  T -only and the non-cautious versions are significantly worse. Although  X  T -only was in-tended to incorporate Subramanya et al. (2010) X  X  idea of type level distributions, it in fact performs worse than  X  -only. We believe that Collins and Singer (1999) X  X  definition (1) of  X  incorporates suf-ficient type level information that the creation of a separate distribution is unnecessary in this case.
Figure 4 shows the test set non-seeded accuracies as a function of the iteration for many of the algo-rithms on the named entity task. The Yarowsky-prop non-cautious algorithms quickly converge to the fi-nal accuracy and are not shown. While the other algorithms (figure 4(a)) make a large accuracy im-provement in the final retraining step, the Yarowsky-prop (figure 4(b)) algorithms reach comparable ac-curacies earlier and gain much less from retraining. We did not implement Collins and Singer (1999) X  X  CoBoost; however, in their results it performs com-parably to DL-CoTrain and Yarowsky-cautious. As with DL-CoTrain, CoBoost requires two views. 6.4 Cautiousness Cautiousness appears to be important in the perfor-mance of the algorithms we tested. In table 3, only the cautious algorithms are able to reach the 90% accuracy range.

To evaluate the effects of cautiousness we ex-amine the Yarowsky-prop  X  -only algorithm on the named entity task in more detail. This algorithm has two classifiers which are trained in conjunction: the DL and the propagated  X  P . Figure 5 shows the train-ing set coverage (of the labelling on line 6 of algo-rithm 3) and the test set accuracy of both classifiers, for the cautious and non-cautious versions.
 The non-cautious version immediately learns a DL over all feature-label pairs, and therefore has full coverage after the first iteration. The DL and  X  P con-verge to similar accuracies within a few more itera-tions, and the retraining step increases accuracy by less than one percent. On the other hand, the cau-tious version gradually increases the coverage over the iterations. The DL accuracy follows the cover-age closely (similar to the behaviour of Yarowsky-cautious, not shown here), while the propagated classifier accuracy jumps quickly to near 90% and then increases only gradually.

Although the DL prior to retraining achieves a roughly similar accuracy in both versions, only the cautious version is able to reach the 90% accuracy range in the propagated classifier and retraining. Presumably the non-cautious version makes an early mistake, reaching a local minimum which it cannot escape. The cautious version avoids this by making only safe rule selection and labelling choices.
Figure 5(b) also helps to clarify the difference in retraining that we noted in section 6.3. Like the non-propagated DL algorithms, the DL component of Yarowsky-prop has much lower accuracy than the propagated classifier prior to the retraining step. But after retraining, the DL and  X  P reach very similar ac-curacies. 6.5 Objective function The propagation method  X  - X  was motivated by opti-mizing the equivalent objectives (2) and (3) at each iteration. Figure 6 shows the graph propagation ob-jective (3) along with accuracy for Yarowsky-prop  X  - X  without cautiousness. The objective value de-creases as expected, and converges along with accu-racy. Conversely, the cautious version (not shown here) does not clearly minimize the objective, since cautiousness limits the effect of the propagation. Our novel algorithm achieves accuracy compara-ble to Yarowsky-cautious, but is better theoretically motivated by combining ideas from Haffari and Sarkar (2007) and Subramanya et al. (2010). It also achieves accuracy comparable to DL-CoTrain, but does not require the features to be split into two in-dependent views.

As future work, we would like to apply our al-gorithm to a structured task such as part of speech tagging. We also believe that our method for adapt-ing Collins and Singer (1999) X  X  cautiousness to Yarowsky-prop can be applied to similar algorithms with other underlying classifiers, even to structured output models such as conditional random fields.
