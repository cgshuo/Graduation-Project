 In this paper, we study the task of automatically generating templates for entity summaries. An en-tity summary is a short document that gives the most important facts about an entity. In Wikipedia, for instance, most articles have an introduction section that summarizes the subject entity before the table of contents and other elaborate sections. These introduction sections are examples of en-tity summaries we consider. Summaries of enti-ties from the same category usually share some common structure. For example, biographies of physicists usually contain facts about the national-ity, educational background, affiliation and major contributions of the physicist, whereas introduc-tions of companies usually list information such as the industry, founder and headquarter of the company. Our goal is to automatically construct a summary template that outlines the most salient types of facts for an entity category, given a col-lection of entity summaries from this category.
Such kind of summary templates can be very useful in many applications. First of all, they can uncover the underlying structures of summary articles and help better organize the information units, much in the same way as infoboxes do in Wikipedia. In fact, automatic template genera-tion provides a solution to induction of infobox structures, which are still highly incomplete in Wikipedia (Wu and Weld, 2007). A template can also serve as a starting point for human edi-tors to create new summary articles. Furthermore, with summary templates, we can potentially ap-ply information retrieval and extraction techniques to construct summaries for new entities automati-cally on the fly, improving the user experience for search engine and question answering systems.
Despite its usefulness, the problem has not been well studied. The most relevant work is by Fila-tova et al. (2006) on automatic creation of domain templates, where the defintion of a domain is sim-ilar to our notion of an entity category. Filatova et al. (2006) first identify the important verbs for a domain using corpus statistics, and then find fre-quent parse tree patterns from sentences contain-ing these verbs to construct a domain template. There are two major limitations of their approach. First, the focus on verbs restricts the template pat-terns that can be found. Second, redundant or related patterns using different verbs to express the same or similar facts cannot be grouped to-gether. For example,  X  won X award  X  and  X  re-ceived X prize  X  are considered two different pat-terns by this approach. We propose a method that can overcome these two limitations. Automatic template generation is also related to a number of other problems that have been studied before, in-cluding unsupervised IE pattern discovery (Sudo et al., 2003; Shinyama and Sekine, 2006; Sekine, 2006; Yan et al., 2009) and automatic generation of Wikipedia articles (Sauper and Barzilay, 2009). We discuss the differences of our work from exist-ing related work in Section 6.

In this paper we propose a novel approach to the task of automatically generating entity sum-mary templates. We first develop an entity-aspect model that extends standard LDA to identify clus-ters of words that can represent different aspects of facts that are salient in a given summary col-lection (Section 3). For example, the words  X  X e-ceived, X   X  X ward, X   X  X on X  and  X  X obel X  may be clustered together from biographies of physicists to represent one aspect, even though they may ap-pear in different sentences from different biogra-phies. Simultaneously, the entity-aspect model separates words in each sentence into background words, document words and aspect words, and sentences likely about the same aspect are natu-rally clustered together. After this aspect identi-fication step, we mine frequent subtree patterns from the dependency parse trees of the clustered sentences (Section 4). Different from previous work, we leverage the word labels assigned by the entity-aspect model to prune the patterns and to locate template slots to be filled in.

We evaluate our method on five entity cate-gories using Wikipedia articles (Section 5). Be-cause the task is new and thus there is no stan-dard evaluation criteria, we conduct both quanti-tative evaluation using our own human judgment and qualitative comparison. Our evaluation shows that our method can obtain better sentence patterns in terms of f1 measure compared with two baseline methods, and it can also achieve reasonably good quality of aspect clusters in terms of purity. Com-pared with standard LDA and K-means sentence clustering, the aspects identified by our method are also more meaningful. Given a collection of entity summaries from the same entity category, our task is to automatically construct a summary template that outlines the most important information one should include in a summary for this entity category. For example, given a collection of biographies of physicists, ide-ally the summary template should indicate that im-portant facts about a physicist include his/her ed-Table 1: Examples of some good template patterns and their aspects generated by our method. ucational background, affiliation, major contribu-tions, awards received, etc.

However, it is not clear what is the best repre-sentation of such templates. Should a template comprise a list of subtopic labels (e.g.  X  X duca-tion X  and  X  X ffiliation X ) or a set of explicit ques-tions? Here we define a template format based on the usage of the templates as well as our obser-vations from Wikipedia entity summaries. First, since we expect that the templates can be used by human editors for creating new summaries, we use sentence patterns that are human readable as basic units of the templates. For example, we may have a sentence pattern  X  ENT graduated from ? Uni-versity X  for the entity category  X  X hysicist, X  where ENT is a placeholder for the entity that the sum-mary is about, and  X ? X  is a slot to be filled in. Sec-ond, we observe that information about entities of the same category can be grouped into subtopics. For example, the sentences  X  X ohr is a Nobel lau-reate X  and  X  X instein received the Nobel Prize X  are paraphrases of the same type of facts, while the sentences  X  X aub earned his doctorate at Prince-ton University X  and  X  X e graduated from MIT X  are slightly different but both describe a person X  X  ed-ucational background. Therefore, it makes sense to group sentence patterns based on the subtopics they pertain to. Here we call these subtopics the aspects of a summary template.

Formally, we define a summary template to be a set of sentence patterns grouped into aspects. Each sentence pattern has a placeholder for the entity to be summarized and possibly one or more template slots to be filled in. Table 1 shows some sentence patterns our method has generated for the  X  X hysi-cist X  category. 2.1 Overview of Our Method Our automatic template generation method con-sists of two steps: Aspect Identification : In this step, our goal is to automatically identify the different aspects or subtopics of the given summary collection. We si-multaneously cluster sentences and words into as-pects, using an entity-aspect model extended from the standard LDA model that is widely used in text mining (Blei et al., 2003). The output of this step are sentences clustered into aspects, with each word labeled as a stop word, a background word, a document word or an aspect word.
 Sentence Pattern Generation : In this step, we generate human-readable sentence patterns to rep-resent each aspect. We use frequent subtree pat-tern mining to find the most representative sen-tence structures for each aspect. The fixed struc-ture of a sentence pattern consists of aspect words, background words and stop words, while docu-ment words become template slots whose values can vary from summary to summary. At the aspect identification step, our goal is to dis-cover the most salient aspects or subtopics con-tained in a summary collection. Here we propose a principled method based on a modified LDA model to simultaneously cluster both sentences and words to discover aspects.

We first make the following observation. In en-tity summaries such as the introduction sections of Wikipedia articles, most sentences are talk-ing about a single fact of the entity. If we look closely, there are a few different kinds of words in these sentences. First of all, there are stop words that occur frequently in any document collection. Second, for a given entity category, some words are generally used in all aspects of the collection. Third, some words are clearly associated with the aspects of the sentences they occur in. And finally, there are also words that are document or entity specific. For example, in Table 2 we show two sentences related to the  X  X ffiliation X  aspect from the  X  X hysicist X  summary collection. Stop words such as  X  X s X  and  X  X he X  are labeled with  X  X . X  The word  X  X hysics X  can be regarded as a background word for this collection.  X  X rofessor X  and  X  X niver-sity X  are clearly related to the  X  X ffiliation X  aspect. Finally words such as  X  X odena X  and  X  X hicago X  are specifically associated with the subject enti-ties being discussed, that is, they are specific to the summary documents.

To capture background words and document-specific words, Chemudugunta et al. (2007) proposed to introduce a background topic and document-specific topics. Here we borrow their idea and also include a background topic as well as document-specific topics. To discover aspects that are local to one or a few adjacent sentences but may occur in many documents, Titov and McDon-ald (2008) proposed a multi-grain topic model, which relies on word co-occurrences within short paragraphs rather than documents in order to dis-cover aspects. Inspired by their model, we rely on word co-occurrences within single sentences to identify aspects. 3.1 Entity-Aspect Model We now formally present our entity-aspect model. First, we assume that stop words can be identified using a standard stop word list. We then assume that for a given entity category there are three kinds of unigram language models (i.e. multino-mial word distributions). There is a background model  X  B that generates words commonly used in all documents and all aspects. There are D document models  X  d ( 1  X  d  X  D ), where D is the number of documents in the given sum-mary collection, and there are A aspect models  X  a ( 1  X  a  X  A ), where A is the number of aspects. We assume that these word distributions have a uniform Dirichlet prior with parameter  X  .

Since not all aspects are discussed equally fre-quently, we assume that there is a global aspect distribution  X  that controls how often each aspect occurs in the collection.  X  is sampled from another Dirichlet prior with parameter  X  . There is also a multinomial distribution  X  that controls in each sentence how often we encounter a background word, a document word, or an aspect word.  X  has a Dirichlet prior with parameter  X  .

Let S d denote the number of sentences in doc-ument d , N d,s denote the number of words (after stop word removal) in sentence s of document d , and w d,s,n denote the n  X  X h word in this sentence. We introduce hidden variables z d,s for each sen-tence to indicate the aspect a sentence belongs to. We also introduce hidden variables y d,s,n for each word to indicate whether a word is generated from the background model, the document model, or the aspect model. Figure 1 shows the process of word. A: aspect word. D: document word. generating the whole document collection. The plate notation of the model is shown in Figure 2. Note that the values of  X  ,  X  and  X  are fixed. The number of aspects A is also manually set. 3.2 Inference Given a summary collection, i.e. the set of all w d,s,n , our goal is to find the most likely assign-ment of z d,s and y d,s,n , that is, the assignment that maximizes p ( z , y | w ;  X ,  X ,  X  ) , where z , y and w rep-resent the set of all z , y and w variables, respec-tively. With the assignment, sentences are natu-rally clustered into aspects, and words are labeled as either a background word, a document word, or an aspect word.
 Gibbs sampling, which is commonly used for inference for LDA models (Griffiths and Steyvers, 2004). Due to space limit, we give the formulas for the Gibbs sampler below without derivation.
First, given sentence s in document d , we sam-ple a value for z d,s given the values of all other z and y variables using the following formula:
In the formula above, z  X { d,s } is the current aspect assignment of all sentences excluding the current sentence. C A to aspect a , and C A tences. V is the vocabulary size. C a ber of times word v has been assigned to aspect a . C a aspect a . All the counts above exclude the current sentence. E ( v ) is the number of times word v oc-curs in the current sentence and is assigned to be an aspect word, as indicated by y , and E (  X  ) is the total number of words in the current sentence that are assigned to be an aspect word.

We then sample a value for y d,s,n for each word in the current sentence using the following formu-las:
In the formulas above, y  X { d,s,n } is the set of all y variables excluding y d,s,n . C  X  the numbers of words assigned to be a background word, a document word, or an aspect word, respec-tively, and C  X  and C d are counters similar to C a but are for the background model and the document models. In all these counts, the current word is excluded.
With one Gibbs sample, we can make the fol-lowing estimation:
Here the counts include all sentences and all words.

In our experiments, we set  X  = 5 ,  X  = 0 . 01 and  X  = 20 . We run 100 burn-in iterations through all documents in a collection to stabilize the distri-bution of z and y before collecting samples. We found that empirically 100 burn-in iterations were sufficient for our data set. We take 10 samples with a gap of 10 iterations between two samples, and average over these 10 samples to get the estima-tion for the parameters.
 we find the values of each z d,s and y d,s,n that max-signment, together with the standard stop word list we use, gives us sentences clustered into A as-pects, where each word is labeled as either a stop word, a background word, a document word or an aspect word. 3.3 Comparison with Other Models A major difference of our entity-aspect model from standard LDA model is that we assume each sentence belongs to a single aspect while in LDA words in the same sentence can be assigned to different topics. Our one-aspect-per-sentence as-sumption is important because our goal is to clus-ter sentences into aspects so that we can mine common sentence patterns for each aspect.

To cluster sentences, we could have used a straightforward solution similar to document clus-tering, where sentences are represented as feature vectors using the vector space model, and a stan-dard clustering algorithm such as K-means can be applied to group sentences together. However, there are some potential problems with directly ap-plying this typical document clustering method. First, unlike documents, sentences are short, and the number of words in a sentence that imply its aspect is even smaller. Besides, we do not know the aspect-related words in advance. As a result, the cosine similarity between two sentences may not reflect whether they are about the same aspect. We can perform heuristic term weighting, but the method becomes less robust. Second, after sen-tence clustering, we may still want to identify the the aspect words in each sentence, which are use-ful in the next pattern mining step. Directly taking the most frequent words from each sentence clus-ter as aspect words may not work well even af-ter stop word removal, because there can be back-ground words commonly used in all aspects. At the pattern generation step, we want to iden-tify human-readable sentence patterns that best represent each cluster. Following the basic idea from (Filatova et al., 2006), we start with the parse trees of sentences in each cluster, and apply a frequent subtree pattern mining algorithm to find sentence structures that have occurred at least K times in the cluster. Here we use dependency parse trees.

However, different from (Filatova et al., 2006), the word labels ( S , B , D and A ) assigned by the entity-aspect model give us some advantages. In-tuitively, a representative sentence pattern for an aspect should contain at least one aspect word. On the other hand, document words are entity-specific and therefore should not appear in the generic tem-plate patterns; instead, they correspond to tem-plate slots that need to be filled in. Furthermore, since we work on entity summaries, in each sen-tence there is usually a word or phrase that refers to the subject entity, and we should have a place-holder for the subject entity in each pattern.
Based on the intuitions above, we have the fol-lowing sentence pattern generation process. 1. Locate subject entities : In each sentence, we want to locate the word or phrase that refers to the subject entity. For example, in a biography, usu-ally a pronoun  X  X e X  or  X  X he X  is used to refer to the subject person. We use the following heuristic to locate the subject entities: For each summary document, we first find the top 3 frequent base noun phrases that are subjects of sentences. For example, in a company introduction, the phrase  X  X he company X  is probably used frequently as a sentence subject. Then for each sentence, we first look for the title of the Wikipedia article. If it oc-curs, it is tagged as the subject entity. Otherwise, we check whether one of the top 3 subject base noun phrases occurs, and if so, it is tagged as the subject entity. Otherwise, we tag the subject of the sentence as the subject entity. Finally, for the iden-tified subject entity word or phrase, we replace the label assigned by the entity-aspect model with a Figure 3: An example labeled dependency parse tree. new label E . 2. Generate labeled parse trees : We parse each sentence using the Stanford Parser 1 . After parsing, for each sentence we obtain a dependency parse tree where each node is a single word and each edge is labeled with a dependency relation. Each word is also labeled with one of { E , S , B , D , A } . We replace words labeled with E by a place-holder ENT , and replace words labeled with D by a question mark to indicate that these correspond to template slots. For the other words, we attach their labels to the tree nodes. Figure 3 shows an example labeled dependency parse tree. 3. Mine frequent subtree patterns : For the set of parse trees in each cluster, we use FREQT 2 , a software that implements the frequent subtree pat-tern mining algorithm proposed in (Zaki, 2002), to find all subtrees with a minimum support of K . 4. Prune patterns : We remove subtree patterns found by FREQT that do not contain ENT or any aspect word. We also remove small patterns that are contained in some other larger pattern in the same cluster. 5. Covert subtree patterns to sentence patterns : The remaining patterns are still represented as sub-trees. To covert them back to human-readable sen-tence patterns, we map each pattern back to one of the sentences that contain the pattern to order the tree nodes according to their original order in the sentence.

In the end, for each summary collection, we ob-tain A clusters of sentence patterns, where each cluster presumably corresponds to a single aspect or subtopic. Table 3: The number of documents ( D ), total number of sentences ( S ) and minimum, maximum and average numbers of sentences per document ( S d ) of the data set. Because we study a non-standard task, there is no existing annotated data set. We therefore created a small data set and made our own human judgment for quantitative evaluation purpose. 5.1 Data We downloaded five collections of Wikipedia ar-ticles from different entity categories. We took only the introduction sections of each article (be-fore the tables of contents) as entity summaries. Some statistics of the data set are given in Table 3. 5.2 Quantitative Evaluation To quantitatively evaluate the summary templates, we want to check (1) whether our sentence pat-terns are meaningful and can represent the corre-sponding entity categories well, and (2) whether semantically related sentence patterns are grouped into the same aspect. It is hard to evaluate both together. We therefore separate these two criteria. 5.2.1 Quality of sentence patterns To judge the quality of sentence patterns without looking at aspect clusters, ideally we want to com-pute the precision and recall of our patterns, that is, the percentage of our sentence patterns that are meaningful, and the percentage of true meaningful sentence patterns of each category that our method can capture. The former is relatively easy to obtain because we can ask humans to judge the quality of our patterns. The latter is much harder to com-pute because we need human judges to find the set of true sentence patterns for each entity category, which can be very subjective.

We adopt the following pooling strategy bor-rowed from information retrieval. Assume we want to compare a number of methods that each can generate a set of sentence patterns from a sum-mary collection. We take the union of these sets of patterns generated by the different methods and order them randomly. We then ask a human judge to decide whether each sentence pattern is mean-ingful for the given category. We can then treat the set of meaningful sentence patterns found by the human judge this way as the ground truth, and precision and recall of each method can be com-puted. If our goal is only to compare the different methods, this pooling strategy should suffice.
We compare our method with the following two baseline methods.
 Baseline 1 : In this baseline, we use the same subtree pattern mining algorithm to find sentence patterns from each summary collection. We also locate the subject entities and replace them with ENT . However, we do not have aspect words or document words in this case. Therefore we do not prune any pattern except to merge small patterns with the large ones that contain them. The pat-terns generated by this method do not have tem-plate slots.
 Baseline 2 : In the second baseline, we apply a verb-based pruning on the patterns generated by the first baseline, similar to (Filatova et al., 2006). We first find the top-20 verbs using the scoring function below that is taken from (Filatova et al., 2006), and then prune patterns that do not contain any of the top-20 verbs. where N ( v i ) is the frequency of verb v i in the collection, V is the set of all verbs, D is the total number of documents in the collection, and M ( v i ) is the number of documents in the collection that contains v i .

In Table 4, we show the precision, recall and f1 of the sentence patterns generated by our method and the two baseline methods for the five cate-gories. For our method, we set the support of the subtree patterns K to 2, that is, each pattern has occurred in at least two sentences in the cor-responding aspect cluster. For the two baseline methods, because sentences are not clustered, we use a larger support K of 3; otherwise, we find that there can be too many patterns. We can see that overall our method gives better f1 measures than the two baseline methods for most categories. Our method achieves a good balance between pre-cision and recall. For BL-1, the precision is high but recall is low. Intuitively BL-1 should have a higher recall than our method because our method Table 5: The true numbers of aspects as judged by the human annotator ( B ), and the purity of the clusters. does more pattern pruning than BL-1 using aspect words. Here it is not the case mainly because we used a higher frequency threshold ( K = 3) to se-lect frequent patterns in BL-1, giving overall fewer patterns than in our method. For BL-2, the preci-sion is higher than BL-1 but recall is lower. It is expected because the patterns of BL-2 is a subset of that of BL-1.

There are some advantages of our method that are not reflected in Table 4. First, many of our pat-terns contain template slots, which make the pat-tern more meaningful. In contrast the baseline pat-terns do not contain template slots. Because the human judge did not give preference over patterns with slots, both  X  ENT won the award X  and  X  ENT won the ? award X  were judged to be meaningful without any distinction, although the former one generated by our method is more meaningful. Sec-ond, compared with BL-2, our method can obtain patterns that do not contain a non-auxiliary verb, such as  X  ENT was ? director. X  5.2.2 Quality of aspect clusters We also want to judge the quality of the aspect clusters. To do so, we ask the human judge to group the ground truth sentence patterns of each category based on semantic relatedness. We then compute the purity of the automatically generated clusters against the human judged clusters using purity. The results are shown in Table 5. In our experiments, we set the number of clusters A used in the entity-aspect model to be 10. We can see from Table 5 that our generated aspect clusters can achieve reasonably good performance. 5.3 Qualitative evaluation We also conducted qualitative comparison be-tween our entity-aspect model and standard LDA model as well as a K-means sentence clustering method. In Table 6, we show the top 5 fre-quent words of three sample aspects as found by our method, standard LDA, and K-means. Note that although we try to align the aspects, there is Table 6: Comparison of the top 5 words of three sample aspects using different methods. no correspondence between clusters numbered the same but generated by different methods.

We can see that our method gives very mean-ingful aspect clusters. Standard LDA also gives meaningful words, but background words such as  X  X hysics X  and  X  X hysicist X  are mixed with as-pect words. Entity-specific words such as  X  X ohn X  also appear mixed with aspect words. K-means clusters are much less meaningful, with too many background words mixed with aspect words. The most related existing work is on domain tem-plate generation by Filatova et al. (2006). There are several differences between our work and theirs. First, their template patterns must contain a non-auxiliary verb whereas ours do not have this restriction. Second, their verb-centered patterns are independent of each other, whereas we group semantically related patterns into aspects, giving more meaningful templates. Third, in their work, named entities, numbers and general nouns are treated as template slots. In our method, we ap-ply the entity-aspect model to automatically iden-tify words that are document-specific, and treat these words as template slots, which can be poten-tially more robust as we do not rely on the quality of named entity recognition. Last but not least, their documents are event-centered while ours are entity-centered. Therefore we can use heuristics to anchor our patterns on the subject entities.
Sauper and Barzilay (2009) proposed a frame-work to learn to automatically generate Wikipedia articles. There is a fundamental difference be-tween their task and ours. The articles they gen-erate are long, comprehensive documents consist-ing of several sections on different subtopics of the subject entity, and they focus on learning the topical structures from complete Wikipedia arti-cles. We focus on learning sentence patterns of the short, concise introduction sections of Wikipedia articles.

Our entity-aspect model is related to a num-ber of previous extensions of LDA models. Chemudugunta et al. (2007) proposed to intro-duce a background topic and document-specific topics. Our background and document language models are similar to theirs. However, they still treat documents as bags of words rather than sets of sentences as in our model. Titov and McDon-ald (2008) exploited the idea that a short paragraph within a document is likely to be about the same aspect. Our one-aspect-per-sentence assumption is a stricter than theirs, but it is required in our model for the purpose of mining sentence patterns. The way we separate words into stop words, back-ground words, document words and aspect words bears similarity to that used in (Daum  X  e III and Marcu, 2006; Haghighi and Vanderwende, 2009), but their task is multi-document summarization while ours is to induce summary templates. In this paper, we studied the task of automati-cally generating templates for entity summaries. We proposed an entity-aspect model that can auto-matically cluster sentences and words into aspects. The model also labels words in sentences as either a stop word, a background word, a document word or an aspect word. We then applied frequent sub-tree pattern mining to generate sentence patterns that can represent the aspects. We took advan-tage of the labels generated by the entity-aspect model to prune patterns and to locate template slots. We conducted both quantitative and qualita-tive evaluation using five collections of Wikipedia entity summaries. We found that our method gave overall better template patterns than two baseline methods, and the aspect clusters generated by our method are reasonably good.

There are a number of directions we plan to pur-sue in the future in order to improve our method. First, we can possibly apply linguistic knowledge to improve the quality of sentence patterns. Cur-rently the method may generate similar sentence patterns that differ only slightly, e.g. change of a preposition. Also, the sentence patterns may not form complete, meaningful sentences. For exam-ple, a sentence pattern may contain an adjective but not the noun it modifies. We plan to study how to use linguistic knowledge to guide the con-struction of sentence patterns and make them more meaningful. Second, we have not quantitatively evaluated the quality of the template slots, because our judgment is only at the whole sentence pattern level. We plan to get more human judges and more rigorously judge the relevance and usefulness of both the sentence patterns and the template slots. It is also possible to introduce certain rules or con-straints to selectively form template slots rather than treating all words labeled with D as template slots.
 This work was done during Peng Li X  X  visit to the Singapore Management University. This work was partially supported by the National High-tech Research and Development Project of China (863) under the grant number 2009AA04Z106 and the National Science Foundation of China (NSFC) un-der the grant number 60773088. We thank the anonymous reviewers for their helpful comments.
