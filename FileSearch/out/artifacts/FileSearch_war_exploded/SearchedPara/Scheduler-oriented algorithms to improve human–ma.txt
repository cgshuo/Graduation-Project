 1. Introduction performance because of an increasingly competitive environment.
For this reason, routing problems have been a predominant application area for decision support systems ever since they were first introduced, as evidenced by bibliometric analyses ( Eom point for these support systems is usually to tackle the hard combinatorial problem arising from the numerous constraints that have to be taken into account, then to allocate any remaining components to the human planner. Sanderson noted back in 1989 that these support tools are not especially dominant in practice, and very little has changed since then. Vehicle routing is often performed by a single experienced individual or, more rarely, by a small group of individuals (see Cegarra, 2008 ). In field studies, humans appear to be crucial for taking the large set of constraints into account and adapting to changes in the domain ( Sanderson, 1989 ; Jackson et al., 2004 ). At the same time, the integration of transportation technologies (GPS, EDI, GIS) is gradually changing the nature of these decision-making processes, in that vehicle routing systems now combine human planners and technologies.
In this paper, we begin by discussing constraint processing and the importance of modeling the work domain in order to assess planners X  constraint processing. After that, the work domain analysis of the vehicle routing problem and the decision support system architecture is introduced at the end of Section 2 .
Typical support systems focus on supporting the  X  X  X echanical X  X  process of generating the schedule. Algorithms therefore function like a black box: the human has to provide the necessary information and has to adapt the outcome if the route contains whatsoever. In Section 3 we present how to take into account the cooperative aspects between human and computer, which are both participating in the decision-making process.

Support needs above all to consider how human perform tasks and their performance. In the last section a model inversion framework allowing to support the human in relaxing constraints is presented. 2. Background
There have been a number of attempts to define the vehicle routing task structure on the basis of hierarchical task analysis ( Rahimi and Dessouky, 2001 ) and cognitive task analysis ( Wong and Blandford, 2002 ). However, when Cegarra and van Wezel (2010) compared the amount of information produced by these two methods, as well as by work domain analysis, they found that the latter was far more exhaustive in identifying constraints, not least because it provides a generic view of constraints and does not focus on usual or known tasks.

Work domain analysis (WDA) was developed by Rasmussen focusing directly on the tasks being considered by the decision-maker, it looks at the constraints imposed on behavior by the environment. For an interface designer, this sometimes requires a change of point of view, as Vicente (2000, p. 63) pointed out:  X  X  X  task can be defined as the set of actions that can or should be performed by one or more actors to achieve a particular goal. In contrast a work domain is the system being controlled, indepen-dent of any particular worker, automation, event, task, goal, or interface X  X . As previously stressed, for the purposes of assessing and supporting decision-making, completeness in identifying domain constraints is highly desirable in a vehicle routing system.
WDA is usually performed using an abstraction hierarchy which depicts the constraint space. The higher levels of the abstraction hierarchy describe functional information about the domain, whereas the lower levels describe physical information. Moreover, WDA usually looks at five levels of abstraction ( Naikar functions, physical functions, and physical forms. In addition to this breakdown into physical and functional aspects, a part-whole distinction can also be made, taking several levels of details into account: system, subsystem and components. However, this part-whole distinction is not always made, as we will see below.
Initially, WDA was applied to  X  X  X ausal X  X  systems guided by physical laws, as in nuclear power stations ( Itoh et al., 1995 ), conventional power stations ( Burns, 2000 ) and cement milling plants ( van Paassen, 1995 ). In  X  X  X ausal X  X  systems, the objective reality is imposed on the human operator ( Vicente, 1999 ), as opposed to  X  X  X ntentional X  X  systems, where the operator is the main agent of the domain and there are fewer references to an external environment. This is the case of routing problems, in which it is difficult to enumerate the domain constraints because they result from conventions, organizational objectives, formal or informal rules and operators X  goal. Vicente (1999) stressed that WDA should be performed independently of usual or known tasks, the aim being to provide an exhaustive breakdown that is resistant to changes in the situation. To this end, we sought to enhance the identification of domain constraints by extending the scope of the domain. More specifically, instead of focusing on currently known or usual cases in one particular situation (which inevitably leads to the inclusion of more details about the current situation), we set out to identify constraints from different situations documented in the literature. Each variant of the VRP would allow us to increase the completeness of the constraint space by considering constraints that might potentially help to identify planners X  degrees of freedom. Our search for VRPs in scientific databases yielded more than ten thousand articles. However, only a few of them suggested genuinely new variants of the generic VRP (see Toth and Vigo, 2001 ). Instead, researchers tended to develop algorithms to solve known variants or design algorithms for multiple variants (e.g., Pisinger and Ropke, 2007 ).
In the main, the variants extend the domain by providing constraints related to a temporal perspective, including custo-mers X  time windows (VRPTW) and vehicles with limited capacity (CVRP), and more complex variants, such as trucks and trailers (TTRP), pick-up and delivery (VRPPD), or ones related to multiple depots (MDVRP), which are summarized in Table 1 . As previously indicated, the WDA abstraction hierarchy organizes the planners X  problem space in terms of different concepts that planners can then use for reasoning within a work system. We also consider to describe the constraint space. Fig. 1 summarizes the VRP domain according to these different levels.

Details of the entities corresponding at each abstraction level are presented in Gacias (2010) . The decomposition remains very generic according to studies and problem descriptions found in the literature. Nevertheless, most of the vehicle routing problems are covered and only some particular variants may required other components not considered on our analysis (see Gacias, 2010 , for a scope analysis).

A support system architecture aiming to cover some of the major issues concerning human X  X achine cooperation is pro-posed. An important clue often pointed by researchers is the advisability of sharing a unique reference system between the human and the machine. To this purpose, the work domain analysis has been considered crucial in order to identify the information needed to solve the problem. In our support system, as shown in Fig. 2 , the human and the solving mechanism manipulate both the same entities (physical objects and technical constraints) identified in the analysis. The system is composed by a set of human X  X achine interfaces seeking to efficiently assist the interfaces). The information displayed has been identified in the work domain analysis. The idea is to connect these interfaces and the human X  X ystem interaction tools to the user-oriented algo-rithms presented in the next sections in order to favor human X  machine cooperation for problem solving. 3. Decision support system algorithms
The algorithms integrated in the solving mechanism are presented in this section. The section starts with a formal description of the vehicle routing problem and of the problem constraints. The control modes for problem solving are then presented. Finally, we describe the proposed algorithms. 3.1. Formal problem statement
The vehicle routing problem has already been formally defined (see for example Toth and Vigo, 2001 for a collection of linear programs proposed in the literature for different variants of the problem). Our problem is the vehicle routing problem taking into account the constraints identified during the work domain analysis (see Section 2 ).

A set f C i g i  X  1 ... nc of customers has to be served by a set f V g f De g t  X  1 ... nde and ends at the same depot. To each vehicle is We describe here some characteristics of problem constraints.
First, the customer demands can be indifferently deliveries ( d 4 0) or pick-ups ( d k i o 0). Second, each vehicle j is capacity constrained: a maximal weight capacity ( C w j ), a maximal volume capacity ( C v j ) and a maximal authorized length ( C l j way, each product k is defined by a weight ( P k w ), a volume ( P a length ( P k l ).
 by the vehicle j x  X 
Two different sets of constraints can be then defined, one for the deliveries the other one for the pick-ups (depending on the sign of the demand), as follows: max define R j as the route of vehicle j , D  X  R j  X  and T  X  R distance and the duration of R j , respectively. The following new set of constraints is then defined: D  X  R j  X  r V D j 8 j  X  1 ... nv T  X  R j  X  r V T j 8 j  X  1 ... nv
Then, time windows ( TWC i  X  X  r i , d i ) are considered for each customer. Each customer has to be served inside the interval of its time windows. Besides, depot time windows ( TWDe t  X  X  r t driver ( TWDr l  X  X  r l , d l )timewindowsarealsoconsidered.The windows. Drivers cannot work outside their time windows. Pre-cedence and immediate precedence constraints between customers can be also defined. If customer i precedes customer i 0 ( i customer i has to be served before customer i 0 , and if customer i immediately precedes customer i 0 ,customer i 0 has to be served
VRP algo.

Physical objects
Routing network constraints between physical objects (depot-vehicle, customer vehi-cle, product-vehicle, etc.) are also considered.
 (purpose-related functions, physical functions, and physical objects) of the abstraction hierarchy. 3.2. User-oriented algorithms: control modes been a conflict issue between operations research and human factors researchers. Indeed, the latest claimed the advisability of give scheduler a more important role on problem solving process.
Function allocation to humans and algorithms in planning and scheduling has been recently raised in van Wezel et al. (2010) .
The authors propose principles for function allocation based on the analysis of problem subtasks, human capabilities, and the characteristics of the available algorithms to solve the problem. modes to perform the problem tasks is proposed. Problem solving has been divided into three subtasks: vehicle selection, customer allocation, and route selection. This task division is justified in
Gacias (2010) after the interview of two different companies transportation planners. In van Wezel et al. (2010) , the authors propose five control modes: manual, advisory, interactive, super-visory, and automatic. The control mode specifies the degree of user participation in problem solving process. In the manual control mode, all decisions are made by the human (none algorithmic assistance is provided). In the advisory control mode, human makes the decisions and an algorithm checks the deci-sions feasibility. In the interacting control mode, the decision-making process is shared between the human and the algorithms.
In the supervisory control, the algorithm is first executed, then necessarily informs the user, deciding to accept or reject the algorithm decisions. Finally, in the automatic control mode, the decisions are completely made by the algorithm (the user is then completely out of the decision-making process).

For problem solving, we think that problem tasks require both scheduler and algorithms participation. Indeed, the complex nature of problem constraints, some of them cannot even be considered on problem modeling phase, demands scheduler participation in order to ensure their satisfaction. On the other hand, problem complexity and the huge amount of computing requirements demands the articulation of transportation technol-ogies (GPS, EDI, GIS) with efficient algorithms inn order to obtain the full-manual control mode is unreasonable in front of too many items to manage. Indeed, it involves exceeding the cogni-tive capacities of humans, especially for decision-making under stress. Moreover, a dynamic environment implies painful re-computing. On the other hand, the consideration of the automatic control mode falls out of the scope of our paper focusing on user-oriented algorithms. In that context, we propose a three-phase solving mechanism with different control modes (advisory, interactive, and supervisory) facilitating scheduler participation in decision-making process and integrating efficient algorithms for problem solving and constraint satisfaction. 3.2.1. Vehicle selection algorithms
The goal of vehicle selection algorithms is to assist scheduler to select the vehicles serving customers. Let us define y variable to define if a vehicle j is used to serve customers y  X 
Advisory control mode: user solution checking : The advisory control mode consists in a user solution checking. It verifies whether a solution proposed by the user is a feasible solution. To this purpose, global capacity constraints (weight, volume, and involving vehicles such as vehicle X  X ustomer or vehicle X  X roduct are checked in order to ensure the presence of a given class of vehicle necessary to satisfy customer demands. Finally, the number of vehicles proposed by the user to serve customers (
P j  X  1 y j ) is compared with a lower bound of minimal number of computed from different problem information. Customer and depot time windows and route constraints such as maximal route time, distance or number of customers are therefore considered to compute LB nv . Further details about lower bound computation are described in Gacias (2010) max
If capacity and allocation constraints are satisfied and the number of vehicles proposed by the user is greater than LB solution is then accepted. If it is not the case, a constraint relaxation assistance based on model inversion mechanisms is proposed to the scheduler (see Section 4 ).

Supervisory and interactive control mode: vehicle number mini-mization : Both control modes focus on vehicle number minimiza-tion. In that context, several solutions satisfying capacity and allocation constraints and minimizing the number of vehicles are proposed to the scheduler. Besides, the lower bound LB nv be also respected by these solutions.

The problem can be defined as a linear program as follows: min subject to y A f 0 ; 1 g X  10  X 
An exact and polynomial algorithm to solve the problem when either one of the capacity constraints (weight or volume) are relaxed is proposed. Algorithm 1 illustrates volume constraint relaxation. First, a solution satisfying the weight constraint and minimizing the number of vehicles is proposed. Then, the satis-faction of the lower bound is checked. The algorithm starts selecting the vehicle with the biggest capacity among the avail-able vehicles except for the last vehicle (when the sum of vehicle capacities is enough to satisfy the constraint) where the vehicle with the smallest capacity satisfying the constraint is selected. Algorithm 1. Number of vehicles minimization.

Step 1: Compute the weight to transport, weight  X  P nc if capacity weight is bigger than weight to transport ,
C j Z weight , then while  X  weight 4 0  X  do
Step 2 : Select the vehicle V s with a maximal weight capacity if C w V 9
Step 3 : Add vehicle V s to the solution else 6 6 6 6 4
Step 6 : Update the weight , weight  X  weight C w V 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 4 else b Not feasible problem if number of vehicles of the solution is less than BI nv then Step 7 : Select a vehicle V s
Step 8 : Add vehicle V s to the solution $
No polynomial algorithm exists when all constraints (weight and volume constraints) have to be considered. Actually, the problem is known to be NP-hard ( Garey and Johnson, 1979 ). In to find a solution satisfying all capacity constraints. Note that when no feasible solution is found after solving both relaxations (on volume and weight constraints) using Algorithm 1 , the integer linear problem ((6) X (10)) has then to be solved.
Finally, a list of interesting solutions with a minimal number of is found by trying to replace in the solution each vehicle of the original solution by a new vehicle with smaller capacity. Of course, the solution after replacing vehicles has to satisfy the capacity constraints of the problem. The list of solutions proposed is provided to the planner.

The interactive control mode follows the same principle. The vehicle number minimization begins instead from a partial solution proposed by the scheduler. The algorithms propose a set of solutions taking into account the decisions already made by the scheduler.

Again, in case of infeasibility because not enough vehicles are available to satisfy the problem constraints, a constraint relaxa-tion assistance is then proposed (see Section 4 ). 3.2.2. Customer allocation algorithms
The goal here is to determine for each customer of the problem an allocation on a vehicle. The system offers the possibility to manually allocate the customers to vehicles (advisory control mode); in this case the feasibility of each decision is checked by an algorithm. An algorithm for customer allocation is also integrated in solving mechanism. The goal of the algorithm is to propose a complete solution for supervisory control mode and to complete a partial solution proposed by the scheduler for inter-active control mode.
 rithm checking allocation feasibility is proposed. The idea is to verify after each allocation decision that it exists a feasible solution. The algorithm is divided in two parts: a constraint satisfaction checking and a feasible solution searching. A feasi-bility test using energetic reasoning ( Lopez and Esquirol, 1996 ) principles is proposed for the first part. In a scheduling context,
Gacias et al. (2010a) have proposed an algorithm integrating setup times in the feasibility test. Indeed, travel times between customers in vehicle routing problem can be seen as sequence-dependent setup times. A limited discrepancy search (LDS) algo-rithm ( Harvey and Ginsberg, 1995 ) is used to find a feasible her/his previous choices or has to modify her/his last decision. Further details of the algorithm are described in Gacias (2010) . algorithm : In the supervisory control mode, a complete solution is proposed by the system. The scheduler can however modify the decisions of the algorithm. The sweep algorithm ( Gillet and
Miller, 1974 ) principle is used for customer allocation. First, customers that have to be allocated to a specific vehicle because of allocation constraints are allocated. Then, each customer (selected from the sweep algorithm order) is allocated on the non-empty vehicle with the smallest mean distance between the customer and the already allocated customers. If there is not a not-empty available vehicle to allocate a customer, then the customer is allocated to a new vehicle.

The interactive control mode uses the same algorithm to complete a solution partially proposed by the scheduler. The scheduler specifies here the allocation for some of the customers and the algorithm ends the customer allocation from the partial solution. 3.2.3. Route selection algorithms
The goal of route selection is to determine for each route a sequence of customers. Besides the control modes proposed here to solve the problem, the system also integrates several algo-rithms for solution optimization.
 Fig. 4 shows the proposed user interfaces for route selection.
Advisory control mode: scheduler decision checking : The sche-duler can manually propose a sequence for each vehicle through the human X  X achine interaction tools. Once again, an algorithm tests the feasibility of the scheduler decisions. First, different dominance rules are tested to verify that the proposed sequence is not inconsistent. After that, if the sequence is correct, a tree search algorithm based on limited discrepancy search is launched to find a feasible sequence with all the customers allocated to the vehicle respecting the subsequence proposed by the scheduler. If no solution is found, the scheduler has to backtrack to her/his previous choices or has to modify her/his last decision.
Supervisory and interactive control mode: customer allocation for the problem. To this purpose, different algorithms are proposed: the first algorithm is based on classical customer insertion technics traditionally used in the literature and the other two algorithms are proposed for solution optimization. The (a solution with a structure respecting schedulers X  criteria). The scheduler may then use the optimization algorithms to try to improve the quality of the solution. The use of metaheuristics and constraint programming has already been proposed efficiently to solve the vehicle routing problem ( Pesant and Gendreau, 1999 ; Caseau et al., 1999 ; De Backer et al., 2000 ).

Once customer allocation is performed, the algorithm uses the principle of savings and regrets algorithms proposed by Clarke and Wright (1964) and Liu and Shen (1999) , respectively. Each customer is inserted in the position of the sequence that mini-mizes route length. If a customer cannot be inserted in a sequence, a tree search based on LDS is launched in order to find a feasible sequence. The drawback of the savings algorithm is to find a feasible solution when the problem is over-constrained an efficient insertion algorithm, thus each time a customer cannot be inserted, a feasible sequence has to be found and the tree search may be time consuming. We then propose to integrate in the algorithm the regrets criterion favoring first the sequence of the most conflicting customers. The proposed algorithm then sequences the customer following the savings criterion except when it exists a customer with only two or less feasible positions into the sequence; in that case the conflicting customer is sequenced first.

Two solutions optimization algorithms are also proposed. The goal of one of them is to independently optimize the routes of the solution. The second algorithm is a local search algorithm for complete solution optimization. The execution time for each algorithm is specified by the scheduler.

The first algorithm is a Climbing Discrepancy Search (local search method using a limited discrepancy search for neighbor-hood exploration) ( Milano and Roli, 2002 ). The goal of the algorithm is to optimize the customer sequence for one route. Customer allocation cannot be therefore modified during the optimization process. The main advantage of the approach is that problem solution may be improved by optimizing only some routes and keeping the same structure for the remaining part. Indeed, in the process of solving problem the scheduler may advisable to propose optimization algorithms disturbing as less as possible the solution structure.

The second algorithm for problem solution optimization is route optimization in a classical local search scheme. For each first proposed and then the modified routes are optimized using the CDS algorithm. We define now the reallocation operators used in the algorithm. We find some interesting operators in the literature such as the Relocation and the Exchange proposed by Savelsbergh (1992) or the CROSS-exchange defined by Taillard et al. (1997) . Our goal is to find as soon as possible the best customer allocations. The idea is to focus on geographical criteria to define our neighborhoods. The first operator uses the distance between the customers and the gravity center of the routes to define the new allocations. The distance between a customer and the gravity center of its route is compared with the distance between the customer and the centroid of the rest of routes. The another route ( G R j ) than its own route centroid ( G R case, the customer C i is then selected to be allocated to route R The second operator compares for each customer the distance between the customer and the other customers of the problem with the distance between the customer and its own route centroid. If it exists a customer C i of route R q nearest of the customer C i 0 of route R j than its own route centroid G customer C i is then selected to be allocated to route R j allocation can be defined as f C i , R q , R j g , where C customer that will be reallocated from route R q to route R propose then to explore the next neighborhoods:
Each new reallocation. The neighborhood consists in allocating customer C i on the vehicle of the route R j .

Each allocation exchange between two customers. If it exists modified at the same time. The customer C i is allocated to the vehicle of route R j and the customer C i 0 is allocated to the vehicle of route R q .
 It is worth to note our neighborhoods are sub-neighborhoods of
Relocation and Exchange operators proposed by Savelsbergh (1992) .
 Algorithm 2. Solution optimization algorithm.

Step 1: An initial solution Sol is proposed by scheduler or solving mechanism algorithms foreach route of Sol do Step 2 : Optimize routes independently using the
CDS algorithm  X  authorised discrepancies are limited  X  if a better solution BetterSol is found then b Step 3 : Update the solution , Sol  X  BetterSol 6 6 6 6 6 6 6 4 while execution time defined by the scheduler is not achieved do
Step 4 : Determine all reallocations f C i , R q , R j g defined for each operator foreach new reallocation defined by neighborhood  X  1  X  and  X  2  X  do Step 5 : Optimize route R q using the CDS algorithm
Step 6 : Optimize route R j using the CDS algorithm if a better solution BetterSol is found then 6 6 6 6 6 6 6 6 6 4 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 4 3.3. Computational results
The efficiency of the solution optimization algorithm ( Algorithm 2 ) is evaluated here. The algorithm was coded in
C  X  X  and run on a 2.8 GHz personal computer with 3.8 Go of RAM under the Linux Debian operating system (Version 5.0.7). The algorithm was tested for the well-known instances of the litera-ture (25, 50, and 100 customers) proposed by Solomon (1983) for the VRPTW.

Table 2 shows the results of the comparison between our algorithm (called LS  X  CDS) and the best-known solutions for distance minimization. The best-known solutions are the optimal solutions for most of the small instances (25 and 50 customers).
Computation time is limited to 120 s for small instances (25 and 50 customers) and it is increased to 300 s for the instances with 100 customers. The first column NV specifies the average number of vehicles, DIST defines the average traveled distance, MeanDev is the mean deviation to the best-known solutions, NBest is the number of instances where our algorithm reaches the best-known solution and finally TimeBest indicates the average time to find the best solution.
 small-size instances. Indeed, in most cases good or even optimal solutions are reached very quickly for the instances with 25 and 50 customers. Besides, the mean deviation with the best-known performance of the algorithm decreases with instances size.
However, the goal of the algorithm is to propose a good perfor-mance to optimize a given solution (sometimes defined by the scheduler). Our algorithm is then hardly dependent on the initial solution contrarily to the most efficient metaheuristics of the literature. Anyway, it is always interesting for robustness to keep if the scheduler participates in the design of the solution. 4. Model inversion: a new approach for constraint relaxation of mechanisms proposed to deal with infeasible problems.
Obviously, an infeasible problem is unsolvable, that means it is then necessary to relax some constraints in order to find a scheduler in constraints relaxation process. Indeed, in planning and scheduling context, the scheduler has a wide knowledge of problem constraints and, more importantly, s/he also has the ability to negotiate constraints relaxation with other problem actors (customers, drivers, etc.). In the literature few approaches have been proposed to deal with infeasible problems. On the one hand, human X  X achine interaction experts propose to focus the research on the way the problem constraints are presented in order to facilitate constraint relaxation process to the scheduler in a fully automated context, algorithmic mechanisms based on to get a feasible problem.
 for constraint relaxation making the problem feasible. 4.1. Model inversion principles when the problem is not satisfiable. The idea is to propose model inversion mechanisms in order to identify the constraints to relax and how these constraints have to be modified. The model inversion consists in the exchange of roles between the decision variables and the problem fixed parameters. In model inversion, decision variables become parameters restricting decision space and parameters become decision variables that can be used to deduce inferences. The main idea is then to determine how problem parameters have to be relaxed in order to get a feasible problem.

Fig. 5 shows the proposed user interface for vehicle selection implementing model inversion mechanisms.

The first step for model inversion development is the identi-fication of the parameters integrating the constraints. Once the parameters have been identified, it is then necessary to propose a model inversion mechanism adapted to each parameter for each problem constraint. These mechanisms are launched after a mine the parameters susceptible to be relaxed. Indeed, there always exist parameters having a more important influence on the violated constraint. In a second phase, an algorithm computes how the parameters have to be relaxed in order to satisfy the violated constraint.

We stress that the complicated part of model inversion frame-work are the design of efficient algorithms to deal with a set of parameters. For instance, it is sometimes difficult to select between a set of customers which one has to be postponed for another day or to decide the customer which its forecasted
In that context, model inversion technics based on data classifica-tion methods in order to determine the most suitable constraints to relax in priority are proposed. However, these generic algo-rithms need to be adapted to each problem constraint to increase their efficiency. 4.2. Data classification based algorithms
In this section, the generic data classification methods with different constraint adapted criteria used to propose to the
Data analysis offers a set of methods designed to structure data information in order to identify connections between indi-viduals. The goal of data classification methods is to propose sets of homogeneous individuals. A similarity measure is often used to group individuals. The goal of the measure is to quantify the similarity between two individuals. The groups of individuals are then proposed trying to maximize the similarity between the individuals.

Two data classification methods to group the customers following a geographical and a temporal criterion are considered.
When a constraint is violated, an analysis of the groups of clients in order to determine the most suitable constraints to relax is proposed. However, we remark that these methods can be easily extended to other relevant properties of individuals, in our case the customers, in order to adapt the algorithms to each problem constraint. 4.2.1. Geographical criterion
We propose the k-means algorithm ( Forgy, 1965 ; Lloyd, 1982 ) to group customers following a geographical criterion. The k -means algorithm is used to group the nc customers into K relation to a similarity measure defined for each couple of customers. In the context of a geographical criterion, the custo-mer location is selected as similarity criterion. The properties clusters is the number of vehicles of the solution. Thus each cluster may be seen as a route.

The similarity measure is then the distance between the customers d  X  First, the K -means are created. The initial means are uniformly spread along the longest axis of the problem taking the centroid of the customers as the center point. Then, at each iteration the distance between the customers and the means is computed. Each the K -means are updated as the centroid of the new clusters. The algorithm stops when no more changes between the clusters of two successive iterations are observed.
 Algorithm 3. k -means algorithm for geographical customer classification.

Step 1: Select a set of K means repeat
Step 2 : Compute distances between each customer and the means  X  Equation  X  11  X  X 
Step 3 : Allocate each customer to the cluster with the nearest mean
Step 4 : Update the means of each cluster P k until no changes are observed between the clusters of two successive iterations ;
Once the sets of customers are performed, an analysis of the clusters in order to determine the best constraints to relax is performed. This analysis has however to be adapted to the constraint being violated.

Case study : postpone a customer delivery . We study here the case when a customer delivery has to be postponed because the problem constraints cannot be satisfied. In the geographical criterion context, the customers being part of the same cluster have a high probability to be served by the same vehicle. In that case, a parameter allowing to identify the less homogeneous customers for the clusters is proposed. This parameter ( dm calculated using the mean distance between the customer and the other customers of its cluster and the distance between the customer and the nearest depot in order to penalize the custo-mers not located close of the depots dm  X  The customer can be then classed according to this parameter.
A priority list of customers to postpone based on geographical information can be proposed to the scheduler. 4.2.2. Temporal criterion
A temporal-based customer classification is also proposed. In that case, the clustering approach uses the Dynamic Cluster
Algorithm (DCA) introduced by Diday (1971) . DCA is an extension of k -means algorithm. The similarities here can no longer be shown as an Euclidean distance; an allocation function (a dissim-ilarity measure) and also a new way to represent the clusters (the centroid does not exist anymore) need to be defined. A dissim-ilarity measure based on customer time windows ( Levy, 1996 )is proposed. The parameter measures the degree of centering between two time windows. Fig. 6 displays the main relations between two time windows and the value of the dissimilarity measure ( d ) for each configuration.
 d  X  i , j  X  X  is the nearest to the middle of the time interval distances between the customer and the core of the K clusters tomer is then allocated to the cluster with a minimal distance (minimize d ) and finally the core of the new clusters are updated. uniformly distributed all along the release times scale. Algorithm 4. Core initialization for temporal-based classification. measure groups together customers with time windows interac-tion. Once the groups of customers are performed, the clusters are analyzed in order to identify the most conflicting customers. For parameter is computed as the ratio between the number of customers of the cluster and the number of vehicles. The critical index gives an idea of how critical the cluster is. Indeed, a big value for the CI k means that the planner may have some troubles to serve the customers of the cluster because of customers time windows incompatibilities. The CI k is then used as a parameter to point the customers to postpone in case of infeasibility.
Algorithm 5. Identification of a customer to postpone the deliv-ery for a temporal-based criterion.

Step 1: Core initialization for temporal-based classification (Algorithm 4) repeat Step 2 : Compute d between each customer and the K cores
Step 3 : Allocate each customer on a cluster which its core minimizes d
Step 4 : Update cores of each cluster P k until no changes are observed between two successive iterations
Step 5: Identify clusters of conflicting customers ( CI k for each conflicting cluster do 6 6 6 6 6 6 6 4
Step 8: Propose the customer of the list L with the biggest dm i as the first customer to postpone
We observe that travel time between customers is not con-sidered in temporal-based classification. To cover this lack, both classification criteria (geographical and temporal) are mixed in algorithm is used to select a customer between the critical customers. Algorithm 5 describes the mechanism to propose a priority list of customers to be postponed based on temporal information. 4.3. Computational results
The algorithms based on data classification methods proposed to select the best customer to postpone the delivery are evaluated in this section. These algorithms are first compared on a set of small-size instances (nine customers) where a complete enu-meration of all feasible solutions can be performed in a reason-able time. The number of feasible solutions is used to evaluate the flexibility provided by the criteria. Indeed, a larger number of feasible solutions widen planners X  degrees of freedom facilitating the construction of real-world adapted solutions. The instances of the second set are more realistic instances with 25 customers.
Model inversion criteria have been compared considering a geographical optimization function: travel distance minimization.
The small-size instances (nine customers) of the capacitated vehicle routing problem with customer time windows (CVRPTW) are optimally solved. Indeed, each instance is solved nine times suppressing each time one customer from the set of customers.
The results obtained taking out of the problem the customer for which the criteria give the priority are compared: the GDC criterion (mean distance between customers of the same cluster after the geographical-based clustering), the GDD criterion (lar-gest distance with the nearest depot), and the TDC criterion (mean distance between customers of the same cluster after the tem-poral-based clustering).

To generate the instances, customers have to be eliminated of the CVRPTW small-size instances of Solomon (1983) . Depending on the customer locations, Solomon X  X  instances are classified in three groups: clustered customers (C), random customers (R), and mixed customers (RC).

In Table 3 , the first column NbOptDist specifies the number of instances the optimal solution for distance minimization is reached when the problem is solved without the customer proposed by the i criterion. The total number of instances is put in brackets. The second column ( AvgDe v ) specifies the average deviation from the optimal solution for the instances where the optimal solution is reached when the suppressed customer is not the customer selected by the criterion. AvgPos indicates the average position of the solution when the solutions are sorted in a non-decreasing when the problem is solved without the customer selected by the the last column ( NbSol ) represents the number of instances the decision of the criterion is the decision providing a bigger number of feasible solutions.

These results show that GDC is the most efficient criterion for the instances. The AvgPos is around 3 for the GDC criterion that means that when the criterion decision is not the best suitable decision, the proposition of the criterion keeps being a good proposition. The GDC and GDD criteria outperform the TDC criterion, which is not a surprise because the objective (distance minimization) used to evaluate the algorithms is a geographical-based function such as GDC and GDD , contrarily to TDC which is a temporal-based criterion. The last line shows that all criteria together are really efficient. Indeed, the most suitable choice is selected for 37 over 56 instances by one of the three criteria when distance minimization is considered. It is interesting to note that following the advices of the criteria generally (38 over 56 instances) leads to a problem accepting a greater number of feasible solutions, thus increasing planners X  opportunities for their behavior in order to find better real-world suited solutions.
Table 4 displays the results for the instances with 25 custo-mers. A complete enumeration of solutions in a reasonable time is not possible here, the instances have been therefore solved using
Algorithm 2 . The last column of Table 3 calculated from the complete enumeration of feasible solutions has no longer any sense in Table 4 . For this reason, the column NbSol has been replacing by Nb5Best indicating, in that case, the number of instances the decision proposed by the criterion is among the five best decisions considering distance optimization.
The results are very similar than for the instances with only nine customers. The GDC criterion proves to be the most efficient criterion, especially for instances with clustered and randomized customers, type C and type R, respectively. Nevertheless, these results show that GDD criterion is the best criterion for the customers after the k -means algorithm do not correspond exactly with the vehicle routes determined by the problem-solving algorithm). However, it is worth remarking that the efficiency of reaching one of the five best solutions for distance minimization and the average deviation is less than 5% meaning that the criteria complement each other. 5. Conclusions
In this paper, a decision support system for transportation scheduling has been proposed. An interdisciplinary approach has been followed for the system design; a link has been done between problem solving methods (operations research technics and data classification algorithms) and cognitive engineering technics (interfaces design, decision sharing between human and machine). The paper focuses on the solving mechanism and scheduler-oriented algorithms integrating the decision support system.

First, a work domain analysis using an abstraction hierarchy for the vehicle routing problem has been described. A new approach is proposed, based on the study of the different variants to reach completeness in domain constraints identification at the same time that the abstraction hierarchy remains event-and device-independent. The main advantage of the approach is that the problem representation after the analysis does not restrict strategies for scheduler behavior. The domain constraints revealed by the analysis make up the reference system shared by the human and the machine. In that context, a decision support system architecture has been then defined around the work domain analysis.

The solving mechanism designed to assist the scheduler to perform each problem subtask has been presented. To this purpose, different solving control modes seeking to facilitate scheduler participation in problem solving processes have been proposed. The idea behind control modes, contrarily to a fully automated approach, is that system, through user-interaction tools, gives the schedulers the possibility to built solutions according to their preferences, letting to take into consideration new constraints and/or occasionally violating some of the con-straints in order to find better real-world adapted solutions. In scheduler to solve the problem have been proposed and effi-ciently tested on instances of the literature.

Finally, an original framework aiming at supporting problem constraints relaxation when this becomes infeasible has been proposed. Constraint relaxation support is a topic barely dis-cussed in the literature. In this paper, the principles of a methodology for constraint relaxation seeking to support the have been defined. In that context, model inversion mechanisms using data classification algorithms have been proposed and efficiently tested on instances of the literature. The results show the interest of such a Human X  X achine cooperation in terms of is worth remarking that the proposed model inversion mechan-isms are generic enough to be used on different kinds of problems others than vehicle routing. Indeed, spatial and temporal decom-position methods suit and can be easily adapted for planning and scheduling problems.
 Acknowledgments numerous constructive remarks.
 LAAS-CNRS, Universite  X  de Toulouse, France.
 References
