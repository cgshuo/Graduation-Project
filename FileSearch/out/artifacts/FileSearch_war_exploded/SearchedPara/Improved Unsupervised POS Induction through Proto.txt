 } @cs.huji.ac.il Part-of-speech (POS) tagging is a fundamental NLP task, used by a wide variety of applications. However, there is no single standard POS tag-ging scheme, even for English. Schemes vary significantly across corpora and even more so across languages, creating difficulties in using POS tags across domains and for multi-lingual systems (Jiang et al., 2009). Automatic induction of POS tags from plain text can greatly alleviate this problem, as well as eliminate the efforts in-curred by manual annotations. It is also a problem of great theoretical interest. Consequently, POS induction is a vibrant research area (see Section 2).
In this paper we present an algorithm based on the theory of prototypes (Taylor, 2003), which posits that some members in cognitive categories are more central than others. These practically de-fine the category, while the membership of other elements is based on their association with the central members. Our algorithm first clusters words based on a fine morphological representa-tion. It then clusters the most frequent words, defining landmark clusters which constitute the cores of the categories. Finally, it maps the rest of the words to these categories. The last two stages utilize a distributional representation that has been shown to be effective for unsupervised parsing (Seginer, 2007).
 We evaluated the algorithm in both English and German, using four different mapping-based and information theoretic clustering evaluation mea-sures. The results obtained are generally better than all existing POS induction algorithms.
Section 2 reviews related work. Sections 3 and 4 detail the algorithm. Sections 5, 6 and 7 describe the evaluation, experimental setup and results. Unsupervised and semi-supervised POS tagging have been tackled using a variety of methods. Sch  X  utze (1995) applied latent semantic analysis. The best reported results (when taking into ac-count all evaluation measures, see Section 5) are given by (Clark, 2003), which combines dis-tributional and morphological information with the likelihood function of the Brown algorithm (Brown et al., 1992). Clark X  X  tagger is very sen-sitive to its initialization. Reichart et al. (2010b) propose a method to identify the high quality runs of this algorithm. In this paper, we show that our algorithm outperforms not only Clark X  X  mean performance, but often its best among 100 runs. Most research views the task as a sequential la-beling problem, using HMMs (Merialdo, 1994; Banko and Moore, 2004; Wang and Schuurmans, 2005) and discriminative models (Smith and Eis-ner, 2005; Haghighi and Klein, 2006). Several techniques were proposed to improve the HMM model. A Bayesian approach was employed by (Goldwater and Griffiths, 2007; Johnson, 2007; Gao and Johnson, 2008). Van Gael et al. (2009) used the infinite HMM with non-parametric pri-ors. Grac  X a et al. (2009) biased the model to induce a small number of possible tags for each word.
The idea of utilizing seeds and expanding them to less reliable data has been used in several pa-pers. Haghighi and Klein (2006) use POS  X  X ro-totypes X  that are manually provided and tailored to a particular POS tag set of a corpus. Fre-itag (2004) and Biemann (2006) induce an ini-tial clustering and use it to train an HMM model. Dasgupta and Ng (2007) generate morphological clusters and use them to bootstrap a distributional model. Goldberg et al. (2008) use linguistic con-siderations for choosing a good starting point for the EM algorithm. Zhao and Marcus (2009) ex-pand a partial dictionary and use it to learn dis-ambiguation rules. Their evaluation is only at the type level and only for half of the words. Ravi and Knight (2009) use a dictionary and an MDL-inspired modification to the EM algorithm.

Many of these works use a dictionary provid-ing allowable tags for each or some of the words. While this scenario might reduce human annota-tion efforts, it does not induce a tagging scheme but remains tied to an existing one. It is further criticized in (Goldwater and Griffiths, 2007). Morphological representation. Many POS in-duction models utilize morphology to some ex-tent. Some use simplistic representations of termi-nal letter sequences (e.g., (Smith and Eisner, 2005; Haghighi and Klein, 2006)). Clark (2003) models the entire letter sequence as an HMM and uses it to define a morphological prior. Dasgupta and Ng (2007) use the output of the Morfessor segmenta-tion algorithm for their morphological representa-tion. Morfessor (Creutz and Lagus, 2005), which we use here as well, is an unsupervised algorithm that segments words and classifies each segment as being a stem or an affix. It has been tested on several languages with strong results.

Our work has several unique aspects. First, our clustering method discovers prototypes in a fully unsupervised manner, mapping the rest of the words according to their association with the prototypes. Second, we use a distributional repre-sentation which has been shown to be effective for unsupervised parsing (Seginer, 2007). Third, we use a morphological representation based on sig-natures, which are sets of affixes that represent a family of words sharing an inflectional or deriva-tional morphology (Goldsmith, 2001). Our algorithm is given a plain text corpus and op-tionally a desired number of clusters k . Its output is a partitioning of words into clusters. The al-gorithm utilizes two representations, distributional and morphological. Although eventually the latter is used before the former, for clarity of presenta-tion we begin by detailing the base distributional algorithm. In the next section we describe the mor-phological representation and its integration into the base algorithm.
 Overview. The algorithm consists of two main stages: landmark clusters discovery, and word mapping. For the former, we first compute a dis-tributional representation for each word. We then cluster the coordinates corresponding to high fre-quency words. Finally, we define landmark clus-ters . In the word mapping stage we map each word to the most similar landmark cluster.

The rationale behind using only the high fre-quency words in the first stage is twofold. First, prototypical members of a category are frequent (Taylor, 2003), and therefore we can expect the salient POS tags to be represented in this small subset. Second, higher frequency implies more re-liable statistics. Since this stage determines the cores of all resulting clusters, it should be as accu-rate as possible.
 Distributional representation. We use a sim-plified form of the elegant representation of lexi-cal entries used by the Seginer unsupervised parser (Seginer, 2007). Since a POS tag reflects the grammatical role of the word and since this rep-resentation is effective to parsing, we were moti-vated to apply it to the present task.
 Let W be the set of word types in the corpus. The right context entry of a word x  X  W is a pair of mappings r int W  X  [0 , 1] . For each w  X  W , r adj x ( w ) is an adjacency score of w to x , reflecting w  X  X  tendency to appear on the right hand side of x .

For each w  X  W , r int ability score of x with w , reflecting the tendency of w to appear to the left of words that tend to ap-pear to the right of x . This can be viewed as a similarity measure between words with respect to their right context. The higher the scores the more the words tend to be adjacent/interchangeable.
Left context parameters l int defined analogously.

There are important subtleties in these defini-tions. First, for two words x, w  X  W , r adj is generally different from l adj ple, if w is a high frequency word and x is a low frequency word, it is likely that w appears many times to the right of x , yielding a high r adj but that x appears only a few times to the left of w yielding a low l adj nition of r int they need not be equal.

These functions are computed incrementally by a bootstrapping process. We initialize all map-pings to be identically 0. We iterate over the words in the training corpus. For every word instance x , we take the word immediately to its right y and update x  X  X  right context using y  X  X  left context:  X  w  X  W : r adj x ( w ) +=
The division by N ( y ) (the number of times y appears in the corpus before the update) is done in order not to give a disproportional weight to high frequency words. Also, r int might become larger than 1. We therefore nor-malize them after all updates are performed by the number of occurrences of x in the corpus.

We update l int the word z immediately to the left of x . The up-dates of the left and right functions are done in parallel.

We define the distributional representation of a word type x to be a 4 | W | + 2 dimensional vector v . Each word w yields four coordinates, one for each direction (left/right) and one for each map-ping type (int/adj). Two additional coordinates represent the frequency in which the word appears to the left and to the right of a stopping punc-tuation. Of the 4 | W | coordinates corresponding to words, we allow only 2 n to be non-zero: the n top scoring among the right side coordinates (those of r int among the left side coordinates (those of l int and l adj
The distance between two words is defined to be one minus the cosine of the angle between their representation vectors.
 Coordinate clustering. Each of our landmark clusters will correspond to a set of high frequency words (HFWs). The number of HFWs is much larger than the number of expected POS tags. Hence we should cluster HFWs. Our algorithm does that by unifying some of the non-zero coordi-nates corresponding to HFWs in the distributional representation defined above.

We extract the words that appear more than N dure I times (5 in our experiments).

We run average link clustering with a threshold  X  in each iteration initializing every HFW to have its own cluster. AVGLINK erage link algorithm until the two closest clusters have a distance larger than  X  . We then use the in-duced clustering to update the distributional rep-resentation, by collapsing all coordinates corre-sponding to words appearing in the same cluster into a single coordinate whose value is the sum of the collapsed coordinates X  values. In order to produce a conservative (fine) clustering, we used a relatively low  X  value of 0 . 25 .

Note that the AVGLINK of the I iterations assigns each HFW to a sepa-rate cluster. The iterations differ in the distribu-tional representation of the HFWs, resulting from the previous iterations.

In our English experiments, this process re-duced the dimension of the HFWs set (the num-ber of coordinates that are non-zero in at least one of the HFWs) from 14365 to 10722. The aver-age number of non-zero coordinates per word de-creased from 102 to 55.

Since all eventual POS categories correspond to clusters produced at this stage, to reduce noise we delete clusters of less than five elements. Landmark detection. We define landmark clus-ters using the clustering obtained in the final iter-ation of the coordinate clustering stage. However, the number of clusters might be greater than the desired number k , which is an optional parame-ter of the algorithm. In this case we select a sub-set of k clusters that best covers the HFW space. We use the following heuristic. We start from the most frequent cluster, and greedily select the clus-ter farthest from the clusters already selected. The distance between two clusters is defined to be the average distance between their members. A clus-ter X  X  distance from a set of clusters is defined to be its minimal distance from the clusters in the set. The final set of clusters { L members are referred to as landmark clusters and prototypes , respectively.
 Mapping all words. Each word w  X  W is as-signed the cluster L totype:
Words that appear less than 5 times are consid-ered as unknown words . We consider two schemes for handling unknown words. One randomly maps each such word to a cluster, using a probabil-ity proportional to the number of unique known words already assigned to that cluster. However, when the number k of landmark clusters is rela-tively large, it is beneficial to assign all unknown words to a separate new cluster (after running the algorithm with k  X  1 ). In our experiments, we use the first option when k is below some threshold (we used 15), otherwise we use the second. The morphological model generates another word clustering, based on the notion of a signature. This clustering is integrated with the distributional model as described below. 4.1 Morphological Representation We use the Morfessor (Creutz and Lagus, 2005) word segmentation algorithm. First, all words in the corpus are segmented. Then, for each stem, the set of all affixes with which it appears (its sig-nature , (Goldsmith, 2001)) is collected. The mor-phological representation of a word type is then defined to be its stem X  X  signature in conjunction
We now collect all words having the same rep-resentation. For instance, if the words joined and painted are found to have the same signature, they would share the same cluster since both have the affix  X  ed X . The word joins does not share the same cluster with them since it has a different affix,  X  s X . This results in coarse-grained clusters exclusively defined according to morphology.
In addition, we incorporate capitalization infor-mation into the model, by constraining all words that appear capitalized in more than half of their instances to belong to a separate cluster, regard-less of their morphological representation. The motivation for doing so is practical: capitalization is used in many languages to mark grammatical categories. For instance, in English capitalization marks the category of proper names and in Ger-man it marks the noun category . We report En-glish results both with and without this modifica-tion.

Words that contain non-alphanumeric charac-ters are represented as the sequence of the non-alphanumeric characters they include, e.g.,  X  X is-` a-vis X  is represented as ( X - X ,  X - X ) . We do not as-sign a morphological representation to words in-cluding more than one stem (like weatherman ), to words that have a null affix (i.e., where the word is identical to its stem) and to words whose stem is not shared by any other word (signature of size 1). Words that were not assigned a morphologi-cal representation are included as singletons in the morphological clustering. 4.2 Distributional-Morphological Algorithm We detail the modifications made to our base distributional algorithm given the morphological clustering defined above.
 Coordinate clustering and landmarks. We tween words appearing in the same morphologi-cal cluster. Only when the distance between the two closest clusters gets above  X  we remove this constraint and proceed as before. This is equiv-alent to performing AVGLINK each morphological cluster and then using the re-sult as an initial condition for an AVGLINK dinate clustering. The modified algorithm in this stage is otherwise identical to the distributional al-gorithm.
 Word mapping. In this stage words that are not prototypes are mapped to one of the landmark clusters. A reasonable strategy would be to map all words sharing a morphological cluster as a sin-gle unit. However, these clusters are too coarse-grained. We therefore begin by partitioning the morphological clusters into sub-clusters according to their distributional behavior. We do so by apply-different parameter) to each morphological clus-ter. Since our goal is cluster refinement , we use a  X  that is considerably higher than  X  ( 0 . 9 ).
We then find the closest prototype to each such sub-cluster (averaging the distance across all of the latter X  X  members) and map it as a single unit to the cluster containing that prototype. We evaluate the clustering produced by our algo-rithm using an external quality measure: we take a corpus tagged by gold standard tags, tag it using the induced tags, and compare the two taggings. There is no single accepted measure quantifying the similarity between two taggings. In order to be as thorough as possible, we report results using four known measures, two mapping-based mea-sures and two information theoretic ones.
 Mapping-based measures. The induced clus-ters have arbitrary names. We define two map-ping schemes between them and the gold clus-ters. After the induced clusters are mapped, we can compute a derived accuracy. The Many-to-1 measure finds the mapping between the gold stan-dard clusters and the induced clusters which max-imizes accuracy, allowing several induced clusters to be mapped to the same gold standard cluster. The 1-to-1 measure finds the mapping between the induced and gold standard clusters which max-imizes accuracy such that no two induced clus-ters are mapped to the same gold cluster. Com-puting this mapping is equivalent to finding the maximal weighted matching in a bipartite graph, whose weights are given by the intersection sizes between matched classes/clusters. As in (Reichart and Rappoport, 2008), we use the Kuhn-Munkres algorithm (Kuhn, 1955; Munkres, 1957) to solve this problem.
 Information theoretic measures. These are based on the observation that a good clustering re-duces the uncertainty of the gold tag given the in-duced cluster, and vice-versa. Several such mea-sures exist; we use V (Rosenberg and Hirschberg, 2007) and NVI (Reichart and Rappoport, 2009), VI  X  X  (Meila, 2007) normalized version. Since a goal of unsupervised POS tagging is in-ducing an annotation scheme, comparison to an existing scheme is problematic. To address this problem we compare to three different schemes in two languages. In addition, the two English schemes we compare with were designed to tag corpora contained in our training set, and have been widely and successfully used with these cor-pora by a large number of applications.

Our algorithm was run with the exact same pa-rameters on both languages: N = 100 (high fre-quency threshold), n = 50 (the parameter that determines the effective number of coordinates),  X  = 0 . 25 (cluster separation during landmark cluster generation),  X  = 0 . 9 (cluster separation during refinement of morphological clusters).
The algorithm we compare with in most detail is (Clark, 2003), which reports the best current results for this problem (see Section 7). Since Clark X  X  algorithm is sensitive to its initialization, we ran it a 100 times and report its average and standard deviation in each of the four measures. In addition, we report the percentile in which our result falls with respect to these 100 runs.
Punctuation marks are very frequent in corpora and are easy to cluster. As a result, including them in the evaluation greatly inflates the scores. For this reason we do not assign a cluster to punctua-tion marks and we report results using this policy, which we recommend for future work. However, to be able to directly compare with previous work, we also report results for the full POS tag set. We do so by assigning a singleton cluster to each punctuation mark (in addition to the k required clusters). This simple heuristic yields very high performance on punctuation, scoring (when all other words are assumed perfect tagging) 99.6% (99.1%) 1-to-1 accuracy when evaluated against the English fine (coarse) POS tag sets, and 97.2% when evaluated against the German POS tag set.
For English, we trained our model on the 39832 sentences which constitute sections 2-21 of the PTB-WSJ and on the 500K sentences from the NYT section of the NANC newswire corpus (Graff, 1995). We report results on the WSJ part of our data, which includes 950028 words tokens in 44389 types. Of the tokens, 832629 (87.6%) are not punctuation. The percentage of unknown words (those appearing less than five times) is 1.6%. There are 45 clusters in this annotation scheme, 34 of which are not punctuation.

We ran each algorithm both with k =13 and k =34 (the number of desired clusters). We com-pare the output to two annotation schemes: the fine grained PTB WSJ scheme, and the coarse grained tags defined in (Smith and Eisner, 2005). The output of the k =13 run is evaluated both against the coarse POS tag annotation (the  X  X oarse k =13 X  scenario) and against the full PTB-WSJ annotation scheme (the  X  X ine k =13 X  scenario). The k =34 run is evaluated against the full PTB-WSJ annotation scheme (the  X  X ine k =34 X  scenario).

The POS cluster frequency distribution tends to be skewed: each of the 13 most frequent clusters in the PTB-WSJ cover more than 2.5% of the to-kens (excluding punctuation) and together 86.3% of them. We therefore chose k =13, since it is both the number of coarse POS tags (excluding punctu-ation) as well as the number of frequent POS tags in the PTB-WSJ annotation scheme. We chose k =34 in order to evaluate against the full 34 tags PTB-WSJ annotation scheme (excluding punctua-tion) using the same number of clusters.

For German, we trained our model on the 20296 sentences of the NEGRA corpus (Brants, 1997) and on the first 450K sentences of the DeWAC corpus (Baroni et al., 2009). DeWAC is a cor-pus extracted by web crawling and is therefore out of domain. We report results on the NEGRA part, which includes 346320 word tokens of 49402 types. Of the tokens, 289268 (83.5%) are not punctuation. The percentage of unknown words (those appearing less than five times) is 8.1%. There are 62 clusters in this annotation scheme, 51 of which are not punctuation.

We ran the algorithms with k =17 and k =26. k =26 was chosen since it is the number of clus-ters that cover each more than 0.5% of the NE-GRA tokens, and in total cover 96% of the (non-punctuation) tokens. In order to test our algo-rithm in another scenario, we conducted experi-ments with k =17 as well, which covers 89.9% of the tokens. All outputs are compared against NE-GRA X  X  gold standard scheme.

We do not report results for k =51 (where the number of gold clusters is the same as the number of induced clusters), since our algorithm produced only 42 clusters in the landmark detection stage. We could of course have modified the parame-ters to allow our algorithm to produce 51 clusters. However, we wanted to use the exact same param-eters as those used for the English experiments to minimize the issue of parameter tuning.

In addition to the comparisons described above, we present results of experiments (in the  X  X ine k =13 X  scenario) that quantify the contribution of each component of the algorithm. We ran the base distributional algorithm, a variant which uses only capitalization information (i.e., has only one non-singleton morphological class, that of words ap-pearing capitalized in most of their instances) and a variant which uses no capitalization information, defining the morphological clusters according to the morphological representation alone. Table 1 presents results for the English and Ger-man experiments. For English, our algorithm ob-tains better results than Clark X  X  in all measures and scenarios. It is without exception better than the average score of Clark X  X  and in most cases better than the maximal Clark score obtained in 100 runs.
A significant difference between our algorithm and Clark X  X  is that the latter, like most algorithms which addressed the task, induces the clustering by maximizing a non-convex function. These functions have many local maxima and the specific solution to which algorithms that maximize them converge strongly depends on their (random) ini-tialization. Therefore, their output X  X  quality often significantly diverges from the average. This issue is discussed in depth in (Reichart et al., 2010b).
For German, in the k =26 scenario our algorithm outperforms Clark X  X , often outperforming even its maximum in 100 runs. In the k =17 scenario, our algorithm obtains a higher score than Clark with probability 0.4 to 0.78, depending on the measure and scenario. Clark X  X  average score is slightly bet-ter in the Many-to-1 measure, while our algorithm performs somewhat better than Clark X  X  average in the 1-to-1 and NVI measures.

The DeWAC corpus from which we extracted statistics for the German experiments is out of do-main with respect to NEGRA. The correspond-ing corpus in English, NANC, is a newswire cor-pus and therefore clearly in-domain with respect to WSJ. This is reflected by the percentage of un-known words, which was much higher in German than in English (8.1% and 1.6%), lowering results.
Table 2 shows the effect of each of our algo-rithm X  X  components. Each component provides an improvement over the base distributional algo-rithm. The full coordinate clustering stage (sev-eral iterations, F) considerably improves the score over a single iteration (F(I=1)). Capitalization in-formation increases the score more than the mor-phological information, which might stem from the granularity of the POS tag set with respect to names. This analysis is supported by similar ex-periments we made in the  X  X oarse k =13 X  scenario (not shown in tables here). There, the decrease in performance was only of 1% X 2% in the mapping based measures and 3.5% in the V measure.

Finally, Table 4 presents reported results for all recent algorithms we are aware of that tackled the task of unsupervised POS induction from plain text. Results for our algorithm X  X  and Clark X  X  are reported for the  X  X ine, k =34 X  scenario. The set-tings of the various experiments vary in terms of the exact annotation scheme used (coarse or fine grained) and the size of the test set. However, the score differences are sufficiently large to justify the claim that our algorithm is currently the best performing algorithm on the PTB-WSJ corpus for
Since previous works provided results only for the scenario in which punctuation is included, the reported results are not directly comparable. In order to quantify the effect various punctuation schemes have on the results, we evaluated the  X  X HMM: PY-fixed X  model (Van Gael et al., 2009) and ours when punctuation is excluded, included cate that most probably even after an appropriate correction for punctuation, our model remains the best performing one. In this work we presented a novel unsupervised al-gorithm for POS induction from plain text. The al-gorithm first generates relatively accurate clusters of high frequency words, which are subsequently used to bootstrap the entire clustering. The dis-tributional and morphological representations that we use are novel for this task.

We experimented on two languages with map-ping and information theoretic clustering evalua-tion measures. Our algorithm obtains the best re-ported results on the English PTB-WSJ corpus. In addition, our results are almost always better than Clark X  X  on the German NEGRA corpus.
We have also performed a manual error anal-ysis, which showed that our algorithm performs much better on closed classes than on open classes. In order to asses this quantitatively, let us define a random variable for each of the gold clusters, which receives a value corresponding to each induced cluster with probability proportional to their intersection size. For each gold cluster, we compute the entropy of this variable. In ad-dition, we greedily map each induced cluster to a gold cluster and compute the ratio between their intersection size and the size of the gold cluster (mapping accuracy).
 We experimented in the  X  X ine k =34 X  scenario. The clusters that obtained the best scores were (brackets indicate mapping accuracy and entropy for each of these clusters) coordinating conjunc-tions (95%, 0.32), prepositions (94%, 0.32), de-terminers (94%, 0.44) and modals (93%, 0.45). These are all closed classes.

The classes on which our algorithm performed worst consist of open classes, mostly verb types: past tense verbs (47%, 2.2), past participle verbs (44%, 2.32) and the morphologically unmarked non-3rd person singular present verbs (32%, 2.86). Another class with low performance is the proper nouns (37%, 2.9). The errors there are mostly of three types: confusions between common and proper nouns (sometimes due to ambiguity), un-known words which were put in the unknown words cluster, and abbreviations which were given a separate class by our algorithm. Finally, the al-gorithm X  X  performance on the heterogeneous ad-verbs class (19%, 3.73) is the lowest.
 with respect to open and closed classes. While his algorithm performs considerably better on ad-verbs (15% mapping accuracy difference and 0.71 entropy difference), our algorithm scores consid-erably better on prepositions (17%, 0.77), su-perlative adjectives (38%, 1.37) and plural proper names (45%, 1.26).
Naturally, this analysis might reflect the arbi-trary nature of a manually design POS tag set rather than deficiencies in automatic POS induc-tion algorithms. In future work we intend to ana-lyze the output of such algorithms in order to im-prove POS tag sets.

Our algorithm and Clark X  X  are monosemous (i.e., they assign each word exactly one tag), while most other algorithms are polysemous. In order to assess the performance loss caused by the monose-mous nature of our algorithm, we took the M-1 greedy mapping computed for the entire dataset and used it to compute accuracy over the monose-mous and polysemous words separately. Results are reported for the English  X  X ine k =34 X  scenario (without punctuation). We define a word to be monosemous if more than 95% of its tokens are assigned the same gold standard tag. For English, there are approximately 255K polysemous tokens and 578K monosemous ones. As expected, our algorithm is much more accurate on the monose-mous tokens, achieving 76.6% accuracy, com-pared to 47.1% on the polysemous tokens.

The evaluation in this paper is done at the token level. Type level evaluation, reflecting the algo-rithm X  X  ability to detect the set of possible POS tags for each word type, is important as well. It could be expected that a monosemous algorithm such as ours would perform poorly in a type level evaluation. In (Reichart et al., 2010a) we discuss type level evaluation at depth and propose type level evaluation measures applicable to the POS induction problem. In that paper we compare the performance of our Prototype Tagger with lead-ing unsupervised POS tagging algorithms (Clark, 2003; Goldwater and Griffiths, 2007; Gao and Johnson, 2008; Van Gael et al., 2009). Our al-gorithm obtained the best results in 4 of the 6 measures in a margin of 4 X 6%, and was second best in the other two measures. Our results were better than Clark X  X  (the only other monosemous algorithm evaluated there) on all measures in a margin of 5 X 21%. The fact that our monose-mous algorithm was better than good polysemous algorithms in a type level evaluation can be ex-plained by the prototypical nature of the POS phe-nomenon (a longer discussion is given in (Reichart et al., 2010a)). However, the quality upper bound for monosemous algorithms is obviously much lower than that for polysemous algorithms, and we expect polysemous algorithms to outperform monosemous algorithms in the future in both type level and token level evaluations.

The skewed (Zipfian) distribution of POS class frequencies in corpora is a problem for many POS induction algorithms, which by default tend to in-duce a clustering having a balanced distribution. Explicit modifications to these algorithms were in-troduced in order to bias their model to produce such a distribution (see (Clark, 2003; Johnson, 2007; Reichart et al., 2010b)). An appealing prop-erty of our model is its ability to induce a skewed distribution without being explicitly tuned to do so, as seen in Figure 2.
 Acknowledgements. We would like to thank Yoav Seginer for his help with his parser.

