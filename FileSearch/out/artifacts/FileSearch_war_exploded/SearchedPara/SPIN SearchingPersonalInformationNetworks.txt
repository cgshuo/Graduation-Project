 Categories and Subject Descriptors: H.3.3 Information Search and Retrieval: Retrieval models; H.3.4 Systems and Software: Information networks General Terms: Algorithms, Design, Experimentation Keywords: Personal information management, informa-tion extraction and integration, graphical models for search
Affordable storage has grown dramatically over the last decade, enabling large-scale archival of email, contacts, doc-uments, images, and music. Large personal storage becomes all the more useful with effective search tools.

Recent operating systems can index PC hard disks and enable keyword search over many file types. All Web-based email services include keyword search. Major Web search companies have recently released desktop search tools that enable search on file systems and browser caches. Many research prototypes exist as well [4, 5, 3, 6].

With some exceptions [3, 6], prototypes and products have stayed close to traditional IR: they largely lack the capability to discover and reconcile entities and relations that pervade the user X  X  life from diverse and heterogeneous sources, to represent these in a graphical model, and to enable powerful but user-friendly queries on such graphs. These are the goals of our proposed system, SPIN.
Personal Information Network (PIN) entities can be per-sons, organizations, places, events, projects, trips, software, subscriptions and other artifacts. These are extracted from mentions in textual and semistructured sources, such as ad-dress books, documents and email.

PIN edges represent relations. Some are  X  X ard X  edges explicitly found in the data, e.g., person wrote email or email is-reply-to email. Others are  X  X oft X  or probabilistic edges induced through information extraction, e.g., person wrote paper or email mentions person. Yet other soft edges are created by reconciling aliases [7].
SPIN provides a proximity-based, type-sensitive and yet schema-light query language to search the PIN. One dom-inant query paradigm is type= TypeName NEAR Predicates . The user can look for a student who graduated around 2001 and went to work at IBM using the query type=person NEAR org=IBM year=2001 . The predicates org=IBM and year=2001 activate some nodes, which spread the activation using algo-rithms [1] that are sensitive to the structure and uncertainty in the PIN. SPIN can also search for small PIN subgraphs that connect at least one node matching each query key-word [2]. Moreover, SPIN will allow situated visual queries where the user can drag and drop PIN nodes, or designate nodes as hot . SPIN continuously assimilates user edits and annotations into its ranking algorithms. It also has user-trainable Web explorers and extractors to augment the PIN semi-automatically. Finally, SPIN serves as a type-aware middleware that uses the PIN and its trained type recogniz-ers to enhance queries to, and filter responses from, typeless keyword search engines on the Web.
