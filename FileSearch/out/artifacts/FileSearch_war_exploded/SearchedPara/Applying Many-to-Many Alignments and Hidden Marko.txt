 Letter-to-phoneme (L2P) conversion requires a sys-tem to produce phonemes that correspond to a given written word. Phonemes are abstract representa-tions of how words should be pronounced in natural speech, while letters or graphemes are representa-tions of words in written language. For example, the phonemes for the word phoenix are [ f i n I k s ].
The L2P task is a crucial part of speech synthesis systems, as converting input text (graphemes) into phonemes is the first step in representing sounds. L2P conversion can also help improve performance in spelling correction (Toutanova and Moore, 2001). Unfortunately, proper nouns and unseen words pre-vent a table look-up approach. It is infeasible to con-struct a lexical database that includes every word in the written language. Likewise, orthographic com-plexity of many languages prevents us from using hand-designed conversion rules. There are always exceptional rules that need to be added to cover a large vocabulary set. Thus, an automatic L2P sys-tem is desirable.

Many data-driven techniques have been proposed for letter-to-phoneme conversion systems, including pronunciation by analogy (Marchand and Damper, 2000), constraint satisfaction (Van Den Bosch and Canisius, 2006), Hidden Markov Model (Taylor, 2005), decision trees (Black et al., 1998), and neural networks (Sejnowski and Rosenberg, 1987). The training data usually consists of written words and their corresponding phonemes, which are not aligned; there is no explicit information indicating individual letter and phoneme relationships. These relationships must be postulated before a prediction model can be trained.

Previous work has generally assumed one-to-one alignment for simplicity (Daelemans and Bosch, 1997; Black et al., 1998; Damper et al., 2005). An expectation maximization (EM) based algo-rithm (Dempster et al., 1977) is applied to train the aligners. However, there are several problems with this approach. Letter strings and phoneme strings are not typically the same length, so null phonemes and null letters must be introduced to make one-to-one-alignments possible, Furthermore, two letters frequently combine to produce a single phoneme (double letters), and a single letter can sometimes produce two phonemes (double phonemes).

To help address these problems, we propose an automatic many-to-many aligner and incorporate it into a generic classification predictor for letter-to-phoneme conversion. Our many-to-many aligner automatically discovers double phonemes and dou-ble letters, as opposed to manually preprocessing data by merging phonemes using fixed lists. To our knowledge, applying many-to-many alignments to letter-to-phoneme conversion is novel.

Once we have our many-to-many alignments, we use that data to train a prediction model. Many phoneme prediction systems are based on local pre-diction methods, which focus on predicting an indi-vidual phoneme given each letter in a word. Con-versely, a method like pronunciation by analogy (PbA) (Marchand and Damper, 2000) is considered a global prediction method: predicted phoneme se-quences are considered as a whole. Recently, Van Den Bosch and Canisius (2006) proposed trigram class prediction, which incorporates a constraint sat-isfaction method to produce a global prediction for letter-to-phoneme conversion. Both PbA and tri-gram class prediction show improvement over pre-dicting individual phonemes, confirming that L2P systems can benefit from incorporating the relation-ship between phonemes in a sequence.

In order to capitalize on the information found in phoneme sequences, we propose to apply an HMM method after a local phoneme prediction pro-cess. Given a candidate list of two or more possible phonemes, as produced by the local predictor, the HMM will find the best phoneme sequence. Using this approach, our system demonstrates an improve-ment on several language data sets.
 The rest of the paper is structured as follows. We describe the letter-phoneme alignment methods including a standard one-to-one alignment method and our many-to-many approach in Section 2. The alignment methods are used to align graphemes and phonemes before the phoneme prediction mod-els can be trained from the training examples. In Section 3, we present a letter chunk prediction method that automatically discovers double letters in grapheme sequences. It incorporates our many-to-many alignments with prediction models. In Section 4, we present our application of an HMM method to the local prediction results. The results of experiments on several language data sets are dis-cussed in Section 5. We conclude and propose future work in Section 6. 2.1 One-to-one alignment There are two main problems with one-to-one align-ments: 1. Double letters: two letters map to one phoneme 2. Double phonemes: one letter maps to two
First, consider the double letter problem. In most cases when the grapheme sequence is longer than the phoneme sequence, it is because some letters are silent. For example, in the word abode , pronounced [ @ b o d ], the letter e produces a null phoneme ( ). This is well captured by one-to-one aligners. How-ever, the longer grapheme sequence can also be gen-erated by double letters; for example, in the word king , pronounced [ k I N ], the letters ng together produce the phoneme [ N ]. In this case, one-to-one aligners using null phonemes will produce an in-correct alignment. This can cause problems for the phoneme prediction model by training it to produce a null phoneme from either of the letters n or g .
In the double phoneme case, a new phoneme is introduced to represent a combination of two (or more) phonemes. For example, in the word fume with phoneme sequence [ f j u m ], the letter u pro-duces both the [ j ] and [ u ] phonemes. There are two possible solutions for constructing a one-to-one alignment in this case. The first is to cre-ate a new phoneme by merging the phonemes [ j ] and [ u ]. This requires constructing a fixed list of new phonemes before beginning the alignment pro-cess. The second solution is to add a null letter in the grapheme sequence. However, the null letter not only confuses the phoneme prediction model, but also complicates the the phoneme generation phase.
For comparison with our many-to-many ap-proach, we implement a one-to-one aligner based on the epsilon scattering method (Black et al., 1998). The method applies the EM algorithm to estimate
Algorithm 1 : Pseudocode for a many-to-many expectation-maximization algorithm.
 the probability of mapping a letter l to a phoneme p , P ( l, p ) . The initial probability table starts by mapping all possible alignments between letters and phonemes for each word in the training data, in-troducing all possible null phoneme positions. For example, the word/phoneme-sequence pair abode [ @ b o d ] has five possible positions where a null phoneme can be added to make an alignment.

The training process uses the initial probability ta-ble P ( l, p ) to find the best possible alignments for each word using the Dynamic Time Warping (DTW) algorithm (Sankoff and Kruskal, 1999). At each it-eration, the probability table P ( l, p ) is re-calculated based on the best alignments found in that iteration. Finding the best alignments and re-calculating the probability table continues iteratively until there is no change in the probability table. The final proba-bility table P ( l, p ) is used to find one-to-one align-ments given graphemes and phonemes. 2.2 Many-to-Many alignment We present a many-to-many alignment algorithm that overcomes the limitations of one-to-one align-ers. The training of the many-to-many aligner is an extension of the forward-backward training of a one-to-one stochastic transducer presented in (Ris-tad and Yianilos, 1998). Partial counts are counts of all possible mappings from letters to phonemes that are collected in the  X  table, while mapping probabil-ities (initially uniform) are maintained in the  X  table. For each grapheme-/phoneme-sequence pair ( x, y ) , the EM-many2many function (Algorithm 1) calls the Expectation-many2many function (Algorithm 2) to collect partial counts. T and V are the lengths of x and y respectively. The maxX and maxY variables are the maximum lengths of subsequences used in a single mapping operation for x and y . (For the
Algorithm 2 : Pseudocode for a many-to-many expectation algorithm.
 task at hand, we set both maxX and maxY to 2.) The Maximization-step function simply normalizes the partial counts to create a probability distribution. Normalization can be done over the whole table to create a joint distribution or per grapheme to create a conditional distribution.

The Forward-many2many function (Algorithm 3) fills in the table  X  , with each entry  X  ( t, v ) being the sum of all paths through the transducer that gen-erate the sequence pair ( x t Backward-many2many function fills in  X  , with each entry  X  ( t, v ) being the sum of all paths through the transducer that generate the sequence pair ( x T The constants DELX and DELY indicate whether or not deletions are allowed on either side. In our system, we allow letter deletions (i.e. mapping of letters to null phoneme), but not phoneme deletions.
Expectation-many2many first calls the two func-tions to fill the  X  and  X  tables, and then uses the probabilities to calculate partial counts for every possible mapping in the sequence pair. The par-tial count collected at positions t and v in the se-quence pair is the sum of all paths that generate the sequence pair and go through ( t, v ), divided by the sum of all paths that generate the entire sequence pair (  X  ( T, V ) ).

Once the probabilities are learned, the Viterbi
Algorithm 3 : Pseudocode for a many-to-many forward algorithm.
 algorithm can be used to produce the most likely alignment as in the following equations. Back point-ers to maximizing arguments are kept at each step so the alignment can be reconstructed.
Given a set of words and their phonemes, align-ments are made across graphemes and phonemes. For example, the word phoenix , with phonemes [ f i n I k s ], is aligned as: The letters ph are an example of the double let-ter problem (mapping to the single phoneme [ f ]), while the letter x is an example of the double phoneme problem (mapping to both [ k ] and [ s ] in the phoneme sequence). These alignments pro-vide more accurate grapheme-to-phoneme relation-ships for a phoneme prediction model. Our new alignment scheme provides more accu-rate alignments, but it is also more complex  X  sometimes a prediction model should predict two phonemes for a single letter, while at other times the prediction model should make a prediction based on a pair of letters. In order to distinguish between these two cases, we propose a method called  X  X etter chunking X .

Once many-to-many alignments are built across graphemes and phonemes, each word contains a set of letter chunks, each consisting of one or two let-ters aligned with phonemes. Each letter chunk can be considered as a grapheme unit that contains either one or two letters. In the same way, each phoneme chunk can be considered as a phoneme unit consist-ing of one or two phonemes. Note that the double letters and double phonemes are implicitly discov-ered by the alignments of graphemes and phonemes. They are not necessarily consistent over the train-ing data but based on the alignments found in each word.

In the phoneme generation phase, the system has only graphemes available to predict phonemes, so there is no information about letter chunk bound-aries. We cannot simply merge any two letters that have appeared as a letter chunk in the training data. For example, although the letter pair sh is usually pronounced as a single phoneme in English (e.g. gash [ g ae S ]), this is not true universally (e.g. gasholder [ g ae s h o l d @ r ]). Therefore, we im-plement a letter chunk prediction model to provide chunk boundaries given only graphemes.

In our system, a bigram letter chunking predic-tion automatically discovers double letters based on instance-based learning (Aha et al., 1991). Since the many-to-many alignments are drawn from 1-0, 1-1, 1-2, 2-0, and 2-1 relationships, each letter in a word can form a chunk with its neighbor or stand alone as a chunk itself. We treat the chunk prediction as a binary classification problem. We generate all the bigrams in a word and determine whether each bi-gram should be a chunk based on its context. Table 1 shows an example of how chunking prediction pro-ceeds for the word longs . Letters l l the letter bigram l simply consists of an individual letter. In the exam-ple, the word is decomposed as l | o | ng | s , which can be aligned with its pronunciation [ l | 6 | N | z ]. If the model happens to predict consecutive overlap-ping chunks, only the first of the two is accepted.
Table 1: An example of letter chunking prediction. Most of the previously proposed techniques for phoneme prediction require training data to be aligned in one-to-one alignments. Those models approach the phoneme prediction task as a classi-fication problem: a phoneme is predicted for each letter independently without using other predictions from the same word. These local predictions assume independence of predictions, even though there are clearly interdependencies between predictions. Pre-dicting each phoneme in a word without considering other assignments may not satisfy the main goal of finding a set of phonemes that work together to form a word.

A trigram phoneme prediction with constraint sat-isfaction inference (Van Den Bosch and Canisius, 2006) was proposed to improve on local predictions. From each letter unit, it predicts a trigram class that has the target phoneme in the middle surrounded by its neighboring phonemes. The phoneme sequence is generated in such a way that it satisfies the tri-gram, bigram and unigram constraints. The over-lapping predictions improve letter-to-phoneme per-formance mainly by repairing imperfect one-to-one alignments.

However, the trigram class prediction tends to be more complex as it increases the number of tar-get classes. For English, there are only 58 uni-gram phoneme classes but 13,005 tri-gram phoneme classes. The phoneme combinations in the tri-gram classes are potentially confusing to the prediction model because the model has more target classes in its search space while it has access to the same num-ber of local features in the grapheme side.

We propose to apply a supervised HMM method embedded with local classification to find the most likely sequence of phonemes given a word. An HMM is a statistical model that combines the obser-vation likelihood (probability of phonemes given let-ters) and transition likelihood (probability of current phoneme given previous phonemes) to predict each phoneme. Our approach differs from a basic Hidden Markov Model for letter-to-phoneme system (Tay-lor, 2005) that formulates grapheme sequences as observation states and phonemes as hidden states. The basic HMM system for L2P does not provide good performance on the task because it lacks con-text information on the grapheme side. In fact, a pronunciation depends more on graphemes than on the neighboring phonemes; therefore, the transition probability (language model) should affect the pre-diction decisions only when there is more than one possible phoneme that can be assigned to a letter.
Our approach is to use an instance-based learn-ing technique as a local predictor to generate a set of phoneme candidates for each letter chunk, given its context in a word. The local predictor produces confidence values for Each candidate phoneme. We normalize the confidence values into values between 0 and 1, and treat them as the emission probabilities, while the transition probabilities are derived directly from the phoneme sequences in the training data.
The pronunciation is generated by considering both phoneme prediction values and transition prob-abilities. The optimal phoneme sequence is found with the Viterbi search algorithm. We limit the size of the context to n = 3 in order to avoid over-fitting and minimize the complexity of the model. Since the candidate set is from the classifier, the search space is limited to a small number of can-didate phonemes (1 to 5 phonemes in most cases).
The HMM postprocessing is independent of local predictions from the classifier. Instead, it selects the best phoneme sequence from a set of possible lo-cal predictions by taking advantage of the phoneme language model, which is trained on the phoneme sequences in the training data. We evaluated our approaches on CMUDict, Brulex, and German, Dutch and English Celex cor-pora (Baayen et al., 1996). The corpora (except English Celex) are available as part of the Letter-For the English Celex data, we removed duplicate words as well as words shorter than four letters. Ta-ble 2 shows the number of words and the language of each corpus.

For all of our experiments, our local classifier for predicting phonemes is the instance-based learn-ing IB1 algorithm (Aha et al., 1991) implemented in the TiMBL package (Daelemans et al., 2004). The HMM technique is applied as post process-ing to the instance-based learning to provide a se-quence prediction. In addition to comparing one-to-one and many-to-many alignments, we also compare our method to the constraint satisfaction inference method as described in Section 4. The results are reported in word accuracy rate based on the 10-fold cross validation, with the mean and standard devia-tion values.

Table 3 shows word accuracy performance across a variety of methods. We show results comparing the one-to-one aligner described in Section 2.1 and the one-to-one aligner provided by the PRONAL-SYL challenge. The PRONALSYS one-to-one alignments are taken directly from the PRONAL-SYL challenge, whose method is based on an EM algorithm. For both alignments, we use instance-based learning as the prediction model.

Overall, our one-to-one alignments outperform the alignments provided by the data sets for all cor-pora. The main difference between the PRONAL-SYS one-to-one alignment and our one-to-one align-ment is that our aligner does not allow a null letter on the grapheme side. Consider the word abomina-tion [ @ b 6 m I n e S @ n ]: the first six letters and phonemes are aligned the same way by both align-ers ( abomin-[ @ b 6 m I n ]). However, the two aligners produce radically different alignments for the last five letters. The alignment provided by the PRONALSYS one-to-one alignments is: while our one-to-one alignment is: Clearly, the latter alignment provides more informa-tion on how the graphemes map to the phonemes.
Table 3 also shows that impressive improvements for all evaluated corpora are achieved by using many-to-many alignments rather than one-to-one alignments (1-1 align vs. M-M align). The signif-icant improvements, ranging from 2.7% to 7.6% in word accuracy, illustrate the importance of having more precise alignments. For example, we can now obtain the correct alignment for the second part of the word abomination : Instead of adding a null phoneme in the phoneme sequence, the many-to-many aligner maps the letter chunk ti to a single phoneme.

The HMM approach is based on the same hy-pothesis as the constraint satisfaction inference (CSInf) (Van Den Bosch and Canisius, 2006). The results in Table 3 (1-1+CSInf vs. 1-1+HMM) show that the HMM approach consistently improves per-formance over the baseline system (1-1 align), while the CSInf degrades performance on the Brulex data set. For the CSInf method, most errors are caused by trigram confusion in the prediction phase.
The results of our best system, which combines the HMM method with the many-to-many align-ments (M-M+HMM), are better than the results re-ported in (Black et al., 1998) on both the CMU-Dict and German Celex data sets. This is true even though Black et al. (1998) use explicit lists of letter-phoneme mappings during the alignment process, while our approach is a fully automatic system that does not require any handcrafted list. We presented a novel technique of applying many-to-many alignments to the letter-to-phoneme conver-sion problem. The many-to-many alignments relax the constraint assumptions of the traditional one-to-one alignments. Letter chunking bigram prediction incorporates many-to-many alignments into the con-ventional phoneme prediction models. Finally, the HMM technique yields global phoneme predictions based on language models.

Impressive word accuracy improvements are achieved when the many-to-many alignments are ap-plied over the baseline system. On several languages and data sets, using the many-to-many alignments, word accuracy improvements ranged from 2.7% to 7.6%, as compared to one-to-one alignments. The HMM cooperating with the local predictions shows slight improvements when it is applied to the many-to-many alignments. We illustrated that the HMM technique improves the word accuracy more con-sistently than the constraint-based approach. More-over, the HMM can be easily incorporated into the many-to-many alignment approach.

We are investigating the possibility of integrat-ing syllabification information into our system. It has been reported that syllabification can poten-tially improve pronunciation performance in En-glish (Marchand and Damper, 2005). We plan to explore other sequence prediction approaches, such as discriminative training methods (Collins, 2004), and sequence tagging with Support Vector Machines (SVM-HMM) (Altun et al., 2003) to in-corporate more features (context information) into the phoneme generation model. We are also inter-ested in applying our approach to other related areas such as morphology and transliteration.
 We would like to thank Susan Bartlett, Colin Cherry, and other members of the Natural Language Pro-cessing research group at University of Alberta for their helpful comments and suggestions. This re-search was supported by the Natural Sciences and Engineering Research Council of Canada.

