 Automatic mark-up of textual documents with lin-guistic annotations such as part-of-speech tags, sen-tence constituents, named entities, or semantic roles is a common practice in natural language process-ing (NLP). It is, however, much less common in in-formation retrieval (IR) applications. Accordingly, in this paper, we focus on annotating search queries submitted by the users to a search engine.

There are several key differences between user queries and the documents used in NLP (e.g., news articles or web pages). As previous research shows, these differences severely limit the applicability of standard NLP techniques for annotating queries and require development of novel annotation approaches for query corpora (Bergsma and Wang, 2007; Barr et al., 2008; Lu et al., 2009; Bendersky et al., 2010; Li, 2010).

The most salient difference between queries and documents is their length. Most search queries are very short, and even longer queries are usually shorter than the average written sentence. Due to their brevity, queries often cannot be divided into sub-parts, and do not provide enough context for accurate annotations to be made using the stan-dard NLP tools such as taggers, parsers or chun-kers, which are trained on more syntactically coher-ent textual units.

A recent analysis of web query logs by Bendersky and Croft (2009) shows, however, that despite their brevity, queries are grammatically diverse. Some queries are keyword concatenations, some are semi-complete verbal phrases and some are wh-questions. It is essential for the search engine to correctly an-notate the query structure, and the quality of these query annotations has been shown to be a crucial first step towards the development of reliable and robust query processing, representation and under-standing algorithms (Barr et al., 2008; Guo et al., 2008; Guo et al., 2009; Manshadi and Li, 2009; Li, 2010).

However, in current query annotation systems, even sentence-like queries are often hard to parse and annotate, as they are prone to contain mis-spellings and idiosyncratic grammatical structures. They also tend to lack prepositions, proper punctu-ation, or capitalization, since users (often correctly) assume that these features are disregarded by the re-trieval system.

In this paper, we propose a novel joint query an-notation method to improve the effectiveness of ex-isting query annotations, especially for longer, more complex search queries. Most existing research fo-cuses on using a single type of annotation for infor-mation retrieval such as subject-verb-object depen-dencies (Balasubramanian and Allan, 2009), named-entity recognition (Guo et al., 2009), phrase chunk-ing (Guo et al., 2008), or semantic labeling (Li, 2010).

In contrast, the main focus of this work is on de-veloping a unified approach for performing reliable annotations of different types. To this end, we pro-pose a probabilistic method for performing a joint query annotation . This method allows us to exploit the dependency between different unsupervised an-notations to further improve the accuracy of the en-tire set of annotations. For instance, our method can leverage the information about estimated parts-of-speech tags and capitalization of query terms to improve the accuracy of query segmentation.

We empirically evaluate the joint query annota-tion method on a range of query types. Instead of just focusing our attention on keyword queries, as is often done in previous work (Barr et al., 2008; Bergsma and Wang, 2007; Tan and Peng, 2008; Guo et al., 2008), we also explore the performance of our annotations with more complex natural lan-guage search queries such as verbal phrases and wh-questions, which often pose a challenge for IR appli-cations (Bendersky et al., 2010; Kumaran and Allan, 2007; Kumaran and Carvalho, 2009; Lease, 2007). We show that even with a very limited amount of training data, our joint annotation method signifi-cantly outperforms annotations that were done in-dependently for these queries.
 The rest of the paper is organized as follows. In Section 2 we demonstrate several examples of an-notated search queries. Then, in Section 3, we in-troduce our joint query annotation method. In Sec-tion 4 we describe two types of independent query annotations that are used as input for the joint query annotation. Section 5 details the related work and Section 6 presents the experimental results. We draw the conclusions from our work in Section 7. To demonstrate a possible implementation of lin-guistic annotation for search queries, Figure 1 presents a simple mark-up scheme, exemplified us-ing three web search queries (as they appear in a search log): (a) who won the 2004 kentucky derby , (b) kindred where would i be , and (c) shih tzu health problems . In this scheme, each query is marked-up using three annotations: capitalization, POS tags, and segmentation indicators.

Note that all the query terms are non-capitalized, and no punctuation is provided by the user, which complicates the query annotation process. While the simple annotation described in Figure 1 can be done with a very high accuracy for standard docu-ment corpora, both previous work (Barr et al., 2008; Bergsma and Wang, 2007; Jones and Fain, 2003) and the experimental results in this paper indicate that it is challenging to perform well on queries.
The queries in Figure 1 illustrate this point. Query (a) in Figure 1 is a wh-question, and it contains a capitalized concept (  X  X entucky Derby X  ), a single verb, and four segments. Query (b) is a combination of an artist name and a song title and should be inter-preted as Kindred  X   X  X here Would I Be X  . Query (c) is a concatenation of two short noun phrases:  X  X hih Tzu X  and  X  X ealth problems X  . Given a search query Q , which consists of a se-quence of terms ( q tate it with an appropriate set of linguistic structures Z of shallow sequence annotations z takes the form In other words, each symbol  X  single query term.

Many query annotations that are useful for IR can be represented using this simple form, includ-ing capitalization, POS tagging, phrase chunking, named entity recognition, and stopword indicators, to name just a few. For instance, Figure 1 demon-strates an example of a set of annotations Z this example,
Most previous work on query annotation makes the independence assumption  X  every annotation z it is assumed that the optimal linguistic annotation z ity given the query Q , regardless of the other anno-tations in the set Z
The main shortcoming of this approach is in the assumption that the linguistic annotations in the set Z dencies between the different annotations, and they can be leveraged to derive a better estimate of the entire set of annotations.

For instance, imagine that we need to perform two annotations: capitalization and POS tagging. Know-ing that a query term is capitalized, we are more likely to decide that it is a proper noun. Vice versa, knowing that it is a preposition will reduce its proba-bility of being capitalized. We would like to capture this intuition in the annotation process.

To address the problem of joint query annotation, we first assume that we have an initial set of annota-dependently of one another (we will show an exam-ple of how to derive such a set in Section 4). Given the initial set Z  X  ( I ) an annotation set Z  X  ( J ) probability of all the annotations, i.e.

If the initial set of estimations is reasonably ac-curate, we can make the assumption that the anno-tations in the set Z  X  ( J ) initial estimates Z  X  ( I ) timize the probability of each annotation z  X  ( J ) Z
From Eq. 2, it is evident that the joint an-notation task becomes that of finding some opti-mal unobserved sequence (annotation z  X  ( J ) the observed sequences (independent annotation set Z
Accordingly, we can directly use a supervised se-quential probabilistic model such as CRF (Lafferty et al., 2001) to find the optimal z  X  ( J ) model, the optimal annotation z  X  ( J ) are trying to predict, and the set of independent an-used for prediction. Figure 2 outlines the algorithm for performing the joint query annotation.

As input, the algorithm receives a training set of queries and their ground truth annotations. It then produces a set of independent annotation estimates, which are jointly used, together with the ground truth annotations, to learn a CRF model for each an-notation type. Finally, these CRF models are used to predict annotations on a held-out set of queries, which are the output of the algorithm.
Note that this formulation of joint query anno-tation can be viewed as a stacked classification , in which a second, more effective, classifier is trained using the labels inferred by the first classifier as fea-tures. Stacked classifiers were recently shown to be an efficient and effective strategy for structured clas-sification in NLP (Nivre and McDonald, 2008; Mar-tins et al., 2008). While the joint annotation method proposed in Sec-tion 3 is general enough to be applied to any set of independent query annotations, in this work we fo-cus on two previously proposed independent anno-tation methods based on either the query itself, or the top sentences retrieved in response to the query (Bendersky et al., 2010). The main benefits of these two annotation methods are that they can be easily implemented using standard software tools, do not require any labeled data, and provide reasonable an-notation accuracy. Next, we briefly describe these two independent annotation methods. 4.1 Query-based estimation The most straightforward way to estimate the con-ditional probabilities in Eq. 1 is using the query it-self. To make the estimation feasible, Bendersky et al. (2010) take a bag-of-words approach, and assume independence between both the query terms and the corresponding annotation symbols. Thus, the inde-pentent annotations in Eq. 1 are given by
Following Bendersky et al. (2010) we use a large n-gram corpus (Brants and Franz, 2006) to estimate p (  X  i | q i ) for annotating the query with capitalization and segmentation mark-up, and a standard POS tag-4.2 PRF-based estimation Given a short, often ungrammatical query, it is hard to accurately estimate the conditional probability in Eq. 1 using the query terms alone. For instance, a keyword query hawaiian falls , which refers to a lo-cation, is inaccurately interpreted by a standard POS tagger as a noun-verb pair. On the other hand, given a sentence from a corpus that is relevant to the query such as  X  X awaiian Falls is a family-friendly water-park X  , the word  X  X alls X  is correctly identified by a standard POS tagger as a proper noun.

Accordingly, the document corpus can be boot-strapped in order to better estimate the query anno-tation. To this end, Bendersky et al. (2010) employ the pseudo-relevance feedback (PRF)  X  a method that has a long record of success in IR for tasks such as query expansion (Buckley, 1995; Lavrenko and Croft, 2001).

In the most general form, given the set of all re-trievable sentences r in the corpus C one can derive
Since for most sentences the conditional proba-bility of relevance to the query p ( r | Q ) is vanish-ingly small, the above can be closely approximated by considering only a set of sentences R , retrieved at top-k positions in response to the query Q . This yields Intuitively, the equation above models the query as a mixture of top-k retrieved sentences, where each sentence is weighted by its relevance to the query. Furthermore, to make the estimation of the condi-tional probability p ( z the symbols  X  dependent, given a sentence r . Note that this as-sumption differs from the independence assumption in Eq. 3, since here the annotation symbols are not independent given the query Q .

Accordingly, the PRF-based estimate for indepen-dent annotations in Eq. 1 is
Following Bendersky et al. (2010), an estimate of p (  X  i | r ) is a smoothed estimator that combines the information from the retrieved sentence r with the information about unigrams (for capitalization and POS tagging) and bigrams (for segmentation) from a large n-gram corpus (Brants and Franz, 2006). In recent years, linguistic annotation of search queries has been receiving increasing attention as an important step toward better query processing and understanding. The literature on query annotation includes query segmentation (Bergsma and Wang, 2007; Jones et al., 2006; Guo et al., 2008; Ha-gen et al., 2010; Hagen et al., 2011; Tan and Peng, 2008), part-of-speech and semantic tagging (Barr et al., 2008; Manshadi and Li, 2009; Li, 2010), named-entity recognition (Guo et al., 2009; Lu et al., 2009; Shen et al., 2008; Pas  X ca, 2007), abbreviation disam-biguation (Wei et al., 2008) and stopword detection (Lo et al., 2005; Jones and Fain, 2003).

Most of the previous work on query annotation focuses on performing a particular annotation task (e.g., segmentation or POS tagging) in isolation. However, these annotations are often related, and thus we take a joint annotation approach, which combines several independent annotations to im-prove the overall annotation accuracy. A similar ap-proach was recently proposed by Guo et al. (2008). There are several key differences, however, between the work presented here and their work.

First, Guo et al. (2008) focus on query refine-ment (spelling corrections, word splitting, etc.) of short keyword queries. Instead, we are interested in annotation of queries of different types, includ-ing verbose natural language queries. While there is an overlap between query refinement and annota-tion, the focus of the latter is on providing linguistic information about existing queries (after initial re-finement has been performed). Such information is especially important for more verbose and gramat-ically complex queries. In addition, while all the methods proposed by Guo et al. (2008) require large amounts of training data (thousands of training ex-amples), our joint annotation method can be effec-tively trained with a minimal human labeling effort (several hundred training examples).

An additional research area which is relevant to this paper is the work on joint structure model-ing (Finkel and Manning, 2009; Toutanova et al., 2008) and stacked classification (Nivre and Mc-Donald, 2008; Martins et al., 2008) in natural lan-guage processing. These approaches have been shown to be successful for tasks such as parsing and named entity recognition in newswire data (Finkel and Manning, 2009) or semantic role labeling in the Penn Treebank and Brown corpus (Toutanova et al., 2008). Similarly to this work in NLP, we demon-strate that a joint approach for modeling the linguis-tic query structure can also be beneficial for IR ap-plications. 6.1 Experimental Setup For evaluating the performance of our query anno-tation methods, we use a random sample of 250 labeled with three annotations: capitalization , POS tags , and segmentation , according to the description of these annotations in Figure 1. In this set of 250 queries, there are 93 questions, 96 phrases contain-ing a verb, and 61 short keyword queries (Figure 1 contains a single example of each of these types).
In order to test the effectiveness of the joint query annotation, we compare four methods. In the first two methods, i-QRY and i-PRF the three annotations are done independently. Method i-QRY is based on z
The next two methods, j-QRY and j-PRF , are joint annotation methods, which perform a joint optimiza-tion over the entire set of annotations, as described in the algorithm in Figure 2. j-QRY and j-PRF differ in their choice of the initial independent annotation j-QRY uses only the annotations performed by i-QRY (3 initial independent annotation estimates), while j-PRF combines the annotations performed by i-QRY with the annotations performed by i-PRF (6 initial annotation estimates). The CRF model train-ing in line (6) of the algorithm is implemented using
The performance of the joint annotation methods is estimated using a 10-fold cross-validation. In or-der to test the statistical significance of improve-ments attained by the proposed methods we use a two-sided Fisher X  X  randomization test with 20,000 permutations. Results with p-value &lt; 0 . 05 are con-sidered statistically significant.

For reporting the performance of our meth-ods we use two measures. The first measure is classification-oriented  X  treating the annotation de-cision for each query term as a classification. In case of capitalization and segmentation annotations these decisions are binary and we compute the precision and recall metrics, and report F1  X  their harmonic mean. In case of POS tagging, the decisions are ternary, and hence we report the classification ac-curacy.

We also report an additional, IR-oriented perfor-mance measure. As is typical in IR, we propose measuring the performance of the annotation meth-ods on a per-query basis, to verify that the methods have uniform impact across queries. Accordingly, we report the mean of classification accuracies per query (MQA). Formally, MQA is computed as where acc Q The empirical evaluation is conducted as follows. In Section 6.2, we discuss the general performance of the four annotation techniques, and compare the effectiveness of independent and joint annotations. In Section 6.3, we analyze the performance of the independent and joint annotation methods by query type. In Section 6.4, we compare the difficulty of performing query annotations for different query types. Finally, in Section 6.5, we compare the effec-tiveness of the proposed joint annotation for query segmentation with the existing query segmentation methods. 6.2 General Evaluation Table 1 shows the summary of the performance of the two independent and two joint annotation meth-ods for the entire set of 250 queries. For independent methods, we see that i-PRF outperforms i-QRY for all annotation types, using both performance mea-sures.

In Table 1, we can also observe that the joint anno-tation methods are, in all cases, better than the cor-responding independent ones. The highest improve-ments are attained by j-PRF , which always demon-strates the best performance both in terms of F1 and MQA. These results attest to both the importance of doing a joint optimization over the entire set of an-notations and to the robustness of the initial annota-tions done by the i-PRF method. In all but one case, the j-PRF method, which uses these annotations as features, outperforms the j-QRY method that only uses the annotation done by i-QRY .

The most significant improvements as a result of joint annotation are observed for the segmentation task. In this task, joint annotation achieves close to 20% improvement in MQA over the i-QRY method, and more than 10% improvement in MQA over the i-PRF method. These improvements indicate that the segmentation decisions are strongly guided by cap-italization and POS tagging. We also note that, in case of segmentation, the differences in performance between the two joint annotation methods, j-QRY and j-PRF , are not significant, indicating that the context of additional annotations in j-QRY makes up for the lack of more robust pseudo-relevance feed-back based features.

We also note that the lowest performance im-provement as a result of joint annotation is evi-denced for POS tagging. The improvements of joint annotation method j-PRF over the i-PRF method are less than 1%, and are not statistically significant. This is not surprising, since the standard POS tag-gers often already use bigrams and capitalization at training time, and do not acquire much additional information from other annotations. 6.3 Evaluation by Query Type Table 2 presents a detailed analysis of the perfor-mance of the best independent ( i-PRF ) and joint ( j-PRF ) annotation methods by the three query types used for evaluation: verbal phrases, questions and keyword queries. From the analysis in Table 2, we note that the contribution of joint annotation varies significantly across query types. For instance, us-ing j-PRF always leads to statistically significant im-provements over the i-PRF baseline for questions. On the other hand, it is either statistically indistin-guishable, or even significantly worse (in the case of capitalization) than the i-PRF baseline for the verbal phrases.

Table 2 also demonstrates that joint annotation has a different impact on various annotations for the same query type. For instance, j-PRF has a signif-icant positive effect on capitalization and segmen-tation for keyword queries, but only marginally im-proves the POS tagging. Similarly, for the verbal phrases, j-PRF has a significant positive effect only for the segmentation annotation.

These variances in the performance of the j-PRF method point to the differences in the structure be-tween the query types. While dependence between the annotations plays an important role for question and keyword queries, which often share a common grammatical structure, this dependence is less use-ful for verbal phrases, which have a more diverse linguistic structure. Accordingly, a more in-depth investigation of the linguistic structure of the verbal phrase queries is an interesting direction for future work. 6.4 Annotation Difficulty Recall that in our experiments, out of the overall 250 annotated queries, there are 96 verbal phrases, 93 questions and 61 keyword queries. Figure 3 shows a plot that contrasts the relative performance for these three query types of our best-performing joint an-notation method, j-PRF , on capitalization, POS tag-ging and segmentation annotation tasks. Next, we analyze the performance profiles for the annotation tasks shown in Figure 3.
 For the capitalization task, the performance of j-PRF on verbal phrases and questions is similar, with the difference below 3%. The performance for key-word queries is much higher  X  with improvement over 20% compared to either of the other two types. We attribute this increase to both a larger number of positive examples in the short keyword queries (a higher percentage of terms in keyword queries is capitalized) and their simpler syntactic structure (ad-jacent terms in these queries are likely to have the same case).

For the segmentation task, the performance is at its best for the question and keyword queries, and at its worst (with a drop of 11%) for the verbal phrases. We hypothesize that this is due to the fact that ques-tion queries and keyword queries tend to have repet-itive structures, while the grammatical structure for verbose queries is much more diverse.

For the tagging task, the performance profile is re-versed, compared to the other two tasks  X  the per-formance is at its worst for keyword queries, since their grammatical structure significantly differs from the grammatical structure of sentences in news arti-cles, on which the POS tagger is trained. For ques-tion queries the performance is the best (6% increase over the keyword queries), since they resemble sen-tences encountered in traditional corpora.
 It is important to note that the results reported in Figure 3 are based on training the joint annotation model on all available queries with 10-fold cross-validation. We might get different profiles if a sep-arate annotation model was trained for each query type. In our case, however, the number of queries from each type is not sufficient to train a reliable model. We leave the investigation of separate train-ing of joint annotation models by query type to fu-ture work. 6.5 Additional Comparisons In order to further evaluate the proposed joint an-notation method, j-PRF , in this section we compare its performance to other query annotation methods previously reported in the literature. Unfortunately, there is not much published work on query capi-talization and query POS tagging that goes beyond the simple query-based methods described in Sec-tion 4.1. The published work on the more advanced methods usually requires access to large amounts of proprietary user data such as query logs and clicks (Barr et al., 2008; Guo et al., 2008; Guo et al., 2009).
Therefore, in this section we focus on recent work on query segmentation (Bergsma and Wang, 2007; Hagen et al., 2010). We compare the segmentation effectiveness of our best performing method, j-PRF , to that of these query segmentation methods. The first method, SEG-1 , was first proposed by Hagen et al. (2010). It is currently the most effective publicly disclosed unsupervised query segmentation method. SEG-1 method requires an access to a large web n-gram corpus (Brants and Franz, 2006). The optimal segmentation for query Q , S  X  tained using where S tions, S is a possible segmentation, s is a segment in
S , and count ( s ) is the frequency of s in the web n-gram corpus.

The second method, SEG-2 , is based on a success-ful supervised segmentation method, which was first proposed by Bergsma and Wang (2007). SEG-2 em-ploys a large set of features, and is pre-trained on the query collection described by Bergsma and Wang (2007). The features used by the SEG-2 method are described by Bendersky et al. (2009), and include, among others, n-gram frequencies in a sample of a query log, web corpus and Wikipedia titles.

Table 3 demonstrates the comparison between the j-PRF , SEG-1 and SEG-2 methods. When com-pared to the SEG-1 baseline, j-PRF is significantly more effective, even though it only employs bigram counts (see Eq. 4), instead of the high-order n-grams used by SEG-1 , for computing the score of a seg-mentation. This results underscores the benefit of joint annotation, which leverages capitalization and POS tagging to improve the quality of the segmen-tation.

When compared to the SEG-2 baseline, j-PRF and SEG-2 are statistically indistinguishable. SEG-2 posits a slightly better F1, while j-PRF has a better MQA. This result demonstrates that the segmenta-tion produced by the j-PRF method is as effective as the segmentation produced by the current supervised state-of-the-art segmentation methods, which em-ploy external data sources and high-order n-grams. The benefit of the j-PRF method compared to the SEG-2 method, is that, simultaneously with the seg-mentation, it produces several additional query an-notations (in this case, capitalization and POS tag-ging), eliminating the need to construct separate se-quence classifiers for each annotation. In this paper, we have investigated a joint approach for annotating search queries with linguistic struc-tures, including capitalization, POS tags and seg-mentation. To this end, we proposed a probabilis-tic approach for performing joint query annotation that takes into account the dependencies that exist between the different annotation types.

Our experimental findings over a range of queries from a web search log unequivocally point to the su-periority of the joint annotation methods over both query-based and pseudo-relevance feedback based independent annotation methods. These findings in-dicate that the different annotations are mutually-dependent.

We are encouraged by the success of our joint query annotation technique, and intend to pursue the investigation of its utility for IR applications. In the future, we intend to research the use of joint query annotations for additional IR tasks, e.g., for con-structing better query formulations for ranking al-gorithms. This work was supported in part by the Center for In-telligent Information Retrieval and in part by ARRA NSF IIS-9014442. Any opinions, findings and con-clusions or recommendations expressed in this ma-terial are those of the authors and do not necessarily reflect those of the sponsor.
