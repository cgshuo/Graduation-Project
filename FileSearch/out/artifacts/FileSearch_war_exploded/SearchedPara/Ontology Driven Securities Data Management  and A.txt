 Today, world wide securities market regulators and investors are all facing the critical challenges on collecting, managing and analyzing the mass volume of the securities nual reports. Take the emerging China securities market as an example, by 2004, there are 1473 listed companies in China securities market. Only in 2004, the disclo-sure reports are up to 46,003 pieces, which cover all the public information about these listed companies. The receivers of these information range from securities regu-lators, exchange markets, financial institutions, brokers and agencies, to numberless individual investors. For this reason, the publication of securities disclosure data should not only be easy to share and exchange, but also be well-organized for management and analysis purposes. 
On the other hand, effectively and efficiently collecting, managing and analyzing the data demands new technologies and solutions to structure, integrate, store and query the data. Industry has attempted to apply the XML based technologies to struc-ture, share and exchange the data, which can be seen by the wide deployment of eX-tensible Business Reporting Language (XBRL) [1] and related products. However, lenges still remain to be solved. The most important is on how to manage and analyze the data to provide decision support to securities regulators and investors. 
In this paper, we propose an ontology driven securities data management and analysis system, which focuses on Entity-Relationship analysis of XBRL based secu-rities data. (1) By building up a Web Ontology Language (OWL) [3] ontology rather than us-ing the popular XBRL based taxonomy, the entities and their relationships in securi-ties domain can be better characterized. (2) By transforming the XBRL data into RDF/OWL data [2, 3], it imposes more formal semantics to the data. (3) By storing and inferencing the RDF/OWL data collection in an ontology re-pository, it provides a more flexible securities data management solution. (4) By adopting W3C X  X  SPARQL [4] as the query language, it enables business us-model, rather than simply retrieving the XBRL content of the data. This system adopts a series of industry and W3C standards, including XBRL, OWL, RDF, SPARQL [1-4]. These standards improve the openness, extensibility and believe our practice together with existing XBRL related efforts will finally equip the securities industry with a total solution for the efficient share, exchange, management and analysis of the disclosure data for both publishers and receivers. 1.1 Related Work XBRL (eXtensible Business Reporting Language) [1] is an emerging technology based on the W3C XML related standards, such as XML and XLink. It allows soft-ware vendors, programmers and end users to enhance the creation, exchange, and comparison of business reporting information. 
In recent years, XBRL has been adopted in many countries to publish business in-formation, especially for securities, such as US SEC (US Securities and Exchange Commission), KSE (Korean Securities Exchange), Japan's Financial Services Agency. In China, although the securities market is not so mature, the demand for standard securities information disclosure is significantly increasing as the scale of market extends rapidly. In 2003, CSRC (China Securities Regulatory Commission) has deliv-ered the regulation of listed company information disclosure and the corresponding XBRL taxonomy and initiated several XBRL related projects for pilot. 
There are some products based on XBRL in the market already, such as UBmatrix [5], EDGAR [6], Semansys [7] etc. But most of the applications focus on the XBRL taxonomy and instance authoring and the business reporting process management, illegal business transactions. 
The remainder of this paper is organized as follows. Section 2 describes ontology driven securities data management, including ontology model, ontology based securi-ties data storage, query and inference. Section 3 presents securities data analysis with a real case. Section 4 reports the performance of our securities data management sys-tem. Section 5 details discussions and future work. Section 6 concludes our work. effective management for intelligent analysis. Here, we propose an ontology driven approach to securities data management. Firstly, an OWL ontology is built to repre-sent entities and their relationships in securities domain and to organize the securities data. Then, the data is collected from different sources and populated as the instances of the built ontology. Such a processing imposes the data originally in XBRL format with formal semantics. Next, inference is conducted on the data to discover rich rela-tionships between entities (such as list companies). Finally, business users can per-form analysis by posing SPARQL queries to the ontology store. The overview of the method is shown in Figure 1 and detailed in subsequent subsections. 2.1 XBRL Data The securities information publishers deliver both of financial and non-financial re-formation including the management relations, e.g. shareholding information, and transactions between companies, e.g. guarantee and share transfer. For business ana-lysts, the relationship information could play a more important role than the pure financial data. 
In our approach, we build an ontology to model the relationship information be-tween companies and import the securities data in XBRL format to the ontology store sample XBRL instance fragment which contains the information of guarantee transac-tion. The corresponding XBRL taxonomy is defined by CSRC. In the above XBRL instance fragment, it discloses a guarantee transaction between Company A, which is annotated with XBRL tag DanBaoFang, i.e. the guarantor, and Company B, which is annotated with XBRL tag BeiDanBaoFang, i.e. the warrantee. Also, the duration and the amount are published. Those structured relationship infor-mation will be imported into the ontology store. By transforming the XBRL data collection into RDF data collection, it would provide more formal semantics, such as the concept hierarchy of the counterparty and the relation, to the data than the XML syntax of XBRL. It will enable more advanced analysis on the relationship informa-tion as the next section described. 2.2 Ontology for Securities Domain Here, we define an ontology for the entity-relationship analysis on the securities data imported from the XBRL instance. We refer to some existing ontology re-sources like IBM X  X  IFW (Information Framework) [11] and FOAF (Friend of Friend) [12] for multi-dimensional and social relationship modeling. In order to model the entity-relationship information, we define two core concept hierarchies named Entity Hierarchy and Relation Hierarchy to capture the semantics which is not formalized represented in XBRL. The Relation represents the interested busi-ness transaction or relation, such as share transfer and guarantee. The Entity con-cept represents the counterparty of the re lation, such as the company and person. The properties belong to each concept, e.g. the duration of guarantee transaction or name of the company, are also defined in the ontology represented in OWL. The details of part of the core concepts are shown in following figure. 
By building up OWL based domain ontology, it explicitly captures the reusable knowledge of securities domain including the concept hierarchies for both Entity and Relation, the important properties of the concepts, etc. On the other hand, OWL, which is a W3C recommendation for ontology representation, makes the conceptual modeling more formal and explicit than XBRL taxonomy. 2.3 Securities Data Storage, Inference and Query Data from different data sources are populated as instances of the defined ontology model for securities domain and represented in OWL format. Therefore, an efficient By inference, hidden relationships between companies can be discovered and suspi-cious illegal transactions can thus be disclosed. By storing and inferencing the RDF/OWL data collection in an ontology repository, it provides a more flexible secu-rities data management solution. This section describes ontology storage, inference and query with large-scale instances. 
The logical foundation of OWL is Description Logic (DL) which is a decidable fragment of First Order Logic (FOL). A DL knowledge base comprises two compo-nents, TBox and ABox. The TBox describes the terminology, i.e., the vocabulary of an application domain, while the ABox contains assertions about individuals in terms of this vocabulary. Correspondingly, the DL inference includes TBox inference (i.e. reasoning about concepts) and ABox inference (i.e. reasoning about individuals). It is world ontologies. But, the extremely large amount of securities data makes it difficult following advantages. 1. The inference method combines TBox inference of the DL reasoner with the logic rules translated from Description Logic Program (DLP) for the ABox inference. This promises that inference of OWL ontologies restricted by DLP is complete and sound. 2. The schema of the back-end database is designed based on both the translated logic rules and OWL constructs to support efficient ontology inference. 
Figure 3 shows the overview of the ontology store, including Import Module, In-ference Module, Storage Module and Query Module. Import Module consists of an OWL parser and a translator. The parser parses an OWL ontology into an Object Oriented Model in memory, then the translator popu-both original and inferred assertions. Since inference and storage are considered as an inseparatable component in a complete storage and query system for ontologies, we design the schema of the back-end database to optimally support ontology inference. A DL reasoner and a rule engine compose the inference module. The rule inference covers the semantics of DLP [9, 10], while the DL reasoner obtains the subsumption relationship between classes and properties which cannot be completely captured by the rules. The query language supported by the developed ontology store is W3C X  X  SPARQL language. No inference is conducted during the query answering stage be-cause the inference has already been done at th e time of data loading. Such processing further improves the query response time. By inference, the relations between entities (such as companies) are made explicit. Therefore, users can issue SPARQL queries on the inferred data to find specious business transactions. An example is given in the next section to show how to use SPARQL queries for analysis. The use of SPARQL in our system offers powerful reasoning ability to analyze compli-On the other hand, SPARQL is a standardized query language for RDF, which provides inferring on existed data facts and constructing new RDF graph after inference [4]. Thus, SPARQL becomes the best choice for rule presentation in our system. 
Generally, the analysis process for fraud investigation always takes five steps. 
In order to elaborate the process about fraud investigation such as illegal transac-tion detection, we present a real case to de monstrate how to do analysis in our system. The case is about  X  X elationship Analysis for Frauds of Company A X . Step 1: We build two sample rules based on supervisory regulations for fraud detec-tion, which are expressed in logic programs and SPARQL queries respectively. Step 2: We build one sample rule for suspicious fraud based on experiences from real case studies. rules in Step 1. We append company constraint in the two rules by (?x SecOnto:Name SecOnto:A) . After query evaluation, we found no such fraud facts for company  X  X  X . SecOnto:Name SecOnto:A) . After query evaluation, we obtain some suspicious frauds as Figure 4, which are visualized by our business visualization engine. Step 5: Evaluate the query results by applying evaluation rules and if possible gener-ate new fraud rules or suspicious rules. 
With the five steps, we perform a typical fraud investigation process which facili-tates business users to analyze complicated relationships among a large number of entities much more efficiently and effectively. In this section, we evaluate the performance of securities data management and dem-onstrate its efficiency by experiments on import and query modules. The typical query jobs in our system mainly focus on discovering multiple relationships between vari-ous entities and relations, which require multi-join operations on database. All the experiments are implemented in Java with JDK1.4 on a PC with Pentium 2.0GHz and 1G RAM. The securities data is represented in OWL format which contain securities information about Chinese companies. The different characteristics of securities data in our experiments are shown in Table 1, which mainly cover nine concepts within two base classes of  X  X ntity X  and  X  X elation X . The performance of import module. We evaluate the performance of import mod-individuals of concept  X  X ompany X  to test, as well as individuals of concept  X  X hare-holding X  for  X  X elation X . In our experiments,  X  X ompany X  and  X  X hareholding X  indi-viduals are presented as follows: 
Figure 5 shows that import module in our system has linear scalability in terms of the data size. Benefited from ABOX and TBOX inferences in this stage, our query module can achieve high efficiency, which is also demonstrated in Figure 6. The performance of query module. We illustrate the efficiency of SPARQL query processing from two aspects. First, we test the response time on different query com-plexities. Second, we investigate the impact of data volume on response time. (1) In order to test the performance of different query complexities, we generate query patterns in SPARQL which are based on two transitive  X  X elation X  concepts:  X  X hareholding X  and  X  X uarantee X . For each concept, five query patterns are con-structed with different relationship chain lengths from one to five. As an example, for concept  X  X hareholding X , these five queries are divided by their different Lengths of Relationship Chain (LRC). 
Therefore, we obtain ten general query patterns. In our database, there are totally with start-point company constraints appended. Figure 6 gives the results about query performance on these two concepts. We use average response time under different queries as our evaluation criteria. The curves of Figure 6 represent the average query response time of 1384 queries with different start-point company constraints. Overall, we observe that the query the most complicated queries only cost around 3300ms. More specifically, in Figure 6(a), from queries with LRC from 4 to 5, the response time changes smoothly as well tures of  X  X hareholding X  and  X  X uarantee X  data, where most transitive  X  X hareholding X  and  X  X uarantee X  relationships are no more than 4 layers and 3 layers respectively. (2) For scaleup comparison, we choose the query pattern with LRC = 3. Therefore, we have 1384 queries for concepts  X  X hareholding X  and  X  X uarantee X  respectively. Figure 7 shows how our query processing scales with the increasing number of tuples. For the given query pattern, we find a linear increase in the running time with increas-ing data size for both concepts  X  X hareholding X  and  X  X uarantee X . Aiming to use ontology technologies for securities data management and analysis, we discuss ontology design for securities domain, ontology data storage, inference and query, and the logic rules based analysis method. Our experiences and experiments show that it is feasible and attractive to a dopt ontology driven approach to securities data management. To widely and successfully apply such a system, however, some problems need to be further explored. 
OWL is Semantic Web standards that provide a framework for asset management, enterprise integration and the sharing and reuse of data/metadata on the Web. As W3C X  X  standard, OWL is commonly accepted and used. Rules are usually used to represent deep knowledge and complex business processes, which may be divided into information model rules (knowledge) and business behavior/process rules. The approach we used is to take DL reasoner as TBox inference and logic rules translated from DLP as ABox inference, whose inference power is limited although it can meet the common requirements for Securities Data Management and Analysis. Earlier this year, W3C held a workshop on Rule Languages [11] for Interoperability. Several rule languages are proposed as the candidates of W3C standard rule language, such as WSML (Web Service Modeling Language), RuleML (Rule Modeling language), SWSL Rules (Rules in the Semantic Web Services Language), N3 (Notation3), and SWRL (Semantic Web Rule Language). Besides rules used in ABox inference, our system further supports rules by user defined SPARQL queries. We are considering the tight integration of OWL ontology and rules by adopting W3C X  X  SWRL standard to model securities data information and business behavior/process more accurately. 
As the core of the system, there are no components of the system more important than ontology for securities data management. But it is hard to define a widely-accepted ontology due to the complexity of security data and the subjectivity of on-tology definition. We defined the ontology based on the two criteria: meet customers X  business requirements and guarantee the completeness and soundness of ontology based on laws and codes as well as the experiences and expertise of the domain ex-perts in security data management area. We also refer to some existing ontology re-sources like IBM X  X  IFW (Information Framework), FOAF (Friend of Friend), and UMASS X  X  work [14]. Actually, some useful securities data taxonomy/vocabularies are being used to XBRL files. We will work together with related parties involved in securities data management to design a standardized ontology for securities domain. 
For the next version of our system, we will adopt the OWL+rules approach to make our ontology more standard-oriented and obtain more powerful inference capa-bility. Also, we will build a well-accepted ontology for securities data management and analysis by collecting more resources currently available and cooperating with related parties in this area. By doing that, we are able to better meet business require-ments for securities data management and analysis. Considering the mass amount of data and the complexity of data/relationships to be analyzed, we will improve the system performance to meet the critical runtime response requirements with power-ful-enough inference capability. Furthermore, we hope to apply this approach and methodology to other areas in order to verify the powerfulness of our system and find out more values for this kind of technologies as well. This paper presented a novel ontology-driven method to efficiently manage securities data and effectively analyze entities and their relationships. Compared with the popu-lar XBRL based taxonomies, we built an ontology model obtained from a large num-ber of case studies and industry standards to better characterize entities and their rela-tionships in securities domain. The data from different sources were firstly collected, populated as the instances of the constructed ontology and stored into an ontology repository. This imposes more formal semantics to the original XBRL data. Then, inference was performed to make the relations between entities explicit for further analysis. Storing and inferencing the RDF/OWL data collection in an ontology reposi-tory provides a more flexible data management solution. Finally, users can pose se-mantic SPARQL queries on the data to find specious business transactions following a formal analysis process. This enables business users analyze the entity relationships the XBRL content of the data. The authors would like to thank LiQin Shen, Cheng Wang and Bo Li for their con-structive comments, Jian Zhou for his help with implementation of the ontology store. 
