 Probabilistic context-free grammars are an essen-tial ingredient in many natural language process-ing models (Charniak, 1997; Collins, 2003; John-son et al., 2006; Cohen and Smith, 2009, inter alia ). Various algorithms for training such models have been proposed, including unsupervised meth-ods. Many of these are based on the expectation-maximization (EM) algorithm.

There are alternatives to EM, and one such al-ternative is Viterbi EM, also called  X  X ard X  EM or  X  X parse X  EM (Neal and Hinton, 1998). Instead of using the parameters (which are maintained in the algorithm X  X  current state) to find the true pos-terior over the derivations, Viterbi EM algorithm uses a posterior focused on the Viterbi parse of those parameters. Viterbi EM and variants have been used in various settings in natural language processing (Yejin and Cardie, 2007; Wang et al., 2007; Goldwater and Johnson, 2005; DeNero and Klein, 2008; Spitkovsky et al., 2010).

Viterbi EM can be understood as a coordinate ascent procedure that locally optimizes a function; we call this optimization goal  X  X iterbi training. X 
In this paper, we explore Viterbi training for probabilistic context-free grammars. We first show that under the assumption that P 6 = NP, solv-ing and even approximating the Viterbi training problem is hard. This result holds even for hid-den Markov models. We extend the main hardness result to the EM algorithm (giving an alternative proof to this known result), as well as the problem of conditional Viterbi training. We then describe a  X  X ompetitiveness X  result for uniform initializa-tion of Viterbi EM: we show that initialization of the trees in an E-step which uses uniform distri-butions over the trees is optimal with respect to a certain approximate bound.

The rest of this paper is organized as follows.  X  2 gives background on PCFGs and introduces some notation.  X  3 explains Viterbi training, the declar-ative form of Viterbi EM.  X  4 describes a hardness result for Viterbi training.  X  5 extends this result to a hardness result of approximation and  X  6 further extends these results for other cases.  X  7 describes the advantages in using uniform-at-random initial-ization for Viterbi training. We relate these results to work on the k -means problem in  X  8. We assume familiarity with probabilistic context-free grammars (PCFGs). A PCFG G consists of:  X  A finite set of nonterminal symbols N ;  X  A finite set of terminal symbols  X  ;  X  For each A  X  N , a set of rewrite rules R ( A ) of the form A  X   X  , where  X   X  ( N  X   X )  X  , and R =  X   X  For each rule A  X   X  , a probability  X  A  X   X  . The collection of probabilities is denoted  X  , and they are constrained such that:
That is,  X  is grouped into | N | multinomial dis-tributions. Under the PCFG, the joint probability of a string x  X   X   X  and a grammatical derivation z is 1 p ( x,z |  X  ) = Y where f A  X   X  ( z ) is a function that  X  X ounts X  the number of times the rule A  X   X  appears in the derivation z . f A ( z ) will similarly denote the number of times that nonterminal A appears in z . Given a sample of derivations z =  X  z 1 ,...,z n  X  , let: We use the following notation for G :  X  L ( G ) is the set of all strings (sentences) x that can be generated using the grammar G (the  X  X anguage of G  X ).  X  D ( G ) is the set of all possible derivations z that can be generated using the grammar G .  X  D ( G ,x ) is the set of all possible derivations z that can be generated using the grammar G and have the yield x . Viterbi EM, or  X  X ard X  EM, is an unsupervised learning algorithm, used in NLP in various set-tings (Yejin and Cardie, 2007; Wang et al., 2007; Goldwater and Johnson, 2005; DeNero and Klein, 2008; Spitkovsky et al., 2010). In the context of PCFGs, it aims to select parameters  X  and phrase-structure trees z jointly. It does so by iteratively updating a state consisting of (  X  , z ) . The state is initialized with some value, then the algorithm alternates between (i) a  X  X ard X  E-step, where the strings x 1 ,...,x n are parsed according to a cur-rent, fixed  X  , giving new values for z , and (ii) an M-step, where the  X  are selected to maximize like-lihood, with z fixed.

With PCFGs, the E-step requires running an al-gorithm such as (probabilistic) CKY or Earley X  X  algorithm, while the M-step normalizes frequency counts F A  X   X  ( z ) to obtain the maximum likeli-hood estimate X  X  closed-form solution.

We can understand Viterbi EM as a coordinate ascent procedure that approximates the solution to the following declarative problem: Problem 1. ViterbiTrain Input: G context-free grammar, x 1 ,...,x n train-ing instances from L ( G ) Output:  X  and z 1 ,...,z n such that (  X  ,z 1 ,...,z n ) = argmax
The optimization problem in Eq. 4 is non-convex and, as we will show in  X  4, hard to op-timize. Therefore it is necessary to resort to ap-proximate algorithms like Viterbi EM.
 Neal and Hinton (1998) use the term  X  X parse EM X  to refer to a version of the EM algorithm where the E-step finds the modes of hidden vari-ables (rather than marginals as in standard EM). Viterbi EM is a variant of this, where the E-step finds the mode for each x i  X  X  derivation, We will refer to as  X  X he objective function of ViterbiTrain . X 
Viterbi training and Viterbi EM are closely re-lated to self-training , an important concept in semi-supervised NLP (Charniak, 1997; McClosky et al., 2006a; McClosky et al., 2006b). With self-training, the model is learned with some seed an-notated data, and then iterates by labeling new, unannotated data and adding it to the original an-notated training set. McClosky et al. consider self-training to be  X  X ne round of Viterbi EM X  with su-pervised initialization using labeled seed data. We refer the reader to Abney (2007) for more details. We now describe hardness results for Problem 1. We first note that the following problem is known to be NP-hard, and in fact, NP-complete (Sipser, 2006): Problem 2. 3-SAT Input: A formula  X  = V m i =1 ( a i  X  b i  X  c i ) in con-junctive normal form, such that each clause has 3 literals.
 Output: 1 if there is a satisfying assignment for  X  and 0 otherwise.

We now describe a reduction of 3-SAT to Prob-lem 1. Given an instance of the 3-SAT problem, the reduction will, in polynomial time, create a grammar and a single string such that solving the ViterbiTrain problem for this grammar and string will yield a solution for the instance of the 3-SAT problem.

Let  X  = V m i =1 ( a i  X  b i  X  c i ) be an instance of the 3-SAT problem, where a i , b i and c i are liter-als over the set of variables { Y 1 ,...,Y N } (a literal refers to a variable Y j or its negation,  X  Y j ). Let C be the j th clause in  X  , such that C j = a j  X  b j  X  c j We define the following context-free grammar G  X  and string to parse s  X  : 1. The terminals of G  X  are the binary digits  X  = { 0 , 1 } . 2. We create N nonterminals V Y r , r  X  { 1 ,...,N } and rules V Y 3. We create N nonterminals V  X  Y { 1 ,...,N } and rules V  X  Y 5. We create the rule S  X  { 2 ,...,m } , we create a rule S  X  where S  X   X  j , V j i =1 C i and A j is also a new nonterminal indexed by j  X  X  1 ,...,m } . 6. Let C j = a j  X  b j  X  c j be clause j in  X  . Let
Y ( a j ) be the variable that a j mentions. Let ( y 1 ,y 2 ,y 3 ) be a satisfying assignment for C j where y k  X  { 0 , 1 } and is the value of Y ( a j ) , Y ( b j ) and Y ( c j ) respectively for k  X  { 1 , 2 , 3 } .
For each such clause-satisfying assignment, we add the rule:
For each A j , we would have at most 7 rules of that form, since one rule will be logically incon-sistent with a j  X  b j  X  c j . 7. The grammar X  X  start symbol is S  X  8. The string to parse is s  X  = (10) 3 m , i.e. 3 m consecutive occurrences of the string 10 .

A parse of the string s  X  using G  X  will be used to get an assignment by setting Y r = 0 if the rule V the parse tree, and 1 otherwise. Notice that at this point we do not exclude  X  X ontradictions X  coming from the parse tree, such as V Y tree together with V Y lowing lemma gives a condition under which the assignment is consistent (so contradictions do not occur in the parse tree): Lemma 1. Let  X  be an instance of the 3-SAT problem, and let G  X  be a probabilistic CFG based on the above grammar with weights  X   X  . If the (multiplicative) weight of the Viterbi parse of s  X  is 1 , then the assignment extracted from the parse tree is consistent.
 Proof. Since the probability of the Viterbi parse is 1, all rules of the form { V Y r ,V  X  Y which appear in the parse tree have probability 1 as well. There are two possible types of inconsis-tencies. We show that neither exists in the Viterbi parse: 1. For any r , an appearance of both rules of the form V Y r  X  0 and V Y r  X  1 cannot occur be-cause all rules that appear in the Viterbi parse tree have probability 1. 2. For any r , an appearance of rules of the form whenever we have an appearance of the rule the rule V  X  Y of the form 10 ), and then again we use the fact that all rules in the parse tree have probability 1.
The case of V Y r  X  0 and V  X  Y analogously.
 Thus, both possible inconsistencies are ruled out, resulting in a consistent assignment.

Figure 1 gives an example of an application of the reduction.
 Lemma 2. Define  X  , G  X  as before. There exists  X   X  such that the Viterbi parse of s  X  is 1 if and only if  X  is satisfiable. Moreover, the satisfying assign-ment is the one extracted from the parse tree with weight 1 of s  X  under  X   X  .
 Proof. (=  X  ) Assume that there is a satisfying as-signment. Each clause C j = a j  X  b j  X  c j is satis-fied using a tuple ( y 1 ,y 2 ,y 3 ) which assigns value responds the following rule Set its probability to 1, and set all other rules of A j to 0. In addition, for each r , if Y r = y , set the probabilities of the rules V Y r  X  y and V  X  Y to 1 and V  X  Y of the weights for S  X  This assignment of rule probabilities results in a Viterbi parse of weight 1. (  X  =) Assume that the Viterbi parse has prob-ability 1. From Lemma 1, we know that we can extract a consistent assignment from the Viterbi parse. In addition, for each clause C j we have a rule that is assigned probability 1, for some ( y 1 ,y 2 ,y 3 ) . One can verify that ( y 1 ,y 2 ,y 3 are the values of the assignment for the corre-sponding variables in clause C j , and that they satisfy this clause. This means that each clause is satisfied by the assignment we extracted.

In order to show an NP-hardness result, we need to  X  X onvert X  ViterbiTrain to a decision problem. The natural way to do it, following Lemmas 1 and 2, is to state the decision problem for Viter-biTrain as  X  X iven G and x 1 ,...,x n and  X   X  0 , is the optimized value of the objective function L (  X  , z )  X   X  ? X  and use  X  = 1 together with Lem-mas 1 and 2. (Naturally, an algorithm for solving ViterbiTrain can easily be used to solve its deci-sion problem.) Theorem 3. The decision version of the Viterbi-Train problem is NP-hard. A natural path of exploration following the hard-ness result we showed is determining whether an approximation of ViterbiTrain is also hard. Per-haps there is an efficient approximation algorithm for ViterbiTrain we could use instead of coordi-nate ascent algorithms such as Viterbi EM. Recall that such algorithms X  main guarantee is identify-ing a local maximum; we know nothing about how far it will be from the global maximum.

We next show that approximating the objective function of ViterbiTrain with a constant factor of  X  is hard for any  X   X  ( 1 2 , 1] (i.e., 1 / 2 + approxima-tion is hard for any  X  1 / 2 ). This means that, un-der the P 6 = NP assumption, there is no efficient al-gorithm that, given a grammar G and a sample of sentences x 1 ,...,x n , returns  X  0 and z 0 such that: We will continue to use the same reduction from  X  4. Let s  X  be the string from that reduction, and let (  X  ,z ) be the optimal solution for ViterbiTrain given G  X  and s  X  . We first note that if p ( s  X  ,z |  X  ) &lt; 1 (implying that there is no satisfying as-signment), then there must be a nonterminal which appears along with two different rules in z .
This means that we have a nonterminal B  X  N with some rule B  X   X  that appears k times, while the nonterminal appears in the parse r  X  k + 1 times. Given the tree z , the  X  that maxi-mizes the objective function is the maximum like-lihood estimate (MLE) for z (counting and nor-malizing the rules). 2 We therefore know that the ViterbiTrain objective function, L (  X  ,z ) , is at most to ber of times nonterminal B appears in z (hence f B ( z ) = r ) and f B  X   X  ( z ) is the number of times B  X   X  appears in z (hence f B  X   X  ( z ) = k ). For any k  X  1 , r  X  k + 1 : This means that if the value of the objective func-tion of ViterbiTrain is not 1 using the reduction from  X  4, then it is at most 1 2 . If we had an efficient approximate algorithm with approximation coeffi-cient  X  &gt; 1 2 (Eq. 9 holds), then in order to solve 3-SAT for formula  X  , we could run the algorithm on G  X  and s  X  and check whether the assignment to (  X  ,z ) that the algorithm returns satisfies  X  or not, and return our response accordingly.

If  X  were satisfiable, then the true maximal value of L would be 1 , and the approximation al-gorithm would return (  X  ,z ) such that L (  X  ,z )  X   X  &gt; 1 2 . z would have to correspond to a satisfy-ing assignment, and in fact p ( z |  X  ) = 1 , because in any other case, the probability of a derivation which does not represent a satisfying assignment is smaller than 1 2 . If  X  were not satisfiable, then the approximation algorithm would never return a (  X  ,z ) that results in a satisfying assignment (be-cause such a (  X  ,z ) does not exist).

The conclusion is that an efficient algorithm for approximating the objective function of Viterbi-Train (Eq. 4) within a factor of 1 2 + is unlikely to exist. If there were such an algorithm, we could use it to solve 3-SAT using the reduction from  X  4. An alternative problem to Problem 1, a variant of Viterbi-training, is the following (see, for exam-ple, Klein and Manning, 2001): Problem 3. ConditionalViterbiTrain Input: G context-free grammar, x 1 ,...,x n train-ing instances from L ( G ) Output:  X  and z 1 ,...,z n such that (  X  ,z 1 ,...,z n ) = argmax
Here, instead of maximizing the likelihood, we maximize the conditional likelihood. Note that there is a hidden assumption in this problem def-inition, that x i can be parsed using the grammar G . Otherwise, the quantity p ( z i |  X  ,x i ) is not well-defined. We can extend ConditionalViterbi-Train to return  X  in the case of not having a parse for one of the x i  X  X his can be efficiently checked using a run of a cubic-time parser on each of the strings x i with the grammar G .

An approximate technique for this problem is similar to Viterbi EM, only modifying the M-step to maximize the conditional, rather than joint, likelihood. This new M-step will not have a closed form and may require auxiliary optimization tech-niques like gradient ascent.
 Our hardness result for ViterbiTrain applies to ConditionalViterbiTrain as well. The reason is that if p ( z,s  X  |  X   X  ) = 1 for a  X  with a satisfying assignment, then L ( G ) = { s  X  } and D ( G ) = { z } . This implies that p ( z |  X   X  ,s  X  ) = 1 . If  X  is unsat-isfiable, then for the optimal  X  of ViterbiTrain we have z and z 0 such that 0 &lt; p ( z,s  X  |  X   X  ) &lt; 1  X   X  ,s  X  ) &lt; 1 , which means the conditional objec-tive function will not obtain the value 1. (Note that there always exist some parameters  X   X  that generate s  X  .) So, again, given an algorithm for ConditionalViterbiTrain , we can discern between a satisfiable formula and an unsatisfiable formula, using the reduction from  X  4 with the given algo-rithm, and identify whether the value of the objec-tive function is 1 or strictly less than 1. We get the result that: Theorem 4. The decision problem of Condition-alViterbiTrain problem is NP-hard. where the decision problem of ConditionalViter-biTrain is defined analogously to the decision problem of ViterbiTrain .

We can similarly show that finding the global maximum of the marginalized likelihood: is NP-hard. The reasoning follows. Using the reduction from before, if  X  is satisfiable, then Eq. 12 gets value 0. If  X  is unsatisfiable, then we would still get value 0 only if L ( G ) = { s  X  } . If G  X  generates a single derivation for (10) 3 m , then we actually do have a satisfying assignment from Lemma 1. Otherwise (more than a single deriva-tion), the optimal  X  would have to give fractional probabilities to rules of the form V Y r  X  X  0 , 1 } (or V that (10) 3 m is the only generated sentence, which is a contradiction.

The quantity in Eq. 12 can be maximized ap-proximately using algorithms like EM, so this gives a hardness result for optimizing the objec-tive function of EM for PCFGs. Day (1983) pre-viously showed that maximizing the marginalized likelihood for hidden Markov models is NP-hard.
We note that the grammar we use for all of our results is not recursive. Therefore, we can encode this grammar as a hidden Markov model, strength-ening our result from PCFGs to HMMs. 3 In the previous sections, we showed that solving Viterbi training is hard, and therefore requires an approximation algorithm. Viterbi EM, which is an example of such algorithm, is dependent on an ini-tialization of either  X  to start with an E-step or z to start with an M-step. In the absence of a better-informed initializer, it is reasonable to initialize z using a uniform distribution over D ( G ,x i ) for each i . If D ( G ,x i ) is finite, it can be done effi-ciently by setting  X  = 1 (ignoring the normaliza-tion constraint), running the inside algorithm, and sampling from the (unnormalized) posterior given by the chart (Johnson et al., 2007). We turn next to an analysis of this initialization technique that suggests it is well-motivated.

The sketch of our result is as follows: we first give an asymptotic upper bound for the log-likelihood of derivations and sentences. This bound, which has an information-theoretic inter-pretation, depends on a parameter  X  , which de-pends on the distribution from which the deriva-tions were chosen. We then show that this bound is minimized when we pick  X  such that this distri-bution is (conditioned on the sentence) a uniform distribution over derivations.

Let q ( x ) be any distribution over L ( G ) and  X  some parameters for G . Let f ( z ) be some feature function (such as the one that counts the number of appearances of a certain rule in a derivation), and then: E which gives the expected value of the feature func-We will make the following assumption about G : Condition 1. There exists some  X  I such that  X  x  X  L ( G ) ,  X  z  X  D ( G ,x ) , p ( z |  X  I ,x ) = 1 / | D ( G ,x ) | .

This condition is satisfied, for example, when G is in Chomsky normal form and for all A,A 0  X  N , | R ( A ) | = | R ( A 0 ) | . Then, if we set  X  A  X   X  have the same number of rules and hence the same probability. This condition does not hold for gram-mars with unary cycles because | D ( G ,x ) | may be infinite for some derivations. Such grammars are not commonly used in NLP.

Let us assume that some  X  X orrect X  parameters  X   X  exist, and that our data were drawn from a dis-tribution parametrized by  X   X  . The goal of this sec-tion is to motivate the following initialization for  X  , which we call UniformInit : 1. Initialize z by sampling from the uniform dis-tribution over D ( G ,x i ) for each x i . 2. Update the grammar parameters using maxi-mum likelihood estimation. 7.1 Bounding the Objective To show our result, we require first the following definition due to Freund et al. (1997): Definition 5. A distribution p 1 is within  X   X  1 of a distribution p 2 if for every event A , we have
For any feature function f ( z ) and any two sets of parameters  X  2 and  X  1 for G and for any marginal q ( x ) , if p ( z |  X  1 ,x ) is within  X  of p ( z |  X  2 ,x ) for all x then: Let  X  0 be a set of parameters such that we perform the following procedure in initializing Viterbi EM: first, we sample from the posterior distribution p ( z |  X  0 ,x ) , and then update the parameters with maximum likelihood estimate, in a regular M-step. Let  X  be such that p ( z |  X  0 ,x ) is within  X  of p ( z |  X   X  ,x ) (for all x  X  L ( G ) ). (Later we will show that UniformInit is a wise choice for making  X  small. Note that UniformInit is equivalent to the procedure mentioned above with  X  0 =  X  I .)
Consider  X  p n ( x ) , the empirical distribution over x ,...,x n . As n  X   X  , we have that  X  p n ( x )  X  p ( x ) , almost surely, where p  X  is: This means that as n  X   X  we have E  X  p E ples from p ( z |  X  0 ,x i ) for i  X  { 1 ,...,n } . Then, from simple MLE computation, we know that the value We also know that for  X  0 , from the consistency of MLE, for large enough samples: which means that we have the following as n grows (starting from the ViterbiTrain objective with initial state z = z 0 ): max We next use the fact that  X  p n ( x )  X  p  X  ( x ) for large n , and apply Eq. 14, noting again our assumption that p ( z |  X  0 ,x ) is within  X  of p ( z |  X   X  ,x ) . We also let B = X nodes in the derivation z i . Note that F A ( z i )  X  B . The above quantity (Eq. 20) is approximately bounded above by Eq. 22 follows from: If we continue to develop Eq. 22 and apply Eq. 17 and Eq. 23 again, we get that: =  X   X   X  = , d (  X  ;  X   X  , | R | ,B ) (26) where Eq. 24 is the result of F A ( z 0 )  X  B .
For two series { a n } and { b n } , let  X  a n ' b n  X  denote that lim n  X  X  X  a n  X  lim n  X  X  X  b n . In other words, a n is asymptotically larger than b n . Then, if we changed the representation of the objec-tive function of the ViterbiTrain problem to log -likelihood, for  X  0 that maximizes Eq. 18 (with some simple algebra) we have: 1 n
X '  X  =  X  where
H (  X   X  ,A ) =  X  X is the entropy of the multinomial for nonter-minal A . H (  X   X  ,A ) can be thought of as the minimal number of bits required to encode a choice of a rule from A , if chosen independently from the other rules. All together, the quantity bits required to encode a tree in our sample using  X  , while removing dependence among all rules and assuming that each node at the tree is chosen uniformly. 4 This means that the log-likelihood, for large n , is bounded from above by a linear func-tion of the (average) number of bits required to optimally encode n trees of total size B , while as-suming independence among the rules in a tree. We note that the quantity B/n will tend toward the average size of a tree, which, under Condition 1, must be finite.

Our final approximate bound from Eq. 28 re-lates the choice of distribution, from which sample z , to  X  . The lower bound in Eq. 28 is a monotone-decreasing function of  X  . We seek to make  X  as small as possible to make the bound tight. We next show that the uniform distribution optimizes  X  in that sense. 7.2 Optimizing  X  Note that the optimal choice of  X  , for a single x and for candidate initializer  X  0 , is In order to avoid degenerate cases, we will add an-other condition on the true model,  X   X  : Condition 2. There exists  X  &gt; 0 such that, for any x  X  L ( G ) and for any z  X  D ( G ,x ) , p ( z |  X  ,x )  X   X  .
 This is a strong condition, forcing the cardinal-ity of D ( G ) to be finite, but it is not unreason-able if natural language sentences are effectively bounded in length.

Without further information about  X   X  (other than that it satisfies Condition 2), we may want to consider the worst-case scenario of possible  X  , hence we seek initializer  X  0 such that is minimized. If  X  0 =  X  I , then we have that p ( z |  X  I ,x ) = | D ( G ,x ) |  X  1 ,  X  x . Together with Condition 2, this implies that and hence  X  opt ( x,  X   X  )  X   X  x / X  for any  X   X  , hence  X ( x ;  X  I )  X   X  x / X  . However, if we choose  X  0 6 =  X  , we have that p ( z 0 |  X  0 ,x ) &gt;  X  x for some z 0 , hence, for  X   X  such that it assigns probability  X  on z , we have that and hence  X  opt ( x,  X   X  ;  X  0 ) &gt;  X  x / X  , so  X ( x ;  X   X  / X  . So, to optimize for the worst-case scenario over true distributions with respect to  X  , we are motivated to choose  X  0 =  X  I as defined in Con-dition 1. Indeed, UniformInit uses  X  I to initialize the state of Viterbi EM.

We note that if  X  I was known for a specific grammar, then we could have used it as a direct initializer. However, Condition 1 only guarantees its existence, and does not give a practical way to identify it. In general, as mentioned above,  X  = 1 can be used to obtain a weighted CFG that sat-quire a uniform posterior distribution, the num-ber of derivations of a fixed length is finite. This means that we can converted the weighted CFG with  X  = 1 to a PCFG with the same posterior (Smith and Johnson, 2007), and identify the ap-propriate  X  I . Viterbi training is closely related to the k -means clustering problem, where the objective is to find k centroids for a given set of d -dimensional points such that the sum of distances between the points and the closest centroid is minimized. The ana-log for Viterbi EM for the k -means problem is the k -means clustering algorithm (Lloyd, 1982), a co-ordinate ascent algorithm for solving the k -means problem. It works by iterating between an E-like-step, in which each point is assigned the closest centroid, and an M-like-step, in which the cen-troids are set to be the center of each cluster.  X  k  X  in k -means corresponds, in a sense, to the size of our grammar. k -means has been shown to be NP-hard both when k varies and d is fixed and when d varies and k is fixed (Aloise et al., 2009; Mahajan et al., 2009). An open problem relating to our hardness result would be whether ViterbiTrain (or ConditionalViterbiTrain ) is hard even if we do not permit grammars of arbitrarily large size, or at least, constrain the number of rules that do not rewrite to terminals (in our current reduction, the size of the grammar grows as the size of the 3-SAT formula grows).

On a related note to  X  7, Arthur and Vassilvit-skii (2007) described a greedy initialization al-gorithm for initializing the centroids of k -means, called k -means++. They show that their ini-tialization is O (log k ) -competitive; i.e., it ap-proximates the optimal clusters assignment by a factor of O (log k ) . In  X  7.1, we showed that uniform-at-random initialization is approximately O ( | N | L X  2 /n ) -competitive (modulo an additive constant) for CNF grammars, where n is the num-ber of sentences, L is the total length of sentences and  X  is a measure for distance between the true distribution and the uniform distribution. 5
Many combinatorial problems in NLP involv-ing phrase-structure trees, alignments, and depen-dency graphs are hard (Sima X  X n, 1996; Good-man, 1998; Knight, 1999; Casacuberta and de la Higuera, 2000; Lyngs X  and Pederson, 2002; Udupa and Maji, 2006; McDonald and Satta, 2007; DeNero and Klein, 2008, inter alia ). Of special relevance to this paper is Abe and Warmuth (1992), who showed that the problem of finding maximum likelihood model of probabilistic au-tomata is hard even for a single string and an au-tomaton with two states. Understanding the com-plexity of NLP problems, we believe, is crucial as we seek effective practical approximations when necessary. We described some properties of Viterbi train-ing for probabilistic context-free grammars. We showed that Viterbi training is NP-hard and, in fact, NP-hard to approximate. We gave motivation for uniform-at-random initialization for deriva-tions in the Viterbi EM algorithm.
 We acknowledge helpful comments by the anony-mous reviewers. This research was supported by NSF grant 0915187.

