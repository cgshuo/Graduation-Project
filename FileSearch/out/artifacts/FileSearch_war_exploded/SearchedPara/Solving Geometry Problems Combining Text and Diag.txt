 This paper introduces the first fully-automated system for solving unaletered SAT-level geomet-ric word problems, each of which consists of text and the corresponding diagram (Figure 1). The ge-ometry domain has a long history in AI, but previ-ous work has focused on geometric theorem prov-ing (Feigenbaum and Feldman, 1963) or geomet-ric analogies (Evans, 1964). Arithmetic and alge-braic word problems have attracted several NLP researchers (Kushman et al., 2014; Hosseini et al., 2014; Roy et al., 2015), but geometric word prob-lems were first explored only last year by Seo et al. (2014). Still, this system merely aligned diagram elements with their textual mentions (e.g.,  X  X ircle O X ) X  X t did not attempt to fully represent geome-try problems or solve them. Answering geometry questions requires a method that interpert question text and diagrams in concert.
The geometry genre has several distinctive char-acteristics. First, diagrams provide essential in-formation absent from question text. In Figure 1 problem (a), for example, the unstated fact that lines BD and AC intersect at E is necessary to solve the problem. Second, the text often includes difficult references to diagram elements. For ex-ample, in the sentence  X  X n the diagram, the longer line is tangent to the circle X , resolving the ref-erent of the phrase  X  X onger line X  is challenging. Third, the text often contains implicit relations. For example, in the sentence  X  X B is 5 X , the rela-Fourth, geometric terms can be ambiguous as well. For instance, radius can be a type identifier in  X  X he length of radius AO is 5 X , or a predicate in  X  X O is the radius of circle O X . Fifth, identifying the correct arguments for each relation is challeng-ing. For example, in sentence  X  X ines AB and CD are perpendicular to EF X , the parser has to deter-mine what is perpendicular to EF X  X ine AB? line CD? Or both AB and CD? Finally, it is hard to obtain large number of SAT-level geometry ques-tions; Learning from a few examples makes this a particularly challenging NLP problem.

This paper introduces G EO S, a system that maps geometry word problems into a logical rep-resentation that is compatible with both the prob-lem text and the accompanying diagram (Fig-ure 1). We cast the mapping problem as the prob-lem of selecting the subset of relations that is most likely to correspond to each question.

We compute the mapping in three main steps (Figure 2). First, G EO S uses text-and diagram-parsing to overgenerate a set of relations that po-tentially correspond to the question text, and asso-ciates a score with each. Second, G EO S generates a set of relations (with scores) that corresponds to the diagram. Third, G EO S selects a subset of the relations that maximizes the joint text and diagram scores. We cast this maximization as a submodu-lar optimization problem, which enables G EO S to use a close-to-optimal greedy algorithm. Finally, we feed the derived formal model of the problem to a geometric solver, which computes the answer to the question.

G EO S is able to solve unseen and unaltered multiple-choice geometry questions. We report on experiments where G EO S achieves a 49% score on official SAT questions, and a score of 61% on practice questions, providing the first results of this kind. Our contributions include: (1) designing and implementing the first end-to-end system that solves SAT plane geometry problems; (2) formal-izing the problem of interpreting geometry ques-tions as a submodular optimization problem; and (3) providing the first empirical results on the ge-ometry genre, making the data and software avail-able for future work. Semantic parsing is an important area of NLP re-search (Zettlemoyer and Collins, 2005; Ge and Mooney, 2006; Flanigan et al., 2014; Eisenstein et al., 2009; Kate and Mooney, 2007; Goldwasser and Roth, 2011; Poon and Domingos, 2009; Be-rant and Liang, 2014; Kwiatkowski et al., 2013; Reddy et al., 2014). However, semantic parsers do not tackle diagrams X  X  critical element of the ge-ometry genre. In addition, the overall number of available geometry questions is quite small com-pared to the size of typical NLP corpora, making it challenging to learn semantic parsers directly from geometry questions. Relation extraction is another area of NLP that is related to our task (Cowie and Lehnert, 1996; Culotta and Sorensen, 2004). Again, both diagrams and small corpora are prob-lematic for this body of work.

Our work is part of grounded language acqui-sition research (Branavan et al., 2012; Vogel and Jurafsky, 2010; Chen et al., 2010; Hajishirzi et al., 2011; Liang et al., 2009; Koncel-Kedziorski et al., 2014; Bordes et al., 2010; Kim and Mooney, 2013; Angeli and Manning, 2014; Hixon et al., 2015; Koncel-Kedziorski et al., 2014; Artzi and Zettlemoyer, 2013) that involves mapping text to a restricted formalism (instead of a full, do-main independent representation). In the geom-etry domain, we recover the entities (e.g., circles) from diagrams, derive relations compatible with both text and diagram, and re-score relations de-rived from text parsing using diagram information. Casting the interpretation problem as selecting the most likely subset of literals can be generalized to grounded semantic parsing domains such as navi-gational instructions.

Coupling images and the corresponding text has attracted attention in both vision and NLP (Farhadi et al., 2010; Kulkarni et al., 2011; Gupta and Mooney, 2010; Gong et al., 2014; Fang et al., 2014). We build on this powerful paradigm, but instead of generating captions we show how pro-cessing multimodal information help improve tex-tual or visual interpretations for solving geometry questions.

Diagram understanding has been explored since early days in AI (Lin et al., 1985; Hegarty and Just, 1989; Novak, 1995; O X  X orman and Kasturi, 1995; Bulko, 1988; Srihari, 1994; Lovett and Forbus, 2012). Most previous approaches differ from our method because they address the twin problems of diagram understanding and text understanding in isolation. Often, previous work relies on manual identification of visual primitives, or on rule-based system for text analysis. The closest work to ours is the recent work of Seo et al. (2014) that aligns geometric shapes with their textual mentions, but does not identify geometric relations or solve ge-ometry problems. A geometry question is a tuple ( t,d,c ) consist-ing of a text t in natural language, a diagram d in raster graphics, and multiple choice answers c = { c 1 ,...,c M } ( M = 5 in SAT). Answering a geometry question is to find a correct choice c i .
Our method, G EO S, consists of two steps (Fig-ure 2): (1) interpreting a geometry question by deriving a logical expression that represents the meaning of the text and the diagram, and (2) solv-ing the geometry question by checking the satis-fiablity of the derived logical expression. In this paper we mainly focus on interpreting geometry questions and use a standard algebraic solver (see section 7 for a brief description of the solver). Definitions: We formally represent logical ex-pressions in the geometry domain with the lan-guage  X  , a subset of typed first-order logic that includes:  X  constants , corresponding to known numbers (e.g., 5 and 2 in Figure 1) or entities with known geometric coordinates.  X  variables , corresponding to unknown numbers or geometrical entities in the question (e.g., O and CE in Figure 1).  X  predicates , corresponding to geometric or arith-metic relations (e.g., Equals , IsDiameter ,  X  functions , corresponding to properties of geo-metrical entities (e.g., LengthOf, AreaOf ) or arithmetic operations (e.g., SumOf , RatioOf ). Each element in the geometry language has either boolean (e.g., true ), numeric (e.g., 4 ), or entity (e.g., line , circle ) type. We refer to all symbols in the language  X  as concepts .

We use the term literal to refer to the application of a predicate to a sequence of arguments (e.g., IsTriangle(ABC) ). Literals are possibly negated atomic formulas in the language  X  . Logical for-mulas contain constants, variables, functions, ex-istential quantifiers and conjunctions over literals Interpretation is the task of mapping a new ge-ometry question with each choice, ( t,d,c m ) , into a logical formula  X  in  X  . More formally, the goal is to find  X   X  = arg max  X   X   X  score (  X  ; t,d,c m ) where  X  is the set of all logical formulas in  X  and score measures the interpretation score of the for-mula according to both text and diagram. The problem of deriving the best formula  X   X  can be modeled as a combinatorial search in the space of literals L (note that each logical formula  X  is rep-resented as a conjunction over literals l i ).
G EO S efficiently searches this combinatorial space taking advantage of a submodular set func-tion that scores a subset of literals using both text and diagram. The best subset of literals is the one that has a high affinity with both text and diagram and is coherent i.e., does not suffer from redun-L  X  = arg max where A ( L 0 ,t,d ) measures the affinity of the lit-erals in L 0 with both the text and the diagram, H ( L 0 ,t,d ) measures the coverage of the literals in L 0 compared to the text and discourages redun-dancies, and  X  is a trade-off parameter between A and H .

The affinity A is decomposed into text-based affinity, A text , and diagram-based affinity, A diagram . The text-based affinity closely mirrors the linguistic structure of the sentences as well as type matches in the geometry language  X  . For modeling the text score for each literal, we learn a log-linear model. The diagram-based affinity A diagram grounds literals into the diagram, and scores literals according to the diagram parse. We describe the details on how to compute A text in section 4 and A diagram in section 5. The text-based scoring function A text ( L,t ) com-putes the affinity score between the set of liter-als L and the question text t . This score is the sum of the affinity scores of individual literals l j  X  L i.e., A text ( L,t ) = A text ( l j ,t ) 7 X  [  X  X  X  , 0] . 3 G EO S learns a discrim-inative model A text ( l j ,t ;  X  ) that scores the affin-ity of every literal l j  X  L and the question text t through supervised learning from training data.
We represent literals using a hypergraph (Fig-ure 4) (Klein and Manning, 2005; Flanigan et al., 2014). Each node in the graph corresponds to a concept in the geometry language (i.e. constants, variables, functions, or predicates). The edges capture the relations between concepts; concept nodes are connected if one concept is the argument of the other in the geometry language. In order to interpret the question text (Figure 3 step 1), G EO S first identifies concepts evoked by the words or phrases in the input text. Then, it learns the affin-ity scores which are the weights of edges in the hypergraph. It finally completes relations so that type matches are satistfied in the formal language. 4.1 Concept Identification Concepts are defined as symbols in the geometry language  X  . The concept identification stage maps words or phrases to their corresponding concepts in the geometry language. Note that a phrase can be mapped to several concepts. For instance, in the sentence  X  X BCD is a square with an area of 1 X , the word  X  X quare X  is a noun referring to some object, so it maps to a variable square . In a similar sentence  X  X quare ABCD has an area 1 X , the word  X  X quare X  describes the variable ABCD , so it maps to a predicate IsSquare .

G EO S builds a lexicon from training data that maps stemmed words and phrases to the con-cepts in the geometry language  X  . The lexicon is derived from all correspondences between ge-ometry keywords and concepts in the geometry language as well as phrases and concepts from manual annotations in the training data. For in-stance, the lexicon contains ( X  X quare X , { square, IsSquare } ) including all possible concepts for the phrase  X  X quare X . Note that G EO S does not make any hard decision on which identification is cor-rect in this stage, and defers it to the relation iden-tification stage (Section 4.2). To identify num-bers and explicit variables (e.g.  X 5 X ,  X  X B X ,  X  X  X ), G
EO S uses regular expressions. For an input text t , G EO S assigns one node in the graph (Figure 4) for each concept identified by the lexicon. 4.2 Relation Identification A relation is a directed hyperedge between concept nodes. A hyperedge connects two nodes (for unary relations such as the edge be-tween RadiusOf and O in Figure 4) or three nodes (for binary relations such as the hyperedge be-tween Equals and its two arguments RadiusOf and 5 in Figure 4).

We use a discriminative model (logistic re-gression) to predict the probability of a rela-tion r i being correct in text t : P  X  ( y i | r i ,t ) = (a) sentence:  X  X hat is the perimeter of ABCE? X  (b) sentence:  X  X M and CM bisect BAC and BCA. X  for r i being correct in t , f text ( r i ,t ) is a feature vector of t and r i , and  X  is a vector of parameters to be learned. We define the affinity score of r i of the corresponding hyperedge is the relation X  X  affinity score. We learn  X  using the maximum like-lihood estimation of the training data (details in Section 8), with L2 regularization.

We train two separate models for learning unary and binary relations. The training data consists of sentence-relation-label tuples ( t,r,y ) ; for in-stance, ( X  X  tangent line is drawn to circle O X , IsTangent(line, O) , 1) is a positive training example. All incorrect relations in the sen-tences of the training data are negative exam-ples (e.g. ( X  X  tangent line is drawn to circle O X ,
The features for the unary and binary models are shown in Table 1 for the text t and the relation r . We use two main feature categories. Structural features: these features capture the syntactic cues of the text in the form of text distance, dependency tree labels, and part of speech tags for the words associated with the concepts in the relation. Ge-ometry language features: these features capture the cues available in the geometry language  X  in the form of the types and the truth values of the corresponding concepts in the relation.

At inference, G EO S uses the learned models to calculate the affinity scores of all the literals derived from the text t . The affinity score of each literal l j is calculated from the edge (rela-tion) weights in the corresponding subgraph, i.e. A literal l j . 4.3 Relation Completion So far, we have explained how to score the affini-ties between explicit relations and the question text. Geometry questions usually include implicit concepts. For instance,  X  X ircle O has a radius of 5 X  implies the Equals relationship between  X  X a-dius of circle O X  and  X 5 X . In addition, geometry questions include coordinating conjunctions be-tween entities. In  X  X M and CM bisect BAC and BCA X ,  X  X isect X  is shared by two lines and two an-gles (Figure 5 (b)). Also, consider two sentences:  X  X B and CD are perpendicular X  and  X  X B is per-pendicular to CD X . Both have the same semantic annotation but very different syntactic structures.
It is difficult to directly fit the syntactic struc-ture of question sentences into the formal language  X  for implications and coordinating conjunctions , especially due to small training data. We, instead, adopt a two-stage learning inspired by recent work in semantic parsing (Kwiatkowski et al., 2013). Our solution assumes an intermediate representa-tion that is syntactically sound but possibly under-specified . The intermediate representation closely mirrors the linguistic structure of the sentences. In addition, it can easily be transferred to the formal representation in the geometry language  X  .

Figure 5 shows how implications and coordinat-ing conjunctions are modeled in the intermediate representation. Bridged in Figure 5 (a) indicates that there is a special relation (edge) between the two concepts (e.g., what and PerimeterOf ), but the alignment to the geometry language L is not clear. CC in Figure 5 (b) indicates that there is a special relation between two concepts that are con-nected by  X  X nd X  in the sentence. G EO S completes the under-specified relations by mapping them to the corresponding well-defined relations in the for-mal language.
 Implication: We train a log-linear classifier to identify if a Bridged relation (implied concept) exists between two concepts. Intuitively, the clas-sification score indicates the likelihood that certain two concepts (e.g., What and PerimeterOf ) are bridged . For training, positive examples are pairs of concepts whose underlying relation is under-specified, and negative examples are all other pairs of concepts that are not bridged. For instance, ( what , PerimeterOf ) is a positive training exam-ple for the bridged relation. We use the same fea-tures in Table 1 for the classifier.

We then use a deterministic rule to map bridged relations in the intermediate representation to the correct completed relations in the final represen-tation. In particular, we map bridged to Equals if the two children concepts are of type number , and to IsA if the concepts are of type entity (e.g. Coordinating Conjunctions: CC relations model coordinating conjunctions in the intermediate rep-resentation. For example, Figure 5 (b) shows the conjunction between the two angles BAC and BCA . We train a log-linear classifier for the CC relations, where the setup of the model is identical to that of the binary relation model in Section 4.2.

After we obtain a list of CC(x,y) in the interme-diate representation, we use deterministic rules to coordinate the entities x and y in each CC relation (Figure 5 (b)). First, G EO S forms a set { x,y } for every two concepts x and y that appear in CC(x,y) and transforms every x and y in other literals to { x,y } . Second, G EO S transforms the relations with expansion and distribution rules (Figure 3 will be transferred to Perpendicular(x, y) (ex-pansion rule), and LengthOf { x,y } ) will be trans-tion rule). We use the publicly available diagram parser (Seo et al., 2014) to obtain the set of all visual elements (points, lines, circles, etc.), their coordinates, their relationships in the diagram, and their alignment with entity references in the text (e.g.  X  X ine AB X ,  X  X ircle O X ). The diagram parser serves two pur-poses: (a) computing the diagram score as a mea-sure of the affinity of each literal with the diagram; (b) obtaining high-confidence visual literals which cannot be obtained from the text.
 Diagram score: For each literal l j from the text parsing, we obtain its diagram score A diagram ( l j ,d ) 7 X  [  X  X  X  , 0] . G EO S grounds each literal derived from the text by replacing every variable (entity or numerical variable) in the re-lation to the corresponding variable from the dia-gram parse. The score function is the relaxed in-dicator function of whether a literal is true accord-ing to the diagram. For instance, in Figure 1 (a), consider the literal l = Perpendicular(AC, BD) . In order to obtain its diagram score, we compute the angle between the lines AC and BD in the di-agram and compare it with  X / 2 . The closer the two values, the higher the score (closer to 0 ), and the farther they are, the lower the score. Note that the variables AC and BD are grounded into the dia-gram before we obtain the score; that is, they are matched with the actual corresponding lines AC and BD in the diagram.

The diagram parser is not able to evaluate the correctness of some literals, in which case their diagram scores are undefined . For instance, in the diagram because the scales in the diagram (pixel) and the text are different. For another ex-not be evaluated because it contains an un-grounded (query) variable, what . When the dia-gram score of a literal l j is undefined, G EO S lets A
If the diagram score of a literal is very low, then it is highly likely that the literal is false. For example, in Figure 2, Parallel(AC, DB) has a very low diagram score, 0 . 02 , and is apparently false in the diagram. Concretely, if for some lit-eral l j , A diagram ( l i ) &lt; , then G EO S disregards the text score of l i by replacing A text ( l j ) with A diagram ( l j ) . On the other hand, even if the dia-gram score of a literal is very high, it is still possi-ble that the literal is false, because many diagrams are not drawn to scale. Hence, G EO S adds both text and diagram scores in order to score literals (Section 6).
 High-confidence visual literals: Diagrams often contain critical information that is not present in the text. For instance, to solve the question in Fig-ure 1, one has to know that the points A , E , and C are colinear. In addition, diagrams include numer-ical labels (e.g. one of the labels in Figure 1(b) in-dicates the measure of the angle ABC = 40 degrees). This kind of information is confidently parsed with the diagram parser by Seo et al. (2014). We denote the set of the high-confidence literals by L  X  that are passed to the solver (Section 7). Here, we describe the details of the objective func-tion (Equation 1) and how to efficiently maximize it. The integrated affinity score of a set of literals A ( L 0 ,t,d ) = where A text and A diagram are the text and dia-gram affinities of l 0 j , respectively.

To encourage G EO S to pick a subset of literals that cover the concepts in the question text and, at the same time, avoid redundancies, we define the coherence function as: where N covered is the number of the concept nodes used by the literals in L 0 , and N redundant is the num-ber of redundancies among the concept nodes of the literals. To account for the different scales be-tween A and H , we use the trade-off parameter  X  in Equation 1 learned on the validation dataset.
Maximizing the objective function in Equation 1 is an NP-hard combinatorial optimization prob-lem. However, we show that our objective func-tion is submodular (see Appendix (Section 11) for the proof of submodularity). This means that there exists a greedy method that can provide a reliable approximation. G EO S greedily maximizes Equa-tion 1 by starting from an empty set of literals and adding the next literal l j that maximizes the gain of the objective function until the gain becomes nega-tive (details of the algorithm and the gain function are explained in Figure 3 step 3). We now have the best set of literals L  X  from the optimization, and the high-confidence visual lit-erals L  X  from the diagram parser. In this step, G
EO S determines if an assignment exists to the variables X in L  X   X  L  X  that simultaneously satis-fies all of the literals. This is known as the problem of automated geometry theorem proving in com-putational geometry (Alvin et al., 2014).

We use a numerical method to check the satis-fiablity of literals. For each literal l j in L  X   X  L  X  , we define a relaxed indicator function g j : S 7 X  z j  X  [  X  X  X  , 0] . The function z j = g j ( S ) indi-cates the relaxed satisfiability of l j given an as-signment S to the variables X . The literal l j is completely satisfied if g j ( S ) = 0 . We for-mulate the problem of satisfiability of literals as the task of finding the assignment S  X  to X such that sum of all indicator functions g j ( S  X  ) is maxi-mized, i.e. S  X  = arg max S basing-hopping algorithm (Wales and Doye, 1997) with sequential least squares programming (Kraft, 1988) to globally maximize the sum of the indica-tor functions. If there exists an assignment such that ment to X that satisfies all literals. If such assign-ment does not exist, then G EO S concludes that the literals are not satisfiable simultaneously. G EO S chooses to answer a geometry question if the lit-erals of exactly one answer choice are simultane-ously satisfiable. Logical Language  X  :  X  consists of 13 types of entities and 94 function and predicates observed in our development set of geometry questions. Implementation details : Sentences in geometry questions often contain in-line mathematical ex-pressions, such as  X  X f AB=x+5, what is x? X . These mathematical expressions cause general purpose parsers to fail. G EO S uses an equation analyzer and pre-processes question text by replacing  X = X  with  X  X quals X , and replacing mathematical terms (e.g.,  X  X +5 X ) with a dummy noun so that the de-pendency parser does not fail.

G EO S uses Stanford dependency parser (Chen and Manning, 2014) to obtain syntactic informa-tion, which is used to compute features for rela-tion identification (Table 1). For diagram parsing, similar to Seo et al. (2014), we assume that G EO S has access to ground truth optical character recog-nition for labels in the diagrams. For optimization, we tune the parameters  X  to 0 . 5 , based on the train-Dataset: We built a dataset of SAT plane ge-ometry questions where every question has a tex-tual description in English accompanied by a dia-gram and multiple choices. Questions and answers are compiled from previous official SAT exams and practice exams offered by the College Board (Board, 2014). In addition, we use a portion of the publicly available high-school plane geometry questions (Seo et al., 2014) as our training set.
We annotate ground-truth logical forms for all questions in the dataset. Table 2 shows details of the data and annotation statistics. For evaluat-ing dependency parsing, we annotate 50 questions with the ground truth dependency tree structures Baselines: Rule-based text parsing + G EO S dia-gram solves geometry questions using literals ex-tracted from a manually defined set of rules over the textual dependency parser, and scored by dia-gram. For this baseline, we manually designed 12 high-precision rules based on the development set. Each rule compares the dependency tree of each sentence to pre-defined templates, and if a tem-plate pattern is matched, the rule outputs the re-lation or function structure corresponding to that template. For example, a rule assigns a relation parent(child-1, child-2) for a triplet of (parent, child-1, child-2) where child-1 is the subject of parent and child-2 is the object of the parent.
G EO S without text parsing solves geometry questions using a simple heuristic. With simple textual processing, this baseline extracts numeri-cal relations from the question text and then com-putes the scale between the units in the question and the pixels in the diagram. This baseline rounds the number to the closest choice available in the multiple choices.

G EO S without diagram parsing solves geom-etry questions only relying on the literals inter-preted from the text. It outputs all literals whose text scores are higher than a tuned threshold, 0 . 6 on the training set.

G EO S without relation completion solves ge-ometry questions when text parsing does not use the intermediate representation and does not in-clude the relation completion step. We evaluate our method on three tasks: solving geometry question, interpreting geometry ques-tions, and dependency parsing.
 Solving Geometry Questions : Table 3 compares the score of G EO S in solving geometry questions in practice and official SAT questions with that of baselines. SAT X  X  grading scheme penalizes a wrong answer with a negative score of 0 . 25 . We report the SAT score as the percentage of correctly answered questions penalized by the wrong an-swers. For official questions, G EO S answers 27 questions correctly, 1 questions incorrectly, and leaves 27 un-answered, which gives it a score of 26 . 75 out of 55 , or 49% . Thus, G EO S X  X  preci-sion exceeds 96% on the 51% of questions that it chooses to answer. For practice SAT questions, G EO S scores 61% . 6
In order to understand the effect of individ-ual components of G EO S, we compare the full method with a few ablations. G EO S signifi-cantly outperforms the two baselines G EO S with-out text parsing and G EO S without diagram pars-ing , demonstrating that G EO S benefits from both text and diagram parsing. In order to understand the text parsing component, we compare G EO S with Rule-based text parsing + G EO S Diagram and G EO S without relation completion . The re-sults show that our method of learning to interpret literals from the text is substantially better than the rule-based baseline. In addition, the relation com-pletion step, which relies on the intermediate rep-resentation, helps to improve text interpretation. Error Analysis: In order to understand the errors made by G EO S, we use oracle text parsing and or-acle diagram parsing (Table 3). Roughly 38% of the errors are due to failures in text parsing, and about 46% of errors are due to failures in diagram parsing. Among them, about 15% of errors were due to failures in both diagram and text parsing. For an example of text parsing failure, the liter-als in Figure 6 (a) are not scored accurately due to missing coreference relations (Hajishirzi et al., 2013). The rest of errors are due to problems that require more complex reasoning (Figure 6 (b)). Interpreting Question Texts: Table 4 details the precision and recall of G EO S in deriving lit-erals for geometry question texts for official SAT questions. The rule-based text parsing baseline achieves a high precision, but at the cost of lower recall. On the other hand, the baseline G EO S with-out diagram achieves a high recall, but at the cost of lower precision. Nevertheless, G EO S attains substantially higher F1 score compared to both baselines, which is the key factor in solving the questions. Direct application of a generic seman-tic parser (Berant et al., 2013) with full supervi-sion does not perform well in the geometry do-main, mainly due to lack of enough training data. Our initial investigations show the performance of 33% F1 in the official set.
 Improving Dependency Parsing : Table 5 shows the results of different methods in dependency parsing. G EO S returns a dependency parse tree by selecting the dependency tree that maximizes the text score in the objective function from the top 50 trees produced by a generic dependency parser, Stanford parser (Chen and Manning, 2014). Note that Stanford parser cannot handle mathematical symbols and equations. We report the results of a baseline that extends the Stanford dependency parser by adding a pre-processing step to separate the mathematical expressions from the plain sen-tences (Section 8).

We evaluate the performance of G EO S against the best tree returned by Stanford parser by re-porting the fraction of the questions whose depen-dency parse structures match the ground truth an-notations. Our results show an improvement of 16% over the Stanford dependency parser when equipped with the equation analyzer. For exam-ple, in  X  X B is perpendicular to CD at E X , the Stan-ford dependency parser predicts that  X  X  X  depends on  X  X D X , while G EO S predicts the correct parse in which  X  X  X  depends on  X  X erpendicular X . This paper introduced G EO S, an automated sys-tem that combines diagram and text interpretation to solve geometry problems. Solving geometry questions was inspired by two important trends in the current NLP literature. The first is in designing methods for grounded language acquisition to map text to a restricted formalism (instead of a full, domain independent representation). We demon-strate a new algorithm for learning to map text to a geometry language with a small amount of train-ing data. The second is designing methods in cou-pling language and vision and show how process-ing multimodal information help improve textual or visual interpretations.

Our experiments on unseen SAT geometry problems achieve a score of 49% of official ques-tions and a score of 61% on practice questions, providing a baseline for future work. Future work includes expanding the geometry language and the reasoning to address a broader set of geom-etry questions, reducing the amount of supervi-sion, learning the relevant geometry knowledge, and scaling up the dataset.
 Acknowledgements. The research was sup-ported by the Allen Institute for AI, Allen Dis-tinguished Investigator Award, and NSF (IIS-1352249). We thank Dan Weld, Luke Zettlemoyer, Aria Haghighi, Mark Hopkins, Eunsol Choi, and the anonymous reviewers for helpful comments. We prove that the objective function in equation (1),  X  A ( L 0 ) + H ( L 0 ) is submodular by showing that A ( L 0 ) and H ( L 0 ) are submodular functions. Submodularity of A . Consider L 0  X  L , and a new literal to be added, l i  X  L \ L 0 . By the definition of A , it is clear that A ( L 0  X  { l j } ) = A ( L 0 ) + A ( { l j } ) . Hence, for all L 00  X  L 0  X  L , A ( L 00  X  X  l j } )  X  X  ( L 00 ) = A ( L 0  X  X  l j } )  X  X  ( L . Thus A is submodular.
 Submodularity of H . We prove that the cover-age function, H cov , and the negation of the redun-dancy function,  X  X  red are submodular indepen-dently, and thus derive that their sum is submodu-lar. For both, consider we are given L 00  X  L 0  X  L , and a new literal l j  X  L \ L 0 . Also, let K 00 and and L 0 , respectively, and let K j denote the set of concepts covered by l j .
 Coverage : Since K 00  X  K 0 , | K 00  X  K j | X  X  K 00 | X  | K 0  X  K j | X  X  K 0 | , which is equivalent to Redundancy : Note that H red ( L 00  X  { l j } )  X  H red ( L 00 ) = | K 00  X  K j | , and similarly, H red ( L 0  X  { l j } )  X  X  red ( L 0 ) = | K 0  X  K j | . Since K 00  X  K 0 , thus | K 00  X  K j | X | K 0  X  K j | . Hence, By negating both sides, we derive that the negation of the redundancy function is submodular.
