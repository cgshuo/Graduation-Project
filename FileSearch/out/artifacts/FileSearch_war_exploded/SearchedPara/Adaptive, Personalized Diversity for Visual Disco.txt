 Search queries are appropriate when users have explicit in-tent, but they perform poorly when the intent is difficult to express or if the user is simply looking to be inspired. Visual browsing systems allow e-commerce platforms to ad-dress these scenarios while offering the user an engaging shopping experience. Here we explore extensions in the di-rection of adaptive personalization and item diversification within Stream, a new form of visual browsing and discovery by Amazon. Our system presents the user with a diverse set of interesting items while adapting to user interactions. Our solution consists of three components (1) a Bayesian regres-sion model for scoring the relevance of items while leverag-ing uncertainty, (2) a submodular diversification framework that re-ranks the top scoring items based on category, and (3) personalized category preferences learned from the user X  X  behavior. When tested on live traffic, our algorithms show a strong lift in click-through-rate and session duration. Machine Learning; Submodular Functions; Diversity; Per-sonalization; Explore-Exploit; Multi-Armed Bandits
The brick-and-mortar shopping experience is character-ized by visual browsing where the user is able to quickly scan a large number of potential purchases. The user has a high potential to discover new items while maintaining the ability to focus attention on items of particular inter-est. This problem of discoverability is more challenging in e-commerce where it can be difficult to expose the entirety of an online retailer X  X  catalog. The in-store browsing expe-rience is not well-replicated by search engines that restrict item discovery to items relevant to an explicit search query. Therefore, an online visual browsing experience may greatly aid users in item discovery.

One effort in this direction is Amazon Stream (figure 1), a new website for fashion discovery developed by Amazon (www.amazon.com/stream). Stream enables users to eas-ily discover popular, new, and relevant fashionable items without the need for search queries or to sieve through less relevant items. Toward this end, we have built a personal-izable system that ranks and diversifies items scored by an explore-exploit algorithm. These items are presented to the user as an infinite scroll where each item can be interacted with by clicking. This paper outlines elements of our diverse and personalized visual shopping experience approach.
Figure 1: Screenshot of www.amazon.com/stream .
As the first step in generating the stream, we score each item in the Stream catalog for relevance to our users. We use click probability P ( click | item is viewed ) to quantify relevance. Click refers to any of the following activities: save item as favorite, visit the item X  X  detail page, or open the modal window for the item.

We learn this probability distribution by using a Bayesian Linear Probit regression [ 7] that maps item attributes onto click probabilities. Item attributes are represented by cat-egorical variables. They include product features such as brand, color, department, price, size, as well as a unique identifier for each item. The regression model learns a set of weights where each weight represents the contribution of a single attribute value to the click probability. When evaluating an item, we say that a weight x i is active if its corresponding attribute is present in the item. Thus, the expected click probability of an item is given by where  X   X  1 (  X  ) is the probit function. We assume model weights are generated independently from a prior Normal distribution. As we observe user actions, we update the ac-tive weights posterior distributions accordingly [ 7].
Our catalog consists of hundreds of thousands of items with thousands of items added or purged daily. The ex-pected click probability may unduly favor popular items over underexposed or recently added items. This is because un-derexposed items will likely be associated with undertrained model weights that potentially underestimate the true click probability. This poses an exploration-exploitation dilemma: balancing exploiting highly relevant items with exploring un-dersampled sections of the catalog. Multi-armed bandit al-gorithms such as Thompson sampling [ 13] and Upper Confi-dence Bound [ 3] solve this problem. Here we use a Thomp-son sampling approach to score items as it performs well under delayed feedback [ 4].

We apply Thompson sampling by sampling each model weight from its posterior distribution conditioned on the training data. We then use the sampled weights to com-pute equation (1 ) for each item. Under this procedure, an item will receive a score close to its expected click probabil-ity unless its attributes are associated with highly uncertain model weights. Therefore, the items with the highest scores will be a mix of popular products with high expected values (an exploitation strategy) and underexposed products that were randomly scored high above their expected value (an exploration strategy).

Finally, we note that the customer controls the number of products viewed via scrolling. For simplicity we have omit-ted a model of customer browsing that predicts the number of views per session. However, such a model would allow us to estimate the expected clicks per session directly rather than the expected clicks per item viewed.
We now have a set of items that are scored based on both their relevancy and exposure. Similar items tend to be as-signed similar scores, so ranking these items by their scores creates a list where highly similar items are clustered to-gether. However, our user experience studies indicate that a diverse item list helps users discover relevant items faster, as it exposes more variety in a fixed number of slots [11 ]. Sim-ilar to cases in web search [1 ], blog posts [5 ], news articles [2 ] and music recommendation [ 11], we apply diversification to alleviate information redundancy.

We formulate the selection and ranking of a diverse sub-set of items as a submodular optimization problem [6 ]. Let A := { a 1 ,..., a n } denote the attribute vectors for a set of n items. All attribute vectors are one-hot encoded in d -dimensions such that a i  X  { 0 , 1 } d . Let w denote a d -dimensional vector which encodes user preferences for each of the d item attributes. In addition, let s ( a ) denote a func-tion which maps an item to a real-valued utility score such as the click probability. A submodular objective function  X  for selecting k items from A is given by  X  ( A k , w ) = where A k is a subset of A of size k . We use the convention of applying the logarithm to a vector X  X  individual components. The optimal subset is given by
In equation ( 2), the weight w j emphasizes the importance of the j th attribute to a user. By summing over a i we obtain the number of times that attribute occurs in the collection A . However, the utility of each attribute does not grow lin-early with its count. Instead, the logarithmic term ensures that the incremental utility of the j th attribute diminishes as the number of items with j attributes increases in A k other words, if a user loves shoes, showing only shoes does not lead to a good user experience. The scale of s ( a ) can be tuned to adjust the relative importance of the item X  X  utility.
Equation ( 3) is a special case of the NP-hard maximum set cover problem. Nevertheless, we can use an iterative greedy procedure to obtain a near-optimal solution [12 ]:
A 0 :=  X  and A i +1 := A i  X  with a runtime complexity of O ( dkn ). We further boost efficiency by using the CELF lazy evaluation algorithm [5 , 9].
We also optimize the diversification process by transform-ing the attribute vector space into a single categorical space. This is achieved by mapping each possible attribute vector to a unique category. We restrict the size of this categorical space by coarsening our representation of attributes, such as price, and eliminating attributes that do not need to be diversified, such as average rating in customer reviews. The final set for diversification includes on the order of 100 mu-tually exclusive categories.
Category weights w in equation (2 ) control the trade-off between item utility and category popularity for selecting and ranking items. Unlike methods such as [14 ] and [ 2], we do not optimize these weights directly. This allows us to exploit user behavioral data that was not subject to diversi-fication. In the following sections, we describe the procedure for learning global and personalized category weights.
Though items in the stream are displayed in a grid layout (figure 1), we assume that users scan them linearly from left to right and top to bottom. Hence, we can leverage existing work on click modeling with linear positional bias correction.
To learn the weights w in equation (2 ), we compared lo-gistic regression, clicks over expected clicks [15 ], and click-thru-rate (CTR) with additive smoothing. Each model was tested on several weeks of historical click logs. Even though the CTR approach does not include corrections for position bias, we found that the three methods gave similar results. We therefore opted to use CTR with additive smoothing as it is simple to implement yet provides additional controls to handle update cycle fluctuations.

Let c j and v j represent the number of clicks and views, respectively, for items from the j th category. Under the CTR with additive smoothing model, the weight for the j th category w j is estimated as: where  X  and  X  are priors that enforce minimum category weights.  X  and  X  can be tuned based on traffic volume to avoid dramatic fluctuations in update intervals. In fact, one can interpret w j as distributed according to a Binomial distribution whose parameter p j is drawn from a Beta dis-tribution with parameters  X  and  X  estimated from data.
The adaptively tuned category weights described in the previous section were derived from the aggregate clicks of all users. They capture the general popularity of the categories but not the interests of particular users. To personalize the presenation of items and categories, we need to first build a user model. Unlike some personalized applications where user feedback is immediate and irreversible, our model must handle delayed feedback and react quickly and efficiently to evolving preferences where a positive indicator of interest may no longer be predictive at a later date.
User modeling methods such as matrix factorization [ 8] and hierarchical Bayesian models [ 10 ] are not directly appli-cable in our case because these methods work best with a massive collection of data from all users, and are thus less sensitive to changing patterns in a small fraction of training records. Instead, we model the u th user X  X  level of interest in the d categories as a random vector w u drawn from a Dirichlet distribution parameterized by  X  0 . The distribu-tion of a user X  X  clicks on each category is denoted as c u is modeled as a random variable drawn from a Multinomial distribution parameterized by the interest vector and the user X  X  total number of clicks m u :
The posterior distribution of the user interest vector w u is given proportionally by As Dirichlet is conjugate prior for the Multinomial distribu-tion, this posterior is also Dirichlet with mean  X w u : We estimate the personalized weight vector w u from the user X  X  past clicks c u = ( c u 1 ,...,c ud ) where c uj  X  number of clicks for category j . Dirichlet prior parameter vector  X  0 can be chosen to match pre-specified business rules or to highlight certain category preferences.
 In addition to being simple to implement, this Multinomial-Dirichlet user model allows straightforward incorporation of different types of user signals by adding them as counts to c . Similarly, evolving preferences are handled by deducting older signals from c u . Finally, the personalized diversifica-tion can be achieved by plugging the estimated user interest vector  X w u into equation ( 2). User interests are correlated between different categories. For example, a male interested in high end fashion is likely interested in both suits and expensive watches. This concept is especially useful when users have concentrated clicks on only a few categories, which would otherwise tend to inhibit diversified recommendations.

To ensure a user is exposed to related categories, we diffuse our Dirichlet updates between categories. In addition to a user X  X  click incrementing the item X  X  specific category count, the update is diffused across related categories. Let M be a d -by-d matrix where the entry M ij is the ratio of the number of users who clicked items from both categories i and j to the number of users who clicked items from category j . To alleviate noise, we use only the top categories each user has actively interacted with. The smoothed interest vector  X w of the user interest vector  X w u of equation (9 ) becomes:
There are several common approaches for quantifying the pairwise association between two categories, such as point-wise mutual information or Pearson X  X  correlation coefficients. We use the asymmetric conditional probability that  X  X sers who like category i also like category j  X  because we have ob-served such user behavior patterns in our data. Moreover, the leading eigenvector of the co-interest probability matrix M can be seen as a global interest vector, towards which equation (10 ) smooths the user interest vector  X w u .
We conducted several online experiments to test the effec-tiveness of the methods presented above. We evaluated the treatment impact on engagement by calculating session du-ration, number of items viewed, and total click-through-rate. Each experiment lasted at least one week and involved at least 100,000 users per group. Some statistics are reported for population subsets of at least 10,000 users per group. Statistical significance was determined via Welch X  X  t-test. Table 1 shows experimental results. Columns should not be compared directly to each other, as each experiment X  X  con-trol is different. Columns confer incremental improvements on top of the previous treatment.
We first compared our submodular diversifier of Section 3 to a simpler approach where categorical weights and item scores are considered separately. The model of section 2 as-signs a score to each item. Within each category, we rank the items in descending order. We calculate a multinomial distribution over item categories using global click propensi-ties. For each slot in the stream, we first sample a category from the multinomial, and then fill it with that category X  X  highest scoring item.

Experimental results (Table 1, column 2) show that, within the same session duration, the amount of items viewed by the users subjected to submodular diversification decreased Highlighted results are statistically significant at the 0.05 level. by 1 . 32% while CTR increased by 9 . 82%. The submodu-lar diversifier produces a more diverse stream as categories are penalized more aggressively for being shown repeatedly. These results are consistent with our expectation of users being more interested in diversified streams.
In a second experiment, we tested the impact of learning adaptive category weights from global click propensities as described in Section 4.1 . We compared a submodular diver-sifier that uses the adaptive weights, versus one that uses a set of weights chosen manually by Amazon fashion experts. Experimental results (Table 1, column 3) show that adap-tive weights greatly out-performed manual weights. CTR increased by 8 . 29% and session duration increased by 5 . 39%. This indicates that users are highly sensitive to the categor-ical mix of their experience.
In our final experiment, we exposed users to category weights that were adapted to their own click behavior, as described in Section 4.2 . These weights were calculated for users whose history included at least 10 clicks, so this ex-periment only applied to the most active users. In the con-trol group, users were exposed to streams built using non-personalized weights. Experimental results (Table 1, column 4) show that personalized weights yielded a 12 . 58% increase in CTR with almost no impact on duration. Interestingly, the amount of items that were viewed in the stream de-creased by 4 . 95%. This indicates that users with personal-ized diversity weights had a more efficient experience where they interacted with more items while scrolling through less.
We present Amazon Stream, a visual browsing system that emphasizes adaptive and personalized diversity in user experience. Such methods can be applied to any online sys-tem where the user seeks to discover content in the absence of an explicit search query. Our experimental results show the tangible incremental impact on key engagement metrics of submodular diversification, adaptive global weights, and personalization.

