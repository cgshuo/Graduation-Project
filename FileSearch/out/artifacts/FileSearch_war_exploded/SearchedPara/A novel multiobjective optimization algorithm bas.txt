 1. Introduction
Most real-world optimization problems require making deci-sions involving two or more goals that typically are in contra-diction with each other. When these goals are the minimization or maximization of functions they are typically referred to multi-objective optimization (MO). From the 1950s, in the area of operational research, a variety of methods known as classical has been developed for the solution of multiobjective optimization problems (MOP). These methods are based on formal logic or mathematical programming. Some of the most representative classical methods are linear programming, the weighted sum method and the goal programming method ( Dantzig and Thapa, 1997 ). As an alternative to classical methods, a variety of techniques inspired on natural processes has emerged in the last two decades.

The emulation of nature has inspired scientists in various fields through the history of mankind. Recently, due to advances in computing and the emergence of new ideas based on the behavior of living organisms and natural processes, the techniques inspired in nature have gained increasing interest motivated by two basic aspects ( De Castro and Von Zuben, 2004 ): (1) Traditional methods have proven to be unable to adequately handling complex problems, characterized by the lack of (2) To a variety of engineering problems there is a similar version
Among bio-inspired optimization techniques, the most known are genetic algorithms (AGs). The pioneering work in the practical application of the fundamentals of AGs to MO is the vector evaluated genetic algorithm (VEGA) ( Schaffer, 1984 ). At present, the most popular genetic algorithm for solving MOP is the nondominated sorting genetic algorithm II (NSGA-II) ( Deb et al., 2002 ). Another bio-inspired approach is the so-called particle swarm optimization (PSO), which was recently implemented in the solution of MOP using algorithms such as nondominated sorting particle swarm optimizer (NSPSO) ( Li, 2003 ), multi-objective particle swarm optimization (MOPSO) ( Coello et al., 2004 ), and time variant multi-objective particle swarm optimiza-tion (TV-MOPSO) ( Kumar et al., 2007 ). Another interesting biological process that has been already implemented as an optimization technique is the bacterial chemotaxis. About this novel technique Amos et al. (2007) exposed the potential of implementing bacterial chemotaxis as a distributed optimization process, recognizing that in natural colonies, it is the interaction and communication between bacteria the mechanism that enables them to develop biologically advantageous patterns. 2. Multiobjective optimization problems (MOP)
A multiobjective optimization problem is defined as the problem of finding a vector of decision variables that satisfies some restrictions and optimizes a vector function, which elements represent the values of the functions. A MOP may be formulated as follows ( Deb, 2001 ): Maximize = minimize : f m  X  x  X  m  X  1 ; 2 ;:::; M
Subject to : g j  X  x  X  Z 0 j  X  1 ; 2 ;:::; J where x is the vector of decision variables x= ( x 1 ,x 2 f ( x ) are the m objective functions. The values x i L and x respectively, the minimum and the maximum acceptable values for the variable x i . These values define the boundary of the search space. The J inequalities g j and the K equalities h k are known as constraint functions.

For MOP, instead of a single optimal, there is a set of optimal solutions known as Pareto optimal front (POF). Any solution of this set represents a balance between the objective functions; therefore, it is not possible to say that there is other solution in the search space which is superior to this one when all objectives are considered. In the minimization MOP, Pareto optimality can be mathematically defined as follows ( Chinchuluun and Pardalos, 2007 ): Pareto optimality: A point x n A S with f  X  x  X  is called (globally)
Pareto optimal (or nondominated), if and only if there exists no point x A S such that f i  X  x  X  r f i  X  x  X  for all i =1,2, y , m and f for at least one index l A {1,2, ..., m }, where S is the feasible region.
In most cases it is not easy to find analytical expressions for the line or curve that contains the POF; thus, commonly optimal solutions points and the objective functions values in them are calculated. In order to find optimal solutions, there are two goals that any multiobjective optimization algorithm (MOA) seeks to achieve ( Deb, 1999 ): (1) Guide the search towards the global Pareto optimal region; (2) Maintain the population diversity in the Pareto optimal front.

In this work a novel algorithm based on bacterial chemotaxis and communication exchange in bacterial colonies is developed to solve MOP. The proposed algorithm is validated using 11 bench-mark problems. Three different performance measures were also implemented to compare the performance of the proposed algorithm with the NSGA-II genetic algorithm and with the particle swarm-based algorithm NSPSO. 3. Bacterial chemotaxis
Chemotaxis is a cell movement in response to gradients of chemical concentrations present in the environment. This move-ment and the chemical substances involved in it are used by bacteria as a survival strategy that allows them to search for nutrients and avoid noxious environments.

A bacterium is a prokaryotic unicellular organism. Its structure is basically conformed by a central body of microscopic size that can take many different forms ( Young, 2006 ) and whose size can vary from 0.01 m m 3 to a volume 10 10 times bigger ( Rappe et al., 2002 ; Angert et al., 1993 ). Many bacteria are endowed with a series of rotating flagella in its cell surface that act as propellants, allowing them to swim at a speed of 10 X 35 m m/s ( Eisenbach et al., 2004 ). In addition to the appropriate structure to move in an autonomous way, bacteria have potent receivers (chemorecep-tors) located at the cell surface, capable of detecting temporal-space changes of chemical concentrations in the environment that surrounds them. In this way, when an external perturbation is detected, bacteria use their memory ( Segall et al., 1986 ) to make a temporal-space comparison of the gradients found. Depending on the external conditions sensed, bacteria change their movement from a random walk to a biased random walk.
 studied bacterium, the ( E. coli ) . This is a bacterium present in human intestine that has 8 X 10 left-handed helix configured flagella placed randomly on its cell body. These flagella used for locomotion, can rotate at high speeds (270 r.p.s.) ( Kudo et al., 1990 ), stop momentarily and change the direction of rotation in a controlled manner ( Eisenbach et al., 2004 ). As a result of the flagella helix configuration, when they all move counterclockwise act as propellants moving the bacterium gently forward in an almost rectilinear movement called swim. Otherwise, if the flagella rotate clockwise, they destabilize, propelling the bacterial body in different directions at the same time, so the bacterial body tumbles randomly. Using different combinations of swim and tumble, varying the length and duration of these movements, bacteria explore the environment during their lifetime. follows ( Passino, 2002 ): 4. Bacterial chemotaxis as optimization process
The chemotactical behavior of bacteria as an optimization process was modeled for the first time by Bremermann (1974) in the early 1970s. Two decades later, was proposed an algorithm based on
Bremmerman X  X  work and was applied to maximize a profit function for fed-batch bioreactors ( Montague and Wardb, 1994 ).
Also inspired by Bremmerman X  X  work, M  X  uller et al. (2002) developed an algorithm and applied it to the solution of inverse airfoil design.
 behavior of bacteria was introduced by Passino (2002). This novel algorithm which is known as bacterial foraging optimization algorithm (BFOA), considers not only the chemotactical strategy but also other stages of bacterial foraging behavior as swarming, reproduction and elimination and dispersal; besides communica-tion between bacteria acquires great influence on the entire process, getting closer to the concept that foraging is a phenomenon of a bacterial colony rather than an individual behavior. In subsequent publications of Passino with other authors ( Liu and Passino, 2002 ; Gazi and Passino, 2002 ; Passino, 2005 ), have been made tests of convergence and stability analysis of this technique. Since its initial publication but especially in the last 3 years, new modified versions of BFOA have been proposed (De Castro and Von Zuben, 2004 ; Tang and Wu, 2006 ; Biswas, 2007 ; Chen, 2007 ); also the original algorithm and some of the modified versions have been successfully implemented to solve v arious kinds of engineering problems. In Mishra (2005) it is presented as an application for harmonic estimation problem in power systems; in Kim and Cho (2006) the algorithm is used for tuning the PID controller of an AVR; an optimal power flow solution is proposed in Li et al. (2007) ;in Wu et al. (2007) it is shown as an application of job shop scheduling benchmark problems; in Lin et al. (2007) the parameters of membership functions and the weights of rules of a fuzzy rule set are estimated; in Fang et al. (2007) it is implemented as the parameter estimation of nonlinear system model (NSM) for heavy oil thermal cracking, in Acharyal and Panda (2008) it is presented as the evaluation of independent components to work with mixed signals; in Panigrahi and Ravikumar Pandi (2008) the algorithm is used to solve constrained economic load dispatch problems and in
Guney and Basbug (2008) it is developed as an application in the null steering of linear antenna arrays by controlling the element amplitudes. Even the bacterial chemotaxis and the bacterial foraging have attracted a great deal of interests for researchers in many disciplines, so far have not been introduced applications in multiobjective optimization.

In the following the bacterial chemotaxis multiobjective optimization algorithm (BCMOA) is presented. This algorithm uses fast nondominated sorting procedure, communication between the colony members and a simple chemotactical strategy to change the bacterial positions in order to explore the search space to find several solutions on the POF. 5. Bacterial chemotaxis multiobjective optimization algorithm (BCMOA) 5.1. Initializing
In BCMOA the bacteria are located in a parameter space, which p dimensions represent the value of the p decision variables, so the search space is limited for the variables range. There is also a function space that represents the value of the objective functions assessed for each location of the bacteria in the parameter space.
All bacteria from a colony with S members are located initially at random positions on this parameter space. 5.2. Objective evaluation and nondomination classification
For each bacterium in the initial location, the objective function values are calculated. Simulating the environment of real bacteria, the values of the objective functions represent the amount of nutrients present in that location. Applying a fast nondominated sorting procedure ( Deb et al., 2002 ) the current locations are classified in Pareto optimal fronts (POF). Those bacteria whose location represent a nondominated solution, are classified within the first set of Pareto optimal front (POF1) and are called strong bacteria because their environment is rich in nutrients, so they have a sufficient amount of nutrients to eat. The remaining bacteria are classified into different POF sets according to their nondomination condition and are called weak bacteria because their environment is poor in nutrients. 5.3. Chemotactical strategy for strong bacteria
Making use of their temporal-space memory, the strong bacteria compare their current location with the previous by nondomination concept ( Deb et al., 2002 ). As a result of these comparisons each strong bacterium react with any of the two possible movements: if one of the locations (previous or current) dominates the other, the bacterium moves to the nondominated location and from there, takes a very small tumble in a random direction (short tumble) without straying far from the current source of nutrients. On the other hand, if any of the locations (previous and current) dominates the other, from its current location the bacterium takes a bigger tumble in a random direction (long tumble). 5.4. Communication and chemotactical strategy for weak bacteria
Simulating bacterial communication in nature, the strong bacteria send a signal to the rest of colony members indicating that in their position there is a source of nutrients. The weak bacteria take advantage of this exchange of information as follows: weak bacteria know that if they go in the direction of a strong one, will find a source of nutrients, so each weak bacterium randomly selects a strong bacterium, moves to a location near the strong bacterium selected and keeping the same direction, takes a step (swim) besides the rich location.

After the application of the chemotactical strategy for every bacterium in the colony, a complete chemotactical step was executed. 5.5. Diversity preservation
In order to stimulate the diversity of solutions, the density parameter den i proposed in ( Kumar et al., 2007 ) was applied. For a solution, the computation of this parameter is based on its distance to its nearest neighbor in the POF to which it pertains, giving an estimate of the solutions density on the front. Higher values represent better solutions. In BCMOA when the size of the POF1 is above 50% the size of the colony, density parameter is calculated for all strong bacteria in order to be sorted in non-descending order according to this value. To select its strong bacterium to apply the chemotactical strategy, each weak bacterium must select from the 20% top part of that strong bacteria sorted list. 5.6. Step size
The selection of the steps sizes showed to be a critical issue throughout the design process of the algorithm. If the steps sizes are too small, the search can be trapped into local optimum but if steps are too long the search can miss the global optimum. Taking this into account, equations for long tumble size (LT), short tumble size (ST) and swim size (SW) were defined, so almost any user intervention is needed due to its automatic updated during the process.

Let first define a factor Fac , which decreases linearly from one to zero at every chemotactical step as shown below: Fac  X  j  X  X  X  CHS max j  X  = CHS max  X  1  X  where CHS max is the maximum number of chemotactical steps; j is the index for the chemotactical step.

Let S be the number of colony members, k the index for the p problem parameters; POF 1( j ) the set of nondominated solu-tions ; y k ( j ) strong the location of a strong bacterium for a k parameter and ; y k ( j ) weak the location of a weak bacterium for a k parameter. The long tumble, short tumble and swim sizes for each parameter k are defined by the Eq. (2), Eq. (3) and Eq. (4), respectively: LT  X  j  X  X  ST  X  j  X  X  0 : 1 LT k  X  j  X  X  3  X  SW k  X  j  X  X  X  y k  X  j  X  strong y k  X  j  X  weak  X  Fac  X  j  X  X  4  X  where, max ( POF1 ) k , min ( POF 1) k are the maximum and the minimum values for the k parameter within the solutions of the POF 1( j ) set.
 5.7. Constraint handling In this work was added a simple strategy to handle constraints.
After calculate the constraint values for each bacterial location, a constant penalty is applied to those solutions that violate feasibility. The penalized objective functions are the unpenalized objective functions plus a penalty. For problems with multiple constraints, the final penalized objective functions values are the result of add the penalties corresponding to all constraint violations.

Fig. 1 illustrates the chemotactical behavior of the colony for a two objective optimization problem. The continuous curve represents the Pareto optimal front, solid spots represent strong bacteria and open spots represent weak bacteria, all of them before the chemotactical response. Gray spots represent all bacteria after one chemotactical step. The figure also represents the three types of steps in the chemotactical strategy: long tumble, short tumble and swim.

BCMOA can be summarized in the following steps: 1. Define the parameters S (number of bacteria), CHS max (a) Store all bacteria b i ( j ) and their current location y (b) Update the parameters LT ( j ) ,ST ( j ) and SW ( j ) according with 2. For each bacterium b i ( j ) in the list Bac , evaluate J ( y 3. Classify the location of all bacteria using nondomination 10. Stop the algorithm. 6. Experiments
NSPSO ( Li, 2003 ) algorithms for six benchmark optimization problems using three performance measures. NSGA-II is currently the most popular multiobjective genetic algorithm and NSPSO is a good application of PSO techniques in MO. Also, other five problems were used to demonstrate the effectiveness of BCMOA. All algorithms were implemented on Matlab 7.0.

SCH, FON, ZDT1, ZDT2, ZDT3, ZDT4 ( Deb et al., 2002 ) were used to compare the performance of the algorithms. Also, BCMOA was used to solve the unconstraint problems POL, KUR, as well as constraint problems such as CONSTR, SRN and TNK ( Deb et al., 2002 ). Table 1 shows the number of variables, the variable bounds and the objective functions for the unconstrained problems. Table 2 shows the details of the constrained problems. MOA requires the determination of some appropriate parameters.
Both, NSGA-II and NSPSO algorithms need proper tuning of its parameters. In this work, in order to avoid a biased comparison between the methods, the parameter values suggested by the authors were used. For BCMOA algorithm, the parameters used were carefully tuned by a process of several trials and errors to obtain the highly satisfactory results presented in this work. For all algorithms, the same number of evaluations of the objective functions was used thus, a balanced compari-son of the results obtained by the three algorithms can be made.

In this way, 10,000 and 25,000 objective function evaluations were conducted for each algorithm.

For NSGA-II, crossover probability 0.9, mutation probability of (1/ n ) where n is the number of parameters, as suggested in Deb et al. (2002) .
 For NSPSO, w 2=1, w 1=0.4, c 1= c 2=2.0, as suggested in Li (2003). For ZDT4 in BCMOA, r 1 k is a random number on [ 1,1].
The measures used to compare the performance of the algorithms are diversity metric, convergence metric ( Deb et al., 2002 ), and generational distance (GD) metric ( Li, 2003 ). Diversity metric measures the extent of spread achieved among the solutions obtained by the algorithms; convergence metric mea-sures the extent of convergence to a known optimal Pareto front and generational distance measures the closeness of the obtained optimal solutions to a set of solutions on the optimal Pareto front.
A detailed explanation of these metrics can be found in Deb et al. (2002) and Li (2003).

All algorithms were run 10 times. In order to compare the effectiveness of the diversity preservation technique, the BCMOA was run 10 times using this technique and other 10 times without the use of the diversity preservation technique. Tables 3 X 5 show the results summarized in terms of the mean (first row) and variance (second row) of the performance measures.
 Figs. 2 X 6 show the optimal solutions obtained by BCMOA for
SCH, POL, ZDT1, ZDT2 and ZDT3 problems. The continuous line represent the Pareto optimal front, solid spots represent de nondominated solutions found. Fig. 7 shows the results of the three algorithms optimizing the test function ZDT4.
 and BCMOA for POL and KUR problems.
 optimal solutions found using BCMOA for the constrained problems SRN, TNK and CONSTR.
 BCMOA, Figs. 13 and 14 show the progress of bacterial chemotactical movements trough the solution process of ZDT1 optimization problem. Fig. 13 shows the number of bacteria that implemented short tumble and long tumble on each iteration. Fig. 14 shows the number of colony members that applied swim. The curves presented in these figures represent the mean values after run the BCMOA 10 times to solve the ZDT1 problem. 7. Results
Figs. 2 X 12 show that for the 11 benchmark problems, the algorithm BCMOA find optimal solutions very close or even onto the true Pareto optimal front. It is important to note that for the
ZDT4 problem only the algorithm BCMOA found solutions close the Pareto optimal front, the NSGA-II and NSPSO algorithms got trapped in one of its 21 9 local Pareto optimal fronts, as shown in
Fig. 7 . These figures show that for BCMOA the distribution of optimal solutions on the POF is not uniform, exhibiting regions with higher density of optimal solutions, compensated with almost empty regions.

Table 3 shows that NSGA-II algorithm reached the best extent of spread among the optimal solutions found for SCH, FON, ZDT1, ZDT2 and ZDT3 problems. The application of the diversity preservation technique in BCMOA showed a positive effect on the distribution for the optimal solutions found, but even in this case, the performance of BCMOA in this metric was poorer than NSGA-II in all benchmark problems compared, except for ZDT4 for which BCMOA algorithm attained the best extent of spread. For all benchmark problems, NSPSO achieved the worse distribution of solutions on the set of optimal solutions found. The higher performance found using NSGA-II algorithm in this metric is probably due to the introduction of the crowding comparison procedure ( Deb et al., 2002 ), which is a technique for preserving the diversity, in the phases of tourna-ment selection and population reduction. On the other hand, for BCMOA and NSPSO, the techniques used to maintain the population diversity were introduced in only one step of each algorithm.

Table 4 shows that the use of the diversity preservation technique in BCMOA does not involve a loss in convergence for all cases. For SCH, FON, ZDT2 and ZDT4 problems, the convergence metric of BCMOA was better when the Diversity Preservation technique was applied, but opposed result was found for ZDT1 and ZDT3 problems. The two versions of BCMOA showed better convergence than NSGA-II and NSPSO for the complex problems of the ZDT series. This excellent convergence performance may be attributed to the efficient combination of exploration and exploitation to the search space achieved by BCMOA, as can be observed from Figs. 13 and 14 . At the beginning of the optimization process, most of bacteria are dominated or weak, so they swim. In later stages about half of the bacteria are dedicated to the exploration of the search space (swimming), simultaneously the other half are refining the search near the regions where there is a local optimum (tumbling). As the optimization process continues, an increasing number of bacteria take the long tumble step, developing a fine exploitation of the search space and in this way, guiding the search closer to the global Pareto optimal region.
 algorithm is better when the diversity preservation technique was applied for all problems except for ZDT1. Also, for the problems of the ZDT series, the best GD metric were obtained using the two versions of BCMOA, followed by NSPSO and the poorest perfor-mance was observed using NSGA-II. For the SCH and FON problems, NSGA-II showed the best performance of GD metric, followed by the version of BCMOA applying the diversity preservation technique and the simple version of BCMOA. Finally,
NSPSO showed the worst performance on the GD metric for those problems. As GD metric also measures the algorithm convergence, the performance of BCMOA in this metric can be attributed to the aforementioned mechanism of exploration X  X xploitation to the search space.
 disconnected optimal Pareto fronts, the optimal fronts found by
BCMOA and NSGA-II algorithms are very similar, making negli-gible the difference between them. Finally, Figs. 8 X 10 show that
BCMOA is capable to find solutions in the Pareto optimal regions for constrained problems even when the POF is discontinuous as in TNK problem, but its poor performance in the distribution of the optimal solutions found, denoting a lack of an efficient method of diversity preservation. 8. Conclusions and future work
It was presented a multiobjective optimization algorithm introducing a novel approach based on bacterial chemotaxis.
The results show that the performance of BCMOA is better compared to NSPSO, and also highly competitive compared to
NSGA-II regarding convergence and diversity. The BCMOA satis-factorily meets the goals of a multiobjective optimization algorithm because it is not only effective in finding solutions towards the POF but also because the diversity of the solutions found using this algorithm is good; in this way BCMOA is a reliable alternative in the field of bio-inspired multiobjective optimization algorithms.

The diversity preservation technique applied did not show conclusively its usefulness in solving benchmark problems with-out restrictions. In future work, other strategies to improve the spread of optimal solutions could be applied. It is also necessary to undertake an exhaustive attempt to define the best parameter setting for BCMOA and the sensitivity of the algorithm to those parameters.
 Acknowledgements The authors acknowledge financial support from the National University of Colombia (Universidad Nacional de Colombia) and the National Council of Technological and Scientific Development (Conselho Nacional de Desenvolvimento Cient X   X  fico e Tecnolo  X  gi-co  X  CNPq) for the development of this research.
 References
