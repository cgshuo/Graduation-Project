 Neural motor prostheses (NMPs) aim to restore lost motor function to people with intact cerebral motor areas who, through disease or injury, have lost the ability to control their limbs. Central to these devices is a method for decoding the firing activity of motor cortical neurons to produce a voluntary control signal. A number of groups have recently demonstrated the real-time neural control of 2D or 3D computer cursors or simple robotic limbs in monkeys [1, 13, 18, 20, 22] and humans [6]. Previous work on decoding motor cortical signals however has focused on modeling the relationship between neural firing rates and simple hand kinematics including hand direction, speed, position, velocity, or acceleration [2, 4, 8, 10].
 While the relationship between neural firing rates and hand kinematics is well established in able-bodied monkeys, the situation of a human NMP is quite different. For a paralyzed human, the NMP represents an artificial motor system with different physical properties than the intact human motor system. In particular, a human NMP may involve the control of devices as different as computer cursors or robotic wheelchairs. It remains an open question whether motor cortical neurons can successfully control such varied systems with dynamics that are quite different from human limbs. Here we propose a model that makes a first step toward neural control of novel artificial motor systems. We show that motor cortical firing rates can be nonlinearly related to the parameters of an idealized physical system. This provides an important proof-of-concept for human NMPs. Our model decodes the dynamics of hand movement directly from the neural activity. Ultimately, such a model should reflect the actuator being controlled. For a biological actuator this means the activation of individual muscles; for a robotic one, the forces and torques produced by the motors in the system. A model incorporating direct cortical control of dynamics has been proposed in [19]. There are two major distinctions between that work and ours. First, we consider the task of controlling an artificial system, rather than the subject X  X  real limb. Second, applying the model in [19] in practice would re-quire constructing a very complex biomechanical model and controlling its many degrees of freedom with a limited neural bandwidth. Here we propose a much simpler approach, that does not attempt to accurately model the musculoskeletal structure of the arm. Instead, it provides a computationally effective framework to model the dynamics of the limb moving in two dimensional plane. Our ap-proach is inspired by the recent work of Hinton and Nair [5], that suggested a generative model for images of handwritten digits. In that work, observed images were assumed to have been generated by a pen connected to a set of springs, the trajectory of the pen controlled by varying the stiffness of the springs according to a digit-specific  X  X otor program X . The goal was to infer the motor program from an observed image, in order to classify the digit. In the context of neural decoding, the image observation is replaced with the recorded neural signal, from which we need to recover the  X  X otor program X , and thus the intended movement. This is where the parallels between our work and [5] end. One particularly important difference is that the neural decoder may be learned in a supervised procedure, where the groud truth for the movement associated with a given neural signal is known. An advantage of this spring-based model (SBM) over previous kinematics-based decoding methods is that the realistic dynamics of the model produce smoother recovered movement. We show that the motions are more natural in that they better match the power spectrum of true hand movements. This suggests that the control of a physical system (even an artificial one) may prove more natural for a human NMP.
 The experimental setup we consider in this paper involves an electrode array, implanted in the arm/hand area of the MI cortex of a behaving monkey [17]. The animals are trained to control the cursor by moving the endpoint of a two-link manipulandum constrained to a plane, much like a human would use a computer mouse [11, 13]. Neural data and hand kinematics were recorded from two monkeys performing two different tasks. The data was separated into training and testing segments and we quantitatively compared a variety of popular linear and nonlinear algorithms for decoding hand kinematics and the spring coefficients of our SBM. As expected, nonlinear meth-ods tend to outperform linear ones. Moreover, movement reconstructed with the SBM has a power spectrum significantly closer to that of natural movement. These results suggest that the control of idealized physical systems with real-time nonlinear decoding algorithms may form the basis for a practical human NMP.
 Decoding neural activity in N cells involves estimating the values of a hidden state X ( t ) at time t given an observed sequence of firing rates Z (0) . . . Z ( t ) up to time t , with each Z ( i ) being a 1  X  N vector. The state here is typically taken to be either hand position, velocity, etc. Methods described in the literature can be roughly divided into two classes. Generative methods formulate the likelihood of the observed firing rates conditioned on the state and use Bayesian inference methods such as the Kalman filter [21] or particle filter [3] to estimate the system state from observations. In contrast, direct (or discriminative ) methods learn a function that maps firing rates over some preceding temporal window into hand kinematics. Various methods have been explored including linear regression [1, 13], support-vector regression [15] and neural network algorithms [12, 20]. All these previous methods have focused on direct decoding of kinematic properties of the hand movement and have ignored the arm dynamics . 2.1 Parametrization of dynamics Our approach to incorporating dynamics into the decoding process has been inspired by the follow-ing model of [5], sketched out in Figure 1. Without loss of generality, let the work area (that fully contains the movement range) be an axis-aligned square [  X  L, L ]  X  [  X  L, L ] . The endpoint of the limb (wrist) is assumed to be connected to one end of four imaginary springs, the other end of which is sliding with no friction along rails forming the boundaries of the  X  X ork area X . Thus, at every time instance each spring is parallel to one of the axes. The analysis of dynamics therefore can be easily decomposed to x and y components. Below we focus on the x component.
 All four springs are assumed to have rest length of zero. Suppose that the position of the wrist at time t is [ x ( t ) , y ( t )] . Then the springs A and B apply forces determined by Hooke X  X  law, namely, k and B at time t . To reflect physical constraints on movement in the real world, the model presumes a point mass m in the center of the wrist (i.e. at the cursor location). Furthermore, it is assumed that the movement is damped by a viscous force proportional to the instantaneous velocity,  X   X v x ( t ) . The viscosity is meant to represent both the medium resistance and the elasticity of the muscles. In summary, according to Newton X  X  second law the acceleration of the hand at time t is given by where v x ( t ) is the instantaneous velocity of the wrist at time t along the x axis. Control of movement in this model is realized through varying the stiffness coefficients of the springs: given the current position of the wrist x , the desired acceleration a is achieved by set-ting k A ( t ) and k B ( t ) so as to solve (1). This solution is not unique, in general. We note, however, that the physiological meaning of the k  X  X  requires them to be non-negative, since the muscles can not  X  X ush X . This motivates us to introduce the total stiffness constraint where  X  is a constant chosen so that no feasible acceleration would yield negative k A or k B . We can now recover the underlying parameters K = [ k A , k B , k C , k D ] for the observed movement and accelerations  X  a x ( t ) =  X  v x ( t + 1)  X   X  v x ( t ) . Then, we substitute (2) into (1), yielding The value of k B ( t ) is then uniquely determined from (2). Repeating these calculations for the y -axis produces the coefficients for springs C and D . 2.2 Decoding neural activity We now turn to our main goal: inferring the desired movement from a recorded neural signal. We treat this as a supervised learning task. In the training stage, we take a data set in which we have both the recorded neural signal Z ( t ) and the observed trajectory of hand positions X ( t ) associated with that signal. From this, we can learn a mapping g from the neural signal to the desired repre-sentation of movement. For direct kinematic decoding this means inference g : Z ( t )  X  X ( t ) . For decoding with the SBM, this means inference of spring coefficients in the SBM, g : Z ( t )  X  K ( t ) , followed by the calculation K ( t )  X  X ( t ) as described above. The SBM formulation also requires a preprocessing step for the training data: we need to convert the observed position trajectory X to the trajectory through K , acording to (3).
 We have focused on two ways of constructing g , described below.
 Linear filter. The linear filter (LF) approach [13] consists of modeling the mapping from firing rate to movement by a linear transformation W that is applied on a concatenated firing rate vector for a fixed history depth l : where x 0 is a constant (bias) term and The dimension of  X  Z ( t ) for a recording from N channels, is 1  X  lN . The transformation W is fit to the training data by solving the least squares problem, and then used at the decoding stage to predict values of X . Application of the LF to the SBM is straightforward: the target of the mapping is in the space of coefficients K , rather than position X .
 Support vector regression. Support Vector Machines (SVM) are a widely popular learning archi-tecture that relies on two key ideas: mapping the data into a (possibly infinite-dimensional) feature space using a kernel function, and optimizing the bound on generalization error. In the context of regression [16] this means using an -insensitive loss function, that does not penalize training errors up to , to fit a linear function in the feature space. SVMs also aim at reducing model complexity by penalizing the objective for the norm of the resulting function. The solution is finally expressed in terms of kernel functions involving a subset of the training examples (the support vectors ). The key parameters that affect the performance of SVMs are the value of , the tradeoff c that governs the penalty of training error, and parameters of the kernel function.
 SVMs have been widely successful in many applications of machine learning. However, their appli-cation to the task of neural decoding has been limited to the directional center-out task [15]. Here we evaluate SV regression as a method for decoding more general 2D movement. Again, the SVM formulation is readily extended to the SBM (with the target functions being components of K ). Alternative decoders. A variety of other decoding approaches has been proposed in the literature. We conducted experiments with three additional algorithms: Kalman filter [21], Multilayer Percep-trons [20] and Echo-state Networks, a recurrent neural network architecture [7]. The Kalman filter uses a linear model of the mapping of neural signals to movement, while the models underlying the other two methods are nonlinear. Our findings can be summarized as follows, for both kinematic decoding and decoding with the spring-based model. First, nonlinear methods perform significantly better than linear ones. Second, there was a trend for the Kalman filter to perform better than the linear filter. Third, among nonlinear methods SVM tended to perform better than the two neural net-work architectures. However, these latter differences could not be established with significance. In the following section, we focus on experiments with the linear filter (the de-facto standard decoding method today) and SVM, which achieved the overall best results in our experiments. We evaluated the performance of the proposed approach on data sets obtained from two behaving monkeys ( Macaca Mulatta ). The neural signal was obtained with a Cyberkinetics microelectrode array [9] (96 electrodes) implanted in the arm/hand area of MI cortex. The experimental animals performed the tasks described below.
 Sequential reaching movement , described in [13] Reach targets and a hand position feedback cursor were presented on a video screen in front of the monkey. When a reach target was presented Table 1: Details of experiments. Units: number of distinct units identified after spike sorting. Train, test: length of train and test sequences in seconds.
 the animal X  X  task was to move a manipulandum so that the feedback cursor moved into the target and remained in the target for 500ms, at which time that target was extinguished and a new reach target was presented in a different location. Target locations were drawn i.i.d. from the uniform distribution over the screen surface. This was repeated for up to 10 targets per trial. Upon successful completion of a trial the animal received a juice reward. Hand kinematics and neural activity were simultaneously recorded while the animal performed the task.
 Continuous tracking , described in [14] Monkey was viewing a computer screen on which a visual target appeared in a random, but smooth, sequence of locations. The monkey was trained to follow the target X  X  position with a cursor, using a manipulandum, and received a reward for each successful trial (i.e. when the cursor remained within the target for a duration drawn for each target randomly between 3 and 10 seconds).
 The recorded neural activity was converted to spike trains by computer-assisted spike-sorting soft-ware, and the spike counts were calculated in non-overlapping 70ms windows. The hand kinematics (obtained by recording the 2D position of the manipulandum) were averaged within each window, to produce an aligned representation. 3.1 Evaluation protocol In each of the data sets, we selected a segment of the recording to train all the decoders, and a subsequent segment to test the decoding accuracy. Tuning of parameters (the kernel parameters of the SVM or the mass and viscosity of the spring model) was done on a held-out portion of the training segment. We built the firing rate history matrix by concatenating for each time step the firing rates for 15 bins. For instance, for monkey CL, continuous tracking, the dimension of the neural signal representation was 825 (55 channels  X  15 history bins). This firing rates were then normalized so that all values would be within [-1,1]. Basic statistics of the data used in the experiments are given in Table 1.
 We considered three evaluation criteria: Correlation coefficients (CC): between the estimated and true value for each of the two spatial Mean absolute error (MAE): in the estimated position versus the ground truth: MAE = Power spectrum reconstruction : One of the objectives of a practical decoding algorithm, espe-3.2 Results The reported results for SVM were obtained with quadratic kernel, k ( x , y ) = ( x  X  y +1) 2 ; the trade-off term c was fixed to 100, and the insensitivity parameter was set to 5 for the spring coefficient and 2 for direct position decoding. The number of support vectors was between 20% and 65% of the training set size.
 Table 2: Summary of results on the three datasets. MAE is given in cm, over workspace of roughly 30  X  30 cm.
 Table 2 summarizes the MAE and CC measured on the test segment for each method. One obser-vation is that SVM tends to outperform the linear filter, in line with previous observations [12, 15]. We believe that this is due to inherent nonlinearity in the underlying relationship, which is better captured by the SVM. Moreover, it is apparent that the decoding accuracy of the SBM is on par with that of the conventional kinematic decoding (the observed differences were not significant at the 0.05 level, measured over the per-bin position errors). Figure 3: A 1.5 second path segment, true (circles) and reconstructed (squares). Left: SVM on kinematics, right: SVM with SBM. Markers show position averaged in each 70ms bin. Note the ragged form of the SVM-kinematics trajectory.
 Results in Table 2, however, tell only a part of the story. Figure 3 shows, for a segment of 4.2 sec, a typical example of the movement reconstructed with SVM on kinematics versus SVM on spring coefficients. The accuracy in terms of deviation from ground truth is similar, however the estimate produced by the direct kinematic decoding is significantly more  X  X agged X . Such discrepancy is not necessarily reflected in the standard measures of accuracy such as CC or MAE. Quantitavely, this can be assessed by calculating the L 1 norm between the power spectrum densities of the true and reconstructed hand trajectories. The estmated values of this quantity in our experiments are shown in Table 3. These results reflect the relationship shown in Figure 2 (a typical case). Table 3: Estimated L 1 norm between power spectrum density of true and reconstructed trajectories. The spring-based model proposed in this paper represents a first attempt to directly incorporate realistic physical constraints into a neural decoding model. Our experiments illustrate that the co-efficients of an idealized physical system can be decoded from motor cortical firing rates, without sttistically significant loss of decoding accuracy compared to more standard direct decoding of kine-matics. An advantage of such an approach is that the physical properties of the system damp high frequency motions resulting in decoded movements that inherently have the properties of natural movement, with no ad-hoc smoothing.
 Future work should consider more sophisticated physical models such as a simulated robotic arm and a biophysically motivated musculoskeletal system. With the current state of the art in neural recording and decoding, recovering the parameters of such models may be challenging. In contrast, the approach presented here  X  X ummarizes X  the effect of a more complicated system with just a few idealized muscle-like elements.
 Additional experiments are also warranted. In particular using a robotic feedback device we can simulate the physical system of springs presented here such that the monkeys control a device with the properties of our model. We hypothesize that the accuracy of decoding spring coefficients from motor cortical activity in this condition will improve. This would suggest that matching the decoding model to the physical system being controlled will improve decoding accuracy.
 Finally, the real test of physically-based models will come in human NMP experiments. We plan to test human cursor control with kinematic and physically-based decoders. We hypothesize that the dynamics of the physically-based model will make it easier to control accurately (and perhaps provide a more satisfying experience for the user). This could be a first step toward the neural control of mechanical actuators in the physical world.
 This work is partially supported by NIH-NINDS R01 NS 50867-01 as part of the NSF/NIH Col-laborative Research in Computational Neuroscience Program and by the Office of Naval Research (award N0014-04-1-082). We also thank the European Neurobotics Program FP6-IST-001917. We thank Matthew Fellows and John Donoghue for providing data, and Reza Shadmehr for helpful conversations.
 [1] J. M. Carmena, M. A. Lebedev, R. E. Crist, J. E. O X  X oherty, D. M. Santucci, D. F. Dimitrov, [2] D. Flament and J. Hore. Relations of motor cortex neural discharge to kinematics of passive [3] Y. Gao, M. J. Black, E. Bienenstock, S. Shoham, and J. P. Donoghue. Probabilistic infer-[4] A. Georgopoulos, A. Schwartz, and R. Kettner. Neural population coding of movement direc-[5] G. E. Hinton and V. Nair. Inferring motor programs from images of handwritten digits. In [6] L. R. Hochberg, J. A. Mukand, G. I. Polykoff, G. M. Friehs, and J. P. Donoghue. Braingate [7] H. Jaeger. The  X  X cho state X  approach to analyzing and training recurrent neural networks. [8] R. Kettner, A. Schwartz, and A. Georgopoulos. Primary motor cortex and free arm movements [9] E. Maynard, C. Nordhausen, and R. Normann. The Utah intracortical electrode array: A [10] D. Moran and A. Schwartz. Motor cortical representation of speed and direction during reach-[11] L. Paninski, M. Fellows, N. Hatsopoulos, and J. P. Donoghue. Spatiotemporal tuning of motor [12] Y. N. Rao, S.-P. Kim, J. Sanchez, D. Erdogmus, J. Principe, J. Carmena, M. Lebedev, and [13] M. D. Serruya, N. G. Hatsopoulos, L. Paninski, M. R. Fellows, and J. P. Donoghue. Brain-[14] S. Shoham, L. M. Paninsky, M. R. Fellows, N. G. Hatsopoulos, J.P. Donoghue, and R. A. [15] L. Shpigelman, K. Crammerr, R. Paz, E. Vaadia, and Y. Singer. A temporal kernel-based [16] A. J. Smola and B. Sch  X  olkopf. A tutorial on support vector regression. Statistics and Comput-[17] S. Suner, M. R. Fellows, C. Vargas-Irwin, G. K. Nakata, and J. P. Donoghue. Reliability [18] D. Taylor, S. Helms Tillery, and A. Schwartz. Direct cortical control of 3D neuroprosthetic [19] E. Todorov. Direct cortical control of muscle activation in voluntary arm movements: a model. [20] J. Wessberg, C. Stambaugh, J. Kralik, Laubach M. Beck, P., J. Chapin, J. Kim, S. Biggs, [21] W. Wu, Y. Gao, E. Bienenstock, J. P. Donoghue, and M. J Black. Bayesian population decoding [22] W. Wu, A. Shaikhouni, J. P. Donoghue, and M. J. Black. Closed-loop neural control of cursor
