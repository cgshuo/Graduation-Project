 1. Introduction
The control flow of a business process can often be modeled as a workflow graph [1]. Workflow graphs capture the core of many business process languages such as UML activity diagrams, BPMN and EPCs. We study the problem of parsing a work-shown as a parse tree , see Fig. 1 c.

The parsing problem occurs when we want to translate a graph-based process description (e.g. a BPMN diagram) into a ple, Vanhatalo, V X lzer and Leymann [2] show how parsing speeds up control-flow analysis. K X ster et al. [3] show how dif-ferences between two process models can be detected and resolved based on decompositions of these process models. in understanding large processes and in finding reusable subprocesses.
For a roundtripping between a BPMN diagram and a BPEL process, it is desirable that the decomposition be unique, i.e., the same BPMN diagram always translates to the same BPEL process. Consider, for example, the workflow graph in Fig. 1 a. Fig. 1 a and b, depending on whether the if-block or the repeat-until-block is found first by the parsing algorithm. tripping between a BPMN diagram and a BPEL process, it would be much more desirable that a local change in the BPMN proach to the BPMN to BPEL translation problem [5] is not modular. Furthermore, it does not provide, because of the above problems, a specification of the translation that is independent of the actual translation algorithm.
A unique and modular decomposition is provided by the program structure tree defined by Johnson et al. [8,9] for sequen-tial programs. It was applied to workflow graphs by Vanhatalo et al. [2] to find control-flow errors. The corresponding a block is a connected subgraph with a single entry and a single exit edge. But in contrast to the approach of Ouyang Sequence 3 in subfigure (b)] is non-maximal: it is in sequence with another block.
 an error is local to a small block rather than to a large one.

In this paper, we provide a new decomposition that is finer than the program structure tree as defined by Johnson et al. block is a connected subgraph with unique entry and exit nodes (as opposed to edges in the previous approach). Accord-modular. directed graph representations.
 of fragment, unless we are willing to make some choice between fragments that cannot be included in a same parse tree.
Later we argue that such a choice would be somewhat arbitrary, not dependent on the structural information we would like to detect.

We prove that this new characterization is equivalent with our previous constructive characterization [11], which serves as a basis for computing the decomposition in linear time. The computation is based on the triconnected components of a biconnected graph, which can also be computed in linear time, for example by using an algorithm by Hopcroft and Tarjan [12].
 The paper is structured as follows. In Section 2, we define the RPST through our simple independent characterization. In
Section 3, we present our constructive characterization for the RPST. In Section 4, we prove some properties of the RPST including its modularity. In Section 5, we describe how to compute the RPST in linear time. Proofs can be found in the appendix. 2. The refined process structure tree our particular selection of fragments that we call the objective fragments . 2.1. Fragments
We start by recalling some basic notions of graph theory. A multi-graph is a graph in which two nodes may be connected to u and v , and nodes u and v are adjacent .
 examples of (a) a two-terminal graph G , and (b) its undirected version U  X  G  X  , where r is the return edge. For a subset F of edges, let V F denote the set of nodes that are incident to some edge in F and let G with nodes V F and edges F . We say that G F is formed by F .
 Definition 1 ( Boundary node, entry, exit, fragment ). Let G be a TTG and F a subset of its edges such that G subgraph of G . incident to e and e 0 . 2. A boundary node v is an entry of F if no incoming edge of v is in F or if all outgoing edges of v are in F . 3. A boundary node v is an exit of F if all incoming edges of v are in F or if no outgoing edge of v is in F . ments with entry u and exit v .
 self-loops, any set F of edges containing only one edge is a fragment.

Fig. 4 shows examples of fragments. A fragment is indicated as a dotted box. It contains all those edges that either are fragment.

Note that it can be checked locally whether a boundary node is an entry or an exit. This notion of fragment was proposed 2.2. Objective fragments and the refined process structure tree We want to find a decomposition of a workflow graph into fragments. Formally such a decomposition (or a parse ) of a TTG also a decomposition.

Fig. 5 shows a TTG and (a) X (b) its two maximal decompositions and (c) a non-maximal decomposition. Fig. 6 shows an-position. As there is no reasonable argument to favor N 1 over N 2, or vice versa, that would break the symmetry between them, we exclude both fragments. Hence, we obtain the non-maximal decomposition shown in Figs. 5c and 6 c, respectively.
These decompositions are obtained in general by excluding all those fragments that overlap with some fragment. A fragment ment. The set of objective fragments is clearly a decomposition which is uniquely determined. This is how we define the refined process structure tree .

Definition 2 ( Refined process structure tree (RPST) ). Let G  X  X  V ; E ; M  X  be a TTG. 1. A fragment of G is objective if it does not overlap with any other fragment of G . 2. The set of all objective fragments of G is called the RPST decomposition of G . fragments such that the parent tree node of an objective fragment F is the smallest objective fragment that properly con-tains F .
 fragments. Each non-objective fragment occurs in some maximal decomposition, but not in all.
Fig. 7 shows (a) a TTG G and its objective fragments, and (b) its RPST. The root of the RPST is the largest fragment that ( parent , for short) of a fragment F 0 in the RPST, we say F
Note that each trivial fragment is also an objective fragment. As there is a one-to-one correspondence between edges and leaf node of the RPST, whereas each non-trivial fragment is a non-leaf node. 3. An equivalent characterization of the RPST This characterization is based on the relationship of fragments and triconnected components that we prove in Section 3.1. ization of objective fragments in Section 3.3. 3.1. Triconnected components
Tarjan and Valdes [10] have shown that the fragments of a TTG are closely related to the triconnected components of its undirected version. We have to introduce a few more notions from graph theory.

Let G be an undirected graph. The following notions are also used for directed graphs by ignoring the direction of their edges. Let W be a subset of nodes of G .A path from v 0 to v and edges of G , such that e i is incident to v i 1 and v for every set W of k 1 nodes, any two nodes u ; v R W are connected without W . We say connected for 1-connected, bicon-dinary edge.

We say that a graph is weakly biconnected if it is biconnected or if it contains exactly two nodes and at least two edges between these two nodes. For instance, in Fig. 8 a, B 1 is weakly biconnected, but not biconnected.
Throughout the paper, we assume that U  X  G  X  is weakly biconnected. This can easily be achieved by splitting each separa-tion point into two nodes, where the only outgoing edge of the first node is the only incoming edge of the second node. pairs. The pair f v 5 ; v 7 g is also a separation pair, but f v 6 ; v 7 g is not.

Each weakly biconnected graph can be uniquely decomposed into a set of graphs, called its triconnected components [12], edges as nodes such that there is a cycle that contains all its nodes and all its edges. edge occurs in exactly two components, whereas each original edge occurs in exactly one component. For example, the vir-Therefore, we obtain the original graph by merging the triconnected components at the virtual edges (which removes them).
The triconnected components can be arranged in a tree, cf. Fig. 8 b, where two components are connected if they share a original graph, namely all the leafs of the subtree that C corresponds to. For example, component T 1 determines the set Fig. 8 c shows the component subgraphs of G . Note that the component subgraphs B 1, P 1 and T 1 are fragments, whereas B 2, P 2 and T 2 are not. There are also fragments that are not component subgraphs, for instance, f j ; k ; l ; m g . The precise definition of the triconnected components [13,14,12] is rather lengthy and is therefore presented in Appendix
A.1. Instead we present here the exact relationship between the triconnected components and fragments we are going to ponents are closely related to boundary pairs.

Theorem 1. A set f u ; v g of two nodes is a boundary pair of U  X  G  X  if and only if 1. nodes u and v are adjacent in U  X  G  X  , 2. a triconnected component of U  X  G  X  contains a virtual edge between u and v, or 3. a triconnected component of U  X  G  X  is a polygon and contains u and v.
 Proof. Presented in Appendix A.2 . h
Theorem 2. and v is an exit of F, then F 2 F  X  u ; v  X  .
 Proof. Presented in Appendix A.2 . h P 2 and f m g is a fragment, whereas P 2 [f n g and f m g[f n g are not. P 2 [f m g[f n g is a fragment.
Theorem 1 says that the boundary pairs can be obtained from the triconnected components while Theorem 2 says that the fragments can be obtained from the boundary pairs. 3.2. Sequences and bond fragments We define various types of fragments on which we base our constructive characterization of the objective fragments in Section 3.3.

Fig. 9 shows examples of fragments N 1 and N 2 that each overlap with some other fragment. As we discussed in Section quences from the other sequences, such as P in Fig. 5 , based on the following definition.
Definition 3 ( Maximal sequence ). 1. If F 0 2 F  X  v 0 ; v 1  X  and F 1 2 F  X  v 1 ; v 2  X  such that F and F 0 are in sequence) and that F is a sequence . 2. F is a maximal sequence if there is no fragment F 2 such that F and F a maximal sequence. We observe that each non-maximal sequence overlaps with some other non-maximal sequence, and is therefore non-objective. We also note that each maximal sequence does not overlap with any other sequence. The proofs for these observations are included in the proof of Theorem 7 presented in Section 3.3.

Fig. 9 b and c show examples of non-objective fragments N 1 and N 2, for which it is less straightforward to distinguish them from the objective fragments than for the non-maximal sequences. In order to distinguish these non-objective frag-ments from the objective ones, we first define various types of bond fragments as follows. fragment X 2 F  X  u ; v  X  is 1. a bond fragment if it is the union of at least two branches from D  X  u ; v  X [ U  X  u ; v  X [ D  X  v ; u  X  . 2. a directed bond fragment if it is the union of at least two branches from D  X  u ; v  X [ U  X  u ; v  X  . 3. a semi-pure bond fragment if it is the union of at least two branches from D  X  u ; v  X [ U  X  u ; v  X  , and 4. a pure bond fragment if it is the union of at least two branches from D  X  u ; v  X  .
Note that the various bond-fragment types form a hierarchy, i.e., each pure bond fragment is a semi-pure bond fragment, each semi-pure bond fragment is a directed bond fragment, and each directed bond fragment is a bond fragment. Fig. 10 shows examples of various classes of bond fragments that do not belong to a lower class. We say that a bond fragment is proper if does not belong to a lower class. For instance, a proper semi-pure bond fragment is not a pure bond fragment. Based on these various types of bond fragments, we define the maximal and the canonical bond fragments as follows.
Definition 5 ( Maximal bond fragment, canonical bond fragment ). 1. A bond fragment F 2 F  X  u ; v  X  is maximal if there is no bond fragment F (semi-pure) [pure] bond fragment F 2 F  X  u ; v  X  is maximal if there is no directed (semi-pure) [pure] bond fragment
F 0 2 F  X  u ; v  X  that properly contains F . 2. A bond fragment F 2 F  X  u ; v  X  is canonical if are objective, whereas the non-canonical bond fragments are non-objective.

In the following, we prepare for this by studying how the bond fragments that share a common boundary pair are related to each other. Bond fragments are closed under composition.
 (semi-pure) [pure] bond fragments, so is F.
 Proof. Presented in Appendix A.3 . h
Proposition 3 assures that a maximal bond fragment, maximal directed, maximal semi-pure, or maximal pure bond frag-ment is unique if it exists.

In the rest of this section, we show that any two bond fragments that share a common boundary pair do not overlap if at between two boundary nodes is a fragment or not. Examples of these two cases are shown in Fig. 11 . ment from u to v .
 maximal directed, and maximal bond fragment from v to u .

Next, we observe that a proper semi-pure bond fragment and a proper directed bond fragment are unique with respect to their boundary pairs if they exist.

Proposition 4. Let G be a TTG such that its undirected version is weakly biconnected. 1. If F ; F 0 2 F  X  u ; v  X  are proper semi-pure bond fragments of G, then F  X  F 2. If F ; F 0 2 F  X  u ; v  X  are proper directed bond fragments of G, then F  X  F Proof. Presented in Appendix A.3 . h
We can show now that a canonical bond fragment does not overlap with any other (canonical or non-canonical) bond fragment that shares the same boundary nodes.

Proposition 5. Let G be a TTG such that its undirected version is weakly biconnected. 1. Let X ; Y 2 F  X  u ; v  X  be bond fragments of G, and X be canonical. Then X # Y, or Y # X.
Proof. Presented in Appendix A.3 . h 3.3. The Constructive characterization: the canonical fragments that the objective fragments and the canonical fragments coincide.
 a sequence nor a bond fragment.
 ment, and B 1 2 F  X  v 5 ; v 7  X  is a maximal bond fragment. T 1 is neither a sequence nor a bond fragment. ization of the non-canonical fragments.

Proposition 6. Let G be a TTG, F 2 F  X  u ; v  X  be a fragment of G. F is a non-canonical fragment if and only if either 1. F is a non-maximal sequence, 2. F is a non-maximal pure bond fragment, 3. F is a non-maximal proper bond fragment, or 4. F is a maximal pure bond fragment and F is properly contained in a bond fragment F Proof. Presented in Appendix A.3 . h maximal pure bond fragments. The fragments N 1 and N 2in Fig. 9 c are non-maximal proper bond fragments. The fragment f a ; d g in Fig. 9 c is a maximal pure bond fragment that is properly contained in a bond fragment f a ; b ; c ; d g . Finally, we show that the objective fragments and canonical fragments coincide.
 Theorem 7. Let F be a fragment of a TTG. F is canonical if and only if F is objective.
Proof. Presented in Appendix A.3 . h 4. Properties of the RPST
Secondly, we prove in Section 4.2 that the RPST is modular. 4.1. Computing all fragments from the canonical fragments The following proposition indicates how to derive all fragments (also the non-canonical) from the canonical fragments. This is useful for example if one wants to find the smallest fragment that contains some given set of graph elements.
Proposition 8. Let F be a set of edges in a TTG. F is a fragment if and only if F is a canonical fragment or F is 1. a union of consecutive child fragments of a maximal sequence, 2. a union of child fragments of a maximal pure bond fragment, or 3. a union of child fragments of a maximal bond fragment B such that B is not a maximal directed bond fragment. Proof. Presented in Appendix A.4 . h
To define consecutive child fragments of a sequence, the child fragments of a sequence are ordered left to right from the boundary node.
 not fragments, because their boundary nodes are neither entries nor exits. 4.2. Modularity Finally, we state what we mean by saying that our decomposition is modular.

Theorem 9. Let G be a TTG and X 2 F  X  u ; v  X  be a canonical fragment of G. Let G that is formed by X by some other subgraph formed by a set of (fresh) edges X fragment of A in G. Let A 0  X  X  A n X  X [ X 0 and F 0  X  F. Then A
G .
 Proof. Presented in Appendix A.4 . h is also true for all canonical fragments above the parent and all canonical fragments below the siblings of X . 5. Computing the RPST
In this section, we describe an algorithm that computes the RPST in linear time. We have extended the algorithm by Val-components is computed, using e.g. the linear time algorithm by Hopcroft and Tarjan [12]. Gutwenger and Mutzel [14] pres-ent some corrections to this algorithm. We illustrate the computed triconnected components through the respective com-ponent subgraphs in Fig. 13 .

In Step 2, we analyze each triconnected component to determine whether the respective component subgraph is a frag-ment. This can be done in linear time with the following approach that takes advantage of the hierarchy of fragments. We nected component c , we check whether it is incoming to or outgoing from one of the two boundary nodes of c . We count mine whether the respective component subgraph is a fragment. Note that when a triconnected component shares a bound-found in Step 2, whereas the fragment S 1 is not.
Algorithm 1. Computes the RPST for a two-terminal graph buildRPST(Graph G )
Require: G is a weakly biconnected TTG.
In Step 3, we create the missing canonical fragments, and merge each component subgraph that is not a fragment to the ments are created only in those cases where a bond or a polygon contains canonical fragments that are not component sub-in the following.

We process the tree of the triconnected components bottom-up as in Step 2. Thus, in Fig. 13 , we can begin with T 2. It T 1.

The bond B 2 is not a fragment, so it will be merged. B 2 contains no new canonical fragments, because it has only two branch, and we classify them to find out whether they form new canonical bond fragments. f m g is a directed branch from v 5to v 7, P 2 is an undirected branch that has no outgoing edges from v 7, and f n g is a directed branch from v 7 to v 5. Note that the branches can be classified based on the counts of edges incident to each boundary node of a branch computed in Step 2. There is a new semi-pure bond fragment S 1  X f m g[ P 2. B 2 and P 2 are merged to S 1. S 1 and f n g become the children of the restructured B 1. Finally, P 1 and all its children are fragments, thus there is no need to restructure P 1.
 In the following examples we show polygons and bonds in which more restructuring is required. In Fig. 14 a, B 1 and
P 1 are not fragments. However, polygon P 1 has two consecutive child fragments f d g and f e g that form a maximal se-quence P  X f d g[f e g . To determine whether a polygon contains such a new maximal sequence, we compute the num-ber of entries and exits of its children already at the end of Step 2. A polygon that is not a fragment contains a maximal sequence as a union of its children if and only if its children together have at least three entries or at least three exits in total.
 new maximal directed bond fragment. D and the remaining two directed branches are the children of B . B 1 and P 1 are merged to D , and B 2 and P 2to S . P is a maximal sequence.
 new fragment M . B 1 and P 1 are also merged to M . The fragment P has only three children. conclude:
Theorem 10. The RPST of a TTG G can be computed in time linear in the number of edges of G. 6. Conclusion
We have presented a modular technique of workflow graph parsing to obtain fine-grained fragments with a single entry and single exit node. The result of the parsing process, the refined process structure tree, is obtained in linear time. We have mentioned a couple of use cases in Section 1. Coarser-grained decompositions may be desirable for some use cases. Those can easily be derived from the refined process structure tree by flattening. One such coarser decom-position, which can be derived and which is also modular, is the decomposition into fragments with a single entry edge and a single exit edge presented by Vanhatalo, V X lzer and Leymann [2]. The new, refined decomposition presented here allows us to translate more BPMN diagrams to BPEL in a structured way. As an example, consider the workflow graph in Fig. 15 and (a) its decomposition with the existing techniques [5,2] and (b) with our new technique. In Fig. 15 a, X cannot be represented as a single BPEL block, whereas in Fig. 15 b each fragment can be represented as a single BPEL block.

The main idea of our technique to use the tree of triconnected components (elsewhere also known as the SPQR tree) is taken from Tarjan and Valdes [10,15] . They describe an algorithm that produces a unique parse tree. However, they do not that are not identified by them are P in (a), D , S and R in (b), and S , R 1 and R 2 in (c).
We have made some simplifying assumptions about workflow graphs. The assumption that we have unique source and sink nodes can be lifted. One way to achieve this is to complete such a workflow graph into a TTG with an automatic tech-nique presented by Vanhatalo et al. [16]. Also the assumptions that the undirected version of the workflow graph is weakly biconnected and does not contain self-loops can be lifted. This can be achieved by splitting some nodes into two nodes as we discuss in Section 3.1. The above techniques to lift these assumptions require some changes to the ori-[13]. Thus, the only remaining assumption on workflow graphs is that each node is on a path from some source to some sink.

Note that we cannot obtain any finer decomposition than the RPST that is based on the same definition of fragment, un-less we are willing to make some choice between two non-objective fragments.

The RPST is implemented as a part of the IBM WebSphere Business Modeler version 6.2 and IBM WebSphere Process Ser-grams and BPEL process graphs by dedicated transformations. This intermediate representation of workflow graphs allows us to easily apply our technique to business process models represented in different languages.
Our RPST data structure represents the canonical fragments explicitly, and the non-canonical fragment implicitly as the associated with its unique parent fragment, and each node with its parent fragments.

The RPST is used to speed up control-flow analysis of workflow graphs using the divide-and-conquer approach presented et al. [16].

However, we did not implemented the RPST specifically for one of these use cases. Instead, we see the RPST as a funda-parse trees and known from compiler theory, such as data-flow analysis and code optimization, seem to be relevant in the context of business process management.
 Acknowledgement
The work published in this article was partially supported by the SUPER project (http://www.ip-super.org/ ) under the EU 6th Framework Programme Information Society Technologies Objective (Contract No. FP6-026850). Appendix A. Appendix  X  Proofs
This appendix includes the definitions and the proofs that we exclude from the previous sections in order to enhance ments coincide. In Section A.4, we prove the properties of the RPST.
 A.1. The triconnected components
In this section, we give a precise definition of triconnected components based on which we can prove the relationship be-tween the fragments and the triconnected components. We define triconnected components through split graphs , split com-ponents , and merge graphs , and follow the presentation of Hopcroft and Tarjan [12] and Gutwenger and Mutzel [14]. (ii) there are exactly three separation classes of G w.r.t f u ; v g , and each has exactly one edge. boundary pairs f s ; u g , f s ; t g , and f v ; t g are not split pairs.
 sume E 1 is the union of some separation classes in S  X  u ; v  X  and E Two graphs G E 1  X  V E 1 ; E 1 [f e g ; M E 1 and G E 2  X  X  V virtual edge .
 For example, Fig. 17 a shows the split graphs G E 1 and G whereas the other edges of these split graphs are also edges of U  X  G  X  . Replacing a graph G with its split graphs G graphs in order to obtain the original graph. Each split graph is a weakly biconnected multi-graph [12]. example, in Fig. 17 a G E 1 cannot be further split, its split graphs G G 22 are the split components of U  X  G  X  . Hopcroft and Tarjan [12] prove that each split component of a weakly biconnected follows.
 incident to both u and v .A double (triple) bond is a bond that contains exactly two (three) edges. In Fig. 17 c, G bond. Note that a split component G 0 of G is a double bond if and only if G  X  G G is a polygon, but not a triangle, whereas G E 1 is a triangle. G
Hopcroft and Tarjan [12] prove the following observations on split components. Each edge of G is contained in exactly one split components of a graph G are not necessarily unique. However, unique triconnected components can be obtained from split graphs by merging some of these split graphs as follows.

Assume G E 1  X  X  V E 1 ; E 1 ; M E 1  X  and G E 2  X  X  V E 2 ; E taining the same virtual edge e . The graph G 0  X  X  V 0 ; E
E  X  E 0 [ E 00 nf e g , and M 0 maps each edge in E 0 to the same pair of nodes as M merge graph of the split components G E 1 , G E 21 . Replacing distinct split components G merging G E 1 and G E 2 .

Triconnected components of G are obtained from split components of G by merging any two bonds (polygons) that contain the same virtual edge, and replacing these bonds (polygons) with the obtained bond (polygon) until no more merging is possible. For example, G E 3 and G E 22 Fig. 16 b.

Hopcroft and Tarjan [12] prove the following observations on the triconnected components of a weakly biconnected graph. Each triconnected component of G is either a bond, polygon, or triconnected graph. Each edge of G is contained in exactly one triconnected component of G , and each virtual edge of a triconnected component of G is contained in exactly two triconnected components of G . The triconnected components of G are unique.
 A.2. Proofs  X  The relationship between the fragments and the triconnected components
In this section, we prove the relationship between the fragments and the triconnected components through Theorems 1 mapping e # f u ; v g
Theorem 1. A set f u ; v g of two nodes is a boundary pair of U  X  G  X  if and only if 1. nodes u and v are adjacent in U  X  G  X  , 2. a triconnected component of U  X  G  X  contains a virtual edge e # f u ; v g ,or 3. a triconnected component of U  X  G  X  is a polygon and contains u and v.
 distinguish two cases: 1. Assume nodes u and v are adjacent in U  X  G  X  . Then, there is nothing to prove. f u ; v g into split graphs G 1 and G 2 . The resulting split graphs contain a virtual edge e # f u ; v g . We split G split components, which are also split components of U  X  G  X  . Let G distinguishing the following subcases: ( ( ) We distinguish the following cases based on the cases in this theorem: there exists another separation class w.r.t f u ; v g . Thus, f u ; v g is a boundary pair. P  X  u ; v  X  of G .

Theorem 2. Let G be a TTG such that U  X  G  X  is weakly biconnected. an exit of F, then F 2 F  X  u ; v  X  .

Proof. Two parts of the theorem are proved separately. connected. Since u and v are the boundary nodes of F , G F then F does not contain r .
 outside F . Thus, w is a boundary node of F . This is a contradiction as the fragment F has exactly two boundary nodes u and v . Thus, f u ; v g is a separation pair of G , and also a boundary pair of G . incident to z is outside F . Thus, z is a boundary node of F . This is a contradiction as the fragment F has exactly two or more proper separation classes in P  X  u ; v  X  .
Let G F be formed by F . Since each subgraph formed by separation class is a connected subgraph of G , and contains nodes u and v , then G F is a connected subgraph of G . Since u is the entry and v is the exit, then F has two boundary nodes. Assume there exists another boundary node w of F . Then there exists two edges e and e 0 incident to w such that without f u ; v g , which is a contradiction. Thus, F has exactly two boundary nodes. Since F has one entry and one exit, F 2 F  X  u ; v  X  . h A.3. Proofs  X  The canonical and the objective fragments coincide In this section, we prove that the canonical and the objective fragments coincide. First, we prepare for this by proving Propositions 3 X 6 and Lemmas 10 X 12 . Then we can prove this equivalence in Theorem 7 .
Proposition 3. If X ; Y 2 F  X  u ; v  X  and F  X  X [ Y, then F 2 F  X  u ; v  X  . 1. If X and Y are bond fragments, F is a bond fragment. 2. If X and Y are directed bond fragments, F a directed bond fragment. 3. If X and Y are semi-pure bond fragments, F a semi-pure bond fragment. 4. If X and Y are pure bond fragments, F a pure bond fragment.
 is true for Y . We distinguish two subcases: of F . X [ Y and u is hence an entry of F .

Claims 1,2 and 4 are now trivial.
We now prove claim 3. Assume X and Y are semi-pure bond fragments. It follows that each X and Y is a union of at least branches that each branch of X and Y has both an edge outgoing from u and an edge incoming to v .
We distinguish two cases in the following, (1) X or Y has at least one undirected branch, and (2) both X and Y have no undirected branches. these two cases in the following. 2. Assume both X and Y have no undirected branches. It follows that both X and Y are pure bond fragments. Then it follows from the claim 4 of this proposition that F is a pure bond fragment. It follows from the hierarchy of bond fragment types that F is also a semi-pure fragment. h
Proposition 4. Let G be a TTG such that its undirected version is weakly biconnected. 1. If F ; F 0 2 F  X  u ; v  X  are proper semi-pure bond fragments of G, then F  X  F 2. If F ; F 0 2 F  X  u ; v  X  are proper directed bond fragments of G, then F  X  F
Proof union of at least two branches each, contains at least one undirected branch S ( S either (i) no edge incoming to u , or (ii) no edge outgoing from v . Thus, such an undirected branch S of F ( S one edge outgoing from u , at least one edge incoming to v , and at least one edge outgoing from v . F 0 contains all directed branches from u to v .

As F and F 0 contain the same directed branches from u to v , and F  X  F other does not. Without loss of generality, assume S is not in F incoming edge to u , both have no edge outgoing edge from v , or one has no incoming edge to u , and the other has no outgoing edge. The first two cases are symmetric. Without loss of generality, we distinguish the following two cases (a) both S and S 0 have both no edge incoming to u , (b) S has no edge incoming to u , and S ment and not a semi-pure bond fragment, F has an undirected branch that has an edge incoming to u and an undirected same arguments, F 0 is the union of all branches in D  X  u ; v  X [ U  X  u ; v  X  . Therefore, F  X  F
We prepare to prove the subsequent Proposition 5 by showing in Lemma 10 that two canonical bond fragments that share an entry and an exit do not overlap.
 X \ Y  X ; .
 the bond classes form a hierarchy and from Proposition 3 .

For example, assume that X is a maximal directed bond fragment and Y is a maximal semi-pure bond fragment. It follows also a directed bond fragment. X [ Y  X  X ,as X is the maximal directed bond fragment. Thus, Y # X . h
Proposition 5. Let G be a TTG such that its undirected version is weakly biconnected. 1. Let X ; Y 2 F  X  u ; v  X  be bond fragments of G, and X be canonical. Then X # Y, or Y # X.
Proof 1. As X is a canonical bond fragment, X is a maximal pure bond fragment X imal directed bond fragment X D , or a maximal bond fragment X pure bond fragment, (c) a proper directed bond fragment, and (d) a proper bond fragment. 2. Assume that X 2 F  X  u ; v  X  and Y 2 F  X  v ; u  X  are bond fragments of G , and X or Y is canonical. Let X Y B 2 F  X  v ; u  X  be the maximal bond fragments, X D 2 F  X  u ; v  X  and Y X S 2 F  X  u ; v  X  and Y S 2 F  X  v ; u  X  be the maximal semi-pure bond fragments and X imal pure bond fragments if they exist. It follows from the definition of the bond fragment types that X a TTG, then u and v are in a path from the source to the sink. We can assume without loss of generality that u has an incoming edge outside X B [ Y B , and v has an outgoing edge outside X has an outgoing edge outside A ,or v has an incoming edge outside A .
Proposition 6. Let G be a TTG, F 2 F  X  u ; v  X  be a fragment of G. F is a non-canonical fragment if and only if either 1. F is a non-maximal sequence, 2. F is a non-maximal pure bond fragment, 3. F is a non-maximal proper bond fragment, or 4. F is a maximal pure bond fragment and F is properly contained in a bond fragment F
Proof. We prove the theorem for each direction separately: is (a) a non-maximal sequence, or (b) a non-canonical bond fragment. In case (a), the claim directly follows.
Assume that F is a non-canonical bond fragment. It follows from the definition of a canonical bond fragment and the hierarchy of different bond fragment types that F is (i) a non-maximal proper pure bond fragment, (ii) a non-maximal proper semi-pure bond fragment, (iii) a non-maximal proper directed bond fragment, (iv) a non-maximal proper bond fragment, or (v) a maximal pure bond fragment such that F is not properly contained in any bond fragment F 0 2 F  X  v ; u  X  . It follows from Proposition 4 that a proper semi-pure bond fragment is max-imal if it exists, and that a proper directed bond fragment is maximal if it exists. Therefore, if F is a non-canon-ical bond fragment, F is either (i) a non-maximal pure bond fragment, (iv) a non-maximal proper bond fragment, or (v) a maximal pure bond fragment such that F is not properly contained in any bond fragment F claim directly follows. 2. ( ( ) The claim follows directly from the definition of a non-canonical bond fragment and a non-canonical fragment. h We prepare for Theorem 7 by showing in Lemma 11 that two canonical fragments do not overlap. X \ Y  X ; .
 that a 2 X n Z , b 2 Z and c 2 Y n Z . Let G X be the subgraph formed by X , and G G is a connected subgraph, then there exists a path from a to b in G arguments, there exists a node v 2 G Y such that v is a boundary node of X .
 three cases, where X and Y have (1) two common boundary nodes ( x 1  X  y 1 and x 2  X  y 2), (2) exactly one common boundary pairwise distinct nodes). are the only nodes crossing the boundary of X and Y .
 and x 2. Furthermore, there exists pairwise distinct branches S
S a # Z n X , S b # Z , and S c # Z n Y .
 entry node of X , and any path from a to t goes via the exit node of X , then a is a part of a branch S x 2, and S a #  X  X n Z  X  . With similar arguments, b is a part of a branch S a branch S c between x 1 and x 2, and S c #  X  Y n Z  X  . It follows that S
S b ; S c 2 Y , then X ; Y must be bond fragments. We distinguish two subcases: lowing subcases illustrated in Fig. 19 :
We prepare for Theorem 7 by showing in Lemma 12 that every non-canonical fragment overlaps with some other non-canonical fragment.

Lemma 12. Let G be a TTG. 1. If F is a non-maximal sequence of G, then there exists a non-maximal sequence F 2. If F is a non-maximal pure bond fragment of G, then there exists a non-maximal pure bond fragment F are overlapping. 3. If F is a non-maximal proper bond fragment of G, then there exists a non-maximal proper bond fragment F
F 0 are overlapping. 4. If F 2 F  X  u ; v  X  is a maximal pure bond fragment of G and F is properly contained in a bond fragment F exists a non-maximal proper bond fragment F 0 2 F  X  v ; u  X  of G, such that F and F 5. If F is a non-canonical fragment of G, then there exists a non-canonical fragment F
Proof. We prove each claim separately in the following. follows that C has a common boundary node with A or B . Without loss of generality, assume B and C have a common boundary node. It follows that the union of B and C is fragment F overlapping. 2. Assume F is a non-maximal pure bond fragment. Since F is a pure bond fragment it is a union of at least two directed branches from u to v . Assume A and B are two of these directed branches. Since F is a non-maximal pure bond fragment,
F 0 of A and C is also a pure bond fragment. Moreover, F 0 that S 0 2 D  X  v ; u  X  and S 0 [ F  X ; . Let F 0 be the union of S fragment, and not a directed bond fragment. Moreover, F 0 4. Assume F a maximal pure bond fragment and F is properly contained in a bond fragment F union of at least two directed branches in D  X  u ; v  X  .As F bond fragment F 0 . It follows that F and F 0 are overlapping. 5. Assume F 2 F  X  u ; v  X  is a non-canonical fragment. It follows from Proposition 6 that F is either (1) a non-maximal sequence, (2) a non-maximal pure bond fragment, (3) a non-maximal proper bond fragment, or (4) a maximal pure bond fragment and F is properly contained in a bond fragment F
Lemma 11 that in each of these four cases, there exists a non-canonical fragment F overlapping. h Finally, we are ready to prove Theorem 7 .
 Theorem 7. Let F be a fragment of a TTG. F is a canonical fragment if and only if F is an objective fragment.
Proof ( ) ) Assume F is a canonical fragment. It follows from Lemma 11 that F is an objective fragment. ( ( ) Suppose an objective fragment F is not a canonical fragment. As F is non-canonical, it follows from Lemma 12 that F overlaps with some fragment, which contradicts F being an objective fragment. h A.4. Proofs  X  The properties of the RPST In this section, we prove the properties of the RPST. Proposition 8 describes how all fragments can be derived from the RPST. Finally, Theorem 9 is used to show the modularity of the RPST.

Proposition 8. Let F be a set of edges in a TTG. F is a fragment if and only if F is a canonical fragment or F is 1. a union of consecutive child fragments of a maximal sequence, 2. a union of child fragments of a maximal pure bond fragment, or 3. a union of child fragments of a maximal bond fragment B such that B is not a maximal directed bond fragment.
Proof (1) the claim directly follows. In the following, we deal with the remaining case (2). (b) a non-maximal pure bond fragment, (c) a non-maximal proper bond fragment, or (d) a maximal pure bond fragment and F is properly contained in a bond fragment F 00 2 F  X  v ; u  X  . We distinguish these cases in the following: 2. ( ( )If F is a canonical fragment, it is clear that F is also a fragment. Assume F nition of the RPST that a union of exactly one child fragment of F
Theorem 9. Let G be a TTG and X 2 F  X  u ; v  X  be a canonical fragment of G. Let G graph that is formed by X by some other subgraph formed by a set of edges X ment of A in G. Let A 0  X  X  A n X  X [ X 0 and F 0  X  F. Then A
Proof. First we show that (1) F 0 and (2) A 0 are fragments. 1. We have X \ F  X ; . Let G X be formed by X and G F be formed by F . Since F is connected, F has two boundary nodes, and F  X  F 0 , then F 0 is connected and has two boundary nodes. Since X and F are disjoint, then G or share the entry or the exit of F . We distinguish these cases in the following:
Since F 0 is a connected subgraph of G 0 , and F 0 has exactly two boundary nodes, an entry and an exit, then F 2. We have X # A . Let G X be formed by X and G A be formed by A . Since G nected to A n X only via u and v , A 0  X  X  A n X  X [ X 0 and X
Since A 0  X  X  A n X  X [ X 0 , it follows that the boundary nodes of A are also the boundary nodes of A then G X and G A are either disjoint, or share the entry or the exit of A . We distinguish these cases in the following:
Since A 0 is a connected subgraph of G 0 , and A 0 has exactly two boundary nodes, an entry and an exit, then A in G 0 .

Next, we show that A 0 and F 0 are the canonical fragments of G sequence, (2) neither a sequence nor a bond fragment, (3) a canonical bond fragment. that each child of a maximal sequence is a union of all branches between the entry and the exit of this child. Thus, F is either (a) a maximal bond fragment, or (b) neither sequence nor a bond fragment. We distinguish these cases in the following:
Since X 0 is a fragment, and X 0 replaces a child X of a maximal sequence, then X bond fragment, or (3) neither sequence nor bond fragment. Since X is a child of the maximal sequence A , then X is in sequence with a child of A . In each three cases above, it follows that X that is also a child fragment of A 0 . In case X 0 is a sequence, then X children of A are canonical fragments and children of A 0 canonical. 2. Assume A is neither a sequence nor a bond fragment. Since A is not a bond, then A contains only one branch between its entry and exit. Since A  X  X , then A has at least two children. Replacing X with X branch, and thus does not introduce any new branches between the entry and the exit of A . Thus, A two children of A are not in sequence. It follows that X 0
X that is not in sequence with any child of A . It follows that any union of X follows that A 0 is not a sequence, because its children are not in sequence.Thus, A fragment. Therefore, A 0 is a canonical fragment. With similar arguments, F of A 0 . 3. Assume A is a canonical bond fragment. Then A is either (a) a maximal pure bond fragment, (b) a maximal semi-pure bond fragment, but not a pure bond fragment, (c) a maximal directed bond fragment, but not a semi-pure bond fragment, or (d) a maximal bond fragment, but not a directed bond fragment.
References
