 Skyline computation is a fundamental problem in database area [2], which has attracted considerable attention in dat abase community. Given a set of d -dimensional points, the skyline is a subset of points that are not dominated by any other points. Here a point p dominating a point q ( p = q ) means that q  X  X  coordinate is no larger than p  X  X  coordinate in all dimensions. The skyline operator is particularly useful in multi-criteria decision making related applications [2,10].

However, in many applications, the number of skyline points are typically very large, and even may be comparable to the size of the entire dataset [14]. To overcome this is-sue, a promising method is to select k representatives to represent the entire skyline [8,14]. In the literature, there are several definitions of representative skyline [8,14], including the notable domination-based representative skyline [8] and distance-based representative skyline [14], which will be surveyed in Section 6. As illustrated in [14], the defect of the domination-based represe ntative skyline is that it may allocate many representatives to a dense region of the skyline points, while the distance-based rep-resentative skyline (DBRS) can overcome this drawback. Therefore, in this paper, we focus on the problem of computing the DBRS ef ficiently. Specifically, given an inte-ger k , a DBRS consists of k representative skyline points that aims to minimize the maximal distance between a non-representati ve skyline point and its nearest represen-tative. In the 2D space, there is a dynamic p rogramming (DP) algorithm to compute the DBRS [14], which takes O ( km 2 ) time complexity, where m is the number of skyline points. Obviously, such a DP-based solution cannot be applied to large datasets due to the quadratic time overhead.

To speedup the DP-based algorithm, in this paper, we first propose an efficient ap-proximate algorithm, called ARS, which runs in O ( k log 2 m log( T/ )) time, where T is no more than the maximal distance between any two skyline points. We show that the ARS algorithm can guarantee a solution that is at most larger than the optimal solu-tion. Second, we propose an exact algorithm, called PSRS, which runs in O ( k 2 log 3 m ) time. Unlike the DP-based algorithm, both the ARS and PSRS algorithms are based on a carefully-designed parametric search t echnique. Specifically, to compute the DBRS, we first solve a related decision problem described as follows. Given a distance  X  , can we find k representatives such that the distance between a non-representative point and its nearest representative is no larger than  X  ? If that is the case, we refer to  X  as a fea-sible solution, and otherwise it is non-feasible. Clearly, the minimal feasible solution of the decision problem is the optimal solution of the DBRS problem. To solve the de-cision problem, we propose a binary-search based greedy algorithm. The idea is that the algorithm greedily covers the skyline points using a circle with radius  X  ,andthen checks whether all the skyline points can be covered by k circles. We prove that if the optimal solution of the DBRS problem is no smaller than  X  , then such a greedy algo-rithm returns true , otherwise returns false . Based on this, the ARS algorithm makes use of a binary search technique to search the minimal feasible  X  , which can obtain a near-optimal solution. However, for the PSRS algorithm, we first observe that there are k feasible solutions that can be the candidates for the optimal solution. Based on this key observation, the PSRS algorithm utilizes a binary search procedure to find all these k candidates, and then reports the minimal one. We conduct extensive experi-ments over both synthetic and real-world datsets, the results show that the ARS and PSRS algorithms are at least four orders of magnitude faster than the DP-based algo-rithm in medium-sized datasets. The main contributions of this paper are summarized as follows.  X  We propose a near-optimal approximate algorithm ARS that runs in  X  We also propose an efficient exact algorithm PSRS which takes O ( k 2 log 3 m ) time  X  We conduct comprehensive experimental studies to evaluate the proposed algo-
The rest of the paper is organized as follows. Section 2 describes the problem of distance-based representative skyline computation. In Sections 3 and 4, we propose the ARS and PSRS algorithms respectively. We report the experimental results in Section 5, and survey the related work in Section 6. Finally, we conclude this work and point out several future directions in Section 7. Let D be a set of 2D points, and S be a set of skyline points of D . Denote by n and m the cardinality of D and S respectively (i.e., n = | D | and m = | S | ). Further, we let K be the representative skyline that contains k points from S . Following [14], the definition of representative error of K , denoted by E ( K, S ) ,isgivenby where || p, q || denotes the distance between points p and q . The representative error denotes the maximal distance between the non-representative point from S \ K and its nearest representatives, which quantifies the representation quality of K . A good representative skyline should be with small E ( K, S ) . The goal of the distance-based representative skyline (DBRS) is to find a representative skyline K with minimal rep-resentative error E ( K, S ) . More formally, the DBRS problem is formulated as follows.
In [14], the authors proposed a dynamic programming algorithm to solve the above problem in 2D space. In the rest of this paper, we assume that the skyline R has already been computed from the dataset D and the skyline points are sorted in ascending order of their x-coordinate, which is a very common assumption in representative skyline literature [14,8]. Let S = { p 1 ,  X  X  X  ,p m } be the skyline points that is sorted in non-decreasing order of their x-coordinate. Denote by S j = { p 1 ,  X  X  X  ,p j } a subset of S that includes the first j elements in S .Let optE ( j, t ) ,for 0  X  j  X  m, 0  X  t  X  k ,bethe representative error of the optimal size-t representative skyline of R j .Let r ( i, j ) ,for 1  X  i  X  j  X  m , be the radius of the smallest circle that covers all points in { p and centers at one of these points. Then, we have the following recursive formula to compute optE ( m, k ) [14]. Armed with the above formula, we can easily devise a dynamic programming algorithm to compute optE ( m, k ) . By a careful implementation a s shown in [14], the DP-based algorithm runs in O ( km 2 ) time. Clearly, such a DP-based solution cannot be used for large datasets due to the quadratic time cost. To overcome this issue, in the following sections, we shall present two efficient algorithms to compute the optimal representative skyline in 2D space. In the rest of this pap er, we will focus on computing the optimal representative error, and it is straightforward to extend the proposed techniques to find the optimal representative points.
 Algorithm 1. Compute the radius of the smallest circle r ( i, j ) In this section, we propose a near-optimal approximate algorithm, called ARS, to com-pute the representative skyline in 2D s pace. Unlike the DP algorithm, the ARS algo-rithm is based on a dramatically different t echnique. The general idea of our technique is that to solve the minimization problem, we first solve a related decision problem which is described as follows. Given a distance  X  , can we find a representative skyline with k points such that the distance between a non-representative point and its nearest representative is no larger than  X  ? If that is the case, we refer to  X  as a feasible solution for the decision problem. It is easy to see th at the representative error of the optimal representative skyline should be the minimal feasible solution of the decision problem. Once the decision problem can be efficiently solved, then we can use a binary search procedure (over all possible  X  ) to find the minimal feasible solution. Below, we first present an algorithm to solve the decision problem. 3.1 Solve the Decision Problem Here we devise a greedy algorithm to solve the decision problem. The idea is that the algorithm greedily covers the skyline points from p 1 to p m using a circle with radius  X  , and then verifies whether all points can be covered by k circles. If so, then the distance  X  is a feasible solution. Otherwise,  X  is non-feasible which will be proved in Lemma 1. Before we proceed further, we first presen t an algorithm to compute the radius of the smallest circle that covers all points in { p i ,  X  X  X  ,p j } for i  X  j and centers at one of these points, which will be frequently invoked in the ARS algorithm.

The general idea of our algorithm to compute the radius of the smallest circle is as follows. Let d ( i, t ) (for t  X  X  i +1 ,  X  X  X  ,j } ) be the distance between the point i and point t . Then, one can easily derive that d ( i, t ) is an increasing function with increasing t . Similarly, we can find that d ( j, t ) is an decreasing function with increasing t .Since est circle must be the distance d ( i, t ) or d ( j, t ) for a certain t (the one with minimal | and d ( j, t ) , we are able to devise a binary search al gorithm to search the smallest radius. The detailed description of our algorithm is shown in Algorithm 1.

It is worth emphasizing that our binary-search based technique (Algorithm 1) is com-pletely different from the technique developed in [14] to compute the smallest circle, in Algorithm 2. TestDistance (  X ,k ) which the authors present a collative pass technique to compute the optimal radiuses for all pair ( i, j ) in O ( m 2 ) time. Instead of computing all radiuses, we focus on computing r ( i, j ) on demand (i.e., we invoke Algorithm 1 only when r ( i, j ) is requested.). It is easy to derive that the worst-case time complexity of Algorithm 1 is O (log m ) .
Equipped with Algorithm 1, we are ready to present the greedy algorithm to solve the decision problem. Specifically, we detail the greedy algorithm in Algorithm 2. In Algo-rithm 2, the algorithm sequentially find k circles with radius  X  to cover the points from p 1 to p m (lines 2-13). For the l -th circle, denoted by circle-l , the algorithm determines the rightmost skyline point covered by the circle by using a binary search procedure (lines 4-9). If the rightmost skyline point covered by circle-l is p m and l  X  k ,thenwe know that we can use at most k circles with radius  X  to cover all the skyline points, and thus  X  is a feasible solution (lines 10-11). Otherwise,  X  is non-feasible, and thereby the algorithm returns false (line 14). In addition, it is worth mentioning that in line 6, the algorithm invokes Algorithm 1 to compute the radius r ( i, mid ) ,whichtakes O (log m ) time complexity. Putting it all together, we can easily derive that the worst-case time complexity of Algorithm 1 is O ( k log 2 m ) , and the space complexity of Algorithm 2 is O ( m ) . The following lemma shows the correctness of the algorithm.
 Lemma 1. Let optE ( m, k ) be the optimal representative error of the DBRS problem. If optE ( m, k ) &gt; X  , then TestDistance (  X ,k ) returns false, otherwise returns true. Proof. Since optE ( m, k ) is the optimal solution, it is impossible to use k circles with radius smaller than optE ( m, k ) to cover all the skyline points. Therefore, if optE ( m, k ) &gt; X  , TestDistance (  X ,k ) must return false. It remains to show when optE ( m, k )  X   X  , TestDistance (  X ,k ) returns true. For the algorithm TestDistance (  X ,k ) , we assume that p s i be the rightmost point covered by the i -th circle with radius  X  , where s i is the index of this rightmost point. Since optE ( m, k )  X   X  , there is a way of covering all skyline points by using k circles with radius no more than  X  .Ifthefirst circle of this covers includes the points { p 1 ,  X  X  X  ,p t } ,then t  X  s 1 (by the fact of the greedy procedure). As a result, there exists a way of covering points { p s 1 +1 ,  X  X  X  ,p m } by using k  X  1 circles with radius no more than  X  . This is because we can remove Algorithm 3. ARS( S , m , , k ) all the points in { p t +1 ,  X  X  X  ,p s 1 } , and then use the optimal algorithm to covers all the points { p s 1 +1 ,  X  X  X  ,p m } by using k  X  1 circles with radius no larger than  X  .Thesame argument can be applied to the second circle , the third circle, an d so forth. Hence, the lemma is established. 3.2 The ARS Algorithm Recall that to solve the DBRS problem, we hav e to find the minimal feasible solution of the decision problem. To that end, we first find that the decision problem satisfies the monotonic property. That is to say, for any  X  1 &gt; X  2 ,if  X  2 is a feasible solution, then  X  1 is also a feasible solution. Then, based on the monotonic property of the decision problem, we can apply a binary search procedure to find the minimal feasible solution.
The ARS algorithm is detailed in Algorithm 3. Since  X  is a real value, we may not obtain the minimal feasible solution exactly by using binary search. Therefore, in Algo-rithm 3, we use a parameter to balance the tradeoff between the accuracy and running time of the algorithm. In the experiments, we will show how affects the accuracy and the running time of the algorithm. Note that in Algorithm 3, one can easily derive that ub = r (1 ,m ) and lb =0 are the upper and lower bounds of  X  , thus we can use these bounds as two starting points for the b inary search procedure. In addition, it is straightforward to show that the ARS algorithm can guarantee a solution that is at most larger than the optimal solution. The worst-case time complexity of the ARS algo-rithm is O ( k log 2 m log( T/ )) .Here T = ub  X  lb , which is no more than the maximal distance between any two skyline points. Additionally, it is easy to verify that the space complexity of ARS is O ( m ) . Here we present an exact algorithm to solve the DBRS problem. For a pair ( i, j ) with 1  X  i  X  j  X  m ,let c ( i, j ) be the circle that covers points { p one of these points, and r ( i, j ) be the radius of the circle c ( i, j ) . Then, we can easily verify that the optimal representative error for the DBRS problem must be equal to is to enumerate all such pairs. However, the naive algorithm is not efficient, because there are O ( m 2 ) pairs needed to be enumerated in the worst case. The challenge is how to search the optimal solution over all O ( m 2 ) pairs efficiently. Algorithm 4. PSRS ( S , m , k )
To tackle this challenge, we shall propose an efficient algorithm based on a deep analysis of the problem. Specifically, we find that to compute the optimal solution of the DBRS problem, we only need to check k candidates, which is significantly smaller than O ( m 2 ) . Below, we first introduce some useful notations, and then detail our techniques to achieve this goal.

For i =0 ,  X  X  X  ,k ,welet s i  X  X  1 ,  X  X  X  ,m } be the indices of k skyline points with s 0 =1 , s k = m ,and s i &lt;s i +1 for i =1 ,  X  X  X  ,k  X  1 . We refer to p s i as the i -th breakpoint, because all the s i for i =0 ,  X  X  X  ,k partition the entire skyline into k parts. the points in { p s i  X  1 ,  X  X  X  p s i } and centers at one of these points. For completeness, we define r ( i, j )=  X  1 whenever j&lt;i . Then, we can compute the optimal representative error of the DBRS problem (i.e., optE ( m, k ) ) based on the following lemma. 1 ,  X  X  X  ,k  X  1 hold, then optE ( m, k )=min k Proof. First, we show that r ( s k  X  1 ,s k ) is a feasible solution for the decision problem. { p Since r ( s i  X  1 ,s i  X  1) &lt;optE ( m, k ) for all i =1 ,  X  X  X  ,k  X  1 hold, we have max i =1 ,  X  X  X  ,k  X  1 hold, we have optE ( m, k )  X   X  min . To prove the lemma, it is suffi-cient to show that optE ( m, k ) &lt; X  min is impossible. We assume to the contrary that for the optimal solution, the best possible for the rightmost point covered by the first circle is p s 1  X  1 . Similarly, we can find that the best possible for the rightmost point cov-solution, the points { p s optE ( m, k ) &lt; X  min . This completes the proof.

Based on Lemma 2, we only need to find all the s i for i =1 ,  X  X  X  ,k  X  1 that meet s ,then r ( s i  X  1 ,s i ) for each i =1 ,  X  X  X  ,k  X  1 is a candidate for the optimal solution, and we only need to take the minimal over all r ( s i  X  1 ,s i ) . We can determine all the s i by sequentially invoking a binary search procedure based on the monotonic property of the decision problem. Specifically, if r ( s i  X  1 ,s i ) is a feasible solution for the decision r ( s i  X  1 ,s i ) . As a result, we are able to devise a binary search algorithm to determine and then given s 1 , we can use the same binary search procedure to find s 2 , and so on. The detailed description of our algorithm is outlined in Algorithm 4. We can easily derive that the time and space complexity of Algorithm 4 are O ( k 2 log 3 m ) and O ( m ) respectively. The correctness of Algorithm 4 can be guaranteed by Lemma 2. In this section, we conduct comprehensive experiments to evaluate the proposed algo-rithms. To this end, we use the state-of-the-art DP based algorithm [14], called DPRS, as the baseline. We use the running time and the representative error as the metrics, and then we compare our algorithms ARS and PSRS with the baseline algorithm DPRS using these metrics. For the ARS algorithm, we set the parameter =0 . 01 , unless otherwise specified. All algorithms are implemented in C++. All the experiments are conducted on a computer with 3.20GHz Intel(R) Core(TM) i5-3470 CPU and 6GB memory running Windows 8.1 operation system.
 Datasets. In the experiments, we use five datasets. The first four datasets, named ID 1, ID 2, ACD 1 and ACD 2 respectively, are the synthetic datasets which are generated based on the method proposed in [2]. Specifically, for the ID 1 and ID 2 datasets, the (x, y)-coordinates of the skyline points are generated based on a uniform distribution. We generate 14,735 and 1,087,893 skyline points for the ID 1 and ID 2 datasets respectively. The ACD 1 and ACD 2 datasets are the anti-correlated dataset where the points are good in one dimension but they are bad in the other dimension. We use the method proposed in [2] to generate the ACD 1 and ACD 2 datasets which contain 18,576 and 1,142,369 skyline points respectively. The last dataset , called Urban, is a real-world dataset includ-ing 1,662 skyline points, which is previously used in urban computing community [20]. We download this dataset from http://research.microsoft.com/en-us/ projects/urbancomputing/ . In our experiments, we extract two dimensions of each data point in the original dataset, where th e first dimension represents the time, and the second dimension denotes the traffic flow, and then we compute the skyline. For a fair comparison, we normalize the (x, y)-coordinates of the points in all the datasets into the range [0 , 100] . The detailed information of our datasets are shown in Table 1. Efficiency. Here we report the running time of the DPRS, ARS, and PSRS algorithms. The results for varying k in all datasets are shown in Tables 2, 3, 4, 5, and 6 respec-tively. As can be seen, both the ARS and PSRS algorithms are significantly faster than the DPRS algorithm (the baseline algorithm), and the ARS algorithm is slightly more efficient than the PSRS algorithm. For exa mple, in the ID 1 dataset (Table 2), we can see that the ARS and PSRS algorithms are 17,548 and 13,807 times faster than the DPRS algorithm on average. That is to say, the proposed ARS and PSRS algorithms are at least four orders of magnitude faster than the state-of-the-art DPRS algorithm in medium-sized datasets. Even in the smallest dataset Urban (Table 6), the ARS and PSRS algorithms are at least two orders of magnitude faster than the DPRS algorithm. In addition, in our two large datasets ID 2 and ACD 2 (Tables 3 and 5), the DPRS can-not get the solution in one day, while our ARS and PSRS algorithms can compute the solution in around 2.5 second. As desired, over all datasets, the running time of all the algorithms increas e with increasing k . These results are consistent with the theoretical analysis presented in Sections 3 and 4.
 Scalability. Here we test the scalability of the ARS and PSRS algorithms. To this end, we vary the number of skyline points from 10,000 to 1,000,000, and test the running time of our algorithms in ID 2 and ACD 2 datasets. We set k =10 , and similar results can also be observed for other k values. The results are depicted in Fig. 1. From Fig. 1, we can see that both the ARS and PSRS algorithms scale very well. When the datasets is large than 100,000, the increasing speed of the running time of the ARS and PSRS algorithms are lower than the increasing speed of the number of skyline points. The reason is that the time complexity of our algorithms are sublinear. The results further confirm that our algorithms can be applied to handle large datasets.
 Effect of the Parameter . Here we study how the parameter affects the efficiency and effectiveness of the ARS algorithm. For this purpose, we vary from 0.001 to 0.1, and use the running time and the representative error as two metrics to evaluate the efficiency and effectiveness of the ARS algorithm, respectively. Also, we set k =10 , and similar results can be observed for other k values. We test the ARS algorithm in ID 2 and ACD 2 datasets. The results of running time with varying are shown in Fig. 2. As can be seen, the running time decreases with increasing .When  X  0 . 01 , the running time of the ARS algorithm dramatically decreasing with increasing .However,when &gt; 0 . 01 , the curves are relatively smooth. The reason is that if is very small, then the binary search procedure in the ARS algorithm will take a relatively long time to converge to the near-optimal approximate solution. However, when is large, the binary search procedure converges quickly.

We report the results of the representative error of the ARS algorithm with different in Fig. 3. From Fig. 3, we can find that the representative error increases with increasing as desired. This is because controls the accuracy of the ARS algorithm. A large results in a low accuracy. Also, we can see that when =0 . 01 , the representative error of the ARS algorithm is close to the exact representative error. Skyline Computation. The skyline operator was first introduced into database commu-nity by Borzsonyi et al. [2] in 2001, although the skyline computation problem can date back to 1975 [7]. Since then, a large number of skyline computation algorithms have been proposed. Previous results mainly cover three aspects: 1) centralized skyline query processing, including the BNL algorithm (block nested loop) [2], the SFS algorithm (sort filter skyline) [3], the divide and conquer algorithm [2], the bitmap algorithm [13], the index-based algorithm [13], the NN algorithms (Nearest Neighbor) [6], as well as the BBS (branch and bond skyline) algorithm [11]; 2) distributed skyline query process-ing, including skyline computing in the traditional distributed environment [1], skyline computing in the mobile distributed environment [5], and skyline computing in peer-to-peer networks [17,18], and so on; 3) Other skyline computing problems, including size estimation of the skyline [4], skyline query processing in any subspace [16], sky-line query processing in all subspace [19,11], and skyline query processing in data flow [15], and so on.
 Representative Skyline Computation. Since the traditional skylines has too many sky-line points, in decision-making related applications, a better way is to find a small num-ber of points that can best represent the entire skyline. Motivated by this, many new definitions of representative skyline hav e been proposed recently. Notable definitions include the domination-based representative skyline which is proposed by Lin et al. [8]. The goal of the domination-based skyline is to find k skyline points to maximize the number of points that can be dominated by any of the selected k skyline points. Subsequently, Tao et al. [14] introduced a distance-based representative skyline defini-tion, in which the goal is to minimize the distance between a non-representative skyline point and its closest neighbor. Sarma et al. [12] presented a representative skyline model based on the users X  preference distributions, aiming at finding k representative skyline points such that the probab ility that a random user would click on one of them is maxi-mized. More recently, Magnani et al. [9] proposed a new representative skyline defini-tion which takes both significance and diversity of the data points into account. In this paper, we focus on developing efficient algorithms for computing the distance-based representative skyline in 2D space. Representative skyline has a number of app lication in database c ommunity, especially in multi-objective decision making and real-time online service. A notable definition of representative skyline is the distance-base d representative skyline (DBRS). However, in 2D space, the state-of-the-art algorithm f or DBRS computation is based on dynamic programming (DP) which is costly for large scale datasets due to the quadratic time overhead. In this paper, we propose two much more efficient algorithms, called PSRS and ARS respectively, based on a carefully-d esigned parametric search technique. We show, in theory and experiments, that both PSRS and ARS algorithms are very efficient which are at least four orders of magnitude faster than the state-of-the-art algorithm in medium-sized datasets. There are several future directions needed to further investi-gate. First, it would be interesting to devise parallel and distributed counterparts for our algorithms. Second, the proposed techniques are tailored to two-dimensional data. An immediate question is how to extend our techniques to compute the DBRS in high di-mensional data. Finally, it would also be interesting to further optimize our algorithms by developing non-trivial pruning techniques in the parametric search procedure. Acknowledgements. The work was supported in part by (i) NSFC Grants (61402292, 61170076, U1301252, 61033009) and Natural Science Foundation of SZU (grant no. 201438); (ii) Research Grants Council of the Hong Kong SAR, China, 14209314 and 418512; (iii) China 863 (no. 2012AA010239) and Guangdong Ke y Laboratory Project (2012A061400024); (iv) National Key Technology Research and Development Pro-gram of the Ministry of Science and Technology of China2014BAH28F05. Dr. Rong-Hua Li is the corresponding author of this paper.

