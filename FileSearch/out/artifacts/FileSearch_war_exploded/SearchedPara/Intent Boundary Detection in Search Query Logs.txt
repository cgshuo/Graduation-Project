 Identifying intent boundary in search query logs is important for learning users X  behaviors and a pplying their experiences. Time-based, query-based, and cluster-b ased approaches are proposed. Experiments show that the integr ation of intent clusters and dynamic time model performs the best. H.3.3 [ Information Search and Retrieval ]: Query formulation. Algorithms, Experimentation, Measurement Intent clustering, intent boundary detection, query log analysis. Search query logs record users X  queries along with their clicked URLs. Many researches [1] try to mine common behaviors from logs, and apply the experience to information access. One issue in query log mining is to determine the intent boundaries in a sequence of queries. The static time-based approach considers the average time per intent and employs a time threshold to partition query logs into intent-coherent sessions. The major problem of this approach is that it is easy to leave out information when using a small threshold, a nd to introduce noise when using a large threshold. The query-based approach computes the average number of queries needed to fulf ill an information need, and uses it to recognize intent boundaries. The query-based approach suffers from the same problem. A very small or a very large threshold will result in too little or too much information. This paper proposes a dynamic tim e model which considers user comprehension time in querying and clicking URL. First, the model determines a potential in tent boundary. Then, intent clusters learned from a Live search query log [2] are adopted to adjust the boundary. For each query, its query terms, query time, and the associated session are recorded in the log. For each click, the clicked URL, the click time, and the associated query are recorded in the log. In total, there are 7,468,628 sessions. Each session may contain one or more in tents. To purify the dataset, we propose the following criteria to select 14,242 sessions for intent clustering: 1) session dura tion is no longer than 60 minutes; 2) at least 3 distinct queries; 3) at least 3 clicked URLs which can be found in the Open Directory Project (ODP). (abbreviated as path hereafter). We resolve the ambiguity by using contextual information. Th e features of query, URL, path, query+URL, and query+path are explored on complete link and average link clustering algorithms to derive intent clusters. Given a session of n queries, there may be n possible intent boundaries (defining the last boundary to be right after the last query) and thus n possible segments. We have to compute the similarity of these n segments with all the m intent clusters. The segment of the highest simila rity is proposed. We need m * n computations to find boundaries. To reduce time cost, we use time model to propose a potentia l boundary first. Then we compute the similarity of the se gment with all intent clusters, select the cluster with the highest similarity with the segment, and adjust the potential intent boundary (say q i ) using the intent cluster. We try to move the boundary to the right to include one more query q i +1 and compute similarity. If the similarity becomes lower, we try to move the boundary to the left to query q i -1 and compute the similarity. Otherwis e, we try to move the boundary to the right again. The right/left movement procedure is repeated until the similarity becomes lower. We randomly select 1,000 sessions from Live search query log data set [2], and manually label the intent boundaries in each session. Total 1,456 boundaries ar e identified. Assume ground truth G and system report S are composed of m and n intent boundaries, respectively. Let { c 1 , c 2 , ..., c k } be k common boundaries between G and S . Precision ( P ), recall ( R ), and F-Score ( F ) are defined as follows, where b i =1 if there does not exist any boundary c in G and S such that c is located between c i -1 and c i , otherwise b i =0. Table 1 shows the performance of four baseline approaches using time or query thresholds. AvgT ime which considers a segment spanning 20 minutes as an individual intent is the best baseline. Avg#Queries which regards a se gment consisting of 7 queries performs the next. The performance of considering comprehension time, i.e., StaticCTime and DynamicCTime, is behind that of AvgTime and Avg#Queries. Next we introduce intent cluster to adjust the intent boundary proposed by the DynamicCTime approach. Table 2 shows the results. Intent clusters genera ted by complete link and average link clustering algorithms on different features are compared. Using URL features is better than using query features. It may be due to that clicked URLs express so me sort of users X  intents, and users X  queries may be ambiguous. Using path feature, denoting ODP category, performs better than using URL features in the complete link algorithm. That meets our expectation because the ODP category is a conceptual representation of URL. Using a Query together with URL/Path is better than using the URL/Path only in these two clustering algorith ms. Integrating features of query and path in complete the link algorithm generates the best intent clusters, which are the most helpful to intent boundary identification. The resulting model achieving an F-score 0.6543 is significantly better than the four baselines in Table 1 (Chi-Square test, p-value&lt;0.001). We also introduce intent cluster to the best baseline, AvgTime. Table 3 shows the results. The te ndency is similar to Table 2. Complete link clusters with Query+Path performs better than the 
