 Since its origin, computational linguistics has been dominated by Constituency/Phrase Structure (PS) representation of sentence structure. How-ever, recently, we observe a steady increase in popularity of Dependency Structure (DS) for-malisms. Several researchers have compared the two alternatives, in terms of linguistic ade-quacy (Nivre, 2005; Schneider, 2008), practical applications (Ding and Palmer, 2005), and eval-uations (Lin, 1995).
 Dependency theory is historically accredited to Lucien Tesni ` ere (1959), although the relation of dependency between words was only one of the various key elements proposed to represent sen-tence structures. In fact, the original formulation incorporates the notion of chunk , as well as a spe-cial type of structure to represent coordination .
The Tesni ` ere Dependency Structure (TDS) rep-resentation we propose in (Sangati and Mazza, 2009), is an attempt to formalize the original work of Tesni ` ere, with the intention to develop a simple but consistent representation which combines con-stituencies and dependencies. As part of this work, the English Penn Wall Street Journal (WSJ) tree-bank into the new annotation scheme.

In the current work, after introducing the key elements of TDS (section 2), we describe a first probabilistic extension to this framework, which aims at modeling the different levels of the repre-sentation (section 3). We test our model on parsing the WSJ treebank using a re-ranking framework. This technique allows us to efficiently test our sys-tem without needing a specialized parser, and to use the standard evaluation metric on the original PS version of the treebank. In section 3.4 we also introduce new evaluation schemes on specific as-pects of the new TDS representation which we will include in the results presented in section 3.4. It is beyond the scope of this paper to provide an exhaustive description of the TDS representation of the WSJ. It is nevertheless important to give the reader a brief summary of its key elements, and compare it with some of the other representations of the WSJ which have been proposed. Figure 1 shows the original PS of a WSJ tree (a), together and (d) CCG (Hockenmaier and Steedman, 2007). (a) (b) (c) (d) 00, #977). (a) PS (original), (b) CCG, (c) DS, (d) TDS.
Words and Blocks In TDS, words are di-vided in functional words (determiners, preposi-tions, etc.) and content words (verbs, nouns, etc.). Blocks are the basic elements (chunks) of a struc-ture, which can be combined either via the depen-dency relation or the junction operation. Blocks can be of two types: standard and junction blocks. Both types may contain any sequence of func-tional words. Standard blocks (depicted as black boxes) represent the elementary chunks of the original PS, and include exactly one content word.
Coordination Junction blocks (depicted as yel-low boxes) are used to represent coordinated struc-tures. They contain two or more blocks (con-juncts) possibly coordinated by means of func-tional words (conjunctions). In Figure 1(d) the yellow junction block contains three separate stan-dard blocks. This representation allows to cap-ture the fact that these conjuncts occupy the same role: they all share the relativizer  X  X hat X , they all depend on the noun  X  X ctivities X , and they all gov-ern the noun  X  X bortion X . In Figure 1(a,c), we can notice that both PS and DS do not adequately rep-resent coordination structures: the PS annotation is rather flat, avoiding to group the three verbs in a unique unit, while in the DS the last noun  X  X bor-tion X  is at the same level of the verbs it should be a dependent of. On the other hand, the CCG structure of Figure 1(d), properly represents the coordination. It does so by grouping the first three verbs in a unique constituent which is in turn bi-narized in a right-branching structure. One of the strongest advantages of the CCG formalism, is that every structure can be automatically mapped to a logical-form representation. This is one rea-son why it needs to handle coordinations properly. Nevertheless, we conjecture that this representa-tion of coordination might introduce some diffi-culties for parsing: it is very hard to capture the relation between  X  X dvocate X  and  X  X bortion X  since they are several levels away in the structure.
Categories and Transference There are 4 dif-ferent block categories, which are indicated with little colored bricks (as well as one-letter abbrevi-ation) on top and at the bottom of the correspond-ing blocks: verbs (red, V), nouns (blue, N), ad-verbs (yellow, A), and adjectives (green, J). Every block displays at the bottom the original category determined by the content word (or the original category of the conjuncts if it is a junction struc-ture), and at the top, the derived category which relates to the grammatical role of the whole block in relation to the governing block. In several cases we can observe a shift in the categories of a block, from the original to the derived category. This phenomenon is called transference and often oc-curs by means of functional words in the block. In Figure 1(b) we can observe the transference of the junction block, which has the original category of a verb, but takes the role of an adjective (through the relativizer  X  X hat X ) in modifying the noun  X  X ctiv-ities X . (2-4) and explained in the main text. This section describes the probabilistic generative model which was implemented in order to dis-ambiguate TDS structures. We have chosen the same strategy we have described in (Sangati et al., 2009). The idea consists of utilizing a state of the art parser to compute a list of k -best candidates of a test sentence, and evaluate the new model by us-ing it as a reranker. How well does it select the most probable structure among the given candi-dates? Since no parser currently exists for the TDS representation, we utilize a state of the art parser for PS trees (Charniak, 1999), and transform each candidate to TDS. This strategy can be considered a first step to efficiently test and compare different models before implementing a full-fledged parser. 3.1 Model description In order to compute the probability of a given TDS structure, we make use of three separate proba-bilistic generative models, each responsible for a specific aspect of the structure being generated. The probability of a TDS structure is obtained by multiplying its probabilities in the three models, as reported in the first equation of Table 2.

The first model (equation 2) is the Block Gen-eration Model (BGM) . It describes the event of generating a block B as a dependent of its parent block (governor). The dependent block B is identi-fied with its categories (both original and derived), and its functional words, while the parent block is characterized by the original category only. More-over, in the conditioning context we specify the direction of the dependent with respect to the par-ent 3 , and its adjacent left sister ( null if not present) specified with the same level of details of B. The
The second model (equation 3) is the Block Ex-pansion Model (BEM) . It computes the probabil-ity of a generic block B of known derived cate-gory, to expand to the list of elements it is com-posed of. The list includes the category of the content word, in case the expansion leads to a standard block. In case of a junction structure, it contains the conjunctions and the conjunct blocks (each identified with its categories and its func-tional words) in the order they appear. Moreover, all functional words in the block are added to the
The third model (equation 4) is the Word Fill-ing Model (WFM) , which applies to each stan-dard block B of the structure. It models the event of filling B with a content word ( cw ), given the content word of the governing block, the cate-gories ( cats ) and functional words ( f w ) of B , and further information about the context 6 in which B occurs. This model becomes particularly interest-ing when a standard block is a dependent of a junc-tion block (such as  X  X bortion X  in Figure 1(d)). In this case, the model needs to capture the depen-dency relation between the content word of the dependent block and each of the content words be-3.2 Smoothing In all the three models we have adopted a smooth-ing techniques based on back-off level estima-tion as proposed by Collins (1999). The different back-off estimates, which are listed in decreasing levels of details, are interpolated with confidence
The first two models are implemented with two levels of back-off, in which the last is a constant but not zero, for unknown events.

The third model is implemented with three lev-els of back-off: the last is set to the same con-dency event using both pos-tags and lexical infor-mation of the governor and the dependent word, while the second specifies only pos-tags. 3.3 Experiment Setup We have tested our model on the WSJ section of Penn Treebank (Marcus et al., 1993), using sec-tions 02-21 as training and section 22 for testing. We employ the Max-Ent parser, implemented by Charniak (1999), to generate a list of k -best PS candidates for the test sentences, which are then converted into TDS representation.

Instead of using Charniak X  X  parser in its origi-nal settings, we train it on a version of the corpus in which we add a special suffix to constituents based on the observation that the TDS formalism well captures the argument structure of verbs, and we believe that this additional information might benefit our model.

We then applied our probabilistic model to re-rank the list of available k -best TDS, and evalu-ate the selected candidates using several metrics which will be introduced next. 3.4 Evaluation Metrics for TDS The re-ranking framework described above, al-lows us to keep track of the original PS of each TDS candidate. This provides an implicit advan-tage for evaluating our system, viz. it allows us to evaluate the re-ranked structures both in terms of the standard evaluation benchmark on the original PS (F-score) as well as on more refined metrics derived from the converted TDS representation. In addition, the specific head assignment that the TDS conversion procedure performs on the origi-nal PS, allows us to convert every PS candidate to a standard projective DS, and from this represen-tation we can in turn compute the standard bench-mark evaluation for DS, i.e. unlabeled attachment
Concerning the TDS representation, we have formulated 3 evaluation metrics which reflect the accuracy of the chosen structure with respect to the gold structure (the one derived from the manually annotated PS), regarding the different components of the representation: Block Detection Score (BDS) : the accuracy of de-tecting the correct boundaries of the blocks in the Block Attachment Score (BAS) : the accuracy of detecting the correct governing block of each Junction Detection Score (JDS) : the accuracy of detecting the correct list of content-words com-3.5 Results Table 2 reports the results we obtain when re-ranking with our model an increasing number of k -best candidates provided by Charniak X  X  parser (the same results are shown in the left graph of Figure 2). We also report the results relative to a PCFG-reranker obtained by computing the prob-ability of the k -best candidates using a standard vanilla-PCFG model derived from the same train-ing corpus. Moreover, we evaluate, by means of an oracle, the upper and lower bound of the F-Score and JDS metric, by selecting the structures which maximizes/minimizes the results.

Our re-ranking model performs rather well for a limited number of candidate structures, and out-performs Charniak X  X  model when k = 5 . In this case we observe a small boost in performance for the detection of junction structures, as well as for all other evaluation metrics, except for the BDS.
The right graph in Figure 2 compares the F-score performance of the TDS-reranker against the PCFG-reranker. Our system consistently outper-forms the PCFG model on this metric, as for UAS, and BAS. Concerning the other metrics, as the number of k -best candidates increases, the PCFG model outperforms the TDS-reranker both accord-ing to the BDS and the JDS.

Unfortunately, the performance of the re-ranking model worsens progressively with the in-crease of k . We find that this is primarily due to the lack of robustness of the model in detecting the block boundaries. This suggests that the system might benefit from a separate preprocessing step which could chunk the input sentence with higher accuracy (Sang et al., 2000). In addition the same module could detect local (intra-clausal) coordina-tions, as illustrated by (Marin  X  ci  X  c et al., 2009). In this paper, we have presented a probabilistic generative model for parsing TDS syntactic rep-resentation of English sentences. We have given evidence for the usefulness of this formalism: we consider it a valid alternative to commonly used PS and DS representations, since it incorporates the most relevant features of both notations; in ad-dition, it makes use of junction structures to repre-sent coordination, a linguistic phenomena highly abundant in natural language production, but of-ten neglected when it comes to evaluating parsing resources. We have therefore proposed a special evaluation metrics for junction detection, with the hope that other researchers might benefit from it in the future. Remarkably, Charniak X  X  parser per-forms extremely well in all the evaluation metrics besides the one related to coordination.

Our parsing results are encouraging: the over-all system, although only when the candidates are highly reliable, can improve on Charniak X  X  parser on all the evaluation metrics with the exception of chunking score (BDS). The weakness on perform-ing chunking is the major factor responsible for the lack of robustness of our system. We are con-sidering to use a dedicated pre-processing module to perform this step with higher accuracy.
 Acknowledgments The author gratefully ac-knowledge funding by the Netherlands Organiza-tion for Scientific Research (NWO): this work is funded through a Vici-grant  X  X ntegrating Cogni-tion X  (277.70.006) to Rens Bod. We also thank 3 anonymous reviewers for very useful comments.
