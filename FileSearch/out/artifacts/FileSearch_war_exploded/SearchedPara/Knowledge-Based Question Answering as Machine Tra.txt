 Knowledge-based question answering (KB-QA) computes answers to natural language (NL) ques-tions based on existing knowledge bases (KBs). Most previous systems tackle this task in a cas-caded manner: First, the input question is trans-formed into its meaning representation (MR) by an independent semantic parser (Zettlemoyer and Collins, 2005; Mooney, 2007; Artzi and Zettle-moyer, 2011; Liang et al., 2011; Cai and Yates, 2013; Poon, 2013; Artzi et al., 2013; Kwiatkowski et al., 2013; Berant et al., 2013); Then, the answer-s are retrieved from existing KBs using generated MRs as queries.

Unlike existing KB-QA systems which treat se-mantic parsing and answer retrieval as two cas-caded tasks, this paper presents a unified frame-work that can integrate semantic parsing into the question answering procedure directly. Borrow-ing ideas from machine translation (MT), we treat the QA task as a translation procedure. Like MT, CYK parsing is used to parse each input question, and answers of the span covered by each CYK cel-l are considered the translations of that cell; un-like MT, which uses offline-generated translation tables to translate source phrases into target trans-lations, a semantic parsing-based question trans-lation method is used to translate each span into its answers on-the-fly, based on question patterns and relation expressions. The final answers can be obtained from the root cell. Derivations generated during such a translation procedure are modeled by a linear model, and minimum error rate train-ing (MERT) (Och, 2003) is used to tune feature weights based on a set of question-answer pairs.
Figure 1 shows an example: the question direc-tor of movie starred by Tom Hanks is translated to one of its answers Robert Zemeckis by three main steps: (i) translate director of to director of ; (ii) translate movie starred by Tom Hanks to one of it-s answers Forrest Gump ; (iii) translate director of Forrest Gump to a final answer Robert Zemeckis . Note that the updated question covered by Cell[0, 6] is obtained by combining the answers to ques-tion spans covered by Cell[0, 1] and Cell[2, 6]. The contributions of this work are two-fold: (1) We propose a translation-based KB-QA method that integrates semantic parsing and QA in one unified framework. The benefit of our method is that we don X  X  need to explicitly generate com-plete semantic structures for input questions. Be-
Figure 1: Translation-based KB-QA example sides which, answers generated during the transla-tion procedure help significantly with search space pruning. (2) We propose a robust method to trans-form single-relation questions into formal triple queries as their MRs, which trades off between transformation accuracy and recall using question patterns and relation expressions respectively. 2.1 Overview Formally, given a knowledge base KB and an N-L question Q , our KB-QA method generates a set of formal triples-answer pairs { X  X  , A X  X  as deriva-tions, which are scored and ranked by the distribu-tion P (  X  X  , A X  X KB , Q ) defined as follows: P  X  KB denotes a knowledge base 1 that stores a  X  H ( Q ) denotes the search space { X  X  , A X  X  . D  X  h i (  X  ) denotes the i th feature function.  X   X  i denotes the feature weight of h i (  X  ) . According to the above description, our KB-QA method can be decomposed into four tasks as: (1) search space generation for H ( Q ) ; (2) ques-tion translation for transforming question spans in-to their corresponding formal triples; (3) feature design for h i (  X  ) ; and (4) feature weight tuning for {  X  i } . We present details of these four tasks in the following subsections one-by-one. 2.2 Search Space Generation We first present our translation-based KB-QA method in Algorithm 1, which is used to generate H ( Q ) for each input NL question Q .

Algorithm 1: Translation-based KB-QA
The first half (from Line 1 to Line 13) gen-erates a formal triple set T for each unary span Q QTrans ( Q j input. Each triple t  X  T returned is in the form of { e sbj ,p,e obj } , where e sbj  X  X  mention occurs in Q p is a predicate that denotes the meaning expressed by the context of e sbj in Q j Q plementation detail of QTrans (  X  ) in Section 2.3.
The second half (from Line 14 to Line 31) first updates the content of each bigger span Q j catenating the answers to its any two consecutive smaller spans covered by Q j QTrans ( Q j the updated span (Line 19). The above operations are equivalent to answering a simplified question, which is obtained by replacing the answerable spans in the original question with their corre-sponding answers. The search space H ( Q ) for the entire question Q is returned at last (Line 31). 2.3 Question Translation The purpose of question translation is to translate a span Q to a set of formal triples T . Each triple t  X  T is in the form of { e sbj ,p,e obj } , where e sbj  X  X  mention 3 occurs in Q , p is a predicate that denotes the meaning expressed by the context of e sbj in Q , e obj is an answer to Q retrieved from KB us-ing a triple query q = { e sbj ,p, ? } . Note that if no predicate p or answer e obj can be generated, {Q ,Null, Q} will be returned as a special triple, which sets e obj to be Q itself, and p to be Null . This makes sure the un-answerable spans can be passed on to the higher-level operations.

Question translation assumes each span Q is a single-relation question (Fader et al., 2013). Such assumption simplifies the efforts of semantic pars-ing to the minimum question units, while leaving the capability of handling multiple-relation ques-tions (Figure 1 gives one such example) to the out-er CYK-parsing based translation procedure. Two question translation methods are presented in the rest of this subsection, which are based on ques-tion patterns and relation expressions respectively. 2.3.1 Question Pattern-based Translation A question pattern QP includes a pattern string QP pattern , which is composed of words and a slot
Algorithm 2: QP -based Question Translation symbol [ Slot ] , and a KB predicate QP predicate , which denotes the meaning expressed by the con-text words in QP pattern .

Algorithm 2 shows how to generate formal triples for a span Q based on question pattern-s ( QP -based question translation). For each en-tity mention e Q  X  Q , we replace it with [ Slot ] and obtain a pattern string Q pattern (Line 3). If Q struct a triple query q (Line 9) using QP predicate as its predicate and one of the KB entities re-turned by Disambiguate ( e Q , QP predicate ) as it-s subject entity (Line 6). Here, the objective of Disambiguate ( e Q , QP predicate ) is to output a set of disambiguated KB entities E in KB . The name of each entity returned equals the input entity mention e Q and occurs in some assertions where QP predicate are the predicates. The underlying idea is to use the context (predicate) information to help entity disambiguation. The answers of q are returned by AnswerRetrieve ( q, KB ) based on q and KB (Line 10), each of which is used to con-struct a formal triple and added to T for Q (from Line 11 to Line 16). Figure 2 gives an example.
Question patterns are collected as follows: First, 5W queries, which begin with What, Where, Who, When, or Which, are selected from a large scale query log of a commercial search engine; Then, a cleaned entity dictionary is used to annotate each query by replacing all entity mentions it contains with the symbol [ Slot ] . Only high-frequent query patterns which contain one [ Slot ] are maintained; Figure 2: QP -based question translation example Lastly, annotators try to manually label the most-frequent 50,000 query patterns with their corre-sponding predicates, and 4,764 question patterns with single labeled predicates are obtained.
From experiments (Table 3 in Section 4.3) we can see that, question pattern based question trans-lation can achieve high end-to-end accuracy. But as human efforts are needed in the mining proce-dure, this method cannot be extended to large scale very easily. Besides, different users often type the questions with the same meaning in different NL expressions. For example, although the question Forrest Gump was directed by which moviemaker means the same as the question Q in Figure 2, no question pattern can cover it. We need to find an alternative way to alleviate such coverage issue. 2.3.2 Relation Expression-based Translation Aiming to alleviate the coverage issue occurring in QP -based method, an alternative relation expres-sion ( RE ) -based method is proposed, and will be used when the QP -based method fails.

We define RE p as a relation expression set for a given KB predicate p  X  KB . Each relation ex-pression RE  X  X E p includes an expression string RE expression , which must contain at least one con-tent word, and a weight RE weight , which denotes the confidence that RE expression can represent p  X  X  meaning in NL. For example, is the director of is one relation expression string for the predicate Film.Film.Director , which means it is usually used to express this relation (predicate) in NL.
Algorithm 3 shows how to generate triples for a question Q based on relation expressions. For each possible entity mention e Q  X  Q and a K-B predicate p  X  KB that is related to a KB enti-ty e whose name equals e Q , Sim ( e Q , Q , RE p ) is computed (Line 5) based on the similarity between question context and RE p , which measures how likely Q can be transformed into a triple query
Algorithm 3: RE -based Question Translation q = { e,p, ? } . If this score is larger than 0 , which means there are overlaps between Q  X  X  context and RE p , then q will be used as the triple query of Q , and a set of formal triples will be generated based on q and KB (from Line 7 to Line 15). The compu-tation of Sim ( e Q , Q , RE p ) is defined as follows: X where n is the n-gram order which ranges from 1 to 5,  X  n is an n-gram occurring in Q without over-lapping with e Q and containing at least one con-tent word, P (  X  n |RE p ) is the posterior probability which is computed by: P (  X  n |RE p ) = Count (  X , RE p ) denotes the weighted sum of times that  X  occurs in RE p : Count (  X , RE p ) = where #  X  ( RE ) denotes the number of times that by the relation expression extraction component.
Figure 3 gives an example, where n-grams with rectangles are the ones that occur in both Q  X  X  con-text and the relation expression set of a given pred-icate p = Film.Film.Director . Unlike the QP -based method which needs a perfect match, the Figure 3: RE -based question translation example RE -based method allows fuzzy matching between Q and RE p , and records this (Line 13) in generat-ed triples, which is used as features later.
Relation expressions are mined as follows: Giv-en a set of KB assertions with an identical predi-cate p , we first extract all sentences from English pair of entities occurring in one assertion. Then, we extract the shortest path between paired entities in the dependency tree of each sentence as an RE candidate for the given predicate. The intuition is that any sentence containing such entity pairs oc-cur in an assertion is likely to express the predi-cate of that assertion in some way. Last, all rela-tion expressions extracted are filtered by heuristic rules, i.e., the frequency must be larger than 4, the length must be shorter than 10, and then weighted by the pattern scoring methods proposed in (Ger-ber and Ngomo, 2011; Gerber and Ngomo, 2012). For each predicate, we only keep the relation ex-pressions whose pattern scores are larger than a pre-defined threshold. Figure 4 gives one relation expression extraction example. The statistics and overall quality of the relation expressions are list-ed in Section 4.1. 2.3.3 Question Decomposition Sometimes, a question may provide multiple con-straints to its answers. movie starred by Tom Han-ks in 1994 is one such question. All the films as the answers of this question should satisfy the fol-lowing two constraints: (1) starred by Tom Hanks ; and (2) released in 1994 . It is easy to see that such questions cannot be translated to single triples.
We propose a dependency tree-based method to handle such multiple-constraint questions by (i) decomposing the original question into a set of sub-questions using syntax-based patterns; and (ii) intersecting the answers of all sub-questions as the final answers of the original question. Note, ques-tion decomposition only operates on the original question and question spans covered by complete dependency subtrees. Four syntax-based patterns (Figure 5) are used for question decomposition. If a question matches any one of these patterns, then sub-questions are generated by collecting the path-s between n 0 and each n i ( i &gt; 0) in the pattern, where each n denotes a complete subtree with a noun, number, or question word as its root node, the symbol  X  above prep  X  denotes this preposition can be skipped in matching. For the question men-tioned at the beginning, its two sub-questions gen-erated are movie starred by Tom Hanks and movie starred in 1994 , as its dependency form matches pattern (a). Similar ideas are used in IBM Wat-son (Kalyanpur et al., 2012) as well. Figure 5: Four syntax-based patterns for question decomposition
As dependency parsing is not perfect, we gen-erate single triples for such questions without con-sidering constraints as well, and add them to the is used to boost triples that are converted from sub-questions generated by question decomposition. The more constraints an answer satisfies, the bet-ter. Obviously, current patterns used can X  X  cover all cases but most-common ones. We leave a more general pattern mining method for future work. 2.4 Feature Design The objective of our KB-QA system is to seek the derivation  X   X  D ,  X  A X  that maximizes the probability P (  X  X  , A X  X KB , Q ) described in Section 2.1 as:  X   X 
D ,  X  A X  = argmax We now introduce the feature sets { h i (  X  ) } that are used in the above linear model:  X  h question word (  X  ) , which counts the number of  X  h span (  X  ) , which counts the number of spans  X  h syntax subtree (  X  ) , which counts the number  X  h triple (  X  ) , which counts the number of triples
For each assertion { e sbj ,p,e obj } stored in KB , e sbj .static rank and e obj .static rank denote the static rank scores 5 for e sbj and e obj respectively; e obj .confidence rank represents the probability p ( e obj | e sbj ,p ) . These three scores are used as fea-tures to rank answers generated in QA procedure. 2.5 Feature Weight Tuning Given a set of question-answer pairs {Q i , A ref as the development (dev) set, we use the minimum error rate training (MERT) (Och, 2003) algorithm to tune the feature weights  X  M i in our proposed model. The training criterion is to seek the feature weights that can minimize the accumulated errors of the top-1 answer of questions in the dev set: N is the number of questions in the dev set, A ref is the correct answers as references of the i th ques-tion in the dev set,  X  A i is the top-1 answer candi-date of the i th question in the dev set based on feature weights  X  M 1 , Err (  X  ) is the error function which is defined as: where  X  ( A ref equals 1 when  X  A i is included in the reference set A Our work intersects with two research directions: semantic parsing and question answering.

Some previous works on semantic pars-ing (Zelle and Mooney, 1996; Zettlemoyer and Collins, 2005; Wong and Mooney, 2006; Zettle-moyer and Collins, 2007; Wong and Mooney, 2007; Kwiatkowski et al., 2010; Kwiatkowski et al., 2011) require manually annotated logical forms as supervision, and are hard to extend result-ing parsers from limited domains, such as GEO, JOBS and ATIS, to open domains. Recent work-s (Clarke and Lapata, 2010; Liang et al., 2013) have alleviated such issues using question-answer pairs as weak supervision, but still with the short-coming of using limited lexical triggers to link NL phrases to predicates. Poon (2013) has proposed an unsupervised method by adopting grounded-learning to leverage the database for indirect su-pervision. But transformation from NL questions to MRs heavily depends on dependency parsing results. Besides, the KB used (ATIS) is limited as well. Kwiatkowski et al. (2013) use Wiktionary and a limited manual lexicon to map POS tags to a set of predefined CCG lexical categories, which aims to reduce the need for learning lexicon from training data. But it still needs human efforts to de-fine lexical categories, which usually can not cover all the semantic phenomena.
 Berant et al. (2013) have not only enlarged the KB used for Freebase (Google, 2013), but also used a bigger lexicon trigger set extracted by the open IE method (Lin et al., 2012) for NL phrases to predicates linking. In comparison, our method has further advantages: (1) Question answering and semantic parsing are performed in an join-t way under a unified framework; (2) A robust method is proposed to map NL questions to their formal triple queries, which trades off the mapping quality by using question patterns and relation ex-pressions in a cascaded way; and (3) We use do-main independent feature set which allowing us to use a relatively small number of question-answer pairs to tune model parameters.

Fader et al. (2013) map questions to formal (triple) queries over a large scale, open-domain database of facts extracted from a raw corpus by ReVerb (Fader et al., 2011). Compared to their work, our method gains an improvement in two aspects: (1) Instead of using facts extracted us-ing the open IE method, we leverage a large scale, high-quality knowledge base; (2) We can han-dle multiple-relation questions, instead of single-relation queries only, based on our translation based KB-QA framework.

Espana-Bonet and Comas (2012) have proposed an MT-based method for factoid QA. But MT in there work means to translate questions into n -best translations, which are used for finding simi-lar sentences in the document collection that prob-ably contain answers. Echihabi and Marcu (2003) have developed a noisy-channel model for QA, which explains how a sentence containing an an-swer to a given question can be rewritten into that question through a sequence of stochastic opera-tions. Compared to the above two MT-motivated QA work, our method uses MT methodology to translate questions to answers directly. 4.1 Data Sets Following Berant et al. (2013), we use the same subset of WEBQUESTIONS (3,778 questions) as the development set (Dev) for weight tuning in MERT, and use the other part of WEBQUES-TIONS (2,032 questions) as the test set (Test). Ta-ble 1 shows the statistics of this data set. Table 1: Statistics of evaluation set. # Questions is the number of questions in a data set, # Words is the averaged word count of a question.

Table 2 shows the statistics of question patterns and relation expressions used in our KB-QA sys-tem. As all question patterns are collected with hu-man involvement as we discussed in Section 2.3.1, the quality is very high ( 98% ). We also sample 1,000 instances from the whole relation expression set and manually label their quality. The accuracy is around 89% . These two resources can cover 566 head predicates in our KB. Table 2: Statistics of question patterns and relation expressions. 4.2 KB-QA Systems Since Berant et al. (2013) is one of the latest work which has reported QA results based on a large scale, general domain knowledge base (Free-base), we consider their evaluation result on WE-BQUESTIONS as our baseline.

Our KB-QA system generates the k -best deriva-tions for each question span, where k is set to 20. The answers with the highest model scores are considered the best answers for evaluation. For evaluation, we follow Berant et al. (2013) to al-low partial credit and score an answer using the F1 measure, comparing the predicted set of entities to the annotated set of entities.
 One difference between these two systems is the KB used. Since Freebase is completely contained by our KB, we disallow all entities which are not included by Freebase. By doing so, our KB pro-vides the same knowledge as Freebase does, which means we do not gain any extra advantage by us-ing a larger KB. But we still allow ourselves to use the static rank scores and confidence scores of entities as features, as we described in Section 2.4. 4.3 Evaluation Results We first show the overall evaluation results of our KB-QA system and compare them with baseline X  X  results on Dev and Test. Note that we do not re-implement the baseline system, but just list their evaluation numbers reported in the paper. Com-parison results are listed in Table 3.
 Table 3: Accuracy on evaluation sets. Accuracy is defined as the number of correctly answered ques-tions divided by the total number of questions.
Table 3 shows our KB-QA method outperforms baseline on both Dev and Test. We think the po-tential reasons of this improvement include:  X  Different methods are used to map NL phras- X  Question patterns are used to map NL context
In order to figure out the impacts of question patterns and relation expressions, another exper-iment (Table 4) is designed to evaluate their in-dependent influences, where QP only and RE only denote the results of KB-QA systems which only allow question patterns and relation expressions in question translation respectively.
 Table 4: Impacts of question patterns and relation expressions. Precision is defined as the num-ber of correctly answered questions divided by the number of questions with non-empty answers gen-erated by our KB-QA system.
 From Table 4 we can see that the accuracy of RE only on Test ( 32 . 5% ) is slightly better than baseline X  X  result ( 31 . 4% ). We think this improve-ment comes from two aspects: (1) The quality of the relation expressions is better than the quality of the lexicon entries used in the baseline; and (2) We use the extraction-related statistics of re-lation expressions as features, which brings more information to measure the confidence of map-ping between NL phrases and KB predicates, and makes the model to be more flexible. Meanwhile, QP only perform worse ( 11 . 8% ) than RE only , due to coverage issue. But by comparing the precision-s of these two settings, we find QP only (97.5%) outperforms RE only (73.2%) significantly, due to its high quality. This means how to extract high-quality question patterns is worth to be studied for the question answering task.

As the performance of our KB-QA system re-lies heavily on the k -best beam approximation, we evaluate the impact of the beam size and list the comparison results in Figure 6. We can see that as we increase k incrementally, the accuracy increase at the same time. However, a larger k (e.g. 200) cannot bring significant improvements comparing to a smaller one (e.g., 20), but using a large k has a tremendous impact on system efficiency. So we choose k = 20 as the optimal value in above ex-periments, which trades off between accuracy and efficiency.
Actually, the size of our system X  X  search space is much smaller than the one of the semantic parser used in the baseline.This is due to the fact that, if triple queries generated by the question translation component cannot derive any answer from KB, we will discard such triple queries directly during the QA procedure. We can see that using a small k can achieve better results than baseline, where the beam size is set to be 200. 4.4 Error Analysis 4.4.1 Entity Detection Since named entity recognizers trained on Penn TreeBank usually perform poorly on web queries, We instead use a simple string-match method to detect entity mentions in the question using a cleaned entity dictionary dumped from our KB. One problem of doing so is the entity detection issue. For example, in the question who was Es-ther X  X  husband ? , we cannot detect Esther as an entity, as it is just part of an entity name. We need an ad-hoc entity detection component to handle such issues, especially for a web scenario, where users often type entity names in their partial or ab-breviation forms. 4.4.2 Predicate Mapping Some questions lack sufficient evidences to detec-t predicates. where is Byron Nelson 2012 ? is an example. Since each relation expression must con-tain at least one content word, this question cannot match any relation expression. Except for Byron Nelson and 2012 , all the others are non-content words.

Besides, ambiguous entries contained in rela-tion expression sets of different predicates can bring mapping errors as well. For the follow-ing question who did Steve Spurrier play pro football for? as an example, since the unigram play exists in both Film.Film.Actor and Ameri-can Football.Player.Current Team  X  X  relation ex-pression sets, we made a wrong prediction, which led to wrong answers. 4.4.3 Specific Questions Sometimes, we cannot give exact answers to superlative questions like what is the first book Sherlock Holmes appeared in? . For this example, we can give all book names where Sherlock Holmes appeared in, but we cannot rank them based on their publication date , as we cannot learn the alignment between the constraint word first occurred in the question and the predicate Book.Written Work.Date Of First Publication from training data automatically. Although we have followed some work (Poon, 2013; Liang et al., 2013) to handle such special linguistic phenomena by defining some specific operators, it is still hard to cover all unseen cases. We leave this to future work as an independent topic. This paper presents a translation-based KB-QA method that integrates semantic parsing and QA in one unified framework. Comparing to the base-line system using an independent semantic parser with state-of-the-art performance, we achieve bet-ter results on a general domain evaluation set.
Several directions can be further explored in the future: (i) We plan to design a method that can extract question patterns automatically, using ex-isting labeled question patterns and KB as weak supervision. As we discussed in the experiment part, how to mine high-quality question patterns is worth further study for the QA task; (ii) We plan to integrate an ad-hoc NER into our KB-QA sys-tem to alleviate the entity detection issue; (iii) In fact, our proposed QA framework can be general-ized to other intelligence besides knowledge bases as well. Any method that can generate answers to questions, such as the Web-based QA approach, can be integrated into this framework, by using them in the question translation component.
