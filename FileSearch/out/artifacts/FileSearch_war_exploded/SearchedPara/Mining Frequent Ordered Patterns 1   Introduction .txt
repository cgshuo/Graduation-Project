 Mining frequent patterns from a large database is important and interesting to the fun-damental research in the mining of association rule. It is also play an essential role in frequent itemsets efficiently. 
However, very little work has been done on the problem of mining in the case that some order existing between items of a transaction. Agrawal [8] have studied the problem of mining sequential patterns. But, the order in sequential patterns mining is such as Web user navigation modeling, items of a set (or transaction) are ordered and the order existing between items must be considered in mining useful patterns. 
In this paper, we first bring forward the problem of mining frequent ordered pat-terns and design efficient algorithms for this problem. As far as we know, this paper is the first one that systemically presents the study of mining frequent ordered patterns. There is no related study has been reported. 
The organization of the rest of the paper is as follows. In section 2, we give a for-mal statement of the problem. In section 3, we present our algorithms for mining fre-quent ordered patterns. In section 4, we present some experimental results. In section 5, we conclude with a summary and point out some future research issues.
 briefly state some terminology. Let I = { a 1 , a 2 , ... , a m } be a set of items. a called an ordered pattern . The number of items in A is called its length. An ordered use expression a i &lt; A a j to denote that there exists a i &lt; a j in A . B  X  A ; (2)  X  a
The first condition requires that B should be a subset of A from the point of view of a subset of A , We also call A contains B and denote B { A . Lemma 1: Given three ordered patterns A , B , and C , B { A  X  C { B C { A . Proof. B { A implies that B  X  A . C { B implies that B  X  A . As a result, we have C  X  &lt; Lemma 1 shows that subset relation between ordered patterns is transitive.
 Definition 3 (ordered transaction): a transaction T , which contains a set of items in transactions is called an ordered transaction database. 
Based on above definitions, we have the definition of frequent ordered patterns as follows.
 port threshold  X  . 
Given an ordered transaction database ODB and a minimum support threshold  X  , the problem of finding the complete set of frequent ordered patterns is called the fre-quent ordered pattern mining problem. 3.1 Some Properties Before embarking on the algorithm description, we will briefly introduction some properties of frequent ordered patterns. Let  X  be the predefined threshold, and a data-the following property. which are also called supersets of A , must be infrequent.
 containing B , T i must contain A by Lemma 1. That is, The support of A must be great with the fact that A is infrequent. Therefore, our assumption is wrong and B should be infrequent. 
Property 1 shows that the Apriori property, which is the basic of mining of frequent all ordered frequent patterns from short patterns to long patterns. 3.2 ABMFOP Algorithm For mining frequent ordered patterns, we employ an iterative approach known as a which is the set of frequent ordered 2-patterns, and then OL 2 is used to find OL 3 , and so on, until no more frequent ordered i -patterns can be found. The finding of each OL i requires one scan of the database. To improve the efficiency of the level-wise genera-tion of frequent ordered patterns, Property 1 are used to narrow the range of search. 
Based on above discussion, we design an algorithm called ABMFOP. ABMFOP is abbreviation for Apriori-Based Mining of Frequent Ordered Patterns. The main idea of ABMFOP is almost the same as Apriori algorithm [5] used to mine Frequent Pat-terns. But, there are some differences betweem ABMFOP and Apriori algorithm be-cause the order between items must be regarded in ABMFOP. First, the procedure of generating candidate pattern is different. Second, the procedure of judging the subset relation of two patterns is different. Gen_Candidate and Is_Subset() have more de-tails. Algorithm: ABMFOP Input: Database, ODB , of ordered transactions; minimum support threshold  X  . Output: OL , frequent ordered patterns in ODB . Method:
Procedure Gen_Candidate ( OL i -1 ) // generate candidate ordered patterns Procedure Has_Infrequent_Subset ( A , OL i -1 ). Procedure Is_Subset ( Y , X ) 3.3 ABMFOP_F Algorithm ABMFOP algorithm. Too many candidate 2-patterns make it time-consumed to find frequent ordered 2-pattern from them. Instead of generating candidate 2-patterns from frequent ordered 1-patterns, we design a more efficient algorithm called ABMFOP_F, which generates candidate 2-patterns directly from ordered transactions. This strategy greatly decreases the time for finding frequent ordered 2-patterns. ABMFOP_F is al-space, we do not describe ABMFOP_F in detail in this paper. periments are performed on a Pentium 4 PC running MS XP. All the programs are written in Microsoft/Visual C++ 6.0. The synthetic data set, T50.I10.L100k.D10K, is generated using the procedure described in [5]. We randomly change the orders of items in each transaction in order to mimic reality more effectively. ABMFOP and ABMFOP_F showed good scalability as the minimum support threshold decreased from 500 to 300. ABMFOP_F performs about 1.5 times faster than ABMFOP on av-erage. The reason is that ABMFOP_F adopts a better way, which is called subset-generating-and-counting, for finding all frequent ordered 2-patterns. not ever been proposed as far as we know. Based on the characteristic of ordered pat-study shows the effectiveness of our algorithms. In the future, we will take efforts to-wards more efficient algorithms by adopting useful ideas from many proposed algo-rithms of mining frequent patterns. 
