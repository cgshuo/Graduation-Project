 Recommender systems can be used in online forums to rec-ommend discussion topics to users; however as these forums are characterized by a constant influx of new users and new posts, it is important to consider the performance of the recommender system under a scenario in which the internal composition of the items to be recommended, i.e., discussion threads, and the user preferences are constantly changing. In this paper we describe and evaluate a forum recommender designed to handle the challenges of dynamically evolving internet forums used to gather and discuss feature requests for various software products. In particular, we empirically show that two proposed enhancements to the representa-tions of user profiles will result in improved recommendation effectiveness in dynamic environments.
 H.3.3 [ Information Search and Retrieval ]: Clustering, Information filtering; H.4.3 [ Communications Applica-tions ]: Bulletin boards.
 Algorithms, Experimentation, Human Factors.
 Collaborative recommender systems, Online forums, posts, threads, clustering, requirements elicitation.
Online Forums provide a technological platform for com-panies, organizations and individuals to create collaborative discussions sites. The forums allow interested users to post questions, comments, suggestions and content to a dynamic and interactive website. The main purpose of these sites is to create active user communities to discuss issues and proactively collaborate towards common goals.

Normally, forums are subdivided into threads, where each thread represents a topic and serves as an asynchronous meeting place in which the users can participate in ongoing discussions. Our prior work developed a system for recom-mending discussion threads to forum users in the require-ments elicitation domain [2, 3, 4]. However this work did not consider the dynamic nature of online forums, which constantly evolve as users add new posts and new users join the forum. These ongoing changes have a potential impact on the process and quality of recommendations as modifica-tions to the structure and composition of threads represent fundamental changes in the set of recommendable items. For example, automated or user controlled thread management, which is designed to keep discussions cohesive and distinct from other threads in an active forum, can result in modified user profiles and potentially affect the performance of the recommender system. These kinds of changes are different from those we might expect to see in a typical recommender environment such as an online E-Commerce system [1, 7] in which recommendable items are simply added and removed as new products become available or are discontinued. This paper focuses on two variations of the standard K-Nearest Neighbor (KNN) algorithm [7]: Binary Profiles , and Inclusion of Known Data . Each of these techniques has been demonstrated through prior work to significantly improve the quality of standard K-Nearest Neighbor (KNN) recom-mendations in a static discussion forum [2]; however neither algorithm has previously been evaluated in a dynamically evolving environment. In the first variation, the user profiles are represented by a binary matrix that indicates the membership of the users in the threads. A membership score of 1 means the user is associated with a thread, while a score of 0 indicates he is not. More formally, this is represented by a matrix M := ( m i,j ) U  X  T , where U is the number of users and T the number of threads. This matrix is obtained from the product of A := ( a i,j ) U  X  P times B := ( b i,j ) P  X  T is the matrix of users by posts, B is the matrix of posts by threads, and P is the number of posts. Each a i,j indicates that user i has contributed the post j ; and each b i,j indicates that post i has been placed in thread j . Note that a 0 does not necessarily mean that the user is not interested in the thread; it could also mean that he has not seen or expressed interest in that thread. This representation, while coarser than traditional recommenders, is a better fit for the forum environment since users do not normally specify degrees of interest in forums or posts. Furthermore, coarser grained profiles have previously been shown to be better at deter-mining whether a user will be interested in an item without predicting his specific level of interest [6, 2].

The similarity userSim ( u, n ) between a user u and a user n is computed using the binary equivalent of the Cosine similarity metric [8]: where R corresponds to the set of forums that each user belongs to.

The predicted level of interest that a user u will have in a forum i which u has not yet joined is computed using the following formula: where r ni has a value of 1 if user n belongs to forum i , and n  X  nbr ( u ) depicts that n is a neighbor of u . This prediction formula modifies the formula described in [7], by omitting the average rating, since averages do not make sense in a binary profile. A more complete evaluation of this formula within the forum domain can be referenced at [2].
 The second variation presented is an extension to the bi-nary profiles. In this variation, additional known meta-data about the users is added to their profile representation. For-mally, the profiles matrix M := ( m i,j ) U  X  ( K + T ) now includes K columns where users can indicate if they have an interest in a known meta-data element. Table 1 shows a schematic example of this.
 Table 1: Users X  Profiles with additional Known Data
In the requirements elicitation domain, known data can include roles that the stakeholders play in the project, inter-ests in key features of the system, and interests in cross cut-ting concerns such as security or usability [2]. In other do-mains this data could either be solicited during registration, or could automatically be determined by machine learning mechanisms. Known items of interest are then used to de-velop richer user profiles in order to construct more accurate neighborhoods. The known items do not represent recom-mendable items. Formula 2 is still used in this variation. Three datasets are used throughout this paper: Student , SecondLife and Railway . Student is a small dataset created by 36 graduate level students at DePaul describing their needs for an Amazon-like student web portal where the stu-dents could buy and sell books. SecondLife is an Internet-based video game in which players are represented by avatars that interact in a virtual world. This dataset was mined from the feature requests posted by users on the SecondLife fo-rum. Railway was created by mining requirements from the public specifications of two large scale railway systems, the Canadian Rail Operating Rules and the Standard Code of Operating rules published by the Association of American Railroads. The specification included a listing of roles, and team members from the SAREC research lab created sim-ulated stakeholders (users) for each role and then assigned feature requests to an appropriate set of them. Table 2 il-lustrates some of the basic overall statistics of the datasets. Recommendations were only made to users who had con-tributed at least three posts -otherwise their profiles were too sparse to correctly infer neighborhoods. This reduces the size of the final profile matrix, as indicated in table 2.
Two of the datasets, Student and Railway have additional known data that was used to augment the users X  profile. For Student the known data consisted of 9 roles that the users selected when they entered their posts. The known data for Railway consisted of 14 roles and 11 key domain concepts. These concepts were mined from a separate document using a technique developed to create project glossaries [2]. Team members from the SAREC research lab assigned interests to the users according to the posts they contributed.

Throughout this paper, the performance of the recom-mender system is evaluated empirically, using a standard leave-one-out cross validation technique [5]. In this tech-nique, each individual user X  X  interest is removed ( m try in the matrix M ) and the recommender system is exe-cuted. The rank at which each individual item is returned is recorded and a hit ratio graph is plotted. This graph shows the percentage of forums that were recommended back in the top 1 result, top 2 results, and so on. As a point of comparison, the hit ratio graph also shows the performance of a random recommender system, shown as a straight di-agonal line. This type of evaluation also alleviates the dis-crepancy that arises from the prediction formula producing values that range between 0 and 1 and the fact that the pro-files are binary. By using the hit ratio graph the actual value of the prediction is not considered, instead its relative posi-tion in the list of recommendations is used. Ideally, a good recommender system will have a line above the random line, with higher percentages retrieved within the first results. The rationale behind this evaluation is to determine how well the recommender system can re-create the user profile, using the removed item as the evaluation set and the rest of the matrix as the training set. Further analysis of how this recommender system performs using the Mean Absolute Error -MAE evaluation is provided in [2].
This section reports the experimental results for the rec-ommender system within a static environment. In the fol-lowing sections we analyze the impact of a changing envi-ronment on the quality of the recommendations.

For puposes of this experiment, the posts in the dataset were clustered using Spherical K-Means, and the user pro-files were generated a single time. Both variations of the recommender system algorithm described in section 2 were used: binary profiles and inclusion of known data . Experi-ments were conducted against each of the three datasets for the binary profiles variation, while only Student and Rail-way were used for the inclusion of known data variation. The leave-one-out empirical validation method described in the previous section was executed. Due to space constraints the corresponding Hit Ratio results are shown for Railway data only in Figure 1 (adapted from [2]); however they are representative of the results for all three datasets.
The binary recommender outperformed the random rec-ommender, and in all three cases approximately 50% to 60% of the items recommended within the first 10 results were originally in the user profile. Although not shown here, both of these recommenders significantly outperformed the stan-dard KNN approach, which returned only minimally better results than the random recommender in prior experiments [2]. Also, it is notable that the inclusion of known data for the Student and Railway dataset returned the best perfor-mance of all. The additional information known about the stakeholders X  interests created a richer user X  X  profile, and allowed for more connections with other users and better neighborhoods. This resulted in approximately 65-70% of known interests being recommended back in the first 5 rec-ommendations.
In this section we evaluate the performance of the rec-ommender system when the forum evolves as a result of new posts being added, or as a result of an existing thread splitting to accommodate emerging discussion topics. To simulate this type of environment an initial set of 100 posts were randomly selected from each dataset as a starting set, and then at each successive step an additional 25 randomly selected posts were added. Periodically the posts were re-clustered to preserve theme cohesion [2]. Because the posts are associated with users, the number of users grew as their first post was added to the forum. In the case of both the Secondlife and Railway datasets, there were additional users who did not necessarily contribute their own comments, but who registered their interest in other people X  X  comments. Each simulation was repeated ten times, and unless other-wise stated, all results represent the average of the ten runs.
Figure 2 plots several metrics of the system against the number of posts. These include the number of users, num-ber of threads, number of thread memberships and the num-ber of user movements, which are all plotted in the primary y-axis (left hand side). The number of thread memberships is defined as the number of entries in M := ( m i,j where an entry in this matrix represents the membership of a stakeholder in a specific thread. The number of user movements represents the number of times the users are moved from one thread to another as the result of the peri-odical re-clusterings or splitting of a non-cohesive discussion thread. For example, a user with one or more posts moved from thread t1 to t2 , and one or more posts moved from t3 to t4 , would count as two user movements. In addition, in the secondary y-axis (right hand side) the percentage of user movements is shown. This metric is computed as the number of user movements divided by the number of thread memberships; in effect it represents a normalized metric that indicates how much the thread memberships are changing.
These graphs show that the number of users increased linearly with the number of posts. The number of thread memberships also increases linearly. Second, in all of these datasets the number of threads stabilized early on, only increasing slightly as the number of posts increases. In contrast, although the absolute number of user moves was quite low, the behavior was somewhat erratic at first, but as the system matured and the full range of topics were discovered, the threads became more stable and user move-ment decreased. The student dataset exhibited significantly higher levels of stakeholder-thread volatility than the other two datasets, which could be attributed to the fact that this dataset had less distinct themes, which in turn led to less clearly defined user interests and increased difficulties in building clear user profiles and making high quality rec-ommendations.
A series of experiments were conducted to evaluate the performance of the recommender system under the expected incremental evolution. A leave-one-out evaluation strategy was employed at each incremental step and the performance scores recorded. This was repeated until all the posts in the datasets had been included. The experiment was repeated ten times and average results are reported. Figure 3 shows how the percentage retrieved changes (y-axis) as the number of posts in the system increases (x-axis), for the first 10 recommendations made to the user. The solid lines in the graph correspond to the average results for the 10 runs, and the dotted lines correspond to the results of a single run.
On a single run the performance of the recommender was seen to fluctuate. Consistent with previous experiments, the inclusion of known data clearly outperformed the bi-nary profile recommender, and led to increased stability in the recommendations. The binary profile recommender ex-hibited an initial decrease in its performance, followed by a slow steady increase. This drop is a side effect of initially having a small number of posts and threads in the system; however, following this drop, the performance reached a lo-cal minimum and then increased as the  X  X nowledge X  in the system increased. This effect was reduced in the inclusion of known data recommender because the prior knowledge compensated for early lack of posts. Finally, as the number of posts increased, the difference in performance between the binary profile and the inclusion of known data lessened. This was to be expected as the recommender started to rely more on the thread memberships than on the known data.
This paper presented two different enhancements to the standard KNN recommender, and evaluated their effective-ness with respect to an evolving internet forum. The binary recommender performed relatively well and in all three of the datasets recommended back approximately 25% to 50% of the known interests in the top ten recommendations. The experiments also clearly demonstrated the usefulness of in-corporating known data into the users X  profiles in order to enrich knowledge of the users X  interests in early stages of the forum and increase stability of the recommendations. Our future work will explore the effectiveness of a much broader set of recommendation algorithms for use in online forums. [1] C. Basu, H. Hirsh, and W. Cohen. Recommendation as [2] C. Castro-Herrera, J. Cleland-Huang, and [3] C. Castro-Herrera, C. Duan, J. Cleland-Huang, and [4] C. Castro-Herrera, C. Duan, J. Cleland-Huang, and [5] J. L. Herlocker, J. A. Konstan, L. G. Terveen, and J. T. [6] B. Mobasher, H. Dai, T. Luo, and M. Nakagawa.
 [7] J. B. Schafer, D. Frankowski, J. Herlocker, and S. Sen. [8] E. Spertus, M. Sahami, and O. Buyukkokten.

