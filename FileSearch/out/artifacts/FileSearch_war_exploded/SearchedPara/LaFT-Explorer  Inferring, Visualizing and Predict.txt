 The study of social network evolution has attracted many attentions from both the industry and academia. In this paper we demon-strate LaFT-Explorer, a general toolkit for explaining and repro-ducing the network growth process based on the friendship propa-gation. LaFT-Explorer presents multiple perspectives for analyzing the network evolution process and structure, including LaFT-Tree, LaFT-Trace and LaFT-Flow. Upon that we build LaFT-Rec, a new visualized interactive friend recommendation service based on the friendship propagation. LaFT-Rec not only shows whom one may make friends with, but also tells the user that why you should make friends with him and how you can reach him. We demonstrate our system built upon the academic social network of DBLP.
 H.2.8 [ DATABASE MANAGEMENT ]: Database Applications X  Data mining ; H.5.2 [ Information Systems ]: Information Inter-faces and Presentation X  User Interfaces ;J.4[ SOCIAL AND BE-HAVIORAL SCIENCES ]: Sociology LaFT-Explorer; LaFT-Tree; Transitivity of Friendship; Friendship Propagation; Social Networks Evolution
Online social networks attract many attentions from both the a-cademia and industry. Given a social network, an interesting ques-tion is: how does the social network grow as it is? Answering this question can benefit many applications, for example, to understand the evolving structure of the social network, to predict how the so-cial network will evolve in the future, and to recommend friends for users, etc.

While much work has been done and many patterns about net-work growth have been discovered [1][2][3], most of them focus  X  Corresponding authors: Chaokun Wang and Jianmin Wang.
 Figure 1: Amy  X  X  LaFT-Tree and corresponding egocentric net-work. In the LaFT-Tree, nodes are labeled and arranged verti-cally according to the time when they became friends of Amy . on the structural patterns of network evolution. The behavioral pat-terns, which describe the social behaviors of users, haven X  X  been investigated deeply. As the network evolution can be regarded as the result of the users X  social behaviors, mining the knowledge hid-den in the user behaviors may benefit our understanding about the network evolution.

It is thus a promising direction to combine the sociological prin-ciples and data mining techniques for behavior-driven social net-work evolution analysis. As the first step, here we introduce the transitivity of friendship [6], a well-known sociological principle which states that two persons with common friends are more likely to become friends in the future. In other words, people are more likely to make friends with the friends of their friends. We call this phenomenon as friendship propagation .

The behavior-driven social network evolution analysis based on the transitivity of friendship presents a set of challenges:
In this paper, we present LaFT-Explorer, a general toolkit which studies the social network evolution from the behavioral perspec-tive. We employ LaFT-Tree [7] for describing the growth process of one X  X  egocentric network driven by the friendship propagation. Let X  X  illustrate the LaFT-Tree with an example. A LaFT-Tree with Amy as the ego, is shown in Fig. 1(a). It shows how Amy expands her social network via her current friends, i.e. the intermediaries . In this figure we see that Amy makes friends with Bob and Carl directly first, and then via Bob she makes friends with David and George , via whom she meets more new friends including Howard , Ivan , Kevin and Larry , etc. In this tree each non-root node is a friend of the ego, and each blue node is meanwhile an intermediary via whom the ego has ever made new friends. By keeping making new friends along the paths in the LaFT-Tree, Amy gets her ego-centric network, as shown in Fig. 1(b). As LaFT-Tree provides a new perspective for explaining the network growth and analyzing the network structure in a hierarchical view, it X  X  beneficial and in-teresting to infer the LaFT-Trees for the given social networks.
LaFT-Explorer is a general toolkit for analyzing the network evo-lution and structure based on the latent friendship transitivity (that X  X  why our system is named as  X  X aFT X ). Given a social network, LaFT-Explorer provides multiple views of the network, including the LaFT-Tree and its derivants. Specifically, the major features of LaFT-Explorer include:
We summarize our main contributions as follows: We X  X l demonstrate the concepts, usage and user interaction of LaFT-Explorer through scenarios on understanding the evolution process of an academic social network built upon DBLP 1 ,which http://dblp.uni-trier.de Figure 3: The LaFT-Traces containing both Haixun Wang and Jiawei Han . contains about 329 t housands authors (node s) and 1 m illion co-author relations (edges).
Our system enables users to find their LaFT-Trees given their names as queries in the LaFT-Tree page. For example, input  X  Haix-un Wang  X  in the search box, and then our user will see his LaFT-Tree, as shown in Fig. 2. In the LaFT-Tree, the red node is the ego, as the root of the LaFT-Tree. Blue nodes are the ego X  X  intermediary friends, via whom the ego has made new friends, and green nodes are the non-intermediary friends. In this figure, our user can see that Philip S. Yu is an important intermediary via whom Haixun Wang has created co-author relationships with many researchers, including Jiawei Han , another important intermediary for Haixun Wang .
 When our user clicks on any node in the LaFT-Tree of Haixun Wang ,say Philip S. Yu , more details about his position are dis-played in the right panel, telling the intermediary via whom Haix-un Wang created relationship with Philip S. Yu and the new friends with whom Haixun Wang has created relationships via Philip S. Yu . In this figure we can see Haixun Wang created relationship with Philip S. Yu directly and via Philip S. Yu he further created rela-tionship with Ke Wang , Jiawei Han , Jeffrey Xu Yu , etc. Our user can also navigate to the LaFT-Tree of the selected researcher by clicking the link in the right panel.
One may also be interested in that how he has participated in the historical friendship propagations and helped others to expand their social networks. Each historical friendship propagation path is named as a LaFT-Trace, represented by a path from the root (ego) to any other node in the LaFT-Tree. The LaFT-Explorer provides a LaFT-Trace search service which allows one to input the name(s) of one or more person(s) to search the LaFT-Traces involving them.
For instance, our user may be interested in that the role that Haix-un Wang and Jiawei Han played together in the growth of the net-work of other researchers. Our user may input the two names in the search box in the LaFT-Trace page, and then the LaFT-Traces that contain both of them are shown, as in Fig. 3. From the figure, our user can see their relative positions in the LaFT-Trees of other researchers, including Ke Wang , Gang Wang , Jianyong Wang ,etc. From the perspective of the ego, the LaFT-Traces show the paths a-long which s/he keeps making new friends via new intermediaries. From that of the intermediaries, the LaFT-Traces can show how one has participated in the friendship propagation and promoted the growth process of others X  social circles.

By clicking on one of the LaFT-Traces, our user can navigate to the corresponding LaFT-Tree page and see the position of the selected LaFT-Trace in the LaFT-Tree. While LaFT-Tree shows how one X  X  social network has grown, LaFT-Flow depicts the latent friendship propagations in the net-work. In other words, LaFT-Flow models the trends that one X  X  friendship with someone will  X  X ropagate X  or  X  X low X  to any of her current friends. For each ego, the inward propagation is called her  X  In-Flow  X , and the outward propagation is her  X  Out-Flow  X . By depicting and visualizing the LaFT-Flow, we can easily see how the friendship will propagate in the network and predict the future shape of the network.
 Our user can view the LaFT-Flow around Haixun Wang in the LaFT-Flow page, as illustrated in Fig. 4. Each edge in LaFT-Flow indicates a possible friendship propagation direction. By clicking on an individual, our user can see the detailed information of his top out-flows and in-flows. From the figure our user can see that the friendship from Haixun Wang is likely to propagate to Gang Luo , Wenjie Zhang , Fang Chu and Muhammad Admir Cheema ,and the friendship that propagates to Haixun Wang is most likely from Wei Wang , Naoki Abe , Ariel Fuxman and Yufei Tao . The weights of each potential friendship propagation are shown in the right panel.
LaFT-Tree tells not only how the network has grown, but also how it will grow. Each node in the LaFT-Tree is a potential ex-pansion point, i.e. an intermediary, via whom the ego can make more new friends. Upon LaFT-Tree and LaFT-Flow, we provide LaFT-Rec, an interactive recommendation service in a tree-view. The recommended friends are shown as sub-nodes of the corre-sponding intermediary nodes in the LaFT-Tree. The new tree with recommendations is called the LaFT-Rec Tree.

TheLaFT-RecTreeof Haixun Wang is shown in Fig. 5. Each recommended friend is marked as yellow. By clicking on any inter-mediary, one can see the top candidate friends with whom Haixun Wang may make friends via this intermediary. In this figure, we can see Xuemin Lin is among his most preferable intermediaries. Via Xuemin Lin , he is most likely to build relationships with Bolin Ding , Guoren Wang , Lu Qin , etc., the researchers that Xuemin Lin often recommends to others and that via Xuemin Lin others usually make friends with.

Traditional recommender systems usually only give the results and don X  X  tell the user that why they are recommended. On the con-trary, LaFT-Rec Tree provides a natural way to recommend friends based on the potential friendship propagation, and reasonable ex-planations for the recommendation. Thus the user can understand how it works and further provide more targeted feedback to the rec-ommender system to improve the recommendation. Furthermore, besides the recommended friends, the LaFT-Rec also recommends the intermediaries via whom one can reach the new friends. This is really beneficial and important in many real social networks, like academic social network, where one X  X l find it easier to invite a researcher as co-author if someone who is close to both of them would like to introduce them to each other.
In this section, we introduce how we build the system.
The key components of our system are shown in Fig. 6. The system takes the evolution log of a given social network as input. The log contains friend-making log and interaction log, in the triple format of &lt;initiator _ id, receiver _ id, time &gt; . The triples are sorted by time and split into multiple periods. Then for each period we apply and infer the LaFT-LDA model [7] in cascade, and after-wards we build the LaFT-Trees and LaFT-Flows from the learned model. Given the LaFT-Trees, we index all the LaFT-Traces and provide a search interface. Furthermore, based on the LaFT-Trees and LaFT-Flows we build the LaFT-Rec, an interactive friend rec-ommendation service for each user. All of them are then visualized and can be accessed by a browser.
A LaFT-Tree consists of an ego as the root and her friends as non-root nodes. An edge z  X  v in the LaFT-Tree of ego u indicates that u makes friends with v via z .Inotherwords, z is the intermediary for u and v . Thus the key problem for learning LaFT-Tree is the inference for the intermediary of each friendship.

To learn the intermediaries, we adopt LaFT-LDA [7], a gener-ative model of social behaviors. LaFT-LDA models one X  X  friend-making behaviors using such process: Each time the ego selects one of her current friends as the intermediary first, and then choos-es one of the intermediary X  X  friends as her new friend. The inter-action behaviors are also modeled as extra evidence. The graphical representation of LaFT-LDA is shown in Fig. 7. In LaFT-LDA, the intermediary preference distribution  X  describes one X  X  preference for intermediaries when making new friends, while the friend rec-ommendation distribution  X  models one X  X  tendency to recommend her friends to others. We split the friend-making and interaction event logs by time and apply LaFT-LDA in cascade. The model can be inferred using Gibbs sampling, as stated in [7].
After the model inference on all the intervals, we can get all the intermediaries for each friendship and then build the LaFT-Trees for each ego. Then we index all the LaFT-Traces, i.e. the paths in the LaFT-Trees, by nodes, and provide a search service. As  X  in LaFT-LDA also models the probability that one X  X  friendship with someone will  X  X ropagate X  or  X  X low X  to any of her current friends, we build LaFT-Flow utilizing  X  .
Although it X  X  common to recommend the friends of current friend-s as candidate friends, traditional approaches usually don X  X  take the various influence of different current friends into consideration. With LaFT-LDA, we can learn one X  X  preference for both intermedi-aries and friends from the network growth history. Such knowledge can be utilized to improve the friend recommendation. For a pair of candidate friends u and v ,the promotion from an intermediary sible intermediaries we get LaFT-Proximity [7], a score indicating the possibility that u and v will become friends based on the 2-hop friendship propagation. According to the scores of all candidate friends, we can give the top-k recommendations.

Based on the LaFT-Flow, we can provide better friend recom-mendation by considering the friendship propagation in the global network. We propose LaFT-RW , a simplified version of the LFPN-RW [8]. In LaFT-RW, for a pair of candidate friends u and v ,the promotion from an intermediary z is defined as the product of  X  u,z and RW ( z,v ) , the probability th at a random walker starting from z arrives at v finally in the network defined by LaFT-Flow. Thus LaFT-RW score between u and v is defined as: where z enumerates each of the possible intermediaries.
Upon LaFT-Tree, we build LaFT-Rec, an interactive recommen-dation service which shows both the candidate friends and the in-termediaries for the ego to know the candidates in a tree-structure.
To evaluate the performance of our friend recommendation algo-rithm based on the friendship propagation, we conduct the link pre-diction experiments on 5 datasets, including dblp , astro-ph , cond-mat , hep-lat and hep-ph . The first one is built from DBLP while the others are from Arxiv 2 . We compare our algorithm with some popular methods, such as Adamic/Adar [4], Jaccard Coefficient [4], RWR (Random Walk with Restarts) [5]. We evaluate them using the AUC (Area Under the ROC Curve) and the results are shown in Table 1. We can see that LaFT-RW consistently outperforms other methods on our datasets.
In this paper we present LaFT-Explorer, a general toolkit for an-alyzing the network evolution based on the transitivity of friend-ship. Given the logs of a social network, LaFT-Explorer infers how the network has evolved as it is, visualizes how the friendship may propagate in the network, and predicts how the network will be-come in the future. Since the LaFT-Explorer is designed as a gen-eral toolkit, in the future we X  X l apply it on more real-world social networks, including Facebook, Twitter, LinkedIn, etc.
We X  X  like to thank Rongfei Wang for designing the user inter-face of LaFT-Explorer. This work is supported in part by the Na-tional Natural Science Foundation of China (No. 61170064, No. 61073005, No. 61133002), the National High Technology Re-search and Development Program of China (No. 2012AA011002), NSF through grants IIS-0905215, CNS-1115234, IIS-0914934, DBI-0960443, and OISE-1129076, and US Department of Army through grant W911NF-12-1-0066. [1] H. Hu and X. Wang. How people make friends in social [2] J. Leskovec, L. Backstrom, R. Kumar, and A. Tomkins. [3] C. W.-k. Leung, E.-P. Lim, D. Lo, and J. Weng. Mining [4] D. Liben-Nowell and J. Kleinberg. The link prediction [5] J.-Y. Pan, H.-J. Yang, C. Faloutsos, and P. Duygulu. [6] A. Rapoport. Spread of information through a population with [7] J. Zhang, C. Wang, J. Wang, and P. S. Yu. LaFT-Tree: [8] J. Zhang, C. Wang, P. S. Yu, and J. Wang. Learning Latent
Arxiv: http://arxiv.org/
