 Many unsupervised approaches for extractive text summarization follow the maximal coverage prin-ciple (Takamura and Okumura, 2009; Gillick and Favre, 2009), where the extract that maximally covers the information contained in the source text, is selected. Since the exhaustive solution de-mands an exponential number of tests, approxima-tion techniques, such as a greedy approach or a global optimization of a target function, are uti-lized. It is quite common to measure text infor-mativeness by the frequency of its components X  words, phrases, concepts, and so on.
 A different approach that received much less atten-tion is based on the Minimum Description Length (MDL) principle, defining the best summary as the one that leads to the best compression of the text by providing its shortest and most concise descrip-tion . The MDL principle is widely useful in com-pression techniques of non-textual data, such as summarization of query results for OLAP appli-cations. (Lakshmanan et al., 2002; Bu et al., 2005) However, only a few works on text summarization using MDL can be found in the literature. Authors of (Nomoto and Matsumoto, 2001) used K-means clustering extended with MDL principle for find-ing diverse topics in the summarized text. Nomoto in (2004) also extended the C4.5 classifier with MDL for learning rhetorical relations. In (Nguyen et al., 2015) the problem of micro-review summa-rization is formulated within the MDL framework, where the authors view the tips as being encoded by snippets, and seek to find a collection of snip-pets that produce the encoding with the minimum number of bits.
 This paper introduces a new MDL-based approach for extracting relevant sentences into a summary. The approach represents documents as a sequen-tial transactional dataset and then compresses it by replacing frequent sequences of words by codes. The summary is then compiled from sentences that best compress (or describe) the document content. The intuition behind this approach says that a sum-mary that best describes the original text should cover its most frequent word sequences. As such, the problem of summarization is very naturally re-duced to the maximal coverage problem. We solve it by the greedy method which ranks sentences by their coverage of best compressing frequent word sequences and selects the top-ranked sentences to a summary. There are a few works that applied the common data mining techniques for calculat-ing frequent itemsets from transactional data to the text summarization task (Baralis et al., 2012; Agarwal et al., 2011; Dalal and Zaveri, 2013), but none of them followed the MDL principle. The comparative results on three different corpora show that our approach outperforms other unsu-pervised state-of-the-art summarizers. The proposed summarization methodology, de-ple that is defined formally as follows (Mitchell, 1997). Given a set of models M , a model M  X  X  is considered the best if it minimizes L ( M ) + L ( D | M ) where L ( M ) is the bit length of the de-scription of M and L ( D | M ) is the bit length of the dataset D encoded with M .
 In our approach, we first represent an input text as a transactional dataset. Then, using the Krimp dataset compression algorithm (Vreeken et al., 2011), we build the MDL for this dataset using its frequent sequential itemsets (word sequences). The sentences that cover most frequent word se-quences are chosen to a summary. The following subsections describe our methodology in detail. 2.1 Problem statement We are given a single text or a collection of texts about the same topic, composed of a set of sen-tences S 1 , . . . , S n over terms t 1 , . . . , t m . The word limit W is defined for the final summary. We represent a text as a sequential transactional dataset . Such a dataset consists of transactions (sentences), denoted by T 1 , . . . , T n , and unique items (terms 2 ) I 1 , . . . , I m . Items are unique across the entire dataset. The number n of transactions is called the size of a dataset. Transaction T i is a sequence of items from I 1 , . . . , I m , denoted by T i = ( I i 1 , . . . , I i k ) ; the same item may appear in different places within the same transaction. Sup-port of an item sequence s in the dataset is the ra-tio of transactions containing it as a subsequence Given a support bound Supp  X  [0 , 1] , a sequence s is called frequent if supp ( s )  X  Supp .
 According to the MDL principle, we are inter-ested in the minimal size of a compressed dataset D | CT after frequent sequences in D are encoded with the compressing set X  X odes from the Coding Table CT , where shorter codes are assigned to more frequent sequences. The description length of non-encoded terms is assumed proportional to their length (number of characters). We rank sen-tences by their coverage of the best compressing set, which is the number of CT members in the sentence. The sentences with the highest cover-age score are added to the summary as long as its length does not exceed W . 2.2 Krimping text The purpose of the Krimp algorithm (Vreeken et al., 2011) is to use frequent sets (or sequences) to compress a transactional database in order to achieve MDL for that database. Let FreqSeq be the set of all frequent sequences in the database. A collection CT of sequences from FreqSeq (called the Coding Table ) is called best when it minimizes L ( CT )+ L ( D | CT ) . We are interested in both ex-act and inexact sequences, allowing a sequence to have gaps inside it as long as the ratio of sequence length to sequence length with gaps does not ex-ceed a pre-set parameter Gap  X  (0 , 1] . Sequences with gaps make sense in text data, as phrasing of the same fact or entity in different sentences may differ. In order to encode the database, every mem-ber s  X  CT is associated with its binary prefix code c (such as Huffman codes for 4 members: 0 , 10 , 110 , 111 ), so that the most frequent code has the shortest length. We use an upper bound C on the number of encoded sequences in the coding ta-ble CT , in order to limit document compression. Krimp-based extractive summarization (see Algo-rithm 1) is given a document D with n sentences and m unique terms. The algorithm parameters are described in Table 1: The algorithm consists of the following steps. 1. We find all frequent term sequences in the 2. We repeatedly choose frequent sequences 3. The summary is constructed by incremen-
Algorithm 1: Gamp: Krimp-based extractive summarization with gaps Example 2.1 Let dataset D contain following three sentences (taken from the  X  X ouse of cards X  TV show): After stemming, tokenization and stop-word re-moval we obtain unique (stemmed) terms: Now we can view sentences as the following se-quences of normalized terms.
 Initial coding table CT will contain all fre-quent single terms in Standard Cover Order: t bound be 2 appear in at least 2 sentences, and let the gap ra-tio be 1 only the first four entries of the coding table will be used for encoding. There exists a frequent se-quence ( t 4 , t 5 ) that appears twice in the text, once in S 1 with a gap and once in S 2 without a gap. We add it to the coding table according to the Stan-dard Cover Order, generate prefix codes for the first four entries, and get Now S 1 covers 3 out of 4 entries in CT , while S 2 and S 3 cover 2 terms each. If our summary is to contain just one sentence, we select S 1 . We performed experiments on three corpora from the Document Understanding Conference (DUC): 2002, 2004, and 2007 (duc, 2002 2007), summa-rized in Table 2. DUC 2002 and 2007 each con-tains a set of single documents, and DUC 2004 contains 50 sets of 10 related documents. We generated summaries per single documents in the DUC 2002 and 2007 corpora, and per each set of related documents (by considering each set of documents as one meta-document) in DUC 2004, following the corresponding length restric-tions. The summarization quality was measured by the ROUGE-1 and ROUGE-2 (Lin, 2004) re-call scores, with the word limit indicated in Ta-ble 2, without stemming and stopword removal. The results of the introduced algorithm (Gamp) may be affected by several input parameters: min-imum support ( Supp ), codes limit ( C ), and the maximal gap allowed between frequent words ( Gap ). In order to find the best algorithm set-tings for a general case, we performed experi-ments that explored the impact of these parame-ters on the summarization results. First, we exper-imented with different values of support count in the range of [2 , 10] . The results show that we get the best summaries using the sequences that occur in at least four document sentences.
 A limit on the number of codes is an additional parameter.We explored the impact of this param-eter on the quality of generated summaries. As we could conclude from our experiments, the best summarization results are obtained if this param-eter is set to the maximal number of words in the summary, W . Consequently, we used 100 codes for summarizing DUC 2002 and DUC 2004 docu-ments and 250 codes for DUC 2007 documents.
 The maximal gap ratio defines a pattern for gener-ating the frequent sequences and has a direct effect on their structure and number. Our experiments showed that allowing a small gap between words of a sequence helps to improve slightly the rank-ing of sentences, but the improvement is not sig-nificant. Thus we used Gap = 0 . 8 in comparative experiments for all corpora. The resulting settings for each corpus are shown in Table 3.
 We compared the Gamp algorithm with the two known unsupervised state-of-the-art summarizers denoted by Gillick (Gillick and Favre, 2009) and McDonald (McDonald, 2007). As a baseline, we used a very simple approach that takes first sen-tences to a summary (denoted by TopK). Table 4 contains the results of comparative evaluations. The best scores are shown in bold. Gamp out-performed the other methods on all datasets (us-ing ROUGE-1 score). The difference between the scores of Gamp and Gillick (second best system) on DUC 2007 is highly significant according to the Wilcoxon matched pairs test. Based on the same test, the difference of scores obtained on the DUC 2004 is not statistically significant. On the DUC 2002, Gamp is ranked first, with insignifi-cant difference from the second best (McDonald X  X ) scores. Based on this result, we can conclude that MDL-based summarization using frequent se-quences works better on long documents or multi-document domain. Intuitively, it is a very logical conclusion, because single short documents do not contain a sufficient number of frequent sequences. It is noteworthy that, in addition to the greedy ap-proach, we also evaluated the global optimization with maximizing coverage and minimizing redun-dancy using Linear Programming (LP). However, experimental results did not provide any improve-ment over the greedy approach. Therefore, we re-port only the results of the greedy solution. In this paper, we introduce a new approach for summarizing text documents based on their Min-imal Description Length. We describe documents using frequent sequences of their words. The sen-tences with the highest coverage of the best com-pressing set are selected to a summary. The ex-perimental results show that this approach outper-forms other unsupervised state-of-the-art methods when summarizing long documents or sets of re-lated documents. We would not recommend using our approach for summarizing single short doc-uments which do not contain enough content for providing a high-quality description. In the future, we intend to apply the MDL method to keyword extraction, headline generation, and other related tasks.
 This work was partially supported by the U.S. De-partment of the Navy, Office of Naval Research.
