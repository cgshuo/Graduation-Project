 With the rapid development of mobile Internet and the increasing growth of smart devices, more and more Internet-based services are being closely integrated into end-users X  daily behaviors, which definitely bring better experiences for users than traditional desktop environments. Analogously, in such pervasive scenarios, the con-struction and execution processes of end-user-oriented mashups are also integrated into user X  X  natural behaviors with procedure and interaction features [1, 2]. Therefore, user behavior patterns should be considered during the process of constructing and selecting mashup solutions in order to improve user experiences. Together with per-sonalized service provisions and dynamic contexts, these new features have presented great challenges to conventional mashup approaches. 
The biggest challenge is the complexity of user behavior processes in pervasive environments. Different users always show various behavior patterns and preferences and it is difficult to perceive and predict real-time user behavior patterns in dynamic contexts. Personalized factors, including us er habit and preference, have much impact on the selection of user behaviors. Even in the same context, different users have var-ious preferences for activities and services. Furthermore, mobility of user devices and dynamic contexts increase the difficulties of user preference awareness. Let X  X  consid-er an example of service mashups for dining out based on available web-based APIs, Actually, there are multiple potential mashup solutions to meet the requirement and it is important to select a suitable one for th e particular user. In conventional approach-es, the mashup schema with involved activities is required to be defined and con-structed in a mashup tool before it can be executed. However, it is both difficult and unrealistic for unprofessional users to schedule such a complete model in advance due to their limitations of professional knowledge and available information. Even though a mashup solution is pre-defined manually or automatically, probably it cannot achieve satisfactory results during the following execution period. Current context-based approaches for service composition and recommendation rarely consider the influence of user behavioral patterns and service relationships. Therefore, in order to sonalized mashup solution based on user behavioral contexts and preference, rather than only recommending independent services. execution, instead of only recommending services. We propose a construction ap-proach for personalized mashups based on user behavioral contexts. The main idea of discovered by applying pattern mining tasks to historical mashup logs. Then, based on the probabilistic distribution of user behaviors, according to user goal, user behavior grounded to concrete Web-based APIs followed by executing the grounded service. By repeating the last two steps of the process, a personalized mashup schema is com-posed progressively until the final goal is achieved. In this proposed paradigm, mashup composition is simplified and end-user is not required to construct a schema in advance from scratch with necessary professional knowledge. 
The rest of this paper is organized as follows: Section 2 gives problem definitions and the proposed system model; In section 3, we describe the detailed pattern mining rithm for end-user-oriented personalized mashups; In section 5, simulation experi-contributions of the paper. A mashup instance represents a historical execution of mashup, which involves mul-tiple components with specific context and execution sequence. The mashup log is the trace with component invocations and user contexts. mc i denoting mashup component and ctx i denoting the context of current task. In the task sequence, the parameters required by component mc i come from the outputs gen-erated by one or more precursor components mc i-1 , mc i-2 , ...mc 1 (1  X  i  X  n). sequence) he/she has performed during the period of mashup execution. Definition 2 ( Behavioral Context ). A Mashup Context is a prefix subset of the task ctx i denoting the context of current task.
 recommendation is illustrated in figure 1, with multiple components including behav-ior pattern mining module, context awareness module, knowledgebase of behavior patterns and mashup composer &amp; executer. web resources and the related contexts during the execution period, from which quite a few valuable information for future mashup construction can be discovered. User behavior pattern extractor generates the probability distribution for user activity selec-tion. Based on the activity traces in which different users are involved, user behavior similarity computing module evaluates user preferences to candidate activities in par-identified. Component clustering module generates activities by clustering actual web-based components with similar functionalities. ioral contexts in current mashup execution, as well as other real-time contexts which may affect the selection of user activities, such as location and time. 
Mashup composer and executer are the core parts of the system including activity recommendation engine, schema composing engine and service execution engine. According to user goal and user X  X  previo us behavior traces, activity recommendation engine computes user X  X  preference values for candidate activities based on the ex-tracted probability distribution of user behavior and recommend the next activity. Then, composition engine enhances current mashup schema by combining the rec-ommended activity. Execution engine grounds the activity with available web-based component and perform execution. The result of execution engine will feed back to composition engine as one of the conditions to generate the next steps of the mashup. 
The above framework provides an effective approach for constructing a prefer-ence-based mashup instance using an iterative paradigm. In the following sections, we will discuss some key issues in the proposed system. A mashup instance records a historical exec ution trace involving user, services with a running sequence and contexts. Note that the mashup instances are independent and isolated with each other in historical logs, even for similar mashup goals and contexts. Definition 3 ( Mashup Activity ). A Mashup Activity , also called abstract component, describing the common attributes of a set of concrete web-based components with tions: Desc ={ anno 1 , anno 2 , ...}. ( a , c i ) , |  X  |= n is length of the sequence, 1  X  i  X  n . with similar contexts and behavior patterns. As the basic component of mashup sche-ma, activity extraction becomes one of the fundamental tasks in mashup pattern min-ing. At present, there have been quite a few researches on service clustering and clas-sification. We adopt a component clustering approach based on functionality similari-ty and interface compatibility, which is described in detail in our previous works [11]. 3.1 Similarity of User Activity Traces Let  X  be a complete mashup instance in historical logs,  X  t denotes the activity se-quence of  X  . We define the activity adjacency relation of  X  t as: AAR (  X  t  X   X  relation are two types of decomposition for an activity sequenc e with different rigorous levels. of  X  1 and  X  2 is defined as cency relation and activity dependence relation . 3.2 Similarity of User Behavior Patterns Collaborative filtering recommendation appro aches based on similar users have been proven significant effectiveness in multiple domains. Similarly, introducing the factor of user preference in personalized mashup construction will definitely improve the ered similar if they have similar behavior patterns for the same goal. similarity between any users can be measured. Among current approaches for measur-ing user similarity, Pearson correlation coeffi cient [4] has been proved to be effective enough in multiple domains. In our approach , Pearson correlation coefficient is used to measure the preference similarity for activity traces between user u and v : 
Where r uv denotes the preference similarity of user u and v , I uv means the common common activities I uv . Definition 8 (Behavior Pattern Similarity). Assuming the preferences of user U i and U similarity between user U i and U j is defined as common activity traces of user U i and U j . The mashup construction is a progressive procedure involving two phases in each iteration: schema construction phase and service execution phase. 4.1 Support Function for Activity Trace supports for recommendation of the user X  X  future activities. That is, the more similar the trace fragment and the historical mashup instances are, the more valuable the his-torical patterns are to support the construction of current mashup. and G (  X  ) denote the goal of  X  and  X  respectively. Then we define the Support Func-trace evolves into mashup instance  X  :  X  X  X  Where  X   X   X , X   X  is the activity trace similarity defined in formula (1), and S g (  X  ,  X  ) denotes mashup goal similarity which is defined as 
The support function for activity trace is used to filter the historical mashup logs, other unrelated mashup instances are excluded. 4.2 Mashup Construction Algorithm composing process, i.e. the algorithm for activity recommendation based on user past behavior trace. 
The algorithm describes schema construction phase of the iterative mashup compo-sition process, which aims to enhance the mashup fragment by computing and rec-ommending the next activity. The complete mashup can be constructed progressively by performing the algorithm repeatedly. Once the recommended activity is confirmed, it should be grounded to a particular Web-API based component registered in the re-pository. Currently, there have been quite a few researches focusing on mashup ser-vice selection and recommendation. According to the effectiveness and efficien cy of the mashup composition approach, an application scenario of service mashups are constructed, in which dining-out may be described as  X  X inding a restaurant within 10 miles, getting there, parking and having dinner with my friends X  with probably multiple web-based services. 5.1 Experimenting Data 1 Web-Based Components The detailed construction process involve 2 steps. In the first step, real-world services on Internet are searched and extracted to generate the primary components in the reg-istry from the sources of general service providers (such as Google Place APIs, Baidu mapping APIs etc.) and specific platforms( such as Yelp APIs, Dianping.com APIs etc.). The descriptive information for both functionalities and interfaces of these pub-lic services are extracted, and then annotations are generated for each component based on its native descriptions. Besides, some QoS attributes are randomly generat-created and annotated virtual services with a random number for each primary com-quantity. The basic statistic info of the constructed components is listed in table 2. 2. Historical Mashup Instances Based on the meta-data of generated components, we constructed simulation data for historical user behavior traces, i.e. mashup instances. The mashup instances were cre-ated by randomly selecting components following the constraints of compatible inter-faces and functionalities. Then, the generated instances were adjusted from two as-pects. One adjustment is to increase cluste ring property for the behavior traces of sim-ilar users. On the other side, a percentage value measuring component popularity was introduced for each component and let the appearance frequency of components in the generated logs roughly follow their popularity distribution, so that the actual situation could be reflected as much as possible. The statistics of generated mashup instances is listed in table 3. 5.2 Experimental Results paper, we also compared our component clustering approach, referred to  X  X SandIC-proposed two service similarity computing approaches: Euclidean-distance and Cosine-purpose, Literature [7] proposed functionality-based and process-based similarity meas-ference degree between our clustering method and the other 3 approaches were computed value for service pair &lt;  X   X   X ,  X  &gt; defined as: and the overall difference value define as where  X   X   X  X   X   X ,  X   X  X  X   X   X ,  X   X  X   X   X ,  X   X  X  X   X  denotes the similarity value between service s tween our method and the other 3 approaches, as well as the combined comparison, are shown in figure 2. The results indicate that the clustering result of our method is difference with the other approaches. This is because the two closer clustering meth-ods considered both functionality and interface compatibility, and the other 2 methods focus on multi-dimensional spaces includin g functional semantic, location info and QoS attributes. The next experiment was performed to verify the effect of mashup construction. The generated mashup instances were divided into 2 parts: sample instances and b enchmark instances. Exp recommended mashups, th mashup instances with sim i
In order to measure the according to b enchmark da t where S r (g, r, c) denote s periments, S b (g, r, c) is the 
Based on the definition of matching rate, we compared our algorithm with other service composition approaches according to different numbers of mashup instances. We investigated some representative approaches of service composition, including context-awareness based [5], pervasive-environments based [3] and planning-based[8] composition. We simplified these methods and implemented the core ideas, then compared the results with our algorithm. Figure 3(a) illustrates the matching rate of the algorithms with different number of generated mashups. With the increasing number of generated mashup instances to be evaluated, the matching rate with benchmark data becomes stable. Another experiment in figure 3(b) shows the average matching rate for different approaches. In recent years, context-based service recommendation for mashup provisions have been attracted much attention. Some researchers performed role mining and service recommendation based on users X  historical selection records in various physical envi-ronments [9]. Hussein et al. capture a service's requirements as two sets of scenarios, and then deal with the dynamic changes of contexts using adaptation requirement [10]. Due to the successful effects in many other domains, personalized recommenda-tion was widely introduced into service discovery and selection. Meng et al. proposed a similar user-based CF approach to recommend services by annotating users X  prefer-ences with keywords [12]. Chen et al. adopted a visualized technology to improve recommendation comprehensibility and implemented personalized recommendation based on a CF algorithm [13]. To improve recommendation qualities in pervasive environments, quite a few researches combine contexts into collaborative filtering methods. Shin et al. proposed a CF-based recommendation approach with aggregated contexts [14]. Karatzoglou et al. constructed a multi-dimensional matrix of  X  X ser-item-context X  by extending conventional  X  X  ser-item X  matrix for a context-aware rec-ommendation approach [15]. In this paper, we propose a new paradigm for behavioral context-based personalized mashup provision in pervasive environments by combing user behavior and mashup our approach can effectively simplify personalized mashup composition without de-pending on end-users X  professional knowledge, as well as improve the quality of mashup composition and recommendation based on behavioral contexts and personal-ization in pervasive environments. Acknowledgement. This work is supported by the National Natural Science Founda-tion of China under Grant No. 61303085, the Natural Science Foundation of Shan-dong Province of China under Grant No. ZR2013FQ014, 2014ZRFM031, the Science and Technology Development Plan Project of Shandong Province under Grant 2014GGX101019, 2014GGX101047 and Shandong Province Independent Innovation Major Special Project under Grant No. 2013CXC30201. 
