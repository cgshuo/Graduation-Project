 1. Introduction
Faster market dynamics and fi ercer competition push organizations to engage in complex, Internet-enabled, highly dynamic the complaints management, and fraud detection, to external companies, in order to focus on its core business.
As a form of market-based collaboration, however, BNs, when compared with in-house business process execution, are to them (adverse selection) [1,7] .
 business processes.
 outsourcer to the external provider. In case the contract terms are not met, the contract may de the future by the same outsourcer [32] .
 should always be coupled with the active monitoring of the business process taking place during the enactment of the non-compliance of established contracts and decide which control actions should be taken. Monitoring an external business controlling [76] . This paper focuses on the former type of monitoring.
 requirements on the outsourced process. Note that each consumer may have different monitoring requirements and, therefore, the provider cannot embed the provisioning of monitoring information directly in its own process. speci fi c instance. In this case, the only way for the consumer to verify the ful importantly, the provider may leave the business network before the consumer can run the contract ex-post veri
This paper proposes a framework to solve the problems arising in the aforementioned collaborative scenarios when contract from verifying the satisfaction of such contracts. Speci fi consumer has no guarantee on the behavior of the provider, e.g. on the provided quality of service.
In collaborative settings, control through contract establishment and business process monitoring becomes additionally complex because:  X  in the contracts established with its own providers;  X  likely to disrupt the dependency among contracts and their monitorability. Thus, partners in the network should strive for reestablishing the correct dependencies among contracts and for updating their monitoring infrastructure as new monitoring requirements arise. As a sample, outsourcing in highly regulated industries, such as healthcare or data management or traceability of billing and payments.
 updated, revised, completed or dropped.

First, we introduce a meta-model for contract-based business networks and their monitorability. Then, we show that the evaluate the opportunity, for the whole BN or for speci fi a business process.

An industrial case study and a prototype implementation demonstrate the applicability of the framework. The case study can be embedded within different business process management and execution infrastructures. outlining future work in Section 8 . 2. Business networks monitorability of agreements as a BN evolves. 2.1. The lifecycle of agreements in evolving business networks established between a process provider and a process consumer. Template-based advertisement of providers' capabilities and community [17,50,53] . It is assumed, for instance, by the WS-Agreement [75] speci agreements for the usage of Web services.

Our proposed lifecycle of agreements in a BN extends the agreement lifecycle commonly envisioned in the service-oriented
Fig. 1 . It involves the phases of agreement de fi nition, establishment, enactment, and dismissal. In the agreement de parties agree on the terms on which the agreement can be established, e.g. parties may agree to include speci agreement templates, such as terms on the completion time of activities. This phase leads to the de agreement template. Then, the agreement is enacted, i.e. the process on which the agreement has been reached is executed. when a contract expires or the obligations speci fi ed in it have been ful shapes in Fig. 1 . While the BN is in operation, business actors in the BN may realize that the network ef updated or dropped from the BN. This phase is represented by the Evolution De changes (or, as later de fi ned, evolution types ).
 of existing contracts or the adaptation of existing protocols [61] . In this paper, we focus speci as its predecessor and, therefore, the agreements with the new partner should be modi
Evolution Assessment phase), to understand which changes are bene implementing, and which changes, on the contrary, are not bene assessment relies on a set of monitorability metrics, which we describe in Section 4 .
The Evolution Assessment phase objective is twofold. On the one hand, it assesses the actions that should be undertaken to of the monitoring infrastucture of the actors constituting the BN. 2.2. A meta-model for business networks
The meta-model of BNs considered within our framework is shown in Fig. 2 . The elements of a BN are partitioned into three different groups, or overlays , i.e. the structural , agreement , and monitoring overlays. Overlays are identi corresponding stereotypes. 2.2.1. Structural overlay level process framework introduced in [29] , we deal with processes speci retains those aspects that are relevant for the collaboration among partners in a BN and hides the internal detailed speci required for process enactment by individual partners (speci (atomic) outsourced ( OutBlock ), or structured-outsourced ( StructOutBlock ).
 an outsourced block or a structured-outsourced block again. Structured-outsourced blocks allow the de 1. An internal block cannot have outsourced or structured-outsourced children; then outsource again).
 notation. 3 Fig. 3 a shows the outsourcing of the outsourced block A from ACT introducing the monitoring overlay. 2.2.2. Agreement overlay The agreement overlay sits on top of the structural overlay, modeling the agreements among partners in the BN.
Providers advertise agreement templates associated to the processes they contribute to the BN. Templates contain the customizable terms under which an agreement can be established between a provider and a consumer. Templates are not the process enactment itself is a large part (see Agreement Establishment phase in Fig. 1 ). loss adjusters will be at least two, providing two separate evaluations for any given claim. expressing electronic contracts and SLAs, e.g. WS-Agreement [75] or ebXML [48] take a similar perspective de structure for expressing service and SLA terms and leaving the speci aspects and delegate the management of semantics to a domain speci
After having introduced clauses and abstract clauses, we can now re outsourced blocks in our meta-model. Abstract clauses in templates (and, consequently, clauses in agreements) are de blocks, which can be atomic or structured. An (abstract) clause concerning a structured block may not be equivalent to the combination of (abstract) clauses over its children.

In the claim management scenario, introduced before, the insurance company may de results of the two preceding activities.

We de fi ne the association projectsTo between abstract clauses of different templates to capture the contract dependency which the children of the block have been outsourced. 2.2.3. Monitoring overlay
The monitoring overlay sits on top of the agreement overlay, modeling the monitorability requirements of the agreements for the consumer to the monitoring information made available by the provider to monitor a given abstract clause. In our speci fi c clause.
 we leave the discussion of ef fi cient resource allocation for monitoring to future work. different provider.

It has to be noticed that our framework does not impose any speci which they induce monitoring requirements, which are satis requires a language in which it is possible to express the
Similarly, an abstract clause allowing the consumer to monitor the intermediate progress of a request is identi monitoring requirements, i.e. the provider should make intermediate progress information available to its consumers. 2.2.4. Set-theoretic representation of business networks
From the meta-model of Fig. 2 , we derive the set-theoretic representation of BN overlays shown in Tables 1 and 2 for the speci fi cation of the algorithms for the preservation of the monitorability of the BN presented in Section 3 . elements of a set (see, as a sample, the aggregation of abstract clauses l
The type of monitoring capabilities is a value mt , with mt and monitoring capability type can be obtained through the corresponding functions blockType () and mcpType (), with:
For the sake of clarity, we will also express the type of an element using a superscript. For instance, blk structured-outsourced block.

The modeling of the structural overlay is complemented by the de block and returns the set of its children, i.e. sub-blocks: on outsourced blocks. 3. Evolution and monitorability of business networks templates or agreements within the BN may be added or dropped.
 of it.
 abstract clauses that are not monitorable and, consequently, clauses that cannot be monitored by consumers, templates and monitor the wrong abstract clause. 3.1. Structural evolution of a BN addition or removal of the generic actor act a and process pro evolution type ADD-PRO has been applied).
 only be removed if it does not contribute a process to the BN.
 requirements of the actors belonging to the BN. Therefore, when structural evolution occurs, no speci preserve the monitorability of the BN. 3.2. Actions to support monitorability the monitoring infrastructure of the actors belonging to the BN, and (iii) concerns the recon service provider is removed from the BN.

Projections may concern either abstract clauses or clauses. Thus, we de  X  template tem r ,betweenthenewabstractclauseandoneoftheblocksintheprocess pro
In other words, from the modeling perspective, after the execution of the action, the predicates aclProjectsTo ( acl refersTo ( acl r , L  X  clause cla f , C executed only if the predicate projectsTo ( acl t , l after the execution of the action the predicate claProjectsTo ( acl a risk manager (loss adjustment) and a 3rd party auditor (fraud check), then an abstract clause allowing customers of the insurance company to monitor the intermediate progress of the damage loss evaluation should be projected into two separate clause, i.e. a clause in the agreement with (and consequently an abstract clause in the template de the template de fi ned by) the auditor, allowing to monitor the intermediate states of the fraud check.
Also, as previously introduced, since our framework does not consider the semantic of (abstract) clauses, we make the hypothesis that projection can always occur always occur between semantically related clauses. The implementation of this requirement is left speci fi c to the application domain at hand.
 concern also the partners to which such block has been outsourced (aggregated monitoring capability). Hence, we de following actions:  X  mcp M +1 N  X  CreateNatMcp ( act a , acl t , l abstract clause acl t , l monitors ( mcp M +1 , acl t , l the clause acl t , l  X  mcp M +1 A  X  CreateAggMcp ( act a , acl t , l the monitoring of the abstract clause acl t , l through the aggregation of the capabilities mcp m mcp m 1 ,  X  , mcp m abstract clause acl t , l preserve the monitorability of the BN when an actor, to which part of a process is outsourced, leaves the BN.
Hence, we de fi ne the following action:  X  blkType ( blk p , b Note that only outsourced blocks blk , with blockType ( blk )= O , can be used as arguments of this action. the monitorability of the agreements with clauses derived from such an abstract clause. 3.3. Abstract clause-and template-level evolution
The pre-and post conditions for Abstract Clause -and Template-level evolution types are shown in Table 6 . 3.3.1. ADD-ACL evolution type
In this case, a new abstract clause acl t , L clauses and associated to a speci fi c block blk p , b 3.3.2. ADD-TEM evolution type
In this case, a new empty template tem T +1 referring to the process pro the BN. As post-condition, tem T +1 is added to the set of existing templates and associated to the process pro 3.3.3. REM-ACL evolution type
In this case, an existing abstract clause acl t , l be removed from the set ACL t of abstract clauses belonging to the template tem 3.3.4. REM-TEM evolution type
In this case, an existing empty template tem t , with 1  X  removed from the set of existing templates.

Note that template-level evolution considers only empty templates. In real-world scenarios, we model the addition of a new
Algorithm 1 shows the mechanisms for preserving the monitorability of the BN in case of adding a new abstract clause to an existing agreement (ADD-ACL evolution type, see Fig. 4 for a graphical representation).
In order to guarantee the monitorability of the template in which the new abstract clause is introduced, the provider act fi creates a new native monitoring capability.
 refers to an outsourced process pro q executed by an external actor act implements a speci fi ctemplate tem r of that external actor. The new abstract clause should be projected to that speci 5  X  external actor.
 areexecutedinternally.Themechanism adoptsadepth-fi rstscanoftheoutsourcing tree ,i.e.themechanismstops(seeline16)whena provider is not able to provide the native monitoring capability required by its consumer for aggregation. Depth-ef fi for aggregation cannot be created or when act cannot create a native monitoring capability for internal blocks.
Algorithm 1 . Restoring monitorability for ADD-ACL evolution type.
The time complexity of Algorithm 1 is O ( n ), where n is the number of children blocks of blk which in many cases can be a manual activity.

Since, as previously discussed, we consider empty templates, adding a new template in the BN (ADD-TEM evolution type) does not represent a critical evolution type from the point of view of monitorability, i.e. no speci preserve the monitorability of the BN.
 existing template (REM-ACL evolution type). The abstract clause acl more clauses acl s , m is discussed later in this section). The deletion of the projected abstract clause acl the agreement with act p , because the corresponding abstract clause acl projection), the abstract clause can be simply removed from the template (line 3).

Algorithm 2 . Preserving monitorability for REM-ACL evolution type.
Algorithm 3 . Preserving monitorability for REM-TEM evolution type. canstillexistintheBNthatincludeclausesthatimplementtheabstractclausethatisdeleted,i.e.thedeletionofanabstractclausedoes resources allocated to the implementation of such capability. These considerations are out of scope in this paper.
For what concerns deleting an existing template, the algorithm for preserving monitorability for REM-TEM evolution type is reportedinAlgorithm 3 .Ifthetemplate tem t isempty,thenitcanberemovedfromtheBN(lines2 then it contains one or more abstract clauses that are the projection of other clauses acl the monitoring of the clause acl s , l
The time complexity of Algorithm 3 is O ( n  X  m ), where n is the number of abstract clauses in tem abstract clauses in other templates that project to abstract clause in tem depends, in this case, on both the structures of templates and on the structure of the BN. 3.4. Clause-and agreement-level evolution
The pre-and post-conditions for Clause -and Agreement-level evolution types are shown in Table 7 . 3.4.1. ADD-CLA evolution type
In this case, a new clause cla g , C (templates) can be added to the BN. As a consequence, the predicate implAbsClause () appears as a pre-condition for the 3.4.2. ADD-AGR evolution type
In this case, a new agreement agr G +1 for which act a is the consumer is added to the BN. Similar as for clauses, only an agreements and associated to the actor act a (as consumer). 3.4.3. REM-CLA evolution type
In this case, a clause cla g , c 3.4.4. REM-AGR evolution type type, the agreement is removed from the set of existing agreements.
 process. Similarly, an agreement can be removed from the BN only when it is empty, i.e. when it does not contain clauses. The mechanism for preserving monitorability in case of addition of a new clause is shown in Algorithm 4 and illustrated in
Fig. 6 . If the new clause cla g , C new clause will be automatically linked to the monitoring capability exposed by act abstract clause acl t , l
Algorithm 4 . Preserving monitorability for ADD-CLA evolution type.
Ifthe new clause cla g , C to the agreement that governs the outsourced block. In line 4, the agreement to which to project to is identi with the clause and abstract clause identi fi ed in lines 5 and 6. If the new clause cla under the hypothesis that the non -recursive part of procedure ADD
Algorithm 5 showsthemechanismforpreservingmonitorabilityincaseofdeletionofaclausefromanexistingagreement.Aclause
Algorithm 5 . Preserving monitorability for REM-CLA evolution type. removal or addition of empty agreements in the BN do not entail any speci agreement can be removed only when it is empty, i.e. when all the clauses that appeared in it have been deleted. 4. Monitorability metrics
As discussed in Section 2.1 , the evolution assessment phase of the extended lifecycle of agreements in evolving business with the possibility of monitoring, and do not include ex-post monitoring possibilities. template or agreement in the BN. In the provider and consumer perspectives we de agreements established by a generic actor act c as a consumer. Eventually, in the network perspective we de monitorability of the whole set of templates or agreements in the BN.
 from acl are monitorable by consumers, and 0 otherwise. In other words, the mon () function determines whether an abstract clause is monitorable or not: corresponding monitoring capability is exposed by the provider of the template:
The monitorability of an agreement AM ( agr g )isde fi ned as the percentage of clauses in the agreement agr monitored through an exposed monitoring capability. Because an agreement contains clauses and monitoring capabilities are are implemented by clauses in the agreement need to be determined. In this regard, we de abstract clauses in the template tem t , with implTemp ( agr agr
The percentage of abstract clauses in the set IMPL ( agr g monitorability of the agreement agr g :
From the provider point of view, we de fi ne the metrics TMPRO ( act
Let us de fi ne the set TADV ( act p ), as the set of templates advertised by actor act The metric TMPRO ( act p )isde fi ned as:
Similarly, to determine the average monitorability of an agreement, in which the actor act set of agreements AEST pro ( act p ) established by act p The metric AMPRO ( agr g , act p ) is subsequently de fi ned as: agreements, then it means that, from a monitorability point of view, the templates advertised by the provider offer more capabilities for abstract clauses that will not be implemented as agreements (and for which monitoring is not required).
From the consumer point of view, we de fi ne the metric AMCON ( act agreements established as a consumer by the actor act c . Note that, in the consumer perspective, we cannot de
Similar as with the provider perspective, we fi rst de fi consumer: The metric AMCON ( act c ) is then de fi ned as: providers, a lower value of the AMCON ( act c ) metric can be acceptable.

Finally, in the network perspective, the metric TMNET ( BN )isde belonging to the BN: Similarly, the metric AMNET ( BN )isde fi ned as the average monitorability of all the agreements belonging to the BN: Both network metrics provide an indication on possible improvements in monitorability for the network, by comparing the e.g., by exchanging/replacing actors in the network.
 consequently the set of agreements governing those processes). The de
First we de fi ne the set of templates that correspond to the set of agreements de templates lead to agreements, this set contains only those processes that are governed by an agreement:
Using the set of processes executed in the BN ( PROA ( AGR )), the set of templates that refer to those processes is de executed in the BN ( PROT ( PRO )):
As illustrated for the TMPRO ( BN ) metric above, it is (relatively) easy to derive metrics other than the ones de operation of a BN.

For a consumer, certain clauses in an agreement and/or template may be more important than others. This can be certain (abstract) clauses into account.

A provider could distinguish the monitorability of templates and/or agreements according to the nature of the monitoring combination thereof, i.e. the children of an structured outsourced block are outsourced and/or performed in house.
We consider the de fi nition of advanced metrics, such as the ones mentioned above, as future work. 5. Case study: teleradiology as an evolving business network
To show the applicability of our framework, we present an example scenario derived from a case study in the teleradiology simpli fi ed the scenario to contain only parts relevant for this paper.
 companies, and governmental departments, requires a monitoring framework to enable synchronization of processes and well-established area in which collaborations between different organizations is commonplace and successful [23,45,57] , although collaborations are usually considered to be static. In our view, collaborations (and thus agreements) should be established much more dynamically. Hence, the example scenario presented here considers such dynamic possibilities as appropriate.
 and MRI scans, respectively. Both scan interpretation service providers have established an agreement with HOS ( AHS1 and not have a speci fi c meaning). As can be seen in the fi gure, XSI exposes monitoring capability mcp which is related to block X_Analysis and MSI exposes monitoring capability mcp shown in Table 9 .
 service. The monitoring requirements derived from the templates MSI and XSI are matched by the monitoring capabilities mcp and mcp 2 exposed by XSI and MSI, respectively.

To illustrate evolution of the teleradiology business network, we the business network.
 5.1. Evolution example 1: adding a service consumer
To accomplish this, HOS de fi nes a template that advertises the offered service. We of advanced diagnosis techniques. In other cases a lower level of quality may be suf by a General Practitioner (acting as a consumer of the Radiology process).

The evolution of the BN, as described above, includes adding a new template ( ADD published template, i.e. TMNET ( BN )=1, adding a new abstract clause requires the addition of a monitoring capability. on the quality of the acquired scans, then the new native monitoring capability mcp changes to the set-theoretic representation, as a result of applying those evolution types, are listed in Table 10 . resulting BN is shown in Fig. 8 and the changes to the set-theoretic representation are listed in Table 11 . requirement after the agreement has already been established. The desired extra monitoring involves the ability to monitor
In this case, the following steps will take place: clause to the existing template THOS ; externally executed (outsourced) processes. In this case, acl aggregated monitoring capability, then the monitorability of the BN will decrease in several aspects, in particular, the 4. The new clause cla HOSnew , which is the implementation of the abstract clause acl following Algorithm 4 , which will lead to the clause being projected to the existing agreements between HOS and XSI and between HOS and MSI ( cla Xnew and cla Mnew , respectively).
 general practitioner ( GP ) to the agreement with HOS. Note, only changes with respect to Tables 9 to 11 are given. 5.2. Evolution example 2: removing an agreement agreement AHS2 with MSI. The following steps need to be taken to achieve the removal of AHS2 : with MSI is removed; 2. The monitoring provided by MSI, has to be provided by HOS natively; results in some penalties for the party dissolving the agreement.

Note that (2) is required to maintain the monitorability of the template THOS exposed by HOS. HOS may also decide not to will decrease and, consequently, the monitorability of the agreement AGH1 will also decrease. executing in the BN. Let us make the hypothesis that THOS and TXSI have full monitorabiity ( TM ()=1), whereas TMSI is not that are actually executed in the BN are fully monitorable, i.e. TMPRO ( BN )=1.

In the next section, a prototype implementation for the monitoring framework is described, using the radiology example scenario as introduced in this section.
 6. Prototype implementation an extension of a regular Web Service (WS) using prede fi offered and performed by the service provider [71] ). What exactly can be monitored and/or controlled is speci
CTRL to control a service, SYNC to synchronize with a service, and SPEC to retrieve the speci evolution, the elements of the system dedicated to controlling or synchronizing business processes, to retrieve speci validate against electronic contracts, are not considered here.

Also, the focus of the implementation is on the run-time of the monitoring framework. In particular, we show how we implemented the dynamic sourcing of process blocks and the implementation and instantiation of monitoring capabilities in different process monitoring infrastructures, that is the OpenESB BPEL engine [51] (a BPEL engine) and YAWL [65] (a work management system). The implementation does not concern the design time of the framework and, in particular, the automated detection of evolution.
 system. Communication between the components and/or services is either related to service invocation (dashed arrows) or to service monitoring (solid arrows).

The Radiology BPWS can be invoked (through ACT ) and monitored (through MON ). When the radiology process is invoked, the outsourcing can be dynamically chosen while the radiology process is executing.
 YAWL engine (e.g. case termination or change of status, variables and timestamps) via a custom implementation of the YAWL similar way as explained for the XSI BPWS, except that it is associated to the MRI_Int process in the YAWL engine. For ef by two different organizations.

Suppose a service consumer has invoked the radiology service and subsequently wants to monitor the process state of this as part of CMonI , will call the native monitoring capability associated with the speci native monitoring component provided by the OpenESB BPEL engine collecting basic information on process instances, such as monitoring capabilities are available to monitor the state of a speci added. The PROXE system is available as a demonstrator in a virtualized computing platform via SHARE (Sharing Hosted
Autonomous Research Environments, [67] ). 7. Related work
Monitoring of business processes is situated within the broader context of continuous assurance, which can be de set of methodology and tools for issuing audit reports and assessing contract compliance simultaneously with, or within a post audit trails to check the compliance of the process execution to overarching agreements, continuous assurance enables [3,6,15,32] .
 never been considered together with the setup of the monitoring infrastructure.

From the perspective of monitoring, our framework overcomes the above mentioned limitations of current research. In our derived from any clause that may be included in an agreement. Moreover, we consider the need for the IT monitoring infrastructure to be constantly updated during the network operation as agreements in the network, and, consequently, the network.

The problem of monitoring and control of cross-organizational business processes has been tackled by research from several points of view. Speci fi cally, we consider the points of view of work 7.1. Work fl ow management systems perspective on cross-organizational process monitoring of process-and communication-oriented mechanisms among collaborating parties, i.e. mechanisms that transmit information across the networked organization and that are highly integrated with the process that is collaboratively executed. networks, and, consequently, of monitoring requirements.

The design of cross-organizational work fl ows with evolving requirements is tackled in [22] . This work focuses on how to fl and does not explicitly consider the corresponding evolution of monitoring requirements.
The mechanisms described in this paper hold a close relationship with mechanisms to manage work
Work fl ow evolution considers the problem of maintaining structural and behavioral consistency of speci fi cation of the work fl ow changes, e.g. by adding or removing activities or roles. While work structure, this paper focuses on the consistency of agreements and monitoring capabilities of actors in the BN. Work (cases) that have already started may rely on those monitoring capabilities for monitoring until their termination. of an outsourced process, which is accessible at speci fi business network evolution on the monitorability of cross-organizational processes is not taken into account. Recursive project [40] . Monitoring requirements and evolution of a formed network are, however, not considered.
Similarly to the monitoring capabilities de fi ned in this paper, the E-Adome work
External information requirements are not directly linked with contract clauses. Moreover, the architectural support for monitoring based on such external information is not speci context of stand-alone organizations and mostly concern process optimization. Auditing for compliance checking has been investigated by research on process mining [66,36] and normative reasoning applied in the context of business process analysis of process logs. Normative reasoning is focused on de related to cross-organizational collaboration enactment. 7.2. Web service perspective on cross-organizational process monitoring
Research on Web service management has also focused on business process monitoring and assurance. Research in this area, however, maintains a technological focus, concerning the de regard the correctness of Web service conversations [56,73] , functional and non-functional requirements of Web service de fi nition of monitoring requirements along the outsourcing chain and, consequently, the recursive construction of suitable monitoring capabilities.
 Being Web service-based, our implementation can be seen as an instance of the OASIS WSDM-MUWS (Management Using point of view, the CMonI component of the consumer represents the Manageability Consumer in the MUWS standard, whereas the
MON interface of providers represents the endpoint of the manageable, i.e. monitorable, resources. In this context, the implementation of coordination protocols among consumers and providers could be implemented extending the existing WS-Transaction [47] family of standards.

Eventually, our Web service-based implementation can be seen as multi-tenant [42] , since each consumer of processes in our implementation, the infrastructure required to expose a monitoring capability could be virtualized and made speci resources that the execution of a monitoring capability actually requires.

The work presented in [18] contains a preliminary investigation of the issues related to monitoring in evolving business networks. This paper extends [18] by considering template-based contracting and multiple outsourcing of process blocks, by 8. Conclusions and future work
In this paper, we presented a framework for monitorability of processes governed by agreements in evolving networks. In network, or contracts in the network are revised or dropped.

After having introduced a meta-model for business networks, we classi consumers' monitoring requirements that may arise from evolution.
 evolves, e.g. in case of partner substitution or update of existing contracts.
 interface the monitoring infrastructure with existing business process execution engines.
Our work can be extended along several lines. First, the monitoring framework can be coupled with control actions, to be undertaken when a contract violation is detected during the process enactment. Along this line, we are working on generic patterns for integrated monitoring and control. In particular, given a process speci and executable process speci fi cation that includes the monitoring and control options required by the process consumers. networks or complex supply chains in which a chain leader orchestrates the activities of all involved partners.
References
