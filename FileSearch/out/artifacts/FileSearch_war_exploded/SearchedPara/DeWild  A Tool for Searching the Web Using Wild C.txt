 Categories and Subject Descriptors: H.3.3 [Informa-tion Systems]: Information Search and Retrieval General Terms: Algorithms Keywords: DeWild, Data Extraction, Web Search
A large volume of facts are available on the Web and man-ually extracting these facts is time consuming and often im-practical. Example extraction tasks include compiling a list of scientists, a list of a company X  X  acquisitions, etc. Unless such lists have already been compiled and made available on the Web, one has to query a search engine, examine the pages returned, and extract a handful of instances from each page. Consider the case of extracting researchers ;many bona fide names are not referred to as researchers. Instead, they are often coined as scientists , experts , professors ,etc. If only the term  X  X esearchers X  is used in the query, many qualified instances will not be extracted.

We demonstrate DeWild, a domain independent system for searching and data extraction on the Web. A search in DeWild is expressed using a simple query with some wild cards, and the result of a query is a ranked list of rows that match the wilds cards. For instance, given the query  X  X racle acquired % X , the output is expected to be a ranked list of companies that were purchased by Oracle, preferably the real Oracle acquisitions ranked the highest. One type of wild card in DeWild is an extractor .Anextractorisused to indicate a probable position of desired data that needs to be extracted. Another type of wild card, used for query relaxation, can indicate terms that are semantically similar to the given one should also be considered. For instance, the wild card can specify that words similar to  X  X esearchers X  (e.g. scientists) should be part of the search.

Building a unified query interface for a large number of ex-traction tasks is challenging. A problem with phrase queries, especially long ones, is that they can retrieve very few or no matches. Query relaxation techniques (e.g. [2]) are not gen-erally applicable to phrase queries. DeWild uses an online Figure 1: Instances extracted and their weights for the query  X % is a car manufacturer X  query rewriting engine to improve both recall and the qual-ity of the results. For example, the query  X  X racle acquired % X  can be rewritten as  X  X racle purchased % X ,  X %, acquired by Oracle X , and etc.

Using only syntactic matching for an extraction task of-ten retrieves results which wo uld be considered incorrect by a domain expert. DeWild uses a new algorithm for ranking extracted data. The ranking algorithm, which exploits the mutual reinforcing relationship between extracted data and rewritings , has shown to outperform a comparable system [1] which uses Mutual Information for ranking. In particular, DeWild achieves higher precision at almost all recall for the same extraction tasks. DeWild has also shown to perform well on extracting answers for questions in the Question An-swering Track of TREC [3].

In this demo, we will show how extraction tasks can be expressed using DeWild X  X  simple and declarative user inter-face ( dewild.cs.ualberta.ca ) and the results are returned in seconds. A user can click on each extracted row and exam-ine the context where the row appears. The query rewriting component can be customized in order to incorporate expert knowledge to the system. [1] O. Etzioni et al. Web-scale information extraction in [2] M. Mitra, A. Singhal, and C. Buckley. Improving [3] E. M. Voorhees. Overview of the TREC 2004 question
