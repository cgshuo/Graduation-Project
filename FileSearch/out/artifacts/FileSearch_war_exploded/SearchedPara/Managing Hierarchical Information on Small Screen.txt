 With the increasingly powerful processing and rendering capabilities of modern com-puters and display technology, sophisticat ed visualization techniques have been plication data, such as financial statistics, remote-sensing results, real-time data, gene visualization tools. 
Numerous types of modern-day information are structured hierarchically, such as Visualization of hierarchical data improves not only the understanding of the data and the relationship among the data items, but also the way of manipulating and searching for desirable data items. tree representation [1]. The ability of visualizing and navigating hierarchical informa-tion, usually represented as a tree, is urgently needed and becomes an emerging chal-lenging research topic. 
With the increasing number of users of mobile devices, such as PDAs and cellular becomes apparent. Various approaches have been proposed for browsing the Web information on small screen devices [3,4] and some with innovative interaction tech-niques [5,17]. Although many visualization techniques have been proposed for view-displaying hierarchical structures on small screens. [7], for visualizing and navigating hierarchical information on mobile devices such as play area while maintaining the structural clarity. 
This paper generalizes RELT with the following additional characteristics, and re-ports new experimental results:  X  The root can locate anywhere on the viewing space; and  X  A given hierarchical structure can be represented and navigated in either concen-
The remainder of this paper is organized as follows. Section 2 reviews the current hierarchy visualization techniques. Section 3 presents the generalization concepts and lated implementation of RELT compared with that of an existing cell phone interface. Finally, Section 6 summarizes the paper and discusses the remaining challenges. Connection approaches draw the hierarchical information in a node-edge diagram. between two connected nodes. All the connection approaches essentially focus on two major layout issues: how to locate the nodes, and how to connect the related nodes? niques which simply locate child nodes below their common ancestors. H-trees [6,8,15] positions the child nodes in the vertical or horizontal direction of their com-mon ancestors. Concentric circles are created on a radial tree [6,8] with nodes placed nique is in keeping adjacent branches from overlapping. Researchers have also devel-Balloon Views [8,9] by projecting the Cone Tree onto a plane. 
The Space-filling approaches are generally divided into two techniques, rectangu-techniques use the position and adjacency to express the parent-child relationship. For express the parent-children relationship in Treemap. Space-filling techniques are gaining attention in the recent years. semi-circular discs to visualize hierarchical information. Each disc represents multiple levels of a hierarchy and the number of levels can be user defined. The child nodes on space-filling method which can be constructed by the several rules [18]. the data X  X  properties, connection approaches are essentially advantageous in revealing space usage by getting rid of connecting edges. 
The above approaches, when simply adapted to mobile interfaces, usually cannot examples. However, the drawback, i.e. uneconomic space-usage, is as distinct as their loss of legibility or the overall sense of a hierarchy when reduced in size. 
Despite their economical screen usage, space filling methods have their own prob-lems in the process of adaptation. For InterRing [18] and Information Slices [2], effi-ciency of space usage depends significantly on how balance the tree is. The branches whose depths are much bigger than the others greatly decrease in the performance of space usage. Moreover, these two methods visually express a node by a part of cirque on which it is difficult to label. Tree Maps fully utilize the display space. The hierar-chical structure on a Tree Map is, however, hidden behind the enclosure relationships. 
In summary, none of the above hierarchy visualization methods can achieve both structural clarity and economic space usage on mobile devices. Next section describes the RELT methodology that aims at achieving both goals. 3.1 Methodology and Terminology Assume a university X  X  web site to be visualized and navigated on a mobile screen, as depicted in Figure 1, where schools of  X  X anagement X ,  X  X ngineering X , and  X  X cience X  each have a few departments. The root ( X  X niversity X ) locates at the top-left corner of structure with the root at the center of the screen. More generally, we should allow the root to be displayed anywhere on the screen, depending on the user X  X  preference and the requirement of the application domain. With the generalized RELT, it is straight-forward to display a layout with the root at the bottom-left corner (Figure 2(right)) or one of the other corners. 
With a rooted tree like the university structure, a center-rooted layout can be visu-alized as in Figure 3(left), where each level-2 node, i.e. a school, shares a border with 3(right) with the university example, departments locate under the school they belong to, which in turn locates adjacent to the university. 
Another type of center-rooted layout is to consider the sub-area of each child node different levels of details whenever desirable. 
Given any of these layouts, the user is able to navigate down and up the hierarchy, with a single user interaction, several levels of hierarchy (five in the university exam-ple) can be reached. navigation. A touch-screen interface (by either a finger or a stylus) would apparently and/or up and down the hierarchical levels, plus a confirmation button, as we experi-mented on a cell phone emulator to be discussed in Section 5. 
In general, the number of levels on a single display can be determined based on the for text labels. If color coding can easily discriminate and identify multiple groupings and levels of information, each tree node may be drawn by just a few colored pixels the RELT methodology to be generally scalable. 
In discussing the concept and terminology on how to draw the general RELT lay-out, we will refer to a tree node as a vertex that occupies a polygonal area in the draw-node-edge type of drawing, a directed edge (v, u)  X  E is used to express the parent-relationship between a parent and its children is shown by their adjacency on a radial sector and/or positions relative to each other. 
In general, there are three types of vertices in V for a RELT layout: 1. v = r : T(v) represents the tree itself covering the entire display space. 3. v  X  L : T(v) covers the area for only v itself. If v  X  L , i.e. type 1 or 2, then the set of v  X  X  children can be expressed by: CV i is the i th child of v . 1. WA(v) represents the entire area under vertex v . 2. OA(v) is the area occupied by v itself. 3. DA(v) is the area occupied by all of v  X  X  descendants. 3.2 Rules and Algorithm A radial edgeless tree can be constructed by applying the following four general rules for space allocation: 
A radial edgeless tree can be represented as a function RELT(V, r, LT) in which V sub-centers, i.e. the MC layout, as introduced in Section 3.1. The RELT algorithm is presented in pseudocode below. weight of v . One way to calculate the value of w(v ) is to use a weight function WF: 
Equation (2) basically says that, the value of w(v) depends on the overall weight of v  X  X  children. Different weight functions may be defined to meet different application requirements (see Section 4.2 for the weight function used to visualize the stock mar-weight function: 1. If v  X  L , w(v) = WF(1) = 1 ; 2. Otherwise, assuming the given v has n children, then A leaf vertex v has no children, and thus requires no distribution. Only its own area area based on the size of DA(v) and the children X  X  weights: DF() positions WA() of v  X  X  children in clockwise order. 
We now discuss the complexity of the RELT algorithm. As discussed in Section 3.1, column can be computed in linear time. Th erefore the overall time complexity is O( n ), where n is the number of vertices. 
In summary, RELT recursively partitions the display area into a set of non-overlapping polygons. Because every part of screen is utilized, economic screen estate is achieved. Parent-child relationships are explicitly represented by adjacent relation-ships, and thus the structural clarity is maintained. The continuing improvement in the computational and graphic capabilities for mobile devices is making timely retrieval of time-critical data a possibility. Stock marketing changes could significantly reduce the browsing time. The current practice is to clas-sify securities into different sectors which are further divided into specific industries, as illustrated in Figure 4. 4.1 The Current Treemap Approach The most popular stock mar-ket visualization tools cur-rently in use is the treemap approach, called portfolio map [14]. Treemap is a space-constrained and rectangular space-filling technique for visualizing hierarchical in-formation. None of the other approaches emphasizes the economic usage of the screen estate. Figure 5 visualizes the  X 10 stocks now 799 X . Tradi-tional stock coloring indicates stock price performance. Green stands for price up and red for down, black indicates tangle indicates the market capitalization of the corresponding company. answer must contain both macro and micro views. Neither simply answering the mar-software stocks. None of the current approaches including Treemaps can offer simul-taneous display of both a big picture and individual stock details. 4.2 The RELT Solutions RELT offers alternative solutions that overcome the major drawbacks of the ap-each individual stock as well as the capitalization of the corresponding company. We capitalization. The corresponding weight func tion can then be customized as follows: 2. Otherwise, assuming the given v has n children, then w(v) = WF(1000, w(CV 1 ), 
It is generally more difficult to tell the difference of the sizes between two arbitrar-ily shaped polygons than between two regular shapes such as rectangles. We therefore use a large constant (1000) in w(v) above, instead of 1 as in Section 3.2, to emphasize the size difference, i.e. the difference between the companies X  capitalizations. Giving DA(v)/WA(v) . The results are visualized in Figure 6, that includes a layout view with the root at the center and at the top-left corner. since RELT shows multiple levels on a single display while the Treemap shows only one level, as illustrated in Figure 5. This also implies that only one level of hierarchy may be reached (i.e. zoom it or out) by a user interaction with the Treemap. Multiple user interactions are needed to navigate fr om the high-level market overview to indi-vidual stock (company) performances. In order to evaluate whether the RELT methodology provides a more efficient inter-mentation on an emulator with one of the currently used cell phone interfaces, Sprint PCS Vision Phone  X  . The comparison is performed for the RELT center-rooted layout since the Sprint top-level interface looks similar and provides the navigation structure from the center as pictured in Figure 7. Th e hierarchical information to be navigated scribed below. 5.1 Sprint Interface The Sprint interface has 9 top level service categories, as shown in Figure 7(a). There are totally 43 second level sub-categories under the 9 services, and each second level sub-category may include 0 to 6 third level items or sub-sub-categories. A third level sub-sub-category may include a few items at the fourth level. The last level is the 5 th level. The entire hierarchical struc-ture can be represented as a tree that has about 150-250 nodes. Some of the nodes at levels 2 through 5 are leaves, which should be the cell phone functions that the user wishes to arrive at in the shortest time, or with the fewest user interactions. 5.2 Emulated RELT RELT has been implemented on a SUN cell phone emulator as in Figure 7(right) that reads in the Sprint hier archy structure as an XML file. The default selection is at inverse color as shown in Figure 7(right). Each screen display shows several levels of hierarchy (3 in this experiment), and a selection on a lower level node will make that node a root, whose child and grand-child nodes are then displayed as illustrated in the two examples in Figure 8. The left image shows when the level 2 node  X  X essaging X  becomes the root, and the right one shows the level 3 node  X  X ound X  to be the root. 
The text labels are arranged to maximize the space usage while avoiding cluttering, particularly the overlap with the polygon edges. We use a simple approach in labeling the text's midpoint to the same angle as the longest side of the polygon. The label is point. Though this approach may not generate perfectly aesthetic labeling, it is simple and fast with quite satisfactory display results as shown. 5.3 Results Comparison To make a fair comparison, we have also implemented the Sprint interface on a com-Sprint cell phone functions). subjects, of whom half performed first on Sprint and then the RELT interface and the form the following 9 different actions on both interfaces, 1. Find if you called Mike on March 23; 2. Find whether David has called you on March 10; 3. Find the Settings of the Receiver Volume of the Speaker; 4. Go to Stopwatch Lap2; 5. Find the Settings of the Power-off Tone; 6. Launch Tetris game; 7. View the Picture Album; 8. Find the Settings of the Messaging Signature; and 9. Find the Directory Services. 
A touch-screen interface is assumed for both Sprint and RELT, the user can touch directly on the screen to select desired functions without pushing any buttons. Each  X  X ouch X  is simulated by a mouse click on the selected node. We compared the number of clicks (touches) on the screen performed and total time in seconds taken for each action on both Sprint and RELT interfaces, as shown in Figure 9. An action numbers in the figures for both RELT and Sprint are averaged over the 18 subjects. those who performed faster on Sprint had been using the similar cell phone interface and thus were fairly familiar with the Sprint interface (as evidenced below), while the RELT interface is totally unfamiliar to all the subjects. 
We also asked the subjects several general questions in a questionnaire. When asked  X  X n your experience in using cell phones, finding a piece of information on the current cell phone is ... X , 6 subjects chose  X  X asy X , 7 chose  X  X K but improvements are needed  X , 2 with no response, and 3 felt unsatisfactory . Seventeen subjects responded positively to the question  X  X ave you used the provided Sprint interface before, or are you familiar with this particular interface? X , with only one negative. In response to the choose? X  10 subjects reported to choose RELT, 7 choose Sprint, and one did not indi-cate any preference. era for information visualization, and also multiple challenges for effective user inter-face design. This paper has presented the RELT approach for visualizing hierarchical information on mobile interfaces. Two issues, economical space usage and clear hier-implemented to generate all the RELT figures in this paper. It has a linear time com-plexity and can be easily adapted to suit va rious applications. We have demonstrated this adaptability by visualizing the stock market performance, where the size of each leaf vertex is made a function of the corresponding company X  X  capitalization. navigation schemes, in comparison with Sprint and other popular cell phone interfaces. 
