 Personalized PageRank (PPR) based measures of node proximity have been shown to be highly effective in many prediction and rec-ommendation applications. The use of personalized PageRank for large graphs, however, is dif fi cult due to its high computation cost. In this paper, we propose a Locality-sensitive , Re-use promoting , approximate personalized PageRank (LR-PPR) algorithm for ef fi -ciently computing the PPR values relying on the localities of the given seed nodes on the graph: (a) The LR-PPR algorithm is lo-cality sensitive in the sense that it reduces the computational cost of the PPR computation process by focusing on the local neighbor-hoods of the seed nodes. (b) LR-PPR is re-use promoting in that instead of performing a monolithic computation for the given seed node set using the entire graph, LR-PPR divides the work into lo-calities of the seeds and caches the intermediary results obtained during the computation. These cached results are then reused for future queries sharing seed nodes. Experiment results for different data sets and under different scenarios show that LR-PPR algorithm is highly-ef fi cient and accurate.
 H.3 [ Information Storage and Retrieval ]: Miscellaneous Personalized PageRank; Locality-Sensitivity; Reuse-Promotion
Node distance/proximity measures are commonly used for quan-tifying how nearby or otherwise related to two or more nodes on a graph are. Path-length based de fi nitions [17] are useful when the relatedness can be captured solely based on the properties of the nodes and edges on the shortest path (based on some de fi nition of path-length). Random-walk based de fi nitions, such as hitting dis-tance [16] and personalized page rank (PPR) score [4, 13, 21] of This work is supported by NSF Grant 1043583  X  X iNC: NSDL Middleware for Network-and Context-aware Recommendations X . Figure 1: Key questions: Given a graph, G , and a seed set of nodes S = { v 1 ,v 2 ,v 3 } in G , can we rank the remaining nodes in the graph regarding their relationships to the set S ?Which of the nodes a through d is the most interesting given the seed setofnodes v 1 through v 3 ? node relatedness, on the other hand, also take into account the den-sity of the edges: unlike in path-based de fi nitions, random walk-based de fi nitions of relatedness also consider how tightly connected two nodes are and argue that nodes that have many paths between them can be considered more related. Random-walk based tech-niques encode the structure of the network in the form a transi-tion matrix of a stochastic process from which the node relation-ships can be inferred. When it exists, the convergence probabil-ity of a node n gives the ratio of the time spent at that node in a suf fi ciently long random walk and, therefore, neatly captures the connectivity of the node n in the graph. Therefore, many web search and recommendation algorithms, such as PageRank [5], rely on random-walks to identify signi fi cant nodes in the graph: let us consider a weighted, directed graph G ( V,E ) ,wherethe weight of the edge e j  X  E is denoted as w j (  X  0) and where v  X  V is the stationary distribution of a random walk on G ,where at each step with probability 1  X   X  , the random walk moves along an outgoing edge of the current node with a probability proportional to the edge weights and with probability  X  , the walk jumps to a random node in V . In other words, if we denote all the PageRank scores of the nodes in V with a vector  X  ,then where T G denotes the transition matrix corresponding to the graph G (and the underlying edge weights) and j is a teleportation vector where all entries are 1
An early attempt to contextualize the PageRank scores is the topic sensitive PageRank [12] approach which adjusts the PageR-ank scores of the nodes by assigning the teleportation probabili-ties in vector j in a way that re fl ects the graph nodes X  degrees of Figure 2: Locality-sensitivity: Computation of PPR should fo-cus on the neighborhoods (localities) of the seeds Figure 3: Re-use promotion: Two PPR queries sharing a seed node ( v 1 ) should also share relevant work match to the search topic. [6, 7] were among the fi rst works which recognized that random-walks can also be used for measuring the degree of association , relatedness ,or proximity of the graph nodes to a given seed node set , S  X  V (Figure 1). An alternative to this approach is to modify (as in topic sensitive PageRank [12]) the teleportation vector, j : instead of jumping to a random node in with probability  X  , the random walk jumps to one of the nodes in the seed set, S , given by the user. More speci fi cally, if we denote the personalized PageRank scores of the nodes in V with a vector  X  ,then where s is a re-seeding vector, such that if v i  X  S ,then and s [ i ]=0 , otherwise. One key advantage of this approach over modifying the transition matrix as in [6] is that the term used to directly control the degree of seeding (or personalization) of the PPR score. However, the use of personalized PageRank for tor  X  ,given  X  , transition matrix T G , and the seeding vector One way to obtain  X  is to solve the above equation for  X  mathe-matically. Alternatively, PowerIteration methods [14] simulate the dissemination of probability mass by repeatedly applying the tran-sition process to an initial distribution  X  0 until a convergence cri-terion is satis fi ed. For large data sets, both of these processes are prohibitively expensive. Recent advances on personalized PageR-ank includes top-k and approximate personalized PageRank algo-rithms [1, 3, 8, 10, 11, 20, 22] and parallelized implementations on MapReduce or Pregel based batch data processing systems [2,15]. The FastRWR algorithm presented in [22] for example partitions the graph into subgraphs and indexes partial intermediary solutions. Unfortunately, for large data sets, FastRWR requires large number of partitions to ensure that the intermediary metadata (which re-quires dense matrix representation) fi ts into the available memory and this negatively impacts execution time and accuracy.
In this paper, we argue that we can improve both scalability and accuracy through a Locality-sensitive , Re-use promoting , approxi-mate personalized PageRank (LR-PPR) algorithm: LR-PPR is Figure 4: Incoming and outgoing boundary nodes/edges and a node shared between two localities
In the following section, we fi rst formally introduce the problem and then present our solution for locality-sensitive , re-use promot-ing , approximate personalized PageRank computations. We evalu-ate LR-PPR for different data sets and under different scenarios in Section 3. We conclude in Section 4.
Let G =( V,E ) be a directed graph. For the simplicity of the discussion, without any loss of g enerality, let us assume that unweighted 1 . Let us be given a set S  X  V of seed nodes (Figure 1) and a personalization parameter,  X  .Let G S = { G h ( V h h  X  K } be K = S subgraphs of G , such that We fi rst formalize the locality-sensitivity goal (Figure 2): Desideratum 1: Locality-Sensitivity. Our goal is to compute an approximate PPR vector,  X  apx ,using G S instead of G , such that  X  apx  X   X  ,where  X  represents the true PPR scores of the nodes in V relative to S : i.e., where T G is the transition mat rix corresponding to G and re-seeding vector corresponding to the seed nodes in S . We next formalize the re-use promotion goal (Figure 3): Desideratum 2: Reu se-Promotion. Let S 1 and S 2 be two sets of seed nodes and let v i be a node such that v i  X  S 1  X  S 2 approximate PPR vector,  X  apx, 1 corresponding to S 1 have already been computed using G S 1 and let us assume that the approximate PPR vector,  X  apx, 2 corresponding to S 2 is being requested. The part of the work performed when processing G i  X  X  S 1 (corre-sponding to v i ) should not need to be re-performed when process-ing G i  X  X  S 2 , when computing  X  apx, 2 using G S 2 .
Unlike existing approximate PPR algorithms [1, 3, 8, 10, 11, 20, 22], LR-PPR is location sensitive . Therefore, given the set, Figure 5: An equivalence set consists of the copies of a node shared across multiple seed locality graphs seed nodes and the co rresponding localities, G S , the computation focuses on the combined locality G + ( V + ,E + )  X  G ,where Given a combined locality, G + , we can also de fi ne its external graph , G  X  ( V  X  ,E  X  ) , as the set of nodes and edges of are outside of G + and boundary nodes and edges. As shown in Figure4,wereferto v i  X  V l as an outgoing boundary node of G l if there is an outgoing edge e i,j =[ v i  X  v j ]  X  E ,where v j /  X  V l ; the edge e j is also referred to as an outgoing boundary edge of G l . The set of all outgoing boundary nodes of G noted as V outbound,l and the set of all outgoing boundary edges of G E
We also de fi ne incoming boundary nodes ( V inbound,l )and in-coming boundary edges ( E inbound,l ) similarly to the outgoing boundary nodes and edges of G l , but considering inbound edges to these subgraphs. More speci fi cally, E inbound,l consists of edges of the form [ v i  X  v j ]  X  E ,where v j  X  V l and v i /  X 
Since LR-PPR focuses on the combined locality, G + , the next step is to combine the transition matrices of the individual localities into a combined transition matri x. To produce accurate approxima-tions, this localized transition matrix , however, should nevertheless take the external graph, G  X  , and the boundaries between G + , into account. Let v ( l,i ) ( 1  X  l  X  K ) denote a re-indexing of vertices in If member of an equivalence set , V c (Figure 5). Intuitively, the equiv-alence sets capture the common parts across the localities of the individual seed nodes. Given G l ( V l ,E l )  X  G and an appropriate re-indexing, we de fi ne the corresponding local transition matrix, M l ,asa V l  X  V l matrix, where
Given the local transition matrices, M 1 through M K ,we local-ize the transition matrix of G by approximating it as where M bd is a block-diagonal matrix of the form  X   X   X   X   X  0 0 where M K +1 is equal to the 1  X  1 matrix 0 1  X  1 . Intuitively, M bd combines the K subgraphs into one tran sition matrix, without considering common nodes/edges or incoming/outgoing boundary edges and ignoring all outgoing and incoming edges. All the exter-nal nodes in G  X  are accounted by a single node represented by the 1  X  1 matrix M K +1 .

A key advantage of M bd is that it is block-diagonal and, hence, there are ef fi cient ways to process it. However, this block-diagonal matrix, M bd , cannot accurately represent the graph G as it ignores potential overlaps among the indi vidual loca lities and ignores all the nodes and edges outside of G + . We therefore need a compen-sation matrix to
Lettbe ( V 1 + V 2 + ... + V K +1) . The compensation matrix, M 0 ,isa t  X  t matrix accounting for the boundary edges of the seed localitie s as well as the nodes/edges in G  X  ensures that the common nodes in V 1 through V K are not double counted during PPR calculations. M 0 is constructed as follows: Row/column indexing: Let v l,i be a vertex in V l . We introduce a row/column indexing function, ind () ,de fi ned as follows: Intuitively the indexing function, ind () , maps the relevant nodes in the graph to their positions in the M 0 matrix.
 Compensation for the common nodes: Let e l,i,j be an edge [ v lence set V c for some v c  X  V . Then, if V c &gt; 1 where out ( G, v ) is the outdegree of node v in G . Intuitively, the compensation matrix re-routes a portion of the transitions going towards a shared node in a given locality V l to the copies in other seed localities. This prevents the transitions to and from the shared node from being mis-counted.
 Compensation for outgoing boundary edges: The compensa-tion matrix needs to account also for outgoing boundary edges that are not accounted for by the ne ighborhood transition matrices M through M K : The compensation matrix records all outgoing edges, whether they cross into another locality or th ey are into external nodes in a node has more than one outgoing edge into the nodes in G such edges are captured using one single compensation edge which aggregates all the correspondi ng transition p robab ilities. Compensation for incoming boundary edges (from G  X  ): Sim-ilarly to the outgoing boundary edges, the compensation matrix needs also to account for incoming boundary edges that are not accounted for by the neighbor hood transition matrices M 1 M
K . Since incoming edges from other localities have been ac-counted for in the previous step, here we only need to consider incoming boundary edges (from G  X  ). Following the formulation in [23], we account for incoming edges where the source is exter-nal to G + and the destination is a vertex v ( l,i ) in V an edge from the dummy node to v ( l,i ) with a weight that con-siders the outdegrees of all external source nodes; i.e.,  X   X  equivalence set V c for a v c  X  V , M 0 [ ind ( l, i ) ,t ] where out ( G, v ) is the outdegree of node v in G .
 Compensation for the edges in G  X  : We account for edges that are entirely in G  X  by creating a self-loop that represents the sum of outdegree fl ow between all external nodes averaged by the number of external nodes; i.e., where out ( G  X  ,v ) and out ( G, v ) are the outdegrees of node G  X  and G , respectively.
 Completion: For any matrix position p, q not considered above, no compensation is necessary; i.e., M 0 [ p, q ]=0 .
Once the block-diagonal l ocal transition matrix, M bd ,andthe compensation matrix, M 0 , are obtained, the next step is to obtain the PPR scores of the nodes in V + . This can be performed using any fast PPR computation algorithm discussed in Section 1.1.
Note that the overall transition matrix M apx = M bd + M 0 approximate in the sense that all the nodes external to G tered into a single node, represented by the last row and column of the matrix. Otherwise, the combined matrix M apx accurately rep-resents the nodes and edges in the  X  merged localities graph  X  X om-bining the seed localities, G 1 through G K . As we see in Section 3, this leads to highly accurate PPR scores with better scalability than existing techniques.
Our goal is not only to leverage locality-sensitivity as in L-PPR, but also to boost sub-result re-use. Remember that, as discussed above, the localized transition matrix M apx is equal to M where (by construction) M bd is a block-diagonal matrix, whereas M 0 (which accounts for shared, boundary, and external nodes) is relatively sparse. We next use these two properties of the decompo-sition of M apx to ef fi ciently compute approximate PPR scores of the nodes in V + . In particular, we rely on the following result due to [22], which itself relies on the Sherman-Morisson lemma [18]: We use the above observation to ef fi ciently obtain PPR scores by setting c =(1  X   X  ) , C = M apx , A = M bd ,and U SV = M 0 In particular, we divide the PPR computation into two steps: a locality-sensitive and re-usable step involving the computation of the Q  X  1 term using the local transition matrices and a run-time computation step involving the compensation matrix.
Local transition matrices, M 1 through M K corresponding to the seeds v 1 through v K are constant (unless the graph itself evolves over time). Therefore, if Q  X  1 and cached once, it can be reused for obtaining Q  X  1 block diagonal matrix consisting of Q  X  1 1 through Q  X  1 the last block, Q  X  1  X   X   X   X   X   X  0 0 In order to be able to use the above formulation for obtaining the PPR scores of the nodes in V + , in the query time, we need to de-compose the compensation matrix, M 0 ,into U 0 S 0 V 0 . While ob-taining a precise decomposition in run-time would be prohibitively expensive, since M 0 is sparse and since we are looking for an ap-proximation of the PPR scores, we can obtain a fairly accurate low-rank approximation of M 0 ef fi ciently [22]: Given this decomposition, the result vector  X  apx , which contains the (approximate) PPR scores of the nodes in V + , is computed as where
Note that the compensation matrix M 0 is query speci fi c and, thus, the work done for the last step cannot be reused across queries. However, as we experimentally verify in Section 3, the last step is relatively cheap and the earlier(costlier) steps involve re-usable work. Thus, caching and re-use through LR-PPR enables signi fi -cant savings in execution time. We discuss the overall complexity and the opport unities for re-use next.
Analysis of LR-PPR points to the following advantages: First of all, computation is done using only local nodes and edges. Sec-ondly, most of the results of the expensive sub-tasks can be cached and re-used. Moreover, costly matrix inversions are limited to the smaller matrices representing localities and small matrices of size r  X  r . Various subtasks have complexity proportional to V + 2 be arbitrarily large, in practic e we select loca lities with a bounded number of nodes; i.e.,  X  1  X  l  X  K , V l  X  L for some L V
As described above LR-PPR algorithm supports caching and re-use of some of the intermediary work. The process results in lo-cal transition matrices, each of which can be cached in O ( E space (where E l is the number edges in the locality) assuming a sparse representation. The algorithm also involves a matrix in-version, which results in a dense matrix; as a result, caching the inverted matrix takes O ( V l 2 ) space (where V l is the number of to constant space usage of O ( L 2 ) ,where L is the maximum num-ber of nodes in the locality. If the inverted matrix of a locality is cached, then the local transition matrix does not need to be main-tained further. For cache replacement, any frequency-based or pre-dictive cache-replacement policy can be used.
In this section, we present results of experiments assessing the ef fi ciency and effectiveness of the Locality-Sensitive, Re-use Promoting Approximate Personalized PageRank (LR-PPR) algo-rithm. Table 1 provides overviews of the three data sets (from http : // snap . stanford . edu / data / ) considered in the experi-ments. We considered graphs with different sizes and edge densi-ties. We also varied numbers of seeds and the distances between the seeds (thereby varying the overlaps among seed localities). We also considered seed neighborhoods (or l ocalities) of diff erent sizes.
Experiments were carried out using a 4-core Intel Core i5-2400, 3.10GHz, machine with 8GB memory and 64-bit Windows 7 En-terprise. Codes were executed using Matlab 7.11.0(2010b). All experiments were run 10 times and averages are reported. Global PPR: This is the default approach where the entire graph is used for PPR computation. We compute the PPR scores by solving the equation presented in Section 1.1.
 FastRWR: This is an approximation algorithm, referred to as NB_LIN in [22]. The algorithm reduces query execution times by partitioning the graph into subgr aphs and preprocessing each par-tition. The pre-computed fi les are stored on disk and loaded to the memory during the query stage. To be fair to FastRWR, we selected the number of partitions in a way that minimizes its execution time and memory and maximizes its quality.
 L-PPR: This is our locality sensitive algorithm, where instead of using the whole graph, we use the localized graph created by com-bining the locality nodes and edges as described in Section 2.2. Once the localized transition matrix is created, the PPR scores are computed by solving the equation presented in Section 1.1. LR-PPR: This is the locality sensitive and re-use promoting algo-rithm proposed described in detail in Section 2.4.

The restart probability,  X  , is set to 0.15 for all approaches. Ef fi ciency: This is the amount of time taken to load the relevant (cached) data from the disk plus the time needed to carry out the operations to obtain the PPR scores. Figure 6: Accuracies of L-PPR, LR-PPR, and FastRWR against the Global PPR for different numbers of target nodes Accuracy: For different algorithm pairs, we report the Spearman X  X  rank correlation which measures the agreement between two rankings (nodes with the same score are assigned the average of their positions in the ranking). Here, x and y are rankings by two algorithms and are average ranks. To compute the rank coef fi cient, a portion of the highest ranked nodes in the merged graph according to x are con-sidered. As default, we considered 10 % highest ranked nodes; but we also varied the target percentage (5%, 10%, 25%, 50%, 75%) to observe how the accuracy varies with result size.
 Memory: We also report the amount of data read from the cache. Table 2 presents experimental results for FastRWR, L-PPR, and LR-PPR. First of all, all three algorithms are much faster than Global PPR. As expected, in small data sets (Epinions and Slash-dot) FastRWR works faster than L-PPR and LR-PPR, though in many cases, it requires more memory. In large data sets ,however, L-PPR and LR-PPR signi fi cantly outperform FastRWR in terms of query processing ef fi ciency and run-time memory requirement. In terms of accuracy, the proposed locality sensitive techniques, L-PPR and LR-PPR, constantly outperform FastRWR. This is be-cause, FastRWR tries to approximate the whole graph, whereas the proposed algorithms focus o n the relevant localities. Fas-tRWR requires large number of partitions to ensure that the inter-mediary metadata (which requires dense matrix representation) fi ts into memory and this negatively impacts accuracy. Our locality-sensitive algorithms, L-PPR and LR-PPR, avoid this and provide high accuracy with low memory consumption, especially in large graphs, like WikiTalk.

Figure 6 con fi rms that the accuracies of L-PPR and LR-PPR both stay high as we consider larger numbers of top ranked net-work nodes for accuracy assessment, whereas the accuracy of Fas-tRWR suffers signi fi cantly when we consider larger portions of the merged locality graph.
 Figure 7 studies the execution time behavior for L-PPR, LR-PPR, and FastRWR for different number of seed nodes. As the fi gure shows, the time cost increases for both L-PPR and LR-PPR algorithms as the number of seeds increases. But, the cost of LR-PPR (which leverages re-use) increases much slower than the cost of L-PPR and both remain signi fi cantly cheaper than FastRWR. Figure 7: Execution times of L-PPR, LR-PPR, and FastRWR for different numbers of seed nodes
In this paper, we presented a Locality-sensitive, Re-use promot-ing, approximate Persona lized PageRank (LR-PPR) algorithm for ef fi ciently computing the PPR values relying on the localities of the seed nodes on the graph. Instead of performing a monolithic computation for the given seed node set using the entire graph, LR-PPR divides the work into localities of the seeds and caches the in-termediary results obtained during the computation. These cached results can then be reused for future queries sharing seed nodes. Experiments showed that the proposed LR-PPR approach provides signi fi cant gains in execution time relative to existing approximate PPR computation techniques, where the PPR scores are computed from scratch using the whole network. LR-PPR also outperforms L-PPR, where the PPR scores are computed in a locality-sensitive manner, but without signi fi cant re-use.
