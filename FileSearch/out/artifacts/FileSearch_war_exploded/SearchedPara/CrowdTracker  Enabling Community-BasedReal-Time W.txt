 CrowdTracker is a community-based web monitoring system opti-mized for real-time web streams like Twitter, Facebook, and Google Buzz. In this demo summary, we provide an overview of the system and architecture, and outline the demonstration plan.
 Categories and Subject Descriptors: H.3.3 [Information Storage and Retrieval]: Information Search and Retrieval; H.3.4 [Informa-tion Storage and Retrieval]: Systems and Software General Terms: Algorithms, Design, Experimentation Keywords: community, crowd, real-time web, monitoring
The real-time web is fast becoming an indispensable resource, opening up fresh opportunities for enabling a new generation of applications for monitoring, analyzing, and distilling information from the prospective web of real-time content that ref ects the cur-rent activity of the web X  X  participants. As a step toward realizing this vision, we are investigating techniques and developing effec-tive methods for automatically discovering and tracking the evo-lution of transient crowds from the massive scale of the real-time web. A transient crowd is an ad-hoc collection of users that ref ects the real-time interests and aff liations of users [2]. Unlike the more static and perhaps staler group-based membership offered on many social networks (e.g., members of the Texas A&amp;M community, res-idents of Ohio), transient crowd discovery promises organic and highly-temporal group interest identif cation and provides a power-ful mechanism for analyzing the topical, demographic, and social characteristics of crowds with respect to multiple spatial granulari-ties. (e.g., neighborhood-based interests, city-based trends, state-wide movements, etc.). Successful crowd monitoring can posi-tively impact online event detection, content personalization, social information discovery, as well as lead to new crowd-based applica-tions in areas like search, advertising, and emergency management.
The CrowdTracker system supports crowd-oriented web moni-toring optimized for real-time web streams like Twitter, Facebook, and Google Buzz. Concretely, the system supports three over-lapping crowd perspectives: (i) communication-based , ref ecting groups of users who are actively messaging each other, e.g., users coordinating a meeting; (ii) location-based , ref ecting groups of users who are geographically bounded, e.g., users posting mes-sages from Houston, Texas [1]; and (iii) interest-based , ref ecting groups of users who share a common interest, e.g., users posting messages about a presidential debate. While each of these crowd perspectives can be monitored separately, in many cases it will be important to monitor cross-cutting crowds, e.g., users in Houston (location-based), messaging each other (messaging-based) about a local f re (interest-based). The crowd tracking prototype collects social media streams (primarily from Twitter for the purposes of this demo), and then passes these streams to the crowd tracking and trending component, including the three-layered crowd detection component (communication-based, geo-based, and topic-based). Frontend: The frontend is designed to provide the user with a simple and f exible interface to maximize their options for explor-ing crowds. The primary display is a crowd display window, in-cluding both a global view panel and a personal workspace panel. The personal workspace panel is designed for exploration of a set of crowds marked by the user when exploring in the global view panel. Since each crowd may be associated with a starting and end-ing time, crowd participants, topics, messages, location data, and so on, we consider a timeline, list, and map format.
 Backend: The backend relies on several modules, including a crawler for collecting information from real-time web streams; a f lter for removing unwanted spam messages and low-quality content en-countered by the crawler; a grouper for identifying crowds from the data collecting and inserting them into a database; and HTTP JSON RESTful APIs for exposing an HTTP-based API that clients can query to return crowds, users, and their messages. Concretely, the backend relies on several tools including Beanstalk , a simple, fast work queue used to connect the crawlers, f lters, and groupers together; Tornado , a fast and scalable non-blocking web server; and MongoDB , a scalable, high-performance, open source, document-oriented database for storing discovered crowds.
As part of the demonstration, attendees will be able to view sig-nif cant crowds along a number of dimensions (e.g., by size, by growth rate), drill down for details on particular crowds (to view the timeline of the crowd, members of the crowd, and crowd-based themes), query for crowds that match simple keywords, and f l-ter crowds by geography (e.g., to view crowds based primarily in Texas). [1] Z. Cheng, J. Caverlee, and K. Lee. You are where you tweet: [2] K. Kamath and J. Caverlee. Transient crowd discovery on the
