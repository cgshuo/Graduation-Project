 Distributed and parallel data mining has become important due to the increased amounts of data stored in various storage devices, as accessed by high-speed net-working infrastructures [1]. Along this line of research, we focus on association mining from hierarchical distributed databases. In traditional data mining, a data record basica lly corresponds to an itemset, which is a set of items of a single conceptual level, such as milk and egg in a basket. The purpose is to find the associations between the items which are frequently included in the same itemsets. At the same time, we assume that the given top-level element can be separated into a set of lower level elements. For example, complex indus-trial products such as cars consist of thousands of parts which are hierarchically assembled. Association mining among hierarchically assembled products is im-portant in practice, such as when a manufacturing company faces a safety recall of defective products. It is useful to find the set of suspect subitems (parts) that have high correlation rates with the list of failed products, since the company wants to reduce the number of recalled products and minimize the costs. Each component is assigned its name (parts ID) and the product information is man-aged with identity labels such as lot numbers. This allows us to regard the causal analysis of recalls as the association rule mining between failed products and the parts of a specific lot number. Note that an association with failed product might not reflect the true cause of the failure. H owever, the causal items should show high associations and we should benefit from knowing the revealed associations.
Contemporary final products consist of tens of thousands of parts manufac-tured by other companies (called parts suppliers), which means that the assem-bly information is stored in physically distributed databases. Mining across such databases can be difficult and expensive since the queries must be transmit-ted over a network or through human processes. This forces us to address the real-world requirements of industrial information management where we cannot modify the transmission of assembly information between the suppliers. Though integrating the hierarchical databases into one data table allows using existing mining algorithms, it is generally unrealistic due to confidentiality issues and the massive size of the subassemblies of complex products. In most cases each company communicates only with one cust omer company (higher-level supplier) and with its own parts suppliers (lower-level suppliers). In addition, the anti-monotonicity of associat ions between items might be violated since an item can be included in multiple upper-level item s. For example, two sets of electric cir-cuits with different lot numbers may share capacitors with the same lot number. This makes it impossible to apply existing hierarchical mining algorithms that assume the anti-monotonic property.

The key of our approach is to introduce virtual lot numbers that connect cur-rent lot numbers with lower-level assembly information. The virtual lot numbers allow us to calculate the upper-bounds of the association rates with the descen-dant subitems and to prune the search s pace effectively in the tree structure of assembly. This approach also has a significant advantage in that we do not require any modifications to the design of the existing assembly databases, since the virtual lot number is still a kind of lot number (a natural number) so that it is stored and transmitted in the same way as a normal lot number within the distributed manufacturing system. We evaluate the efficiency of our algorithm using artificial datasets generated by a simulator of a manufacturing process. 2.1 Product Recall Product recalls are causing increasingly large problems for manufacturing indus-tries. For example, major automotive companies have suffered from the safety recall problems of their cars. In the U.S. t he number of recalled vehicles increased by 25% in 2007. Since the costs for recalls increase linearly with the number of recalled products, the company wants to recall the smallest number of suspicious products that might have the dangerous defect.
 2.2 Hierarchical Assembly In this paper we address association rule discovery in hierarchical assemblies of components. A top-level component (final product) contains a set of subcom-ponents. Since the subcomponents might also be separated into lower-level sub-components, we regard the products as hierarchical-structured sets of subcom-ponents. In terms of the hierarchical production (assembly), the tree structure of the components also appears in the entire production system. We consider suppliers as manufacturers of components which form a hierarchical architec-ture like a supply chain of the subcomponents. For simplicity, we assume that each supplier produces only one component (part) without loss of generality. The assembly information transmitted and stored among the suppliers can also feed hierarchically connect ed databases. Note that these databases may be phys-ically distributed and not connected via any networ k so that access to another database is exceedingly time-consuming. Therefore, we want to prune unnec-essary database scans for efficient searc hes. These hierarchies of components, suppliers, and databases directly correspond to the structure of the parts as-sembly, supply chain and information used in the manufacture of an industrial product. Figure 1 shows the relationships between the composition of product A, its supply chain and the distributed assembly databases. The product consists of parts A1, A2, A3 according to its design as shown in Figure 1(a). Since each part can also has its own subcomponents such as A11 and A12, the structure is a tree. Figure 1(b) shows the hierarchical supply chain involving the manufac-turer and the parts suppliers. The hierarchical structure also appears between the databases in Figure 1(c).
 2.3 Lot Representation We define item (the minimum unit of a data instance) to be considered in our mining problem. Note that each component cannot be a data item by itself since the co-occurrence of different subcompon ents is generally fixed by the design of the final product. Instead, our interest is on a subset of objects of the parts, since the independent objects of the same parts might have different qualities and a fatal defect may be caused by a specific subset of the parts. Therefore we use a production label such as a lot number with its part ID as the data item. Lot-based management of assembly information is common in the manu-facturing industry and there are some standards and infrastructure support such as the EPC (Electronic Product Code) [2] for information management across supply chains. The lot number tends to be updated when changes happen in the production environment such as an assembly line, workers, or production dates. Therefore we can assume that a set of components assigned to a lot number have almost the same quality due to their simultaneous production in the same environment.
 Definition 1. Each object in a hierarchically assembled product corresponds to an item ( id, ) where id indicates the part ID and represents the production label such as the lot number of the object. 2.4 Assembly Database We introduce a simplified design for hierarchically distributed databases of as-sembly information, relying on the structure of the supply chains. There are two types of database that each supplier maintains. The first is a product informa-tion database that stores production information of the assembly components. The product information database is typically a relational database in which each row represents a production object of the component identified by its lot number. The columns can include any information related to the products such as serial numbers or production dates. Let us note that the product databases are typically heterogeneous among suppliers and the column elements may differ. Table 1 represents an example of a production information database for product A. The column Serial denotes the serial number of each object. The columns Lot and VirtualLot show the original and virtual lot numbers that we define in Section 4.
 The second type of supplier database is an assembly information database. The assembly information is basically the relationships between a supplier X  X  own products at level i and the descendant lot numbers of their own subcomponents at level i  X  1. We can obtain the assembly information for all products easily as long as all of the sub-products are delivered and used in the order of their lot numbers. This connection acr oss the assembly databases relates the properties of the high-level components to the quality of the descendant lower-level subcom-ponents. However, in general each supplie r cannot directly a ccess the databases of lower-level suppliers. Table 2 shows a corresponding assembly information database. Each row represents a subcomponent as shown in PartsID and Sup-plierID for an object specified with the serial number. Note that the assembly information databases of the deepest suppliers of the basic parts may be empty. The column VirtualLot denotes the virtual lot numbers of the subcomponents. We assume that every supplier has these two databases in our experiments. Definition 2. We have two types of manufacturing database for each supplier of a component. The product information database D P stores the production information such as a lot number for each produced object. The assembly in-formation database D A represents the relationships between the product and its subcomponents represented as lot numbers. Under the above setting, the only information we can use is the link of the lot numbers between a product and its sub-product parts. Therefore we calculate the association between two items based on the frequency of co-occurrences of their lot numbers. An entire set of items { ( id j , j ) } N j =1 represents every combination of products and their lot numbers.  X  ( I ) is the number of the occurrences of an item I  X  X  ( id j , j ) } N j computes the number of co-occurrences of A and B . We can regard them as a pair with strong association if and only if both items appear in the same top-level products frequently more than threshold  X  . We calculate the confidence of the association between A and B as  X  ( A  X  B ) 2 / X  ( A ), rather than the common definition  X  ( A  X  B ) / X  ( A ). This weighted confidence allows us to emphasis the associations of smaller parts since single lot number is assigned to hundreds of objects for deep level parts. For example, 10% co-occurrence rate in 10 , 000 objects with a lot number is meaningful than the same co-occurrence rate in only 100 objects that might be occurred by chance.
 Definition 3. For two items A =( id a , a ) and B =( id b , b ) in the itemset { rule A  X  B in which B occurs frequently when A occurs.
 Finally we define the problem of the association rule mining from the hierarchi-cally distributed databases.
 Definition 4. Given an entire itemset { ( id j , j ) } N j =1 , a set of focused top-level components R and threshold  X  , enumerate all items which satisfy R  X  I . We try to identify the suspect components and their lot numbers based on a set of failed top-level products R =( id top , fail ). Given a limited number of high-association items we can easily in spect each of them one-by-one to find the root cause of the failures. This allows the manufacturer to limit the number of recalled final products and minimize the cost of the safety recall. 4.1 Virtual Lot Number We introduce the virtual lot numbers for efficient transmission of assembly in-formation along the supply chain. Figure 2 shows an example of the virtual lot numbers of product A. The top row is the original lot numbers defined during the sequential production of A. The middle rows represent the lot splits of the sub-components of A. Double lines show the change points of their own lot num-bers. The bottom row is the consequent virtual lot numbers. The value of the virtual lot number is updated when the original lot number changes or the lot split of a subcomponent occurs to combine the assembly information. The point is that virtual lot numbers can also be represented and stored as single num-bers. Therefore we can replace the original lot numbers with the virtual numbers without modification to the existing system for transmitting lot numbers. This allows us to delegate the assembly information of lower-level subcomponents to the higher-level suppliers so that the aggregated assembly information of final products does not grow exponentially.
 4.2 Upper Bound of Association We describe how to compute the association between failures and an item using virtual lot numbers efficiently. The point is that the objects of the parts with an original lot number are always assigned one or more virtual lot numbers. For example, in Figure 2, five objects of product A with the lot number 3 contain the virtual lot numbers 4 and 5. They include two failed objects so that the weighted confidence of the item is (2  X  2) / 5=0 . 8. On the other hand, the weighted confidence with the virtual lot numbers 4 and 5 are (1  X  1) / 3=0 . 333  X  X  X  and (1  X  1) / 2=0 . 5. Then the sum of confidence (0 . 833  X  X  X  ) is larger than 0 . 8. In fact, the virtual lot numbers provide the following theorem.
 Theorem 1. The sum of the weighted confidences with the virtual lot numbers is an upper bound of the weighted confidence of the corresponding original lot number.
 In the same way, we can compute the upper bound on a subcomponent since all lot numbers of a subcomponent also contain one or more virtual lot numbers. For example, the corresponding weighted confidence rates with items of subparts A1, A2 and A3 is not larger than 0 . 833  X  X  X  .
 Theorem 2. The sum of the weighted confidences with the virtual lot numbers is an upper bound of the weighted confidence of the corresponding items at lower-level.
 These theorems can be proved quite simply using the definition of the weighted confidence. Therefore, we use the associations with the virtual lot numbers as the upper bounds of weighted associations between the failures and the original lot number or the subcomponents. Based on these theorems we prune the redundant access to databases of descendant parts if the sum of the confidence rates of virtual lot numbers is smaller than the threshold. This is the key advantage of our trace mining algorithm compared to naive approach to compute all associations without pruning. 4.3 Trace Mining Algorithm We present the pseudo code of the trace mining algorithm in Figure 3. First we choose the failed final product as the root on line 1. Next we calculate the upper bound of the confidence using virtual lot numbers on line 3. If the upper bound exceeds given threshold  X  , we compute the actual confidence with original lot number on line 5. If the actual confidence rate is larger than  X  , we append the item to the set of output on line 7. Next w e repeat the same pr ocedure at deeper-level starting from line 2 for the subcomponents. Thus the search continues in a depth-first manner along the hierarchy of the supply chain with pruning on line 4. The calculation of the confidence is based on the databases D P and D A . Note that the databases may not be inte grated in practice so that the access is exceedingly time-consuming. Based on the algorithm, we can ob tain all defective items of which confidence of the association is higher than  X  without loss. Cheung et al. [3] first addressed the problem and proposed Fast Distributed Mining of association rules (FDM). Zaki et al. utilized item set clustering for efficient partitioning of the database into the subsets [4]. Schuster et al. proposed communication-efficient algorithm for distributed association mining [5]. Since these algorithms only handle traditional data items of single-level so that they are not directly applicable to the mining from hierarchically distributed databases.
Li et al. introduced an approach for mining higher-order association rule from distributed text databases of which schema is different each other [6]. First the method find out linkable records of linguis tic features between local databases by Apriori using global ID assigned to the linkage items such as social security num-ber. Next it exchanges data entities about linkable records between all databases and applying Apriori again to the merged local database. In addition, multi-level association rule mining was addressed by Han et al. [7]. The method considers taxonomic level of items and apply existing mining approach in a top-down man-ner. For example, association between wheat bread and milk is more informative than that of bread and milk. The point is to represent each item as digits of fixed length where the value of each digit co rresponds to a category at a conceptual level. This is equivalent to integrate all hierarchically distributed databases into single data table, which is not sufficient in practice for our problem.
Traceability has become a key technology in ma nufacturing especially for in-vestigating the relationship between defective products and parts in recall. Rob-son et al. addressed a problem for the management of suppliers X  databases to support reverse lookups of parts [8]. The method is based on a table of Compo-nent InDex (CID) which maintains the relationship between each final product and its parts in a similar way to ours. However, the construction of CID table requires complete survey of all databases at least once. This may be inefficient for complex products of which assembly information is stored in hundreds of databases. In addition, their main concern is the volatile network of supply chain where the supplier of a parts is often replaced, which is different from ours. We evaluate the proposed algorithm and compare its performance with naive approach.

First we implement a simulation of producing an artificial product of which structure is defined in a XML-formatted BOM. The BOM file specifies the hier-archical structure of size, production size, supplier of the product and the defect rate. During the simulation, we compute the assembly information of objects of every component and obtain the production information database and assembly information database for each supplier. In the BOM we embed a defective parts of which defect rate is much higher than other parts. Every object of parts is de-fective with the probability of its defect rate and assigned failed if it or its parts is defective. Thus the failures are propagated from deep-level components to final product along the tree-structured hierarchy. Therefore, some of final products are determined as failed objects mai nly caused by the defective parts.
Next we perform mining algorithms to identify the defective parts given the suppliers X  databases, the list of the failed final products with changing the pro-duction size and the threshold. We compare the trace mining algorithm with a naive approach to compute all associations without pruning.

Table 3 shows the result over 10 trials. Column #item represents the number of detected items of which a ssociation with failed products exceeds the threshold. In most cases, the embedded defective par ts is successfully detected as the most suspicious item. Column #DB and #item represents the number of reached DB and the access to the DB respectively durin g the calculation. Thus these numbers correspond to the efficiency of th e algorithm. As shown in Column sec ,the execution time fluctuates depending on the size of production and the threshold. Table 4 compares our algorithm with the naive approach with threshold  X  =0 . 4. Note that the outputs of two algorithms are exactly the same since our algorithm never miss the defective parts. The tabl e indicates that the number of access on the proposed algorithm is much smaller than that of the naive approach. Thus the trace mining algorithm one order of magnitude faster than the naive approach. Note that the difference between the ex ecution times should be more extreme in practice due to the physically distributed databases though the databases are all in main memory in this experiment. We focused on the association mining for hierarchically assembled items. We pro-posed the trace mining algorithm for identifying the subitems which have high associations with a set of top-level items. The point is to implement the virtual lot numbers that represent level i lot number and the split of level ( i  X  1) lot numbers at the same time. This allows us to compute the upper-bound of asso-ciation rate for possible subitems and t o avoid unnecessary access to distributed databases. The algorithm can be applied to the manufacturing databases of com-plex products such as cars without modification to the databases. Experimental evaluation using simulated assembly databases shows that our algorithm can identify embedded failure items correct ly and perform with one order of magni-tude fewer access to the databases.

