 1. Introduction Ontologies are now used in a wide range of applications and have been instrumental in many interoperability projects.
They help applications work together by providing common vocabularies that describe all important domain concepts with-out being tied to particular applications in the domains.

However, used as part of semantic search applications, ontologies have so far had only limited success. Early semantic functionally and from a usability perspective. Ontologies for query disambiguation or reformulation seem more promising, though there is a fundamental problem with comparing ontology concepts with query or document terms. Concepts are ab-stract notions that are not necessarily linked to a particular term. A number of terms may refer to the same concept, or a text requires that there is something bridging the conceptual and real world.
 aligned with the documents indexed by the search application. The granularity of the ontology needs to match the granu-larity of the document collection. While there is no need to have an elaborate ontology for a sub-domain with very few doc-uments, it is often necessary to expand ontologies in areas that are well covered by the document collection.
This paper presents an ontology enrichment approach that both bridges the conceptual and real world and ensures that the ontology is well adapted to the documents at hand. The idea is to provide contextual concept characterizations that re-veal how the concepts are referred to semantically in the document collection. The characterizations come in the form of weighted terms that are all-in some sense-related to the concept itself. The ontology together with the concept character-alignment (cf. [16]), and we are now experimenting with these profiles in search and ontology learning. Our initial search prototypes display a significant improvement of search relevance, provided that the quality of the characterizations are sufficient.

Further, we describe the notion of context for information retrieval purposes. We define what a search context is and how it may later be used to improve the information retrieval task for a user in a specific situation. 2. Related work
Su describes in [16] a method for ontology mapping, based on an extension of the ontology. The extension of the ontology consists of constructing a feature vector for each concept of the ontology. The feature vector is made up of weighted terms reflecting relevance between concept and terms found in an underlying document collection. Further, the vectors are used to provide a mapping between concepts of different ontologies.

In [17], Tomassen describes an ontology driven information retrieval system based on extending ontologies. Each concept are ranked according to ontology relevance. Next a query is generated for each concept based on relations with other con-extracted. The candidate terms for each cluster of the concept are compared to the candidate terms for neighboring concepts the user. The two former profiles are document or domain centric, while the next two are user centric.
Kearney et al. [8] uses ontological profiles for user recommendation in a web setting (shopping, movies, etc.). The profile with a set of ontology concepts and calculates weights for the concepts of each visit. The profile is now a weighted repre-ming up each of the single session profiles, giving less importance to old profiles. Finally, the VOP can be used to make recommendations to other users by calculating the distance between the profiles of the users.
 modified based on the searches performed by the user and the documents viewed. The reference ontology consists of term re-rank the final results by combining query, document, interest scores and the term vector representation of the concepts.
The VIVACE project [11] describes modeling and use of context in a search system supporting engineers in their work. The researchers define six important context dimensions which together identify the user context. Knowledge Elements (K-El, pieces of topic specific knowledge) are tagged as relevant for a given context and a weight describing the strength of the relevance is associated with each such K-El, context pair. Search is performed using case based reasoning. The system also assigning new context to K-Els found based on the users context.
 tween short-term and long-term context. Short-term context describes the users needs for a single session, while the long-term context describes an accumulation of context over time (query history, general interest, past click-through behavior, etc.). In the paper the authors concentrate on the short-term context, and use the query history and click-through history as a basis for introducing context to the information retrieval task. 3. Ontological profiles
As stated in Section 1, matching query terms with ontology concepts is not a straightforward task. Simply relying on a syntactic match between the query term and its conceptual counterpart has its limitations. One of the most obvious prob-lems might be that the mapping of terms to concepts and vice versa is hampered by polysemy (in both directions). As an effort towards this mapping problem we propose the ontological profile.

An ontological profile is an extension of a domain ontology. The ontology is extended with semantically related terms that are added as vectors for each of the concepts of the ontology. The terms are given weights to reflect the importance of the semantic relation between the concept and the terms. For a definition of concept vectors, see Definition 1 below. collection used for construction of the ontological profile. t concept j is defined as the vector C j =[ w 1 , w 2 , ... , w with respect to concept C j .

The construction of an ontological profile relies on having a domain relevant document collection at hand. This means that the documents must cover the same domain as the ontology we are constructing the ontological profile for. By applying text mining techniques to the document collection, we extract terms that are semantically related to the concepts of the ontology. Weights are calculated to express the strength of the relations, and are given in the range [0,1]. A weight of 0 means that there is no relation, whereas a weight of 1 means that the term is highly related or even synonymous to the con-large domain and large amounts of text.

The concept vectors will typically contain terms that are synonymous to the concept and more indirect references to the may be very specialized since they are tailored towards the underlying document collection. This suggests that the terms relations that are very specific to the document base and thus the terms may be too fine-grained to add to the ontology.
By this we mean that an information retrieval system built to utilize such profiles may be adapted to different document collections or even domains by exchanging the document collection and/or the ontology used. In Fig. 1 , two different doc-the system can search more focused in a different document collection using the same ontology.

Finally, we will show an example of a concept vector. We will be using the concept Christmas Tree from the IIP ontology control of fluid from a well  X . The top 10 terms for the concept vector are shown below: The terms from the example were found in the experiment (Section 5) using stemming (explaining the term christma .)
The two highest weighted terms are the constituents of the concept name. From the definition, we also note that valve evant in this context. Bop also demonstrates how semantically related terms are picked up by the text mining process used for constructing ontological profiles. 4. Construction of ontological profiles
The ontological profile is constructed based on a document collection covering the same domain as the ontology. This assures that the connection we want between the vocabulary of the domain (at least the vocabulary in the document domain. A detailed description of the approach is found in [14], and is based on a method described by Su [16].
Construction of the ontological profile is based on three important aspects which together reflect the content of the doc-uments used as basis for the ontological profile: 2. Linguistics . A simple linguistic technique is applied to the terms of the documents, namely stemming, to collapse cer-3. Proximity . Finally, we apply a proximity measure to the co-occurrence of concept names and terms. The assumption used during the construction phase. During this process we remove all stop words, and stem the terms lightly (removing plural s), using the conversion s ? ; for all terms not terminated with ss .

Next, we construct three separate indexes over the documents, used for the proximity analysis. Each document is first indexed as a single object where all terms are equally related. Next we index each document as a set of paragraphs where each paragraph makes up a semantic entity with higher semantic coherence among the terms than in the documents. Finally, we index each document as a set of sentences, where the terms within a single sentence have the highest semantic coher-ence. We have now formed a hierarchy of increasing semantics over the text; documents having the lowest sense of semantic coherency, while sentences have the highest semantic coherency, reflecting the proximity property described above.
The name of the concept is used as a phrase query into the three indexes, and all documents containing the phrase are assigned to the concept. This implicitly means assigning all of the terms in the documents to the concept in question.
The next step in the construction process is to calculate the weights for the terms assigned to the concepts. The principle chosen to give terms found in the same document as the concept name the lowest weight, terms found in the same para-graph higher weight, and finally terms found in the same sentence the highest weight. This weighting scheme reflects our assumption about proximity and strength of relation described above. As a basis for the calculation of the weights, we use the frequency of the terms found in the documents assigned to each concept. Eq. (1) shows the calculation, where vf i , j is the term frequency for term i in concept vector j , f and S are the possibly empty sets of relevant documents, paragraph documents and sentence documents assigned to j , and a = 0.1, b = 1.0, and c = 10.0 are the constant modifiers for documents, paragraph documents, and sentence documents, documents, and sentence documents. Although the value for these have not been researched extensively, we have found that the given values perform quite well: lower weight to terms that are found in many concept vectors. The calculations are shown in Eq. (2), where tfidf score for term i in concept vector j , vf i , j is the term frequency for term i in concept vector j , max ( vf most frequent occurring term l in concept vector j , N is the number of concept vectors, and n tors containing term i :
This completes the ontological profile, although some final calculations may be applied, such as normalizing the vectors
In [14], we also introduced the notion of negative concept vectors, which are built in the same way but contain only terms the domain. 5. Experiment
In this section, we report on an initial experiment carried out based on using the ontological profile for semantic query we map from the query terms entered by the user to one or more concept(s) of the ontology. This is done by comparing the query terms with the terms and weights found in the concept vectors. In (ii), the mapped concepts are used for subsequent query expansion based on the concept vectors, adding semantically related terms to the query. 5.1. Query interpretation
During the query interpretation we try to make a semantic mapping from the keywords of the user query on to a set of query and the concept. For this prototype evaluation we have suggested four different strategies for interpretation of the keyword query. Each of the strategies result in a ranked list of concepts to choose from during expansion. As the concept maximize the semantic coherence between the keywords and the concepts. 5.1.1. Simple query interpretation
This is the most basic strategy for query interpretation. We simply map each query term to a single concept (we do not consider any connection between the query terms). For each query term t for t i in its corresponding concept vector. The concept chosen for each of the query terms is subsequently used for query expansion. 5.1.2. Best match query interpretation
In contrast to the simple query interpretation where we assume no connection between the query terms, we do assume that there is some connection between the query terms in the best match strategy. We try to recognize this by assuming the connection between the query terms by mapping the terms collectively to a single concept. In effect we require each candidate concept to contain all query terms in its corresponding concept vector. The concept which maximizes S in Eq. (3) ( S c is the score for concept c , and t i , c expansion: 5.1.3. Cosine similarity query interpretation
The two last interpretation strategies are attempts at disambiguating the user query. Also in these strategies do we as-sume that there is some relationship between the query terms. However, in contrast to the former strategy, we are not able to directly recognize the relation from the query terms. We therefore try to recognize relations between the concepts that term 1 and the second best concept for term 2 which is not recognized by the two former interpretation strategies. In this ranked list of concepts for each of the query terms (we only use the top 15 concepts). We try to recognize the relationship between concepts by calculating the cosine similarity between the concept vectors. A high similarity means that there is a term and the relationship between the concept vectors. The pair of concepts with the highest score will be picked as the semantic representation of the query and used for subsequent expansion: 5.1.4. Ontology structure query interpretation use the structure of the ontology to measure similarity between concepts, assuming that concepts that are found close are more semantically related than concepts found further apart in the ontology. The measure we use is based on the distance the subsequent expansion process: 5.2. Query expansion
The query expansion process reformulates the original query by adding semantically related terms to the query. For each concept chosen for expansion, the top 15 terms from the corresponding concept vector (including weights reflecting relative
NOT terms, filtering documents containing these terms from the result set. The motivation behind adding these terms is to remove some of the noise introduced by the increased set of query terms. Finally, the weighted query is executed against a vector space search engine (Lucene 1 ) and the result set is returned to the user. 5.3. Experimental data and results
For the evaluation of the approach we have chosen to use the Lucene search engine as a baseline. The query expansion module of the system is built as a module on top of the search engine, and will thus use the same underlying search mech-anisms as standard keyword based querying. So, even though using Lucene as a baseline may be viewed as a weakness, we argue that this setup will isolate the effect of the query expansion process to make the two more directly comparable in terms of gain.

The ontology used for the evaluation of our prototype implementation is the IIP [6] core ontology, consisting of 18,675 concepts which cover the domain of sub-sea oil drilling and production. The Schlumberger Oilfield Glossary cept vectors successfully constructed.

The evaluation consisted of 7 (two term) queries and 5 test subjects. The 7 queries were divided into four different cat-meaning a full match.

Fig. 3 shows that all four of our reformulation strategies performed significantly better than keyword search. One surpris-evaluation, see [15].
As we introduce new terms to the query, we hypothesize that the reformulated queries enhance the recall of the system, as a broadened set of query terms will retrieve more documents. We have however not investigated how precision is affected work includes tweaking of parameters and giving the system a more thorough evaluation.

Looking back at the number of concept vectors that were successfully constructed (2195 out of 18,675 potential concepts) caused by our  X  X  X implistic X  approach during construction where we only use the concept name as phrase. Some of the con-cept names consist of 4+ terms and may be compositional; they may be broken up in the text. Another problem is that many native names. However, one must apply this solution cautiously, as it may introduce ambiguity. The first problem is on the other hand somewhat simpler to tackle, as we can in the search break up the concept names in its constituent terms and rank the documents based on phrase match, partial phrase match, etc.
 The example vector given in Section 3 does not contain phrases. This is a general weakness of our implemented prototype.
In our opinion, the quality of the concept vectors would be improved by adding phrases to the vectors, since phrases carry more semantics than their single constituents.

When comparing our work to previous work done on extending ontologies, we would like to pay special attention to the work by Tomassen [17] and by Sieg et al. [13]. Both of these works extend the ontology with related terms. Tomassen on the one hand uses more information found in the ontology and the structure of the ontology to select terms. Sieg et al. on the other hand use the structure of the Open Directory Project and classify the documents based on the text. 6. Context
We are currently exploring techniques to extend the information retrieval system with contextual features that provide the user with even more relevant information depending on the user context.

A multitude of different definitions of context are to be found in the literature, and a commonality of these are that they offered to the user  X .

With this definition we are really narrowing down what should be considered contextual information. A piece of information work properly without the location). We can thus conclude that only non-essential information used to enhance the appli-cations computations can be considered context. 6.1. Search context
In most information retrieval systems, the only information known about the user and his task is the query which the user precise results without the user having to perform multiple query reformulations.

We can partition the systems knowledge about the user into two separate parts. The first is of course the query, which gives the system a general idea of what the user is looking for. The second part is additional knowledge which can charac-eric definition of context by Kofod-Petersen et al.: Definition 2. Search context is the context of a user posting queries to a search application.

Important pieces of information regarded as context are (among others) work process, user role, and location. Work pro-cesses are generally formalized in some sort of business process modeling (BPM) language like Business Process Modeling process, can use this knowledge together with any data connected to the relevant stages of the model to improve retrieval performance.

Further, the notion of role can be quite important. People have different roles in the process depending on their respon-information from the maintenance engineer who is performing maintenance on the oil well, even though both are occupied in the process of producing oil. The system can thus exploit the user X  X  role to deliver more accurate results to the user.
Location can also be an important piece of information as the relevance of information presented to the user may be basically the same. However, there may be local variations in equipment, regulations, or in the bedrock of the oilfield.
Although the tasks are the same, these local variations may influence which information is regarded the most relevant for the two engineers. 6.2. Contextualized ontological search
This section will give an overview of how context and semantics can be used in a search application. We are assuming that the search context is known to the system. Hence the search context is hidden from the user, relieving the user from entering this information himself. We also assume that the search context is represented in a similar way as the semantic ontology concepts as defined below.
 ontology describing context. o i 2 O denotes concept i in the set of concepts. The context query describing C the vector CQ u !  X  X  w 1 ; w 2 ; ... ; w n where each w i
The process of combining the user query and the context query is depicted in Fig. 4 . We will in the following describe the actions taken from user query to the result set presented to the user.

First, let us assume that there exists two ontological profiles. The first one, OP second one OP c used to expand the context query. Further we assume that there exists a common language, T , containing the terms used in both profiles and in the documents searched. The user query (explicitly stated by the user), UQ ,is represented by the set of query terms UQ ={ t 1 , t 2 , ... , t system), CQ u ! , is represented corresponding to the above definition.

The first step of the query reformulation is to map UQ to a set of concepts of OP terms. For each concept, c i 2 UQ 0 , we take into account the most relevant terms of the corresponding concept vector,
The terms are added to UQ 00
Next, the context query, CQ u ! , is expanded using OP c . For each concept, o evant terms of the corresponding concept vector, u i ! . This results in the vector CQ sents the weight of t i 2 T .

The next step in the process is to combine the user query with the context query. This is done by constructing a final query vector, FQV !  X  a UQ 00 query and the context query, respectively.
 the user. 7. Conclusion
We have in this paper presented the concept of ontological profiles and how they are constructed. An ontological profile is a powerful extension to an ontology, bridging the gap between the  X  X  X bstract X  ontology and the use of the concepts in real documents. The ontological profile describes each concept as a vector of terms with weights describing the strength of the relation between them. The evaluation of using ontological profiles for query expansion shows promising results, and a gen-erally better performance than the baseline. We have also performed a small scale evaluation of the quality of the concept vectors and relations. The evaluation was performed in the project management domain, and we evaluated the quality of the relationships found by calculating the cosine similarity between the concept vectors. With relationships we mean not nec-essarily the relationships found in the ontology, but the relationships found among the concepts based on the concept vec-tors. The number of high quality relations found using concept vectors were generally higher than for the relations found using association rules [5].

Lastly, we defined search context and discussed how contextual search may be incorporated into our semantic search ap-proach. Future work includes; evolving the strategy for constructing ontological profiles together with evaluation of the model for search.

References
