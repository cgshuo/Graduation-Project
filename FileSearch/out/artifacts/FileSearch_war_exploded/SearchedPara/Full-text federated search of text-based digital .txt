 Jie Lu  X  Jamie Callan
Abstract Peer-to-peer (P2P) networks integrate autonomous computing resources without requiring a central coordinating authority, which makes them a potentially robust and scal-able model for providing federated search capability to large-scale networks of text-based digital libraries. However, peer-to-peer networks have so far provided very limited support for full-text federated search with relevance-based document ranking. This paper provides to-peer networks. Existing approaches to full-text search are adapted and new methods are developed for the problems of resource representation, resource selection, and result merging according to the unique characteristics of hierarchical peer-to-peer networks. Experimental results demonstrate that the proposed approaches offer a better combination of accuracy and efficiency than more common alternatives for federated search of text-based digital libraries in peer-to-peer networks.

Keywords Full-text . Federated search . Text-based digital libraries 1. Introduction A very large number of text-based digital libraries were developed during the last decade.
Nearly all of them use some form of relevance-based ranking, in which term frequency information is used to rank documents by how well they satisfy an unstructured text query.
Many of them allow free search access to their contents via the Internet, but do not provide complete copies of their contents upon request. Many do not allow their contents to be crawled by Web search engines so that the contents provided by these digital libraries cannot be accessed by Web search engines such as Google and AltaVista that only conduct search on centralized repositories. How best to provide federated search across such independent digital libraries is an unsolved problem often referred to as the  X  X idden Web X  problem.
Many collections of text documents also reside in enterprise networks. Collecting and maintaining an internal centralized repository for search is not always practical for hetero-geneous, multi-vendor, or lightly-managed enterprise networks. Federated search in these environments requires an effective, convenient and cost-efficient solution that is decentral-ized in nature.

Peer-to-peer (P2P) networks integrate autonomous computing resources without requir-ing a central authority, which makes them a good choice for providing federated search capability to a large number of digital libraries on the Internet and in enterprise networks.
The decentralized nature of P2P networks also enables robustness and scalability, which are critical to federated search of large scales. To capitalize on the power and scaling properties of large distributed P2P systems, we were motivated to explore federated search of text-based digital libraries in P2P networks.

To date, P2P networks are primarily used for file-sharing of popular music, videos, and software, or for distributed storage of digital archives. These types of digital objects have relatively obvious or well-known naming conventions and descriptions, making it convenient to represent them with just a few words from a name, title, or manual annotation. Search in these systems is typically known-item search , in which the goal is to find a single instance of a known object (e.g., a particular song by a particular artist). user is familiar with the object being requested, and any copy is as good as any other. Known-item search of digital objects with well-known naming conventions is a task for which simple solutions (e.g., Boolean keyword matching over document names and annotations) suffice. To use P2P networks as a federated search layer for text documents, more sophisticated solutions for search based on the full body of each document are required because (i) text documents do not have well-known naming conventions and it is relatively difficult to represent the content of a text document by using just a few words over a small vocabulary, and (ii) search is mostly no longer known-item search because the user usually only has a general description of an information need in his/her mind instead of the identity of any particular document.
The principal goal of search becomes locating documents that contain relevant contents to satisfy the information need, not finding a copy of a specific document. We would argue that most of the recent research on P2P networks offers little useful guidance for providing full-text federated search of current text-based digital libraries.

This paper addresses the problem of using peer-to-peer networks as a federated search layer for text-based digital libraries. We start by assuming the current state of the art; that is, we assume that each digital library is a text database running a reasonably good con-ventional search engine, and providing individual documents in response to full-text queries in the form of relevance-based rankings ( X  full-text ranked retrieval  X ). The content informa-tion required for query routing ( X  resource descriptions  X ) can be provided cooperatively by individual digital libraries upon request ( X  cooperative  X  environments), or created from the documents sampled from each digital library via the normal process of submitting queries and retrieving documents ( X  uncooperative  X  environments). We present in this paper how resource descriptions of digital libraries are used for efficient query routing, and how results from different digital libraries are merged into a single, integrated ranked list in P2P networks in both cooperative and uncooperative environments.

In the following section we give an overview of the prior research on federated search of text-based digital libraries and P2P networks. Section 3 describes our approaches to full-text federated search of text-based digital libraries in P2P networks. Sections 4 and 5 discuss our data resources and methodology for evaluation. Experimental settings and results are presented in Sections 6 and 7. Section 8 concludes. 2. Overview
In this section we present an overview of the prior research on federated search of text-based digital libraries, P2P network architectures, and full-text search in P2P networks in order to set the stage for the descriptions of our approaches to full-text federated search in peer-to-peer networks. 2.1. Federated search of text-based digital libraries
Prior research on federated search of text-based digital libraries (also called  X  distributed information retrieval  X  in the research literature) identifies three problems that must be ad-dressed:
Resource representation: Discovering the contents or content areas covered by each digital library ( X  resource description  X );
Resource selection: Deciding which digital libraries are most appropriate for an information need based on their resource descriptions; and Result merging: Merging ranked retrieval results from a set of selected digital libraries.
A single, centralized directory service is responsible for acquiring resource descriptions of the digital libraries it serves, selecting the appropriate digital libraries for a given query, and merging the retrieval results from selected digital libraries into a single, integrated ranked list. Solutions to all these three problems have been developed in distributed information retrieval. We briefly review them below.

Resource representation. Different techniques for acquiring resource descriptions require different degrees of cooperation from digital libraries. STARTS is a cooperative protocol that requires every digital library to provide an accurate resource description to the directory service upon request (Gravano et al., 1997). Query-based sampling is an alternative approach to acquiring resource descriptions without requiring explicit cooperation from digital libraries (Callan, 2000). The resource description of a digital library is constructed by sampling its documents via the normal process of submitting queries and retrieving documents.
Resource selection. Resource selection aims to select a small set of resources that contain many documents relevant to the information request. Typically resource selection includes resource ranking which ranks resources by their likelihood of returning relevant documents, and thresholding for resource selection which selects the top-ranked resources to process the information request.
 Resource selection algorithms such as CORI (Callan, 2000), gGlOSS (Gravano and Garc  X   X a-Molina, 1995), and the Kullback-Leibler (K-L) divergence-based algorithm (Xu and
Croft, 1999) treat the resource description of a digital library as a document and use techniques adapted from document retrieval for resource ranking. Other resource selection algorithms including ReDDE (Si and Callan, 2003b) and the decision-theoretic framework for resource selection (Nottelmann and Fuhr, 2003) rank resources by directly estimating the number of relevant documents from each resource for a given query.

Deciding how many top-ranked resources to search ( X  thresholding for resource selection  X ) is usually simplified to use of a heuristic value (e.g., 5 or 10).

Result merging. Result merging algorithms can be categorized into approaches based on normalizing resource-specific document scores into resource-independent document scores, and approaches based on recalculating resource-independent document scores at the directory service.

The CORI and the Semi-Supervised Learning result merging algorithms belong to the first category. The CORI merging algorithm uses a heuristic linear combination of the digital library score and the document score to produce a resource-independent document score (Callan, 2000). The Semi-Supervised Learning result merging algorithm uses the documents obtained by query-based sampling as training data to learn score normalizing functions (Si and Callan, 2003a).

Usually in order to recalculate document scores, the directory service needs to download all of the documents in the retrieval results. Downloading documents is not necessary if the statistics required for score recalculation can be obtained in another way. Kirsch X  X  algorithm (Kirsch, 1997) requires each resource to provide summary statistics for each of the retrieved documents (e.g., document length and how often each query term matches). It allows very accurate normalized document scores to be determined without the high communication cost of downloading. The corpus statistics required for recalculating document scores could also be substituted by a reference statistics database containing all the relevant statistics for some set of documents (Craswell et al., 1999). 2.2. P2P network architectures
Each peer (an abstract notion of a participating entity) in P2P networks can participate as a client and/or a server. Clients ( X  information consumers  X ) issue queries to initiate search in P2P networks; servers provide information contents, respond to queries with documents that are likely to satisfy the requests ( X  information providers  X ), and/or route queries to other servers ( X  directory services  X ). The main activities involved for search in P2P networks thus include issuing requests ( X  queries  X ), routing requests ( X  query routing  X ), and responding to requests ( X  retrieval  X ). Compared with search in centralized environments, query routing is a problem that is unique to search in P2P networks. The goal of query routing is to locate resources with relevant contents ( X  resource location  X ). Various P2P network architectures are distinguished by their different solutions to resource location.

Resource location in first generation P2P networks is characterized by the original Napster and similar P2P file-sharing applications (Yaga) (MusicNet) (Intel, 2003), which use a single logical directory service ( X  brokered  X  P2P architectures), and Gnutella 0.4, which uses undi-rected message flooding and a search horizon ( X  completely decentralized  X  P2P architecture).
The former proves easy to attack, and the latter doesn X  X  scale. They also explore very different solutions: The original Napster was centralized and required cooperation (sharing of accurate information); Gnutella 0.4 is decentralized and requires little cooperation.

Recent research provides a variety of solutions to the flaws of the Napster and Gnutella 0.4 architectures, but perhaps the most influential are hierarchical and structured P2P archi-tectures. Structured P2P architectures associate each data item with a key and distribute keys among directory services using a distributed hash table (DHT) so that each directory service is responsible for a certain range of keys in the multi-dimensional key space (Ratnasamy et al., 2001; Rowstron and Druschel, 2001; Stoica et al., 2001; IRIS; Maymounkov and Mazi` eres 2002; eDonkey; eMule; RevConnect; Tang et al., 2003; Manku et al., 2003; Zhao et al., 2004).
The resource responsible for a queried key is located by distributed hash table lookup. Hierar-chical P2P architectures typically use a two-level hierarchy of peers including an upper-level of directory services and a lower-level of digital libraries or clients (BearShare; Edutella;
Gnucleus; Gnutella2; JXTA; KaZaA; Limewire; Morpheus; Shareaza; Swapper.NET). Each directory service conducts resource location for a region of digital libraries and clients, and directory services work collectively to cover the whole network. The common characteristic of structured and hierarchical P2P architectures is the construction of an overlay to organize peers for efficient query routing. An important distinction is that a structured P2P archi-tecture enforces a strict overlay structure of peer connections based on its distributed hash table architecture, whereas the connections between peers in a hierarchical P2P architecture are not determined by hash mapping. Structured P2P architectures require digital libraries to cooperatively share descriptions of data items in order to generate keys and construct distributed hash tables. In contrast, hierarchical P2P architectures enable directory services to automatically discover the contents of (possibly uncooperative) digital libraries, which is well-matched to networks that are dynamic, heterogeneous, or protective of intellectual property. Another advantage of hierarchical P2P architectures over structured P2P architec-tures is that they more easily support sophisticated search techniques that are not constrained to controlled or small vocabularies, which is more appropriate for full-text search. How-ever, hierarchical P2P architectures typically have higher communication costs and are more complex than structured P2P architectures. 2.3. Full-text search in P2P networks
Most of the prior research on search in peer-to-peer networks only supports simple exact or Boolean keyword matching over document metadata. There has been some recent work on developing systems that adopt more sophisticated retrieval models to support full-text search in peer-to-peer networks. Examples are PlanetP using a completely decentralized P2P architecture (Cuenca-Acuna and Nguyen, 2002), pSearch using a structured P2P architecture (Tang et al., 2003), and full-text retrieval in hierarchical P2P networks (Lu and Callan, 2003).
In PlanetP (Cuenca-Acuna and Nguyen, 2002), a peer uses a TF.IDF algorithm to decide which peers to contact for information requests based on the compact summaries it collects about all other peers X  inverted indexes. Because no special resources are dedicated to support directory services in completely decentralized P2P architectures, it is somewhat inefficient for each peer to collect and store information about the contents of all other peers, limiting its scalability. pSearch (Tang et al., 2003) uses the semantic vector (generated by Latent Semantic In-dexing) of each document as the key to distribute document indices in a structured P2P network. This is a way of mapping a large, uncontrolled vocabulary onto a small, controlled vocabulary. To compute semantic vectors for documents and queries, global statistics such as the inverse document frequency and the basis of the semantic space need to be disseminated to each peer in the network, which makes this approach difficult to extend to uncooperative and heterogeneous environments.

Full-text resource selection and document retrieval algorithms for a single directory ser-vice are extended to multiple directory services in Lu and Callan (2003). Experimental results demonstrate that full-text resource selection and document retrieval can provide more accu-rate and more efficient solutions to federated search in P2P networks of text-based digital libraries than flooding or random selection with Boolean keyword matching over document names. 3. Full-text federated search in hierarchical P2P networks
The research described in this paper adopts a hierarchical P2P architecture due to several reasons. First, a hierarchical P2P architecture uses multiple regional directory services to work collectively to cover the network without relying on a central authority. Therefore, it is more robust and scalable than a brokered P2P architecture with a single, centralized directory service. Second, because full-text search requires a full-text resource representation, which is more expensive in terms of storage and communication costs, peers need more processing power and connection bandwidth to perform the duties of directory services.
Hierarchical P2P architectures relieve peers with limited computing and network resources of the burden of conducting directory services, which makes them a better choice than representations in structured P2P architectures due to their complete reliance on distributed hash tables with limited-dimensional key spaces for content placement and resource location. In contrast, existing techniques developed for full-text search can be adapted to hierarchical P2P architectures in a straightforward manner.

As described in Section 2.2, a hierarchical P2P architecture consists of a two-level hier-archy of two types of peers: a lower level of leaf peers and an upper level of hub peers. A peer located at the leaf level can be an information provider (digital library), or an infor-mation consumer (user, client). A peer located at the hub level is a directory service. For full-text federated search of text-based digital libraries, each provider peer is a text database that processes full-text queries by running a document retrieval algorithm over a local doc-ument collection. Each consumer peer represents a user with information requests. Each hub acquires and maintains necessary information about its neighboring hubs and providers, which it uses to provide resource selection and result merging services to the network. Leaf peers only connect to hubs. Hubs connect with leaves and other hubs. Figure 1 illustrates a hierarchical P2P network.

For full-text federated search, when a consumer peer has an information request, it sends a query message to its neighboring hubs. A hub that receives the query message uses its resource selection algorithm to rank and select one or more neighboring providers as well as hubs for query routing. A provider that receives the query message uses its document retrieval algorithm to generate a relevance-based ranking of its documents and responds with a queryhit message that contains a list of the top-ranked documents. A hub is also re-sponsible for collecting the queryhit messages generated by multiple neighboring providers, using its result merging algorithm to merge multiple ranked lists of documents into a single, integrated ranked list, and returning it to the consumer. Finally, a consumer may need to merge results returned by multiple hubs. Each message in the network has a time-to-live (TTL) field that determines the maximum number of times it can be relayed in the net-work. The TTL is decreased by 1 each time the message is routed to a peer. When the
TTL reaches 0, the message is no longer routed. Each peer discards duplicate messages it receives.

In this paper we assume a  X  X tatic X  network setting (i.e., fixed topology without peer arrivals, departures or failures) so that we can focus on the solutions to resource representation, resource selection, and result merging for higher efficiency and accuracy in federated search of hierarchical P2P networks. The problems of dynamic topology evolution due to peer arrivals and departures, fault tolerance and load balancing, although important, are outside the scope of this paper. 3.1. Resource representation
A resource description is a very compact summary of its contents. Compared with the com-plete index of a collection of documents, a resource description requires much lower com-munication and storage costs, but still provides enough information for resource selection algorithms to determine which resources are more likely to contain documents relevant to queries. We adopt the format of a resource description used by previous resource selection algorithms (Callan, 2000; Gravano et al., 1994; Gravano and Garc  X   X a-Molina, 1995; Xu and
Croft, 1999) in distributed information retrieval, which includes a list of terms with corre-sponding term frequencies ( X  collection language model  X ), and corpus statistics such as the total number of terms and documents provided or covered by the resource. The resource could be a single provider (digital library), a hub that covers multiple neighboring providers, or a  X  X eighborhood X  that includes all the peers reachable from a hub. Although resource descriptions for different types of resources have the same format, different methods are required to acquire them.

Resource descriptions of providers. Resource descriptions of providers are used by hubs for query routing ( X  resource selection  X ) among adjacent providers. In cooperative environments, each provider provides an accurate resource description to its neighboring hubs upon request (i.e., using STARTS). In uncooperative environments, each hub conducts query-based sam-pling independently to obtain documents that can be used to generate resource descriptions for its neighbors (Callan, 2000). Sample documents can also be used by the Sample-Resample algorithm to estimate the total number of documents in a provider X  X  collection (Si and Callan, 2003b).

Resource descriptions of hubs. A hub X  X  resource description is the aggregation of the resource descriptions of its neighboring providers. It describes the content area covered at the hub. Since hubs work collaboratively in hierarchical P2P networks, neighboring hubs can exchange with each other their aggregate resource descriptions. However, because hubs X  resource descriptions only have information for peers within one hop (providers directly connecting to them), if they are used by a hub to decide how to route query messages, the routing would not be effective when peers with relevant documents sit beyond this  X  X orizon X . Thus for effective hub selection, a hub must have information about what contents can be reached if the query travels several hops beyond each neighbor. This kind of information is referred to as the neighborhood  X  X  resource description, and is introduced in the following subsection.
Resource descriptions of neighborhoods. A neighborhood of a hub H its neighboring hub H j is the set of hubs that a query message can reach by following the path from H i to H j and further traveling a number of hops. Each hub has its own view of neighborhoods near it, and each of its neighborhoods corresponds to one of its hub neighbors. Figure 2 illustrates the concept of neighborhood. Hub H hubs H 2 , H 3 and H 4 . Thus it has three adjacent neighborhoods, labeled N neighborhood X  X  resource description provides information about the contents covered by all the hubs in this neighborhood. A hub uses resource descriptions of neighborhoods to route queries to its neighboring hubs.

Resource descriptions of neighborhoods provide similar functionality as routing indices (Crespo and Garc  X   X a-Molina, 2002b). An entry in a routing index records the number of documents that may be found along a path for a set of topics. The key difference between neighborhoods X  resource descriptions and routing indices is that neighborhoods X  resource descriptions represent contents with unigram language models (terms with their frequencies).
Thus by using resource descriptions of neighborhoods, there is no need for hubs and providers to cluster their documents into a set of topics and it is not necessary to restrict queries to topic keywords.

Similar to exponentially aggregated routing indices (Crespo and Garc  X   X a-Molina, 2002b), a hub calculates the resource description of a neighborhood by aggregating the resource descriptions of all the hubs in the neighborhood, decayed exponentially according to the number of hops so that contents located nearer are weighted more highly. For example, in the resource description of a neighborhood N i , j (the neighborhood of H
H ), a term t  X  X  exponentially aggregated frequency is: where tf ( t , H k )is t  X  X  term frequency in the resource description of hub H for exponential decay, which can be the number of hub neighbors each hub has in the network.
The exponentially aggregated total number of documents in a neighborhood is calculated as below.

The creation of resource descriptions of neighborhoods requires several iterations at each hub. A hub H i in each iteration calculates and sends to its hub neighbor H description of neighborhood N j , i , (denoted by ND j , i
HD i , and the most recent resource descriptions of neighborhoods it previously received from all of its neighboring hubs excluding H j . The calculation of ND
The stopping condition could be either the number of iterations reaching a predefined limit, or the difference in resource descriptions between adjacent iterations being small enough. Each hub can run the creation process asynchronously.

The process of maintaining and updating resource descriptions of neighborhoods is identi-cal to the process used for creating them. The resource descriptions of neighborhoods could be updated periodically, or when the difference between the old and the new value is significant.
For networks that have cycles, the frequencies of some terms and the number of documents may be overcounted, which will affect the accuracy of resource descriptions. How to deal with cycles in peer-to-peer networks using routing indices is discussed in detail in Crespo and Garc  X   X a-Molina (2002b). We could use the same solutions described in Crespo and Garc  X   X a-
Molina (2002b) for cycle avoidance or cycle detection and recovery. For simplicity, in this paper, we take the  X  X o-op X  solution, which completely ignores cycles. Experimental results show that resource selection using neighborhoods X  resource descriptions in networks with cycles is still quite efficient and accurate. 3.2. Resource selection
Query routing aims at an optimal cost-effective solution to directing queries to those peers that are most likely to contain relevant documents. In this paper, the cost of query routing is measured by the number of messages carrying the query. The flooding technique guarantees to reach peers with relevant information but requires an exponential number of query messages; randomly forwarding the request to a small subset of neighbors can significantly reduce the number of query messages but the reached peers may not be relevant. To achieve both efficiency and accuracy, each hub needs to rank its neighboring providers by their likelihood of satisfying the information request, and neighboring hubs by their likelihood of providing a path to peers with relevant information ( X  resource ranking  X ), and only forward the request to its top-ranked neighbors. The information each hub utilizes for resource selection is the content information about its neighboring providers as well as neighborhoods represented by resource descriptions. Because resource descriptions of providers and those of neighborhoods are not of the same magnitude in vocabulary size and term frequency, direct comparison between providers and neighborhoods is difficult since it requires better size normalization.
For this reason, a hub handles separately the selection of its neighboring provider peers and hubs.

In this paper all of the hubs are required to use the same resource selection method, as is common in most operational and research P2P systems. 3 (K-L) divergence-based method has been shown to be one of the most effective resource ranking algorithms tested on various testbeds in distributed information retrieval (Si and
Callan, 2004), we use it for ranking of both neighboring providers and neighboring hubs at each hub.

Resource ranking of providers. Each hub uses the K-L divergence resource ranking algorithm to calculate P( P i | Q ), the conditional probability of predicting the collection of provider P given the query Q and uses it to rank different providers. P( P where tf ( q , P i ) is the term frequency of query term q in provider P (collection language model), P( q | G ) is the background language model used for smoothing and  X  is the smoothing parameter in Dirichlet smoothing.

Resource ranking of hubs. For ranking of hubs, the resource descriptions of neighborhoods are used to calculate the collection language models needed by the K-L divergence resource ranking algorithm. Because selecting a neighboring hub is essentially selecting a neighbor-hood, using a prior distribution that favors larger neighborhoods could lead to better search performance, which was indeed the case in our experiments. Thus the prior probability of a neighborhood is set to be proportional to the exponentially aggregated total number of documents in the neighborhood. Given the query Q , the probability of predicting the neigh-borhood N i that a neighboring hub H i represents is calculated as follows and used for hub ranking: where tf ( q , N i ) is the term frequency of query term q in the resource description of neigh-borhood N i (collection language model), P( q | G ) is the background language model for smoothing and  X  is the smoothing parameter in Dirichlet smoothing.

Resource selection of providers with unsupervised threshold learning. After providers are ranked based on their P( P i | Q ) values, the usual approach is to select the top-ranked providers up to a predetermined number, which is tuned empirically to optimize system performance. In a hierarchical P2P network with multiple hubs, different hubs may have different  X  X ptimal X  threshold values. In addition, due to the dynamic nature of a P2P network, the  X  X ptimal X  threshold value of each individual hub may change over time. Therefore, it is not appropriate to use a static, predetermined threshold for each hub to decide how many providers to select for a given query. It is desirable that hubs have the ability to learn their own selection thresholds automatically and autonomously.

The problem of learning the threshold to convert relevance-based ranking scores into a binary decision has mostly been studied in information filtering and text categorization (Arampatzis et al., 2000; Zhang and Callan, 2001). One approach to learning the threshold is to find an optimal threshold value that maximizes a given utility function based on the distributions of the scores of relevant and non-relevant documents. However, the user rele-vance feedback required as training data may not be easily available for federated search in peer-to-peer networks. Therefore, it is preferable that threshold learning in P2P networks be conducted in an unsupervised manner. Our goal is to develop a technique for each hub to learn resource selection thresholds without supervision based on the information and func-tionality it already has. Because each hub has the ability to merge the retrieval results from multiple providers into a single, integrated ranked list, as long as the result merging has reasonably good performance, we could assume that the top-ranked merged documents are  X  X elevant X . A provider with at least n highly ranked documents in the merged result for a query is considered to be  X  X elevant X  with respect to the query and  X  X on-relevant X  otherwise.
If we further assume that a hub is permitted to flood its neighbors with a small number of queries, it can use the results of these queries as training data to learn the distributions of the normalized ranking scores of relevant and non-relevant neighboring providers. Thus we can define a utility function based on these distributions, and the selection threshold is the one that maximizes the value of this utility function.

To be more specific, a linear utility function U (  X  ) is defined as below and the optimal value  X   X  that maximizes U (  X  ) is used as the threshold for selection of providers: where N rel (  X  ) and N nonrel (  X  ) are the numbers of relevant and non-relevant providers respec-tively whose normalized ranking scores are above threshold providers with normalized scores above threshold  X  , and w between accuracy and efficiency.

Larger N (  X  ) leads to more selected providers and thus low efficiency. Since efficiency is also important for federated search in peer-to-peer environments, the term included in U (  X  ) to penalize low efficiency.

At a hub, the number of relevant and non-relevant providers with normalized scores above threshold  X  can be calculated as: where P( s  X  rel ) is the probability of a provider having score s and being relevant, P( s nonrel ) is the probability of a provider having score s and being non-relevant, P( s the probability of a relevant provider having score s ,P( s non-relevant provider having score s ,P( rel ) is the probability of a provider being relevant, and  X  is the total number of providers in the training data.

The relevancy of a provider for a query depends on whether it has at least n (empir-ically chosen to be 5 in our experiments) documents among the top-ranked merged doc-uments at a hub. P ( s | rel ) and P ( s | nonrel ) at a hub can be estimated from the scores of relevant and non-relevant providers for a set of training queries. In information filtering, the score distributions of relevant and non-relevant documents are fitted using a Gaussian distribution and an exponential distribution respectively (Arampatzis et al., 2001). How-ever, in our experience the score distributions of relevant and non-relevant providers at a hub P ( s | rel ) and P ( s | nonrel ) cannot be fitted very well by the shapes of exponential or
Gaussian distributions. For this reason, instead of fitting continuous distributions to the training data, each hub uses the empirical discrete score distributions learned from a set of training queries. 10 equal sized bins are used for normalized scores ranging from 0 to 1. Experimental results not shown in this paper verified that using the discrete score dis-tributions had better performance (and was simpler) than using the fitted continuous score distributions.

Usually P( rel ) is estimated by maximum likelihood estimation using training data. How-ever, because using the top-ranked merged documents as the set of  X  X elevant X  documents for each query yields very unbalanced amounts of training data for relevant and non-relevant neighbors at the hub (very few relevant neighbors but a lot of non-relevant neighbors), max-imum likelihood estimated P( rel ) using training data is not likely to be a good estimation of
P( rel ) for future queries. Therefore, we assume that all the providers connecting to a hub have equal probability of being relevant and non-relevant, i.e., P( rel ) has a uniform distribution.
This is a reasonable assumption when each hub covers a specific content area so that all of its connecting providers have somewhat similar contents.

N (  X  ) as a function of  X  can be fitted quite well by an exponential function whose parameters are learned from the ranking results of providers using a set of training queries.
Resource selection of hubs with unsupervised threshold learning. The unsupervised threshold learning method described above requires each hub to estimate the distributions of the ranking scores of relevant and non-relevant neighbors using the merged retrieval results of a set of training queries. In a hierarchical P2P network, the number of hubs is usually much smaller than the number of providers. In this case, the number of hub neighbors each hub has is too small for it to make a reliable estimate of these distributions. Therefore, we introduce another method for a hub to learn the selection threshold for its hub neighbors.

In contrast to learning a single threshold from the retrieval results of a set of training queries as a whole ( X  set-based threshold learning  X ), the threshold learning method for re-source selection of hubs computes a threshold based on the separate thresholds learned for individual training queries ( X  individual-based threshold learning  X ). For each training query, after a hub merges the documents returned by its hub neighbors (including the re-trieval results of all downstream peers), it treats the top-ranked merged documents as  X  X ele-vant X  documents and calculates how many  X  X elevant X  documents are returned by each hub neighbor. Given this information, the hub goes down the list of hub neighbors sorted by their normalized ranking scores until a sufficiently large percentage of  X  X elevant X  docu-ments have been returned, i.e., a sufficiently high value of recall is obtained, and uses the last ranking score before stopping as the threshold for this training query. The individually learned thresholds for a set of training queries are averaged to get a single threshold at the hub.
 3.3. Result merging
In cooperative environments, result merging at each hub uses an extended version of Kirsch X  X  algorithm (Kirsch, 1997). Kirsch X  X  algorithm requires each provider to provide summary statistics (e.g., document length and how often each query term matches) for each of the retrieved documents for a hub to recalculate document scores. It also requires global corpus statistics in score recalculation. To avoid the cost of acquiring and maintaining global corpus statistics at each hub, we extend the original Kirsch X  X  algorithm to use the aggregation of the hub X  X  resource description and the neighborhoods X  resource descriptions for its neighboring hubs to substitute for the corpus statistics. Documents are merged according to the document scores recalculated by a K-L divergence retrieval algorithm (Ogilvie and Callan, 2001) using the above document and corpus statistics.

In uncooperative environments where no summary statistics for the retrieved documents are available, the most effective approach to result merging at a hub is to adapt the Semi-
Supervised Learning (SSL) result merging algorithm since SSL has been shown to be the most effective result merging algorithm in distributed information retrieval of uncooperative digital libraries using a single directory service (Si and Callan, 2003a). For each query, SSL uses the documents sampled from a provider to generate unsupervised training data to learn a score normalizing function for that provider. To apply SSL in hierarchical P2P networks, given a query, documents that appear both in the retrieval result from the database of sample documents ( X  centralized sample database  X ) at a hub and in the retrieval result from one of this hub X  X  neighbors are identified ( X  overlapping documents  X ). Each overlapping document has a pair of scores X  X he score calculated at the hub and the score returned by the neighbor, which defines a point in two-dimensional space. The set of score pairs for overlapping documents can serve as training points to learn the score normalizing function for this neighbor with respect to the query. The normalizing function learned on a query-by-query basis transforms hub.

Typically, SSL uses linear regression to learn score normalizing functions, which is a choice that has not been explicitly justified. In addition, no evidence has been shown that using linear regression is more effective than nonlinear regression models. To make SSL work effectively in P2P networks where training data are often limited and biased, we modify SSL by combining linear regression with the more general locally-weighted linear regression and making other corresponding changes as follows (Lu and Callan, 2004): 1. Locally-weighted linear regression (Atkeson et al., 1997) is applied to learn the score transformation when the number of training points in the neighborhood of data point x is at least N and the operation is interpolation instead of extrapolation; otherwise, globally non-weighted linear regression is applied. The weight of the i th training point x to x (resource-specific document score) is computed using Eq. (11) and the parameters a ( x ) and b ( x ) of the normalizing function with respect to x are estimated from Eq. (12) and used in Eq. (13) to calculate the projected value y (normalized, resource-independent document score). 2. As is described in Si and Callan (2003a), downloading more documents to serve as ad-ditional training data whenever needed could improve the performance of SSL. Thus when the number of overlapping documents is less than T for a neighboring peer, up to D documents in the retrieval result are downloaded from this peer and their original scores together with the scores recalculated at the hub are added to the training data to learn the score normalizing function. 3. When the score normalizing function learned using globally non-weighted linear regres-sion has negative slope (which is counterintuitive and thus indicates insufficient training data), the documents in the retrieval result are downloaded one at a time and their original scores together with the scores recalculated at the hub are used as additional training data for linear regression until the slope is positive.
 Parameters of the modified SSL algorithm N , T , and D are usually set with small values.
The kernel width parameter k is set to include enough training points (depending on the values of N and T ) in the neighborhood.

A consumer needs to merge the results returned by multiple hubs. Because consumers don X  X  maintain information about the contents of other peers and corpus statistics, they can only use simple, but probably less effective, merging methods. In this paper, consumers directly use document scores returned by hubs to merge results. 4. Test data
We used a P2P testbed based on the TREC WT10g web test collection (Lu and Callan, 2003) to evaluate the performance of federated search in hierarchical P2P networks of text-based digital libraries. The WT10g dataset contains documents that the Internet Archive crawled from 11,485 Web sites. The set of documents crawled from one Web site defines a collection.
We randomly selected (with a bias towards larger size) 2,500 collections to define 2,500 providers in a hierarchical P2P network. Collectively the 2,500 providers contain a total of 1,421,088 documents (an average of about 568 documents per provider).

There are 25 hubs in the P2P testbed. Because previous research has shown that clustering peers into content-based clusters and establishing connections based on cluster membership enables higher search accuracy and efficiency in P2P networks (Crespo and Garc  X   X a-Molina, 2002a), we required all of the providers that connect to a hub to form a content-based cluster so that each hub covers a specific type of content. The connections between providers and hubs were determined by clustering providers into 25 clusters using a similarity-based soft clustering algorithm, and connecting all of the providers within a cluster to the hub associated with this cluster.

The connections between hubs were generated randomly. Each hub has no less than 1 and no more than 7 hub neighbors. A hub has on average 4 hub neighbors.

Experiments were run on two sets of queries. The first set of queries came from the title fields of TREC topics 451 X 550. The standard TREC relevance assessments supplied by the U. S. National Institute for Standards and Technology were used.

The second set of queries was a set of 1,000 queries selected from the queries defined in the P2P testbed according to the query length distribution described in (Jansen et al., 2000).
The P2P testbed queries ( X  WT10g queries  X ) were automatically generated by extracting key terms from the documents in WT10g (Lu and Callan, 2003). Because it is expensive to obtain relevance judgments for these automatically-generated queries, we treated the 50 top-ranked documents retrieved for each query from a single large collection as the  X  X elevant X  documents ( X  X ingle collection X  baseline), and measured how well federated search in the hierarchical
P2P network could locate and rank these documents. 4 The single large collection was the subset of the WT10g used to define the contents of the 2,500 providers (WT10g-subset).
For each query, a provider was randomly chosen to temporarily act as a consumer peer to issue the query and collect the merged retrieval results for evaluation. 5. Evaluation methodology
Both search accuracy and query routing efficiency were used as performance measures. For the 100 TREC queries, precisions at document ranks 5, 10, 15, 20, and 30 were used to measure search accuracy. For the 1,000 automatically-generated WT10g queries, the percentages of overlap between the documents returned by search in the P2P network and the 50 top-ranked documents returned by centralized search ( X  X ingle collection X  baseline) were calculated at document ranks 5, 10, 15, 20, and 30 of federated search results and used to measure search accuracy. We refer to these percentage values as  X  overlap precisions  X  to distinguish them from precisions based on human relevance judgments.

The efficiency of query routing was measured by the average number of query messages (messages to carry the information requests) routed for each query in the network. 6. Experimental settings
A series of experiments was conducted to study full-text federated search in cooperative and uncooperative P2P environments. Four methods for resource selection of hubs were com-pared: the flooding method (a hub broadcasting query messages to all of its hub neighbors), random selection (a hub randomly selecting one of its hub neighbors for query routing), full-text selection using a fixed threshold (one top-ranked neighboring hub), and full-text selection using the learned thresholds. Two methods for resource selection of providers were compared: full-text selection of a fixed percentage (1%) of the top-ranked providers and full-text selection using the learned thresholds. Resource selection using the chosen fixed threshold values yielded comparable overall query routing efficiency to resource selection using the learned thresholds.

The initial TTL (time-to-live) value for each query message was 6, which was not very large for full-text resource selection considering that on average each hub only forwarded the message to one hub neighbor.

For resource representation, in cooperative environments, each provider provided an ac-curate resource description to each of its neighboring hubs. In uncooperative environments, each hub conducted query-based sampling independently to obtain sample documents from its neighboring providers in order to create resource descriptions. Sample documents from a provider were also used by the Sample-Resample method (Si and Callan, 2003b) to es-timate the total number of documents in this provider X  X  collection. A set of 500 two-term queries were randomly chosen from the queries in the P2P testbed and each hub submit-ted a query randomly selected from this set to all of its neighboring providers, examined the 4 top-ranked documents from the results returned by each provider, and repeated the process until 300 unique documents were sampled from each provider or all the queries in the predefined set had been used. The parameter values of 4 and 300 were chosen to be consistent with prior research that used query-based sampling for federated search of uncooperative digital libraries (Callan, 2000; Si and Callan, 2003a). Examining fewer top-ranked documents per query enabled a slightly less biased collection language model but required more queries and thus higher communication costs. Obtaining more unique sample documents did not dramatically improve the accuracy of the estimated collection language model.

For resource ranking, the smoothing parameter  X  in Dirichlet smoothing was set to be 1000, a value which has been shown to work well for ad-hoc retrieval over various TREC test collections (Zhai and Lafferty, 2001). It is also shown in Zhai and Lafferty (2001) that retrieval using Dirichlet smoothing is quite robust when the value of range (500 X 10000).

Unsupervised threshold learning required a set of training queries. For each experiment that used learned thresholds for resource selection to run the 100 TREC queries, two runs were conducted with each using half of the 100 TREC queries for training and half for testing. The results from two runs were averaged to get the final results. For the experiments that used learned thresholds to run the 1,000 WT10g queries, the 100 TREC queries were used as training data. Unsupervised threshold learning only used queries and the retrieved documents for training. The NIST relevance judgments for the 100 TREC queries were not used to learn thresholds. The weight w of unsupervised threshold learning in Eq. (8) was adjusted so as to yield similar overall query routing efficiency as selecting a fixed percentage (1%) of the top-ranked providers. The number of the top-ranked merged documents used for unsupervised threshold learning was 50. The parameter n which determined the criterion for a provider to be considered relevant with respect to a query was set to 5. The sufficient recall level to decide the threshold for resource selection of hubs was 50%. These parameter values worked effectively for hubs that had different numbers of neighbors and covered different content areas.

For the modified SSL algorithm, the minimum number of training points N in the neigh-borhood for locally-weighted linear regression to apply was 3, the minimum number of overlapping documents T for globally non-weighted linear regression to apply was 2, and up to D = 3 documents in the retrieval result could be downloaded from a peer to serve as addi-tional training data when there were not enough overlapping documents. Some experimental results not shown in this paper indicate that modified SSL gave very similar performance when N and T were chosen among the values of 2 to 4, and D was chosen among the values of 3 to 10. The kernel width parameter k was initially set to be one eighth of the difference between the maximum and minimum document scores that were used as training data for learning a score normalizing function. When there were not enough training points in the neighborhood, the kernel width was doubled until enough training points were included in the neighborhood. 7. Experimental results
Tables 1 and 2 show respectively the results of running the 100 TREC queries for federated search using different methods in the hierarchical P2P network of cooperative digital libraries and the hierarchical P2P network of uncooperative digital libraries. The column marked by  X  X sgs X  shows the average number of query messages routed for each query. Precisions at different document ranks are shown in columns 4 X 8. The results of federated search in a traditional distributed information retrieval setup (i.e., a single, centralized directory service for resource selection and result merging) are included in each table as a baseline. For each query, the single, centralized directory service selected the top 25 digital libraries (1% of the 2,500 digital libraries) based on the resource descriptions acquired using the STARTS protocol (cooperative digital libraries) or query-based sampling (uncooperative digital libraries), and merged results using the extended Kirsch X  X  algorithm (cooperative digital libraries) or the modified Semi-Supervised Learning algorithm (uncooperative digital libraries). In addition, the results of search using a single large collection (centralized search) are also shown in the first row of Table 1. Tables 3 and 4 show the results of running the 1,000 WT10g queries.  X  X verlap precisions X  (Section 5) at different document ranks are shown in the columns marked by  X  X P@ n  X  where n varies among 5, 10, 15, 20, and 30.

We focus first on the results in Tables 1 and 2 for the 100 TREC queries with human relevance judgments. Although federated search in the hierarchical P2P network had 20 X  30% relative degradations in search accuracy compared with centralized search, it was able to locate and rank highly 60 X 80% of the relevant documents that were ranked highly by centralized search. Considering that federated search only selected about 1% of the 2,500 digital libraries and each selected digital library only returned up to 50 documents, the results are an encouraging sign of the effectiveness of federated search in P2P networks.
The performance of federated search in the hierarchical P2P network of multiple directory services was comparable to that of distributed information retrieval with a single, centralized directory service when a similar number of digital libraries were selected. This indicates that using multiple, regional directory services collaboratively could increase the robustness and scalability of federated search without any adverse effect on search accuracy.

The results in Tables 1 and 2 also demonstrate that compared with using the flooding technique for resource selection of hubs, full-text selection based on resource descriptions of neighborhoods required around one third of the number of query messages without a significant drop in search accuracy. The average relative degradations were less than 3% in the cooperative environment and 7% in the uncooperative environment. Full-text selection and random selection gave similar query routing efficiency but the search accuracy of the former was consistently higher than the latter. Using learned thresholds for resource selection of hubs yielded a few more query messages than using a fixed threshold but had better search accuracy, indicating the ability of unsupervised threshold learning to automatically determine thresholds for better performance. Resource selection of providers with the learned thresholds in general gave better performance than selection based on a fixed percentage of the top-ranked providers, again verifying the effectiveness of unsupervised threshold learning.

For the results in Tables 3 and 4, because the  X  X ingle collection X  baseline was used as relevance judgments for WT10g queries, they directly measured the ability of federated search in the hierarchical P2P network to match the results from search in a centralized environment.
The high  X  X verlap precisions X  at top document ranks in Tables 3 and 4 demonstrate that federated search in the hierarchical P2P network was able to locate and rank highly most of the documents that were considered relevant by the centralized approach, which illustrates the effectiveness of resource selection and result merging algorithms in the hierarchical P2P network.

The effectiveness of full-text federated search in P2P networks can be further manifested by comparing the results evaluated using human relevance judgments (Tables 1 and 2) and those using the  X  X ingle collection X  baseline (Tables 3 and 4). The performance difference between various algorithms for the 100 TREC queries was due to differences in the number of relevant documents among the top-ranked documents. In contrast, with the  X  X ingle collection X  baseline, the performance difference between various algorithms for the 1,000 WT10g queries was due to the difference in the degree of overlap between the results of federated search and those of centralized search, which might include both relevant and non-relevant documents.
The values of relative performance difference between flooding and full-text hub selection for the 100 TREC queries were 3% and 7% in the cooperative and uncooperative environments respectively, which were less than half of the 9% and 15% relative degradations for the 1,000
WT10g queries. This indicates that among the top-ranked documents returned by centralized search, full-text federated search missed more non-relevant documents than relevant ones by selecting only a subset of hubs, which can be explained by both the use of content-based clusters in constructing the network topology (so that relevant documents are likely to be concentrated at a few hubs), and the ability of full-text resource selection to take advantage of this content-based locality for effective hub selection. Despite the difference in the evaluation results of the 100 TREC queries and the 1,000 WT10g queries, the same conclusions drawn from the results of the 100 TREC queries could also be drawn from the results of the 1,000
WT10g queries regarding the relative effectiveness of various algorithms, which indicates that the automatically-generated queries and the  X  X ingle collection X  baseline are useful resources in studying federated search in peer-to-peer networks.

The results also show that the search performance in the uncooperative environment had on average less than 8% degradation for TREC queries and less than 16% degradation for WT10g queries compared with the search performance in the cooperative environment.
Considering that in the uncooperative environment hubs only obtained partial information about the content of each resource, the search performance in the uncooperative environment was satisfactory. This indicates that query-based sampling, the Sample-Resample method, and the modified Semi-Supervised Learning result merging algorithm are effective techniques for full-text federated search of text-based digital libraries in P2P networks of uncooperative digital libraries. 8. Conclusions and future work This paper studies federated search of text-based digital libraries in hierarchical P2P networks.
Although some existing approaches to resource representation, resource selection, and result merging for full-text federated search can be adapted to P2P environments in a straightforward manner, new development is still required to fit the solutions to the unique characteristics of hierarchical P2P networks. For example, in hierarchical P2P networks, query routing among hubs should be based on not only the hub X  X  likelihood of providing relevant documents with its own providers, but also its potential to provide a path to other peers that are likely to satisfy the information request. Thus new methods are needed to represent the contents covered by the available resources in the networks. In this paper, we define the concept of neighborhood and describe methods to create and use resource descriptions of neighborhoods for hub-hub query routing with full-text resource selection of hubs. Experimental results demonstrate that full-text selection offers a better combination of accuracy and efficiency than flooding and random selection.

Another unique character of hierarchical P2P networks is that there are multiple hubs and each hub must make local decisions on selecting neighboring peers for query rout-ing. Because hubs are different in the neighbors they connect to, which could also change dynamically as peers come and leave or change connections, the ability of hubs to learn au-tomatically hub-specific resource selection thresholds in the network is much desired. This motivated us to develop an approach for each hub to learn its own threshold in an unsuper-vised manner based on the retrieval results of a set of unsupervised training queries. In our experiments the proposed approach was consistently more accurate than the typical method of selecting a fixed number or percentage of the top-ranked neighboring peers with similar efficiency.

In addition to new developments in resource representation and resource selection, the current state-of-the-art Semi-Supervised Learning result merging algorithm is modified to combine linear regression with the more general locally-weighted linear regression and cor-responding changes are made to make the algorithm work more effectively with the limited and biased training data available in hierarchical P2P networks.

The results in this paper also provide additional support for using the automatically-generated queries and the  X  X ingle collection X  baseline to evaluate the search performance in P2P networks. The same conclusions on the relative effectiveness of various algorithms for federated search in P2P networks can be drawn from the results of the 1,000 WT10g queries and from the results of the 100 TREC queries. This is encouraging because the large number of queries automatically generated from WT10g (in the magnitude of 10 the opportunity to study in the future how the network can learn from past queries and evolve to improve the search performance over time.

The evaluation using a P2P testbed of 2,500 digital libraries and 25 directory services (hubs) shows that our approaches to full-text federated search enable comparable performance to that of traditional distributed information retrieval using a single, centralized directory service. However, one might argue that the conclusion only holds for P2P networks of small to medium sizes with regulated network structures and organized content distributions.
Although we believe that our approaches to full-text federated search can work effectively and efficiently in larger P2P networks, the size of the P2P testbed is not large enough to enable solid analysis on the network aspect of federated search, particularly query routing at the hub level. To really see the problems that P2P networks bring to federated search and how they affect search performance, we need to study and evaluate federated search in networks of larger scales, which remains a challenge for the entire research community. As to the dependency of federated search performance on the appropriate network structure and content distribution, we view it as the starting point of our future exploration rather than a limitation of our approaches. Much of our future effort will be shifted from further refinement of particular search algorithms to developing distributed algorithms for dynamic evolution of P2P network topologies so that desired content distribution and network navigability can be obtained automatically and autonomously to support high performance full-text federated search in P2P networks.
 References
