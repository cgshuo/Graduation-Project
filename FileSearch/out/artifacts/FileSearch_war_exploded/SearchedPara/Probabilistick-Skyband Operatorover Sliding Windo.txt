 In a d dimensional numerical space, we say an element e dominates another element e if e is not worse than e in every dimension and is better than e in at least one dimension. Given a dataset D ,the k -skyband of D contains the set of points which are dominated by at most k  X  1 other points. k -skyband is a useful tool in data analyzing as it retrieves the objects which are definitely worse than (i.e., dominated by) at most k  X  1 other objects. The concept of k -skyband is also closely related to the following two concepts, skyline and top-k ranking queries. Given a dataset D ,the skyline of D contains all elements which are not domin ated by any other elements from D . Clearly, skyline is a special case of k -skyband query where k =1 . Given a dataset D and a ranking function f , a top-k query retrieves the k elements in D with the highest scores according to f . An important property of k -skyband is that it keeps a minimum candidate set to answer multiple ad-hoc top-k queries given that the ranking functions of these queries are monotonic. Thus, keeping k -skyband of a dataset is sufficient to answer all top-k ranking queries with monotonic ranking functions. In Figure 1, the skyline elements (1-skyband) are { a, c, d } as neither of them is dominated by other elements; 2-skyband consists { a, c, d, b, f } which are dominated by at most 1 other object. Note that without loss of generality, we assume smaller values are preferred in the paper.

Uncertain data analysis is an important issue in many emerging important appli-cations, such as sensor networks, trend prediction, moving object management, data cleaning and integration, economic decisi on making, and market surveillance. Uncer-tainty arises in these applications due to various reasons including data randomness and incompleteness, delay or loss in data transfer, limitation of equipments, privacy preservation, etc. In many scenarios of such a pplications, uncertain data is collected in a streaming fashion. Uncerta in streaming data computation has been studied and the existing work mainly focuses on aggregate queries, top-k queries, skyline queries, etc [3,6,15,16]. In this paper, we will investigate the problem of efficient skyband com-putation over uncertain streaming data w here each data element has a probability to occur.

Skyband computation over uncertain streaming data has many applications. For in-stance, in an on-line shopping system products are evaluated in various aspects such as price and condition . In addition, each seller is associated with a  X  X rustability X  value which is derived from customers X  feedback on the seller X  X  product quality, delivery han-dling, etc. This  X  X rustability X  value can also be regarded as occurrence probability of the product since it represents th e probability that the product occurs exactly as described in the advertisement in terms of delivery and quality. A customer may want to select a product, say laptops, according to multi-criteria based ranking, such as low price, good condition, etc, and require that the retrieved laptop cannot be definitely worse than (i.e., dominated by) k  X  1 other laptops where k is specified by the user. In Table 1, L 1 and L 4 are skyline points, { L 1 ,L 4 ,L 2 ,L 3 } form 2-skybands. Nevertheless, we should also consider that L 1 is posted long time ago; L 4 is better than (dominates) L 3 but the trustability of the seller of L 4 is low.

The challenges for skyband computation over uncertain sliding windows are three-fold. Firstly, computing probabilistic k -skyband for a given set of uncertain elements is costly since naively we need to enumerate all the possible worlds which is exponential to the number of total elements. Secondly, a c ritical requirement in data stream compu-tation is to have small space so it is important to identify a candidate set with minimum size for correct k -skyband computation in the sliding window. Thirdly, due to high ar-riving speed and high data volume, it is esse ntial to develop time efficient techniques to handle frequent updates (i.e., insertions and deletions) in the sliding window.
To the best of our knowledge, this paper is the first to study the problem of proba-bilistic k -skyband operator over uncertain sliding windows. Our main contributions are summarized as follows.  X  We formally define the probabilistic k -skyband operator in uncertain sliding windows following the possible world semantics in a probability threshold fashion.  X  A dynamic programming based algorithm is proposed to efficiently retrieve k -skyband elements for a given set of uncerta in elements. The algorithm runs in O ( nk ) time for an element a where n is the number of elements dominating a . An optimization tech-nique is further proposed to reduce the time complexity to O ( k ) when a new element is added to the dominating element set of a .  X  We characterize the minimum information needed in continuously computing k -skyband regarding a sliding window and show that the expected size of the minimum candidate set is kln d N k when the data set follows uniform distribution.  X  We develop novel, efficient, incremental techniques to continuously compute proba-bilistic k -skyband over sliding windows.  X  Space and time efficiency are demonstrated by an extensive empirical study on both real and synthetic datasets.
 The rest of the paper is organized as follows. In Section 2, we formally define the prob-lem of sliding-window k -skyband computation and provide some necessary background information. Section 3 presents the theoretical foundations. We develop techniques for k -skyband probab ilities computation in Section 4 and c ontinuous updates of probabilis-tic k -skyband queries in Section 5. Results of comprehensive performance evaluation are presented in Section 6. Section 7 summaries related work and Section 8 concludes the paper. We u s e DS to represent a sequence (stream) of data elements in a d -dimensional nu-meric space such that each element a has a probability P ( a ) ( 0 &lt;P ( a )  X  1 ) to occur where a.i (for 1  X  i  X  d ) denotes the i -th dimension value. For two elements u and v , u dominates v , denoted by u  X  v ,if u.i  X  v.i for every 1  X  i  X  d , and there exists adimension j with u.j &lt; v.j . Given a set of elements, the k-skyband consists of all points which are dominated by at most k  X  1 other elements. 2.1 Problem Definition Given a sequence DS of uncertain data elements, a possible world W is a subsequence of DS . The probability of W to appear is P ( W )=  X  a  X  W P ( a )  X   X  a  X  W (1  X  P ( a )) .Let  X  be the set of all possible worlds, then W  X   X  P ( W )=1 .Weuse SKY BAND ( W ) to denote the set of elements in W that form the k -skyband of W . The probability that an element a appears in the k -skyband of the possible worlds is P skyband ( a )=
In many applications, a data stream DS is append-only [7,9,14]; that is, there is no deletion of data element involved. In this paper, we study the k -skyband computation problem restricted to the append-only data stream model. In a data stream, elements are positioned according to their relative arrival o rdering and labelled by integers. Note that the position/label  X  ( a ) means that the element a arrives  X  ( a ) th in the data stream. Problem Statement. In this paper, we study the problem of efficiently retrieving k -skyband elements from the most recent N elements, seen so far, with the k -skyband probabilities not smaller than a given probability threshold q ( 0 &lt;q  X  1 ). 2.2 Preliminaries An Assisted Probability. Let DS N denote the most recent N tuples. For each element a ,weuse P new ( a ) to denote the k -skyband probability of a restricted to the elements newer than a only.
 Example 1. Suppose 7 uncertain elements a, b, c, d, e, f, g arrive according to alpha-betic order. For an element c , P skyband ( c ) denote the probability that c is dominated by at most k  X  1 elements among a, b, d, e, f, g . On the other hand, P new ( c ) is the proba-bility that c is dominated by at most k  X  1 elements among d, e, f, g (i.e., newer than c ) only. Given a probability threshold q and a sliding window with length N , Alogrithm1 shows the framework for continuously processing probabilistic k -skyband queries where a old is the oldest element in the current window DS N . Functions insert ( a new ) and remove ( a old ) will be elaborated in the following sections.

Algorithm 1. Probabilistic k -skyband Computation over a Sliding Window 3.1 Using S N,q only Let S N,q denote the set of elements from DS N with their P new values not smaller than q; that is,
A critical requirement in data stream computation is to have small memory space and fast computation. In our algorithms, instead of keeping all recent N elements DS N ,we propose to keep only S N,q which is shown to be logarithmic in size regarding N in the empirical study. Next, we show the correctness of using S N,q only in the computation. Theorem 1. S N,q is the minimum set of elements to be maintained to correctly com-pute probabilistic k -skyband queries for sliding window size of N regarding probability threshold q .
 The proofs of Theorem 1 is lengthy and we omit it here due to space limits. The cor-rectness of the theorem is based on the following properties of S N,q .  X  Processing k -skyband query based on S N,q only will not miss any k -skyband points.  X  For a k -skyband element, its k -skyband probability computed based on S N,q only is equal to that computed based on all most recent N elements.  X  S N,q is the minimum set of elements to guarantee correct retrieval of k -skyband results within the most recent N elements.
 Size of S N,q . Elements in the candidate set S N,q can be regarded as the k -skyband results in the d +1 dimensional space by including time as an additional dimension. Thus, with the assumption that all points follow the uniform distribution, the expected size of S N,q is kln d N k . For a given uncertain element a in the sliding window, assume that a is dominated by existing dominance reporting algorithms based on R-trees [9]. Clearly, the k -skyband probability of a is the sum of probabilities of all possible worlds in which a is dominated by at most k  X  1 other elements. Namely, at most k  X  1 elements from u 1 , ..., u n appear since the occurrence of elements not dominating a does not affect the computation of P Next we present a dynamic programming based algorithm for calculating P skyband ( a ) . Assume that the elements u 1 , ..., u n are sorted according to an arbitrary order, we build a matrix M with size ( n +1)  X  ( n +1) as follows. Let m i,j denote the probability that exactly i elements out of the first j elements happen. The following equation is immediate. where P ( u j ) is the occurrence probability of element u j . In the initializing phase, m 0 ,j (for 1  X  j  X  n ) equals (1  X  P ( u 1 ))  X  ...  X  (1  X  ( P ( u j ))) , namely none of the first i elements occurs; m i,i (for 1  X  i  X  n ) equals P ( u 1 )  X  ...  X  P ( u i ) meaning that all first i elements occur. The construction of the matrix is summarized in the following equation. Algorithm 2. Skyband Probability Calculation The algorithm for computing P skyband ( a ) is reported in Algorithm 2.
 Time Complexity. In building the matrix, the sum of values m i,n ( 0  X  i  X  k  X  1 ) captures the probability that at most k  X  1 elements occur among the n elements dominating a . Thus, we can stop once m k,n is retrieved, leading to the time complexity O ( kn ) .
 Optimization. Since the elements dominating a aresortedinanarbitraryorder,ifanew element is inserted into the dominating set of a , we do not need to rebuild the whole matrix. Instead, the existing n  X  n matrix can be expanded to an ( n +1)  X  ( n +1) matrix and we retrieve the probability that at most k elements occur out of n +1 elements from the new matrix. The time complexity in this case is reduced to O ( k ) . A naive execution of Algorithm1 is with every update of the sliding window (i.e., ar-rival of a new and expiration of a old ), for every element a in S N,q , we recompute its k -skyband probability P skyband ( a ) following Algorithm 2 regarding the updates, and report elements with P skyband ( a )  X  q . In this section, we present novel aggregate in-formation enhanced, R-tree based algorithms to efficiently handle the updates. 5.1 Aggregate R-Tree We monitor the following two probab ility values in the continuous processing, P new and P skyband .Once P new ( a ) for an element a falls below the probability threshold q , as shown in Section 3, a could be safely removed. P skyband ( a ) for an element a decides its qualification as a k -skyband result. Specifically, we continuously keep two R-trees, R 1 indexes all candidate elements in S N,q which are not the k -skyband results in the sliding window, where R 2 indexes all current k -skyband results. Clearly, R 1 and R 2 together keep all candidate elements from S N,q . Furthermore, for each element a in R 1 and R 2 . Denote the matrix to compute P skyband ( a ) in Section 4 as M skyband . We maintain the last column of M skyband ,de-noted as  X  M nating a , P skyband can be updated by using  X  M denote the matrix for calculating P new ( a ) as M new . Its last column  X  M new ( a ) is kept to update P new ( a ) in O ( k ) time once a new element is added to the dominance list. 5.2 Handling Insertion of a new When a new tuple a new arrives in the sliding window, it stays in S N,q because it is not dominated by any element newer than it and thus P new ( a new )=1 . After computing the P skyband value of a new , we may decide if it is a candidate element (to insert into R ),or a k -skyband result (to insert into R 2 ). Besides, the following effects are invoked by the arrival of a new .
 Qualification as a Candidate Element. We check the qualification of an element to be in the candidate set for both R 1 and R 2 .Ifanelement a is dominated by a new and the updated P new value becomes below the probability threshold q , a is no longer a candidate element and will be deleted from R 1 or R 2 .
 Qualification as a Probabilistic k -skyband Result. We check the qualification of an element as a probabilistic k -skyband result for elements in R 2 only. If an element a in R 2 survives the qualification test and P skyband ( a ) falls below q , it will be moved from R 2 to R 1 .
 Insert a new . P skyband value of a new will be computed using the dynamic programming algorithm in Section 4. If P skyband ( a new )  X  q , a new is inserted into R 2 ;otherwise a new is inserted into R 1 .

Algorithm 3. Insertion of ( a new )
Algorithm 3 reports the steps to handle the insertion of a new . Lines 1 to 5 handles the updates on R 1 where we need to consider the qualifi cation as a candidate element only, while lines 6 to 14 tackles updates on R 2 where we need to handle both candidate and k -skyband result qualification. Note that retrieving the element set which are dominated by a new can be efficiently implemented using existing techniques [9]. 5.3 Handling Removal of a old With the expiration of a old ,wechecktheelementsin R 1 and R 2 which are dominated by a old and update their P skyband values since the P skyband values for these element will increase. For every element in R 1 and R 2 which is dominated by a old , its P skyband value will be recomputed using the dynamic programming algorithm in Section 4. If the updated P skyband value for an element in R 1 becomes larger than or equal to q , it will be moved from R 1 to R 2 .Removing a old is straightforward since we only need to delete it from R 1 or R 2 . Algorithm 4 depicts the key steps in handling the removal of a old .Lines 2 to 6 handles the updates on R 1 and Lines 7 to 9 handles the updates on R 2 .
Algorithm 4. Removal of ( a old ) 5.4 Continuously Processing Probabilistic k -Skyband Query As introduced above, R-tree R 2 keeps the probabilistic k -skyband results for the current sliding window and is updated along the sliding of the window (i.e., new elements arrival and old elements expiration). So at every timestamp, scanning using breadth first search over R 2 and outputing all elements in R 2 provides the probabilistic k -skyband result for the current window. In this section, we only evaluate our techniques since this is the first paper studying the problem of probabilistic k -skyband computation over sliding windows.

All algorithms are implemented in C++ and compiled by GNU GCC. Experiments are conducted on PCs with Intel Xeon 2.4GHz dual CPU and 4G memory under Debian Linux. Our experiments are conducted on both real and synthetic datasets. Real dataset is extracted from the stock statistics from NYSE (New York Stock Ex-change). We choose 2 million stock transaction records of Dell Inc. from Dec 1st 2000 to May 22nd 2001 . For each transaction, the average price per volume and total vol-ume are recorded. This 2-dimensional dataset is referred to as stock in the following. We randomly assign a probability value to each transaction; that is , probability values follows uniform distribution. Elements X  arrival order is based on their transaction time. Synthetic datasets are generated as follows. We first use the methodologies in [2] to generate 2 million data elements with the dimensionality from 2 to 5 and the spatial loca-tion of data elements follow two kinds of distributions, independent and anti-correlated . Then, we use two models, uniform or normal distribution, to randomly assign occur-rence probability of each element to make them be uncertain. In uniform distribution, the occurrences probability of each elem ent takes a random value between 0 and 1 , while in the normal distribution, the mean value P  X  varies from 0 . 1 to 0 . 9 and variance is set 10 . We assign a random order for elements X  arrival in a data stream.
Table 2 summarizes parameters and corresponding default values. In our experi-ments, all parameters take default values unless otherwise specified.
 6.1 Evaluate Space Efficiency We evaluate the space usage in terms of th e number of uncertain elements kept in S N,q against different settings. As this number may change as the window slides, we record the maximal value over the whole stream. Meanwhile, we also keep the maximal num-ber of k -skyband.
 The first set of experiments is reported in Figure 2 where 4 datasets are used: Inde-Uniform (Independent distribution for spatial locations and Uniform distribution for occurrence probability values), Anti-Uniform, Anti-Normal, and Stock-Uniform. We record the maximum sizes of S N,q and k -skyband. It is shown that very small portion of the 2-dimensional dataset needs to be kept. Although this proportion increases with the dimensionality rapidly, our algorithm can still achieve a 72% space saving even in the worst case, 5 dimensional anti-correlated data. Size of k -skyband is much smaller than that of candidates. Since the anti-correlated dataset is the most challenging, it will be employed as the default dataset in the following.

The second set of experiment evaluates the impact of sliding window size N on the space efficiency. As depicted in Figure 3(a), the space usage is sensitive towards the increment of window size.

Figure 3(b) reports the impact of occurrence probability distribution against the space usage on different datasets. It demonstrates that there X  X  no obvious relationship between candidate size and expected appearance probability.

Figure 3(c) reports the effect of probabilistic threshold q on space efficiency. The threshold probability q varies from 0.1 to 0.9. As expected, candidate set size drops as q increases.

Figure 3(d) reports the effect of k -skyband width k on space efficiency. As expected, candidate set size increases as k increases. 6.2 Evaluation Time Efficiency We evaluate the time efficiency of our continuous query processing techniques. We first compare our algorithm with a trivial algorithm based on dynamic programming to compute P skyband . We find it is too late since it recalculates P skyband value of every element in every sliding window. Thus, we exclude the trivial algorithm from further evaluation.

Since the processing time of one element is too short to capture precisely, we record the average time for each batch of 1 K elements to estimate the delay per element. Figure 4(a) evaluates the system scalability towards the size of the sliding window. The performance of our algorithm decreases as the size of sliding window increases. This is because the candi date size increases with N , as reported in Figure 3(a).
Figure 4(b) evaluates the impact of occurrence probability distribution on time effi-ciency of our algorithm where normal distribution is used for probability values. Similar to Figure 3(b), there is no obvious relationship.

Figure 4(c) evaluates the effect of probability threshold q . Since both size of candi-date set and k -skyband objects set are small when q is large as depicted in Figure 3(c), our algorithm is more efficient when q increases.
 The last experiment evaluates the impact of k -skyband width k on time efficiency. Results are reported in Figures 4(d). As expected, Figure 4(d) shows that processing cost increases when k increases. 6.3 Summary As a short summary, our performance evaluation indicates that we only need to keep a small portion of stream objects in order to compute the probabilistic k -skyband over sliding windows. Moreover, our continuous query processing algorithms are very effi-cient and can support data streams with high speed for 2 dand 3 d datasets. Even for the most challenging data distribution, anti-correlated , we can still support the data stream with medium speed of more than 140 elements per second when dimensionality is 5 . We review related work in two aspects, skyba nd and uncertain data streams. To the best of our knowledge, this paper is the first one to address the problem of k -skyband queries on uncertain data streams.

The concept of k -skyband is first proposed in [12]. [11] shows that it suffices to keep the k -Skyband of the data set to provide the top-k ranked queries for the monotone preference function f .Reverse k -skyband query is recently studied in [10].
Aggregates over uncertain data streams have been studied in [3,5,6]. Problems such as clustering uncertain data stream [1], frequent items retrieval in probabilistic data streams [15], and sliding window top-k queries on uncertain streams [7] are also investigated. The skyline query processing on uncertain data is firstly approached by Pei et al [13] where Bounding -pruning -refining techniques are developed for efficient computation. Lian et al [8] combine reverse skylines [4] with uncertain semantics and model the probabilistic reverse skyline query in both monochromatic and bichromatic fashion. Efficient pruning techniques are developed to reduce the search space for query processing. Probabilistic skyline processing over uncertain sliding windows are investigated in [16]. In this paper, we investigate the problem of probabilistic k -skyband query process-ing over sliding windows in a probability threshold fashion. We firstly characterize the minimum information to be kept for correct probabilistic k -skyband computation. Then a novel dynamic programming based algorithm is proposed to compute the k -skyband probabilities for a given uncertain element. Efficient, aggregate information enhanced, incremental updating techniques are developed to handle frequent insertions and deletions in the streaming environment. Time and space efficiency of our proposed techniques are demonstrated in a comprehensive empirical study over both real and synthetic datasets.

