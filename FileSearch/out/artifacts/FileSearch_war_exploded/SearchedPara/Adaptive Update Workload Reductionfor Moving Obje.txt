 Nowadays, more and more location-based services ( LBSs ) which rely on the locations of the moving objects have facilitated our daily life. Compared with the LBS problem in an ideal Euclidean space, LBS under the context of road network is more practical with many dazzling applications, such as the traffic management which is illustrated in the following example.
 Example. By knowing the location and velocity of each vehicle, we can pre-dict their potential locations after a p eriod of time. Based on those predicted locations, drivers on the road can be guided to avoid the traffic jam.
In this paper, we focus on the Predicted Range Queries . While a variety of works have been proposed to speed up location-based queries [1] [2], the up-dating protocol has not been sufficiently studied. In [3] and [4], Chen et al. proposed adaptive updating protocol to reduce the updating workload on an ideal Euclidean space. However, under the context of road network, the moving trajectory of each object is constrained by the road shape, which can help us better design the updating protocol. We summarize our contributions as follows: First,we design a Location-based Updating Protocol for the road networks. The protocol utilizes the trajectory sim ilarities between neighboring objects to estimate the updating frequency of the system. Second, we propose a Velocity-based Updating Protocol which employs the velocity information of each object to estimate the system updating frequen cy. We perform extensive experiments using real-world datasets to verify our two proposals. There are many papers which have given so lutions for the safe region selection and optimization [5] [6] [7]. However, all these methods are designed and imple-mented for the ideal Euclidean space.

In literature [3], Chen et al. proposed an updating protocol which is constructed on the basis of the safe region (called STSR ). The STSR is built for every moving object to approximate its location. Under the setting of STSRs ,alarger STSR introduces less active updates but more passive updates, and a smaller STSR causes less passive updates but more active updates. Based on such intuition, a cost model is built to estimate both of the system total updating cost and the composition of active updates and passive updates. In [8], a updating protocol was designed for solving the similarity pair queries for the application of discover-ing alliances for online game players. Its updating protocol is also constructed on the basis of safe regions. Although this approach is adaptive under different pa-rameter settings, it did not consider the v elocity information of each object which may help to improve the cost model for better safe region adjustment.
Amongst all existing works, the work [3] by Chen et al is most relevant to ours, since we both consider supporting the predicted range queries and minimizing the updating workload. We assume there are n moving objects O { o 1 ,o 2 , ..., o n } ,being monitored in the Based on the motion properties of the moving objects, we introduce the Road-Network Safe Range ( RNSR ) to describe the states of the moving objects. Each moving object o i has a RNSR , which is denoted by R ( o i )= { k ( path j ) , segment on the road network; VLS indicates the both endpoints X  velocity of the LS , t r is the reference time; and t e is the expiration time ( t e &gt;t r ).
On the basis of [3], we extend the basic update protocol. Our updating pro-tocol also considers the following types of update, namely the active update and the passive update.
 Active Update. If the object o i moves out of its R ( o i ) (in the same path), it will incur the active update.
 Passive Update. A passive update is issued when the database conducts a query. At the query time t, when the predicted R ( o i ) partially intersects with the query line segment, it cannot determine whether the moving object o i is in the query line segment. Thus the server will send a probing message to the object o i . As long as the server receives the message, and then o i gives its exact location to the server and updates the predicted line segment. We consider that the moving objects on t he same path have similar speed. Each object should review whether its current location is still in its RNSR in each time period. If the object o i does not stay in the R ( o i ), o i will send an update message to the server in order to inform its location and reassign a new RNSR to o i .
Based on the above analysis, we can infer two different probabilities for the active update.
 Location-Based Active Update Probability Calculation. The probabil-ity of inconsistency before the expiration time t e for an object o i is denoted as P a ( R ( o i )). We define the moving objects intersecting with R ( o i ) as similar records R NN ( o i )to o i . However, the similar records R NN ( o i )cannotgetthe active update probability of the object o i accurately. Therefore, we give the covered records R k ( o i )from R NN ( o i ) to solve this problem as follows. Definition 1: If the R ( o i ) completely covers its similar records R NN ( o i ) and its current location, these record s are called covered records R k . The value of R k is denoted by |{ R k ( o i )  X  R NN ( o i ) | R ( o i )  X  R k ( o i ) }| .
We get the active update probability from the historical perspective as P a ( R ( o i )) Velocity-Based Active Update Probability Calculation. We introduce two parameters  X  and .Aninitial R ( o i ) is initialized to a r egion centralized at the object o i with a length of 2  X  and denotes the speed increment. The two endpoints X  velocities of a line segment is &lt;v  X  , v + &gt; . Given the current velocity of the object o i , we can calculate the active update probability following formula, P a ( R ( o i )) = k p k  X  (1  X  p s ). Here, p s is the probability that o i and similar records have the same velocity range; p k is the probability that o i and similar records have the different velocity ranges.
 Passive Update Probability. According to the type of the active update, the passive update probability is also divided into the following two cases: probability based on location and probability based on velocity. (1)Probability Based on Location
When the query line segment is sent to the database on the road network, the passive update is issued. That is, the predicted line segment partially overlaps the query line segment.We will estimate the number of the objects per meter. If the RNSR completely covers the query line segment or does not cover the query line segment, we do not need to update the RNSR .

Assumetheupdatetimeofthe R ( o i )is t u , and the length of the object o i on the road network is Len with Len ( o i )=2  X   X  ( t u  X  t r ). During this period, the Here L is the whole length of the path which o i belongs to; K is the expected number of queries happening at each timestamp. (2) Probability Based on Velocity Probability based on velocity is similar to the probability based on location. The length of the object o i at the update time t u on the path is Len ( o i )= the same to that of the probability based on location.
 Cost Model. According to our analysis, the active update cost of the objects is Cost P a = N i =1 P a ( R ( o i )), where N is the active update number of the objects. And the passive update cost is Cost P p = N i =1 P p ( R ( o i ))  X  2, where 2 indicates: the probing message is sent to the object and an update message is sent back from the object. So the total cost is Cost total = Cost P a + Cost P p . In this section, we present two methods to assign a suitable RNSR for each object and to calculate the updating probability and cost. 5.1 Optimization Based on Greedy Algorithm As the solving process of Greedy algorithm is simple and fast, we uses this method combined with a United Space for optimization to find the suitable RNSR for each moving object. Now, we give the formal a definition of the United Space.
 Definition 2: United Space ( US ) is a line segment, which is composed by the intersection of similar records on a path and this intersection must cover the location of the object o i .

Define the minimum value of u i .LS as u min .LS using Greedy algorithm. If the record u i has been chosen, we no longer consider it. Thus, we select the minimum u .LS as u min .LS every time and add it to RNSR.LS until there is no element in the US or the workload can not be accepte d by the system. Finally, we can obtain the initial RNSR . 5.2 Optimization Based on TS On the basis of Greedy algorithm, better RNSR can be found for each object by TABU Search ( TS ) algorithm, which absorbs inferior solution to jump out of local optimal state.

First, we use the Greedy Algorithm to determine the initial RNSR for each object. Second, we discuss the algorithm based on TS . The aim of this part is to extend the RNSR.LS by selecting records similar to object o i (details are illustrated in Algorithm1). To judge whether the similar records have intersec-tion with the United Space elements, we should calculate the workload of new Cost total R ( o i ) until its workload can not be accepted by the system (i.e. the termination condition.).
Algorithm 1. Active Update based on TS In this section, we evaluate the updating cost of our proposed algorithms. We use the real dataset is provided by R  X  tree Portal 1 .

In this paper, our algorithms are implemented in C++ and run on a PC with 2.4GHz Inter(R) Core(TM)2 Duo CPU, 2G RAM and 160G disk.

Figure 1 illustrates that different settings of in Velocity  X  U lead to different numbers of active update. As can be seen from the figure, the greater is, the fewer the number of active update is. This is because as the becomes larger, R ( o i ) .LS is also increased, and thus the object o i does not need to update for some time. And the number of active update has stabilized over time. In Figure 2, we can see that different  X  can also result in different total costs.
Figure 3 indicates the system cost when the objects move in different intervals of speed. We can see that all these three methods obey the variation tendency that the faster speed can lead to a higher total cost. And, as the speed value increases, the total cost of update will increase linearly. Also, it can be inferred that the total cost of Velocity  X  U is smaller than the other two methods easily. Figure 4 makes a comparison of Location  X  UG , Location  X  UT and Velocity  X  U by using different query predicted tim e. We can observe that the total update cost will be generally decreased wit h the longer query predicted time. In this paper, we present an extended u pdating protocol for the moving object databases under the context of the road networks. We use RNSR (Road-Network Safe Range) for each object to quantify it s movement characteristics. Based on the updating protocol, two methods are designed for reducing the system work-load. Extensive experiments are conducted to verify that both of our proposals are more effective and feasible than the basic updating protocol.

