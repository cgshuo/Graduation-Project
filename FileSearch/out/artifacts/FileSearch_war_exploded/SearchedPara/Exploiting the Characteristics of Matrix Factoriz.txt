 Recommender systems help web users to address informa-tion overload. However their performance depends on the number of provided ratings by users. This problem is ampli-fied for a new user because he/she has not provided any rat-ing. To address this problem, active learning methods have been proposed to acquire those ratings from users, that will help most in determining their interests. However, different from the classic active learning, users (the  X  X racle X ) are not always able to provide an answer for queries. The easiest way to solve this problem is to ask most popular items, i.e items which have received many ratings from training users. But it is static and presents the same items to all users re-gardless of the ratings they have provided so far. In this paper we propose a method that improves the most popular selection strategy using the characteristics of matrix factor-ization. It finds similar users to the new user in the latent space and then selects item which is most popular among the similar users . The experimental results show the pro-posed method outperforms the most popular method both in terms of error and the number of received ratings. I.2.6 [ Artificial Intelligence ]: Learning Parameter learn-ing Recommender System, Active Learning, New User Problem
Recommender systems help web users to address infor-mation overload in a large space of possible options [3]. In many applications, such as in e-commerce, users have too many choices and too little time to explore them all. More-over, the exploding availability of information makes this problem even tougher.

There are several techniques for recommendation. Col-laborative filtering is a traditional technique that is widely applied [1, 13, 15]. It makes automatic predictions about the interests of a user by reusing taste information from other users. The underlying assumption of the collaborative fil-tering approach is that those who agreed in the past tend to agree again in the future.

Collaborative filtering methods fall into two main cate-gories: memory-based algorithms and model-based algorithms. In memory-based techniques, the value of the unknown rating is computed as an aggregate of the ratings of some other (usually, the N most similar) users for the same item [13]. Model-based collaborative techniques provide recommenda-tions by estimating parameters of statistical models for user ratings. Nevertheless, recent research (especially as has been demonstrated during the Netflix challenge 1 ) indicates that Matrix Factorization(MF) is a superior prediction model compared to other model-based collaborative methods [14].
Evidently, the performance of collaborative filtering de-pends on the amount of information that users provide re-garding items, most often in the form of ratings. However, a well identified problem is that users are reluctant to pro-vide information for a large amount of items. This fact im-pacts negatively the quality of generated recommendations. A simple and effective way to overcome this problem, is by posing queries to new users in order that they express their preferences about selected items, e.g., by rating them. Nev-ertheless, the selection of items must take into consideration that users are not willing to answer a lot of such queries. To address this problem, active learning methods have been proposed to acquire those ratings from users, that will help most in determining their interests [5, 8].

However, different from the classic active learning, users (the  X  X racle X ) may not know the answer of queries. For ex-ample in the movie recommendation scenario, if the new user has not watched the queried movie, he/she is not able to pro-vide a rating for that movie. The easiest way to solve this problem is to ask most popular items, i.e items which have received many ratings from training users. Hopefully, the item which is known for many training users is also known for the new user and he/she can rate it. But the most-popular selection strategy is static and presents the same items to all users regardless of the ratings they have pro-vided so far. An advanced active learning algorithm adapts to the earlier answers given by the new user to improve the preference of elicitation process. In this paper we propose www.netflixprize.com a method which improves the most popular selection strat-egy using the characteristics of matrix factorization. It finds similar users to the new user in the latent space and then selects an item which is most popular among the similar users . As the similar users change during the active learn-ing process based on the new user X  X  answers to the queries, the active learning algorithm is also automatically adapted to these answers.

The rest of this paper is organized as follows: In Section 2, the related work is reviewed. As the proposed method relies on matrix factorization, a short introduction to matrix fac-torization is introduces in section 3. The proposed method is explained in section 4 followed by the experimental results in Section 5. Finally, the conclusions are stated in Section 6.
Active learning, in the context of the new-user problem, was introduced by Kohrs and Merialdo [12]. This work suggested a method based on nearest-neighbor collabora-tive filtering, which uses entropy and variance as the loss function to identify the queried items. Mamunur et al. [15] expanded this work, by considering the popularity of items and also personalizing the item selection for each individual user. Boutilier et al. [2] apply the metric of expected value of utility to find the most informative item to query, which is to find the item that leads to the most significant change in the highest expected ratings.

Jin and Si [8] developed a new active learning algorithm based on Aspect Model(AM) [7, 6] which is similar to ap-plying active learning for parameter estimation in Bayesian networks [17]. It uses the entropy of the model as the loss function. However, it does not directly minimize the entropy loss function, because the current model may be far from the true model and relying only on the current model can become misleading. To overcome this problem, that work proposes to use a Bayesian network to take into account the reliability of the current model. This Bayesian approach is, however, complex and intractable for real applications (de-mands excessive execution time). Karimi et. al. [9] applied the simple most popular item selection to AM. The results show that it competes in accuracy with the Bayesian ap-proach while its execution time is in the order of magnitude faster than the Bayesian method.

Karimi et. al [10] developed a non-myopic active learning which capitalizes explicitly on the update procedure of MF model. First, this method queries items that updating the new user features with the provided rating will change the features as much as possible. Its goal is to explore the latent space to get closer to the optimal features. Then, it exploits the learned features and slightly adjusts them. Karimi et. al [11] by being inspired from existing optimal active learn-ing for the regression task, exploits the characteristics of matrix factorization and develops a method which approxi-mates the optimal solution for recommender systems.
All aforementioned methods assume that new users are always able to provide ratings to the queried items. Some methods relax this assumption and develop algorithms for the realistic scenario in which new users might not rate the queried item. [18, 4] leverage a decision tree to address this issue. But training the decision tree is costly in terms of time and memory specially when the size of the dataset is large.
Matrix Factorization (MF) is the task of approximating the true, unobserved ratings-matrix R by  X  R : R | U | X | I | maps both users and items to a latent space of dimension-ality k . In this space, user-item interactions are modeled as inner products. In the latent space, each item i is repre-sented with a vector h i  X  R k . The elements of h i indicate the importance of factors in rating item i by users. Some factors might have higher effect and vice versa. In the same way, each user u is represented with a vector w u  X  R k in the latent space. For a given user the element of w u measure the influence of the factors on user preferences. Different appli-cations of MF differ in the constraints that are sometimes imposed on the factorization. The most common form of MF is finding a low-rank approximation (unconstrained fac-torization) to a fully observed data matrix minimizing the sum-squared difference to it.

The resulting dot product, h T i w u , captures the interaction between user u and item i . However, the full rating value is not just explained by this interaction and the user and item bias should also be taken into account. It is because part of the rating values is due to effects associated with either users or items,i.e biases, independent of any interactions.
By considering the user and item bias, the predicted rating is computed as follows [14]: in which  X  is the global average, b i is the item bias and b u is the user bias. The major challenge is computing the mapping of each item and user to factor vectors h i ,w u  X  R The mapping is done by minimizing the following squared error [14]:
Opt ( S,W,H ) = X in witch  X  is the regularization factor, and S is the set of the ( u,i ) pairs for which r ui is known, i.e the training set ( S ).

When a new user enters the recommender system, the prediction model should be updated to learn the new user latent features. As there are already a lot of users in the recommender system, training the whole of the model from scratch needs a lot of time. Therefore, we switch to online updating and develop the active learning algorithm based on that. Online updating means after a first training with all users, further retraining is only done for new users. For the online updating, we use the method introduced in [16]. In this method after getting a new rating from the new user, the user X  X  latent features are initialized to a random setting and then are learned using all ratings of the new user.
There is a trade-off between the information-theoretic value of a new rating and the likelihood of a user being able to provide a rating. A comprehensive method should take both criteria into account. However, in this paper we stick with the second criterion and leave the first one as the future work. Therefore, the aim of the proposed active learning is to choose a query which is likely to be answered by the new user. As the process of active learning starts without any rating from the new user and ends up just with a few queries (e.g 10 queries), relying solely on the new user X  X  an-swers does not provide enough information to find suitable queries specially when the number of items is large. An ap-propriate solution to address this problem is to link the new user to the training users and exploit available information from them. In this paper we use the characteristics of matrix factorization, as the prediction model of the recommender system, to make such connection.

When the training of the matrix factorization is done users and items are mapped into the latent space. Users (or items) with similar rating behaviors are mapped into the same re-gion. We exploit this characteristic of matrix factorization to find similar users to the new user. Then the item which is most popular among the similar users is selected for the next query. Hopefully, the new user is able to provide a rat-ing for an item which has already been rated by users with similar rating behavior. In this way, the drawback of the global most popular, which asks static queries regardless of the answers of the new user, is fixed while the new user is connected to the training users to exploit their information. The number of the similar users k is a hyper parameter. It should not be too large because it affects the scalability of this method in real time. Algorithm 1 describes the pro-posed active learning.
 Algorithm 1 Proposed Active Learning 1: loop { repeats until N queries } 2: find k-similar users 3: find most popular item among the k-similar users 4: ask the query 5: if user provides a rating then 6: update the new user features according to [16] 7: end if 8: end loop
The accuracy of the proposed method heavily depends on how good the similar users are found. If the computed similar users are accurate, then approximating the rating behavior of the new user using the similar users is also ac-curate. Otherwise the performance is affected. In order to find similar users cosine similarity is used which is reasonable because in matrix factorization the ratings are predicted by the inner product of user and item features.
In this section, we examine experimentally the perfor-mance of the proposed method.
The main challenge in applying active learning for rec-ommender systems is that users are not willing to answer many queries in order to rate the queried items. For this reason, we report the performance of all examined meth-ods in terms of prediction error (RMSE) versus the number of queried items, which is simply denoted as the number of queries . For the new user i , the RMSE is computed as follows: where M u is the set of the test items of user u ,  X  r the predicted rating (by MF) of user u for item i , and r is the true (actual) rating. Thus, we examine the problem of selecting at each step, the item for which each new user u will be queried to provide a rating. The item has to be selected in order to minimize the RMSE based on the MF model.

Non-myopic active learning [10] and most popular item selection,i.e item which has received most ratings from train-ing users, are used as the baseline. We use 50 percent of the Netflix dataset in our experiments. The dataset was ran-domly split into training and test sets, containing 70% and 30% respectively. Each test user is considered as a new user. 30% of the ratings of each test user is separated to compute the error (test data) and the queries are selected from the remaining items (pool data). In our experiment, 10 queries are asked from each new user.
Figure 1 illustrates the comparison between the proposed method, non-myopic active learning [10], and most popular selection in terms of RMSE as a function of the number of queried items.
 Figure 1: RMSE results of the proposed active learning, non-myopic and most popular versus the number of queries
In the first queries, the most popular method competes with the proposed method. This happens because during the first queries, a little knowledge about the rating behavior of the new user has been revealed. Therefore, it is difficult to find real similar users. But as more ratings are provided by the new user, the similar users become closer to the real similar users which consequently increases the probability that the new user provides an answer to the queried item. Another interesting observation of figure 1 is that the non-myopic method does not work at all. This was expected to happen because this method only aims to choose a query which reduces the test error and supposes that the new user always is able to provide a rating to the queried item. How-ever, in this paper we have relaxed this assumption, meaning that the queried item might not get a ratings. Obviously, this assumption has a significant effect on the performance of active learning methods.
 Table 1: The average number of ratings received from the new user after 10 queries Proposed 2.6468 Most Pop 2.6374 Non-myopic 0.0007
The performance of the active learning methods depends on the number of provided ratings by the new user. The more the ratings, the better the performance. Table 1 shows the average number ratings provided by a new user in all methods. The proposed method receives more ratings com-pared to most popular while the non-myopic method receives almost no ratings.
In this paper we proposed a new active learning method for the new user problem in recommender systems. It im-proves the most popular selection strategy using the charac-teristics of matrix factorization. First it finds similar users to the new user in the latent space and then selects item which is most popular among the similar users . Hopefully, the new user is able to provide a rating for an item which has already been rated by users with similar rating behavior. In this way, the drawback of the global most popular, which asks static queries regardless of the answers of the new user, is fixed while the new user is connected to the training users to exploit their information.

As the future work, we plan develop a criterion for infor-mative queries and then combine it with the proposed active learning in the way that the trade-off between both criteria is met.
This work is co-funded by the European Regional Devel-opment Fund project REMIX under the grant agreement no. 80115106. [1] G. Adomavicius and A. Tuzhilin. Toward the next [2] C. Boutilier, R. S. Zemel, and B. Marlin. Active [3] R. Burke. Hybrid recommender systems. User [4] N. Golbandi, Y. Koren, and R. Lempel. Adaptive [5] A. S. Harpale and Y. Yang. Personalized active [6] T. Hofmann. Collaborative filtering via gaussian [7] T. Hofmann and J. Puzicha. Latent class models for [8] R. Jin and L. Si. A bayesian approach toward active [9] R. Karimi, C. Freudenthaler, A. Nanopoulos, and [10] R. Karimi, C. Freudenthaler, A. Nanopoulos, and [11] R. Karimi, C. Freudenthaler, A. Nanopoulos, and [12] A. Kohrs and B. Merialdo. Improving collaborative [13] J. A. Konstan, B. N. Miller, D. Maltz, J. L. Herlocker, [14] Y. Koren, R. Bell, and C. Volinsky. Matrix [15] A. M. Rashid, I. Albert, D. Cosley, S. K. Lam, S. M. [16] S. Rendle and L. Schmidt-Thieme. Online-updating [17] S. Tong and D. Koller. Active learning for parameter [18] K. Zhou, S.-H. Yang, and H. Zha. Functional matrix
