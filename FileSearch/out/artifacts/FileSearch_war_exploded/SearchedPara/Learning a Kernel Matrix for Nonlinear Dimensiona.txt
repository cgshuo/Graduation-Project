 Kilian Q. Weinberger kilianw@cis.upenn.edu Fei Sha feisha@cis.upenn.edu Lawrence K. Saul lsaul@cis.upenn.edu Kernel methods (Sch  X olkopf &amp; Smola, 2002) have proven to be extremely powerful in many areas of ma-chine learning. The so-called  X  X ernel trick X  is by now widely appreciated: a canonical algorithm (e.g., the linear perceptron, principal component analysis) is re-formulated in terms of Gram matrices, then general-ized to nonlinear problems by substituting a kernel function for the inner product. Well beyond this fa-miliar recipe, however, the field continues to develop as researchers devise novel types of kernels, exploit-ing prior knowledge in particular domains and insights from computational learning theory and convex op-timization. Indeed, much work revolves around the simple question:  X  X ow to choose the kernel? X  The an-swers are diverse, reflecting the tremendous variety of problems to which kernel methods have been applied. Kernels based on string matching (Lodhi et al., 2004) and weighted transducers (Cortes et al., 2003) have been proposed for problems in bioinformatics, text, and speech processing. Other specialized kernels have been constructed for problems in pattern recognition involving symmetries and invariances (Burges, 1999). Most recently, kernel matrices have been learned by semidefinite programming for large margin classifica-tion (Graepel, 2002; Lanckriet et al., 2004). In this paper, we revisit the problem of nonlinear dimensionality reduction and its solution by kernel principal component analysis (PCA) (Sch  X olkopf et al., 1998). Our specific interest lies in the application of kernel PCA to high dimensional data whose basic modes of variability are described by a low dimensional manifold. The goal of nonlinear dimensionality reduc-tion in these applications is to discover the underly-ing manifold (Tenenbaum et al., 2000; Roweis &amp; Saul, 2000). For problems of this nature, we show how to learn a kernel matrix whose implicit mapping into fea-ture space  X  X nfolds X  the manifold from which the data was sampled. The main optimization of our algorithm involves an instance of semidefinite programming, but unlike earlier work in learning kernel matrices (Grae-pel, 2002; Lanckriet et al., 2004), the setting here is completely unsupervised.
 The problem of manifold learning has recently at-tracted a great deal of attention (Tenenbaum et al., 2000; Roweis &amp; Saul, 2000; Belkin &amp; Niyogi, 2003; Saul &amp; Roweis, 2003), and a number of authors (Ben-gio et al., 2004; Ham et al., 2004) have developed connections between manifold learning algorithms and kernel PCA. In contrast to previous work, however, our paper does not serve to reinterpret pre-existing algorithms such as Isomap and locally linear embed-ding as instances of kernel PCA. Instead, we propose a novel optimization (based on semidefinite program-ming) that bridges the literature on kernel methods and manifold learning in a rather different way. The algorithm we describe can be viewed from several com-plementary perspectives. This paper focuses mainly on its interpretation as a kernel method, while a com-panion paper (Weinberger &amp; Saul, 2004) focuses on its application to the unsupervised learning of image manifolds. Sch  X olkopf, Smola, and M  X uller (1998) introduced ker-nel PCA as a nonlinear generalization of PCA (Jol-liffe, 1986). The generalization is obtained by mapping the original inputs into a higher (and possibly infi-nite) dimensional feature space F before extracting the principal components. In particular, consider inputs x , . . . , x N  X  R D and features  X  ( x 1 ) , . . . ,  X  ( x computed by some mapping  X  : R D  X  X  . Kernel PCA is based on the insight that the principal com-ponents in F can be computed for mappings  X  ( x ) that are only implicitly defined by specifying the inner product in feature space X  X hat is, the kernel function K ( x , y ) =  X  ( x )  X   X  ( y ).
 Kernel PCA can be used to obtain low dimensional representations of high dimensional inputs. For this, it suffices to compute the dominant eigenvectors of the kernel matrix K ij =  X  ( x i )  X   X  ( x j ). The kernel matrix can be expressed in terms of its eigenvalues  X   X  and eigenvectors v  X  as K = P  X   X   X  v  X  v T  X  . Assuming the eigenvalues are sorted from largest to smallest, the d -dimensional embedding that best preserves inner prod-ucts in feature space is obtained by mapping the input x  X  X  D to the vector y i = ( The main freedom in kernel PCA lies in choosing the kernel function K ( x , y ) or otherwise specifying the kernel matrix K ij . Some widely used kernels are the linear, polynomial and Gaussian kernels, given by: The linear kernel simply identifies the feature space with the input space. Implicitly, the polynomial kernel maps the inputs into a feature space of dimensional-ity O ( D p ), while the Gaussian kernel maps the inputs onto the surface of an infinite-dimensional sphere. The dominant eigenvalues of the kernel matrix K ij measure the variance along the principal components in feature space, provided that the features are cen-tered on the origin. The features can always be cen-tered by subtracting out their mean X  X amely, by the transformation  X  ( x i )  X   X  ( x i )  X  1 N P j  X  ( x j ). When the mapping  X  ( x ) is only implicitly specified by the kernel function, the  X  X entering X  transformation can be applied directly to the kernel matrix. In particular, re-computing the inner products K ij =  X  ( x i )  X   X  ( x j ) from the centered features gives: For a centered kernel matrix, the relative weight of the leading d eigenvalues, obtained by dividing their sum by the trace, measures the relative variance cap-tured by the leading d eigenvectors. When this ratio is nearly unity, the data can be viewed as inhabiting a d -dimensional subspace of the feature space, or equiv-alently, a d -dimensional manifold of the input space. The choice of the kernel plays an important role in ker-nel PCA, in that different kernels are bound to reveal (or conceal) different types of low dimensional struc-ture. In this section, we show how to learn a kernel matrix that reveals when high dimensional inputs lie on or near a low dimensional manifold. As in earlier work on support vector machines (SVMs) (Graepel, 2002; Lanckriet et al., 2004), we will cast the prob-lem of learning the kernel matrix as an instance of semidefinite programming. The similarity ends there, however, as the optimization criteria for nonlinear di-mensionality reduction differ substantially from the criteria for large margin classification. We describe the constraints on the optimization in section 3.1, the objective function in section 3.2, and the optimization itself in section 3.3. 3.1. Constraints Semipositive definiteness The kernel matrix K is constrained by three criteria. The first is semipositive definiteness, a condition re-quired to interpret the kernel matrix as storing the inner products of vectors in a Hilbert space. We thus constrain the optimization over K to the cone of sym-metric matrices with nonnegative eigenvalues. Though not a linear constraint, the cone of semipositive defi-nite matrices defines a convex domain for the overall optimization.
 Centering The second constraint is that the kernel matrix stores the inner products of features that are centered on the origin, or: As described in section 2, this condition enables us to interpret the eigenvalues of the kernel matrix as measures of variance along principal components in feature space. Eq. (5) can be expressed in terms of the kernel matrix as: 0 = X Note that this is a linear constraint on the elements of the kernel matrix, thus preserving the convexity of the domain of optimization.
 Isometry The final constraints on the kernel matrix reflect our goals for nonlinear dimensionality reduction. In partic-ular, we are interested in the setting where the inputs lie on or near a low dimensional manifold, and the goals of kernel PCA are to detect the dimensionality of this underlying manifold and discover its modes of variabil-ity. We imagine that this manifold is isometric to an open connected subset of Euclidean space (Tenenbaum et al., 2000; Donoho &amp; Grimes, 2003), and the prob-lem of learning the kernel matrix is to discover how the inner products between inputs transform under this mapping. An isometry 1 is a smooth invertible map-ping that looks locally like a rotation plus translation, thus preserving local (and hence geodesic) distances. Thus, in our application of kernel PCA to manifold learning, the final constraints we impose on the kernel matrix are to restrict the (implicitly defined) mappings between inputs and features from fully general nonlin-ear transformations to the special class of isometries. How is this done? We begin by extending the no-tion of isometry to discretely sampled manifolds, in particular to sets of inputs { x 1 , . . . , x N } and fea-tures {  X  ( x 1 ) , . . . ,  X  ( x N ) } in one-to-one correspon-dence. Let the N  X  N binary matrix  X  indicate a neigh-borhood relation on both sets, such that we regard x j as a neighbor of x i if and only if  X  ij =1 (and similarly, for  X  ( x j ) and  X  ( x i )). We will say that the inputs x i and features  X  ( x i ) are locally isometric under the neighborhood relation  X  if for every point x i , there ex-ists a rotation and translation that maps x i and its neighbors precisely onto  X  ( x i ) and its neighbors. The above definition translates naturally into various sets of linear constraints on the elements of the ker-nel matrix K ij . Note that the local isometry between neighborhoods will exist if and only if the distances and angles between points and their neighbors are pre-served. Thus, whenever both x j and x k are neighbors of x i (that is,  X  ij  X  ik = 1), for local isometry we must have that: (  X  ( x i )  X   X  ( x j ))  X  (  X  ( x i )  X   X  ( x k )) = ( x Eq. (7) is sufficient for local isometry because the tri-angle formed by any point and its neighbors is deter-mined up to rotation and translation by specifying the lengths of two sides and the angle between them. In fact, such a triangle is similarly determined by speci-fying the lengths of all its sides. Thus, we can also say that the inputs and features are locally isometric un-der  X  if whenever x i and x j are themselves neighbors (that is,  X  ij = 1) or are common neighbors of another input (that is, [  X  T  X  ] ij &gt; 0), we have: This is an equivalent characterization of local isome-try as eq. (7), but expressed only in terms of pairwise distances. Finally, we can express these constraints purely in terms of dot products. Let G ij = x i  X  x j de-note the Gram matrix of the inputs, and recall that the kernel matrix K ij =  X  ( x i )  X   X  ( x j ) represents the Gram matrix of the features. Then eq. (8) can be written as: Eq. (9) constrains how the inner products between nearby inputs are allowed to transform under a lo-cally isometric mapping. We impose these constraints to ensure that the mapping defined (implicitly) by the kernel matrix is an isometry. Note that these con-straints are also linear in the elements of the kernel matrix, thus preserving the convexity of the domain of optimization.
 The simplest choice for neighborhoods is to let  X  ij in-dicate whether input x j is one of the k nearest neigh-bors of input x i computed using Euclidean distance. In this case, eq. (9) specifies O ( N k 2 ) constraints that fix the distances between each point and its nearest neighbors, as well as the pairwise distances between nearest neighbors. Provided that k N , however, the kernel matrix is unlikely to be fully specified by these constraints since it contains O ( N 2 ) elements. 3.2. Objective function In the previous section, we showed how to restrict the kernel matrices so that the features  X  ( x i ) could be re-garded as images of a locally isometric mapping. The goal of nonlinear dimensionality reduction is to dis-cover the particular isometric mapping that  X  X nfolds X  the underlying manifold of inputs into a Euclidean space of its intrinsic dimensionality. This intrinsic dimensionality may be much lower than the extrin-sic dimensionality of the input space. To unfold the manifold, we need to construct an objective function over  X  X ocally isometric X  kernel matrices that favors this type of dimensionality reduction.
 To this end, imagine each input x i as a steel ball con-nected to its k nearest neighbors by rigid rods. (For simplicity, we assume that the graph formed this way is fully connected; if not, then each connected com-ponent of the graph should be analyzed separately.) The effect of the rigid rods is to  X  X ock X  the neighbor-hoods in place, fixing the distances and angles between nearest neighbors. The lattice of steel balls formed in this way can be viewed as a discretized version of the underlying manifold. Now imagine that we pull the steel balls as far apart as possible, recording their fi-nal positions by  X  ( x i ). The discretized manifold will remain connected X  X ue to the constraints imposed by the rigid rods X  X ut it will also flatten, increasing the variance captured by its leading principal components. (For a continuous analogy, imagine pulling on the ends of a string; a string with any slack in it occupies at least two dimensions, whereas a taut, fully extended string occupies just one.) We can formalize this intuition as an optimization over semipositive definite matrices. The constraints im-posed by the rigid rods are, in fact, precisely the con-straints imposed by eq. (9). An objective function that measures the pairwise distances between steel balls is given by: It is easy to see that this function is bounded above due to the constraints on distances between neighbors imposed by the rigid rods. Suppose the distance be-tween any two neighbors is bounded by some maximal distance  X  . Providing the graph is connected, then for any two points, there exists a path along the graph of distance at most N  X  , which (by the triangle in-equality) provides an upper bound on the Euclidean distance between the points that appears in eq. (10). This results in an upper bound on the objective func-tion of order O ( N 3  X  2 ).
 Eq. (10) can be expressed in terms of the elements of the kernel matrix by expanding the right hand side:
T = The last step in eq. (11) follows from the centering con-straint in eq. (6). Thus the objective function for the optimization is simply the trace of the kernel matrix. Maximizing the trace also corresponds to maximizing the variance in feature space. 3.3. Semidefinite embedding (SDE) The constraints and objective function from the pre-vious sections define an instance of semidefinite pro-gramming (SDP) (Vandenberghe &amp; Boyd, 1996). Specifically, the goal is to optimize a linear function of the elements in a semipositive definite matrix sub-ject to linear equality constraints. Collecting the con-straints and objective function, we have the following optimization:
Maximize: Tr( K ) subject to: 1. K 0. The optimization is convex and does not suffer from local optima. There are several general-purpose tool-boxes and polynomial-time solvers available for prob-lems in semidefinite programming. The results in this paper were obtained using the SeDuMi tool-box (Sturm, 1999) in MATLAB. Once the kernel ma-trix is computed, a nonlinear embedding can be ob-tained from its leading eigenvectors, as described in section 2. Because the kernel matrices in this approach are optimized by semidefinite programming, we will re-fer to this particular form of kernel PCA as Semidefi-nite Embedding (SDE). Experiments were performed on several data sets to evaluate the learning algorithm described in section 3. Though the SDE kernels were expressly optimized for problems in manifold learning, we also evaluated their performance for large margin classification. 4.1. Nonlinear dimensionality reduction We performed kernel PCA with linear, polynomial, Gaussian, and SDE kernels on data sets where we knew or suspected that the high dimensional inputs were sampled from a low dimensional manifold. Where nec-essary, kernel matrices were centered before computing principal components, as in eq. (4).
 In the first experiment, the inputs were sampled from a three dimensional  X  X wiss roll X , a data set com-monly used to evaluate algorithms in manifold learn-ing (Tenenbaum et al., 2000). Fig. 1 shows the orig-inal inputs (top left), the embedding discovered by SDE with k =4 nearest neighbors (top right), and the eigenvalue spectra from several different kernel matri-ces (bottom). The color coding of the embedding re-veals that the Swiss roll has been successfully unrav-eled. Note that the kernel matrix learned by SDE has two dominant eigenvalues, indicating the correct un-derlying dimensionality of the Swiss roll, whereas the eigenspectra of other kernel matrices fail to reveal this structure. In particular, the linear kernel matrix has three dominant eigenvalues, reflecting the extrinsic di-mensionality of the swiss roll, while the eigenspectra of the polynomial ( p = 4) and Gaussian (  X  = 1 . 45) kernel matrices 2 indicate that the variances of their features  X  ( x i ) are spread across a far greater number of dimensions than the original inputs x i . The second experiment was performed on a data set consisting of N =400 color images of a teapot viewed from different angles in the plane. With a resolution of 76  X  101 and three bytes of color information per pixel, the images were represented as points in a D = 23028 dimensional vector space. Though very high dimen-sional, the images in this data set are effectively pa-rameterized by a single degree of freedom X  X amely, the angle of rotation. The low dimensional embedding of these images by SDE and the eigenvalue spectra of dif-ferent kernel matrices are shown in Fig. 2. The kernel matrix learned by SDE (with k =4 nearest neighbors) concentrates the variance of the feature space in two dimensions and maps the images to a circle, a highly intuitive representation of the full 360 degrees of rota-tion. By contrast, the linear, polynomial ( p = 4), and Gaussian (  X  = 1541) kernel matrices have eigenvalue spectra that do not reflect the low intrinsic dimen-sionality of the data set.
 Why does kernel PCA with the Gaussian kernel per-form so differently on these data sets when its width parameter  X  reflects the same length scale as neighbor-hoods in SDE? Note that the Gaussian kernel com-putes a nearly zero inner product ( K ij  X  0) in fea-ture space for inputs x i and x j that do not belong to the same or closely overlapping neighborhoods. It fol-lows from these inner products that the feature vectors  X  ( x i ) and  X  ( x j ) must be nearly orthogonal. As a re-sult, the different patches of the manifold are mapped into orthogonal regions of the feature space: see Fig. 3. Thus, rather than unfolding the manifold, the Gaus-sian kernel leads to an embedding whose dimensional-ity is equal to the number of non-overlapping patches of length scale  X  . This explains the generally poor per-formance of the Gaussian kernel for manifold learning (as well as its generally good performance for large margin classification, discussed in section 4.2). Another experiment on the data set of teapot images was performed by restricting the angle of rotation to 180 degrees. The results are shown in Fig. 4. Interest-ingly, in this case, the eigenspectra of the linear, poly-nomial, and Gaussian kernel matrices are not qualita-tively different. By contrast, the SDE kernel matrix now has only one dominant eigenvalue, indicating that the variability for this subset of images is controlled by a single (non-cyclic) degree of freedom.
 As a final experiment, we compared the performance of the different kernels on a real-world data set described by an underlying manifold. The data set (Hull, 1994) consisted of N =953 grayscale images at 16  X  16 resolu-tion of handwritten twos and threes (in roughly equal proportion). In this data set, it is possible to find a rel-atively smooth  X  X orph X  between any pair of images, and a relatively small number of degrees of freedom describe the possible modes of variability (e.g. writ-ing styles for handwritten digits). Fig 5 shows the results. Note that the kernel matrix learned by SDE concentrates the variance in a significantly fewer num-ber of dimensions, suggesting it has constructed a more appropriate feature map for nonlinear dimensionality reduction.
 4.2. Large margin classification We also evaluated the use of SDE kernel matrices for large margin classification by SVMs. Several training and test sets for problems in binary classification were created from the USPS data set of handwritten dig-its (Hull, 1994). Each training and test set had 810 and 90 examples, respectively. For each experiment, the SDE kernel matrices were learned (using k = 4 nearest neighbors) on the combined training and test data sets, ignoring the target labels. The results were compared to those obtained from linear, polynomial ( p = 2), and Gaussian (  X  = 1) kernels. Table 1 shows that the SDE kernels performed quite poorly in this capacity, even worse than the linear kernels. Fig. 6 offers an explanation of this poor performance. The SDE kernel can only be expected to perform well for large margin classification if the decision bound-ary on the unfolded manifold is approximately linear. There is no a priori reason, however, to expect this type of linear separability. The example in Fig. 6 shows a particular binary labeling of inputs on the Swiss roll for which the decision boundary is much simpler in the input space than on the unfolded mani-fold. A similar effect seems to be occurring in the large margin classification of handwritten digits. Thus, the strength of SDE for nonlinear dimensionality reduction is generally a weakness for large margin classification. By contrast, the polynomial and Gaussian kernels lead to more powerful classifiers precisely because they map inputs to higher dimensional regions of feature space. SDE can be viewed as an unsupervised counterpart to the work of Graepel (2002) and Lanckriet et al (2004), who proposed learning kernel matrices by semidefinite programming for large margin classification. The ker-nel matrices learned by SDE differ from those usually employed in SVMs, in that they aim to map inputs into an (effectively) lower dimensional feature space. This explains both our positive results in nonlinear dimen-sionality reduction (section 4.1), as well as our negative results in large margin classification (section 4.2). SDE can also be viewed as an alternative to mani-fold learning algorithms such as Isomap (Tenenbaum et al., 2000), locally linear embedding (LLE) (Roweis &amp; Saul, 2000; Saul &amp; Roweis, 2003), hessian LLE (hLLE) (Donoho &amp; Grimes, 2003), and Laplacian eigenmaps (Belkin &amp; Niyogi, 2003). All these al-gorithms share a similar structure, creating a graph based on nearest neighbors, computing an N  X  N ma-trix from geometric properties of the inputs, and con-structing an embedding from the eigenvectors with the largest or smallest nonnegative eigenvalues. A more detailed discussion of differences between these algo-rithms is given in a companion paper (Weinberger &amp; Saul, 2004). Here, we comment mainly on their various interpretations as kernel methods (Ham et al., 2004). In general, these other methods give rise to matrices whose geometric properties as kernels are less robust or not as well understood. For example, unlike SDE, the similarity matrix constructed by Isomap from finite data sets can have negative eigenvalues. In some cases, moreover, these negative eigenvalues can be apprecia-ble in magnitude to the dominant positive ones: see Fig. 7. Unlike both SDE and Isomap, LLE and hLLE construct matrices whose bottom eigenvectors yield low dimensional embeddings; to interpret these matrices as kernels, their eigenvalues must be  X  X lipped X , either by inverting the matrix itself or by subtracting it from a large multiple of the identity matrix. Moreover, it does not appear that these eigenvalues can be used to estimate the intrinsic dimensionality of underlying manifolds (Saul &amp; Roweis, 2003). A kernel can be de-rived from the discrete Laplacian by noting its role in the heat diffusion equation, but the intuition gained from this analogy, in terms of diffusion times through a network, does not relate directly to the geometric properties of the kernel matrix. SDE stands apart from these methods in its explicit construction of a semipositive definite kernel matrix that preserves the geometric properties of the inputs up to local isometry and whose eigenvalues indicate the dimensionality of the underlying manifold.
 We are pursuing many directions in ongoing work. The first is to develop faster and potentially dis-tributed (Biswas &amp; Ye, 2003) methods for solving the instance of semidefinite programming in SDE and for out-of-sample extensions (Bengio et al., 2004). Thus far we have been using generic solvers with a relatively high time complexity, relying on toolboxes that do not exploit any special structure in our problem. We are also investigating many variations on the objective function and constraints in SDE X  X or example, to al-low some slack in the preservation of local distances and angles, or to learn embeddings onto spheres. Fi-nally, we are performing more extensive comparisons with other methods in nonlinear dimensionality reduc-tion. Not surprisingly, perhaps, all these directions re-flect a more general trend toward the convergence of research in kernel methods and manifold learning. The authors are grateful to S. Boyd and Y. Ye (Stan-ford) for useful discussions of semidefinite program-ming and to the anonymous reviewers for many helpful comments.
 Belkin, M., &amp; Niyogi, P. (2003). Laplacian eigenmaps for dimensionality reduction and data representa-tion. Neural Computation , 15(6) , 1373 X 1396. Bengio, Y., Paiement, J.-F., &amp; Vincent, P. (2004).
Out-of-sample extensions for LLE, Isomap, MDS, eigenmaps, and spectral clustering. Advances in
Neural Information Processing Systems 16 . Cam-bridge, MA: MIT Press.
 Biswas, P., &amp; Ye, Y. (2003). A distributed method for solving semideinite programs arising from ad hoc wireless sensor network localization. Stanford Uni-versity, Department of Electrical Engineering, work-ing paper.
 Burges, C. J. C. (1999). Geometry and invariance in kernel based methods. Advances in Kernel Methods X -Support Vector Learning . Cambridge, MA: MIT Press.
 Cortes, C., Haffner, P., &amp; Mohri, M. (2003). Rational kernels. Advances in Neural Information Processing Systems 15 (pp. 617 X 624). Cambridge, MA: MIT Press.
 Donoho, D. L., &amp; Grimes, C. E. (2003). Hessian eigenmaps: locally linear embedding techniques for high-dimensional data. Proceedings of the National Academy of Arts and Sciences , 100 , 5591 X 5596. Graepel, T. (2002). Kernel matrix completion by semidefinite programming. Proceedings of the Inter-national Conference on Artificial Neural Networks (pp. 694 X 699). Springer-Verlag.
 Ham, J., Lee, D. D., Mika, S., &amp; Sch  X olkopf, B. (2004).
A kernel view of the dimensionality reduction of manifolds. Proceedings of the Twenty First Interna-tional Conference on Machine Learning (ICML-04) . Banff, Canada.
 Hull, J. J. (1994). A database for handwritten text recognition research. IEEE Transaction on Pattern Analysis and Machine Intelligence , 16(5) , 550 X 554. Jolliffe, I. T. (1986). Principal component analysis . New York: Springer-Verlag.
 Lanckriet, G. R. G., Cristianini, N., Bartlett, P.,
Ghaoui, L. E., &amp; Jordan, M. I. (2004). Learning the kernel matrix with semidefinite programming. Journal of Machine Learning Research , 5 , 27 X 72. Lodhi, H., Saunders, C., Cristianini, N., &amp; Watkins,
C. (2004). String matching kernels for text classifi-cation. Journal of Machine Learning Research . in press.
 Roweis, S. T., &amp; Saul, L. K. (2000). Nonlinear di-mensionality reduction by locally linear embedding. Science , 290 , 2323 X 2326.
 Saul, L. K., &amp; Roweis, S. T. (2003). Think globally, fit locally: unsupervised learning of low dimensional manifolds. Journal of Machine Learning Research , 4 , 119 X 155.
 Sch  X olkopf, B., &amp; Smola, A. J. (2002). Learning with kernels: Support vector machines, regularization, optimization, and beyond . Cambridge, MA: MIT Press.
 Sch  X olkopf, B., Smola, A. J., &amp; M  X uller, K.-R. (1998).
Nonlinear component analysis as a kernel eigenvalue problem. Neural Computation , 10 , 1299 X 1319. Sturm, J. F. (1999). Using SeDuMi 1.02, a MATLAB toolbox for optimization overy symmetric cones. Op-timization Methods and Software , 11-12 , 625 X 653. Tenenbaum, J. B., de Silva, V., &amp; Langford, J. C. (2000). A global geometric framework for nonlinear dimensionality reduction. Science , 290 , 2319 X 2323. Vandenberghe, L., &amp; Boyd, S. P. (1996). Semidefinite programming. SIAM Review , 38(1) , 49 X 95.
 Weinberger, K. Q., &amp; Saul, L. K. (2004). Unsupervised learning of image manifolds by semidefinite pro-gramming. Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition (CVPR-
