 As far as interconnections among comput er systems grow rapidly, network se-curity is becoming a major challenge. An Intrusion Detection System ( IDS ) has been of use to monitor the network traffic thereby detect whether a sys-tem is being targeted by network attack s [14]. Even that IDSs have become a standard component in security infrastr uctures, they still have a number of sig-nificant drawbacks [14]. Indeed, the volume of the audit data which an IDS has to monitor is huge and grows rapidly. In addition, they flag out lower accuracy and higher false alarm rates. Moreover, current IDS do not provide support for historical data analysis and data summarization [13]. Supporting a historical network database in conjunction with an IDS raises two important technical challenges [8]: ( i ) since network traffic monitors generate data continuously and at high-rate, the database needs to support a high data insertion rate [8]; ( ii ) to facilitate the security analysis, the database must quickly answer historical queries [8,13].

Recently, Data Warehouses ( DW ) and On Line Analytical Processing ( OLAP ) technologies have gained a widespread a cceptance as a support for decision mak-ing [7]. In a DW architecture, data are manipulated through OLAP tools which offer visualization and navigation mechanisms of multidimensional data views, commonly called data cubes [7]. Along with the increasing complexity of networks, protecting a system against new and complex attacks, while keeping an automatic and adaptive framework, is a thriving issue. One answer to the problem could rely on the association of OLAP and data mining to allow elaborated analysis tasks exceeding the simple exploration of t he traffic data. DW and OLAP techniques can help the security officer in detecting a ttacks, monitoring current activities on the network, historical data analysis abo ut critical attacks in the past and gener-ating reports on trend analysis [13]. While, data mining is known for its ability to discover knowledge from audit data [14].

In this paper, we investigate another way of tackling the aforementioned prob-lems. Thus, we introduce a new IDS based on a DW perspective to enhance the accuracy of detection as well as to minimize the false alarm rates. To that end, our proposed system integrates the OLAP and data mining techniques to improve the performance and usability of an IDS. Firstly, we model the network traffic data as a multidimensional structure, called audit data cube . Secondly, we introduce a novel algorithm that provides a concise representation of multidimensional association rules mined from the audit data cube. Finally, a classifier is used to decide whether a new connection record is an attack or not u sing the set of multid imensional detec-tion rules. Through extensive carried ou t experiments on the standard intrusion detection DARPA dataset, we show the e ffectiveness of our proposal on the IDS performance aspects related to the false alarms as well as the detection rates.
The remaining of the paper is organized as follows. Section 2 sheds light on some representative related work applying the data mining techniques into the IDS. We introduce our new IDS based on the OLAP and data mining techniques in Section 3. We also relate the encouragi ng results of the carried out experiments in Section 4. Finally, Section 5 concludes and points out avenues of future work. Before data mining techniques are introduced into the intrusion detection field, the latter was heavily dependent on a manually maintained knowledge basis to reflect the ever-changing situations. However, this traditional way is difficult and expensive [14]. Otherwise, within data mining techniques, the rules ( or signa-tures ) of normal and abnormal activities can be created automatically. It is also possible to detect new types of attacks thr ough an incrementa l learning process. Additionally, data mining techniques provide the means to easily perform data summarization and visualization, that would be of great help to the security analyst in identifying areas of concern [14]. In the following, we survey the most prominent approaches dedicated to apply data mining techniques within the in-trusion detection field. -The MADAM-ID system [10] is considered as the fi rst research work that shows how data mining techniques can be used to construct IDS in a more systematic and automated manner. Firstly, all network traffic is abstracted to connection records. The latter are cla ssified into  X  X ormal X  and  X  X ntrusion X . -The ADAM system [2] is one of the best-known approaches that use associ-ation rules mining and classification algorithms to detect intrusions. The main moan that can be addressed to ADAM stands in its high dependency on training data for normal activities. However, the attack-free training data is difficult to afford, since there is no guarantee that we can prevent all attacks in real world networks. -The MINDS system [6] allows the development of scalable data mining al-gorithms and tools for detecting attacks and threats against computer systems. In fact, the system clusters audit data u sing a density-based local outliers algo-rithm to detect intrusions. In addition, it applies an association pattern analysis to summarize the network connections that are highly ranked as anomalous by the algorithm.
 On the one hand, although the data mining techniques could provide beneficial characteristics to IDS, there is a compelling need to develop methods and tools that can help in historical data analysis. On the other hand, within a typical network environment, many different audi t streams, collected from multiple cy-ber sensors, are shown to be useful for de tecting intrusions. Such data includes: ( i ) raw network traffic data; ( ii ) netflow data; ( iii ) system calls; and so on. Consequently, it is important to have an architecture that can integrate these heterogenous data sources into a unified framework. The research works of [13] focus on the OLAP techniques to repres ent network traffic data and relate it to the corresponding IDS alerts. In contrast, we propose to couple OLAP and data mining techniques for intrusion detection. The main idea behind our approach is to take advantage from OLAP as well as data mining techniques and to integrate them to the same analysis framework in order to improve the performance of an IDS. In this paper, we introduce a new IDS, called OMC-IDS ( Olap Mining and Classification-based IDS ), which affords a support for historical data anal-ysis and data summarization as well as the capacity to handle any kind of data for intrusion detection. The OMC-IDS enriches the OLAP techniques with data mining facilities to benefit from their cross capabilities they offer. Indeed, the audit data collected from different heterogenous resources goes through four stages. Firstly, the data is filtered to remove irrelevant information and a relational database is created containing the meaningful remaining data. This database facilities information extraction and data summarization based on individual attributes such as day, source, destination, etc. Secondly, an audit data cube is constructed using the available dimensions. Thirdly, the OMC-IDS system integrates OLAP technology and association rule mining in order to extract interesting information under different perspectives and levels of granularity. Finally, OMC-IDS uses a classifier to classify each connectio n record either as one of the attack types or normal.
In the following, we focus on the study of the three last steps of the OMC-IDS system. 3.1 Audit Data Cube: Construction and Manipulation The data feeding a data warehouse and OLAP systems is usually organized into multidimensional data views commonly called data cubes . The latter contain fact tables related to several dimension t ables. A fact table represents the focus of analysis and typically includes attributes called measures . These are usually numerical values that facilitate a quantitative evaluation of various aspects of interest. Dimensions include attributes that form hierarchies. As long as a hierar-chy is traversed from finer to coarser levels, measures are aggregated. Hierarchies can be included in a flat table forming the so-called STAR schema [7].
We propose to model the audit data as a multidimensional structure based on the STAR schema shown in Figure 1. The fact table  X  X onnections X  contains the attribute  X #Connection X  that measures the number of connections. The dimen-sion  X  X ime X  includes information of date and time when the network packet was captured. The dimension  X  X ervice X  contains the name and the class of service (or protocol) that was attacked.  X  X our ce Host X  describes the source of IP ad-dresses and port number. Likewise, the d imension  X  X estination Host X  describes the destination of IP address and port. Similarly, the dimension  X  X ttack X  con-tains both the name of the attack and its type. Furthermore, hierarchies would give an extra edge for analysis purpose, since they allow decision-making users to see quantified data at different levels of ab straction. Therefor e, security analysts must deal with hierarchies to exploit OLAP systems to their fullest capabilities. To do so, we define a concept hierarchy for each dimension in the audit data cube. For example,  X  X our  X  Day  X  Week  X  Month  X  Year X  is the hierar-chy on the  X  X ime X  dimension. The dimension  X  X ttack X  can be organized into the hierarchy  X  X ame  X  Class X , e.g. , X  Smurf  X  DoS  X . In addition, the hierar-chies can be pre-defined or generated by partitioning the dimension into ranges. For instance, the dimension  X  X uration X  could be partitioned into categories as  X  X ow X ,  X  X edium X  and  X  X igh X .

Using the STAR schema described in Figure 1, a corresponding audit data cube would be a six dimensional structure in which a cell contains aggregates of the operations measures. For instance, a cell could correspond to short duration attacks over the FTP service in the period 1 pm to 2 pm on Oct. 20th 2011. The audit data cube can be constructed by using the SQL aggregation functions ( e.g. , Count , Sum , Min , Max) . For example, the Count value refers to the number of connections. The audit data can be manipulated with great flexibility and viewed from different perspectives by the use of data cubes. Indeed, OLAP operations ( e.g. , Roll-up , Drill-down , Slice and Dice) offer analytical mod-eling capabilities that can be applied on the audit data. The Roll-up operation allows the going from specific to general by climbing up the aggregation hierar-chy. Otherwise, going from generalized data to more specific by stepping down the aggregation hierarchy is called Drill-down .The Slice and Dice opera-tions reduce the dimensionality of data by projecting the data on a subset of dimensions for selected va lues of other dimensions. 3.2 Multidimensional Association Rule Mining The association rule extraction is a technique of data mining to discover in-teresting correlation relationships among data. In fact, the formalization of the association rule mining problem was initially introduced by Agrawal et al. [1]. Given a set of records, the objective of mining association rules is to extract all rules of the form X  X  Y that satisfy a user-specified minimum support and min-imum confidence thresholds, i.e. , minSup 1 and minConf 2 . X is the antecedent of the rule and Y is its consequent.

In the recent years, the problem of minin g association rules from data cubes is knowing an increasing interest. The association rule mining can make OLAP more useful and easier to apply in the overall scheme of decision support systems. Further, OLAP is closely interlinked with association rules and shares with them the goal of finding patterns in the data. Indeed, data cube structures make good use of aggregated data, at the desired granularity levels, in the computation of the support and the confidence [3].

The multidimensional association rules is shown to be useful in increasing the detection accuracy and decrea sing the false positives rate [12]. Consequently, the IDS performances can be greatly improv ed whenever the association rules are mined from the audit data cube. However, the number of the mined rules can be quite large, which affects the speed of IDS and hampers its whole perfor-mance [6,12]. Some of these rules are redundant since they contain patterns that correspond to the subsets of other patterns.
 Example 1. Let R and R 1 tow multidimensional association rules. R : { Src Port =21  X  Dst IP = 192.63.11.11  X  service = telnet  X  Duration = Long } X  X  Attack = Smurf } and R 1 : { Src Port = 21  X  service = telnet } X  X  Attack = Smurf } . R and R 1 share similar features, i.e. , the patterns  X  X rc Port = 21 X  and  X  X ervice = telnet X . If the respective supports of these two patterns are equal, then the rule R 1 is redundant w.r.t R .
 To effectively mine the non-redundant multidimensional association rules from the audit data cube, we use the concept of closure [11] defined as follows: Definition 1. A pattern X is a closed pattern if there exists no pattern X such that: (i) X is a proper superset of X ; and (ii) every connection record in a network traffic containing X also contains X . The closure  X  of a pattern X is the maximal superset of X having the same support value as that of X . In this respect, we introduce the AMAR ( Audit Multidimensional Association Rules mining ) algorithm intended to mine a concise representation of multidi-mensional association rules from an audit data cube AC . The pseudo-code is shown by Algorithm 1.

Usually the user is interested in specified subsets of attributes in order to extract interesting relationships among them. So, (s)he needs to exclude the set of irrelevant attributes from the examination. To that end, AMAR allows the user to guide the analysis process by: ( i ) defining the set of dimensions D to be analyzed; ( ii ) choosing the hierarchies levels H D associated to the analy-sis dimensions; and ( iii ) setting the minSup and the minConf thresholds. As sketched by Algorithm 1, we proceed by a b ottom-up level wise search for fre-quent closed k -patterns, where the level k is the number of items in the set. We denote by C k the sets of k -patterns that are potentially closed, CC k the sets of closed k -patterns that are potentially frequent and FC k the sets of fre-quent closed k -patterns. During the initialization step (line 2), our algorithm captures the 1-candidates from the user defined analysis dimensions D over the audit data cube AC . These 1-candidates correspond to the attributes of D ,where each one complies with the chosen hierarchies H D .
 Within the first step , AMAR applies the closure concept ( cf. Definition 1). The second step (lines 9-12) of our algorithm derives the frequent closed pat-terns FC k from the closed candidate patterns CC k that have a support greater or equal to minSup .The third step (lines 13-19) allows the extraction of asso-ciation rules with a confidence greater or equal to minConf . The computation of support and confidence are performed respectively by the ComputeSupport and ComputeConfidence functions. Both functions directly pick up required precomputed aggregates from the data cube via MDX (MultiDimensional eX-pression) queries [3]. The fourth step (lines 20-24) uses the set of frequent closed k -patterns FC k to derive a new set of ( k +1)-candidates, denoted by C k +1 .One ( k +1)-candidate is the union of two k -patterns A and B from FC k that respects three conditions: ( i ) A and B must have k -1 common patterns; ( ii )allnonempty sub-patterns from A X  X  must be instances of inter-dimensional 3 patterns in D ; and ( iii ) all non empty sub-patterns from A X  X  must be frequent closed pat-terns.
 Example 2. Table 1 sketchs an example of an audit data cube with four di-mensions. The last row measures the number of connections using the aggre-gation function Count . The set of closed patterns, with their corresponding supports,isasfollows: { (  X  X op3 X : 0.2 ) , (  X 143 X :0.5 ) , (  X 63587 X :0.7 ) , (  X 6161 X : 0.2 ) , (  X  Neptune  X : 0.7 ) , (  X  X op3, 143, 63587, Satan  X : 0.1 ) , (  X  X op3, 110, 6161, Neptune  X : 0.08 ) , (  X 63587, 143 X : 0.3 ) , (  X 143, Satan  X : 0.2 ) , (  X  X map, 143 X : 0.4 ) , (  X 63587, Neptune  X : 0.6 ) , (  X  X map, 143, 6161, Satan  X : 0.1 ) , (  X  X map, 143, 63587, Neptune  X : 0.2 ) , (  X  X cpmux, 1, 63587, Neptune  X : 0.3 ) } .Weextractthesetof multidimensional association rules using the AMAR algorithm. Throughout our example, we set the minSup to 10% and the minConf to 50%. The algorithm generated 40 rules. Some of the extracted rules are illustrated in table 2. Intrusion detection can be considered as a classificat ion problem where each connection is identified either as one o f the attack types or normal based on some existing data [13]. Some of the association rules extracted by the AMAR algorithm are not useful since they do not imply an intrusion type in their con-sequent part. Therefore, we select the s et of rules whose consequents include an intrusion label. For instance, according to the set of rules illustrated by Table 2, the rules R 3 and R 4 are excluded to retain only the rules R 1 , R 2 , R 5 and R 6 . Then, we apply a decomposition axiom introduced in [4] ( cf. Definition 2) to obtain new rules of the form  X  X eature 1  X  feature 2  X  ...  X  feature n  X  intrusion X . Even though, the obtained rules are redundant, their generation is mandatory to guarantee a maximal cover of the necessary rules.
 Definition 2. Given an association rule R , a decomposition axiom is defined as follows: If R : X  X  Y then R 1 : X  X  Z is a derivable valid rule,  X  Z  X  Y . Example 3. Let us consider the rule R 2 : { Dst Port = 143  X  Src Port = 63587 }  X  X  Service = Imap  X  Attack = Neptune } . Using the decomposition axiom, R transformed in R 2 : { Dst Port = 143  X  Src Port = 63587 } X  X  Service = Imap } and R 2 : { Dst Port = 143  X  Src Port = 63587 } X  X  Attack = Neptune } .We retain the rule R 2 , since it includes an intrusion label in its consequent part. Whenever the rules imply the same intrusion, we retain the rule which poses less constraints and can match more audit records.
 Example 4. Let us consider two rules R : { Service = frag  X  Src IP = 209.30.71.165  X  Src port = 110  X  Dst port = 32 } X  X  Attack = Pod } and R 1 : { Service = frag, Dst port = 32 } X  X  Attack = Pod } .Bothrules R and R 1 imply the same intru-sion label ( i.e. ,  X  X ttack = Pod  X ). R 1 is considered to be more interesting than R , since it is needless to satisfy the features  X  X rc IP = 209.30.71.165 X  and  X  X rc port = 110 X  to highlight the attack  X  Pod  X . Hence, R 1 implies less constraints and can match more conn ection records than R .
 Once the detection rules ar e generated, the OMC-IDS system applies a clas-sifier [5] to classify the new connectio n records. Indeed, while having a new connection record C New , the detection of an intrusion consists in traversing the detection rules from up to down in the classifier. The first reached rule, whose antecedent X  X  part corresponds ( i.e. , included or equal) to the features of C New , will be of use. Thus, C New will obtain the conclusion of the rule which indicates an attack.
 Example 5. Let us consider a new connection record C New :  X  X ervice = frag, Src IP = 209.30.71.165, Dst port = 32 X . If we have in the classifier just the rule R ( c.f. Example 4 ) , we cannot classify C New since the attribute  X  X rc port = 110 X  does not permit the matching. However, the rule R 1 ( c.f. Example 4 ) , which has a smaller antecedent than R , can classify C New .
 The latter example shows that the AMAR algorithm provides the relevant set of detection rules of need for the classi fication step of OMC-IDS. In fact, the use of such set of rules is of benefit for classifying new connection records. To evaluate the effectiveness and efficiency of our proposed system OMC-IDS , we carried out extensive experiments on a PC equipped with a 3 GHz Pentium IV and 2 Go of main memory running under Linux Fedora Core 6. Indeed, we compare our approach with the pioneering approaches falling within the intrusion detection-based classification trend, namely, ADAM [2] and C4.5 4 [9]. During the carried out experiments, we use the DARPA1998 5 dataset. The latter consists of training data and test data. The training data are generated in the first seven weeks and testing data are derived in the rest two weeks. The attacks consisting of a total of 33 different attack types are divided into four different attack categories, namely DoS , R2L , U2R and Probing . To build the audit data cube, we use the seven weeks X  training data. To that end, we adopt the STAR schema showed in Figure 1. The audit data cube construction is done using the Analysis Services of SQL Server 2008.

Through these experiments, we put the focus on the assessment of the IDS performances in terms of detect ion and false alarms rates. 1. The Detection Rate (DR) is the number of correctly detected intrusions; 2. The False alarms Rate (FR) is the number of normal instances that were
Table 3 shows the DR of OMC-IDS with respect to the dimension X  X  variation for the four attack categories. The dimensions variation was established using the AMAR algorithm. From the results, we can remark that the dataset with six dimensions gives the best performances to detect the DoS class with 99.5% DR whereas the dataset with five dimensions gives the worst DR with 98.5%. More-over, the dataset with five dimensions generates the best performance to detect the Probe class with 95.3% DR. The 6-D dataset gives the best performance to detect the U2R class with 74.9% DR and 5-D generates the worst performance with only 71.5%. Finally, the DR of R2L class on the 6-D dataset is the highest one, i.e. , 86.6% while on the 5-D we have the worst performance with only 81.3% DR. As consequence, OMC-IDS allows the d etection of the attacks with best DR as far as the number of dimensions is the highest one, i.e. , six dimensions. Even though, the DR decreases according to the decrease of the dimension number, it is still high.

The main challenge of IDS is to increase the value of the DR, while decreasing the value of FR. Figure 2 presents the D R and the FR, obtained respectively by, OMC-IDS, ADAM and C4.5-based systems. It can be seen that our approach drastically outperforms the other ones. In fact, Figure 2 ( a ) shows that OMC-IDS achieves a total DR above 99%, 97%, 86% and 74%, respectively corresponding to the detection of four attack categories ( i.e. , DoS , Probe , R2L and U2R ). Compared to ADAM, we remark that OMC -IDS provides a higher successful DR. Indeed, we achieved an average DR of 89% compared to 71%, over the four attack categories. On one hand, the high value of DR is explained by the use of pruning techniques that reduce the search space. In fact, the closed patterns have been shown to present the best compactness rates [11]. Thus, the mecha-nism adopted by the AMAR algorithm is more effective than that adopted by ADAM which is hampered by the ineffectiveness of the redundant association rules. On the other hand, the use of multidimensional association rules helps in improving the performance of detecting a ttacks. For example, let us consider the multidimensional association rule  X  { Src Port = 21  X  Dst Port = 63  X  Src IP = 209.30.71.165  X  Dst IP = 180.66.11.11  X  Attack = Satan }  X . Obviously, the lat-ter rule has higher accuracy than a single dimensional association rule  X  { Dst IP = 180.66.11.11  X  Attack = Satan }  X . Consequently, we conclude that OMC-IDS is more efficient than ADAM due to the use of OLAP tools. In fact, the mining of multidimensional association rules from audit data cubes enhances the IDS process. Among the three tested systems, the C4.5-based IDS has the lowest DR for the four attack classes. For i nstance, whenever OMC-IDS and ADAM have 74% and 65% DR for the U2R attacks, respectively, C4.5-based system has 54% DR. This is due to the stealthy nature of those attacks. Moreover, it is shown that C4.5 can classify more accurately on smaller datasets [9]. The results illustrated by Figure 2 ( a ) are confirmed by Figure 2 ( b ). The latter presents the DR of eight different attacks, including Pod , Smurf , Ipsweep , Portsweep , Warezclient , Spay , Rootkit and Loadmodule .

In addition, Figure 2 ( c ) shows that the FR ranges from 0.2% to 1%. The lowest FR is achieved for DoS attacks. The highest FR of R2L attacks generated by OMC-IDS is equal to 0.2%, which is a very low value compared to ADAM and C4.5-based systems. Precisely, according to Figure 2 ( d ), it is clear that the improvement of OMC-IDS with respect to ADAM is of 2%, 1.2%, 2% and 3%, respectively corresponding to the FR of the attacks Smurf , Ipsweep , Loadmodule and Warezclient .
Within intrusion detection, the ROC ( Receiver Operating Characteristic )curve is often used to assess the performance of IDSs. Figure 3 compares the ROC curve of OMC-IDS vs. those of ADAM and C4.5-based systems. It can be seen that the DR grows quickly to its peak value within a small increase of FR. In addition, the result ensures that our system can achieve the highest DR with the lowest FR. Thus, we conclude that OMC-IDS is more effective than ADAM and C4.5-based systems due to the use of the OLAP techniques that helped in improving the performance of detecting attacks. On Line Analytical Processing ( OLAP ) provides tools to explore data cubes in order to extract interesting information. In this paper, we have shown the potential of coupling OLAP and data mining techniques in order to improve IDSs. To that end, we designed a new ar chitecture, called OMC-IDS, to model network traffic using a multidimensional data structure based on the STAR schema. Carried out experiments showed that OMC-IDS outperforms the pi-oneering approaches, i.e. , ADAM and C4.5-based systems. Future work will include exploring the alert correlations to expand the capabilities of our sys-tem. We can combine data from multiple sources to obtain a better analysis of the alert correlations.

