 The multi-tenant database system can amortize the cost of hardware, software and professional services to a large number of tenants and has become one sig-nificant trend to provide the database service. Therefore, it has attracted more and more attention from both industrial and academic communities.

The multi-tenant system usually predefines some tables which are called pre-defined tables . In predefined tables, the system provides some attributes which are called predefined attributes . In order to design the schema which fully sat-isfies tenants X  requirement, the system must allow tenants to configure their customized tables or add some new customi zed attributes in the predefined ta-bles . The tables newly configured are called customized tables , and the attributes configured both in predefined and customized tables are called customized at-tributes. Providing high customization is one of the important features in the multi-tenant database in order to be competitive in the service. Aulbach et al. [2] emphasized that a high-level customization is very attractive to tenants.
To our best knowledge, state-of-the-art approaches on the multi-tenant schema design can be broadly divided into three categories [4]. The first one is Indepen-dent Tables Shared Instances (ITSI). It maintains a physical schema for each customized schema. This method has poor scalability [1] since it needs to main-tain independent tables for each tenant. The second is Shared Tables Shared Instances (STSI). In this method differ ent customized tenants share only one table. This method has poor performance and consumes more space since it con-tains large numbers of NULLs. The third s implifies the service system and does not allow tenants to precisely configure their private schema in order to achieve high performance, low space and better scalability. To address these limitations, we devise hierarchical agglomerative clustering algorithm and multi-tenancy in-tegration algorithm to integrate schemas based on schema and instance informa-tion. Experimental results show that ou r method with full schema customization property achieves high performance and good scalability with low space. 2.1 Basic Idea The schema design for the multi-tenant database can be divided into three as-pects. (1) The predefined attributes in predefined tables are often the compulsory part. Thus we can just put them together, the new tables are very dense and performance can be guaranteed. In addition, the scalability is excellent. So the design for the predefined attributes in predefined tables is straightforward and easy. (2) For the customi zed attributes in predefined tables, if we put them into the predefined tables, the predefined tables can be extremely wide and sparse or even cannot hold all the customized attributes. The performance significantly degrades. If we maintain one extension table for the customized attributes, the number of extension tables can be really large. The scalability becomes poor. (3) For customized tables, simila r to the customized attributes in predefined tables, if we maintain one table for each of them, the scalability becomes the bottleneck. Current studies have no effective solutions for customized tables. To sum up, the first category is easy to solve, the second and the third are both the customized schemas and pose great challenges. In this paper we focus on how to redesign high-quality schemas for customized schemas. 2.2 Cluster Based Schema Design The number of customized ta bles is large, customized tables is changing, we need to optimize the schema periodically. W e propose the cluster based methods to integrate customized schemas. Different from traditional schema integration, the integrated schemas in the multi-tenant database reflect the physical data storage. Instead of directly integrating attribut es among all the customized tables we need to avoid the integrated attributes distribute too far. Thus, we first cluster similar customized tables and then integ rate the schemas in each cluster.
 Clustering Customized Tables: Salesforce is a well-known company which adopts the multi-tenancy architecture to provide the software service. In Sales-force, the data type are very expressi ve. Besides traditional data types boolean , date , double , int , it also defines textarea , email , phone , url , percent and some other concrete data types which can dir ectly reflect the content of the attributes especially for the various string fields. Similarly, in the Microsoft Dynamics sys-tem accurate data types are also defined. In the SAP Business Suit the data types are even more detailed. Then we can use the data type information to build the feature vector for each c ustomized table and then cluster. Definition 1 (Table Feature Vector). The dimension of the vector is the number of the data types supported in the system. The ith bit value in the vector is the number of the attributes with the ith data type in the customized table.
After we define the table feature vector for each customized table, we next utilize Cosine function to compute the similarity value between two customized tables. Considering that we will integrate the customized schemas in each clus-ter, we want to avoid the  X  X oisy X  customized schema and we do not know the number of clusters in advance. We adopt the hierarchical agglomerative cluster-ing algorithm. Initially, each table feature vector is one single cluster. Then if the similarity of the most similar pair of clusters is larger than the predefined threshold  X  tab we merge them into a new cluster. The clustering process stops when the similarity between the most similar clusters is smaller than  X  tab .Differ-ent threshold  X  tab mean different clustering quality and build different numbers of clusters. Among the classic methods, the Elbow Method is the usual way be-cause it is effective and obvious. In cu stomized, we adopt the same method to determine the threshold. We graph the percentage of variance of cluster number against  X  tab .Atsome  X  tab , the number of clusters increases sharply and give an angle, then the threshold  X  tab is set as  X  Elbow X .
 Multi-Tenancy Attribute Integration: Based on the clustering results, next we integrate the customized schemas into one integrated table for each cluster. Considering that the data type information in the multi-tenant applications is very expressive to represent the content of the attribute. Thus in the attribute in-tegration process, the attributes can onl y be integrated between the ones with the same data type. In order to further ensure the accuracy, we take the constraint and instance information into account. Li et al. [3] utilized many specification information to integrate attributes. Besides data type, among the constraint in-formation we refer to uniqueness, nullable and data length. Among the instance information, data cardinality information can reflect the content and is easily ob-tained by calling the aggregate function. Next we define the Attribute Feature Vector for each customized attribute to illustrate all the information above. Definition 2 (Attribute Feature Vector). In Attribute Feature Vector, the first bit A 0 represents uniqueness, unique is 1 otherwise 0. The second bit A 1 is represents nullable, 1 means this bit may have NULL value, or else 0. The third A 2 is the data length bit, and the fourth bit A 3 is the data cardinality. Then the similarity between attributes A i and A j is computed as follows:
In the equation above, if only one of the two attributes are unique, then two parts, we both use the ratio of the minor value to the max. For each cus-tomized table t we maintain the attribute matrix M t , each column corresponds to one attribute feature vector. The attribute integration algorithm firstly selects the customized table with most attributes as base cluster . Then it iteratively se-lects the table most similar to the base cluster. Given one customized table, for each attribute we integrate it to the attribute with the same data type. Further we must integrate it to the most similar integrated attribute above the threshold. Instead, we add a new column in the integrated table. Based on the typical tables and data type information in Salesforce we design our fully customized multi-tenant benchmar k. When generating customized tables we define following parameters. The number of total tenants is T num . The average number of customized ta bles for each tenant is Tab num . The average number of attributes for each customized table satisfies the normal distribution N(  X  ,  X  2 ), where  X  represents the average number of attributes and  X  is variance and set as 2. We use MySQL to conduct experiments on Windows machine. Figure 1(a) shows the number of clusters under different values of  X  tab .Inourexperiments, Tab num is set 10 and  X  is set 15. We see that when the number of tenants is 200 and 500, there is a sharp increase of the cluster number when  X  tab is altered from 0.8 to 0.9. Thus  X  tab =0.8 is the  X  X lbow X  point. When we use the cluster based method to integrate the schema, we set  X  tab =0.8. After determining the number of clusters, we integrate the customized schemas in each cluster. Figure 1(b) shows the average NULL percent of each integrated table. We find as  X  a increases the integrated tables b ecome more sparse. When  X  tab is above 0.6, more than half of the tables are NULLs. Thus we should choose appropriate  X  a . In this paper, we propose cluster based method and multi-tenancy attribute integration algorithm to integrate the customized schemas with tenant configu-ration, schema and instance information so as to enhance the integration quality. Experimental results show that our framework with fully customized property achieves high performance, good scalability and low space as well.

