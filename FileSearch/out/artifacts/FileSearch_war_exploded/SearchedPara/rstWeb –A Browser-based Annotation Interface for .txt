 Since its introduction by Mann &amp; Thompson ( 1988) Rhetorical Structure Theory has enjoyed continuing interest as a framework for the analysis of discourse relations, including the development of large scale corpora (especially the RST Di s-course Treebank; RSTDT, Carlson et al. 2003 ) and automatic parsers ( Joty et al. 2013 , Surdeanu et al. 2015 ). However while the developmen t of RST corpora and parsing has continued, there has been less progress in creating more up -to -date , collab o-rative and online interfaces for annotation , which would facilitate the development of new manually annotated data sets . Most work to date has used e i-ther the original RSTTool ( O X  X onnell 2000 ), a l o-cal desktop application written in Tcl/Tk, or its e x-tension, the ISI RST Annotation Tool by Daniel Marcu ( see: http://www.isi.edu/~marcu/ B oth tool s are not being actively developed at pr e-sent , and installing and running them across pla t-forms can be challenging . web interfaces have been developed which allow annotators to be trained and to work using only a browser, substantially facilitating the recruitment, curation and validation of data (e.g. Arborator, Gerdes 2013 for depe ndency syntax, or WebA nno, Yimam et al. 2013 , for a variety of tasks ). These server -based tools let project managers collect data centrally, without exchanging files with annotators, and track progress or log an notation processes a u-tomatically, while substantially reducing admi n-istration effort. The software presented here is meant to do the same for RST. Specifically it a l-lows:  X  Annotation using only a browser  X  Import and export of RSTTool X  X  .rs3 format  X  Import of plain text ( discourse unit per line)  X  Support for multiple annotated versions of  X  Enforcement of uniform annotation schemes  X  Undo/redo functionality  X  Logging of annotation steps  X  Administration for user assignments, projects  X  Single mode for adding/deleting spans, mult i-The following section describes the technical infr a-structure of rstWeb and the main requirements and workflows of the software . Section 3 briefly r e-ports on a project employing rstWeb as an annot a-tion interface and estimates the reduction of user actions compared to previous tools based on ann o-tation logs from RSTDT. S ection 4 discusses some applications to discourse anno tation outside RST. Section 5 ends with discussion for further work. rstWeb 1 is written in Python with a SQL ite back -end , and these are require d for the server running the software . In order to stay light -weight and r e-spon sive, JavaSc ript is used for the browser -based client , making the server -side demand almost no resources . jQuery and jsPlumb are used to rende r edges and animations. Following a static form -submit architecture ( cf. Arbora tor, Gerdes 2013), no running services are used : P ython scripts are exposed via a Web server (e.g. Apache ) , and cal l-ing them from a browser accesses the DB to seria l-iz e HTML for the client. For local machine use, a service script using the CherryPy framework can be used, requiring local users to instal l Python and CherryPy ( http://www.cherrypy.org/ ) . The software is platform independent , run ning on Mac, Linux and Windows platforms. Figure 1 gives a schematic overview of the system X  X  architecture. open and administrate projects ( X  X pen X  and  X  X dmin X  scripts), and to annotate in two modes described below:  X  segmentation  X  and  X  structuring  X  . face, where they can open any documents that have been assigned to them. Each user has their own copy of each assigned document, meaning that multiple users can annotate the same document in parallel for inter -annotator agreement experiments , th ough the tool does not support automatic calcul a-tion of agreement measures at present . Once a document has been opened, the user can move freely between two modes: segmentation of El e-mentary Discourse Units (EDUs) , and structuring the units into an RST tree ( see Figure 3 below) . objective was to avoid constant switching between modes: in RST Tool , segmenting units, linking, u n-linking, grouping them in spans or adding multin u-clear relations , all required changing the  X  X ode X  to do just that task; single clicks could then be used to carry out the action. This meant it was more co n-venient to complete multiple tasks of the same kind (e.g. spanning or unlinking ) consecutively, which required some planning and reduced flexibility, or alternatively that frequent switching needed to be done. For rstWeb, the attempt was made to allow all operations on any node to be available simult a-neously. This attempt has been successful for all tasks except for segmentation. An initial attempt to allow users to segment units within the RST di a-gram proved cumbersome, since reading EDUs in small boxes left -to -right is more difficult than rea d ing the running text in one big box. devel oped, the interface for which is shown in Fi g-ure 2 . This interface closely resembles RSTTool X  X  segmentation mode . Users can move between modes and choose to re -segment while structuring: if a unit in a tree is seg mented, the first portion of the divided segment retains the original function, and the second is cr e-ated without attachment. Merging two units causes them to retain the attachment and label of the first unit. The tool has client -side undo/redo functio n-al i ty , without submitting to the server , though u n-do/redo steps are logged as in the ISI tool. 2 of annotation work is done (see Figure 3) . rstWeb supports the same tree structures as other tools, i n-cluding crossing edges. However u nlike earlier tools, there is no need to switch between annot a-tion modes to connect or unlink nodes, add spans, or add multinuclear relations . These actions are handled by small buttons surrounding each node junction : X for unlinking, T for adding a span and fo r multi nuclear node s (see Figure 3) . User reports suggest that this facilitates annotation substantially . signments and import documents from plain text files (one EDU per line) or .rs3 files (RSTTool format), or export a n notations in .rs3 format. 3 Documents can be grouped into projects, which can be given a guidelines URL for users to consult. rstWeb has been employed in the annotation of the GUM corpus ( Zeldes 2016 ) 4 , a n open -access mult i-layer corpus including RST analyses , const ructed via classroom annotation and extended yearly . The corpus contains texts from 4 genres : travel guides, how -to guides, online news and interviews. In the most recent round of data collection, encompassing 29 documen ts, RST annotation was done with rs t-Web, instead of the previously used RSTTool. D ocuments were comparable in length ( X  58.31 EDUs) with those in the RST Discourse Treebank with  X  56.59 EDUs ( Carl son et al. 2003). This suggests that the system can be used successfully for text sizes on par with the benchmark resource for RST . The amount of errors based on instructor correction s using rstWeb compared to RSTTool was very similar (see Zeldes 2016).
 by a multi -mode workf low, switching between linking/ unlinking / grouping and creating multin u-clear clusters as in older tools , we can examine a n-notation step files from the RST Discourse Tre e-banks. Table 1 gives the necessary mode ch ange rates per node (including non -terminals), and the proportion of changes per annotation step in 10 random Wall Street Journal documents from RSTDT (including undo actions, but excluding segmentation operations).
 hard to compare directly , rstWeb logs from the GUM data suggest a similar rate of  X  0.43 action type changes per step, indicating that annotators generally use mode changes as needed in either environment , meaning the multimode interface should save a substantial amount of clicking . GUM , RST annotations for the same corpus with the same text types were created us ing RSTTool . Feedback from students who switched from wor k-ing with RSTTool to rstWeb , as well as from i n-structors (including a trained teaching assistant ), has been very positive . Data has successfully been imported into rstWeb from several existing RST -annotated sources, i n-cluding the RST Discourse Treebank (conve rted to .rs3) and the German Potsdam Commentary Co r-pus ( Stede &amp; Neumann 2014 ). Although the sof t-ware has been designed specifically for RST ann o-tation, it may be possible to use it for other types of an notation, especially those representing binary r e-lations between clauses. In particular, it is possible to disable the buttons generating spans and/or mu l-tinuclear nodes: this could be useful for other ( sha l low ) discourse parsing framework s or subsets of t hese , in which annotators would not be allowed to create multinuclear nodes or possibly any form of hierarchy .
 for explicit connectives (e.g. marking up a word such as  X  X ecause X ) and gaps inside clauses (claus e parts with no relations), as used e.g. in the Penn Discourse Treebank ( Prasad et al. 2008 ) , the inte r-face is not suitable, since each unit of annotation must be bro ken off as a segment. F or connective s, this could be a single word, which would be i m-practical to view in the RST style diagram . Ho w-ever for simple binary relation classification b e-tween clauses with similar schema s , the a d-vantages of the online, browser -based interface may make it a useful option (cf. Figure 4, using the Expansion.Conjunction and Expa n-sion.Restatement rela tions from PDTB; multin u-clear buttons have been disabled , but hierarchies are still enabled ) . rstWeb offer s a new, actively maintained tool for online, browser -based annotation of Rhetorical Structure Theory. The static script strategy of the backend means that server load when running rs t-Web is negli gible: it is not running at all unless a user has just submitted or requested data. Using CherryPy as a localhost container means that ser v-er code can be used offline or by single users who do not have access to a server  X  all code updates to the server ve rsion carry over to the local version. Using the browser as an interface means that users can work in a familiar environment, without i n-stalling software (at least for server based pr o-jects ) , that administrators do not need to exchange files with annotator s, and that the system is cross -platform compatible without resorting to heavier Java based frameworks .

In future work, some additional features could be added to the software. In particular, it is curren t-ly not possible to edit the inventory of RST rel a-t ions after the import of a document. Also, s upport for  X  schemas  X , i.e. added span annotations to mark a unit as a  X  title  X  etc., which was supported in pr e-vious tool s , is not currently implemented, but is planned for an upcoming version . Finally, built in facilities for measuring inter -annotator agreement are interesting possible addition to the software .
