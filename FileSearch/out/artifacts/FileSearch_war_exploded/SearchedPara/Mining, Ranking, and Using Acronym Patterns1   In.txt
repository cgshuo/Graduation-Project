 An acronym is a word formed from the parts of a full name and is used to stand for that name. For example, CPU canbeusedtostandfor X  X  entral P rocessing U nit X . Recognizing acronyms and their full names is useful in many document processing applications. Alternatively, acronyms are often used by users as terms within search queries. By being able to replace acronyms with their most appropriate expansions, a search engine can potentially deliver better search results.

Most of the previous work in this area concentrates on identifying acronym patterns. The drawbacks are either a lack of extensibility (such as [10,6,9,8]) or heavy reliance on the availability of a remarked training corpus (such as [12,2]). In contrast, our new acronym mining syst em clearly separates higher-level map-ping strategies from lower-level mapping rules and is available to achieve a high degree of flexibility. Users can easily add new rules or turn on/off existing ones.
A new and interesting related problem is the ability to rank and deploy acronym patterns for online search. The purpose of ranking method is to prop-erly appraise different patterns, by taking into account the popularity of acronym patterns in conjunction with standard confidence measures in their correctness. The ability to rank acronym patterns can be particularly attractive for online search applications, where the ambiguity of acronyms can cause problems for keyword-matching based IR systems. If the IR system can recognize acronyms and their most popular expansions, the retrieved results can be ranked more appropriately.
 Related work. Some algorithms discover acronym patterns by finding a best alignment from acronym letters to letters of words in the full name. Some of them use predefined rules [10,14,11,9], while others use machine learning meth-ods [2,12]. An interesting idea that aims to identify syntax-based relationships for word phrases is studied in [1,15]. These methods can be used to discover var-ious types of patterns such as acronyms and expansions or books and authors. Acrophile is an online acronym dictionary based on work in [6]. It uses a very simple method of acronym ranking, which is just based on counting acronym frequencies. We are not aware of any research which has addressed the problems of how to rank acronym patterns and how to use them for query extension. Our contributions. In this paper, we introduce a new acronym pattern mining framework called AcroMiner . AcroMiner uses an architecture built on mapping rules, but allows users to flexibly configure predefined rules or add new ones. Ex-periments show that AcroMiner is able to handle large data sets and can achieve promising results. Furthermore, we also address the novel problems of how to rank acronym patterns and extend acro nym queries using their expansions. The full name of an acronym is called its expansion . The way of coming up with the acronym from the expansion is called the mapping from the former to the latter. This mapping can be broken into lower-level mappings from individual letters of the acronym to positions in the expansion. In this paper, letters of acronyms and the corresponding positions of the expansions are underlined, in order to show how acronyms are mapped to expansions. An acronym pattern is the tuple of an acronym word (A) and its expansion (E), denoted as &lt; A, E &gt; .
An acronym may stand for multiple expansions. For example, WTO stands for  X  X  orld T rade O rganization X  as well as  X  X  orld T ourism O rganization X  and sometimes even  X  X  orld T oilet O rganization X . This property is called the ambi-guity of acronyms . On the other hand, an expansion is usually abbreviated by only one acronym. We call this property the unambiguity of expansions .
This paper discusses the following problems. The mining problem: identify-ing acronym patterns from documents. The ranking problem: recognizing the acronym patterns and then ordering them by a popularity measure. The acronym query extension problem: using ranked acronym pattern set to improve the ca-pability of an IR system to handle queries containing acronyms.

Given a set of documents D = { s 1 ,s 2 , ..., s n } ,the occurrence frequency ( tf )of an object (e.g. a word or an acronym pattern) p is the total number of occurrences of p in documents of D ,thatis, tf ( p )= n i =1 |{ o  X  s i | o = p }| .The document frequency ( df )of p is the number of documents containing p ,thatis, df ( p )= |{ s i | o  X  s i and o = p }| .

Letters contained in documents 1 are categorized as follows. Invisible letters : tab (ASCII 09), line feed (ASCII 10), carriage return (ASCII 13) and space (ASCII 32). Punctuation letters : exclamation mark ( ! ), question mark ( ? ), colon ( ; ), comma ( , ), period ( . ), slash ( / ), apostrophe ( X ), quotation marks( "" , @ , ~ , # , $ , % , ^ , \ , &amp; , * , + , = , | .

Letters that are not allowed to be contained in acronyms and expansions are marked as delimiters. Delimiters indicate the boundaries of potential expansions. AcroMiner consists of four components: document preprocessing, identification of acronyms, identification of acronym patterns and postprocessing. The four components operate sequentially: the outputs of earlier components are input into the later ones.
 Document Preprocessing. The input documents are reformatted in the first component. The preprocessing removes meta data, marks some punctuation and symbolic letters as delimiters and concat enates sentences from a document into a single long sequence.
 Identifying Acronym Words. The second component identifies acronyms from input sequences. A regular expression R is used to identify acronyms. Dur-ing the scan of word sequences, each word w is checked to see whether it satisfies R or not. The regular expression currently used in AcroMiner is:
In R , { num } stands for numerical letters; U means alphabetical letters written in uppercase ([ A -Z ]); { sep } stands for period ( . ); L stands for alphabetical letters letter  X  s  X ; ( ... ) is used to group subexpressions; [ ... ]isusedtowrapalternative subexpressions;  X  ?  X  means that the preceding subex pression may appear at most once;  X  +  X  means that the preceding subex pression appears at least once. R covers the format of the majority of acronyms, such as  X  X .S.A. X ,  X  X VMs X ,  X 3D X ,  X  X 2P X ,  X  X oD X ,  X  X T&amp;T X  and  X  X CP/IP X .

It could be the case that there are ac ronymswrittenindifferentwaysto that specified by R . For example, the acronym of  X  X  ool C ommand L anguage X  is written as Tcl rather than TCL 2 . In order to discover these acronyms, two writing formats are additionally considered. The first writing format is: a single word embedded in a pair of parentheses, following closely after a sequence of words. It is denoted as ...a sequence of words ( w ) ... . The other writing format is: a sequence of words embedded in a pa ir of parentheses, preceded closely by a word. It is denoted as ...w ( a sequence of words ) ... . According to [15], acronyms are usually written at the position w and the expansions are usually contained in the sequence of words next to it.
 Identifying Acronym Patterns. Once an acronym is found, the next task is to identify the expansion it stands for. We make the assumption that an acronym X  X  expansion lies close to the acronym . In other words, we only try to identify expansions in regions appearing W words before or after the acronym occurrence. We call thes e expansion regions context windows or CW s.
This problem can be divided into two levels. (a) The lower-level subproblem deals with how to map individual letters in the acronym to individual positions in the CW . Several letter-to-word mapping ru les are used as constraints to de-fine such mappings. Mapping rules are weighted with different mapping scores according to a confidence measure of correctness. (b) The higher-level subprob-lem deals with the strategy of mapping multiple letters to multiple positions. A backtracking algorithm is used to discover all letter-to-word mappings. The quality of the mapping from acronym to an expansion is measured by the sum of mapping scores of the applied rules. We next discuss these subproblems in detail. (a) Lower-level letter-to-word mapping rules. The letter-to-word mapping rules are categorized into three types: fixed , shiftable and neglectable .Thesetypes are considered in the higher-level mapping strategy and their meanings will be explained later. We now list the mapping rules. 1. A letter can be mapped to the 1st position of a non-neglectable word 3 ,if 2. A letter can be mapped to the 2nd or 3rd position of a non-neglectable word if 3. A letter can be mapped to the leading position of a neglectable word if it is 4. A letter can be mapped to a hyphen-connected word if it is the same as the 5. For words containing English prefixes 4 , it is common to map two letters from 6. Letters of acronyms can be mapped to sub-words of some compound words 5 . 7. A letter from the acronym can be mapped to the 4th, 5th or 6th position of 8.  X  X  X  can be mapped to any word initia lized with prefix  X  X x X . This is a fixed 9. The ending letter  X  S  X (or X  s  X ) of the acronym can be neglected if no proper 10. Numerical letters [ 0 -9 ] can be mapped to their English names, e.g. in &lt; 3D , 11. Some special letters can be mapped to English words. In the current imple-12. If the acronym contains numerical lette rs, its preceding letter (if there is any) (b) Higher-level mapping strategy. The higher-level mapping strategy tells how to map multiple letters to multiple positions. When more than one map-ping way is found from the acronym to a substring in the CW , the higher-level mapping strategy picks one expansion with the highest mapping score. We use a backtracking algorithm to explore all possible ways of mapping. During the backtracking, the types of mapping rules decide which mappings are not able to be changed and which ones are able to be shifted after they are created.

If a letter is mapped to some position by a fixed mapping rule, it cannot be changed to map to other positions. If a fixed mapping cannot be applied, backtracking is required until a previous mapping established by a shiftable mapping rule is found. If a letter is mapped to some position by a shiftable mapping rule, this mapping can be removed and the letter can be mapped to some other position to the right. The neglectable mapping rules allow a letter to be neglected.

Each mapping rule is assigned a mapping score. These mapping scores are used to measure the quality (the confidence of correctness) of an acronym-to-expansion mapping. The general principles of the score setting are: longer ex-pansions are preferred to shorter ones and regular mappings are preferred to less regular ones. Writing formats can also give hints about correct mappings, such as letters written in uppercase. Mapping scores can be set approximately and still achieve good performance, as lo ng as they reflect these principles. Given the acronym word and a CW , the mapping strategy works according to Algorithm 1. AcroMiner was designed to explicitly separate lower-level mapping rules (the mapping constraints) from higher-level mapping strategy. Line 2 of Algorithm 2 deals with choosing the applicable lower-level mapping rule for the specific letter and the rest of the code deals with the higher-level mapping strategy. If this line is treated as a black box, the higher-level mapping strategy is clearly separated from lower-level mapping rules.
 Acronym Pattern Postprocessing. A postprocessing step is necessary for better acronym pattern ranking, as well as better acronym query extension. This component merges acronym patterns containing duplicate expansions that have the same meaning, but are written in different expressions. Once a duplication is detected between two acronym patterns, the one having smaller document frequency is removed and its document frequency is added to the one retained. Acronym patterns are not all equally useful. Some patterns are not popular and used by few people. AcroMiner may mistakenly discover false patterns, where the acronyms do not stand for mapped expansions. It is not desirable to treat the less popular or false acronym patterns in an equal fashion to the more popular or correct ones. A method for ranking, based on scores for the acronym patterns, is described next.

The qualities of acronym patterns can be quantitatively measured by ranking scores . The ranking score is contro lled by three factors: (I) pattern popular-ity ,(II) gap between the acronym and its expansion for every occurrence of the pattern and (III) mapping score from the acronym to the expansion for every occurrence of the pattern.

Acronym pattern popularity is measured by document frequency. The gap between the acronym and the expansion is measured by the number of words in-between the acronym and the expansion. The larger the gap is, the weaker the relevance is between the acronym an d the expansion and thus there is less confidence to say the mapping is correct. The mapping score of an acronym pattern (more accurately, from the acronym to the expansion) is the sum of the scores of the mapping rules that were applied to map letters of the acronym to positions of the expansion.

The rating score ( rs ) of an occurrence of an acronym pattern is measured by combining the gap and the mapping score and is given by: There, o is an occurrence of the acronym pattern &lt; A, E &gt; . | A | is the length of the acronym. ms ( A [ i ]) is the score of the mapping rule applied to map the i -th letter of A to certain position of E . | A | i ms ( A [ i ]) is the mapping score from A to E . f is the maximum score among all the mapping rules. f  X | A | can be thought as the  X  X ighest achievable X  mapping score obtainable for A .
The ranking score is calculated by multiplying the average rating score among all occurrences of the acronym pattern with the popularity ( df ) of the pattern:
As we can see, an acronym pattern is ra nked by considering the  X  X itness X  of mapping the acronym word to the expansion and the frequency of seeing this pattern in the data set. Patterns with higher ranking scores should be placed at higher positions in the result list. We now discuss the following questions about using acronym patterns (more precisely, the expansions) for query extension. If a user query is submitted that contains a word not found in a dictionary, should the system consider it as an acronym? Should every acronym be extended by its expansions for the retrieval task? Should the system consider all of the acronym X  X  possible expansions, or only a subset of them?
Addressing these questions requires us to estimate the probability that a query term T is an acronym corresponding to an expansion E , i.e. P ( T is A, E ). Now P ( T is A, E )= P ( E | T is A )  X  P ( T is A ), where on the right hand side, the for-mer term is the probability that T stands for E , if T is definitely an acronym. The latter term is the probability that T is used as acronym. P ( E | T is A )can be computed by: Equation (3) says that the probability for acronym A to stand for E ,istheratio of the ranking score of acronym pattern &lt; A, E &gt; , to the sum of the ranking scores of all patterns having acronyms as A . P ( T is A ) can be computed by: where df ( T is A ) is the number of documents containing acronym pattern &lt; A, E &gt; and df ( T ) is the number of documents containing the word T .If T is used without any associated expansion (i.e. no expansion is discovered) in many doc-uments, it is likely that T is not an acronym and is instead just a normal English word.
 Finally, P ( T is A, E ) is derived by combining equations (3) and (4):
For a query term T , all expansions whose probabilities (as calculated by Equa-tion (5)) are larger than a predefined threshold, will be selected and submitted along with T for the IR system to process with the query. Our experiments have been designed to evaluate the accuracy of AcroMiner ,the efficiency of the ranking method and the usefulness of using acronym patterns to extend acronym queries.
 Experiments on AcroMiner . The V.E.R.A 6 acronym dictionary was used to evaluate the performance of AcroMiner . This data set contains 11201 computer and IT related acronyms and their intended expansions. AcroMiner discovered 9134 acronym patterns, of which 8763 ones were correct. The recall is 78.2% and the precision is 95.9%. Statistics for the misidentified 371 patterns are given in Ta-ble 1. The table shows that it is more difficult to identify acronyms with shorter lengths. The fewer letters are in the acronym, the easier it is to mismatch them.
The performance of the online acronym extraction system Acrophile 7 can be compared with AcroMiner on the same data set. It discovered 8570 acronym patterns, among which 8058 ones were correct. The recall is 72% and the pre-cision is 94%. This is not a precise comparison, because there is no means to adjust parameters, such as the window size W , for Acrophile. A large number of mistakes made by Acrophile were because it rigidly tried to map a letter to the 4th, 5th or 6th position in a word.
AcroMiner was run on two real-world data sets in order to generate com-prehensive acronym dictionaries for querying and other applications. The Web database is a collection of around 20 million crawled web pages. The Wiki data set 8 contains around 4 million Wikipedia articles written in XML. Only the plain text content was used for pattern mining and lower-level mapping rules 2 and 7 were switched off. It took roughly 12 hours to discover 563440 acronym patterns from the Web database and 2.5 hours to discover 118028 acronym pat-terns from the Wiki database. This time includes both the mining and ranking processes. On average, almost three new a cronym patterns were discovered from every 100 Wikipedia articles or web pages. For the Web database, each acronym was mapped to 4.2 expansions on average. Interestingly, the acronym  X  X CE X  was mapped to 493 expansions (not all of which may be valid).

It is difficult to evaluate the performance on these databases since no ground truth is available, but precision based on random sampling can be computed in the following way: 200 acronym patterns were randomly selected at a time and checked in Google for their correctness. This process was repeated for four times and the average precision measured in this way was 81%. If only the acronym patterns that ranked among the top five were selected, the precision was 91% and for only the top one, the precision was 98%.
 Experiments on Ranking Acronym Patterns. Table 2 lists the top ranked acronym patterns for (I) AcroMiner using the Web database, (II) AcroMiner using the Wiki database and (III) The Acrophile [6] system. The Acrophile online acronym dictionary was mined using military and government docu-ments. Many of its top ranked patterns are less well-known. For the ranking result for AcroMiner using the Web database, we compared with the ranks from AcronymFinder 9 . This web site is used for human a ssisted collection and ranking of acronym patterns using 5 levels, based on the popularity of use. The number next to each expansion indicates the ranking level given by that web site. As shown, most of the acronym patterns were ranked similarly by both AcroMiner and AcronymFinder, but in AcroMiner the ranking was done automatically, to a smaller level of granularity.
 Experiments on Acronym Query Extension. 161 acronym queries were picked out from a query set 10 used as the benchmark data to evaluate algorithms of query extension.

The normalized discounted cumulative gain scoring measure (NDCG), for each of the first-page search results from a Web search engine was used to compare the qualities of the query results before an d after being extended by acronym pat-terns. We use a special operation 11 to embed acronyms and expansions. The op-eration tells the search engine that phrases embedded should be treated equally and interchangeably but documents containing more of the phrases are not nec-essarily ranked higher than the ones conta ining fewer of the phrases. The results of using and not using this operation are compared. 45 acronym queries, after being extended to include their expansions, had improvements of their NDCG scores. 86 extended queries had no NDCG score change, while another 30 extensions led to decreases of NDCG scores. While these results indicate that acronym extension is indeed promising, it is hard to explain the 86 unchanged cases. The search engine we used considers many factors, which give alternative clues about how to properly rank results, regardless of any use of acronym patterns. It is therefore perhaps not surprising if the operation does little to affect the overall results. Also, the data sets we used for mining by AcroMiner to create its acronym dictionaries are still small compared to the entire Web. So this data limitation may cause AcroMiner to miss some popular acronym patterns. Acronym patterns are likely to provide more obvious improvements for other types of IR systems, where keyword-matching plays a more important role in overall ranking function. In this paper we have studied the problem of mining acronym patterns from un-structured documents. We have developed AcroMiner , a highly open and flexible mining system that can handle large-scale data sets with high accuracy. We also presented a study on how to rank acronym patterns and use them for acronym query extension, a ne w problem in the area.
 Acknowledgement. This work was partially supported by Microsoft Research Asia and National ICT Australia. We thanks Jiafeng Guo and Zhichao Zhou for their helpful suggestion.

