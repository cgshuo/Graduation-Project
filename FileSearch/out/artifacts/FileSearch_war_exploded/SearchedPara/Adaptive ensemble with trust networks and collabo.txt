 Haitao Zou  X  Zhiguo Gong  X  Nan Zhang  X  Qing Li  X  Yanghui Rao Abstract Several existing recommender algorithms combine collaborative filtering and social/trust networks together in order to overcome the problems caused by data scarcity and to produce more effective recommendations for users. In general, those methods fuse a user X  X  own taste and his trusted friends/users X  tastes using an ensemble model where a parameter is used to balance these two components. However, this parameter is often set as a constant and with no regard to users X  individual characteristics. Aiming at introducing personalization to solve the above problem, we propose a local topology-based ensemble model to adaptively combine a user X  X  own taste and his trusted friends/users X  tastes. We take users X  clustering coefficients in the social/trust networks as the indicator to measure the consistence of their selecting trusted friends/users and leverage this local topology-based parameter in the ensem-ble model. To predict the likelihood of users X  purchasing actions on items, we also combine item ratings and sentiment values which are reflected in the review contents as the input to the adaptive ensemble model. We conduct comprehensive experiments which demonstrate the superiority of our adaptive algorithms over the existing ones.
 Keywords Recommender  X  Collaborative filtering  X  Trust network  X  Ensemble  X  Cluster coefficient  X  Sentiment analysis 1 Introduction Recommender systems have been popularly used in online business. E-commerce compa-nies, such as Amazon and eBay, have greatly extended their businesses by automatically recommending items or products based on personalized information. Ever since the 1990s, collaborative filtering (CF), which makes use of historical purchases of users, has become one of the most popular techniques in recommender systems. User-based [ 23 , 27 ] and item-based [ 5 ] CF as the main approaches have been proposed during this period. User-based CF derives a list of recommended items by analyzing the similarity between users and predicting a user X  X  rating of an item based on similar users X  ratings of the same item. A main challenge of user-based CF is the heavy cost for a large amount of users [ 5 ]. Item-based CF techniques aim to generate recommendations by leveraging correlations between different items. Item-based top-n recommendation algorithm [ 5 ], for example, generates the top-n items with the highest (predicted) item similarity based on user X  X tem matrix which is constructed by users X  rating history. Unfortunately, neither user-nor item-based techniques are known to generate satisfactory results (in terms of predictive accuracy) for cold-start [ 26 ] users who are new to the systems and thus have limited or even no ratings on items. The key point to solve the problem is to find additional data sources which can be used to extend the users X  orig-inal ratings. Online social/trust networks, as a natural place for sharing users X  interests, are introduced as one of the important resources to improve the performance of traditional CF recommender algorithms. 1.1 Singular trust recommendations Users of Web sites such as Facebook, Flickr, and MySpace create networks of friends which allow users to share, find, and disseminate information. As a result, these Web sites have been exploited as the platforms for viral marketing of content, products, and political campaigns. of social/trust networks, for example, information propagation among trusted friends/users, to derive the target user X  X  taste in order to solve data sparsity problem caused by cold-start users in recommender systems. Usually, those algorithms treat a social/trust network as either a directed or an undirected graph, in which nodes denote the users, and weighted edges stand for the social/trust linkages among users. To learn the purchase interest of a given node (or user), top-k of other nodes (or trusted friends/users) are selected in terms of social distance, which can be computed using either random walk [ 12 , 21 ] or other kind of distance-based friends X /users X  tastes.

However, those approaches only make use of the features in social/trust networks but ignore users X  own tastes which have been used in CF recommender systems. In fact, most users have both their own tastes and the favors of their trusted friends/users. Thus, it is natural to combine users X  own tastes with the ones of their trusted friends/users to improve the overall performance of recommender systems. Work [ 10 , 13 , 17 , 28 ] is proposed for this sake. 1.2 Ensemble trust recommendations Konstas et al. [ 13 ] study the recommender problems based on a music dataset gathered from last.fm . Its data resource includes three components: user X  X rack, user X  X ser, and user X  X ag. User X  X rack gives the users X  ratings on music, user X  X ser is the relationships between users in the social network, and user X  X ag gives the users X  links to the tags of music. Through extensive experiments, the authors claim that the combination of user X  X rack and user X  X ser, or the combination of user X  X rack, user X  X ser, and user X  X ag, may not outperform the individual user X  X rack component in predicting users X  tastes. In other words, the performance of the combined model may not perform as well as we expect if we cannot properly tune the weights of those components. Ma et al. [ 17 ] propose a probabilistic analysis framework to fuse users X  tastes and their friends X  favors. In this work, the authors factorize the user X  X tem matrix into two f -dimensional matrices called user-specific latent matrix and item-specific latent matrix, respectively. For a given user, the authors aggregate his friends X  favors in the social network as his derived taste. Then, this user X  X  own taste and his derived taste are fused linearly as the input to the model. With a well-chosen parameter to balance the user X  X  taste and the derived taste from the social network, the performance of the combined model is much better than the performance of using individual component alone. There is also another work proposed by Jamali et al. [ 10 ], which linearly combines the two components together, but in the phase of rating computation. Though all those combined models can overcome cold-start problem and improve the performance in general, those solutions need to set a parameter to balance the user X  X  taste and the derived taste from the social/trust network. As a matter of fact, with our observation, the user X  X  taste and his derived taste from social networks show different impacts on recommendation from user to user. Similar observation is also found in [ 7 ]. In other words, the derived taste can only be regarded as the user X  X  taste if he really chooses his friends with common interest in items (products).

For online social networks, it is true that a user may tag another user as his friend for a wide variety of reasons, such as real-world friends, promotion of himself, and common interests on items. It is obvious that only the last one can be used to directly describe this user X  X  taste. In this respect, Ma et al. [ 19 ] propose another work in which the authors regard social network as the regularization for matrix factorization such that those friends, who have similar item ratings to the given user, influence more in this model. However, we argue that cold-start users may not have enough rated items for computing the user similarity which is required in the regularization constraint. In another work, Tang et al. [ 28 ] discern multifaceted trust relationships from the original trust relationships among users based on rated items of those users. In their work, the authors propose a novel approach by incorporating these relationships into rating prediction algorithms to reliably estimate their strengths. They extend the social/trust matrix representation to a tensor representation by adding an extra dimension facet and apply it to improve the performance of tasks, such as rating prediction, face-sensitive raking, and status theory. Nonetheless, when it comes to cold-start users, this approach may not have enough item ratings to model the corresponding multi-facet trust strength between these users and their friends, which leads to the failure to the rating prediction. 1.3 Outline of technical results In this paper, we turn to the local topology of a user in the social network. With our observa-tions and pre-experiments, if the friends of a given user are also friends with each other, the user X  X  taste is more often influenced by his friends.

We develop our algorithms under such systems which allow users to develop friends (or add users into their trust lists), rate items, write reviews on items, and rate reviews written by other users. Typical systems with such services include Amazon, 1 Epinions, 2 Flixster, 3 Ciao, 4 etc. We take users X  local topology in the social networks as the indicator of their interest consistence in developing friends, and we further use it to balance individual users X  own tastes and the derived ones from social networks.

Moreover, different users in the system have different number of item ratings and different size of friend list (the number of friends). We use the relative size of these two features to balance the impacts of users X  own tastes and their derived tastes in our approaches. Ratings placed by a user on items are abstract values which may not precisely reveal how much he likes the items. In order to reduce the bias caused by rating values, we turn to users X  reviews on items. We propose a sentiment analysis technique to extract users X  sentimental values on items from its corresponding reviews. Then, we combine ratings and sentimental values on the same item to improve the performance of recommender systems further.

We summarize our contributions as follows: 1. Taking user X  X ser similarity and matrix factorization algorithms as two typical represen-2. The trust value tagged by a user on another user in the trust networks may not effectively 3. In our approaches, we employ clustering coefficient as the metric to measure whether a 4. The rating placed on an item by a user may not precisely indicate how much he likes 5. We conduct several experiments on three different real-world datasets, and all the results
In the remainder of the paper, we first study the traditional ensemble methods in Sect. 2 ; then, we develop our adaptive ensemble model in Sect. 3 ; Sect. 4 presents the experimental results; we introduce some related work in Sect. 5 and conclude the work in Sect. 6 . 2 Static ensemble models Ensemble techniques are popularly used to combine two components in order to raise the effectiveness in predicting items. In this section, we introduce the principles and notations of traditional recommendation algorithms including CF-based approaches, singular trust-based approaches, and the static ensemble models. 2.1 Collaborative filtering algorithms For the purpose of this paper, we only introduce user-based algorithm and matrix factorization method, in particular, the one used in Ma et al. [ 17 ] for its excellent performance. We believe these two methods represent the state-of-the-art for CF techniques.
Through this paper, we use m and n to denote the number of users and the number of items (or products), and use U and V to denote the user set and item set, respectively. Further, we use an m  X  n matrix R to represent users X  ratings on items, where R i , k is user i  X  X  rating on item k , or is blank if user i has not rated item k . Collaborative filtering techniques aim to predict those blank entries in R .

User similarity can be computed using Pearson correlation coefficient as Eq. ( 1 ). Usually, these similarities are treated as the weight to predict the rating value using Eq. ( 2 ). item k . This algorithm is broadly used in many practical applications for its computational simplicity and satisfying performance.

Model-based approaches that employ statistics and machine learning techniques are pro-posed in many works. Matrix factorization method [ 17 , 24 , 31 ] stands for the state-of-the-art in performance among approaches in this respect. The idea of user X  X tem matrix factoriza-tion is to derive a high-quality f -dimensional feature user set and item set by analyzing the user X  X tem matrix R . Column vectors U i and V k represent the f -dimensional user-specific and item-specific latent feature vectors of user i and item k respectively. In Salakhutdinov et al. [ 24 ], the conditional distribution over the observed ratings is defined as follows: where N ( x |  X ,  X  2 ) is the probability density function of the Gaussian distribution with k and equal to 0 otherwise. The function g ( x ) = 1 /( 1 + exp (  X  x )) is the logistic function, which makes it possible to bind the range of U T i V k within the range of [0, 1]. The zero-mean spherical Gaussian priors are also placed on user and item feature vectors:
Hence, through a Bayesian inference, we have the following:
The above-mentioned methods focus on how to derive the users X  latent feature space or users X  characteristics purely based on the user X  X tem matrix. These traditional CF techniques are known to suffer several limitations; in particular, they generate unsatisfactory results for cold-start users. Therefore, many approaches [ 8  X  10 , 17 , 18 ] are proposed to overcome this problem by leveraging trust networks, which are commonly available in many E-commerce systems. In next subsection, we systematically illustrate how to recommend items based on the tastes of trusted users in the trust networks. 2.2 Social/trust computation In this paper, an online trust network can be interpreted as a directed (or an undirected) graph G = ( U , E ) , where the node set U ={ u i } m contains the trust relations between users. Let S ={ S i , j } be the m  X  m matrix of G ,which is also called social/trust matrix in this paper.

For a pair of users i and j ,let S i , j  X  X  0 , 1 ] denote the weight associated with an edge from i to j , which is given by i as how much i trusts j ,and S i , j = 0 means there is no links from i to j . Since in online trust network, i trusts j does not necessary mean j trusts i ,the social/trust matrix S may or may not be a symmetric matrix.

The intuition that introducing social/trust into recommender algorithms is that we always turn to our friends for recommendations since we trust our friends. We also believe that we will probably like the items that our trusted friends recommend. Even if the recommended items are not the types we like, we still have a high probability to be influenced by our trusted friends.
 to derive i  X  X  predictive rating on item k by aggregating weighted tastes of all those users as in ( 5 ): number of i  X  X  trusted users (size of T ( i ) ).
 In fact, there are several other considerations in trusted users X  selection in the literature. For example, Zou et al. [ 32 ] use personalized PageRank [ 12 , 21 ] to compute the trust degrees among users. With those methods, T ( i ) can be selected as i  X  X  top-k trusted users based on the social distances (other than direct trusted users).
 However, according to the experiments in Zou et al. [ 32 ], we have three observations: (1) Direct trusted users are often primarily selected by those defined social distances; (2) although non-directtrustedusersselectionbasedonthosemethodscouldcontributetotheimprovement about the accuracy of the computation about predicted ratings for cold-start users, such extension does not provide a significant improvement for rich-profile users. As a result, further extending the trust network of a rich-profile user might even hurt the recommendation quality, and (3) those methods are computationally expensive since they need to compute the distances from the target users to all the other users.

With the above observations in mind, in this paper, we only use direct trusted users in the trust networks to predict users X  tastes. In many situations, the trust value of S i , j from i to j to add other users into his trust list with values ranged in a given interval, users often assign similar values to their trusted users in the trust network.
In this paper, we suppose i and j have common tastes if they have more common trusted which means  X  T ( i ) contains i  X  X  trusted users and users who add i into their trust lists, and then, we define the similarity between i and j as in ( 6 ): where S i , j is still the trust value tagged by i on j . With our experiments, rating prediction using ( 5 ) can produce better result if we replace S i , j with S  X  i , j . Such conclusion is also part of this paper. 2.3 Recommendation with social/trust ensemble Recently, several works have been proposed to linearly combine social/trust networks and CF algorithms to provide more accurate predictive result. The principle is simply illustrated in Fig. 1 ,where  X  is determined by experiments to minimize the prediction error of R  X  i , k .In fact, there are some differences between combining memory-based CF with social/trust net-works and combining model-based CF with social/trust networks. Memory-based ensemble model-based ensemble methods take this combined result as an input to their model training. In this paper, we use two typical works to stand for the state-of-the-art in the ensemble area as a baseline and introduce our ensemble models.

Jamali et al. [ 10 ] linearly combine social/trust-predicted ratings with CF-predicted ratings to form each user X  X  final predictive ratings. It is computed as in ( 7 ): where SN i and CF i are the ranked item sets generated by social/trust techniques and CF ratings based on random walk techniques.

Equation ( 7 ) means that if item k can be only computed by social/trust-based algorithms or CF-based algorithms, the predicated rating R  X  i , k is equal to the value that the corresponding algorithms estimate. Otherwise, R  X  i , k is equal to the combination of these two algorithms. Noting that this linear combination treats social/trust-predicted ratings and CF-predicted ratings equally.

In order to define the model that may reflect the fact that every user has his/her own taste and at the same time, every user may be influenced by his/her friends he/she trusts, Ma et al. [ 17 ] model the conditional distribution over the observed rating as in ( 8 ): where  X  is the parameter used to balance the users X  favors and the trusted friends X  favors, which naturally fuses appropriate amount of real-world recommendation processes into the recommender systems. In Ma et al. [ 17 ],  X  is chosen from the interval [ 0 , 1 ] through extensive experiments to minimize mean absolute error (MAE) and root mean square error (RMSE). 2.4 Weakness of traditional ensemble models The traditional ensemble methods need to determine a globally optimal parameter by man-ually analyzing experimental results. Then, all users use the same value to fuse their own tastes with their trusted users X  tastes. However, we argue that the parameter used to balance the users X  and their trusted users X  tastes may differ from user to user with respect to the users X  motivations in selecting friends.

Figure 2 shows an example of selecting users with different motivations. In Fig. 2 a, user u has added three users u 1 , u 2 ,and u 3 into his trust list in three different domains, which are clothing, cars, and sports, respectively, for promoting himself in the network. In such situation, those friends have less impact on u  X  X  purchasing action since they are not selected by u with consistent interests. Figure 2 b, however, gives a different situation where u  X  X  trusted users have strong links among them, which indicates they are probably chosen by u with consistent interests. Therefore, u  X  X  friends in Fig. 2 b may influence u more than the ones in Fig. 2 a.

Furthermore, every user gains his experience from the process of purchasing. When a user purchases more items (suppose the size of his trust list is a constant), his confidence with the system (in particular, purchasing products or items) becomes stronger [ 25 ], which leads to the bias toward his own decisions other than considering his trusted users X  opinions. Meanwhile, more trusted users in the recommender system could lead to more accurate social-based prediction [ 7 ]. Therefore, it is necessary to find a method which could well balance the impacts between user X  X  own taste and his trusted users X  tastes. With some experiments, we find that the user X  X  local topology in the social network indicates his consistent interests in selecting friends and thus can be used to balance his own taste and the derived one from his friends. 3 Adaptive ensemble model The problem we study in this paper is how to generate high-quality recommendations by predicting the user X  X  rating values. We introduce the personalized parameter  X  , which is used to adjust the proportion between a user X  X  taste and his trusted users X  tastes based on the local trust graph and the user X  X tem rating matrix. 3.1 Personalized  X  based on local topology Now,weproposeouradaptivealgorithmsindetails.Webeginwiththefollowingpropositions: Proposition 3.1 If a user adds another user into his trust list based on his taste, the accuracy of the derived taste, as in ( 5 ) , is proportional to the number of his trusted users.
In the combined models as described in Fig. 1 , we need to balance the contributions from users X  own tastes and their derived tastes. With the same assumption as in Proposition 3.1 , we have the second proposition: Proposition 3.2 The ratio of the user X  X  own taste to the one derived from his trusted users in the trust network is related to the number of his item ratings and the size of his trust list (number of trusted users).

With these two propositions, when we estimate the predictive ratings for a user who has a large number of trusted users and a small number of item ratings, we would mainly focus on his trust network and vice versa. Then, we have the following: otherwise as in ( 3 ).

The principle behind Propositions 3.1 and 3.2 is that the users X  selections of their trusted users are based on their common interests on item ratings. However, as we discussed before, users can add users into his trust list with any other reasons. Then, we have the following: Proposition 3.3 The density of links (trust relationships) among a given user X  X  trust list indicates the consistency in selecting trusted users with his interest in purchasing items.
Since the structure of a social network with nodes being clustered around a series of high-degree  X  X ubs X , we employ a metric [ 30 ] which is commonly used in social network analysis to measure how clustered nodes in a network are. The clustering coefficient of a node i is computed as in ( 10 ): where  X  is a factor used to avoid numerator or denominator being zero, which is corresponding to the situation that user i  X  X  trusted users have no connections or i  X  X  trust list size is no more than 1. A user with a high clustering coefficient is surrounded by tightly interconnected trusted users, whereas a user with a low clustering coefficient might have trusted users from multiple clusters or lying on the edge of an existing cluster.

The final parameter function is defined as follows: where 0 &lt; X &lt; 1. We use this parameter to smooth the sensitivity of the local topology changing over the trust network. During the experiments, we set  X  = 0 . 01, which is small enough that can be ignored comparing with the value of 2 |{ e j , q  X  E | j , q  X  T ( i ) }| and |
T ( i ) | X  ( | T ( i ) | X  1 ) .

To show the effectiveness of  X ( i ) , we analyze its connection to the common item rated by rated by both i and his friends relative to the number of items rated by i alone. In Fig. 3 ,we plot this relative size of common items against  X ( i ) on Flixster dataset.

The result shows that relative size of common item percentage rises as  X ( i ) increases, especially when  X ( i ) is in the interval [ 0 , 0 . 2 ] . According to our experiments, 74 . 87 % of users X  personal  X  is in this interval, which means most of users X  personal  X  is high related to the ratio of common interests. This relative size of common items becomes stable when  X ( i ) is in the interval [ 0 . 25 , 0 . 75 ] .Thispartofuserstakes12 . 31 % in our dataset. Based on ( 11 ), the topologies of this part of users are densely connected, and the number of their friends tends to be greater than the number of their items. When  X ( i )&gt; 0 . 75, the curve rises significantly. With a close study, we find that most of users with such larger values of  X ( i ) are cold-start users who have rated very few items.

The techniques introduced in this paper are not only for model-based ensemble rec-ommender systems as in ( 8 ), but they are also applicable to instance-based ensem-ble recommender systems as in ( 7 ). During the experiments, we make the comparison between the original ensemble models and their corresponding local topology adaptive ones, respectively.

We improve ( 7 ) by introducing adaptive parameter  X ( i ) (computed as in ( 11 )), and get the correspondingadaptivealgorithmasin( 12 ),where R SN  X  i , k canbecomputedbyreplacingsim i , j with S i , j in ( 2 ). We call this method STR-Adaptive (social/trust-based Recommendations), and the original method is named STR.
We perform the similar process on ( 8 ) by replacing the constant parameter with our adaptive  X ( i ) (see ( 13 )), we call this method SEM-Adaptive (Static Ensemble Models), and the original method is named as SEM.
Equation ( 12 ) can be easily computed. For ( 13 ), the optimal solution for U and V will make the conditional probability achieve maximum on the observed ratings. In fact, equation ( 13 ) can be transformed into a log of the posterior distribution for the recommendations in order to simplify the computations. The detail techniques for solving U and V can be found in Ma et al. [ 17 ]. Because of the sparsity of matrices R and S , the computational complexity of is the number of nonzero entries in the matrix R ;  X  T o is the average number of friends that a is the number of dimensional features, and we set f = 10 in our experiments. Theoretically, the computational time of ( 14 ) is linear with respect to the number of observations in the user X  X tem matrix R [ 17 ].

Equations ( 12 )and( 13 ) describe the adaptive ensemble models which automatically tune the contributions between users X  own tastes and the ones derived from their trusted users in the trust networks. However, the taste of a user here is described by his ratings placed on items. Generally speaking, ratings given by a user are abstract values which are often hard to indicate how much this user likes the items precisely. In other words, people use rating scales differently, where some are more generous than the others. Fortunately, E-commerce systems often provide review facilities with rating functions together (e.g., Amazon and Epinions). To reduce the bias caused by algorithms using ratings alone, we extract sentimental values on items from users X  reviews to improve the prediction performance further. 3.2 Enhancement with sentiment analysis We now describe the second idea of our algorithms, the combination of item ratings, and review contents.

The motivation for this consideration is due to the fact that users can easily express their feelings to items in their reviews other than the abstract values of their ratings. Taking movie recommender systems as an example, user i rates  X  X he Life of PI X  7 as a brilliant movie, and user j rates it 9 with the same thought, according to the review contents they have written. LDA [ 2 , 22 ] is regarded as an advanced technique for sentiment analysis in recent years. ILDA [ 20 ], for example, is proposed to extract multiple aspects and their corresponding ratings for each kind of items. In this paper, we need to derive ratings for items other than the aspects of those items from those review texts. For this sake, we exploited another model, called Sentiment Latent Topic Model (SLTM) [ 22 ], to build the connections between words and sentiments and revise the statistical bias in users X  ratings on items by estimating the sentiment degrees on those items from their corresponding reviews.

Generally, an online review collection D ={ d 1 ,..., d | D | } consists of | D | documents with word tokens from a vocabulary W ={ w 1 ,...,w | W | } containing | W | distinct terms, and a set of ratings over a predefined list of sentiment labels which is specified by other users as how helpful they think the corresponding review is. The list of sentiment labels is denoted by L ={ l 1 ,..., l | L | } , and the common examples of such labels are  X  X xpert X ,  X  X ery helpful X ,  X  X elpful X ,  X  X omewhat helpful X ,  X  X o helpful X ,  X  X ff topic X , etc. In particular, areview d is a sequence of N d word tokens  X  w 1 ,...,w N d  X , and a set of ratings over | L | online users who have voted the k th sentiment label l k for review d . Similar to the sequence of word tokens, the set of ratings for review d can be represented by a sequence of M d sentiment labels  X  1 ,..., M d  X , where x is the x th sentiment label in the sequence and  X  L . Therefore, the number of times l k appearing in the sequence of M d sentiment labels is
Forourcircumstances,wetreatthelatenttopicscorrespondingtotheitemdescriptions,and the whole collection of online reviews is modeled by n latent topics. We use notations  X  d , X  , and  X  torepresentthereview-topic,topic-wordandtopic-sentimentdistributions,respectively. The hyper-parameters are denoted by  X ,  X  ,and  X  . In particular, the hyper-parameter  X  is a Dirichlet prior of  X  , which can be interpreted as the prior observation counts for the number of times the topic was sampled from review before any word is observed. The hyper-parameter  X  is a Dirichlet prior of  X  , which can be treated as the prior observation counts for the number of times words were sampled from topic before any actual word has been observed [ 15 ]. The hyper-parameter  X  is a Dirichlet prior of  X  , which can be interpreted as the prior observation counts for the number of sentiment ratings were sampled from topic before any sentiment rating is observed.

According to Rao et al. [ 22 ], the Sentiment Latent Topic Model (SLTM) can associate each topic with words and sentiments jointly and infer the distribution of future unlabeled reviews. For each review d , the sentiment labels are firstly generated as follows: 1. Choose  X  d  X  Dir ( X ) . 2. For each of the Md sentiment labels d , x :
After generating D reviews by the above process, the posterior distribution for  X  d is further used to generate the word tokens: 1. Choose a topic z d , x from  X  d . 2. Choose a word token w d , y from p (w d , y | z d , y , X ) .

Figure 4 is the graphical representation for SLTM, where it firstly generates the sentiment labels and then generates the word tokens conditionally.

When implementing SLTM, authors in [ 22 ] use the approximate inference method based on Gibb sampling [ 6 ] to estimate the relevant parameters, as it is intractable to perform an exact inference. For each sentiment label x , the conditional posterior distribution p ( z x = z | z  X  x , ;  X ,  X  ) is derived as ( 14 ): of instances of sentiment label that has been assigned to topic z , and the superscript  X  x means the number that does not include the current assignment of sentiment label x .
For each word token x , the conditional posterior distribution p ( z y = z | z  X  y ,w ;  X  d , X ) is derived as ( 15 ): where z y is the candidate topic that w y is assigned to, z  X  y refers to the topic assignments of all other word tokens, and c z ,w is the number of instances of word token w that has been assigned to topic z . The superscript  X  y means the number that does not include the current assignment of word token w y . Given the sampled topics, the posterior distribution for  X  d can be estimated using ( 16 ). The probability of sentiment label conditioned on topic z ,and the probability of word token w conditioned on topic z , can be estimated by ( 17 )and( 18 ), respectively.
Finally, the sentiments conditioned on unlabeled review is inferred as ( 19 ):
Therefore, the resultant samples of SLTM are preceded by two steps: It firstly achieves the sentiment ranking of each topic z by sampling the sentiment labels from the latent topics and then obtains the word ranking of the same topic z by sampling the word tokens. With those sampling results, future unlabeled reviews can be annotated the sentiment. All the parameters can be computed through the observable variables in the dataset. During the experiments, we use 30% of users X  reviews as training set to generate the relevant variables. After estimating each review X  X  sentiment degree, we normalize its value to the same range as R i , k and linearly combine these values with the corresponding users X  ratings as in ( 20 ): where  X  di , k is the review written by user i on item k .

Finally, Eqs. ( 1 )and( 2 ) are modified by replacing R with  X  R i , k ,and  X  R is computed using  X  R k . We find a globally optimal  X  by manually analyzing the experimental results.
We also replace R with  X  R in ( 12 )and( 13 ) correspondingly to get two new algorithms named STRM-Adaptive (social/trust-based recommendations mixed with sentiment degree) and SEMM-Adaptive (static ensemble models mixed with sentiment degree), respectively. These two sentiment-enhanced models are used to predict the users X  rating actions (hit rank of predictions). 4 Experimental analysis Inthissection,wedescribeourexperimentalsetupandcompareourproposedapproacheswith the state-of-the-art SEM [ 17 ]andSTR[ 10 ] which are two classic static ensemble models. The goals of our evaluations are addressing three questions: (1) How do our approaches perform comparing with SEM and STR? (2) What is the performance improvement on users with different number of ratings or friends? (3) Can our algorithms achieve good performance for cold-start situations?
We also choose a dynamic model which is proposed in Ma et al. [ 19 ] to compare with our algorithms. In [ 19 ], authors propose an Average-based Regularization model and an Individual-based Regularization model, which integrate social regularization to refine matrix factorization dynamically. According to the experimental results in Ma et al. [ 19 ], SR 2 pcc (Social Regularization model 2 with Pearson correlation coefficient similarity function) per-forms the best, we choose this algorithm to compare with our methods.

We perform the relevant algorithms on three datasets during the experiments. The first dataset was crawled from Epinions, a popular online product review Web site, during October 2009. The collected dataset contains 39,710 users, 612,452 trust pairs, 291,042 products, 1,195,858 product ratings, and 1,086,761 reviews. The second dataset is a snapshot of Flixster dataset provided by Jamali et al. [ 11 ], 5 which contains 111,252 users, 1,678,208 social friend pairs, 48,794 products, and 8,159,717 product ratings. The third dataset is a snapshot of Ciao, 6 which contains 2,069 users, 59,613 social friend pairs, 16,861 products, and 36,065 product ratings. Epinions allows users to rate products, write reviews about items, and add other users into their trust lists to create a trust network. Flixster and Ciao have the similar functions as Epinions, except Flixster utilizes Facebook/Google + to build its social friend network. Note that the range of the ratings rated on items in Epinions, Flixster, and Ciao are in the interval [ 0 , 5 ] .

The distribution of the number of trusted users/friends (marked as  X  X rust list size  X / X  X um-ber of friends X ) in these datasets is shown in Fig. 5 . We can see that users with small number of trusted users/friends take a large proportion in user distribution. Users with no more than 20 trusted users in Epinions take 91.93% comparing with the total number of users, and users with no more than 20 friends in Flixster and Ciao take 90.92 and 65.88%, respectively. During the experiments, we illustrate the details about this group of users and draw the performance curves over users with different number of trusted users/friends. 4.1 Algorithms implementation and evaluation Arecommendertechniqueshouldbemeasuredbytwokindsofperformances:(1)theaccuracy of predictive ratings; and (2) the accuracy of predictive actions (the order of the first hit in the entire recommended list for a user). To properly measure the accuracy of the recommendation results, we choose the Leave-One-Out technique which hides an item X  X  rating for each user and then predicts it based on the recommendation algorithms. In order to better simulate the performance of recommendation algorithms in practice, for each user, we hide and predict the last item in users X  rating list.

Mean absolute error (MAE) and standard deviation of MAE (SDM) are popularly used as the metrics to measure the accuracy of the predictive ratings [ 17 , 18 , 27 , 32 ]. We adopt these metrics for measuring the accuracy of predictive ratings. MAE is defined as in ( 21 ): SDMisdefinedasin( 22 ): where error i =| R  X  i , k  X  R i , k | . In general, a good recommender system should produce small values for both MAE and SDM.

The final output of the recommendation algorithms to an end user is not the raw predictive ratings, but the likelihood of items being rated by this user. The quality was measured by looking at the number of hits and their position within the top-k items that are recommended by a particular scheme. The number of hits is the number of items in the test set that are also present in the top-k recommended items returned for each user. We choose the Average Reciprocal Hit-Rank (ARHR) [ 5 ] to evaluate the accuracy of this objective.

Suppose h is the number of hits that occurred at positions p 1 ,..., p h within the top-k lists (i.e., 1  X  p i  X  k ); then, the ARHR is equal to the following:
That is, hits that occur earlier in the top-k lists are weighted higher than hits that occur later in the list [ 5 ].

Input parameter  X  In our proposed approaches, factor  X  is used to smooth the sensitivity of local topology changing in the social/trust network. Since  X ( i ) is the product of two parts which are all in the range of [0, 1], the value of  X ( i ) is relatively small. We use  X  to magnify this value. In Fig. 6 , we scale up the curves for 0  X   X   X  0 . 7 since the delicate change of MAE and ARHR happens within this range.

Figure 6 a shows the impact of  X  on MAE in Epinions dataset for SEM-Adaptive. We can see that the value of  X  influences the accuracy of predicted ratings significantly. As  X  increases, MAE decreases (prediction accuracy increases) at first, and then, MAE increases when  X  is over a threshold. Figure 6 b shows the impact of factor  X  on ARHR in Epinions dataset using SEM-Adaptive. Figure 6 shows that, when  X  is around 0.3, both MAE and ARHR achieve the best performance on Epinions dataset. Therefore, we set  X  = 0 . 3forthe rest of the experiments. In fact, similar results are also found when applying this algorithm to Flixster and Ciao datasets.

Input parameter  X  SEM needs an optimal  X  to balance user X  X  own tastes and their derived ones from the social/trust network. The impact of  X  in terms of MAE in Epinions, Flixster, and Ciao is shown in Fig. 7 . During the experiments, we set  X  = 0 . 3 on Epinions, set  X  = 0 . 4 on Flixster, and set  X  = 0 . 3 on Ciao since those values achieve the best performance respectively on the three datasets. We further set the dimension of features as 10 in matrix factorization of the models.

SR 2 pcc also needs a parameter to control how much the method should incorporate the information of the social/trust network; during the experiments, we set this parameter to 0 . 01 for Epinions, Flixster, and Ciao datasets since this value makes SR 2 pcc perform the best in terms of MAE. 4.2 Performance of predictive ratings To understand the effectiveness of these algorithms thoroughly, we group all the users based on the number of observed ratings (not including the hidden item) and then evaluate prediction accuracies of different user groups. The experimental results are shown in Tables 1 , 2 ,and 3 . During the experiments, we treat users whose item number is between 1 and 3 inclusive as the typical examples of cold-start users. The percentage contained in the brackets is the average size of test dataset in each bucket.

Tables 1 , 2 ,and 3 summarize the accuracy of the predictive ratings by the above-mentioned algorithms on Epinions, Flixster, and Ciao, respectively. We observe that the prediction generated by our proposed methods STR-Adaptive and SEM-Adaptive is more accurate than their non-adaptive version STR and SEM, respectively. The proposed approaches STR-Adaptive and SEM-Adaptive are consistently the best for all groups of users.

The  X  X verall X  columns in Tables 1 , 2 ,and 3 describe the overall precision of predictive ratings on Epinions, Flixster, and Ciao, respectively. We find that SR 2 pcc ,STR,andSEM have similar MAE and SDM on Epinions, Flixster, and Ciao. Among these recommendation methods, our adaptive ensemble methods STR-Adaptive and SEM-Adaptive consistently achieve better performance than their original ensemble partners on both MAE and SDM. Such phenomenon demonstrates that our interpretation on the formation of the ratings is realistic and reasonable, which is also corroborated by other experiments on Epinions and on Yahoo ! KDD Cup 2011 corpora (Ph.D. work of Luc-Aur X lien Gauthier with Patrick Gallinari and Benjamin Piwowarski from the LIP Paris 7 ). 4.3 Discussion about MAE and SDM When we study Tables 1 , 2 and 3 , we observe that both MAE and SDM decrease as users X  item numbers increase in general. This phenomenon shows that the more items users have rated, the more accurate the predictive ratings for them will be. When we considering cold-start users, the value of MAE and SDM is relatively big comparing with the range of rating values are in the interval [0, 5]. The reason is that, when computing the predicted ratings using ( 2 ), the average ratings for cold-start users is sketchy and inaccurate, which leads to the huge deviation from the real ratings.

From the comparison, we also find that our proposed STR-Adaptive and SEM-Adaptive perform better than the dynamic model SR 2 pcc . The reason for this phenomenon is probably due to the fact that SR 2 pcc requires to compute similarities between the user and his friends in social regularization, which can only be significant for non-cold-start users. 4.4 Performance of predictive actions MAE and SDM are used to measure the accuracy of the predicted rating values. Nonetheless, the final output of the recommender algorithms is an ordered list of items, which is more important than the accuracy of predictive ratings. Our proposed methods arrange the order of items and make items which are probably more preferable appear earlier.

Figures 8 and 9 showthetrendofARHRcomparisonbetweenthestaticrecommenderalgo-rithms and its corresponding adaptive ones with the ascending number of trusted users/friends in Epinions, Flixster, and Ciao. The curves for SR 2 pcc are very similar to the ones for SEM, which causes their curves are almost overlapped. For the clarity and specificity of the exper-iments, we only draw the diagrams about the comparison between STR, SEM, and their corresponding adaptive models.
We find that the accuracy of STR, SEM, and our adaptive approaches descend when a user has more trusted users/friends. In other words, it becomes more difficult to predict which item a user may rate in the next step when he has more trusted users/friends. On the contrast, it is easier to predict items for users with less rated items.

Figures 8 and 9 also show that our approaches STR-Adaptive and SEM-Adaptive perform betterthantheircorrespondingnon-adaptiveones.Thecurvesforourmethodsareconsistently over the other two correspondingly. In particular, in Fig. 8 a, the improvement of our STR-Adaptive approach becomes more significant when users have more trusted users/friends, while in Fig. 9 a, the improvement of our SEM-Adaptive approach is always significant for all types of users. Such phenomena indicate that the relation between a user X  X  trusted users helps the recommender system to generate a more qualified recommendation with utilizing social/trust network.
 Figures 10 and 11 show the trend of ARHR with the ascending number of items in Epinions, Flixster, and Ciao. We find that the accuracy of STR, SEM, and our approaches STR-Adaptive and SEM-Adaptive descend as a user has rated more items. In other words, it becomes more difficult to predict which item a user may rate in the next step when he rates more items. However, our adaptive approaches can consistently perform better than SEM and STR correspondingly.

Generally,ARHRdecreasingwhenuserspurchasingmoreitemsisacommonphenomenon for every recommendation algorithm. The reasons come twofolds. On one hand, when a user purchases more items, his confident with the recommender system becomes stronger which leads to his bias toward his own decision other than his friends X  opinions; on the other hand, when a user has more friends, their opinions tend to be distributed, which causes the dispersive recommendation results.

Figures 10 and 11 also reveal that our adaptive ensemble methods consistently achieve better performance than their original ensemble partners. In particular, in Figs. 10 band 11 b, the improvement of STR-Adaptive and SEM-Adaptive is very significant for users with less than 16 items, which indicate that our adaptive methods have the ability to overcome cold-start problem. 4.5 Discussions about dynamic models Since our Flixster and Ciao dataset do not contain review contents, we only conduct the experiments of sentiment enhanced models on Epinions dataset. Figure 12 shows the impact of  X  which is used to balance the contributions between  X  X atings X  and  X  X eviews X  when combining them in ( 20 ). It is clear from Fig. 12 that ARHR reaches its maximum value when  X  = 0 . 25. It is interesting to know that  X  X eviews X  alone (when  X  = 0) outperforms  X  X atings X  alone (when  X  = 1) in predicting users X  rating actions. Such phenomenon indicates that reviews may contain more information in developing the quality of recommendation.
Wefurtherstudytheperformancesofthesentimentenhancedmodelswhentheyareapplied to users with different number of trusted users. We compare the sentiment enhanced models, the adaptive ensemble models, and the traditional ensemble models. The experimental results are shown in Fig. 13 .

The phenomenon demonstrated in Fig. 13 show that all the methods descend when a user has more trusted users/friends, but the curves for STRM-Adaptive and SEMM-Adaptive are sharper as the number of trusted users/friends increases. In the beginning, the combination of item ratings and review contents performs better than the one purely using item ratings for those users who are with small number of friends (in particular, cold-start users). Then, when a user has more than 8 trusted users, STR-Adaptive and SEM-Adaptive perform the best. This phenomenon reveals that, when a user has few trusted users, review contents affect his decisions more than just item ratings; when a user has more trusted users, ratings of items impact more on the user X  X  next purchasing action. Such conclusion is consistent with our intuition. When a user has few trusted users/friends, he has the ability to read the reviews written by them, while when this user has more friends (therefore, more reviews are generated), he would prefer checking rating values instead of spending so much time on reading reviews.

Figure 13 also shows that the improvement between STR and its two adaptive models is more significant than SEM and its adaptive models. When we compare the performance between STR and SEM, we also find SEM performs better than STR, which leads to the con-clusion that the method which ensembles matrix factorization with social network performs better than the one that linearly combine user X  X tem matrix with social network. 5 Related works In this section, we review some of the major approaches for recommender systems. User-based CF [ 23 , 27 ] is probably the most widely used technology for building recommender systems during the 1990s. Such techniques generate a recommended items list based on the similarity between users. However, several limitations exist with respect to the scalability and the real-time performance. Item-based recommendation algorithms [ 5 ] that could overcome the scalability problem are proposed. This model also makes use of user X  X tem matrix, but it computes item X  X tem rather than user X  X ser similarity. There are also some other approaches for improving the performance of traditional recommender algorithms. Xiang et al. [ 29 ] propose a Session-based Temporal Graph to explicitly model users X  long-term and short-term preferences for items, and Zhang et al. [ 30 ] interpolate the so-called artist-based LDA with Listener Diversity and Declustering rankings to balance and improve the recommender systems X  accuracy, diversity, novelty, and serendipity together.

Both user-and item-based techniques could not generate satisfactory results for cold-start users who have rated no or less items. For this reason, researchers switch to other data sources to solve this problem. Social networks, which are often equipped with E-commerce systems nowadays, have naturally been selected as an additional clues for overcome cold-start situations. In this respect, we need to define some metrics to measure the relationships among users in social networks. Trust-Aware [ 18 ] and Trust-Bot [ 8 , 9 ] are two typical solutions for this sake. Trust-Aware defines a local metric and only takes distance from friends into account, and skips the complex trust structure among the users. Trust-Bot considers the flow capacity from the source user to the sink user along all the paths, omitting the flows which cannot have a path to the sink node. One of the common weaknesses of these two algorithms is that they only take the distance as the main consideration in computing trust values between two nodes and neglect the mutual impacts among those nodes.

Both Jamali et al. [ 10 ] and Ma et al. [ 17 ] propose recommendation algorithms by com-bining traditional CF techniques with trust relationships. In Jamali et al. [ 10 ], Jamali et al. measure user X  X ser similarity and trust degrees among users. In this work, random walk is used for computing user trust degrees. Their final predictive rating is a linear combination of these two components. Ma et al. design a model called Social Trust Ensemble [ 17 ]which predicts item ratings for users given the user X  X tem matrix and users X  trust networks. However, one of the common weaknesses of these works is that, although the users X  trust networks are integrated into the recommender systems, the parameter used to balance the users X  and their trusted users X  tastes is constant, which neglects users X  individual characteristics. Further, the social influences [ 4 ] of the local topology among users X  trusted users are not reflected in these models. Therefore, they cannot well reflect the different motivations of users in selecting their friends and thus lead to limited improvement of the ensemble methods. For such reason, Ma et al. propose to factorize user X  X tem matrix with social regularization [ 19 ]. We argue that their approach may not work well for cold-start users since it requires to compute user X  X ser similarities in social regularization. 6 Conclusion and future works This paper is inspired by the fact that a user X  X  online behavior will be affected by his trusted users/friends on the Web. Therefore, each user X  X  final decisions on the Web should reflect both this user X  X  characteristics and his trusted users X /friends X  opinions, and the impacts of these two parts are personalized differently for each user. Based on this intuition, we propose a novel and effective method for the recommender systems. Experimental analysis on Epinions, Flixster, and Ciao shows fairly good results for our approaches. The personalized parameter, which is used to balance a user X  X  characteristics and his trusted users X  affection, is not only working in trust ensemble recommender systems which use the probabilistic matrix factorization technique, but is also applicable to other trust-based recommender systems.

Moreover, users also have the location information for himself. Actually, this information is very useful in the recommender systems. Users with the same location could also reach the agreement due to the same culture, background, etc. We plan to integrate this feature with other features and explicitly model them in the recommender systems in our future work. References
