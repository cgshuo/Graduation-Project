 Graphs are very popular in modeling social networks, protein interactions, web and communication networks, and semistructured data. Nodes in such graphs represent objects or users and edges depi ct relationships between them. Also, there is often a set of characterizing a ttributes assigned to each node, such as age, location, function, etc.
 As graphs of millions of nodes and their relationships are ubiquitous now, e.g. Facebook, Twitter, Weibo, or DBpedia, there is a pressing need to summarize graphs in order to have a representation that can be consumed by human ana-lysts. In this paper, we consider a graph summarization notion in which nodes are grouped based on node attributes an d groups are connected by edges repre-senting inter-group connectedness.

Being able to group graph nodes and edges is only the first step in understand-ing real graphs. Another challenge is the uncertainty or impreciseness of edges, which represent the connectedness or influence of nodes to each other. Proba-bilistic graphs are commonly used to model networks with uncertainties on the relationships between nodes. An important application of probabilistic graphs is in social networks, where the users X  influence is modeled as probabilities on the edges [4,5]. Uncertainty can also be a resu lt of data collection processes, machine-learning methods employed in preprocessing, and privacy-preserving processes. Our focus in this work is on graphs where edges (relationships) have existence or influence probabilities as in [4,5], and we address the problem of summarizing such probabilistic graphs.

Based on the notion of  X  X ossible worlds X  for probabilistic databases [1 X 3,6], a probabilistic graph G defines a set of regular graphs called possible instances. Assigned to each possible instance there is an existence probability. While the theoreticalframeworkofpossibleworldsisusefultodefinewhatwewant,e.g.the mean group connectedness over the possible instances, the number of possible in-stances is exponential in the size of the original graph, thus rendering approaches that materialize the possible instances ve ry infeasible in practice. Therefore, we present a method that, while based on the possible worlds semantics, does not create any possible instance at all of the original graph. More specifically, we give characterization theorems to compute expected values of the aggregations included in the summary graph using the edge probabilities only.

The massive size of graph data, such as social networks, requires devising effective management methods that emp loy disk operations and do not neces-sarily need to load the entire graph in the memory. We present a summarization algorithm that is SQL-based and employs relational operations to create the summary graph. Notably, using relational technology for solving graph prob-lems has been shown to satisfactorily s upport other graph problems as well (cf. [8, 11, 13]). Experimentally we evaluate our algorithm by implementing it on an Epinions dataset and show that our presented approach is scalable and efficiently computes aggregates on large datasets. In summary, our contributions are: 1. We present a framework for group-based summarization of probabilistic 2. We give characterization theorems for the aggregates of our graph summa-3. We present an algorithm to compute the aggregates of our graph summa-4. We conduct an experimental evaluation on a real life dataset and synthetic Organization. We review related work in Section 2. In Section 3 we define our method for summarizing regular graphs. In Sections 4 and 5 we define proba-bilistic graphs and introduce our probabilistic graph summarization method. The theorems and proofs for our probabilistic method are also presented in Section 5. In Section 6 we propose an algorithm to implement our method. In Section 7 we explain the implementation of our algorithm on an Epinions dataset and analyze the efficiency and scalability of our method. Section 8 concludes the paper. Summarization of regular (non-probabilistic) graphs has been studied with re-spect to different aspects (cf. [14 X 16] ). Various problems have been studied on probabilistic graphs (cf. [7, 9, 10, 12, 17]). However, to the best of our knowl-edge we are the first to address the problem of summarization of uncertain data graphs.

Grouping the nodes of a graph based on a set of attributes is one of the most common techniques to summarize graphs. Tian et al. [14,15] introduce a framework to interactively produce such summary graphs. In [16], Zhao et al. introduce graph cubes which are graph summaries created using node grouping operations based on s elected attributes. We denote a graph database as G =( V,E ), where V is the set of nodes, and E  X  V  X  V is the set of edges connecting the nodes.

Furthermore, there is a set of attributes A 1 ,A 2 ,  X  X  X  ,A d associated with the nodes. Attributes can be nominal or nu merical. Numerica l attributes can be discretized as in [15].
 where a i ,for i  X  [1 ,d ], is the value of A i for v .

Let A be a subset of node attributes. Using A we group the nodes of G in the usual GROUP BY way and obtain a set V A of node groups. Now we have Definition 1. The A -grouping graph is G A =( V A , E A ) where E Definition 2. The A -graph summarization (A-GS) is a node-edge weighting pair of functions ( w 1 ,w 2 ) ,where Fig. 1.(a) shows a graph containing seven nodes. Consider the color of the nodes to be the grouping attribute. Fig. 1.(b) shows the A -graph summarization of the graph in Fig. 1.(a) with the corresponding values of the w 1 and w 2 measures. A probabilistic graph is G =( V,E ) (as above), however, associated with each edge e there is a probability p ( e ) expressing the confidence on the existence of e . A probabilistic graph defines a set of possible instances (PIs). We denote the set of all possible instances of a probabilistic graph G as PI ( G )or PI if G is clear from the context.

A possible instance (PI) of G is denoted as PI i ( G ) or simply PI i .EachPI is a regular graph derived from the probabilistic graph where each edge either exists or does not. The existence probability of each PI is computed as where E ( PI ) is the set of the edges existent in the possible instance PI .Each edge e in the probabilistic graph G appears in a subset of the PIs. For a given edge e the probabilities of PIs containing e sum up to the confidence value (prob-If e has confidence 1, then it appears in all of the PIs.

Since the number of PIs doubles with each additional probabilistic edge in the input graph, the result of queries on these graphs is exponential in the size of the input graph. We define summarization of probabilistic graphs in a similar way as in Defini-tion 2. However, having probabilistic edges between nodes in a graph results in probabilistic edges between groups in the summary graph. Thus, instead of the exact value of w 2 the expected value should be computed for each of its el-ements x , y ,and z . Note that, the exact value of w 1 is computable as in the non-probabilistic case.

Let g and g be two groups of nodes in the summary graph G A .IneachPI the set of edges that connect the nodes of these two groups can be different, and hence, the exact values of x , y ,and z can differ in the summary graph, corresponding to each PI. The expected values for x , y ,and z in G A can be computed using the basic formula for the expected value of random variables. For example, for the expected value of x we have E [ X ]= PI x i  X  p ( PI i ), where X is the random variable representing the x measure. Note that, using this formula directly requires building all the possible instances of the original graph.

In the following we present (and prove) equations that compute E [ X ], E [ Y ], and E [ Z ] by using only the probability of edges in G with no need to create all PIs.
 Proposition 1. For any subgraph G of a probabilistic graph G we have Theorem 1. Let g and g be two groups in a probabilistic summary graph G , nodes of g . We have that Proof. Let W = { v 1 ,...,v | W | } be the set of nodes in group g which are connected to the nodes of group g in G , and let W PI  X  W be the set of nodes in group g which are connected to the nodes of group g in the possible instance PI of G . Also, let m = |PI ( G ) | .Wehavethat where x i is the number of nodes in g that are connected to some nodes of g in the instance PI i .Thatis, x i = | W PI i | .

We can organize this equation in a different way. Note that for each node v ,theterm p ( PI i ) appears once in the right hand summation if v j  X  W PI i . Therefore, we can rewrite the equation as Nowwecomputethevalueofeachtermabove.Fromequality PI  X  X I p ( PI )=1 we have that v j to some nodes in g . The first sum in (3) includes possible instances where at least one of the edges in E v j exists. The second sum includes possible instances wherenoneoftheedgesin E v j exists.

Now, suppose G is a probabilistic graph constructed from G by removing all the edges in E v j . That is, the probability of existence of those edges is zero in G . Since each possible instance of G can be constructed from G and based on (1), we can rewrite Equation (3) as where PI ( G ) is the set of all possible instances of graph G ,and S is a set in the power set of E v j .Since PI  X  X I ( G ) p ( PI ) = 1 (Proposition 1), we have that and using Equations (2) and (4) we have E [ X ]= This proves the theorem. " # For the expected value of y we present the following theorem.
 Theorem 2. In the summary graph, the expected value for y , E [ Y ] ,isthesum of the probabilities of the edges going from one group to the other. edges (with non-zero probability) that connect the nodes of two given groups in a probabilistic summary graph. Let also E ( PI i ) be the set of edges in an instance PI i .Wehavethat where y i is the number of edges in S that exist in PI i . Now, we can organize the term p ( PI i ) appears once in the right hand summation. Therefore, we can rewrite the equation as On the other hand, for each edge e we have that p ( e )= E ( PI In this section we present our algorithm to build the summary graph of a prob-abilistic graph. We assume that the probabilistic graph is stored in database tables. The first primary table is the Nodes table which consists of all the nodes in the graph and their attribute values. The second is the Edges table which stores all the node connections (edges) in the graph. We assume that each edge has an existence probability which is stored in the same table as a separate column.
 The algorithm starts by grouping the nodes based on the desired attributes. Grouping can start by sorting nodes a ccording to their values on the selected attributes. Then, computing the E [ X ], E [ Y ], and E [ Z ]elementsofthe w 2 mea-sure for group pairs can be done by using the theorems and formulas provided in Section 5.
The following algorithm uses the Nodes and Edges tables illustrated in Fig. 2 (two left tables) and returns the w 2 measure in the Summary table depicted in Fig 2(right table). All the steps of our algorithm can be expressed in SQL. Due to space constraint we only give the plain language description of the steps here and refer the reader to the full version 1 of the paper for the SQL statements. Algorithm 1 Input: Output: Table Summary consisting of all possible pairs of groups and their Method: In this section we describe the implementation of our algorithm on a real dataset and evaluate its efficiency. We then analyze the scalability of our algorithm by implementing it on synthetic data. 7.1 Dataset The real dataset we use for the evaluation is a trust network dataset from Epin-ions 2 . Epinions is a website in which users write reviews for different products of different categories or subjects and express trust to each other.
Two different versions of the Epinions dataset are available in the Trustlet website (www.trustlet.org). In this paper we use the Extended Epinions dataset. The ratings in this dataset are about reviews, also called articles. That is, the ratings represent how much a user rates a given article written by another user. This dataset contains about:  X  132,000 users,  X  841,000 statements (trusts and distrusts),  X  85,000 users received at least one statement,  X  1,500,000 articles.
 In this dataset, we are interested in finding the strength of the connections between users grouped by the subject of the articles they have written. Using the users information and the statements we created tables Nodes and Edges , respectively. In order to have edge existence probabilities, we added the field prob in the Edges table and filled it with random numbers between 0 and 1 for each record. 7.2 Implementation of Algorithm 1 Since the Nodes table created from the Epinions dataset contains only one at-tribute, SubjectId , we use it as the grouping attribute and group Id will be the SubjectId (see Step 1 of Algorithm 1).

To assign the subjectId s to the nodes in the Edges table (Step 2 of Algo-rithm 1), we join tables Nodes and Edges twice, once on userId1 and the second time on userId2 . The result table called Joint represents all the valid edges in the trust graph. After these joins we end up with much more records in the Joint table than table Edges . The reason is that in the Epinions dataset a user/author may have articles in different subjects. Before joining the tables, we can follow two different strategies. 1. We can consider each distinct userId -subjectId pair in Nodes table as a node 2. We can consider just one subject for each user and remove the other records We have followed both strategies for our evaluation. We performed all the ex-periments on a machine with Linux server, 12 GB memory, and 3.4 GHz CPU. All steps have been implemented as SQL queries. We executed our queries on MySQL version 5.5.24. In the following section we analyze the results of our experiments on graphs with different sizes. 7.3 Analysis In this section we analyze the complexity , the efficiency, and the scalability of our algorithm based on the experimental results obtained in the previous section. 7.4 Complexity of the Algorithm In the first step, a sorting or hashing can be performed to group by the nodes based on their attribute values (the value of subjectId ). The rest of the algorithm can be completed by scanning the edges in two passes to compute the E [ X ], E [ Y ] and E [ Z ]values.

Considering the memory space, our algor ithm can keep the sta tistics variables for all the groups in the memory. If there is not enough memory, only the infor-mation about the groups for which the expected values are requested are kept in the memory. The algorithm can even run in a memory of size equal to the space needed to store statistics variables for only a pair of groups. This is because the algorithm can work with just two groups at a time and compute the expected values of the statistics. However, in this case we would need one pass for each pair of groups. 7.5 Efficiency of the Algorithm We ran the algorithm on two graphs with different sizes created from the Epin-ions dataset. The first graph had 840,971 nodes and 103,419,023 edges resulting from restricting the number of subjects to 85, which is almost 0.1% of the whole number of different subjects. This is a reasonable number of groups for a human analyst to easily use in order to understand the interconnectedness of his/her subjects of interest in terms of user trus t relationships. The execution time was only 113 seconds, and the produced summary graph contained 85 different groups and 1,691 edges. The second graph was generated using the second strategy il-lustrated in Section 7.2, which resulted in a graph containing 11,224 different subjects in total. The execution time was only 3.86 seconds, and the produced summary graph contained 11,224 different groups and 35,259 edges.
 7.6 Scalability Experiments In order to analyze the scalability of the algorithm we took advantage of syn-thetic graphs created based on the trust network structure of the Epinions data. We generated random graphs of different sizes and different number of groups. Each time we simply assigned random group identifiers to each node of the orig-inal graph. The experimental results on the datasets having different number of subjects or different graph sizes are shown in Fig. 5.

The left figure in Fig. 5 illustrates the execution time of the summarization algorithm (in seconds) as a function of the number of different groups (subjects) in a graph having 10,000,000 edges. The figure shows that when the graph size is constant, depending on how we group the nodes and how many different groups we get, the execution time can change. The result shows that as the number of different groups increases, the execution time would increase as well in an almost linear manner. Therefore, we can handle the summarization of graphs with large number of groups in reasonable time.

The right figure in Fig. 5 shows the execution time of the algorithm on some graphs of different sizes. In this exper iment we group the nodes into exactly 300 different categories each time. The result shows that in the case of constant number of groups, the execution time in creases almost linearly based on the graph size. This result shows the scalability of our algorithm. This paper addressed the problem of summarizing probabilistic graphs using a relational database approach. We focused on a useful summarization method which groups the nodes based on a subset of attributes. In the summary graph we considered aggregates which reveal significant information about the groups and the connections between them. We gave theorems to compute these aggregates without the need to compute all possible data graphs from the original prob-abilistic graph. We also presented an algorithm, which uses pure SQL queries to build the summary graph. We evaluated the proposed algorithm on Epinions data and some synthetic datasets. The evaluation shows that our algorithm is practically scalable to large graphs.

