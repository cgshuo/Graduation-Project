 In natural language processing (NLP) and text min-ing, clustering methods are crucial for various tasks such as document clustering. Among them, K -means (MacQueen, 1967; Lloyd, 1982) is  X  X he most important flat clustering algorithm X  (Manning et al., 2008) both for its simplicity and performance.
One of the major problems of K -means is that it has K centroids which are dense vectors where K is the number of clusters. Thus, it is infeasible to store them in memory and slow to compute if the di-mension of inputs is huge, as is often the case with NLP and text mining tasks. A well-known heuris-tic is truncating after the most significant features (Manning et al., 2008), but it is difficult to analyze its effect and to determine which features are signif-icant.

Recently, Weinberger et al. (2009) introduced fea-ture hashing, a simple yet effective and analyzable dimension-reduction technique for large-scale mul-titask learning. The idea is to combine features which have the same hash value. For example, given a hash function h and a vector x , if h (1012) = h (41234) = 42 , we make a new vector y by set-ting y 42 = x 1012 + x 41234 (or equally possibly x
This trick greatly reduces the size of dense vec-tors, since the maximum index value becomes equivalent to the maximum hash value of h . Further-more, unlike random projection (Achlioptas, 2003; Boutsidis et al., 2010), feature hashing retains spar-sity of sparse input vectors. An additional useful trait for NLP tasks is that it can save much memory by eliminating an alphabet storage (see the prelim-inaries for detail). The authors also justified their method by showing that with feature hashing, dot-product is unbiased, and the length of each vector is well-preserved with high probability under some conditions.

Plausibly this technique is useful also for clus-tering methods such as K -means. In this paper, to motivate applying feature hashing to K -means, we show the residual sum of squares, the objective of K -means, is well-preserved under feature hashing. We also demonstrate an experiment on document clustering and see the feature size can be shrunk into 3.5% of the original in this case. 2.1 Notation In this paper, || X || denotes the Euclidean norm, and  X  X  ,  X  X  does the dot product.  X  i,j is the Kronecker X  X  delta, that is,  X  i,j = 1 if i = j and 0 otherwise. 2.2 K -means Although we do not describe the famous algorithm of K -means (MacQueen, 1967; Lloyd, 1982) here, we remind the reader of its overall objective for later analysis. If we want to group input vec-tors into K clusters, K -means can surely output clusters  X  1 ,... X  K and their corresponding vectors  X  1 ,...,  X  K such that they locally minimize the resid-ual sum of squares (RSS) which is defined as
In the algorithm,  X  k is made into the mean of the vectors in a cluster  X  k . Hence comes the name K -means.

Note that RSS can be regarded as a metric since the sum of each metric (in this case, squared Eu-clidean distance) becomes also a metric by con-structing a 1-norm product metric. 2.3 Additive distortion Suppose one wants to embed a metric space ( X,d ) into another one ( X 0 ,d 0 ) by a mapping  X  . Its ad-ditive distortion is the infimum of which, for any observed x,y  X  X , satisfies the following condition: 2.4 Hashing tricks According to an account by John Langford 1 , a co-author of papers on feature hashing (Shi et al., 2009; Weinberger et al., 2009), hashing tricks for dimension-reduction were implemented in various machine learning libraries including Vowpal Wab-bit, which he realesed in 2007.

Ganchev and Dredze (2008) named their hashing trick random feature mixing and empirically sup-ported it by experimenting on NLP tasks. It is simi-lar to feature hashing except lacking of a binary hash function. The paper also showed that hashing tricks are useful to eliminate alphabet storage.

Shi et al. (2009) suggested hash kernel , that is, dot product on a hashed space. They conducted thor-ough research both theoretically and experimentally, extending this technique to classification of graphs and multi-class classification. Although they tested K -means in an experiment, it was used for classifi-cation but not for clustering.

Weinberger et al. (2009) 2 introduced a technique feature hashing (a function itself is called the hashed feature map ), which incorporates a binary hash func-tion into hashing tricks in order to guarantee the hash kernel is unbiased. They also showed applications to various real-world applications such as multitask learning and collaborative filtering. Though their proof for exponential tail bounds in the original pa-per was refuted later, they reproved it under some extra conditions in the latest version. Below is the definition.
 Definition 2.1. Let S be a set of hashable features, h be a hash function h : S  X  { 1 ,...,m } , and  X  be  X  : S  X  { X  1 } . The hashed feature map  X  ( h, X  ) : R | S |  X  R m is a function such that the i -th element of  X  ( h, X  ) ( x ) is given by
If h and  X  are clear from the context, we simply
As well, a kernel function is defined on a hashed feature map.
 Definition 2.2. The hash kernel  X  X  ,  X  X   X  is defined as
They also proved the following theorem, which we use in our analysis.
 Theorem 2.3. The hash kernel is unbiased, that is, The variance is
V ar  X  [  X  x , x 0  X   X  ] = 2.4.1 Eliminating alphabet storage
In this kind of hashing tricks, an index of inputs do not have to be an integer but can be any hash-able value, including a string. Ganchev and Dredze (2008) argued this property is useful particularly for implementing NLP applications, since we do not anymore need an alphabet , a dictionary which maps features to parameters.

Let us explain in detail. In NLP, features can be often expediently expressed with strings. For in-stance, a feature  X  X he current word ends with -ing X  can be expressed as a string cur:end:ing (here we suppose : is a control character). Since indices of dense vectors (which may be implemented with arrays) must be integers, traditionally we need a dic-tionary to map these strings to integers, which may waste much memory. Feature hashing removes this memory waste by converting strings to integers with on-the-fly computation. For dimension-reduction to K -means, we propose a new method hashed K-means . Suppose you have N input vectors x 1 ,..., x N . Given a hashed fea-ture map  X  , hashed K -means runs K -means on  X  ( x 1 ) ,..., X  ( x N ) instead of the original ones. In this section, we show clusters obtained by the hashed K -means are also good clusters in the orig-inal space with high probability. While Weinberger et al. (2009) proved a theorem on (multiplicative) distortion for Euclidean distance under some tight conditions, we illustrate (additive) distortion for RSS. Since K -means is a process which monoton-ically decreases RSS in each step, if RSS is not dis-torted so much by feature hashing, we can expect results to be reliable to some extent.

Let us define the difference of the residual sum of squares (DRSS).
 Definition 4.1. Let  X  1 ,... X  K be clusters,  X  1 ,...,  X  K be their corresponding centroids in the original space,  X  be a hashed feature map, and  X   X  1 ,...,  X   X  K be their corresponding centroids in the hashed space. Then, DRSS is defined as follows:
Before analysis, we define a notation for the (Eu-clidean) length under a hashed space: Definition 4.2. The hash length || X ||  X  is defined as Note that it is clear from Theorem 2.3 that E || x || 2 ] = 0 .

In order to show distortion, we want to use Cheby-shev X  X  inequality. To this end, it is vital to know the expectation and variance of the sum of squared hash lengths. Because the variance of the sum of ran-dom variables derives from each covariance between pairs of variables, first we show the covariance be-tween the squared hash length of two vectors. Lemma 4.3. The covariance between the squared hash length of two vectors x , y  X  R n is where
This lemma can be proven by the same technique described in the Appendix A of Weinberger et al. (2009).
 Now we see the following lemma.
 Lemma 4.4. Suppose we have N vectors x ,..., x N . Let us define X = P i || x i || 2  X   X  P i || x i || &gt; 0 , Proof. This is an application of Chebyshev X  X  in-equality. Namely, for any &gt; 0 ,
Since the expectation of a sum is the sum of ex-pectations we readily know the zero expectation: E  X  [ X ] = 0 .

Since adding constants to the inputs of covariance does not change its result, from Lemma 4.3, for any x , y  X  R n ,
Cov  X  ( || x || 2  X   X  X | x || 2 , || y || 2  X   X  X | y || 2 ) =
Because the variance of the sum of random vari-ables is the sum of the covariances between every pair of them,
Finally, we see the following theorem for additive distortion.
 Theorem 4.5. Let  X  be the sum of  X  ( x , y ) for any observed pair of x , y , each of which expresses the difference between an example and its correspond-ing centroid. Then, for any , Thus, if m  X   X   X  1  X   X  2 where 0 &lt;  X  &lt; = 1 , with probability at least 1  X   X  , RSS is additively distorted by .
 Proof. Note that a hashed feature map  X  ( h, X  ) is lin-ear, since  X  ( x ) = M x with a matrix M such that M i,j =  X  ( i )  X  h ( i ) ,j . By this liearlity,  X  |  X   X  (  X  k ) . Reapplying linearlity to this result, we have ||  X  ( x )  X   X   X  the proof.

The existence of  X  in the theorem suggests that to use feature hashing, we should remove useless fea-tures which have high values from data in advance. For example, if frequencies of words are used as features, function words should be ignored not only because they give no information for clustering but also because their high frequencies magnify distor-tion. To empirically verify our method, from 20 News-groups, a dataset for document classification or clus-tering 3 , we chose 6 classes and randomly drew 100 documents for each class.

We used unigrams and bigrams as features and ran our method for various hash sizes m (Figure 1). The number of unigrams is 33,017 and bigrams 109,395, so the feature size in the original space is 142,412.
To measure performance, we used the F 5 mea-sure (Manning et al., 2008). The scheme counts correctness pairwisely. For example, if a docu-ment pair in an output cluster is actually in the same class, it is counted as true positive. In con-counted as false positive. Following this man-ner, a contingency table can be made as follows: Same class TP FN Diff. classes FP TN Now, F  X  measure can be defined as where the precision P = TP/ ( TP + FP ) and the recall R = TP/ ( TP + FN ) .
In short, F 5 measure strongly favors precision to recall. Manning et al. (2008) stated that in some cases separating similar documents is more unfavor-able than putting dissimilar documents together, and in such cases the F  X  measure (where  X  &gt; 1 ) is a good evaluation criterion.

At the first look, it seems odd that performance can be higher than the original where m is low. A possible hypothesis is that since K -means only lo-cally minimizes RSS but in general there are many local minima which are far from the global optimal point, therefore distortion can be sometimes useful to escape from a bad local minimum and reach a better one. As a rule, however, large distortion kills clustering performance as shown in the figure.
Although clustering is heavily case-dependent, in this experiment, the resulting clusters are still reli-able where the hash size is 3.5% of the original fea-ture space size (around 5,000). Arthur and Vassilvitskii (2007) proposed K -means++, an improved version of K -means which guarantees its RSS is upper-bounded. Combining their method and the feature hashing as shown in our paper will produce a new efficient method (possibly it can be named hashed K -means++ ). We will ana-lyze and experiment with this method in the future. In this paper, we argued that applying feature hash-ing to K -means is beneficial for memory-efficiency. Our analysis theoretically motivated this combina-tion. We supported our argument and analysis by an experiment on document clustering, showing we could safely shrink memory-usage into 3.5% of the original in our case. In the future, we will analyze the technique on other learning methods such as K -means++ and experiment on various real-data NLP tasks.
 We are indebted to our supervisors, Jun X  X chi Tsujii and Takuya Matsuzaki. We are also grateful to the anonymous reviewers for their helpful and thought-ful comments.

