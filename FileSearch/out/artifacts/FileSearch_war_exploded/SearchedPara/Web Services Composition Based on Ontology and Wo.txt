 Web services composition is a promising approach to construct next generation large and complex Web applications, in this situation, Web services become the compo-by establishing meaningful data and control flows among individual Web services. These data and control flows form workflows connecting components distributed over static process control, which are inadequate for the scalability and versatility require-ments of Web applications, such as dynamic restructuring of processes and activities. We need an open environment for developing Web applications using meta data and ontologies to describe data processing patterns. These patterns specify the collection, Web services composition is supported by using domain ontologies with object, rela-tion and non-function description. [1] The problem set of composing web services with ontology and workflow intersects with many domains including agent-based computing, parallel and distributed com-puting, semantic Web, workflow, service-oriented architecture(SOA) and some re-munication, workflow representation and ontologies, service description, discovery and composition. 
A set of agent communication language (ACL) standards allow intelligent agents to communicate in an implementation independent manner. Existing ACLs are the Knowledge Query and Manipulation Language (KQML) and the Foundation for Intel-tologies. An ontology provides a shared and common understanding of a domain that can be communicated between people and across application systems. Well-defined able representation of its semantics. Web Ontology Language (OWL) provide a suit-able encoding mechanism for ontological information. 
Other research areas directly related to our work are the use of meta data and on-tologies for Web services description, discovery and composition, and workflow expressed in languages like DAML-S, OWL, support mechanisms to discover, select, ranging from theoretical studies to implementation efforts, from architecture issues to conceptual models [3-5]. Based on these research, complex Web applications can be empowered with semantics and automated reasoning capabilities. in intermediate layers, such as WSFL (IBM), BPML (BPMI), XLANG (Microsoft), BPEL4WS (BEA, IBM, Microsoft), WSCI (BEL, Intalio, SAP, Sun), XPDL (WfMC), EDOC (OMG), and UML 2.0 (OMG). These proposals concern the syn-chronization of the execution of Web services in processes running across enterprise boundaries. They build on top of standards like XML, SOAP, WSDL, and UDDI, providing facilities to interoperate and synchronize the execution of Web services. 3.1 Scenario Description Travel planning and booking is the most successful business model on the Web, it is shows). Although there are a lot of travel assistant sites on the Web, planning an indi-vidual trip on the Web is still a time consuming and complicated venture. Most of the rental cars, weather or they relate those information in a very restricted manner. There exists no integrated service for arranging personalized trips to any desired destination, relying on distributed information sources which have to be reasonably combined. Recent approaches build on mediators that turn Web sources into structured data sources. Those mediators are the critical component of the whole system because they information from a huge set of different Web sources. 
The intelligent agent must obtains relevant data from a variety of heterogeneous in-formation sources (e.g., weather forecast, airplane/train reservation, hotel reservation, and existing documents in different formats are frequently used as alternative sources. services. These elementary Web services must be described based on domain-specific complex web application system. The top of the system is a workflow management implementing rightly. 3.2 Technical Challenges outputs of a process can contribute to the inputs of other processes. The data sources gives feedback to improve the process or devise new ones. the semantics of data are interrelated with the processes that manipulate them, so that data and processes cannot be completely decoupled. There is no means to track data provenance, i.e., their origi-nal source and the way they were obtained and processed. Processes should be docu-mented. When this is done, the specifications produced are broad enough for giving a find and reuse available Web resources to solve each particular problem. Mechanisms for adaptation and reuse of Web services should be boosted productivity and enhance common to several kinds of applications involving distributed processes over the Web. The following sections describe our approach for handling some of these issues. There are several semantic relationships between words in the field of linguistics. Let  X  Objects are specific instances. Concepts are classes that abstractly define and charac-the meaning of each word w  X   X  is stable and consistent. We only consider the fol-lowing subset in our current research:  X  Synonym. Two words are synonyms of each other if they refer to exactly the same concepts or objects in U .  X  Hypernym/hyponym. A word w is a hypernym of another word w  X  (conversely w  X  is a to by w  X  in U . Hyponym is the inverse of hypernym. nym is the inverse of holonym. Roughly speaking, synonym stands for equivalence of meaning, hypernym for generalization (IS_A), and holonym for aggregation (PART_OF). A set of words  X  is said to be semantically consistent for the universe of discourse U and a set of seman-tic relationships  X  if at most one semantic relationship of  X  holds between any pair of words in  X  . This ensures some coherence for the meanings of the words in  X  for U . w Then, for a given universe of discourse U , the following conditions hold:  X  w synonym w (reflexivity)  X  w  X  w  X  I w  X   X  w  X  X   X  w  X  w  X  X  (transitivity)  X  w synonym w  X  I w  X   X  w  X  X   X  w  X  w  X  X  (transitivity with respect to synonyms)  X  ducing a partial order among the words of  X  . The resulting arrangement of semanti-cally consistent words is a directed graph G  X  that expresses the relative semantics of synonyms of  X  . The directed edges of G  X  represent the semantic relationships among concepts, then an arrangement of semantically consistent words is called an arrange-ment of semantically consistent concepts that appear in the ellipses. The edges repre-senting hypernym relationships are denoted by a arrow close to the specific concept, and the edges representing holonym relationships are denoted by a black circle close to the component concept. particular domain can be described by ontologies. Concretely , ontologies describe the tion of Web services. A utilization scope is a context in which different data sets and distinct versions of a repertoire of servi ces can be used. These are the foundations of our scheme to catalog and reuse components and ensure the semantic consistency of the resulting Web services compositions. 5.1 The Definition of Activity Model Activity pattern is the basic component to construct a system. It is an abstraction that well-defined category of problems in a particular utilization scope. An activity pattern activity patterns and data repositories. Each parameter of an activity pattern refers to a Web service encapsulating a data source or sink for that particular pattern. Each input parameter is associated with outputs of another activity pattern or with a data reposi-pattern or with a data repository. where: NAME is the string used as the name of  X  COVER is the ontological coverage of  X  i.e., expresses its utilization scope IN is the list of input parameters of  X  OUT is the list of output parameters of  X  TASK describes the processing chores of  X  5.2 Activity Pattern Aggregation A complex activity pattern is defined as an aggregation of a set of component activity terns involved and that all parameters are connected.  X  1.  X   X  i : NAME(  X  )  X  NAME(  X  i ) U COVER(  X  )  X  COVER(  X  2.  X   X  i,  X  j : NAME(  X  i)  X  NAME(  X  j) U COVER(  X  i)  X  COVER(  X  j) 3.  X   X  i : COVER(  X  )  X  COVER(  X  i) U COVER(  X  i)  X  COVER(  X  ) 4.  X  p  X  IN(  X  ) :  X   X  i such that p  X  IN(  X  i) 5.  X  p  X  OUT(  X  ) :  X   X  i such that p  X  OUT(  X  i) 6.  X   X  i, p 7.  X   X  i, p conditions. Condition 1 says that the name and the ontological coverage of each con-must be connected to a parameter of other constituent or the aggregated pattern. 5.3 Activity Pattern Specialization pattern for a particular situation. versely  X  is a generalization of  X  ) if the following conditions are verified: 1. NAME(  X  )  X  NAME(  X  ) U COVER(  X  )  X  COVER(  X  ) 2. COVER(  X  )  X  COVER(  X  ) 3.  X  p  X  IN(  X  ) :  X  p 4.  X  p  X  OUT(  X  ) :  X  p coverage of the generalized activity pattern  X  must be different from those of its spe-cialized version  X  . Condition 2 states that the ontological coverage of  X  must encom-pass that of  X  . The notation p a p  X  in conditions 3 and 4 means that each parameter p  X  of  X  must refer to a Web service that is a refinement of the Web service referred and correlate their utilization scopes. complex activity pattern whose constituents depend on the utilization scope to which the conform to both the conditions of aggregation and the conditions of specialization. 5.4 Process Framework and Process Specification Tuples of terms taken from domain specific ontologies, called ontological coverages, formally describe and organize the utilization scopes of Web services. A hierarchy of activity patterns is called a process framework . following conditions: 1. V  X  is the set of vertices of  X  2. E  X  is the set of edges of  X  3.  X  v  X  V 4.( v, v  X  )  X  E  X   X  v  X  constituent v U v  X  specialization v 5 . 
 X  is acyclic 6 .  X  is connected rected edges correspond to the aggregation and specialization relationships among Condition 5 states that no sequence of aggregations and/or specializations of patterns in 
 X  can lead from one pattern to itself. This restriction is necessary because aggrega-tion and specialization can intermingle. In such a case, an aggregation may break the guarantees the connectivity of the activity patterns participating in the process frame-work  X  . 
Each activity pattern of a process framework is associated with an ontological cov-components. A process framework must be refined, adapted to a particular situation, process frameworks and instantiated processes based on correlations of the ontologi-coverages of all the components of a process framework must be compatible with (encompass or be encompassed by) the ontological coverage of the highest activity in employed to organize and reuse the components of processes. A process framework captures the possibilities for reusing and composing Web services to build consistent processes for different situations in terms of utilization scopes, data dependencies, and execution dependencies among components. The adaptation of a process framework for a particular scope consists in choosing components to compose a process tailored for that scope. expressed by an ontological coverage C is a subgraph of a process framework satisfy-ing the properties: 1.  X  ( v, v  X  )  X  E  X  : v  X  constituent v 2 .  X  v  X  V  X  : (  X  / v  X   X  V  X  such that ( v, v  X  )  X  E  X  )  X  v is atomic 3.  X  v  X  V  X  : COVER ( v )  X  C 
In Definition 5.5, condition 1 states that  X  is a decomposition hierarchy, i.e., all its edges refer to aggregations of activity patterns. Condition 2 states that all the leaves of  X  are atomic patterns, otherwise  X  would be missing some constituents for its execu-tion. Condition 3 ensures that the ontological coverage of each pattern participating in  X  encompasses the coverage C associated with  X  , i.e., the intersection of the utiliza-tion scopes of all the constituents of  X  are equivalent or contain the utilization scope reused to produce new or extended frameworks. Additionally , when adapting a contributes to enrich the repertoire of specialized patterns of a framework. process has to be instantiated for execution. Instantiating a process specification con-sists in assigning concrete Web services to handle the inputs and outputs of each ac-using the binding mechanisms of Web services specification languages like WSDL . 6.1 System Architecture We implemented a workflow engine that reads and executes an ontology-based web The core modules are workflow management, ontology management, and Web ser-vice agent. Workflow management module is responsible for loading, creating, saving and retrieving workflow instances. Ontology management module implements read-ing, writing, updating and validating a workflow instance based on ontology informa-tion of constituent Web services. Workflow engine module holds the workflow exe-agent module uses registry server based on Universal Description, Discovery and Integration (UDDI) to find the web services. The implementation uses WebSphere Studio Application Developer (WSAD) and IBM ETTK-WS for web services devel-opment. Jena toolkit from HP Labs is used for OWL ontology reading and writing. In our experience, the workflow instance specifications using OWL ontology offers the following benefits:  X  Activity pattern and concepts can be ordered freely.  X  Ontology coverage and their relationship can be described explicitly and freely.  X  Class-based specification is easy to map to implementation classes. 
Our main motivation for developing an workflow engine based on ontology was to enable constituent Web services sharing and composition using automated reasoning. 6.2 Travel Plan Agent Agent here is an autonomous software entity that acts on behalf of the user. The role of travel plan agent is to plan a workflow that accomplishes the task user needs. The workflow is created at run-time, based on following:  X  Shared registry information about web services  X  Shared workflow instances for component web services  X  Main workflow instance  X  User input parameters  X  Rules 
The main workflow instance is described using BPEL. The constituent Web ser-vices are described on OWL. A separate workflow management agent is proposed UDDI registry stores web service interface de scriptions. These instances enables plan agent can automatically make the composition based on the stored workflows. Fig-ure5 presents the inputs and output of the plan agent. Plan agent implementation will further more to enable making logic queries [6]. The implementation is not yet able to produce an executable workflow instance for our workflow engine. One specific chal-lenge is to select a single workflow instance from the several possibilities. Web Services are standards that enable remote invocation among heterogeneous sys-ogy releases the possibility of machine readability and of precise understanding among parties. In this paper, through modeling the semantic relationships among workflow. However, many important issues must be addressed in our further work, discovery and selection, the choreography of Web services into e-commerce transac-tions, the security issues in the platform, the dynamic service composition powered by would have been reached, the new-style Web service composition platform could be implemented. 
