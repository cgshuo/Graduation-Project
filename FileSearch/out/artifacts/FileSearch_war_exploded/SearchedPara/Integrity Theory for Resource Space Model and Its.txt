 tained a great success in both theory and systems [6, 7, 8, 10, 12, 15]. Database appli-cations request that changes made to data by authorized users do not result in a loss of data consistency. Effective integrity constraints are means to fight the damage to data and to the consistency between data and its management mechanism. However, pre-vious data models are limited in their abilities in effectively managing heterogeneous, distributed, and ocean resources in an open and dynamic Internet environment [17]. 
On the other hand, the success of World Wide Web guides people to attack the rep-resentation issue of resources. XML facilitates representation and exchange of struc-tured information on the Internet. The Semantic Web steps further this way by using markup languages like RDF and establishing ontology mechanisms [2]. 
Much research on XML-based information organization and management has been done, such as Document Type Definitions, XML Schema and Unified Constraint XML data have drawn attention [9, 13]. However, the Internet still lacks ideal seman-tic data model to effectively manage distributed and expanding resources. 
The Resource Space Model RSM is a semantic data model for uniformly, normally and effectively specifying and managing resources in interconnection environment. and the principles on relevant resource operations [17, 18, 19, 20]. 
Integrity is essential for the RSM to ensure its classification semantics, to maintain ciently manage resources. The architecture of the resource space system includes five layers as depicted in Fig. space layer organizing resources according to semantic normal forms [17] and the operation mechanism layer implementing the operations on resources and resource spaces. 
A resource space is an n-dimensional classification semantic space in which every X element is called a resource entry . A point can be regarded as the container of a set of resource entries. 
Fig. 2 is an example of a two-dimensional resource space Com-Goods that speci-fies goods X  information of three companies: Microsoft, Coca Cola and Nike. Two axes in Com-Goods ( Companies , Goods ) are Companies = { Microsoft , Coca Cola , goods. For example, the point ( Microsoft , software ) represents the goods belonging to operation units in RSM. Large number of null points may exist in multidimensional resource spaces. For ex-space Com-Goods . Here focuses on how to identify non-null points. equal to p 2 , denoted as p 1 = p p 2 . 3.1 Key locate tuples [1, 4, 14]. 
As a coordinate system, the RSM naturally supports accurate resource location by giving coordinates. However, it is sometimes unnecessary and even arduous to spec-resource spaces. The keys of RSM can further improve the efficiency of resource location. p from p 1 . X i = p 2 . X i , X i  X  CK . 
Candidate keys provide us with necessary and enough information to identify non-null points of a given resource space. Take Fig. 2 for example, { Companies }, { Goods } and { Companies , Goods } are candidate keys of the resource space Com-Goods . Knowing the coordinates either on { Companies } or on { Goods }, we can eas-chosen by resource space designers. Any axis belonging to the primary key is called primary axis . RS , then for any point in RS , its coordinate on axis X should not be null. 
Rule 1 is used to guarantee the primary keys X  functionality of distinguishing non-null points in a given resource space. One type of null value is  X  X t present unknown X . Let { Companies } be the primary key of Com-Goods , the axis Companies is a primary axis of Com-Goods . If the coordinates of points at axis Companies are null, then the key { Companies }. 
In RSM, some keys can be inferred from the presence of others. This is important in query optimization, especially when dynamically creating resource spaces. Infer-ence rules for candidate keys include the following four theorems. THEOREM 1. If a set of axes CK is a candidate key of the resource space RS , then any axis set that includes CK is also the candidate key of RS . 
Basic operations on resource spaces have been proposed in [18]. Here we introduce relevant definitions (definition 3-6) to develop the theory of integrity constraint. C DEFINITION 4 (Join operation). Let | RS | be the number of dimensions of RS . If two resource spaces RS 1 and RS 2 store the same type of resources and they have n ( n  X  1) common axes, then they can be joined together as one RS such that RS 1 and RS 2 share RS 2 , denoted as RS 1  X  RS 2  X  RS . common axes, and there exist two different axes X 1 and X 2 satisfying the merge con-dition, then they can be merged into one RS by retaining the n  X  1 common axes and RS 2  X  RS , and | RS | = n . DEFINITION 6 (Split operation). A resource space RS can be split into two resource This split operation is denoted as RS  X  RS 1  X  RS 2 . According to the definition of the join operation, we have the following theorem. THEOREM 2. Let RS 1 and RS 2 be two resource spaces that can be joined together to generate a new resource space RS . Assume that CK 1 and CK 2 are the candidate keys of RS 1 and RS 2 respectively. Then, CK = CK 1  X  CK 2 is a candidate key of RS . sume that CK = CK 1  X  CK 2 is not the candidate key of RS . Thus, there must exist two (  X  ( p p RS .  X  The following theorem can be drawn from the definition of the merge operation. THEOREM 3. Let RS 1 and RS 2 be two resource spaces that can be merged into one of RS . ( p
Suppose that p 1  X  and p 2  X  belong to the same resource space, for example RS 1 . Since (  X  p sion obviously contradicts the above assumption that CK 1 is the candidate key of RS 1 . p This obviously contradicts above assumption that CK 1 is the candidate key of RS 1 . key of RS .  X  According to the definition of the split operation, we have the following theorem. Then, CK 1 and CK 2 are the candidate keys of RS 1 and RS 2 respectively. ( p CK 1 = CK  X  { X c }  X  { X 1 } holds. holds; 
According to (1) and (2), p 1  X  = p p 2  X  does not hold. This conclusion obviously con-tradicts the above assumption that CK is the candidate key of RS . So CK 1 is a candi-date key of RS 1 . Similarly, we can prove that CK 2 is a candidate key of RS 2 .  X 
In resource space systems, there often exist some resource spaces created dynami-cally by join, merge and split operations. Theorem 2, 3 and 4 in fact provide efficient means of deriving the candidate keys of these resource spaces created dynamically. 3.2 Resource Entry Description &gt; is used to index a piece of resource of resource representation layer. The entries residing in different points could have the same ID. The second field Index is the index information linked to the representation layer. To facilitate semantic opera-entry re respectively. 
Three types of entity integrity constraints for resource entries are presented as fol-third one is optional according to application requirement. resource entries re 1 and re 2 in the same non-null point, re 1 . ID  X  re 2 . ID holds. 
Rule 2 requires that all resource entries in a given non-null point should be distin-locate the target resource entry.  X  re 2 . index . 
Rule 3 requires the following two conditions: (1) any resource entry should include the index information linked to the representation layer, and (2) there should not exist null point. Otherwise, it will lead to information redundancy and unnecessary mainte-nance of consistency between resource entries in a given point. 
The syntactic structure of index information of resource entries depends on the im-plementation of resource representation layer. For instance, the XML-based imple-mentation of resource representation layer usually uses XPath expressions [5], whereas filenames are often employed for the file-based implementation. To analyze the indexes of resource entries, not only the syntactic structure but also the semantics syntactically. However, these two types of paths may represent the same index infor-mation. Rule 4 (Resource entry constraint 3): Any semantic description SD of resource entry re . SD  X  re 2 . SD nor re 2 . SD  X  re 1 . SD ).
 source entry. It is optional and stricter than Rule 3. Since re . SD determines the seman-tic existence of the resource entries in the resource space, Rule 4 requires that re . SD should not be null. Furthermore, resource entries in a given non-null point should not be the same or imply each other in semantics. For example, a resource and its copies are allowed to coexist in a given non-null point by Rule 3, but not by Rule 4. In relational databases, a tuple can be inserted into a table only if all fields of the tuple satisfy the corresponding domain constraints. So the membership between the tuple and the table should be judged before operation. In RSM, a resource space represents the classification semantics of resources. The existence of resource entry re in point p source entry can be inserted into a poi nt by the following operation statement: 
Without any restriction, even a resource entry representing a car could be inserted into the point ( Microsoft , Software ) of the resource space shown in Fig. 2. So, check-ing the memberships of resource entries plays an important role in RSM. re has been inserted into the point p , then re  X  R  X  ( p ). R ( p )  X  re  X  R ( p ) holds. really belongs to the type that p represents. This membership integrity constraint can avoid incorrect resource classification. When the insert operation or update operation on resource entries is involved, this constraint should be verified. Relational database applications often require that a value appeared in one relation for given set of attributes should also appear for a certain set of attributes in another rela-types of referential integrity constraints for the RSM are given. 5.1 Referential Integrity for Resource Entries source. In section 3.2, Rule 3 ensures that re . index is non-null. But it cannot guarantee dead links. The following referential integrity constraint is to eliminate dead links. Rule 6 (Referential constraint 1). For any resource entry re in a given resource space by the index information ( re . index ). 
The resource space layer is the referencing layer and the resource representation layer, this integrity also needs to be checked. 5.2 Referential Integrity Between Resource Spaces The first type of referential integrity constraint between resource spaces is relevant to the join operation. In Fig. 3(a), the two-dimensional resource space Price-Com stores resource spaces have a common axis Companies , so they can be joined together. Fig. 3(b) depicts the resource space Com-Goods-Price created by joining Price-Com and Com-Goods . All resource entries of Com-Goods-Price come from Price-Com and Com-Goods . doubt, there exists certain referential relation among Com-Goods-Price , Price-Com and Com-Goods . satisfy RS 1  X  RS 2  X  RS , then R  X  ( RS )  X  R  X  ( RS 1 )  X  R  X  ( RS 2 ) must hold. RS 1 and RS 2 . Thus, when a resource entry is inserted into RS or deleted from RS 1 or RS 2 , this constraint should be checked. 
The second type of referential integrity constraint between resource spaces as-sumes that the involved resource spaces satisfy the third-normal-form. We first define the foreign key for RSM. DEFINITION 7. Let S be a subset of axes of the resource space RS 1 , and it is not the called the referenced resource space of RS 1 . According to definition 7, we have the following theorem. C R ( p )  X  R ( p  X ) holds.  X  R ( C m ). So R ( p )  X  R ( p  X ) holds. 
The theorem 5 indicates the inclusion relation between the points in the referencing resource space and their counterparts in the referenced resource space. The following constraint is to maintain the legal referential relation between the referencing resource space and its referenced resource space. Y m+1 , ..., Y t ) be the corresponding referenced resource space. For two non-null points respectively, R  X  ( p )  X  R  X  ( p  X ) holds. 
Rule 8 guarantees that if a resource entry re appears in a point p in the referencing space. Any resource space systems should conform to entity integrity constraints, member-ship integrity constraints and referential integrity constraints. In specific applications, different resource space systems should obey different context-relevant constraints. frequently used types of user-defined constraints. Two resource spaces shown in Fig. 4 are used to illustrate the user-defined and application-relevant integrity constraints. point of Tutor-Class classifies these students by their tutor and class information. 6.1 Value-Based Constraint constraints can be described as follows: &lt; Relation-Op &gt; :: = &lt; | &gt; | = |  X  |  X  |  X  . 
Take Fig. 4(a) for example, if the designer requires that any male employee should not be older than 70 and female should not be older than 60 in Age-Gender , then this user-defined constraint can be described as follows: 
For any resource entry re , ( GetAttribute ( gender ) =  X  X ale X   X  GetAttribute (age)  X  60)  X  ( GetAttribute ( gender ) =  X  X emale X   X  GetAttribute (age)  X  55) holds. 
Before the resource entry re can be inserted into Age-Gender or updated, the sys-tem should check whether the above constraint has been violated. 6.2 Resource-Entry-Based Constraint In some applications, semantic relations among resource entries should be considered. Operations on a resource entry may require other operations on semantically relevant constraint. For example, RS is a resource space that contains all registration informa-tion of students in a school and RS  X  is a resource space that contains all health infor-mation of these students. Let re be the resource entry representing a student X  X  registra-tion information and re  X  be the resource entry representing his/her health information. re  X  the insertion of re  X  or after the deletion of re . 6.3 Point-Based Constraints from the viewpoint of set theory. Take Fig. 4(b) for example, suppose that a class has 
NotNull straint can be formally represented as: 3 jNotNull  X  X   X  p . Thus, before any student information can be inserted into not. A resource space system includes functions for resource space definition, manipula-tion and system management. Its underlying metadata and data structure use XML and XML schema as shown in Fig. 5. An xml schema rsm-schema given at kg.ict.ac.cn/rsm/rsm-schema.xsd specifies th e generic definitions of resource space following statement defines resource spaces: 
The users and applications can define th e schemas of resource spaces and specify which optional constraints th ese resource spaces should obey besides the required constraints respectively. Here demonstrates how the integrity constraints of RSM are expressed in the rsm-schema of the resource space system.
 Point Constraint. The following XML definition defines the axes of RSM. The state-ment  X  &lt;xs:attribute name="iskey" type="xs:boolean"/&gt;  X  defines a flag for each axis from which the resource space system can judge whether a certain axis is one of the primary axes of a resource space. Therefor e, the resource space system can determine the primary key of a given resource space. Resource Entry Constraint. The first part of the following definition is the entry in resource space consists of a number of resource entries. The code in bold has defined the feature of  X  xs:key  X  in XML schema to guarantee the uniqueness of ID and Index of resource entries respectively. Since resource entry constraint 3 is optional, the third part has defined a boolean variable  X  IC-sem-entry  X  through which the resource space system can determine whether a resource space need to keep this semantic description constraint. Membership Constraint guarantees a resource entry to fall into the proper point in a constraint in the rsm-schema , the resource space system can provide a mechanism to make sure that all resource spaces obey this constraint. Before a new resource entry is source space system needs to re trieve the corresponding features of the resource over the point to check whether the resource belo ngs to this point. If the membership con-straint is violated, the insert or update operation should be cancelled. corresponding to the index of a resource entry in a resource space must be represented in the resource representation layer. Once modification to URIs of resource entities in the representation layer or to the indices of resource entries takes place, the resource space system needs to check whether the reference constraint 1 is violated. 
As for the reference constraints 2 and 3, using the code in bold in the first part of the following XML schema definition, the resource space system can record the refer-into referring resource spaces or removed from referred resource spaces, the resource space system will check whether the referring resource spaces and the referred re-source spaces are compatible with the reference relationship. User-defined Constraint. In the second part of above XML schema definition, the straints a resource space should comply with . Once any of these constraints is broken, the resource space system should cease the operations. The following is the definition of  X  Constraint  X  element in rsm-schema . Where the element  X  Constraint  X  is defined to totally specify which optional con-straints ( X  ic-foreign  X ), and user-defined constraints ( X  ic-userdefined  X ). Dunhuang of west China includes over 1000 ancient caves containing precious wall-painting and color statues. Our project Dunhuang Culture Grid is to exhibit the arti-source space modeling of a cave in contrast to the relational modeling. The resource uniquely determines a class of artifacts. 
The Dunhuang culture resource space schemas derived from the rsm-schema are given at kg.ict.ac.cn/rsm/dh/rsm-dunhuang.xsd. Here uses two resource spaces of the following is the creation statement: 
All its dimensions dynasty , location and status constitute the primary key. This re-source space also requires that the entity co nstraint about the entry semantic descrip-tion needs to be maintained. A resource space flying-deity-285 described below is to manage the unspoiled flying deities in cave no. 285. they constitute the primary key. The axes dynasty , location and status are the foreign contain the unspoiled flying deities. kg.ict.ac.cn/rsm/dh/fresco-285.xml and kg.ict.ac.cn/rsm/dh/flying-deity-285.xml. usability. More background and practice on Dunhuang Cultural Grid and Knowledge Grid are available at www.culturegrid.net and www.knowledgegrid.net. We are in-vestigating the integrity on a new semantic model integrating RSM with SLN (a Se-mantic Link Network model [19]). 
