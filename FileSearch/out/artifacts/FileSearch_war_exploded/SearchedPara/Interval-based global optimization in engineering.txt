 1. Introduction
Global optimization is an important issue in the field of product engineering allowing to reduce costs, to improve product performance, reliability and shorten design time. The objective of this paper is to develop powerful optimization algorithms enough to handle complex engineering problems and particularly elec-tromagnetic devices (electric actuators).

Many authors worked on the design theory and proposed several descriptions of the design process. The systematic design approach proposed by Pahl et al. (2007) and described in Fig. 1 is one of the most used design theory. The main task of the design engineers is to propose an  X  X  X ptimal X  X  design solution satisfying all the customer needs. The feasibility of a technical solution is related to the constraints satisfaction including technological, economic, environmental and legal aspects. The optimization step is performed according to one or more criteria (economic, performances, etc.).

Fig. 1 shows the design steps proposed by Pahl et al. (2007) related to the design of an electric actuator. Firstly, the customer needs are expressed through the specifications, in which some constraints are imposed. Generally, these constraints are related to the product performances, dimensions and/or the materials.
Then, these needs are analyzed, adapted if necessary and vali-dated. As the electric actuator is a well known concept, the mathematical model expressing its physical behavior is known.
According to the classification of Gero (2001) , the example of the electric actuator design belongs to the routine design class. The next step consists in formulating the final analytical model that takes the specifications X  constraints into account. During the preliminary design step, a first quantification of the design parameters is given using an optimization tool. The most used method to get a first design solution is the Finite Elements
Method (FEM). But this complex method is becoming more and more inappropriate during the preliminary design since it is based on the device geometry. Thus, the multi-physic behavior and the economic objectives are poorly managed and the com-putations are time-consuming. Let us take, as example, the electromagnetic actuator design problem. This kind of product involves simultaneously the electromagnetic, the mechanical and the heat fields. Therefore, in order to describe the physical behavior of the electromagnetic actuator, it is necessary to solve complex partial differential equations: Maxwell equations for the electromagnetic behavior, the heat equations for the heat beha-vior and so on. Generally, design engineers make assumptions in order to integrate those equations and get consequently analytic equations that explicitly link the product performances to the design parameters. Roters gives in Roters (1941 ), a set of analytic equations based on simplifying assumptions for the electromag-netic devices. This is all the more interesting as the customer specifications generally deal with the geometry, the materials and the performances parameters simultaneously. Unlike the FEM method, the analytic models based method aims to use mathe-matical equations describing the technical and the economic characteristics of the device. These models respond to the preliminary design complexity and the use of a global optimiza-tion approach aims to build an initial design solution.
The final definition of the structure is validated using a CAD software and an FEM analysis of the design solution. Finally, the production and operating documents are prepared.

This paper deals with the first step of the preliminary design step: computation and dimensioning. It attempts to propose an optimization tool adapted to a wide range of design problems. This tool is particularly suitable for the routine design as the analytic models are generally available. During the preliminary design step also called embodiment design, the concepts selected during the conceptual design step starts to materialize the product and the preliminary layouts are generated. These layouts are then optimized and several criteria could be used to evaluate them in order to select the most promising. Finally, the selected layout will be the object of a detailed design. Consequently, an important part of the product costs is incurred in the preliminary design step. Thus, it is important to use an optimization tool. The selection of the solving algorithm is extremely important. This will be guided by the problem formulation and the expected results. Numerous optimization techniques could be used at the preliminary design step. These techniques may be classified according to two criteria: the operating approach (stochastic or deterministic) and the quality of the solution sought (local or global). Many authors worked on design optimization using stochastic approaches. Isfahani and Vaez-Sadeh (2007) , Ahn et al. (2003) and Ho et al. (2008) applied a Genetic Algorithm to the design of engineering devices: electric motors and squeeze film damper. Pierre et al. (1995) applied a Simulated Annealing algorithm for the optimal design of a computer communication network. He and Wang (2007) proposed a Particle Swarm Opti-mization for constrained engineering design problems. The advantage of the stochastic algorithms is their wide range applicability and their implementation simplicity. Indeed, the objective function and the constraints are not required to be linear, convex, differentiable and continuous. Nevertheless, these algorithms do not give optimality neither feasibility proofs. In addition, they need some parameters setting which may affect the algorithm convergence.

Deterministic algorithms have also been used in engineering design. Gol and Sobhi-Najafbadi (2005) and Lin and Lin (2001) used the Sequential Quadratic Programming local algorithm for the optimal design of, respectively, electromotion devices and rotor systems. The main drawback of the local methods is that they do not give global optimality proof. Many global determi-nistic algorithms exist to solve problems with particular struc-tures: convex optimization for convex functions, simplex algorithm for linear programs, quadratic programming for quad-ratic functions. The engineering problems we solve belong to a large and complex class of optimization problems with non-linear and non-convex functions. Messine (2004) proposed a global deterministic algorithm to solve general constrained optimization problems called Interval Branch and Bound Algorithm (IBBA). This algorithm provides a global optimality proof but it is difficult to find exact global optima in a reasonable runtime. The purpose of this paper is to adapt the IBBA algorithm to the preliminary design context and enough to handle complex analytic models.
An analytic model consists of two main parts: a physico-mathe-matical model and the user specifications. (1) A physico-mathematical model : It describes the physical beha-vior of the device. This model is usually made by modeling experts from several engineering fields (mechanics, heat, electrical, etc.), and is more or less independent of the manufacturing context. It is defined as a set of analytic equations related to several physical laws. Consequently, they are tight as well as necessary to satisfy and it is better not to approximate them. A physico-mathematical model has several characteristics:  X  it involves generally 10 up to 1000 parameters and usually up to 20 degrees of freedom,  X  the mathematical formulation of the equations can either be explicit, implicit and/or including functional equations (ordinary differential equations, integrals, MinMax, etc.),  X  it is usually multi-physic, it can incorporate several engineer-ing fields (mechanics, heat, electromagnetic, etc.),  X  the analytic equations are often non-linear, having different forms according to the field: polynomial, ln, exp, cos, sin, etc.,  X  the mathematical expressions are mostly continuous but may involve some discrete variables so as to make the problem highly combinatorial,  X  the convexity of the equations is not known and is hardly determinable.

In many product design cases, the physico-mathematical expressions have the form p i  X  h i ( P ), where p i is a product performance parameter and P the vector of the design parameters. (2) Specifications : They define the user needs. Generally, they are established by the customer or the marketing department.
The specifications define the user requests in terms of production, performances and costs including:  X  one or more objective functions (minimization or max- X  parameters variation domains representing the bound  X  user new constraints: fixing some performance and design
As described in Fig. 2 , the model that should be solved is the aggregation of the physico-mathematical model and the specifi-cations. Experts in computer science and applied mathematics combine these two parts to draw up the final design model. In this paper, the approach is to convert the preliminary design model into a global constrained optimization problem. This paper only deals with the reformulation and the optimization steps. We consider that the analytical model related to a specific design application is available.

Often, we use to reconsider the specifications. Therefore, it is essential to be able to modify the model quickly and to get solutions within a reasonable time. The final model takes into account the objective function, the constraints and the variables (parameters) and can be formulated as a general global optimiza-tion problem: min subject to : where X is the hypercube defining the bound constraints for the the objective function, G  X  { g k , k A {1, y , p }} is the set of the the equality ones.

An inequality constraint can be reformulated into an equality by adding a slack variable ( x i  X  g i ( x )) such that ( x
Ny 0]). In addition, we assume that the constraints are explicit, meaning that they have the form p i  X  h i ( P ). Then, the optimization
Preliminary design problem handled in this paper can be formulated as follows: p i  X  h i  X  P  X  , 8 j A f 1 , ... , q g 8 &lt; :
Fig. 3 shows an example of the analytical model of an electric actuator. This model has 6 analytic constraints and 17 variables. The constraints and the objective function are non-linear and non-convex. In the specifications, some variables are fixed and for the remaining ones, bound constraints are given. This model is detailed in the Section 5 .

From now on, we consider that the objective function and the constraints are expressively available and continuously differen-tiable. The models with implicit or differential equations systems are not handled here. This paper propose to adapt the IBBA algorithm and to solve a large class of engineering problems. Within this framework it is possible:  X  to achieve consistent enclosure for the global optimum and all its optimizers within a precision frame given by the user,  X  to display reasonable runtime (reduced number of model evaluations) in solving complex engineering preliminary design problems,
This algorithm is based on interval analysis, constraint propa-gation and model reformulation:  X  Interval-based branch and bound algorithm : It is a global opti-mization algorithm based on interval computation. It allows to enclose all the global optima or to give a nonexistence proof if there is none ( Hansen and Walster, 2004 ),  X  Contractors : The contractors are the interval extension of the constraint propagation operators. A contraction as an acceler-ating device is a procedure that reduces the search domain by discarding non-feasible regions,  X  Model reformulation : The main contribution of this paper is a reformulation step introduced as an accelerating device and made the problem-solving more powerful. The reformulation takes advantage of the intrinsic characteristics of many pre-liminary design problems. The main idea is to reduce the complexity of the model so as to reduce the number of model evaluations. This can be reached by reducing the number of the model parameters.

As this algorithm is a general optimization method, it could be applied to the innovative or creative design as long as we have the analytical model.

In order to understand the optimization algorithm, some basic definitions and properties of interval analysis are introduced in the second section. In the third one, the basic optimization algorithms for both unconstrained and constrained problems are presented and illustrated. The fourth section introduces the reformulation technique as a main accelerating device. Finally, the last section shows an application of the reformulation device coupled with the global optimization algorithm on the optimal design of electrical actuators. 2. Basics of interval analysis
The global optimization algorithm is based on the branch and bound principle. At each iteration, the search domain (a box) is bisected, and the regions that cannot contain the global optimum are discarded. In order to make possible to discard a box, it is essential to evaluate the objective function and the constraints over that box. Rather than evaluating them point by point, we use the interval arithmetic that permits to give lower and upper bounds of a function over a box.

The interval arithmetic has been introduced by Moore in 1966 as an approach to overcome rounding errors ( Moore, 1966 ). Since then, many applications and improvements in global optimization have been proposed taking advantages of the increasing proces-sing power of computers ( Ratschek and Voller, 1991 ; Kearfott, 1992 ; Hansen and Walster, 2004 ; Messine, 2004 ). Before explain-ing the optimization algorithm, let us give some definitions. Definition (Interval). An interval is a connected ([1 y 2] [ [3 is not an interval), closed ([1 y 2[is not an interval) subset of R . The set of all intervals of R will be denoted R .
 Definition (Box). A box is an interval vector defined by the Cartesian product of n intervals: the vector ([1 y 2],[4 y bi-dimensional box. An n dimensions box is an element of I R 2.1. Elementary operations Consider two intervals X and Y . We define X \ Y  X f x = x A X 4 x A Y g , X [ Y  X f x = x A X 3 x A Y g , X \ Y  X f x = x A X 4 x = 2 Y g , X Y  X f X  x , y  X  = x A X 4 y Definition (Range). Let f be a function from D D R n in R X
A I D . We call image by the function f of X the following subset : range ( f , X )  X  { f ( x )/ x A X }.

Instead of defining arithmetic operations on fixed numbers, the interval analysis extends these operations to intervals. All the elementary operators have been redefined for interval. Definition (Elementary operators). Let X and Y be two intervals and 3 A f X  , , , = g : X 3 Y  X f x 3 y = x A X , y A Y g .
Thereby  X  a ... b  X  X  c ... d  X  X  a  X  c ... b  X  d  X  a ... b  X  c ... d  X  X  a d ... b c  X  a ... b =  X  c ... d  X  X  a ... b  X  1 = d ... 1 = c if 0 = 2 X  c ... d
Note that subtraction (respectively, division) is not the inverse operation of addition (respectively, multiplication). Extended interval arithmetics have been proposed to allow division by an interval containing 0 and to allow open intervals and infinite bounds ( Hansen, 1980 ). Other extended arithmetics have been proposed, such as Affine arithmetics ( Messine, 2002 ), symbolic interval arithmetics ( Jaulin and Chabert, 2010 ). Elementary func-tions (exp, ln, power, cos, sin, etc.) have also been extended to intervals. We also define the following notions for intervals and boxes. Let i be an interval [ a y b ]:  X  lef t  X  X  a ... b  X  X  a , right  X  X  a ... b  X  X  b :  X  mid ( i )  X  (( a  X  b )/2) the middle (center) of the interval [ a a box, the vector middle of the box intervals. For example, for a box X  X  ([1 y 2],[4 y 5],[4 y 10]), mid ( X )  X  (3/2,9/2,7). defined by the width of the widest interval. For example, for a box X  X  [1 y 2],[4 y 5],[4 y 10]), w ( X )  X  max (1,1,6)  X  6.  X  The bisection operator allows to explore smaller parts of the search domain. This operator split a box B through a specific direction in order to generate two boxes B 1 and B 2 such that the two equal intervals [ a y (( a  X  b )/2)] and [(( a  X  b )/2) most common bisection rule is that which defines the splitting direction as the largest edge of the box. The bisection of the box ([1 y 2],[4 y 5],[4 y 10]) by its largest side generates the two boxes ([1 y 2],[4 y 5],[4 y 7]) and ([1 y 2],[4 y 5],[7 y theless, there are many other splitting rules such as the bisection following Baumann center ( Baumann, 1988 ), multi-section tech-niques ( Casado et al., 2000 ). In the next section, we introduce the extension to intervals of more complex functions: the inclusion functions. 2.2. Inclusion functions
The constraints addressed in this paper are a combination of elementary operations. In order to handle these constraints, extensions to intervals of the common functions are introduced.
The inclusion functions allow extending any usual function to intervals. This property is particularly useful in constraint propagation.

Definition (Range). Let f be a function from D D R n in R X A
I D . We call image of X by f the following subset : range  X  f , X  X  X f f  X  x  X  = x A X g :  X  min Definition (Inclusion function). Let f be a function from D D
R n in R m . Let F be another function from I D in I R m . The function F is called inclusion function of f in D if and only if : range  X  f , X  X  D F  X  X  X  : inclusion function.

Knowing that the extensions to intervals of the elementary operations are by definition inclusion functions for the elemen-tary operators, a trivial inclusion function can be built. It is obtained by exchanging the usual elementary operators by their interval extensions. This inclusion function is called the natural inclusion function.

Definition (Natural extension). Let f : R n -R a continuous func-tion. The interval function F : I R n -I R having the same expres-sion as f , in which the classic operators are replaced by their interval extensions, is called the natural interval extension of f.
Let us introduce a simple function and compute the image of the interval [.5 y 2.0]: f : R -R x / x x 2
The natural extension F 1of f has the same expression but using the interval operations: F 1 : I R -I R
X / X X 2 F 1  X  X  0 : 5 ... 2 : 0  X  X  X  0 : 5 ... 2 : 0  X  0 : 5 ... 2 : 0  X  X  3 : 5 ... 1 : 75 Now, if we use the same function under other forms: F 2 : I R -I R X / X  X  1 X  X  2 F 2  X  X  0 : 5 ... 2 : 0  X  X  X  2 : 0 ... 1 : 0 F 3 : I R -I R
Using the inclusion function F 3 we obtain the smallest enclo-sure of f on the interval [.5 y 2.0]. So, the quality of an interval evaluation of a function is highly dependent on the form of the inclusion function. The more precise the enclosure of the function is the more effective the optimization algorithm will be, as it deals with smaller search boxes. For the interval evaluation of an expression, each occurrence of the same variable is processed as a different variable. The dependency between the occurrences of a variable in an expression is lost. In F 3 the interval variable X occurs only once, allowing no overestimation of F ( X ). Therefore, other inclusion functions have been introduced: Taylor 1st and 2nd orders ( Hansen and Walster, 2004 ), optimal centered forms ( Baumann, 1988 ), and Kite ( Vinko et al., 2004 ).
 Definition (Taylor first order extension). Let f : D D R n -gradient enclosure of f and y any point belonging to the box X , for and is called the first order Taylor extension. The Taylor extension is a particular case of centered forms.

This extension is particularly interesting since it allows the linearization of any function. This property is very useful in the constraint propagation step. For more details about interval computation, see Moore (1966 ) and Kearfott, (1996 ). 3. Interval-based global optimization
The global optimization algorithms used in this paper are based on the branch and bound principle; the branching is done by bisecting the search domain (box), and the bound by evaluating the model and discarding boxes that do not contain the optimum. In the case of minimization problems, the Interval Branch and
Bound Algorithm (IBBA) maintains an upper bound ~ f of the global minimum x n and updates it throughout its execution. If we consider a box X such that f  X  X  X  4 ~ f , meaning that the lower bound of the interval f ( X ) is greater than the current upper bound lef t  X  f  X  X  X  X  4 ~ f , this box obviously does not contain the global minimum and is consequently discarded. Other tests have been introduced as accelerating devices allowing discarding more boxes. These accelerating tests depends on whether the problem is constrained or not. In addition to the upper bound, the optimization algorithm maintains throughout the iterations two lists of boxes. One list contains the boxes that have to be evaluated ( workList ). The other one contains the boxes that have not been discarded and have a maximum width E fixed by the user, so that as input and gives as outputs a list of boxes that contain the optima (if there is at least one) and an upper bound of the global optimum which is necessarily a feasible point. To illustrate the interval-based branch and bound principles, the first introduced algorithm deals with the unconstrained case: min 3.1. Unconstrained IBBA
The first algorithms for unconstrained optimization problems have been developed by Hansen (1979 , 1980 ). Three accelerating devices can be used in order to eliminate boxes that cannot contain the global optima: bound test, monotony test and con-vexity test, as illustrated in Fig. 5 . The interval I 1 cannot contain the optimum as f is strictly monotonous on it. On interval I concave, so it can be discarded. I 3 is discarded as its objective function value is greater than the actual upper bound.
To illustrate the unconstrained problem, we use the Six-hump camel back function: f 1 contains 2 global minima and 4 local minima which are very close. We tested the IBBA algorithm on this function and we compared the results with and without using accelerating tests (monotony and convexity tests). The benchmark review shows that the upper bound of the global minimum obtained is ( 1.031628453489). The global optimizers have been enclosed in two symmetrical boxes with a precision on the boxes width of width  X  1 : 0e 8: Opt 1  X  Opt 2  X 
As illustrated in Fig. 6 , during the algorithm execution using accelerating tests, 159 boxes have been discarded using the bound test (gray), 204 using the monotony test (white), 10 using the convexity test (black) and 2 boxes containing the global optimizers (dotted boxes).

The results summarized in Table 1 show that the accelerating tests are very efficient in the unconstrained cases, even with many local minima. The lower bound obtained using accelerating tests corresponds to the global minimum with a 1.0e 8 precision.

The monotony and convexity tests are not appropriate in the case of constrained problems. However, other techniques have been developed in order to take constraints into account. 3.2. Constrained IBBA
The accelerating devices that will be developed for the con-strained case are derived from the constraint programming, as an adaptation of the constraint propagation techniques. Constraint satisfaction problems have been used and adapted to solve multiple engineering design problems such as in Aldanondo et al. (2008 ), Yvars (2009 ) and Qureshi et al. (2010 ). Definition (Continuous CSP). A continuous CSP (Constraint Satisfaction Problem) is a triplet X , D , C defined by a set of n D  X  { D 1 , D 2 , y , D n } such that x 1 A D 1 , x 2 A D of m constraints on the variables C  X  { C 1 , C 2 , y , C constraint, r c defines the set of all points of R n that satisfy the constraint C.
 The interval extension of constraint propagation is called Contractor, an operator that allows discarding parts of the search space that do not contain feasible solutions ( Jaulin et al., 2001 ). Definition (Contractor). A contractor, also called narrowing operator, for a constraint C is a function. C X : I R n -satisfies the two following properties: 8 x A I R n ,
For example, considering the atomic constraint C : x 1  X  x and the intervals D 1 , D 2 and D 3 , respectively, for x possible narrowing operator can be computed as follows: D  X  D 1 \ X  D 2  X  D 3  X  D  X  D 2 \ X  D 1 D 3  X  D  X  D 3 \ X  D 1 D 2  X  8 &gt; &lt; &gt; :
A complete library has been implemented in Java in order to compute narrowing operators for all atomic constraints (plus/ minus, mult/div, exp/ln, sin/arcsin, cos/arccos, sqr/sqrt, abs). For atomic and linear constraints, a contraction function can be formulated easily because each variable can be expressed with the other ones. This task is much harder for a general engineering design constraint, as they are generally non-linear and non-convex. For more complex constraints, precisely non-linear con-straints, two solutions have been proposed: 1. A method based on linearization using centered forms such as
Taylor first order extension ( Hansen and Walster, 2004 ). For a non-linear constraint C ( x )  X  0 defined on a box X , it is possible to express the Taylor first order interval extension: 8 y
A X , C  X  X  X  D C  X  y  X  X  G  X  X  X  X  X y  X  where G ( X ) is the gradient X  X  enclosure of C . Then, we can express each variable X i using the others:
X  X  X i \ y i  X  where X i the i th component of X , C 0 i  X  X  X  the i th component of
G ( X ). Therefore, to use this contraction technique, it is neces-sary to compute all the first order derivatives of the con-straints. Hand computing of all the derivatives is not an easy task for real engineering design problems. To handle this issue, techniques and softwares for automatic differentiation are available, such as Matlab and Pro@Design ( DPT, 2010 ). 2. A method based on the calculus tree named Hull consistency ( Benhamou et al., 1999 ).Themainideaistocreateintermediate constraints in order to transform a complex constraint into a set of elementary constraints (atomic constraints). This technique has been tested and shown good performances ( Messine, 2004 ).
Compared to the unconstrained IBBA, three main adjustments are made to implement a constrained IBBA (also called Branch and Prune):  X  each box taken from the workList is systematically pruned (contracted),  X  during the updating step, a feasibility test is added: the upper bound must be feasible,  X  the stopping test contains an additional condition  X  ~ f b bound  X  . This test reflects a requirement on the quality of the solution. Through this test, we are certain that the global minimum is greater than  X  ~ f e bound  X  .

The algorithm has a branch and bound structure. Inside, the interval analysis is used to evaluate enclosure functions over the boxes, and the contractors allow to reduce the search domain ( Algorithm 1 ).

Algorithm 1. Constrained global optimization algorithm 1 : Initialize X  X  the initial box in which the global minimum is sought. 2 : Initialize ~ f  X   X 1 3 : Initialize the list workList  X   X  X 1 , X  X  : the structure that will contain the boxes that remain to be explored. The elements in the workList have the form: ( lower bound of f , Box ). 4 : Initialize the list resultList : empty while ( workList not empty ) for i from 1 to 2 if  X  b inf 4 ~ f  X  end for end while
Complete interval analysis library and optimization algorithms have been implemented in Java version 1.6.0_19 . The tests have been accomplished on a 2.6 GHz Intel core i5 with 8Go-RAM .Wehave realized tests to evaluate the contribution of the contractors on two mathematical models. They are relatively simple examples but they will permit us to evaluate the effectiveness of the contractors and to identify some problems. The test case 2 has two variables allowing us to show the efficiency of the acceleration devices on a 2D graphic
The numerical results are summarized in Table 2 . Without the use of contractors, neither the first nor the second test case have been solved. This is explained by the number of boxes in the worklist that increases exponentially and exceeds the size of the heap memory (512Mo). In addition, no updates have been done as no feasible point has been found. Consequently, no boxes can be discarded. In the other side, the contractors reduced significantly the search space which permits to easily find feasible points and consequently update the upper bound.

As illustrated in Fig. 7 concerning test case 2, the upper bound of the global minimum obtained is ( f ( X n )  X  22.09075666) with a precision of e width  X  1.0e 5. During the execution of the algorithm using a contractor accelerating device, 116 boxes have been discarded using the bound test (in black), only one upper bound update and an important part of the search area discarded using constraint propagation (white parts). The white parts are not necessarily boxes as they are parts of boxes that do not contain feasible solutions. Four boxes enclosing the global optimum have been selected (in gray). The global optimum corresponds to the last upper bound update: X n  X  X  0 : 84089641 , 2 : 99999999  X  . For more details and recent advances about contractors see Benhamou et al. (1999 ), Chabert and Jaulin (2009 ) and about constrained interval-based optimization see Ratschek and Rokne (1988 ), Byrne and Bogle (1996 ), and Hansen and Walster (2004 ).
Despite the efficiency of the accelerating devices, especially the constraint propagation, updating the upper bound of the global optimum remains difficult. In fact, even using the contrac-tors, IBBA was able to find only 4 feasible solutions for the test case 1 (more than 2 millions iterations) and only 1 feasible solution for the test case 2 (74 iterations). Currently, the upper bound is updated by testing whether the middle of the current solution when instantiating the variables independently of the constraint especially if the constraints are very tight, which is particularly true for equality ones. Knowing that the variables are strongly linked to each others in the equality constraints, it would be interesting to use this information in order to reduce the number of variables to be determined. If we note n v the number of variables and n c the number of equality constraints, supposed explicit and independent, the problem can be summarized in the determination of ( n v n c ) variables, the remaining variables are directly computed using the constraints. These independent variables are called the degrees of freedom. This model simplifi-cation can be reached through a reformulation step. 4. Model reformulation
Frequently, the constraints of a particular optimization pro-blem may be modeled by several equivalent CSPs. Performance and behavior of an optimization solver may change drastically even with equivalent CSPs. To choose the best model for a particular problem, it is important to understand the underlying optimization and constraint propagation algorithms.

Some modeling techniques are commonly adopted to improve the accuracy and efficiency of the interval-based optimization solvers. A fundamental problem of interval analysis is the dependency. In the interval arithmetic evaluation of an interval expression, each occur-rence of the same variable is processed as a different variable. The dependency between the different occurrences of a variable in an expression is lost. Some expression s may be rewritten into equivalent ones that minimize this problem. For polynomial expressions, we factorizeasmuchaspossibletoobtainfunctionswithmonovariable occurrences ( Section 2.2 ). For the example function f  X  x  X  X  x x 2 , instead of using the constraint inclusion function F 1( X )  X  X X use the optimal inclusion function F 3( X )  X  .25 ( X .5) The natural inclusion function F 1 overwraps the f ( x ) function. For Test case 1 Test case 2 subject to :  X  0 , X A  X  0 ... 2  X  0 ... 3 more general constraint structure, w e use better interval extensions: mean value forms, Taylor forms (first and second orders), etc.
Continuous global optimization algorithms rely on interval techniques for dealing with numerical errors. A consequence of these numerical errors is the amplification of the variable domains and poor pruning results. Two major sources of numer-ical errors are operations with large numbers and operands with different magnitudes. Making some variable substitutions and scaling both objective function and constraint system may allow us to improve the algorithm performance. For example, instead of using constraint  X  10 10 x 2  X  x  X  10 10  X  0  X  , consider ( x  X  10 use the constraint  X  y 2  X  y  X  1  X  0  X  .

Constraint optimization solvers rely on the efficiency of the branch and prune algorithms to enforce consistency on the CSP variables. Precision and efficiency may be improved if the number of variables is reduced. Sometimes a set of constraints may be rewritten and reformulated into an equivalent system with fewer variables. The idea of reformulating the model came from a weak point of the interval branch and prune algorithms. In fact, there are two mechanisms that strongly impact the efficiency and performance of the optimization algorithm: the contracting step and the bound updating step. After testing the interval-based optimization algorithm, enhancements can be made by improving the upper bound updating step. The reformulation aims at stimulating this step, thus allowing the algorithm to discard more parts of the initial search box with the bound test.

In order to understand the degrees of freedom based reformu-lation, let us look at the structure of engineering design models. in the engineering model. We assume that the constraints have the following form: P  X  f i  X  P  X  P  X  f j  X  P  X  ...
 P  X  f k  X  P  X  8 &gt; &gt; &gt; &gt; &lt; &gt; &gt; &gt; &gt; :
For instance, a preliminary design model could have the following structure:
P  X  X  P 1 , P 2 , P 3 , P 4 , P 5 , P 6  X 
In the classic algorithm, the upper bound of the global minimum is updated by testing if the center of the current box respects the equality constraints. In fact, every parameter is instantiated independently by the middle of its corresponding interval. This permits to ensure the bound constraints, and only afterwards, the equality constraints are tested. With the reformu-lation, the approach will be reversed. We will first ensure the satisfaction of the equality constraints, which are very tight, and then we will test if the variable bound constraints are satisfied, which are easier to fulfill.

Since this paper deals with explicit systems, the parameters can be classified into two sets: Input parameters and Output parameters. In the reformulation step of this example illustrated remaining parameters P 5 and P 6 . Indeed, for a given input set, the outputs can be cascade-computed via the constraints. For this, the constraints must be addressed in a specific order. For this example, we consider that the suitable order is f 1 , f 2
Thus, f 1 is necessarily a function of inputs only, f 2 is function of inputs and output of f 1 , f 3 is function of inputs, output of f output of f 2 , etc.

To summarize, the reformulation consists in two main phases, each one is composed itself of two smaller steps. The first phase is to reduce the problems related intrinsically to the use of interval computation. This could be done by factorizing the constraints in order to reduce as much as possible the variables multi-occur-rence, and by normalizing the variables sizes so as to obtain homogeneous intervals and thus reducing the rounding errors and avoiding splitting the search space by the same variables (the largest ones). The second phase is to reduce the model variables by treating only the degrees of freedom. This could be done by classifying the constraints in the appropriate order that allows computing the output parameters using the input parameters. Also, it is necessary to ensure that the outputs vary in large intervals in order to make the feasibility test easier. Fig. 8 summarizes this phase. We denote by I the set of the input parameters and by O the set of the output parameters. The set O ( f i ) represents the output parameters of the f i function, for instance O ( f 1 )  X  P 1 .

Let n v be the total number of variables (design parameters), and n c the total number of constraints. As the constraints are independent, the problem has ( n v n c ) degrees of freedom, which corresponds to the input parameters. Since the outputs could be directly deducted from the inputs, the optimization problem can be reduced to only determining the optimal inputs. Consequently, the algorithm could process boxes of only ( n v n c ) dimensions. It should be noted that the reformulated problem is theoretically the same in terms of final results as the initial problem, but much simpler. According to the classification of the mathematical programming reformulations proposed by Liberti (2009) , this reformulation is an opt-reformulation as all the optimums are preserved. This step considerably reduces the complexity of the problem and increases the algorithm performances. This can be explained by two main reasons:  X  processing smaller boxes mechanically reduces the complexity of the problem, as we can reach better precision in less computing time. This would obviously make the convergence of the algorithm much faster, since we reach the epsilon precision rapidly,  X  the bound updating step takes advantage of this reformula-tion. In fact, processing only the degrees of freedom makes the step of the upper bound updating much easier.

Two steps of the constrained optimization algorithm pre-viously presented must be revised in order to take into considera-tion the reformulation step: the bisection and the bound updating steps. The bisection is processed only on the input parameters. At each iteration, the bisection is performed by the largest side among the input parameters. For example, if the current box is B  X  ([5 y 9],[1 y 5],[2 y 8],[3 y 4],[2 y 4],[1 y 2]), the resulting boxes of the bisection step are the two boxes B 1 and B 2 input parameters are P 5 and P 6 : B B  X  X  X  5 ... 9 ,  X  1 ... 5 ,  X  ... 8 ,  X  3 ... 4 ,  X  3 ... 4 ,  X  1 ... 2  X 
The bound updating step is no longer done by the center of the whole box. It is however done by taking only the center of the input parameters box, and computing the corresponding output parameters. This step ensures that the resulting output para-meters satisfy all the analytical constraints except the bound constraints. Indeed, we only have to check if these resulting output parameters belong to the search space. For the test case 2 introduced earlier, if we reformulate the problem as follows: min f  X  x  X  X  12 x 1  X  X  x 2 7 = 2  X  2 49 = 4 subject to : x 2  X  2 x 4 1  X  2 X A  X  0 ... 2  X  0 ... 3
Mathematically, this problem remains the same. The objective function f ( x ) has been rewritten into equivalent that minimizes the dependency problem, range ( f ( x )) in this case. The output parameter is x 2 , the input is x 1 . If the current box is ([0 y 1],[0 y 2.5]), take the middle of the input variable x 1 obvious that the vector (.500,2.125) is an instantiation of the variables that respects the equality constraint as it is computed in light of it. However, we have to verify that the output variable x respect its bound constraint as the input variable x 1 respects by construction its bounds. Here we have to verify that 2.125 belongs to [0 y 3].

First, we tested the new algorithm on test cases 1 and 2. We added the reformulation step and made a comparison with the previous results ( Tables 3 and 4 ).

We noted marked improvement in the number of iterations and in processing time as in Table 5 . In fact, we noted a gain of about 75% for the test case 1 and 40% for the test case 2. The obtained optimums are almost the same, but we noted an improvement in the number of updates that passed from 2 to 43 for the test case 1 and from 1 to 23 for the test case 2. 5. Application to the optimal design of electromagnetic actuator 5.1. Model presentation
The efficiency of the reformulation has been tested on a more realistic design problem: a rotating machine with magnetic effects ( Fig. 9 ). The detailed description of the problem and the constraints are available ( Kone et al., 1993 ). The problem consists on dimensioning a slot-less rectangular waveform permanent magnet machine called MAPSE. Many aspects are present in this problem and we can find constraint parameters from several engineering fields. The MAPSE design analytical model, estab-lished from simplified electromagnetic modeling, corresponds to various equations ensuring the flux conservation in the magnetic circuit, the electromechanical conversion and the overall heating up due to the losses in the stator by Joule effect ( Messine et al., 1998 ).

The electromagnetic torque, calculated by integrating into the whole zone the product of no-load magnetic flux density by current, is given by G em  X  X  p = 2 l  X  X  1 K f  X  where D is the bore diameter, E is the winding thickness, k the fitting factor, l is the magnet machine form factor (ratio of D to the length of iron L ), l  X  D / L , b is the polar arc factor, K coefficient of the magnet leakage resulting from the relative importance of the magnetic air gap inherent in the slot-less structure, B e is the amplitude of the no-load-flux density at the level of the bore diameter. The machine global winding heating
E is defined by the relation: E ch  X  k r EJ 2 cu , where J cu current areal density and k r E is the current electric loading ( k the coil winding filling factor and E the winding thickness). If e indicates the mechanical air gap, an empirical relation between the magnetic leakage coefficient K f and the machine geometric dimensions has been established using the finite difference method: K f ffi 1.5 p b (( e  X  E )/ D ). The no-load magnetic field B the air gap, supposed exclusively radial, is given by:
B  X  X  2 l a M =  X  D log  X  X  D  X  2 E  X  =  X  D 2  X  l a  X  e  X  X  X  X  , where l of the permanent magnets and M their magnetic polarization. An expression of the thickness C of the magnetic field in the iron B is given. The inter polar leakage and armature reaction flux are assumed negligible allowing the conservation of the flux emitted directly proportional to the bore diameter D and inversely proportional to the pitch pole D p : p  X  p D / D p .

This structural model is multi-physic. In fact, it combines constraints from several engineering fields: electrical, magnetic, mechanical and heat. It consists exclusively of equality con-straints which are non-linear and explicit. The model parameters and their bound constraints (including user specifications) are summarized in Tables 6 and 7 .

The user specifications consist in dimensioning a machine capable of developing a G em  X  10.0 N m electromagnetic torque using rare earth-type magnets ( M  X  0 : 9T) and laminations that can stand a flux density of B fer  X  1.5 T. Because of the form of the used conductors and insulators, the coil winding is fixed at 70% ( k  X  .7) filled by copper such that the global winding heating up is E  X  10 11 A/m. The number of pole pairs is fixed to p  X  4 and the pitch pole must be in the region of 100 mm ( D p  X  .1 m). Because of manufacturing constraints, the mechanical air gap must be more than or equal to 1 mm ( e Z .001 m). Inter polar leakages should be limited to 30% of the total flux generated by the inductor ( K
In this case study, the machine must be sized in order to minimize the active part volume V u : Min V u  X  p D l  X  D  X  E e l a  X  X  2 C  X  E  X  e  X  l a  X 
The structural design model that should be solved is defined as aggregation of the physico-mathematical model and the user specifications. These two parts are mixed to draw up the final design model corresponding to a global constrained optimization problem.

The model consists of 17 parameters including 7 fixed para-meters. Consequently, we have to determine 10 parameters. The model has 6 independent equality constraints. Therefore it has 4 degrees of freedom (input parameters) ( Fig. 10 ).

After the reformulation step, the global optimization model has the following form: Min V u  X  p D l  X  D  X  E e l a  X  X  2 C  X  E  X  e  X  l a  X  subject to
In the reformulated model, we can see that the first and the second constraints are function of only inputs, the third is function of the inputs and the outputs of the previous equations and so on. This order allows us to compute iteratively the outputs for given inputs. In addition, we made sure that the outputs vary in interval so as to make easier the feasibility test. Within this reformulation, the structural model contains 4 degrees of freedom (input variables): e , l a , E and # a. The remaining variables ( D , J K , and C ) are output variables.

In order to evaluate the impact of the reformulation, we introduced a feasibility coefficient a . The feasibility coefficient a is defined experimentally by calculating the percentage of feasible solutions among 1 000 000 randomly generated solutions from the search space. We summarize the obtained results in Table 8 .
We noted marked improvement in the coefficient a in the reformulated model from almost 0% to 5.1121%. The reformulated model remains mathematically the same, and as a result the constraints have the same mathematical properties. In fact, we have the same number of linear inequality constraints (LInC), non-linear inequality constraints (NLInC), linear equality con-straints (LEC) and non-linear equality constraints (NLEC). Com-bined with the constraint propagation techniques, the reformulation impact would be more significant. In the next section, the test results using the IBBA algorithm will be detailed. 5.2. Numerical results
The electromagnetic actuator optimization model is solved using the IBBA based on constraint propagation. We have com-pared the two approaches: without and with reformulation. The results are summarized in Table 9 . The table shows the definitive upper bound of the global minimum, the corresponding CPU time and iteration number. Also, it shows the number of updates and feasible solutions found during the algorithm execution.
These results show that the updating of the upper bound is much easier with reformulation; fewer iterations and less execu-tion time. It should be noted that, without reformulation, a tolerance of E t  X  1 : 0e 3 has been added to the equality con-straints in order to make the update step faster. Consequently, an equality constraint p i  X  f ( P ) is replaced by p i A  X  f  X  P  X  As said earlier, these equality constraints are the expression of the physical laws and thus their relaxation is not recommended. With the reformulation, no relaxation has been made. The solutions found respect scrupulously the equality constraints.

Figs. 11 and 12 show that, without reformulation, the first update of the upper bound of the global minimum is done after 14 142 iterations, despite the constraints relaxation. On the other hand, the reformulation makes this step much easier. From the very fourth iteration, the algorithm has succeeded in finding a feasible solution. The update step has succeeded, almost instantly, in bringing the upper bound very close to the global minimum. The best solution is found after 19 781 585 iterations without using the reformulation. With the reformulated model, the best solution, which is slightly better and more accurate, is found after 153 067 iterations. This increase in the algorithm convergence is explained by the bound test that permits to discard more boxes since the upper bound is updated more often. We move from 12 updates (in 60 151 649 iterations) to 34 updates (in 470 960 iterations). The upper bound is updated more often simply because the algorithm finds feasible solutions easily. The number of feasible solutions found increases from 124 434 to 705 461. 6. Conclusion
Deterministic methods are very interesting in the way that they guarantee the global optimum X  X  enclosure. Their main draw-back is that they may be time-consuming. The purpose of this paper is to introduce an adapted optimization procedure that permits to:  X  find and enclose the global optimum and all its optimizers with a precision fixed by the user,  X  display reasonable runtime in solving engineering preliminary design problems.

The interval analysis guarantees the enclosure of the global optimum and all its optimizers. This allows us to reach the first goal. The accelerating devices have helped us to reach the second goal. By adding a reformulation step, which came from using particular characteristics of many preliminary design models, the upper bound updating of the global minimum has become much easier. We succeeded to diminish notably the number of model evaluations, which constitute the greater part of the total run-time, from millions to thousands. In addition, no relaxation is required to make the update of the upper bound possible. This is all the more important as the analytical model consists of strong constraints. Many tests have been conducted in order to illustrate the efficiency of the algorithms and the reformulation step. Among these tests, we have validated our solution on the electromagnetic actuator design model. The obtained results correspond to the fixed targets. Naturally, many other improve-ments have to be made. The next steps revolve around two axes:  X  Theory : Improve the bound updating step and the quality of the inclusion functions used in the contractors. Also, many papers show the efficiency of the affine arithmetic and algorithms have been proposed ( Messine, 2002 ),  X  Implementation : Currently every design model must be imple-mented separately and  X  X  X anually X  X  with its corresponding contractors. In order to make the algorithm introduced in this paper more practical, it is essential to automate these operations.

Actually, we are testing our algorithm on other real engineer-ing design problems such as a motorized hatch for the automotive industry, a heatsink for the laptop industry and so on. Also, we are working on global stochastic methods, such as PSO or Ant Colony algorithm, on real design problems. The work is in progress and, at this stage, we have only preliminary results. Our main purpose is to put our examples in benchmarks in order to make compar-isons with other research teams working on the same subject. References
