 Phase change memory (PCM) is one type of random-access memories. Compared with DRAM, PCM has the advantage of non-volatility, high density, and low energy Thus, PCM is regarded as an alternative of future random-access memories and receives much attention in recent years [1 -3]. However, PCM has some limitations, DRAM. Therefore, it is not feasible to completely replace DRAM with PCM in current memory architectures. Instead, a more exciting idea is to use PCM to enhance shown in Fig. 1. Thus, we can utilize the advantages of both PCM and DRAM [4-6]. 
One challenge for PCM/DRAM-based hybrid memory architecture is that we have to cope with heterogeneous memories. Traditional buffer management schemes are mostly designed on the basis of DRAM-only main memory and do not consider the special properties of PCM. Simply employing an existing buffer management policy for PCM/DRAM-based hybrid memory systems will lead to too many writes to PCM, which will worsen overall performance and shorten the lifecycle of PCM. An intuitive replacement on PCM. 
In this paper, we present an efficient buffer management scheme for PCM/DRAM-based hybrid memory systems shown in Fig. 1(b). Differing from previous works, we not only aim to keep write-intensive pages in DRAM and thus make most writes focus on DRAM, but also try to avoid fr equent page-replacements on PCM (because contributions in this paper: (1) We present a new buffer management policy named D-CLOCK for PCM/DRAM-based hybrid memory architecture. D-CLOCK uses two clock data structures to maintain DRAM and PCM pages, and employs a page exchange method replacement algorithm to reduce page replacements on PCM. To the best of our knowledge, our work is the first one considering optimizing page replacement algorithms to reduce PCM writes in hybrid memory. ( Section 3 ) (2) We conduct trace-driven experiments in a simulated PCM/DRAM-based hybrid compare our proposal with several baseline methods. The experimental results suggest that our proposal can greatly reduce PCM writes and maintain a high hit ratio for PCM/DRAM-based hybrid memories. ( Section 4 ) Due to the different access latencies and write endurance of PCM and DRAM in hybrid memory architecture, conventional pa ge replacement algorithms designed for DRAM-based memory are not suitable for managing pages in hybrid memory. For performance of page replacement algorithms, but in PCM-enhanced hybrid memory architecture, PCM write count becomes another critical metric. 
The LRU algorithm is one conventional page replacement algorithm that has been widely used in database systems based on disks or new storage devices such as flash memory [7, 8]. LRU sorts pages in memory according to their recent reference time. When a page fault occurs and no free frames in memory, the least recently used page is selected as victim for page replacement. LRU shows good performance for temporal locality workloads [9], but it has the overhead of page movement in the list. The CLOCK algorithm was proposed as an approximation to LRU [10]. It organizes pages in memory as a circular list and sets a reference bit for each page. When a page hits in memory, its reference bit is set to 1. When a page fault occurs, CLOCK starts from the page next to the last evicted page and sequentially scans pages in the circular list to find a page with a reference bit 0. When a page with reference bit 1 is checked, its reference bit is set to 0. page replacement algorithms for hybrid memory architecture have to consider conventional algorithms, some page repl acement algorithms aiming to reduce PCM writes in hybrid memory have been presented. CLOCK-DWF is a CLOCK-based algorithm for hybrid memory [4]. It manages DRAM and PCM separately, places pages associated with read requests in PCM and pages for write requests on DRAM. When a page in PCM is hit by a write request, the page is moved to DRAM. To get a free frame in DRAM, CLOCK-DWF moves a write-cold page in DRAM to PCM. APP-LRU is an LRU-based buffer management scheme for PCM-based hybrid memory [5]. It records the access history of each page using a history table to identify stored in PCM and write-intensive pages are saved in DRAM. When a page fault request type. MHR-LRU [6] is also an LRU-based algorithm for hybrid memory. It performs page migration between PCM and DRAM to reduce PCM writes and maintain a high hit ratio. 
CLOCK-DWF, APP-LRU, and MHR-LRU are all designed to keep write-intensive pages in DRAM to absorb future write requests, but they do not consider the influence of page replacements in PCM writes. On the other hand, a page replacement in PCM replacement scheme for PCM-enhanced hybrid memory so that we can reduce the PCM writes incurred by inappropriate page replacements. 3.1 Main Idea pages reside in DRAM so as to reduce writes to PCM. Second, we aim to avoid frequent page-replacements in PCM because each page replacement will introduce a write operation in PCM. Therefore, we propose two solutions in D-CLOCK to reduce writes to PCM. Particularly, we propose a page exchange method to put write-intensive pages in DRAM and an improved clock-based page replacement algorithm to further reduce PCM writes. 
Our design on page exchange and page replacement is based on a dual-clock (D-CLOCK) buffer structure, which is shown in Figure 2. The D-CLOCK structure includes a hybrid-clock structure and an additional DRAM-clock structure. The hybrid-clock structure maintains all the frames in PCM and DRAM, while the additional DRAM-clock structure only maintains DRAM frames. The DRAM-clock is used to select a page from DRAM, which is needed in our page-exchange algorithm and page-replacement algorithm. Similar with the traditional clock approach, each page in the hybrid-clock and DRAM-clock has a reference bit. In addition, each DRAM page has a write-count field that records the write count of the DRAM page since it is used for a disk page. 3.2 Page Exchange We present a page exchange method to keep write-intensive pages in DRAM, thus we can reduce PCM writes. Specially, we consider two situations where a page exchange is needed: (1) When a page in PCM is hit by a write request, we select a page in DRAM and exchange it with a PCM page. According to the temporal locality of page requests, we can expect that a recently-written page is much likely to be updated by next requests. Therefore, it is better to put recently-updated pages in DRAM and thus future updates this kind of page exchanges. PCM, we exchange the victim page in PCM with a DRAM page. Thus, the requested similar to that of (1), i.e., to put recently-updated pages in DRAM. Fig. 3(b) shows an example of this kind of page exchanges. 
Algorithm 1 presents t h algorithm is selecting an a write-intensive pages in D R DRAM. According to this the average write count of less than  X   X  , the page is Otherwise, we decrease th e to check remaining pages i n 3.3 Page Replacement In addition to keeping recently-updated pages in DRAM and thus reducing PCM writes, we further propose a new page replacement scheme to reduce PCM writes. As each page replacement in PCM will introduce a write to PCM, i.e., writing the replacements are concentrated in PCM. Therefor e, an intuitive approach is to let page replacements focusing on DRAM. However, if DRAM pages are frequently requested, it is not appropriate to always replace a DRAM page. As a result, we need to consider a better tradeoff between replacing a PCM page and a DRAM page. between replacing PCM and DRAM. When a PCM page is selected as victim for page  X   X  X  X  X  indicates that there have been many page-replacements occurring in PCM. Algorithm 2 shows the detailed page-request algorithm of D-CLOCK. When a count by 1 if the request is a write request (Line 1~6). When a PCM page is hit by a exchange the PCM page with a DRAM page. Then, the reference bit of the requested page (now in DRAM) is set to 1 and its write count is increased by 1 (Line 7~14). If a request does not hit on both PCM and DRAM, we need to perform a page replacement operation. In order to determine whether a replacement should be free page from the DRAM-clock. 
Here, we set the ratio between PCM size and DRAM size as the threshold. This the traditional clock algorithm to find out the change of the number of page DRAM size. The result indicates that a higher ratio between PCM and DRAM will threshold as the ratio between PCM and DRAM. 4.1 Experimental Settings We implement a hybrid-memory simulator to evaluate the performance of our proposal and four previous methods, including CLOCK, CLOCK-DWF [4], APP-LRU [5], and MHR-LRU [6]. APP-LRU and MHR-LRU are both based on LRU, and the other two are based on a clock buffer structure. The default ratio between DRAM and PCM is set to 1:4. The parameters used in CLOCK-DWF and APP-LRU are the same as that in the original papers [4, 5]. 
We conduct trace-driven experiments. Specially, we use DISKSIM [13] to generate In addition, we use a real OLTP trace from a bank system. 4.2 Write Count on PCM The PCM write counts of D-CLOCK and other algorithms are shown in Fig. 5 and than all the other four algorithms. Specifically, compared with CLOCK, D-CLOCK reduces 27% on average and up to 43.7% of PCM writes, while the average PCM write-count reduction rate of D-CLOCK over CLOCK-DWF, APP-LRU, and MHR-LRU is 7.09%, 6.7%, and 13.7%. competitors. In particular, it reduces 14.8% on average of PCM writes over the CLOCK algorithm. D-CLOCK can still efficiently reduce PCM writes. Moreover, under low-hit-ratio size, D-CLOCK can greatly reduce PCM writes than CLOCK-DWF, APP-LRU, and MHR-LRU. These results show that the page-replacement scheme of D-CLOCK is efficient on reducing PCM writes. We also measure the PCM write counts of our proposal under different ratios between DRAM and PCM. In this experiment, we use the OLTP trace and Fig. 7 shows the results. Fig. 7 shows that D-CLOCK can adapt to the change of ratio between DRAM and PCM. 4.3 Hit Ratio and Page Fault Count As the ratio between PCM and DRAM is used in the page-replacement algorithm of D-CLOCK, we first perform an experiment to evaluate the hit ratio of D-CLOCK by PCM and DRAM. ratio of D-CLOCK with other algorithms by varying memory size. The experimental results are shown in Fig. 9 and Fig. 10. Compared with CLOCK, D-CLOCK has sizes. Specially, for the traces with a high locality, D-CLOCK has fewer page faults than CLOCK and CLOCK-DWF, as shown in Fig. 10(a), (c), and (e). Compared with APP-LRU and MHR-LRU that have the same hit ratio as LRU, D-CLOCK also shows better performance under workloads with a high locality. PCM has emerged as one of the most promising memories to be used in main memory hierarchy. Many studies propose to construct hybrid memory architecture involving PCM and DRAM to utilize the advantages of both media. In this paper, we focus on PCM-enhanced hybrid memory architecture and study the buffer management scheme for such hybrid architecture. Aiming to reduce PCM writes, we propose a page-exchange mechanism and a new page-replacement algorithm whose efficiency is demonstrated by experiments on both synthetic and real traces. Compared with replacements on PCM. With this mechanism, our proposal is able to reduce more PCM writes than other algorithms especi ally for read-intensive workloads. Acknowledgements. This work is partially supported by the National Science Foundation of China under the grant (61379037 and 61472376) and the Fundamental Research Funds for the Central Universities. 
