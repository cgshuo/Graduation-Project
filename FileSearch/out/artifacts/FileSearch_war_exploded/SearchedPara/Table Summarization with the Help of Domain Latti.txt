 Table summarization is necessa ry in various scenarios where it is hard to display a large table. It can benefit from knowl-edge about acceptable value clustering alternatives. In this paper, we formulate the problem of table summarization with the help of domain knowledge lattices. We provide the outline of a fuzzy mechanism to express alternative cluster-ing strategies. We further sketch a novel ranked set cover based evaluation mechanism (RSC) to tackle with the inher-ent complexity.
 H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval: Clustering.
 Algorithms, Measurement.
 Table summarization, Value clustering lattice, Ranked set cover.
Summarization of large data tables is necessary in many scenarios. For instance, a scientist exploring possible databases for further analysis may want to see concise yet informative summaries of large tables. Similarly, small de-vices, such as PDAs, cannot effectively present a large table of results with their small screens.

Table summarization can ben efit from a-priori knowledge about acceptable value clusterings. For example, the value hierarchy in Figure 1a can be utilized to summarize Table 1a on the attribute pair, Age, Location , such that each row in Table 1b corresponds to at least 2 rows (denoted as 2-summarization).

When there are alternative clustering strategies [1], how-ever, not all alternatives might be equally desirable. For instance, clu stering the value  X 12 X  under  X  preteen  X  X ersus  X  Authors are listed in the alphabetical order; Supported by NSF Grant  X  X rchaeological Data Integration for the Study of Long-Term Human and Social Dynamics X  (0624341) Table 1: (a) A database and (b) a 2-summarized version on the Age, Location attribute pairs Figure 1: (a) Hierarchy-and (b) Lattice-based value clustering graphs for the attribute age  X  1*  X  (Figure 1b) maybe less desirable because the range of possible values (i.e, the precision lost by the replacement) in the former case is larger than in the latter. Therefore, when creating a summary where each row clusters at least  X  rows in the original table, we also need to account for the weights associated to the lattice edges to minimize the information loss due to the summary.

This paper formulates the problem of  X  -summarization under weighted value clusterings and sketches a novel ranked set cover algorithm to prune the search space significantly.
We model the weighted value clustering lattice (abbrevi-ated as lattice when there is no confusion) as an acyclic graph M ( V, E )where V encodes values and clustering-identifiers (e.g.,  X 12 X ,  X 1* X  in Figure 1), E contains value clustering relationships (e.g.,  X 12 X  to  X 1* X ).

Given a lattice, a value v i can be generalized to any of its ancestor value clusterings v j (denoted as v i v j ). Since a value may have clustering alternatives, we use the util-ity value to capture the desirability of clustering strategies. Each edge in L i is associated with a utility value (or weight). Given the utilities of edges in the lattice, we can compute the utility of a value clustering strategy, util ( v i v j tween v i and v j . For example, in Figure 1b, the utility value from  X 12 X  to  X  X reteen X  is 1/13 (i.e., edge weight); while from  X 19 X  to  X * X , the utility value is 1/121 (the multiplication of edge weights for any path from  X 19 X  to  X * X ).

Let t be a tuple on summarization-attributes SA = {
Q 1 ,  X  X  X  ,Q q } , L = { L 1 ,  X  X  X  ,L q } be the set of weighted clus-tering lattices for the attributes in SA . t is said to be a tuple clustering of t ( t t as shorthand) on attributes SA iff for every Q i ,either t [ Q i ]= t [ Q i ] or there exists a path from t [ Q i ]to t [ Q i ]in L i . The utility of clustering t to t can be computed by combining util ( t [ Q i ] t [ Q i ]) using a mono-tonic function  X  (e.g., multiplication, summation, etc.).
Atable T is an  X  -summarization of table T , if each tuple in T [ SA ] has a tuple clustering in T [ SA ] and each tuple in T [ SA ] clusters at least  X  tuples in T [ SA ]. The utility util ( T ) of summarizing T to T can be calculated by com-bining all the util ( t t ) using a merging function .
Problem 1. Given T , SA , L = { L 1 ,  X  X  X  ,L q } ,  X  ,  X  , and ,our problem is to find another relation T which is an  X  -summarization of T , and there exists no other  X  -summarization T of T such that util ( T )  X  util ( T ) .
Given the input of Problem 1, our approach works in four steps.
Set-covering formulation. The set-covering problem can be stated as follows: given a finite set S ,andacol-lection, C , of subsets of S , find a subset, C ,of C ,where every element of S belongs to at least one subset in C and some objective criterion is optimized. The  X  -summarization problem of Step 4 can be represented as a k -set covering problem (for k =  X  ) by treating (a) each tuple clustering tc j as a set, (b) each tuple t i as an element, and (c) every clustering relation t i tc j as the set relationship t i  X 
Directly solving the above k -set covering problem has the following complexity: (a) the number of summarization-attributes increases the number, m , of tuple clusterings ex-ponentially, (b) the set-covering formulation of the problem has an exponentially increasing cost as a function of m .We thus employ a novel ranked set-covering (RSC) algorithm that can perform more efficiently.

RSC depends on the ranked process of the tuple cluster-ings obtained in Step 3. The ranked processing algorithm takes as input (a) a stream of tuple clusterings for each tuple in T [ SA ], and (b) the summarization parameter  X  . Tuple clustering streams are pre-sorted in decreasing order of their util values. The algorithm merges the n sorted tuple clus-tering streams by considering first those tuple clusterings with the highest util values. Once we obtain a proper set of clusterings, TC combined , which cover all the tuples in the data table, we convert this set into a set-covering problem. If this step returns a solution, then the ranked algorithm stops. Otherwise, it continues incrementally considering other tu-ple clusterings in their utility order. This process contin-ues until either all tuple clusterings have been checked or a solution is found. The above ranked algorithm can work correctly under common objective functions and preference criteria. However, we omit its analysis here due to space limitation.
 We adopt an approximate set-cover algorithm APPROX-FQ ([4]), which was proposed for cell-based k -anonymity through value suppressions. While efficient, APPROX-FQ is not directly applicable since it considers neither a lattice (values are either taken as given or simply suppressed) nor utilities. In our algorithm, Furthermore, while APPROX-FQ can always return a so-lution simply increasing the amount of suppression, it may fail when generalizations are fed in an incremental matter. Our modifications overcome these shortcomings. In particu-lar, we focus the ranked processing to only those parts of the problem which require further evaluation and avoid repeated calls to set cover algorithm.
For evaluation, we used real data set ( X  Adults  X  X 3]), which contains around  X  30K tuples. Our combined lattice comes from the two different Adults hierarchies in [3] and [2]. For comparison, we implemented a naive-set cover (sc-naive) alternative, where all tuple clusterings covering at least  X  tuples are passed to a version of [4], modified to take into account clustering lattices and utilities (instead of relying only on cell-suppressions). The ranked set-cover algorithm performs 2 to 10 times faster than the naive set-cover algo-rithm due to the reasons given in the previous section. [1] Y. Qi, K. S. Candan, J. Tatemura, S. Chen, and [2] B.C.M.Fung,K.Wang,andP.S.Yu.Top-down [3] V. S. Iyengar. Transforming data to satisfy privacy [4] H. Park and K. Shim. Approximate algorithms for
