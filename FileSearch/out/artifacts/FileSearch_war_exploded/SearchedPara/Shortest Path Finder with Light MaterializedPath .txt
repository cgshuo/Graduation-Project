 Point of interest (POI) queries based on the road network distance become an important role on location based services (LBS). For these queries, the optimiza-tion on the distance or the time of travel along the road network is important besides the Euclidean distance.

Several methods based on materiali zed path view (MPV) have also been pro-posed for the fast road network distance computation. They retrieve the distance by looking up a pre-computed distance ta ble. However, this MPV has the follow-ing problems: (1) Usually, a road network contains a large amount of nodes, and the data size of the MPV is proportional to the square of the number of nodes. Therefore, the data amount of the distance table becomes huge for a large size of the road network. (2) Very long processing time is necessary to construct MPV table, because the distance must be calculated over all combinations of node pairs. As concerns to the data amount of the table, when the total number of nodes in a graph is 1 , 000 , 000 (it corresponds to a road network over the range about 100km square), the number of elements in MPV table becomes 10 12 ,there-fore several TB memory is required. (3) When the weight values (e.g. length) of some links in the network are changed by a traffic accident or a construction, these changes affect the wide area on the table. This update also requires a long processing time.

To cope with these problems, hierarch ical MPV methods have been proposed [1][2]. These methods alleviate the problems described above, however, the prob-lems cannot be avoided authentically. A change in a leaf level affects to the upper levels. Long computation time is necessary for the upper level distance calcula-tion. The data amount in a high level layer is not always smaller than that of the leaf level, in opposition to a usual hierarchical tree structure.
In a query for LBS, the shortest path must be determined from a large number of candidates, and the area where candidates exist is limited in a confined area, for example, searches in an area having 50km radius centered the query point.
This paper proposes a shortest path se arch algorithm based on a lightweight local distance materialization, which is constructed on a partition of a road network. These methods outperform A* algorithm, and they reduce the data amount drastically comparing with the conventional hierarchical distance mate-rialization methods. 2.1 Data Structure A road network is modeled as a directed graph G ( V,E,W ), where V is a set of nodes (intersections), E is the set of edges (road segments), and W is the set of link weights. A fragment SG i ( V i ,E i ,W i ) of a graph G ( V,E,W ) is a partitioned subgraph, where V i  X  V , E i  X  E ,and W i  X  W .Iftheendpointsofanedge e SG i in the rest of the paper where there is no ambiguity.

Fig. 1(a) shows an example of a road network graph, here small circles are nodes and lines are edges. Fig. 1 (b) depicts a partition of the graph shown Fig. 1(a). In this partition, the nodes shown by black dots belong to at least two neighboring subgraphs; the nodes belonging to the plural subgraphs are called the border nodes . Two subgraphs are defined adjacent if they have at least one common border node. The set of border nodes of SG i is denoted by BV i .Inthis partition, each edge belongs to only one subgraph. The nodes shown in white circles in the figure are referred as inner nodes : they are the rest of the nodes in a subgraph except the border nodes.

Three types of distance materialization tables are referred in the proposed methods; a border-to-border distance tab le (BBDT), an inner-to-border distance table (IBDT), and a node-to-node distance table (NNDT). The BBDT shows the distances between two border nodes. The di stances in these tables are calculated by traveling inside of the subgraph, therefore these values are not always global shortest path lengths.

The IBDT shows the distance from an inner node to a border node. This table is used to retrieve the distance from the starting point as an inner node to a border node. An NNDT lists distances of all combinations of the nodes in a subgraph. This table is used to know the distance between two arbitrarily spec-ified nodes. Either IBDT or NNDT is used alternatively in the SPF algorithms described in the next subsection. 2.2 Simple Path Finder Algorithm Fig. 2 shows the processing flow of the shortest path finder (SPF). In the fol-lowing description, s and d denote the starting point and the destination point of the shortest path to be retrieved. The SPF is controlled by a best-first search using a priority queue (PQ). The PQ manages the records constructed by the following items. Here, p is the currently noticed point; s , d , or a border node. Cost is the lower bound road network distance between s and d . The PQ returns the record by ascending order of this value. df s (distance-from-source) is the shortest road net-work distance between s and the currently noticed node p . fSG is the subgraph ID in which p belongs. The last item, phase is a value to show the progress of the processing. It is changed from PHASE0 (initial state) to PHASE3 (final state) according to the progress of the processing.

At first, the subgraph, SG s , which contains the road segment under s ,isde-termined. Next, Cost is calculated by the equation, Cost = d E ( s, b i )+ d E ( b i ,d ), for all border nodes b i  X  BV s of SG s . Here, d E ( x, y ) denotes the Euclidean dis-tance between x and y . In this initial stage, the following records are composed and enqueued to the PQ. In this processing stage, the records have PHASE 0 as the phase value. Next, a record ( e )thathasminimum Cost value is dequeued from the PQ as shown in Fig. 2(b). At the beginning of the processing, e.phase is PHASE 0. For the border node e.p , the road network distance d N ( s, e.p ) is calculated. Here, d
N ( x, y ) denotes the road network distance between x and y . Cost value for this node is calculated by the equation Cost = d N ( s, e.p )+ d E ( e.p, d ), composing the following record, and then it is enqueued in the PQ. When the phase value of the obtained record ( e )fromthePQis PHASE 1 (see Fig. 2(c)), the road network distance from s to the current node ( e.p )has already been determined. All subgraphs that contain e.p as a border node are also determined. And then, for each subgraph SG n , Cost is calculated by the following equation.
 Here, BV n is a border node set of SG n . The following record is composed, and then it is enqueued in the PQ. Continuing the processing, when a record obtained from the PQ reaches a border node of the subgraph containing d , the record shown below is composed and it is enqueued in the PQ. In this case, the value of the road network distance from s to e.p plus the Euclidean distance between e.p and d is assigned to Cost value, and PHASE 2 is assigned to phase value.

When the phase value of the dequeued record from the PQ is PHASE 2, the road network distance between e.p and d is calculated. Composing the following record, and it is enqueued into the PQ. When the phase value of the dequeued record is PHASE 3, the shortest path dis-tance between s and d has been determined. The fact that the record is dequeued from the PQ means it has the minimum Cost value among all records contained in the PQ. It means the shortest path distance is determined. Therefore, return the distance, and then the searching process is terminated.
 We evaluated three variations of SPF; SPFLM (SPF with light materialization), SPFMM (SPF with medium materialization), and SPFFM (SPF with full ma-terialization); with two representative conventional methods, PWA* algorithms and HEPV [1]. The difference between these methods is how to determine the distance between one of the specified points ( s and d ) and the border nodes of the subgraph where the point belongs to. SPFLM calculates the distance by A* algorithm referring usual adjacency list. SPFMM obtains the distance by referring the IBDT. SPFFM determines the distance by referring the NNDT.
Table 1 shows the tables sizes of three road network maps used in this exper-iment.

Fig. 3(a) compares the processing time of the shortest path searching among the PWA*, SPFLM, SPFFM, and two layered HEPV, using MapS divided into 100 subgraphs. The horizontal axis shows the distance between s and d .We generated 1,000 pairs of s and d by a pseudo-random sequence. For each s  X  d pair, the shortest path was searched by five algorithms. (SPFMM is omitted from this figure to avoid intricacy: it performed almost the same as SPFFM.) This figure presents the results that is s elected one after every 5 queries. All LRU buffers were cleared in advance for every query. The most of processing time by SPFLM, SPFFM, and HEPV stay under 20 ms over the whole distance range. Meanwhile, the processing time of PWA* in creases almost linearly in accordance with the increase of the distance.
Next, we generate several sets of po ints by a pseudo-random sequence to simulate the points of interest (POI) on the road network links. The number of generated points were specified by a probability Prob . For example, when Prob =0 . 01, a POI exists on 100 road links. We searched 10 nearest neighbor (NN) POIs of a query point ( q ) in Euclidian distance. After that, the road network distances are computed for the found POIs by PWA*, SPFLM, SPFMM, and SPFFM. We determined 10 query points randomly on the road network. Fig. 3(b) shows the average processing time spent to determine 10 shortest paths.
These three results show similar processing times for the same Prob .For denser than Prob =0 . 002, the processing time of the SPFLM shows almost the same value with PWA*. This is because the path length is small in high Prob values, and PWA* algorithm can run fast. This paper proposes a shortest path search algorithm and its three variations us-ing the light distance materialization that are suitable for LBS. The data amount used in these methods can be reduced in comparing with the conventional hi-erarchical network distance materialized methods; HEPV and HiTi. Especially, SPFLM reduces the data amount drastically. On the other hand, SPFMM and SPFFM achieve similar time efficiency with the hierarchical encoded path view.
Consequently, when the distance between two points is large, SPFLM out-performs PWA* substantially, nevertheless the SPFLM uses a small amount of pre-computation data. LBS is apt to request for the shortest path searches over rather than nearly located points, and the operation is repeated over a large number of times in a query; for example as in the incremental Euclidean re-striction strategy. In this situation, th e relative search speed of PWA* increases, because the hit ratio in LRU buffer managing adjacency list is increased. k NN queries evaluated in this paper is for su ch example. When the density of POI is high, the difference of the processing times between SPFLM and PWA* becomes small. On the other hand, SPFMM and SPFFM outperform the other methods even in such situation.
 Acknowledgments. The present study was partially supported by the Japanese Ministry of Education, Science, Sports and Culture (Grant-in-Aid Scientific Re-search (C) 24500107 and (B) 2300337).

