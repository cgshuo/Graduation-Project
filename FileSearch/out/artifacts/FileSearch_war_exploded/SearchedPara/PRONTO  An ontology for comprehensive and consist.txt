 1. Introduction
In all industrial organizations, the available process and product knowledge must be captured and maintained. Companies must represent information about their manufactured products and the way they are produced, stored, sold and distributed. They also have to keep records of all the changes undergone by a given product along its life cycle. Traditionally, industries keep product information into the Bill of Materials (BOM) representation, which specifies the subordinate components (as well as their required quantities) that are needed to make a product.
The current highly competitive global environment is redefin-ing the way companies do business. Many product-oriented organizations are being faced with the challenge of providing as much variety as possible to the market, with as little variety as possible between products ( Nanda et al., 2005 ). Such situation leads to an exponential increase in the number of variants of the same product. As the number of variants of each product grows, it becomes increasingly difficult to p roperly manage product informa-tion. The volume of information that is stored and handled by traditional product models has expanded considerably since the traditional approach to variant management is to create a unique BOM for every instance. Since the variants of a product are quite similar, a significant amount of information is redundant and it is not free of the problems that information duplication entails. In an effort to reduce these troubles, some approaches ( Van Veen and Wortmann, 1992 ; Hegge, 1995 ; Nanda et al., 2007 ; Bri ere-C  X  ote  X  et al., 2010 ) have introduced the concepts of product family and generative BOMs into their product representations. The first concept aims at capturing a set of similar products. In turn, the generative BOM notion allows obtaining particular product BOMs from a common one defined for the product family of which such specific products are members.

Distinct groups within an organization make use of BOM information in different ways depending on their requirements.
Accordingly, they have BOMs represented in the ways that best meet their needs and business processes. For instance, an
Engineering Department normally uses the engineering BOM (eBOM), which reflects the product as designed by such depart-ment. It is an exploded, top-down view of the parts and assem-blies contained within the BOM, regardless of how they would be produced and assembled in the shop-floor. However, the shop floor or manufacturing area generally views the BOM in another manner. It employs the mBOM (manufacturing BOM), meant to represent how an end product is manufactured. The mBOM is a list of assembly or phantom parts, materials, documents, manu-facturing consumables and tools that reflect the actual manufac-turing processes. Similarly, the materials requirement planning (MRP) function relies on the mBOM to explode final product requirements into the corresponding needs of intermediate assemblies and raw materials, thus launching production orders to the various manufacturing plants and purchase orders to the Procurement Department. On the contrary, the Master Planning
Scheduling (MPS) function does not need the details contained in the mBOM and just requires product information in terms of how products are sold, instead of how they are manufactured. Thus, it requires other types of product representations, such as the modular and planning BOMs. In addition, other functional areas make use of distinct BOM information, leading to other types of
BOMs, such as service BOM, marketing BOM, etc. Moreover, the forecasting function relies on aggregate product information representing data about the members of a product family.
The aforementioned situation, which is quite usual nowadays, leads to the presence of redundant and possibly inconsistent information. This latter undesirable effect can be avoided by reconciling the different types of BOMs in order to identify, propagate and compare the consequences of any change in product configuration to every BOM representation throughout the product lifecycle. However, BOM reconciliation directly increases the cost and time related to the use of BOM information.
Circumstances get worse when organizational units or enterprises not only use product data for their own needs, but also exchange it with their partners, for instance, during cooperative product development, when outsourcing manufacturing activities, when interacting with logistics providers, etc. In all these cases, the use of different product models can lead to semantic problems.
Advances in information and communication technologies allow improving the way in which organizations exchange data, establish-ing new inter-enterprise relationships. Even though Internet pro-vides a platform for worldwide cooperation and collaboration among enterprises, the complexity of product information manage-ment increases in collaborative environments, where the use of different application systems is pretty common. This situation is further complicated by the proprietary nature of product informa-tion. This complex context demands an  X  X  X ntelligent integration X  X  ( Horrocks et al., 2001 ) of the information sys tems that belong to the organizations involved in these new inter-enterprise relationships that Internet and the Web technologies make possible.

As previously mentioned, there are some approaches, which try to solve the variant management problems. However, none of them considers the problem of exchanging product data in the context of the new inter-enterprise relationships. Moreover, they are only suitable for discrete manufacturing industries where products are always manufactured by putting parts together by means of assembly processes. These representations are not appropriate to model product structures of some industrial facilities, such as certain food industries (milk and meat ones), where products are obtained by decomposing raw materials, or the petrochemical business, in which physical and/or chemical transformations (fractionation, cracking, etc.) are applied to oil and/or its derivatives in order to get products (naphtha, gasoline, diesel, lube, asphalt, etc.)
According to Horrocks et al. (2001) , in order to achieve a completely integrated access to information, three tasks must be faced: technical, syntactical and semantic integration. The first one is concerned with network technology; that is, it establishes the physical connection among the information sources. Once it is technically possible to exchange data, it is necessary to agree on a common syntax of the messages being interchanged. This is the aim of syntactical integration. The last task, semantic integration, has to ensure that the exchanged messages have the same meaning for all the information sources that participate in the communication. Nowadays, Internet, the Web technologies and
XML (Extensible Markup Language) give support to the first two tasks. Semantic integration has been under research for some years now. Ontologies are seen as the key to reach such a level of integration because they provide formal models that establish a consensual and precise meaning of the information communi-cated among information sources.

In the last decade ontologies have been recognized as key elements to reach semantic integration, since they provide formal models that establish a consensual and precise meaning to the information communicated among different sources. In Gime  X  nez et al. (2008) some initial ideas about the PRoduct ONTOlogy (PRONTO) ontology were introduced. This ontology integrates two hierarchies to represent product information: the abstraction hierarchy (AH) and the structural one (SH). However, this con-tribution limited itself to the representation of explicit data at each level of the AH.
 This paper presents further advances in the development of the
PRONTO ontology and a ConceptBase ( Jarke et al., 2009 )formal specification that focuses on its structural hierarchy and the way structural information can be inferred from the explicit knowledge represented at each AH level. PRONTO is a domain ontology that can be used as a common vocabulary in order to reach the semantic integration of product information systems. It is based on both, the generative BOM and the product family concepts in order to provide an efficient management of multiple variants. The proposal modifies the traditional two-level product family representation (product family X  X amily member) by adding a new level between them. The new three-level hierarchy approach allows the natural modeling of product information with differen t aggregation degrees, needed for planning activities taking place at distinct time horizons. Moreover, unlike other existing proposals, PRONTO is able to represent tradi-tional assembly BOMs of discrete manufacturing products, as well as the ones of products that are obtained from the physical/chemical transformations of raw materials by means of disaggregation/ decomposition operations.

The rest of this paper is organized as follows. Section 2 presents an overview of related work in the product modeling domain, as well as in the ontology and semantic integration fields. Section 3 outlines the methodological aspects related to the development of PRONTO. Section 4 introduces PRONTO concepts, describes its formalization, and presents how implicit knowledge can be inferred from the explicit one. Section 5 illustrates the use of the ontology by means of a case study from the meat industry.
Finally, in section 6 conclusions are drawn. 2. Related research
Traditional BOMs handle each variant as an independent product, facing a high volume of redundant information. To achieve an efficient representation of variants, Scheer (1998) proposed new representations that were referred to as identical parts BOM, plus-minus BOM and multiple BOMs.

Other BOM models also attempted to solve the redundancy problem. Among them, the Generative BOM proposal generates the structure of a specific variant when required. This kind of
BOM defines a basic structure for a set of similar products, called product family, and establishes rules to adapt such a generic structure to the one of a specific variant. The proposals of Van
Veen and Wortmann (1992) , Hegge (1995) and Bri ere-C  X  ote  X  et al. (2010) , among others are rooted in the Generative BOM concept.
Sundgren (1995) , Meyer (1997) , as well as Zha and Sriram (2000) , proposed the use of the product platform concept to deal with the variant problem. Meyer (1997) defined a product plat-form as  X  X  X  set of subsystems and interfaces developed to form a common structure from which a stream of derivative products can be efficiently developed and produced X  X . A product plat-form also embraces manufacturing technologies and processes employed in production ( Jiao et al., 2003 ; Huang et al., 2008 ).
However, a platform approach is not always viable. Sometimes, there could be heavy constraints on platform definitions, given by the structure of the product ( Muffato and Roveda, 2000 ).
Another research line considered object technology. Chung and Fischer (1994) , as well as Usher (1993) , presented BOM models based on object-oriented representations. However, these proposals do not use the product family concept and represented product variants in the traditional way, in which each variant is a different product. Along the same line, Hvan et al. (2003) proposed the use of Class, Responsibilities and Collaborators (CRC) cards for product modeling and introduced a methodology for the design of product models. Unfortunately, this methodol-ogy must be applied to each individual type of industry since the approach did not propose a generic product model that could be extended.

In general, proposals that are based on the product family concept handle two abstraction levels in th eir product representation: the family itself and the family members. In turn, Gzara et al. (2003) proposed the use of three levels of a bstraction for the representation of products: generic product, type -product and exemplary product.
Although the authors pointed out that each one of these levels is related to a different type of prod uct knowledge, they specified neither a model for representing product data at each level nor the way in which the information flows among them.

The contributions mentioned in the previous paragraphs focused on having an efficient product representation, especially from a structural perspective. However, none of them took into account that:
There are different types of products. Those that are manufac-tured by assembling components, the ones that are obtained by disaggregating/decomposing non-atomic raw materials, as well as others that have hybrid characteristics.

A given product may have different production routes, employ-ing different intermediates and/or raw materials, which leads to alternative BOMs.

Besides the efficient and consistent storage of product struc-tural information, there are still semantic integration problems that need to be faced.

There are some other approaches, which left aside the problem of how to model product information and product structure, but concentrated in the trouble of sharing product data across organizational units. One of the most common solutions to such a problem is the adoption of Product Data Management (PDM) systems, which have been developed in order to answer require-ments of product data integration. Traditional PDM systems allow all areas of a single organization to share a common product model. Some authors have gone beyond and proposed the devel-opment of distributed PDM systems in order to tackle the problem of inter-enterprise product data integration. Among them, it is worth mentioning the proposals of Liu and Xiu (2001) , Mervyn et al. (2004) and Abramovici and Gerhard (2000) . However, such distributed systems support technical and syntactical integration; that is, they have a physical medium to communicate with each other, agree to a common syntax in the interchanged data, but they lack a semantic integration. Yoo and Kim (2002) have presented a Web-based knowledge management system to facil-itate the seamless sharing of product data among application systems in virtual enterprises.

Other approaches have faced the integration problem through the development of a standard for the interchange of product information. This is the case of the Product Data Representation and Exchange (STEP) model, ISO 10303 ( STEP, 1991 ), and the proposal of Burkett (2001) , which used XML for the definition of an interchange language based on STEP. Zhao and Liu (2008) proposed mapping STEP onto an OWL/SWRL ontology.

In the last decade ontologies have been proposed as a mechanism to support semantic integration in the context of the Semantic Web ( Shadbolt et al., 2006 ). Thus, ontologies are defined to establish a common vocabulary among areas within an organization, different organizations and various applications. An ontology is a formal model which explicitly represents the consensual knowledge of a domain ( Brandt et al., 2008 ). Van Heijst et al. (1997) classified ontologies according to two orthogonal dimensions: (i) the amount and type of structure of the conceptualization, and, (ii) the subject of the conceptualization. In this last dimension appear the domain ontolo-gies, which are reusable ontologies that model a particular domain ( VanHeijstetal.,1997 ; Guizzardi, 2005 ). Among domain ontologies, one can find the ones that model manufacturing environments. An important proposal is the one of the TOVE (Toronto Virtual Enter-prise) project ( Fox, 1992 ), which defined a set of ontologies to be used in the representation of enterprises. One of the TOVE ontologies introduced product related concepts. However, it adopted the tradi-tional representation of variants and only considered products that are obtained by assembling component parts.

In nowadays electronic commerce context, B2B (business-to-business) applications require a n effective communication among computers. Therefore, some st andards which improve product information exchange among providers and clients have appeared. As an example, it is possible to mention United Nations Standard Products and Services Code (UNSPSC), North American Industry Classification System (NAICsN), eCl@ss, Electronic Open Technical Dictionary (eOTD) or the RosetaNet X  X  technical dictionary. Such standards are agreed on by a wide group of organizations. However, they only represent concept taxon omies and do not allow modeling product structures. In the last years, some proposals ( Klein, 2002 ; Hepp, 2006 ) have arisen to codify such standards into languages for the Semantic Web.

Another research line combines aspects of previous approaches, such as the consideration of distri buted systems and the definition of a common vocabulary. The works by Noy (2004) and Izza et al. (2005) , among others, used ontological engineering to enable the integration of heterogeneous dist ributed systems. The central idea is the definition of ontologies to which all systems commit in order to reach semantic integration. Kim et al. (2006) proposed a Web service architecture for collaborative product commerce. Nevertheless, the semantic aspect is limited to the use of an ontology for service description and not for the representation of product knowledge. Patil et al. (2005) proposed an ontology-based framework to enable semantic interoperability among product data management applications. Howev er, they assumed that product data semantics is already defined for every interacting application.
The following sections will show that the approach presented in this paper is the result of the authors X  work in both research lines, i.e. product knowledge modeling and product data semantic integration. The proposal is a formally specified domain ontology, which allows representing structural information from discrete products, as well as the ones of continuous production domains, like food industries. The underlying conceptual model of PRONTO is based on the generative BOM and product family concepts, introducing a third level to the traditional two level abstraction approaches. 3. PRoduct ONTOlogy: methodological considerations
Borrowed from philosophy, the term ontology has been widely used in the past years in knowledge engineering, artificial intelligence (AI), computer science, and in new emerging fields, like the Semantic Web. Therefore, many ontology definitions exist. Several of them are presented and compared in Go  X  mez-
Pe  X  rez et al. (2007) . In the scope of this paper,  X  X  X n ontology is a formal, explicit specification of a shared conceptualization. Con-ceptualization refers to an abstract model of some phenomenon in the world by having identified the relevant concepts of that phenomenon. Explicit means that the type of concepts used, and the constraints on their use are explicitly defined. Formal refers to the fact that the ontology should be machine-readable. Shared reflects the notion that an ontology captures consensual knowl-edge, that is, it is not private of some individual, but accepted by a group X  X  ( Studer et al., 1998 ).

Ontologies can be represented with different knowledge modeling techniques and they can be implemented in various kinds of languages. However, not all of th em can represent the same knowl-edge, with the same degree of formality and granularity. Go  X  mez-
Pe  X  rez et al. (2007) have stated that AI-based approaches that combine frames with first order logics or description logics are suitable for modeling heavyweight ontologies, while software engineering approaches and databases allow the representation of lightweight ontologies. An extensive state-of-the-art overview of methodologies for ontology engineering can be found in Go  X  mez-Pe  X  rez et al. (2007) .
In addition, Cristani and Cuel (2005) have proposed a framework to compare ontology engineering methodologies and evaluated the established ones accordingly. Among the most known methodologies it is possible to mention KACTUS ( Bernaras et al., 1996 ), SENSUS ( Swartout et al., 1997 ), TOVE ( Uschold and Gruninger, 1996 ), UPON ( De Nicola et al., 2005 ) and METHONTOLOGY ( Ferna  X  ndez-Lo  X  pez et al., 1999 ). These works report different p rinciples, design criteria, and stages for ontology development. However, all of them involve at least the three stages proposed by t he Enterprise ontology methodol-ogy ( Uschold et al., 1998 ): (i) to identify the purpose and scope, (ii) to capture the concepts and relationships among these concepts, as well as the terms used to refer to concepts and relationships and (iii) to codify the ontology.

For the development of PRONTO, and ad-hoc methodology based on well accepted principles has been proposed and adopted. It has the following four stages: 1. Requirements specification : this stage identifies the scope and purpose of the ontology. 2. Conceptualization stage, which organizes and converts an informally perceived view of the domain into a semi-formal specification using UML diagrams. 3. Implementation stage, which implies the codification of the ontology using a formal language. 4. Evaluation stage, which allows making a technical judgment of the ontology quality and usefulness with respect to the requirements specification, competency questions and/or the real world.

It should be noted that these stages were not truly sequential; indeed, any ontology development is an iterative and incremental process. If some need/weakness was detected during the execu-tion of a stage, it was possible to return to any of the previous ones to make modifications and/or refinements. In order to illustrate the applied methodology, some highlights of the above mentioned stages are presented in Sections 3.1 X 3.4.
 Finally, it is worth mentioning that the development of
PRONTO has been guided by the principles of coherence, concise-ness, intelligibility, adaptability, minimal ontological commit-ment, and efficiency. Compliance with these acknowledged principles is a credible indicator of the quality of an ontology ( Marquardt et al., 2010 ). However, some of these principles are competitive among themselves. For example, ontology coherence requires, among others things, to axiomatize as many ontological definitions as possible. However, if an ontology is too tightly constrained by axiomatic definitions, it violates the principle of minimal ontological commitment. Due to these situations, a suitable balance between the competitive principles was sought.
The final design of PRONTO came after a reasonable compromise among these principles. Furthermore, during its development the reusability-usability trade-off problem was also addressed ( Marquardt et al., 2010 ). 3.1. Requirements specification
At the beginning of the development process an analysis of product modeling needs and demands for different types of industries was carried out, along with a comprehensive biblio-graphical research. An overview of such analysis was presented in Sections 1 and 2. Also, competency questions, which are proposed by Uschold and Gruninger (1996) in their methodology, helped in this stage to identify the requirements of PRONTO. Some of the competency questions that were stated are:
Given a product, which are the components (raw materials and/or intermediate products) required to manufacture it?
If a certain amount/quantity of an assembled product is to be manufactured, which are the amounts/quantities of the needed components?
Given a non-atomic raw material (veal leg, for example) which are the products that can be obtained from it?
Provided a given amount of a non-atomic raw material is to be decomposed/disassembled, which are the amounts/quantities of its derivatives that can be obtained?
Which is the common structure that is shared by all the variants of a given product?
In a generative BOM environment, when a specific product is derived from its family, which are the components that can be selected to obtain the particular structure of such product?
Based on the knowledge gathered during this stage it was possible to identify the following modeling requirements, which guided the design of PRONTO as a heavyweight ontology: 1. Provide a formal specification of the product domain by identifying the concepts and the relationships among them that are relevant to the modeling of product structures. 2. Allow the representation of the structure of products that are manufactured by assembling components, the ones that are obtained by decomposing non-atomic raw materials, as well as those having hybrid characteristics.
 3. Take into account the existence of products having alternative production routes. 4. Handle the representation of product variants using the con-cepts of product family and generative BOMs. Therefore, the ontology should allow: 5. Support the management of constraints in the derivation of product structures, which implies 6.

Provide a common vocabulary to solve the problem of sharing product data across organizational units.

In addition to the requirements that were previously specified, at this stage of the development process the scope of the ontology was defined. The objective was to design a general domain ontology capable of representing product structural information of different industries. To improve its reusability, the axiomatization of the ontological terms was kept to a minimum in order to allow for different extensions, thus fitting to a large number of application contexts. Therefore, it was decided that the ontology should represent only product structure-related concepts and relations that are common among different industries, leaving aside the representation of detailed attributes of particular domains. 3.2. Conceptualization
The goal of this stage of PRONTO s development process was the definition of the conceptual model of the ontology. Its objective was to capture the domain knowledge using representation tools that are independent of the adopted implementation language. As
METHONTOLOGY proposes, the conceptualization activity  X  X  X rga-nizes and converts the informally perceived view of a domain into a semi-formal specification X  X  ( Go  X  mez-Pe  X  rez et al., 2007 ). To do so, this methodology employs a set of intermediate representations based on tabular and graph notations to specify classes and relationships. However, different modeling languages could also be used. In spite of their diversity, they share structural similarities, and have comparable modeling elements. During the development of PRONTO, the following constructs were employed:
Classes : they represent a collection of entities that share a common set of characteristics. Certain languages called them concepts or frames. Classes can be hierarchically organized by means of subsumption relationships.

Relations : they represent an interrelation between classes. Dif-ferent languages called them properties, slots, roles, or associations.
In particular, the Unified Modeling Language (UML) ( Booch et al., 1999 ) has been adopted to support the conceptualization stage. Class diagrams were used to represent classes and associa-tions, which were constrained by means of OCL statements. Such
UML diagrams are shown in Section 4 to describe the main concepts of PRONTO. 3.3. Implementation
Once a conceptual model is built, it is necessary to transform such model into a formal one, which could be represented in an ontology implementation language. Languages to specify ontolo-gies can be classified in two groups: (i) AI-based ones, like KIF ( NCITS, 1998 ), Flogic ( Kifer et al., 1995 ), etc., and (ii) Web-based languages. The knowledge representation paradigm underlying the first group is based on first order logics, frames combined with first order logics, and description logics. Languages belong-ing to the second group, like RDF ( Lassila and Swick, 1999 ), RDF-Schema ( Brickley and Guha, 2003 ) and OWL ( W3C OWL, 2009 ), have been developed by the W3C (World Wide Web Consortium) and they have established the foundations for the Semantic Web ( Shadbolt et al., 2006 ).

It is important to notice that the same conceptual model might result in several implementations ( Hartmann et al., 2006 ), because distinct applications might require different kinds of reasoning services, and special-purpose languages to support them. With regards to this issue, it should be remarked that two implementations of PRONTO exist: 1. An implementation based on the O-Telos language ( Jarke et al., 2009 ), which follows the approach of Gruber (1993) ,who suggests modeling ontologies using frames and first order logics. 2. An OWL DL-based implementation, which can support Seman-tic Web applications.
 Larrateguy et al. (2008) introduces a brief description of PRONTO X  X  OWL implementation, while the formalization of PRONTO in the O-Telos language is presented in this paper (see Appendix A). O-Telos is a conceptual modeling language for representing knowledge about information systems. It is based on the core concepts of object-oriented technology, integrity con-straints, and deductive rules. It resorts to constraints and deduc-tive rules constructs to enforce model consistency and to provide deductive capabilities. ConceptBase ( Jarke et al., 2009 ), which is an implementation of the O-Telos language, has been used as the ontology editor and as a test environment for the development of PRONTO. As opposed to Semantic Web languages, such as OWL, which make the open world assumption, ConceptBase holds the closed world one. This means that any statement that is not known to be true is false. This property was found to be quite useful to test the ontology. This ConceptBase characteristic, along with its powerful, deductive capabilities, were the main reasons to choose it for PRONTO X  X  implementation. 3.4. Evaluation
It was difficult to quantify the quality of PRONTO due to the absence of an accepted formal method that considers all the criteria (coherence, conciseness, intelligibility, adaptability, mini-mal ontological commitment, etc.) that can be applied to evaluate domain ontologies.

According to Go  X  mez-Pe  X  rez (1996) , the ontology evaluation phase comprises three aspects: (i) ontology validation, (ii) ontol-ogy verification and (iii) ontology assessment. Validation and verification activities are associated with a technical judgment of the content of the ontology with respect to a frame of reference, which can be requirement specifications, competency questions, or the real world. Validation is related to whether the ontology definitions really model the actual domain for which the ontology was created, while verification tries to prove that the ontology definitions implement correctly the ontology requirements and competency questions. In turn, assessment is focused on judging the ontology content from the user X  X  point of view. The results of employing PRONTO in the development of different types of applications, and in distinct contexts, were analyzed in order to asses it.

Another research line regarding ontology quality evaluation analyses the structural dimension and employs an estimation of the ontology complexity considering the depth of the class hierarchy, as well as the number of classes, relations and instances defined in the ontology. Several methodologies, frame-works and metrics to quantify the quality of ontologies have been proposed ( Tartir and Arpinar, 2007 ; Burton-Jones et al., 2005 ;
Zhang et al., 2010 ; Yu et al., 2009 , Manouselis et al., 2010 ). From the set of metrics proposed in the literature, the following subset has been selected to evaluate PRONTO X  X  structural characteristics:
Number of classes ( NOC ), number of relations ( NOR ) and number of properties ( NOP ), which are simple counts of the number of classes, relationships, and properties, respectively, defined in the ontology.

Number of root classes ( NORC ) and Number of Leaf Classes ( NOLC ) metrics, which correspond to the number of classes without superclasses, and classes witho ut subclasses, respectively.
Relationship richness ( RR ), which is also called relation diver-sity. It reflects the variety of relationships in the ontology and is defined as the ratio of the number of non-inheritance relationships ( P ) divided by the total number of relationships (the sum of the inheritance relationships ( H ) and the non-inheritance ones ( P ))
RR  X 
Inheritance richness ( IR ), which represents the average num-ber of subclasses per class. It is computed as
IR  X  where NOC is the total number of classes in the ontology and H is the number of hierarchical relations
Depth of the subsumption hierarchy ( DOSH ), which is also called depth of inheritance. It measures the length of the longest path from a given class C to the root class in a given ontology subsumption hierarchy.

Attribute richness ( AR ) is defined as the average number of attributes per class. It is computed as the number attributes for all classes ( NAT ), divided by the number of classes ( NOC ).
AR  X 
The evaluation of PRONTO has been done considering the concepts presented in this section. The main results of the activities that were performed to validate the ontology are discussed in Section 5. 4. PRoduct ONTOlogy: main concepts
Within the scope of this work, a product is understood as a complex concept, (indeed much more complex than a thing or substance produced by a natural or artificial process) that will be defined at different levels of abstraction, which are organized in an abstraction hierarchy (AH). The term ProductAbstraction is used to represent entities at any level of this hierarchy.

In order to manage product information complexity and to comply with Requirement #1, stated in Section 3.1, two hierar-chies were proposed. The previously mentioned AH, and the structural hierarchy (SH), which organizes the specific knowledge associated with product structural information. Within this hierarchy, the information typically handled is the one related to Bill of Materials. The SH provides mechanisms to manage the information associated with the multiple recipes and/or processes available to manufacture a given product or group of similar products.

As it was indicated by Requirement #2, the proposed model has to allow representing BOMs of products that are manufac-tured by assembling of component parts, others that are obtained by disaggregating non-atomic raw materials, as well as products having hybrid BOMs. Therefore, the SH has to consider two types of structural hierarchies, one which relates a product with its component parts and another which links a product with its derivative constituents. The relationships that are used to repre-sent each of these types are called componentOf and derivativeOf , respectively. As shown in Fig. 1 , both relations are a specialization of the SHRelation class, which links a ProductAbstraction instance ( whole ) with zero or more ProductAbstraction instances ( part ) defined at the same abstraction level.

The abstraction hierarchy (see Fig. 1 ), has been proposed to manage the complexity resulting from the huge number of products that are nowadays manufactured by current industrial facilities. The
AH relates ProductAbstractions defined at different levels. In parti-cular, the proposed model resorts to three abstraction levels:
Family : Highest level of the AH that represents a set of similar products having alike structures, similar characteristics and production routes. A family is related to a superstructure, which comprehends all the possible structures that the mem-bers of such family may have.
 VariantSet : Second level of the AH that models a subset of
Family members that share the same structure and/or similar characteristics, i.e. a subfamily. Hence, a VariantSet is a memberOf a Family . Thus, when a VariantSet is specified, one of the structures contained in the Family s superstructure must be chosen. In addition, certain modifications and constraints can be introduced in such structure.

Product : Lowest level of the AH representing individual items, having physical existence, which are memberOf a particular VariantSet . Therefore, all the products associated with a given VariantSet have the same structure, the one defined for such
VariantSet . Minor modifications in some parameter values (e.g., flavor, color, etc.) can also be introduced at this level.
Appendix A shows how the ProductAbstraction class and its subclasses are expressed in ConceptBase (lines 1 X 11, 12 X 18, 106 X 116 and 188 X 201, which define the ProductAbstraction ,
Family , VariantSet and Product classes, respectively). The specifica-tion also states the constraints that the memberOf relationship has to satisfy. These constraints establish that (i) any entity belonging to the two AH lower levels is related to one and only one entity defined at its immediate upper level through the memberOf relationship ( memberOf_necessary constraint  X  Appendix A lines 113 X 196) and (ii) such a relation is unique for each instance of the lower level ( memberOf_single constraint  X  lines 112 X 195).
Fig. 2 a illustrates the application of both hierarchies in an automotive industry example. It shows the abstraction hierarchies of the Ford Focus product line, as well as the ones corresponding to the components needed to manufacture it ( Engine , Frame and
Wheel families). The solid lines between entities located at different levels represent the memberOf associations that are comprised in the different abstraction hierarchies. On the other hand, the structural hierarchies (dash lines) of the Ford Focus family, Focus SX variant set and Focus SX PO# 123 product are included at the Family , Variant Set and Product levels, respectively.
These dashed lines represent the componentOf relationships that are defined among entities belonging to the same abstraction level. It can be seen that at the family level, the Engine , Frame and
Wheel families are components of the Ford Focus family. At the middle level, the Focus SX variant set is composed of a 4-cylinder engine (member of Engine ), a Traditional frame (member of Frame ) and a Sport wheel (member of Wheel ). Similarly, at the lowest level, the particular components of the Focus SX PO#123 product, which is member of the Focus SX variant set, are shown.
In the same way, Fig. 2 b shows the abstraction and structural hierarchies associated with the representation of products that are obtained by applying decomposition operations in the meat industry. In this example, whereas the solid lines have the same meaning ( memberOf relations), the dashed lines stand for deriva-tiveOf associations between components. For example, Fig. 2 b shows that the derivatives HeartOfRump , CapOfRump and Raw-
Mat4cookedBeef can be obtained from the Rump family. Similar decomposition structures are depicted at the VariantSet and Product levels
The model presented in this contribution integrates both hierarchies, the AH and the SH. As it was mentioned, the componentOf and derivativeOf relations define structural associa-tion among entities located at the same abstraction level. These two relationships are not explicitly represented in the ontology, but they are inferred from the explicit information recorded at each level of the AH. The inference mechanism to be applied to unveil these structural relationships is level dependent.
Fig. 3 introduces the concepts that are proposed to specify each level of the abstraction hierarchy. These concepts are described in detail in the following sections. 4.1. Family level concepts
As previously mentioned, a Family is an abstract representation that embraces the information of a set of similar products. From a structural viewpoint, it can be seen as an abstract product repre-senting the superstructure that is associated with all its members. In the proposed model, the concept of family is employed to represent raw materials, intermediate and final products of any industry. For example, in the automotive industry, the concept of family is used to model a car ( Ford Focus ), as well as the intermediate components ( engine ) and simple raw materials that comprise it ( plastic , iron sheet , etc.). Similarly, in the meat industry, the family concept is applied to model a steer, as well as the various cuts and offals that can be obtained by cutting and trimming the non-atomic raw material. Therefore, the family concept is asso-ciated with both composite (having a structure) and simple products. A simple family ( SFamily in Fig. 3 ) represents any family that does not have a structure. In contrast, a composite family ( CFamily in Fig. 3 ) has at least one structure. As it was previously mentioned, some products may be obtained by means of different recipes and, consequently, they are associated with more than one structure. The ConceptBase formalization of the CFamily and SFam-ily concepts is shown in lines 19 X 34 of Appendix A.

As it was stated by Requirement #3, introduced in section 3.1, a product can be fabricated by means of alternatives manufactur-ing routes. To answer such requirement, PRONTO allows repre-senting the fact that a CFamily can be associated with one or more structures. In order to model such a relation, the structureOf association is proposed (see Fig. 3 ). If a CFamily is related to several structures, they are referred as alternative structures of the family, and are linked by the alternativeStructure relationship. A CFamily represents a set of similar products and, as already mentioned, such products could be obtained by the assembly of other products, by the disaggregation of non-atomic raw materi-als, or a combination of both. Therefore, it is necessary to model these different types of structures:
Composition structure: related to products that are obtained by the assembly of component parts;
Decomposition structure : represents the structure of products from which it is possible to obtain several derivatives through a disassembly operation or a decomposition one.

As seen in Fig. 3 ,the Structure class has been specialized to represent these concepts by means of the CStructure and DStructure subclasses. Both have an aggregation relationship with the Family one. Composition relations ( CRelation ) identify the components of a
CStructure , while decomposition relations ( DRelation )linkthederiva-tives of a DStructure . Therefore, the direct components or derivatives of a family can be obtained through these associations. DRelation and
CRelation classes are both specializations of the Relation class. This class is linked with the Value one through the quantityPerUnit and productionFactor associations, which represent, respectively: the quantity/number of a given component needed to manu-facture a unit of a certain product ( CRelation ), or the quantity/ number of units of an intermediate product obtained from the decomposition/disaggregation of one unit of a non-atomic raw material ( DRelation ); and the proportion of a given component in one unit of a product, in whose structure such component participates ( CRelation ), or the yield of a given intermediate product from the decom-position of a unit of a non-atomic raw material ( DRelation );
The Value class represents a numerical value ( number ), the unit in which such a value must be measured ( unitOfMeasure )andthe upper and lower bounds ( upperBound and lowerBound )thatcon-strain the numerical value. In addition, each Relation is classified as:
OptionalRel : the component (derivative) may or not be present in a particular product structure;
MandatoryRel : the component (derivative ) must be present in the structure of all the family members;
AlternativeRel: the component (derivative) must be selected from a set of components, but only one member of such set must be part of a particular structure.

Fig. 3 shows that such classification is represented in the model with the isClassifiedAs association, the RelationType class, and its subclasses ( OptionalRel , MandaroryRel and AlternativeRel ).
In the ConceptBase implementation, the attribute alternativeSet of the class AlternativeRel stores the set of alternative components. 4.2. VariantSet level concepts
Mass customization leads to an exponential increase in the number of variants of a given product. Among such variants, there could exist: (i) variations in the product structure, by adding or deleting some components (derivatives) from it; (ii) differences in the parameter or attribute values of the structural components (derivatives); and (iii) a combination of the previous cases. Although a Family represents a set of similar products, there might be small differences among them. As it is st ated by Requirements #4.b and #4.c, these variations must be represented. Therefore, our approach proposes to group family memb ers into subsets, called VariantSets , which can be interpreted as subfamilies. Family members having a similar structure are clustered within the composite variant set concept ( CVariantSet class in Fig. 3 ). Similarly, families having no structure are classified under the simple variant set concept ( SVariantSet class in Fig. 3 ). As seen, CVariantSet and SVariantSet are specializations of the VariantSet class.

Each entity defined at this VariantSet level is related to a unique entity belonging to the Family level, and with one or more entities at the lower one ( Product level), through the memberOf association. In particular, every instance of the VariantSet class is a memberOf one and only one family (see constraints in lines 110 X 111, Appendix A).
Moreover, every instance has at least one product member (see constraints in lines 195 X 196, Appendix A). A composite variant set has a structure, which is a structureOf the family to which such variant set belongs. The has relation specifies which structure, among all the structures of the family, should be used to obtain the structure of a specific variant set. Thus, the has relation links a VariantSet instance with one and only one structure of its family.
Two restrictions (lines 134 X 135, Appendix A) must be applied to such association. One indicates that for every composite variant set ( CVariantSet ), there is one structure linked to it by means of the has relation (line 134). The other one establishes that such structure is unique for every composite variant set (line 135).

As seen, in order to define a variant set it is necessary to identify the family from which this variant set is a member of and the structure of such family that is associated with the CVariantSet .Once these definitions are made, it is possible to define the ChangeSet representing the modifications int roduced into the family structure (Requirement #4.b, Section 3.1) or to specify some particular variant sets that need to be present in the structure of the C VariantSet .
The ChangeSet class groups all the changes that are applied to the family structure in order to obtain the one of a composite variant set. Each change specification refers to only one relation of such structure. The affectedRelation association specifies the rela-tion that is affected by a given change. The model takes into account three different change types: the modification of the quantityPerUnit (if it is a CRelation ) or productionFactor (if it is a DRelation ) attribute of the affectedRelation ; the elimination of the affectedRelation from the structure; the choice of the affectedRelation , from the set of alternatives components of the AlternativeRel , as the only one to be present in the variant set structure.

Thus, the affectedRelation points out which relation is deleted, selected, or which quantities are modified. For model consistency reasons, a relation which is affected by a change needs to be part of the structure of the variant set in which such change is specified.

To represent the possible modifications to be introduced in a variant set structure, the Change class has been specialized into the QuantityChange , FamilyRemoval and FamilySpecification ones.
In addition, the QuantityChange subclass is further specialized into the quantityPerUnitCh and productionFactorCh ones, which represent modifications on the values associated with the quanti-tyPerUnit and production Factor attributes of the affectedRelation.
The FamilyRemoval class represents the exclusion of the affectedRelation from the structure to which such relation belongs. Then, a constraint must be introduced in order to ensure the creation of valid instances of the FamilyRemoval class. It is only possible to eliminate a relation from a structure when such relation is classified as optional ( OptionalRel) (constraint defined in line 173, Appendix A).
 The last type of change that can be applied to a structure is the FamilySpecification one. Such modification is related to the choice of just one association belonging to the set of alternative relations ( alternativeSet attribute in the ConceptBase implementation) of the modified structure. As it was previously mentioned, such set includes a group of mutually excluding relations, from which only one has to be present in the structure of a specific variant set. In order to perform such choice, PRONTO defines the Family-Specification subclass. In this case, the affectedRelation association indicates the chosen relation from the set of alternative ones (line 177, Appendix A).

Since a VariantSet can be interpreted as a subfamily, it is also an abstract concept that aggregates the structure and properties of all its members. Therefore, the structure of a composite variant set can also be seen as a superstructure that implicitly defines several structures. To illustrate this notion, let us assume that a certain composite variant set is associated with a given structure, named S1 , having several families as components (derivatives). The actual number of structures that are implicitly defined by S1 is obtained by multiplying the number of variant sets that are members of each family being part (derivative) of the S1 struc-ture. Fig. 4 illustrates this notion by means of an artificial product example. Part 1 shows the abstraction hierarchies of the Ford Focus family, as well as the ones of its components, the Frame , Engine and Wheel families. Part 2 introduces the structural hierarchy of the Ford Focus , showing its Frame , Engine and Wheel components. Finally, Part 3 depicts all the structural hierarchies that can be computed for one of the variant set members of the
FordFocus family. In particular, the FordFocusSX variant set is chosen. The total number of SHs of the FordFocusSX is obtained by multiplying the number of Frame family members (#Frame  X  2), times the number of the Engine family members (#Engine  X  3), times the number of Wheel family members (#Wheel  X  2). As shown in Fig. 4 , Part 3, this knowledge, which is not explicit, can be inferred by the ConceptBase implementa-tion of the ontology.

Sometimes, not all the SHs that can be computed from a variant set specification are valid. Let us assume, for instance, that due to commercial reasons the products that are members of the
FocusSX variant set must be assembled using only products that are members of the 4-cylinder engine variant set. In such a case, only four of the twelve structures that are shown in Fig. 4 , Part 3, are valid  X  i.e. those having the 4-cylinder engine as a component. In order to represent such constraint, the ontology resorts to the
EnforcedVariantSet class, which links a variant set with the variant sets that are compulsory to be used in its associated structural hierarchies. In the case of the aforementioned example, an instance of EnforcedVariantSet has to be specified indicating that the 4-cylinder engine is the imposed variant set of FordFocusSX . 4.3. Product level concepts
The most concrete level of the proposed abstraction hierarchy is the one of product. It represents actual products that are members of a VariantSet  X  X .e.membersofasubfamily.A Product can be simple ( SProduct )orcomposite( CProduct ) depending on whether it is a member of a SVariantSet or a CVariantSet , respectively. The SProduct subclass represents atomic products  X  i.e. the ones that are neither assembled from other products nor decomposed into other derivatives. In contrast, the instances of the CProduct subclass are membersOf CVariantSet instances and represent non-atomic products  X  i.e. products having a structure.

The specific variant set from which a given product is a memberOf determines and constrains the SH of such product. At the variant set level, the components (derivatives) of a structural hierarchy are all instances of the VariantSet class. Similarly, at the
Product level, the components (derivatives) of a SH are instances of the Product class, but each of them needs to be memberOf a component (derivative) of the corresponding SH, defined at the VariantSet level. For example, let us consider the VariantSet named
FordFocusSX , whose inferred structural hierarchies are shown in Fig. 4 , Part 3. Each of these variant set structural hierarchies abstracts a group of SHs at the Product level, as it is shown in Fig. 5 .

The ontology does not explicitly represent all the potential SHs at the Product level. Similar to what was done at the VariantSet level, at the Product one it is also possible to infer all the SHs that correspond to a given SH defined at the VariantSet one. However, the product model only represents those structural hierarchies that are required at a given time; e.g., when a production order is received from a customer.
 In order to identify which products actually participate in the
SH of a particular product, the chosenProduct relation is included in the ontology. This association links a product with each of its components (derivatives). To obtain a valid SH for a particular product, it is necessary to select only one product component (derivative) for each variant set that is a component (derivative) of the variant set SH from which the actual product was defined. Fig. 5 shows how the model is employed to represent a valid structural hierarchy for the FocusSXPO#123 product instance among the set of possible ones. 4.4. Constraint management
In all the approaches that resort to the concept of product family generic structure and to rules to specialize such structure into particular ones, a great number of po ssible component combinations can be obtained. Figs. 4 and 5 just show a small number of them. Up to this point, no restrictions have been imposed in order to compute the SHs. In practice, however, some of the component (derivative) combinations can be invalid due to technical or commercial reasons. Generic product structures , like the ones defined at the Family and
VariantSet levels, include an implicit product structure model, which may need to comply with additional conditions to be satisfied by a valid product ( M  X  anisto et al., 1998 ). In order to derive valid particular structures from generic ones, it is necessary to have a methodology allowing: (i) the specification of possible constraints among components (families, variant sets, or products), and (ii) the verification of these constraints during the generation of particular structures. To satisfy these needs, stated in Requirement #5 of Section 3.1, the proposed model includes a mechanism to express restrictions, which then have to be tested when creating structures, particular or generic ones.

The ontology considers three types of constraints, according to the three levels of the abstraction hierarchy. It is possible to define constraints among: (i) families ( FRestriction ); (ii) variant sets ( VSRestriction ); and (iii) products ( PRestriction ). Fig. 3 shows the classes that represent these concepts. This figure shows that each restriction type is defined between entities of the same level; that is, between Family , VariantSet ,or Product instances.
At each level, two main types of restrictions between compo-nents can be identified: (i) Obligatory , and (ii) Incompatible .If present, both must be satisfied to obtain valid structures. Fig. 3 shows that a Restriction is linked with its type by the isClassifiedAs association, and that the ObligatoryRest and IncompatibleRest classes represent the constraint types taken into account in the model. The first one forces a given component (family, variant set or product) to participate in the structural hierarchy (at any level) of the ProductAbstraction instance that establishes the Obligator-yRest constraint. In contrast, incompatible restrictions require a given component (family, variant set or product) not to be present in the structural hierarchy (at any level) of the ProductAbstraction instance that establishes the IncompatibleRest constraint. 4.5. Knowledge inference from the explicit model
As it was previously stated, the structural hierarchy relations ( SHRelation ) of both types ( componentOf or derivativeOf )arenot explicit and can be inferred at each AH level using the concepts presented in Sections 4.1 X 4.4. In addition, it has been shown that the structural hierarchies of entities defined at the various abstrac-tion levels are not completely independent. In the addressed example, the products (componen ts) comprising the structural hierarchy of the FocusSXPO#123 must be members of the variant sets that participate in the SH of the FocusSX variant set to which
FocusSXPO#123 belongs. Similarly, each variant set comprised in the SH of the FocusSX variant set must be a member of one of the families participating in the SH of the FordFocus family to which the
FocusSX is a member of. This section dis cusses some of the rules that were defined in the ConceptBase implementation to carry out the various inference processes consistently.

Due to the fact that the structure of a product is explicitly defined at the Family level, it is straightforward to infer the SHRelations among the entities belonging to this level. The composition relations ( CRelation ) identify the components of a composite structure CStructure , while the decomposition ones ( DRelation ) do the same with the derivatives of a DStructure . Lines 32 X 34 of Appendix A specify the ConceptBase deductive rule ( compRule ) that infers the values of the component (derivative) attribute of a CFamily .
 The inference of a componentOf ( derivativeOf ) relation at the VariantSet level requires the definition of two rules, as it is shown in the specification of the CVariantSet class in Appendix A (lines 117 X 150). A variant set vs2 is a component of another variant set vs1 if:
There exists an instance of the EnforcedVariantSet a1 in vs1 , which has vs2 as a enforcedSet ( compRule in line 137); or vs2 is a memberOf a family f2 , which in turn is a component (derivative) of family f1 from which vs1 is a member of.
Besides, no restriction applies to the members of f2 defined in vs1 ( restrictsMemberOf property, lines 125 and 139 of
Appendix A), and the relation that specifies f2 as a component (derivative) is not eliminated from the structure of vs1 ( compRrule2 in line 138).

At the Product level, any entity included in a SH must be a memberOf a component (derivative) that participates in the SH specified at the VariantSet level. Thus, there is an isomorphism between the structure of a product and the structure of the variant set from which it is a member of. The deductive rule that infers the structural relationships ( SHRelations ) at this level (lines 209 X 210, Appendix A) establishes that a product p2 is a component of a product p1 if it is member of a variant set c v 2 that, in turn, is a component of the variant set from which p1 is a member of.
Product structural information is employed in industrial orga-nizations to build the Production Master Plan, which determines the amounts of raw materials and intermediate products that need to be purchased or manufactured in order to fulfill a given final product demand. PRONTO X  X  structural hierarchies contain the same type of information included in traditional BOMs, from which the requirements of raw materials are usually exploded by Material Requirements Planning (MRP) modules. Therefore, as important as the inferred information about components (derivatives) of a final product are the quantities/amounts of materials that are required to manufacture a certain amount of it, or conversely, the amount of a decomposable raw material that is needed to fulfill the demands of certain derivatives that can be obtained by disaggregating/ decomposing such raw material. In consequence, raw materials needs are to be deduced by the proposed product model, and the inference process has to take into account whether a product has a composition structure or a decomposition one.

One of the main contributions of PRONTO is its capability to capture manufacturing composition ( CStructure ) and decomposi-tion ( DStructure ) product structures by means of two types of relationships ( CRelation and DRelation ). In addition, each type of structure imposes distinctive computations of data about manu-facturing requirements of raw materials and/or intermediate products. Fig. 6 conceptually shows these ideas by means of two final product families, the FordFocus and HeartOfRump ones. The former is obtained by assembling a set of raw materials and intermediate products and the latter is a derivative of the Rump non-atomic raw material.

For composition structures, the families that are required to manufacture the FordFocus composite family (by means of the
S1 CStructure ) match with the values of the component attribute of the CRelation associated with such structure ( CR2 ). For decom-position structures, the required families have to be inferred in the inverse direction; that is, starting from HeartOfRump family, it is necessary to identify the decomposition relation for which
HeartOfRump is the value of the derivative attribute ( DR1 ); then, find the decomposition structure in which this relation is part of ( S2 ) and, finally, from such structure the sought after Rump family can be found. In order to implement these mechanisms, the capabilities of ConceptBase views have been chosen. A Concept-
Base view allows presenting information of instances of a specific class in a particular manner and defining attributes whose values can be computed by means of deductive rules. Such values can also be generic views which can be further particularized by assigning values to the parameters defined in the generic view. In this PRONTO implementation, specific views were defined in order to calculate the material requirements of the different types of product abstractions. In particular, the FamilyReq view (lines 250 X 260, Appendix A) computes requirements at the family level and the results of its execution are presented in Section 5.3. 5. Ontology evaluation
As it was mentioned in Section 3.4, the evaluation of an ontology comprises four activities: validation, verification, assess-ment and complexity estimation (structural dimension analysis). All of them were considered during the evaluation stage of
PRONTO s development process. The validation and assessment of PRONTO through its application to case studies, and the development of prototypes that employ implementations of
PRONTO, has been and it is still carried out. During the ontology verification step, tests have been performed to ensure that the ontology definitions implement correctly the ontology require-ments and competency questions. Additionally, a set of metrics has been computed to evaluate PRONTO X  X  complexity/structural characteristics. The following sections present a brief overview of these activities. 5.1. Evaluation of the ontology structural characteristics
The set of metrics that were presented in Section 3.4 allows estimating the ontology complexity in terms of structural char-acteristics. Table 1 shows the results of applying these metrics to
PRONTO. The proposed ontology contains 43 relations ( NOR ), from which 26 correspond to hierarchical relationships ( H ), and 17 to other types of relations ( P ). Moreover PRONTO has 35 classes (25 leaf and 10 root ones).

The result of the formula that computes the inheritance richness ( IR ) is a real number representing the average number of subclasses per class. In the case of PRONTO, the computed IR is 74%. Such measure, together with the DOSH one, suggest that the proposed ontology is of a horizontal natur e, which means that the ontology represents a wide range of general knowledge. This is the aim of
PRONTO, which was planned as general purpose domain ontology, capable to be specialized for diffe rent kinds of industries (automo-bile, petrochemical, meat, furnitur e, distinct types of food industries, etc.), In order to be reusable, the proposed ontology has to represent generic concepts common to different types of industrial organiza-tions. Therefore, concept attributes that describe particular charac-teristics of specific industries, are out of the scope of PRONTO. In consequence, the value of the attribute richness metric gives as average 0.17 attributes per concept, which is low. However, the amount of attributes per classes will increase when specializing
PRONTO to represent product structures pertaining to particular industries. On the other hand, the relationship richness ( RR )isless than the average; its value of 40% implies that the number of hierarchical relationships is gre ater than the number of the other kind of associations. Nevertheless, the ontology maintains an ade-quate balance between i nheritance relations and role associations.
All these metric values give an idea about the characteristics and complexity of the ontology. However, complexity measures do not guarantee completeness, coherence, correctness, and reusability features. All these aspects of ontology evaluation can only be measured and improved by means of using the ontology in completely different application contexts. 5.2. Validation based on the development of applications
As it was previously mentioned, to evaluate the reusability, completeness, correctness and requirements commitment of
PRONTO, it was decided to employ it in different application environments. The ontology was first employed as the conceptual model for the development of Complex Object-Oriented BOM (COOBOM), which is a prototype application that allows mana-ging product families and deriving the structure of particular products belonging to such families. A second application that was supported by PRONTO is a prototype based on Semantic Web technology. It aims at achieving the integration of product structural information by means of a mediator type architecture that enables the execution of distributed queries among peer nodes. This application uses an OWL implementation of PRONTO as the communication language ( Larrateguy et al., 2008 ).
The last application supports the formulation of queries about the structure of products whose various components are manufactured at different nodes of a supply chain that applies the concept of collaborative product development. The int egration of different sources of information is achieved by means of a common vocabu-lary defined by PRONTO, but retaining local data management capabilities at each node of the supply chain. 5.3. PRONTO employed to represent the product model of different case studies
As it was previously mentioned, to evaluate PRONTO from the user X  X  point of view, it was decided to apply it to represent product information in different contexts. Therefore, to asses the ontology three extensive case studies were carried out: (i) the appraisal started with the case study presented by Hegge (1995) in his thesis; (ii) it continued with the development of the product model associated with an assorted candies produc-tion facility, described by Henning and Cerda  X  (2000) ,wherean enormous amount of variants needed to be tackled; and (iii) the development of the product model associated with the meat industry, in which complex product structures must be mana-ged in order to plan the purchase of different types of cattle to fulfill the demands of an enormous variety of meat cuts, as well as the requirements imposed by the fabrication of cooked products.

Due to the complexity of the associated product information the last case study has been chosen to illustrate the concepts presented in this paper. This industry produces large quantities of a wide range of products, such as several cuts of vacuum-packed chilled beef, aged frozen cuts; a variety of frozen products; offals, edible fat; sausages; hamburgers; frozen cooked beef and beef extract, among others. Each product is sold in different sizes and with distinct packages, depending on the market. Moreover, a given meat cut is considered to be a distinct product depending on the quality of the steer from which the cut was obtained.
Therefore, the number of products variants in this industry is really huge. In addition, the meat industry manufactures products having complex structures. The complexity arises because the basic raw material (cattle) is non-atomic; that is, a sequence of decomposition operations is needed to obtain intermediate pro-ducts that, in advanced stages of the production process are transformed into final ones. Since decomposition operations can be made in different ways, distinct products may be obtained from a unique raw material. In this case study, final products have been classified into four groups:
Frozen and chilled cuts and offals: All skeletal muscles from full carcass can be deboned, cut and trimmed according to customer specifications. The same can be done with individual, non-skeletal muscles. Muscles are vacuum packed and chilled, or vacuum packed, aged and frozen, or bulk packed and frozen to be sold.

Hamburguers and sausages : 100% meat hamburgers, made with selected cuts, as well as skinless sausages, made with meat, bacon, salt and species. Both are packed in different sizes.

Frozen cooked beef : Fully cooked beef, diced or sliced in various sizes, packed in tubes, and then fast frozen in flow freezers. They are regularly exported to various international markets.

Beef Bone, beef extract and beef broth : Products that result from the cooking of beef. These subproducts are used in other industries to manufacture soups, sauces and gravies.

This example focuses on the representation of a subset of products belonging to the first group. Such products are cuts that are vacuum packed, then frozen or chilled, and finally, packed in a corrugated cardbox. Fig. 7 presents a generic schema of the BOM associated with these products. Then, the type of beef cut used, the amount of kilograms per box, the storage conditions, and the target market define the different product variants that are sold by the organization. Table 2 presents the various options.

For confidentiality reasons, the names and codes that are employed in this example are not the real ones. A final product is identified by means of an ID having ten digits: the first four identify the cut code, the next two the number of kilograms per box (10, 15, 20 or 25), the following two the target market, and the last two digits determine whether the cut is frozen or chilled. The codes and their descriptions are shown in Table 3 .As illustrative examples, consider the 3181101000 code, which corresponds to 10 kg of frozen Strip Loin for the US market, and the 3111205401 code, which represents a corrugated box con-taining 20 kg of chilled Tenderloin for the European market.
The ontology has been applied to represent the products that belong to the groups shown in Table 2 . Five abstraction hier-archies, one per group, have been defined. In particular, Fig. 8 shows the AH corresponding to the second group of products, identified as Special Cuts. The root of such hierarchy is the
SpecialCut CFamily , which has five variant sets. Each variant set represents a set of products containing the same cut and having the same weight. For example, the 318210 variant set instance abstracts the set of products containing 10 kg of Heart of Rump, for different markets and storage conditions.
 The representation of the family level of this AH is shown in
Fig. 9 . In this figure, the SpecialCut family, its composition structure and the associated composition relations are shown. It can be seen that BarCodeLabel , ExternalLabel , HeartOfRump , StripLoin , Topside ,
PlasticBag and CorrugatedCardBox correspond to the values of the component attributes of the composition re lationships. Similarly, the values of the quantityPerUnit attribute of each component are shown. Only three instances of the Value class are used because relationships R1 , R2 and R3 share the 20 kg Value instance, relations R5 and R6 share the 20 U Value instance, and, finally, relations R4 and R7 share de 1UValue instance.

Fig. 9 exemplifies the three different types of relations that are included in PRONTO. R4 , R5 and R6 are mandatory relations, while
R7 is an optional one. In addition, R1 , R2 and R3 are alternative relations; this implies that only one of them has to be present in the structure of a particular product. The occurrence of alternative and optional relations in the structure clearly indicates that more than one structural hierarchy is implicit in the SpecialCutSTR1 composition structure, which can be interpreted as a superstruc-ture. The components of each possible structure are listed below: 1. 20 kg of HeartofRump ,1Uof CorrugatedCardBox ,20Uof
PlasticBag ,20Uof BarCodeLabel and 1 U of ExternalLabel . 2. 20 kg of Striploin ,1Uof CorrugatedCardBox ,20Uof PlasticBag , 20 U of BarCodeLabel and 1 U of ExternalLabel . 3. 20 kg of Topside ,1Uof CorrugatedCardBox ,20Uof PlasticBag , 20 U of BarCodeLabel and 1 U of ExternalLabel . 4. 20 kg of HeartofRump ,1Uof CorrugatedCardBox ,20Uof
PlasticBag and 20 U of BarCodeLabel . 5. 20 KG of StripLoin ,1Uof CorrugatedCardBox ,20Uof PlasticBag and 20 U of BarCodeLabel 6. 20 KG of Topside ,1Uof CorrugatedCardBox ,20Uof PlasticBag and 20 U of BarCodeLabel
If it is necessary to obtain a multilevel structure indicating the way HeartofRump , StripLoin and Topside are obtained, the number of possible structures grows. In addition, these families can be obtained from different production pathways by applying disag-gregation operations on distinct cuts, as it is shown in Fig. 10 for the Rump composite family. In such figure, it is possible to see that the HeartofRump family can be obtained from the Rump one in two different ways: (i) from the RumpSTR1 decomposition structure, and also (ii) from the RumpSTR2 decomposition struc-ture. Both render different by-products.

As it was previously mentioned, the main raw material of the meat industry is non-atomic. This type of raw material always suffers some cut and trimming ope rations before one of its deriva-tives participates in a final product manufacturing process. There-fore, certain products may participate in two types of structures: composition and decomposition ones. This is the case of the Heart-ofRump SFamily , which is a derivative obtained from the RumpSTR1
DStructure (or, alternatively, from the RumpSTR2 one), and also participates as a component of the SpecialCutSTR1 CStructure.
As an example of how a variant set is defined, Fig. 11 shows the representation of the 318210 variant set, which is member of the SpecialCut family, and has SpecialCutSTR1 as its structure. In addition, Fig. 11 shows that to define the 31820 variant set, three changes are to be introduced into the family structure: (i) the modification of the quantity per unit value of the R1 relation ( QChrR1 ); (ii) the removal of the ExternalLabel family ( FRemlR7 ); and (iii) the specification of the HeartofRump family as a compo-nent ( FSpecifR1 ).

Fig. 11 illustrates how an instance of the EnforcedVariantSet relates to the 318210 variant set. This instance specifies the CHCardBox and FRCardBox variant sets (members of the Corruga-tedCardBox family), as well as the USHeartRump and EurHear-tRump ones (members of the HeartofRump family) as possible components for the structures of the variant set being defined. Besides, the bottom part of the figure presents the component selection that was made for the 3182105400 product, which is indicated by the chosen Product relations. Thus, the FR21CardBox , SwissRump , PlBarCode , and EX12PBag products are defined as the components of 3182105400 . 5.4. Validation based on answers to competency questions
Competency questions play the role of a type of requirement specification against which the ontology can be evaluated. In order to give answers to the proposed competency questions, they were formalized using ConceptBase query classes and views. ConceptBase Query Language (CBQL) realizes queries as so-called query classes, whose instances fulfill the membership constraint of the query. The view language of ConceptBase is an extension of CBQL. Besides some extensions that allow an easier definition of queries, views can also be nested to express n-ary relationships between objects.

Competency question formalized in this way helped assessing the ontology and finding some weaknesses, that were corrected during the ontology development. To illustrate the use of Con-ceptBase views to obtain answers to competency questions, Fig. 12 presents some of the results of executing the FamilyReq view (lines 250 X 260 of Appendix A), which was defined to formalize the first competency question stated in Section 3.1. In particular, this picture shows the material requirements of the HeartofRump and
SpecialCut families. In this figure, the [a-family-name/this_par] label corresponds to the parameter value adopted in a particular execution of the view for a generic family identified as a-family-name. Two values of the requirement attribute were computed, corresponding to an execution of a generic view that has the
HeartofRump family as a parameter. These two values represent alternative material requirements corresponding to different struc-tures. In particular, to obtain a unit of HeartofRump requires 1 unit of Rump , which can be alternatively obtained from the RumpSTR1 or RumpSTR2 structures. 6. Conclusions
The paper describes PRONTO, a domain ontology, which captures product information. It defines and integrates two hierarchies: the abstraction hierarchy (AH), and the structural one (SH), this last one associated with BOM related information.
PRONTO modifies the traditional two-level product family repre-sentation since its AH establishes three different abstraction levels for the definition of products: Family , VariantSet and
Product . This hierarchy allows representing different granularity product data and efficiently dealing with high number of variants.
Furthermore, the ontology includes appropriate mechanisms to consistently maintain structural information among the different abstraction levels.

The SH organizes knowledge related to the structural infor-mation of products. This hierarchy provides a mechanism to properly manage product information associated with the multiple available recipes or processes to manufacture a parti-cular product or a set of similar products. At each level of the AH, the SH defines the relationships that exist between the components (derivatives) participating in a product, variant set or family structure. At the family and variant set levels the components (derivatives) of a family/variant set are also families/variant sets of raw materials, intermediate and final products. Similarly, the components (derivatives) of an actual product are also real products of various types (raw materials, intermediate and final products). However, no specialization of the different product concepts has been made to maximize the ontology reusability. Naturally, improving the ontology usabil-ity in specific manufacturing domains would require its specialization.

Another novel contribution of PRONTO, not included in other proposals, is its intrinsic capability of representing both, the structure of products that are obtained by assembling parts (typical of discrete manufacturing environments), as well as the structure of those that are decomposed to obtain intermediate products (characteristic of dairy, meat or petrochemical indus-tries), which eventually participate as components of other products.

PRONTO also manages constraints which prevent the deriva-tion of invalid product structures. This feature is very important in production environments where client specifications have a strong influence on the definition of products to be manufac-tured/assembled. Thus, appropriate constraints prevent clients from ordering an incorrect product configuration in assemble-to-order or made-to-order environments.

This contribution has focused on the formal specification of the ontology, but has also provided details about the methodology that was followed to develop the ontology. PRONTO was forma-lized using the O-Telos language and implemented in Concept-Base. This implementation has rendered a common vocabulary for the definition of product structures and has specified the seman-tics of each term in a non-ambiguous way by means of first order logics. The implementation has also allowed verifying the consistency of the proposed model, which can be easily extended by adding new concepts, deductive rules, queries and views.

The validation of PRONTO through different applications has demonstrated the practical usability of the proposed ontology, as well as the compliance of the ontology with the design principles of coherence, conciseness, intelligibility, adaptability, minimal ontological commitment and efficiency. However, the reusability of the ontology was not greatly challenged by the addressed applications, since all the case studies belong to the domain of food industry products. Therefore, to arrive to more definite conclusions about the ontology reusability, it must be tested in other application contexts.
 Acknowledgments
The authors wish to acknowledge the financial support received from CONICET (PIP 2754), ANPCYT (PAE-PICT2007 00051 and 02315), Universidad Nacional del Litoral (CAI+D 2009, Tipo III, R4 X  X  12) and Universidad Tecnolo  X  gica Nacional (PID 25/o118).
 Appendix A. ConceptBase implementation of PRONTO A.1. ConceptBase summary constructors that are used in Telos knowledge bases: well as two deductive rules ( incompRule and mandatRule ). based evaluation machine.
 (line 110).
 A.2. PRONTO ConceptBase implementation References
