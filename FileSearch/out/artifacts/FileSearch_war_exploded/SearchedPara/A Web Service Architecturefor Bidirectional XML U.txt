 XML is the de facto standard format for data exchange. The role of XML as a format for data repositories on the I nternet is becoming more important be-cause the amount of resources stored in XML format is rapidly increasing. This trend arose for several reasons. First, many kinds of application software now support the export of data in XML format. Second, native XML databases are becoming widely used, and many relational database systems provide facilities for managing and generating XML data. Finally, various kinds of data that were not expressed in XML format are now being expressed in XML format. As many XML resources are available through the Internet and are used by various kinds of applications, an environment that provides an efficient and easy way to update XML data is critically important f or efficient use of XML resources.
It has been observed that XML data are rarely retrieved for their own sake; rather, the data is typically transformed into another format for processing by a Web application. For example, a Web server might run an XSL [18] processor to generate HTML data from XML data for display in a Web browser. When users want to edit data being viewed in a transformed format, it would be more convenient and efficient if they could d o so by editing the transformed data directly and then having the modifications reflected back into the source XML data, rather than editing the original XML data. One technique for doing this is called  X  X iew updating X  [6,1]. The source XML data is first transformed to another format, a  X  X iew, X  in which the user can more easily and intuitively understand its meaning. The modifications are made on the view directly and then are reflected back into the source data on the basis of some predefined updating policy.

Updating remote source data on the Internet through various views means that the updating mechanism should be adaptable to both the database system that stores the source data and the application that processes the views. This requires the updating system to be a modular and extendable component that works efficiently with other components in a distributed computing system. Web Services, a key Web technology, addresses this problem using standard technolo-gies such as the simple object access pro tocol (SOAP) [15] and the Web services description language (WSDL) [16].

We have developed a Web service archit ecture with a communication protocol for bidirectional XML updating. It has high modularity and extendibility, so it can be used with various kinds of applications. This was achieved by combining two technologies mentioned above, that is, view updating and SOAP. A previ-ously reported bidirectional transformation language, Bi-X [13,12] is used for the view updating. It was developed by extending the expressiveness of previous bidirectional languages [8,9] to make it usable in an architecture for general-purpose XML processing. It is used to obtain both the original source view and the updated source from the modified view. Our main contributions of this paper can be summarized as follows.  X  We made the view updating technique based on our bidirectional language  X  We proposed a novel SOAP-based XML updating server, which has highly  X  We designed a three tier architectur e with a communication protocol to
The remainder of this paper is organized as follows. Section 2 gives a de-tailed explanation of the Bi-X service ar chitecture. Section 3 describes the Bi-X bidirectional language. Section 4 explains the protocol used to achieve the Bi-X service in the three-tier architecture. S ection 5 describes the implementation of the Bi-X server. Section 6 describes our application examples. Section 7 summa-rizes related work. Finally, Section 8 concludes with a brief summary and a look at future work. 2.1 Three Tiers We start by explaining the structure o f the Web service architecture behind the view updating process. Our Web servic e architecture consi sts of three tiers (as shown in Figure 1): clients, a Bi-X server, and the content servers that provide XML data. The heart of this architecture is the Bi-X server, which has a bidirectional transformation engine based on an implementation of the Bi-X bidirectional transform ation language. It receives a request from a client and either applies a forward transformatio n to the specified source data fetched from a content server in order to generate a view or applies a backward transformation to produce updated source data.

A client can be any XML data viewer. It is typically a Web application that will display transformed data in a formatted view that supports editing. It re-ceives information from users, such as pa rameters specifying Bi-X code or speci-fying XML data to be fetched and edited, and then sends an appropriate request message to the Bi-X server.
 A content server provides XML data and a Bi-X code for transformation. Also it must be able to accept modified files and update the corresponding XML data. For example, if the file the server sends to the Bi-X server is simply an XML file on a machine on the Internet, when the modified file comes back, the existing file is simply replaced with the modified one. If the file is obtained from a Web service by querying some XML datab ase, the user must guarantee that the modified data in the file can be put back into the XML database, for instance, by preparing some special query for updating the database. 2.2 A Simple Example A simple example will illustrate how the view updating with our service ar-chitecture works. Suppose the following XML data (bibliography information) can be accessed through the Internet by ent ering its uniform resource indicator (URI). &lt;bib&gt; &lt;/bib&gt; Also suppose we want to update only tit les and authors. We access the source XML data by sending the appropriate URI to the Bi-X server, and we instruct the Bi-X server to transform the source XML data into an XHTML view showing only the titles and authors as an ordered list on the XHTML editor on the local machine by calling the init service provided by the server. The Bi-X code for this will be given in Section 3. The result is the following XHTML document. &lt;html&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt;
From this view, we can modify the titles and/or authors as well as insert and/or delete items. We then have any m odifications reflected back into the source data by invoking the Update service provided by the server. For example, suppose we change the title of the first book from  X  X he Art of Computer Pro-gramming X  to  X  X he Art of Computer Programming, Volume 1 X  and insert a new item that includes the title and author of another book whose title is  X  X he Art of Computer Programming, Volume 2 X  after the first item. After the update service has run, the corresponding title in the source data will be the new title, and the new book information will appear after that of the first one in the source data. The current widely used XML transformation languages, such as XSLT [18] and XQuery [17], perform transformation in only one direction. In our XML trans-formation language, the code for a forward transformation is similar to that in XSLT and XQuery, and the code for the backward transformation is automati-cally derived. The derived code takes the modified target view and the original source as inputs and generates the upda ted source as output, propagating the modifications made in the view. Here we briefly summarize the basics of the language and discuss the properties of bidirectional transformations. A more detailed description of the Bi-X language can be found elsewhere [13]. 3.1 Bi-X Syntax and Basic Transformations The syntax for a fragment of the language underlying Bi-X is shown in Figure 2. Each language construct is an XML element with the end tags omitted. The &lt;a&gt;b&lt;/a&gt; .

The basic transformations BX perform particular transformations on source an element as source data and returns its contents.

Transformation combinators, XC , are used to build more complex transforma-transformation that applies its argument transformations, X i (1  X  i  X  n ), in sequence, and the target data of the transformation, X i ,isusedasthesource ement as source data and returns it with i ts contents replaced by the result of applying transformations X i (1  X  i  X  n )toemptyvalues. &lt; xmap &gt; [ X ]trans-forms the sequence source data by applying X to each item in the sequence. this source data, otherwise X 2 is applied.
The transformations, CM , are used to manage or use the transformation context. They provide a variable binding mechanism for the Bi-X language. &lt; xstore &gt; [ Var ] binds the source data to the variable Var , which is valid until valid variable. The predicate &lt; xwithtag &gt; [ str ] holds if the source data is an element with tag str , and any transformation can be used as a predicate for &lt; xif &gt; [ P ,X 1 ,X 2 ].

Using the Bi-X syntax, the Bi-X code needed to perform the transformation for the example given in section 2 is shown in Figure 3 and Figure 4. The code is divided into two parts for readability. code -a in Figure 3 represents the code given in Figure 4, which extracts the titles from the source data. code -b in Figure 3 represents the code for extracting the author and is not shown to save a space.
As can be seen from these figures, the code for Bi-X tends to be longer than that for the one-way XML transformation languages. An XQuery interpreter has been developed in order to reduce the coding effort [12]. Since the expressive power of Bi-X is almost the same as that of XQuery, a user can write an XQuery code for the forward transformation and automatically get the equivalent Bi-X code for the bidirectional transformation. 3.2 Bidirectional Property of Bi-X In this section, the view updating property of the Bi-X language is illustrated in-formally to help users better understand th e results of backward transformation. That is, given an updated view, what should the updated source document look like after backward transformation? To shorten the presentation, we show only the modifications needed to update the XML text contents and tags. The more complex updatings, such as insertion and d eletion, are described elsewhere [12].
During a session of forward and backward transformation, there are two pairs of documents: the original source document and the source document after up-dating, and the original view and the updated view. Each pair of documents has the same structure since we are inter ested in only modifications here. The property of Bi-X is defined on the differences between the original and updated documents. The differences are represented as a multiset of pairs, and each pair consists of two different strings, which are either element tags or text contents. A pair represents a modification; that is, the first component is changed to the second one.

To represent modifications more precisely, tags and text contents in source documents are assigned unique identifiers, while tags and text contents in xconst are associated with a specific identifier, say c . Identifiers are kept unchanged while transforming source documents and modifying views. A modification is called a bad modification if it contains strings with the c identifier. This means data from the transformation code cannot be modified. Two string components in a good modification must have the same identifiers, and no two good mod-ifications in one document can have the same identifier. Two modifications are said to be equal if they make the same changes to strings with the same identifiers.

We write diff ( od , md ) for the differences between the original document, od , and its modified version, md . For two documents with the same structure, their differences can be easily obtained by tr aversing the document structure and comparing each tag and text content. The view updating property of Bi-X is as follows. Suppose sd is a source document, X a Bi-X transformation, td a target document of sd transformed by X ,and td is obtained from td with only good modifications. After backward transformation of td using X , the following condition holds: where sd is the updated sd generated by the backward transformation. Intu-itively, this property means that, after a backward transformation, the modifica-tions on the views are reflected back to th e corresponding tags or text contents in the source documents. The communication protocol in the data updating process, comprises two phases: init and update . They are performed by the init and update services, respectively, provided by the Bi-X service. Between th e two phases, the user edits the view on the client. The steps in each phase are illustrated in Figure 5 and described below. Init Phase Init(1): Client sends init message to Bi-X server with two arguments: URI1 for Init(2): Bi-X server requests files specified by URI1 and URI2 using HTTP Get Init(3): Machines specified in URI1 and URI2 process HTTP Get method and Init(4): Bi-X server performs forward transformation and sends view to client. Updating Phase Update(1): After data is edited, client sends update message to Bi-X server Update(2): Bi-X server requests source data to be updated and code specified Update(3): Machines specified in URI1 and URI2 process HTTP Get method Update(4): Bi-X server performs backward transformation to obtain updated Update(5): Bi-X server performs forward transformation using updated source We implemented our Bi-X service in Java, using standard Web service technolo-gies such as SOAP [15], the representational state transfer (REST) model [7], and WSDL [16]. The configuration is shown in Figure 6. Its application to a practical case is des cribed in Section 6.
 Axis and Tomcat. The Axis2 platform [2] is used to implement SOAP and Bi-X Driver. The Bi-X driver wraps Bi-X engine, which is a Java implemen-Bi-X Service Port and WSDL. The Bi-X service port and WSDL enable In our architecture, the client and the co ntent servers simply need to satisfy the requirements given in Section 2. Here, we give an example of the client and content server, by which we have tested several use cases. We also show the usability of our system using one test case that uses CiteSeer [5] database. 6.1 Client and Content Server Example A Bi-X service client that calls methods provided by the server can be easily prepared using standard We b service technologies. A ll necessary information for this can be obtained from the WSDL d escription of the Bi-X service. For example, a client program can be created by using the WSDL2java tool included in Axis. It generates client stub code for SOAP communication from the WSDL description. The client simply uses the code to invoke a Web service as if it was a regular Java object in the same address space.

As the interface for our client, we use Justsystem xfy [10], which is an  X  X n-tegrated XML application development en vironment X  developed by Justsystem Corporation. An advantage of using xfy in our testing is its ability to handle var-ious kinds of XML vocabularies in an optimized and sophisticated manner. For example, texts in XHTML vocabulary are directly editable in the xfy browser. We incorporated our client program with xfy so that it would work as an xfy plug-in. We create request messages o n the xfy interface and sent them to the Bi-X server. The results from the server are displayed in the xfy browser. In the current update implementation, the entire document of the changed view is sent to the Bi-X server, and its well-formedness is checked in the client. The validity over a schema is checked in the Bi-X server when the URI of the schema definition file is given.

There are two basic requirements for a content server: be able to provide XML files and be able to accept modified files. F or example, we can use the eXist XML DB [14] to provide source data. In this case, when receiving a request for source data, the content server e xtracts the source data from the DB with XQuery and sends them to the transformation engine . When the updated source data is returned, it updates the D B accordingly by executing updating queries prepared by the user. The XQuery in eXist extends the standard XQuery with some update statements that can be used to create updating queries . 6.2 CiteSeer CiteSeer is a scientific literature digital library and search engine that focuses primarily on the literature in computer and information science. It crawls the Web and harvests academic and scientific documents. It uses autonomous cita-tion indexing to permit querying by citation. The CiteSeer Web site has pages for correcting the information for a giv en document (title, abstract, summary, author(s), etc.). Any user can submit a correction through a form-based Web interface by editing the contents and submitting them. This kind of application is thus well suited to our view updating system.

To test the view updating, we saved part of the original XML data taken from the CiteSeer library and perform view updating using the Bi-X server. Figure 7 shows a snapshot of the view in the xfy browser. We provide the URIs of the source XML file and the Bi-X code need ed to transform it. We then press the Start button to invoke the init service. The XHTML view is generated by the Bi-X code and displayed in the xfy browser. The view contains the document information (title, author, and titles of cited documents) in list format. We edit the information directly in the XHTML view provided by the xfy browser. The modifications are then reflected back to the source by pressing the Update button, which invokes the update service. Thus , users can create a view that includes only the contents of interest in a suitable format by creating an appropriate Bi-X code, edit the contents in the view, and update the source XML data. The Bi-X language has a bidirectional transformation style similar to that of the Harmony [8] and XEditor [9], which are both domain-specific. Harmony was designed for synchronizing tree-structured data, while XEditor is mainly used for editing tree-structured data. Bi-X ext ends their capabilities, so it can be used for general purpose XML processing. T he differences between Bi-X and these languages are discussed in detail elsewhere [13].

In the relational database area, there has been some work on bidirectional mapping between a database and XML documents. In the approach of Bragan-holo et al. [4], the underlying relational database tables are updated directly rather than through views. In that of Knudsen et al. [11], the updates to query tree are transformed into SQL updates, and then the traditional view updating techniques are used to update relational databases. Obviously, these approaches are not suitable for updating native XML repositories.

Many XML updating systems that use a database are closely connected to the database system, so they are not easy to re-implement to work with a different system. The Bi-X server is a generic to ol for XML updating, so it can be easily connected to content servers and web applications and can be reused. In our Web service architecture for bidirectional XML updating, users can up-date remote source data by editing a target view on the local machine. This view is generated by some transformation of the source data. The user can create a view that includes only contents of inter est in a suitable format by creating an appropriate Bi-X code, edit the contents in the view, and update the source XML data accordingly without coding a backward transformation. Due to the use of standard Web service technologies, the data viewer client and content servers can be easily replaced with ones chosen by users to implement their own applications.

There are a number of directions for future research to make the service architecture more practical and usable. Al though we considered discrete updates in this work, concurrency control that would enable many updates to be made at the same time would make it more practical. A control policy needs to be defined for allowing access to the service. We are grateful to Justsystem Corporation for providing us with helpful technical information about xfy. This research is supported by the Comprehensive Devel-opment of e-Society Foundation Software program of the Ministry of Education, Culture, Sports, Science and Technology, Japan.

