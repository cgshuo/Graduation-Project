 1. Introduction
Mass spectrometry (MS) is a well-known technique among physics researchers, which only recently has been attracting biologists. By using MS, a spectrum containing couples of values [intensity, m / z ] can be extracted by a biological sample. Each couple shows the presence in the biological sample of a biomolecule cialists may extract from each spectrum information on biological samples contents in a more accurate way of a spectrum is shown.
Quality and quantity of data contained in spectra depend on the type of mass spectrometer adopted, and on the ionization technique used for breaking chemical links. For instance MALDI-TOF is a Matrix-Assisted (TOF) detector. Such mass spectrometer is able to detect and characterize biomolecules, such as proteins/pep-tides, oligosaccharides and oligonucleotides, with molecular masses between 400 and 350,000 Dalton (Da) sequences contained in the original sample. Such an association is performed by querying publicly available databases containing theoretical peaks values associated to known proteins/peptides ( Matrix Science Ltd, 2004; Bujnicki, 2004 ).

Each spectrum is usually stored in a flat file managed by the file system such that no meta information is associated to experiments thus limiting results sharing and reusing. Indeed, each mass spectrometer experi-ment is associated to such meta information: such as operator, spectrometer type, ionization technique, parameters, and so on. Even if in some scenario it is possible to speed up spectra file management operations (e.g., by using compression techniques), the main focus in using spectrometers is to simplify information extraction from spectra data. Each spectrum stored as flat file, may be as large as hundreds of Kilobytes to some Gigabytes. Large volume of data may occur while increasing the instrument X  X  resolution or by using a more precise technique. For example, tandem mass spectrometry (MS/MS), where peaks or parts of the MS spectrum are associated to another (tandem) spectrum, produces much more information than MALDI-TOF. Retrieving biological information from peaks contained in each spectrum, adding annotations to it about biological intuition, and cross validating experimental results require high performance platforms and ad hoc data management strategies. Recently, the Human Proteome Organization ( Human Proteome Organization, 2006 ) is promoting the use of an XML-based ( World Wide Web Consortium, 2005 ) formalism to standardize spectra representation. mzData allows to represent spectra data in a compressed form, enriched accessed.

The need for a uniform and widely accepted access and manipulation strategy for such large datasets arises, especially when information coming from single experiment on a specified MS platform has to be shared and validated in a distributed laboratory environment. As an example, consider a number of laboratories each one running tens of MS experiments on different available mass spectrometers as in Beer et al. (2004) . Such a con-figuration can potentially lead to terabytes of data produced each week or even each day. Pushing these con-siderations to their limit we note that spectra processing (e.g. reduction of noise due to sample preparation, presence of other substances in the original sample, and instrument accuracy) can easily scale-up minimal computational requirements. Furthermore, algorithms for peptides and proteins identification, in such a scaled-up context, become immediately heavy time-consuming tasks. The grid ( Foster &amp; Kesselman, 2005 ) naturally offers an high performance and flexible computational environment for efficiently performing spectra data management.

We present a framework designed to work in a grid-based environment composed of several nodes, each one associated to a laboratory spectra server (called node from now on) running its local database. The frame-work efficiently supports distributed storage and manipulation of spectra data. Each node contains an appli-cation programming interface mounted on a data storage system hosting spectra produced by the laboratory.
Spectra are stored using three different formats: raw files : original data produced by the MS instrument is saved unchanged, thus allowing users to retrieve original data; Fig. 2 shows the data contained in a raw MALDI spectrum; tuples in a relational database : a MySQL ( MySQL, 1995 ) database instance is used to store spectra as cou-ples (intensity, m / z ) adorned with meta information about instrument, experiment, results and clinical/bio-logical annotation for spectra; mzData instances : meta information is stored as XML element instances, where spectra measurements are compressed into an XML element, using a simple coding compression formalism. The XML representation is very useful to share whole spectra among nodes. Moreover using an XML representation, it is possible to define simple views on XML data thus achieving a fine-tuned personalized access to such data ( Aguilera,
Cluet, Milo, Veltri, &amp; Vodislav, 2002 ). Each node may define a personalized view thus allowing remote cli-ents to query local data.

The proposed system is composed by a set of nodes each one associated to a laboratory, that are part of a node operator performing computational algorithms on local and remote spectra data, such as data mining service describing metadata instances and corresponding nodes running on the grid. Thus, each laboratory node stores and publishes spectra originated from its instruments and may access to both local and remote data. The system architecture is scalable where new nodes may be added to the environment without major configuration changes. Access to the grid by both nodes (laboratories) and clients is managed by using the digital certification mechanism offered by the Globus infrastructure.

The paper is organized as follows. In the following section we describe related works on spectra data man-agement. Section 3 presents the nature of mass spectra data. Section 4 presents the data model and the archi-tecture of the grid-based spectra management environment, while Section 5 reports examples of queries performed on the grid.
 2. Related works
Recently, there has been an increasing interest for biological problems by computer scientists. The aim is to extraction methods. Often the results contain lots of data mixed to noise and irrelevant data, that cannot be efficiently filtered out without automatic supports.

Most of the companies supporting biomedical activities through new technologies, are defining new mod-ules for the treatment of mass spectra data. For instance, the Applied Biosystems company, one of the leader in producing mass spectrometers ( Applied Biosystems, 2006 ), offers LIMS (Laboratory Information Manage-ment System) an integrated tool allowing to design and execute workflow-based applications. In particular, it supports main phases of proteomics experiments: sample preparation, protein separation (using, for instance, publicly available databases for protein identification. Nevertheless, no MS data repository allowing users to ilarly, SampleManager ( Thermo Scientific, 2006 ) integrates data obtained both by bio-clinical instruments and by Electronic Patient Records, but no database support is given to the MS spectra data.

Most of the existing products offer commercial database management systems to model mass spectrometer experiments, storing meta information such as experiments, results and laboratory, but spectra management is suite offered by Nonlinear Dynamics (2006) stores the physical address of the file containing raw data. Data is then loaded whenever it is necessary, and managed in main memory. Such an approach does not allow any data management and indexing, limiting experimental tests that need comparing several data, as for instance required by some preprocessing or data mining algorithms.

Recently, the proteomic research community is working on the idea of creating an MS data repository to store experiments similarly on what happens for publicly available data sets (as PDB Research Collaborator for Structural Bioinformatics. Protein data bank (2004) ). For instance, the proteomics standard initiative (PSI) is working on the definition of an XML-based standard format, the mzData , to represent proteomics experiments, where also meta information on mass spectrometer experiments is reported ( Proteomics Stan-value pairs related to a spectrum are compressed and contained in a single XML element. Still, no repository proposals have been reported for defining centralized or distributed data storage for mzData. IBM studied the definition of a platform for MS experimental storing, for monitoring and managing bioinformatics experi-ments. In such a framework, particular interest is given to the mass spectra data management, even coming from MALDI MS or from LC/MS spectrum analysis.

Database community is treating MS data as interesting data sets: ( Chen, Huang, &amp; Ramakrishnan, 2004 ) presents a labeling technique for adding labels to each spectra about expected chemical ions species, but no attentions have been given to data management. MS data contains lots of information hard to manage in plain text formats. 3. Mass spectrometry data
Mass spectrometry (MS) is a technique allowing to identify macromolecules contained in a chemical com-pound. The mass spectrometer separates gas phase ions according to their m / z (mass to charge ratio) values. sample labelling (e.g. ICAT protocol); and (iv) mass spectrometry processing. Mass spectrometry output is which depends on the quantity of the detected biomolecules, and a mass to charge ratio ( m / z ), which depends output associated to an analyzed sample. Indeed, MALDI-TOF output are in order of 10 MB of flat files: analysis by manual inspection is not feasible. Fig. 1 shows an example of spectrum, and Fig. 2 shows a snap-shot of spectra data represented as raw file.

In some applications, such as proteins identification, research has focused on obtaining a list of significant peaks, each of which representing a protein/peptide contained in the original biological sample. Protein iden-tification is performed by using software modules querying publicly available databases such as MASCOT ( Matrix Science Ltd, 2004 ) containing peaks expressions of known chemical species (e.g. proteins/peptides). Ideal spectra are then compared with the experimental ones to identify composition of the biological samples.
Such database search usually may return several results with different matching probabilities requiring spec-trometer expertise. In a distributed laboratory, experts may compare such choices with respect to similar experiments performed in other laboratories to validate their results. To perform data interpretation, mass spectra data require preprocessing phases. For instance a preprocessing consists of aligning a set of spectra with respect to their m / z values, i.e. peaks are aligned to be comparable.

Mass spectrometry data are associated to a set of metadata describing information on each spectrum. The metadata considered in the current release are the following: spectrometer type (e.g. Applied); spectra type (MALDI, SELDI, MS/MS, etc.); experimental date and operator; biological sample description (human tissue, serum, healthy patient, etc.); notes about spectra contents (interesting proteins, biological patterns, etc.); general notes about the experimental results (e.g., patient disease); information about data manipulation (e.g. data being preprocessed or not); laboratory identification (full address, department and eventual laboratory number); other information.
 For instance, such information is coded into the mzData schema ( Human Proteome Organization, 2006 ).
In the following, a portion of the mzData schema containing the key fields used to describe a spectrum is reported. &lt; ?xml version= 00 1.0 00 encoding= 00 UTF-8 00 ? &gt; ... &lt; xs:schema xmlns:xs= 00 http://www.w3.org/2001/XMLSchema 00 ... &gt; &lt; xs:element name= 00 mzData 00 &gt; ... &lt; /xs:element &gt; &lt; xs:complexType name= 00 sourceFileType 00 &gt; ... &lt; /xs:complexType &gt; &lt; xs:complexType name= 00 personType 00 &gt; ... &lt; /xs:complexType &gt; &lt; xs:complexType name= 00 softwareType 00 &gt; ... &lt; /xs:complexType &gt; &lt; xs:complexType name= 00 dataProcessingType 00 &gt; ... &lt; /xs:complexType &gt; &lt; xs:complexType name= 00 spectrumType 00 &gt; ... &lt; /xs:complexType &gt; &lt; xs:group name= 00 binaryDataGroup 00 &gt; ... &lt; /xs:complexType &gt; &lt; xs:complexType name= 00 spectrumSettingsType 00 &gt; ... &lt; /xs:complexType &gt; ... &lt; xs:complexType name= 00 descriptionType 00 &gt; ... &lt; /xs:complexType &gt; ... &lt; /xs:schema &gt;
In particular, sourceFileType element contains description and location of the source raw file gener-ated by the instrument; the personType element contains operator identification information (i.e., name, institution, contact information); the softwareType element contains Software information (the software that produced the peak list); the dataProcessingType contains information on data preprocessing and preparation; the spectrumType element contains information about eventual relationship among spectra data (e.g., this occurs when a spectrum is obtained from processing another one); the binaryDataGroup element contains the spectrum values in a binary 64-based encoded format; the spectrumSettingsType element contains the spectrometer parameters set for acquisition; the descriptionType contains free text notes. Such a schema, used to represent spectra meta data, is also used to formulate queries. 4. System architecture
Mass spectrometry-based proteomics may require the collection and analysis of data produced in remote laboratories. The collection, storage and analysis of huge mass spectra can leverage the computational power of distributed environment. We chose a grid-based architecture, that offers efficient data transfer primitives, effective management of large data stores, the computational power required by huge data manipulation, and the security and privacy required while treating data belonging to different organizations.
As a grid framework we chose Globus ( Foster &amp; Kesselman, 2005 ), a collection of tools and facilities to implement the computational grid and virtual organization vision. Data management on the grid may be per-formed by using the OGSA-DAI grid service API. OGSA-DAI ( Karasavvas et al., 2004 ) is a middleware prod-uct supporting the exposure of data resources, such as relational or XML databases, using various interfaces to many popular database management systems. The software also includes a collection of components for querying, transforming and delivering data mainly in XML. Nevertheless, in our architecture the final user of each node managed by SpecDB service. The SpecDB service is in charge of retrieving spectra data from local data sources that are expressed into three different formalisms, i.e. XML mzData, relational data and raw files (see Section 4.2 for further details on data model).
 The architecture of the proposed system is composed by a set of grid nodes each one based on the Globus Toolkit ( Foster &amp; Kesselman, 2005 ). Each node runs: a spectra database management service, namely SpecDB service, providing an interface on spectra data (stored in relational, mzData and flat file formats) for data retrieval; a set of services implementing both spectra preprocessing and data mining algorithms that can be remotely invoked from other nodes;
Query service; a client graphical user interface allowing the user to retrieve spectra from remote nodes and to perform services.
 grid services X  metadata. The index service is a grid service included in the Globus Toolkit implementing a ser-vice metadata locator. Services metadata, describing services and their location into the grid, are expressed through an XML document that can be queried by using XPath expressions ( World Wide Web Consortium, data generated by using the  X  X  X star 400 Mass Spectrometer X  X  ( Applied Biosystems, 2006 ). The Query service running on B invokes the Index Service on the node A asking for SpecDB instances that may satisfy the query. Such information is coded into metadata contained in the Index Service as a list of services exported by nodes The Query Service on the user node invokes SpecDB Services on the interested nodes where query is per-formed. Finally, the Query Service returns results to the operator. Fig. 3 depicts such a scenario.
On each node, the SpecDB data service, whose standalone version is available online ( Veltri, 2006 ), offers an API for loading data from text files produced by instruments (currently MALDI-TOF spectrometers) of the laboratory hosting the node. Data is then loaded into relational and mzData. mzData instances are cur-rently stored into a BerkleyDB instance ( SleepyCat Software, 2006 ). An interface for querying data is also available supporting retrieval functions based on spectra values as well as on meta information such as experi-ment date, Spectrometer type, biological results associated to the spectra analysis, and so on. Obviously, such meta information have to be published in the Index Service to be available to Query Services. On spectra data each node may perform data processing services such as preprocessing functionalities ( Cannataro, Guzzi, ( Witten &amp; Frank, 2005 ).

The Index Service uses a metadata description containing information about data and services published by each node. The Index Service allows to filter out nodes according to user queries. When a user wants to per-form a query against the grid, as a first step he/she contacts the local Query Service. Such module parses the query, accesses to the Index Service and generates a query plan with list of nodes to be queried. The Index
Service is organized as a set of data domains encoded in a set of XML documents, one for each node of the grid. For instance, the Index Service contains the list of Instruments instances associated to grid nodes, thus that looking for spectra generated by the QStar spectrometers will be addressed to the proper grid nodes. Part of the information contained into the Index Service overlaps with mzData schema described in Section 3 .
Fig. 3 shows the system architecture in the grid environment described above, where each node contains grid services to perform queries and to wrap data from laboratory instruments. Note that according to grid policy, not only laboratory operators are allowed to access data, but also external authorized users are able to use (part of) the grid resources.

Our university has reported the identification of a recurrent mutation (5083del19) in the Breast Cancer (BRCA1) gene in a patient population with breast cancer from the Calabria region, Italy ( Baudi, 2001 ). Many biological sample sets useful for performing spectrometry-based identification of proteins related to gene mutation, come from a calabrian population migrated in different countries (e.g., Canada and South Amer-ica). So we consider a mass spectrometry-based proteomics application where data may come from remote laboratories with the final goal of the characterization of inherited breast cancer. By using a grid based dis-tributed approach, indeed, results obtained by analyzing spectra in a calabrian laboratory may be compared with results produced in remote ones. At the same time, the grid environment allows solving the more general problem of sharing huge amount of spectra data among distributed laboratories.

A single node may search for spectra data responding to particular metadata such as spectrometer types, cessing and spectra data manipulation are performed on the node. At this point comparative analysis can be conducted by using different data mining tools and approaches in parallel, using the allocation and scheduling functions of the grid. Built knowledge models are then presented to the requesting scientists. Moreover, thanks to the presence of an XML schema for mzData, we implemented an XML-based view interface ( Aguilera et al., 2002 ) for querying spectra data contained in some of the distributed nodes (see Fig. 5 d). Thus, users may for instance look for all spectra generated by a given instrument or with a given sampling coding.
In the following we describe the SpecDB service implemented into the architecture for spectra management and querying. 4.1. SpecDB data service
Mass spectra are not complex data, they are couples of real numbers (raw data, see Fig. 2 ). Nevertheless, complexity derives from the fact that each spectrum contains thousands of values, contained in flat files with average space occupancy from kilobytes to several Mbytes: problems occur in case of manipulation (e.g., preprocessing) of large set of spectra. Indeed, storing spectra data into file system using directories in sec-ondary memory does not allow efficient information extraction or manipulation. Such an approach strongly limits the possibilities to identify biomarkers by comparing spectra obtained from populations with similar mining tools such as those described in Witten and Frank (2005) are limited when manipulating large amounts of data.

The SpecDB grid Service is based on the SpecDB module ( Cannataro et al., 2005; Veltri, 2006 ), where data tem; mzData format, stored into an XML database, obtained either by spectrometers supporting such a for-mat or generated locally by each laboratory; relational format, i.e. spectra are stored with their values and meta information describing them, into relational tables.

SpecDB has been designed taking into account the following main requirements for spectra data management: supporting efficient storing and retrieval of data (single spectrum, set of spectra and portions of spectra); supporting import/export functions (e.g. loading of raw spectra available in different text files, exporting of spectra in XML mzData data); offering query/update functions able to enhance performance of data preprocessing and analysis (e.g. avoiding full main memory processing). Such functions are offered through a set of specialized APIs, for instance range queries could be used to implement basic preprocessing techniques as aggregation of peaks, such as binning and data reduction.

The SpecDB system architecture is reported in Fig. 4 , where data produced by one or more instruments is loaded, translated and stored into three repositories (bottom layer of Fig. 4 ). Spectra can be organized into logical datasets (middle layer of Fig. 4 ) that can be manipulated and queried through the SpecDB APIs (top layer of Fig. 4 ).

Data are loaded through a Graphical User Interface (see Fig. 5 ) implemented in Java that allows loading and dumping data from text files into the database. The interface allows to perform data preprocessing and to store preprocessed spectra in the data storage. Moreover, Fig. 5 shows the main SpecDB functionalities, that allow to configure each grid node. The graphical user interface allows to: select input and output data sources . With this function the user has the control of the data flow; he/she can choose where to get spectra from and where to save results; load spectra . This function allows loading spectra data from a relational data source, from the file system or from the XML native database. Note that the Berkeley DB has its own APIs to access data; perform queries . The user is allowed to perform queries on spectra data and even on metadata. For example one could search all spectra produced by a certain kind of instrument; save results . Results can be saved on a relational data source, on the file system or into the XML database. 4.2. Data model We here describe the logical organization of the spectra data in the relational model and in mzData format. Relational database is realized on a MySQL ( DuBois, 2004 ) database management system. The relational schema is composed of the following relations: MassSpectrum( Id , SpectrometerId, SampleOriginId, Parent, Date, Treatment); Spectrometer( Id , ClinicalFolderId, Name, Type, Model, Description); SampleOrigin( Id , Date, Description, Type); ClinicalFolder( Id , Diagnosis); Values0 X 500( Id , MassSpectrumId, MZ, Intensity); Values19.5k X 20k( Id , MassSpectrumId, MZ, Intensity);
In particular, Values tables contain spectra data divided depending on the m / z values to efficiently perform queries on single values, or range queries. Fig. 6 shows an instance of the MassSpectrum relation, while Fig. 7 shows an instance of the tables containing spectra values.

The schema reported above, represents the logical data organization in the relational model. The main rela-the corresponding intensity value, information on date and experimental details (laboratory, operator, etc.). Spectra have been divided according to m / z spectra window. Such subdivision allows to optimize data orga-tional tables which maintain a reference to the original spectrum and divide data peaks depending on predefined m / z windows. Thus, a spectrum with values of m/z contained in the range 0 X 20,000 Da (Dalton), may be divided into many relations, such that: intensity peaks that belong to the range 0 X 500 Da are stored in relation couple X 500 X 1000, and so on.
 On the other side, the XML database stores spectra in mzData format. In the following, a snapshot of an XML-based representation of a spectrum is reported. Note that the file contains the compressed spectrum in XML Schema reported in Human Proteome Organization (2006) partially described in Section 3 . &lt; ?xml version= 00 1.0 00 encoding= 00 UTF-8 00 ? &gt; &lt; mzData version= 0000 &gt; &lt; /description &gt; &lt; spectrumList count= 00 &gt; &lt; /spectrumList &gt; &lt; /msData &gt; 5. Information retrieval through SpecDB
The proposed SpecDB system is thought for a twofold goal: (i) retrieving efficiently portions of a spectra and (ii) retrieving spectra datasets shared on the grid through XML querying. In the following, some examples of both applications are briefly described. 5.1. Querying spectra locally
The Query Service may perform queries on the relational schema adopted by SpecDB to store mass spectra siders a Query Service that supports both queries on mzData schema, performed by using XPath expressions on XML Schema, and SQL like queries on relational MySQL data. There is currently a temptative of defining a query language and an appropriate query translation module.

We tested the SpecDB service for data management in a standalone version, by loading 280 MB of raw data and almost 20,000 of records have been loaded. Loading is obviously linear in number of loaded spectra (see Fig. 8 ). Loading spectra in different nodes may be done in parallel and may take advantage of the grid file transfer utilities, thus improving speed-up.

We report a simple script for querying data using a filter, whose result set is used for creating a new spectrum.

FilterSpectrum (MassSpectrum ms, Double mz[ ]) { } //end filterSpectrum
Such simple method is useful when is required to compare portions of spectra filtered with respect to m / z windows, or when comparing spectra from similar biological samples. The filtering operation has an execution 40 ms for single value and 300 ms for more than 10 filter values.

The following script reports a simple experiment of normalization. The normalization of spectra data con-sists in reducing peak values with respect to the maximum peak.

Normalization (Mass _ Spectrum ms) { } //end Normalization Data preprocessed is loaded into the database as a new spectrum keeping trace of the original spectrum. formed in 1400 ms, on one spectrum of 15,000 average records. Moreover, such normalization may be realized for several spectra considering the normalization with respect to the maximum value of peak for all spectra. 5.2. Querying spectra on the grid
To exploit the spectra sharing characteristic of SpecDB users may query the different nodes of a grid con-taining spectra datasets using the metadata information described in Sections 3 and 4 .

Let us suppose that an operator is looking for spectra data obtained by using a particular mass spectrom-eter type, in remote laboratory, for instance the  X  X  X pplied Biosystems QStar X  X . He issues a query against the query service performing the query in XPath on the mzData XML Schema. The query is issued on the local
SpecDB service and to the remote Index Service. The Index Service will return the list of nodes containing information on the QStar Applied Biosystems and the Query Service will issue the query against such nodes. On each node the query is evaluated and results are returned to the original one.

Most interesting results can be obtained exploiting biomedical metadata. Let us suppose that different lab-oratories are working on a same disease, e.g. Breast Cancer, by using different spectrometers (technology) or set of raw data and, after local preprocessing and data mining analysis (e.g. supervised classification), such data can be annotated with a description of discriminant peaks/proteins (biomarker) able to separate classes (e.g. healthy vs diseased). A user may thus retrieve for each experiment involving Breast Cancer the produced spectra and discovered biomarkers. An example of a SQL-like query retrieving such information is described below.
 SELECT spectra, biomarker FROM nodes
WHERE (disease=BreastCancer) AND
Another example where SpecDB could be useful is in outcomes research. Outcomes research seeks to understand the end results of particular health care practices and interventions. Let us suppose that different als). If MS is used to monitor at biological level the medical indicators about the progression of the disease data about the different treatments and to compare their effectiveness and side effects.

An example of a SQL-like query retrieving the treatments that give a life time greater than 5 years is described below.
 SELECT spectra, treatment, disease _ progression FROM nodes
WHERE (disease=BreastCancer) AND
Finally, after retrieving such spectra datasets more analysis can be conducted on the aggregated data, even-tually after some format conversion. 6. Conclusions
We considered the problem of treating huge amounts of spectra data in a distributed environment. We pro-posed a grid-based distributed environment where spectra can be queried by using grid services. Future work is to invite new laboratories to join the grid environment and sharing spectra and meta information associated to them. We also plan to improve our database architecture to store different data formats, especially related to prepared data for data mining (e.g., ARFF Weka format).
 Acknowledgements
Authors are grateful to Marco Gaspari and Giovanni Cuda for several discussions on the spectra data man-agement topics.
 References
