 How to improve the modeling efficiency and accuracy has become a burning problem. The popularization of recom-mendation technique in E-Commerce provide us new trajec-tories that can be used for addressing the problem. In this paper, we propose a graph-based workflow recommendation for improving business process modeling. The start point is so-called  X  X orkflow repository X  including a set of already developed process models. Graph mining method is used to extract the process patterns from the repository. Based on graph edit distance (GED) [2], we calculate the distance between patterns and the partial business process, viewed as reference model, which is under modeling and select the candidate nodes with smaller distances for recommendation. The performance study show its feasibility for practical uses. H.4.1 [ Information Systems Applications ]: Office Au-tomation X  Workflow management Graph-Based, Workflow Recommendation, Business Process Modeling, Graph Edit Distance
With the maturity of workflow technology, enterprises pre-fer to describe their business operations in terms of business processes. Describing a business process is a piece of design and modeling work which is the activity of (re-)evaluating and organizing tasks that a business process is composed of. However, process modeling would be difficult or even impossible when domain knowledge is missing or processes are to be described by amateurs in the field. Furthermore, modern commerce also brings forward higher requirement on the efficiency and accuracy of business process modeling.
Efficiency. The business process usually follows market demands which might be changed frequently. It is hard for modelers to figure out the changed demands within a limited time, which would lead to decreased efficiency for modeling.
Accuracy. The business operations are becoming more and more complicated. Designing such processes relies heav-ily on tacit domain knowledge and personal experiences which the modelers might not have. And the processes modeled by them are probably not suitable.

Nowadays, much work is focusing on improving the busi-ness process modeling. Based on event logs, workflow mining [1] can discover the actual business processes which are not probably as perceived by the management and it can help modelers improve process modeling with discovered process models. Process retrieval [3, 4] can also help modelers im-prove the modeling by retrieving the similar fragments from the workflow repository. However, on the basis of these two techniques, the construction of a new business process is still referred to the pre-discovered template models which need much manual work to analyze.

In [6], the authors propose a workflow recommendation technique called FlowRecommender which leverages prove-nance of workflows to provide recommendation for the best node that needs to be chosen to complete the workflow. However, FlowRecommender doesn X  X  support patterns which consists of complex structure (e.g. AND-join, OR-join, etc.) and it will fail in face of candidate node with multiple in-fluencing upstream sub-paths. Besides, the actual business processes are far beyond the straight line structures and FlowRecommender can X  X  be widely used in real application.
Since the workflow repository usually contains a large amount of business processes and these processes are typ-ically modeled in form of directed graphs, starting from the graph structure of the business process and borrowing the ideas from traditional recommendation systems, we plan to proceed association rule mining between business activ-ity nodes and process fragments (i.e., subgraphs) within a workflow repository, and provide related decision support for modeling processes.
We call it graph-based workflow recommendation . A busi-ness process fragment which is under modeling is viewed as a  X  X eferrence model X , and the patterns are called the influenc-ing upstream subgraphs of the activity nodes that determine the occurrence of these nodes in the workflows. The associ-ation rule mining mainly refer to pattern extraction which is the foundation of workflow recommendation. Based on measuring similarity and calculating distance between refer-ence model and process patterns, this technique could rec-ommend appropriate nodes for modelers to automate the construction of business processes. As a result, it can not only Speed up the business process modeling by reducing the deliberation time which is needed when domain knowledge is inadequate, but also provide a guidance for choosing the most likely tasks by minimizing the errors that are possibly made in business process modeling.

In this paper, we use graph mining technique to extract the patterns from the workflow repository. And based on the graph edit distance (GED), we propose a 3-dimensitonal distance calculation metric for searching the most relevant patterns as the recommendation foundation. Then we select the corresponding nodes of those patterns and determine whether these nodes could be recommended to the modelers.
Firstly, we define what a business process graph is. There are many modeling methods for business processes. Differ-ent modeling method has different representation of work-flow structures, which causes the confusion of understanding the overall structure of a business process. Thus, we define a business process graph in an abstract view.

Definition 1. (Business Process Graph) .Let T be a set of node types and L be a finite alphabet of labels for nodes. A business process is a connected graph denoted by a tuple P =( N, X , X  )where:(i) N is the finite set of nodes; (ii)  X  : N  X  T is the node typing function; (iii)  X  : N  X  is the node labeling function. Let E = N  X  N be a set of directed edges and x  X  N,y  X  N . A node x is an input node of another node y iff there is a directed edge from x to y (i.e., ( x, y )  X  E ). Node x is an output node of y iff ( y,x ) Start nodes are nodes without any input and end nodes are those without any output.

In order to apparently describe the complex structures of a process model, function  X  is used to distinguish be-tween node types. Take Petri-net for example, place ( X  X  X ) and transition ( X  X  X ) are two different node types. As shown in Fig. 1, the upper models are standard workflow patterns (i.e., AND-split, AND-join, OR-split, OR-join) represented by Petri-net and the lower row shows corresponding busi-ness process graphs. Each node is annotated with a pair indicatingthenodetypeandthenodelabel.

Definition 2. (Candidate Node Set, Upstream Sub-graph) .Let P =( N, X , X  )and P =( N , X  , X  )betwo business process graphs. N &lt;P,end&gt; represents the end nodes of process P , which are called candidate nodes. P is an upstream subgraph for candidate node set N &lt;P,end&gt; if (i) N graph of P .

From Definition 2 it follows that, each business process graph or subgraph could be divided into two parts which
Figure 1: Petri-net model and its process graphs are candidate node set and its corresponding upstream sub-graph. Conversely, each pair of them corresponds to a busi-ness process graph or subgraph. In workflow repositories, there are many pairs and it often happens that one upstream subgraph or candidate node set may appear in more than one pairs. Thus, we evaluate the correlation of a candidate node set and its upstream subgraphs through the measure of confidence which defined as follows.

Definition 3. (Confidence) .Let c be a candidate node set and u be an upstream subgraph. freq ( c, u )represents the frequency that c and u occur together. freq ( c )repre-sents the frequency that c occurs alone. The confidence of c
The candidate node set and upstream subgraph within a process graph or subgraph which is of low frequency might probably correlated strongly. If support measure of tradi-tional associate rules is used, such correlations will be elim-inated and recommendations based on these business pro-cesses are impossible. Therefore, we only leverage the confi-dence in our work and support is not supposed to use. Based on the Definition 3, we present following definition.
Definition 4. (Influencing Upstream Subgraph) .Let  X 
Conf be a confidence threshold. For a given candidate node set c and its corresponding upstream subgraph u , u is influ-encing iff: Conf ( c, u )  X   X  Conf .

In workflow repositories, influencing upstream subgraph determines the occurrence of candidate node set and we call them patterns. Next, we present our definition of pattern table which is the input for distance calculation and node recommendation.

Definition 5. (Pattern Table) . The pattern table is a tuple T =( I,C,f )where: (i) I is the finite set of influencing upstream subgraphs; (ii) C is the finite set of candidate node sets; (iii) f : I  X  C is a surjective mapping.

The candidate node sets in pattern table contains the node(s) which is(are) to be recommended. In order to pick the correct candidate node set, matching the reference model, which is under construction, with the influencing upstream subgraphs is required. Thus, GED (graph edit distance [2]) could be used for this purpose. The basic idea of GED is to sum the cost of elementary  X  X rror-correcting X  opera-tions: node substitution, node insertion/deletion, edge in-sertion/deletion. And the minimal cost taken over all oper-ations is the edit distance between two graphs. The smaller the edit distance, the more similar the two graphs.
However, GED could not be the only metric for business process graphs comparison under the circumstance of work-flow recommendation. Suppose that there is a process under construction: a  X  b  X  c  X  d  X  ? where  X ? X  represents the
Figure 2: An illustration for backward location unknown node that is to be recommended. Two patterns ( a  X  b , c  X  d ) in pattern table are matched and their corresponding candidate node set is { e } and { f } . The GED values for given process fragment against above two patterns are probably same. That is to say, the probability for rec-ommending node e and f is equal. In fact, node f should be recommended instead of node e . Because the pattern c  X  d is closer to the place where the node recommendation oc-curs. Thus, apparently, where the pattern located in given process contributes to recommendation accuracy.
 Definition 6. (Backward Location of A Node) .Let P =( N, X , X  ) be a reference model and R ( R  X  N =  X  )be a set of recommendation nodes for P .In P , i ( x )and o ( x ) respectively represent the input nodes set and output nodes set of x ( x  X  ( N  X  R )). | N | represents the number of the set N .  X  x, y, z  X  ( N  X  R ), the backward location of a node x is:
Lo n ( x )=
We illustrate Definition 6 in Fig. 2. The process in frame i is a reference model under construction and R represents the set of recommendation nodes. Two direct paths in frame ii are subgraphs of the process in frame i. For each path, the backward location of each node is marked above. As for the left subgraph in frame iii, node a is the input of b and c (i.e., a  X  i ( b )and a  X  i ( c )) and nodes  X  X  X  and  X  X  X  are the output of  X  X  X  (i.e., b, c  X  o ( a )). Note that, since there are two parallel paths for the process in frame i, node a has two location values which are 4 and 3. In this case, we choose the maximum value. Then we get the final backward locations of nodes shown in frame iv.

Definition 7. (Pattern Location, Common Nodes Num-ber) .Let P =( N, X , X  ) be a pattern from the pattern table T and P =( N , X  , X  ) be a reference model under construc-tion. | N | represents the number of the set N .If N  X  N = and  X  x  X  ( N  X  N ) , X  ( x )=  X  ( x ) , X  ( x )=  X  ( x ): The location of P in P is: The number of the common nodes of P and P is:
As Definition 7 shows, pattern location is assigned by the minimum backward location of all nodes, which both exist in pattern and the reference model. Suppose that there is a reference model ( a  X  b  X  c ) and two patterns { ( a  X  b ),( b  X  c ) } . Generally, ( b  X  c ) is more influencing than ( a  X  b ) when considering recommendation. And pat-tern locations for them are 1 and 2, which means the smaller location is the more likelihood to recommend. Sometimes, the pattern being compared has the same GED and pat-tern location. In this case, we introduce the third measure of common nodes number to increase the recommendation accuracy. The more common nodes between pattern and business process there are, the more similar they are.
Definition 8. (Distance Between Processes) .Let P = ( N, X , X  ) be a reference model, and P =( N , X  , X  )bea pattern from pattern table T . GED(P,P X ) represents the graph edit distance between P and P . max n ( P,P )repre-sents the maximum nodes number of P and P .  X  ,  X  and  X  are weights for GED, pattern location and common nodes number respectively. If  X  x  X  ( N  X  N ) , X  ( x )=  X  ( x ) , X  ( x )=  X  ( x ), the distance between P and P is:
Dist ( P,P )=  X   X  GED ( P,P )+  X   X  Lo p ( P, P )+
As defined in Definition 8, we add weights for all mea-sures. The complex structures and large volume of a work-flow repository cause the distance calculation a very compli-cated problem in real applications. As for a certain business process, different measures have different contribution to recommendation accuracy. Besides, process modelers may have different bias to different measures. In our work, we calculate the distance based on Definition 8. Apparently, the smaller distance of a pattern means the higher recom-mendation possibility for corresponding candidate node set.
Since the reference model may contain more than one end node, there are different recommendation requirements. In this section, we present two recommendation scenarios sup-ported in our work.

Single node based scenario is that the recommendation result (i.e., candidate node set) is followed by one single end node. It is triggered by drawing one edge from one end node. Note that, the candidate node set which would be recommended here may contain more than one node, the output of the end node, from which candidate node set is followed, is possibly a branched structure.

Multiple nodes based scenario is that the recommenda-tion result is followed by more than one node. It is triggered by drawing more than one edge from several end nodes. In this scenario, the modelers wants to merge the end nodes of the reference model to a recommended node forming a struc-ture like  X  X ND-join X , the node number of candidate node set here should always be one and we overlook those sets which contain more than one node.

For these two scenarios, matching all paths or subgraphs against patterns in pattern table costs too much and the distance calculation time is intolerable. In fact, each exe-cution path has its own business logic and the downstream node should be in conformity with the logic of upstream path. Therefore, we consider the direct upstream path of the place where recommendation occurs as the most important factor. Ignoring other paths(subgraphs), we only match the upstream execution path or subgraph against the patterns.
As shown in Fig. 3, the node marked  X  X  X  represents the place where recommendation occurs and the right frames including single node based and multiple nodes based sce-narios present their corresponding subgraphs for matching. Apparently, some execution paths are ignored.
The framework of graph-based workflow recommendation is shown in Fig. 4. In general, there are three modules in this framework and they are framed by the dotted line in Fig. 4. The first two modules (i.e., preprocessing, pattern discovery) are performed offline while the last module (i.e., workflow recommendation) is conducted online.

Preprocessing . In order to facilitate the pattern ex-traction, remodeling business processes modeled by different notations to uniform models, which are supported by the high-level modules in the framework, is necessary. Based on the remodeling result, we use the efficient graph min-ing algorithm (e.g. gSpan [5]) to conduct subgraph mining. Through this way, we analyze and mine fragments of all the business process graph models in workflow repository. Note that, the frequency here is set to 0 which means all the sub-graphs of all the process models are found. The reason is that no matter how low-frequency the subgraph is, the nodes in it might correlate so strongly that we can X  X  ignore. The output of this module is a set of subgraphs and their own frequencies.

Pattern discovery . In this module, firstly, each mined subgraph is decomposed to two parts which are candidate node set and upstream subgraph (i.e., Definition 2). The candidate node set is used to extend or complete the ref-erence model under construction when recommendation oc-curs, and the upstream subgraph here is used as the prove-nance for pattern extraction. Then, based on Definition 3 and Definition 4, we conduct pattern extraction selecting the influencing upstream subgraphs. At last, the selected pat-terns and their corresponding candidate node sets are reg-istered into the pattern table (Definition 5), making ready for subsequent workflow recommendation module.

Workflow recommendation . This module generates the most likely tasks for process modelers to extend or com-plete the business process under construction. Since it is performed online, comparing with above two modules, its ac-curacy and efficiency is more concerned in practice. The de-tails of the whole procedure is shown in Algorithm 1. There are mainly two computation steps in this module. The first step happens when one of the recommendation scenarios in-Figure 4: The framework of graph-based workflow recommendation Algorithm 1 The algorithm for workflow recommendation Input: A set of end nodes E of the reference model; the Output: Several candidate node sets for recommendation 1: initialize a table CNS =( C, D )where D represents dis-2: P E  X  get the upstream execution path of E 3: for each record ( p, c )  X  T do 4: if the the input data type of candidate node set c 5: Sa n ( p, P E )  X  get the same node number 6: if Sa n ( p, P E )! = 0 then 7: Lo p ( p, P E )  X  get the pattern location 8: GED ( p, P E )  X  get the graph edit distance 9: Dist ( p, P E )  X   X   X  GED ( p, P E )+  X   X  Lo p ( p, P E 10: if CNS is not empty and c is same with c 11: Conf ( c, P E )  X  Conf ( p ,c )+ Conf ( p, c ) 12: if Dist ( p, P E )  X  Dist ( p ,P E ) then 13: Dist ( p ,P E )  X  Dist ( p, P E ) 14: end if 15: else 16: CNS  X  add ( c , Dist ( p, P E )) 17: end if 18: end if 19: end if 20: end for 21: sort the elements in CNS by the value of distance 22: return first several candidate node sets of CNS . troduced in Section 3 is triggered by the designer. The ex-ecution path within the reference model is found and used to match against the patterns discovered in the last mod-ule (line 2). The second step is just calculating the distance (Definition 8) between patterns and the execution path (line 5-9). Since the computation complexity of GED is high, it takes the most of time for distance calculation. Besides, we adopt additional measures to increase the efficiency and ac-curacy, for example, filtering the patterns through I/O con-straints before distance calculation (line 4) and summing the confidence values for same candidate node sets (line 10-17). The candidate node set is recommended to modelers once the distance between its corresponding pattern (i.e., influencing upstream subgraph) and the execution path is sufficiently small (line 21-22).

As shown in Fig. 4, once the whole modeling work is fin-ished, the newly completed business process can be archived to the workflow repository and served as the provenance for future recommendation.
Based on synthetic dataset, we focus on studying the ef-ficiency and effectiveness of our graph-based workflow rec-ommendation. In order to make a comparison, we also im-plemented our version of FlowRecommender which achieves similar performance as that reported in [6]. According to [6], FlowRecommender is bette r than other techniques both in effectiveness and efficiency. However, since FlowRecom-mender doesn X  X  support complex workflow structures con-taining branches which supported by ours, the comparative study has been only conducted on simple dataset which is similar to the dataset used in [6]. By simulating the real business processes, the complex dataset contains varieties of structures (i.e., AND-join, OR-join, AND-split, etc.). The systems are both developed in Java (Jdk1.6) and all exper-iments are done on a 2.53GHz Intel Core2 Duo E7200 PC with 3.24GB main memory, running Windows XP. In addi-tion, the confidence for pattern discovery of the whole pro-cedure is fixed to 0.15.

Effectiveness Study. The effectiveness is measured by the accuracy for the activities or tasks for which a recom-mendation must be given. We set the weight values to: 1 for GED, 6 for pattern location, 1 for common nodes num-ber. Based on this weights combination, we study the ef-fectiveness by dividing both simple and complex datasets to different test sets, of which the sizes range from 200 to 1000. In Fig. 5(a), we randomly choose a test set and it is found that both methods presents the trends that the accuracy increases as the number of top recommendations increased. However, from Fig. 5(a) we can see that the Graph-based method achieves better accuracy than that of FlowRecommender when the top recommendation number reach to 3. This is because there is no structure similarity measure involved in FlowRecommender. Since the business process in complex dataset contains different complex struc-tures, FlowRecommender fails on it. As shown in Fig. 5(b), our method not only works well on different test sets but also presents steady accuracy of 80% arround when it measured by top 2 recommendations.

Efficiency Study. The efficiency is evaluated by the average recommendation time for test nodes. Generally, the efficiency is determined by the number of patterns. To study the efficiency, we also divided the simple and complex datasets into 5 test sets with a range of 200-1000. The dis-covered pattern numbers are shown in Table 1. Note that, even in a same test set, the pattern numbers of FlowRecom-mender (denoted by FR in the table) and graph-based are different since their way for discovering are different.
The test results are shown in Fig. 6. From Fig. 6(a) we can see, FlowRecommender spent less time than ours which could be mainly explained by the reason that the dis-tance metric of graph-based is more complicated and in-volved more measures than that of FlowRecommender. As for the tests on complex dataset shown in Fig. 6(b), the average recommendation time for each node increases as the number of business processes increased. This is because the number of patterns grows with the increase of business pro-cess number. Nevertheless, the time is controlled within 100 ms even when the pattern number exceeds 4000. The above Table 1: The number of patterns for matching Number of BPs 200 400 600 800 1000 Simple FR Graph 880 553 915 935 944 1289 961 1555 961 1804 tests prove that the graph-based method we proposed is ef-ficient enough for practical uses.
In this paper, we proposed a graph-based workflow recom-mendation technique which could be used for improving the efficiency and accuracy of process modeling. We addressed the problem of distance calculation between two processes containing complex structures. The experimental evalua-tions shown that the graph-based workflow recommendation we proposed is feasible for practical uses.

Since few researches focus on workflow recommendation and our work is a tentative attempt, much work still has to be done and improved in the future. For example, how to find indirect influencing patterns which benefit for recom-mendation accuracy is challenging. [1] W.M.P.V.D.AalstandL.Maruster.Workflow [2] H. Bunke. On a relation between graph edit distance [3] R. Dijkman, M. Dumas, and L. Garc  X   X a-Ba  X  nuelos. [4] R. Dijkman, M. Dumas, B. Van Dongen, R. K  X  a  X  arik, [5] X. Yan and J. Han. gSpan: Graph-Based Substructure [6] J. Zhang, Q. Liu, and K. Xu. Flowrecommender: a
