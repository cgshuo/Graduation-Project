 IT risk management tries to find, analyze and reduce unacceptable risks in the IT infrastructure. Most commonly risk is defined as a set of triplets, each triplet consisting of a scenario, its probability and its potential impact [1]. In the IT environment these scenarios a re typically called threats.

If a new threat surfaces, the IT risk management needs to asses its proba-bility and evaluate its potential impact. Today X  X  IT infrastructure has complex dependencies and a threat to a single component can threaten a whole network. Furthermore, single threats often have a very low probability but the combina-tion of many threats can be a major risk to an IT infrastructure. Therefore, it is not enough to look at infrastructure components individually to determine the possible impact of a threat. While each year a huge number of new threats surfaces, old threats do not vanish [2].

A fast response to a new threat is important to minimize the chance of ex-ploitation. However, a manual threat analysis takes time. The complexity of today X  X  IT infrastructure provides many indirect ways a single threat can affect different IT services and each must be analyzed. At the same time, the number of new threats is increa sing, which leaves even less ti me to evaluate each new threat [3]. A semi-automated approach allows an easier handling of this complexity, but to our knowledge there exists none that incorporates dependencies and combi-nations of multiple threats. Even the tools to monitor and report risk are still in a premature state and there is a demand for tool supported risk assessment [4]. While the measurement of IT infrastructure availability is already part of IT service management [5], it is only moderately used in IT risk management [4].
Our approach has two major features. First, it employs a reusable top-level model of the infrastructure dependencies. Second, the measured availabilities are added to each infrastructure component. The use of measured availabilities frees us from the need to model each measured threat manually. If a new threat surfaces, it can be added to the model and expected changes to the availabilities can be calculated. In this paper, we focus on impacts that make infrastructure components unavailable.

We start our approach by creating a dependency graph of the central com-ponents and services. To predict availabilities of IT components and services we need a way to represent (1) the logic of dependency of IT infrastructure, (2) probabilistic values for availabilities and (3) new threats. The dependencies in IT infrastructure can easily be modeled with first-order logic, but, first-order logic alone has no way to calculate how a threat influences the probability that an infrastructure component is available.

Markov logic networks (MLN)[6] offer a single representation of probabil-ity and first-order logic by adding weights to formulas. Together with a set of constants, the MLN specifies a probability distribution over possible worlds. Marginal inference computes the probability for specific values of variables in these possible worlds.

Thereby, we can create a reusable IT infrastructure model that includes in-frastructure dependencies and measured availability. The model can be used to calculate a prediction how new threats affect the availability of IT components in an IT infrastructure. This provides a fast and quantitative solution to determine if a new threat is acceptable or needs to be mitigated.

We demonstrate and evaluate our solution in a case study where we implement the MLN for a small part of an IT infrastructure. We show how the change of availabilities through a new threat can be predicted and how to analyze a risk mitigation approach for this threat. 2.1 Markov Logic Networks Markov logic networks generalize first-order logic and probabilistic graphical models by allowing soft and hard first-order formulas [6]. Hard formulas are regular first-order formulas, which have to be fulfilled in every possible world. Soft formulas have weights that support worlds in which they are satisfied, but they do not need to, or in case of negative weights even should not, be satisfied. The probability of a possible world, one that satisfies all hard formu-las, is proportional to the exponential sum of the weights of the soft formulas that are satisfied in that world. This corresponds to the common representation of Markov networks as log-linear model [6].

An MLN is a template for constructing a Markov network. Figure 1 illustrates the structure of a MLN. For each set of constants, there is a different Markov network, following the rules given in the MLN. Markov logic makes the assump-tion that different constants refer to different objects (unique name assumption) and the domain consists only of those constant and that no other objects (closed world assumption). An atom is a formula that consists of a single predicate and a grounding substitutes each occurrence of every variable in a formula with a constant. A set of grounded atoms is called a possible world.

An MLN L is a set of pairs F i ,w i ,where F i is a first-order logic formula and w i is a real numbered weight [6]. The MLN L , combined with a finite set of constants C = { c 1 ,c 2 , ...c | C | } , defines a ground Markov network M L,C as follows:
Generally, a feature can be any real-valued function of the variables of the network. In this paper we use binary features, essentially making the value of the function equal to the truth value of the grounded atom.

The description as a log-linear model leads to the following definition for the probability distribution over possible worlds x for the Markov network M L,C : where Z is a normalization constant and n i ( x ) is the number of true groundings of F i in x .
 When describing the MLN we use the format first order formula , weight . Hard formulas have infinite weights. If the weight is +  X  the formula must always be true, if the weight is  X  X  X  it must always be false. A soft formula with weight 0 has equal probabilities for being satisfied in a world or not.

There are two types of inference wit h Markov logic: maximum a posteriori (MAP) inference and marginal inference. MAP inference finds the most probable world given some evidence. Marginal infe rence computes the posteriori proba-bility distribution over the values of all variables given some evidence. We use marginal inference, which allows us to determine the probability distribution of the infrastructure variables for the offline predicate and thereby predict the future availability.

Most query engines require the input to be split into two parts: the formulas (also called program) and the known evidence data. 2.2 Availability Achieving high availability, defined as up to 5 minutes unavailability per year, is a longstanding goal in the IT industry [8]. Continuous monitoring of availability is part of IT service management best practices like the Information Technology Infrastructure Library (ITIL) [5]. We define availability as the probability that a system is working properly and reachable. The availability of a system can be determined as follows: Unavailability is the inverse of availability: We distinguish between measured availability and predicted availability. The measured availability of important infrastructure components and services is typ-ically measured over a one-year time-frame. The predicted availability is an esti-mation how the availability will be, under the assumption of specific changes in the threat-landscape or the infrastructure. We use marginal inference in Markov logic networks to calculate the predicted availabilities in our approach. For the threat analysis, we need a dependency model, data on availability and threats. We show how this information can be combined and transformed into evidence for our Markov logic network. Afterwards we discuss the networks func-tion. 3.1 Dependency Network for IT Infrastructures The basis of our threat analysis is a dependency network. The dependency net-work models how the availability of one infrastructure component depends on that of other components.

We use this network to calculate how a new threat endangering one com-ponent propagates through the networ k and reduces the availability of other components. The nodes of the network are the high-level infrastructure com-ponents and services, for which availability information exists. There are three types of edges: Specific and generic dependencies are modeled as directed edges; redundancies are modeled as undirected edges.

A specific dependency means that a component needs another specific compo-nent and cannot be available without it. For example, an email service depends on the router and is unavailable if the router is unavailable.

A generic dependency means that a component needs at least one of a group of redundant components. For example, given two redundant servers realizing an email service, the email service is available if at least one of the servers is running. We model this with an edge between the email service node and each server node.

A redundancy edge means that two components provide the same function-ality and one of them can, without manual reconfiguration, provide the work of both. It is possible to have more than two redundant components; in this case, they must be fully connected with redundancy edges. Furthermore, no compo-nent should have a redundancy edge to itself. We only consider fully redundant systems; redundancies that are more complex can be modeled with typed re-dundancies. An example for a dependency network can be seen in Figure 2 in Section 4.
 The dependency network can be transla ted easily into evidence for the MLN. Each edge type translates into a predicate and each node translates into a con-stant. The symmetry of redundancy and the transitive behavior of the depen-dencies are modeled as formulas in the MLN program. 3.2 Markov Logic Network for IT Risk Management Our Markov logic networks has three types of variables and six predicates. The different types of variables are infra 1 as the type of all infrastructure com-ponents and services, threat as the type of all threats and float is a nu-meric value. The predicate specificDependency(infra, infra) models that the first infrastructure component depends on the second infrastructure compo-nent. genericDependency(infra, infra) means that the first infrastructure component depends on the second infrastructure component or a redundant alternative. redundancy(infra,infra) models redundant components. endan-gered(threat, infra, float) expresses that a threat endangers an infras-tructure component with a weight of float . measuredUnavailability(infra, float) encodes the measured unavailability as weight float ,and offline (infra) states that a component is not available.

The only hidden predicate, a predicate without full evidence, is offline ( infra) . It is therefore the only predicate we query and whose variable dis-tribution we determine through sampling. The variable distribution is used to determine the offline probability of an infrastructure component, i.e. the pre-dicted unavailability.

All other predicates are observed, that means all grounded atoms that are not listed in the evidence are false. Each infrastructure component has an availability. If the availability is not specified explicitly the MLN sampling uses a weight of zero, roughly corresponding to an a priori availability of 0.5.

In its basic form, our MLN program comprises five formulas: Formula 4a is a hard formula that invalidates every world where infrastructure component i2 is offline and infrastructure component i1 is online, if there is a specific dependency between them.

Formula 4b does the same as Formula 4a for generic dependencies. Provided i1 is generically dependent on i2 and i3 , which are redundant, it invalidates every world in which i1 is online while i2 and i3 are offline.

Formula 4b supports only two redundant infrastructure components, but for-mulas for more than two redundant compon ents can be constru cted analogously. These analogous formulas need their own generic dependency predicate (e.g. genericDependencyTwo , genericDependencyThree , ...). This prevents that, for example, the formula for a two-component dependency influences the formula for three-component dependency. Though it is possible to create a first-order logic formula that works with any number of redundant components, not all MLN solvers support the full expressiveness of first-order logic. Hence, we chose this workaround for better solver support.

The hard Formula 4c models the symmetry of redundancy: if i1 is redundant to i2 then i2 is also redundant to i1 .

Formulas 4d and 4e allow giving each evidence a separate weight. An evidence with measuredUnavailability("Server 1", -3) translates into offline (" Server 1"), -3 . Formula 4d is used to assign an individual measured un-availability to each infrastructure component.

Formula 4e works analogously. The additional parameter threat t allows specifying more than one threat per infrastructure component. The last two formulas can be combined into one formula, but we think modeling is easier when not mixing single threats with estimated probabilities and quantitatively determined availabilities. The source-code for our MLN program is given in Appendix A.

The weights for the measured availabilities can be found manually by iter-atively calculating the probabilities and correcting the weights. In some cases, finding the correct weights is not trivial [9], but there are efficient learning algo-rithms for MLNs [6].

The weights for new threats need to be estimated. We propose involving a domain expert in the estimation of how much the availability of the directly affected infrastructure component sho uld be reduced. This allows us to learn a weight for the new threat and to determine how the new threat indirectly affects the availability of other components. 3.3 Summary of the Approach We start by creating a dependency network of all major infrastructure com-ponents and services. We transform this network into evidence for our MLN program. We collect unavailability information for each node and use a learning algorithm to add the corresponding weights to the evidence. By adding threats, the resulting evidence can be used to determine the effect of a local threat to the whole network. A small case study demonstrates the usability of our solution. There exist several open-source inference engines for Ma rkov logic networks, e.g. Alchemy 2 ,Tuffy 3 , and RockIt 4 . We use RockIt for the calculations in our study.
The base configuration of the dependency network (see Figure 2) has seven nodes: An Email Service is realized by two redundant servers Server 1 and Server 2 . Each of the servers depends on its own router ( Router 1 and Router 2 , respectively). One of the two routers is used by a WiFi Access Point (AP) , which offers a WiFi Service . The corresponding evidence is listed in Table 1, the MLN program can be found in the Appendix A. The infrastructure components and services have the measured unavailabilities given in column Scenario 1 in Table 2 and the corresponding, learned weights are shown in Table 3.
Wecannowaddanewthreat: Router 1 threatens to overheat because con-struction work cut off the normal airflow to the room. The predicate expressing this is endangered("Overheating", "Router 1", 3) . By using marginal infer-ence, we get the offline probabilities, which give us the predicted unavailabilities shownincolumnScenario2inTable2.

The threat increased the unavailability of Router 1 by 0.0095. This has the effect that the unavailability of WiFi AP 1 , Server 1 and WiFi Service also increases by 0.0095. On the other hand, the unavailability of Email Service remains unaffected, because it can use Server 2 , which depends on Router 2 . The changes can be seen in Figure 3.

The cooling problem can only be solved through expensive additional construc-tion work; therefore, other risk mitigation approaches should be investigated. A cheap risk mitigation approach is to provide a second, redundant WiFi AP 2 , which uses Router 2 . We update the infrastructure model (Table 4) and set the unavailability for the new WiFi AP 2 equal to that of WiFi AP 1 (see Scenario 3 in Table 2). Again we use the MLN program from Appendix A and learn the corresponding weights (Table 3).

Now we can add again the threat endangered("Overheating", "Router 1", 3) and calculate the unavailabilities (see Scenario 4 in Table 2) with the help of marginal inference. The unavailability of Router 1 increases by 0.0094. The unavailability of Server 1 and WiFi AP 1 also increases again but this time the unavailability of the WiFi Service remains unaffected. The changes are also shown in Figure 3.

We can see that a second WiFi Access Point would successfully mitigate the risk for the WiFi Service.

The slightly different increase of the unavailability in the two scenarios has two reasons. First, the learning algorithm provides only an approximation of the correct weights for the unavailabilities. Second, the number of evidence (and thereby the number of possible worlds) changed between the two scenarios, but the weight of the threat remained the s ame. As can be seen in Figure 3, these effects are small enough to not influence the overall result.

The case study also demonstrates that the results of MLN marginal inference are not exactly the results one would expect from regular probability calculation. However, as we demonstrate, the MLN calculation is well suited for the calcula-tion of threat propagation. There exist alternative approaches that combine logic and probability (see [10] for an overview). Here we limit the discussion of related work to Bayesian logic programs (BLP) [11]. Because of the usage of Bayesian networks in combination with risk analysis [12], BLPs seem to be the most prevalent alternative to MLNs.
Bayesian logic programs aim at resolving some limitations of Bayesian net-works, among others the essentially propositional nature of their representations. Therefore, Bayesian logic programs unify Bayesian networks with logic program-ming. Each Bayesian logic program represents a Bayesian network by mapping the atoms in the least Herbrand model, which constitutes the semantics of the logic program, to nodes of the Bayesian network.

A BLP computes the probability for one query from the known probabilities in the resolution to the query statement. In contrast, MLNs infer all probabilities from a given complete set of weights.

Furthermore, there exist efficient solvers for MLNs and they have been applied to a wide range of problems, for instance in requirements-driven root cause analysis [13] and data integration [14].

Another advantages of MLNs over other probabilistic logic approaches is that the Markov networks, constructed through the MLN, are undirected graphs. This has the effect that changing the weights at one node will influence the whole graph and thereby the results. Hence, it is more likely to find new relationships between elements that where not explicitly modeled. On the other side, this has the disadvantage that it is harder to isolate a single variable. Unlike BLPs [11], MLNs have very simple semantics wh ile theoretically keeping the expressive power of first-order logic [6].

There are other approaches that use dependency networks to determine the global impact of a threat. The approach of Zambon et al. [15] focuses on down-time and temporal aspects but unlike our approach it is qualitative and considers only one threat at a time. The approach of Breu et al. [16] uses the number of attacks as the key quantitative concept and models each threat separately but does not take redundant components into account. To our knowledge this paper presents the first application of Markov logic net-works to risk management. We have shown that MLNs generally allow an auto-matic calculation of risks, exemplified by the probability of availability, in an IT infrastructure.

As described in the case study, our solution allows us to efficiently calculate how a threat affects an infrastructure network. We have demonstrated how the analysis can be used to compare changes in the infrastructure and thereby sup-port the risk mitigation. Our approach has two major features. First, it employs a top-level model for the dependency network, which can be easily maintained and reused. Second, it uses the measured availabilities of the infrastructure compo-nents and thereby creates a quantitative i nfrastructure model without modeling every threat separately. This also has the advantage that the manual work for risk analysis is greatly reduced.
 In most cases, risk assessments are performed regularly, e.g. every six month. At the same time, the link between availability and risk management is seldom used and technological support for IT risk management was identified as one area where improvement is needed [4].

Our approach enhances risk assessment by providing an automation and al-lowing reuse of earlier work. By using the availability measurements of the IT service management as quantitative input and provide results in the same way, we allow an easy communication of IT risk.
 However, there are some limitations, caveats and lessons learned from using Markov logic networks, and in particular marginal inference in MLNs.
It is not possible to simply add or remove infrastructure components or ser-vices to or from an existing model. This is so because the weight of the new com-ponent or service influences the total weight of the model, which in turn affects the probabilities of all statements. In the current state of our solution, adding or removing a new infrastructure component requires relearning all weights.
Even though MLNs use a quite simple representation, modeling with them is not as straightforward as it may seem [7]. Each variable, every literal that involves a hidden predicate, in the MLN must have a weight. For instance in our case study this means that each node in the dependency network needs a measuredUnavailability(infra, float) . This requires an accurate specifica-tion of the MLN evidence. However, since the measurement of the availability is a best practice [5], the necessa ry data should be available.

Without an understanding of the normalization of weights and the log-linear model, the relationship between the weights and the resulting probabilities of the marginal inference can b e counterintuitive. Changing the weight of a single formula shifts the relative weights of the possible worlds according to where the formula is true. This results in sometimes unexpected changes in probabilities of statements. Therefore, we usually learn the weights for the measured unavail-abilities. While modeling with MLNs it is also important to have in mind that the weight of a soft formula does not di rectly correspond to a specific universal probability for this formula. The probability depends on the whole MLN and the modeled domain, including the number of individuals in this domain.
A limitation of existing implementations for marginal inference is their use of sampling algorithms to calculate the probabilities. To determine the effect of threats with very low probabilities, which are quite common in risk management, sampling requires a high number of iterations. Threats with very small proba-bilities can provide the problem that their frequency is so low that they do not influence the availability measurement of a component. These threats can still be added manually through the predicate endangered(threat,infra, float) . To our knowledge, there is no alternative to sampling as the exact computation is too complex to be done for larger networks. However, it has the advantage that it allows us to choose how much time to invest into the accuracy of the probabilities. We reduce the problem of sampling with low probability by using the measured unavailability, as combination of many small threats and thereby are able to aggregate them to larger numbers.

While there are different MLN solvers, to our knowledge none of them sup-ports full first-order logic. Because of the undecidability of first-order logic, this will most likely not change. We have demonstrated how Markov logic networks (MLN) can be used to cal-culate the expected availabilities of infrastructure components and services. Our solution uses a combination of a dependency network, measured availabilities and a new threat information as basis for this calculation. We obtain the evidence for the MLN by constructing a dependency network and learning the weights for the measured availabilities. By adding a new threat and using marginal inference, we can predict availabilities of IT components under different threat conditions. This allows a faster and more quantitative risk analysis, which is essential for today X  X  threat landscape, than a manual analysis. We have focused our work on how threats indirectly affect the whole network. Future work is needed in differ-entiating the impact. Not all services are equally important for the organization and there are other kinds of impact than taking an IT component offline, for instance compromising it or reducing its efficiency. We plan to further improve the solution by integrating existing data sources to automatically generate the dependency network.
 Acknowledgement. This work has been partially supported by the German Federal Ministry of Economics and Technology (BMWI) in the framework of the Central Innovation Program SME (Zentrales Innovationsprogramm Mittelstand -ZIM) within the project  X  X isk management tool for complex IT infrastruc-tures X .
 We are thankful to Christian Meilicke for helpful feedback and support. For our MLN, we use the syntax of RockIt [17]. RockIt expects first order formu-las in conjunctive normal form (CNF). An online version of RockIt is available here: http://executor.informatik.uni-mannheim.de/systems/rockit/
