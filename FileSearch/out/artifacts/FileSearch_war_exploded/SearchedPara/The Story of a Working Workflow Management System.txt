 This work presents experiences with the adopting of a work-flow management system in a large financial institution. We describe the gradual evolution of a traditional work pro-cess, from manual to computational regulation of coordina-tion. The study shows that computational workflows may increase labor productivity re markably and in general have significant economic benefits, but also that to make current workflow technologies yield such results requires unorthodox twists and tweaks in the workflow design to allow for worker control and process overview. The paper argues that work-flow technology is now at a stage where the contribution of CSCW is obviously needed.
 D.3.2 [ Programming languages ]: Language Classifica-tions X  Very high-level languages ; H.4.1 [ Information Sys-tems Application ]: Office Automation X  Workflow mana-gement ; H.5.3 [ Information Interfaces and Presenta-tion ]: Group and Organization Interfaces X  Computer-sup-ported cooperative work, Organizational design ; K.4.3 [ Com-puters and Society ]: Organizational Impacts X  Computer-supported cooperative work, Reengineering, Automation Design; Human Factors Service Oriented Architecture (SOA), Business Process Ma-nagement (BPM), Workflow Management (WFM), BPEL, case study
The issue of what role, if any, computational systems might play in the regulation of the flow of tasks and doc-uments among cooperating actors and organizational units has been a constant theme in CSCW from the very start.
In fact, CSCW can arguably be seen as emerging, at least in part, in reaction to the disillusionment that arose within the Office Automation community in the mid-1980s. Un-til then, hopes had been high, encouraged by the bright prospects offered by the new techniques for constructing computational models of highly distributed systems that had been developed since the early 1960s, especially on the ba-sis of the graphical modeling notation developed by Petri. With the emergence of networked computers with graphical user interfaces, it seemed obvious to explore whether and to which extent such representations might be exploited as a means of modeling and regulating  X  X ffice procedures X  and other kinds of workflows [18, 6, 7]. The high hopes were quickly frustrated. Workflows were not as easily captured and modeled as had been anticipated.  X  X xceptions X  turned out to be an everyday occurrence in  X  X ffice work X , and as soon  X  X xception handling X  mechanisms had been devised, analysts had to realize that there are also exceptions to ex-ceptions. In short, the status of  X  X ffice procedures X  turned out to be problematic [14].

This realization motivated multiple lines of CSCW re-search. For some, this experience meant that the very idea of computational regulation of workflows was impossible (or unacceptable), which in turn motivated the development of alternative forms of computational support of interaction (e.g., [10, 11]). The research on  X  X edia spaces X ,  X  X ollabora-tive virtual environments X ,  X  X hared work spaces X , etc. can be seen as extensions of this line of research. Other researchers instead explored ways of making workflows adaptable (e.g. [8]), e.g., by providing ordinary workers with environments for building and modifying computational workflow models for their own use [13, 4]. Parallel to this, of course, a line of research has focused on investigating the ways in which workflows are actually devised, constructed, adapted, mod-ified etc., in cooperative settings (e.g. [3]). All this is now part, albeit a small part, of CSCW history.

However, while all this has been going on as a sub-theme in CSCW, workflow system technology has been a topic of intense interest outside of CSCW.

Since the 1990s, Workflow Management (WFM) 1 has re-ceived considerable attention from industry as well as from a research community interested in the technical aspects of workflow management [15, 17]. In the late 1990s, several commercial WFM systems became available but were not widely adopted [12]. This can be explained, to some extent, by lack of infrastructure technology to integrate legacy sys-
The term Business Process Management (BPM) is now of-ten used instead of Workflow Management [16] tems and new applications effectively. Recently, a new en-terprise architecture, named Service Oriented Architecture (SOA), has emerged as a promising foundation for WFM systems and is now becoming widely accepted by the indus-try. In fact, most of the contemporary WFM systems build on a Service Oriented Architecture. SOA is an enterprise ar-chitecture that advocates loosely coupled and reusable sys-tems and has evolved from component-based development and distributed Internet architectures as a new abstraction layer that allows internal and external systems to interact using common standards and protocols. With SOA, systems developed on different platforms and technologies, such as, e.g. legacy systems, Java, and .Net applications, are able to communicate directly using standardized interfaces and protocols. In short, SOA makes it possible for an enterprise to open up its legacy systems to other systems and services.
A WFM system  X  sometimes also called a  X  X orkflow en-gine X   X  supports the definition and execution of  X  X usiness processes X  or  X  X orkflows X  in a common workflow language such as the Business Process Execution Language (BPEL)[1] that was defined in a joint effort involving large companies such as IBM, Microsoft, and Oracle. BPEL is a high-level language that is used to construct computational or exe-cutable workflow models and is based on  X  X rchestration X  of  X  X ervices X , i.e., (remote) computer systems that can be invoked to perform some task, into complex applications. Hence, BPEL and related languages are often mentioned as  X  X ervice orchestration X  or  X  X ervice composition X  languages. (In the remainder of the paper the term  X  X orkflow X  is used for a computational workflow model implemented by means of a WFM system).
 Several of the current WFM systems that are based on BPEL extend BPEL to allow for the definition of workflows that combine execution of automatic services and manual tasks handled by humans. Such extension involves two parts of the WFM system. First, the language is extended with a new task type, e.g. a HumanActivity, or a Staff type, which allows the modeling of workflows containing tasks to be handled by humans. Second, the WFM system must contain some kind of task portal, where process participants can  X  X laim X  and  X  X xecute X  tasks assigned to them.
A new outline standard BPEL4People has been suggested to address this issue [9] but still has a long way to travel. BPEL is currently the most widely accepted industrial stan-dard and is a hybrid between IBM X  X  graph-based WSFL and Microsoft X  X  block based XLANG which have their origin in Petri nets and phi calculus respectively.

In short, WFM systems constitute an architectural layer on top of SOA that affords the composition of services and people into complex workflows with automated coordination of tasks. These workflows are able to  X  X xecute X  and coordi-nate business processes. This is illustrated in Figure 1.
What may be of particular interest to the CSCW commu-nity is that WFM systems and workflow technologies such as BPEL have now evolved to a stage where they are been deployed and used in large-scale work settings. That is, in-stead of discussing computer-support for the regulation of interdependent activities as a interesting but hypothetical proposition, we can now begin to investigate how they are developed, deployed, appropriated, amended, used, redevel-oped, etc.,  X  X n the wild X .

In this paper we will tell the story of the stepwise devel-opment of a business process using a WFM system that is Figure 1: Business processes as a composition of services and human tasks. not only actually working but also has turned out to be sur-prisingly successful. We will sketch the development process and will try to bring out some of the sources of the successful implementation. In doing so, we will focus on the technical issues workers have experienced in the course of the devel-opment of the system and especially on the issue, raised by workers, of control over the execution of workflows.
Our story is the story of two s eparate and large projects both concerned with implementing cross departmental pro-cesses in a large Danish financial group, Danske Bank, which we have investigated.
 Founded in Copenh agen in 1871 as  X  X he Danish Farmers X  Bank X , the group has grown to become the largest financial group in Denmark and one of the largest in northern Eu-rope. It now provides a variety of financial services such as banking, mortgage credit, insurance, pension, capital mana-gement, leasing, and real estate agency.

Danske Bank has implemented a WFM system based on a commercial product from IBM, which has been extended in areas where the Bank X  X  business requirements were not met. The bank has for instance created its own task portal to achieve higher flexibility in allowing allocation of tasks to different process participants and to achieve better overview of running workflows. Business processes are implemented as workflows using BPEL. The Bank X  X  WFM system de-pends on SOA, which it adopted back in 2001. All new application development is targeted to SOA and legacy sys-tems are  X  X ervice enabled X . This allows all applications to be executed from within workflows. In other words, appli-cations and services developed for one part of the group can be located and used by other parts of the group through a central service library and repository. Currently, the group has several thousand different service operations.
In the last four years the first author has been a mem-ber of the team responsible for implementing Danske Bank X  X  WFM system and has had daily contact with the developers responsible for the primary pr oject described in this paper ( X  X ustomer Package X ). Eventually, a systematic investiga-tion of the project was conducted over a period of about five months.

The systematic investigation involved interviews with a project manager, with developers of the workflow system, and with solution architects and a back-office worker. We also held a half-day workshop with the WFM department and the developers involved in developing the workflow sys-tems, at which we discussed different issues related to the WFM system. All interviews and the workshop conversa-tions were recorded, transcribed, and analyzed.

In addition, the documentation of business process models and the workflow implementation code were investigated.
During the five months of systematic investigation, we had  X  X offee X /corridor discussions on a weekly basis with people engaged in the examined projects.
Our story begins in 2003. But the prehistory needs to be told first. Until 2003, when a customer entered a branch of Danske Bank to open a new account or purchase an addi-tional  X  X roduct X  or service, such as a credit card or Internet access, the customer had to sign a number of documents. For each product the customer requested, one document had to printed, read, checked, and signed. As customers on aver-age would request seven products, a large number of pages had to be printed and signed. In fact, a customer could leave the branch with up to 100 pages! This process was obviously not satisfactory to the customer, since he or she would have to spend quite some time in the branch, often more than an hour. The large pile of paper was of course also confusing. To the bank clerk, the  X  X ustomer advisor X , it was not satisfactory either. Printing the many pages was time consuming, and after the customer had left the branch, all  X  X roducts X , i.e., contract specifications, had to be created manually by means of different programs (figure 2). All in all, creating products for an average customer could take up to several hours.
 Figure 2: Customer advisors create all products manually.
At some point in 2003 the Credit Card Department wan-ted to increase the sales of American Express credit cards. However, the then existing procedures, according to which several documents, such as agreement about the card and ex-change of information, would have to be printed and signed, were seen as an impediment to this plan. But one day some-body at the Business and IT Development Department pro-posed to devise a generic contract where different products were bundled in  X  X ackages X . Different packages were defined to target different customer segments and each contained default and optional products. The concept of  X  X ustomer Package X  was born (or rather reborn, since the notion of packages had been used earlier in one of the branches with success). When a customer now visited a branch, he or she would purchase a  X  X ustomer package X  containing, say, an ac-count, a credit card, and Internet access, and in doing so, only one document covering the whole package would be printed, filled in, and signed. The new sales concept was introduced in June 2003.

Having analyzed the sales and product creation process in the branches, the Business and IT Development Department initially decided on a solution without any IT support. The reason was to be able to introduce Customer Packages to customers as quickly as possible, instead of having to post-pone market introduction until IT support had been devel-oped and made ready for use. Instead, the solution that was adopted consisted in a standardized Microsoft Word docu-ment, a template, which could be customized by the individ-ual branches for greater flexibility. Using the template, the adviser could specify all products for a particular customer in just one document. Compared to previous practices, the customer had only one document to sign. Furthermore, the time spent on the sales process was reduced. Although ex-tremely simple, the template was a success in that the num-ber of credit cards as well as other products that were now sold increased significantly. And it was easier to introduce different products.

The successful adoption of the Customer Package tem-plate then triggered a series of organizational transforma-tions that fit beautifully with Babbage X  classical schema: from traditional craft work, to systematic division of labor, to stepwise automation of individual processes, to more or less automatic control of the overall process as a whole. While customer experience improved markedly with the Customer Package template, the customer advisors still had to use a large part of their time on creating products after the customers had left the branch. Because of the time-consuming task of creating the products, it was difficult to find time to meet with customers. Someone then asked,  X  X hy can X  X  we use our time on advising customers and sell-ing products. Someone else can create the products X . The Business and IT Development Department agreed, and in August 2003 a new back office department named  X  X us-tomer Agreements X  was established to handle the creation of products that were ordered by means of customer packages. Under the new arrangement the customer advisor, after hav-ing obtained a signature to the customer package document, would send the document as an email attachment to the Cus-tomer Agreement Department. Here, a staff of about thirty people worked on these documents: when they had received them, they would read them carefully and then manually create the products by using different systems (figure 3).
For the customer advisors the new back office function was a satisfactory arrangement, as they could now use their time more effectively on advising customers and selling products. However, in some ways the problems recurred in another shape and at another place. To the back office workers the documents they received from the customer advisors posed multiple challenges; the data were often misspelled or con-tradictory or the advisors had forgotten to provide required information. The back office workers thus had to carefully read through the entire customer package document in order Figure 3: Backoffice workers create all products manually after receiving word document from customer advisors. to check and validate it, and they often had to phone the customer advisor who had created the document to get the correct information so as to be able to create the products. Furthermore, in addition to being time consuming and te-dious work, the procedure of validating documents and com-municating with the advisors had not been reconsidered and reconceived.

Unsurprisingly, a strong need was felt for improving the process of handing over customer packages from customer advisors to the Customer Agreements back office. There-fore a new system, called CTS (Case Transfer System) was created in Lotus Notes. This system allowed the customer advisor to choose customer type and thereby obtain a new document for this specific customer type, and to then send it to the Customer Agreements Department immediately after entering data about the customer and the ordered products. The system would extract the data from the Word docu-ment and make an automatic validation check on the en-tered data such as presence of required information, marked checkboxes, etc. In case of data conflicts, the CTS system would return the document to the customer advisor without involving the Customer Agreem ent Department (Figure 4). This was a clear improvement over previous practice. For Figure 4: Backoffice workers create all products manually af-ter getting validated word document from the Case Transfer System. the advisors, it was an improvement in as much as they were notified directly about errors in the document and they were able to correct the errors at on ce, and it was an improvement forbackofficeinasmuchastheyreceiveddocumentswith fewer errors. Furthermore, t he document was now trimmed of unnecessary data, so that it was easier to find the relevant data. With the new solution, it was no longer necessary to read the entire document in order to ensure validity.
The process was now  X  X treamlined X  not only for customers and customer advisors, but also to some extent for the back Figure 5: Workflow enabled backoffice process with backof-fice workers creating seperate products. office staff. However, the product creation procedure had not been adapted, merely transferred. The back office ba-sically handled the product creations in the same way as the customer advisors had done previously. The different products of a package were created in a different sequence from package to package, although there might have been a more rational sequence in which to create the products. Furthermore, the same data about the customer, accounts, etc. had to be entered manually in the different systems that had to be used in order to create products. This often resulted in misspelled data and was in any event still quite tedious work, since the same data had to be entered again and again.

As mentioned earlier, at the end of 2001, the Bank had decided on and implemented a Service Oriented Architecture to which all new IT development would be oriented. In addition, by the end of 2003, the company was ready to implement business processes as workflows based on  X  X ervice orchestration X  and BPEL.
 At that time, it so happened that the people from the Workflow Department who would be in charge of building computational workflow models, or workflows, by means of the WFM system were placed physically next to the peo-ple that developed the CTS system. In discussions between these two groups of people it was soon realized that the pro-cess of creating products for customer packages was ideally suited for exploring and demonstrating workflow technology. It was a highly predictable and production-like process, and it involved systems from several departments throughout the group. A workflow for this cross-departmental process would be able to link all the different systems together and elimi-nate the need for entering the same data repeatedly.
It was therefore decided to use the manual customer pack-ages creation process as a pilot study for the new WFM system.

As the first step, the CTS system was extended so that it could extract data in XML format from submitted Word documents and to initiate instances of the workflow using the extracted data. Figure 5 illustrates the updated scenario. An extended validation function was also implemented in the CTS system. After having made the XML extract, the validation function would determine if the package was of a character that was unsuited for handling by the workflow. In such extraordinary cases, instead of using the workflow, the particular package would be assigned for manual treatment. The workflow was put into production in December 2003. The first version of the workflow was implemented precisely in the way the back office workers used to create products. All products (except one) were still created manually by means of the same systems as before. But now, in Decem-ber 2003, the workflow automated the allocation of the dif-ferent tasks and the determination of the sequence in which they should be carried out. Based on the document filled-in by the customer adviser, the workflow would create a list of tasks  X  or products to be created  X  for the back office workers and display this in the WFM systems task portal. A back office worker logging onto the task portal would now simply see a list of pending tasks. These tasks would be or-ganized according to priority and relevance for the worker. The sequence in which the tasks should be executed would not be prescribed and in addition, the tasks would be from many different customer packages. Only few tasks for a spe-cific customer package would be delivered immediately to the task portal. The remaining tasks would appear after execution of the first tasks. For instance, a task for ordering a credit card pin kode would first appear in the task portal after the credit card had been created. When accepting a task, the worker was automatically transferred to the appli-cation program relevant for creating the given product, and available data were made available, delivered by the work-flow. The workflow thereby became the glue that bound the different systems together.

The WFM system constituted another improvement of the product creation process, because the system made the relevant data available to the back office workers and guided them directly to the relevant systems from the task list.
Now, having implemented the business process as a com-putational workflow, the Business and IT Development De-partment began to look for  X  X ptimization X  possibilities. The obvious optimization of a workflow of this kind, largely a  X  X omposition X  of existing computer programs, is to auto-mate the manual tasks of launching and transferring data between the different programs. The Business and IT De-velopment Department started to contact the departments responsible for the product systems and requested automatic product creation services. Unfortunately, most of the de-partments did not have the resources required for developing the services in question. However, the Accounts Department agreed to develop an automatic account service to handle an important product that always had to be created for a cus-tomer package, namely, an account. The automatic service was incorporated into a new version of the customer pack-age workflow. The back office workers now did not have to create accounts; this was handled automatically by the workflow and the new automatic account service. This was an eye opener for the Business and IT Development Depart-ment;  X  X f we are able to automate the creation of accounts, then we will also, through systematic work, be able to auto-mate much more of the product creations X .

Another obvious optimization of the workflow is to imple-ment what are called  X  X xception cases X , that is, cases that are not exactly  X  X xceptions X  but rather extraordinary cases. In the course of the ongoing  X  X usiness process optimization X , previously manual activities have been optimized so that they can be performed by automatic services. However, in the first version of such an automatic service, for instance the  X  X reation of cards X , i.e. the issuing of credit cards, it has been the experience that it sometimes fails and has to be taken care of manually. As for the credit card process, this has turned out to be the case in 4% of the instances. Instead of a process that is interrupted on a regular basis due to such annoying failures, such instances are now weeded out auto-matically, by the workflow, based on an analysis of the data. Thus, according to the data in the given instance, the work-flow assigns the task either to the automatic card creation service or to the back office workers. This approach has also been adopted by the customer package workflow. One of the first tasks in the workflow is a data evaluation task. Here, the data from the customer is evaluated, and in complex cases which have not been implemented in the workflow, the process is sent to manual execution without workflow control. The partial implementation approach, where 80-98% of all case are handled, has been a successful strategy. It is cheaper and faster to implement a system that only takes care of the majority of the cases and leaves  X  X xception cases X  to manual handling. However, over time one  X  X xcep-tion case X  after the other have been  X  X ptimized. Thus, while many exception cases initially were caught and assigned to manual execution, over the years, more and more  X  X xception cases X  have been implemented and can now be handled by the workflow.
In the autumn of 2006, the concept of Customer Pack-age and the concomitant business process and workflow was extended to include the creation of  X  X ingle products X , that is, supplementary products. When a customer advisor or-ders an additional product for a customer, for instance an additional credit card to supplement his or her package of products, the customer advisor previously had to create the card manually, but the order can now be submitted through the CTS systems. The CTS system instantiates a customer package workflow which either creates the ordered product automatically or assigns the order to a back office worker.
Although it should be possible to automate more than 80%, complete automation of the process is unlikely. Fur-ther steps will require system owners to develop automatic services, and this has been a bottleneck due to lack of re-sources. It is difficult and time-consuming work to prescribe and implement all exception cases in a workflow, and the departments have other things to do that have higher pri-orities. At the end of the day, it is a question of balancing costs and benefits and of what economists call  X  X iminishing returns X . Although further optimization will include imple-mentation of additional exception handling features, so that fewer packages have to be assigned for manual execution, it may simply not be economically sound to try to automate the more exotic  X  X xceptions X . The challenge of handling the challenge posed by such recalcitrant exotic exceptions has been addressed by letting the CTS system analyze the XML data extract from the Word document. If the particular package is evaluated as not suitable for the workflow, the Word document is assigned to the back office for manual execution.

Figure 6 illustrates the percentage of all daily received cus-tomer packages that are handled by workflow. In the first versions of the workflow in early 2004, the majority of pack-ages were assigned to manual execution, as only very few exception cases had been implemented. The workflow was then optimized, and an increasing part of the total num-ber of packages was handled by the workflow. However, in 2005 and 2006 the customer package concept was intro-duced in Sweden and Ireland where the workflow was not implemented, and as a result the rate of handled processes Figure 6: Percent of all customer packages handled by work-flow. handled by the workflow decreased. But in late 2006, three initiatives increased the percentage: several exception cases were implemented in the workflow, initiatives were taken to force branches to use the CTS system, and the workflow was extended to be able to create single products without any customer package. The latest version of the workflow is able to handle most exception cases, and today only a small part is assigned to manual execution.

The percentage of packages handled by workflow, as illus-trated in Figure 6, is calculated relative to the total number of packages, including other brands and languages which as yet cannot use the workflow technology. Had the number of packages handled by workflow been calculated relative to the number of packages for which the workflow has been de-signed, but which were nonetheless sent to manual execution by the CTS system, the percentage would have been higher.
For about two years, the Customer Package workflow has systematically been improved and optimized by addressing the most expensive and time consuming tasks. In the first version of the workflow, all tasks were handled manually. Today, the workflow is running in version 6, and about 80% of all the products are created automatically (Figure 7). The back office workers have saved a significant amount of time which they now use for processing more packages as well as for other activities.
 Figure 7: Workflow enabled and optimized backoffice pro-cess with 80% automated product creation.

From the time of introducing the workflow in December 2003 up till May 2006, the number of customer packages amounted to about 300 per day. Between May 2006 and May 2007, this number has grown by a factor 6 to about 1800 a day. The explosive growth has two reasons. First, until the summer of 2006, several branches did not yet use the CTS system to submit customer packages. That is, they created products locally as before, without using the back office. During the summer of 2006, initiatives were taken to simply force branches to submit customer packages through the CTS system. Second, the customer package workflow was extended to allow creation of  X  X ingle X  or supplementary products.

Figure 8 illustrates the total number of customer packages per day; it includes packages handled manually for all langu-ages and brands and packages handled by the WFM system. The fluctuations in the diagram have different causes, such as, say, summer holidays, introduction of customer packages in other brands, and marketing and new product offers for the customers.

The diagram indicates that the effect of forcing branches to use the CTS system and using the customer package work-flow to create single products has been substantial. However, the diagram should be read with reservation. First, over the last four years the number of back office workers as well as their responsibilities have varied, which makes comparison over time somewhat problematic. Second, it goes without saying that the creation of single products requires much less work from back office compared to a  X  X eal X  customer pack-age, as only one product has to be created for each  X  X ase X . Therefore, the growth in number of customer packages by a factor 6 has not caused a similar growth in back office workload. In sum, Figure 8 only indicates a large growth in number of packages but nothing about labor productivity.
However, during the first period of working with the WFM system, some performance measurements of the back office workers were made. Measuring the amount of time used on creating a single product when working with a Word document or with the WFM system, it was found that the workers were about 19% faster when creating products de-livered through the WFM system. This effect can primarily be attributed to the fact that a manual task delivered by the workflow contains a direct link to the system in which the particular product is to be created, and that available data is provided directly to the system.

In sum, the automated coordination of tasks and the con-tinuous optimization and automation of product creation means that back office workers today are able to handle be-tween two and three times as many customer packages as when working with Word documents. In 2003, the perfor-pages to allow a better overview.
 mance requirement for a back office worker was about 20 packages a day. In 2007, the requirement is 50 packages a day.
Participants involved in defining, implementing, and ex-ecuting the customer package workflow have all had issues with the concepts and technologies of a WFM system. We will here highlight some lessons learned related to the back office workers.

To back office workers the workflow has had obvious ad-vantages, not least due to the fact that they, when accepting a task in the task portal, were directly linked to the respon-sible application program, by means of which they were able to handle and execute the task, and that the available data were transferred. This was considered an advantage, as they did not have to access the application program and enter data manually.

However, being the human component of the automated customer packages process was a new way of working. From being in control of the complete business process of creating all products for a customer, they now were allocated frag-mented tasks to be executed from the WFM system X  X  task portal, without any knowledge of the context in which the tasks originated.

The WFM community typically presumes a  X  X ask-centric business process X  model in which workers do not know and do not need to know the business process and should only be concerned with handling discrete tasks. It is supposed to offer the advantage that individual tasks can be distributed to different people and departments and that management thus is able to control the allocation of resources. However, the task-centric way of working was not accepted by the back office workers;  X  X e do not want to be a factory. You get better caseworkers when they follow complete cases and not separated activities X . Their reason for not accepting to be assigned discrete tasks is that they would loose the overview of the case if they worked task-based. This is considered especially problematic in the handling of  X  X xception cases X  where overview is a necessary precondition for figuring out what caused the exception and how the case can be dealt with.

Consequently, the back office requested a change to the de-sign of the workflow so as to be able to work in a case-centric matter. To meet their demand, some interesting twists and tweaks were added to the design of the workflow. An addi-tional manual task  X  a dummy task, really  X  was appended to the workflow as the first one to be executed in each in-stance. When a worker would claim and execute this task, all remaining manual tasks pertaining to the same package would be allocated to the same worker. In short, the back office worker reclaimed responsibility for executing all tasks related to a particular customer package.

In addition, the workers are able to monitor, via the task portal, manual activities that have already been executed. They have also expressed a wish to be able also to monitor automatically executed activities, since this would facilitate better understanding of what has already been created in the given process instance.

This was not the only situation where the issue of con-trol of the workflow emerged. As noted in passing above, we have also investigated another project, the Account Set-tlement project, which implemented a similar business pro-cess as a workflow. This workflow, which terminates a cus-tomer X  X  engagement with the group, has interesting similar-ities with the customer package workflow. Although front office and back office workers participating in this work-flow have no contact to back office workers of the Customer Agreement Department, they have independently of the oth-ers also found ways to work in a case-centric manner. In the Account Settlement workflow, workers focus on one cus-tomer case; through the task portal they locate all activities that belong to the particular case and handle them all before starting on the next case.

Although it is against the precepts of prevailing WFM sys-tems philosophy, the workers have their reasons for insisting on working in the case-centric manner.

First of all, unsurprisingly, according to the back office workers,  X  X t does not feel right X  not to know the larger con-text in which one is working. Knowledge of the process gives one a better understanding of what one is doing, and han-dling all the tasks pertaining to a given case gives  X  X  better feeling of doing a complete piece of work X . In addition there are some very good practical reasons. When one worker han-dles and has the responsibility for a complete case, with all its associated tasks, this has the advantage that the worker knows what has happened during the execution of the work-flow, and the worker should be suited to handle exception casesandfailuresfaster.
According to an old Russian proverb, success has many fathers, while failure is an orphan. This undoubtedly also applies to our story of the working workflow. The sound strategy of aiming at a realistic level of automation and leav-ing the remainder of cases to manual execution is definitely one factor. The tweaking and twisting of the workflow design allowing the back office workers to retain control of all tasks pertaining to each particular case is surely another reason why the development process has achieved such significant results. A number of other factors that have contributed to the success are worth mentioning.
Thebackofficeisprimarilystaffedbybankclerkswho have expressed an interest a job  X  X n the rear X , that is, away from the pressures of the front office, as well people from post offices who have been used to high-volume keyboard work. The average age of the back office staff is about 55 years. Common prejudice notwithstanding, the workers have ex-hibited strong motivation for using the WFM system. This can primarily be attributed to an enthusiastic group within the office, who expressly wanted to try something new and has been the driving force in adopting the system, as well as the group leader who from the very beginning said that  X  X his is the way to go X . There is today a general confidence about the WFM system and the back office workers would not want to change back to the older CTS system, where regulation of the process was handled manually. They have acquired an understanding of the WFM system and express satisfaction with the advantages it offers in terms of coor-dinating processes as well as automation of manual tasks. One of the workers commented that  X  X t is strange to think that a large part of our former working day today executes automatically. X 
From early on, back office workers were directly involved in the development of the customer package workflow. Both developers and workers report that they found out that they could learn much from each other and talk of the cooperation as  X  X  good experience X .

For the developer, the close collaboration made systems integration smoother, as he developed an understanding of the practical business process, of how people worked, and of how to use different business systems. The workers could simply show which application programs were used for which different manual activities, which data should be provided, and what were the preconditions. Much of this information had been lost under the traditional development model of transferring information from worker to business analyst to architect and to developer. On the other hand, the work-ers expressed that they were involved and had influence. In addition, they acquired an understanding of the complex-ity of the involved systems, which made it easier for them to accept periodically unstable systems as well as to have patience with the time it took for the workflow to develop. Figure 10: Developer and back office worker cooperating during development and test of the customer package work-flow.

The back office worker at Figure 10 declared:  X  X he devel-oper and the user really have learned a lot from each other. It is very very important to make the developer, the user, and the business analyst communicate with each other early in the project. It is not sufficient that the developer talks to the business analyst. The user also has to be involved. . . Take some concrete examples and work through them so that everybody agrees on how the business process works. X 
Today, the workers have adopted the new way of working, and despite periods of unstable systems, workers express agreement that they have become much more efficient than with previous work practices.
The development and implementation process has been gradual. The customer package process has been deployed in the six major versions. In addition, several minor versions have been deployed with minor changes and error correc-tions. This stepwise refinement process and the high level of user involvement it affords have probably been a precon-dition for the workers X  strong commitment to the process. As already noted, the first version of the customer package workflow was implemented exactly as the then current man-ual work practice. This was thought to make the transition from manual to computational workflow easier. Thus, al-though the back office workers had to learn a new system, the underlying business process was well known to them. Since that first version, the customer package process has been refined in a stepwise manner. This has made it possi-ble for all parties to learn from experiences and to have the lessons learned reflected in the changing workflow. On the other hand, the stepwise development and implementation process would hardly have been possible, not to mention economically viable, without the relatively high degree of flexibility afforded by the combination of a high-level  X  X er-vice composition X  language such as BPEL and SOA.
Now, although the gains in productivity and business flex-ibility that have been obtained are remarkable, experience with current WFM technologies show that they can not be considered fully mature. Some of the major challenges, as seen from the back office, are described in the following sec-tions 2 .
The first issue is not one of technological principle but still an issue of practical import in any real-world setting. During the first phases of introducing the workflow, users experienced long response times and unstable systems. To-day, the long response time has been resolved, but periodi-cally systems still become unstable. Now, the performance of the back-office workers is measured on how many pack-ages they handle, so when systems become unstable or crash, the workers are not particularly happy, to put it that way. During the first period of using the WFM system, the back office workers were not even informed about phases of sys-tem instability, but procedures have by now been defined for informing workflow users about potential problems with system stability.

The worst incidences of this kind were related to activities that had been automated but subsequently turned out to be error-prone. For instance, four day after the card creation task had been automated, it was recognized that the card creation system did not function correctly. As a result, the back office workers had to go back and create cards manually for customer packages from the last four days as well as for new customer packages that were still arriving.

The system instability that has been experienced has ma-inly been caused by bugs in the WFM system or in related systems such as database and messaging systems. These bugs seem to indicate that not only is a WFM system an extremely complex system complex but also that the vendor is still developing it.
Although BPEL in combination with SOA affords a re-markable increase in workflow design flexibility, we are far from a situation where ordinary workers are able to de-fine and compose their own local computational workflows. The technology requires the ongoing intervention of highly trained technical specialists. And the development process requires great effort and takes time.

An example will suffice to make the point. At some oc-casion, the developer was contacted by the business analyst who wanted him to make a change in the process; an addi-tional manual task had to be added to the workflow. The developer thought it was a strange change request but up-dated the workflow according to the request and tested it in three test environments before deploying it to production. This was a time-consuming process, as the complete work-flow should be tested thoroughly. Shortly after deployment, however, the back office workers started to phone in and asked about the new manual task; it was unnecessary, they said, and they wanted it removed. The developer immedi-
Challenges experienced by the business analyst, the solu-tion architect, and the developer when developing the work-flow are described in [2] ately removed it, but it took almost two months before the next version was deployed. And in the meantime, the work-ers had to claim the unnecessary manual task for all new customer packages.
A workflow such as the customer package workflow inte-grates systems from multiple departments. However, these departments are not aware that the workflow depends on the availability of their systems. A couple of times it transpired that other departments were going to change or decommis-sion systems on which the customer package workflow de-pended. If that had happened, if the systems are changed or closed, the workflow would not be able to execute, and the back office would grind to a halt. An example: the work-flow depended on a traditional 3270 mainframe system for creating payment authorizations that allow the bank to pay customers X  bills. One day, however, it was announced over the intranet that this legacy system would be closed and re-placed by a web based system. However, one of the back of-fice workers noticed the problem and immediately contacted the responsible department:  X  X ou cannot close the system from day to day, the workflow department has to be able to catch up and change their workflows to use the new system X . As a result access to the old system was prolonged until a new version of the workflow was ready. The example is of course just an anecdote and even an anecdote with a happy ending, but the point is no less valid for that: workflows on top of highly distributed architectures such as SOA cre-ates increasingly tightly coupled dependencies across orga-nizational boundaries and will thus, potentially, contribute to increased complexity. Mature SOA implementations will have to support the distributed cooperative management of these dependencies.

Software vendors have started to implement such depen-dency management systems, e.g. IBM with its  X  X ebSphere Service Registry and Repository X  [5]. However, implement-ing and integrating such a system into the existing infras-tructure of a large-scale enterprise is a difficult, exacting, and protracted task.
We have shown that workflow technologies are now at a stage where they begin to be used for real in large-scale set-tings. We have shown that the technology, while not com-pletely mature, affords a relatively iterative development process and thus the possibility of learning from experience and of involving users in the design process. And we have shown that the workflow technology holds potential for re-markable productivity gains. All this is quite remarkable and of obvious interest to the CSCW community.

We observed that workers claimed control over the work-flow to be able to work on complete cases, in contrast to handling separate tasks for multiple different and hence frag-mented cases. They needed a deeper understanding of the context they worked in. We also found that an iterative de-velopment of the workflow system, in the context of highly motivated workers intimately involved in the process of de-fining the system, were some of the reasons for the success of the WFM system.

However, we do not want to exaggerate the general valid-ity of our story. First of all, in spite its scope and complexity, banking, as a work domain, basically deals with a world of relatively well-behaved signs. A quick comparison with work domains such as medical work, construction, manufacturing, etc. should suffice to make the points: signs can of course be wrong, mistyped, misplaced, incomplete, etc., but in con-trast to ailing patients, solidif ying concrete, or steel under stress, they rarely behave in a c ontingent manner. It is, of course, therefore no accident that accounting work has been pliable to automation.

Second, the business processes we have been investigating were selected as workflow pilots precisely because of their predicable and production-like character. They were rel-atively well-behaved in advance of the development effort. Moreover, the processes that were selected were already, to a very large extent, computerized from the beginning, in the sense that they depended on an array of application prob-lems, although these application programs required human intervention to be stringed together. To a large extent, then, the purpose of the workflows consisted in the  X  X rchestration X  of already computerized processes. One would not easily find processes like that in medical work, construction, or man-ufacturing. Consequently, the task portal used by process participants offers only rudimentary support for cooperative work.

That is, the success of technologies like BPEL as described here may not be easily repeated in other domains. Anyway, the story does show that workflow technology is coming of age (despite technical and organizational issues with system stability and dependencies between services). As the exam-ple of BPEL4People indicates, this raises new prospects for CSCW. The point we want to make here is this: BPEL and similar languages treat human activities on par with auto-matically executed processes. For the workflow, a manually performed task is no different from an automatic service: they are both simply black holes. However, when human ac-tivities consist in far more than retrieving and entering data from and to application progr ams and are thus vastly more contingent, then the black hole assumptions break down.
However, the Workflow Management community does not seem to realize the nature and size of the challenge they are now facing. The CSCW community may not have ready solutions to offer but we have, after all, an idea of the nature and size of the challenge. [1] T. Andrews. Business Process Execution Language for [2] S.Brahe.BPMontopofSOA:Experiencesfromthe [3] P. H. Carstensen and C. S X rensen. From the social to [4] M. Divitini and C. Simone. Supporting different [5] C. Dudley, L. Rieu, M. Smithson, T. Verma, and [6] C. A. Ellis. Information Control Nets: A [7] C. A. Ellis and M. Bernal. Officetalk-d: An [8] M. Klein, C. Dellarocas, and A. Bernstein. Adaptive [9] M. Kloppmann, D. Koenig, F. Leymann, G. Pfau, [10] T. Kreifelts. Experiences with the DOMINO office [11] T. Kreifelts, E. Hinrichs, and G. Woetzel. Sharing [12] F. Leymann and D. Roller. Production Workflow: [13] K. Schmidt and C. Simone. Coordination Mechanisms: [14] L. A. Suchman. Office procedures as practical action: [15] W. M. P. van der Aalst. The Application of Petri Nets [16] W. M. P. van der Aalst, A. H. M. Hofstede, and [17] W. M. P. van der Aalst and K. M. van Hee. Workflow [18] M. D. Zisman. Representation, Specification and
