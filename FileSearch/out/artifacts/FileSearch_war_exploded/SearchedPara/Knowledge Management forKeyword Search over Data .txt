 This demo presents exploratory keyword search over data graphs by means of semantic facets. The demo starts with a keyword search over data graphs. Answers are first ranked by an existing search engine that considers their textual rele-vance and semantic structure. The user can then explore the answers through facets of structural patterns (i.e., schemas) as well as through other features. A particular way of pre-senting answers in a compact form is also supported and is applicable when looking for a single entity that connects the keywords. The demo is based on a working prototype that users can try on their own. It includes five data graphs that are quite diversified. In particular, three of them were generated from relational databases and two X  X rom RDF triples. The demo shows that the system enables users to easily and quickly perform various search tasks by means of exploration, filtering and summarization.
 Keyword search; data graph; semantic faceted search; ex-ploratory search
Keyword search over knowledge bases has been investi-gated quite extensively (cf. [2]). Current systems are based on two pillars, namely, information-retrieval and database techniques. In this paper, we describe a system that adds a third pillar of knowledge management that facilitates itera-tive query processing [8]. We demonstrate why it is needed and how it speeds up the search for particular answers that are of interest to the user.

In keyword search over data graphs, an answer consists of some relevant text as well as a semantic structure (i.e., a  X  This work was partially supported by the Israel Science Foundation (Grant No. 1632/12).  X 
Work done as a PhD candidate at The Hebrew University of Jerusalem.
 (i.e., knowledge bases) and enunciate the principle of itera-tive querying that consists of exploration, filtering and ag-gregation. Our method is a concrete implementation of it-erative querying by means of semantic faceted search. The works [3, 5, 10, 12] support result exploration and query re-finement over knowledge bases. However, they either as-sume an underlying relational database schema that is pre-processed [3, 12] or they use some structured query lan-guage [5, 10]. Hence, those are not full-fledged systems for keyword search over data graphs. The method of [7] al-lows users to start with keyword search, and then it selects the best interpretation and presents the results to the user, whereas we let users explore the whole gamut of semantic connections among the keywords.
In this section, we describe the semantic facets and the functionality they provide. We also give some highlights of the implementation and system architecture.
A data graph represents entities and relationships. It can be derived from relational databases, RDF, XML, etc. In a data graph, nodes are either entities or relationships, while edges represent connections among them. When creating a data graph from a relational database, edges correspond to foreign-key references. If the source data is RDF, edges are the predicates that connect subjects and objects. And if the data graph is obtained from XML, edges correspond to IDREF(s) attributes.

Each node and edge in a data graph has a set of attribute-value pairs. Nodes and edges may also have free text, re-sulting in richer information. Two special attributes are type and name . The former exists in all nodes and edges. The latter exists in all the entity nodes, but not in relationship nodes or edges.

A query Q is a set of keywords. An answer A to Q is a subtree A of the data graph, such that A contains all the keywords of Q and is non-redundant , in the sense that no proper subtree of A also has all the keywords. The schema of an answer A is the same tree as A , but with only the type (and no other information) in each node and edge. Thus, a schema can have multiple corresponding answers. If the schema is not sufficiently informative, the system can show some specific answers (of the schema) in order to better un-derstand its meaning. Figure 1 depicts how results are presented to the user . The UI consists of two panes. Answers appear, in ranked order, in the right pane. The left pane consists of facets. The figure is just a snippet of the UI created from the top-1000 answers to the query  X  X hein Germany X  on the Mondial data graph [2].

A node is depicted as a gray rectangle. An edge is shown with a red circle in the middle. The value of the attribute type is shown in purple and red fonts in nodes and edges, re-spectively. The value of the attribute name (of entity nodes) is shown in a blue font. For example, in the first answer (appearing in the right pane) of Figure 1, the top rectangle is an instance of the relationship located and the bottom one represents the entity Germany . The top of the left pane of Figure 1 comprises the schemas (i.e., tree patterns) of ever, other engines with a similar API can be used. We extended [9] to generate the semantic, as well as the other, facets and to support drilling down by means of filtering. The UI of our system is based on [1]. They use a REST API with XSL (EXtensible Stylesheet Language) and CSS (Cascading Style Sheets) for the presentation of answers, and JavaScript for navigation. We extended those compo-nents to support the new facet pane and its operations.
Some rudimentary form or result exploration is available in [1] (e.g., by selecting an answer and choosing to either display only or exclude all answers with the same schema). In comparison, our system introduces a full-fledged facet pane that (among other things) features schemas and en-ables single-entity search.
We now describe the demo setup and some possible sce-narios for knowledge exploration and result summarization. The demo uses five diversified data graphs. Three of them were generated from the relational databases of [2] that are based on the Mondial, Wikipedia and IMDB datasets. Two data graphs were created from the RDF triplets of [4] that are based on the IMDB and LibraryThing datasets.

In the demo, users will be able to pose their own queries or apply those of [2, 4]. The latter illustrate that many queries have several plausible interpretations in addition to the in-tended one. The demo shows that semantic faceted search is essential when querying data graphs.
In Figure 1, where the query is  X  X hein Germany X  (taken from [2]), the top subtree in the answer pane shows that the Rhein river is located in Germany. Note that the two are connected through the located relationship. This is indeed the most relevant answer. More details can be obtained by clicking on Extended_result , thereby seeing the other entities of the located relationship (a city and a province).
The user can further explore other types of relationships between those two entities. For example, the second schema in the facet pane shows that in nine answers the connection is through a geo_river relationship and a province . Note that in the second answer, the province is Hessen. That answer shows that the Rhein river flows through Hessen, which is a province in Germany. The user can drill down on the second schema and see the provinces through which the Rhein river flows. The user can explore more types of connections (e.g., through cities and countries using schemas that are not shown in Figure 1).

It is also possible to change the ranking of the semantic facets by the following options: top, sum, avg, and count . Top means sorting by the highest score among all the an-swers of each schema. The other options are by the sum of scores, average score and count of all the answers of each schema. Since there may be a large number of schemas, the user can select whether to show all of them or only the top-n (by default, n = 5).
In [8], they discuss several types of aggregating answers, such as grouping, diversifying and summarizing. The facets presented earlier enable aggregation of answers according to various criteria (e.g., same schema). We now describe aggre-gation by entity type. It is applicable when (in an answer)
