 Memon Abdul Ghafoor, Jianwei Yin, Jinxiang Dong, and Maree Mujeeb-u-Rehman Current trend in inter-organizational process system is flowing towards the inter-organizational business process where different organizations that are using their individual resources to achieve a common goal by modeling and executing inter-organizational workflow [1,2,3,4]. Inter-organizational workflow process system, however, raises numerous open research problems, such as how to model these work-ment systems. Inter-organizational workflow process system is essentially a set of loosely coupled workflow processes [7], typically where there are many business partners which are involved in one 'Inter-organizational' workflow process. Each of the partners has its own 'intra-organizational' workflow process. The inter-organizational workflow process system consists of intra-organizational workflows processes and an interaction structure. The examined example shown in Fig.1 where activities of participating organizations are counted as a set of intra-process provided by the organization internally. The intra-process of an organization can provide a organizational process. The inter-organizational process uses as host-host and host-net processes to link a specified service. Each pr ocess service points to or is provided by the intra-process of an organization and th e intra-process can be changed dynamically by adapting business process environment. Evolutions are always emerging from changes. For inter-organizational process, changes are actions to manipulate or oper-organizational processes are embodied in the effects of the actions. Therefore, reason-ing about and analyzing the evolutions of dynamic inter-organizational processes is in can only describe constraints over actions instead of describing actions directly. Con-Thus, the  X  -calculus provides us a uniform approach to specify dynamic inter-organizational processes and reasons about the evolutions of dynamic inter-organizational processes. 
This paper proposes an inter-organizational process system with inter-organizational  X  -calculus (IO  X  -calculus ) technology techniques with primitives for location, migration and plain  X  -calculus style channel communication. The coopera-tion mechanism between organizations in distributed service process paradigm mechanism based on service utilization in a client/server infrastructure * . 
In rest of this paper we introduce Inter-organizational Process Requirements in sec-tion 2. In section 3, Inter-organizational Process Advantages with  X  -calculus. In sec-IO Encoding correctness for organizational  X  -process. In section 10, Encoding of the Internet Server Daemon and Conclusion in section 11 respectively. Related Work Recently there is an increased interest in formal modeling of inter-organizational business processes. Several formalized languages for the specification of inter-organizational workflows have been proposed, each of them having different origins and pursuing different goals for dealing with the unique characteristics of inter-organizational process system. The two main formal tools used to model such work-flow processes are Petri nets [8] based on bipartite graphs and process algebra [9,10] knowledge. Many notions developed for Petri nets can be translated to process alge-bra and vice versa. In  X  -calculus, the first step was taken by Milner [11] in 1991 who introduced an improvement of the  X  -calculus called polyadic  X  -calculus where chan-nels were allowed to carry tuples of messages. Polyadicity supports concept of  X  X ort-ing X  and polyadic  X  -calculus maintaining the type discipline forces channels. Most niques. Some researchers discuss the use of the  X  -calculus driven by the need to apply the  X  -calculus to practice. The first extension of Milner X  X  system has been undertaken by Pierce and Sangiorgi, they distinguished between input-only, output-only, and input-output Channels. This extension naturally leads to recursive types with subtyp-ing [12]. The use of PICT allows automatically generated applications from specifica-tions used to investigate certain behavioral properties [13]. Vivas and Dam have stud-ied the effect of these on the higher-order  X  -calculus and given an encoding into the  X  -calculus [14]. However, their encoding relies on blocking being carried out explicitly on individual names , and both complex and indirect. Cardelli, Ghelli and Gordon take a different approach to limiting communication with their notion of name groups [15]. In Inter-organizational distributed process systems, such as the Internet, sensitive contrast with Distributed Join-calculus [16] or Mobile Ambients [17], locations do not contain sub-locations [18]. As in Mobile Ambients, communication is purely local; only co-located processes can communicate. Contrary to Mobile Ambients and Dis-tributed join-calculus, mobility is weak in the sense that migrate code instead of com-putations. techniques provides a simple but powerful framework to model fundamental features of distributed computations. Our focus is distributed  X  -calculus [19] which is based on the polyadic asynchronous  X   X  -calculus involving explicit and simple notions of local-ity and migration. A typical inter-organizational process is enacted by a network of communicating entities exchanging information, with their actions taking place concurrently. The behavior of concurrent systems inherently non-deterministic as it cannot be predicted for the occurrence order atomic actions of the participating processes. This non-determinism may be unwanted, but a process modeling language must be able to want to reveal to the public or to competitors. To be useful, inter-organizational proc-ess modeling language must therefore be able to discriminate between internal, unob-servable actions and those can and may be observed from the outside. The process model should then make it possible to verify that the internal behavior of the service satisfaction. In short, inter-organizational process must deal with communication, concurrency, constraints, differentiation between internal and external organizational behavior and process equivalence. Although other requirements can be thought of, these are certainly among the most important. In the all above presented phenomena, the IO  X  -calculus technology can meet their desired functionalities. Since this research work is focusing on th e adaptations of inter-organizational process systems to dynamic inter-organizational processes, the selected formalism must be competent by describing and coping with the dynamic evolutions of inter-organizational process systems and their dynamic processes. Coincidently, as men-tioned in requirements, the  X  -calculus is very suitable to describe inter-organizational process systems with changing configurations and also powerful to express the evolu-very natural selection used for formalizing dynamic inter-organizational processes. Due to dynamics communications in between the organizations in different situations, different organization may be used to connect. The  X  -calculus provides explicit trans-formation link during connectivity process. It can also be used to implement the trans-formation of import/export ports of organizations for building better connections. As far as, traditional formal methods are concerned, IO  X  -calculus technology cannot only describe actions but also reason about actions. Thus it provides us a uniform approach to specify dynamic inter-organizational processes and reason about their evolutions. This section presents the (context-free) grammar of the calculus, followed by the syntactic restrictions. 4.1 Syntax The  X  -calculus is built around two classes of identifiers which are Channels and Lev-els . Channel names are drawn from infinite supply. Syntactically; they behave exactly some finite and totally ordered set level . Definition: (Names, processes and networks). The following grammars define the languages of processes in between networks (a machine, network or Internet). Channels: Host Channel a, b ::= | ( ) @host Net Channel x, y ::= | ( ) @host | @Net Names: net level w,c,r,s; ether (e) names: n, p, q Following processes are based on the asynchronous polyadic  X  -calculus  X  0 is inaction; it is a process that can do nothing.  X  in the composition | PQ , the two components can proceed independently and  X  P va . :  X  denotes a process that creates fresh channel a of type  X  then behave  X  restriction  X  : va ; the type  X  gives information about the level of operation of  X  !(). ab P  X  ] [ P j represents a process P running in organization at j level  X  / ba replacing all free occurrences of b by a  X  () fn P for the set of free names of P  X   X  is finite map from channel type names  X  A type judgment is of the form  X   X  P means that P is well-typed under  X   X  [[ ]] linkage semantic interpretations in models  X  binding prefixes ) ( b a and !() ab r as input Definition: Struct ural Congruence-The structural congruence relation,  X  , is the least congruence on systems which equates Alpha-convertible systems, makes | asso-ciative with identities 0, and satisfies the following equations. 4.2 Scope and Area commuting name binding and area boundaries. A consequence of this is that the scope of a channel name , determined by v -binding, is quite independent from the layout of areas, given by [] j  X  . Scope determines where a name is known, and this will change as a process evolves: areas determine how a name can be used, and these have a fixed structure. 
For a process description to be meaningful, this fixed structure of nested areas must the one-step relation in the total order of levels , we require that in a well-formed proc-ganization of this occurrence of a is the enclosing level j area [] j  X  . A single name may have several disjoint organizations within its scope. It is also possible for a name to occur outside any organization of the right level. 4.3 Type System Channel types have the following rather simple grammar. Type :: @ j  X  X  = ur difficulty. In this paper, just a subset of the  X  -calculus to describe actions and reason about dy-namic inter-organizational model is used. And thus the reasoning based on bi-similarity will turn to be simpler and possible to be automated [26]. In principle, the properties of organizations ether can be speci fied in terms of interface, semantics, and components of two matched organizations ethers, i.e., semantically equivalent ethers Since the semantics of the  X  -calculus process is donated by the evolutions (especially communications) of processes [26], the semantic replaceability of two components (Client and Server) can be reasoned about on two aspects, i.e. (1) the interfaces, i.e., the sequences of actions exposed by the components. The presented IO  X  -calculus technology captures this phenomenon of names which are known universally but always refer to local information. It extends the  X  -calculus so that a channel name can have within its scope several disjoint organizations, such a channel name may be used for communication within organization, or different organizations IO  X  -calculus  X  Internet). 
The main challenge for representing IO  X  -calculus technology in the plain  X  -calculus is how to prevent communication on a channel between different organiza-tions, while still preserving the identity of names . Our solution is to replace commu-nication inside or outside organization with communication on new channel created channel name as well. 
This translation makes explicit the different names , identity and communication, by mapping them to two distinct sets of names . Names a and b serve purely as data, for identification. The scope of data names manages who knows what, while the scope of ether names handles locality of communication. ate organization which is shared ether. Ether names are for communication only. An input action on a channel translates to a process those interactions for communication on the relevant ether. When it receives a message it tests the first element against the casts the message. 
The evident motivation for this model is packet communication on an Ethernet ether. Interact processes pick up all packet s and shift out the ones they are interested communication (a machine; Network or Internet). To improve the performance and decrease the cost of serving IO  X  -calculus has the obligation to providing connections with different qualities of services for different users and servers instead of providing the same connections for all users and servers. 
There is a close matching between the behavior of a process in IO  X  -calculus tech-nology and its plain  X  -calculus translation; here shown it is a form of weak bi-interested.  X  -calculus is a general model of computation which takes interaction as primitive. The IO  X  -calculus technology extends a standard  X  -calculus with nested organizations brief example, based on a mechanism for selecting services. When a browser contacts another machine, both connect by a numbered port on the remote host for getting service. Of course, this only works if both sides agree; and there is a real-world com-mittee to set this up [23]. There is also a further level of indirection; most machines run only a general meta-server Inetd, the Internet daemon, which listens on all ports. When Inetd receives a connection, it looks up the port in /etc/services, and then con-sults a second file which identifies the program to provide that S service. The Inetd starts the program and hands it a connection to the client. There are two components involved in the IO  X  -calculus technology, i.e., the client and the server. For the client, it requests for services to the serv er, the server provides services. 
Client 
This shows a client machine Usr(Client) that wishes to contact a Ser(Server) with S ; the host [  X  ] and net [  X  ] indicate organizationally and inter-organizationally areas respectively. The Client has two components: the first transmits the second prepares to server machine , while the free names numbers. In operation, Usr sends its request to Ser naming the tact c over the channel name representation of host-host and host-net is shown as in Fig. 2. 
In the plain  X  -calculus this models leaks: because the name protection against a S daemon on some different server actually handling it. Restrict-ing the scope of S service to host Ser would be no solution, because then Usr could not formulate the request because it has to know the name of the service. In the IO  X  -how far communication on that channel may travel. In this case, although interfere with each other. 
Section 6.1 presents the rules for deriving type assertions of the form  X   X  j P , this states that process P is well-typed at level j in context  X  . The static checking pro-vided by the Type system makes two assurances one is based on the tuples values sent over channels will always be the right size, and the other based on a well-typed proc-ess which will not attempt to communicate on a name above its level of operation. 6.1 Types for Processes in the Organizational  X  -Calculus Technology 6.2 Operational Linkage for Organizational IO  X  -Calculus Technology 6.3 Operational Links We give the calculus a late-binding, small-step transition links, following the regular  X  -calculus There is only one addition; although the static type system guarantees that a process will not initiate communication on a name above its operating level, we still need a dynamic check to make sure that no active communication escapes from its organization. 
The operational links is given as an inductively defined relation on well-typed processes, indexed by their level j and context  X  . Section 6.2 gives rules for deriv-ing transitions of the form  X   X  j P  X   X   X   X  Q where  X   X  j P and  X  (alpha) is one of the following transitions:  X  (). ab P  X  (). ab P  X  . P  X  is an invisible action to P . Can be a silent internal action of a process . Observations. We focus on adaptations of inter-organizational system X  X  few observa-symmetric form for the PAR rule. Secondly, in order to apply the COMM rule it may be necessary to use structural congruence to expand the scope of communicated side-condition ( ) b dom  X   X  X = chosen fresh, ready for substitution { / } Qc b alpha-convert our processes to achieve this. Fourthly, the side-condition kk  X   X  on area is the dynamic check that prevents communications escaping from their organi-zation. 6.4  X  -Calculus Process Action Thro ugh Internet Server Daemon 6.5 Service Activity Thro ugh Internet Server A host Usr wishes to contact a S daemon running on host Ser , through a general Inet daemon . Section 6.4 fills out the details of this, including type definitions. 
The type service for the values carried will themselves be net-level names . The host-level communication sent out to the original enquirer, in this case over channel c to machine Usr . Channel w has a net-level type that acts as a gateway to this, reading the name of a service and a channel where that service should send its reply. We can now apply our operational links to see this in action. communications on: expands of: After a sequence of internal communications at the net and host level , the first host Usr is ready to get the service information SerUs , and host Ser is restored to its origi-nal configuration. name testing. The absence of output prefixing and choice reflects the organization calculus. Other aspects are tuned to make the encoding as simple as possible by reducing inter-nal transitions and avoiding inert processes. For example, we could easily use replica-tion ! P rather than recursion, but this needs an extra trigger channel . Unusually, our channels carry non-empty lists of values rather than tuples; we write b for this, with; for list concatenation. This is because the translation multiplexes the action of several unwrap packets; in fact, testing on the head element of a list is always enough to de-calculus techniques [24], or possibly type packets with some polymorphic data type into a conditional with operational rules derived from those for matching [26].
With these rules we can consistently add the following convenient structural con-gruence: (). if x x then P else Q P = X  In this section we represent a compositional encoding of organization  X  -term into the  X  -calculus, following the scheme outlined in the introduction. All communication is becomes list output ; eab  X  X  X  where e varies according to the level of a . To keep track of which e to use, we maintain an environment  X  mapping levels to ether names . The dentally capture any existing names when introducing the new ether. to ethers to find the correct ether for the output channel . It then sends both the output channel and the data for transmission over this ether name . then the packet is meant for this input and execution continues as appropriate. If the area. The packet is resent and the process restarts. Replicated input is the same, except that th e process restarts whether or not the input key is correctly matched. The encoding is well-defined up to structural congruence. Proposition. For any organization  X  -term , PandQ if structural axioms for IO  X  -calculus technology given at the end of Section 4, translate to valid  X  -calculus equivalences. All of these are immediate; the only significant case ing uses  X  -calculus channels in a highly manner. Names fall into two distinct classes, data names which correspond directly to organization  X  -calculus channels , and ether names . All communication involves sending data over ethers. One consequence of this is that all our terms happen to lie in the subset studied by Massimo Merro [27] as names have a dual role, for identity and for communication; what happens in the translation is that each role is mapped to a different name . assigns ethers to levels j and above. 
Section 8.1 presents the full encoding, with one clause for each constructor; here we go through each one individually. The null process, parallel composition, and name restriction are unchanged. 8.1 Rules for Encoding Organizational  X  -Calculus Technology with  X  -Calculus tween direct and ether-based communication. Organization  X  -process and its encoding behave in very similar ways, and this is preserved under reduction relation,  X  , is the least relation on systems satisfying the following equations. Theorem. For any well-typed process  X   X  j P in the IO  X  -calculus technology and transition ab  X  =  X  X  X  have different input behavior, with the tran slated terms being more receptive than the observable, as there is no way in principle to know when an input has been received. In the terminology of Nestmann and Pierce [28], this is an operational correspondence between the calculi. Although expressed in terms of weak transitions, the correspon-dence is in fact rather close. Transitions match exactly, except that a single internal  X  -transition may map to zero organization  X  -transitions. In proposed system, diver-gence arises rather naturally from mechanism of ethers. We expect that replacing this with more pragmatic lists of service user and service provider would lead to a diver-gence-free encoding, but at a cost of considerable complexity. Theorem follows with-Actions, all with () ek = X  where () a  X   X  = out difficulty from the following more precise results, which characterize exactly the possible actions of encoded processes. Lemma. For any well-typed process  X   X  j P in the IO calculus  X   X  technology the following clauses hold. In each case and () ek = X  where () a  X   X = again and continues as before. This means that an input in the encoded system may be revert to the original process. This choice of two possible responses to any input ac-tion is carried out to the case of an encoded process performing a  X  . This may either reflect a  X  in the system it encodes or it may be a rejected communication, in which case the process it reduces to it s congruence to the original. 
Proofs for each above clauses in the lemma follow a similar pattern. For clauses (i)-to-(iii), we break down a process into the part that performs the action and a sur-rounding context. Next we use the encoding rules to encode these parts. Then we reverse direction. First we break down Q , into the parts that perform the action and a context, then using this decomposition we ch aracterize P, finally we show that this P can perform the required action and reduce to a process matching Q X  . The direct rela-tionship between the behavior of a process and its encoding make the proof much easier. In particular, there are no intermediate forms on the  X  -calculus side to be ana-lyzed. If there were such additional  X  X ousekeeping X  steps, then we would need to enlarge the lemma to cover a one-to-many relation R  X  between organization  X  -processes and  X  -term. 9.1 Encoding Correctness Processes Ac tion Through Internet Server Daemon S ection 9.1 shows the result, which can be compared with section 6.5 . The translation themselves. 
As we expect from Lemma, reductions of the translated process closely match those of the original given earlier. | (; ).( | ; )| ])
Communication of 
Apply test  X  ,,.( .(;). vp q c X n x y if  X  c x = then ; ........
Apply test  X  ,,. vp q c ( ( , ||)
Comparing the reduction in given in Section 6.4, notice how communication re-stricted to an organization ( X  X ommunication on nication on organization ether ( X  X ommunication of A new formalizing approach presented for modeling and controlling the execution of inter-organizational service processes by IO  X  -calculus technology. The inter-can be changed dynamically by adapting business process environment. We also and distributed  X  -calculus with local and global communication and process migra-tion. We have encoded a notion of distributed organizational process system and in-IO  X  -calculus technology. IO  X  -calculus technology encoding is the technique of re-placing communication on a channel name with communication over ether associated with the appropriate organizational process system. In the operational correspondence section 9, we showed that there is a cl ose relation between the actions of processes and their translations. This step used to build on to investigate the degree to which the encoding preserves and reflects equivalences in between inter-organizational proc-by ethers exposes them to probing by general  X  -calculus terms. The encoding given in containing level . We can suggest a solution though, using an encoding with network controllers. Within organization, each pro cess communicates only through its imme-diate organizational controller. This approach is well suited for sporadic communica-tion in open organizational distributed systems, especially co-operations across or-ganization and inter-organizational boundaries. The cooperative process across or-ganizations becomes simple, faster, and flexible. The new internet cooperative system presents the construction of an internet/inte r-organizational process. Hence, applying excepting handling and transaction mechanisms of processes into inter-organizational process system are future topics. 
