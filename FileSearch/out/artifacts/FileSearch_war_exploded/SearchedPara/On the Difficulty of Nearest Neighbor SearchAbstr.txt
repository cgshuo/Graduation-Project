 Junfeng He jh2700@columbia.edu Sanjiv Kumar sanjivk@google.com Google Research, New York, NY 10011, USA Shih-Fu Chang sfchang@ee.columbia.edu Finding nearest neighbors is a key step in many ma-chine learning algorithms such as spectral cluster-ing, manifold learning and semi-supervised learning. Rapidly increasing data in many domains such as the Web is posing new challenges on how to efficiently retrieve nearest neighbors of a query from massive databases. Fortunately, in most applications, it is suf-ficient to return approximate nearest neighbors of a query, which allows efficeint scalable search. A large number of approximate Nearest Neighbor (NN) search techniques have been proposed in the last decade including hashing and tree-based meth-ods, to name a few, ( Datar et al. , 2004 ; Liu et al. , 2004 ; Weiss et al. , 2008 ). However, the performance of all these techniques depends heavily on the data set characteristics. In fact, as a fundamental question, one would like to know how difficult is (approximate) NN search in a given data set. And more broadly, which data characteristics of the dataset affect the  X  X ifficulty X  and how? The term  X  X ifficulty X  here has two different but related meanings: in the context of NN search problem (independent of indexing meth-ods),  X  X ifficulty X  represents  X  X eaningfulness X , i.e., for a query, how differentiable is its NN point compared to other points? In the context of approximate NN search methods like tree or hashing based indexing methods,  X  X ifficulty X  represents  X  X omplexity X , i.e., what is the time and space complexity to guarantee to find the NN point (with a high probability)? These questions have not been paid much attention in the literature. In terms of  X  X eaningfulness X  of NN search problem in a given dataset, most of the existing works have focused on the effect of one data property: dimen-sionality, that too in an asymptotic sense, showing that NN search will be meaningless when the num-ber of dimensions goes to infinity ( Beyer et al. , 1999 ; Aggarwal et al. , 2001 ; Francois et al. , 2007 ). First, non-asymptotic analysis has not been discussed, i.e., when the number of dimensions is finite. Moreover, the effect of other crucial properties has not been stud-ied, for instance, the sparsity of data vectors. Since in many applications, high-dimensional vectors tend to be sparse, it is important to study the two data prop-erties e.g., dimensionality and sparsity together, along with other factors such as database size and distance metric.
 In terms of the complexity of approximate NN search methods like Locality Sensitive Hashing (LSH), some general bounds for ( Gionis et al. , 1999 ; Indyk &amp; Motwani , 1998 ) have been presented. How-ever, it has not been studied how the complexity of approximate NN search methods is affected by the difficulty of NN search problem on the dataset, and moreover, by various data properties like dimension, sparsity, etc.
 The main contributions of this paper are: 1. We introduces a new concrete measure Relative Contrast for the meaningfulness/difficulty of nearest neighbor search problem in a given data set (in-dependent of indexing methods). Unlike previous works that only provide asymptotic discussions for one or two data properties, we derive an explicitly computable function to estimate relative contrast in non-asymptotic case. It for the first time enables us to analyze how the difficulty of nearest neighbor search is affected by different data properties simultaneously, such as dimensionality, sparsity, database size, along with the norm of L p distance metric , for a given data set. (Sec. 2 ) 2. We provide a theoretical analysis on how the difficulty measure  X  X elative contrast X  determines the complexity of LSH, a popular approximate NN search method. This is the first work to relate the complexity of approximate NN search methods to the difficulty measure of a given dataset, allowing us to analyze how the complexity is affected by various data properties simultaneously. For practitioners X  benefits, relative contrast also provides insights on how to choose parameters e.g., the number of hash tables of LSH, and a principled explanation of why PCA-based methods perform well in practice. (Sec. 3 ) 3. We reveal the relationship between relative contrast and previous studies on measuring NN search difficulty, and show that most existing works can be derived as special asymptotic cases for dense vectors of the proposed relative contrast. (Sec. 4 ) Suppose we are given a data set X containing n d -dim points, X = { x i , i = 1 , . . . , n } , and a query q where x i , q  X  R d are i.i.d samples from an unknown distribution p ( x ). Further, let D ( , ) be the distance function for the d -dimensional data. We focus on L p distances in this paper: D ( x, q )=( P j | x j  X  q j | p 2.1. Definition Suppose D q min = min nearest database sample 1 , and D q mean = E x [ D ( x, q )] is the expected distance of a random database sample from the query q . We define the relative contrast for the data set X for a query q as : C q r = D q mean D q a very intuitive measure of separability of the nearest neighbor of q from the rest of the database points. Now, taking expectations with respect to queries, the relative contrast for the dataset X is given as, Intuitively, C r captures the notion of difficulty of NN search in X . Smaller the C r , more difficult the search. If C r is close to 1, then on average a query q will have almost the same distance to its nearest neighbor as that to a random point in X . This will imply that NN search in database X is not very meaningful.
 In the following sections, we derive relative contrast as a function of various important data characteristics. 2.2. Estimation Suppose x j and q j are the j th dimensions of vectors x and q . Let X  X  define, Both R j and R are random variables (because x j is a random variable). Suppose each R j has finite mean and variance denoted as j = E [ R j ] ,  X  2 j = var [ R Then, the mean and variance of R are given as, Here, if dimensions are independent then  X  2 = P j  X  2 j . Without the loss of generality, we can scale the data such that the new mean  X  is 1. The variance of the scaled data, called normalized variance will be: The normalized variance gives the spread of the dis-tances from query to random points in the database with the mean distance fixed at 1. If the spread is small, it is harder to separate the nearest neighbor from the rest of the points. Next, we estimate the relative contrast for a given dataset as follows. Theorem 2.1 If { R j , j=1,...d } are independent and satisfy Lindeberg X  X  condition 2 , the relative contrast can be approximated as, where  X  is the c.d.f of standard Gaussian, n is the number of database samples,  X   X  is normalized standard deviation, and p is the distance metric norm. Proof: Since R j are independent and satisfy Linde-berg X  X  condition, from central limit theorem, R will be distributed as Gaussian for large enough d with mean = P j j and variance  X  2 = P j  X  2 j . Normalizing the data by dividing by , the new mean is  X  = 1 , and new variance is  X   X  2 as defined in ( 3 ). Now, the probability that R  X   X  for any 0  X   X   X  1 is given as where  X  is the c.d.f of standard Gaussian, and the sec-ond term in RHS is the correction factor since R is always nonnegative.
 Let X  X  denote the number of samples for which R  X   X  as N (  X  ) . Clearly, N (  X  ) follows Binomial distribution with probability of success given in ( 5 ): P ( N (  X  ) = k ) = n k ( P ( R  X   X  )) k (1  X  P ( R  X   X  )) Hence the expected number of database points,  X  N (  X  ) that satisfy R  X   X  can be computed as  X  N (  X  )= E [ N (  X  )]= nP ( R  X   X  ) = n (  X  ( Recall D min is the expected distance to the nearest neighbor and R min  X  D p min . 3 Thus,  X  N ( D p min )  X   X  N ( R min ) = 1 . Hence,
D Moreover, after normalization, R follows a Gaus-sian distribution with mean 1. So, R mean = 1 , and D be approximated as: which completes the proof.
 Range of C r : Note that when n is large enough  X  ( 1 and hence C r is always  X  1. And moreover, when  X   X  0,  X  (  X  1  X   X  )  X  0, and C r  X  1.
 Generalization 1 : The concept of relative contrast can be extended easily to the k-nearest neighbor set-pected distance to the k th nearest neighbor. Using  X  N ( D p knn )  X   X  N ( R knn ) = k , and following similar argu-ments as above, one can easily show that 2.3. Effect of normalized variance  X   X  on C r From ( 4 ), relative contrast is a function of database size n , normalized variance  X   X  2 , and distance metric norm p . Here,  X   X  is a function of data characteristics such as dimensionality and sparsity. Figure 1 shows how C r changes with  X   X  according to ( 4 ) when n is varied from 100 to 100 M , and 0 &lt;  X   X  &lt; 0 . 2 (Note that  X  is usually very small for high dimensional data, e.g., far smaller than 0 . 1). It is clear that smaller  X   X  leads to smaller relative contrast, i.e., more difficult nearest neighbor search.
 In the above plots, p was fixed to be 1 but other values yield similar results. An interesting thing to note is that as the database size n increases, relative contrast increases. In other words, nearest neighbor search is more meaningful for a larger database. 4 However, this effect is not very pronounced for smaller values of  X   X  . 2.4. Data Properties vs  X   X  Since we already know the relationship between C r and  X   X  , by analyzing how data properties affect  X   X  , we will find out how data properties affect C r , i.e., the difficulty of NN search. Though many data proper-ties can be studied, in this work we focus on sparsity (a very important property in many domains involv-ing, say, text, images and videos), together with other properties like data dimension and metric.
 Suppose, the j th dimensions of vectors x and q are distributed the same way as a random variable V j . But each dimension has only s j probability of having a non-zero value where 0 &lt; s j  X  1. Denote m j,p as the p -th moment of | V j | , and m  X  j,p as the p -th moment of | V j 1  X  V j 2 | , where V j 1 and V j 2 are independently distributed as V j .
 Theorem 2.2 If dimensions are independent,  X  where j = s 2 j m  X  j,p + 2(1  X  s j ) s j m j,p . Moreover, if dimensions are i.i.d., Proof: Please see the supplementary material ( He , 2012 ).
 For some distributions, m p and m  X  p have a closed form representation. For example, if every dimension fol-lows uniform distribution U (0 , 1), then p th moment is However, if m p and m  X  p do not have a closed form representation, one can always generate samples ac-cording to the distribution, and estimate m p and m  X  p empirically. 2.5. Data Properties vs Relative Contrast C r We now summarize how different database properties and distance metric affect relative contrast. Data Dimensionality ( d ) : From ( 8 ), it is easy to see that larger d will lead to smaller  X   X  . Moreover, from ( 4 ), smaller  X   X  implies smaller relative contrast C r , making NN search less meaningful. This indicates the well-known phenomenon of distance concentration in high dimensional spaces. However, when dimensions are not independent, thankfully, the rate at which dis-tances start concentrating slows down.
 Data Sparsity ( s ) : From ( 8 ), we can see that  X   X  = becomes smaller (i.e., data vectors have fewer non-zero elements),  X   X  gets larger, and so does the relative con-trast. Another interesting case is when p  X  0 + , i.e., L or zero-one distance. In this case, m p = m  X  p = 1, and from ( 8 )  X   X  = 1 tonically as s decreases. However, for general cases, it is not easy to theoretically prove how  X   X  will change when s gets smaller. But in experiments, we have al-ways found that smaller s will lead to larger  X   X  . In other words, when data vectors become more sparse, NN search becomes easier. That raises another inter-esting question: What is the effective dimensionality of sparse vectors? One may be tempted to use d s as the intrinsic dimensionality. But as we will show in the experimental section, this is generally not the case and relative contrast provides an empirical approach to finding intrinsic dimensionality of high-dimensional sparse vectors.
 Database Size ( n ) : From ( 4 ), keeping  X   X  fixed, C r increases monotonically with n . Hence, NN search is more meaningful in larger databases. Actually, when n  X  X  X  , irrespective of  X   X  , 1+  X   X  1 ( 1 n +  X  (  X  1  X   X  and C r  X   X  . Thus, when the database size is large enough, one doesn X  X  need to worry about the meaning-fulness of NN search irrespective of the dimensionality. However, unfortunately when dimensionality is high, C r increases very slowly with n , making the gains not very pronounced in practice. This is the same phe-nomenon noticed in Fig. 1 for small values of  X   X  . Distance Metric Norm ( p ) : Since p appears in both ( 4 ) and ( 8 ), it makes analysis of relative contrast with respect to p not as straightforward. In the special case when data vectors are dense (i.e., s = 1), and each dimension is i.i.d with uniform distribution, one can show that smaller p leads to bigger contrast. 2.6. Validation of Relative Contrast To verify the form of relative contrast derived in Sec. 2 , we conducted experiments with both synthetic and real-world datasets, which are summarized below. 2.6.1. Synthetic Data We generated synthetic data by assuming each dimen-sion to be i.i.d from uniform distribution U [0 , 1]. Fig. 2 compares the predicted (theoretical) relative con-trast with the empirical one. The solid curves show the predicted contrast computed using ( 4 ), where the nor-malized variance  X   X  is estimated using ( 8 ). The dotted curves show the empirical contrast, directly computed according to the definition in ( 1 ) from the data by av-eraging the results over one hundred queries. For most of the cases, the predicted and empirical contrasts have similar values.
 Fig. 2 (a) confirms that as dimensionality increases, relative contrast decreases, thus making the nearest neighbor search harder. Moreover, except for very small d , the prediction is close to the empirical con-trast verifying the theory. It is not surprising that predictions are not very accurate for small d since the central limit theorem(CLT) is not applicable in that case. It is interesting to note that ( 4 ) also predicts the rate at which contrast changes with d , unlike the pre-vious works ( Beyer et al. , 1999 ; Aggarwal et al. , 2001 ) which only show that NN search becomes impossible when dimensionality goes to infinity.
 Fig. 2 (b) shows how data sparsity affects the contrast for two different choices of d . The main observation is that as s increases (denser vectors), contrast de-creases, making nearest neighbor search harder. In other words, lesser the number of non-zero dimensions for a fixed d , easier the search. In fact, the search re-mains well-behaved even in high-dimensional datasets if data is sparse. The prediction is quite accurate in comparison to the empirical one except when s.d is small and hence CLT does not apply any more. As a note of caution, one should not regard s.d as the in-trinsic dimensionality of the data, since a dataset with dense vectors of dimension s.d usually has different image (bag-of-words) 95000 10000 0.024 71 contrast than the d -dim s -sparse data set.
 The effects of two other characteristics i.e., L p distance metric for different p and database size n are shown in Figs. 2 (c) and (d), respectively. The effect of these parameters on relative contrast is milder than that of d and s . For large d , the contrast drops quickly and it becomes hard to visualize the effects of p and n . So, here we show these plots for smaller values of d . From Fig. 2 (c) it is clear that for norms less than 1, contrast is the highest (Note that we have an approximation for p &gt; 1 in Theorem 2.1 , which causes the bias of predicted C r for p = 3 , 4). This observation matches the conclusion from ( Aggarwal et al. , 2001 ) for dense vectors. Fig. 2 (d) shows that as the database size increases, it becomes more meaningful to do nearest neighbor search. But as the dimensionality is increased (from 30 to 60 in the plot), the rate of increase of contrast with n decreases. For very high dimensional data, the effect of n is very small. 2.6.2. Real-world Data Next, we conducted experiments with four real-world datasets commonly used in computer vision applica-tions: sift, gist, color and image . The details of these sets are given in Table 1 . The sift and gist sets contain 128-dim and 384-dim vectors, which are mostly dense. On the other hand, both color and image datasets are very high dimensional as well as sparse. Color data set contains color histogram of images while the image data set contains bag-of-words representation of local features in images.
 While deriving the form of relative contrast in Sec. 2 , we assumed that dimensions were independent. How-ever, this assumption may not be true for real-world data. One way to adress this problem would be to assume that the dimensions become independent after embedding the data in an appropriate low-dimensional space. In these experiments, we define effective dimen-sionality d e as the number of dimensions necessary to preserve 85% variance of the data 5 . The effective di-mensionality for different datasets is shown in Table 1 . Table 2 compares the empirical and predicted rela-tive contrasts for different datasets. Since our theory is based on the law of large numbers, the prediction is more accurate on image and gist data sets as their effective dimensions are large enough. For the color data, d e is too small (just 22) and hence the predic-tion of relative contrast shows more bias for this set. One interesting outcome of these experiments is that our analysis provides an alternative way of finding in-trinsic dimensionality of the data which can be further used by various nearest neighbor search methods. The traditional method of finding intrinsic dimensionality using data variance suffers from the assumption of lin-earity of the low-dimensional space and the arbitrary choice of threshold on variance. On the other hand, nonlinear methods are computationally prohibitive for large datasets. In the relative contrast based method, for a given dataset, one can sweep over different values of d  X  where 0 &lt; d  X  &lt; d , and find the one which gives the least discrepancy between the predicted and empirical contrasts averaged over different p. For large datasets, one can use a smaller sample and a few queries to es-timate the empirical contrast. Using this procedure, the intrinsic dimensionality for the four datasets turns out to be: sift -41, gist -75, color -41, image -70. For the two sparse datasets (color and image), it indi-cates the dimensionality of equivalent low-dimensional dense vector space. It is interesting to note that in-trinsic dimensionality is not equal to d s for the two sparse datasets as discussed before. For image dataset, it is much smaller than d s indicating high correlations in non-zero entries of the data vectors. 3.1. Relative Contrast and LSH LSH are commonly used in many practical large-scale search systems due to their efficiency and ability to deal with high-dimensional data. In each hash table, every data point x is converted into codes by using a series of k hash functions h j ( x ) , j = 1 , , k . Each hash function is designed to satisfy the locality con-dition i.e., neighboring points have the same hashed value with high probability and vice-a-versa. A com-monly used hash function in LSH is h ( x ) =  X  w T x + b t where w is a vector with entries sampled from a p -stable distribution, and b is uniformly distributed as U [0 , t ] ( Datar et al. , 2004 ). We now provide the fol-lowing theorems to show how relative contrast ( C r ) affects the complexity of LSH.
 Theorem 3.1 LSH can find the exact nearest neigh-bor with probability 1  X   X  by returning O (log 1  X  n g ( C candidate points, where g ( C r ) is a function monoton-ically decreasing with C r .
 Proof: Please see the supplementary material. Corollary 3.2 LSH can find the exact nearest neigh-bor with a probability at least 1  X   X  with a time complexity O ( d log 1  X  n g ( C r ) log n ) and space complexity needed, is l = O (log 1  X  n g ( C r ) ) .
 Proof: Please see the supplementary material. The above theorems imply that when C r is larger, g ( C r ) will be smaller, thus, among the datasets of same size, to get the same recall of the true nearest neighbor, the dataset with higher relative contrast C r will have better time and space complexity, return less number of candidates for reranking, and need fewer number of hash tables, or in one word, be easier for approximate NN search with LSH.
 Note that our theory shares some similarity to the re-sults in ( Gionis et al. , 1999 ) about the complexity of LSH, however, it has several unique properties. First, our theory is about finding exact NN (with a proba-bility guarantee), not finding approximate NN (with a probability guarantee) like in previous works. More-over, we have related the complexity of LSH to relative contrast C r , enabling us to analyze how the complex-ity of LSH is affected by various data properties of the dataset simultaneously. To the best of our knowledge, our work is the first one on this important topic. To verify the effect of relative contrast on LSH, we conducted experiments on three real-world datasets. In Fig. 3 , performance of LSH for L 1 distance (i.e., p = 1) is given on three datasets: sift, gist and color. From Table 2 , for p = 1, C r for the three datasets is in this order: sift(4.78) &gt; color(3.19) &gt; gist (1.83). From Fig. 3 (a), we can see that for several settings of number of bits and number of tables, the number of re-turned points needed to get the same nearest neighbor recall for the three sets follows sift &lt; color &lt; gist, as predicted by Theorem 3.1 . Moreover, from Fig. 3 (b), the number of hash tables needed to get the same recall follows sift &lt; color &lt; gist, as predicted by Corollary 3.2 . We have tried experiments with k = 12 , 16 ..., 40 and observe the same trend, but only show results for k = 32 due to space limit.
 The above experiments used the typical framework of hash table lookup. Another popular way to retrieve neighbors in code space is via hamming ranking. When using a k -bit code, points that are within hamming distance r to the query are returned as candidates. In Figure 4 , we show the recall of nearest neighbor for two different values of k . Similar to the case of hash ta-ble lookup experiments, the number of returned points needed to get the same recall follows sift &lt; color &lt; gist. This follows the same order as suggested by rel-ative contrast. The interesting thing is that color has much higher dimensionality than gist, but its sparsity helps in achieving better relative contrast and hence better search performance. 3.2. Relative Contrast and PCA hashing Hashing methods that use PCA as a heuristics often achieve quite good performance in practice ( Weiss et al. , 2008 ; Gong &amp; Lazebnik , 2011 ). In this section, we show PCA hashing is actually seeking pro-jections that maximize relative contrast in each pro-jection with L 2 distance under some assumptions. A commonly used hash function in PCA-based hashing methods is where w is heuristically picked as a PCA direction, and b is a threshold which is usually chosen as E [ w T x ]. Assuming the data to be zero-centered, i.e., E [ x ] = 0, leads to b = 0. Since q and x are assumed to be i.i.d samples from some unknown p ( x ), E [ q ] = 0 as well. For a query q , denote x q,NN as q X  X  NN in the database. Denote S NN = E q [( q  X  x q,NN )( q  X  x q,NN ) T ], and  X 
X = (1 /n ) P i x i x T i . The following theorem shows that maximizing relative contrast will lead us to PCA hashing under some assumptions.
 Theorem 3.3 For linear hashing as ( 9 ), to find pro-jection vector w to maximize relative contrast, we should find  X  w = arg max sume that the nearest neighbors are isotropic, i.e., S NN =  X I , we will get  X  w = arg max w w T  X  X w , i.e., PCA hashing.
 Proof: Please see the supplementary material. If we do not assume nearest neighbors to be isotropic, we can empirically compute S NN from a few samples. And then we can find projection vectors w in ( 9 ) as  X  w = arg max vectors of  X  X and S NN . This will often obtain better results than PCA hashing. We provide one example in Figure 5 , in which,  X  X RC X  represents the method we described as above, and  X  X CA X ,  X  X SH X ,  X  X H X  are PCA hashing, Locality Sensitive Hashing, and Spec-tral Hashing ( Weiss et al. , 2008 ) respectively. 4.1. Previous Works Some of the influential works on analyzing NN search difficulty are ( Beyer et al. , 1999 ) and ( Francois et al. , 2007 ), whose main results are shown in Theorem 4.1 and 4.2 .
 Theorem 4.1 ( Beyer et al. , 1999 ) Denote D q max = max lim lim Theorem 4.2 ( Francois et al. , 2007 ) If every di-mension of the data is i.i.d., when d  X   X  ,  X  and j = E ( || x j i  X  q j || p p ) are the variance and mean on each dimension. 4.2. Relations Between Our Analysis and Relation to Beyer X  X  Work Note that if the distance function D ( x i , q ) in Beyer X  X  (  X   X  ) 2 . When  X   X   X  0( d  X   X  ), Beyer X  X  work shows that D q max  X  D q min , and our theory shows C r  X  1, or equivalently D mean  X  D min . So we will get the same conclusion: when d  X  X  X  , NN search is not very  X  X eaningful X  , because we can not differentiate the nearest neighbor from other points. However, Beyer X  X  theory works for the worst case (i.e., compare NN point to the worst point with maximum distance), while ours works for the average case.
 Relation to Francois X  X  Work In Theorem 4.2 , a measurement called  X  X elative vari-ance X , defined as Beyer X  X  work. If become meaningless. The following theory reveals the relationship between relative variance and relative con-trast.
 Theorem 4.3 In ( 4 ), if  X   X   X  0 (e.g., d  X  X  X  ), C Proof: Please see the supplementary material. From Theorem 4.3 , we see when  X   X   X  0 (e.g., d  X   X  ), the relative contrast monotonically depends on orem 4.2 .
 To summarize, most of the known analysis can be de-rived as special asymptotic cases (when  X   X   X  0, e.g., d  X   X  ) of the proposed measure with the focus on only one or two data properties. In this work, we introduced a new measure called rela-tive contrast to describe the difficulty of nearest neigh-bor search in a data set. The proposed measure can be used to evaluate the influence of several crucial data characteristics such as dimensionality, sparsity, and database size simultaneously in arbitrary normed metric spaces. Furthermore, we show how relative con-trast determines the difficulty of ANN search with LSH and provides guidance for better parameter settings. In the future, we would like to relax the independence assumption used in the theory of relative contrast, and also study how relative contrast affects the complex-ity of other approximate NN search methods besides LSH. Moreover, we will explore a better but harder Aggarwal, C., Hinneburg, A., and Keim, D. On the surprising behavior of distance metrics in high di-mensional space. ICDT , 2001.
 Beyer, K., Goldstein, J., Ramakrishnan, R., and Shaft,
U. When is nearest neighbor meaningful? ICDT , 1999.
 Datar, M., Immorlica, N., Indyk, P., and Mirrokni,
V.S. Locality-sensitive hashing scheme based on p-stable distributions. In SOGC , 2004.
 Francois, D., Wertz, V., and Verleysen, M. The con-centration of fractional distances. IEEE Transac-tions on Knowledge and Data Engineering , 2007. Gionis, A., Indyk, P., and Motwani, R. Similarity search in high dimensions via hashing. In VLDB , 1999.
 Gong, Y. and Lazebnik, S. Iterative quantization: A procrustean approach to learning binary codes. In CVPR , 2011.
 He, J., et. al. Supplementary material for  X  X n the difficulty of nearest neighbor search X , 2012. www.ee.columbia.edu/ ~ jh2700/sup_DNNS.pdf .
 Indyk, P. and Motwani, R. Approximate nearest neighbors: towards removing the curse of dimen-sionality. In STOC , 1998.
 Liu, T., Moore, A.W., Gray, A., and Yang, K. An in-vestigation of practical approximate nearest neigh-bor algorithms. NIPS , 2004.
 Weiss, Y., Torralba, A., and Fergus, R. Spectral hash-
