 This paper reports on three ethnographic studies of how people coordinate their activities in various work settings. The findings reported here are a derived set of relationships reflecting the nature of involvement of people in their activities. These findings were then tested by six anal ysts, who were conducting field studies of patterns of complex business activities. They used the derived relationships in the analysis of their data and in the representation of activity patterns. These usage cases revealed confusion between involvement relationships and job roles. Finally, several implications of these studies for designing an activity management prototype are presented. H.1.2 [Information systems] User/Machine Systems  X  Human Factors; H.4.1 [Office Automati on] time management, workflow management; H.5.2 [User Interf aces] Evaluation/Methodology. Design, Experimentati on, Human Factors. Ethnographic study, user evaluation, to-do lists, task management, activity management, design, prototyping Managing and executing activities is not only concerned with time, but also with construc ting and managing context by collecting the necessary resources to perform these activities (e.g., information, people, rooms, equipment), delegation, communicating results, and even creating processes (that could potentially be reused by others). There are elements of work that may occur to set things up before the actual activity itself can be carried out, and there are elements of work that may occur after the activity might be considered  X  X ompleted X . Activities can be ad-hoc or formally specified. They may be defined in a temporally precise manner (e.g., booking specific time slots to perform them, tracking time spent on them explicitly  X  for instance for billing purposes) or they may unfold in  X  X uzzy time X  (e.g., do activity A sometime later today, set aside about an hour next week, the activity is about half done). People frequently think of their work lives and tim e as organized into blocks of activities; they not only carry out activities, but they also manage them. They plan, prioritize, schedule, interrupt, resume, delegate, report on, etc. Our studies have indicated that wh en we reflect about what we do and how we spend our time we natu rally think about it in terms of activities: I have to write an article, to answer an email, or to prepare for a meeting. We then tend to think about time and scheduling the activity. The actual documents, email messages, artifacts, and the people that are involved in performing the activity are supporting resources to carry out the activity, and these resources are organized by the activity itself. We could represent the activity as a folder containing the relevant documents in a file system, or as an email collection/mail box, or as entries in the calendar, or as a group in our address book; but each of these representations would cover only one aspect of the nature of the activity, and while these work well in some ways they are awkward to use in others. These representations typically collect resources together within one type of resource (e.g., email messages, people, or documents) but do not span applications or resource types easily. We argue that an explicit representation of activities will not only better match the way people conceptualize and (want to) organize their work but will simplify activity and time management and enable the context of an activity to be more fully represented. This paper presents a set of studies and analyses as a part of research program at IBM Research on Unified Activity Management . We have conducted severa l ethnographic studies in UAM on how people carry out business activities in various business contexts. This paper fo cuses on the detailed collaborative activity management practices revealed in the studies. We first summarize the overall method used in the initial exploratory studies and some results as they specifically relate to collaboration and coordination. We then discuss some key findings about the different type s of involvement relationships that people have in their activities. We then discuss a study of how several analysts in the UAM project were able to use the typol ogy of involvement relationships and how expressive and understa ndable they were. Finally, we articulate the design implications for creating an activity management support system. The studies presented were conducted in the context of the UAM project. UAM is beyond the scope of this paper, but a short description of it will motivate the studies. The goal of UAM is to create a platform for activity management on which to integrate different collaboration tools around the concept of activity. The basic hypothesis of UAM is that an explicit representation of activities as shared resources provides the basis for advances in supporting personal, group, and organizational productivity. The goal is to support the informal collaborative activities of people and to integrate these into more formal business processes. The foundation of UAM is a representation of the general semantics of activity. Unified Activity is the ontology (schema) for this representation. In UAM an activity is defined by a set of coherent actions , which are carried out by various actors . An activity involves actors, who use resources (artifacts and tools) and produce results, within temporal bounds. Activities are related to other activities, such as by decomposition into sub-activities. Thus, the underlying representati on is a network relationship between actors, activities, resources, and events. This paper is concerned with one part of the Unified Activity ontology: the relationship between activities and actors. Actions are executed by actors, such as people, computational processes, organizations, and roles. Our main focus here is of course people. The most general actor-activity relationship is called involvement . The goal of the studies in this paper is to better understand the types and nature of involvements in the practices of coordinating work. We also discuss the notion of people X  X  roles in activities. Roles, we have found, are often confused with involvements; but for this paper, think of roles as job roles that span across many activities. This will be discussed later on. Various user-centered design me thodologies in human-computer interaction provide techniques for studying artifacts used to execute an activity (e.g. [29]). Various frameworks provided by the behavioral and social scien ces, such as distributed cognition (e.g. [17]), activity theory (e.g. [10,19]), or situated action (e.g. [31]), provide perspectives a nd methods to study the context within with activities are carried out. And there are methodologies for designing for context (e.g. [4]). These frameworks (and others, e.g. [6]) treat activity as an object of analysis, where the broader activity context is often key. Our concern here is to focus on activity management, where the activity itself is the target domai n for technology support. There is a renewed interest in studying how people manage activities (e.g. [13]). We need to understand the generic properties of activity management to provide the basi s for a malleable platform to support people to flexibly carrying out their activities. One approach to understanding activ ity management is to better understand existing tool use and to test new design concepts for activity management tools. Studi es of existing tools provide valuable insights into some key resources that an activity relies upon, although the implications for cross-tool design are harder to infer. Prior work has shown [23,32] that managing activities through email has significant limitations and can overload the user. More recent work has explored introducing some structured elements into email [2,9,15]. Extending beyond email, Kaptelinin [18] instrumented the operating system to collect and organize heterogeneous resources from different applications around activity  X  X hemes. X  The H AYSTACK system [30] focuses on the integration of email, IM, cale ndar data, and web information based on an underlying semantic representation. Much of this prior work is aimed at facilitating personal activity management with little focus on how to share or collaborate within the context of activity management. But there is new development in supporting shared workspaces (e.g. the G system at www.groove.net). While these systems make efforts to directly address shared access to resources and objects, they tend to be more difficult to use for simple, light-weight activities; and it is unclear how they might inte grate both ad-hoc activity with more formal business processes or workflows. Unfortunately, formal workflow systems are often less flexible than users would like and frequently assume fixe d roles for users and a fixed pattern of actions (e.g. T HE C OORDINATOR [26]). These tend to exist as independent systems having little integration with personal tools. The Task Manager sy stem [22] is the closest to the UAM vision in its provision of shared representations of tasks that are malleable and that relate people and resources across existing systems. Finally, there is a significant body of literature on providing awareness cues, of which several studies examined awareness in the context of performing activities (e.g. [7,14,16]). These studies indicate that awareness is a key contributor for facilitating group performance. In our initial three studies of activity management we asked 27 people to show us how they tr acked activities over time. These were 60-90 minute semi-structured, in-situ interviews. We primarily focused on work-related activities though some personal activities were mentioned to the extent that they needed to take place during work hours (e.g., coordination of child care, vacations, doctors appointments). The data consisted of participant profiles, interview notes, audio recordings, transcriptions, photographs of office settings and artifacts, samples of artifacts, descriptive examples and anecdotes. The studies included 12 different el ectronic tools, 21 different physically-based tools, 12 di fferent reminder methods, and countless personalized  X  X ncoding schemes X  (abbreviations or shorthand notations). We did not as k our participants to show us any particular tools, nor did we ask to see  X  X o-do lists X  tools explicitly, and thus we discovered a broad variety of tricks, tools, and strategies and a highly va riable understanding of what constituted a  X  X ctivity X . Nevert heless there were points of consistency described below. Our initial premise was that activity management would reflect time management practices, both fo rmal and informal and would include both informally defined activities (e.g.,  X  X rite trip report X ) and formally structured activities requiring well defined process steps (e.g.,  X  X rrange interview schedule and hiring meeting for Joan X   X  with all of its sub-steps listed in a scheduled sequence). While we were initially interested in the role that email and calendars played in this, we did not restrict our study or interviews to these. As a cons equence, our studies included not only these tools but also touc hed on dozens of other tools, software systems, and paper-based methods used to coordinate work. We deliberately factored in a number of criteria that we thought might have a significant influence on work practice and selected participants with job roles that would vary dramatically on these dimensions. Some of these criteria were whether work is largely self-determined or assigned by others; extent of work coordination/hand-off with othe rs (e.g., high coordination/hand off required by shift workers, medical professionals versus software engineer where coordination is often handled by software version control system or real estate agent who largely works independently); type of office  X  home office, shared office, open or closed office spaces; extent of predictable routines or schedules versus unpredictable schedule (e.g., programmers who have fairly predictable structure to their day and what code they need to write or debug versus a director-level manager of 100+ people who X  X  daily schedule vari es widely); and managerial/ supervisory responsibilities versus an independent contributor. Covering these and other criteria, the participants in the studies were deliberately taken from a br oad range of occupations with significantly different work role s: administrative assistants (typically one assistant to many managers), executive assistants (many assistants to one executive), executives, managers, software engineers, lawyers, real estate professionals, health care workers, university professors , business consultants, and researcher staff. Some participants worked from home offices, some from shared office space, some from enclosed work offices, some had several offices spaces or combinations of the above. All used mixtures of electronic t ools (e.g., electronic to do lists, email, online calendars and/or P DAs) and paper based or physical tools (e.g., agendas, post-it notes, white boards). The data were analyzed along many dimensions using multiple coders/analysts to ensure so me level of consistency and consensus. The richness of the da ta allowed us to make many analytic passes to look at differe nt aspects of the data  X  all analyses had between 2 and 5 simultaneous analysts. For example, we categorized the types of tasks that seemed to be involved with time manageme nt: planning (for and around) events, aggregating information, negotiating (time and resources), sharing information, coordina ting, reminding or bringing to attention, clustering informa tion (by time, topic, etc.), scanning/skimming/ browsing, s earching for particular items (events, or free time), journaling, delegating and tracking, etc. We looked at the how well tools were integrated and how this was achieved, how coordination was accomplished, where breakdowns occurred, long range vers us short term task planning, etc. This paper focuses on our anal ysis of roles and relationships in activities. To illustrate the variety of coordinated activities that even a single individual deals with, we describe one of our study participants here (names are changed for anony mity). Based on our analysis of all 27 subjects and across a broad range of professions, the kinds of coordination and activities in this example typify the complexity and inter-dependencies we observed. Laura is an administrative assistan t (AA) to a senior management director for a department a bout 120 people and has been doing this job for more than 10 years. She is viewed as being highly effective and efficient. Her prim ary role is to support this one individual (Andrew). She works in an office directly outside Andrew X  X  (Figure 1), answers most phone calls to him, books meetings for him or with him, manages his cale ndar and schedule on his behalf, and filters/categorizes some portion of his (non-confidential) email. When Laura is not at her desk (lunch breaks, illness, vacation, etc.) she arra nges for another AA to cover her responsibility). Laura uses electronic email and calendar tools but also has a number of paper-based tools and systems (such as phone logs and her notebook) that she relies upon (see Figure 1). Laura keeps a detailed notebook of all requests to her for work (Figure 2). This is heavily annotat ed and she has carefully briefed the other AA X  X  on how her system works so that they can easily cover for her when needed and continue to use her system. This note book is one of Laura X  X  key mechanisms for coordinating her activities and spans many applications, activity types, and time frames. Work requests come in by email to her (or sometimes to her boss and since she screens his email she may take items on), by phone, or by drop-ins (people coming by her office). Routinely requests come in from automated processes, for instance indicating that Andrew needs to authorize or review something (an expense account, purchase orde r, performance bonuses, etc.). Laura X  X  activity list is largely determined by other people and in particular by her boss (many initiators or requestors). Many of her activities are multi-part and involve awaiting responses from other people or from automated systems (e.g., submitting expense forms and receipts, booking travel , reserving meeting rooms and catering). She must be able to recall the status of incomplete activities or when something is approaching a deadline or is overdue  X  particularly if the activity is awaiting someone else X  X  input or effort and is thus not directly under her control. Thus Laura X  X  notebook is a sophisticated  X  X o-do list X  drawn from many sources, using a lot of encodings and annotations and is highly Figure 1. Laura X  X  work place. Andrew X  X  office door at top center, entrance to Laura X  X  office and hence to Andrew X  X  from hallway is upper right corner. From upper left corner: 1 mounted inbox for boss next to his office door (Fig. 2). and online calendar for boss and Laura. 3 company holiday and pay calendar. 4 phone log for calls. 5 Laura X  X  notebook (Fig. 3). 6 daily work in progress &amp; meetings information. Figure 2. Larger view of area 1 from Fig. 1. Andrew X  X  office door is at left. 1 wall mounted inbox has folders for items to be signed and for updates to daily calendar. Cork board above inbox used for important phone messages. 2 phone log message for Andrew is posted to return call. 3 seminar notices, calendar events. Figure 2. Laura X  X  notebook. (This image is deliberately reduced in resolution to protect information confidentiality.) Red stick-on tabs (right) mark pages with incomplete items that she needs to look up agai n. Yellow highlights indicate completion of items (sprinkled over page  X  may not show clearly on non-color image). Book is annotated with post-its or phone logs (top left). As more information comes in, it is written into margins. Red pen us ed to indicate time critical deadlines/information (sprinkled across page  X  may not show clearly on non-color image). Pink highlighter is used to maintain a log of system proble ms on her computer  X  one item at bottom of page. structured (albeit on paper). A dditionally, Laura keeps Andrew X  X  daily schedule for him and prints up to 7 updated copies for him per day. She has access to all of Andrew X  X  non-confidential email and calendar entries online and must coordinate with him on these, particularly if there are last-minute changes (this is in addition to her own personal calendar and email). From this illustrative example, we can see that activities are initiated by a number of different sources (both people and processes) and through different mechanisms (phone, email, in-person, or via an computational computer process). While Laura is generally the recipient of these requests and is the primary  X  X articipant X  in carrying out the activity, at times others may help out, may temporarily take over activities, or may become permanently responsible for a pa rticular activity. These were patterns typical across participants, independent of their occupations and the nature of their work. Ellen is a software engineer working on a multi-person project. There are 8-10 team members at any given time who are geographically dispersed with 4 pe ople working at the same site as Ellen. She supervises a nother software programmer (who shares her office) and must coordi nate daily work with this person and must coordinate more gene rally with the other 8 team members. The project source code is maintained and formally coordinated in a standard vers ion control system where people check out, work on, and then check back in code. Bugs are reported in a bug tracking system that assigns work to individual team members based on the class and type of bug. Occasionally informal coordination goes on out side of the version control system to plan for and partition up work, determine timelines for how long various programming tasks will take, who will do them, and the sequence these tasks need to happen in. Bugs can be re-assigned to others, delegated, or voluntarily taken on outside of the formal system-bas ed bug assignments. Ellen X  X  day tends to follow a consistent work pattern; and because of this predictable pattern, she feels the majority of her work is easy to keep track of. Every morning she checks both her email and the bug reporting system for new items or updates  X  these are her two primary sources of to-do items and act as de-facto to-do lists. There is no integration be tween the email system, the bug system, and the source code vers ion control system. Email often has a reference number so that Ellen can look up a bug description manually. Ellen tends to keep her email inbox cleared out (retaining a minimal number of messages) so that new items are immediately apparent. Alt hough software engineering on a particular project is her main focus, Ellen does have other non-programming tasks (e.g., paperwor k, secondary projects, or reports with deadlines) that she tr acks with a separate online to-do list. She refers to this list severa l times a week (rather than daily). For instance, Ellen was in the process of acquiring a new immigration work permit (requiri ng many steps and deadlines). This complex task was detailed on Ellen X  X  online to-do list (include status information such as  X  X ailed in X ,  X  X waiting reply X , etc. on particular steps). Ellen tracks some personal items on this list as well (e.g., make dentist a ppointment). Ellen often annotates her to-do list with status updates or comments. Items are deleted once completed to minimize the size of the to-do list. Again this online to-do list is not integrated with any of the other systems. The tasks assigned to Ellen are generated by: (1) other people (QA testers, other team members), (2) automated test procedures that generate bugs reports and assignments based on bug type and class, and (3) Ellen herself. She sometimes creates her own bug reports about problems she has found and needs to fix later, or she sends herself email outlining a task she wants to be reminded of. In this way Ellen maintains a fairly complete list of tasks within the two main systems (bug system and email system) that she uses system) or jots down a quick not e on a post-it and sticks it on her monitor. The post-it notes were typically phone messages and phone numbers that she needed to call back or a URL that she needed within a short time frame. Awareness of Ellen X  X  tasks across the team (and vise-versa) is largely achieved through use of the bug tracking system that everyone has access to and through use of the version control system where others can see what code Ellen has checked out and when. The one exception is the coordination Ellen has with the programmer she supervises (who shar es an office with Ellen). In this case, the planned work for the day is discussed, a shared office whiteboard is often used, and informal coordination augments the formal systems. Finally, in cases where Ellen needs to be aware of someone else X  X  work outside of the programming tasks, she adds an item to her online to-do list to remind her to check in periodically with that other person to monitor progress (e.g., working on a jointly-authored report). In this paper, we focus on findings as they relate to collaboration and coordination across people and time. We first discuss actors and roles and we then examine th e nature of involvement various activities entail. It is actually difficult to find activities which do not have any collaborative element or that do not require some level of coordination with another pers on. Even seemingly simple activities like writing a (single aut hored) paper, fixing a software bug, or virus checking your own computer, that do not seem inherently collaborative, often turned out to be. Documents are produced with some expectation of readership and some notion of a completion date that others anticipate. Fixing software bugs typically requires an awareness of who else is working on the code, coordination of versions and submission of fixes, and expectation of someone else verifying or testing it when completed. Virus checking in today X  X  corporate climate often implies reporting or notification of problems to someone else, and coordinating clean-up efforts if infected. Even reporting a  X  X lean system X  when there is no problem is being done routinely as part of corporate policies. While the actual execution of an activity may be done by a single person, collecting resources to perform it, deciding when it is due, determining what else it impacts, and tracking its progress or status are subtle yet often collaborative components. The diverse nature of our subject pool enabled us to collect data from people in vastly different job roles with dramatically different collaboration and coor dination requirements. This revealed distinct types of i nvolvement relationships between activities and people. From the Admin Assistant and Software Engineering examples discussed above, we see that a single person manages many different ac tivities and that the nature of his/her involvement varies. We first discuss our ge neral observations about actors . Then we identify and explain four different kinds of involvements that we found between people and their activities. Actors are entities that can execu te actions, such as people, computational processes, organizations, etc. They can initiate activities and/or be recipients of the results of activities. Actors can also be more passively invol ved in activities, for instance, monitoring an activity but taking no active role in executing it or contributing content to it. An activity may have a single actor or there may be multiple actors who are involved in different ways. In the simplest observational case, an actor is the individual (s) associated with a particular activity. For instance, Laura updates and prints out the latest version of Andrew X  X  daily schedule. In this case, Laura is an actor (s he updates and maintains Andrew X  X  daily schedule, she tracks which is the latest version, and she prints it out). Andrew is also an actor in this instance since he receives the results produced by Laura (he may also be an actor in a different capacity having initiated the request for updated daily schedules). Ellen fixes a bug assi gned to her or writes and checks in some new code. Thus, one class of actor is those who are named or known individuals. A second class of actor is that of a computational process . For instance, Andrew receives an email requesting he verify that his computer has all the latest secur ity and virus software and, once checked, indicates corporate compliance through an online web site. The email is sent out (i.e ., the activity is initiated) every month by a computational pro cess. A second computational process (via a web site) receives the results of the activity. Andrew (or his delegate) executes the activity. Ellen receives a bug report generated automatically by the test system (the test system runs a collection of standa rd test cases overnight against the code and automatically reports any tests that failed). Computational processes are key actors in these activities. We also observed a third class of actor: people  X  X nvolved X  in activities by virtue of being potential actors . This case arises in when there are a number of people who could potentially be called upon to execute a particular activity but the particular person has not yet been identif ied and assigned. In some instances, potential actors may rotate responsibility for a particular activity, for example, a group of similarly skilled technical support staff take on new customer requests based on availability. Nursing staff take on patient care based on staffing availability and changes in work shifts. A programmer takes on a bug fix when s/he happens to be working on the code where that bug was reported. Thus while the activity remains consistently defined and the type of actor is known (i.e., the skill set or job role can be identified a priori), the actual actors are drawn from a pool of potential actors with the understanding that anyone in the pool may take on waiting activities. Potential actors are therefore most frequently represented by a job role that acts as placeholder for an individual. Most activities start with an identif ied need  X  even those that are routinely scheduled on a recurring cycle have an implied need (e.g., clean out email inbox every Friday, every day check up on items in green  X  X ickler X  folder, every morning look at new bugs assigned to me in bug tracking system, on Sunday night check items scheduled for Monday). An actor identifies this need (perhaps implicitly) and initiates the activity. Certain job roles by their very nature favor an activity involvement type that is  X  X nitiation dominant X . An administrative assistant supports one or more managers who request activities of her much of the time. A consultant X  X  client initiates activ ities or contract deliverables for the consultant to subsequently execute and act upon. Some requests for particular activities mi ght not be people (or job roles) at all but rather are processes that initiate an activity based on legal requirements or formalized business processes (e.g., a legal requirement is generated to summarize all phone calls to a particular person, a business requirement requests employees backup their data once per week, a manager approval is required for an employee expense account). The actor requesting the activity may or may not have accountability for the activity result (this is especially true if the request arose from an computational process). Akin to formalized business processes, automated triggers or reminders can request or initiate activities. For instance, if expenditures exceed a certain limit on a purchase order a notification may be sent indicating that it needs to be routed to a different person for authorization. An automated reminder may be set up annually to suggest sending a birthday card out on a particular date. One could argue that the person who created these computational, business, and legal procedures is actually requesting them, but usually these people are unknown or invisible to the individual executing the activity. What seems more important is that there is a request and that the involvement notion is flexible enough to encompass non-human activity initiation and that there is typically some form of accountability to the actor initiating the activity. Accountability may be formal (e.g., complete the [Jones] report for Bob by end of month, I X  X  on call [medical] to cover for Susan this weekend, certify my computer virus checking done and confirm it with my boss) or informal (e.g., write CHI paper, let other admins know my availability over next month for lobby coverage, let my team know which conference hotel I X  X  staying in). Formal accountability occurs when the person executing the activity is aware of another X  X  e xpectation of completion/progress, a time frame for completion (even if approximate), and that there are consequences for failure (though the precise consequences may or may not be known). Informal accountability often occurs in informal teamwork situations when there may be loose dependencies between the person X  s activities and someone else X  X  activities or when there is general rather than specific benefit in accomplishing the activity (e.g., publishing a paper, posting information to a wiki, informing others that you will be away next week). Activities may span minutes or months. Complex activities may require careful planning, sub-divi sion, and scheduling. We think of activities as being broken down into sub-activities (where the simplest activities may only need a single action to be taken, such as  X  X hone Bill X ). For instance, an executive assistant is asked to schedule a conference call, book the conferencing service, send out reminders the day of the call to all attendees, and then remind the executive moments before the call that it is about to happen. While the executive initiates the activity (i.e., requests his/her assistant carry it out) and ultimately is the participant in the call itself, the assistant executes all the sub-activities required up to the moment of the call itself. However, ownership can change over time from one person to another, multiple people can simultaneously share ownership of an activity (e.g., several people are responsible for writing a report or diagnosing bugs in a particular block of code), or an activity can have no ownership (meaning it is  X  X nassigned X ). Thus, a particular actor executing an activity has moment to moment ow nership of that activity and is typically accountable to the actor who requested it. Upon completion, most activities have an intended recipient or recipients (an actor expecting to receive the results or outcome of the activity). For activities with many sub-activities, there may be intermediary results to be received (often the case for larger collaborative activities that have many dependencies between parts). The actor in this instance clearly does not have to be the actor who requested the activity, nor the actor executing the activity (e.g., manager requests an employee fix a software problem for their customers, exec requests her assistant send copies of the budget forecast to all her direct reports). For virtually every activity we looked at in our studies, an actor was involved in activities in one of the three manners described above. However, we also uncove red cases where people were number of scenarios where people wanted to be informed about particular activities even though they played no direct role. In this situation the obligation tends to be one of interest alone, where the actor is solely an observer . (It might be argued that auditing is an extreme case of observing, however this assumes that the auditing is not part of a formal process where it would almost certainly be an activity in its own right that results in reporting outcomes). Observing activities extends activity awareness and informal collaboration to people outside the immediate activity execution (for example, requests to be cc X  X d on certain topics, reading certain news groups, etc.). In our illustrative example of the administrative assistance (and typical of many of the assistants in our studies), the admin was fre quently asked by others where the managing director she supporte d was and when he might be back in his office. In order for her to successfully respond these frequent requests, she observed his minute-to-minute schedule and activities to improve her ove rall awareness (even though she did not participate in these activities herself). In our example of software engineering, Ellen ofte n observed activities by virtue of watching which source code blocks were checked out by which people and when using the softwa re version control system. We wanted to test the four i nvolvement types that we derived from the ethnographic studies. Basically, we wanted to know whether they were understanda ble and expressive of the relationships people wanted to describe in different activity situations. We also wished to understand more about how actors and roles were applied. To do th is, we took advantage of another subproject of the UAM project. That other subproject was conducting field studies to uncover th e work practices of different companies in two domains. The first domain was responding to RFPs (requests for proposals), and five detailed interviews were conducted. The second domain was financial compliance accounting practices, where ten interviews were conducted. We were interested in finding out if the involvement types we identified were useful, whether they uncovered new types of involvements, whether these data converged or diverged across analysts and domains, and whethe r the case study data supported our earlier ethnographic findings. We also wished to see what types of actors and roles were identified, since our ethnographic studies had focused more on id entifying types of involvement rather than the variety of roles. Finally, we wanted to determine whether or not re-use of data occurred when recurring patterns emerged within certain types of repetitive activities. We deployed a prototype UAM client that analysts could use to create activity descriptions, including the types of involvements and people and/or job roles. Ac tivities could be represented by hierarchic lists of activities. Each activity in the hierarchy could have a text description and a coll ection of resources that could be dragged and dropped in (e.g., calendar deadlines, meetings, appointments, email me ssages and threads, saved chat or IM sessions, documents, web pages, we b-based tools), as well as a list of the actors involved. Also, they could create and use generic roles as placeholders for late r assignment to individuals. We included a set of involvement types to  X  X eed X  the system based on the ethnographic studies (i.e., initiating, executing, receiving, observing). However, we also allowed the analysts to create additional new involvement types if needed. Based on the particulars of each case study, analysts were expected to derive and assign actors to selected rela tionships (e.g., purchasing staff member, sales rep, computationa l process, Bob Smith, etc.). Analysts could assign an individua l X  X  name, multiple names, a job role(s) or both a role and a name to any given activity. In the latter case, a job role could first be created and related to different activities, and later a person could be later assigned to that job role (as would be done once a particular actor was identified out of a pool of potential actors). Thus, the job roles functioned as variables or placeholders for specific actors. Six analysts collected case study data from detailed field interviews. The case studies were focused on organizing and carrying out specific activities rather than overall organization practice and ranged from the procedures used to create bids for jobs (responses to  X  X equests for proposals X  or RFPs) to financial compliance and auditing procedures used to ensure regulatory compliance with new (US) governme nt legislation. We then had these six analysts represent the activity organization online, explicitly specifying the relationships and actors involved at each of the sub-activities. Table 1 repor ts all the relationships and all the roles created by these six analysts in the course of a month. (There was also a lengthy list of people X  X  names, omitted both for confidentiality reasons.) From the table, it is apparent th at there was significant confusion and redundancy. This confusion was not a result of the analysts X  inexperience in the domains of study  X  analysts were highly knowledgeable or expert in the subject domains, and the confusion occurred consistently across many analysts. While actors and roles were generally us ed as expected (indicating an actor to carry out the activity step either by a person, a job role, or agent/process), there were several that seemed odd and may have been used more as general category labels rather than roles per se (e.g., business, internal, meeting, purchase). The use of involvement relationships broke down badly: many relationships should have been job roles (e.g., ApproverLevel1, DevLead, ProjectMgr). Others were variant spellings (e.g., implementer vs. implementor) or were very closel y related concepts or synonyms (e.g., Developer vs. Coder, info rmed vs. observer). Not only was there conceptual confusion about what a relationship should be (and how to determine the type of a relationship), but analysts also complained that they often did not want to have to specify the precise nature of this relationship every time. They just wanted to link a person/role to an activity without specifying any interpretation on the nature of the involvement (i.e. they didn X  X  care if the person was a recipient or the initiator or merely an interested observer). Often they simply thought of that person or role as a generic assignment (hence the creation of such relationships as doer, assignee, associate, involved). In effect analysts wanted a simple conceptual default of leaving the involvement relationships unspecified. It was often difficult for analysts to determine the nature of the relationship between particular activity and the actor in order to categorize it. If the activity, as the analyst decided to represent it, spanned a number of implied sub-activities which were not explicitly articulated many actors (and many roles) might be involved (e.g.,  X  X repare bid pr esentation X  needed input from  X  X emediate (investigate) [a problem in accounting] X  typically involved internal auditing staff, purchasing agents, management approvers, the purchase order origin ator, etc.). For analysts who decided to specify activities as th ese higher level steps, at best they could assign a series of j ob roles indicating who would be involved over time but even this might need later additions or modifications as the activity evol ved. For analysts who chose to specify activities as a set of highly structured and very precise steps, assigning relationships and actors to each step seemed to work far better, the categories proposed made sense, and there was less confusion. In this latte r case, the relationships were applied as we had originally anticipated. Re-examining our ethnographic data revealed that many of the instances described in the interviews and reflected in the artifacts collected were highly detailed activity lists or represented highly structured activities. While there were examples of high level activities that were not broken down into sub-activities, these occurred less often in our subject group. This trend occurred despite having participants who were in job roles where work is fairly unstructured (e.g., managers, lab directors). For job roles where work was more structured (e.g., administrative assistants, programmers) these more precise activity de-compositions were clearly more prevalent. In some instances, analysts wished to deliberately leave things unlabeled or ambiguous. They woul d either go back later when they had more information to clarify the activity relationship or they wished to use the system in a more lightweight manner avoiding specifying all but the mo st essential elements. A number of attempts were made to create a relationship default (e.g.,  X  X ssignee X ,  X  X ssociate X ,  X  X nvolved X ,  X  X articipant X ). In these agent, approver, ApproverLevel1, ApproverLevel2, assignee, assigner, associate, Author, chair, Coder, consultant, Customer, Developer, DevLead, doer, evaluator, generic, GEOwner, CorpXXOwner, implementer, 
Implementor, informed, initiator, investigator, involved, LeadSystemIntegr ator, observer, owner, participant, PI, potential, ProjectMgr, 
CorpZZZOwner, recipient, responsible, reviewer, role, supervisor, support, tool instances, analysts were trying to quickly assign people to activity steps with minimal effort and thus they created one default descriptor to describe the rela tionship and re-used it for many activity steps connected to a variety of actors. In our initial case study exercise, a relationship label was required and hence analysts were compelled to create suitably ambiguous  X  X efaults X  and then they re-used those. We had not seeded our initial list with a vague default term -which our case studies revealed was clearly necessary. We initially thought of actors comp rising people, job roles, and computational processes that had the ability to act. However, our analysts wanted to make a clear distinction between people and job roles (which acted as placeholders for people) on the one hand and computational processes or agents on the other hand. A relationship label  X  X ool X  was cr eated and used frequently to categorize those activities where a computational process would be involved. However, this tool relationship was used not only for computational processes or agents capable of acting but also for  X  X assive tools X  such as links to online corporate directories, links to web-based software appli cations (e.g., expense reporting system), or links to or copies of templates or reference documents. The UAM prototype client allowed analysts to associate resources to an activity by attaching documents, forms, templates, and other artifacts. Thus  X  X assive tools X  attached as resources could not act as actor/agents. Based on the case study results, it is unclear that analysts differentiated these more  X  X assive X  electronic artifacts from more active electronic agents or processes able to act directly on activities. However, it should be noted that there were only a few instances of computational agents represented in the data, and the analysts were ente ring data from field studies of users (rather than being the actual users themselves). Further testing will be needed to better understand whether or not users differentiate (passive) electronic resources from electronic agents able to behave as independent actors . The original version of the system was designed initially to be completely  X  X pen X , i.e., all analysts could see all of the data; the roles and relationships created were stored as part of central database that they all had access to. Likewise the activity structures were also viewable by everyone. This open access was done for seve ral reasons and had several implications. It was simpler initially to avoid dealing with a multi-layer access control mechanism (and this was a small trusted group using the tool and everyone knew a priori the system was open). Having such an open system would allow us to observe whether there was convergence on particular labels once created and whether or not these would ge t re-used across different data entered by different analysts. In practice however, this re-use only occurred in limited instances; analysts tended to create their own relationship and role labels rather than look for ones that might be similar but created by another analyst to re-use. However, within one analyst X  X  activity structure these roles were re-used whenever appropriate. Since analysts were not familiar with the details of each other X  X  case study, we believe that there was uncertainty about whether one role created by one analyst really meant the same thing to a different anal yst entering different case study data, even though the data was in the same domain. Perhaps most limiting, if a role was re-used in different activities our initial set up assumed it was the same instance of the role. When a person was assigned to that role, their name propagated to all places where that role was referenced. This is very useful within a given activity and is of great value when new people are assigned or take over for others, since the assignment need only occur one time and will be automatically propagated throughout the activity consistently. However, for different activities in different case studies, where similar roles apply but represent different teams of people, this was not what analysts wanted. We speculated that roles would be a re-usable component across activities that were highly similar in nature. We observed that roles and relationships did get re -used within sub-activities of a single activity (and hence by the same analyst), but they were not often adopted by other analysts. In part this was attributable to an assumption that five case studies of an RFP process would be similar enough that components could be shared; but in fact there were subtle and important di fferences making sharing more difficult. Additionally, analysts were uncertain of the precise semantics of roles and relationshi ps created by others and thus were uncertain if they meant the same thing by the same term. This suggests that some form of explanatory annotation might be beneficial in systems trying to promote re-use. Within the financial compliance case study, entire activity patterns were reused often. The natu re of this domain is such that every quarter the same sequence of activities needed to be repeated by the same people (or at least by the same job roles). Thus for this type of highly stru ctured, repetitive, and consistent activity, activity patterns proved very helpful and accelerated creation of the overall activity structure. The variances for this case study occurred when financia l exceptions or anomalies were detected and needed investigation. In these cases, the analyst could look back to similar anomalies for steps to insert into in the new investigation. However, we have not yet extended the evaluation to cover many diffe rent analysts in financial compliance to verify the extent to which different analysts are willing to examine and understand others X  activity patterns and re-apply them. While the level of specificity sometimes made assigning involvement types difficult, we also found that the temporal nature of activities made labeli ng involvement types relative to the actors difficult. In particular, an actor may have multiple simultaneous relationships, such as a person who initiates an activity, later executes the activity, and then acts as recipient of the results (e.g., work on diet plan, re-organize my files). A person may act as both project lead and software engineer or act as nursing-shift coordinator and as a care-giving nurse. A computational agent that deals with shipping an item and continually updating the delivery status can act as both executor of a shipping request activity and recipient of updates as it monitors (observes) progress to warn of any delays. In cases where job roles are assigned as actors it becomes more difficult to quantify the multiple relationships played out by that job role (e.g., project manager). It would be tedious to have to enter the same actor in many different involvements types for the same activity to reflect this multi-purpose association. To get around this, our analysts resorted to using ambiguous relationship types. Finally, over time a single actor may have an evolving involvement in a particular activity. To accurately capture this information, it would be necessary to define very precisely the activity X  X  sub-activities ( X  X teps X ) as they occur over time and assign the actor to each sub-activity with the correct involvement. Practically, however, users often define activities at higher levels that take place over longer time intervals. In this case, an accuracy representation of the involvement type for a particular actor would require it to be changed as the activity unfolded. For instance, an actor can initiate an activity and assign a subordinate to carry it out; but after several days the actor realizes that they have time to do the activity them selves. This implies that the activity would need to be updated to reflect this new execution relationship in addition to the in itiation relationship. Having some reasonable generic default relati onship would alleviate the issue of having inaccurate representations or needing to go in and change the involvement over time to preserve semantic accuracy. Many detailed design implica tions for designing activity management support was already sp elled out in the findings just described. Here we note so me general implications: Our studies found that the level of description of activities varied from simple lightweight labels to highly articulated sub-activities. In the former case, users often want a simple and quick way to label an activity as a reminder. Th is tends to occur when either the activity itself is simple and straightforward (e.g., call Bob [knowing the subject of the conversation]), or the activity involves a number of sub-activities that are already well understood or known (e.g., order more office supplies [involves referring to an inventory list or checking what X  X  needed, filling out a purchase order or using an online ordering system, choosing a shipping method and timeframe, getting approval for the order]). In these cases, users do not want to have to fully specify a lot of information or fill out elaborate forms; they want the equivalent of jotting down a quick to-do item. Thus, to accommodate these types of activities, activity management tools need to allow undefined or ill-specified activities, which often consist solely of a simple label, with other activity content either defaulted in a sensible manner or allowed to remain unspecified. Specifically, users should be able to quickly and easily associate people with activities (e.g. drag and drop) without having to specify a precise involvement type. However, there are many instances where users need to specify activities in more detail. We found many reasons for this: It is these kinds of activities that are the most likely to see benefit from an activity management system. Our studies found that these activities occur frequently in practice and are the ones that most readily take advantage of features like the ability to specify roles and relationships. Our studies showed that computational agents can automatically initiate activities for people (e.g., reminder for quarterly audit, errors in submitting forms, runni ng and verifying virus checks, generating bugs), can be recipients of activity results (e.g., submitting forms to a system indicating compliance, submitting payroll timecards), or can independently carry out activities and update status (e.g., tracking an order for new inventory through purchasing, approvals, shipping, and arrival). In UAM, such agents play the role of (limited) actors. Users need to be able to view computational agents as di stinct, if limited, actors and to represent the nature of their involvement in activities (initiator, executor, observer, recipient). Roles and relationships turned out to be most useful for complex, repetitive activities. Activities can repeat either across different users (i.e., shared activity structures or activities that are passed along to others as patterns) or over time (i.e., activities that predictably recur and thus users want to re-cycle the activity template). However, in order to effectively support this kind propagation of activity structures, ro les need to be  X  X coped, X  i.e. limited to apply to a particular activity hierarchy. This enables different people to be assigned to the roles each time the activity pattern is reused. The design implications from these studies are being incorporated into new versions of UAM prototypes. Much is yet to be learned. At this point in time, these st udies do not represent people using the activity management system for their everyday work. We are working on prototypes that are robust enough to deploy to a user community to assess this type of daily usage. This paper has focused on one asp ect of an activity management support  X  articulating the roles a nd involvement relationships of people in activities. Work is continuing in the UAM project on several fronts: 1. We are continuing to articulate the Unified Activity ontology, 2. We are exploring how activity pattern descriptions capture 3. We are exploring how informal activity descriptions can mesh 4. We are also carrying out detailed observational studies of We would like to acknowledge our colleagues on the UAM project and others in IBM with whom we worked closely on time and activity management issues. Th e studies in this paper were jointly conducted with Sandra Kogan, David Millen, Michael Muller, Daniel Gruen, Leysia Pa len (University of Colorado), and Elaine Huang. The Unified Activity Management prototypes were developed by Alex Cozzi, Steve Farrell, Clemens Drews, and Bob Stachel. [1] Abbott, K., &amp; Sarin, S. (1994) .  X  X xperiences with workflow [2] Bellotti, V., Ducheneaut, N ., Howard, M., &amp; Smith, I. [3] Bernstein, A., (2000).  X  X ow can Cooperative Work Tools [4] Beyer, H., &amp; Holtzblatt, K. (1998). Contextual Design: [5] Brandimonte, M., Einstein, G. O., McDaniel, M. A. (Eds.) [6] Carroll, J. M. (Ed.) (2003). HCI Models, Theories, and [7] Dourish, P. and Bellotti, V.  X  X wareness and Coordination in [8] Dourish, P., Holmes, J., MacLean, A., Marqvardsen, P., and [9] Ducheneaut, N., &amp; Bellotti, V. (2001).  X  X mail as habitat: an [10] Engestrom, Y., Miettinen, R., P unamaki, R., Pea, R., Brown, [11] Erickson, T., Huang, W., Danis, C., &amp; Kellogg, W.A. (2004). [12] Erickson, T. and Kellog, W. (2000).  X  X ocial Translucense: [13] Gonzalez, V. M., and Mark, G. (2004).  X  X onstant, Constant, [14] Gutwin, C., Roseman, M., and Greenberg, S. (1996).  X  X  [15] Gwizdka, J. (2002).  X  X uture Time in Email  X  Design and [16] Heath, C., Jirotka, M. Luff, P. and Hindmarsh, J. (1995). [17] Hutchins, E. (1995). Cognition in the Wild . MIT Press, [18] Kaptelinin, V. (2003).  X  X MEA: Translating interaction [19] Kaptelinin, V., Nardi, B., and Macaulay, C. (1999).  X  X he [20] Kerr, B. (2003).  X  X hread Arcs: En Email Thread [21] Kerr, B. and Wilcox, E. (2004).  X  X esigning Remail: [22] Kreifelts, T and Hinrichs, E and Woetzel G. (1993) 'Sharing [23] Mackay, W. E., (1988)  X  X ore Than Just a Communication [24] Malone, T. (1983).  X  X ow do People Organize Their Desks: [25] Malone, T. W., Crowston, K. G., and Herman, G. (Eds) [26] Medina-Mora, R., Winograd, T., Flores, R., and Flores, F. [27] Moran, T. P. (2003).  X  X ctivity: Analysis, Design and [28] Muller, M., Geyer, W., Brownholtz, B. Wilcox, E., Millen, [29] Preece, J. et al. (1994). Human-Computer Interaction . [30] Quan, D., and Karger, D. R., (2003).  X  X aystack: Metadata [31] Suchman, L. A. (1987). Plans and Situated Actions: The [32] Whittaker, S. and Sidner, C. (1996).  X  X mail overload: 
