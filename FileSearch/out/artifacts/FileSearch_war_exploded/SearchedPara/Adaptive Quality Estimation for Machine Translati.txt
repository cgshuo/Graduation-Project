 After two decades of steady progress, research in statistical machine translation (SMT) started to cross its path with translation industry with tan-gible mutual benefit. On one side, SMT research brings to the industry improved output quality and a number of appealing solutions useful to increase translators X  productivity. On the other side, the market needs suggest concrete problems to solve, providing real-life scenarios to develop and eval-uate new ideas with rapid turnaround. The evolu-tion of computer-assisted translation (CAT) envi-ronments is an evidence of this trend, shown by the increasing interest towards the integration of suggestions obtained from MT engines with those derived from translation memories (TMs).

The possibility to speed up the translation pro-cess and reduce its costs by post-editing good-quality MT output raises interesting research chal-lenges. Among others, these include deciding what to present as a suggestion, and how to do it in the most effective way.

In recent years, these issues motivated research on automatic QE, which addresses the problem of estimating the quality of a translated sentence given the source and without access to reference translations (Blatz et al., 2003; Specia et al., 2009; Mehdad et al., 2012). Despite the substantial progress done so far in the field and in success-ful evaluation campaigns (Callison-Burch et al., 2012; Bojar et al., 2013), focusing on concrete market needs makes possible to further define the scope of research on QE. For instance, moving from controlled lab testing scenarios to real work-ing environments poses additional constraints in terms of adaptability of the QE models to the vari-able conditions of a translation job. Such variabil-ity is due to two main reasons: 1. The notion of MT output quality is highly 2. Each translation job has its own specifici-The ability of a system to self-adapt to the be-haviour of specific users and domain changes is a facet of the QE problem that so far has been disregarded. To cope with these issues and deal with the erratic conditions of real-world trans-lation workflows, we propose an adaptive ap-proach to QE that is sensitive and robust to dif-ferences between training and test data. Along this direction, our main contribution is a framework in which QE models can be trained and can continu-ously evolve over time accounting for knowledge acquired from post editors X  work.

Our approach is based on the online learning paradigm and exploits a key difference between such framework and the batch learning methods currently used. On one side, the QE models ob-tained with batch methods are learned exclusively from a predefined set of training examples under the assumption that they have similar characteris-tics with respect to the test data. This makes them suitable for controlled evaluation scenarios where such condition holds. On the other side, online learning techniques are designed to learn in a step-wise manner (either from scratch, or by refining an existing model) from new, unseen test instances by taking advantage of external feedback. This makes them suitable for real-life scenarios where the new instances to be labelled can considerably differ from the data used to train the QE model.
To develop our approach, different online algo-rithms have been embedded in the backbone of a QE system. This required the adaptation of its standard batch learning workflow to: 1. Perform online feature extraction from a 2. Emit a prediction for the input instance; 3. Gather user feedback for the instance ( i.e. 4. Send the true label back to the model to up-
Focusing on the adaptability to user and domain changes, we report the results of comparative ex-periments with two online algorithms and the stan-dard batch approach. The evaluation is carried out by measuring the global error of each algorithm on test sets featuring different degrees of similar-ity with the data used for training. Our results show that the sensitivity of online QE models to different distributions of training and test instances makes them more suitable than batch methods for integration in a CAT framework.

Our adaptive QE infrastructure has been re-leased as open source. Its C++ implementation is QE is generally cast as a supervised machine learning task, where a model trained from a col-lection of ( source, target, label ) instances is used cia et al., 2010).

In the last couple of years, research in the field received a strong boost by the shared tasks orga-is also the framework of our first experiment in  X  5. Current approaches to the tasks proposed at WMT have mainly focused on three main direc-tions, namely: i) feature engineering, as in (Hard-meier et al., 2012; de Souza et al., 2013a; de Souza et al., 2013b; Rubino et al., 2013b), ii) model learning with a variety of classification and regres-sion algorithms, as in (Bicici, 2013; Beck et al., 2013; Soricut et al., 2012), and iii) feature selec-tion as a way to overcome sparsity and overfitting issues, as in (Soricut et al., 2012).
 Being optimized to perform well on specific WMT sub-tasks and datasets, current systems re-flect variations along these directions but leave im-portant aspects of the QE problem still partially the necessity to model the diversity of human qual-ity judgements and correction strategies (Kopo-nen, 2012; Koponen et al., 2012) calls for solu-tions that: i) account for annotator-specific be-haviour, thus being capable of learning from inher-ently noisy datasets produced by multiple annota-tors, and ii) self-adapt to changes in data distribu-tion, learning from user feedback on new, unseen test items.
These interconnected issues are particularly rel-evant in the CAT framework, where translation jobs from different domains are routed to pro-fessional translators with different idiolect, back-ground and quality standards.

The first aspect, modelling annotators X  individ-ual behaviour and interdependences, has been ad-dressed by Cohn and Specia (2013), who explored multi-task Gaussian Processes as a way to jointly learn from the output of multiple annotations. This technique is suitable to cope with the unbalanced distribution of training instances and yields better models when heterogeneous training datasets are available.

The second problem, the adaptability of QE models, has not been explored yet. A common trait of all current approaches, in fact, is the re-liance on batch learning techniques, which assume a  X  X tatic X  nature of the world where new unseen instances that will be encountered will be similar lation memories that incrementally store translated segments and evolve over time incorporating users style and terminology, all components of a CAT tool (the MT engine and the mechanisms to assign quality scores to the suggested translations) should take advantage of translators feedback.

On the MT system side, research on adaptive approaches tailored to interactive SMT and CAT scenarios explored the online learning protocol (Littlestone, 1988) to improve various aspects of the decoding process (Cesa-Bianchi et al., 2008; Ortiz-Mart  X   X nez et al., 2010; Mart  X   X nez-G  X  omez et al., 2011; Mart  X   X nez-G  X  omez et al., 2012; Mathur et al., 2013; Bertoldi et al., 2013).

As regards QE models, our work represents the first investigation on incremental adaptation by ex-ploiting users feedback to provide targeted (sys-tem, user, or project specific) quality judgements. When operating with advanced CAT tools, transla-tors are presented with suggestions (either match-ing fragments from a translation memory or auto-matic translations produced by an MT system) for each sentence of a source document. Before being approved and published, translation suggestions may require different amounts of post-editing op-erations depending on their quality.
Each post-edition brings a wealth of dynamic knowledge about the whole translation process and the involved actors. For instance, adaptive QE components could exploit information about the distance between automatically assigned scores and the quality standards of individual translators (inferred from the amount of their corrections) to  X  X rofile X  their behaviour.

The online learning paradigm fits well with this research objective. In the online framework, dif-ferently from the batch mode, the learning al-gorithm sequentially processes an unknown se-quence of instances X = x 1 ,x 2 ,...,x n , returning a prediction p ( x i ) as output at each step. Differ-ences between p ( x i ) and the true label  X  p ( x i ) ob-tained as feedback are used by the learner to refine the next prediction p ( x i +1 ) .

In our experiments on adaptive QE we aim to predict the quality of the suggested translations in terms of HTER, which measures the minimum edit distance between the MT output and its man-this scenario:  X  The set of instances X is represented by  X  The prediction p ( x i ) is the automatically es- X  The true label  X  p ( x i ) is the actual HTER score At each step of the process, the goal of the learner is to exploit user post-editions to reduce the differ-ence between the predicted HTER values and the true labels for the following ( source, target ) pairs.
As depicted in Figure 1, this is done as follows: 1. At step i , an unlabelled ( source, target ) pair target translation and the post-edited target. 2. The extracted features are sent to an on-3. Based on the post-edition done by the user, 4. The true label is sent back to the online al-
This new paradigm for QE makes it possible to: i) let the QE system learn from one point at a time without complete re-training from scratch, ii) customize the predictions of an existing QE model with respect to a specific situation (post-editor or domain), or even iii) build a QE model from scratch when training data is not available.
For the sake of clarity it is worth observing that, at least in principle, a model built in a batch fash-ion could also be adapted to new test data. For in-stance, this could be done by running periodic re-training routines once a certain amount of new la-belled instances has been collected ( de facto mim-icking an online process). Such periodic updates, however, would not represent a viable solution in the CAT framework where post-editors X  work can-not be slowed by time-consuming procedures to re-train core system components from scratch. To measure the adaptation capability of different QE models, we experiment with a range of condi-tions defined by variable degrees of similarity be-tween training and test data.

The degree of similarity depends on several fac-tors: the MT engine used, the domain of the docu-ments to be translated, and the post-editing style of individual translators. In our experiments, the de-gree of similarity is measured in terms of  X  HTER, which is computed as the absolute value of the dif-ference between the average HTER of the training and test sets. Large values indicate a low simi-larity between training and test data and a more challenging scenario for the learning algorithms. 4.1 Experimental setup In the range of possible evaluation scenarios, our experiments cover:  X  One artificial setting (  X  5) obtained from the  X  Two settings obtained from data collected
For each setting, we compare an adaptive and an empty model against a system trained in batch mode. The adaptive model is built on top of an existing model created from the training data and exploits the new test instances to refine its predic-tions in a stepwise manner. The empty model only learns from the test set, simulating the worst con-dition where training data is not available. The batch model is built by learning only from the training data and is evaluated on the test set with-out exploiting information from the test instances.
Each model is also compared against a common baseline for regression tasks, which is particularly relevant in settings featuring different data distri-butions between training and test sets. This base-line (  X  henceforth) is calculated by labelling each instance of the test set with the mean HTER score of the training set. Previous works (Rubino et al., 2013a) demonstrated that its results can be partic-ularly hard to beat. 4.2 Performance indicator and feature set To measure the adaptability of our model to a given test set we compute the Mean Absolute Er-ror (MAE), a metric for regression problems also used in the WMT QE shared tasks. The MAE is the average of the absolute errors e i = | f i  X  y i | , where f i is the prediction of the model and y i is the true value for the i th instance.

As our focus is on the algorithmic aspect, in all experiments we use the same feature set, which consists of the seventeen features proposed in (Specia et al., 2009). This feature set, fully de-scribed in (Callison-Burch et al., 2012), takes into account the complexity of the source sentence ( e.g. number of tokens, number of translations per source word) and the fluency of the target trans-lation ( e.g. language model probabilities). The results of previous WMT QE shared tasks have shown that these baseline features are particularly competitive in the regression task (with only few systems able to beat them at WMT12). 4.3 Online algorithms In our experiments we evaluate two online algo-comparing their performance with a batch learning strategy based on the Scikit-learn implementation The choice of the OnlineSVR and Passive-Aggressive (OSVR and PA henceforth) is moti-vated by different considerations. From a perfor-mance point of view, as an adaptation of -SVR which proved to be one of the top performing algo-rithms in the regression QE tasks at WMT, OSVR seems to be the best candidate. For this reason, we use the online adaptation of -SVR proposed by (Ma et al., 2003). The goal of OnlineSVR is to find a way to add each new sample to one of three sets (support, empty, error) maintaining the con-sistency of a set of conditions known as Karush-Kuhn Tucker (KKT) conditions. For each new point, OSVR starts a cycle where the samples are moved across the three sets until the KKT condi-tions are verified and the new point is assigned to one of the sets. If the point is identified as a sup-port vector, the parameters of the model are up-dated. This allows OSVR to benefit from the pre-diction capability of -SVR in an online setting.
From a practical point of view, providing the best trade off between accuracy and computational time (He and Wang, 2012), PA represents a good solution to meet the demand of efficiency posed by the CAT framework. For each instance i , after emitting a prediction and receiving the true label, PA computes the -insensitive hinge loss function. If its value is larger than the tolerance parameter ( ), the weights of the model are updated as much as the aggressiveness parameter C allows. In con-trast with OSVR, which keeps track of the most important points seen in the past (support vectors), the update of the weights is done without consid-ering the previously processed i-1 instances. Al-though it makes PA faster than OSVR, this is a riskier strategy because it may lead the algorithm to change the model to adapt to outlier points. The motivations for experiments with training and test data featuring homogeneous label distribu-tions are twofold. First, since in this artificial sce-nario adaptation capabilities are not required for the QE component, batch methods operate in the ideal conditions (as training and test are indepen-dent and identically distributed). This makes pos-sible to obtain from batch models the best possible performance to compare with. Second, this sce-nario provides the fairest conditions for such com-parison because, in principle, online algorithms are not favoured by the possibility to learn from the diversity of the test instances.
 For our controlled experiments we use the WMT12 English-Spanish corpus, which consists of 2,254 source-target pairs (1,832 for training, 422 for test). The HTER labels for our regression task are calculated from the post-edited version and the target sentences provided in the dataset. To avoid biases in the label distribution, the WMT12 training and test data have been merged, shuffled, and eventually separated to generate three training sets of different size (200, 600, and 1500 instances), and one test set with 754 in-stances. For each algorithm, the training sets are used for learning the QE models, optimizing pa-rameters ( i.e. C , , the kernel and its parame-ters for SVR and OSVR; tolerance and aggressive-ness for PA) through grid search in 10-fold cross-validation.

Evaluation is carried out by measuring the per-formance of the batch (learning only from the training set), the adaptive (learning from the train-ing set and adapting to the test set), and the empty (learning from scratch from the test set) models in terms of global MAE scores on the test set.
Table 1 reports the results achieved by the best performing algorithm for each type of model ( batch , adaptive , empty ). As can be seen, close MAE values show a similar behaviour for the three ing data, the performance of the batch and the adaptive models (in this case always obtained with OSVR) is almost identical. This demonstrates that, as expected, the online algorithms do not take advantage of test data with a label distribution sim-ilar to the training set. All the models outper-form the baseline, even if the minimal differences confirm the competitiveness of such a simple ap-proach.

Overall, these results bring some interesting in-dications about the behaviour of the different on-line algorithms. First, the good results achieved by the empty models (less than one MAE point separates them from the best ones built on the largest training set) suggest their high potential when training data are not available. Second, our results show that OSVR is always the best performing algorithm for the adaptive and empty models. This suggests a lower capability of PA to learn from instances similar to the training data. To experiment with adaptive QE in more realis-two datasets of ( source , target , post edited tar-get ) English-Italian tuples.The source sentences in the datasets come from two documents from dif-ferent domains, respectively legal (L) and infor-mation technology (IT). The L document, which was extracted from a European Parliament resolu-tains 164 sentences. The IT document, which was taken from a software user manual, contains 280 sentences. The source sentences were translated with two SMT systems built by training the Moses toolkit (Koehn et al., 2007) on parallel data from the two domains (about 2M sentences for IT and 1.5M for L). Post-editions were collected from eight professional translators (four for each docu-ment) operating with the CAT tool in real working conditions.

According to the way they are created, the two datasets allow us to evaluate the adaptability of different QE models with respect to user changes different users in the same domain. within the same domain (  X  6.1), as well as user and domain changes at the same time (  X  6.2).

For each document D (L or IT), these two sce-narios are obtained by dividing D into two parts of equal size (80 instances for L and 140 for IT). The result is one training set and one test set for each post-editor within the same domain. For the user change experiments, training and test sets are selected from different post-editors within the same domain. For the user+domain change experiments, training and test sets are selected from different post-editors in different domains.
On each combination of training and test sets, the batch , adaptive , and empty models are trained and evaluated in terms of global MAE scores on the test set. 6.1 Dealing with user changes Among the possible combinations of training and test data from different post-editors in the same domain, Table 2 refers to two opposite scenarios. For each domain, these respectively involve the most dissimilar and the most similar post-editors according to the  X  HTER. Also in this case, for each model ( batch , adaptive and empty ) we only report the MAE of the best performing algorithm.
The first scenario defines a challenging situation where two post-editors ( rad and cons ) are charac-terized by opposite behaviour. As evidenced by the high  X  HTER values, one of them ( rad ) is the most  X  X adical X  post-editor (performing more cor-rections) while the other ( cons ) is the most  X  X on-servative X  one. As shown in Table 2, global MAE scores for the online algorithms (both adaptive and empty ) indicate their good adaptation capabilities. This is evident from the significant improvements both over the baseline (  X  ) and the batch models. Interestingly, the best results are always achieved by the empty models (with MAE reductions up to 10 points when tested on rad in the L domain, and 3.2 points when tested on rad in the IT do-main). These results (MAE reductions are always statistically significant) suggest that, when deal-ing with datasets with very different label distri-butions, the evident limitations of batch methods are more easily overcome by learning from scratch from the feedback of a new post-editor. This also holds when the amount of test points to learn from is limited, as in the L domain where the test set contains only 80 instances. From the application-oriented perspective that motivates our work, con-sidering the high costs of acquiring large and rep-resentative QE training data, this is an important finding.

The second scenario defines a less challeng-ing situation where the two post-editors ( sim1 and sim2 ) are characterized by the most similar be-haviour (small  X  HTER). This scenario is closer to the situation described in Section  X  5. Also in this case MAE results for the adaptive and empty mod-els are slightly worse, but not significantly, than those of the batch models and the baseline. How-ever, considering the very small amount of  X  X nin-formative X  instances to learn from (especially for the empty models), these lower results are not sur-prising.

A closer look at the behaviour of the online al-gorithms in the two domains leads to other obser-vations. First, OSVR always outperforms PA for the empty models and when post-editors have sim-different users and domains. ilar behaviour, which are situations where the al-gorithm does not have to quickly adapt or react to sudden changes.

Second, PA seems to perform better for the adaptive models when the post-editors have sig-nificantly different behaviour and a quick adapta-tion to the incoming points is required. This can be motivated by the fact that PA relies on a simpler and less robust learning strategy that does not keep track of all the information coming from the previ-ously processed instances, and can easily modify its weights taking into consideration the last seen point (see Section  X  3 ). For OSVR the addition of new points to the support set may have a limited effect on the whole model, in particular if the num-ber of points in the set is large. This also results in a different processing time for the two algo-rithms. 14 For instance, in the empty configurations on IT data, OSVR devotes 6 . 0 ms per instance to update the model, while PA devotes 4 . 8 ms , which comes at the cost of lower performance. 6.2 Dealing with user and domain changes In the last round of experiments we evaluate the reactivity of different online models to simultane-ous user and domain changes. To this aim, our QE models are created using a training set coming from one domain (L or IT), and then used to pre-dict the HTER labels for the test instances coming from the other domain ( e.g. training on L, testing on IT).

Among the possible combinations of training and test data, Table 3 refers to scenarios involv-ing the most conservative and radical post-editors in each domain (previously identified with cons and rad ) 15 . In the table, results are ordered ac-cording to the  X  HTER computed between the se-lected post-editor in the training domain ( e.g. L cons ) and the selected post-editor in the test do-main ( e.g. IT rad ). For the sake of comparison, we also report (grey rows) the results of the ex-periments within the same domain presented in  X  6.1. For each type of model ( batch , adaptive and empty ) we only show the MAE obtained by the best performing algorithm.

Intuitively, dealing with simultaneous user and domain changes represents a more challenging problem compared to the previous setting where only post-editors changes were considered. Such intuition is confirmed by the results of the adaptive models that outperform both the baseline (  X  ) and the batch models even for low  X  HTER values. Al-though in these cases the distance between train-ing and test data is comparable to the experiments with similar post-editors working in the same do-main ( sim1 and sim2 ), here the predictive power of the batch models seems in fact to be lower. The same holds also for the empty models except in two cases where the  X  HTER is the smallest (2.2 and 5.0). This is a strong evidence of the fact that, in case of domain changes, online models can still learn from new test instances even if they have a label distribution similar to the training set.
When the distance between training and test in-creases, our results confirm our previous findings about the potential of the empty models. The ob-served MAE reductions range in fact from 10.4 to 12.9 points for the two combinations with the highest  X  HTER.

From the algorithmic point of view, our results indicate that OSVR achieves the best performance for all the combinations involving user and domain changes. This contrasts with the results of most of the combinations involving only user changes with post-editors characterized by opposite behaviour (grey rows in Table 3). However, it has to be re-marked that in the case of heterogeneous datasets the difference between the two algorithms is al-ways very high. In our experiments, when PA out-performs OSVR, its MAE results are significantly lower and vice-versa (respectively up to 1.5 and 1.7 MAE points). This suggests that, although PA is potentially capable of achieving higher results and better adapt to the new test points, its instabil-ity makes it less reliable for practical use.
As a final analysis of our results, we investi-gated how the performance of the different types of models ( batch , adaptive , empty ) relates to the distance between training and test sets. To this aim, we computed the Pearson correlation be-tween the  X  HTER (column 3 in Table 3) and the MAE of each model (columns 5, 6 and 8), which respectively resulted in 0.9 for the batch , 0.63 for the adaptive and -0.07 for the empty model. These values confirm that batch models are heavily af-fected by the dissimilarity between training and test data: large differences in the label distribution imply higher MAE results and vice-versa. This is in line with our previous findings about batch models that, learning only from the training set, cannot leverage possible dissimilarities of the test set. The lower correlation observed for the adap-tive models also confirms our intuitions: adapting to the new test points, these models are in fact more robust to differences with the training data. As expected, the results of the empty models are completely uncorrelated with the  X  HTER since they only use the test set.

This analysis confirms that, even when dealing with different domains, the similarity between the training and test data is one of the main factors that should drive the choice of the QE model. When this distance is minimal, batch models can be a reasonable option, but when the gap between train-ing and test data increases, adaptive or empty mod-els are a preferable choice to achieve good results. In the CAT scenario, each translation job can be seen as a complex situation where the user (his personal style and background), the source doc-ument (the language and the domain) and the un-derlying technology (the translation memory and the MT engine that generate translation sugges-tions) contribute to make the task unique. So far, the adaptability to such specificities (a major chal-lenge for CAT technology) has been mainly sup-ported by the evolution of translation memories, which incrementally store translated segments in-corporating the user style. The wide adoption of translation memories demonstrates the importance of capitalizing on such information to increase translators productivity.

While this lesson recently motivated research on adaptive MT decoders that learn from user cor-rections, nothing has been done to develop adap-tive QE components. In the first attempt to ad-dress this problem, we proposed the application of the online learning protocol to leverage users feedback and to tailor QE predictions to their qual-ity standards. Besides highlighting the limitations of current batch methods to adapt to user and domain changes, we performed an application-oriented analysis of different online algorithms fo-cusing on specific aspects relevant to the CAT sce-nario. Our results show that the wealth of dynamic knowledge brought by user corrections can be ex-ploited to refine in a stepwise fashion the qual-ity judgements in different testing conditions (user changes as well as simultaneous user and domain changes).

As an additional contribution, to spark further research on this facet of the QE problem, our adap-tive QE infrastructure (integrating all the compo-nents and the algorithms described in this paper) has been released as open source. Its C++ im-plementation is available at http://hlt.fbk.eu/ This work has been partially supported by the EC-funded project MateCat (ICT-2011.4.2-287688).
