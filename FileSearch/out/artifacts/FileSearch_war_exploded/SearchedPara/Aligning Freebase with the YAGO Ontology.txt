 Linked Open Data (LOD) has emerged as the de-facto standard for publishing data on the Web. The cross-domain large scale Freebase and YAGO datasets represent central hubs and reference points for the LOD cloud. Freebase is an open-world dataset, which con-tains about 22 million entities and more than 350 million facts in more than 100 domains. The scale of Freebase makes it difficult for the users to get an overview of the data and efficiently retrieve the desired information. Integration of Freebase with the YAGO ontology that contains more than 360,000 concepts enables us to provide more semantic information for Freebase and to facilitate novel applications, such as efficient query construction, over large scale data. In this paper we analyze the structure of YAGO in more depth and show how to match YAGO and Freebase categories. The new YAGO+F structure that results from our matching tightly con-nects both datasets and provides an important next step to system-atically interconnect LOD subcollections. We make our YAGO+F structure available online in the hope that it can provide a good starting point for future applications, which can build upon a wide variety of Freebase data clearly arranged in the semantic categories of YAGO.
 H.4.m [ Information Systems Applications ]: Miscellaneous YAGO ontology; Freebase; Ontology matching
Linked Open Data (LOD) is a method of publishing on the Se-mantic Web that connects pieces of structured data, information, and knowledge to build the Web of Data. This way of publish-ing enables data from distributed Web sources to be connected and queried, potentially enabling a wide variety of applications to take advantage of distributed information and knowledge. The number of datasets included in LOD has grown exponentially over the last years, currently including 295 datasets with more than 31 billion entities and facts from a variety of domains 1 . The cross-domain F reebase and YAGO datasets represent central hubs and reference points for the LOD cloud.

Freebase [ 4] is a large scale dataset that contains about 22 mil-l ion entities that belong to more than 7,500 categories in more than 100 domains. In addition, Freebase contains more than 350 million facts about these entities. The users of Freebase can collabora-tively create, structure and maintain database content over an open platform. In addition, automatic imports from the external data sources such as Wikipedia , MusicBrainz 2 , and others enable fur-t her growth of the data size. Given the scale of Freebase, it becomes crucial to provide effective and efficient structures that give users a quick and informative overview of the data available. Ontolo-gies are typically used for organizing large scale information and knowledge in a wide variety of domains. The YAGO ontology [ 16 ] i s a lexical resource that contains entities, categories, and their re-lations automatically extracted from Wikipedia. YAGO unifies the extracted Wikipedia categories with the concepts of the WordNet thesaurus [ 10 ], and arranges these concepts into a taxonomic hier-a rchy. Among other ontologies, YAGO is a natural choice for or-ganizing Freebase data, as both YAGO and Freebase share a large number of entities originating from Wikipedia.

Figure 1 exemplifies the elements of the Freebase and YAGO h ierarchies. For example, in YAGO an instance  X  X tephen King X  is associated with the leaf Wikipedia categories  X  X merican Novel-ist X  ,  X  X riters from Maine X  , and  X  X eople from Country Dublin X  , which are the sub-concepts of  X  X riter X  ,  X  X ommunicator X  ,  X  X er-son X  , and  X  X ntity X  in WordNet. In Freebase, the same instance  X  X tephen King X  belongs to the category  X  X uthor X  located in the  X  X ooks X  domain that is further categorized in the  X  X rts &amp; Enter-tainment X  top level domain of Freebase.

In this paper we focus on the problem of enrichment of Freebase categories and entities with the conceptual categories of YAGO. Our contributions are as follows: First, we analyze the initial struc-ture of the large scale YAGO hierarchy which contains more than 360,000 concepts. Second, we describe a matching algorithm, which identifies the most suitable YAGO category for every category of Freebase using state-of-the-art matching techniques. Third, we compare the structure of the sub-hierarchy of YAGO that is rele-vant for the Freebase mapping, which we call YAGO+F, with the original YAGO hierarchy and show that only a small part of the YAGO ontology is required to describe a large scale real-world multi-domain dataset like Freebase. Finally, we evaluate and dis-
T he LOD cloud diagram: c uss the matching quality and make the matching results available to the community 3 .

T he advantages of the YAGO+F mapping are manifold. First, a hierarchical structure of YAGO can enable an efficient navigation over the large-scale Freebase dataset. To this extent, FreeQ [ 6, 5] -a novel query construction approach that enables novice users to in-teractively create structured queries over Freebase takes advantage of the YAGO+F mapping. In this application, a YAGO-based on-tology layer at the top of the Freebase categories provides a way to quickly reduce the search space over Freebase. As reported in [ 6], u sing YAGO+F the interaction cost of complex queries over Free-base was significantly reduced.

Another possible application of YAGO+F in this context is schema summarization [ 17 ]. The schema of Freebase is big and complex. E xpert users who are not familiar with this schema need to perform a lot of work to understand the schema and find the relevant parts to be able to pose structured queries. A schema summary of Free-base that uses the YAGO ontology can provide an overview of the entire schema and enable users to quickly identify and understand the relevant schema parts. In this context, the YAGO ontology can provide a backbone for organizing Freebase categories in semantic classes to create effective schema summaries.

Moreover, YAGO+F increases the number of entities available in YAGO by more than an order of magnitude. These additional entities can possibly be used in the future work to enhance YAGO-based applications such as e.g. question answering systems (see YAGO-QA [ 1]). YAGO-QA enables answering natural language q uestions using ontological knowledge of YAGO. Thereby the map-ping of the user X  X  keywords contained in the questions (SPARQL query expressions) is performed based on how good these key-words map to the YAGO instances. As the instances in YAGO mostly originate from Wikipedia, the scope of the possible ques-tions in YAGO-QA is also limited to the Wikipedia instances. A combination of YAGO and Freebase can enrich YAGO concepts with the Freebase instances that come from many different sources,
T he YAGO+F mapping is available at: http://iqp.l3s.uni-hannover.de thus extending the scope of the questions that can be answered by YAGO-QA system.

The rest of the paper is organized as follows: in Section 2 we d escribe the structure of the YAGO ontology. Then in Section 3 we provide details on the matching. Following that in Section 4 we d escribe and characterize the resulting YAGO+F structure. Then in Section 5 we discuss related work. Finally, Section 6 provides a c onclusion.
To enable an effective matching between YAGO and Freebase, we perform several steps. In this section, we first analyze the dis-tribution of concepts and instances within the original YAGO hi-erarchy. Then, we consider an overlap of the YAGO and Freebase instances and examine the distribution of the instances shared be-tween YAGO and Freebase within the YAGO ontology.
The common elements of the YAGO ontology are the concepts, e.g.  X  X ntity X  and  X  X erson X  . The concepts represent semantic cate-gories and are hierarchically organized using the  X  X ubClassOf X  re-lation. A concept can be associated with a set of instances, e.g. the concept  X  X erson X  is associated with the instances  X  X tephen King X  and  X  X ames Joyce X  . The relation  X  X ype X  links together a concept with its associated instances.
 To facilitate our analysis, we assign each concept within the YAGO hierarchy a depth value. The concepts at the top level of the hierarchy (depth=0) do not possess any parent concepts. Then, the depth of the concept C is determined as the length of the path from C to the top level concept that is associated with C using the  X  X ubClassOf X  relation.

A YAGO instance can be associated with multiple YAGO con-cepts connected using the  X  X ubClassOf X  relation. In order to dif-ferentiate the most specific concepts that have instances directly as-signed to them from the concepts that are only indirectly connected to instances, we introduce the notion of a leaf category . A leaf category L is a category that is associated with an instance I and has the highest depth value across all the categories associa ted with I and connected to L using the  X  X ubClassOf X  relation. For ex-ample, an instance  X  X lexander the Great X  is associated with the Wikipedia leaf categories  X 4th-century BC Greek people X  ,  X  X ace-donian monarchs X  ,  X  X ncient Macedonian generals X  , and  X  X onar-chs of Persia X  , which are connected to the more general WordNet concepts  X  X erson X  ,  X  X ead of state X  , and  X  X eneral X  .

As of March 2011, YAGO possesses 361,211 semantic cate-gories that are organized in a hierarchical structure with 20 lev-els [ 11 ]. The backbone of YAGO is build from the Wikipedia a nd WordNet categories. YAGO includes 292,070 Wikipedia cat-egories located at the depth of 1-19 of the hierarchy. These cat-egories can be very specific and include e.g.  X  X urials at Kensico Cemetery X ,  X 1729 essays X ,  X  X ultidirectional shooters X ,  X  X urials at Montmartre Cemetery X ,  X  X aris X ,  X  X ounders of utopian com-munities X ,  X 59 crimes X , and  X 1st-century executions X  . Further, YAGO includes 68,446 more general WordNet categories such as  X  X arent X ,  X  X ife X ,  X  X ity university X ,  X  X lip art X ,  X  X ogic diagram X ,  X  X outine X , and  X  X all X  . The WordNet categories are spread over the depth 0-19 of the YAGO hierarchy. In addition, 642 Geo cate-gories such as  X  X ater mill X ,  X  X opper mine X ,  X  X hosphate works X ,  X  X actory X , and  X  X esearch institute X  , are located at the depth of 1-13. Finally, YAGO offers a set of 53 its own categories located at the depth of 0-5, e.g.  X  X ength X ,  X  X umber X ,  X  X eight X ,  X  X SBN X , and  X  X onetary value X  .

From the total number of 361,211 categories in the YAGO hier-archy, about 80% (288,569 categories) are the leaf categories that have instances directly assigned to them. For example, an instance  X  X an Francisco X  is directly assigned to the following Wikipedia categories:  X  X opulated places established in 1776 X ,  X  X  X ounty seats in California X ,  X  X opulated coastal places in California X  , and  X  X al-ifornia counties X . 7,394 categories do not have instances as di-rect children. Among them are:  X  X ccident X ,  X  X ction X ,  X  X oung person X ,  X  X egal actor X ,  X  X rganism X ,  X  X otor X ,  X  X ollege X  , and  X  X omedian X  . Finally, 65,248 categories do not possess any in-stances, neither direct, nor indirect. These YAGO categories in-clude:  X  X ength X ,  X  X umber X ,  X  X eight X ,  X  X SBN X , and  X  X onetary value X  .

Table 1 presents the distribution of the categories at each level of t he YAGO hierarchy. As Table 1 illustrates, 60% of all YAGO cat-e gories are assigned to the depth 6-8 of the YAGO hierarchy. 90% of the categories are located within the depth of 4-10. The cate-gories that do not possess any parent categories are located at the top level of the YAGO hierarchy (depth=0). The most important YAGO category at the top level is the WordNet  X  X ntity X  category. This category is a parent of the majority of the categories in YAGO. However, the YAGO hierarchy does not form a clean tree structure. This is mostly because some of the WordNet categories in YAGO are not related to the  X  X ntity X  category and do not possess any par-ent categories. These categories include:  X  X dministrative district X ,  X  X rahman X ,  X  X ontrol character X ,  X  X pacris X ,  X  X vangelicalism X ,  X  X xorcist X ,  X  X aun X ,  X  X en X ,  X  X undamentalist X  , and others. Fi-nally, the YAGO category  X  X elation X  is an additional YAGO cate-gory that does not possess any parents. This explains an unusually big number of categories and instances at the depth one, as many of the categories at this depth are the child categories of the Word-Net categories located at the top level of the hierarchy. For exam-ple, the top level WordNet category  X  X dministrative district X  has 141 subordinated categories, among them are the Wikipedia cate-gories:  X  X ettlements in New Brunswick X  ,  X  X eolithic settlements in Crete X  , and  X  X ettlements established in 1312 X  . This also leads to a big number of associated instances already at the second level of the YAGO hierarchy.
In total, 2,632,948 unique instances of YAGO are assigned to the 295,963 categories using the  X  X ype X  relation. Majority of the YAGO instances (2,632,756) originate from Wikipedia. As YAGO allows an instance to be assigned to the multiple categories in the hierarchy, the total number of instances located at the leaves of the YAGO hierarchy is 2.76 times higher than the number of unique instances (7,255,584 instances in total). For example, an instance  X  X tephen King X  is assigned to the multiple categories such as  X  X mer-ican school teachers X  ,  X  X eople from Portland, Maine X  ,  X  X ilm di-rector X  , and  X  X merican horror writers X  .

As presented in Table 2, the most populated level of the YAGO h ierarchy with respect to the instance distribution is located at the depth 7 and contains 29% of the instances. The levels 6-8 together contain 64% of the instances. The majority of the instances (90%) are located within the depth 4-9 of the YAGO hierarchy.
In order to better understand how good the YAGO ontology struc-ture fits to the Freebase dataset, we analyze how the instances shared by the both datasets are distributed across the different levels of the YAGO hierarchy. Table 2 presents the distribution of the shared i nstances of YAGO and Freebase in the YAGO hierarchy. In to-tal, 99% of YAGO instances are shared with Freebase. In Table 2,  X  YAGO Leaf Cat. X  is the number of the leaf categories of YAGO that contain shared instances. The majority of the shared instances (94%) are located within the depth 3-10 of the YAGO hierarchy. In total these instances are assigned to the 260,488 leaf categories of YAGO.

In Table 2  X  X reebase Cat. X  is the number of Freebase categories t hat are associated with the shared instances found at a certain depth of the YAGO hierarchy. At this point we do not yet perform the matching, such that each Freebase category can be associated with multiple levels of the YAGO hierarchy. For this reason, the to-tal number of the Freebase categories presented in Table 2 (8,745) i s much higher than the number of Freebase tables containing the shared instances (1,391). This is because the instances of one Free-base category are, on average, distributed across 6.3 YAGO cate-gories.
The aim of the matching function is to map each Freebase cate-gory to the most similar category of YAGO. To assess similarity of the categories, matching techniques often make use of the instances these concepts share [ 8], [ 2]. In order to create an effective match-i ng function for YAGO and Freebase, we first analyze the instance overlap in the both sources.

At the time of writing, the categories of Freebase and the corre-sponding data instances have been available for download directly as SQL tables. Freebase data dump used in our experiments con-tains 1,578 categories [ 12 ]. On the one hand, we observed that 88% ( 1,391) of the Freebase categories contain Wikipedia instances that are also found in the YAGO ontology. For example,  X  X tephen I of Hungary X  from Freebase and  X  X ing Stephen X  from YAGO de-note the same person, as they share the same Wikipedia identi-fier. On the other hand, as majority of the YAGO instances come from Wikipedia, these instances are also contained in the Freebase dataset. The instances coming from Wikipedia are uniquely distin-guished by their Wikipedia identifiers in the both datasets and can be directly used for the category matching.

Each Freebase category is associated with a set of instances that can be partly shared with YAGO. Freebase contains 22,542,665 unique instances, from which about 16% (3,661,329 instances) orig-inate from Wikipedia. As an instance can be associated with mul-tiple Freebase categories, for example  X  Stephen King X  with  X  X u-thor X ,  X  X ward winner X ,  X  X ictional character creator X  , and  X  X et owner X  , the overall number of Freebase instances is 2.47 times higher than the number of unique instances (55,684,113 instances in total). In total, 2,632,756 unique instances that originate from Wikipedia are shared between the YAGO and Freebase datasets, which is about 12% of the Freebase instances.
 The pie chart presented in Figure 2 illustrates the number of the F reebase categories associated with a given percentage of shared instances. For example, we can see that for 72% (1,150 out of 1,578) Freebase categories, more than 20% of the associated in-stances are within the shared set. The Freebase categories with the highest instance overlap (80-100%) include:  X  X stronomy aster-oid X ,  X  X aseball coach X ,  X  X hess player X ,  X  X ilm critic X ,  X  X eog-raphy mountain X ,  X  X S president X ,  X  X lympic games X ,  X  X eligion Monastery X ,  X  X oyalty kingdom X ,  X  X ports boxer X  , and  X  X heater actor X  . For these categories, given a compatible YAGO concept structure, an instance-based matching should already provide good results.
 Figure 2: Number of Freebase Categories with a Given Percenta ge of Shared Instances
Another part of the Freebase categories (about 16%) is asso-ciated with less than 20% shared instances. These are, for in-stance,  X  X stronomy comet X ,  X  X usiness location X ,  X  X usiness in-dustry X ,  X  X usiness job title X ,  X  X ilm editor X ,  X  X ood drinking es-tablishment X  , and  X  X ublic library X  . In these cases, an additional evidence can be necessary to perform an effective matching. Fi-nally, 12% of the Freebase categories are not associated with any shared instances. These are, for example,  X  X uminous flux unit X ,  X  X stronomy galaxy classification code X ,  X  X ook technical report X  , and  X  X aw US patent type X  . In order to include these categories in the mapping, an extension of the YAGO concept structure might be required.
As Freebase and YAGO share a significant number of instances coming from Wikipedia as discussed in Section 2.3 , instance-based m atching techniques appear to be the most suitable to align these ontologies. Instance-based matching techniques assess similarity of the concepts based on the instances these concepts share [ 8], [ 2]. T he real-world entities like a film, a car, or a person often coincide across ontologies. Given a set of corresponding instances, the simi-larity of the concepts can be measured as the instance overlap using e.g. Jaccard coefficient.

Instance-based matching will enable us to match about 90% of the Freebase categories. In the future, we plan to investigate adding further matching techniques such as element-based matching and structure similarity [ 9] to further increase the number of Freebase c ategories that can be mapped to the YAGO ontology and to im-prove the quality of the matching incrementally.
 Freebase dataset is a collection of categories that describe the real-world entities, like  X  X erson X ,  X  X ook X ,  X  X ocation X ,  X  X irline X  , and  X  X ward X  , as well as facts associated with these entities.
I n the matching process, we automatically assign each Freebase category to the most similar YAGO category. For example, we as-sign the Freebase category  X  X uthor X  to the YAGO category  X  X riter X  . An example of the matching between YAGO and Freebase cate-gories is illustrated in Figure 3. The output of the matching process i s a mapping of each Freebase category to the most likely seman-tic category of YAGO. Each Freebase concept is mapped only to the most likely YAGO category, whereas a YAGO category can be associated with several Freebase categories. For example, the YAGO category  X  X riter X  may unify the Freebase categories  X  X u-thor X  and  X  X omic book author X  .
 The intuition behind the instance-based matching is that the cat-egories F and Y are same if F contains the same instances as Y . The more instances are shared by F and Y , the more simi-lar the categories are. For example,  X  X riter X  and  X  X uthor X  share many instances like  X  X tephen King X  and  X  X ames Joyce X  and are considered to describe the same concept. In contrast, the cate-gories  X  X riter X  and  X  X iterary composition X  do not have any in-stances in common and thus are not similar.

For the calculation of similarity between the two sets of instances we use the similarity measure known as the Jaccard coefficient, which is based on the joint probability. We define the instance-based similarity  X  i of two categories F and Y as: where P ( F, Y ) is the part of the shared instances that belongs to the categories F and Y , P (  X  F, Y ) is the fraction that belongs to Y but not to F , and P ( F,  X  Y ) is the fraction that belongs to F but not to Y .  X  i ( F, Y ) has the lowest value 0 when the instance sets of F and Y are disjoint, e.g.  X  X iterary Composition X  and  X  X uthor X  , and the highest value 1 when F and Y contain the same set of instances and thus represent the same concept, e.g.  X  X riter X  and  X  X uthor X  . The overall matching function is then computed as: This function assigns each Freebase category F t o the most likely YAGO category Y map that has the highest similarity score from all YAGO categories Y C according to the scoring function in Equation (1).
Using the techniques described in the previous sections, we matched the Freebase dataset from June 2011 [ 12 ] with the YAGO2 on-t ology [ 11 ]. The Freebase dataset includes approximately 1,578 c ategories containing more than 20 million entities in more than 100 domains. As described above, 88% (1,391) of the Freebase categories contain Wikipedia instances that are also found in the YAGO ontology. The hierarchy of YAGO2 possesses 361,211 cat-egories, from which more than 80% have associated instances. In total, YAGO contains 2,632,948 unique instances, most of which are shared with Freebase. The results of our matching are available for download in the .tsv and .n3 formats. In this section, we ana-lyze the structure of the YAGO+F hierarchy that results from the matching and evaluate the matching quality. In this section we discuss the results of the matching between YAGO and Freebase. Specifically, we are interested in the part of the initial YAGO ontology, which is relevant to the real-world large scale dataset such as Freebase. To this end, we analyze the distribution of categories and instances in the YAGO+F hierarchy which is obtained using the matching described in Section 3 and c onnects Freebase and YAGO categories.

We used the matching technique described in Section 3 to as-s ign each Freebase category to the corresponding YAGO category. We call the YAGO categories directly matched to the Freebase categories YAGO+F leaf categories . Then, we extracted the sub-structure of YAGO required to describe the leaf categories matched to the Freebase dataset. To this end, we extracted all paths from the top level of the YAGO hierarchy to all the YAGO+F leaf cat-egories. We call the resulting sub-structure of the YAGO ontol-ogy YAGO+F . The structure of YAGO+F is presented in Table 3.
I n Table 3,  X  X ategories YAGO+F, Total X  is the total number o f categories that are relevant for the matching and  X  X ategories YAGO+F, Leaf X  is the number of the leaf categories directly matched to the Freebase categories. The number of the leaf categories pre-sented in Table 3 is 1.12 times smaller than the total number of the F reebase categories. This is because a YAGO category can group together several Freebase categories.
 We observed that grouping of several Freebase categories to one YAGO category mostly happens if the Freebase category structure has a higher granularity than the YAGO category structure. In this case, the Freebase categories mapped to one YAGO category can be either sibling categories or sub-categories of each other. In the former case, the sibling categories  X  X ilm actor X  and  X  X V ac-tor X  of Freebase are both mapped to the WordNet  X  X ctor X  concept of YAGO. Also,  X  X ocation statistical region X  and  X  X ocation city-town X  are mapped to the WordNet  X  X eographical area X  . In the latter case, 99.9% instances of the Freebase category  X  X usic song writer X  are also contained in the Freebase category  X  X usic lyri-cist X  , such that  X  X usic song writer X  is a sub-category of  X  X usic lyricist X  . The both categories are mapped to the WordNet  X  X ong writer X  category of YAGO. Also,  X  X ennis player X  and  X  X ennis tournament champion X  are both mapped to the WordNet  X  X ennis player X  , as YAGO does not possess the more specific  X  X ennis tour-nament champion X  category. In these cases, the more specific Free-base categories can represent a possible extension to the YAGO category structure.

Then, Table 3 presents the number of Freebase categories as-s igned to each level of the YAGO+F hierarchy. The majority of the Freebase categories is assigned to the levels 4-8, which corresponds to the distribution of the shared instances in the YAGO hierarchy. Finally, Table 3 presents the number of the shared instances and the t otal number of instances associated with the Freebase categories located at the specific level of YAGO+F. The majority of the Free-base instances (50%) is assigned to the levels 3-8. As an instance can be associated with multiple categories of Freebase, the total number of the instances presented in Table 3 includes duplicates. C omparing the YAGO+F structure in Table 3 with the original Y AGO hierarchy presented in Table 1, we can see that the resulting s ub-structure of YAGO only contains 0.4% of the leaf categories compared to the original YAGO ontology that contained 288,569 leaf categories. This is expected, as each of the 1,391 Freebase categories was assigned to only one specific YAGO leaf category. The total number of categories in the YAGO+F hierarchy is 2,141, which is only 0.6% of the total number of the all YAGO categories (361,211). As we can see, only a small proportion of YAGO cat-egories (less than 1%) is enough to describe a large scale multi-domain database such as Freebase.

The total number of instances in the YAGO+F mapping is smaller than the total number of Freebase instances. This is because 187 Freebase categories containing 3,172,694 instances (5.7% of the overall number of the Freebase instances) are not assigned to any YAGO category as these Freebase categories do not share any in-stances with YAGO.

We can see that 80% of the Freebase categories and 50% of the instances are assigned to the levels 3-8 of the YAGO+F hierarchy. This distribution roughly corresponds to the distribution of the cat-egories in the original YAGO hierarchy, where the most populated levels were located at the depth 4-9 (see Table 2). We also observe a high instance concentration at the depth 0 of the YAGO+F hier-archy. This is because a general and the most populated Freebase category  X  X ommon topic X  that contains information about entities and their relations from the wide variety of Freebase domains is assigned to the top level  X  X ntity X  category of YAGO.

The levels at the depth higher than 14 did not get any Freebase categories assigned. These is because the granularity of the YAGO categories at these levels is too high compared with the Freebase structure. Our evaluation compared YAGO+F against the ground truth of Freebase. The aim of the evaluation is to assess the similarity be-tween the original classification of the instances in Freebase with the YAGO+F classification that we obtain in the matching process. To this extent, we compute the Rand Index ( RI ) [ 13 ] and the Jac-c ard Index ( JI ), that are the standard measures to evaluate the qual-ity of clustering algorithms. Both RI and JI are the measures of similarity between two data clusterings. In the context of our matching, we compute RI and JI for each YAGO+F leaf category.
To this extent, we view the mapping of Freebase and YAGO cat-egories as a series of decisions, one for each of the N ( N pairs of shared instances in the both datasets. We want to assign two instances to one and the same YAGO+F category if and only if these instances belong to the same Freebase category. A true pos-itive decision T P ( y, f ) assigns two instances from one Freebase category f to one YAGO+F category y . As in the praxis multiple Freebase categories can be mapped to one YAGO+F category, to compute the Rand Index R I ( y ) of the YAGO+F leaf category y , we take into account all Freebase categories f  X  F y mapped to y . The number of true positive decisions is T P ( y, F y ) , where y is the YAGO+F leaf category and F y is a set of the Freebase categories mapped to y in the matching process. Further, a true negative de-cision T N ( y, F y ) does not assign two instances from the different Freebase categories to one YAGO+F leaf category y .

In the matching, two types of errors can occur. A false posi-tive decision F P ( y ) assigns two instances from different Freebase categories to one YAGO+F category y . This happens if more than one Freebase category is assigned to a YAGO+F category in the matching process. A false negative decision F N ( F y ) assigns two instances from a Freebase category f  X  F y to different YAGO+F categories. This can happen if the instances from one Freebase cat-egory were found in different YAGO categories before the match-ing. The Rand Index for a YAGO+F leaf category y measures the percentage of decisions that are correct for this category (i.e. accu-racy), that is:
RI ( y ) = T P ( y, F y ) + T N ( y, F y ) T P ( y , F If a Freebase category contains only one instance, the value of RI may be not well-defined, as the number of instance pairs in such category is zero. To this end, we apply Laplace smoothing and add one to the number of shared instances in each Freebase category.

The RI values range from [0 , 1] , where RI = 1 is the best possible value. This value can be achieved in a perfect situation, where one Freebase category is exclusively matched to exactly one YAGO+F category. In the Equation 3, the T N -factor takes the size of the Freebase category into account, such that the influence of the categories that do not contain many instances is reduced. In order to get a better overview of the matching results for the categories independent of their size, we also compute the RI value without the T N -factor. This corresponds to the Jaccard Index JI that mea-sures the level of agreement over the pairs from the Freebase cate-gories assigned to a YAGO+F category. To increase quality of the matching, in the matching process we optimized the Jaccard Index directly.

In our experiments, we also compare the RI and JI values of the leaf categories of the YAGO+F mapping with the values obtained by an alternative mapping function PARIS [ 15 ] -a recent approach t o align ontologies. PARIS computes the probability of the subclass relationships among the classes of different ontologies. To facili-tate our comparison, while using PARIS, we align each Freebase category with its most probable superclass in the YAGO ontology, computed using Equation 15 in [ 15 ]. Figure 4 presents the R I values for each leaf category obtained using YAGO+F and PARIS alignments. The X -axis of Figure 4 presents the percentage of leaf c ategories in the resulting mapping sorted by the RI and JI value correspondingly. The Y -axis presents the corresponding RI and JI values.

As we can observe, the YAGO+F mapping performs better than the PARIS-based mapping with respect to both, RI and JI val-ues. This is because with PARIS, the probability of an alignment is higher for more general classes, such that more Freebase categories are jointly assigned to one YAGO category in a higher level of the hierarchy. In total, using the PARIS-based alignment, 1,391 Free-base categories are assigned to only 67 YAGO categories, whereas YAGO+F assigns these categories to 1,234 YAGO categories. This way, the mapping obtained by YAGO+F is more specific than the PARIS-based mapping.

With respect to the YAGO+F mapping, on the one hand, the RI values are very high for all the YAGO+F categories, which reflects the fact that the matching of the Freebase categories highly pop-ulated with shared instances is very accurate. On the other hand, the values of JI vary. 22% of the YAGO+F categories possess a value JI  X  [0 . 9  X  1] , for the further 16% of the categories the JI is within [0 . 5  X  0 . 9) . Finally, the rest of the YAGO+F categories possesses the JI values below 0.5.

The group of the YAGO+F categories with the highest JI val-ues includes the cases where all the shared instances of a Freebase category are contained in one YAGO category. For example,  X  X o-cation tw provincial city X  is matched to the Wikipedia category  X  X rovincial cities of Taiwan X  ,  X  X edicine artery X  to the WordNet category  X  X rtery X  ,  X  X ood bottled water X  to the Wikipedia category  X  X ottled water brands X  ,  X  X uminance unit X  to the Wikipedia cate-Rand Index (RI) Jaccard Index (JI) Figure 4: Rand Index and Jaccard Index of the Leaf Categories u sing YAGO+F and PARIS gory  X  X nits of luminance X  , and  X  X ood culinary technique X  to the Wikipedia category  X  X ooking techniques X  .

The YAGO+F categories with the JI values of (0.5-0.99] pos-sess many shared instances, almost all of which are found in one YAGO category. In this case the YAGO category will most likely provide an adequate mapping for the Freebase category. This group includes 280 YAGO+F categories. For example,  X  X ocation jp pre-fecture X  is matched to the Wikipedia category  X  X refectures of Japan X  ,  X  X edicine hospital X  to the WordNet category  X  X edical building X  ,  X  X ilm X  to WordNet  X  X ovie X  ,  X  X ook poem X  to WordNet  X  X oem X  ,  X  X usiness company type X  to the Wikipedia category  X  X ypes of com-panies X  , and  X  X ducation academic X  to WordNet  X  X cientist X  .
The lower JI values of the remaining YAGO+F categories are due to the incompatibilities in the category structures of Freebase in YAGO. First, the shared instances of a Freebase category can fall into a wide spectrum of the YAGO categories, i.e. there does not exist any clearly defined equivalent YAGO category. These Free-base categories include  X  X isual art subject X  ,  X  X edia common quo-tation subject X  ,  X  X ook periodical subject X  ,  X  X ilm subject X  , and  X  X musement parks ride theme X  . Second, in comparison to Free-base, YAGO may lack a specific intermediate category, such that a Freebase category can either be assigned to the most specific par-ent, which is in fact too general, or to one of the children cate-gories, which are too specific. For example, the Wikipedia cate-gories  X  X viation accidents and incidents officially attributed to pi-lot error X  , and  X  X irliner accidents and incidents caused by fuel exhaustion X  are direct subclasses of the WordNet category  X  X cci-dent X  . Then, the Freebase category  X  X viation accident type X  can either be mapped to one of the more specific categories (with a high F N value), or to a too general category (with a high F P value).
In summary, given a compatible category structure, our mapping provides good results for a significant number of the YAGO+F cat-egories. Nevertheless, some Freebase categories cannot be clearly mapped to YAGO due to incompatibilities in the YAGO and Free-base structure. In future work we will investigate how to improve matching by introducing new categories that incorporate both YAGO and Freebase schema information into a richer ontology.
In related work, YAGO and Freebase were brought together in the context of Linked Open Data [ 3]. Linked Data is a method of p ublishing on the Semantic Web that connects pieces of structured data, information, and knowledge to build the Web of Data. This way of publishing enables data from different sources to be con-nected and queried. The LOD cloud (i.e. the datasets published in the LOD format) loosely connects shared instances of Freebase and YAGO through the DBpedia references. The systematic inte-gration of YAGO and Freebase at the schema level based on these shared instances as described in this paper takes an important step further towards tighter integration of LOD, empowering discovery of new relations across the datasets contained in different knowl-edge bases and enlarging the scope of the possible applications that use the Web of Data.

Schema matching plays an important role in the context of re-lational databases (see e.g. survey of Rahm et.al. [ 14 ]), as well as i n the context of XML (e.g. [ 7]), and ontologies on the Semantic W eb [ 8]. The aim of the schema matching in relational databases i s to identify the most similar matching element(s) in a flat rela-tional schema. In addition, malleable schemas enable more flex-ibility in schema matching by relaxing definitions of attributes or relationships [ 18 ]. In contrast, the systems for XML and ontology m atching are required to identify the most-specific-parent or the most-general-child within the relevant branch of the hierarchy [ 8]. P ARIS [ 15 ] quantifies the probability of whether the classes of two o ntologies are in a subclass relation. In this work we apply the existing schema matching techniques to address a novel problem, namely to enrich a widely used YAGO ontology with large scale community-created Freebase data. We analyze and compare the initial and the enriched structures of the YAGO ontology and dis-cuss parts of the ontology relevant to describe a large scale real-world heterogeneous database such as Freebase.

Recently, YAGO+F has been successfully applied to increase ef-ficiency of query construction applications over large scale data [ 6, 5]. Query construction systems enable naive users to pose com-p lex questions to structured databases in an interactive process. The users of these systems start from simple keywords and incre-mentally refine the initial keyword query into the intended struc-tured expression by selecting query construction options suggested by the system. In this scenario, YAGO+F provides a backbone to summarize the database schema and to create informative options. These options help to reduce the search space with every user inter-action efficiently and minimize the overall number of required user interactions. As reported in [ 6], using YAGO+F the interaction cost o f complex queries over Freebase could be reduced significantly in comparison to other ontologies. In this paper we considered the problem of enrichment of the Freebase dataset with the semantic categories of the YAGO ontol-ogy, to connect them not only at the instance level but also at the schema level. The resulting merged dataset YAGO+F provides a f urther important step towards tighter interconnection of the Linked Open Data cloud, and will hopefully enable many future applica-tions that can profit from a wide variety of Freebase data clearly arranged into the semantic categories of the YAGO ontology. For example, YAGO+F has already found application in the incremen-tal query construction, where it enables for significant reduction of the user interaction cost for complex queries.

The results of our experiments confirm the good quality of the matching in cases where the YAGO and Freebase category struc-tures are compatible, but also show incompatibilities between the category schemas of YAGO and Freebase. In future work we will investigate how to improve matching by introducing new categories that incorporate both YAGO and Freebase schema information into a richer ontology which will provide even richer semantic infor-mation suitable for Freebase data, avoid the difficulties caused by incompatible YAGO and Freebase hierarchy structures and incom-patible class instance assignment, and potentially improve both the YAGO hierarchy as well as Freebase schema information.
This work was partly funded by the European Commission under grant agreement n. 270239 (ARCOMEM), BMBF ("Gute Arbeit", Re-SozIT), and COST Action KEYSTONE (IC1302). [1] Peter Adolphs, Martin Theobald, Ulrich Sch X fer, Hans [2] Alexander Bilke and Felix Naumann. Schema matching [3] Christian Bizer, Tom Heath, and Tim Berners-Lee. Linked [4] Kurt Bollacker, Colin Evans, Praveen Paritosh, Tim Sturge, [5] Elena Demidova, Xuan Zhou, and Wolfgang Nejdl. Freeq: an [6] Elena Demidova, Xuan Zhou, and Wolfgang Nejdl. Efficient [7] Hong-Hai Do and Erhard Rahm. COMA: a system for [8] AnHai Doan, Jayant Madhavan, Pedro Domingos, and Alon [9] J X r X me Euzenat and Pavel Shvaiko. Ontology matching . [10] Christiane Fellbaum, editor. WordNet An Electronic Lexical [11] Max-Planck Institute for Informatics. Yago2 ontology. [12] Google. Freebase data dumps. [13] Christopher D. Manning, Prabhakar Raghavan, and Hinrich [14] Erhard Rahm and Philip A. Bernstein. A survey of [15] Fabian M. Suchanek, Serge Abiteboul, and Pierre Senellart. [16] Fabian M. Suchanek, Gjergji Kasneci, and Gerhard Weikum. [17] Cong Yu and H. V. Jagadish. Schema summarization. In [18] Xuan Zhou, Julien Gaugaz, Wolf-Tilo Balke, and Wolfgang
