 ORIGINAL PAPER Hossein Khosravi  X  Ehsanollah Kabir Abstract An integrated OCR system for Farsi text is proposed. The system uses information from several knowl-edge sources (KSs) and manages them in a blackboard approach. Some KSs like classifiers are acquired a priori through an offline training process while others like statisti-cal features are extracted online while recognizing. An arbi-ter controls the interactions between the solution blackboard and KSs. The system has been tested on 20 real-life scanned documents with ten popular Farsi fonts and a recognition rate of 97.05% in word level and 99.03% in character level has been achieved.
 Keywords Farsi  X  Persian  X  OCR  X  Blackboard approach  X  Segmentation and recognition 1 Introduction Nowadays with advancement in character recognition technology, OCR systems are well known for lots of peo-ples. There are several commercial OCR products available for popular languages in the world. Today anyone who buys a scanner expects to find an OCR software within the scan-ner package as well. At the same time users of some lan-guages suffer from lack of such OCR product for their native language.

Farsi or Persian is the official language of more than 150 million peoples of the world. Like Arabic, Farsi is a right to left script, but there are some differences like number of alphabets, font styles, vocabulary and signs, which make Farsi OCR somehow different from Arabic. In last decades the fact that both products are basically developed for other languages.

To have a Farsi OCR system with high accuracy we should consider all aspects of Farsi language. There are several knowledge sources (KSs) related to Farsi scripts, which can help us to develop more reliable and more accurate OCR system.

In this paper, we propose an integrated Farsi OCR sys-tem, which uses the information of several KSs in black-board architecture. Some KSs like classifiers and vocabulary are stable and will not change during the recognition process, but some others like signs and dots information are transient and will change while recognizing a text. We used blackboard approach because it is simple to be modified and we are able to add new KSs without changing the code significantly. The rest of the paper is organized as follow. In Sect. 2 Farsi script specifications from OCR point of view will be described. Section 3 describes the integrated OCR system which is the main part of our work. In Sect. 4 the process is demonstrated through an example. Section 5 includes exper-imental results and the conclusion follows in Sect. 6 . 2 Farsi script specifications Farsi, like Arabic, is a right to left script and has its own specifications. Here we describe the most important features of Farsi script from OCR point of view.  X  Letters are written from right to left, but numerals are  X  Some letters take different shapes according to their posi- X  Each word is composed of one or more character(s) and/or  X  Some letters only differ in number or position of their  X  Some digits are very similar to some letters: digit 1  X 1 X 
This value is used in line detector to avoid detection of noise pixels as lines (Fig. 2 ) and to prevent two successive lines to be merged incorrectly.

Line height is computed from average height of text lines detected by line detector as follows: H = 1
It helps the system to find merged or split lines and correct them.

Base line position is computed through horizontal projec-tion of each line as follows (Fig. 3 ): B = arg max
Base line is useful for segmentation module, because almost all segmentation points in Farsi script are located on base line. If a line is long, two base lines will be computed, one for the left part of the line and another for the right part. implemented several statistical features and after some experiments considering speed and accuracy we selected a combination of them for each classifier, e.g. Characteristic loci (81 features), Size (3 features) and Gradient histogram (144 features) [ 11 ] is used for isolated character classifier. 3.3 KS2, KS3: font and language confidences In our OCR system a font recognition module [ 12 ] recognizes the font type of individual lines. For each font, special char-acter recognition engines have been trained; so every failure in font recognition may decrease overall performance. Since font recognition accuracy is not perfect we keep confidences of three most probable fonts as KS to be considered later. At first the system recognizes the text line assuming the most probable font, but if it is recognized with low confidence, its font will be changed to the next candidate and it will be recognized again. This process may be continued up to three times. The arbiter controls this process and decides through character confidences that a line is recognized well or not. Confidences are values between 0 and 100 which determine how good an action is performed, e.g. if a character is rec-ognized with confidence of 99% the result can be approved without any doubt, but when its confidence is 40% it is not so satisfactory. Usually, confidences come from classifiers out-puts and may be modified through the recognition process. For example if a character is recognized as Ghaf  X   X  but its number of dots is different from two, its confidence will be decreased appropriately.
 Another KS is language confidence. If a document has English characters between Farsi scripts, a language recog-nizer module will detect English words from Farsi words. Here we are not going to describe the structure of this mod-ule but like font recognition module, the result of language recognizer is not perfect, so we do not rely on it. At first we recognize the word with the proposed language from lan-guage recognizer; if it is recognized with acceptable con-fidence, the detected language will be approved, otherwise the word will be recognized with the engines of the other language and the result with the higher confidence will be accepted. It must be mentioned that English words are recog-nized using an existing OCR engine. 3.4 KS4 sign classifier As described in Sect. 2 , dots and signs have important role in Farsi letters, so that some letters only differ in number or posi-tion of dots, e.g. letters Je  X   X , He  X   X , Khe  X   X  and Che  X   X  have the same shapes, but different dot attributes. Consider-ing this characteristic, we designed a sequential recognition strategy in which at first, character/subword body (Fig. 5 )is recognized and then dots and signs info is considered to find final character.
 (classes 47 and 48) are treated as isolated characters because they have special shapes which cannot be segmented easily. Class 49 is an extra class developed for subwords; if the clas-sifier activates this class, it means that the input is a subword not an isolated character, so it must go through segmentation and recognition module (Sect. 3  X  6 ).

It is important that sometimes this classifier may be uncer-tain, i.e. its output confidence for the winner class is low. In these cases the system does not rely on its result and sends the subword into segmentation module as well and decides later; if the overall confidence of the segmented subword is better than the confidence of the isolated character, it will be assumed a subword and the result of segmentation will be accepted otherwise the isolated character will be remained. 3.6 KS6: segmentation and recognition 3.6.1 Segmentation An important part of our system is the segmentation module. Since a subword is a combination of joint letters, segmen-tation is required to break each subword to its composing components. There are several segmentation algorithms for Farsi/Arabic scripts, which can be divided into four groups: methods based on vertical projection analysis [ 1 , 20 ], contour-based methods [ 4 , 9 ], methods based on profile anal-ysis [ 13 ] and recognition based segmentations [ 5 ].
Every failure in segmentation module may be unrecov-erable on the other hand there is almost no segmentation algorithm which provides segmentation points perfectly. Seg-mentation and recognition is one of the best approaches which its segmentation errors can be recovered through recognition. In this method we can recover segmentation errors while rec-ognizing each token of the segmented subword. It is impor-tant that a primary segmentation algorithm must be designed so that under-segmentation does not occur, but over segmen-tation usually will be recovered during recognition.
We designed a profile-based segmentation for the initial step (Fig. 6 ). This algorithm is more reliable from projection analysis methods and is faster than contour based methods. Segmentation process is as follows: 1. Crop subword body (Fig. 5 ) around the baseline position stroke was recognized as a valid character with good confidence, it will be stored; otherwise two successive strokes will be merged and recognized again. This process may be continued up to four times or while a valid character found. Although this method of scanning is better than rec-ognizing all strokes separately, but if a non-character stroke subwords from right to left, but when encountering numeric subwords or English words, we must buffer their result until the next Farsi subword and then reverse their order to have the correct order in output text. 3.8 KS8, KS9: vocabulary and confusion matrix Sometimes a word may be recognized with low confidence. If this word exists in the vocabulary it will not be changed Levenshtein distance [ 15 ]. The vocabulary contains about 55,000 Farsi words with their occurrence probability.
Confusion matrix is a useful knowledge that shows how often two classes may be substituted with each other. This matrix can be extracted through trained samples, or built heuristically. From this knowledge we can decide to replace low confidence characters with suitable choices whenever required. For example, character Gaf  X   X  usually is unrec-ognized as Kaf  X   X , so we can substitute these two characters with very low cost.

Levenshtein distance is a cost function which shows how many operations, substitution/deletion/addition, is required
Beside KSs described above, some tools were also devel-oped to facilitate the recognition process; some of them like Feature extractor, Boosted classifiers, Line detector and Spell checker are required to produce some KSs and some others perform specific actions: Overlap Detector (Fig. 12 ), Body Reconstructor , Dot Remover , Character Enhancer ,etc.In the next section we will demonstrate some of these tools through an example. 4 An example Here we describe the recognition process through an exam-ple which shows how KSs interact with the blackboard to recognize a line of text. We tried to select a sample text line in which almost all KSs have good contribution to recognize it (Fig. 13 ). In this example, the recognition process of the
A similar process is happened while recognizing the next subword  X   X , which its body is broken into three parts due to binarization. 5 Experimental results To evaluate the proposed system we scanned 20 pages from 16 different books at 300 dpi, using a flatbed scanner (Appendix A). We designed three strategies for the recognition: 1. Recognizing documents with the proposed system. 2. Recognizing after removing some simple KSs from the 3. Recognizing after substituting KS2, font confidences,
The first strategy shows the performance of the system itself. Here the average recognition rate of 95.81% in word level and 98.67% in character level was achieved. The second strategy designed to show how much some simple KSs are important in this system; here we removed four KSs/Tools: Body Reconstructor, Overlap Detector, Character Enhancer and Fonts Confidences. As expected the average recognition rate was reduced from 95.81 to 86.66%. Font Confidences had the most effect on performance reduction. Body Recon-structor and Overlap Detector had almost the same effect on performance and finally Character Enhancer had the low-est effect on average recognition rate. The final strategy was designed to show how a low performance KS may decrease the overall recognition rate. In this stage we substituted the font confidences KS with user provided knowledge about fonts involved in each document. In other words we replaced the font recognizer module with a perfect font recognizer. In this way the average recognition rate increased to 97.05%. Table 4 shows the global results briefly and Table 5 shows documents information and their recognition rates using the proposed system.

We also put the average execution time for each strategy in Table 4 . As it shows, average execution time per each doc-ument is fairly short. These times are computed on a PC with 2.4 GHz CPU and 2 GB of RAM. The required time in the first strategy is greater than others, because here a time for font recognition and taking care of its output confidences is added. The details of execution times are shown in Fig. 14 .
According to Table 5 , we find that test pages two and seven contain Compset font which is not supported in the proposed system. But since this font is too similar to Lotus, the overall recognition rate was not affected noticeably (Table 5 , second and seventh row).

In test page 12 which the main font is Karim, the recogni-tion rate is the lowest within all pages, 84.92%, because this font is not supported and it is not similar to any other font. Other pages have been read with high accuracy.

These results show that the system performance on typ-ical documents of familiar fonts with resolution of 300 dpi is quite well. However, for the case of low quality docu-ments like Fax pages, old documents, camera images and low-resolution documents, the problem is still open. In this work, we did not consider these kinds of documents. In these cases there are several broken characters, nonlinear distor-tions and noise so that we need some other KSs to be designed to improve the system accuracy. For example a preprocessor module may be required to enhance the quality of the image.
One advantage of our system is that we can compute an average confidence for the whole document. We have sev-eral confidence measures from several KSs, Font Recognizer, Language Recognizer and Other Classifiers. From these con-fidences we can compute a confidence for each word and for the whole document as well. Here we computed a confidence measure called average document confidence as follows: ADC = Where n is the number of detected words in the document and C [ i ] is the confidence of word[i] which is computed through character confidences, signs confidences and word occurrence probability in the vocabulary.

This confidence shows how good a document is recog-nized. In Fig. 14 we show the recognition rates and average document confidences for all 20 test documents graphically. As this figure shows, the average document confidence almost goes with the recognition rates. 6 Conclusion In this paper, we proposed an integrated Farsi OCR system based on blackboard architecture. In this system several KSs and tools interact with the blackboard and perform appro-priate actions whenever required. An arbiter controls KSs actions and decides whether the problem is solved satisfac-torily or not based on current blackboard state. The system can recognize ten popular Farsi fonts using a Font Recognizer module. It also detects English words in between Farsi sen-tences and recognizes them using an English OCR engine. The proposed system was tested on 20 real-life documents. The average recognition rates of 97.05% on word level and 99.03% on character level were achieved. Based on several confidences from some KSs, an average document confi-dence is computed which shows how good a document is recognized.
 References
