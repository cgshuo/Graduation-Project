 tributed resources, such as computing resources, data sources, instruments and appli-building more and more complex applications to manage and process large data sets, and to execute scientific experiments on distributed grid resources. Means of compos-Some efforts in the research of business workflow and web services orchestration can be reused in grid workflow systems. Grid workflow is  X  X  workflow intended to solve complex, and dynamic Grid environments that comprise of one or more virtual or-ganizations (VOs) X  [2]. It is clear that scientists conduct a sequence of grid complex administrative domains. We develop an adequate grid workflow management system problem solving processes without having to know any details of the underlying com-plex structure and dynamic state of VOs. 
However, there are new challenges needing to be addressed in a typical grid envi-has been a lot of work on integrating the two. In our grid workflow management sys-tem, we use multi-agent technology to meet those challenges. Our AGWMS has a The workflow engines of AGWMS may scatter in many hosts to balance the system X  X  workload using JINI [4] technology. Our AG WMS also applies AI planning technol-ogy to enhance its intelligence and robustness. Planning has been used to generate the agent plan automatically. 
The paper is organized as follows. We discuss related work in Section 2. Section 3 presents the architecture of AGWMS in detail. Section 4 gives some planning defini-tions and algorithms. Section 5 presents AGWMS X  X  multi-agent platform. A case study and the implementation of system are given in Section 6. We conclude in Sec-tion 7 with lessons learned and future research plans. DAGMan [5] is developed to schedule jobs to Condor system in an order represented by a DAG and to process them. With the integration of Chimera [6], Pegasus [7] maps and executes complex workflow based on full-ahead planning. In Pegasus, a work-flow can be generated from metadata description of the desired data product using AI-composition and enactment of bioinformatics workflow for the life science commu-The workflow management system for grid computing, called GridFlow [9], is pre-sub-workflow scheduling. Simulation, execution and monitoring functionalities are provided at the global grid level. McRunjob [10] is a grid workflow manager used to provide a  X  X un code X anywhere, then post process results, then ... X  grid-level script-ment of grid workflow management systems. From the Fig. 1, you can see that there are four layers in AGWMS. 3.1 User Layer The user layer is the interface between user and system. There are mainly two mod-ules in this layer: Workflow modeling tool and Workflow console. Workflow Model-ing Tool is used to model the complex grid app lication, which can be seen as a collec-in files or database with multiple formats. In the system, we have two kinds of model-workflow of some application domains. The other is micro-workflow modeling tool, which is used to model the plan of domain-specific agent. Users can submit the pre-ferred workflow model to the system for execution using Workflow Console . It X  X  also have two types of it: Web-based and Application-based. 3.2 Engine Layer gine is distributed using JINI technology. It X  X  also based on ECA rules. The engine is responsible for the instantiating and scheduling of the workflow, and it needs to moni-applications or operators wh en executing the workflow. We can balance the workload of the engine using JINI technology. It X  X  adaptive and efficient when there are many coinstantaneous execution requests coming. 3.3 Agent Layer agents. There are many domain-specific agents in the multi-agent platform. The agent create the plan automatically at run time. Section 5 will give the details. 3.4 Adapter Layer The adapter layer makes it easy that AGWMS invokes external applications. Adapter tails. Upper functionality modules only need to know the interface parameters of the input and output ports, through which streams of data tokens flow. Our adapter library such as Web Service, Grid service, Database operation, DCOM, Java class, Command line, GridFTP, GlobusJob [13] and so on. More application types only need more adapters plugged in. 4.1 Definitions useful definitions as following [14,15]: 
Definition 1: A planning problem can be described as a three-tuple: &lt;  X  ,  X  ,  X  tions the planner can perform in attempting to reach a goal state. planning problem. 
Definition 3: A goal is a partially specified state, represented as a conjunction of before it can be executed, and the effects that ensue when it executes. 
In our system, each plan has following four components, where the first two define the steps of the plan and the last two serve to determine how plans can be extended: z A set of actions, which make up the steps of the plan. The empty plan contains 4.2 Algorithms and we can get the final concrete workflow by Algorithm 2 . 
Al g o r it hm 1 : Algorithm 2: abound. We define an agent as "a software component that acts autonomously on mous, communication, self-consistent, goal-oriented, and reacting to environment. Other high-level features such as learning, negotiation are also of benefit. All agents There are four kinds of agents in the layer depicted in Fig. 2. 5.1 Plan Agent (PA) PA is the main component of abstract workflow. It is domain specific, and its capabil-workflow denoted in business workflow domain. 
PA plan behaves externally as three parts:(1)Goal(Post-conditions of the plan);(2)Context(Pre-conditions of the plan);(3)Content(Actions X  sequence of the plan). To find a suitable plan only means to search in the plan library to get the plan whose context can be meet by the given conditions and goal can contain the required plan has many common components comparing with the generic workflow, such as actions, such as invocation of Web or Grid Services, operations on database, or exe-cution of other kinds of application, will be replaced with application agents (AAs) in the plan. We prefer no other plans embedded in PA X  X  plan. Nested plans will be com-plicated. So the actions in the plan of PA are all atomic type, and they can be executed directly. The capability of a PA may be represented with the intersection of precondi-tions and the conjunction of effects of its all plans. Some definitions are given below: The preconditions of PA are seen as a part of PA X  X  beliefs, and the effects of PA are seen as PA X  X  intention. To check whether a PA has the demanded capability means to be fulfilled, the PA will have the demanded capability. generated automatically and the PA X  X  capability will be updated and enhanced. 5.2 Application Agent (AA) Each AA corresponds some application adap ters from the same domain. Both precon-adapter instances. Some definitions are given below: During the generation of a new plan, PA will search for suitable AAs in action library that includes all relevant AAs according to the demanded initial states and goals. The two qualifications are given below: IO parameters of those adapter instances are also stored in AA. According to different (JCAg), Database agent (DBAg), Command Line agent (CLAg), etc. SAg corre-sponds a list of web services that have the specific function. In planning phase, SAg is will invoke the selected service. So SAg is the intelligent and adaptive service broker. 5.3 Information Agent (IA) IA is the registry of all agents in the multi-agent platform. We adopt multi-layer dis-efficiency in time of processing. The general IA has the registration information about all local IAs. 5.4 Merging Agent (MA) Details are given in Algorithm 2 . In order to show how the planning technology presented in the paper works, this sec-tion introduces a service-based system model for online conference arrangement plan-selection and applications adapter selection are all based on those term ontologies. 6.1 Abstract Workflow Model We assume several international conferences will be held in Shanghai Jiao Tong Uni-arrangement service for the future attendee. At first step, they build an abstract work-flow using the macro-workflow modeling tool (See Fig. 3). 
With their experiences, they believe some parameters should be given before in-voking the workflow. We may call these parameters  X  Preconditions  X (See Table 1 ). model (See Table 2 ). 6.2 Present Plan Agents Three plan agents are assumed in the system. Their descriptions are given below. z Conference_Registration PA : z Ticket_Booking PA : z Hotel_Reservation PA : Hotel_Reservation PA has one plan: HR1 . Definition of HR1 is: And the capability of the PA may be represented as below: 6.3 Analysis and Planning We assume the attendee will arrive at the day before the conference open day and go the user requirements about three functionality modules, appropriate PAs are selected and matched at first. Then we get the results as follows: z
Conference_Registration PA can satisfy the requirements of Register_Conference z
Ticket_Booking PA can satisfy the requirements of Book_Ticket module, but TB1 The capability of the PA also holds the line. z Hotel_Reservation PA can satisfy the requirements of Reserve_Hotel module, and 6.4 Final Concrete Workflow AttendeeRegistration  X  TicketQuery3  X  PassengerBooking  X  HotelSearch and maximum QoS value from the candidates, and bind it to run. 6.5 System Prototype Implementation Our AGWMS is developed with Java language. A prototype has been developed ac-cording to the framework. Fig. 5(a) gives a screenshot of the macro-workflow model-developed using JADE [16] technology. Fig. 5(c) shows the agent-hosting environ-ment. The prototype runs on Windows platform. This paper has described a planning enhanced Grid Workflow Management System based on agent (AGWMS). We give its four-layer architecture and describe its com-ponents. The adapter middleware increases the scalability of AGWMS. Use of agent technology makes AGWMS more intelligent. Our multi-agent platform makes the go further using planning technology in AGWMS and do a practical performance evaluation to show that our agent-based workflow management system can be effi-ciently used in the Grid environment. 
