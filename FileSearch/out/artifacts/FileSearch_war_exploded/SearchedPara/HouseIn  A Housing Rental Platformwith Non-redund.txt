 Inthemodernsociety,HousingRentalPlatforms(HRPs)suchas rentalhouses.com, 58.com, ganji.com provide people convenient ways to find their accommodations. Along with the development of those platforms, however, the redundancy of the rental advertising information within and across platforms brings unpleasant user experience. Besides, rental advertisements are usually presented in the form of a list, which can hardly give users a straightforward big picture about the housing rental market of a particular interested area.

We develop HouseIn, a novel HRP that expects to: 1) provide users a clear big picture from several aspects about the housing rental market of a particular interested area; and 2) detect those adv ertisements referring to the same prop-erty, such that to give users a price comp arison between various platforms for the same apartment for rental.

The core challenge in implementing HouseIn lies on how we identify duplicate advertising records referring to the sam e apartment within and across sources, given that there is usually no exact Unit/Building Number of the apartment for the sake of privacy issue. Besides, the detailed information (either structured or unstructured description information) about the apartment can be various or missing due to different accommodation agencies in different HRPs. For instance, the four posts (G2, G4, T2, and A3) highlighted in Fig. 3 actually refer to the same apartment, although they do not look the same. Plenty of work [1 X 3] has been done on RM, but they can hardly handle the RM problem between these housing rental posts in our case, given that the inconsistency of attribute values within and across data sets and the existence of missing attribute values. To tackle the problem, we employ both structured and unstructured information in these posts in two ways: (1) we employ a decision tree based model [4] to leverage the structured attribute values such as  X  X ommunity, location, house type, area and floor X  to find possible duplicate posts in an effective and efficient way; and (2) we make use of the detailed description information in each post (unstructured textual information) to further detect duplicate posts that can not identified based on structured information only. In this demonstration, we will show the advantages of HouseIn with several demonstration scenarios. The system overview of HouseIn is depicted in Fig. 1. There are basically three modules in HouseIn: Duplicates Detection (DD) Module, the Record Matching (RM) module and the Display module. (1) DD Module: This module detects duplicate posts referring to the same apartment within one data source. The posts sharing the same URL are firstly merged, since they are the updates of the same post. The challenge lies on how to detect the duplicate posts having different URLs, given that these records may have inconsistent or missing attribute values. Most existing methods [1 X 3] work on measuring the similarity between the key attribute values of record pairs, but can hardly handle the problem well when the key attribute values look dissimilar. As an alternative, we employ a novel method called NokeaRM [4], which uses both key and non-key attribute values in doing RM. It is a rule-based algorithm based on a tree-like structure, which can not only deal with noisy and missing values, but also greatly improve the efficiency of the method by finding out matched instances or filtering unmatched instances as early as possible [4]. (2) RM Module: The RM module is responsible for matching records between multiple sources. The same techniques used in the DD module can be applied here. But for those matched records that can not be identified, we use the un-structured descriptive information to assist the process of matching. We first find out important terms that can help to identify the similarity between these records from all these records X  descript ions, and then calculate the similarity between these records based on the TF/IDF scores of these terms. (3) Display Module: The display module of HouseIn is especially designed to provide a user-friendly interface with gr eat user experience. In particular, based on the record matching results, we do real-time statistic analysis to get some general information such as the average price, density, and age of the houses in different areas, and then map the data into a city map to show a big picture about the rental market in their interested area. Meanwhile, we provide users a price comparison between various platforms/posts for the same apartment for rental. We demonstrate three scenarios to show the advantages of HouseIn, where the datum are from three popular HRPs in China including GanJi, 58 and Anjuke. 1) Map-based Market Overview. HouseIn provides an overview of the rental market in a user-selected area from the fo llowing several aspects: (1) the distri-bution of the house supply density (Fig. 2(a)(b)); (2) the distribution of the rental price (Fig. 2(c)); and (3) the distribution of the house age (Fig. 2(d)). 2) Ad. List with Advanced Search. Similar with popular HRPs, HouseIn also let users to input the price range, interested location etc. to quickly get short-listed advertisements, where all duplicate advertisements are removed. Besides, users can also direct click on a point i n the city map to get the advertisement list of the area as shown in Fig. 2(d). 3) Price Comparison. For every distinct apartment for rental, we list different advertisements (with different renta l prices) referring to the apartment.
Jianfeng Du 1 ,JunZhao 2 , Jiayi Cheng 1 , Qingchao Su 1 , and Jiacheng Liang 1 The car market in China is growing rapidly as more people can afford pri-vate cars. Nevertheless, cars are still expensive, and thus most people need to consider carefully before making their final purchase decisions. A number of car selling websites have emerged in China to help customers purchase cars. Some car selling websites such as Bit Auto ( http://www.bitauto.com/ )pro-vide only simple search interfaces to the users. Users can only use keywords about brands or car series to express thei r requirements. Other websites such as Auto Home ( http://www.autohome.com.cn/ ) provide advanced search in-terfaces to the users. Although users can express more detailed requirements in such a website, the website cannot suggest alternative cars to the users when no exact matching can be found. Existing car selling websites are hugely insufficient in helping potential buyers make their decisions. A car selling website that can guide users to express their detailed requirements and suggest relevant cars when no exact matching can be found is therefore highly desirable.
 In this paper we present an on tology-based ca rp urchase guiding s ystem, ONCAPS, which can achieve the above desirable features. It has the follow-ing novelties compared to existing car selling websites. Firstly, it integrates data from multiple car selling websites and provides more complete information on the market. Secondly, it captures user pr eferences on car features by an analytic hierarchy process (AHP) based approach, i.e., by organizing car features in a hierarchy and capturing pairwise relative weights for sibling features. Thirdly, it computes personalized distances betw een cars and requirements by a weighted sum model, where ontology reasoning is involved. Finally, it tackles the problem of no exact matching by showing alternative options that have the minimum per-sonalized distance to the given requirem ent. All options are shown with explana-tions to tell e.g. the differences between a recommended car and the requirement as well as how the personalized distances are computed. ONCAPS has two parts, the back end and the front end, as shown in Fig. 1. The back end provides facilities for integrating data from multiple car selling websites to a central ontology, which is expressed in the tractable RL profile of OWL 2 [3], the newest W3C recommended language for modeling ontologies. The central ontology consists a TBox declarin g logical relations between classes and properties and an ABox asserting instan ces of classes or properties, where the TBox is constructed manually and the ABox is generated automatically through a sequence of components in the back end. Every wrapper component extracts tuples from a certain car selling website, where the field names of extracted tuples are mapped to class or property names in the central ontology. The triple converter component directly transl ates tuples to RDF triples and feed them to the ABox. The instance matcher comp onent identifies the same cars from different websites. It selects a representa tive identifier for every group of cars that are recognized to be the same and then repla ces car identifiers in triples with their corresponding representative identifiers. It also adds to the ABox all triples that can be entailed from the ontology by applying the standard forward inference method in OWL 2 RL systems [3]. The controller component periodically detects data updates in the crawled car selling websites and schedules the incremental execution of all wrappers, the triple converter and the instance matcher.
The frond end provides facilities for capturing user preferences on car features and for computing recommended cars to a given requirement. The weight consis-tency restorer component resolves inconsistency for the pairwise relative weights captured by the AHP based approach. The matchmaker component computes the personalized distances of all cars t o a given requirement by exploiting a weighted sum model, where the weights ar e the personalized ones stored previ-ously for the user who raises the requirement. It presents users all the cars that have the minimum personalized distance.
 ThekeymethodsusedinONCAPSaredescribedbelow.
 Instance Matching. For integrating data from multiple websites, we need to firstly match field names in every websi te with class or property names in the TBox, and secondly, match individuals such as car identifiers between different websites. While the former task can be done by manually defined rules and is relatively easy, the latter task is hard because there are many individuals in a website and it is infeasible to manually retrieve all individuals in advance. Hence we employ the instance matching method proposed in [4] to match individuals. The method builds the name vector and the virtual document vector for each individual and generates two inverted indexes for these two groups of vectors. Then all matches are selected by several h euristic rules defined on the indexes. Personalized Weight Capturing. To capture persona lized weights on car features, it is impractical to ask a user to directly specify the weight of every feature. This is because the user can eas ily confuse with a mass of car features and is hard to balance the weights. To alleviate the effort for capturing weights, AHP [1] can be employed. It organizes all car features in a hierarchy and requires a user to input pairwise relative weights for sibling features only. By following [1], we construct a two-level hierarchy on car features and establish a many-to-one correspondence between class or property names in the TBox and the car features. AHP comes with efficient algorithms for computing absolute weights from the matrix of pairwise relative weights (called the pairwise comparison ma-trix or simply PCM ) under the constraint that the sum of all weights is one. However, these algorithms cannot work out reasonable weights unless the given PCM is sufficiently consistent , i.e., the consistency measure satisfies a threshold for all 1  X  i, j, k  X  n ,andwhere a ij is the relative weight of the i th feature over the j th feature. To resolve inconsistency for a given PCM, we employ an efficient method proposed in [2] to compute a new PCM which is sufficiently consistent and is as close as possible to the given PCM.
 Personalized Distance Computation. In ONCAPS, a requ irement on cars to be purchased is represented by a conjunctive query of the form where x and y i are variables, u i is an individual or a string, v ij is a number, A i is a class name, r i and s i are property names, and the atom y i y  X  v substitution for x makes the query entailed by the central ontology. To avoid reasoning over the TBox on the fly, the instance matcher component computes all entailments of the ontology and adds them to the ABox. In this way all answers to a conjunctive query can direct ly be retrieved from the ABox without considering the TBox. The matchmaker component computes the personalized distances between cars and the given conjunctive query and presents the user all cars that have the minimum distance. The personalized distance is defined as the weighted sum of distances between a car and all atoms in the query by treating the predicates of atoms as car features. More precisely, a distance between a car whose identifier is c and a conjunctive query of the form (1) is defined as where A is the ABox with all entailments added and w ( f ) is the personalized weight of the car feature f . The following shows how d (  X , A ) is defined, where (resp. P ( s i  X  v i )) is the probability that the value of s i is not less (resp. greater) than v i , and where all the probabilities are estimated from A . We will demonstrate two scenarios about how the front end of ONCAPS works. One is on capturing personalized weights through AHP, while the other is on suggesting cars with explanations for a requirement on cars. More information can be found at http://www.dataminingcenter.net/oncaps/ .
 Acknowledgements. This work is partly supported by NSFC (61375056), Guangdong Natural Science Fo undation (S 2013010012928), and the U ndergrad-uate Innovative Experiment Project in Guangdong University of Foreign Studies.
