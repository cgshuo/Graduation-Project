 RFID (Radio Frequency IDentification) is a promising and leading technology that provides fast, reliable and automatic identifying, location tracking and monitoring physical objects without line of sight. With its inherent advantages, RFID technology supply chain management, yard management, access control and healthcare. 
In an RFID environment, RFID readers are deployed at different locations and communicate with RFID middleware via wire or wireless interfaces, and products with identified tags are transited between locations. Readers can generate a huge vol-ume of streaming data when tags move in the interrogation range of them. Like other streaming data, RFID data is continuous and enormous, meanwhile it also has the following several distinct features [1, 2].  X 
Simple and incomplete data : Data generated from RFID readers is a stream of the form ( tag_id, reader_id, timestamp, event_type ), where tag_id refers to EPCs which uniquely identify the tagged products, and reader_id identifies a reader which reads the tag, Timestamp is the reading occurred time, and event_type refers reading rates are below 100% in actual deployments. When lots of tags move through a reader, a few tags may be miss ed which causes the data is incomplete.  X 
Temporal and spatial data : RFID data is dynamically generated when tags move in the reading range. The simple form of RFID data can perverse the state change in-formation of objects, such as the reading location, reading time, and location changing history along the time. All these information are temporal and spatial. The raw RFID data is impossible to be used for user applications due to above special data features. We need to clean, filter and transform the data before sending it to user applications. According to EPCglobal stan dard [3], an RFID middleware provides these important functions for processing the raw RFID data. Therefore, it is very im-portant to know whether an RFID middleware provides these functions or not before to test its functions using raw RFID streaming data. However, building real RFID testing tool [4] can generate raw RFID data, it cannot guarantee the data contains spe-cial features which are very important for testing the functions provided by RFID middleware. In this paper, we propose a directed graph model to simulate RFID environments. create RFID test data. In the graph model, nodes correspond to RFID readers and edges determine tags X  X  movements between nodes. Virtual tags are continuously in-automatically generate RFID data when virtual tags arrive in. We define several pa-our graph model can possess the real special features. Based on the graph model, we implement a simulation tool to generate raw RFID streaming data. We also perform several experiments to evaluate our generated RFID streaming data by using a few defined metrics. Our main contributions can be summarized as follows:  X 
Design a graph model to simulate the real RFID environments.  X  Define several parameters to configure and control the graph model for generating 
RFID streaming data  X 
Design and implement a simulation tool, as well as define a few metrics to evaluate the generated RFID data. The remainder of this paper is organized as follows. Section 2 introduces the prelimi-defined parameters for configuring it. Section 4 introduces our implementation of simulation tool and experiments for evaluating generated RFID data. We conclude our work in Section 6. In this section, we briefly introduce an RFID middleware. Then we discuss several related studies on RFID middleware test and virtualization of RFID environments. 2.1 RFID Middleware As shown in Figure 1, an RFID system typically consists four components: RFID tags, readers, middleware and user applicati ons. Each tag stores an electronic product codes (EPCs) [5] in the memory to unique identify it self. Readers are capable of read-ing the information stored in RFID tags placed in their vicinity and sending the streaming data to middleware through wired or wireless interfaces. Since the raw RFID streaming data is enormous and incomplete and contains implicit information, an RFID middleware cleans it, filters it and transforms it in usable formats. Then, user applications can use the data after processed in RFID middleware. 
After processed by RFID middleware, RFID data can tell the information about what happened, where, when, and why. For example, a reader deployed at entrance of a room generates raw data form:  X  X ag 100 is read by reader A at 4:00pm X . RFID middleware can transform this data into high-level event like  X  X  LG laptop enters room A at 4:00pm X  which is more useful to user applications. So middleware is very important in an RFID system. In order to know a middleware is capable for process-ing raw RFID streaming data, we need to test it. 2.2 RFID Middleware Test A few methods related to RFID middleware test have been proposed. Oh et al. [6] analyzed quality factors for evaluating an RFID middleware and selected important middleware through a quantitative method. However, they did not mention how evaluate these factors using test data. How to evaluate these factors using test data is performance of RFID middleware and implement a software tool to test the RFID middleware. The performance testing tool cannot be used for other factors of RFID middleware mentioned in [6], and it randomly generates test data without considering special features of RFID streaming data. Park et al [7] design an architecture of RFID middleware evaluation toolkit based on virtual reader emulator that provides RFID [8] is a load testing tool that allows user to create virtual readers and tags to generate RFID data streams for an RFID system. It also does not consider the special features and human recourses since we need to deploy readers and move lots of products with tags. To address these problems, we can simulate and build a virtual RFID environ-ment for creating RFID streaming data. 2.3 Virtualization of RFID Environment process, our previous work [10] propose to use virtual environment for generating RFID data without using any real devices. A virtual environment contains three virtual components: virtual readers, virtual tags and virtual controller. Virtual readers and tags play the same roles of real devices. Virtual controller controls the movement of virtual ronments since the virtual controller manages virtual tags in a centralized way. 
This problem motivates us to propose a graph model to simulate the real RFID en-vironment. An RFID environment generally contains both static elements such as tags. Both static and dynamic elements of RFID environment should be well simu-lated in the virtual environment. We use a graph model to simulate the static elements of the RFID environment. In the graph model, nodes represent RFID readers and edges represent tag X  X  moving path among nodes. We define several parameters to simulate the changing status of tags and configure the graph model. A virtual tag gen-construct an RFID environment by creating a graph and setting parameters (Fig. 2). In this section, we present our graph model for simulating RFID environment and defined parameters for configuring the graph. 3.1 Graph Representation A graph model not only facilitates the construction of virtual RFID environment, but also provides a convenient way to configure itself and generate RFID data. nodes will perform in the same way of source nodes after tags arriving. Figure 3 shows an example of the graph model to simulate an RFID environment. In a warehouse, there are two storage rooms with RFID readers deployed at both entry observed at shipping door when they go out of the warehouse. Using our graph model, we can easily simulate this RFID environment (Figure 3). 
Various RFID environments can be simulated by using the graph model. A graph cannot fully simulate an RFID environment since the graph only represents the static elements. RFID streaming data generated from the graph model lacks of state chang-locations. We have to simulate the dynamic elements of RFID environment in the graph model. To achieve this, we define several parameters for the graph model. 3.2 Parameters for Configuring Graph Model 3.2.1 Requirements of Parameters From previous explanation, we know that raw RFID streaming data possesses some middleware. So data generated from virtual environment also should possess the same dynamic elements which are represented as graph model and the changing status of tags, respectively. We need to define several parameters for configuring and control-ling the virtual environment. The parameters are mainly related to both static and dy-namic elements of virtual environment so that RFID data with special features can be generated from the virtual environment. 3.2.2 Parameter for Node In the graph model, nodes represent the real readers. They play the same role of real readers. Nodes can read the data stored in virtual tag when tag arriving, and generate streaming data to RFID middleware. RFID readings are inherently incomplete since reading rates are below 100% in real deployments. Missed reading is frequently occurred in the real environments. To simulate the missed reading, we define a parameter for each node. 
The missed reading ratio R i of the node n i is a probability that determines tags can-not be observed when they move into the node, such that 0  X  R i  X  1 . In the real RFID environments, reader may have different reading rates since they cannot have the same strength of RF signal or they are deployed in various circumstances. Using the missed reading ratio, we can si mulate different readers. 3.2.3 Parameters for Edge RFID streaming data usually carries the status changing information, such as prod-ucts X  locations, moving path and their durations at locations. All these information are correlated temporally and spatially. The generated data should contain this informa-edge. So we define parameters for configuring virtual path to simulate tag movement and tag status. For an edge e=(n i , n j ) in the graph, we define two parameters which are moving time T i,j and distribution weight W i,j . n ) , such that 0  X  W i,j  X  1 . It means how many percentage of tags from node n i can be distributed to node n j . In the real environments, tags from one reading location can be distributed to other different places. Co rresponding to the graph model, a node n can for each edge. For distribution weight, there is a fact defined in Eq. (1) that we should to know the same tail node n is equal to 1. 
The moving time T i,j defines the time a tag spends on the edge e = (n i , n j ) moving from node n i to node n j . It is a range value that has minimum moving time and maxi-and tags can be transported by different ways, such as human, conveyor system, fork-lift or vehicle. So the moving time between two readers may be fixed or variable ac-minimum moving time equal to maximum moving time. All tags moved on this edge have same moving time. Otherwise, tags moved on the edge may have variable mov-ing time which is randomly generated between minimum moving time and maximum moving time. tool. Then, we shall describe experiments for evaluating generated RFID data. 4.1 Design and Implementation Based on the graph model, we design and implement a simulation tool to generate RFID data streams for testing RFID middleware. Using the simulation tool, we can easily construct a virtual RFID environment and configure it via setting different pa-rameters which are defined in previous section. RFID streaming data is automatically generated from the simulation tool and sent to middleware system. 
Our simulation test tool mainly contains three components: user graphic interface, virtual tag generator and graph manager. Through the graphic interface, user can con-struct various RFID environments and configure them via setting different parame-ters. Virtual tag generator continuously generates virtual tags with EPC codes and ates unique EPC codes, EPC storage that stores the generated EPC codes, tag genera-tor that generates virtual tags, and tag dispatcher that dispatches virtual tags to graph model. Graph manager is the core component of our simulation tool and responsible for generating and managing the graph. It simulates the virtual RFID environment, controls the movements of virtual tags among different nodes and generates RFID streaming data. It consists of two sub-modules: graph generator that generates the Based on the system design, we have implemented a simulation test tool in java. 4.2 Experiments RFID middleware, we define a few measurement metrics to evaluating the data and perform several experiments. 4.2.1 Measurement Metrics Our simulation tool can continuously genera te RFID data according to the constructed the functions provided by RFID middleware. RFID middleware provides several functions for handling raw RFID streaming data since RFID data possesses different RFID data features to evaluate test data. 
RFID streaming data is incomplete since reading rates are below 100%. A few tags may be missed when they move through the reading range. We use the missed reading the generated RFID data is incomplete or not, we need to calculate the generated value, we can say the node is well simulated and can generate RFID data. We define D evaluates the data generated from a single node. To measure the whole data, we need to evaluate all the nodes in the graph. We use the standard deviation of missed read-ing ratio S R to measure the whole data generated from the graph mode. S R is defined in Eq. (3), where n is the number of node in the graph model, D Ri is defined in Eq. (2). For convenience, the notations we have introduced and others we will introduce later in this section are summarized in Table 1. 
RFID data contains the state changing information of tags. We use the distribution weight of edges for controlling the location transition and traveling path of RFID tag. weight of the edge e i,j . D Wi,j only evaluates a single edge. To measure the whole data, we need to evaluate all the edges in the gr aph model. We use the standard deviation of distribution weights S W to evaluate all the edges in the graph model. S W is defined in defined in Eq. (4). The two standard deviations are used for measuring the difference between generated RFID data from our simulation tool and expected RFID data. The smaller values we can have, the better data we can get. 4.2.2 Experimental Results By using these data measurement metrics defined above, we perform several experi-standard desktop computer with an Intel Core2 2.4GHz, 3GB of main memory and Windows 7 operation system. To perform the experiments, we create a graph with six nodes and six edges (Fig. 5), and set the parameters with different values. Firstly, we fix parameter values and generate different number of tags to evaluate. And then, we generate fixed number of tags with different parameter values. 
In the first experiment, we fix the parameter settings and generate different number generate four data sets which have 100, 1000, 5000, 10000 tag data. Using Eq. (2) and Eq. (4), we can calculate D R for each node and D W for each edge. Then using Eq. (3) Figure 6 show the calculated results of each data set. Form the Eq. (2) and (4) we can know that the small changing of M i or T i,j will bring big results when the total number of tag is very small. So in the test results, the two standard deviations are higher when the number of tag is 100. The more tags we generate, the better test data we can get. 
For the second experiment, we give different parameter values and generate the 8%, 10% and 15%, fix the distribution weight using Table 3 and generate 10000 tags for each data set. The test results are shown in Table 5 and Fig. 7. Although the generated result is increasing as the missed reading ratio increasing, the standard de-viation is still very small that less than 1%. Secondly, we vary the distribution weight of edge e 1,2 which is set to 20%, 40%, 50% and 70% and fix the missed reading ratio and Fig. 8. In Fig. 8, we see that the standard deviation of distribution weight varies our simulation tool can provide RFID data with special data features. Testing the functionalities of an RFID middleware is labor-intensive and expensive as we need to construct various RFID environments for generating RFID data streams. environments. To make generated data have same characteristics with real RFID streaming data, we define several parameters for configuring and controlling the graph model. And then we implement a simulation test tool based on the graph model. To verify the correctness of generated RFID data we define several measurement met-rics and perform several experiments. Through all the experiment results we find that using our simulation test tool, we can construct various test environments for generat-ing RFID streaming data which can be used in RFID middleware test. 
