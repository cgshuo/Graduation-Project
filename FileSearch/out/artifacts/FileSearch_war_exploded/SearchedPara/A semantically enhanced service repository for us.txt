 1. Introduction exciting and personalized content and services. The term prosumer tion [52]  X  recently has been specifically promoted to define such a phenomenon.
The European Union sponsored IST-FP6 research project OPUCE mobile phone as an SMS if she is in a meeting, or read them out as a voice call if she is driving. services by prosumers? facet could have its own description method and language).

Semantic Service Browser (OPUCE Browser in short). Although semantic Web based techniques can dramatically improve  X  output information in a graphical user interface based on the ClusterMap Library is on the OPUCE Browser.
 related work and Section 7 concludes the paper. 2. OPUCE platform overview
The OPUCE platform consists of the following main components:  X  create OPUCE composite services.  X  into executable WSBPEL (Web Services Business Process Execution Language) scripts.  X  service logic execution engine [9] .  X 
User Information Manager stores information about users  X   X  words, and intelligent matching of user profiles with service descriptions.  X  the service to context of the each user.  X 
Browser in detail in Section 4 . 3. Facet-based approach for describing OPUCE services facet can be described using a different language, either standardized or customized. document of the service, which includes general purpose metadata, or information about one or more aspects , such as service name , 5 version , creator name ,or unique identifier and the facet specification contains the WSBPEL script.
 base service called SendSMS . In this provisioning facet, the
The value of the ExecutionMode tag could either be synchronous deployment. isShareable indicates whether to create a new instance of the base service, and install the base service on the remote handheld device or on the server. that is used to implement this base service. The publicEndpoints
The Faceted Repository module of the OPUCE service repository is built on top of ebXML Registry, metadata such as creator, version, and tags are registered in the RIM to support basic keyword-based search. to subscribe/notify changes in XML documents. 4. The OPUCE visual semantic service browser term ontology has numerous descriptions and definitions. For example, it is defined as conceptualisation .  X  [21] ,  X  a computer model of some portion of the world . that can be communicated between people and heterogeneous and distributed systems . world .  X  [22] . In the context of this paper, we use the definition given by Arvidsson and Flycht-Eriksson: shared vocabulary , which can be used to model a domain  X  completeness [33] . Reasoning on OWL-DL is decidable and supported by various DL reasoning engines such as Pallet restrictions (e.g., existential restriction) is essential in our service discovery approach. discovery framework  X  such as UDDI (Universal Description Discovery and Integration) defined in an ontology when searching services.
 the technical details of the OPUCE Browser. 4.1. The OPUCE Ontology grated into generic service upper ontology such as OWL-S [31] .
 and tagging properties . Next we describe the OWL object properties associated with the 4.1.1. Functional properties  X  hasInput and hasOutput : Just like most service semantic models such as OWL-S and FUSION [25] , will produce if invoked. Furthermore, these two properties are grouped as the sub-properties of the  X  hasFunctionality :In [44] , functional abilities are modeled as a list of actions using pairs of functionalities. The range of hasFunctionality is the Functionality as
Send , Search , Translate , are defined in the ontology. 4.1.2. Non-functional properties protocols, or categorization within a classification scheme [25] . We define three non-functional properties for  X   X  we use this property as a placeholder for further extension and integration.  X  example, a user may select a VOIP call service or a PSTN call service based on her current situation. 4.1.3. Tagging properties  X  hasTag : Unlike the above properties which are used to describe a service with formally defined concepts, the in the OPUCE ontology.
 Except for the above properties of the Service concept, two subclasses of created OPUCE services.
 Fig. 5 shows a snapshot of the OPUCE Ontology and the semantic description of an OPUCE base service ments analysis, building, implementation, and evaluation and maintenance) [38] based on the requirements document synonymous verbs such as transmit , give , and post . 4.2. Describing OPUCE services class from existing classes, properties and individuals by:  X  applying set operators including intersection, union, and complement on classes;  X  explicitly and exhaustively enumerating the individuals that are members of the new class;  X  or has some individuals in a specific class (existential restriction); or  X  restricting the cardinality of a property.
 base service can be described as: The above statement indicates that i) SendSMS is a base service, ii) it has exactly two inputs: one is a other a MobilePhoneNumber type, iii) its functionality is technologies is J2EE , and vii) it supports multilingual inputs. 4.3. Challenges and requirements for user-centric discovery of OPUCE services we want to find all the Telecom services with functionality ( Telecom )  X  X  X  hasFunctionality ( Send ), and then send it to the DL reasoner for matchmaking. Clearly, list since it is subsumed by the above class.

Obviously, discovering services by directly querying the DL reasoner presents the following challenges for a user:  X 
She must know the query language (in our case OWL-DL);  X 
She must be familiar with the domain terminology;  X  differ in restriction type, such as the class  X  hasCategory ( Telecom ) and the class other since they do not have a subsumption relationship [33] .
 challenges, they still require the user to have knowledge of the domain terminology to fill the template. tial requirements of this browser are summarized as follows:  X  (instead of typing) Telecom under the hasCategory service property and select property, then all the services that satisfy the condition  X  services, and then refine the condition by specifying the service functionality as aiming at tackling the above-mentioned requirements and challenges, and also the rationality behind such design. 4.4. Visually exploring and discovering OPUCE services and then calculating the intersection of all these services. For example, the query be further refined to getting services that are the intersection of the following sets of services:  X 
Services subsumed by the class  X  hasCategory ( Telecom ),  X 
Services subsumed by the class  X  hasFunctionality ( Send ), and  X  Services subsumed by the class  X  hasInput ( Text ).
 click fashion.
 service, we first recursively extract all the component classes separated by the intersection operator ( to get the class's subsumed services. 4.4.1. The graphical interface tions. For example, the leaf node hasCategory/Telecom represents the property restriction class example, in Fig. 8 ,ifthe hasCategory/Telecom leaf node is selected, a set containing 74 services quirement discussed in Section 4.3 is implemented. 4.4.2. Exploration and discovery
A user could explore OPUCE services through the following actions:  X   X  service url;  X  Locate a property restriction class node by entering its keyword in the right pane. telecom services that can send text. First of all, this user selects the user refines the search criteria by selecting the Send node in the by displaying the hasCategory/Telecom set, the hasFunctionality/Send (we call it intersection set ) in the middle pane. As shown in Fig. 10 (a), the the as there are 25 telecom services whose functionality is Send representation is similar to Venn Diagrams, which are a common tool widely used in many areas of our daily life. properties in an effective point-and-click fashion. 5. Evaluation of a whole complete service description.
 on top of ClusterMap Library, 11 a visual technique that has been used in several semantic Web applications [18] . are manually published by service providers and we use an the server is scalable in dealing with large-size service descriptions. and satisfaction about the browser. 5.1. Performance study We tested the performance of the Restriction Class Manager module on its domly selecting properties and concepts from the ontology and then connect them using the
As illustrated in Fig. 12 , for a common class description containing 5 to have, at this scale, the CPU time used by Add is only 515 ms. For the what the number of property restrictions are. Finally, for the functions in sequence; so its CPU time is calculated by summing the time used on 5.2. Usability study basic knowledge of ontology and semantic Web.
 needed to complete each task. Participants in the study were six computer science undergraduate students, with two  X  novice users  X  who had no previous knowledge of the semantic Web technology and the OPUCE project. is implemented in J2EE.
 0.66 (53/80.75) in the third task.
 scale was used for each question.
 80%) and satisfaction (over 65%).
 reduce it by including more property restrictions. 6. Related work and discussion and discovering capabilities and suggest solutions using semantic Web related techniques. base language since most of the constructs of OWL-S, such as those in ServiceProfile , into the OPUCE Ontology if further requirements appear.
Similar to the OPUCE Ontology, some domain specific properties such as the base generic framework. In [6] , the authors proposed a three-layer service ontology are described by means of operations ( hasOperation property) and I/O parameters ( and Service Categories organize services into taxonomies (using the
Ontology, the hasOperation property is similar to the hasFunctionality described using pattern of connecting existential restriction classes with intersections. the provider, and the QoS properties of the service [43] .
 mentioned approach has provided such function.
 this library in the area of service discovery.
 constructors  X  including intersectionOf , allValueFrom , and services. 7. Conclusion and add context-awareness feature to the browser.
 Acknowledgments comments to this paper.

References
