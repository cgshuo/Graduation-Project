 The distinction between core arguments (hence-forth, cores) and adjuncts is included in most the-ories on argument structure (Dowty, 2000). The distinction can be viewed syntactically, as one between obligatory and optional arguments, or semantically, as one between arguments whose meanings are predicate dependent and indepen-dent. The latter (cores) are those whose function in the described event is to a large extent determined by the predicate, and are obligatory. Adjuncts are optional arguments which, like adverbs, modify the meaning of the described event in a predictable or predicate-independent manner.

Consider the following examples: 1. The surgeon operated [on his colleague]. 2. Ron will drop by [after lunch]. 3. Yuri played football [in the park].

The marked argument is a core in 1 and an ad-junct in 2 and 3. Adjuncts form an independent semantic unit and their semantic role can often be inferred independently of the predicate (e.g., [af-ter lunch] is usually a temporal modifier). Core roles are more predicate-specific, e.g., [on his col-league] has a different meaning with the verbs  X  X p-erate X  and  X  X ount X .

Sometimes the same argument plays a different role in different sentences. In (3), [in the park] places a well-defined situation (Yuri playing foot-ball) in a certain location. However, in  X  X he troops are based [in the park] X , the same argument is obligatory, since being based requires a place to be based in.

Distinguishing between the two argument types has been discussed extensively in various formu-lations in the NLP literature, notably in PP attach-ment, semantic role labeling (SRL) and subcatego-rization acquisition. However, no work has tack-led it yet in a fully unsupervised scenario. Unsu-pervised models reduce reliance on the costly and error prone manual multi-layer annotation (POS tagging, parsing, core-adjunct tagging) commonly used for this task. They also allow to examine the nature of the distinction and to what extent it is accounted for in real data in a theory-independent manner.

In this paper we present a fully unsupervised al-gorithm for core-adjunct classification. We utilize leading fully unsupervised grammar induction and POS induction algorithms. We focus on preposi-tional arguments, since non-prepositional ones are generally cores. The algorithm uses three mea-sures based on different characterizations of the core-adjunct distinction, and combines them us-ing an ensemble method followed by self-training. The measures used are based on selectional prefer-ence, predicate-slot collocation and argument-slot collocation.

We evaluate against PropBank (Palmer et al., 2005), obtaining roughly 70% accuracy when evaluated on the prepositional arguments and more than 80% for the entire argument set. These results are substantially better than those obtained by a non-trivial baseline. Section 2 discusses the core-adjunct distinction. Section 3 describes the algorithm. Sections 4 and 5 present our experimental setup and results. PropBank. PropBank (PB) (Palmer et al., 2005) is a widely used corpus, providing SRL annotation for the entire WSJ Penn Treebank. Its core labels are predicate specific, while adjunct (or modifiers under their terminology) labels are shared across predicates. The adjuncts are subcategorized into several classes, the most frequent of which are
The organization of PropBank is based on the notion of diathesis alternations, which are (roughly) defined to be alternations between two subcategorization frames that preserve meaning or change it systematically. The frames in which each verb appears were collected and sets of al-ternating frames were defined. Each such set was assumed to have a unique set of roles, named  X  X ole-set X . These roles include all roles appearing in any of the frames, except of those defined as adjuncts.
Adjuncts are defined to be optional arguments appearing with a wide variety of verbs and frames. They can be viewed as fixed points with respect to alternations, i.e., as arguments that do not change their place or slot when the frame undergoes an alternation. This follows the notions of optionality and compositionality that define adjuncts.

Detecting diathesis alternations automatically is difficult (McCarthy, 2001), requiring an initial acquisition of a subcategorization lexicon. This alone is a challenging task tackled in the past us-ing supervised parsers (see below).
 FrameNet. FrameNet (FN) (Baker et al., 1998) is a large-scale lexicon based on frame semantics. It takes a different approach from PB to semantic roles. Like PB, it distinguishes between core and non-core arguments, but it does so for each and every frame separately. It does not commit that a semantic role is consistently tagged as a core or a non-core across frames. For example, the se-mantic role  X  X ath X  is considered core in the  X  X elf Motion X  frame, but as non-core in the  X  X lacing X  frame. Another difference is that FN does not al-low any type of non-core argument to attach to a given frame. For instance, while the  X  X etting X  frame allows a  X  X uration X  non-core argument, the  X  X ctive Perception X  frame does not.

PB and FN tend to agree in clear (prototypical) cases, but to differ in others. For instance, both schemes would tag  X  X uri played football [in the park] X  as an adjunct and  X  X he commander placed a guard [in the park] X  as a core. However, in  X  X e walked [into his office] X , the marked argument is tagged as a directional adjunct in PB but as a  X  X i-rection X  core in FN.

Under both schemes, non-cores are usually con-fined to a few specific semantic domains, no-tably time, place and manner, in contrast to cores that are not restricted in their scope of applica-bility. This approach is quite common, e.g., the COBUILD English grammar (Willis, 2004) cate-gorizes adjuncts to be of manner, aspect, opinion, place, time, frequency, duration, degree, extent, emphasis, focus and probability.
 Semantic Role Labeling. Work in SRL does not tackle the core-adjunct task separately but as part of general argument classification. Super-vised approaches obtain an almost perfect score in distinguishing between the two in an in-domain scenario. For instance, the confusion matrix in (Toutanova et al., 2008) indicates that their model scores 99.5% accuracy on this task. However, adaptation results are lower, with the best two models in the CoNLL 2005 shared task (Carreras and M ` arquez, 2005) achieving 95.3% (Pradhan et al., 2008) and 95.6% (Punyakanok et al., 2008) ac-curacy in an adaptation between the relatively sim-ilar corpora WSJ and Brown.

Despite the high performance in supervised sce-narios, tackling the task in an unsupervised man-ner is not easy. The success of supervised methods stems from the fact that the predicate-slot com-bination (slot is represented in this paper by its preposition) strongly determines whether a given argument is an adjunct or a core (see Section 3.4). Supervised models are provided with an anno-tated corpus from which they can easily learn the mapping between predicate-slot pairs and their core/adjunct label. However, induction of the mapping in an unsupervised manner must be based on inherent core-adjunct properties. In addition, supervised models utilize supervised parsers and POS taggers, while the current state-of-the-art in unsupervised parsing and POS tagging is consid-erably worse than their supervised counterparts.
This challenge has some resemblance to un-supervised detection of multiword expressions (MWEs). An important MWE sub-class is that of phrasal verbs, which are also characterized by verb-preposition pairs (Li et al., 2003; Sporleder and Li, 2009) (see also (Boukobza and Rappoport, 2009)). Both tasks aim to determine semantic compositionality, which is a highly challenging task.

Few works addressed unsupervised SRL-related tasks. The setup of (Grenager and Manning, 2006), who presented a Bayesian Network model for argument classification, is perhaps closest to ours. Their work relied on a supervised parser and a rule-based argument identification (both dur-ing training and testing). Swier and Stevenson (2004, 2005), while addressing an unsupervised SRL task, greatly differ from us as their algorithm uses the VerbNet (Kipper et al., 2000) verb lex-icon, in addition to supervised parses. Finally, Abend et al. (2009) tackled the argument identi-fication task alone and did not perform argument classification of any sort.
 PP attachment. PP attachment is the task of de-termining whether a prepositional phrase which immediately follows a noun phrase attaches to the latter or to the preceding verb. This task X  X  relation to the core-adjunct distinction was addressed in several works. For instance, the results of (Hindle and Rooth, 1993) indicate that their PP attachment system works better for cores than for adjuncts.
Merlo and Esteve Ferrer (2006) suggest a sys-tem that jointly tackles the PP attachment and the core-adjunct distinction tasks. Unlike in this work, their classifier requires extensive supervision in-cluding WordNet, language-specific features and a supervised parser. Their features are generally motivated by common linguistic considerations. Features found adaptable to a completely unsuper-vised scenario are used in this work as well. Syntactic Parsing. The core-adjunct distinction is included in many syntactic annotation schemes. Although the Penn Treebank does not explicitly annotate adjuncts and cores, a few works sug-gested mapping its annotation (including func-tion tags) to core-adjunct labels. Such a mapping was presented in (Collins, 1999). In his Model 2, Collins modifies his parser to provide a core-adjunct prediction, thereby improving its perfor-mance.

The Combinatory Categorial Grammar (CCG) formulation models the core-adjunct distinction explicitly. Therefore, any CCG parser can be used as a core-adjunct classifier (Hockenmaier, 2003). Subcategorization Acquisition. This task spec-ifies for each predicate the number, type and order of obligatory arguments. Determining the allow-able subcategorization frames for a given predi-cate necessarily involves separating its cores from its allowable adjuncts (which are not framed). No-table works in the field include (Briscoe and Car-roll, 1997; Sarkar and Zeman, 2000; Korhonen, 2002). All these works used a parsed corpus in order to collect, for each predicate, a set of hy-pothesized subcategorization frames, to be filtered by hypothesis testing methods.

This line of work differs from ours in a few aspects. First, all works use manual or super-vised syntactic annotations, usually including a POS tagger. Second, the common approach to the task focuses on syntax and tries to identify the en-tire frame, rather than to tag each argument sep-arately. Finally, most works address the task at the verb type level, trying to detect the allowable frames for each type. Consequently, the common evaluation focuses on the quality of the allowable frames acquired for each verb type, and not on the classification of specific arguments in a given cor-pus. Such a token level evaluation was conducted in a few works (Briscoe and Carroll, 1997; Sarkar and Zeman, 2000), but often with a small num-ber of verbs or a small number of frames. A dis-cussion of the differences between type and token level evaluation can be found in (Reichart et al., 2010).

The core-adjunct distinction task was tackled in the context of child language acquisition. Villav-icencio (2002) developed a classifier based on preposition selection and frequency information for modeling the distinction for locative preposi-tional phrases. Her approach is not entirely corpus based, as it assumes the input sentences are given in a basic logical form.

The study of prepositions is a vibrant research area in NLP. A special issue of Computational Lin-guistics , which includes an extensive survey of re-lated work, was recently devoted to the field (Bald-win et al., 2009). We are given a (predicate, argument) pair in a test sentence, and we need to determine whether the argument is a core or an adjunct. Test arguments are assumed to be correctly bracketed. We are al-lowed to utilize a training corpus of raw text. 3.1 Overview Our algorithm utilizes statistics based on the (predicate, slot, argument head) (PSH) joint dis-tribution (a slot is represented by its preposition). To estimate this joint distribution, PSH samples are extracted from the training corpus using unsu-pervised POS taggers (Clark, 2003; Abend et al., 2010) and an unsupervised parser (Seginer, 2007). As current performance of unsupervised parsers for long sentences is low, we use only short sen-tences (up to 10 words, excluding punctuation). The length of test sentences is not bounded. Our results will show that the training data accounts well for the argument realization phenomena in the test set, despite the length bound on its sen-tences. The sample extraction process is detailed in Section 3.2.

Our approach makes use of both aspects of the distinction  X  obligatoriness and compositionality. We define three measures, one quantifying the obligatoriness of the slot, another quantifying the selectional preference of the verb to the argument and a third that quantifies the association between the head word and the slot irrespective of the pred-icate (Section 3.3).

The measures X  predictions are expected to coin-cide in clear cases, but may be less successful in others. Therefore, an ensemble-based method is used to combine the three measures into a single classifier. This results in a high accuracy classifier with relatively low coverage. A self-training step is now performed to increase coverage with only a minor deterioration in accuracy (Section 3.4).
We focus on prepositional arguments. Non-prepositional arguments in English tend to be cores (e.g., in more than 85% of the cases in PB sections 2 X 21), while prepositional arguments tend to be equally divided between cores and ad-juncts. The difficulty of the task thus lies in the classification of prepositional arguments. 3.2 Data Collection The statistical measures used by our classifier are based on the (predicate, slot, argument head) (PSH) joint distribution. This section details the process of extracting samples from this joint dis-tribution given a raw text corpus.

We start by parsing the corpus using the Seginer parser (Seginer, 2007). This parser is unique in its ability to induce a bracketing (unlabeled parsing) from raw text (without even using POS tags) with strong results. Its high speed (thousands of words per second) allows us to use millions of sentences, a prohibitive number for other parsers.
 We continue by tagging the corpus using Clark X  X  unsupervised POS tagger (Clark, 2003) and the unsupervised Prototype Tagger (Abend et tions and to verbs are manually selected from the any word which is the first word of an argument and belongs to a prepositions cluster. A verb is any word belonging to a verb cluster. This manual selection requires only a minute, since the number of classes is very small (34 in our experiments). In addition, knowing what is considered a prepo-sition is part of the task definition itself.
Argument identification is hard even for super-vised models and is considerably more so for un-supervised ones (Abend et al., 2009). We there-fore confine ourselves to sentences of length not greater than 10 (excluding punctuation) which contain a single verb. A sequence of words will be marked as an argument of the verb if it is a con-stituent that does not contain the verb (according to the unsupervised parse tree), whose parent is an ancestor of the verb. This follows the pruning heuristic of (Xue and Palmer, 2004) often used by SRL algorithms.
 The corpus is now tagged using an unsupervised POS tagger. Since the sentences in question are short, we consider every word which does not be-long to a closed class cluster as a head word (an argument can have several head words). A closed class is a class of function words with relatively few word types, each of which is very frequent. Typical examples include determiners, preposi-tions and conjunctions. A class which is not closed is open. In this paper, we define closed classes to be clusters in which the ratio between the number of word tokens and the number of word types ex-ceeds a threshold T 4 .

Using these annotation layers, we traverse the corpus and extract every (predicate, slot, argument head) triplet. In case an argument has several head words, each of them is considered as an inde-pendent sample. We denote the number of times that a triplet occurred in the training corpus by N ( p, s, h ) . 3.3 Collocation Measures In this section we present the three types of mea-sures used by the algorithm and the rationale be-hind each of them. These measures are all based on the PSH joint distribution.

Given a (predicate, prepositional argument) pair from the test set, we first tag and parse the argu-word in the argument is now represented by its word form (without lemmatization), its unsuper-vised POS tag and its depth in the parse tree of the argument. The last two will be used to determine which are the head words of the argument (see be-low). The head words themselves, once chosen, are represented by the lemma. We now compute the following measures.
 Selectional Preference (SP). Since the seman-tics of cores is more predicate dependent than the semantics of adjuncts, we expect arguments for which the predicate has a strong preference (in a specific slot) to be cores.

Selectional preference induction is a well-established task in NLP. It aims to quantify the likelihood that a certain argument appears in a certain slot of a predicate. Several methods have been suggested (Resnik, 1996; Li and Abe, 1998; Schulte im Walde et al., 2008).

We use the paradigm of (Erk, 2007). For a given predicate slot pair ( p, s ) , we define its preference to the argument head h to be:
SP ( p, s, h ) = X sim ( h, h  X  ) is a similarity measure between argu-ment heads. Heads is the set of all head words. This is a natural extension of the naive (and sparse) maximum likelihood estimator P r ( h | p, s ) , which is obtained by taking sim ( h, h  X  ) to be 1 if h = h  X  and 0 otherwise.

The similarity measure we use is based on the slot distributions of the arguments. That is, two arguments are considered similar if they tend to appear in the same slots. Each head word h is as-signed a vector where each coordinate corresponds to a slot s . The value of the coordinate is the num-ber of times h appeared in s , i.e.  X  ( p  X  is summed over all predicates). The similarity measure between two head words is then defined as the cosine measure of their vectors.

Since arguments in the test set can be quite long, not every open class word in the argument is taken to be a head word. Instead, only those appearing in the top level (depth = 1) of the argument under its unsupervised parse tree are taken. In case there are no such open class words, we take those appearing in depth 2. The selectional preference of the whole argument is then defined to be the arithmetic mean of this measure over all of its head words. If the ar-gument has no head words under this definition or if none of the head words appeared in the training corpus, the selectional preference is undefined. Predicate-Slot Collocation. Since cores are obligatory, when a predicate persistently appears with an argument in a certain slot, the arguments in this slot tends to be cores. This notion can be captured by the ( predicate, slot ) joint distribu-tion. We use the Pointwise Mutual Information measure (PMI) to capture the slot and the predi-cate X  X  collocation tendency. Let p be a predicate and s a slot, then: P S ( p, s ) = P M I ( p, s ) = log Since there is only a meager number of possi-ble slots (that is, of prepositions), estimating the ( predicate, slot ) distribution can be made by the maximum likelihood estimator with manageable sparsity.

In order not to bias the counts towards predi-cates which tend to take more arguments, we de-fine here N ( p, s ) to be the number of times the ( p, s ) pair occurred in the training corpus, irre-spective of the number of head words the argu-ment had (and not e.g.,  X  ments with no prepositions are included in these counts as well (with s = N U LL ), so not to bias against predicates which tend to have less non-prepositional arguments.
 Argument-Slot Collocation. Adjuncts tend to belong to one of a few specific semantic domains (see Section 2). Therefore, if an argument tends to appear in a certain slot in many of its instances, it is an indication that this argument tends to have a consistent semantic flavor in most of its instances. In this case, the argument and the preposition can be viewed as forming a unit on their own, indepen-dent of the predicate with which they appear. We therefore expect such arguments to be adjuncts.
We formalize this notion using the following measure. Let p , s , h be a predicate, a slot and a AS ( s, h ) = 1  X  P r ( s | h ) = 1  X  We select the head words of the argument as we did with the selectional preference measure. Again, the AS of the whole argument is defined to be the arithmetic mean of the measure over all of its head words.
 Thresholding. In order to turn these measures into classifiers, we set a threshold below which ar-guments are marked as adjuncts and above which as cores. In order to avoid tuning a parameter for each of the measures, we set the threshold as the median value of this measure in the test set. That is, we find the threshold which tags half of the ar-guments as cores and half as adjuncts. This relies on the prior knowledge that prepositional argu-ments are roughly equally divided between cores 3.4 Combination Model The algorithm proceeds to integrate the predic-tions of the weak classifiers into a single classi-fier. We use an ensemble method (Breiman, 1996). Each of the classifiers may either classify an argu-ment as an adjunct, classify it as a core, or ab-stain. In order to obtain a high accuracy classifier, to be used for self-training below, the ensemble classifier only tags arguments for which none of the classifiers abstained, i.e., when sufficient infor-mation was available to make all three predictions. The prediction is determined by the majority vote.
The ensemble classifier has high precision but low coverage. In order to increase its coverage, a self-training step is performed. We observe that a predicate and a slot generally determine whether the argument is a core or an adjunct. For instance, in our development data, a classifier which assigns all arguments that share a predicate and a slot their most common label, yields 94.3% accuracy on the pairs appearing at least 5 times. This property of the core-adjunct distinction greatly simplifies the task for supervised algorithms (see Section 2).
We therefore apply the following procedure: (1) tag the training data with the ensemble classifier; (2) for each test sample x , if more than a ratio of  X  of the training samples sharing the same predicate and slot with x are labeled as cores, tag x as core. Otherwise, tag x as adjunct.

Test samples which do not share a predicate and a slot with any training sample are considered out of coverage. The parameter  X  is chosen so half of the arguments are tagged as cores and half as adjuncts. In our experiments  X  was about 0.25. Experiments were conducted in two scenarios. In the  X  SID  X  (supervised identification of prepositions and verbs) scenario, a gold standard list of prepo-sitions was provided. The list was generated by taking every word tagged by the preposition tag (  X  X N X  ) in at least one of its instances under the gold standard annotation of the WSJ sections 2 X  21. Verbs were identified using MXPOST (Ratna-parkhi, 1996). Words tagged with any of the verb tags, except of the auxiliary verbs ( X  X ave X ,  X  X e X  and  X  X o X ) were considered predicates. This scenario decouples the accuracy of the algorithm from the quality of the unsupervised POS tagging.

In the  X  Fully Unsupervised  X  scenario, preposi-tions and verbs were identified using Clark X  X  tag-ger (Clark, 2003). It was asked to produce a tag-ging into 34 classes. The classes corresponding to prepositions and to verbs were manually identi-fied. Prepositions in the test set were detected with 84.2% precision and 91.6% recall.

The prediction of whether a word belongs to an open class or a closed was based on the output of the Prototype tagger (Abend et al., 2010). The Prototype tagger provided significantly more ac-curate predictions in this context than Clark X  X .
The 39832 sentences of PropBank X  X  sections 2 X  21 were used as a test set without bounding their bearing the labels  X  X 0 X   X   X  X 5 X ,  X  X -A0 X   X   X  X -A5 X  or  X  X -A0 X   X   X  X -A5 X . Adjuncts were defined to be arguments bearing the labels  X  X M X ,  X  X -AM X  or  X  X -AM X . Modals ( X  X M-MOD X ) and negation mod-ifiers ( X  X M-NEG X ) were omitted since they do not represent adjuncts.

The test set includes 213473 arguments, 45939 (21.5%) are prepositional. Of the latter, 22442 (48.9%) are cores and 23497 (51.1%) are adjuncts. The non-prepositional arguments include 145767 (87%) cores and 21767 (13%) adjuncts. The aver-age number of words per argument is 5.1.

The NANC (Graff, 1995) corpus was used as a training set. Only sentences of length not greater than 10 excluding punctuation were used (see Sec-tion 3.2), totaling 4955181 sentences. 7673878 (5635810) arguments were identified in the  X  SID  X  ( X  Fully Unsupervised  X ) scenario. The average number of words per argument is 1.6 (1.7).

Since this is the first work to tackle this task using neither manual nor supervised syntactic an-notation, there is no previous work to compare to. However, we do compare against a non-trivial baseline, which closely follows the rationale of cores as obligatory arguments.
 Our Window Baseline tags a corpus using MX-POST and computes, for each predicate and preposition, the ratio between the number of times that the preposition appeared in a window of W words after the verb and the total number of times that the verb appeared. If this number ex-ceeds a certain threshold  X  , all arguments hav-ing that predicate and preposition are tagged as cores. Otherwise, they are tagged as adjuncts. We used 18.7M sentences from NANC of unbounded length for this baseline. W and  X  were fine-tuned
We also report results for partial versions of the algorithm, starting with the three measures used (selectional preference, predicate-slot col-location and argument-slot collocation). Results for the ensemble classifier (prior to the bootstrap-ping stage) are presented in two variants: one in which the ensemble is used to tag arguments for which all three measures give a prediction (the  X  Ensemble(Intersection)  X  classifier) and one in which the ensemble tags all arguments for which at least one classifier gives a prediction (the  X  Ensemble(Union)  X  classifier). For the latter, a tie is broken in favor of the core label. The  X  Ensem-ble(Union)  X  classifier is not a part of our model and is evaluated only as a reference.

In order to provide a broader perspective on the task, we compare the measures in the basis of our algorithm to simplified or alternative measures. We experiment with the following measures: 1. Simple SP  X  a selectional preference measure defined to be P r ( head | slot, predicate ) . 2. Vast Corpus SP  X  similar to  X  Simple SP  X  but with a much larger corpus. It uses roughly 100M arguments which were extracted from the web-crawling based corpus of (Gabrilovich and Markovitch, 2005) and the British National Cor-pus (Burnard, 2000). 3. Thesaurus SP  X  a selectional preference mea-sure which follows the paradigm of (Erk, 2007) (Section 3.3) and defines the similarity between two heads to be the Jaccard affinity between their two entries in Lin X  X  automatically compiled the-4. Pr(slot | predicate)  X  an alternative to the used predicate-slot collocation measure. 5. PMI(slot, head)  X  an alternative to the used argument-slot collocation measure. 6. Head Dependence  X  the entropy of the pred-icate distribution given the slot and the head (fol-lowing (Merlo and Esteve Ferrer, 2006)): HD ( s, h ) =  X   X  p P r ( p | s, h )  X  log ( P r ( p | s, h )) Low entropy implies a core.

For each of the scenarios and the algorithms, we report accuracy, coverage and effective accu-racy. Effective accuracy is defined to be the ac-curacy obtained when all out of coverage argu-ments are tagged as adjuncts. This procedure al-ways yields a classifier with 100% coverage and therefore provides an even ground for comparing the algorithms X  performance.

We see accuracy as important on its own right since increasing coverage is often straightforward given easily obtainable larger training corpora. Another reason is that a high accuracy classifier may provide training data to be used by subse-quent supervised algorithms.

For completeness, we also provide results for the entire set of arguments. The great majority of non-prepositional arguments are cores (87% in the test set). We therefore tag all non-prepositional as cores and tag prepositional arguments using our model. In order to minimize supervision, we dis-tinguish between the prepositional and the non-prepositional arguments using Clark X  X  tagger.
Finally, we experiment on a scenario where even argument identification on the test set is not provided, but performed by the algorithm of (Abend et al., 2009), which uses neither syntactic nor SRL annotation but does utilize a supervised POS tagger. We therefore run it in the  X  SID  X  sce-nario. We apply it to the sentences of length at most 10 contained in sections 2 X 21 of PB (11586 arguments in 6007 sentences). Non-prepositional arguments are invariably tagged as cores and out of coverage prepositional arguments as adjuncts.
We report labeled and unlabeled recall, preci-sion and F-scores for this experiment. An un-labeled match is defined to be an argument that agrees in its boundaries with a gold standard ar-gument and a labeled match requires in addition that the arguments agree in their core/adjunct la-bel. We also report labeling accuracy which is the ratio between the number of labeled matches and Table 1 presents the results of our main experi-ments. In both scenarios, the most accurate of the three basic classifiers was the argument-slot col-location classifier. This is an indication that the collocation between the argument and the prepo-sition is more indicative of the core/adjunct label than the obligatoriness of the slot (as expressed by the predicate-slot collocation).

Indeed, we can find examples where adjuncts, although optional, appear very often with a certain verb. An example is  X  X eet X , which often takes a temporal adjunct, as in  X  X et X  X  meet [in July] X . This is a semantic property of  X  X eet X , whose syntactic expression is not obligatory.

All measures suffered from a comparable dete-rioration of accuracy when moving from the  X  SID  X  to the  X  Fully Unsupervised  X  scenario. The dete-rioration in coverage, however, was considerably lower for the argument-slot collocation.

The  X  Ensemble(Intersection)  X  model in both cases is more accurate than each of the basic clas-sifiers alone. This is to be expected as it combines the predictions of all three. The self-training step significantly increases the ensemble model X  X  cov-erage (with some loss in accuracy), thus obtaining the highest effective accuracy. It is also more accu-rate than the simpler classifier  X  Ensemble(Union)  X  (although the latter X  X  coverage is higher).
Table 2 presents results for the comparison to simpler or alternative measures. Results indicate that the three measures used by our algorithm (leftmost column in each section) obtain superior results. The only case in which performance is comparable is the window baseline compared to the Pred-Slot measure. However, the baseline X  X  score was obtained by using a much larger corpus
The poor performance of Simple SP can be as-cribed to sparsity. This is demonstrated by the median value of 0, which this measure obtained on the test set. Accuracy is only somewhat better with a much larger corpus ( Vast Corpus SP ). The Thesaurus SP most probably failed due to insuffi-cient coverage, despite its applicability in a similar supervised task (Zapirain et al., 2009).

The Head Dependence measure achieves a rel-atively high accuracy of 67.4%. We therefore at-tempted to incorporate it into our model, but failed to achieve a significant improvement to the overall result. We expect a further study of the relations between the measures will suggest better ways of combining their predictions.

The obtained effective accuracy for the entire set of arguments, where the prepositional argu-ments are automatically identified, was 81.6%.
Table 3 presents results of our experiments with the unsupervised argument identification model of (Abend et al., 2009). The unlabeled scores reflect performance on argument identification alone, while the labeled scores reflect the joint per-formance of both the 2009 and our algorithms. These results, albeit low, are potentially benefi-cial for unsupervised subcategorization acquisi-tion. The accuracy of our model on the entire set (prepositional argument subset) of correctly identified arguments was 83.6% (71.7%). This is somewhat higher than the score on the entire test set ( X  SID  X  scenario), which was 83.0% (68.4%), probably due to the bounded length of the test sen-tences in this case. We presented a fully unsupervised algorithm for the classification of arguments into cores and ad-juncts. Since most non-prepositional arguments are cores, we focused on prepositional arguments, which are roughly equally divided between cores and adjuncts. The algorithm computes three sta-tistical measures and utilizes ensemble-based and self-training methods to combine their predictions.
The algorithm applies state-of-the-art unsuper-vised parser and POS tagger to collect statistics from a large raw text corpus. It obtains an accu-racy of roughly 70%. We also show that (some-what surprisingly) an argument-slot collocation measure gives more accurate predictions than a predicate-slot collocation measure on this task. We speculate the reason is that the head word dis-ambiguates the preposition and that this disam-biguation generally determines whether a preposi-tional argument is a core or an adjunct (somewhat independently of the predicate). This calls for a future study into the semantics of prepositions and their relation to the core-adjunct distinction. In this context two recent projects, The Preposi-tion Project (Litkowski and Hargraves, 2005) and PrepNet (Saint-Dizier, 2006), which attempt to characterize and categorize the complex syntactic and semantic behavior of prepositions, may be of relevance.

It is our hope that this work will provide a better understanding of core-adjunct phenomena. Cur-rent supervised SRL models tend to perform worse on adjuncts than on cores (Pradhan et al., 2008; Toutanova et al., 2008). We believe a better under-standing of the differences between cores and ad-juncts may contribute to the development of better SRL techniques, in both its supervised and unsu-pervised variants.

