 As e-commerce gains its popularity, it is challenging for customers to sort through an enormous number of products to find ones that align with their interest. The main task of recommender systems is to provide a customer with the most appropriate products matching the customer X  X  preference, and thus to enhance user satisfaction and loyalty. The product provider analyzes vast amounts of data including (but not limited to) product profile, user profile, purchase history, and user ratings generated from marketplace implicitly or explicitly to create an efficient, applicable, and personalized recommender system. Recommender systems emerged as an independent and active research area in the mid-90 X  X , when explicit user rating was the main resource to build the system [ 8 , 15 , 17 ]. The goal of recommender systems using explicit user feedback is to estimate the rating of unrated products so that the system can use estimated ratings in order to recommend to the users the new items. Adomavicius and Tuzhilin [ 1 ] provided a mathematical formulation of the recommendation problem as follows. Let V and I be the set of all users and the set of all possible items that can be recommended respectively. Also u is a utility function that maps the pair of item i and user v toarealnumber R which is a metric of user X  X  utility, i.e., u : V X I  X  R . Then, for each user v  X  X  , we want to choose an item i maximizes the user X  X  utility. More formally,  X  v  X  X  ,i v = arg max are modeled, there are two main approaches to building recommender systems: collaborative filtering [ 10 ] and content-based approach [ 1 ]. Recommender sys-tems can also be differentiated based on the type of source data on which the system is built -explicit or implicit user feedback. Though explicit feedback is a clear indication of the user X  X  preference over the item, it is not always available and it is intrusive to users, because it requires a significant level of user engage-ment. On the other hand, implicit user feedback such as purchase history can be automatically generated and the properties of implicit feedback (such as no negative feedback, inherent noise, indication of confidence, need of appropriate measure) are listed in [ 9 ]. In addition, the amount of implicit data today is sig-nificantly larger than the amount of explicit data, thanks to increased number of devices generating data (mobile phone, wearable devices, to name a few). Dif-ferent approaches have their own limitations. We propose a hybrid recommender system which not only uses observations from implicit feedback but also utilizes implicit profiles of users and items. The experiment indicates that the proposed recommender system outperforms two state-of-the-art methods for implicit feed-back datasets on its accuracy.
 mender systems is reviewed in Sect. 2 and We propose hybrid recommender sys-tem in the context of hotel recommendations in Sect. 3 . The specification of source data and the comparison of performance is demonstrated in the following section and conclusions and future works are made in Sect. 5 . 2.1 Content-Based and Collaborative Filtering Methods Content-based methods use a set of attributes that characterize an item and generate content-defined user profile by analyzing items previously rated or seen by each user. With the item and user profiles given, the utility function computes the similarity between user and item to create the recommendation. Suppose the item i and user v can be represented by l dimensional vector, g Then utility function u takes g i and h v as inputs and computes the similarity between item i and user v . One of the most widely used similarity measures is cosine similarity, u ( v, i )=cos( h v , g i )= h v  X  g i Collaborative filtering methods compute the utility for a pair of user v and feedback. An observation matrix U  X  R m  X  n is defined such that its element, u , represents the observation that associates user v and item i . Two repre-sentative methods of collaborative filtering are neighborhood model and latent factor model.
 Neighborhood Model: The model has been used in a variety of applications in early stage of the recommender system [ 7 ]. The underlying idea of neighborhood model is to estimate unknown ratings by using similar users or items. Two similarity measures are frequently used, Pearson correlation coefficient and cosine similarity, which can be computed from an observation matrix U . Utility of item i for user v can be estimated by identifying k most similar items among those rated by user v . If we define I k ( i ; v ) as such k items, and s between item i and j , then the utility is given as weighted sum of similarities of k similar items. Latent Factor Model: Latent factor model explains the observed ratings with finite number of latent factors and this approach was one of the winning algo-rithms of Netflix prize announced by Netflix in 2006 [ 2 ]. Among various attempts, Singular Value Decomposition (SVD) model [ 12 , 16 ] became popular because of its scalability and accuracy. The idea is to represent the users and items using f dimensional vector, x v  X  R f and y i  X  R f , and to estimate the unknown ratings or utility by a dot product of two vectors, u ( v, i )= x An observation matrix can be decomposed by two lower dimensional matrices X  X  R m  X  f and Y  X  R f  X  n through the optimization with a regularized model to avoid overfitting. where  X  is a parameter for a regularization. 2.2 Methods with Implicit Feedback We introduce two state-of-the-art methods to build a recommender system with implicit feedback. Two methods can be considered as an adaption of collaborative filtering methods and learn embeddings of users and items in a f -dimensional factor space. But the main difference comes from the optimization criterion. Weighted Regularized Matrix Factorization (WR-MF): [ 9 , 11 ]proposed a recommender system with implicit feedback based on a matrix factorization. They both extended an objective function with a regularization term to avoid an overfitting and introduced an additional parameter to assign more weights on positive feedback. The optimization criterion is given as A parameter, c vi , is given a priori and [ 9 ] sets up this parameter proportional to the number of observations between user v and item i while [ 11 ] suggests to have c vi = 1 for positive feedback and smaller values for unobserved feedback. Bayesian Personalized Ranking (BPR): BPR [ 14 ] computes the parameter of an arbitrary model class to differentiate the user X  X  preference on two items. The optimization maximizes the likelihood of the parameter by using Bayesian approach in order to find the correct personalized ranking. where  X  is the logistic sigmoid function,  X  u vij is a real-valued function parame-terized with  X  evaluating the difference between items with positive feedback and no feedback. D s is the set of user, observed, and unobserved item tuple. 2.3 Hybrid Model Main motivation of the hybrid recommender system is to deal with a cold-start or sparsity problem of collaborative filtering or content-based approach and to further improve the performance of the recommender system. The strategies of hybrid recommender systems can be divided into seven categories [ 5 ] depending on how they combine multiple or same techniques: weighted, switching, mixed, feature combination, feature augmentation, cascade, and meta-level. As we can see from the complete survey of hybrid recommender systems in [ 4 ], most of previous works implemented and tested hybrid recommender system for explicit user feedback such as MovieLens, EachMovie dataset and almost no systems have been implemented on implicit feedback. In this section we describe a hybrid model for implicit feedback by explaining different components of the system and the method to combine them. 3.1 Collaborative Component We conducted an empirical study on collaborative filtering methods with dif-ferent types of observation matrices and similarity measures. Three different observations are investigated as an element of observation matrix -binary vari-able, term frequency (TF), and term frequency/inverse document frequency (TF-IDF). The idea is to put more weights on more observations to reflect higher confidence on items. To derive observations, we first define r the observed action of user v on item i , for example, the number of consump-tions of item i from user v . Binary variable p vi indicates whether user v has ever consumed item i : Unobserved value, r vi = 0, for implicit feedback cannot be ignored as no action on item i from user v is also meaningful feedback and should not be handled as missing values as opposed to explicit feedback. For example, there are cases where item i was not available when user v consumed other items. Furthermore, a specific item was not chosen because of demographic reason in the case of hotel reservation system. Thus we treat zero values of r vi as a low confidence from user v on item i instead of a negative feedback on item i .
 TF and TF-IDF are mainly used in specifying keywords weights for text-based documents. Suppose f ij is the number of keyword j appearing in document i . Then normalized TF is defined as TF ij = f ij max by the maximum number of appearance of keywords in the same document. IDF is often used to diminish the weights of words that occur frequently in the documents and to increase the weights of keywords specific to the document, IDF j = log n n j , where n is the total number of documents and n of documents in which keyword j appears.
 We borrow the concept of TF-IDF and re-define it in the setting of user-item pair for implicit feedback datasets as follows. We replace f the total number of items and the number of items consumed by user v . Using the above definition, b vi represents the number of consumption of item i by user v normalized by maximum number of consumption on any items from user v and IDF v is the weights associated with user X  X  previous action on items. The interpretation of w vi in user-item pair is that an item can be better repre-sented by users having consumed on specific items, than by users who consumed on broad range of items. Note that three different types of m matrices U can be created by arranging three different observations, p w into the matrix. We used cosine similarity measure for neighborhood model and actual similarity depends on the type of observation used. where the superscript indicates which observation is used.
 Next step is to compute the utility for the pair of item i and user v as an aggregate of similarity of k similar items. In general, the utility is computed as a sum of similarity weighted by its own observation as seen in Eq. ( 1 ). As stated earlier, however, a positive observation of implicit feedback can be considered as higher confidence level of the preference. Consequently, we introduce a method to aggregate similarities, which is computed from a binary variable, of k similar items weighted by our confidence in observing p vi . In our empirical experiment, a similarity measure based on binary variable, s weighted by b vj is chosen after comparing different combinations of similarity measures in Eq. ( 7 ) but the results of comparison are not provided due to the limited space. We name this approach as Term-Frequency k-Nearest Neighbor (TFkNN) to simplify the notation. 3.2 Content-Based Component A profile vector of an item, g i , is built from attributes of an item and we used summation as a method to aggregate content-based user profile, h similarity measure is used to compute the similarity between user and item, which is the utility for content-based method, u cb ( v, i )=cos( h 3.3 Hybrid System As the first step of a hybrid recommender system, we use a linear weighting scheme for collaborative filtering and content-based components as follows. measure, which can readily computed from implicit feedback datasets. Popularity measure of item i is defined by a rank of the item i and a total number of items, n .Let rank i be a rank of item i within the reversely ordered list of all items based on the number of users consumed that item. Then, the item that the most users consumed has 1 as popularity measure and it decreases by of items. A popular item is known to be one of the appropriate items to be presented to users without many observations, and to be an efficient solution for extracting the most value about users [ 13 ]. But at the same time, we want to design a hybrid recommender system that relies more on personal data as more user feedback is accumulated. We therefore propose an adaptive approach to create a hybrid recommender system that uses a popularity measure combined with a user dependent weighting scheme. The utility of the proposed hybrid recommender system by taking into account implicit feedback, implicit profile of users, and popularity measure is computed as: Note that the user adaptive weighting scheme is intuitive in a sense that a weight for personalized recommendation increases as the number of items that a user has consumed increases. In an extreme example where the user consumes only 1 item, i.e. n v = 1, the hybrid recommender system becomes a system based purely on a popularity measure. After an exhaustive search, we found that  X  =2 . 0 , X  =0 . 01 to work the best for datasets used in an experimental study. 4.1 Data Description In order to test and evaluate the hybrid recommender system proposed in Sect. 3 , we conducted an experimental study with a real dataset consisting of hotel reservation records. We collected 30 months of hotel reservation records from a reservation system for a large enterprise US corporation. Personally identifi-able information or personally sensitive information (e.g.: credit card number) is not extracted or is anonymized for the purpose of this research. Data includes reservation records from an online reservation system or a direct phone call to the designated travel agency.
 Among available fields in the hotel reservation data include time information such as reservation date, arrival date, departure date, and hotel-specific infor-mation such as room type, daily rate, hotel chain and brand, hotel name, and address. We found 711,111 booking records from 92,323 users to 19,788 hotels in 5,052 different cities globally (density is 0 . 0389 %). Density of representative public datasets [ 3 ] with explicit feedback is about 4 . 61 % for MovieLens 1 M dataset, 1 . 308 % for MovieLens 10 M dataset, 1 . 17 % for Netflix dataset, 55 . 84 % for Jester dataset, and 2 . 36 % for EachMovie dataset. Only the Book-crossing dataset is sparser than our implicit dataset with density of 0 . 0014 %. Out of 30 months of data, training data was constructed with 24 months of data before the most recent month (which was held for test data) in the entire dataset. If user v haseverbookedhotel i , then p vi =1and r of reservations. b vi is the number of reservations normalized by the maximum number of bookings from user v across all hotels. Lastly, a weight dependent on the number of hotels for user v are applied to compute w vi constructed as training data for the most recent one month of the entire dataset. Another input to the recommender system, in addition to the identity of the traveler, is a destination city to pre-filter the list of hotels before the system sorts them by utility value -it does not make sense to recommend hotels not in the destination city. The number of hotels in one city ranges between 1 and 190 in our dataset and we excluded data with city having only one hotel from the test data because there are no multiple choices against which the recommender system needs to prioritize. Furthermore, we did not remove the possibility to recommend the same hotel to a user, as opposed to recommendations for many other application domains such as movies and book recommendations. TFkNN method as a collaborative component of the hybrid recommender sys-tem. The content-based recommender system was created based on the implicit user profiles and the hierarchy of hotel chains and brands. With 324 differ-ent hotel chains encoded in the dataset, content vector for hotel g h v is defined as l (= 324)-dimensional vector. Finally, a popularity measure is integrated with the hybrid recommender system which computes the utility of user-hotel pair as in Eq. ( 11 ). 4.2 Evaluation Methods The recommender system was evaluated by two measures, the expected per-centile ranking [ 9 ] and a precision-recall measure for recommending top-N items [ 6 ]. A recall-based expected percentile ranking is a measure which is appro-priate to implicit user feedbacks where type I error (false positive) cannot be detected. Suppose rank vi is the percentile rank of hotel i within a destination city to which user v travels. Then, the expected percentile rank is given as fol-lows. where superscript t is a notation for test data.
 mance of recommender system whose output is top-N recommended items. By changing the number of items recommended to the user, N , recall and precision can be examined. The range of N in our case, however, does vary depending on the destination city of individual test data point. To overcome this discrepancy, we define N as a percentile instead of a raw rank of recommended hotels as explained in percentile rank measure. Now, N ranges between 0 and 100 and recall having 1 with lower value of N is desired for the recommender system. The precision and recall for a given recommender system with T test data points are defined as below. 4.3 Results and Discussion Our experiments tested TFkNN, a hybrid recommender system based on TFkNN, WR-MF, and two BPR approaches, BPR-MF and BPR-kNN respec-tively. For WR-MF and BPR-MF, the number of factors ranges from 8 to 128. Overall results of comparison are shown in Figs. 1 , 2 and we have the following observations.
 Comparison Among TFkNN, WR-MF, and BPR Methods: The expected percentile ranking of TFkNN methods is lower than two BPR based methods and WR-MF method. This shows the importance of augmenting the similarity between hotels by number of bookings from each user when the rec-ommender system is built for implicit feedback to accommodate the different level of confidence on a positive feedback. Also, the expected percentile rank-ing of WR-MF method is increasing as the number of factor increases. It is known that a matrix factorization model learned by singular vector decomposi-tion (SVD) suffers from an overfitting and we can see the same problem from our experiment.
 Improvement Through Hybrid Approach: Though not shown in Fig. 1 ,the expected percentile ranking was reduced a little bit to rank =7 . 2353 % from rank =7 . 3577 % when a content-based component was added. Note that we used a limited number of hotel profiles, the hierarchy of chains and brands, due to the limitation of data availability. But there are many other profiles that can improve the performance such as a distance from a meeting location, the order of display in the online reservation system and so on. We reserve further improvement of the hybrid recommender system through content-based components as future works. Addition of a popularity measure to a hybrid recommender system achieved the lowest expected percentile rank, rank =6 . 6183 %.
 Comparison of Precision-Recall: We picked the number of factor for WR-MF and BPR-MF based on their lowest expected percentile ranking shown in Fig. 1 and did not include TFkNN method to narrow down the comparison. Recall in terms of percentile ranking N , and precision-recall relation are plotted in Fig. 2 . It is observed from the left figure that the probability that WR-MF, BPR-kNN, BPR-MF, and hybrid model can correctly recommend the actually booked hotel in top 10th percentile ranking is 38.02 %, 33.92 %, 42.90 %, and 52.52 % respectively. Precision recall metric from the right figure again confirms that the hybrid recommender system outperforms the other approaches based on the area under the curve. Each line shows precision measure when recall is provided and from the figure, when recall is 0.4, then precision of WR-MF, BRP-kNN, BPR-MF, and hybrid model is 0.038, 0.032, 0.044, and 0.063. In other words, the percentile ranking of our proposed hybrid model, with recall of 0.4, is lower than other models by about 30 % to 50 %.
 Impact of the Number of Previous Observations: We also analyzed the results to ensure our assumption that including a popularity measure results in a performance improvement particularly for users with less number of bookings in their history. The percentage of users in terms of number of bookings in training period is shown in Table 1 and it says that about 25 % of users have reserved less than 6 different hotels in train data. For these users, coming up with personalized hotel recommendations with favorable accuracy is difficult due to the lack of data to learn a personal preference from. Collaborative filtering, either neighborhood or latent factor models, or content-based methods suffer from the same problem. We think a popularity measure especially in the context of a business travel is a good recommendation for users with less number of bookings because a popularity of hotels stems from an enterprise compliance policy or frequently traveled places. Figure 3 shows the expected percentile rank for 4 different methods used in our experiment according to the number of previously booked hotels. First, it is clear that rank is gradually decreasing for users with more booking histories though the effect is not very noticeable for BPR-MF method. Secondly, we noticed that hybrid recommender system benefits from popularity measure mostly for users with less number of previous booked hotels because the decrease of rank happens largely for smaller value on x axis. In this work we studied a hybrid recommender system for implicit user feed-back datasets with the combination of TFkNN, content-based method, and a popularity measure. Possible extensions include introducing the recency of the observation, modifying the confidence level by analyzing the order of display in the reservation system for inferring user preference on unobserved user-item pair interactions. Content-based method using a hierarchy of hotel chains also con-tributes to the improved accuracy of the recommender system. We think that the limited amount of hotel profiles used in this empirical study explains the small amount of improvement on the expected percentile rank by adding content-based approach. The last component of the hybrid recommender system was a popular-ity measure which was adaptively added to the recommender system depending on the number of each user X  X  reserved hotels in training period.
 The proposed hybrid recommender system was implemented and tested with hotel reservation data. We evaluated the performance of the hybrid recommender system using two measures with the consideration of the property of implicit datasets. Recall based measures were examined and we were able to observe the improved performance of the hybrid recommender system over two state-of-the-art methods. Our proposed method strives to point users to hotels that they like to reserve by taking a balance between personalized and popular flavor of hotels. We are motivated to do further research on statistical analysis of the results, finding a dependency of property of items on the choice of each components of the hybrid recommender system, and how components can be integrated.
