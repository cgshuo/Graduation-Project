 Modeling human conversation is a fundamental scientific pursuit. In addition to yielding ba-sic insights into human communication, compu-tational models of conversation underpin a host of real-world applications, including interactive dialogue systems (Young, 2006), dialogue sum-marization (Murray et al., 2005; Daum  X  e III and Marcu, 2006; Liu et al., 2010), and even medi-cal applications such as diagnosis of psychological conditions (DeVault et al., 2013).

Computational models of conversation can be broadly divided into two genres: modeling and control . Control is concerned with choosing ac-tions in interactive settings X  X or example to maxi-mize task completion X  X sing reinforcement learn-ing (Levin et al., 2000), supervised learning (Hur-tado et al., 2010), hand-crafted rules (Larsson and Traum, 2000), or mixtures of these (Henderson and Lemon, 2008). By contrast, modeling  X  X he genre of this paper X  X s concerned with inferring a phenomena in an existing corpus, such as di-alogue acts in two-party conversations (Stolcke et al., 2000) or topic shifts in multi-party dia-logues (Galley et al., 2003; Purver et al., 2006; Hsueh et al., 2006; Banerjee and Rudnicky, 2006).
Many past works rely on supervised learning or human annotations, which usually requires man-ual labels and annotation guidelines (Jurafsky et al., 1997). It constrains scaling the size of training examples, and application domains. By contrast, unsupervised methods operate only on the observ-able signal (e.g. words) and are estimated with-out labels or their attendant limitations (Crook et al., 2009). They are particularly relevant because conversation is a temporal process where models are trained to infer a latent state which evolves as the dialogue progresses (Bangalore et al., 2006; Traum and Larsson, 2003).

Our basic approach is to assume that each ut-terance in the conversation is in a latent state , which has a causal effect on the words the conver-sants produce. Inferring this model yields basic insights into the structure of conversation and also has broad practical benefits, for example, speech recognition (Williams and Balakrishnan, 2009), natural language generation (Rieser and Lemon, 2010), and new features for dialogue policy opti-mization (Singh et al., 2002; Young, 2006).

There has been limited past work on unsuper-vised methods for conversation modeling. Choti-mongkol (2008) studies task-oriented conversa-tion and proposed a model based on a hidden Markov model (HMM). Ritter et al. (2010) ex-tends it by introducing additional word sources, and applies to non-task-oriented conversations X  social interactions on Twitter, where the subjects discussed are very diffuse. The additional word sources capture the subjects, leaving the state-specific models to express common dialogue flows such as question/answer pairs.

In this paper, we retain the underlying HMM, but assume words are emitted using topic models (TM), exemplified by latent Dirichlet allocation (Blei et al., 2003, LDA). LDA assumes each word in an utterance is drawn from one of a set of latent topics, where each topic is a multinomial distri-bution over the vocabulary. The key idea is that the set of topics is shared across all states, and each state corresponds to a mixture of topics. We propose three model variants that link topics and states in different ways.

Sharing topics across states is an attractive property in task-oriented dialogue, where a sin-gle concept can be discussed at many points in a dialogue, yet different topics often appear in pre-dictable sequences. Compared to past works, the decoupling of states and topics gives our mod-els more expressive power and the potential to be more data efficient. Empirically, we find that our models outperform past approaches on two real-world corpora of task-oriented dialogues.

This paper is organized as follows: Section 2 in-troduces two task-oriented domains and corpora; Section 3 details three new unsupervised genera-tive models which combine HMMs and LDA and efficient inference schemes; Section 4 evaluates our models qualitatively and quantitatively, and fi-nally conclude in Section 5. To test the generality of our models, we study two very different datasets: a set of human-computer spoken dialogues in quering bus timetable ( Bus-Time ), and a set of human-human text-based dia-logues in the technical support domain ( TechSup-port ). In BusTime , the conversational structure is known because the computer followed a determin-istic program (Williams, 2012), making it possible to directly compare an inferred model to ground truth on this corpus. 1 In TechSupport , there is no tion of unsupervised methods. BusTime This corpus consists of logs of tele-phone calls between a spoken dialogue system and real bus users in Pittsburgh, USA (Black et al., 2010). For the user side, the words logged are the words recognized by the automatic speech recog-nizer. The vocabulary of the recognizer was con-strained to the bus timetable task, so only words known to the recognizer in advance are output. Even so, the word error rate is approximately 30 -40% , due to the challenging audio conditions of usage X  X ith traffic noise and extraneous speech. The system asked users sequentially for a bus route, origin and destination, and optionally date and time. The system confirmed low-confidence speech recognition results. Due to the speech recognition channel, system and user turns always alternate. An example dialogue is given below:
We discard dialogues with fewer than 20 ut-terances. We also map all named entities (e.g.,  X  X owntown X  and  X 28X X ) to their semantic types (resp.  X  location  X  and  X  bus-route  X  ) to reduce vo-cabulary size. The corpus we use consists of ap-proximately 850 dialogue sessions or 30 , 000 ut-terances. It contains 370 , 000 tokens (words or se-mantic types) with vocabulary size 250 .
 TechSupport This corpus consists of logs of real web-based human-human text  X  X hat X  con-versations between clients and technical support agents at a large corporation. Usually, clients and agents first exchange names and contact informa-tion; after that, dialogues are quite free-form, as agents ask questions and suggest fixes. Most dia-logues ultimately end when the client X  X  issue has been resolved; some clients are provided with a reference number for future follow-up. An exam-ple dialogue is given below: Figure 1: Plate diagrams of baseline models, from existing work (Chotimongkol, 2008; Ritter et al., 2010). Variable definitions are given in the text.
This data is less structured than BusTime ; clients X  issues span software, hardware, network-ing, and other topics. In addition, clients use com-mon internet short-hand (e.g.,  X  X hx X ,  X  X tg X ,  X  X pl X ,  X  X v X , etc), with mis-spellings (e.g.,  X  X fice X ,  X  X ff-fice X ,  X  X rorr X , etc). In addition, chats from the web interface are segmented into turns when a user hits  X  X nter X  on a keyboard. Therefore, clients X  input and agents X  responses do not necessarily alternate consecutively, e.g., an agent X  X  response may take multiple turns as in the above example. Also, it is unreasonable to group consecutive chats from the same party to form a  X  X lternating X  structure like BusTime dataset due to the asynchronism of different states. For instance, the second block of client inputs clearly comes from two different states which should not be merged together.

We discard dialogues with fewer than 30 utter-ances. We map named entities to their semantic The corpus we use contains approximately 2 , 000 dialogue sessions or 80 , 000 conversation utter-ances. It consists of 770 , 000 tokens, with a a vo-cabulary size of 6 , 600 . In this work, our goal is to infer latent structure presented in task-oriented conversation. We as-sume that the structure can be encoded in a prob-abilistic state transition diagram, where the dia-logue is in one state at each utterance, and states have a causal effect on the words observed. We as-sume the boundaries between utterances are given, which is trivial in many corpora.
 The simplest formulation we consider is an HMM where each state contains a unigram lan-guage model (LM), proposed by Chotimongkol (2008) for task-oriented dialogue and originally developed for discourse analysis by Barzilay and Lee (2004). We call it LM-HMM as in Figure 1(a). For a corpus of M dialogues, the m -th dialogue contains n utterances, each of which contains N n words (we omit index m from terms because it will be clear from context). At n -th utterance, we assume the dialogue is in some latent state s n . Words in n -th utterance w n, 1 ,...,w n,N erated (independently) according to the LM . When an utterance is complete, the next state is drawn according to HMM , i.e., P ( s 0 | s ) .

While LM-HMM captures the basic intuition of conversation structure, it assumes words are con-ditioned only on state. Ritter et al. (2010) extends LM-HMM to allow words to be emitted from two additional sources: the topic of current dialogue  X  , or a background LM  X  shared across all dia-logues. A multinomial  X  indicates the expected fraction of words from these three sources. For every word in an utterance, first draw a source in-dicator r from  X  , and then generate the word from the corresponding source. We call it LM-HMMS (Figure 1(b)). Ritter et al. (2010) finds these al-ternate sources are important in non-task-oriented domains, where events are diffuse and fleeting. For example, Twitter exchanges often focus on a particular event (labeled X ), and follow patterns like  X  X aw X last night? X ,  X  X was amazing X . Here X appears throughout the dialogue but does not help to distinguish conversational states in social media. We also explore similar variants.

In this paper, these two models form our base-lines. For all models, we use Markov chain Monte Carlo (MCMC) inference (Neal, 2000) to find la-tent variables that best fit observed data. We also assume symmetric Dirichlet priors on all multino-mial distributions and apply collapsed Gibbs sam-pling. In the rest of this section, we present our models and their inference algorithms in turn. 3.1 TM-HMM Our approach is to modify the emission probabil-ities of states to be distributions over topics rather than distributions over words. In other words, in-stead of generating words via a LM , we generate words from a topic model (TM), where each state maps to a mixture of topics. The key benefit of this additional layer of abstraction is to enable states to express higher-level concepts through pooling of topics across states. For example, topics might be inferred for content like  X  X us-route X  or  X  X o-source generator. Variable definitions are given in the text. cations X ; and other topics for dialogue acts, like to  X  X sk X  or  X  X onfirm X  information. States could then be combinations of these, e.g., a state might express  X  X sk bus route X  or  X  X onfirm location X . This approach also decouples the number of top-ics from the number of states. Throughout this pa-per, we denote the number of topics as K and the number of states as T . We index words, turns and dialogues in the same ways as baseline models.
We develop three generative models. In the first variant ( TM-HMM , Figure 2(a)), we assume every state s in HMM is associated with a distribution over topics  X  , and topics generate words w at each utterance. The other two models allow words to be generated from different sources (in addition to states), akin to the LM-HMMS model.

TM-HMM generates a dialogue as following: 1: For each utterance n in that dialogue, sample 2: For each word in utterance n , first draw a We assume  X   X  X  and  X   X  X  are drawn from corre-sponding Dirichlet priors, as in LDA .

The posterior distributions of state assignment s n and topic assignment z n,i are p ( s n | s  X  n , z ,  X  ,  X  )  X  p ( s n | s  X  n ,  X  ) p ( z n,i | s , w , z  X  ( n,i ) ,  X  ,  X  )  X  p ( z n,i | s , z where  X  ,  X  ,  X  are symmetric Dirichlet priors on state-wise topic distribution  X  t  X  X , topic-wise word distribution  X  t  X  X  and state transition multinomials, respectively. All probabilities can be computed using collapsed Gibbs sampler for LDA (Griffiths and Steyvers, 2004) and HMM (Goldwater and Griffiths, 2007). We iteratively sample all param-eters until convergence. 3.2 TM-HMMS TM-HMMS (Figure 2(b)) extends TM-HMM to al-low words to be generated either from state LM (as in LM-HMM ), or a set of dialogue topics (akin to LM-HMMS ). Because task-oriented dia-logues usually focus on a specific domain, a set of words appears repeatedly throughout a given dialogue. Therefore, the topic distribution is of-ten stable throughout the entire dialogue, and does not vary from turn to turn. For example, in the troubleshooting domain, dialogues about network connections, desktop productivity, and anti-virus software could each map to different session-wide topics. To express this, words in the TM-HMMS model are generated either from a dialogue-specific topic distribution, or from a over sources is sampled once at the beginning of each dialogue and selects the expected fraction of words generated from different sources.

The generative story for a dialogue session is: 1: At the beginning of each session, draw a dis-2: For each utterance n in the conversation, draw 3: For each word in utterance n , first choose a Again, we impose Dirichlet priors on distributions over topics  X   X  X  and distributions over words  X   X  X  as in LDA . We also assume the distributions over sources  X   X  X  are governed by a Beta distribution.
The session-wide topics is slightly different from that used in LM-HMMS : LM-HMMS was de-veloped for social chats on Twitter where topics are very diffuse and unlikely to repeat; hence of-ten unique to each dialogue. By contrast, our mod-els are designed for task-oriented dialogues which pertain to a given domain where topics are more tightly clustered; thus, in TM-HMMS session-wide topics are shared across the corpus.

The posterior distributions of state assignment s , word source r n,i and topic assignment z n,i are p ( s n | r , s  X  n , w ,  X  ,  X  )  X  p ( s n | s  X  n ,  X  ) p ( z n,i | r , w , z  X  ( n,i ) ,  X  ,  X  )  X  p ( z n,i | r , z where  X  is a symmetric Dirichlet prior on session-wise word source distribution  X  m  X  X , and other symbols are defined above. All these probabilities are Dirichlet-multinomial distributions and there-fore can be computed efficiently. 3.3 TM-HMMSS The TM-HMMSS (Figure 2(c)) model modifies TM-HMMS to re-sample the distribution over word sources  X  at every utterance , instead of once at the beginning of each session. This modifica-tion allows the fraction of words drawn from the session-wide topics to vary over the course of the dialogue. This is attractive in task-oriented di-alogue, where some sections of the dialogue al-ways follow a similar script, regardless of session topic X  X or example, the opening, closing, or ask-ing the user if they will take a survey. To support these patterns, TM-HMMSS conditions the source generator distribution on the current state.
The generative story of TM-HMMSS is very similar to TM-HMMS , except the distribution over word sources  X   X  X  are sampled at every state. A dialogue is generated as following: 1: For each session, draw a topic distribution  X  . 2: For each utterance n in the conversation, draw 3: For each word in utterance n , first sample a As in TM-HMMS , we assume multinomial distri-butions  X   X  X  and  X   X  X  are drawn from Dirichlet pri-ors; and  X   X  X  are governed by Beta distributions.
The inference for TM-HMMSS is exactly same as the inference for TM-HMMS , except the poste-rior distributions over word source r n,i is now where the first term is integrated over all sessions and conditioned on the state assignment. 3.4 Supporting Multiple Parties Since our primary focus is task-oriented dia-logues between two parties, we assume every word source is associated with two sets of LM s X  one for system/agent and another for user/client. This configuration is similar to PolyLDA (Mimno et al., 2009) or LinkLDA (Yano et al., 2009), such that utterances from different parties are treated as different languages or blog-post and comments pairs. In this work, we implement all models un-der this setting, but omit details in plate diagrams for the sake of simplicity.

In settings where the agent and client always al-ternate, each state emits both text before transi-tioning to the next state. This is the case in the BusTime dataset, where the spoken dialogue sys-tem enforces strict turn-taking. In settings where agents or client may produce more than one utter-ance in a row, each state emits either agent text or client text, then transitions to the next state. This is the case in the TechSupport corpus, where either conversant may send a message at any time. 3.5 Likelihood Estimation To evaluate performance across different models, we compute the likelihood on held-out test set. For TM-HMM model, there are no local depen-dencies, and we therefore compute the marginal likelihood using the forward algorithm. However, for TM-HMMS and TM-HMMSS models, the la-tent topic distribution  X  creates local dependen-cies, rendering computation of marginal likeli-hoods intractable. Hence, we use a Chib-style estimator (Wallach et al., 2009). Although it is computationally more expensive, it gives less bi-ased approximation of marginal likelihood, even for finite samples. This ensures likelihood mea-surements are comparable across models. In this section, we examine the effectiveness of our models. We first evaluate our models qualitatively by exploring the inferred state diagram. We then perform quantitative analysis with log likelihood measurements and an ordering task on a held-out test set. We train all models with 80% of the en-tire dataset and use the rest for testing. We run the Gibbs samplers for 1000 iterations and update all hyper-parameters using slice sampling (Neal, 2003; Wallach, 2008) every 10 iterations. The training likelihood suggest all models converge within 500  X  800 iterations. For all Chib-style esti-mators, we collect 100 samples along the Markov chain to approximate the marginal likelihood. 4.1 Qualitative Evaluation Figure 3 shows the state diagram for BusTime cor-pus inferred by TM-HMM without any supervi-to say a bus route, or to say  X  X  X  X  not sure. X  It then transits to a state about location, e.g., origin and destination. Both these two states may continue to a confirmation step immediately after. After verifying all the necessary information, the system erwise, the system follows up with the user on the particular date and time information. After system reads out bus times, the user has options to  X  X e-peat X  or ask for subsequent schedules.

In addition, we also include the human-annotated dialogue flow in Figure 4 for refer-ence (Williams, 2012). It only illustrates the most common design of system actions, without show-ing edge cases. Comparing these two figures, the dialogue flow inferred by our model along the most probable path (highlighted in bold red in Fig-ure 3) is consistent with underlying design. Fur-thermore, our models are able to capture edge cases X  X mitted for space X  X hrough a more gen-eral and probabilistic fashion. In summary, our models yield a very similar flowchart to the under-
Figure 5 shows part of the flowchart for the TechSupport corpus, generated by the TM-HMMSS model. 8 A conversation usually starts with a welcome message from a customer support agent. Next, clients sometimes report a problem; otherwise, the agent gathers the client X  X  identity. After these preliminaries, the agent usually checks the system version or platform settings. Then, in-formation about the problem is exchanged, and a cycle ensues where agents propose solutions, and clients attempt them, reporting results. Usually, a conversation loops among these states until ei-ther the problem is resolved (as the case shown in the figure) or the client is left with a reference number for future follow-up (not shown due to space limit). Although technical support is task-oriented, the scope of possible issues is vast and not prescribed. The table in Figure 5 lists the top ranked words of selected topics X  X he categories clients often report problems in. It illustrates that, qualitatively, TM-HMMSS discovers both problem categories and conversation structures on our data.
As one of the baseline model, we also include a part of flowchart generated by LM-HMM model with similar settings of T = 20 states. Illus-trated by the highlighted states in 6, LM-HMM model conflates interactions that commonly occur at the beginning and end of a dialogue X  X .e.,  X  X c-knowledge agent X  and  X  X esolve problem X , since their underlying language models are likely to pro-duce similar probability distributions over words. By incorporating topic information, our proposed models (e.g., TM-HMMSS in Figure 5) are able to enforce the state transitions towards more frequent flow patterns, which further helps to overcome the weakness of language model. 4.2 Quantitative Evaluation In this section, we evaluate our models using log likelihood and an ordering task on a held-out test set. Both evaluation metrics measure the predic-tive power of a conversation model. Log Likelihood The likelihood metric measures the probability of generating the test set under a specified model. As shown in Figure 7, our models yield as good or better likelihood than LM-HMM and LM-HMMS models on both datasets under all settings. For our proposed models, TM-HMMS and TM-HMMSS perform better than TM-HMM on TechSupport , but not necessarily on BusTime . In addition, we notice that the marginal benefit of TM-HMMSS over TM-HMM is greater on Tech-Support dataset, where each dialogue focuses on one of many possible tasks. This coincides with our belief that topics are more conversation de-pendent and shared across the entire corpus in cus-tomer support data X  X .e., different clients in differ-ent sessions might ask about similar issues. Ordering Test Ritter et al. (2010) proposes an evaluation based on rank correlation coefficient, which measures the degree of similarity between any two orderings over sequential data. They use Kendall X  X   X  as evaluation metric, which is based on the agreement between pairwise orderings of two sequences (Kendall, 1938). It ranges from  X  1 to +1 , where +1 indicates an identical ordering and  X  1 indicates a reverse ordering. The idea is to generate all permutations of the utterances in a dialogue (including true ordering), and compute the log likelihood for each under the model. Then, Kendall X  X   X  is computed between the most proba-ble permutation and true ordering. The result is the average of  X  values for all dialogues in test corpus.
Ritter et al. (2010) limits their dataset by choos-ing Twitter dialogues containing 3 to 6 posts (ut-terances), making it tractable to enumerate all per-mutations. However, our datasets are much larger, and enumerating all possible permutations of dia-logues with more than 20 or 30 utterances is infea-sible. Instead, we incrementally build up the per-mutation set by adding one random permutation at a time, and taking the most probable permutation after each addition. If this process were continued (intractably!) until all permutations are enumer-ated, the true value of Kendall X  X   X  test would be reached. In practice, the value appears to plateau after a few dozen measurements.

We present our results in Figure 8. Our mod-els consistently perform as good or better than the baseline models. For BusTime data, all models perform relatively well except LM-HMM which only indicates weak correlations. TM-HMM out-performs all other models under all set-tings. This is also true for TechSupport dataset. LM-HMMS , TM-HMMS and TM-HMMSS mod-els perform considerably well on BusTime , but not on TechSupport data. These three models al-low words to be generated from additional sources other than states. Although this improves log like-lihood, it is possible these models encode less in-formation about the state sequences, at least in the more diffuse TechSupport data. In summary, under both quantitative evaluation measures, our models advance state-of-the-art, however which of our models is best depends on the application. under different settings of topics K and states T . We have presented three new unsupervised mod-els to discover latent structures in task-oriented dialogues. We evaluated on two very different corpora X  X ogs from spoken, human-computer dia-logues about bus time, and logs of textual, human-human dialogues about technical support. We have shown our models yield superior perfor-mance both qualitatively and quantitatively.
One possible avenue for future work is scala-bility. Parallelization (Asuncion et al., 2012) or online learning (Doucet et al., 2001) could signif-icantly speed up inference. In addition to MCMC, another class of inference method is variational Bayesian analysis (Blei et al., 2003; Beal, 2003), which is inherently easier to distribute (Zhai et al., 2012) and online update (Hoffman et al., 2010). We would like to thank anonymous reviewers and Jordan Boyd-Graber for their valuable comments. We are also grateful to Alan Ritter and Bill Dolan for their helpful discussions; and Kai (Anthony) Lui for providing TechSupport dataset.
