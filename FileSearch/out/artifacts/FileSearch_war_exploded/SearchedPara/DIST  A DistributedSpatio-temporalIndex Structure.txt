
We consider the general problem of tracking mo ving objects in sensor netw orks. The specific application we consider is that of tracking a chemical plume mo ving over a lar ge infrastructure net-work. We present a distrib uted inde x structure DIST that stores and updates distrib uted summaries as the plume mo ves. We present algorithms for range queries on the history of the plume. DIST lo-calizes information with respect to time and space using a hierarchy that scales with the plume size. The highlight of our work is an an-alytical model that predicts the cost of query algorithms based on the query location, query size, and plume X  s spatio-temporal distri-bution. Using this model, our adapti ve scheme chooses the optimal scheme. Experimental results sho w that DIST outperforms alterna-tive techniques in query , update, and storage costs, and scales well with the number of plumes.
 H.2.4 [ Systems ]: [Distrib uted databases, Query processing] Algorithms, Design
Sensor netw orks, Spatio-temporal inde xing Consider the follo wing historical event [2]: The explosions that started the Chernobyl incident sent lar ge amounts of radioactivity into the atmospher e. The wind carried the radioactivity towar ds Centr al Sweden. A plume reac hed Centr al Eur ope and another was blown over the Balkans. Monitoring stations around the world began intensive sampling programs. During this disaster , govern-
The authors were supported by the Army Research Or ganisation grant DAAD19-03-D-004 through the Institute of Collaborati ve Biotechnoloies.
 Cop yright 2005 ACM 1-59593-140-6/05/0010 ... $ 5.00. ments needed to kno w the shape, location, and direction of the plume at every time instant. Monitoring sites processed the global plume information gathered from passi ve sensors.

No wadays, organizations are deplo ying lar ge scale sensor net-works for real-time monitoring applications, such as military sens-ing and tracking, traf fic control, and seismic measurements. A new generation of tin y, and computationally acti ve sensors are being de-veloped not only to overcome the scalability issues but also for de-plo yment in inhospitable terrains. Although these sensors pro vide continuous monitoring, their limited resources (processing, com-munication, and storage) render the con ventional data management tools and techniques inef fecti ve.

Distrib uted protocols and algorithms [7, 15, 16] are being em-plo yed to store, process, and query high level semantically rich data from the indi vidual, raw and noisy sensor signals. But, as the power consumption for communication is up to three orders of magnitude higher than that for computation on a sensor node (such as a Cross-bow Mica2 mote [1]), a goal of sensor research has been to lower data transmission while designing such distrib uted techniques.
We develop distrib uted techniques for answering queries regard-ing the mo vement of an object in a sensor netw ork. Our query of interest is: Was the object present in a given region during a given time interval? Such a spatio-tempor al rang e query should return all object locations where the object X  s spatial extent overlaps with the query X  s spatial range and its temporal duration overlaps with the query X  s temporal range.

Specifically , we consider the case of a chemical plume mo ving over a sensor netw ork. This is more challenging since a plume X  s shape can change in addition to its translations and rotations. Sen-sors collaborate to detect the shape of a plume periodically . As the plume mo ves, the mo vement has to be sensed, and the loca-tion of the plume should be updated. The resulting spatio-temporal summary of a plume X  s mo vement can be used to answer queries regarding its location at dif ferent time interv als, e.g., whic h plume contour s wer e present in a given region during a given time period?
We focus on efficient distrib uted inde xing of a plume X  s mo ve-ment in order to answer such queries with a small communication overhead. We assume that each sensor is stationary and kno ws its own location and that of its neighbors [10, 15]. Our contrib utions are: 1. We address the important problem of plume tracking (in gen-2. We design an analytical model to evaluate the expected cost 3. Our experimental results on real-w orld plume mobility mod-The sensor netw ork is hierarchically decomposed into levels and a quad-tree lik e partitioning (called cells ) at each level. A distrib uted inde xing scheme exploits the plume X  s locality in space and time using a hierarchical inde x. The mo vement of a plume is observ ed at dif ferent spatial resolutions: indices at a level of resolution are updated only if the mo vement occurs across cells at that or a coarser level. Ne xt, we discuss the spatial decomposition of a netw ork into cells, and the propagation of location information of a plume as it mo ves through the netw ork. The key idea behind DIST is to observ e the mo vement of the plume at dif ferent spatial and temporal scales. To this end, the entire topol-ogy is decomposed into cells at dif ferent spatial resolutions (sim-ilar to a quad-tree). Consider the bounding rectangle [ L L ] the entire N node netw ork on the x -y plane. A cell is obtained by dividing the netw ork recursi vely into four quadrants. The number of recursi ve divisions defines the level of a cell. The root node is at level 0 and denotes the highest level of decomposition. An example cell structure is illustrated in Fig. 1. We assume a dense deplo yment of sensors at level , i.e., one or more sensors in ev-ery cell at level . Ev ery cell has a leader . Leader election is done with the help of a localized and scalable hierarchical leader elec-tion algorithm [7] 1 . The leader of a cell c is denoted by hierarchical structure is imposed by connecting a cell leader to its four child quadrant leaders. All the actions at a cell are executed by its leader . In the development of our algorithms, we blur the distinction between a cell and its leader .

Depending on its current size, a plume is mapped to a specific level of the hierarchy; this level is denoted by ( ). If D the diameter of the axis-aligned minimum bounding rectangle of the plume, then = i if L= 2 i +1 &lt; D L= 2 i . A plume can also be mapped to a specific set of cells at level that contains it; this set is denoted by S . The size of set S is more than one if the plume straddles more than one cell. Note that jSj 4 . Since and S can change dynamically , we inde x them by a time instant, as in ( t ) and S ( t ) . We mak e two simple continuity assumptions about the plume mo vement for simplicity of presentation. First, does not change by more than one in two consecuti ve time instants, i.e., j ( t + 1) ( t ) j 1 . Second, the plume does not skip across the neighbors of a cell between two consecuti ve time instants, i.e., ( t ) = ( t + 1) ^ c 2S ( t + 1) ^ c 62 S ( t ) ) ( 9 d 2 N ( c ) :: d 2 S ( t )) , where N ( c ) denotes the neighbors of cell c .
Observ e the motion of the plume in Fig. 1. For the range query q : [42 ; 65] [42 ; 48] [ t 5 ;t 11 ] sho wn in the figure, its spatial range overlaps cells F , G , and H . The plume was present in cell at time instants t 8 and t 9 and in cell G at time instants These time instants are within the query X  s time interv al Therefore, any algorithm should return the plume summaries stored in
F and G for this query . 1 For query routing, the node closest to the centroid of a cell is elected as its leader . Figure 1: Mo vement of a plume across cells at various levels from time instants t 0 to t 16 . A ; B ;:::; J represent level 3 cells. P, Q, K are level 2 cells. T is a level 1 and R is a level 0 cell. Figure 2: Update propagation for the plume mo vement sho wn in Fig. 1. Ev ery node represents a cell leader . Ev ery leader stores an inde x or a set of disjoint time interv als over which the plume was inside its cell. Each time interv al has a begin and an end time instant. If the plume is currently in a cell, then its most recent interv al has 1 as the end value. Such an inde x is called open . Otherwise, an inde x is called closed . We maintain the follo wing invariant: ( Invariant I ) an inde x at a cell (leader) is open iff it is on the path from the root to a cell belonging to
We do not address the problem of detecting and summarizing the shape of a plume. We rely on the current boundary estimation and edge detection methods [3] for this task. We assume that a plume X  s shape is continuously track ed and stored at specific sensor nodes called repository nodes . These nodes communicate with the cell leaders after gathering plume information.
 Information about a plume X  s location is maintained as follo ws. At each time instant t , a repository node senses the plume and com-putes ( t ) and S ( t ) . It then sends a message ( id;t ) of each cell c 2 S ( t ) , where id is the repository node id. The in-dices at all these nodes and their parents need to be open in order to satisfy invariant I . Node l ( c ) stores the pair ( id;t ) dex at cell c was open at t 1 (or c 2 S ( t 1) ), node l ( c ) nothing else. Otherwise, l ( c ) inserts a new time interv al into its inde x, and propagates the recei ved information to its parent and the neighboring cells. If necessary , the parent uses this information to insert a new time interv al (recording of the id is not needed) and propagates the information up the tree. An y neighboring cell cell c that had an open inde x at time t 1 and that does not belong to
S ( t ) ends its most recent time interv al by inserting t 1 propagates the information up to the root so that its parent can also tak e the appropriate actions in order to maintain the invariant. If none of the neighboring cells had an open inde x at time t 1 this implies that the level of the plume has changed (our continuity assumptions). In this case, the tree is searched a level up and a level down to determine ( t 1) and S ( t 1) . The indices at the cells belonging to S ( t 1) S ( t ) are closed.

The number of update messages that are sent at a given time instant t depend on the changes in and S . If neither of them changes, updates are not generated. If S changes but does not, then update messages are confined to a small part of the tree. Chan-ges in lead to more messages; howe ver, these events are relati vely infrequent. The inde x at a cell leader at level k maintains plume information about all those instants when the plume was at a level at least k . The stored set of ( id;t ) values, on the other hand, maintains intersection information about all those instants when the plume was at level k . The complete update algorithm is presented in the full paper [17].

For the mo vement of the plume sho wn in Fig. 1, we obtain the execution trace sho wn in Fig. 2. At time instant t 0 , a repository node p senses that = 3 and S = f A g , and sends the message ( p;t 0 ) to leader l ( A ) . Node l ( A ) stores this tuple, and inserts the interv al ( t 0 ; 1 ) in its inde x, and propagates the message to its par -ent. Since this is the initial message, it propagates all the way up to the root, and every leader on the way also sets its inde x to Fig. 2(a) sho ws the resulting tree. At time instant t 1 , a repository node again sends a similar message to l ( A ) . Since A 2S ( t does not propagate any update messages to its parent, as sho wn in Fig. 2(b). At time instant t 2 , the plume has mo ved to a new cell A repository node q senses that S = f B g , and sends the message ( q;t 2 ) to node l ( B ) . Node l ( B ) opens a new interv al, and propa-gates the message to its parent and to every neighboring cell leader . As a result, node l ( A ) closes its open interv al and propagates the message up the tree. The parent does nothing as its inde x was open at t 1 , as sho wn in Fig. 2(c). Fig. 2(d) sho ws the tree at time In this section, we first describe two basic range query algorithms. The Smallest Common Ancestor (SCA) algorithm uses the hierar -chy to prune spatial and temporal extents of a query . The other algorithm, Dir ect , directly queries the cells within the spatial ex-tent of the query at level and its ancestors. Then, we discuss an adaptive algorithm that uses cost estimates to invoke either the SCA or the Dir ect scheme on a per -query basis. The query originator uses its kno wledge of the quad-tree lik e net-work cell structure to determine the spatial cells at the level that are intersected by the query . From these cells and the spatial tree hierarchy , it determines the smallest common ancestor sca of these cells. It then transmits the query to the sca using an underly-ing location-based communication model such as GPSR 2 [10], a greedy geographic routing protocol. For example, for the query q : [42 ; 65] [42 ; 48] [ t 5 ;t 11 ] sho wn in Fig. 1, the querying node at location (10 ; 50) decomposes the query X  s spatial extent into cells F , G , and H , and determines that cell T is the sca of these cells.
Upon recei ving the query message, the sca needs to accumulate spatio-temporal intersection information from all levels in the tree. In order to find all those instants when the intersecting plume was at a lower level than the level of sca , the query message is sent up the tree. An ancestor node evaluates if its inde x intersects with the query X  s time interv al. If so, it uses the stored ( id;t ) pairs that intersect temporally with the query . It then checks with the rele vant repository nodes for exact spatial intersections. The sca cell leader then finds intersecting plume contours at its own level by consulting the stored ( id;t ) pairs in an analogous manner . Finally , the sca evaluates if the query X  s time interv al overlaps with any of the time interv als in its inde x. If so, it propagates the query to those children whose spatial extent overlaps the query X  s spatial range. This forw arding down the tree is carried on recursi vely , pruning in both the spatial and temporal domains simultaneously until the query reaches level . All rele vant repository nodes transmit the plume contours back to the querying node.

Fig. 3 sho ws the query q  X  X  trace after it is transmitted to the leader of cell T , the sca of the query . A message is sent up the tree to parent R . There are no stored ( id;t ) pairs corresponding to plumes either at R or at T . Then, the downw ard propagation of the query begins. As the query drills down, we observ e that the branch from T to K is pruned spatially , whereas the branch from Q to H is pruned temporally . The query finally reaches nodes and G at level . These nodes now forw ard the query to all the rel-evant repository nodes. This scheme not only emplo ys the pruning adv antages of a tree, but also alle viates any root node bottlenecks since queries can begin at dif ferent levels in the tree. ( l ; h ) on the values of . In such cases, propagation up the tree from the sca stops when level l is reached and propagation down the tree stops when level h is reached. For example, under some mobility models, a plume only rotates and translates but retains its size (i.e, l = h = k where k is a constant). If the plume is kno wn to be at a specific level k , then the searching for intersecting plumes is carried out from the sca down to level k . In the Dir ect query algorithm, the query originator decomposes the query X  s spatial extent into cells at level (as in the SCA scheme), and directly queries these cells and all their ancestors. All levels in the query X  s spatial extent need to be queried since there is no a priori kno wledge regarding a plume X  s level, and a cell at level maintains intersection information for only a level k plume. This algorithm is useful when domain kno wledge limits the plume to a few levels. In that case, only cells within the query X  s spatial extent at the rele vant levels need to be queried. Specifically , if the plume is limited to just one level k , then only cells at level k that are within the query X  s spatial extent are queried. If h is kno wn a priori , the query can be decomposed into cells at level h instead of . 2 GPSR deli vers the pack et to the node closest to the destination location. As a cell leader is the node closest to the cell centroid, GPSR ensures that a pack et destined for the centroid is deli vered to the leader . A query originator locally computes the centroid of the sca cell and emplo ys GPSR to transmit the query to the sca leader . The cost of maintaining h is amortized if a plume X  s level changes infrequently .

The propagation of a query to the rele vant cells in the hierarchy can be made efficient by constructing a spanning tree ( ST ) at each level. Consider each cell leader within the query X  s spatial extent to be a verte x and place an edg e between two such vertices if the y are physically adjacent. In this manner , the query originator constructs a communication graph and finds a ST . The query is propagated along the ST at each level and then transmitted to the next level. Each leader on the ST forw ards the query to those repository nodes that intersect temporally with the query . All the results from the repository nodes are sent back to the querying node.

For example, the query q : [42 ; 65] [42 ; 48] [ t 5 ;t 11 is decomposed into cells F , G , and H at level = 3 . The graph has a verte x for each cell leader F , G , and H , and edges and G ! H because F and G are physically adjacent, as are and H . In this particular case, the ST at level 3 is the original graph itself. The ST at level 2 is the edge Q ! P , at level 1 is the node T , and at level 0 is the node R . Fig. 4 sho ws how the abo ve query is handled. The originator at location (10 ; 50) routes the query to the leader of cell F , the closest node in the ST at level . The leader of F forw ards the query to the leader of G , and the latter forw ards it to the leader of H . No w, since F and G  X  X  temporal ranges are within the query X  s temporal range, the leaders of these cells transmit the query to the rele vant repository nodes in their cells, whereas the leader of H does not. Fig. 4 sho ws how the query is recursi vely sent up to the ST at the next level. Both the SCA and Direct query algorithms have their adv antages and disadv antages. In the case of a query with a lar ge spatial range, the Dir ect query algorithm does not scale well, since it is propa-gated to a lar ge number of cells. Here, SCA is effecti ve as it prunes the search space in both space and time. But, for a plume with a few levels, and a query with a small spatial extent that overlaps multiple cells, SCA performs poorly as the smallest common ancestor ( sca ) lies high up in the hierarchy leading to an expensi ve drill-do wn op-eration. Direct querying ameliorates this effect by forw arding the query only to the small number of rele vant cells. It is possible to overcome the disadv antages of both the schemes by adopting the better of the two schemes depending on the query location, query size, and plume distrib ution on a per -query basis. This moti vates the adapti ve query scheme presented next.

We build an analytical model to compute the expected com-munication costs of the SCA and Direct query algorithms. Us-ing this model, the query originator locally computes the expected costs of Direct query , d ( q ) , and of SCA query , s ( q ) chooses the scheme with the lower cost for the query q denoted by q : ( x l ;x r ) ( y b ;y t ) ( t 1 ;t 2 ) .

The expected cost of a query q in Direct query , d ( q ) , can be de-composed into the expected cost of sending the query from the orig-inator to the closest node on the spanning tree at level , the expected cost of tra versing the spanning trees at dif ferent levels for the query , d ( q ) , and the expected cost of sending the query from the spanning tree nodes to the repository nodes, d ( q ) The expected cost of a query q in the SCA query , s ( q ) decomposed into the expected cost of sending the query from the originator to the sca , IC s ( q ) , the expected cost of tra versing the hierarchical tree from sca up and down the tree, s ( q ) , and the expected cost of sending the query to the repository nodes, Since both the query algorithms are guaranteed to return all the answers for a query , d ( q ) = s ( q ) . So, from Equations 1 and 2, we get The query originator , using its own location and inspecting tial extent, determines the closest node on the spanning tree at level and hence computes IC d ( q ) . Similarly , sca is determined using q  X  X  location and spatial extent; this is used to compute IC level of the plume is constrained to be in the range [ l ; these values are not kno wn a priori at query time, then l
Ne xt, we consider the computation of d ( q ) . The width level h cell is L= 2 h . The number of cells n h at level by query q , is given by
The cost of tra versing an edge of spanning tree, i.e., the number of hops to tra vel between two adjoining cell leaders 3 at level w =r , where r is the communication radius. Let this be denoted by c . Since the number of edges in the spanning tree is one less than number of nodes, the contrib ution to d ( q ) by nodes at level
Summing this cost over all levels, along with the additional inter -level communication costs we obtain
Finally , we analyze s ( q ) . Let p ( x;y;t ) be a spatio-temporal density function that assigns the probability of plume membership to a point ( x;y ) at time t . Then, Let the probability that the point ( x;y ) is inside the plume during the time interv al [ t 1 ;t 2 ] be given by p ( x;y; [ t 1 denote the probability that the plume was at a cell i at level ing the time interv al [ t 1 ;t 2 ] . No w, if cell i has an extent 3 This holds for dense sensor netw orks [20]. For accurate estima-tions it should be replaced by w=L hop [14], where L hop is the av-erage euclidean distance covered per hop. L hop = r ( ) is the density of the nodes and 0 ( ) 1 . and [ y 1 ;y 2 ] then: In s ( q ) , the cost of tra versing up the tree from the sca node is de-termined only by the level k of the sca , whereas the cost of drilling down the tree from the sca depends on the probability of intersec-tion of the plume with every cell on the path. Hence, s ( q ) = where V h is the set of cells at level h that intersect the query and ( i ) is set of children of cell i that belong to V h +1 . The first term is the cost of propagating up the tree. The second term is the cost of drilling down the tree: at every level h , we multiply the probability that the cell i 2 V h , intersects the plume during the query time from cell i to all its children that intersect the query (
The computation of p ( x;y;t ) depends on the plume mobility model. A rich body of literature has sho wn the efficac y of two such stochastic models, the cloud model [5], and the Gaussian plume model [6], in resembling real-w orld distrib utions. Equations 8 X 9 have a closed form solution for the cloud model. For the Gaussian model, numerical inte gration techniques are emplo yed. The details are discussed in the full paper [17].

In summary , the adapti ve query protocol follo wed by the query originator is: 1. Use equations 4 X 6 to compute d ( q ) . 2. Use equations 8 X 9 to compute s ( q ) . 3. Use equation 3 to find the optimal scheme.

Profile analysis [17] sho wed that the computational cost of this analytical model is up to three orders of magnitude smaller than the accrued communicational benefits for the MICA2 mote [1]. In this section, we compare the performance of our inde x structure and query algorithms against alternati ve choices for implement-ing spatio-temporal range queries. We evaluate the performance in terms of average query and update costs. Query cost is the average number of messages required to route a query to the rele vant nodes in the netw ork. Update cost is the number of messages required to update the distrib uted inde x as a plume mo ves in the netw ork. Ev en though there are currently no existing spatio-temporal inde x-ing schemes in sensor netw orks, we present two alternati ves.
Ne xt, we present the simulation and mobility models, and then present the results of an extensi ve evaluation of our techniques against the alternati ves in terms of update, query and storage costs. We built a discrete event simulation model. Experiments were con-ducted at netw ork sizes ranging from 1000 to 7000 nodes and node densities ranging from 0.6 to 0.8. Nodes were placed randomly with a uniform distrib ution. Each node has on the average 4 nodes within its radio range. Two nodes in the netw ork communicate with each other using GPSR [10]. We considered two stochastic models for the plume X  s mobility: For the first model, is fix ed at 5 and is maintained by every node and this (one-time) cost is amortized; for the second, it is allo wed to vary during the course of the experiment with a mean around is not maintained by the netw ork nodes. Query sizes are determined using exponential distrib ution and the location of the query is sam-pled from a uniform distrib ution. In experiments where query cost is measured for varying spatial query sizes, the temporal query size is fix ed at 10 % Exp Time (the total time of Experiment). For ex-periments with varying temporal query sizes, the spatial query size is fix ed at 10 % Grid Size (the total area of the netw ork). Figs. 5 and 6 plot the average update costs for the cloud and the Gaussian models. We see that DIST scales well with the netw ork size. Since Geocast has zero update cost, it is not sho wn. In Fig. 5, plume localization and the hierarchical structure allo ws DIST to reduce the number of updates. DIMS update costs are high due to Figure 7: Query costs for varying spatial query size for the cloud model. Figure 8: Adapti ve query X  s preference to SCA and Direct for the cloud model for varying spatial query sizes. the expensi ve hash involv ed in inserting a set of points. Therefore, DIST performs 2 times better than DIMS. In Fig. 6, we see a fur -ther reduction in DIST X  s update cost. This is attrib uted to the high degree of localization of the plume. DIMS incurs higher costs than before due to the lar ge plume size. Here, DIST performs 3 better than DIMS. In this section, we first sho w how adapti ve query overcomes the dis-adv antages of both the SCA and Direct querying schemes and low-ers the average communication cost on a per -query basis. Then, we sho w that the adapti ve query scheme performs two to three times better than DIMS and Geocast. 4.3.1 Adapti ve querying In the Adapti ve scheme, the query originator chooses the optimal scheme depending on the query location, query size and plume dis-trib ution (Section 3.3) on a per -query basis. Ev ery point sho wn in the follo wing plots is averaged over a set of 100 queries with the same query size but placed at dif ferent locations.

Figs. 7 and 9 sho w the query cost of the Adapti ve scheme as compared to the Dir ect and SCA algorithms for the cloud model. Fig. 7 illustrates the query costs for varying spatial query sizes. We Figure 9: Query costs for varying temporal query size for the cloud model. Figure 10: Adapti ve query X  s preference to SCA and Direct for the cloud model for varying temporal query sizes. Figure 11: Query cost for varying spatial query size for the Gaus-sian model. Figure 12: Query cost for varying temporal query size for the Gaussian model. Figure 13: Query cost for varying spatial query size for the cloud model. see that SCA performs better than Dir ect because of its spatial prun-ing in choosing the smallest common ancestor , and spatio-temporal pruning while drilling down. Ev en though is fix ed, the cost of Di-rect query gro ws linearly with the size of query because it is routed to all the cell leaders within the query X  s spatial range. Because the Adapti ve scheme chooses the minimal cost scheme for every query , its average cost (over the 100 queries) is lower than the average costs of SCA and Dir ect schemes. As the cost dif ference between the two algorithms increases, the Adapti ve scheme con verges to the better algorithm, i.e., SCA . For the set of 100 queries, Fig. 8 sho ws the preference of Adapti ve scheme towards the SCA compared to the Direct. Though at small spatial query sizes Direct is preferred, at lar ge query sizes SCA dominates the query set.
 Fig. 9 depicts the query costs for varying temporal query sizes. We see that the performance of the Direct algorithm is independent of the temporal query size (as expected). The SCA scheme per -forms well because of its pruning, but Dir ect performs better due to the small spatial query size. Therefore, the Adapti ve scheme con verges to Dir ect in this case. For the set of 100 queries, Fig. 10 illustrates the preference of Adapti ve scheme towards the Direct compared to the SCA. At lar ge temporal query sizes, SCA cannot prune as well temporally , whereas Direct retains its fix ed and small cost. Note in both the experiments, Adapti ve querying con verges to the optimal scheme.

Figs. 11 and 12 plot the average query cost for the Gaussian model. In Fig. 11 we notice the superior performance of the SCA over the Direct querying due to two reasons. First, as is not kno wn a priori , the Direct scheme propagates the query across spanning trees at all levels intersecting the query leading to a huge communication cost. Second, the temporal pruning emplo yed by the SCA decreases the drill-do wn cost. For the set of 100 we noticed that Adapti ve querying emplo yed the SCA for (almost) all the queries. Fig. 12 once again sho ws the independence of the Direct algorithm with time. Although SCA  X  X  pruning performance decreases at lar ge temporal query sizes, its costs are much lower compared to the Direct scheme. 4.3.2 Comparison with alter nati ves Here, we compare the performance of our adapti ve query scheme ( DIST ) against DIMS and Geocast. Figs. 13 and 14 plot the aver-age query costs for the cloud model. In Fig. 13, DIST performs bet-ter than the other schemes because it emplo ys SCA query to prune spatio-temporal query while drilling down the hierarchy . DIMS and Geocast do not scale with the query size. This is because Geocast forw ards the query to all the nodes in the query region and DIMS hashes the query to a lar ge region of nodes. In Fig. 14, Geocast and DIST (which now emplo ys Dir ect ) are independent of the tem-poral query size (as expected). DIST performs 3 times better than DIMS on average. In case of DIMS, its hash based on temporal dimension gro ws linearly with the size of query . Please refer to the Figure 14: Query costs for varying temporal query size for the cloud model.
 full paper [17] for performance gains (up to 2 times) of DIST over DIMS and Geocast for the Gaussian model. The average storage distrib ution on the nodes was computed ex-perimentally on a netw ork of size 8000. Storage unit reflects the storage for inde x. DIST uses 2 units for its open/closed time inter -vals and 2 units for ( id;t ) tuples; whereas DIMS uses 2 its inde x (centroid, time-stamp). Geocast is not sho wn because it does not maintain any indices. DIST used less storage compared to DIMS (as sho wn in Table 1) because of two reasons. First, up-date pruning created few open or closed time interv als at the lower level nodes in the DIST hierarchy . Second, at every time instant the number of events DIMS inserts is proportional to the plume size. Storage consumption for the Gaussian model is sho wn in Table 2. In this case, the plume is bigger and localized better . DIMS created hot spots due to the strictly increasing temporal dimension. Our techniques can be generalized to multiple plumes, where the id of the plume is stored along with each inde x. The identity ques-tion  X  X f a node n senses a plume at time t , and it senses another plume at time t + 1 , how does it determine whether it is sensing the same plume twice, or sensing two dif ferent plumes X  can be ad-dressed based on mo vement patterns [23]. Figs. 15 and 16 sho w that DIST X  s update cost scales well with the number of plumes. For the cloud model (Fig. 15), DIST outperforms DIMS due to the pruning of update messages for every plume. Geocast has zero update cost and hence is not sho wn. Fig. 16 illustrates the scalabil-ity for the Gaussian plume model. We see a further impro vement in DIST because of a greater localization. Lar ge plume sizes and DIMS X  s expensi ve update scheme result in a poor scalability . Al-though the query costs for both scale with the number of plumes, DIST performs better message pruning due to adapti ve querying.
The general problem that the paper addresses X  spatio-tempor al rang e queries  X  X as been greatly studied in spatio-temporal data mining. Motion Objects Spatio-T emporal (MOST) models [23] support queries regarding the past, present and future locations of mobile objects. There have been man y spatio-temporal inde xing techniques using R-T rees [9] and its variants, by transforming the location-time plane into the dual velocity-intercept plane. TPR-tree [19] which keeps a pre vious history of each object is update intensi ve. Sun et al [22] use multi-dimensional histograms to count objects in a partition of 2 D-grid. These schemes operate in a cen-tralized, infrastructure netw ork with no memory or power limita-tions. In [8], a two-tier architecture was proposed emplo ying lo-cation preprocessors to inde x motion-sensiti ve bounding box es of objects to efficiently predict and answer continual queries.
Peer -to-peer DHT systems such as Chord [21] and CAN [18] dis-trib ute indices across the netw ork to answer match queries. DIST X  s hierarchy is similar to CAN, but our logical overlay is consistent with the physical topology . Further , adapting a decentralized P2P spatial inde x (e.g., P-tree [4]) to handle spatiotemporal queries may lead to root bottlenecks as all updates and queries pass through it.
Kung et al [12] use a publish-subscribe system to track point objects in a sensor netw ork. GLS [13] pro vides location service to mobile users and uses geographic forw arding similar to us. But, none of them build distrib uted inde x structures to support spatio-temporal range queries. Madden et al use Semantic Routing Trees (SR T) [16] to support single key range queries. Li et al proposed DIMS [15], a distrib uted hashing technique to resolv e range queries in a multi-dimensional space. DIMS uses the spatial hierarchy for hashing, whereas DIST uses it to exploit plume localization . We considered the important problem of object tracking, spatio-temporal summarization and querying in sensor netw orks. For the case of deformable objects such as chemical plumes, we presented an efficient distrib uted inde x structure which localizes in both space and time and scales with the size of the plume. For this scheme, we presented two dif ferent query algorithms. The Dir ect query algo-rithm performs optimally at small query sizes, whereas the SCA query algorithm scales well with the query sizes. So, an analytical model was designed to evaluate the expected query cost for each algorithm based on the query size, query location and the plume distrib ution. Using the model, the adapti ve scheme chooses the optimal algorithm on a per -query basis. Our experimental results sho wed that DIST performs 2 -3 times better than existing tech-niques in update, querying and storage costs for dif ferent netw ork, plume, and query sizes, and scales well with the number of plumes.
