 Document level sentiment classification is a fun-damental task in sentiment analysis, and is cru-cial to understand user generated content in so-cial networks or product reviews (Manning and Sch  X  utze, 1999; Jurafsky and Martin, 2000; Pang and Lee, 2008; Liu, 2012). The task calls for iden-tifying the overall sentiment polarity (e.g. thumbs up or thumbs down , 1-5 stars on review sites) of a document. In literature, dominant approaches fol-low (Pang et al., 2002) and exploit machine learn-ing algorithm to build sentiment classifier. Many of them focus on designing hand-crafted features (Qu et al., 2010; Paltoglou and Thelwall, 2010) or learning discriminate features from data, since the performance of a machine learner is heavily de-pendent on the choice of data representation (Ben-gio et al., 2015).

Document level sentiment classification re-mains a significant challenge: how to encode the intrinsic (semantic or syntactic) relations between sentences in the semantic meaning of documen-t. This is crucial for sentiment classification be-cause relations like  X  X ontrast X  and  X  X ause X  have great influences on determining the meaning and the overall polarity of a document. However, ex-isting studies typically fail to effectively capture such information. For example, Pang et al. (2002) and Wang and Manning (2012) represent docu-ments with bag-of-ngrams features and build SVM classifier upon that. Although such feature-driven SVM is an extremely strong performer and hardly to be transcended, its  X  X parse X  and  X  X iscrete X  char-acteristics make it clumsy in taking into account of side information like relations between sentences. Recently, Le and Mikolov (2014) exploit neural networks to learn continuous document represen-tation from data. Essentially, they use local ngram information and do not capture semantic relations between sentences. Furthermore, a person asked to do this task will naturally carry it out in a se-quential, bottom-up fashion, analyze the meanings of sentences before considering semantic relation-s between them. This motivates us to develop an end-to-end and bottom-up algorithm to effectively model document representation.

In this paper, we introduce a neural network ap-proach to learn continuous document representa-tion for sentiment classification. The method is on the basis of the principle of compositionality (Frege, 1892), which states that the meaning of a longer expression (e.g. a sentence or a docu-word in the n -th sentence, l n is sentence length. ment) depends on the meanings of its constituents. Specifically, the approach models document rep-resentation in two steps. In the first step, it us-es convolutional neural network (CNN) or long short-term memory (LSTM) to produce sentence representations from word representations. After-wards, gated recurrent neural network is exploit-ed to adaptively encode semantics of sentences and their inherent relations in document represen-tations. These representations are naturally used as features to classify the sentiment label of each document. The entire model is trained end-to-end with stochastic gradient descent, where the loss function is the cross-entropy error of supervised
We conduct document level sentiment classi-fication on four large-scale review datasets from pare to neural network models such as paragraph vector (Le and Mikolov, 2014), convolutional neu-ral network, and baselines such as feature-based SVM (Pang et al., 2002), recommendation algo-rithm JMARS (Diao et al., 2014). Experimental results show that: (1) the proposed neural model shows superior performances over all baseline al-gorithms; (2) gated recurrent neural network dra-matically outperforms standard recurrent neural network in document modeling. The main con-tributions of this work are as follows:  X  We present a neural network approach to en-code relations between sentences in document rep-resentation for sentiment classification.  X  We report empirical results on four large-scale datasets, and show that the approach outperforms state-of-the-art methods for document level senti-ment classification.  X  We report empirical results that traditional re-current neural network is weak in modeling docu-ment composition, while adding neural gates dra-matically improves the classification performance. We introduce the proposed neural model in this section, which computes continuous vector repre-sentations for documents of variable length. These representations are further used as features to clas-sify the sentiment label of each document. An overview of the approach is displayed in Figure 1.
Our approach models document semantics based on the principle of compositionality (Frege, 1892), which states that the meaning of a longer expression (e.g. a sentence or a document) comes from the meanings of its constituents and the rules used to combine them. Since a document consist-s of a list of sentences and each sentence is made up of a list of words, the approach models docu-ment representation in two stages. It first produces continuous sentence vectors from word represen-tations with sentence composition (Section 2.1). Afterwards, sentence vectors are treated as inputs of document composition to get document repre-sentation (Section 2.2). Document representations are then used as features for document level senti-ment classification (Section 2.3). 2.1 Sentence Composition We first describe word vector representation, be-fore presenting a convolutional neural network with multiple filters for sentence composition.
Each word is represented as a low dimension-al, continuous and real-valued vector, also known as word embedding (Bengio et al., 2003). Al-l the word vectors are stacked in a word embed-sion of word vector and | V | is vocabulary size. These word vectors can be randomly initialized from a uniform distribution (Socher et al., 2013b), or be pre-trained from text corpus with embedding learning algorithms (Mikolov et al., 2013; Pen-nington et al., 2014; Tang et al., 2014). We adopt the latter strategy to make better use of semantic and grammatical associations of words.

We use convolutional neural network (CNN) and long short-term memory (LSTM) to compute continuous representations of sentences with se-mantic composition. CNN and LSTM are state-of-the-art semantic composition models for senti-ment classification (Kim, 2014; Kalchbrenner et al., 2014; Johnson and Zhang, 2015; Li et al., 2015a). They learn fixed-length vectors for sen-tences of varying length, captures words order in a sentence and does not depend on external de-pendency or constituency parse results. One could also use tree-based composition method such as Recursive Neural Tensor Network (Socher et al., 2013b) or Tree-Structured LSTM (Tai et al., 2015; Zhu et al., 2015) as alternatives.

Specifically, we try CNN with multiple con-volutional filters of different widths (Tang et al., 2015) to produce sentence representation. Fig-ure 2 displays the method. We use multiple con-volutional filters in order to capture local seman-tics of n -grams of various granularities, which have been proven effective for sentiment classifi-cation. For example, a convolutional filter with a width of 2 essentially captures the semantics of bi-grams in a sentence. In this work, we use three convolutional filters whose widths are 1, 2 and 3 to encode the semantics of unigrams, bigram-Figure 2: Sentence composition with convolution-al neural network. s and trigrams in a sentence. Each filter consists of a list of linear layers with shared parameter-s. Formally, let us denote a sentence consisting of n words as { w 1 ,w 2 ,...w i ,...w n } , let l c be the width of a convolutional filter, and let W c , b c be the shared parameters of linear layers in the fil-ter. Each word w i is mapped to its embedding representation e i  X  R d . The input of a linear lay-er is the concatenation of word embeddings in a fixed-length window size l c , which is denoted as I a linear layer is calculated as length of linear layer. To capture global semantics of a sentence, we feed the outputs of linear layers to an average pooling layer, resulting in an output vector with fixed-length. We further add hyperbol-ic tangent ( tanh ) to incorporate pointwise nonlin-earity, and average the outputs of multiple filters to get sentence representation.

We also try lstm as the sentence level semantic calculator, the performance comparison between these two variations is given in Section 3. 2.2 Document Composition with Gated The obtained sentence vectors are fed to a docu-ment composition component to calculate the doc-ument representation. We present a gated recur-rent neural network approach for document com-position in this part.

Given the vectors of sentences of variable length as input, document composition produces a fixed-length document vector as output. To this end, a simple strategy is ignoring the order of sen-tional unit of gated recurrent neural network. tences and averaging sentence vectors as docu-ment vector. Despite its computational efficiency, it fails to capture complex linguistic relations (e.g.  X  X ause X  and  X  X ontrast X ) between sentences. Con-volutional neural network (Denil et al., 2014) is an alternative for document composition, which mod-els local sentence relations with shared parameters of linear layers.

Standard recurrent neural network (RNN) can map vectors of sentences of variable length to a fixed-length vector by recursively transforming current sentence vector s t with the output vector of the previous step h t  X  1 . The transition function is typically a linear layer followed by pointwise non-linearity layer such as tanh . dimensions of hidden vector and sentence vector, respectively. Unfortunately, standard RNN suffer-s the problem of gradient vanishing or exploding (Bengio et al., 1994; Hochreiter and Schmidhu-ber, 1997), where gradients may grow or decay exponentially over long sequences. This makes it difficult to model long-distance correlations in a sequence. To address this problem, we devel-op a gated recurrent neural network for documen-t composition, which works in a sequential way and adaptively encodes sentence semantics in doc-ument representations. The approach is analo-gous to the recently emerged LSTM (Graves et al., 2013; Zaremba and Sutskever, 2014; Sutskev-er et al., 2014; Xu et al., 2015) and gated neural network (Cho et al., 2014; Chung et al., 2015). Specifically, the transition function of the gated RNN used in this work is calculated as follows. where stands for element-wise multiplication, W i , W f , b i , b f adaptively select and remove histo-ry vector and input vector for semantic composi-tion. The model can be viewed as a LSTM whose output gate is alway on, since we prefer not to dis-carding any part of the semantics of sentences to get a better document representation. Figure 3 (a) displays a standard sequential way where the last hidden vector is regarded as the document rep-resentation for sentiment classification. We can make further extensions such as averaging hidden vectors as document representation, which takes considerations of a hierarchy of historical seman-tics with different granularities. The method is il-lustrated in Figure 3 (b), which shares some char-acteristics with (Zhao et al., 2015). We can go one step further to use preceding histories and fol-lowing evidences in the same way, and exploit bi-directional (Graves et al., 2013) gated RNN as the calculator. The model is embedded in Figure 1. 2.3 Sentiment Classification The composed document representations can be naturally regarded as features of documents for sentiment classification without feature engineer-ing. Specifically, we first add a linear layer to transform document vector to real-valued vector whose length is class number C . Afterwards, we add a softmax layer to convert real values to con-ditional probabilities, which is calculated as fol-lows.

We conduct experiments in a supervised learn-ing setting, where each document in the training data is accompanied with its gold sentiment label. Corpus #docs #s/d #w/d | V | #class Class Distribution Yelp 2013 335,018 8.90 151.6 211,245 5 .09/.09/.14/.33/.36 Yelp 2014 1,125,457 9.22 156.9 476,191 5 .10/.09/.15/.30/.36 Yelp 2015 1,569,264 8.97 151.9 612,636 5 .10/.09/.14/.30/.37 For model training, we use the cross-entropy er-ror between gold sentiment distribution P g ( d ) and predicted sentiment distribution P ( d ) as the loss function. where T is the training data, C is the number of classes, d represents a document. P g ( d ) has a 1-of-K coding scheme, which has the same dimension as the number of classes, and only the dimension corresponding to the ground truth is 1, with all others being 0. We take the deriva-tive of loss function through back-propagation with respect to the whole set of parameters  X  = and update parameters with stochastic gradient descent. We set the widths of three convolutional filters as 1, 2 and 3, output length of convolutional filter as 50. We learn 200-dimensional word em-beddings with SkipGram (Mikolov et al., 2013) on each dataset separately, randomly initialize other parameters from a uniform distribution U (  X  0 . 01 , 0 . 01) , and set learning rate as 0.03. We conduct experiments to empirically evaluate our method by applying it to document level senti-ment classification. We describe experimental set-tings and report empirical results in this section. 3.1 Experimental Setting We conduct experiments on large-scale datasets consisting of document reviews. Specifically, we use one movie review dataset from IMDB (Diao et al., 2014) and three restaurant review dataset-s from Yelp Dataset Challenge in 2013, 2014 and 2015. Human labeled review ratings are regarded as gold standard sentiment labels, so that we do not need to manually annotate sentiment labels of documents. We do not consider the cases that rat-ing does not match with review texts (Zhang et al., 2014).

Statistical information of these datasets are giv-en in Table 1. We use the same dataset split as in (Diao et al., 2014) on IMDB dataset, and split Yelp datasets into training, development and test-ing sets with 80/10/10. We run tokenization and sentence splitting with Stanford CoreNLP (Man-ning et al., 2014) on all these datasets. We use accuracy (Manning and Sch  X  utze, 1999; Jurafsky and Martin, 2000) and MSE (Diao et al., 2014) as evaluation metrics, where accuracy is a stan-dard metric to measure the overall sentiment clas-sification performance. We use MSE to measure the divergences between predicted sentiment la-bels and ground truth sentiment labels because re-view labels reflect sentiment strengths (e.g. one star means strong negative and five star means strong positive).
 3.2 Baseline Methods We compare our methods (Conv-GRNN and LSTM-GRNN) with the following baseline meth-ods for document level sentiment classification. (1) Majority is a heuristic baseline, which as-signs the majority sentiment label in training set to each document in test set. (2) In SVM+Ngrams , we use bag-of-unigrams and bag-of-bigrams as features and train SVM (3) In TextFeatures , we implement sophisticated features (Kiritchenko et al., 2014) including word ngrams, character ngrams, sentiment lexicon fea-tures, cluster features, et al. Majority 0.356 3.06 0.361 3.28 0.369 3.30 0.179 17.46 SVM + Unigrams 0.589 0.79 0.600 0.78 0.611 0.75 0.399 4.23 SVM + Bigrams 0.576 0.75 0.616 0.65 0.624 0.63 0.409 3.74 SVM + TextFeatures 0.598 0.68 0.618 0.63 0.624 0.60 0.405 3.56 SVM + AverageSG 0.543 1.11 0.557 1.08 0.568 1.04 0.319 5.57 SVM + SSWE 0.535 1.12 0.543 1.13 0.554 1.11 0.262 9.16 JMARS N/A  X  N/A  X  N/A  X  N/A 4.97 Paragraph Vector 0.577 0.86 0.592 0.70 0.605 0.61 0.341 4.69 Convolutional NN 0.597 0.76 0.610 0.68 0.615 0.68 0.376 3.30 Conv-GRNN 0.637 0.56 0.655 0.51 0.660 0.50 0.425 2.71 LSTM-GRNN 0.651 0.50 0.671 0.48 0.676 0.49 0.453 3.00 (4) In AverageSG , we learn 200-dimensional word vectors with word2vec 6 (Mikolov et al., 2013), average word embeddings to get document representation, and train a SVM classifier. (5) We learn sentiment-specific word embed-dings (SSWE), and use max/min/average pooling (Tang et al., 2014) to get document representation. (6) We compare with a state-of-the-art recom-mendation algorithm JMARS (Diao et al., 2014), which utilizes user and aspects of a review with collaborative filtering and topic modeling. (7) We implement a convolutional neural net-work (CNN) baseline as it is a state-of-the-art se-mantic composition method for sentiment analysis (Kim, 2014; Denil et al., 2014). (8) We implement a state-of-the-art neural net-work baseline Paragraph Vector (Le and Mikolov, 2014) because its codes are not officially provided. Window size is tuned on the development set. 3.3 Comparison to Other Methods Experimental results are given in Table 2. We e-valuate each dataset with two metrics, namely ac-curacy (higher is better) and MSE (lower is better). The best method in each dataset and each evalua-tion metric is in bold.

From Table 2, we can see that majority is the worst method because it does not capture any tex-tual semantics. SVM classifiers with unigram and bigram features (Pang et al., 2002) are extremely strong, which are almost the strongest performers among all baseline methods. Designing complex features are also effective for document level sen-timent classification, however, it does not surpass the bag-of-ngram features significantly as on Twit-ter corpora (Kiritchenko et al., 2014). Further-more, the aforementioned bag-of-features are dis-crete and sparse. For example, the feature dimen-sion of bigrams and TextFeatures on Yelp 2015 dataset are 899K and 4.81M after we filter out low frequent features. Based on them, we try to con-catenate several discourse-driven features, but the classification performances remain unchanged.
AverageSG is a straight forward way to com-pose document representation without feature en-gineering. Unfortunately, we can see that it does not work in this scenario, which appeals for pow-erful semantic composition models for documen-t level sentiment classification. We try to make better use of the sentiment information to learn a better SSWE (Tang et al., 2014), e.g. setting a large window size. However, its performance is still worse than context-based word embedding. This stems from the fact that there are many sen-timent shifters (e.g. negation or contrast words) in document level reviews, while Tang et al. (2014) learn SSWE by assigning sentiment label of a tex-t to each phrase it contains. How to learn SSWE effectively with document level sentiment super-vision remains as an interesting future work.
Since JMARS outputs real-valued outputs, we only evaluate it in terms of MSE . We can see that sophisticated baseline methods such as JMARS, paragraph vector and convolutional NN obtain sig-nificant performance boosts over AverageSG by Average 0.598 0.65 0.605 0.75 0.614 0.67 0.366 3.91 Recurrent 0.377 1.37 0.306 1.75 0.383 1.67 0.176 12.29 Recurrent Avg 0.582 0.69 0.591 0.70 0.597 0.74 0.344 3.71 Bi Recurrent Avg 0.587 0.73 0.597 0.73 0.577 0.82 0.372 3.32 GatedNN 0.636 0.58 0.656 0.52 0.651 0.51 0.430 2.95 GatedNN Avg 0.635 0.57 0.659 0.52 0.657 0.56 0.416 2.78 Bi GatedNN Avg 0.637 0.56 0.655 0.51 0.660 0.50 0.425 2.71 capturing deeper semantics of texts. Comparing between CNN and AverageSG, we can conclude that deep semantic compositionality is crucial for understanding the semantics and the sentiment of documents. However, it is somewhat disappoint-ing that these models do not significantly outper-form discrete bag-of-ngrams and bag-of-features. The reason might lie in that semantic meanings of documents, e.g. relations between sentences, are not well captured. We can see that the proposed method Conv-GRNN and LSTM-GRNN yield the best performance on all four datasets in two evalu-ation metrics. Compared with CNN, Conv-GRNN shows its superior power in document composi-tion component, which encodes semantics of sen-tences and their relations in document representa-tion with gated recurrent neural network. We al-so find that LSTM (almost) consistently performs better than CNN in modeling the sentence repre-sentation. 3.4 Model Analysis As discussed before, document composition con-tributes a lot to the superior performance of Conv-GRNN and LSTM-GRNN. Therefore, we take Conv-GRNN as an example and compare differen-t neural models for document composition in this part. Specifically, after obtaining sentence vectors with convolutional neural network as described in Section 2.1, we carry out experiments in following settings. (1) Average . Sentence vectors are averaged to get the document vector. (2) Recurrent / GatedNN . Sentence vectors are fed to standard (or gated) recurrent neural network in a sequential way from the beginning of the input document. The last hidden vector is regarded as document representation. (3) Recurrent Avg / GatedNN Avg . We extend setting (2) by averaging hidden vectors of recur-rent neural network as document vector. (4) Bi Recurrent Avg / Bi GatedNN Avg . We ex-tend setting (3) by calculating hidden vectors from both preceding histories and following contexts. Bi-directional hidden vectors are averaged as doc-ument representation.

Table 3 shows the experimental results. We can see that standard recurrent neural network (RN-N) is the worst method, even worse than the sim-ple vector average. This is because RNN suf-fers from the vanishing gradient problem, stating that the influence of a given input on the hidden layer decays exponentially over time on the net-work output. In this paper, it means that doc-ument representation encodes rare semantics of the beginning sentences. This is further justified by the great improvement of Recurrent Avg over Recurrent . Bi Recurrent Avg and Recurrent Avg perform comparably, but disappointingly both of them fail to transcend Average . After adding neu-ral gates, GatedNN obtains dramatic accuracy im-provements over Recurrent and significantly out-performs previous settings. The results indicate that Gated RNN is capable of handling the van-ishing gradient problem to some extend, and it is practical to adaptively model sentence semantics in document representation. GatedNN Avg and Bi GatedNN Avg obtains comparable performances with GatedNN . Document level sentiment classification is a fun-damental problem in sentiment analysis (Pang and Lee, 2008; Liu, 2012), which aims at identifying the sentiment label of a document (Pang et al., 2002; Turney, 2002). Pang and Lee (2002; 2005) cast this problem as a classification task, and use machine learning method in a supervised learning framework. Turney (2002) introduces an unsuper-vised approach by using sentiment words/phrases extracted from syntactic patterns to determine the document polarity. Goldberg and Zhu (2006) place this task in a semi-supervised setting, and use unlabelled reviews with graph-based method. Dominant studies in literature follow Pang et al. (2002) and work on designing effective features for building a powerful sentiment classifier. Rep-resentative features include word ngrams (Wang and Manning, 2012), text topic (Ganu et al., 2009), bag-of-opinions (Qu et al., 2010), syntactic rela-tions (Xia and Zong, 2010), sentiment lexicon fea-tures (Kiritchenko et al., 2014).

Despite the effectiveness of feature engineering, it is labor intensive and unable to extract and or-ganize the discriminative information from data (Bengio et al., 2015). Recently, neural network e-merges as an effective way to learn continuous text representation for sentiment classification. Exist-ing studies in this direction can be divided into two groups. One line of research focuses on learning continuous word embedding. Traditional embed-ding learning algorithms typically leverage con-texts of words in a context-prediction way (Ben-gio et al., 2003; Mikolov et al., 2013; Baroni et al., 2014). Since these methods typically map word-s with similar contexts but opposite polarity (e.g.  X  X ood X  and  X  X ad X ) to neighboring vectors, sever-al studies (Maas et al., 2011; Labutov and Lipson, 2013; Tang et al., 2014) learn sentiment-specific word embeddings by taking sentiment of texts in-to account. Another line of research concentrates on semantic composition (Mitchell and Lapata, 2010). Yessenalina and Cardie (2011) represent each word as a matrix and use iterated matrix mul-tiplication as phrase-level composition function. Socher et al. (2013b) introduce a family of recur-sive neural networks for sentence-level semantic composition. Recursive neural network is extend-ed with global feedbackward (Paulus et al., 2014), feature weight tuning (Li, 2014), deep recursive layer (Irsoy and Cardie, 2014), adaptive composi-tion functions (Dong et al., 2014), combined with Combinatory Categorial Grammar (Hermann and Blunsom, 2013), and used for opinion relation de-tection (Xu et al., 2014). Glorot et al. (2011) use s-tacked denoising autoencoder. Convolutional neu-ral networks are widely used for semantic compo-sition (Kim, 2014; Kalchbrenner et al., 2014; De-nil et al., 2014; Johnson and Zhang, 2015) by auto-matically capturing local and global semantics. Le and Mikolov (2014) introduce Paragraph Vector to learn document representation from semantics of words. Sequential model like recurrent neural net-work or long short-term memory (LSTM) are also verified as strong approaches for semantic compo-sition (Li et al., 2015a).

In this work, we represent document with convolutional-gated recurrent neural network, which adaptively encodes semantics of sentences and their relations. A recent work in (Li et al., 2015b) also investigate LSTM to model document meaning. They verify the effectiveness of LSTM in text generation task. We introduce neural network models (Conv-GRNN and LSTM-GRNN) for document level sentiment classification. The approach encodes semantics of sentences and their relations in doc-ument representation, and is effectively trained end-to-end with supervised sentiment classifica-tion objectives. We conduct extensive experiments on four review datasets with two evaluation met-rics. Empirical results show that our approaches achieve state-of-the-art performances on all these datasets. We also find that (1) traditional recurren-t neural network is extremely weak in modeling document composition, while adding neural gates dramatically boosts the performance, (2) LSTM performs better than a multi-filtered CNN in mod-eling sentence representation.

We briefly discuss some future plans. How to effectively compose sentence meanings to docu-ment meaning is a central problem in natural lan-guage processing. In this work, we develop neu-ral models in a sequential way, and encode sen-tence semantics and their relations automatically without using external discourse analysis result-s. From one perspective, one could carefully de-fine a set of sentiment-sensitive discourse relation-s (Zhou et al., 2011), such as  X  X ontrast X ,  X  X ondi-tion X ,  X  X ause X , etc. Afterwards, relation-specific gated RNN can be developed to explicitly mod-el semantic composition rules for each relation (Socher et al., 2013a). However, defining such a relation scheme is linguistic driven and time con-suming, which we leave as future work. From an-other perspective, one could compose document representation over discourse tree structures rather than in a sequential way. Accordingly, Recursive Neural Network (Socher et al., 2013b) and Struc-tured LSTM (Tai et al., 2015; Zhu et al., 2015) can be used as composition algorithms. Howev-er, existing discourse structure learning algorithm-s are difficult to scale to massive review texts on the web. How to simultaneously learn document structure and composition function is an interest-ing future work.
 The authors give great thanks to Yaming Sun and Jiwei Li for the fruitful discussions. We also would like to thank three anonymous reviewer-s for their valuable comments and suggestions. This work was supported by the National High Technology Development 863 Program of Chi-na (No. 2015AA015407), National Natural Sci-ence Foundation of China (No. 61133012 and No. 61273321). Duyu Tang is supported by Baidu Fel-lowship and IBM Ph.D. Fellowship.

