 Advances in networking technology and computational infrastructure make it possible to construct large-scale high-performance distributed computing environments, or problems in a grid environment such as resource specification, information service, resource allocation and security issue, etc. However, A crucial issue for the efficient deployment of distributed applications on the grid is that of scheduling [2]. 
In this paper, we focus on the online scheduling issue in the grid context, and pre-sent a modified cost-based scheduling algor ithm for grid computing with experiments, We borrow ideas from the economics concep t for converting the total usage of het-erogeneous resources into a homogeneous cost, although there are many methods for determining the price of resources in the grid [4]. For testing scheduling algorithms in grid environments, we build the simulator based on SimGrid Toolkit [5]. mous administrative domains, which usually are in the range of Local Area Network ronment and assigns users X  jobs to geographically distributed resource domains, and the metascheduler is connected to resource domains by Wide Area Network (WAN). One data repository is available at the metascheduler and input data needed by users X  jobs are stored in the data repository in advance. geographically distributed. Resource domain rd i and the metascheduler are connected with bandwidth r b ( rd i ). Compared to communication overhead of transferring job ap-plications and input data from the metascheduler to resource domains in WAN, com-each resource domain has n computational hosts. All other resources associated with the host will be abstracted out, although the framework can be extended to handle ad-ditional resources such as memory. 
The unrelated machines model [6] is chosen for studying the scheduling algorithm, because there are many different factors that will influence the effective load of hosts added by a given job is known, but the load doesn X  X  need to have any relationship to the load the job would add to other hosts. 
In this paper, jobs arrive online and each job has to be immediately assigned to one and we define each job jb k by following parameters: 
The number of CPU cycles required by the job, n c ( jb k ). size of input data needed by job jb k for that usually the size of a job application can be ignored compared to the size of input data required by the job. knowledge of jobs arriving in the future. After assigned to a host in the computational grid immediately when it arrives, a job will not be reassigned to other hosts later. The input data required by a job should be transferred to the corresponding assigned host before the execution of the job. 
We adopt a classic performance metric: makespan, which is the length of the schedule, or equivalently the time when the first job starts running subtracted from the time when the last job is completed. The scheduling goal is to minimize the makespan of a given job sequence. In this paper, we just borrow ideas from the economics concept for converting the to-tal usage of different kinds of resources, such as CPU and bandwidth, into a homoge-neous cost. The cost of a resource is an exponential function of the load assigned on the resource since the first job arrives in the sequence of jobs. signed in host rd ij after job jb k has been assigned on the computational grid. Then they satisfy the following relation: 
The load on a given resource equals its usage divided by its capacity. After job jb k tascheduler is defined by: 
After job jb k was assigned in the grid system, the CPU load of host rd ij in resource domain rd i is defined by: 
In our early theoretical work [3], we assumed that for a given sequence of jobs the maximum load produced by the optimal offline algorithm is known in advance. In practice, usually for a given sequence of jobs the maximum load produced by the op-timal offline algorithm is not known. The doubling approach can be adopted to ap-proximate the maximum load produced by the optimal offline algorithm. Therefore, a positive parameter  X  is introduced, and utilized to normalize  X  = / x x for load x , and the value of  X  is determined in the presented algorithm. of CPU Cost c ( i , j , k ), and they are defined by: where,  X  ,  X  are a constant, and  X  &gt;1,  X  &gt;1. 
The modified cost-based online scheduling algorithm assigns a job on the host where its resource consumption has the mini mum marginal cost according to equation (6). The algorithm is presented as Fig.2. Theorem 1. The modified cost-based online scheduling algorithm is O (log( n +1) m )-competitive in the computational grid environment illustrated as Fig.1. Proof. It can be proved in the similar way as in paper [3]. 
To run the experiments, we developed a simulator based on the SimGrid toolkit experimental result is the average of values produced by 500 runs of simulation. 
For testing the performance of the modified cost-based online algorithm, we will compare this presented algorithm with the existing greedy algorithm, and analyze some parameters X  influence on its performance with experiments. 
Greedy algorithm is an effective online scheduling algorithm. In this paper, greedy algorithm can be correspondingly considered as follows: for each arrival job, the me-tascheduler immediately assigns the job to the host with the minimum sum of the cur-the resource domain it located in. 
In Fig.3 (a), the size of input data is 6M. As the average interval of job arrivals correspondingly. 
Fig.3 (a) shows that the modified cost-base algorithm can attain less makespan obtain better performance than the greedy algorithm. This result can be explained from two aspects. Firstly, the greedy algorithm determines the candidate host just ac-cording to the current load, and does not co nsider the CPU speed of the host and the modified cost-based algorithm which has ta ken these factors into account. Secondly, resource load, which also benefits to determine the optimal candidate host. The merit resource load created by the new job but also the current resource load have influence on the marginal cost of the new job. 
In Fig. 3(b), the average interval of job arrivals is 6 seconds. We compare the two algorithms with the size of input data varying, and makespans of the two algorithms makespan of the modified cost-based algo rithm is less than the makespan of the considers more effective factors for performance estimation and exponential function benefits to determine the optimal candidate host. ment the algorithm and test the performance of the algorithm in the simulation envi-good performance in practice. So we conclude that the modified cost-based online scheduling algorithm is an effective algorithm for online scheduling in the computa-tional grid environment with theoretical guarantee. (No.2004AA104340 and No.2004AA104280), the National Natural Science Founda-tion of China (No. 60173031 and No. 60473092), ChinaGrid Program of MOE of China, and the grand project (No.03dz15027) of the Science and Technology Com-mission of Shanghai Municipality. 
