 Influence maximization, fundamental for word-of-mouth marketing and viral marketing, aims to find a set of seed nodes maximizing influence spread on social network. Early methods mainly fall into two paradigms with certain benefits and drawbacks: (1) Greedy algorithms, selecting seed nodes one by one, give a guaranteed accuracy relying on the accurate approximation of influence spread with high computational cost; (2) Heuristic algorithms, estimating influence spread using efficient heuristics, have low compu-tational cost but unstable accuracy.

We first point out that greedy algorithms are essential-ly finding a self-consistent ranking, where nodes X  ranks are consistent with their ranking-based marginal influence spread. This insight motivates us to develop an iterative ranking framework, i.e., IMRank, to efficiently solve in-fluence maximization problem under independent cascade model. Starting from an initial ranking, e.g., one obtained from efficient heuristic algorithm, IMRank finds a self-consistent ranking by reordering nodes iteratively in terms of their ranking-based marginal influence spread computed according to current ranking. We also prove that IMRank definitely converges to a self-consistent ranking starting from any initial ranking. Furthermore, within this framework, a last-to-first allocating strategy and a generalization of this strategy are proposed to improve the efficiency of estimating ranking-based marginal influence spread for a given ranking. In this way, IMRank achieves both remarkable efficiency and high accuracy by leveraging simultaneously the benefits of greedy algorithms and heuristic algorithms. As demon-strated by extensive experiments on large scale real-world social networks, IMRank always achieves high accuracy comparable to greedy algorithms, while the computational cost is reduced dramatically, about 10  X  100 times faster than other scalable heuristics.
 F.2.2 [ Analysis of Algorithms and Problem Com-plexity ]: Non-numerical Algorithms and Problems; D.2.8 [ Software Engineering ]: Metrics X  complexity measures, performance measures Algorithms, Experiments, Performance influence maximization; social network analysis; viral mar-keting; iterative method; self-consistent ranking
The prosperity of online social networks and social media invokes a new wave of research on social influence analy-sis [18, 8]. Finding influential individuals is an important problem for many applications such as expert finding, online advertising and marketing. Influence maximization is identified as a fundamental problem for viral marketing in the area of online marketing. It aims to find a fixed-size set of seed nodes in social network to maximize their in-fluence spread , i.e., the expected number of activated nodes triggered by the seed nodes. Ever since being formalized by Kempe et al. [11], influence maximization has attracted much research attention from various fields, including social network analysis, data mining and marketing.

Early methods for influence maximization mainly use greedy framework, iteratively selecting the node with the largest marginal influence spread as seed node. with an accurate estimation of influence spread,the greedy frame-work provides a (1  X  1 /e ) approximation to the optimal solution of influence maximization [11], guaranteed by the submodularity and monotonicity properties of influence spread as a function of seed node set. According to the ways of estimating the influence spread, these methods roughly fall into two paradigms: greedy algorithms [11, 13, 4, 7, 5] and heuristic algorithms [12, 3, 20, 10]. Greedy algorithms provide a (1  X  1 /e  X   X  ) approximation by approximating influence spread through Monte Carlo simulation. However, they have high computation cost, for the calculation of marginal influence spread invokes estimating the influence spread of nodes from scratch, using time-consuming Monte Carlo simulation. The latter, in contrast, resorts to estimate the influence spread via efficient heuristic methods. The scalability of these heuristics generally outperforms the greedy algorithms by several orders of magnitude. Yet, their high scalability is gained with the pain of unguaranteed ac-curacy and unreliable performance on various scenarios. To the best of our knowledge, we lack an efficient and accurate algorithm of influence maximization for applications to large scale social networks in real world.
In thi s paper, we propose an efficient and accurate algorithm to solve influence maximization problem under the widely-adopted independent cascade model [11]. This algorithm is motivated by the key insight that greedy algorithms are essentially finding a self-consistent rank-ing, where nodes X  ranks are consistent with their ranking-based marginal influence spread. We prove that such self-consistent ranking can be obtained directly using an iterative ranking framework, i.e., IMRank, proposed in this paper. Starting from an initial ranking, e.g., one obtained from efficient heuristic algorithm, IMRank efficiently finds a self-consistent ranking by reordering nodes iteratively in terms of their ranking-based marginal influence spread computed according to current ranking. Different from greedy algorithms computing marginal influence spread from scratch, IMRank conducts the computation of ranking-based marginal influence spread via an efficient last-to-first allocating strategy. As a result, IMRank achieves both high efficiency and high accuracy by leveraging simultaneously the benefits of greedy algorithms and heuristic algorithms.
To evaluate the performance of IMRank, we conduct extensive experiments on large-scale social networks with hundreds of thousands of edges to millions of edges. Ex-perimental results demonstrate that IMRank achieves high accuracy comparable to greedy algorithms with computa-tional cost reduced dramatically.

Our main contributions are summarized as follows: Influence maximization problem was first studied by Domingos and Richardson from algorithmic perspective [6, 16]. Kempe et al. then formulated it as a combinatorial optimization problem of finding a set of seed nodes with maximum influence spread [11]. They proved that this problem is NP-hard and proposed a greedy algorithm which can guarantee a (1  X  1 /e  X   X  ) approximation ratio. Here,  X  is caused by the inaccurate estimation of influence spread. The biggest problem suffered by Kempe X  X  greedy algorithm is its low scalability, limiting it to social networks with small or moderate size.

Many efforts have been made to improve the scalability of Kempe X  X  greedy algorithm for influence maximization.  X  X ost-effective lazy forward X  (CELF) optimization strat-egy [13] and CELF++ [7] are proposed to reduce the times of influence spread estimation in Kempe X  X  greedy algorithm by exploiting the submodularity property of influence spread function. To reduce the number of Monte Carlo simulations, Chen et al. [4] proposed NewGreedy algorithm and MixedGreedy algorithm. The NewGreedy algorithm reusing the results of Monte Carlo simulations in the same iteration to calculate marginal influence spread for all candidate nodes. Yet, it increases the computational cost for a single Monte Carlo simulation because the simulation is now conducted globally rather than locally as done in Kempe X  X  greedy algorithm. As a remedy, the MixedGreedy algorithm was developed, integrating the CELF strategy into the NewGreedy algorithm. Recently, Sheldon et al. [17] proposed a sample average approximation approach from stochastic optimization for maximizing the spread of cascades under budget restriction. Cheng et al. [5] proposed a StaticGreedy algorithm, remarkably reducing the number of Monte-Carlo simulations through strictly guaranteeing the submodularity and monotonicity properties of influence spread function. The above two works further improve the scalability of greedy algorithm effectively. These improve-ments can speedup the original greedy algorithm in several orders of magnitude, however, scalability is still a challenge for greedy algorithms.

Heuristic algorithms, in contrast, mainly reduce the com-plexity of Kempe X  X  greedy algorithm through computing influence spread heuristically. DegreeDiscount, designed for uniform independent cascade model, only computes direct influence [4]. Community-based greedy algorithm conducted Monte Carlo simulation within each community rather than on the whole network [20]. SPM/SP1M algorithms [12] estimated influence spread according to shortest paths, while PMIA algorithm [3] [19] used maximum influence paths. SP1N algorithm employed the concept of Shapley value from the cooperative game theory [15]. IRIE algorithm [10] efficiently estimated marginal influence spread through an iterative method. Besides the above heuristics using greedy approach, Jiang et al. proposed a simulated annealing approach with several heuristics [9], and Mathioudakis et al. suggested to speed up influence maximization using a simpli-fied influence network [14]. However, these heuristics cannot give rise to guaranteed accuracy and their performance is unstable on different networks and diffusion models.
Taken together, in existing algorithms for influence maxi-mization, the estimation of influence spread and the ranking of nodes are studied separately. On one hand, without leveraging the ranking of nodes, greedy algorithms estimate the influence spread of nodes from scratch, causing high computational cost. On the other hand, lacking a reliable estimation of influence spread, heuristic algorithms have no guaranteed accuracy. Hence, in this paper, we improve the state-of-the-art solution of influence maximization prob-lem by exploiting the interplay between marginal influence spread and the ranking of nodes.
For influence maximization on a social network G = ( V, E ), influence spread function I ( S ) of a node set S is defined as the expected number of nodes in G eventually activated by S under certain diffusion model. The function I (  X  ) is nonnegative, monotone, and submodular, satisfying S = { v 1 , v 2 , . . . , v n } a set of nodes p ( v i |{ v 1 , v 2 , . . . , v i  X  1 } ) prob ability that v through any influence path, with respect to a given ranking r These properties guarantee that a fair approximation to the optimal solution of influence maximization can be obtained by greedy algorithms, iteratively selecting the node with maximum marginal influence spread as seed node.

Definition 1. Marginal in uence spread: Given a node set S  X  V and a node v  X  V , the marginal influence spread of v upon S is defined as M ( v | S ) = I ( S  X  X  v
However, the influence spread function is not extensive, activated by S may overlap with the nodes activated by v . Therefore, one has to compute the marginal influence spread by computing both I ( S ) and I ( S  X  X  v } ) from scratch, resulting in huge computation cost. To remedy this problem, we further analyze the property of the set of seed nodes obtained by greedy algorithms. Indeed, greedy algorithms implicitly give a ranking of nodes, where nodes are ranked in decreasing order of their marginal influence spread. Meanwhile, their marginal influence spread are computed based on their ranks in the implicit ranking. Hence, greedy algorithms obtain a self-consistent ranking of nodes.
Before formally defining self-consistent ranking, we first introduce several related notations for clarity. Without loss of generality, we index all the nodes into { v 1 , v 2 ,  X  X  X  where n = | V | . A ranking of nodes, determined by a permutation ( r 1 , r 2 ,  X  X  X  , r n ) with r i  X  { 1 , 2 , noting the index of node with rank i , is denoted as nience, we now define the ranking-based marginal influence spread of node with respect to a ranking r as M r ( v r i lists all important notations used in this paper.
Definition 2. Self-consistent ranking: A ranking r is a self-consistent ranking iff M r ( v r i )  X  M r ( v r j j  X  n .

For the set of seed nodes obtained by greedy algorithms, there exists an interplay between the ranks of nodes and their marginal influence spread. On one hand, these nodes are ranked in descending order of their marginal influence spread. On the other hand, the marginal influence spread of nodes is calculated with respect to the ranks of nodes. Indeed, the set of seed nodes obtained by greedy algorithms forms a self-consistent ranking.

Theorem 1. Greedy algorithms for in uence maxi-mization gives a self-consistent ranking.

Proof. Greedy algorithms iteratively select the node with maximum marginal influence spread as seed node. With a ranking r denoting the order seed nodes are selected, we have M ( v r i |{ v r 1 , v r 2 ,  X  X  X  , v r i  X  1 } )  X  v ence spread function implies that M ( v r j |{ v r 1 , v r  X  plete the proof with M r ( v r i ) = M ( v r i |{ v r 1 , v
For a given social network, however, there are multiple self-consistent rankings besides the one obtained by greedy algorithms. Hence it is critical to develop effective algo-rithms to achieve a desired self-consistent ranking which is either the very ranking obtained by greedy algorithms or comparable to it from the point of influence maximization.
In this section, we develop an efficient iterative frame-work IMRank to solve the influence maximization problem through finding a desired self-consistent ranking. IMRank distinguishes itself from greedy algorithms in one key point: in each iteration, IMRank efficiently estimates the marginal influence spread of all nodes based on current ranking, while greedy algorithms compute the marginal influence spread from scratch with high computational cost.
IMRank aims to find a self-consistent ranking from any initial ranking. It achieves the goal by iteratively adjusting current ranking as follows: This iterative process is formally described in Algorithm 1. It definitely converges to a self-consistent ranking, starting from any initial ranking (see Section 4.3 for proof). In-tuitively, IMRank iteratively promotes influential nodes to top positions in the ranking, always increasing the influence spread of top-k nodes during the process until it converges to a self-consistent ranking. Indeed, different initial rankings could make IMRank converge to different self-consistent rankings. We leave the discussion about initial ranking to Section 4.4. Alg orithm 1 IMRank ( r ) 2: t  X  0 3: repeat 4: t  X  t + 1 5: Calculate M r ( t ) with respect to the ranking r 6: Generate a new ranking r ( t ) by sorting nodes in 8: output the self-consistent ranking r ( t )
The core step in IMRank is the calculation of ranking-based marginal influence spread. One straightforward way is to directly compute M r ( v r i ) = M ( v r i |{ v r 1 , v using Monte Carlo simulation, as done by greedy algorithms. However, prohibitively high computational cost makes it im-practical for IMRank. To combat this problem, we propose a Last-to-First Allocating (LFA) strategy to efficiently esti-mate M r , leveraging the intrinsic interdependence between ranking and ranking-based marginal influence spread. We develop the LFA strategy under the independent cascade model [11]. For the independent cascade model, when a node u is activated, it has one chance to independently activate its neighboring nodes with a propagation probability p ( u, v ) if v has not been activated yet. Each node can be activated for only once.

The LFA strategy is based on the following fact: by defini-tion, the ranking-based marginal influence spread M r ( v ) is equal to the expected number of nodes activated by v , given that when all nodes ranked higher than it have finished the propagation of their influence. This implies two basic rules under the calculation of M r ( v ): 1. Each node can only be activated by nodes ranked 2. When a node could be activated by multiple nodes,
Following the two basic rules, the LFA strategy is de-scribed as follows: Alg orithm 2 Calculate M r ( r ) 1: f or i = 1 to n do 2: M r ( v r i )  X  1 3: end for 4: for i = n to 2 do 5: for j = 1 to i do 6: M r ( v r j )  X  M r ( v r j ) + p ( v r j , v r i )  X  M 7: M r ( v r i )  X  8: end for 9: end for 10: output M r The calculation of the ranking-based marginal influence spread M r is completed after all nodes are scanned. The LFA strategy is formally depicted in Algorithm 2. Now we use an example to illustrate the LFA strategy. In Figure 1, v k denotes the node with rank k for convenience, and p i;j is the propagation probability along edge  X  v i Here, the ranking is simply r = { v 1 , v 2 , v 3 , v 4 , v lines represent the edges where influence could propagate, while dashed lines depict the edges where influence score is delivered when nodes are scanned. The lack of dashed line from node v 3 to node v 2 reflects that node v 2 is ranked higher than node v 3 . For this case, the LFA strategy computes the ranking-based marginal influence spread as follows: 1. Initially, M r ( v i ) = 1,1  X  i  X  5. 2. Node v 5 is then scanned as the last node in the ranking. 3. Then node v 4 is scanned. Since M r ( v 4 ) is now 1 + 4. When node v 3 is scanned. it delivers p 1 ; 3 (1 + p 3 ; 5 5. Finally, node v 2 is scanned. After v 2 is scanned, the
The above illustration tells us that the LFA strategy efficiently calculates the ranking-based marginal influence spread for all nodes, scanning each node only once. Mean-while, with indirect influence propagation being effectively captured, the LFA strategy provides a good delegate to calculate ranking-based marginal influence spread. We show the numerical results of the LFA strategy and 20,000 times Table 2: Estimation on ranking-based marginal influence spread. MC indicates Monte Carlo simulation, and LAF indicates the LAF strategy. MC 1. 29846 1.38800 0.77941 0.89406 0.64007 LAF 1.24000 1.42400 0.76800 0.92800 0.64000 Mo nte Carlo simulations in the case of setting p u;v = 0 . 2 for all edges as done in uniform independent cascade model. As shown in Table 2, our strategy offers very close results to the time-consuming Monte Carlo simulations.

Finally, we sum up the LFA strategy by explaining why it works remarkably. First, it achieves high efficiency by ex-ploiting the interdependence between ranking and ranking-based marginal influence spread, avoiding the adoption of Monte Carlo simulations done in greedy algorithms. Second, it employs the intermediate nodes as delegates, in a last-to-first manner, to capture both direct and indirect influence propagation among nodes. In this way, ranking-based marginal influence spread could be efficiently calculated via scanning all nodes only once. In addition, the LFA strategy only offers one effective approximation rather than exact calculation of influence spread. This is partly caused by the restriction that lower-ranked nodes only deliver influence score to higher-ranked neighboring nodes. In Section 5, we further improve the LFA strategy via relaxing this restriction.
In this section, we first theoretically prove the convergence of IMRank. Then we illustrate the quick convergence of IMRank empirically using a real-word network as example.
Theorem 2. Starting from any initial ranking of nodes, IMRank converges to a self-consistent ranking after a nite number of iterations.

Proof. We first prove that, for any k , the influence spread of the top-k nodes, denoted as I ( k ) for convenience, is nondecreasing in the iterative process of IMRank.
After each iteration of IMRank, a ranking r is adjusted to another ranking r  X  . Since IMRank adjusts all nodes in decreasing order of their current ranking-based influence spread M r ( v ), the values of M r ( v r  X  largest k values among all the M r ( v ). Hence, there is I  X  r are the same, otherwise I r ( k ) &lt;
Now let X  X  consider a new ranking r  X  X  obtained from just reordering the top-k nodes of ranking r  X  in decreasing order of their ranks in ranking r , and keeping the ranks of other nodes still. Apparently, the sets of top-k nodes are the same between ranking r  X  and r  X  X  , thus I r  X  ( k ) = I r Then, for each node v r  X  than it in ranking r  X  X  is definitely a subset of the set of nodes ranked higher than it in ranking r . According to the submodularity of influence spread function, we can obtain M there is Note we have proved I r ( k )  X  I  X  X  ( k ). Taken together, we can obtain I r ( k )  X  I r  X  ( k ), and the equal-sign is tenable iff the sets of the top-k nodes in ranking r and r  X  are the same, otherwise I r ( k ) &lt; I
Based on the above conclusion, as long as the current ranking is not a self-consistent ranking, in each iteration all the values of I ( k )(1  X  k  X  n ) are nondecreasing, and at least one I ( k ) increases. Since each I ( k ) has an upper bound (i.e., n ), IMRank eventually converges to a self-consistent ranking within a finite number of iterations, starting from any initial ranking.
 We now empirically illustrate the quick convergence of IMRank, using a scientific collaboration network, namely HEPT, extracted from the  X  X igh Energy Physics-Theory X  section of the e-print arXiv website arXiv.org. This network is composed of 15 K nodes and 59 K edges. We run IMRank to select 50 seed nodes. Figure 2(a) shows the percent of different nodes in two successive iterations. For two widely-used models, weighted independent cascade (WIC) model [11] and trivalency independent cascade (TIC) model [3], the set of top-50 nodes becomes unchanged after 5 and 8 iterations respectively. Clearly, IMRank converges much quicker than greedy algorithms, which requires k iteration for selecting k seed nodes. Figure 2(b) depicts the influence spread of top-50 nodes. We employ the relative influence spread, i.e., the ratio of the obtained influence spread in each iteration to the obtained influence spread when IMRank converges. IMRank only takes 3 and 5 iterations to achieve a stable and high influence spread under the two models respectively. The influence spread of top-k nodes seems always converges with smaller number of iterations than the convergence of the set of top-k nodes. Therefore, one can stop IMRank safely in practice by checking the change of top-k nodes between two successive iterations.

In sum, we have theoretically and empirically demonstrat-ed the convergence of IMRank. Indeed, the convergence of IMRank could be affected by the accuracy of marginal influ-ence spread estimation. Extensive experiments further show IMRank with the LFA strategy always quickly converges to desirable rankings in Section 6.
Since IMRank is guaranteed to converge to a self-consistent ranking from any initial ranking, it is necessary to extend the discussion to its dependence on the initial ranking: does an arbitrary initial ranking results in a unique convergence? If no t, what initial ranking corresponds to a better result? We explore those questions by empirically simulating IMRank with five typical initial rankings as follows,
Empirical results on the HEPT dataset under the WIC model are reported in Figure 3, to compare the performance of IMRank with different initial rankings, as well as the performance of those rankings alone. We also report the performance of classic greedy algorithm for comparison, implemented with CELF optimization [13]. Performance of IMRank with Random initial ranking and Random ranking alone are averaged over 50 trials.

With the empirical results we conclude: Therefore, IMRank is robust to the selection of initial ranking, and IMRank works well with an initial ranking prefering nodes with high influence, which could be obtained efficiently in practice. A possible explanation is the priori bias that, a high-ranked node earns more allocated influence score than a low-ranked node, even with the same topolog-ical circumstance. Thus, it helps IMRank to converge to a good ranking if influential nodes are initially ranked high.
Among the three  X  X ood X  initial rankings with indistin-guishable performance, Degree offers a good candidate of initial ranking, since computing the initial ranking consumes a large part in the total running time of IMRank, as shown in Figure 3(b). Moreover, Figure 3(b) also shows that, IMRank runs more than 4 orders of magnitude faster than traditional greedy algorithm. Figure 3: Comparison between IMRank with different initial rankings under the WIC model.
In the LFA strategy, a node v r i is only allowed to allocate its influence score to a higher ranked neighboring node v implying an assumption that a node can only be activated by higher ranked neighbors. That assumption ignores the possibility that, a lower ranked node v r j activates a higher ranked node v r i by playing the role of an intermediate agent of another node v r k with k &lt; i . Take the path  X  v 1 in Figure 1 for example. When v 1 is selected as a seed, it is possible that it activates v 3 and then v 3 as an intermediate agent activates v 2 .
 To combat the above problem, we propose a generalized LFA strategy that trades a slight increase in running time for better accuracy in estimating M r , and therefore improves the performance of IMRank on influence spread. The generalized LFA strategy relaxes the above assumption and explores influence paths instead of higher ranked neighbors, which is introduced below to avoid duplicated computation that a path is contained in another path.

Definition 3. In uence path: Given a ranking r , a simple path d r ( v r j , v r i ) =  X  v r j ,  X  X  X  , v r i if v r j is the only node along the path that is ranked higher than v r i .

Lemma 1. A directed edge  X  v r j , v r i  X  is an influence path if j &lt; i .

Lemma 2. A node v r i allocates influence score to another node v r j only along an influence path d r ( v r j , v r
Proof. Consider a path d r ( v r j , v r i ). It is not negligible only when j &lt; i , since v r j has no chance to trigger a cascade to activate v r i immediately or eventually if j &gt; i . Besides, v r j has no chance to activate v r i along this path if the re exists an intermediate node v r k with k &lt; j , since v k is triggered earlier. The path should also be neglected if there exists an intermediate node v r k with j &lt; k &lt; i to avoid duplicated computation, since the influence score allocated from v r k to v r j already contains the fraction that v j activates v r i , as discussed in Section 4.2. Therefore, influence score is allocated though a simple path d r ( v if and only if v r j is the only node along the path that is ranked higher than v r i .

We denote  X  r ( v r i , v r j ) to the probability that v activated by v r j through any influence path. It is equal to the probability that at least one influence path d r ( v r has all its nodes activated, minus the probability that v is already activated before v r j attempts.  X  r ( v r i , v obtained as follows,  X   X   X  1  X  where p ( d r ) = ity that v r j activates all nodes on a path d r , and D r denotes the set of all influence paths from v r j to v r i
To summarize, the generalized LFA strategy replaces the allocating method: a node v r i delivers a fraction of its influence score to each higher ranked node reachable with an influence path, instead of each higher ranked neighbor, while replacing p (  X  , v r i ) with  X  (  X  , v r i ).
In practice, we limit the search range within influence paths no longer than l hops, since long paths are expensive to count but contribute little due to low probability to propagate influence. The LFA strategy is a special case of the generalized LFA strategy with l = 1.

The time and space complexity of IMRank with the generalized LFA strategy is low. Its space complexity is O ( n ), storing the value of M r ( v ) for each node. Its time complexity mainly depends on l . We denote d max to the largest number of paths end in an arbitrary node with length no more than l . The time required for scanning each node is O ( d max log d max ), including the time used for searching candidate nodes, sorting candidate nodes by their ranks, and allocating influence. Finally, the time complexity of IMRank is O ( nT d max log d max ), where T is the number of iterations IMRank takes before convergence. According to extensive experiment results, T is always significantly smaller than k . Besides, d max is usually much smaller than n , e.g. d max equals to the largest indegree among all nodes when l = 1. Therefore, the running time of IMRank is affordable. Figure 4 shows the impact of l on the performance of IMRank, measured with the influence spread on the NEPT network with WIC model and k = 50 for example. We report the results of IMRank with Degree and Random initial rankings and the results for other initial rankings are similar. When l increases from 1 to 2, there is an obvious increase on the performance. It supports that a larger l leads to more accurate estimation of marginal influence spread, and thus a better solution. With l &gt; 2, the performance increases little, because the propagation probabilities of long paths decrease exponentially with their length, resulting in little necessity to count long paths. On the other hand, the running time of IMRank increases rapidly with l , as shown in the inset figure of Figure 4. In that case l = 2 is good enough and fast, while in future practice a suitable l should Figu re 4: Impact of l on the performance of IMRank. be carefully selected according to the expected accuracy and affordable computational cost.
In this section, we evaluate IMRank on real-world net-works by comparing IMRank with state-of-the-art influence maximization algorithms.
Experiments are conducted under two widely-used inde-pendent cascade models: The compared algorithms include two implementations of IMRank and two state-of-the-art heuristic algorithms, i.e., PMIA and IRIE. Details are as follows:
Exp eriments are conducted on five real-world networks, two undirected scientific collaboration networks and three directed online social networks. Table 3 gives basic statistics of those networks. One of the two scientific collaboration networks, denoted as PHY, is obtained from the complete list of papers of the Physics section of the e-print arXiv website. The other one, denoted as DBLP, is extracted from the DBLP Computer Science Bibliography 1 . The three online social networks are EPINIONS, DOUBAN, and LIVEJOURNAL 2 , respectively extracted from the websites of epinions.com, douban.com and livejournal.com. In the EPINIONS dataset, an edge between two users u and v , denoted as  X  u, v  X  , represents that user u trusts user v . In the DOUBAN dataset [8], an edge between two users u and v represents that user u follows user v . In the LIVEJOURNAL network [1], an edge between two users u and v represents that user u declares user v as his/her friend. We choose ht tp://www.informatik.uni-trier.de/  X  ley/db/
EPINIONS and LIVEJOURNAL can be downloaded from http://snap.stanford.edu/data/. DOUBAN can be obtained on demand via email to the authors. these five networks based on the consideration that these networks possess various kinds of relationships and different sizes ranging from hundreds of thousands edges to millions of edges. Actually we test these algorithms on many other networks, and the results are similar. Limited by space, results on these networks are not included in this paper. All experiments are conducted on a server with 1.9GHz Quad-Core AMD Opteron(tm) Processor 8347HEx4 and 64G memory.
We evaluate IMRank on real-world networks by compar-ing it with state-of-the-art algorithms. Evaluation metrics include influence spread and running time. For the com-parison of obtained influence spread, we test the cases of of running time, we focus on the typical case k = 50. Each figure of Figures 5-8 shows the results on a certain network. The first two subfigures give the results of influence spread under the WIC model and the TIC model respectively, and the last one gives the results of running time.

Figure 5 shows the experimental results on the PHY dataset. Under the WIC model, IMRank2 achieves the best influence spread, followed by IMRank1, outperforming PMIA and IRIE. The distinguished accuracy of IMRank2 is attributed to the fact that, IMRank2 explores more influence paths to accurately estimate marginal influence spread. PMIA exhibits the worst performance, 6.3% lower influence spread than IMRank2 when k = 50. Under the TIC model, as shown in Figure 5(b), similar results are obtained, and the gaps between those algorithms become more visible. For influence spread, IMRank2 and IMRank1 are the top two algorithms while PMIA slightly outperforms IRIE. The influence spread obtained by IMRank2 is 13.8% and 12.7% higher than that obtained by IRIE and PMIA respectively. Moreover, as shown in Figure 5(c), IMRank1 and IMRank2 run faster than the competing algorithms under both the two models. IMRank1 is the fastest one followed by IMRank2 ,while PMIA takes the third place and IRIE runs slowest. In particular, the running times of IRIE and PMIA are 30 times and 10 times longer than the running time of IMRank1 under the WIC model respectively, and 18 times and 9 times longer than that of IMRank1 under the TIC model. With the running time dramatically reduced, IMRank1 still achieves better influence spread which is about 5.5% and 4.5% higher than that of IRIE and PMIA respectively. The consistent performance of IMRank1 and IMRank2 demonstrates the effectiveness of IMRank. The inconsistent performance of PMIA and IRIE under the two diffusion models illustrates that both PMIA and IRIE are unstable.

Figure 6 shows the results on DBLP dataset. The four algorithms performs similar on this dataset as on the PHY dataset. For the WIC model, IMRank2 achieves the highest influence spread and IMRank1 is the fastest one. In particular, when k = 50, the highest influence spread is achieved by IMRank2 and its running time is less than PMIA and IRIE. IMRank1 obtains similar influence spread to PMIA and its running time is one order of magnitude smaller than that of PMIA. For the TIC model, IMRank1, IMRank2 and PMIA achieve very similar influence spread, which is significantly higher than the influence spread achieved by IRIE. Moreover, IMRank1 runs nearly 8 times and 13 times faster than PMIA and IRIE.
 Figure 7 gives the results on EPINIONS dataset. For the WIC model, IMRank1 and IMRank2 run faster than PMIA and IRIE. In particular, compared to PMIA, IMRank1 runs two orders of magnitudes faster and IMRank2 runs one order of magnitude faster. For the TIC model, IMRank2 achieves the best influence spread and IMRank1 takes the second place. Both IMRank1 and IMRank2 significantly outperform PMIA and IRIE. Moreover, the running time of IMRank1 is only 0.1% of the running time of PMIA and 5% of that of IRIE. With similar running time, IMRank2 achieves significant higher influence spread than that of PMIA and IRIE.
 Figure 8 shows the results on the DOUBAN and LIVE-JOURNAL datasets. The number of edges of DOUBAN and LIVEJOURNAL is 22 millions and 69 millions respectively. Here we only give the results under the WIC model. On the DOUBAN network, the four algorithms achieve comparable influence spread. However, IMRank1 runs more than two orders of magnitude faster than PMIA and more than one order of magnitude faster than IRIE. On the LIVEJOURNAL network, IMRank2 and IRIE have similar influence spread, while IMRank1 follows and PMIA achieves the lowest influence spread. Note that IMRank2 runs faster than IRIE, and IMRank1 runs much faster than PMIA. We do not show the results under the TIC model since no visible difference is observed among the four tested algorithms. This is due to the fact that selecting one influential node always achieves a very large influence spread on DOUBAN and LIVEJOURNAL networks, and no increase of influence spread can be gained by adding a new seed. Such phenomenon has been observed and discussed in [11] and [3]. The possible reason is that the influence networks generated by the TIC model on the two networks have a relatively large strongly connected component. These experiments show that, in different scenarios, IM-Rank consistently perform well while PMIA and IRIE per-form unstable. IMRank1 always runs more than one order of magnitude faster than PMIA and IRIE, and achieves similar influence spread as them. IMRank2 consistently provides better influence spread than PMIA and IRIE, and runs faster than them. In addition, under the two differ-ent diffusion models, IMRank shows similar improvements on influence spread from the relative improvement angle. However, the improvements of IMRank seems more visible under the TIC model. With respect to this model, the links between influential nodes have high probability to be assigned a relative high propagation probability( p = 0 . 1), which counts against heuristic methods to accurate estimate influence spread. Hence, we speculate that, IMRank has more advantages than PMIA and IRIE to handle such cases.
In this paper, we investigated influence maximization from a novel ranking perspective. We proposed an efficient iterative framework IMRank to explore the benefits of accurate greedy algorithms and efficient heuristic estimation of influence spread. This framework effectively tunes any initial ranking into a self-consistent ranking in an iterative manner through fully leveraging the interplay between the ranking of nodes and their ranking-based marginal influence spread. A last-to-first allocating strategy is further proposed to efficiently estimate the ranking-based marginal influence spread under the independent cascade model. This strategy is elaborately designed according to the characteristics of the independent cascade model and the ranking-based marginal influence spread. We further generalize the last-to-first allocating strategy in order to achieve more accurate estimation. We also prove the convergence of IMRank and analyze the impact of initial ranking. Moreover, IMRank always works well with simple heuristic rankings, such as degree, strength. Extensive experiments on large scale real-world social networks demonstrate the efficiency of IMRank. Its scalability outperforms the state-of-the-art heuristics while its accuracy is comparable to the greedy algorithms. For future work, we will try to analyze the accuracy of IMRank theoretically. Moreover, we believe our proposed iterative framework is of generality for some cases which greedy algorithm is suitable for, and it can also be adapted in some re-ranking applications. We will try to extend it to other problems beyond influence maximization, such as diversity problem in information retrieval. This work was funded by the National Basic Research Program of China (973 program) under grant numbers (2012CB316303, 2013CB329602), and the National Natural Science Foundation of China with Nos 61202215, 61174152, 61232010, 61202213, and 11305219. The authors thank Wei Chen for providing the codes of the PMIA algorithm, and thank Kyomin Jung for providing the codes of the IRIE algorithm. The authors also thank to the members of the group NASC (www.groupnasc.org) for helpful discussions. [1] L. Backstrom, D. Huttenlocher, J. Kleinberg, and [2] S. Brin and L. Page. The anatomy of a large-scale [3] W. Chen, C. Wang, and Y. Wang. Scalable influence [4] W. Chen, Y. Wang, and S. Yang. Efficient influence [5] S. Cheng, H. Shen, J. Huang, G. Zhang, and [6] P. Domingos and M. Richardson. Mining the network [7] A. Goyal, W. Lu, and L. V. Lakshmanan. Celf++: [8] J. Huang, X.-Q. Cheng, H.-W. Shen, T. Zhou, and [9] Q. Jiang, G. Song, C. Gao, Y. Wang, W. Si, and [10] K. Jung, W. Heo, and W. Chen. Irie: Scalable and [11] D. Kempe, J. Kleinberg, and E. Tardos. Maximizing [12] M. Kimura, K. Saito, R. Nakano, and H. Motoda. [13] J. Leskovec, A. Krause, C. Guestrin, C. Faloutsos, [14] M. Mathioudakis, F. Bonchi, C. Castillo, A. Gionis, [15] R. Narayanam and Y. Narahari. A shapley [16] M. Richardson and P. Domingos. Mining [17] D. Sheldon, B. Dilkina, A. N. Elmachtoub, R. Finseth, [18] J. Tang, J. Sun, C. Wang, and Z. Yang. Social [19] C. Wang, W. Chen, and Y. Wang. Scalable influence [20] Y. Wang, G. Cong, G. Song, and K. Xie.

