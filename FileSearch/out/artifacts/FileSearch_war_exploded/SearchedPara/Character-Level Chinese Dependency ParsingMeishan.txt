 As a light-weight formalism offering syntactic information to downstream applications such as SMT, the dependency grammar has received in-creasing interest in the syntax parsing commu-nity (McDonald et al., 2005; Nivre and Nilsson, 2005; Carreras et al., 2006; Duan et al., 2007; Koo and Collins, 2010; Zhang and Clark, 2008; Nivre, 2008; Bohnet, 2010; Zhang and Nivre, 2011; Choi and McCallum, 2013). Chinese dependency trees were conventionally defined over words (Chang et al., 2009; Li et al., 2012), requiring word segmen-tation and POS-tagging as pre-processing steps. Recent work on Chinese analysis has embarked on investigating the syntactic roles of characters, leading to large-scale annotations of word internal structures (Li, 2011; Zhang et al., 2013). Such an-notations enable dependency parsing on the char-acter level, building dependency trees over Chi-nese characters . Figure 1(c) shows an example of Figure 1: An example character-level dependency tree.  X   X   X   X   X   X   X   X   X   X   X   X   X  (The deputy director of forestry administration make a speech in the meeting) X . a character-level dependency tree, where the leaf nodes are Chinese characters.

Character-level dependency parsing is interest-ing in at least two aspects. First, character-level trees circumvent the issue that no universal stan-dard exists for Chinese word segmentation. In the well-known Chinese word segmentation bakeoff tasks, for example, different segmentation stan-dards have been used by different data sets (Emer-son, 2005). On the other hand, most disagreement on segmentation standards boils down to disagree-ment on segmentation granularity. As demon-strated by Zhao (2009), one can extract both fine-grained and coarse-grained words from character-level dependency trees, and hence can adapt to flexible segmentation standards using this formal-ism. In Figure 1(c), for example,  X   X   X   X  (deputy director) X  can be segmented as both  X   X  (deputy) |  X   X  (director) X  and  X   X   X   X  (deputy direc-tor) X , but not  X   X  (deputy)  X  (office) |  X  (man-ager) X , by dependency coherence. Chinese lan-guage processing tasks, such as machine transla-tion, can benefit from flexible segmentation stan-dards (Zhang et al., 2008; Chang et al., 2008).
Second, word internal structures can also be useful for syntactic parsing. Zhang et al. (2013) have shown the usefulness of word structures in Chinese constituent parsing. Their results on the Chinese Treebank (CTB) showed that character-level constituent parsing can bring increased per-formances even with the pseudo word structures. They further showed that better performances can be achieved when manually annotated word struc-tures are used instead of pseudo structures.
In this paper, we make an investigation of character-level Chinese dependency parsing using Zhang et al. (2013) X  X  annotations and based on a transition-based parsing framework (Zhang and Clark, 2011). There are two dominant transition-based dependency parsing systems, namely the arc-standard and the arc-eager parsers (Nivre, 2008). We study both algorithms for character-level dependency parsing in order to make a com-prehensive investigation. For direct comparison with word-based parsers, we incorporate the tra-ditional word segmentation, POS-tagging and de-pendency parsing stages in our joint parsing mod-els. We make changes to the original transition systems, and arrive at two novel transition-based character-level parsers.

We conduct experiments on three data sets, in-cluding CTB 5.0, CTB 6.0 and CTB 7.0. Exper-imental results show that the character-level de-pendency parsing models outperform the word-based methods on all the data sets. Moreover, manually annotated intra-word dependencies can give improved word-level dependency accuracies than pseudo intra-word dependencies. These re-sults confirm the usefulness of character-level syntax for Chinese analysis. The source codes are freely available at http://sourceforge. net/projects/zpar/, version 0.7 . Character-level dependencies were first proposed by Zhao (2009). They show that by annotat-ing character dependencies within words, one can adapt to different segmentation standards. The dependencies they study are restricted to intra-word characters, as illustrated in Figure 1(b). For inter-word dependencies, they use a pseudo right-headed representation.

In this study, we integrate inter-word syntactic dependencies and intra-word dependencies using large-scale annotations of word internal structures by Zhang et al. (2013), and study their interac-tions. We extract unlabeled dependencies from bracketed word structures according to Zhang et al. X  X  head annotations. In Figure 1(c), the depen-dencies shown by dashed arcs are intra-word de-pendencies, which reflect the internal word struc-tures, while the dependencies with solid arcs are inter-word dependencies, which reflect the syntac-tic structures between words.

In this formulation, a character-level depen-dency tree satisfies the same constraints as the traditional word-based dependency tree for Chi-nese, including projectivity. We differentiate intra-word dependencies and inter-word dependencies by the arc type, so that our work can be com-pared with conventional word segmentation, POS-tagging and dependency parsing pipelines under a canonical segmentation standard.

The character-level dependency trees hold to a specific word segmentation standard, but are not limited to it. We can extract finer-grained words of different granulities from a coarse-grained word by taking projective subtrees of different sizes. For example, taking all the intra-word modifier nodes of  X   X  (manager) X  in Figure 1(c) results in the word  X   X   X   X  (deputy director) X , while taking the first modifier node of  X   X  (manager) X  results in the word  X   X   X  (director) X . Note that  X   X   X  (deputy office) X  cannot be a word because it does not form a projective span without  X   X  (manager) X .

Inner-word dependencies can also bring bene-fits to parsing word-level dependencies. The head character can be a less sparse feature compared to a word. As intra-word dependencies lead to fine-grained subwords, we can also use these sub-words for better parsing. In this work, we use the innermost left/right subwords as atomic fea-tures. To extract the subwords, we find the inner-most left/right modifiers of the head character, re-spectively, and then conjoin them with all their de-scendant characters to form the smallest left/right subwords. Figure 2 shows an example, where the smallest left subword of  X   X   X   X  (chief lawyer) X  is  X   X   X  (lawyer) X , and the smallest right subword Figure 2: An example to illustrate the innermost left/right subwords. of  X   X   X   X  (legalize) X  is  X   X   X  (legal) X . A transition-based framework with global learn-ing and beam search decoding (Zhang and Clark, 2011) has been applied to a number of natural lan-guage processing tasks, including word segmen-tation, POS-tagging and syntactic parsing (Zhang and Clark, 2010; Huang and Sagae, 2010; Bohnet and Nivre, 2012; Zhang et al., 2013). It models a task incrementally from a start state to an end state, where each intermediate state during decod-ing can be regarded as a partial output. A num-ber of actions are defined so that the state ad-vances step by step. To learn the model param-eters, it usually uses the online perceptron algo-rithm with early-update under the inexact decod-ing condition (Collins, 2002; Collins and Roark, 2004). Transition-based dependency parsing can be modeled under this framework, where the state consists of a stack and a queue, and the set of ac-tions can be either the arc-eager (Zhang and Clark, 2008) or the arc-standard (Huang et al., 2009) transition systems.

When the internal structures of words are an-notated, character-level dependency parsing can be treated as a special case of word-level depen-dency parsing, with  X  X ords X  being  X  X haracters X . A big weakness of this approach is that full words and POS-tags cannot be used for feature engineer-ing. Both are crucial to well-established features for word segmentation, POS-tagging and syntactic parsing. In this section, we introduce novel exten-sions to the arc-standard and the arc-eager tran-sition systems, so that word-based and character-based features can be used simultaneously for character-level dependency parsing. 3.1 The Arc-Standard Model The arc-standard model has been applied to joint segmentation, POS-tagging and dependency pars-ing (Hatori et al., 2012), but with pseudo word structures. For unified processing of annotated word structures and fair comparison between character-level arc-eager and arc-standard sys-tems, we define a different arc-standard transition system, consistent with our character-level arc-eager system.

In the word-based arc-standard model, the tran-sition state includes a stack and a queue, where the stack contains a sequence of partially-parsed dependency trees, and the queue consists of un-processed input words. Four actions are defined for state transition, including arc-left (AL, which creates a left arc between the top element s 0 and the second top element s 1 on the stack), arc-right (AR, which creates a right arc between s 0 and s 1 ), pop-root (PR, which defines the root node of a de-pendency tree when there is only one element on the stack and no element in the queue), and the last shift (SH, which shifts the first element q 0 of the queue onto the stack).

For character-level dependency parsing, there are two types of dependencies: inter-word depen-dencies and intra-word dependencies. To parse them with both character and word features, we extend the original transition actions into two cat-egories, for inter-word dependencies and intra-word dependencies, respectively. The actions for inter-word dependencies include inter-word arc-left (AL w ), inter-word arc-right (AR w ), pop-root (PR) and inter-word shift (SH w ). Their definitions are the same as the word-based model, with one exception that the inter-word shift operation has a parameter denoting the POS-tag of the incoming word, so that POS disambiguation is performed by the SH w action.

The actions for intra-word dependencies in-clude intra-word arc-left (AL c ), intra-word arc-right (AR c ), pop-word (PW) and inter-word shift (SH c ). The definitions of AL c , AR c and SH c are the same as the word-based arc-standard model, while PW changes the top element on the stack into a full-word node, which can only take inter-word dependencies. One thing to note is that, due to variable word sizes in character-level parsing, the number of actions can vary between differ-ent sequences of actions corresponding to differ-ent analyses. We use the padding method (Zhu et al., 2013), adding an IDLE action to finished transition action sequences, for better alignments between states in the beam.

In the character-level arc-standard transition system, each word is initialized by the action SH w with a POS tag, before being incrementally mod-ified by a sequence of intra-word actions, and fi-nally being completed by the action PW. The inter-word actions can be applied when all the elements on the stack are full-word nodes, while the intra-word actions can be applied when at least the top element on the stack is a partial-word node. For the actions AL c and AR c to be valid, the top two elements on the stack are both partial-word nodes. For the action PW to be valid, only the top ele-ment on the stack is a partial-word node. Figure 3(a) gives an example action sequence.

There are three types of features. The first two types are traditionally established features for the dependency parsing and joint word segmentation and POS-tagging tasks. We use the features pro-posed by Hatori et al. (2012). The word-level dependency parsing features are added when the inter-word actions are applied, and the features for joint word segmentation and POS-tagging are added when the actions PW, SH w and SH c are ap-plied. Following the work of Hatori et al. (2012), we have a parameter  X  to adjust the weights for joint word segmentation and POS-tagging fea-tures. We apply word-based dependency pars-ing features to intra-word dependency parsing as well, by using subwords (the conjunction of char-acters spanning the head node) to replace words in word features. The third type of features is word-structure features. We extract the head charac-ter and the smallest subwords containing the head character from the intra-word dependencies (Sec-tion 2). Table 1 summarizes the features. 3.2 The Arc-Eager Model Similar to the arc-standard case, the state of a word-based arc-eager model consists of a stack and a queue, where the stack contains a sequence of partial dependency trees, and the queue con-sists of unprocessed input words. Unlike the arc-standard model, which builds dependencies on the top two elements on the stack, the arc-eager model builds dependencies between the top element of the stack and the first element of the queue. Five actions are defined for state transformation: arc-left (AL, which creates a left arc between the top element of the stack s 0 and the first element in the queue q 0 , while popping s 0 off the stack), arc-right (AR, which creates a right arc between Table 1: Feature templates encoding intra-word dependencies. L and R denote the two elements over which the dependencies are built; the sub-scripts lc 1 and rc 1 denote the left-most and right-most children, respectively; the subscripts lc 2 and rc 2 denote the second left-most and second right-most children, respectively; w denotes the word; t denotes the POS tag; c denotes the head charac-ter; lsw and rsw denote the smallest left and right subwords respectively, as shown in Figure 2. s 0 and q 0 , while shifting q 0 from the queue onto the stack), pop-root (PR, which defines the ROOT node of the dependency tree when there is only one element on the stack and no element in the queue), reduce (RD, which pops s 0 off the stack), and shift (SH, which shifts q 0 onto the stack).
There is no previous work that exploits the arc-eager algorithm for jointly performing POS-tagging and dependency parsing. Since the first element of the queue can be shifted onto the stack by either SH or AR, it is more difficult to assign a POS tag to each word by using a single action. In this work, we make a change to the configu-ration state, adding a deque between the stack and the queue to save partial words with intra-word de-pendencies. We divide the transition actions into two categories, one for inter-word dependencies (AR w , AL w , SH w , RD w and PR) and the other for intra-word dependencies (AR c , AL c , SH c , RD c and PW), requiring that the intra-word actions be operated between the deque and the queue, while the inter-word actions be operated between the stack and the deque.

For character-level arc-eager dependency pars-ing, the inter-word actions are the same as the word-based methods. The actions AL c and AR c are the same as AL w and AR w , except that they operate on characters, but the SH c operation has a parameter to denote the POS tag of a word. The PW action recognizes a full-word. We also have an IDLE action, for the same reason as the arc-standard model.

In the character-level arc-eager transition sys-tem, a word is formed in a similar way with that of character-level arc-standard algorithm. Each word is initialized by the action SH c with a POS tag, and then incrementally changed a sequence of intra-word actions, before being finalized by the action PW. All these actions operate between the queue and deque. For the action PW, only the first element in the deque (close to the queue) is a partial-word node. For the actions AR c and AL c to be valid, the first element in the deque must be a partial-word node. The action SH c have a POS tag when shifting the first character of a word,but does not have such a parameter when shifting the next characters of a word. For the action SH c with a POS tag to be valid, the first element in the deque must be a full-word node. Different from the arc-standard model, at any stage we can choose either the action SH c with a POS tag to initialize a new word on the deque, or the inter-word actions on the stack. In order to eliminate the ambiguity, we define a new parameter t to limit the max size of the deque. If the deque is full with t words, inter-word actions are performed; otherwise intra-word actions are performed. All the inter-word actions must be applied on full-word nodes between the stack an the deque. Figure 3(b) gives an example action sequence.

Similar to the arc-standard case, there are three types of features, with the first two types being traditionally established features for dependency parsing and joint word segmentation and POS-tagging. The dependency parsing features are taken from the work of Zhang and Nivre (2011), and the features for joint word segmentation and POS-tagging are taken from Zhang and Clark tures are triggered when the inter-word actions are applied, while the features of joint word segmenta-tion and POS-tagging are added when the actions SH c , AR c and PW are applied. Again we use a pa-rameter  X  to adjust the weights for joint word seg-mentation and POS-tagging features. The word-level features for dependency parsing are applied to intra-word dependency parsing as well, by us-ing subwords to replace words. The third type of features is word-structure features, which are the same as those of the character-level arc-standard model, shown in Table 1. 4.1 Experimental Settings We use the Chinese Penn Treebank 5.0, 6.0 and 7.0 to conduct the experiments, splitting the corpora into training, development and test sets according to previous work. Three different splitting meth-ods are used, namely CTB50 by Zhang and Clark (2010), CTB60 by the official documentation of CTB 6.0, and CTB70 by Wang et al. (2011). The dataset statistics are shown in Table 2. We use the head rules of Zhang and Clark (2008) to con-vert phrase structures into dependency structures. The intra-word dependencies are extracted from
The standard measures of word-level precision, recall and F1 score are used to evaluate word seg-mentation, POS-tagging and dependency parsing, following Hatori et al. (2012). In addition, we use the same measures to evaluate intra-word depen-dencies, which indicate the performance of pre-dicting word structures. A word X  X  structure is cor-rect only if all the intra-word dependencies are all correctly recognized. 4.2 Baseline and Proposed Models For the baseline, we have two different pipeline models. The first consists of a joint segmentation and POS-tagging model (Zhang and Clark, 2010) and a word-based dependency parsing model us-ing the arc-standard algorithm (Huang et al., 2009). We name this model STD (pipe). The second consists of the same joint segmentation and POS-tagging model and a word-based depen-dency parsing model using the arc-eager algorithm (Zhang and Nivre, 2011). We name this model EAG (pipe). For the pipeline models, we use a beam of size 16 for joint segmentation and POS-tagging, and a beam of size 64 for dependency parsing, according to previous work.

We study the following character-level depen-dency parsing models:  X  STD (real, pseudo): the arc-standard model  X  STD (pseudo, real): the arc-standard model  X  STD (real, real): the arc-standard model with  X  EAG (real, pseudo): the arc-eager model  X  EAG (pseudo, real): the arc-eager model  X  EAG (real, real): the arc-eager model with The annotated intra-word dependencies refer to the dependencies extracted from annotated word structures, while the pseudo intra-word depen-dencies used in the above models are similar to those of Hatori et al. (2012). For a given word w = c 1 c 2  X  X  X  c m , the intra-word depen-word dependencies refer to the syntactic word-level dependencies by head-finding rules from CTB, while the pseudo inter-word dependencies refer to the word-level dependencies used by Zhao (2009) ( w x 1 w x 2  X  X  X  x w n ). The character-level models with annotated intra-word dependencies and pseudo inter-word dependencies are compared with the pipelines on word segmentation and POS-tagging accuracies, and are compared with the character-level models with annotated intra-word dependencies and real inter-word dependencies on word segmentation, POS-tagging and word-structure predicating accuracies. All the proposed Table 3: Development test results of the character-level arc-standard model on CTB60.
 Table 4: Development test results of the character-level arc-eager model on CTB60. models use a beam of size 64 after considering both speeds and accuracies. 4.3 Development Results Our development tests are designed for two pur-poses: adjusting the parameters for the two pro-posed character-level models and testing the effec-tiveness of the novel word-structure features. Tun-ing is conducted by maximizing word-level depen-dency accuracies. All the tests are conducted on the CTB60 data set. 4.3.1 Parameter Tuning For the arc-standard model, there is only one pa-rameter  X  that needs tuning. It adjusts the weights of segmentation and POS-tagging features, be-cause the number of feature templates is much less for the two tasks than for parsing. We set the value of  X  to 1  X  X  X  5, respectively. Table 3 shows the accuracies on the CTB60 development set. Ac-cording to the results, we use  X  = 4 for our final character-level arc-standard model.

For the arc-eager model, there are two parame-ters t and  X  . t denotes the deque size of the arc-eager model, while  X  shares the same meaning as the arc-standard model. We take two steps for pa-rameter tuning, first adjusting the more crucial pa-rameter t and then adjusting  X  on the best t . Both parameters are assigned the values of 1 to 5. Ta-Table 5: Feature ablation tests for the novel word-structure features, where  X /wo X  denotes the corre-sponding models without the novel intra-word de-pendency features. ble 4 shows the results. According to results, we set t = 3 and  X  = 3 for the final character-level arc-eager model, respectively. 4.3.2 Effectiveness of Word-Structure To test the effectiveness of our novel word-structure features, we conduct feature ablation ex-periments on the CTB60 development data set for the proposed arc-standard and arc-eager models, respectively. Table 5 shows the results. We can see that both the two models achieve better accu-racies on word-level dependencies with the novel word-structure features, while the features do not affect word-structure predication significantly. 4.4 Final Results Table 6 shows the final results on the CTB50, CTB60 and CTB70 data sets, respectively. The results demonstrate that the character-level depen-dency parsing models are significantly better than the corresponding word-based pipeline models, for both the arc-standard and arc-eager systems. Similar to the findings of Zhang et al. (2013), we find that the annotated word structures can give better accuracies than pseudo word structures. An-other interesting finding is that, although the arc-eager algorithm achieves lower accuracies in the word-based pipeline models, it obtains compara-tive accuracies in the character-level models.
We also compare our results to those of Hatori et al. (2012), which is comparable to STD (pseudo, real) since similar arc-standard algorithms and features are used. The major difference is the set of transition actions. We rerun their system arc-standard system with pseudo word structures with the pipeline word-based models using pairwise t-test. brings consistent better accuracies than their work on all the three data sets.

Both the pipelines and character-level mod-els with pseudo inter-word dependencies perform word segmentation and POS-tagging jointly, with-out using real word-level syntactic information. A comparison between them (STD/EAG (pipe) vs. STD/EAG (real, pseudo)) reflects the effectiveness of annotated intra-word dependencies on segmen-tation and POS-tagging. We can see that both the arc-standard and arc-eager models with annotated intra-word dependencies can improve the segmen-tation accuracies by 0.3% and the POS-tagging ac-curacies by 0.5% on average on the three datasets. Similarly, a comparison between the character-level models with pseudo inter-word dependen-cies and the character-level models with real inter-word dependencies (STD/EAG (real, pseudo) vs. STD/EAG (real, real)) can reflect the effectiveness of annotated inter-word structures on morphology analysis. We can see that improved POS-tagging accuracies are achieved using the real inter-word dependencies when jointly performing inner-and inter-word dependencies. However, we find that the inter-word dependencies do not help the word-structure accuracies. 4.5 Analysis To better understand the character-level parsing models, we conduct error analysis in this section. All the experiments are conducted on the CTB60 test data sets. The new advantage of the character-level models is that one can parse the internal word structures of intra-word dependencies. Thus we are interested in their capabilities of predict-ing word structures. We study the word-structure accuracies in two aspects, including OOV, word length, POS tags and the parsing model. 4.5.1 OOV The word-structure accuracy of OOV words re-flects a model X  X  ability of handling unknown words. The overall recalls of OOV word structures are 67.98% by STD (real, real) and 69.01% by EAG (real, real), respectively. We find that most errors are caused by failures of word segmenta-tion. We further investigate the accuracies when words are correctly segmented, where the accura-cies of OOV word structures are 87.64% by STD (real, real) and 89.07% by EAG (real, real). The results demonstrate that the structures of Chinese words are not difficult to predict, and confirm the fact that Chinese word structures have some com-mon syntactic patterns. 4.5.2 Parsing Model From the above analysis in terms of OOV, word lengths and POS tags, we can see that the EAG (real, real) model and the STD (real, real) mod-els behave similarly on word-structure accuracies. Here we study the two models more carefully, comparing their word accuracies sentence by sen-tence. Figure 4 shows the results, where each point denotes a sentential comparison between STD (real, real) and EAG (real, real), the x-axis denotes the sentential word-structure accuracy of STD (real, real), and the y-axis denotes that of EAG (real, real). The points at the diagonal show the same accuracies by the two models, while oth-ers show that the two models perform differently on the corresponding sentences. We can see that most points are beyond the diagonal line, indicat-Figure 4: Sentential word-structure accuracies of STD (real, real) and EAG (real, real). ing that the two parsing models can be comple-mentary in parsing intra-word dependencies. Zhao (2009) was the first to study character-level dependencies; they argue that since no consistent word boundaries exist over Chinese word segmen-tation, dependency-based representations of word structures serve as a good alternative for Chinese word segmentation. Thus their main concern is to parse intra-word dependencies. In this work, we extend their formulation, making use of large-scale annotations of Zhang et al. (2013), so that the syntactic word-level dependencies can be parsed together with intra-word dependencies.

Hatori et al. (2012) proposed a joint model for Chinese word segmentation, POS-tagging and dependency parsing, studying the influence of joint model and character features for parsing, Their model is extended from the arc-standard transition-based model, and can be regarded as an alternative to the arc-standard model of our work when pseudo intra-word dependencies are used. Similar work is done by Li and Zhou (2012). Our proposed arc-standard model is more concise while obtaining better performance than Hatori et al. (2012) X  X  work. With respect to word structures, real intra-word dependencies are often more com-plicated, while pseudo word structures cannot be used to correctly guide segmentation.

Zhao (2009), Hatori et al. (2012) and our work all study character-level dependency pars-ing. While Zhao (2009) focus on word internal structures using pseudo inter-word dependencies, Hatori et al. (2012) investigate a joint model using pseudo intra-word dependencies. We use manual dependencies for both inner-and inter-word struc-tures, studying their influences on each other.
Zhang et al. (2013) was the first to perform Chi-nese syntactic parsing over characters. They ex-tended word-level constituent trees by annotated word structures, and proposed a transition-based approach to parse intra-word structures and word-level constituent structures jointly. For Hebrew, Tsarfaty and Goldberg (2008) investigated joint segmentation and parsing over characters using a graph-based method. Our work is similar in ex-ploiting character-level syntax. We study the de-pendency grammar, another popular syntactic rep-resentation, and propose two novel transition sys-tems for character-level dependency parsing.
Nivre (2008) gave a systematic description of the arc-standard and arc-eager algorithms, cur-rently two popular transition-based parsing meth-ods for word-level dependency parsing. We extend both algorithms to character-level joint word seg-mentation, POS-tagging and dependency parsing. To our knowledge, we are the first to apply the arc-eager system to joint models and achieve compar-ative performances to the arc-standard model. We studied the character-level Chinese depen-dency parsing, by making novel extensions to two commonly-used transition-based dependency parsing algorithms for word-based dependency parsing. With both pseudo and annotated word structures, our character-level models obtained better accuracies than previous work on seg-mentation, POS-tagging and word-level depen-dency parsing. We further analyzed some im-portant factors for intra-word dependencies, and found that two proposed character-level pars-ing models are complementary in parsing intra-word dependencies. We make the source code publicly available at http://sourceforge. net/projects/zpar/, version 0.7 .
 We thank the anonymous reviewers for their constructive comments, and gratefully acknowl-edge the support of the National Basic Re-search Program (973 Program) of China via Grant 2014CB340503, the National Natural Science Foundation of China (NSFC) via Grant 61133012 and 61370164, the Singapore Ministry of Educa-tion (MOE) AcRF Tier 2 grant T2MOE201301 and SRG ISTD 2012 038 from Singapore Univer-sity of Technology and Design.
