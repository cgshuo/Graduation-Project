 1. Introduction
Many decisions in the operation of distributed manufacturing processes are complex and coupled. In addition, the environment in which the decisions have to be made is dynamically changing and a specific operation may require many decisions which are dynamically changing in response to changes in the environment.
Hence, there is a need for the development of management capability to deal with these dynamic tasks using decentralized and coordinated approaches ( Quadrat-Ullah et al., 2007 ).
Complex problems should be divided into many interacting components handling different sub-tasks, which raises the necessity of having different types of inform ation processing techniques, such as neural networks and genetic algorithms. However, such techni-ques will be more effective when they are complementing each other in a hybrid approach. The de sign of such hybrid intelligent systems is challenging because of a large number of interactions among multiple components. Agent-based systems (ABSs) can be used to create a distributed artificial intelligence framework that can serve as a powerful platform enabling simultaneous and coordinated use of above mentioned intelligent solution developing techniques.
An agent is a computational entity/object that can perceive its environment and make a decision based on environmental inputs and its own coded, internal logic ( Zhang and Zhang, 2004 ). The use of ABS dates back to early 1990s, when StarLogo emerged in 1990. SWARM and NetLogo followed it in mid-1990s and Repast appeared in 2000 ( Agent-based model, 2010 ). Other platforms include Java Agent DEvelopment Framework (JADE) ( Jade home, 2010 ) based on the Agent Communication Languag e (ACL) proposed by the Founda-tion for Intelligent Physical Agents (FIPA) ( FIPA home, 2010 )and JACK Intelligent Agents (JACK) ( Jack home, 2010 ). We believe that Repast provides more functionality and it is easy to generate both reactive and proactive agents in this platform. ABSs are applied to different business and technolo gy problems, which include, but not limited to, distributed comp uting, supply chain management, workforce management, portfolio management, traffic management and modeling consumer behavior including the effects of social networks ( Agent-based model, 2010 ).

Agent-based systems have the ability to adapt to dynamically changing system conditions and self-organize to give rise to new solutions, which cannot be determined beforehand. This emer-gent behavior can be achieved via a highly modular structure, where local modules are designed to encapsulate knowledge and solution techniques specific to that region of the network where they operate. To achieve intelligent behavior, agents with organiza-tional rules are crucial in serving as higher-level coordination mechanisms, which harmonize local actions. Several multi-layered agent structures have been proposed. For example, MADCABS (monitoring, analysis, diagnosis and control with an agent-based system) has three layers ( Fig. 1 ). Holonic multi-agent systems are usually structured hierarchically and one of their objectives is to improve robustness in distributed systems. In the holonic approach, the idea is to use autonomous and c ooperative manufacturing units (holons) organized in a flexible hierarchy to increase reconfigur-ability of the process ( Bussmann and Sieverding, 2001 ) and thus it has similarities with the ABSs. This similarity is used in combining both approaches and the emergent structure is a holonic multi-agent system. The approach is used with different methods like an ontology-based reconfiguration agent which is responsible for reconfiguring the system in cas e of a failure with mechatronic devices ( Al-Safi and Vyatkin, 2007 ) or in the design of collision avoidance algorithms with autonom ous guided vehicles that operate in a similar fashion to organizing accesses to a file using write-locks ( Vrba et al., 2007 ). We are investigating the performance and limitations of agent-based supervision and control mechanisms in complex networked manufacturin g processes producing different grades of products. Usually, the desired end-product qualities such as concentration and molecular weight distribution are known, however, the process configuration that produces the desired product may not be known a priori or there may be several system configurations that lead to the specified end-product qualities. It is desirable to complete the grade transitions by implementing the least amount of disturbance to the process.

The proposed technique consists of an online ABS with learn-ing capabilities for supervision and control of distributed manu-facturing. This ABS is applied to the case of grade transitions in autocatalytic networks. The case studies show that the control structure suggested is quite robust to disturbances and changes in the network such as stopping the operation of multiple reactors during a production campaign and is successful in managing grade transition and disturbance rejection objectives. One ABS approach uses an auction-based grade transition system and a genetic-algorithm based approach ( Tetiker et al., 2008 ). The auction-based approach configures the system with the number of reactors, where keeping the production of one species in a reactor is more important than the final configuration and the genetic-algorithm based approach aims to transfer one species from the most appropriate reactor to the target reactor. The organization of the study is as follows: Section 2 presents
MADCABS and describes the process layout used in case studies, its general structure, functionality and features. Section 3 describes the solution structure developed to tackle grade transi-tion problems in an autocatalytic continuous stirred tank reactor (CSTR) network. Section 4 presents the results of the case studies and Section 5 is dedicated to conclusions and perspectives. 2. Madcabs and the CSTR network in case studies 2.1. Supervision and control system
MADCABS is an agent-based software environment developed through collaborative work between Illinois Institute of Technol-ogy and Argonne National Laboratory. It aims to monitor a distributed manufacturing process, diagnose any problems, supervise and control it without any human intervention. It has a hierarchical layout with three layers. The first layer is the physical layer , which is used to map the physical system to MADCABS and contains a representation of the physical process.
Mapping is done using representative sensor and actuator instances. MADCABS gets information either from a database, a simulator or a process. Process information is continuously collected by sensors and mapped onto sensor instances in the physical layer. MADCABS acts on the process by sending com-mands to its actuators using the information obtained from the control layer.

The second layer is the supervision layer , which itself is a layered structure and performs preprocessing, monitoring and diagnosis and control tasks. Each task is handled by the implementation of different methods, which are comparable in nature and are either competing or collaborating depending on the problem to obtain better accuracy, robustness and adaptation. The third layer is the agent management layer containing performance assessment structure responsible for evaluation of performances of different comparable methods. This layer is used for comparison in our simulation runs ( Table 1 ). The aim is to ensure that priority is given to better performing methods and the rearrangement of priorities evolves throughout the course of the process operation. As a result, this layer also provides a platform for the training phases of the method developed. Fig. 1 shows the general layout of MADCABS connected to a process and its layers. MADCABS also enables information relay between different layers and uses process knowledge. For example if a diagnosis agent decides that there is a faulty actuator, then the control structure takes the variable manipulated by that actuator out of the set of the manipulated variables in its arsenal.

MADCABS is implemented in Java and uses the open source agent modeling and simulation environment Repast ( North et al., 2006 ). The Repast toolkit is a Java-based framework for agent Process Supervision Layer Physical Mapping Layer Agent Management Layer Performance simulation and provides features such as an event scheduler and visualization tools. The agents created interact with virtual representations of the physical reactor network. The virtual net-work objects map the states of the physical system to objects that can be manipulated by control agents. The interface between the physical network and the agent environment can be a data acquisition system in the case of a real process or a simulator such as the chemical reactor network used in this case. 2.2. Chemical reactor network
The chemical process being studied is an interconnected CSTR network, where isothermal autocatalytic reactions are taking place. This reactor network can represent many population dynamics problems when specific types of chemical reactions take place in them. We use autocatalytic reactions in the network to formulate surrogates for predator X  X rey, virus propagation in a distributed population, multiple species of animals that rely on the same resources, or chemical manufacturing problems.
Distributed reactor networks offer advantages in manufacturing specialty chemicals such as polymers with complex molecular weight distributions ( Demirel et al., 2008 ). Reactor networks exhibit highly complex behavior, with multiple steady state operating regimes, and have a large pool of candidates for manipulated variables ( Tatara et al., 2004 ). Recent work on multiple reactor configurations with cubic autocatalytic reactions has demonstrated a rich spectrum of static and dynamic behavior ( Tatara et al., 2004 ). The topography of interconnected CSTR networks has been shown to drastically affect the steady state bifurcation structure of the system ( Tatara et al., 2004 ). Spatial inhomogeneity of the network can be increased by increasing the number of reactors in the network as well as manipulating the interconnection flow rates of the network. The number of stable and unstable steady states increases with the inhomogeneity of the network and larger networks permit more steady states and spatial combinations ( Balasubramanian et al., 2010 ). Although much of the bifurcation diagram is dominated by unstable steady states, there exists a number of stable steady states for a large range of reactor feed and interconnection flow rates.

The network of I interconnected isothermal CSTRs ( Fig. 2 a) is modeled by specifying the material balance equations for each individual reactor i ( Fig. 2 b) in the network, where i  X  1 :: I .
The cubic autocatalytic reaction mechanism for N autocatalytic species is given in Eq. (1), where R is the resource, P n product species, and D is a dead (inert) species. Reaction rate constants k n and k dn characterize the growth and death rates of the n th species: Growth : R  X  2 P n -k n 3 P n ; Death : P n -k dn D  X  1  X 
The dimensionless rates of change of the resource and species concentrations for a reactor i in network of I identical reactors of constant volume are dr dt  X  dp dt  X  k n r i p by defining the variables as r i  X  R i / R 0 , p ni  X  P ni fo  X  Fo i =  X  VR 2 i  X  , d n  X  k dn = R 2 0 ,and t  X  R 2 0 t 0 ,where R concentration in the feed, P f is the species concentration in the feed, R is the resource concentration in reactor i , P ni is the n th species concentration in reactor i , F i is the feed flow rate to and Fo flow rate from reactor i ,and V is the reactor volume. The inter-connection matrix G defines the strength of the interconnection flow rates between networked reactors, such that G ( i , j )istheintercon-nection flow rate from reactor i to reactor j .Inalltheequations, n denotes n th species, whereas i and j indicate reactors.
The spatial distribution of species determines the overall product composition that exits the network. By manipulating the spatial configuration of the autocatalytic species residing in the network, one can produce multiple grades of product by simply reconfiguring the connectivity of the network.

Controlling the spatial distribution of autocatalytic species in a network of reactors requires simultaneous manipulation of inter-connection flow rates within the system. Numerical experiments suggest that individual CSTRs in networks are capable of hosting only a single dominant species, while other competing species may be present only in trace quantities ( Birol et al., 2002 ). Consequently, if the control objective calls for one species to be replaced with another, a nonlinear control scheme must be used. For a single CSTR with competing autocatalytic species, one strategy may be to modify the reactor residence such that the undesirable species is washed out of the system, and then set to an appropriate value that is favorable to the existence of the desired species ( Chaivorapoj et al., 2003 ). There is usually more than one strategy to achieve such control objectives. An ABS provides the flexibility to implement multiple control strategies in local agents and coordinate their local strategies through communication between agents.

In all case studies presented, the individual reactors in the network are operated at constant volume, thus, constraint equa-tions are formulated on the reactor flow rates to ensure that material is conserved. The reactor flow inputs include the reactor feed and the interconnection flows from the neighboring reactors. Outflow rates from each reactor include the interaction outflows to neighboring reactors as well as the process outflow stream. The constraints include a lower bound such that all flow rates are non-negative and an upper bound that ensures the equality of total inflow and total outflow. The implication for a controller that manipulates interconnection flow rates is that the total outflow surplus (the reactor drain) must be checked before the control move is permitted. If the reactor drain is 0 and the controller tries to increase one of the interconnection outflow rates, then other outflow rates must be decreased accordingly to maintain constant volume.

The ordinary differential equations that describe the autoca-talytic reactions in each CSTR are solved numerically using
CVODE libraries ( Cohen and Hindmarsh, 1994 ), whereas all the variables are made dimensionless. The solver code is written in C and linked to Repast via the Java Native Interface (JNI). The layout is shown in Fig. 3 . 3. Perceptron-based learning for grade transition control
To produce multiple grades of a product, the spatial config-uration of the product species residing in the reactor network should be changed. The desired grade is achieved by changing the connectivity of the network. To reach the objective, controller agents manipulate the flow rates in a coordinated manner.
Two alternative techniques can be used to develop coordina-tion mechanisms ( Cuena and Ossowski, 1994 ). The first is a centralized approach that relies on a special coordinator agent responsible for detecting interdependencies between the local agents X  activities at successive levels of abstraction. This approach is contrasted by a decentralized stance where no such special agent exists and local agents interact laterally. The agents are endowed with the knowledge to discover inconsistencies between their intended actions and interchange messages to mutually adopt their local decisions so as to converge on one or several sets of consistent local control plans. The former coordi-nation model leads to a hierarchical integration of control plans as determined by the upper level functions, while in the latter this integration emerges from agent interactions.

The method proposed focuses on the decentralized approach and generates an adaptive multi-agent based control framework for the supervision of a distributed chemical manufacturing process. The decentralized approach has several advantages. The centralized approach may be less robust and yield catastrophic outcomes if the centralized controller is disabled or malfunctions, or if communication resources become insufficient in the case of large systems with many manipulated variables. The decentra-lized scheme enables adaptation to sustain plant operation, even when sections of the plant are incapacitated, since it does not rely on a central operation and can continue working while satisfying the local objectives.

The decentralized agent-based control framework proposed consists of a spatial reconfiguration technique by using a combi-nation of heuristics and perceptron learning to produce the targeted grade. The method will be referred to as perceptron-based grade transition (PGT). PGT is different from the previous work ( Tetiker et al., 2007 ) algorithmically. In the control method developed, there are as many local controller agents as the number of reactors. Controller agents are responsible for keeping the dominant species in the reactor under their control at the desired level by communicating with other local controller agents which are responsible for the reactors that are the immediate neighbors. The connections among the local controller agents are governed by the layout of the physical system. Each local controller in the proposed architecture manipulates the outgoing interaction flow rates from the reactor under its control. All local controller agents are connected to a global controller agent, which is responsible for keeping track of the global objective and sharing global information, such as the current grade with the local controllers. The global controller mainly acts as an information hub and objective tracker and scheduler.

The general approach used in this work relies on the fact that to change the dominant species in a reactor, some amount of the desired species must be transported to the target reactor from one of its immediate neighbor reactors. This results in the transported species becoming the dominant one because of its higher concentration than the previously dominant species.
The approach used in each local controller is a combination of heuristics and perceptron-based learning ( Alpaydin, 2004 ). Use of neural networks in the field of chemical engineering is not new. Early examples tend to use simple neural network structures ( Joseph and
Hanratty, 1993 ) and some later ones focus on more sophisticated architectures like stacked neural networks ( Tian et al., 2001 ). Mostly, that type of applications are aimed to learn the system parameters and they are operated in batch/offline manner. The difference of our approach is that since MADCA BS is connected to the plant or simulator at all times, the method acts online and fast. The distributed nature makes it act on different pa rtsoftheplantatthesametime.
The manipulated variables are the interconnection flow rates between reactors and feed flow rates to reactors. The controller agents use a conservative approach in changing the flow rates in order not to disturb the system more than necessary. The decision mechanism used is relying on perceptrons and it is basically a binary classifier to determine if an attack to a neighboring reactor is needed. The classifier is shown in Fig. 4 . The input layer consists of cells which indicate the number of neighbors with the same dominant species, the number of neighbors with a different dominant species and the closeness to the target grade in terms of the dominant species of the reactor itself. The information of (real or simulation) (real or simulation) closeness to target ratio the current grade and the global objective is obtained from the global controller agent. The decision given determines if the local controller agent should take an action, where the action is to attack a neighboring reactor by increasing the interconnection flow rate to that particular neighboring reactor. Since each local controller is only allowed to manipulate the outgoing interaction flows from the reactor under its control, they open the appro-priate one-way valve fully based on the attack decision. The weights in the classifier are initially assigned semi-randomly, that is, the interval of the weights are given in such a way that the decision will start to make sense at the beginning. In order to guarantee that, we use a training phase under normal operating conditions and use a weight range where no attacking occurs.
However, if data are not available, the initialization of the weights can happen in a completely random fashion, which will increase the time to reach the first objective, while learning occurs online.
The weights are updated after each time step, depending on the change of the spatial configuration, where a step is a large dimensionless time interval to give the system enough time to reach the steady state.

The perceptron mechanism itself does not need a more compli-cated layout of a neural network with hidden layers. In this case, it is basically the simplest building block of a neural network working as a binary classifier to come up with the decision of attacking a neighboring reactor or not. The decision relies on the values of the input cells and their weighted combination. The expected behavior is to approach the desired grade con servatively by not overshooting it or oscillating around it. The aim for the topological layout is to have combined clusters of the same type of dominant species in the network. This is the reason why the input cells are chosen to have the number of neighboring reactors with the same dominant species as the locally controlled reactor itself and also number of neighbor-ing reactors with different dominant species. The neighboring reactors are determined by the reactors to and from which there are interconnection flows. In our test cases we use von Neumann neighborhood ( Weisstein, 2010 ), hence we do not have any diagonal connections to the reactors. The decentralized system does not allow direct knowledge about the behavior of the other controllers, it only receives information from the neighboring controllers by communicating and it also knows the desired grade and the current grade after each step, so that updating of weights can occur.
The communication with the neighboring controllers is done by generating queries for the appropriate information required.
Mathematically, the perceptron classifier is basically a binary classifier that maps its input x , which is a real-valued vector of dimension J to an output value y . The output function is chosen as sigmoid function: y  X  sig  X  w T x t  X  w 0  X  X 
In Eq. (4), sig denotes sigmoid function, y is the output of the perceptron, w is a vector of real-valued weights, x denotes the J inputs, w 0 is the weight of the bias, where bias  X  1 and t indicates the time step. w 0 does not depend on any input value. The bias can be thought of as offsetting the activation function, or giving the output neuron a  X  X  X ase X  X  level of activity.
 The update is done using
D w t j  X  Z  X  r t y t  X  x t j  X  5  X  where D w t j is the change in weights, Z is the learning rate, chosen to be 0.4 in our simulations, r t is the desired output, y actual output, and x t j is the input. The values (except the learning rate Z ) are at time t .

If the local controller agent should act in the control policy indicated by the outcome of the binary classifier, the neighbor-ing reactor to which the interconnection flow rates should be increased is determined after communicating with other local agents that are controlling the neighboring reactors. The decision to select a neighboring reactor and to attack to it by changing the interconnection flow rates is based on the difference between closeness to the target grade and the difference between the dominant species concentrations in both attacking and the attacked reactors and on the number of neighboring reactors with the same dominant species as the attacked reactor. This last number shows how many reactors with the same dominant product species are neighboring the target reactor and identifies a cluster of the target species. This is needed in order to be conservative and give the system the least amount of perturbation, since this approach relies on the independent actions of the local controllers acting at the same time and it tries not to put any limits on their actions, as long as they are in agreement with the global objective. Since every action is in fact serving a global objective, a chosen action is assumed to be correct and although there is communication between controllers, one controller does not have the right to reject an action of the neighboring controller. This is not a problem since each outflow is manipulated by only one controller and hence, there are no conflicts. In our test cases, we observed that the steady state is reached very quickly and there is negligible or minimal amount of oscillations due to the simulta-neous and conservative actions of the controllers. 4. Simulation results
The applications vary from minor configuration changes to satisfy the final product quality desired where a small number of units in the network is affected, to major product grade transition applications where the whole network is affected and the transi-tion trajectory to be followed is not apparent a priori. The control system is also resistant to disturbances and changes in the network size, such as multiple reactors becoming inoperable or are shut down for maintenance.

The first two cases are dedicated to the use of the algorithm to achieve a reactor configuration in number percentage. In these cases, we are aiming to change the number of reactors for each species produced. The configurations are in terms of number of reactors, not the overall concentration. These two mentioned cases are provided to test and compare the effectiveness of the proposed framework. Simulations are generated on a network that has 20 (4 5 grid) chemical reactors hosting three autocatalytic species competing with each other. The growth and death rate parameters for all species are chosen to be equal.

Initially all feed flow rates and all interconnection flow rates are uniform for all reactors. Initial species concentrations in the reactors are selected randomly. The network is simulated for some time, allowing each reactor to reach a steady state before the agent-based control system (ABCS) starts operating.
In Sections 4.1 and 4.2 the objective is to control the number of reactors only. Hence, the grade corresponds to the number of reactors. In the remaining sections, the grade is the overall distribution of concentrations in the network outflow. Both representations will be the same and given as  X  A : B : C  X  , where A , B and C denote the number of reactors with dominant species 1, 2 and 3 respectively for Sections 4.1 and 4.2. For the remaining sections, A , B and C denote the concentration percentages of species 1, 2 and 3 respectively of the total network outflow. 4.1. Case study: reconfiguration of the reactor network for grade transition
The first case study demonstrates reconfiguration of reactors using the decentralized ABCS. The initial network configuration is shown in Fig. 5 a. The objective is to reach a grade consisting of 20% of reactors producing species 1 (represented by red X  X ray), 30% of reactors producing species 2 (green X  X ight gray) and 50% of reactors producing species 3 (blue X  X ark gray) starting from a reactor configuration of 30% o f reactors producing species 1 (red X  X ray), 30% of reactors producing species 2 (green X  X ight gray) and 40% of reactors producing species 3 (blue X  X ark gray). The transition will be from 30:30:40 to 20:30:50. After the initiation of the ABCS, the system succeeds in reaching the desired grade as shown in Fig. 5 b. There are minimal oscillations in the transition grades, indicating that the disturbance to the network was minimal. 4.2. Case study: controlling the grade after some of the reactors shut down
The second case study illustrates the performance of the ABCS in case of multiple reactor shut down. The initial network configuration is given in Fig. 6 a. This case study is in combination with the previous one, since the simulation is running continu-ously after reaching the desired grade of 20:30:50. After the system has reached the steady state, half of the reactors are randomly shut down. The network configuration at that time is given in Fig. 6 b and the reactors that are shut down are shown in white (the id numbers of the reactors that are shut down are 4, 8, 12, 14 X 20). Since the ABCS is active all the time, the objective remains to maintain the grade of 20:30:50 while the initial configuration consists of 40:30:30. The ABCS succeeds in reaching the desired grade and the final network configuration after the global objective is met is shown in Fig. 6 c. There are minimal oscillations in the transition grades, which again suggests that the system is disturbed minimally.
 The concentration profiles in CSTR 5 and CSTR 6 are shown in
Fig. 7 a and b, respectively. These reactors are subject to bigger changes in the second case study because of the transitions they have to undergo in order to fulfill the objective of reaching the desired grade in the network. In these figures, black always shows the resource concentration. In Fig. 7 a, species 1 (red X  X ray) is dominant until time step 500, where the resource concentration starts to increase and species 1 concentration starts oscillating and then at around time step 900, species 1 completely dies out and species 3 (blue X  X ark gray) starts to dominate the reactor and resource concentration starts to drop. In
Fig. 7 b, species 1 is dominant until time step 700 when it starts to die out and the resource concentration starts increasing.
At around time step 950, species 2 (green X  X ight gray) starts to dominate the reactor and the resource concentration starts decreasing. The figures illustrate that after a reactor undergoes a change in the dominant species, its concentration remains stable with only minimal transient oscillations that attenuate over time.

In both case studies, different runs of the simulation with the same parameters may produce different final configurations because of the random values in initial species concentrations in the network of reactors. This behavior emerges from the stochastic nature of the model. The random variation in both the plant data and the controller algorithm initialization can give slightly different outcomes, although the objective is met at each run we performed.

Due to the stochastic and chaotic nature of the model, changes in the concentration profiles are expected to happen in different trials. The oscillations observed are bigger during the times when the ABCS is working towards a grade change and hence modifying the interconnections to change the dominant species in that particular reactor. After the switch to another species happens, the oscillations tend to fade out and the overall system comes to a steady state with the global objective reached. 4.3. Set-point tracking, following concentration grade
Simulations are done using a reactor network in 4 5 grid configuration with three species using same resource. There is one dominant species in each reactor. Different from the previous runs, the network grade here consists of the overall percentages of concentrations of the three species in all the reactors. Hence, the grade for species k is P N j  X  1 C k where N is the total number of reactors and C is the concentration. Results show set-point tracking (tracking the grade change) and performance evaluation of grade transition agents.

Decentralized grade transition agents organize the grades at the local level, using local interactions where they only have the neighborhood information and global objective to meet; they also have access to the information about the current grade. Table 1 shows the results. The starting configuration of each run is given in the second column and the results of PGT listed in column 3 match closely the objectives assigned.

At the end of all three runs, PGT is able to achieve each objective with minimal error. We also tested transitions, which make bigger shifts from current configuration. When the next grade objective is set as 80:10:10 starting from an initial config-uration of 20:20:60, PGT is still able to track the set-point and allocates 15 reactors to species 1 (red X  X ray), two reactors to species 2 (green X  X ight gray) and three reactors to species 3 (blue X  X ark gray), in clustered regions. 4.4. Disturbance rejection using PGT
PGT can be used for disturbance rejection as well. Grade transition agents organize local level interactions, controlling the global objective. In this scenario, the set-point is not changing upon demand as in the network grade tracking case study. Here, when the concentrations are drifting away from the set-point, the grade transition layout is trying to bring the system close to the network grade objective despite the drift.

Two big faults are affecting the system in overlapping time periods.

Fault 1: feed quality change affecting Reactor 10 between times 260 and 400.

Fault 2: feed quality change affecting Reactor 14 between times 320 and 450.

Each fault is big enough to change the dominant species in the reactor they affect. When they are individually acting on the system, the open-loop response is going from a network grade of 30:30:40 to 25:40:35. Fig. 8 a shows the initial configuration at time 260 at the beginning, whereas Fig. 8 b shows the open-loop response at time 520, after both disturbances are removed and the system has reached its steady state. The open-loop response shows that the dominant species is changed from species 1 (red X  X ray) to species 2 (green X  X ight gray) in reactor 10 and the dominant species is changed from species 3 (blue X  X ark gray) to species 2 in reactor 14. In this uncontrolled scenario the grade shifts from its desired value to another off-spec value.

Fig. 8 c shows the closed-loop response at time 475, after both major disturbances affected the system and are no longer in effect (the first disturbance removed at time 400, the second at time 450). The dominant species in each reactor remained the same, maintaining the grade concentration and the number of reactors as desired and preventing a shift of production in the reactors. The final configuration, 30.3:30.4:39.3, is close to the initial one. 4.5. Combined case of disturbance rejection and set-point tracking
In this case, the PGT is given the objective of sequential changes of the grade, while disturbances are in effect throughout the simulation. We have the following faults, where the first two and the last two faults overlap and the two sets are 100 time ticks apart:
Fault 1: feed quality change affecting Reactor 10 between times 120 and 620.

Fault 2: feed quality change affecting Reactor 14 between times 180 and 680.

Fault 3: feed quality change affecting Reactor 10 between times 780 and 1280.

Fault 4: feed quality change affecting Reactor 14 between times 840 and 1340.

Table 2 gives the details of objectives, the starting times and the times for PGT staying active for that objective. A counter is used to check steady state. Steady state is declared if the value remains in range for at least 40 successive time intervals. Active times count for PGT include this waiting period.

The first two objectives do not change the layout of the reactors ( Fig. 9 a), whereas the objective of 80:10:10 shifts the layout ( Fig. 9 b). The next objective of 30:30:40 changes the layout to Fig. 9 c and the objective of 50:10:40 again retains the layout, however the last one (10:20:70) switches it to Fig. 9 d. As the timelines for the objectives show, at each transition, at least one disturbance is in effect (except the last transition, during which there is no disturbance). PGT successfully meets the control objectives despite the big overlapping disturbances. Fig. 10 provides all perceptron outputs (attacking decisions as 0 or 1 in the y -axis) for each of the grade transition controller vs. time ( x -axis) throughout the simulation. Fig. 11 provides the overall concentrations for three species. The vertical dashed red (gray) lines indicate the times when the grade transition objectives reached and the next objective is given to the PGT and the horizontal dotted red (gray) lines indicate the set-points for each species in the appropriate time interval (details are given in Table 2 ).

The perceptrons can have some oscillatory behavior arising from the fact that the controller has no need for continuous modification in the flow rates because either the transition is a small shift in the grade or the objective is set-point tracking. For larger grade shifts, they keep their decision about modification of the flow rates for a longer period of time because bigger changes require a longer time for manipulation. PGT keeps the reactor configuration as close as possible to the initial configuration, while performing shifts from one grade to another one. This policy sometimes yields inverse responses at the start of the transition phase, but the system quickly recovers and approaches the desired grade. Radical grade transitions cause a change in the layout of the reactors with respect to their dominant produced species, however, PGT keeps such changes at a minimum with again minimal disturbances. 5. Conclusions and perspectives
The decentralized PGT control framework proposed gives the ability to control reconfiguration of chemical reactor networks. Local controller agents have learning and decision-making capability, which results from the combined implementation of heuristics and perceptrons. Each local controller agent is responsible for one reactor and is in communication with the local controller agents of neighboring reactors. They also communicate with the global controller agent to check the closeness to the global objective and whether it is met. The control system developed is able to reconfigure the reactor network intelligently for a grade transition in process operation and can maintain the desired production grade after some reactors are randomly shut down. The PGT can also be used for simultaneously tracking the grades and rejecting disturbances.

The proposed method can be of use in other types of chemical manufacturing processes such as polymerization reactor networks ( Demirel et al., 2008 ) and other complex systems such as gas supply and distribution in pipelines and gas networks ( Shamshirband et al., 2010 ), traffic management systems ( Wang, 2005; Logi and Ritchie, 2002 ) and modeling society of transporta-tion companies with dynamically generated orders satisfying cost and time constraints ( Fischer et al., 1995 ).
 Acknowledgments This material is based on work supported by the National
Science Foundation under Grant No. CTS-0325378 of the ITR program.
 References
