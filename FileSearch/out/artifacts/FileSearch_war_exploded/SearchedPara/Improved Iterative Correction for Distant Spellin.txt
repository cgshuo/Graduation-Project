 A speller is an essential part of any program as-sociated with text input and processing  X  e-mail system, search engine, browser, form editor etc. To detect and correct spelling errors, the state of the art spelling correction systems use the noisy channel approach (Kernighan et al., 1990; Mays et al., 1991; Brill and Moore, 2000). Its models are usually trained on large corpora and provide high effectiveness in correction of typical errors (most of which consist of 1-2 wrong characters per word), but does not work well for complex (multi-character) and infrequent errors.

In this paper, we improved effectiveness of the noisy channel for the correction of com-plex errors. In most cases, these are cogni-tive errors in loan words ( folsvagen  X  volkswa-gen ), names of drugs ( vobemzin  X  wobenzym ), names of brands ( scatcher  X  skechers ), scientific terms ( heksagidron  X  hexahedron ) and last names ( Shwartzneger  X  Schwarzenegger ). In all these cases, the misspelled word contains many errors and the corresponding error model penalty cannot be compensated by the LM weight of its proper form. As a result, either the misspelled word it-self, or the other (less complicated, more frequent) misspelling of the same word wins the likelihood race.

To compensate for this defect of the noisy chan-nel, the iterative approach (Cucerzan and Brill, 2004) is typically used. The search for the best variant is repeated several times, what allows cor-recting rather complex errors, but does not com-pletely solve the problem of falling into local min-ima. To overcome this issue we suggest to con-sider more correction hypotheses. For this pur-pose we used a method based on the simulated annealing algorithm. We experimentally demon-strate that the proposed method outperforms the baseline noisy channel and iterative spellers.
Many authors employ machine learning to build rankers that compensate for the drawbacks of the noisy channel model: (Whitelaw et al., 2009; Gao et al., 2010). These techniques can be combined with the proposed method by replacing posterior probability of single correction in our method with an estimate obtained via discriminative training method.

In our work, we focus on isolated word-error correction (Kukich, 1992), which, in a sense, is a harder task, than multi-word correction, because there is no context available for misspelled words. For experiments we used single-word queries to a commercial search engine. 2.1 Noisy channel spelling correction Noisy channel is a probabilistic model that defines posterior probability P ( q 0 | q 1 ) of q 0 being the in-tended word, given the observed word q 1 ; for such model, the optimal decision rule  X  is the follow-ing: where P LM is the source (language) model, and P dist is the error model. Given P ( q 0 | q 1 ) defined, to correct the word q 1 we could iterate through all ever-observed words, and choose the one, that maximizes the posterior probability. However, the practical considerations demand that we do not rank the whole list of words, but instead choose between a limited number of hypotheses h ,...,h K : 1. Given q 1 , generate a set of hypotheses 2. Choose the hypothesis h k that maximizes If hypotheses constitute a major part of the poste-rior probability mass, it is highly unlikely that the intended word is not among them. 2.2 Baseline speller setup In baseline speller we use a substring-based error model P dist ( q 0  X  q 1 ) described in (Brill and Moore, 2000), the error model training method and the hypotheses generator are similar to (Duan and Hsu, 2011).

For building language ( P LM 0 ) and error ( P dist 0 ) models, we use words collected from the 6-months query log of a commercial search engine.

Hypotheses generator is based on A* beam search in a trie of words, and yields K hy-potheses h k , for which the noisy channel scores P dist ( h k  X  q 1 ) P LM ( h k ) are highest possible. Hypotheses generator has high K-best recall (see Section 4.2)  X  in 91.8% cases the correct hy-pothesis is found when K = 30 , which confirms the assumption about covering almost all posterior probability mass (see Equation 2). While choosing arg max of the posterior probabil-ity is an optimal decision rule in theory, in practice it might not be optimal, due to limitations of the language and error modeling. For example, vobe-mzin is corrected to more frequent misspelling vobenzin (instead of correct form wobenzym ) by the noisy channel, because P dist ( vobemzin  X  wobenzym ) is too low (see Table 1).

There have been attempts (Cucerzan and Brill, 2004) to apply other rules, which would over-come limitations of language and error models with compensating changes described further. vobenzin 2.289 31.75 34.04 wobenzym 12.52 26.02 38.54 Table 1: Noisy-channel scores for two corrections of vobemzin 3.1 Iterative correction Iterative spelling correction with E iterations uses standard noisy-channel to correct the query q re-peatedly E times. It is motivated by the assump-tion, that we are more likely to successfully correct the query if we take several short steps instead of one big step (Cucerzan and Brill, 2004) .

Iterative correction is hill climbing in the space of possible corrections: on each iteration we make a transition to the best point in the neighbourhood, i.e. to correction, that has maximal posterior prob-ability P ( c | q ) . As any local search method, itera-tive correction is prone to local minima, stopping before reaching the correct word. 3.2 Stochastic iterative correction A common method of avoiding local minima in optimization is the simulated annealing algorithm, key ideas from which can be adapted for spelling correction task. In this section we propose such an adaptation. Consider: we do not always transition deterministically to the next best correction, but instead transition randomly to a (potentially any ) correction with transition probability being equal rection we transition from, c i is the correction we transition to, and P (  X | X  ) is defined by Equation 1. Iterative correction then turns into a random walk : we start at word c 0 = q and stop after E ran-dom steps at some word c E , which becomes our answer.

To turn random walk into deterministic spelling correction algorithm, we de-randomize it, using the following transformation. Described random walk defines, for each word w , a probability P ( c E = w | q ) of ending up in w after starting a walk from the initial query q . With that probability defined, our correction algorithm is the following: given query q , pick c = arg max c correction.

Probability of getting from c 0 = q to some c
E = c is a sum, over all possible paths, of prob-abilities of getting from q to c via specific path q = c 0  X  c 1  X  ...  X  c E  X  1  X  c E = c : where W is the set of all possible words, and P observe ( w ) is the probability of observing w as a query in the noisy-channel model.

Example: if we start a random walk from vobe-mzin and make 3 steps, we most probably will end up in the correct form wobenzym with P = 0 . 361 . A few of the most probable random walk paths are shown in Table 2. Note, that despite the fact that most probable path does not lead to the cor-rect word, many other paths to wobenzym sum up to 0.361, which is greater than probability of any other word. Also note, that the method works only because multiple misspellings of the same word are presented in our model; for related research see (Choudhury et al., 2007). Table 2: Most probable random walk paths start-ing from c 0 = q = vobemzin (the correct form is in bold).

Also note, that while Equation 3 uses noisy-channel posteriors, the method can use an arbitrary discriminative model, for example the one from (Gao et al., 2010), and benefit from a more accu-rate posterior estimate. 3.3 Additional heuristics This section describes some common heuristic im-provements, that, where possible, were applied both to the baseline methods and to the proposed algorithm.

Basic building block of every mentioned algo-rithm is one-step noisy-channel correction. Each basic correction proceeds as described in Sec-tion 2.1: a small number of hypotheses h 1 ,...,h K is generated for the query q , hypotheses are scored, and scores are recomputed into normalized pos-terior probabilities (see Equation 5). Posterior probabilities are then either used to pick the best correction (in baseline and simple iterative cor-rection), or are accumulated to later compute the score defined by Equation 3. A standard log-linear weighing trick was ap-plied to noisy-channel model components, see e.g. (Whitelaw et al., 2009).  X  is the parameter that controls the trade-off between precision and recall (see Section 4.2) by emphasizing the importance of either the high frequency of the correction or its proximity to the query.

We have also found, that resulting posterior probabilities emphasize the best hypothesis too much: best hypothesis gets almost all probability mass and other hypotheses get none. To compen-sate for that, posteriors were smoothed by raising each probability to some power  X  &lt; 1 and re-normalizing them afterward: In a sense,  X  is like temperature parameter in sim-ulated annealing  X  it controls the entropy of the walk and the final probability distribution. Unlike in simulated annealing, we fix  X  for all iterations of the algorithm.

Finally, if posterior probability of the best hy-pothesis was lower than threshold  X  , then the orig-inal query q was used as the spell-checker output. (Posterior is defined by Equation 6 for the baseline and simple iterative methods and by Equations 3 and 6 for the proposed method). Parameter  X  con-trols precision/recall trade-off (as well as  X  men-tioned above). 4.1 Data To evaluate the proposed algorithm we have col-lected two datasets. Both datasets were randomly sampled from single-word user queries from the 1-week query log of a commercial search en-gine. We annotated them with the help of pro-fessional analyst. The difference between datasets is that one of them contained only queries with low search performance: for which the number of documents retrieved by the search engine was less than a fixed threshold (we will address it as the  X  X ard X  dataset), while the other dataset had no such restrictions (we will call it  X  X ommon X ). Dataset statistics are shown in Table 3.

Increased average error model score and er-ror rate of  X  X ommon X  dataset compared to  X  X ard X  shows, that we have indeed managed to collect hard-to-correct queries in the  X  X ard X  dataset. 4.2 Experimental results First of all, we evaluated the recall of hypothe-ses generator using K-best recall  X  the number of correct spelling corrections for misspelled queries among K hypotheses divided by the total number of misspelled queries in the test set. Resulting re-call with K = 30 is 91.8% on  X  X ard X  and 98.6% on  X  X ommon X .

Next, three spelling correction methods were tested: noisy channel, iterative correction and our method (stochastic iterative correction).

For evaluation of spelling correction quality, we use the following metrics:  X  Precision : The number of correct spelling  X  Recall : The number of correct spelling cor-For hypotheses generator, K = 30 was fixed: re-call of 91.8% was considered big enough. Pre-cision/recall tradeoff parameters  X  and  X  (they are applicable to each method, including baseline) erative and our method) and  X  (just our method) were iterated by the grid (2 , 3 , 4 , 5 , 7 , 10)  X  (0 . 1 , 0 . 15 ,... 1 . 0) ; for each set of parameters, pre-cision and recall were measured on both datasets. Pareto frontiers for precision and recall are shown in Figures 1 and 2.
 Figure 1: Precision/recall Pareto frontiers on  X  X ard X  dataset Figure 2: Precision/recall Pareto frontiers on  X  X ommon X  dataset
We were not able to reproduce superior perfor-mance of the iterative method over the noisy chan-nel, reported by (Cucerzan and Brill, 2004). Sup-posedly, it is because the iterative method bene-fits primarily from the sequential application of split/join operations altering query decomposition into words; since we are considering only one-word queries, such decomposition does not matter.
On the  X  X ard X  dataset the performance of the noisy channel and the iterative methods is infe-rior to our proposed method, see Figure 1. We tested all three methods on the  X  X ommon X  dataset as well to evaluate if our handling of hard cases affects the performance of our approach on the common cases of spelling error. Our method per-forms well on the common cases as well, as Fig-ure 2 shows. The performance comparison for the  X  X ommon X  dataset shows comparable perfor-mance for all considered methods.

Noisy channel and iterative methods X  frontiers are considerably inferior to the proposed method on  X  X ard X  dataset, which means that our method works better. The results on  X  X ommon X  dataset show, that the proposed method doesn X  X  work worse than baseline.

Next, we optimized parameters for each method and each dataset separately to achieve the highest F 1 measure. Results are shown in Tables 4 and 5. We can see, that, given the proper tuning, our method can work better on any dataset (but it can-not achieve the best performance on both datasets at once). See Tables 4 and 5 for details.
 Table 4: Best parameters and F 1 on  X  X ard X  dataset Table 5: Best parameters and F 1 on  X  X ommon X  dataset
Next, each parameter was separately iterated (by a coarser grid); initial parameters for each method were taken from Table 4. Such iteration serves two purposes: to show the influence of pa-rameters on algorithm performance, and to show differences between datasets: in such setup pa-rameters are virtually tuned using  X  X ard X  dataset and evaluated using  X  X ommon X  dataset. Results are shown in Table 6.

The proposed method is able to successfully correct distant spelling errors with edit distance of 3 characters (see Table 7).

However, if our method is applied to shorter and more frequent queries (as opposed to  X  X ard X  dataset), it tends to suggest frequent words as false-positive corrections (for example, grid is cor-rected to creed  X  Assassin X  X  Creed is popular video game). As can be seen in Table 5, in order to fix that, algorithm parameters need to be tuned more towards precision. In this paper we introduced the stochastic itera-tive correction method for spell check corrections. Our experimental evaluation showed that the pro-posed method improved the performance of popu-Table 6: Per-coordinate iteration of parameters from Table 4; per-method maximum is shown in italic, per-dataset in bold Table 7: Correction examples for the noisy chan-nel and the proposed method. lar spelling correction approach  X  the noisy chan-nel model  X  in the correction of difficult spelling errors. We showed how to eliminate the local min-ima issue of simulated annealing and proposed a technique to make our algorithm deterministic.
The experiments conducted on the specialized datasets have shown that our method significantly improves the performance of the correction of hard spelling errors (by 6.6% F 1 ) while maintain-ing good performance on common spelling errors.
In continuation of the work we are considering to expand the method to correct errors in multi-word queries, extend the method to work with dis-criminative models, and use a query performance prediction method, which tells for a query whether our algorithm needs to be applied.
