 In many real life applications, data from diver se source may be represented with differ-ent formats and stored in different geographical locations. The effective support of co-operative data management becomes an essen tial requirement for numerous distributed database applications, including GIS, E-Health and Remote Sensing. The main goal for the database middleware systems is to smoothly integrate data from multiple sources to facilitate efficient and effective information retrieval tasks. Such systems provide one or more integrated schemas, and able to transform from different sources to answer queries against this schema. The basic requirement of database middleware system includes, 1) Since data comes from many different servers, it might be able to access to a broad range of data sources transparently, 2) It should have sufficient query processing power to handle complex operations, and to compensate for the limitations of less sophisti-cated sources, and 3) Some transformation operations require that data from different sources is interrelated in a single query. It is to optimise and execute queries over di-verse data sources, communicates with wrappers for the various data sources involved in the query, and compensates for limitations of less sophisticated sources. In general, there are two kinds of transforming data: first, the wrappers need to map data from the source X  X  model to the middle-ware model, and second, middle-ware system for database integrates the data with the integrated schema.

Federated database systems and information integrated systems are the distinctive examples of database middleware systems. Now, some commercial and testing database middle-ware systems are available. The pr oblem they are trying to solve is that a group of decentralised users, which are connect ed by computer network, accomplish one spe-cific task cooperatively. The cooperative applications not only face the environments mentioned above, especially need the cooperation beyond systems. In other words, the database supported Computer Support Cooperative Work(CSCW) systems need to co-operate and intercommunicate with or without users X  intervention. CSCW users need to intercommunicate with each other. Although th e users can find the modification of data, it is very important to know the data is modifying, and alarm other users automatically after the modification is finished. Furthermore, the system should support that several users can modify the certain data at the sam e time. The ultimate goal of this cooperation is to automated data management. The relative middle-ware system should automati-cally collect data from underlying databases, analyse them, pick them up, and send the final result to user. During the process, unde rlying databases operate with each other for the same purpose. We call this as the cooperation of databases.

In this paper, we present an agent based architecture, call AgDBMS, for cooperative data management. Distinguished from previous approaches, our system seamlessly in-tegrates advanced agent technology to facilita te process of data source discovery, result integration, query customisation and performance monitoring with a layered structure. The architecture contains query specification and task definition tool, agent community and data access module and illustrates great flexi bility. In fact, based on the requirements of query tasks, AgDBMS can select agents with matching capabilities. The query tasks can be executed with relative agents which are dynamically cooperated by the system in order to provide the desirable results efficiently. Also, agents are not only used to encapsu-late data, but also advertise query specifica tion and search suitable data sources. In below study, we present the architecture and implementation detail of AgDBMS. Futhurmore, the comprehensive experimental results with scientific data demonstrate its advantage in flexibility, scalability, efficiency and effectiveness for wide ranges of queries.
The rest of the paper is organised as follows: Section 2 gives some coverage of re-lated work and background knowledge. Section 3 presents an the architecture of the AgDBMS and detail information for individual component. Section 4 describes the evaluation techniques and gives a detailed analysis of results from a suite of compre-hensive experiments over SEQUOIA 2000 Storage Benchmark. Finally, in Section 5, we conclude the paper with summarisation and indicates future directions for this re-search. Section 2.1 introduces preliminary knowledge about agent technology. Section 2.2 presents related techniques for data integration of heterogenous database systems. 2.1 Agent Technology Recently, agent technology has emerged as an important paradigm for managing, ac-cessing and organising various kinds of distributed applications. Agents are sophisti-cated software entities with a high degree of autonomy [16,17]. In general, it can oper-ate without human direction and interaction and be integrated into an existing applica-tion/framework in order to form new functionality or optimise the execution of existing functions according to predefined requireme nts. Furthermore, agents can communicate each other to cooperatively complete certain tasks.

In terms of agent structure, there is a lack of standard in the agent theory about what should be general components for a agent. H owever, at least one information attitude to maintain information a bout the environment and one pro-attitude to guide the ac-tions need to be included into an agent. The BDI model has been a classical template for many agent architectures. In the skeleton, an agent has three primary attitudes of Belief, Desire and Intention and they can represent the informational, motivational and deliberative states of the agent. For AgDBMS, JACK Intelligent Agents [4] was chosen as the foundation of current implementation. 2.2 Heterogeneous Data Integration The need for effective heterogeneous data integration is widely acknowledged in many applications with large amount of data currently spreading across the Internet in a wide variety of formats [14,15]. To develop the advance technique for effective integrating heterogeneous systems, a lot of research projects have been carried out to address trans-lation and semantic integration of the distinct data collections. Also, numerous systems have been proposed and developed to provide semantic brokering. Incorporating some heterogeneous information sources with multi-brokering has been implemented in the CORBA Trading Object Service [2]. In [3], agent based framework with syntactic brokering functions has been proposed. Recently, to address the problem of seman-tic representation, several data middleware systems have been developed. They include TSIMMIS [6], InfoMaster [7], and Informa tion Manifold [8]. Recently, Nodine etc [10] proposed InfoSleuth framework to support an agent based system for information re-trieval and discovery in dynamic and open environment.

On the other hand, some projects focus on the deployment of the application spe-cific functionality and efficient processing of queries with user defined operator. Haas etc. [11] developed a novel scheme to query data efficiently from various locations. In [12], Mayr etc. examined in how far known techniques for expensive server-site UDFs and techniques from distributed query processing apply. Based on the result, ef-ficient execution techniques are developed for client-site UDFs and optimisation algo-rithms for queries with such client-site ex tensions. More recently, Rodriguez-Martinez and Rossopoulos developed MOCHA system to support large scale of query over dis-tributed data sources. The system has been proved to scale well to large environments and a wide range of query types [9]. Boucelma etc. proposed an extension of MOCHA X  X  framework, which has been applied to GIS data [13]. In this section, we present an agent based c ooperative data management system. Section 3.1 gives a introduction of logic layout for the systems, and then rest sections illustrate detail information for individual components of AgDBMS. 3.1 The Logic Architecture The logical structure of AgDBMS system proposed to facilitate cooperative data man-agement in hetergenous distributed environm ent, is illustrated in Figure 1. The system utilises the composite structure and consis ts of three distinct components including: query specification and task definition tool , agent community and data access module. The main functionality of query specification and task definition tool is to provide a user friendly interface and assistance scheme to help user to define various kinds of query and task. Throughout the interface, users can input SQL statement or nature language like query. Users also can specify priority or various control parameters for different retrieval tasks.

The Agent community is a group of agents to provide supportive service for data query and source discovery process under multi database systems. There are three kinds of agents with various functionality in the system including integration agent, discovery agent and observation agent . Data access module provides fundamental approach for perform data acquisition and query optimisation. In this paper, we are interested in query processing. The use of agents to perform various retrieval is presented in the next sections. 3.2 Access Agent (ACA) An access agent performs tasks provided by th e process agents. In general, it contains numerous information including task identifi cation, which is port that access agent lis-tens, data format in its database and it capacity to complete task. Access agents also provide the mechanisms by which users an d other agents can retr ieve that data and expand the transformation of its database. Since a data is typical heterogeneous, the ac-cess agent must perform some schema and data transformation. We call the data model as Canonical/Common Data Model (CDM) for the AgDBMS which is also used to transmit data between agents. The schemas of individual databases are merged into the global schema via an agent registration step. First, agents model their data as CDM. Then, agents provide an interface definition that describes the behaviour of these data models. The interface is described with XML language, which is commonality and can be easily extended. Between the interface and modelling level, agents can control the property, type of the data and the relationship between them. Further, agents need to deal the concurrency control, the access cont rol and the cooperative control (together with other agents). For the relational dat abase, the generation of access agent can be implied automatically which make the writing of agent as easily as possible. 3.3 Integration Agent (IA) Integrate agent is used to gather data whic h is collected by access agents, It can divide, unite and converge information into one result. The format of similar data came from individual access agent may not same, e.g. dat e may be expressed in long format or short format, and so on. Furthermore, the data may be exactly same, partly same, similar, even conflicting. While the tasks like converting dates are probably straightforward, some tasks could be very complex, such as figuring out that two articles written by different authors say  X  X he same thing X . In AgDBMS, we are using relatively simple integration rules based on patterns. The main reason is that using integration rules can efficiently perform information processing and merging tasks. The generation of integration agents can be complicated and time-consuming, so we try to make the coding involved in them automatically. This will significantly facilitate the task of implementing a new agent. Integration agents can interactive with each other, that is to say, one integration agent can act as other integration agent X  X  data source. In order to exchange a great amount of data, we use cache to pick up the respond of integration agents. The cache in one agent can be refreshed by clock, user X  X  order and the agent automatically. 3.4 Discovery/Execution Agent (DEA) The Discovery/Execution agent (DEA) is responsible for converting user specification functionalities and detail information is as below,  X  User X  X  query task is assigned to the relevant access agents via DEA. This is done  X  DEA can manage the execution flow of the t asks according to the predefined spec- X  Once a task is assigned by an access agent, DEA agent is then initiated and moni-3.5 Observation Agent (OA) In networking and distributed environment, there are many factor to influence query process. The main functionality of observation agent (OA) is to guarantee success of data query procedure. It performs the monitoring and control of the execution of a given query at each local database selected by DEA. It also manages the execution of the tasks according to the CE rules (Conditi onal Execution rule) to avoid long waiting period and coordinates DEA and ACA to complete query task. It can enable, disable, suspend or resume the tasks according to the CE rules for a certain database. Also, the status of each task is reported back to user in real time. It allows users to make quick response to some emergency cases. All above procedures are done by sending messages to certain kind of type. The prototype architecture of AgDBMS, illustrated in Figure 2, has been fully imple-mented with Java and Oracle 9. Users can define and configure query tasks with specific parameters and input via web or GUI based int erface, which is provided by the system. The communication channel connecting various kind of agent is developed based on Java Share Data Toolkit (JSDT) [5]. In current implementation, three types of data storage format are considered and they include XML, pure text and relation data type. Access agent consists of three components. Th ey are listener/board caster, data wrapper and execution engine. The listener/boardcaster is used to listen query request and board-cast data information regularly to Observation Agent (OA) and Discovery/Execution Agent (DEA). Data wrapper allows system to tr ansform local data format into universal ones and IBM X  X  XMLWrapper is used as foundation of current implementation. Execu-tion engine is local query engine.

In addition to listener, the Observation A gent (OA) has three components: rule reg-istry, execution optimisation and performance monitor. The rule registry is used to store some predefine rule for data discovery and query. In current implementation, it is a database with Oracle 9. Performance monitor X  X  functionality is to watch and control quality of data retrieval process based on cond ition stored rule regis try. Execution opti-miser guarantees a query process results in optimised feedback and prompt response.
The Discovery/Execution Agent has two distinct parts: query engine and data source registry. Query engine allows users to execute query. Data source registry is meta data repository, which contains some essentia l information about each data base currently available including size of data, format of dat a, and other essential parameters for vari-ous data source. Those information is updated regularly using pooling scheme. The User Interaction Agent consists of Monitor Interface and Query Definition Tool. The Monitor Interface provides a set of user friendly visual toolkits to allow system X  X  user get status of query execution from Observation Agent. Query Definition Tool pro-vides users flexible environment to define query, check query result and customise query parameters. To illustrate the advantage of our system, a comprehensive experimental study has been carried out. In following sections, we firstly introduce test data and correspond-ing queries. Then, experimental setup in term of database configuration and evaluation metric is given in section 5.1. Finally in section 5.2 and 5.3, testing results illustrate the effectiveness, scalability and robustness of the system. 5.1 Experimental Setup and Benchmark The data and related queries from the SEQUOIA 2000 Benchmark [1] are used to test AgDBMS framework. In our test setup, data is stored in different serves spread in net-work. The specification of those schemas an d queries are shown in Table 1 and Table 2. The test set contains three relationships and five different queries which include some complicated operators. All test machines are running with Linux OS with 256 MB RAM and 500MHz Intel Pentium 4 CPU. The source of data is in three different formats, in-cluding relational database, ML and plain text.

The goal of the study is to clearly find out how effective is the framework and how different component influenced performance of the framework. To achieve this, special benchmark, called Query Response Time (QRT) were designed to measure effective-ness of the AgDBMS from various angles. QRT is the total response time for user to obtain result after sending query. It might include CPU, agent communication and I/O cost. 5.2 Effectiveness To study the performance for querying ove r single data source, Query 1, 2, 3 and 4 from Table 2 have been applied to measure the effect of aggregates, selection and projections in terms of the query time. The experimental result are illustrated in Figure 3(a). From the figure, We can easily see that query times in crease with the size of data volume. For example, query process related to table Ras ters takes more time to complete than other relations.

On the other hand, scalability is particularly important for data management system in distributed and heterogeneous envir onment, because such systems can potentially contain different number of agents for query and data discovery. retrieval. As the num-ber of agents increases, the performance of query may degrade due to communication cost between agents or agent communities. In this experiment, we compare the query response time (QRT) of the AgDBMS system with different number of agents.

For this set of experiments, we vary the number of agents in AgDBMS system from 5 to 50. Figure 3(b) shows experimental results. We can see that if the overhead relate to agent communication during data retrieval is an obstacle for systematic scalability, the QRT is expected to get rapidly worse as the number of agents increased. However, as the result in Figure 3(b) presents, the QRT tends to level off.

Expect above, we also investigate how AgDBMS X  X  perform under a large number of simultaneous queries. During the evaluation, we vary the number of query issued to the system in each second and compare query times. From the results summaries in Figure 4, We can conclude that for AgDBMS, there is no signification increasing in average query response time when frequency of query increases, e.g. in the case of Query 1, around 2.86 seconds needed by AgDBMS to handle 30 queries per second which is only 10% increasing for the case -5 queries per second. 5.3 Robustness The robustness is another important measurement for database middleware system. This is because the perfect networking or comm unication environment could not be always expected. In the experiment to test AgDBMS X  X  robustness against network failure, the number of agents in each community is set to be 20 and number of data source is 10. The query frequency was set to 5 per second and this experimental condition ensures the system operating in unstature state. In order to study the robustness of AgDBMS, certain number of communication channel between agents is randomly cut off and the query response time (QRT) is served as measurement. The number of failed channel used are 100, 200, 300, 400 and 500. The experimental result is shown in Figure 5. Intuitively, as the failure number goes up, we are more likely to have a longer query response time. However, we did observe the situation. Indeed, it is shown that AgDBMS is robust against communication channel distortion and there is no significant increasing in communication cost when substantial part o f channel is not available. This is because the agent based technology can provide more reliable query process and is capable to intelligently handle unexpected situation. 5.4 Scalability Scalability is particularly important for l arge middleware systems, because such sys-tems can potentially contain huge volume of data and information. As the number of data objects increases, the performance of a system may degrade due to noise and other factors. In this experiment, we make analytic study on system throughput and response time of the AgDBMS system using different sizes of data.

In the set of experiment, we measure how the AgDBMS can perform under different size of data and randomly pick 5MB, 10MB, 50MB, 100MB, 200MB from Raster data subset of SEQUOIA 2000 Benchmark. 20% of data are used for query. Figure 6 shows experimental results of the AgDBMs system and we can find AgDBMS is very robust against the volume of data. There is no significant throughput and response degeneration for larger dataset. This is because the AgD BMS uses agent based technique to find more suitable date source in a dynamic environment and this approach significantly improves response time and throughput of whole system. From above, we can see that AgDBMS emerges as a robust and effective middleware technique with superior scalability to accommodate large size of data. Modern database systems are often required to intelligent data process from differ-ent sources and with various formats. In this paper, we present a novel data oriented middle-ware solution, called AgDBMS, to th e problem of effective data management in distributed and heterogeneous environment. Comparing from previous approaches, advanced agent technology is smoothly integra ted into our system to facilitate process of data source discovery, result integration, query processing and performance monitor-ing. A set of extensive experiment has been carried out to study effectiveness, robustness and scalability of our proposed system. The result demonstrates its great advantage with real dataset.

There is a great deal of future research stemming from this paper. In the ongoing work, we plan to extend the test data to the ones from other domains. Also, current experimental result is obtained with four predefined query types. It is interesting to evaluate the framework with other kinds of queries. Furthermore, there are many places the AgDBMS performance will be able to be tuned in a real database environment. In particular, indexing and agent communication efficiency will be greatly increased if good heuristics are developed to determine when to dynamically change the parameter based on user query demand. Finally, imple mentation of different object types, how to distribute these throughout the database, and corresponding cost model needs to be investigated.

