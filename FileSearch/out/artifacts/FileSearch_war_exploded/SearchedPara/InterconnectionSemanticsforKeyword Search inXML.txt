 A framew ork for describing seman tic relationships among nodes in XML documen ts is presen ted. In con trast to earlier work, the XML documen ts may have ID references (i.e., they corresp ond to graphs and not just trees). A speci c inter-conne ction semantics in this framew ork can be de ned ex-plicitly or deriv ed automatically . The main adv antage of interconnection seman tics is the abilit y to pose queries on XML data in the style of keyw ord searc h. Sev eral meth-ods for automatically deriving interconnection seman tics are presen ted. The complexit y of the evaluation and the satis-abilit y problems under the deriv ed seman tics is analyzed. For man y imp ortan t cases, the complexit y is tractable and hence, the prop osed interconnection seman tics can be e-cien tly applied to real-w orld XML documen ts.
 H.3 [ Information Storage and Retriev al ]: Information Searc h and Retriev al; H.2 [ Database Managemen t ]: Lan-guages Algorithms Interconnection seman tics, keyw ord searc h, XML
XML facilitates the incorp oration of seman tic considera-tions into information-retriev al. The goal of this pap er is to investigate how the lab els (i.e., tags) of XML documen ts can be used for determining whether occurrences of keyw ords are The work of this author was supp orted by the Israel Science Foundation (Gran t No. 1032/05).
The work of these authors was supp orted by the Israel Sci-ence Foundation (Gran t No. 96/01).
 seman tically related. We are motiv ated by the need to de-velop techniques for keyw ord searc h that hide from the user the complexit y of the underneath documen t and, yet, tak e into accoun t the seman tic structure when ranking results. For example, if the keyw ord Harris is lab eled with Employee and the keyw ord Jones is lab eled with Manager , one migh t want to determine whether Jones is the manager of Harris. In most systems that incorp orate keyw ord searc h into rela-tional or XML data (e.g., [1, 3, 8, 9, 10]), the sole criterion is pro ximit y (e.g., Jones is deemed the manager of Harris if these keyw ords app ear in a small subtree of the given XML documen t). In [5], it is argued that in a tree documen t, the keyw ords are seman tically related if they app ear in a uniquely-lab eled subtree of the documen t. This approac h is extended in [4] by incorp orating information-retriev al tech-niques. In [17], the work of [4, 5] is impro ved by introducing an approac h that avoids some cases of incorrect results.
We generalize and impro ve all of the above work in two ways. First, we consider XML documen ts that form arbi-trary graphs, due to ID references. Earlier work [4, 5, 17] considered only trees, whic h are easier to deal with, since a tree documen t has only one minimal subtree that con tains a given set of nodes. Second, we prop ose sev eral di eren t seman tics to overcome the problem of wrong answ ers. Our approac h to solving this problem tak es the schema into ac-coun t and, consequen tly, can handle gracefully missing in-formation. In comparison, the solution of [17] ignores the schema and applies only to tree documen ts.
 We investigate the problem of seman tic relationships in XML documen ts from sev eral persp ectiv es. First, we pro-pose a framew ork that allo ws either users or creators of XML documen ts to de ne explicitly inter conne ction semantics for the purp ose of specifying how objects (i.e., elemen ts) are se-man tically related. Second, we explore various types of in-terconnection seman tics that can be deriv ed automatically . Third, we analyze the complexit y of two problems. One is the evaluation problem, that is, enumerating all the answ ers to a given query . The second is the satis abilit y problem, namely , testing whether some given objects are seman tically related. Algorithms for the latter problem can impro ve key-word searc h by incorp orating into ranking techniques a test of whether occurrences of keyw ords are seman tically related.
Our complexit y analysis considers two measures: data complexit y and query-and-data complexit y. Since queries are usually of a small size, data complexit y is commonly used. However, analyzing the complexit y under the assump-tion that the query has an unbounded size may lead to bet-ter, more ecien t algorithms; in particular, algorithms that 16.ID 14 19.Name generate quic kly the rst few answ ers|an imp ortan t feature in keyw ord searc h.

The main con tributions of this pap er are as follo ws. First, we give a wide spectrum of interconnection seman tics that apply to XML documen ts with ID references. In practi-cal terms, these interconnection seman tics di er in their ef-ciency and recall-precision tradeo . Second, we pro vide an exhaustiv e complexit y analysis, including algorithms for the tractable cases. We envision that these algorithms can be com bined with information-retriev al techniques to yield powerful systems for keyw ord searc h in XML documen ts.
A graph is a pair G = ( V; E ), where V is a set of nodes and E V V is a set of edges. A graph is either directed or undir ected. We alw ays denote an edge as ( v 1 ; v 2 ). If the edge is directed, then ( v 1 ; v 2 ) is an ordered pair; otherwise, it is an unordered pair (i.e., ( v 1 ; v 2 ) is the same as ( v
A rooted graph is a directed graph that has a designated node r , called the root, suc h that every node v is reac hable from r by a directed path.

We use two types of trees. A rooted tree is a rooted graph, suc h that for every node v , there is a unique directed path from the root to v . An undir ected tree is a connected undi-rected graph without cycles (and without a root). Note that when we say \tree," we sim ultaneously refer to both types.
G 0 = ( V 0 ; E 0 ) is a subgraph of G = ( V; E ), denoted G G , if V 0 V and E 0 E \ ( V 0 V 0 ). A rooted subgraph G of a rooted graph G need not have the same root as G . A rooted subtr ee is a special case of a rooted subgraph. We also consider undir ected subtr ees of rooted graphs by ignoring the directions of the edges.

If G 1 and G 2 are subgraphs of G , we use G 1 [ G 2 to denote the subgraph that consists of all the nodes and edges of either G 1 or G 2 .

A rooted tree (resp ectiv ely, undirected tree) T = ( V; E ) is reduc ed with resp ect to (abbr., w.r.t.) a subset U V if it has no prop er rooted subtree (resp ectiv ely, undirected subtree) that includes all the nodes of U .
An o-gr aph (and an o-tr ee ) has obje cts as nodes. An object has an obje ct identi er (abbr. oid) and is assigned a label and, possibly , a value. Figure 1 sho ws a rooted o-graph D where integers are used for oid's, eac h node has a lab el, and all the leaves have values. If o is an object, then l ( o ) denotes the lab el of o . Similarly , if O is a set of objects, then l ( O ) denotes the set f l ( o ) j o 2 O g . An o-tree is uniquely labeled if distinct objects do not have the same lab el.

An l-gr aph (and an l-tree ) has lab els as nodes. Figure 2 sho ws a rooted l-graph S 1 , two rooted l-trees C 1 and C an undirected l-tree C 3 . The l-trees C 1 and C 2 are reduced w.r.t. the set of lab els f Email ; Name g , and the l-tree C reduced w.r.t. f Employee ; Name g (and also w.r.t. some other sets of lab els, e.g., f Employee ; Name ; Maintains g ). Note that a lab el occurs (at most) once in an l-graph, but may have multiple occurrences in an o-graph.

A rooted o-graph D conforms to a rooted l-graph S if the follo wing two conditions hold: For example, the rooted o-graph D 1 of Figure 1 conforms to the rooted l-graph S 1 of Figure 2.

A rooted o-tree T is isomorphic to a rooted l-tree C if T is uniquely lab eled, the lab els of T are exactly the nodes in C , and T conforms to C . For example, the rooted subtree of D (Figure 1) that comprises objects 4, 5 and 6 is isomorphic to the rooted l-tree C 1 (Figure 2).

For undirected trees, the condition about the roots is re-moved from the de nition of isomorphism. That is, an undi-rected o-tree T is isomorphic to an undirected l-tree C if T is uniquely lab eled, the lab els of T are exactly the nodes in C , and for every edge ( o 1 ; o 2 ) of T , the edge ( l ( o in C .
A document is a rooted o-graph and a schema is a rooted l-graph. Figure 1 sho ws a documen t D 1 and Figure 2 sho ws a schema S 1 .
C Personal X  X nfo Email Figure 2: A schema S 1 , rooted l-trees C 1 and C 2 , and an undirected l-tree C 3
A documen t D may have a user-supplied schema. Al-ternativ ely, we can use the derive d schema of D , denoted S
D , that consists of the follo wing. The root l ( r ), where r is the root of D , the lab els of D as nodes, and all the edges is the minimal schema that D conforms to; that is, if D conforms to S , then S D is a rooted subgraph of S and both have the same root. As an example, the deriv ed schema for D 1 (Figure 1) is obtained from the schema S 1 (Figure 2) by remo ving the edge from the lab el Project to the lab el URL (since D 1 has no edge from a node lab eled with Project to a node lab eled with URL ).

In the remainder of this pap er, when we consider a doc-umen t D with a schema S , we implicitly assume that D conforms to S .
Informally , an interconnection seman tics is a collection P of queries. We refer to these queries as patterns and they will be formally de ned shortly . A set of nodes O , in a given doc-umen t D , is interconnected if it is in the result of applying some pattern of P to D . We follo w the principle that pat-terns of P should represen t only the basic seman tic relation-ships that exist in D , as opp osed to relationships that can be obtained from the basic ones by comp osition, additional pro cessing, etc. In the parlance of relational databases, it means two things. First, a pattern of P should not have self joins, e.g., it should not represen t the manager of the manager of an emplo yee. Second, a pattern of P should not join a pair of attributes in two distinct ways, e.g., the pat-tern could join an emplo yee and a manager by using either the relationship between emplo yees and pro ject managers or the relationship between emplo yees and departmen ts man-agers, but not by using both relationships. Translating these requiremen ts to documen ts means that a subgraph of a doc-umen t D represen ts a basic seman tic relationship if it is a uniquely lab eled subtree of D .

Formally , a rooted (resp ectiv ely, undir ected ) pattern is a pair p = ( L; C ), where L is a set of lab els and C is a rooted (resp ectiv ely, undirected) l-tree that is reduced w.r.t. L . Note that L includes (at least) all the leaves of C .
Intuitiv ely, a pattern describ es when objects having the lab els of L are seman tically related. For example, the rooted patterns ( f Name,Email g ; C 1 ) and ( f Name,Email g ; C C 1 and C 2 are sho wn in Figure 2, describ e when two objects lab eled with Name and Email are interconnected in the doc-umen t D 1 (sho wn in Figure 1).

Formally , let O be a set of objects app earing in a docu-men t D . A rooted (resp ectiv ely, undirected) pattern p = ( L; C ) inter conne cts O in D , denoted p j = D O , if l ( O ) = L and D has a rooted (resp ectiv ely, undirected) subtree T , suc h that T includes all the objects of O and is isomor-phic to C . Note that a pattern can only interconnect a set of uniquely-lab eled objects (and, furthermore, T must be uniquely lab eled).

As an example, consider again D 1 , C 1 and C 2 . The rooted pattern ( f Name,Email g ; C 1 ) interconnects the pair of objects (5 ; 6) and also the pair (19 ; 20), while the rooted pattern ( f Name,Email g ; C 2 ) interconnects the pair (11 ; 13).
Some relationships cannot be captured by any rooted pat-tern. For example, in documen t D 1 , object 19 and ob-ject 26 migh t be deemed meaningfully related, since they are the name of a manager and the emplo yee that main-tains the oce of that manager, resp ectiv ely. Yet, there is no uniquely-lab eled rooted subtree of D 1 that con tains both objects 19 and 26; therefore, these two objects are not interconnected by any rooted pattern. Ob jects 19 and 26, however, are interconnected by the undirected pattern ( f
Name,Employee g ; C 3 ), where C 3 is the undirected l-tree sho wn in Figure 2.

An inter conne ction semantics is a set P of patterns. We say that P is rooted (resp ectiv ely, undir ected ) if all its pat-terns are rooted (resp ectiv ely, undirected). In principle, an interconnection seman tics can also be mixe d, i.e., have both rooted and undirected patterns.

Let D be a documen t, O be a subset of the objects of D , and P be an interconnection seman tics. We say that O is P -inter conne cted , denoted P j = D O , if P con tains a pattern p , suc h that p j = D O .
In our framew ork, a query is a set L of lab els. Giv en a documen t D and an interconnection seman tics P , an answer to a query L is a set O of objects, suc h that l ( O ) = L and P j = D O . The evaluation problem is essen tially an enumer ation problem, that is, all the answ ers to a given query have to be generated successiv ely. The satis ability problem is that of deciding whether a given set O of objects is interconnected, i.e., whether P j = D O .

Usually , eciency of query evaluation is measured in terms of data complexity [20]; that is, the query is assumed to be of a xed size. The measure of query-and-data complexity [20] means that the query (as well as the documen t) has an un-bounded size. Consequen tly, the num ber of answ ers could be exp onen tial in the input size and therefore, the running time should tak e into consideration both the input size and the output size.

Three complexit y classes for enumeration problems are prop osed in [12]. Polynomial total time means that the run-ning time is polynomial in the com bined size of the input and the output. Incr emental polynomial time means that the time needed to generate the i th answ er, after the rst i 1 answ ers have already been pro duced, is polynomial in the com bined size of the input and the rst i 1 answ ers. The most ecien t notion is enumeration with polynomial delay , that is, the running time between the generation of two consecutiv e answ ers is polynomial in the input size.
In this pap er, we analyze the complexit y of both the eval-uation problem and the satis abilit y problem under the two measures men tioned above. Data complexit y means that the set O , in the satis abilit y problem, and the query L , in the evaluation problem, are of a xed size. Query-and-data complexit y means that the sizes of O and L are unbounded. Note that under data complexit y, if the satis abilit y prob-lem is in polynomial time, then so is the evaluation problem. Also note that the evaluation problem cannot be in polyno-mial total time if the non-emptiness problem is intractable, where the latter is the problem of deciding whether a given query has at least one answ er.

If the interconnection seman tics P is given explicitly , then it is part of the input. Since patterns are essen tially pro jec-tions of acyclic joins, the follo wing prop osition follo ws from the work of [21].

Proposition 3.1. Let P be an explicit inter conne ction semantics that is part of the input. The following results hold under query-and-data complexity. The satis ability problem is in polynomial time. The evaluation problem is in polyno-mial delay if P has (at most) one pattern for L ; otherwise, it is in incr emental polynomial time.
Expressing explicitly all the patterns of an interconnection seman tics is not alw ays con venien t or practical. As an al-ternativ e, we presen t sev eral interconnection seman tics that can be deriv ed automatically from the schema S of the given documen t D . These seman tics may dep end on the speci c schema S that is used for D . Note that S can be any schema that D conforms to, including the deriv ed schema S D .
There are two approac hes for solving the satis abilit y and the evaluation problems when the interconnection seman tics is deriv ed from the schema. One is to generate all the pat-terns that are relev ant to the set of lab els at hand, thereb y obtaining an explicit seman tics. This approac h is discussed in Section 5. The second approac h is to nd algorithms that can accept, as part of the input, the schema S rather than the deriv ed seman tics itself. In this section, we de ne the deriv ed interconnection seman tics and explore the second approac h. Speci cally , we give algorithms for the tractable cases. Lower bounds for the intractable cases are summa-rized in Section 7.
Giv en a documen t D conforming to a schema S , the inter-connection seman tics P r all ( S ) comprises all rooted patterns ( L; C ), suc h that L is a set of lab els app earing in S and C
Figure 3: Enumerating results under the seman tics P r all is a rooted subtree of S that is reduced w.r.t. L . It is easy to sho w that a set O of objects is P r all ( S )-in terconnected in D if and only if D has a uniquely-lab eled rooted subtree T that con tains O . Thus, determining interconnectivit y does not dep end on the speci c schema that is used for D ; that is, P r all ( S ) j = D O if and only if P r all ( S D ) j = sligh t abuse of notation, we may sometimes write P r all of P r all ( S ).

The interconnection seman tics P u all ( S ) is the set of all undi-rected patterns ( L; C ), suc h that L is a set of lab els ap-pearing in S and C is an undirected subtree of S that is reduced w.r.t. L . If P r all ( S ) j = D O , then P u The adv antage of P u all ( S ) is the abilit y to interconnect ob-jects even when they are not part of a rooted hierarc hy, as sho wn earlier for documen t D 1 using the undirected pattern ( f Name,Employee g ; C 3 ).
 We now sho w that the satis abilit y problem for P r all ( S in polynomial time under data complexit y if S D is acyclic. The algorithm of Figure 3 uses dynamic programming in order to decide whether P r all ( S D ) j = D O , for all sets O of objects in a given documen t D , suc h that j O j k . The output is given by the arra y I . Up on termination, the value of I [ O ] is the size of a minimal rooted subtree C S D , suc h Note that the values of I [ O ] could be used for ranking the results based on pro ximit y, since a smaller value means that the objects of O are included in a smaller subtree of D . Furthermore, the algorithm could be extended to tak e into accoun t an arbitrary weigh t function on the edges, thereb y enabling a wider range of ranking functions.

In Lines 3{5, I [ O ] is initialized either to 1 , if 1 &lt; j O j k , or to 0, if j O j = 1. In Lines 6{11, the objects of D are traversed according to a top ological order on their lab els, as implied by S D . Let o 1 ; : : : ; o n be the objects of D , sorted in that order. When object o i is visited, we consider all has a rep eated lab el, then I [ O [ f o i g ] is left unc hanged. Otherwise, I [ O [f o i g ] is assigned the minimal value among all I [ O [f o g ] + 1, where o is some paren t of o i in D . Note that all the paren ts of an object precede that object in the order o 1 ; : : : ; o n . Hence, for every paren t o of o of I [ O [f o g ] is already determined when o i is visited.
Theorem 4.1. Let D be a document with an acyclic S D , and let O be a set of obje cts of D , such that j O j k . If all ( S D ) j = D O , then the nal value of I [ O ] is the size of a minimal rooted subtr ee of D that contains O and is uniquely-labeled; otherwise, I [ O ] = 1 . The running time of P Arra y ( D; k ) is O ( mn k 1 ) , wher e n and m are the numb er of obje cts and edges of D , respectively.

Cor ollar y 4.2. For the semantics P r all ( S ) , the satis a-bility and the evaluation problems are solvable in polynomial time, under data complexity, if S D is acyclic.
The seman tics P r all and P u all occasionally interconnect ob-jects that are rather weakly related to eac h other. For ex-ample, in documen t D 1 (Figure 1), object 11 (the name of a pro ject) and object 8 (the URL of a manager) are P r all interconnected, where S 1 is given in Figure 2.

The above problem can be avoided by adopting the com-mon assumption (e.g., [2]) that meaningfully-related objects must be close to eac h other. Thus, for a given schema S , we de ne the notion of minimal patterns as follo ws. A rooted (resp ectiv ely, undirected) pattern p = ( L; C ) is minimal w.r.t. S if C is a minimal-size rooted (resp ectiv ely, undi-rected) subtree of S that includes all the lab els of L . Note that since C is minimal, it is also reduced w.r.t. L .
For example, consider S 1 , C 1 and C 2 from Figure 2. The pattern ( f Name,Email g ; C 1 ) is minimal w.r.t. S 1 , but the pattern ( f Name,Email g ; C 2 ) is not.
 Formally , given a schema S , the interconnection seman tics min ( S ) is the set of all rooted patterns that are minimal w.r.t. S . Note that de ning P r min ( S ) in terms of a schema S is not a limitation, because the deriv ed schema can alw ays be used if no schema is explicitly given.

The seman tics P r min ( S ) gracefully handles missing infor-mation. Consider, for example, documen t D 1 (Figure 1) and schema S 1 (Figure 2). The fact that S 1 has an edge from Project to URL implies that the URL of object 10 is missing from D 1 . This is realized by the seman tics P r that does not interconnect object 10 with any object lab eled with URL , because the only minimal rooted pattern for the set of lab els f Project,URL g is ( f Project,URL g ; C ), where C is the l-tree comprising the single edge from Project to URL
The interconnection seman tics P u min ( S ) is de ned simi-larly to P r min ( S ); that is, P u min ( S ) is the set of all undi-rected patterns that are minimal w.r.t. S . The seman tics min ( S ) and P u min ( S ) are incomparable; that is, for some documen ts and schemas, there are sets of objects that are min ( S )-in terconnected but not P u min ( S )-in terconnected and vice-v ersa. Unlik e P r all ( S ) and P u all ( S ), both P min ( S ) have a tractable data complexit y (ev en if S is cyclic).
Testing P r min ( S ) j = D O is done by computing the sizes n and n 2 of the minimal rooted subtree of D that con tains O and the minimal rooted subtree of S that con tains l ( O ), resp ectiv ely. It is easy to sho w that P r min ( S ) j = only if n 1 = n 2 . The num bers n 1 and n 2 can be computed by adapting a kno wn algorithm [6] for nding Steiner trees to directed graphs. Testing P u min ( S ) j = D O is similar. Theorem 4.3. P r min ( S ) j = D O and P u min ( S ) j = D teste d in O n s m s + n d m d + ( n s + n d ) 3 2 j O j + ( n time, wher e n s and m s are the numb er of labels and edges of S , respectively, and n d and m d are the numb er of obje cts and edges of D , respectively.
Cor ollar y 4.4. For the semantics P r min ( S ) and P u min the satis ability and the evaluation problems are solvable in polynomial time under data complexity.
The seman tics P r min ( S ) and P u min ( S ) may occasionally miss meaningfully related objects just because they are sligh tly too far away from eac h other. For example, consider doc-umen t D 1 (Figure 1), schema S 1 and the rooted l-trees C and C 2 (Figure 2). The seman tics P r min ( S 1 ) does not in-clude the pair (11 ; 13) as an answ er for the set of lab els f
Name,Email g , because the pattern ( f Name,Email g ; C 2 not minimal w.r.t. S 1 . Dealing with this problem requires a di eren t notion of minimal rooted subtrees|one that allo ws to de ne both ( f Name,Email g ; C 1 ) and ( f Name,Email as minimal patterns. This is done as follo ws.

Consider an acyclic schema S and a set of lab els L . A node l of S is a common anc estor of L in S if every lab el of L is reac hable from l via a directed path in S . A rooted pattern p = ( L; C ), where C is a rooted subtree of S , is structur ally minimal w.r.t. S if the follo wing holds. C does not have any node, other than the root, that is a common ancestor of L in S . For example, the rooted patterns ( f Name,Email g ; C and ( f Name,Email g ; C 2 ) are structurally minimal w.r.t. the schema S 1 (Figure 2); in fact, these are the only two rooted patterns for the set of lab els f Name,Email g that are struc-turally minimal w.r.t. S 1 .
 Giv en an acyclic schema S , the interconnection seman tics uca ( S ) (where uca stands for unique common anc estor ) is the set of all rooted patterns that are structurally minimal w.r.t. S . Note that this seman tics is only de ned for acyclic schemas, since it may yield rather strange results when the schema is cyclic. Clearly , the interconnection seman tics P does not have an analogous undirected seman tics.

For documen t D 1 (Figure 1) and schema S 1 (Figure 2), the answ ers to the query f Name,Email g , under the seman tics uca ( S 1 ), are the pairs (5 ; 6), (19 ; 20) and (11 ; 13).
To sho w that P r uca has a polynomial data complexit y, we reduce P r uca -interconnectivit y to P r all -interconnectivit y as fol-lows. Let D be a documen t that conforms to an acyclic schema S . Giv en an instance P r uca ( S ) j = D O of the satis -abilit y problem, let A be the set of all common ancestors of l ( O ) in S . For a lab el l 2 A , documen t D l is obtained from D by deleting all objects o , suc h that l ( o ) 2 A and l ( o ) 6 = l ; in addition, a new root may have to be added to D . It can be sho wn that P r uca ( S ) j = D O if and only if there is an l 2 A , suc h that P r all j = D l O . The follo wing is therefore a consequence of Theorem 4.1.

Cor ollar y 4.5. Let S be an acyclic schema. For the semantics P r uca ( S ) , the satis ability and the evaluation prob-lems are solvable in polynomial time under data complexity.
Figure 4 sho ws when an interconnection under one seman-tics is implied by an interconnection under another seman-tics. Note that the seman tics P r min ( S ), P u min ( S ) and P are pairwise incomparable. For tree documen ts, P r min ( S )-interconnectivit y is implied by P u min ( S )-in terconnectivit y. In a case study we conducted, P r uca ( S )-in terconnectivit y was usually implied by P r min ( S )-in terconnectivit y.
A special case is when the schema (but not necessarily the documen t) is a tree. Giv en a tree schema S and any subset L of the lab els of S , there is exactly one rooted subtree of S that is reduced w.r.t. L . Moreo ver, that rooted subtree coin-cides with the only undirected subtree of S that is reduced w.r.t. L . Therefore, for all the interconnection seman tics considered earlier in this section, the same set of patterns is deriv ed from S . This observ ation and Prop osition 3.1 lead to the follo wing.
 Cor ollar y 4.6. Let D be a document with a tree schema S . For a set O of an unb ounde d size, the following are equivalent and can be teste d in polynomial time: P r all O , P u all ( S ) j = D O , P r min ( S ) j = D O , P u min uca ( S ) j = D O . Mor eover, under query-and-data complexity, the evaluation problem is solvable with polynomial delay.
We conducted a case study of sev eral well-kno wn XML documen ts and their DTDs (e.g., RSS, DBLP , Mondial and Shak esp eare Pla ys) and concluded that the num ber of pat-terns, for a given set of lab els, is usually not large (although in some cases this num ber could be very large). This obser-vation has led us to an alternativ e approac h to solving the satis abilit y and the evaluation problems. In this approac h, we rst generate the patterns that corresp ond to the lab els of the given query (or the given objects) and then emplo y Prop osition 3.1. To mak e this approac h practical, we need ecien t algorithms for enumerating the relev ant patterns.
In general, we are given a documen t D that conforms to a schema S and a set of lab els L , where L is either a query or comprises the lab els of a given set of objects. The goal is to generate all the patterns of the form ( L; C ), suc h that ( L; C ) is in a given deriv ed interconnection seman tics P . a
G Figure 6: A graph G 1 and three top ologies 1 , 2 and 3
We start with the seman tics P r min . The problem at hand is to enumerate all the minimal-size rooted subtrees of S that con tain L ; these subtrees are kno wn as the Steiner trees of L . Traditionally , the Steiner-tree problem [11] is to nd one suc h tree. We sho w how to enumerate all Steiner trees of L in polynomial total time, assuming that L has a xed size.
The input is a weigh ted, directed graph G = ( V; E; w ) and a subset U V , where U is of a xed size (note that w is a positiv e weigh t function de ned on E ). First, we de ne a key notion as follo ws. A topology of U in G is a weigh ted, rooted tree = ( V ; E ; w ), suc h that (1) U V V , (2) every node v 2 V n U has at least two outgoing edges in , and (3) for all edges e = ( u; v ) 2 E , the weigh t w ( e ) is equal to the weigh t of a minimal path of G from u to v ; if there is no suc h path, then w ( e ) = 1 . The top ology of U is minimal if its weigh t is the minim um among all top ologies of U . For example, Figure 6 depicts a graph G 1 and three top ologies of f u; v; w g . The top ology 1 is minimal.
It can be sho wn that a top ology of U has at most 2 j U j 1 nodes. Therefore, all the top ologies of U in G can be found in polynomial time, since U has a xed size. The algorithm SteinerTrees ( G; U ) of Figure 5 enumerates the Steiner trees of U in G by considering eac h minimal top ology of U and replacing every edge e = ( u; v ) of with some minimal-weigh t path of G from u to v . The replacemen ts are done by calling Ma terializeTopology ( G; ). Note that, in Line 4, Ma terializeTopology calls itself recursiv ely, on a smaller top ology , i.e., a leaf v is remo ved from . For every mate-rialized top ology T 1 that is returned by the recursiv e call, Lines 7{9 perform all possible replacemen ts of the edge ( u; v ) with some minimal path T 2 . The result of eac h replacemen t is a Steiner tree T 1 [ T 2 , comprising the nodes and edges of T and T 2 , and it is added to T . Due to its simplicit y, we omit the description of the algorithm MinimalP aths ( G; u; v ) for enumerating minimal-w eigh t paths.

Theorem 5.1. The algorithm SteinerTrees ( G; U ) enu-mer ates all Steiner trees of U in G in polynomial total time.
The running time can be impro ved to polynomial dela y by using coroutines, as done in [16]. Essen tially , the same algorithm applies also to undirected graphs. Thus, for both min ( S ) and P u min ( S ), all patterns ( L; C ), for a given L , can be enumerated with polynomial dela y.

Patterns can be enumerated with polynomial dela y also tion algorithms describ ed in [16] and, in the case of P r com bining an algorithm of [16] with the reduction of P r to P r all ( S ) that is describ ed in Section 4.3. Note that the al-gorithms for enumerating patterns of P r all ( S ), P u all uca ( S ) do not assume that L has a xed size (in con trast to the enumeration algorithms for P r min ( S ) and P u min There are also algorithms that enumerate patterns of P r all all ( S ) and P r uca ( S ) in increasing weigh t and with polynomial dela y, pro vided that the size of L is xed. Therefore, if rank-ing is based on pro ximit y, one can use these algorithms in order to generate query results in a rank ed order. See [15] for more details, including the notion of enumerating patterns in an appr oximate order.

In summary , patterns can be enumerated quic kly if there are not too man y of them. In any case, since the enumer-ation is with polynomial dela y (in the schema size), the stream of enumerated patterns has a fast ow and the pat-terns can be used to compute query answ ers as soon as they are generated. Another adv antage is the abilit y to translate patterns to an XML query language, suc h as XQuery .
Interconnections seman tics have been applied thus far in an existen tial manner; that is, one evidence for interconnec-tion is sucien t. It is also possible to apply interconnec-tion seman tics univ ersally by requiring that there will be an evidence of interconnection in every context implied by the documen t. For example, in documen t D 1 (Figure 1), objects 5 and 13 are P r all -interconnected, because there is a rooted subtree of D 1 (with object 2 as its root) that is uniquely la-beled and reduced w.r.t. the set of objects f 5 ; 13 g . There is also a second rooted subtree (with object 1 as its root) that is reduced w.r.t. f 5 ; 13 g . In the con text of the second sub-tree, however, there is no evidence that objects 5 and 13 are all -interconnected, because that subtree has two objects, 2 and 15, that are lab eled with Department .
 A univ ersal application of an interconnection seman tics P dep ends on how we de ne the possible con texts of a set O of objects in a documen t D . Formally , contexts D ( O ) is a nonempt y set of subtrees of D that are reduced w.r.t. O (it is natural to consider only reduced subtrees as possible con texts, since they have no redundan t parts as far as the set O is concerned). The exact de nition of contexts D ( O ) may dep end on P . Intuitiv ely, O is univ ersally intercon-nected if every subtree in contexts D ( O ) is an evidence of interconnection. Formally , we say that O is universal ly P -inter conne cted in D , denoted P j = 8 ;D O , if for every subtree T 2 contexts D ( O ), there is a pattern ( l ( O ) ; C ) 2 P , suc h that T is isomorphic to C . Note that this de nition cannot be satis ed vacuously , since contexts D ( O ) is nonempt y.
In this section, we discuss univ ersal interconnectivit y un-der the seman tics P r all and P u all , and we use the follo wing de nition of contexts D ( O ). For a rooted (resp ectiv ely, undi-rected) interconnection seman tics P , we de ne contexts D to be the set of all rooted (resp ectiv ely, undirected) sub-trees of D that are reduced w.r.t. O . This de nition implies that O is univ ersally P r all -interconnected (resp ectiv ely, P interconnected) in D if and only if there is no rooted (resp ec-tively, undirected) subtree T of D , suc h that T is reduced w.r.t. O but not uniquely lab eled. Hence, P r all , P u all univ ersal versions are all equiv alen t on tree documen ts (but not on documen ts conforming to tree schemas).

Consider documen t D 1 of Figure 1 and let L be the set of lab els f Name,Email g . The set f (5 ; 6) ; (19 ; 20) ; (11 ; 13) g comprises all pairs of objects for L that are univ ersally P interconnected. This set also comprises all pairs of objects for L that are univ ersally P u all -interconnected in D 1 other example, objects 15 (a departmen t) and object 10 (a pro ject) are not univ ersally P r all -interconnected, because the pro ject belongs to more than one departmen t.
 The follo wing imp ortan t prop erty is instrumen tal in dev el-
TSEnumera tion ( D; L; P ) 1: let be the minimal top ology of L in S D 2: let ^ V be the set of all objects in D with lab els from 3: ^ E := f ( o 1 ; o 2 ) j o 1 ; o 2 2 ^ V ; ( l ( o 1 ) ; l ( o 4: let ^ G be the o-graph ( ^ V ; ^ E ) 5: let l be the root of 6: add to ^ G a new object r that has a new lab el 7: add to ^ G edges from r to all objects lab eled with l 8: let ^ D be the subgraph of ^ G that is induced by all the 9: enumerate all sets O s.t. l ( O ) = L and ( L; ) j =
Figure 7: Enumerating results under univ ersal seman tics oping ecien t algorithms for testing univ ersal interconnec-tivit y. A set of objects O is univ ersally P u all -interconnected if and only if every pair of objects from O is univ ersally all -interconnected. Interestingly , a similar result for uni-versal P r all -interconnectivit y holds only if the documen t is acyclic. The next theorem sho ws that for the interconnec-tion seman tics P r all and P u all , univ ersal interconnectivit y is more tractable than interconnectivit y.

Theorem 6.1. The satis ability problem is in polynomial time under query-and-data complexity in the following two cases. First, the semantics is universal P u all . Second, the semantics is universal P r all and the document is acyclic.
Obviously , the pro of uses the above prop erty. However, it also needs algorithms for testing univ ersal interconnectivit y under P r all and P u all when O has only two objects. The details of these algorithms are rather intricate and follo w from a close connection between our problems and the subgraph homeomorphism problem [7, 13, 19]. Interestingly , if S D is acyclic and D has n objects and m edges, then all the pairs of objects that are univ ersally P r all -interconnected can be found in O ( nm )-time. Thus, after this prepro cessing, all j = 8 ;D O can be tested in O ( j O j 2 ) time.
For documen ts that conform to tree schemas and for the univ ersal version of either P r all or P u all , all the answ ers to a query L can be enumerated with polynomial dela y. The al-gorithm TSEnumera tion ( D; L; P ) of Figure 7 enumerates all subsets O of the objects of D , suc h that l ( O ) = L and P j = 8 ;D O , where P is either P r all or P u all . It is assumed that the deriv ed schema S D is a tree. Furthermore, the lab els of L app ear in S D (otherwise, the result is empt y).
The algorithm is a reduction to the evaluation problem under ordinary (i.e., existen tial) P -interconnectivit y. The rst step of the algorithm is to create the minimal top ol-ogy of L in S D (based on the de nition of a top ology in Section 5). Note that since S D is a tree, the minimal top ol-ogy is unique and can be found ecien tly. Next, ^ G is the o-graph consisting of all objects o of D , suc h that the lab el of o app ears in . A pair of objects o 1 and o 2 is connected by an edge in ^ G if there is an edge between their lab els in and f o 1 ; o 2 g is univ ersally P -interconnected in D . The documen t ^ D is obtained from ^ G by adding a new root r with a new lab el l r . There are edges from r to all the ob-jects that have the root of as their lab el. If ^ D has objects that are not reac hable from the new root, then they are re-moved. Line 9 enumerates all subsets O of the objects of ^ D , suc h that l ( O ) = L and O is interconnected according to the pattern ( L; ).

In fact, the algorithm is correct not just for P r all and P but also for other interconnection seman tics, pro vided that some conditions are satis ed. Consequen tly, we get the fol-lowing theorem.

Theorem 6.2. Consider a query L and a document D , such that S D is a tree. Supp ose that P is either a rooted or an undir ected inter conne ction semantics that contains a pat-tern ( L; C ) , such that C S D . All the answers to the query L , under universal P -inter conne ctivity, can be enumer ated with polynomial delay.
Table 1 summarizes the complexit y of the satis abilit y problem for the di eren t types of deriv ed interconnection seman tics. The input consists of a schema S , a documen t D that conforms to S and a subset O of the objects of D . The top part of Table 1 gives the data complexit y and the bottom part|the query-and-data complexit y. Note that the problems that are in p 2 are also both NP-hard and coNP-hard (and in p 2 ). Pro ofs of the intractabilit y results are given in [14]. The tractable cases were discussed earlier.
For the deriv ed interconnection seman tics considered in this pap er, the data complexit y of the evaluation problem is similar to that of the corresp onding satis abilit y prob-lem. That is, when the satis abilit y problem is in polyno-mial time, then so is the corresp onding evaluation problem. When the satis abilit y problem is intractable, then so is the corresp onding non-emptiness problem, and both problems are in the same complexit y class.

If the schema is a tree, the query-and-data complexit y of the evaluation problem is in polynomial dela y. However, if the schema is not a tree, then the evaluation problem is intractable, under query-and-data complexit y, for all the types of interconnection seman tics.
We have presen ted a framew ork for deciding when objects of an XML documen t are seman tically related. Our frame-work includes a wide spectrum of interconnection seman tics that apply to XML documen ts with ID references. Earlier work [4, 5, 17] considered only tree documen ts. Another ad-vantage of our approac h is using the schema for deriving in-terconnection seman tics. Note that the deriv ed schema can be used if none is given explicitly . The solution prop osed in [17] for avoiding incorrect answ ers in tree documen ts is similar to our P r uca seman tics. However, in [17] only the documen t is tak en into accoun t and hence, their approac h cannot detect missing information. The work of [18] on au-tomatically inferring the structure of documen ts can also be mo deled in our framew ork, under the reasonable assump-tion that a subtree of a documen t indicates a meaningful relationship only if it is uniquely lab eled. Future work in-cludes exp erimen tation with our seman tics and algorithms, and incorp oration of information-retriev al techniques.
