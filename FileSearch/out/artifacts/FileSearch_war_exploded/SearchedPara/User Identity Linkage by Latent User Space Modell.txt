 User identity linkage across social platforms is an important problem of great research challenge and practical value. In real applications, the task often assumes an extra degree of difficulty by requiring linkage across multiple platforms. While pair-wise user linkage between two platforms, which has been the focus of most existing solutions, provides rea-sonably convincing linkage, the result depends by nature on the order of platform pairs in execution with no theoretical guarantee on its stability. In this paper, we explore a new concept of  X  Latent User Space  X  to more naturally model the relationship between the underlying real users and their ob-served projections onto the varied social platforms, such that the more similar the real users, the closer their profiles in the latent user space. We propose two effective algorithms, a batch model( ULink ) and an online model( ULink-On ), based on latent user space modelling. Two simple yet effective op-timization methods are used for optimizing objective func-tion: the first one based on the constrained concave-convex procedure(CCCP) and the second on accelerated proximal gradient. To our best knowledge, this is the first work to propose a unified framework to address the following two important aspects of the multi-platform user identity link-age problem  X  (I) the platform multiplicity and (II) on-line data generation. We present experimental evaluations on real-world data sets for not only traditional pairwise-platform linkage but also multi-platform linkage. The re-sults demonstrate the superiority of our proposed method over the state-of-the-art ones.
 User identity linkage; Latent User Space; Social network
The problem of User Identity Linkage (UIL), which aims to identify the accounts of the same user across different social platforms, has recently been attracting an increasing amount of attention and effort due to both the significant research challenges and the immense practical value of the problem. For example, in [11], Liu et al pointed out com-pleteness , consistency and continuity as three major bene-fits for user profiling from successful user identity linkage, an essential task in today X  X  social-data-enabled business intelli-gence. In industry, human-centric data fusion from various sources has become a key component for most leading data intelligence companies such as Palantir 1 . In a nutshell, the ability of integrating data across various platforms down to the granularity of individuals lies at the very core of the data-driven analytical paradigm for business and consumer insight.

However, the methodologies and approaches adopted by the existing solutions have so far fallen short of successfully addressing the following two essential characteristics of this problem.
To better address the two above-mentioned challenges, we introduce in this paper a new concept Latent User Space , to more naturally model the reality. The main idea is to take advantage of the fact that, after all, underlying all these https ://www.palantir.com/ different accounts that we try to link, there does exist this real user as a natural person, if these accounts indeed be-long to the same user. We call each such an underlying user a  X  X ser-in-itself X  , borrowing inspiration rooted in western Philosophy 2 . Every user-in-itself corresponds to a point in the latent user space. If a real user has accounts on mul-tiple social platforms, each account is deemed simply as a projection of the underlying  X  user-in-itself X , which we may call it the  X  user-as-observed X . More specifically, all that are observed from the  X  user-as-observed X  on a social platform, i.e., profile, behaviour data, contents, etc., are the projec-tion of the  X  X ser-in-itself X  constrained by the features and structures provided by the platform.

It follows from this model that when we project data from different platforms back to this space, the data points of the same user should be close to each other (ideally, they should be projected back to a single data point). In essence, the more different the two users, the greater the distance between their data points in the latent user space.
Figure 1 gives an illustration with results on real data. We show four real users each with corresponding accounts on two popular Chinese social platforms, Renren and Weibo, denoted as u i and v i , 1  X  i  X  4 (user profile images are blurred for privacy concerns). When their accounts from the two platforms are projected back to the underlying la-tent user space, it is clear that accounts belonging to the same user would project back to data points that are much closer to each other than data points from accounts belong-ing to different users (the values along the edges denote the distances between data points in the latent user space, e.g., the distance between u 1 and v 1 is 0.09). The details of dis-tance calculation in the latent user space are given in Section 4.

An important feature of our work is that, compared with previous work on UIL problem, our proposed Latent User Space frees the model from focusing on either the design of distance rules or building models depending on specific data forms, but rather on examining the intrinsic structure of user. While latent space has been introduced for analyz-ing dynamic social networks [19]. to our best knowledge, our work is the first to apply the latent user space for UIL problem across multiple social platforms.

Based on the Latent User Space concept, we propose ULink , a multi-platform linking user identity framework based on modeling latent user space, and ULink-On , an online frame-work for the same task. In ULink framework, we build the Latent User Space through projection matrix, and address this problem by jointly optimizing objective function with matching pair information, non-matching pair information and intra-platform relation constraints across different plat-forms. Inspired by Marginal Structured SVM, two efficient methods based on the concave-convex procedure (CCP) and accelerated proximal gradient(APG) are applied for solving the optimization problem. We further propose an online learning framework( ULink-On ) by considering constrain of batch model. We conduct empirical studies on real social network data to show the effectiveness and efficiency of our approach.
A no tion in the Philosophy of Immanuel Kant, a  X  X hing-in-itself X  is what a thing really is as different from how it appears to us  X  an object as it would appear to us if we did not have to approach it under the conditions of space and time. Figure 1: An illustration of latent user space. (a) Four users in Renren and Weibo data. (b) Latent user space
We summarize our key contributions as follows:
The rest of this paper is organised as follows: Section 2 examines the related work. We introduce the proposed framework in Section 4 and Section 5. The experimental evaluation is detailed in Section 6. We also give a discussion in Section 7 and conclude the paper in Section 8.
A clo sely-related problem long studied by database com-munity is that of Record Linkage , which aims to find records in a data set across different data sources that refer to the same entity. The concept of modern record linkage origi-nated from geneticist Howard Newcombe, who introduced odds ratios of frequencies and the decision rules for delin-eating matches and non-matches[15, 16]. A large number of algorithms, both supervised and unsupervised, have been developed in recent years to solve the record linkage prob-lem, which can be grouped mainly into two types: determin-istic linkage and probabilistic linkage. The former approach, which is often rule-based and strives for exact one-to-one matching of user name and other user attributes[17, 5], usu-ally works well for simple linkage problems or in the presence of special domain knowledge of the matching. Probabilistic linkage [18], on the other hand, assigns probabilistic weight-ing to records and accepts record pairs with sufficiently high weights as linked pairs. [4] provided the formal mathemat-ical foundations and some theoretical analysis. Despite the similarity with the record linkage problem, the UIL prob-lem that we consider in this paper distinguishes itself with unique characteristics of social data to make possible break-throughs previously unattainable.

The User Identity Linkage problem was initially formal-ized as connecting corresponding identities across commu-nities in [27], and was addressed with a web-search-based approach. Considering social network diversity and informa-tion asymmetry, many early works were proposed based on user information, including user-profile-based, user-generated-content-based and user-behavior-model-based. User-profile-based methods collect tagging information provided by users [7] or user profiles, e.g., user-name, description, location, etc. [24, 10, 29]. User-generated-content-based ones collect personal identifiable information from user personal reading records[1] or user-generated content. User-behavior-model-based methods [28] analyze behavior patterns and build fea-ture models from user names, language and writing styles. As most of these algorithms are often tailored to a particu-lar pattern, they face serious challenges in identifying cross-platform linkage if required data patterns are not available on all platforms.

More recent approaches have been proposed in both super-vised and unsupervised learning frameworks. [11] proposed a supervised multi-objective learning framework to link up user accounts of the same natural person across different social network platforms. [9] studied link prediction meth-ods for homogeneous networks based on massive unsuper-vised link indicators. To solve the collective link identifica-tion problem, [30] proposed a unified link prediction frame-work. [31] studied the multi-network link prediction prob-lem across partially aligned networks with a PU link pre-diction framework. However, Most existing solutions have focused on pair-wise user linkage between two platforms. Even though a few of them can handle multiple platforms, the computation complexity is too high for practical applica-tions and the models tend to depend on specific data forms, e.g., location and friendship.

Other relevant approaches include subspace learning-based approaches [25], an important learning framework in multi-view learning which aims to obtain a latent subspace shared by multiple views by assuming that the input views are gen-erated from this subspace. The structured support vector SYMBOL DESCRIPTION machine[23] is a machine learning algorithm that general-izes the Support Vector Machine (SVM) classifier. [21] de-veloped a method for structured margin classification, and an online framework was proposed by [14].

Before introducing the detail of our proposed framework, we will give the formal definitions of many important con-cepts.
We formulate our problem in this section by first intro-ducing the concept of latent user space as follows.
Definition 3.1. [Latent User Space (LUS)] We de-fine the Latent User Space (LUS) as a triple ( O , A , D ) where responding to a natural person, A = ( a 1 , a 2 , . . . , a the vector of d attributes by which every real user is repre-sents the distance function such that D ( o i , o j ) is the distance between any two users o i , o j  X  O .

We denote a set of e different social media platforms as S = { S 1 , S 2 , . . . , S e } , and for each S i  X  S , S i P i = { u 1 , u 2 , . . . , u n i } denotes the set of all user accounts to represent each user such that u j = ( f j 1 , f j 2 , . . . , f 1  X  j  X  n i .

We refer to every user x in LUS as a  X  X ser-in-itself X . For any platform S i , we refer to every user u on S i as a  X  X ser-as-observed X , which corresponds to a  X  X ser-in-itself X  x in LUS through the projection function of S i as defined below. Definition 3.2. [Projection Function] We denote as  X  i the projection function of S i such that for each o j  X  O in latent user space, we have  X  i ( o j ) =  X  i (( a j 1 , a u , u i k  X  P i . We also denote as  X   X  1 i the inverse function of  X  i such that  X   X  1 i ( X  i ( o )) = o holds for all o  X  O and 1  X  i  X  e .

Notice that in general, the projection function  X  i is un-known to us for a given social platform S i . The user iden-tity linkage problem defined for multiple platforms is given as follows. It is clear that definitions for the same problem for two platform case as in [11] is just a special case of this more general definition.

Definition 3.3. [Multi-platform User Identity Link-age (MUIL)] Given the latent user space ( O , A , D ) , a set of e social media platforms S = { S 1 , S 2 , . . . , S e S = ( P i , F i ) , the problem of Multi-platform User Identity Linkage (MUIL) is to find a binary function f such that for any given vector ~u of user accounts ~u = ( u 1 , u 2 , . . . , u P , 1  X  i  X  e f ( ~u ) =
The binary function f as in Definition 3.3 decides per-fectly if a set of user accounts on various social platforms correspond to the same real user. In reality, however, such an ideal function is hard to identify as both the latent user space and true projection functions  X  i are unknown. Our approach in this paper is therefore to turn the MUIL prob-lem into an optimization problem by the intuition that the more similar the two real users o a , o b in latent user space, the smaller the distance when they are projected back from the social platforms to the latent user space , i.e., D ( X   X  1  X  j ( X  j ( o b ))) for all 1  X  i, j  X  e . Hence the following opti-mization version of the MUIL problem.

Given the latent user space ( O , A , D ), a set of e social me-dia platforms S = { S 1 , S 2 , . . . , S e } where each S we solve the MUIL problem by finding a set of projection functions  X  i , 1  X  i  X  e such that for any given vector of user to the same real user, i.e.,  X  o  X  O such that u i =  X  i ( o ) for 1  X  i  X  e . We search for projection functions  X  i for the MUIL problem by minimizing following objective function: where u i and u j are same user on S i and S j .

Considering that fully aligned networks hardly exist in the real world, in this paper, we also adopt the assumption of partially aligned social platforms as proposed in [31]. Table 1 summarizes the notations in this paper.
Eqn.(1) is a direct way to model LUS to obtain inverse projection function  X   X  1 . We would further consider the user relation in both LUS and the original space in our proposed ULink framework.
 for any two social media platforms S i and S j ,  X  ( ) is an in-dex mapping function to represent  X  ( l ) th user in S j match-pairs(non-matching pairs). Following the definition 3.3, we aim to obtain all projection matrix w z for each inverse func-tion projection  X   X  1 given same user pairs and different user pairs. The proposed framework ULink is to minimize objec-tive function such that i, j  X  { 1 , 2 , , e } , i 6 = j ; l  X  { 1 , 2 , , n i k,  X  ( l )  X  { 1 , 2 , , n j } ,  X  ( l ) 6 = k ;  X   X  0 where, e represents the number of social platform,  X  is a slack variable.  X  ( ) is a flexible constant which is regarded as intra-platform relation in original space. B and C is the coefficient. Since the positive of the right side of constraint always make same user be close to each other, and different user be separated from each other in LUS. In particular, the greater the value of the difference between users in original space  X  ( ), the more apparent this relation.

Specifically in this work, we take the Euclidean distance as the distance function D . i.e., D ( X   X  1 i ( u i l ) ,  X  || u  X  ( ) throughout this work, i.e.,  X  ( u j k , u j  X  ( l )
For ease of exposition, we can formulate Eqn.(2) on two platforms. x and y are used for representing the user on two platforms such as u 1 and u 2 , x  X  R m 1 , y  X  R m 2 . As men-tioned above, { x i , y k } UL is the set of non-matching pairs, and { x i , y  X ( i ) } L is the set of matching pairs. The Eqn.(2) becomes: where M and N are the number of users on two platforms. Ideally, we should consider all non-matching pairs for mod-eling. However, this would result in exponential computa-tional cost with the number of non-matching pairs. There-fore, we select a limited number of non-matching pairs as experimental set in this paper. We also give an analysis and discuss some feasible solutions for this problem in Section 7.
For convenience, we combine variables w 1 , w 2 to W = w w x i  X  y  X ( i ) , non-matching pair vector d ul = x i  X  y k , d d can be rewritten as min s.t. || d ul W || 2 2  X  || d l W || 2 2  X  B X  ( y  X  ( i ) , y i  X  { 1 , 2 , ..., N } ,  X  ( i ) , k  X  { 1 , 2 , ..., M } ,  X 
It is a non-trivial task to solve Eqn.(4), because the con-strains of Eqn.(4) are no longer convex, and the minimiza-tion is not a convex problem. However, it is interesting to note that our objective function is very similar to the state-of-the-art framework structural SVMs[8], which is to learn the classifier w : wh ere, the structured input-output pairs ( x, y )  X  X  X  Y , X and Y are the spaces of the input and output variables,  X  ( ) is a loss function that quantifies the loss associated with predicting y when y is th e correct output value. Further-more,  X ( ) is a joint feature vector that describes the rela-tionship between input x and structured output y ,  X ( ) is regarded as regular term and  X  i is a slack variable. Inspired by this work, we adopt two simple yet effective strategies for handling this optimization problem. One is based on the con strained concave-convex procedure(CCCP) used in [20], and the second is a gradient descent algorithm(accelerated proximal gradient[22]). The details will be given as follows.
Smola et.al. [20] provide a strategy to use the constrained concave-convex procedure for constrained problems. The idea of the concave-convex procedure (CCP) can also be applied to the optimization problem of Eqn.(4).

Denote by f i , g j real-valued convex and differentiable func-tions on a vector space X for all i  X  { 0 , . . . , n } , and let c for i  X  { 1 , . . . , n } . Then, the Constrained Concave Convex Procedure is defined:
Denote by T n { f, x } ( x  X  ) the n th order Taylor expansion of f at location x , that is, T 1 { f, x } ( x  X  ) = f ( x )+ &lt; x x,  X  f ( x ) &gt; . Thus, the above optimization problem can be replaced by finding x t +1 as the solution to the convex opti-mization problem until the convergence of x t :
Note that [20] presents the proof of its convergence, and shows this algorithm can be customized to various cases to efficiently solve the optimization problem.

It is clear that Eqn.(4) satisfies the conditions of Con-strained CCP. we define: thus, each iteration requires solving the following optimiza-tion problem: W s.t. 2  X  d ul W t W T ( d ul ) T  X  d l W W T ( d l ) T  X  d  X  B X  ( y  X  ( i ) , y k )  X   X  ik ,  X  i, k ;  X  ( i ) 6 = k i  X  { 1 , 2 , ..., N } ,  X  ( i ) , k  X  { 1 , 2 , ..., M } ,  X 
Since Eqn.(6) is a convex optimization problem, a quadrat-ically constrained quadratic program (QCQP) can be used to solve it. We use CVX: Matlab Software for Disciplined Convex Programming[6] to optimize this function. In sum-mary, the sketch of the optimization process is described in Algorithm 1.
 Algorithm 1 ULink -CCP 1: initialize: W 0 with a random value , B , C -parameters 2: W t = W 0 3: repeat 4: find W t +1 as the solution of the optimization problem 5: until convergence of W t 6: Obtain w 1 and w 2 by W t +1 Another effective optimal algorithm Accelerated Proximal Grad ient (APG)[22] is used for solving our problem as fol-lows.

According to Eqn.(4), we define a symmetric positive semi-Thus, Eqn.(4) can be transformed to the following problem: s.t. ( d ul ) Q ( d ul ) T  X  ( d l ) Q ( d l ) T  X  B X  ( y
Note that any feasible(or optimal) solution to Eqn.(7) gives a feasible (or optimal) solution to Eqn.(4), and vice versa[32].

We can apply the accelerated proximal gradient (APG) method[12] to efficiently solve the primal form of Eqn.(7). Let p ( Q ) = 1 2 Tr( Q ) and f ( Q ) = C P i P k  X  ik .  X  { 0 , B X  ( y  X ( i ) , y k ) + ( d l ) Q ( d l ) T  X  ( d ul F ( Q ) = f ( Q ) + p ( Q ). The derivative of f is denoted by  X  f . [26] shows that  X  f is Lipschitz continuous on Q . For any symmetric positive semi-definite matrix Z , consider the following QP problem of F ( Q ) at Z : where  X  &gt; 0 is a constant and G = Z  X  1  X   X  f ( Z ). T o minimize A X  ( Q ; Z ) w.r.t. Q , it is reduced to following : Thus, take the derivative of the objective function, and get Q = G  X  1 2  X  I . No te that G can be decomposed by SVD as G = U GU T , and Q = U GU T  X  1 2  X  U U T , th en Q = U ( G  X  1 2  X  I ) U T . We use 0 to replace the negative entries in G  X  1 2  X  . Fin ally, the projection matrix W can be obtained by symmetric positive semi-definite matrix Q . Note that convergence criteria for this optimal solution was given in [12], which is a similar algorithm.
An intelligent linkage algorithm should be able to take advantage of the incremental data updates to continuously improve the linkage quality. In this section, we extend our batch framework( ULink ) to an online learning framework ( ULink-On ), and formalize our online framework( ULink-On ) based on Eqn.(7).

Note that we assume one matching pair ( x t , y t ) L and one non-matching pair ( x t , y  X  t ) UL would arrive at every time stamp t . As mentioned before, let d l t and d ul t be a pair of same user and a pair of different users at time t . We consider the objective function scale quadratically with  X  as follows:
Like Online Passive-Aggressive algorithm[3], the objec-tive function in Eqn.(10) attempts to keep the norm of the change to the parameter vector as small as possible on each update, while incorporating the assumption of LUS.
Before optimize Eqn.(10), we need to initialize a symmet-ric positive semi-definite matrix Q t . Thus, the Lagrangian of the optimization problem Eqn.(10) is defined as: where  X   X  0 is a Lagrange multiplier. Setting the partial derivatives of L with respect to the elements of Q to zero, this yields:
Setting the partial derivatives of the Lagrangian with re-spect to  X  and setting that partial derivative to zero : we c an rewrite Eqn(11) as,
Setting the derivative  X  of the above to zero, this yields where, As described above, the pseudo-code for this algorithm is given in Algorithm 2 Algorithm 2 ULink-On Input: d l t , d ul t -p airwise data; B , C -parameters Output: Q 1: initialize: Q t -symmetric positive semi-definite matrix 2: for t=1,2, do 3: Calculate Z and V use (13) 4: Calculate  X  use (12) 5: Calculate Q = Q t  X   X H , where H = ( d l t ) T ( d l 6: Q t = Q 7: end for
Note that it is often the case that more than two plat-for ms are involved for user linkage in the real applications. Yet, most previous works have focused on pair-wise user linkage problem. If a third platform is needed to link with the existing platforms, many algorithms may suffer from optimization problem. For proposed batch model (4) and online model (10), combining the alternative optimization technique into the CCP framework can be adopted to han-dle this problem, i.e., we optimize one variable w 1 by using the fixed other values w 3 and w 2 . One salient feature of our model is that we directly connect multiple platforms by considering diverse connection relationship, instead of integrating results from pair-wise connections. Note that the optimization problem has been turned into one with one variable optimization, such that many algorithms can be used to solve this problem. In a nutshell, the sketch of the optimization process for proposed model is easy to be adapted to multiple social platforms, as demonstrated in our experiments with three platforms in Section 6.2.1. Data Sets. We use the following four real data sets to assess the performance of all methods in comparison:
For Weibo and Renren, the ground-truth user linkage pairs across these two platforms are manually annotated. For the other three platforms (Renren, 36.cn, and Zhaopin), the ground-truth user linkage across the three platforms are pro-vided by our industrial partner who have access to the users X  real names and emails. A summary of the ground truth in-formation is given in Table 2.
 Table 2: A summary of cross-platform ground-truth user linkage.
 Competing Algorithms. To ev aluate the performance of ULink , we chose three state-of-the-art supervised classifiers  X  HYDRA[11], COSNET[33] and SVM[2]  X  and one non-parametric method of KNN, explained as follows: 1. HYDRA [11]:a large-scale social identity linkage frame-2. COSNET [33 ]: an algorithm that addresses the UIL 3. SVM [2]:a binary prediction on user pairs using sup-4. KNN : We use K-Nearest-Neighbor (KNN) as a non-5. ULink -CCP : our batch model with Constrained Con-6. ULink -APG : our batch model with Accelerated Prox-7. ULink-On : our online version of the ULink model. Experiment Settings. Table 3 lists the information used for each social platform. We adopt the bag-of-words model for raw text data processing, and replace with the value of 0 for missing attributes. All methods are executed in the MATLAB environment with the following implementations: LIBSVM package[2] is used for modeling SVM; The codes for both HYDRA and COSNET are developed based on the original papers. We employ K-Nearest-Neighbor as predic-tive classifier in LUS.

Experiments are conducted for both pairwise and multi-platform (e.g., three platforms) linkage settings. Each ex-periment is repeated for 10 times and both the mean and the standard variance of the performance are reported. The ground-truth linked pairs are divided into 5 folds every time, 4 folds being the training set and 1 fold being the testing set. In the training set and testing set, non-matching pairs are randomly sampled by setting two different ratios, 1:5 and 1:10, between the ground-truth matching pairs to non-matching pairs. It is easy to set parameter B by 10 n , n  X  Z . A guide of setting d is mentioned in section 7. The coef-ficient C in our algorithm, SVM and COSNET is selected via cross validation on the training data. For HYDRA, the parameter p , which determines how the model learned ap-proximates the Utopia solution, is set as 5 according to the original paper. The two parameters,  X  L and  X  M , which de-termine the relative importance of the problems in HYDRA framework from a decision maker X  X  perspective, are set by tuning on the validation set. For COSNET, the matching graph is generated with the relation between users. Evaluation Metrics. A well-established and widely-used evaluation metric in many real user linkage applications is to compare the top-k candidates for user linkage. In this paper, we set k = 5 and evaluate all methods by computing top-k precision for each test user as follows: wher e hit ( x ) represents the position of correct linked user in the returned top-k users. Then precision, represented by the symbol  X  hit-precision  X , is calculated on N test users by P N h ( x i ) N . Fo r example, given the result of top-k users { y 1, and h ( x ) = 1. Similarly, if y 4 hits the ground truth, hit ( x ) = 4, and h ( x ) = k  X  3 k . Fo r the multiple platforms, average  X  hit-precision  X  will be report.
We first evaluate our algorithm for the batch data setting in Subsection 6.2.1, including both the pair-wise platform case and multi-platform case, and then for the online data setting in Subsection 6.2.2. Pairwise Platform Case. This section illustrates the re-sults of the user linkage problem for pairwise platform case on four real-world data sets. Figure 2 and Figure 3 respec-tively show the performance on different ratio of unlinked pairs and linked pairs.
 Summary. Our proposed ULink models  X  both ULink -CCP and ULink -APG  X  have consistently produced higher hit-precision in all data sets than any other method, with noticeable leading advantage over the rest except for the  X  X eibo &amp; Renren X  case. Among other competing methods, COSNET and HYDRA, both of which are partially based on the structure of SVM each with their own advance, show better performance than SVM in some data sets. While KNN needs no training and runs faster, its performance fell behind others in all sdata sets.
 Detailed Analysis. truth matching pairs to non-matching pairs being 1:5). ground-truth matching pairs to non-matching pairs being 1:10). Figure 4: User linkage on three platforms. (a)Result of building model with different connection orders. A: Renren, B: 36.cn, C: Zhaopin. (b) Result of user linkage on three platforms. Multi-Platform Case. We demonstrate in this part why existing solutions suffer from inherent defects when solving the user identity linkage problem on more than two plat-forms, driving home the importance of a new framework like our proposed ULink . which more naturally models the fun-damental structure of the MUIL problem. Figure 4 shows the result of user identity linkage for multi-platform case, i.e., the three platforms of Renren, 36.cn and Zhaopin.
First of all, since existing solutions consider a pair of plat-forms at a time, one needs to derive the final user linkage result for the three platforms by integrating the results of (c) Renren &amp; Zhaopin two pairwise linkage, i.e., A  X  B and B  X  C . As shown in Figure 4 (a), for different orders of integrating the pairwise linkage, all the final results of each competing algorithm ex-hibits noticeable inconsistency. This clearly illustrates the limitation of trying to handle the multi-platform case with pairwise linkage approach, an worrying issue particularly im-portant when no theoretical analysis is known as yet on the stability of the final linkage results thus obtained. Notice that the problem only gets exacerbated as the number of platforms involved increases.

Furthermore, in Figure 4 (b), we take the best results among the different ordering for each method to compare with ULink -CCP. In fact, different connection orders has already been considered in our ULink framework, so that ULink -CCP still outperforms all the rest demonstrates that our model not only provides a stable linkage result unavail-able from previous methods, but also offers a better one by a model of greater generality. In particular, the hypoth-esis of structure consistency is hard to be all satisfied for multi-platform case, the performance of HYDRA is there-fore similar as SVM. COSNET is not compared due to the unavailability of necessary information for building match-ing graph.
In this part we show how our proposed ULink-On model is able to benefit from new linkage information and improve performance in the online data setting. We notice that this is the first time an online model is proposed for the user identity linkage problem, we therefore choose the state-of-the-art online learning algorithm Passive-Aggressive (PA)[3] for comparison 3 .

Figure 5 shows that ULink-On is able to take advantage of new input of user pairs from incoming data stream to update and improve model  X  the hit-precision of ULink-On increases continuously with the increasing number of linkage pairs. In contrast, the performance of PA-I does not exhibit similar improvement. We assume each incoming piece of data contains one linked pair and one unlinked pair, and verify algorithms on fixed test data set.

In a nutshell, two important characteristics of our pro-posed ULink-On make it particularly useful for the online setting of the MUIL problem where new data input are con-stantly generated on various social platforms: (I) It has the ability to update model with improved performance with incremental new data input, e.g., one linked pair and one
Th e code used is from Online Multiclass Prediction toolbox at http://www.cs.huji.ac.il/ shais/code/ unlinked pair; and (II) It does not need to store a large amount of data for model construction.
We discuss two further challenges of the MUIL problem, together with our solution in plan as future work. (1) One challenge for any learning algorithm to solve the MUIL problem is how to efficiently handle the exponentially large number of known non-matching user pairs. This issue can be addressed in our framework by applying the cutting plane method[8, 23] to the optimization problem  X  The constraints most violated are iteratively added to the set of cutting planes for model training until convergence. Alter-natively, the latest ensemble method EasyEnsemble [13] can be used to build Ensemble Latent User Space model, which will not ignore useful information by under-sampling, and obtain the final result by majority voting. (2) The curse of dimensionality has remained a challeng-ing issue hard to be dealt away in the MUIL problem. In our framework, LUS is built through projection matrix with dimensions adjustable according to measures such as the separability of users. In particular, we can use user simi-larity as a measure to guide the setup of dimensions for a given platform before model training: the higher the user similarity, the larger the value of dimension d .
This paper introduces the concept of Latent User Space to address in a unified ULink framework two important is-sues not yet sufficiently explored for the MUIL problem, i.e., platform multiplicity and online data generation. The proposed batch framework ULink based on LUS could be easily shifted into online framework ULink-On . Experiments on real-world data sets have demonstrated the effectiveness of both the proposed batch mode algorithm and the online version, with user linkage results outperforming the state-of-the-art existing methods for both pairwise-platform and multi-platform settings.

Our future work would further advance the efficiency and scalability of our proposed framework with improved per-formance, and explore theoretical foundation for the latent user space model. It is also in our interest to extend the idea of Latent User Space to unsupervised learning framework. This research was partially supported by NSFC (61333014, 61321491), 973 Program (2014CB340501), the Collabora-tive Innovation Center of Novel Software Technology and Industrialization, Nanjing University; the National Research F oundation, Prime Minister X  X  Office, Singapore under its In-ternational Research Centres in Singapore Funding Initia-tive and Pinnacle lab for analytics at Singapore Management University. [1] L. Backstrom and J. Leskovec. Supervised random [2] C.-C. Chang and C.-J. Lin. LIBSVM: A library for [3] K. Crammer, O. Dekel, J. Keshet, S. Shalev-Shwartz, [4] I. P. Fellegi and A. B. Sunter. A theory for record [5] S. J. Grannis, J. M. Overhage, and C. J. McDonald. [6] M. Grant and S. Boyd. CVX: Matlab software for [7] T. Iofciu, P. Fankhauser, F. Abel, and K. Bischoff. [8] T. Joachims, T. Finley, and C.-N. J. Yu.
 [9] D. Liben-Nowell and J. Kleinberg. The link-prediction [10] J. Liu, F. Zhang, X. Song, Y.-I. Song, C.-Y. Lin, and [11] S. Liu, S. Wang, F. Zhu, J. Zhang, and R. Krishnan. [12] W. Liu and I. W. Tsang. Large margin metric learning [13] X.-Y. Liu, J. Wu, and Z.-H. Zhou. Exploratory [14] R. McDonald, K. Crammer, and F. Pereira. Online [15] H. Newcombe, J. Kennedy, S. Axford, and A. James. [16] H. B. Newcombe. Handbook of record linkage: methods [17] L. Roos and A. Wajda. Record linkage strategies. Part [18] M. Sadinle and S. E. Fienberg. A generalized [19] P. Sarkar and A. W. Moore. Dynamic social network [20] A. J. Smola, S. Vishwanathan, and T. Hofmann. [21] B. Taskar, D. Klein, M. Collins, D. Koller, and C. D. [22] K.-C. Toh and S. Yun. An accelerated proximal [23] I. Tsochantaridis, T. Joachims, T. Hofmann, and [24] J. Vosecky, D. Hong, and V. Y. Shen. User [25] C. Xu, D. Tao, and C. Xu. A survey on multi-view [26] G.-X. Yuan, C.-H. Ho, and C.-J. Lin. An improved [27] R. Zafarani and H. Liu. Connecting corresponding [28] R. Zafarani and H. Liu. Connecting users across social [29] J. Zhang, X. Kong, and P. S. Yu. Transferring [30] J. Zhang and P. S. Yu. Integrated anchor and social [31] J. Zhang, P. S. Yu, and Z.-H. Zhou. Meta-path based [32] Y. Zhang and J. G. Schneider. Maximum margin [33] Y. Zhang, J. Tang, Z. Yang, J. Pei, and P. S. Yu.
