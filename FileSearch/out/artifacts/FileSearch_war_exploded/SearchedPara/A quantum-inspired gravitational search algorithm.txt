 fi ed version of BPSO (MBPSO), a new version of binary differential 1. Introduction
The word  X  quantum computing (QC)  X  refers to creating a new generation of computers, called quantum mechanical computers, whichworkwithafocusontheroleofquantummechanicsinthe theory of computation. In other words, a quantum computer is a device for computation that makes direct use of quantum mechanical phenomena to perform operations on data. The quantum computers were proposed in the early 1980s ( Benioff, 1980; Feynman, 1982 )and formalized in the late 1980s and 1990s ( Deutsch, 1985; Shor, 1994;
Grover, 1996 ). The basic principle behind the quantum computation is that the quantum properties can be used to represent data and execute operations on these data ( Nielsen and Chuang, 2006 ). The development of polynomial time Shor's (1994) factoring algorithm and Grover's (1996) algorithm for quick search in unsorted database showed that the QC paradigm is more powerful than classical computing.

Evolutionary algorithms (EAs) as principle of evolutionary comput-ing (EC) techniques refer to a group of nature-inspired algorithms for performing very complex search and optimization. EAs are metaheur-istic global search methods and optimization algorithms modeled from natural genetic principles su ch as natural selection. The basic idea of natural selection is  X  Select the best, discard the rest that better individuals get higher chance to survive. The important methods in the fi eld of EAs are genetic algorithms (GA) proposed by
Holland (1975) , evolutionary programming (EP) proposed by Fogel (1973) and Schwefel (1975) .

Swarm intelligence (SI) refers to a newly developed group of population-based algorithms for mult i-agent search and optimization.
SI studies the collective behavior of systems made up of a population of simple agents interacting locally with each other and with their environment. In the SI systems the agents follow very simple rules, although there is no centralized control structure dictating how individual agents should behave. Here, social interactions (locally shared knowledge) provide the basis for unguided problem solving.
In recent years, the swarm intell igence paradigm has received tremendous attention in research, mainly as Ant Colony Optimization (ACO) and Particle Swarm Optimization (PSO). ACO is the fi of SI-based search algorithms which was proposed by Dorigo et al. path from nest to food source. PSO, which was proposed by Kennedy and Eberhart (1995) ,mimicsthe fl ocking behavior of birds and
Research on integrating EC and QC has been started since late 1990s. The existing algorithms in this fi eld are classi fi (2011) in three categories as follows:
Evolutionary-designed quantum algorithms (EDQAs) which try to automate the synthesis of new quantum algorithms using EAs.

Quantum evolutionary algorithms (QEAs) which focus on implementation of EC algorithms in a quantum computation environment.

Quantum-inspired evolutionary algorithms (QIEAs) which con-centrate on generating new EC algorithms using some concepts and principles of QC.

Gravitational search algorithm (GSA) is one of the latest swarm optimization algorithms, which introduced by Rashedi et al. (2009) based on the metaphor of gravitational interaction between objects. Previous works have revealed the effectiveness and ef fi ciency of the
GSA as a global optimizer in solving various continuous problems, its binary version, BGSA, in solving binary encoded problems and its discrete version, DGSA, in solving combinatorial problems ( Rashedi et al., 2010, 2011; Chatterjee and Mahanti, 2010; Yin et al., 2011; Sarafrazi et al., 2011; Bahrololoum et al., 2012; Li and Zhou, 2011; Doraghinejad et al., 2014; Sarafrazi and Nezamabadi-pour, 2012, 2013;
Rashedi et al., 2013 ). The advantages of GSA are the capability to escape from local optima and being easy to implement.

The outstanding results obtained by different variants of GSA encourage us to provide a Quantum-Inspired GSA (QIGSA) for binary encoded problems. In GSA all objects (agents) interact to each other to update the position (provide new solutions). This makes them to explore the search space comprehensively in addition to having good exploitation. Therefore, in the current work, our aim is to provide a quantum inspired version of GSA to effectively handle the binary encoded combinatorial problems; named as Binary Quantum-Inspired Gravitational Search Algo-rithm (BQIGSA). The main contributions of the paper are summar-ized as: A binary search algorithm, BQIGSA, by combination of GSA and
QC is proposed. The proposed hybrid algorithm employs the stochastic characteristics of the individual described by a quantum system (e.g. Q-bit representation, superposition) and applies them to make an algorithm with more exploration capability.

A modi fi ed rotation Q-gates strategy is suggested which causes the convergence to be occurred faster than usual.

In contrast to other QIEAs, in the proposed method the basic concepts of the metaheuristic algorithm, GSA, such as accel-eration, velocity and mass are used without no change.
A comprehensive comparison with nine other binary algo-rithms is done and the results are presented.

The rest of the paper is organized as follows. Section 2 gives a review on the related works along with the basic concepts of QC.
To make a proper background, a brief introduction to GSA and its binary version (BGSA) are presented in Section 3 . The proposed
BQIGSA is stated in Section 4 . Experimental results and compar-ison with nine other algorithms are given on several cases of 0 knapsack problem, Max-Ones and Royal-Road functions in Section 5 . Finally, the paper is concluded in Section 6 . 2. Background
The metaheuristic search algorithm inspired by quantum mechanics, QIEAs, use quantum-inspired bits (Q-bits), quantum-inspired gates (Q-gates) and observation process to form their structure. This section fi rst introduces important principles of quantum computing and then reviews the related works in the fi eld of quantum-inspired evolutionary algorithms, especially, for solving binary-valued problems. 2.1. Quantum computing
The smallest unit of information that can be stored in a two-state quantum computer ( Benioff, 1980 ) is called quantum bit (qubit/Q-bit) ( Han and Kim, 2002 ). Quantum computers work by manipulating Q-bits and applying a sequence of quantum opera-tors to them. A Q-bit is able to present states  X  1  X  ,  X  superposition of these two. The state of a Q-bit,  X   X  , is presented by  X   X   X  0 j  X   X   X  1 j  X   X  1  X  where  X  and  X  are complex numbers that indicate probability amplitudes of the states  X  0  X  and  X  1  X  , respectively. The values and  X  2 are the probabilities that the Q-bit is found in the states  X  0  X  or  X  1  X  , respectively. Normalization requires that jj 2  X   X  2  X  1  X  2  X  Therefore, a Q-bit is de fi ned as a pair of number  X   X  ; q  X  With regard to this de fi nition, in a typical quantum system, an agent (individual/particle/object) is presented as a string with n Q-bits as follows ( Han and Kim, 2002 ): q  X  q 1 ; q 2 ; ... ; q n  X  system,  X  n  X  , with n Q-bits can be in an arbitrary superposition n  X   X  where C i is the probability amplitude of the state i , and S described by the binary string x 1 ; x 2 ; ... ; x n ; where x d of these 2 n states at any one time. It is noticed that a Q-bit representation employs a probabilistic superposition of 0 and 1 and this representation extends naturally to multi-Q-bits sys-tems ( Zhang, 2011 ). However, in the act of observing a quantum state, it collapses to a single state. The pseudocode of observation random number produced by a uniformly distributed probability function in the range [0, 1].

As an example, consider a three Q-bit system with three pairs of amplitude as follows: "# This system supports 2 3  X  8 states including 000 j  X  , 001 j C , 1 = 4, 1 = 4, 1 = 4, ctively. In other words, these states are presented by probabilities 1 = 16, 1 = 16, 1 = 16, 3 = 16, 3 = 16, 1 = 16, 3 = 16 and 3 = ectively. Therefore, the advantage of Q-bit representation over classical representation is obvious from this example which can present each of eight possible states in the observation process with a speci fi c probability.

Another essential concept is Q-gate which refers to a variation operator in QIEAs. A Q-gate gets a Q-bit's state,  X   X  ;  X  changes the state such that the updated Q-bit should be satis amplitudes of updated Q-bit ( Han and Kim, 2002 ).
 There are various single Q-gates such as NOT-gate, controlled
NOT-gate, X-gate, Hadamard-gate, Z-gate, phase shift-gate, Y-gate, and Rotation-gate that can be applied to modify the state of a Q-bit. Among them, the Rotation Q-gate (RQ-gate) due to its capability and effectiveness is used more than others in the QIEAs.
The RQ-gate was fi rstly proposed by Han and Kim (2002) .Itis de fi ned as a variation operator to drive individuals toward bet-ter solutions and eventually fi nd global optimum. To describe it, consider two binary strings B  X  t  X  X  b 1 ; b 2 ; ... ; b n ; x 2 ; ... ; x n which are the best solution, and current solution the RQ-gate is de fi ned as d t  X  1  X  X   X  d t  X  1  X  X  "# toward either 0 or 1 state depending on its sign, in which are the value and the sign of  X   X  d , respectively. The parameter should be designed in compliance with the application problem ( Han and Kim, 2002 ). Han and Kim (2002) speci fi ed  X   X  d maximization of the knapsack problem which is shown in Table 1 . 2.2. Related work
The work proposed by Narayanan and Moore (1996) is the fi work that QC has been employed to solve the traveling salesman problem. In this work, a quantum-inspired genetic algorithm is pro-posed where concepts and principles of quantum mechanics (such as interference) have been used to provide the crossover operation. So far, different variants of QIEAs have been proposed that can be categorized into three types ( Zhang, 2011 ): Binary observation QIEA (BQIEA), Real observation QIEA (RQIEA) and QIEA-like algorithms. A comprehensive survey on quantum-inspired evolutionary algorithms along with a limited comparison of important ones was given by A signi fi cant work in the fi eld of QIEAs was done by Han and
Kim (2002) that has attracted many of researchers to this ( Han and Kim, 2002 ). They provided the fi rst version of quantum-inspired evolutionary algorithms for binary-encoded problems by proposing the RQ-gate as well as the main structure of BQIEAs.
Moreover, they performed a large number of experiments on the combinatorial 0  X  1 knapsack problem with different items to set parameters of the new algorithm and the proposed RQ-gate as well. In later work, they investigated the termination criterion as well as the initialization of Q-bits (population) and also proposed a modi fi ed version of RQ-gate called H  X  -gate ( Han and Kim, 2004 ).
Modi fi cation of RQ-gate is not limited to the work provided by Han and Kim (2004) . Zhang et al. (2006) have presented a modi version of RQ-gate in which the value of rotation angle is updated by an adaptive function.

Many researchers have improved the original QEIA (BQEIAo) proposed by Han and Kim where, different types of crossover and mutation operators have been suggested to integrate with BQEIAo ( Talbi et al., 2004; Yang et al., 2004; Meshoul et al., 2005; Shu, 2007 ). It is worth noticed that the mutation and crossover operators are different from classic ones because these operators should be performed on Q-bit individuals, hence; they are called quantum crossover and quantum mutation. In several studies, the improvement of BQEIAo is suggested by combination of it with other metaheuristic evolutionary or swarm algorithms like genetic algorithm ( Wang et al., 2005 ), immune system ( Li et al., 2004; Bi and Jin, 2007; Niu et al., 2009 ), and PSO ( Wang et al., 2007; Yu et al., 2006 ).

Due to high performance of BQIEA, there are many successful efforts that variations of BQIEA have been applied to practical real world problems. For example, Vlachogiannis and Lee (2008) applied it to a real and reactive dispatch problem in power systems. Solving the unit commitment problem based on BQIEA is carried out by Lau et al. (2009) . Chen (2010) proposed a reduced-complexity partial transmit sequences approach based on the BQIEA for the reduction of peak-to-average power ratio in an orthogonal frequency division multiplexing system. In Hong and Pen (2010 ) a method has been presented for static VAR planning considering existing wind generator voltages and trans-former taps as controllers to regulate the voltage pro fi distribution system with wind farms.

Real-observation QIEAs have been reported in many studies ( Zhang and Rong, 2007; Liu et al., 2008; Zhang and Gao, 2007a;
Sailesh-Babu et al., 2008 ) to solve global real-valued (continuous) optimization problems. These methods have been proposed based on the basis of the concept and principles of quantum computing such as Q-bits and super position of states.

Quantum-inspired algorithms are not limited to the principles of evolutionary algorithms. There are many efforts that try to provide other types of quantum-behaved algorithms. The fi rst attempt to provide a quantum-behaved particle swarm optimization (QPSO) for continuous optimization was made in Sun et al. (2004, 2005) and Liu et al. (2005 ). Keeping the philosophy of PSO, they have presented a
Delta potential well model of PSO in quantum world and show how it works. These works were followed by Coelho (2007) , Coelho and
Mariani (2008) , Sabat et al. (2009) and Sun et al. (2009 )andseveral extended/modi fi ed QPSO approaches have been proposed. As we its position and velocity are used where the particle moves along a determined trajectory in Newtonian mechanics. In contrast to this, in quantum theory, the term trajectory is meaningless, because position and velocity of a particle cannot be determined simultaneously according to uncertainty principle. Therefore, quantum-behaved algo-rithms are limited to work in different way. For example, in the function and represented by Schrodinger equation, instead of position
Recently, inspired by the classical GSA and quantum mechanics theories, a quantum-inspired gravitational search algorithm (QIGSA) for continuous optimization has been presented in Soleimanpour Moghadam et al. (2014 ).

Quantum inspired PSO for binary optimization (BQIPSO) has already been addressed in Meng et al. (2010) and Jeong et al. (2010 ). The BQIPSOs use the Q-bit individual for the probabilistic representation of a particle, thereby replacing the velocity update procedure in the traditional PSO ( Meng et al., 2010; Jeong et al., 2010 ). In Jeong et al. (2010 ), the inertia weight factor and two acceleration coef fi cients are removed and only rotation angle is needed when modifying the position of particles. Also, to improve the conventional rotation gate for updating the Q-bit individual, a new rotation gate has been proposed including a coordinate rotation gate for updating Q-bits, and a dynamic rotation angle approach for determining the magnitude of rotation angle.
Inspired by BQIPSO and BGSA a version of the quantum binary GSA (BQGSA) has been proposed ( Ibrahim et al., 2012 ). This algorithm is proposed based on the rotation gate where the rotation angle is used to determine the new position of the agent. In other word, they convert the concept of acceleration updating in BGSA to obtain the rotation angle. Also, the magnitude of the rotation angle is used to replace the gravitation mass. The QBGSA was employed to solve the optimal power quality monitor placement problem in power systems ( Ibrahim et al., 2014 ), a model of thermal Unit Commitment problem with wind power integration ( Ji et al., 2014 )andtoselectthe appropriate subset of the features in the problem of classi con fi rm good performance of the BQIPSO and BQGSA in the optimiza-tion of practical problems. However, to create the BQGSA the basic concepts of GSA such as acceleration, velocity and mass are changed or ignored. It seems that keeping these concepts help us to make a more powerful algorithm which is the aim of this paper. The main binary QIEA studies and the problems they have solved are summar-ized in Table 2 . 3. Gravitational search algorithm
The origin version of the GSA operates in continuous space ( Rashedi et al., 2009 ) to optimize the problems with real-valued parameters. However, many optimization problems are set in the binary space. Hence, a Binary version of GSA (BGSA) which is able to optimize problems with binary parameters was introduced in
Rashedi et al. (2010) and Rashedi and Nezamabadi-pour (2014 ). 3.1. Real-valued gravitational search algorithm (RGSA)
To describe the GSA, consider a system with N objects (agents) in which the position of the i th object is de fi ned as follows:
X  X  X  x 1 i ;:::; x d i ;:::; x n i  X  i  X  1 ; 2 ;:::; N  X  8  X  dimension of the search space. It is noted that the positions of objects correspond to the solutions of the problem. Based on
Rashedi et al. (2009 ), the mass of each object/agent is calculated after computing current population's fi tness as follows:
M  X  t  X  X  fit i  X  t  X  worst  X  t  X  P N where M i  X  t  X  and fit i  X  t  X  represent the mass and the of the agent i at t , and, worst  X  t  X  is de fi ned as follows: worst  X  t  X  X 
To compute the acceleration of an agent, total forces from a set of heavier objects that apply to it should be considered based on law of gravity (Eq. (11) ) which is followed by calculation of agent acceleration using law of motion (Eq. (12) ). Afterward, the next calculated using Eq. (14) ( Rashedi et al., 2009 ).
 F  X  t  X  X  a  X  t  X  X  F v  X  t  X  1  X  X  rand i v d i  X  t  X  X  a d i  X  t  X  X  13  X  x  X  t  X  1  X  X  x d i  X  t  X  X  v d i  X  t  X  1  X  X  14  X  where rand i and rand j are two uniformly distributed random numbers in the interval [0, 1],  X  is a small value, and R Euclidian distance between two agents i and j de fi ned as R  X  t  X  X   X  X i  X  t  X  ; X j  X  t  X   X  2 . kbest is the set of fi fi tness value and biggest mass. kbest is a function of time, initialized to K 0 at the beginning and is decreased with time. Here, K 0 is set to N (total number of agents) and is decreased of time where is set to G 0 at the beginning and is decreased exponentially towards zero at the last iteration. 3.2. Gravitational search algorithm for binary encoded problems (BGSA)
As mentioned before, the origin version of the GSA operates in continuous space. However, many optimization problems are set in binary discrete space. The binary version of the GSA is introduced by Rashedi et al. (2010) . In spite of RGSA that trajectories are de fi ned as changes in position on some number of dimensions, in the BGSA, trajectories are changes in the probability that a coordinate will take on a zero or one value. In binary environment, every dimension has the value of 0 or 1. Moving in every dimension means that its value changes from 0 to 1 or vice versa.

In BGSA, equations of updating force, acceleration and velocity (Eqs. (11)  X  (13) ) are similar to continuous version, with a small change in computing the distance between two agents; in binary mode the distance measure is computed based on the Hamming distance which calculates the distance between two agents i and j in a binary space as follows: R  X  t  X  X 
BGSA updates the velocity based on Eq. (13) and consider the new position to be 1 or 0 with a probability. In other word, moving velocity is de fi ned in terms of changes of probabilities that a bit will be in one state or another ( Nezamabadi-pour et al., 2008; Rashedi et al., 2010; Rashedi and Nezamabadi-pour, 2014 ). Thus v d shows the probability of changing the value of x d i from 0 to 1 or vice versa.
 into a probability function.
 S  X  v i  X  t  X  X  X  tanh  X  v d i  X  t  X  X j  X  16  X  if rand o S  X  v d i  X  t  X  1  X  X  then x d i  X  t  X  1  X  X  complement  X  x d i  X  t  X  X  else x d i  X  t  X  1  X  X  x d i  X  t  X  X  17  X 
To have a fi t converge of the algorithm, v d i must be limited into with regard to BGSA please see Rashedi et al. (2010 ). In BGSA, G is decreased linearly with time as follows:
G  X  t  X  X  G 0 1 t T  X  18  X  where T is the total number of iterations (the total age of system). The pseudocode of the BGSA is given by Fig. 2 . 4. The proposed BQIGSA
In creating BQIGSA the effort is to preserve the main structure and also the philosophy of the GSA. In the BQIGSA the concepts of position and velocity of objects in the original GSA are replaced by the new concepts. Without loss of generality, we suppose that the problem should be maximized. With this assumption, the BQIG-
SA's steps are as follows: (i) Initialization : Set t  X  0, SB t  X  X  X fg , where SB is an archive to maintain the best solution provided for each object by observation process through iterations. In this step, a swarm,
Q  X  t  X  (Eq. (19) ), consists of N Q-bit objects in an n -dimen-sional search space is randomly generated such that the normalization rule (Eq. (2) ) is satis fi ed.

Q  X  t  X  X f q 1  X  t  X  ; q 2  X  t  X  ; ... ; q N  X  t  X g X  19  X  where the structure of i th Q-bit object is q i  X  t  X  X  q 1 i  X  t  X  ; q 2 i  X  t  X  ; ... ; q n i  X  t  X   X  (ii) Observation : In this step, current solutions St  X  X  X f (iv) Updating SB t  X  X  : each solution in SB t  X  X  X f B 1 t  X  X  (v) Computing M i  X  t  X  : This step calculates M i  X  t  X  ; (vi) Updating Q t  X  X  : In standard GSA, to compute the velocity of an (vii) Repeat : Repeat steps (ii)  X  (vi) until the stopping criterion 5. Experimental results To evaluate the proposed BQIGSA the 0  X  1 knapsack problem,
Max-Ones and Royal-Road functions as well-known benchmark combinatorial optimization problems, are considered. Recently
Zhang (2011) has compared three versions of BQIEAs with Con-ventional GA (CGA) in solving three benchmark 0  X  1 knapsack problems with sizes of 50, 200 and 400 items. In this study, we apply our proposed algorithm to the cases used by Zhang (2011) .
Furthermore, we apply our algorithm to two other complicated 0 1 knapsack cases with sizes of 600 and 1000 items.

To assess the performance of BQIGSA, it will be compared with state-of-the-art binary-valued algorithms presented in the recent literature including two version of evolutionary algorithms CGA ( Zhang, 2011 ) and a new version of binary differential evolution (NBDE) ( Deng et al., 2010 ), three version of swarm intelligence based techniques (binary particle swarm optimization (BPSO)) ( Kennedy and Eberhart, 1997 ), a modi fi ed version of BPSO (MBPSO) ( Lee et al., 2008 ), and BGSA ( Rashedi et al., 2010 ), a quantum inspired binary PSO (BQIPSO) ( Jeong et al., 2010 ), as well as three implemented BQIEAs by Zhang (2011) . 5.1. Knapsack problem
In the knapsack problem, the aim is to select the most pro able subset from among various items of a given set of items, considering that the knapsack has limited capacity. The 0 knapsack problem is mathematically described as follows. Given a set of n items and a knapsack, choose a subset of the items so that the pro fi tof f  X  X  X  is being maximum: fX  X  X  X  subject to:
X w d x d r C  X  26  X  where n , C , p d and w d are the number of items, the capacity of the given knapsack, the pro fi t of item d and the weight of item d respectively, and x d is 0 or 1 in which if x d takes 1, item d is selected for knapsack otherwise the item is discarded.
As aforementioned, in this study we employed the knapsack cases used in the Zhang's study ( Zhang, 2011 ). The cases are carried out by strongly correlated sets of data ( Zhang, 2011; Han and Kim, 2002 ); w d was selected to be uniformly random number in the range  X  1 ; 10 , p d  X  w d  X  5, and the average capacity of the knapsack is considered to be C  X  0 : 5 unsorted and three knapsack problems with 50, 200, and 400 items were considered by Zhang (2011) . For a fair comparison, all three cases have been given to us by Zhang and some of experi-ments are reported on them.

Furthermore, we employed two other complicated 0  X  1 knap-sack cases with 600 and 1000 items to evaluate the proposed algorithm in larger sizes of the knapsack problems. Our cases were generated similar to previous three cases. 5.2. Binary benchmark functions The functions Max-Ones and Royal-Road, which are given in
Table 3 , are binary in nature. To evaluate the ability of the algorithms, the functions of Table 2 are considered with several values of n , n  X  40, 80, 160, 320 and 640 for Max-Ones and n  X  40, 80, 160 and 320 for Royal-Road where n indicates the dimension of the function. 5.3. Comparative algorithms
The proposed BQIGSA is compared with nine population-based heuristic search algorithms. For comparison, we implemented the NBDE ( Deng et al., 2010 ), BPSO ( Kennedy and Eberhart, 1997 ),
MBPSO ( Lee et al., 2008 ), BGSA ( Rashedi et al., 2010 ) and BQIPSO ( Jeong et al., 2010 ) in Matlab and used the results given by Zhang (2011) for original BQIEA (BQIEAo), modi fi ed BQIEA by incorporat-ing crossover and mutation operators (BQIEAcm), modi fi ed BQIEA by introducing new updating scheme for rotation Q-gates (BQIEAn) and CGA. A detail description of implementation of the competing algorithms including their parameters values is given in Appendix A .
 5.4. Comparative study We applied the proposed BQIGSA along with BGSA, BPSO,
MBPSO, NBDE and BQIPSO to the three 0  X  1 knapsack problems with different sizes including 50, 200, and 400 items and the results are reported along with those of previous work of Zhang (2011) which used the same testbed. It should be noticed that in all experiments in this section, a random repair scheme, which used in Zhang (2011) and Han and Kim (2002 ), is adopted to convert an infeasible solution to a feasible solution for knapsack problems.
The preliminary experiments are carried out while maximum number of iterations and the size of population/swarm are set to 1000 and 20, respectively. This setting has been previously used by Zhang (2011) for comparing CGA, BQIEAo, BQIEAcm and BQIEAn.
The results are averaged over 30 independent runs and the mean best pro fi ts, best of the best pro fi ts, worst of the best pro standard deviation of the best pro fi ts in the last iteration of 30 runs are reported in Table 4 .

Table 5 shows results of unpaired t -tests between BQIGSA and the competing algorithms in each case. This table reveals that for all three 0  X  1 knapsack cases, there is statistically signi difference between BQIGSA and other nine competing algorithms; i.e. for all cases p -values lesser than 0.0001 were obtained.
Based on the obtained results in Table 4 , the best solutions of the proposed BQIGSA are better (more precise) than the other algorithms for all cases, except for the case of 50 where it is the same with that of BQIPSO. Among the comparative algorithms only the BQIPSO could provide near solutions to our algorithms and the results obtained by others are far from those of BQIGSA.
Specially, the strong ability of our algorithms is revealed in the case with 400 items. The largest difference in performance between BQIGSA and BQIPSO occurs with this case. This shows that in the more complex problems the BQIGSA due to its higher exploration ability can provide better solutions than the others. In this case, the worst solution obtained by our algorithm is better than the best solutions provided by other algorithms even for BQIPSO. The low values for standard deviation of best solutions for
BQIGSA also illustrate the robustness of the proposed algorithm in contrast to the others. Overall, referring to Table 5 , one can conclude the consistent superiority of BQIGSA over competing algorithms for all three cases.

To fi nd out whether or not the dimensionality of knapsack problem plays a signi fi cant role in the performance of BQIGSA, another set of experiments on the higher-dimensional cases of 0 knapsack problem with 600 and 1000 items was carried out. The results are averaged over 30 independent runs and given in
Table 6 . In this set of experiments the high performance algo-rithms of the previous set of experiments (BQIGSA, BQIPSO, BGSA and BPSO) are employed. The results are averaged over 30 independent runs and reported in Table 6 . The p -value results of unpaired t -tests between BQIGSA and the other three competing algorithms for both cases are lesser than 0.0001 where indicate an extremely signi fi cant difference. The results in Table 6 con superiority of the BQIGSA to the other comparative algorithms in despite of the large difference in the dimensionality of problems. In other words, it reveals the fact that the dimensionality has no defecting effect on the performance of the BQIGSA comparing to the competing algorithms.

It should be noticed that in these two sets of experiments the maximum number of Fitness Evaluations (FEs), in the global loop of the algorithms, has been fi xed to 20,000.

Similar to the study done by Zhang (2011) , to investigate the effect of swarm size on the performance of our algorithm, six additional cases, in which the swarm sizes are 10, 40, 60, 80, 100 and 200, are performed on the knapsack problem with 200 items.
Fig. 4 summarizes the results. In this fi gure, the relationship between the population/swarm size and average best pro fi 30 independent runs obtained by the algorithms is illustrated. The experimental results show that each of the CGA, BPSO, MBPSO,
NBDE, BQIEAo, BQIEAcm, BQIEAn and BQIPSO algorithms can achieve an increase of mean best pro fi ts when the population/ swarm size varies from 10 to 200, and these eight algorithms have similar climbing tendency. On the other hand, Fig. 4 reveals that the proposed BQIGSA with swarm size of 40 could successfully fi nd the best solution with pro fi t of 1198.33 in all 30 runs and this further occurs for higher swarm sizes. Among from comparing algorithms, BGSA ( Rashedi et al., 2010 ) has a higher climbing slope from swarm size of 10  X  60 and after that it becomes uniform and from swarm size of 100  X  200 a slightly goes down. However, based on the information presented by Fig. 4 , the proposed BQIGSA is better than all comparing algorithms in fi nding the best solution for knapsack with 200 items. To sum up, the proposed algorithm bene fi ts from a good exploration ability and is able to solutions with a swarm of smaller size with respect to the competing algorithms.

To show the convergence characteristics of the BQIGSA, the progress of average best pro fi ts and average mean pro fi found by BQIGSA, BQIPSO and BGSA over 30 independent runs for knapsack problems with 50, 200 and 400 items are given by Fig. 5 .
The results are reported for the swarm size of 20. The good conve-rgence rate of BQIGSA could be concluded from Fig. 5 . According to algorithms and hence has a higher convergence rate. In more details, BQIGSA shows faster convergence rate than BGSA as well as BQIPSO.
The fi gure reveals that the BGSA works well in the knapsack with problem size its performance is decreased. Although, the BQIPSO has a good convergence characteristi c, BQIGSA outperforms it in both convergencerateand fi nal obtained pro fi ts.

To investigate the ability of the proposed BQIGSA in the solving other problems, it applied on two well-known combinatorial binary functions with different sizes. These functions have been given by Table 3 . The functions are considered with several values of n , n  X  40, 80, 160, 320 and 640 for Max-Ones function and n  X  40, 80, 160 and 320 for Royal-Road function. In the experiments the maximum number of iterations for two functions and for all sizes is set to 1000. The population size is considered to be 20 and 40 for Max-Ones and Royal-Road, respectively. Therefore the number of fi tness evolutions is restricted to 20,000 and 40,000 for Max-Ones and Royal-Road, respectively. Other parameters of the competing algorithms are the same as previous sets of experiments which are accessible in Table A1 in Appendix A .

The results are averaged over 30 independent runs and the mean best fi tness, best of the best fi tness, worst of the best and the average number iterations required for convergence of the algorithms to the fi nal obtained solutions are recorded and reported in Table 7 .

For Max-Ones with three sizes of n  X  40, 80, and 160 no statistically difference results was found between BQIGSA, and BQIPSO. This comparison shows that BQIPSO needs smaller eva-luation numbers to converge to the fi nal solutions. For Max-Ones with n  X  320 and 640, there was statistically signi fi cant difference between BQIGSA and other algorithms; BQIGSA performed better results than the others in terms of obtaining more precise solutions.

For all sizes of Royal-Road there was statistically signi difference between BQIGSA and BQIPSO and between BQIGSA and BPSO; BQIGSA outperformed these two algorithms. For two out of four sizes of Royal-Road with n  X  160, and 320, there was statis-tically signi fi cant difference between BQIGSA and BGSA with p-value lesser than 0.0001. Different result has been obtained for this function with n  X  40 and 80, no statistically signi fi cant difference was observed between BGSA and BQIGSA; in fact, for n  X  40 the
BGSA outperformed the BQIGSA slightly with p-value of 0.1637 and for n  X  80 BQIGSA outperformed BGSA somewhat with p -value of 0.4305. The results for Max-Ones and Royal-Road with small items reveals that the BGSA works well and tends to fi nd the optimal solution but with increase of problem size its performance is decreased. Overall, taking into account knapsack, Max-Ones and
Royal-Road problems, it is worth noticing that the BQIGSA can be considered as an alternative tool beside other metaheuristic search algorithms for binary optimization. 5.5. Sensitivity to parameter G 0
The BQIGSA has a few parameters to be tuned. The important one in GSA is G 0 . To examine the effect of different values of this parameter on the performance of BQIGSA in detail, a set of experiments has been carried out using different values of G this regard, the experiments are performed on the knapsack with 50 and 200 items. In experiments, swarm size, and maximum number of iterations are considered to be 20 and 1000, respec-tively. In the fi rst group of experiments, we examine the impact of
G . Thus, the different values of 1, 0.5, 0.25, 0.15, 0.1, and 0.05 for
G are examined for knapsack with 50 and 200 items. It is noted that in previous experiments we used the value of 0.125 for G simplicity, the results related to G 0  X  0.125 are also reported along with those of new values in Table 3 . The results are averaged over 30 independent runs and the average best pro fi ts, best of the best pro fi ts, worst of the best pro fi ts, and standard deviation of the best pro fi ts in the last iteration of 30 runs are reported for these problems.

The results show that G 0  X  0.125 is not the optimal value for all cases. This means that G 0 is a problem dependent parameter.
However, the values of 0.125 and 0.15 have provided promising results for both cases. Finding more accurate value for this parameter in a speci fi c problem is attainable by trial and error.
Furthermore, it is possible to dynamically adapt the gravitational constant, G  X  t  X  , by using fuzzy logic ( Valdez et al., 2014; Sombra et al., 2013; Saeidi-Khabisi and Rashedi, 2012 )( Table 8 ). 6. Conclusion
Recently, a new branch of evolutionary computing which integrates the concept of quantum computing and metaheuristic search algorithms has been started that could attract interest of many researchers to itself. Quantum-inspired algorithms employ computational methods based on the concepts and principles of quantum mechanics, such as quantum bits, superposition, quan-tum gates and quantum measurement, in order to solve various problems using classical computers. This article is the attempt to the presentation of a quantum-inspired algorithm based on the recently developed gravitational search algorithm. In this study, the main structure of GSA and the philosophy behind it have been preserved and by integrating with the concepts of quantum computing, and proposing a modi fi ed rotation Q-gate, a new quantum algorithm, called BQIGSA, has been introduced. Relay on experiments, the main characteristic of the BQIGSA is its high exploration ability. In BQIGSA in contrast to BQIEAs and BQIPSOs many solutions using the gravity law and laws of motion incorpo-rate to each other to determine the magnitude of rotation toward 1 or 0 states by a modi fi ed rotation Q-gate. Several experiments have been performed on the 0  X  1 knapsack problem, Max-Ones and Royal-Road functions and extensive empirical results have been presented to evaluate the effectiveness of the proposed algorithm and the comparison has been made to state-of-the-art algorithms in this fi eld. The results suggest that BQIGSA has a merit in the fi eld of optimization in binary search spaces. However, it is still necessary to assess the ability of the proposed binary algorithm in practical applications such as feature selection and unit commitment problems in future works.
 Acknowledgment
TheauthorgivekindrespectandspecialthankstoDr.G.Zhangfor giving us his QIEAs programs as well as the results of Fig. 4 corresponding to QIEAs and CGA. Also, the author would like to extend their appreciation to Dr. M.M. Farsangi and Dr. Mohsen
Nabipoor for proof reading the manu script and anonymous reviewers for providing valuable comments.
 Appendix A
As aforementioned we compared ten algorithms including our proposed BQIGSA. Among from these algorithms we implemented six algorithms containing BPSO ( Kennedy and Eberhart, 1995 ),
MBPSO ( Lee et al., 2008 ), BGSA ( Rashedi et al., 2010 ), NBDE ( Deng et al., 2010 ), BQIPSO ( Jeong et al., 2010 ) and BQIGSA in Matlab.
The use of BPSO : In BPSO algorithm, x d i and v d i are calculated as follows ( Kennedy and Eberhart, 1997; Rashedi et al., 2010 ): v  X  t  X  1  X  X  w  X  t  X  v d i  X  t  X  X  c 1 rand 1 pb d i x d i  X  t  X  if rand o 1 8 &gt; &lt; &gt; :  X  A where rand , rand 1 and rand 2 are three random variables in the range [0, 1], c 1 and c 2 arepositiveconstants,and w is the inertia weight. X i  X  X  x 1 i ; x 2 i ;:::; x n i  X  and V i  X  X  v 1 and velocity of the i th particle, respectively. pb i  X  X  pb the i th particle and the best previous position among all the particles in the population, respectively. In addition, c set to 2 and inertia factor, w , is linearly decreasing function from 0.9 to 0.2.

The use of MBPSO : Lee et al. (2008) used concepts of genotype phenotype representation and the mutation operator to modify
BPSO. In MBPSO algorithm, a genotype position x d gi , a phenotype v  X  t  X  1  X  X  w  X  t  X  v d i  X  t  X  X  c 1 rand 1 pb d i x d pi  X  t  X  x  X  t  X  1  X  X  x d gi  X  t  X  X  v d i  X  t  X  X  A : 4  X  if rand o 1 8 &gt; &lt; &gt; :
Similar to BPSO, rand , rand 1 and rand 2 are three random variables in the range [0, 1], c 1 are c 2 are positive constants, and w is the inertia weight. Also, a mutation operator is evolved in the MBPSO which is inserted between Eqs. (A.4) and (A.5) with mutation rate of r mu as follows: if rand o r mu x d gi  X  t  X  1  X  X  x d gi  X  t  X  1  X  X  A : 6  X 
As suggested by Lee et al. (2008) , in the experiments c 1 set to 1.42694 and inertia factor, w , and mutation rate, r to 0.689343 and 0.3, respectively.

The use of BGSA : With regard to section 3  X  2, the parameter G in Eq. (18) is set to 20.

The use of NBDE : In NBDE ( Deng et al., 2010 ) a binary popula-tion is randomly generated and a set of successive evolutionary operators in the binary space is applied on the population to create new population of individual. The main characteristic of the NBDE is its binary mutation which is as follows: h  X  t  X  1  X  X  for i  X  1 ; 2 ;:::; N and d  X  1 ; 2 ;:::; n  X  A 7  X  where rand 1 and rand 2 are two uniform random variables in the range of [0,1], rand 2 is generated one time at each generation while rand 1 is generated separately for each gene of the every individual in the current population, r 1 is a random integer number in the range of [1, N ], x d r generation t  X  1. In NBDE the following crossover operator is employed to increase the population diversity ( Deng et al., 2010 ): u  X  t  X  1  X  X  h where r 2 is a random integer number in the range of [1, n ], CR is the crossover rate and U i  X  X  u 1 i ;:::; u d i ;:::; u n which is made up with some component of the mutant individual and some of other parameters of the target individual. Eventually, the selection operator is applied to fi nalize the next generation. Therefore, to decide whether the trial individual U i  X  t  X  1  X  is a member of next population, its fi tness is compared with the fi tness of its corresponding individual in the current population X  X  t  X  as follows: X  X  t  X  1  X  X  The authors in Deng et al. (2010 ) used the NBDE for solving 0 knapsack problem and set the parameter CR to 0.5. In our study as suggested by Deng et al. (2010) , CR is set to 0.5.

The use of BQIPSO : Jeong et al. (2010) used the Q-bit representa-tion of Eq. (19) to provide a swarm of quantum particle with given structure by Eq. (20) . In BQIPSO the rotation angle of d th element of i th particle,  X   X  d i , is computed as follows:  X   X  d where  X  is the magnitude of rotation angle and  X  1 i and  X  obtained by the following equations:  X  0if fit  X  X i  X  0if fit  X  X i A dynamic fuction for the magnitude of rotation angle is used by Jeong et al. (2010) as follows: where T is the maximum number of iterations. As suggested by Jeong et al. (2010) , in the experiments  X  max and  X  min are set to 0 : 05  X  and 0 : 001  X  , respectively.

The use of BQIGSA : To implement the BQIGSA the gravity constant G is considered to be a linearly decreasing function as follows: G  X  G 0 1 0 : 95 t T  X  A : 14  X  where G 0 is set to 0.125 and T is the total number of iterations.
The use of CGA, BQIEAo, BQIEAcm and BQIEAn : As before mentioned, we did not implement the CGA, BQIEAo, BQIEAcm and BQIEAn. These algorithms have been implementd by Zhang (2011) . We implemented other six abovementioned algorithms on the three 0  X  1 knapsack cases provided by Zhang and the results are reported.

It should be noted that the CGA utilized fi tness proportional selection, two-point crossover and uniform mutation. As reported in Zhang (2011 ) for BQIEAcm and CGA, the crossover probability had seven choices including 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9 and the mutation probability varied in the values of 0.001, 0.01, 0.05, 0.1. Thus, there were 28 combinations for bQIEAcm and CGA and the best results were selected and reported by Zhang (2011) .For more information please refer to Zhang (2011 ).

The parameters values used in our experimentation for each algorithm are reported in Table A1 .
 References
