 Solid state drives (SSDs) outperform disk drives in throughput and energy con-sumption for database workloads [1] and people tend to use SSD to store data in order to improve the performance of database. But the price per unit capacity of SSD cache layer between main memory and hard disk for database than totally to replace disk drives by SSD. 
For most contemporary SSDs, random writes are obviously slower than sequential writes. Managing data in SSD like DRAM buffer may not get the expected perfor-mance and can decline the life of SSD. Therefore, we should turn small random writes to large sequential writes to utilize high sequential bandwidth and internal parallelism of SSD for higher throughput [2]. Now we propose an efficient strategy for using SSD as an extended cache for database and implement a Hybrid PostgreSQL based on SSD and HDD, called HybridPG. 
In HybridPG, data pages evicted out from DRAM buffer will be selectively cached number of data pages. When the size of data pages in SSD goes beyond a tunable signed with write optimization. If we fail to get a page from the DRAM buffer, we try With SSD as an extended cache, HybridPG performs better than original PostgreSQL on TPC-C benchmark. components: 1) Meta data management 2) DRAM data management 3) SSD data management. 1) Meta data management. It includes following four data structures :  X  Page-level mapping table. It is an array to record the block id and offset in data  X  Block-level mapping table. It is an array of structures which records the block id  X  Bit map. This data structure is an essential part for space recovery, and each bit 2) DRAM data management. In HybridPG, we did not change the replacement strategy for shared buffer in PostgreSQL. A flash dirty flag is added for each page 
When evicting a page from DRAM, if its flash dirty flag is false and it exists in SSD, there is no need to flush it to SSD again. And we add a write buffer with the same size as data block in SSD to cache victim data pages and flush it to SSD once it is full. 
Besides, another in-memory write buffer is added for caching data blocks evicted from SSD to disk for reducing writes on HDD and its size is the same to a data block. 3) SSD data management. This part mainly manages the strategies of data to flush in and out the extended SSD cache. 
By transforming several random data page writes to a sequential data block write, we reduce the write counts and can take advantage of the internal parallelism of SSD. placement algorithm for SSD cache will be triggered to flush several data pages from 
SSD to disk. According to the previous study, we should consider the frequency of placement algorithm considering the frequency of data blocks. in order to reduce the computing cost and avoid the negative effect incurred by fre-quency accumulation of data pages. Frequencies of these pages are added to represent the frequency of this block. When the size of SSD comes to a threshold, we evict the block with minimal frequency and flush out dirty data pages in this block. In the demonstration, we provide some adjustable parameters for users to observe the performance of HybridPG in different conditions. We can decide whether only clean data pages or all pages should be cached in SSD according to di fferent application scenarios, along with DRAM size, SSD size and SSD type. 
Here is an example of the demonstration. The TPC-C benchmark database and workload were created by the BenchmarkSQL tool. Size of the data set is 500 ware-houses (about 51GB), the client number of connections is 500. Memory of both original PostgreSQL and HybridPG is set to 1GB. We select 32GB of SSD to serve as the results of the two systems measured by tpmC (transactions per minute). We can ob-serve that the tpmC of HybridPG is 48 percent higher than it of Original PostgreSQL. It is due to the fact that disk write operations in HybridPG are much reduced, for most of frequently accessed data pages are cached in SSD. Acknowledgements. This research was partially supported by the grants from the Natural Science Foundation of China (No. 61379050, 91224008); the National 863 High-tech Program (No. 2013AA013204); Specialized Research Fund for the Doctoral Program of Higher Education(No. 20130004130001), and the Fundamental Research Funds for the Central Universities, and the Research Funds of Renmin University( No. 11XNL010). 
