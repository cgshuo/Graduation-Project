 There has been a lot of recent work on correct-ing writing mistakes made by English as a Second Language (ESL) learners (Izumi et al., 2003; Eeg-Olofsson and Knuttson, 2003; Han et al., 2006; Fe-lice and Pulman, 2008; Gamon et al., 2008; Tetreault and Chodorow, 2008; Elghaari et al., 2010; Tetreault et al., 2010; Gamon, 2010; Rozovskaya and Roth, 2010c). Most of this work has focused on correcting mistakes in article and preposition usage, which are some of the most common error types among non-native writers of English (Dalgish, 1985; Bitchener et al., 2005; Leacock et al., 2010). Examples below illustrate some of these errors: In (1) the definite article is incorrectly omitted. In (2), the writer uses an incorrect preposition.
Approaches to correcting preposition and article mistakes have adopted the methods of the context-sensitive spelling correction task , which addresses the problem of correcting spelling mistakes that re-sult in legitimate words, such as confusing their and there (Carlson et al., 2001; Golding and Roth, 1999). A candidate set or a confusion set is defined that specifies a list of confusable words, e.g., { their, there } . Each occurrence of a confusable word in text is represented as a vector of features derived from a context window around the target, e.g., words and part-of-speech tags. A classifier is trained on text assumed to be error-free. At decision time, for each word in text, e.g. there , the classifier predicts the most likely candidate from the corresponding con-fusion set { their, there } .

Models for correcting article and preposition er-rors are similarly trained on error-free native English text, where the confusion set includes all articles or prepositions (Izumi et al., 2003; Eeg-Olofsson and Knuttson, 2003; Han et al., 2006; Felice and Pulman, 2008; Gamon et al., 2008; Tetreault and Chodorow, 2008; Tetreault et al., 2010).
Although the choice of a particular learning al-gorithm differs, with the exception of decision trees (Gamon et al., 2008), all algorithms used are lin-ear learning algorithms, some discriminative (Han et al., 2006; Felice and Pulman, 2008; Tetreault and Chodorow, 2008; Rozovskaya and Roth, 2010c; Rozovskaya and Roth, 2010b), some probabilistic (Gamon et al., 2008; Gamon, 2010), or  X  X ounting X  (Bergsma et al., 2009; Elghaari et al., 2010).
While model comparison has not been the goal of the earlier studies, it is quite common to com-pare systems, even when they are trained on dif-ferent data sets and use different features. Further-more, since there is no shared ESL data set, sys-tems are also evaluated on data from different ESL sources or even on native data. Several conclusions have been made when comparing systems devel-oped for ESL correction tasks. A language model was found to outperform a maximum entropy classi-fier (Gamon, 2010). However, the language model was trained on the Gigaword corpus, 17  X  10 9 words (Linguistic Data Consortium, 2003), a corpus sev-eral orders of magnitude larger than the corpus used to train the classifier. Similarly, web-based models built on Google Web1T 5-gram Corpus (Bergsma et al., 2009) achieve better results when compared to a maximum entropy model that uses a corpus 10 , 000 times smaller (Chodorow et al., 2007) 1 .

In this work, we compare four popular learning methods applied to the problem of correcting prepo-sition and article errors and evaluate on a common ESL data set. We compare two probabilistic ap-proaches  X  Na  X   X ve Bayes and language modeling ; a discriminative algorithm Averaged Perceptron ; and a count-based method SumLM (Bergsma et al., 2009), which, as we show, is very similar to Na  X   X ve Bayes, but with a different free coefficient. We train our models on data from several sources, varying train-ing sizes and feature sets, and show that there are significant differences in the performance of these algorithms. Contrary to previous results (Bergsma et al., 2009; Gamon, 2010), we find that when trained on the same data with the same features, Averaged Perceptron achieves the best performance, followed by Na  X   X ve Bayes, then the language model, and fi-nally the count-based approach. Our results hold for training sets of different sizes, genres, and feature sets. We also explain the performance differences from the perspective of each algorithm.

The second important question that we address is that of adapting the decision to the source language of the writer. Errors made by non-native speakers exhibit certain regularities. Adapting a model so that it takes into consideration the specific error pat-terns of the non-native writers was shown to be ex-tremely helpful in the context of discriminative clas-sifiers (Rozovskaya and Roth, 2010c; Rozovskaya and Roth, 2010b). However, this method requires generating new training data and training a separate classifier for each source language. Our key contri-bution here is a novel, simple, and elegant adaptation method within the framework of the Na  X   X ve Bayes algorithm, which yields even greater performance gains. Specifically, we show how the error patterns of the non-native writers can be viewed as a different distribution on candidate priors in the confusion set. Following this observation, we train Na  X   X ve Bayes in a traditional way, regardless of the source language of the writer, and then, only at decision time, change the prior probabilities of the model from the ones observed in the native training data to the ones corre-sponding to error patterns in the non-native writer X  X  source language (Section 4). A related idea has been applied in Word Sense Disambiguation to adjust the model priors to a new domain with different sense distributions (Chan and Ng, 2005).

The paper has two main contributions. First, we conduct a fair comparison of four learning algo-rithms and show that the discriminative approach Averaged Perceptron is the best performing model (Sec. 3). Our results do not support earlier conclu-sions with respect to the performance of count-based models (Bergsma et al., 2009) and language mod-els (Gamon, 2010). In fact, we show that SumLM is comparable to Averaged Perceptron trained with a 10 times smaller corpus, and language model is comparable to Averaged Perceptron trained with a 2 times smaller corpus.

The second, and most significant, of our contribu-tions is a novel way to adapt a model to the source language of the writer, without re-training the model (Sec. 4). As we show, adapting to the source lan-guage of the writer provides significant performance improvement, and our new method also performs better than previous, more complicated methods.
Section 2 presents the theoretical component of the linear learning framework. In Section 3, we describe the experiments, which compare the four learning models. Section 4 presents the key result of this work, a novel method of adapting the model to the source language of the learner. The standard approach to preposition correction is to cast the problem as a multi-class classifica-tion task and train a classifier on features defined on the surrounding context 2 . The model selects the most likely candidate from the confusion set, where the set of candidates includes the top n most frequent English prepositions. Our confusion set includes the top ten prepositions 3 : ConfSet = { on, from, for, of, about, to, at, in, with, by } . We use p to refer to a candidate preposition from ConfSet .

Let preposition context denote the preposition and the window around it. For instance,  X  X  passion to what he X  is a context for window size 2. We use three feature sets, varying window size from 2 to 4 words on each side (see Table 1). All feature sets consist of word n-grams of various lengths span-ning p and all the features are of the form s  X  k ps + m , where s  X  k and s + m denote k words before and m words after p ; we show two 3-gram features for il-lustration:
We implement four linear learning models: the discriminative method Averaged Perceptron (AP); two probabilistic methods  X  a language model (LM) and Na  X   X ve Bayes (NB); and a  X  X ounting X  method SumLM (Bergsma et al., 2009).

Each model produces a score for a candidate in the confusion set. Since all of the models are lin-ear, the hypotheses generated by the algorithms dif-fer only in the weights they assign to the features (Roth, 1998; Roth, 1999). Thus a score computed by each of the models for a preposition p in the con-text S can be expressed as follows: where F ( S,p ) is the set of features active in con-text S relative to preposition p , w a ( f ) is the weight algorithm a assigns to feature f  X  F , and C ( p ) is a free coefficient. Predictions are made using the winner-take-all approach: argmax p g ( S,p ) . The al-gorithms make use of the same feature set F and differ only by how the weights w a ( f ) and C ( p ) are computed. Below we explain how the weights are determined in each method. Table 2 summarizes the four approaches. 2.1 Averaged Perceptron Discriminative classifiers represent the most com-mon learning paradigm in error correction. AP (Fre-und and Schapire, 1999) is a discriminative mistake-driven online learning algorithm. It maintains a vec-tor of feature weights w and processes one training example at a time, updating w if the current weight assignment makes a mistake on the training exam-ple. In the case of AP, the C ( p ) coefficient refers to the bias parameter (see Table 2).
We use the regularized version of AP in Learn-ing Based Java 4 (LBJ, (Rizzolo and Roth, 2007)). While classical Perceptron comes with a generaliza-tion bound related to the margin of the data, Aver-aged Perceptron also comes with a PAC-like gener-alization bound (Freund and Schapire, 1999). This linear learning algorithm is known, both theoreti-cally and experimentally, to be among the best linear learning approaches and is competitive with SVM and Logistic Regression, while being more efficient in training. It also has been shown to produce state-of-the-art results on many natural language applica-tions (Punyakanok et al., 2008). 2.2 Language Modeling Given a feature f = s  X  k ps + m , let u denote the rightmost word in f and v l  X  v r denote all concate-nations of substrings v l and v r of feature f without u . The language model computes several probabil-ities of the form P ( u | v r ) . If f =  X  X ith a passion p what X , then u =  X  X hat X , and v r  X  {  X  X ith a pas-sion p  X ,  X  X  passion p  X ,  X  X assion p  X ,  X  p  X  } . In prac-tice, these probabilities are smoothed and replaced with their corresponding log values, and the total weight contribution of f to the scoring function of p is P v scoring function has a coefficient that only depends on p : C ( p ) =  X   X  prior ( p ) (see Table 2). The prior probability of a candidate p is: where C ( p ) and C ( q ) denote the number of times preposition p and q , respectively, occurred in the training data. We implement a count-based LM with Jelinek-Mercer linear interpolation as a smoothing method 5 (Chen and Goodman, 1996), where each n-gram length, from 1 to n , is associated with an interpolation smoothing weight  X  . Weights are optimized on a held-out set of ESL sentences. Win2 and Win3 features correspond to 4-gram LMs and Win4 to 5-gram LMs. Language models are trained with SRILM (Stolcke, 2002). 2.3 Na  X   X ve Bayes NB is another linear model, which is often hard to beat using more sophisticated approaches. NB ar-chitecture is also particularly well-suited for adapt-ing the model to the first language of the writer (Sec-tion 4). Weights in NB are determined, similarly to LM, by the feature counts and the prior probability of each candidate p (Eq. (2)). For each candidate p , NB computes the joint probability of p and the feature space F , assuming that the features are con-ditionally independent given p : NB weights and its free coefficient are also summa-rized in Table 2. 2.4 SumLM For candidate p , SumLM (Bergsma et al., 2009) 6 produces a score by summing over the logs of all feature counts: g ( S,p ) = X where C ( f ) denotes the number of times n-gram feature f was observed with p in training. It should be clear from equation 3 that SumLM is very similar to NB, with a different free coefficient (Table 2). 3.1 Evaluation Data We evaluate the models using a corpus of ESL es-says, annotated 7 by native English speakers (Ro-zovskaya and Roth, 2010a). For each preposition (article) used incorrectly, the annotator indicated the correct choice. The data include sentences by speak-ers of five first languages. Table 3 shows statistics by the source language of the writer. 3.2 Training Corpora We use two training corpora. The first corpus, WikiNYT , is a selection of texts from English Wikipedia and the New York Times section of the Gigaword corpus and contains 10 7 preposition con-texts. We build models of 3 sizes 8 : 10 6 , 5  X  10 6 , and 10 To experiment with larger data sets, we use the Google Web1T 5-gram Corpus, which is a collec-tion of n-gram counts of length one to five over a corpus of 10 12 words. The corpus contains 2 . 6  X  10 10 prepositions. We refer to this corpus as GoogleWeb .
We stress that GoogleWeb does not contain com-plete sentences, but only n-gram counts. Thus, we cannot generate training data for AP for feature sets Win3 and Win4: Since the algorithm does not as-sume feature independence, we need to have 7 and 9-word sequences, respectively, with a preposition in the middle (as shown in Table 1) and their corpus frequencies. The other three models can be eval-uated with the n-gram counts available. For exam-ple, we compute NB scores by obtaining the count of each feature independently, e.g. the count for left context 5-gram  X  X ngineer with a passion p  X  and right context 5-gram  X  p what he does . X , due to the con-ditional independence assumption that NB makes. On GoogleWeb , we train NB, SumLM, and LM with three feature sets: Win2, Win3, and Win4.

From GoogleWeb , we also generate a smaller training set of size 10 8 : We use 5-grams with a preposition in the middle and generate a new count, proportional to the size of the smaller cor-pus 9 . For instance, a preposition 5-gram with a count of 2600 in GoogleWeb , will have a count of 10 in GoogleWeb -10 8 . 3.3 Results Our key results of the fair comparison of the four algorithms are shown in Fig. 1 and summarized in Table 4. The table shows that AP trained on 5  X  10 6 preposition contexts performs as well as NB trained on 10 7 (i.e., with twice as much data; the perfor-mance of LM trained on 10 7 contexts is better than that of AP trained with 10 times less data ( 10 6 ), but not as good as that of AP trained with half as much data ( 5  X  10 6 ); AP outperforms SumLM, when the lat-ter uses 10 times more data. Fig. 1 demonstrates the performance results reported in Table 4; it shows the behavior of different systems with respect to preci-sion and recall on the error correction task. We gen-erate the curves by varying the decision threshold on the confidence of the classifier (Carlson et al., 2001) and propose a correction only when the confidence of the classifier is above the threshold. A higher pre-cision and a lower recall are obtained when the de-cision threshold is high, and vice versa.

We now show a fair comparison of the four algo-rithms for different window sizes, training data and training sizes. Figure 2 compares the models trained on WikiNY T -10 7 corpus for Win4. AP is the su-perior model, followed by NB, then LM, and finally SumLM.

Results for other training sizes and feature 10 set configurations show similar behavior and are re-ported in Table 5, which provides model compari-son in terms of Average Area Under Curve (AAUC, (Hanley and McNeil, 1983)). AAUC is a measure commonly used to generate a summary statistic and is computed here as an average precision value over 12 recall points (from 5 to 60): The Table also shows results on the article correc-tion task 11 .
 3.3.1 Effects of Window Size
We found that expanding window size from 2 to 3 is helpful for all of the models, but expanding win-dow to 4 is only helpful for the models trained on GoogleWeb (Table 6). Compared to Win3 , Win4 has five additional 5-gram features. We look at the pro-portion of features in the ESL data that occurred in two corpora: WikiNY T -10 7 and GoogleWeb (Ta-ble 7). We observe that only 4% of test 5-grams oc-cur in WikiNY T -10 7 . This number goes up 7 times to 28% for GoogleWeb , which explains why increas-ing the window size is helpful for this model. By comparison, a set of native English sentences (dif-ferent from the training data) has 50% more 4-grams and about 3 times more 5-grams, because ESL sen-tences often contain expressions not common for na-tive speakers.
 In this section, we discuss adapting error correction systems to the first language of the writer. Non-native speakers make mistakes in a systematic man-ner, and errors often depend on the first language of the writer (Lee and Seneff, 2008; Rozovskaya and Roth, 2010a). For instance, a Chinese learner of English might say  X  X ongratulations to this achieve-ment X  instead of  X  X ongratulations on this achieve-ment X , while a Russian speaker might say  X  X ongrat-ulations with this achievement X .

A system performs much better when it makes use of knowledge about typical errors. When trained on annotated ESL data instead of native data, sys-tems improve both precision and recall (Han et al., 2010; Gamon, 2010). Annotated data include both the writer X  X  preposition and the intended (correct) one, and thus the knowledge about typical errors is made available to the system.

Another way to adapt a model to the first language is to generate in native training data artificial errors mimicking the typical errors of the non-native writ-ers (Rozovskaya and Roth, 2010c; Rozovskaya and Roth, 2010b). Henceforth, we refer to this method, proposed within the discriminative framework AP, as AP-adapted . To determine typical mistakes, error statistics are collected on a small set of annotated ESL sentences. However, for the model to use these language-specific error statistics, a separate classi-fier for each source language needs to be trained.
We propose a novel adaptation method, which shows performance improvement over AP-adapted . Moreover, this method is much simpler to imple-ment, since there is no need to train per source lan-guage; only one classifier is trained. The method relies on the observation that error regularities can be viewed as a distribution on priors over the cor-rection candidates . Given a preposition s in text, the prior for candidate p is the probability that p is the correct preposition for s . If a model is trained on na-tive data without adaptation to the source language, candidate priors correspond to the relative frequen-cies of the candidates in the native training data. More importantly, these priors remain the same re-gardless of the source language of the writer or of the preposition used in text. From the model X  X  per-spective, it means that a correction candidate, for example to , is equally likely given that the author X  X  preposition is for or from , which is clearly incorrect and disagrees with the notion that errors are regular and language-dependent.

We use the annotated ESL data and define adapted candidate priors that are dependent on the author X  X  preposition and the author X  X  source lan-guage. Let s be a preposition appearing in text by a writer of source language L 1 , and p a correction candidate. Then the adapted prior of p given s is: where C L 1 ( s ) denotes the number of times s ap-peared in the ESL data by L 1 writers, and C L 1 ( s,p ) denotes the number of times p was the correct prepo-sition when s was used by an L 1 writer.

Table 8 shows adapted candidate priors for two author X  X  choices  X  when an ESL writer used on and at  X  based on the data from Chinese learners. One key distinction of the adapted priors is the high prob-ability assigned to the author X  X  preposition: the new prior for on given that it is also the preposition found in text is 0 . 70 , vs. the 0 . 07 prior based on the native data. The adapted prior of preposition p , when p is used, is always high, because the majority of prepo-sitions are used correctly. Higher probabilities are also assigned to those candidates that are most often observed as corrections for the author X  X  preposition. For example, the adapted prior for at when the writer chose on is 0 . 10 , since on is frequently incorrectly chosen instead of at .

To determine a mechanism to inject the adapted priors into a model, we note that while all of our models use priors in some way, NB architecture di-rectly specifies the prior probability as one of its pa-rameters (Sec. 2.3). We thus train NB in a traditional way, on native data, and then replace the prior com-ponent in Eq. (3) with the adapted prior, language and preposition dependent, to get the score for p of the NB-adapted model: g ( S,p ) = log { prior ( p,s,L 1 )  X  Y
We stress that in the new method there is no need to train per source language, as with previous adap-tion methods. Only one model is trained, and only at decision time, we change the prior probabilities of the model. Also, while we need a lot of data to train the model, only one parameter depends on annotated data. Therefore, with rather small amounts of data, it is possible to get reasonably good estimates of these prior parameters.

In the experiments below, we compare four mod-els: AP , NB AP-adapted and NB-adapted . AP-adapted is the adaptation through artificial errors and NB-adapted is the method proposed here. Both of the adapted models use the same error statistics in k -fold cross-validation (CV): We randomly partition the ESL data into k parts, with each part tested on the model that uses error statistics estimated on the remaining k  X  1 parts. We also remove all prepo-sition errors that occurred only once (23% of all er-rors) to allow for a better evaluation of the adapted models. Although we observe similar behavior on all the data, the models especially benefit from the adapted priors when a particular error occurred more than once. Since the majority of errors are not due to chance, we focus on those errors that the writers will make repeatedly.
 Fig. 3 shows the four models trained on WikiNY T -10 7 . First, we note that the adapted models outperform their non-adapted counterparts with respect to precision. Second, for the recall points less than 20%, the adapted models obtain very similar precision values. This is interesting, espe-cially because NB does not perform as well as AP , as we also showed in Sec. 3.3. Thus, NB-adapted not only improves over NB , but its gap compared to the latter is much wider than the gap between the AP-based systems. Finally, an important performance distinction between the two adapted models is the loss in recall exhibited by AP-adapted  X  its curve is shorter because AP-adapted is very conservative and does not propose many corrections. In contrast, NB-adapted succeeds in improving its precision over NB with almost no recall loss.

To evaluate the effect of the size of the data used to estimate the new priors, we compare the perfor-mance of NB-adapted models in three settings: 2-fold CV , 10-fold CV , and Leave-One-Out (Figure 4). In 2-fold CV , priors are estimated on 50% of the ESL data, in 10-fold on 90%, and in Leave-One-Out on all data but the testing example. Figure 4 shows the averaged results over 5 runs of CV for each setting. The model converges very quickly: there is almost no difference between 10-fold CV and Leave-One-Out , which suggests that we can get a good estimate of the priors using just a little annotated data.
Table 9 compares NB and NB-adapted for two corpora: WikiNY T -10 7 and GoogleWeb . Since GoogleWeb is several orders of magnitude larger, the adapted model behaves better for this corpus.
So far, we have discussed performance in terms of precision and recall, but we can also discuss it in terms of accuracy, to see how well the algorithm is performing compared to the baseline on the task. Following Rozovskaya and Roth (2010c), we con-sider as the baseline the accuracy of the ESL data before applying the model 12 , or the percentage of prepositions used correctly in the test data. From Table 3, the baseline is 93.44% 13 . Compared to this high baseline, NB trained on WikiNY T -10 7 achieves an accuracy of 93 . 54 , and NB-adapted achieves an accuracy of 93 . 93 14 .
 We have addressed two important issues in ESL error correction, which are essential to making progress in this task. First, we presented an exten-sive, fair comparison of four popular linear learning models for the task and demonstrated that there are significant performance differences between the ap-proaches. Since all of the algorithms presented here are linear, the only difference is in how they learn the weights. Our experiments demonstrated that the discriminative approach (AP) is able to generalize better than any of the other models. These results correct earlier conclusions, made with incompara-ble data sets. The model comparison was performed using two popular tasks  X  correcting errors in article and preposition usage  X  and we expect that our re-sults will generalize to other ESL correction tasks.
The second, and most important, contribution of the paper is a novel method that allows one to adapt the learned model to the source language of the writer. We showed that error patterns can be viewed as a distribution on priors over the correc-tion candidates and proposed a method of injecting the adapted priors into the learned model. In ad-dition to performing much better than the previous approaches, this method is also very cheap to im-plement, since it does not require training a separate model for each source language, but adapts the sys-tem to the writer X  X  language at decision time. The authors thank Nick Rizzolo for many helpful discussions. The authors also thank Josh Gioja, Nick Rizzolo, Mark Sammons, Joel Tetreault, Yuancheng Tu, and the anonymous reviewers for their insight-ful comments. This research is partly supported by a grant from the U.S. Department of Education.
