 In this paper, we present a framework for mining diverging patterns , a new type of contrast patterns whose frequency changes significantly differently in two data sets, e.g., it changes from a relatively low to a relatively high value in one dataset, but from high to low in the other. In this frame-work, a measure called diverging ratio is defined and used to discover diverging patterns. We use a four-dimensional vec-tor to represent a pattern, and define the pattern X  X  diverging ratio based on the angular difference between its vectors in two datasets. An algorithm is proposed to mine diverging patterns from a pair of datasets, which makes use of a stan-dard frequent pattern mining algorithm to compute vector components efficiently. We demonstrate the effectiveness of our approach on real-world datasets, showing that the method can reveal novel knowledge from large databases. Categories and Subject Descriptors: H.2.8 [Database Management]: Database applications  X  data mining ; I.5.2 [Pattern Recognition]: Design methodology  X  pattern anal-ysis General Terms: Experimentation Keywords: Diverging patterns, contrast patterns
Contrast patterns are those p atterns that capture impor-tant and significant differences or changes between two or more sets of data in the same domain. Such patterns are use-ful for identifying distinguishing characteristics of data and can also be used to build powerful classifiers [10, 7]. A num-ber of promising methods have been proposed to discover contrast patterns, including emerging pattern mining [6, 2], contrast set mining [4], and some other methods for min-ing complex types of contrasts [11, 14, 12]. However, most of the methods use support and/or confidence measures to evaluate the differences between datasets and do not con-sider the timestamps associated with the occurrences of a pattern. Thus, they cannot discover important differences
The main contributions of this paper are as follows. First, we propose a framework for mining diverging patterns ,anew type of contrast patterns whose frequency changes in differ-ent directions in a pair of data sets. Second, we define a mea-sure, called diverging ratio , to capture the frequency-change-difference of a pattern in two data sets. The measure uses a four-dimensional vector to represent a pattern in a data set and is defined based on the angular difference between its vectors in two data sets. Third, an algorithm is proposed to mine diverging patterns from a pair of data sets. The algorithm makes use of a standard frequent pattern mining algorithm to compute relevant vectors efficiently. Finally, we perform experiments on real-world data sets to show the effectiveness of mining diverging patterns.
Let I = { i 1 , i 2 ,..., i m } be a set of m distinct items .A subset X  X  X  is called an itemset or a pattern .Atransaction over I is a couple T =( tid , I )where tid is the transaction identifier (or time-stamp) and I  X  X  is an itemset. A trans-action T = tid , I is said to support an itemset X  X  X  ,if and only if X  X  I . A transaction database D over I is a set of transactions over I .

The cover of an itemset X in D , denoted as cov ( X , D ), consists of the set of transactions in D that support X , i.e., cov ( X, D )= { tid, I | tid, I  X  X  ,X  X  I } . An itemset X in a transaction database D has a support , denoted as sup ( X , D ), which is the proportion of transactions in D containing X .Thatis, sup ( X, D )= | cov ( X, D ) | |D| ,where |S| is the cardinality of set S .
Definition 1. Assuming that the transactions in a trans-action database D are ordered by their transaction identi-fiers (or time-stamps), the position of a transaction T in D , denoted as  X  ( T , D ), is the number of transactions whose transaction identifier (or time-stamp) is less than or equal to that of T .Thus,1  X   X  ( T , D )  X |D| .

Below we define the weight of a pattern in a database to capture the general distribution of the pattern in the database.

Definition 2. The weight of a pattern X in a database D , denoted as  X  X  X   X  ( X, D )= w 1 ( X, D ) ,w 2 ( X, D ) ,w 3 ( X, D ) ,w 4 ( X, D ) , where w 1 ( X, D ) is the sum of the normalized distances from the transactions containing X in the first half of D to the beginning of D , which is defined as: w 2 ( X, D ) is the sum of the normalized distances from the transactions containing X in the first half of D to the middle position of D , which is defined as: w 3 ( X, D ) is the sum of the normalized distances from the transactions containing X in the second half of D to the middle position of D , which is defined as: 5: for all P  X  X  do 8: Compute div ( P ); 11: end if 12: end for 13: return S DP
There are two major phases in this algorithm. During the first phase (Step 1 and Step 2), all frequent itemsets in the two datasets along with their support counts, support counts in the first half of the databases and two of their weight components are derived using FP-weight (to be discussed below), with t s as the minimum support threshold. In the second phase (starting from Step 3 to the end), the algorithm finds all the diverging patterns between the datasets based on the set of frequent itemsets. In Step 3, patterns that are frequent in both D 1 and D 2 are collected in set S .Fromstep 5 to 10, for each pattern in S the algorithm first computes the two other weights that were not calculated in FP-weight based on the weights and support counts collected in FP-weight . Then it computes the diverging ratio of the pattern based on the pattern X  X  weights in the two datasets. If the pattern X  X  diverging ratio is greater than or equal to t d ,the pattern is a diverging pattern and is added into the set S DP , which is the output of the algorithm.

The computation of the two remaining weight components in Steps 6 and 7 is done as follows: where c 1 ( X, D ), c ( X, D ), w 1 ( X, D )and w 4 ( X, D )werecal-culated by FP-weight in Steps 1 and 2. It is trivial to prove that the above relations hold according to Definition 2.
The FP-weight function extends the FP-growth algorithm [8] to find all the frequent patterns from a dataset and at the same time to compute two of the weight components of each frequent pattern together with the pattern X  X  counts in the whole and first half of the database. The FP-growth algo-rithm first constructs a FP-tr ee, which maps each transac-tion into a path of the tree, while keeping only the frequent items. Each tree node is associated with the count of trans-actions that contain the items on the path from the root to the node. To incorporate weight computation into the min-ing process, we also associate each node with three other fields: w 1 , w 4 and c 1 ,where w 1 holds the sum of the dis-tances between the beginning of the dataset and the transac-tions in the first half of the database which contain the items on the path from the root to the node, c 1 holds the number of such transactions, and w 4 holds the sum of the distances between the end of the dataset and the transactions in the second half of the dataset containing the items on the path from the root to the node. During the FP-tree building pro-cess, when processing a transaction T , if the count value of a node is incremented by 1, we also add  X  ( T , D )tothe w 1 field of the node and increment the count in the c 1 field if T
We conducted the K-S test [13] on all the diverging pat-terns discovered from the above five databases with t s = 0 . 2% and t d =0 . 3. The results show that the distributions of each discovered diverging p attern in the two correspond-ing datasets are significantly different with p-values less than 1%. Table 3 describes some discovered diverging patterns (one for each dataset with discovered diverging patterns) in terms of their support values (column 2 and 3), weights (column 4 and 5), and diverging ratio (column 6).

We also conducted the experiments with other support and diverging ratio thresholds. As expected, at any fixed diverging ratio threshold (or pattern support threshold), the number of generated diverging patterns decreases with the increase of the pattern support threshold (or diverging ratio threshold). We also tested the scalability of DP-mine .Our result indicates that DP-mine has linear scalability against the number of transactions. Detailed results are omitted due to the space limit.
Discovery of useful distinguishing features between data sets is an important objective in data mining. The concept of Emerging Patterns was first introduced in [6] to capture changes or differences between data sets. An Emerging Pat-tern (EP) is defined as an itemset X satisfying growthrate ( X ) = and g&gt; 1 is called the growth rate threshold. Several vari-ants of emerging patterns have been introduced, with Jump-ing Emerging Patterns (JEPs) being the most important one [10]. JEPs are emerging patterns with infinity growth rate. Since a JEP can only be found in one distinct class in the database, it is a good indicator of that class. Other variants of emerging patterns include strong emerging pat-terns (which are emerging patterns with all subsets being emerging patterns) and the Most Expressive JEPs (which are the minimal JEPs) [10]. Different from diverging pat-terns, emerging patterns do not consider how frequency of a pattern changes within a dataset and how this change differs from the change in another dataset.

The problem of contrast-set mining was introduced in [3, 4], and the STUCCO algorithm was proposed to efficiently search through the space of contrast-sets. Contrast-sets are defined as conjunctions of attributes-value pairs that dif-fer meaningfully in their probabilities across several groups. They can be used to identify differences between groups. Follow-up work in [14] discovered that existing commercial rule-finding system, Magnum Opus, can successfully per-form the contrast-set task. The authors concluded that contrast-set mining is a special case of the more general rule-discovery task. None of the above work addresses the prob-lem of finding patterns whose frequency changes in different directions in two contrast data sets.
