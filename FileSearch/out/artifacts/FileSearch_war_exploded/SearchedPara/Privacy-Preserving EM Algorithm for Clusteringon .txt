 The analysis of social networks has attracted increasing amounts of attention in recent years since there have been progre ssively more social applications used in practice. Many clustering algorithms w ith respect to vertices in networks, on the other hand, such as the graph min-cut and label propagation, have been proposed. Most of these methods deal with a so-called assortative mixing model, in which vertices are divided into groups such that the members of each group are mostly connected to other members of the same group [1]. For example, in a communication network (Fig. 1(a)), each student belongs to either of two clubs. They communicate with other students in the same club more frequently than they do with students outside the club. Thus, the methods used for the assorta-tive mixing model could be used to detect the structures in this kind of network. Inversely, in the disassortative mixing networks, vertices have most of their con-nections outside their group. For example, there are two groups of people in Fig. 1(b), producers and consumers. Most of th eir exchanges, denoted by the edges, will occur between these two classes. Ev en though both assortative and disassor-tative mixing models have theoretical and practical significance, their mixture is more meaningful in most practical applications. If, for example (Fig. 1(c)), researchers in the same field were treated as one group, there would generally be more connections inside each group. In addition, some cross-disciplinary re-searchers, such as researchers in computational linguistics, may regularly connect with researchers in other related fields, s uch as linguistics, psychology, and com-puter science, although they may frequ ently also connect with other members of the same group. Newman et al. [1] proposed a probabilistic mixture model that could deal with an assortative and disassortative mixture using an EM al-gorithm. Such a model is realistic for the clustering problem in social networks.
With increasing concerns about the issu e of personal information and privacy protection, many privacy-preserving data mining algorithms have been proposed. In this paper, we consider the clusterin g problem on social networks, in which each member contacts the others via va rious means of communication, such as social applications (MSN, Yahoo Messenger, etc.), mobile phones of different service providers, etc. Their records are stored in different organizations, such as Microsoft, Yahoo, and mobile service providers. The collection of their data always contains large commercial value. However, it is impossible to make these competitors collaborate to perform data mining algorithms, such as clustering. This motivate us to develop a secure clus tering algorithm that can be performed without any support of the organizations. Using this algorithm, not only vertices in the network are clustered, but the pri vacy of each vertex is also protected.
We summarize the related works in sectio n 2. Section 3 introduces some back-ground knowledge and Section 4 formulates our problem. We develop two basic secure summation protocols in Section 5, and propose our main EM-algorithm for private clustering based on these protocols in Sections 6. In Section 7, we discuss our evaluation of the performance of our protocols. The results of exper-iments conducted to evaluate the performance of our protocols are explained in Section 8, and concluding remarks are given in the last section. Newman et al. [1] proposed a probabilistic model for the mixture of assorta-tive and disassortative models, and provided a corresponding EM algorithm, by which all vertices are clustered so that vertices in the same cluster had the same probabilities as if they had a connection with each vertex in the network.
Many kinds of privacy-preserving methods have been proposed to carry out data mining while protecting privacy. In g eneral, privacy-preserving K-means clustering problems can be classified into horizontally partitioned K-means [4], vertically partitioned K-means [5] and arbitrarily partitioned K-means [6]. Meth-ods using privacy-preserving EM clustering have also been proposed [7]. All of these methods deal with distributed databases with large numbers of data.
Secure data analysis in networks has r ecently attracted increasingly more at-tention. Hay et al. [8] proposed an efficient algorithm to compute the distribution of degrees of social networks. Another method of computing users privacy scores in online social networks was provided by Liu et al. [9]. Sakuma et al. [10] used the power method to solve ranking problems such as PageRank and HITS where each vertex in a network was treated as one party and only knew about its neighbors. Similar work was done by Kempe et al. [11].

Even though all these works provided valuable studies, clustering in private peer-to-peer networks has not yet attracted adequate attention. We focus on the clustering problem based on these kinds of private networks. In addition, we also concentrate on the mixture of assortative and disassortative models. Let us consider an un-weighted directed network of n vertices, numbered 1 ,  X  X  X  ,n . The adjacency matrix of the network is denoted by A with elements A ij =1,if thereisanedgefrom i to j , and 0 otherwise. If there is an adjacency from i to j , we say that i is a parent of j ,and j is a child of i .Wedenote pa ( i )asthesetof all parents of vertex i and ch ( i ) as the set of its children. The union of pa ( i )and ch ( i )isreferredtoastheneighborsof i . All vertices fall into C clusters, and g i denotes the cluster to which vertex i belongs. These g i s are treated as unknown or hidden data, and the purpose of our model is to deduce g i s from the adjacency matrix A .Weusethenotation[ C ] to denote the collection, { 1 , 2 ,  X  X  X  ,C } . 3.1 Probabilistic Mixture Model Let  X  ri denote the probability that a link from a vertex in cluster r is connected to vertex i ,and  X  r denote the fraction o f vertices in cluster r . The normalization conditions ( C r =1  X  r =1 , n i =1  X  ri = 1) are satisfied. Using the probabilistic mixture model [1], the structural feature s in large-scale network can be detected by dividing the vertices of a network into clusters, such that the members of each cluster had similar patterns of connections to other vertices. We illustrate this generative graphical model in Fig. 2.

In Fig. 2,  X  expresses the vector (  X  1 , X  2 ,  X  X  X  , X  C );  X  r expresses the vector (  X  hidden variables g i s (the cluster labels of vertices) are generated from a discrete probability distribution with parameter  X  , i.e., Pr( g i = k )=  X  k ,whichmeans the probability that vertex i belongs to cluster k is  X  k .Afterall g i s are deter-mined, each vertex will choose some vertices with a multinomial distribution with corresponding parameter  X  g i (the g th i row in  X  ), and connect itself to each chosen vertex. Since the members of ea ch cluster share the same parameter  X  g i , they have similar patterns of connect ions to other vertices in the network.
Newman et al. [1] also proposed an EM-algorithm to infer the probabilities of these hidden variables. The E-step and M-step are derived as follows.
Here q ir is defined as the probability that vertex i is a member of cluster r :
Since q ir s denote the probability of g i , inferring q ir s is equivalent to inferring g . The adjacency matrix, A , is treated as observed data. q ir s are initialized to be arbitrary values in the beginning of the EM-algorithm, and converge to the final results after several rounds of E-steps and M-steps. 3.2 Utilities of Privacy-Preserving Data Mining Homomorphic Encryption. In a public key encryption system, a public key pk , used to encrypt a given message, and a private key sk , used to decrypt the cryptograph, are generated by an asymmetric key algorithm. The private key is kept secret, while the public key may be widely distributed. Given a plaintext m , c = E pk ( m, t ) denotes a random encryption of m ,and d = D sk ( c ) denotes the decryption of c ,where t is randomly generated from Z N ,and N is a large positive integer. Paillier encryption [12] is a public key encryption system. It also satisfies additive homomorphism, i.e., there is an operation  X   X   X , s.t.  X  m 1 ,m 2  X  Z N , where t , t 1 and t 2 are random numbers. We will omit these random numbers when they were not necessary. Using this property, we can securely compute the cryptograph of the summation of two numbers, m 1 and m 2 , only given their cryptographs. The following condition can be obtained from (4).
 Secure Summation Protocols. Suppose each party has a private input. All the parties collaborate to compute the summation of all their inputs, without any party obtaining any information about other parties. Such a protocol is called a secure summation protocol. Many secure summation protocols, such as those by Kantarcoglu et al. [13], have been proposed. But these methods have been based on the assumption that any two parties are connected. We focus on the clustering problem in a so cial network described in Section 3. Furthermore, we also protect the pri vacy of each vertex in the network. 4.1 Assumptions We treat each vertex in the network as one party. Thus, a network containing n vertices becomes an n -party system. We also assume that this network is a connected network, in which there is at least one path between any pair of vertices. There is no special vertex in the n etwork, i.e., each vertex performs the same operations. These assumptions are of practical significance. For example, the relations of sending e-mail can be use d to construct a network. Each vertex (an e-mail user) can be seen as one par ty. Hence, each e-mail user knows its neighbors, since it is connected to each neighbor using e-mail. Also, all e-mail users in this network are equivalent.

Since the vertices, such as e-mail users, never want to reveal private informa-tion about themselves in practice, we n eed to consider the privacy of each vertex in the network. We specifically assume that each vertex only knows about itself and its neighbors. First, it knows all information about itself. Second, it only knows about the connections with its neighbors. Third, it knows nothing about other vertices, not even whether they exi st. Moreover, we assume all parties are semi-honest, which means that they all correctly follow the protocol with the exception that they keep a record of all t heir intermediate computations.
The knowledge range of any vertex is outlined in Fig. 3. We take the white vertex as the current vertex. It only knows about its neighbors (gray) since there is an edge between them. However, it does not know anything about the other (black) vertices, and even does not know w hether they exist. In addition, it even does not know whether any pair of its neighbors is connected or not. 4.2 Private Variables and Public Variables parties. The A ij denotes whether the pair of ( i, j ) is connected, so we treat it as private information of parties i and j .The  X  r denotes the fraction of vertices in cluster r . As it contains nothing about individual parties, we publish it to all parties. The  X  rj expresses the relationship between cluster r and vertex j .We assume it is only known to party j .The q ir is similarly only known to party i . We propose two secure summation protocols for the private network. 5.1 Local Secure Summation Protocol Suppose a party, numbered 0, has m children, numbered 1 , 2 ,  X  X  X  ,m , in turn. Each of these parties has a private input x i ( i =0 , 1 ,  X  X  X  ,m ). After this protocol is executed, party 0 securely obtains the summation: x = m i =0 x i , while other parties obtain nothing. We assume that party 0 only communicates with its children, and these children do not communicate with each other.
The detail of this protocol is shown in Table 1. Since only Party m can decrypt messages, Party 0 can obtain nothing about x i from X i ( i  X  X  1 , 2 ,  X  X  X  ,m  X  1 } ). From the homomorphism of encryption, Z = E pk ( r 0 + m  X  1 i =1 x i ), Party m can then compute z = r 0 + m  X  1 i =1 x i .AsParty m does not know r 0 , it can obtain nothing about m  X  1 i =1 x i from the values of z . In summary, nothing can be inferred from the intermediate information other than the final result, x . 5.2 Global Secure Summation Protocol The goal of this protocol is to securely sum up the inputs of all parties in our distributed network without revealing the privacy of any party. The final result is published to all parties throughout the network. Under the assumption in Section 4, each party can only communica te with its neighbors. Nevertheless, we can arbitrarily choose one party as a root and construct a spanning tree T from the network, since the network is connected. We use T to accumulate and distribute data.

The detail of this protocol is shown in Table 2. The equation in line 06 implies that each vertex accumulates the cryptographs of the summation of the sub-tree of itself, and sends the result, Y i ,toitsparentin T . Hence Y 1 in the root is the cryptograph of the summation of all vertices. Moreover, since only Party n can decrypt messages, nothing is reveale d through the execution of the protocol other than the final result. The main procedure in our private clustering is the same as the original method, in which E-step and M-step were performe d repeatedly until convergence. The only difference is that we need to protect th e privacy of each vertex in each step. 6.1 Private E-step In the private E-step, each Party i computes its private q ir s in (1) without revealing  X  rj s. We now simplify the E-step (1) by introducing a new variable: Hence, the q ir of party i can be rewritten as follows, for r  X  [ C ]. If party i obtains the values of  X  ir s( r  X  [ C ]), the q ir s can be directly computed. Consequently, we focus on securely computing of  X  ir s (6). Although (6) is a product of n items, from the definitions of A ij , we could eliminate the term  X  rj if party j is not a child of party i . In other words, the value of  X  ir becomes the product of  X  r and the  X  rj s of all children of party i , i.e., Hence, we have Here, each log  X  rj can be seen as a private input of party j . Then, our goal becomes to securely compute the summation of these log  X  rj s( j  X  ch ( i )). To do this, we only need to perform Protocol 1 by treating these log  X  rj s( j  X  ch ( i )) as the parameters of this protocol (private inputs of children of party i ). Throughout this execution, the value of each  X  rj is kept secret with each party. 6.2 Private M-step In the private M-step, each Party j computes  X  rj s and all parties obtain the  X  rs in (2) without revealing any q ir s. We now introduce a new variable: Similarly to (8),  X  rj can be rewritten as:
Similarly, treating q ir s as the private inputs of its parents, party j can securely compute the value of  X  rj with Protocol 1 without revealing any information about q ir s. In addition, substituting the definition of  X  rj into (2),  X  rj becomes
Since Party j does not know the values of  X  rk sfor k = j , it cannot compute the  X  r = n k =1  X  rk .As  X  r does not include any private information, we publish  X  r ( r computing the summation of the private inputs of all parties in the network and publishing the final result to all parties. Hence, it can be solved with Protocol 2. Given the values of  X  r s( r  X  [ C ]), party j can compute  X  rj s using (12) by itself.
Using the definition of  X  r and treating q ir as the private input of each party in the network, securely computing  X  r is equivalent to securely summing all parties in the entire network and it can thus be solved using Protocol 2. We discuss the efficiency of our method h ere. Both computat ion and communi-cation can be carried out in parallel i n the execution of our protocol. As each party performs operators with only one neighbor at the same time, evaluating the total running time is equivalent to the edge coloring problem in graph theory. The edge coloring of a graph is generally the assignment of  X  colors  X  X oitsedges so that no two adjacent edges have the same color. Vizing [15] has shown that the color index of a graph with maximum vertex-degree K is either K or K +1.
We now discuss the running time for one round of computation, which includes one E-step and one M-step. In the E-step, each party i performs Protocol 1 with all its children for C times. From Vizings conclusion [15], the total running time for this stage is O ( CK ). In the M-step, the  X  r sand  X  r s are all accumulated with Protocol 2. Because the running time for one duration of Protocol 2 is O (log K n ) and the  X  r sand  X  r s include 2 C values, the running time for these accumulations is O ( C log K n ). The secure computation of  X  rj involves C times of executions of Protocol 1 with all its parents. From Vizings conclusion [15], the total running time for this computation is at most O ( CK ).
 In summary, the running time for one round of E-step and M-step is O ( CK + C log K n ). Nevertheless, this is just an atomic operation of the entire EM-algorithm. If we need to perform R rounds of E-step and M-step until they converge, the entire running time will become O ( RC ( K +log K n )). We implemented the protocols in C++ using the OpenSSL library, which is an implementation with large numbers. Our machines were standard personal com-puters with Intel Pentium Core2 Duo CPU s, with a frequency of 2.67 GHz, and 2.00 GB of RAM. A homomorphic encryption system, the Paillier cryptosys-tem [12], was used to implement the protocols. The network environment in our experiments was a wireless LAN based on IEEE802.11g/IEEE802.11b.

We used artificial and real data to evaluate the accuracy and efficiency of our protocol. The artificial data were generated from generative models with differ-ent parameters. We evaluated them by comparing the inferred results with the corresponding parameters. Moreover, we selected a network of books about US politics compiled by Valdis Krebs [16] as the real data, in which nodes repre-sented books about US politics sold by Amazon.com and edges represented the co-purchasing of books by the same buyers, as indicated by the customers who bought this book also bought these other books feature on Amazon. Nodes were given three labels to indicate whether they were liberal , neutral ,or conservative . We compared our inferred results with them. 8.1 Accuracy We executed our protocol and counted the number of results that matched the true values. We used matching rate, the percentage of matched data, to evalu-ate accuracy. In Fig. 4, each line expresses the relation between the number of vertices and the accuracy with respect to a special number of clusters. We found that the results could be correctly inferred with our protocol for three clusters. However, increasing the number of clust er will lead to a decrease in accuracy. Fortunately, we could incr ease accuracy by increasi ng the number of vertices. This can be verified from Fig. 4, in which each line is increasing. We also eval-uated the speed of convergence by counting the number of necessary rounds of computation until convergence occurred ( Fig. 5). We found that convergence be-came faster when there were far more vert ices than numbers of clusters. We then evaluated the data set of books about US politics [16]. Although this network contains only 105 vertices and 441 pairs of edges, the accuracy was about 86%. The intuitive image of these experimental results of real data are shown in Fig. 6. We found they are quite close to the original data. 8.2 Efficiency We used two computers in this experiment to simulate distributed computation. We executed the operators for each pair one-by-one by trea ting these two com-puters as two adjacent parties and recording the running time for each step. We designed a parallel solution using Vizing X  X  solution [15], and calculated the entire computational time in this parallel environment. All of our experimental results also contained the communication time. Fig. 7 plots the relation between the number of vertices and the total running time with respect to the different number of cluster. Combined with Fig. 5, we also obtained the results in Fig. 8, which illustrates one-round of running time with respect to different numbers of clusters and vertices. An interesting phenomenon is that increasing the number of vertices can decrease the entire running time (Fig. 7), although one-round run-ning time (Fig. 8) is nearly independent of the number of vertices. This implies our privacy-preserving schema for clus tering can be applied to very large-scale networks such as social networks. Fig. 9 also compares the running time with the maximum degree. The one-round of running time is increased with the increase in the maximum degree. We also found that the results in Fig. 9 agree with our description in Section 7. We also eva luated the real data using the protocol with encryption. It only needed 12 rounds of computations until convergence occurred. The entire running time was about 11 sec. That implies the average running time for one-round of computation is only about 1 sec. We proposed a secure EM-algorithm to cl uster vertices in a private network in this paper. This method deals with the mixture of assortative and disassortative mixing models. Assuming that each vertex is independent, private, and semi-honest, our algorithm was sufficiently s ecure to preserve the privacy of every vertex. The running time for our algorithm only depended on the number of clusters and the maximum degree. Since our algorithm does not become ineffi-cient with larger amounts of data, it can be applied to very large-scale networks.
