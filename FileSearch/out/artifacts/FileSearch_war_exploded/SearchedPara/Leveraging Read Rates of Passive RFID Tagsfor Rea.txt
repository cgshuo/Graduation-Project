 RFID (radio frequency identification) technology has been widely used for object tracking in many real-life applications, such as in-ventory monitoring and product flow tracking. These applications usually rely on passive RFID technologies rather than active ones, since passive RFID tags are more attractive than active ones in many aspects, such as lower tag cost and simpler maintenance.
RFID technology is also important for indoor location tracking systems that require high degree of accuracy. However, most ex-isting systems estimate object locations by using active RFID tags, which usually incur localization error of more than one meter. Al-though recent studies begin to investigate the application of passive tags for indoor location tracking, these methods are far from de-ployable and research of this application is still in its infancy.
In this paper, we propose a new indoor location tracking sys-tem, named PassTrack, which relies on the read rates of passive RFID tags for location estimation. PassTrack is designed to tolerate noise arising from external environmental factors, by probabilisti-cally modeling the relationship between tag read rate and tag-reader distance, and updating the model parameters based on the current readings of reference tags.

Besides tolerance of noise, PassTrack is also outstanding in terms of localization accuracy and efficiency. Several new approaches for location inference are supported by PassTrack, and the best one in-curs an average error of around 30 cm, and is able to carry out over 7500 location estimations per second on an ordinary machine. Fur-thermore, as a result of using pa ssive RFID tags, PassTrack also enjoys the many other benefits of passive RFID tags mentioned be-fore. We have conducted extensive experiments on both real and synthetic datasets, which demonstrate that our PassTrack system outperforms the previous localization approaches in localization accuracy, tracking efficiency and space applicability.
 H.2.4 [ Database Management ]: Systems Passive, RFID, tag, read rate, localization
A variety of methods have been proposed for the purpose of ob-ject location tracking, such as those based on GPS, ultrasound, in-frared and RFID [10]. While GPS-based localization systems are widely utilized for outdoor envir onments, the GPS technology has poor performance for indoor applications, due to its requirement of line-of-sight signal reception from the satellite s. For indoor loca-tion tracking, RFID-based localization technologies have become popular due to the simplicity of attaching tags to target objects, as well as their better tolerance to errors.

There has been over a decade of research on RFID localization, most of which make use of active tags [1, 9, 14] due to their long read range of up to 100 meters. Recently, passive RFID tags are advocated in several studies [3, 6, 10] for location estimation, since they are more attractive than active ones in the following aspects:
Despite the above benefits, most existing research and applica-tions on passive RFID tags simply focus on determining the general existence or non-existence information within the range of RFID detection [2, 3, 5, 6, 8], and research on location estimation using passive tags is still in its infancy.

However, high-accuracy object location estimation is desired for many applications, such as tracking equipment and personnel in hospitals, and providing location-specific information in supermar-kets, museums and libraries. For example, the PlaceLab Couple 1 Dataset 1 records the RFID tagging data about a one month stay of a couple in the PlaceLab. In this app lication, the activities  X  X sing a computer X  and  X  X leeping deeply X  of a subject cannot be differ-entiated by an active-tag-based localization system, if the bed is only one meter away from the computer desk. Other applications http://architecture.mit.edu/house_n/data/ PlaceLab/PLCouple1.htm include using the estimated trajectory data for trajectory mining us-ing existing algorithms [15, 16, 17, 18] which can tolerate a certain degree of inaccuracy.

In this paper, we propose a pass ive RFID system for real-time in-door location track ing, named PassTrack, which translates streams of raw RFID readings into estimated object trajectories with high efficiency. This is important for many database applications involv-ing RFID data.

Our main contributions are summarized as follows:
The rest of the paper is organized as follows: Section 2 intro-duces the components of the PassTrack system, including the adap-tive reader detection model and the likelihood-based location infer-ence model. The former is further described in Section 3, and the latter is explained in detail in Section 4. In Section 5, we report extensive experiments which verify that our approach is superior to the existing methods in both localization accuracy and efficiency. Finally, we review the related work in Section 6, and conclude the paper in Section 7.
The setting of our tracking system is outlined as follows: We use n
RFID readers/antennae { R 1 , R 2 , ... , R n } , m passive reference tags { T 1 , T 2 , ... , T m } ,and u passive tracking tags O u } to track u objects. The key to our approach is to decouple the reader detection model from the location inference process:
This decoupling strategy is important for PassTrack. While ex-ternal factors such as changes in temperature and humidity, and the number of objects nearby may influence the detection performance of a reader, our approach is able to dynamically adapt the detec-tion model to the changing environment, due to the online learning of the reader detection models. We elaborate on these parts in the following two sections.
The location inference model of PassTrack relies on the reader detection model , which estimates the distance of a tag to an RFID antenna, by the readings of that tag received by the antenna. RSSI (received signal strength indicator), which is widely adopted in the active-tag-based systems [1, 9, 11, 12, 14], is usually not available for passive tags [10]. Therefore, we leverage the read rate informa-tion for distance estimation.

The read rate of a tag by an antenna is usually estimated by the tag response count in a fixed number of interrogation cycles sent from the antenna. For example, if an antenna detects the response from a tag in 3 out of a series of 10 interrogation cycles, the read rate is estimated to be 0.3.
 We formally define the reader detection model as follows: detection model of a reader/antenna R is a function p ( ) given the Euclidean distance = || T, R || between a tag T reader R , returns the expected read rate of T by R .

Both [2] and [3] observed that the read rate of a passive tag re-mains high (close to 1) when the tag is within a certain distance  X  major from the reader, and then decreases almost linearly with the increment of the distance until the read rate reaches 0, where the corresponding distance is  X  minor . The former range ( 0 is termed the major detection region , while the latter (  X  minor )istermedthe minor detection region .

The shape of the  X  X ead rate vs. distance X  curve is like an upside-down curve of the logistic function f ( )= 1 1+ e  X  ,where is the distance between the tag and the antenna. Therefore, we choose the function p ( )= 1 1+ e a + b ( a&gt; 0 ,b &lt; 0) to fit the reader detection model, where a can be adapted to control how sharp the read rate decreases in the minor detection region ,and b can be adapted to control the range of the major detection region .

Now, we formulate our reader detection model for reader R follows: where p i is the tracking/reference tag read rate at R i ,and resents the distance from the tracking/reference tag at location ( x, y ) , to reader R i at location ( x i ,y i ) , and is given by:
For each reader R i , there are two parameters ( a i can be determined dynamically. This allows for the adaption of the model to a changing environment. We next explain how to estimate the current model parameters a i and b i , based on the read rates of the reference tags.
 Let p ij denote the current read rate of each reference tag mated by reader R i . Furthermore, since the locations of the readers and the reference tags are fixed, we can easily get the distance || R i ,T j || between R i and T j . As a result, during each time step, we have access to a set of pairs { ( p i 1 , i 1 ) , ( p i 2 for each reader R i .

Equation (1) implies that ln( 1 p i  X  1) = a i i + b i . Thus we can employ the least square method to estimate a i and b i transformed set of pairs { (ln( 1 p i 1  X  1) , i 1 ) , (ln( 1 ...
Our approach is cost-effective, since we can afford to distribute many cheap passive tags in the whole tracking region to enable the learning of an accurate model. Note that very far (or close) reference tags with read rate 0 (or 1) should be discarded, since Equation (1) does not allow p =0 (or p =1 ).

Our reader detection model is more accurate than the 3-state model in [3] which simply assumes a fixed constant read rate value among the minor detection region . More importantly, our model is adaptive to the environment and thus gives rise to more accurate location estimation.
We evaluated our reader detection model in the real indoor en-vironments shown in Figures 1(a) and (b). In our experiments, 3 to 4 passive reference tags are placed in each of the four orthog-onal directions around an antenna, with different distances to the antenna.

Figure 1(a) simulates the case where the readers/antennea and the reference tags are deployed on the ground, and each moving object sticks a tag at the bottom. For example, if the tracking ob-jects are people, the tracking tags can be stick on the side of their shoes. To avoid the directional effect of the tags, each person can stick two tags of the same ID on both sides of their shoes. The reference tags are put at distances 1.05m, 1.35m, 1.65m and 1.95m from the antenna in two directions, and at distances 0.9m, 1.2m, 1.5m and 1.8m from the antenna in the other two directions. The tag positions are interleaved on the two pairs of directions, so as to provide more ( distance, read rate ) pairs for model fitting.
Figure 1(b) simulates the case where the readers/antennea and the reference tags are deployed 1m above the ground, e.g. stuck on the side of desks or walls. We make a shelf to build this setting. The shelf is made of styrofoam to minimize its impact on RFID detec-tion. In this scenario, tracking tags can be stuck around the waists of people. The reference tags are put at distances 0.9m, 1.5m, 2.1m and 2.7m from the antenna in two directions, and at distances 1.2m, 1.8m and 2.4m from the antenna in the other two directions.
We use the Intermec IF61 smart reader which supports connec-tion with 4 antennae, and connect it to an FCC-4 tuned dipole an-tenna produced by A.H. Systems. The antenna is omni-directional, which conforms to the models in the previous studies such as [3]. As for the passive tags, we use UHF Gen2 DogBone RFID tags from UPM Raflatac. We set the response timeout parameter so that it takes about 1 second to accomplish 5 interrogation cycles.
We measure the read rates based on 10 interrogation cycles for 20 times, 20 cycles for 15 times, and 100 cycles for 10 times. Fig-ures 2 and 3 present the  X  X ead rate vs. distance X  relations for the two experimental settings. For example, Figure 2(a) shows the tag read rates (points) and the learned curves for all the 20 runs based on 10 cycles in the ground-level setting. Figures 2(b) X (c) and 3(a) X  (c) are similarly obtained. In Figures 2(d) and 3(d), the blue points are the average read rates of the 10 runs based on 100 cycles, and the red curves are obtained by least squares on these points.
It is obvious that the slopes of the curves in Figure 3 are gentler than those in Figure 2, which implies that read rate decays more slowly with distance in the waist-level setting, possibly due to less interference of the ground. Clearly, the read rate measurements based on 100 interrogation cycles are the most stable ones, and therefore, we determine the parameters a and b based on readings from the latest 100 cycles (around 20s). By fitting p ( )= 1 we have a =9 . 4831 and b =  X  16 . 2015 in Figure 2(d), and 3 . 6423 and b =  X  7 . 8597 in Figure 3(d).
In this section, we describe our approach of estimating object locations using the dynamic reader detection model.

Consider the event that during the latest N interrogation cycles, the object with a tracking tag O responds to reader R i for This happens with probability N k i p k i i (1  X  p i ) N  X  k that each reader detects the tag of each object independently, which is also assumed in other work such as [3], then the probability that O responds k i times to reader R i ( i =1 , 2 ,  X  X  X  ,n ) is given by
L = where C = n i =1 N k i is a constant.

Our aim is to find the value of O  X  X  location l =( x, y ) imizes the likelihood L , which is equivalent to minimizing the cor-responding negative log-likelihood L =  X  ln( L/C ) (without con-sidering the constant C&gt; 0 ):
L =  X 
Figure 5 shows a tracking area of 6 m  X  6m = 36 m 2 ,wherethe 9 black circles represent readers/antennae, and the small rectangles represent reference tags. This setting will be used to evaluate the performance of PassTrack in Section 5.

Note that PassTrack actually allows for much more flexible de-ployment that caters to the actual building structures, as long as (1) for each antenna, there exist sufficient reference tags with different distances to it, and (2) for most of the indoor locations, a tracking tag there can be detected by at least 3 to 4 nearby antennae.
The first requirement ensures that there are sufficient learning samples for estimating the reader detection model parameters. The second requirement is called detection range overlap . Besides im-proving localization accuracy, it also allows the system to work even if some reader/antenna gets disconnected.

Refer to the tracking setting in Figure 5 again. We now denote the vector of response count information by k = { k 1 ,k 2 where k i denotes the response count obtained by reader R ure 4(a) demonstrates the values of the negative log-likelihood various locations when the actual location of the object to track is and Figure 4(b) is when the actual location is close to the border ( t ing, and are plotted in a similar manner. For Figures 4(a) X (d), the read rate estimation is based on 5 cycles (which takes around 1s).
We now study how to use the likelihood model of Equation (4) for efficient location inference. One approach is to impose a grid structure on the tracking area, and to evaluate the negative log-likelihood L using Equation (4) at each location on the grid. The location of the object to track is estimated as the location on the grid with the minimum value of L . However, the granularity of the grid structure influences the accuracy of the estimation, and evaluation on a too fine-grained grid structure is time-consuming.
 Another approach to find the location that minimize L is to use Newton X  X  method [7], which is well-known for function optimiza-tion. Newton X  X  method enables faster convergence than gradient descent, since it is based on the second-order Taylor approxima-tion of the target function. As shown in Figures 4(a) X (d), most convex, which is appropriate for applying Newton X  X  method. Since L is not strictly convex, the choice of the initial location to start Newton X  X  method is very important for avoiding being stuck at those non-convex locations, and we choose it to be the result lo-cation of the grid-based method described above, so as to make it close to the global minimum. In this case, a coarse-grained grid structure is adequate, and we adopt an 8  X  8 grid for the tracking area in Figure 5. Algorithm 1 shows the details of our Newton X  X  method, which is adapted from [7].
 Algorithm 1 Object Location Inference by Newton X  X  Method 1: given tolerance &gt; 0 2: Compute the starting point ( x 0 ,y 0 ) using grid search 3: l  X  ( x 0 ,y 0 ) 4: repeat 5: Compute  X  X  ( l ) 6: Compute  X  2 L ( l ) 7: Compute the Newton step: l  X  X  X  (  X  2 L ( l ))  X  1  X  X  ( l ) 8: Compute decrement:  X  2  X  X  X L ( l ) T (  X  2 L ( l ))  X  1  X  X  ( l ) 9: quit if  X  2 / 2  X  10: Choose step size t by backtracking line search 11: l  X  l + t l 12: end repeat
Line 10 of Algorithm 1 uses the backtracking line search algo-rithm shown in Algorithm 2. The default parameters we use for backtracking line search are  X  =0 . 2 , X  =0 . 6 and =10  X  6 Algorithm 2 Backtracking Line Search 1: given a descent direction l at l , 2: t  X  1 3: while L ( l + t l ) &gt; L ( l )+  X t (  X  X  ( l )) T l do 4: t  X   X t 5: end while
In our experiments, we find that Algorithm 1 always terminates within 10 iterations. However, we still set an upperbound of 100 iterations for Algorithm 1. Another special case we handle is when the inferred location leaves the tracking area. In this case, the algo-rithm immediately returns the location estimation of the previous iteration. A third possible scenario is when an object is not de-tected by any reader/antenna within the current time window, in which case we use the old location estimation as the current one. We never encounter such a scenario in our experiments, although it is possible for the RFID readers/antennea to miss readings when there are too many tags in their detection ranges. We do not include the above details in the pseudo-code in Algorithm 1 for better read-ability.

Note that Algorithm 1 requires the computation of the gradient (see Line 5) and Hessian matrix (see Line 6) of L . Fortunately, they have elegant forms that can be evaluated efficiently, as is formalized by Theorem 1 below.

T HEOREM 1. Given the negative log-likelihood function L (Equa-tion (4)), its gradient  X  X  ( l ) and Hessian matrix  X  2 L ( l ) by: where
P ROOF .Since x and y are symmetric, we only need to compute whichisinturnafunctionof l i (Equation (1)), which is further a function of x and y (Equation (2)). For ease of presentation, we define the following notation:
We will use the following property in the computation, which can be easily verified:
L EMMA 1. The derivative of p ( )= 1 1+ e a + b ( a&gt; 0 ,b &lt; 0) is p ( )= p ( )  X  ( p ( )  X  1) .

By taking the partial derivative of L with respect to x ,wehave  X  L
Next, we compute the second derivatives:  X  X  X  X 
To compare with the likelihood-based method described above, we also incorporate a baseline algorithm based on the idea of near-est neighbors (NN), which are popular with the active-tag-based RFID localization systems (see Section 6). The location of an object O is estimated as ( x, y )= n i =1 w i ( x i ,y i weight w j of reader R j is empirically set to be w j = or O with a higher read rate. Our extensive experiments described in Section 5 have shown that the naive NN-based approach in-curs several times more error than our Newton X  X -method-based ap-proach, which verifies that, our Newton X  X -method-based approach best brings out the information contained in read rates.
As there are only 5 interrogation cycles in each second, if we estimate the location of an object for each second solely using the read rates that are measured based on these 5 cycles, we cannot ob-tain read rate values of high precision. Therefore, we use a sliding window of multiple cycles to measure the read rates. While a larger window usually improves the precision of read rate measurements for static objects, this is not the case for moving objects due to the outdated readings in the window. We will study the relationship between window size and localization accuracy in Section 5.5.
In this section, we evaluate the performance of PassTrack in the 6m  X  6m tracking area shown in Figure 5, which is equipped with 9 antennae. To save our research time, we simply use synthetic data instead of real data for the experiments. In order to run experiments in a wide variety of settings, we built a data generator that simulates the multi-antennae scenario according to the real-world study on one-antenna described in Section 3.2.

Data Generator. In each time step (which is 1s), our data gen-erator first generates the locations of the moving objects to track, and then, the readings of each reader are generated according to its reader detection model: in each of the 5 cycles, the tag of a moving object is detected by the reader with the probability p computed from Equation (1).

To avoid generating too idealized readings, we design our data generator to also be able to generate noisy readings that better sim-ulate the real-world scenarios. In the ideal case, the response count value conforms to the binomial distribution with standard devia-tion Np (1  X  p ) . Our data generator generates noisy readings by adding or subtracting (with equal probability) the original re-sponse count by  X   X  Np (1  X  p ) , where the random variable Uniform [0 , X  ] ,and  X  is a user-specified parameter that controls the noise level. If the resulting r esponse count is below 0 (or above it is set to 0 (or N ).

We use [ w ,w u ] to configure the sliding window to include the previous w time steps and the succeeding w u time steps besides the current one. For example, [0 , 0] denotes that the window con-tains only the 5 cycles in the current second, while [  X  1 , 1] that the window contains the cycles from the previous second to the next second ( N =15 ).

Unless otherwise stated, we fix the reader model parameters and b i during data generation and location inference. We set 9 . 4831 and b i =  X  16 . 2015 ( a i =3 . 6423 and b i =  X  7 . 8597 the experiments in the ground-le vel (waist-level) setting. In the sequel, we denote our grid-based localization method as Grid , our Newton X  X  method that uses Grid for initialization as New-ton , our two nearest-neighbor-based methods as NN (where k the speed of a moving object to be 1m/s to simulate walking speed.
All the experiments are run on a Lenovo IBM ThinkPad X201i laptop with a 2.53Hz Intel Core i3 GPU and 2GB memory.
To visualize the effectiveness of our localization approach in sce-narios where objects are always moving, we generate the data that correspond to an object moving in circular and Z-shaped trajecto-(c) Z-Curve, Window =[0 , 0] ries, and invoke Newton to estimate its location at each time step. The experiments are done in the wai st-level setting and the results are shown in Figure 6. In Figures 6(a) X (d), the blue points (con-nected by the solid lines) are the true locations (trajectories) of the object, and the red points (connected by the dotted lines) are the inferred locations (trajectories). The estimated trajectory in Fig-ure 6(b) has a smaller radius than the true circular trajectory, be-cause the window contains the readings from the previous and the next second. For the experiments in Figures 6(a) X (d), Newton is able to recover the original traj ectory of an object with reasonable accuracy: the average error never exceeds 30cm.
A larger sliding window usually improves the precision of read rate measurements for static objects, which in turn tends to increase the accuracy of object location estimation. In this subsection, we study the relationship between window size and localization qual-ity for static objects. We randomly generate the locations for 5 static objects, and run our localization algorithms on the data for 3000 time steps in both the ground-leve l setting and the waist-level setting, with different window sizes. We adopt the window con-figuration [  X  w, w ] , where the parameter w controls the size of the window (which is 2 w +1 ).

For each of the 15,000 ( 5  X  3000 ) location estimations, we com-pute its error distance as the Euclidean distance between the esti-mated location and the true location. One measurement of local-ization accuracy that we use is the average of these 15,000 error distances. Another measurement is the cumulative percentile of er-ror distance which is also adopted in [1].

Figure 7(a) shows the average error distance of our localization algorithms with different window sizes, where the suffix  X  X slf X  (or  X  X gnd X ) means that the corresponding algorithm works at the waist-level (or ground-level) setting. We can see that Newton incurs the least localization error and thus achieves the best accuracy. The average errors of all the algorithms decrease with the increment of window size, and when w =5 , Newton_slf is already around 10cm and Newton_gnd is already around 17cm. In this case, the window size is 2 w +1 = 11 , and as there are 5 cycles in each time step, only 55 interrogation cycles are used to estimate the read rates. This result is much better than the work of [10], which uses 100 cycles to estimate the read rates and still incurs an average error of 19cm.
Since the reader detection range is longer at the waist-level set-ting than at the ground-level one, an object tends to be detected by more readers. As a result, at the waist-level setting, Newton can use more information for location estimation and therefore incurs less error than if it works at ground-level, as illustrated in Figure 7(a). However, this is not the case for the NN-based algorithms: the Figure 7: Effect of Window Size for Static Object Localization waist-level versions are shown to be worse than the ground-level ones in Figure 7(a). This is because the NN-based heuristics lack the support of a formal underlying inference model.

Figure 7(b) shows the cumulative percentile of error distance for our localization algorithms when w =10 , from which we have the similar observations that Newton incurs the least error and the waist-level version works better than the ground-level one. From Figure 7(b), we can see that Newton can estimate the location of an object within 22cm error with 75% probability.
We studied the performance of our localization algorithms for constantly moving objects in Section 5.1 and for static objects in Section 5.2. However, a more practical scenario is when objects frequently change their locations, and stop for some time between two consecutive movements. For example, in inventory monitor-ing, the goods are not likely to change their locations all the time, although they may be moved to different shelves from time to time. The application of resident monitoring also requires to recognize activities such as  X  X eading paper X  (e.g. on sofa) and  X  X sing a com-puter X  (e.g. on a desk), which involve the stay at a specific location for a while.
To study the effect of object moving frequency on localization accuracy, we generate the trajectories of 5 objects that interleave between staying and moving for 3000 time steps. We parameter-ize our data generator with stop duration T , so that each object moves for k steps (turns around if it reaches the wall), where { 1 , 2 , 3 , 4 , 5 } is randomly picked, then stops for T then repeats the above process until 3000 time steps are reached.
Figure 8(a) (or Figure 8(b)) shows the average error distance of our localization algorithms with window [0 , 0] (or [  X  1 , 1] ous stop durations. While both Figures 8(a) and (b) verify the intu-ition that all the algorith ms incur less error for longer stop duration (and thus less frequent movements), the Newton algorithms have more dramatic drop in error with the increment of stop duration in Figure 8(b). This is because more interrogation cycles are used for read rate estimation when window [  X  1 , 1] is adopted, which leads to more accurate read rate estimation, and thus more accurate lo-calization. Both figures confirm that Newton incurs the least error and the waist-level version works better than the ground-level one.
In Section 3.2, we studied the quality of the reader detection models learned using read rate estimations of reference tags based on 10, 20 and 100 interrogation cycles, and showed that estimating read rates based on 100 cycles gives the most stable model.
In this subsection, we further study the effect of window size for reference tag read rate estimation on localization accuracy. While a larger window size gives more accurate read rate estimations of the reference tags, the model learned from these read rate estimations may not be close to the true reader detection model. This is because the true reader detection model changes with time, and the large window contains responses to early interrogation cycles. In fact, there is a delay between the learned model and the true one, and the larger the window size, the longer the delay.

To study the effect of window size on the difference between the learned model and the true one, we randomly generate the locations for 5 static objects, and run our localization algorithms on the data for 200 time steps (1000 cycles). We simulate the change of true reader detection model, by changing the model parameters a linearly from the ground-level parameters (at the beginning of the 1000 cycles) to the waist-level parameters (at the end of the 1000 cycles). Note that this is a more abrupt model change than what is likely to happen in a real world scenario. Then, we learn the reader detection model from read rate estimations of reference tags based on 20, 40, 60, 80, 100 and 120 interrogation cycles.

Figures 9(a) and (b) show both the true model parameters and the learned model parameters in the 200 time steps, where the black lines correspond to the true model parameters, and the green, red and blue curves correspond to the model parameters learned from read rate estimations based on 20, 60 and 120 interrogation cy-cles, respectively. In Figures 9(a) and (b), the learned model pa-rameters present an obvious delay from the true parameters (i.e. the learned parameter curves are approximately the true parame-ter curves shifted towards the left), and the larger the number of interrogation cycles, the longer the delay (note that the colors of the curves from left to right are green, red, blue and black in or-der). Besides, model parameters learned from read rate estimations based on small windows such as the 20-cycle one (the green curve) are very unstable. Figure 11: Effect of Window Size on Localization Accuracy
Figure 10 shows the average error distance of our localization algorithms with different window size for reference tag read rate estimation, where we use window [  X  1 , 1] for tracking tag read rate estimation. We can see that the 60-cycle window leads to the least localization error (around 25cm) for Newton . In the real scenario, the model change is not likely to be as abrupt as our experimental setting, and larger window size such as 100 cycles is likely to be a better choice.
In Section 5.2, we have seen that a larger window increases the accuracy of location estimation for static objects. However, larger window size may not always imply higher localization accuracy for moving objects. On the one hand, a larger window contains more interrogation cycles, which give rise to read rate measure-ments of higher precision. On the other hand, the outdated readings in a larger window have a negative impact on the localization accu-racy, since the tracking object is assumed to be at a fixed location throughout the time in the window.

Therefore, with the increment of window size, one can expect that the localization error drops when the window size is small, and then rises as the window size further increases. The optimal win-dow size depends on the average moving frequency of the tracking objects, and needs to be tuned according to the application. For ex-ample, while window [  X  1 , 1] is better than window [0 , 0] ing constantly moving objects as shown in Section 5.1, the reverse is true for the experiments on static objects in Section 5.2.
To study the relationship between optimal window size and ob-ject moving frequency, we generate the trajectories of 5 objects for 3000 time steps with different stop durations T . Part of the results are shown in Figure 11. Figure 11(a) shows the average error dis-tance of our localization algorithms when T =20 , where we can see that the optimal window parameter is w =1 . In Figure 11(b) which corresponds to T =80 , we can see that the optimal window parameter is w =3 . To sum up, the optimal window size is larger for objects that move less frequently.
So far, we have been assuming that the response count of a tag to a reader within N interrogation cycles strictly follows the binomial distribution. In this set of experiments, we study the tolerance of our algorithm to external interference by varying the parameter of our data generator, which is described at the beginning of this section. We set the maximum value of  X  to be 2.5 so that the read count can be biased by at most 2.5 times its standard deviation, which is a very significant deviation.

Figure 12(a) (or Figure 12(b)) shows the average error distance of our localization algorithms with window [0 , 0] (or [  X  1 , 1] various noise levels, where we can see that the error of Newton_slf increases more dramatically than and finally exceeds that of New-ton_gnd , and therefore Newton_gnd is more tolerant to external in-terference than Newton_slf . From the figures we can see that our localization algorithms, including Newton , all have good tolerance to external interference, and Newton still incurs the least error in noisy environments.
To test the scalability of our localization algorithms, we generate the trajectories of 20 constantly moving objects for varying time steps t , and run our algorithm on these data with window set to [  X  1 , 1] . The execution times of all the algorithms increase linearly with the total number of location estimations (which is 20 t
Figure 13 shows the results of our scalability test, where the NN algorithms take only around 0.1% of the time consumed by Newton on the same number of location estimations, and Grid takes around 85% of the time consumed by Newton .For t = 10,000, the 200,000 ( =20 t ) location estimations are accomplished by Newton in less than 26s. Therefore, over 7500 location estimations can be done for each second by an ordinary computer, which is sufficient for supporting large scale real-time location tracking applications.
In this subsection, we compare our best algorithm, i.e. Newton , with the best algorithm, i.e. Multilateralization ( ML ), in the pio-neering work of [10] that uses passive tags for indoor localization.
We randomly generate the locations for 4 static objects, and run both localization algorithms on the data for 3000 time steps in both the ground-level setting and the wai st-level setting, with different window sizes. Figure 14 shows the results of comparison, where we can see that the average error of ML is over 1m. In fact, ML is not as accurate as the nearest neighbor based methods, let alone Newton . The low accuracy of ML is caused by the small number (3 to 4) of readers that can detect an tracking object, since ML is effective only when many readers can detect an object. However, for passive tags with low detection range, this implies a dense de-ployment of readers/antennea, which is too costly to be carried out.
Most existing localization systems are based on the active RFID technology[1, 9, 11, 12, 14]. The nearest neighbor based algo-rithms are adopted by RADAR [9] and LANDMARC [1] for lo-cation inference, where the location of the target is estimated by properly averaging the locations of the reference points whose re-ceived signal strength distribution is similar to that of the target. Other more advanced models based on the signal propagation char-acteristics include those proposed in [11, 12, 13, 14], such as mul-tilateration and Bayesian graphical modeling.

Passive RFID technology has been studied for data cleaning pur-pose [2, 3, 5, 6, 8]. However, very few work is done to track objects using passive tags, except the pioneering work of [10], which is still primitive in that its experiments are conducted in a very small area of 1.83m  X  1.83m.
Motivated by many advantages of passive RFID tags such as low tag cost and convenience of maintenance, we explore the tech-niques of using passive tags for indoor RFID localization. Our lo-calization system, PassTrack, learns for each reader an adaptive reader detection model that has good tolerance to external interfer-ence. Several algorithms are supported by PassTrack for location inference based on read rates of passive RFID tags, and the best one, Newton , incurs an average localization error of around 30 cm, and is able to carry out over 7500 location estimations per sec-ond on an ordinary machine. The excellent tracking accuracy and efficiency of PassTrack enables it to support large-scale real-time indoor localization applications.
This work is partially supported by HKUST RFID Center un-der grant numbers ITP/022/02LP and SSRI08RGC, and GRF under grant number HKUST 617610. [1] L. M. Ni, Y. Liu, Y. C. Lau and A. P. Patil.  X  X ANDMARC: [2] S. R. Jeffery, M. Garofalakis and M. J. Franklin.  X  X daptive [3] H. Chen, W. Ku, H. Wang and M. Sun.  X  X everaging [4] S.Han,J.Kim,C.-H.Park,H.-C.YoonandJ.Heo. X  X ptimal [5] M. Kodialam and T. Nandagopal.  X  X ast and Reliable [6] T. Tran, C. Sutton, R. Cocci, Y. Nie, Y. Diao and P. Shenoy. [7] S. Boyd and L. Vandenberghe.  X  X onvex Optimization X . [8] L. W. F. Chaves, E. Buchmann and K. B X hm.  X  X agMark: [9] P. Bahl and V. N. Padmanabhan.  X  X ADAR: An In-Building [10] J. Zhou and J. Shi.  X  X FID Localization Algorithms and [11] A. Savvides, C. Han and M. B. Srivastava.  X  X ynamic [12] D. Madigan, E. Einahrawy, R. P. Martin, W. Ju, P. Krishnan [13] T. Roos, P. Myllym X ki and H. Tirri.  X  X  Statistical Modeling [14] R.  X ktem and E. Aydin.  X  X n RFID Based Indoor Tracking [15] A. Monreale, F. Pinelli, R. Trasarti and F. Giannotti. [16] F. Giannotti, M. Nanni, F. Pinelli and D. Pedreschi. [17] J. Lee, J. Han and K. Whang.  X  X rajectory Clustering: A [18] J. Lee, J. Han and X. Li.  X  X rajectory Outlier Detection: A
