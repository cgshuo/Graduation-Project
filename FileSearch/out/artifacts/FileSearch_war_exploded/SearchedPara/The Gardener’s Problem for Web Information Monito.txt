 We introduce and theoretically study the Gardener X  X  prob-lem that well models many web information monitoring sce-narios, where numerous dynamically changing web sources are monitored and local information needs to be periodi-cally updated under communication and computation ca-pacity constraints. Typical such examples include mainte-nance of inverted indexes for search engines and maintenance of extracted structures for unstructured data management systems. We formulate a corresponding multicriteria opti-mization problem and propose heuristic solutions. Categories and Subject Descriptors: H.1.0 [Informa-tion Systems]: Models and Principles  X  General General Terms: Theory, Algorithms, Performance
A gardener has n plants to maintain. Each plant labeled i needs to be maintained at least once every w i days and each maintenance costs c i workload. The gardener has a daily workload capacity of k on any day and k  X  k on average. Assuming all plants were maintained yesterday, find a fea-sible schedule starting from today until forever so that all plants are always maintained in time.

The Gardener X  X  problem well models many information monitoring scenarios. Today we have unprecedented access to information. Information depreciates in value with time. Given a large number of dynamically changing sources to monitor, it is important and challenging to make decisions that keep the information as current as possible yet using as few as possible resources [3].

The World Wide Web consists of a huge collection of de-centralized pages that are modified at random times. Thus, web information monitoring applications abound. For ex-ample, maintenance of inverted indexes for search engines. Due to the explosive growth of the web, crawling web pages has become increasingly challenging. It would take up to 6 months for a new page to be indexed by popular search engines [4]. To substantially improve up-to-dateness of in-verted indexes and save on network bandwidth, incremental crawling [4, 8] was introduced, where crawlers estimate how often pages change, and then schedule pages for revisit based on their estimated change frequency and importance.
As another example, extracted structures (e.g., ER graphs) in unstructured data management systems (e.g., DBLife [7] developed in the context of community information man-agement) need to be maintained periodically. The web is a colossal free text publishing platform. Today the majority of data appear unstructured and managing unstructured data represents the largest opportunity since managing relational data. An essential step in unstructured data management is to extract structures embedded in unstructured data, en-abling structured queries. Web sources are highly dynamic, maintaining extracted structures is a labor intensive under-taking, and developing scheduling techniques to improve up-to-dateness and reduce maintenance cost is critical [7].
From the above-defined Gardener X  X  decision problem, var-ious optimization versions can be derived based on tardiness and workload. The measure tardiness is either 0 (maintained in time) or a positive number indicating the number of days after the due day of a maintenance. Parameter w i is the size of the maintenance window for plant i . The notion of day here is symbolic, it can be time slot of any length. A feasible schedule is one satisfying all the given constraints.
Let K ( d ) be the workload of the gardener at day d , then the daily average workload K = lim t  X  X  X  1 t inclusion of k in the problem definition allows us to derive an optimization criterion that minimizes the total workload, which is equivalent to minimizing K .

For the optimization version, we formulate a multicriteria problem minimizing tardiness and workload simultaneously. The Gardener X  X  problem is about maintenance scheduling. While existing maintenance scheduling problems are single objective [1, 2], real applications often involve several incom-mensurable objectives that need to be optimized simultane-ously. Taking into account of several criteria enables us to propose more realistic solutions to the decision maker [11].
Multicriteria problems do not have a single optimal solu-tion. Instead, all non-dominated solutions form an optimal Pareto set. The entire problem solving procedure usually involves a human decision maker, who evaluates the many alternatives in the Pareto set and chooses the best trade-off. Thus, beyond providing heuristics that generate alternative schedules, we further utilize OLAP technology, allowing de-cision makers to interactively evaluate these schedules by navigating in a simulation cube.
Web Information Monitoring. Although not a tech-nical paper, [3] discusses the opportunities and challenges in web information monitoring in a convincing manner. [4, 8] propose incremental crawlers in an effort to keep inverted indexes fresh. They do not discuss scheduling. [5] theoretically studies a crawler scheduling problem minimiz-ing the fraction of time pages spend out of date, assuming Poisson page change processes and a general distribution for page access time. We do not make such assumptions and we focus on multicriteria maintenance scheduling.

Unstructured data management systems, e.g., DBLife [7], provide an excellent testbed for studying web information monitoring and maintenance scheduling.

Maintenance Scheduling. Scheduling theory first ap-peared in the mid 1950 X  X . Scheduling concerns the allocation of limited resources to tasks over time and is normally for-mulated as optimization problems [10, 6].

Maintenance scheduling is a non-typical category of schedul-ing problems. Instead of completion time, it concerns pe-riodic in-time maintenance of jobs over a long time span. [1, 2] theoretically studied the windows scheduling problem, which is similar to the Gardener X  X  problem but without the specification of k . By including k , the Gardener X  X  problem allows as to derive optimization problems minimizing to-tal workload, which is much desirable in web information monitoring, e.g., to save on total bandwidth. Their prob-lems, however, minimize the maximum daily workload over all days, which does not directly lead to minimized average daily workload and equivalently total workload.

Multicriteria Maintenance Scheduling. Multicrite-ria optimization has been studied for decades [9]. An ex-cellent overview for multicriteria scheduling can be found in [11]. Maintenance scheduling has not been extensively stud-ied. To our knowledge, multicriteria maintenance scheduling has not been explored previously.
In this section, we study interesting properties of the Gar-dener X  X  problem, its NP-hardness and approximation.
Notations. We use a tuple ( k, k, ( c 1 , w 1 ) , . . . , ( c to denote an instance of the Gardener X  X  problem. In the instance, each plant i has a maintenance window of size w i and maintenance cost of c i . The maintenance window constraint requires a plant to be maintained at least once within its arbitrarily located maintenance window.
We use K ( d ) to denote the workload of the gardener at day d , K max to denote the largest daily workload over all days. Then the total workload of the gardener in the first t days K ( t ) =  X  =
We say a schedule is periodic if and only if there exists  X  such that for any day d , the plants scheduled to be main-tained are identical to the ones for day d +  X  . In a strictly periodic schedule, each plant labeled i is maintained exactly once every w i consecutive days.
 Properties. We prove the following properties.
 Property 1. For any feasible schedule, K  X   X  .

Proof. We divide the schedule into blocks of length b = lcm ( w 1 , . . . , w n ), the least common multiple of { w By the maintenance window constraint, plant i is scheduled average daily workload in each block is at least  X 
Now consider the K ( t ) t sequence of this schedule. Suppose t = pb + t 0 , where 0  X  t 0 &lt; b . K ( t ) t  X  pb t  X . Since lim
Property 2. If there is a schedule for ( k, k, ( c 1 , w 1 ( c n , w n )) , there exists a periodic schedule for ( k, k . . . , ( c n , w n )) for some number k 0 .

Proof. Suppose there is a ( K max , K ) schedule X for in-length b = max { w 1 , . . . , w n } . Since the number of types of blocks is finite, there exists a block appearing twice in X . Suppose S, S 1 , . . . , S m , S is part of X that contains two appearances of block S .

Consider schedule S, S 1 , . . . , S m , S, S 1 , . . . , S viously, its largest daily workload is no more than K max Now we show the schedule also satisfies the maintenance window constraint for each plant. For any plant i , any w consecutive days in the schedule must be contained in two blocks that are also part of the original schedule. Hence, plant i is scheduled at least once in these w i days.
Property 3. If there is a schedule for ( k, k, ( c 1 , w 1 ( c n , w n )) , then for any  X  &gt; 0 there exists a periodic schedule for ( k, k +  X , ( c 1 , w 1 ) , . . . , ( c n , w n )) .
Proof. Let X be a schedule for ( k, k, ( c 1 , w 1 ) , . . . , ( c We divide X into blocks of length b = max { w 1 , . . . , w Since the number of types of blocks is finite, there must be a block that appears infinite number of times in X . Let S be such a block, and d j be the last day of the j th appearance of S . We divide the schedule into supper-blocks, { 0 , . . . , d { d 1 +1 , . . . , d 2 } , ..., denoted by u 1 , u 2 , . . . . Let K ( u the total maintenance costs of plants in u j , and | u j | denote the number of days in supper-block u j .

Consider the subsequence { K ( d j ) d { t } , t = 1 , 2 , . . . . Since
Note that the left-hand side is a weighted average number of We now construct a periodic schedule S, u j 0 , u j 0 , . . . . By Property 2, this is a ( K max , K ) schedule. We only need to prove K &lt; k +  X  .

We can find a large enough number m 0 , such that the con-tribution of days not in the whole period of K ( m 0 ) m 0 than  X / 2. Since in the period u j , K ( u j 0 ) | u conclusion follows.
Hardness. We first prove the Gardener X  X  problem is NP-hard by a reduction from the Bin Packing problem. Then we give a stronger NP-hardness result for the unweighted Gar-dener X  X  problem, where the maintenance costs for all plants are 1. The idea is to let k 0 =  X  and force any feasible sched-ule to be strictly periodic.
 Theorem 3.1. The Gardener X  X  problem is NP-hard.
 Proof. Let I = ( w, k, c 1 , . . . , c n ) be an instance of the NP-hard Bin Packing problem, which asks whether n items (plants) with weights c 1 , . . . , c n can be packed into w bins, each having capacity k .

We reduce I to I 0 = ( k, k = k, ( w, c 1 ) , . . . , ( w, c instance of the Gardener X  X  problem.

If I has a solution, there is a solution for I 0 , where the plants scheduled on day d + wt ( t  X  N ) are exactly the plants in the d th bin.

If I 0 has a feasible solution, then each plant is scheduled at least once in the first w days. Since the maximum daily workload is k , we can pack all plants into w bins.
Theorem 3.2. The unweighted Gardener X  X  problem is NP-hard.

Proof. An NP-hardness proof [1] is given for a variant of the Gardener X  X  problem, where there is no k specification, k = 1 , and the task is to find a strictly periodic schedule.
Given I as an instance of the unweighted Gardener X  X  prob-lem, we ask whether there is a schedule with k = 1 and k =  X  . If there is a strictly periodic schedule for I , since its average workload is  X , it is also a feasible schedule for I for the Gardener X  X  problem.

We say a segment of length lcm ( w 1 , . . . , w n ) of a sched-ule is good if in a concatenation of two such segments, the distance between each two consecutive appearances of any plant i is exactly w i  X  1. Obviously, if there is a good seg-ment, there is a strictly periodic solution.

If there is a solution for I , by Property 3, for any  X  , there is a ( k, k +  X  ) periodic solution. Here we need to do some minor modification for the proof of property 3. Instead of having b = max { w 1 , . . . , w n } , we let b be lcm ( w multiplied by 4  X  max { w 1 , . . . , w n } . We take  X  &lt; 1  X  =  X b is the period of this periodic solution. The average workload of one period is less than  X  +  X  .

In a strict period , in which all plants are strictly period-ically scheduled, the average workload is  X . Now, we can have at most  X  X  =  X  more plants than the strict period. We divide one period into  X  blocks of length b . There must be one block that gets at most one more plant than the strict period for this block. Suppose this plant is the i th one. In this block, there are at most w i pairs of consecutive appear-ances of plant i having distance less than w i  X  1. We divide this block into 4  X  max { w 1 , . . . , w n } segments. These w will make at most 2 w i segments not good. There is at least one good segment left in this block, hence there is a strictly periodic solution.

Approximation. Since it is hard to decide whether there is a solution satisfying k , it is hard to give an approximation algorithm optimizing K while satisfying k . In the following we show a simple algorithm that gives a 4-approximation for the Gardener X  X  problem minimizing K .
 of the Gardener X  X  problem minimizing K , where each w i has a form of 2 q and each c i , 0 &lt; c i  X  1 , has the form of 2 There exists a schedule with workload  X  + 2 .

Proof. Suppose 2 s = max { w 1 , . . . , w n } , and P s is the set of all plants with window size of 2 s . Let C s denote the summation of the maintenance costs of plants in P s . We first pack all plants in P s into d C s e bins of size 1. Then we merge every two bins into a plant with window size of 2 s  X  1 . Thus, we can replace all plants in P s dd C s e / 2 e plants with window size of 2 s  X  1 to get a new in-stance I 0 . If I 0 has a ( K max , K ) solution, we can get a ( K max , K ) solution for the original instance I .  X  I 0  X   X  (2 dd C s e / 2 e X  C s )2  X  s  X  2 1  X  s .

For I 0 , the largest window size is 2 s  X  1 . We repeat the same process until we get an instance I 00 with the largest window size of 1.  X  I 00  X   X  I  X  a solution with workload  X  I 00 , there is a solution for I with workload no more than  X  I + 2 .

Theorem 3.3. There exists a polynomial time algorithm for the Gardener X  X  problem that gives a schedule with work-load no more than 4 X  + 2 . The average daily workload K of this schedule is also no more than 4 X  + 2 .

Proof. Given an instance I for the Gardener X  X  problem, we get a new instance I 0 by rounding each w i to the maxi-mum number in the form of 2 q that is no more than w i , and each cost c i to the minimum number in the form of 2 q that is no less than c i .

Since each c i and each 1 w by the definition of  X ,  X  I 0  X  4 X  I . Applying lemma 3.1 to I gives us a schedule with workload no more than 4 X  + 2 .
Note that  X  is a lower bound for both workload and av-erage daily workload by Property 1.
In this section, we present a multicriteria formulation for the Gardener X  X  optimization problem, for which we propose a heuristic scheduling algorithm MMEDD.

Measures and Objectives. In the Gardener X  X  problem, we have two measures: tardiness and workload, from which we can derive various objective functions, or criteria.
For a plant i , there are many tardiness values, one for each maintenance day. Let T i ( d ) be its tardiness of main-tenance at day d . We define T i ( d ) = 0 if plant i is not maintained on day d . Then for plant i , the largest tardi-T max and average tardiness T over all plants are
We use K ( d ) to denote the workload of the gardener at day d , then the largest daily workload K max and average daily workload K over all days are
Minimization of T max , T , K max and K are all reasonable objectives. For web information monitoring applications, usually there is a hard constraint given for K max , and min-imizing T and K is much desirable.
Problem Definition. A gardener has n plants to main-tain. Each plant labeled i needs to be maintained at least once every w i days and each maintenance costs c i workload. The gardener has a daily workload capacity of k . Let K be the average daily workload over all days. Let T be the average tardiness over all days and all plants. Assuming all plants were maintained yesterday, find a feasible schedule starting from today until forever so that K and L are minimized. instance of the above Gardener X  X  optimization problem. The problem is NP-hard. A multicriteria problem is NP-hard if the optimization of a single criterion is NP-hard. In the following we propose greedy heuristics.

EDD. A simple greedy algorithm EDD (Earliest Due Day first) provides optimal solutions for many non-maintenance scheduling problems minimizing the maximum tardiness [6]. In EDD, jobs (plants) are ordered by non-decreasing order of due dates and scheduled in that order.

However, if used in maintenance scheduling, EDD would  X  X xhaust X  X he gardener. Consider a simple instance with n = 2, w 1 = w 2 = 365 , c 1 = c 2 = 1 , and k = 2 . Optimally, the gardener only needs to work one day a year if he maintains plants 1 and 2 on their due days. However, with EDD, the gardener would maintain the two plants every day and work 365 days a year! Instead of early completion, maintenance scheduling concerns long-term in-time maintenance. Jobs will not be completed. Each maintenance of a job simply generates a new due day for the same job. EDD would end up generating too many due days unnecessarily.

MEDD. MEDD is a maintenance version of EDD that minimizes tardiness while concerning workload. Algorithm 1 presents the pseudocode of MEDD.

Let L i denote the current lateness of plant i , i.e., the number of days after its current due day. The difference be-tween lateness and tardiness is that lateness can be a nega-tive value, indicating the due day is in the future. Obviously,  X  X arliest due day first X  is the same as  X  X argest lateness first X .
In the algorithm, we first calculate the lateness for each plant based on its current due day (line 1). Then, we sort all plants in non-increasing order of lateness (line 2). We use the smallest cost first criterion to break ties in order to maintain more plants. Then, we choose as many as possible (satisfying the k constraint) the top ranked plants with lateness  X  0 to maintain. k residue is the remaining capacity that can be used to maintain some plants due in the future (line 3). Let w max be the maximum window size (line 4). Assign to c the estimated total maintenance cost in the next w max days assuming all plants are maintained on their due days (line 5). Then assign to overload the difference of c and the accumulated capacity over w max days (line 6).

At this point, the non-negative overload represents the workload absolutely needed in the next m max days in order to maintain all plants in time. Thus we would not waste any workload if we spend min ( k residue , overload ) workload to relieve some maintenance pressure for the future. So we choose some plants (line 7, to be explained shortly) that use up min ( k residue , overload )  X  k to maintain (line 8). Plants in M 1 are due earlier or today. Plants in M 2 are due in the future but the workload is well spent. They together form the set M of plants scheduled to maintain (line 9). We assume the plants in M are always maintained as scheduled, thus we update the due days for all of them (line 10). Algorithm 1 MEDD
In line 7, it may seem more natural to use the same crite-ria as in line 2, largest lateness first, to select plants. How-ever, there is a fundamental difference. In line 2, we want to choose some plants that are due already. In line 7, we want to choose some plants that are due in the future. An early maintenance incurs wasteness of workload, where the wasteness of plant i is defined as L i w the wasted days. It is normalized by w i and weighted c i
MMEDD. MEDD still emphasizes minimizing tardiness as in EDD but uses workload wisely. It returns a good sched-ule with respect to the given daily capacity k .

MMEDD, the multicriteria version of MEDD, tries to find other good alternative schedules with respect to some k 0 k . We can simply repeatedly generate some k 0 &lt; k and feed ( k , ( c 1 , w 1 ) , . . . , ( c n , w n )) to MEDD.
We focused on theoretical aspects of the Gardener X  X  prob-lem. The implemented OLAP system with built-in sched-ulers is available at http://dmlab.cs.txstate.edu/scube/, as well as a more complete technical report with experiments.
Although our study is in the context of web information monitoring, our results and approaches can be applied to applications related to information monitoring in general, e.g., materialized view maintenance in data warehouses.
