 With the exponential growth of the Internet in China, it has become more difficult in finding the exactly relevant information. Existing Chinese search engines such as Sina, Sohu and Baidu often return a flat list of search results, given a certain sequence of query words. When the retrieved documents are in thousands or even millions, users have to sift through pages of lists to locate their interested topics. This is time-consuming and the browsing style seems to be unattractive. Given a query, the same results will be produced for different users. Therefore it is necessary to find a solution helping web users focus on their desired topics. interaction. Vivisimo [12] and IBoogie [13] added a hierarchy of folders to the flat list of relevant documents, which could be expanded or collapsed. However, when [13] was applied to Chinese Web pages, mess codes often occured. Others like Mooter classes and offered good visualization. The faults lay in their lack of efficiency and no support for Chinese search tasks. as a solution and the query processes coul d be dynamically improved according to users X  preferences. Three features for a phrase were calculated and combined to pro-duce a score. Then the ranked phrase list was presented as the name list of candidate clusters. We also offered a good visualization of search interface for user X  X  interaction ings of their queries, or do the query refinement. Moreover, those search results could be personalized on-the-fly by filtering out the clusters in which users had no interest. Section 2. In Section 3, we described the whole system, including four parts. In Sec-tion 4, the experiment results are given. Finally, we draw the conclusions in Section 5. Some previous work has been done on organizing the search results into groups based on their overall similarity to one another. Zamir et al. [1] grouped web search results using STC (Suffix Tree Clustering) algorithm and Hearst et al. [2] used the scat-ter/gather techniques. In [5], Tolerance Rough Set theory has been brought in. Con-cise, intelligible cluster labels were derived from tolerance classes using special heu-ristic rules. However, it still seemed to suffer from duplicated labels. [6] introduced a hierarchical monothetic clustering algorith m to build a topic hierarchy for the collec-tion of search results. [7] reformalized the search result clustering problem as a super-English retrieval systems. the characteristics of produced clusters in Polish strongly depended on the pre-processing phase. Semantic Hierarchical Online Clustering (SHOC) algorithm [3] combined key phrase discovery and orthogonal clustering to generate clusters. This algorithm can also be applied to the Chinese tasks, but its system is not available for comparisons now. 3.1 System Overview The Interactive Chinese search results Clustering (ICC) System mainly consists of four parts X  X earch results fetching, Chinese segmentation, ranking and clustering en-gine, and the user interface. The whole architecture is described as follows in Fig.1. 3.2 Multi-thread Crawling and Parsing The web pages of search results are fetched from one of Yahoo.CN, Sina, Sohu, and Baidu search engines using a multi-thread crawler. Then the pages are immediately sent to text processing pools so that the both the crawling and the HTML parsing can be operated synchronously. The web pages are analyzed by multi-thread HTML pars-ers as well. For efficiency, the original web pages are not downloaded. 3.3 Chinese Segmentation Different from the English, Chinese language is lack of explicit separators, i.e. blanks or delimiters, in written oriental sentences to indicate word boundaries. Therefore, we take advantage of the n-gram and ICTCLAS system[8] for Chinese lexical analysis. ICTCLAS uses an approach based on multi-layer HMM(Hidden Markov Model), which includes word segmentation, Part-Of-Speech tagging and unknown words recognition. 3.4 Ranking and Clustering After segmentation, a linear combination of three features  X  X FIDF[9], phrase length and cluster compactness 1 is used for each phrase X  X  ranking: where the coefficients 1  X  , 2  X  and 3  X  are 0.15, 0.24, -0.02 respectively. 
The ranked phrases are kept in descending order as candidate labels and the docu-ments with the key phrases occurring will form the corresponding clusters. However, to eliminate duplicate clusters, Levenshtein Distance( LD ) algorithm [10] and Mu-tual Information ( MI ) [11] are still needed. 3.5 Interactive User Int erface for Personalization ample of the first top-8 clusters for the query  X   X  X  X   X  ( X  X obile phone X ) is in Fig.2. cluster list, the snippets which do not belong to the folders tagged by L's labels will be filtered out. As a result, the search results are re-ranked according to user X  X  choice. and performs another new search, with Q '= Q ^ i l to get more specific results. snippets returned by the queried engine and user can customize it in the "Search Options". 2.4GHZ, RAM 1GB. We selected  X   X  X  X   X ( X  X obile Phone X ) as a query and tested the average running time. It has been found that Sina and Sohu could finish in 2 seconds for 200 snippets; Yahoo.CN took the second place, within 4 seconds; and Baidu was the slowest, more than 20 seconds. The time spent on search results fetching ac-counted for 55%~84% of the whole process. of clusters with good labels( c gl Aver _ ) on each page as in Table 1. 
Then given 26 popular queries, users were asked to evaluate our interactive cluster-Yahoo.CN and Baidu etc. 
It could be seen that most users thought the time efficiency of our system was sat-isfying enough; the cluster labels and the interactive user interface were compara-tively good or even better. In this paper, we built up an interactive Chinese search result clustering (ICC) system for personalization. The snippet-based ranking and clustering method were proposed bels. We also provided a good visualized user interface, which allowed users to filter and re-rank the search results according to their personal choices or do query refine-ment. With the reasonably fast speed, users could benefit from our systems. 
For future work, we expect to explore the hierarchical organization of clusters and more intelligent search results clustering algorithms. The investigation of relation-ships between the clusters can also be considered. 
