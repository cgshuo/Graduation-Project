 Data mining extracts useful implicit patterns within data along with important correlations/affinities between the pattern s to discover knowledge from databases. Moreover, in data mining, correlation analysis is a special measure which finds the underlying dependencies between objects. The frequent itemset can be mined but correlation calculation among items can define the dependencies and mutual cor-relation among items within an itemset. The hidden information within databases, and mainly the interesting association relationships among sets of objects, may disclose useful patterns for decision support, financial forecast, marketing poli-cies, even medical diagnosis and many other applications.

Nowadays, data mining techniques are applied to non-traditional domains e.g. the most complicated real life scenarios where objects are interacting with their surrounding other objects. To model such scenarios graph can be used, where vertices of the graph will correspond to entities and edges will correspond to relations among entities. Because of combinatorially explosive search for sub-graphs which includes subgraph isomorphism testing, the graph structured data mining is difficult. Moreover, in mining graph data, the emphasis is on frequent labels and common topologies unlike traditional data. Here mining can be di-vided into level-by-level generate -and -test method and pattern growth -based approach . AGM[1] and FSG[2] are of the former type, where as gSpan[3] and graph pattern [4] are of later type, which require no candidate generation. In order to discover correlations, several measures are used [5] and to mine corre-lation in graph databases existing works such as [6] mainly focus on structural similarity search. However, graphs those are structurally dissimilar but always appear together within the database, may be more interesting , such as, the chemical properties of isomers [7].

For capturing effective correlations, authors of [7] proposed CGS algorithm which mines graph correlation by adopting Pearson s correlation coefficient by taking into account the occurrence distributions of graphs. However, CGS works for searching correlation of a specific qu ery graph with the database. Therefore, it has some limitations in describing inherent correlation among graphs and the domain knowledge is obligatory in using CGS, otherwise lots of queries would be meaningless. These facts motivated us in developing a new measure which can prune a large number of un-correlated graphs and designing an algorithm to ef-ficiently mine graph correlation. Our contributions are: a new graph correlation measure gConfidence to mine inherent correlation in graph databases, pruning a large number of candidates using the downward closure property of the measure and an algorithm CGM ( C orrelated G raph M ining) to efficiently mine correla-tion by constructing a hierarc hical reduced search space.

Rest of the paper is organized as follows: Section 2 contains our proposed scheme and Section 3 focuses on the performance analysis of our proposed algo-rithm. Finally, we concluded our work in Section 4. Correlated graph mining is one of the most important graph mining tasks. So, we have proposed a new measure, gConfidence and a new method, CGM ( Correlated Graph Mining ), to search correlation among graphs within a graph database. We have mined correlated graphs by constructing a hierarchical search space using our proposed measure and algorithm. In graph domains, transactions can be represented by G = { V ( G ), E ( G ), vertices and edges respectively. Size of a graph varies in various algorithms and can be the number of nodes or edges or disjoint paths. To tackle graph isomor-phism problem, various labeling or coding is introduced in many algorithms. For a graph database, GD , with G s , G b and G h are sub-graphs of any graph G  X  GD , the support of G and total number of transaction graphs. Moreover, confidence of G b with respect to G h is the ratio between the joint-occurrence frequency of G b along with G h and frequency of the super graph for G b . The canonical labeling for the normal form representation, X of a graph G can be defined as[3], the minimum DFS code among all possible DFS codes of G . The proposed measure gConfidence , is defined as follows where the correlation is defined based on the co-occurrence probability of edges of the graphs within the database.
 Definition 1. (gConfidence) Given a graph database GD and one of its trans-action graph G , then we have defined the gConfidence of G s , a subgraph of G as  X  max ( { No.of graphsG i  X  G  X  GD | X  G i  X  G s } ) X  is the maximum support of any sub-graph of G s . This prescribed clarity merely entails that gConfidence is the smallest correlation of any graph, G s and fall within the range [0, 1]. The measure gConficence , has numerous crucial properties those made it ef-ficient in mining graph correlati on more effectively. These are the downward closure property , null invariance , lower bound marker of correlation and co  X  occurrence observer.
 Lemma 1. Given a graph database GD and one of its transaction graph G , then we can define the gConfidence of G s  X  G derived in Equation 1 as Consider a scenario shown in Figure 1, where two frequent closed graphs found from a set of graphs representing a group of people. Each graph in the set repre-sents friend circle of an individual where nodes represent individuals and edges represent interaction among individual pairs. The circles around closed graphs represent the interaction of a group of p eople all together. Labels of edges and circles represent the frequencies of the e dges and closed graphs respectively. How-ever, in mining the most correlated group, frequency of closed-frequent graphs can X  X  help due a tie i.e. 30 for ea ch. As a consequence, Group G 2 will be sug-gested as most correlated by our proposed measure. Since, maximum interaction of any pair in G 1 is 100 and in G 2 is 60. Therefore, gConfidence ( G 1 )= 30 100 = 0.3 &lt;gConfidence ( G 2 )= 30 60 = 0.5.
 Definition 2. (Correlated Graph Mining) Given a graph database GD = {
G 1 ,G 2 , ..., G N } , a user specified minimum support threshold,  X  and a user specified minimum correlation threshold,  X  . We have to search for interesting graph/subgraphs that is, we have to search for the set of graphs G I = { X  G i | supp ( G i )  X   X  ; gConfidence ( G i )  X   X  } . It means the problem is to search for graphs having support count greater than or equal to  X  and gConfidence value greater than or equal to  X  .
 We have created a hierarchical tree like structure for efficiently searching the correlation among graphs within graph databases. The tree is defined as follows: Definition 3. (gConfidence Tree) A tree, where each node represents a graph or subgraph by storing corresponding DFS code and represents correlation by storing gConfidence value  X  gC  X . Moreover, the relation between parent node and child node complies with the relation that a parent is one edge shorter in size than its child and a child is one edge larger than its parent and no child has  X  gC  X  greater than its parent. The relation between siblings is consistent with the DFS lexicographic order. That is, the pre-order search of gConfidence tree follows the DFS lexicographic order.
 In Figure 2, we have shown a gConfidence code tree where the ( n +1)-th level of the tree has nodes which contain DFS codes of n -edge graphs and a value  X  gC  X  which represents the inherent correlation among the nodes, edges and subgraphs of that particular graph. Any node in the gConfidence tree contains a valid DFS code. Certainly some of the nodes co ntain a minimum DFS code while others do not. And there could be some nodes having  X  gC  X  values smaller than the minimum correlation threshold. The value for  X  gC  X  also maintains a parent and child relationship that is gC (  X  )  X  gC (  X  )where  X  =( a 0 ,a 1 , ..., a m )and  X  = ( a 0 ,a 1 , ..., a m ,b )thatis  X  is  X   X  X  parent.

Now we will describe our algorithm for mining graph correlation using our proposed measure gConfidence within graph databases. Since correlation is searched based on user specified minimum correlation threshold then the search space can be pruned based on two values, one for minimum support threshold and another one is minimum confidence threshold. Proposed CGM is an  X  X dge X  based correlation mining algorithm and we also used the concept of  X  X rojected Database X  to reduce the costly searchin g operation for counting occurrences of any graph/subgraph.
For illustrating the working procedure of our CGM algorithm, we can consider the graph database for the chemical dataset shown in Figure 3. We have assumed the support threshold,  X  = 1 3 and correlation threshold,  X  = 2 3 . According to our algorithm we have calculated support and gConfidence of each edge and vertex and then selected the frequent and correlated vertices and edges. Now, we have to construct single edge graph for each frequent-correlated edge and the edge set is also used to construct GLOBAL EDGE M AT RIX .Thismatrixissorted based on support count and DFS code and can be used in a chronological order for constructing potential children (smallest DFS code oriented child first) and also helps in counting maximum elementary edge support count of a graph.
We have created a Null-rooted gConfidence tree and then started mining for the first 1-edge graph C 1 . Since it satisfies both the threshold values, we have added it in the search space and start mining the correlation of its potential children recursively. Its first child C 1 . 1 is not frequent, hence we have pruned it. The second child C 1 . 2 is frequent and correlated, hence added to the search are frequent but not correlated and C 1 . 2 . 2 and C 1 . 2 . 3 are not frequent.
As a consequence, the fifth child of C 1 . 2 that is C 1 . 2 . 5 is found correlated and added to gConfidence tree. The eighth child of C 1 . 2 . 5 is found correlated and added in the search space but first seven children of C 1 . 2 . 5 are not frequent hence will not be correlated and been pruned from the search space. Therefore, we have to further search for the correlation of all possible children of C 1 . 2 . 5 . 8 .Sinceno children of C 1 . 2 . 5 . 8 found frequent-correlated, we can backtrack to C 1 . 2 . 5 .But already we have checked all possible children of C 1 . 2 . 5 hencewecantraceback again to C 1 . 2 for checking correlation of its remaining children.
In this way we have calculated the correlation for the graph database of Figure 3 and found a complete gConfidence tree, where nodes of the tree contain correlated graphs along with the amount of correlation. All the above discussed steps are illustrated in Figure 3. We have performed a comprehensive per formance study in our experiments on both synthetic and real world datasets. We have used our own synthetic graph generator to construct synthetic dataset. The real life datasets we have tested are cancer dataset, found from [8], namely MOLT-4 and NCI-H23. On an average, the real datasets contain about 40K graphs with average 25 nodes and 30 edges along with an average of 17 distinct labels for vertices and edges. The synthetic dataset can be identified by four properties, | D | representing numbers of graphs, |
N | indicating number of distinct labels for vertices and edges, | T | and | V | for average graph size wrt. edg es and vertices respectively.

In both types of data (real and synthetic) CGM algorithm is proved to be sound and efficient as well as found scalable and faster enough that it can mine correlation among various graphs with any size and any level of complexity in comparison to CGS[7] and gSpan[3]. All experiments of CGM, CGS and gSpan havebeenperformedona2.1GHzIntel(R)Core(TM)DuoPCwith1GBRAM, running Windows 7 operating system, using C/C++ programming language. We have kept the support threshold fixed at 5% and varied the correlation threshold from 45% to 85% unless stated otherwise. In some cases, we have varied the size of database by adding or removing graph transactions randomly from the actual database.
 In Figure 4 and Figure 5, we have shown the performance of our proposed CGM algorithm for Processing time vs. Graph Density with varying Correlation Threshold, when run on the MOLT-4 graph database and a synthetic database characterized by D 200 kN 30 T 80 V 50 respectively. Since we are assessing the per-formance of our algorithm against graph density, we have varied the size of the graph database. It can be noticed that maximum 150 seconds were needed and minimum required time was 25 seconds in mining real life database, where most of the time processing completes within 1000 seconds for synthetic dataset with any confidence threshold within range.

Figure 6 and Figure 7 contain the performance analysis of our proposed algo-rithm for Scalability wrt Time with varying Data Size, when run on the NCI-H23 graph database and a synthtic database characterized by D 200 kN 20 T 40 v 30 re-spectively. We have found that 50 to 100 seconds are required in mining NCI-H23 database and 300 to 1200 seconds are required for the synthetic dataset with any confidence threshold within range.

To compare the performance of CGS with CGM, once again we have used the denser synthetic dataset used in the scalability assessment earlier. However, the support threshold is considered 5% and confidence threshold 50%. The compar-ison is shown in the Figure 8, which illustrates a significant performance gain. We have also provided the performance of our proposed algorithm in filtering less significant graphs. By comparing it with the well known frequent subgraph mining algorithm gSpan, using denser synthetic dataset, used in the scalability assessment, we found our algorithm efficient enough in comparison with existing algorithms. Here, we have considered the support threshold 5% and confidence threshold 50%. The comparison can be found in Figure 9. Figure 10 contains the percentage of graphs, those are un-correlated, filtered by CGM with respect to the graphs selected by gSpan. Figure 10 , shows that the filtering percentage of CGM can be from 10% up to 40%, on a real life data set MOLT-4, for various gConfidence threshold. Mining frequent patterns or sub-patterns with larger support threshold could miss some interesting patterns. At the s ame time if the threshold considered is small enough to capture such rare but interesting items could generate lots of spurious patterns. Therefore, association and correlation analysis is used in association of frequent pattern mining for mining frequent-interesting patterns from a collection of itemsets, but correlation searching is a challenging task. In a graph database, correlation searching is more challenging due to the fact that searching frequent subgraphs faces the graph isomorphism problem. Therefore, a new measure gConfidence and an algorithm CGM are proposed for correlation mining in graph databases which can capture more interesting inherent correla-tion among graphs. gConfidence has downward closure property, which helps in pruning descendants of non-correlated candidates. Proposed method constructs a tree-like search space named gConfidence tree to efficiently mine the corre-lation. We have performed extensive p erformance analysis of CGM and found it efficient enough which outperforms exi sting works in correlation search based on speed. The proposed algorithm can be applied in both traditional and non-traditional domains such as bio-informatics, computer vision, various networks, machine learning, chemical domain and various other real life domains.
