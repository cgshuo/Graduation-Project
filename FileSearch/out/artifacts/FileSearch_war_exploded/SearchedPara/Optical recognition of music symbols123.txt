 ORIGINAL PAPER A. Rebelo  X  G. Capela  X  Jaime S. Cardoso Abstract Many musical works produced in the past are still currently available only as original manuscripts or as photo-copies. The preservation of these works requires their digita-lization and transformation into a machine-readable format. However, and despite the many research activities on opti-cal music recognition (OMR), the results for handwritten musical scores are far from ideal. Each of the proposed meth-ods lays the emphasis on different properties and therefore makes it difficult to evaluate the efficiency of a proposed method. We present in this article a comparative study of sev-eral recognition algorithms of music symbols. After a review of the most common procedures used in this context, their respective performances are compared using both real and synthetic scores. The database of scores was augmented with replicas of the existing patterns, transformed according to an elastic deformation technique. Such transformations aim to introduce invariances in the prediction with respect to the known variability in the symbols, particularly relevant on handwritten works. The following study and the adopted dat-abases can constitute a reference scheme for any researcher of the Arts website 3  X  X ost of the music predating computer notation software was never published and still exists in the form of manuscripts or photocopies spread out all over the country in discreet places. The risk of irreversibly losing this rich cultural heritage is a reality that must be taken seriously and dealt with accordingly.

Digitization has been commonly used as a possible tool for preservation, offering easy duplications, distribution and digital processing. However, transforming the paper-based music scores and manuscripts into a machine-readable sym-bolic format (allowing operations such as search, retrieval and analysis) requires an optical music recognition (OMR) system. Unfortunately, the actual state of the art of handwrit-ten music recognition is far from providing a satisfactory solution.

After the image preprocessing (application of several tech-niques, e.g. binarization, noise removal, blurring, deskewing, amongst others, to make the recognition process more robust and efficient), an OMR system can be broadly divided into three principal modules (see Fig. 1 ): 1. Recognition of musical symbols from a music sheet; 2. reconstruction of the musical information to build a log-3. construction of a musical notation model for its repre-
The first module is typically further divided into three stages: staff lines detection and removal to obtain an image containing only the musical symbols (staff lines spacing and thickness also provide the basic scale for relative size com-parisons); symbols primitives segmentation and recognition. For reference, Table 1 introduces the set of symbols with rel-evance in this work. The second and third modules (musical notation reconstruction and final representation construction) are intrinsically intertwined. In the module of musical nota-tion reconstruction, the symbols primitives are merged to form musical symbols. Usually, in this step, graphical and syntactic rules are used to introduce context information to validate and solve ambiguities from the previous module of music symbol recognition. Detected symbols are interpreted and assigned a musical meaning. In the third module of final representation construction, a format of musical description is created with the information previously produced.
In this paper, we focus on the step of music symbol rec-ognition. More specifically, we will motivate the adoption of specific algorithms for staff line detection and removal and symbol detection, and we will present a comparative study of methods for the music symbol classification. We also inves-tigate the interest of elastic deformation to extend the set of symbols used to design the classifiers, in an attempt to favour robustness to typical distortions in musical symbols. 2 Related works The investigation in the OMR field began with Pruslin and Prerau [ 5 ]. However, it was only in the 1980s decade, when the equipment of digitalization became accessible that work in this area has expanded [ 2 , 5 , 10 , 28 ]. Over the years, sev-eral OMR software packages have appeared in the market, but none with a satisfactory performance in terms of pre-cision and robustness. The complexity of the OMR task caused by the bidimensional structure of the musical nota-tion, by the presence of the staff lines and by the exis-tence of several combined symbols organized around the note heads have been hampering the progress in this area. Until now, even the most advanced recognition systems (Notescan in Nightingale, Midiscan in Finale, Photoscore in Sibelius, Smartscore, Sharpeye, etc.) cannot identify all musical nota-tions. Besides that, classic OMR is more focused in regu-lar, printed music sheets; so, a good performance is usually obtained only when processing this type of scores. 2.1 State of the art on staff line detection and removal The problem of staff line detection is often considered simul-taneously with the goal of its removal, although exceptions exist [ 5 , 27 , 30 , 34 ]. The importance of these operations lies on the need to isolate the musical symbols for a more effi-cient and correct detection of each symbol present on the score. When working with printed scores, the staff line detec-tion and removal is completed with high performance; hand-written scores, on the other hand, still represent a challenge. These scores tend to be rather irregular and determined by the authors X  own writing style. The handwritten staff lines are rarely straight or horizontal, rarely parallel to each other. Moreover, most of these works are old, and therefore there is a sharp decay in the quality of the paper and ink. Another interesting setting for the comparative study detailed latter is the common modern case where the music notation is hand-written on paper with preprinted staff lines.

The simplest approach for staff line detection consists on finding local maxima in the horizontal projection of the black pixels of the image [ 4 , 5 , 16 , 26 , 31 , 35 ]. Assuming step, the vertical segments are detected by a region-growing method and template matching. Then, beams are detected by a region-growing algorithm and a modified Hough trans-form. The remaining symbols are extracted again by tem-plate matching. From this first step results three recognition hypotheses: the fuzzy model is then used to make a consistent decision. The proposed process incorporates graphical and syntactic rules. Besides, it enables the application of learn-ing procedures when potential errors occur, in an effort to gain robustness.

Other techniques for extracting and classifying musical symbols include rule-based systems to represent the musical information, a collection of processing modules that commu-nicate by a common working memory [ 5 ] and pixel track-ing with template matching [ 35 ]. Toyama [ 35 ] checks for coherence in the primitive symbols detected by estimating overlapping positions. This evaluation is done with music writing rules. Co X asnon [ 10 , 11 ] proposed a recognition process entirely controlled by grammar which formalizes the musical knowledge. In [ 32 ], the segmentation process involves three stages: line and curves detection by LAGs, accidentals, rests and clefs detection by a character pro-file method and note heads recognition by template match-ing. The contextual recognition is done by graph grammars. In [ 30 ], the segmentation task is based in hidden Markov models.

Despite the wide variety of suggested recognition tech-niques, a comparative evaluation of their merit has not yet been attempted. This work tries to address this void by presenting a quantitative comparison of different methods for the classification phase. The experimental work is con-ducted over a large data set of scores, consisting both of real handwritten music scores and synthetic scores to which known deformations can be applied. In Sect. 3 , the algorithms selected for staff line detection, removal and symbol detec-tion are presented and motivated. The algorithms for symbol classification under comparison are presented in Sect. 4 .The data set adopted in the experiments is detailed in Sect. 5 .In Sect. 6 , we present the experimental results obtained with the algorithms under evaluation in this comparative study. Finally, conclusions are drawn and future work is outlined in Sect. 7 . 3 Preliminary operations The stage of recognition of musical primitives is often pre-ceded with the elimination of the staff lines and the segmen-tation of the musical primitives. The reasons for doing that lie on the need to isolate the musical symbols for a more efficient and correct detection of each symbol present on the score. As these operations are not the focus of our study, we start by describing the algorithms that were selected for (a)(b) the staff line detection step. The algorithms like line track height, line track chord and Roach/Tatem from [ 13 ]were adapted for the tests. The original version of the algorithms were considered as available in [ 12 ], making use of the Dalitz algorithm in the detection phase; the modified versions use instead the stable path algorithm for detecting lines. It was experimentally confirmed that the line track height algorithm with the stable path consistently outperformed the other algo-rithms. Subsequently, we have improved on the line track height algorithms [ 7 ], by focusing special attention on defor-mations X  X taff lines may have discontinuities, be curved or inclined X  X hat may occur in the music scores. The position of the staff lines obtained by a staff line detection algorithm may pass slightly above or under the real staff lines posi-tions. Therefore, if we are in the presence of a white pixel when the staff lines are tracked, we search vertically for the closest black pixel. If that distance is lower than a specified tolerance, we move the reference position of the staff line to the position of the black pixel found. 3.3 Symbol segmentation The next module in the processing pipeline is the segmenta-tion of musical symbols, which we based on already existent and shape), found both on handwritten music scores X  X ee Fig. 3 b X  X nd in printed scores, when we have scores from different editors X  X ee Fig. 3 a X  X s one of the sources for the complexity of the operation.

This segmentation process consists in localizing and iso-lating the symbols in order to identify them. In this work, the symbols we want to recognize can be split into four different types: 1. The symbols that are featured by a vertical segment with 2. The symbols that link the notes: beams (e.g. ). 3. the remaining symbols connected to staff lines: clefs, 3.3.4 Clefs and relations detection These symbols have their own attributes, like a large width for the relations and a big height for the clefs. In neither of them, we have the presence of stems. With these properties in mind, the projection profiles procedure was used with spe-cific heuristics. For clefs, a width between staffspaceheight and 4  X  staffspaceheight and a height between 2  X  staff-spaceheight and 2  X  numberstaffspace  X  staffspaceheight + numberstaffline  X  stafflineheight yielded the best experi-mental results. 4 These values take into account the fact that clef symbols are the largest of all the signs, beginning below the staff and extending above it. On the other hand, for the relations symbols (ties and slurs), the rules for extracting them were based in a large width. 4 Recognition process The different approaches to musical symbol classification compared in this work can be categorized as follows:  X 
Hidden Markov models.  X 
K-nearest neighbour.  X 
Neural networks.  X  Support vector machines.
 For the neural network, k -nearest neighbour and support vec-tor machines methods, each image of a symbol was initially resized to 20  X  20 pixels and then converted to a vector of 400 binary values; under the hidden Markov model, the images were normalized with a height and width of 150 and 30 pix-els, respectively. These approaches follow standard practices in the state-of-the-art algorithms in the OMR field [ 30 ].
We randomly split the available data set into training and test sets, with 60% and 40% of the data, respectively. No special constraint was imposed on the distribution of the cat-egories of symbols over the two sets; we only guaranteed that at least one example of each category was present in the train-ing set. The best parameterization of each model was found based on a fourfold cross-validation scheme conducted on the training set. Finally, the error of the model was estimated on the test set. To take into account the variability in writing style, we considered the use of elastic deformation techniques to simulate distortions that can happen in real scores. The data were expanded with variations of the original examples, in order to introduce robustness in the model design. The elas-tic deformation technique was applied in the training data only. 4.2 K-nearest neighbour The k-nearest neighbour algorithm is amongst the simplest of all machine learning algorithms [ 14 ]. This algorithm belongs to a set of techniques called Instance-based Learning. It starts by extending the local region around a data point until the k th nearest neighbour is found. An object is classified by a majority vote scheme, with the object being assigned to the class most common amongst its k-nearest neighbours. The training lies only in the estimation of the best k . Although the distance function could also be learnt during the train-ing, in this work we adopted the most often used Euclidean distance. 4.3 Neural networks Artificial neural networks, or neural networks for short, were originally inspired on the central nervous system and on the neurons, which constitute one of its most significant information processing elements [ 18 ]. With time, they have evolved quite independently from the biological roots, giv-ing rise to more practical implementations, based on statistics and signal processing. In our days, the principles and algo-rithms of neural networks have found several applications in diverse fields including pattern recognition and signal pro-cessing.

In this work, a specific architecture of neural networks was exclusively used, namely the multi-layer perceptron (MLP), one type of a feed-forward network [ 18 ]. A MLP is a lay-ered structure consisting of nodes or units (called neurons) and one-way connections or links between the nodes of suc-cessive layers. The training of the networks was carried out under Matlab 7 R14 and was done using back-propagation together with the Levenberg X  X arquardt algorithm. We use a network with K outputs, one corresponding to each class, and target values of 1 for the correct class and 0 otherwise. 4.4 Support vector machines Support vector machines (SVMs), pioneered by Vapnik [ 36 ] follow the main idea of constructing an hyperplane as the decision surface in such a way that the margin of separation between positive and negative examples is maximized. x  X  R p and corresponding binary class labels d the maximum-margin hyperplane is defined by g ( x ) = w t  X ( x ) + b where  X ( x ) denotes a fixed-feature space trans-formation and b a bias parameter; x is assigned to class 1 if g ( x )&gt; 0orto  X  1if g ( x )&lt; 0. The maximization of the margin is equivalent to solving (a) (d) technique detailed next. Such transformations try to intro-duce robustness in the prediction with respect to the known variability in the symbols.

The number of handwritten/printed music symbols per class used in the training phase of the classification models is represented in Table 2 . The symbols are grouped according to their shape; the rests symbols were divided into two groups X  RestI and RestII. Besides that, we included the unknown class to classify those symbols that do not fit into any of the other classes. In total, we have 3222 handwritten music symbols and 2,521 printed music symbols. 6 5.1 Elastic deformation The research in deformable template fields applied on hand-written digits and printed characters recognition is well estab-lished (e.g. [ 20 , 24 , 29 , 37 ]). this measure. A confidence interval was computed for the mean of these values as  X  X  X  t  X  S  X  where t  X  is the upper ( 1  X  C )/ 2 critical value for the t distri-bution with N  X  1 degrees of freedom,  X  X is the sample mean, S is the sample standard deviation and N is the sample size. The variance of a population represented by a sample is given by ( n  X  1 ) S 2 accuracy did improve with elastically deformed symbols X  see Table 7 .

It is important to state that the features used in the SVM, nearest neighbour and neural network were raw pixels. This 7 Conclusions In this paper, we conducted a comparative study of classifi-cation methods for musical primitives. We examined four classification methods, namely support vector machines, neural networks, nearest neighbour and hidden Markov mod-els, on two data sets of music scores containing both real optimizing a global function. The segmentation method was based on a hierarchical decomposition of the music image. The enormous variability in the music symbols observed in handwritten scores, the inconsistency in size and shape of the symbols greatly complicates the segmentation process. The hierarchical approach allows dealing with such difficulties.
The SVMs, NNs and kNN received raw pixels as input features (a 400 feature vector, resulting from a 20 x 20 pixel image); the HMM received higher level features, like infor-mation about the connects components in a 30 x 150 pixel window. These options tried to reflect standard practices in the literature. The performance of any classifier depends crucially on the choice of features. Therefore, results must be interpreted in light of these design options. The SVMs attained the best performance (in line with the current results reported in the literature, where SVMs are systematically the top classifier) with a performance above 95% in the hand-written data set and above 97% in the typeset data set. The simple kNN also achieved a very competitive performance, better than the NNs and the HMMs. The less satisfying per-formance of the HMMs deserves additional exploration in the future: the choice of the input features, the number of states, the distribution assumed for the observed variable are design option that may be hampering the performance of the model.

Concerning the use of elastic deformations to increase the training set, it was interesting to observe that the performance did not improve. Our aim was to increase the size of the train-ing set, creating controlled distorted symbols to prepare the classifier for the typical variations of symbols in handwritten music sheets. We would expect the classifiers designed with this extended data would be more robust, with improved per-formance. The results, in opposition to our initial thoughts, may have multiple explanations, which require further inves-tigation: the distortions created were not the most suited for the recognition task, the initial data set was already quite diverse in terms of symbol variety, or the raw representation adopted for features is not the most appropriate for introduc-ing this kind of variation. The fact that the handwritten scores were authored by only five different authors may also help explaining the results: it is possible that the writing was not that diverse to bring benefit to the design with elastic defor-mation. The enrichment of the data set with scores from more authors may help clarifying this issue.

