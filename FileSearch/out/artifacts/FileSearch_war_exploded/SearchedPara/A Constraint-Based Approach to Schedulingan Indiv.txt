 IOANNIS REFANIDIS
University of Macedonia and NEIL YORKE-SMITH SRI International, and American University of Beirut 1. INTRODUCTION
Developing an intelligent tool to assist an individual in the management of his or her personal time is an ambitious goal for at least three reasons. First, ethno-graphic studies show that people seek appropriate, contextualized assistance [Palen 1999]. Second, much knowledge is implicit and not available to an AI (Artificial Intelligence) reasoning system, or is informally represented. Third, the reasoning task of producing suggested plans must account for complex and subtle preferences and constraints.

While an ambitious end goal, intelligent assistance with time and task man-agement is a recognized target for AI [Refanidis et al. 2004; Myers et al. 2007;
Freed et al. 2008]. Although electronic calendaring tools, such as Microsoft Out-look and Google Calendar, offer multiple forms of time management assistance, their provision of automatic or semi-automatic scheduling of users X  activities is limited. More common functionality is assistance in adding events into the user X  X  and others X  calendars, detection of conflicts, task assignment, meeting arrangements, and calendar sharing and publishing.

Our contribution in this article is a modest step towards the end goal. We investigate how constraint-based reasoning can generate a plan for a set of activities for an individual, taking into account interruptible activities, vari-ety of intra-and interactivity constraints and user X  X  preferences. We address the representation challenges with an expressive and rigorous constraint-based model. In this article we do not treat the knowledge acquisition challenges.

This article address the reasoning challenges with an adaptation of the incomplete heuristic search framework Squeaky Wheel Optimization (SWO) [Joslin and Clements 1999], enhanced with domain-dependent heuristics and forward checking to make more informed choices. Computation time for solving the problem is limited; this is the reason to adopt an incomplete but fast solving algorithm. A further reason is that an envisioned system may employ a server-based model accessed simultaneously by many users using low-cost devices, and thus the server X  X  overall workload is a consideration. The presented approach was tested experimentally through a large set of benchmark problem instances, which showed it to be remarkably efficient and effective, producing plans that are near optimal. We suppose that activities to be scheduled are given; we do not consider scheduling with resources; and we explicitly exclude from our scope interperson coordination and meeting arrangement.
 The work described in this article is being implemented in S
Web-based intelligent calendar application that utilizes Google Calendar. An earlier version of the system, implementing the model described in Refanidis [2007], has been described in Refanidis and Alexiadis [2008]. The present arti-cle does not address the functionalities, usability considerations, and adoption of a deployed tool. We understand that the definition of a scheduling problem with such an expressive model requires significant effort from the individual. Aspects of this problem have been addressed in Alexiadis and Refanidis [2009].
However, in addition to usability and knowledge acquisition issues, there are several open engineering issues that need to be addressed, which constitute part of our future work.

This article significantly extends the work described in Refanidis et al. [2006] and Refanidis [2007], by presenting an enhanced activity model and extending the algorithms proposed there in order to cope with the new features. An even more general model was presented by Refanidis and Yorke-Smith [2009] in a more informal setting. The present article gives a rigorous definition for a subset of the features presented there and develops effective and efficient solution techniques.

The rest of the article is organized as follows. Section 2 introduces the problem formulation and Section 3 describes our solving algorithm. Section 4 presents experimental results on fresh benchmark problem instances. Section direction for future work. 2. PROBLEM FORMULATION
This section formulates the underlying computational problem. First we ties that the proposed model intends to model, and then we give the rigorous formulation. 2.1 Motivation
There are several types of an individual X  X  activities. The simplest types concern a totally inflexible activity, as for example attending a lecture as a student.
This activity has a prespecified time and location reference, as well as a fixed duration. The individual only needs to decide whether to attend the lecture or not. However, not all activities are so simple like this one.

Some activities do not prespecify their start time, as for example going to a theater performance. Although the duration and the location of this activity are known in advance, the individual has the option to decide the day (and perhaps the last scheduled performance. Another example of such a fluent activity is having lunch at a restaurant. This activity is characterized by a specific location and duration, but the individual decides the exact time frame to have lunch, within the working hours of the restaurant. A temporal domain, consisting of disjoint temporal intervals, accompanies every fluent activity. Furthermore, the duration of an activity is not always fixed. In some cases, as in the lunch example, the individual might decide on the duration, with more duration resulting in more satisfaction. Bounds on the minimum and maximum duration might exist; lunch cannot extend all day, even if the restaurant stays open!
An activity may be interruptible. Examples of interruptible activities are reading, doing homework, or writing a paper. Bounds on the durations of the parts of an interruptible activity might exist as well. For example, suppose that there is no point in scheduling a part of less than one hour or more than eight hours of an activity concerning writing a paper; the author will be inefficient in both cases. Furthermore, the individual might want a minimum temporal
Or, she might want a maximum temporal distance between parts of the same activity. For example, in the case of writing a paper, the author might want to finish the work within two months from its beginning, irrelevant to when this activity actually began.

Activities might have alternative locations where they can be performed. For example, for a  X  X eekly shopping X  activity, the individual might have the option to select between a set of alternative malls, with the best choice depending on other activities scheduled adjacent in time. Reasoning about alternative loca-tions requires considering transportation, with the obvious goal to minimize the time devoted to it. Interruptible activities with multiple locations do not require all of their parts to be scheduled at the same location. For example, for an activity concerning preparation of a presentation, some of the work can be scheduled at office and the rest at home.

Most activities require the full attention of the individual. However, there are activities that do not require such exclusivity; they can be scheduled in parallel with others, provided that the individual is capable of performing them simultaneously and a location compatible with both activities exists. Examples of situations with overlapping activities are attending a teleconference while reading/writing emails, or escorting the children to some class and waiting for them while reading a book. In an individual X  X  calendar we may also find dummy or informative activities, which are activities with zero utilization. For example, one could schedule a dummy activity concerning attending ICAPS 2011 conference in Freiburg, thus allowing in the plan only activities that can take place in Freiburg to be scheduled in the same time period.

We consider three types of binary constraints that might exist between pairs of activities. First, ordering constraints specify one activity must occur be-fore another, such as, buying tickets before going to the theater performance.
Next, proximity constraints impose minimum and/or maximum bounds on the temporal distance between different activities. For example, one might avoid scheduling intensive activities such as reading or writing a paper close to teaching or other heavy activities. Finally, implication constraints might exist between activities, usually denoting prerequisites (not necessarily temporal). For example, if you borrow a book from the library, you must return it.
Scheduling an individual X  X  activities is more than a constraint satisfaction problem: it is an optimization problem. In many cases not all of an individual X  X  activities can fit compatibly into her calendar; hence a selection must be made among them, while satisfying all involved constraints. Since all activities are not of equal importance, we assign a utility to each one. This utility might be fixed, or dependent on the duration of the activity and the way it has been scheduled within its temporal domain. Furthermore, extra utility may arise from the way the activities have been scheduled in relation to each other.
Ultimately, it is up to the user to assign utilities to the various constraints, thus turning the constraints into preferences that might be satisfied only to a degree by the resulting plan. Depending on the actual utility values, we expect to obtain plans with specific activities left out (although it would be possible to fit them in the plan) in order to have a better overall plan for the scheduled activities. Assigning utilities to the various aspects of the activities is in itself an involved problem; it is not within the scope of this article.

Figure 1 outlines the main entities of the proposed model: activities, binary constraints, and the various utility sources. The first two define the constraint satisfaction problem and the last defines the constraint optimization problem.
The details are given next in Section 2.2. 2.2 Formulation
Time management tools consider time to be discrete. Indeed, most electronic organizers use a minimum time slot, usually 15 or 30 minutes. Hence, we model time as a nonnegative integer, with zero denoting the current time. The next subsections present in detail the proposed model for an individual X  X  activities, with the order of presentation following the outline of Figure 1. 2.2.1 Activity Modeling. Consider a set T of N activities, T {
T , T suppose that activity T i has a duration range with meaning that there is no value in scheduling T allocated duration less than dur min i (i.e., it would be preferable not to schedule T at all) and no extra value in scheduling T i in the plan with an allocated duration more than dur max i .Writing dur i to denote the duration actually allocated to T we have where (Ci) is interpreted as  X  X onstraint i X . An activity T be) interruptible , that is, it may be possible to split the activity into parts that can be scheduled separately. With the decision variable p of parts, p i  X  1, into which T i has been split in the plan (for noninterruptible activities we always have p i = 1). With T ij we denote the j activity, 1  X  j  X  p i . For each part T ij we introduce the decision variables t dur ij , denoting the start time and the duration of part j , respectively. The sum of the durations of all parts of an activity equals dur i
For each interruptible activity T i , the minimum and maximum allowed du-ration for each of its parts, smin i and smax i , as well as the minimum and maximum allowed temporal distance between each pair of its parts, dmin dmax i , are given. In particular, for the durations of the parts of an interruptible activity we have
Depending on the values of smin i and smax i and the overall duration range of the activity (Eq. (1)), implicit constraints are inferred on the values of p interruptible activities. For example, if smin i  X  dur max for noninterruptible activities, it is reasonable to expect that smin
Regarding the constraints on the temporal distance between the parts of an interruptible activity T i , we have minimum and maximum distance constraints and with the symbols  X  and  X  denoting disjunction and conjunction, respectively.
The special case with dmin i = 0and dmax i = X  denotes the absence of any proximity constraint between the parts of the interruptible activity T that proximity constraints should hold for any pair of infinitesimal pieces of the interruptible activity; thus, the closest ends between any two parts of the interruptible activity are considered for the minimum distance constraint (C4), whereas the remotest ends are considered for the maximum distance constraint (C5).

Each activity T i has a temporal domain D i = [ a i [ a temporal domain determines the time periods when the parts of an activity can be scheduled.
It is expected that a ij + smin i  X  b ij as well as b ij &lt;
N , 1  X  j  X  F
A set of M locations, Loc ={ L 1 , L 2 ,..., L M } is given, and a two-dimensional matrix Dist of the temporal distances between locations (nonnegative integers), not necessarily symmetric. Each activity T i is associated with a nonempty set of locations, Loc i  X  Loc , denoting alternative places where the individual should be in order to perform each part of the activity. The decision variable l  X  Loc of the same or different activities scheduled at distant locations, the following condition should hold.
Note that (C8) imposes disjointness only for parts of activities scheduled at distant locations. Parts of activities scheduled at nondistant locations may over-lap, depending on their utilization values. A special location with no distance from any other location, called anywhere , can be defined, that is, Dist ( anywhere,
L ) = Dist ( L, anywhere ) = 0 for any L  X  Loc (of course, anywhere is also a mem-ber of Loc ). Assigning anywhere to an activity means that the activity can be performed at any location, so there is no reason to assign any other location to the same activity.

Each activity T i is characterized by a utilization value, denoted utilization such that 0  X  utilization i  X  1. Utilization expresses the percentage of an in-dividual X  X  attention an activity requires while it is performed. Two or more activities may overlap in time provided they are scheduled at nondistant loca-tions and the sum of their utilization values does not exceed 100%.
The proposed model does not allow parts of the same activity to overlap, even if the sum of their utilizations does not exceed one (constraint C4, even for dmin i = 0). 2.2.2 Binary Constraints. The proposed model allows for binary con-straints between activities. In particular, it supports ordering constraints, min-imum distance and maximum distance proximity constraints, and implication constraints. For convenience, ordering and proximity constraints are also re-ferred within this article as temporal constraints . All these constraints are hard, that is, any plan violating any binary constraint is considered invalid.
Binary temporal constraints are conditional on the presence of both activities in the plan; in case any of the involved activities is not scheduled, the temporal constraint is not applicable.

An ordering constraint between activities T i and T j interpreted as
In other words, no part of T j can be scheduled before all parts of T finished.

Concerning minimum distance and maximum distance constraints, let dmin ij = dmin ji and dmax ij = dmax ji nonnegative integers denoting the mini-mum and maximum allowed distances between any infinitesimal pieces of the two activities. For any pair of parts, T ik of T i and T jl imum and maximum distance constraints exist, the following two conditions should hold respectively.
The special cases where dmin ij = 0or dmax ij = X  denote the absence of the corresponding proximity constraint between activities T i
Implication constraints between pairs of activities T i and T
T  X  T be scheduled as well, that is, T j is a prerequisite for T may be scheduled and T i not.
An implication constraint does not by itself impose any ordering constraint between the two activities, that is, T j might be scheduled before or after T 2.2.3 Utility Sources. Scheduling an individual X  X  activities is considered an optimization problem in the proposed model. By this we mean that the goal is not to schedule all the activities, but to maximize the utility of the plan.
Accordingly, an empty plan is a valid plan, but usually has zero utility. There are several aspects of the problem that contribute to the utility; we distinguish three of them: which activities are included in the plan, how each activity is scheduled individually, and how the activities are scheduled in relation to each other. All utilities are considered nonnegative real numbers.

In the following paragraphs we exemplify the proposed model by defining utility functions for the various utility sources. Our choices are motivated by simplicity and efficiency. However, simple modifications will extend the algo-rithmic solution we propose in Section 3 to more complicated utility functions.
It is expected that each activity being included in the plan yields an amount of utility. This utility may depend on the allocated duration, while satisfying (C1). Assuming that the received utility does not decrease with the duration, we adopt a piecewise linear model for T i  X  X  utility, U i where u lo w i and u high i are utility values, with 0  X  u
Preferences over an activity X  X  temporal domain are allowed. For each activ-ity T i we define a function u time i , which for any time point t returns the utility received by scheduling a unit of T i  X  X  duration at that point. In the proposed model we allow for three types of temporal domain utility functions: Constant utility, linear utility, and stepwise utility. For linear (stepwise) domain utility functions we distinguish ascending functions, that is, the latest the better (bet-ter after the step time point) and descending functions, that is, the earliest the better (better before the step time point). Figure 2(a) shows a linear descending function whereas Figure 2(b) shows a stepwise ascending function. Taking into account that T i might be interruptible, as well as that T we define the accumulated utility received by the way T i with the following integral where  X  i is the current plan of T i . The integral in (3) is over the various time intervals [ t ij , t ij + dur ij ] where some part of T i such parts). Hence, Eq. (3) defines the utility received by the way an activity is scheduled within its domain as the average preference of the time slots allocated to the activity.

In the case of interruptible activities, the proposed model allows for intraac-tivity proximity preferences. Assuming a minimum and a maximum desired distance for the parts of an interruptible activity, denoted with pdmin pdmax i respectively, as well as the corresponding maximum utilities u u i received in case of full satisfaction, we define the utility received by the user with respect to intraactivity proximity preferences as follows.
Formulas (4) and (5) take into account partial satisfaction of the underlying constraint. Indeed, the utility received from the proximity preferences is equal to the fraction of the pairs of infinitesimal pieces of T the maximum utility assigned to each proximity preference. It is worth noting that proximity constraints do not preclude proximity preferences, provided that pdmin i &gt; dmin i and pdmax i &lt; dmax i .

Example 1 . Suppose an interruptible activity of reading a book, with a fixed duration of 24 hours, scheduled in three parts of 8 hours. Suppose that there is a maximum distance preference of reading the book within a week; however, only two of the activity X  X  three parts have been scheduled within a week, with the third part being scheduled one month later. Finally, suppose that u d max i = 1, that is, we get one unit of utility in case of full satisfaction of the preference.

To simplify our calculations, we discretize the integral of Eq. (5) using 30 minutes as the unit of time. Hence there are 32 infinitesimal pieces of the activity scheduled within one week, corresponding to the first two parts, as well as additional 16 pieces, corresponding to the third part. The pairs of infinitesimal pieces scheduled within one week distance are 32 16, that is, 1280 pairs. The duration of the activity is 48 units of time, so Eq. (5) evaluates to about 0.556 units of utility.

Utility may also result from the way activities are scheduled in relation to each other. The proposed model supports four types of binary preferences: ordering preferences, minimum distance preferences, maximum distance pref-erences, and implication preferences. For convenience, the first three of them are also referred as temporal preferences within this article, whereas the dis-tance preferences are also referred as proximity preferences.

Concerning temporal preferences, the proposed model allows for partial sat-isfaction. To this end we define the notion of Degree of Satisfaction of preference p , as the fraction of the pairs of infinitesimal pieces of the two activities for which the preference holds to the total number of pairs of infinitesimal pieces of the two activities.

DoS is a continuous integral taking values between 0 and 1; however, it can be approximated by a discrete integral with dt i and dt
Having computed DoS ( p ) for a binary preference p , the utility received by this preference is defined as where u p the maximum possible utility that results in case of full satisfaction of p .

We use the notation u i &lt; j to refer to the utility received in case T entirely scheduled before T j ; pdmin ij and pdmax ij to refer to the preferred minimum and maximum distances between activities T i and T u ij to refer to the resulting utilities in case of full satisfaction, respectively.
Note finally that temporal preferences do not yield any utility in case any one of the involved activities is not included in the plan, so DoS is equal to 0 in these cases.
 Example 2 . One is attending two seminars, A and B, with having attended
A being useful to better understand B, so an ordering preference between the two activities exists. Each seminar consists of two 120 minute lectures, say A
A ,B 1 and B 2 . Suppose that the ordering of the lectures is A
B . Assuming again a time slot of 30 minutes, the degree of satisfaction for this ordering preference is computed as follows: The 4 units of A preference regarding the 8 units of B. The 4 units of A 2 regarding only the 4 units of B 2 . In total, there are 4 48 pairs of unit size infinitesimal pieces of A and B that satisfy the preference.
The total number of pairs of unit size infinitesimal pieces of A and B is 4 that is, 64. Hence, the degree of satisfaction evaluates to 0.75.

The way we defined the degree of satisfaction is not the only possibility. A more general way would be to allow arbitrary powers x of the current definition, thus penalizing stronger the partial satisfaction with higher values of x .Inthe extreme case where x  X  X  X  , partial satisfaction would not yield any utility. It is in our future plans to extend the proposed model and the solution framework towards this direction.

Implication preferences of the form T i  X  T j are interpreted as a preference to include T j in the plan every time T i is included as well. Since an activity is either included or not included in the plan, implication preferences do not allow for partial satisfaction. Thus any utility u T where T i is in the plan whereas T j is not, that is, the only case an implication is violated. Note that implication preferences may yield utility even for an empty plan.

Finally, it is interesting to note that, with the exception of proximity con-straints, binary constraints preclude the corresponding binary preferences. For example, there is no point in having a preference of the form T in the presence of a constraint of the same type between the same activi-ties. However, in case of proximity constraints, it is reasonable to have both a proximity constraint and a proximity preference of the same type between the same activities, provided that the distance imposed by the preference is tighter than the distance imposed by the constraint, that is, pdmin or pdmax ij &lt; dmax ij .
 To summarize, the optimization problem is formulated as follows.

Given: (b) a two-dimensional matrix with temporal distances between all locations; (c) a set C of binary constraints (ordering, proximity, and implication) over the (d) a set P of binary preferences (ordering, proximity, and implication) over the
Schedule: the activities in time and space, by deciding the values of their start times t ij , their durations dur ij , and their locations l ij , while trying to maximize the following quantity subject to constraints (C1) to (C13). 3. METAHEURISTIC GREEDY SOLUTION
Having defined our model of the problem of scheduling an individual X  X  activities, in this section we present a greedy approach to tackle the problem, while trying to maximize the received utility. The proposed approach is based on the squeaky wheel optimization framework. We start with a brief overview of this framework and then explain its adaptation to the problem at hand. Figure 4 summarizes this section by presenting the overall approach. 3.1 The Squeaky Wheel Optimization Framework
Squeaky Wheel Optimization (SWO) is a general optimization framework that can be adapted to several constraint satisfaction and optimization problems [Joslin and Clements 1999]. The core of SWO is a construct/analyze/prioritize cycle, as shown in Figure 3(a). Constraint variables are ordered in a priority queue in decreasing order of an initial estimate of the difficulty to assign a value to each one of them. A solution is constructed by a greedy algorithm, taking decisions in the order determined by the priority queue. This solution is then analyzed to find those constraint variables that were the  X  X rouble makers X . The priorities of the  X  X rouble makers X  are increased, causing the greedy constructor to deal with them sooner in the next iteration. This cycle repeats until some termination condition occurs.
 SWO is known to be a fast but incomplete search procedure. As shown in
Figure 3(b), SWO searches in two coupled spaces: the priority space and the solution space. The greedy construction algorithm defines a function g from the priority queues to the solutions, that is, for each ordering p of the activities a plan g ( p ) is defined. However, function g may be neither surjective nor injective; so, many feasible solutions may not correspond to any ordering of the activities in the queue.

Managing an individual X  X  activities is considered an optimization problem in this article. Hence, SWO should focus more on the utility that is estimated to result from the various scheduling options rather than the difficulty to schedule each activity, although the latter is also relevant. The next subsections give the details of the proposed SWO adaptation to tackle the problem formulated in
Section 2. 3.2 Assessing the Difficulty to Schedule an Activity
Crucial to all phases of SWO is an efficient metric to estimate the difficulty to schedule an activity. Taking into account the noncontinuous temporal domains, as well as the constraints on the sizes and the distances of the parts on an interruptible activity, we designed metric m 3 (two simpler metrics called m and m 2 were presented in Refanidis et al. [2006]). The new metric attempts to estimate how much duration can be scheduled with an activity X  X  temporal domain, taking into account the extra constraints for interruptible activities. A precise answer to whether an activity fits within its temporal domain may be a hard problem. Our goal is an upper bound of the maximum possible duration that can be scheduled within an activity X  X  temporal domain; if this estimate is less than dur min i for activity T i ,then T i cannot be scheduled.
In simple words, m 3 works as follows. Starting from the left end a interval [ a ik , b ik ] of activity X  X  T i temporal domain D imum possible duration d , such that smin i  X  d  X  smax i , leaving the minimum required distance between them dmin i . Ignore the minimum distance con-straint dmin i between parts that have been scheduled in different intervals of D i , in order for the heuristic to remain admissible; otherwise, significant computational effort is required to ensure admissibility. Then use the ratio be-tween the activity X  X  minimum duration dur min i to the scheduled duration as an estimate of the difficulty to schedule the activity. Clearly, if m activity cannot be scheduled.

Example 3 . Suppose an activity T i with dur min i = 8, smin 5 dmin i = 3and D i = [0 , 12]  X  [14 , 20]. Within the first interval we could schedule part T i 1 from t = 0to t = 5( d = 5) and part T ( d = 4). Within the second interval we could schedule part T 19 ( d = 5). Note that the minimum distance constraint among T ignored. The totally scheduled duration is j dur ij = 14, so m
Metric m 3 could be considered a more elaborate version of metric m sented in Refanidis et al. [2006] and defined as the ratio between the duration of an activity and the net size of its domain. Hence, m 3 the net size of a domain is never smaller than the maximum possible duration that can be scheduled within a domain, as it is computed by m that came before, m 1 would evaluate to 0.4. On the other hand, m dominate metric m 2 , also defined in Refanidis et al. [2006] as the ratio between the minimum possible makespan of the activity and the width of its domain.
For large values of dmin i (compared to the sizes of the domain intervals and the gaps among them), it is expected that m 2 gives better estimates than m whereas for small values of dmin i it is expected the opposite. As an example of evaluating m 2 , in the particular case T i requires at least two parts, for ex-ample, T i makespan of T i (considering also the minimum distance dmin and T i nor m 3 ever overestimate the maximum possible duration that can fit within an activity X  X  temporal domain. Hence, taking the maximum value between m and m 3 is the best strategy. So, we define the difficulty to schedule activity
T 3.3 Estimating the Overall Utility
Since we are interested in the utility generated by a plan, it is crucial to be able to obtain estimates for it before grounding all the decision variables. There are several sources of utility, most of them requiring the activity to be schedulable (implication preferences are the only exception). Hence, estimating the utility difficulties to schedule them.

We distinguish two sources of utility: unary and binary preferences. Further, there are three states for an activity under evaluation: the activity has already been decided (i.e., it has been scheduled or it has been decided not to be included in the plan), the (interruptible) activity is partially scheduled, and the activity has yet to be decided. In our implementation of the SWO (described in Section 3.4), only one activity can be partially scheduled at any time. 3.3.1 Estimating the Utility of Unary Preferences. There are four types of unary preferences: duration preference, temporal domain preference, minimum distance preference, and maximum distance preference. Finding the maximum possible utility received by all of them simultaneously for a single activity is a computationally expensive problem, since numerous alternative plans need to be evaluated. To alleviate this problem, we make the simplifying assumption that the sum of the utility accumulated by the four alterative unary prefer-ences is maximized by a plan that maximizes the utility received by a single unary preference. So, we try to maximize each source of utility separately by examining suitable plans; however, while trying to maximize a single source of utility, the utility resulting from the rest of the unary preferences is estimated as well. Our assumption is quite reasonable for linear models; however, the proposed model, although comprising several linear components, is not linear in general (e.g., temporal domains are not continuous), so our approach does not guarantee that the maximum possible utility received simultaneously by the four unary preferences will be found. The next paragraphs present the details of this approach.

Scheduling more duration for a single activity T i (with a minimum of dur is not always the best option, since the extra duration could be scheduled at less preferred areas of the temporal domain, thus decreasing the utility received from domain preference defined by (3). Furthermore, more duration might reduce the utility received from proximity preferences, defined by (4) and (5).
In general, extra duration makes the attempt to satisfy proximity preferences harder. So, in all cases when we attempt to estimate the utility received from unary preferences, we do it both for the minimum and the maximum possible duration of each activity.

Concerning domain preferences using Eq. (3), it is attempted to sched-ule each activity (except for those that have constant domain preference) as early as possible or as late as possible, according to the type of the domain preference. An approach similar to metric m 3 parts having the maximum possible duration being scheduled one after the other, leaving the distance dmin i between them within the same domain interval.

Estimating utility that results from a unary minimum distance preference pdmin i , we compute diff ( T i ) assuming various values d of the minimum dis-tance constraint, such that dmin i  X  d  X  pdmin i , starting from higher values.
As soon as we find a value of d for which di f f ( T i )  X  of Eq. (4), using as  X  i the first or the last (depending on the temporal domain preference) scheduled parts of the activity (using the m 3  X  ), up to the activity X  X  duration.

Estimating U dmax i (  X  i ) is more expensive. Indeed, U dmax all the parts of an interruptible activity are scheduled as close to each other as possible, i.e., at a distance equal to dmin i . However, depending on the shape activity X  X  domain the earliest part will be scheduled. So, attempts to sched-ule the earliest part at different starting points within the activity X  X  domain are needed, in order to find the maximum value for this type of utility. Our activity X  X  domain. Again, the m 3 approach is adopted to construct candidate plans. As soon as a plan  X  i for the entire activity within pdmax the attempts to maximize maximum distance utility are stopped.

For partially scheduled activities, the scheduled parts are also considered when estimating unary preferences. In particular, for domain preferences the scheduled parts contribute a fixed amount of utility, according to Eq. (3); for minimum distance preferences, a minimum distance d is maintained between the unscheduled and the scheduled parts of the activity, whereas the utility re-sulting from the already scheduled parts is also assessed. Finally, for maximum distance preferences, the distance between the new and the already scheduled parts, as well as the distance among the already scheduled parts, is taken into account.

Example 4 . Suppose an interruptible activity T i , with the following at-tributes: dur min i = dur max i = 10, D i = [0 , 10]  X  [20 ing domain preference function (similar to that of Figure 2(a)), smin smax i = 4 , dmin i = 3 , dmax i = X  , pdmin i = 10 and pdmax
Trying to schedule this activity as early as possible (according to the m heuristic), in order to maximize the linear descending temporal domain pref-erence utility, results in the plan  X  1 = 0:4 , 7:3 , that a part with duration y has been scheduled at time x . Trying to max-imize the minimum distance preference, we start with d which results in  X  2 = 0:4 , 20 : 4, a plan with totally scheduled duration dur i = 8 &lt; dur min i . Indeed, another part cannot start at t duration of this part would be at most 1, that is, violating the smin straint without furthermore accumulating at least dur min try d = 9, resulting in  X  3 = 0:4 , 20 : 4 , 33 : 2, which is a valid plan. Finally, trying to maximize the maximum distance preference pdmax creating two plans for T i , one starting from 0 and another starting from 20, both having the minimum possible distance dmin i between their parts. The first is  X  4 =  X  1 , whereas there is no plan starting from t  X 
Plans  X  1 ,  X  3 and  X  4 are evaluated in terms of all unary preferences, that is, using Eqs. (2), (3), (4), and (5), with the best of them giving the estimate for the maximum utility that might result from T i  X  X  unary preferences. Note finally that in this example we considered a fixed duration for T candidate plans should be formed both for dur i = dur min thus resulting in about twice plans to evaluate. 3.3.2 Estimating the Utility of Binary Preferences. Recall from
Section 2.2.2 that there are four types of binary preferences (soft constraints) that might hold between any pair of activities. Maximizing the total utility re-ceived from all of them simultaneously is a computationally expensive problem, requiring evaluation of numerous alternative pairs of plans for them. To allevi-ate this problem, we adopt two simplifying assumptions: First, the total utility received from all binary preferences over a pair of activities is maximized by a pair of plans that maximizes a single preference too. Second, binary constraints over the same pair of activities are ignored. These assumptions concern only temporal binary preferences, whose utility depends on the particular plans of the involved activities. On the other hand, implication preferences depend only on whether the activities are schedulable (or have already been scheduled) or not, so they are treated separately. In the next paragraphs we exemplify the pairs of plans that are evaluated for any pair of activities over which binary preferences hold. For any such pair of plans, all the binary preferences that hold over the two activities, as well as the unary preferences over the involved activities, are taken into account.

Concerning an ordering preference of the form T i &lt; T j the maximum possible utility is to try to schedule T i as early as possible and T as late as possible within their temporal domains (in a way similar to metric m and thus a single pair of plans needs to be evaluated. Hence, parts of maximum possible duration are scheduled from left to right for T i for T j , up to the maximum duration allowed for each activity. Then, the degree of satisfaction, and thus the resulting utilities, for the ordering preference is computed, using Eq. (7). Furthermore, in the presence of proximity preferences as well, additional utility might result from them. Finally, to increase accuracy, Eqs. (2) through (5), is also accumulated.

Minimum distance preferences are treated in a similar way. In order to minimize the distance between two activities T i and T j , it is sufficient to check two pairs of plans: one where T i is scheduled as earlier as possible and T scheduled as latest as possible, and another where T j is scheduled as earlier as possible and T i is scheduled as latest as possible, within their temporal unary and binary preferences over T i and T j .

Maximizing the utility resulting from binary maximum distance preferences is again a computationally expensive procedure. This utility is maximized whenever both activities are scheduled as compact as possible, that is, with minimum possible distances between their parts, and as close to each other as possible within their temporal domains. So, the degree of satisfaction depends on the start point of the plan of each involved activity, thus making the num-ber of pairs of plans that need to be checked very high. In order to reduce the number of start point combinations to be checked, we perform two relaxations. First, we consider as candidate start points the left ends of the intervals of their temporal domains only, with each candidate start point being used for the other activity as well if it falls within its domain. Second, each pair of can-didate start points (one start point for each activity) is checked against some eligibility rules, in order for the respective plans to be evaluated. Actually, a case where T i ends before T j starts, when either T i can start later while still ending before T j starts or T j can start earlier but not earlier than T not be considered. Again, Eqs. (2) through (5) and (7) are used to evaluate the overall utility received by unary and binary preferences over T pair of plans resulting from the eligible pairs of start points.

Evaluation of the various pairs of plans for pairs of activities T which binary preferences exist is performed for up to four alternative duration combinations: ( dur min i , dur min j ), ( dur max i , dur dur max j ), with identical pairs being ignored.

Finally, implication preferences are evaluated separately of the rest of the preferences, since they do not depend on particular plans but on the existence or not of any plan for the involved activities. So, an implication preference of the form T i  X  T j yields all of its utility in all cases but the case where T be scheduled (according to the difficulty measure) or has already decided not to be included in the plan (i.e., it is an activity earlier in the priority queue than the current activity) and T i can be scheduled or has already been included in the plan.

Example 5 . Suppose two interruptible activities, T i and T lowing attributes: dur min i = dur max i = dur min j = dur [30 , 50] , D j = [30 , 50]  X  [60 , 80] , smin i = smin j dmin j = 3 , dmax i = dmax j = X  , an ordering preference T mum distance preference pdmin ij = 5, and a maximum distance preference pdmax ij = 20. No binary constraints are assumed between the two activities.
Based on the ordering preference, the pair of plans  X  i where  X  i scheduled as early as possible and T j has been scheduled as late as possible within their domains. Based on the minimum distance preference, in addition to the pair  X  i 34 : 2 , 39 : 4 , 46 : 4 and  X  j pair  X  i preference). Finally, based on the maximum distance preference, the following pairs will be initially considered.
Pair  X  i plans, that is,  X  i
So, pairs  X  i in terms of all unary and binary preferences, that is, aggregating utilities from Eqs. (2) to (5) and (7), with the maximum sum characterizing the pair of activities T i and T j in terms of binary preferences. In this example we considered fixed durations for T i and T j .If dur min i &lt; pairs of plans should be formed for all combinations of minimum and maximum durations of the two activities. 3.3.3 Aggregating Utilities. Estimates of the overall utility are needed each time a decision is to be taken. Decisions usually involve a subset of the undecided constraint variables, so for each alternative vector of values for a set of such variables, an estimate of the overall utility that will result after deciding the remaining constraint variables is needed as well. This overall estimate is based on the estimates of the utilities resulting from unary and binary preferences, so an aggregation method is needed. The approach we adopt is a combination of sum and max aggregation operators [Refanidis and
Yorke-Smith 2009]. In particular, we assign a utility value to each activity using the max operator over the alternative sources of utility, and then we estimate the utility of the entire plan using the sum operator over all activities.
Specifically, for each activity T i , an estimate  X  u i of the maximum possible util-ity received from the combined unary preferences, according to Section 3.3.1, is computed. Furthermore, for any other activity T j , such that binary prefer-ences between T i and T j have been expressed, an estimate  X  u possible utility received from the combined binary preferences, according to Section 3.3.2, is also computed. Then, the total utility  X  is estimated by the following equation.
Finally, the overall utility of the plan  X  U , after deciding all the remaining constraint variables, is estimated by the following equation.
Eq. (11) takes into account also the implication preferences, which are in-dependent of the particular plans. So, for any implication preference T the quantity u T diff ( T j )  X  1) or is already scheduled, or T i is not schedulable (i.e., diff ( T or has already decided not to be scheduled. 3.4 Greedy Solution Construction
As described in Section 3.1, the basic SWO solution cycle comprises three phases: construct a solution, analyze it, and reorder the activities in the prior-ity queue. The whole procedure is preceded by the initialization of the priority queue.

Although the initial ordering of activities in the priority queue is not crucial, a judicious ordering may save several iterations of the SWO cycle. Since our goal is to maximize the utility received from scheduling the activities, the initialization fills the priority queue in decreasing order of the maximum utility that can be produced by each activity, according to Eq. (10).

The most important step of the SWO solution cycle is the greedy construc-tion of a solution. For each activity, a combined decision has to be taken as of when to schedule it, where to schedule it, and what amount of duration to allocate (in case of no fixed duration). For interruptible activities, these deci-sions have to be taken also for each part. Activities are scheduled one after the other, according to the order in which they appear in the priority queue.
Failing to schedule an activity T i results in not attempting to schedule any subsequent activity T j in the presence of an implication constraint T
Forward checking (described in Section 3.7) occurs before scheduling the first activity, as well as after scheduling each activity. It occurs also when evaluating each alternative scheduling decision, in an attempt to improve the precision of the utility estimates.

In particular, in order to schedule a noninterruptible activity T binations of the possible durations dur i cations l i domain must be calculated. For each such combination, and following forward checking, the overall utility  X  U that is expected to result after scheduling all the remaining activities is computed, according to Eq. (11), and the best com-bination is adopted. Any combination that renders unschedulable, according to the difficulty metric, any subsequent activity T j , for which an implication constraint T i  X  T j exists, is ignored. In case no valid combination exists, T cannot be scheduled.

The procedure is similar for interruptible activities, as if each part of them was a separate activity. Parts are scheduled one after the other, with no back-tracking allowed between them. Specifically, for each part T tions of the possible durations dur ij  X  [ smin i , smax i l  X  Loc
T are evaluated, according to Eq. (11) and, following forward checking, the best combination is adopted. Again, any scheduling option that renders unschedu-lable either the remaining duration of the current activity, or any activity T later in the priority queue, such that an implication constraint T is ignored. In case that no valid combination for T ij exists, while the required minimum duration dur min i has not yet been scheduled, T i
Similarly, the consequences of forward checking while scheduling the previ-ous parts of T i are retracted from the temporal domains of the subsequent activities.

Parts of an interruptible activity are scheduled up to the maximum possible duration dur max i ; however, as soon as the minimum required duration dur has been achieved, there is the option not to schedule another part even if this is possible. The decision to schedule additional parts of the same interruptible activity beyond dur min i is taken by computing estimates of the utility is expected to be received without and with scheduling them; if the former exceeds the latter, an additional part is not scheduled.

In any case of failing scheduling an activity T i , all already scheduled activ-ities T j such that an implication constraint T j  X  T i exists, are also retracted of the plan. The consequences of forward checking while scheduling any such activity T j are also retracted from the temporal domains of the subsequent activities.

It is worth noting that, according to the previous paragraphs, there is no decision specifically taken for the number of parts p i in which an interrupt-ible activity T i is decomposed. Besides, the proposed model does not allow expressing preferences either over the number of parts p i tions. So, what happens is that for each part T ij , a combined decision is taken for dur ij , l ij , t ij , while trying to maximize Eq. (11). The number of parts p results as a consequence of the decisions on dur ij . 3.5 Computing the Feasible Part Durations for Interruptible Activities
For an interruptible activity, depending on the values of dur and smax i , several durations for dur ij may be prohibited. For example, if dur of duration 8, since in this case the next part to be scheduled should have a maximum duration of 4, thus violating the constraint imposed by smin see that special reasoning is needed when allocating durations to the parts of an interruptible activity.

Identifying the feasible part durations to be scheduled preserves computa-tion time, since not all possible part durations need be evaluated. However, there are situations that are inherently problematic, that is, no solution exists that satisfies all duration constraints. Consider the case dur = 18, smin i = 10 and smax i = 12, in which there is no combination of parts durations that sums between 14 and 18. For such cases, we decided to allow exceeding dur max i to the least possible extent.

In order to check whether dur ij is a feasible duration for the next part T be scheduled, we observe the following: Given smin i and smax rations dur i that can be achieved while satisfying smin i are in [ K  X  smin i , K  X  smax i ], for various values of the positive integer K .Ifthe is, there is a value for K such that K  X  smax i &lt; dur min then there is no solution.

So, given a remaining duration range to be scheduled, [ A , B ], we identify the say K 2 ,forwhich K 2  X  smin i &gt; B . K 1 and K 2 can be computed from the following equations.

If K 2 = K 1 + 1, then no solution exists, so dur ij is not an acceptable duration for T ij . In the case that no acceptable duration for T ij relax dur max i constraint to the smallest possible extent. This can be achieved by setting dur ij = smin i for all remaining parts T ij of T
Example 6 . Suppose smin i = 10, smax i = 12, and dur min 31. Trying dur i 12 / 12 = 1and K 2 = 20 / 10 = 2. Trying dur i 20 , K since A = 15 , B = 21 , K 1 = 14 / 12 = 1and K 2 = 22 / 10 feasible option. Supposing that dur i between 15 and 21. In the same way we can proceed with T i 2 that dur i and so on, up to scheduling at least dur min i duration. 3.6 Analyze, Reordering and Memoization
Before scheduling each activity T i , Eq. (10) is applied to each subsequent ac-tivity T j in the priority queue in order to estimate the utility result from scheduling each one of them. After having scheduled T applied again to all subsequent activities to compute updated values subsequent activity T j such that  X  U j &lt;  X  U j is marked for promotion before T
Promotion does not occur right after the identification of the flaw, but at the end of the current SWO iteration. The greedy solution construction continues with the current order, and by the end of the current SWO iteration all activities marked for promotion are promoted. In case an activity T k for promotion, before T i and before T j ,with T i being before T priority queue, T k is promoted before T i . In case T j was marked for promotion before T i and T k was marked for promotion before T j , then in the new priority queue T k will precede T j , which in turn will precede T where all activities were marked for promotion in all cases, the new priority queue will be the reverse of the old one.

There are two stopping criteria for the SWO cycles. The first criterion is to set a limit on the number of cycles. We adopted as a limit the identification of three consequent SWO iterations without any improvement on the utility U of the best solution found so far, according to Eq. (8). The second criterion takes into account the reordering mechanism. In case no reordering of the priority queue takes place after an SWO iteration, then iterations stop.

In order to avoid reevaluating the same order of the activities in the priority queue, a memoization procedure is needed. The full ordering of the activities in the priority queue is memoized before each SWO iteration. After reordering, the new order is checked against the memoized orders. In case a match is found, the new order is modified by cyclic right-shifting of all activities in the queue, that is, the first activity becomes second and the last activity becomes first.
Right shift can be attempted up to N times consecutively; if no fresh order is found, SWO terminates. 3.7 Forward Checking
There are several constraints supported by the proposed model. Constraint propagation is a useful technique, since it can result in better estimates of the difficulty metrics and the utility estimates. However, enforcing arc consistency is not possible in this problem formulation because, with the exception of the implication constraints, all other binary constraints are conditioned on the in-clusion of the involved activities in the plan. Suppose, for example, an ordering constraints T i &lt; T j between two as yet undecided activities. We cannot use bounds consistency to rule out parts of their temporal domains, unless we are sure that both activities will be included in the plan. Only in the presence of an implication constraint of the form T i  X  T j , bounds consistency could be used to rule out parts of T i  X  X  temporal domain only.

The approach we adopted is to employ forward checking, that is, prune the temporal domains of the subsequent activities in the priority queue each time a decision is taken for the current activity. Forward checking is also employed when evaluating alternative decisions for the current activity. Specifically, for each alternative decision (see Section 3.4), the domains of the remaining activ-ities are temporarily updated using forward checking and, thereafter, utility estimates are obtained. Full arc consistency is employed only for the implica-tion constraints, both after taking a decision and each time a candidate decision is evaluating. 4. EMPIRICIAL EVALUATION
Our empirical evaluation has two purposes. The first is to evaluate the pro-posed model in terms of effectiveness and efficiency. With effectiveness we refer to the quality of the resulting plans whereas with efficiency we refer to the time needed to find them. Since it is impractical to obtain optimal plans, it is difficult to precisely assess the quality of the resulting plans. To overcome this problem, we use theoretical upper bounds of the optimal plans to compare with. Further, we couple the adopted SWO method with a local-search postoptimization pro-cedure, trying to further improve the resulting plans. The second purpose is to get insights of how the adopted SWO method works in practice, to ascertain whether this framework was a fitting choice for the specific problem or not.
We implemented the algorithms described in Section 3 and we created sev-eral problem instances, using a random problem generator employing uniform distributions for the various choices. The problems generated differ only in the number of activities, whereas the rest of the parameters are constant. The planning horizon was set to 500 time units, with the temporal domain of each activity being a random set of intervals covering the entire planning horizon. 70% of the activities had fixed duration. 40% of the activities were interrupt-ible with minimum distance constraints, 30% of these had maximum distance constraints, 30% had minimum distance preferences, and 30% had maximum distance preference. 20% of the activities had utilization 0.5; the rest had full utilization. Binary constraints and preferences were defined with probability 1/(2 N ) for every pair of activities and every type of constraint or preference. We defined 4 locations, with random subsets of them assigned to the activities.
One of the locations had zero distance to every other, thus corresponding to an anywhere location.

Activity utilities were selected from the interval [5,12], temporal preference utilities from the interval [5,10], and duration utilities from the interval [2,5]. All utilities assigned to binary preferences were selected from the interval [1,3].
In our design choices we tried to simulate a real calendar with 30-minutes time slot. Accordingly, the time horizon corresponds to about 10 days, whereas the intervals of the temporal domain had an average width of 20 time units activities are fluent in time, have large domains, and many types of constraints and preferences are imposed on them. Our experience with the S system indicates that usually activities are much simpler than in our test suite.
The reported results focus both on the quality of the resulting plans, as well on the time needed to solve them. As already mentioned, it is impractical to obtain optimal solutions. Hence, we compare the quality of the solutions produced by the proposed methods to a theoretical upper bound, which can be obtained by summing up the maximum values for all alternative sources preferences over them, the looser this theoretical upper bound.

As an additional indication, we developed a simple but powerful postopti-mization procedure to further improve the plans produced by the SWO method.
In particular, after the termination of all SWO iterations, postoptimization tries to further improve the best plan found by attempting to move any scheduled part of any activity anywhere else within its domain. Provided that the new plan is valid, each such change is evaluated according to Eqs. (2) to (5) and (7) and it is adopted in case of a utility increase. These postoptimization attempts continue repeatedly until no further improvement is possible. The postopti-mization procedure does not change the durations of the scheduled parts or their locations, and does not attempt to schedule any unscheduled activity.
Table I presents the results. We have created five random problem instances of several sizes between 5 and 60 activities. The experiments were performed on an AMD Turion TL-60 64-bit machine running at 2 GHz, with 3GB memory, running MS Windows 7; the code was written in C ++ , it was compiled using
MS-Visual Studio 8 with /Ox full optimization and was run out of the develop-ment platform. Figure 5 depicts graphically the relation between the average quality (after postoptimization) and time to the problem size.
As can be seen from the results, the average quality (after postoptimiza-tion) of the resulting plans falls with the number of activities, starting from 94% of the theoretical upper bound for 5 activities and falling to 77% for 60 activities. The correlation coefficient of a linear regression is strongly negative ( r = X  0 . 90). The trend of quality decrease with problems with more activities was expected. Indeed, the greater the number of activities, the greater the number of constraints and preferences between them, hence the theoretically computed upper bound is expected to be looser. Suppose, for example, that ac-tivity T i is preferred to be scheduled as early as possible, whereas activity T preferred to be scheduled as late as possible. The existence of an ordering con-straint or preference T j &lt; T i or a maximum distance constraint or preference between them renders it impossible to get the maximum possible utility from all these sources of utility. Furthermore, for problems with many activities, some of the activities cannot be scheduled due to the hard constraints (the time horizon is the same in all cases). Hence, the utility these activities might have contributed (which is taken into account in the theoretical upper bound) can-not be received. Finally, more activities render the optimization problem more difficult, so it is expected that the performance of any incomplete optimization algorithm decreases.

The time needed to solve the problems also increases with the number of activities, following a linear trend with a strong positive correlation coefficient ( r = 0 . 94), as can be seen from Figure 5(b). Indeed, 5.5 seconds are needed on average to solve problems with 5 activities and 81 seconds for problems with 60 activities. These results demonstrate that, under the specific experimental settings, SWO scales up very well and hence is a suitable solving methodolog-ical choice to tackle our optimization problem. Of course, it does not provide any guaranty for the quality of the resulting plans; however, this is a known characteristic of the greedy algorithms and, as explained in the Introduction, it was a choice to adopt such an approach.

It is interesting to compare the quality of the resulting plans without and with postoptimization. Although there are cases where postoptimization does not bring anything at all (e.g., problems p5 2, p5 4, p5 5, etc.), in most cases there is some increase in the quality. The average increase over the whole set of problems is 0.62% (using the quality of the nonpostoptimized plan as a basis), which is noticeable but not significant. To further explore the impact of the postoptimization procedure to the overall approach, we rerun the SWO algorithm with employing the postoptimization procedure after each iteration affect both the evaluation of the intermediate plans constructed by SWO (step 3b in Figure 4), which should be evaluated after postoptimization, as well as the termination conditions of the main loop (step 3), since the main termination condition imposes termination after not encountering any better plan for three consecutive iterations.

After rerunning the SWO algorithm with postoptimization after each iter-ation, we encountered changes in the behavior (besides the increase in the planning time) in only six out of the sixty (i.e., 10%) problem instances. These changes are shown in Table II. As expected, in all other cases not shown in Table II, the time needed to produce the plans was increased.

As can be seen from Table II, the increase in the quality by running postopti-mization after each SWO iteration is negligible even in these six cases. This is another indication that the proposed SWO solver produces near-locally-optimal plans, at least under the transformations supported by the employed postop-timization procedure. Concerning the number of iterations in the six cases of increase. Finally, concerning the time needed to solve the problems, there is an increase of 5.25% when considering the whole set of problems (not shown in Table II), which is noticeable.

In order to get a better insight of what happens inside the SWO cycles, it is interesting to monitor one case. We selected problem p30 1, since it is the smallest problem instance with the largest number of iterations (i.e., 10) that we encountered in our problem set. Table III shows the percentage quality of the plans generated at each iteration of SWO for this problem instance, without and with postoptimization.

As can be seen, the best plan (according to Table I) with percentage qual-ity equal to 89.92 was found at iteration 7. With the exceptions of iterations 4 and 6, the quality of the plans generated during the first seven iterations continuously increases. The solving halts after iteration 10, since there is no improvement in the last three iterations. The decrease in the quality both be-fore and after the best plan has been found can partially be attributed to the memoization technique, which might prune good orderings that have been met before and replace them by a cyclic rotation of the priority queue. Finally, it is worth mentioning that the quality improvement due to the postoptimization procedure at the end of each iteration is not that significant compared to the differences in the quality between the base plans found by SWO at each it-eration. This explains why for the vast majority of the problems nothing has changed by introducing postoptimization after each iteration. It also serves as an additional evidence that the SWO algorithm, as has been adapted to this problem, was a good choice. 5. RELATED WORK
Palen [1999] notes some of the many ways that AI technologies can aid an individual X  X  time management. Recent ambitious integrated AI efforts that include time management include Freed et al. [2008] and Myers et al. [2007].
We restrict attention to application of automated scheduling technologies. Modi et al. [2004] and Berry et al. [2009] survey pioneering efforts to schedule tasks, noting the importance of user interaction in order to develop satisfactory plans.
A separate problem is assisting with task prioritization; one of the many such efforts is Varakantham and Smith [2007; 2008]. More closely related to the problem of our interest, but again distinct, is negotiation of meetings between multiple individuals; as noted in Berry et al. [2009], a series of assistive tools that employ AI have been developed for meeting scheduling assistance. A flavor of such tools is the system of Zabala et al. [2001], which takes events from an online todo list and schedules them; the preference model and the allowed constraints are simple.
 Due to the individualism of the use and management of time [Payne 1993;
Palen 1999], inherent in the domain are complex constraints, objectives, and preferences. These present challenges to AI planning and scheduling [Smith 2003]. Further, new and changing tasks and events make the domain dynamic [Gallagher et al. 2006; Verfaillie and Jussien 2005].

The S ELF P LANNER system [Refanidis and Alexiadis 2008] takes events ex-plicitly by the user and schedules them. The system implements a subset of the model we consider, by not supporting binary constraints and prefer-ences (with the exception of the ordering constraints), intraactivity distance preferences, intraactivity maximum distance constraints, activity utilities, ac-tivity utilization, duration ranges, and alternative locations for each activity. solving approach based on squeaky wheel optimization. A more expressive, but informal model formulation from which we draw is described by Refanidis and Yorke-Smith [2009], who, however, do not present means to solve their model.

Expressive constraints and powerful propagation techniques, notably for global constraints, account for the known success of constraint-based ap-proaches to scheduling [Baptiste et al. 2001]. Laborie [2009] presents generic models for three diverse scheduling problems using the commercial IBM ILOG
Scheduler tool. Among the three problems is the personal task scheduling model of Refanidis [2007]. Laborie X  X  work improves over Refanidis [2007] in terms of the quality of the resulting plans. However, solution times per problem are not reported, whereas the domain tackled by both Refanidis [2007] and Laborie [2009] is significantly less expressive than our model.

Squeaky wheel optimization, since its introduction by Joslin and Clements [1999] and application to a manufacturing problem, has been successfully applied to a range of scheduling problems, including task allocation in over-subscribed situations [Kramer and Smith 2003], planning for robot activi-ties [Joslin et al. 2005], personnel scheduling [Lim et al. 2003], and machine scheduling [Feng and Lau 2008]. Aickelin et al. [2009] apply a variant of SWO, evolutionary SWO , to two personnel scheduling problems. Evolutionary SWO adds selection and mutation in an attempt to increase the evolution of the solution. 6. CONCLUSION AND FUTURE WORK
In this article we developed a rigorous model for a rich variety of activities of an individual, accounting for intra-and interactivity constraints and pref-erences. We presented a solution approach, based on the well-known squeaky wheel optimization framework, enhanced with domain-dependent heuristics and forward checking, to cope with the underlying optimization problem. Em-pirical evaluation demonstrates that the approach is both effective, producing qualitative plans, and efficient, solving problem instances rapidly and scaling readily with problem size.

The present work can be extended in several directions. First, from an algo-rithmic point of view, we seek to further increase the quality of the resulting plans by designing more effective heuristics or coupling SWO with an enhanced local-search postoptimization procedure taking into account all the decision variables. In the same direction, we are investigating ways to further decrease the solution time by, for example, heuristically selecting a subset of schedul-ing options to evaluate, that is, when and where to schedule an activity and how much duration to allocate to it. We are interested in evaluating our algo-rithms by devising tighter theoretical upper bounds for the resulting utility, or comparing the SWO framework to other constraint optimization frameworks.
Second, from a modeling point of view, we want to examine extending the model in order to accommodate other aspects of an individual X  X  activities, for example, nonmonotonic temporal preferences, additional types of constraints and preferences, or other forms of the degree of satisfaction for binary prefer-ences. Any change in the model is expected to require additional work in the algorithmic dimension.

Finally, from an application point of view, it is in our immediate plans to incorporate the new model and solver to the S ELF P LANNER feedback from the actual users. In this integration, several engineering issues concerning the system X  X  usability need to be addressed. A long term goal is to integrate scheduling an individual X  X  activities with scheduling joint activities between different users of an intelligent calendar application.

The authors express thanks to P. Berry and B. Peintner, and to the anonymous reviewers for their constructive suggestions.

