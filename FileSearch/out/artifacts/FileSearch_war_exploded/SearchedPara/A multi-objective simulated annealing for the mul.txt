 1. Introduction
Nowadays, we can note that with the increased travel demand of individuals, the available resources are no longer able to satisfy all users. For example, urban public transport is basically affected by their rigidity (ride scheduling would be the application that adapts to the offer). Individual vehicles help avoid the drawbacks of public transport but they are at the same time non-ecological, and costly. Indeed, individuals seeking ways to a more flexible transport that can meet their needs. The solving of a DRP can meet this expectation. Indeed the DRP is considered as a collec-tive-individualized transport activated on demand. A DRP consists of meeting the travel demands on a set of passengers scattered geographically. Each transport demand is modeled by a request containing the information on this last. This information is the number of passengers, points of departure and destination, and the time windows related to these points. The problem consists of determining the best routing schedule for the vehicles, which minimizes overall transportation costs while maintaining a high level of customer service.

The DRP belongs to the generic class of vehicle routing and scheduling problems which have been extensively studied over the past 40 years (see, e.g., Toth and Vigo, 2002 ). It is subject to many constraints and must meet several needs. These needs and/ or goals may be contradictory, such as reducing travel time, cost reduction generated, maximizing the quality of service. It is classified as NP-hard problem ( G X rtz, 2006 ). The exact methods are not able to solve such a problem in a reasonable time, especially as the problem size is important.

In this case, we often use methods that find approximate solutions in reasonable time by applying heuristics and meta-heuristics, such as those based on genetic algorithms, simulated annealing, tabu search, etc. ( Cordeau and Laporte, 2006 ; Bergvinsdottir, 2004 ; Baugh et al., 1998 ). In addition, it is a multi-criteria problem. So we need a multi-objective method to solve the DRP.

The multi-objective methods has a rather different aspect to scalar-objective one. Instead of finding one global optimum, which is a general aim in scalar-objective optimization, multi-objective methods must find a set of solutions, which is called the equivalently important and all of them are the global optimal solutions. In our case, we use the Multi-Objective Simulated Annealing (MOSA) to solve the multi-criteria DRP.
 In this paper, we present the modelization of the multi-criteria
DRP. Subsequently we apply the MOSA algorithm to solve it. The second part of this communication is devoted to the presentation of DRP. In Section 3 we develop the mathematical formulation of the problem concerned. The description of the MOSA algorithm and the proposed approach for the resolution of this problem are given in Section 4 .In Section 5 , we detail the numerical results obtained that prove the effectiveness of our approach. Finally, we present the conclusion and perspectives of this work. 2. The dial a ride problem (DRP)
The DRP is characterized by a set of transport demands of size  X  X  n  X  X  and a number of vehicles  X  X  m  X  X  to serve them. Each transport demand is modeled by a request containing information on demand. To respond to this demand, we must recover a person must start in the time window [ a i , b i ]. Delivery must be made within the time window [ a i  X  n , b i  X  n ]. In fact, the DRP is an extension of the Vehicle Routing Problem (VRP) ( Dedong and
Qijun, 2008 ; Boudali et al., 2004 ). Indeed in the DRP, we have an additional constraint which is the consistency of the order of vehicle passage to serve a request. For example, we obviously cannot pass across a point of arrival of a transport demand before carrying the person making the request. So the aim is to design a set of least cost vehicle routes capable of accommodating all requests, under a set of constraints. The most common con-straints relate to vehicle capacity, route duration and maximum ride time, i.e., the time spent by a user in the vehicle. In our case, to execute the service, there is a homogeneous vehicles set with the same load capacity that cannot be exceeded. The passengers are picked and delivered by the same vehicle.

In this work, we will consider the static case where all transportation requests are known in advance. We define an upper limit on the number of vehicles available and assume that customers cannot be rejected. All vehicles have identical capacity
Q . Some instances might therefore have a feasible solution. 2.1. A DRP example
In Fig. 1 , we present a simple example of a DRP composed of five transport demands and a fleet of two vehicles. The circles represent the pickups points and the edges represent the deliv-eries points. Rectangles represent vehicles and arrows represent a vehicle itinerary. The time windows of pickups and deliveries points are represented by the values in brackets. Fig. 1 represents at the same time a solution for DRP. 2.2. A brief literature review on the DRP
A DRP is an extension of the PDP (Pickup &amp; Delivery Problem) where the transport of goods is replaced by the transport of persons ( Krumke et al., 2006 ). Several versions of the DRP have been studied over the past 30 years. In Cordeau and Laporte (2006 ), we find a more detailed presentation of the state of the art of this problem. The DRP has been widely studied in literature. In this section, we give a brief literature review on this issue.
There are several variants of the DRP. Indeed, there are DRP with or without time windows and DRP dynamic and static. In the case of dynamic DRP, the problem is usually treated as a succes-sion of static problems ( Nabaa and Zeddini, 2004 ). The majority of research has been focusing on the static DRP but Wilson et al. (1971 have solved the dynamic one. In our case of static DRP, a series of static multiple vehicle pickup and delivery problems with time windows are solved over time, using appropriate information update mechanisms to keep track of the planned routes. Static problems of this kind are typically addressed through heuristic means. Many problem-solving approaches first cluster customers into smaller groups to reduce the main problem into different single vehicle problems, which are then solved exactly or heuristically ( Bodin and Sexton, 1986 ; Dumas et al., 1989 ; Ioachim et al., 1995 ). Other approaches are based on pure insertion and exchange methods ( Jaw et al., 1986 ; Madsen et al., 1995 ).

When the problem size is small, we tend to use exact methods to solve it. In this context we cite the work of Psaraftis who used an exact algorithm of dynamic programming to solve the problem with one vehicle ( Psaraftis, 1980 ). User inconvenience is con-trolled through a  X  X  X aximum position shift X  X  constraint limiting the difference between the position of a user in the list of requests and its position in the vehicle route. Only very small instances ( n r 10) can be handled through this algorithm. He studied the case where there are time windows imposed at pickups and delivery points for each request. Desrosiers et al. (1991) further improve upon this methodology by performing the insertions in parallel. Dumas et al. (1991) have extended their single-vehicle exact algorithm to the multiple-vehicle case and applied it to instances with n r 55.

With the increase in travel demands in a DRP, researchers have decided to solve the problem using heuristics and meta-heuris-tics. These methods enable to reach an acceptable solution to the problem in a reasonable time. In this context, we mention major works such as those of Cordeau and Laporte (2003a) . Recently
Claudio et al., have developed a genetic algorithm for the DRP ( Claudio et al., 2009 ). But the genetic algorithm uses lots of memory to store generations, for this reason it is not recom-mended in this kind of problem characterized by a real-time aspect. So it is preferred in our problem to find an acceptable solution in less time.

The Multi-objective Simulated Annealing algorithm (MOSA) was not used to solve the DRP in the previous works mentioned in the state of the art. For this reason and the advantages of this [8:30, 9] [9, 10] [9 :45, 10 :45] [10, 11 :30] algorithm we have chosen to apply it to solve this problem.
Indeed the MOSA algorithm uses the domination concept and the annealing scheme for efficient search. Additionally MOSA can find a small group of Pareto solutions in a short time, this is important if you need a rapid response. Then find more solutions by repeating the trials for detailed information about the Pareto frontier. Indeed the MOSA algorithm uses less memory and it can be implemented in embedded system. 3. Mathematical model of DRP
The DRP has been modeled mathematically in several research works. It is generally modeled by a multi-objective mathematical program. In this section, we present the mathe-matical modeling of our DRP. This model is characterized by two main objectives. The first one is economic, and the second is the quality of service rendered to travelers. In this work, we solve a multi-objective DRP using the MOSA algorithm in the static context. In the follows part, we present our mathematical formalization of the problem
Variables of DRP n number of transport requests P  X  {1, y , n } pickup locations D  X  { n  X  1, y ,2 n } delivery locations M set of vehicles depots N  X  D [ P [ M the set of all nodes in the graph Request i consist of pickup I and delivery n  X  i
V i set of nodes visited by a transport demand i V set of vehicles
Q v capacity of a vehicle v [ a b i ] time window of pickup point of demand [ a i  X  n b i  X  n ] time window of delivery point of demand q i number loaded onto vehicle at node i. q i  X  q n  X  i
T ijv travel time from i to j with the vehicle v
T aiv arrival time for the request i with the vehicle v
T siv start time of service for the request i with the vehicle v NSV i the number of stations visited by a transport demand i
L iv the load of vehicle v after visiting node i
C ijv  X  C ij C v cost of travel from i to j with the vehicle such that C
X ijv decision variable of the problem,
X ijv  X  1 if the vehicle v takes a direct path from i to j , else X The Multi-objective function
The Multi-objective function: Economic criterion  X  Service quality criterion Economic criterion ECO  X  Service quality criterion :
The Service Quality (SQ) criterion is composed by two major X  X  criteria, the first one is the Ride Time (RT) criterion and the second one is the Number of Stations Visited (NSV) criterion. In our formulation for the DRP, we do not attribute weights to the objectives of the problem because we use the domination concept in the resolution of the multi-criteria DRP. Indeed the proposed approach does not use an aggregative method to solve multi-criteria problems. It applies the concepts of Pareto optimality and a-efficiency to find the best compromise solutions to the problem.
So, it reduces the set of possible solutions for the considered problem.

SQ  X  RT  X  NSV  X  2  X  where RT is the ride time and NSV is the number of stations visited with NSV  X  RT  X  We can rewrite RT (3) using the decision variable X ijv RT  X  With RT k is the ride time of demand of transport k RT Mathematical model Minimize F  X  X ijv  X  X  7  X  Subject to X
X X X ijv  X  T siv  X  T ijv T sjv  X  r 0 8 v A V ,  X  i , j  X  A N  X  11  X  a r T siv r b i 8 i A N , v A V  X  12  X  a X ijv  X  L iv  X  q vj L jv  X  X  0 8 v A V ,  X  i , j  X  A N 8 v A q r L iv r Q v 8 i A D , v A V  X  15  X  L mv  X  0 8 m A M , v A V  X  16  X  X ijv A 0 ; 1 fg X  17  X  F  X  X ijv  X  X  ECO  X  X ijv  X  X  RT  X  X ijv  X  X  NSV  X  X ijv  X  X  18  X 
In this model, we do not assign weights to the objectives of the problem, because we use the domination concept in the optimi-zation process. Indeed This method has advantages over the aggregation method. These benefits are: there is no obligation to make all the objectives of the problem to the same unit. There are no weights associated with objectives. So all the objectives in our formulation for the problem have the same importance in the optimization process. That is why; we do not mention the units of the objectives in our model.
 In this research, we apply the Multi-Objective Simulated Annealing algorithm to solve the multi-criteria DRP. Indeed the MOSA uses the domination concept and the annealing scheme for efficient search ( Nam and Park, 2000 ). The domination concept is explained in Definition 1 ( Section 4.1 ).

Description of constraints (7): The objective function of the DRP taking into account (8): Each customer will be assisted once, for just a vehicle. (9): A delivery place will always be in the same route that its (10): The flow contention (everything that enters is the same (11): Ensures that the arrival time at location j must be later (12): A vehicle v must satisfy the time window of pickup point i . (13): A vehicle v must satisfy the time window of Delivery (14): Ensures that the number of passengers passed on a path (15): The number of passengers in the vehicle v after visiting i (16): Ensures that the actual loads of the vehicles are set to (17): Guarantees that decision variables X ijv will be binary. (18): The multi-objective function of the DRP. 4. Developed approach
The hardness of the problem depends on the number of transport demands N . When N is small, traditional mathematical programming approaches can be used to obtain the real optimal solution of DRP; however, when N is large, it is not possible to do that. Therefore, researchers have developed various algorithms that can finish performing within polynomial time to find the problem initial feasible solution and then apply the meta-heur-istic approach to obtain an approximate global optimum solution.
To solve a NP-hard problem like the DRP, we do not have polynomial algorithms for their resolutions optimally. Using an approximate method is almost oblig atory. In this paper, we applied the Multi-Objective Simulated Annealing algorithm for solving the
DRP. The Simulated Annealing (SA) algorithm is a method following the process used in metallurgy. SA algorithm was originated by
Metropolis et al. ( Kirkpatrick et al., 1983 ). SA was developed from the so-called  X  X  X tatistical mechanics X  X  idea. Annealing is the process through which slow cooling of metal produces good, low energy state crystallization, whereas fast cooling produces poor crystal-lization. The optimization procedure of simulated annealing reach-ing an approximate global minimum mimics the crystallization cooling procedure. SA is classified among the research methods operating locally; it can make chan ges to the current solution to exit a local optimum. Generally, suddenly reducing high temperature to very low (quenching) cannot obtain this crystalline state. In contrast, the material must be slowly cooled from high temperature (anneal-ing) to obtain crystalline state. During the annealing process, every temperature must be kept long enough time to allow the crystal to have sufficient time to find its minimum energy state. The local search continuously seeks the solution better than the current one during the searching process. 4.1. Multi-objective simulated annealing (MOSA)
The MOSA algorithm is used in this research to find a Pareto solution. The MOSA applies the concepts of Pareto optimality to find the best compromise solutions to the problem. Indeed the
MOSA algorithm should converge to Pareto Optimal solution with a good level of diversification of this last. So, it reduces the set of possible solutions for the considered problem which is advanta-geous to the passengers and the transport company. So, it reduces the set of possible solutions for the considered problem which is advantageous to the passengers and the transport company.
We mentioned earlier that, along w ith convergence to the Pareto-optimal set, it is also desired that the MOSA algorithm maintains a good spread of solutions in the obtained set of solutions. Our MOSA algorithm used the transition palpability to maintain sustainable diversity in the Pareto solution with appropriate setting of its associated parameters. In Fig. 2 , we present the Pareto frontier of a multi-objective problem in case of minimization.

Definition 1. The vector F ( U ) is said to dominate another vector F ( V ), denoted F ( U ) o F ( V ) (in case of minimization), if and only if: f ( U ) r f i ( V )forall i A {1,2, y n }and, f j ( U ) o f
The MOSA algorithm is characterized by a disadvantage in multi-objective optimization by the fact of its inability to find multiple solutions. However, MOSA can do the same work by repeating the trials as it converges to the global optima with a uniform probability distribution in the single objective optimization. By cons MOSA has advantages over evolutionary algorithms (EAs) because it does not need a large memory to keep the population; and the MOSA algorithm does not use additional al gorithms to spread the solutions over the Pareto frontier. Indeed MOSA can find a set of Pareto solutions in a short time this is important if you need a rapid response, and then find more solutions by repeating the trials for detailed information about the Pareto frontier.

The pseudo-code of implemented MOSA algorithm is described in Fig. 3 :
Where x A [0 1]: randomly value used to calculate the prob-ability to move to a neighborhood solution S 0 ,0 o a o 1isa cooling rate, Iter-MAX: the number of iteration for each tempera-cost objective vector, Pt : The transition probability from solution
S to neighborhood solution S 0 . In step 8, we use the neighbor structure detailed in Section 4.2.2 to create a solution S X  neighbor-hood of the current solution S .
General transition rules such as the Metropolis or logistic method cannot be applied directly to the multi-objective pro-blems because they support only a scalar cost function. The suggested transition rule in this paper is very similar to the
Metropolis method except that they used a different cost criterion for the multi-objective cost function. The transition probability from state i to j is,
Pt  X  i , j  X  X  min f exp  X  c  X  i , j  X  = T  X  , 0 g X  19  X 
T is the annealing temperature. Six criteria for MOSA are sug-gested and evaluated. The schemes are as follows:
Minimum cost criterion c  X  i , j  X  X  min
Maximum cost criterion c  X  i , j  X  X  max
Random cost criterion c  X  i , j  X  X  where D is the dimension of the objective vector and a k is a random variable with uniform probability distribution.
Self cost criterion c  X  i , j  X  X 
Average cost criterion c  X  i , j  X  X 
Fixed cost criterion c  X  i , j  X  X  fixedvalue  X  25  X  4.2. The procedures of the MOSA algorithm
The MOSA procedure of this research is described as follows: S represents the current search position (or the current state in a finite state search problem) and T is the temperature parameter, which is gradually decreased as time goes on. A new search position S  X  is generated by the N( S ) function, its cost is evaluated and compared with the previous cost. When it is determined to be a good solution by the domination test, the new state is accepted.
Even when the new position is not proper (meaning the new position is dominated by the current state), it is accepted with some acceptance probability. When the new state is the same level of value as the current state, there can exist two schemes: move to the new state or stay in the current state. Indeed in ( Suman and Kumar, 2006 ) we have a results approve that the move scheme is better than the stay one. So when there is no superiority between the current state and the next state, the new state is accepted instead of the current one because moving in the non-dominated situation helps increase the spread performance and evade local optima. When whether to move or stay is determined, the algorithm repeats its loop with lower tempera-ture until termination conditions are satisfied.

To solve the dynamic DRP with the MOSA algorithm, a method for generation of an initial solution S , a method for generation of neighboring solutions S 0 (neighborhood structure), and an objec-tive vector C ( S ) to be optimized should be defined. When applying the developed approach to solve the DRP, we need to decide the solution representation of vehicle routes. In our approach, we adopted a matrix presentation of the solution. So, Lines show the The DRP is an extension of the Vehicle Routing Problem (VRP). To solve this problem we adopted the approach of solving routing principle of this approach is to divide the problem into two sub-problems. The first is a problem of assigning vehicles to trans-portation requests. The second is a problem of routing vehicles. In Fig. 4 we present the phase of assigning vehicles to the demands for a DRP formed by 5 demands of transport and 2 vehicles.
In Fig. 5 we present the routing phase as a solution to the problem. Reminding for a transport demand  X  X  I  X  X , we associate the point of departure number  X  X  I  X  X  and the arrival point number the passage order of the vehicle  X  X  i  X  X  by the point  X  X  j  X  X .
Each vehicle must start from the depot, and then visit the pickups and deliveries points sequentially according to the number in solution representation. According to the constraint of time window, each vehicle arrives at each point in the solution must be within the time window. A vehicle can arrive before the starting of the time window but still needs to wait until the allowable time of pickup or delivery; otherwise, it will violate the time window constraint. 4.2.1. Initial solution
This study used a distribution heuristic to set out the initial solution of MOSA. Our heuristic based on the method found in the work of Mauri and Lorena (2006 ) is responsible for routing the vehicles, for forming clusters of places in the routes and for determining their attending sequence of these. This heuristic allows the assignment of m vehicles to a set of n transport requests. This method of finding initial solution is based on the principle of random assignment of vehicles to transport requests. After assigning vehicles to requests, they will be ordered ran-domly in the tour of each vehicle. In this distribution heuristic, m empty routes are created, assigning to each one of them a specific vehicle. Later, all the customers X  transport requests (pick-up points and its respective delivery ones) are randomly distributed in a not uniform mode to these routes, and the n transport requests are randomly divided among the m vehicles. This heuristic is presented in Fig. 6 .

In Fig. 7 , we present an example of composition of initial solution. We designate by  X  X  i  X  X  the pickup point of transport demand istic may violate some constraints as the vehicle capacity and the respect of time windows on pickups and deliveries points. Indeed, in our approach we start from an initial solution that does not necessarily satisfy the constraints of the problem. These constraints will be satisfied by the process of finding neighborhood solutions for the initial solution using the neighborhood structure. 4.2.2. Neighborhood structure
To improve the solution of the DRP, we must make changes to the current solution. These changes are made by a neighborhood structure. In the simulated annealing algorithm can accept change even if they degrade the quality of the solution to escape the local optimum. Our neighborhood structure is based on the method found in the work ( Gendreau and Potvin, 2006 ). This method is described as follows: (Let r i and rj two routes that serve the requests i and j) Select two requests i and j; Eject  X  (remove) the request j from the route rj;
Insert the pickup point of the request j in the best position (minimum cost) of the route ri;
Insert the delivery point of request j d after the pickup of that in the best position (minimum cost) of the route ri; Eject  X  (remove) the request i from the route ri;
Insert the pickup point of the request i in the best position (minimum cost) of the route rj;
Insert the delivery point of request i after the pickup of that in the best position (minimum cost) of the route rj;
In our neighborhood structure, we have 7 steps and the complexity of this structure is the following: In step 1, there are
O( n ) ejection moves for a problem defined over n requests. Step 2 is performed in constant time, since the impact of removing each request from its own route is computed only once at the start of the neighborhood evaluation. This is done in O( n does not add to the overall complexity (O( n ) calculations are required for each request, as the removal or addition of a request must be propagated along the route to get the new service times at each location and the exact objective value). In steps 3 and 4, there are O( n 3 ) ejection moves for a problem defined over n requests. Indeed The insertion of the pick-up and delivery loca-tions are not done simultaneously but rather in a sequential fashion. That is, the best insertion place for the pickup is first identified. Then, the best insertion place for the delivery is chosen (after the insertion of the pickup location).

In Fig. 8 , we present an example of changing the solution by the neighborhood structure used in our approach. Each pickup point for a request  X  X  I  X  X  is modeled by the number  X  X  I  X  X  and the delivery point by the number  X  X  n  X  I  X  X . 4.2.3. Programming heuristic
The distribution heuristic and the neighborhood structure are used to program the routes of vehicles, but the program-ming of these route vehicles should still be made to determine r1: r2: r1: r2: the arrival times in places, the departure times, and so on.
Indeed, another heuristic, denominated programming heuristic is used. The programming heuristic is adapted of the one presented in Cordeau and Laporte (2003b) ,andperformsthe programming trying to reduce the violations in time windows, in routes duration and in ride times. Considering a route k  X  (v 0 y , v i , y .v q ) performed by the vehicle k ( 8 k v and v q both represent the depot.
 We denote by Ai the arrival time of a vehicle at vertex vi, by
B
Z max{ a i ; A i } the beginning of service at vertex v i departure time from vertex v i . We assume here that waiting at any vertex v i is allowed before service starts but is not allowed after service has finished. The waiting time of the request i is
W  X  B i  X  A i . The ride time associated with request i is computed as setting D 0  X  a 0 and B i  X  max{ a i , A i } for i  X  1, y of minimizing time window violations because the vehicle leaves the depot as early as possible and the service at each vertex also begins as early as possible. For any route V k , the delay Fi is computed as presented in Eqs. (26) and (27).

Fi  X  min  X  min
The delay programming heuristic for the delay F is the following: (1) Set D0:  X  B0; (2) Compute Ai, Wi, Bi and Di and for each vertex vi in the route; (3) Compute F0; (4) Set D 0 :  X  a 0  X  min P (5) Update Ai, Wi, Bi and Di for each vertex vi in the route; (6) Compute Li for each request assigned to the route; (7) For every vertex vj that corresponds to the origin of a request j (8) Compute changes in violations of vehicle load, route duration,
The steps (1) and (2) of this heuristic minimizes the time window constraints violations. In addition, this heuristic mini-mizes route duration without increasing time window constraints violations in steps (3)(6). The step (7) of this heuristic minimizes ride times by delaying the beginning of service at each origin node as much as possible without increasing route duration, time window or ride time constraints violations.
 For example, when we focusing on the example presented in
Sections 4.2.1 and 4.2.2 and we assign the following values of time windows to transport requests:
Transport demand number 1: pickup point [20 70], delivery point [0 1440].

Transport demand number 2: pickup point [60 90], delivery point [100 140].

Transport demand number 3: pickup point [105 170], delivery point [200 240].

Transport demand number 4: pickup point [50 80], delivery point [100 140].

We suppose that all distances between the points in this simple DRP are equal to 10. So, when we apply the programming heuristic we can calculate the departure time of the vehicles from the depot. To calculate these times of departure we use the solution presented in Fig. 8 . We present the departure time and the waiting time for every vertex of the problem in Fig. 13 .
We designate by D 0 the departure time and by W i the waiting time at the vertex i . 4.2.4. Constraints satisfaction
To satisfy the constraints of the problem, we must develop intelligent methods for this purpose. Indeed, there are two major constraints in the DRP: the capacity constraint and time windows. To satisfy the capacity constraint we have adopted a procedure to control the number of passengers in the vehicle. This method is described by the following principle:
Let q : the current number of passenger in the vehicle, Q : the capacity of the vehicle  X  Generate a solution to the DRP.  X  X f q 4 Q then replace the current point by a delivery point from the current route with a simple switch
To satisfy the time windows constraint, we use the program-ming heuristic detailed in the Section 4.2.3 and a classification method. The classification method we adopted in our work is to make switches of transportation requests between two vehicles. These switches aim to rank the demands of transport according to their time windows. So with this ranking, we give the possibility to the MOSA algorithm to satisfy the time windows constraint. 5. Computational result
In this work, we chose to test our approach to data presented in Cordeau and Laporte (2003a) (available in: o http://www.hec. ca/chairedistributique/data/darp/ 4 ). We can compare our results against previously published work. Indeed, in this benchmark, we find 20 instances of DRP. These instances are diversified by the number of transport requests and the number of vehicles. The size of these instances of problems is ranging from 24 to 144 requests. The number of vehicles used to serve the transport demands vary from 3 to 13 vehicles. This benchmark is composed of homo-geneous vehicles. These instances represent problems with unique depot they don X  X  adopt the concept of maximum waiting time. However, the model here proposed ( Section 3 ) adapts easily to them. The distance between any two locations i and j is set to be the Euclidean distance between the coordinates of locations i and j , i , j A N . The speed of the vehicles is set to 1, so the transportation time t i , j is equal to the Euclidean distance between i and j .
 Sensibility studies for the parameters of the MOSA algorithm
In this work we use the average cost criterion because we tested the above six criteria and found that average criterion show good performance. This good performance is justified by a sensibility study applied for all the criterions. This study is characterized by 5 tests for each criterion for all the instances of the benchmark of ( Cordeau and Laporte, 2003a ) . We note for each criterion the average of the objective in concern for the 5 tests. So with this study, we can justify the use of the average cost criterion by comparing its sensibility with the other criterion.
In Fig. 9 , we present the curves showing the comparison of the cost criterions in the case of the route duration objective
In Fig. 10 , we present the histogram of the average of route duration objective of all used criterions.

When we analyze the sensibility study, we note that the comparison of the cost criterions is characterized by a closely values. But it is clear in the comparison that the average cost criterion shows a good performance compared to other criterions.
For this reason, we chose to use the average cost criterions in our test of this research.
 In Table 1 , we give the values of the parameters of the Multi-Objective Simulated Annealing algorithm (MOSA).

The parameters of MOSA are chosen after several tests applied to the problems affecting each time new values to parameters.
Indeed the parameters of the MOSA algorithm, he shall be chosen on a compromise of quality of solution/ CPU time. Indeed a high value of initial temperature produce a good solution but in a long computing time. In our case, we have applied 30 tests to obtain the values of the MOSA Parameters. In Table 1 we present the values of parameters leading to good results in short computing time. We denotes by T0: the initial temperature, a : cooling rate,
TC: the final temperature and Iter-MAX represent the iteration number for each temperature. 5.1. Obtained results
The best obtained results ( Table 4 ) are still compared to the obtained by ( Claudio et al., 2009 ) and ( Cordeau and Laporte, 2003a ). In the work ( Claudio et al., 2009 ), the authors have applied the Genetic Algorithm (GA) to solve the DRP. In ( Cordeau and Laporte, 2003a ), the Tabu Search algorithm (TS) is applied to solve the concerned problem.

It is important to mention that in ( Claudio et al., 2009 ), solutions considers a restriction not covered by our approach. These are the time windows as soft constraints.
 Table 2 shows the results obtained by our work while
Tables 3 and 4 show the results obtained by the previously mentioned researches. Because the compared models do not have the same characteristics, the comparison was done on the basis of time units of two critical factors: On the one hand, the total route duration that is associated with the transport system resources optimization, and on the other hand, the total client travel time (ride time) that is associated with the offered quality of service. For validation of the proposed model and MOSA application to
DRP, 5 tests were performed for each instance. Table 1 presents a summary of the obtained results in these tests. In this table, the column Best Route Duration indicates the value of the duration of all the planed routes for the best solution found in the 5 tests (for each instance). The column Best Ride Time presents total client travel time, and the column CPU time presents the time to get a solution for the DRP. The column traveled distance indicates the value of economic objective function In all these tests and the column average of number of station visited indicates number of used vehicles was the same to the available, and all the trans-portation requests were assisted, and the most important, all the obtained solutions were valid (all the essential constraints were satisfied). In Fig. 11 , we present the comparison of our approach (MOAS) with the others methods mentioned in this section (Tabu Search: TS, Genetic Algorithm: GA) in term of traveled distance. 5.2. Results discussion
After presenting our results and results obtained in ( Claudio et al., 2009 ) and ( Cordeau and Laporte, 2003a ), we note that in the some instances, our approach is more efficient than the approach implemented in ( Claudio et al., 2009 ). The values outlined in our summary of results, foresee cases where our approach is better than ( Claudio et al., 2009 ). Indeed when we based on the number of individual results for the Route Duration , our approach MOSA shows better results than GA in (6/10) times and worse than TS in (8/10) times. For the Ride Time, our approach MOSA shows better results than TS in (10/10) and equal to GA.

In the benchmark ( Cordeau and Laporte, 2003a ), the data are not inspired from the real life, that is why the data are presented in unit. So we consider in this work that the Euclidian distance is in meter, the velocity of vehicles is 1meter/min, the time windows for pickup and delivery points and the ride and travel times are in minutes ( min ). So When we based on the total time for the Route Duration, our approach MOSA is worse than GA (201 min) and worse than TS (1763 mn). For the Ride Time, our approach MOSA is worse than GA (2492 min) and better than TS (18830 min).

As exposed in the Fig. 11 , our MOSA implementation presents better results than obtained in ( Claudio et al., 2009 ) for the route duration time. This is mainly due to the use of time-windows as hard constraints and the use of the domination concept for the multi-objective optimization. But our approach MOSA shows worse results than TS implementation ( Cordeau and Laporte, 2003a ) for the route duration time. This can be understood by the factor of using an aggregative method with a big weight assigned to the route duration objective to solve the multi-criteria DRP in the TS implementation and the cost of having good average ride times for clients, as there is a trade-off relation among both variables. From other point of view, it can be seen as a search with memory, as in Tabu search. However, in this case the memory is used for making the algorithm to  X  X  X emember X  X  which portions of sequences are feasible in order to reduce effort instead of remembering the solutions found so far to avoid local optima.

When focusing on the ride time presented in Fig. 12 , our solution showed equal times (5/10 times) regarding the Genetic Algorithm (GA) of Claudio et al. This can be understood as the use of time-windows as soft constraints in the GA implementation while obtaining better results when compared to the TS solution ( Cordeau and Laporte, 2003a ). This can be understood as the cost of having good average ride times for clients, as there is a trade-off relation among both variables ( Fig. 13 ).

It is worth highlighting that the tests were performed in a laptop Dell B14DEE640C with Intel Intel Core 2 Duo of 2.0 GHz processor and 2GB of RAM memory. The whole implementation was developed in JAVA language, while the Claudio et al. (2009) tests were done with a 2.66 GHz Intel Pentium 4 CPU.The Cordeau and Laporte tests were done with a 2.0 GHz Intel Celeron CPU. 6. Conclusion and Perspectives
This work presented a new approach to solve the dial-a-ride problem. The proposed model was able to represent the problem in a generalized mode, and it was easily adapted to other models already known.

In this paper, we proposed a mathematical model for the multi-objective DRP. This model is characterized by 3 major objectives. The first one is the route duration, the second is the ride time and the third is the number of stations visited a transportation demand. Indeed, to solve this multi-criteria pro-blem we have proposed a non-aggregative approach based on Multi-Objective Simulated Annealing algorithm to solve this last.
The clustering and routing were performed by the distribution heuristic and neighborhood structure. In fact, in this work we apply a programming heuristic to calculate the appropriate departure times of vehicles from the depot. In addition this heuristic is used to reduce the violation of time windows constraint. Indeed, we have chose this approach because the
MOSA algorithm uses the domination concept and the annealing scheme for efficient search. Additionally MOSA can find a small group of Pareto solutions in a short time. Then find more solutions by repeating the trials for detailed information about the Pareto frontier. Indeed the MOSA algorithm uses less memory and it can be implemented in embedded system for future works.
After applying our approach on a benchmark presented in ( Cordeau and Laporte, 2003 ), we have had good results in short computing times. The resulting method was compared to the results given by Claudio et al., 2009. The comparison focused on the route duration and the ride time. This comparison proves the effectiveness of our approach in the static case of the DRP. However, improvements can be made about our approach:
Resolution of the problem with heterogeneous vehicles to assign each customer to the appropriate vehicle,
The hybridization of the MOSA algorithm with others heuristic to ameliorate the performance of this last,
The application of the MOSA algorithm in the dynamic context of the DRP, The application of this approach to real problems.
 References r1: r2:
D =50 
W =0 
D =70 
W =0 
