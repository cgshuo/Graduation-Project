 In recent years, time series data are everywhere across different in-dustry, which creates a huge demand on time series data analysis, such as pattern search. Meanwhile, it is increasingly realized that only when pattern search results together with information from re-lational tables could be used in a programming-free way, can they perform analysis on time series conveniently. Hence, casual users highly demand that queries involving pattern search could be per-formed via SQLs. However, existing database products supporting time series data type lack the capability to perform pattern searches on time series data. This paper presents SearchonTS, an extend-able framework for in-database pattern search on time series data. It provides a series of interfaces so that time series index and pat-tern search can be added and performed in a uniformed and query optimized manner. SearchonTS is implemented as an extension on Informix, which is a database product in IBM software product series. It targets a future release of IBM Informix. We have im-plemented index-based pattern search for Euclid Distance(ED) via SearhonTS to demonstrate its usability for developers. And real s-cenario is also provided to show SQL involving pattern search so that users can have a more clear experience of the convenience. pattern search; times series;
The goal of time series pattern searching is to find the subse-quence in a set of time series similar to a given query pattern. In many applications, users commonly require that time series analy-sis capability should be provided in such a way that they can com-bine pattern search results and other results retrieved from databas-es in a programming-free manner. For example, in the scenario of power meter management, users may want to find the meters that are located in the "East" district whose time series contain pattern sequences similar to a given pattern of an anomaly event in the last 5 days.

Many database products, such as Oracle and Informix, have pro-vided custom data types to support fast and scalable time series storage, but none of them supports pattern search directly. More-over, some other application-oriented systems such as GridMW [7], a scalable time series data management for Smart Grid, and Tem-pDB [3], a time series data storage service based on HBase [8] have been built to address the same issue. However, these systems are hard to support SQL directly access to time series pattern query, which makes it difficult for users to fuse search results with tables in databases easily. Hence, it is more promising for database prod-ucts to address this issue.

The most dominating challenge prohibiting database products from supporting pattern search well mainly lies in that database products cannot register and manage pattern search techniques dy-namically and no query optimization is designed specially for pat-tern search in this case now, because performance of pattern search is highly related to similarity measure and its associated index tech-niques adopted. Much effort have been made on accelerating pat-tern search on various measures in the past two decades. Consid-ering pattern search on Euclid Distance (ED), there exists Discrete Fourier Transform (DFT) and its indexing technique ST-index [2], Piecewise Aggregate Approximation (PAA) [1] and other general-ized index techniques, like [6, 5], which are very promising. For DTW, [4] has proposed an efficient search approach. Currently, customers could only perform pattern search at their side, which significantly suffers from high network I/O for data transferring and the inconvenience when the query requires join with other relation-al tables in Database.

In this paper, we present SearchonTS as the first full-ledged pat-tern search framework with native SQL support on time series da-ta. It provides an uniform way to adopt state-of-the-art pattern searching techniques on time series data as a plugin to Informix. SearchonTS also supports SQL statements involving pattern search-es for casual users. We envision that SearchonTS will act as a re-search vehicle for various researchers to contribute associated pat-tern search techniques, thus providing a rich system to be widely used by developers, casual users. As a demonstration, in section A, we illustrate how to implement and perform pattern searching on Informix Database Server(version 11.7).
Fig. 1 depicts the architecture of SearchonTS. It has three lay-ers on Informix database server: the SQL parsing layer, the search access layer, and the query accelerating layer. The SQL parsing layer extends standard SQL to support pattern searching on time se-ries data, which also supports join pattern search results with other SQL clauses. The search access layer provides a group of inter-faces called "searchclass" to support index-based and scan-based pattern search. Here, two pattern search types: wholematch query and subsequence query is considered. Wholematch query could discover time series, which is naturally aligned on time (i.e., one-day or one-week partition common in smart-meter-related scenar-ios) and contains some partitions similar to the given pattern (i.e., one-day or one-week profile). Meanwhile, Subsequence query can locate subsequences similar to given pattern in a long time series. Query optimization on pattern search is also addressed in this layer. The query accelerating layer provides the management of index da-ta and access. It stores and update information between similarity measures, index types, and the storage of index data via a group of system tables.

There are two types of users who interact with SearchonTS: ca-sual users and developers. Casual users are non-technical users who write SQL statements to perform pattern search queries on time series data. Developers can implement pattern search ap-proaches for new similarity measures and then, register pattern search approaches into the database server.
 Informix
SearchonTS provides extended SQL to simplify the interaction with the system for non-technical users. This layer provides In-formix  X a  X  rs native time series data types, similarity measure specifi-cations, and a virtual table "VT_SearchResult" that presents search result as a view to support SQL queries involving pattern searches and join.

SearchonTS supports pattern searching by adding new SQL claus-es for index building and pattern searching. In terms of index build-ing, we override the CREATE INDEX clause for a time series col-umn and invoke user-defined routines (UDRs) to build the index. Fig. 3(a) is an example of building index on a time series whose attribute is "consumption".
 For pattern search processing, when this table appears in an SQL FROM clause, a pattern search query is detected and handled by the "searchclass" as determined by the "measure" parameter in the "patternlike" function (see Fig. 3(b)).
The search access layer is responsible for two tasks. The first mission is to optimize the query plan according to the input SQL statement. The second task is to execute pattern searching by in-voking appropriate UDRs.

For the first mission, SearchonTS leverages the existing API from Informix to retrieve the original query plan and rebuild it ac-cording our query optimization strategy shown as follows. Our cur-rent optimization strategy considers two issues: how to optimize pattern search query involving join and how to choose an appro-priate search method for the given time series data. For the first issue, we just push down the join conditions as a selection on re-lational tables so that unnecessary pattern search could be avoided. While in terms of the second one, the challenge mainly lies in that pattern search is both data sensitive(i.e., one search method may work for one data set, but is less efficient on others). To address this issue, we decide the search method according to the historical performance of each candidate method. During each pattern search on a time series table, the adopted search method and its search performance is recorded as Query Statistic Vector(QSV) and the performance metrics considered here includes Pruning Ratio(PR) and Tme Cost Per-Match(TCPM) which are stored in a system ta-ble and indexed by spatial index. When choosing search method on a given time series table, the aforementioned system table can tell us a search method with relatively high PR and low TCPM on the given table, which are expected to be more promising. If no QSV records are found for the time series table, we just randomly select an available search method and collect its performance record. For the second task, this layer provides a group of interfaces for de-velopers to describe the similarity measure and the pattern search methods that can manipulate index in query accelerating layer. The similarity measure quantifies the degree of similarity between the given pair of time series sequences. There are two pattern search interfaces: one performs index-based pattern searches which is op-tional and the other performs scan-based pattern searches, which is mandatory.

This layer provides developers a possible way to adopt additional support(i.e., index techniques) to accelerate the process of pattern search so that some state-of-art index techniques can be adopted in Informix in a uniformly and dynamically plugged-in manner. For simplicity, SearchonTS provides an API called "RegSearch-Class" (see table 1) for developers to declare the mapping between similarity measures, pattern search techniques (scan-based or index-based), and any related index techniques. An interface called "BuildIn-dex" for developers is also provided for index building. Moreover, SearchonTS also internally organizes the index data storage.
The relationship between similarity measures, index types, and information about index data is stored as two system tables. The table "IDX_TYPE" records the mapping relationship between the similarity measures and index types. The second table, "IDX_ACCESS" records the mapping relationship between the time series data and the related way to access the index data in the schema: ts_id , t-s_attribute , ts_table , time_range and idx_access , in which idx_access is used to describe the location information (such as path or file-name or the table name) of the related index data.

For developers, the query accelerating layer is extendable in such a way that developers can implement and register index building methods in Informix and hook them to the interface "BuildIndex" by declaring in idx_access to support various index building tech-niques.
 For casual users, the "searchclassname" specified in the CRE-ATE INDEX statement enables casual users to implicitly choose the index type that is associated with the specified "searchclass" on a specific time series.

In this section, we provide a real usage scenario to demonstrate the flexibility and efficiency of the proposed framework. In section A.1, due to the lack of space, we just describe how to plugin pattern search method based on ST-index [2] designed for Euclid Distance. In section A.2, we demonstrate the way in which casual users can build indexes and perform pattern searches via SQL statements on a real data set from smart meters. Moreover, we show how to join search results with relational tables and verify the query plan opti-mization strategy, as discussed in Section 4.

Developers can develop their own pattern search toolkits as a li-brary and register the UDRs they implemented in Informix for the interfaces shown in Table 1. When interfaces related to a "search-class" are registered, developers can give this "searchclass" a name and register it by running API "RegSearchClass" in Informix.
Fig. 3 demonstrates SQL scripts for building an index and per-forming pattern searches. In this scenario, the time series table "smart_meter" stores 10,000 one-year-long time series (96 points per day) for smart meters. Users launch two SQL querys: pattern search query, and queries involving both pattern searches and rela-tional table joins for subsequence queries and wholematch queries. Users are encouraged to modify the SQL statements shown in this demo. Fig. 3(a) showed that SQL script to build ST-index for all consumption time series in table "smart_meter".

Case 1: Fig. 3(b) shows two queries. The first query is a subse-quence query to find subsequences similar to a given outlier pattern on time series of a meter. The second query is a wholematch query to find all meters whose time series contain subsequences similar to an abnormal power usage pattern.
 Fig. 2 shows a simple graphical interface to visualize time series. When users load a query pattern and issue the subsequence query shown in Fig. 3(b), the subsequences similar to the given pattern are marked with rectangles, as shown in Fig. 2(a). The user can also zoom in the view to see the curve in detail, as shown in Fig. 2(b). When users issue the wholematch query to find the time series from all meters in "East" district that contain one-day consumption profile similar to the given one-day pattern shown in Fig. 2(c) in the last month. Here, they find matches in two time series.
Case 2: Casual users can also write SQL involving both pattern searches and joins with relational tables. As an example, Fig. 3(c) shows how to find all meters locating in the "East" district of the c-ity and also contain subsequences similar to the given query pattern. This query highlights the advantages of handling joins that involve pattern searches via SearchonTS. We found that the query perfor-mance of the the optimized query plan beats the original query plan as expected.
 [1] K. Chakrabarti, E. J. Keogh, S. Mehrotra, and M. J. Pazzani. [2] C. Faloutsos, M. Ranganathan, and Y. Manolopoulos. Fast [3] TEMPDB. https://tempo-db.com/. [4] A. M. Thanawin Rakthanmanon, Bilson Campana and [5] M. Vlachos, E. Keogh, and et al. Indexing multidimensional [6] Y. Wang, P. Wang, and et al. A data-adaptive and dynamic [7] J. Yin, A. Kulkarni, and et al. Scalable real time data [8] C. Zhang and H. D. Sterck. Cloudwf: A computational
