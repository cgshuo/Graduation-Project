 Business Process Management (BPM) has become an integral part of modern organizations and public administrations. In the course of constant improvement efforts, large process coll ections have been accumula ted in companies. Managing all these processes is a difficult task. Business Process Architectures (BPA) pro-vide guidelines for organizing business processes within a process collection and relate them along aspects of interest, e.g. goals, functions, or objects. A variety of approaches have been proposed in literature [1]. However, most of them try to assure consistent process architect ures only on a high level of abstraction, focusing on single processes only and ignoring their interdependencies. Taking a holistic view at the interdependencies of business processes is a major necessity to assure correct business process collaboration [2,3,4].

An example from the public sector 1 shows the importance of analyzing busi-ness process interdependencies for undesired behavior. The founding of a new enterprise consists of performing many public services, of which a selection is depicted as EPC models in Fig. 1. Each public service for itself seems to result in a desired outcome. It is not visible that they depend on message flows or the outcome of other business processes, highlighted by the dashed boxes in Fig. 1. From this perspective, we cannot say an ything about the correctness of their interaction, e.g. the successful founding of a new enterprise.

In [5], we proposed a new conceptual fr amework for the design of BPAs that describes business process interdependencies and provides a pattern based ap-proach to examine them. 30 BPA patterns were identified. The presented BPA framework and its patterns, however, la ck clear behavioral semantics. Hence, it is very complex and tedious to analyze BPAs and detect errors with proposed patterns. The patterns are limited to analyze direct pairwise interdependencies between two processes at a time. Undesired business process interdependencies that spawn over three or more pr ocesses cannot be detected.

To avoid ambiguities in interpretations, we transform BPAs to Trigger-Flow nets, a structural subclass of Petri nets that have clear semantics [6,7,8,9,10]. This transformation also allows for analyzing BPAs with known Petri net anal-ysis techniques for their structural and behavioral properties.

The remainder of this paper is struct ured as follows, Section 2 introduces our assumptions, the definitions of Busin ess Process Archit ectures and Trigger-Flow nets. Section 3 describes the transformation of BPAs and their process interdependencies into Trigger-Flow nets. In Section 4 we transform and analyze BPA patterns for their structural and behavioral properties, and categorize them. An evaluation of our approach with a real use case from the public administration is presented in Section 5. Section 6 embe ds our approach into current research followed by the conclusion in Section 7. The transformation of BPAs into Trigger-Flow nets builds on the definition of BPAs in [5] which will be extended by a temporal order of events in processes. Events depict a business process X  X  external interaction with other business pro-cesses, e.g. the event order received . Also other business process elements that are involved in business process interacti on like sending activities can be reflected in events, e.g. the event notification sent. Hence, business processes are reduced to a set of events that occur in a sequence. The definition of a Business Process Architecture is as follows: Definition 1 (Business Process Architecture). A Business Process Archi-tecture is a tuple ( E,V,L,I ) ,inwhich:  X  E is a set of events, partitioned into start events, E S , end events E E ,in- X  V is a partition of E and represents a set of business processes and each  X   X  v  X  V :  X  e s  X  E S  X  v,  X  e i E T  X  E C  X  v,  X  e e E E  X  v must hold e s e i e e .  X  L  X  E  X  E is the flow relation, partitioned into synchronous flows L S and  X  I  X  E  X  E is the trigger relation, partitioned into synchronous triggers I S Notice that we use v instead of V n to refer to single processes of a BPA. The set  X  e = { e  X  E E  X  E T | ( e ,e )  X  I  X  ( e ,e )  X  L } contains the events with an outgoing relation to e  X  E .Theset e  X  = { e  X  E S  X  E C | ( e, e )  X  I  X  ( e, e )  X  L } consists of the events with an incoming relation from e  X  E [5].

A BPA is a set of business processes and their relations with each other. It exposes the complex business process int erdependencies and interactions within large process collections which are refl ected in their trigger and flow relations. Processes, that are in a trigger or information flow relation with each other, can only be triggered or get a message by th eir relation partners. They do not get triggered or get an information flow from the external environment. We assume for the transformation from BPAs to Trigger-Flow nets that business processes only have one start, one end event, and any number of intermediate events in regard to structural composition. For behavioral aspects, we assume that a start event always occurs before all intermediate events of a process, and the end event after all intermediates events have occurred, respectively. Intermediate events of a process must occur, and occur only once. Events of one process cannot occur in parallel. In graphical BPA representati ons events occur in temporal order of the reading direction from left to right as in Fig. 2. This means that an intermediate event e i will happen before the intermediate event e i +1 of the same process if intermediate event e i is placed left from the other intermediate event e i +1 .
For the definition of Trigger-Flow nets, we consider the standard Petri net definition [6,10] and extend it by defining internal, incoming and outgoing places following Martens [3]. Trigger-Flow nets are a structural subclass of Petri nets and defined as follows.
 Definition 2 (Trigger-Flow net).

A Trigger-Flow net is a tuple N =( P,T,F,M,M 0 ) ,inwhich:  X  P = { p 1 ,p 2 , ..., p m } is a finite set of places  X  P is partitioned into pairwise disjoint sets of internal places P N ,incoming  X  T = { t 1 ,t 2 , ..., t n } is a finite set of transitions  X  F  X  ( P  X  T )  X  ( T  X  P ) is a finite set of arcs depicting a flow relation  X  P  X  T =  X  and P  X  T =  X   X  M : P  X  N denotes the marking of a Trigger-Flow net ( P,T,F ) mapping  X  M 0 is the initial marking of the Trigger-Flow net ( P,T,F,M,M 0 ) For X = P  X  T we denote the preset of a node x  X  X as  X  x = { x  X  X | ( x ,x )  X  F } and the postset of a node x  X  X as x  X  = { x  X  X | ( x, x )  X  F } . A transition t is enabled to fire if all its input places are marked with a token. Places can hold several tokens at a time. In the following, we consider above Trigger-Flow net (TF net) definition. Based on presented concepts, we introduce the transformation from BPA into TF nets in the following section. This section presents the formalization of BPAs by transforming them to TF nets. First, we present the transformation of BPA processes into single TF nets. Then, we define TF net composition rules to map the trigger and information flow concepts of BPAs onto TF nets. 3.1 Formalization of Single BPA Process Behavior A Business process is a causally (t emporally) ordered set of events v = &lt; e ,e 2 , ..., e n &gt; with start event e 1  X  E S , end event e n  X  E E , and with events e , ..., e n  X  1 being either throwing intermediate events  X  E T or catching interme-diate events  X  E C .
 Definition 3 (BPA Process Transformation Formalization). Let v = &lt; e Business Process Architecture and let N =( P,T,F,M,M 0 ) be a Trigger-Flow net. The transformation from a BPA process into a Trigger-Flow net is defined as follows:  X  T V = { t e i | e i  X  v }  X  P N = { p e i | e i  X  v  X  1  X  i&lt;n }  X  P O = { p o } X  X  p e  X  P I = { p i } X  X  p e  X  P = P N  X  P O  X  P I  X  M 0 =[ p i ] Fig. 2 shows an exemplary transformation of a BPA process p with events s, t, c, e into a TF net. Each event of that process is transformed into a specific TF net construct as depicted in Fig. 2. In a seco nd step the differen t TF net constructs are merged to one TF net.

A start event s of a process p is transformed into a TF net transition t e 1 with one incoming initial place and one internal place. The incoming place is the initial place p i of the latter resulting TF net and serves as input place of the transition t e 1 . The internal place p e 1 is the output place of transition t e 1 .The initial place p i is marked wit a token.

Each intermediate throwing event t is transformed into a transition t e i with two internal places p e i  X  1 and p e i , and one outgoing place p e is depicted by the transformation of event t into the transition t e 2 with internal place p e 1 as its input place, and the internal place p e 2 , and outgoing place p e as its output places. The outgoing place p e connected with a communication partner.

Similarly each intermediate catching event c is transformed into a transi-place p e p 3 serves as its output place. Places p e 2 and p e 3 show that the transition t e 3 waits for input from another process but also needs to be ready internally to fire.

An end event e is transformed into a transition t e n that is connected to an internal place p e n  X  1 and one outgoing place p o .Place p o also marks the end place of latter TF net. This is represented in F ig.2 by the TF net construct consisting of one input place p e 3 , transition t e 4 , and output place p o . The end place p o is at the same time an outgoing place that may provide input to other processes.
To connect the resulting TF net constructs their internal output and input places are merged. E.g., in Fig. 2 the output place p e 1 of transition t e 1 and the input place of transition t e 2 are merged as they are identical. The same procedure The result is a TF net that represents the behavior of the BPA process p .In contrast to the BPA process representation, the TF-net has a clear behavioral Transition t e 3 can only fire if it also gets input from another process. If transition t 3 gets an input it can fire, else the TF net is in a deadlock. After t e 3 has fired, transition t e 4 is enabled and can fire ending the process. In regard to structural composition, it is immediately apparent that the places p e a structurally not sound TF net. The incoming and outgoing places hint at interdependencies with other processes. 3.2 Formalization of BPA Trigger and Flow Relationships This section describes the composition rules for the transformed TF nets. They map the trigger and flow relations between business processes in a BPA to TF nets. In the following, we will refer to T F nets resulting from the transforma-tion of the BPA processes p, q ,and r as TF nets A, B and C , respectively. The composed TF net will be referred to as TF Net N . After transforming the BPA processes into TF nets, the resul ting TF nets are connected through t  X  transitions according to the trigger or flow relations defined in the BPA. The flow and trigger relations are defined as pairs of source and destination events ( e transitions have always an outgoing place of the TF net of the source event as their input place, and an incoming place of the destination event X  X  TF net as their output place. Fig. 3 depicts the composition rules in graphical representation.
Composition rule 1 maps the trigger relation ( e 1 ,s 2 )  X  I from an end event of process p to a start event of another process q .TFnet A is connected via its end place and the t  X  transition to the start place of TF net B .Themarkingis removed from the initial place of TF net B . The token will be passed on by TF net A when it triggers TF net B . We notice this kind of relation from end to start event results in a structurally and behaviorally sound TF net N .
Composition rule 2 describes trigger relation ( t 1 ,s 2 )  X  I . Process p triggers process r through its intermediate event t 1 . To represent this trigger relation the intermediate outgoing place of TF net A is connected through a t  X  transition to the start place of TF net B . The marking is removed from the initial place of TF net B .TFnet N has one marked initial place and two end places.

Composition rules 3 and 4 describe the information flow relation by send-ing and catching a message flow through intermediate events in rule three as well as by passing an information flow through an end event to an intermediate event in rule four, respectively. In rule three the flow relationship ( t 1 ,c 2 )  X  L is presented by the connection of the outgoing place of transition pt e 2 of TF net A via the t  X  transition with the incoming place of transition qt e 2 of TF net B . The composed TF net N has two initial and end places. Composition rule four is similar, except from the source of th e composition being the end place of TF net A .The t  X  transition connects the end place of TF net A with a t  X  transition to the incoming place of transition qt e 2 of TF net B . The composed TF net N has two initial places and only one end place. Note, that transitions pt e 1 and qt e 1 in rule 3, 4, and 6 are not synchronized and can fire independently.
Composition rule 5 defines the triggering or messaging of several processes by one process, i.e. a source event takes pa rt in several trigger or flow relations. Depicted in Fig. 3, process p triggers process q as well as process r .Theend In this case first TF net A will be connected to TF net B as described in rule one. To represent the second trigger rel ation only the initial place of TF net C has to be connected as second output place to the the transition t  X  . Both initial markings from Petri B and C are removed. When transition t  X  fires, it passes on tokens to two concurrent branches, former TF nets B and C .

Composition rule 6 describes the receiving of several triggers or flows, i.e. an event takes part as destination event in several trigger or flow relations. In Fig. 3, one is executed two times. A transition t  X  1 and t  X  2 is introduced for each relation. However, both share the same output place, the initial place of TF net C .The token is removed from the initial place of TF net C .TFnet C can be triggered by TF net A or B or by both, one after the other. Rules two to six result in structurally not sound TF nets.

Following Martens [3], we compose two TF nets A and B to a new TF net N by introducing a new transition and connecting the outgoing and incoming places according to the flow or trigger relations defined in the BPA. In the following, we define the composition rules in a formal way.
 Definition 4 (TF net Composition Rules). Let A =( P a ,T a ,F a ,M a 0 ) and B =( P b ,T b ,F b ,M b 0 ) be two TF nets. Let T  X  be a set of connector transitions and T  X  ,T a , T b pairwise disjoint. Let F  X  the flows connecting the two TF nets A and B and F  X  ,F a and F b pairwise disjoint. The composed TF net N = A  X  B is represented by N =( P N ,T N ,F N ,M N 0 ) such that:  X  T = T a  X  T b  X  T  X   X  T  X  = { t e s | ( e s ,e d )  X  I  X  L  X  ( e s ,e d )  X  ( v a  X  v b )  X  ( v b  X  v a ) }  X  P = P a  X  P b  X  F = F a  X  F b  X  F  X  In general, after having transformed all BPA processes, all trigger and flow re-lations ( e s ,e d )  X  I  X  L of a Business Process Architecture are mapped to the transformed TF nets. For each event that participates as source in a trigger or flowrelationinaBPAexactlyone t  X  transition and exactly one arc is inserted. This arc connects the outgoing place from the source event transition of the ac-cording relation as input place to the t  X  transition. For each destination element in a relation an arc from the corresponding t  X  transition to the incoming place of the destination event transition is drawn. All remaining initial places p i of composed TF net that were not connected to a t  X  transition are marked with a token. The outgoing places can either be the end place or the outgoing places of an intermediate event transition o f a TF net. A TF net X  X  incoming places are either its initial place or an incoming place of an intermediate transition. Inserting T  X  transitions to describe the trigger and flow relationships allows us to model concurrent behavior when a process triggers several other processes as in rule 5 or the merging of two concurrent processes in a join structure as depicted in rule 6 in Fig. 3. In [5], 30 BPA patterns and anti-patterns are proposed to identify desired and undesired structural and behavioral properties. These include different trigger and flow patterns, e.g. send and receive, br oadcast, and multi-instance patterns as well as dead event, loops or deadlock patterns as examples for anti-patterns. Ten of those patterns are depicted in Fig. 3 and Fig. 4. The patterns proposed in [5] provide a first means to detect errors between two processes in a Busi-ness Process Architecture. However, fo r large BPAs their application becomes complex. In order to find out more about their properties we examine the BPA patterns by applying our BPA to TF net transformation and categorize them in a later step.

In total we examined 23 patterns, of which 10 are considered regular patterns and 13 anti-patterns respectively. From the 30 original patterns, we excluded seven multi-instance and hierarchical patterns. Their transformation and analy-sis will be part of future work. For structural properties we looked at the number of input and output places as well as structural soundness. We considered dif-ferent soundness criteria, boundedness and liveness as well as the number of deadlocks and dead events for the analysis of behavioral properties. A represen-tative set of BPA patterns, depicted in Fig. 4, will serve as example to illustrate our approach. These patterns were select ed as they cover most of the structural aspects and show the varied behavioral properties observed in BPA patterns.
Our course of action consisted of three steps, firstly the transformation of BPA patterns to TF nets, secondly the analysis of the TF nets for their structural and behavioral properties with LoLA 2 , and thirdly the categorization of transformed BPA patterns. The transformation of BPA trigger and flow relations results into TF nets with different number of start and end places. If they were structurally not sound, we converted them to Workflow nets to achieve structural sound-ness [3]. In case a TF net had several initial places as in pattern 8 in Fig. 4 we inserted a new transition with one input place that uses the initial places of the TF net as its postset. Several end p laces (see pattern 8, 27 Fig. 4) of a TF net serve as pre-set of a newly inserted transition with only one output place. When the TF net lacked initial or end places, e.g. pattern 19, 24, 25 in Fig. 4, we inserted a transition with one input or output place respectively, and connected the transition to the according initial place or end place of one of the TF nets in the pre-composition state. The resulting Workflow nets were then examined with LoLA for their behavioral properties.

The examination of the BPA patterns shows interesting results. After the first step of our analysis, the transformation of BPA patterns into TF nets, most of the BPA patterns are not structural sound. Either they have several or no start, and several or no end places, or a combinat ion of both. The results of the overall examination can be grouped into five categories.

The Sound TF Nets (SN) category includes structurally, behaviorally sound, and bounded TF nets. These are the TF nets that depict the regular patterns 1, 6, 7, 18, 23, and 28. In [5] patterns 23 and 28 are considered anti-patterns in environments of synchronous communication which does not apply for the asynchronous TF net environment. 2nd Iter. Sound TF Nets (2SN) After converting the TF nets depicting regular BPA patterns 2, 3, 4, 5, 8, 13 and anti-patterns 15, 25, 27 to Workflow nets, they become structurally, and behaviorally sound, and bounded TF nets.
Dead Nets (DN) Dead nets are TF nets that can never fire for lacking an initial place, e.g. pattern 19 in Fig. 4. The anti-patterns 15, 16, 19, 20, 25, and 26 are grouped into this category.

Producer Nets (ProN) Workflow nets in this category are unbounded and expose a livelock. They produce unlimit ed amounts of token. After being con-verted to Workflow nets, the TF nets depicting pattern 16, 19, 20, and 26 are moved from the dead nets category into this one.
 Deadlocks (DL) This category includes TF nets that expose deadlocks. These are TF nets representing anti-patterns 17, 21, 22, and 24. Most of them have several dead transitions ranging from two to six. The TF net representing pattern 22, however, is structurally sound but does not become a regular pattern in contrast to the findings in [5]. The TF nets stay in this category, also after conversion to structural sound Work flow nets, as the deadlocks remain. The results obtained from the analysis of BPA anti-patterns are shown in Table 1. As all regular patterns have the same properties and were grouped in the Sound Petri or 2nd Iteration Sound TF net category, they are not listed in the table. The verification showed that most of the BPA patterns and anti-patterns are structurally not sound. The regular BPA patterns represent desired behavior. Interestingly, some of the anti-patterns become behaviorally sound after converting them to Workflow nets, e.g. pattern 15 and 25. Anti-patterns 18, 23, and 28 expose soundness from the beginning and are regular patterns in asynchronous communication enviro nments. Revived dead nets resulted in producer nets that are stuck in a livelock, e.g. pattern 16, 19, or 20. Determining a sensible attachment position for an initial/end place for dead/live TF nets requires further research and will be looked at in detail in future work. Pattern based approaches provide means for classifying process interactions and interdependencies according to their structural composition or behavioral inter-action properties. The BPA patterns proposed in [5], of which ten were exem-plary illustrated in Fig. 3 and Fig. 4, can be used to identify desired process composition or find irregularities betw een process pairs in a BPA. The approach is limited to direct interdependencies between two business processes only. Be-havioral properties like boundedness, livelocks, deadlocks or dead nets cannot be observed over several business processes, i.e. indirect interdependencies can-not be examined. In previous section we could already observe the strength of our approach by clearly stating the structural and behavioral properties of BPA patterns. The following use case from the public administration, the enterprise founding process, will show that the transformation of a BPA into one composed TF nets and its analysis with LoLA leads to finding indirect interdependencies and errors that cannot be detected with the p attern based verification technique presented in [5].

The EU-Service directive, passed in 2006, led to a restructuring of service provisioning in the public administrations across Europe. Suddenly, public ad-ministrations had to provide citizens and companies with a single point of contact for public services that were previously offered by many different administrative offices. For managing the huge amount of public services they were grouped according to life situations. With the centralization of service provisioning, it becomes apparent that also the interdependencies between public services need to be analyzed. The life situation, enterprise founding, consists of eleven public service processes. Examining them one by one does not provide much insight as it is unclear if their interaction leads to a desired output. E.g. Fig. 1 shows three EPCs depicting three public service processes from the overall enterprise founding process. On first sight, it appears that they are sound and independent from each other. On second sight, we notice interdependencies when looking at the events that match, e.g. the events in the dashed boxes in Fig. 1. The interdependencies between these processes can easily be reflected in a BPA as shown in Fig. 5. Looking closer at the example, it is obvious that some processes depend directly on each other, e.g. process p 1 and p 2 ,or p 3 and p 9 . Applying the BPA patterns to a larger example with many interdependencies becomes rather complex. We can find many regula r patterns between two processes, e.g. the interaction between processes p 6 and p 7 , processes p 4 and p 9 , processes p 9 and p 11 , or processes p 11 and p 4 . The BPA appears to be faultless. The indirect interdependencies between processes p 4 , p 9 and p 11 stay hidden.
 The transformation of the BPA into TF nets enables a thorough analysis of the BPA. Fig. 6 depicts the transformation of the BPA into one TF net that was then analyzed with the LoLA tool. The analysis showed that the TF net is structurally not sound as it has two initial places from process p 1 and p 10 . The process p 10 , check free of debt, is not triggered by any other process but is required as input for process p 9 issue estate agent permit. This could hint at a problem as process p 10 cannot know when to check for free debt and for whom. A trigger relation is missing. The first analysis iteration showed that the overall architecture has structural inconsistencies. The process depends on two independent inputs. After converting the TF net into a Workflow net, the analysis of behavioral properties found a deadlock and 12 dead transitions. The TF net is neither sound nor weak sound, however it is bounded. Process p 4 inhibits process p 9 as it waits for input from process p 11 . However, p 11 never starts as it is triggered by p 9 which cannot terminate due to p 4 . By transforming the BPA into a TF net we clearly specify the behavior of the BPA. As demonstrated in our use case of the public administration we can detect behavioral errors that are hidden from the pattern matching approach presented in [5]. In regard to structural composition our approach may indicate problems. Applying Petri nets to workflow management systems has many advantages [11]. One of the advantages beside their clear semantics, is the existence of abundant Petri net verification techniques. [7,12,8,9] formalize EPCs, BPMN, and work-flow models with Petri nets and provide them with clear behavioral semantics that can be analyzed. [7,8,9,13] show the effectiveness of formalizing business process models in Petri nets. E.g., Di jkmanetal.[8]provideaBPMNtoPetri net transformation to clarify ambiguities in the BPMN specification finding a number of deficiencies there. Our BPA to Trigger-Flow net transformation can be grouped to those approaches. It goes even further by also mapping the process interdependencies found in BPAs.

Lohmann et al. [9] investigate the transformation of process modeling lan-guages into Petri nets. Transformations are mainly used to verify the structural and behavioral semantics of the source languages [9]. Mendling [13] found out that most analysis of process collections use verification techniques based on de-composition, or combinations of techniques based on reduction and reachability. The studies examined by Lohmann et al. [9] and Mendling [13] look only at each process model in a collection individually and ignore their interdependen-cies. Our BPA approach combines the advantages of Petri net transformation with the holistic view of BPA on process model collections and their interde-pendencies. Many of the BPA approaches take rather a high level point of view and do not provide formal verification techniques to examine the interdependen-cies and inherent interactions of busines s processes within large business process collections. An extensive overview of BPA approaches is given by Dijkman et al. [1].

Literature on service composition, workflow modules, process orchestrations, process choreographies, and also open nets deal with business process inter-action and provide approaches to verify behavioral or structural properties of business process interaction. Decker and Weske [14] highlight the need for the examination of behavioral consistency and compatibility of interacting processes in process choreographies. They introduce a framework for analyzing several service consistency specifications and service compatibility definitions for in-teracting services. Many approaches res ort to Petri net based verification ap-proaches [15,16,3,17,18]. Puhlmann and Weske [19] take a different approach and examine process orchestrations and choreographies with dynamic bindings using the  X  -calculus.

The foundational concepts of service interaction, basic interaction patterns and anti-patterns are introduced by va n der Aalst et al. [18]. They use open nets to compose two interacting services and analyze their interactions for con-trollability. Martens [3] investigates the composition of web services and their interaction in regard to their compatibility and usability. Baldan et al. [15] de-fine open nets to model inter-organizational process behavior and describe the composition of two interacting open nets along their common subnets. Their prime aim is to model the composition of interacting process rather than veri-fying their correct flow interaction. Weinberg [17] presents a methodology that analyzes open net transformation of WS-BPEL processes for controllability and calculates their operating guide lines using interaction graphs.

Glabeek and Storck [16] analyze workflow module interaction in regard to proper termination. They check local properties of participating Workflow nets to assure global termination of interacting workflow modules. Our approach in contrast assumes that business proce sses are locally sound and takes a global perspective. Due to the reduction of business processes to their events, and their trigger and flow relations the state space of a resulting BPA is considerably decreased and can be automatically analyzed, e.g. with LoLA.

In regard to Petri net composition, our approach resembles to [15,3] using incoming and outgoing places, but extends it with the composition of TF nets to represent trigger relations. Following [3,18], we define the transformation of BPAs to TF nets in order to represent their behavior and analyze their interde-pendencies, i.e. the correct behavior of BPAs. Our transformations does not only allow for analyzing message interaction of processes like the other approaches but also for examining their trigger relations that are prevalent in BPAs. In recent years managing and organizing l arge business process collections has become a major challenge and an integral part of BPM research. Especially, Business Process Architectures for organizing processes and describing their re-lations get stronger attention. Following these developments, this paper intro-duced a novel Petri net based formalizatio n of Business Process Architectures, Trigger-Flow nets, that enable the analysis of Business Process Architectures with known Petri net analyzing techniques in regard to their structural and behavioral properties. Examining BPA patterns in this way, we identified five pattern categories. The effectiveness of our approach was demonstrated on a real use case from the public administration, the enterprise founding process. We found several dead events and a deadlock that could not be identified by a pattern based verification technique. Future work will deal with analyzing multi-instance pattern as well as developing a tool for automatic design of BPAs from large process collections and their verification.

