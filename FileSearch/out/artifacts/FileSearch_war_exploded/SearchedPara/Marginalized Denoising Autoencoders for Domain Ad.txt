 Minmin Chen MC 15@ CSE . WUSTL . EDU Zhixiang (Eddie) Xu XUZX @ CSE . WUSTL . EDU Kilian Q. Weinberger KILIAN @ WUSTL . EDU Washington University, St. Louis, MO 63130, USA U. of Southern California, Los Angeles, CA 90089, USA Domain adaptation (Ben-David et al., 2009; Huang et al., 2007; Weinberger et al., 2009; Xue et al., 2008) aims to generalize a classifier that is trained on a source domain, for which typically plenty of training data is available, to a tar-get domain, for which data is scarce. Cross-domain gener-alization is important in many application areas of machine learning, where such an imbalance of training data may oc-cur. Examples are computational biology (Liu et al., 2008), natural language processing (Daume III, 2007; McClosky et al., 2006) and computer vision (Saenko et al., 2010). Data in the source and the target are often distributed differ-ently. This presents a major obstacle in adapting predictive models. Recent work has investigated several techniques for alleviating the difference: instance reweighting (Huang et al., 2007; Mansour et al., 2009), sub-sampling from both domains (Chen et al., 2011b) and learning joint target and source feature representations (Blitzer et al., 2006; Glorot et al., 2011; Xue et al., 2008).
 Recently, Glorot et al. (2011) proposed a new approach that falls into the third category. The authors propose to learn robust feature representations with stacked denoising au-toencoders (SDA) (Vincent et al., 2008). Denoising autoen-coders are one-layer neural networks that are optimized to reconstruct input data from partial and random corruption. These denoisers can be stacked into deep learning archi-tectures. The outputs of their intermediate layers are then used as input features for SVMs (Lee et al., 2009). Glorot et al. (2011) demonstrate that using SDA-learned features in conjunction with linear SVM classifiers yields record performance on the benchmark tasks of sentiment analysis across different product domains (Blitzer et al., 2006). Despite their remarkable and promising results, SDAs are limited by their high computational cost. They are signif-icantly slower to train than competing algorithms (Blitzer et al., 2006; Chen et al., 2011a; Xue et al., 2008), primarily because of their reliance on iterative and numerical opti-mization to learn model parameters. The challenge is fur-ther compounded by the dimensionality of the input data and the need for computationally intensive model selection procedures to tune hyperparameters. Consequently, even a highly optimized implementation (Bergstra et al., 2010) may require hours (even days) of training time.
 In this paper, we address this challenge with a variant of SDA. The proposed method, which we refer to as marginal-ized Stacked Denoising Autoencoder (mSDA), adopts the greedy layer-by-layer training of SDAs. However, a cru-cial difference is that we use linear denoisers as the basic building blocks. The key observation is that, in this set-ting, the random feature corruption can be marginalized out. Conceptually, this is equivalent to training the mod-els with an infinitely large number of corrupted input data. Fitting models on such a scale would be impossible for the conventional SDAs, which often rely on stochastic gradient descent, and need to sweep through all the training data. Our contributions are summarized as follows: i) we con-tribute to deep learning by demonstrating that linear de-noisers can be used as building blocks for learning feature representations. ii) we show that linearity can significantly simplify parameter estimation  X  our approach results in closed-form solutions for the optimal parameters. iii) we evaluate our approach rigorously on established domain adaptation benchmark data sets and compare with several competing state-of-the-art algorithms. We show that the classification performance of mSDA matches that of SDA across our benchmark data sets, while achieving tremen-dous speedups during training time (reducing training from up to 2 days for SDA to a few minutes with mSDA). We follow the setup of Glorot et al. (2011) and focus on the problem of domain adaptation throughout this pa-per. We assume that our data originates from two do-mains, source S and target T . From the source domain S , we sample data D S = { x 1 ,..., x n known labels L S = { y 1 ,...,y n s } , whereas from the tar-get domain we are only able to sample data without labels D
T = { x n s +1 ,... x n } X  X  d . We do not assume that both domains use identical features and we pad all input vectors with zeros to make both domains be of equal dimensional-ity d . Our goal is to learn a classifier h  X  X  with the help of the labeled set D S and the unlabeled set D T , to accurately predict the labels of data from the target domain T . In prac-tice (and as we show in section 5) it is straightforward to also extend this framework to multiple target domains. Stacked Denoising Autoencoder. Various forms of au-toencoders have been developed in the deep learning lit-erature (Rumelhart et al., 1986; Baldi &amp; Hornik, 1989; Kavukcuoglu et al., 2009; Lee et al., 2009; Vincent et al., 2008; Rifai et al., 2011). In its simplest form, an autoen-coder has two components, an encoder h (  X  ) maps an input x  X  R d to some hidden representation h ( x )  X  R d h , and a decoder g (  X  ) maps this hidden representation back to a reconstructed version of x , such that g ( h ( x ))  X  x . The pa-rameters of the autoencoders are learned to minimize the reconstruction error, measured by some loss ` ( x ,g ( h ( x ))) . Choices for the loss include squared error or Kullback-Leibler divergence when the feature values are in [0 , 1] . Denoising Autoencoders (DAs) incorporate a slight modi-fication to this setup and corrupt the inputs before mapping them into the hidden representation. They are trained to reconstruct (or denoise ) the original input x from its cor-rupted version  X  x by minimizing ` ( x ,g ( h (  X  x ))) . Typical choices of corruption include additive isotropic Gaussian noise or binary masking noise. In this work, as in Vin-cent et al. (2008), we use the latter and set a fraction of the features of each input to zero . This is a natural choice for bag-of-word representations of texts, where typical class-specific words can be missing due to the writing style of the author or differences between train and test domains. The stacked denoising autoencoder (SDA) of Vincent et al. (2008) stacks several DAs together to create higher-level representations, by feeding the hidden representation of the t th DA as input into the ( t + 1) th DA. The training is per-formed greedily, layer by layer.
 Feature Generation. Many researchers have seen autoen-coders as a powerful tool for automatic discovery and ex-traction of nonlinear features. For example, Lee et al. (2009) demonstrate that the hidden representations com-puted by either all or partial layers of a convolutional neural network (CNN) make excellent features for classification with SVMs. The pre-processing with a CNN improves the generalization by increasing robustness against noise and label-invariant transformations.
 Glorot et al. (2011) successfully apply SDAs to extract fea-tures for domain adaptation in document sentiment anal-ysis. The authors train an SDA to reconstruct the input vectors (ignoring the labels) on the union of the source and target data. A classifier ( e.g. a linear SVM) trained on the resulting feature representation h ( x ) transfers significantly better from source to target than one trained on x directly. Similar to CNNs, SDAs also combine correlated input di-mensions, as they reconstruct removed feature values from uncorrupted features. It is shown that SDAs are able to disentangle hidden factors which explain the variations in the input data, and automatically group features in accor-dance with their relatedness to these factors (Glorot et al., 2011). This helps transfer across domains as these generic concepts are invariant to domain-specific vocabularies. As an intuitive example, imagine that we classify product reviews according to their sentiments. The source data con-sists of book reviews, the target of kitchen appliances . A classifier trained on the original source never encounters the bigram  X  X nergy efficient X  during training and therefore assigns zero weight to it. In the learned SDA represen-tation, the bigram  X  X nergy efficient X  would tend to recon-struct, and be reconstructed by, co-occurring features, typ-ically of similar sentiment ( e.g.  X  X ood X  or  X  X ove X ). Hence, the source-trained classifier can assign weights even to fea-tures that never occur in its original domain representation, which are  X  X e-constructed X  by the SDA.
 Although SDAs generate excellent features for domain adaptation, they have several drawbacks: 1. Training with (stochastic) gradient descent is slow and hard to paral-lelize (although a dense-matrix GPU implementation ex-ists (Bergstra et al., 2010) and an implementation based on reconstruction sampling exists (Dauphin Y., 2011) for sparse inputs); 2. There are several hyper-parameters (learning rate, number of epochs, noise ratio, mini-batch size and network structure), which need to be set by cross validation  X  this is particularly expensive as each individ-ual run can take several hours; 3. The optimization is in-herently non-convex and dependent on its initialization. In this section we introduce a modified version of SDA, which preserves its strong feature learning capabilities, and alleviates the concerns mentioned above through speedups of several orders of magnitudes, fewer meta-parameters, faster model-selection and layer-wise convexity. 3.1. Single-layer Denoiser The basic building block of our framework is a one-layer denoising autoencoder. We take the inputs x 1 ,..., x n from D = D S  X  D T and corrupt them by random feature removal  X  each feature is set to 0 with probability p  X  0 . Let us denote the corrupted version of x i as  X  x i . As opposed to the two-level encoder and decoder in SDA, we reconstruct the corrupted inputs with a single mapping W : R d  X  X  d , that minimizes the squared reconstruction loss To simplify notation, we assume that a constant feature is added to the input, x i = [ x i ; 1] , and an appropriate bias is incorporated within the mapping W = [ W , b ] . The constant feature is never corrupted.
 The solution to (1) depends on which features of each input are randomly corrupted. To lower the variance, we perform multiple passes over the training set, each time with dif-ferent corruption. We solve for the W that minimizes the overall squared loss where  X  x i,j represents the j th corrupted version of the orig-inal input x i .
 Algorithm 1 mDA in MATLAB TM . Let us define the design matrix X = [ x 1 ,..., x n ]  X  X  d and its m -times repeated version as X = [ X ,..., X ] . Fur-ther, we denote the corrupted version of X as  X  X . With this notation, the loss in eq. (1) reduces to
L sq ( W )= The solution to (3) can be expressed as the well-known closed-form solution for ordinary least squares (Bishop, 2006): (In practice this can be computed as a system of linear equations, without the costly matrix inversion.) 3.2. Marginalized Denoising Autoencoder The larger m is, the more corruptions we average over. Ide-ally we would like m  X   X  , effectively using infinitely many copies of noisy data to compute the denoising trans-formation W .
 By the weak law of large numbers, the matrices P and Q , as defined in (3), converge to their expected values as m becomes very large. If we are interested in the limit case, where m  X  X  X  , we can derive the expectations of Q and P , and express the corresponding mapping W as In the remainder of this section, we compute the expecta-tions of these two matrices. For now, let us focus on An off-diagonal entry in the matrix  X  x i  X  x &gt; i is uncorrupted if the two features  X  and  X  both  X  X urvived X  the corruption, which happens with probability (1  X  p ) 2 . For the diago-nal entries, this holds with probability 1  X  p . Let us de-fine a vector q = [1  X  p,..., 1  X  p, 1] &gt;  X  X  d +1 , where q  X  represents the probability of a feature  X   X  X urviving X  the corruption. As the constant feature is never corrupted, we have q d +1 =1 . If we further define the scatter matrix of the original uncorrupted input as S = XX &gt; , we can express the expectation of the matrix Q as Similarly, we obtain the expectation of P in closed-form as E [ P ]  X  X  = S  X  X  q  X  .
 With the help of these expected matrices, we can com-pute the reconstructive mapping W directly in closed-form without ever explicitly constructing a single corrupted in-put  X  x i . We refer to this algorithm as marginalized De-noising Autoencoder (mDA). Algorithm 1 shows a 10-line MATLAB TM implementation. The mDA has several ad-vantages over traditional denoisers: 1. It requires only a single sweep through the data to compute the matrices E [ Q ] ,E [ P ] ; 2. Training is convex and a globally optimal solution is guaranteed; 3. The optimization is performed in non-iterative closed-form. 3.3. Nonlinear feature generation and stacking Arguably two of the key contributors to the success of the SDA are its nonlinearity and the stacking of multiple lay-ers of denoising autoencoders to create a  X  X eep X  learning architecture. Our framework has the same capabilities. In SDAs, the nonlinearity is injected through the nonlin-ear encoder function h (  X  ) , which is learned together with the reconstruction weights W . Such an approach makes the training procedure highly non-convex and requires it-erative procedures to learn the model parameters. To pre-serve the closed-form solution from the linear mapping in section 3.2 we insert nonlinearity into our learned repre-sentation after the weights W are computed. A nonlinear squashing-function is applied on the output of each mDA. Several choices are possible, including sigmoid, hyperbolic tangent, tanh() , or the rectifier function (Nair &amp; Hinton, 2010). Throughout this work, we use the tanh() function. Inspired by the layer-wise stacking of SDA, we stack sev-eral mDA layers by feeding the output of the ( t  X  1) th mDA (after the squashing function) as the input into the t th Let us denote the output of the t th mDA as h t and the orig-inal input as h 0 = x . The training is performed greedily layer by layer: each map W t is learned (in closed-form) to reconstruct the previous mDA output h t  X  1 from all pos-sible corruptions and the output of the t th layer becomes h t = tanh( W t h t  X  1 ) . In our experiments, we found that even without the nonlinear squashing function, stacking still improves the performance. However, the nonlinearity improves over the linear stacking significantly. We refer to the stacked denoising algorithm as marginalized Stacked Denoising Autoencoder (mSDA). Algorithm 2 shows a 8-lines MATLAB TM implementation of mSDA.
 Algorithm 2 mSDA in MATLAB TM . 3.4. mSDA for Domain Adaptation We apply mSDA to domain adaptation by first learning fea-tures in an unsupervised fashion on the union of the source and target data sets. One observation reported in (Glo-rot et al., 2011) is that if multiple domains are available, sharing the unsupervised pre-training of SDA across all do-mains is beneficial compared to pre-training on the source and target only. We observe a similar trend with our ap-proach. The results reported in section 5 are based on fea-tures learned on data from all available domains. Once a mSDA is trained, the output of all layers, after squashing, tanh( W t h t  X  1 ) , combined with the original features h 0 , are concatenated and form the new representation. All in-puts are transformed into the new feature space. A linear Support Vector Machine (SVM) (Chang &amp; Lin, 2011) is then trained on the transformed source inputs and tested on the target domain. There are two meta-parameters in mSDA: the corruption probability p and the number of lay-ers l . In our experiments, both are set with 5-fold cross validation on the labeled data from the source domain. As the mSDA training is almost instantaneous, this grid search is almost entirely dominated by the SVM training time. Many data sets ( e.g. bag-of-words text documents) are nat-urally high dimensional. As the dimensionality increases, hill-climbing approaches used in SDAs can become pro-hibitively expensive. In practice, a work-around is to trun-cate the input data to the r d most common features (Glo-rot et al., 2011). Unfortunately, this prevents SDAs from utilizing important information found in rarer features. (As we show in section 5, including these rarer features leads to significantly better results.) High dimensionality also poses a challenge to mSDA, as the system of linear equa-tions in (5) of complexity O ( d 3 ) becomes too costly. In this section we describe how to approximate this calcula-tion with a simple division into d r sub-problems of O ( r We combine the concept of  X  X ivot features X  from Blitzer et al. (2006) and the use of most-frequent features from Glorot et al. (2011). Instead of learning a single map-ping W  X  R d  X  ( d +1) to reconstruct all corrupted features, we learn multiple mappings but only reconstruct the r d most frequent features (here, r = 5000 ). For an input x we denote the shortened r -dimensional vector of only the r most-frequent features as z i  X  X  r . We perform this recon-struction with S random non-overlapping sub-sets of input features. Without loss of generality, we assume that the feature-dimensions in the input space are in random order and divide-up the input vectors as x i = h x 1 i &gt; ,..., x S For each one of these sub-spaces we learn an independent mapping W s which minimizes Each mapping W s can be solved in closed-form as in (5), following the method described in section 3.2. We define the output of the first layer in the resulting mSDA as the average of all reconstructions, Once the first layer, of dimension r d , is built, we can stack multiple layers on top of it using the regular mSDA as described in section 3.3 and Algorithm 2. It is worth point-ing out that, although features might be separated in differ-ent sub-sets within the first layer, they can still be combined in subsequent layers of the mSDA. We evaluate mSDA on the Amazon reviews benchmark data sets (Blitzer et al., 2006) together with several other algo-rithms for representation learning and domain adaptation. The dataset contains more than 340 , 000 reviews from 25 different types of products from Amazon.com. For simplic-ity (and comparability), we follow the convention of (Chen et al., 2011b; Glorot et al., 2011) and only consider the binary classification problem whether a review is positive (higher than 3 stars) or negative (3 stars or lower). As mSDA and SDA focus on feature learning, we use the raw bag-of-words (bow) unigram/bigram features as their input. To be fair to other algorithms that we compare to, we also pre-process with tf-idf (Salton &amp; Buckley, 1988) and use the transformed feature vectors as their input if that leads to better results. Finally, we remove five domains which contain less than 1 , 000 reviews.
 Different domains in the complete set vary substantially in terms of number of instances and class distribution. Some domains (books and music) have hundreds of thousands of reviews, while others (food and outdoor) have only a few hundred. There are a total of 380 possible transfer tasks ( e.g. Apparel  X  Baby ). The proportion of nega-tive examples in different domains also differs greatly. To counter the effect of class-and size-imbalance, a more con-trolled smaller dataset was created by Blitzer et al. (2006), which contains reviews of four types of products: books, DVDs, electronics, and kitchen appliances. Here, each do-main consists of 2 , 000 labeled inputs and approximately 4 , 000 unlabeled ones (varying slightly between domains) and the two classes are exactly balanced. Almost all prior work provides results only on this smaller set with its more manageable twelve transfer tasks. We focus most of our comparative analysis on this smaller set but also provide results on the entire data for completeness.
 Methods. As baseline , we train a linear SVM on the raw bag-of-words representation of the labeled source and test it on target . We also include the results of the same setup with dense features obtained by projecting the entire data set (labeled and unlabeled source+target ) onto a low-dimensional sub-space with PCA (we refer to this setting as PCA ). Besides these two baselines, we evaluate the effi-cacy of a linear SVM trained on features learned by mSDA and two alternative feature learning algorithms, Structural Correspondence Learning ( SCL ) (Blitzer et al., 2006) and 1-layer 1 SDA (Glorot et al., 2011). Finally, we also com-pare against CODA (Chen et al., 2011b), a state-of-the-art domain adaptation algorithm which is based on sample-and feature-selection, applied to tf-idf features. For CODA, SDA and SCL we use implementations provided by the au-thors. All hyper-parameters are set by 5-fold cross valida-tion on the source training set 2 .
 Metrics. Following Glorot et al. (2011), we evaluate our results with the transfer error e ( S,T ) and the in-domain error e ( T,T ) . The transfer error e ( S,T ) denotes the clas-sification error of a classifier trained on the labeled source data and tested on the unlabeled target data. The in-domain error e ( T,T ) denotes the classification error of a classifier that is trained on the labeled target data and tested on the unlabeled target data. Similar to Glorot et al. (2011) we measure the performance of a domain adaptation algorithm in terms of the transfer loss , defined as e ( S,T )  X  e b where e b ( T,T ) defines the in-domain error of the baseline. In other words, the transfer loss measures how much higher the error of an adapted classifier is in comparison to a lin-ear SVM that is trained on actual labeled target bow data. The various domain-adaptation tasks vary substantially in difficulty, which is why we do not average the trans-fer losses (which would be dominated by a few most difficult tasks). Instead, we average the transfer ratio , e ( S,T ) /e b ( T,T ) , the ratio of the transfer error over the in-domain error . As with the transfer loss , a lower transfer ratio implies better domain adaptation. For timing purposes, we ignore the time of the SVM train-ing and only report the mSDA or SDA training time. As both algorithms are unsupervised, we do not re-train for different transfer tasks within a benchmark set  X  instead we learn one representation on the union of all domains. CODA (Chen et al., 2011a) does not take advantage of data besides source and target and we report the average train-ing time per transfer task. 3 All experiments were conducted on an off-the-shelf desktop with dual 6-core Intel i7 CPUs clocked at 2.66Ghz. 5.1. Comparison with Related Work In the first set of experiments, we use the setting from (Glo-rot et al., 2011) on the small Amazon benchmark set. The input data is reduced to only the 5 , 000 most frequent terms of unigrams and bigrams as features.
 Comparison per task. Figure 1 presents a detailed com-parison of the transfer loss across the twelve domain adap-tation tasks using the various methods mentioned. A linear SVM trained on the features generated by SDA and mSDA clearly outperform all the other methods. For several tasks, the transfer loss goes to negative  X  in other words, a SVM trained on the transformed source data has higher accuracy than one trained on the original target data. This is a strong indication that the learned new representation bridges the gap between domains. It is worth pointing out that in ten out of the twelve tasks mSDA achieves a lower transfer-loss than SDA.
 Timing. Figure 2 (left) depicts the transfer ratio as a func-tion of training time required for different algorithms, av-eraged over 12 tasks. The time is plotted in log scale. We can make three observations: 1. SDA outperforms all other related work in terms of transfer-ratio, but is also the slow-est to train (more than 5 hours of training time). 2. SCL and PCA are relatively fast, but their features cannot com-pete in terms of transfer performance. 3. The training time of mSDA is two orders of magnitude faster that of SDAs ( 180  X  speedup), with comparable transfer ratio. Training one layer of mDA on all 27 , 677 documents from the small set requires less than 25 seconds. A 5-layer mSDA requires less than 2 minutes to train, and the resulting feature trans-formation achieves slightly better transfer ratio than SDAs. Large scale results. To demonstrate the capabilities of mSDA to scale to large data sets, we also evaluate it on the complete set with n = 340 , 000 reviews from 20 domains and a total of 380 domain adaptation tasks (see right plot in Figure 2). We compare mSDA to SDA (1-layer). The large set is more heterogenous in terms of the number of domains, domain size and class distribution than the small set and both the transfer error and transfer ratio are aver-aged across 380 tasks. Nonetheless, a similar trend can be observed. The transfer ratio reported in Figure 2 (right) cor-responds to averaged transfer errors of ( baseline) 13 . 93% , ( one-layer SDA ) 10 . 50% , ( mSDA, l = 1 ) 11 . 50% , ( mSDA, l = 3 ) 10 . 47% , ( mSDA, l = 5 ) 10 . 33% . With only one layer, mSDA performs a little worse than SDA but reduces the training time from over two days to about five minutes ( 700  X  speedup). With three layers, mSDA matches the transfer-error and transfer-ratio of SDA and still only re-quires 14 minutes of training time ( 230  X  speedup). 5.2. Further Analysis In addition to comparison with prior work, we also analyze various other aspects of mSDA.
 Low-frequency features. Prior work often limits the in-put data to the most frequent features (Glorot et al., 2011). We use the modification from section 4 to scale mSDA (5-layers) up to high dimensions and include less-frequent uni-grams and bi-grams in the input (small Amazon set). In the case of SDA we make the first layer a dimension-ality reducing transformation from d dimensions to 5000 . The left plot in Figure 3 shows the performance of mSDA and SDA as the input dimensionality increases (words are picked in decreasing order of their frequency). The trans-fer ratio is computed relative to the baseline with d =5000 feature. Clearly, both algorithms benefit from having more features up to 30 , 000 . mSDA matches the transfer-ratio of SDA consistently and, as the dimensionality increases, gains even higher speed-up. With 30 , 000 input features, SDA requires over one day and mSDA only 3 minutes ( 458  X  speedup).
 Transfer distance. Ben-David et al. (2007) suggest the Proxy-A-distance (PAD) as a measure of how different two domains are from each other. The metric is defined as 2(1  X  2 ) , where is the generalization error of a classi-fier (a linear SVM in our case) trained on the binary classi-fication problem to distinguish inputs between the two do-mains. The right plot in Figure 3 shows the PAD before and after mSDA is applied. Surprisingly, the distance increases in the new representation  X  i.e. distinguishing between two domains becomes easier with the mSDA features. We explain this effect through the fact that mSDA is unsuper-vised and learns a generally better representation for the input data. This helps both tasks, distinguishing between domains and sentiment analysis ( e.g. in the electronic-domain mSDA might interpolate the feature  X  X vd player X  from  X  X lue ray X , both are not particularly relevant for sen-timent analysis but might help distinguish the review from the book domain.). Glorot et al. (2011) observe a similar effect with the representations learned with SDA. 5.3. General Trends In summary, we observe a few general trends across all ex-periments: 1. With one layer, mSDA is up to three orders of magnitudes faster but slightly less expressive than the original SDA. This can be attributed to the fact that mSDA has no hidden layer. 2. There is a clear trend that addi-tional  X  X eep X  layers improve the results significantly (here, up to five layers). With additional layers, the mSDA fea-tures reach (and surpass) the accuracy of 1-layer SDA and still obtain a several hundred-fold speedup. 3. The mSDA features help diverse classification tasks, domain classifi-cation and sentiment analysis, and can be trained very effi-ciently on high-dimensional data. Although mSDA first and foremost marginalizes out the corruption in SDA training, the two algorithms differ in several profound ways: First, the mDA layers do not have hidden nodes  X  this allows a closed-form solution with substantial speed-ups but might entail limitations that still need to be investigated. Second, mSDA only has two free meta-parameters, controlling the amount of noise as well as the number of layers to be stacked, which greatly sim-plifies the model selection. Finally, leveraging on the an-alytic tractability of linear regression, the parameters of an mDA are trained to optimally denoise all possible cor-rupted training inputs  X  arguably  X  infinitely many  X . This is practically infeasible for SDAs.
 We hope that our work on mSDA will inspire future research on efficient training of SDA, beyond domain adaptation, and impact a variety of research problems. The fast training time, the capability to scale to large and high-dimensional data and implementation simplicity make mSDA a promising method with appeal to a large au-dience within and beyond machine learning.

