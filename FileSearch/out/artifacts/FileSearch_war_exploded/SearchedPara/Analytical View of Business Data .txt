 This paper describes a logical extension to Microsoft Business Framework (MBF) called Analytical View (AV). AV consists of three components: Model Serv ice for design time, Business Intelligence Entity (BIE) for programming model, and IntellDrill for runtime navigation between O LTP and OLAP data sources. AV feature-set fulfills enterprise application requirements for Analysis and Decision Support, complementing the transactional feature-set currently provided by MBF. Model Service automatically transforms an "obj ect oriented model (transactional view)" to a "multi-dimensional m odel (analytical view)" without the traditional Extraction/Transformation/Loading (ETL) overhead and complexity. It infers dimensionality from the object layer where richer metadata is stored, eliminating the "guesswork" that a traditional da ta warehousing process requires when going through physical database schema. BI Entities are classes code-generated by Model Service. As an intrinsic part of the framework, BI Entities enable a consistent object oriented way of programming model with st rong types and rich semantics for OLAP, similar to what MB F object persistence technology does for OLTP data. More importantly, data contained in BI Entities have a higher degree of "a pplication awareness," such as IntelliDrill links together all the information islands in MBF using metadata. Because of the automatic transformation from transactional view to analytical view enabled by Model Service, we have the ability to understand natively what kind of drill-ability an object would have, thus making information navigation in MBF fully discover-able with built-in ontology. [Database Management], D.1. 5 [Object-oriented Programming Language], H.1 [MODELS AND PRINCIPLES] Keywords: OLAP, Business Intelligence, Analytics, Entity Persistence, Object-oriented, OLTP, Application Framework, Information retrieval and navigation Entity Persistence (EP), the data access subsystem in MBF [1] is a  X  X ragmatic object relational X  mode l. It is object relational (O-R) in that the programmer deals with objects that are mapped to a relational database. EP provides the transactional view of the business data stored in the re lational database for the OLTP purpose. The transactional view is implemented in the form of necessary business logic for an application. Figure 1 shows a simple object m odel in a UML [2] class diagram describing the relationships among business entities Customer, Order, and Order-line. In this m odel we describe that an order is associated with a customer and composed of a collection of order line items. These association and composition relationships highlight the business logic/intent for these three entities in the application. Figure 1 Simple Object Model for Business Entities Customer, We assume that the object model in Figure 1 maps to a normalized schema in the relati onal database by using O-R as depicted in Figure 2. If one were to build a data mart to analyze the Unit Price, Quantity, and perhaps a simple calculation of  X  X otal Price = UnitPrice x Quantity X . They would need to implement a set of Extraction/Transformation/Loading (ETL) steps to materialize a star/snowflake schema in a data mart database as illustrated in Figure 3. Examining the ETL pipelines and processes for this simple data mart implementation, we would c onclude that the business logic the ETL needs was encapsulated in the object relationships! For example, in the dimension buildi ng process, the database schema supporting the Order and Order-line entities needs to be associated together to create the Order dimension with two aggregation levels on order and orde r line. This business logic of the required ETL is already en capsulated as the composition relationship in the object model. After studying the current MBF EP concept and design with our past background in data warehousi ng and OLAP technologies [3], We concluded an interesti ng finding: The business logic encapsulated in the object model wh en building an OLTP is being reconstructed when building an OLAP based reporting &amp; analysis application. This finding made us believe that it is possible to automatically transform the  X  X ransactional view X  to the  X  X nalytical view X  of the same business data. O-R mapping in MBF describes how each field in a business entity (e.g., a  X  X ustomer name X  in the customer entity) is originated from a column in a database table (e.g., the CustomerName column in the Customers table). Such mapping information is stored in MBF metadata store. At the same time, the advances in OLAP technologies [4] offer two new technologies that we can leverage to revolutionalize how near real-time business intelligence can be offered out-of-box from an application framework like MBF.  X  X ata Source View (DSV), X  describing a transformation in the form of queries for the data obtained from a relational da tabase, can be persisted on the OLAP server without the need to ma terialize as views or tables in a SQL database, which is requi red by traditional data mart non-intrusive way of creating a default data mart based on the OLTP database. The second advance is the  X  X  roactive caching. X  Proactive caching enables changes in an OLTP database to be propagated quickly to the OLAP aggregat es, thus removing the latency problems faced by a data mart X  X an take more than 24 hours to refresh the aggregates. To leverage these advances, we built MBF Model Service to produce the OLAP cubes inferred from MBF object models based on the mapping information from the metadata store. Figure 4 shows how a dimensiona l model is derived from the sample object model. The dimensionality is inferred based on the object relationships among business entities after a particular set of numeric fields are identified as the measures.

Figure 4 Conceptualization of Inferring a Dimensional Model To help facilitate data access fo r application development, we created a programming model on top of the cubes. To accomplish this, Model Service generates C# classes to access the generated cube. Figure 5 depicts the pro cess of generating BI entities. The C# classes, called Business Intelligence (BI) Entities, objectify the access to the multi-dimensional data produced by OLAP cubes with strong typed de sign time experience. With BI Entities, we enabled application developers to quickly employ the functionality of OLAP technologies without having to learn them in the first place X  X evelopers only have to deal with the same object-oriented programming model as they were to use EP objects for business entities. After BI Entities are generated, we also implement an object model to express the criteria to consume the data. An instance of the criteria object will be translated into OLAP type of query language such as Multi-Dimension Expression (MDX) [5]. One of the most important aspects of AV is the process of automatically inferring the corresponding analytical model from the transaction business logic. This process not only enables BI entities to be generated automatically but also preserves the  X  X ransformation X  logic to offer the full fidelity of the metadata describing relationships between business entities and BI Entities. The end result of this process is a technical break-through that enables BI Entities to drill back to business entities and navigate among them. It is common to na vigate through an object graph by traversing object relationships . However, we expanded the concept in the business framework area by having the ability to leverage metadata, to drill back and forth between the transaction and analytical views of business data in their respective object layers. For example, the default support for drilling back from an desirable with today X  X  increasi ng scrutiny on financial reporting. IntelliDrill furthers the idea used by hypermedia [6] for the object transversal in an object graph. The IntelliDrill runtime servi ce augments the drill-ability provided by OLAP cubes by re moving the physical constraints introduced by individual cubes a nd difference between OLAP and OLTP databases. It allows users to navigate  X  X usiness Information Space X  based on a set of pluggable drill-path providers (e.g., drill across, drill to top N, etc.) as opposed to being only able to drill down or through based on the dimension definitions for a cube. Model Service (design time), BI Entities (programming model), and IntelliDrill (run time), our architecture vision on  X  X nalytical View X  are depicted in Figure 6. Note that there are many benefits of having a second server (in this case, OLAP/UDM) handling aggregations and complicated types of report processing. contention on the transactional databases, easier access on information, and tighter integra tion with the rest of programming models in the framework. More importantly we want to unleash the information and data stored in the application through a set of framework level programming models so they can be fully leveraged for the BI, data mini ng, and information navigation types of functionality. Generating reports often requires h eavy loads for aggregations or other data crunching, which constr ain the transactional resources. Asking OLTP database to do "all" these reports will burden the transactional databases and imp act the overall performance of the reporting and applications. In enterprises, running ad-hoc reporting/querying against OLTP databases is especially prohibitive. The analytical view of the business data leverages OLAP servers to off load the OLTP server and improves the performance for running reports. Figure 6 Our Architecture Vision for Business Information With the built-in AV architecture in MBF, we provide the  X  X reak-through X  support for near real-tim e pervasive BI for these cases where there was no concern on transactional integrity, by leveraging the latest technol ogy advances from the OLAP technologies [4]. In most cases today, it actually takes the traditional data marts/data warehous es a few days to produce that very same information in these cases. BI entities offer a consistent way of authoring a report with OLAP data and give us better c ontrol on the framework level consistencies (localization, secu rity, metadata, customization, etc.). Without BI Entities, each application team needs to write a data access component to access OLAP data to create any meaningful analytical application. In addition, BI Entities are generated with forward engineering process so there is no mapping required; the mapping to the physical table columns is derived from the O-R maps. Almost all the industry research reports we found and customers we talked to indicate that drill-ability of the data and analytical reporting is critical to their reporting requirements. With the (transactional to analytical), we bridged the information gap that previously existed between OLAP and OLTP. IntelliDrill furthers the information access within and beyond our framework. Data integration is an important part of information delivery process for enterprises. In our architecture, we leverage  X  X ata Source View (DSV) X  technology to enable applications built on top of MBF to integrate with other business applications. The MBF Model Service consists of three major components as depicted in Figure 7. 1. Model Service Translation Engine translates an annotated 2. Model Service Deployment Engine deploys the UDM Model 3. Model Service Driver for MBF combines metadata stored in The translation engine infers the dimensional model from the defined object model and the object-relational mapping. The translator uses a rules engine to create meaningful dimensions and hierarchies. The translator first examines the model and determines the objects that are  X  X eachable X  from all of the defined measures. A reachable object implies that a path exists to that object through relationships, with appropriate cardinality, from the measures. This insures that the dimensions that are built can  X  X lice X  the measures. Sitting at the core of Model Se rvice are the IModel interfaces. These interfaces serve as an intermediate object model that describes the input object model in a way that is understood by the Model Service Translation Engine. It isolates the implementation of the Engine from the specifics of the many different ways by which an object model can be described. The driver pre-translates the object model, to conform to the IModel interfaces. The rules engine, next examines these paths, and based on the user-configured rules, adjusts the probability for combining objects, and creating hierarchies. The engine then builds a general dimensional model with appropria te measures, and dimensions. The result of the Model Service Translator is a general multidimensional object model. The driver handles projecting that model onto the target OLAP technology, such as Microsoft Analysis Server. The generalizing of the architecture allows supporting different target mode ls by plugging in different technologically agnostic. In this example, we describe how to use the Model Service in MBF: 1. A developer using MBF designs an object model in UML as 3. He invokes the Model Service Driver for MBF through the 4. The Driver builds an IModel object model by combining 5. The Translation Engine firs t generates a Data Source View 6. The Translation Engine then builds a dimensional model on 7. The Deployment Engine depl oys the dimensional model on a 
Figure 8 Inferred Star Schema for the Sample OLAP cube BI Entity architecture contains three major components as depicted in Figure 9: One scenario is as follow: We use the example cube illustrated in Figure 8 to show the generated code snippet. BI Entity generator will code-gen the following BI entities: The generated C# code snippet is as follows: To access data from BI entities, the developer needs to create a set of criteria using BICriteria class as shown below: The advantages of using BI entities for the aggregation logic include: IntelliDrill contains two major components: the service and provider layers. IntelliDrill Service layer : expose the  X  X et Links X  and  X  X raverse Links X  (as depicted in Figure 10) interfaces. Each link represents a related data path given the curre nt data context, and has its own criterion behind. IntelliDrill Provider layer : it is a pluggable provider architecture that allows IntelliDrill service to delegate  X  X et Links X  and  X  X raverse Links X  requests to the appropriate provider. A canonical scenario is as follows: By providing the logical extensi on  X  X V X  and its subsystems to MBF, we have unleashed the potential of the business data needed by enterprise employees to make decisions. And we will accomplish our team mission: To enable  X  X iz Information on Demand X  in biz applications, allowing our customers to fully realize their business potential. In this paper, we have presented the notion of AV as the logical extension to MBF. And to enab le AV, we have implemented the following three main subsystems in MBF: Traditionally, conversion of the object model into the dimension model is done manually with a lot of effort to re-construct the conversion, data has to be im ported from the object model into the dimension model to get mate rialized. This creates a big overhead for the process of data analysis. The implementation of an object oriented method to consume multi-dimensional data is innovative. It creates an opportunity for application developers to utilize one skill-set, the object oriented programming language, to master the data access from OLAP type of data stores. The conversion from a set of object oriented models to a dimensional model is a new concept in the area of OLAP. Often times, these two models are not related to each other because people who deal with them have different backgrounds. The ability to derive a dimensional model virtually and create an OLAP cube out of it from a set of object models is a break-through for the business intelligence implementation. Our invention minimizes this overhead by automating the conversion process and removes the need to reconstruct the business logic; as such, we provide a lowest cost of entry point for application developers to incl ude business intelligence or data mining functionality in their applications. We X  X  like to thank everyone on the MBF reporting team for their Laybourn, Sean Ryan, and Tom Patton for their valuable comments on an earlier version of th is paper. In addition, we gratefully appreciate the co mmitments and support from our company, Microsoft Corporation, on this project. [1] Microsoft Business Framework (http:// [2] UMD Resource Page (http://www.omg.org/uml/) [3] Ralph Kimball, The Data Warehouse Toolkit: The Complete [4] Business Intelligence and Data Warehousing in SQL Server [5] Microsoft Analysis Service [6] Alejandra Garrido and Gustavo Rossi, A Framework for 
