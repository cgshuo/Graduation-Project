 With the development of Internet, search engines have become one of the most important way to get information. User inputs queries into the search engine X  X  search blank, then the information retrieval system returns the corresponding results according to the query user issues . However, users are seldom satisfied with the results at the first time. On one hand, users X  input is always short, it can hardly reflect their search intent c learly. On the other hand, the queries themselves are ambiguous, search engines may have difficulty in giving right answers to users at the first time. Ther efore, how to help users to formulate suitable queries has been r ecognized as a challenging problem to search engines. To solve this problem a valuable technique, query suggestion, has been employed by most commercial search engines, such as Google 1 , Bing 2 and Yahoo ! 3
Query suggestion plays an important role in improving the usability of search engines and it has been well studied in academia as well as industry. Traditional query suggestion approaches mainly focus on recommending queries relevant to the original query. Due to the redundancy in the results of query suggestion, more and more researches have turned their attention into query suggestion diversifying. However, as an important feature to distinguish different query suggestions, click-through distribution has never been used in query suggestion diversifying work.

In addition, previous query suggestion methods measure similarity relied on either click-through information or qu ery semantics, few of them combine the two factors together to generate query recommendations. In fact, click-through information and query semantics are both important factors in measuring the similarity between queries. Only considering one of them would reduce the rele-vance of recommendatory results.

In this paper, we propose a Relevant and Diverse Query Suggestion (RDQS) generation framework to produce relevant as well as diverse query suggestions. Specifically, our approach generates suggestion candidates using click-through information, re-ranks them by taking qu ery semantics into account, then diver-sifies them based on click-through distribution between queries and URLs.
We evaluate our framework for query suggestion using click-through data of a commercial search engine. We measure t he performance from different aspects. Empirical experimental results show that our framework can effectively generate highly relevant and diverse query suggestions.

The main contributions of our approach can be summarized as follows: 1. We combine query semantics and click-through information to generate query 2. Since click-through distribution is an excellent feature to distinguish differ-3. We conduct comprehensive experiments to evaluate RDQS by comparing
The rest of this paper is organized as fo llows: Section 2 presents the related work of query suggestion; Section 3 intr oduces our RDQS framework; In section 4 we conduct experiment to evaluate our proposal; We conclude this paper with future work in Section 5. Query suggestion techniques are used to h elp users to express their information needs. Search logs have been widely used in recent studies. Craswell[1], Wang[2], Mei[4] and Cao[8] leverage query logs first to construct a Query-URL bipartite graph, then generate suggestions using random walk model based on the click-through relations between queries and URLs. Boldi et.al.[5] utilize query logs to construct a query-flow graph, then apply a short random walk on the graph to generate query suggestions without the click-through information. Song[6] and Ozertem[7] mine a variety of characteristics of queries and use machine learning methods to find out related queries.

Since only considering relevance of query suggestion is far from satisfying users, more and more studies have focused on diversifying query suggestions. Zhu et.al. recommend diverse and relevant queries based on the intrinsic query manifold[15], and they find among the existing researches, Maximal Marginal Relevance (MMR) [11] is the most well-known method used for result set di-versification. Ma et.al. [10] combine MMR with random walk to diversify query suggestions. Zhu et.al. [12] apply an absorbing random walk on the graph. In order to achieve diversity, it turns the selected object into an absorbing state and then selects the next object based on the expected number of visits to each node before absorption.

However, the approaches mentioned above cannot guarantee to produce rele-vant as well as diverse recommendations. These methods fail to combine query semantics and click-through information together to generate highly relevant recommendations. In addition, they all ignore click-through distribution which is an important feature in diversifying process. In this paper, we will show how to combine query semantics and click-through information to guarantee recommen-dations which are closely related to original query, and how to take advantage of click-through distribution in diversifying process. RDQS framework is primarily composed of three steps. The first step is to gen-erate suggestion candidates, and we adopt random walk algorithm to generate n query suggestion candidates in this paper. After that, we re-rank the candidates based on a relevancy criterion using snippets to achieve query suggestions that are more relevant to original query. In the last step, we diversify these sugges-tions using click-through distribution and generate the final results. The whole process is sketched in Figure 1.
 3.1 Generating Suggestion Candidates First we use random walk to generate query suggestion candidates. We choose random walk because it X  X  an efficient way to generate candidates as many as possible. Step 1 of RDQS focuses on generating candidates from search logs based on the forward random walk. A Query-URL bipartite graph is constructed as G =( V,E ), in which vertexes are composed by two parts V = V 1 V 2 . V 1 represents the set of all unique queries and V 2 represents the set of all unique URLs. There exits an edge from node x  X  V 1 to node y  X  V 2 if y is a clicked URL of query q in the search logs. The weight w ( q,u ) is the total number of times that u is clicked when query q is issued. Note that since the edge is an undirected edge, the weight w ( q,u )isthesameas w ( u, q ). The transition probabilities from node i to node j in this paper is defined as follows: where k ranges over all nodes. P t +1 | t ( j | i ) denotes the transition probability from node i at step t to node j at time step t +1.

We represent the transitions as a sparse matrix A and perform the random walk using A. We calculate the probability of transition from node i to node j in paths of length t between the two nodes. It gives a measure of the volume of paths between these two nodes. If there are many paths the transition probability will paper, we set the n = 200 empirically, and 200 is big enough to cover all kinds of related queries. 3.2 Re-ranking Candidates There are some noises in the generat ed query candidates. We find that some candidates rank high but not related to the original query, while some highly related candidates have low ranking. In order to guarantee that the results are ranked base on their semantic relevance, we choose to use query semantics to re-rank the candidates.

Query semantics is the content that are closely related to the query in se-mantic. As we all know, it X  X  hard to determine the degree of semantic relevance between two queries according to their lit eral meaning because queries are short, generally consisted of less than ten wo rds. However, we can extend the query semantics with related snippets.

Snippets, the few lines of text that appear under each search result, are de-signed to give users a sense for what X  X  on the page and why it X  X  relevant to their query. We utilize snippets to enrich query semantics, then we can leverage tradi-tional documents similarity comparison methods to calculate queries similarity. In this paper we crawl top ten snippets from Google for each query.

For two queries q i and q j , we tokenize their related words into term vector  X   X  Q of term t l in query q k , the cosine similarity between two vectors cos( queries is calculated as follow:
We compare all the candidates to original query, and re-rank the candidates according to its similarity to original query from high to low. We choose top k instead of all re-ranked results as the input of step 3, because more candidates would bring unrelated suggestions. 3.3 Diversifying Suggestions Click-through information reflects users X  click behaviour in search engines. We define query q i and URL u j exist a click-through relationship R ( q i ,u j )when u j being clicked after q i being issued. Click-through distribution reflects click-through information over queries. Queries may be redundant in semantic if they have similar click-through distribution. On the contrary, a query will be diverse to an other query if the two queries X  click-through distributions are different. For example, for a Query-URL bipartite shown in Figure 2, we can achieve three suggestions  X   X  X ikeid nike X ,  X  X ike id X  and  X  X ike shoes X   X  for original query  X  X ike X . However  X  X ike id X  seems like a redundant suggestion with  X  X ikeid nike X  since they have similar click-through distribution. In fact,  X  X ike shoes X  is actually a better suggestion than  X  X ike id X  if we already add  X  X ikeid nike X  in final suggestion results.
Basically similar queries lead to similar click-through distribution, so we can diversify the query suggestion candidates according to the diverse between the click-through distribution. The main idea of the proposed diversified method is that the less click-through distribution the two queries share, the more different they are. Let C be the set of all query candidates, and S be the set of all final query suggestions. At first, S is empty and C is consisted of all the candidates generated from step 2. We first pick the candidates in C that is most similar to original query, that is the one has the highest score in step 2, as the first suggested query. After the selection of t he first suggested query, we then employ the click-through distribution to calculate the diversity score of the rest queries in
C , pick up the candidate which has the highest score as final query suggestion and add it into S . We pick out a candidate in C which shares least click-through information with original query and suggestions in S . The diversifying algorithm is summarized in Algorithm 1.
 Algorithm 1. Diversifying Query Suggestions
In this paper, we propose two different ways to calculate diversity between two queries div ( q i ,q k ). They are described as follows:
RDQS 1 :Foraquery q , we can draw a vector search logs, the elements in this vector are URLs that clicked through q and w i in  X   X  count i represents the count of URL i being clicked through q .Thenwecan calculate diversity of two queries as follows:
RDQS 2 :Foraquery q , there exists a union U ( q )=( u 1 ,u 2 ,u 3 , ..., u n ), which u i in U ( q ) is the URL that clicked through query q . Then we can define the diversity of two queries q i and q j as follows:
The time complexity of Algorithm 1 is O ( | C | X  k ), actually the number of queries in C and k are not bigger, and the time complexity of Algorithm 1 is acceptable. 4.1 Experimental Setup In this section, we conduct empirical experiments to show the effectiveness of RDQS framework. We select AOL Search Data as our data set, which is a col-lection of real search log data based o nrealusers.Insummary,thedataset consists of 20M web queries collected from 650K users over three months. For each query, the following details are available: a user ID, the query itself, times-tamp, the clicked URL and the rank of that URL.

Since this dataset is raw data recorded by the search engine, and contains many noises. We conduct a similar method employed in [2] to clean the raw data. we clean the data by keeping those frequent well-formatted English queries (queries which only contain character  X  X  X ,  X  X  X , ...,  X  X  X  and space, and appear more than 5 times). After cleaning, we obtain a total of 9,752,848 records, 604,982 unique queries and 785,012 unique URLs.

We construct a query-URL bipartite graph on our data set, and randomly sample a set of 120 queries from our data set as the testing queries. For each testing query, we obtain six query suggestions. In order to evaluate the quality of the results, three experts are reques ted to rate the query suggestion results with  X 0 X  or  X 1 X , in which  X 0 X  represents  X  X rrelevant X  and  X 1 X  means  X  X elevant X .
In order to evaluate the effectivenes s of our framework, we use four meth-odsasbaselines,theyare Forward Random Walk(FRW) [1], Backward Random Walk(BRW) [1], Hierarchy Agglomerative Clustering(HAC) [9], and Diversify-ing Query Suggestions(DQS) [10]. In order to evaluate the effect of re-ranking process, we add the results which are generated by re-ranking candidates using snippets(RCS) to compare. 4.2 Evaluation Measurements In this paper, we adopt three metrics( Relevance , Auto-Diversity and Human-Diversity ) to evaluate the precision and diversity in query suggestions. Precision. In order to evaluate the quality of the results, three experts are requested to rate the query suggestion results with  X 0 X  and  X 1 X , where  X 0 X  means  X  X rrelevant X  and  X 1 X  means  X  X elevant X . We use the precision measurement in our experiment, i.e., precision at position n is defined as: where rn is the number of relevant queries in the first n results.
 Auto-diversity. Auto-diversity metric is a metric using a commercial search engine(i.e., Google), we adopt the same method used in [14]. Specifically, given two queries q 1 and q 2 , we compute the proportion of different URLs among their top k ( k = 10 in this paper) search results, the definition is as follows: where | o ( q 1 ,q 2 | is the number of URLs among the top k search results of the query q 1 and q 2 . Then for a query q 1 , the diversity of its suggestion is defined as: Human-experts-diversity. There exists a problem in auto-diversity evalua-tion: if a query suggestion has nothing to do with the original query but they share some URLs, it would harm the users X  experience, however it still contribute the diversity score in auto-diversity evaluation.

To solve this problem, we propose a new diversity evaluation metric: Human-experts-diversity. Manual evaluation is essential since human experts have a better understanding of the latent semantic meaning than any machines. We ask experts to label the relationship betw een two queries, there are three kinds of relationships: unrelated, duplicate, distinct. Experts label the query candidates based on the queries semantics and their relations to the original query.
After the accessors labeled all the suggestions, we calculate the diversity of one query suggestion method M as all the number of distinct queries dtn divided by total number of relevant queries rn which consisted of distinct ones dtn and duplicate ones dpn : 4.3 Results and Discussion Case Study. Some examples of suggestions generated by six methods for orig-inal test queries are given in Table 1. From the results shown in Table 1, we can see that some approaches, such as FRW, BRW, HAC, recommend closely related queries while introducing many redundant suggestions. For examples, for the test query  X  X et blue X , FRW recommends redundant suggestions  X  X etblue X , BRW recommends redundant suggestions  X  X etbl ue X ,  X  X et blue airlines X ,  X  X etblue airlines X ,  X  X etblue airways X  and  X  X et blue airways X . HAC recommends redundant suggestions  X  X etblue X ,  X  X etblue airlines X ,  X  X etblue airways X ,  X  X et blue airlines X ,  X  X et blue airways X ,  X  X et blue airline X . For the test query  X  X layboy X , HAC suggests redun-dant suggestions  X  X ww playboy com X  and  X  X lay boy X . Since traditional methods only focus on relevancy, they do little work to diversify the results, they produce many redundant recommendations inevitably.

Meanwhile, we can easily find that DQS recommends queries with better di-versity. However, there still exist some redundancy in the approach. For example, airways X  and  X  X et blue airways X  suggested by DQS are the same meaning.
Moreover, results recommended by these baseline methods may not so closely related to the original query. For example, suggestion of  X  X yspace X  with respect to  X  X layboy X , and suggestion of  X  X im rome X  with respect to  X  X ike X .

Different from other methods, which only leverage search logs to generate suggestions, our method exploits semantic relationships between original query and suggestions based on snippets. We re-rank the suggestion candidates based on their relevancy using snippets. Ther efore, the suggestions are guaranteed to be more semantically related to the original queries. We also use click-through information to diversify the results. Among all these approaches, we observe that RDQS 1 and RDQS 2 obtain best performance, more relevant as well as diverse queries can be found in their query suggestion results.
 Experimental Results. Figure 3 shows the comparison results of precision. Figure 4 shows the comparison results of auto-diversity. Figure 5 shows the comparison results of human-experts-diversity. We have serval findings from the results: Firstly, in Figure 3 we can see that RCS achieves the best score on precision. In fact, RCS is 13.14% higher than FRW. This is because re-ranking leverages semantics to re-rank the results generated in FRW, thus the re-ranking results are highly relevant to original queries. RDQS 1 , RDQS 2 and RCS take both semantic and click-through relations into consideration, while other baselines only care about click-through relations, so we can observe that RDQS 1 , RDQS 2 and RCS are about the same on precision, much better than other baselines. In addition, RCS is a litter better than RDQS 1 and RDQS 2 on precision. This is because RDQS 1 and RDQS 2 diversify the results generated by RCS, and it brings some irrelevant suggestions.
Secondly, both RDQS 1 and RDQS 2 leverage click-through distribution to diversify suggestion results, and achieve the best diversity performance. In Figure 4 and Figure 5 we can see both RDQS 1 and RDQS 2 achieve the highest diversity score, both RDQS 1 and RDQS 2 are at least 10% higher than other methods on diversity. It shows that click-through distribution is an effective feature to diversify query suggestion results. DQS is worse than RDQS 1 and RDQS 2 but better than other methods in diversity, because FRW, BRW and HAC only focus on finding related queries. RDQS 1 , RDQS 2 and DQS take a step towards diversifying, thus achieve a higher diversity score. RDQS 1 and RDQS 2 obtain a much better performance than DQS shows that the overlaps of click-through distribution is more effective than hitting information in diversifying process.
Thirdly, RCS achieves the lowest performance in auto-diversity and human-experts-diversity. This is because RCS re-rank results based on the semantics of queries, the suggestions which are similar in semantics are usually representing the same meaning. The results in RCS exist redundancy.

Lastly, as can be seen from Figure 4 and Figure 5, RDQS 2 is a bit higher than RDQS 1 in diversifying score. That X  X  because RDQS 1 cares about not only the overlaps of clicked URLs but also the counts of clicked, it may be overfitting in diversifying process. In this paper, we introduce a uniform framework to generate relevant and diverse query suggestions. Our framework first generates suggestion candidates using forward random walk model which leverage the click-through information, then re-rank the candidates utilizing snippets related to queries. Finally it diversifies candidates based on click-through distribution. In this way, our framework can generate query suggestions by simultaneo usly considering diversity and relevance between queries in a unified way. The empirical results clearly show that our approach outperforms all the baseline methods in recommending highly diverse as well as closely related query suggestions.
 Acknowledgement. This research is supported by the 863 project of China (2013AA013300), National Natural Science Foundation of China (Grant No. 61375054 and 61402045), Tsinghua University Initiative Scientific Research Pro-gram Grant No.20131089256, and Cross fund of Graduate School at Shenzhen, Tsinghua University (Grant No. JC20140001).

