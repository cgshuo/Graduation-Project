 In this paper we propose a novel framework for modeling the uniqueness of the user preferences for recommendation systems. User uniqueness is determined by learning to what extent the user X  X  item preferences deviate from those of an  X  X verage user X  in the system. Based on this framework, we suggest three different recommendation strategies that trade between uniqueness and conformity. Using two real item datasets, we demonstrate the effectiveness of our uniqueness based recommendation framework.

In recent years, recommender systems have gained im-mense popularity for information filtering and personaliza-tion purposes. Existing recommendation methods can be roughly classified into three main types: collaborative filter-ing (CF), content-based (CB), and hybrids of the two [1]. While remarkable research has been done and many instan-tiations of various CB and CF methods have been proposed, much less effort has been made to take into consideration the uniqueness of the user preferences for recommendation.
In this work we propose a novel framework for model-ing the uniqueness of the user preferences for recommenda-tion systems. User uniqueness is determined by learning to what extent the user X  X  item preferences deviate from those of an  X  X verage user X  in the system. Using this framework, we study three alternative recommendation strategies that are based on dual user uniqueness assumptions.

The first strategy, termed PERS (for personalization), rec-ommends items that satisfy the user unique preferences. For that, we extend the user model we previously suggested in [7] and show how user preferences for various item fea-This work was done while the author worked in IBM tures  X  X ncoded X  in user rating data can be derived. Based on derived user preferences, we further show how the user X  X  global uniqueness level can be estimated. The second strat-egy, termed POP (for popularity), assumes that the user has no unique preferences, i.e., she actually  X  X oes the line X , and therefore, recommends poplar items that are likely to satisfy the preferences of an average user of the system.
Finally, recognizing that every user preferences may ac-tually lie in between the two extremes, we further propose a hybrid recommendation strategy, termed POPERS ,which utilizes the user X  X  uniqueness level to trade between the two pure strategies. As a proof of concept, using two real item datasets, we evaluate the effectiveness of the various recom-mendation strategies and demonstrate the important role that user uniqueness may play for recommender systems.
We now shortly review several related works. A survey on state-of-the-art recommendation methods is available at [1].
This work is based on an earlier work we did in the domain of user profiling [7]. In [7], user content preferences were implicitly estimated from web browsing logs by utilizing the collection of users of the system (termed user community in [7]) as an auxiliary reference. Though, while the basic model in [7] considers only textual data, this work considers both diverse item features and explicit user rating data. In addition, [7] neither focused on user uniqueness modeling nor its usage for recommender systems.

In this work we combine a recommendation method based on user X  X  profile with a recommendation method based on item popularity. Several previous works have studied the us-age of popular items for recommendation, and more specif-ically, its combination with more traditional recommenda-tion methods [6, 2, 3, 4]. Recommendation of popular items has been studied in the context of the cold-start problem of recommender systems [4]. Ahn [2] has studied various popu-larity characteristics for recommendation and demonstrated that recommendation of popular items can be superior to other methods (for example, to CF) under data sparsity and cold-starting situations. Clema and Cano [3] have further shown that collaborative filtering methods are more prone to popularity bias. Rashid et al. [6] has combined CF with popularity by biasing CF recommendations towards popu-lar items. Our work complements these works by further demonstrating how user uniqueness can be estimated and utilized to automatically trade between personalization and popularity based recommendations.
Let I denote a collection of items and F asetof n fea-tures. Let V f be the vocabulary of feature f  X  F , i.e., an ordered set of all possible feature values. For example, a movie may have the features title , director , actors , genre , and V genre = { comedy , drama , romance } . We further denote by f.v a specific feature value in V f (e.g., genre.comedy ). the feature vocabulary; i.e., i f.v = 1 if item i has the feature value f.v  X  V f ,else, i f.v =0. Eachitem i is represented by the list of its feature vectors, i =( i f 1 ,..., i f n ).
Let U be a set of users of the system (also termed user community hereinafter). A user u  X  U is modeled by a user profile defined by the pair p u = W u , X  u . W u ( w f 1 ,..., w u f n ) is a list of weight vectors, where w u  X  X  intra-feature preferences over the feature X  X  vocabulary V , w f.v is a real number that corresponds to the relative im-portance of feature value f.v for user u . For simplicity, in this work, we assume that all features are equally important to all users of the system.

Finally, the scalar  X  u  X  [0 , 1] models the uniqueness level of user u within her community U . The lower the value of  X  , the higher the uniqueness of u .
In this work, we derive a given user u  X  X  preferences from u  X  X  ratings to various items in I .Let r u i be the rating given by user u  X  U to item i  X  I . Furthermore, for a given item i  X  I , let U i be the set of users who rated item i .
Given a feature f  X  F , let I f.v denote the subset of items such that i f.v =1. Wenowderive P f , the probability dis-tribution of the community X  X  preferences over the feature vocabulary V f ,by:
Similarly, for a given user u , we define I u f.v to be the set of items in I f.v rated by u . The probability distribution of u  X  X  preferences over the feature vocabulary V f , P u f ,isthen estimated by: where  X  =0 . 01 is a (fixed) smoothing coefficient parameter
Finally, user preferences over feature values in V f are de-rived according to their marginal contribution to the Kullback-Leibler (KL) divergence [5] between the two distributions:
Hence, for a given user u  X  U , the marginal contribution of each feature value f.v to the divergence of the user pref-erences from that of the average user of U derives its final weight: Consequentially, if w u f.v &gt; 0, it immediately implies that P f.v &gt;P f.v which can be interpreted as  X  user u prefers fea-ture value f.v more than an average user  X . Similarly, if w f.v &lt; 0, it follows that P u f.v &lt;P f.v , hence this feature value is less preferred by the user in relation to an average user. The special case of w u f.v = 0 implies that both the user and the average user exhibit similar preferential pattern for this feature value.
Using the last observation from Section 3.2 we now shortly describe how the user X  X  uniqueness level (or non-conformity) can be estimated using the same framework.

For a given feature f  X  F ,let F u f ( w ) denote the probabil-ity density function of the user preferences over the feature value weights. The user level of uniqueness, therefore, may be estimated by measuring the confidence interval around zero of the user preferences density function. Formally, let  X  f denote the probability that user u is a conformist up to some confidence level  X  0, given by  X  u f = +  X  F u f ( w ) dw which can be estimated as follows:
The confidence level parameter, ,isdeterminedby  X   X   X  u f ,where  X  is a free parameter for the entire user com-munity and  X  u f denotes the standard deviation of F u f ( w ). A large  X  value would imply that we relax the criterion for con-formity within the user community, while a smaller  X  value would imply that we require higher confidence interval for a user X  X  conformity pattern. It is further important to note that, while  X  is set based on the entire user community, the uniqueness threshold for each user is actually personalized and based on the properties of her private F u f ( w ) preference distribution. Hence, the uniqueness level is personally set for each user.

Finally, the global uniqueness level of the user is set by  X  of user u over the feature set F . Next we describe how a recommendation strategy can trade between recommending popular items to items that  X  X atisfy X  the user profile, based on the user uniqueness level.
Built on top of our new user modeling framework, we now describe three different item recommendation strate-gies. The first one personalizes recommended items based on the user profile. The second recommends popular items to the user. The third one utilizes the uniqueness level of the user to trade between the two basic strategies. tion strategy, termed PERS , aims at providing personalized recommendations to the user based on her preferences by scoring the items as follows:
According to Equation 7, positive feature values in the user X  X  intra-preferences vector contribute to the item score, while those with a negative value reduce its score. We fur-ther linearly normalize score PERS ( i, u ) over all items in I into the range of [0 , 1], where the lowest scored item is assigned with 0 score and the highest with 1. The top scored items are recommended.
 tion strategy, termed POP , recommends items that would probably satisfy the preferences of an average user of U .A straight forward strategy is to recommend the most popular items to the user. In this work we recommend popular items to user u , derived from the ratings of her K nearest neigh-bors (KNN). The K nearest neighbors are determined based on their rating similarity to u  X  X  ratings (e.g., using Pearson Correlation [1]).

Let U u k denote the top-k most similar users in U to user u ; the popularity score for each item i  X  I is calculated by therelativeratingvolumegivenbythecommunity U u k to that item, measured as follows: Combined Item Scoring. Our final item recommendation strategy, termed POPERS , is a hybrid strategy which utilizes the user uniqueness level to trade between the two basic strategies. The hybrid item score of POPERS strategy for user u is then given by:
The lower the uniqueness level of the user (the higher the user conformity), the higher the effect of POP on the final score of the item and vice versa. Therefore, unique users will be recommended by items that satisfy their preferences, while conformist users will be recommended mostly by pop-ular items.
We evaluated our item recommendation strategies using two real-world datasets, namely: MovieLens and BookCross-ing . We now shortly describe each dataset.
 MovieLens is a movie rating dataset 2 from GroupLens Research. This dataset contains about 1 million anonymous ratings of approximately 3,900 movies made by 6,040 users during 2000. Ratings in this dataset were made on a 5-star scale, with 5 stars being the highest rating. The set of movie features in this dataset is limited to genre, title and release year. Each movie X  X  metadata was enhanced with ad-ditional features (list of actors, director, writer, screenplay, and world certificate) obtained from the movie X  X  record in IMDB 3 .

BookCrossing is a book rating dataset 4 , collected by Ziegler et al. [8] in a 4-week crawl during 2004 from the BookCrossing community 5 . It contains about 1 million anony-mous ratings of 271,379 books made by 278,858 users. Rat-ings in this dataset were made on a 10-star scale, with 10 stars being the highest rating. Ziegler et al. provide for each book several features such as the book X  X  title, author and publisher. Google Books 6 API was further used to en-rich the books metadata with two more features: categories and keywords.
The three different item recommendation strategies were evaluated on each dataset. As a baseline, the TASTE open source package 7 was used to compare the three recommenders with several state-of-the-art collaborative filtering (CF) meth-ods and with an SVD-based matrix-factorization (MF) method. We shall use the label  X  CF  X  X nd X  MF  X  to refer to TASTE X  X  best performing CF method and the MF-based method, respec-tively. The various recommenders (ours and TASTE X  X ) were implemented in Java SDK 6, and were run on a dual core Windows XP machine with 4GB RAM.
 The popularity based recommenders (i.e., POP and POP-ERS )andthe CF and MF methods were experimented with various sizes of U u k , the subset of the u  X  X  nearest neighbors, varying k over the values { 20 , 50 , 100 , 200 , 500 , |
Additionally, the POPERS recommender depends on the global parameter  X  for deriving personalized  X  u values for each user. The  X  parameter was tuned for each dataset us-ing a random sample of 100 users from U with at least 50 ratings; the values obtained were  X  =1 . 0and  X  =0 . 5 for the movies and the books datasets respectively.

The various recommenders were evaluated on each dataset using 30 user subsets, each contains 100 users with at least 50 ratings that were randomly drawn from U .Foreachrec-ommended user, we took out the user X  X  top-20 rated items (while further using the item ids for breaking possible rat-ing ties) and used them for testing, while the remaining user X  X  rated items were used for training. The various rec-ommenders were evaluated based on their ability to identify the testing items (rank them higher) out of all items in I that were not used for training.

Recommendation quality was measured using nDCG@20 which measures the ranks of the testing items at the top-20 recommended results, while considering their rating score as a relevance level. Items recommended by CF and MF methods were ranked according to their predicted user ratings. In the followings, we report on the average performance of all recommenders over the 30 user datasets.
The results of our evaluation are depicted in Figure 1. The first observation we make is that the relative performance of the various recommenders among the two datasets sig-nificantly differs. We mainly attribute this difference to the fact that the BookCrossing dataset is much sparser than the MovieLens dataset.

As we can observe, for both datasets, popularity based recommendation (i.e., POP ) dominates personalized recom-mendation based on the user X  X  profile (i.e., PERS ), CF (sup-porting [2]) and MF . Next, we observe that overall, for both Figure 2: Comparing the user uniqueness distribu-tions in the MovieLens and BookCrossing datasets datasets and all configurations, the POPERS recommender significantly outperformed the other alternatives up to 4% the second best recommender, using the best configuration for the movies ( k = 50) and the books datasets ( k = 100), respectively. Recall that POPERS utilizes the user uniqueness level for  X  X ptimal X  trading between POP and PERS strategies.
An important observation that we make is that PERS rel-ative performance, compared to the other strategies, is sig-nificantly higher for BookCrossing. This difference can be explained by analyzing the distribution of user uniqueness level within the two datasets.

Figure 2 provides a box-plot comparison between the user uniqueness distributions in the two datasets. As we can ob-serve, user uniqueness level varies among users with a me-dian value of 0 . 213 ( IQR =0 . 0489) and 0 . 444 ( IQR =0 . 08) for the movies and books datasets, respectively. Therefore, the relative better performance of PERS for the books dataset can be directly explained by the higher user uniqueness level among recommended users in that dataset. This differenti-ation is exploited by the POPERS strategy which (relatively) utilizes more personalization for users in the books dataset. This also demonstrates the effectiveness of our model for learning user uniqueness for recommendation.
In this work we have shown how the user X  X  unique pref-erences over item features can be estimated and used for recommendation. Using an experimental evaluation with two real datasets we have studied various recommendation strategies and demonstrated the effectiveness of a recom-mendation strategy that trades between personalization and popularity according to the user X  X  uniqueness level.
For future work, we wish to explore more usages of user uniqueness with other recommendation strategies (e.g., CF methods) and further extend our basic model to consider the possibility of diversity in item feature significance among users.
