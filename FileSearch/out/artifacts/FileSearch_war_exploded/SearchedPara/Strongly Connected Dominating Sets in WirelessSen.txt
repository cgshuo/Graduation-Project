 Recent advances in technology have made possible the creation of Wireless Sen-sor Networks (WSNs). WSNs can be used in a wide-range of potential appli-cations both in military and people X  X  daily lives. In WSNs, there is no fixed or pre-defined infrastructure. Nodes in WSNs communicate via a shared medium, either through a single hop or multiple hops. Although there is no physical backbone infrastructure, a virtual backbone can be formed by constructing a Connected Dominating Set (CDS). Given an undirected graph G =( V, E ), a subset V  X  V is a CDS of G if for each node u  X  V , u is either in V or there exists a node v  X  V such that uv  X  E and the subgraph induced by V , i.e., G ( V ), is connected. The nodes in the CDS are called dominators , other nodes are called dominatees . With the help of CDS, routing is easier and can adapt quickly to network topology changes. To reduce the traffic during communica-tion and simplify the connectivity management, it is desirable to construct a Minimum CDS (MCDS).

The CDS problem has been studied intensively in Unit Disk Graph (UDG), in which each node has a same transmission range. The MCDS problem in UDG has been shown to be NP-hard. To build a CDS, most of the current algorithms first find a Maximal Independent Set (MIS) I of G and then connect all the nodes in I to have a CDS. The independent set I is a subset of V such that for any two nodes u, v  X  I , uv /  X  E . In other words, the nodes in I are pairwise nonadjacent. A maximal independent set is an independent set such that no more nodes can be added to remain the non-adjacency property. The most relevant related work using this scheme are in [3] and [4]. In [3], Wan et al. proposed the first distributed algorithm with the performance ratio of 8. Later, Li et al. proposed a better algorithm with the performance ratio of (4 . 8 + ln 5) by constructing a Steiner tree when connecting all the nodes in I [4].

However, in practice, the transmission ranges of all the nodes are not neces-sarily to be equal. In this case, a wireless ad hoc network can be modelled using a directed graph G =( V, E ). The nodes in V are located in a Euclidean plane and each node v i  X  V has a transmission range r i  X  [ r min ,r max ]. A directed clidean distance between v i and v j . Such graphs are called Disk Graphs (DG). v j with radius r j and v j is in the disk D i centered at v i with radius r i .Figure1 gives an example of a DG representing a network. In Figure 1, the dotted circles represent the transmission ranges and the directed edges represent the unidirec-tional links in G while the undirected edges represent the bidirectional links.
In this paper, we study the Strongly Connected Dominating Set (SCDS) prob-lem in directed disk graphs. Given a directed graph G =( V, E ), a subset S  X  V is a Dominating Set (DS) of G if for any node u  X  V , u  X  S or there exists v  X  S such that ( v, u )  X  E . S is strongly connected if for every pair u and v  X  S ,there exists a directed path from u to v in the directed graph induced by S , i.e., G ( S ). Formally, the SCDS problem can be defined as follows: Definition 1. Strongly Connected Do minating Set (SCDS) Problem: Given a directed disk graph G =( V, E ) , find a subset S  X  V with minimum size, such that the subgraph induced by S ,called G ( S ) is strongly connected and S forms a dominating set in G .

The SCDS problem is NP-hard since the MCDS problem in UDG is NP-hard and UDG is a special case of DG. Note that in directed graphs, an MIS is not necessary a DS. Hence we cannot find an MIS and connect it to construct a SCDS. Instead, we need to find a DS directly and then connect it to form a SCDS. Based on this approach, we present two constant approximation algorithms for computing a minimum SCDS in DG, called Connected Dominating Set using the Breath First Search tree (CDS-BFS) and Connected Dominating Set using the Minimum Nodes Steiner tree (CDS-MNS) algorithms. The main differences of these two algorithm are the construction to connect the obtained dominating set. To guarantee that the graph G has a solution for the SCDS problem, we assume that G is a strongly connected graph.

The remainder of this paper is organized as follows. Section 2 describes the re-lated research work on the CDS problem, both in undirected and directed graphs. The CDS-BFS algorithm and its theoretical analysis are discussed in section 3. Section 4 presents the CDS-MNS algorithm as well as shows the performance ratio of CDS-MNS and its improvements over the previous algorithm. Finally, Section 5 ends the paper with conclusions and some future work. The CDS problem in wireless sensor networks has been studied extensively in undirected graphs. Algorithms that construct a CDS can be divided into two cat-egories based on their algorithm designs: centralized algorithms and decentralized algorithms. The centralized algorithms usually yield a smaller CDS with a bet-ter performance ratio than that of decen tralized algorithm s. The decentralized algorithms can be further divided into two categories: distributed algorithms and localized algorithms. In distribut ed algorithms, the decisi on process is decentral-ized. In the localized algorithms, the deci sion process is not only distributed but also requires only a constant number of communication rounds. Based on the network models, these algorithms can be classified into two types: directed graphs and undirected graphs. For undirected graphs, they can be further divided into three categories: general undirected graphs , unit disk graphs ,and disk graphs . When modelling a network as a general undirected graph G , the algorithm X  X  performance ratio is related to  X  where  X  is the maximum degree of G .When modelling a network as a unit disk graph, the performance ratio is constant due to the special geometric structure of UDG.

In directed graphs, to our knowledge, there is only one work to find a SCDS [10]. In [10], the authors presented a localized algorithm to construct a SCDS using the marking process. The authors did not present the analysis of the per-formance ratio.

In undirected graphs, several work have been st udied in recent research litera-ture. In [6], Guha and Khuller first proposed two polynomial time algorithms to construct a CDS in a general undirected graph G . These algorithms are greedy and centralized. The first one has an approximation ratio of 2( H (  X  )+1) where H is a harmonic function. The idea of this algorithm is to build a spanning tree T rooted at the node that has a maximum degree and grow T until all nodes are added to T . The non-leaf nodes in T form a CDS. In particular, all the nodes in a given network are white initially. The greedy function that the algorithm uses to add the nodes into T is the number of the white neighbors of each node or a pair of nodes. The one with the largest such number is marked black and its neighbors are marked grey. These nodes (black and grey nodes) are then added into T .The algorithm stops when no white node exists in G . The second algorithm is an im-provement of the first one. This algorithm consist of two phases. The first phase is to construct a dominating set and the second phase is to connect the domi-nating set using a Steinter tree algorithm. With such improvement, the second algorithm has a performance ratio of H (  X  ) + 2. In [7], Ruan et al. introduced another centralized and greedy algorithm of which the approximation ratio is (2 + ln  X  ). For the localized algorithms, Wu and Li [8] proposed a simple algo-rithm that can quickly determine a CDS based on the connectivity information within the 2-hops neighbors. This approach uses a marking process. In particu-lar, each node is marked true if it has two unconnected neighbors. All the marked nodes form a CDS. The authors also introduced some dominant pruning rules to reduce the size of the CDS. In [3], the authors showed that the performance ratio of [8] is within a factor of O ( n )where n is the number of the nodes in a network.
For UDG, most of the proposed algorithms are distributed algorithms, of which the main approach is to find a Maximal Independent Set (MIS) and then to connect this set. Note that in an undirected graph, an MIS is also a dominating set (DS). In [3], the authors proposed a distributed algorithm for a CDS problem in UDG. This algorithm consists of two phases and has a constant approximation ratio of 8. The algorithm first constructs a spanning tree. Then each node in a tree is examined to find an MIS for the first phase. All the nodes in an MIS are colored black. At the second phase, mor e nodes are added (color blue) to connect those black nodes. Later, Cardei et al. presented another 2-phase distributed algorithm for a CDS in UDG. This algorithm has the same performance ratio of 8. However, the improvement over [3] is the message complexity. The root does not need to wait for the COMPLETE mess age from the furthest nodes. Recently, Li et al. proposed another distributed algorithm with a better approximation ratio, which is (4 . 8 + ln 5) [4]. This algorithm also has two phases. At the first phase, an MIS is found. At the second phase, a Steiner tree algorithm is used to connect the MIS. The Steiner tree algorithm takes the property which is that any node in UDG is adjacent to at most 5 independent nodes into consideration. For the localized algorithms, in [9], Alzoubi et al. proposed a localized 2-phase algorithms with the performance ratio of 192. At the first phase, an MIS is constructed using the one-hop neighbors information. Specifically, once a node knows that it has the smallest ID within its neighbors, it becomes a dominator. At the second phase, the dominators are responsible for identifying a path to connect the MIS. In [2], Li et al. proposed another localized algorithm with the performance ratio of 172. This localized algorithm has only 1 phase. A node marks itself as a dominator if it can cove r the most white nodes compared to its 2-hop neighbors.

For undirected disk graphs, Thai et al. recently have propo sed three constant centralized algorithms which can be implemented as distributed algorithms [1]. These algorithms use a similar approach as in UDG, that is to find an MIS and then to connect it. However, the authors i n [1] took the different transmission rages of nodes in networks into consideration.
 None of the above work has studied the SCDS problem in directed disk graphs. The SCDS problem in directed disk graphs is very practical since nodes in wire-less ad hoc networks usually have different transmission ranges. Hence a node u in a given network can communicate directly with node v but node v might not be able to communicate directly with node u . Motivated by this, we study the SCDS problem and present two approximation algorithms in the next two sections. In this section, we introduce the Connected Dominating Set using Breath First Search tree (CDS-BFS) algorithm to construct a SCDS of a directed disk graph G =( V, E ). We then analyze its performance ratio based on the geometric char-acteristics of disk graphs. Let us first begin this section with some graph theoretic notations that are used throughout this paper. For an arbitrary vertex v  X  V , and N + [ v ] denote the set of the closed out-going neighbors of v . 3.1 Algorithm Description The CDS-BFS algorithm has two stages. At the first stage, we find the Dominat-ing Set (DS) S of G using a greedy method shown in Algorithm 1. Specifically, as described in Algorithm 1, at each iteration, we find a node u which has the largest transmission range in V and color it black. Remove the closed out-going neighbors of u from V , i.e, V = V  X  N + [ u ]. Note that a node u is added to S if and only if the constructed S so far does not dominate u yet. Clearly, the set of black nodes S forms a DS of G .

At the second stage, two Breath First S earch (BFS) trees are constructed to connect S .Let s denote a node with the largest transmission range in S and v ,i =1 ...p be the other nodes in S .Let T f ( s )=( V f ,E f ) denote a forward tree rooted at s such that there exists a directed path from s to all v i ,i =1 ...p .Also let T b ( s )=( V b ,E b ) denote a backward tree rooted at s such that for any node v ,i =1 ...p , there exists a directed path from v i to s . Note that the graph H that is the union of two such trees is a feasible solution to our SCDS problem. In other words, the graph H containing all the nodes in S and H is strongly connected.

First, construct a BFS tree T 1 of G rooted at s .Let L j ,j =1 ...l be the set of nodes at level j in T 1 where l is the depth of T 1 .Notethat L 0 = { s } .Ateach Algorithm 1 Find a Dominating Set has only one node s . At each iteration j , for each node u  X  S j , we find a node v such that v  X  N  X  ( u )  X  L j  X  1 .If v is not black, color it blue. In other words, we need to find a node v such that v is an in-coming neighbor of u in G and v is in the previous level of u in T 1 .Add v to T f ( s )where v is the parent of u . This process stops when j = l . Next, we need to identify the parents of all the blue nodes. Similarly, at each iteration j , for each blue node u  X   X  S j , find a and blue nodes and there is a directed path from s to all the other nodes in S . Now, we need to find the T b ( s ). First, construct a graph G =( V, E )where G . Next, we build the second BFS tree T 2 of G rooted at s . Then follow the above procedure to find a T f ( s ) such that there exists a directed path from s to all the other nodes in S . Then reverse all the edges in T f ( s )backtotheir original directions, we have T b ( s ). Hence H = T f ( s )  X  T b ( s ) is the strongly connected subgraph wh ere all the nodes in H form a SCDS. The construction of the CDS-BFS tree is described in Algorithm 2. 3.2 Theoretical Analysis Lemma 1. For any two black nodes u and v in S, d ( u, v ) &gt;r min . Algorithm 1 would mark u as a black node before v . Assume that d ( u, v )  X  r min , then v  X  N + ( u ). Hence v cannot be black, contradicting our assumption. Lemma 2. In a directed disk graph G =( V, E ) , the size of any dominating set S is upper bounded by where k = Algorithm 2 CDS-BFS Proof. Due to space limitation, the detailed proof is omitted. The basic idea of this proof is as follows. From Lemma 1, the set of all the disks centered at the nodes in S with radius r min / 2 are disjoint. Thus the size of any DS bounded by the maximum number of disks with radius r min / 2packingintheareacovered by the optimal SCDS.
 Theorem 1. The CDS-BFS algorithm produces a SCDS with the size bounded by Proof. Let C denote the SCDS obtained from the CDS-BFS algorithm. Let B T f and B T b bethebluenodesin T f ( s )and T b ( s ) respectively. We have: Corollary 1. If the maximum and minimum transmission ranges are bounded, then the CDS-BFS algorithm has an approximation factor of O (1) . In the previous section, we use the bread first search tree to construct the tree interconnecting all the black nodes in S . This scheme is simple and fast. However, we can reduce the size of the obtained SCDS further by reducing the number of the blue nodes which are used to connect all the black nodes. In other words, we need to construct a tree with the minimum number of blue nodes to interconnect all the black nodes. The problem can be formally defined as follows: Definition 2. Directed Steiner tree with Minimum Steiner Nodes (DSMSN): Givenadirectedgraph G =( V, E ) and a set of nodes S  X  V cal led terminals , construct a directed Steiner tree T rooted at s  X  V such that there exists a directed path from s to all the terminals in T and the number of the Steiner nodes is minimum.

Note that a Steiner node is a node in T but not a terminal. In the SCDS prob-lem context, Steiner nodes are also the blue nodes. Once we solve the DSMSN problem, we can use this solution to solve the SCDS problem. Initially, all the nodes in S are black and the other nodes in V are white. First, let us introduce the following definitions.
 Definition 3. Spider: A spider is defined as a directed tree having at most one white node of out-degree more than two and the other nodes are either black or blue. Such a white node is called a root of the spider.

A v -spider is a spider rooted at a white node v . Each directed path from v to a leaf is called a leg. Note that all the nodes in each leg except v are either blue or black.
 Definition 4. Contracting Operation: Let U be a set of out-going neighbors of all the black and blue nodes in a v -spider. To contract a v -spider, for each white node u  X  U , create a directed edge ( v, u ) . We then delete all the black and blue nodes in the v -spider and color v blue.
 Figure 2 shows an example of a sp ider contracting operation.

To solve the DSMSN problem, we repeatedly find a v -spider such that this spider has a maximum number of black and blue nodes and then contract this spider. The detail of this algorithm is described in Algorithm 3.

The correctness of Algorithm 3 is obvious. Since this algorithm is a solution of the DSMSN problem, we are now ready to introduce the CDS-MSN algorithm. Algorithm 3 DSMSN(G, s, S) 4.1 Algorithm Description The CDS-MSN algorithm consists of two stages. Similar to the CDS-BFS algo-rithm, the CDS-MSN constructs the dominating set S using Algorithm 1 at the first stage. At the second stage, the DSMSN algorithm as shown in Algorithm 3 is deployed to find a strongly connected dominating set.

Choose s  X  S such that r s is the largest. Note that all the nodes in S except s are black and the other nodes in V are white. Similar to the CDS-BFS algorithm, we need to construct T f ( s )and T b ( s ). Let S = S  X  X  s } . T f ( s ) is constructed by calling algorithm DSMSN ( G, s, S ). Next, construct a graph G =( V, E ) such that an edge ( u, v )isin E if and only if the edge ( v, u )isin E .Thenwe call the algorithm DSMSN ( G ,s,S )toobtainatree T f ( s ). Then reverse all the edges in T f ( s ) back to their original directions, we have a tree T b ( s ). The union of these two trees is our solution to the SCDS problem. The main steps of the CDS-MSN algorithm are described in Algorithm 4. 4.2 Theoretical Analysis Lemma 3. Givenadirecteddiskgraph G =( V, E ) , for any arbitrary node v  X  V , we have | N + ( v )  X  S | X  (2 k +1) 2 where k = r max /r min . Algorithm 4 CDS-MSN Proof. Recall that N + ( v ) is a set of out-going neighbors of v and S is a dom-inating set of G .Let v be a node with the largest transmission range. From Lemma 1, we have d ( u, v )  X  r min where u, v  X  S . Hence the size of N + ( v )  X  S is bounded by the maximum number of disjoint disks with radius r min / 2packing in the disk centered at v with radius of r max + r min / 2. We have:
Let T  X  be an optimal tree when connecting a given set S and C ( T  X  )isthe number of the Steiner nodes in T  X  .Alsolet B be a set of blue nodes in T where T is the solution of the DSMSN problem obtained from Algorithm 3, we have the following lemma: Lemma 4. The size of B is at most (1 + 2 ln(2 k +1)) C ( T  X  ) Proof. Let n = | S | and p = | B | .Let G i be the graph G at the iteration i after a spider contracting operation. Let v i ,i =1 ...p be the blue nodes in the order of appearance in Algorithm 3 and let a i be the number of the black and blue nodes in G i .Alsolet C ( T  X  i ) be the optimal solution of G i .If n = 1, then the lemma is trivial. Assume that n  X  2, thus C ( T  X  )  X  1. Since at each iteration i ,wepicka white node v such that the v -spider has the maximum number of black and blue nodes, the number of black and blue nodes in v -spider must be at least a i C ( T  X  Thus we have:
Note that a p = 1 hence a p  X  C ( T  X  ). Also, initially, a 0 = n&gt;C ( T  X  ). Then there exists h, 1  X  h  X  p such that a h  X  C ( T  X  )and a h +1 &lt;C ( T  X  ). Thus we have:
The last step uses the fact that  X  ln(1  X  x )  X  x . Therefore,
The last step uses Lemma 3. We conclude that Theorem 2. The CDS-MNS algorithm produces a SCDS with size bounded by: Proof. Let C denote the SCDS obtained from the CDS-BFS algorithm. Let B T f and B T b bethebluenodesin T f ( s )and T b ( s ) respectively. From Lemma 3 and 4, we have: |
C | = | S | + | B T f | + | B T b | X  2 . 4( k + 1 Corollary 2. If the maximum and minimum transmission ranges are bounded, then the CDS-MSN algorithm has an approximation factor of O (1) . In this paper, we have studied the Strongly Connected Dominating Set (SCDS) problem in directed disk graphs where both unidirectional and bidirectional links are considered. The directed disk graphs can be used to model wireless sensor networks where nodes have different transmission ranges. We have proposed two approximation algorithms and shown that the obtained SCDS is within a constant factor of the optimal SCDS. The main approach in our algorithms is to construct a dominating set and then connect them. Through the theoretical analysis, we have shown that using a Steiner tree with the minimum number of Steiner nodes to interconnect the domin ating set can help to reduce the size of the SCDS.

In order for a node u to send data using the SCDS C , a node u is not only dominated by some nodes in C but also has an out-going neighbor in C .Thus we are interested to study this problem in the future.
