 The emergence of cloud-based storage services is opening up new avenues in data exchange and data dissemination. This has amplified the interest in right-protection mecha-nisms to establish ownership in case of data leakage. Cur-rent right-protection technologies, however, rarely provide strong guarantees on the dataset utility after the protection process. This work presents techniques that explicitly ad-dress this shortcoming and provably preserve the outcome of certain mining operations. In particular, we take special care to guarantee that the outcome of hierarchical clustering operations remains the same before and after right protec-tion. We encode data ownership using watermarking prin-ciples. In the process, we derive fundamental bounds on the distortion incurred by the watermarking. We leverage our theoretical analysis to design fast algorithms for right protection without exhaustively searching the vast design space.
 H.3.3 [ Information Search and Retrieval ]: Clustering Watermarking, Distortion Estimation
Data exchange and data sharing have become an inher-ent part of business and academic efforts. Both practices encourage scientific enquiry, ease validation of research ef-forts and maximize transparency. As such, data sharing and data publishing are recognized as important productiv-ity catalysts in diverse research efforts. To offer a concrete example, it is widely recognized that initiatives such as the human genome project [1] that advocated data sharing lead to  X  X apid scientific breakthroughs that otherwise would not have occurred X  1 . Recently, even fields that viewed data http://scientificdatasharing.com/about/ sharing through a negative prism (e.g., banking industry), have promoted the establishment of consortia to ease data exchange [6]. Owing to the high availability of cloud-based services in the near future, similar initiatives are projected to experience a surge in demand, as attested in many recent studies [11, 17, 10].

Data owners, nonetheless, need also maintain principal rights over the shared datasets, datasets which in many cases have been obtained after laborious procedures. This work presents a protection mechanism that can deliver detectable evidence on the legal ownership of a shared dataset, without compromising its usability for a class of mining operations. To achieve this, we guarantee that important distance-based relationships between the dataset objects remain unaltered.
We embed ownership evidence using watermarking tech-niques. Watermarking has emerged over the years as a suc-cessful method for establishing data progeny. It has been used extensively in many multimedia applications, on im-age, video, and audio data. Traditional watermarking tech-niques focus on a single data object and are not tailored for preserving relationships between multiple objects. In that sense, our technique augments and strengthens exist-ing watermarking methodologies. Our goal is two-fold: to guarantee right-protection and, at the same time, preserve the original relationships between the dataset objects. Hav-ing accomplished this, any learning or retrieval task that depends on the preserved structural properties will remain undistorted even after the watermark application.
In this work, we explicitly show how to preserve hierar-chical clustering (HC). HC is a popular knowledge extrac-tion tool, because it can visually communicate the similarity between objects and groups of objects. Because of its de-scriptive power and ease of implementation it is a valuable tool in many disciplines, including: Our objective is to maximize the knowledge we can gar-ner from the watermarked data. Here, we give provable guarantees of identical outcome for HC algorithms on the original and watermarked dataset. To achieve this we pro-vide a theoretical analysis of the distance distortion due to watermarking. We derive tight bounds on the expan-sion/contraction of distances caused by multiplicative wa-termarking techniques. We exploit these results to engineer fast watermarking variants that drastically prune the parameter search space, compared to the exhaustive algo-rithms.
Our goal is to discover how to right-protect a dataset so that the dendrogram resulting from the hierarchical cluster-ing after the right protection is isomorphic to the one on the original data (see Fig. 1). This translates into study-ing with what watermark intensity to protect the dataset so that important parts of the dataset graph are not dis-torted. We study how to achieve this goal for both single-and complete-linkage hierarchical clustering.
 Figure 1: Our goal is to guarantee  X  X somorphic X  den-drograms before and after right-protection
It is essential to discover the maximum watermark inten-sity for right protection. This provides assurances of bet-ter detectability and hence security for the right-protection scheme. Therefore, we first study how (Euclidean) distances between the objects are distorted as a parameter of the wa-termark embedding strength. This provides insight into de-signing fast variants of our algorithms that still guarantee hierarchical clustering preservation, but operate significantly faster than the exhaustive algorithms.

Our paper is structured as follows: First, we describe how right-protection can be materialized via a spread-spectrum watermarking approach. We also show how to detect the wa-termark. Subsequently, we study the distortion of distances due to watermarking. We describe single-and complete-linkage algorithms and the necessary conditions to preserve them post-watermarking. We provide a theorem that gives tight lower and upper bounds on the distance distortion. We use it to design faster HC-preservation algorithms that are based on the bounds derived. Finally, we provide a compre-hensive set of experiments, and we review the related work.
We describe first how watermarking mechanisms can em-bed a secret key (watermark) on a collection of objects. We demonstrate the techniques for 2D sequence data (image contours, trajectories, etc). We later demonstrate how to detect the watermark using a correlation filter.
Assume an object represented as a vector of complex num-bers x = { x 1 ,...,x n } ,where x k = a k + b k i ( i is the imagi-nary unit, i 2 =  X  1), and where the real and imaginary parts, a k and b k respectively, describe the coordinates of the k -th point of object x on the imaginary plain. Such a model can describe data trajectories or even image contour data which capture coordinates of a shape perimeter, as shown later in Figure 10.

We adapt a spread-spectrum approach [7]. This embeds the watermark across multiple frequencies of each object and across multiple objects of the dataset. As such, it renders the removal of the watermark particularly difficult without substantially compromising the data utility. An object x is mapped into the frequency domain using its complex Fourier descriptors X = { X 1 ,...,X n } . The mapping from the space domain to the frequency domain is described by the normal-ized discrete Fourier transform, DF T ( x ), and its inverse, IDFT ( X ). Every coefficient X j can be expressed as a func-tion of its magnitude  X  j and phase  X  j as X j =  X  j e  X  j watermark constitutes a piece of secret information to be hidden inside each sequence. In our approach, we consider the watermark to be a vector W  X  X  X  1 , 0 , +1 } n ,whichis embedded in all objects of the dataset.

Definition 3.1. (Watermark Embedding ( W, p )) Given are a sequence x  X  C n with corresponding set of Fourier descriptors X ,awatermark W  X  R n and power p  X  [0 , 1] , which specifies the intensity of the watermark. A multi-plicative watermark embedding ( W, p ) generates a wa-termarked sequence x by replacing the magnitudes of each Fourier descriptor of x with a watermarked magnitude  X  j while not altering the phases, specifically:
Using the modified magnitudes  X  j and the original phases  X  , we can revert from the frequency domain to the space do-main and obtain the watermarked sequence using the inverse discrete Fourier transform. An overview of the methodology described is given in Fig. 2.
 Figure 2: Overview of the right-protection process.
The robustness of the watermark embedding depends on the choice of coefficients. We embed the watermark in the coefficients that exhibit, on average over the dataset, the largest Fourier magnitudes. This makes the removal of the watermark difficult; masking it out (e.g. by noise addition) would mean that important frequencies of the dataset will be distorted. This would diminish the dataset utility. Fig. 3 shows the reconstruction of a shape from a dataset when approximated using the highest-energy coefficients. It is ap-parent that the high-energy coefficients capture important characteristics of the dataset. Figure 3: Object reconstruction for different num-ber of Fourier coefficients that contain the highest energy.
 Watermark Choice: Given dataset D and an even integer 2  X  l  X  n , we focus on the following class of watermarks:
Definition 3.2. (Class of watermarks W l ( D ) with l non-zero elements, compatible with dataset D )The class of wa-termarks with l non-zero elements, compatible with dataset D , denoted by W l ( D ) ,isthesetofall W  X  X  X  1 , 0 , +1 } n that satisfy: as well as n j =1 W j =0 .

Note that in the above definition we do not embed any part of the watermark in the first Fourier descriptor, X 1 (also called the DC component), but leave it intact. The DC component captures the center of mass of object x and is therefore highly susceptible to translational attacks. For example, if a part of the watermark were embedded on the DC component of an object then a simple translation would shift the center of mass of the object, thus rendering this part of the watermark useless without affecting the general shape of the object at all.

In summary, we embed the watermark in the magnitudes of the Fourier descriptors and leave the phases unchanged; we leave the DC component intact, and we watermark the Fourier descriptors with the largest average magnitudes. Resilience to transformations: By construction, our right-protection mechanism provides resilience to geomet-ric data transformations, such as rotation, translation, and scaling. Global object rotation is an intelligent attack be-cause it distorts all coordinates of the objects, but pairwise distances remain the same. However, rotation in the fre-quency domain affects only the phases but not the magni-tudes. Our watermark being embedded in the magnitude space will remain unaffected. Similarly, global translation of all objects only distorts the DC component, in which no part of the watermark was embedded. Scaling attacks can be addressed simply by normalizing all objects/sequences appropriately before watermark detection.
We measure the probability of existence of a watermark by evaluating the correlation between a tested watermark and the right-protected dataset. Measuring directly the correla-tion between the watermark and the magnitudes of Fourier descriptors may prove ineffective. The reason being that the original level of the average of magnitudes acts as back-ground noise, masking the embedded watermark we seek to detect. We address this issue by explicitly recording the bias of average magnitudes before embedding the water-mark, and removing it before the detection. We also record this bias vector along with the watermark W , and both are used jointly as the key.

For a dataset D = { x (1) ,...,x ( |D| ) } , we denote as  X  the magnitude of the j th Fourier descriptor of object x ( i ) before watermarking. The average of the magnitudes of the j th Fourier descriptor across all objects in D ,denotedas  X  ( D ), is given by
We measure the correlation between a watermarked dataset D and watermark W as follows: where the division is element-wise , excluding elements where  X  ( D ) = 0. In other words, we remove the bias of average magnitudes before computing the correlation. The scheme enables a very effective detection of the watermark. We show briefly why; after elementary algebraic calculations, the correlation between a dataset watermarked with W and any other watermark W is reduced to: The quantity is maximized for W = W , giving  X  ( W , D )= pl . So, for any W = W ,  X  ( W , D ) &lt; X  ( W, D ).
Recall that  X  ( D ) is part of the watermark (key). This results in a very secure protocol. The reason being that a malicious attacker may try to discover the embedded key by probing different watermarks. However, the correlation depends on the vector  X  ( D ), which the attacker has no way of knowing without access to the non-watermarked data.
Hierarchical clustering (HC) builds a nested hierarchy of groups of objects according to a given distance function. This nested hierarchy is called a dendrogram (see Fig. 1). A popular method of building a dendrogram is to use an ag-glomerative  X  X ottom-up X  approach: each data point starts in its own cluster, and pairs of clusters are merged itera-tively until a single cluster remains. There exist different functions for evaluating the distance between clusters, lead-ing to many variants of HC approaches, such as single-or complete linkage. We explain these in detail later on, and also show how to preserve them post-watermarking.
Our right-protection scheme operates in such a way that important object distances are preserved, leading to iden-tical clustering structure irrespective of whether the data contains a watermark or not. It is important to strike a bal-ance between security, i.e. detectability of the watermark, visual distortion of objects, and correctness of the cluster-ing. Therefore, we seek to find the maximum embedding power p  X  that does not distort the original dendrogram of the objects.

In certain cases, it may be possible to embed a watermark with high intensity and still maintain the dendrogram struc-ture. This however, may lead to a visible distortion in an object X  X  shape. Fig. 4 depicts how an object is distorted for increasingly larger watermark embedding powers. There-fore, in practice, we set an upper limit on the maximum allowed power, i.e., p  X   X  [ p min ,p max ]. In our experiments we used p max =0 . 01, therefore we allow up to 1% relative distortion. This assures that objects before and after water-marking will look virtually the same. Figure 4: One object from a handwritten dataset ( hand dataset) for different embedding powers of the watermark. Left: original object ( p =0 ). Middle: object distortion for p =0 . 01 . Right: object is more visibly distorted when the watermark is embedded with p =0 . 05 , corresponding to a 5% relative distor-tion.
 Here, we study HC-preservation approaches that use the Euclidean distance between objects. We can also view pair-wise relationships between objects as the edges of a complete graph. On this graph each edge e =( x, y ) connecting two objects x, y has weight (or length) equal to their distance D ( x, y ). After right-protection, the edges of the dataset graph may change, because the new distance of objects x, y watermarked with power p will be D p ( x, y ). We want to ensure that important parts of the graph remain the same.
Note, also, that the function D p ( x, y )= n j =1 (1 + pW j )( X j  X  Y j ) 2 is a parabola with respect to the em-bedding power p (see Figure 7 for an example). We use this important observation to discover the appropriate lower or upper envelope of the parabolas, when we deal with single-or complete-linkage, respectively. More details on this will be provided later.

The next three definitions formalize the goal of hierarchi-cal clustering preservation.

Definition 4.1. (Dendrogram) A dendrogram over (
D ,D ) is a triplet ( T,M,l )where T is a binary rooted tree, M : leaves ( T )  X  X  is a bijection, and l : V ( T )  X  X  0 ,...,h (for some integer h  X  0 ) such that (i) for every leaf node u  X  V ( T ) ,l ( u )=0 and (ii) if ( u, v )  X  E ( T ) then l ( u ) &gt;l ( v ) .

Definition 4.2. (Isomorphic Dendrograms) Dendro-grams ( T 0 ,M 0 ,l 0 ) and ( T 1 ,M 1 ,l 1 ) are (order) isomorphic, if there exists a graph isomorphism  X  : V ( T 0 )  X  V ( T between the two trees T 0 and T 1 , such that  X  v, u  X  V ( T l ( u ) &lt;l 0 ( v )  X  l 1 (  X  ( u )) &lt;l 1 (  X  ( v )) . Definition 4.3. (Hierarchical Clustering Preservation Problem) Given a set of objects D and a range of feasible powers [ p min ,p max ] , find the maximal embedding power p such that the dendrograms computed on D and D are iso-morphic.
Single-linkage hierarchical clustering operates as follows: initially each object belongs to its own cluster. The two clus-ters with the smallest distance are merged and the distances of the newly formed cluster to the old ones are updated. The process is repeated until only one cluster remains. The link-age function L that evaluates the distance between two clus-ters C 0 and C 1 is given by L ( C 0 ,C 1 ):=min D ( u, v ), where u  X  C 0 ,v  X  C 1 . Algorithm 1 gives a high-level description of the process. Note, that the naive algorithm requires O ( n runtime, given n objects. More efficient algorithms exist in the literature that leverage additional data structures, such as priority queues or data structures for finding the next-best-match . These effectively reduce the runtime to O ( n One such algorithm is SLINK [22].
 Algorithm 1 Single-Linkage Algorithm 1: INPUTS: dataset D 2: OUTPUT: Clustering C ( i ) , i  X  [1 , |D| ] 7: end for
To guarantee that the dataset after watermarking yields the same dendrogram, we ensure that all mergers between clusters are the same, and that they are also executed in the same order. However, it is not important which objects be-tween the clusters lead to the merger (i.e., which edge on the distance graph is shortest), as long as the same clusters are merged for both watermarked objects and non-watermarked objects. We wish to ensure that for every feasible watermark embedding power p the shortest edge is an edge between the two merged clusters and not between any other two clus-ters. Formally, if C m 1 and C m 2 are the clusters merged in the current step then:
To get the feasible powers p for a merger M ( i ), defined by inequality (3), one must determine for every p  X  [ p min ,p whether the shortest distance is between the two merged clusters C m 1 and C m 2 or between any other two clusters. This is illustrated in Fig. 5. The two solid lines originating from C represent graph edges between the two clusters. The three dashed lines from D correspond to all graph edges in between any other two clusters. In terms of inequality (3), the solid edges belong to the left-hand side and the dashed edges to the right-hand side of the inequality.

Therefore, to discover the proper power p , we consider each edge e =( x, y ) on the distance graph and find the ranges of power p where the examined parabola D p ( e )is smaller than all other relevant parabolas. All power ranges for which the current edge is not the smallest should be eliminated (see Fig. 6), because otherwise the dendrogram mergers will not happen in the same order.

Analytically, this boils down to finding the lower envelope of a set of parabolas. The lower envelope EN l (see Figure dendrogram on original data dendrogram on watermarked data Figure 5: All relevant distances when computing the feasible powers to ensure the merger of clusters {
A, B } and C . 7) corresponds to a sequence of interleaving edges e of min-imum distance and intersection points of the feasible pow-ers p , i.e., EN l =( p 0 = p min ,e 0 ,p 1 ,e 1 ,p 2 ,e 2 where p i  X  [ p min ,p max ] is an intersection point of e e rate lower envelope for all constraints on the left-hand side and right-hand side of inequality (3) and then compare the two envelopes to determine the feasible powers for a merger M ( i ). It is somewhat simpler to just build a single parabola containing all parabolas from the left-and right-hand side of inequality (3). This is essentially what our Algorithm 2 does. We can achieve that very efficiently using the algo-rithm presented in [9] to compute the compound envelope.
Di st ance Figure 6: The feasible range of powers guaranteeing a merger of the two clusters { A, B } and C in Figure 5. The edges between the merged clusters are given by solid lines. All other edges are shown as dashed lines. For single-linkage clustering, an embedding power will be feasible if the shortest edge between two merged clusters is smaller than any other edge between any two other clusters.
 More precisely, we iteratively compute a new envelope EN l using all edges E in the prior envelope except the edges E (line 8) that are between the previously merged clusters C m 1 and C m 2 . We go through all mergers (see line 5) in ascending order, i.e., let M ( i )= { C m 1 ,C m 2 } merger currently considered. We compute the lower enve-lope EN l according to [9] (line 9). Then we consider all edges e  X  E that have been added to EN l (line 10). If an edge e is not in the envelope then there are edges of smaller distance for every power p  X  [ p min ,p max ]. Thus, edge e has no influence on the feasible powers. It no longer has to be considered. If edge e is part of EN l ,say e corresponds to edge e j  X  EN , then the range of powers [ p j ,p j +1 ]isfea-sible. This range [ p j ,p j +1 ] is added to the set of feasible power ranges pRanges ( M ( i )). At the end of the algorithm (line 15), we compute the intersection of all pRanges ( M ( i )) to determine the maximum power p  X  that yields the same mergers for watermarked and non-watermarked data.
Distance Figure 7: Dashed line shows the distance function D ( x, y ) for an edge e =( x, y ) . The solid line cor-responds to the lower envelope, i.e., the minimum distance for every power p for a set of edges, e.g., between two clusters. For single-linkage clustering only the minimum distance is relevant.
 Algorithm 2 Single-Linkage Preservation Algorithm 2: OUTPUT: p  X  5: for i =1  X  X D| X  1 do 12: end for 14: end for Complexity : Construction of the Single-Linkage Dendro-gram requires O ( |D| 2 ) time [22]. Computation of the lower envelope using O( |D| 2 ) elements takes O( |D| 2 log |D| ing [9]. When computing the lower envelope EN l ,webe-come immediately see which edges e  X  E are added between merged clusters, i.e. the intersection edges E  X  EN l (line 10) does not add to the time complexity. Combining this, the outer for loop (line 5) takes time O( |D| 3 log |D| ). Com-puting the intersections of feasible powers pRanges ( M ( i )) of individual mergers takes time O( |D| 2 log |D| ): There are in total (for all M ( i ) together) at most as many edges as intervals of feasible powers [ p j ,p j +1 ], i.e., O( |D| 2 ing the power intervals in each pRanges ( M ( i )) according to the left end point and merging the different sorted intervals pRanges ( M ( i )) yields the time complexity.
Just like single-linkage, complete-linkage hierarchical clus-tering merges two clusters according to a different linkage function L . The distance L between two clusters of nodes C 0 and C 1 is given by the maximal distance of a pair of nodes in distinct clusters, i.e. L ( C 0 ,C 1 ):=max x  X  C 0 ,y  X  C Therefore, we are not interested in the edges of smallest dis-tance between clusters but in edges of maximum distance. This changes the (number of) relevant constraints signifi-cantly. Instead of a single constraint for each merger, a constraint for every pair of clusters is required. We define M ( i ), C ( i ), EN in the same way as in the previous section.
Algorithm 3 for complete-linkage clustering preservation is more involved than Algorithm 2 for single-linkage. We have to deal with the min-max relationship due to the complete linkage criterion expressed in Inequalities (4), i.e., merge the two clusters with minimum maximum distance of two nodes. This requires to maintain a set of upper envelopes EN u , i.e. for each pair of clusters C 1 ,C 2  X  X  there is an envelope EN u ( C 1 ,C 2 )  X  X N u . To get the minimal maximum dis-tance, we compute a lower envelope EN l for the edges in the upper envelopes. Figure 8: Preservation of complete-linkage den-drogram by watermarking (largest possible power p =0 . 0221 ).
 An overview of the process is given in Algorithm 3. Initially, a clustering of non-watermarked objects is com-puted using the CLINK algorithm [8]. We maintain a set of upper envelopes for any pair of clusters, i.e., EN u := {
EN u ( C 1 ,C 2 ) | C 1 ,C 2  X  X } . Computing the upper and lower envelope are equivalent problems, thus we can use [9] for lower envelopes with some adjustments 2 . Originally, when each object is a cluster, the upper envelope between two clusters is given by the edge between the two objects (line 4 of Algorithm 3). To get all feasible powers for merger e.g. in [9] Section 4, replace the lower envelope function F ( x )=min i  X  n p i ( x )by F ( x )=max i  X  n p i ( x ). In Lemma 5 use F i +1 ( x )=max( p i +1 ( x ) ,F i ( x )) M ( i )= { C m 1 ,C m 2 } we compute a lower envelope EN l sisting of the union of all edges contained in any upper en-velopes EN u ( C 1 ,C 2 )ofanypair C 1 ,C 2  X  X  . For any edge e between the merged clusters { C m 1 ,C m 2 } that is also in the lower envelope EN l (line 12) we add the power range [ p ,p j +1 ] for which edge e j is smallest to the feasible pow-ers pRanges ( M ( i )). After a merger M ( i )= { C m 1 all upper envelopes between pairs containing either C m 1 C m 2 must be adjusted to keep EN u up-to-date. We delete all upper envelopes of pairs involving any of two merged clusters C m 1 or C m 2 from EN u . Then a new upper enve-lope EN u ( C m 1  X  C m 2 ,C )foreach C  X  X  ( i ) \{ C m 1 added to EN u . After having gone through all mergers i in ascending order, we finally compute the intersection of all pRanges ( M ( i )) giving the maximum power p  X  . Algorithm 3 Complete-Linkage Preservation Algorithm 2: OUTPUT: p  X  6: for i =1  X  ( |D| X  1) do 9: /* X  Compute feasible powers pRanges ( M ( i ))  X */ 10: Compute lower envelope EN l consisting of all edges in the 14: end for 15: /* X  Update upper envelopes EN u  X */ 19: end for 20: end for Complexity : Construction of the Complete-Linkage Den-drogram requires O ( |D| 2 ) time [8]. Computation of the lower envelope EN l using [9] (line 10) takes O ( |D| 2 log |D| adding an edge e  X  E to envelope EN l , we become imme-diately aware whether the edge becomes part of EN l (or is too large for all powers). Thus determining the edges between merged clusters that are part of the lower enve-lope, i.e. E  X  EN l , (line 12) causes no costs. In iteration i of the for-loop (line 6) there are |D| X  i clusters remain-ing. Computing the upper envelopes EN u requires delet-ing O ( |D| ) envelopes and adding at most O ( |D| ) upper en-velopes. More precisely, the number of edges within upper envelope EN u ( C m 1  X  C m 2 ,C )with C  X  X \{ C m 1 ,C m 2 given by | C m 1  X  C m 2 || C | . Thus the total number is given by |
C m 1  X  C m 2 | C  X  X  | C | . Each object is in exactly one cluster, |
C m 1  X  C m 2 ||D| X |D| 2 . The algorithm in [9] runs in O( |D| 2 log |D| ). Therefore the running time of the for-loop (line 6) is bounded by O ( |D| 3 log |D| ). Computing the in-tersections of feasible powers pRanges ( M ( i )) of individual mergers takes time O( |D| 2 log |D| ) as for Algorithm 2.
Here we derive faster variants of the previous HC-preservation algorithms. They are based on a study of the distance distortion due to the multiplicative watermarking. Theorem 5.1. For any two watermarked objects x, y  X  D , their Euclidean distance denoted as D p ( x, y ) is lower and upper bounded by the Euclidean distance of the non-watermarked objects x, y  X  X  as follows: The proof can be found in the Appendix. Fig. 9 illustrates it.
 Figure 9: Two objects cannot get arbitrarily close or arbitrarily far after the watermark embedding. In this figure we represent objects as points for presen-tational purposes. To better illustrate the distortion bounds, objects x, y are globally translated so that x and x coincide.

We can exploit Theorem 5.1 to prune the search space while preserving the clustering structure. Namely, if for two edges e and e we know that the upper bound for one of them is lower than the lower bound for the other, then those two edges will not intersect. Therefore, if for edges e and e holds that: then using Theorem 5.1 we can be sure that edge e will be shorter than e (or e shorter than e , respectively) for any feasible power p  X  [0 ,p max ]. Thus, there is no need to search for their intersection. After adding an edge e to the lower envelope in Algorithm [9] (line 9 of Algorithm 2) we can therefore avoid computing the intersection of edges e and e to update the envelope, i.e. figure out which edges to remove from the envelope due to the addition of e . Indeed, the algorithm can avoid the computation for e and e if: thus affecting significantly the number of quadratic inequal-ities to be solved.

In the experimental section that follows, we show that the use of lower-and upper-bounds on the watermarked distance can lead to reduction of the search space that ranges from one (1) to three (3) orders of magnitude.
In this section, we evaluate the presented schemes. First, we verify that our right-protection methodology discovers the maximum watermarking power that correctly preserves the original dendrogram. Then, we compare the fast algo-rithms proposed in Section 5 to their exhaustive counter-parts cf. Section 4, in terms of number of operations. We report major speed-ups. Finally, we assess the resilience of our scheme against a broad range of potential attacks: geo-metric distortions, resampling, etc.
 Figure 10: Image shapes can also be treated as two-dimensional sequences by extracting the perimeter of a shape.

We test our methods on datasets from various application areas: mobility data (taxi trajectories in Beijing [32, 33] and San Francisco [21]), financial data (stock prices in the NASDAQ stock market), video-tracking data, handwritten data, and image contour data from anthropology and nat-ural sciences (the latter datasets were obtained from [15]). The characteristics of our datasets are summarized in Ta-ble 1. All experiments have been executed on a 2.16GHz Intel CPU with 3GB RAM.

Here we evaluate whether the single-and complete-linkage preservation algorithms discover the correct embed-ding power for the watermark so the dendrograms both on the original and the watermarked data remain isomorphic. This means that both the tree structure and the order of the merger points M ( i ) are the same. A sample compar-ison of a dendrogram resulting from the complete linkage procedure of the original data and of the watermarked data was presented in Figure 8. In Figure 11 we show the dis-tortion of the dendrogram that occurs when a watermark is embedded with power p&gt;p  X  . Indeed, even a slightly increased value of the power results in alterations in the re-sulting dendrogram. We report the maximal power p  X  that the algorithms returned which resulted in all cases in total dendrogram preservation. The same maximal embedding power was returned by both exhaustive and fast variants of the algorithms. Table 2 summarizes our findings. Figure 11: Dendrogram portion for the skulls dataset. Left: dendrogram for maximum discov-ered p  X  =0 . 0221 is same as original. Right: for even slightly larger p =0 . 0222 the dendrogram changes. Table 2: Maximal watermarking power p  X  and the percentage of dendrogram preservation.
Now we compare the efficiency of the fast dendrogram preservation algorithms. With the use of the lower-and upper-bounds on the distance distortion, the fast variants can eliminate many pairs of objects from examination. This reduction leads to solving fewer quadratic inequalities in the progress of the algorithm. We record exactly how many quadratic inequalities we need to solve with each algorithm. Note, that this is also a CPU-agnostic measure and therefore does not depend on any runtime optimization.

Table 3 summarizes the results of single-linkage preserva-tion. The pruning efficiency is reported as the ratio of the number of inequalities solved by the exhaustive algorithms, compared to the fast algorithms. The use of the bounds on the distance distortion (Section 5) results in considerable speedup in terms of solved inequalities; up to 3 orders of magnitude. Table 4 reports the results of the same experi-ment for the case of complete-linkage preservation. Table 3: Number of quadratic inequalities solved for different datasets, single linkage ( p min =0 , p max = 0 . 01 ).

Dataset Complete-L Fast Complete-L Pruning nasdaq 21,187,434 36,280 584  X  taxiSF 28,667,907 91,039 315  X  taxiBeijing 322,436,544 393,970 818  X  skulls 770 14 55  X  fish 2,618,789 9,552 274  X  video1 646 29 22  X  video2 2,260 54 42  X  hand 126,953 1,113 114  X  Table 4: Number of quadratic inequalities solved for different datasets, complete linkage ( p min =0 , p max =0 . 01 ).
Here, we test the resiliency to potential attacks of the right-protection scheme . We right protect the dataset by inserting a watermark with the maximum allowed embed-ding power that preserves the dendrogram (we test on the power that preserves single-linkage clustering). We mea-sure how detectable is the embedded watermark under a series of attacks: addition of Gaussian noise in the space and in the frequency domain, up-and down-sampling, and geometric transformations (rotation, translation, scaling). Fig. 12 depicts the ROC curves representing true-versus false-positives rates. We also report the performance of a random baseline, that randomly classifies the dataset as hav-ing or not having the watermark embedded. Due to lack of space, we only report ROC curves for four datasets. How-ever, the results for the remaining ones were very similar.
We observe that our detection method works very effec-tively. It is more than 4 orders of magnitude more effective than the random baseline. In addition, the graphs exhibit a large area under-the-curve, suggesting high detectability and therefore high resilience to attacks.
Watermarking is a steganographic technique used for es-tablishing the ownership, with many applications in multi-media datasets [7], such as images [18], vector graphics [19], audio [4, 27] and video [24, 34]. Multimedia watermarking focuses on the protection of a single object whilst minimiz-ing visual/audible distortions of the data. In contrast, our setting operates on a collection of objects and at the same time accounts for preservation of distance relations between objects. More importantly, our scenario incorporates addi-tional constraints in the form of guaranteeing identical out-puts, after watermarking, for a class of mining and learning algorithms based on hierarchical clustering.

Privacy-preserving techniques are also related to our work, because they also alter data but enforce different constraints. To achieve privacy-preservation two research paths are typ-ically followed: a) protection through data alteration or masking, and b) protection through dataset partition. Data alteration can be achieved via noise addition [14, 13], con-densation [2] or data transformation [5, 20]. Similar no-tions have also been used for watermarking databases [3, 25]. Contrary to the above approaches, we do not attempt to reconstruct the original data distribution but work directly on the perturbed data, while guaranteeing preservation of distance properties on them.
Privacy-protection via dataset partition is achieved using horizontal or vertical data partitioning [29, 12, 30, 31]. Dif-ferent portions of the data are distributed to different sites, and data exchange without leakage of private information becomes possible through cryptographic techniques (multi-party computation). The techniques in our approach are fundamentally different; the dataset is not dissected in por-tions, but is distributed as a whole.

Of relevance is also the work on watermarking stream-ing time-series [26]. Differently from our approach, they examine watermarking on a single numerical sequence, as opposed to considering a collection of sequences. We also aim at maintaining the original pairwise relationships and we consider resilience even under geometric data transfor-mations (rotations, etc).

In summary, our setting presents additional challenges compared to traditional watermarking or privacy preserva-tion techniques, because not only do we work directly on the perturbed data, but more importantly, we provide provable guarantees on preservation of distance properties. A right-protection scheme based on watermarking principles that preserved the Nearest Neighbor of objects was presented in [15]. We adopt the watermarking model of that work, but here we study the more elaborate case of hierarchical clustering preservation. In addition, we provide a thorough theoretical analysis on the distance distortion under a multi-plicative watermarking process. We leverage the theoretical analysis, first presented in this work, to obtain fast versions of the exhaustive algorithms that we put forward, and we demonstrate substantial speed-up in all experiments, with-out any sacrifice in accuracy.
Right protection of a dataset presents an inherent engi-neering tradeoff: the protection should be strong enough to offer robustness of detection, but at the same time not so dominant to destroy the utility of the dataset for subse-quent mining operations. We propose a watermarking tech-nique that identifies an optimal compromise between the two conflicting factors. We design algorithms that find the maximum embedding power that guarantees preservation of hierarchical clustering operations on the modified dataset. The fast variants that we put forward can reduce the search space by more than 3000 times compared to the exhaustive algorithms, with no sacrifice in accuracy. Our analysis is generic and delivers great promise for a broader applicability for an extended class of distance-based mining operations, such as anomaly detection, classification and visualization. [1] The Human Genome Project. In U.S. National [2] C. C. Aggarwal and P. S. Yu. A condensation [3] R. Agrawal and J. Kiernan. Watermarking relational [4] P. Bassia and I. Pitas. Robust audio watermarking in [5] K. Chen and L. Liu. Privacy preserving data [6] E. Cope and G. Antonini. Observed correlations and [7] I. J. Cox, J. Kilian, F. T. Leighton, and T. Shamoon. [8] D. Defays. An efficient algorithm for a complete link [9] O. Devillers and M. J. Golin. Incremental algorithms [10] I. M. Faniel and A. Zimmerman. Beyond the Data [11] R.Geambasu,S.D.Gribble,andH.M.Levy.
 [12] G. Jagannathan, K. Pillaipakkamnatt, and R. N. [13] H. Kargupta, S. Datta, Q. Wang, and K. Sivakumar. [14] L. Liu, M. Kantarcioglu, and B. Thuraisingham. The [15] C. Lucchese, M. Vlachos, D. Rajan, and P. S. Yu. [16] W. Ludwig and H.-P. Klenk. Overview: A [17] M. C. Mont, I. Matteucci, M. Petrocchi, and M. L. [18] P. Moulin, M. E. Mihcak, and G.-I. Lin. An [19] X. Niu, C. Shao, and X. Wang. A survey of digital [20] S. Oliveira and O. Zaiane. Privacy preserving [21] M. Piorkowski, N. Sarafijanovoc-Djukic, and [22] R. Sibson. Slink: An optimally efficient algorithm for [23] J. V. Sickle. Using Mean Similarity Dendrograms to [24] D. Simitopoulos, S. A. Tsaftaris, N. V. Boulgouris, [25] R. Sion, M. Atallah, and S. Prabhakar. Rights [26] R. Sion, M. J. Atallah, and S. Prabhakar. Rights [27] M. D. Swanson, B. Zhu, A. H. Tewfik, and L. Boney. [28] A. Z. V. Zabkar. Application of End-Users Market [29] J. Vaidya and C. Clifton. Privacy-preserving k-means [30] H. Yu, X. Jiang, and J. Vaidya. Privacy-preserving [31] H. Yu, J. Vaidya, and X. Jiang. Privacy-preserving [32] J. Yuan, Y. Zheng, X. Xie, and G. Sun. Driving with [33] J. Yuan, Y. Zheng, C. Zhang, W. Xie, X. Xie, G. Sun, [34] W. Zhu, Z. Xiong, and Y.-Q. Zhang. Multiresolution
D 2 p ( x, y )= x  X  y 2 = X  X  Y 2 =  X  (1  X  p ) 2 X  X  Y 2  X  D 2 p ( x, y )  X  (1 + p ) 2 X  X  Y 2
