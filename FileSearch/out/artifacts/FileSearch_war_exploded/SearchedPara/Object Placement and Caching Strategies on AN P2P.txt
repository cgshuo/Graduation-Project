 In recent years, the peer-to-peer (P2P) systems have witnessed more heterogeneous presentation requirements than before because of the emergence of diverse devices. However, legacy P2P file sharing facilities [5,6,11,16,17] cannot deal with these requirements effectively without necessary system support to content adaptation and service customization. For instance, a PC based peer shared a piece of high quality media content. However, a smart phone based peer cannot render this content unless it is adapted to a lower quality version. This necessitates the architectural change in tandem. 
Our previous work [20] on Application Networking (App.Net) was to implement pervasive content delivery for heterogeneous requirements. Its key idea was rooted from the observation that despite the heterogeneous requirements for object presentations, the processes to generate the presentations are homogeneous. In general, the App.Net enables the delivery of content X  X  original or intermediate object with an associated workflow. The recipient node can thus reuse these objects to particular, our work [21] on AN.P2P attempted to apply the Application Networking mechanism onto the P2P file sharing systems. We have shown that the AN.P2P could help to reduce the average search size because of the reuse of original object and the associated workflow. 
However, integrating the Application Networking mechanism into a practical P2P optimization, service security, application reuse, and so on. The work of this paper focused on improving overall performance on AN.P2P through dedicated object placement methods and the revised caching strategies. In particular, we proposed two placement schemes to populate objects an d their associated workflow, in order to improve the query efficiency and to reduce the mean retrieval delay. Our simulation showed that these methods could help to improve the overall system performance. In general, the Application Networking mechanism [20] allows the content provider associate a piece of content adaptation logic to the published content. Instead of workflow composed by multiple tasks, each of which can be instantiated by an application module. We have defined a standard interface, called ANlet, for mobile applications. Given application modules that implement the ANlet interface, the Application Networking nodes can dynamically load them locally and remotely. In particular, we defined a callback function in ANlet, as given by equation (1). 
The function has two input parameters: the query message and available content object. The query message contains the presentation profile of the client and AppNetContent contains both the content object and the attributes of the object. Therefore, the ANlet can generate the appropriated output ANP2PContent according to the input parameters. 
Hence, if we input the original object to a workflow, it can output the final presentation of the input object by performing the adaptation tasks. In particular, we believe the workflow structure can facilitate the progressive application deployment in that the fundamental applications are loaded first, while the remaining ones are loaded later on demand. Moreover, the workflow can get the intermediate objects of the original object. Our simulation results will show that caching these intermediate objects can help to reduce the average computation time by avoiding repeated content adaptation. 
Upon receiving a request, the content host can send the original or intermediate object and the associated workflow to the requestor. The recipient can thus reuse the retrieved object to generate appropriate content presentations by performing the workflow associated with the response object. In addition, a workflow normally specifies a list of URLs, which can provide the relevant application modules. In case of no available local application module to instantiate a task, the node can download a mobile application from remote site according the URL specified by the workflow. Due to dynamic application loading, we can achieve reasonable system scalability in the open Internet environment. In particular, our recent work on AN.P2P [21] implemented an Application Networking platform on P2P networks. The AN.P2P can reside on any P2P substrate and is not mandatory to install on each peer within the network. When an AN.P2P peer serves an ordinary peer, it will send a particular presentation of the content as if the AN.P2P is transparent to the ordinary peers. In contrast, when an AN.P2P peer serves another AN.P2P peer, it can send either the original object and the workflow or a final presentation. We believe this back compatibility feature could ease the adoption of AN.P2P into existed P2P networks. 
Our preliminary simulation results have shown that using AN.P2P, we can achieve better system performance in terms of query hops and response transmission cost. It suggested that the AN.P2P has the potential benefits to deliver content in P2P networks with heterogeneous presentation requirements. 
However, to derive a feasible AN.P2P infrastructure, we need to consider more aspects, such as the effects of different object placement methods, the cost of content adaptation, the trade-off between the computation delay and the transmission delay. These gaps motivated the study of this paper. Generally, the AN.P2P aims to improve the overall system performance by placing the replica of objects and their workflow within the network. We defined two object placement schemes in the AN.P2P, as shown in figure 1. 
In this paper, we call the peer that publishes the content as the home peer (e.g. P 3 in forward the query as the intermediate peers (e.g. P 1 and P 2 ), and the peer that serves user X  X  presentation profile into the query message when it issues a query. 
The caching scheme piggybacks the placement instruction within the response message, as shown in figure 1(a). Upon receiving a query message, the home peer can send either the final presentation of the queried content or its original object and the associated workflow to the requesting peer using a response message. The decision is made according to specific system policy. 
After receiving the response message, the requesting peer will treat the response the response message. Then the requesting peer will render it to the user directly. 
However, if the requesting peer detects there is a workflow within the response message, it will attempt to instantiate the workflow by downloading relevant ANlet modules. After that, the requesting peer feeds the received object to the workflow tasks, which will generate the appropriate content presentation according to the user profile in the query message. At the same time, the requesting peer will store the response message and the downloaded ANlets in its local cache. When it receives a peer, the intermediate peer can either send the final presentation or the original object and the workflow to the new requesting peer. 
In contrast, the replication scheme performs content placement using a dedicated replication message, as shown in figure 1(b). Upon receiving a query message, the home peer generates the final presentation of the queried content according to the user requesting peer directly using a response message. 
At the same time, the home peer can select a particular intermediate peer and send message, the intermediate peer will store it in its local cache. When this peer receives a new query for the same content, it will load the cached object, instantiate the associated workflow using the downloaded ANlets, and generate the final presentation to the new reques ting peer. Similarly, this peer can select another peer to replicate the object and workflow. 
In summary, the replication scheme enables the AN.P2P to select an optimal peer to place the replica at the cost of dedicated replication message. On the other side, the forfeit of selective content placement. 
In practice, the caching scheme and the replication scheme can coexist with each other. However, our later simulation will evaluate them separately to study their respective effect to the overall system performance. 
In our simulation based on Pastry, the target peer will attempt to replicate the object to the intermediate peer at the previous hop of the current query path. Our simulation results will show that this last-hop replication strategy is much more efficient than a random placement on the structured P2P networks, such as Pastry, Chord and DKS. Figure 2 shows the general architecture of an AN.P2P peer. The user interacts with a provide the user presentation profile to the back-end AN.P2P platform. The profile is techniques, such as CC/PP [4], to specify the user profile. 
The AN.P2P platform resides between the software utility and the P2P network. It issues queries according to the user action, forwards bypassing messages, receives responded or replicated objects, and delivers the retrieved content to the software utility. 
In particular, each AN.P2P maintains a local cache to store the response message or the replication message. We have designed an XML format to encapsulate both the content object and the workflow specification into a single message. 
In AN.P2P cache, the content id is not sufficient to identify a cached item since multiple versions of the same content may coexist. Hence, we use the union of specified as a name and value pair. query message against the corresponding attribute entry of the cached item. If all entries are compatible, it is a cache hit and the cache can use this item to serve the query, with possible content adaptation by the associated workflow. Otherwise, it is a cache miss. 
If there is a profile entry in the query message but no corresponding attribute entry of the cached item, the cache treats it as a compatible match since the content provider cannot predict all possible entries inserted by the client. Therefore, our matching strategy attempts to achieve the best-effort content availability while avoiding conflicting attributes. 
In particular, we defined two types of entries. One type is the  X  X tring X  entry, whose string type (e.g. lang= X  X ng X ). To match a string type attribute, the two strings in comparison should be exactly same. The second type is the  X  X ange X  entry, whose value is a numerical range. To match a query message to the cached item, the numerical range in the query message should be within the range defined by the attribute of the cached item. For instance, the quality attribute of a music clip defines the range of (0, 0.8). This item can be used to a query with quality profile (0, 0.4), but cannot be used to a query for full quality music (0, 1). 5.1 Background Recently, P2P file sharing is infamous for copyright infringement, as evident in the rampant piracy in P2P media-sharing applications. Hence, digital rights management on P2P has become an urgent requirement by the media-recording industry. 
Iwata and Abe [9] proposed several P2P based DRM models. In general, when authoring content, the media object will be encapsulated by a secured container. The order to render the content, the recipient X  X  media player needs to retrieve a license that supplies the key to disclose the secured object. Pioneer implementations have paved the way for this new paradigm, such as Altnet [1]. However, integrating DRM into tracking and sharing of music with those of licensing, monitoring and payment watermarking to trace user and (ii) transcoding on secured object. 
First, traditional DRM system normally traces the user of content by watermarking the content before it is secured on the original server. However, this method cannot be applied to the P2P network, since the intermediate peers are not authorized to watermark the secured object. Secondly, media transcoding to the secured objects would be infeasible on intermediate peers without explicit system support. If all watermarking and adaptation are performed on the home peer of the content, the system will regress to the server-client model. 
To tentatively address the problems above, we implemented a sample workflow to deliver media objects with DRM copyright protection. The home peer attaches its secured object with this workflow composed by two ANlets, as shown in figure 3. Each of them contains the key to disclose the associated object, transform it, and write original media object to appropriate lower quality versions according to the type of the recipient device. The second ANlet inserts watermark into the object according to the certification presented by the user. After receiving the response object, the recipient media player will attempt to obtain the license and render the media. In addition, the protection of key in ANlet and the peer authentication are beyond the scope of this paper. We intend to leverage existing research results on mobile code safety [7,19] and distributed authentication methods [15]. 5.2 Simulation Results Our simulation emulated two P2P DRM scenarios. The first one is the End-user scenario, where the P2P network is composed directly by end users who want to retrieve and share media content on the network. In the simulation, we authored 10000 media contents on a Pastry network with 1024 peers. We assume each peer is resided on PC, PDA or mobile phone. The percentages for the number of these devices are 50%, 20% and 30% respectively. The PC renders the original media, the PDA renders 0.6 quality of original media, and the mobile phones can only render 0.3 capable to execute ANlets. Hence, the AN.P2P schemes only deploy workflow to these PC peers, while treating PDA and phone peers as ordinary peers. 
The other scenario is the Media-library scenario, where whole network is a hybrid structure. In particular, the end user will connect to a particular local media library to search and retrieve media content, while several media libraries will form a Pastry network to share media content between each other. In the simulation, we assumed there are 16 media libraries located in different places to share 10000 media contents in total. Similarly, we assume the end users connected to each library are resided on PC (50%), PDA (20%) or mobile phone (30%). Since all library peers are installed on powerful servers, the AN.P2P schemes can place object and workflow to all of them. In both simulations, we assume the sizes of the original media objects follow the Pareto [3] distribution with  X  =1.25 and k =3MB, and the user requests follow the Zipf-like [2] distribution with  X  =0.7. The simulation results will be presented in the following sections respectively. 5.2.1 Placement Schemes Our first experiment evaluated the effect of the caching and replication placement schemes. Figure 4 presents the network cache hit ratio of the two placement schemes under different cache size. In particular, we defined there is a network cache hit when a query is resolved from an intermediate peer instead of the home peer of the queried content. Hence, the network cache hit ratio can represent the percentage of queries that are resolved from replicas distributed within the network. It is noticeable that the replication scheme greatly outperforms the caching scheme. The hit ratio of the replication scheme increases considerably when we enlarge the because our last-hop replication scheme attempts to place replicas to the previous hop along query path. Based on the Pastry routing mechanism, the last hop peer tends to receive more queries for the content. Hence, the last-hop replication would achieve higher cache reuse rate. In contrast, the caching scheme places replicas to the randomly generated requesting peers. On the structured P2P network, the replica reuse rate under this random placement tends to be rather low. 
Moreover, figure 5 presents the average query hops under the two placement schemes. In our simulation, the number of query hops is defined as the number of searching efficiency and smaller query delay. The result shows that the replication scheme outperforms the caching scheme, because the former can achieve much higher replica reuse than the latter. 
Because our simulation is based on the structured P2P network, the absolute reduction of query hops may not be much significant. However, if applying the AN.P2P to unstructured P2P networks, such as Gnutella, the reduction of searching size would be much more considerable. Figure 6 presents the reduction of direct distance under the two placement schemes. We define the direct distance as the geographic distance between the requesting peer and the target peer. The curves within the figure represent the reduction ratio of direct distance after applying a placement scheme, compared to no scheme applied. The figure shows that the replication scheme can reduce the average distance by 10% with the increase of cache size. However, the caching scheme only achieves insignificant improvement (less than 2%). The result suggests that under the replication scheme, requesting peers are more likely to retrieve contents from nearby peers. 
Figure 7 presents the retrieval latency under the two placement schemes. Figure 7(a) shows that the replication scheme achieves much lower overall retrieval latency than the caching scheme, while figure 7(b) gives the detailed computation and transmission latencies. There have been many P2P file sharing systems in use or under development. Early systems are based on either the central index server such as Napster [16], or the unstructured substrate such as Gnutella [6] and KaZaA [11]. These systems were primarily intended for the large-scale of data files; while persistence and reliable content location were not guaranteed or necessary in those environments. 
Many later researchers proposed other systems built upon key-based routing (KBR) overlays. Typical examples are the PAST [17] and CFS [5]. They both aimed and Chord [22] respectively. In particular, the CFS storage is block-oriented. Each block is stored on multiple nodes with adjacent Chord node ids and popular blocks can be cached at additional nodes. Though the block based file structure causes additional overhead as each file data and metadata block must be located using a separate Chord lookup, CFS allows fine-g rained block storage and permits parallel block retrievals, which benefits large files. 
Based on the fundamental P2P file sharing systems above, recent researchers have proposed many augmented application and studies, including the Top-K replication, Squirrel web cache, replica enumeration, and LAR. Top-K [14] and Squirrel [10] are two similar systems. They targeted to implement the peer-to-peer based community storage. The key idea was to enable the end user to share their local caches, to form an cache the Web objects, while the Top-K focused on the storage of large media files. Moreover, Kangasharju also provided their in-depth study on fundamental issues of Top-K replication and file replacement in the P2P community. 
Waldvogel [23] designed a replica enumeration method, which allowed for controlled replication. The possibility of enumerating and addressing individual replicas allows dynamic updates as well as superior performance without burdening the network with state information, yet taking advantage of locality information when available. 
Gopalakrishnan [8] proposed the LAR, a sy stem neutral replication protocol. It aimed to maintain low access latencies and good load balance even under highly skewed demand. Instead of creating replicas on all nodes on a source-destination path, LAR relied on server load measurement to choose the replication points precisely. In addition, LAR augmented the routing process with lightweight  X  X ints X  that effectively shortcut the original routing and direct queries towards new replicas. However, LAR did not address the server joining and leaving problems. Hence, the effect of the network structure change on the LAR performance is not clear yet. The work of this paper was to improve the overall performance of AN.P2P through dedicated content placement schemes and caching strategies. Our simulation results based on an emulated P2P based DRM system suggests that the proposed methods could help to achieve higher overall performance. In particular, the replication scheme could effectively place the object replica onto peers within a structured network. Our performance evaluation was restricted on structured P2P network. A thorough evaluation on both structured and unstructured P2P networks can help to infer complete understanding on various strategies. Moreover, our simulation was based on synthetic workload. We are looking forward to deploying the AN.P2P onto real P2P networks, which could help us study the Application Networking mechanism in more details. 
