 Users browsing the Internet seem relatively satisfied with the performance of search engines. An optimistic explana-tion would be the high quality of search engines. A more pessimistic one would be that people just adapt easily to any new technology. A third explanation is people X  X  ignorance about recall: as they simply don X  X  know what relevant doc-uments are missed, they can hardly be expected to worry about them. And so they easily conceive the result as the best they can get. To allow the user to better assess the qual-ity of the search results, an algorithm was developed that computes a visual representation of the document space in the neighborhood of the user X  X  query.
 The paper (1) outlines the algorithm, (2) shows how users can explore the neighborhood of a query, and (3) demon-strates how users can guess more judiciously whether they need to further elaborate their query to improve retrieval results.
 H.3.3 [ Information Search and Retrieval ] Human Factors, Algorithms, Performance Query Formulation, Real-Time, Visualization
The Internet seems about the one single place where peo-ple usually want what they get rather than get what they want. But why is it that people are generally so content with search engines that Google can have a button  X  X  X  X  Feeling Lucky X  under the search window? Is it the engines X  superb performance? Or because people easily and willingly adapt to whatever new technology comes along? This paper is based on a third explanation, namely that people are igno-rant about recall. They appreciate the relevant documents they get, and obviously cannot fret about the possibly more relevant ones they don X  X  even know exist. Once a certain precision is achieved, the user is in limbo whether searching further would uncover more important documents. That situation would improve if the user could assess the value of continuing to search. This paper describes a system that can help the user to make such an assessment.
If the query is viewed as a pseudo-document located some-where in the document space, then a search engine is a means to return documents that are nearest the query. The usual ranked list of documents gives the user a one-dimens-ional view of the document space, where each document is equidistant to the next. The actual spatial distribution, while known to the search engine, is lost this way. We pro-pose to leave the spatial distribution intact, and to present the user with a means to explore the space near the query.
We followed the three-dimensional representation of the document space suggested in [2], and which is built in the following steps:  X  Compute a word by document matrix for the documents,  X  Apply dimension reduction via a Haar transform,  X  Project the reduced space onto the unit sphere in the eigenspace of its three highest eigenvalues.

The reason for three dimensions is, obviously, so the sphere can be drawn and then be manipulated by a user. The doc-uments can be represented as dots on the surface of the sphere. When it is desirable to see where clusters appear, these can be drawn as contours around documents, or as points at their centroids. Contours can also be used where the number of documents is so high that separate points would be confusing. The sphere as part of the interface for the researcher, is given in Figure 1. The sphere itself can provide a still picture, to visually explore the neighborhood of the query, and a live picture, to get an update of how extending the query influences its location in the document space. We will look at these in turn.
After the sphere is drawn, the user can input a query, which is then marked as a point on the sphere. This way the user can actually gauge the distances between the query and its surrounding documents, because the arc length between two points is simply the classical IR cosine distance for 3-D. Next, the interface allows the user to do several things:  X  Click a point on the sphere: The program opens a window showing the text of the associated document.  X  Rotate the sphere to get an impression of the location of documents, or to discover document clusters near the query,  X  Set the number of clusters to partition the space into. In addition, the user can zoom in on an area and get a new sphere with a more refined view of the query X  X  vicinity.
A user can also extend the query. Then each time the sphere will be updated to reflect the query X  X  new position, thus showing how the extension influences the search re-sults.
 In our first experiment we collected on-line political pam-phlets and official party statements in the days prior to the election of a new parliament. The parties appeared on the sphere as clusters. The query was an evolving description of a political position, and we could see how the query would move away from one party, to close in on another. As an illustration for this paper we looked up the web site of a Canadian MP who made her speeches available on-line. We computed the sphere for these speeches, an then input the following query, sentence by sentence, to the algorithm:  X  X  am interested in immigration and refugees  X  I learned about Canada X  X  new program to integrate refugees  X  How are new-comers motivated to enter the labor market?  X  What skills and education do newcomers possess, like for instance a uni-versity degree? X  We could see the query meandering along the speeches, and ending at the speech that was most apro-pos to the final query. This walk is depicted by the light dots in Figure 1 (the dark dots are the speeches) showing clearly the influence of query extension on search results.
Two final remarks. First, an application of the technique is being developed in a project with several academic hospi-tals. The goal is to help women diagnosed with breast cancer come in contact with other women with this diagnosis. In that application, the growing data base of patient diaries forms the corpus, and each evolving diary is viewed as a continually updated query. Second, a technical issue facing any application of the present technique is that continual updating is computationally very demanding [1], especially for live feedback. Fortunately, instead of using SVD as is custom for LSA, we could use the Haar transform that we proposed in [2] which has linear time, constant space com-plexity. In addition, the Haar transform can be distributed over independent partitions, and we have shown that it re-mains feasible for a large corpus by running the application on a grid architecture.
 To summarize: we developed a versatile instrument that (1) provides the user with a more informative view of the search results than the traditional ranked list, (2) allows the user to more judiciously amend the query, and (3) is applicable in a variety of settings and search applications. [1] M. W. Berry and R. D. Fierro. Low-rank orthogonal [2] E. Hoenkamp. Unitary operators on the document
