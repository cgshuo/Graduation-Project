 1. Introduction
Decision making problems arise in a variety of technical areas such as: logistics, finances, transportation, image processing, among others. In general these problems can be modeled as optimization problems with multiple objectives and constraints satisfaction and cannot be handled independently of the under-lying optimizer. One approach to deal with these problems has been based on integer/linear programming methods. An alter-native approach to deal with multi-objective optimization pro-blems can be the use of meta-heuristic methods, where the guarantee of finding optimal solutions is sacrificed for the sake of getting good solutions in a limited computational time ( Hertz and Widmer, 2003 ).

Meta-heuristics are iterative methods that are not dedicated to solving a particular problem but are rather designed to handle as many different combinatorial problems as possible ( Hertz and
Widmer, 2003 ). Besides, a good meta-heuristic implementation is likely to provide a near-optimal solution to complex combina-torial problems in a suitable computational time. As black-box optimization methods, meta-heuristics can be directly applied to complex real-world problems with relatively few modifications ( Dreo et al., 2006 ).

Currently, an increasing number of researchers are investigat-ing the possibility of combining meta-heuristics with other optimization techniques in order to deal with real-world and large-scale problems. Some of these combinations hybridize meta-heuristics with constraint programming, tree search tech-niques, mixed integer program and others. The resulting hybrid meta-heuristics can provide a more efficient behavior and a higher flexibility tool than the root techniques ( Blum et al., 2011 ). Moreover, the use of hybrid meta-heuristics to tackle multiple objective optimization problems has grown giving birth to many ideas to solve real problems ( Ehrgott and Gandibleux, 2008 ). In this context, this paper addresses the problem of a short-term scheduling in a real-world pipeline network by using hybrid meta-heuristics based on genetic algorithm (GA) and mixed integer linear programming (MILP). The distribution and transportation of oil refined products involve decisions where time varies from hours (short-term type) to months. Decisions include production and operation planning and scheduling, inven-tory management, transportation network utilization and others ( Magalhaes, 2004 ). This decision making process characterizes a multiple objective optimization problem.

Recently, remarkable efforts have been made to model pipe-line scheduling problems by means of MILP techniques. Most published works only model a single pipeline connecting a source to one or several destinations ( Magatao et al., 2004 , 2011 ; Relvas et al., 2006 , 2007 ; Cafaro and Cerda, 2008 , 2010 ; Rejowski and
Pinto, 2008 ). Only a few solve the scheduling problem to a pipeline network characterized by several pipeline branches, refineries, harbors, distribution centers and intermediate nodes (depot) ( Neves et al., 2007; Lopes et al., 2010 ; Boschetto et al., 2010 , 2012 ). Due to the computational drawbacks of the MILP models, such as large amounts of continuous and integer vari-ables to compute, all of the mentioned works apply decomposi-tion techniques (structural or temporal decomposition) to solve the planning and scheduling problems in reasonable computa-tional times. Despite the use of decomposition techniques, several simplifications are also carried out in order to achieve a feasible solution to the network scheduling problem. A good review of recent applications for short-term scheduling in oil supply chain problems can be found in Relvas et al. (2006) and Boschetto et al. (2012) . According to these authors, the comparison among different approaches has been difficult because each problem considers different network configurations with different restric-tions. Besides, unrealistic simplifications are done to deal with real situations. These simplifications are quite restrictive since they reduce the practical application and performance of models.
In addition, an important conclusion from published works is that the use of decomposition approaches or even the use of other types of techniques (such as heuristics or meta-heuristics) to overcome problem complexity are relevant solutions.

Concerning the first solution, we have proposed a decomposi-tion approach to address pipeline scheduling problems ( Neves et al., 2007 ). In this previous paper, the problem is decomposed into a hierarchy of sub-problems based on the three key elements of scheduling: assignment of resources, sequencing of activities and determination of timing for resources used by these activities ( Neves et al., 2007 ). Each problem was solved separately by an appropriate technique. The assignment problem and the sequen-cing problem used constructive heuristics based on expert knowl-edge of network operation, and the timing solution was obtained with a MILP model ( Neves et al., 2007 ). However, the sequencing of batches is a multi-objective problem, which includes the production and demand forecasts, the storage, and a list of transporting products priorities. Finding a solution for this multi-objective problem is a very difficult task due to conflicts between the objectives and the size of the network. In general, the network scheduler cannot easily propose several sequences of batches to transfer. They usually choose solutions (sequence) that solve the problem (transfer), without considering if there is a better or a cheaper alternative.

Concerning the use of meta-heuristics, some papers have solved pipeline scheduling problems by using genetic algorithm.
Crane et al. (1999) have presented the first GA based model to pipeline scheduling. The studied network is a small one composed of eight nodes with a limited capacity to store products and is connected by seven unidirectional pipes. The optimal solution for this problem was obtained, thus showing the possibility of solving scheduling problems by applying the genetic algorithm.
A model for multi-objective optimization based on GA with constraints is proposed in Cruz et al. (2003) to the problem of petroleum products distribution through a pipeline network (two refineries, two intermediate depots, three final clients and 10 pipelines).

The two objectives to be accomplished are the demand of products in minimum time and minimizing interface between different products. The same multi-objective problem is modeled and solved by means of a multi-objective rank niching genetic algorithm (RNGA) in Westphal et al. (2007) . In this paper, apart from both original objectives (minimizing scheduling time and number of interfaces) two other objectives are accomplished: maximizing the volume of batches and the removal of products from the refineries. also solved by means of a multi-objective genetic algorithm (MOGA) model, a MILP model and a hybrid model that combines
MILP and GA techniques in Garcia et al. (2004) . The performances of the three methods were compared and the authors have concluded that the hybrid method computed better solutions in a shorter time than both original techniques. Based on such results, Arruda et al. (2010) developed a MOGA model applied to the network (three refineries, one harbor, five final clients and 15 pipelines) in Neves et al. (2007) . However, the model has presented a computational burden that limited its use to exam-ples with a limited number of batches.
 easy to be implemented, the computational efficiency of GA methods, especially multi-objective genetic algorithm (MOGA) methods, have limited their use to small pipeline network and/or small examples as shown in the works previously mentioned.
MOGA algorithm are: the ranking of the population that requires a mechanism for comparison among all individuals to determine their dominance and a mechanism to maintain diversity in order to avoid the premature convergence of the algorithm to a super individual ( Coello, 2003 ). In order to circumvent these problems, a class of methods, named micro-genetic algorithms  X  m GA  X  , has been proposed in the literature. These methods use a genetic algorithm with a small population and a restart process with an external memory to store the non-dominated solutions pre-viously found ( Coello, 2003 ).
 hybrid optimization model based on micro-genetic algorithm  X  m GA  X  and mixed integer linear programming (MILP) that help schedule activities of a pipeline network in the Brazilian oil industry. The proposed m GA uses the MILP model proposed in
Boschetto et al. (2010) to rank the population. Based on this rank, it also combines a non-dominated sorting procedure with a technique of niche formation and speciation in order to maintain several different solutions for an infinite period of time in relation to population size, thereby ensuring the diversity of the popula-tion. The developed hybrid model is used to calculate the scheduling of a distribution network which transports oil refined products and ethanol having high-aggregated value from refi-neries and harbors to distribution centers. The goal of the proposed model is to support the decision-making process, which is particularly complex due to the existence of many areas and pipes subject to particular operational constraints.
 pipeline network and the batch sequencing sub-problem descrip-tion are presented in Section 2 ; a description of the micro-genetic algorithm  X  m GA  X  is detailed in Section 3 ; the hybrid solution to the sequencing problem is explained in Section 4 . Illustrative instances of a real-world scenario are given in Section 5 and the concluding remarks are presented in Section 6 . 2. Real pipeline network line network operations from southeast Brazil. This network has been first described in Neves et al. (2007) and a detailed study of this network scheduling problem is carried out by Boschetto et al. (2010) . A corresponding graph to this network is built in Fig. 1 .
The pipeline network involves nine areas (nodes) including four refineries (nodes N 3, N 4, N 5, and N 6), two harbors ( N 7 and N 10) which either receives or sends products, six distribution centers and two final clients. In addition, it includes 30 bidirectional pipes, each one with a particular volume (e.g. pipe 1 has more than 42 000 m 3 ). The nodes are connected by various pipes (e.g. pipes 24, 25, and 26 connect nodes N 6 and N 8). A product can take many hours to reach the final destination. A batch can remain in a pipe until another batch pushes it. Some pipes can have their flow direction reversed, according to operational procedures. Each product presents a specific tank farm within the considered node. More than 14 oil refined products and ethanol can be transported. For instance, a  X  X  X ypical operation X  X  involves pumping a batch from N 6to N 14, passing by N 8, N 11 and
N 12. In this case, product is pumped through pipes 25, 2, 5, and 18. This ordered series of pipes connecting two nodes constitutes a route. The choice of batch configurations (product, volume and route) and sequences to be moved through the network takes operational factors into account. For instance, products that are not miscible should not be brought into contact and similar products must be sequentially grouped. Other factors, such as appropriate arrival time and expected delivering rate at each node, are also considered for network operational scheduling.
These features are important for the swapping of valves and pumps among products at each receiving node. A detailed description of this network operation can be found in Boschetto et al. (2010) .

In face of the network size, the volume of products to be moved and the operational constraints, the computational complexity to determine the short-term scheduling (one month) to this real pipeline network is a relevant issue that has been addressed by Neves et al. (2007) , Lopes et al. (2010) ,and Boschetto et al. (2010 , 2012) . Specifically, a decompositio n approach based on three key elements of scheduling was firstly proposed in Neves et al. (2007) andelaboratedin Boschetto et al. (2010 , 2012) to circumvent this drawback. The network scheduling problem was divided into sub-problems, which were based on the three key elements of schedul-ing: assignment of resources, sequencing of activities, and determi-nation of resource timing utilization by these activities. The idea is to share the basic scheduling elements among an integrated architecture as shown in Fig. 2 , which provides a framework to reduce the computational expenses. According to this approach, the input data such as consumption/pro duction scenarios, areas/routes configuration, inventory management, electrical energy cost and other operational data are a priori information describing a problem instance to be solved. The three blocks share this information in order to solve the complete short-term scheduling problem. The core of this approach is the MILP model that composed of the timing block. However, the results presented in these works ( Neves et al., 2007 ; Boschetto et al., 2010 ) demonstrated that the batch sequence inputting the network has strong impact over the final scheduling result. In both works, the batch sequences are furnished by a heuristic model to the MILP Timing Model which determines the operational short-term scheduling for the entire pipeline network. This scheduling will be optimal if the chosen sequence is optimal. In fact, these problems are not separable and must be solved together in order to obtain an optimal solution.

Recently, the same authors have proposed a new model also based on MILP technique to the sequencing problem ( Boschetto et al., 2012 ). Despite using different MILP models to solve each of the three problems, the optimal solution can be only achieved to a weekly (7 days) scheduling with a reduced number of batches (about 70 batches). For the real network scenarios that are composed of more than 300 batches which must be scheduled over 30 days, the use of MILP models becomes prohibitive due to the computational burden.

An alternative solution is developed in this paper in order to solve the real network scheduling problem. This new solution merges both sequence block and timing block into a hybrid model in which a m GA has a fitness function based on the MILP timing model solution. Moreover, this hybrid model considers the sequencing problem as a multi-objective optimization problem and it computes a set of scheduling solutions that means different options of pipeline network operations according to several optimization criteria as discussed in the following paragraphs.
Considering the decomposition approach given in Fig. 2 , the input data to the sequencing problem is a set of batches which must be put in order and fed into the network. The network feed is subject to time constraints. Some other information about product transfers as route and typical flow rate must also be considered to generate the ordered list of batches. All information is shown in Table 1 . For example, if we have a look at batch b 3in this table, we can see that this batch must be sent from the refinery in node N 7 to the destination node N 5, by means of route
R 26. The batch is composed of 10 000 m 3 of product type 5 and it will be pumped with a typical flow rate of 350 m 3 = h. Moreover, this batch must be pumped out of the refinery in 92 h after the beginning of scheduling time (0 h) and it must reach the destina-tion in 217 h. These time limits are related to the inventory management and tank farm availability at each node. Fig. 3 shows the time windows computation for both origin and destination areas. In this figure, the lower time limit to pump ( LTP ) a batch is given by the time when the complete volume of product batch is available to be delivered. The upper time ( UTP ) establishes a time when there is no tank to store a product in a production node.
Therefore, the batch should be delivered or the refinery campaign has to be stopped. In a destination node, the lower time limit ( LTR ) indicates when a tank farm has enough space to store a receiving batch. The upper time limit ( UTR ) occurs when the inventory level of a product falls down to the minimum allowed one.

The main goal of the sequencing block is to provide one or more sequences of ordered batches which satisfy the different requirements for each area. The following objectives must be considered in order to analyze different sequences:
Scheduling horizon: The total time needed to implement the scheduling.

Interface: The total number of different products that have been alternated into all the pipes. For example, three different batches b 1, b 2 and b 3 must pass through the same pipe; batches b 1 and b 2 are the same product and batch b 3isa different product. If the sequence of batches in the pipe is b 1, b 2, b 3 then only one interface is generated among b 2 and b 3, however if the sequence is b 1, b 3, b 2or b 2, b 3, b 1, two interfaces are generated resulting in a bigger loss of products or a plug insertion.

Violation of time windows: This index indicates the total number of batches delivered and/or received out of time windows discussed above. The index is related to inventory level violations, because the time windows are calculated based on consumption/production functions and the tank farm of the areas. There are four types of time violations. For delivering terminals (refineries and harbors):
Batch advanced time: A batch enters the network at a lower time than its lower time limit to pump ( LTP ). This situation may indicate a lack of product to compose the entire batch volume (see Fig. 3 (a)).

Batch delayed time: A batch enters the network at a higher time than its upper time limit to pump ( UTP ). This situation may indicate a lack of tank farm to store the product from refinery production line or ship docked in a harbor (see Fig. 3 (a)).
 For receiving terminals (distribution centers and harbors):
Batch advanced time: A batch arrives to a terminal at a lower time than its lower time limit to receive ( LTR ). This situation may indicate a lack of tank farm to store the arriving product (see Fig. 3 (b)).

Batch delayed time: A batch arrives to a terminal at a higher time than its upper time limit to receive ( UTR ). This situation may indicate a lack of product to supply the market demand.
This constraint violation has a great impact in a real scenario (product shortage) (see Fig. 3 (b)).

In short, the hybrid model proposed herein aims to put in order (reorganize) all batches from Table 1 for the purpose of optimizing the sequence of batches to be pumped. This optimiza-tion problem must consider previously calculated time windows and network physical characteristics and inventory levels. 3. The rank niching m GA
A multi-objective optimization problem involves the minimi-zation (or maximization) of several conflicting decision criteria that cannot be achieved simultaneously. Therefore a satisfactory tradeoff must be found and a set of optimal solutions (instead of a single solution) must be provided. Into this set, there is no solution that is superior to the others when all criteria are taken into account. These solutions (non-dominated solutions) compose the Pareto optimal set ( Deb, 2001 ). The concept of Pareto-optimality provides the potential to simultaneo usly address multiple-objective optimization problems, such as the minimization of time windows violation and interface counting as established by the network sequencing sub-problem described in Section 2 .

In multi-objective optimization with genetic algorithms (MOGA), the use of non-dominated sorting procedure combined with niching techniques is recommended to assure the same reproductive potential to all non-dominated individuals (Pareto solutions) in the population ( Deb, 2001 ). In a non-dominated sorting procedure, the population is ranked on the basis of non-domination: all the non-dominated individuals in the current population are identified and flagged. Thereafter, reproduction count values or selection probabil-ities are assigned based on the rank. This procedure maintains appropriate diversity of the p opulation and it achieves equal reproductive potential for all individuals at the same level.
Additionally, niche methods are useful in MOGA models to stabilize multiple subpopulation that arise along the Pareto-optimal front, thereby preventing excessive competition among distant population members. These methods work by forming and maintaining multiple and diverse final solutions whether these solutions are either of identical or of varying fitness ( Deb, 2001 ).
However as discussed in Section 1 , the use of rank procedures and method to keep diversity as niching techniques results in an excessive computational effort that prevents the use of MOGA models in real applications. As an alternative, the use of a m GA that is a class of genetic algorithm characterized by a small population can effectively reduce this computational burden.
The m GA was firstly proposed by Krishnakumar (1989) to the single objective optimization and then Coello and Pulido (2001) had extended the m GA to consider multi-objective optimization pro-blems. In both references ( Krishnakumar , 1989; Coello and Pulido, 2001 ), the developed micro-genetic algorithms converged to the Pareto front more quickly than their standard (GA) counterparts. According to these works, the convergence of the m GA is assured by the use of a reset mechanism that maintains the population diversity and avoids the premature convergence to a super indivi-dual. In particular, the algorithm proposed by Coello and Pulido (2001) uses two auxiliary memories to support this population reset. The first one is a populatio n memory that acts as a source of diversity to create new populations during evolution. The second file is an external memory that stores all Pareto solutions found at each generation. In addition, the popu lation memory is divided into two parts, a replaceable memory and a non-replaceable one that remains intact during evolution. After each reset the non-dominated solu-tions stored into the external memory should be selected to comprise the non-replaceable part of the population. Several elitist techniques can be used to evolve the population, forcing the algorithm to search solutions in di fferent points of the Pareto front. In the end, the external memory will be exclusively composed of non-dominated solutions well spread over this frontier.
Based on these ideas, this paper develops the adaptation of the multi-objective rank niching genetic algorithm (RNGA) proposed by Westphal et al. (2007) and Arruda et al. (2008) to a m GA architecture in order to solve the scheduling of the real pipeline network described in Section 2 .

According to the RNGA, the individuals of the current popula-tion are evaluated and ranked based on their fitness values. Thereafter, the population is divided into three different niches, as depicted in Fig. 4 : Niche 1: corresponding to 20% of the total of individuals, Niche 2: corresponding to 50% of the total of individuals, Niche 3: corresponding to 30% of the total of individuals.
These three niches give rise to four groups that will compose the next population. For the purpose of selecting individuals from these niches to the next population, the RNGA algorithm com-bines the elitist method with the direct copy of individuals and the roulette wheel technique ( Michalewicz, 1996 ). In order to form the first group, named elitist group, the algorithm randomly selects individuals from niche 1 that are copied to this group until it achieves 10% of the total number of individuals. From Fig. 4 , individuals in niche 1 are also selected based on roulette wheel to compose the group of good individuals. There is no hard competi-tion performed in this task since the process is based on expan-sion (20% of population will give rise to 25% of the next population). As a result, the good individual group contains some identical solutions. In this group, there are also some copies of individuals from the elitist group. The group of medium indivi-duals is a copy of niche 2. In the end, a hard competition occurs among individuals in niche 3 since only half of this niche will be selected to form the elimination group.This selection is also based on roulette wheel. After forming the groups, the elitist group giving rise to the elitist caste (by simply copying it) and the other groups are merged to form the reproduction caste. The next step comprises mutation and crossover operations to finish the com-position of the population in the next generation. Inside the elitist caste no mutation or crossover operation can occur. This is to eliminate the risk of disrupting good solutions obtained so far.
Genetic operators act only in the reproduction caste, where copies of individuals of the elitist caste can mate and generate offspring.
The evolutionary process proceeds with the next population being evaluated. After that individuals are ranked based on their fitness values and the whole population is again divided into three niches. A more detailed description of the RNGA algorithm can be found in Arruda et al. (2008) .

After the m GA finishes one evolutionary cycle as it will be explained below, a non-dominated sorting procedure ( Deb, 2001 filtering) is applied to niche 1 in order to identify the non-dominated solutions. These solutions are copied into an external memory and will be used to reset the population in the next evolutionary cycles (see Fig. 4 ). The external memory is not present in the original RNGA ( Arruda et al., 2008 ) but it is necessary for m GA architecture.

In order to limit the computational time, an evolutionary cycle requires a fixed number of generations after which the population is fully replaced. This population reset is carried out by caste: the reproduction caste is randomly initialized and the elitist caste is completely filled with non-dominated solutions copied from the external memory (see Fig. 4 ). Subsequently, the new population is ranked and a new evolutionary cycle restarts. As a result, after a fixed number of evolutionary cycles, the m GA is stopped and the external memory contains a set of non-dominated solutions well distributed over the Pareto frontier. 4. Hybrid solution to the scheduling problem characteristics of the sequencing problem, a simple codification is to use the chromosome (i.e. the sequence of genes) to represent the order in which the batches are supplied to the network.
Consequently, each individual or chromosome in the population is formed by a permutation of the batches coded as an integer string. Each integer or gene corresponds to the number of the batch obtained from the initial list (batch column in Table 1 ). The position (allele) corresponds to the order of sequencing. Fig. 5 illustrates this encoding method in which the third batch entering in the network is batch b 5.
 the initial list provided by the input data (batch column in
Table 1 ). If any generated individual is unfeasible, it is dismissed and replaced by a new one.
 which the temporal precedence of time windows is not respected for the different batches of the same product, in the same node (only origin areas), and following the same route or part of the same route. For example, a refinery produces two types of product: P 1 and P 2. This refinery must send five batches of each product through two different routes. In order to do this the batches are firstly ordered according to the temporal precedence established in Table 1 . It is evident that the batch with the smaller
LTP must be the first batch input into the network. This pre-cedence constraint generates for our example the initial solution in Fig. 6 . However, even following this sequence the batches can also be grouped by product and route: Route R 1/Product P 1 : b 1, b 3.
 Route R 1/Product P 2 : b 2, b 5, b 6.
 Route R 2/Product P 1 : b 4, b 8, b 9.
 Route R 2/Product P 2 : b 7, b 10.

Thus, a solution that does not follow these two sets of constraints is considered an unfeasible solution. For our example, solutions 1 and 2 given in Fig. 6 are a feasible solution and an unfeasible solution respectively. Solution 2 is considered unfeasible because the order established to route R 1/Product P 2 is not followed: b 2, b 5, b 6.

Crossover and mutation operators : The crossover operator uses two parents (two different solutions) to generate one or two offspring (new solutions). In this paper, the uniform crossover is used with individuals selected by the stochastic selection method ( Michalewicz, 1996 ). For each bit in the first offspring, it decides (with some probability p ) which parent will contribute its value in that position. The second offspring would receive the bit from the other parent ( Michalewicz, 1996 ). However, it is possible to obtain an unfeasible solution after applying genetic operators.
As explained above an unfeasible solution has a sequence of batches presenting an unrealistic order for time windows. In this case, a mutation operator is applied in order to repair the solution. A mutation operator is also applied when crossover generates offspring that are similar to individuals already present in the population.

Objective functions : Given an ordered list of batches, a set of computed time windows, and a network initial state, we use the
MILP timing model presented in Boschetto et al. (2010) to determine the scheduling of operational activities during a programming horizon. This model computes to each sequence (individual in the population) the time duration of all pumping and receiving operations, the time duration of the stop of each batch and the delays or advances on delivering or receiving a batch at each node, according to time windows. The following objective functions can be computed as a result from the MILP timing model.

Scheduling horizon: f  X  x  X  X 
Total number of interfaces: f  X  x  X  X  Number of batches sent out of time windows: f  X  x  X  X  Number of batches received out of time windows: f  X  x  X  X  where x is a sequence of batches (individual as shown in Fig. 6 ); b is a product batch  X  b A B  X  ; n is an operational area  X  n A N  X  ; d is a pipeline segment  X  d A D  X  ; n p is the number of products; B is the set of batches, B  X  1 , 2 , ... , n b ; N is the set of operational area, N  X  1 , 2 , ... , 9; D is the set of pipeline segment, D  X  1 , 2 , ... , 15;
P is the set of product, P  X  1 , 2 , ... , n p ; ib b , n , nl , d is the time that a pumping procedure of a batch b is started from an origin node n , with destination n 1, through a pipeline d connecting n to n 1 (h); fb b , n , nl , d is the time that a pumping procedure of a batch b is finished at an origin node n , with destination n 1, through a pipeline d connecting n to n 1 (h); ir b , n , nl , d is the time that a receiving procedure of a batch b is started at a destination node n 1, from origin n , through a pipeline d connecting n to n 1 (h); fr b , n , nl , d is the time that a receiving procedure of a batch b is finished at a destination node n 1, from origin n , through a pipeline d connecting n to n 1 (h); ao b , n is a continuous variable that indicates a pumping start time in advance of a batch b at origin node n (h); do b , n is a continuous variable that indicates a pumping start time delay of a batch b at origin node n (h); ad b , n is a continuous variable that indicates a receiving start time in advance of a batch b at destination node n (h); dd b , n is a continuous variable that indicates a receiving start time delay of a batch b at destination node n (h); plug b , b 1 , d is a binary variable set to 1 if the interface between batches b and b 1 demands a plug or generate a contamination area and b precedes b 1 into the pipe segment d , otherwise this variable is equal to 0.
 These functions (Eqs. (1) X (4) ) are the multiple objectives of the network scheduling problem. More details about the MILP model used to solve the timing sub-problem and compute all variables mentioned previously are presented in Boschetto et al. (2010) .
Fitness assignment : The adopted approach to perform the fitness assignment and to rank the individuals of the population is based on the weighted sum method. In this approach, the set of objectives are scalarized into a single objective by pre-multiplying each objective with a user-supplied weight ( Deb, 2001 ). However, the different objectives given by Eqs. (1) X (4) take different orders of magnitude. Therefore, in order to compose the fitness function it would be better to normalize them into the interval [0,1]: fn  X  x  X  X  f i  X  x  X  = f max  X  i  X  X  5  X  where f max ( i ) is the maximum value (worst case) accepted to the criterium f i ( x ). These values depend on the number of batches that will be moved through the network. After the objectives are normalized the fitness function can be computed by summing up the weighted normalized objective functions: F  X  x  X  X  where o i is the weight of the i -th objective function. 5. Case studies
In this section, several case studies are carried out with real scenarios from the Brazilian Oil Company. The main goal of these studies is to validate the proposed m GA-MILP hybrid model.
Firstly, the m GA performance is compared to the MOGA algorithm with fitness share ( Konak et al., 2006 ) presented in Arruda et al. (2010) . In fact, this MOGA model was applied to the same network scheduling problem presented in Section 2 , but the considered network was smaller than the network considered herein. Both GA models ( m GA and MOGA) adopt the solution codification (see Fig. 5 ) described in Section 4 . The procedure used to repair the unfeasible solutions (see Fig. 6 ) is also the same.
Moreover, both GA models compute the same objective functions given by Eqs. (1) X (4) . These functions are computed after the execution of the MILP timing model in the timing block (see
Fig. 2 )( Boschetto et al., 2010 ). Thus, both GA models can be considered as GA-MILP hybrid models. However, these models have different fitness functions and different strategies to identify and compute non-dominated solutions.

All MOGA parameters and m GA parameters have been chosen after several experiments using the guidelines of Grefenstette (1986) . These parameters are shown for both algorithms in
Table 2 . All models were run on an Intel Core 2 Duo 6400, 2.13 GHz, 3 GB RAM. Both GA models are coded in C  X  X  and the timing block (MILP model) in Fig. 2 uses the software ILOG OPL Studio 6.3, CPLEX 12 ( ILOG, 2009 ).

Furthermore, the quality of the solution computed by the proposed m GA-MILP hybrid model must also be analyzed. For this comparison, the obtained results when the sequencing is done by the m GA model are compared with the sequencing obtained from company specialists. This expert sequence is scheduled with the MILP model in the timing block and the results are compared in terms of the several criteria discussed in Section 2 .

The first case study corresponds to a real scenario that occurred in October 2009. Nodes N 3, N 9and N 10 were not considered in this example in order to reduce the model complexity. This network configuration is the same presented in Arruda et al. (2010) .The production and required demand of eight different products at each node are given in Tables 3 and 4 respectively. This production X  X emand must be scheduled and delivered over a month (30 days). It is worthwhile to note that nodes N 1and N 12 do not have any production or demand. They are intermediary nodes with only a pump station and some tanks allowing surge tank operations ( Boschetto et al., 2010 ). The goal of the optimiza-tion is to reduce time window violations and the numbers of interfaces while minimizing the scheduling horizon.

Their associated route and time windows are computed by the assignment block in Fig. 2 as shown in Table 1 . These batches were sequenced by our proposed m GA model, by the MOGA model in Arruda et al. (2010) , by the sequencing model presented in
Boschetto et al. (2012) and by a company scheduler (expert solution). Both GA based models are run for 20 different initial populations. The statistical results in terms of mean, median, standard deviation, maximum and minimum values to each objective function (Eqs. (1) X (4) ) and to the fitness function (Eq. (6) ) are shown in Table 5 for the m GA model and in Table 6 for the MOGA model. These results are also illustrated in the boxplots of Fig. 7 .

Through the analysis of these results, we can conclude that the performances of both GA models are very similar regarding fitness function values and objective functions f 1  X  x  X  , f f  X  x ). The objective function f 4  X  x ) related to the batches delivered out of time windows presents more scattered data to the m GA model (see f 4  X  x ) boxplots in Fig. 7 and f 4  X  x ) columns in Tables 5 and 6 ). This fact can indicate that the m GA model has found solutions which are better spread over the Pareto frontier than the MOGA model. For the purpose of endorsing this fact, we compare the sets of non-dominated solutions computed by both models. The m GA model found 11 different non-dominated solu-tions and the MOGA model computed a set with nine non-dominated solutions. These non-dominated solutions are shown in Table 7 and in Fig. 8 . The table also shows the solution of the company scheduler and the solution computed by the MILP sequencing model from Boschetto et al. (2012) . From what can be seen in Table 7 and Fig. 8 , the m GA model found more solutions well spread over the Pareto frontier than the MOGA model. In order to complete the comparison, we analyze the computational time for one simulation. While the m GA model takes about 1 h to run one simulation, the MOGA model takes about 15 h to run the same simulation. This way, we can conclude that the m GA model achieves a similar performance than the MOGA model in a computational time 15 times smaller.

The quality of the scheduling solution computed by the m GA model is compared with the solution computed by the company expert. In particular, the specialist uses his/her practical knowl-edge to put the batches in order. He/She ranks the batches based on the production rate at refineries and the arrival of ships in the harbors. Thus the batches with smaller LTP are the first to enter the network. In order to solve conflicts the specialist observes the time windows of the destination (LTR and UTR) area and the material inventories at each node. As a result, the solution computed by the specialist has a low number of time window violations in origin nodes but a high number of time window violations in destination nodes, as we can see in the last line of Table 7 . Furthermore, the resulting scheduling horizon (818 h) overruns the time established by the planning (30 days  X  720 h) and the number of required interfaces can be high. The expert sequence and the best sequence computed by the m GA model (best fit) are illustrated through Gantt charts in Figs. 9 and 10 , respectively.

In the Gantt charts ( Figs. 9 and 10 ), the batches of the same product have the same color and the white color blocks indicate a break in the pipeline operation. By comparing both solutions, we can see that they are strongly different. For example in Fig. 10 , the sequence of batches passing through pipe 8 begins with a small batch of a navy blue product on the second day of the scheduling horizon. This batch is followed by two batches of a yellow product, one batch of a green product, a large batch of a red product, a small batch of a red product, a small batch of a violet product and so on. In the first 10 days, the pipeline operation presented four breaks. For the expert solution in Fig. 9 , the first batch to enter pipe 8 is a large batch of the navy blue product on the first day of the scheduling time, however the pipe remains stopped for one day, and on the third day a new batch of the same navy blue product enters the network. This batch is followed by batches of violet, dark blue, green and yellow products, two batches of a violet product and a small batch of a red product. Furthermore, the solution in Fig. 10 presents 14 interfaces and the specialist X  X  solution in Fig. 9 presents 16 interfaces. Finally, the entire solution computed by the m GA model presents a smaller scheduling horizon (715 h) that means the entire production and demand were scheduled in a time lower than the desired scheduling horizon (720 h). This is not the case of the expert solution (818 h) in which some products wer e delivered 4 days late.
 2in Table 7 ) with the solution computed by the MILP sequencing model. As discussed in Boschetto et al. (2012) , the MILP sequencing model deserves priority to send and delivery dates (time window violations are strong penalized) while respecting the time horizon (720 h). This model does not cover the product interfacing. These characteristics of the MILP model are reflected in the obtained solution (Table 7 ) which presents few batches sent or delivered out of time interval, a good scheduling horizon (731 h) but a number of plug interfaced (39) higher than the m GA best solution (35). The m GA best solution also presents a smaller scheduling horizon (715 h).
 The other case studies involve the complete network in Fig. 1 .
We analyze the performance of the proposed model when the number of batches grows. The obtained results are compared to the MOGA model in Arruda et al. (2010) and the MILP sequencing model in Boschetto et al. (2012) . These models are compared in terms of computational burden and quality of solutions to the different scenarios listed in Table 8 . These scenarios are char-acterized by the number of batches that must be transported and the number of products that compose these batches. Scenarios S1 and S2 have a small number of batches with great volume while scenarios S3 and S4 are characterized by many batches with small volume of products. The demand and production profiles for each scenario are omitted for the sake of room in the paper. However, these scenarios stand for typical network operations in four different periods of the year. Scenarios S1 and S2 are run with 10 different initial populations for both GA based models. The other scenarios (S3 and S4) are complex ones and they present a high computational burden to run due to MILP timing model performance ( Boschetto et al., 2010 ) in the timing block (see
Fig. 2 ). Thus, these scenarios are run one time. The performances of both GA based model and MILP sequencing model are com-pared in terms of computational time and number of non-dominated solutions. The results are shown in Table 9 .
For scenarios S1 and S2, the MILP sequencing model shows the best performance. However this model failed to solve scenarios S3 and S4 due to memory exception errors. In fact, scenarios with a large number of batches require a MILP sequencing model with a great number of variables and constraints. For instance, the MILP sequencing model to scenario S3 has 23,428 continuous variables, 2160 integer variables and 33,238 constraints to be satisfied.
By analyzing the computational time issues for both GA models in Table 9 , we can conclude that the proposed m GA model is much better than the MOGA model. For example, the MOGA model was stopped after 36 h for scenario S4 and no solution could be computed while the m GA model took 11 h to run the same problem, presenting seven different non-dominated solutions. For the low-complexity scenarios, the number of non-dominated solutions found is similar for both models and the quality of the solutions is also similar. The difference in computa-tional performance among models can be understood if we count the number of sequences that are evaluated to each model. Each evaluation corresponds to an execution of the MILP model in the timing block (see Fig. 2 ). The m GA model computes 2000 evalua-tions during one execution (from Table 3 : five cycles of 10 generations with 20 individuals in the population) and the MOGA model computes 30,000 evaluations during one execution (from Table 3 : 200 generations with 150 individuals in the population).
Concerning the quality of the solutions, we compared the best solution (lower objective function value) obtained with the m GA model with the solution of MILP sequencing model to scenarios S1 and S2. These results are shown in Tables 10 and 11 respectively.
From Table 10 , the MILP sequencing model found the optimal solution to S1 scenario (see objective function column) while the best m GA solution can be considered only a good feasible solution. From what can be seen in Table 11 , we can consider that the MILP sequencing model has computed a quasi-optimal solution to S2 scenario (see objective function value column). The best m GA solution is also a good solution. Both solutions have similar performances in terms of scheduling horizon (both computed values exceed 720 h) and in terms of batches sent out of time windows. The m GA solution, however, presents a smaller number of plug interfaces while the MILP solution presents a few batches received out of time windows.
 6. Conclusion
We have developed a m GA-MILP hybrid model for sequencing batches in a pipeline network scheduling problem. The proposed approach has been tested with real-world scenarios from Brazi-lian Oil Company. The case studies cover time horizons over a period of a month and involve scenarios with 48 batches, as well as complex scenarios containing 367 batches. The several criteria (objective functions) used to put the batches in order take operational characteristics of the network into account, such as inventory constraints and production/demand profiles (associated to time windows), presence of interface among products, and others. Since the ordered sequence of pumped products has an important impact over the final short-term scheduling, the heuristic used by the expert to put the batches in order can fail for particular cases. This way, the solutions computed by the m GA model can be an alternative to support scheduler X  X  decisions. In general, the m GA model has obtained satisfactory solutions with a reduction in the number of time window violations at a low computational cost. Furthermore, the results of the model can present a better level of inventory during the time horizon or reduced product interfaces when compared to the expert solution.

When compared to other MOGA model, the results computed by the developed m GA model are similar in terms of quality of solutions, total number of computed non-dominated solutions and solution spread over the Pareto frontier. The computational time of the m GA model is much smaller than the MOGA model for all studied scenarios. However, the fitness function used by both models is based on the solution of a MILP model whose computa-tional time grows with the scenario complexity. This fact may prevent the use of GA models by the company schedulers, even those with small populations such as the model proposed in this work.

Nevertheless, the presented results enable the combination of a MILP model with m GA model to deal with real-world and large-scale problems. This is only possible due to three factors. First, the fitness assignment of the hybrid model is based on the weighted sum method that converts a multi-objective problem into a single-objective one. Second, the proposed m GA model has a small population that reduces the computational burden of the ranking procedure. Finally, the use of a reset mechanism combined with niche techniques and elitist strategies assures the convergence of the m GA-MILP hybrid model to the Pareto frontier and the quality of the obtained solutions.

In conclusion, for future reference, a more detailed study and formulation will be carried out according to two guidelines. The first one has the main goal to obtain optimized sequences with other operational criteria such as  X  X  X inimizing the time delay of batches X  X  or  X  X  X inimizing pipeline breaks X  X . The other guideline is related to the computational burden. We are looking for a new way to compute fitness functions in order to reduce the computa-tional time without loss of quality of solutions. In fact, we are looking for a way to parallelize the computation of the MILP timing model associated to each individual in the m GA population. Acknowledgments of Petroleum (ANP) and Research and Projects Financing Agency (FINEP) through Grant PRH-ANP/MCT (PRH10-UTFPR) and Brazi-lian Research Council (CNPq) through Grants 311877/2009-5 and 304037/2010-9.
 References
