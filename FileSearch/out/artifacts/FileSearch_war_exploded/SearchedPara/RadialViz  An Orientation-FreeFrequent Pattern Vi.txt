 Frequent pattern mining [1] finds implicit, previously unknown, and potentially useful information in the form of sets of frequently co-occurring items or events (e.g., merchandises in a store, courses offered at a university). It plays an essential role in many knowledge discovery and data mining tasks. A common characteris-tic of these tasks is the identification of t he frequencies of items, or sets of items, from datasets. For instance, a store manager may want to identify merchandise items that are frequently purchased together so as to place the items closer to each other (to reduce the distance required to travel by the shopper) or further apart (to encourage more purchase of items placed in between those frequently purchased ones). Similarly, a university administrator may want to know the collection of popular courses taken toge ther by students in a semester (for lec-ture scheduling and exam scheduling). A book seller may want to recommend bundles of popular books to readers.

Over the past two decades, data mining researchers have designed and devel-oped numerous frequent pattern mining algorithms. However, many of these al-gorithms have been focused on either functionality or efficiency. These algorithms usually return the mining results in textual form (e.g., a very long list of fre-quent patterns). Consequently, users may not easily comprehend the knowledge and useful information from the textual list. Conversely, visual representation of these patterns would be more comprehensible to users. However, not too many visualization tools have been developed to support frequent pattern mining. A common character istic among the visualizers that were designed to support fre-quent pattern mining (e.g., FIsViz [16], PowerSetViewer [19]) is that they display the mined frequent patterns in a traditio nal two-dimensional rectangular space. For instance, FIsViz lists domain items on the x -axis, shows frequency values on the y -axis, and visualizes frequent patterns as polylines drawn on this two-dimensional rectangular space with ( x, y )-coordinates. As such, the orientation of the graph displaying the patterns plays an important role in legibility of the graph. Consider a situation in which two users are facing each other and are discussing the frequent patterns shown on the graph (e.g., a marketing analyst was asked by a store manager, who sits on the opposite side of a table, to dis-cuss the sets of merchandise items that a re frequently purchased by shoppers). When showing frequent patterns in the graph as supporting evidence, it may be right-side up to the manager (e.g., as shown in Fig. 1(a)) but upside down to the analyst (e.g., as shown in Fig. 1(c), from which important information such as frequency is not easy to read) and vice versa.

To summarize, the users who face the unfavourable orientation may have dif-ficulty in comprehending the frequent patterns shown on the graph. To improve the situations, we propose in this paper a visualizer X  X alled RadialViz X  X hat uses a radial layout to visualize frequent patterns. The key contribution of this paper is our radial visualizer that shows the discovered frequent patterns in an orientation-free environment.

This paper is organized as follows. The next section provides background and discusses related work. We propose our v isualizer in Sect. 3. Evaluation results are presented in Sect. 4. Finally, we present the conclusions in Sect. 5. Development of effective visualization systems for data mining has been the subject of many studies. This line of research can be sub-classified into two gen-eral categories: (i) systems for visualiz ing data (e.g., VisDB [12], independence diagrams [4], Polaris [21]) and (ii) systems for visualizing the mining results (e.g., systems that visualize decision trees [3], association rules [5,11], and clus-ters [10,14]).

Recently, some tools and techniques have been designed to visualize patterns involving sets of items or related co-occu rring entities [6,15,17,18]. For example, Wong et al. [23] designed visualization tools for visualizing topic association rules and sequential patterns appearing in documents. Their visual tools are similar to parallel coordinates, in which keywords appear on the parallel coordinate axes in the y -direction and the sequential index (temporal or others) on the x -axis.
Similarly, Yang [24,25] designed a system mainly to visualize association rules (but can also be used to visualize frequent patterns) in a two-dimensional space consisting of parallel vertical axes. In his system, all domain itemset are sorted according to their frequencies and even ly distributed along each vertical axis. A frequent pattern consisting of k items (i.e., a k -itemset) is then represented by a curve that extends from one verti cal axis to another connecting k such axes. As the frequency of such a pattern is indicated by the thickness of the curve, it is not easy to compare the frequencies of patterns.

PowerSetViewer (PSV) [19] provides users with guaranteed visibility of fre-quent patterns in the sense that the pixel representing a frequent pattern is guaranteed to be visible by highlighting such a pixel. However, multiple frequent patterns may be represented by the same pixel, and PSV does not show the re-lationship between related frequent patte rns (e.g., it is not easy for users to spot the prefix/extension relationship among patterns { a } , { a, b } and { a, b, c } ). Note of { a, b } , which is then an extension of { a } . For any k -itemset Z in a domain of m items, there are k  X  1 non-empty prefixes (i.e., not counting the empty set and Z itself) of Z and at most 2 m  X  k  X  1extensionsof Z .

FIsViz [16] was proposed in PAKDD 2008 to visualize frequent k -itemsets as polylines connecting k nodes in a two-dimensional space with ( x, y )-coordinates, in which domain items are listed on the x -axis and frequency values are indicated by the y -axis. The x -locations of all nodes in the polyline indicates the domain items contained in a frequent pattern Z ,andthe y -location of the rightmost node of a polyline for Z indicates the frequency of Z . As such, prefix/extension relationships can be observed by traversing along the polylines.

Nowadays, in a collaborative environment, it is not uncommon for collabora-tors to have face-and-face meetings. Partially due to the emerging of tabletop displays as an effective platform for collaboration, information is shared on the tabletop surface in the meetings. As such, orientation or view perspective cannot be neglected. Unlike a single-user environment (where orientation may not be an issue), object orientation becomes criti cal in a multi-user environment because not all users share a common perspective of the displayed information. As in-formation is viewed from different positions, it may be perceived differently. A recent study [2] showed that user perception (e.g., legibility or readability) of a chart decreases when the chart is not oriented right-side up. Let us use FIsViz as an example. When frequent patterns showed by FIsViz are rotated 90  X  or 270  X  clockwise (as shown in Figs. 1(b) and 1(d)) corresponding to the guests who sit on the right-hand-side (RHS) or the left-hand-side (LHS) of the host, guests may encounter difficulties in quickly reading the information. It may take much longer when the charts are put upside down (as shown in Fig. 1(c)). Hence, although FIsViz visualizes frequent patterns, it is not orientation free.
The aforementioned study [2] suggested that the legibility or readability can be improved by using radial charts. The sunburst technique [20,22] is a space-filling visualization that uses a radial layout (i.e., a ring chart, a multilevel pie, or concentric circles) [7] to offer an explic it portrayal of a hierarchical structure. Specifically, items in a hierarchy are laid out radially in sunburst. The root/top of the hierarchy is put at the center, and deeper/leaf levels are put farther away from the center (i.e., with the hierarchy moving outward from the center). Each hierarchical level forms a  X  X lock arc X  or pie segment. An inner block arc (or a pie segment of an inner ring) bears a hierarchical relationship to those outer block arcs (or pie segments of an outer ring) which lie within the angular sweep of the parent arc. The arc length (and thus the central angle and area) of a block arc is usually proportional to the quantitative values associated with that arc. Fig. 2 shows how sunburst visualizes a hierarc hical structure of cu stomers. From this figure, we observe the following properties of hierarchical data represented by sunburst: P1. All children of a node in the hierarchy are disjoint.

P2. The quantitative value associated with a parent node is higher than or
P3. Given P1 and P2, the quantitative value associated with a parent node is Data in the hierarchical structure of customers in Fig. 2 possess the above three properties. For instance, a customer i s either a member or a non-member. A member is either a gold, silver, or bronze member. Here, the quantitative value is the count. The total customer count is the sum of the total numbers of members and non-members. The total membership count is the sum of the membership counts of all gold, silver, and bronze members.

FP-Viz [13] uses a radial layout for visualizing tree-based frequent pattern mining. Specifically, FP-Viz visualizes the FP-tree [9] used in the mining process. As (i) all children of a node in an FP-tree are disjoint and (ii) the support value of a parent node is higher than or equal to the sum of all support values of its child nodes, then (iii) the support value of a parent node is higher than or equal to that of each of its child nodes. In other words, when FP-VIz visualizes the database transactions in the radial layout, the database transactions captured in the FP-tree satisfies Properties P 1 X  X 3 above. However, FP-Viz does not directly visualize frequent patterns, which need to be mined from the FP-tree. Moreover, a pattern Z may be embedded in multiple paths of an FP-tree (e.g., { b, e } may be contained in paths representing transactions t i = { a, b, c, d, e, f } and t j = { b, c, e, g } ), and thus appears in different block arcs in FP-Viz. Consequently, it may not be easy to directly read the frequency of Z . Recall from the previous section that FIs Viz visualizes frequent patterns as poly-lines in a two-dimensional rectangular s pace, but FIsViz is not orientation free. In contrast, FP-Viz is orientation-free with a radial layout, but it shows the con-tents of an FP-tree (i.e., database transactions to be mined) instead of directly showing frequent patterns (i.e., the res ults mined from the FP-tree). In this sec-tion, we propose a visualizer X  X alled RadialViz  X  X o use a radial layout (which is orientation free) to directly show frequent patterns and their relationships (e.g., prefix/extension relationships).

Visualizing the hierarchical structure of frequent patterns (and their pre-fix/extension relationships) in a radial layout is challenging because frquent patterns in the prefix/extension hierarchy does not satisfy Properties P1 and P2.Weobservethefollowingwith frequency being the quantitative value. 1  X  . Not all extensions of a frequent pattern Z are disjoint. In fact, extensions 2  X  . The frequency of a frequent pattern Z is not necessarily higher than or 3 + . Fortunately, the frequency of a frequent pattern Z is still higher than or We design RadialViz for visualizing frequent patterns based on these observations. 3.1 Basic Representation of Frequent Patterns in RadialViz Recall that both sunburst and FP-Viz divide the central angle according to quantitative values associated with the nodes in a hierarchy. This works well for the hierarchy that satisfies Properties P1 and P2 (e.g., hierarchy in an FP-tree), in which (i) child nodes of a parent node are disjoint and (ii) the quantitative values associated with parent nodes are bounded below by the sum of quantita-tive values associated with their child nodes (e.g., the support value of a parent node in a tree path representing a set of similar transactions is at least the sum of support values of all its child nodes in an FP-tree). The central angle for each parent node is then subdivided accordin g to the quantitative values associated with its child nodes. However, these two properties do not hold for visualiza-tion of frequent patterns as noted in Observations 1  X  and 2  X  . For example, if frequency of { a, b } is 10, then individual fre quency of its extension { a, b, c } or { a, b, d } is at most 10. However, their sum can range from 0 to 20. If the sum were above 10, then how can we represent { a, b, c } and { a, b, d } radiating from the sector or block arc representing { a, b } ? A naive solution is to overlap the areas for these two extensions. This works for this particular example. However, what if there are multiple extensions of { a, b } (e.g., for a domain of 100 items, there are potentially 2 98  X  1  X  3  X  10 29 extensions of { a, b } including potentially 98 im-mediate extensions of { a, b } ). It is unclear how to overlap these 98 extensions so that the outcome is still comprehensible to users. As such, we cannot divide the central angle according to the frequency of a frequent pattern. This leads to two questions: (i) How to represent the frequency of a pattern, which plays an important role in frequent pattern mining? (ii) How to divide the central angle of the radial layout? Representation of Frequency of a Frequent Pattern. To answer the first question, our RadialViz uses radius (instead of the central angle, sector area, or arc length) to represent the frequency information . By doing so, users can easily infer the frequency distribution of all frequent patterns. For example, one can easily spot from Fig. 3 the most popular course (with the high frequency) as it is indicated by the sector with the longest radius (on the upper left portion of the graph). Moreover, patterns with the same frequency have the same radius. Representation of Cardina lity of a Frequent Pattern. Representing fre-quency of patterns by radius may lead to the following question. In both sunburst and FP-Viz, each level of the hierarchy forms a ring or block arc. Here, when visualizing frequent patterns in RadialViz, each level of the hierarchy represents the cardinality k of k -itemsets. Given that RadialViz represents frequencies of patterns by radius, patterns of the same cardinality may not necessarily form a ring or block arc with the same radius from the center. The block arc for a k -itemset (e.g., with frequency=55) may appear much further away from the center than that for another k -itemset (e.g., with frequency=5). Since the block arcs for ( k + 1)-itemset extensions of a k -itemset Z is shown to be radiating from the block arc for Z , users can count the number of levels of block arcs to determine the cardinality of Z .

For user convenience, RadialViz uses colour to represent the cardinality of frequent patterns. By doing so, users can directly get the cardinality without counting multiple block arcs, each representing a cardinality level in the hierar-chy. See Fig. 3, in which the colour bar at the bottom indicates the cardinality (e.g., from red indicating the minimum cardinality of 1 to light blue indicating the cardinality of 5 + for the illustrative student database).
 Representation of a Frequent Pattern. Recall that RadialViz uses colour to represent the cardinality of frequent patterns and uses radius to represent the frequency. Based on Observation 3 + , we know that the frequency of any extension of a frequent k -itemset Z is bounded above by the frequency of Z . This implies that the radii of block arcs for extensions of Z is bounded above by the radius of block arc for Z . Hence, we do not have to put the block arcs for ( k +1)-itemset extensions of Z radiating from and outside the block arc for Z (as shown in Fig. 4(a)) so as to avoid having a radial graph spanning too far from the center. Instead, RadialViz stacks the block arcs or sectors for ( k +1)-itemset extensions of Z on top of the block arc or sector for Z .Bydoingso, RadialViz represents each frequent pattern by a sector radiating from the center .There are several advantages of this representation of frequent patterns by RadialViz. First, the span of the radial graph is bounded above by the maximum radius of all singletons (i.e., 1-itemsets). See Fig. 4(b). Second, the prefix/extension relationship can then be represented through containment (i.e., sectors for the extensions of Z are contained in the sector for Z ). Third, it is much easier to spot the change of frequency between Z and its extensions because sectors (for Z and its extensions) are all radiating from the same center.

Next, let us answer the earlier question on how to divide the central angle of the radial layout. A na  X   X ve approach is to divide the central 360  X  angle among all singletons, and then recursively subdivide the angle associated for each k -itemset among their immediate ( k + 1)-itemset extensions. However, a potential problem associated with this na  X   X ve approach is that some sectors may be very dense (due to the large number of frequent pattern extensions) while others may be very sparse (due to the small number of frequent pattern extensions). Hence, our RadialViz uses a different approach. Instead, RadialViz divides the central 360  X  angle into p sectors, and each sector represents one of the p mined frequent patterns. 3.2 Other Features and Observations on RadialViz In the previous section, we introduced so me essential features of our RadialViz. In this section, let us present some optional features of RadialViz.
 Frequency of Frequent Patterns. Recall that RadialViz uses radius to repre-sent frequency. Sectors with long radii re present frequent patterns with high fre-quencies, while sectors wit h short radii represent less frequent patterns. In many real-life applications, users need to co mpare frequencies of different patterns. Ra-dialViz provides users with the radial gridline so that users can easily read off the frequency of different patterns and comp are among them. For example, each ring formed by the radial gridline indicates a frequency increment of 10 in Fig. 3(b). So, users can easily learn that the enrolments of the two most popular courses are 55 and 26. There are also two courses with the same enrolment of 21.

Moreover, RadialViz also provides users details-on-demand by allowing them to hover the mouse over a sector to get a small box showing the frequency of the corresponding frequent pattern represented by the sector. For example, the longest red sector on the upper left indicates that the corresponding course was taken by most students. When users hover the mouse over such a long red sector, the small textbox appears and explicitly shows  X 55 X  as the exact frequency for that course. Ordering of Items in Patterns. Recall that FIsViz arranges domain items in descending frequency order. Such an ordering would be helpful if users just want to find out items with the highest or lowest frequencies. However, in many other real-life applications, it is more common for users to look up the frequency of some particular patterns of interest. In those applications, having the domain items arranged in descending frequency order means that users need to perform a linear scan for the interesting patterns. Hence, to facilitate easy lookup of fre-quent patterns, RadialViz arranges items clockwise in some user-specified order (e.g., alphabetical order). With such an arrangement, user s can easily locate the patterns of interest. For instance, Figs. 3 and 5 show second-to fourth-year courses (arranged by cour se number clockwise from the 12 o X  X lock position). Users can infer some knowledge like  X  X he most popular course is a fourth-year course X . Moreover, knowing that the most popular course is COMP 4380 (with longest radius), if users want to find COMP 4350, then they only need to search in a counterclockwise direction for a sector very close to COMP 4380. Further-more, with this item arrangement, users can still easily spot the patterns with the highest or lowest frequencies. The reason is that, as RadialViz uses radius to show frequency, patterns with the high est and lowest frequencies would have the longest and shortest radii, respectively.
 Patterns of Some Specific Cardinality. Recall that RadialViz uses colour to represent the cardinality k of frequent k -itemsets. Frequent patterns of the same cardinality are represented by the same colour. Moreover, in many real-life applications, it is uncommon to find frequent patterns of certain cardinality. Hence, RadialViz allows users to specify which cardinality levels to be displayed . For instance, Fig. 5(a) shows only frequent patterns of cardinality 1 (i.e., 1-itemsets), whereas Fig. 5(b) shows only frequent patterns of both cardinalities 1 and 2 (i.e., 1-and 2-itemsets).
 Zoom-In and Zoom-Out. When RadialViz shows all frequent patterns (as in Fig. 3), it gives users an overview about the distribution of all frequent patterns. As some sectors are small, RadialViz provides users with interactive features to zoom in and zoom out so that users can obtain information of the granularity level of their interest. See Fig. 6(a) for a zoom-in view.
 Drill-In. Moreover, RadialViz also provides users with interactive features to drill in some specific area of interest. The key difference between zoom-in and drill-in is that the former just magnifies the sector of interest (i.e., same layout) whereas the latter redraws the sector of interest. To get a close-up of the drilled-in image, RadialViz allows users to zoom in to the sector of interest in this drilled-in image. See Fig. 6(b) for the zoom-in view when we drilled in to details of COMP 4380. Note that combination of zoo m-in and drill-in features is useful when dealing with large amounts of data. In this section, we show our results on ev aluating our proposed RadialViz. Here, we compare functionality and performance of our RadialViz with some existing systems (e.g., FIsViz [16] from PAKDD 2008). We conducted two sets of evalu-ation tests. In the first set, we tested functionality of our RadialViz by showing how it can be applied to various scenarios or real-life applications. In the second set, we tested performance of our RadialViz.

In terms of functionality, we considered many different real-life scenarios. We determined whether RadialViz can handle each scenarios. If so, we examined how it displays the mining results. The evaluation results show that RadialViz was effective in all these scenarios. A few samples of these scenarios are shown below: Q1. Which course has the highest enrolment?
Q2. Which is the most frequent 2-itemset extensions of COMP 4380 and the
Q3. How many frequent 2-itemset extensions of COMP 4380 and the most fre-Q4. What is the highest cardinality for the frequent extensions of COMP 4380? Q5. Which frequent course pairs have the same frequency? Recall from Fig. 1 the snapshots of differen t orientations of FIsViz. See Fig. 7 for snapshots of different orientations of RadialViz besides the right-side up view shown in Fig. 3.

With RadialViz, we easily located the course with highest enrolment (i.e., the sector with longest radius) regardless of the orientation. Although we spotted the same information from FIsViz when frequent patterns are shown right-side up, it took a bit longer time for other orientations of FIsViz.

To answer Q2 and Q3, we drilled in COMP 4380 and then zoomed in to the center (as shown in Fig. 6(b)). With the colour bar, we easily spotted the frequent 2-itemset and 3-itemset extensions (i.e., longest yellow and green sectors, respec-tively) of COMP 4380 from RadialViz regardless of the orientation. By hovering the mouse over the corresponding sector s, the course labels were revealed and answers were obtained (i.e., { COMP 4380, COMP 4580 } with 21 students en-rolled, and { COMP 4380, COMP 4550, COMP 4720 } with 7 students enrolled). Similarly, we counted the number of yellow and green sectors with radius  X  5, and we got three course pairs and one course triplet that satisfy the enrolment condition. In contrast, for FIsViz, we needed to traverse all polylines going out from COMP 4380. As many of these polylines were bent and overlapping, it was not easy to trace and count each polyline. The situation was worsened when the graphs were not right-side up.

Similarly, for Q4, we just needed to look for the sector with colour representing the highest cardinality from the figure. In this case, it was light blue indicating four courses. For Q5, we easily spotted from Fig. 3(b) that COMP 4020 and 4350 have the same enrolment of 21. Answering these two questions in FIsViz again required traversal of those bent and overlapping polylines.

In terms of performance, we varied the s ize of databases. The results showed that the runtime (which includes CPU and I/Os) increased almost linearly with the number of transactions in the database. We also varied the number of items in the domain, and the results showed that the runtime increased when the number of domain items increased. Mor eover, when the user-defined frequency threshold minsup increased, the number of itemsets that satisfy the threshold (i.e., itemsets to be displayed) decr eased, which in tur n leads to a decrease in runtime. As ongoing work, we are conducting more extensive experimental evaluation. In this paper, we proposed a frequent pattern visualization system, called Radi-alViz , which enables users to visualize the mined frequent patterns. RadialViz represents k -itemsets using a radial layout (which is orientation free) and in a hierarchical fashion (so that extensions of a pattern Z are contained within the sector representing Z ). Patterns of the same cardinality have the same colour, and patterns of different cardinalities have different colours. Since RadialViz uses radius to indicate the frequencies of patterns, users can easily observe the frequency distribution of all the patterns. Patterns having similar radius have similar frequencies. With interactive features (e.g., mouse hover, zoom-in, drill-in), users can easily explor e patterns of interest. Evaluation results showed the effectiveness of RadialViz. Our propos ed system helps users to answer many questions for real-life applications, and thus assist them in making appropriate business intelligence (BI) decisions, especially in face-to-face tabletop collabora-tive environments.
 Acknowledgement. This project is partially supported by NSERC (Canada) and University of Manitoba.

