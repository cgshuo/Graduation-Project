 Link analysis methods have been used successfully for knowledge discovery from the link structure of mutually linking entities. Ex-isting link analysis methods have been inherently designed based on the fact that the entire link structure of the target graph is ob-servable such as public web documents; however, link information in graphs in the real world, such as human relationship or eco-nomic activities, is rarely open to public. If link analysis can be performed using graphs with private links in a privacy-preserving way, it enables us to r ank entities connected with private ties, such as people, organizations, or business transactions. In this paper, we present a secure link analysis for graphs with private links by means of cryptographic protocols. Our solutions are designed as privacy-preserving expansions of well-known link analysis meth-ods, PageRank and HITS. The outcomes of our protocols are com-pletely equivalent to those of PageRank and HITS. Furthermore, our protocols theoretically guarantee that the private link informa-tion possessed by each node is not revealed to other nodes. H.4 [ Information Systems Applications ]: Miscellaneous Algorithms link analysis, privacy, ranking, HITS, PageRank
Link-based analysis has been developed in the form of algo-rithms that discover useful information from the link structure of mutually linking entities. In particular, HITS [7] and PageRank [9] have been successfully used for the ranking of hyperlinked web documents. These link analysis methods were originally designed for the analysis of web documents; however, these can be readily applied to mutually linking entities, such as referenced academic papers, protein-protein interactions, and so on.

In general, link analysis methods take the entire link structure as its input. Indeed, for the computation of Google X  X  PageRank, the linking structures of web documents are collected by crawling agents which actually wander around public web documents. The same holds for citation graphs of academic papers or interaction graphs of protein networks. As shown, existing link analysis meth-ods have inherently been designed based on the fact that the entire link structure of the target graph is observable; however, link infor-mation in the real world, such as human relationships or economic activities, is rarely open to public.

In this paper, we present link analysis solutions for graphs of privately connected entities. Let there be a directed weighted graph G = ( V , E , W )where V is a set of vertices, E is a set of edges, and W is a weight matrix. Throughout this paper, we assume that the set of vertices corresponds to a collection of distributed nodes where the computational power of each node is polynomial. Edges correspond to links between nodes; weights of edges correspond to weights of these links. Let there be a link of node i pointing to node j . In our setting, we assume that link e ij and weight of the link w are not desired to be known by nodes other than node i and node j . Furthermore, we design our link analysis solutions based on the three privacy models of graphs described as below:
Weight-aware model. If both the head node i and the tail node j know the existence of the link and the weight value, this is des-ignated as weight-aware link-aware model (or weight-aware model for short). For example, consider commercial relationships among enterprises. Each enterprise may conduct business transactions with the other enterprises. Let the i th enterprise purchase some products from the j th enterprise. This transaction corresponds to link e the transaction value corresponds to weight w ij . In this case, both the i th and j th enterprise are aware of the existence of this link and know the weight value, but enterprises other than i and j do not know the existence of this transaction and the transaction value.
Link-aware model. If the head node i and the tail node j know the existence of the link, but the weight value is only known by the head node i , this is designated as link-aware weight-unaware model (or link-aware model for short). For example, consider call logs of cell-phones. Let caller i make a phone call to receiver j . This call corresponds to link e ij and the probability that i makes a phone call to j corresponds to the weight w ij of e ij . In this case, both caller i and receiver j are aware of the existence of the link, but the call probability w ij are known only by caller i .

Link-unaware model. If only the head node i knows the exis-tence of the link and the weight value, but the tail node j knows nothing, this is designated as link-unaware weight-unaware model (or link-unaware model for short). For example, consider a peer evaluation scheme among members of personnel. Each member can choose a limited number of other members and provide eval-Table 1: Comparison of computational complexity and privacy preservation. n : the number of nodes,  X  : the maximum de-gree of nodes, , the number of hops for message routing. The measure of the privacy is discussed in Section 6.
 uation values. Let the i th member evaluate the j th member. This evaluation relationship corresponds to link e ij and the evaluation value corresponds to weight w ij . In this case, only the i th member is aware of the existence of the link and the evaluation value, but the j th member knows nothing.

We designate graphs with private links and private weights as private graphs or private weighted graphs . Privacy models shown above are typical classes of private weighted graphs. Usually, links or social ties, such as who buys from whom, who calls whom, or who evaluates whom, are not preferred to be revealed in public due to confidentiality or privacy concerns. If link analysis can be per-formed using private weighted graphs without violating the privacy model of the graph, valuable information would be extracted from privately networked entities. This contributes to enhance informa-tion retrieval technol ogies for networked en tities in the real world. Considering this, the main objective of this paper is to present se-cure protocols for link analysis with private weighted graphs.
Related works. If a trusted third party (TTP) which never devi-ates from the specified protocol and does not reveal any auxiliary information is available, link analysis can be readily and securely achieved; however, facilitating such a party is unrealistic in gen-eral. Therefore, we aim to design a protocol without using any TTP. In this subsection, we compare three existing solutions de-signed without a TTP. Table 1 provides a qualitative comparison of link analysis solutions in terms of computational complexity and privacy preservation.

Kempe et. al. have presented a decentralized spectral analy-sis (DSA) for computing the top k eigenvectors of a weighted ad-jacency matrix distributed over peer-to-peer networks [6], which can be readily used for PageRank. The computation of their pro-tocol is well decentralized and scales well even with large-scale networks; if DSA is used for the computation of PageRank, the computational complexity is O (  X  ) at each step at each node where  X  is the maximum degree of the graph (  X  n in sparse graphs). Their solution is not designed for the purpose of privacy preserva-tion originally, but the privacy of links and weights are preserved to some extent because private information is not directly exchanged between nodes and the communication occurs only between nodes connected with links. Nonetheless, there is no guarantee of privacy preservation because private information might be inferred from messages exchanged during the protocol execution.

Duan et. al. have presented a privacy-preserving link analy-sis (PPLA) using HITS [3] in the link-unaware model. The idea of their solution is based on the homomorphism of a public-key cryptosystem, which allows us to compute encrypted summation of integers without knowing summands. The limitation of their protocol is two-fold: (1) The protocol uses a special node called tallier, which collects encrypted values from all nodes and compute the encrypted summation of them by means of the homomorphic property. Due to this design, their solution is not fully decentral-ized and includes a step whose computational complexity is O ( n 2 ). Since we assume that hundreds or thousands of nodes participate in the protocol, this causes ine ffi ciency. (2) Their protocol allows the nodes to reveal intermediate values of authority in the mid-dle, which might enable neighboring nodes to infer private links or weights. Thus, their privacy preservation is not perfect as well.
Secure function evaluation (SFE) [11, 4] is a general and well studied methodology for evaluating any distributed computation privately; this can be a solution for link analysis in both link-aware and link-unaware model. Although the computational complexity of SFE is polynomially bounded and the privacy preservation with this solution can be perfect, these computations can be too ine cient for practical use, particular when the input size is large. We discuss these topics with experimental results in Section 6 again.
Our contribution. As discussed, link analysis solutions with both good scalab ility and perfect privacy-pr eservation have not been presented previously. In this paper, we formally state the problems of secure link analysis in both the link-aware model and the link-unaware model (Section 3). Our main contribution is as follows.
We propose secure spectral ranking (SSR) as a secure link anal-ysis method for link-aware / link-unaware private weighted graphs (Section 5). As variations of SSR, we present PrivateRank and Pri-vateHITS, too. These are secure expansions of well-known link analysis methods, PageRank and HITS.

Our solution theoretically guarantees privacy preservation of pri-vate weighted graphs. Especially in the solution for the link-aware model, it is guaranteed that nothing but the final output of the spec-tral ranking is revealed. In the link-unaware model, the solution allows each node to know the number of links pointing to that node as auxiliary information. Nevertheless, our solutions do not disclose any intermediate messages and achieve more rigorous se-curity compared to existing solutions. Furthermore, the compu-tational complexity of our secure spectral ranking is O ( link-aware model as well as DSA. In the link-unaware model, the computational complexity is O (  X + )where is the number of hops required for anonymous message transfer (Section 4.2). In our so-lution, the computation is decentralized and distributed equally to computational nodes, so is scalable compared to existing solutions.
Comparisons between our solutions and existing solutions are also summarized in Table 1. In order to demonstrate the e of our protocol, the results of computational experiments with the complexity analysis are shown in Section 6.
In these section, we introduce a basic link analysis method, spec-tral ranking. Then two well-known link analysis ranking methods, PageRank [9] and HITS [7] are introduced.

Let G = ( V , E , W ) be a weighted directed graph, where V { 1 ,..., n } is a set of vertices and E = { e between two vertices i and j has a non-negative weight w ij W = ( w ij )isdesignatedasa weight matrix . w ij = 0 means that there is no edge between i and j .The degree of vertex i is defined as d i = j  X  V w ij . The maximum degree is defined as  X = Let D = diag( d 1 ,..., d n )bethe degree matrix . The adjacency matrix A = ( a Let N out ( i ) = { j | j  X  V , e ij  X  E } and N in ( i ) (resp. N in ( i )) is a set of vertices which has an edge pointing from (resp. pointing to) vertex i .

Given a graph, link analysis provides some scores of each node by exploiting the link structure.
Consider a Markov chain in which a jump from node i to node j occurs with probability p ij . Given a weighted graph, the probability transition matrix P = ( p ij )isdefinedas P = D  X  1 W . The stationary distribution of a Markov chain is defined as the visiting probability i in t steps. From the nature of the transition probability matrix, the stationary distribution x = ( x 1 ,..., x n ) T satisfies where i x i = 1and x i  X  0forall i . If the Markov chain is ergodic, the largest eigenvalue is always 1 and the principal eigenvector (the eigenvector paired with the largest eigenvalue) of P becomes the stationary distribution of the Markov chain. Spectral ranking eval-uates the importance of nodes b y the visiting probability.
PageRank makes use of the stationary distribution to evaluate the importance of hyperlinked web documents. The idea behind this is that documents referred from documents with a higher PageRank are then themselves given a higher PageRank. Given a graph of web documents, the transition probability matrix is considered, where 1 is the vector whose elements are all 1. This transition matrix assumes a random walk by a user who randomly chooses a hyperlink in the current document and jumps to the next document with probability 1  X  . Otherwise, the user jumps to a document chosen randomly from the whole document set with probability (teleportation probability). Teleportation probability helps to guarantee the ergodicity of the Markov chain.

As represented in eq. 2, solving stationary distributions is re-duced to eigenproblems of P . In this case, we need only the left principal eigenvector. Power iteration is commonly used for this purpose. The initial vector is initialized s.t. i x (0) i the following updates are iterated until convergence where  X  denotes 2-norm. Usually, power iteration requires nor-is a probability vector, the normalization step can be skipped. The convergence property is shown as follows. The proof is omitted.
Lemma 1. Let x be the principal eigenvector of P .Let x ( t ) be the eigenvector obtained by power iteration after t updates. Then, where  X  1 and  X  2 denotes the largest and the second largest eiven-values, respectively.
Kleinberg has proposed a di ff erent link analysis HITS which evaluates the importance of mutually linked documents with the value of hub and the value of authority. The value of hub is higher if the node has more links to authoritative documents. The value of authority is higher if it is linked from nodes with higher value of hub. Let a and h be n dimensional vectors of the value of authority and the value of hub, respectively. Then, with the adjacency matrix A , HITS iterates the following update equations alternately: eigenproblems of A T A and AA T , as spectral ranking is.
Givenagraphwith n nodes, we assume that the elements of the adjacency matrix and the weight matrix are partitioned into (not necessarily disjoint) n parts. Each node possesses a mutually di ent part of the matrix privately. We begin with the definitions of the matrix partitioning model. Then, three types of private weighted graphs are defined as typical privacy models of graphs. Based on these definitions, we state problems of secure link analysis.
Let M = ( m ij )bea n  X  n matrix. We write the i th row of M as m i  X  and the i th column of M as m  X  i . Let there be n nodes. M are partitioned into n parts and each node privately holds one of the parts. In this paper, we specifically focus on the following two typical partitioning patterns.

Definition 1. (Row private) Let there be a n  X  n matrix M and n parties. For all i ,ifthe i th party knows a row vector m not know other row vectors m p  X  ( p i )of M ,then M is row private .
Definition 2. (Symmetrically private) Let there be a n  X  n ma-trix M and n parties. For all i ,ifthe i th party knows m but does not know other elements m pq where p , q i ,then M is symmetrically private .
 Based on these matrix partitioning models, three types of privacy models of graph, private weighted graphs , are stated.

Definition 3. (Weight-aware private weighted graph) Let G ( V ,
E , W )where V is a collection of computational nodes. If the adjacency matrix A (associated with E ) and the weight matrix W are symmetrically private, G is a weight-aware private weighted graph.

Definition 4. (Link-aware private weighted graph) Let G = where V is a collection of computational nodes. If the adjacency matrix A (associated with E ) is symmetrically private and the weight matrix W is row private, G is a link-aware private weighted graph. When adjacency matrix A is symmetrically private, node i knows N ( i )and N out ( i ), i.e., node i knows who links to i and who is linked to from i . The same holds for the weight matrix. In the link-aware model, although node i knows who links to node i , node i cannot know the weight value w ji .

Definition 5. (Link-unaware private weighted graph) Let G ( V ,
E , W )where V is a collection of computational nodes. If the adjacency matrix A (associated with E ) and the weight matrix W are row private, G is a link-unaware private weighted graph. In this paper, we treat weight-aware private weighted graphs as link-aware private weighted graphs since the former is the special case of the latter. The reason is described in Section 3.3. link analysis, in which f takes the weight matrix W  X  R n input and returns the score matrix X  X  R n  X  d as the output. Given a private weighted graph, the problems of secure link analysis are stated as follows.

Statement 1. Secure link analysis for link-aware (resp. link-unaware) private weighted graph: Let there be link-aware (resp. link-unaware) private weighted graph G = ( V , E , W ). After the ex-ecution of secure link analysis among nodes, f ( W ) = X is correctly evaluated and X is distributed such that X is row private among nodes. Furthermore, each node learns nothing else and G is kept link-aware (resp. link-unaware). Intuitively, if the link analysis is secure in the sense of Statement 1, what the i th node can learn is limited to the i th row of score matrix X and nothing else. In the link-aware / link-unaware model, W and A need to be kept symmetrically / row private after the execution of the protocol. In Section 5, we specifically present protocols of spectral ranking that are secure and correct in the sense of Statement 1. Then, expansions to PageRank and HITS are shown.
Most of our discussions in this subsection are true of spectral ranking, PageRank, and HITS, so we restrict our attention to spec-tral ranking for now.

Link-aware model: Let the i th node hold x i and update it in power iteration. The update of the i th element is written as x holds. This means that i th node can update x ( t ) i if i th node can re-ceive x ( t  X  1) j p ji from node j for all j  X  N ( i ) in is that both x j and p ji need to be kept private in the link-aware model. To update this without node i being able to know x we introduce a public-key cryptography with homomorphic prop-erty, which allows any node to add two ciphers without decryption. Node j encrypts x j and p ji in a way that node i cannot decrypt, and send them to node i . With these, node i can update eq. 7 without learning j (  X  N in ( i )) X  X  information by means of the homomorphism. The weight-aware model can be equally treated.

Link-unaware model : The significant di ff erence between the weight / link-aware model and the link-unaware model is in the na-ture of the communication. Let there be a link of node j pointing to node i . In the link-aware model, node j is allowed to estab-lish a direct connection with node i because the connection does not violates the given privacy model. On the other hand, if the same protocol is executed in the link-unaware model, a request for a connection to node i itself reveals to node i that a link of node j is pointing to node i . Thus, in the link-unaware model, the problem is not only in the secrecy of messages but also in the anonymity of connections. For this, we make use of the concept of onion routing , which provides anonymous connection over a public network.
In next section, we introduce two tools, homomorphic cryptog-raphy and onion routing.
In a public key cryptosystem, encryption uses a public key that can be known to everyone, while decryption requires knowledge of the corresponding private key . Given a corresponding pair of ( sk , pk ) of private and public keys and a message m ,then c Enc pk ( m ; ) denotes a (random) encryption of m ,and m = denotes decryption. The encrypted value c uniformly distributes over Z N if is taken from Z N randomly. An additive homomor-phic cryptosystem allows addition computations on encrypted val-ues without knowledge of the secret key. Specifically, there is some operation  X  (not requiring knowledge of sk ) such that for any plain-texts m 1 and m 2 , where is uniformly random provided that at least one of 1 is. Based on this property, it also follows that given a con-stant k and the encryption Enc pk ( m 1 ; ), we can compute multi-plications by k via repeated application of  X  . This also enables a re-randomization property, which allows the computation of a new random encryption c = Enc pk ( m ; )of m from an existing encryp-tion c = Enc pk ( m ; )of m , again without knowledge of the private key or of m , as follows: In the rest of the paper, we omit the random number from our encryptions for simplicity.

Threshold cryptosystem. In an ( m , t ) -threshold cryptosystem , m nodes share a common public key pk while the nodes hold dif-ferent private keys sk 1 ,..., sk n . Each node can encrypt any message with the common public key. Decryption cannot be performed by fewer than t nodes, and can be performed by any group of at least t nodes using a recovery algorithm based on the public key and their tem that provides semantic security (under appropriate computa-tional hardness assumptions), re-randomization, the additive homo-morphic property, and threshold d ecryption, such as the generalized Paillier cryptosystem [1]. Assume that sender node s  X  V wants to send a message m  X  Z to receiver node r  X  V , but the sender does not want the receiver to identify who is the sender (sender anonymity). The onion routing network allows the connection between the sender and receiver to remain anonymous [5]. In the onion routing network, each node (called onion router )hasadi ff erent key pair of a (not necessarily homomorphic and threshold) public-key cryptosystem.
 The message transferred by onion routing is prepared as follows. Let o 1 ,..., o be onion routers chosen by the sender. The message is sent from the sender s , travels through o 1 ,..., o , and arrives at the receiver r .Let pk r be the receiver X  X  public key and pk public key of the h th onion router on the route ( h = 1 ,..., sender prepares and sends a message (called an onion ) as follows: 1. Computes c r = Enc pk r (0) 2. Computes c = (Enc pk ( r ) , Enc pk ( c r )) 3. For h =  X  1 ,..., 1, computes c h = (Enc pk h ( o h + 1 4. Sends onion ( c 1 , Enc pk r ( m )) to o 1 The onion has a layered data structure where the h th layer includes the address of the ( h + 1)th onion router encrypted with the h th onion router X  X  public key. Thus, o h can learn o h + 1 and o the onion is sent from o h  X  1 ), but cannot learn the addresses of the other onion routers on the route b ecause these are encrypted in such a way that o h cannot decrypt them. Furthermore, o h cannot learn whether o h + 1 is the receiver or not. Thus, the sender anonymity is preserved.

The onion is transferred to the receiver as follows. o h receives ( c , Enc o learns that she is the receiver and obtains the message as m Dec sk r (Enc pk r ( m )). Otherwise, o h learns o h + 1 and ( c is sent to o h + 1 . The message m is learned only by the receiver be-cause it is encrypted by the receiver X  X  public key.
In this section, as secure link analysis, secure spectral ranking (SSR) in the link-aware model is presented. Then, the protocol is expanded to PageRank, HITS, and protocols for the link-unaware case. The detail of SSR is described in Figure 1.
For secure spectral ranking, the computation of eq. 7 is per-formed by means of a homomorphic public-key cryptosystem. We assume that all nodes agree to make use of a common key set K = { pk , sk i ,..., sk n } of the threshold homomorphic public-key cryptosystem. sk i is held only by the i th node; pk is commonly known to all nodes. The key set is securely prepared by means of distributed key generation schemes. See [2] for example.
In the first step, probability matrix P = D  X  1 W is prepared. p w / d key cryptosystems take only integers as inputs, p ij is magnified lar power iteration, the stationary distribution is initialized to be a probability vector. Instead, in the second step of this protocol, q is initialized such that i q i = K with su ffi ciently large K and q for all i for the same reason. Each node can simply initialize as q
In the third step, power iteration is performed, in which node i is responsible for the update of the i th element of q .

The following lemma shows the remaining steps correctly com-pute the principal eigenvector of P .

Lemma 2. Let  X   X  be the stationary distribution of P . The output where  X  1 and  X  2 are the largest and the second-largest eigenvalues of P , respectively.

P roof . Consider updates in step 3(b). By the homomorphic property of the cryptosystem, the update is rearranged as:
Note that if both sides of eq. 11 could be decrypted, is obtained, which configures power iteration with B . Thus, the updates with eq. 11 and with eq. 7 are equivalent except that values are magnified, encrypted, and not normalized in eq. 11. Let ( x (0) , x (1) ,... ) be the sequence of regular power iteration with parallel since B = LP , but the size is di ff erent since q ( t ) is not normalized. The summation n i = 1 q ( t ) i is From n i = 1 q (0) i = K and eq. 13, we obtain sequently, from Lemma 1, it is concluded that q ( t ) / KL
Procedure LinkAwareSecureSpectralRanking ( W , K , L )
Figure 1: Secure Spectral Ranking in the Link-aware Model to the stationary distribution of P . Furthermore, the convergence is geometric
Thus, the output of the protocol,  X  ( t ) = 1 KL t  X  1 ( q verges to the stationary distribution of P .
As mentioned, secure function evaluation (SFE) is a cryptographic primitive which allows two or more parties to evaluate a specified function of their inputs without revealing (anything else about) their inputs to each other [4, 11]. We make use of SFE for normalization and convergence detection.

From Lemma 2, the normalization of q ( t ) seems to be not re-quired in the middle of the protocol; however, if q ( t ) than N , the addition of encrypted integers does not work correctly because the cryptography is modulo N arithmetic. Since i increases geometrically, normalization is required to avoid over-of SFE for private division [10], which allows us to divide en-Since N = 2 1024 in typical cryptography settings, the normalization does not have to be invoked so often. For convergence detection, node with a given threshold parameter  X  . This is readily realized by SFE for private comparison of q ( t ) i and q ( t  X  1) at each node.
We assume nodes behave semi-honestly , a common assumption in secure distributed computation. This assumes nodes follow their protocol properly, but might also use their records of intermediate computations in order to attempt to learn other parties X  private in-formation. Then, we show the security of our protocol.

Lemma 3. Let T be the number of the final update. Assume that all nodes behave semi-honestly. Then, for all i , node i learns only i and nothing else after the execution of secure spectral ranking in the link-aware model.
 The security proof should be stated following the standardized proof methodology of secure multi-part y computation with polynomial simulators as shown in [4]; however, because of the limitation of the space, we briefly explain why this protocol does not reveal pri-vate information.

The messages exchanged across the graph in this protocol are: We assume that there exists a node which eavesdrops all these mes-sages exchanged across the graph. Then, we show that the node cannot derive any information other than the final output from what the node observed from these messages.

If node i observes all these messages, node i cannot solely de-crypt c ji , pk because the threshold cyrptosystem is applied. In step 4, node i can decrypt Enc pk ( q t i ) by gathering decryption shares, but this is the final output of the node i and does not violate the privacy. If a node other than node i observes all these messages, it cannot decrypt both c ji , pk and the decryption shares. As shown, even when a node observes all exchanged messages, no knowledge other than the final output for the node can be learned.

Theorem 1. Assuming all nodes behave semi-honestly, secure spectral ranking correctly and securely computes the stationary dis-tribution of link-aware private weighted graph in the sense of State-ment 1.

The proof is readily derived from Lemma 2 and Lemma 3.
Expansion of secure spectral ranking to PageRank, called Privat-eRank, is straightforward. Th e transition probability from node i to node j is obtained as Again, b ij needs to be magnified by L as b ij  X  Lp ij such that Lp with B = ( b ij ). Given a vector of ( t  X  1)th update q ( t update of the i th element is performed as both sides of eq. 17 with pk , we obtain
Enc =  X   X   X   X   X   X   X  Note that eq. 18 can be updated only with L , K , t ,, n and Enc for j  X  N in ( i ); these are possessed by node i . In PrivateRank, B is not a sparse matrix; however, by updating with eq. 18, this com-putation can be executed in O (  X  ). By modifying the protocol of secure spectral ranking as follows, the protocol of PrivateRank is obtained: The remaining steps are processed similarly. The security proof is omitted here. Expansion of secure spectral ranking to HITS, called Private-HITS, is straightforward, too. In case of HITS, we assume that the i th node is responsible for the update of the value of hub and the value of authority of the node. Then, the computation of eq. 6 in the i th node are rewritten as follows: By encrypting both sides of these update equations, are obtained. The updates are performed as follows. First, node i receives (resp. sends) Enc pk ( h ( t  X  1) j ) (resp. Enc N ( i ) (resp. to j  X  N out ( i )) . Then, updates Enc pk ( h 20. Eq. 21 is updated at each node similarly. The security proof is omitted here, too.
In the beginning of this section, we assumed that all nodes use a common key set. In such a system, if more than t nodes collude together, the privacy of any node is compromised. We present the way to localize the coverage of the public key where each node independently generates a key set; the key set is valid only among neighbors of the node that generates the public key.
 K monly known by { i , N ( i ) } ; sk i 0 is known only by i ; the remaining private keys are privately distributed to each node in N ( i ).
In this setting, values possessed by node j  X  N in ( i ) are encrypted by public key pk j of K ( j ). So, when node i computes the update in step 3(b) with a message sent from j , the encryption key of the mes-sage needs to be switched from pk j to pk i . Since node i and node j are neighbors each other, node i and node j hold one of secret keys of K ( j )and K ( i ), respectively. When node j holds Enc the protocol described below allows node i to learn Enc pk switching the public key securely. 1. node j : Generates a  X  r Z N . Then, send c  X  Enc pk j 2. node i : Computes d i  X  Dec sk j
For simplicity, we describe the protocol for (2 , 2)-threshold cryp-tosystem; however, expansion for ( m , t )-threshold cryptosystem is straightforward.
In step 3(b) of secure spectral ranking, the public key is switched to the public key of the node who receives by using this protocol. In this setting, even when more than t nodes collude together, node i  X  X  privacy is not compromised unless the number of colluding nodes in N ( i ) is greater than t . In other words, node i can protect its privacy by itself by refusing suspicious nodes to join the protocol in the key distribution phase of node i .
In the link-aware case, node j  X  N in ( i ) can directly send mes-sages to node i without violating the privacy model. However, in the link-unaware model, establishing the connection in this proto-col itself violates the link-unawareness as mentioned. If node i can receive messages from node j  X  N ( i ) with preserving the sender anonymity, the secure spectral ranking for the link-aware model is readily expanded to that for the link-unaware model.

For this, node j  X  N ( i ) uses the onion routing to send messages to node i in step 3(a). In step 3(b), node i can compute Enc by multiplying all messages sen t from anonymous nodes. Unfortu-nately, even if the onion routing is used for the message delivery, the protocol is not secure in the sense of Statement 1 in the link-unaware model. Node i cannot know whose links are pointing to node i , but can know how many links are pointing to node i ,by counting the number of messages anonymously transferred.
Since the onion routing supports real-time and bidirectional con-nections, the key-switching protocol can work via the onion rout-ing. It follows that the localization of the coverage of public-keys are valid in the link-unaware model, too.
External party. Although our protocol does not need any trusted third parties, some special nodes might be needed for the manage-ment of the overall communication, such as routing or broadcast, depending on the network design. Since this does not a ff curity and the correctness of the protocol, we do not pursue this in this paper any further.

Exploitation of results. After the completion of the protocol, each node can disclose the final output in public if there is no risk for privacy violation. Even if the outputs cannot be disclosed, some knowledge, such as ranking of neighboring nodes, can be learned by introducing a security protocol implemented using SFE designed for the purpose.

Stronger security. Although our protocol guarantees the secu-rity under the semi-honest assumption, this does not necessarily mean that each node inputs their private link information correctly and follows the protocol description honestly. By making use of the techniques of zero-knowledge proofs, we can enforce each node to behave honestly to the specified protocol. To guarantee the cor-rectness of the input, the protocol needs to be designed such that honest inputs itself benefit nodes ( incentive-compa tibility). Proto-cols meeting these conditions are remained for the future work.
We performed experiments to examine the e ffi ciency of our pro-tocols. Programs were implemented in Java 1.6.0. As the cryp-tosystem, [1] with 1024-bit keys was used. For SFE, Fairplay [8] was used. Experiments were carried out under Linux with Xeon 2.8GHz (CPU), 2GB (RAM).

Our solutions, PrivateRank or PrivateHITS, can learn exactly the same output as PageRank or HITS which do not consider privacy preservation. Therefore, our attention in these experiments is not on what kind of knowledge can be extracted from link structures, but on the computational e ffi ciency of our solutions, and also on what kind of information is disclosed from the protocol execution. For the same reason, we used artificially generated random graphs for our experiments, in that the degree of each node is equally set to given  X  . Experiments with a large number of nodes are unreal-istic. Instead, we simulated the network on a single computer; the computational time was measured without including the communi-cation time. All results are averaged over 20 trials.
We compared the computational e ffi ciency in PrivateRank (PR) in the link-aware model with that of both secure function evaluation (SFE) and decentralized spectral analysis (DSA). Since the compu-tational complexity of a single update of these solutions is depen-dent only on the maximum degree  X  , Figure 2 shows the change in computational time per single update with respect to  X  2 shows the summary of the computation time and the disclosed information from the protocol execution.

DSA has been designed for spectral analysis on peer-to-peer net-works; the computation is distributed equally among the nodes. The computational complexity per single update is O (  X  ). Since DSA does not include any cryptographic operation, the computa-tion time is quite small. DSA does not reveal the weights in the exchanged messages, so the privacy is preserved to some extent; however, the weights may be inferred from observed messages in some cases. Thus, DSA does not have theoretical / statistical guar-antees of the privacy preservation.

SFE can originally achieve perfect privacy preservation as de-scribed in Statement 1; however we relaxed the requirement for the security in these experiments for the following reason. Although the computation time of SFE is bounded by the polynomial of the input size, if we strictly implement power iteration using SFE, the computation time would be unrealistically large. Instead, we imple-mented the SFE such that only a single update (step 3(a) and 3(b) of power iteration) is evaluated and then x ( t ) i is returned to node i in each update. This allows the node to know intermediate infor-mation. Nevertheless, we can interpret the results of this version of SFE as the lower bound of the computation time of the strict imple-mentation. As shown in Figure 2, the computation time of SFE is rather larger than that of the other solutions, even with the relaxed security.

We evaluated our PrivateRank in two settings, the common key setting and the collusion-resistant setting. PrivateRank can be con-sidered a cryptographic extension of DSA. Therefore, the computa-tion is equally distributed among the nodes and the computational complexity per single update at each node is O (  X  )asisthatofDSA; however, the computation time is rather larger than DSA due to the cryptographic operations including SFE steps for normalization and convergence detection. The computation time of PrivateRank seems to be constant in  X = 2 0 and 2 4 in the figure. This is because the computation time for normalization dominates that of power it-eration steps. In summary, in the link-aware model, we conclude that both e ffi cient computation and perfect privacy preservation are achieved by our solutions.
In next experiments, we compared our link-unaware PrivateHITS (PH) with privacy-preserving link analysis (PPLA). For the execu-tion of PPLA, a semi-honest party called a tallier is required. At each update of PPLA, node i sends the encryption of h ( t ) j  X  V to the tallier; the tallier sums them for all i . Since the sum-mation is centralized at the tallier, the computational complexity at each update is O ( n 2 ). Furthermore, PPLA allows node i to learn a in the middle, so Statement 1 is not achievable. Table 2: Comparison of the computation time and the informa-tion disclosed to node i in the link-aware model,  X = 64 Figure 2: Max degree v.s. computational time in the link-aware model.

In our privateHITS in the link-unaware model, onion routing was used. The number of hops is dependent on the routing algorithm used; however, this can be at most O (log n ) in general. There-fore, the computational complexity involved in setting up the en-crypted layered structure of addresses is O (log n ). In the routing process, each router strips o ff the outer layer and decrypts it in or-der to know the next destination. This process requires O (log n ) decryption. The complexity of the remaining steps is the same as that of the link-aware model. Thus, the computational complex-ity of link-unaware PrivateHITS per single update at each node is O (  X + log n ).

Figure 3 shows the change in computation time with respect to the number of the nodes per single update. The computation time of PPLA shows quadratic growth. If n = 2 13 ( = 8192), the com-putation time of PPLA at each update is around three hours. The computation time of privateHITS is measured for  X = 2 3 , 2 n gle update is around six seconds. As shown, if the graph is sparse, our solution performs more e ffi ciently. In the link-unaware model, although our solution allows node i to learn | N in ( i ) messages are not revealed and the anonymity of the links is theo-retically preserved.
In this paper, we formally stated the concept of link-aware unaware private weighted graphs and investigate secure link analy-sis for private weighted graphs.

The concept of secure computations using private weighted graphs opens up a way of exploring knowledge from various privately con-nected entities. Graph m ining problems, such as node clustering, link prediction, and frequent pattern extraction of private weighted graphs are promising future problems.
 Table 3: Comparison of the computation time and the informa-tion disclosed to node i in the link-unaware model, n = 8192 Figure 3: Number of nodes vs. computation time in the link-unaware model. [1] I. D X mgard and M. Jurik. A Generalisation, a Simplification [2] I. D X mgard. and M. Koprowski. Practical threshold RSA [3] Y. Duan, J. Wang, M. Kam, and J. Canny. Privacy Preserving [4] O. Goldreich. Foundations of Cryptography: Volume 2, [5] D. Goldschlag, M. Reed, and P. Syverson. Onion routing. [6] D. Kempe and F. McSherry. A decentralized algorithm for [7] J. Kleinberg. Authoritative Sources in a Hyperlinked [8] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay: a [9] L. Page, S. Brin, R. Motwani, and T. Winograd. The [10] J. Sakuma, S. Kobayashi, and R.N. Wright.
 [11] A. C.-C. Yao. How to generate and exchange secrets. In
