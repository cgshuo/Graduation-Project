 With the exponential growth of Web contents, Recommender System has become indispensable for discovering new infor-mation that might interest Web users. Despite their suc-cess in the industry, traditional recommender systems suffer from several problems. First, the sparseness of the user-item matrix seriously affects the recommendation quality. Second, traditional recommender systems ignore the connec-tions among users, which loses the opportunity to provide more accurate and personaliz ed recommendations. In this paper, aiming at providing more realistic and accurate rec-ommendations, we propose a factor analysis-based optimiza-tion framework to incorporate the user trust and distrust relationships into the recommender systems. The contribu-tions of this paper are three-fold: (1) We elaborate how user distrust information can benefit the recommender systems. (2) In terms of the trust relations, distinct from previous trust-aware recommender systems which are based on some heuristics, we systematically interpret how to constrain the objective function with trust regularization. (3) The exper-imental results show that the distrust relations among users are as important as the trust relations. The complexity anal-ysis shows our method scales linearly with the number of ob-servations, while the empirical analysis on a large Epinions dataset proves that our approaches perform better than the state-of-the-art approaches.
 Categories and Subject Descriptors: H.3.3 [Informa-tion Search and Retrieval] Information Filtering; J.4 [Com-puter Applications] Social and Behavioral Sciences General Terms: Algorithm, Experimentation Keywords: Recommender Systems, Social Network, Trust, Distrust, Matrix Factorization
Recommender systems are becoming increasingly indis-pensable nowadays since they focus on solving the informa-tion overload problem by providing users with more proac-tive and personalized information services. Examples of suc-cessful applications of recommender systems include prod-uct recommendations at Amazo n, movie recommendations at Netflix, etc. Due to the potential commercial value and the great research challenges, recommendation techniques have drawn much attention in data mining [2, 11], informa-tion retrieval [15, 30] and machine learning [22, 25] com-munities. Recommendation algorithms suggesting person-alized recommendations greatly increase the likelihoods of customers making the purchase online.

However, no matter what methods are employed, tradi-tional recommender systems only utilize the user-item rat-ing matrix for recommendations. Hence, in order to provide more personalized and accura te recommendations to users, researchers start to study the t rust-aware recommender sys-tems. Several trust-aware methods have been proposed to address the data sparsity and recommendation accuracy prob-lems [1, 19, 20, 21].

In [19], a trust-aware method for recommender system is proposed. In this work, the collaborative filtering process is informed by the reputation of users which is computed by propagating trust. Trust values are computed in addition to similarity measures between users. In [21], two compu-tational models of trust are proposed and are incorporated into standard collaborative filtering frameworks in a variety of ways. The experimental analysis shows that these trust models can lead to improved predictive accuracy during rec-ommendation.

Although these trust-aware methods move a nice step for-ward in the research of recommender systems, these methods have several inherent weaknesses. First of all, these methods are all memory-based methods which employ only heuristic algorithms to generate recommendations. Secondly, the re-lationship between the trust network and the user-item ma-trix has not been studied systematically. Moreover, these methods are not scalable to very large datasets, since most of them need to calculate pairwise user similarities and pair-wise user trust scores. Lastly, these methods all ignore a very important information, i.e., distrust relations among users.
In this paper, aiming at providing solutions for the prob-lems analyzed above, we propose a factor analysis framework with the constraints of trust and distrust relations among users. Our work is based on the following intuitions:
Based on the above intuitions, the trust and distrust re-lations between users can be easily modeled by adding the regularization terms into the objective functions of the user-item matrix factorization. By performing a simple gradient descent on the objective function, we can learn the latent low-dimensional user-specific and item-specific matrices for the prediction of users X  favors on different items. The exper-imental results on a large Epinions 1 dataset shows that our method outperforms the state-of-the-art collaborative filter-ing and trust-aware recommendation algorithms. Moreover, the complexity analysis indicates that our approach can be applied to very large datasets, since it scales linearly with the number of observations.

The remainder of this paper is organized as follows. Sec-tion 2 presents our work on recommender systems with trust and distrust constraints. The results of an empirical anal-ysis are presented in Section 3. In Section 4, we provide an overview of several major approaches for recommender systems and other related work, followed by the conclusions and future work in Section 5.
Previous recommender system techniques only utilize the information of the user-item rating matrix for recommen-dations while ignoring the trust and distrust relationships among users. However, the fact is, trust and distrust infor-mation is very helpful in making the recommendations since to some extent, they represent the  X  X imilar X  and  X  X issimi-lar X  relationships. With the exponential growth of Web 2.0 Web sites, providing personalized recommendations and in-corporating trust and distrust into traditional recommender systems are becoming more and more important.

In this section, we first describe the problem we study in Section 2.1, and then brief the matrix factorization tech-nique for recommendation in Section 2.2. We provide solu-tions on how to incorporate the distrust and trust into rec-ommendations in Section 2.3, Section 2.4 and Section 2.5. Finally, the complexity analysis is conducted in Section 2.6.
Fig. 1(a) illustrates a typical Web user we will study in this paper. In this figure, user u 1 rated three items v 1 , v http://www.epinions.com v . In addition to the rating data, this user also maintains two lists: trust list and distrust list. The trust list stores all the users that user u 1 trusts while the distrust list includes all the users that user u 1 distrusts.

By integrating all the information from all the users, we summarize three different data sources: the user-item rat-ing matrix shown in Fig. 1(b), the user trust graph shown in Fig. 1(c) and the user distrust graph shown in Fig. 1(d). In this example, totally, there are 5 users (from u 1 to u and 5 items (from v 1 to v 5 ) with 6 trust relations (edges) and 5 distrust relations between users. Each relation is as-sociated with a weight w ij in the range (0 , 1] to specify how much user u i trusts or distrusts user u j . In an online social network Web site, the weight w ij is often explicitly stated by user u i . Typically, each user also rates some items on a 5-point integer scale to express the extent of the favor of each item (normally, 1, 2, 3, 4 and 5 represent  X  X ate X ,  X  X on X  X  like X ,  X  X eutral X ,  X  X ike X  and  X  X ove X , respectively).
The problem we study in this paper is how to effectively and efficiently predict the missing values of the user-item matrix by employing these different data sources.
A common and popular approach to recommender sys-tems is to fit a factor model to the user-item rating matrix, and use it in order to make further predictions [8, 18, 22, 25]. The premise behind a low-dimensional factor model is that there is only a small number of factors influencing the pref-erences, and that a user X  X  preference vector is determined by how each factor applies to that user [22].

Consider an m  X  n user-item rating matrix R ,thematrix factorization method employs a rank-l matrix X = U T V to fit it, where U  X  R l  X  m and V  X  R l  X  n .Fromtheabove definition, we can see that the low-dimensional matrices U and V are unknown, and need to be estimated. Moreover, this feature representations have clear physical meanings. In this linear factor model, each factor is a preference vector, and a user X  X  preferences correspond to a linear combination of these factor vectors, with user-specific coefficients. More specifically, each row of U performs as a  X  X eature vector X , and each row of V is a linear predictor, predicting the entries in the corresponding column of R based on the  X  X eatures X  in U .
Actually, most recommender systems use integer rating values from 1 to R max to represent the users X  judgements on items. In this paper, without loss of generality, we map the ratings 1 , ..., R max to the interval [0 , 1] using the func-tion f ( x )= x/R max . However, simply employing U T to predict the missing value R i,j can make the prediction outside of the range of valid rating values. Hence, instead of using a simple linear factor model, in this paper, the inner product between user-specific and movie-specific fea-ture vectors is mapped through a nonlinear logistic function g ( x )=1 / (1 + exp(  X  x )), which bounds the range of the pre-dictions into [0, 1].
 Hence, by adding the constraints of the norms of U and V , we have the following optimization problem: where I R ij is the indicator function that is equal to 1 if user u rated item v j and equal to 0 otherwise, and  X  2 F denotes the Frobenius norm.

The optimization problem in Eq. (1) minimizes the sum-of-squared-errors objective function with quadratic regular-ization terms. It also has a probabilistic interpretation with Gaussian observation noise, which is detailed in [25]. How-ever, the same as many other collaborative filtering meth-ods, this approach only utilizes the user-item rating matrix for the recommendations. In the following sections, we will introduce how to incorporate t he distrust and trust infor-mation into the matrix factorization method.
In this section, we analyze how the distrust relationships can affect the recommendation processes.

Distrust is one of the most controversial topics and is-sues to cope with, especially when considering trust met-rics and trust propagation [34]. Although many researchers have already conducted comprehensive studies on the trust related applications, the understanding of distrust relations is still unclear to the researchers. Distrust is totally dif-ferent with trust, hence the method employed in the trust-aware recommender systems cannot be simply transplanted to distrust-aware recommender systems. For example, the most popular method in trust-aware recommender systems is to improve the recommendation quality by the propaga-tion of trust; however, we cannot simply use propagation methods to model distrust due to the reason that one per-son X  X  enemy X  X  enemy is not necessarily the enemy of this person.

However, we cannot ignore the distrust information since as reported in [6], experience with real-world implemented trust systems such as Epinions and eBay suggests that dis-trust is at least as important as trust.

In this paper, we employ a simple intuition to make pos-itive influence using distrust information. If a user u in the distrust list of a user u i , most probably, it is because the user u i thinks the user u d  X  X  taste is totally different from him/her. Actually, this information is very useful on the rec-ommender systems. We could interpret this problem using the following intuition: if user u i distrusts user u d ,thenwe could assume that the features U i and U d will have a large distance in the feature space. Based on this assumption, for all the users in the user space, we summarize the following optimization function: where D + ( i )isthesetofusersthatuser u i distrusts, and S to user u d . The larger the value of S D id is, the more the user u distrusts the user u d .

Based on Eq. (1) and Eq. (2), we define the recommen-dation with distrust relations as the following optimization problem: min
In the online opinion sharing or recommender systems, the distrust value S D id is typically issued by user u i with respect to user u d , and it cannot accurately describe the relations between users since it contains noises and ignores the graph structure information of distrust network. For instance, similar to the Web link adjacency graph in [32], in a distrust graph, the confidence of distrust value S D id be decreased if user u i distrusts lots of users; however, the confidence of distrust value S D id should be increased if user u d is trusted by lots of users. Hence, we propose to smooth the term S D id by incorporating local authority and local hub values in Eq. (3), where  X  + ( u i ) represents the outdegree of user u i in the distrust graph, while  X   X  ( u d ) indicates the indegree of user u d in the distrust graph.

A local minimum of the objective function given by Eq. (3) can be found by performing gradient descent in U i , V j ,  X   X  X  i =  X   X  X  j = where D  X  ( i ) is the set of users that distrust user u i
In this section, we discuss how to incorporate the trust relationships into recommender systems. In order to model the trust relationships between users realistically, we first need to understand where the  X  X rust X  comes from. Actually, on the Web, it is not difficult to interpret the generation of trust relations. For example, in an opinion sharing Web site, if a user u t is in the trust list of a user u i , most probably, the underlying cause is that user u i agrees with most of user u  X  X  opinions. Moreover, how much user u i trusts user u t depends on how much user u i agrees with user u t .
Based on the above interpretation, if user u i trusts user u , we can assume that the feature representations U i and U of these two users are close in the feature space. Following this intuition, we minimize the objective function where T + ( i ) is the set of users that user u i trusts, and S (0 , 1] is the degree indicates how much user u i trusts user u . The larger the value of S T it is, the more the user u i the user u t .

By employing Eq. (1) and Eq. (6), we define the recom-mendation problem with trust relations as the following op-timization problems: min
Similar to Eq. (4), we also smooth the trust value S T it Eq. (7) based on the following equation: where  X  + ( u i ) represents the outdegree of user u i in the trust graph, while  X   X  ( u t ) indicates the indegree of user u trust graph.

In Eq. (7), by performing gradient descent in U i , V j ,we have  X   X  X  i =  X   X  X  j = where T  X  ( i ) is the set of users that trust user u i .
After the low-dimensional latent feature spaces U and V are learned, the next step is to predict the ratings for the active users. For the given missing data R ij ,thevaluepre-dicted by our method is defined as We will evaluate the prediction quality in Section 3.
The main computation of gradient methods is evaluat-ing the object functions L D , L T and their gradients against variables.

Because of the sparsity of matrices R , S D and S T ,the computational complexities of evaluating the objective func-tions L D are L T are O (  X  R l + m rl )and O (  X  R l + m sl ), re-spectively, where  X  R is the number of nonzero entries in the matrix R , l is the dimensions of the user feature, m is the number of users, r is the average number of users that a user distrusts, and s is the average number of friends that a user trusts. Since almost all of the online social network graphs fit the power-law distribution, a large long tail of users only have few trusted or distrusted users. This indicates that the values of r and s are relatively small. Generally, m r&lt;&lt; X  and m s&lt;&lt; X  R .
 The computational complexities for the gradients  X  L and  X  L D  X  X  in Eq. (5) are O (  X  R l 2 + m ( r + r ) l )and O (  X  respectively, where r is the average number of users who distrust a user, which is also a small value. Actually, in a distrust network graph, the value of r is always equal to the value of r ,whichis0 . 94 in the dataset we employ in the Section 3.
 The computational complexities for the gradients  X  L and  X  L T  X  X  in Eq. (9) are O (  X  R l 2 + m ( s + s ) l )and O (  X  respectively, where s is the average number of friends who trust a user. In a trust network graph, the value of s is also equal to the value of s ,whichis5 . 45 in the dataset we employ in the experiments.

Therefore, the total computational complexity in one it-eration is O (  X  R l +  X  R l 2 ), which indicates that theoretically, the computational time of our method is linear with respect to the number of observations in the user-item matrix R . This complexity analysis shows that our proposed approach is very efficient and can scale to very large datasets.
In this section, we conduct several experiments to com-pare the recommendation qualities of our approaches with other state-of-the-art collaborative filtering and trust-aware recommendation methods. Our experiments are intended to address the following questions: 1. How does our approach compare with the published 2. How do the model parameter  X  and  X  affect the accu-
We choose Epinions as the data source for our experi-ments on trust and distrust-aware recommendations. Epin-ions.com is a well known knowledge sharing site and review site, which was established in 1999. In order to add reviews, users (contributors) need to register for free and begin sub-mitting their own personal opinions on topics such as prod-ucts, companies, movies, or reviews issued by other users. Users can also assign products or reviews integer ratings from 1 to 5. These ratings and reviews will influence future customers when they are about to decide whether a prod-uct is worth buying or a movie is worth watching. Every member of Epinions maintains a  X  X rust X  list which presents a network of trust relationships between users, and a  X  X lock (distrust) X  list which presents a network of distrust relation-ships. This network is called the  X  X eb of trust X , and is used by Epinions to re-order the pro duct reviews such that a user first sees reviews by users that they trust. Epinions is thus an ideal source for experiments on social recommendation. Table 1: Statistics of User-Item Rating Matrix of Epinions Table 2: Statistics of Trust Network of Epinions
The dataset used in our experiments consists of 131,580 users who have rated at least one of a total of 755,137 differ-ent items. The total number of ratings is 13,430,209. The density of the user-item matrix is 0 . 014%. We can observe that the user-item matrix of Epinions is very sparse, since the densities for the two most famous collaborative filtering datasets Movielens (6,040 users, 3,900 movies and 1,000,209 ratings) and Eachmovie (74,424 users, 1,648 movies and 2,811,983 ratings) are 4 . 25% and 2 . 29%, respectively. More-over, an important reason that we choose the Epinions dataset is that user trust and distrust information is not included in the Movielens and Eachmovie datasets. The statistics of the Epinions user-item rating matrix is summarized in Table 1.
As to the user trust network, the total number of is-sued trust statements is 717,129. The statistics of the this data source is summarized in Table 2. In the user distrust network, the total number of issued distrust statements is 123,670, and the statistics of the distrust data is summarized in Table 3.

We also observe a number of power-law distributions in these data sources, including items per user, trust relations per user (outdegree in the trust graph) and distrust relations per user (outdegree in the distrust graph). The distributions are shown in Fig. 2.
We employ the Root Mean Square Error (RMSE) to mea-sure the prediction quality of our proposed approaches in comparison with other collaborative filtering and trust-aware recommendation methods.
 The metrics RMSE is defined as: where r i,j denotes the rating user i gave to item j , r i,j notes the rating user i gave to item j as predicted by a method, and N denotes the number of tested ratings.
In this section, in order to show the effectiveness of our proposed recommendation approaches, we compare the rec-ommendation results of the following methods: 1. PMF (Probabilistic Matrix Factorization): this method 2. SoRec (Social Recommendation): this is the method Table 3: Statistics of Distrust Network of Epinions Statistics Distrust per User Be Distrusted per User Max. Num. 1562 540
Avg. Num. 0.94 0.94 Figure 2: Power-Law Distributions of the Epinions Dataset. (a) Items per User Distribution. (b) Trust Graph Outdegree Distribution. (c) Distrust Graph Outdegree Distribution. 3. RWD (Recommendation With Distrust): this is a ma-4. RWT (Recommendation With Trust): this is a ma-
As to the training data, we employ three settings: 5%, 10% and 20% for training, where 20% means we randomly select 20% ratings as training data to predict the remaining 80% ratings.

In our RWD and RWT methods, there are totally four pa-rameters need to be set, including  X  ,  X  ,  X  U and  X  V . Without loss of generality, in order to reduce the model complexity, we set  X  U =  X  V =0 . 001 in all the experiments we conduct in this paper. We will discuss the influence of the parameters  X  and  X  in the experiments conducted in Section 3.4.
The prediction accuracies evaluated by RMSE are shown in Table 4. In our proposed distrust-aware recommendation method RWD, the parameter  X  is set to be 0.00001 while in our trust-aware recommendation method RWT, the param-eter  X  is set to be 0.001.

From Table 4, we can observe that our RWD and RWT approaches constantly performs better than the other meth-ods in all the settings. When we use 20% as training data, we find that our method generates much better performance than PMF and SoRec. This demonstrates the advantages of trust and distrust-aware recommendation algorithms.
In Fig. 3 and Fig. 4, we also plot the percentages of perfor-mance increase of our RWT algorithm against PMF, SoRec as well as our RWD algorithms in terms of RMSE. From these figures, we observe an interesting phenomenon: as the sparsity of the data decreases, the percentages of per-formance increase against PMF and SoRec keep increasing. This observation is reasonable since in the very spare train-ing settings like 5% and 10%, the user features cannot be accurately learned since the training sample is very sparse. Hence our optimization methods cannot maximize the in-fluences of the trust and distrust constraints. But as the increase of the training data, RWD and RWT performs bet-ter and better.
 We also observe another phenomenon worthy of studying. We find that the distrust-based method RWD performs al-most as good as the trust-based method RWT (Please notice that in Table 2 and Table 3, in average, every user only has 0.94 distrusted users while has 5.45 trusted users). This ob-servation proves that the distrust information among users is as important as the trust information in the recommender systems.

In Fig. 5, we plot the performance (RMSE) changes with the iterations. We observe that in the PMF and SoRec meth-ods, at the end of the training, the models begin to overfit, as shown in Fig. 5(a), while our RWD and RWT methods do not have the overfitting problem, as illustrated in Fig. 5(b). These experiments clearly demonstrate that in this dataset, the employ of our trust and distrust regularization terms not only generates better performance than other methods, but also avoids the overfitting problem. Figure 5: Efficiency Analysis ( 10% as Training Data). (a) RMSEs of PMF and SoRec Change with Itera-tions. (b) RMSEs of RWD and RWT Change with Iterations (  X  =0 . 001 ,  X  =0 . 00001 ).
In our method proposed in this paper, the parameters  X  and  X  play very important roles. They control how much our method should use the information of trusted or distrusted users. In the extreme case, if we use a very small value of  X  or  X  , we only mine the user-item rating matrix for matrix factorization, and simply employ users X  own tastes in making recommendations. On the other side, if we employ a very large value of  X  or  X  , the trust or distrust information will dominate the learning processes. In normal cases, we integrate information from the user-item rating matrix and the users X  trust or distrust network for matrix factorization and, furthermore, to predict ratings for the users.
Fig. 6 shows the impacts of  X  on RMSE. We observe that the value of  X  impacts the recommendation results signifi-cantly, which demonstrates that incorporating the trust in-formation greatly improves the recommendation accuracy. No matter using 5% training data, 10% training data or 20% training data, as  X  increases, the RMSE decrease (prediction accuracy increases) at first, but when  X  surpasses a certain threshold like 0 . 01, the RMSE increase (prediction accuracy decreases) with further increase of the value of  X  .Theexis-tence of the yielding point confirms with the intuition that purely using the user-item rating matrix or purely using the users X  trust information for recommendations cannot gener-ate better performance than appropriately integrating these two sources together.

The impact of  X  generally shares the same trend as the impact of  X  . The difference is that we should choose a rela-tively small value of  X  , since if we choose a large value, the optimization problem in Eq. (3) will become unbounded, hence we cannot find the solutions.
In this section, we review several major approaches for rec-ommender systems, including (1) traditional recommender systems which are mainly based on collaborative filtering techniques, and (2) trust-aware recommender systems which have drawn lots of attention recently.

Generally, traditional recommender systems can be di-vided into two categories: memory-based and model-based methods. Memory-based recommender systems, also known as neighborhood-based methods, are the most popular pre-diction methods and are widely adopted in commercial col-laborative filtering systems [13, 23]. Memory-based methods mainly focus on finding the similar users [3, 9] or items [5, 13, 26] for recommendations. User-based approaches predict the ratings of active users based on the ratings of similar users found, and item-based approaches predict the ratings of active users based on the computed information of items similar to those chosen by the active user. User-based and item-based approaches often use the PCC algorithm [23] and the VSS (Vector Space Similarity) algorithm [3] as the simi-larity computation methods. Recently, a set of related work considers how to utilize the user-based and item-based ap-proaches together [15, 31]. Ma et al. in [15] proposed a method to use the information of users and items to fill in the missing value first before prediction.

In the model-based approaches, training datasets are used to train a predefined model. Examples of model-based ap-proaches include the clustering model [10], aspect models [7, 8, 27], the latent factor model [4], the Bayesian hierarchi-cal model [30] and the ranking model [14]. [10] presented an algorithm for collaborative filtering based on hierarchical clustering, which tried to balance robustness and accuracy of predictions, especially when few data were available. [7] pro-posed an algorithm based on a generalization of probabilistic latent semantic analysis to continuous-valued response vari-ables. Recently, several matrix factorization methods [22, 24, 25, 28, 33] have been proposed for collaborative filter-ing. These methods all focus on fitting the user-item rating matrix using low-rank approximations, and use it to make further predictions. The matrix factorization methods or low-dimensional factor models are very efficient in training since they assume that in the user-item rating matrix, only a small number of factors influences preferences, and that a user X  X  preference vector is determined by how each factor applies to that user. In order to take advantages of both the factor models and the neighborhood models, Koren et al. in [2, 11] proposed an interesting idea which merges the factor and neighborhood models, thereby building a more accurate combined model.

Traditional recommender systems have been well studied and developed both in academia and in industry, but they are all based on the assumption that users are independent and identically distributed, and ignore the relationships be-tween users. Based on this intuition, many researchers have recently started to analyze trust-based recommender sys-tems [1, 16, 17, 19, 20, 21].

In [19], a trust-aware method for recommender system is proposed. In this work, the collaborative filtering process is informed by the reputation of users which is computed by propagating trust. Trust values are computed in addition to similarity measures between users. The experiments on a large real dataset shows that this work increases the coverage (number of ratings that are predictable) while not reducing the accuracy (the error of predictions). Bedi et al. in [1] pro-posed a trust-based recommender system for the Semantic Web; this system runs on a server with the knowledge dis-tributed over the network in the form of ontologies, and uses the Web of trust to generate the recommendations. These methods are all memory-based methods which employ only heuristic algorithms to generate recommendations. There are several problems with this approach, however. Firstly, the relationship between the trust network and the user-item matrix has not been studied systematically. Moreover, these methods are not scalable to very large datasets, since most of them need to calculate the pairwise user similarities and pairwise user trust scores. Lastly, these methods all ignore a very important information, i.e., distrust relations among users.

In recent work proposed in [17], Ma et al. developed a factor analysis method based on the probabilistic graphical model which fuses the user-item matrix with the users X  social trust networks by sharing a common latent low-dimensional user feature matrix. The experimental analysis shows that this method generates better r ecommendations than the tra-ditional collaborative filtering algorithms. However, this method also failed to model the distrust information since most probably, the users X  trust space and distrust space are not the same space, hence cannot simply factorize the trust graph and distrust graph by sharing the same latent feature space.

As reported in [6, 12, 29], distrust also performs a very important role in social networks. In this work, we also in-vestigate how to incorporate distrust information to improve recommender systems.
In this paper, we systematically study how to effectively and efficiently incorporate the trust and distrust information into the recommender systems. Our proposed framework is based on matrix factorization with regularization terms con-straining the trust and distrust relations between users. The complexity of our proposed optimization framework is linear with the observations of the ratings, and the experimental analysis on a large Epinions dataset shows that our RWD and RWT methods outperforms other state-of-the-arts algo-rithms. Based on the experimental analysis, we also draw the conclusion that the distrust information is at least as important as the trust information. This observation brings a major contribution to the research of trust and distrust-aware applications since it proves that the distrust informa-tion can also be utilized to i nfluence online applications in a positive fashion.

In this paper, the trust and distrust constraints are reg-ularized separately. In order to generate better prediction quality, a possible improvement is to fuse these two data sources into the same objective function. The most direct method is simply attaching the constraints in Eq. (2) and Eq. (6) to the objective function in Eq. (1). However, this will increase the model complexity, hence a more flexible and efficient method needs to be designed in the future.
As the exponential growth of online social network sites continues, the research of social search is becoming more and more important. We also plan to develop similar tech-niques to allow users X  trusted friends or distrusted  X  X riends X  to influence the users X  search results or query suggestions. This would be an interesting search phenomenon to explore in social networks.
