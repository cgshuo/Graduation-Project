  X  1. Introduction
There is an urgent need to address the matter of pedagogical training, both initial and ongoing, of lecturers in higher edu-cation ( Ramsden, 2003 ). The evidence is clear. The task of teaching in a university is a complex one. It requires mastery of pedagogical strategies to facilitate the teaching performance. Learning how to teach is therefore essential, in order to under-stand and enjoy teaching better ( Ramsden, 2003 ). As things stand, the typical university lecturer learns how to teach mainly from a socialization process that is far from being rational and conscious. It merely imposes a prototype of intentional atti-tudes and teaching practices, finding as a basis the lecturer X  X  classroom experiences as a student, the model offered by lec-turers they have known, pressures from the system or simply its organizational structures (departments, faculties, universities) and the expectations of the students encountered in professional practice ( Lisewski, 2006 ).
In the opinion of many researchers, university lecturer training ought to be treated as evolving, ongoing and systemati-cally scheduled. The first step should be initial training, aimed at individuals training for lecturing (Ph.D. and master stu-dents) as well as lecturers already practicing ( Ramsden, 2003 ).

However, proposals for teacher training colleges/universities with formal programs (seminars, specializations, masters) do not represent a substantive alteration or modification of the classical model of university education: notes, books and lectures from the teacher, together with an exam, continue to be the core elements or components of the dynamic process carried out in university classrooms. In addition, formal programs involve large efforts of finance and time, making them pro-hibitive to a large extent for university lecturers ( Lisewski, 2006 ).

In practice, lecturers have found two alternatives to  X  X  X ormal X  X  preparations in pedagogy. The first is self-learning, in which lecturers modify their strategies based on their own experience, study, analysis and testing of new models reported in books or specialized publications ( Brown &amp; McNamara, 2011; Krzywacki, 2009 ). The second  X  very common in the work environ-ment ( Krzywacki, 2009 )  X  is based on mutual collaboration, in which lecturers share successful experiences in teaching with colleagues (especially those with less experience) in an informal way. These two alternatives provide an acceptable solution to deficiencies in teacher training. They are not expensive to implement and can be applied in a context where a lack of financial resources predominates. However, they present drawbacks when, for example, methodologies recommended by colleagues or found in books prove not to be the most suitable for the specific  X  X  X ontent X  X  of the course; when colleagues are not available whenever a  X  X  X ew X  X  lecturer has problems; when experienced lecturers leave a university and take with them their successful experiences of  X  X  X ow to teach X  X  and the recommendations of their colleagues are vague in describing the specific situation in which the method or technique used was successful; and when oral recommendations are forgotten with time. These cause a waste of time and effort in the process of training students, in relation to knowledge, skills and val-ues that require to be learned and developed on each course ( Lucarelli, 2004 ).

Seeking to provide a structured solution to this problem, a group of teaching researchers have proposed Pedagogical Pat-terns (PPs) as a strategy with which to properly implement self-learning and mutual collaboration. The purpose of these municated to those who need this knowledge ( Bergin et al., 2007 ). The patterns provide guidance to lecturers either with no experience or inadequate training in teaching/learning methodologies, enabling them to reduce the number of errors that can occur when lecturing and to improve the teaching performance itself, in a short time.

Although Pedagogical Patterns were designed to provide flexible and practical help to lecturers, they present a problem: recently there have come to be such numbers of these ( www.pedagogicalpatterns.org ), found in extensive documents, that it is difficult to apply them to a specific educational setting. Any such scenario must include the different characteristics of teachers, students (e.g. learning style), environment, and topic, among others, all of which are necessary in order to imple-ment a pattern successfully.

To contribute to maintaining the quality of the university education system, and to research in the area of recommender systems applied to the teaching process, the Information Technology Research Group (GTI) of the Universidad del Cauca has modeled a software tool that allows the recommendation of pedagogical patterns or teaching strategies to university teach-ers, based on student profile, characteristics of content worked on in class, the lecturer X  X  teaching style and the environment of the class. The tool  X  the Recommendation System of Pedagogical Patterns (RSPP)  X  is available at http://spar.unicau-ca.edu.co/srpp . In this paper we present the system, emphasizing its structure, performance and main characteristics.
In Section 2 , some concepts and work related to pedagogical patterns and recommender systems are presented. In Sec-tion 3 , the model of the ontology that stores pedagogical patterns is presented. The functionality of the recommendation sys-tem follows, presented in a general way, and the unified hybrid model defined for recommending pedagogical patterns is described. In Section 4 , the assessments made on the RSPP and the results of these are described. Finally, some conclusions and future work that the research group hope to carry out in this area is outlined. 2. Theoretical context and related work 2.1. Pedagogical patterns
A pedagogical pattern can be defined as a detailed description of an educational situation that achieves a specific purpose and that can be repeated given similar circumstances. Bergin states that pedagogical patterns capture best practice from experts in teaching and learning, communicate the knowledge to others, and solve recurrent problems. They also serve as a vocabulary of solutions that balance a set of forces and interact with other patterns ( Bergin, 2002; Bergin et al., 2007 ).
In order to make things formal, a  X  X  X attern language X  X  exists (see www.pedagogicalpatterns.org for details) that is con-cerned with registration of the pattern name, the version, the intention, the problem to be solved, the audience to which is addressed, the motivation of the pattern, the proposed solution, some comments about the implementation of the pattern, Part of a pedagogical pattern is shown in Fig. 1 .

The purpose of these patterns is to present the essence of practice in a compact form that can be easily communicated to those in need and make their presentation accessible and coherent ( Bergin, 2002 ). The systematic compilation of these pat-terns permits constructing works or reference databases to which professionals and researchers can turn for specific pur-poses ( Bergin, 2002 ). 2.2. Recommender systems
Recommender systems ( L X  et al., 2012 ) emerged as an independent research area in the mid 90s and they have tradition-recommend books, CDs and other products on www.Amazon.com ( Linden &amp; Smith, 2003 ), Movies in movieLens ( Miller, bookmarking business, among others ( Barrag X ns-Mart X nez et al., 2010; Liu, Lai, &amp; Lee, 2009; Porcel, Tejeda-Lorente, Herrera-Viedma, 2010; Porcel &amp; Herrera-Viedma, 2010; Porcel, Morales-del-Castillo, Cobo, Ru X z-Rodr X guez, &amp; Herrera-
Viedma, 2010; Porcel, Moreno, &amp; Herrera-Viedma, 2009; Serrano-Guerrero, Herrera-Viedma, Olivas, Cerezo, &amp; Romero, 2011 ). Recently their use has been brought into the academic field. In this light, research has been conducted in the devel-opment of recommendation tools for the creation of courses and learning activities ( Farzan &amp; Brusilovsky, 2006; Hummel
Two effective methods of recommender systems exist that are based on the source of knowledge used to make the rec-ommendation: those based on content ( Ricci et al., 2010 ), which make the recommendations to the user based on the description of items (e.g. products), and collaborative systems ( Schafer, Frankowski, Herlocker, &amp; Sen, 2007 ), those using appraisals associated with the items provided by the user and other users. Other less-used techniques for the development of recommendation systems are based on knowledge and on demographic profile.

A content recommendation system bases its recommendation on the degree of similarity among items or objects, the user (the system can overspecialize and always recommend the same items) and to the users (not having detailed information about the needs of a new user in the system ( Ricci et al., 2010 )).

Collaborative filtering, in contrast to content-based systems is independent of the content of the items recommended and therefore can recommend items that differ among themselves. A collaborative recommender system can have one of two main approaches: user-based algorithms (or social filtering) and item-based algorithms ( Ricci et al., 2010 ).
In user-based algorithms, the recommendation is made based on the degree of similarity between different users of the system. It identifies users with tastes similar to those of a given user and recommends items those users have liked ( Ricci that a user may have about the items they have not seen yet, it uses the ratings received from other users with preferences of recommendation ( Ahn, Kang, &amp; Lee, 2010; Almazro et al., 2010; Eckhardt, 2012; Gediminas &amp; Alexander, 2005; Hernandez del Olmo &amp; Gaudioso, 2008; O X  X onovan and Smyth, 2005 ).

In item-based algorithms, the recommendation is made based on the degree of similarity between different items in the system. It is based on the idea that a user prefers items that are similar to items previously reviewed ( Almazro et al., 2010;
One of the main examples is Amazon ( Linden &amp; Smith, 2003 ), which makes its recommendations based on what the user has purchased and suggests other products related to the products purchased by the user that have high satisfaction ratings from other users in the database. The Amazon algorithm, called  X  X  X tem-to-item Collaborative Filtering X  X , has shown to be effective in making recommendations and suitable for dealing with millions of users and items.

Hybrid recommender systems arose to avoid the drawbacks or limitations of previous recommendation methods (content and collaborative systems). Hybrids can be built using various models and one example is the unified hybrid based on con-tent and collaborative systems as in the case of the proposed system in this research ( Barrag X ns-Mart X nez et al., 2010; Burke, 2007; Porcel et al., 2012 ). Hybrid recommender systems combining content and collaborative-based approaches are con-structed in one of the following ways: (1) Initially implement the methods separately and combine the resulting predictions; (2) incorporate some content-based features within a collaborative approach; (3) incorporate some collaborative character-istics into a content-based method; and (4) build a unified model that incorporates collaborative and content-based features ( Gediminas &amp; Alexander, 2005 ). Different studies show that hybrid methods can provide more accurate recommendations than methods originating in a separated way ( Gediminas &amp; Alexander, 2005 ).

The most important challenges in recommender system algorithms relate to data sparsity, scalability, cold start problem ommendation evaluation ( L X  et al., 2012 ). The cold start problem occurs when it is not possible to make reliable recommen-dations due to an initial lack of ratings. There are three main categories of this problem: new community (occurs when starting up the system), new item (occurs when a new item is registered into the system and no ratings exist for the new item) and new user (occurs when a new user is registered into the system and no preferences exist for the new user) ( Bobadilla, Ortega, Hernando, &amp; Bernal, 2012 ).
 Recent approach in recommender systems include the use of past-prediction accuracy ( Huete, Fern X ndez-Luna, de
Campos, &amp; Rueda-Morales, 2012 ), semantic information ( Bogdanov et al., 2012; Moreno, Valls, Isern, Marin, &amp; Borr X s, 2012 ), entropy of information ( Chandrashekhar &amp; Bhasker, 2011 ), hybrid models based on Bayesian networks ( de Campos,
Fern X ndez-Luna, Huete, &amp; Rueda-Morales, 2010 ), social bookmarking ( Kim, Alkhaldi, El Saddik, &amp; Jo, 2011 ), and ordinal scale-based implicit ratings ( Lee, Cho, &amp; Kim, 2010 ), among others.

Recommendation systems as applied to education have principally been developed in the area of e-learning. Three models have been defined for which technology to support teaching X  X earning activities is included ( Engelbrecht, 2003 ): (1) content, services and technology; (2) instructional design; and (3) learning communities. The first model emphasizes the role of technology for delivering content, access to itself and access to electronic services. Lately there has been an emphasis on the objectives of the two remaining models, looking at how technology can solve pedagogical problems (e.g. personalization of content to user needs, logical sequencing of material seeking to reinforce the learning objectives, person-alization of content navigation, personalization of learning activities, among them the proposal of Romero, Ventura, Zafra, and Bra (2009) and forming and supporting learning communities (e.g. interaction between learners, and teachers, and be-tween learners and content).

Manouselis, Drachsler, Vuorikari, Hummel, and Koper (2011) present a review of the recommendation systems developed in technology-enhanced learning (TEL), including the use of collaborative, content-based, and hybrid systems. In those re-searches, several data mining techniques were employed, such as classification (e.g. decision trees, Bayesian networks and neural networks), association rules (e.g. apriori and fp-growth) and clustering (e.g. k -means). Recent work includes web usage mining for personalizing hyperlinks in web-based adaptive educational systems ( Romero et al., 2009 ), a recom-mender system for reducing confirmation bias and stimulating divergent thinking ( Schwind, Buder, Cress, &amp; Hesse, 2012 ), and personalization in an interactive learning environment through a virtual character ( Reategui, Boff, &amp; Campbell, 2008 ).
None of the systems presented in Manouselis et al. (2011) and in the most recent workshop for TEL Recommender Sys-tems Manouselis, Drachsler, Verbert, &amp; Santos (2010) has shown the ability of the recommender system to guide lecturers, teaching strategies or pedagogical patterns. For this reason, this research becomes the first reference in the field. 3. Recommendation system of pedagogical patterns
In order to construct the RSPP, initially an ontology that represents the pedagogical patterns and their interaction with the fundamental concepts of the educational process was defined. Next, a web information system that allowed manage-ment of course information, students, lecturers, etc. was defined and then, to this system an option based on a unified hybrid model of recommendation of pedagogical patterns was added. The following explains each of the components of the recom-mendation system. 3.1. Pedagogical patterns ontology (OntoPP)
The ontology is aimed at solving the problems of representation and structure currently present in pedagogical patterns, including those related to dispersion of the patterns themselves in a lot of semi-structured text documents, ambiguities in explanation of patterns, omissions in structure as well as misconceptions of patterns. This is a result of the fact that ontol-ogies provide an appropriate form of representation, defining an unambiguous standard vocabulary that permits reusing and sharing the concepts of a particular area of knowledge ( Tetlon et al., 2005 ).

The methodologies for developing ontologies are varied and invariably depend on the domain of the ontology. For this research the methodology proposed by Noy &amp; McGuinness (2001) was taken as a reference. It is referenced by a number of authors, who consider it a general, flexible, complete and simple methodology. It comprises the following seven (7) steps: Step 1, to determine domain and scope of ontology.
 Step 2, to consider reusing existing ontologies.
 Step 3, to number important terms of ontology.
 Step 4, to define classes and class hierarchy.
 Step 5, to define attributes (slots) of classes.
 Steps 6 and 7, to define aspects of attributes and create instances.
 Additional steps allow refining the ontology once it has been created.

In developing step 2, an ontology was sought in several repositories and in the web in general, with the aim of reusing some components, but no positive results were obtained. Among the reviewed repositories were Ontolingua ( http:// www.ksl.stanford.edu/software/ontolingua ), DAML Library ( http://www.daml.org/ontologies ), UNSPSC ( http://www.unsps-c.org ), RosettaNet ( http://www.rosettanet.org ) and DMOZ ( http://www.dmoz.org ).

In Fig. 2 , a UML diagram of the ontology is shown. The ontology was implemented in Prot X g X  through rules in RDF lan-guage. The ontology has 76 instances (patterns from the official website of the Pedagogical Patterns Project, PPP) that can be (115 accomplishments or goals) were also identified that it is intended to be carried out when applying the patterns and problems to solve (153 problems). A general description of the classes and subclasses of the ontology of pedagogical patterns is shown below.

Work Environment : represents the environment of the work in which a theme or content is developed  X  Subclass In the Classroom: represents an enclosed place  X  Subclass Outside the classroom : represents an open-air space Knowledge Area : represents the different areas of knowledge that are part of the academic programs and thematic units Content : represents the thematic unity developed or taught at a particular time in a course Content Type : represents the different types of content to which a content or thematic unit may belong
Learning Process Objectives : represents the learning objectives of the content or thematic unit carried out in a course; after developing a learning process with this content, the student must have acquired new skills and knowledge Subject : represents the subject being taught in a course
Context : represents the context in which a pedagogical pattern was implemented and was seen to succeed. This context involves characteristics of lecturers, students, content and work environment Course : represents the course in which a pedagogical pattern was applied or will be applied Teacher : represents the teacher who puts into practice a pedagogical pattern in a given context
Average Student : represents the average student who participates in a teaching/learning experience with a pedagogical pattern
Learning Style : represents the average learning style of students who participated in or will participate in a teaching/learn-ing experience with a pedagogical pattern. This style of learning was based on the nine intelligences of Gardner ( Gardner, 2005 ): linguistic, logical-mathematical, musical, spatial, bodily-kinesthetic, naturalistic, interpersonal, intrapersonal and existential
Hometown : represents the geographic place where the person comes from, not necessarily the birthplace but the place where the person has lived the last years Academic Program : represents an undergraduate academic program
Pedagogical Model : represents the pedagogical model in which different pedagogical patterns are embedded and which is prevailing in the teacher who implements a pedagogical pattern
Pedagogical Base Pattern : represents the pedagogical pattern on which a pattern was based for its implementation; some patterns are improvements to these patterns Pedagogical Pattern : represents a pedagogical pattern Key issues : represents the key problems pedagogical patterns try to solve Forces : represents the achievements or goals a pedagogical pattern reaches Bibliography : represents the bibliographical sources to which the authors of the patterns refer in the pedagogical patterns
Person : represents a person  X  Subclass Author : represents an author or someone who rewrites a pedagogical pattern
Resources : represents the different resources such as physical or abstract tools that a teacher used in a teaching/learning experience with a pedagogical pattern, e.g. TV set, tape recorders, balls, boards, colors, etc.

Adequacy of Resources : represents the relationship of quantity between a resource unit and the students who may benefit from or use this unit
Relationship among Patterns : represents the relationships that pedagogical patterns may have together. The relationships 3.2. Web information system
The information system was developed based on the concepts of Web 2.0 (community building around the issue of ped-agogical patterns and recommendation of such) and provides a set of roles, among which a hierarchical relationship to the organization of the functionalities available in the system is established. Below a description of each role is presented.
Anonymous : represents users who enter the application but who do not have an account or have not started a session in the system. These users can view the system help, see the pedagogical patterns stored in the system, see comments in the forum of the system, see the ontology of pedagogical patterns and its contents, watch news, register into the system to become a registered user and enter the system as a registered user.
Registered user : represents all users who hold accounts with the system. A registered user makes use of the functionality of an anonymous user, in addition to that the user can: create topics in the forum, publish news, publish comments in the forum, edit personal profile (consisting of personal information, signature, photo and subscriptions to forums), manage messages, see the information of members of the community, change password, apply for registration as a student or tea-cher of a course and leave the system (become an anonymous user).

University Student (Student) : represents the student who is enrolled in a course run by a teacher who uses the system. A student makes use of the functionality of a registered user, in addition to that the student can: update academic data as a student, manage the learning style information (based on multiple intelligences test from Gardner), manage the courses enrolled, evaluate a pedagogical pattern used by a teacher in a specific class session.

University Teacher (Professor) : represents a university teacher who requests from the system suggestions about how to guide a topic in its specific academic context. In addition to using the functions of a registered user, a professor can: man-age the teacher courses, manage the teacher X  X  academic data, supervise the registration of students for the course, calcu-late average students from the courses, request assignment of new courses, register students directly on their courses, accept or reject the registration of students on their courses, request a recommendation to the system and grade the rec-ommendation (evaluate a pedagogical pattern used by a teacher in a specific class session).

University teacher, which in turn is a student (Teacher-Student) : represents a teacher who in turn is studying and is a com-bination of the two above roles, having the respective privileges of both.

System Administrator (Administrator) : Responsible for system administration tasks and it is a role with permissions to: manage the users, forum, news, academic programs, areas of knowledge of the subjects, subjects, courses, languages, ped-agogical models (including: instructional, behavioral, active, romantic, developmental, constructivist, constructionist, conceptual, social critic, classroom project, academic project, research project) and pedagogical patterns. It is also respon-sible for authorizing or rejecting the requests of teachers to lead the respective courses and ensure that the system is always available to users.

Fig. 3 shows the 6 steps a teacher must follow (assistant software) for requesting a pedagogical pattern recommendation, namely: Step 1, to have a course assignment,
Step 2, to have at least one defined content for the course (defining whether theoretical, practical or theoretical-practical, the language of content, if the content is more conceptual, attitudinal or procedural, the estimated time for its develop-ment, among others),
Step 3, to have defined a working environment for the course (if it is in a classroom or outside the classroom, if specific resources are needed such as computers, stereos, classroom arrangement, light, mobility of tools, etc.),
Step 4, to have students enrolled in the course (select students who will participate in an activity and calculate the aver-age student who best characterizes the course students)
Step 5, to have completed the information about the expected goals in the specific topic being addressed in the course (achievements or goals expected to achieve and pedagogical problems expected to avoid) and
Step 6, to have filled out teacher X  X  academic information (dominant languages, education level, program in which the tea-cher got the degree, dominant pedagogical model, origin, age and years of teaching experience, etc.).

Some of these steps are done only once and not every time a recommendation is requested, e.g. to have an assigned course.

Fig. 4 shows the result of a specific recommendation for a teacher (when the teacher completes the six steps and clicks the recommend button), in a topic of a course, with a specified work environment and students. The teacher can study the list of recommended patterns and select those which he considers the most appropriate for the specific class session.
Fig. 5 shows the overall system architecture. It is an architecture consisting of three levels: presentation, business logic and service logic.

The presentation tier includes the user interface component (aspx web pages) which allows the user to process and for-mat the user data as well as acquire and validate data coming from them. This level is communicated only to the business logic tier through a facade accessible via web services.

The business logic tier is where business rules and processes related to the features provided by the system are imple-mented (through web services). At the same time it is divided into 4 sub-levels: 1. Ontology logic : responsible for handling the ontology. It allows seeing the ontology as an object providing it with methods to insert instances, query instances and query its structure. This sublevel communicates with the service level, more spe-cifically with the Prot X g X  API Access sub-level. 2. Recommendation logic : responsible for supporting the data mining tasks. It contains the recommendation algorithm, the classes needed for data transformation, data standardization and integration and data recovery from the minable view.
This sublevel communicates with the service level through the database access sub-level. 3. Application logic : in charge of managing the business logic of the recommendation system itself, and it is not handled by the previous sub-levels, that is: managing users, courses, roles, contents, work environment and requests of course assignment and bulletin board, etc. This sublevel communicates with the services level through the database access sub-level. 4. Facade : it supports the implementation of web services providing simple and loosely coupled interfaces to customers so they can access to the methods provided by the other three sub-levels.

The Sublevels Ontology logic, Recommendation logic and Application logic communicate and cooperate with each other to properly process the requests received through the facade.

Business Logic level communicates with the presentation level only through the facade sublevel, by which the user X  X  re-quests are received and the results are sent. It also communicates with the services level to store or retrieve data from the database, encrypt data, or access the API which permits manipulation of the ontology.

The Service Level contains the logic that allows the assignment of persistence to the objects of the business logic, the retrieval of information from the database, communication with the Prot X g X  API to manipulate the ontology and retrieve instances of the ontology classes from the database where they are stored. The main objective of this level is to hide from the upper layers the technical details and language details needed to access the repositories where data is stored. This level consists of the following two sub-levels: 1. Database access : It implements the persistence and data access by hiding details of data repositories from higher levels.
Data access implements software components which are in charge of accessing the database to read and write the state of the business objects, freeing the application of the engine access from the database. The sub-level communicates business level with Microsoft SQL Server 2005 (it was the chosen engine for storing the information).
 2. Prot X g X  API access : This sub-level allows access to the ontology that is stored in the database. This API is an open code library written in Java for the Ontology web languages OWL and the Resource Description Framework RDF, providing classes and methods to save OWL files, to query and manipulate OWL data models and perform reasoning. This sub-level implement the logic necessary for the upper tiers, which are written in C# and developed in Visual Studio.NET 2005, can interoperate with the Prot X g X  API that is written in Java. Because of that it was necessary to use a framework to interop-erate these two technologies, in this case IKVM.NET ( http://www.ikvm.net ). 3.3. Unified hybrid model for recommendation
The recommendation system uses a unified hybrid model (content and collaborative filtering) to make the recommenda-tions. In this model, an information item corresponds to a pedagogical pattern in context, that is, a pedagogical pattern con-taining the following information: teacher who used the pattern, average student in a course that used the pattern, learning environment in which the pattern was used and the characteristics of the subject or course content where the pattern was used. This information is brought to a latent space using Singular Value Decomposition (SVD) ( Golub, Solna, &amp; Van Dooren, 2000; Vozalis &amp; Margaritis, 2007 ) and finally the recommendation is made through a collaborative filtering process, finding the pedagogical patterns in contexts that have been better assessed and which are more similar to the specific needs of the teacher. Fig. 6 summarizes the steps of the recommendation process. Step 1 and 2 are performed at the same time when changes occur to information in the web information system and that information modifies the minable view, while step 3 is performed later when the teacher specifically requests the recommendation.

When the system starts to be used (new community cold start problem), the recommendations are made based on the content of the patterns, because the system does not have grades of pre-built pedagogical patterns in the system (pedagog-ical patterns registered in PPP). In addition, the content recommendation is limited to data recorded on the template of ped-agogical patterns presented in Section 2.1 , because of that the specific context of application of the pattern (environment, learning style of students and teaching style) is not taken into account.

Once the system is used, it begins to record teaching and learning experiences with pedagogical patterns in context, then it has sufficient information that relates a very detailed context (described by the teacher, the topic and students) with a pedagogical pattern. At this stage the system adopts the hybrid model. The minable view starts with the 72 pedagogical pat-terns of the PPP and each recommendation that is evaluated becomes a new record in the minable view. This record is equiv-alent to a successful experience or not of the pattern in a specific context. When a new pedagogical pattern is registered into the ontology, the system also registered that pattern into the minable view, therefore, the recommender algorithm always uses the most recent and available data. This new pattern (new item cold-start problem) is initially recommended to teach-ers based on its content (general context of application) and then when new experiences of use of this pattern in a specific context are registered, the pattern is recommended based on the entire hybrid model (content and collaborative filtering). When a new teacher request a recommendation, the request encapsulate information of the class X  X  context (the content of the classroom session, the profile of students on the course, the teacher X  X  dominant features, and the class session environ-ment, among others) and the system uses the hybrid model in all cases; in this way, RSPP manages the new user cold-star problem. 3.3.1. Data preparation
The system has a minable view, a tabular structure that summarizes and organizes the registered information in the rest of the system and also facilitates the recommendation task. This minable view is modified in its structure and is updated in its content as the data system change. For example, when the system records a user using a language that is not recorded by other system users (e.g. Urdu), in the minable view a new column is created with this new language and a 1 (true) is reg-istered to that user in that column to indicate that the user speaks the language and a 0 (false) is assigned to the other re-cords of the minable view to indicate they do not speak the language.

The data types used in the system are of two types: numerical and enumerated, the first corresponds to integral or dec-imal values, and the second to lists of numbers or strings.

Cardinality of the data used in the system is of two types: simple and multiple. Simple cardinality allows variables to take a single value for each class. Multiple cardinality allow a class to have multiple values at the same time for a given variable, for example, the language class for a user can have multiple values: English, Spanish, French, and Portuguese, among others.
All system data is transformed into normalized values between zero (0) and one (1) in the minable view according to some basic rules that are explained below. For simple cardinality numeric variables it is applied the Min X  X ax normalization ( Jain, Nandakumar, &amp; Ross, 2005 ) (Eq. (1) Normalization of simple cardinality numeric values). where v i is the normalized value, a i is the value to normalize, and Min and Max are the minimum and maximum value that a variable can take.

For enumerated variables of simple cardinality the possible values of the variable are sorted alphabetically from lowest to sorted list divided by the whole number of values in the list. This ensures that the values are between zero (0) and one (1).
Taking into account that the rate of change of the enumerated variables of simple cardinality is slow, that is, the possible values change very little over time. The normalization process is stored in a table of the database system as a triplet consist-ing of: variable, value, and normalized value. With this information, the standardization process of new records in the system is made faster without ordering, totalizing or dividing data; the process only queries this data in the table. 3.3.1.1. Transformation of multiple cardinality variables. The direct recording of multiple cardinality variables in the minable view represents a problem when applying most of the recommender algorithms. Therefore, it was necessary to manipulate the values of these variables in order that the algorithms can process them properly. The solution chosen was to create a column in the minable view for each value used in each variable of this type. In these columns, only a one (1) or zero (0) a column is not created for each possible value of a variable, instead a column is created only if the value has been used by students, teachers or other data managed by the system. For example, for the variable language class more than 100 options can be counted (English, French, Spanish, Portuguese, Swedish, Mandarin, Japanese, etc.), but if in the system the students only report the use of English and Spanish, in the minable view there will exist two columns, one for the registration of stu-dents who speak English and another for the registration of students who speak Spanish.

Since these columns are dynamically created, the reference of the correspondence between the column and the specific value of the enumerated variable can be lost, for this reason, the system has a table that records the metadata of the minable view, that is, a table that records an identifier, the name of the enumerated variable, the name of the column in the minable view, the id of the value (typically stored in another table in the database) and the number of the corresponding column in the minable view. 3.3.1.2. Weighting of columns in the minable view and the query vector. As mentioned above, the recommendation system is based on a hybrid model, which in its beginnings mainly applies a content-based model and then includes a model based on collaborative filtering. The dimensions of the minable view were divided into two groups: dimensions determining the profile (academic context of the pedagogical patterns) used to make recommendations based on collaborative filtering and the dimensions used for content-based recommendations.

For the first group were initially selected 40 dimensions. They correspond to the dimensions that describe the academic context in which a pedagogical pattern was implemented. For the second group 265 dimensions were selected correspond-ing to the forces and the problems that obtain and solve the patterns respectively.

It is observed that the difference in the number of dimensions of the two groups has an influence on the recommendation, because the 265 dimensions of the second group have more weight than the 40 of the first group (in quantity but not nec-essarily for their contribution). For this reason, weights are assigned to the dimensions of the minable view before taking them to the latent space to balance the values of the dimensions in both groups. To assign the weights (Eq. (2) , Calculating the weight of the columns) was used.
 where n is the number of values different from zero that are found in the dimensions and of which we want to assign the weight, v is the current value of the dimension and p is the new value of the dimension.

Thus, to assign weights to the dimensions of the first group, the number ( n ) of the 40 dimensions that have a value dif-ferent from zero is counted, then 1 is divided by that number and for each dimension the result is multiplied by the value of that dimension. This same process applies to the request for recommendation that a teacher makes in the system before the request is taken to the latent space and compared to the records of the minable view, also in the latent space. 3.3.2. Updating the representation in the latent space using SVD
Taking into account that when starting to use the system, the minable view has many null values (no information about students, teachers, and work environment, among others is available) and the dispersion of the data in the system can be high at any time when using the system, given the high dimensionality of the minable view. The data recorded in the min-able view is taken to a latent space, in which noise is reduced and the essence of the information contained in this structure is obtained. This process is done using Singular Value Decomposition (SVD), commonly used by information retrieval sys-tems and recommendation systems.

SVD ( Michael, Susan, &amp; Gavin, 1995 ) is a direct consequence of a linear algebra theorem:  X  X  X ny mxn matrix whose number of rows m is greater than or equal to the number of columns n , can be written as the product of a column orthogonal mxm matrix U , mxn diagonal matrix S with positive elements or zero (singular values), and transposition of an nxn orthogonal ma-trix V. X  X  ( Michael et al., 1995 ). Given a A mxn matrix, a decomposition SVD is a factorization equal to A matrix A , in this case is the minable view of the system. Using SVD it is decomposed the minable view into three matrices, U , S and V T which are stored in the system for the subsequent process of recommendation.
 When the data in the system change, they change the minable view and therefore the system must modify the matrices U ,
S and V T . This process is done in the background of the system, that is, the system can continue recommending with the existing matrices and when the calculation of the new matrices ends, they replace the previous matrices and the process begins to take place with the new matrices without the users being aware of this process.

The reduction of dimensionality (capture the essence of the matrix) is performed by reducing the size of the matrices U , S capture the essence of the original matrix.

To find the value of k, it was used the Frobenius norm ( Petersen &amp; Pedersen, 2008 ). The method involves taking a percent-(see Fig. 7 ). 3.3.3. Collaborative recommendation of the pedagogical pattern in context
When a teacher requests a recommendation, the system collects information from the teacher and formats it in such a way that it has the same structure as a record of the minable view. Subsequently, to calculate the nearest neighbors, this record is taken to the same latent space as that to which the minable view was taken, for this process (Eq. (3) , Converting the teacher X  X  request to the latent space with dimension k ) is applied.
 where R is the record of the teacher X  X  request (it has the same structure of the minable view and it takes into account the weighting of the columns. This topic is explained in previous section), V reduced to the dimension k , S 1 is the inverse of the matrix S calculated for the minable view reduced to the dimension k and
N is the vector R represented in the latent space.

Once the query record got in the latent space is reduced to the dimension k , the cosine similarity (Eq. (4) ) is ap-plied to find the similarity between each pattern and registered experience in the minable view against the current request of the teacher. where m is the number of attributes (columns) of the minable view and the query vector in the latent space, x is a pattern or registered experience in the minable view and, y is the new query or request record of the recommendation made by the teacher.

The records of patterns or experiences whose distances are closest to 1 (when the cosine is equal to 1 it means that the angle between the vectors is zero, that is, they have the same direction) correspond to the pedagogical patterns or experi-ences that resemble the new teacher X  X  query vector. This technique only finds close neighbors and does not distinguish be-tween patterns or experiences that have earned good grades and those which do not, so it was necessary to apply an additional process which is described below.

When a recommendation is requested, the suggested patterns are presented to the user in three categories, each with a top 5, allowing the refining of the recommendations even more. This top 5 is selected from the pedagogical patterns that exceed a minimum threshold of similarity, in this case 0.5 or equivalent to 45 degrees of similarity.

The categories which are presented to teachers who query the system are: patterns of teaching, assessment patterns and patterns relevant to the characteristics posed by the user but which have been poorly graded by other users.
The last category was added to avoid the situation in which the patterns that have been poorly qualified remain in obliv-ion, and also to help the teacher to identify for themselves those patterns and features that may be less suitable for the spe-cific class session. 4. Evaluation
This section summarizes the results obtained in the evaluation of four of the system X  X  aspects, namely: rating prediction accuracy, recommendation precision, satisfaction of recommendations made to real users, and a usability test of the system.
Users involved in the experiences are professors and students of three different universities in Colombia. 4.1. Prediction accuracy evaluation In recommender systems, the Mean Absolute Error (MAE) metric ( Herlocker, Konstan, Terveen, &amp; Riedl, 2004; Shani &amp;
Gunawardana, 2011 ) is commonly used to evaluate the system X  X  accuracy, that is, the capability of the system to predict users X  ratings. MAE considers the average absolute deviation between a predicted rating and the user X  X  true rating (Eq. (5) , Mean Absolute Error metric).
 where n is the number of cases in the test set, p i the predicted rating for an item, and r
The MovieLens data sets ( Vozalis &amp; Margaritis, 2007 ) was used to develop experiments and comparison with other algo-rithms. These data sets were chosen because they are publicly available and have been widely used to evaluate several rec-ommender systems. MovieLens has two main entities (users and items) and one relationship (ratings), they are composed of the following attributes:
Users : user id, age, gender, occupation, and zip code. Occupations are administrator, artist, doctor, educator, engineer, entertainment, executive, healthcare, homemaker, lawyer, librarian, marketing, none, other, programmer, retired, sales-man, scientist, student, technician, and writer.

Items : movie id, movie title, release date, video release date, IMDb URL, unknown, action, adventure, animation, chil-dren X  X , comedy, crime, documentary, drama, fantasy, film-noir, horror, musical, mystery, romance, sci-fi, thriller, war, and western. Last 19 attributes are the genres of the movie (a 1 indicates the movie is of that genre).
 Ratings : user id, item id (movie id), rating and timestamp.

In this experiment, the 100 K ratings data set was selected. This data set contains 1682 movies, 943 users and a total of 100,000 ratings on a scale of 1 X 5 (where 1 = Awful, 2 = Fairly bad, 3 = It is OK, 4 = Will enjoy, 5 = Must see). Each user has ( Refaeilzadeh, Tang, &amp; Liu, 2009 ).

In order to apply the RSPP hybrid model proposed in this paper, a transformation process was developed. A minable view was created with standard SQL query sentence, composed by the attributes age (with a linear transformation using min X  X ax normalization ( Han &amp; Kamber, 2006 )), gender, administrator, artist, doctor, educator, engineer, entertainment, executive, healthcare, homemaker, lawyer, librarian, marketing, none, other, programmer, retired, salesman, scientist, student, techni-cian, writer, action, adventure, animation, children X  X , comedy, crime, documentary, drama, fantasy, film-noir, horror, musical, mystery, romance, sci-fi, thriller, war, and western. The attribute occupation was transformed to several columns, one per each occupation value in the original attribute.
 Then, based on the proposed model, a Singular Value Decomposition process was applied on the minable view. U , S and V matrices on the training sets were calculated and stored (off-line process). Next, test sets were used to predict ratings (on-line process). Based on the model, cosine similarity in reduced (latent) space (minable view with 42 original dimensions are reduced to 2 latent dimensions) was used for the neighborhood formation (neighbors with a cosine similarity value greater than a predefined threshold, in this case a value between 0.9 and 0.95, and the same movie for predicting rating) and then a Resnick standard prediction formula (Eq. (6) , Resnick prediction formula) was used to predict rating in original space.
 where R i is the rating to be predicted for item i in consumer profile c and p similarity between profiles c and p in latent space.

To test the effect the number of neighbors ( k value, k nearest neighborhood) has on the accuracy of RSPP, several values of maximum similar users were considered: 1, 4, 8, 12, 16, 20, 40, 60, 80, 100, and 120. The obtained results are shown in
Table 1 . The performance of RSPP is quite uniform across the MovieLens testing sets, but considering values between 40 and 100 similar users we obtain a better average MAE than the rest of the configurations. Other group (with 16 and 20 sim-ilar users) exhibit results close to the best results. When the number of neighbors is 4, there is a significant increase in the average MAE, which indicates a considerable drop in the prediction accuracy.

Table 1 also shows the coverage of prediction. In this case the coverage is defined as the percentage of predictions made with all k neighbors. When the number of neighbors is 4 (four available ratings for the same movie in user neighborhood) the coverage is high (99.44%) but its value decrease to 68.69% when the number of neighbors is 120. Although the coverage de-creases when the number of neighbors increases, the algorithm obtains better precision of prediction (lowest MAE values).
Best value of k (nearest neighbors) for the proposed algorithm is around 80; with this value a balance between MAE and coverage is reached.

And additional experiment to evaluate the algorithm X  X  performance in a new user cold start problem simulated environ-ment was made using MovieLens dataset (see Table 2 ). In this case, for each prediction, only k random selected neighbors was taking account, e.g. if there are 35 available neighbors and the current k value is 20, the algorithm only take 20 neighbors randomly selected from the original 35, but if the original neighborhood has less neighbors than k , the original number of neighbors is used. Results show same values for coverage (e.g. 99.44% for 4 neighbors, 96.35% for 20 neighbors, and 68.69% for 120 neighbors), and the lost in precision accuracy (measure by MAE metric) is minima (e.g. 2.16% for four neigh-bors, 0.65% for 20 neighbors, and 0.13% for 120 neighbors). This promissory results show a good behavior for the algorithm in the new user cold start problem.

In order to compare the RSPP results with those of other models, accuracy reports of different models found in Porcel et al. (2012), Vozalis and Margaritis (2007) and Barrag X ns-Mart X nez et al. (2010) are used. All of these models show experiment results using the same metric (MAE) and cross validation process over the same data sets.
 Porcel et al. (2012) four models are reported: (1) A pure content-based approach (CB) ( Almazro et al., 2010; Barrag X ns-
Mart X nez et al., 2010; Ricci et al., 2010 ) in which the similarity between two items is calculated using the cosine measure. (2) A user-based collaborative approach (UBC) ( Almazro et al., 2010; Ricci et al., 2010; Symeonidis, Nanopoulos, unrated items; the similarity between users is computed using Pearson X  X  correlation coefficient. (3) An item-based collabo-dict the ratings; the similarity between users is computed using cosine similarity, and (4) An item-based collaborative puted using Pearson X  X  correlation coefficient.

Vozalis and Margaritis (2007) other five models are reported: (1) An item-based collaborative approach (item-based) using cosine similarity and one enhanced correlation equation for rating new movies. (2) An item-based collaborative approach (i-demog) using an adjusted correlation for neighborhood formation and the enhanced correlation equation to rate new movies. (3) An item-based collaborative approach using SVD to reduce data representation (idemsvd-dsvd); this algo-rithm uses an adjusted correlation for neighborhood formation on original data and then uses the enhanced correlation equation in the reduced space for rating new movies. (4) An item-based collaborative approach using SVD to reduce data representation (idemsvd-rsvd); this algorithm use cosine similarity for neighborhood formation on reduced representation and then uses the enhanced correlation equation in the original ratings to rate new movies, and (5) An item-based collab-orative approach using SVD to reduce data representation (idemsvd-2svd); this algorithm uses cosine similarity for neigh-borhood formation on reduced representations and then uses the enhanced correlation equation in the reduced representation to rate new movies.
 Barrag X ns-Mart X nez et al. (2010) an hybrid content-based and item-based collaborative filtering approach to recommend
TV programs based on adjusted cosine similarity between items and singular value decomposition to reduce dimensionality is presented.

Table 3 presents the MAE results obtained by each model. RSPP outperforms all models. Minimal improvement is 1.2% in relation to IBC-C model and maximal improvement is 17.1% in relation to CB model. Average rankings of Friedman test shows that RSPP is the best algorithm with a Friedman statistics (distributed according to chi-square with 9 degrees of free-dom) equal to 25.363636 and p -value computed by Friedman Test equal to 0.002594. Additionally, RSPP improves IBC-C, queveo.tv, UBC, i-demog, and item-based algorithms with a level of significance equal to 0.95 in Wilcoxon test results. 4.2. Precision evaluation
For this evaluation, a training data set was built using 76 pedagogical patterns (taken form PPP) and 15 new experiences (testing data set) with its most recommender associated pattern (based on jury of experts in pedagogy). The system was que-ried with the 15 new experiences and the system recommends the five best pedagogical patterns and the five best assess-ment patterns for each new experience. Table 4 presents a summary of the evaluations performed in the recommendation system. Precision and Recall at k metrics ( Manning, Raghavan, &amp; Sch X tze, 2008 ) was used to evaluate the precision of RSPP because the system shows a list of relevant results. Precision and recall at the first result was 86.7% and the precision of the second results falls because the test data set just accept one ideal pattern. Feedback patterns were appropriately recom-mended, but they are presented in the second list of results (the list of assessment patterns). Based on the test data set, if the system showed just one pedagogical pattern and one assessment pattern, its recall will be of 100%. 4.3. Evaluation of the satisfaction
The evaluation of the user X  X  satisfaction was structured in 3 parts. Initially it was performed with courses of the Master program in Math at the University of Cauca (users unfamiliar with the use of web applications, but with high skills in ped-agogy and didactics) and subsequently it was performed with courses in the Systems Engineering program at the University of Cauca and finally with Euclidean Geometry courses in the University of Cauca and two other Colombian universities. The first assessment in Master in Math centered on the functionality and interface of the system, then the evaluations were con-ducted on both the interface (explained in the next section) and on the accuracy of the recommendation, and more specif-ically, measured by the satisfaction of teachers and students with the pattern recommended by the system and its use in a class session. Table 5 presents a summary of the evaluations performed in the recommendation system. These evaluations are presented in chronological order and for the course of Database Laboratory II, the research group that developed RSPP avoided direct and indirect interaction with students and teachers. In this sense, the positive outcome of this evaluation shows that, as well as the fact that the system is usable without further training (the only requirement is the ability to oper-ate a computer and a Web explorer) it also generates recommendations that highly satisfy the needs of the users. In addition, informal comments from teachers were very positive regarding how RSPP allow them to learn didactics more appropriately for their classes in an organized way and in practice. 4.4. Usability evaluation
For this evaluation the guidelines proposed by S X nchez (2000) from the University of Chile were taken into account, with a review and improvement of Carlos Ardila, a lecturer in the area of software engineering at the University of Cauca. It was also based on definitions of usability presented by Nielsen (2005) .

These guidelines allow users to evaluate the system in questions organized into eight (8) sections, namely: (1) visibility of system status (system tells the user what he is doing), (2) the relationship between the system and the real world (meta-phors), (3) user control and freedom (undo and redo operations, avoid errors), (4) consistency and standards (similarity of the pages, use of conventions, avoiding changes in vocabulary and style), (5) aesthetic and minimalist design (concrete dia-logues and without irrelevant information, importance to the most relevant information), (6) speed and means (the site must be fast and efficient in its use for both beginners and expert users), (7) Record of information in the system, and (8) Obser-vations (teachers specific information regarding the recommendation process).

The response options for each question are bad, poor, acceptable, good and excellent, except for the last two sections which choices are yes or no. This survey was filled out by 77 users, who expressed mostly excellent (44.4%) or good (46.4%) results, while acceptable (8.4%), poor (0.8%) and terrible (0%) results totaled just 9.2% of total answers. The last two sections produced a positive response of 89.5% and a negative of 10.5%. Although this assessment obtained very favor-able results, it allowed the identification of some necessary improvements that are included in the current version of the web information system. 5. Conclusions and future work
Ontologies are an effective tool for representing the knowledge that underlies the pedagogical patterns, defining an unambiguous standard vocabulary that allows reuse and the sharing of these patterns more efficiently. The representation of the pedagogical patterns using ontologies provides an additional tool that allows analysis aimed at explaining why the same pedagogical pattern in certain academic contexts produces successful results while for others it does not, even though the methodology suggested by the pattern in the PPP project is always the same.

Using a dynamic minable view (with variable columns) and supplementary tables in the way of dictionaries allowed a flexible solution that both improved the response time of the recommendation and could be used in other areas of applica-tion where enumerated data of multiple cardinality need to be prepared.

Using a system of weights on the dimensions of the minable view along with the standardization of data, dimensionality reduction with SVD and cosine similarity allowed the successful implementation of a hybrid recommendation system that makes appropriate and coherent recommendations related to the needs of the lecturers.

The use of tables in the database to store the results of calculations of the SVD algorithm allows the system to continue making recommendations even when the system is recalculating the model (minable view and matrices U , S , V increasing the availability of the system without sacrificing the present model. Contrary to the option of batch execution, in which the system has a model that is out of date while it returns to rerun the updating process in a specified time (daily, weekly, monthly), and the system is offline while the model is updated.

A recommendation system of pedagogical patterns as proposed in this project enables teachers to access directly to pat-terns that offer solutions to the different problems they face and helps them achieve the forces (accomplishments or goals) which have been proposed for their course. It also promotes the use and improvement of them employing the feedback ob-tained from teachers who use them.

It was possible to build a usable tool with which, in a few steps, teachers can get  X  X  X eadily available X  X  advice on how to guide a subject in any given academic context in a better way and how to provide information such as learning style, age, origin, academic semester, among others, on each of their students. This can be used to guide the classes in a more appropriate way. In addition, teachers can also get this information to gain an overview of the general trend of the course.
Comparison of RSPP model with other models (content-based approach, user-based collaborative approach, item-based collaborative approach and other variations based on SVD) show better average Mean Absolute Error (MAE) metric. There-fore, proposed model shows an excellent level of prediction accuracy.

The satisfactory results in both the accuracy of the recommendations and the use of application in general, which resulted in this pilot project (unprecedented in the state of the art) of recommendation systems aimed at college lecturers who hope to improve their teaching skills, open the door for further research and expansion of the role of recommender systems and ontologies in supporting present or virtual lecturers at any academic level.

The research group expects to complete the following activities in the near future: (1) Conduct a literature search of other existing pedagogical patterns and analyze their structure to make the necessary adjustments to the ontology pro-posed in this research, putting forward a general representation of all pedagogical patterns. To this end, it is necessary to continue improving the proposed ontology and making efforts for it to be established as a standard of representation of the pedagogical patterns in the PPP and in the academic and scientific community in general. (2) Integrate the System of Recommendation of Pedagogical Patterns with a content management system (e.g. Moodle, Dot Learn or Black Board), so that the teacher is able to conduct and supervise the whole process of teaching and learning with their students in one tool.
 Acknowledgments
The work in this paper was supported by a Research Grant from the University of Cauca under Project VRI-2560. We are especially grateful to Ana Aide Aguirre for her help in translating the document. Also, we are especially grateful to Colin McLachlan for suggestions relating to the English text.
 References
