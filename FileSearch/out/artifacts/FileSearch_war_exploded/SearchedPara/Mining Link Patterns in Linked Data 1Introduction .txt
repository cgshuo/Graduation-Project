 As the rapid growth of semantic web in this decade, there is an exponential growth in the scale of online linked data. As indicated by W3C wiki of Linked Datasets 1 , about communities, companies, and even on the desktop of end-users. All these efforts are now producing an unprecedented huge web of data, bringing the semantic web from vision to practice. We have faced the problem of lack of semantic data, but now, the problem is what and how we can learn from these data. among objects, which may or may not be defined explicitly in ontologies. producing concise and comprehensible summaries for human understanding of linked from the point of view of data providers[3]. 
Although usage mining in semantic web gains a lot of interest in these years [4, 5], Graph; second, we propose a pattern mining algorithm based on gSpan [6], a building Typed Object Graph in Section 3. A data clustering algorithm and a gSpan-performance and mining results are discussed in Section 5. a new data model, which embody object types as well as object links in the model. In this section, we name our new data as Typed Object Graph, and then we define Link Pattern based a notion of RDF2Pattern Homomorphism. 2.1 Typed Object Graph needed for pattern mining, in which object types should be explicitly embodied. will introduce a type determine policy in Section 3.2. Shown in Figure 1, a fragment derived Typed Object Graph is shown aside (object URIs are omitted for simplicity). 2.2 Link Pattern Definition 3 (RDF2Pattern Homomorphism): Given a subgraph g of a Typed Object Graph derived from RDF document  X  and a graph p , An RDF2Pattern which  X   X   X   X  is the edge set of g . , a Link Pattern p is a graph, satisfying that: 1)  X  X   X   X , X   X  is a directed graph, in which each vertex is an user-defined class and 2) There exists RDF2Pattern homomorphism in D , and  X  X  X  X  X  X  X   X   X   X   X  X  X  X  - X  X  X  . order to remove annotations, schema-level definitions, only object links are preserved. There is another issue we have to consider. In the definition of Typed Object Graph, an object must have a single type for the computational complexity of pattern mining. example, in Semantic Web Dog Food, an accepted paper can be defined as an building Typed Object Graph, since multi-types will bring extra complexity in pattern  X  X  in document d i . to t k most frequently, or saying, with the highest documents frequency.  X  X  X  X   X   X , X   X   X  X  X  X  X  X  X   X   X   X  and  X  X  X  X   X   X , X   X   X  X  X  X  X  X  X  X  X  X  . In Rule 1, the single type of an object is assigned to a local dominated type; while in each type is not obvious, the type determination becomes random. 
There is still a case we have to consider, in which the type of an object may be not definitions of an ObjectProperty are utilized to determine an objects X  type. determination, such as described in [8]. Here we use a rather lightweight reasoning to make the pattern mining scalable. Among some frequent pattern mining algorithms, we select gSpan algorithm for massive data. Before pattern mining, we first cluster related Typed Object Graphs into group separately in a divide-and-conquer manner. 4.1 Graph Clustering localized in some RDF documents of the same topic, while not in documents of other perform pattern mining in a divide-and-conquer way. generation [11], and ontology classification [12] [13]. Here we introduce a clustering share a common link pattern, they are affinitive and should be clustered together. Definition 5 ( Direct Connections between Typed Object Graphs ) : Given two  X   X   X   X   X   X  X  X  X   X   X   X   X ,  X   X  X  X  X  X  X   X   X   X   X ,  X   X  ; (3)  X  X  X  X   X   X   X   X ,  X   X  X  X  X  X  X   X   X   X   X ,  X   X  .  X   X  different clusters don X  X  share common link patterns. An example from Falcons dataset into two groups. 4.2 gSpan-Based Pattern Mining Our pattern mining approach follows the idea of pattern-growth-based frequent graph pattern mining algorithms, in which gSpan is a typical and efficient one. Basically, a adding a new edge. not minimum any more. All mined patterns comprise a lexicographic search tree . More details of gSpan and its expansion can be found in [14]. The original gSpan algorithm is designed for undirected and simple graphs. suggestions proposed in CloseGraph [15], we modify gSpan algorithm, especially the DFS coding, to make it adaptabl e to Typed Object Graphs. 
There are two parameters to control the mining results in our implementation. One patterns that can be mined in our algorithm. We will illustrate the mining process through an example, which is shown in Figure 3. Three fragments of Typed Object Graphs are extracted from Semantic Web Dog Food, in which object URIs are omitted. For conciseness, shown in Table 1, we assign with each the DFS coding rules in gSpan, the minimum DFS code of each graph is: g 1 :  X  0,1,C  X  ,p  X  ,C  X  ,1  X   X  1,2,C  X  ,p  X  ,C  X  ,1  X   X  2,1,C  X  ,p  X  ,C  X  ,1  X  Figure 3 shows the rightmost extension from 1-edge to 3-edge candidate link patterns. DFS code is not minimum, which indicates that at least one isomorphic candidate has patterns in the final result. We evaluate our approach on two sets of linked data. The first is Semantic Web Dog implemented in C++ and experiments are performed on a 3GHZ Intel Core2 Duo PC with 4G main memory, running on Windows 7. 5.1 Experiment on Semantic Web Dog Food Semantic Web Dog Food is a well-known and widely-used linked data for scholars. In the dataset, detailed information is provided on accepted papers, people who attended, and other things that have to do with the main conferences and workshops in the area of Semantic Web research. 
This linked data is small in size and it describes limited types of objects. The main feature of it is that objects in this dataset are densely linked, and RDF documents in this dataset are highly unified in style: each describes a same topic using a same link such as each topic of dbpedia, GO annotations, etc. clustered into a single group. 
The time performance o patterns are shown in Fig u consumed in mining proce s exponential way. This is c a Dog Foods are densely co n many candidates are gener a
In Figure 5, we perfor m in Figure 8, with the increa s link patterns both keep d e supports will lead to a los s efficiency of mining. 
Besides, experiments sh o large link patterns disco v describes a typical scenari o the papers are both includ e via an online document. 5.2 Experiment on Falcons Subset Falcons is a semantic web search engine. It collects online linked data, and provides the statistics in shown in Table 3. 
The selected subset is diverse in topics . The 394 derived Typed Object Graphs are crawled linked data, such as Billion Triple Challenge Dataset, etc. 
Figure 7 shows the time performance and number of discovered link patterns with various max -edge and a fixed min -sup = 3: Falcons, objects are not linked so densely, and link patterns are not shared frequently among documents. The nature of sparsely-linked objects results in a relatively smaller Figure 8. Finding frequent patterns h in data mining research. A l classified into three cate g based algorithms, and grap h classified into Apriori-bas e approach has to use the candidate generation, and t candidate patterns. gSpan algorithms, both employin g
Basse et al. has propo s patterns in triple store, w h canonical representation o f then provide a join opera t patterns generated from th between our work and th e involving distributed RDF bases maintained in different servers, while our motivation determination policy, data clustering approach, are fully novel. becoming crucial. In this paper, we present an approach for mining link patterns that improve the scalability. Experiments are performed on two dataset. Time performance and mining results are fully discussed with various parameters. fully utilize the semantics in linked data. Acknowledgements. The work is supported by the NSFC under Grant 61003055, 61003165, and by NSF of Jiangsu Province under Grant BK2009136, BK2011335. We would like to thank Huaping Chen for his valuable suggestions and their work on related experiments. 
