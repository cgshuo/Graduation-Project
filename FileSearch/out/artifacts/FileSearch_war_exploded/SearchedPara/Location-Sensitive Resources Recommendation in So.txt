 In social tagging systems, resources such as images and videos are annotated with descriptive words called tags . It has been shown that tag-based resource searching and retrieval is much more effective than content-based retrieval. With the advances in mobile technol-ogy, many resources are also geo-tagged with location information. We observe that a traditional tag (word) can carry different seman-tics at different locations. We study how location information can be used to help distinguish the different semantics of a resource X  X  tags and thus to improve retrieval accuracy. Given a search query, we propose a location-partitioning method that partitions all lo-cations into regions such that the user query carries distinguish-ing semantics in each region. Based on the identified regions, we utilize location information in estimating the ranking scores of re-sources for the given query. These ranking scores are learned using the Bayesian Personalized Ranking (BPR) framework. Two algo-rithms, namely, LTD and LPITF, which apply Tucker Decomposi-tion and Pairwise Interaction Tensor Factorization, respectively for modeling the ranking score tensor are proposed. Through experi-ments on real datasets, we show that LTD and LPITF outperform other tag-based resource retrieval methods.
 H.3.3 [ Information Search and Retrieval ]: Retrieval models Algorithms, Experimentation, Performance ranking, resources recommendation, location-sensitive
In a social tagging system (e.g., Flickr and YouTube), resources (e.g., photos and videos) are often annotated with descriptive words called tags . Previous studies have shown that searching resources based on their tags leads to very effective and accurate resource re-trieval [2, 6]. However, in some cases, tags are ambiguous. For example, the word mouse could refer to an animal, a cartoon char-acter (Mickey), or a computer peripheral device. Tag ambiguity lowers the effectiveness of tag-based search. Over the years, re-searchers have spent much effort in proposing techniques to deal with the tag-ambiguity problem [3, 5].

With the advances in mobile technology and the global posi-tioning system (GPS), resources, especially images and videos, are geo-tagged with location information. Our observation is that re-sources X  location information often provides useful hints in iden-tifying the semantics of their tags. As an example, consider a set of photos that are tagged with the tag  X  X and X . Depending on the locations at which these photos were taken, the semantics of the tag could be inferred. For example, the tag  X  X and X  of a photo taken in the Sahara very likely refers to the concept  X  X esert X ; for pho-tos taken in Hawaii and Singapore, the same tag probably refers to  X  X each X  and the casino hotel  X  X arina Bay Sands X , respectively. The semantics of a user query can likewise be inferred. For ex-ample, a user located in the Sahara who issues the query  X  X and X  is probably looking for photos of the desert.

In the above example, we suggested that the semantics of a tag or a query could be deduced by the region in which the resource was obtained or the query issuer was located. Intuitively, a region is a set of locations within which a tag or a query carries a unique distinguishing meaning. An interesting question is how these re-gions (such as The Sahara , Hawaii ,and Singapore ) be automati-cally identified. We remark that different tags induce different par-titionings of the world into regions: while there are multiple re-gions for the tag  X  X and X , there are two regions for the tag  X  X ootball X  ( American football in North America and soccer anywhere else in the world), and there is only one region (the whole world) for a tag that refers to some globally known concept, such as  X  X Phone X . Another interesting question is if regions with respect to tags and queries could be identified, how could this information be lever-aged in order to achieve good resource retrieval results. The objective of this paper is to address the above two questions. First, given a tag t , we identify the regions induced by t by using machine learning techniques to train a function f t ( l ) , which maps a location l into a region. Second, given a query q issued by a user located at location l , we estimate the ranking scores of resources with respect to q . We extend the BPR framework [9] to include region information in the score estimation. As we will see later in Section 5, our solutions lead to very good resource retrieval results. Here, we summarize our contributions:
LSI is a popular semantic analysis technique that has proven to be very successful in IR. It attempts to overcome the word ambigu-ity problem by extracting concepts from words in an unstructured text collection, which is realized by performing Singular Value De-composition (SVD) on a term-document matrix and by measuring the tag-pair similarities so derived. With the extracted concepts, one can rank resources w.r.t. a given query by measuring the sim-ilarities between resources and the query on the concept level. Bi et al. [3] observes that user information can improve resource re-trieval results. They extend LSI to the CubeLSI method by apply-ing three-dimensional Tucker Decomposition (TD) on a third-order tensor whose dimensions are resources, users, and tags.
Besides resource retrieval, tag recommendation is also a popular topic in the study of social tagging systems. Factorization models are a popular method. Rendle et al. [10] model the likelihood score that a user u would tag a resource r with a tag t as a 3D tensor, which is approximated using TD. By using AUC (area under the ROC-curve) as the ranking criteria, [10] optimizes the model pa-rameters of TD to obtain optimal values of the entries in the tensor. [9] extends the work of [10] by applying the Bayesian Personal-ized Ranking (BPR) framework in model parameter optimization. In [11], the Pairwise Interaction Tensor Factorization (PITF) model is proposed, which is shown to be more efficient than the TD model used in [10]. These techniques for tag recommendation can also be employed for solving the resources retrieval problem.

Some studies [8, 4] utilize location information in resource re-trieval. Lu, Lu, and Cong [8] present a hybrid index tree called IUR-tree, which combines location proximity with textual similar-ity. They further design a branch-and-bound search algorithm to retrieve resources that are the closest and the most relevant to a query. Our method is significantly different from theirs. In par-ticular, we propose a query-drive n location partitioning algorithm to transform the location dimension to a region dimension, which significantly improves searching performance.
Our approach to integrating location information in solving the tag-based resource retrieval problem consists of two components: (1) A location-partitioning scheme that derives a region-mapping function f t ( l ) for each tag t , and (2) a score function that ranks resources in terms of their relevancy to a given query q .Inthis section we formally define these two problems.

We consider four attributes of a social tagging system: a set of users (taggers) U ,asetoftags T , a set of resources R ,andaset of locations L 1 . We assume that each location l  X  L is represented by a longitude-latitude pair ( x l ,y l ) . Resources in the systems are tagged by users. We assume that the tagging information is repre-sented by a set S  X  U  X  T  X  R  X  L of tagging records. Each tagging record is a quadruple ( u, t, r, l )  X  S , which indicates that auser u assigns a tag t to a resource r . l is the geo-tag location of resource r . Although l is dependent on r , to simplify our dis-cussion, we explicitly include l in a tagging record. A user query q =( u q ,t q ,l q ) is a triplet which indicates that a user u located at location l q , issues a query with the tag t q
L includes all possible locations in the world, not only the loca-tions that are associated with the resources in the social tagging system. we assume that each query consists of only one tag. Our technique can be easily extended to handle multi-tag queries, for example, by considering all the tags in a multi-tag query as a single complex tag . Given a tag t ,the problem of location partitioning is to partition L into a set of k t regions H t = { H 1 ,...,H k t } such that tag t refers to the same concept within each region H i and dissimilar concepts in different regions. This partitioning can be represented by a region mapping function (RMF) f t : L  X  [1 ...k t ] ,which maps a location l  X  L to the region H f t ( l )  X  X  t . We say that tag t induces the region set H t .

Given a query q , we first obtain the RMF f t q .Let H q be the set of regions induced by t q . Note that while the query tag t  X  X and X ) can assume different meanings at different locations of the world, it refers to a unique concept within each region H For notational convenience, we use H q to denote H f t q ( is the region that encompasses the location ( l q ) of the query. U  X  T  X H q  X  R  X  R , which gives a relevancy score of resource r with respect to a user query issued by user u , who is located in the region H , with the query tag t .Aswewillseelater,wesolve this problem by representing the score function  X  y by a 4D tensor  X  the entry  X  y u,t,H,r of the score tensor. Finally, the top-N resources with the highest relevancy scores are returned as the answer set of query q .

In this section we describe the algorithms for solving the location partitioning problem and the resource ranking problem. For the former, we show how to train an RMF f t q for the query tag t the latter, we show how to extend the BPR framework to include region information in estimating the 4D score tensor  X  Y . Our objective is to derive f t q based on the tagging record set S . Our approach is based on two intuitive assumptions: (1) Users in close proximity are likely to have the same understanding of a tag. (2) If t q  X  X  associations (e.g., co-occurrences) with other tags in re-l we first retrieve all the tagging records that involve t q i.e., S q = { ( u, t q ,r,l )  X  S } . Next, we create a set of training instances X in the following way. Given any tag t and a resource r that is tagged by t q , we define the distance of t from t where c ( t, r ) is the number of times resource r is tagged by t .Es-sentially, d q ( t, r ) measures the difference in the tagging frequen-cies of tags t q and t for the resource r , scaled to the range [-1,1]. Next, for each tuple ( u, t q ,r,l )  X  S q , we generate an instance x =( d q ( t 1 ,r ) ,...,d q ( t | T | ,r ) ,l ) and put it in Based on these instances (observations), we create partitions of X to maximize a posteriori (MAP) estimate of parameters as fol-lows. Suppose the instances in X are observations of the mixture of k multivariate normal distributions of | T | +2 dimensions, let z =( z 1 ,z 2 ,...,z | X | ) be the latent variables that determine which distributions the observations come from. We have: Let U =[  X  i ] ,  X  =[ X  i ] ,and P ( z j = i )=  X  i such that 1 . Let  X  =[  X  i ]  X  R k  X  1 + . The model parameters to be estimated is denoted by  X =(  X  , U ,  X  ) . The likelihood function is: where I is the indicator function and f P is the probability density function of a multivariate normal. We apply expectation-maximization (EM) algorithm to find MAP estimates of  X  with the following equations to update  X  , U ,  X  : where P ji is the conditional probability of x j belonging to the i -th distribution, given by: For other locations l  X  L  X  L q , we first determine the location  X  l  X  L q that gives the smallest Euclidean distance D ( l,  X  (i.e.,  X  l  X  =argmin  X  of l , i.e., f t q ( l )= f t q (  X  l  X  ) .
 So far, we have assumed that the number of regions, k , is known. We can determine the value of k by gradually increasing its value from 1 until the likelihood value (Equation 4) stops increasing. Al-gorithm 1 summarizes the location partitioning algorithm LP. Algorithm 1 LP INPUT t q , S q , L , L q .
 OUTPUT The RMF f t q . 1: Generate the set of observations X ; 2: k =0; 3: repeat 4: k = k +1 ; 5: Initialize  X =(  X  , U ,  X  ) ; 6: repeat 7: Update P ji ,  X  , U ,  X  according to Equations 5 -8; 8: until convergence 9: until L ( X ; X , z ) does not increase 10:  X   X  l  X  L q , f t q (  X  l ) = arg max 11:  X  l  X  L  X  L q ,  X  l  X  =argmin  X  12: RETURN f t q
Our next task is to estimate the score tensor  X  Y . We generate the values of the elements in  X  Y by assuming a certain model. Let  X  represents the model X  X  parameters. We determine  X  by first con-structing a set of observations Y and then use these observations to find the optimal  X  following the Bayesian Personalized Ranking (BPR) framework. In the following, we first give the details of how the training set Y is constructed and how BPR is applied. Then, we show how  X  Y is determined using the Tucker Decomposition (TD) and PITF as two possible models of  X  Y .

First, for each record ( u, t, l, r )  X  S , we replace the location l of the record by the region H  X  X  q to which l belongs. Let S
H = { ( u, t, H, r ) | (( u, t, l, r )  X  S )  X  ( H = H f t q auser u tags a resource r 1 , which is located in region H , with the tag t ,then ( u, t, H, r 1 )  X  S H .Since u makes such a tagging, resource r is relevant to the tag t from the perspective of u .On with t ,then r 2 is not relevant to t according to u .Inotherwords,  X  y Y as Given a model and its parameters  X  , we follow [9] in estimating  X  . Specifically, based on Bayes X  theorem, For each observation w =( u, t, H, r 1 ,r 2 )  X  Y , the probability p ( w |  X  Y ) is estimated by, where  X  is the logistic function  X  ( x )= 1 1+ e (  X  x ) . We assume that model parameters are drawn from a normal distribution N the learning rate of BPR. Algorithm 2 shows the model optimiza-tion procedure BPR-OPT for training model parameters  X  . Algorithm 2 Model Optimization Using Bayesian Theorem and MAP (BPR-OPT) INPUT Y ,  X   X  ,  X  OUTPUT the predictive model parameters  X  . 1: Initialize  X  ; 2: repeat 3: Draw ( u, t, H, r 1 ,r 2 ) from Y ; 4:  X   X   X  + 5: until convergence 6: RETURN  X 
Factorization models are very popular models in recommenda-tion systems and resource searching systems. We use TD and PITF as two models for predicting the score tensor  X  Y .Weshowhow these models X  parameters can be learned using BPR-OPT. [Tucker Decomposition (TD)] TD factorizes a high-order cube  X   X  U where p u , p t , p h ,and p r are parameters which control the sizes of  X  C  X  X  dimensions. Each entry in  X  Y can be formulated as: The model parameters  X  include all the entries of  X  C ,  X  and  X  R . For learning the model parameters using BPR-OPT, the gradients  X   X  X   X  y u,t,H,r used in Algorithm 2 are: We call our solution of estimating  X  Y using TD, LTD .Thecom-plexity of LTD is O ( p u  X  p t  X  p h  X  p r ) . [Pairwise Interaction Tensor Factorization] (PITF) The time complexity of TD is high. To improve efficiency, PITF is proposed in [11], which only considers two-way interactions between r and other dimensions. We extend PITF to a 4D version to include the region dimension H . We factorize  X  Y into four factor matrices a parameter that controls the size of the matrices. Each entry in can be formulated as:  X  y BPR-OPT can then be applied in a way similar to that of TD, with the following gradients: We call the resulting solution LPITF , whose complexity is O ( p ) .
In this section we compare the effectiveness of our algorithms in ranking resources for answering search queries.
We conducted experiments on data collected from two social tag-ging systems: Flickr and Picasa. They are photo sharing systems that allow users to annotate photos with tags. Since the raw data is very noisy and sparse, we performed some cleaning and pre-processing. First, we removed system-generated tags such as "up-loaded:by=instagram". Also, to eliminate outliers, any user, tag, or resource that has appeared in less than 10 records of S are removed. Table 1 shows some statistics of the two datasets after cleaning.
Let Q be a set of queries. For each query q  X  Q , a ranking algorithm returns a ranked list of N resources. We evaluate the ef-fectiveness of a ranking algorithm by three metrics, namely, Mean Reciprocal Rank (MRR), Precision (P@ N ), and Normalized Dis-counted Cumulative Gain (NGCG@ N ).

The reciprocal rank of a ranked list is the multiplicative inverse of the rank of the first relevant resource in the list. The MRR score of an algorithm A is the average reciprocal rank obtained by the ranked lists given by A w.r.t. the query set Q . Formally, where rank i is the rank of the first relevant resource in the ranked list for the i -th query. The Precision of a ranked list is the fraction of the resources in the list that are relevant to the corresponding query. The Precision score of an algorithm is the average precision of its ranked lists, which is given by: ranked resource in the list for query q is relevant and 0 otherwise. Finally, the NDCG score [7] is computed as follows: where Z q is a normalization factor (see [7] for details).
We invited 10 judges to participate in the experiments. We ran-domly selected 100 tagging records in S to generate the query set Q . For each selected record ( u, t, r, l ) , we created a query q =( u, t, l ) . We then applied the various ranking algorithms to return their ranked lists for each query. Each judge was given 10 queries and was asked to judge whether each returned resource was relevant to the corresponding query. The judge was not told which algorithm X  X  ranked list did a resource appear. The results were then used to compute the scores for the various metrics.
Besides LTD and LPITF, we evaluate four other algorithms for ranking resources. They are LSI [3], CubeLSI [3], TD [9] and PITF [11]. Due to space limitations, readers are referred to the references for details. In the experiments, the BPR-OPT parameters are  X  = 0 . 05 and  X   X  =5  X  20  X  5 . For LP X  X  initialization step (Algorithm 1, Line 5), we first perform k-means to cluster the instances in k clusters 2 . This result is used to initialize U and  X  .Also,weset  X  result. The model parameters of TD, PITF, LTD, and LPITF are all initialized with N (0 , 0 . 01) .Also,weset p = p u = p t 64.
Figures 1-3 show the scores NDCG@ N ,P@ N , and MRR, re-spectively, of the algorithms when they are applied to the two datasets. From the figures, we see that LSI, which considers only the di-mensions tag and resource performs worst. The three algorithms CubeLSI, TD, and PITF, which consider the user dimension as
The l dimension of x is represented by a longitude dimension and a latitude dimension, both of them are normalized to the [-1,1] range. well perform better than LSI. These three algorithms give com-parable performances among themselves. By considering the loca-tion dimension and extending the 3D tensor to 4D, LTD and LPITF clearly outperform the other four algorithms. The performance of LTD and LPITF is very similar, despite the fact that LPITF uses a simpler factorization model. Given that LPITF is much more ef-ficient than LTD, LPITF is the algorithm of choice for solving the resource ranking problem. tensor and the factorization matrices of TD and PITF. These values affect the accuracy of our approximation of the score tensor have conducted an experiment varying the values of these parame-ters. We observe that in general, setting them to 64 is enough for  X  Y to converge. Therefore, in our performance experiment, we set those parameters to 64.
In this paper we studied the impact of location information on re-source recommendation. We addressed two problems, namely, the location partitioning problem and the resource ranking problem. We proposed the LP algorithm which computes a region mapping function to solve the location partitioning problem. We also pro-posed the LTD algorithm and the LPITF algorithm for estimating the score tensor for ranking resources. Through an experimental study on real datasets, we showed that our location-sensitive algo-rithms outperform other competitors.
 This project is supported by HKU Research Grant 201011159070. [1] SIGMOD 2011, Athens, Greece, June 12-16, 2011 .ACM, [2] S.Bao,G.-R.Xue,X.Wu,Y.Yu,B.Fei,andZ.Su.
 [3] B. Bi, S. D. Lee, B. Kao, and R. Cheng. CubeLSI: An [4] X. Cao, G. Cong, C. S. Jensen, and B. C. Ooi. Collective [5] S.C.Deerwester,S.T.Dumais,T.K.Landauer,G.W.
 [6] P. Heymann, G. Koutrika, and H. Garcia-Molina. Can social [7] K. J X rvelin and J. Kek X l X inen. Cumulated gain-based [8] J. Lu, Y. Lu, and G. Cong. Reverse spatial and textual k [9] S. Rendle, C. Freudenthaler, Z. Gantner, and [10] S. Rendle, L. B. Marinho, A. Nanopoulos, and [11] S. Rendle and L. Schmidt-Thieme. Pairwise interaction
