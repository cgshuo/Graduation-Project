 Network intrusion detection systems are widely used for identifying anomalies in network traffic. Anomalies are patterns in network traffic that do not conform to normal behavior. Any change in the network usage behavior, for example caused by malicious activities such as DoS attacks, port scanning, unsolicited traffic, and worm outbreaks, can be seen as anomalies in the traffic.
Recently, it was shown that network int rusions can successfully be detected by examining the network communications that do not respect the community boundaries [9]. In such an approach, normality is defined with respect to social behavior of nodes concerning the communities to which they belong and intrusion is defined as  X  entering communities to which one does not belong X .
A community is typically referred to as a group of nodes that are densely interconnected and have fewer connectio ns with the rest of the network. However, there is no consensus on a single definition for a community and a variety of definitions have been used in the literature [13,19,28]. For network intrusion detection, Ding et al. [9] defined a community as a group of source nodes that communicate with at least one common destination. They also showed that a traditional community detection algorithm which is based on a widely used definition, i.e., modularity, is not useful for identifying intruding nodes.
In this paper, we extend and complement the work of Ding et al. [9] by looking into other definitions for communities, and investigate whether the communities identified by different types of algorithms can be used as the basis for anomaly detection. Our hypothesis is that misbehaving nodes tend to belong to multiple communities . However, a vast variety of comm unity detection algorithms par-tition network nodes into disjoint communities where each node only belongs to a single community, therefore they cannot be directly used for verifying our hypothesis. Therefore, we propose a simple novel method which enhances these disjoint communities with a layer of auxiliary communities . An auxiliary com-munity is formed over the boundary nodes of neighboring communities, allowing nodes to be members of several communities. This enhancement enables us to show that, in contrary to [9], it is possible to use traditional community detection algorithms for identifying anomalies in network traffic.

In addition to traditional community detection algorithms, another class of algorithms exist which allow a node to belong to several overlapping commu-nities [26]. In this study, we compare a number of such overlapping algorithms with our proposed enhancement method for non-overlapping community detec-tion algorithms for network anomaly detection.

Finally, we propose a framework for network misbehavior detection. The framework allows us to incorporate different community detection algorithms for identifying anomalous nodes that belong to multiple communities. However, since legitimate nodes can also belong t o several communities [28], application-specific filters can be used for discriminating the legitimate nodes from the anti-social nodes in the community overlaps, thus reducing the induced false positives.
We have evaluated the framework by usi ng it for network intrusion detection and unsolicited email detect ion in large-scale datasets collected from a high-speed Internet backbone link. These types of misbehavior have traditionally been very hard to detect without inspecting the content of the traffic. To conclude, we show that by using our methodology, it is possi ble to effectively detect misbehaving traffic by only looking at the network communication patterns.

The remainder of the paper is organized as follows. Section 2 presents related work. Section 3 presents our proposed m ethod for uncovering community over-laps. The framework is presented in Section 4. Section 5 summarizes our findings and experimental results. Fina lly, Section 6 concludes our work. Anomaly detection has been extensively s tudied in the context of different ap-plication domains [6]. In this study, we propose a new graph-based anomaly detection method for identifying network intrusion and unsolicited email in real network traffic. Although there has been considerable amount of research on de-tecting these types of misbehavior, it is still a challenge to identify anomalies by merely investigating communication patterns without inspecting their content. A taxonomy of graph-based anomaly detection methods can be found in [2]. A number of previous studies have proposed methods for finding unusual sub-graphs, anomalous substructure patterns, and outlier nodes inside communities in labeled graphs [11,21,14]. In this study, we merely use the graph structure and therefore we consider only plain graphs without any labels.

Akoglu et al. [3] proposed a method to assign anomaly scores to nodes based on egonet properties in weighted networks. Our framework allows us to incorporate such properties as application-specific filters. Sun et al. [25] proposed a method for identifying anomalous nodes that are connected to irrelevant neighborhoods in bipartite graphs. Ding et al. [9] showed that although finding the cut-vertices canbeusedforintrusiond etection, more robust resul ts can be achieved by using clustering coefficient in a one-mode proj ection of a bipartite network. Moreover, they showed that using a modularity maximization community detection algo-rithm [7] is not suitable for spotting network intruders.

In this paper, we revisit the problem of finding anomalous nodes in bipar-tite/unipartite plain graphs by using community detection algorithms. We de-ploy an alternative definition for an anomaly as suggested in [9] and confirm their finding that maximizing modularity is not suitable for identifying intruders on its own. However, we show that there are several types of algorithms which are useful for misbehavior detection if enhanced with auxiliary communities. In this section, we introduce a novel approach which enables us to deploy existing community detection algorithms for identifying anomalies in network traffic. 3.1 Auxiliary Communities In this paper, we introduce the concept of auxiliary communities. An auxiliary community is added over the boundary nodes of disjoint communities, forcing nodes to become members of more than one community.

The most basic approach is to introduce one auxiliary community for each boundary edge between two different communities. However, a boundary node can have multiple boundary edges. Therefore, an improvement over the above approach is to add only one auxiliary community over a boundary node and all its boundary edges, covering all its neighbors that are members of other external communities (Algorithm 1). Our approach can be further refined to consider the whole one-step neighborhood, i.e., egonet , of a boundary node as an auxiliary community instead of just its boundary neighbors.

Ding et al. [9] defined a community in a directed bipartite network as a group of source nodes that have communicated with at least one common destination. In a bipartite network, there are two distinct sets of source nodes and destination nodes. Based on this definition, the source nodes that belong to the egonet of a destination node form a community. In a unipartite network, a distinct set of source and destination nodes does not exist. Therefore, we apply the above definition of communities only to the sink nodes which have only incoming edges (Algorithm 2).

Figure 1 shows a comparison of the proposed methods for adding auxiliary communities. It can be seen that each approach places the intruding node (black node) in different auxiliary communities (grey communities). The main differ-ence of our methods is that Algorithm 1 only adds neighboring auxiliary (NA) communities over the boundary nodes, whereas Algorithm 2 also allows the neighbors of the boundary sink nodes to be covered by egonet auxiliary (EA) communities. Therefore, a misbehaving node which is not in the boundary of its community can still belong to multiple communities by using Algorithm 2.
The complexity of adding auxiliary communities for a network with a degree distribution p k = k  X   X  ,is O ( nk 3  X   X  max ), where n is the number of nodes, k max is the highest degree, and is the exponent of the degree distribution. 3.2 Community Detection Algorithms In this paper, we use a number of well-know n and computationally efficient (over-lapping) community detection algorithms, which are listed in Table 1. Our goal is to investigate which definition of a community and which types of algorithms are most suitable for network misbehavior detection.

LC and LG find overlapping communities in a graph based on the edges. LG, induces a line graph from the original network to which any non-overlapping algorithm can be applied. In this paper, we uses a weighted line graph with self-loops, E , and refer to LG using this graph as LG(E) . SLPA and OSLOM are both node-based methods and have very good performance [26]. Finally, DEMON is an state-of-the-art node-based, local, overlapping community detection algorithm.
The non-overlapping algorithms used in this study also have very good per-formance [17]. Blondel greedily maximizes modularity and unfolds a hierarchical community structure with increasing coarseness. In this study, we consider the communities identified at both the last and the first level of the hierarchy and refer to them as Blondel and Blondel L1 , respectively. We also use the commu-nities formed by Blondel as input to OSLOM, which modifies these communities in order to improve their statistical significance. Finally, Blondel L1 is also used to partition the nodes in the induced line graphs by LG(E). This section presents our framework for community-based anomaly detection. Algorithm 3 shows the first component of our framework, where overlapping algorithms can be directly used, but non-overlapping algorithms only after being enhanced with auxiliary communities.

The second component of our framework c onsists of a set of graph properties which are used as filters . Our hypothesis is that intruding nodes are likely to be placed in community overlaps. However, non-misbehaving nodes can also belong to more than one community, and basing detection merely on community overlaps, can lead to false positives. The refore, these filters are used to reduce the induced false positives by the community detection algorithms.
 The framework uses a simple method for combining the extracted properties. For each node v in the graph, the anomaly score is calculated as score ( v )= w i is a weight for property  X  i where w i =1,and I (  X  i ( v ) ,t i ) is an indicator function which compares the value of a graph property  X  i ( v ) to a corresponding threshold value t i such that I (  X  i ( v ) ,t i )=
The threshold values and weights are dependent on the type of data and prior knowledge of normal behavior, which is necessary for anomaly detection and can be achieved from studies of anomaly-free data. Finally, the anomaly score score ( v ) can be used to quantify to what extent a node v is anomalous.
The properties presented in Algorithm 4 are examples of community and neighborhood properties that we have used as filters in our experiments for intrusion and unsolicited email detectio n. The selection of appropriate filters depends on the application of anomaly detection.

Network intruders are normally not aware of the community structure of the network, and therefore communicate to random nodes in the network [23]. It is expected to be very expensive for attacker s to identify the network communities, and even if they do, limiting their communication with the members in the same community can inversely affect their gain. Therefore, the number of communities per node, as well as the ratio of the number of communities per node over the number of its neighbors, which correspond to  X  1 and  X  2 in Algorithm 4, respectively, are expected to be promising properties for finding intruders.
The rest of the properties, are graph m etrics that correspond to the social behavior of nodes and can be extracted from the direct neighborhood of the nodes. We have used these properties for detecting unsolicited email (Section 5.3) and therefore in the following we explain them in the context of spam detection.
The clustering coefficient of a node is known to have a lower value for spam-mers than legitimate nodes [15,20]. Property  X  3 calculates one minus the clus-tering coefficient so that spammers are a ssigned higher values. It has also been shown that spammers are mostly using randomized fake source addresses and therefore it is not expected that they receive many emails [16]. Property  X  4 cal-culates the ratio of the out-degree over the degree of the nodes, which is expected to be high for the spammers. Finally, it has been shown that spammers tend to use the fake source email address to send only a few spam, and target each receiving email address only once [16]. Th erefore, the degree of a node over its edge weights, property  X  5 , is expected to be higher for spammers than legitimate nodes, where the edge weights correspond to the number of exchanged emails. We have evaluated the usability of different algorithms in our framework using two different datasets which were genera ted from network traffic collected on a 10 Gbps Internet backbone link of a large national university network. Flow Dataset. The flow level data was collect ed from the incoming network traffic once a week during 24 hours for seven weeks in 2010 [4]. The flows were used to generate bipartite networks where source and destination IP addresses form the two node sets. The malicious source addresses in the dataset were taken from the lists reported by DShield and SRI during the data collection period [10,24]. This dataset is used to compare our approach with the method proposed by Ding et al. [9] for network intrusion detection. The datasets are similar with respect to the ground trut h and only differ with respect to the collection location and the sampling method used.
 Email Dataset. This dataset is generated fr om captured SMTP packets in both directions of the backbone link. The collection was performed twice (2010 and 2011), where the duration of each collection was 14 consecutive days. This dataset was used for generating email networks , in which email addresses repre-sent the nodes, and the exchanged emails represent the edges. The ground truth was obtained from a well-trained content-based filtering tool 1 which classified each email as legitimate ( ham ) or unsolicited ( spam ). 5.1 Comparison of Algorithms In this section, we present a comparison of the algorithms using the email dataset. Figure 2a shows the percentage of ham and spam nodes (averaged over the 14 days in 2010), which are placed in multiple communities by different algo-rithms. It can be seen that many ham nodes belong to more than one community, which is an expected social behavior. It can also be seen that, most algorithms place the majority of spammers into more than one community, except OSLOM and Blondel which tend to form very coarse-grained communities.

The figure also shows that, regardless of which non-overlapping algorithm being used, adding egonet auxiliary communities (Algorithm 2) places more spam than ham nodes into several communities compared to adding neighboring auxiliary communities (Algorithm 1). The reason is that NA communities are only added over the boundary nodes, however, EA communities also allow the neighbors of the boundary sink nodes to be covered by auxiliary communities.
Finally, Figure 2b shows that a higher percentage of spammers belong to more than eight communities compared to legitimate nodes. The same observation holds for the data collected in 2011. Therefore, we can confirm that both fine-grained algorithms enhanced with EA communities, and overlapping algorithms can be used to spot misbehaving nodes based on the number communities to which they belong. 5.2 Network Intrusion Detection It has been shown that a non-overlapping community detection algorithm (which maximizes modularity) is not suitable for identifying intruders in network flow data [9]. In this study, we have further investigated the possibility of using dif-ferent community detection algorithms, including a modularity-based one, by using auxiliary communities for network intrusion detection.

One example of network intrusion is port scanning, where a scanner searches for open/vulnerable services on selected hosts. Current intrusion detection sys-tems are quite successful in identifying scanners. In this paper, we just verify the possibility of detecting scanners using a community-based technique.
We generated one bipartite graph from the flows collected for each day. As an example, the flow graph generated from the first day of data contained 51,720 source nodes sending 93,113 flows to 32,855 destination nodes. This includes 607 malicious nodes (based on DShield/SRI reports) that have sent 7,861 flows. We made the assumption that the malicious source nodes that have tried to communicate with more than 50 distinct destinations are suspected of scanning. Figure 3a shows the ROC curves for seven different days. These curves show the trade-off between the true positive rate (TPR) and the false positive rate (FPR). We have used Blondel L1 enhanced with egonet auxiliary communities (EA), and have only used property  X  1 , i.e., the number of communities to which a node belongs, as the filter. It can be seen that this approach yields high performance with mean area under curve (AUC) of 0.98, where around 90% to 100% of malicious scanners are detected with a FPR of less than 0.05. This observation confirms that our framework is successful in identifying scanners.

Network intrusion attacks are not limited to scanning attacks, therefore we have also tried to identify other malicious (DShield/SRI) sources and have com-pared our approach with the method proposed by Ding et al. [9]. Our exper-iments show that the performance of both methods are quite consistent with mean AUC 0.60 (standard error 0.009) for the method by Ding et al. and 0.62 (standard error 0.015) for our approach using LG(E) as the overlapping commu-nity detection and properties  X  1 and  X  2 as filters. Overall, these results confirm that the community structure of a network provides a good basis for network intrusion detection and both non-overlapping communities enhanced with EA communities and overlapping communities can indeed be used for this purpose. 5.3 Unsolicited Email Detection Our experimental comparison of community detection algorithms in Section 5.1 showed that most of the studied algorithms place spammers into multiple com-munities. In this section, we investigate how these algorithms can be used in our framework to detect these spammers only by observing communication patterns.
For this study, we have generated on e email network from the emails col-lected for each day. The community detection algorithms were applied to the undirected and unweighted giant connected component of each email network. The edge directions and weights were later taken into account for adding aux-iliary communities and calculating different graph properties. We consider an email address to be a spammer if it has sent more than one spam to more than one recipient. As an example, the email network generated from the first day of data in 2010, contains 167,329 nodes and 236,673 edges, where 23,628 nodes were spammers sending 126,145 spam emails. It is important to note that the vast majority of the spammers have not sent large volumes of email and there-fore a simple volume-based detection method would not be suitable for spammer detection.

Figure 3b shows the ROC curves for our spam detection method using different algorithms and the community-based properties  X  1 and  X  2 . It can be seen that OSLOM, which aims at forming statistically significant communities fails to identify spamming nodes. It can also be seen that a node-based overlapping algorithm, SLPA, and an edge-based algorithm, LG(E), perform similarly, and the AUC (not shown in the figure) is identical for both algorithms (0.76).
Figure 3b also shows the ROC curves for non-overlapping algorithms which are enhanced with our auxiliary communities. It can be seen that Blondel, which aims at optimizing modularity, performs very poor. This observation is in accord with the observation in [9] that a modularity maximization algorithm is not suitable for anomaly detection due to its resolution limit. However, Blondel L1 (first level in the community hierarchy of Blondel), which forms finer granularity communities, performs drama tically better than its last level using either type of the auxiliary communities. Moreover, it can be seen that adding EA communities leads to better results co mpared to NA communities.

Overall, our experiments for differen tdaysinbothemaildatasetsshowed that Blondel L1 and Infomap enhanced with EA, SLPA, LG(E), and DEMON all perform well with respect to placing spamming nodes into multiple communities. In practice, low false positive rates are e ssential for spam detection, therefore both Blondel L1 with EA communities and LG(E) that allow us to, on average, detect more than 25% and 20% of spamming nodes, respectively, for different days with very low FPR (less than 0.01) are the most suitable algorithms.
These results confirm that our method for adding EA communities to enhance non-overlapping algorithms yields not only comparable, but even better, results than an overlapping algorithm. Although both Blondel L1 with EA communities and LG(E) use the same modularity-based algorithm as their basis (we have applied Blondel L1 on the induced line graph of LG(E)), adding EA communities has also a lower complexity than inducing weighted line graphs (Table 1).
As mentioned earlier, our framework allows us to incorporate a number of application-specific filters to reduce the induced false positives (Algorithm 4). Figure 3c shows a comparison of the spam detection using filters based on com-munity properties (  X  1 and  X  2 only) and the combination of community and neighborhood properties (  X  1 - X  5 ) for the first day of data in 2010. It can be seen that use of additional filters improves the detection (the same observation also holds for the algorithms not shown).

Finally, Figure 4 shows the AUC for spam detection using our framework with LG(E) and Blondel L1 enhanced with EA communities over 14 days during 2010 and 2011. It can be seen that the results are quite stable over time and the AUC of our method for adding EA communities compared to a more complex overlapping algorithm is much better when only community properties are used. In this paper, we have evaluated the performance of community detection algo-rithms for identifying misbehavior in network communications. This paper extends and complements the previous work on community-based intrusion detection, by investigating a variety of definitions for a community, introducing auxiliary com-munities for enhancing traditional community detection algorithms, and showing that, in contrary to previous work, these algorithms can indeed be deployed as the basis for network anomaly detection.

We have also provided a framework for community-based anomaly detection which allows us to find the nodes that belong to multiple communities by ei-ther using auxiliary communities or overlapping algorithms. It also enables us to deploy neighborhood properties, which are indicative of social behavior, for dis-criminating the nodes that naturally belong to more than one community from the anti-social ones. The applicability of our framework for identifying network intrusions and unsolicited emails was evaluated using two different datasets com-ing from traffic captured on an Internet backbone link. Our experiments show that our framework is quite effective and provides a consistent performance over time. These results suggest that detecting community overlaps is a promising approach for identifying misbehaving network communications.
 Acknowledgments. This work was supported by .SE  X  The Internet Infrastruc-ture Foundation and SUNET. The research leading to these results has also re-ceived funding from the European Union Seventh Framework Programme (FP7/ 2007-2013) under g rant agreement no. 257007.

