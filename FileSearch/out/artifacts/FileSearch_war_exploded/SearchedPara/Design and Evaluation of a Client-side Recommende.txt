 Most recommender systems found on the web are server-based and centralised. However, it can be difficult to maintain the responsiveness with this approach when there are large numbers of concurrent users. In this demonstration we present an alternative approach where major parts of the recommender system are implemented in scripts run by the user X  X  client system. H.3.3 [ Information Systems ]: Information Search and Retrieval Recommender Systems, Distributed Systems, Client-side Our previous work involving a user centric study of recommender systems [1] indicated that users valued the ability to explicitly influence the behavior of recommender systems. This encouraged us to pursue research on conve rsational recommender systems where users are able to steer the recommendations to suit their current mood and interests. Howe ver, to provide a satisfactory user experience these systems need to be responsive. This led us to explore the feasibility of a c lient-side approach which could provide low latency whilst suppor ting many concurrent users. In our approach all tasks except model training are implemented on the client system using tw o components downloaded from the server: 1. A recommender model which is trained and rebuilt at 2. A recommender engine which implements prediction, Since both of these components are static files, which can be cached, the approach is easily scalable to a large number of users. The recommender system is also eas ier to manage and deploy as the complexity and processing requirements of the server are reduced. The responsiveness becomes independent of the load on the server and the round-trip dela y to the server is eliminated. However, the client-side approach is only practical when there is a limited number of recommendabl e items since the model size generally scales with the numbe r of items. Consideration must also be given to the fact that the recommender model would be in the public domain and whether it contains any sensitive data. The context of our work is an online TV and radio catch-up service where programmes are available on demand for 7 days after broadcast. In this application the number of programmes available at any one time is relatively small so the client-side approach is very practical. Theoretically, any algorithm wh ich supports the incremental addition of new users and their f eedback would be suitable. For our initial implementations we have used either the Weighted Item k-NN or the Weighted Item Attribute k-NN algorithm as implemented in the MyMediaLite Recommender System Library [2] which is used to produce the required recommender models. quantitative evaluations. The recommender model in this algorithm is a sparse correlation matrix which lists the nearest neighbors for each item and their weights. In our prototype implementa tion the recommender model is embedded in a JavaScript file. This file also carries some basic metadata for each programme (e.g. title, locator and genre) which is provided for filtering and presentation purposes. The model describes around 700 programmes a nd is typically about 120 KB including metadata. However the size could be reduced substantially by using a binary format. The recommender engine is also implemented in JavaScript. It accepts positive and negative binary user preferences, as these match the requirements of our applications, but could be adapted to other rating schemes. The recommendations can be filtered by genre or media type (i.e. TV or radio) and are typically produced in around 20 milliseconds. An open source implementation of this recommender engine is availabl e with tools for producing the required model file 1 . The client-side recommender is currently under evaluation in user trials of two prototype applications. http://github.com/bbcrd/clientside-recommender The first application is a TV and radio programme recommender system designed for tablet s and personal computers 2 . It provides a simple drag-and-drop user interface as shown in Figure 1. Users are presented with a scrollable list of programme recommendations which they can filter by genre and media type. The initial ordering of the list is determined by the overall popularity of each programme. The user is able to express explicit preferences by dragging individual programmes into  X  X ike X  and  X  X islike X  boxes positioned below. These preferences are immediately used by the client-side recommender to re-rank the programmes and refresh the recommendation list. Initially, the application was implemented using a server-based recommender system and there was a noticeable and variable lag between each user input and the refresh process. With the client-side approach the delay is imperceptible. Participants in the trial are asked to find programmes to watch using the application and then complete the associated questionnaire. The second application is a TV programme recommender system which provides a continuous seque nce of programme clips. The user can either skip or add each programme to their playlist for later consumption. These two us er actions are interpreted as negative and positive user feedback respectively. The recommender engine uses this im plicit user feedback to update The mobile version of this app lication is shown in Figure 2. In the present implementation the programme clips are streamed by the server. However, the c lips could also be downloaded, allowing the application to function when the user is offline. This offline capability would only be possible with a client-side recommender. http://sibyl.prototyping.bbc.co.uk/ This application was developed within the ViSTA-TV EU-funded collaborative research project 3 which is developing a stream processing engine to provide recommendations based on a real-time analysis of IPTV viewi ng data and media content. An alternative, client-side approach to the implementation of web-based recommender systems ha s been presented which can be used to create highly responsiv e and easily scalable systems. The approach is highly effective in conversational recommender systems, which require a high degree of interaction with the user. It supports the possibility of privacy-preserving recommender systems, where the user can choos e to retain all personal data on the client, and would allow pers onalised recommendations to be provided in unidirectional broadcast systems, where there is no return path. The authors would like to thank Anthony Onumonu, Dan Nuttall and Andrew Wood for their design and development work. The research leading to these results has received funding from the European Union Seventh Framework Programme FP7/2007-2011 under grant agreement n X  296126. [1] Knijnenburg, B. P., Willemsen, M. C., Gantner, Z., Soncu, [2] Gantner, Z., Rendle, S., Fre udenthaler, C. and Schmidt-http://vista-tv.eu 
