 Recently, web services have emerged as a new paradigm that supports loosely coupled distributed software systems. However, in most cases, a single web service can hardly satisfy practical applications. For a complex business process, collaboration of multiple web services is required to achieve the preset goal. At describe the process of collaboration. But most choreography proposals only provide notations to describe the message flow in the collaboration, lacking of some reasoning mechanisms to verify the interaction between web services. As a result, a predefined process is likely to behave abnormally due to web services interacting incorrectly. To deal with this issue, it is needed to provide a formal method to verify the soundness of underlying web services X  collaboration. 
Frankly, there exist several verification methods [3-9] . They are based on the global information interaction between web services. The main task is to find out whether or not the interaction process matches the given model, which can verify the correctness of global conversation between services. However, these verification methods don't take it into account whether the behaviors of a service are compatible with the global other for customers. Suppose that they are syntactically compatible in invoking interfaces, but not negotiate well in collaboration protocol. The online shopping waits for payment before sending the product while the customer believes Cash-on-Delivery. It is certain that the collaboration between them will lead to a deadlock, no information interaction which has been ve rified correctly by above methods, there still might exist a web service of which the behaviors are not compatible with it. This collaboration will fail finally in practice. 
In this paper, we propose a verification method of collaboration between WSCI-based web services. Here we employ a formal method, say automata, to formalize WSCI. Based on the automata, we can verify the compatibility between the behaviors of web services through a client/server model. Such compatibility is important to guarantee the successful completion of collaboration of web services. 
The paper is organized as follows. After this introduction, section 2 surveys related works. In section 3, we discuss how to model web services based on WSCI with summary and future works. Recently, verification of web service collabora tion has been attracting much attention. approach is proposed by the authors for verifying Web service composition, using Message Sequence Charts (MSCs) and BPEL4WS. In [4-6], the authors established a conversation oriented framework to specify web service compositions and reason Logic) to specify the contracts in semantic web services, and a proof theory for CTR-contracts. In [8] the author describes an approach to modeling web services specified correctness requirements of a process. Although above approaches can effectively inner behaviors of each web service. 
In [9], the authors use CCS (a kind of process algebra) to formalize WSCI, and between them can be automatically generated. Though this approach can effectively formalize WSCI, but the verification is not intuitionist. 
In this paper, we will show the benefit of using automata to formalize WSCI. We verify the compatibility among web services through a client/server model. We will show that it guarantee the soundness of collaboration of web services. The Web Services Choreography Interface (WSCI) defines the overall choreography describing the messages between Web services that participate in a collaborative description of WSCI is about the flow message of exchanged by a web service. First, we show how to formalize the basic operations of web service. The type of basic operations of web service can be divided into four types as shown in the left of fig 1. [2]. 
In the right of fig 1, we list the model of basic operations of web service. We use express one state of the web service:  X 0 X  means the start state,  X  X  X  means the end state and other means the intermediate state. 
Then, we can build the flow model of web service based on the model of basic operations. This, we only deal with the four classic structures of flow model: sequence, concurrent, choice and loop. We think the four structures are enough to express the flow model of interacting web services. 
In the left of fig 2, we display the model of four kinds of structure. We use signal express the concurrent result,  X  X  X  means the result of concurrent actions can be simply constructed from Cartesian product of all its branches. And now, based on this model, we can get a model of the whole web service. The original model of the service is a NFA, and we can turn it into a DFA. receive a message BookingRequest (Rt) from any clients first, then replies a message BookingAck (Ak), Finally, it sends a message Confirm (Cn) or Refusal (RI) depending on judgment. states. Definition 3. The marked conversation set of a web service is M based on L , it marks each conversation of L with  X 0 X  to express the  X  X eceiving message X  and  X 1 X  to express the  X  X ending message X  . local conversations can be completely realized during this execution. Once we have translated web services written in WSCI into a formal model--automata, we can check whether two or more web services are compatible in number of web services in collaboration: two web services and more web services. 4.1 Two Web Services Cases collaboration with another web service, we divide R of a web service into three types: state of receiving message, then the web service is a server , if the initial state is only staying in the state of sending message, then the web service is a client, otherwise the may be a client or a server in any collaboration. 
The conversation classes based on the role of one web service are consisted of two expresses the conversation set based on the role of server. 
The previous example shows that Sc =  X  and Ss ={RtAkCn, RtAkRl}. And according to definition 3, the corresponding Mc =  X  and Ms ={011, 011}. web services, A is the client and A X  is the server, in any collaboration with them, if A X  has a successful execution, A must have a successful execution, and the conversations generated from their executions must be identical, we think they are compatible. compatible in a collaboration iff: The proof of this theorem is omitted here. Example 1. A client is shown in fig 3, from its model, we know it is not compatible execution of the client. 4.2 More Web Services Cases When the number of web services in a collaboration is more than two, the analysis of compatibility is different to the above, we can X  X  simply apply the client/server model. First, we give the concept of the global conversations. Definition 7. (Global Conversation): A global conversation is a flow of messages interaction among collaborating web services. We express it with G.
 Definition 8. (Compatibility of More Web Services): If there exists collaboration compatible in G . Client/Server model to solve the complicated problems. Thus we need to make some changes. The following shows the judgment algorithm : In this paper, we described an approach to model web services specified in WSCI with automata. Based on this model, we can effectively check whether two or more up an integrated modeling, verificating, and testing environment for web services. [8] Holger Schlingloff. Modeling and Model Checking Web Services. Electronic 
