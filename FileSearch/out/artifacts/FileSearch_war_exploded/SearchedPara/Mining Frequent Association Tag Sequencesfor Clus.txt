 XML has been widely used as de facto standard for data representation and exchange. The increasing XML documen ts have raised some issues on how to store, filter and retrieve XML documents more effectively and efficiently. The clustering technique can facilitate such applications by grouping XML docu-ments according to their similarity. So XML similarity computation has become a fundamental problem of many XML process technique, and applied to many fields, such as semi-structured data integration, classification/clustering of XML documents, XML retrieval, and so on [1].

Since hierarchical structure is incorporated in the XML documents, clustering of XML data significantly differs from flat data. Exploiting the structure infor-mation for computing structural similarity is a crucial issue in XML similarity computation. Some path based methods [2,3,4] represent XML documents as set of paths, and then compute similarity using set or vector operations. For example, considering the three XML documents in Fig.1. In the bag of tree paths model (referred as BOTP in this paper) proposed in [2], a document is represented by the set of paths from the root node to the leaf nodes of corre-sponding DOM tree. The three document s in Fig.1 are represented as the sec-ond column in Table 1. The two pairs of paths:  X  X rticle/fulltext/size X  vs  X  X r-ticle/fulltext X ,  X  X rticle/authors/author/name X  vs  X  X rticle/authorlist/author/ name X  in doc1 and doc2 are deemed different completely. In fact, the two pairs of paths are very similar. Bag of tree paths model retains information on all parent-child relationships, but it ignores the sibling relationships, for ex-ample, paths  X  X rticle/fulltex t/size X  and  X  X rticle/title X  in doc1 and doc3 are independent in BOTP . A stronger model called bag of XPaths model (referred as BOXP in this paper) is also proposed in [2]. BOXP incorporates some, but not all, sibling information.
 Reference [3] mine frequent XPaths in document collection and represent an XML document by a vector consists of frequent XPaths (called commonXPath). Let minimum support is 60%, the documents in Fig.1 can be represented as the third column in Table 1. Though the paths  X  X rticle/*/author/name X  in doc1 and doc2 is deemed as similar, the path  X  X rticle/author/name X  in doc3 is deemed different. Essentially, the paths  X  X rticle/authors/author/name X  ,  X  X rti-cle/authorlist/author/name X  and  X  X rticle/author/name X  are very similar. In addition, [3] also assume the paths are independent in computing similarity by vector. For example, paths  X  X rticle/fu lltext X  and  X  X rticle/ title X  are all con-tained in the three documents, and there is sibling relationship between them, but [3] ignores the information.

Except root paths from root node to leaf node, reference [4] take all subpaths of root paths into consideration. An XML document can be represented as a set of all root paths and subpaths, as the forth column in Table 1. This method still can not solve the problem completely that paths  X  X rticle/authors/author/name X  and  X  X rticle/authorlist/author/name X  are similar , and it still ignores the sib-ling relationships between elements in computing similarity.

From the above example we can see, the existing path based approaches for computing structural similarity among XML documents have the following two problems: 1) It can not be handled well in the case of matching partially between paths. 2) Though the parent-child/ancestor-des cendant relationships between elements In this paper, adopting the concepts of frequent and sequential pattern, we propose an approach based on frequent association tag sequences to address the two issues. Our contributions include: 1) We introduce the concept of Frequent Association Tag Sequences (FATS) to 2) We devise an algorithm named FATSMiner to mine the frequent association 3) We have conducted an extensive experimental study on two datasets to verify The rest of this paper is organized as follows. In Sect. 2 we briefly review some related work in the area of measuring structural similarity among XML docu-ments. In Sect. 3, we describe the concept of FATS firstly, and then we present the algorithm FATSMiner and the structural similarity measurement based on FATS . In Sect. 4 we illustrate the effectiveness of the FATS approach in XML document clustering. Finally, in Sect. 5, we conclude the paper. Measuring the structural similarity among XML documents has been an active area of research in the past few years, and various methods have been proposed to solve the problem in the literature. As described in previous section, some methods view XML documents as set of paths[2,3,4]. Joshi et al. propose a bag of tree paths model, in which a path is a sequence from root node to leaf node[2]. Bag of tree paths model retains information on all parent-child relationships, but ignores sibling relationships. Joshi et al. extend the tree paths model, and con-sider XML document as a bag of XPaths[2]. XPaths incorporate some, but not all, sibling information between elements. Leung et al. represent XML document as a set of simple XPath expressions and then the structural similarity can be computed by determining the number of paths and their level of hierarchy that are similar[3]. Davood et al. represent XML document as set of all root paths and their subpaths, and then Jaccard Coefficient etc. metrics are used to com-pute the structural similarity[4]. However, the path based approaches have the two defects described in previous section.

Some other methods adopt tree edit distance to measure the structural simi-larity among XML documents[5,6]. In these methods, XML documents are repre-sented as ordered/unordered labelled tree and it is designed to find the cheapest edit operation sequence which can transform an XML tree to another, then the sequence is used to compute the structural similarity. The differences among the various tree distance algorithms are edit operations allowed and the way of us-ing XML tree nodes. Nierman et al. define five operations: relabel, insert, delete, insert tree, and delete tree. And they tak e into account XML issues such as repet-itive and optional fields[5]. Zhou et al. propose an approach named MED(Merge-Edit-Distance). Given two XML document trees A and B , it compresses the two trees into one merge tree C and then transforms the tree C to the common tree of A and B with the defined operations such as delete, reduce and com-bine. The cost of the operation sequence is defined as Merge-Edit-Distance[6]. However, it is well known that any edit distance measure critically depends on the costs of the underlying edit operations and it has been shown by Zhang et al. that the tree edit distance com puting among unordered labelled trees is NP-Complete[7].

Some additional other methods mine frequent subtrees from XML collection using data mining technique[8,9,10], and view frequent subtrees as features of XML documents. Termier et al. and Zaki propose two mining frequent sub-trees methods from semi-stru ctured data named T reeFinder[8] and TreeMiner[9] respectively, and the mined frequent s ubtrees can be used to compute the struc-tural similarity. Miyahara et al. propose a method for finding all maximally frequent tag tree patterns in semi-structured data. Though frequent subtree can retain the structure information of XML documents well, most of frequent sub-tree mining methods are not efficient and computationally expensive, especially in the case of large dataset and the structures of documents are complex. In this section, we first introduce the basic definitions used in this paper, include tag sequence, frequent tag sequence, asso ciation tag sequence and frequent asso-ciation tag sequence etc. We then descri be the frequent association tag sequence mining algorithm FATSMiner . Finally, we define the structrual similarity mea-sure based on frequent a ssociation tag sequence. 3.1 Basic Definitions An XML document can be modelled as a node-labelled directed tree where each node in the tree represents an element in the corresponding XML document. The node is labelled with the tag name of the element. We do not distinguish between elements and attributes, so attr ibutes are treated as elements. Each edge of the tree represents a hierarchical inclusion relationship between either two elements or an element and an attribute. Since we are only interested in the structure of an XML document, we ignore text nodes. So an XML document can be represented as a set of paths from the root node to the leaf nodes. Each path from the root node to a leaf node contains the root node, the leaf node, and all the intermediate nodes required to reach the leaf node in sequence and each path can be represented by the label (tag name) sequence. Given a document collection, we can extract all tag name s contained in the documents. To make our description more concise, we refer to tag name as tag and the set of all tags as tagset .
 Definition 1. (Tag sequence) A tag sequence is an ordered list of tag. We denote a tag sequence  X  by &lt;a 1 ,a 2 ,  X  X  X  ,a n &gt; ,where a i is a tag in tagset. The length of tag sequence  X  is the number of tags contained in  X  .Atagsequence with length l is called an l-tag sequence .
 Definition 2. (Tag sequence contain relation) A tag sequence  X  : &lt;b 1 ,b 2 ,  X  X  X  ,b say tag sequence  X  is a sub-tag sequence of  X  or tag sequence  X  is a super-tag sequence of  X  , denoted as  X   X   X  or  X   X   X  .Iftagsequence  X  is a sub-tag sequence of  X  ,and m , the length of  X  ,isnotequalto n , the length of  X  ,thenwe say tag sequence  X  is a proper sub-tag sequence of  X  or tag sequence  X  is a proper super-tag sequence of  X  , denoted as  X   X   X  or  X   X   X  .
 For example, for the given documents in Fig.1, the tagset is { article, fulltext, and &lt; article, author, name &gt; are two tag sequences, and tag sequence &lt; article, cle, authors, author, name &gt; and &lt; article, author, name &gt; are sub-tag sequences is a proper sub-tag sequence of &lt; article, authors, author, name &gt; .
A path in XML document tree can be viewd as a tag sequence and an XML document can be represented as a set of tag sequences. So, for given XML docu-ment collection, we can transform it to a tag sequence database, TSDB ,which is a set of tuples, &lt; docid, tsset &gt; ,where docid is the id of document and tsset is the set of tag sequences of corresponding document. For example, the three documents in Fig.1 consist a tag sequence database as Table 2.
 Definition 3. (Support of tag sequence) Adocument supports atagse-quence  X  if there exists a tag sequence  X  in the document, such that  X   X   X  .And the support of tag sequence  X  in tag sequence database TSDB is ratio of the documents number in the database that support  X  to number of all documents, denoted as support (  X  ) .
 Definition 4. (Frequent tag sequence) Given a real number  X  (0  X   X   X  1) as the minimum support threshold , tag sequence  X  is frequent in tag sequence database TSDB if support (  X  )  X   X  . Tag sequence  X  is maximal frequent in database TSDB ,if  X  is frequent, and there exists no tag sequence  X  in TSDB , such that  X   X   X  and support (  X  )  X   X  .
 Though the tag sequence retain the parent-child/ancestor-descendant relation-ships incorporated in XML documents structures, the sibling relationships are still ignored. Therefore, we propose the concept of association tag sequence to capture sibling information contained in XML documents.
 Definition 5. (Association tag sequence) An association tag sequence is a set of tag sequence, and for any tag sequence  X  in the set, there exists no tag sequence  X  in the set, such that  X   X   X  or  X   X   X  .The size of an association tag sequence is the number of tag sequence contained in the set. An association tag sequence with size m is called an m-association tag sequence .
 Same to the definition of set, we can define the super and sub association tag sequence, and we omit the detailed description due to space constraints here. Definition 6. (Support of association tag sequence) Adocument sup-ports an association tag sequence  X  if for any tag sequence  X  in  X  ,thereexists a tag sequence  X  in the document, such that  X   X   X  .The support of an associa-tion tag sequence  X  in a tag sequence database TSDB is ratio of the documents number in the database that support  X  to number of all documents, denoted as support (  X  ) .
 Definition 7. (Frequent association tag sequence, FATS) Given a real number  X  (0  X   X   X  1) as the minimum support threshold , an association tag sequence  X  is frequent in tag sequence database TSDB ,if support (  X  )  X   X  . An association tag sequence  X  is closed frequent in database TSDB ,if  X  is frequent, and there exists no association tag sequence  X  in TSDB , such that  X   X   X  and support (  X  )= support (  X  ) .
 For tag sequence database TSDB in Table 2, let minimum support is 100%,
For given XML document collection, we can mine FATSs for modelling XML documents. The adoption of sequence can solve the first problem addressed in Sect.1, and the adoption of association can solve the second problem to some extent. For example, if we use maximal frequent tag sequence &lt; article, author, name &gt; as a feature, the documents in Fig.1 are all matched to it, it means that they are similar. If we use FATS { &lt;article, fulltext&gt;, &lt;article, title&gt;, &lt;article, author, name&gt; } as a feature, then the three isolated paths are con-sidered as a whole, and the sibling information among them are captured by the feature. In fact, a FATS exemplifies a frequent substructure: subtree or subgraph. It is a subtree in this example, as Fig.2. 3.2 Mining Frequent Association Tag Sequences Given XML document collection C , based on the definitions in 3.1, we can discover all FATSs. Then the FATSs can be used as features and each XML document can be represented by a set of FATSs. Based on the set of FATSs, we can measure structural similarity among XML documents. In order to reduce the size of feature space, we just mine closed FATSs to represent XML documents. So, if no special instructions, FATS lat er in this paper refer to closed frequent association tag sequence.

We devise an algorithm named FATSMiner for mining FATS. Fig. 3 shows pseudo-code for the FATSMiner algorithm. In Fig.3, line 1 is a preprocess step, and it parses the document collection C to tag sequence database, TSDB .The structure of each doc ument in collection C is transformed into a set of paths which start with root node and end with leaf node, and the same paths occur only once in the set. The attributes of the ele ments are processed as sub-elements. Prefixspan algorithm [11] is used to mi ne all frequent tag sequences (line 2). Line 3-7 finds the maximal frequent tag sequences among the set of frequent tag sequence. Then the tag sequ ence database is converted to TSDB (line 8), in which each document is represented by maximal frequent tag sequences only. Line 9 calls CLOSET + algorithm[12] to mine all closed FATS with minimum support  X  . Finally, the closed frequent association tag sequences set, FATSset , is returned (line 10). 3.3 Structural Similarity between XML Documents We can mine all closed frequent association tag sequences, FATSset ,fromXML document collection C using the FATSMiner algorithm introduced in previous section. Then any XML document d i can be represented by a set of FATS con-tained in it, denote as d FATS i : And then we define sets I , U and P i j as follows: Thus we define the structural similarity between XML documents as: 4.1 Experimental Setting The goal of our experiment is to examine the effectiveness of our FATS approach. For this purpose, we compare the clustering precision and recall of our method with several other path based methods. These include Joshi X  X  method( BOTP and BOXP )[2], Leung X  X  method( commonXPath )[3] and Rafiei X  X  method( subPath )[4]. Our experiment is implemented by Java vi a eclipse. In the implementation of our method, we adopt CLOSET + binary code in [12] and java package of prefixspan algorithm provided in [13].

Our comparison is based on two real data sets. The first, referred as Texas, is a data set introduced in [14]. This data set is generated in the XML/XSLT version of web pages from 20 different sites belonging to 4 different categories: automo-bile, movie, software and news&amp;reference. There are a total of 101 documents. The second, referred as Sigmod, is the online XML version of the ACM Sigmod Record from March 1999, November 2002 and July 2005[15]. This collection con-tained XML files shared among three DTD s: ProceedingsPage, IndexTermsPage and OrdinaryIssuePage. W e use all 33 documents from ProceedingsPage, all 94 documents from OrdinaryIssuePage, and select 100 documents from Index-TermsPage randomly. And to make the data more in line with the characteristics of heterogeneous data, we altered the DTD files a little. 4.2 Clustering Results We cluster the two XML datasets using the method proposed in this paper and the other four methods. Same to [3], we take use of the agglomerative hierarchical clustering algorithm[16], which starts by placing each document in its own cluster and then merges these atomic clusters into larger and larger clusters, until the cluster number condition is satisfied. And we evaluate the clustering results by macro average precision an d recall (refer to [17] for d etails). We get different results by different minimum support thresholds. The best results are acquired when the minimum support thresholds are 10% and 30% on Texas and Sigmod dataset respectively. The results are presented in Fig.4.

From the figures, we can see that on Texas dataset, the BOTP method was found to be the worst, and commonXPath and FATS methods outperforms other methods, FATS method performs better a little than commonXPath . On Sigmod dataset, the performance of BOTP , BOXP and subPath methods are nearly the same. FATS and commonXPath are significantly better than the other methods. And FATS outperforms commonXPath approach by 18.6% and 5.4% in precision and recall. 4.3 Effect of Minimum Support Threshold We study the effect of minimum support on number of frequent tag sequences and clustering precision. Because commonXPath method is effected by minimum support also, we compare it with FATS . The results based on Sigmod dataset are shown in Fig.5 and Fig.6.

In Fig.5, the number of features decreases as the minimum support threshold increases. When the minimum support threshold is higher than 50%, the number of FATS is nearly equal to that of commonXPath. For minimum support thresh-old between 20% and 50%, the number of commonXPath is greater than FATS. And for minimum support threshold below 20%, the number of commonXPath increases rapidly than FATS. That means FATS approach represents the XML documents with fewer features, and this leads to decreasing computation cost of distance matrix for the clustering step. So FATS approach is more efficient than commonXPath in clustering.

The precision of FATS and commonXPath for different minimum support threshold on Sigmod dataset is reported in Fig.6. We observed that the preci-sion is the highest when the minimum support is 30% both in FATS and com-monXPath approaches. When the minimum support is below 10%, the precision of FATS and commonXPath is nearly the same. When the minimum support is higher than 30%, the precision of FATS is higher than commonXPath and decreases with the in crease of support.
 Owing to XML documents include structure information, how to measuring structural similarity has become a crucial issue in database and information retrieval communities. There exist some previous works on this issue and some methods based on path ignore the hierarchical and/or sibling information. In this paper, we propose the concept and mining algorithm of frequent association tag sequence for computing structural similarity between XML documents and apply it to cluster XML documents. The XML documents can be represented by FATS, which can reflect the ancestor-descendant and sibling relationships between elements and compensate the shortcoming of the path based methods. As demonstrated by the experimental results, the proposed approach is more effective than the other path based approaches.
 Acknowledgments. This work was supported by the National Natural Sci-ence Foundation of China unde r Grant No. 60803043, 60970070, 61033007, and the National High-Tech Research and Development Plan of China under Grant No.2009AA1Z134.

