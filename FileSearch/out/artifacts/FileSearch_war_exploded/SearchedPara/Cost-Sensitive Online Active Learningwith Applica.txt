 Malicious Uniform Resource Locator (URL) detection is an important problem in web search and mining, which plays a critical role in internet security. In literature, many ex-isting studies have attempted to formulate the problem as a regular supervised binary classification task, which typ-ically aims to optimize the prediction accuracy. However, in a real-world malicious URL detection task, the ratio be-tween the number of malicious URLs and legitimate URLs is highly imbalanced, making it very inappropriate for sim-ply optimizing the prediction accuracy. Besides, another key limitation of the existing work is to assume a large amount of training data is available, which is impractical as the hu-man labeling cost could be potentially quite expensive. To solve these issues, in this paper, we present a novel frame-work of Cost-Sensitive Online Active Learning (CSOAL), which only queries a small fraction of training data for la-beling and directly optimizes two cost-sensitive measures to address the class-imbalance issue. In particular, we propose two CSOAL algorithms and analyze their theoretical per-formance in terms of cost-sensitive bounds. We conduct an extensive set of experiments to examine the empirical perfor-mance of the proposed algorithms for a large-scale challeng-ing malicious URL detection task, in which the encouraging results showed that the proposed technique by querying an extremely small-sized labeled data (about 0.5% out of 1-million instances) can achieve better or highly comparable classification performance in comparison to the state-of-the-art cost-insensitive and cost-sensitive online classification al-gorithms using a huge amount of labeled data.
 H.4 [ Information Systems Applications ]: Miscellaneous Theory, Algorithms, and Experimentation Malicious URL Detection, Cost-Sensitive Learning, Online Learning, Active Learning
The World Wide Web (WWW) allows people to access massive information on the internet, but also brings mali-cious information, such as fake drug, malware, and so on. A user accesses all kinds of information (benign or malicious) on the WWW by clicking on a URL (Uniform Resource Lo-cator) that links to a particular website. It is thus very important for internet users to evaluate the risk of click-ing a URL in order to avoid accessing the malicious web sites. This is however very challenging for individual in-ternet users. To tackle this challenge, researchers have at-tempted to investigate techniques to automatically classify whether a URL is malicious or not over the past few years, which is formally known as  X  X alicious URL detection X  [20, 25, 26, 27].

In literature, a variety of techniques have been proposed to solve the malicious URL detection problem [20, 25, 26, 27]. One major category of techniques formulates the URL detection as a classical supervised classification task and at-tempts to train a binary classification model in an offline learning fashion to distinguish between malicious and nor-mal URLs [20, 25]. These techniques usually require to col-lect a considerable amount of training data in order to build a good classification model. In contrast, another category of techniques formulates it as an online supervised learning task [27], which is more suitable for large-scale problems. However, all these algorithms try to maximize the classifi-cation accuracy of the learnt model by assuming the ratio between the malicious and benign ULRs is balanced explic-itly or implicitly.

Although malicious URL detection has been well studied for years, it remains a very challenging research problem today, which is primarily due to several reasons. First of all, it is often a highly class-imbalanced learning problem as the number of malicious is significantly smaller than that of normal ones, which brings a critical challenge to many schemes using regular classification techniques. Second, it is usually very expensive to collect labeled data, especially the positive training data ( X  X alicious X ), which limits the appli-cation of some classical supervised classification approaches. Moreover, in a real-world application, data usually arrives in a sequential/online fashion and the size of data patterns can be very large, leading to a big challenge for developing efficient and scalable algorithms for malicious detection.
To address the above challenges of malicious URL detec-tion, in this paper, we present a novel framework of Cost-Sensitive Online Active Learning (CSOAL) which can tackle malicious detection in a fairly natural, effective, and scal-able approach. Unlike many existing batch learning ap-pro aches, the key idea of our framework is to formulate malicious URL detection as an online active learning task which aims to maximize the detection performance by ac-tively querying a small amount of informative labeled data via a cost-sensitive online learning setting. In particular, we propose two CSOAL algorithms by optimizing two different cost-sensitive measures (i.e., the weighted sum of sensitivity and specificity and the weighted cost), and theoretically an-alyze the performance bounds of the proposed algorithms. We further validate the empirical performance of the pro-posed algorithms through an extensive set of experiments for a large-scale online malicious URL detection task.
The rest of the paper is organized as follows. Section 2 reviews related work. Section 3 presents the proposed frame-work and algorithms, followed by their theoretical analysis in Section 4. Section 5 discusses our experimental results and Section 6 concludes our work.
Our work is closely related to two topics in web mining and machine learning: malicious URL detection and online learning. Although both have been well studied separately, to the best of our knowledge, this is the first work to tackle the malicious URL detection task using online active learn-ing. Below briefly reviews important work in both areas.
Online learning represents a family of efficient and scal-able machine learning algorithms [29, 11, 5, 9, 39, 33, 19]. Unlike conventional batch learning methods that assume all training instances are available prior to the learning task, online learning repeatedly updates the predictive models se-quentially, which is more appropriate for web applications where training data often arrive sequentially.

In literature, a variety of online learning methods have been proposed in machine learning [30]. One very well-known method is the Perceptron algorithm [29, 13], which updates the model by adding a new example with some con-stant weight into the current set of support vectors when the example is misclassified. Recently a lot of new online learning algorithms have been developed based on the cri-terion of maximum margin [11, 15, 21, 9, 23]. One notable technique is the Passive-Aggressive (PA) method [9], which updates the classification function when a new example is misclassified or its classification score does not exceed some predefined margin. In this work, we apply the PA algorithm to solve the online learning task. Different from the regular PA learning setting which assumes class label of every on-line incoming instance will be revealed, our approach queries the class labels of only a limited amount of online incoming instances through active learning.

In addition to regular online learning techniques, our work is also closely related to another online learning topic in machine learning, that is, selective sampling [14, 4] or label-efficient learning [16, 7], which also queries class labels of a subset of online received instances by developing appro-priate sampling strategies. However, conventional label-efficient learning approaches often aim to optimize the mis-take rate (or equivalently the classification accuracy), which is clearly inappropriate for malicious URL detection tasks. In contrast, our approach addresses the challenge of online malicious URL detection by attempting to optimize cost-sensitive metrics (either weighted sum of sensitivity and specificity or weighted cost) [32].

Finally, our work generally belongs to the category of  X  X n-line X  active learning, which differs from a large family of  X  X atch X  active learning studies in literature [31, 17, 18]. Malicious URL detection is about how to detect malicious URLs automatically or semi-automatically, which has been extensively studied in web and data mining communities for years [20, 28, 36]. In general, we can divide the existing work into two categories: (i) non-machine learning methods, such as blacklisting [37] or rule-based approaches [38, 35]; and (ii) machine learning methods. The non-machine learning approaches generally suffer from poor generalization to new malicious URLs and unseen malicious patterns. In the fol-lowing, we will focus on reviewing important related work using machine learning methods.

In literature, a variety of machine learning schemes have been proposed for malicious URL detection, which can be grouped into two categories: (i) regular batch machine learn-ing methods [25, 8, 34], and (ii) online learning methods [26]. Most of the existing malicious URL detection methods em-ploy regular batch classification techniques to learn a clas-sification model (classifier) from a training data set of la-beled instances [8], and then applies the model to classify a test/unseen instance. In general, the classification problem can be formulated as either binary classification (normal vs. abnormal) [25] or multi-class classification (assuming nor-mal patterns come from multiple classes). In literature, a variety of classification techniques have been applied, such as Support Vector Machines (SVM) [25, 8], Logistic Regres-sion [25], maximum entropy [20], Naive Bayes [3, 25], and so on. However, these algorithms typically require to collect and store all the training instances in advance and build the models in a batch learning fashion, which is both time and memory inefficient and suffers from very expensive re-training cost whenever any new training data arrives.
Unlike the batch machine learning algorithms, online Learn-ing [26] has been recently proposed as a scalable approach to tackling large-scale online malicious URL detection tasks. In general, online learning methods are more suitable for large-scale, real-world online web applications due to their high efficiency and scalability. However, most of the pre-vious online learning algorithms were designed to optimize the classification accuracy, typically by assuming the under-lying training data distribution is class-balanced explicitly or implicitly. This is clearly inappropriate for online mali-cious URL detection tasks since the real-world URL data distribution is often highly class-imbalanced, i.e, the num-ber of malicious URLs is usually significantly smaller than the number of benign URLs on the WWW. Therefore, it is very important to take this issue into consideration when designing a machine learning and data mining algorithm for solving a practical URL detection task.

Finally, all the existing learning approaches usually have to label a fairly large amount of training instances in or-der to build a sufficiently good classification model, which is impractical as the labeling cost is often expensive in a real-word application. This thus motivates us to study a unified learning scheme, which not only is able to minimize the la-beling cost, but also maximize the predictive performance with the given amount of labeled training instances.
Consider a real-world online malicious URL detection prob-lem where data instances arrive sequentially. The goal of supervised malicious URL detection is to construct a predic-tive model that can accurately predict if an incoming URL instance is malicious or not. In general, this can be formu-lated as a binary classification task where malicious URL instances are from positive class ( X +1 X ) and normal URL instances are from negative ( X -1 X ). For an online malicious URL detection task, the goal is to develop an online learner to incrementally build a classification model from a sequence of URL training data instances via an online learning fash-ion. In particular, for each learning round, the learner first receives a new incoming URL instance for detection; it then applies the classification model to predict if it is malicious or not; at the end of the learning round, if the truth class label of the instance can be revealed from the environment, the learner will make use of the labeled instance to update the classification model whenever the classification is incorrect (or the prediction loss is nonzero).
 Figure 1: Framework of the proposed CSOAL sys-te m for malicious URL detection
In general, it is natural to apply online learning to solve online malicious URL detection. However, it is impracti-cal to directly apply an existing online learning technique to solve the problem. This is because a conventional online classification task usually assumes the class label of every incoming instance will be disclosed so as to be used to up-date the classification model at the end of every learning round. Clearly it is impossible or highly expensive if the learner queries the class label of every incoming instance in an online malicious URL detection task. To address this challenge, we propose to investigate a novel framework of Cost-Sensitive Online Active Learning (CSOAL), as shown in Figure 1. In general, the proposed CSOAL framework attempts to address two key challenges in a systematic and synergic learning approach: (i) the learner must decide when it should query the class label of an incoming URL instance; and (ii) how to update the classifier in the most effective way where there is a new labeled URL instance. The ba-sic idea of our unified learning approach is to explore active learning strategy to address the first issue, and to investigate cost-sensitive online learning strategy to address the second issue. Before presenting our detailed technique, we first give a formal formulation of the online malicious URL detection problem in the following.
Let us denote by x t  X  R d the feature vector of a URL instance received at the t -th learning round, and w t  X  R a linear prediction model learned from the previous t  X  1 training examples. We also denote the prediction of the t -th instance as  X  y t = sign( w t x t ). The value | w t x t | is known as  X  X argin X , which can be used as the confidence of the learner on the prediction. The true label for instance x t is denoted as y t  X  X  X  1 , +1 } . If  X  y t 6 = y t , the learner made a mistake. We consider a sequence of examples ( x 1 , y 1 ) , . . . , ( x for online malicious URL detection, where class label y t be revealed after online prediction (depending on if it is queried). To solve such a task, traditional online learning would try to maximize the online accuracy (or minimize the online mistake rates equivalently). However, this is inap-propriate for malicious URL detection problem because a trivial learner that simply classifies any example as negative could achieve a quite high accuracy for a dataset with highly rare malicious URLs. Thus, we propose to study new online learning algorithms, which can optimize a more appropriate performance metric, such as the sum of weighted sensitivity and specificity , i.e., where 0  X   X  p ,  X  n  X  1 and  X  p +  X  n = 1. When  X  p =  X  n sum is the well-known balanced accuracy, which is adopted as a metric in the existing studies for anomaly detection [22]. In general, the higher the sum value, the better the perfor-mance. Besides, another suitable metric is the total cost suffered by the algorithm, which is defined as: where M p and M n are the number of false negatives and false positives respectively, 0  X  c p , c n  X  1 are the cost pa-rameters for positive and negative classes, respectively, and we assume c p + c n = 1. The lower the cost value, the better the classification performance.
We now propose an online learning framework for online malicious URL detection by optimizing the previous two cost-sensitive measures. Before presenting our algorithms, we prove an important proposition below to motivate our solution. For simplicity, we assume k x t k = 1 for the rest.
Proposition 1. Consider a cost-sensitive classification problem, the goal of maximizing the weighted sum in (1) or minimizing the weighted cost in (2) is equivalent to mini-mizing the following objective: T p and T n are the number of positive examples and negative examples respectively,  X  = c p c weighted misclassification cost, and I  X  is the indicator func-tion that outputs 1 if the statement  X  holds and 0 otherwise. The proof is omitted due to space limitation. Proposition 1 gives the explicit objective function for optimization, but the indicator function is non-convex. To tackle this issue, we replace the indicator function by its convex surrogate, i.e., a modified hinge loss function: As a result, we can formulate the primal objective function for online malicious URL detection as follows: where the regularization parameter C &gt; 0, the loss function  X  ( w ) =  X  ( w ; ( x t , y t )) = max(0 ,  X  t  X  y ( w x )) and  X  I t =1) + I ( y t =  X  1) . The idea of this formulation is somewhat similar to the biased formulation of batch SVM for learning with imbalanced datasets [1].

To online optimize the above objective (5), following the passive aggressive learning method [9], we have a similar online optimization objective: w hich enjoys the following closed-form solution:
Based on the above derived updating method, we would develop an online active learning algorithm for malicious URL detection. However, unlike regular online learning [27], the key challenges to an online active scheme for malicious URL detection are two-fold: (i) a learner should decide when to query the class label of an incoming instance, and (ii) once the class label is queried and disclosed, how to exploit the labeled instance to update the learner in an effective way. To tackle these challenges, we propose a framework of Cost-Sensitive Online Active Learning (CSOAL), which adopts a simple yet effective active learning scheme to decide whether an incoming instance should be queried, and employ the above proposed cost-sensitive updating method (6) to exploit the labeled instance for updating the online learner.
Specifically, at the t -th round, the CSOAL algorithm de-cides if the class label should be queried according to a Bernoulli random variable Z t  X  X  0 , 1 } with probability where p t = w t x t and  X  &gt; 0 is a sampling factor param-eter to trade off the ratio of queries. Such an approach is similar to the idea of margin-based active learning [31, 2] and has been adopted in other previous work [6, 12]. If the outcome Z t = 1, the class label is queried and the outcome y is disclosed, then the CSOAL algorithm will adopt the proposed updating method (6) to update the linear classi-fication model w t +1 . If Z t = 0, the class label will not be queried and the learner is not updated. Finally, Algorithm 1 summarizes the details of the proposed CSOAL algorithms.
Remark. It is interesting to analyze the impact of the sam-pling factor parameter  X  . In general, the larger the value of  X  , the larger the resulting number of queries issued by the online active learner. In particular, when setting  X   X   X  , it is reduced to the extreme case of querying class label of every instance in the online learning process. In general, one can simply fix  X  to some constant to trade off a proper ratio of queries. Besides, an even better approach is to adaptively change the value of  X  during the online learning process. In particular, we expect to query more examples at the begin-ning of the online learning task in order to build a good Algorithm 1 Co st-Sensitive Online Active Learning algo-rithm ( CSOAL ).

INPUT: pe nalty parameter C , bias parameter  X  and smooth parameter  X  .

INITIALIZATION : w 1 = 0 . for t = 1 , . . . , T do end for classifier, and gradually reduce the ratio of queries when the cl assifier becomes more and more accurate during the online learning process. To this purpose, we suggest a simple yet effective scheme to adaptively update the parameter  X  at the t -th learning step as:  X  t  X   X  t  X  1  X  t t +1 . We will examine the impact of the sampling factor  X  in our experiments.
From Algorithm 1, it is obvious to see that the overall time complexity of the algorithm is O ( T  X  d ), which is linear with respect to T  X  the total number of instances in the online malicious URL detection task and d  X  the dimensionality of the input, and the space complexity of each learning step is O ( d ) linear with respect to the data dimensionality. In practice, when the data set is sparse and high-dimensional ( d can be large), one can exploit the sparse implementation trick to further reduce the time and space cost considerably.
Although the proposed CSOAL algorithm is simple, it is the first approach proposed for online malicious URL de-tection tasks. Below gives theoretical analysis of its per-formance for malicious URL detection tasks in terms of two types of performance metrics. Before presenting the bounds, we begin by showing a lemma which would facilitate the proofs in this section. With this lemma, we could then de-rive the performance bounds for the CSOAL algorithm. For convenience, we introduce the following notations: M = { t | y t 6 =  X  y t , t  X  [ T ] } , L = { t | y t =  X  y where [ T ] = { 1 , . . . , T } .
 put instances, where x t  X  R d and y t  X  { X  1 , +1 } for all t . Let  X  t = min( C,  X  t ( w t )) , then the following bound holds for any w  X  R d and  X  &gt; 0
X
The detailed proofs of Lemma 1 and the following the-ore m are omitted, due to space limitation. According to the above lemma, we can prove the following theorem that bounds the expected weighted summation of mistakes, which can further bound the the cost-sensitive metrics for online malicious URL detection tasks.

Theorem 1. Let ( x 1 , y 1 ) , . . . , ( x T , y T ) be a sequence of examples where x t  X  R d and y t  X  { X  1 , +1 } and k x t k = 1 for all t . Then, for any vector w  X  R d , the expected weighted number of prediction mistakes made by CSOAL on this sequence of examples is bounded as: E [
X where C  X   X  is the aggressiveness parameter for CSOAL.
Now our goal is to analyze the performance of the pro-posed algorithm in terms of the metrics for malicious URL detection. We first consider the weighted sum of sensitivity and specificity, i.e., where  X  p +  X  n = 1 and  X  p  X   X  n &gt; 0. The following theo-rem gives the bound on the sum by the proposed CSOAL algorithm.

Theorem 2. Let ( x 1 , y 1 ) , . . . , ( x T , y T ) be a sequence of examples, where x t  X  R d , y t  X  { X  1 , +1 } and k x t k = 1 for all t . By setting  X  =  X  p T n  X  any w  X  R d , we have the following bound for the proposed CSOAL algorithm: E [ sum ]  X  1  X  Furthermore, when  X  p =  X  n = 1 / 2 , the balanced accuracy (BA) is bounded from below by E [ BA ]  X  1  X 
Proof. Following the condition that  X  =  X  p T n  X  the result of Theorem 1, we have 1  X   X   X  E M p + E M n = (  X  p T n  X  = T n  X  = T n  X  Rearranging the above inequality leads to the conclusion: E [ sum ]  X  1  X 
Remarks. In the above, setting  X  = 1 leads to the following bound Setting  X  =
E [ sum ]  X  1  X   X   X   X  In the above approach, the bias parameter  X  is set to  X  p in which the ratio T n T alleviate this issue, we consider another approach using the cost based performance metric. Specifically, we propose to eters of false negative and false positive, respectively. We assume c p + c n = 1 and 0  X  c n  X  c p since we would prefer to improve the accuracy of predicting the rare positive ex-amples. By this setting, the following theorem gives us the cumulative cost bound of the proposed CSOAL algorithm.
Theorem 3. Let ( x 1 , y 1 ) , . . . , ( x T , y T ) be a sequence of examples, where x t  X  R d , y t  X  X  X  1 , +1 } and k x t k = 1 for all t . By setting  X  = c p c the overall cost made by the proposed CSOAL algorithm over this sequence of examples is bounded as follows:
E [ cost ]  X  c n
Proof. Following the result of Theorem 1, we have Rearranging the above inequality concludes the theorem.
Remarks. Se tting  X  = 1 for the above theorem leads to the following bound: Setting  X  =
E [ cost ]  X  c
This section will evaluate the empirical performance of the proposed CSOAL algorithm for large-scale online malicious URL detection. Our experiments are designed to answer several open questions: (i) how does the class imbalance is sue affect the predictive performance of online malicious URL detection? (ii) if the proposed online active learn-ing approach is effective to reducing the amount of labeled data significantly in order to maintain comparable perfor-mance?(iii) how is the efficiency and scalability of the pro-posed learning algorithms for a web-scale application?
To examine the performance, we test all the algorithms on a large-scale benchmark dataset for malicious URL detec-tion, which can be downloaded from 1 . The original data set was created in purpose to make it somehow class-balanced. In our experiment, we create a subset by sampling from the original data set to make it close to a more realistic distri-bution scenario where the number of normal URLs is signif-icantly larger than the number of malicious URLs. Table 1 shows the data set used in our experiment for online mali-cious detection, where T p /T n denotes the ratio between the number of positive (malicious) instances and the number of negative (normal) instances. A variety of features were ex-tracted to represent the content of a URL, including both lexical features (such as hostnames, primary domain, path tokens, etc) and host-based features (such as WHOIS info, IP prefix, AS number, Geographic, etc.).

Table 1: The data set of malicious URL detection. Note that we also did experiments on varied ratios of T /T n a nd found the results were consistent to our observa-tions and conclusions reported in this work. Thus, to keep the paper concise and easy to follow, we omit the details of duplicate results due to space limitation. All the datasets, code, and supplemental material will be made available in our project website: http://murl.stevenhoi.org/ .
We compare the proposed CSOAL algorithms against a variety of state-of-the-art algorithms as follows: ht tp://sysnet.ucsd.edu/projects/url/
To make a fair comparison, all the algorithms adopt the same setup. All the compared algorithms learn a linear clas-sifier for the malicious URL detection task. In particular, for all the compared algorithms, we set the penalty parameter C =  X  = T n /T p . For the proposed CSOAL sum algorithm, we set  X  p =  X  n = 1 / 2 for all cases, while for the CSOAL we set c p = T n /T and c n = T p /T . The smoothing parame-ter  X  for LEPE and CSOAL is set as 2 [  X  10:2:10] in order to examine varied ratios.

All the experiments were conducted over 5 random per-mutations of the dataset. The results were reported by aver-aging over these 5 runs. We evaluate the online classification performance by two key metrics: the weighted sum of sensi-tivity and specificity, and the weighted cost . We denote by CSOAL sum the algorithm aiming to improve the weighted sum of sensitivity and specificity, and CSOAL cos the algo-rithm aiming to improve the overall cost. All experiments were run on a machine of 2.3GHz CPU.
The first experiment is to evaluate the performance by fixing the ratio of queries issued by the (active learning) al-gorithms. Table 2 shows the results of the sum performance under a fixed ratio of queries to about 2%, and Table 3 sum-marizes the cost performance under the similar query ratio.
Several observations can be drawn from the results. First of all, according the classification accuracy (a misleading metric for cost-sensitive classification), we found that both PE and PA algorithms significantly outperform the other algorithms, while, in terms of both sum and cost measures, they are considerably worse than their cost-sensitive vari-ants (i.e., PAUM and CPA). This indicates the importance of taking the class imbalance issue into consideration for on-line malicious detection tasks. Second, when querying the same ratio of labeled data, in terms of both sum and cost performances, CSOAL significantly outperforms the LEPE algorithm, which validates the effectiveness of the proposed cost-sensitive online updating strategy. Third, when query-ing the same ratio of labels, CSOAL significantly outper-forms CSRND, which implies the proposed querying strat-egy is able to actively select those fairly informative in-stances for querying labels, which are considerably better than just randomly querying. Moreover, among all the ap-proaches, the proposed CSOAL algorithm and the PAUM al-gorithm achieve the highest sum performance. However, the proposed CSOAL only queried 2 percent of labels, while the PAUM algorithm requires to query the labels of all the in-coming instances, which is very expensive to label 1-million training instances in a real-world application. We thus be-lieve the proposed CSOAL algorithm is more practically at-tractive and suitable for a web-scale application.
Finally, we notice that the proposed CSOAL algorithm is able to achieves the best sensitivity performance, while at the same time achieves fairly good specificity performance which is generally quite comparable to the other algorithms. This implies that the proposed CSOAL algorithm can not only significantly improve the prediction accuracy on the rare class, but also not sacrifice much the prediction accu-racy on classifying the other majority class. This promising observation again validates the effectiveness of the proposed CSOAL algorithm. Measures Measures
Th is experiment is to evaluate the performance of the pro-posed algorithms by varying the ratios of queries for com-paring different online malicious URL detection algorithms. Figure 2 and Figure 3 shows the online average sum perfor-mance and the online average cost performance under varied query ratios, respectively. From the experimental results, several observations can be drawn as follows. Figure 2: Evaluation of the online cumulative aver-age s um performance with respect to varied ratios.
First of all, among all four fully supervised online learning algorithms (PE, PA, PAUM, and CPA), the cost-sensitive al-gorithms (PAUM and CPA) generally outperform the cost-insensitive versions. This result validates the importance of studying the proposed cost-sensitive online learning method-ology for malicious URL detection tasks.

Second, compared with the CSRND algorithm that ran-domly queries the labels, CSOAL consistently achieves much higher sum and much lower cost performance over all the ratios of queried labels, especially when the query ratio is relatively small. This promising result indicates that the Figure 3: Evaluation of the online cumulative aver-age c ost performance with respect to varied ratios. querying strategy of the proposed CSOAL technique is able to effectively query the informative labeled data from the online stream of unlabeled data instances.

Third, compared with LEPE, CSOAL achieves higher sum over all the ratios of queried labels, which implies that the proposed online updating strategy is able to effectively ex-ploits the labeled data for improving the classifier. In addi-tion, compared with PA, CSOAL with query ratio equals to 1 (equivalent to querying label of every instance) achieves a significantly higher sum performance, which shows the bi-ased penalty function does effectively optimize the objective metric of the weighted sum of sensitivity and specificity.
Finally, we notice that when the query ratio increases, we generally observe an improvement of the cost-sensitive clas-sification performance by the proposed CSOAL algorithm. However, While the query ratio reaches about 1%, the im-provement tends to become saturated, which is very close to the same algorithm that queries the label of every unla-beled data. This interesting observation indicates that the proposed learning strategy is able to attain potentially the best possible predictive performance using a small amount Algorithm Measures Algorithm Measures of label data (only 1% or even less) over the entire train-in g data set, which can thus save a significant amount of labeling cost in a practical real-world application.
In the above experiments, the sampling factor  X  was sim-ply fixed to a constant. This experiment aims to examine if it is possible to further improve the proposed CSOAL approach using the adaptive sampling factor, denoted as  X  X SOAL(a) X  for short (as discussed in the  X  X emark X  of Sec-tion 3.3). In this experiment, the initial value of  X  is set to an extremely large value, i.e.,  X  0 = 2 14 , and is updated adaptively using the proposed strategy in Section 3.3. To enable a fair comparison, we set appropriate parameters of the other algorithms (LEPE, CSRND and CSOAL) to make them sample the similar ratio of labeled data. Table 4 shows the experimental results, where  X  X SOAL X  adopts the con-stant sampling factor. Some observations can be drawn from the results. First, the CSOAL(a) algorithm using the adap-tive sampling factor significantly outperforms both CSRND using the random query strategy and CSOAL using a con-stant sampling factor under the same query ratio. Second, we found that by querying only 0 . 5% out of the entire 1-million instances, the proposed CSOAL(a) algorithm is able to achieve the best performance, which is almost the same (statistically no difference according to student t -test) to the state-of-the-art cost-sensitive algorithm CPA which has to query labels for all the 1-million instances. This promising result shows that the proposed CSOAL technique is able to save a significant amount of labeling cost while maintaining the state-of-the-art performance.
Finally, we examine the time efficiency of the proposed algorithms. The  X  X ime X  columns of Table 2, 3 and 4 show the average time costs of the proposed CSOAL algorithms on the fixed query ratios. In addition to these tables, we also evaluate the scalability of the proposed algorithms, as shown in Figure 4, which measures the online cumulative time cost of different algorithms over the number of received instances in the online malicious URL detection process.

From the results, we can see that all the proposed online learning algorithms are fairly efficient and scalable, which typically took about 20 to 30 seconds to run on the data set with 1-million instances on a single regular machine. More-Figure 4: Evaluation of online cumulative time cost. ov er, by examining the efficiency and scalability of the pro-posed CSOAL algorithms, we found that CSOAL is among the most efficient and scalable algorithms, which is at least as efficient as the other algorithms and even slightly bet-ter than some of the other algorithms. These encouraging results again validate the practical value of the proposed CSOAL algorithm for web-scale real-world applications.
This paper proposed a novel framework of cost-sensitive online active learning (CSOAL) as a natural, simple yet fairly effective approach to tackling a real-world online ma-licious URL detection task. We presented the CSOAL al-gorithms to optimize cost-sensitive measures and theoreti-cally analyze the bounds of the proposed algorithms. We also extensively examined their empirical performance on a large-scale real-world data set. Our encouraging results showed that (i) the proposed CSOAL method is able to con-siderably outperform a number of supervised cost-sensitive or cost-insensitive online learning algorithms for malicious URL detection tasks; (ii) the proposed CSOAL method is able to attain the comparable (or even better) state-of-the-art predictive performance of a cost-sensitive online learner by querying a significantly small amount of labeled data (0 . 5% or less);and(iii)the proposed CSOAL algorithms are highly efficient and scalable for web-scale applications. This work is supported by Singapore MOE Academic tier-1 grant (RG33/11). [1 ] R. Akbani, S. Kwek, and N. Japkowicz. Applying [2] M.-F. Balcan, A. Broder, and T. Zhang. Margin based [3] E. Baykan, M. R. Henzinger, L. Marian, and I. Weber. [4] G. Cavallanti, N. Cesa-Bianchi, and C. Gentile. Linear [5] N. Cesa-Bianchi, A. Conconi, and C. Gentile. On the [6] N. Cesa-Bianchi, C. Gentile, and L. Zaniboni. [7] N. Cesa-bianchi, G. Lugosi, and G. Stoltz. Minimizing [8] H. Choi, B. B. Zhu, and H. Lee. Detecting malicious [9] K. Crammer, O. Dekel, J. Keshet, S. Shalev-Shwartz, [10] K. Crammer, M. Dredze, and F. Pereira. Exact convex [11] K. Crammer and Y. Singer. Ultraconservative online [12] S. Dasgupta, A. T. Kalai, and C. Monteleoni. Analysis [13] Y. Freund and R. E. Schapire. Large margin [14] Y. Freund, H. S. Seung, E. Shamir, and N. Tishby. [15] C. Gentile. A new approximate maximal margin [16] D. Helmbold and S. Panizza. Some label efficient [17] S. C. H. Hoi, R. Jin, J. Zhu, and M. R. Lyu. Batch [18] S. C. H. Hoi, R. Jin, J. Zhu, and M. R. Lyu. [19] S. C. H. Hoi, J. Wang, and P. Zhao. LIBOL : A [20] M.-Y. Kan and H. O. N. Thi. Fast webpage [21] J. Kivinen, A. J. Smola, and R. C. Williamson. Online [22] S. Li and I. W. Tsang. Maximum margin/volume [23] Y. Li and P. M. Long. The relaxed online maximum [24] Y. Li, H. Zaragoza, R. Herbrich, J. Shawe-Taylor, and [25] J. Ma, L. K. Saul, S. Savage, and G. M. Voelker. [26] J. Ma, L. K. Saul, S. Savage, and G. M. Voelker. [27] J. Ma, L. K. Saul, S. Savage, and G. M. Voelker. [28] A. Ntoulas, M. Najork, M. Manasse, and D. Fetterly. [29] F. Rosenblatt. The perceptron: A probabilistic model [30] S. Shalev-Shwartz and Y. Singer. Online [31] S. Tong and D. Koller. Support vector machine active [32] J. Wang, P. Zhao, and S. C. H. Hoi. Cost-sensitive [33] J. Wang, P. Zhao, and S. C. H. Hoi. Exact soft [34] C. Whittaker, B. Ryner, and M. Nazif. Large-scale [35] G. Xiang and J. I. Hong. A hybrid phish detection [36] Y. Xie, F. Yu, K. Achan, R. Panigrahy, G. Hulten, [37] J. Zhang, P. Porras, and J. Ullrich. Highly predictive [38] Y. Zhang, J. I. Hong, and L. F. Cranor. Cantina: a [39] P. Zhao, S. C. H. Hoi, and R. Jin. Double updating
