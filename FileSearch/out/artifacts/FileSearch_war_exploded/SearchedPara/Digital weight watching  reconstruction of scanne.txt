 ORIGINAL PAPER Maarten Marx  X  Tim Gielissen Abstract A web portal providing access to over 250.000 scanned and OCRed cultural heritage documents is analyzed. The collection consists of the complete Dutch Hansard from 1917 to 1995. Each document consists of facsimile images of the original pages plus hidden OCRed text. The inclu-sion of images yields large file sizes of which less than 2% is the actual text. The search user interface of the portal provides poor ranking and not very informative document summaries (snippets). Thus, users are instrumental in weed-ing out non-relevant results. For that, they must assess the complete documents. This is a time-consuming and frustrat-ing process because of long download and processing times of the large files. Instead of using the scanned images for relevance assessment, we propose to use a reconstruction of the original document from a purely semantic represen-tation. Evaluation on the Dutch dataset shows that these reconstructions become two orders of magnitude smaller and still resemble the original to a high degree. In addi-tion, they are easier to speed-read and evaluate for rele-vance, due to added hyperlinks and a presentation optimized for reading from a terminal. We describe the reconstruc-tion process and evaluate the costs, the benefits, and the quality.
 Keywords XML  X  Information extraction  X  Scanned documents 1 Introduction This paper addresses the fact that scanned and OCRed doc-uments tend to be very large in file size because of the inclu-sion of facsimile 1 images. This makes them expensive to store, expensive to serve over the internet, and cumbersome to handle by users.

We present a case study in which we extracted the content and the structure from a large digitized corpus and recon-structed the documents from scratch  X  X s new X . This yielded much smaller (less than 1% of the original size when stored in gzipped XML, 1.5% when stored as PDF) and far better readable documents which in addition are easier to browse because of added hyperlinked structure.

We present the data, describe our techniques, evaluate the results, and generalize them to other cases.

The novelty of our work is located in the way we recon-struct the original files. The reconstruction is based on a purely semantical representation of the original data. The reconstruction is done using only two well-described declar-ative programming languages: XSLT 2.0 and L A T E X.
Outline The rest of this introduction motivates our research problem. Section 2 describes the data; Sect. 3 ana-lyzes the current search user interface. Section 4 contains the two transformation processes: structure extraction and doc-ument reconstruction. We evaluate the quality of these two transformations in Sect. 5 . Section 6 contains related work. We conclude and generalize our results in Sect. 7 .
Motivation Our work is motivated by an analysis from a user perspective of a web portal providing access to over 250.000 scanned and OCRed cultural heritage documents. The collection consists of the complete Dutch Hansard from 1917 to 1995. Each document consists of facsimile images of the original pages plus hidden OCRed text. The inclusion of images for each page yields large file sizes. The average document in our collection contains 51 thousand words, is 50 pages long and, has a file size of 16.5 MB.

Documents consisting of facsimile images become a prob-lem when the search engine for those documents returns relevance-ranked lists with low precision. In this case, users are instrumental in weeding out non-relevant results. Users have two pieces of information for this task [ 10 ]: the doc-ument summary given in the list of results (the  X  X nippet X ) and the document itself. If the snippet does not give enough information to reject the result, the user has to download and inspect the actual document.

One of the most pressing problems arising from large file sizes are long download times. For instance, with a fast (12 Mbit/s) internet connection, it takes in the optimal case 10 s to download an average document (16 MB) from our collection. In reality, this speed is often up to 20 times slower. Such long download times prohibit natural work flows.

Inspection of a document consisting of facsimile images is also hindered by large sizes. In addition, facsimiles with hidden OCRed text are difficult to quick scan because they are often hard to read and there is no support for navigation in the document.

These long waiting and inspection times become a source of frustration when the downloaded document was ranked high by the search engine but found out to be not relevant. An obvious solution to this problem is to use a search engine with better ranking and excellent document summaries. In reality, this option is often not feasible.

To solve this problem, we propose to add an intermedi-ate document summary between the snippet and the docu-ment, very much like the  X  X uick Look X  button in Apple X  X  Mail program. It consists of the complete OCRed text spe-cially presented for fast scanning by humans. It is an approx-imation of the original text because of the OCR errors and differences in layout. Only when the document turns out to be relevant, the large file with all facsimile images needs to be downloaded. 2 Description of the data The Netherlands have parliamentary proceedings since 1814. From 1995, these are available as digitally produced PDF files. The Dutch Royal Library together with the Dutch par-liament has scanned and OCRed all proceedings from 1814 until 1995. The collection consists of 2.5 million pages which physically span 150 m. The digital copy needs approximately 30 Terra Byte storage space.

The proceedings are available online at http://www.statengeneraaldigitaal.nl .
 Each document is a combination of files: metadata in XML, a JPEG image for each page, the OCRed text in an XML wrap-per, and an MPEG21-DIDL file describing the connections between all these files [ 17 ]. Each document is also available as a PDF file that combines all this information.

In November 2009, all documents from 1917 to 1995 are available. The complete corpus is planned to be online in the fall of 2010.

We will refer to the part of the collection that consists of verbatim notes of plenary meetings of the House of Parlia-ment as the SGD corpus. The SGD corpus consists of 12.796 documents, covering 383.863 pages. It has over 100 million tokens of which 204 thousand occur more than once and 55 thousand occur at least 20 times [ 22 ].

Our experiments are based on the documents from 1980 to 1985. Each document contains the meeting notes of 1 day. Table 1 describes the yearly production.

As stated before, on average, one document contains 51 thousand words, is 50 pages long, and has a file size of 16.5 MB. Because each document represents the meeting notes of one complete day, on an average day in Dutch par-liament 51 thousand words are recorded.

The largest document is 49 MB (151 thousand words), and the smallest is just 1 page, with 382 words. At the meeting of this one page document, less than half of the Dutch MP X  X  were present and then by law the meeting cannot start.
Figure 1 shows the facsimile of a typical page. The layout is rather simple: a header and a footer and a body of text set in two columns. The text is divided into blocks according to whom is speaking. Each block begins with the name of the speaker in boldface. 3 Analysis of the search interface We provide an analysis of the search user interface at http://www.statengeneraaldigitaal.nl , the portal that serves the Dutch parliamentary proceedings. The ranking of the results after a keyword search is rather poor. Thus, the user is instrumental in weeding out non-relevant documents. We analyse the tools provided by the search user interface which assist in this task. Based on the recommendations in [ 10 ], we give a list of positive and negative aspects of the interface.
The search interface has a standard three-layer architec-ture: a search page that leads to a result page (often called  X  X ERP X ) with  X  X en blue links X  which lead to the actual documents. We discuss each layer.

The search page has a standard and an advanced inter-face. The advanced search page facilitates the formulation of precise queries by offering selections on three natural facets for this collection. One can select the House, make a date restriction, and choose among three document types (meeting notes, written questions and answers, and documents sent to the Parliament). These three facets come back in various parts of the search interface. For each document type, specific fur-ther restrictions are possible.

The result page shows the first ten hits with the option to view the next ten results, as usual. Besides the ten results, there is aggregation information and faceted search machinery [ 9 ]. The page shows the total number of hits and the distribution of the hits over the values of the three men-tioned facets: document type (3 values), House (4 values), and parliamentary year (at the time of writing over 70 values). Clicking on a facet value combination restricts the search, and the distribution of hits over the facets is recomputed.
Hearst [ 10 ] calls each hit a  X  X ocument surrogate X  in order to highlight their function: help the user to understand the primary object. In particular:
The quality of the document surrogate has a strong effect on the ability of the searcher to judge the relevance of the document.
 The document surrogates of SGD consist of three pieces of information:  X  A title with a hyperlink to the document. The title pro- X  The number of pages of the document.  X  An extract from the retrieved document ( X  X nippet X ). The On a sample of 617 snippets (all taken from the first result page after a query), less than one-third contained the query term. The snippets are rather long: on average 383 characters ( N = 612). This is more than twice the length of the snippets at Google.

We now discuss the third layer, the actual documents. SGD is a vertical search engine that only serves documents under its control, and SGD can thus determine their presentation. Each document is shown in a special viewer which imple-ments an entry point retrieval [ 30 ] system: the user is brought to the first page in the document in which the search term occurs. From there, the user can go backward and forward through the pages and jump to following and preceding entry points. The user views a JPEG image of the page on which the search term is highlighted. It is also possible to view the OCRed text of the page as an HTML document. 3.1 Evaluation We evaluate the three layers of the search system with respect to the ease and speed in which the following task can be performed:
From the list of retrieved documents, find those that are relevant.
 We first list aspects that have a positive effect on the task, fol-lowed by those that have a negative effect. We conclude with proposals for improvement. These will be further developed and evaluated in the rest of the paper.

Positive features  X  (++) The advanced search interface makes stating precise  X  (+) The faceted search machinery is useful for browsing  X  (++) Entry point retrieval with search term highlighting
Negative features  X (  X  X  X  ) There is no apparent ranking of the search results.  X (  X  X  X  ) The document summaries are mostly query inde- X (  X  X  X  X  ) Retrieving a document takes a long (download)
Possible improvements The improvements we suggest are based on the premise that we cannot change the ranking by relevance. Thus, the user still has to do most of the rel-evance assessments. The above discussion yields four clear cases for improvement: 1. Improve aggregated search results and facets [ 24 ]. 2. Offer (reverse) chronological ranking, possibly com-3. Offer query-dependent document summaries with key-4. Drastically improve download times and fast browsabil-Of these improvements only the last is specific for noisy-data collections. The only way to drastically reduce down-load times is to postpone serving large images as long as possible. 3.2 Extended document summaries We propose to add a fourth layer to the search architecture. It is placed in between the result page with the ten snippets and the actual documents. This functionality is comparable to the  X  X uick Look X  button in Apple X  X  Mail program. The fourth layer contains an approximation of the original document, based on the OCRed text and the original layout. Its sole purpose is to provide a fast interface to the complete docu-ment in order to make a quick relevance assessment.
We discuss and evaluate three systems for creating these document summaries. They differ in the amount of semantics that is explicit in the markup. 1. The simplest transformation preserves physical layout 2. Marx and Schuth [ 22 ] describes a system for trans-3. The system described in this paper first does an exten-This last system is described in the next section. 4 Description of the transformation The transformation of a scanned and OCRed PDF document into a PDF document that closely resembles the original, but without the facsimile images, involves two steps. First, the structure that is implicit in the document is made explicit using a variety of text extraction techniques [ 6 ]. Next, the resulting XML document is transformed into a PDF docu-ment without facsimile images using XSLT and L A T E X. In this section, we describe both steps. 4.1 Making structure explicit: from PDF to XML All documents contain structure. Often, we can easily rec-ognize titles, paragraphs, and page numbers on the basis of their layout (e.g., position or size) and their content (e.g., a number). This structure is in most cases not explicit in digital form, especially not when the document is scanned and OCRed. If the structure of documents in a corpus is stan-dardized to some degree, the structure can be made explicit in digital form automatically [ 5 ].

The Dutch parliamentary proceedings show this kind of standardization of document structure. All elements of a pro-ceeding, for example topics and speakers, are represented in their own distinct way. This enables the automatic rec-ognition of these elements. We implemented the text and structure extraction as an Extract-Transfer-Load process [ 27 ] consisting of eight steps.

First, we extract the text from the PDF using the open-source program pdftohtml with the -xml option. This yields an XML file with for each line of text four coordinates that indicate the bounding box of that text. Multiple columns are detected and preserved. Some font and layout informa-tion is preserved but not all. The XML structure is simple and flat: root  X  X  X  (page)* page  X  X  X  (text)* text  X  X  X  (#PCDATA,b,i,span)*
The second step involves cleaning the output from pdftohtml . We ensure that the output is well-formed XML, and we solve problems with diacritics. In this step, we also fix the most common OCR errors in this collection. We found one specific error quite often: the OCR inserts a space before the last letter of a word. For example, the token wij is OCRed as wi j . A regular expression designed to fix this problem matches 3.1% of all the lines in the text cor-pus (i.e., one line in one column in the original PDF as in Fig. 1 ). A sample of random 100 matches indicated that this procedure has a precision of 93%.

The values indicating the position and size of the bounding box of the text are normalized in the third step because they can differ among different devices.

In the fourth step, we analyze the document X  X  layout. The margins, the number of columns, and the header and footer are detected and marked. For this, we use the position of the text elements and the (deducted) position of the whitespace. Using this information, we sort the text of the body (i.e., not belonging to the header or the footer) in reading order in the fifth step.

During the sixth and seventh step, different markers are placed in the text to signal the start of different elements in the document. In the sixth step, we place markers indicating the position of text elements in the document. We place markers on places where paragraphs begin (they are indented), where there is whitespace, and when a new column starts. This infor-mation is used in the seventh step where markers are placed based on the content of the document. In the seventh step, we use regular expressions to recognize standardized struc-ture. We indicate this by an example. The start of a statement by a new person is signaled in the text by the title, the name, and the party of the speaker, as in Mevrouw Swenker (VVD):
This adheres to the following structure: title, last name, and party name within parenthesis, colon. This is then followed by the statement this person made. The start of a statement can only begin after a whiteline marker or the start of a new column. So in our XML, we convert this to: with the ... containing additional information.

We now have an XML document that is flat and con-tains markers that mark the beginning of structural ele-ments, but not the end. In the last step, we replace the markers by XML tags that enclose the entire element. This is done by performing a cascade of groupings starting with the elements which need to be most deeply nested: the para-graphs p . XSLT 2.0 has a useful command for this task: xsl:for-each-group .

The result is an XML file with the same text as the original document but with explicit structure. The file is valid with respect to a rich Relax NG schema, constraining both the structure of the XML tree as well as the values of many attri-butes. The structure can be used for many purposes, e.g., to analyse the structure of the debates [ 12 ]. 4.2 Reconstruction of the originals: from XML to PDF Because the structural elements of the documents are made explicit in the XML file, it is possible to reconstruct the orig-inal PDF with high resemblance. We use a combination of XSLT 2.0 and L A T E X for this process. We created a XSLT stylesheet that transforms the XML file described in the pre-vious subsection into a L A T E X file. We briefly describe this transformation.

First, the stylesheet writes a general preamble that loads all necessary packages and specifies layout information for the document. Some values are copied from the XML file, like the value that indicates the number of columns.
After the preamble, the document itself begins. For every element specified in the Relax NG schema, we defined a template (for more information about the schema, see [ 6 ]). These templates are nested according to the structure of the proceeding. First, we have a template for the topics, the high-est level of the structure of the proceedings. The stylesheet writes the necessary layout information for the topic and then places the text from the XML file in the L A T Next, it applies all the templates for the elements within the topic. This way, we cycle through all the elements in the deep structure of the XML and create the L A T E X file step-by-step. If the stylesheet encounters a pagebreak, it redefines the page style (including header and footer) for the next page.
When the L A T E X file is created, the next step is to cre-ate the PDF document with pdflatex . Creating the L A T E file with XSLT and compiling the PDF file take about 1 X 2 s, depending on the size of the file.

An alternative approach for reconstructing the files is to use XSL-FO to produce a PDF document directly with XSLT. We used L A T E X because it appeared to be easier to obtain fast results. 5 Evaluation We present a technical, an information-theoretic and an economic evaluation. The technical evaluation describes the reduction in file sizes obtained and the processing times needed for the reduction. In the economic evaluation, we compare the efforts invested in creating the transformation scripts with the benefits of smaller files and explicit markup information. In the information-theoretic evaluation, we look at the quality of the transformations: we evaluate whether information was lost or distorted. 5.1 Benefits of the reconstruction Size reduction Our first goal was to reduce the file sizes. This was achieved with a reduction of 2 orders of magnitude. Table 3 lists the results.

Processing times Transforming the whole corpus of 13.62 GB into reconstructed PDF X  X  took 25 h and 50 min, an average of 1.8 min per document. These times were measured on an Apple MacBook with 2.4 GHz CPU running the OS X 10.5.6 operating system.

The table below shows the percentage of the total time that was spent on each of the elements of the entire pipeline from Sect. 4 .
Table 4 shows the processing speeds of the two main steps of the transformation in pages per minute. (Recall that a typical document has about 50 pages.)
Both transformations can be done offline, and we need only to store the reconstructed PDF on the web server. The transformation from XML to PDF is fast enough to perform at query time. Recall that an average document is 50 pages. Thus, this can be transformed from a gzipped XML file into PDF in 2 s. This transformation can be further optimized as a streaming transformation [ 18 ].

Digital sustainability We aimed to make our transfor-mations in such a way that they can be performed again after minimally 100 years with relative ease. Thus, we wanted a minimal dependency on specific software and hardware and transparent and reproducible transformations [ 7 ]. Our goal was to have all steps of the transformation written in a declar-ative language with a precisely defined software-independent semantics. XPath 2.0 and XSLT 2.0 meet these standards [ 13 , 14 ].

For the conversion from PDF to XML, we reached this goal except for the first step of the transformation and the final validity check. In the first step, we used pdftohtml -xml ( http://pdftohtml.sourceforge.net ) to transform the PDF to XML. Unfortunately, this program may produce non-well-formed XML and it has problems with certain diacritics. We repaired these with a perl script and checked for XML well-formedness with xmllint . This was also used in the final step to check validity with respect to the schema speci-fied in Relax NG.
 The conversion from XML back to PDF is done by an XSLT 2.0 script that produces a L A T E X source file.
Economics We calculate what can be saved using the file size reduction based on the prices for storage and band-width set by Amazon, http://aws.amazon.com/s3/#pricing at the time of writing (Spring 2009). The fixed costs for storing the test collection are still very modest: $ 30 per year. The variable costs are determined by the number of users and the number of documents they want to see: downloading at Amazon costs $0.17 per GB. Table 5 lists the costs per year for 3 user models and three ways of serving: the original collection (as it is now served at http://www. statengeneraaldigitaal.nl ), serving the transformed PDF X  X  (as described in this paper), or serving the gzipped XML files only. The monetary savings are two orders of magnitude.
It is hard to quantify the amount of time needed to create the transformation scripts. This depends very much on the complexity and the regularity of the documents and the use of (commercial) ETL tools [ 27 ]. 5.2 Quality of the reconstruction
Quality of the data: from PDF to XML We now evaluate the transformation from the original PDF file to XML, which was described in 4.1 . Table 2 describes the quality of extract-ing page header, page footers, and paragraphs and determines the correct reading order of the text per page (evaluation on 1,034 pages from 15 randomly chosen proceedings files from the period 1928 X 1966).

For each part in the proceedings that we wanted to extract and mark up by XML tags, we scored whether the start-and end-tags were placed correctly. We evaluated two complete days (50 pages). Table 6 shows the percentage of correctly marked elements for 7 typographical features.

These are promising initial scores. The semantically important XML elements, topic and block, were all recog-nized. The topic description sometimes included too much text (32.2% of the topics), but they were correctly marked as topics. Most of our mistakes were caused by OCR errors which did not let our extraction rules fire. E.g. for recognizing the start of a speech element (and the title, name, and party of the speaker), we use the pattern [title][name][(party)][:] as in [De heer] [Van der Spek ][(PSP)][:] .
 But sometimes this string is wrongly tokenized by the OCR as DeheerVanderSpek(PSP): . OCR mistake repairing, using e.g. the TICL technique [ 28 ], will improve our scores considerably.

We remark on the rather low accuracy of 67% for the reading order, presented in Table 2 . This means that in 33 of the 100 pages, at least one word on the page was not placed in the correct reading order. In the vast majority of cases, a page contained just one error: a word from the footer was added to the end of a column and thus ended up in the run-ning text. From this observation, we can estimate the reading order quality for the structural elements in Table 6 . We cal-culated the average length of the elements in pages using all proceedings from 1997. They are as follows, topics: 8.2 pages; blocks: 1.8 page; speeches: .2 page, and paragraphs: .07 page. If we count 2 reading errors per page, then with 5 speeches on a page, we get an expected accuracy of 87% for speeches.

Quality of the look and feel: from XML to PDF Our goal was to keep the look and feel of the structure of the docu-ments. This was achieved with great success, see Fig. 2 for an indication of the results.

We wanted to preserve the layout of each page as much as possible, but not be overly restrictive. For instance, old and new pages should contain exactly the same characters in the same order, but the words may be broken differently over the lines of texts. Table 7 contains the most important typograph-ical features of these documents and an assessment of the quality of our reconstruction. We tested the similarity each time on ten randomly chosen documents. We score whether the element was visually indistinguishable throughout the complete document. Figure 3 contains examples of visual (in)distinguishability. In the top of the figure, we see two footers (on the left the original). These were scored as being  X  X he same X . Below that, we see twice the wording of a motion (the original is on the left). The header Motie between the two horizontal lines indicates an important structural feature of the text, which is not present in the reconstruction. For that reason, these two are scored as different.

An error analysis indicated that almost all mistakes are due to OCR errors or due to inconsistent layout in the original. 5.3 Additional advantages Having the data in XML creates numerous analysis possibil-ities which are impossible to do automatically from the origi-nal PDF files. Marx [ 21 ] and Kaptein et al. [ 12 ] give a number of examples related to search, in particular focused retrieval and result aggregation. Here, we look at several possibilities that become available when making a new PDF file with L A T E X from XML input.

Table of contents The Dutch proceedings do not contain a table of contents. The table of contents acts as an agenda of the meeting and hence is very valuable. It can be created automatically from the extracted structure and accurately reflects the order of the meeting.
 Select from PDF Users can select text from the PDF file.
What you see is what you get The PDF files available at http://statengeneraaldigitaal.nl have a logic that is not obvious to average users. If opened in a PDF reader, one looks at the scanned images. But it is possible to search with Control F and that yields highlighted hits. However, the search takes place in the OCRed text that may con-tain errors. Thus, words that occur in the text may not be found due to OCR errors. This can be confusing for users.
Also, seeing the OCR errors gives users the opportunity to broaden their search terms and still retrieve what they look for.

Wikification and hyperlinking Names of persons who speak may be hyperlinked to pages with their biographical information [ 26 ]. References to other parliamentary doc-uments may be hyperlinked to these documents.

Back of the book index Using machine learning and keyword extraction techniques [ 11 ], useful index terms can be extracted and indicated in the running text. Creation of a back of the book index is then automatic using L A T E X X  X  makeindex command 6 Related work Our work is not about improving the quality of noisy data, the topic of the AND Workshop series, but rather on improving the interaction of users with a common representation of noisy data, namely facsimile images with hidden OCRed text. We focus on the task of searching and browsing through large collections of scanned documents. Directly relevant work is in the field of user interface design, in particular the design of search user interfaces [ 10 ].
The transformation of scanned and OCRed documents into XML is best seen as a Document Recognition and Retrieval application which does document structure anal-ysis [ 19 ]. Here book structure recognition [ 8 ], like finding chapters and creating table of contents is closely related, as well as algorithms for deeper analysis, like extracting biblio-graphic data [ 20 ]. As in [ 15 ], we detect the logical structure in the document and use layout, font, and textual informa-tion. As most systems, we employ a rule-based architecture. The transformation can thus also be seen as a text extraction task (as in the TAC and MUC conferences [ 23 , 25 ]) combined with a document analysis task [ 3 ].

In this paper, we focus on the  X  X ook-and-feel X  of the docu-ments. An extensive body of research on sustainable digital preservation of properties exists under the name of signifi-cant properties [ 16 ].

Mao et al. [ 28 ] describes the quality of the OCR of the data collection that has been used and presents a system for non-interactive error correction. This system is extensively evaluated on the Dutch Hansard dataset.

Making governmental and/or political data easily acces-sible through the internet is a major research area with a lot of ongoing activity. The W3C has a special inter-est group on eGovernment ( http://www.w3.org/2007/eGov/ ) which encourages governments to publish their data in reusable, linkable, human-and machine-readable formats using open standards such as XML, RDF, and Dublin Core [ 1 , 2 ]. Independent non-profit organisations scrape govern-mental Web sites and create vertical search engines, mashups, or appealing visualizations, e.g. http://theyworkforyou.com and http://capitolwords.org .

Within digital curation research, XML is seen as an impor-tant data format for storing data for long periods of time. The National Archives of Australia intend to store all they have in XML and developed a software tool for this, XENA ( http:// xena.sourceforge.net ). For the use of XML as a format for governmental documents, see [ 29 ] and the publications of the W3C eGov working group [ 1 , 2 ]. Another development in this direction is the UVC (Universal Virtual Computer) developed by IBM and the Dutch Royal Library [ 31 ]. 7 Conclusion We have shown that reconstructing PDF documents from scanned and OCRed data is feasible and leads to size reduc-tions of two orders of magnitude. The quality of the recon-structed PDF files is very good and in several aspects better than the original. The most important gain of this exercise is the reduction in download time from unacceptably slow to instantaneous.

Our sample of 6 years is representative of the Dutch data from 1995 until 1878, in terms of layout complexity and noisiness of the OCR data, except for the period between the two world wars which has much lower OCR quality, due to the use of low-quality paper. Preliminary investigations abroad (Belgium, Germany, Spain) show that our findings generalize to other parliamentary proceedings corpora. Inter-esting directions of future research are to exploit the rich structural semantics of these documents in ways described in Sect. 5.3 .
 References
