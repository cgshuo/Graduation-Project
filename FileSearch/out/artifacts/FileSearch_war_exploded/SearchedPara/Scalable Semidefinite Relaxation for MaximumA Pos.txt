 Computing the maximum a posteriori (MAP) assignment in a graphical model is a central inference task spanning a wide scope of scenarios (Wainwright &amp; Jordan, 2008), ranging from traditional applications in graph matching, stereo re-construction, object detection, error-correcting codes, gene mapping, etc., to a more recent application in estimating consistent object orientations from noisy pairwise measure-ments (Crandall et al., 2011). For general graphs, this prob-lem is well-known to be NP-hard (Shimony, 1994). How-ever, due in part to its importance in practice, a large body of algorithms have been proposed to approximate MAP es-timates by solving various convex relaxation formulations. Among those methods based on convex surrogates, semidefi-nite relaxation usually strictly dominates other formulations based on linear programming or quadratic programming in terms of solution quality. Despite its superiority in obtain-ing more accurate estimates, however, the most significant challenge that limits the applicability of any semidefinite relaxation paradigm on real problems is efficiency. So far existing general-purpose SDP solvers can only handle prob-lems with small dimensionality.
 In this paper, we propose a novel semidefinite relaxation ap-proach (referred to as SDR) for second-order MAP inference in pairwise undirected graphical models. Our key observa-tion is that the marginalization constraints in a typical linear programming relaxation (c.f.(Kumar et al., 2009)) can be subsumed by combing a semidefinite conic constraint with a small set of linear constraints. As a result, SDR admits a concise set of nicely decoupled constraints, which allows us to develop an accelerated variant (referred as SDPAD-LR) of the alternating direction method of multipliers method (ADMM) that is scalable to very large-scale problems. On a standard PC, we have successfully applied SDR on dense problems of dimensions of ( # states  X  # variables ) up to five thousand, and on grid-structured problems up to 10 variables each with dozens of states per node.
 Practically, SDPAD-LR performs remarkably well on a va-riety of problems. We have evaluated SDPAD-LR on two collections of benchmark datasets: OPENGM2 (Kappes et al., 2013a) and a probabilistic inference challenge (PIC, 2011). Each benchmark consists of multiple categories of problems derived from various MAP estimation tasks. Ex-perimental results demonstrate that SDPAD-LR outperforms the state-of-the-art algorithms in computational speed, while often obtaining better MAP estimates. 1.1. Background There is a vast literature concerning MAP estimation over discrete undirected graphical models and it is beyond the scope of this paper to discuss all existing algorithms. Inter-ested readers are referred to (Wainwright &amp; Jordan, 2008) for an in-depth introduction to this topic. In the following, we focus on methods that involve convex relaxation, which are the most relevant to our approach.
 Many prior convex relaxation techniques are derived from the original graph structure underlying the MAP estima-tion problem, among which linear programming relax-ation (LPR) methods (Chekuri et al., 2004; Wainwright et al., 2005) are the most popular. In addition to LPR, re-searchers have considered alternative convex relaxations, e.g., quadratic relaxation (QP-RL) (Ravikumar et al., 2010) and second-order cone relaxation (SOCP-MS) (Kumar et al., 2009). In the seminal work of (Kumar et al., 2009), the au-thors evaluate various convex relaxation approaches, and assert that LPR dominates QP-RL and SOCP-MS. However, as will be shown later, LPR is further dominated by a stan-dard SDP relaxation (Wainwright &amp; Jordan, 2008), which is one of the main foci of this paper.
 A recent line of approaches have aimed at obtaining tighter convex relaxations by incrementally adding higher-order in-teractions to enforce proper marginalization over groups of variables (Sontag et al., 2012; Komodakis &amp; Paragios, 2008; Batra et al., 2011). Despite the practical success of these approaches, it remains an open problem to analyze their behavior  X  for example, to decide whether a polynomial number of clusters are sufficient.
 There have been several attempts in applying semidefinite relaxation to obtain MAP assignment (Torr, 2003; Olsson et al., 2007; Wang et al., 2013; Peng et al., 2012). How-ever, most of these methods are primarily designed for bi-nary MAP estimation problems. In a recent work, (Peng et al., 2012) considered a general MAP estimation prob-lem, where each variable has multiple states. The key difference between the proposed formulation and that of (Peng et al., 2012) is that we utilize the semidefinite cone constraint to prune redundant linear marginalization con-straints. This leads to a concise set of loosely decoupled constraints, which is important in developing effective opti-mization paradigms. 1.2. Notation Before proceeding, we introduce a few notations that will be used throughout the paper. For any linear operator A , we let set of N  X  M matrices with nonnegative entries, and (  X  ) R any symmetric matrix M , we use M 0 to represent the projection of M onto the positive semidefinite cone. Finally, we denote by k X k F the Frobenius norm of a matrix X . We start with state configurations over n discrete random variables X = { x 1 ,  X  X  X  ,x n } . Without loss of general-ity, assume that each x i takes values in a discrete state set { 1 ,  X  X  X  ,m } . Consider a pairwise Markov random field (MRF) G parameterized by the potentials (or sufficient statis-( i,j )  X  G . The energy (or log-likelihood) associated with this MRF is given by The goal of MAP estimation is then to compute the con-figuration of states that maximizes the energy  X  the most probable state assignment X M . 2.1. Semidefinite Programming Relaxation (SDR) MAP estimation over discrete sets is an NP-hard combina-torial problem, and can be cast as an integer quadratic pro-a binary vector such that x i,j = 1 if and only if x i = j . Then MAP estimation is equivalent to the following integer program. (IQP): maximize where w i and W ij encode the corresponding potentials. The hardness of the above IQP arises in two aspects: (i) x are binary-valued, and (ii) the objective function is a quadratic function of these binary variables. These motivate us to relax the constraints in some appropriate manner, lead-ing to our semidefinite relaxation. In the sequel, we present the proposed relaxation in a step-by-step fashion. 1) In the same spirit as existing convex formulations 2) The non-convex constraint X = xx &gt; is then relaxed 3) The binary constraints x  X  { 0 , 1 } nm and X  X  Remark 1. The non-negativity constraints described in (5) are necessary since otherwise SDR becomes loose for submodular functions. Below is an example in the presence of 2 variables each having 2 states: w 1 = 2 0 , w 2 = It is clear that W 12 satisfies the submodular property. How-ever, the optimizer of SDR after dropping the constraint X ij  X  0 is given by x which does not obey the non-negativity constraint on X . The feasibility constraints (2),(3), (4) and (5) taken col-lectively give rise to the following semidefinite relaxation (SDR) formulation for MAP estimation: (SDR): maximize 2.2. Comparison with Prior Relaxation Heuristics 2.2.1. Superiority over LP relaxations.
 Careful readers will remark that there might exist other con-vex constraints on X and x that we can enforce to tighten the proposed semidefinite relaxation. One alternative is the following marginalization constraints, which have been widely invoked in LP relaxation for MAP estimation: Somewhat unexpectedly, these constraints turn out to be redundant, as asserted in the following theorem. Theorem 1. Any feasible solution X to SDR (i.e. any X obeying the feasibility constraints of SDR) necessarily satisfies Proof. See the supplemental material.
 Intuitively, this property arises from the following features of x and X ii : x &gt; i  X  1 = 1 , X ii 1 = x i , X &gt; ii 1 = 1 , 1  X  i  X  n. These intrinsic properties are then propagated to all off-diagonal blocks by the semidefinite constraint. 2.2.2. Invariance under variable reparameterization. Pioneered by the beautiful relaxation proposed for the MAX-CUT problem (Goemans &amp; Williamson, 1995), many SDP approaches developed for combinatorial problems employ the integer indicator y = 1 2 ( 1 + x ) to parameterize bi-nary variables (e.g., (Torr, 2003; Kumar et al., 2009)). If one applies matrix lifting Y = yy &gt; and follows a similar relaxation procedure, the resulting semidefinite relaxation (referred to as SDR2) can be derived as follows where w i are defined as In fact, SDR2 is identical to SDR, as formally stated below. Theorem 2. ( x ? , X ? ) is the solution to SDR if and only if is the solution to SDR2.
 Proof. See the supplemental material.
 Despite the theoretical equivalence between SDR2 and SDR, from a numerical perspective, solving SDR2 is much harder than solving SDR. The difficulty arises from the complicated form of the linear constraints enforced by SDR2 (i.e., (12)). Note that the advantage of SDR2 is that all diagonal entries of Y are equal to 1 as follows diag( Y ii ) = 2( 1 + y i )  X  1  X  y i  X  y i = 1 , ( 1  X  i  X  n ) . Nevertheless, none of prior SDP algorithms takes full ad-vantage of this property in accelerating the algorithm. The curse of dimensionality poses inevitable numerical chal-lenges when applying general-purpose SDP solvers to solve SDR. Despite their superior accuracy, primal-dual interior point methods (IPM) like SDPT (Toh et al., 1999) are limited to small-scale problems (e.g. nm &lt; 150 on a regular PC). More scalable solvers such as CSDP (Helmberg &amp; Rendl, 2000) and DSDP (Benson &amp; Ye, 2008) propose to solve the dual problem. However, since the non-negativity constraints X ij  X  0 produce numerous dual variables, these solvers are still far too restrictive for our program  X  none of them can solve SDR on a standard PC when nm exceeds 1000. The limited scalability of interior point methods has in-spired a flurry of activity in developing first-order methods, among which the alternating direction method of multipliers (ADMM) (Wen et al., 2010; Boyd et al., 2011) proves well suited for large-scale problems. In this section, we propose an efficient variant of ADMM  X  referred to as SDPAD-LR (SDP Alternating Direction method for Low Rank structure), which is tailored to the special structure of SDR (including low rank and sparsity) and enables us to solve problems with very large dimensionality. 3.1. Alternating Direction Augmented Lagrangian For convenience of presentation, we denote and rewrite SDR in the operator form: where C encodes all w i and W ij , A ( X ) = b collects the equality constraints, and P ( X ) gathers element-wise non-negative constraints. We let variables y , z , and S represent the corresponding dual variables for respective constraints. In the sequel, we will start by reviewing SDPAD, i.e., the original alternating direction method introduced in (Wen et al., 2010), and then present the key modification underly-ing the proposed efficient variant SDPAD-LR. 3.1.1. SDPAD: Procedures and Convergence SDPAD considers the following augmented Lagrangian: L ( y , z , S , X ) =  X  b , y  X  + P ? ( z ) + S  X  C  X  X  ? ( y ) , X where the penalty parameter  X  controls the strength of the quadratic term. As suggested by (Boyd et al., 2011), we initialize  X  with a small value, and gradually increase it throughout the optimization process.
 Let superscript ( k ) indicate the variable in the k th iteration. Each iteration of the SDPAD consists of a dual optimization step, followed by a primal update step given as follows Instead of jointly optimizing all dual variables, the key idea of SDPAD is to decouple the dual optimization step into sev-eral sub-problems or, more specifically, to optimize y , z , S in order with other variables fixed. This leads to closed-form solutions for each sub-problem as follows Similar to that considered in (Wen et al., 2010), our stop-ping criterion involves measuring of both primal feasibility kA ( X ( k ) )  X  b k and dual feasibility  X  ( X ( k )  X  X Convergence property. In general, convergence proper-ties of SDPAD are known when only equality constraints are present (Wen et al., 2010). However, the inequality constraints of SDR are special in the following two aspects: (i) They are element-wise non-negativity constraints; Algorithm 1 SDPAD for solving SDR input : k max = 1000 , = 10  X  4 ,  X  min = 10  X  3 ,  X  = 1 . 005 . repeat k &gt; k max (ii) They are essentially decoupled from other linear con-Property (ii) arises as all equality constraints are concerned with diagonal blocks of X , while all linear inequality con-straints are only enforced on its off-diagonal blocks. Such special structure leads to theoretical convergence guarantees for SDPAD, as stated in the following theorem.
 Theorem 3. The SDPAD method presented above con-verges to the optimizer of SDR.
 Proof. See the supplemental material. 3.1.2. SDPAD-LR: Accelerated Method Apparently, the most computationally expensive step of SDPAD is the update of S , which involves the eigen-decomposition of an nm  X  nm matrix. This limits the appli-cability of SDPAD to large-scale problems (e.g. nm &gt; 10 To bypass this numerical bottleneck, we modify SDPAD and present an efficient heuristic called SDPAD-LR, which exploits the low-rank structure of X .
 First, we observe that S can be alternatively expressed as This allows us to present SDPAD without invoking S . The detailed steps of SDPAD can now be summarized as in Algorithm 1.
 It is straightforward to see that the bottleneck of Algorithm 1 lies in how to compute and store the primary variable X . To derive an efficient solver, we make the assumption that the optimal solution X ? is low-rank. This is motivated by the empirical evidence that for a variety of problems (see the experimental section for details), SDR is exact, meaning Algorithm 2 SDPAD-LR for solving SDR input : k max = 5000 , = 10  X  4 ,  X  min = 10  X  3 ,  X  = 1 . 005 ,  X  = 1 e  X  2 , r max = 32 , r = 4 . repeat rank ( X ? ) = 1 . Moreover, in the general case, the rank of X ? is expected to be much small than its dimension (e.g. (Burer &amp; Monteiro, 2003)), i.e., where M is the number of constraints. 1 of SDPR. Based on this assumption, the key idea of SDPAD-LR is to invoke a low-rank matrix Y  X  R ( nm +1)  X  r for some small r and encode X = Y Y &gt; throughout the iterative process. This allows us to keep all the variables in memory even for large-scale problems.
 In this case, (15) is modified as Y ( k ) = U ( k )  X  1 2  X  = Diag(  X  1 ,  X  X  X  , X  r ) and U = ( u 1 ,  X  X  X  , u r ) represent the top r eigenvalues and respective eigenvectors of Although V ( k ) is a dense matrix, its top eigenvectors can be efficiently computed using the Lanczos process (Cullum &amp; Willoughby, 2002), whose efficiency is dictated by the complexity of the matrix multiplication operator V ( k ) : u  X  R constrains X ij  X  0 , ( i,j )  X  X  , the matrix C + A ? ( y ( k ) )  X  G . Thus, the complexity of computing V ( k ) u is at most O ( nmr 2 + m 2 |E| ) .
 Theoretically, it is extremely challenging to derive an upper bound on r to ensure the exactness of the modified algorithm. To address this issue, we thus design SDPAD-LR so that it iteratively doubles the value of r and reapplies the modified algorithm until it returns the optimal solution. For most of our experiments, we found that r = 8 is sufficient. The pseudo-code of SDPAD-LR is summarized in Algo-rithm 2. 3.2. Iterative Rounding Similar to other ADMM methods (Boyd et al., 2011), SDPAD-LR converges rapidly to moderate accuracy within the first 400 iterations, and significantly slows down af-terwards. Thus, rather than continuing until SDPAD-LR converges, it would be more efficient to shrink the prob-lem size by fixing those variables whose optimal states are likely to have been revealed. Specifically, after each round of SDPAD-LR, we fix the optimal state j of a variable x i if x i,j &gt; t max ( t max = 0 . 99 for all the examples) or x tive procedures on the reduced problem. In practice, we find that due to the tightness of SDR, the size of the reduced problems are significantly smaller than the original problem, and one iterative rounding procedure is usually sufficient. In this section, we evaluate SDPAD-LR on several bench-mark data sets and compare its performance against existing SDP solvers and state-of-the-art MAP inference algorithms. 4.1. Benchmark Datasets We perform experimental evaluation on MAP estimation problems from three popular benchmark data sets (See Ta-ble 2), i.e., OPENGM2 (Kappes et al., 2013a), PIC (PIC, 2011), and a new data set ORIENT for the task of estimat-ing consistent camera orientations (Crandall et al., 2011). OPENGM2 comprises 19 categories of mostly sparse MAP problems. We choose four representative categories for eval-uation: Geometric Surface Labeling (GM-Label), Chinese Characters (GM-Char), MRF Photomontage (GM-Montage) and Matching (GM-Matching). The first three categories GM-Label, GM-Character and GM-Montage are sparse MAP estimation problems with increasing scales. GM-Matching is a special category where our convex relax-ation is not tight. PIC comprises 10 categories of MAP inference problems of various structure. As we already in-clude sparse MAP inference problems from OPENGM2, we pick 3 representative dense categories from PIC: Object Detection(PIC-Object), Image Alignment (PIC-Align) and Folding (PIC-Folding). 4.2. SDP Solver Evaluation Baseline algorithms. We evaluate the proposed SDPAD-LR against the following existing large-scale SDP solvers.  X  SDPAD  X  the original ADMM method presented  X  SDPNAL  X  the Newton-CG (conjugate gradient) aug- X  IPM-NC  X  the nonconvex interior point method which  X  MOSEK  X  the cutting-edge interior point method. To  X  MUL-Update  X  an approximate on-line SDP solver Problem sets. For evaluation, we consider four categories, on which most baseline algorithms are applicable: PIC-OBJ, PIC-Align, PIC-Folding and GM2-Label. For simplicity, we pick a representative problem from each category. The di-mensions of these problem sets range from 600 to 5000 , and they contain both dense and sparse problems (See Table 1). Evaluation protocol. Following the standard protocol for assessing convex programs, we evaluate the duality gap and the primal/dual infeasibility of each algorithm: As IPM-NC solves a different optimization problem, we report the gap between its optimal solutions with the ground-truth optimal solutions.
 Analysis of results. We run each algorithm until the duality gap is below 1 e  X  4 or the maximum number of iterations is reached. Table 1 shows the running time, duality gap and maximum primal/dual infeasibility of each algorithm on each problem. We can see that SDPAD-LR generates results that are comparable to SDPAD and SDPNAL. How-ever, SDPAD-LR turns out to be remarkably more efficient than SDPAD and SDPNAL on large-scale or sparse datasets. This is due to the fact that SDPAD-LR only requires com-puting the top eigenvalues, which is both memory and com-putationally efficient.
 Both interior point methods (i.e., IPM-NC and MOSEK) have provable guarantees to generate more accurate results than other methods. However, MOSEK is not scalable to large data sets, as reported in Table 1. IPM-NC is scal-able to large-scale problems, as the number variables in-volved is small. However, as IPM-NC solves a non-convex optimization problem, it may easily get trapped into lo-cal minimals (e.g., on deer 0034.K10.F100 30markers and folding 2BE6).
 Finally, the multivariate weight update method MUL-Update turns out be inefficient on solving SDRs of MAP inference problems. This is due to the fact that MUL-Update is an approximate solver and it requires a lot of iterations to obtain an accurate solution. 4.3. MAP Inference Evaluation Experimental setup. We compare SDR with the top-performing algorithms from OPENGM2 (Kappes et al., 2013a). These algorithms include (i) BRAOBB (Otten &amp; Dechter, 2012), which is based on combinatorial search, (ii)  X  -expansion (Szeliski et al., 2008) X  X  move making method, (iii) MCBC (Kappes et al., 2013b), which is based on a highly optimized max-cut solver, (iv) TRWS-LF2 (Kol-mogorov, 2006) X  Tree-reweighted message passing, (vi) ogm-TRBP X  Tree-reweighted belief propagation (Szeliski et al., 2008) and (vii) ficolofo (Cooper et al., 2010) X  the top performing method on dense problems of PIC.
 We use two measures to assess the performance of each method. The first measure evaluates for each method the mean objective values f of the resulting MAP assignments on each category. For the consistency with (Kappes et al., 2013a), we report  X  f , meaning that the smaller the value, the better the algorithm. The second measure reports the per-centage that each method achieves the best solution among all existing methods (not necessarily the global optimal). The higher the percentage, the better the algorithm. Performance. Table 3 summarizes the performance of SDPAD-LR v.s. state-of-the-art MAP inference algorithms on each type of problems. In each block, the top element (which is tilted) describes  X  f of each method on each cat-egory, and the bottom block describes the percentage of obtaining the best solution. We can see that the overall per-formance of SDPAD-LR is superior to each other individual algorithm. Except on GM-Matching, SDPAD-LR is the top performing on each other dataset. In contrast, each existing method either does not apply or generates poor results on one or several datasets. This shows the advantage of solving a strong convex relaxation of the MAP inference problem. Below we break down the performance on each benchmark.  X  ORIENT. SDPAD-LR is the leading method on ORI- X  Dense problems. SDPAD-LR also outperforms other  X  Sparse problems. SDR yields comparable results with  X  GM-Matching. SDR only yields moderate results on Running Times. The running time of SDPAD-LR (includ-ing the rounding procedure) is of the same scale as other convex relation techniques. As shown in Table 2, our pre-liminary Matlab implementation takes less than 10 mins on small-scale problems (i.e. those in PIC-Object, GM-Matching and PIC-Label). On medium size problems, i.e., those in PIC-Folding, PIC-Align, GM-Char and ORIENT, the running time of SDPAD-LR ranges from 20 minutes to 1 hour. On large-scale problems from GM-Montage, SDPAD-LR takes around 8 hours on each problem. However, there is still huge room for improvement. One alternative is to use the eigenvalues computed in the previous iteration to accelerate the eigen-decomposition at the current iteration, which is left for future work. In this paper, we have presented a novel semidefinite re-laxation for second-order MAP estimation and proposed an efficient ADMM solver. We have extensively compared the proposed SDP solver with various state-of-the-art SDP solvers. Experimental results confirm that our SDP solver is much more scalable than prior approaches when applied to various MAP estimation problem, which enables us to apply SDR on large-scale datasets. Owing to the power of semidefinite relaxation, SDR proves superior to other top-performing MAP inference algorithms on a variety of benchmark datasets.
 There are plenty of opportunities for future research. First, we would like to extend SDR to higher-order MAP problems. Moreover, it would be interesting to integrate SDR and com-binatorial optimization techniques, which has the potential to boost the power of both. From the theoretical side, theo-retical support for exact estimation with SDR would be one exciting direction for investigation. This would offer justi-fication of the presented low-rank heuristic. On the other hand, as many combinatorial optimization problems can be formulated as MAP inference problems, such exact estima-tion conditions can shed light on the original combinatorial optimization problems.
 This work has been supported in part by NSF grants FO-DAVA 808515 and CCF 1011228, AFOSR grant FA9550-12-1-0372, ONR MURI N00014-13-1-0341, and a Google research award.
 Probabilistic inference chanllenge, 2011. http://www.cs.huji.ac.il/project/PASCAL/index.php. Arora, Sanjeev, Hazan, Elad, and Kale, Satyen. The multi-plicative weights update method: a meta-algorithm and applications. Theory of Computing , 8(1):121 X 164, 2012. Batra, D., Nowozin, S., and Kohli, P. Tighter relaxations for MAP-MRF inference: A local primal-dual gap based separation algorithm. AISTATS X 11 , 15:146 X 154, 2011. Benson, S. and Ye, Y. DSDP5: software for semidefinite programming. ACM Trans. Math. Softw. , 34(3):16:1 X  16:20, May 2008.
 Boyd, S., Parikh, N., Chu, E., Peleato, B., and Eckstein, J.
Distributed optimization and statistical learning via the alternating direction method of multipliers. Foundations and Trends in Machine Learning , 3(1):1 X 122, 2011. Burer, Samuel and Monteiro, Renato D. C. A nonlinear pro-gramming algorithm for solving semidefinite programs via low-rank factorization. Math. Program. , 95(2):329 X  357, 2003.
 Chekuri, C., Khanna, S., Naor, J., and Zosin, L. A linear programming formulation and approximation algorithms for the metric labeling problem. SIAM J. Discrete Math. , 18(3):608 X 625, 2004.
 Cooper, M. C., de Givry, S., Sanchez, M., Schiex, T., Zyt-nicki, M., and Werner, T. Soft arc consistency revisited. Artif. Intell. , 174(7-8):449 X 478, 2010.
 Crandall, D., Owens, A., Snavely, N., and Huttenlocher, D.
SfM with MRFs: discrete-continuous optimization for large-scale structure from motion. CVPR X 11 , pp. 3001 X  3008, 2011.
 Cullum, J. K. and Willoughby, R. A. Lanczos Algorithms for Large Symmetric Eigenvalue Computations . Number 41. SIAM, 2002.
 Goemans, M. and Williamson, D. Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming. JACM , 1995.
 Helmberg, C. and Rendl, F. A spectral bundle method for semidefinite programming. SIAM Journal on Optimiza-tion , 10(3):673 X 696, 2000.
 Kappes, J. H., Andres, B., Hamprecht, F. A., Schnorr, C.,
Nowozin, S., Batra, D., Kim, S., Kausler, B. X., Lell-mann, J., Komodakis, N., and Rother, C. A comparative study of modern inference techniques for discrete energy minimization problems. In CVPR X 13 , June 2013a.
 Kappes, J. H., Speth, M., Reinelt, G., and Schn  X  orr, C. To-wards efficient and exact MAP-inference for large scale discrete computer vision problems via combinatorial op-timization. In CVPR , 2013b.
 Kolmogorov, V. Convergent tree-reweighted message pass-ing for energy minimization. IEEE PAMI. , 28:1568 X 1583, October 2006.
 Komodakis, N. and Paragios, N. Beyond loose LP-relaxations: Optimizing MRFs by repairing cycles. In ECCV (3) , pp. 806 X 820, 2008.
 Kumar, M., Kolmogorov, V., and Torr, P. An analysis of convex relaxations for MAP estimation of discrete MRFs. JMLR , 10:71 X 106, 2009.
 Olsson, C., Eriksson, A., and Kahl, F. Solving large scale binary quadratic problems: Spectral methods vs. semidef-inite programming. In CVPR X 07 , 2007.
 Otten, Lars and Dechter, Rina. Anytime and/or depth-first search for combinatorial optimization. AI Commun. , 25 (3):211 X 227, 2012.
 Peng, Jian, Hazan, Tamir, Srebro, Nathan, and Xu,
Jinbo. Approximate inference by intersecting semidefi-nite bound and local polytope. In AISTATS , pp. 868 X 876, 2012.
 Ravikumar, P., Agarwal, A., and Wainwright, M. J. Message-passing for graph-structured linear programs: Proximal methods and rounding schemes. The Journal of Machine Learning Research , 11:1043 X 1080, 2010.
 Shimony, S. E. Finding MAPs for belief networks is NP-hard. Artif. Intell. , 68(2):399 X 410, August 1994. Sontag, D., Meltzer, T., Globerson, A., Jaakkola, T. S., and Weiss, Y. Tightening LP relaxations for MAP using message passing. arXiv preprint arXiv:1206.3288 , 2012. Szeliski, R., Zabih, R., Scharstein, D., Veksler, O., Kol-mogorov, V., Agarwala, A., Tappen, M., and Rother, C.
A comparative study of energy minimization methods for Markov random fields with smoothness-based priors. PAMI , 30(6):1068 X 1080, June 2008.
 Toh, K. C., Todd, M. J., and Tutuncu, R. H. SDPT3 X  X  Matlab software package for semidefinite programming. Opt. Methods and Software , 11(12):545 X 581, 1999. Torr, Philip. Solving Markov random fields using semidefi-nite programming. In AI-STATs X 03 , 2003.
 Wainwright, M., Jaakkola, T., and Willsky, A. MAP estima-tion via agreement on trees: message-passing and linear programming. IEEE Trans Info Theory , 2005.
 Wainwright, M. J. and Jordan, M. I. Graphical models, ex-ponential families, and variational inference. Foundations and Trends in Machine Learning , 1(1-2), 2008.
 Wang, P., Shen, C., and van den Hengel, A. A fast semidef-inite approach to solving binary quadratic problems. In CVPR  X 13 , pp. 1312 X 1319, 2013.
 Wen, Z., Goldfarb, D., and Yin, W. Alternating direction augmented Lagrangian methods for semidefinite program-ming. Math. Prog. Comp. , 2(3-4):203 X 230, 2010.
 Zhao, Xin-Yuan, Sun, Defeng, and Toh, Kim-Chuan. A newton-cg augmented lagrangian method for semidefinite programming. SIAM J. on Optimization , 20(4):1737 X 
