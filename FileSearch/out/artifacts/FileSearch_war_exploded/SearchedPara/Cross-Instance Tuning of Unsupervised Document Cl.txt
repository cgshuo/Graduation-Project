 The problem of combining labeled and unlabeled examples in a learning task (semi-supervised learn-ing) has been studied in the literature under various guises. A variety of algorithms (e.g., bootstrapping (Yarowsky, 1995), co-training (Blum and Mitchell, 1998), alternating structure optimization (Ando and Zhang, 2005), etc.) have been developed in order to improve the performance of supervised algorithms, by automatically extracting knowledge from lots of unlabeled examples. Of special interest is the work of Ando and Zhang (2005), where the goal is to build many supervised auxiliary tasks from the unsuper-vised data, by creating artificial labels; this proce-dure helps learn a transformation of the input space that captures the relatedness of the auxiliary prob-lems to the task at hand. In essence, Ando and Zhang (2005) transform the semi-supervised learning prob-lem to a multi-task learning problem; in multi-task learning, a (usually large) set of supervised tasks is available for training, and the goal is to build mod-els which can simultaneously do well on all of them (Caruana, 1997; Ben-David and Schuller, 2003; Ev-geniou and Pontil, 2004).

Little work, however, has been devoted to study the situation where lots of labeled examples, of one kind, are used to build a model which is tested on unlabeled data of a  X  X ifferent X  kind. This problem, which is the topic of this paper, cannot be cast as a multi-task learning problem (since there are labeled examples of only one kind), neither can be cast as a semi-supervised problem (since there are no training labels for the test task). Note that we are interested in the case where the hidden test labels may have no semantic relationship with the training labels; in some cases, there may not even be any informa-tion about the test labels X  X hat they represent, how many they are, or at what granularity they describe the data. This situation can arise in the case of un-supervised clustering of documents from a large and diverse corpus: it may not be known in what way the resulting clusters split the corpus (is it in terms of topic? genre? style? authorship? a combination of the above?), unless one inspects each resulting clus-ter to determine its  X  X eaning. X 
At this point, we would like to differentiate be-tween two concepts: a target task refers to a class of problems that have a common, high-level de-scription (e.g., the text document clustering task, the speech recognition task, etc.). On the other hand, a task instance refers to a particular example from the class. For instance, if the task is  X  X ocument clustering, X  a task instance could be  X  X lustering of a set of scientific documents into particular fields X  ; or, if the task is  X  X arsing, X  a task instance could be  X  X arsing of English sentences from the Wall Street Journal corpus X  . For the purposes of this paper, we further assume that there are task instances which are unrelated , in the sense that that there are no common labels between them. For example, if the task is  X  X lustering from the 20 Newsgroups corpus, X  then  X  X lustering of the computer-related documents into PC-related and Mac-related X  and  X  X lustering of the politics-related documents into Middle-East-related and non-Middle-East-related X  are two dis-tinct, unrelated instances. In more mathematical terms, if task instances T tions X sets S lated if X
The focus of this paper is to study the problem of cross-instance tuning of unsupervised algorithms: how one can tune an algorithm, which is used to solve a particular task instance, using knowledge from an unrelated task instance. To the best of our knowledge, this cross-instance learning problem has only been tackled in (Eisner and Karakos, 2005), whose  X  X trapping X  procedure learns a meta-classifier for distinguishing good from bad clusterings.
In this paper, we introduce a scalar parameter  X  (a new degree of freedom) into two basic unsuper-vised clustering algorithms. We can tune  X  to max-imize unsupervised clustering performance on dif-ferent task instances where the correct clustering is known. The hope is that tuning the parameter learns something about the task in general, which trans-fers from the supervised task instances to the un-supervised one. Alternatively, we can tune a meta-classifier so as to select good values of  X  on the su-pervised task instances, and then use the same meta-classifier to select a good (possibly different) value of  X  in the unsupervised case.

The paper is organized as follows: Section 2 gives a background on text categorization, and briefly de-scribes the algorithms that we use in our experi-ments. Section 3 describes our parameterization of the clustering algorithms using Jensen-R  X  enyi diver-gence and Csisz  X  ar X  X  mutual information. Experi-mental results from the  X 20 Newsgroups X  data set are shown in Section 4, along with two techniques for cross-instance learning: (i)  X  X trapping, X  which, at test time, picks a parameter based on various  X  X ood-ness X  cues that were learned from the labeled data set, and (ii) learning the parameter from a supervised data set which is chosen to statistically match the test set. Finally, concluding remarks appear in Section 5. Document categorization is the task of deciding whether a piece of text belongs to any of a set of prespecified categories. It is a generic text process-ing task useful in indexing documents for later re-trieval, as a stage in natural language processing systems, for content analysis, and in many other roles (Lewis and Hayes, 1994). Here, we deal with the unsupervised version of document cate-gorization, in which we are interested in cluster-ing together documents which (hopefully) belong to the same topic, without having any training exam-ples. 1 Supervised information-theoretic clustering approaches (Torkkola, 2002; Dhillon et al., 2003) have been shown to be very effective, even with a small amount of labeled data, while unsupervised methods (which are of particular interest to us) have been shown to be competitive, matching the classifi-cation accuracy of supervised methods.

Our focus in this paper is on document catego-rization algorithms which use information-theoretic criteria, since there are natural ways of generalizing these criteria through the introduction of tunable pa-rameters. We use two such algorithms in our exper-iments, the sequential Information Bottleneck (sIB) and Iterative Denoising Trees (IDTs); details about these algorithms appear below.

A note on mathematical notation: We assume that we have a collection A = { X (1) , . . . , X ( N ) } of
N documents. Each document X ( i ) is essentially a  X  X ag of words X , and induces an empirical distri-bution  X  P set (cluster) C of documents, the conditional dis-tribution on X , given the cluster, is just the cen-troid:  X  P tion S  X  X  of documents is partitioned into clusters C 1 , . . . , C m signed to a cluster C is the cluster index, then the mutual information be-tween words and corresponding clusters is given by
I ( X ; Z | S ) = X where P ( z | S ) , | C on the clusters and D (  X k X  ) is the Kullback-Leibler divergence (Cover and Thomas, 1991). 2.1 The Information Bottleneck Method The Information Bottleneck (IB) method (Tishby et al., 1999; Slonim and Tishby, 2000; Slonim et al., 2002) is one popular approach to unsupervised cat-egorization. The goal of the IB (with  X  X ard X  clus-tering) is to find clusters such that the mutual in-formation I ( X ; Z ) between words and clusters is as large as possible, under a constraint on the number of clusters. The procedure for finding the maximiz-ing clustering in (Slonim and Tishby, 2000) is ag-glomerative clustering, while in (Slonim et al., 2002) it is based on many random clusterings, combined with a sequential update algorithm, similar to K -means. The update algorithm re-assigns each data point (document) d to its most  X  X imilar X  cluster C , in order to minimize I ( X ; Z | C  X  X  d } ) , i.e., where  X  = 1 the sequential Information Bottleneck (sIB) method, and is considered the state-of-the-art in unsuper-vised document categorization. 2.2 Iterative Denoising Trees Decision trees are a powerful technique for equiva-lence classification, accomplished through a recur-sive successive refinement (Jelinek, 1997). In the context of unsupervised classification, the goal of decision trees is to cluster empirical distributions (bags of words) into a given number of classes, with each class corresponding to a leaf in the tree. They are built top-down (as opposed to the bottom-up construction in IB) using maximization of mutual information between words and clusters I ( X ; Z | t ) to drive the splitting of each node t ; the hope is that each leaf will contain data points which belong to only one latent category.
 Iterative Denoising Trees (also called Integrated Sensing and Processing Decision Trees) were intro-duced in (Priebe et al., 2004a), as an extension of regular decision trees. Their main feature is that they transform the data at each node, before split-ting, by projecting into a low-dimensional space. This transformation corresponds to feature extrac-tion; different features are suppressed (or ampli-fied) by each transformation, depending on what data points fall into each node ( corpus-dependent-feature-extraction property (Priebe et al., 2004b)). Thus, dimensionality reduction and clustering are chosen so that they jointly optimize the local objec-tive.

In (Karakos et al., 2005), IDTs were used for an unsupervised hyperspectral image segmentation ap-plication. The objective at each node t was to maxi-mize the mutual information between spectral com-ponents and clusters given the pixels at node t , com-puted from the projected empirical distributions. At each step of the tree-growing procedure, the node which yielded the highest increase in the average, per-node mutual information, was selected for split-ting (until a desired number of leaves was reached). In (Karakos et al., 2007b), the mutual information objective was replaced with a parameterized form of mutual information, namely the Jensen-R  X  enyi diver-gence (Hero et al., 2001; Hamza and Krim, 2003), of which more details are provided in the next section. As mentioned above, the algorithms considered in this paper (sIB and IDTs) are unsupervised, in the sense that they can be applied to test data with-out any need for tuning. Our procedure of adapt-ing them, based on some supervision on a different task instance, is by introducing a parameter into the unsupervised algorithm. At least for simple cross-instance tuning, this parameter represents the infor-mation which is passed between the supervised and the unsupervised instances.

The parameterizations that we focused on have to do with the information-theoretic objectives in the two unsupervised algorithms. Specifically, fol-lowing (Karakos et al., 2007b), we replace the mu-tual information quantities in IDTs as well as sIB with the parameterized mutual information mea-sures mentioned above. These two quantities pro-vide estimates of the dependence between the ran-dom quantities in their arguments, just as the usual mutual information does, but also have a scalar pa-rameter  X   X  (0 , 1] that controls the sensitivity of the computed dependence on the details of the joint dis-tribution of X and Z . As a result, the effect of data sparseness on estimation of the joint distribution can be mitigated when computing these measures. 3.1 Jensen-R  X  enyi Divergence The Jensen-R  X  enyi divergence was used in (Hero et al., 2001; Hamza and Krim, 2003) as a measure of similarity for image classification and retrieval. For two discrete random variables X, Z with distribu-tions P I ( X ; Z ) = H  X  ( P X )  X  X where H
H  X  ( P ) = If  X   X  (0 , 1) , H  X  is a concave function, and hence I ( X ; Z ) is non-negative (and it is equal to zero if and only if X and Z are independent). In the limit as  X   X  1 , H (not an obvious fact), so I mutual information. Similarly, we define
I  X  ( X ; Z | W ) = X where I the conditional distribution of X and Z given W .
Except in trivial cases, H than H (  X  ) when 0 &lt;  X  &lt; 1 ; this means that the ef-fects of extreme sparsity (few words per document, or too few occurrences of non-frequent words) on the estimation of entropy and mutual information can be dampened with an appropriate choice of  X  . This happens because extreme sparsity in the data yields empirical distributions which lie at, or close to, the boundary of the probability simplex. The entropy of such distributions is usually underesti-mated, compared to the smooth distributions which generate the data. R  X  enyi X  X  entropy is larger than Shannon X  X  entropy, especially in those regions close to the boundary, and can thus provide an estimate which is closer to the true entropy. 3.2 Csisz  X  ar X  X  Mutual Information Csisz  X  ar defined the mutual information of order  X  as I  X  ( X ; Z ) = min Q where D 1995). It was shown that I C of the properties of I ( X ; Z )  X  X t is a non-negative, continuous, and concave function of P vex in P  X   X  1 .

Notably, I C this means, as above, that  X  regulates the overesti-mation of mutual information that may result from data sparseness.

There is no analytic form for the minimizer of the right-hand-side of (3) (Csisz  X  ar, 1995), but it may be computed via an alternating minimization algorithm (Karakos et al., 2007a). We demonstrate the feasibility of cross-instance tun-ing with experiments on unsupervised document cat-egorization from the 20 Newsgroups corpus (Lang, 1995); this corpus consists of roughly 20,000 news articles, evenly divided among 20 Usenet groups.
Random samples of 500 articles each were chosen by (Slonim et al., 2002) to create multiple test col-lections: 250 each from 2 arbitrarily chosen Usenet groups for the Binary test collection, 100 articles each from 5 groups for the Multi5 test collection, and 50 each from 10 groups for the Multi10 test col-lection. Three independent test collections of each kind ( Binary , Multi5 and Multi10 ) were created, for a total of 9 collections. The sIB method was used to separately cluster each collection, given the correct number of clusters.

A comparison of sIB and IDTs on the same 9 test collections was reported in (Karakos et al., 2007b; Karakos et al., 2007a). Matlab code from (Slonim, 2003) was used for the sIB experiments, while the parameterized mutual information measures of Sec-tion 3 were used for the IDTs. A comparison was also made with the EM-based Gaussian mixtures clustering tool mclust (Fraley and Raftery, 1999), and with a simple K -means algorithm. Since the two latter techniques gave uniformly worse cluster-ings than those of sIB and IDTs, we omit them from the following discussion.

To show that our methods work beyond the 9 par-ticular 500-document collections described above, in this paper we instead use five different randomly sampled test collections for each of the Binary , Multi5 and Multi10 cases, making for a total of 15 new test collections in this paper. For diversity, we ensure that none of the five test collections (in each case) contain any documents used in the three col-lections of (Slonim et al., 2002) (for the same case).
We pre-process the documents of each test col-et al., 2007b). The 15 test collections are then converted to feature matrices X  X erm-document fre-quency matrices for sIB, and discounted tf/idf ma-trices (according to the Okapi formula (Gatford et al., 1995)) for IDTs X  X ith each row of a matrix rep-resenting one document in that test collection. 4.1 Selecting  X  with  X  X trapping X  In order to pick the value of the parameter  X  for each of the sIB and IDT test experiments, we use  X  X trapping X  (Eisner and Karakos, 2005), which, as we mentioned earlier, is a technique for training a meta-classifier that chooses among possible cluster-ings. The training is based on unrelated instances of the same clustering task. The final choice of cluster-ing is still unsupervised, since no labels (or ground truth, in general) for the instance of interest are used.
Here, our collection of possible clusterings for each test collection is generated by varying the  X  pa-rameter. Strapping does not care, however, how the collection was generated. (In the original strapping paper, for example, Eisner and Karakos (2005) gen-erated their collection by bootstrapping word-sense classifiers from 200 different seeds.)
Here is how we choose a particular unsupervised  X  -clustering to output for a given test collection:  X  We cluster the test collection (e.g., the first Multi5 collection) with various values of  X  , namely  X  = 0 . 1 , 0 . 2 , . . . , 1 . 0 .  X  We compute a feature vector from each of the clusterings. Note that the features are computed from only the clusterings and the data points, since no labels are available.  X  Based on the feature vectors, we predict the  X  X oodness X  of each clustering, and return the  X  X est X  one.

How do we predict the  X  X oodness X  of a cluster-ing? By first learning to distinguish good cluster-ings from bad ones, by using unrelated instances of the task on which we know the true labels:  X  We cluster some unrelated datasets with various values of  X  , just as we will do in the test condi-tion.  X  We evaluate each of the resulting clusterings us- X  We train a  X  X eta-classifier X  that predicts the true rank (or accuracy) of each clustering based on the feature vector of the clustering. Specifically, for each task (Binary, Multi5, and Multi10) and each clustering method (sIB and IDT), a meta-classifier is learned thus:  X  We obtain 10 clusterings (  X  = 0 . 1 , 0 . 2 , . . . , 1 . 0 for each of 5 unrelated task instances (datasets whose construction is described below).  X  For each of these 50 clusterings, we compute the following 14 features: (i) One minus the aver-age cosine of the angle (in tf/idf space) between each example and the centroid of the cluster to which it belongs. (ii) The average R  X  enyi diver-gence, computed for parameters 1 . 0 , 0 . 5 , 0 . 1 , be-tween the empirical distribution of each example and the centroid of the cluster to which it belongs. (iii) We create 10 more features, one per  X  . For the  X  used in this clustering, the feature value is equal to e  X  0 . 1  X  r , where  X  r is the average rank of the clustering (i.e., the average of the 4 ranks result-ing from sorting all 10 clusterings (per training example) according to one of the 4 features in (i) and (ii)). For all other  X   X  X , the feature is set to zero. Thus, only  X   X  X  which yield relatively good rankings can have non-zero features in the model.  X  We normalize each group of 10 feature vectors, translating and scaling each of the 14 dimensions to make it range from 0 to 1. (We will do the same at test time.)  X  We train ranking SVMs (Joachims, 2002), with a Gaussian kernel, to learn how to rank these 50 clusterings given their respective normalized fea-ture vectors. The values of c,  X  (which control regularization and the Gaussian kernel) were op-timized through leave-one-out cross validation in order to maximize the average accuracy of the top-ranked clustering, over the 5 training sets.
Once a local maximum of the average accuracy was obtained, further tuning of c,  X  to maximize the Spearman rank correlation between the pre-dicted and true ranks was performed.

A model trained in this way knows something about the task, and may work well for many new, unseen instances of the task. However, we pre-sume that it will work best on a given test instance if trained on similar instances. The ideal would be to match the test collection in every aspect: (i) the number of training labels should be equal to the number of desired clusters of the test collection; (ii) the training clusters should be topically similar to the desired test clusters.

In our scenario, we enjoy the luxury of plenty of labeled data that can be used to create similar instances. Thus, given a test collection A to be clustered into L clusters, we create similar train-ing sets by identifying the L training newsgroups whose centroids in tf/idf space (using the Okapi for-mula mentioned earlier) have the smallest angle to the centroid of A . 4 (Of course, we exclude news-groups that appear in A .) We then form a supervised 500-document training set A 0 by randomly choosing 500 /L documents from each of these L newsgroups; we do this 5 times to obtain 5 supervised training sets.

Table 1 shows averaged classification errors re-sulting from strapping (  X  X tr X  rows) for the Jensen-R  X  enyi divergence and Csisz  X  ar X  X  mutual information, used within IDTs and sIB, respectively. (We also tried the reverse, using Jensen-R  X  enyi in sIB and Csisz  X  ar X  X  in IDTs, but the results were uniformly worse in the former case and no better in the latter case.) The  X  X I X  rows show the classification errors of the untuned algorithms (  X  = 1 ), which, in almost all cases, are worse than the tuned ones. 4.2 Tuning  X  on Statistically Similar Examples We now show that strapping outperforms a simpler and more obvious method for cross-instance tun-ing. To cluster a test collection A , we could simply tune the clustering algorithm by choosing the  X  that works best on a related task instance.
 We again take care to construct a training instance A fact, we take even greater care this time. Given A , Method IDTs sIB Table 1: Average classification errors for IDTs and sIB, using strapping (  X  X tr X  rows) and regularized least squares (  X  X ls X  rows) to pick  X  in Jensen-R  X  enyi divergence and Csisz  X  ar X  X  mutual information. Rows  X  X I X  show the errors resulting from the untuned al-gorithms, which use the regular mutual information objective (  X  = 1 ). Results which are better than the corresponding  X  X I X  results are shown in bold . we identify the same set of L closest newsgroups as described above. This time, however, we carefully select |A| /L documents from each newsgroup rather than randomly choosing 500 /L of them. Specifi-cally, for each test example (document) X  X  X  , we add a similar training example X 0 into A 0 , chosen as follows:
We associate each test example X to the most similar of the L training newsgroups, under a con-straint that only |A| /L training examples may be as-sociated to each newsgroup. To do this, we iterate through all pairs ( X, G ) where X is a test example and G is a training newsgroup, in increasing order by the angle between X and G . If X is not yet asso-ciated and G is not yet  X  X ull, X  then we associate X with G , and choose X 0 to be the document in G with the smallest angle to X .

We cluster A 0 10 times, for  X  = 0 . 1 , . . . , 1 . 0 and we collect supervised error results E (  X  ) ,  X   X   X   X  = argmin sult in overfitting) we use regularized least-squares (RLS) (Hastie et al., 2001), where we try to approx-imate the probability that an  X  is the best . The esti-mated probabilities are given by where I is the unit matrix, p is the training prob-ability of the best  X  (i.e., it is 1 at the position of  X   X  and zero elsewhere), and K is the kernel matrix, where K ( i, j ) = exp(  X  ( E (  X  the value of the kernel which expresses the  X  X im-ilarity X  between two clusterings of the same train-ing dataset, in terms of their errors. The parame-ters  X ,  X  are set to 0 . 5 , 0 . 1 , respectively, after per-forming a (local) maximization of the Spearman cor-relation between training accuracies and predicted probabilities  X  p , for all 15 training instances. Af-ter performing a linear normalization of  X  p to make it a probability vector, the average predicted value of  X  , i.e.,  X   X  = P 10 { 0 . 1 , . . . , 1 . 0 } ) is used to cluster A .
Table 1 shows the average classification error re-sults using RLS (  X  X ls X  rows). We can see that, on average over the 15 test instances, the error rate of the tuned IDTs and sIB algorithms is lower than that of the untuned algorithms, so cross-instance tuning was effective. On the other hand, the errors are generally higher than that of the strapping method, which examines the results of using different  X  val-ues on A . We have considered the problem of cross-instance tuning of two unsupervised document clustering al-gorithms, through the introduction of a degree of freedom into their mutual information objective. This degree of freedom is tuned using labeled doc-ument collections (which are unrelated to the test collections); we explored two approaches for per-forming the tuning: (i) through a judicious sampling of training data, to match the marginal statistics of the test data, and (ii) via  X  X trapping X , which trains a meta-classifier to distinguish between good and bad clusterings. Our unsupervised categorization exper-iments from the  X 20 Newsgroups X  corpus indicate that, although both approaches improve the base-line algorithms,  X  X trapping X  is clearly a better choice for knowledge transfer between unrelated task in-stances.

