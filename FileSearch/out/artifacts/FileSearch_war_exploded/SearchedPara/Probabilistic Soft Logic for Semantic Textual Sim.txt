 When will people say that two sentences are sim-ilar? This question is at the heart of the Semantic Textual Similarity task (STS)(Agirre et al., 2012). Certainly, if two sentences contain many of the same words, or many similar words, that is a good indication of sentence similarity. But that can be misleading. A better characterization would be to say that if two sentences use the same or similar words in the same or similar relations , then those ingly, this characterization echoes the principle of compositionality, which states that the meaning of a phrase is uniquely determined by the meaning of its parts and the rules that connect those parts.
Beltagy et al. (2013) proposed a hybrid ap-proach to sentence similarity: They use a very deep representation of sentence meaning, ex-pressed in first-order logic, to capture sentence structure, but combine it with distributional sim-ilarity ratings at the word and phrase level. Sen-tence similarity is then modelled as mutual entail-ment in a probabilistic logic. This approach is in-teresting in that it uses a very deep and precise representation of meaning, which can then be re-laxed in a controlled fashion using distributional similarity. But the approach faces large hurdles in practice, stemming from efficiency issues with the Markov Logic Networks (MLN) (Richardson and Domingos, 2006) that they use for performing probabilistic logical inference.

In this paper, we use the same combined logic-based and distributional framework as Beltagy et al., (2013) but replace Markov Logic Networks with Probabilistic Soft Logic (PSL) (Kimmig et al., 2012; Bach et al., 2013). PSL is a proba-bilistic logic framework designed to have efficient inference. Inference in MLNs is theoretically in-tractable in the general case, and existing approxi-mate inference algorithms are computationally ex-pensive and sometimes inaccurate. Consequently, the MLN approach of Beltagy et al. (2013) was unable to scale to long sentences and was only tested on the relatively short sentences in the Mi-crosoft video description corpus used for STS (Agirre et al., 2012). On the other hand, inference in PSL reduces to a linear programming problem, which is theoretically and practically much more efficient. Empirical results on a range of prob-lems have confirmed that inference in PSL is much more efficient than in MLNs, and frequently more accurate (Kimmig et al., 2012; Bach et al., 2013).
We show how to use PSL for STS, and describe changes to the PSL framework that make it more effective for STS. For evaluation, we test on three STS datasets, and compare our PSL system with the MLN approach of Beltagy et al., (2013) and with distributional-only baselines. Experimental results demonstrate that, overall, PSL models hu-man similarity judgements more accurately than these alternative approaches, and is significantly faster than MLNs.

The rest of the paper is organized as follows: section 2 presents relevant background material, section 3 explains how we adapted PSL for the STS task, section 4 presents the evaluation, and sections 5 and 6 discuss future work and conclu-sions, respectively. 2.1 Logical Semantics Logic-based representations of meaning have a long tradition (Montague, 1970; Kamp and Reyle, 1993). They handle many complex semantic phe-nomena such as relational propositions, logical operators, and quantifiers; however, their binary nature prevents them from capturing the  X  X raded X  aspects of meaning in language. Also, it is difficult to construct formal ontologies of properties and re-lations that have broad coverage, and semantically parsing sentences into logical expressions utilizing such an ontology is very difficult. Consequently, current semantic parsers are mostly restricted to quite limited domains, such as querying a specific database (Kwiatkowski et al., 2013; Berant et al., 2013). In contrast, our system is not limited to any formal ontology and can use a wide-coverage tool for semantic analysis, as discussed below. 2.2 Distributional Semantics Distributional models (Turney and Pantel, 2010), on the other hand, use statistics on contextual data from large corpora to predict semantic sim-ilarity of words and phrases (Landauer and Du-mais, 1997; Mitchell and Lapata, 2010). They are relatively easier to build than logical representa-tions, automatically acquire knowledge from  X  X ig data, X  and capture the  X  X raded X  nature of linguis-tic meaning, but do not adequately capture logical structure (Grefenstette, 2013).

Distributional models are motivated by the ob-servation that semantically similar words occur in similar contexts, so words can be represented as vectors in high dimensional spaces generated from the contexts in which they occur (Landauer and Dumais, 1997; Lund and Burgess, 1996). Such models have also been extended to compute vec-tor representations for larger phrases, e.g. by adding the vectors for the individual words (Lan-dauer and Dumais, 1997) or by a component-wise product of word vectors (Mitchell and Lapata, 2008; Mitchell and Lapata, 2010), or more com-plex methods that compute phrase vectors from word vectors and tensors (Baroni and Zamparelli, 2010; Grefenstette and Sadrzadeh, 2011). We use vector addition (Landauer and Dumais, 1997), and component-wise product (Mitchell and Lapata, 2008) as baselines for STS. Vector addition was previously found to be the best performing sim-ple distributional method for STS (Beltagy et al., 2013). 2.3 Markov Logic Networks Markov Logic Networks (MLN) (Richardson and Domingos, 2006) are a framework for probabilis-tic logic that employ weighted formulas in first-order logic to compactly encode complex undi-rected probabilistic graphical models (i.e., Markov networks). Weighting the rules is a way of soft-ening them compared to hard logical constraints and thereby allowing situations in which not all clauses are satisfied. MLNs define a probability distribution over possible worlds, where a world X  X  probability increases exponentially with the to-tal weight of the logical clauses that it satisfies. A variety of inference methods for MLNs have been developed, however, developing a scalable, general-purpose, accurate inference method for complex MLNs is an open problem. Beltagy et al. (2013) use MLNs to represent the meaning of natural language sentences and judge textual en-tailment and semantic similarity, but they were un-able to scale the approach beyond short sentences due to the complexity of MLN inference. 2.4 Probabilistic Soft Logic Probabilistic Soft Logic (PSL) is a recently pro-posed alternative framework for probabilistic logic (Kimmig et al., 2012; Bach et al., 2013). It uses logical representations to compactly define large graphical models with continuous variables, and includes methods for performing efficient proba-bilistic inference for the resulting models. A key distinguishing feature of PSL is that ground atoms have soft, continuous truth values in the interval [0, 1] rather than binary truth values as used in MLNs and most other probabilistic logics. Given a set of weighted logical formulas, PSL builds a graphical model defining a probability distribution over the continuous space of values of the random variables in the model.
A PSL model is defined using a set of weighted if-then rules in first-order logic, as in the following example:  X  x,y,z. friend ( x,y )  X  votesFor ( y,z )  X   X  x,y,z. spouse ( x,y )  X  votesFor ( y,z )  X 
In our notation, we use lower case letters like x,y,z to represent variables and upper case let-ters for constants. The first rule states that a per-son is likely to vote for the same person as his/her friend. The second rule encodes the same regular-ity for a person X  X  spouse. The weights encode the knowledge that a spouse X  X  influence is greater than a friend X  X  in this regard.
 In addition, PSL includes similarity functions . Similarity functions take two strings or two sets as input and return a truth value in the interval [0, 1] denoting the similarity of the inputs. For example, in our application, we generate inference rules that incorporate the similarity of two predicates. This can be represented in PSL as:  X  x. similarity ( X  predicate 1 X  ,  X  predicate 2 X )  X 
As mentioned above, each ground atom, a , has a soft truth value in the interval [0, 1], which is denoted by I ( a ) . To compute soft truth values for logical formulas, Lukasiewicz X  X  re-laxation of conjunctions (  X  ) , disjunctions (  X  ) and negations (  X  ) are used: Then, a given rule r  X  r body  X  r head , is said to be satisfied (i.e. I ( r ) = 1 ) iff I ( r body )  X  I ( r head Otherwise, PSL defines a distance to satisfaction d ( r ) which captures how far a rule r is from being satisfied: d ( r ) = max { 0 ,I ( r body )  X  I ( r head ) } . For example, assume we have the set of evidence: I ( spouse ( B,A )) = 1 , I ( votesFor ( A,P )) = 0 . 9 , I ( votesFor ( B,P )) = 0 . 3 , and that r is the resulting ground instance of rule (2). Then I ( spouse ( B,A )  X  votesFor ( A,P )) = max { 0 , 1 + 0 . 9  X  1 } = 0 . 9 , and d ( r ) = max { 0 , 0 . 9  X  0 . 3 } = 0 . 6 .

Using distance to satisfaction , PSL defines a probability distribution over all possible interpre-tations I of all ground atoms. The pdf is defined as follows: where Z is the normalization constant,  X  r is the weight of rule r , R is the set of all rules, and p  X  { 1 , 2 } provides two different loss functions. For our application, we always use p = 1
PSL is primarily designed to support MPE in-ference (Most Probable Explanation). MPE infer-ence is the task of finding the overall interpretation with the maximum probability given a set of evi-dence. Intuitively, the interpretation with the high-est probability is the interpretation with the lowest distance to satisfaction. In other words, it is the interpretation that tries to satisfy all rules as much as possible. Formally, from equation 3, the most probable interpretation, is the one that minimizes P that all d ( r ) are linear equations, then minimizing the sum requires solving a linear program, which, compared to inference in other probabilistic logics such as MLNs, can be done relatively efficiently using well-established techniques. In case p = 2 , MPE inference can be shown to be a second-order cone program (SOCP) (Kimmig et al., 2012). 2.5 Semantic Textual Similarity Semantic Textual Similarity (STS) is the task of judging the similarity of a pair of sentences on a scale from 0 to 5, and was recently introduced as a SemEval task (Agirre et al., 2012). Gold standard scores are averaged over multiple hu-man annotations and systems are evaluated using the Pearson correlation between a system X  X  out-put and gold standard scores. The best perform-ing system in 2012 X  X  competition was by B  X  ar et al. (2012), a complex ensemble system that inte-grates many techniques including string similarity, n-gram overlap, WordNet similarity, vector space similarity and MT evaluation metrics. Two of the datasets we use for evaluation are from the 2012 competition. We did not utilize the new datasets added in the 2013 competition since they did not contain naturally-occurring, full sentences, which is the focus of our work. 2.6 Combining logical and distributional There are a few recent attempts to combine log-ical and distributional representations in order to obtain the advantages of both. Lewis and Steed-man (2013) use distributional information to deter-mine word senses, but still produce a strictly log-ical semantic representation that does not address the  X  X raded X  nature of linguistic meaning that is important to measuring semantic similarity.

Garrette et al. (2011) introduced a framework for combining logic and distributional models us-ing probabilistic logic. Distributional similarity between pairs of words is converted into weighted inference rules that are added to the logical repre-sentation, and Markov Logic Networks are used to perform probabilistic logical inference.

Beltagy et al. (2013) extended this framework by generating distributional inference rules from phrase similarity and tailoring the system to the STS task. STS is treated as computing the prob-ability of two textual entailments T | = H and H | = T , where T and H are the two sentences whose similarity is being judged. These two en-tailment probabilities are averaged to produce a measure of similarity. The MLN constructed to determine the probability of a given entailment includes the logical forms for both T and H as well as soft inference rules that are constructed from distributional information. Given a similar-ity score for all pairs of sentences in the dataset, a regressor is trained on the training set to map the system X  X  output to the gold standard scores. The trained regressor is applied to the scores in the test set before calculating Pearson correlation. The regression algorithm used is Additive Regres-sion (Friedman, 2002).

To determine an entailment probability, first, the two sentences are mapped to logical repre-sentations using Boxer (Bos, 2008), a tool for wide-coverage semantic analysis that maps a CCG (Combinatory Categorial Grammar) parse into a lexically-based logical form. Boxer uses C&amp;C for CCG parsing (Clark and Curran, 2004).

Distributional semantic knowledge is then en-coded as weighted inference rules in the MLN. A rule X  X  weight ( w ) is a function of the cosine similarity ( sim ) between its antecedent and con-sequent. Rules are generated on the fly for each T and H . Let t and h be the lists of all words and phrases in T and H respectively. For all pairs ( a,b ) , where a  X  t,b  X  h , it generates an inference rule: a  X  b | w , where w = f ( sim (  X  X  X  a , phrases. Phrases are defined in terms of Boxer X  X  output. A phrase is more than one unary atom sharing the same variable like  X  X  little kid X  which in logic is little ( K )  X  kid ( K ) . A phrase also can be two unary atoms connected by a relation like  X  X  man is driving X  which in logic is man ( M )  X  agent ( D,M )  X  drive ( D ) . The similarity func-tion sim takes two vectors as input. Phrasal vec-tors are constructed using Vector Addition (Lan-dauer and Dumais, 1997). The set of generated inference rules can be regarded as the knowledge base KB .

Beltagy et al. (2013) found that the logical con-junction in H is very restrictive for the STS task, so they relaxed the conjunction by using an aver-age evidence combiner (Natarajan et al., 2010). The average combiner results in computationally complex inference and only works for short sen-tences. In case inference breaks or times-out, they back off to a simpler combiner that leads to much faster inference but loses most of the structure of the sentence and is therefore less accurate.
Given T , KB and H from the previous steps, MLN inference is then used to compute p ( H | T,KB ) , which is then used as a measure of the degree to which T entails H . For several reasons, we believe PSL is a more ap-propriate probabilistic logic for STS than MLNs. First, it is explicitly designed to support efficient inference, therefore it scales better to longer sen-tences with more complex logical forms. Sec-ond, it was also specifically designed for com-puting similarity between complex structured ob-jects rather than determining probabilistic logical entailment. In fact, the initial version of PSL (Broecheler et al., 2010) was called Probabilis-tic Similarity Logic , based on its use of similar-ity functions . This initial version was shown to be very effective for measuring the similarity of noisy database records and performing record linkage (i.e. identifying database entries referring to the same entity, such as bibliographic citations refer-ring to the same paper). Therefore, we have devel-oped an approach that follows that of Beltagy et al. (2013), but replaces Markov Logic with PSL.
This section explains how we formulate the STS task as a PSL program. PSL does not work very well  X  X ut of the box X  for STS, mainly because Lukasiewicz X  X  equation for the conjunction is very restrictive. Therefore, we use a different interpre-tation for conjunction that uses averaging, which requires corresponding changes to the optimiza-tion problem and the grounding technique. 3.1 Representation Given the logical forms for a pair of sentences, a text T and a hypothesis H , and given a set of weighted rules derived from the distributional se-mantics (as explained in section 2.6) composing the knowledge base KB , we build a PSL model that supports determining the truth value of H in the most probable interpretation (i.e. MPE) given T and KB .

Consider the pair of sentences is  X  X  man is driv-ing X , and  X  X  guy is walking X . Parsing into logical form gives: T :  X  x,y. man ( x )  X  agent ( y,x )  X  drive ( y ) H :  X  x,y. guy ( x )  X  agent ( y,x )  X  walk ( y ) The PSL program is constructed as follows: T : The text is represented in the evidence set. For KB : The knowledge base is a set of lexical and H : The hypothesis is represented as H  X  Priors: A low prior is given to all predicates. This For each STS pair of sentences S 1 , S 2 , we run PSL twice, once where T = S 1 , H = S 2 and another where T = S 2 , H = S 1 , and output the two scores. To produce a final similarity score, we train a regressor to learn the mapping between the two PSL scores and the overall similarity score. As in Beltagy et al., (2013) we use Additive Re-gression (Friedman, 2002). 3.2 Changing Conjunction As mentioned above, Lukasiewicz X  X  formula for conjunction is very restrictive and does not work well for STS. For example, for T:  X  X  man is driv-ing X  and H:  X  X  man is driving a car X , if we use the standard PSL formula for conjunction, the output value is zero because there is no evidence for a car and max (0 ,X + 0  X  1) = 0 for any truth value 0  X  X  X  1 . However, humans find these sen-tences to be quite similar.

Therefore, we introduce a new averaging inter-pretation of conjunction that we use for the hy-pothesis H . The truth value for a conjunction is defined as I ( p 1  X  ....  X  p n ) = 1 This averaging function is linear, and the result is a valid truth value in the interval [0, 1], therefore this change is easily incorporated into PSL with-out changing the complexity of inference which remains a linear-programming problem.

It would perhaps be even better to use a weighted average, where weights for different components are learned from a supervised train-ing set. This is an important direction for future work. 3.3 Grounding Process Grounding is the process of instantiating the vari-ables in the quantified rules with concrete con-stants in order to construct the nodes and links in the final graphical model. In principle, ground-ing requires instantiating each rule in all possible ways, substituting every possible constant for each variable in the rule. However, this is a combinato-rial process that can easily result in an explosion in the size of the final network. Therefore, PSL em-ploys a  X  X azy X  approach to grounding that avoids the construction of irrelevant groundings. If there is no evidence for one of the antecedents in a par-ticular grounding of a rule, then the normal PSL formula for conjunction guarantees that the rule is Algorithm 1 Heuristic Grounding Input: r body = a 1  X  ....  X  a n : antecedent of a rule Input: V : set of variables used in r body Input: Ant ( v i ) : subset of antecedents a j con-Input: Const ( v i ) : list of possible constants of Input: Gnd ( a i ) : set of ground atoms of a i . Input: GndConst ( a,g,v ) : takes an atom a , Input: gnd limit : limit on the number of 1: for all v i  X  V do 2: for all C  X  Const ( v i ) do 3: score ( C ) = 4: end for 5: sort Const ( v i ) on scores, descending 6: end for 7: return For all v i  X  V , take the Cartesian-trivially satisfied ( I ( r ) = 1 ) since the truth value of the antecedent is zero. Therefore, its distance to satisfaction is also zero, and it can be omitted from the ground network without impacting the result of MPE inference.

However, this technique does not work once we switch to using averaging to interpret conjunc-tions. For example, given the rule  X  x. p ( x )  X  q ( x )  X  t () and only one piece of evidence p ( C ) there are no relevant groundings because there is no evidence for q ( C ) , and therefore, for normal PSL, I ( p ( C )  X  q ( C )) = 0 which does not affect I ( t ()) . However, when using averaging with the same evidence, we need to generate the grounding p ( C )  X  q ( C ) because I ( p ( C )  X  q ( C )) = 0 . 5 which does affect I ( t ()) .

One way to solve this problem is to eliminate lazy grounding and generate all possible ground-ings. However, this produces an intractably large network. Therefore, we developed a heuristic ap-proximate grounding technique that generates a subset of the most impactful groundings.

Pseudocode for this heuristic approach is shown in algorithm 1. Its goal is to find constants that participate in ground propositions with high truth value and preferentially use them to construct a limited number of groundings of each rule.

The algorithm takes the antecedents of a rule employing averaging conjunction as input. It also takes the grounding limit which is a threshold on the number of groundings to be returned. The al-gorithm uses several subroutines, they are:  X  Ant ( v i ) : given a variable v i , it returns the set  X  Const ( v i ) : given a variable v i , it returns the  X  Gnd ( a i ) : given an atom a i , it returns the set  X  GndConst ( a,g,v ) : given an atom a and
Lines 1-6 loop over all variables in the rule. For each variable, lines 2-5 construct a list of constants for that variable and sort it based on a heuristic score. In line 3, each constant is assigned a score that indicates the importance of this constant in terms of its impact on the truth value of the overall grounding. A constant X  X  score is the sum, over all antedents that contain the variable in question, of the maximum truth value of any grounding of that antecedent that contains that constant.

Pushing constants with high scores to the top of each variable X  X  list will tend to make the over-all truth value of the top groundings high. Line 7 computes a subset of the Cartesian product of the sorted lists of constants, selecting constants in ranked order and limiting the number of results to the grounding limit.

One point that needs to be clarified about this approach is how it relies on the truth values of ground atoms when the goal of inference is to ac-tually find these values. PSL X  X  inference is ac-tually an iterative process where in each itera-tion a grounding phase is followed by an opti-mization phase (solving the linear program). This loop repeats until convergence, i.e. until the truth values stop changing. The truth values used in each grounding phase come from the previous op-timization phase. The first grounding phase as-sumes only the propositions in the evidence pro-vided have non-zero truth values. This section evaluates the performance of PSL on the STS task. 4.1 Datasets We evaluate our system on three STS datasets.  X  msr-vid : Microsoft Video Paraphrase Cor- X  msr-par : Microsoft Paraphrase Corpus from  X  SICK : Sentences Involving Compositional 4.2 Systems Compared We compare our PSL system with several others. In all cases, we use the distributional word vec-tors employed by Beltagy et al. (2013) based on context windows from Gigaword.  X  vec-add : Vector Addition (Landauer and  X  vec-mul : Component-wise Vector Multipli- X  MLN : The system of Beltagy et al. (2013),  X  PSL : Our proposed PSL system for combin- X  PSL-no-DIR : Our PSL system without dis- X  PSL+vec-add : PSL ensembled with vec- X  PSL+MLN : PSL ensembled with MLN in 4.3 Experiments Systems are evaluated on two metrics, Pearson correlation and average CPU time per pair of sen-tences.  X  Pearson correlation: The Pearson correlation  X  CPU time: This metric only applies to MLN vec-add 0.78 0.24 0.65 vec-mul 0.76 0.12 0.62 MLN 0.63 0.16 0.47 PSL-no-DIR 0.74 0.46 0.68 PSL 0.79 0.53 0.70 PSL+vec-add 0.83 0.49 0.71 PSL+MLN 0.79 0.51 0.70
Best Score (B  X  ar et al., 2012) Table 2: Average CPU time per STS pair, and number of timed-out pairs in MLN with a 10 minute time limit. PSL X  X  grounding limit is set to 10,000 groundings.

We also evaluated the effect of changing the grounding limit on both Pearson correlation and CPU time for the msr-par dataset. Most of the sentences in msr-par are long, which results is large number of groundings, and limiting the num-ber of groundings has a visible effect on the over-all performance. In the other two datasets, the sentences are fairly short, and the full number of groundings is not large; therefore, changing the grounding limit does not significantly affect the re-sults. 4.4 Results and Discussion Table 1 shows the results for Pearson correlation. PSL out-performs the purely distributional base-lines ( vec-add and vec-mul ) because PSL is able to combine the information available to vec-add and vec-mul in a better way that takes sentence structure into account. PSL also outperforms the unaided probabilistic-logic baseline that does not use distributional information ( PSL-no-DIR ). PSL-no-DIR works fairly well because there is significant overlap in the exact words and struc-ture of the paired sentences in the test data, and PSL combines the evidence from these similari-ties effectively. In addition, PSL always does sig-nificantly better than MLN , because of the large Figure 1: Effect of PSL  X  X  grounding limit on the correlation score for the msr-par dataset number of timeouts, and because the conjunction-averaging in PSL is combining evidence bet-ter than MLN X  X  average-combiner, whose perfor-mance is sensitive to various parameters. These results further support the claim that using prob-abilistic logic to integrate logical and distribu-tional information is a promising approach to natural-language semantics. More specifically, they strongly indicate that PSL is a more effective probabilistic logic for judging semantic similarity than MLNs.

Like for MLNs (Beltagy et al., 2013), en-sembling PSL with vector addition improved the scores a bit, except for msr-par where vec-add  X  X  performance is particularly low. However, this en-semble still does not beat the state of the art (B  X  ar et al., 2012) which is a large ensemble of many dif-ferent systems. It would be informative to add our system to their ensemble to see if it could improve it even further.
 Table 2 shows the CPU time for PSL and MLN . The results clearly demonstrate that PSL is an or-der of magnitude faster than MLN .

Figures 1 and 2 show the effect of changing the grounding limit on Pearson correlation and CPU time. As expected, as the grounding limit is in-creased, accuracy improves but CPU time also increases. However, note that the difference in scores between the smallest and largest grounding limit tested is not large, suggesting that the heuris-tic approach to limiting grounding is quite effec-tive. As mentioned in Section 3.2, it would be good to use a weighted average to compute the truth Figure 2: Effect of PSL  X  X  grounding limit on CPU time for the msr-par dataset values for conjunctions, weighting some predi-cates more than others rather than treating them all equally. Appropriate weights for different com-ponents could be learned from training data. For example, such an approach could learn that the type of an object determined by a noun should be weighted more than a property specified by an ad-jective. As a result,  X  X lack dog X  would be appro-priately judged more similar to  X  X hite dog X  than to  X  X lack cat. X 
One of the advantages of using a probabilis-tic logic is that additional sources of knowledge can easily be incorporated by adding additional soft inference rules. To complement the soft in-ference rules capturing distributional lexical and phrasal similarities, PSL rules could be added that encode explicit paraphrase rules, such as those mined from monolingual text (Berant et al., 2011) or multi-lingual parallel text (Ganitkevitch et al., 2013).

This paper has focused on STS; however, as shown by Beltagy et al. (2013), probabilistic logic is also an effective approach to recognizing tex-tual entailment (RTE). By using the appropriate functions to combine truth values for various log-ical connectives, PSL could also be adapted for RTE. Although we have shown that PSL outper-forms MLNs on STS, we hypothesize that MLNs may still be a better approach for RTE. However, it would be good to experimentally confirm this in-tuition. In any case, the high computational com-plexity of MLN inference could mean that PSL is still a more practical choice for RTE. This paper has presented an approach that uses Probabilistic Soft Logic (PSL) to determine Se-mantic Textual Similarity (STS). The approach uses PSL to effectively combine logical seman-tic representations of sentences with soft infer-ence rules for lexical and phrasal similarities com-puted from distributional information. The ap-proach builds upon a previous method that uses Markov Logic (MLNs) for STS, but replaces the probabilistic logic with PSL in order to improve the efficiency and accuracy of probabilistic infer-ence. The PSL approach was experimentally eval-uated on three STS datasets and was shown to out-perform purely distributional baselines as well as the MLN approach. The PSL approach was also shown to be much more scalable and efficient than using MLNs This research was supported by the DARPA DEFT program under AFRL grant FA8750-13-2-0026. Any opinions, findings, and conclusions or recom-mendations expressed in this material are those of the author and do not necessarily reflect the view of DARPA, DoD or the US government. Some ex-periments were run on the Mastodon Cluster sup-ported by NSF Grant EIA-0303609.

