 The math word problem (MWP) (Mukherjee and Garain , 2008) is frequently chosen to study natural language understanding due to the following rea-sons: (1) Since the answer for the MWP cannot be extracted by simply performing keyword/pattern matching, MWP can clearly show the merit s of understanding and inference. (2) As MWP usually possesses less complicated syntax and requires less amount of domain knowledge , it can let the re-searcher focus on the task of understanding and reasoning. (3) The body part of MWP (which men-tions the given information for solving the problem) consists of only a few sentences. The understand-ing and reasoning procedure could be checked more efficiently. (4) The MWP solver h as its own standalone applications such as Computer Math Tutor and Helper for Math in Daily Life . 
Previous English MWP solvers can be classified into three categories : ( 1) Ru le-based approaches with logic inference ( Bobrow , 1964; Slagle , 1965) , which apply rules to get the answer ( via identify ing entities, quantities, operations, etc.) with a logic in-ference engine. (2) Rule -based approaches without logic inference ( Charniak , 1968 and 1969; Gelb , 1971; Ballard , 1979; Biermann and Ballard , 1980; Biermann et al., 1982; Fletcher , 1985; Dellarosa, 1986; Bakman , 2007; Liguda and Pfeiffer , 2012; Hosseini et al., 2014 ), which apply rules (usually defined as schemata) to get the answer without a logic inference engine. (3) Purely s tatistic -based approaches ( Kushman et al., 2014; Roy et al., 2015), which use statistical model s to identify enti-ties, quantities, operations, and get the answer without conducting language a nalysis or inference. 
The main problem of the rule -based approaches mentioned above is that the coverage rate problem is serious, as rules with wide coverage are difficult and expensive to construct. Also, it is awkward in resolving ambiguity problems . Be sides, most of them only handle addition and subtraction these two math operations. On the other hand, the main problem of those approaches without adopt ing log-ic inference is that they cannot share the common reasoning part among various problem type s. In contrast, the main problem s of those purely statis-tical approaches are that they are sensitive to irrel-evant information and that the performance deteri-orates significantly when they encounter compli-cated problems (Hosseini et al., 2014) , because the problem is solved without first understanding the text. Besides, they only handle algebra problems . 
A tag-based statistical English MWP solver is thus proposed to perform understanding and rea -soning, and avoid the problems mentioned above. The text of the MWP is first analyzed into its cor -responding syntactic tree and then annotated with resolved co -reference chains. Afterwards, it is converted into the logic form via a few mapping rules. The obtained logic form is further mapped into the corresponding domain dependent generic concepts (also expressed in logic form). Finally, the logic inference is performed on those logic statements to get the answer. Various statistical classifiers are applied when there are choices.

Since different question s could be a sked for the same given body text , we keep all syntactic rela-tions in the logic form, which are regarded as vari-ous tags for selecting the appropriate operands re-lated to the specified question. For example,  X  Fred picked 36 limes  X  will be converted into  X  quan ( q1 , #, lime )&amp; verb ( q1 , pick )&amp; nsubj ( q1 , Fred ) = 36  X  (where tags are connected with logic  X  &amp; X ), in which the quantity  X  36  X  is identified with a label  X  q1  X  and attached with its associate d tags . Th e proposed tag provide s the flexibility for annotating a given math quantity with associated syntactic and semantic information, which can be used to identi-fy the desired operand and filter out irrelevant quantities . It thus make s our MWP solver less sen-sitive to the irrelevant information and could pro-vide the answer more precisely . The block diagram of proposed math word prob-lem solver is shown in Figure 1. First, each sen-tence in an MWP is analyzed by the Lang uage An-aly zer (LA) module . The associated linguistic in-formation is then sent to the Solution Ty pe Classi-fier (STC) to find out the corresponding math op-eration. Afterwards, they are converted into the logic form by the Logic Form Converter (LFC) . The Inference Engine (IE) then obtain s the answer from those obtained logic expressions . Finally, the Explanation Generat or (EG) module will explain how the answer is obtained according to the given reasoning chain (Russel and Norvig, 2009) . Among those modules, t he STC is responsible for sug ges ting a way (i.e., a solution type such as addition, subtraction, multiplication, division, etc.) to solve the problem for each question of the MWP . The LFC extracts the related facts from the given linguistic information and then represents th ose facts as the first -order logic (FOL) predi-cates/functions ( Russel and Norvig, 2009). It also transforms each question into a F OL -like utility function according to the sug gested solution type. The IE then derives new f acts according to infer-ence rule s and old facts provided by the LFC . It is also responsible for providing utilities to perform math operations on related facts to get the answer. Detailed description of each module is given below. 2.1 Language Analysis The Sta nford CoreNLP suite (Manning et al., 2014) is adopted as our LA , which enables a list of anno-tators to generate the necessary linguistic infor-mation. The list includes: tokenization, sentence splitting, POS tagging, lemmatization, named enti-ty recognition , parsing and co-reference resolution. The generated linguistic representation mainly de-picts the syntactic relations between its words . To solve MWP s, it is crucial to know the relation s be-tween various entities . Dependency relation and co-reference resolu tion will provide such infor-mation . 2.2 Solution Type Identification The STC will select a math operation (that LFC should adopt to solve the problem ) based on the global i nformation across various input sentence s. Table 1 shows 12 different solution types currently provided. A SVM classifier with linear kernel functions ( Chang and Lin, 2011) is used, and it adopted various feature -sets: (1) verb category re-lated feature s, (2) various keyword indicators, and (3) different pattern -matching indicators for vari-ous specified aggregative patterns . 2.3 Logic Form Transformation A two -stage approach is adopted to transform the linguistic representation of a sentence in to its cor-responding logic form s. In the first stage, the FOL predicates are generated (via a few deterministic mapping rules) by traversing the input linguistic representation. For example, the sentence  X  Fred picks 36 limes  X  will be transformed into the fol-lowing FOL predicates separated by the logic AND operator  X  &amp; X : verb ( v1 , pick )&amp; nsubj ( v1 , Fred )&amp; dobj ( v1 , n1 )&amp; head ( n1 , lime )&amp; num mod ( n1 , 36 ) All the first arguments of the above FOL predi-cates (i.e., v1 and n1 ) are i dentifies, and the predi-cate-name s are the domain -independent syntactic dependency relation of the constituents in the de-pendency structure.

The domain-dependent logic form s are non -deterministic ally generated in the second stage, which are derived from crucial math facts associ-ated with quantities and relations between quanti-ties. The following FOL function is used to de-scribe the facts about quanti ties : For example,  X  quan ( q1 , #, lime )= 36  X  means  X  36 limes  X  (the second argument is the unit adopted, and ignored here) . Besides domain -dependent facts, some auxiliary domain-independent facts associat-ed with the math fact are also created in this stage to help the IE to f ind the solutions. For example,  X  verb ( q1 , pick )&amp; nsubj ( q1 , Fred ) X  is the associated auxiliary facts of  X  quan ( q1 , #, lime )= 36  X . Th ose auxiliary facts are our proposed tags to make the system less sensitive to the irrelevant information. They also provide the flexibility of han dling vari-ous kinds of possible questions. 
The questions in the MWP will be transformed into FOL -like utility functions provided by the IE according to the suggested solution type. Take the question  X  How many limes were picked in total ?  X  as an example. The STC will assign the  X  Sum  X  op-eration type to it. Based on that , the LFC will gen-erate the FOL function  X  Sum ( quan ( ?q , #, limes ), verb ( ?q , pick ) X  to search all quantities that are as-sociated with object  X  lime  X  and also attached with the verb tag  X  pick  X . 2.4 Logic Inference Th e IE is used to find the solution of an MWP . It is responsible for providing utilities to select desired facts and then obtain the answer by taking math operations on those selected facts. In addition, it is also responsible for using inference rules to derive new facts from th ose facts which are dir ectly de-rived from the description of the MWP . Consider the example shown in Figure 2 , the IE will first se-lect all qualified quantities which match  X  quan ( ?q , #, lime ) X  and with a  X  pick  X  verb tag , and then per-form a  X  Sum  X  operation on them . T he irrelevant quantity  X  quan ( q4 , #, pear ) X  in that example is thus pruned out as its verb tag is  X  drop  X , not  X  pick  X . The answer is then obtai ned by summing those quantities q1 , q2 and q3 . 2.5 Explanation Generation Based on the reasoning chain generated from the IE (an example is shown in Figure 3) , a math oper-ation oriented approach is adopt ed to explain how the answer is obtained (Huang et al., 2015). A spe-cific template is used to generate the explanation text for each kind of operation . Consider the ex-ample given in Figure 2, the template for  X  Sum  X  operation would be  X  T otally verb Child_1 + Child_2 + Child_3 + ...+ Child_n = Parent .  X . Ac-cording to that template and the reasoning chain shown in Figure 3, T he EG will generate the ex-planation text  X  Totally pick 36 limes + 32 limes + 35 limes = 103 limes  X , which explain s that the ob-tain ed answer is a summation of  X  36 limes  X ,  X  32 limes  X  and  X  35 limes  X . The MWP solver comprises a web user interface and a processing server . The web interface is used to input the problem and display the processing outputs (from each module) of the submitted MWP . The server is responsible to process the submitted problem to get the ans wer . 
The user can use the web interface (Fig ure 4) to submit various MWP s. After an MWP is submi tted , various processing modules will be invoked in a pipeline d manner (shown in Fig ure 1) to solve the given problem . Once the process is fi nished, the user can browse the outputs generated from each module: (1) Parse Tree s, Dependency and Co -Reference chains , which are from the language an-aly zer . (2) Corresponding linguistic representations, which are converted from the above language analysis result . (3) Suggested solution type , which identifies the desired math operation that the LFC should adopt . (4) Obtained logical forms , which are transformed from the linguistic representation. (5) Generated r easoning chains and explanation text , which explains how the problem is solved.
An online demo can be found at: http://nlul.iis.sinica.edu.tw/Engl ishMathSolver/mathDemo.py . The experiment s are performed on the datasets MA1 , MA 2 and IXL provided by Hosseini et al. (2014) , which are the first publically available da-tasets that can be used to compare various systems. The datasets include 395 problems and 1,483 sen-tences in total. MA1 covers sim ple MWP s on ad-dition and subtr action for third, fourth, and fifth graders. Problems i n MA2 includes more irrele-vant information com pared to the other two da-tasets, and IXL includes mor e information gaps (Hosseini et al., 2014). The performance of our system is compared with ARIS (Hosseini et al., 2014) which is a rule -based system that changes the entity attribute according to the schema. The result is also compared with KAZB (Kushman et al., 2014) , which is a purely statistical approach tha t aligns the text with various pre -extracted equation templates . We follow the same evaluation setting. Table 2 shows that our system significant-ly outperforms them in overall performance . A tag -based statistical framework is proposed to perform understanding and reasoning for solving MWP s. The adopted tag can help identify desired operands and filter out irrelevant quantities . Many rule -based approaches only handle addition and subtraction math operations , but we can solve much more problems types, such as Multiplication, Division, Comparison, Algebra , etc.

