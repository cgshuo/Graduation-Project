 Web services are a new dominant paradigm for distributed computing. A typical web service architecture con sists of three entities: ser vice providers who produce web services and publish the service adver tisement to a registry; a registry which is a public repository providing publication and discovery services; and service requesters who query the registry for de sired services. In the architecture, the service registry is crucial to the ultimate utility of web services and must pro-vide scalable, robust and effective discovery mechanisms. However, the current registry specifications have following limitations:  X  The current web services registry standard [1] is originally working with UBR  X  The growth in the number of service registries brings new challenge for  X  The current searching mechanism pertaining with UDDI [1] only supports In this paper, we will develop an infrastructure for web service publication and discovery which addresses the above limitations. In the infrastructure, registries are organized based on specific domains in which each registry is mapped to one or a group of domains. Web services publication or discovery will be automat-ically routed to domain-related registries based on their semantic information extracted from web services description or query. The main contributions of this work are summarized as follows:  X  Proposing an approach for integrating multiple private/public registries, pro- X  Providing a mechanism for organizing web service registries based on specific  X  Developing an algorithm for classifying web services into domain-based reg- X  Devising an algorithm for selecting relev ant registries containing required  X  Tackling the identified problems of UDDI [1] standard such as single point of The rest of this paper is organized as fo llows: Section 2 discusses some related work on Web service organization. Sect ion 3 presents our proposed framework for Web service organization. Section 4 discusses more detail about functionality of Web service publication and discovery. Section 5 evaluates the experimental results of our proposed framework. Finally in Section 6, we will outline our intention for future work.
 The current approaches to web services organization can be classified into cen-tralized [1,2,3,4 ] and decentralized approaches [5,6, 7,8,9,10,11,12]. In the central-ized infrastructure, all published web se rvices are stored in a common repository. As realized that replicating the UDDI is impractical due to the significant growth in the number of web services and registries in future. A number of studies in this field have put attention to d ecentralized approaches beca use they are believed as a promising solution to address the limitations of centralized approach. The ap-proach [5,6] are most relevant to our work. In these approaches, web services are organized into distributed registries which each registry is mapped to a domain or a group of domains. However, none of them support automatic selection of registries related to domain of interest o f requesters. To publish or discover a web service, these approaches require requester choosing a domain which can satisfy requester X  X  requirements. This is very difficult for novice users due to the large number of domain used in the system. In addition, requiring human intervention is a barrier for automatic web service composition in which agents or programs are used to discover services rather than human. In our infrastructure, an algo-rithm for automatic selecting relevant reg istries, based on semantic relationship between users X  query and specific do main ontology has been proposed.
Other approaches [7,8,9,10,11,12] based on peer-to-peer (P2P) platform that support Distributed Hash Table (DHT) interface such as CAN [13], Tapestry [14] and Chord [15] to organized service registr ies in distributed environment. In these approaches, each registry is seen as a p eer and the web services are distributed to these peers . However, in these approac hes web services are not classified on to peers based on service domains, so the query will be routed to a number of peers which eventually increase s the time for service discovery. Our proposed framework for web service o rganization consists of four layers: Data layer, Semantic layer, Classification layer, and System interface layer. The layered architecture is shown in Fig 1.

Data Layer consists of multiple autonomy registries supporting semantic ser-vice publication and discovery. The registries are organized into specific domains in which each registry is mapped to one or a group of domains. The purpose of this organization is that the system can automatically classify web services which have similar functionalities into one registry or a group of registries. Con-sequently, a query for desired services is only routed to registries mapped to the required service X  X  domain. This approach addresses following outstanding problems of the traditionally centralized registry (e.g. UDDI [1]):  X  By using multiple registries, this approach addresses the single point of failures  X  Improving searching performance (in terms of time and reliability) because Semantic Layer is used to provide semantic servi ce registration and discovery in our framework. The main purpose of this layer is to address the semantic deficiency of the current standard UDDI registry. The semantic layer consists of specific domain ontologies and the classification ontology.

Specific Domain Ontology. Each specific domain ontology comprises a set of concepts and relationship between th e concepts in a specific application do-main. In our framework, specific domain ontologies are used to support semantic service description and discovery. Specifically, each specific domain ontology is used for describing semantic features of s ervices in a specific domain. At the clas-sification layer, these domain ontologies are used as knowledge bases to classify web services into domain-based registries . At the data layer, these ontologies are used by matchmaker for semantic service discovery.

Classification Ontology. This ontology functions as a taxonomy for services classification in our framework. The classification ontology maintains the relation-ships between registries and specific doma in ontologies. These relationships are captured as  X  X apTo X  relationships in the classification ontology. Fig 2 shows the sample structure of the classification ontology.

Each node in the classification ontology also stores the details of the registry op-erator that manages the domain. Using the classification ontology, the web services will be automatically classified into relevant registries; consequently service discov-ery is only performed in the r egistries related to the req uester X  interested domain.
Classification Layer. The main functions of this layer are summarized as follows:  X  Classify Web services description into r elevant registries based on service  X  Route the service query to registries which contain requester X  desired ser-To fulfill these functions, this layer comprises two kinds of peers: classifiers and registry operators.

Classifiers: The function of classifiers is to classify web services, at the publication time, to relevant registries based on semantic service descriptions. When receiving a request for service publication, the classifiers will refer to the classification ontology to get the addresses of registry operators. The query will be forwarded to the registry operators. Each registry operator will evaluate whether the query belongs to its domain and response the evaluation results to the classifiers. Based on these responses the classifiers will route the query to operator peers which maintain domain-related registries.

Registry Operators: Each registry operator is responsible for one specific domain and one registry or a group of registries mapped to that domain. The registry operat or contains the access URLs of its specific domain as well as the URLs of all registries are mapped to its domain. More specifically, the registry operators have two main functions: (1) Receive the query in form of Q(Op, Is, Os), where Is and Os are sets of inputs and outputs of the operation Op, from classifier peers and check whether th is query Q is related to their managed domain and then reply the responses to the classifier peers; (2) route the query to their maintained registries for services publication and discovery.
System interface layer provides interfaces for ser vice providers and service requesters to interact with our service or ganization infrastru cture. For web ser-vice registration, the service provider can connect to one of the known client in the system interface layer which is de signed to provide an interface for the service provider to publish their semantic service description. Then the seman-tic service description will be routed to lower layer for registration or discovery. The service discovery is performed wi th the same manner. The details of our proposed infrastructure in shown in Fig 3. In this section, we focus on the process o f mapping between registries and specific domains as well as service publication and discovery. Before discussing these functionality details, the following definitions should be formally defined. Definition 1. A specific domain ontology SDO(C, R) comprises a set of con-cepts C and relationship R between the concepts in specific application domain. The concepts have two parts: Operation concepts C O and data concepts C D .The operation concepts C O comprise concepts used for describing the types of opera-tions which web services perform. The data concepts C D are used for describing the data types of input and output of web services X  operation.
 Definition 2. A semantic web service is a triple SWS =( Op, Is, Os ) ,where Op is the operation; I s = { I 1 ,I 2 ,...,I m } is a set of inputs and Os = { O 1 ,O 2 ,...,O n } is a set of outputs of the operation Op.
 Definition 3. A semantic web service SWS =( Op, Is, Os ) is totally described by a specific domain ontology SDO k ( C k ,R k ) if its operation Op, inputs Is and outputs Os are only described by using the set of concepts C k of ontology SDO k . Definition 4. If a concept C  X  C k ,where C k is a set of concepts of the spe-cific domain ontology SDO k ( C k ,R k ) , then the match ( C, SDO k ) function re-turns value 1, else match ( C, SDO k ) returns value 0.
 Definition 5. A service template ST ( Op, Is, Os ) ,where Is = { I 1 ,I 2 ,...,I m } is a set of inputs and Os = { O 1 ,O 2 ,...,O n } is a set of outputs of the operation Op respectively, is related to specific domain ontology SDO k if the following formula:
F ( ST, SDO k )= returns a value x, with x  X  (0 , 1] , it means that the service template ST is se-mantically described by using a set of concepts in the domain ontology SDO k . 4.1 Mapping Between Registries and Domains The tasks of mappings between registries and domains in the classification ontol-ogy are required knowledge about services domains. In this paper, we assumed that people called registry providers are responsible to perform these mapping tasks. To map a registry to a specific domain in the classification ontology, the registry provider can connect to one of t he client peers in the system interface. The registry provider X  X  mapping request will be routed to one of the classifiers by the client peer. Then, the classifier ret rieves the classification ontology from the semantic layer and sends back to the client peer. The client peer receives the classification ontology from the classifier and displays it in form of an on-tology tree to the registry provider. The registry provider can map his registry to one or a group of domains in the classification ontology. In case of the reg-istry provider X  X  interested domains do not exist, they can add new nodes to the classification ontology and then map their registries to added nodes. 4.2 Web Service Publication Service publication is performed in our framework through two steps: registry selection and service registration.

Registry selection : To publish a semantic web ser vice, the services provider connects to one of the client peers in the system interface layer. The client peer will send the semantic web service descrip tion to the classifier peer. The classifier peer extracts the service X  X  operation (Op) and its inputs (Is) and outputs (Os), then sends the publication query in form of Q P ( Op, Is, Os ) to operator peers. Each operator retrieves its managed domain ontology SDO k , and checks whether this service belongs to it managed domain by calculating the F ( Q P ,SDO k ) function. The result of this calculation will be sent back to the classifier.
Service registration : Depends on the returned value of F, we group service registration into following categories:  X  Automatic registration: If there is only one operator peer returns value 1  X  Semi-automatic registration: If there are more than one operator peers return  X  If all operator peers return value 0, it means that current domain which the 4.3 Web Service Discovery Searching for a web service in our framework comprises two steps: locating rele-vant registries containing desired servi ces and then searching within the located registries to retrieve requested services . The automatic servi ce discovery is shown in Fig 6.
 Locating relevant registries : The web service query in form of Q
D ( Op, Is, Os ) with Is and Os are sets of inputs and outputs of the opera-tion Op, from the client peer will be routed to one of the classifier peers. The selected classifier forwards the query t o operator peers. Each registry operator determines whether this service query i s related to its domain by calculating F ( Q D ,SDO k ) function, where SDO k is its managed domain. If the value of F is greater than 0, the query will be rout ed to registries which are mapped to its domains for service discovery. The res ults returned from these registries will be received by these regist ry operators and then sent back to client peers that finally display the discovered services to the requester.

Searching within located registries : This step is done by individual reg-istry. Actual search algorithms of registries are out of the scope of this paper. We conducted a simulation to evaluate the performance of our proposed ap-proach and a centralized approach such as UDDI [1]. The simulation was con-ducted with the number of web services increasing from 3,000 to 120,000. In the simulation, six different specific do main ontologies are used. Each specific domain has a registry to store services belonging to the domain. The classifica-tion algorithm has been implemented to automatically route the service query to relevant registries which are mapped to the requesters X  interested domain. The input parameters of the simulation can be summarized as follows: Ontology database: contains six specific domain on tologies. Each specific do-Web services: in our approach, web services are d istributed in six different The searching time of our approach and centralized approach in each case was measured. The results of experimental simulation is demonstrated in Fig.7.
As can be seen from Fig.7 that our approach is outperformed a centralized approach. The large growth of Web services can lead to the overwhelming of centralized registry and significantly increase the duration of services discovery, which eventually degrade the overall utility of Web services. Conversely, in our approach web services are classified and stored on domain-based registries. As a result, service discovery only performed in registries which are mapped to the requester X  interested domains. Thus, it significantly reduces the number of web services the matchmaker has to match, which consequently minimizes the time for services discovery. In this paper we have presented an infrastructure for semantic publication and discovery of web services addressing the outstanding problems of the UDDI registry. In the framework, web services which are semantically described are classified and stored in domain-based registries. This infrastructure provides a scalable and robust system for web services publication and discovery. In our infrastructure, the challenge of searching through multiple registries for a de-sired service is addressed by using classification ontology. More importantly, we have proposed a novel algorithm for automatically classifying web services into domain-related registries based on their semantic description. Consequently, the service requester X  X  query will automatically routed to only registries which contain desired services. The experime ntal results show that our approach is outperformed compared with th e centralized UDDI registry.

