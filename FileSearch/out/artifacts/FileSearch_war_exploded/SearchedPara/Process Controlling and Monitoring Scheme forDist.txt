 Management by using Web Services refers to leveraging Web Services for man-aging heterogeneous and distributed systems on account of their ability of reduc-ing heterogeneity through standard interaction paradigms with XML technology [1,2]. This paper is about using Web Services as a tool for controlling and mon-itoring processes, and not about management of Web Services.
 based design of failure detection servi ce. Here, we focus on management through Web Services for monitoring and controlling processes, which are running on Linux and UNIX operating system, in a distributed system. Failures are in-evitable in such a distributed system built over the Internet.
 We propose a system architecture for controlling and monitoring processes lo-cated dispersedly in the Int ernet, where the architectur e level design considering fault-tolerance aspect is mainly focuse d. We also show an experimental design of failure handling service, which is bas ed on Web Services. Consequently, the designed prototype system hereafter referred to as Hydra provides Linux and UNIX systems with more availability by restarting the process has been failure. But even more importantly, it enables us to be used by applications no intrusion to any application structure.
 including Web Services and fault-tolerance in more detail. We describe prelimi-naries for design of a failure detection ser vice supporting fault-tolerance in Sec-tion 3. Section 4 shows an operational scheme we use in this paper and present its results. Finally, in Section 5, we make concluding remarks and discuss some directions for future work. 2.1 Web Services Web Services represent the next generation of enterprise infrastructure for the exchange of information and services across the Internet. W3C defines a web service that is a software application identified by a URI, whose interfaces and binding are capable of being defined, described and discovered by XML arti-facts. Web Services also support direct in teractions with other software appli-cations using XML based messages via HTTP like internet-based protocol [3,2]. The service, described in Web Services Description Language(WSDL), receives a request, processes it, and returns a r esponse. Simple Object Access Proto-col(SOAP), a lightweight protocol designed for the exchange of information, provides an envelope that encapsulates XML data for transfer through the web infrastructure [1,2].
 systems. In a typical web services scen ario, a business application sends a re-quest to a service at a given URI using the SOAP protocol over HTTP. Focused on distributed, decentrali zed environments, it provides a framework to invoke services across the Internet. 2.2 Failure Detector Failure management is essential for building a reliable distributed system. In order to detect and diagnose failed processes, failure detection can be used as the building block to simplify the implementation [4]. Hence fault-tolerance based on failure detection is one of the means available to increase availability of delivered computational service. A f ailure detector(FD) is a basic element which plays a role as part of a process monitor in a distributed system [5]. Failure detectors are used in a wide variety of settings, such as network communication protocols, computer clustering management, group membership protocols, etc. A failure detector provides some informatio n on which processes have crashed. This section describes the design and ar chitecture of a process monitor and its status aggregation scheme based on heart-beat message for the failure detection. 3.1 Architectural Review and System Design To help creating a framework for an architectural approach, we list some of the requirements our works come into. The first requirement is reliability in terms of service continuity. Our solution has to incorporate members that will guarantee service continuity even in the presence of failures. The architecture must consider for single point failure inherited in the component X  X  operation and its environ-ment. By considering fault-tolerance, the architecture covers failure detection, failure handling and recovery. To achieve the requirement we consider replica-tion mechanism for recovery tactics. The second requirement is the capability to work in a heterogeneous environment. Basically the designed architecture must be considered highly interoperability with message level. Our solution has to be implemented in such a way as to be architecture-neutral and portable. In this perspective the client has to view the sy stem as a virtual entity, the implemen-tation details of which has to be completely hidden.
 design the notification structure linked logically to detect one of servers which was crashed and to eliminate single-point failure from a group of replica. consists of three major functional parts: resource monitor, aggregation manager and facilitator.
 Resource Monitor. The resource monitor plays a significant failure detector that watchdogs the status of processes and information about updated system load. Each process has been monitored by i ts resource monitor. It provides the information to an aggregation manager by a heart-beat message.
 Aggregation Manager. The aggregation manager maintains the resource in-formation which was received from the reso urce monitor. The resource informa-tion is delivered through an aggregating service. Its aggregating service provides a message level interface to the informati on provider. If a user queries the status of a specific process, the information provider sends a request to an information provider, where it stores status of processes in the persistence storage. Facilitator. The facilitator has a function for recovering a crashed process and propagates the resources information which was provided from an information provider to other information providers. When there is no information about its status, the facilitator forwards the query to one of the information providers, which is related with the process.
 preserve reliable computing in the proposed architecture. 1. On a process creation, the resource monitor registers the process X  physical 2. Each information provi der maintains most recently information about the 3. Each information provider sends the process information gathered by the 4. Initially one facilitator asynchronously reconciliates information about the 3.2 Basic Failure Detection Scheme We consider a simple failure de tection system of two entities FD and p which are connected throug h a communication link. FD represents a failure detector and p represents a process. To illustrate our point on how fault-tolerance service my be integrated with Web Services, we design the aggregating service using Web Services for aggregating information about processes based on a heart-beat message, as shown in Figure 2: Hereafter, we define an aggregating system which is composed of a failure detector, an aggregating service and information provider including an aggregating server with persistent storage. via resource monitor which is represented by FD p in Figure 2, the registered process is required to send a message for advertisement. After registering the process which is monitored, the information provider propagates the status of the process to other information providers in Figure 2(a). The process p sends a heartbeat message to the failure detector FD p ;when FD p receives a heartbeat message, it trusts p and starts a timer with a fixed timeout value. The heart-beat message can be instantiated over SOAP. The information about a process status is delivered to the information provider into which the process is registered. When any failure has occurred in the proce ss, this process status is delivered to an information provider in Figure 2(b). That information is to be propagated into other information providers. This section describes a pro totype implementation of Hydra mentionedinpre-vious sections. We mainly explain the structure for an aggregation manager. The Web Services of the prototype are implemented by Apache Axis which is a toolkit to create and consume Web Services for the Java Platform.
 tion manager , recover manager , failure detector .The aggregation manager con-sists of two Web Services, aggregating service and information provider . which is registered to the recovery manager as part of the facilitator. A process monitor , which is as part of the failure detector ,iswritteninJava.The process monitor watchdogs a process X  state which consists of running, terminated and unknown. The failure detector receives information about process status from the process monitor watchdoging processes. The failure detector also has a function for managing the process monitor.
 cess, the recovery manager co-operates with the process monitor which locates the run script for the re-booting procedure of the process. The process monitor is clearly separate from a process so tha t an application in a distributed system cannot consider the failure handling in itself.
 tered into the recovery manager of Hydra .The failure detector sends the aggre-gating server a process status. The process status is gathered by the aggregating server .
 process is restarted by the recovery manager . To restart a process which was failure, the recovery manager refers information about its a startup script with a command path. We can inspect the PID ofarestartingprocess,whichwas renewed as 26736 from 24309. In this paper we focused on a management of controlling and monitoring of processes in a distributed system based on Linux and UNIX operating system. We described the design and implementation of failure detection for widely dis-tributed systems through Web Services. T he failure detector is leveraging Web Service with high interoperability. By basing the service on unreliable failure detector it is clearly separ ate between failure detection and applications in a distributed system. In our work to date, we have demonstrated that this service can be used by applications no modification to application structure.
