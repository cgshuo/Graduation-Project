 Like all non-functional requirements, security requirements have a global in-fluence over the design of a socio-technical system. Socio-technical systems (STSs) are organizational systems consis ting of people, business processes, soft-ware applications, and hardware comp onents. Such systems often include a rich physical infrastructure consisting of not only computers, but also build-ings, cable networks and the like. Due to th eir ever-increasing complexity, STSs have been experiencing a growing number of security breaches [5], caused by security flaws and vulnerabilities.

A common theme for many of these breaches is that security solutions are not designed in a holistic fashion. Rather, they are dealt with in a piecemeal techniques. For example, Mouratidis [13] and Liu [11] analyze security issues at organizational level; Herrmann [9] analyzes security requirements in business process level; Lamsweerde investigate security requirements for software [21]. This leads to security gaps and vulnerabilities for parts of a STS, while others may be costly and over-protected. For example, when designing an encryption function for a smart meter system, a designer may focus only on the software (application layer). In this case, the software can implement encryption by calling functions implemented by an ext ernal hardware chip. However, with this design alternative, calling the exte rnal functions means that the software first sends unencrypted text to the chip, creating a vulnerability which can be exploited by non-authorized people (busi ness layer) via bus-snooping (physical layer) [1]. By focusing only on the software, vulnerabilities from the physical layer and business layer perspectives are missed.

To tackle this problem, we propose a holistic approach to security engineer-ing where STSs consist of three layers: a bu siness layer, a (software) application layer, and a physical infrastructure layer. Within this framework, each layer focuses on particular concerns and has its own requirements and specifications, which are captured by goal-oriented req uirements modeling language. In par-ticular, specifications in one layer dictate requirements in lower layers. In this manner, the security requirements analys is carried out in one layer seamlessly leads to the analysis in the next layer down. Thus, security requirements de-rived in di ff erent layers can cooperate properly to deliver security to systems. Go back to the aforementioned encryptio n example, if a holistic view is taken, al-ternative security treatments are identified: 1) apply software-based encryption, which avoid hardware access issues; 2) apply hardware-based encryption, as well as additional protections on corresponding hardware. In this way, security mechanisms applied in di ff erent layers are coordinated, and the aforementioned vulnerability can be avoid.

Based on this framework, a systematic process is provided to drive security analysis both within one layer and across layers. To support analysts without much security knowledge, we propose a set of analytical methods and corre-sponding transformation rules to facilit ate the security analysis process. This security analysis framework is particularly designed for existing systems that have a determined functional design. Our approach takes a number of high-level security requirements as input, analyzes their influences over three layers, and produces holistic security treatments that consist of coordinated security mechanisms in di ff erent layers.

In the reminder of this paper, we first d escribe a smart grid example in Sec-tion 2, which is used to illustrate our approach throughout the paper. Next, in Section 3 we introduce our research base line on requirements and specification models, and security requirements analysis. Section 4 presents the three-layer security analysis framework, while Sectio n 5 describes a set of security require-ment analysis methods and a systemati c analysis process. Section 6 compares our proposal to other work, and finally in Section 7 we conclude the whole paper and discuss future work. In this section, we introduce a smart gri d example, which leverages information and communication technologies to enable two-way communications between customers and energy providers. This example involves a number of scenar-ios, and we exclusively focus on a real-time pricing scenario. In this scenario, the service provider periodically collect s customer  X  X  energy consumption data, based on which they can create new prices to balance loads on the power grid. A business layer requirement model for this scenario is shown in Fig. 1. We will introduce details of the goal-oriented modeling language in Section 4.
Because this system involves a wide scope of artifacts, which vary from business processes to physical devices, it is di ffi cult to provide a cost-benefit security treatment to protect the who le system from damages. As reported by National Vulnerability Database, on average, 15 new vulnerabilities of the Supervisory Control and Data Acquisition system (a major control system used in power grid systems) are publicly disc losed each day. Not surprisingly, the presence of these vulnerabilities leads to many attacks on smart grid systems [5]. In this section, we introduce existing wor k, used as the baseline of our research. We first introduce the requirements prob lem, which specifies fundamental tasks that need to be addressed during requirements analysis. Then, we describe sev-eral requirements modeling language [10,22,6,2], which are intended to capture requirements or tackle the requirements problem.
 Requirements Problem. Zave and Jackson [23] define a Requirements Engineering ontology to specify what is the requirements problem. This definition consists of three concepts: a Requirement is an optative property that specifies stakeholder  X  X  needs on the system-to-be; a Domain Assumption is an indicative property that is relevant to the system; a Specification is an optative property, which is able to be directly implemented by the system-to-be. Based on these three basic concepts, they define the requirements problem amounts to finding a set of specifications S , which can satisfy all system requirements R under domain assumptions K . Thus, the requirements problem is represented as K , S R .
 Requirements Modeling Language. Jureta et al. [10] propose a goal-oriented re-quirements modeling language Te c h n e , which includes all related concepts for addressing the requirements problem as defined by Zave and Jackson. In ad-dition, it is able to model stakeholder  X  X  priority over di ff erent requirements, based on which, the best solution can be obtained amongst candidate solutions. Yu [22] proposes the i* framework for modeling organizational environments and system requirements. Specifically, it captures relationships among social actors via dependency relations. Chung adopts NFR to analyze security re-quirements [2]. In this work, a security requirement is represented as a security goal , which is specified in terms of sort and parameter . Giorgini et al. [6] model trusts relations between social actors in order to analyze social security issues. In this work, we base our three-layer framework on a combination of above ap-proaches to model both functional and non-functional requirements (including security requirements), as well as social interactions. Particularly, we use the concepts actor, goal, softgoal, quality constraint, task, and domain assumption and the relations refine, preferredTo, dependency, contribution, and trust ,providedby those approaches. Fig. 3 shows how we combine these concepts and relations in our conceptual model. Stakeholder X  X  global security needs, which are captured as non-functional re-quirements, influence designs in all parts of the system. We propose to structure a system into three layers, and analyze security issues in each layer from a holistic viewpoint. 4.1 Three-Layer Structure In this work, we have focused on three particular layers, which have received much attention from the security community. As shown in Fig. 2, at the most abstract layer, we consider the business l ayer, which highlights social dependen-cies, trusts, and business processes. At the next layer of abstraction, we consider software applications and their related IT infrastructures. Finally, we consider the physical infrastructure layer, which focuses on deployments of software applications and placements of devices.

As an essential part of the three-layer structure, we propose to analyze the requirements problem for each layer respectively. Each layer has its own re-quirements R , which are operationalized into proper specifications S under cor-responding domain assumptions K . As shown in the left part of Fig. 2, we apply goal-oriented modeling to each of the three layers with the aim of analyzing their requirements problems respectively.

We base our three-layer security analysis approach on the proposed three-layer structure, which is shown in the right part of Fig. 2. Our approach starts with high-level stakeholder X  X  security requirements; and then analyzes them throughout three layers with regard to layer-specific goal models; and finally generates a set of alternative global security treatments.
 4.2 Three-Layer Conceptual Models In this section, we specify conceptua l models that we use for modeling and analyzing the three-layer architecture. Apart from concepts and relations we adopt from existing approaches, mentioned in Section 3, we further extend and make use of new concepts. Fig. 3 shows an overview of conceptual model of the three-layer framework, where the new ly introduced concepts are highlighted in the dashed rectangles.
 Extended Requirement Concepts and Relations. As we build goal models for di ff erent layers capturing di ff erent concerns, we specialize Goal into layer-specific goals that focus on a particular aspect. Business Goal represents stake-holder X  X  high-level requirements for his business. Application Goal represents stakeholder X  X  requirements regarding software applications that he uses to per-form related business activities. Physical Goal represents stakeholder X  X  require-ments on physical devices and facilities that support execution of software. Accordingly, we assign Ta s k in di ff erent layers with operational definitions. In the business layer, a task is a Business Process Activity ; in the application layer, an Application Function is deemed as a task; and in the physical layer, a task is specialized into a Deployment action.

Apart from that, a number of relations are also proposed. Operationalize is a relation that presents how a goal / softgoal is operationalized into a task / quality constraint. This relation emphasizes the relationship between requirements and specifications, and indicates when a stake holder X  X  requirements are translated into operational specifications. For example, the business goal Have current load info shown in Fig. 1, which is desired by the Energy Provider , is operationalized into the task Collect load info in the same layer, which can accomplish this goal. Support is a cross-layer relation, which specifies a task designed in one layer is supported by requirements in the next l ayer down. Fig. 9 contains examples of this relation.
 Extended Security Requirement Concepts. Chung [2] leverages non-functional requirements analysis to deal with security requirements, which are represented as security goals .Eachsecuritygoalconsistsofone sort and one or more parame-ters . In our framework, we extend security goals to express more detailed security requirements, and introduce security mechanisms to represent security solutions.
Security Goal represents stakeholder X  X  security needs with regard to asset and interval. We define a security goal as a sp ecialization of softgoal, which partic-ularly focuses on security issues. A security goal is specified in the format: &lt; im-Integrity [energy consumption data, G2] (in Fig. 1) as an example, its four dimen-sions together describe a security requirement  X  X rotecting integrity of energy consumption data during the execution interval of G2 to a medium degree X .  X  Security Attribute specifies a characteristic of security. Particularly, we adopt  X  Asset is anything that has value to an organization, such as data, service.  X  Interval of a security goal indicates within which temporal interval the se- X  Importance of a security goal indicates to which degree stakeholders want
Security Mechanism is a concrete mechanism provided by the  X  X ystem-to-be X  in order to achieve one or more security g oals. We define the security mechanism as a specialization of task in goal model, which contributes to security goals and satisfies them. Thus, in our framework, security mechanisms are parts of specifications, and also influences requirements in its lower layers. In this section, we propose a systematic process and a set of security analysis methods to guide security analysis both within one layer and across layers. Fig. 6 shows an overview of the analysis pr ocess, which starts from security analysis in the business layer and follows a top-down manner to propagate influences of security analysis in one layer to lower layers. Within one single layer, we refine and simplify security goals to identify concrete and critical ones, which are then operationalized into possi ble security mechanisms that are left to security analysts to select. After security analysis has been done for all layers, security treatments applied in each lay er are synthesized to generate holistic security treatments.

We propose security analysis methods and corresponding transformation rules to guide the aforementioned analys is steps, which have been implemented using Datalog rules. We developed a prototype for a CASE tool, which auto-mates some of the analysis steps as indicated in Fig. 6. Due to space limitation, we only describe and illustrate a small part of the transformation rules. A full list of the 23 transformation rules is available online 1 . In the reminder of this sec-tion, we describe details the proposed sec urity analysis methods in subsections, each of which support one or several analysis task shown in Fig. 6. 5.1 Refinement Methods A coarse-grained security goal is normally more di ffi cult to analyze and op-erationalize than a fine-grained one, as it may be too abstract to be satisfied by specific security mechanisms. Thus, it is advisable for an analyst to refine a security goal till he obtains satisfiable ones. A security goal can be refined along any of its dimensions (security attributes , asset, or interval), i.e. there are three refinement methods. Fig. 7 shows an example of security goal refinements for security goal Medium Integrity [energy consumption data, G2] (Fig. 1). Note that a refinement process can be flexible in the sense that di ff erent refinement methods can be applied in any sequence and to any extent. Given the reference models that are shown in the left part of Fig. 7, the example presents only one possible way to refine the goal.  X  Security attributes-based refinement: refining security goals via security  X  Asset-based refinement: refinement of security goals can also be done by  X  Interval-based refinement: because an interval spe cifies the temporal pe-5.2 Simplification Methods When dealing with a large number of security goals, analysts may not have enough time to go through each of them to determine which is critical and requires further treatments. Especially as the refinement methods, which are intended to cover every potential facet of security goals, easily result in many detailed security goals. To release analys ts from scrutinizing all security goals, we introduce simplification methods, whic h identify critical security goals that need to be treated and exclude others.

In order to determine the criticality of security goal, we consider two par-ticular factors: applicability and risk level . The applicability specifies whether a security goal is sensible with regard to the content of the four dimensions of a security goal. The risk level identifies to which extent the satisfaction of a security goal is threatened. The critic ality of a security goal is determined by considering: 1) If a security goal is app licable and its risk level is either high or very high, then we treat this security go al as a critical one, which is highlighted with a character  X  X  X  X  X . 2) All other security goals are deemed as non-critical and will be removed from following security analysis. It is worth noting that this criticality analysis can be adjusted depending on analyst time and the domain. For example, if analyst time allows, a security goal, which is at the medium risk level, could be adjusted as critical security goal.

For the analysis of applicability, we consider not only related requirements and simple specifications, but also deta iled specifications, i.e. design informa-tion. For instance, how business activities are arranged, how application com-ponents interact with others, and where physical devices are placed. Based on this information, we propose layer-speci fic inference rules to determine the ap-plicability of a security goal in one layer. For example, the security goal Medium Data Integrity [water consumption data, T1] (Fig. 7) is not suitable, because the asset water consumption data would not be changed during the execution of T1 . Due to space limitation, in each layer we only present one rule as an example, whichareshowninTable1.

For the risk level analysis, we carry out a trust-based approach, which con-sider the trust between the owner of a security goal and the actor that potentially impairs the security goal. For example, the maintainer of a smart meter may impair the integrity of that meter, if a c ustomer owns a security goal that aims to protect the integrity of the smart meter, then our analysis considers to which extent the customer trusts the maintain er. Table 2 represents how we infer the risk level of security goals with regard to the trust level and the importance of security goals. Note that the letter L, M, H, V stands for low, medium, high, and very high level of risk respectively.
 5.3 Operationalization Methods To bridge the gap between security requ irements and security specifications within an individual layer, we propose o perationalization methods which gen-erate possible security mechanisms that could satisfy critical security goals. As security mechanism analysis and design requires additional security knowl-edge, which is normally not easy to obtain in reality, we exploit the power of security patterns to reuse security know ledge that tackles known security prob-lems. Particularly, we survey existing work on security patterns [17,8,19], and extract the parts of them that are suitable for our security analysis framework. Note that the selection of security patte rns is not intended to be exhaustive, and may evolve over time.

A security pattern consists of a secur ity attribute and a security mechanism that is supposed to satisfy that security attribute. Each security mechanism can contribute to one or several security attributes, and we use Make and Help links to represent their contributions. For e xample, one security pattern shown in Fig. 8 is Auditing has a Make contribution to Service Integrity . According to these security patterns, when operationalizin g a critical security goal, we identify security mechanisms that contribute to the security attribute of the security goal. It is worth noting that security patterns, shown in the Fig. 8, may also have either positive or negative influen ces on other non-functional goals, such as Time, Cost , which are documented in the specifi cation of the security patterns. 5.4 Cross-Layer Analysis Methods After finishing single-layer security analysis in one layer, indicated in Fig. 6, we analyze its influences on lower-layers. In our framework, the influences are reflected in two ways, which require di ff erent analysis methods. Accordingly, a number of inference rules are proposed to automate the cross-layer transfor-mations, parts of which are shown in Table 3.

Firstly, each of the security mechanisms should be transformed into at least one goal in the lower-layer goal model. Because security mechanisms are criti-cal for satisfying security goals, additional security goals are derived to ensure correct implementations of the corresp onding functional goals. Fig. 9(a) shows an example of this transformation. The security mechanism Encryption is trans-formed into a function goal of smart meter application , because that application is supposed to execute the encryption activity. Apart from this functional goal, the transformation also introduces tw o security goals, which concerns application integrity and application availability of the smart meter application during the execution of encrypt data . Note that the importance of these two new security goals is Medium , which is the same with the corresponding security goal in the business layer.

Secondly, if a security goal has not been fully satisfied in one layer, this security goal will be refined into securi ty goals in next layer down according to the newly available information in that layer. Fig. 9(b) shows an example of this transformation. The security goal Medium Data Integrity [energy consumption data, Measure energy data] is not treated in the business layer. Considering the asset of this security goal is processed by the smart meter application in the application layer, the transformation rule BUStoAPP.2 is applied, which results in two sub-security goals. 5.5 Global Security Analysis After security analysis has been done in each layer, we can derive alternative global security treatments by synthesizing security analysis results of each layer. Each global security treatment may consist of security mechanisms from one or several layers. Take a snippet of the thr ee-layer security analysis results of the smart grid as an example, which is shown in Fig. 10.
 In the business layer, the critical securi ty goal can be either operationalized as Auditing or left to the next layer. In the first case, the Auditing security mechanism is transformed into a functional goal an d two corresponding security goals. As the two security goals are identifie d as non-critical after refinement and simplification analysis, no further secu rity treatments are required. Thus, we derive the first global security treatment. In the second case, the security goal is refined into two sub-security goals in the application layer, one of which is identified as critical. This critical security goal can be operationalized as either Firewall or Input Guard , each of which starts a new alternative. Apart from the operationalization, the secur ity goal can also be left to next layer, which further introduces another two al ternatives. Finally, we derive 5 global security treatments in this exampl e. Among these alternatives, the Alt.3 contains a security mechanism from only one layer, i.e. Input Guard ; while the Alt.2 contains two security mechanisms from two di ff erent layers, i.e. Firewall , Anti-tamper protection . NFR-Based Requirements Analysis. Chung proposes to treat security require-ments as a class of NFRs, and apply a proc ess-oriented approach to analyze security requirements [2]. In a subsequent work, Chung and Supakkul inte-grate NFRs with FRs in the UML use case model [3], which enable NFRs to be refined through functional requirement models. Another complementary work done by Gross and Yu propose to connect NFRs to designs via patterns [7]. However, all of these NFR-based approaches mainly focus on information sys-tem analysis, and lack of supporting requirements analysis in the business layer and the physical layer.
 Security Requirement Analysis. A large number of security requirement anal-ysis approaches have been proposed over last two decades. Most of these ap-proaches focus on analyzing security requirements with regard to a particular aspect of information system. There are approaches that focus on the social and organizational aspect. Mouratidis et al. [13] capture security intentions of stake-holders and interdependence among stakeholders; Giorgini et al. [6] investigate social relationships by integrating trust and ownership into security analysis; Liu et al. [11] analyze organizational risks by considering dependencies among social actors. Another branch of work deals with security requirements for business process. Rodr X guez et al. [15] propose an extention of UML activity diagram to model security requirements within business process model, as well as a method that guides construction of the secure business process models. Herrmann et al. [9] propose a systematic process to elicit and analyze secu-rity requirements from business processes models. Most work is dedicated to analyzing security requirements of software, such as Attack Tree [18], Misuse case [20], and obstacle analysis [21]. All of these approaches are complementary to our approaches, as each of them could fit into one layer of our framework. From Security Requirements to System Design. A number of approaches have been proposed to transform security requirements captured in the high-abstraction level to the security design in the low-abstraction level in order to maintain security requirements thro ughout the whole life-cycle of system development. Mouratidis and J X rjen [14 ] translate security requirements into design by combining Security Tropos with UMLsec. Menzel et al. [12] propose an approach that transfers security requi rements, which are captured at the busi-ness process layer, to security configurat ion for service-based systems by using patterns. Similarly, Rodr X guez [16] et al. apply the MDA technique to transform secure business process model into analysis class diagram and use case diagram. The above approaches focus on maintaining security requirements identified in the early stage during later design stages. Di ff erent from their work, we propose to analyze security requirements in di ff erent layers from a holistic viewpoint and capture influences between security requirements in di ff erent layers. In this paper, we propose a holistic approach to analyze security requirements for STSs. Our approach consists of a three-layer conceptual model, a systematic analysis process, a number of securit y analysis methods and transformation rules. Given high-level security requirements, this approach could continuously refine and propagate them into di ff erent layers of socio-technical systems. The approach focuses on capturing the influence of upper-layer designs on the requirements of lower layers, thus avoiding a piece-meal treatment of security.
As we use goal modeling for security requirement analysis, we are bound to deal with complexity of such models . Compared to other goal-based ap-proaches that model a system as a whole, ours structures STSs into three layers, each of which is modeled separately and connected via a clearly defined con-ceptual model. Thus, our approach contributes to reduce the scalability issues in individual model. In addition, we develop a prototype tool to facilitate our analysis, which supports graphic mode ling and automates inferences over the transformation rules. However, our appr oach has limitations on its evaluation. So far, our approach is only applied to a single scenario of the Smart Grid case, which is an illustrative example rather than a practical evaluation.

In the future, we plan to extend our framework by incorporating real security regulations and laws, such as ISO standards, in order to provide more practical and grounded security analysis. Moreover, the security patterns we leveraged during security goal operationalizatio n should be updated in light of recent ad-vances in the field [19] synchronized with the cutting edge of that field. Finally, with the help of the prototype, we intend to apply our approach to a practical case study that has a reasonable scale to evaluate and further improve our work. Acknowledgements. This work was supported in part by ERC advanced grant 267856, titled  X  X ucretius: Foundations for Software Evolution X .

