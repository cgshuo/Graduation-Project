 1. Introduction
Nowadays, assembly lines are crucial in the industrial produc-tion of high quantity standardized commodities and more recently even gained importance in low volume production of customised products ( Boysen et al., 2008 ). An assembly line is made up of a number of workstations, arranged either in series or in parallel. Since the manufacturing of a production item is divided into a set of tasks, a usual and difficult problem is to determine how these tasks can be assigned to the stations fulfilling certain restrictions. Consequently, the aim is to get an optimal assignment of subsets of tasks to the stations of the plant. Moreover, each task requires an operation time for its execution.
A family of academic problems  X  referred to as simple assembly line balancing problems (SALBP)  X  was proposed to model this Bautista proposed a more realistic framework: the time and space assembly line balancing problem (TSALBP) ( Bautista and Pereira, 2007 ). The new model considers an additional space constraint to become a simplified version of real-world problems. As described in Bautista and Pereira (2007) , this space constraint emerged due to the study of the Nissan plant in Barcelona, Spain (a snapshot of an assembly line of this industrial plant is shown in Fig. 1 ). The new TSALBP framework is of a great importance in industrial engineering and operations research since it achieves a better modelling of the real conditions of the balancing of assembly lines.
The proposal of more realistic ALB models, allowing us to properly cope with real-life scenarios, have become a hot topic in the area in the last few years ( Boysen et al., 2008 ).

As many real-world problems, TSALBP formulations have a multi-criteria nature ( Chankong and Haimes, 1983 ) because they contain three conflicting objectives to be minimised: the cycle time of the assembly line, the number of the stations, and the area of these stations. In this paper we deal with the TSALBP-1/3 variant which tries to jointly minimise two objectives, the number of stations and their area, for a given value of the remaining objective, the product cycle time. TSALBP-1/3 has an important set of hard constraints-like precedences or cycle time limits for each station that make the problem solving difficult. These characteristics initially demanded the use of constructive approaches like ant colony optimisation (ACO) ( Dorigo and St  X  utzle, 2004 )orgreedy randomised search procedures (GRASP) ( Feo and Resende, 1995 )as done in the proposals described in Chica et al. (2010a , b) ,respec-tively. Nevertheless, an advanced proposal based on the well-known NSGA-II multiobjective evolutionary algorithm ( Deb et al., 2002 ) has been recently introduced in Chica et al. (2011a) using a specific representation scheme and customised genetic operators for the TSALBP. The latter advanced TSALBP-NSGA-II proposal has overcome the problem shortcomings requiring a constructive technique and has outperformed the existing algorithms, becoming the state-of-the-art method.
 2010 ) have been widely used in industrial and engineering applications like the fleet vehicle routing problem ( Prins, 2009 ), the design of spread spectrum radar poly-phase codes ( Pe  X  rez-
Bellido et al., 2008 ), the design of logistic networks ( Pishvaee et al., 2010 ), or the construction of three-dimensional models of real-world objects ( Santamar X   X  a et al., 2009 ). However, the use of local search to improve the solutions obtained by a global search procedure for the TSALBP has not been extensively explored ( Bautista and Pereira, 2007 ; Chica et al., 2010b ). In this paper, we aim to make an advance in the solving of this complex and challenging real-world problem by considering the application of advanced MA designs to deal with it.
 tackling the real-world TSALBP-1/3 variant. Such methods are based both on the state-of-the-art multiobjective algorithm, the advanced TSALBP-NSGA-II , and on the other existing multiobjec-tive algorithms for the TSALBP. The new memetic proposals will incorporate a successful multi-criteria local search (LS) scheme used in a previous GRASP approach.
 is no general method that is able to achieve the best results for all the problem instances (as stated in the No Free Lunch theorem Wolpert and Macready, 1997 ). Thus, we will develop 15 different
MA designs to be compared to each other and to the basic global search methods in a complete experimentation with nine well-known problem instances.
 gate the appropriateness of our MA proposals for solving real-world problems. This case study includes real-world data from the Nissan Pathfinder engine manufacturing process obtained from the assembly line of Barcelona. Up-to-date multiobjective performance indicators and statistical tests are used to analyse the behaviour of the algorithms.
 formulation is explained. The proposed multiobjective memetic algorithms to solve the problem are described in Section 3. Then, the experimental setup, the analysis of results, and the Nissan case study are presented in Section 4. Finally, some concluding remarks are discussed in Section 5. 2. Time and space assembly line balancing of n tasks. Each task j requires a positive operation time t execution. This time is determined as a function of the manufac-turing technologies and the resources employed. A subset of tasks
S as the workload of this station. Each task j can only be assigned to a single station k .

Every task j has a set of immediate  X  X  X receding tasks X  X  P must be accomplished before starting that task. These constraints are represented by an acyclic precedence graph, whose vertices correspond to the tasks and where a directed arc / i , j S that task i must be finished before starting task j on the produc-tion line. Thus, task j cannot be assigned to a station that is ordered before the one where task i was assigned.

Each station k presents a station workload time t  X  S k  X  that is equal to the sum of the tasks X  lengths assigned to it. The workload time of the station cannot exceed the cycle time c , common to all the stations of the assembly line. In general, the SALBP ( Baybars, 1986 ; Scholl, 1999 ) focuses on grouping these tasks into work-stations by an efficient and coherent method. In short, the goal is to achieve a grouping of tasks that minimises the inefficiency of the line or its total downtime satisfying all the constraints imposed on the tasks and stations.

Nevertheless, this formulation is too simple to deal with real-life ALB problems. Different extensions to this formulation have been proposed ( Scholl, 1999 ), showing the great interest of the scientific community ( Boysen et al., 2008 ). In particular, there is a significant and real need of introducing space constraints in the assembly lines X  design. This is because of three main reasons found in real manufacturing scenarios: (1) The length of the workstation is limited. Workers start their (2) The required tools and components to be assembled should (3) Another usual source of spatial constraints comes from the
Based on these new realistic spatial features, a new real-like problem comes up. In order to model it, Bautista extended the
SALBP into the TSALBP by means of the following formulation ( Bautista and Pereira, 2007 ): the area constraint must be con-sidered by associating a required area to each task. The areas of tasks are devoted to store auxiliary elements for manufacturing purposes like tools, shelves, containers, or hardware brackets. The needed area for each task is defined by the logistics and methods departments based on the characteristics of the involved auxiliary elements. We should keep in mind that the inclusion of space constraints in the problem formulation can decrease the effi-ciency with respect to a formulation which does not consider spatial constraints. However, these efficiency values only repre-sent a theoretical nature because if spatial constraints are not included, the assembly line cannot be arranged.

Mainly, the required areas can be specified by two-dimen-is the truly useful variable for the TSALBP optimisation task. From now on, the length associated to the tasks and the station X  X  length will be referred as area and measured in linear metres. Every station k will require a station area a ( S k ), equal to the sum of the areas of all the tasks assigned to that station. This needed area must not be larger than the available area A k of the station k . For the sake of simplicity, we shall assume A k to be identical This fact is not problematic since if there is a continuous transportation system, as in our case, the areas of the stations must be equal. Otherwise, the velocity of the conveyor belt would require to be changed at each station and adapted to the cycle time. A diagram with an example is given in Fig. 2 where the area A k of station k is given by the sum of the areas (lengths) of its tasks, a 1 , a 2 , a 3 ,and a 4 .

Overall, the TSALBP may be stated as: given a set of n tasks with their temporal and spatial attributes, t j and a j , and a precedence graph, each task must be assigned to just one station such that: 1. all the precedence constraints are satisfied, 2. there is not any station with a workload time t  X  S k  X  greater than the cycle time c , 3. there is not any station with a required area a  X  S k  X  greater than the global available area A .

The TSALBP presents different formulations depending on which of the three considered parameters ( c , the cycle time; m , the number of stations; and A , the area of the stations) are tackled as objectives to be optimised and which will be considered as fixed variables. The eight possible combinations result in eight different TSALBP variants ( Bautista and Pereira, 2007 ). Within them, there are four multiobjective variants depending on the given fixed variable: c , m , A , or none of them. While the former three cases involve a bi-objective problem, the latter defines a three-objective problem.

In this contribution we will tackle one of these formulations, the TSALBP-1/3. It consists of minimising the number of stations m and the station area A , given a fixed value of the cycle time c . We chose this variant because it is quite realistic in the auto-motive industry, our field of interest, since the annual production of an industrial plant (and, therefore, the cycle time c ) is usually set by market objectives. Besides, the search for the best number of stations and areas makes sense if we want to reduce costs and make workers X  day better by setting up less crowded stations. More information about the justification of this choice can be found in Chica et al. (2010a) .

We can mathematically formulate the TSALBP-1/3 variant as follows: Min f 0  X  x  X  X  m  X  f  X  x  X  X  A  X  max subject to: x jk  X  1 , j  X  1 , 2 , ... , n ,  X  3  X  t x jk r c , k  X  1 , 2 , ... , UB m ,  X  5  X  a x jk r A , k  X  1 , 2 , ... , UB m ,  X  6  X  x f 0 , 1 g , j  X  1 , 2 , ... , n ; k  X  1 , 2 , ... , UB m ,  X  8  X  where: n is the number of tasks, x jk is a decision variable taking value 1 if task j is assigned to station k , and 0 otherwise, a is the area information for task j ,
E is the earliest station to which task j may be assigned,
L is the latest station to which task j may be assigned,
UB m is the upper bound of the number of stations. In our case, it is equal to the number of tasks.

Constraint in Eq. (3) restricts the assignment of every task to just one station, (4) limits decision variables to the total number of stations, (5) and (6) are concerned with time and area upper bounds, (7) denotes the precedence relationship among tasks, and (8) expresses the binary nature of variables x jk .

The specialised literature includes a large variety of exact and heuristic problem-solving procedures as well as metaheuristics for solving the SALBP ( Baybars, 1986 ; Scholl and Voss, 1996 ;
Scholl and Becker, 2006 ). Regarding the TSALBP-1/3, a multi-objective ACO algorithm based on the multiple ant colony system (MACS) ( Bara  X  n and Schaerer, 2003 ) was the first successful proposal ( Chica et al., 2010a ). However, a later multiobjective evolutionary algorithm, the advanced TSALBP-NSGA-II , outper-formed MACS and became the state-of-the-art method ( Chica et al., 2011a ). Procedures based on other metaheuristics as GRASP have also been proposed ( Chica et al., 2010b ). Finally, expert preferences were modelled and included into the metaheuristic search process ( Chica et al., 2011b , 2008 ).

The said three approaches to tackle TSALBP-1/3 will be described in Section 3.1 as the global search modules of our memetic proposals. With respect to the use of MAs, an ACO algorithm incorporating an LS strategy was proposed in Bautista and Pereira (2007) to solve a single-objective TSALBP variant.
Nevertheless, no multiobjective MA design has been proposed to deal with any multiobjective TSALBP variant. The current con-tribution aims at bridging this gap.
 3. Proposed memetic algorithms for tackling our industrial problem. Generally, (multiobjective)
MAs may be regarded as a marriage between a (multiobjective) global search metaheuristic and local improvement operators.
This general structure has actually proved its efficacy when solving a large number of real-world problems. Unfortunately, it is well known that there is not any universal MA design to deal with any general application. In fact, one drawback of MAs is that, in order for it to be useful, their general structure must be adapted to cope with the characteristics of the individual search components considered and of the problem under solving. These elements and how they are integrated to obtain the best performance are the pieces of the MA puzzle. Designers must use their knowledge, skills and expertise to make decisions on the composition of each individual procedure and of their integration in order to reach the best possible MA structure for the specific application being tackled ( Ishibuchi et al., 2003 ; Ong et al., 2006 , 2010 ). Some tentative designs based on the analysis of several combinations with a different intensification X  X iversi-fication trade-off must be tested to succeed in this task. (multiobjective) global search metaheuristic has its own peculia-rities and defines different intensification X  X iversification degrees when combined with a LS method. Therefore, it is necessary to detail each global search method and how all the components are integrated in the final scheme for each specific MA case. As an example, in the design of a multiobjective MA for the current problem we found that the three different multiobjective meta-heuristics to be considered as global search methods handle the final set of solutions, i.e. Pareto-optimal solutions, in different ways. On the one hand, these solutions can be stored in an external Pareto archive, as in MACS and GRASP. On the other hand, they can be included in the general population of the metaheuristic, as in the advanced TSALBP-NSGA-II. These specific decisions are those not allowing for a universal MA design. and follows the usual MA design pipeline. To do so, in Section 3.1 the three basic multiobjective global search methods tested are reviewed. Then, the LS structure and operators are introduced in
Section 3.2. Finally, Section 3.3 describes the different chances considered for the LS integration within the global search scheme. 3.1. Global search: multiobjective metaheuristics which have been applied to the TSALBP-1/3, i.e. the MACS algorithm, a GRASP method, and the state-of-the-art advanced
TSALBP-NSGA-II . 3.1.1. MACS sion of ant colony system (ACS) ( Dorigo and Gambardella, 1997 ) to deal with multiobjective problems. In Chica et al. (2010a) , the authors modified the original version of MACS to adapt it for solving the TSALBP-1/3. The algorithm uses one pheromone trail matrix and several heuristic information functions. In the case of the TSALBP-1/3, the experimentation carried out in Chica et al. (2010a) showed that the performance was better when MACS was only guided by the pheromone trail information. Therefore, the heuristic information functions have not been considered in this contribution.
 on constructive and station-oriented approach ( Scholl, 1999 )to face the precedence problem (as usually done for the SALBP,
Scholl and Becker, 2006 ). Thus, the algorithm opens a station and sequentially selects tasks to fill it by means of the MACS transi-tion rule till a stopping criterion is reached. Then, a new station is opened to be filled and the procedure is iterated till all the existing tasks are allocated.

The pheromone information has to memorise which tasks are the most appropriate to be assigned to a station. Hence, a pheromone trail has to be associated to a pair  X  station k k  X  1 y n , j  X  1 y n ,with n being the number of tasks, so the pheromone trail matrix has a bi-dimensional nature. Since MACS is Pareto-based, i.e. a set of non-dominated solutions for the problem is stored in a Pareto archive and updated at each step of the algorithm, the pheromone trails are updated using the solu-tions of this archive. Two station-oriented single-objective greedy algorithms are used to obtain the initial pheromone value t
In addition, a novel mechanism was introduced in the con-struction procedure in order to achieve a better search intensifi-cation X  X iversification trade-off. This mechanism randomly decides when to close the current station taking as a base both a station closing probability distribution and an ant filling thresh-filling rate (i.e. the overall processing time of the current set of tasks S k assigned to that station) as follows: p  X  closing k  X  X 
At each construction step, the current station filling rate is computed. In case it is lower than the ant X  X  filling percentage threshold a i (i.e. when it is lower than a i c ), the station is kept opened. Otherwise, the station closing probability distribution is updated and a random number is uniformly generated in [0,1] to take the decision whether the station is closed or not. If the decision is to close the station, a new station is created to allocate the remaining tasks. Otherwise, the station will be kept open.
Once the latter decision has been taken, the next task is chosen among all the candidate tasks using the MACS transition rule to be assigned to the current station as usual: j  X  where O represents the current feasible neighbourhood of the ant, b weights the relative importance of the heuristic information with respect to the pheromone trail, and l is computed from the ant index h as l  X  h = M . M is the number of ants in the colony, q is an exploitation X  X xploration parameter, q is a random value in [0,1], and ^ i is a node. This node ^ i is selected according to the to perform a controlled exploration of the neighbourhood O at each decision node of the ant, as done in the original ACS. Again, b weights the relative importance of the heuristic information with respect to the pheromone trails and l depends on each ant index p  X  j  X  X 
The procedure goes on till there are no remaining tasks to be assigned. Thus, the higher the ant X  X  threshold, the higher the the fact that there are less possibilities to close it during the construction process. In this way, the ant population will show a highly diverse search behaviour, allowing the method to properly explore the different parts of the optimal Pareto front by appro-priately distributing the generated solutions.

The algorithm performs a local pheromone update every time an ant crosses an edge / i , j S using the average costs of the t value. It is done as follows:  X  X  1 r  X  t ij  X  r t 0  X  12  X 
The interested reader is referred to Chica et al. (2010a) for a complete description of the MACS proposal for the TSALBP-1/3. 3.1.2. GRASP
Another successful metaheuristic applied to the TSALBP-1/3 was a multiobjective GRASP method 1 ( Chica et al., 2010b ). With this approach, a solution is generated at each iteration and its inclusion in the external Pareto archive is considered: if it is not dominated, it is included in the archive and the resulting dominated solutions are removed. The algorithm finishes with a set of non-dominated solutions generated during all the iterations.

As in MACS, the construction method is based on a station-oriented approach. In the construction of the greedy solutions we introduce randomness in two processes. On the one hand, we allow the random selection of the next task among the best candidates to be assigned to the current station. This process starts by creating a candidate list of unassigned tasks. For each candidate task j , we compute its heuristic value Z j . It measures the preference of assigning it to the current opened station. Z proportional to the processing time and area ratio of that task (normalised with the upper bounds given by the time cycle, c , and the sum of all tasks X  areas, UB A , respectively). In addition, Z proportional to the ratio between the number of successors of task j and the maximum number of immediate successors of any eligible task:  X 
Then, we sort all the candidate tasks according to their heuristic values and we set a quality threshold for them given by q  X  max Z j g  X  max Z j min Z j  X  . All the candidate tasks with a heuristic value Z j greater or equal to q are selected to be in the restricted candidate list (RCL). In the former expression, g is the intensification X  X iversification trade-off control parameter. We found that g  X  0 : 3 was the value that yield the best performance ( Chica et al., 2010a ). Finally at the current construction step, we randomly select a task among the elements of the RCL. The construction procedure finishes when all the tasks have been allocated in the needed stations.

On the other hand, we also introduce randomness in the decision of closing the current station according to a probability distribution given by the filling rate of the station (see Eq. (9)). As stated in MACS, the filling thresholds approach is also used to achieve a diverse enough Pareto front. A different threshold is selected in isolation at each iteration of the multiobjective randomised greedy algorithm, i.e. the construction procedure of each solution considers a different threshold.

The algorithm is run a number of iterations to generate different solutions. When a solution is generated a local improve-ment phase is performed on the solution. This improve-ment is achieved by means of a multi-criteria LS scheme, later explained in Section 3.3. The final output consists of a Pareto set approximation composed of the non-dominated solutions found. 3.1.3. Advanced TSALBP-NSGA-II
In Chica et al. (2011a) the authors proposed a novel multi-objective genetic algorithm design, called advanced TSALBP-NSGA-
II , and based on the original NSGA-II search scheme ( Deb et al., 2002 ). Customised representation and operators were considered in the algorithm design to properly solve the TSALBP-1/3 by considering a global search technique.

The most important problem of the previous genetic algo-rithm-based approaches that tried to solve the SALBP and TSALBP (see for example Chica et al., 2010a and Sabuncuoglu et al., 2000 ) was the representation scheme. The advanced TSALBP-NSGA-II proposal took the biggest step ahead with respect to existing algorithms by explicitly representing task-station assignments regardless the cycle time of the assembly line. Thus, it ensures a proper search space exploration for the joint optimisation of the number and the area of the stations. Furthermore, the represen-tation will also follow an order encoding to facilitate the con-struction of feasible solutions with respect to the precedence relations constraints. The allocation of tasks among stations is made by employing separators, that are dummy genes which do not represent any specific task and they are inserted into the list of genes representing tasks. In this way, they define groups of tasks being assigned to a specific station.

The maximum possible number of separators is n 1 (with n being the number of tasks), as it would correspond to an assembly line configuration with n stations. The number of separators included in the genotype is variable and it depends on the number of existing stations in the current solution. Therefore, the algorithm works with a variable-length coding scheme, although its order-based representation nature avoids the need of any additional mechanism to deal with this issue.

Due to the latter fact, the crossover operator can be designed from a classical order-based one. The partially mapped crossover (PMX) operator was selected because (a) it is one of the most extended crossover operators , and (b) it has already been used in other genetic algorithm implementations for the SALBP ( Sabuncuoglu et al., 2000 ). PMX generates two offspring from two parents by means of the following procedure: (a) two random cut points are selected, (b) for the first offspring, the genes outside the random points are copied directly from the first parent, and (c) the genes inside the two cut points are copied but in the order they appear in the second parent. Thanks to the advanced coding scheme and to the use of a permutation-based crossover, the feasibility of the offspring with respect to precedence relations is assured.
However, since information about the tasks-stations assign-ment is encoded inside the chromosome, it is needed to assure that: (a) there is not any station exceeding the fixed cycle time limit, and (b) there is not any empty station in the configuration of the assembly line. Therefore, a repair operator must be applied for each offspring after crossover. The goals and methods of the repair operator are: (a) redistribute spare tasks among available stations by reallocating the spare tasks in other stations, and (b) removing empty stations.

Two mutation operators have also been specifically designed and uniformly applied to the selected individuals of the popula-tion. The first one, the scramble operator , is based on reordering a part of the sequence of tasks and reassigning them to stations.
The second one, the divider operator , is introduced to induce more diversity in order to achieve a well-distributed Pareto front approximation.

In order to additionally increase the diversity of the search to obtain better distributed Pareto front approximations, a diversity induction mechanism was adopted: Ishibuchi et al. X  X  (2008) similarity-based mating.

The interested reader is referred to Chica et al. (2011a) for a complete description of the method. 3.2. Multi-criteria LS structure and components objective combinatorial optimisation problems ( Teghem and
Jaszkiewicz, 2003 ; Paquete and St  X  utzle, 2006 ). The first one uses an acceptance criterion based on the weak component-wise ordering of the objective value vectors of neighbouring solutions.
In addition, it maintains an unbounded archive of non-dominated solutions found during the search process (a Pareto archive) ( Knowles and Corne, 2003 ; Zitzler and Thiele, 1999 ). The second family is based on considering different scalarizations of the objective function vector ( Gandibleux and Freville, 2000 ;
Hansen, 1997 ; Jaszkiewicz, 2002 ). The MA designs introduced in this contribution will be based on this second approach. The weighted sum scalarization of the two objectives of our problem, A and m , are calculated by the following formula: Min  X  l 1 A  X  l 2 m  X  :  X  14  X 
LS of the MAs. As usually done in the multiobjective MA area (see for example Jaszkiewicz, 2002 ), the weight vector l  X  X  l created at random for each constructed solution.
 on moves ( Rachamadugu and Talbot, 1991 ). The LS operators are based on such moves of tasks. In our advanced specific design, two different neighbour generation operators will be considered and selected depending on the weight vector l (see Section 3.2). If l 1 4 l 2 , the neighbour operator for minimising the A objective will be followed since the LS optimisation will be more biased to the improvement of the latter objective than the other. Otherwise, the neighbour operator headed to improve m will be considered first. If the selected neighbour operator does not succeed minimising the weighted sum scalarization, the other operator is then applied. to define, for each task j in the current TSALBP-1/3 solution, the the corresponding LS operator according to the current assign-ment of its immediate predecessors and successors. In general, a move  X  j , k 1 , k 2  X  describes the assignment change of task j from station k 1 to station k 2 , where k 1 a k 2 and k 2 A  X  ES are variables of the LS algorithm. They are re-calculated each time a LS operator is going to be applied by locating where the immediate precedent task of j , s , and the immediate successor of j , p , are placed in the existing solution. Note that they should not be confused with E j and L j which are definitions of the TSALBP model and restrict the set of stations where the corresponding task j could be never allocated (see Section 2).

The pseudo-code of the LS operator for the first objective, A ,is described in Algorithm 1. In this method, the solution neighbour-hood is built by means of the explained task moves. The main goal is to reduce the area occupied by the station with the highest area by moving tasks to other stations. It works by first sorting the tasks of a target station and selecting the task with the highest area. Then, the algorithm tries to move this task to one of its feasible stations in order to reduce the scalarization value of the solution. If there is no possible improvement with this task, the algorithm selects the next task of the sorted list of tasks of the target station.

In the case of the second LS operator, the goal is reducing the number of stations m . From the initial solution, a neighbourhood is created by moving all the tasks from the station with the lowest number of tasks (called the Target_Station) to other stations, keeping a feasible solution. The operator works as described in Algorithm 2. For a sorted list of stations with respect to the number of tasks, the algorithm tries to move all the tasks of each station in order to improve the scalarization function value. This is done for a maximum number of stations.
Given a station to be removed, the algorithm uses a recursive depth first search function (Algorithm 3) to look for a feasible solution having the Target_Station X  X  tasks reallocated in other stations. In the experiments developed, the maximum number of  X  Find the station with the highest area ;
Descending_Sort  X  tasks of Target_Station  X  ; First element of Set_Of_Tasks ; and LP j of Task j ; , LP ;  X 
Iterations  X  1 ; stations ( MAX _ STATIONS )wassetto20tolimitthecomputa-tional time of this LS operator. 3.3. Multiobjective LS integration
The most important issue in the LS integration scheme in a MA is the balance between the application of the basic global search method and the LS ( Ishibuchi et al., 2003 ). In memetic computing, LS is usually applied to each trial solution obtained during the global search process. However, this is very time-consuming process and it has been reported that this do not necessarily lead to the best performing MA ( Krasnogor and Smith, 2000 ).
An alternative choice is considering a selective application of the LS as done for example in Ishibuchi et al. (2003) , Herrera et al. (2005) and Noman and Iba (2005) . That is one of the alternatives we will use in this work. We have considered a criterion that was originally proposed in Hart (1994) and later used in contributions such as Krasnogor and Smith (2000) , Lozano et al. (2004) and Santamar X   X  a et al. (2009) . It is based on a random application with uniform distribution considering a probability value of 0.0625.
We will compare this criterion with the traditional scheme of applying the LS improvement to every constructed solution during the global search process.

Another issue that could significantly affect the MA intensifi-cation X  X iversification trade-off is the LS depth measured by the number of LS iterations we are considering. The higher the number of LS iterations, the higher the intensification (and the lower the diversification) the MA is applying. We will consider three different number of LS iterations, 20, 50, and 100, and study their influence in the experiments developed. 4. Experimentation
In this section we aim at studying the performance and behaviour of the different designed multiobjective MAs. First, we describe the experimental setup (Section 4.1). Then, an analysis of Algorithm 2. The pseudo-code of the LS operator for the m objective. 1 while Iterations r MAX _ ITERATIONS do 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 end 18 return true if scalarization function is improved; 1 Function DFS ( Current _ Task , Set _ Of _ Tasks ) 2if all elements of Set _ Of _ Tasks allocated then 3 // Base case 4 else 5 6 7 8 9 10 11 12 13 end 14 return true if scalarization function is improved; the MA variants performance is done (Section 4.2.2). Finally, the real-world case study of Nissan is tackled in Section 4.3. 4.1. Experimental setup setting a fixed run time as stopping criterion (900 s). All the algorithms were launched in the same computer: Intel Pentium
D with two CPUs at 2.80 GHz and CentOS Linux 4.0 as operating system. Furthermore, the same programming language, C  X  X  , and framework were utilised for the development of all the algo-rithms here described. The framework with the algorithms of the experimental study is publicly available at http://www.nissanchair. com/TSALBP . The specific parameter values considered for the different algorithms are shown in Table 1 .
 performance indicators (metrics) existing in the specialised lit-erature ( Zitzler et al., 2000 , 2003 ; Deb, 2001 ; Knowles and Corne, 2002 ; Coello et al., 2007 ): (a) unary performance indicators, those which measure the quality of a non-dominated solution set approximation returned by an algorithm; and (b) binary perfor-mance indicators, those which compare the performance of two different multiobjective algorithms. In the following paragraphs we present a brief description of the used performance indicators: ( HVR )( Coello et al., 2007 ) has become a very useful unary performance indicator. Its use is very extended as it can jointly measure the distribution and convergence of a Pareto set approx-imation. The HVR can be calculated as follows:
HVR  X  HV  X  P  X  HV  X  P n  X  ,  X  15  X 
Pareto front approximation and the true Pareto front, respec-tively. When HVR equals 1, then the Pareto front approximation and the true Pareto front are equal. Thus, HVR values lower than 1 indicate a generated Pareto front approximation that is not as good as the true Pareto front.
 keep in mind some obstacles which make difficult the computa-tion of this performance indicator. First, we should notice that the true Pareto fronts are not known. In our case, we will consider a pseudo-optimal Pareto set, i.e. an approximation of the true Pareto set, obtained by merging all the Pareto set approximations
P j i generated for each problem instance by any algorithm in any run. Thanks to this pseudo-optimal Pareto set, we can compute the HVR performance indicator values, considering them in our analysis of results.

Besides, there is an additional problem with respect to the HVR performance indicator. In minimisation problems, as ours, there is a need to define a reference point to calculate the volume of a given Pareto front. The HVR values are not proper to be compared if there is not any upper boundary of the region within which all feasible points will lie ( Knowles and Corne, 2002 ). Thus, we defined the reference point for each instance as the  X  X  X ogical X  X  maximum values for the two objectives (anti-ideal solution). These reference points are specific for each problem instance.
I e binary performance indicator : The previous performance indicator allows us to determine the absolute and individual quality of a Pareto front approximation, but cannot be used for comparison purposes ( Zitzler et al., 2003 ). On the opposite, binary indicators aim to compare the performance of two different multiobjective algorithms by comparing the Pareto set approx-imations generated by each of them. In this contribution, we will consider the e binary indicator, I e .

The I e indicator ( Zitzler et al., 2003 ) is a quality assessment method for multiobjective optimisation that avoids particular difficulties of unary and classical methods ( Knowles, 2006 ). Two different definitions are possible: the standard (multiplicative) I and the additive indicator I e  X  . In this contribution, we have opted by the multiplicative indicator. Given two Pareto front approx-imations, P and Q , the value I e  X  P , Q  X  is calculated as follows:
I  X  P , Q  X  X  inf e of objectives, assuming minimisation.

According to Zitzler et al. (2003) , the I e binary indicator can be properly used to compare the performance of two different multiobjective algorithms by analysing the crossed values of the considered that the Pareto set approximation P generated by the first algorithm dominates Q , the one generated by the second algorithm, in a weak sense.

The I e performance indicator values of the approximation sets of the 10 runs performed for every pair of algorithms have been represented by two kinds of boxplots (see Figs. 3, 5, and 7 ; and
Figs. 9, 13, 14 , respectively). For all the boxplots, the minimum and maximum values are the lowest and highest lines, the upper and lower ends of the box are the upper and lower quartiles, a thick line within the box shows the median, and the isolated points are the outliers of the distribution.

In the first kind of boxplots ( Figs. 3, 5, and 7 ), each rectangle contains nine boxplots representing the distribution of the I values for a certain ordered pair of algorithms in the nine considered problem instances (see Section 4.2.1). Each box refers to the algorithm A in the corresponding row and algorithm B in the corresponding column, and gives the I e  X  A , B  X  values. The 10 considered values to obtain each boxplot correspond to the computation of the I e metric on the two Pareto sets generated by algorithms A and B in each of the 10 runs.

The second kind of boxplots ( Figs. 9, 13, 14 ) facilitates the analysis when few algorithms are involved in the comparison. In this case, each rectangle represents one of the nine problem instances. Inside each rectangle, boxplots representing the dis-tribution of the I e values for a certain pair of algorithms are drawn. Given Fig. 9 as an example, the top-left rectangle shows the boxplots comparing three pairs of algorithms: M vs. G, M vs. N, and G vs. N (see the caption of the figure for the notations) for the first problem instance. As I e is a binary indicator, two boxplots have been drawn for each algorithm comparison. The white generated in the 10 runs, while the coloured boxplots do so for the I e  X  G , M  X  , I e  X  N , M  X  , and I e  X  N , G  X  values.
In order to allow an easy visual comparison of the performance of the different algorithms, the attainment surfaces ( Fonseca and Fleming, 1996 ) will be represented. These graphics offer a visual and quantitative information, sometimes more useful than numeric values, mainly in complex problems as ours. We can define an attainment surface as the surface uniquely determined by a set of non-dominated points that divides the objective space into the region dominated by the set and the region that is not dominated by it ( Fonseca and Fleming, 1996 ). Given r runs of an algorithm, it would be interesting to summarise the r attainment surfaces obtained, using only one summary surface. Such sum-mary attainment surfaces can be defined by imagining a diagonal line in the direction of increasing objective values cutting through the r attainment surfaces generated. The intersection on this line that weakly dominates at least r p  X  1 of the surfaces and is weakly dominated by at least p of them, defines one point on the  X  X  p -th summary attainment surface X  X . In our case, this surface is the union of all the goals that been attained in the r  X  10 independent runs of the algorithm.

Finally, a statistical test will be performed in order to analyse the significance of the results in the comparison of the quality of the Pareto front approximations obtained by the different multi-objective MAs by means of the I e indicator. This is done in order to avoid the fact that one exceptionally good result in any of the repetitions of the compared algorithms could be responsible for the differences in the overall values and results in a wrong analysis. The Mann X  X hitney U test, also known as Wilcoxon ranksum test, will be used for this aim. Unlike the commonly used t-test, the Wilcoxon test does not assume normality of the samples and it has already demonstrated to be helpful analysing the behaviour of evolutionary algorithms ( Garc X   X  a et al., 2009 ).
Nevertheless, we should remark the fact that there is not any reference methodology to apply a statistical test to a binary indicator in multiobjective optimisation. Thus, we have decided to follow the procedure proposed in Sa  X  nchez and Villar (2008) , described as follows. Let A and B be the two algorithms to be compared. After running both algorithms just once, let p A 1 if the Pareto set approximation P generated by A dominates Q obtained by B , 0 otherwise. For comparisons with the I e it is considered that the Pareto set approximation P dominates Q A , ... , A 10 of A , let P A  X  B  X  X  X  P A 1  X  B  X  , P A 2  X  B  X  , ... , P P ( B ) can be seen as a sample of a random variable with an overall number of 100 different observations representing the fraction of times that the output of algorithm A dominates that of algorithm B . If the expectation of P A ( B ) is greater than the expectation of P ( A ), then we can state that algorithm A is better than algorithm
B for the current experiment, since it is more likely that results of the former improve those of the latter than the opposite.
Hence, in order to know if there is a significant difference between the performance of the two compared algorithms, we can use a Wilcoxon test (null hypothesis E  X  P A  X  B  X  X  X  E  X  P
The significance level considered in all the tests to be presented is p  X  0.05. Besides, notice that, in case of including more than one problem instance in the comparison, as done in Section 4.2.3, d P  X  B  X  and d P B  X  A  X  are computed for the considered algorithms as the average of the P A ( B ) and P B ( A ) values for all the considered problem instances. 4.2. Preliminary analysis on nine well-known problem instances
In this section we will show the results of the proposed MAs for nine different real-like problem instances. The analysis devel-oped will serve us as a first step to apply the algorithms to the real-world problem instance in Section 4.3. 4.2.1. Problem instances
Nine problem instances with different features have been selected for this first experimentation: arc111 with cycle time limits of c  X  5755 and 7520 (P1 and P2), barthol2 (P3), bart-hold (P4), lutz2 (P5), lutz3 (P6), mukherje (P7), scholl (P8), and weemag (P9). They have been chosen to be as diverse as possible to test the performance of the algorithms and their variants when they deal with different problem conditions.
Originally, these instances were SALBP-1 instances 3 only having time information. However, we have created their area informa-tion by reverting the task graph to make them bi-objective (as done in Bautista and Pereira, 2007 ). The nine TSALBP-1/3 instances considered are publicly available at http://www.nissan chair.com/TSALBP . 4.2.2. Analysis of the results of the memetic approaches
We have run the different MA variants resulting from the use of the three different global search methods (i.e. MACS, GRASP, and TSALBP-NSGA-II), the two different LS application criteria (always or selective), and the three LS iterations number (20, 50, and 100). Therefore, we will have six memetic MACS variants, three memetic GRASP methods, 4 and six memetic variants of the advanced TSALBP-NSGA-II . All of them will also be benchmarked against the two basic global search approaches not considering the use of LS (i.e. MACS and TSALBP-NSGA-II).

Memetic MACS algorithm : We have designed three memetic variants with 20, 50, and 100 iterations applying the LS to all the solutions (MACS-LS1, MACS-LS2, and MACS-LS3, respectively), and other three variants with 20, 50, and 100 iterations but only applying randomly the LS to a 0.0625 percent of the generated solutions (MACS-LS4, MACS-LS5, and MACS-LS6, respectively).
The HVR values are shown in the first 14 rows of Table 2 . The boxplots of the I e performance indicator values of the memetic
MACS variants are shown in Fig. 3 . The analysis of the obtained results arises that: respectively). Therefore, the appropriate trade-off is obtained with 50 iterations and running the memetic MACS algorithm for more iterations is not necessary.

The latter memetic variants, MACS-LS2 and MACS-LS3, are the best ones in view of the results obtained in both performance indicators. They show a better convergence than the memetic
MACS-LS1 and, of course, than the memetic variants that applied less intensification in the LS operator (MACS-LS4,
MACS-LS5, MACS-LS6). The latter facts are confirmed by the attainment surface plots of the Pareto front approximations generated by the memetic MACS variants in Fig. 4 .

However, in some instances, MACS-LS1 obtains solutions of the Pareto front that are not achieved by the  X  X  X est X  X  MACS-based MAs, MACS-LS2 and MACS-LS3. This situation can also be observed in the attainment surface plot at the bottom of
Fig. 4 . It is due to the fact that MACS-LS1 induces more diversity in the search process rather than a higher intensifica-tion by means of more LS iterations as applied by the other two variants.

GRASP : We analyse the behaviour of the GRASP methods with different LS intensification degrees. According to the HVR perfor-mance indicator values (central part of Table 2 ), the boxplots in most important considerations are: Overall, the variants with more LS iterations (GRASP-LS2 and
GRASP-LS3) again outperform the variant with only 20 itera-tions (GRASP-LS1).

There is a need of running the LS operators more than 20 iterations in all the problem instances but P5, P6, and P9 (see HVR values and I e boxplots).

The best Pareto front approximations are obtained by the algorithms that apply the highest number of LS iterations (see Fig. 6 ).

Memetic advanced TSALBP-NSGA-II :The HVR values correspond-ing to these memetic designs are collected at the bottom part of Table 2 while the corresponding values of the I e performance indicator are depicted in Fig. 7 . In this case, we can conclude that:
As in MACS, the MAs show a better performance than the basic advanced TSALBP-NSGA-II . However, in this case the difference between the MAs and the basic global search methods is lower because of the outstanding performance of the basic advanced TSALBP-NSGA-II .
 Applying the LS to all the solutions found by the advanced
TSALBP-NSGA-II is again better than considering a selective application. We can observe how TN-LS1, TN-LS2, and TN-LS3 outperform the other three variants in both the HVR values of Table 2 and the I e boxplots of Fig. 7 .

Unlike the other two designs, i.e. memetic MACS and GRASP, the best memetic advanced TSALBP-NSGA-II is the TN-LS1 variant, which runs the LS operator just 20 iterations. Only in instances P4, P7, and P9, the memetic variants with higher LS intensification achieve better performance, but with a very low difference. The attainment surface plot in Fig. 8 corroborates this conclusion, showing how the use of less iterations (more diversification rather than intensification) allows obtaining some solutions that are not reached by the MAs that consider more LS iterations. 4.2.3. Global analysis
In this section we will summarise the global conclusions of the performance of the different memetic approaches proposed for solving the TSALBP-1/3:
The application of the multi-criteria LS method to every solution generated by the global search methods is always better than using a selective criterion based on its application to the 0.0625% of those solutions.

Normally, 50 iterations are enough for the LS methods. There-fore, spending time by running more iterations is not recom-mended since the obtained intensification X  X iversification trade-off performs equal or worst.

In order to achieve the best solutions, a good exploratory global search method as the advanced TSALBP-NSGA-II is
LS2, GRASP-LS3, and TN-LS1, it can be clearly observed how there is a strong relation between the quality of the global search and the number of iterations required by the LS. When we use worse global search procedures, more iterations in the LS provide better results. The selected best variants will be compared to each other but taking in mind that these best variants can change depending on the instance.

We have used the same performance indicators to reach the comparing the three MAs, and the attainment surface plots (two of them are shown in Fig. 11 ). For a better comparison, a statistical test is also applied on the dominance probabilities calculated for the I e indicator on every pair of algorithms. These dominance probabilities are shown in the boxplots of Fig. 10 . See Section 4.1 to recall their calculation process.

Table 3 provides the results of the Wilcoxon statistical test on the dominance probabilities of the best variants of the algorithms.
Every cell of the table includes the p -values for the nine problem instances together with a  X  X   X   X  X ,  X  X   X  X , or  X  X   X   X  X  symbol, with a different meaning. Every symbol shows that the algorithm in that row is significantly better (  X  ), worse ( ) or equal (  X  )in performance (using the I e indicator) than the one that appears in the column. Area (length in meters)
The clearest conclusion in view of the indicators is the memetic advanced TSALBP-NSGA-II is the best MA. It obtains better HVR and I e performance indicator values in all the problem instances but P7. This is the only problem instance where the advanced TSALBP-NSGA-II is not the best algorithm. In this case, the memetic MACS algorithm outperforms the remainder. Although there is not a big difference between the latter two algorithms, the memetic advanced TSALBP-NSGA-II is worse in P7 because of the performance variability of its runs. The memetic
MACS algorithm is more stable and achieves similar behaviour in the 10 runs corresponding to the latter problem instance.
The good performance of the advanced TSALBP-NSGA-II is again clear looking at the dominance probabilities of Fig. 10 and the results obtained by the advanced TSALBP-NSGA-II are significantly better (represented by means of a  X  X   X   X  X  symbol in the table) than those by the rest of the algorithms, MACS and GRASP.

A comparison between the memetic MACS and GRASP is more difficult since their behaviour varies depending on the problem instance. The memetic MACS algorithm performance is better than GRASP in P3, P7, and P8, but worse in P1, P4, and P9. In P2,
P5, and P6, they behave similarly and the values of the perfor-mance indicators are very close. The results of the Wilcoxon statistical test are in line with this analysis since there is no significance between them as can be observed from the  X  X   X   X  X  symbol of Table 3 . Therefore, it cannot be stated which of these two MAs is the best one without focusing on a particular instance.
The attainment surface plots in Fig. 11 corroborate this fact. 4.3. Experimentation on the Nissan case study
In the last section of the experimentation we will apply the proposed MAs to a real-world case study. First, we will describe the Nissan case study in Section 4.3.1 and then we will present and analyse the obtained results in Sections 4.3.2 and 4.3.3. 4.3.1. Nissan case study description
We consider the application of the best MA variants to a real-world problem corresponding to the assembly process of the Area (length in meters) Nissan Pathfinder engine (shown in Fig. 12 ) at the plant of
Barcelona (Spain). The assembly of these engines is divided into 378 operation tasks, although we have grouped these opera-tions into 140 different tasks. The available cycle time is 180 s. More information can be found at http://www.nissanchair.com/ TSALBP .

Appendix A reports the details about the tackled Nissan instance, which is originated in the final assembly phase of the
Nissan Pathfinder engines. It shows the task number ( n ), internal identifier from NISSAN (id.), duration of the task ( t ) in seconds, required area ( a ) in metres, and precedence constraints of each task. Some changes have been made to the original data which are described as follows: The original line corresponds to a mixed-model assembly line.
Following the procedure in use in Nissan, the duration of tasks has been modified taking into account the expected produc-tion mix of the variants to assemble. Notice that, the produc-tion mix does not alter the area required for each task.
The space requirements originated by tools and machinery required for the assembly have been omitted. Due to the similitude of the tasks and the low cost of the used machinery, each workstation is considered to contain all the tools. Thus, P8 P9 1.00 1.05 1.10 1.15 1.20 1.00 1.05 1.10 1.15 1.20 1.00 1.05 1.10 1.15 1.20 the space required for them can be subtracted from the total available space for a workstation.

The duration, required area, and precedence constraints of tasks have been slightly altered due to confidentiality issues. 4.3.2. Analysis of the results of the proposed memetic approaches
As done with the real-like instances, we have analysed the performance of the different memetic designs and variants proposed. We have compared six memetic MACS variants, three GRASP methods, and six memetic variants of the advanced TSALBP-NSGA-II . The HVR values of the algorithms can be seen in
Table 4 and the I e values of the boxplots in Fig. 13 . In the next paragraphs the results obtained by the algorithms are analysed.
Memetic MACS algorithm : We can reach the following conclusions:
The memetic variants of the MACS algorithm improve the performance of the MACS algorithm. The difference is clear both in the HVR values and in the boxplots.

As happened with the preliminary experimentation, the memetic MACS variants that applied the LS methods to all the solutions (M-LS1, M-LS2, M-LS3) are better than the remainder (M-LS4, M-LS5, M-LS6).
 Among the first three memetic MACS variants, M-LS2 and
M-LS3 are those achieving the best results according to the used performance indicators. Therefore, an intermediate value between 20 iterations (M-LS1) and 100 iterations (M-LS3) is enough to lead to a proper convergence.

GRASP : Again, variants including LS clearly outperform the basic algorithm (first stage of the GRASP in this case). The best convergence is obtained by G-LS1 and G-LS2 with a low difference with respect to the third option. Then, there is not a need for a high number of iterations to provide the best results, 20 iterations are enough. In fact, the highest exploitation value (100 iterations) slightly decreases the performance of the algorithm. Area (length in meters) Area (length in meters) marise the obtained conclusions: and TN-LS3 are also better than TN-LS4, TN-LS5, and TN-LS6 in the Nissan case study.

However, for the advanced TSALBP-NSGA-II , more than 20 iterations are needed to achieve the best performance as
T-LS2 and T-LS3 results improve T-LS1 ones. This situation is equivalent to the memetic MACS algorithms in the Nissan case study but differs from what happened for the same MA designs in the experiments developed in Section 4.2.
 4.3.3. Global analysis and final benchmarking
The global conclusions for the Nissan case study are basically that: (a) the memetic variants in all the algorithms are better than the basic global search with a significant performance difference (i.e. proper memetic designs have been achieved); (b) the MAs that apply the LS to all the solutions are always better than the rest; (c) there is not a great difference between the number of iterations used in the algorithms, but normally a trade-off value of 50 iterations is the most appropriate.

For the final benchmarking we have selected the best MA for each global search method as done in the preliminary study.
Table 4 shows the HVR values of the memetic MACS-LS2 algo-rithm, the GRASP-LS1, and the memetic TN-LS2. The boxplots of the I e performance indicator comparing the latter three algo-rithms as well as their attainment surface plots are represented in Fig. 14 .

Dominance probabilities based on the I e performance indicator comparisons between the best algorithms are calculated and represented using the boxplots in Fig. 15 . Wilcoxon statistical test is also applied for the Nissan case study as done with the real-like instances in Section 4.2.3. The results of the test are shown in
Table 5 .
In view of the results provided by all these indicators we can conclude that the memetic advanced TSALBP-NSGA-II is the best algorithm to deal with the real-world Nissan instance, reaching almost all the solutions in the ps eudo-optimal Pareto front (see
Fig. 14 ), and obtaining better I e values, dominance probabilities ( Fig. 15 ), and HVR values than the remainder. The advanced TSALBP-
NSGA-II is also significantly better than GRASP-LS1 according to the statistical test shown in Table 5 . Although there is no statistical significance with respect to MACS-LS2 (see symbol  X  X   X   X  X  in the corresponding cells of the table), the obtained p -value is very close shows how the advanced TSALBP-NSGA-II is outperforming MACS-LS2 on several comparisons while the latter is never able to do so.
The memetic MACS algorithm is the second algorithm in performance. It converges better than the GRASP-LS1 and its in Table 5 ). GRASP-LS1 is finally the worst performing algorithm. 5. Concluding remarks and future works
In this contribution, we have successfully proposed novel memetic designs to solve the TSALBP-1/3. The new MAs to tackle this industrial problem are multiobjective and make use of a multi-criteria LS procedure with two problem-specific neighbourhood operators, one per objective. The proposals are based on three different global search methods: a MACS algorithm, a GRASP, and an advanced NSGA-II-based technique for the TSALBP-1/3.
We have studied different variants to analyse the impact of the intensification and diversification induced by the multi-criteria LS on the performance of the MAs when solving nine realistic and one real-life problem instance. From this study, we have concluded that the LS is more powerful if it is applied to all the generated solutions and not just to a reduced number of them (a 0.0625 percent of the solutions). In addition, the LS depth, i.e. the number of iterations to be considered for the LS, 0.0 0.2 0.4 0.6 0.8 1.0 was also studied. The behaviour of this parameter depends on the problem instance and the search capabilities of the global search method. When the latter method already shows a good intensification X  X iversification trade-off, the resulting MA will perform better with a low number of LS iterations. We can state that, in this experimentation, there is not a need to perform more than 50 iterations in any case.

Apart from the LS study, the three memetic designs were compared to each other. The memetic advanced TSALBP-NSGA-II showed its excellent performance, obtaining the best solutions. The second MA in quality was not clear enough since the memetic MACS and GRASP performed differently depending on the pro-blem instance. The memetic advanced TSALBP-NSGA-II was again the best approach to deal with the real instance of the Nissan industry plant in Barcelona, obtaining outstanding results.
Future work is devoted to: (i) apply preferences in the algorithms by means of interactive procedures, (ii) deal with the combined three-objective optimisation of cycle time, area, and number of stations, and (iii) study the use of other MOACO algorithms to solve the problem.
 Acknowledgements This work has been supported by the UPC Nissan Chair and the Spanish Ministerio de Educacio  X  n y Ciencia under the PROTHIUS-III project (DPI2010-16759) and by the Spanish Ministerio de Ciencia e Innovacio  X  n under project TIN2009-07727, both including EDRF fundings.
 Appendix A. Description of the Nissan Pathfinder instance
The assembly line of the Nissan Pathfinder is distributed serially where nine types of engines ( p 1 , y , p 9 ) with different characteristics are assembled. The first three engines are for 4 4 vehicles, the last four for trucks of medium weight, and the models p 4 and p 5 are user for vans.

Further information about the tasks of the assembly line is reported in Table 6 .
 References
