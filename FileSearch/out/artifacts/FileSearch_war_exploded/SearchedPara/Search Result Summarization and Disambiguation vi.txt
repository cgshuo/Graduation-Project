 Topic hierarchies are a popular method of summarizing the results obtained in response to a query in various search ap-plications. However, topic hierarchies are rigid when they are pre-defined and somewhat unintuitive when they are dy-namically generated by statistical techniques. In this paper, we propose an alternative approach to query disambigua-tion and result summarization by placing the results in set of contextual dimensions which can be viewed as facets. For the generic search scenario, we illustrate our approach by us-ing three types of contextual dimensions, namely, concepts , features ,and specializations . We use NLP techniques and a data mining algorithm to select distinct contexts. Categories and Subject Descriptors H3.1 [ Informa-tion Storage and Retrieval ]: Information Search and Retrieval; H.5.2 [ Information Interfaces and Presen-tation ]: User Interfaces X  Graphical user interfaces General Terms Human Factors, Algorithms Keywords Summarization, information retrieval
Search engine ranked lists have been found to be quite ef-fective for navigational queries . However, they are not well suited for browsing tasks. Many clustering, machine learn-ing, and graph theoretic techniques have been suggested in the literature for generating a one-level or hierarchical overview of a collection of documents [1, 3]. Some Web ser-vices such as Vivisimo 1 and the erstwhile Northern Light also summarize the query results in the form of a topic tree in which the clusters at the top level can be refined recur-sively in a tree-like manner. While this interface is fairly effective in presenting an overview of the results, it can be quite rigid and unintuitive for retrieval. For example, typ-ical top-level cluster labels that might be obtained for the query  X  X reat mathematician X  can include contexts such as  X  X odern X ,  X  X ooks X  and  X  X ncient X . Intuitively, it makes sense to compare the context  X  X odern X  with the context  X  X ncient X , because these contexts are of the same type and complementary in nature. However,  X  X odern X  and  X  X ooks X  are incomparable . Our approach overcomes the inflexibility  X 
The work was done while the author was at IBM problem of concept hierarchies by using the idea of contex-tual dimensions. A contextual dimension defines a specific type to a context. We illustrate our approach by the use of three contextual dimensions, viz , concepts , features and specializations for disambiguating and summarizing search results returned by a generic search engine. A contextual dimension defines a specific type of context. The contexts are said to be comparable if they belong to the same dimension otherwise they are said to be incomparable . Ideally the contextual dimensions need to be identified for a given search scenario. However, in this paper, we assume that the set of contextual dimensions is known and then develop a method to identify mutually exclusive contexts along different contextual dimensions for a given query. We use three contextual dimensions namely concepts , features and specializations , that are important for describing search results in a generic search applications.

Concepts such as  X  X riangle X , are generalizations that helps us organize information into categories. The words such as  X  X odern X  are known as features , and they are qualifiers or modifiers to concepts . Besides these two classes of contexts, there is another class which is useful in searching and brows-ing, i.e., specializations such as  X  X ewton X .

We represent a document d as a triple &lt;NN,NP,JJ&gt; where the set NN corresponds to all the common nouns or common noun phrases, the set NP corresponds to all proper nouns or proper noun phrases, and the set JJ corresponds to all adjectives or adjectival phrases in the document. In natural languages, common nouns and noun phrases typi-cally define concepts . Adjectives are used as modifiers to nouns. Therefore, they denote features . Proper nouns such as  X  X orsche X  denote specializations . We use a statistical tag-ger called QTAG 2 to tag the words. To generate a summary of the document collection and provide an interface for dis-ambiguation, we first identify key concepts, features, and specializations. Since we would like the summary to be as compact as possible, the contexts need to be mutually ex-clusive (i.e., they are independent or occur rarely together) to the maximum possible degree.
Let D denote a set of documents, and C denote the set of contexts contained in them. Let  X  : C X  X  ( D )denote a function that maps every element c i  X  X  toasubset D i of
D . Here, P ( D ) denotes the power set of D and D i de-notes the subset of documents in which context c i occurs. Given a positive integer K  X |C| , the problem is to find C  X  X  of cardinality  X  K such that I = i,j  X  X  |  X  ( c j )  X   X  ( c i ) | is as small as possible. Minimiza-tion of I ensures that the subsets  X  ( c i ) have as little overlap as possible, i.e., the contexts c i  X  X  are as mutually exclu-sive as possible. To find a reasonably good solution in an efficient manner, we use a modified version of Thrifty Tra-verse [2]. We create three representations of each document d . One that contains only the words or phrases tagged as concepts (denoted by d NN i ), one that contains only the words or phrases tagged as features (denoted by d JJ i ), one that contains only the words or phrases tagged as specializations (denoted by d NP i ). This gives us three sets of documents, denoted by D NN , D JJ ,and D NP , respectively. We run the algorithm three times; once with D NN to generate distinct concepts , again with D JJ to generate distinct features ,and finally with D NP to generate distinct specializations .
Algorithm Distinct Contexts input : context q , minconf , D NN or D JJ or D NP . output : a subset C d of C that contains distinct contexts. 1. Prune infrequently occurring contexts, i.e., remove c i 2. Apply the Apriori algorithm [4] to identify the set S 3. While there are elements S i in S greedy-pick
From all pairs ( S i ,S j ) of elements of S , select the one that minimizes: Essentially, the algorithm uses an agglomerative approach to build larger and larger distinct context sets from the fre-quently occurring contextsets.
Once the independent contexts are identified, we use a graphical interface to present them in three columns. The first column contains independent concepts, the second one independent features, and the third one independent spe-cializations. The user may then choose zero or more op-tions from the first, second, and third columns. By default, an  X  X R X  operator is applied between the selected options within each column, and an  X  X ND X  operator between selec-tions across columns. The interface resembles a tripartite graph where each choice of the user leads to the selection of a portion of the graph. Figure 1 shows the result page for the query  X  X reat mathematician X . The upper frame lists all key concepts, features, and specializations in three columns. Figure 1: Screen shot of the user interface for the query  X  X reat mathematician X  The user is also presented with a check box option for each context. The lower frame displays the search results corre-sponding to the selected options. In the current example, the results correspond to (French OR Greek) AND (Mathe-matics OR Philosopher OR Astronomer) .
To evaluate the performance of Context Miner ,weused 25 popular queries from Web logs. These 25 queries were selected from the following sources: (1) common one-word queries as reported by Google 3 and (2) Word Tracker 4 re-port that lists commonly used query terms mined from a large log of meta-search queries. We compared the effort required to retrieve a result from Context Miner with the effort required to retrieve the same result from the ranked list of a popular search engine. In our results, we found that on an average, the effort required to retrieve a document using our interface, is reduced to one fourth of the effort, required in scanning through all the ranked snippets until the result is found.
