
Taking stock market database as an example, associ-ation rule mining can be used to analyze the share price movements. Suppose a database registers the price of every stock at the end of each trading day. Association mining may find rules like 
While RI reflects some relationship among the prices, its role in price prediction is limited; and traders may be more interested in the following type of rules: 
Unfortunately, current association rule miners cannot discover this type of rules as there is a fundamental difference between the rules like Ra and those like RI. 
A classical association rule like RI expresses the as-sociations among items within the same transaction. 
On the other hand, rule R2 represents some associa-tion relationship among the field values from different transaction records. To distinguish these two types of association, we name the classical association rules as intra-transaction associations and the latter as inter-transaction associations. Inter-transaction associa-tions are different from the mining sequential patterns in transaction data [AS95], and the mining of episodes by Mannila, et al. [MTV97], although all of them in-volve a temporal component. This is because both the mining of sequential patterns and episodes involve form-ing transactions from given data before mining take place. call inter-transaction association rules is proposed and an efficient algorithm for mining them is described in this paper. An interesting property,  X  X  frequent inter-transaction itemsets X  is observed and is used to mine efficiently. denote the set of all possible extended-items as C X . Given C and w, we will have 
Next we will introduce two terms: intra-transaction itemset and inter-transaction itemset. B, 1 5 i &lt; u. 0 
Now we are ready to define the concept of inter-2. 3ed(O) E X, 1 5 i 5 u. 3. 3ei(j) E Y, 1 5 i 5 u,j # 0. 
Similar to the studies in mining intra-transaction association rules, we introduce two measures of inter-transaction association rules: support and confidence. 
Given a minimum support level minsup and a minimum confidence level minconf, our task is to mine the complete set of inter-transaction association rules from the transaction database with support 1 minsup and confidence 2 minconf. The problem of mining inter-transaction association rules can be decomposed into two subproblems: 1. Find all inter-transaction itemsets with support Figure 1: Data Structure for Storing Intra-Transaction Itemsets 
After FILT is formed, the database is transformed into a set of encoded Frequent-Itemset Tables, (called FIT tables). We have in total m=k FIT tables, {Fl,...,Fmark)t h w ere rnuzk is the maximum size of the intra-transaction itemsets discovered. Each table Fk will be of the form {di, IDseti} where di is the value of the dimensional attribute and IDseti is the IDS of frequent k-itemsets that are found in the transaction. 3.2 Phase II: Mining Frequent In this phase, inter-transactions itemsets are repre-sented by their ID encoding defined below. become an equivalent itemset if each of them has a 
With this observation, we came up with the hash-table method for generating candidate (k + 1)-itemsets from frequent inter-transaction k-itemsets. Each hash bucket in the table points to a linked list of frequent inter-transaction k-itemset that is hashed to the hash bucket. A k-itemset will be hashed multiple times, each time with one of its subwindows being set to 0. When a k-itemset, I, is hashed to a particular linked list, FIT1 will go through the linked list to perform intra-transaction join or cross-transaction join between I and itemsets that satisfied the joining condition. I will then be added to the end of the list. 
While the candidate itemsets are being generated, they are inserted into a hash-tree to facilitate efficient counting of support [AS94]. To assess the performance of the proposed algorithms, experiments were conducted using synthetic data. The method used by this study to generate synthetic transactions is similar to the one used in [AS941 with some modifications noted below. 
To generate the synthetic data, We first generate a set L of potentially frequent inter-transaction itemsets chosen from C items. The size of each itemset in IL1 follows a Poisson distribution with mean III. When generating the transactions, the size of each transaction is determined from a Poisson distribution with mean IT]. Itemsets are then assigned to the transaction. These assigned itemsets are either newly picked from the set IL( or are picked when generating earlier transactions. Since itemsets may span multiple transactions, they may be stored in a list for inclusion in subsequent transaction. 
Using the method above, we generated a set of syn-thetic data with 10000 transactions using the following setting: ]T]=5, IL(=lOOO, ]1]==5, ( C I=500 and R=4. 
To compare the performance of EH-Apriori and FITI, we vary the support level and run the two algorithms on the data set with maxspan equal to 4 intervals. The running time of EH-Apriori and FIT1 against the support level are shown in Figure 2. The experiment shows that FIT1 outperforms EH-Apriori by a large margin for the data set. This is not surprising because FIT1 avoids a large amount of recomputation by making use of FILT and the FIT tables. Due to the fact that FIT1 is a clear winner, our next experiment on scalability is performed only on FITI. 
We test the scalability of FIT1 by increasing the number of transactions in the dataset from 10k to lOOOk with support=O.l% and maxspan=4. The result in Figure 3 shows that the running time of FIT1 
