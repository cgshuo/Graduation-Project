 1. Introduction 1.1. Vehicle routing problems
The generic problem under consideration in this paper is related to the class of vehicle routing problems (VRP), in which the aim is to serve the demand of a set of customers with trips performed by vehicles that travel through routes at least cost. The basic version, the Capacitated VRP (CVRP), is often de fi nodes, one depot (node 0) and n customers indexed from 1 to n . fl eet size is not imposed: the number of vehicles used is a decision variable. The cost to travel from node i to node j is c ij the cost of a shortest path from node i to node j in the real road network. The objective of the CVRP consists in fi nding a set of minimal cost trips to serve all the customers taking into account the following constraints: deliveries cannot be split (each customer must be served by a single vehicle); each route starts and ends at the depot; the total demand of the customers served by one vehicle must fi t its capacity.

The CVRP is NP-hard and exact methods experience particu-larly large computational time to handle instances with up to 100 customers ( Baldacci and Mingozzi, 2009 ). Among some of the best heuristic approaches for the CVRP, hybrid genetic algorithms seem a good approach ( Prins, 2004; Nagata and Braysy, 2009; Vidal et al., 2014 ). Furthermore, Mester and Braysy (2007) propose a very ef fi cient metaheuristic that hybrids guided local search and evolutionary strategies. Extensive research has been proposed to solve this NP-hard problem ( Golden et al., 2008 ). However, usual methods do not take into account the route balancing objective and may result in a high disparity in the route lengths. That might be problematic in real context when routes are performed by employees that should have some kind of equivalent schedules in terms of workload. Hence minimizing the disparity through a balance function is relevant.

Speci fi c variants of the VRP address balanced driver workload or other balancing objectives (for example the number of custo-mers visited, the quantity of goods delivered or the time required or the tour length). Let us note the special objective denoted balanced cargo (BCVRP) explicitly considered by Lee and Ueng products, in which the balance criterion stands on the load. A similar problem including time windows (TW) and denoted BCVRPTW has been introduced in ( Kritikos and Ioannou, 2010 ).
In this paper, we focus on the balance on the cost criterion. In equivalent to the duration. Thus, the aim is to provide a fair scheduling to the drivers by minimizing the difference between their workload. In fact, when the length of the longest and the shortest routes are close, this induce that all the routes have similar durations. 1.2. Vehicle routing problem with route balancing VRP with route balancing is an extension of the CVRP, denoted
VRPRB, in which two criteria are optimized in a bi-objective fashion:
The minimization of total cost related to the distance traveled by the vehicles;
The minimization of the difference between the largest route cost and the smallest route cost that is also the difference between the longest and shortest routes if the cost is propor-tional to the distance, with the same factor for any vehicle. This condition holds in most of the VRP benchmarks, and the cost will be the only feature used in the description of our method.
For decision makers, route balancing has several meanings. The most common interpretation is to minimize the cost of the most expensive route (min  X  max objective), which corresponds to mini-mizing the makespan in scheduling theory if the costs represent durations. The underlying goal can be to avoid long routes for the distribution process as soon as possible when the routes are performed in parallel. In practice, the balance criterion is opti-mized subject to a notion of time/cost limitation on the routing.
For instance, Lacomme et al. (2004) propose a memetic algorithm to minimize makespan in the Capacitated Arc Routing Problem (CARP) with a fi xed fl eet. Then, Lacomme et al. (2006) describe a bi-objective genetic algorithm, inspired by a non-domination based genetic algorithm (NSGA-2) but reinforced by a local search procedure for the CARP with the classical objective (total cost of traversed arcs) and the minimization of the makespan.
The drawback of this kind of min  X  max objective is that it acts on
The VRP with Route Balancing (VRPB) considers two objectives, the usual one (total routing cost) and another interpretation of the de fi deal with this problem.

A fi rst study from Jozefowiez et al. (2006) considers the VRPRB and proposesanNSGA-2,anoptimizationschemeusedinnumerousbi-solutions in a multi-objective context, numerous quality measures and Corne, 2002 ). Zitzler et al. (2003) propose an overview high-comparison between two fronts without any assumption on the optimal Pareto front. The C -measure introduced by Knowles and solutions in F 2 which are weakly dominated by solutions of F
C  X  F ;
F 2  X  X  1allsolutionsof F 2 are dominated by solutions of F the evaluation encompasses the C -measure between each three versions of the algorithm. The conclusion is that most ef is the one using a new mechanism, called the elitist diversi implemented with parallelization techniques. 1.3. Proposal
In this paper, our aim is to develop a new ef fi cient approach to tackle multi-objective routing problems, and particularly the
VRPRB. An adaptation of the split procedure ( Prins, 2004 )is developed to compute a set of non-dominated solutions from any TSP tour (also denoted indirect representation). To further search the solution space, a method based on a path relinking algorithm allows to evaluate solutions encountered on paths between TSP tours. The rest of the paper is organized as follows.
Section 2 gives an overview of the solution method before of a splitting procedure to tackle bi-criteria VRP. Section 4 is devoted to the path relinking algorithm developed to explore the solution space. Section 5 describes the overall pseudo code for solving the VRPRB. Results are exposed in Section 6 . Conclusions and perspectives are given in Section 7 . 2. Overview of proposed solution method and originality
The proposed algorithm for the VRPRB is a bi-objective evolu-tionary metaheuristic based on Pareto optimality, called Multi-
Start Split-based Path Relinking (MSSPR). It can be summarized as follows, knowing that some details are skipped for the sake of clarity: The method works with two populations of non-dominated VRPRB solutions, POP and GPOP.

GPOP stores the approximate Pareto front, returned at the end of the algorithm.

Each iteration builds a set POP of new solutions and adds it to GPOP.

MSSPR alternates between two search spaces: the space of TSP tours, also called giant tours, and the space of VRPRB solutions.
The initialization of POP begins in the space of giant tours: two randomized heuristics are called to generate giant tours. An evaluation procedure, described below, is applied to each tour to deduce several non-dominated VRPRB solutions which are stored in POP.

POP is then evolved using a path relinking (PR) procedure as recombination operator.

The PR is applied to a given pair (A, B) of VRPRB solutions but traces a path in the space of giant tours. A and B are fi converted into two giant tours T and U by concatenating their routes and removing depot nodes. Guided by a permutation-based distance, the PR progressively transforms A into B. Here again, the giant tours obtained are decoded by the evaluation procedure.

After a given number of main iterations, GPOP undergoes a post-optimization step where PR is applied to selected pairs of solutions.

All population data structures store solutions into an increasing cost order and the maximal number of solutions is upper bounded by N .

Roughly speaking, the evaluation procedure calls fi rst a bi-objective splitting procedure which deduces several non-dominated solutions from the input giant tour. These solutions are Pareto-optimal, subject to the sequence de fi ned by the tour. the incumbent solution is dominated by the new one. The improved solutions are fi nally added into POP and dominated solutions are deleted.

Keeping only non-dominated solutions does not really limit the search on the solution space. As showed in many previous papers using the Split principle (see the survey on split methods intro-has no real impact in this context. In fact, working on giant tours split afterward allows searching the whole solution space. Further-more, the global method encompasses local searches and path relinking, avoiding lacking areas of the solution space (due to the randomness of any metaheuristics). All previous published meth-ods on split have successfully investigated optimal split and by consequence generate only non-dominated solutions. The approach we introduce here makes reference to the different publications on split and the method belongs to the same line of thoughts and attitudes.

MSSPR shares some features with scatter search: a population new solutions (POP), systematic improvement via local search, recombination operator. It can be viewed also as a kind of multi-objective GA where chromosomes (genotypes) are de fi ned by TSP tours which are decoded via the splitting procedure to get VRPRB solutions (phenotypes). However, to the best of our knowledge, the following features are original:
This is the fi rst time a metaheuristic operating on two search spaces is proposed for a multi-objective vehicle routing problem.

The crossover/recombination operator is replaced by a PR procedure, which allows to obtaining several non-dominated solutions in a single application.

The decoding operator (splitting procedure) also returns a set of non-dominated solutions for each call and contributes to the evolution.

The components of MSSPR are explained in the next sections, before giving a more formal algorithm. Without loss of generality assumed to be sorted in increasing cost order. 3. Split algorithm for vehicle routing problem with route balancing 3.1. Split based approaches for routing problems  X  general purpose
The split algorithm has been fi rst proposed by Beasley (1983) as the Capacitated Vehicle Routing Problem. The fi rst phase com-putes a giant tour of all customers (solving a Traveling Salesman Problem  X  TSP), by relaxing vehicle capacity and maximum tour length. The second phase constructs a cost network in which an the TSP tour, and then applies a shortest path algorithm to least cost feasible trips. The second phase can be solved exactly.
The principle has then been further used from 2001 when it has been implemented within a more general framework for routing problems. At that time, it was for the Capacitated Arc Routing Problem (CARP) ( Lacomme et al., 2001, 2004 ). The introduced method competes with the best published methods from 2001 to 2008 on the CARP. Prins (2004) introduced a very ef fi cient method for the VRP also taking advantages of the split algorithm. In this context, the number of split applications in routing problems increases strongly as pointed out by Duhamel et al. (2011) and Prins et al. (2014) , and covers now CARP, VRP, location routing and numerous extensions which represent a set of more than 70 publications.

Actually, the key-point of such an approach is to use two which is a compact representation of a solution of the problem (such as a TSP tour in vehicle routing context) allowing to search on a smaller solution space than with whole solutions, and (ii) a decoding function f , which provides a whole solution from a QDRS to a solution. In addition, Duhamel et al. (2011) state that an ef fi cient routing metaheuristic should involve also a local search (LS) on whole solutions using, for instance, well-known basic VRP moves, a diversi fi cation process to avoid a premature convergence to local minima, and heuristics to generate quickly solutions of relatively good quality during the initialization or the diversi tion. Fig. 1 summarizes what they called an ef fi cient routing framework.

For the VRPRB, this principle is endorsed by adapting the decoding function (split) in order to generate a set of non-dominated solutions from one TSP tour. Further details are given in the following. A procedure Concat represents the function f which creates a TSP tour from a solution. In addition to classical VRP moves, new moves are proposed to enforce the local search on both criteria ( Section 5 ). The search of the solution space is entrusted to a path relinking algorithm ( Section 4 ), operating on indirect solutions. A multi-start scheme aims at avoiding prema-ture convergence, and generates solutions with two randomized heuristics ( Section 5 ). 3.2. Split procedures for bi-criteria routing problems
In this paper, three versions of splitting are used: one is adapted to the bi-objective feature of the problem, and two others the balance. These three versions of split differ from their dominance rules.

The split procedure, proposed by Beasley (1983) for VRP with (TSP tour on customers). N contains n  X  1 nodes numbered from 0to n , 0 being an arti fi cial initial node. An arc  X  i 1 quantity served during the trip. Splitting T corresponds to the computation of the shortest path from node 0 to node n in H , using Bellman algorithm for instance. This label-correcting algorithm node i . Given two potential labels, L 1 and L 2 on a node, L dominates L 2 if the cost given by L 2 is strictly superior than L
This version of the split procedure is used here to optimize only the cost criterion.

Duhamel et al. (2011) give a generic description of split function and show that on more complex extensions of VRP, it may require to solve a resource-constrained shortest path (RCSPP) on H and to manage several labels per node which is typically done by a label-tion on the balance criterion does not imply to solve an RCSPP.
However, the computation of the bi-objective shortest path does not others. The consequence is that a huge amount of labels could be generatedoneachnode,andthecomputationofashortestpathinthe auxiliary graph may not be polynomial unless dominance rules are addressed. 3.3. Propagation and dominance rules for labels
During the computation of a shortest path in the auxiliary graph, information on the balance criterion (i.e. value of the difference between the cheapest and the most expansive trips) does not permit to compare labels on a given node. It is possible larger difference at the end of the path. This feature excludes to de fi ne a dominance rule able to prune labels with the certitude to not lose one leading to a non-dominated label on the fi nal node.
However, it is not desirable to keep all generated labels on each node since it would produce an exponential number of labels to evaluate on the fi nal node. Thus, to obtain a time ef fi path algorithm we introduce dominance rules that offer a com-promise between split quality and the number of labels kept on nodes (so on the computation time). This policy is not without any consequence on the split optimality but the proposed rules computational time.

L if and only if
L : C o L 2 : C and L 1 : B r L 2 : B or
L : C r L 2 : C and L 1 : B o L 2 : B
The propagation of a label from node i to node j depends on both the considered label and on the subsequence  X  ij . L stored at node i and is the operator which appends a sequence to a label L i . The new label L j at node j is L j  X  L i update more easily the balance, it is interesting to store also the smallest and largest trip cost on each label. A label then is characterized by four attributes L  X  X  C ; B ; t 1 ; t 2  X  , with L of the tuple:
L : C : the total cost of the solution at the given node
L : B : the balance of the solution at the given node
L : t 1 : the smallest cost of a trip in the solution at the given node
L : t 2 : the largest cost of a trip in the solution at the given node
In fact, if the sequence  X  ij represents a trip of a length comprised in L i : t 1 ; L i : t 2 to the minimum (maximum) of L i : t 1 ( L i : t 2 ) and h  X  The label propagation can be achieved as follows:
L C  X  L i : C  X  h  X   X  ij  X 
L t  X  min  X  L i : t 1 ; h  X   X  ij  X  X 
L t  X  max  X  L i : t 2 ; h  X   X  ij  X  X 
L B  X  L j : t 2 L j : t 1
The dominance rule limits the number of labels stored at each node to a minor subset. However, a large number of labels could still be generated and an additional time-saving approach consists AsolutionS.
 Improved solution S X  f A quasi-direct A solution S. A quasi-direct representation of solution (QDRS) in limiting the maximal number N L of labels generated during the split process or per node. In our implementation, the number is limited only on each node. Such restrictions, in addition to the heuristic dominance rules, can strongly reduce the CPU time, but can yield to sub-optimal splitting. Nevertheless, previous research has shown that using a sub-optimal splitting policy in a global framework is not a real drawback ( Boudia et al., 2007b ): in most lead the search on promising area of the solution space and the other tools (such as local searches) intensify and potentially improve the results. Thus, the slight difference between optimal and suboptimal splitting has no impact on the quality of solutions found at the end of the process. 3.4. Remarks In the following, the bi-objective split function is denoted
Split_Giant_Tour , the variant called Split_Giant_Tour_Cost is the classical implementation of the split algorithm where the dominance rule concerns only the cost criterion: label L 1 node. The procedure Split_Giant_Tour_Balance is an imple-mentation of the split algorithm w here the dominance rule concerns only the balance criterion: label L 1 dominates label L 2 if L from an algorithmic point of view is available in ( Duhamel et al., 2011 ). Note that the solutions that are generated by both
Giant_Tour_Cost and Split_Giant_Tour_Balance should already be included in the set of non-dominated solutions obtained mentation is not optimal, the three split procedures are required. problems which is followed by two dedicated local search proce-dures respectively on the cost and the balance criterion. 3.5. Example
Consider a VRPRB instance with 5 clients (denoted from 1 to 5), a depot (denoted 0) and a set of vehicles with capacity Q  X  10. the travel cost is not necessarily symmetric, and neither the distances Euclidean as introduced in Table 1 . Thus, the triangular inequality does not hold. Demand d j of customer j is given in Table 2.

Consider a TSP tour T made of the fi ve customers in the following subsequence  X  01  X  X  T  X  1  X  X  X  X  5  X  with a total quantity q  X  total cost h  X   X  01  X  X  13: the initial label L  X  X  0 ; 1 ; ; from node 0 to node 1 using the propagation rule and generating the label L 1  X  X  13 ; 0 ; 13 ; 13  X  .

The arc from node 0 to 2 represents the trip  X  0 ; 5 ; 2 ; label L 2  X  X  29 ; 0 ; 29 ; 29  X  as depicted in Fig. 2 .
The arc from node 0 to 3 would represent the trip  X  0 ; 5 H and no label is generated from node 0 to node 3. The label propagation from node 0 stops.
 A new step starts and labels from node 1 are propagated next. The arc from node 1 to 2 represents the trip  X  0 ; 2 ; 0  X  since of node 1 is considered to generate labels on node 2 according to the partial solution (difference between the largest trip cost of value 15 and the smallest one with value 13). This new label is inserted into the list of node 2 since L 2  X  X  28 ; 2 ; 13 P  X  X  29 ; 0 ; 29 ; 29  X  are incomparable ( Fig. 3 ).

The process is iterated until the end of the label propagation. In general, a set of several non-dominated labels is obtained on the fi nal node. In the given example, two labels remain and lead to the solutions stressed on Fig. 4 . 4. Path Relinking 4.1. General principle
The principle of Path Relinking (PR) is to transform a solution S into a solution S 0 , step by step, which may assume the de a distance between solutions. The method can be further enhanced by applying a local search on the solutions encountered between S and S 0 to visit the locally optimal areas along the path success on routing problems, but mainly in hybrid metaheuristics to solve classical VRP ( Ho and Gendreau, 2006 ), the multi-compartment VRP ( El-Fallahi et al., 2008 ), the capacitated a combined production-distribution problem ( Boudia et al., problem ( Villegas et al., 2011 ), among others.

Souffriau et al. (2010) applied PR to recombine solutions in a population-based algorithm, for the team orienteering problem a route length constraint). Rahimi-Vahed et al. (2013) consider a multi-depot periodic vehicle routing problem and solve it with a PR based on different exploration and exploitation strategies. To the best of our knowledge, only one paper employs PR in a multi-objective VRP problem: Parragh et al. (2009) developed an iterated variable neighborhood search for a dial-a-ride problem but PR is only used for post-optimization.

PR algorithms can be used to search the solution space from an iteration may induce only small moves in the solution space and better results, it might be recommended to select two good and distant solutions S and S 0 or to pick solutions with probabilities proportional to their symmetric difference with respect to a distance measure ( Resende and Werneck, 2004 ).

The proposed approach uses PR as unique recombination operator problem. In this context, with the indirect representation of the solutions and the bi-criteria feature, the recommendation about distant solutions may not stand anymore. Two similar TSP tours may result in very different VRPRB solution. This is why, in the proposed approach, PR is applied b etween TSP tours representing solutions from the pseudo-Paret o front (which should be good) without any consideration on the distance measure. Nevertheless, a relating the proposed PR used in the proposed approach. 4.2. Distance measure on TSP tours
Numerous distance measures could be investigated as stressed in the overviews of Campos et al. (2005) , S X rensen et al. (2005) ,
S X rensen and Schittekat (2013) that focus on the distance in path relinking context for the vehicle routing problems. The Hamming other distance measures have been proposed for permutation problems ( Ronald, 1997; Ronald, 1998; Campos et al., 2005 ). The
Edit distance, see for instance Wagner and Fischer (1974) ,compares large number of combinatorial problems ( S X rensen, 2003 ).
In this paper, the distance measure is not used to select the couple of TSP tours involved in the PR, but to guide the path from set of intermediates on the  X  shortest path  X  between the two TSP tours, both having equal lengths and identical items. Zhang et al. (2005) worked on this kind of strings and proposed an ef fi way to compute the Minimal Permutation Distance (MPD), even if they do not introduce a full description of their algorithm. A distance-based permutation moves to transform an initial string to another one is particularly convenient in PR context, since permu-tations can be implemented in O  X  1  X  . Furthermore, this distance permits generation of intermediate giant tours which are strongly similar but which should provide very different solutions after splitting into trips.

Algorithm 1 . Minimal Permutation Distance (MPD) 1. Input/Output parameters 2. T[I]: sequence of items 3. T X  X i]: sequence of items 4. m: minimal number of permutations 5. Move: set of permutations to transform T into T  X  (Move[i].x and Move[i].y) 6. Begin 7. initialize V to false 8. m  X  0 9. for i  X  1to n do 10. LOC[T[i]]  X  i 11. end for 12. for i  X  1 to n do 13. if (V[i]  X  false) then 14. i_tps  X  i 15. V[i_tps]  X  true 16. First  X  T[i] 17. while (T X  X i_tps] a First) do 18. i_tps  X  LOC[i_tps] 19. V[i_tps]  X  true 20. if (i a i_tps) Then 21. m  X  m  X  1 22. Move[m]  X  (i, i_tps) 23. end if 24. end do 25. end if 26. end for 27. return m; Move
An array Move records the complete ordered list of permutations to indicates whether an item has already been considered in T ,i.e. position of item i in T . Line 7 initializes array V and lines 9 array Loc . Then, a loop from lines 12 to 26 scans each item i not Move (line 22).
 and T 0  X  4 3 5 6 2 7 1 is 3. In Fig. 5 ,the fi rst item which is scanned is the item 4 (in position 1) i.e. First  X  4in
Algorithm 1 .Thevalueinposition1in T 0 is 4. No permutation is required. Thus V 1  X   X  true (T) and Move remains empty. (
First  X  T[i]) and the corresponding value in T 0 is 3. Thus, the that T  X  2 must be exchanged with T  X  7 and 2  X   X  V 7  X   X  true (T). the position i in T where V  X  i  X  false (F). In Fig. 7 ,the is concerned is item 2 (in position 3) i.e. First  X  2. The value in position 3 in T 0 is 5 and LOC 5  X   X  6. With the same principle as T 0 . This involves the insertion of two permutations into move : mediate giant tours are obtained by applying the set of permutation stored in move to transform T into T 0 . 4.3. Proposed path relinking
The proposed PR relies on TSP tours, and strings two main phases together. A fi rst phase performs several iterations to generate non-dominated VRPRB solutions. Each iteration builds a set POP of new solutions, which evolves through PR that can be seen as a recombination operator. Then a post-optimization phase is applied where PR is employed on selected pairs of solutions recorded in the approximate Pareto front ( GPOP ), which can be seen as a population of elite solutions encountered during the fi rst phase.
 Thus, in the proposed PR, two solutions S 1 and S 2 are chosen in POP ( fi rst phase) or GPOP (post-optimization phase) and Concat converts them into their corresponding TSP tours T 1 and T 2. As already said, a small change on T 1 may produce very distant solutions to S 1, so the path relinking works only on promising solutions (and not necessarily distant) via a path in this reduced solution space. Both T 1 and T 2 are then given to the PR procedure explained in Algorithm 2 . First, the distance between the tours is measured and the ordered list of permutations required to trans-form T 1 into T 2 are recorded to be introduced progressively from T 2 into T 1. This is made through MPD  X  T 1 ; T 2  X  on line 5. Algorithm 2 . Path_relinking 1. input/output parameters 2. POP, GPOP: population 3. T1, T2: giant tours 4. begin 5. (Distance; Move):  X  MDP(T1, T2) 6. T  X  T1 7. for p  X  1 to Distance do 8. (pos1; pos2)  X  Move[p] 9. Swap T[pos1] and T[pos2] 10. if random r p_move then 11. Evaluation_of_giant_tour(T,POP,GPOP) 12. end if 13. end for 14. return POP, GPOP Then, the loop, lines 7  X  13, performs the list of permutations. The corresponding permutation is available in the array Move  X  p , and  X  pos 1 ; pos 2  X  gives the two positions which must be swapped (lines 8  X  9). Each move generates a new intermediate TSP tour T on the path from T 1to T 2. T (with a probability p _ move ) is split represented on Fig. 8 .
 5. Multi-start Split based Path Relinking 5.1. Search space exploration strategy
The search strategy is made by a path relinking (PR) approach called MSSPR (Multi-Start Split based Path Relinking approach) and provides an approximation of the Pareto front  X  GPOP  X  updated all along the search process, by keeping only non-dominated solutions.
Algorithm 3 gives an overview of the method. Three parts are tion called POP and the evolution of this population to improve the quality of the non-dominated VRPRB solutions. Both are encapsu-phase (lines 34  X  44) on the approximate Pareto front  X  GPOP .
The fi rst part (diversi fi cation) of the algorithm (lines 9 concerns the generation of a fi rst approximation of an ef front (or a pool of non-dominated solutions saved in POP). It is composed of 2 steps: 1.

Generate_a_giant_tour (detailed in Section 5.2 ): A TSP tour is generated either with a randomized nearest neighbor algorithm (half of the time) or a random sequencing; 2.
 Evaluation_of_giant_tour (detailed in Section 5.3 ): The
TSP tour is fi rst evaluated by transformation into potentially non-dominated solutions with the proposed split procedure ( Section 3.2 ) followed by local searches on these solutions (see
Section 5.4 ). Then, inclusion of the obtained solutions into the population which model Pareto front is performed. The inser-tion may fail or result in some solution deletions due to dominance rules ( Section 3.2 ).
 to note that inclusion of one solution into a population must satis fi ed the non domination rule i.e. the addition of a solution requires non domination with all previously included solutions, and may delete some newly dominated ones.

The second part (evolution) of the algorithm (lines 14  X  32) searches the solution space through a path relinking ( Section 4 ) between solutions in POP. The strategy is generational in the sense that the population where solutions are extracted to apply the path relinking is disjointed from the population where the new non-dominated solutions are saved. Thus, a working population (denoted wPop) of the current population is required. Two inner loops are the best solution of POP according to the cost criterion and n_PR other solutions of the population randomly selected (lines 16
The second loop does exactly the same but with the best solution according to the balance criterion (lines 23  X  30). The encountered solutions on the paths are checked to enter into GPOP.
At the end of the two inners loops previously introduced, the working population is scanned to update GPOP (line 31) with respect to the dominance rule: some solutions of wPop are discarded if they are dominated by at least one solution in GPOP , and solutions of GPOP may be deleted if they are dominated by one solution of wPOP . Similar remarks hold for the post-optimization part where GPOP and wPOP are used for similar aims.

Algorithm 3 .

Multi_Start_Split_based_Path_Relinking_Approach 1. input/output parameters 2 . GPOP: population 3. begin 4. GPOP  X   X  5. //Diversification 6. for i  X  1 to iter_max do 7. POP  X   X  8. // Part 1: Generation of a population POP (diversification) 9. for j  X  1 to n_GT do 10. Generate_a_giant_tour (T) 11. Evaluation_of_giant_tour (T,POP,GPOP) 12. end for 13. // Part 2: Path Relinking between solutions in
POP (evolution) 14. wPop  X  Pop; 15. N_PR  X  |POP|/2 16 .S1  X  solution with the minimal cost in POP 17. T1  X  Concat(S1) 18. for j  X  1 to Nb_PR do 19. S2  X  another solution randomly chosen in
POP 20. T2  X  Concat(S2) 21. Path_relinking (S1,S2, wPop) 22. end for 23. S1  X  solution with the minimal balance in POP 24. T1  X  Concat(S1) 25. for j  X  1 to Nb_PR do 27. S2  X  another solution randomly chosen in
POP 28 .T2  X  Concat(S2) 29. Path_relinking (S1,S2, wPop) 30. end for 31. GPop  X  GPop wPop; 32. Pop  X  wPop; 33. end for 34. // Part 3: Path Relinking between solutions in
GPOP (post-optimization) 35 .b  X  |GPOP| 36. wPop  X  GPop; 37. for i  X  1 to  X  b/2 c do 38. S1  X  solution number i in GPOP 39 .T1  X  Concat(S1) 40. S2  X  solution number (|GPOP|  X  1-i) in GPOP 41. T2  X  Concat(S2) 42 . Path_relinking (S1,S2,wPop) 43. end for 44. GPop  X  wPop; 45. return GPOP
The third part (post-optimization) of the algorithm (lines 35 the Pareto front. As stressed in Fig. 10 ,itperformsapathrelinking
More precisely, a loop with i from 1 to b = 2 create paths between solutions i and b  X  1 i .

The indirect representation of VRPRB solutions using TSP tours does not ensure that two similar TSP tours would lead to similar
VRPRB solutions. The splitting of close TSP tours may produce VRPRB share some common patterns (such as common sets of successive customers in routes). Similarly, the assumption about the fact that common patterns seems valid most of the time. Thus, by linking an extreme solution of the current front with any other solution, the 5.2. Generation of the TSP tours
The generation of TSP tours (procedure Generate_a_giant_tour randomly (with a probability of 50%). The two procedures are de fi ned as: Generate_Solution_Minimizing_Balance(Trip T) Generate_Random_Solution(Trip T)
The Generate_Solution_Minimizing_Balance procedure ( Algorithm 4 )beginswithanevaluationofthenumber n 0 of trips required to serve the clients considering a homogenous fl composed of a single node randomly selected. The remaining nodes, in minimizing the balance (difference from the minimal and the the gap from the minimal cost tr ip and the maximal one (lines 26 ThelastpartrandomlyconcatenatesthetripstoprovideaTSPtour.
Algorithm 4 . Generate_Solution_Minimizing_Balance 1. output parameters 2. T: a giant tour 3. begin 4. S1 a solution 5. L  X  list of node to service 6. n X   X  Evaluation of the number of vehicles (trips required) 7. c X   X  average capacity of the vehicle fleet 8. // Part 1 : Generation of a set on n X  trips with one node only 9. for i  X  1 to n X  do 10. j  X  randomly selection of one node into L 11. L  X  L \ {j} // remove node j 12. create un new trip T into S1, add j into T 13. end for 14. // Part 2 : Path Relinking between solutions in
POP 15. while L a  X  do 16. j  X  randomly selection of one node into L 17. // search for the trip with minimal cost in S1 18. pos_tmin  X  position of the trip with minimal cost into S1 19 // search for the trip with maximal cost in S1 20. pos_tmax  X  position of the trip with maximal cost into S1 21. // trips 22. tmin  X  trip in position pos_tmin in S1 23. tmax  X  trip in position pos_tmax in S1 24. // insertion in the trip tmin by checking all insertion point 25. delta_min  X  p 26. for j  X  1 to (tmin.nb_node-1) do 27. n1  X  node in position j 28. n2  X  node in position j  X  1 29. delta_cost  X  -distance(n1, n2)  X  distance(n1, j)  X  distance(j, n2) 30. p  X  -1; 31. if (tmin.cost  X  delta_cost -tmax. cost o delta_min) then 32. delta_min  X  tmin. cost  X  delta_cost -tmax.cost; 33. p  X  j; 34. end if 35. end for 36. // Part 3 : inse  X  rer le client dans le trip 37. Insert client j into the trip number number tmin in position p 38. end while 39. Concat(S,T) 40. return T 5.3. Evaluation of the TSP tours
From a given giant tour T , several solutions are generated and evaluated to update the populations GPOP and POP , thanks to by the bi-criteria version of the split algorithm, but also by mono-objective versions and intensi fi cation based local searches.
Algorithm 5 describes more precisely this principle. Three evaluation steps are performed. Each one consider in priority a kind of objective: (i) both criteria (cost; balance) on lines 7 (ii) the balance on lines 15  X  20; (iii) the cost on lines 22 solutions obtained after any version of the split algorithm are saved in the data structure ES . They are inspected to update a population using Add_ES_Into_Pop considering the dominance the set of solutions ES is improved using two local searches: the fi rst one using the balance criterion to generate a new set of solutions ES 0 and the second one generates ES  X  X  with the solution cost criterion. These sets are also scanned to inclusion into the populations.

After the local search, the resulting solutions should dominate implementations, the local search on the balance allows the cost to be worsened within a certain limit and the local search on the cost criterion does not upper-bound the balance damage. Thus, the insertion in a population is tested both before and after the local search.

Algorithm 5 . Evaluation_of_giant_tour 1. input/output parameters 2. POP,GPOP: populations 3. T: a giant tour 3. local parameters 4. ES, ES X , ES X : Sets of non-dominated solutions 5. begin 6. // part 1 . Evaluation on the pair(cost, balance) 7. ES  X   X  ; ES X   X   X  ; ES X   X   X  8. Split_Giant_tour (T, ES) 9. Add_ES_Into_Pop (ES, POP, GPOP) 10. Local_search_on_balance (ES, ES X ) 11. Add_ES_Into_Pop (ES X , POP, GPOP) 12. Local_search_on_cost (ES, ES X ) 13. Add_ES_Into_Pop (ES X , POP, GPOP) 14. // part 2 . Evaluation on the balance criterion 15. ES  X   X  ; ES X   X   X  ; ES X   X   X  16. Split_Giant_Tour_Balance (T, ES) 17. Local_search_on_balance (ES, ES X ) 18. Add_ES_Into_Pop (ES X , POP, GPOP) 19. Local_search_on_cost (ES X , ES X ) 20. Add_ES_Into_Pop (ES X , POP, GPOP) 21. // part 3 . Evaluation on the balance criterion 22. ES  X   X  ; ES X   X   X  ; ES X   X   X  23. Split_Giant_tour_Cost (T, ES) 24. Local_search_on_cost (ES, ES X ) 25. Add_ES_Into_Pop (ES X , POP, GPOP) 26. Local_search_on_balance (ES X , ES X ) 27. Add_ES_Into_Pop (ES X , POP, GPOP) 28. return POP and GPOP 29 end 5.4. Local searches
As mentioned before, two improvement procedures are pro-posed, each one deals with both criteria but focusing on a particular one.
 5.4.1. Cost improvement procedure: Local_search_on_cost
This local search mainly tries to reduce the solution cost. It relies on the fi rst improvement selection strategy and includes classical VRP neighborhoods. It is limited to nls iterations or and nls X  successive non-productive (no improvement has been obtained) iterations.

This local search dedicated to one solution (Cost_Improvement to much this criterion: 1. Each trip cost is iteratively improved by using a 2-OPT neigh-borhood that focuses on cost reduction only. 2. The balance is improved without worsening the cost by w all its nodes are considered to integrate another trip t , except the longest one. scanning all nodes in t and investigating all positions in the solution cost.

This local search is embedded in the procedure Local_-search_on_cost(ES, ES 0 ) that scans all the solutions contained in set ES . The new generated solutions are included in ES 5.4.2. Balance improvement procedure: Local_search_on_balance
This local search aims to reduce the difference between the trip costs but also include moves related to the cost reduction in order to preserve solutions quality on both criteria. It relies on the improvement selection strategy. This local search is composed of 3 parts: of its customers into another trip. Then, trips are investigated in decreasing cost, and customers are moved from the more expensive trip to another without deterioration of the solution cost. 2. The local search on the cost consist in execution of 2-OPT neighborhood where a cost improvement is accepted only if no balance deterioration is induced. 3. Customers from the minimal trip cost are subjected to 2-OPT neighborhood where a cost enlargement is accepted to gen-erate balance improvement.

This local search is embedded in the procedure Local_-search_on_balance(ES, ES 0 ) that scans all the solutions con-tained in set ES . The new generated solutions are included in ES 6. Numerical experiments 6.1. Instances and implementation
Numerical experiments are achieved on the CVRP instances introduced by Christo fi des and Eilon (1969) and Christo (1979) . The set is composed of 14 instances with a number of customers comprised between 50 and 199. It is divided into:
Subset 1 made of instances 1  X  5 and 11  X  12, that have no constraint on the vehicle range;
Subset 2 made of instances 6  X  10 and 13  X  14, that have a constraint on the vehicle range.

The vehicle range constraint, which characterizes a maximal vehicle trip length (cost), is only addressed by CVRP methods dedicated to cost minimization, not by previous multi-objective methods.

Trying to favor fair comparative studies, the values of para-if it could be possible to tune the method for a speci fi and maybe to obtain better results, the values given in Table 3 were obtained after preliminary experiments in which a sampling has been tested and the one providing the best results on average over the instances has been kept.

High quality upper bounds on CVRP instances are known and a comparative study can be achieved on the cost criterion with (2009) and with the recent publication of Vidal et al. (2014) .
It is also interesting to compare results with the most recent authors have not kept the approximate Pareto front found using their method.

However, before any comparison, the computational time of each method has to be scaled to consider the MIPS performance of each processor and provide a fair comparative study. Table 4 proposes speed factors that are used in the following comparative tables, and that were designated by previous research article such as Dongarra (2011) or ( Duhamel et al., 2011 )( Duhamel and Lacomme, 2012 ). Since the MIPS performance is not the only in fl uence on the CPU time, the table gives also the information available on the operating system, the language and the used computer.

A special attention must be directed to the RISC 6000 compu-ter: the authors take advantages of the 8 processors with paralle-lization techniques. Since the 1.1 GHz processors is ranked about 125 MFlops, the whole computer provides a global performances about 1000 M fl ops.

The speed factor is the ratio between the computer of one article and the computer used in this publication. The speed factor of the PIII used by Prins in 2004 is equal to 1500/4850  X  0.3. This means that all computational times of the sequel publication of
Prins (2004) must be multiplied by 0.3 to have a fair comparison with MSSPR. 6.2. Analysis of solutions on the cost criterion
The performance of the algorithm concerning the fi rst criterion (solution cost) is evaluated through a comparison with publica-tions dedicated to the CVRP (minimizing only the total routing cost) and providing only one solution at the end of the process
Table 5 . Table 5 presents the 14 instances with column n giving the number of customers to visit. BKS indicates the best known solution cost. Gap _ C is the gap of the average solution cost obtained over the runs to BKS in percent. T is the average CPU time in minutes, reported by the authors and T 0 is the scaled time using the speed factors from Table 4 . The last lines provide the average of each column.

Usually, to attest that a method has an interest, it must at least outperforms the another ones either by providing better results in even by being reasonably competitive but tackling a more general problem. Our method mainly stands on the third case.

In comparison with method dedicated to the CVRP, MSSPR handles deviation of 2.81% which is quite small. In fact, even if the four dedicated methods provide a gap under 0.25% as regards to the best known solutions, the MSSPR method is able to provide a gap under 1% on average of the 5 runs on 6 instances. The most time ef method is the Nagata and Braysy's approach with an average scale one in CVRP methods.

Of course, the results produced by MSSPR do not outperform dedicated method. However, they are on the same level as other bi-objective approach dealing with the VRPRB, as shown in next section. 6.3. Analysis of solutions on both criteria
To really evaluate the proposed method, both cost and balance criteria must be taken into account. Thus, a comparison is achieved with the method proposed by Jozefowiez et al. (2009) , even if the authors have not kept the approximate Pareto front found using their method. This is a multi-objective evolutionary algorithm using a new mechanism, called the elitist diversi fi cation, imple-mented with parallelization techniques (MEOP).

However, the MEOP method encompasses only instances 1  X  5 and 10  X  11 which do not have any extra vehicle range constraints. They only report the best solutions on the cost (summarized in
Table 6 ) and on the balance (summarized in Table 7 ) criteria obtained over 5 runs and the average time of a run. The same values are provided for MSSPR. The approximate Pareto front found by MEOP is not available. Thus, the comparison between the two bi-objective methods requires having a look at the both extremes of the Pareto front. Table 6 presents the best solutions according to the cost criterion while Table 7 shows the best solutions according to the balance criterion obtained by MEOP and MSSPR. Once again, since the proposed method tackles a more general problem, the aim here is to ensure that MSSPR is able to provide at least similar results as MEOP on instances without range constraints.

In Table 6 , column n recalls the number of customers to be visited in each instance, BKS reminds the best known solution on run in minutes while T 0 is its scaled value.
 On the subset of 7 instances tackled by Jozefowiez et al. (2009) , MEOP provides a deviation of 0.96% as regards the best know solutions with an average scale computational time of 8.43 min. MSSPR provides solutions in the same amount of time (about shows that in fact, MSSPR obtains better or equal gaps on 5 over the 7 instances and would be slightly better if instance 11 had been excluded.

To the best of our knowledge the con fi guration of the instances has no special characteristics. However, a variation on the quality results (for example on instance 3 or unlike on instance 11) is trend of metaheuristics, except for some special cases, since they take advantages of random generation (such as in local search and neighboring system). The same question is strongly hard to exact methods including linear programming, when two strongly similar possible that the gap of 9.01 could be lowest with extra runs.
Considering the balance criterion on these best cost solutions, it appears that when both methods retrieve the same solution cost, they also obtain the same balance value (for example, on instance 1, both methods obtain a gap to BKS equals to 0% and a balance value at 20.07). However, when they do not achieve ing a lower cost, thus none really dominates the other one (such as on instance 5, for which MSSPR has a solution cost more than 1% lower but a balance of 90.04 vs. 76.60 for MOEP).

To conclude, it seems that MEOP and MSSPR are almost equivalent on the cost criteria for the subset of 7 instances. Nevertheless, MSSPR is the only one able to handle the whole set of 14 instances, comprising vehicle range constraints. This constraint is not trivial and MSSPR reaches the BKS (or is very close on instance 14) on cases having until 100 customers.
Table 7 presents the results on the best solutions according to the balance criterion obtained by MEOP and MSSPR. Once again, column n recalls the number of customers to be visited in each instance, Cost is the solution cost in the best balance solution found, Balance is the best balance value.

MSSPR provides a better balance than MEOP. The average balance 3 between the two methods. Half of the time, this better balance value is compensated by a higher s olution cost. Nonetheless, on with a gap between both methods of more than 30% on average. That means that on these instances, solutions provided by MEOP are clearly dominated by those of MSSPR.

In sum on the balance criterion, the proposed method is able to improve the Pareto front either by providing solutions that dominate MEOP solutions, or by enlarging the spread of the Pareto front on the balance side. 6.4. Analysis of global fronts obtained overs the 5 runs
A deeper comparative study with the publication of Jozefowiez
However, to favor fair future comparative studies, a companion web be found at the following address: http://www.isima.fr/ lacomme/ MOVRP/MOVRP.html .

An example of the Pareto front obtained at the end of the 5 runs on instance 1 is given in Fig. 11 . It provides a graphical methods (524.61;20.06) but at the right side, MSSPR is able to several non-dominated solutions extending the spread of the front behind the solution (618.22;0.24) provided by MEOP.

Similar comments hold for many instances previously addressed instances which include vehicle range constraints. 7. Concluding remarks
This paper addresses vehicle routing problem with route balan-cing (VRPRB) in which the total routing cost and the route balance have to be optimized in the Pareto sense. The problem is addressed which takes advantage of a split-based approach using two search spaces: a quasi-direct representation of solution denoted TSP tour and a VRPRB solution that denotes a complete solution. The method performance is evaluated as regard to the best multi-objective method for the VRPRB, and the best published methods on the CVRP managing only the cost criterion.

More precisely, MSSPR achieves good quality solutions in compar-ison with the best known CVRP solutions and is competitive with the multi-objective method MEOP on the cost criterion. Furthermore, it outperforms the multi-objective approach on the balance criterion sinceitisabletoimprovetheParetofronteitherbyprovidingnew theParetofrontontheextremebalancepart.However,itisnot possible to provide a deeper comparative study since previous permits to solve a more general problem than the other published multi-objective methods. Indeed it is able to handle instances with not trivial constraints concerning the vehicle range.
A companion web page is introduced providing full details on studies ( http://www.isima.fr/ lacomme/MOVRP/MOVRP.html ). Acknowledgments
Special thanks to Professor Xavier Gandibleux for providing us constant support and help in previous versions of this article. References
