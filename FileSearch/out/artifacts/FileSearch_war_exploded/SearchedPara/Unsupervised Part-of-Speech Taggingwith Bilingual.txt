 Supervised learning approaches have advanced the state-of-the-art on a variety of tasks in natural lan-guage processing, resulting in highly accurate sys-tems. Supervised part-of-speech (POS) taggers, for example, approach the level of inter-annotator agreement (Shen et al., 2007, 97.3% accuracy for English). However, supervised methods rely on la-beled training data, which is time-consuming and expensive to generate. Unsupervised learning ap-proaches appear to be a natural solution to this prob-lem, as they require only unannotated text for train-ing models. Unfortunately, the best completely un-supervised English POS tagger (that does not make use of a tagging dictionary) reaches only 76.1% ac-curacy (Christodoulopoulos et al., 2010), making its practical usability questionable at best.

To bridge this gap, we consider a practically mo-tivated scenario, in which we want to leverage ex-isting resources from a resource-rich language (like English) when building tools for resource-poor for-eign languages. 1 We assume that absolutely no la-beled training data is available for the foreign lan-guage of interest, but that we have access to parallel data with a resource-rich language. This scenario is applicable to a large set of languages and has been considered by a number of authors in the past (Al-shawi et al., 2000; Xi and Hwa, 2005; Ganchev et al., 2009). Naseem et al. (2009) and Snyder et al. (2009) study related but different multilingual gram-mar and tagger induction tasks, where it is assumed that no labeled data at all is available.

Our work is closest to that of Yarowsky and Ngai (2001), but differs in two important ways. First, we use a novel graph-based framework for project-ing syntactic information across language bound-aries. To this end, we construct a bilingual graph over word types to establish a connection between the two languages (  X  3), and then use graph label propagation to project syntactic information from English to the foreign language (  X  4). Second, we treat the projected labels as features in an unsuper-vised model (  X  5), rather than using them directly for supervised training. To make the projection practi-cal, we rely on the twelve universal part-of-speech tags of Petrov et al. (2011). Syntactic universals are a well studied concept in linguistics (Carnie, 2002; Newmeyer, 2005), and were recently used in similar form by Naseem et al. (2010) for multilingual gram-mar induction. Because there might be some contro-versy about the exact definitions of such universals, this set of coarse-grained POS categories is defined operationally, by collapsing language (or treebank) specific distinctions to a set of categories that ex-ists across all languages. These universal POS cat-egories not only facilitate the transfer of POS in-formation from one language to another, but also relieve us from using controversial evaluation met-rics, 2 by establishing a direct correspondence be-tween the induced hidden states in the foreign lan-guage and the observed English labels.

We evaluate our approach on eight European lan-guages (  X  6), and show that both our contributions provide consistent and statistically significant im-provements. Our final average POS tagging accu-racy of 83.4% compares very favorably to the av-erage accuracy of Berg-Kirkpatrick et al. X  X  mono-lingual unsupervised state-of-the-art model (73.0%), and considerably bridges the gap to fully supervised POS tagging performance (96.6%). The focus of this work is on building POS taggers for foreign languages, assuming that we have an En-glish POS tagger and some parallel text between the two languages. Central to our approach (see Algorithm 1) is a bilingual similarity graph built from a sentence-aligned parallel corpus. As dis-cussed in more detail in  X  3, we use two types of vertices in our graph: on the foreign language side vertices correspond to trigram types, while the ver-tices on the English side are individual word types. Graph construction does not require any labeled data, but makes use of two similarity functions. The edge weights between the foreign language trigrams are computed using a co-occurence based similar-ity function, designed to indicate how syntactically Algorithm 1 Bilingual POS Induction Require: Parallel English and foreign language Ensure:  X  f , a set of parameters learned using a 1: D e  X  f  X  word-align-bitext ( D e , D f ) 2: c D e  X  pos-tag-supervised ( D e ) 3: A X  extract-alignments ( D e  X  f , c D e ) 4: G  X  construct-graph ( X  f , D f , A ) 5:  X  G  X  graph-propagate ( G ) 6:  X   X  extract-word-constraints (  X  G ) 7:  X  f  X  pos-induce-constrained ( X  f ,  X ) 8: Return  X  f similar the middle words of the connected trigrams are (  X  3.2). To establish a soft correspondence be-tween the two languages, we use a second similar-ity function, which leverages standard unsupervised word alignment statistics (  X  3.3). 3
Since we have no labeled foreign data, our goal is to project syntactic information from the English side to the foreign side. To initialize the graph we tag the English side of the parallel text using a su-pervised model. By aggregating the POS labels of the English tokens to types, we can generate label distributions for the English vertices. Label propa-gation can then be used to transfer the labels to the peripheral foreign vertices (i.e. the ones adjacent to the English vertices) first, and then among all of the foreign vertices (  X  4). The POS distributions over the foreign trigram types are used as features to learn a better unsupervised POS tagger (  X  5). The follow-ing three sections elaborate these different stages is more detail. In graph-based learning approaches one constructs a graph whose vertices are labeled and unlabeled examples, and whose weighted edges encode the degree to which the examples they link have the same label (Zhu et al., 2003). Graph construction for structured prediction problems such as POS tag-ging is non-trivial: on the one hand, using individ-ual words as the vertices throws away the context necessary for disambiguation; on the other hand, it is unclear how to define (sequence) similarity if the vertices correspond to entire sentences. Altun et al. (2005) proposed a technique that uses graph based similarity between labeled and unlabeled parts of structured data in a discriminative framework for semi-supervised learning. More recently, Subra-manya et al. (2010) defined a graph over the cliques in an underlying structured prediction model. They considered a semi-supervised POS tagging scenario and showed that one can use a graph over trigram types, and edge weights based on distributional sim-ilarity, to improve a supervised conditional random field tagger. 3.1 Graph Vertices We extend Subramanya et al. X  X  intuitions to our bilingual setup. Because the information flow in our graph is asymmetric (from English to the foreign language), we use different types of vertices for each language. The foreign language vertices (denoted by V ) correspond to foreign trigram types, exactly as in Subramanya et al. (2010). On the English side, however, the vertices (denoted by V e ) correspond to word types. Because all English vertices are going to be labeled, we do not need to disambiguate them by embedding them in trigrams. Furthermore, we do not connect the English vertices to each other, but only to foreign language vertices. 4
The graph vertices are extracted from the differ-ent sides of a parallel corpus ( D e , D f ) and an ad-ditional unlabeled monolingual foreign corpus  X  f , which will be used later for training. We use two dif-ferent similarity functions to define the edge weights among the foreign vertices and between vertices from different languages. 3.2 Monolingual Similarity Function Our monolingual similarity function (for connecting pairs of foreign trigram types) is the same as the one used by Subramanya et al. (2010). We briefly re-view it here for completeness. We define a sym-metric similarity function K( u i ,u j ) over two for-eign language vertices u i ,u j  X  V f based on the co-occurrence statistics of the nine feature concepts given in Table 1. Each feature concept is akin to a random variable and its occurrence in the text corre-sponds to a particular instantiation of that random variable. For each trigram type x 2 x 3 x 4 in a se-quence x 1 x 2 x 3 x 4 x 5 , we count how many times that trigram type co-occurs with the different instan-tiations of each concept, and compute the point-wise mutual information (PMI) between the two. 5 The similarity between two trigram types is given by summing over the PMI values over feature instan-tiations that they have in common. This is similar to stacking the different feature instantiations into long (sparse) vectors and computing the cosine similarity between them. Finally, note that while most feature concepts are lexicalized, others, such as the suffix concept, are not.

Given this similarity function, we define a near-est neighbor graph, where the edge weight for the n most similar vertices is set to the value of the simi-larity function and to 0 for all other vertices. We use N ( u ) to denote the neighborhood of vertex u , and fixed n = 5 in our experiments. 3.3 Bilingual Similarity Function To define a similarity function between the English and the foreign vertices, we rely on high-confidence word alignments. Since our graph is built from a parallel corpus, we can use standard word align-ment techniques to align the English sentences D e and their foreign language translations D f . 6 Label propagation in the graph will provide coverage and high recall, and we therefore extract only intersected high-confidence ( &gt; 0 . 9 ) alignments D e  X  f .
Based on these high-confidence alignments we can extract tuples of the form [ u  X  v ] , where u is a foreign trigram type, whose middle word aligns to an English word type v . Our bilingual similarity function then sets the edge weights in proportion to these tuple counts. 3.4 Graph Initialization So far the graph has been completely unlabeled. To initialize the graph for label propagation we use a su-pervised English tagger to label the English side of the bitext. 7 We then simply count the individual la-bels of the English tokens and normalize the counts to produce tag distributions over English word types. These tag distributions are used to initialize the label distributions over the English vertices in the graph. Note that since all English vertices were extracted from the parallel text, we will have an initial label distribution for all vertices in V e . 3.5 Graph Example A very small excerpt from an Italian-English graph is shown in Figure 1. As one can see, only the trigrams [suo incarceramento ,], [suo iter ,] and [suo carattere ,] are connected to English words. In this particular case, all English vertices are labeled as nouns by the supervised tagger. In general, the neighborhoods can be more diverse and we allow a soft label distribution over the vertices. It is worth noting that the middle words of the Italian trigrams are nouns too, which exhibits the fact that the sim-ilarity metric connects types having the same syn-tactic category. In the label propagation stage, we propagate the automatic English tags to the aligned Italian trigram types, followed by further propaga-tion solely among the Italian vertices. [ suo iter , ] Given the bilingual graph described in the previous section, we can use label propagation to project the English POS labels to the foreign language. We use label propagation in two stages to generate soft la-bels on all the vertices in the graph. In the first stage, we run a single step of label propagation, which transfers the label distributions from the English vertices to the connected foreign language vertices (say, V l f ) at the periphery of the graph. Note that because we extracted only high-confidence align-ments, many foreign vertices will not be connected to any English vertices. This stage of label propa-gation results in a tag distribution r i over labels y , which encodes the proportion of times the middle word of u i  X  V f aligns to English words v y tagged with label y :
The second stage consists of running traditional label propagation to propagate labels from these pe-ripheral vertices V l f to all foreign language vertices in the graph, optimizing the following objective: where the q i ( i = 1 ,..., | V f | ) are the label distribu-tions over the foreign language vertices and  X  and  X  are hyperparameters that we discuss in  X  6.4. We use a squared loss to penalize neighboring vertices that have different label distributions: k q i  X  q j k 2 = P y (q i ( y )  X  q j ( y )) label distributions towards the uniform distribution U over all possible labels Y . It can be shown that this objective is convex in q .

The first term in the objective function is the graph smoothness regularizer which encourages the distri-butions of similar vertices (large w ij ) to be similar. The second term is a regularizer and encourages all type marginals to be uniform to the extent that is al-lowed by the first two terms (cf. maximum entropy principle). If an unlabeled vertex does not have a path to any labeled vertex, this term ensures that the converged marginal for this vertex will be uniform over all tags, allowing the middle word of such an unlabeled vertex to take on any of the possible tags.
While it is possible to derive a closed form so-lution for this convex objective function, it would require the inversion of a matrix of order | V f | . In-stead, we resort to an iterative update based method. We formulate the update as follows: where  X  u i  X  V f \ V l f ,  X  i ( y ) and  X  i are defined as: We ran this procedure for 10 iterations. After running label propagation (LP), we com-pute tag probabilities for foreign word types x by marginalizing the POS tag distributions of foreign trigrams u i = x  X  x x + over the left and right con-text words: We then extract a set of possible tags t x ( y ) by elimi-nating labels whose probability is below a threshold value  X  : We describe how we choose  X  in  X  6.4. This vector t x is constructed for every word in the foreign vo-cabulary and will be used to provide features for the unsupervised foreign language POS tagger.

We develop our POS induction model based on the feature-based HMM of Berg-Kirkpatrick et al. (2010). For a sentence x and a state sequence z , a first order Markov model defines a distribution: In a traditional Markov model, the emission distri-bution P  X  ( X i = x i | Z i = z i ) is a set of multinomi-als. The feature-based model replaces the emission distribution with a log-linear model, such that:
P  X  ( X = x | Z = z ) = where Val ( X ) corresponds to the entire vocabulary. This locally normalized log-linear model can look at various aspects of the observation x , incorporating overlapping features of the observation. In our ex-periments, we used the same set of features as Berg-Kirkpatrick et al. (2010): an indicator feature based on the word identity x , features checking whether x contains digits or hyphens, whether the first letter of x is upper case, and suffix features up to length 3. All features were conjoined with the state z .
We trained this model by optimizing the following objective function: L ( X ) = Note that this involves marginalizing out all possible state configurations z for a sentence x , resulting in a non-convex objective. To optimize this function, we used L-BFGS, a quasi-Newton method (Liu and Nocedal, 1989). For English POS tagging, Berg-Kirkpatrick et al. (2010) found that this direct gra-dient method performed better ( &gt; 7% absolute ac-curacy) than using a feature-enhanced modification of the Expectation-Maximization (EM) algorithm (Dempster et al., 1977). 8 Moreover, this route of optimization outperformed a vanilla HMM trained with EM by 12%.

We adopted this state-of-the-art model because it makes it easy to experiment with various ways of incorporating our novel constraint feature into the log-linear emission model. This feature f t incor-porates information from the smoothed graph and prunes hidden states that are inconsistent with the thresholded vector t x . The function  X  : F  X  C maps from the language specific fine-grained tagset F to the coarser universal tagset C and is described in detail in  X  6.2: Note that when t x ( y ) = 1 the feature value is 0 and has no effect on the model, while its value is  X  X  X  when t x ( y ) = 0 and constrains the HMM X  X  state space. This formulation of the constraint fea-ture is equivalent to the use of a tagging dictionary extracted from the graph using a threshold  X  on the posterior distribution of tags for a given word type (Eq. 7). It would have therefore also been possible to use the integer programming (IP) based approach of Ravi and Knight (2009) instead of the feature-HMM for POS induction on the foreign side. However, we do not explore this possibility in the current work. Before presenting our results, we describe the datasets that we used, as well as two baselines. 6.1 Datasets We utilized two kinds of datasets in our experiments: (i) monolingual treebanks 9 and (ii) large amounts of parallel text with English on one side. The availabil-ity of these resources guided our selection of foreign languages. For monolingual treebank data we re-lied on the CoNLL-X and CoNLL-2007 shared tasks on dependency parsing (Buchholz and Marsi, 2006; Nivre et al., 2007). The parallel data came from the Europarl corpus (Koehn, 2005) and the ODS United Nations dataset (UN, 2006). Taking the intersection of languages in these resources, and selecting lan-guages with large amounts of parallel data, yields the following set of eight Indo-European languages: Danish, Dutch, German, Greek, Italian, Portuguese, Spanish and Swedish.

Of course, we are primarily interested in apply-ing our techniques to languages for which no la-beled resources are available. However, we needed to restrict ourselves to these languages in order to be able to evaluate the performance of our approach. We paid particular attention to minimize the number of free parameters, and used the same hyperparam-eters for all language pairs, rather than attempting language-specific tuning. We hope that this will al-low practitioners to apply our approach directly to languages for which no resources are available. 6.2 Part-of-Speech Tagset and HMM States We use the universal POS tagset of Petrov et al. (2011) in our experiments. 10 This set C consists of the following 12 coarse-grained tags: N OUN (nouns), V ERB (verbs), A DJ (adjectives), A DV (adverbs), P RON (pronouns), D ET (determiners), A als), C ONJ (conjunctions), P RT (particles), P UNC (punctuation marks) and X (a catch-all for other categories such as abbreviations or foreign words). While there might be some controversy about the exact definition of such a tagset, these 12 categories cover the most frequent part-of-speech and exist in one form or another in all of the languages that we studied.

For each language under consideration, Petrov et al. (2011) provide a mapping  X  from the fine-grained language specific POS tags in the foreign treebank to the universal POS tags. The supervised POS tag-ging accuracies (on this tagset) are shown in the last row of Table 2. The taggers were trained on datasets labeled with the universal tags.

The number of latent HMM states for each lan-guage in our experiments was set to the number of fine tags in the language X  X  treebank. In other words, the set of hidden states F was chosen to be the fine set of treebank tags. Therefore, the number of fine tags varied across languages for our experiments; however, one could as well have fixed the set of HMM states to be a constant across languages, and created one mapping to the universal POS tagset. 6.3 Various Models To provide a thorough analysis, we evaluated three baselines and two oracles in addition to two variants of our graph-based approach. We were intentionally lenient with our baselines:  X  EM-HMM: A traditional HMM baseline, with  X  Feature-HMM: The vanilla feature-HMM of  X  Projection: Our third baseline incorporates We tried two versions of our graph-based approach:  X  No LP: Our first version takes advantage of  X  With LP: Our full model uses both stages Our oracles took advantage of the labeled treebanks:  X  TB Dictionary: We extracted tagging dictio- X  Supervised: We trained the supervised model 6.4 Experimental Setup While we tried to minimize the number of free pa-rameters in our model, there are a few hyperparam-eters that need to be set. Fortunately, performance was stable across various values, and we were able to use the same hyperparameters for all languages.
We used C = 1 . 0 as the L 2 regularization con-stant in (Eq. 10) and trained both EM and L-BFGS for 1000 iterations. When extracting the vector t x used to compute the constraint feature from the graph, we tried three threshold values for  X  (see Eq. 7). Because we don X  X  have a separate develop-ment set, we used the training set to select among them and found 0.2 to work slightly better than 0.1 and 0.3. For seven out of eight languages a thresh-old of 0.2 gave the best results for our final model, which indicates that for languages without any val-idation set,  X  = 0 . 2 can be used. For graph prop-agation, the hyperparameter  X  was set to 2  X  10  X  6 and was not tuned. The graph was constructed using 2 million trigrams; we chose these by truncating the parallel datasets up to the number of sentence pairs that contained 2 million trigrams. 6.5 Results Table 2 shows our complete set of results. As ex-pected, the vanilla HMM trained with EM performs the worst. The feature-HMM model works better for all languages, generalizing the results achieved for English by Berg-Kirkpatrick et al. (2010). Our  X  X ro-jection X  baseline is able to benefit from the bilingual information and greatly improves upon the mono-lingual baselines, but falls short of the  X  X o LP X  model by 2.5% on an average. The  X  X o LP X  model does not outperform direct projection for German and Greek, but performs better for six out of eight languages. Overall, it gives improvements ranging from 1.1% for German to 14.7% for Italian, for an average improvement of 8.3% over the unsupervised feature-HMM model. For comparison, the com-pletely unsupervised feature-HMM baseline accu-racy on the universal POS tags for English is 79.4%, and goes up to 88.7% with a treebank dictionary.
Our full model ( X  X ith LP X ) outperforms the un-supervised baselines and the  X  X o LP X  setting for all languages. It falls short of the  X  X rojection X  base-line for German, but is statistically indistinguish-able in terms of accuracy. As indicated by bolding, for seven out of eight languages the improvements of the  X  X ith LP X  setting are statistically significant with respect to the other models, including the  X  X o LP X  setting. 11 Overall, it performs 10.4% better than the hitherto state-of-the-art feature-HMM base-line, and 4.6% better than direct projection, when we macro-average the accuracy over all languages. 6.6 Discussion Our full model outperforms the  X  X o LP X  setting because it has better vocabulary coverage and al-lows the extraction of a larger set of constraint fea-tures. We tabulate this increase in Table 3. For all languages, the vocabulary sizes increase by several thousand words. Although the tag distributions of the foreign words (Eq. 6) are noisy, the results con-firm that label propagation within the foreign lan-guage part of the graph adds significant quality for every language.
 Figure 2 shows an excerpt of a sentence from the Italian test set and the tags assigned by four different models, as well as the gold tags. While the first three models get three to four tags wrong, our best model gets only one word wrong and is the most accurate among the four models for this example. Examin-ing the word fidanzato for the  X  X o LP X  and  X  X ith LP X  models is particularly instructive. As Figure 1 shows, this word has no high-confidence alignment in the Italian-English bitext. As a result, its POS tag needs to be induced in the  X  X o LP X  case, while the correct tag is available as a constraint feature in the  X  X ith LP X  case. We have shown the efficacy of graph-based label propagation for projecting part-of-speech informa-tion across languages. Because we are interested in applying our techniques to languages for which no labeled resources are available, we paid particular attention to minimize the number of free parame-ters and used the same hyperparameters for all lan-guage pairs. Our results suggest that it is possible to learn accurate POS taggers for languages which do not have any annotated data, but have translations into a resource-rich language. Our results outper-form strong unsupervised baselines as well as ap-proaches that rely on direct projections, and bridge the gap between purely supervised and unsupervised POS tagging models.
 We would like to thank Ryan McDonald for numer-ous discussions on this topic. We would also like to thank Amarnag Subramanya for helping us with the implementation of label propagation and Shankar Kumar for access to the parallel data. Finally, we thank Kuzman Ganchev and the three anonymous reviewers for helpful suggestions and comments on earlier drafts of this paper.

