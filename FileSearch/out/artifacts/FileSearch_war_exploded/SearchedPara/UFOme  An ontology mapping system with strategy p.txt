 1. Introduction the computer science community, one early influential use of the term ontology was by John McCarthy in his 1980 paper on heterogeneous databases and specifying interfaces to independent, knowledge-based services [22]. Moreover, in a Web where information is semantically marked up through ontologies, it will be possible to find out answers on the basis of the semantic interpretation of search keys thus overcoming the limitation of current search techniques. In this respect, information sources interconnected in a denser space of semantic links. These are some of the principles of the Semantic Web vision [1].
 designed by different organizations or different people, describing the same or overlapping knowledge domain. That makes instance, an ontology O1 can use the word car to represent a motor vehicle whereas another ontology O2 can express the same information by the word automobile . Moreover, while O1 can include information about convertible cars , O2 could not have this information.

Ontology-based applications, in order to achieve semantic interoperability , need to  X  X  X armonize X  their ontologies. This is crucial for the success of the Semantic Web since it supports several kinds of semantic applications such as semantic search, query rewriting, semantic web services composition and so forth. In the ontology mapping community, several map-ping algorithms have been proposed [7]. In particular, in [16] a comprehensive and accurate description of the ontology mapping problem along with current solutions is provided. Generally speaking, current systems exploit techniques bor-rowed from different research areas such as Bayesian decision theory [49], graph similarity [25], information retrieval, ogy languages such as RDFS 2 and OWL, 3 an ad hoc API was developed [12].
 guistic and structural mapping strategies are exploited. Linguistic mapping exploits information encoded in the entity names, comments, labels and other annotation properties. Structural mapping exploits the arrangement of the concepts of parameters (e.g., weights, thresholds) manually determined, toward an overall similarity value. estimate important requirements. In particular:
Only a very few systems (e.g., RiMOM [32]) have explored ways to suggest which mapping strategy has to be adopted or how parameter values of the different components have to be set. Indeed, parameter tuning is a domain-dependent task in the sense that parameters values that achieve good results in a domain cannot apply in another. As will be shown in the very useful feature an ontology mapping system should provide is a way to determine the best suitable mapping strategy on the basis of the specific mapping task, that is, the two specific ontologies to be mapped. Moreover, such an approach should be domain-independent.
 ogy engineers, in investigating how mapping strategies could be exploited in the best way.
Research efforts are mainly addressed to the development of mapping techniques, underestimating the role of the user, that is, how the user can interact with the mapping system. This problem has been pointed out also in recent research on schema matching where it has been recognized that the development of fully automatic procedures for discovering matching is still not achievable and therefore  X  X  X umans must be in the loop X  [2]. Moreover, a recent survey specifically focused on the usage of ontology mapping systems by real users [17] pointed out  X  X  X etter interfaces X  as a primary user requirement. In this respect, a user friendly and intuitive mapping environment would be very useful to help even non-expert users in performing mapping tasks.
 figure different mapping strategies and so forth would be very useful.

In this paper the aforementioned issues are addressed. Specifically, the following contributions are made:
The ontology mapping problem and related concepts are systematically defined along with the requirements of an ontol-ogy mapping framework, which emerged from the detailed analysis performed in Section 3.

An extensible software framework with modules as building blocks has been designed. Modules are (possibly existing) mapping components serving for different purposes (e.g., discovering mappings, combining, comparing and evaluating mapping strategies). This architecture has been inspired by the component-based software engineering where each individ-ual component is a module, that encapsulates a set of related functions (or data) [24].

A mapping strategy is defined in terms of a direct acyclic graph (DAG) of mapping modules. The DAG specifies how infor-mation flows among modules. The topological sort algorithm is exploited to determine the correct execution order among modules.

A strategy predictor module, which suggests the most suitable mapping strategy and the related parameter values based on the affinity between ontologies, has been designed. Note that this approach is domain-independent since it only needs to scrutinize the two ontologies under consideration as discussed in Section 4.4.

The framework implementation resulted in the UFOme (user friendly ontology mapping environment) system, a fully-fledged ontology mapping system which help: (i) ontology engineers in designing mapping strategies for which some in automatically obtaining a mapping strategy with the help of the strategy predictor .
 The UFOme features were evaluated on the OAEI benchmark set of tests with encouraging results. system, mapping strategy, and ontology mapping; Section 3 reviews related work. This review motivates the present work since it helped to identify the requirements a mapping framework should meet (Section 3.5). Moreover, here UFOme is com-7 concludes. 2. Definitions and problem statement
This section provides preliminary definitions used throughout the paper and describes a model for ontology mapping sys-tem on which the ontology mapping problem can be defined. 2.1. Ontology Definition 1 ( Ontology ). An ontology is a six-tuple of the form: consisting of a set of concepts C and a set of properties P , respectively arranged in the hierarchies H each concept c i with its sub-concepts Sub  X  c i  X  and each property p axioms. The set I contains instances of concepts and properties.

Standard languages such as RDF(S) and OWL are used to define ontologies by providing constructs such as rdfs:subClassOf to define classes and their hierarchy H c or instance, respectively.
 resented as solid arrows. Finally, instances of concepts and instantiation of relations are depicted as dotted arrows.
The considered ontology is meant to model the domain of music records. As can be observed, a music Record can encom-2.1.1. Ontological information structural; and (iii) extensional.
 where e generally denotes a concept, a property or an instance and each w
H where c i is a subconcept of c . On the other hand, for properties: property p : where each c j is a concept whose instances can be the value of p .
 Overall, the structural description ( SD ) can be defined for concepts and properties as follows: Extensional information can be defined for concepts and properties as follows: where i i is an instance of c .
 domain and range , respectively.
 correspond to OWL datatype properties. More formally: where C range and C dom are the sets of concepts names for which, respectively hold the following conditions: c 2 Dom  X  p  X  V C Range 2 Range  X  p  X 
C dom 2 Dom  X  p  X  V c 2 Range  X  p  X  with p 2 P and Range  X  p  X  and Dom  X  p  X  both corresponding to user defined classes. Moreover, P defined ad follows: cxt  X  Artist  X  X  Record ; Country . 2.2. Ontology mapping: motivation and example tions such as semantic search, query rewriting, query routing, Web service composition and so forth [16]. ties as shown in Tables 1 and 2.

As can be noted, mappings between ontologies (a) and (c) are obvious since the mapped entities have identical names. In by the RDF(S) rdfs:domain and rdfs:range constructs.

Note that in Tables 1 and 2 the last column represents a value of overlap between the compared entities. Typically, the more this value approaches 1 the more the two entities are similar.

However, some mapping systems that implement the semantic-matching model [5,20] give as output not a similarity va-ontology entities. 2.3. Ontology mapping representation equivalence between concepts (i.e., owl:equivalentClass ), relations (i.e., owl:sameAs ). This approach allows OWL inference engines to interpret automatically the semantics of mappings and per-particular, this paper is focused on discovering 1:1 mappings, that is, for each entity e
O is considered.

Definition 3 ( Ontology mapping ). An ontology mapping m is defined as a four-tuple of the form:
In this equation we have that: e s represents the entity in O s . e t represents the entity in O t . r is the kind of relation (e.g., exact, narrower, broader, partial overlap) between e k ? [0,1] represents the degree of partial overlap between e 2.4. Ontology mapping system
An ontology mapping system aims at discovering correspondences (aka mappings) among entities belonging to a source ontology O s and a target ontology O t . An ontology mapping system can be seen as a combination of mapping components serving for different purposes (e.g., discovering mappings, combining results).

Fig. 3 shows an ontology mapping system which has  X  n  X  2  X  components: n individual matchers, one combiner and one selector . The matcher modules produce a set of similarity values for entities in O selector module is used to discard mappings that have similarity values below a given threshold. Even in this case, the threshold value is manually settled by the user.
 the form: where M s is a mapping strategy, that is, a combination of interconnected mapping components and Ipt is the input of M which takes the following form: where P is a set parameter values (e.g., weights, thresholds) associated with the different components and C in [38]. Note that the same ontology mapping system can have multiple instance obtained by changing M
Current ontology mapping systems delegate to the user the responsibility to design the most suitable mapping strategy in terms of mapping components and parameter values. One of the goals of this work is to devise a mechanism to automate such skill-intensive task without being domain-dependent. This will be achieved by scrutinizing commonalities between the two specific ontologies under consideration as discussed in Section 4.4. 2.5. Mapping strategy
Definition 5 ( Mapping strategy ). A mapping strategy (Ms), which can be seen as a specific configuration of an ontology mapping system, is a four-tuple of the form: where the sets S and T contain the entities in O s and O t of a directed acyclic graph (DAG) to specify how information has to flow among the components of M mapping components to be included in M d and choose how to connect them to form G . To guarantee the correct execution linear ordering of the components contained within. In particular, each component is executed before all the components it is connected to. 2.6. Similarity function ilarity indicator between an entity in the source ontology (i.e., e
Definition 6 ( Similarity function ). Given two ontology entities e following function: different similarity scores, for instance, through a weighted sum.
 tional requirements a mapping system should feature. 3. Related work systems has been performed under the following perspectives: user support, multiple mapping strategies, evaluation of mapping strategies and automatic parameter setting, which are the main topics covered in this paper. 3.1. User support for ontology mapping
Recently, several algorithms to address the ontology mapping problem have been designed [7,16] , much less work has been done in designing comprehensive mapping frameworks in which user requirements are taken into account even if re-ping solutions by real users. In the following, some mapping systems that have addressed the problem of user-support are discussed.

PROMPT [37] is a Prot X g X  plugin that supports various tasks for managing multiple ontologies, including ontology map-ping. In its original form, PROMPT starts the mapping process by performing initial comparison of the source and target ontologies to be mapped, mainly based on lexical comparison of class names. Thereof, PROMPT presents a set of candidate mappings to the user. A user can examine the mappings, create new mappings, and save the correct ones. As the user iden-tifies a mapping as correct, PROMPT performs structural analysis of the neighborhood of the mapped concepts, suggesting new mappings based on the graph structure. COGZ [18] is a PROMPT plugin developed for addressing some of the missing user requirements in PROMPT. In particular, after studying cognitive support for ontology mapping as discussed in [18] ing incremental navigation. In [19] the authors propose a cognitive framework architecture for ontology mapping. COGZ is extended with the requirements that emerged from this framework definition. The OWL-Lite Alignment system OLA [13] is an ontology mapping tool dedicated to the alignment of ontologies expressed OWL-Lite. OLA relies on a similarity measure features a GUI allowing the navigation of the ontologies to be mapped and the values of the parameters to be set.
In this work, the problem of user support to ontology mapping was addressed and the proper supports in terms of GUIs were designed. In fact, a comprehensive mapping framework architecture was defined to comply with both functional and user requirements. The UFOme implementation, based on this framework, represents an intuitive and user friendly system, prehensive environment than the above-mentioned one. 3.2. Ontology mapping systems based on multiple strategies
Several mapping approaches adopt a multiple matching strategies approach to ontology mapping to take advantage of the information encoded in instances in order to match taxonomies. GLUE relies on machine-learning techniques and quantifies similarity among concepts of the two taxonomies in terms of the joint probability of distribution of the instances. GLUE (name learner and content learner) and a meta-learner, which linearly combines the results of the two base learners. The onomy to the instance. The textual content of an instance is the collection of tokens derived from its name and other attribute values. In GLUE, the user provides training data and analyzes mapping suggestions. iMapper [48] is an ontology stances) associated with ontology concepts are analyzed thus building the enriched ontology. The association of tors. Further refinements are employed to re-rank the results via the use of WordNet. The system is endowed with a GUI allowing navigating the ontologies, associate instances to concepts and examining results.
Falcon-AO [27] is an automatic tool for aligning ontologies based on two alignment strategies: the LMO matcher, which is alignments are gained through LMO as well as GMO. In the linguistic ontology alignment strategy, Falcon-AO constructs a
The system is endowed with a GUI that enables exploration and evaluation of results. The RiMOM system [53] combines dif-ilarity flooding algorithm to the context of ontology mapping. The FOAM system [10] aims at defining a framework for ontology mapping. It provides some basic strategies based on rule, machine learning and selection of candidate mappings. It also allows human intervention in the presence of vague mappings.

Similarly to these systems, UFOme adopts a combination of mapping strategies. However, it takes into account (through parameter values assignment. Moreover, most of these systems are not so intuitive since they have not been designed by taking into account user requirements in terms of user interfaces. UFOme features the mapping task composer which allows the graphic construction of mapping tasks and to easily experiment with different combinations of modules. 3.3. Evaluating mapping strategies
In the context of evaluating mapping strategy, worthy of mention is the work done by Lambrix et al. in [43]. They de-signed the KitAMO framework whose main aim is to evaluate ontology alignment strategies. The authors investigate the ontology mapping problem in the biological domain and present an implementation of their framework. The system pro-vides different GUIs allowing the mapping strategies to be chosen and visualize produced mappings. The UFOme system shares some characteristics with KitAMO. Both approaches allow evaluating and composing mapping strategies and are in a GUI and it is not clear how mapping strategies can be combined. Conversely, the mapping task composer of UFOme is a very intuitive environment allowing to easily connecting modules according to user needs. Moreover, UFOme features the strategy predictor module while in KitAMO the tuning and composition of a mapping strategy is done manually. 3.4. Automatic parameters tuning
In the field of ontology mapping, there are few attempts addressing the problem of parameter tuning. Falcon [27], relies
Based on these coefficients Falcon decides how to weight the results produced by the different mapping strategies. Con-versely, UFOme exploits the affinity coefficients to determine the mapping strategy and then execute it. Moreover, UFOme matching, the eTuner system [30] allows a matching process to be tuned in the presence of the ground truth mapping. In mation will be exploited when S has to be matched with other schemas. Experimental results [30] shown the eTuner out-performs the same matching methods on which tuning was not performed. More recently [32] also RiMOM has been proposed as a system to automatically determine the parameter in an ontology mapping strategy. RiMOM features two affin-
The differences between UFOme and these systems are as follows. UFOme is different from eTuner since eTuner does not analyze the analogies between the schemas to be matched for determining parameter values but alters the source schema and constructs the ground truth mapping upon this alteration. Hence, tuning is determined on these altered schemas. In-exploits the Shepard law [47] proposed in psychological science, which has been proven to be consistent in predicting and the results obtained were significant as discussed in Section 6. Moreover, UFOme is a comprehensive mapping system featuring user friendly graphical interfaces in which both expert and non-expert users can operate. 3.5. Requirements of an ontology mapping framework
As emerged from the previous analysis, several mapping systems are today available [7] and therefore users have to face and more effectively a mapping task. The most common user support are user friendly GUIs.

Hence, in designing an ontology mapping framework it is not only important to investigate functional requirements, that severely undermined by the lack of tools supporting the users [17]. By the investigation of current mapping systems dis-cussed in the previous section we noticed that: kinds of ontological information.
 systems, which assist users in the different phases of mapping task execution.
 the mapping problem. Typically, mapping strategies are manually designed and parameter values are manually tuned.
However, parameters tuning is a time-and-skill intensive process and heavily depends on the particular knowledge domain.

Current ontology mapping systems do not have a reference architecture. They mainly provide components devoted to dis-cover mappings underestimating other important functional requirements needed in constructing complex mapping strategies.

Table 3 summarizes the results of the analysis performed in this section. In the next section a set of requirements an ontology mapping framework should meet will be identified. From the analysis reported in Table 3 several considerations vides at least one specific technique. This emphasizes how ontology mapping can benefit from well-established techniques devised in other research fields. Besides, the primary sources of knowledge for researchers in ontology mapping are the  X  X  X ever-ending X  findings produced by the database community, which has being facing the schema mapping problem since several years. 3.6. What a mapping system should feature?
This section aims at identifying some main requirements a comprehensive mapping system should meet. These require-ments emerged from the analysis done in the previous section and are the basis for the development of the UFOme system, which will be throughly described in Section 5. From the investigation performed in Section 3, it emerged that a mapping mapping task is executed; (iii) evaluation : in this phase the results produced are analyzed and validated by the user.
For each phase a set of requirements and features is defined and detailed in Table 4 . How the UFOme system copes with these requirements will be discussed in the following sections. 4. A library of modules for ontology mapping systems
This section presents a library of mapping modules aimed at fulfilling the framework requirements identified in Section mappings but in:
Designing a comprehensive set of modules (beyond mapping discovery) to assist the user in all the phases of a mapping task execution.

Designing a strategy predictor module, which assists the user in developing a mapping strategy with related parameter by only investigating the specific mapping task (i.e., the two ontologies under consideration).
The functionalities of some of the modules presented in this section already exist and have just been integrated in this framework. This has been made possible since the software architecture underlying this framework has been inspired by the component-based software engineering principle, where each individual component is a module (in our case a module of an ontology mapping system), that encapsulates a set of related functions.
 A module can be represented by the architecture depicted in Fig. 4 .

A module can be seen as a black box having a set of incoming connections (i.e., the input) and a set of outgoing connec-tions (i.e., the output). It also exposes one or more configuration parameters.

A module processes the input and, according to its specific aim (e.g., mapping, combination, evaluation), produces the These categories will be described in the following.
 More information on the implementation of this framework in the UFOme system are provided in Section 5.2 while some available at http://grid.deis.unical.it/ufome . 4.1. Visualization In this category the OntoLoader module was designed, which has a twofold purpose. On the one hand, by exploiting the ogies to be mapped) on which different mapping strategies can be evaluated.
 4.2. Matching
This category of modules contains the individual matchers. Note that most of these matchers already exist in the litera-
Eq. (19)). Currently, this category includes four individual matchers: (2) String matcher (SM) : this matcher implements some of the most common string comparison strategies such as the I-(3) WordNet matcher (WM) : this matcher exploits the WordNet [36] lexical database by implementing the similarity mea-(4) Structural matcher (SOM) : this matcher implements the approach defined in [50].

The LOM, SM and WM matchers have been designed to exploit linguistic descriptions of ontology entities and are clas-ontology entities.
 case of large ontologies, approaches such those proposed in [51,26] can be adopted. 4.2.1. The Lucene ontology matcher (LOM)
As pointed out in [41], today X  X  mapping tools underestimate an important part of linguistic ontological information en-entities.

The LOM workflow is shown in Fig. 5 . LOM takes as input the sets S and T , obtained by two OntoLoader modules, contain-source entity, a Lucene document. Documents are stored into a Lucene index maintained in the main memory. Hence, map-of a mapping task. LOM implements the following similarity function: where S n ; S c ; S l , and S i represents the similarity values between the source entity e comment, labels and instances, respectively. The function F [41]. 4.2.2. The wordnet matcher (WM)
The WordNet matcher allows assessing similarity between names of ontology entities by considering their semantic ogy where concepts are connected to each other by well-defined types of relations such as inheritance or part-of. Fig. 6 shows an excerpt of the WordNet ontology.

By exploiting WordNet, the WordNet matcher can discover similarity among apparently unrelated terms (e.g., automobile was implemented: [45] of a concept is defined as in [46]: where the function hypo returns the number of hyponyms (i.e., sub-concepts) of a concept e . The function subs  X  e the concept (the lowest in the WordNet noun taxonomy) that subsumes e the WordNet taxonomy. For instance, the similarity between the concepts Person and Plant defined in Fig. 6 is 0.909. 4.2.3. The string matcher (SM) Winkler measure (SMw) described in [52] (iii) a similarity measure (SMe) based on the edit-distance [31].
I-Sub compares the similarity of strings by considering their similarity along with their differences and has been espe-SMi(Person,Plant) = 0.9 .

The Winkler measure is mainly used in the area of record linkage (duplicate detection). According to this measure, the SMw (Person,Plant) = 0.577 .

Finally, the edit distance measure states that the distance between two strings is given by the minimum number of oper-character. In this case, SMe (Person,Plant) = 0.4345. 4.2.4. The structural ontology matcher (SOM) ping problem into a graph matching problem as OWL ontologies can be naturally seen as graphs in which concepts and properties are represented as nodes and OWL built-in properties as edges. SOM is based on the graph matching algorithm can be modeled by a vector space model in which each property is represented as a dimension of a k -dimensional space S whose values are calculated by iterating the following updating equation: where each element s ij of S k represent the similarity between a source entity e
S k 1 is reached.
 dotted areas of Fig. 2 are structurally very similar. Let assume that the properties coded in a vector space as (0,1) and (1,0), respectively. Therefore, the matrix A and B are: Therefore, according to (23) at iteration 1 is obtained:
In order to have the similarity values normalized between 0 and 1, the Frobenius norm (FN) of the S The FN is defined as the square root of the sum of the absolute squares of its elements. Hence, is obtained: After iterating the algorithm four times, the following similarity matrix is obtained:
The elements of this matrix represent the partial overlap values for mappings reported in Table 2 . 4.3. Combination
In this category the Combiner module was designed, which takes as input a set of similarity assessments (provided by the select results according to a specific strategy as for instance by filtering results on the basis of a given threshold. 4.4. Strategy prediction: the strategy predictor module
As pointed out in Section 3, a main disadvantage of current ontology mapping systems is the lack of support to automat-mapping has been pointed out as a mandatory requirement in future mapping systems as discussed in a recent online survey ule is presented.
 ties and suggests the individual matchers to be adopted and the values of parameters to combine (by adopting a combiner will be exploited to illustrate the functioning principles of the strategy predictor .

The strategy predictor scrutinizes the source ontology O s mapping modules to be used. 4.4.1. Lexical affinity coefficient The lexical affinity  X  L a  X  between two ontologies is defined as follows: where # common entities is incremented each time the similarity between linguistic description of a source entity  X  e linguistic description of a target entity  X  e t  X  exceeds the Th information in terms of name, labels, comments and so forth. The rationale of L linguistic terminology to name their entities the more they are linguistically comparable. A high L
L between the two ontologies (a) and (c) shown in Fig. 7 is L high values of L a should recommend the usage of linguistic mapping strategies. 4.4.2. Structural affinity coefficient position in the class (property, resp.) hierarchy. The structural information content  X  IC cepts and properties by considering their position in their respective hierarchy. Generally speaking, the IC class or a property) is obtained by adapting the formulation provided in [46].
 entities in the hierarchy. Overall, S a is defined as: where # common _ entities is incremented each time two entities have a very similar ICs (defined by the Th
As an example, the S a between the two ontologies (b) and (c) shown in Fig. 7 is S value of S a the strategy predictor should recommend to use SOM. 4.4.3. Exploiting affinity coefficients The L a and S a coefficient are exploited by the strategy predictor module to suggest the following parameters: Lexical weight  X  w l  X  : weight assigned to the mappings discovered by the linguistic mapping strategies. Structural weight  X  w s  X  : weight assigned to the mappings discovered by the structural matcher (i.e., SOM).
Threshold (Th): the cut-off threshold values for LMS (i.e., Th ular, if the value the lexical affinity L a or structural affinity S mapping strategies or the SOM matcher are not included in the mapping task. 4.4.4. On determining the optimal threshold values
The basic idea in suggesting the threshold values is that the higher are L ing function is appropriate to reach this goal. The strategy predictor determines the optimal thresholds values as: where a &lt; 1 and b &lt; 1 are constants quantifying the monotonic decreasing rate. 4.4.5. On determining optimal weight values
The strategy predictor in order to suggest the optimal weights values, starts from a common-sense consideration: if an affinity coefficient is high then the mappings discovered by the corresponding category of matchers have to be weighted constraints, we adopt the following two heuristic functions:
These formulas have been proven to be useful in computer science even in the context of semantic similarity as discussed in [33]. 4.5. Evaluation (P), Recall (R) and F-measure  X  F m  X  .

These measures are based on the comparison of an expected result with that returned by the system [9]. In the context of ontology mapping, a set of mappings obtained by a mapping task w.r.t a reference alignment are compared. Note that gen-can graphically scrutinize the ontologies to be mapped through the OntoLoader module. The Comparer module allows the comparison of two mapping strategies in terms of P, R and F be evaluated (in terms of time elapsed) of the different modules or of a mapping strategy for the whole. 5. UFOme: A comprehensive ontology mapping system
The requirements of the designed ontology mapping framework were defined in Sections 3.6 and 4 described how these through the user friendly ontology mapping environment (UFOme) system. Moreover, through an example, the support facil-ity that UFOme provides to users, in terms of GUIs, is also shown. 5.1. A reference ontology mapping framework architecture
Fig. 8 depicts an overall view of the designed mapping framework. This architecture brings together discussions done in the previous sections.

According to the processing flow depicted in this figure, given the source and target ontologies O
Cm 1 , chose or change the mapping strategy, navigate ontologies, validate and then produce mappings. 5.2. The UFOme system The UFOme system has been implemented in Java. The work presented here is an extension of a preliminary version of the strategy prediction module. Moreover, in this paper we provide an extensive evaluation of the system.
UFOme has been designed to provide intuitive support for both expert and non-expert user, which need to map ontolo-gies for semantic integration purposes. In fact, a user with background on ontology mapping techniques can choose manu-ally the mapping components and how to connect them to design the most suitable mapping strategy for his purposes. On novice user during the phases of the ontology mapping task.

In the remainder of this section we present the software architecture of the system and show how UFOme supports users in the different phases of a mapping task execution.
 5.2.1. The UFOme two-layer architecture in the mapping task and connect them according to the mapping strategy s/he wants to implement. In this phase (i.e., designing) both incoming and outgoing module connections are checked in order to verify that modules receive the correct the mapping task has been correctly composed then it can be executed.

A mapping task composed at the graphical layer, in order to be executed (execution phase), is converted into a mapping passed on to the connected modules and stored within the module for possible subsequent analysis (UFOme allows to indi-described. 5.2.2. Phase 1: Designing
In this phase, a user can choose the various modules to be included in the mapping task, in case s/he wants to create a mapping strategies and wants to design the strategy according to her needs. Fig. 10 shows a snapshot of the UFOme main can place them into the mapping task composer (see part (d)) and construct the DAG of the mapping strategy by connecting to one another modules.

For each connection a consistency control is performed, which checks compatibility between output of a module and in-part (c)).
 tion of the connections will be exploited to run the topological sort algorithm to determine the correct execution order among modules.
 UFOme allows the user to visualize the ontologies to be mapped as shown in the GUI in Fig. 11 . not to validate this mapping. 5.2.3. Phase 2: Running
In this phase, the mapping task is executed according to the order defined by the topological sort algorithm. Results particular, part (a) in Fig. 12 shows the mapping discovered by the String matcher, whereas part (b) shows the results obtained by the Structural matcher. As can be noted each mapping is accompanied with a confidence value and mapping of precision, recall and F-measure. 5.2.4. Phase 3: Evaluation different combination of modules and/or parameters). In current ontology mapping systems, designing different techniques studies on the usability of ontology mapping systems [17], intuitive and better GUIs is what is mainly demanded by real users.

In Fig. 13 , the evaluator module takes as input the result of the combination (obtained by the combiner module) of the ular form.

In Fig. 14 the evaluation of a mapping strategy in terms of time elapsed and mapping discovered is shown. In particular, ing the greatest amount of time. 5.2.5. Remark
UFOme has been design by keeping in mind that user friendly interfaces are the best way to support even non-expert to evaluate usability aspects of UFOme in future work by using the SUMI questionnaire. 6. Experimental evaluation determining the most suitable mapping strategy in terms of modules and parameter values. All experiments were performed on an Intel Core 2 running at 2.0 GHz with 2 GB of memory.
 6.1. The dataset and the evaluation methodology
UFOme was evaluated on the OAEI benchmark test suite, which can be considered a standard de facto dataset in the field test suite in terms of Precision (P), Recall (R) and F-measure  X  F 6.2. Evaluation of the strategy predictor module
In UFOme, as well as in all multi-strategy based mapping approaches, weights and thresholds have to be correctly set in a mapping strategy. The strategy predictor was evaluated on these three aspects. 6.2.1. Parameter tuning
The strategy predictor uses some smoothing factors and threshold values in its definition. Table 6 summarizes the values were used to fine-tune these parameters. 6.3. Effect of the threshold on linguistic mapping strategies
In order to see how a manually set threshold value can affect results of LMS, ontologies in G2 were considered that are linguistic alterations of the reference ontology (i.e., ontology 101). The average P, R and F
WM. In these experiments, WM outperformed the others in ontology 204 where the names of entities are replaced with syn-case, using more than one linguistic strategy improved results. Fig. 15 shows the P, R and F value of P is reached when the Th l values is 1.0 while R and F in terms of F m . In order to evaluate the strategy predictor , the values of P, R, and F ping on which to evaluate the outcome obtained. Therefore, a Th value between 0 and 1. Table 7 reports the results of this evaluation. As can be noticed the results of P, R and F and F m values increase by 25% and 23%, respectively. 6.4. Effect of the threshold on structural ontology mapping
The same evaluation was performed for the SOM matcher on G3 ontologies. Fig. 16 shows the effects of the structural threshold Th s on average P, R and F m . In this case, the optimal Th
As can be noted, when Th s increases the value of P improves while R and F were compared when assigning a Th s of 0.51 with those in which the Th
Th . 6.5. Evaluating automatic weights assignment The effects of manual weights assignment were evaluated on ontologies from 248 to 266. The evaluation reported in
Fig. 17 shows that the F m reaches the best value when more emphasis is given to w w ; F m dramatically decreases. In this experiment, both LMS and SOM were adopted. However, it is worth noting that LMS are more effective than SOM as the F m improves when giving w a multiple mapping strategy worsens the F m value.

In order to evaluate the strategy predictor , 0.5 was manually assigned to both w those in which w l and w s are suggested by the strategy predictor for ontologies from 301 to 304. The Th notable improvement in terms of R is in ontology 304 where R increases by about 30%, however, P decreases by about 30%.
Note that in the overall evaluation the value of R obtained with automatic weights assignment is 0.83 while the maximum ment. This underlines how the strategy predictor is effective. 6.5.1. Evaluating the effects of mapping modules selection
In this experiment, the effect of including SOM in a mapping strategy was evaluated. Note that the strategy predictor establishes if SOM has to be included by checking if the structural affinity coefficient S 6).

Table 10 shows the results on all the groups of tests. The UFOme column indicates that in the fully-fledged UFOme, if an affinity coefficient (e.g., S a ) is below a given threshold ( Th altered (i.e., G2), the values of P and R improve when adopting SOM. However, in ontologies belonging to G5, which have derived from LMS since the strategy predictor suggests not adopting the SOM matcher. In the overall evaluation, the fully-fledged UFOme, obtains a better P (increases by about 4%) while R improves by about 40%. The improvement is also notable in terms of F m . 6.5.2. Comparing UFOme with other systems In this section, UFOme was compared with other ontology mapping algorithms on different versions of the OAEI test sets. ations, the parameter values and the mapping strategy have been automatically determined by the strategy predictor . For each evaluation, UFOme has been compared with ten systems. Moreover, a deeper comparison is provided w.r.t the best system.

Table 11 reports the results on the OAEI 2006. It can be noted that RiMOM, Falcon, DSSim, Prior and UFOme obtained the improve the correctness of the mapping. Falcon adopts three elementary matchers, V-Doc, I-Sub, and GMO. In addition, in on the observation of the linguistic comparability as well as the structural comparability.
UFOme even if is less precise than other algorithms, reaches very good values in terms of R and then F RiMOM, which also makes some predictions on the strategy to be adopted in a mapping task execution, we can observe that UFOme obtained better results.

The same evaluations have been performed on the OAEI 2007 by considering, even in this case, ten participants. The re-2006. UFOme obtained lower precision even if the recall remained the same. The best system is Prior+, which takes advan-thus avoiding to adopt expensive matching strategies such as structural matchers.
 2007 and the same value of R. Note that as compared to RiMOM, UFOme obtained better results even if the best system is
SAMBO. SAMBO is a system including several matchers that may use knowledge from different sources. The system presents some alignment suggestions that are determined by combining and filtering the results generated by one or more matchers.
The suggestions are then presented to the user who accepts or rejects them. The acceptance and rejection of a suggestion most appropriate matching strategy on the basis of the particular mapping task.
 eter values. 7. Discussion
This paper described an ontology mapping framework tackling ontology mapping in a systematic way both from func-tional and user viewpoint. The framework requirements have emerged from an extensive review on the state of the art re-ported in Section 3. To fulfill these requirements, a software architecture inspired by the component-based software engineering has been designed, which leverages building block components dubbed as modules.
In particular, this architecture resulted in an implementation called UFOme, whose user supports in terms of GUIs have predictor has been shown in the evaluation section, where it has been shown how wrong values assigned to parameters can significantly worsen results (see Figs. 15 and 16 ).

Overall, on one side, UFOme automates the design of a mapping strategy by scrutinizing the affinities between the ontol-ogies to be mapped and on the other side, it provides a comprehensive and user friendly ontology mapping environment. 8. Future work guidelines in order to allow developers to design and implement mapping models fulfilling the architectural requirements of the UFOme underlying software architecture. This way the system can encompass several components and hopefully be affinity coefficients.

References
