
Many researchers are trying to use information extraction (IE) to create large-scale knowl-edge bases from natural language text on the
Web. However, the primary approach (su-pervised learning of relation-specific extrac-tors) requires manually-labeled training data for each relation and doesn X  X  scale to the thou-sands of relations encoded in Web text.

This paper presents LUCHS , a self-supervised, relation-specific IE system which learns 5025 relations  X  more than an order of magnitude greater than any previous approach  X  with an average F1 score of 61%. Crucial to LUCHS  X  X  performance is an automated system for dy-namic lexicon learning , which allows it to learn accurately from heuristically-generated training data, which is often noisy and sparse. Information extraction (IE), the process of gen-erating relational data from natural-language text, has gained popularity for its potential applications in Web search, question answering and other tasks. Two main approaches have been attempted:  X  Supervised learning of relation-specific ex- X   X  X pen X  IE  X  self-supervised learning of Unfortunately, both methods have problems. Supervised approaches require manually-labeled training data for each relation and hence can X  X  scale to handle the thousands of relations encoded in Web text. Open extraction is more scalable, but has lower precision and recall. Furthermore, open extraction doesn X  X  canonicalize relations, so any application using the output must deal with homonymy and synonymy.

A third approach, sometimes refered to as weak supervision, is to heuristically match values from a database to text, thus generating a set of train-ing data for self-supervised learning of relation-specific extractors (Craven and Kumlien, 1999). With the Kylin system (Wu and Weld, 2007) ap-plied this idea to Wikipedia by matching values of an article X  X  infobox 1 attributes to corresponding sentences in the article, and suggested that their approach could extract thousands of relations (Wu et al., 2008). Unfortunately, however, they never tested the idea on more than a dozen relations. In-deed, no one has demonstrated a practical way to extract more than about one hundred relations.
We note that Wikipedia X  X  infobox  X  X ntology X  is a particularly interesting target for extraction. As a by-product of thousands of contributors, it is broad in coverage and growing quickly. Unfortunately, the schemata are surprisingly noisy and most are sparsely populated; challenging conditions for ex-traction.

This paper presents LUCHS , an autonomous, self-supervised system, which learns 5025 rela-tional extractors  X  an order of magnitude greater than any previous effort. Like Kylin, LUCHS cre-ates training data by matching Wikipedia attribute values with corresponding sentences, but by itself, this method was insufficient for accurate extrac-tion of most relations. Thus, LUCHS introduces a new technique, dynamic lexicon features , which dramatically improves performance when learning from sparse data and that way enables scalability. 1.1 Dynamic Lexicon Features Figure 1 summarizes the architecture of LUCHS . At the highest level, LUCHS  X  X  offline training pro-cess resembles that of Kylin. Wikipedia pages Figure 1: Architecture of LUCHS . In order to handle sparsity in its heuristically-generated train-ing data, LUCHS generates custom lexicon features when learning each relational extractor. containing infoboxes are used to train a classi-fier that can predict the appropriate schema for pages missing infoboxes. Additionally, the val-ues of infobox attributes are compared with article sentences to heuristically generate training data. LUCHS  X  X  major innovation is a feature-generation process, which starts by harvesting HTML lists from a 5B document Web crawl, discarding 98% to create a set of 49M semantically-relevant lists. When learning an extractor for relation R , LUCHS extracts seed phrases from R  X  X  training data and uses a semi-supervised learning algorithm to cre-ate several relation-specific lexicons at different points on a precision-recall spectrum. These lex-icons form Boolean features which, along with lexical and dependency parser-based features, are used to produce a CRF extractor for each relation  X  one which performs much better than lexicon-free extraction on sparse training data.

At runtime, LUCHS feeds pages to the article classfier, which predicts which infobox schema is most appropriate for extraction. Then a small set of relation-specific extractors are applied to each sentence, outputting tuples. Our experiments demonstrate a high F1 score, 61%, across the 5025 relational extractors learned. 1.2 Summary This paper makes several contributions:  X  We present LUCHS , a self-supervised IE sys- X  We describe the construction and use of dy- X  We evaluate the overall end-to-end perfor- X  We present a comprehensive set of additional Wikipedia is an ideal starting point for our long-term goal of creating a massive knowledge base of extracted facts for two reasons. First, it is com-prehensive, containing a diverse body of content with significant depth. Perhaps more importantly, Wikipedia X  X  structure facilitates self-supervised extraction. Infoboxes are short, manually-created tabular summaries of many articles X  key facts  X  effectively defining a relational schema for that class of entity. Since the same facts are often ex-pressed in both article and ontology, matching val-ues of the ontology to the article can deliver valu-able, though noisy, training data.

For example, the Wikipedia article on  X  X erry Se-infeld X  contains the sentence  X  X einfeld was born in Brooklyn, New York. X  and the article X  X  infobox contains the attribute  X  X irth place = Brooklyn X . By matching the attribute X  X  value  X  X rooklyn X  to the sentence, we can heuristically generate train-ing data for a birth place extractor. This data is noisy; some attributes will not find matches, while others will find many co-incidental matches. We first assume that each Wikipedia infobox at-tribute corresponds to a unique relation (but see Section 5.6) for which we would like to learn a specific extractor. A major challenge with such an approach is scalability. Running a relation-specific extractor for each of Wikipedia X  X  34,000 unique infobox attributes on each of Wikipedia X  X  50 million sentences would require 1.7 trillion ex-tractor executions.

We therefore choose a hierarchical approach that combines both article classifiers and rela-tion extractors. For each infobox schema, LUCHS trains a classifier that predicts if an article is likely to contain that schema. Only when an article is likely to contain a schema, does LUCHS run that schema X  X  relation extractors. To extract in-fobox attributes from all of Wikipedia, LUCHS now needs orders of magnitude fewer executions.
While this approach does not propagate infor-mation from extractors back to article classifiers, experiments confirm that our article classifiers nonetheless deliver accurate results (Section 5.2), reducing the potential benefit of joint inference. In addition, our approach reduces the need for extrac-tors to keep track of the larger context, thus sim-plifying the extraction problem.

We briefly summarize article classification: We use a linear, multi-class classifier with six kinds of features: words in the article title, words in the first sentence, words in the first sentence which are direct objects to the verb  X  X o be X , article sec-tion headers, Wikipedia categories, and their an-cestor categories. We use the voted perceptron al-gorithm (Freund and Schapire, 1999) for training.
More challenging are the attribute extractors, which we wish to be simple, fast, and able to well capture local dependencies. We use a linear-chain conditional random field (CRF)  X  an undirected graphical model connecting a sequence of input and output random variables, x = ( x 0 ,...,x T ) and y = ( y 0 ,...,y T ) (Lafferty et al., 2001). In-put variables are assigned words w . The states of output variables represent discrete labels l , e.g. Arg i -of-Rel j and Other . In our case, variables are connected in a chain, following the first-order Markov assumption. We train to maximize condi-tional likelihood of output variables given an input probability distribution. The CRF models p ( y | x ) are represented with a log-linear distribution p ( y | x ) = where feature functions, f , encode sufficient statistics of ( x,y ) , T is the length of the sequence, K is the number of feature functions, and  X  k are parameters representing feature weights, which we learn during training. Z ( x ) is a partition func-tion used to normalize the probabilities to 1. Fea-ture functions allow complex, overlapping global features with lookahead.

Common techniques for learning the weights  X  k include numeric optimization algorithms such as stochastic gradient descent or L-BFGS. In our ex-periments, we again use the simpler and more effi-cient voted-perceptron algorithm (Collins, 2002). The linear-chain layout enables efficient interence using the dynamic programming-based Viterbi al-gorithm (Lafferty et al., 2001).
 We evaluate nine kinds of Boolean features: Words For each input word w we introduce fea-State Transitions For each transition be-tween output labels l i , l j we add feature f Word Contextualization For parameters p and s we add features f prev w ( y t  X  1 ,y t ,x,t ) := 1 1 words appearing before and after each position t . Capitalization We add feature f Digits We add feature f dig ( y t  X  1 ,y t ,x,t ) := 1 Dependencies We set f dep ( y t  X  1 ,y t ,x,t ) to the lemmatized sequence of words from x t to the root of the dependency tree, computed using the Stan-ford parser (Marneffe et al., 2006).
 First Sentence We set f fs ( y t  X  1 ,y t ,x,t ) := 1 Gaussians For numeric attributes, we fit a Gaus-sian (  X , X  ) and add feature f gau i ( y t  X  1 ,y t ,x,t ) := 1 Lexicons For non-numeric attributes, and for a lexicon l , i.e. a set of related words, we add fea-explained in the following section. It is often possible to group words that are likely to be assigned similar labels, even if many of these words do not appear in our training set. The ob-tained lexicons then provide an elegant way to im-prove the generalization ability of an extractor, es-pecially when only little training data is available. However, there is a danger of overfitting, which we discuss in Section 4.2.4.

The next section explains how we mine the Web to obtain a large corpus of quality lists. Then Sec-tion 4.2 presents our semi-supervised algorithm for learning semantic lexicons from these lists. 4.1 Harvesting Lists from the Web Domain-independence requires access to an ex-tremely large number of lists, but our tight in-tegration of lexicon acquisition and CRF learn-ing requires that relevant lists be accessed instan-taneously. Approaches using search engines or wrappers at query time (Etzioni et al., 2004; Wang and Cohen, 2008) are too slow; we must extract and index lists prior to learning.
 We begin with a 5 billion page Web crawl. LUCHS can be combined with any list harvesting technique, but we choose a simple approach, ex-tracting lists defined by HTML &lt;ul&gt; or &lt;ol&gt; tags. The set of lists obtained in this way is ex-tremely noisy  X  many lists comprise navigation bars, tag sets, spam links, or a series of long text paragraphs. This is consistent with the observation that less than 2% of Web tables are relational (Ca-farella et al., 2008).
 We therefore apply a series of filtering steps. We remove lists of only one or two items, lists containing long phrases, and duplicate lists from the same host. After filtering we obtain 49 million lists, containing 56 million unique phrases. 4.2 Semi-Supervised Learning of Lexicons While training a CRF extractor for a given rela-tion, LUCHS uses its corpus of lists to automati-cally generate a set of semantic lexicons  X  spe-cific to that relation . The technique proceeds in three steps, which have been engineered to run ex-tremely quickly: 1. Seed phrases are extracted from the labeled 2. A learning algorithm expands the seed 3. The semantic lexicons are added as features 4.2.1 Extracting Seed Phrases For each training sentence LUCHS first identifies subsequences of labeled words, and for each such labeled subsequence, LUCHS creates one or more seed phrases p . Typically, a set of seeds con-sists precisely of the labeled subsequences. How-ever, if the labeled subsequences are long and have substructure, e.g. ,  X  X an Remo, Italy X  , our system splits at the separator token, and creates additional seed sets from prefixes and postfixes. 4.2.2 From Seeds to Lexicons To expand a set of seeds into a lexicon, LUCHS must identify relevant lists in the corpus. Rele-vancy can be computed by defining a similarity be-tween lists using the vector-space model. Specifi-cally, let L denote the corpus of lists, and P be the set of unique phrases from L . Each list l 0  X  X  can be represented as a vector of weighted phrases p  X  P appearing on the list, l 0 = ( l 0 p lowing the notion of inverse document frequency, a phrase X  X  weight is inversely proportional to the number of lists containing the phrase. Popular phrases which appear on many lists thus receive a small weight, whereas rare phrases are weighted higher: Unlike the vector space model for documents, we ignore term frequency, since the vast majority of lists in our corpus don X  X  contain duplicates. This vector representation supports the simple cosine definition of list similarity , which for lists l 0 ,l 1  X  L is defined as Intuitively, two lists are similar if they have many overlapping phrases, the phrases are not too com-mon, and the lists don X  X  contain many other phrases. By representing the seed set as another vector, we can find similar lists, hopefully contain-ing related phrases. We then create a semantic lex-icon by collecting phrases from a range of related lists.

For example, one lexicon may be created as the union of all phrases on lists that have non-zero similarity to the seed list. Unfortunately, due to the noisy nature of the Web lists such a lexicon may be very large and may contain many irrele-vant phrases. We expect that lists with higher sim-ilarity are more likely to contain phrases which are related to our seeds; hence, by varying the sim-ilarity threshold one may produce lexicons rep-resenting different compromises between lexicon precision and recall. Not knowing which lexicon will be most useful to the extractors, LUCHS gen-erates several and lets the extractors learn appro-priate weights.

However, since list similarities vary depending on the seeds, fixed thresholds are not an option. If #similarlists denotes the number of lists that have non-zero similarity to the seed list and #lexicons the total number of lexicons we want to generate, LUCHS sets lexicon i  X  { 0 ,..., # lexicons  X  1 } to be the union of prases on the most similar lists. 2 4.2.3 Efficiently Creating Lexicons We create lexicons from lists that are similar to our seed vector, so we only consider lists that have at least one phrase in common. Importantly, our index structures allow LUCHS to select the rele-vant lists efficiently. For each seed, LUCHS re-trieves the set of containing lists as a sorted se-quence of list identifiers. These sequences are then merged yielding a sequence of list identifiers with associated seed-hit counts. Precomputed list lengths and inverse document frequencies are also retrieved from indices, allowing efficient compu-tation of similarity. The worst case complexity is O (log( S ) SK ) where S is the number of seeds and K the maximum number of lists to consider per seed. 4.2.4 Preventing Lexicon Overfitting Finally, we integrate the acquired semantic lexi-cons as features into the CRF. Although Section 3 discussed how to use lexicons as CRF features, there are some subtleties. Recall that the lexi-cons were created from seeds extracted from the training set. If we now train the CRF on the same examples that generated the lexicon features, then the CRF will likely overfit, and weight the lexicon features too highly!
Before training, we therefore split the training set into k partitions. For each example in a par-tition we assign features based on lexicons gener-ated from only the k  X  1 remaining partitions . This avoids overfitting and ensures that we will not per-form much worse than without lexicon features. When we apply the CRF to our test set, we use the lexicons based on all k partitions. We refer to this technique as cross-training . We start by evaluating end-to-end performance of LUCHS when applied to Wikipedia text, then an-alyze the characteristics of its components. Our experiments use the 10/2008 English Wikipedia dump. Figure 2: Precision / recall curve for end-to-end system performance on 100 random articles. 5.1 Overall Extraction Performance To evaluate the end-to-end performance of LUCHS , we test the pipeline which first classifies incoming pages, activating a small set of extrac-tors on the text. To ensure adequate training and test data, we limit ourselves to infobox classes with at least ten instances; there exist 1,583 such classes, together comprising 981,387 articles. We only consider the first ten sentences for each ar-ticle, and we only consider 5025 attributes. 3 We create a test set by sampling 100 articles ran-domly; these articles are not used to train article classifiers or extractors. Each test article is then automatically classified, and a random attribute of the predicted schema is selected for extraction. Gold labels for the selected attribute and article are created manually by a human judge and compared to the token-level predictions from the extractors which are trainined on the remaining articles with heuristic matches.

Overall, LUCHS reaches a precision of .55 at a recall of .68, giving an F1-score of .61 (Figure 2). Analyzing the errors in more detail, we find that in 11 of 100 cases an article was incorrectly classi-fied. We note that in at least two of these cases the predicted class could also be considered correct. For example, instead of Infobox Minor Planet the extractor predicted Infobox Planet .

On five of the selected attributes the extrac-tor failed because the attributes could be consid-ered unlearnable: The flexibility of Wikipedia X  X  infobox system allows contributors to introduce attributes for formatting, for example defining el-ement order. In the future we wish to train LUCHS to ignore this type of attribute.

We also compared the heuristic matches con-tained in the selected 100 articles to the gold stan-dard: The matches reach a precision of .90 at a recall of .33, giving an F1-score of .48. So while most heuristic matches hit mentions of attribute values, many other mentions go unmatched. Man-ual analysis shows that these values are often miss-ing from an infobox, are formatted differently, or are inconsistent to what is stated in the article.
So why did the low recall of the heuristic matches not adversely affect recall of our extrac-tors? For most articles, an attribute can be as-signed a single unique value. When training an attribute extractor, only articles that contained a heuristic match for that attribute were considered, thus avoiding many cases of unmatched mentions.
Subsequent experiments evaluate the perfor-mance of LUCHS components in more detail. 5.2 Article Classification The first step in LUCHS  X  X  run-time pipeline is de-termining which infobox schemata are most likely to be found in a given article. To test this, we ran-domly split our 981,387 articles into 4/5 for train-ing and 1/5 for testing, and train a single multi-class classifier. For this experiment, we use the original infobox class of an article as its gold la-bel. We compute the accuracy of the prediction at .92. Since some classes can be considered inter-changeable, this number represents a lower bound on performance. 5.3 Factors Affecting Extraction Accuracy We now evaluate attribute extraction assuming perfect article classification. To keep training time manageable, we sample 100 articles for training and 100 articles for testing 4 for each of 100 ran-dom attributes. We again only consider the first ten sentences of each article, and we only con-sider articles that have heuristic matches with the attribute. We measure F1-score at a token-level, taking the heuristic matches as ground-truth.
We first test the performance of extractors trained using our basic features (Section 3) 5 , not including lexicons and Gaussians. We begin us-ing word features and obtain a token-level F1-score of .311 for text and .311 for numeric at-tributes. Adding any of our additional features Table 1: Impact of Lexicon and Gaussian features. Cross-Training (CT) is essential to improve per-formance. improves these scores, but the relative improve-ments vary: For both text and numeric attributes, contextualization and dependency features deliver the largest improvement. We then iteratively add the feature with largest improvement until no fur-ther improvement is observed. We finally obtain an F1-score of .491 for text and .586 for numeric attributes. For text attributes the extractor uses word, contextualization, first sentence, capitaliza-tion, and digit features; for numeric attributes the extractor uses word, contextualization, digit, first sentence, and dependency features. We use these extractors as a baseline to evaluate our lexicon and Gaussian features.

Varying the size of the training sets affects re-sults: Taking more articles raises the F1-score, but taking more sentences per article reduces it. This is because Wikipedia articles often summarize a topic in the first few paragraphs and later discuss related topics, necessitating reference resolution which we plan to add in future work. 5.4 Lexicon and Gaussian Features We next study how our distribution features 6 im-pact the quality of the baseline extractors (Table 1). Without cross-training we observe a reduction in performance, due to overfitting. Cross-training avoids this, and substantially improves results over the baseline. While cross-training is particularly critical for lexicon features, it is less needed for Gaussians where only two parameters, mean and deviation, are fitted to the training set.

The relative improvements depend on the num-ber of available training examples (Table 2). Lex-icon and Gaussian features especially benefit ex-tractors for sparse attributes. Here we can also see that the improvements are mainly due to increases in recall. Table 2: Lexicon and Gaussian features greatly ex-pand F1 score (F1-LUCHS ) over the baseline (F1-B), in particular for attributes with few training ex-amples. Gains are mainly due to increased recall. 5.5 Scaling to All of Wikipedia Finally, we take our best extractors and run them on all 5025 attributes, again assuming perfect ar-ticle classification and using heuristic matches as gold-standard. Figure 3 shows the distribution of obtained F1 scores. 810 text attributes and 328 nu-meric attributes reach a score of 0.80 or higher.
The performance depends on the number of available training examples, and that number is governed by a long-tailed distribution. For ex-ample, 61% of the attributes in our set have 50 or fewer examples, 36% have 20 or fewer. Inter-estingly, the number of training examples had a smaller effect on performance than expected. Fig-ure 4 shows the correlation between these vari-ables. Lexicon and Gaussian features enables ac-ceptable performance even for sparse attributes.
Averaging across all attributes we obtain F1 scores of 0.56 and 0.60 for textual and numeric values respectively. We note that these scores assume that all attributes are equally important, weighting rare attributes just like common ones. If we weight scores by the number of attribute in-stances, we obtain F1 scores of 0.64 (textual) and 0.78 (numeric). In each case, precision is slightly higher than recall. 5.6 Towards an Attribute Ontology The true promise of relation-specific extractors comes when an ontology ties the system together. By learning a probabilistic model of selectional preferences, one can use joint inference to improve extraction accuracy. One can also answer scien-tific questions, such as  X  X ow many of the learned Wikipedia attributes are distinct? X  It is clear that many duplicates exist due to collaborative sloppi-ness, but semantic similarity is a matter of opinion and an exact answer is impossible. Figure 3: F1 scores among attributes, ranked by score. 810 text attributes (20%) and 328 numeric attributes (31%) had an F1-score of .80 or higher. Figure 4: Average F1 score by number of training examples. While more training data helps, even sparse attributes reach acceptable performance.
Nevertheless, we clustered the textual attributes in several ways. First, we cleaned the attribute names heuristically and performed spell check. The  X  X istance X  between two attributes was calcu-lated with a combination of edit distance and IR metrics with Wordnet synonyms; then hierarchical agglomerative clustering was performed. We man-ually assigned names to the clusters and cleaned them, splitting and joining as needed. The result is too crude to be called an ontology, but we continue its elaboration. There are a total of 3962 attributes grouped in about 1282 clusters (not yet counting attributes with numerical values); the largest clus-ter, location , has 115 similar attributes. Figure 5 shows the confusion matrix between attributes in the biggest clusters; the shade of the i,j th pixel indicates the F1 score achieved by training on in-stances of attribute i and testing on attribute j . Figure 5: Confusion matrix for extractor accuracy training on one attribute then testing on another. Note the extraction similarity between title and full-name, as well as between dates of birth and death. Space constraints allow us to show only 1000 of LUCHS  X  X  5025 extracted attributes, those in the largest clusters. Large-scale extraction A popular approach to IE is supervised learning of relation-specific extrac-tors (Freitag, 1998). Open IE, self-supervised learning of unlexicalized, relation-independent ex-tractors (Banko et al., 2007), is a more scalable approach, but suffers from lower precision and recall, and doesn X  X  canonicalize the relations. A third approach, weak supervision, performs self-supervised learning of relation-specific extractors from noisy training data, heuristically generated by matching database values to text. (Craven and Kumlien, 1999; Hirschman et al., 2002) apply this technique to the biological domain, and (Mintz et al., 2009) apply it to 102 relations from Free-base. LUCHS differs from these approaches in that its  X  X atabase X   X  the set of infobox values  X  itself is noisy, contains many more relations, and has few instances per relation. Whereas the existing approaches focus on syntactic extraction patterns, LUCHS focuses on lexical information enhanced by dynamic lexicon learning.

Extraction from Wikipedia Wikipedia has become an interesting target for extraction. (Suchanek et al., 2008) build a knowledgebase from Wikipedia X  X  semi-structured data. (Wang et al., 2007) propose a semisupervised positive-only learning technique. Although that extracts from text, its reliance on hyperlinks and other semi-structured data limits extraction. (Wu and Weld, 2007; Wu et al., 2008) X  X  systems generate train-ing data similar to LUCHS , but were only on a few infobox classes. In contrast, LUCHS shows that the idea scales to more than 5000 relations, but that additional techniques, such as dynamic lexi-con learning, are necessary to deal with sparsity.
Extraction with lexicons While lexicons have been commonly used for IE (Cohen and Sarawagi, 2004; Agichtein and Ganti, 2004; Bellare and Mc-Callum, 2007), many approaches assume that lex-icons are clean and are supplied by a user before training. Other approaches (Talukdar et al., 2006; Miller et al., 2004; Riloff, 1993) learn lexicons automatically from distributional patterns in text. (Wang et al., 2009) learns lexicons from Web lists for query tagging. LUCHS differs from these ap-proaches in that it is not limited to a small set of well-defined relations. Rather than creating large lexicons of common entities, LUCHS attempts to efficiently instantiate a series of lexicons from a small set of seeds to bias extractors of sparse at-tributes. Crucual to LUCHS  X  X  different setting is also the need to avoid overfitting.

Set expansion A large amount of work has looked at automatically generating sets of related items. Starting with a set of seed terms, (Etzioni et al., 2004) extract lists by learning wrappers for Web pages containing those terms. (Wang and Co-hen, 2007; Wang and Cohen, 2008) extend the idea, computing term relatedness through a ran-dom walk algorithm that takes into account seeds, documents, wrappers and mentions. Other ap-proaches include Bayesian methods (Ghahramani and Heller, 2005) and graph label propagation al-gorithms (Talukdar et al., 2008; Bengio et al., 2006). The goal of set expansion techniques is to generate high precision sets of related items; hence, these techniques are evaluated based on lexicon precision and recall. For LUCHS , which is evaluated based on the quality of an extractor us-ing the lexicons, lexicon precision is not important  X  as long as it does not confuse the extractor. We envision a Web-scale machine reading system which simultaneously learns ontologies and ex-tractors, and we believe that LUCHS  X  X  approach of leveraging noisy semi-structured information (such as lists or formatting templates) is a key to-wards this goal. For future work, we plan to en-hance LUCHS in two major ways.

First, we note that a big weakness is that the system currently only works for Wikipedia pages. For example, LUCHS assumes that each page cor-responds to exactly one schema and that the sub-ject of relations on a page are the same. Also, LUCHS makes predictions on a token basis, thus sometimes failing to recognize larger segments. To remove these limitations we plan to add a deeper linguistic analysis, making better use of parse and dependency information and including coreference resolution. We also plan to employ relation-independent Open extraction techniques, e.g. as suggested in (Wu and Weld, 2008) (retrain-ing).

Second, we note that LUCHS  X  X  performance may benefit substantially from an attribute ontol-ogy. As we showed in Section 5.6, LUCHS  X  X  cur-rent extractors can also greatly facilitate learning a full attribute ontology. We therefore plan to in-terleave extractor learning and ontology inference, hence jointly learning ontology and extractors. Many researchers are trying to use IE to cre-ate large-scale knowledge bases from natural lan-guage text on the Web, but existing relation-specific techniques do not scale to the thousands of relations encoded in Web text  X  while relation-independent techniques suffer from lower preci-sion and recall, and do not canonicalize the rela-tions. This paper shows that  X  with new techniques  X  self-supervised learning of relation-specific ex-tractors from Wikipedia infoboxes does scale.
In particular, we present LUCHS , a self-supervised IE system capable of learning more than an order of magnitude more relation-specific extractors than previous systems. LUCHS uses dynamic lexicon features that enable hyper-lexicalized extractors which cope effectively with sparse training data. We show an overall perfor-mance of 61% F1 score, and present experiments evaluating LUCHS  X  X  individual components.

Datasets generated in this work are available to the community 7 .

