 Ebrahim Bagheri  X  Ali A. Ghorbani Abstract Non-canonical requirement specifications refer to a set of software requirements that is either inconsistent, vague or incomplete. In this paper, we provide a correspondence between requirement specifications and annotated propositional belief bases. Through this analogy, we are able to analyze the contents of a given set of requirement collections known as viewpoints and specify whether they are incomplete, incoherent, or inconsistent under a closed-world reasoning assumption. Based on the requirement collections X  properties intro-duced in this paper, we define a viewpoint integration game through which the inconsistencies of non-canonical requirement specifications are resolved. The game consists of several rounds of negotiation and is performed by two main functions, namely choice and enhancement func-tions. The outcome of this game is a set of inconsistency-free requirement collections that can be integrated to form a unique fair representative of the given requirement collections. Keywords Software requirements  X  Inconsistency resolution  X  Subjective logic  X  Belief merge and revision 1 Introduction Requirement engineering is an important branch of software engineering which is involved with the identification and formalization of the goals, functions and constraints of a software entity [ 62 ]. Researchers believe that requirement engineering is a process com-posed of two branches, namely requirement elicitation, and requirement modeling [ 36 ]. In requirement elicitation, analysts are concerned with the revelation, communication, and val-idation of the facts related to the software entity; whereas, in the modeling phase, they attempt to represent and organize the identified facts in some agreed format usually known as conceptual models. Conceptual models are therefore representational abstractions of the possible model of a software entity [ 2 ]. Conceptual modeling is a challenging aspect of the requirement engineering process.

Various formalisms for creating a suitable foundation for conceptual modeling have been proposed in the literature. Formal specifications such as the Z notation or models based on logical formalisms, category theory, requirement templates, state transition diagrams, con-ceptual graphs, and object oriented models are some of the most widely used representatives. Regardless of the limitations and strengths of each of these formalisms, requirement engineers often struggle to define a set of clear, consistent, coherent and comprehensive requirement models for a software entity due to its complexity and intricacies. In order to reach a satis-fying compilation of software requirement specifications, some requirement analysts have become attracted towards the use of information from multiple sources. Here, the sources of information ranging from legacy system documentation to domain experts are mainly known as viewpoints. Nuseibeh defines viewpoints as  X  X oosely coupled, locally managed distributed objects which encapsulate partial knowledge about a system and its domain, specified in a particular, suitable representation scheme, and partial knowledge of the process of develop-ment X  [ 45 ].

The incorporation of information derived from multiple sources in the viewpoint-based requirement engineering models enriches the requirement elicitation experience and broad-ens the range of possibilities from which the requirement analysts attain more capacity to understand the domain of discourse. According to Sommerville and Sawyer [ 52 ], viewpoints are useful for the following purposes: (1) Since there is no such thing as a typical end-user, viewpoints can be beneficial in organizing various system stakeholders and end-users into appropriate classes; (2) viewpoints can be used as a means for structuring the requirement elicitation process; (3) viewpoints can expose and highlight the conflicts between discrepant requirement specifications. Viewpoints do however pose some challenges:  X  Human beings usually make conception errors due to risk aversion, short-term memory  X  Epistemic uncertainty also known as partial ignorance is an indispensable element of  X  Thereisnoguaranteethatthereceivedinformationfrommultiplesourcesbemutuallycon-
Consequently, some of the important issues that need to be addressed in the viewpoint-based requirement engineering models are:  X  The identification of inconsistent, redundant, vague, and incomplete requirement specifi- X  The resolution of discrepancies and redundancies through the degradation of problem- X  The development of an inconsistency-free, meaningful and covering representative
The above-mentioned issues need to be analyzed in close relation with the underlying formalism through which the requirement specifications of the viewpoints are expressed. A recent survey on industrial requirement engineering methods showed that a great portion (95%) of requirement documents are written in common or semi-structured natural language, and only a very small fraction of requirement analysts employ some sort of formal require-ment specification language [ 40 ]. This fact shows that the formal processing and evaluation of requirement documents is difficult. However, there have been various advancements in deriving formal specifications from natural language requirements [ 25 ]. Similar to the work in [ 41 , 50 ], we will assume in this work that the requirement specifications are either spec-ified in a formal language or some method has been employed for their conversion. This assumption would allow us to pay a more focused attention to the analysis and management of inconsistent requirement specifications.

During the recent years, two schools of thought have emerged to deal with inconsisten-cies in software requirements. The first views inconsistency as undesirable and enforces its resolution immediately after its detection [ 57 ]. On the contrary, several researchers believe that tolerating inconsistencies may cater benefits in the long run, by for instance pointing latter approach, specific reasoning models have been developed that are able to function over inconsistent requirement statements. In both approaches, there have been proposals for the manipulation and management of such non-canonical requirement specifications through their prioritization. In these work, each statement of the requirement specifications is anno-tated with a value depicting its significance, substance or validity.

Along these lines, both Sabetzadeh and Easterbrook [ 50 ] and Mu et al. [ 41 ] have proposed the employment of Annotated Predicate Calculus (APC) [ 3 ], a special form of paraconsis-tent logics, to represent requirement statements priority information. In APC, the syntax and semantics of the logic correspond with that of classical logic except that the formulae are annotated with values extracted from a belief semi-lattice. The four-valued belief semi-and false ( f ). Within this framework, the least upper bound operator is employed to reason about the validity of the requirement specifications. In a similar vein, Ghose and Lin pro-pose the employment of ranked structures to represent the preference relationships between the requirement specifications [ 26 ]. In their model, inconsistent viewpoints can be handled through the incremental elicitation of ranked requirement specifications.

In this paper, we formally show that the notion of viewpoints in requirement engineering can be represented by subjective propositional belief bases. In our model, the formulae in propositional belief bases are annotated with subjective opinions derived from the framework of Subjective logic [ 29 ]. Such belief bases are called Subjective belief bases and generalize prioritized belief bases that employ annotated predicate calculus or possibilistic informa-tion for their annotation purposes [ 46 ]. Based on the given definition of viewpoints, we then formally define several properties of requirement specifications such as inconsistency, completeness, coherence, and others. These properties are employed in a viewpoint merging game, which symbolizes the integration process of the requirement specifications provided through the viewpoints. The developed game produces a set of consistent and representative requirement specifications for the given specifications of the viewpoints. More specifically this paper provides the following contributions: 1. It defines a formal representation for requirement viewpoints within the context of subjec-2. It provides formal definitions for analyzing the properties of requirement specifications 3. Finally, the manipulation of non-canonical requirement specifications, a set of require-
This paper reads as follows: in the next section, some preliminaries are provided and a formal representation of viewpoints is given. Section 3 describes the overall view of the proposed model. Section 4 introduces several properties of software requirement specifica-tions. The formal definition of the viewpoint integration game and the introduction to several and the paper is then concluded with some final remarks in Sect. 8 . 2 Preliminaries 2.1 Subjective belief bases Throughout this paper, we let L be a propositional language over a finite alphabet P of prop-ositional symbols, while represents the set of possible interpretations. An interpretation is a function from P to { ,  X } , where , and  X  denote truth and falsehood, respectively. An interpretation  X  is a model of formula  X  , noted as  X  |  X  , which makes the formula true. Furthermore, let  X  beaformula, mod ( X ) is employed to denote the set of models of  X  , i.e., mod ( X ) ={  X   X  |  X  |  X  } . Classical propositional logic deduction is represented using . Two formula such as  X  and  X  are equivalent, expressed  X   X   X  , if and only if  X   X  and  X   X  . A formula  X  satisfying mod ( X ) = X  is considered to be consistent. A clause C is a disjunction of literals.

From within the theoretical frameworks which handle uncertainty, Dempster X  X hafer (DS) theory is basically an extension to probability theory where probabilities are assigned to sets as opposed to singleton elements [ 60 ]. The employment of the DS theory requires the defini-represented by  X  . The powerset of  X  , denoted 2  X  , incorporates all possible unions of the sets in  X  that can receive belief mass. The truthful subsets of the powerset can receive a degree of belief mass; therefore, the belief mass assigned to an atomic set such as  X   X  2  X  is taken as truthfulness of  X  , which not only relies on the belief mass assigned to  X  , but also to belief masses assigned to subsets of  X  .
 Definition 2.1 A belief mass assignment is a mapping m : 2  X   X  X  0 , 1 ] that assigns m  X  ( X ) to each subset  X   X  2  X  such that: (1) m  X  ( X )  X  0, (2) m  X  (  X  ) = 0, ( X ) is then called the belief mass of  X  . A belief mass assignment is called dogmatic if ( X  ) = 0, since all the possible belief masses have been spent on the subsets of  X  .
The belief in  X  is interpreted as the absolute faith in the truthfulness of  X  , which not only relies on the belief mass assigned to  X  , but also to belief masses assigned to subsets of  X  . Definition 2.2 A belief function corresponding with m  X  , a belief mass assignment on  X  ,is a function b : 2  X   X  X  0 , 1 ] defined as: Analogously, disbelief is the total belief that a set is not true.
 Definition 2.3 A disbelief function corresponding with m  X  , a belief mass assignment on  X  , is a function d : 2  X   X  X  0 , 1 ] defined as:
To address the degree of uncertainty which is inherent in the above definitions, J X sang provides a complementary definition, uncertainty, which computes the degree of possible confusion in the belief assignment [ 29 ].
 Definition 2.4 An uncertainty function corresponding with m  X  , a belief mass assignment on  X  , is a function u : 2  X   X  X  0 , 1 ] defined as:
With the above definitions, Subjective logic [ 29 ] extends Dempster X  X hafer theory of evi-also known as the opinion of expert A about hypothesis x (  X  A x ). It can be shown with this satisfy: Subjective logic defines a large number of operators that allow the manipulation of subjective opinions. In this paper, we employ three of these operators, namely negation, discounting and consensus. Definition 2.5 For a subjective opinion  X  x = ( b x , d x , u x ) , negation is computed as: The negation operator calculates the opinion that a given proposition does not hold. The discounted opinion is calculated as:
Discounting is an operator that given an opinion of a specific agent with regards to a phenomenon, and the opinion of a second agent about the first, it is able to estimate the opinion of the second agent about the given phenomenon.
 common fact x stated by two different information sources A and B ,andlet  X  = u A x + u B x  X  u u B x . When u B x  X  0, and u A x  X  0, the relative dogmatism between the two opinions are opinions, Consensus operator  X  outcome, such that The intention of the consensus operator is to meaningfully summarize and simplify a corpus of data elements coming from various sources in order to develop a common tradeoff between the beliefs of the participating sources. The Consensus operator has been shown to have a stable behavior under various conditions and even while merging conflicting dogmatic beliefs [ 30 ]. It satisfies two important algebraic properties, i.e., commutativity ( A  X  B = B  X  A ), and associativity ( A  X  X  B  X  C ]=[ A  X  B ] X  C ), which are of great significance while merging two peer information sources.

ASubjectiveBeliefBase(SBB)isasetofpropositionalformulaeannotatedwithsubjective ( {  X  i | ( X   X  sources to be identical. The conjunction of the subjective belief bases of is represented as = B 1  X  X  X  X  X  B n . Subjective belief profile inclusion is denoted as , and union is represented by . The cardinality of a finite subjective belief profile is noted as # ( ) .
One of the major difficulties with subjective belief bases is that they require the experts to provide three annotation values for each formula (i.e. belief, disbelief, uncertainty), which is a cumbersome task. Experts are usually more comfortable to work with linguistic variables or singular values in the range of [ 0 , 1 ] . It has been previously shown that fuzzy linguistic variables representing subjective opinions can be developed for the ease of use of the experts annotate their requirement statements and it is possible to convert such prioritized (possibi-listic) belief bases into subjective belief bases. The necessity measure in possibility theory can be used to easily annotate belief bases with a value from the range of [0,1]. The resulting annotated belief base can then be converted into a subjective belief base for the required analysis.
 Proposition 2.1 [ 38 ] For any given possibility distribution such as  X  , a basic belief mass assignment function within the context of DS theory can be always derived such that the corresponding belief function is consonant.

This proposition shows that the necessity and plausibility measures in possibility theory are associated with the belief and plausibility functions in DS theory; therefore, a corre-sponding consonant belief function can always be derived to represent any given possibility distribution.
 logic. A corresponding subjective belief base (image of A ), denoted A s , can be derived to represent A .

Proposition 2.2 is an important result of Definitions 2.2  X  2.4 and Proposition 2.1 ,and shows that any possibilistically prioritized belief base can be converted into a subjective belief base. The consequence of this proposition is that subjective belief bases are a gener-alization of prioritized belief bases and any of the properties defined for a subjective belief base is applicable to a prioritized belief base through its image in subjective form. 2.2 Formal depiction of viewpoints Let  X   X  L be a propositional formula in L ,and  X  L be a set of formulae in L . Here, we call a requirement specification collection, and  X   X  a requirement statement expressed in the requirement collection. Further, let be the domain of prioritization. Each require-ment statement is annotated with a corresponding priority information. Prioritization over is in essence a means to develop a preference function from  X  such that the value, urgency and unambiguity of a requirement statement is balanced against its costs and risk of attainment [ 41 , 42 ]. Each  X   X  is annotated with a corresponding  X   X  . A prioritized requirement collection is a pair ( , ) . Please note that the process of requirement prioritiza-[ 35 , 49 ].
 For a viewpoint-based requirement engineering setting, let V be the set of the viewpoints. Each viewpoint v  X  V expresses a requirement specification collection v which is priori-tized by v ; therefore, the set of all requirement specifications derived from the viewpoints can be represented by an n -tuple ( 1 , 1 ),...,( n , n ) where n  X  2. Now, suppose the domain of is the interior of an equilateral triangle whose altitudes are the three dimen-sions of subjective logic. The priority information of the requirement statements can hence be expressed in the form of subjective opinions that preserve b  X  + d  X  + u  X  = 1. It is now quite clear that a prioritized requirement collection is a subjective belief base where B i = ( , ) ={ ( X  i , X   X  i ) : i = 1 ,..., m } ,andthe n -tuple representing the viewpoints is in fact a subjective belief profile whose subjective belief bases are the prioritized requirement collections, i.e., = ( 1 , 1 ),...,( n , n ) = ( B 1 ,..., B n ) .
 Example 2.1 Consider the following requirement collections expressed by three viewpoints about the groups of people who are eligible to borrow a book from the university library:  X  Collection 1 . The library allows part-time students to borrow books, but does not provide  X  Collection 2 . The policies have recently changed. I would guess that students with many  X  Collection 3 . All students with many late book returns are eligible to borrow books from Each of the collections can be converted into the following formula: 1. Collection 1. { BadHistory(Person) , 2. Collection 2: {  X  BadHistory(Person)  X  StudentUnionMember(Person) , 3. Collection 3: { BadHistory(Person) }.
 We can now assign subjective information to each formula based on the certainty of the expressions. For instance, the first expression of Collection 1 is quite strong; therefore, we can assign a complete opinion to it: ( 1 , 0 , 0 ) , but for the second statement, the viewpoint conveys uncertainty by saying  X  X  assume X , so we can assign a less certain and weaker opin- X  4 = ( 0 . 8 , 0 . 2 , 0 ) be four subjective opinions, we can annotate the rest of the require-ment collections similarly as follows. For simplicity, we use Greek symbols to represent the requirement statements in each of the collections:  X  Collection 1: { ( X ,  X  1 ), (  X   X   X   X ,  X  2 ) } .  X  Collection 2: { (  X   X   X   X ,  X  3 ), ( X ,  X  4 ) } .  X  Collection 3: { ( X ,  X  2 ) } .

In propositional logic, two requirement statements are considered inconsistent if  X   X   X   X   X  . We extend this notion of inconsistency for requirement statements to encompass semantic inconsistencies as well.
 Definition 2.8 Let  X  and  X  be two requirement statements and suppose I ( X ) and I ( X ) are the interpretations of  X  and  X  with regards to the underlying concepts of the domain of discourse, then  X  and  X  are considered to be inconsistent iff: i)  X   X   X   X  X  X  or ii) I ( X )  X  I ( X )  X  X  X  .
The identification of inconsistency with this definition requires higher level semantic tools or human intervention. The existence of such tools or expert assistance is not an unrealistic assumption, since the requirement specification process involves significant amount of expert involvement. In the worst case, this definition simply reduces to the classical definition of inconsistency. 3 Model overview In order to analyze and manipulate non-canonical requirement specifications, we provide a model shown in Fig. 1 . The model gathers several requirement specification collections related to a specific domain of discourse from the participating viewpoints. The gathered collections are in the form of subjective belief bases. The properties of therequirement specification collections are analyzed based on several essential and contingent properties of the collections. For instance, the requirement collections are evaluated for their completeness, comprehensiveness and other features. The result of the analysis of the requirement specifica-tion collections allows the proposed model to create a content and presentation wise suitable ordering between the information conveyed by the viewpoints. This ordering mechanism pro-vides the basis to choose the weaker requirement specification collections when inconsisten-cies are encountered. Such collections need to make concessions in several rounds of negotia-tion in order for the collections to become mutually consistent. Once consistency is achieved, the integration of the individual collections for forming a unique fair representative of the beliefs of the viewpoints through the employment of the consensus operator is a trivial step.
It is important to note that we define the properties of the given requirement specifica-tion collections only using the information conveyed by the viewpoints, i.e., no additional information other than the requirement expressions are gathered from the viewpoints. On the contrary, several researchers including the authors of [ 41 ] have assumed that the viewpoints are also responsible for expressing the scenarios in whose context their expressed require-ments are meaningful. In our opinion, such set of extra information derived from the scenarios provide more reasoning power to check for consistency, and completeness. However, such an approach may pose several difficulties: (1) the participating viewpoints are required to provide more detailed information about the operational specifics of the scenarios that may not be completely available to all the viewpoints, (2) the additional information about the sys-tem operational scenarios need to be also converted into the form of propositional formulae in order to be comparable with the requirement specifications, which is not always feasible due to the complexity of some scenarios. Therefore, we employ a closed-world reasoning approach for analyzing the requirement specifications where we assume that the collective information conveyed by the requirement specification collections given by the viewpoints are complete enough and the information not described by the viewpoints are considered to be invalid or at least not required. 4 Properties of software requirements In this section, we provide several basic properties of requirement statements, collections and viewpoints. These properties are employed for reasoning about the consistency, coherency, and completeness of the requirement specifications. Furthermore, they are employed in the process of the viewpoint integration game. These properties fall into two categories, namely essential and contingent properties. Essential properties reflect the attributes of a single requirement collection from an individualistic viewpoint, whereas contingent properties of a viewpoint X  X  requirement collection reveal its collective characteristics with regards to the rest of the peer requirement collections provided by the rest of the viewpoints. 4.1 Essential Properties The essential properties of a requirement collection is closely related with the subjective annotation values of its constituting requirement statements. These properties represent the strength and validity for the stated requirement statements, and the fortitude of the opinion of the viewpoint that is providing that requirement collection. We now define several of such essential properties.
 Definition 4.1 Let B be a requirement collection, and ( X ,  X )  X  B be a requirement statement in B where  X  = ( b  X  , d  X  , u  X  ) . The degree of ambiguity of ( X ,  X ) , denoted AMB ( X ,  X ) ,is defined as: A normalization factor, ,fits AMB ( X ,  X ) to [ 0 , 1 ] .

Ambiguity provides the basis to calculate the degree of confusion of the viewpoint with regards to the exact fraction of belief that should be assigned to a given requirement state-ment. An ambiguous requirement statement shows that the viewpoint is still unsure about the accuracy and correctness of the statement. For instance, a requirement statement such as I have no idea whether part-time students can borrow books is completely ambigu-ous. This statement can be transformed into ( PartTimeStudent(Person) ,  X  )where  X  = ( 0 , 0 , 1 ) ; therefore, AMB ( PartTimeStudent(Person) , X ) = 1. Furthermore, in Collection 1 of Example 2.1 , (  X   X   X   X ,  X  2 ) is not ambiguous at all, since the view-point has been able to express total belief and certainty in the information conveyed by:  X  StudentUnionMember(Person)  X  PartTimeStudent(Person) , while BadHistory(Person) is slightly ambiguous because 0 . 2 of the belief mass has been assigned to u  X  1 .
 Definition 4.2 Let B be a requirement collection, and ( X ,  X )  X  B be a requirement statement is defined as: A normalization factor, ,fits IND ( X ,  X ) to [ 0 , 1 ] .

Indecisiveness is a measure of the ability of the viewpoint to firmly assert a given require-ment statement. The further away the degrees of belief and disbelief for a given statement are, the stronger and more decisive the requirement statement is. A completely decisive requirement statement is one that either possesses b  X  = 1or d  X  = 1, which means that the viewpoint either completely agrees with this requirement statement or fully disagrees with it. As an example, a requirement statement such as either part-time students can or cannot borrow books from the library is completely indecisive. The difference between indecisive-ness and ambiguity is quite subtle in that ambiguity measures the ignorance of the viewpoint towards the possibilities of the stated requirement, while indecisiveness evaluates the inabil-2ofExample 2.1 ,  X  BadHistory(Person)  X  StudentUnionMember(Person) ,is less decisive than PartTimeStudent(Person) according to their subjective annotation values.
 Proposition 4.1 Let B be a requirement collection, ( X ,  X )  X  B be a requirement statement in B where  X  = ( b  X  , d  X  , u  X  ) , and AMB ( X ,  X ) and IND ( X ,  X ) be the degrees of ambiguity and indecisiveness of ( X ,  X ) , respectively. The following two relations always hold between these two properties:  X  X f IND ( X ,  X )  X  1 then AMB ( X ,  X )  X  1  X  X f AMB ( X ,  X )  X  0 then IND ( X ,  X )  X  0
This proposition asserts that a highly indecisive requirement statement is also highly ambiguous, whereas a requirement statement with a low degree of ambiguity is always highly decisive. The most desirable state for a requirement statement of any given require-ment collection is unambiguity and decisiveness, which is achieved when all the possible belief mass is either assigned to b  X  or d  X  . To identify requirement statements that satisfy these two conditions, we define the Dogmatism property.
 Definition 4.3 Let ( X ,  X ) be a requirement statement in a requirement collection B where  X  = ( b  X  , d  X  , u  X  ) . The degree of dogmatism of ( X ,  X ) , denoted DOG ( X ,  X ) ,isdefinedas: A highly dogmatic requirement statement satisfies both unambiguity and decisiveness. A requirement statement is believed to be dogmatic if it is both decisive and unambigu-ous, but not necessarily correct. This is because a viewpoint may be confident in providing a requirement statement with which the other viewpoints do not agree and can hence be viewed as an incorrect requirement statement from a collective perspective. An interest-ing result of the degree of dogmatism of a requirement statement is that those statements that are completely dogmatic can be viewed as clear requirement statements . Clear require-ment statements can be easily analyzed in the framework of classical logic without the need to analyze their annotation values. For instance,  X  StudentUnionMember(Person)  X  PartTimeStudent(Person) in Collection 1 of Example 2.1 is the only completely dogmatic requirement statement. In contrast vague requirement statements arethosestate-ments that possess a low degree of dogmatism. For example,  X  BadHistory(Person)  X  StudentUnionMember(Person) in the second requirement collection is a vague requirement statement according to its annotation value. 4.2 Subjective prime implicants The three properties introduced so far only study the features of single requirement state-ments. In order to be able to define other properties of a requirement collection, we need to develop compilations of each collection that collectively represent the knowledge conveyed by that collection. For this purpose, since the underlying formalism of the requirement col-lections in the present work is based on propositional knowledge bases, exact compilation methods such as calculating prime implicants can be used to find a representation of all the theorems of the initial propositional knowledge base [ 14 ]. Let us provide some basics before proceeding.
 Definition 4.4 Let B be a subjective belief base, and  X   X  X  0 , 1 ] .The  X  -cut of B is B  X   X  = {  X   X  B  X  | ( X ,  X )  X  Band DOG ( X ,  X )  X   X  }
Two subjective belief bases are equivalent, shown as B  X  s B , if and only if  X   X   X  ( 0 , 1 ] B  X   X   X  B  X   X  .
 Definition 4.5 [ 17 ]Let B be a subjective belief base. The degree of inconsistency of B , denoted INC ( B ) , can be defined as: Definition 4.6 Extends [ 17 ]: Let B be a subjective belief base. A formula  X  is said to be a consequence of B to the degree of a , denoted B  X  ( X ,  X ) ,where DOG ( X ,  X ) = a ,ifand only if 1) B  X  a is consistent, 2) B  X  a  X  3)  X  a &gt; a , B  X  a  X .
 We can now define the prime implicants of a knowledge base.
 Definition 4.7 [ 14 ] A prime implicant of a belief base B is an implicant D of B such that  X  D of B , D  X  D ,and D D .

A prime implicant is an implicant that cannot be covered by any other more general implicant. A prime implicant needs also be minimal, that is the removal of any literal from a prime implicant results in a non-implicant. For a subjective belief base such as B = D ={ ( X  1 , X  1 ),...,( X  n , X  n ) } , such that  X  i are literals and D  X  B .Let D and D be two subjective implicants of B ,then D is believed to be subsumed by D iff D = D , D  X   X  D  X  these definition, subjective prime implicants need to be developed that represent the prime implicants of a subjective belief base. We can define subjective prime implicants based on the concept of weighted prime implicants introduced in [ 39 ].
 Definition 4.8 Let B ={ ( X  1 , X  1 ),...,( X  n , X  n ) } be a subjective belief base, where  X  i are clauses. A subjective prime implicant (SPI) of B is D such that:  X  D is a subjective implicant of B  X  D of B such that D is subsumed by D This definition shows that an SPI must not be subsumed by any other subjective implicant and should therefore be the least specific subset.
 Proposition 4.2 Let B be a subjective belief base. If D 1 ,..., D n are all the SPIs of B, then the following must always hold: Proposition 4.2 is important, because it shows that the subjective prime implicants of a subjective belief base can be employed to compile the original subjective belief base itself.
From now on, we assume that each of the acquired SPIs of a given subjective belief base is opinion  X  is a result of the application fo the negation operator on  X  . Example 4.1 (continues Example 2.1 ) The SPIs for the requirement collections of Exam-ple 2.1 are as follows: The third requirement collection is itself its only subjective prime implicant. Let  X  5 = ( 0 SPIs of each requirement collection resulting from the application of the negation operator are It is now possible to extend the given essential properties through the concept of SPIs. Definition 4.9 Let B be a requirement collection of a given viewpoint and suppose C is a SPI of B , then the informational value of C , denoted INFO ( C ) ,isdefinedas: The informational value of B is defined based on the informational value of its SPIs (denoted C ):
Informational value shows the amount of knowledge that can be derived from the require-ment collection of a given viewpoint. In cases where the requirement statements in the requirement collection are all clear requirements statements (completely dogmatic), the infor-mational value of the requirement collection is equivalent to the number of requirement statements in that given collection; therefore, in a clear requirement collection more require-ment statements result in a higher informational value. It should be noted that still a high informational value does not convey that the provided information are correct. It only shows that this requirement collection sheds light on more aspects of the problem domain. In the requirement collections of Example 2.1 the following relationship holds: INFO ( Collection 2 )&gt; INFO ( Collection 1 )&gt; INFO ( Collection 3 ) ; hence, although Collection 1 and Collection 2 provide the same amount of information about the problem domain, since the requirement statements in Collection 2 are more dogmatic, it is believed that Collection 2 has the highest informational value among all.

In many cases, the information derived from a requirement collection is not always rein-forcing and self consistent, i.e., a viewpoint may provide discrepant, inconsistent or even conflicting information about the problem domain within its own information. In such cases, a mere consideration of the informational value property is not sufficient, since for exam-ple, a viewpoint may have expressed many requirement specifications with a high degree of dogmatism, but all of the given information are contradictory. To develop a complementary property to accommodate this aspect of the requirement collections, we inspect the internal quantity of conflict of each requirement collection.
 Definition 4.10 Let B be a requirement collection of a given viewpoint, and C and D be two of its subjective prime implicants. The quantity of conflict between these two subjective prime implicants of the requirement collection is defined as: Suppose C is the set of all subjective prime implicants of a requirement collection B .The internal quantity of conflict of B , denoted ICON ( B ) ,isdefinedas:
Definitions 4.9 and 4.10 allow us to define the degree of incoherence of a requirement collection. The degree of incoherence depicts the extent of inconsistency available within the information conveyed by a single requirement collection. This property measures the degree of available inconsistency in a requirement collection in comparison with the total amount of information conveyed by that collection; therefore, those requirement collections that pro-vide many useful information but also consist of some inconsistencies are more desirable than those that provide less information with more inconsistencies.
 Definition 4.11 Let B be a requirement collection of a given viewpoint. The degree of inco-herence of B , denoted INCH ( B ) ,isdefinedas:
Based on the the degree of incoherence, an interesting conclusion about the potential value of a requirement collection can be drawn. We can infer that a requirement collection B is informative ,if INCH ( B )&lt; 0 . 5, i.e., ICON ( B )&lt; INFO ( B ) . This conclusion can be reached since a requirement collection with a degree of incoherence of higher than 0 . 5ismost likely to contain more conflicting/discrepant requirement statements as opposed to consistent requirement statements. The degree of incoherence of the collections in Example 2.1 are all zero, since none of them contain inconsistencies; therefore, all three requirement collections are considered to be informative . 4.3 Contingent properties The contingent properties of a requirement collection are defined based on the context and perception of all of the viewpoints where the given requirement collection is positioned; therefore, those requirement collections that address and describe the same aspects of the problem domain can have mutual effects on each others X  contingent properties. For instance, based on Condorcet X  X  Jury theorem [ 37 ], it can be assumed that those requirement collec-tions that have a significantly different opinion about a certain issue with that of the others can be considered as opinion outliers . Hence, it can be trivially assumed that these require-ment collections are depicting a rather incorrect picture of the problem domain. Contingent properties try to capture such kind of requirement collection properties that cannot be under-stood within an individualistic evaluation of the requirement collection. The major difference between essential and contingent properties is that essential properties are still meaningful if we isolate a single requirement collection from the rest of the viewpoints, while contin-gent properties are only purposeful when the requirement collection is viewed in the context of the other viewpoints. In this section, we introduce several contingent properties of the requirement specification collections. Definition 4.12 Let B 1 and B 2 be two requirement collections. Suppose C and D are the sets of SPIs of B 1 and B 2 , respectively. The quantity of conflict between the two requirement collections B 1 and B 2 , denoted Q CON ( B 1 , B 2 ) ,isdefinedas:
The quantity of conflict between two requirement collections shows the amount of belief mass that has been allocated to dissimilar requirement statements by two different view-points. Returning to subjective prime implicants of Example 2.1 showninExample 4.1 , we would see that the first two collections disagree on the correct description of StudentUnionMember(Person) . Collection 1 believes that the members of the stu-dent union cannot borrow books from the library, while collection 2 has a different opinion. between the two requirement collections on this issue is equal to 0 . 8  X  1 + 0  X  0 . 2 = 0 . 8. As it can be seen in the definition of the quantity of conflict between the two requirement collections, quantity of conflict is a minimal extension of the quantity of conflict between the subjective prime implicants of two requirement collections.
 Proposition 4.3 Let Dalal (w i ,w j ) be the Hamming distance between two models w i and w j of a classical formula, and Dalal ( B 1 , B 1 ) be the distance between two clear requirement collections defined as the minimum distance between all two models of B 1 and B 2 ,then
This proposition shows that the quantity of conflict between two clear requirement col-lections is equivalent to Dalal X  X  distance measure widely used in propositional knowledge bases. It is important to notice that the conflict property introduced here reduces to this well-known metric when the requirement statements are all completely dogmatic (i.e., they are clear requirement statements).

Qi et al. [ 47 ] also suggest that it is important to consider the similarities between two requirement collections, in order to see how the requirement collections align against each other. Similarly, we define two similarity measures, namely strong agreement and weak agreement .
 Definition 4.13 Let B 1 and B 2 be two requirement collections, Suppose C and D are two SPIs of B 1 and B 2 , respectively, then the quantity of strong agreement between C and D , denoted Q SA ( C , D ) ,isdefinedas: Further suppose C and D are the set of SPIs of B 1 and B 2 , respectively, then the quantity of strong agreement between B 1 and B 2 is defined as:
Strong agreement focuses on the observable explicit similarities between two requirement collections, i.e., only those requirement statements that have been explicitly presented in both requirement collections are considered while measuring the quantity of strong agreement. Strong agreement shows the extent of which two viewpoints are completely aligned with each other. As an example, since both of the first and third requirement collections of Example 2.1 address BadHistory(Person) , we can compute the quantity of strong agreement of the therefore, due to the uncertainty in the statement of the first collection, there is only a 0 . 5 quantity of strong agreement between the two requirement collections. The quantity of strong agreement between two requirement collections is a maximal extension of the strong agree-ment between the statements of the subjective prime implicants of the collections. Definition 4.14 Let B 1 and B 2 be two requirement collections, suppose C and D are two SPIs of B 1 and B 2 , respectively then the quantity of weak agreement between C and D , denoted Q WA ( C , D ) ,isdefinedas: Now suppose C and D are the set of SPIs of B 1 and B 2 , respectively, the quantity of weak agreement between B 1 and B 2 is defined as:
The quantity of weak agreement measures the quantity of undisputed belief assigned to those requirement statements in each requirement collection that has not been refuted in the other requirement collection; therefore, if one of the requirement collections asserts a given requirement statement and the other requirement collection does not address that specific requirement, this is assumed to be a weak agreement between the two require-ment collections. Generally speaking, weak agreement addresses cases between two require-ment collections that one of the viewpoints is ignorant towards the statements expressed by the others, but since we suppose that all the viewpoints are reliable in their own area of expertise, it can be assumed that each can trust the other in situations where they are uninformed. In Example 2.1 , the quantity of weak agreement between collections 1 and 3 is equal to Q WA ( C 1 , C 3 ) = Maximum ( DOG ( X  1 ), DOG ( X  2 )) , since both requirement col-lections explicitly provide information about BadHistory(Person) , but collection 3 is silent about the other requirement statements of collection 1.
 Proposition 4.4 Let B be a requirement collection, Q WA and INFO be the quantity of weak agreement and informational value measures, respectively, then:
Proposition 4.4 shows that the informational value of a requirement collection is a spe-cial case of the weak agreement property. The interpretation of this is that the quality of the information in each individual requirement collection cannot be determined prior to its comparison with the content of the other requirement collections; therefore, no conclusions about its correctness or usefulness can be directly made. Therefore, an isolated analysis of a requirement collection is similar to comparing it with another empty requirement collection. More formally, this is equivalent to a weak agreement with the empty set where the empty set represents the viewpoint X  X  ignorance towards the other requirement collections X  contents.
It is now possible to define a distance measure to calculate the similarity and close align-ment of the requirement collections that are describing the same domain of discourse. Definition 4.15 Let B 1 and B 2 be two requirement collections, and Q SA , Q WA ,and Q CON be the quantities of strong agreement, weak agreement and conflict, respectively. The degree of conflict of two requirement collections, denoted D CON , is defined as follows: where  X   X  X  0 , 1 ] is employed to weaken the effect of the quantity of weak agreement.
The degree of conflict creates a composite distance measure based on the previously defined properties between two requirement collections. Higher degrees of conflict between two requirement collections represent greater misalignment between the statements of these collections. A degree of conflict equal to zero shows that the two requirement collections are either (1) identical (content-wise equivalent) or (2) contain no overlapping requirement statements (content-wise disjoint).
 Example 4.2 (Continues Example 2.1 ) The quantity of conflict, weak agreement, and strong agreement between requirement collections 1 and 2 can be easily calculated and are Q we allow  X  = 0 . 5, i.e., value the strong agreements twice as the weak agreements, the degree of conflict between the two requirement collections can be computed, which is D CON ( C 1 , C 2 ) = 0 . 11.

In this example, strong agreements and quantity of conflict are weighed twice as impor-tant as the weak agreements, since they are more capable of depicting the similarities or differences that exist between two requirement collections.
 Proposition 4.5 Let B be a requirement collection, and D CON and INCH be the degree of conflict and degree of incoherence, respectively. INCH is a special case of D CON , only calculated for an individual requirement collection.

The degree of conflict reduces to the degree of incoherence, when only a single require-ment collection is being analyzed, since for individual requirement collections we have: and the value of INFO ( B ) is derived from Proposition 4.4 . An important result of this proposition and its antecedents is that the essential and contingent properties defined for requirement collections are from the same family.

Let us now focus on the relative amount of information that the requirement collections offer.
 Definition 4.16 Let B 1 be a requirement collection, and SP ={ B 1 ,..., B n } beasetof viewpoints. Suppose  X  SP is the number of unique formula in SP ,and C is a SPI of B 1 .The degree of completeness of C , denoted COM ( C ) is defined as: where  X ( X ) is the number of formulae in SP that can be derived from  X  . Further suppose C is the set of all SPIs for B 1 , the degree of completeness of B 1 ,isdefinedas:
The degree of completeness shows the portion of the overall available information that a requirement collection has revealed. If a requirement collection expresses all of the possible information about the domain of discourse (which is equivalent to the aggregation of all requirement statements provided by the viewpoints), each stated with the highest possible dogmatism, the requirement collection would be considered as complete ; therefore, a com-plete requirement collection would be one that encompasses all the expressed requirement the requirement collections of Exaxmple 2.1 , none of the requirement collections are totally complete. But for instance, a requirement collection such as:
C 4 ={ ( BadHistory(Person) , X  2 ), ( StudentUnionMember(Person) , X  2 ), is considered to be complete in the context of Example 2.1 . Again, it should be noted that completeness does not entail correctness.
 Proposition 4.6 Let B be a requirement collection. Suppose B is a complete requirement collection, still B is not always necessarily coherent , i.e., INCH ( B ) does not necessarily approach 0 .

This proposition asserts that completeness does not automatically entail coherency. Let us extend C 4 as follows:
C + 4 ={ ( BadHistory(Person) , X  2 ), ( StudentUnionMember(Person) , X  2 ),
As it can be seen, although all of the possible requirement statements can be derived with the highest degree of dogmatism from this requirement collection, it is not coherent, i.e., there are conflicts of expression within the statements of this requirement collection. Based on this observation, we need to extend the definition of completeness such that it incorporates coherency, as well.
 Definition 4.17 (Extends Definition 4.16 )Let B 1 be a requirement collection, and SP = {
B 1 , ..., B n } be a set of viewpoints. Suppose  X  SP is the number of unique formula in SP , and C is a SPI of B 1 . The degree of comprehensiveness of C , denoted COM  X  INC ( B 1 ) ( C ) is defined as: where  X ( X ) is the number of clauses in SP that can be derived from  X  . Further, suppose C is the set of all SPIs for B 1 , The degree of comprehensiveness of B 1 ,isdefinedas:
Simply stated, the degree of comprehensiveness is a special case of the degree of com-pleteness, which is calculated only on the coherent subset of a given requirement collection. The coherent subset of the requirement collection consists of those requirement statements whose degree of dogmatism is higher than the degree of inconsistency of the requirement collection. With this definition, it can now be claimed that a highly comprehensive require-ment collection is both highly coherent and complete. It is interesting to see that requirement collection C + 4 possesses a degree of completeness of COM ( C + 4 ) = 1,buthasadegreeof comprehensiveness of COM  X  INC ( C + ness is much better suited for measuring the relative amount of information that a given requirement collection offers. 5 Integrating inconsistent viewpoints In this section, we will provide a formalization for the process of integrating several not necessarily consistent requirement collections, which have been provided by several view-points, through the definition of an extended belief game. The viewpoint integration game is an extension of the belief game (BGM) and the belief negotiation (BNM) models specifi-cally devised for propositional knowledge base merging introduced in [ 13 , 32 ]. The viewpoint integration game attempts to incrementally resolve any existent inconsistencies and hence develop a unique inconsistency-free representative of all the requirement collections given by the viewpoints. Formally stated, the game consists of two important functions, namely choice and enhancement functions, and several rounds of negotiation between the viewpoints. In each round of negotiation, the weakest viewpoint, which is selected by the choice function, is required to make some concessions according to the recommendations of the enhancement function. The rounds of negotiation are repeated until the requirement collections of the view-points do not contain any further inconsistencies. At this stage, the requirement collections can then be integrated using a belief aggregation strategy and the subjective consensus oper-ator in order to form a unique representative requirement specification collection. The choice and enhancement functions of the viewpoint integration game operate over the essential and contingent properties of the requirement collections introduced earlier in this paper. 5.1 Viewpoint integration game Here, we initially provide a formal definition of the viewpoint integration game by first introducing the structure of its constituent functions.
 Definition 5.1 A choice function under the integrity constraint  X  is a function g  X  that oper-ates over a set of requirement collections SP ={ B 1 ,..., B n } such that: (ec1) g  X  ( SP ) SP , (ec2) If SP  X   X   X  ,  X  B i , B j such that B  X  i  X  B  X  j  X   X   X  ,then ( B i or B j )  X  g  X  ( SP ), (ec3) If SP  X  s SP then g  X  ( SP )  X  s g  X  ( SP ) .

The choice function is responsible for observing the properties of the available require-ment specification collections, and selecting the weakest requirement collection. Here, the exact meaning of weakness depends on the actual definition of the choice function. We will show later that a weak requirement collection is the collection with the worst performance in its essential and contingent properties. In Definition 5.1 , condition ec 1 is a direct gener-alization from c 1 in BGM and ensures that the selected requirement collections are a subset of the provided requirement collections by the viewpoints. The second condition states that the choice function does not select those requirement collections that are not inconsistent with any other requirement collections. Therefore, the choice function minimally includes any of the two requirement collections whose conjunction produces an inconsistency. ec 2is required to ensure that the proposed viewpoint integration game properly terminates under constraints are those rules that have been either enforced at the requirement specification language layer, or by the requirement analysts themselves.
 Definition 5.2 An enhancement function is a function that operates over a given require-ment collection B and a set of requirement collections SP ={ B 1 ,..., B n } such that: if SP SP and B  X  SP then SP , SP ( B ) satisfies: (ee2) If  X  B i  X  SP such that B  X   X  B  X  i  X   X   X  then a SP , SP ( B )  X   X  B  X  i  X  , (ee3) If B = SP , SP ( B ) ,then( B i  X  SP such that B  X   X  B  X  i  X   X   X  and a SP , SP ( B ) =  X  ) . where a SP , SP ( B ) denotes the justifications on B .

The enhancement function intends to promote the contents of a given requirement col-lection, that is, the function tries to reduce the degree of inconsistency of the requirement collection, or add justifications for less evident requirement statements. Analogous to the weakening functions in BGM [ 32 ], this function weakens the requirement collections in order to remove inconsistencies, but additionally allows the viewpoints to add extra con-sistent requirement statements to their requirement collection in order to justify or extend their previously provided requirement statements. Here, ee 1 ensures that the result of the enhancement function is a weakened version of the initial requirement collection except for those additional consistent requirement statements that have been added by the viewpoints for the purpose of standpoint justification. ee 2 states that the additional requirement statements should be consistent with the requirement statements in the peer requirement collections with which the inconsistencies had initially occurred. Furthermore, the result of the enhance-ment function is only equivalent to the initial requirement collection if a peer inconsistent requirement collection does not exist and no further justifications have been added to the requirement collection ( ee 3).

It is now possible to define the viewpoint integration game using the choice and enhance-ment functions.
 Definition 5.3 A viewpoint integration game is a pair N = g , where g is a choice func-tion and is an enhancement function. The final solution for a set of requirement collections provided by different viewpoints, denoted SP , for a viewpoint integration game N = g , , developed as a result of the following consecutive steps: (sp1) SP 0 = SP , (sp3) SP  X  N is the first SP i that is consistent with  X  .

As it can be seen, the viewpoint integration game initially commences by considering all of the requirement collections that are provided by the viewpoints. In each round of negoti-ation, the choice function selects a requirement collection, which is conceptually promoted using the enhancement function. These rounds of negotiation are repeated until all of the inconsistencies of the requirement collections are removed. Once SP  X  N has been developed, the produced inconsistency-free requirement collections can be easily integrated to create a fair representative of the viewpoints opinions. 5.2 Choice function The structure of the choice function is based on a fitness measure, which defines the quality of the requirement collections, i.e., those requirement collections that are less eminent than the others are selected as suitable candidates in the choice function. We define the fitness measure based on the introduced essential and contingent properties of the requirement collections. Definition 5.4 The fitness measure of a requirement collection B under integrity constraints  X  is a function fm that maps B to a value in [ 0 ,  X  ) .Let SP be the set of available viewpoints. Given two requirement collections Band B  X  SP , B is considered more competent than B if and only if fm  X  SP ( B )&lt; fm  X  SP ( B ) .

An interesting result of Definition 5.4 is that it allows us to numerically quantify the eval-uation of the importance of a requirement collections, i.e., a fitness function can analyze the essential and contingent properties of a requirement collection and hence provide us with a numeric value for the significance of each requirement collection. In order to develop such a fitness function, we should employ the conceptually disjoint properties of the requirement collections. In the essential properties, it can be seen that the degree of incoherence of a requirement collection summarizes and incorporates the rest of the essential properties, and in the set of contingent properties, the degree of conflict and the degree of comprehensiveness are the inclusive representatives. It is possible to develop the fitness function based on these three properties: Definition 5.5 ( Extends Definition 5.4 ) The fitness measure of a requirement collection B under integrity constraints  X  is a function fm that maps B to a value in [ 0 ,  X  ) such that: where D CON ( B ) is the sum of the degrees of conflict of B with all other requirement col-lections.

This fitness measure is equivalent to the length of a vector developed based on the three important properties of requirement collections; therefore, those requirement collections that provide the most informative requirement statements and at the same time contain the least amount of internal incoherence and the lowest overall inconsistency with the other require-ment collections are selected as the most competent. Those requirement collections with a lower value for fm  X  SP ( B ) are more competent than the rest.
 Example 5.1 ( continues Example 2.1 ) Consider the three requirement collections C 1, C 2 and C 3. Table 1 shows the calculated essential and contingent properties of these collections along with the derived fitness measure of each individual collection. In order to visualize the distance measure, the degree of incoherence can be considered as applicate, the degree of conflict as abscissa, and the degree of comprehensiveness as ordinate in a three dimensional coordinate system. Figure 2 depicts the visualization of the information of Table 1 .Further, since the statements in the three requirement collections are internally consistent, here the degree of incoherence is zero for all three requirement collections.

For the sake of explanation, suppose that the first viewpoint has also included ( X ,  X  4 ) in the first collection (i.e., C 1 + = ( X ,  X  4 )  X  C 1). In such a case, C 1 + contains internal inconsistency, and hence INCH ( C 1 + ) = 0 . 1837. C 1 + hasalsobeenshowninFig. 2 .
The existence of the fitness measure provides the basis for defining an ordering relationship between the requirement collections.
 Definition 5.6 Let SP ={ B 1 ,..., B n } be a set of requirement collections of various view-points. A fitness measure-based ordering,  X  fm , of two requirement collections B i ,and B j  X  SP is defined as: Based on this ordering mechanism, B i is considered to be more significant than B j if B i  X  fm B j ; therefore, B j is considered to be a weaker requirement collection than B i . Definition 5.7 Let SP ={ B 1 ,..., B n } be a set of requirement collections provided by var-ious viewpoints. A fitness measure-based choice function under the integrity constraint  X  is defined as follows:
According to this choice function, from the set of mutually inconsistent requirement collections, the ones that are most divergent within the context of SP are selected as the can-didates to make the concessions in that round of negotiation. In the requirement collection of Example 2.1 , C3 will be selected by this choice function to make the required concessions, since C 1  X  fm C 2  X  fm C 3. 5.3 Enhancement functions An enhancement function is responsible for promoting the contents of the requirement col-lections that have been selected by the choice function. The improvement of such require-ment collections that contain problematic requirement statements usually involves three main activities: 1. the reinforcement of correct and consistent requirement statements such that they are not 2. the degradation of the inconsistent requirement statements through their removal or the 3. the enhancement of weaker requirement collections by adding a number of clear and
Here, we define two important enhancement functions that support these three important processes. First, we define an inconsistency-intolerant enhancement function that immedi-ately removes any source of inconsistency from the selected requirement collection. Definition 5.8 Let SP be a set of requirement collections,  X  C be the set of all subjective prime implicants of the requirement collections in SP ,and ( X ,  X )  X  X  X  C be a single require-ment statement forming a singleton requirement collection C  X  ={ ( X ,  X ) } . ( X ,  X ) is con-sidered to be one of the weakest inconsistent requirement statements of SP if and only if: ( w if 1) ( X ,  X ) is in conflict in  X  C , ( w if 2)  X  ( X  i , X  i )  X  X  X  C such that  X   X   X  i  X   X   X  then C  X 
This definition shows that if a specific requirement statement is in conflict with other requirement statements in other requirement collections, and the fitness measure for this requirement statement is lower than the other conflicting statements, then this requirement statement is considered to be the weakest inconsistent requirement statement.
 Definition 5.9 Let SP be a set of requirement collections,  X  C be the set of all subjective prime implicants of the requirement collections in SP , B be a specific requirement collection in
SP ,and ( X ,  X )  X  X  X  C be a single requirement statement forming a singleton requirement collection C  X  ={ ( X ,  X ) } . ( X ,  X ) is considered an important missing requirement statement from B iff: imr 1 ( X ,  X )  X  B , imr 2 In the context of SP , D CON ( C  X  )&lt; 0 . 5.

Within the context of a specific requirement collection, a missing requirement statement is a statement which has been expressed by the other viewpoints in the other requirement collections but is not present in this requirement collection X  X  statements. A missing require-ment statement is considered to be important if its average quantities of strong and week agreement outweigh its average quantity of conflict, i.e., D CON ( C  X  )&lt; 0 . 5. Lets consider requirement collection C3 in Example 2.1 . Both requirement statements  X  and  X  are missing requirement statements from C3, but only  X  is an important missing requirement statement from C3, since D CON ( C  X  )&gt; 0 . 5.

It is now possible to formally define the first enhancement function based on the weakest inconsistent requirement statements and the important missing requirement statements. Definition 5.10 Let SP ={ B 1 ,..., B n } be a set of requirement collections,  X  C be the set of all subjective prime implicants of the requirement collections in SP , SP be a subset of SP , B  X  SP , D ={ ( X ,  X )  X  B | ( X ,  X ) be one of the weakest inconsistent requirement statements in  X  C } and E  X  X  ( X ,  X )  X  B | ( X ,  X ) be one of the important missing require-ment statements of B } . The weakest inconsistent-based (WI) enhancement function for B is defined as:
This enhancement function initially removes all the weakest inconsistent requirement statements from the requirement collection, and then proposes the addition of a subset of the important missing requirement statements that are not available in that requirement col-lection. This enhancement function, therefore supports two of the three major activities of requirement collections improvement process (activities 2 and 3). It also respects the defini-tion of the first activity by leaving the consistent requirement statements intact. In the third requirement collection C3 of Example 2.1 , the WI enhancement function does not remove  X  from C3, since it is not a weakest inconsistent requirement statement, but proposes the addition of  X  to the requirement collection, because it is an important missing requirement statement of C3 (shown earlier); therefore, after applying this enhancement function, C3 would be { ( X ,  X  2 ), ( X ,  X  2 ) } .

The WI enhancement function can be considered as strict, since it does not tolerate any inconsistencies. We define the conformance belief-based (CB) enhancement function, which is a more tolerant enhancement function in the following. This enhancement function does not immediately remove inconsistencies, and provides room for negotiation between the viewpoints. To achieve this, the enhancement function asks the weakest requirement collec-tion to alter the annotated beliefs of its inconsistent requirement statements in order for it to move towards the understanding of the rest of the viewpoints.
 Definition 5.11 Let SP ={ B 1 ,..., B n } be a set of requirement collections,  X  represent the possible subjective opinion space, and SP be a subset of SP .Let B  X  SP , ( X  i , X  i )  X  B ( X  i , X  i ) in the n  X  1 other requirement collections in SP . The conformance subjective belief for ( X  i , X  i ) is a function  X  : F B  X   X  defined as:
The conformance subjective belief for ( X  i , X  i )  X  B , denoted  X  B  X  eral consensus about a given requirement statement. It is produced by the application of the consensus operator, denoted  X  , on the set of images of  X  i in the other peer requirement collections in SP . As an example, the conformance subjective belief for ( X ,  X  2 )  X  C 3is calculated by aggregating the beliefs of C1 and C2 about  X  , which is the aggregation of the annotations of ( X ,  X  2 )  X  C 1and ( X ,  X  6 )  X  C 2 that is represented as:  X  C 3  X  =  X  1  X   X  6 . Definition 5.12 Let SP ={ B 1 ,..., B n } be a set of requirement collections, SP be a subset of
SP , B  X  SP , C ={ ( X ,  X )  X  B | ( X ,  X ) be one of the weakest inconsistent requirement statements in  X  ( SP ) } and E  X  X  ( X ,  X )  X  B | ( X ,  X ) be one of the important missing require-ment statements of B }. The conformance belief-based (CB) enhancement function for B is defined as:
In the CB enhancement function, each requirement collection in SP is required to update the subjective belief values of the requirement statements in its collection. The effect of the update on the subjective beliefs should by equivalent to the conformance subjective belief rec-ommended by the enhancement function for each individual requirement statement. Simply stated, this enhancement function proposes a suitable belief value derived from the collective belief of the other viewpoints for each requirement statement. In the CB enhancement func-tion, the viewpoints have freedom in improving the contents of their requirement collection through the changes they make on the requirement statements X  annotation values, while at the same time they can still keep the requirement statements that they feel strongly about. If all viewpoints conform to the recommended subjective opinion (  X  B  X  inconsistencies are gradually removed. For instance, suppose a situation where two strong viewpoints agree on a certain issue, while a third weaker viewpoint completely disagrees. The WI enhancement function would require the third viewpoint to completely remove its disagreement, whereas the CB enhancement function would only require the third viewpoint to soften its disagreement so that consensus is gradually achieved through several rounds of negotiation.

An important advantage of this approach is that in those special cases where the weaker viewpoint is making a correct assertion against the statements of the other viewpoints, it has the chance to justify and explain its point. In this way, weaker viewpoints are not always singled out and their issues are not removed. Similar to the WI enhancement function, the CB enhancement function also recommends a set of possible additions to the requirement collection. It should be noted that in both enhancement functions, a SP , SP is not restricted to requirement statements in E . Viewpoints can also add other requirement statements that con-forms with the definition of the enhancement function. The result of the application of the CB enhancement function of C3 of Example 2.1 would change C3 into { ( X ,  X  1  X   X  6 ), ( X ,  X  2 ) } .
It can be seen that the conformance belief-based enhancement function has lower infor-mation loss with regards to each individual requirement collection. This is because in the enhancement process, conformance belief-based enhancement function does not directly delete any requirement statements, and only requires the viewpoints to amend their subjective opinions for each inconsistent statement. Although this is a positive feature in many cases and provides the possibility for formal negotiation between the viewpoints through belief adjustment, it is not so much desirable in situations where fast consensus achievement and simple computation is sought. For such conditions, the employment of the weakest inconsis-tent-based enhancement function yields faster results. 5.4 Requirement collection consolidation The rounds of negotiation in the viewpoint integration game will result in a set of consistent requirement collections. In order to develop a single representative requirement collection from the set of available requirement collections, Algorithm 5.1 needs to be performed. Algorithm 5.1 Consistent Requirement Collection Consolidation Algorithm.
 Input : A set of consistent requirement collections
Output : A single representative requirement collection :: FC foreach (Requirement Collection C i )
Simply stated in Algorithm 1, for every requirement statement in each requirement collec-tion, the statement and its current annotation value is directly added to the final requirement other requirement collections include a similar statement, the annotation values of all similar requirement statements are aggregated using the consensus operator and the resulting belief from this process is attached to the requirement statement, which is then inserted into the final requirement collection.
 Example 5.2 Lets suppose that the requirement collections in Example 2.1 have finally reached the following state as a result of the viewpoint integration game:  X  X 1:{ (BadHistory(Person) ,  X  1 ) , (StudentUnionMember(Person) ,  X  5 ) }.  X  X 2:{ (PartTimeStudent(Person) ,  X  4 ) }.  X  X 3:{ (BadHistory(Person) ,  X  1  X   X  6 ) , (PartTimeStudent(Person) ,  X  2 ) }.

The result of the application of the requirement collection consolidation algorithm on these three requirement collections would be:  X  X C:{ (BadHistory(Person) ,  X  1  X   X  1  X   X  6 ) , (StudentUnionMember which can be interpreted as:
The library allows part-time students to borrow books, but does not provide this service to the members of the student union. In addition, it is believed that those students with many late book returns are still allowed to borrow books, but this last requirement statment needs further investigation.

The statement about the students with late book returns lacks certainty and hence needs which is both indecisive and ambiguous. 6 Case study In this section, we will borrow a case study scenario from [ 41 ] to show a step-by-step pro-cess of the viewpoint integration game, and its ability to handle and manage non-canonical requirement specifications.
 Example 6.1 We consider a setting related to the development of a residential area manage-ment software that is responsible for dealing with the distribution of garage to collection vehicles. 1. Viewpoint requirement specification elicitation: 2. Conversion to subjective propositional form: 3. Viewpoint integration game: 4. Requirement collection consolidation: 5. Integration result interpretation:
Here, the CB function has allowed us to correctly infer the last fact ( authorized vehicles need to have a fixed garage. ), whereas the WI function has resulted in a vague require-ment statement ( It is not completely certain whether authorized vehicles need to have a garage or not. ).

Let us now analyze the performance of the proposed viewpoint integration game through a simulated case study using software agents.
 Example 6.2 In the second case study, various software agents have been employed to rep-resent and play the role of the viewpoints in the requirement specification process. We have analyzed the performance of the proposed viewpoint integration game under three different scenarios explained in the following. In each scenario, the outcome of the process for five cases are compared: (1&amp;2) When the CB (WI) enhancement function is used but recom-mendations about the important missing requirements are rejected by the weakest viewpoint (CB-No,WI-No), (3&amp;4) When the CB (WI) enhancement function is employed and the rec-ommended important missing requirements are accepted (CB-Yes,WI-Yes), (5) A situation where the viewpoint integration game is not used and the viewpoints try to reduce the amount of the available mutual inconsistency in an ad-hoc manner, i.e., when a viewpoint perceives an inconsistency, it would take the matter in his/her own hands by trying to adjust his/her own requirement statements such that inconsistency is reduced.

The three case study scenarios are as follows:  X  In the first scenario, various simulations were performed where the number of available  X  In the second set of simulations, the number of requirement statements and the degree  X  In the final category of simulations, the degree of initial inconsistency of the viewpoints X  7 Discussions Easterbrook distinguishes three broad strategies for resolving requirement specification con-flicts, namely: Cooperative method, which includes negotiation; Competitive method, which comprises of coercion and competition; and Third-party method, which consists of arbitra-tion and appeal to higher level authorities [ 19 ]. Many of the work proposed in the literature benefit from these strategies. A major advantage of our proposed approach is that the involved participants can utilize all of these three strategies at the appropriate time: Cooperation is facilitated in our model through the introduction of the recommended important missing requirement statements . With this notion, the participants are able to identify the aspects of the problem domain that they have left unexplored or they tend to have a different opinion about. Consequently, this formal information sharing process would allow them to cooperate more effectively. In contrast, competition-like strategies can be employed in the requirement specification process, where the disagreements of the participants is communicated. For instance, suppose that one of the participants does not agree with the requirement statement ( X ) of the other participants. In such a case, he/she can define the same requirement statement ( X ) and fully disagree with it by stating that I firmly disagree with X . The effect of this disagreement would influence the requirement specification process and hence consensus would need to form under a competitive scenario, where all the participants are struggling to establish their own grounds. Third-party resolution methods are also possible in the proposed approach by taking the requirement statements of the most credible participant and ignoring the rest when high degrees of conflict exist.

One of the important issues that need to be considered in the proposed approach is the methodthroughwhichthesubjectivebeliefbasesareautomaticallycreatedinanunambiguous fashion from higher-level requirement specification formats. In this paper, we assume that such approach already exists and hence view it to be a problem out of the scope of this paper that can be tackled as future work; however, we would also like to introduce two main research approaches that can be used to develop subjective belief bases for requirement specifications: (1) automated natural language processing of informal requirement specifi-cations and (2) the use of formal annotated requirement specification languages that can be unambiguously interpreted into first-order logic.

Related to the first approach, several text analysis methods have been developed spe-cifically for the domain of requirement engineering that convert an informal requirement document into a formal format such as the method introduced by Gervasi and Zowghi [ 25 ]. Close to our observation, these authors have sensed that in most cases stakeholders cannot be expected to be fluent with expressing their requirement statements in formal logic. For this reason, they explore the integration of natural language parsing techniques with default reasoning in order to allow the stakeholders to express their requirements in a natural language format. They propose a parsing technique and a translation schema that allows requirements expressed in natural language sentences to be automatically transformed into propositional logic formulae , as well as their reverse translation (from logic formulae into natural language sentences). Therefore, logical translations such as those seen in Example 2.1 can be auto-matically performed using their software tool called CARL. It is important to notice that in the automatic evaluation of complex natural language requirement documents, complex techniques for word-sense disambiguation, and contextual analysis of the semantics of the expressions may be required [ 27 , 28 ].

Now, since CARL is able to provide a formal translation of natural language requirement statements into propositional formulae, the propositional formulae need to be further aug-mented with subjective values to create the required subjective belief bases of our proposed approach. For this purpose sentiment analysis techniques can be employed, which aim to identify the attitude of the person with respect to some specific topic from his expressed statements. The attitude can comprise of his/her judgement or evaluation of the topic, his/her emotional state or the intended emotional communication. Substantial work on document sentiment analysis has been conducted in the text mining field that automatically evaluate a part or all of a document and provide a numerical analysis of the quality and intensity of the discussions in it [ 44 , 61 ]. For instance, the authors in [ 61 ] provide a corresponding three dimensional numerical representation of attitude from a given corpus. Such an analysis can be performed on the requirement statements of the stakeholders in order to automat-ically extract the required subjective annotation values related to each of the requirement expressions. Due to the capabilities of these two lines of work (the development of formal specifications from informal requirement specifications and automated document sentiment analysis), we believe that as a part of our future research, these work can be integrated in order to automate the process of developing subjective belief bases from informal requirement specification documents.

Another viable solution is to allow the participants to attach easy-to-understand fuzzy vari-ables such as I am highly certain about my requirement statements to their requirement statements. In a closely related work [ 7 ], we have incorporated the techniques introduced in this paper into a collaborative object-oriented modeling process using the Unified Modeling Language (UML 1 ). The defined metrics and algorithms introduced in this paper were imple-mented and integrated into two Eclipse plug-ins which were provided for use to the study UML model instances. The model instances and their corresponding fuzzy variables were then converted into subjective belief bases. 2 The designers participating in these experiments (a group of Computer Science graduate students) found the provided supportive tools and techniques quite useful [ 4 ]. They believed that the idea of assigning fuzzy variables to model instances was interesting and the algorithms processing these variables to be helpful in reach-ing a common understanding between the participants. The detailed results of the analysis are directly involved with the subjective belief bases and the related metrics. Subjective belief bases are only the underlying formalism that serve as a foundation. Stakeholders and require-ment analysts who decide to employ the proposed techniques of this paper will continue to use their legacy requirement specification languages and techniques; the requirements are converted into appropriate subjective belief base format only after the analysts have defined their requirement specifications in some standard (formal/informal) requirement specifica-tion formalism. 3 The exploration of suitable methods for such conversion is a nice candidate for future work briefly explained above.

The other important aspect of the work that needs to be closely analyzed is the practicality of the approach. As was mentioned above and described in [ 4 , 5 , 7 ], in the real-world appli-cation of the proposed approach, expert designers found the proposed approach to be quite intuitive and helpful. Further, they found that the proposed work helps them reach consensus in a timely manner. For instance, the designers were able to design a complicated online store management system in only eight rounds of negotiation (each round was a 45-min design session). This is in contrast to the simulation results described in the previous section. The high number of rounds of negotiation in the simulated case study is due to the fact that unlike human experts, agents cannot communicate with each other in any method other than the given recommendation values, whereas in a real-world setting, the human designers are able to negotiate based on the given recommendations of the proposed methods of this paper and reach a faster consensus. The results of the simulations of the case study section are worst-case results for circumstances where the designers are agents with no capability to communicate with each other.

From another perspective on the proposed work, it has been mentioned that the approach considers closed-world reasoning, which assumes that the collection of all of the statements of the stakeholders and designers is considered to be complete enough for evaluation in the software design process. This assumption is inline with many industrial practices where the final acquired requirement statements are believed to be descriptive enough; however, these industrial practices use various ethnographical techniques [ 51 ], or goal-based analysis [ 58 ] among others to ensure that the performed requirement specification gathering process will result in a complete requirement collection. Still in these approaches, the requirement col-lections are regarded as complete after the requirement gathering process is finished. The closed-world reasoning assumption in this paper is therefore similar to this supposition. In contrast, Mu et al. [ 41 ] require the stakeholders to provide a specific supporting scenario for each requirement statement. This allows them to have the open-world reasoning assumption, but they require more effort from the participants. In our view, our closed-world assumption is closer to the current industrial practices. 8 Related work As the magnitude and complexity of a software system increases, the development of its large requirement specification model turns into a process which requires the collaborative participation of various viewpoints [ 23 ]. Such a collaborative process is likely to wind up with many conflicting and inconsistent specifications. In the first glance, these discrepancies may be considered undesirable; however, their existence can point to the aspects of the sys-tem that deserve more attention and deeper analysis [ 56 ]. Up to now, there have been several attempts to formalize the process of viewpoint-based requirement engineering.

Viewpoint-OrientedRequirementDefinition(VORD)isoneoftheearlymodelsofrequire-ment engineering that supports the exploitation of viewpoints. VORD allows the analysts to define software requirements in any notation. Although it does not support any sort of auto-mated viewpoint analysis, it has defined a process in which cross viewpoint analysis for inconsistency identification has been recognized as one of its important steps [ 52 ]. As an extension to the VORD model, Preview defines a viewpoint as a concept with six slots, namely: viewpoint name, viewpoint focus (boundary and scope), viewpoint concern (e.g. organizational goals, business objectives, etc.), viewpoint information sources, viewpoint requirement definitions, and the viewpoint activity history used to incorporate traceability features into the model [ 52 ]. One of the most important features of the Preview model is the notion of concerns. Concerns are high-level strategic goals and aspects of the intended software entity such as safety, and fault tolerance that need to be closely observed in the development of the requirement specifications. Concerns crosscut viewpoints and can be addressed by any of the viewpoints.

In a similar attempt to Preview, Nuseibeh et al. formalize a viewpoint as a meta-model with specification, (4) work plan (requirement engineering strategy), and (5) a work record [ 45 ]. From the analysts X  perspective, this model is less flexible as compared with the two previous models (VORD and Preview), since it requires a strict declaration of a representation style, and a work plan for each viewpoint. They also define viewpoints as loosely coupled, locally managed distributed objects which encapsulate partial knowledge about a system and its domain, specified in a particular, suitable representation scheme, and partial knowledge of the process of development [ 45 ]. The notion of viewpoint used in this paper is similar to the viewpoint concept defined by these authors, since a viewpoint in our proposed approach represents the perspective of one or more stakeholders of the systems towards the domain of discourse; therefore, each viewpoint is an autonomous source of information that can express those requirement statements that it deems appropriate based on its own understanding of the domain of discourse in its own requirement specification collection ( loosely coupled, locally managed distributed objects which encapsulate partial knowledge about a system and its domain ). Furthermore, viewpoints are required to express their requirement statements in subjective propositional form and adhere to the constraints of the requirement integration game defined in this paper (specified in a particular, suitable representation scheme, and partial knowledge of the process of development); hence, viewpoints defined in this paper are quite close to the definition provided in [ 45 ].

In a different approach, the Controlled Requirement Expression (CORE) model divides the problem domain into disjoint areas of concern [ 16 ]. In this model, each viewpoint is concerned with the completion of the specifications of that certain subset of the problem domain. Hence, a consistent requirement specification is obtained only if all the requirement models are merged into a single model. Merging viewpoints in this model seems to be the simplest form of viewpoint merging among all viewpoint-based models, because there are no overlaps between the viewpoints and therefore very few (if any) inconsistencies will occur. It is important to mention that viewpoint merging is not always this straightforward [ 50 ]. A typical merging strategy should consist of a process for identifying, evaluating and resolv-ing discrepancies between different viewpoint specifications, and integrating the ultimate decided specifications into a unified representation [ 36 ].

The models that are currently practiced for identifying specification overlaps and discrep-ancies are based on one of the following schemes: shared ontologies (common application vocabulary or thesauri), human expert inspection, and formal methods of similarity analy-sis [ 33 , 55 , 56 , 63 ]. In the methods that use common application vocabularies, it is assumed that the analysts are provided with a shared repository that is gradually completed and is used for expressing software specifications. If the analysts confine to this shared repository of concepts, the detection of specification overlaps would be a rather easy task that can even be performed in an automatic or semi-automatic way. Semi-automatic models such as DealScribe [ 48 ], QARCC [ 12 ], and Synoptic [ 18 ] rely more heavily on expert-centric iden-tification of discrepancies. For example, in Synoptic, experts are required to fill in conflict forms in cases where they find a conflict in the specifications. Similarly in DealScribe, experts are asked to evaluate the degree of conflict between the viewpoint specifications, and based on the provided information, the contention and the average potential conflict metrics are calculated.

From a formal inconsistency analysis perspective, the majority of the models require the a special language to represent viewpoint specifications called VWPI. Consistency between the viewpoints of this model is calculated using a static analyzer. In a different attempt, the authors in [ 23 ] have developed a model that converts viewpoint specifications into first-order logic. Consistency of the viewpoints are then analyzed through the manipulation of the first-order logic clauses. In the KAOS framework [ 15 ], divergence and inconsistency have been analyzed through goal regression, which identifies boundary conditions that maybe the source of specification discrepancies. This model is based on backward chaining and for-malizes software system goals and domain information in the form of A  X  B. Backward chaining starts by taking a negation of some asserted fact and continues until it unifies with another given fact in the aggregated specification knowledge base. If no unification is reached it can be inferred that inconsistencies do not exist. Several other interesting formal models for inconsistency identification such as the  X  bel framework [ 20 ], and a model for similarity analysis on top of Telos [ 43 , 53 ], a model for manipulating multiple goal oriented requirement engineering diagrams called AGORA [ 31 ] and some other models can be found in the related literature [ 16 , 22 , 34 , 54 , 59 ].

In a different approach to the formalization of viewpoint models, the authors in [ 21 ]have suggested the use of Category theory [ 10 ]. In this approach, models are formalized as cate-gories and connectors as functors. Similarly, Sabetzadeh and Easterbrook propose the use of category theory and the co-limit operator for merging viewpoints [ 50 ]. They exploit Belnap X  X  knowledge order [ 11 ] to define knowledge degrees which partially allows the identification of conflicts and uncertainty in the merged models. In this model, the value of the conflict-ing or uncertain knowledge degrees are calculated using the least upper bound operator. Quite similar to the theme of the proposed work in this paper, Mu et al. employ APC to prioritize requirement collections [ 41 ]. These annotation values along with additional sce-nario specifications allow them to reason about the status of various kinds of non-canonical requirements. 9Conclusion In this paper, we have proposed a formal process for handling the type of software require-ments that are either inconsistent, vague or incomplete. This process is built on the basis of considering requirements specifications as annotated propositional belief bases, which enables us to derive and clearly define several interesting properties of software require-ment collections. These properties facilitate the identification of inconsistent, incoherent and conflicting requirement specifications. The proposed properties are conceptually categorized into two groups, namely essential and contingent properties. Essential properties reflect the attributes of a requirement collection being considered in vacuum, whereas contingent prop-collections, which describe the same universe of discourse.

Based on these definitions, we have further formalized the integration of inconsistent requirement collections through an extended belief game called the viewpoint integration game. The game consists of several rounds of negotiation between the stakeholders, in each of which the weakest requirement collection is selected by a choice function and is required to make some concessions according to an enhancement function by the stakeholder expressing this requirement statement. The decision on the type of concession made by the stakeholder is facilitated by the recommendations provided by the enhancement functions. The viewpoint integration game results in a set of consistent requirement collections that can be integrated to form a unique covering fair representative of the given viewpoints.

We have also introduced several choice and enhancement functions. The CB enhance-ment function demonstrates enduring behavior, while the WI enhancement function shows to be more impatient. This is because the CB function tolerates inconsistencies and only requires partial conformance to its proposed recommendations, but the WI function immedi-ately removes the weakest inconsistent requirement statement from the selected requirement collection. The functions introduced in this paper satisfy the deadlock avoidance condition. Moreover, the CB function exhibits greater respect for minimality of change by tolerating inconsistencies to a greater extent.

In the future, we would like to extend the capabilities of the tool support for our developed methods such that the process of capturing and integrating requirement specifications would be less complex and more comprehensible to both technical analysts and non-technical end users. Some progress has been made so far; interested readers are encouraged to see [ 6 ]. References Author biographies
