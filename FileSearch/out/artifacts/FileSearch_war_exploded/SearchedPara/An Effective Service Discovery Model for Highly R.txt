 To support highly reliable Web services composition, it is urgent to discover suitable Web services with better performance from numerous Web services. Nowadays, ex-isting researches on Web services discovery have advanced from keywords-based and frame-based searching to semantic information based one, while the latter matching has been recognized as an effective servi ce searching strategy. Nowadays, a variety of techniques have been proposed, among which, popular ones include the following five methods: (1) DAML-S ontology matching method [1,2]. (2) WSDL based match-ing method [3]. (3) Ontology based matching method [4,5]. (4) Description Logics ( DLs ) reasoning method [6]. (5) OWL-S/DAML-S embedded to UDDI method [7]. To enhance the performance of Web services discovered, typical researches [8,9] pro-has been proposed so far. Moreover, these existing efforts have the following disad-vices. (2) Multi-step matching makes the responding time of both discovering Web services and executing composite services much longer. (3) Pair X  X ise matching based on text for profile information is not flexible and highly efficient. (4) Only few attrib-utes such as QoS information and constraint information have been addressed so far. 
The paper focuses on service discovery strategy for supporting highly reliable Web services composition in a specific domain, and proposes a Service Discovery Model , with the background of the Enterprise Flexible Composition System (EFCS )[10], and Discovery Model . strategies are adopted. First, Web services composition is supported in a specified domain with O WSDL and O DI [11] being defined. Secondly, the composite services are actual demands. Thirdly, input and output mapping information ( Map(Ip, Io) and Map(Op, Oo) ) from WS i published to O WSDL(j) is obtained at publishing time. Fourthly, parameters of WS i , and the result is reflected through InMap(Op, Oo) that realizes the conversion from result parameters to standard output parameters. Based on above publish matching stage, discovery matching stage and QoS matching stage. The Service Discovery Model is defined as: ServiceDiscoveryModel=(PublishM, Dis-coverM,QoSM) in which (1) Context-based Profile matching and WSDL -based functional matching are realized by Algorithm PublishM . (2) In DiscoverM , the con-sistency of data flows in pre-operation and post-operation is realized, and the non-on demands. (3) In QoSM, QoS matching based on QoS information is adopted to select the optimal Web services from numerous semantic equivalent Web services. In respectively. (1) Publish Matching algorithm ( PublishM Algorithm ). At publishing time, the Web service published will be correctly registered according to its domain con-cept [11] and corresponding Domain Web service [11], which is the guarantee to dis-cover Web services with syntax agreement and to enhance the precision and recall of services discovered. The PublishM is represented as follows: PublishM Algorithm the profile information and operation information of WS i . belongs to, O WSDL(j) is the Domain Web service followed by WS i . Main Steps : Step1 : P.WS i is parsed into keywords by eliminating empty words which contain less functional information and kept the substantives in W 1 = { w 1 , w 2 ...}, and by the same means, service name, operation name, input and output name as well as their corre-sponding functional description information are analyzed to obtain the set of key-words W 2 . Let W = W 1 + W 2 . D represent domain concepts defined in ontology. Step3 : | | W, D k | | CSD =s+  X  D ={x 1 ,x 2 ,...,x s } , x i = w j , x i+1 = w k , then neighborhood(x i ,x i+1 )=1/(k-j). Step4 : Remove the keywords excluded in any D k from W and another effective key-word set W are obtained. with the maximum similar distance. tance. input set o f WS k and the parameters in output set o f WS k subsume ones of output set of O
WSDL(j) , then O WSDL(j) is determined and the input/output mapping information ( Map(Ip, Io), Map(Op, Oo) ) from WS i to O WSDL(j) is obtained. (2) Discovery Matching Algorithm (DiscoverM Algorithm). P_Set and WS_Set can simply be obtained by keywords ( Domain Web services ) matching first, and then C_Set is acquired based on constraint information by means of vector distance. To definitions are given: Definition 1 Service Profile Ontology (O{Go,Io}) . O{Go,Io} is a standardized service profile, which denotes constraint information and can be defined as a SDTemplate, attributes of profile ontology. Corresponding Service Publishing Profile ( P{Gp,Ip} ) and Service Requesting Profile (R{Gr,Ir}) are defined the same as O{Go,Io}, where P{Gp,Ip} is the profile information published by providers, and R{Gr,Ir} is the profile information requested by customers. Definition 2 Service Discovery Matching Degree. [11] . Let O  X  P and R be one dimension vector matrix corresponding to O{Go,Io } , P{Gp,Ip} and R{Gr,Ir} respec-tively. Then Service Discovery Matching Degree of WS i and WS r is denoted as: || WS i , sents the similarity degree between the Web services published and that requested. || p coverM Algorithm is represented as follows: DiscoverM Algorithm Input : { D k , O WSDL(j) , C R } // C R is the constraint information requested. Output : { C_Set } Main Steps : Step2 : C X  X Set={WS i | || p p is the vector of WS i . named as C_Set. (3) QoS Based Matching Algorithm ( QoSM Algorithm ). Though the evaluation factors of QoS model in different domains may be different, and no matter which [13,14]: different weights designated on users X  demands, historical statistic informa-tion or more recent and important principle, and reasonable evaluation rules for all the factors being defined etc. So the QoS evaluation model can be defined as follows: Definition 3 QoS Evaluation Model (QoS(WS)) . Let QoS(WS) ={ FN , OP , CS },where represents the set of evaluation modes provided for customers in an application, QoS evaluation model, QoSM Algorithm is denoted as follows: QoSM Algorithm Input : { C_Set, Q R } // Q R is the quality information requested. Output: { S_Set } Main Steps: Step1 : According to QoS model, the performance values of every factor in QoS model about all the Web services in C_Set are calculated. Step2 : Their total performance values based on the evaluation mode selected are calculated. Step3 : S_Set is obtained, in which Web services are sorted by their QoS performance. The service discovery strategy discussed earlier has been realized in EFCS , which is supported based on advanced software environment, such as Eclipse 3.0.1 , Websphere 5.1 , GT3 , Tomcat5.0 , Jetspeed1.5 , IE6.0 , and is realized by Java JDK1.4 , JavaScript ments are focused on to present the performance of the discovering model, namely, the responding time of discovering services affected by profile matching , the  X  X ecall X  and precision of DiscoverM Algorithm determined by nonfunctional matching , and the responding time and failure rate of composite services affected by QoS matching , the test results are shown in Fig. 1, Fig. 2 and Fig. 3 respectively. 
In Fig 1, T t represents the total responding time of discovering services except for cost is tested based on various numbers of keywords in a domain concept . Fig.7 shows the recall of the keywords matching with semantic extended and that by using nonfunctional matching in discoveryM algorithm. In Fig. 3, Take a Travel Service [12] as an example, QoS_relation_sort [14] is selected and the Web services in C_Set are sorted by using their QoS performance [13] calculated by  X   X  m i i M w responding time and the failure rate in executing the composite service  X  TravelSer-vice  X  with QoS and nonQoS are tested respectively. 
According to the testing results, the discovering time by adopting the Service Dis-loosing of constraints (Fig.2), the average responding time and the failure rate in exe-cuting TravelService are all reduced to a greater extend than that without QoS model (Fig.3). To ameliorate limitations existing in service matching strategies, a Service Discovery Model is proposed. At publishing time, the domain concept and the Domain Web service the published service belongs to are determined based on profile matching and functional matching to guarantee the consistency of data flows in a composite service. At discovering time, nonfunctional matching is used to discover suitable Web services on demands, and then the best Web service is selected from the seman-tic equivalent Web services by employing QoS matching . This Service Discovery Model has been realized in EFCS , and in view of the experiments tested, this service Web services composition. 
Next, the services matching algorithms with intelligence by means of ontology knowledge and the QoS model for evaluating composite services with transaction property as well as the completeness of ontology knowledge will be studied further. 
