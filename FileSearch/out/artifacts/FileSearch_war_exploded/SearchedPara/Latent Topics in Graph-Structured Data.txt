 Large amounts of graph-structured data are emerging from various avenues, ranging from natural and life sciences to so-cial and semantic web communities. We address the problem of discovering subgraphs of entities that reflect latent topics in graph-structured data. These topics are structured meta-information providing further insights into the data. The presented approach effectively detects such topics by exploit-ing only the structure of the underlying graph, thus avoiding the dependency on textual labels, which are a scarce asset in prevalent graph datasets. The viability of our approach is demonstrated in experiments on real-world datasets. I.2.4 [ Artificial Intelligence ]: Knowledge Representation Formalisms and Methods; H.4 [ Information Systems Applications ]: Miscellaneous Algorithms Subgraph Mining, Latent Topics, Conceptual Patterns
The organization of data in entity-relationship graphs has become the prime knowledge representation formalism for many communities: For instance, in biology, biochemical networks are used to capture regulatory or metabolic pro-cesses, protein-protein interactions, etc. In social web plat-forms, graphs are often used to represent relationships be-tween entities of the platform, e.g., users, photos, home-pages, etc. In the semantic web field, the Linked Open Data (LOD) community uses RDF to organize data from online communities, governments, scientific institutions, etc. Given the wealth of graph-structured data, it is a challeng-ing undertaking for data engineers to choose the appropriate data(sub)set for the task at hand. Moreover, many of these sources, e.g., Yago, DBpedia, Freebase, or ProductDB, con-tain cross-domain knowledge and describe millions of en-tities but do not provide rich and meaningful meta infor-mation. Hence, even when the knowledge source is given, it is a difficult task to extract a subgraph of entities, in which all entities belong to the same latent topic of interest. Such a topical subgraph would avoid the hassle of managing the whole dataset; instead, only a small and  X  X ppropriate X  fraction could be used. So far, there are no mechanisms to discover, capture, and manage latent topics in entity-relationship graphs. Further, rich textual labels are rela-tively scarce and thus any mechanism for discovering latent topics in these graphs should mitigate the dependency on textual labels.

Many knowledge discovery tasks are typically topic-related. As an example, consider the task of finding in-teresting connections between the Nike-sponsored football club FC Barcelona and the company Adidas. By inspecting the DBpedia dataset, it turns out that some of Barcelona X  X  most important players (e.g., Lionel Messi) have an adver-tising contract with Adidas. This connection is depicted in the sample subgraph of Fig. 1. As a matter of fact, the au-tomated discovery of such interesting connections between entities in large graph datasets is relatively costly. Hence, for the above example, rather than performing the discov-ery task on the whole graph, it would be advantageous to exploit just the subgraph that interconnects all the sports-related entities.

In this paper, we present an approach for discovering la-tent topics in graph-structured data by exploiting only the graph structure, thus completely avoiding the dependency on textual labels. However, in the presence of rich textual labels in the underlying graph, the proposed approach can be used to complement well-known text-based topic-model techniques, such as Latent Dirichlet Allocation (LDA) or Latent Semantic Analysis (LSA).
 Related Work. Besides LDA and LSA, the work most related to ours is by Wu et al. [5] who categorize relational tables according to topics. Further, there is a large body of work on graph community detection [1, 2].
Definition 1. Let E be a set of entities and R be a set of relationship types. An entity-relationship graph is a set of triples G  X  E  X  R  X  E . We denote by E G = { s | ( s,p,o )  X  G } X  X  o | ( s,p,o )  X  G } the set of all entities from G and by R
G = { p | ( s,p,o )  X  G } the set of all relationships from G . Figure 1: Example of an entity-relationship graph: Ellipses indicate entity nodes.Edges represent rela-tionships among entities. Nodes in the large curly brackets illustrate topically related entities. Their classes, representing that topic, are depicted be-low. All together they describe the latent topic that corresponds to the subgraph enclosed by the large transparent ellipses on top. Note that there can be multiple topically related entity sets with equal rep-resentations, i.e., sets of classes. For instance, Bob Marley , etc. stem from another graph fractions (not depicted), but are instances of the same classes.

As with RDF, a triple ( s,p,o )  X  G corresponds to a subject-predicate-object statement. Note that since our ap-proach relies on the graph structure only, it is not important whether the entities in E G are represented by unique IDs (e.g., URIs) or by rich textual labels.

Typically, in semantic web graphs, a specific relationship rdf:type is used to connect an instance to the classes it be-longs to. We refer to it as the type relationship. Given an entity-relationship graph G , we denote the set of the im-mediate classes of all instances from G by C G = { o |  X  s : ( s, type ,o )  X  G } . Consequently, by I G = E G \ C G we denote the set of all instances from G . The function t : I G  X  X  ( C with t ( e ) = { c | ( e, type ,c )  X  G } assigns all immediate classes to a given instance from G .

In Fig. 1, for cleaner illustration, the edge labels between the entities have been omitted. Given such an entity rela-tionship graph, we seek subgraphs of topically related en-tities (background ellipses in the first layer). Such sub-graphs comprise instances (second layer) as well as respec-tive classes (third layer). These classes then describe the la-tent topic (fourth layer) of the underlying entity-relationship subgraph (first layer).

For the discovery of latent topics in entity-relationship graphs, we use a two-phase approach that exploits the inher-ent structure of the graph. First, we discover coherent con-nected subgraphs, so-called conceptual patterns , that cap-ture  X  X trong X  relations between classes. In the second step, we combine these subgraphs to derive larger subgraphs that represent latent topics. We propose two alternative methods for the first phase in Sec. 2.1. Each of these methods discov-ers connected subgraphs with different structural properties. The combination of the discovered subgraphs is presented in Sec. 2.2.
We start by introducing the basic subgraph structures that are used by our algorithms. These subgraph structures satisfy three main criteria: (1) the subgraph is connected; (2) for each instance in the subgraph, there is also one of its immediate classes in the subgraph, i.e., the subgraph com-prises some conceptual information; (3) the subgraph has a high occurrence frequency in the underlying graph, i.e., it is a salient interconnection pattern.

Definition 2. Let G and G 0 be two entity-relationship graphs. G 0 has a match in G if there exists a subgraph G  X   X  G such that: 1. | I G 0 | = | I G  X  | 2.  X  e  X  I G  X  : | t ( e ) | = 1 3.  X  ( s 0 ,p 0 ,o 0 )  X  G 0 with s 0 ,o 0  X  I G 0 ,  X  ( s,p,o )  X  G We call the graph G 0 a conceptual pattern of G and the subgraph G  X  a conceptual match of G 0 in G .
 Note that a conceptual match is determined by the class IDs that occur in the pattern. Instance IDs are irrelevant. In order to find a conceptual match of G 0 in G , a subgraph G  X  of G that is isomorph to G 0 has to be found. Figure 2 gives an example of two conceptual matches. Figure 2: Two conceptual patterns (left) and their conceptual matches in the graph of Fig. 1 (right).
 Conceptual Motif Patterns. To discover salient sub-graph patterns that interconnect groups of instances with their direct classes (thus capturing conceptual relations be-tween the instances), we adopt the notion of network motifs from [3] for Def. 2. There, a motif is defined as a  X  X ignifi-cantly often recurring interconnection pattern X .

Definition 3. Given an entity-relationship graph G , a con-ceptual motif is a conceptual pattern G 0 of G that has signif-icantly more conceptual matches in G than in any random graph with equal node properties.

To determine whether a subgraph pattern is a conceptual motif, we generate random graphs that contain all nodes (instances and classes) of the original graph and accept only those that have a similar node degree distribution as the original graph. This can essentially be done by shuffling around edges of the original graph. Then, we use a t-Test (  X  = 0 . 01 in 30 random graphs) to check the occurrence frequencies of patterns in the original against pattern fre-quencies in the accepted random graphs. In the following, we refer to conceptual motifs as CM patterns . Mutual Information Patterns. Although CM patterns can be derived directly from the entity-relationship graph, they are computationally relatively expensive. To provide a more efficient pattern discovery mechanism, we work on an abstract version of the entity-relationship graph. This abstract graph contains all classes of the original graph as nodes; its edges are derived from the connections between the instances in the original graph.
 Let G be an entity-relationship graph and let ni ( c ) = |{ e  X  I
G | c  X  t ( e ) }| be the number of instances in G that have c as an immediate class. Similarly, let nt ( c 1 ,c 2 ) = |{ ( s,p,o )  X  G | c 1  X  t ( s )  X  c 2  X  t ( o ) }| be the number of triples in G for which the subject and the object entity have c 1 and c 2 as immediate classes, respectively. Now, we define a weighted graph over the classes of G as follows:
Definition 4. A weighted abstract graph over an entity-relationship graph G is a graph G G = ( V , E ,w ) with  X  ( c 1 ,c 2 )  X  X  : where  X  = P c ( s,p,o ) where s and o have immediate classes. Further,  X  = P e  X  I G | t ( e ) | is the total number of type edges in G . The weighted abstract graph models the strength of rela-tionships between classes with an estimate of the mutual information. In the next step, for a given abstract graph G and an integer m , we address the problem of extracting the top-k maximum-weight subgraphs that interconnect any m nodes in G G .

Definition 5. Given a weighted abstract graph G G = ( V , E ,w ) and two integers k,m  X  N , the top-k maximum-weight connected subgraph problem is to find k connected subgraphs G i = ( V i , E i ) ( i = 1 ,...,k  X | V i | = m ), such that there is no subgraph G j = ( V j , E j ) ( j 6 = 1 ,...,k  X |V Note that the above problem is a variation of the dense k-subgraph problem , which is known to be NP-hard. How-ever, given the typical size of abstract graphs (i.e., hun-dreds of nodes) and the threshold m  X  10 on the subgraph size, as well as a long-tail edge weight distribution, one can determine k maximum subgraphs by means of a bottom-up branch-and-bound strategy. We omit the algorithm for space reasons.
So far we described two approaches for generating sub-graph patterns that capture structural relations between classes. These patterns serve as building blocks for com-posing larger subgraphs, which in turn represent the latent topics.

Intuitively, patterns percolate through the graph if the graph comprises overlapping matches for similar patterns (inspired by Clique Percolation [4]). Figure 3 depicts the percolation of three different conceptual patterns. Then, the chain of pattern matches forms a latent topic, i.e., a subgraph that is best described by the class IDs occurring in the patterns (here club , record , band , manager , and event ). This collection of classes might stand for the topic  X  music  X . Figure 3: Neighboring pattern matches (dotted, dashed, and solid lines) in the graph of Fig. 1.

We now formalize the above intuition: Given a set P of conceptual patterns and an entity relationship graph G , let M represent all conceptual matches of patterns from P in G . We construct a match graph G M by combining the matches from M . First, we define the notion of neighboring con-ceptual patterns. Then, we discuss the construction of the graph G M that captures such neighborhood information.
Definition 6. Let d  X  N , d &gt; 1. Two conceptual patterns p and p 2 are d -neighboring patterns in an entity-relationship graph G if there exist matches G 1 for p 1 and G 2 for p 2 share at least d instance nodes in G . We refer to the matches G ,G 2 as d -neighboring matches .
 In our implementation we have chosen the lower bound d = neighboring matches (and thus the respective patterns) are highly similar, which in turn leads to particularly cohesive subgraph structures. The construction of the graph G M is based on the above definition of d -neighboring matches.
Definition 7. Given d  X  N ,d &gt; 1 and the set M = { G 1 ,...,G n } of all conceptual matches of the patterns p ,..,p m in an entity-relationship graph G , the match graph G
M is constructed as follows: 1. Each match G i  X  M becomes a node of G M . 2. A pair ( G i ,G j )  X  M  X  M becomes an edge of G M iff Figure 4 depicts a match graph: each match is a node in G Note that G M is not necessarily connected; in practice, it consists of several connected components. Each connected component in G M represents a structurally cohesive sub-graph of the original entity relationship graph. By the defi-nition of conceptual patterns, these subgraphs also represent cohesive interconnections between classes. By the same ra-tionale these connected subgraphs are also good candidates for capturing latent topics. 4 " Figure 4: Match graph G M created from matches shown in Fig. 3.
We now evaluate general properties as well as the semantic coherence of the returned subgraphs.
 Input. We used the DBpedia dataset (v3.6) which is highly heterogeneous and covers cross-domain information. We ex-tracted an entity-relationship graph with 1,008,985 nodes and 4,789,940 edges. For this evaluation, we used patterns of size 3 and 4 and show results for a varying number of conceptual patterns used for percolation.
 Gold Standard. For the quality evaluation, we compare classes contained in the mined entity-relationship subgraphs to those derived from Wikipedia portals . We extracted la-tent topic representations (sets of classes) from the portals by converting Wikipedia URLs to DBpedia URIs and deter-mining associated classes. In the following the term topic refers to its representation, i.e., a set of classes from that topic.
 Topic Assignment. We now have a set of topics from our approach and a set of 799 reference topics. For assigning our topics to reference topics, we computed Jaccard set similar-ity values sim ( T x ,T y ) for each pair of topics (one from our set and one from the reference set). Then, we assign a topic T x to a reference topic T y , iff sim ( T x ,T y ) is the maximum for both. That is, there are no topics T 0 x or T sim ( T x ,T y ) &lt; sim ( T x ,T 0 y ) or sim ( T x ,T Though this is a very strict criterion, it models our intuition that not all topics from our approach have a corresponding reference topic and vice versa.
 Characteristics of Mined Topics. In general, CM pat-terns lead to more topics than MI patterns. CM pat-terns mainly produce topics comprising three to five distinct classes. MI patterns typically result in topics comprising three to four classes.

To examine topic overlaps, we determined Jaccard set sim-ilarity values for each pair of topics in the result, see Tab. 1. The average similarity for CM pattern topics decreases with the number of patterns under consideration. As for MI pat-tern topics, we observe only a slight variation over the num-ber of percolating patterns. In general, created topics rarely overlap and MI patterns produce less overlapping topics. This is a desirable property, since otherwise topics are diffi-cult to distinguish.
 Table 1: Pairwise Jaccard Set Similarity of topics. Quality of Mined Topics. At the time of evalua-tion, Wikipedia featured 1,094 portals. Portals are in-tended to present a given topic and introduce  X  X he reader to key articles, images, and categories that further describe the subject X  (see http://en.wikipedia.org/wiki/Portal: Contents ). A typical portal is divided into common infor-mation, selected articles, selected facts, current news, and the like. However, many of these links to other articles change frequently and cannot be considered a stable ref-erence. Numbers for the extracted topics are also shown in Tab. 1. The number of topics evenly ranges over all sizes, i.e., 30  X  60 topics from size 2 to 26 distinct classes. The similarity among these topics is considerably higher (0 . 159  X  0 . 118 on average) then for our topic sets under consideration. Table 2 depicts average precision, recall and Table 2: Average topic mining performance with respect to Wikipedia portals.
 F-measure values for the comparison with mapped topics created from Wikipedia portals. Apparently, the extraction performance is stable over the different numbers of perco-lating patterns. The precision ranges around 0 . 83 for topics generated by CM patterns and from 0 . 65 to 0 . 71 for those generated by MI patterns. Recall values lie around 0 . 65 and 0 . 53, respectively. In general, CM patterns yield better val-ues then MI patterns. Most likely, this is the case, since CM patterns produce more topics. Consequently, more map-pings can be found for the reference topics. The number of mapped topics (rightmost column in Tab. 2) supports this hypotheses.
We explored the problem of mining latent topics from graph-structured data and presented a novel approach that exploits only the structure of an entity-relationship graph. For the evaluation, we ran our algorithm on the DBpedia dataset and compared the mined result to topics extracted from Wikipedia. The findings show, that we can reasonably reconstruct a portion of this information. This is a remark-able result, given that our approach avoids textual labels. Acknowledgments. We thank Johannes Gosda and Eyk Kny for their valuable support. This work has been funded by an IBM CAS grant.
