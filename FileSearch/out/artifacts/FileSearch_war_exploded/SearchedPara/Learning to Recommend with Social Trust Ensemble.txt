 As an indispensable technique in the field of Information Filtering , Recommender System has been well studied and developed both in academia and in industry recently. How-ever, most of current recommender systems suffer the fol-lowing problems: (1) The large-scale and sparse data of the user-item matrix seriously affect the recommendation qual-ity. As a result, most of the recommender systems can-not easily deal with users who have made very few ratings. (2) The traditional recommender systems assume that all the users are independent and identically distributed; thi s assumption ignores the connections among users, which is not consistent with the real world recommendations. Aim-ing at modeling recommender systems more accurately and realistically, we propose a novel probabilistic factor ana lysis framework, which naturally fuses the users X  tastes and thei r trusted friends X  favors together. In this framework, we coi n the term Social Trust Ensemble to represent the formulation of the social trust restrictions on the recommender systems . The complexity analysis indicates that our approach can be applied to very large datasets since it scales linearly with the number of observations, while the experimental results show that our method performs better than the state-of-the-art approaches.
 Categories and Subject Descriptors: H.3.3 [Informa-tion Search and Retrieval] Information Filtering; J.4 [Com -puter Applications] Social and Behavioral Sciences General Terms: Algorithm, Experimentation Keywords: Recommender Systems, Social Network, Social Trust Ensemble, Matrix Factorization
As the exponential growth of information generated on the World Wide Web, the Information Filtering techniques like Recommender Systems have become more and more im-portant and popular. Recommender systems form a specific type of information filtering technique that attempts to sug -gest information items (movies, books, music, news, Web pages, images, etc.) that are likely to interest the users. Typically, recommender systems are based on Collaborative Filtering , which is a technique that automatically predicts the interest of an active user by collecting rating informat ion from other similar users or items.

Although recommender systems have been widely stud-ied in the academia and deployed in the industry, such as Amazon and Ebay, most of these techniques suffer several inherent weaknesses. The first well known challenge is the data sparsity problem. As reported in [20], the density of the available ratings in commercial recommender systems is often less than 1%. Many collaborative filtering algorithms are impeded by the sparsity problem, hence cannot han-dle users who have rated few items. Secondly, traditional recommender systems ignore the social connections or trust relations among users. But the fact is, in the real world, we always turn to friends we trust for book, music, or restau-rant recommendations, and our favors can easily be affected by the friends we trust. Therefore, traditional recommende r systems, which purely mine the user-item rating matrix for recommendations, do not provide realistic output. Recentl y, trust-aware recommender systems have drawn lots of atten-tion [14, 15], but most of these methods are based on some ad hoc heuristics, and they still have the data sparsity and scalability problems. Moreover, the relationship between the user-item matrix and the users X  trust network are not fully understood.

In this paper, aiming at solving the above problems and modeling the recommender systems more accurately and re-alistically, we make three assumptions based on our obser-vations on the real world recommendation processes.
Based on the above intuitions, we endow a novel under-standing to all the ratings in the user-item matrix R . We interpret the rating R ij in the user-item matrix as the rep-resentation mixed by both the user u i  X  X  taste and his/her trusted friends tastes on the item v j . This assumption natu-rally employs both the user-item matrix and the users X  socia l trust network for the recommendations.

In terms of the users X  own tastes, we factorize the user-item matrix and learn two low-dimensional matrices, which are user-specific latent matrix and item-specific latent ma-trix. For the social trust graph, based on the intuition that users always prefer the items recommended by the friends they trust, we infer and formulate the recommendation prob-lem purely based on their trusted friends X  favors. Then, by employing a probabilistic framework, we fuse the users and their trusted friends X  tastes together by an ensemble param -eter. Finally, by performing a simple gradient descent on the objective function, we learn the latent low-dimensiona l user-specific and item-specific matrices for the prediction of users X  favors on different items. The experimental results o n a large Epinions 1 dataset show that our method outperforms the state-of-the-art collaborative filtering and social tr ust-based recommendation algorithms, especially when the user s have very few ratings. Moreover, the complexity analysis indicates that our approach can be applied to very large datasets, since it scales linearly with the number of obser-vations.
 The remainder of this paper is organized as follows. In Section 2, we provide an overview of several major approache s for recommender systems and other related work. Section 3 presents our work on recommender system with social trust ensemble. The results of an empirical analysis are presente d in Section 4, followed by the conclusions and future work in Section 5.
In this section, we review several major approaches for rec-ommender systems, including (1) traditional recommender systems which are mainly based on collaborative filtering techniques, and (2) social trust-based recommender system s which have drawn lots of attention recently.

Traditional collaborative filtering algorithms mainly fo-cus on the user-item matrix. Among all of these methods, the memory-based approaches are the most popular meth-ods and they are widely adopted in commercial collaborative filtering systems [10, 17]. These methods employ different strategies to find similar users and items for making the predictions, which are known as user-based approaches [3, 6, 9, 12] and item-based approaches [5, 10, 20], respectivel y. To predict a rating R ij of a given item v j for an active user u i , user-based methods search for other users similar to the user u i and utilize their ratings to the item v j prediction, while item-based methods leverage the ratings of other items similar to the item v j from the user u i in-stead. In order to take advantages of these two types of methods, Wang et al. in [23] and Ma et al. in [12] proposed two fusion models to combine user-based method with item-based method. In addition to the memory-based methods, model-based approaches, which employ statistical and ma-chine learning techniques to learn models from the data, also play an important role in the collaborative filtering re -search. Examples of model-based approaches include aspect models [7, 8, 21], the latent factor model [4], the Bayesian h i-erarchical model [24] and the ranking model [11]. Recently, several matrix factorization methods [16, 18, 19, 22] have been proposed for collaborative filtering. These methods focus on factorizing the user-item rating matrix using low-rank representations, and then utilize them to make further predictions. The motivation behind a low-dimensional fac-torization model is that there is only a small number of http://www.epinions.com factors that are important, and a user X  X  preference vector i s determined by how each factor applies to that user.
Recall that all the above methods for recommender sys-tems are based on the assumption that users are independent and identically distributed, and ignores the social trust r e-lationships between users, which is not consistent with the reality that we normally ask trusted friends for recommen-dations. Based on this intuition, many researchers have recently started to analyze trust-based recommender sys-tems [1, 2, 13, 14, 15].

Andersen et al. in [1] developed a set of five natural ax-ioms that a trust-based recommendation system might be expected to satisfy, and then proved that no system can si-multaneously satisfy all the axioms. Apparently, this work is out of the scope of this paper since we focus on how to employ both social trust network and user-item matrix to provide more accurate and realistic recommendations. In [14, 15], Massa and Avesani studied the trust-aware rec-ommender systems. Their work replaces the similarity find-ing process with the use of a trust metric, which is able to propagate trust over the trust network and to estimate a trust weight. The experiments on a large real dataset shows that this work increases the coverage (number of ratings tha t are predictable) while not reducing the accuracy (the error of predictions). Bedi et al. in [2] proposed a trust-based re c-ommender system for the Semantic Web; this system runs on a server with the knowledge distributed over the net-work in the form of ontologies, and uses the Web of trust to generate the recommendations. The trust-based meth-ods have become a popular research topic recently, however, there are several problems with previous methods. Firstly, these approaches only employ some heuristics to generate recommendations while the relationship between the trust network and the user-item matrix has not been studied sys-tematically. Moreover, these methods are not scalable to very large datasets, since they may need to calculate the pairwise user similarities and pairwise user trust scores.
In recent work proposed in [13], Ma et al. developed a factor analysis method based on the probabilistic graphica l model which fuses the user-item matrix with the users X  socia l trust networks by sharing a common latent low-dimensional user feature matrix. The experimental analysis shows that this method generates better recommendations than the non-social collaborative filtering algorithms. However, the di sad-vantage of this work is that although the users X  social trust network is integrated into the recommender systems by fac-torizing the social trust graph, the real world recommenda-tion processes are not reflected in the model. This drawback not only causes lack of interpretability in the model, but also affects the recommendation qualities. A more novel and realistic approach is needed to model the trust-aware recommendation problem.
Traditional recommender system techniques, like collabo-rative filtering, only utilize the information of the user-i tem rating matrix for recommendations while ignore the social trust relations among users. As the exponential growth of online social networks, incorporating social trust inform a-tion into recommender systems is becoming more and more important. In this section, we first describe the trust-awar e (a) Social Trust Graph (b) User-Item Rating Matrix Figure 1: Example for Trust based Recommendation recommendation problem in Section 3.1, and then provide the solution in Sections 3.2, 3.3 and 3.4.
In the real world, the process of recommendation scenario includes two central elements: the trust network and the favors of these friends, which can essentially be modeled by the examples of the trust graph in Fig. 1(a) and the user-item rating matrix in Fig. 1(b), respectively. In the trust graph illustrated in Fig. 1(a), totally, 5 users (nodes, fro m u 1 to u 5 ) are connected with 9 relations (edges) between users, and each relation is associated with a weight S ij the range (0 , 1] to specify how much user u i knows or trusts user u j . Normally, the trust relations in the online trust network are explicitly stated by online users. As illustrat ed in Fig. 1(b), each user also rated some items (from v 1 to v on a 5-point integer scale to express the extent of the favor of each item (normally, 1, 2, 3, 4 and 5 represent  X  X ate X ,  X  X on X  X  like X ,  X  X eutral X ,  X  X ike X  and  X  X ove X , respectively) . The problem we study in this paper is how to predict the missing values for the users effectively and efficiently by employing the trust graph and the user-item rating matrix.
In order to learn the characteristics or features of the users, we employ matrix factorization to factorize the user -item matrix. The idea of user-item matrix factorization is to derive a high-quality l -dimensional feature representation U of users and V of items based on analyzing the user-item matrix R . Suppose in a user-item rating matrix, we have m users, n items, and rating values within the range [0 , 1]. Actually, most recommender systems use integer rating val-ues from 1 to R max to represent the users X  judgements on items. In this paper, without loss of generality, we map the ratings 1 , ..., R max to the interval [0 , 1] using the function f ( x ) = x/R max . Let R ij represent the rating of user u item v j , and U  X  R l  X  m and V  X  R l  X  n be latent user and item feature matrices, with column vectors U i and V j repre-senting the l -dimensional user-specific and item-specific la-tent feature vectors of user u i and item v j , respectively. Note that the solutions of U and V are not unique. In [19], the conditional distribution over the observed ratings is defin ed as: where N ( x |  X ,  X  2 ) is the probability density function of the Gaussian distribution with mean  X  and variance  X  2 , and I is the indicator function that is equal to 1 if user u i rated item v j and equal to 0 otherwise. The function g ( x ) is the logistic function g ( x ) = 1 / (1 + exp(  X  x )), which makes it possible to bound the range of U T i V j within the range [0 , 1]. The zero-mean spherical Gaussian priors are also placed on user and item feature vectors: p ( U |  X  2 U )= Hence, through a Bayesian inference, we have p ( U, V | R,  X  2 R ,  X  2 U ,  X  2 V )  X  p ( R | U, V,  X  2 The graphical model of Eq. (3) is shown in Fig. 2(a). This equation represents the method on how to derive the users X  latent feature space or users X  characteristics purely base d on the user-item rating matrix without considering the favors of users X  trusted friends. In the next section, we will syste m-atically illustrate how to recommend based on the tastes of trusted friends.
In this section, we analyze how our social trust networks affect our decisions or behaviors, and propose a method to recommend only by using the tastes of trusted friends.
Suppose we have a directed social trust graph G = ( U , E ), where the vertex set U = { u i } m i =1 represents all the users in a social trust network and the edge set E represents the trust relations between users. Let S = { S ij } denote the m  X  m matrix of G , which is also called the social trust matrix in this paper. For a pair of vertices, u i and u j , let S ij denote the weight associated with an edge from u i to u j S ij = 0, otherwise. The physical meaning of the weight S ij can be interpreted as how much a user u i trusts or knows user u j in a social network. Note that social trust matrix S is an asymmetric matrix, since in a trust-based social network , user u i trusting u j does not necessary indicate user u j u .

As analyzed in Section 1, we always turn to our friends for recommendations since we trust our friends. We also believe that most probably we will like the items (books, music, movies, etc.) that our trusted friends recommend. Even if the recommended items are not the types we like, we still have a high probability to be influenced by our trusted friends. In the real world, suppose a user wants to see the movie X  X he Dark Knight X (suppose it is the item v 1 Fig. 1(b)), which is now playing at the theaters, but he/she knows nothing about the movie, like user u 1 in Fig. 1(b). What this user normally do is to take into account his/her trusted friends X  recommendations. Among all of his/her trusted friends in Fig. 1(a), u 2 and u 4 rated this movie as 4 and 5, and u 1 trusts u 4 (weight 1.0) more than u 2 (weight 0.6). Based on the information, there is a very high probabil -ity that u 1 will draw the conclusion that  X  X he Dark Knight X  is a very good movie worth of watching.

From the above analysis, we can generalize the above so-cial process as (a) Factorization of User-Item Matrix where b R ik is the prediction of the rating that user u i give item v j , R jk is the score that user u j gave item v is the friends set that user u i trusts and |T ( i ) | is the number of trusted friends of user u i in the set T ( i ). |T ( i ) | can be merged into S ij since it is the normalization term of trust scores. Hence, Eq. (4) can be simplified as Then the prediction of the ratings that user u i gives to all the items can be inferred as We can then infer that for all the users to obtain where SR can be interpreted as the recommendations purely based on the trusted friends X  tastes.

From the social trust network aspect, we define the con-ditional distribution over the observed ratings as where S ik is normalized by |T ( i ) | , which is the number of function that is equal to 1 if user i rated item j and equal to 0 otherwise.

Hence, similar to Eq. (3), through a Bayesian inference, we have In Eq. (9), we can assume that S is independent with the low-dimensional matrices U and V , then this equation can be changed to p ( U, V | R, S,  X  2 S ,  X  2 U ,  X  2 V )  X  p ( R | S, U, V,  X  sian priors on user and item feature vectors. This equation specifies the method to recommend purely based on users X  trusted friends X  tastes. The graphical model is shown in Fig. 2(b).
In Section 3.2, given the user-item rating matrix, the ob-served rating R ij is interpreted by the user u i  X  X  favor on item v , while in Section 3.3, given the user-item rating matrix and users X  social trust network, the observed rating R ij realized as the favors on item v j of user u i  X  X  trusted friends. Actually, both of the above assumptions are partially right since in the real world situation, every user has his/her own taste and at the same time, every user may be influenced by his/her friends he/she trusts. Hence, in order to define the model more realistically, every observed rating in the user -item matrix should reflect both of these two factors. Based on this motivation, we model the conditional distribution over the observed ratings as: p ( U, V | R, S,  X  2 ,  X  2 U ,  X  2 V ) =  X  In Eq. (11), the users X  favors and the trusted friends X  favor s are smoothed by the parameter  X  , which naturally fuses appropriate amount of real world recommendation processes into the recommender systems. The parameter  X  controls how much do users trust themselves or their trusted friends. It is also the reason we call our approach Recommendation with Social Trust Ensemble (RSTE). The graphical model of RSTE is shown in Fig. 2(c).
The log of the posterior distribution for the recommenda-tions is given by ln p ( U, V | R, S,  X  2 ,  X  2 U ,  X  2 V ) =  X  1  X  1  X  1 2 ( where C is a constant that does not depend on the parame-ters. Maximizing the log-posterior over two latent feature s with hyperparameters (i.e., the observation noise varianc e and prior variances) kept fixed is equivalent to minimizing the following sum-of-squared-errors objective functions with quadratic regularization terms: L ( R, S, U, V ) = 1 +  X  U where  X  U =  X  2 / X  2 U ,  X  V =  X  2 / X  2 V , and kk 2 F denotes the Frobenius norm.

A local minimum of the objective function given by Eq. (13) can be found by performing gradient descent in U i , V j ,  X  L  X  X   X  L  X  X  where g  X  ( x ) is the derivative of logistic function g  X  exp( x ) / (1 + exp( x )) 2 and B ( i ) is the set that includes all the users who trust user u i . In order to reduce the model complexity, in all of the experiments we conduct in Section 4 , we set  X  U =  X  V .
The main computation of gradient methods is evaluating the object function L and its gradients against variables. Because of the sparsity of matrices R and S , the compu-tational complexity of evaluating the object function L is O (  X  R l +  X  R kl ), where  X  R is the number of nonzero entries in the matrix R , and k is the average number of friends that Table 1: Statistics of User-Item Rating Matrix of Epinions Table 2: Statistics of Social Trust Network of Epinions a user trusts. Since almost all of the online social networks fit the power-law distribution, a large long tail of users onl y have few trusted friends. This indicates that the value of k is relatively small. The computational complexities for th e O (  X  R l +  X  R kl ), respectively, where p is the average number of friends who trust a user, which is also a small value. Ac-tually, in a social trust graph, the value of k is always equal to the value of p , which is 9 . 91 in the dataset we employ in the Section 4. Therefore, the total computational complex-ity in one iteration is O (  X  R p l +  X  R p kl ), which indicates that theoretically, the computational time of our method is linear with respect to the number of observations in the user-item matrix R . This complexity analysis shows that our proposed approach is very efficient and can scale to very large datasets.
In this section, we conduct several experiments to com-pare the recommendation qualities of our RSTE approach with other state-of-the-art collaborative filtering and tr ust-aware recommendation methods. Our experiments are in-tended to address the following questions: (1) How does our approach compare with the published state-of-the-art collaborative filtering and trust-aware recommendation al -gorithms? (2) How does the model parameter  X  affect the accuracy of prediction? (3) What is the performance com-parison on users with different observed ratings? (4) Can our algorithm achieve good performance even if users have few observed rating records? (5) Is our algorithm efficient when training the model?
We choose Epinions as the data source for our experi-ments on recommendation with social trust ensemble. Epin-ions.com is a well known knowledge sharing site and review site, which was established in 1999. In order to add reviews, users (contributors) need to register for free and begin sub -mitting their own personal opinions on topics such as prod-ucts, companies, movies, or reviews issued by other users. Users can also assign products or reviews integer ratings from 1 to 5. These ratings and reviews will influence future customers when they are about to decide whether a prod-uct is worth buying or a movie is worth watching. Every member of Epinions maintains a  X  X rust X  list which presents a social network of trust relationships between users. Epin -ions is thus an ideal source for experiments on social trust recommendation.

The dataset used in our experiments is collected by crawl-ing the Epinions.com site on Jan 2009. It consists of 51,670 users who have rated a total of 83,509 different items. The total number of ratings is 631,064. The density of the user-item rating matrix is less than 0 . 015%. We can observe that (a) Distribution of Testing Data (90% as Training Data) the user-item rating matrix of Epinions is very sparse, sinc e the densities for the two most famous collaborative filterin g datasets Movielens (6,040 users, 3,900 movies and 1,000,20 9 ratings) and Eachmovie (74,424 users, 1,648 movies and 2,811,983 ratings) are 4 . 25% and 2 . 29%, respectively. More-over, an important factor that we choose the Epinions datase t is that user social trust network information is not include d in the Movielens and Eachmovie datasets. The statistics of the Epinions user-item rating matrix is summarized in Ta-ble 1. As to the user social trust network, the total number of issued trust statements is 511,799. The statistics of thi s data source is summarized in Table 2.
We use two metrics, the Mean Absolute Error (MAE) and the Root Mean Square Error (RMSE), to measure the pre-diction quality of our proposed approach in comparison with other collaborative filtering and trust-aware recommenda-tion methods.
 The metrics MAE is defined as: where r i,j denotes the rating user i gave to item j , b r notes the rating user i gave to item j as predicted by a method, and N denotes the number of tested ratings. The metrics RMSE is defined as:
In this section, in order to show the performance improve-ment of our RSTE approach, we compare our method with the following approaches. 1. PMF: this method is proposed by Salakhutdinov and 2. Trust: this is the method purely uses trusted friends X  3. SoRec: this is the method proposed in [13]. It is a
We use different amounts of training data (90%, 80%) to test the algorithms. Training data 90%, for example, means we randomly select 90% of the ratings from Epinions dataset as the training data to predict the remaining 10% of ratings. The random selection was carried out 5 times independently. The experimental results using 5 and 10 dimensions to rep-resent the latent features are shown in Table 3.

The parameter settings of our approach are  X  = 0 . 4 for both 90% training data and 80% training data,  X  U =  X  V = 0 . 001, and in all the experiments conducted in the following sections, we set all of the parameters  X  U ,  X  V equal to 0 . 001. From Table 3, we can observe that our approach RSTE out-performs the other methods. In general, two social trust recommendation approaches SoRec and RSTE all perform better than the PMF method (only uses the user-item ma-trix for recommendations). However, the Trust method per-forms worse than the PMF method, which indicates purely utilizing trusted friends X  tastes to recommend is not ap-plicable. Among these three trust-aware recommendation methods, our RSTE method generally achieves better per-formance than the SoRec and Trust methods on both MAE and RMSE. This demonstrates that our interpretation on the formation of the ratings is realistic and reasonable.
One challenge of the recommender systems is that it is difficult to recommend items to users who have very few Figure 5: Efficiency Analysis ( 90% as Training Data) ratings. Hence, in order to compare our approach with the other methods thoroughly, we first group all the users based on the number of observed ratings in the training data, and then evaluate prediction accuracies of different user group s. The experimental results are shown in Fig. 3. Users are grouped into 6 classes:  X 1  X  10 X ,  X 11  X  20 X ,  X 21  X  40 X ,  X 41  X  80 X ,  X 81  X  160 X  and  X  &gt; 160 X , denoting how many ratings users have rated.

Fig. 3(a) summarizes the distributions of testing data ac-cording to groups in the training data (90% as training data). For example, there are a total 3,360 user-item pairs t o be predicted in the testing dataset in which the related user s in the training dataset have rating numbers from 1 to 10. In Fig. 3(b) and Fig. 3(c), we observe that our RSTE algorithm consistently performs better than other methods, especial ly when few user ratings are given. When users X  rating records are ranging from 1 to 80, our RSTE method performs much better than the Trust, PMF and SoRec approaches.
In our method proposed in this paper, the parameter  X  balances the information from the users X  own characteristi cs and their friends X  favors. It controls how much our method should trust users themselves and their friends. If  X  = 1, we only mine the user-item rating matrix for matrix factoriza-tion, and simply employ users X  own tastes in making recom-mendations. If  X  = 0, we only extract information from the social trust graph to predict users X  preferences purely fro m the friends they trust. In other cases, we fuse information from the user-item rating matrix and the user social trust network for probabilistic matrix factorization and, furth er-more, to predict ratings for the users.

Fig. 4 shows the impacts of  X  on MAE and RMSE. We observe that the value of  X  impacts the recommendation re-sults significantly, which demonstrates that fusing the use rs X  own tastes with their friends X  favors greatly improves the r ec-ommendation accuracy. No matter using 90% training data or 80% training data, as  X  increases, the MAE and RMSE decrease (prediction accuracy increases) at first, but when  X  surpasses a certain threshold, the MAE and RMSE in-crease (prediction accuracy decreases) with further incre ase of the value of  X  . This phenomenon confirms with the intu-ition that purely using the user-item rating matrix or purel y using the users X  social trust network for recommendations cannot generate better performance than fusing these two favors together.

From Fig. 4(a) and Fig. 4(b), when using 90% ratings as training data, we observe that, our RSTE method achieves the best performance when  X  is around 0.4, while smaller values like  X  = 0 . 1 or larger values like  X  = 0 . 7 can poten-tially degrade the model performance. This indicates that we need to trust more about the tastes of users X  trusted friends than their own tastes, since the training data of use r-item matrix is very sparse, which can hardly learn the accu-rate characteristics of users. In Fig. 4(c) and Fig. 4(d), wh en using 80% ratings as training data, the optimal value of  X  is also around 0.4. However, less ratings for users will lead to an overall degradation of the recommendation results.
The complexity analysis in Section 3.5 states that the computational complexity of our approach is linear with re-spect to the number of ratings, which shows that our ap-proach is scalable to very large datasets. Actually, our ap-proach is very efficient even when using a very simple gra-dient descent method. In the experiments using 90% of the data as training data, our method only needs less than 400 iterations for training, and each iteration only requires l ess than 20 seconds. All the experiments are conducted on a normal personal computer containing an Intel Pentium D CPU (3.0 GHz , Dual Core ) and 1G memory.
 Fig. 5(a) and Fig. 5(b) show the performance (MAE and RMSE) changes with the iterations. We observe that when using a large value of  X  , such as  X  = 1 or  X  = 0 . 7, at the end of the training, the model begins to overfit (especially for the RMSE), while a relatively smaller  X  , such as  X  = 0 or  X  = 0 . 4, does not have the overfitting problem. These experiments clearly demonstrate that in this dataset, an ap -proach ignoring the social trust information can cause the overfitting problem, and that the predictive accuracy can be improved by incorporating appropriate amount of social trust information.
This paper is motivated by the fact that a user X  X  trusted friends on the Web will affect this user X  X  online behavior. Based on the intuition that every user X  X  decisions on the Web should include both the user X  X  characteristics and the user  X  X  trusted friends X  recommendations, we propose a novel, effec -tive and efficient probabilistic matrix factorization frame -work for the recommender systems. Experimental analy-sis on the Epinions dataset shows the promising future of our proposed method. Moreover, the method introduced in this paper by using probabilistic matrix factorization is n ot only working in trust-aware recommender systems, but also applicable to other popular research topics, such as social search, collaborative information retrieval, and social d ata mining.

In this paper, although we employ the trusted friends X  opinions in the social trust network to make recommenda-tions for the users, we do not consider the possible diffusion s of trusts between various users. Under the circumstance tha t both the user-item rating matrix and the trust relations of a social network are very sparse, the diffusions of trust re-lations become inevitable since this consideration will he lp to alleviate the data sparsity problem and will potentially increase the prediction accuracy. We plan to employ the diffusion processes in our future work.

In many popular applications on the Web, users not only can keep a list of trust relationships, but also have the righ ts to establish a list of distrust or block relationships. If a u ser u j is in the distrust list of a user u i , most probably, it is be-cause the user u i thinks the user u j  X  X  taste is totally different from him/her. Actually, this information is very useful on the recommender systems. Unfortunately, to the best of our knowledge, no previous work can employ this information well into recommender systems. The understanding of dis-trust relations is still unclear to the researchers: We cann ot use diffusion methods to model it due to the reason that one person X  X  enemy X  X  enemy is not necessarily the enemy of this person. In the future, we plan to study the formation and nature of the distrust relations, and explicitly model them in the recommender systems.

As the exponential growth of online social network sites continues, the research of social search is becoming more an d more important. We also plan to develop similar techniques to allow users X  trusted friends to influence the users X  searc h results or query suggestions. The intuition behind this is that if a large number of our friends are searching for some-thing, it X  X  likely that we may be interested in that topic too . This would be an interesting search phenomenon to explore in social networks. We thank Dr. Haixuan Yang, Mr. Shikui Tu and Mr. Tom Chao Zhou for many valuable discussions on this topic. The work described in this paper is supported by grants from the Research Grant Council of the Hong Kong Special Ad-ministrative Region, China (Project No.: CUHK 4128/08E and CUHK 4158/08E). This work is also affiliated with the Microsoft-CUHK Joint Laboratory for Human-centric Com-puting and Interface Technologies.
