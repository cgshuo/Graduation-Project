 Well-designed indices can dramatically improve query per-formance. Including query workload information can pro-duce indices that yield better overall throughput while bal-ancing the space and performance trade-off at the core of index design. In the context of XML, structural indices have proven to be particularly effective in supporting XPath queries by capturing the structural correlation between data components in an XML document. In this paper, we pro-pose a family of novel workload-aware indices by taking ad-vantage of the disk-based P [ k ]-Trie index framework, which indexes node pairs of an XML document to facilitate index-only evaluation plans. Our indices are designed to be opti-mal for answering frequent path queries in one index lookup and efficient for answering non-frequent path queries using an index-only plan. Experimental results prove that our indices outperform the APEX index in overall throughput and excel in answering non-frequent queries, queries with predicates, and queries that yield empty results.
 H.2.2 [ Information Systems ]: Database Management X  Physical Design (Access Method) Design XML, structural index, workload, query processing
The explosive growth of data and search on the Internet and the growing demands for managing increasingly large amounts of data have helped XML emerge as the data for-mat for representing, storing, and querying semi-structured data. As this trend is likely to continue, efficient query eval-uation techniques for XML must be developed. The struc-tural correlation between XML data components, as seen in Figure 1, has required the development of structural indices for XML. These structural indices have proved to be of sig-nificant importance in improving the performance of XPath queries, which are at the core of all XML queries.
Good index design re-quires a careful balance be-tween index size and the precision it may provide in query evaluation. Workload information can be lever-aged to mitigate the trade-off between index size and precision, producing an in-dex that yields better overall throughput, while maintain-ing its footprint under con-trol. Numerous structural indices (including workload-aware approaches) have been proposed [5], however, there is room for improvement in the areas of space and query efficiency.
 Our research goal is to design workload-aware indices for XML that are (1) optimal for answering frequent path queries and efficient for answering non-frequent path queries; (2) ef-ficient in identifying queries that yield empty results; (3) efficient in updates induced by the changes in either the workload or the data itself; (4) efficient in size and easily adjustable to space allowance requirements. We define an XML document as X =( V, Ed, r, X  ), with V the finite set of nodes, Ed  X  V  X  V the set of parent-child edges, r  X  V the root, and  X  : V  X  X  a node-labeling function into the set of labels L .

Given an XML document X and a number k  X  N ,we define DownP airs ( X ,k )asthesetofnodepairs( m, n )such that (1) length ( m, n )  X  k ,and(2) m is an ancestor of n . A label-path LP ( m, n ) is defined as the unique sequence of labels between two nodes m and n in V ,withthe k-label-path LP ( n, k ) of a node n  X  V and k  X  N defined as the label-path of the unique downward path of length l into n where l = min ( height ( n ) ,k ). We define DownP aths ( X ,k )asthe set of k-label-paths of the node pairs in DownP airs ( X ,k ). Two node pairs ( m 1 ,n 1 )and( m 2 ,n 2 )are P [ k ]-equivalent if (1) ( m 1 ,n 1 )and( m 2 ,n 2 )  X  DownP airs ( X ,k )and(2) LP ( m 1 ,n 1 )= LP ( m 2 ,n 2 ).

The P [ k ] -partition of an XML document X is the parti-tion of the node pairs in X induced by the P [ k ]-equivalence relation. Each partition class C in the P [ k ] -partition can be associated with the unique k -label-path lp of the node pairs in C . Additionally, a label-path lp uniquely identifies a P [ k ]-partition class C , denoted as P [ k ][ lp ].
XPath queries are the core of almost all XML query lan-guages. The path semantics of the core XPath expressions that are frequently studied [1] are defined as: The node semantics of an XPath algebra expression E on X , denoted E nodes ( X ), is the set { n | X  m :( m, n )  X  E (
The downwards algebra D , as studied in [2, 4], contains only label matching and downward navigation and is the simplest form of a path query. We further define the D [ k ] expressions to be the D expressions with no more than k  X  D [ k ] queries can be answered easily under path semantics by applying the union operation to the P [ k ]-partition classes.
Theorem 2.1. Let X be an XML document and E an expression in D [ k ] ,Let LP S ( E, X ) be the set of label-paths in
X that satisfy the node-labels and structural containment relationships specified by E .Then,
Given a set of XML queries Q , we define the workload to be a set of D queries whose appearance is above a certain threshold. Since D queries can be represented by label-paths , we call it frequent label-path set , abbreviated as F .Given adocument X and a workload F , we are interested in de-signing workload-aware indices for X that support efficient evaluation of core XPath queries with a very small space and maintenance overhead.

To achieve this, we take advantage of the P [ k ]-Trie index framework [2], in which all DownP airs ( X ,k )ofanXML document X are indexed. The P [ k ]-partition classes of are organized in a trie structure with the inverted label-path ( lp  X  1 ) as an index key. Because the P [ k ]-Trie index indexes node pairs, any core XPath query can be decomposed into D [ k ] sub-queries, which can be answered by an index scan over the P [ k ]-Trie index, and subsequent natural joins that compute the result of the query. Additionally, we take ad-vantage of two important properties of the P [ k ]-Trie index: (1) the independence of the trie branches in terms of the degree of local bi-similarity; (2) the suitability of the Trie index for answering all core XPath queries and its good performance with a modest k  X  1 value. Thus, we propose a family of workload-aware Trie indices that index a frequent label-path set and a selected set of complementary label-paths that include all paths of length  X  k (with a rather small k value).
Where  X  is  X  ,  X  or  X  .
Definition 3.1. Given an XML document X and a work-load F , the k-extension of F in X ,denoted F X ,k + (or simply F + ), is defined as F X ,k + = F  X  DownP aths ( X ,k ) .
The WP [ k ]-Trie index is the simplest form of a P [ k ]-Trie based, workload-aware index. It indexes the label-paths in the k-extension of a given workload. Figure 2 shows a WP [1]-Trie index for the XML document in Figure 1.
The lookup function of a WP [ k ]-Trie index takes a label-path query lp as input and retrieves the extent of the index entry with key lp  X  1 ,or  X  if lp /  X  DownP aths ( X ,k ). To assist in effective query optimization, the WP [ k ]-Trie index also provides a probe function, which takes a label-path query lp as input and returns the label-path that is the best (longest) match to lp ,or  X  when there is enough information in the index to determine that lp ( X )=  X  .

The P [ k ]-Trie index is a special case of the WP [ k ]-Trie index where F  X  DownP aths ( X ,k ). Thus, the WP [ k ]-Trie index is also capable of answering all core XPath queries over X using index-only plans. Furthermore, it can answer path queries in F + with one index lookup. However, there is still room for improvement in terms of index size and its ability in efficiently identifying queries that yield empty results and answering non-frequent path queries longer than k .
By indexing only a subset of the downward label-paths beyond length k ,the WP [ k ]-Trie index no longer  X  X ully rep-resents X  the structural distribution of the XML document, resulting in over-shredding of queries and unnecessary index lookups. To address this, we define the notion of label-path representativeness at a structural and instance level.
Definition 3.2. Given a label-path lp  X  DownP aths ( X ,k ) , | lp | = k , and a label-path set S , we say that lp is structurally represented by S with respect to X ,denoted lp  X  s S ,if  X  lp  X  DownP aths ( X ,k +1) such that lp is a proper suffix of lp ,  X  lp  X  S such that lp is a suffix of lp .

GivenanXMLdocument X and a workload F , for every lp that is either in F + or is the suffix of a label-path in F can easily compute the boolean flag struct ( lp )= lp  X  s This flag will allow us to identify more queries that yield empty results than the WP [ k ]-Trie index by applying the following:
Lemma 3.1. Given an XML document X ,a WP [ k ] -Trie index T on X that is sensitive to a workload F , and a label-path query lp such that lp /  X  F + ,let lp s be the longest proper suffix of lp in F + . Then, we can conclude that lp ( X )= lp
Let us recall Theorem 2.1 stated in Section 2. We can sim-plify the evaluation of query E if the label-paths in LP S ( E, are all indexed.

Definition 3.3. Given an XML document X ,asetof label-paths S and a label-path lp  X  DownP aths ( X ) ,wesay that lp is represented at the instance level by S with respect to
X ,denoted lp  X  i S , if there exists a label-path set S  X  { lp | lp  X  S  X  lp is a suffix of lp } , such that lp ( X )= S
Note that S does not necessarily include all label-paths that have lp as their suffix, but rather, there exists a smallest S which includes only the  X  X losest X  label-paths that have lp as their suffix. To summarize our study of label-path repre-sentativeness, we define the notion of full representation :
Definition 3.4. Given an XML document X ,asetof label-paths S and a label-path lp  X  DownP aths ( X ) ,wesay that lp is fully represented by S with respect to X ,denoted lp  X  S ,if lp  X  s S  X  lp  X  i S .

Example 3.1. Consider the 1-extension F X , 1+ of F = { ( A, A, B, C, D ) , ( A, F, B, C, D ) } on the XML document shown  X  DownP aths ( X , 3) ,ofwhich lp is a proper suffix, /  X  F On the other hand, label-path ( A, B, C, D )  X  i F X , 1+ we cannot compute the answer to query A/B/C/D through the union of other label-paths in F X , 1+ .

We are now ready to define the notion of a self-sustaining label-path set and the self-sustaining closure of a label-path set.

Definition 3.5. Given an XML document X and a label-path set S , S is self-sustaining with respect to X if for each label-path lp that is a suffix of a path in S , it is the case that (1) lp  X  S or (2) lp  X  S .

Definition 3.6. Given an XML document X and a label-path set S ,the self-sustaining closure of S ,denoted S ( (or simply S  X  ), is the minimal set among all sets that has S as a subset and is self-sustaining with respect to X .
The AW [ k ]-Trie index of an XML document X ,sensi-tive to workload F , indexes the label-paths in ( F + )  X  includes annotations that reflect the structural representa-tiveness property for the suffix paths of every label-path in ( F
Example 3.2. Figure 3 shows an example AW [1] -Trie index of the XML document X shown in Figure 1. In this in-dex structure, every node has an associated struct flag. For example, struct (( A, A )) = TRUE , since there is no label-path in DownP aths ( X ) that has ( A, A ) as a proper suffix; struct (( B, C, D )) = FALSE , since the label-path ( E, B, C,D ) of DownP aths ( X ) is not in ( F X , 1+ )  X  . Label-paths lp ( B, C, D ) and lp 2 =( A, B, C, D ) , which were not indexed in the WP [1] -Trie index are indexed here since lp 1  X  s F X
We define two lookup methods for the AW [ k ]-Trie index: (1) the direct lookup function is the same as the lookup in the WP [ k ]-Trie index; (2) the sub-tree lookup uses Theo-rem 2.1 to find all the  X  X losest X  label-paths lp i in the sub-tree rooted at the index entry associated with lp and computes lp ( X ) under node semantics.

The probe function of the AW [ k ]-Trie index takes a label-path as input and returns the best (longest) label-path for direct lookup, and the best label-paths for sub-tree lookup. The AW [ k ]-Trie index is better equipped than the WP [ k ]-Trie index in its ability to identify queries that yield empty results and answer non-frequent path queries longer than k , due to the introduction of the struct flag and the sub-tree lookup. However, there is still room for improvement in terms of index size.

We propose a variant of the AW [ k ]-Trie index to further improve space efficiency with a minimum impact to query performance.

GivenanXMLdocument X and a workload F , we define the restricted k-extension of F , denoted F X , (1 ,k )+ ,asthe union of F and all downward label-paths in X that are of length 1 and k .The W [ k ]-Trie index indexes all label-paths in the self-sustaining closure of F X , (1 ,k )+ , with annotations that indicate the structural representativeness of the label-paths in ( F X , (1 ,k )+ )  X  and their suffixes. The structures of the AW [ k ]-Trie index and the W [ k ]-Trie index are exactly the same for label-paths with length  X  k . A label-path lp with length &lt;k will only be indexed in the W [ k ]-Trie index if (1) lp  X  F , or (2) its length is 1, or (3) lp does not pass the instance-level representativeness test in ( F X , (1 ,k )+ fore, the W [ k ]-Trie index is much more  X  X parse X  on the top k levels and much smaller in size when compared to its AW [ k ]-Trie counterpart, but it bears the same query evaluation power in answering frequent path queries and identifying queries that yield empty results.

Figure 4 shows an example W [1]-Trie index for the docu-ment X shown in Figure 1. Note that there is no index entry associated with any label-paths of length 0 (except for (A) which fails the instance-level representativeness test) since none of them are part of ( F X , (1 , 1)+ )  X  .
We compared the workload-aware Trie indices against each other and against two existing indices: (1) the P [ k ]-Trie index [2], a non workload-aware, structural index, and (2) APEX [3], a workload-aware structural index that claims to provide index-only query evaluation plans for any label-path query. We implemented all indices in the Timber na-tive XML database system [6]. We present the results of the experiments conducted on a NASA XML document that contains 1.4M nodes, a workload that combines longer and shorter label-paths (w.r.t. k ), and a query set that contains 10 automatically generated queries that honor the workload.
Among the Trie index family, the index size (Figure 5(a)) is directly correlated to the k parameter. The sizes of the WP [ k ]-Trie and the AW [ k ]-Trie indices are comparable to the size of the P [ k ]-Trie index with the same k value. Most importantly, the W [ k ]-Trie index is significantly smaller than other indices in the Trie family with the same k value, with an average 35% decrease over the P [ k ]-Trie index, and only a 25% increase over the APEX index with the same workload.
The ultimate goal of our workload-aware Trie index is to improve the overall query throughput when workload infor-mation is available. Figure 5(b) shows how the workload-aware Trie indices clearly outperform the P [ k ]-Trie index and APEX in evaluating our query set. More importantly, our workload-aware indices perform very well with a small k parameter, making them a perfect solution for improving query performance when the available space is limited.
We attribute the performance gain to the fact that our workload-aware indices can facilitate efficient processing for different types of queries. The workload-aware Trie indices and APEX perform equally well on frequent queries, out-performing the P [ k ]-Trie for queries longer than k .The Trie indices outperform APEX on non-frequent path queries and queries with predicates (such as Q09 in Figure 5(c)), as longer sub-queries can be evaluated, while APEX can only evaluate sub-queries of length 0, resulting in multiple joins. In this paper, we: (1) take advantage of the disk-based P [ k ]-Trie index [2] and propose a family of workload-aware Trie indices for indexing frequent label-paths while main-taining efficient support for non-frequent queries; (2) intro-duce the concept of structural and data instance representa-tiveness of a set of paths with respect to an XML document to guide the selection of the complementary label-path set and the annotation of the index structure; (3) propose a powerful probe function for the AW [ k ]-Trie index, which opens the door for more sophisticated query optimization strategies; and (4) perform extensive experiments to com-pare the proposed indexing and query evaluation techniques with existing techniques in terms of the space footprint and query performance. [1] M. Benedikt, et al . Structural properties of XPath [2] S. Brenes, et al . Trie Indexes for Efficient XML Query [3] C.-W. Chung, et al . APEX: An Adaptive Path Index [4] G.H.L.Fletcher, et al . A Methodology for Coupling [5] G. Gou, et al . Efficiently Querying Large XML Data [6] H. Jagadish, et al .TIMBER:ANativeXML
