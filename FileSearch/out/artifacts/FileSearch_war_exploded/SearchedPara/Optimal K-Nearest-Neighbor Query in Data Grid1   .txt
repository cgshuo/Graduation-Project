 high performance k -NN query methods becomes a critically important research topic. 
Grid technology, especially data grid, provides a new and high performance com-puting infrastructure [1] which motivates us to speed up a query performance by using grid techniques. Compared with a CG k NN query algorithm proposed in [5], the paper considers an optimal grid-based distributed k -NN query(opGkNN) that mainly focuses on the optimal enabling techniques to further improve the query efficiency. 
As discussed in [5], for the grid-based similarity query, the challenges include two contributions of this paper are as follows: k -NN query.  X  Extensive experimental studies are conducted to validate its query efficiency. The rest of paper is organized as follows. Preliminary work is given in Section 2. In Section 3, two enabling techniques, viz., the adaptive load balancing scheme facilitate a fast k -NN search over data grid. In Section 4, we propose an opG k NN query processing algorithm. In Section 5, we perform comprehensive experiments Section 6. Definition 1. A data grid is a graph which is composed of Node and Edge, formally representing the network bandwidths for data transfer.
 logically divided into three categories: the query node(Nq), data nodes(N d ) and exe-node, for i  X  [1,  X  ] and j  X  [1,  X  ] (cf. Figure 1). throughout the rest of this paper is first summarized in Table 1. mation of minimal query radius , respectively. The purpose of them is to minimize the transfer cost and maximize the query parallelism. 3.1 Dynamic Load Balancing Scheme in Data Nodes  X  A QP-Based Approach to Estimate the Processing Capacity of Each Node parallel systems, the data grid is a heterogeneous environment in which the processing this challenge. for m users and x nodes, we can obtain a table called the U ser-T ime (UT) table. reciprocal to the average corresponding qu ery processing time, which is shown below: function of  X  i : 
Based on the above analysis, for the i-th node, the percentage of its processing ca-pacity can be derived as follows: where i  X  [1, x ] and j  X  [1, m ] .
 Algorithm 1. Query polling Algorithm Input:  X  : the vector set, the x nodes, m users; Output:  X  i : the processing capability of x nodes ; 1. for i :=1 to x do 2. for j :=1 to m do 4. record the corresponding time T ij; 5. the processing capacity of the i -th node (  X  i ) can be obtained by Eq. (1); 6. the percentages of the processing capacity of each node can be obtained by Eq. (2);  X  An Optimal SD-Based Data Partition Scheme heterogeneous nodes since the processing capacity of each node is different. Algorithm 2. Vector allocation in data nodes Input:  X  : the vector set, the  X  data nodes; Output:  X  (1 to  X  ) : the placed vectors in data nodes ; 2. for j :=1 to  X  do distance respectively; 4.  X  ( j ) is deployed in the j -th data node; 5. end for 3.2 Histogram-Based Estimation of MQR Therefore we propose a novel histogram-based approach to estimate the value of MQR for opG k NN queries. cluster C j partially intersects with the range query  X  ( Vq , r k ). from cluster C j : r + X  = . The estimated number of vectors retrieved from C j is: 
The query area in Figure 3(b) is represented by a shaded circle that is contained in of the number of vectors contained, therefore an overestimation of radius r k . Algorithm 3. k-NN radius estimation Input : Vq , k , S : Maximum histogram bin of any cluster C j Output : Estimated radius r k sum  X  0; r k  X  r B for i =1 to S do for each cluster C j do r k  X  i*r B 5. if ( d ( O j , Vq )+ r k  X  CR j ) then sum  X  sum + 6. if ( d ( O j , Vq )+ r k &gt; CR j ) then sum  X  sum + 2 (,) || jk jq j 7. if ( sum &gt; k ) and flag (contained)=TRUE then return r k , break; 8. if flag (intersected)=TRUE and ( sum&gt;k ) then return r k , break; 5-9 are executed in parallel. Algorithm 4. opG k NNSearch( Vq, k ) Input : a query vector Vq, k Output : the query result S 1. r  X  0,  X  X  X  X  X  ,  X  X  X  X  X  X  ; /* initialization */ 2. a query request is submitted to the query node N d ; 3. the minimal query radius ( R min ) is obtained by the histogram; 4. r  X  R min ; 5.  X  X  X  X  GVReduce ( Vq , r ); 6. the  X  nodes are discovered by the GRMS as the executing nodes; 7. the candidate vector set  X   X  is sent to the  X  executing nodes by hash mapping; 8.  X  X  X  X  X  Refine (  X  X  ,Vq , r ); 9. the answer vector set  X  X  X  is sent to the query node Nq; 11. remove the (  X   X  X  X   X  -k-1) vectors from  X  X  X  which are farthest to Vq 12. else if (  X   X   X  X   X  &lt; k ) then 13. while (  X   X   X  X   X  &lt; k ) 14. r  X  r +  X  r ; 15.  X  X  X  X  GVReduce ( Vq , r ); 17.  X  X  X  X  X  Refine (  X  X  ,Vq , r); 18. the answer vector set  X  X  X  is sent to query node Nq; 20. return  X  X  X  In this section, to verify the efficiency of the proposed method, we conduct two simu-lation experiments to demonstrate the performance of the opG k NN method. We have implemented the iDistance[3]-based vector set reduction algorithm in C language and which are uniformly distributed, with each dimension X  X  value ranging between 0 and 1. 5.1 Effect of VSR formance of the k-NN query processing. Two methods are performed and compared for this purpose. The first does not adopt the VSR algorithm and the second uses this the performance gap becomes larger since the candidate vectors which are filtered by neglected. 5.2 Effect of Histogram In the last experiment, we study the effect of histogram on the performance of distrib-as the experimental data and comparatively perform the two experiments by using two schemes: adopted and not adopted . In Figure 5, the speedup gap between two schemes estimation of minimal query radius can effectively boost up the query performance by significantly reducing the loop time of range searches. different bandwidth of nodes in the data grid. Two optimal enabling techniques, viz., essing capacity estimation of each node and the start-distance(SD)-based data parti-proposed opG k NN method. 
