 Historically, environmental, hydrographic, meteorological, and oceanographic data have agencies as well as by universities around the Gulf of Mexico (GOM). Currently, users have to manually interact with these large collections of Internet data sources, determine which ones to access and how to access, and manually merge results from different sources. Without an adequate system and personnel for managing data, the magnitude of barrier to the GOM research. We intend to answer complex queries by developing mediator-based data integration systems which using a uniform interface to access the underlying distributed and heterogeneous sources. 
In mediator systems, the data sources to be integrated generally have different limitations and ways that users have to follow to query on their Web interface. For example, to retrieve data from TCOON 1 and TABS 2 , TCOON requires at least one TABS mandates only one station ID. 
All the current methods [3,6,7] demand that the mediator queries satisfy the query impractical in our data integration on the GOM. Unlike the simple bookstore database examples in [3,6,7], each GOM database measures and collects various environmental, biological, or ecological information at different locations and different sample rates. Although some attributes are measured by multiple GOM databases, no two GOM databases contain the same values for these attributes because they are measured at usually limited and incomplete. As a consequence, even partial results are highly the union operator. For example, to retrieve data from TCOON and TABS, we must select at least one TCOON station and only one TABS station, but each station is exclusive, belonging to TCOON or TABS but not both. 
The framework in this paper is developed from that proposed by Yerneni, et al. in [7]. Our framework extends the method in [7] in several aspects. First, it allows users to select single or multiple values for an attribute. For example, the method in [7] only permits the single value selection for an attribute, which can not emulate multiple value selections for TCOON X  X  station ID or series identifier attribute. Second, it allows the partial answer from a subset of data sources, if not all data sources satisfy the query conditions for the union operator. Correspondingly, we develop the preprocessing technique to handle the partial answer. And finally, we employ the new attribute adornments (see Section 3) for the design of a mediator X  X  user interface, which is not discussed in any of the existing methods. Most research projects in the area of capability description in the mediator systems are focusing on the capability description of the underlying data sources. For example, TSIMMIS [1] and Information Manifold [2] only allow the capability description of data sources in terms of conjunctive queries, while DISCO [5] and Garlic [4] allow queries in both the disjunctive and conjunctive expressions. But these systems do not compute the query capabilities of the mediators. So users have to follow the trial and error process to figure out the queries that can actually be answered by the mediator. In addition, it is impossible to take advantage of treating the existing mediators as sources for new ones [3]. 
There are relatively fewer research efforts on the capability description of the mediators, although it is an important research issue. Tang, et al. [6] developed capability object integration algebra to compute the mediator capabilities from the capabilities of underlying data sources. Since the proposed algebra can not distinguish between mandatory and optional attribute values/list of values, their method lacks of expressive power in real-world sources. Pan, et al [3] improved [7] by permitting multiple values and several comparison operators instead of only  X = X  operator for union operator and do not consider the interface design issue for the mediators. 
Our framework is most similar to the one proposed in Yerneni, et al. [7]. But the framework in [7] requires such stringent mediator query conditions that some queries not satisfying any mapping function are still answerable. In addition, the framework in [7] offers a very limited mechanism to represent the query capabilities of sources and mediators. In this section, we present our framework to describe the query capabilities of data sources and mediators. We extend the method proposed in [7] to tackle more complicated real-world situations. We allow users to select multiple values for an attribute, and allow the answers to come from a subset of the data sources for the union operator. The sources to integrate. When a query is submitted, the mediator translates the query into a set of relevant sub-queries associated with underlying data sources, and then the mediator merges the sub-query results via the pre-defined operations, union, join, selection, or projection. In addition, three techniques affecting the query capability of a mediator are preprocessing, post-filtering, and pass bindings. The details of the above three techniques can be found in Section 4, 5, and 6, respectively. 
On the Web, data sources typically publish their query processing capabilities through query forms or base-view templates, which are filled out by users and submitted to the data sources as queries. Each data source may have more than one attribute adornments to specify how the attributes participate in supported queries. We following eleven adornments: 
The first seven adornments are used to model both the data source and mediator X  X  query capabilities, while the last four adornments are employed mostly for the choose to keep the last four adornments for two reasons: (1) we intend to emulate the underlying data sources X  user interface as much as possible; (2) the users do not have to remember the mandatory/optional list of values in the underlying data sources. On l l  X  b or l  X  f . 
Next, we focus on computing mediator view templates for two base views. Both mediator views and base views as well as the associated adornments are represented attributes X , Y , and Z , and the associated adornments are b , f , and u , respectively. An instance of the source is D ( x i , y i , z i ). underlying data sources for the union operator, preprocessing means we break down the query into sub-queries and submit them to the appropriate data sources, but do not carry out any post-processing such as post-filterings and pass bindings. The same sub-query may be submitted more than once because we allow the users to choose multiple values for an attribute. 4.1 Union Views The symmetric Table 1 presents the union-view attribute adornment template computed from the two base-view attr ibute adornments. For example, the combination of f and b is f because even if the data source with the b adornment can not execute without specifying a valu e, the second data source with f adornment can still return some partial results. Another example is that the combination of u and b is f because we can still obtain some partial answer from one or both two data sources whether or not we specify a value for the attr ibute. If we specify a value, the partial answer comes from the data source with the adornment b only, otherwise the partial answer is returned by another data source with the adornment u . The combination of u specifying an attribute value; otherwise the sub-query is submitted to the data source with the adornment f only. 
When only one attribute adornment contains a list of single or multiple choices, users are able to specify a value or choose value(s) from the list. The combination of f specify a value not in the list l5 , leave it blank, or choose a value from the list l5 . For the first two options, the query is submitted only to the data source with the f adornment, while for the third option, the query is submitted to the both data sources. sub-query is submitted only to the data source with the adornment u . the user selects a value x i  X  l 5 for X and leaves both Y and Z unspecified in the union view, the sub-query is submitted to both data sources. For all the other values of X , Y , and Z , at most one of D 1 or D 2 can answer the sub-queries. When both base-view attribute adornments have the lists, we union the two lists. The two rules are (1) the combination of s (single) and m (multiple) becomes m , and (2) the combination of c (mandate) and o (option) becomes o . For example, the broken down to the sub-queries, which are passed over to the data source with the adornment mc [ l 6 ] at most once, and the data source with the adornment sc [ l 1 ] zero or multiple times. { n n , then the sub-query with the values n 3 and n 4 is submitted to D 2 once, and the sub-query is submitted to D 1 twice with the value n 2 and n 3 , respectively. If the user selects n and n 5 , then the sub-query with the values is only submitted to D 2 . 4.2 Join Views A mediator with the preprocessing technique treats a query on a join view as follows. First, the mediator query is broken down to the sub-queries and passed to the each corresponding joining base view, then the re sults from each base view are joined. For answers are required from both joining base views, which is different from the union-view templates in Table 1 because a union-view template allows the partial answer from only one base view. As a result, the computation of attribute adornments in a join-view template is different from that in a union-view template. 
To join two base views, the adornments of all the non-join attributes are simply copied over from the base view templates. The adornment computation of the join attributes in two base view templates is shown in Table 2. 
In Table 2, when both base-view attribute adornments must choose from their given lists, the two lists are intersected. On the other hand, when both base-view adornments offer the optional choices from the given lists, the two lists are unioned multiple chosen values from l 1  X  l 6 can be sent one by one to the base-view with the adornment sc [ l 1 ], then results are joined with those from the base-view with the adornment mc [ l 6 ]. Another example is that the base-view adornments so [ l 3 ] and so [ l 7 ] that only appears in one of the two base-view lists, another base view templates can still be queried by specifying no value for the attribute. 
When one base-view adornment has the mandatory list and the second base-view combined adornment is the same as the base-view adornment with the mandatory list. chosen from l 1 , we can always conduct the sub-query on another base view with the attribute adornment mo [ l 8 ] by disregarding any value from l 8 . base view with the adornment so[ l 7 ] or mo [ l 8 ] is treated with no value specified for the with so [ l 7 ] and mo [ l 8 ] are so [ l 7 ] and mo [ l 8 ], respectively. 4.3 Projection and Selection Views Unlike the union or join attributes which occur in both the underlying data sources, the projected attributes only appear in one of the two underlying data sources. When receiving a query on a projection view, the mediator passes the derived sub-queries down to the corresponding base views without specifying values for the hidden base attributes, which only appear in the base views. So during the projection, we do not produce a projection-view template if any of the hidden attributes has a b , sc , and mc adornment in a base-view template. We can create projection-view templates as long as the hidden attributes have the f , so , mo , or u adornments in the base-view templates. The created projection-view templa te simply copies the projected attribute adornments from the base-view template. 
Similar to the projection view, the selection view attributes only appear in one of the two base views. A selection-view query is processed by passing it down to the underlying base view and applied the selection predicate on the results of the base view. Therefore, a selection-view is generated by copying the corresponding base-view template. In this section, we present a post-processing technique, post-filtering, which enables the mediators to support more queries than the ones that only employ a preprocessing technique. Post-filtering means that the returned results from a base view can be filtered according to the pre-specified attribute values. 5.1 Union Views Table 3 shows the new mapping function for the union of the attribute adornments in two base-view templates. In Table 3, we follow the same notation defined in Section 3. The essential differences between the mapping function of Table 3 and the mapping function used in Table 1 are the treatment of the u adornment as well as so and mo adornments. When the attribute adornment of a data source is u , the mediator then filter out the results that are not supported by a value optionally specified by the mediator query for this attribute in the post-processing step. As a result, the u adornment is treated the same way as the f adornment. For example, the combination whether or not the value is in l 7 , the results from the data source with the u adornment can be filtered in the post-processing step using the given value. Similarly, the union-view combination of so or mo adornments with other adornments can be computed. 5.2 Join Views The computation of join-view templates (see Table 4) for two base views using preprocessing and post-filtering techniques is similar to that (see Table 2) for two base views using only preprocessing techniqu e. The differences between Table 4 and Table 2 lie in the treatment of u , so , and mo . When both base view adornments are so or mo , the mediator can start a query on base views without specifying a value for this the post-filtering step. The treatment of u with so or mo is similarly defined. 5.3 Projection and Selection Views The computation of projection-view templates is similar to what we have discussed in Section 4.3. The differences are when we use the post-filtering technique to handle the projected attribute adornments u , so , and mo , which are changed to f , fso , and fmo adornments respectively in the projected-view template. 
In the computation of selection view templates, the selected attribute adornments u , attribute adornments, such as f , b , sc , and mc , are copied from the base-view template. Pass binding is a technique that passes values from one base view to another base view for the common attributes in both base views. By combining the preprocessing, post-filtering, and pass binding techniques, we can answer more user queries as well as obtain more comprehensive query results. Since the attribute values returned from one base view query can be passed to the next base view query to satisfy the join requirements, the order to execute the sub-queries is important. 6.1 Union Views In the union view, union by pass binding uses the same mapping functions as presented in Table 3. With the preprocessing and post-filtering techniques, the query M ( x 1 , y 1 , Z ) can only retrieve partial result from D 2 because the query condition for D 1 is not satisfied. With the pass binding, results can be obtained from both D 1 and D 2 . To retrieve the answer Furthermore, the mediator can pass the Z attribute values from D 2 to D 1 . In particular, query provides the answer to the query M ( x 1 , y 1 , Z ). 
The query in Example 3 is not answerable by the existing methods [3,6,7] because the existing methods require the mediator queries to satisfy the query conditions of all the underlying data sources, but can be answered by using the combination of preprocessing technique and partial results from the underlying data sources. 6.2 Join Views The mapping function for computing the join attribute adornments is presented in Table 5. In particular, the changes come from joining a mandatory adornment b , sc , or mc with an optional adornment f , so , or mo as well as u . ( u ), P ( b )). For the attribute Z in the above join-view mediator M , the user may choose query D 1 ( x 1 , Y , Z ) can be executed multiple times by bind passing each value z i of Z step 1and each running of D 1 ( x 1 , Y , z i ) in step 2. In our study, we combine two existing coastal wide data collection platform (DCP) networks: The Texas Coastal Ocean Obse rvation Network (TCOON) and The Texas Automated Buoy System (TABS). 7.1 Mediator Schema for TCOON and TABS where sid is the station identification, date and time are the month/date/year and hour: minute of the measurement, ser is the series identifier, and smv is the value of a series identifier. The ser attribute takes one of the 12 values, pwl (primary water level), sig (water temperature), wsd (wind speed), wgt (wind gust), wdr (wind direction), bpr (barometric pressure), bat (battery voltage), cla (calibration temperature A), clb (calibration temperature B). The TABS database contains three tables, velocity, meteorology, and buoy system. to the page limit, we do not explain every attribute in the TABS database. Interested readers please refer to TABS ( http://tabs.gerg.tamu.edu/Tglo/ ). 
From the above four tables from two databases, it is easy to identify that both database but are a subset of a list of values that ser may take in TCOON database. Observation and Facility based on the Global-As-View (GAV) approach [1]. The first table contains the oceanic observational data and the second table the hardware device information. The Observation is obtained by union of Velocity and Meteorology Velocity and Meteorology tables are inner joined together. 
Observation ( sid , date , time , ser , smv , wtd , par , relhum ) :-( Velocity ( sid , date , time , wtd , wdr , wtp ) JOIN UNION ( Tcoon ( sid , date , time , ser , smv ) AND ( ser in ( X  X wl X ,  X  X ig X ,  X  X ut X ,  X  X tp X ,  X  X tp X , UNION ( Tcoon ( sid , date , time , ser , smv ) AND ( ser in ('bat', 'cla', 'clb')) 7.2 Query Capabilities of the Mediator for TCOON and TABS To retrieve data from TCOON, users must choose at least one station from a station { X  X wl X ,  X  X ig X ,  X  X ut X ,  X  X tp X ,  X  X tp X ,  X  X sd X ,  X  X gt X ,  X  X dr X ,  X  X pr X  X  and l 3 is {'bat', 'cla', 'clb'}. specified. As a result, the query capability of the base-view TCOON is expressed as Tcoon ( sid ( mc [ l 1 ]), date ( f ), time ( u ), ser ( mc [ l 2  X  l 3 ]), smv ( u )). 
The TABS website provides a query form that allows users to extract data by specifying one station ID from the station list l 4 . The attribute date is optional and all the other attributes can not be specified. So the query capabilities of base-view TABS 
To compute the query capabilities of the mediator, we apply the union-view only one of the two databases (such as par ). The computed results are as follows: In the previous sections, we have presented the computation of a mediator X  X  template in order to determine answerability of the user-issued mediator queries. However, as illustrated in Example 5, a mediator query may still not be answerable even if the query satisfies the mediator template for the union view. at least one value for X to support a query and D 2 needs at least one value from the list l to provide some answer. 
From the above example, we can see that the minimum requirement to answer a union-view mediator query is to satisfy the query conditions of at least one data source. For example, to answer Example 5, we should at least specify a value for X in D or choose a value from the list l 5 in D 2 . 
The mapping functions computed in [7] are the sufficient conditions, which guarantee a query to be answerable if it satisfies the union-view template. But those answerable. The mapping functions presented in the tables of this paper can not guarantee that a mediator query is answ erable because the presented mapping functions only consider the union of two attribute adornments but not the combination of multiple attribute adornments. But those functions give the necessary conditions to answer a mediator query. 
On the other hand, the mapping functions for the join-view templates in this paper present the minimum conditions to guarantee the answerability of a mediator query, while the functions defined in [7] are either too stringent (such as conservative templates ) or too loose (such as liberal templates ). In this paper, we develop a framework to handle the partial results from the underlying data sources using the preprocessing technique. In addition, we design new attribute adornments to handle interface design when computing query capabilities of mediators. The framework is proposed to integrate a large collection of data sources from the GOM. Although we do not present the computation of mediator view templates for three or similar to [3,7]. 
