 Word alignment is the task of identifying corre-sponding words in sentence pairs. The standard approach to word alignment employs directional Markov models that align the words of a sentence f to those of its translation e , such as IBM Model 4 (Brown et al., 1993) or the HMM-based alignment model (Vogel et al., 1996).

Machine translation systems typically combine the predictions of two directional models, one which aligns f to e and the other e to f (Och et al., 1999). Combination can reduce errors and relax the one-to-many structural restriction of directional models. Common combination methods include the union or intersection of directional alignments, as well as heuristic interpolations between the union and intersection like grow-diag-final (Koehn et al., 2003). This paper presents a model-based alterna-tive to aligner combination. Inference in a prob-abilistic model resolves the conflicting predictions of two directional models, while taking into account each model X  X  uncertainty over its output.

This result is achieved by embedding two direc-tional HMM-based alignment models into a larger bidirectional graphical model. The full model struc-ture and potentials allow the two embedded direc-tional models to disagree to some extent, but reward agreement. Moreover, the bidirectional model en-forces a one-to-one phrase alignment structure, sim-ilar to the output of phrase alignment models (Marcu and Wong, 2002; DeNero et al., 2008), unsuper-vised inversion transduction grammar (ITG) models (Blunsom et al., 2009), and supervised ITG models (Haghighi et al., 2009; DeNero and Klein, 2010).
Inference in our combined model is not tractable because of numerous edge cycles in the model graph. However, we can employ dual decomposi-tion as an approximate inference technique (Rush et al., 2010). In this approach, we iteratively apply the same efficient sequence algorithms for the underly-ing directional models, and thereby optimize a dual bound on the model objective. In cases where our algorithm converges, we have a certificate of opti-mality under the full model. Early stopping before convergence still yields useful outputs.

Our model-based approach to aligner combina-tion yields improvements in alignment quality and phrase extraction quality in Chinese-English exper-iments, relative to typical heuristic combinations methods applied to the predictions of independent directional models. Our bidirectional model G = ( V , D ) is a globally normalized, undirected graphical model of the word alignment for a fixed sentence pair ( e , f ) . Each ver-tex in the vertex set V corresponds to a model vari-able V i , and each undirected edge in the edge set D corresponds to a pair of variables ( V i ,V j ) . Each ver-tex has an associated potential function  X  i ( v i ) that assigns a real-valued potential to each possible value v of V i . 1 Likewise, each edge has an associated po-tential function  X  ij ( v i ,v j ) that scores pairs of val-ues. The probability under the model of any full as-signment v to the model variables, indexed by V , factors over vertex and edge potentials.
 Our model contains two directional hidden Markov alignment models, which we review in Sec-tion 2.1, along with additional structure that that we introduce in Section 2.2. 2.1 HMM-Based Alignment Model This section describes the classic hidden Markov model (HMM) based alignment model (Vogel et al., 1996). The model generates a sequence of words f conditioned on a word sequence e . We convention-ally index the words of e by i and f by j . P ( f | e ) is defined in terms of a latent alignment vector a , where a j = i indicates that word position i of e aligns to word position j of f .

In Equation 1 above, the emission model M is a learned multinomial distribution over word types. The transition model D is a multinomial over tran-sition distances, which treats null alignments as a special case.

D ( a j = i 0 6 = 0 | a j  X  1 = i ) = (1  X  p o )  X  c ( i 0 where c ( i 0  X  i ) is a learned distribution over signed distances, normalized over the possible transitions from i . The parameters of the conditional multino-mial M and the transition model c can be learned from a sentence aligned corpus via the expectation maximization algorithm. The null parameter p o is typically fixed. 2
The highest probability word alignment vector under the model for a given sentence pair ( e , f ) can be computed exactly using the standard Viterbi al-gorithm for HMMs in O ( | e | 2  X | f | ) time.
An alignment vector a can be converted trivially into a set of word alignment links A : A a is constrained to be many-to-one from f to e ; many positions j can align to the same i , but each j appears at most once.

We have defined a directional model that gener-ates f from e . An identically structured model can be defined that generates e from f . Let b be a vector of alignments where b i = j indicates that word po-sition j of f aligns to word position i of e . Then, P ( e , b | f ) is defined similarly to Equation 1, but with e and f swapped. We can distinguish the tran-sition and emission distributions of the two models by subscripting them with their generative direction.
P ( e , b | f ) =
The vector b can be interpreted as a set of align-ment links that is one-to-many: each value i appears at most once in the set.
 2.2 A Bidirectional Alignment Model We can combine two HMM-based directional align-ment models by embedding them in a larger model
How are you c that includes all of the random variables of two di-rectional models, along with additional structure that promotes agreement and resolves discrepancies.
The original directional models include observed word sequences e and f , along with the two latent alignment vectors a and b defined in Section 2.1. Because the word types and lengths of e and f are always fixed by the observed sentence pair, we can define our model only over a and b , where the edge potentials between any a j , f j , and e are compiled into a vertex potential function  X  ( a ) j on a j , defined in terms of f and e , and likewise for any b i .
The edge potentials between a and b encode the transition model in Equation 1.
In addition, we include in our model a latent boolean matrix c that encodes the output of the com-bined aligners: This matrix encodes the alignment links proposed by the bidirectional model:
Each model node for an element c ij  X  { 0 , 1 } is connected to a j and b i via coherence edges . These edges allow the model to ensure that the three sets of variables, a , b , and c , together encode a coher-ent alignment analysis of the sentence pair. Figure 1 depicts the graph structure of the model. 2.3 Coherence Potentials The potentials on coherence edges are not learned and do not express any patterns in the data. Instead, they are fixed functions that promote consistency be-tween the integer-valued directional alignment vec-tors a and b and the boolean-valued matrix c .
Consider the assignment a j = i , where i = 0 indicates that word f j is null-aligned, and i  X  1 in-dicates that f j aligns to e i . The coherence potential ensures the following relationship between the vari-able assignment a j = i and the variables c i 0 j , for any i 0  X  [1 , | e | ] .  X  If i = 0 (null-aligned), then all c i 0 j = 0 .  X  If i &gt; 0 , then c ij = 1 .  X  c i 0 j = 1 only if i 0  X  X  i  X  1 , i, i + 1 } .  X  Assigning c i 0 j = 1 for i 0 6 = i incurs a cost e  X   X  Collectively, the list of cases above enforce an intu-itive correspondence: an alignment a j = i ensures that c ij must be 1, adjacent neighbors may be 1 but incur a cost, and all other elements are 0.

This pattern of effects can be encoded in a poten-tial function  X  ( c ) for each coherence edge. These edge potential functions takes an integer value i for some variable a j and a binary value k for some c i 0 j .
Above, potentials of 0 effectively disallow certain cases because a full assignment to ( a , b , c ) is scored by the product of all model potentials. The poten-tween b and c is defined similarly. 2.4 Model Properties We interpret c as the final alignment produced by the model, ignoring a and b . In this way, we relax the one-to-many constraints of the directional models. However, all of the information about how words align is expressed by the vertex and edge potentials on a and b . The coherence edges and the link ma-trix c only serve to resolve conflicts between the di-rectional models and communicate information be-tween them.

Because directional alignments are preserved in-tact as components of our model, extensions or refinements to the underlying directional Markov alignment model could be integrated cleanly into our model as well, including lexicalized transition models (He, 2007), extended conditioning contexts (Brunning et al., 2009), and external information (Shindo et al., 2010).

For any assignment to ( a , b , c ) with non-zero probability, c must encode a one-to-one phrase alignment with a maximum phrase length of 3. That is, any word in either sentence can align to at most three words in the opposite sentence, and those words must be contiguous. This restriction is di-rectly enforced by the edge potential in Equation 2. In general, graphical models admit efficient, exact inference algorithms if they do not contain cycles. Unfortunately, our model contains numerous cycles. For every pair of indices ( i,j ) and ( i 0 ,j 0 ) , the fol-lowing cycle exists in the graph:
Additional cycles also exist in the graph through the edges between a j  X  1 and a j and between b i  X  1 and b i . The general phrase alignment problem under an arbitrary model is known to be NP-hard (DeNero and Klein, 2008). 3.1 Dual Decomposition While the entire graphical model has loops, there are two overlapping subgraphs that are cycle-free. One subgraph G a includes all of the vertices correspond-ing to variables a and c . The other subgraph G b in-cludes vertices for variables b and c . Every edge in the graph belongs to exactly one of these two sub-graphs.

The dual decomposition inference approach al-lows us to exploit this sub-graph structure (Rush et al., 2010). In particular, we can iteratively apply exact inference to the subgraph problems, adjusting their potentials to reflect the constraints of the full problem. The technique of dual decomposition has recently been shown to yield state-of-the-art perfor-mance in dependency parsing (Koo et al., 2010). 3.2 Dual Problem Formulation To describe a dual decomposition inference proce-dure for our model, we first restate the inference problem under our graphical model in terms of the two overlapping subgraphs that admit tractable in-ference. Let c ( a ) be a copy of c associated with G a , normalized log-probability of an assignment to G a and g ( b , c ( b ) ) be the unnormalized log-probability of an assignment to G b . Finally, let I be the index set of all ( i,j ) for c . Then, the maximum likelihood assignment to our original model can be found by optimizing
The Lagrangian relaxation of this optimization problem is L ( a , b , c ( a ) , c ( b ) , u ) = f ( a , c ( a ) )+ g ( b , c ( b ) )+ X
Hence, we can rewrite the original problem as
We can form a dual problem that is an up-per bound on the original optimization problem by swapping the order of min and max . In this case, the dual problem decomposes into two terms that are each local to an acyclic subgraph. a The decomposed model is depicted in Figure 2. As in previous work, we solve for the dual variable u by repeatedly performing inference in the two de-coupled maximization problems. 3.3 Sub-Graph Inference We now address the problem of evaluating Equa-tion 4 for fixed u . Consider the first line of Equa-tion 4, which includes variables a and c ( a ) .
Because the graph G a is tree-structured, Equa-tion 5 can be evaluated in polynomial time. In fact, we can make a stronger claim: we can reuse the Viterbi inference algorithm for linear chain graph-ical models that applies to the embedded directional HMM models. That is, we can cast the optimization of Equation 5 as
In the original HMM-based aligner, the vertex po-tentials correspond to bilexical probabilities. Those quantities appear in f ( a , c ( a ) ) , and therefore will be a part of M 0 j (  X  ) above. The additional terms of Equa-tion 5 can also be factored into the vertex poten-tials of this linear chain model, because the optimal choice of each c ij can be determined from a j and the model parameters. If a j = i , then c ij = 1 according to our edge potential defined in Equation 2. Hence, setting a j = i requires the inclusion of the corre-For i 0 6 = i , either c i 0 j = 0 , which contributes noth-ing to Equation 5, or c i 0 j = 1 , which contributes u ( i 0 ,j )  X   X  , according to our edge potential between a
Thus, we can capture the net effect of assigning a j and then optimally assigning all c i 0 j in a single potential M 0 j ( a j = i ) =  X  j ( i ) + exp
Note that Equation 5 and f are sums of terms in log space, while Viterbi inference for linear chains assumes a product of terms in probability space, which introduces the exponentiation above.

Defining this potential allows us to collapse the source-side sub-graph inference problem defined by Equation 5, into a simple linear chain model that only includes potential functions M 0 j and  X  ( a ) . Hence, we can use a highly optimized linear chain inference implementation rather than a solver for general tree-structured graphical models. Figure 3 depicts this transformation.

An equivalent approach allows us to evaluate the Algorithm 1 Dual decomposition inference algo-rithm for the bidirectional model for t = 1 to max iterations do return combine ( c ( a ) , c ( b ) ) . Stop early second line of Equation 4 for fixed u : 3.4 Dual Decomposition Algorithm Now that we have the means to efficiently evalu-ate Equation 4 for fixed u , we can define the full dual decomposition algorithm for our model, which searches for a u that optimizes Equation 4. We can iteratively search for such a u via sub-gradient de-scent. We use a learning rate 1 t that decays with the number of iterations t . The full dual decomposition optimization procedure appears in Algorithm 1.
If Algorithm 1 converges, then we have found a u such that the value of c ( a ) that optimizes Equation 5 is identical to the value of c ( b ) that optimizes Equa-tion 6. Hence, it is also a solution to our original optimization problem: Equation 3. Since the dual problem is an upper bound on the original problem, this solution must be optimal for Equation 3. 3.5 Convergence and Early Stopping Our dual decomposition algorithm provides an infer-ence method that is exact upon convergence. 3 When Algorithm 1 does not converge, the two alignments c ( a ) and c ( b ) can still be used. While these align-ments may differ, they will likely be more similar than the alignments of independent aligners.
These alignments will still need to be combined procedurally (e.g., taking their union), but because they are more similar, the importance of the combi-nation procedure is reduced. We analyze the behav-ior of early stopping experimentally in Section 5. 3.6 Inference Properties Because we set a maximum number of iterations n in the dual decomposition algorithm, and each iteration only involves optimization in a sequence model, our entire inference procedure is only a con-stant multiple n more computationally expensive than evaluating the original directional aligners.
Moreover, the value of u is specific to a sen-tence pair. Therefore, our approach does not require any additional communication overhead relative to the independent directional models in a distributed aligner implementation. Memory requirements are virtually identical to the baseline: only u must be stored for each sentence pair as it is being processed, but can then be immediately discarded once align-ments are inferred.

Other approaches to generating one-to-one phrase alignments are generally more expensive. In par-ticular, an ITG model requires O ( | e | 3  X | f | 3 ) time, whereas our algorithm requires only Moreover, our approach allows Markov distortion potentials, while standard ITG models are restricted to only hierarchical distortion. Alignment combination normally involves selecting some A from the output of two directional models. Common approaches include forming the union or intersection of the directional sets.

More complex combiners, such as the grow-diag-final heuristic (Koehn et al., 2003), produce align-ment link sets that include all of A  X  and some sub-set of A  X  based on the relationship of multiple links (Och et al., 1999).

In addition, supervised word alignment models often use the output of directional unsupervised aligners as features or pruning signals. In the case that a supervised model is restricted to proposing alignment links that appear in the output of a di-rectional aligner, these models can be interpreted as a combination technique (Deng and Zhou, 2009). Such a model-based approach differs from ours in that it requires a supervised dataset and treats the di-rectional aligners X  output as fixed.

Combination is also related to agreement-based learning (Liang et al., 2006). This approach to jointly learning two directional alignment mod-els yields state-of-the-art unsupervised performance. Our method is complementary to agreement-based learning, as it applies to Viterbi inference under the model rather than computing expectations. In fact, we employ agreement-based training to estimate the parameters of the directional aligners in our experi-ments.

A parallel idea that closely relates to our bidi-rectional model is posterior regularization, which has also been applied to the word alignment prob-lem (Grac  X a et al., 2008). One form of posterior regularization stipulates that the posterior probabil-ity of alignments from two models must agree, and enforces this agreement through an iterative proce-dure similar to Algorithm 1. This approach also yields state-of-the-art unsupervised alignment per-formance on some datasets, along with improve-ments in end-to-end translation quality (Ganchev et al., 2008).

Our method differs from this posterior regulariza-tion work in two ways. First, we iterate over Viterbi predictions rather than posteriors. More importantly, we have changed the output space of the model to be a one-to-one phrase alignment via the coherence edge potential functions.

Another similar line of work applies belief prop-agation to factor graphs that enforce a one-to-one word alignment (Cromi ` eres and Kurohashi, 2009). The details of our models differ: we employ distance-based distortion, while they add structural correspondence terms based on syntactic parse trees. Also, our model training is identical to the HMM-based baseline training, while they employ belief propagation for both training and Viterbi inference. Although differing in both model and inference, our work and theirs both find improvements from defin-ing graphical models for alignment that do not admit exact polynomial-time inference algorithms.
 Aligner Intersection Union Agreement Model |A  X  | |A  X  | |A  X  | / |A  X  | Baseline 5,554 10,998 50.5% Bidirectional 7,620 10,262 74.3% We evaluated our bidirectional model by comparing its output to the annotations of a hand-aligned cor-pus. In this way, we can show that the bidirectional model improves alignment quality and enables the extraction of more correct phrase pairs. 5.1 Data Conditions We evaluated alignment quality on a hand-aligned portion of the NIST 2002 Chinese-English test set (Ayan and Dorr, 2006). We trained the model on a portion of FBIS data that has been used previously for alignment model evaluation (Ayan and Dorr, 2006; Haghighi et al., 2009; DeNero and Klein, 2010). We conducted our evaluation on the first 150 sentences of the dataset, following previous work. This portion of the dataset is commonly used to train supervised models.

We trained the parameters of the directional mod-els using the agreement training variant of the expec-tation maximization algorithm (Liang et al., 2006). Agreement-trained IBM Model 1 was used to ini-tialize the parameters of the HMM-based alignment models (Brown et al., 1993). Both IBM Model 1 and the HMM alignment models were trained for 5 iterations on a 6.2 million word parallel corpus of FBIS newswire. This training regimen on this data set has provided state-of-the-art unsupervised results that outperform IBM Model 4 (Haghighi et al., 2009). 5.2 Convergence Analysis With n = 250 maximum iterations, our dual decom-position inference algorithm only converges 6.2% of the time, perhaps largely due to the fact that the two directional models have different one-to-many structural constraints. However, the dual decompo-
Model Combiner Prec Rec AER
Baseline intersect 86.2 62.7 27.2
Bidirectional intersect 77.5 75.1 23.6
Model Combiner Prec Rec F1
Baseline intersect 64.3 43.4 51.8
Bidirectional intersect 57.1 53.6 55.3 sition algorithm does promote agreement between the two models. We can measure the agreement between models as the fraction of alignment links in the union A  X  that also appear in the intersection A  X  of the two directional models. Table 1 shows a 47% relative increase in the fraction of links that both models agree on by running dual decomposi-tion (bidirectional), relative to independent direc-tional inference (baseline). Improving convergence rates represents an important area of future work. 5.3 Alignment Error Evaluation To evaluate alignment error of the baseline direc-tional aligners, we must apply a combination pro-cedure such as union or intersection to A a and A b . Likewise, in order to evaluate alignment error for our combined model in cases where the inference algorithm does not converge, we must apply combi-nation to c ( a ) and c ( b ) . In cases where the algorithm does converge, c ( a ) = c ( b ) and so no further combi-nation is necessary.

We evaluate alignments relative to hand-aligned data using two metrics. First, we measure align-ment error rate (AER), which compares the pro-posed alignment set A to the sure set S and possible set P in the annotation, where S  X  X  .
 AER results for Chinese-English are reported in Table 2. The bidirectional model improves both pre-cision and recall relative to all heuristic combination techniques, including grow-diag-final (Koehn et al., 2003). Intersected alignments, which are one-to-one phrase alignments, achieve the best AER.
 Second, we measure phrase extraction accuracy. Extraction-based evaluations of alignment better co-incide with the role of word aligners in machine translation systems (Ayan and Dorr, 2006). Let R 5 ( S , P ) be the set of phrases up to length 5 ex-tracted from the sure link set S and possible link set P . Possible links are both included and excluded from phrase pairs during extraction, as in DeNero and Klein (2010). Null aligned words are never in-cluded in phrase pairs for evaluation. Phrase ex-traction precision, recall, and F1 for R 5 ( A , A ) are reported in Table 3. Correct phrase pair recall in-creases from 43.4% to 53.6% (a 23.5% relative in-crease) for the bidirectional model, relative to the best baseline.

Finally, we evaluated our bidirectional model in a large-scale end-to-end phrase-based machine trans-lation system from Chinese to English, based on the alignment template approach (Och and Ney, 2004). The translation model weights were tuned for both the baseline and bidirectional alignments using lattice-based minimum error rate training (Kumar et al., 2009). In both cases, union alignments outper-formed other combination heuristics. Bidirectional alignments yielded a modest improvement of 0.2% BLEU 4 on a single-reference evaluation set of sen-tences sampled from the web (Papineni et al., 2002). As our model only provides small improvements in alignment precision and recall for the union com-biner, the magnitude of the BLEU improvement is not surprising. We have presented a graphical model that combines two classical HMM-based alignment models. Our bidirectional model, which requires no additional learning and no supervised data, can be applied us-ing dual decomposition with only a constant factor additional computation relative to independent di-rectional inference. The resulting predictions im-prove the precision and recall of both alignment links and extraced phrase pairs in Chinese-English experiments. The best results follow from combina-tion via intersection .

Because our technique is defined declaratively in terms of a graphical model, it can be extended in a straightforward manner, for instance with additional potentials on c or improvements to the component directional models. We also look forward to dis-covering the best way to take advantage of these new alignments in downstream applications like ma-chine translation, supervised word alignment, bilin-gual parsing (Burkett et al., 2010), part-of-speech tag induction (Naseem et al., 2009), or cross-lingual model projection (Smith and Eisner, 2009; Das and Petrov, 2011).

