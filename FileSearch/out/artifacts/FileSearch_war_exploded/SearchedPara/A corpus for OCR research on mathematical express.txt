 Utpal Garain, B.B. Chaudhuri Abstract. This paper is concerned with research on OCR (optical character recognition) of printed math-ematical expressions. Construction of a representative corpus of technical and scientific documents containing expressions is discussed. A statistical investigation of the corpus is presented, and usefulness of this analysis is demonstrated in the related research problems, namely, (i) identification and segmentation of expression zones from the rest of the document, (ii) recognition of expres-sion symbols, (iii) interpretation of expression structures, and (iv) performance evaluation of a mathematical ex-pression recognition system. Moreover, a groundtruthing format has been proposed to facilitate automatic evalu-ation of expression recognition techniques.
 Keywords: OCR  X  Mathematical expressions  X  Database  X  Groundtruthing  X  Statistical learning  X  Performance evaluation 1 Introduction Automatic transcription of printed scientific and tech-nical documents into electronic format largely depends on the success in recognizing the typeset mathematics. Several studies dealing with recognition of printed math-ematics have been reported in the literature. These re-search efforts have been surveyed in [1 X 3]. From these reports it is understood that unavailability of a suitable corpus of expressions has prompted the researchers to define their own data set for testing their algorithms. As a result, replication of experiments and comparison of performance among different methods has become a difficult task.
 mathematical expression images that would facilitate re-search in automatic understanding of expressions. The only relevant database available so far is the University of Washington English/Technical Document Database III (UW-III) [4]. However, the database is mainly con-structed for general OCR (optical character recognition) research and contains 25 groundtruthed (into T E X) doc-ument pages containing about 100 expressions. There-fore, it does not seem to be a representative corpus for the respective research. Another drawback of this data set is that groundtruthing of expressions into T E X only does not support an in-depth analysis of recognition per-formance [5 X 7]. Another freely available source of ex-pressions is the set used by Raman for his Ph.D. work [8]. However, the expressions available here are synthetic (generated by T E X) and isolated (i.e., not a part of any document) in nature.
 printed scientific documents collected at the Computer Vision and Pattern Recognition Unit of the Indian Sta-tistical Institute, Kolkata, India and describe how this database addresses various research considerations re-lated to recognition of printed mathematical expressions. This work is an extension of our earlier effort presented in [9].
 modes, namely, embedded (mixed with text and also re-ferred to as inline expression) and displayed (typed on a separate line). Figure 1 shows a typical example of such a document. The content of the database, therefore, is arranged into a two-level hierarchy. At the top level are 400 scientific and technical document images containing mathematical expressions. For each document, its em-bedded and displayed expressions are collected into two different files. Correspondence between a top-level doc-ument with its lower-level files storing embedded and displayed expressions is maintained through the naming convention for files. Expressions are groundtruthed fol-lowing a specified format explained later.
 the database and its organization, it is also focused on other issues such as measuring the comprehensiveness of the corpus, analyzing it for several research considera-tions, and designing an automated tool for testing and evaluating the performance of an expression recognition system. The rest of the paper is organized as follows. sampling procedure, and method of groundtruth genera-tion are outlined in Sect. 2. Section 3 presents a statisti-cal study of the database to measure the comprehensive-ness of the proposed corpus. This section also contains a linguistic analysis to assist in the identification of em-bedded expressions in scientific documents. Next, Sect. 4 demonstrates how the proposed corpus contributes to-ward testing of an expression recognition system and presents an automatic way to compute a single figure of merit for measuring overall recognition performance of a system. Section 5 concludes the paper. 2 Organization of the database The proposed database contains 400 document images containing 2,459 displayed and 3,101 embedded expres-sion fragments. Both real (297 pages) and synthetic (generated by T E X or Microsoft Word) documents (103 pages) are present in the data set. Real documents are collected from (i) books of various branches of science, (ii) science journals, (iii) proceedings of technical con-ferences, (iv) question papers (College/University level examination), etc.
 are available in Microsoft Word or T E X format. Several electronically available journals, conference proceedings, and Internet sites related to various science subjects were considered for this purpose. A few pages were selected from the technical articles published by the members of our research unit. Documents in the database were grouped into three groups depending on the abundance of expressions in the documents. Group I refers to those documents where the number of expressions is relatively small compared to the other two categories. Similarly, group II points to those pages where the density of ex-pressions is higher than that of group I pages, and doc-uments under group III show the highest density of ex-pressions. A summary of the collected samples is given in Table 1.
 of which are described below:  X  Relative frequency of expressions : The documents  X  Nature of expressions : Documents are selected from  X  Variations in typeset : The data set contains docu- X  Page layout : Documents may be printed in single- X  Aging effect : Many important scientific/technical ma- X  Other degradations : Photocopied versions, pages 2.1 Digitization of samples HP flatbed scanners (Scanjet 5470C and Scanjet ADF) are used to digitize real samples into TIFF files. Docu-ments are scanned in gray scale, and resolution varies from 75 dpi to 600 dpi. Old materials and documents printed in smaller font sizes are scanned with higher res-olutions. Scanning at different dpi values helps to study the effect of resolution on recognition performance. On the other hand, no scanning is involved for synthetic doc-uments, and therefore such scanning is free from common digitization errors. These noise-free binary images are generated either by T E X or by Microsoft Word editor. 2.2 Generation of truthed data In the current database, each sample page (say, docxxx.tif ) generates three files with extensions .atr , .emb , and .dis , as shown in Fig. 2. The docxxx.atr file contains a set of attributes defined for the page docxxx.tif . Some of the attributes are the page ID , publication information , page type , etc. Attributes such as degradation type ( origi-nal/photocopy ), salt/pepper noise ( yes/no ), blurred ( yes/no ), etc. refer to the page condition and describe the visual condition of a given sample page. Many of these attributes are identical to those used in the UW Document Image Database [4].
 page layout. Some of the documents are in single-column format, while others are in multicolumn format. Sev-eral documents contain graphs, charts, illustrations, half-tones, etc. Figure 3 shows a few documents present in the database. However, an entire page is not considered for generation of groundtruth, and only the blocks contain-ing text and mathematical expressions are considered. Several techniques (a summary of them can be found in [10]) have been proposed for automatic analysis of page layout, and a modified version of the technique proposed by Pavlidis and Zhou [11] has been employed in our sys-tem to locate the blocks containing text and expressions. Groundtruthing of embedded expressions. The file docxxx.emb describes truth for the embedded expres-sions contained in the page docxxx.tif . Embedded ex-pressions are recorded along with the sentence contain-ing it. A sentence is said to have one or more embedded expressions if it needs the use of math mode in case the sentence was prepared using T E X. Approaches presented in [12 X 18] are studied to develop an automatic way of identifying zones containing embedded expressions in the documents. But it is observed that frequent manual in-tervention is needed to make the results error-free. How-ever, the addition of some N-gram-based linguistic prop-erties (explained later) does help considerably to improve the identification process.
 a &lt; page &gt; and &lt; /page &gt; tag pairs. The image file name is stored within tags, namely, &lt; imagefile &gt; &lt; /imagefile &gt; . A sentence containing embedded expres-sions is recorded within the tag pairs &lt; sentence &gt; &lt; /sentence &gt; . Since multiple sentences can contain em-bedded expressions, there are multiple instances of &lt; sentence &gt; and &lt; /sentence &gt; tag pairs. On the other hand, a sentence may consist of multiple text lines, and therefore a line content is enclosed by a &lt; and &lt; /line &gt; tag pair. An upper-level tag structure for groundtruthing of embedded expressions is presented be-low: &lt;page&gt; &lt;imagefile&gt; ... &lt;/imagefile&gt; &lt;sentence&gt; &lt;/sentence&gt; &lt;sentence&gt; &lt;/sentence&gt; . . . &lt;/page&gt; separately marked with a pair of ( x, y ) coordinates for the top-left and bottom-right corners of the minimum upright rectangular box (called the bounding box and recorded within &lt; bbox &gt;&lt; /bbox &gt; tag pairs) enclosing that text line. The expression zones within a text line are highlighted by the bounding box coordinates of the ex-pression zone. The text and the expression portions of a text line are separately truthed within &lt; text &gt;&lt; and &lt; math &gt;&lt; /math &gt; tag pairs, respectively. The tag structure for a line is shown below: &lt;line&gt; &lt;bbox&gt; ... &lt;/bbox&gt; &lt;text&gt; ... &lt;/text&gt; &lt;math&gt; &lt;/math&gt; . . . &lt;/line&gt; Next, a &lt; GC &gt;&lt; /GC &gt; tag pair is used to indicate the geometric complexity ( GC ) of the expression. GC is mea-sured by the number of horizontal lines (on which ex-pression symbols are arranged) found in that expression. For example, symbols of expression shown in Fig. 4a are arranged on 9 horizontal lines as explained in Fig. 4b. Therefore, GC becomes 9 for this expression. The dom-inant baseline [7] of an expression is treated as level 0 , and the level number increases above and decreases below the baseline.
 presented. For this purpose, MathML 1 presentation tags are used. However, for a symbol (where it is operator, identifier, or numeral), three additional tag pairs, namely, &lt; level &gt;&lt; /level &gt; , &lt; style &lt; truth &gt;&lt; /truth &gt; , are used. For example, if t is an identifier used in the expression, its MathML represen-&lt;mi&gt; &lt;level&gt; ... &lt;/level&gt; &lt;style&gt; ... &lt;/style&gt; &lt;truth&gt; ... &lt;/truth&gt; &lt;/mi&gt; which the symbol appears. For example, symbols of the expression in Fig. 4a appear in one of the nine horizontal levels numbered --3 to 5 including 0 . The style indi-cates the type style ( n : normal, b : bold, i : italic, bi : bold-italic) of the symbol. The identity of the symbol is given within the &lt; truth &gt;&lt; /truth &gt; tag pair. putation of GC , symbol level s. One such algorithm can be found in [22]. On the other hand, detection of sym-bol style is done by following the algorithms outlined in [19, 20]. It is noted that the expression symbols are often typed with a font style, which is different from the dominant style of the document text. In several cases, variations in font faces are also observed, i.e., the expres-sions are printed in a font different from the one used for the remaining text of the document. Statistics regarding different type styles used in expressions are presented in Table 2. For computing the type style of an expression, it is found that, in many cases, the style of all expression symbols may not be unique, and therefore the results presented in Table 2 show the dominant (determined by the majority of symbols) style in the expressions. bedded expressions contained in the page in Fig. 1. If a page has a multicolumn layout, expressions are truthed following the normal reading sequence. In the database, 1084 (out of 5402) sentences are found to have embed-ded expressions, and the groundtruth for each of these sentences is available in the corpus.
 Groundtruthing of displayed expressions. The file docxxx.dis truths the displayed expressions contained in the image docxxx.tif . Automatic identification of displayed expressions in document images has been achieved by the algorithm proposed in [21]. For a sam-ple page, all displayed expressions are truthed within &lt; page &gt;&lt; /page &gt; tag pairs. Each expression is truthed under &lt; math &gt;&lt; /math &gt; tags. For a multiline expres-sion, two consecutive expression lines are linked together with a Thread pointer. So, if the Thread pointer (which can have only binary values) for any expression is 1 , then the current expression continues to the next line. If a page has a multicolumn layout, expressions are truthed following the normal reading sequence.
 starts with &lt; bbox &gt;&lt; /bbox &gt; tags giving the bound-ing box coordinates for the expression. Next, the GC of the expression is recorded using the tag pairs &lt; GC &gt; &lt; /GC &gt; . The expression sequence number, if any exists, content is truthed in a way that is similar to that used for truthing embedded expressions; the only difference is the additional presence of &lt; bbox &gt;&lt; /bbox &gt; tag pairs for each symbol of a displayed expression.
 played expressions contained in the page in Fig. 1. In the corpus, there are 2399 displayed expressions, and groundtruth data for each expression are available in 400 docxxx.dis files. In addition, 60 synthetic expressions are selected from the data set used in AsTeR research [8]. The reasons for this choice are: (i) it contains exam-ples from various branches of mathematics. The expres-sions show wide variations in their structural complexity, making the data set a representative one; (ii) for each ex-pression its corresponding correct T E X string is available, and these strings are used to generate groundtruth; (iii) the data set is free and globally available through the In-ternet, thus allowing comparative study. Therefore, the total number of expressions present in Part II is 2459. Table 3 gives an idea of how the expressions are divided among different topics and purposes. 2.3 Validation of the truthed data While generating the truthed data, manual intervention was involved in the following aspects to check possible errors: (i) bounding box for each line containing embed-ded expressions, bounding box for each embedded and displayed expressions; (ii) GC information for each ex-pression; (iii) level information associated with each expression symbol; and (iv) symbol identity. Moreover, for a displayed expression the expression sequence num-ber, if any is entered manually. Bounding box informa-tion of expression symbols (of displayed expressions) has not been checked as once the bounding box for an ex-pression is fixed, there is hardly any error in finding a bounding box for individual symbols.
 containing embedded expressions is generated by a com-mercial OCR system. As the contents of embedded and displayed expressions are difficult to check by looking at the MathML presentation tags, an additional utility has been designed to generate a global description of a page from its truthed data that provides expressions in T E
X format. For a page, there are two upper-level de-scriptions, one generated for the embedded expressions (using the associated .emb file) and the other one for displayed expressions (using the .dis file).
 piling as a T E X document), it is more convenient to check the validity of the truthed data for an expression con-tent. This is done by visually comparing the appearance of the expression in the image as well as in T E X for-mat. Moreover, such an upper-level description provides ways to further check the GC value of an expression and the style , level , and identity ( truth ) data for expres-sion symbols. OCR accuracy for the text portion is also checked at this level. 3 Statistical investigation of the corpus Initially, the data set is investigated to measure its com-prehensiveness for expression recognition research. Next, some additional studies are presented for identification of embedded expressions and issues related to testing an expression recognition system. 3.1 Study of comprehensiveness Representativeness of the proposed corpus is measured against some basic aspects that are important in any ex-pression recognition research. The presence of different symbols, their occurrence frequencies, and the appear-ance of different two-dimensional (2D) structures (e.g., superscript/subscript , root , fraction , etc.) are studied to understand the corpus coverage. For each 2D structure, an idea of degree of nestedness ( DoN ) is introduced. For example, consider three structures (i) e x , (ii) e x x , and (iii) 1+ 1 x . The first two superscript structures show values for DoN equal to 1 and 2 , respectively. On the other hand, the third structure is a mixed one and its DoN equals 2 since a fraction structure is nested inside the root . For a 2D structure, its DoN value is automat-ically computed from the operator tag pairs associated with that structure. For example, e x uses only one pair of MathML presentation tags, namely, &lt; msup &gt;&lt; /msup making its DoN equal to 1, whereas 1+ 1 x uses one pair of &lt; mfrac &gt;&lt; /mfrac &gt; tags within &lt; msqrt &gt;&lt; tags, making DoN equal to 2.
 Observation 1. Expression symbols. Symbols occurring in expressions are quite different from those occurring in normal text. Apart from the Roman letters, symbols like Arabic digits, Greek symbols, mathematical operators, function words, etc. are frequently used to write expres-sions. Analysis shows that the symbols present in the corpus can be partitioned into ten categories: (i) Ara-bic numerals ( AN ), (ii) Roman letters ( RL ), (iii) Greek symbols ( GS ), (iv) calligraphic letters ( CL ), (v) mathe-matical operators ( MO ), (vi) relational operators ( RO ), (vii) arrow symbols ( AS ), (viii) bracket symbols ( BS ), (ix) miscellaneous symbols ( MS ), e.g., prime( X   X ), for all ( X   X   X ), there exists ( X   X   X ), etc., (x) punctuation marks ( PM ).
 cur in embedded as well as displayed expressions are given in Table 4. The distinct number of symbol classes under each category is shown in braces in the first col-umn. Table 4 gives an idea about the extra symbols an OCR has to classify for recognizing expressions. Avail-ability of this large number of samples helps one to de-sign suitable classification schemes for expression sym-bols. For this purpose, the training and test symbol sets are marked separately in the corpus.
 puted. The list of symbol frequencies gives an idea about the relative abundance of different symbols in expres-sions. Based on these statistics, one may design a pro-totype library where reference symbols are arranged ac-cording to their occurrence frequencies to speed up the symbol recognition process. Moreover, occurrence statis-tics concerning mathematical operators help to identify a small group of symbols that show high occurrence frequencies. Table 5 presents a few of these operators and their abundance (not the occurrence frequencies) in the set of displayed expressions. The high occurrence and shape simplicity of these operators may help one to quickly identify zones containing displayed expressions. Observation 2. Operator structures. Symbols in expres-sions are arranged around different operators and form different geometric layouts, some of which are 1D in na-ture while others are 2D. For example, operators like  X + X ,  X   X   X , and  X = X  and function words like sin , cos , log , etc. induce 1D structures, while superscripts, subscripts, operators (like  X  , X   X  , X   X  , X  etc.) with limit expres-sions, matrixes, etc. form the 2D layout.
 rence statistics have been studied in the proposed cor-pus. Twelve elementary structures have been detected that are 2D in nature. They are: (i) superscript , (ii) sub-(vii) overbrace , (viii) underbrace , (ix) ellipse , (x) accent , (xi) matrix , and (xii) stacking of symbols .
 set are reported in Table 6. However, sometimes it is ob-served that structures appear in nested mode. A struc-ture is called nested if it contains another structure within it. With each class of structures, the observed DoN (degree of nestedness) is listed in column 3 of Table 6. Observation 3. Structural complexity of expressions. As discussed earlier, the geometric (or structural) com-plexity ( GC ) of an expression is defined by the number of horizontal lines on which the constituent symbols are ar-ranged. Expressions in the database are investigated to check their complexity levels, and they are grouped into different classes based on their GC value. Frequencies of these classes in the database are reported in Table 7. Re-sults show that embedded expressions are less complex in their structure than displayed expressions. The high-est complexity observed in embedded expressions is 5, whereas for displayed expressions the value of GC can be as high as 15. 3.2 Linguistic properties of sentences containing embedded expressions A linguistic analysis of the sentences present in scientific documents indicates that a word-level N -gram model could be of great help to categorize a sentence in a techni-cal document into one of two categories, namely, with or without expressions. This analysis is motivated by Zipf X  X  law [23], which is formally defined as P r  X  1 /r a , where P r is the frequency of occurrence of the r th ranked item and a is close to 1.
 mon word in a human language text occurs with a fre-quency inversely proportional to n . The implication of this law is that there is always a set of words that are specific to a particular context. In our approach, the use of embedded expression is treated as the context and based on this, sentences with and without expressions are labeled with one of the two categories, namely, (i) category I ( C 1 ) in which sentences do not contain any expression and (ii) category II ( C 2 ) where each sentence contains one or more expression fragments. To generate N -gram profiles of a category, the following steps are performed.  X  Step 1. Digits, punctuation marks, and expression  X  Step 2. Each sentence is scanned to generate all dis- X  Step 3. Relative frequency of each N -gram ( w 1 ,N )is  X  Step 4. When steps 1 X 3 are completed, a list of all  X  Step 5. Sort the list in descending order of frequen-2,655 sentences having nearly 35,000 words. On the other hand, 870 sentences containing about 12,000 words have been used to generate the profile for category II ( C 2 ). A number of observations follow from an inspection of the N -gram profiles of the categories.  X  Many of the stop words show high occurrence fre- X  The top 150 or so N -grams are highly representative  X  The top ranking N -grams in category I are mostly implemented as follows:  X  Step 1. All N -grams are generated for a target sen- X  Step 2. Each N -gram found ( w k 1 ,N , for k =1to L )  X  Step 3. S is classified as follows: tested with 877 sentences (which have not been used to generate category profile of either C 1 or C 2 ), and the classification results are reported in Table 8. These re-sults show some interesting patterns:  X  The classification method performs slightly better for  X  The accuracy improves with the increased length (in  X  The result shows that the N -gram model provides 4 Issues related to system testing and performance evaluation The database provides utilities to choose the right dataset to test an expression recognition system and to evaluate the test results in an automatic manner. The utilities are as follows: 4.1 Selection of test data Choosing the right set of data is always an important aspect of testing any system performance. In the case of expression recognition, test data must represent the variability in terms of expression symbols, structures, ge-ometric complexity, etc. Selecting an adequate number of test samples is another important criterion. The pro-posed corpus provides necessary support in this direc-tion. Four types of queries can be made to choose the proper test samples. Queries are of the following nature:  X  Type I: Query for symbols : A query can be made to  X  Type II: Query for function words : Expressions (or  X  Type III: Query for structures : The presence of struc- X  Type IV: Query for geometric complexity : Each ex-4.2 Performance evaluation of an expression reco gnition system Several techniques have been proposed for evaluating graphics recognition systems [24], but they mostly con-sider images of engineering drawings containing lines, arcs, circles, etc. For expression recognition, no method has emerged as a standard. The quantitative evalua-tion of expression recognition results is, in fact, a dif-ficult task since recognition involves two major stages: symbol recognition and structural analysis. The stages are tightly coupled, and therefore, if evaluation in one stage is done independently of the other, it may not re-flect the true performance of the system. Errors in the symbol recognition stage affect the structure analysis re-sults. This calls for an integrated evaluation mechanism for judging the performance of an expression recognition system.
 niques have so far been proposed to evaluate expression recognition results. Chan and Yeung [5] presented an in-tegrated performance measure consisting of two indepen-dent measures: one for recognition of symbol s and an-other for recognition of operator s. These two measures are combined with equal weights. Here, the term op-erator includes 2D (e.g., script, limit, fraction, etc.) as well as 1D (+,  X  , etc.) structures. However, the actual performance is measured manually. Later on, Okamoto et. al. [6] have presented an automatic approach to evaluating their structure analysis method. They at-tempted to evaluate performance by checking whether each typical structure such as scripts, limits, fractions, roots, and matrices is recognized correctly. In their ap-proach, expressions against which a system is evaluated are groundtruthed into MathML format. More recently, Zanibbi et. al. [7] presented another automatic way of evaluating performance. In that approach, an expression is visualized as a set of symbols appearing on differ-ent baselines. The performance is assessed by separately counting the number of (i) correctly recognized baselines and (ii) properly placed (w.r.t. the corresponding base-line) symbols.
 ber of properly recognized structures, errors in recogniz-ing simple structures get the same weighting as errors that occur in the processing of complex nested struc-tures. On the other hand, the technique proposed in [7] presents more in-depth analysis of the recognition results but does not provide any single figure of merit for overall performance evaluation.
 testing system performance. It evaluates an expression recognition system by computing a performance index (  X  ). For a given expression, the proposed index considers the geometric (or structural) complexity of the expres-sion to judiciously analyze the recognition result pro-duced by a system. As explained earlier, the structural complexity of an expression is defined by GC , i.e., the number of horizontal lines on which constituent sym-bols are arranged. Moreover, we consider that an error in recognizing a base level (that is, dominant baseline [7]) structure would be more severe than an error in rec-ognizing structures at higher levels. This is because sym-bols placed in horizontal lines other than the baseline are structurally dependent on the base-level symbols. There-fore, errors in placement of a base-level symbol (say, s 0 affect the placement of other symbols structurally re-lated to s 0 . In general, placement errors for base-level symbols affect the regeneration of an expression more than errors for other symbols. This situation will become more clear when the following examples are considered: GC = 1. On the other hand, the expression in Eq. 5 shows a complexity GC=3 because a has a one-level super-script and  X  has a one-level subscript. Following this logic, the GC values of Eqs. 6 and 7 are 5 and 8, re-spectively. One can visualize that an error in interpret-ing the position of any base-level symbol (for example,  X  a  X  X nEq.5or X  c  X  in eq. 6) would affect the layout of other immediate symbols nested in it. Moreover, be-cause the use of non-base-level symbols (e.g., script or limit expressions) increases the structural complexity of an expression, any systematic evaluation strategy would be expected to consider how a system can recognize sim-ple expressions and then to check the system X  X  response as the complexity increases. Therefore, to evaluate the efficiency of an approach that deals with the recognition of expressions, one has to take the geometric complex-ity of the expressions into account. The four expressions in Eqs. 4 X 7 show a gradual increment in the structural complexity of the expressions.
 Integrated performance measure : In our approach, an automatic performance evaluation can be done using the truthed data stored in the corpus. As explained ear-lier, the expressions in the dataset are groundtruthed using MathML presentation tags. The recognition re-sult for an expression is compared with the groundtruth corresponding to that expression. If they do not match, then the result is not correct. Errors originate from two sources: (i) symbol recognition errors and (ii) errors in structure interpretation. Symbol recognition errors are easily computed as errors is not trivial. This is so because the parsing of an expression may not be fully correct, but some of its symbol arrangements may be interpreted properly, and the system should be given partial credit for it. In our method, the erroneous arrangement of a symbol ( s )is penalized by a factor 1 i +1 , where i is the level of the symbol, s .
 ture recognition error, only spatial arrangements are im-portant. For example, no structure recognition error is reported if X m is recognized as X rn . This is so because such symbol classification errors are accounted for by computing the symbol recognition accuracy. In the fore-going example, a structure recognition error is detected only if identification of the superscript structure fails. of symbols, S e be number of symbols recognized incor-rectly, R i be the number of symbols in the i th level, and O i be the number of i th-level symbols for which in-correct arrangement analysis is encountered. Now, the performance index (  X  ) is defined as computed for all k =1 , 2 ,  X  X  X  ,Z , and to rate the overall system performance, an average  X  avg is computed as tem can be judged following Eq. 9 and an average per-formance can be computed according to Eq. 10. Let us consider a small expression fragment to understand how evaluation is done using the groundtruth data. Figure 5b shows the groundtruth for a nested structure of the ex-pression shown in Fig. 5a. The bounding box and style information is ignored for better convenience. However, one should consider bounding box information for eval-uating segmentation results (e.g., whether symbols are properly extracted or not). Let us assume that the sym-bols are properly segmented in the present case. tem incorrectly recognizes the subexpression c 2 n 7 in Fig. 5a as c 2 n 7 , which encounters an incorrect arrange-ment of  X 7. X  Such incorrect arrangements can be auto-matically detected by comparing the recognition results against the groundtruth data. The comparison algorithm works iteratively; it starts by locating the innermost op-erator tags (like &lt; msub &gt; , &lt; msup &gt; , &lt; mfrac locates the symbols for which arrangements are incor-rect. For example, absence of the innermost &lt; msub &gt; tag of Fig. 5b in Fig. 5c indicates an improper arrange-ment of  X  X  X  and  X 7. X  Next, comparison of the second &lt; msup &gt; tags in Fig. 5b and c pinpoints the incorrect arrangement of the symbol  X 7, X  whereas the symbols  X 2 X  and  X  X  X  imply the correct arrangement.
 puted following Eq. 9. In this case, S t =4 ,S e =0 ,R 0 = 1 ,R 1 =2 ,R 2 =1 ,O 0 =0 ,O 1 =1 ,O 2 = 0. Placement for only one symbol is incorrect at level 2. Therefore,  X  5 Conclusion In this paper, the development of a corpus of printed sci-entific and technical documents is discussed. This study is amied at facilitating research on the automatic recog-nition of expressions. A considerable number of samples is gathered from various branches of science to make the data set a representative one. Groundtruthing of expression images follows a new format useful for sev-eral research considerations. A statistical analysis of the database is presented to show the comprehensiveness of the proposed corpus. Several utilities are provided to as-sist in designing and testing an expression recognition system. A new performance index is proposed to pro-duce a single figure of merit after evaluation of such a system.
 corpus available on the Internet. This will take some time as final correction of the truth data remains incomplete. To provide guarantees concerning the truth data, we plan to check the generated data at two levels. Initially, the truthed data ( T ) is to be manually checked and corrected by two different groups in isolation to produce two ver-sions of the same truthed data ( T ), namely, T 1 and T 2 Design of a user-friendly interface is in progress to assist this manual correction. Later on, T 1 and T 2 are to be compared by automatic file comparison utilities like cmp , diff , etc. Differences are to be marked and corrected to produce the final version of the truthed data. References Appendix A Groundtruthing of the sentences containing embedded expressions for the image shown in Fig. 1. Appendix B Groundtruthing of the displayed expressions for the im-age shown in Fig. 1.
