 The size and diversity of the Web has been the root cause of the poor performance of many retrieval systems, with little navigational support provided by many large online information repositories. The online information retriev al process across different repositories shares similarities with content access facilities and user behaviors even when con-taining inherently different content types. In this work, we introduce our social recommender system called ASSIST. The recommendation framework in ASSIST can be applied to any online information retrieval service with key infor-mation access components, search and browsing. ASSIST exploits multiple forms of social implicit feedback in orde r to generate well-informed user recommendations in the on-line information retrieval domain.
 H.3.1 [ Content Analysis and Indexing ]: Indexing method; H.5.3 [ Group and Organization Interfaces ]: Computer-supported cooperative work Experimentation, Human Factors Social access patterns, search, browsing, implicit feedba ck
Due to the spiraling growth of the Internet [8], the process of locating relevant information is becoming more and more difficult for users. Retrieval systems find it close to impos-sible to index large portions of the web and even harder to decipher users X  intentions from their poorly formed state-ments of information need (i.e. queries) [6].

Recent research has drawn the attention of researchers in the field to look into the exploitation of user interaction patterns as implicit feedback to drive retrieval. For exam-ple, work in the area of collaborative search shows how the exploitation of query submission and page selection infor-mation can improve the relevance of retrieved results for a community of searchers [10]; similarly positive results ca n be seen when historical browsing patterns are made visible to users as they browse through an information space [5]. Each of these techniques exploits a form of interaction history t o make retrieval recommendations to users which cover a sin-gle aspect of the environment in which the user is situated, for example a search result-list or a Web page with multiple navigation options.

In this work, we seek to harness complementary interac-tion history data collected under social searching and soci al browsing paradigms and use them to recommend useful or interesting digital content to the users of any online infor ma-tion access service that provides both searching and brows-ing facilities. We will present the ASSIST, ( A daptive S ocial S upport for I nformation S pace T raversal), social support engine, which encapsulates a generic framework for the de-ployment of integrated social search and social browsing su p-port in an information access system, storing interaction h is-tory data and utilizing historical access patterns to make recommendations to users as they attempt to satisfy their information needs. We expand on previously reported work on ASSIST [4, 3] and introduce its new contextual recom-mendation functionality.
Over the last decade, social and collaborative filtering have been raised as important approaches to addressing the information overload problem. Social filtering techniques try to harvest the collective wisdom of a community to help in-dividual users. The high cost of explicit feedback has pushe d these techniques to very often use the implicit feedback suc h as the browsing activity, entered queries, or provided tags . I-SPY [10] is an example of a social search system which exploits community implicit interaction patterns to make recommendations in a search scenario. It promotes search results which have been selected in the past for a community of users and provides justification for its recommendations through the use of social icons. Lehikoinen et al [7] used a very similar approach in developing a meta search engine allowing implicit, anonymous, and asynchronous collabora -tive searches. Similarly they utilize the searches made by other network users in the past. The past search queries are then used to create a result relevancy indicator based on the previous searches. Social browsing systems such as Knowl-edgeSea II [1],and CoFIND [2] exploit the number of visits to each resource as implicit feedback to discover community preferences. KnowledgeSea II combines users X  annotations and time spent reading to enrich the feedback. CoFIND combines implicit feedback with users X  explicit rating to c ol-lect stronger evidence of community preferences. QuickSte p [9] is a research paper recommender which provides recom-mendation by recording the papers visited by each user. QuickStep uses supervised machine-learning techniques an d an ontological representation to extract user preferences . To enrich community based recommendations, ASSIST aims to combine several sources of implicit feedback.
The ASSIST engine has two core components, a search component and a browsing component (see Figure 1). Each component maintains a separate store of information access patterns for multiple communities of users of an informa-tion access system and both stores are exploited in an in-tegrated fashion by the ASSIST engine to produce content recommendations. Briefly, the proxy-based architecture of the ASSIST engine intercepts user requests to an informa-tion repository coming from several possible browsing and searching entry-points or hooks , including search boxes, tool-bars, result selections and user clicks.

The ASSIST architecture can be adapted to any infor-mation repository which has a search and browsing facility. In previous work we illustrated our ideas using the ACM Digital Library. In this work we will refer to examples us-ing a multimedia platform for serving up videos, YouTube (www.youtube.com) to illustrate how our recommendation strategies could be implemented in an alternative domain.
The search component maintains a store of all search ac-tivity encountered within the system. It records each sub-mitted query and the subsequent result selections, thus cap -turing implicit relevance feedback from the community mem-bers. These search histories are stored in the so-called sea rch hit-matrix , H . A hit-matrix is a grid-like data structure that stores query and result selection information for a given co m-munity and thus contains a set of user access patterns that reflect the collective preferences of the community. Each el e-ment of the hit-matrix, H ij , stores a value v which indicates that page p j has been selected for query q i v times. v is updated each time p j is reselected for query q i .
The primary function of the browsing component is to collect and store browsing interactions with an underlying information repository. Two forms of browsing informa-tion are collected; simple browsing and contextual brows-ing. Simple browsing clicks are recorded when a user selects a link that is contained in a menu list. The newly-extended ASSIST considers two forms of contextual browsing, query-context browsing and page-context browsing. A page p T is considered to have an associated page context p C if p C con-tains a hyperlink to p T and a contextual click is recorded if a user follows the link.

A page p T is seen to have a query context, q C , if the path being navigated by the user started at a result-list for q and the user has navigated away from the result list. We make the assumption that a user X  X  goal is still valid if they decide to navigate outwards from a result page but we do recognize that as the user navigates away from the result list, there is an increased chance that the user may have changed their original information goal. Thus the strength of the contextual relationship degrades with each click awa y from the result-list.

Two data structures make up the browsing component X  X  information store. The simple clicks are stored in a databas e which for each community records the number of times the hyperlink is selected versus the number of times a hyperlink has been presented to a user. A second type of hit-matrix ( BH , the browse matrix ) records contextual click informa-tion. The browsing context c (query or content item) is paired with the resulting clicked page p T and the cell rep-resenting the pair, BH cT is incremented each time such a selection reoccurs. The browse matrix also stores the num-ber of times the user had the option to select p T but did not follow that path and the distance from the goal.
As described, the ASSIST engine stores several forms of user interaction activity information and exploits it to re c-ommend content from an information repository in both searching and browsing situations. ASSIST bases its recom-mendations on the past interactions of community members, which can be thought of as implicit relevancy judgements by the users. Unlike other systems that monitor and recom-mend content within either a browsing or a searching con-text, ASSIST exploits both its search and browsing historie s in both contexts. ASSIST has three strategies for deliver-ing recommendations to users; they consist of augmenting links with social cues, context-based recommendations usi ng mouseovers, and list reordering.
Graphical social cues are added throughout the interface to links to highlight areas of interest and suggested paths through the space based on past interactions. Two social cue icons are used; a magnifying glass to depict search-related information and a trail of footprints for browsing informa-tion (see Figure 2). The fill-level of the icons represents the strength of the recommendation. The use of two icons allows users to determine whether the recommendation is based on search or browsing information or both. This is important since in certain scenarios the user may be more interested in one source than the other. For instance when engaged in a focussed search, information about an item X  X  general brows -ing history may not be as important as the queries which have previously led to the item being viewed.
A content item, I , within a repository is augmented with the ASSIST search icon if previous users have accessed I using the repository X  X  search facility. The icon X  X  fill-level depicts the popularity of I amongst community members across search queries. That is, for each target query, q T led to I  X  X  selection, the popularity , P op search ( I, q I for query q T can be calculated by obtaining the number of times I has been selected in response to q T as a percentage of the total number of selections across all items for q T . Thus, the strength of a search-based recommendation for item I is the average popularity of I across all queries which have previously led to I being selected.
The browse icon reflects the browsing popularity of a con-tent item I within an information repository. The impor-tance of the browsing component of a recommendation made by the ASSIST engine is calculated using 2 distinct mea-sures of browsing popularity. The simple browse popularity of an item I , Browse ( I ), is expressed by the number of times item I has been selected divided by the total num-ber of times I has been displayed, in a browsing context. On the other hand the contextual browse popularity of I , Browse cont ( I, I C ), provides a measure of how popular item I is in the context of the page or content item that the user is currently viewing, I C , which we call the context of I . Browse cont ( I, I C ) is calculated by dividing the number of times item I has been selected within the context of item I
C by the total number of times I has been displayed in the context of I C multiplied by a weight which is a function of distance of the page from the goal page.
A user encounters a contextual recommendation as a re-sult of mousing over a social icon. The mouseover displays either contextual query recommendations (in the case of the search icon) or contextual content recommendations(in the case of the browse icon). Each recommendation is clickable, allowing the user to retrieve the results of a recommended query or directly access some recommended content.
Mousing over a search icon reveals a list of recommended queries. Each recommendation corresponds to a query that has resulted in the selection of the target item in the past as detailed previously. The strength of each recommendation, and thus the ordering of the list, is based on each query X  X  popularity P op search ( I, q n ) for item I .
Content recommendations or page recommendations are contained in the mouseovers of the browse icons. Each rec-ommended item I has been selected by a community mem-ber directly after the item which the user is now viewing, I The recommendation ordering is determined by the contex-tual browse popularity, Browse cont ( I, I C ) detailed above. By following the recommendations users can skip a step in the trail followed by others. Figure 2 shows the recommen-dations made to a user based on the query  X  happy  X  and the search result  X  happy feet  X  which the user has moused over. The recommendations include the query  X  happy feet  X  and recommendations for other content  X  happy feet penguin dance  X  and  X  happy feet remix  X  which have been viewed di-rectly after the search result  X  happy feet  X  clip.
Figure 2: Result page from ASSIST YouTube.
ASSIST X  X  most pro-active form of recommendation is ob-vious in the reordering of lists such as search result-lists and related item lists. These lists are reordered, promotin g recommended items to users based on previous user interac-tions.
ASSIST exploits the Collaborative Web Search (CWS) technique [10] in order to make recommendations at search time. Briefly, at query-time, the ASSIST engine dispatches the user X  X  target query, q T to the search component, which generates a list of recommendations, R A . In parallel, the standard list of results, R S , returned by the underlying in-formation access system is retrieved and reordered so that the top k recommendation candidates (typically, k =3) from R A are promoted/inserted to the top of the search result-list.
In Section 4.1.1 we detailed how an items X  popularity amongst community members across all search queries is calculated. ASSIST exploits a similar metric which concen-trates on an items popularity for a specific target query in order to generate R A for each search query. For a target query, q T the relevance , Rel search ( I, q T ) of item I is calcu-lated by obtaining the number of times I has been selected in response to q T (and queries similar to q T ) as a percent-age of the total number of selections across all items for q . Thus R A contains a list of items I which have been selected in the past for q T and is ordered by decreasing relevance. The browsing component X  X  information store is accessed and browsing history information is retrieved and used to also provide the user with information about each result X  X  browsing history before the final recommendations list is returned.
Related item lists are reordered by recommending items which have been previously selected from the current con-text. Thus each related list is reordered based on the con-textual browse popularity, Browse cont ( I, I C ), of each I in the list. An example of this list reordering is seen in Figure 3 where related videos  X  happy feet remix  X  and  X  happy feet penguin dance  X  are promoted from their previous positions in the related video list.

Figure 3: Reordered YouTube related videos list.
We have described a recommendation framework called the ASSIST engine that incorporates notions of social searc h and social browsing in an integrated, complementary fash-ion, to help users navigate through an information space by recommending content based on the actions of previous users of an information access system. The ASSIST en-gine is designed as a flexible solution which can be used to augment any online information repository that provides it s users with both searching and browsing capabilities.
Live-user evaluations of the ASSIST engine deployed within the ACM Digital Library have shown the potential of the integrated technique for enhancing the overall experience of users as they hunt for information in a large repository, en-gaging in both browsing and searching activities (see [3, 4] ). In this work, we are seeking to position the architecture as a more general framework, which can be applied to the task of leveraging historical interaction data to recommend dig -ital content to users in any sphere, from academic papers and general interest encyclopedia-style content to multim e-dia objects such as videos.

In future work, we will perform live-user evaluations of this framework in a variety of digital repositories, beginn ing with a deployment over a very large repository of online video content. Evaluating the framework in very different environments should demonstrate that the synergy between online searching and browsing paradigms is not particular t o any one information access medium and thus it can be effec-tively exploited in many different deployment settings. Thi s will highlight the general applicability of the approach an d will serve to confirm the hypothesis underlying the project, i.e. that by recommending content to users based on the searching and browsing activities of previous users, the ov er-all user experience can be enhanced and users find interest-ing online content more often and with less effort. [1] P. Brusilovsky, G. Chavan, and R. Farzan. Social [2] J. Dron, C. Boyne, and R. Mitchell. Footpaths in the [3] R. Farzan, M. Coyle, J. Freyne, P. Brusilovsky, and [4] J. Freyne, R. Farzan, P. Brusilovsky, B. Smyth, and [5] X. Fu, J. Budzik, and K. J. Hammond. Mining [6] S. Lawrence and C. L. Giles. Accessibility of [7] Lehikoinen, Juha, Salminen, Ilkka, Aaltonen, Antti, [8] P. Lyman and H. R. Varian. How Much Information, [9] S. E. Middleton, D. C. D. Roure, and N. R. Shadbolt. [10] B. Smyth, E. Balfe, J. Freyne, P. Briggs, M. Coyle,
