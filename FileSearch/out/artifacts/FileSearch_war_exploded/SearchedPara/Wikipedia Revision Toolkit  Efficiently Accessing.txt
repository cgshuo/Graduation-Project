 In the last decade, the free encyclopedia Wikipedia has become one of the most valuable and com-prehensive knowledge sources in Natural Language Processing. It has been used for numerous NLP tasks, e.g. word sense disambiguation, semantic re-latedness measures, or text categorization. A de-tailed survey on usages of Wikipedia in NLP can be found in (Medelyan et al., 2009).

The majority of Wikipedia-based NLP algorithms works on single snapshots of Wikipedia, which are published by the Wikimedia Foundation as XML dumps at irregular intervals. 1 Such a snapshot only represents the state of Wikipedia at a certain fixed point in time, while Wikipedia actually is a dynamic resource that is constantly changed by its millions of editors. This rapid change is bound to have an influ-ence on the performance of NLP algorithms using Wikipedia data. However, the exact consequences are largely unknown, as only very few papers have systematically analyzed this influence (Zesch and Gurevych, 2010). This is mainly due to older snap-shots becoming unavailable, as there is no official backup server. As a consequence, older experimen-tal results cannot be reproduced anymore.

In this paper, we present a toolkit that solves both issues by reconstructing a certain past state of Wikipedia from its edit history, which is offered by the Wikimedia Foundation in form of a database dump. Section 3 gives a more detailed overview of the reconstruction process.

Besides reconstructing past states of Wikipedia, the revision history data also constitutes a novel knowledge source for NLP algorithms. The se-quence of article edits can be used as training data for data-driven NLP algorithms, such as vandalism detection (Chin et al., 2010), text summarization (Nelken and Yamangil, 2008), sentence compres-sion (Yamangil and Nelken, 2008), unsupervised extraction of lexical simplifications (Yatskar et al., 2010), the expansion of textual entailment corpora (Zanzotto and Pennacchiotti, 2010), or assesing the trustworthiness of Wikipedia articles (Zeng et al., 2006).
However, efficient access to this new resource has been limited by the immense size of the data. The revisions for all articles in the current English Wikipedia sum up to over 5 terabytes of text. Con-sequently, most of the above mentioned previous work only regarded small samples of the available data. However, using more data usually leads to bet-ter results, or how Church and Mercer (1993) put it  X  X ore data are better data X . Thus, in Section 4, we present a tool to efficiently access Wikipedia X  X  edit history. It provides an easy-to-use API for pro-grammatically accessing the revision data and re-duces the required storage space to less than 2% of its original size. Both tools are publicly available on Google Code ( http://jwpl.googlecode. com ) as open source software under the LGPL v3 . To our knowledge, there are currently only two alter-natives to programmatically access Wikipedia X  X  re-vision history.
 One possibility is to manually parse the original XML revision dump. However, due to the huge size of these dumps, efficient, random access is infeasi-ble with this approach.

Another possibility is using the MediaWiki API 2 , a web service which directly accesses live data from the Wikipedia website. However, using a web ser-vice entails that the desired revision for every single article has to be requested from the service, trans-ferred over the Internet and then stored locally in an appropriate format. Access to all revisions of all Wikipedia articles for a large-scale analysis is infeasible with this method because it is strongly constricted by the data transfer speed over the In-ternet. Even though it is possible to bypass this bot-tleneck by setting up a local Wikipedia mirror, the MediaWiki API can only provide full text revisions, which results in very large amounts of data to be transferred.

Better suited for tasks of this kind are APIs that utilize databases for storing and accessing the Wikipedia data. However, current database-driven Wikipedia APIs do not support access to article re-visions. That is why we decided to extend an es-tablished API with the ability to efficiently access Wikipedia X  X  edit history. Two established Wikipedia APIs have been considered for this purpose.

Wikipedia Miner 3 (Milne and Witten, 2009) is an open source toolkit which provides access to Wikipedia with the help of a preprocessed database. It represents articles, categories and redirects as Java classes and provides access to the article content ei-ther as MediaWiki markup or as plain text. The toolkit mainly focuses on Wikipedia X  X  structure, the contained concepts, and semantic relations, but it makes little use of the textual content within the ar-ticles. Even though it was developed to work lan-guage independently, it focuses mainly on the En-glish Wikipedia.

Another open source API for accessing Wikipedia data from a preprocessed database is JWPL 4 (Zesch et al., 2008). Like Wikipedia Miner, it also rep-resents the content and structure of Wikipedia as Java objects. In addition to that, JWPL contains a MediaWiki markup parser to further analyze the ar-ticle contents to make available fine-grained infor-mation like e.g. article sections, info-boxes, or first paragraphs. Furthermore, it was explicitly designed to work with all language versions of Wikipedia.
We have chosen to extend JWPL with our revi-sion toolkit, as it has better support for accessing ar-ticle contents, natively supports multiple languages, and seems to have a larger and more active developer community. In the following section, we present the parts of the toolkit which reconstruct past states of Wikipedia, while in section 4, we describe tools al-lowing to efficiently access Wikipedia X  X  edit history. Access to arbitrary past states of Wikipedia is re-quired to (i) evaluate the performance of Wikipedia-based NLP algorithms over time, and (ii) to repro-duce Wikipedia-based research results. For this rea-son, we have developed a tool called TimeMachine , which addresses both of these issues by making use of the revision dump provided by the Wikimedia Foundation. By iterating over all articles in the re-vision dump and extracting the desired revision of each article, it is possible to recover the state of Wikipedia at an earlier point in time.
The TimeMachine is controlled by a single con-figuration file, which allows (i) to restore individual Wikipedia snapshots or (ii) to generate whole snap-shot series. Table 1 gives an overview of the con-figuration parameters. The first three properties set the environment for the specific language version of Wikipedia. The two timestamps define the start and end time of the snapshot series, while the interval between the snapshots in the series is set by the pa-rameter each . In the example, the TimeMachine re-covers 13 snapshots between Jan 01, 2009 at 01.00 p.m and and Dec 31, 2009 at 01.00 p.m at an inter-val of 30 days. In order to recover a single snap-shot, the two timestamps have simply to be set to the same value, while the parameter  X  each  X  has no effect. The option removeInputFilesAfterProcessing specifies whether to delete the source files after pro-cessing has finished. The final four properties define the paths to the source files and the output directory.
The output of the TimeMachine is a set of eleven text files for each snapshot, which can directly be imported into an empty JWPL database. It can be accessed with the JWPL API in the same way as snapshots created using JWPL itself.
 Issue of Deleted Articles The past snapshot of Wikipedia created by our toolkit is identical to the state of Wikipedia at that time with the exception of articles that have been deleted meanwhile. Articles might be deleted only by Wikipedia administrators if they are subject to copyright violations, vandal-ism, spam or other conditions that violate Wikipedia policies. As a consequence, they are removed from the public view along with all their revision infor-mation, which makes it impossible to recover them from any future publicly available dump. 5 Even though about five thousand pages are deleted every day, only a small percentage of those pages actually corresponds to meaningful articles. Most of the af-fected pages are newly created duplicates of already existing articles or spam articles. Even though article revisions are available from the official Wikipedia revision dumps, accessing this in-formation on a large scale is still a difficult task. This is due to two main problems. First, the revi-sion dump contains all revisions as full text. This results in a massive amount of data and makes struc-tured access very hard. Second, there is no efficient API available so far for accessing article revisions on a large scale.
 Thus, we have developed a tool called RevisionMachine , which solves these issues. First, we describe our solution to the storage prob-lem. Second, we present several use cases of the RevisionMachine, and show how the API simplifies experimental setups. 4.1 Revision Storage As each revision of a Wikipedia article stores the full article text, the revision history obviously con-tains a lot of redundant data. The RevisionMachine makes use of this fact and utilizes a dedicated stor-age format which stores a revision only by means of the changes that have been made to the previous revision. For this purpose, we have tested existing diff libraries, like Javaxdelta 6 or java-diff 7 , which calculate the differences between two texts. How-ever, both their runtime and the size of the result-ing output was not feasible for the given size of the data. Therefore, we have developed our own diff algorithm, which is based on a longest common sub-string search and constitutes the foundation for our revision storage format.

The processing of two subsequent revisions can be divided into four steps: With this approach, we achieve to reduce the de-mand for disk space for a recent English Wikipedia dump containing all article revisions from 5470 GB to only 96 GB, i.e. by 98%. The compressed data is stored in a MySQL database, which provides sophis-ticated indexing mechanisms for high-performance access to the data.

Obviously, storing only the changes instead of the full text of each revision trades in speed for space. Accessing a certain revision now requires re-constructing the text of the revision from a list of changes. As articles often have several thousand re-visions, this might take too long. Thus, in order to speed up the recovery of the revision text, every n-th revision is stored as a full revision. A low value of n decreases the time needed to access a certain re-vision, but increases the demand for storage space. We have found n = 1000 to yield a good trade-off 9 . This parameter, among a few other possibilities to fine-tune the process, can be set in a graphical user interface provided with the RevisionMachine. 4.2 Revision Access After the converted revisions have been stored in the revision database, it can either be used stand-alone or combined with the JWPL data and ac-cessed via the standard JWPL API. The latter op-tion makes it possible to combine the possibilities of the RevisionMachine with other components like the JWPL parser for the MediaWiki syntax.

In order to set up the RevisionMachine, it is only necessary to provide the configuration details for the database connection (see Listing 1 ). Upon first ac-cess, the database user has to have write permission on the database, as indexes have to be created. For later use, read permission is sufficient. Access to the RevisionMachine is achieved via two API objects. The RevisionIterator allows to iterate over all revi-sions in Wikipedia. The RevisionAPI grants access to the revisions of individual articles. In addition to that, the Wikipedia object provides access to JWPL functionalities.

In the following, we describe three use cases of the RevisionMachine API, which demonstrate how it is easily integrated into experimental setups. Processing all article revisions in Wikipedia The first use case focuses on the utilization of the complete set of article revisions in a Wikipedia snap-shot. Listing 2 shows how to iterate over all revi-sions. Thereby, the iterator ensures that successive revisions always correspond to adjacent revisions of a single article in chronological order. The start of a new article can easily be detected by checking the timestamp and the article id. This approach is es-pecially useful for applications in statistical natural language processing, where large amounts of train-ing data are a vital asset.
 Processing revisions of individual articles The second use case shows how the RevisionMachine can be used to access the edit history of a specific article. The example in Listing 3 illustrates how all revisions for the article Automobile can be retrieved by first performing a page query with the JWPL API and then retrieving all revision timestamps for this page, which can finally be used to access the revi-sion objects.
 Accessing the meta data of a revision The third use case illustrates the access to the meta data of in-dividual revisions. The meta data includes the name or IP of the contributor, the additional user comment for the revision and a flag that identifies a revision as minor or major. Listing 4 shows how the number of edits and unique contributors can be used to indicate the level of edit activity for an article. In this paper, we presented an open-source toolkit which extends JWPL , an API for accessing Wikipedia, with the ability to reconstruct past states of Wikipedia, and to efficiently access the edit his-tory of Wikipedia articles.

Reconstructing past states of Wikipedia is a prerequisite for reproducing previous experimen-tal work based on Wikipedia, and is also a re-quirement for the creation of time-based series of Wikipedia snapshots and for assessing the influence of Wikipedia growth on NLP algorithms. Further-more, Wikipedia X  X  edit history has been shown to be a valuable knowledge source for NLP, which is hard to access because of the lack of efficient tools for managing the huge amount of revision data. By uti-lizing a dedicated storage format for the revisions, our toolkit massively decreases the amount of data to be stored. At the same time, it provides an easy-to-use interface to access the revision data.
We expect this work to consolidate NLP re-search using Wikipedia in general, and to foster research making use of the knowledge encoded in Wikipedia X  X  edit history. The toolkit will be made available as part of JWPL , and can be obtained from the project X  X  website at Google Code. ( http:// jwpl.googlecode.com )
