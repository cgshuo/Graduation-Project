 Short search engine queries do not provide contextual information, making it difficult for traditional search engines t o understand what users are really requesting . One approach to this problem is to use recommender systems that identify user interests through various methods in order to provide information specific to the user X  X  needs. However, many current recommender s ystems use a collaborative model based on a network of users to provide the recommendations, leading to problems in environments where network relationships are sparse or unknown. Content -based recommenders can avoid the sparsity problem but they may be inefficient for large document collections. In this paper, we propose a concept -based recommender system that recommends papers to general users of the CiteSeer x1 digital library of Computer Science research publications. We also represent a novel way of cl assifying documents and creating user profiles based on the ACM (Association for Computer Machinery) classification tree. Based on these user profiles which are built using past click histories, relevant papers in the domain are recommended to users. Expe riments with a set of users on the CiteSeer X database show that our concept -based method provides accurate recommendations even with limited user profile histories . H.3.3 [Information Storage and Retrieval] : Information Sea rch and Retrieval Algorithms , Performance, Design, Economics, Reliability, Experimentat ion . Recommender system , Conceptual Recommendation, CiteSeer X, Information Retrieval With the enormous growth and complexity of infor mation on the Web , it has been a challenging task for users to find exactly what they are looking for or find relevant , interesting information. This has lead to the development of recommender systems which http:// CiteSeer x.ist.psu.edu/ recommend items to the users by capturing their i nterests and needs [ 8]. Recommender systems in real -world applications have been designed to acquire information by explicitly asking users to rate a set of titles or by implicitly watching the browsing or purchasing behavior of users [1 0]. For example, Ne tflix asks users to rate movies they have seen in the past in order to determine their likes and dislikes. Amazon uses both active ratings and passive behavior tracking to for its item recommender system . However, the current generation of recommender syst ems require s further improvements to make recommendation methods more effective and applicable to an even broader range of real -life applications [ 1]. Many existing systems suffer from the cold -start problem of handling new items or new users [ 5]. In a col laborative system, for example, new items cannot be reliably recommended until they have been rated by several users . In some cases the number of users might be small compared to the number of items , which causes sparcity problem s in many algorithms . Recom mendations for items that are new to the catalog are therefore considerably weaker than more widely rated products. To avoid this cold start problem, content -based recommendation systems recommen d item s based on item content and a profile of the user X  X  int erests . In this paper, we focus on document recommendation services, which are v aluable to users of digital libraries [ 9]. We propose a concept -based recommender system that recommends papers to general users of CiteSeer x digital library of Computer Scienc e research publications. CiteSeer x is the successor of the CiteSeer [4], which was the first digital library of technical papers and included a search engine to provide citation indexing and citation linking using the method of autonomous citation indexing [7]. Traditional content -based recommender system s use a TF -IDF method to find the top  X  X  X  words from each document a user visits and then uses these keywords to locate recommendations. For example, [1 1] performs its recommendations by using the top keyw ords as a query to a search engine. However, this model relies heavily on the exact keyword match and does not consider ambiguities present in natural language such as synonyms and polysemy. It is also inscrutable to users, who may have a hard time determi ning which words in their profiles are important and which may be skewing their results to irrelevant recommendations. In contrast, o ur method creates a concept -based user profile for each user, based on visited documents , based on the ACM Computing Classi fication System (CCS) [12]. The categorization process, used to categorize both visited documents and documents in the collection, can serve to disambiguate keyword terms. By summarizing the profile using just a few concepts , it is also easier for a user t o manage and understand . Our recommender system makes use of this user profile to suggest documents the use r might be interested in.
 In this paper, we report on our initial work on the content -based recom mender system for users of the CiteSeer x di gital lib rar y. We have found that our system provides good accuracy while avoiding many of the problems of both collaborative and keyword approaches. Traditional recommender systems are usually classified based on what kind of information they use and on how they use that information [ 1]. The kind of information used can be content -based, collaborative, or a hybrid approach. Content -based approaches compare the contents of the item to the contents of items the user has shown interest in previously. Coll aborative systems determ ine similarity based on collective user -item interactions, rather than on any explicit content of the items. The infor mation in from either content or collaborative approaches can be used for either memory -based or model -based algor ithms. Memory -based systems calculate recommendations on -the -fly based on previous user activities. Model -based systems use training set to train a model, and then use the trained model to make recommendations. Memory -based methods are simpler, seem to wor k reasonably well in practice, and new data can be added easily and incrementally. However, this approach can become computationally expensive, in terms of both time and space complexity, as the size of the database grows. For model -based algorithms, the m odel itself may offer added value beyond its predictive capabilities by highlighting certain correlations in the data, offering an intuitive rationale for recommendations, or simply making assumptions more explicit [1 0]. Our system is content -based with bo th memory -based and model -based attributes. Accordingly, we focus here on content -based and hybrid approaches that use either memory -or model -based systems.
 Adomavicius et al. have presented an interesting survey of recent existing recommender systems. Th ey found that since content -based systems are designed mostly to recommend text -based items, the content in these systems is usually described with keywords [ 1]. For example, a content -based component of the Fab system [2], which recommends Web pages to us ers, represents Web page content with the 100 most important words. Basu et al [3] model the task of assigning technical papers to conference reviewers as a problem of recommending technical papers to the authors based on their interests and background. Th ey showed that their content -based retrieval methods can exceed the performance of collaborative methods within the context of peer reviewing of papers. In contrast, our work uses far fewer distinct concepts for each profile, and the concepts correspond to the already -familiar ACM concepts . Chandrasekan et al. presented work similar to our concept categorization approach in [ 6]. The system builds profiles for authors based on their authored papers in the CiteSeer database. Based on similarities between the author concept profile and concepts for documents in the collection, additional papers are recommended to the author. Our work differs in creating user profiles which is based on using past documents viewed rather than on authored papers, extending the rec ommendations to CiteSeer x users as well as authors . The conceptual recommender system creates a user profile for each of the users visiting our CiteSeer x mirror and makes use of this user profile to identify the interests of the user. To train the concept classifier, a ll documents in the collection were parsed and those documents that contain standard ACM tags were considered as training documents. Remaining documents in the collection were categorized into a predefined set of concepts according to the ACM's Computing Classification system taxonomy [ 12 ] using the model created from the training set. The ACM X  X  taxonomy is 3 levels deep with 368 concepts. Thus, each document in the CiteSeer x collection has an author -assigned or system -assigned set of concepts . Next, w e built a login system for our mirror . This login system has three functions. We keep track of the documents visited by registered user s for a particular query entered and then make use of this data to create a user profile for the user. The user profile contains the ACM concepts the user is interested in ranked in descend ing order. This is a dynamic user profile that is updated each time the user visits a new document. The concepts in the user profile are then used by the recommender system to recommend documents for the user. Figure 1 shows an a rch itectural diagram for our Conceptual Recommender sy stem for CiteSeer x . User
Detai ls The system consists of three modules: Each of thes e modules is exp lained in the following sections . To begin with, all the documents in the CiteSeer database are classified into a set of predefined concepts in the ACM X  X  Computing Classification System (CCS) . This 3 -level deep hierarchical set of concepts conta ins 369 total concepts. The classification is done in two stages. The main objective of a profiler module is to create a user profile for the users of CiteSeer x for whom we are trying to recommend papers. We tr ack the documents visited by a particular user by storing the click track of the documents visited by the user. This visit history is input to the profiler module as a sequence of document IDs . We now retrieve the top three concepts or concepts and their c orresponding weights wt for each of the documents visited by the user . Here , wt refers to the degree of association between a document and a n associated concept as calculated by the categorizer. We then create the user profile using the concept and the w eight information. The concept and weight pairs are initially sorted according to the concepts . If we have more than one instance of the same concept with different weights, these weights are added to compute the final weight associated with that particula r concept in the user profile. wt ( cp , j ) =  X  wt ( cp, i ), for all documents i for user j Thus the final output of the profiler module is a list of ACM concepts and their corresponding weights the user might be interested in arranged in decreasing order.
 Let us now consider an example to explain the profiler module. Suppose that we have 2 documents that the user has visited, D1 and D2 . The to p three concepts and their corresponding weights for each document are retrieved from the database. Let ((A, 0.1), (concept, wt) pairs for the documents D1 and D2 respectively. . The wei ghts for the concepts associated with the user X  X  visited documents are accumulated to produce a profile. For example, the profile constructed from D1 and D2 would contain, in decreasing order of concept weight: Thus, t he user profile or a list of concept -weight pairs , where the weights represent the amount of interest a user might have in a particular c oncept . The recommender module uses the output of the user profile as the input. The final output of a recommender module is a set o f recommended papers for a user . For each concept cp in the user profile, the recommender module retrieves the documents in CiteSeer x that have concept cp as one of the ir top three concepts, as determined by the classifier. These documents are added to the list of possible recommendations. The weight of that document is calculated as weight associated with the concept cp in the user profile multiplied by the weight associated with the concept cp for the docum ent . So the final weight of the document would be We conduct several experiments in this section to evaluate the accuracy of our method. Additionally, we varied the number of concepts considered to determine the optimal number that removes ambiguity while avoiding spurious or irrelevant concepts . The dataset for our study is a subset of the CiteSeer CiteSeer x is a search engine and digital repository of scientific and academic papers with major focus in the field of computer and information science. The colle ction contains over 5,0 00,000 documents . Our experiments were conducted over a subset of 1,000,000 documents from the collection . We conducted a user study to determine the quality of our recommendations. Our study included 7 volunteer professors and graduate stu dents. Each user entered 3 queries and we tracked the first 10 documents visited by each. These documents are then input to the profiler module. The output of the profiler module , a user profile in the form of a set of weighted concepts, is the input to t he recommender module . We evaluated the recommender X  s accuracy as the av it produced based while varying the number of concepts extracted from the user profile. We evaluated the recommendations produced from the top weighted 3, 6, 9, and 12 concepts contained in each user profile. For each method, we collected the top five recommended documents . The documents from all methods were then merged and randomized and presented to the user for their feedback. Users were asked to judge them as ver y relevant (2) , relevant (1), or irrelevant (0) . Figure 2: Effect of number of profile concepts on precision. Figure 2 shows the results obtained by collecting user feedback and averaging it over the users in the study. The x axis shows the rank order o f the recommendation and the y axis the average user judgment for documents at that rank . Looking only at the top recommendation (rank 1), all methods were equivalent with an average user judgment of 1.4 (midway between relevant and very relevant). Howev er, the second and third ranked recommendations are higher when only the top 3 concepts from the user profile are used as the basis for the recommendations. Overall, these results indicate that recommending documents based on the top 3 concepts from the us er profiles performed the best , compared with the top 6, 9, or 12 concepts . In this paper, we describe a novel way of recommending documents to users of CiteSeer x . We used the ACM classification tree and the documents visited by the user to create user profiles. In order to evaluate our method, we included 7 subjects in a user study including the professors and graduate students in Computer Science &amp; Computer Engineering at the U niversity of Arkansas. User profiles were created for these users and recommendations were made from the CiteSeer x collection . We draw the following conclusions from this initial experiment: Currently , we are working to compare our method with traditional keyword -based recommenders and also conducting experiments to determine the ideal number of concepts and number of user clicks needed to get accurate recommendations . We are also integrating our system with the core CiteSeer x project. This research was supported in part by the National Science Foundation grant number 0454121: CRI: Collaborative: Next Generation CiteSeer . [1] Adomavicius, G., and Tuzhilin, A. 2005. Toward the next [2] Balabanovic, M., and Shoham, Y. 1997. Fab: Content -Based, [3] Basu, C., Hirsh, H., Cohen, W., and Nevill -Manning, C. [4] Bollacker, K., Lawrence, S., and Giles, C.L. 1998. Citeseer: [5] Burke, R. 2007. Hybrid Web Recommender Systems. In: [6] Chandrasekan, K., Gauch, S., Lakkaraju, P., and Luong, P -[7] Councill, I.G., Giles, C.L., Iorio, E.D., Gori, M., Maggini, [8] Gauch, S., Speretta, M., Chandramouli, A., and Micarelli, A. [9] Geisler, G., McArthur, D., and Giersch, S. 2001. Developing [10] Pennock, D.M., Horvitz, E., Lawrence, S., and Giles, C.L. [11] Salton, G., and Buckley, C. 1988. Term weighting [12] The ACM Computing Classification System, 
