 In current applications, the deep web has become a very important resource for data analyzing, data integration and data mining since it contains high-quality information i.e. structured data records. However, data sources of the deep web provide their data by web interfaces that are presented with HTML and consist of labels and fields. To accurately access the deep web, we need extract the schema of web interfaces. This work is called understanding web interfaces in [8]. The schema of web interfaces has a tree structure, in which text tokens are regarded as semantic labels of input fields or their groups. The goal of extraction is accurately grouping labels and fields into a hierarchical presentation that express the schema of interface. For example, figure 1 shows a web interface of automobiles, in which the label  X  X odel X  is used to express the semantic of its following input field. This work is very important for deep web data extraction [9, 10], deep web integration [11, 12], building unified query inter-faces [13]. Some researches [1] have provides methods to discover web interfaces accurately. But they did not address the problem of understanding web interfaces. Existing methods [2,3] solve this problem with the structure of source code. We call them as the code structure-based method (CSM). They parse the source code of inter-face into an element sequence or a DOM tree, and match label and field based on their distances in the structure of DOM tree. However, when the structure of web interface is complex, CSM will wrongly group labels and fields. For example, in figure 2, two labels are in the same branch of the DOM tree, and their corresponding fields are in another branch. 
Our observation shows that the designers of web interfaces express the schema with the layout of labels and fields rather than the code structure of page. It means the schema of an interface is hidden in its geometric layout structure which is more accu-rate than its code structure. Thus, in this paper, a Layout Object Model (LOM) is proposed to express labels and fields of interface with their display on a browser. rectangular area on a browser. For example, the rectangle L1 in the middle figure 2 denotes the layout object of label  X  Price  X . 
In this paper, the main contribution of this paper is the development of a method that utilizes the visual features of web interfaces constructing a LOM tree to express the schema. We call this method as the layout structure-based method (LSM). The LOM tree has similar features with the R-tree[17] in which each node denotes a rec-tangular area. The construction of the LOM tree is based on our insights on visual features of web interfaces. It is obvious that a LOM tree with appreciate structure can accurately express the schema of web interface, and this LOM tree can be easily transformed into a schema tree of web interface. The other contributions of this paper are as follows: 1 we define a set of rules based on the visual features for the construc-tion of the LOM tree; 2 we propose algorithms for constructing the LOM tree and transforming it into the schema tree. The rest of this paper is organized as follows. Section 2 shows related works. Section 3 presents the problem definition and models for understanding web inter-faces. Section 4 describes the design rules and the algorithm to construct the LOM tree with layout information. In Section 5, we present our experimental results. Section 6 gives a conclusion of this paper. There have been some existing works to extract the query interface schema of deep web sources. We category them into two types: the code structured-based method and the layout structure-based method. The code structured-based method usually parses source codes of web interfaces into special structures. The approach presented in [4] regards the document of a query interface as an interface expression (IEXP). They match the prediction of the right label for a field on the interface expression. This approach is suitable for web interfaces with simple structure, but not the web inter-faces with complex structure. The approach [14] uses the heuristic rule that considers the textual similarity between the name of a field and a label. This heuristic rule is not work when there is no semantic names or ids within elements of web pages. A recent work [5] improved this approach by considering the distance between labels and fields. It first formats the source codes of web interface into XML and builds a DOM tree structure. Then it evaluates the distance of between a label and a field on the DOM tree to match them. But the redundant html elements make the DOM tree more complex which will decrease the accuracy of the approach. Another approach [7] is based on applying data mining algorithms. It first selects a set of sample web inter-faces, and extracts the distance, position relationship, element types of matched label However, the design patterns of web interfaces will evolve with the technique devel-opment of web page. So the decision tree may be not useful for new web interfaces. nested attributes. 
The layout structure-based method [6, 8] is mainly using the visual content features to predicate labels for fields of web interfaces. The LSM is more robust against HTML particularities and code evolution. The approach [6] introduces the notion of viewing query interfaces as visual languages, and hypothesis hidden syntax in query that too many special rules may have conflicts and produce error matching when web techniques evolved. The approach most similar to ours is [8] which builds a schema tree model to express web interface [2]. Give n a query interface, they first construct a tree of fields by semantic order and a tree of labels based on semantic scopes of them. Then they develop an algorithm to derive an integrated tree structure that represents the schema tree of the interface based on integrating the tree of fields and the tree of text tokens. However, some interfaces have labels that are aligned to the center and not to the left. The semantic scopes of this kind of labels will be wrongly computed. Our model constructs the LOM tree with features of both layout and R-tree, which will avoid this problem. 3.1 The Schema Model of Web Interface The schema of a web interface can be present with a hierarchical tree called schema tree [8] which expresses the semantic relationship between labels and fields. In the sibling nodes corresponds to the display order of them. The internal nodes render a interface composed with one or multiple fields is mapping to a sub tree in the schema tree. The schema tree presents the related labels of fields and the semantic context of labels. The semantic of labels with lower level are under the context of semantic of their parent labels. The hierarchical semantic structure of example in figure1 is shown in figure 3, in which the schema tree of web interface has 12 query attributes with four levels, and two  X  From  X  and  X  to  X  labels have different semantic, for they have context semantic in their parent nodes with label  X  Year  X  and  X  Price Range  X . In the model of schema tree, an internal node is a label which presents the semantic of labels and fields in its sub tree. The leaves of schema tree are fields with their own labels. 
To model the hierarchical schema of web interface, we define a web interface WI notes the fields directly contained by A i , and Gs={G 1 ,...,G m } denotes a set of groups the nested structure, it is also defined as G i = &lt;GL X , F X , Gs X &gt; , where GL X  denotes the label of field f . Based on our definitions, the hierarchical semantic is expressed with a tree structure that we also call it as the schema tree in this paper. 3.2 The Layout Object Model and LOM Tree In this paper, we propose the Layout Object Model for describing elements of web pages. Each of visual elements is regarded as a layout object which is denoted with a rectangular area in a browser. In the LOM, multiple layout objects can be grouped into a bigger layout object whose rectangular area is the minimum bounding rectangle of these layout objects. So, we can construct a layout tree by recursively grouping layout objects of a web page. Given a web interface, there are many layout trees that have different structures by grouping labels and fields with different order. It exist a layout tree whose structure is the same with the structure of its schema tree. We call this layout tree as the LOM tree in this paper. In the LOM tree, a leaf node is a basic layout object mapping to a label or field, and an inner node is a grouped layout object that is denoted by a MBR of its child nodes. The root of the LOM tree is the area that contains all elements of a web interface. The LOM tree can represent the hierarchical semantic relationship of labels and fields for a web interface. Therefore, we build the LOM tree to extract the schema of interfaces. Figure 4 shows the layout of the web interface in figure 2 and its LOM tree structure. R1 denotes the area of interface and is the root node of the LOM tree. Rectangle Ri is mapping with six query attributes. Li and Fi denote the layout objects of labels and fields. 
Then we formulize the LOM tree model of web interface as follows: an LOM tree of web interfaces is defined as LT , in which each node denotes a rectangular area in (xr and (xr i , yb i ) is the coordinate of the right-bottom corner of the rectangle. These two upper bound and bottom bound in vertical. For example, R1 is the root node of the web interface in figure 4, and the boundary of its rectangle is presented by the points (xl 1 , yu 1 ) and (xr 1 ,yb 1 ) . In this section, we describe the methodology for the construction of the LOM tree. There are some issues to be addressed. First, the structure of the LOM tree must be matched with the structure of schema. The second problem is matching the semantic label for a given field. 4.1 The Design Rules for the LOM Tree Based on the features of HTML and web query interfaces, we abstract them as a set of design rules that determine the construction of the LOM tree. Rules can be classified layout features. Semantic rules control the grouping of labels and fields by semantic features. Rule 1 to 3 belongs to the basic rules, and others are the semantic rules. 
Rule 1: Labels and fields are organized top-down and left-to-right in the layout of web query interfaces. Rule 2: Each two sibling nodes has no overlap area. 
Rule 3: Let R is an internal node of a group, and the left-top point is the origin of where &lt;(xl i , yu i ), (xr i ,yb i )&gt; is the coordinate of labels and fields in the group. 
Rule 4: If label L i and L j has different text style on their text token, they are in the different semantic levels, and the MBRs of label L i and L j can not be grouped directly. 
Rule 5: If label L i has a larger or stronger font than label L j , the semantic level of L i is higher than that of L j . 
Rule 6: If field F 1 and F 2 are the members of the same group, text styles of their la-bels are also the same. Rule 7: Fields with the same name value in HTML are in the same group. 
Rule 8: If a label is used to denote the semantic of a group, its node is the sibling of the node of the group, and its MBR is on the left or above of the MBR of the group. 
Rule 9: If a field has an own label, the orientation of label MBR is on the left , right , above or below of its MBR, and their nodes should be siblings in the SR-tree. 
Rule 10: A label is used to denote either the semantics of a field or of a group of fields, but not both. The first rule is obvious for the predicted pattern of human browsing web pages. denotes a query attribute, it has no overlap area with other groups of attributes. These patterns are used to avoid confusing user when user input values for his query. Rule 3 defines the formula to get the boundary of an internal node. To construct the accurate LOM tree, we must consider the semantic hierarchy for labels and fields. There are several heuristic rules (Rule 4 to 6) for employing the text style of label. The label of a group has a more distinct text style than the labels of its subgroups or fields. Rule 7 is used to group related fields based on the feature of HTML. The fields with the same name value are grouped as one parameter in the request of HTML. Rule 8 to 10 are defined to match related labels for fields and groups with the orientation of labels. Rule 8 presents the position relationship between a group and its label. We separate the area around the MBR of a field into 8 sectors, as shown in figure 5. The four sec-tors, denoted with LS (left sector), RS (right sector), AS (above sector) and BS(below with CS1 to CS4 are blind sectors, because labels entirely in those areas can not anno-tate the semantic of the center field in design pattern of web interfaces. 4.2 The Algorithm for the Construction The most difficult challenge on constructing the LOM tree is to make its structure similar with the structure of semantic hierarchy of the web interface. In this paper, a basic layout tree is firstly constructed to satisfy the basic rules. Then, it constructs the LOM tree by adjusting the structure of the basic layout tree. In our approach, we gen-erate the basic layout tree based on the code structure-based method. 4.2.1 Generating the Basic Layout Tree The first step of our approach is generating the basic layout tree. With the code struc-ture-based method, we first parse the source code of the web interface into a DOM tree, such as the left haft in figure 2. In the DOM tree, all vision elements of HTML are leaves, and an internal node contains one or multiple labels and fields. To trans-form the DOM tree into a layout tree, the internal nodes that annotate the text style of a label are combined with the node of la bel, and element nodes unrelated with the layout are eliminated from the DOM tree. After this operation, we only reserve nodes of labels and fields and internal nodes that contain labels and fields in their sub trees. Then, we mark each leave node with their coordinates of MBR which are calculated by Rule 3. Consequently, each node of the DOM tree is denoted with MBR, and the DOM tree can be regard as a layout tree. This layout tree satisfies the basic design rules we have defined. It is because the structure of the DOM tree of interface is de-signed to describe the layout of HTML elements in web browsers. Figure 6 shows an example of the transformation. 4.2.2 Adjusting the Structure of the Basic Layout Tree to the LOM Tree The basic layout tree is similar with the DOM tree of interface, so it can not be used to present the semantic hier archy of interface schema. Therefore, we need adjust the structure of the basic layout tree by repl ace labels and fields. We develop an algo-rithm to derive the LOM tree. The detail of the algorithm is given in Algorithm 1. 
In Algorithm 1, we first traverse the Basic layout tree with pre-order to build a interfaces, this order is the same with the layout order that is top-down and left-to-right. Then we group fields with the same name value based on Rule 7 (Line 2). To group a set of fields, we adjust their positions in the f-list : suppose f i is the first field of group g that contains k fields, we move other fields of g orderly following f i in f-(Line 3) is to match candidate labels for each field of f-list . Candidate labels include twp types: candidate own labels L co and candidate share labels L cs . Given a field f i , we discover its candidate own labels according to Rule 9. The own labels of f i are in the four orientations that are left , right , above and bellow , and in each direction only one candidate label are selected based on the distance of two MBR. 
To develop the matching algorithm, we further define some matching rules MRules must be not overlap or overlay with another field f X ; (2) if a label l describes the se-mantic of a group g , the MBR constructed with l and g must be not overlap or overlay label in their orientation, and f is the closest field in their orientation. If there is a field For these fields, we match candidate share labels by searching closest labels in the four directions. The MBR of a field f and its candidate share label l must only contain or overlap other fields. 
Then, the fourth step (Line 4 to 15) orderly accesses each field of f-list to match a fields in g by procedure matchGroup . Procedure matchGroup selects candidate own cording to Rule 6. However, there may be labels with different orientation satisfied sharing the same label with other fields. Procedure matchField process f i by checking another candidate own label with the same style, we select the right label as their own label and assign the first left label as group label according to Rule 8. For fields that are assigned a group label, we generate a new group g k with them in the algorithm. 
Once labels are assigned to fields, procedure doAdjustTree adjusts the structure of the basic layout tree to satisfy features of the LOM tree. The algorithm is given in Algorithm 2. 
The adjustment of the example in figure 6 is shown in figure 7. Current group g contains F1 that has own label L1 (Figure7(a)). F1 is moved under R2 as a sibling of L1 and an internal node F4 is inserted (Figure7(b)). In this structure, lca of origin and target parent is R1 and MBR of R2 overlays MBR of R3 in top of Figure7(b). So, R4 is removed and R1 becomes parent of R4 and L2 (Figure7(c)). This structure of Basic R-tree is obviously satisfied Rule 2. 
When f-list is null, it means all fields have been grouped with labels and is replaced in an appropriate branch in BT . After that, we assign the current Basic layout tree as the LOM tree LT . However, the LOM tree may require additional adjustments (Line 16) to handle the semantic structure. One operation of adjustments is removing re-dundant nodes. Internal nodes that have the same MBRs with their exclusive child are removed from the LOM tree. Another operation is to group existing groups and assign label for the new group, which constructs the semantic hierarchy of interface in the LOM tree. In the LOM tree, a label that is not grouped with a field is regarded as the label of a group. 4.3 Transformation of the LOM Tree into the Schema Tree The LOM tree presents the hierarchical semantic information of interface by its hier-archical structure on MBRs of nodes. In the LOM tree, all semantic labels is in leaves, which is not satisfied the definition of the schema tree. So we use an additional opera-tion to transform the SR-tree into the schema tree of interface. In the transformation, a schema tree. For a given group label l in the LOM tree, we move it to replace its par-comes an internal node and fields of group are in its sub tree. Therefore, a group g i in after we remove unmatched labels and unnecessary internal nodes from the SR-tree, the schema tree with the hierarchical semantic structure of interface is generated. Figure 3 shows the schema tree of the interface in figure 1. 5.1 Dataset The web interfaces used in our experiments is the dataset ICQ and WISE. ICQ con-tains query interfaces to the data sources on the Web over five domains: airfare, automobile, book, job and real estate. For each domain, 20 query interfaces are collected from invisibleweb.com and yahoo.com. Moreover, providers of ICQ have manually transformed interfaces into schema trees. WISE consists of 147 web inter-faces from seven domains: books, electronics, games, movies, music, toys and watches. All three datasets are downloadable from their web sites. To get the posi-tions of labels and fields in web pages, we use a java open source library named cobra [16] which is a part of the lobo browser project. 5.2 Evaluations We evaluate our approach according to different metrics. The metrics are: Labeling fields: This measure is used to evaluate the accuracy of matching labels for fields in our algorithm. We compute the ratio of the number of correctly labeled fields to the total number of fields. Labeling groups: This measure is used to evaluate the accuracy of matching labels for groups in the interface. We compute the ratio of the number of correctly labeled groups to the total number of groups. Structure similarity of schema tree: This measure evaluates the quality of the schema tree which is extracted by our algorithms. We compute this metrics based on the structural tree edit distance which is the minimum number of operations to convert a tree into another. The precision of schema tree is defined as P s = (N l -D s )/N l , where N is the number of node in extracted tree and D s is the tree edit distance. The recall of accuracy of structure of the extracted tree. Figure 8 shows the results of our experimental study on the dataset ICQ and WISE. We achieve high accuracy on both datasets in three metrics. The results of structure measure are worse. It is leaded by the illustrative text in interfaces which interfere with the structure of LOM tree. Moreover, the open source code used in our experi-ments has some layout mistakes when parsing some special web pages. So the accuracy of our algorithms can be improved by programming. Figure 9 shows the comparison between our layout method (denoted as LOM) and the code structure method (denoted as DOM). Our LOM method achieves higher accuracy in these inter-faces, especially for interfaces with the top-down layout feature and hierarchical structure of schema. In this paper, we present a novel approach for extracting the schema tree of web inter-face with the hierarchical semantic structure. Different from previous approaches, our approach regards the semantic layout of web interface as a layout tree structure. Based on the visual layout features of web interface, we design a set of rules for con-structing the LOM tree to express semantic hierarchy. We regard each label and fields on interface as a MBR in web page layout, and construct the LOM tree from the DOM tree of interface according to rules. Th e LOM tree can be transformed into the schema tree of interface with high accuracy. We execute our experiments on a wide range of web interfaces with multiple domains. The experimental result shows that our approach extracts the schema of web interfaces in a higher accuracy. The future work is improving the accuracy of our algorithm by accurately generate the position of labels and fields. Acknowledgments. This paper is supported by the National Natural Science Founda-tion of China under Grant No.60973021 and 61003060, the 863 High Technology Foundation of China under Grant No. 2009AA01Z131, the Fundamental Research Funds for the Central Universities under Grant No.N090104001. 
