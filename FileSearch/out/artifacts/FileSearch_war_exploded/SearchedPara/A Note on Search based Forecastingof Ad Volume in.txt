 In contextual advertising, estimating the number of impres-sions of an ad is critical in planning and budgeting adver-tising campaigns. However, producing this forecast, even within large margins of error, is quite challenging. We attack this problem by simulating the presence of a given ad with its associated bid over historical data, involving billions of impressions. This apparently enormous computational task is reduced to a search task involving only the set of distinct pages in the data. Furthermore the search is made more effi-cient using a two-level search process. Experimental results show that our approach can accurately forecast the expected number of impressions of contextual ads in real time. H.3.3 [ Information Storage and Retrieval ]: Informa-tion Search and Retrieval X  search process ; H.2.8 [ Database Management ]: Database Applications X  data mining Algorithms, Experimentation, Measurement, Performance Web advertising has become a major industry. Sponsored Search (SS), which displays ads on the result pages from a search engine, and Contextual Advertising (CA), which places ads within the content of a Web page, have been the main advertising channels used to distribute online ads. Different from traditional media, the prevalent pricing model for online ads is that the advertisers pay a certain amount for every click on the advertisement (pay-per-click or PPC).
In CA, rather than placing generic ads, it seems prefer-able to have ads related to page content to match the user interest and thus to increase the probability of clicks, called click-through-rate (CTR), which can be approximated by a similarity score Sim a,p between ad a and page p . Given page p , we place the ads that maximize Score a,p def = Bid a  X  Sim where Bid a is ad a  X  X  bid in the PPC model. Sim be defined in various ways, and in this paper, Sim P the weights of feature f on ad a and page p , respectively. Thus, advertisers eager to reach more customers have two options: crafting their ads to improve Sim a,p or increasing their bids. In either case, the advertisers are interested to know what is the effect of these changes. A simple approach is to try a test ad and analyze the effect after a long while, which is inefficient and has a huge turn-around. Therefore, a real-time forecasting system has obvious applications for ad selection, campaign budgeting, and advertising strategy.
We propose to forecast ad impressions in real time by re-playing historical page views with the associated ads. Given ad a and its bid Bid a , we consider all CA opportunities over, say, the last week, and check how often ad a would have been shown if it were in the system, i.e., how often Score a,p have beaten the score of the lowest scoring ad historically shown on p , minScore p . The impression rate is then used to predict the impression volume over, say, the next week.
The billions of past CA opportunities can be collapsed into a relatively small number of distinct pages and furthermore we devise an efficient method to greatly reduce the number of pages to be considered. Using a standard PC with 2GB memory, it takes about 10 ms for our system to forecast the impression volume of an ad, over 700M CA opportunities.
We build an inverted index for historical page views, and collect the number of page impressions IMP p and minScore offline . Test ads are sent online to query the page index via a two-level search process: at the first level, an inexpensive approximate evaluation is conducted to identify the set of candidate pages on which the ad could have been shown. In detail, we check if ad a could be shown on page p by comparing an upper bound of Score a,p with minScore p , i.e., maxWeight f represents the maximum weight of the feature f in any page. For efficiency, the value of maxWeight f can be pre-calculated offline as well during index building for each feature f . At the second level, a full evaluation is done for each candidate page and the forecast counter is increased accordingly if a test ad X  X  score beats minScore the candidate page p . The first level filtering does not alter the final results X  X e would obtain exactly the same results even if we fully evaluate every page p at the second level.
We implement the two-level search process by adapting the WAND operator [1]. At the first level test, we evaluate WAND ( X f 1 , w f 1 ,a  X  maxWeight f , where X f i is an indicator variable for the presence of query feature f i in page p and | a | is the number of features for ad a . If WAND is true, a full evaluation is performed.
The original WAND iterator [1] is used to obtain a ranked list of documents relevant to a query. To do ordinary search using WAND, the threshold (the last argument of WAND) is set dynamically to the minimum score of the top results found so far as the posting list cursor C f advances. The threshold is fixed for pages between two consecutive full eval-uations. However, in ad impression forecasting, the thresh-old minScore p / Bid a is page dependent since minScore different for each page and, for a given page, the threshold does not change at all no matter how the cursors move.
To take advantage of the page difference in minScore p , we index the pages in increasing order of minScore p (i.e., pages with smaller PIDs (page identifier) have lower minScore p so that it becomes more and more difficult to have the test ad shown when the posting list cursors move to larger PIDs.
In our new WAND iterator, the core method nextCan-didate() repeatedly advances the individual feature cursors until it finds a candidate page to return for full evaluation.
The nextCandidate() method invokes three helper func-tions: sort(), findPivotFeature() and pickFeature(). The first helper, sort(), sorts the features in non-decreasing or-der of their current PIDs, and findPivotFeature() returns pivotFeature  X  X he first feature in the sorted order for which the accumulated (weighted by w f,a ) upper bounds of all fea-tures preceding it, including it, exceed minScore p / Bid last helper, pickFeature(), receives as input a set of features and selects the feature whose cursor is to be advanced.
Note that if we indexed the pages not in increasing order of minScore p , minScore p / Bid a for a larger PID could be actually lower than for a smaller PID and valid candidate pages might be incorrectly skipped for full evaluation.
We collected two weeks of actual impression events from a random set of hosts participating in Yahoo! X  X  ad network, for about 1.3B impressions, and 10M textual ads were chosen at random from Yahoo! X  X  ad database. The data were split into (half/half) a training set and a test set. Naturally, many Table 1: Average absolute relative error of fore-casted impressions of at different impression levels. #Impressions #Ads Error 90% Interval 0-2000 2307 26364.2% [-100%,1e5%] 2001-5000 759 157.7% [-100%,498%] 5001-10000 768 69.7% [-99.7%,196%] 10001-20000 406 61.0% [-79.7%,156%] 20001-50000 708 54.6% [-60.4%,140%] 50001-100000 287 48.0% [-54.5%,112%] 100001-200000 186 32.0% [-62.6%,69.8%] 200001-500000 185 32.8% [-60.3%,75.4%] 500001-1000000 102 28.6% [-53.3%,55.4%] 1000001-10000000 156 15.7% [-31.3%,28.8%] pages appear both in the training set and test set. However, due to the dynamic nature of the Web and to traffic vari-ations, those pages are not identical and they differ with respect to both composition and impression counts.

We evaluate our system by randomly picking approxi-mately 6000 sample test ads and compare the forecasted impressions based on the training set with the actual im-pressions from the test set. We split the test ads according to the impression level and report the number of sample ads at that level, the average absolute relative error and the corresponding 90% confidence interval in Table 1. The 90% interval is a range such that 90% of the test ads have a relative error in that range. The average absolute relative error becomes smaller when the number of impressions be-comes larger, and the confidence interval becomes tighter. Our approach can also display an impression volume vs. bid curve to help advertisers make cost-effective decision on bids.
In terms of efficiency, experimentally, our approach is demon-strated to respond in sub-seconds. On an Intel Xeon 3GHz PC with 2GB RAM, with the inverted page index and other offline information kept in memory, the average evaluation time for a (test ad, bid) pair is 10.1 ms and we require 377.1 ms for curve plotting with 100 different bid levels.
We have presented a search-based method for ad impres-sion forecasting of new ads in contextual advertising. To make the search feasible, we first reduce the search over the past impressions into a search over the unique Web pages in those impressions. Then we search the space of pages using a two-level search process: at the first level, an inexpensive approximate evaluation is performed to identify candidate pages on which a test ad could possibly have been shown; at the second level, the candidates are fully evaluated and their contribution is counted. Experimentally, we demonstrate that our approach can accurately forecast impressions of ads in the higher range of views per day in real time. As such, it can be used by mid-size and large advertisers that run campaigns with millions of ad views per day. Our approach can also be used for bid suggestion, and ad evaluation. Efficient query evaluation using a two-level retrieval pro-cess. In Proceedings of the 12th International Conference on Information and Knowledge Management , pages 426 X 434, 2003.
