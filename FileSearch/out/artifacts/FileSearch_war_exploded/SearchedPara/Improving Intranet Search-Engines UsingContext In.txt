 Information in enterprises comes in documents and data-bases. From a semantic viewpoint, both kinds of informa-tion are usually tightly connected. In this paper, we pro-pose to enhance common search-engines with contextual in-formation retrieved from databases. We establish system requirements and anecdotally demonstrate how documents and database information can be represented as the nodes of a graph. Then, we give an example how we exploit this graph information for document retrieval.
 Categories and Subject Descriptors: H.3.3 [ Informa-tion Storage and Retrieval ]: Information Search and Re-trieval General Terms: Design, Management.
 Keywords: Intranet search, context. Enterprise intranets contain two classes of information. On the one hand, enterprise workflows require documents such as email notifications, plans, reports, meeting min-utes, web pages etc. Typically, documents reside in content management systems or shared directories. On the other hand, databases contain information for planning, opera-tional management, controlling etc. Our approach bases on the notion that effective document retrieval in enterprises requires both information kinds.

Current search engines exploit the document content and limited meta data such as document title, author, and file name. So-called  X  X emantic X  search engines additionally in-volve context information from domain-specific ontologies which are provided by domain experts and knowledge engi-neers. In contrast, our approach relies on the expertise and quality of the enterprise X  X  own information systems. Typi-cally, these information systems rely on (relational) database technology. They are highly accurate and comprise all mis-sion critical data. We open up these information systems to enhance common document retrieval systems.

In Section 2 we discuss important requirements. We pre-sent a model to capture document context, the Context-Graph, in Section 3. Section 4 covers related work and Sec-tion 5 concludes the paper.
In this section, we discuss four of the main requirements for a system that exploits database information to improve document retrieval capabilities.
 Information kinds. We do not only want to exploit con-text information from databases, but also we want to open up the system for ontological information (if available). We discuss related work in the semantic search area in Section 4. Keyword search. Many semantic search engines require the user to encode his information need as a formal language expression. We align our engine with average intranet users who have no formal training. Consequently, the engine has to cope with search keywords.
 Performance. Performance and scalability are crucial re-quirements for search engines. Hence, similar to ordinary search engines we need an index-based document-retrieval system, i.e. in an off-line process the system analyzes and pre-processes relevant information and builds up an index. The index is an efficient data structure which allows to re-trieve relevant documents for sets of search terms. Appearance. In terms of user interaction, our system should behave similar to ordinary search engines. This not only comprises performance but also search semantics and ranking. We plan to achieve this by extending an existing search engine. Among others, this implies that we have to find meaningful ranking measures that naturally enhance current measures such as, e.g. tf.idf.

In the next section, we show how we deal with different information kinds and give an impression how we realize keyword search.
To enrich document context with information from data-bases we propose a graph-based model which is compara-ble to the RDF representation of an ontology. The struc-ture of the graph is determined by the enterprise X  X  database schemas. Documents, relational tuples, and values are rep-resented as graph nodes. Attribute and foreign-key relation-ships are represented as edges. Since the graph models the context of documents we call it ContextGraph.

Figure 1 gives an impression of a ContextGraph in a car-engine factory scenario. The middle node represents a ma-chine report written by Peter Brown , which is stored in file:// Z:/docs/xr/2341.pdf . The report contains information about an oil flux problem on finishing machine N23-17. For ma-chine reports and service reports, the enterprise X  X  document management system stores the following meta data: Docu-ment type, author, concerned machine, and document ab-stract. Additionally, from a production-planning database, we know that engine blocks of type K1000 are finished on machine N23-17 . K1000 Finishing Machine N23-17 Machine Report
Consider the following scenario: An employee in the quali-ty-assurance division detects erratic finishing patterns on an engine block of type K1000 . She inputs the qu ery  X  X 1000 er-ratic pattern X  to her search engine. If there is no document containing all search terms, a standard document retrieval system returns many documen ts that contain an arbitrary subset of the given terms. The system has no means to decide which document fulfills the user X  X  information need best. Consequently, the employee has to skim a large result set or to rewrite her query which possibly requires her to ask colleagues or to query the enterprise X  X  databases. Our approach supersedes these activities by returning the ma-chine report that describes that erratic patterns may occur on machine N23-17 that produces engine blocks of type K1000 and rank it as highly relevant. This can be achieved by ex-ploiting connection information from the ContextGraph.
In the database area, related work focuses on database exploration. One typical scenario comprises a user who is running keyword que ries against a data base with unknown schema. Approaches from this domain do not consider doc-uments, but databases only. Where the approach in [5] deals with Lorel databases, there are also a number of solutions for relational databases, e.g. [1, 8]. The latter aim at join-ing tables and then retrieving tuples that contain the search terms each.

The BANKS system [2] captures relational databases by means of a graph model that is similar to the ContextGraph. The system accepts keyword-queries as user input. It re-turns a set of subgraphs, each of which comprises at least one hit-node for each search keyword. Subgraphs are ranked according to node importances and edge weights which are determined at indexing time. BANKS is not aware of doc-uments.

In the area of web information retrieval, there are ap-proaches that use spreading activation algorithms on an in-terlinked web space to find related pages for a given set of web pages [4] or to realize keyword search [9]. These ap-proaches are  X  X ighly costly X  [9] since they do not make use of indexes.

In the Semantic Web area there are a number of solu-tions, e.g. [3, 6, 7, 10], that require web pages that com-mit themselves to ontologies with certain structures. These approaches do not apply to the ContextGraph since they mostly rely on concept hierarchies and linguistic informa-tion like synonyms or antonyms. Furthermore, they are re-stricted to deal with ontological concepts and can not ex-ploit text fragments like document title or abstract. Con-sequently, they are not capable to exploit the high quality information from the enterprise  X  X  databases. In general, on-tologies that match these requirements need to be created and custom-tailored manually for each application domain. This is not only costly but also provokes correctness and consistency issues. In contrast, the ContextGraph repre-sents established and reliable information that is consistent with and relevant for the enterprise X  X  business.
In this paper, we proposed a database supported approach for index-based semantic document-retrieval in enterprises. The motto of our approach is to exploit existing knowl-edge. Instead of relying on domain experts to create domain-specific ontologies, we rather use the valid, consistent and heavily used information that is available in the enterprise X  X  databases. Currently, we are implementing a prototype that shows promising results.
 The work in this project is partially funded by the German Research Foundation (DFG) in the scope of the Collabora-tive Research Center (SFB) 467. [1] S. Agrawal, S. Chaudhuri, and G. Das. DBXplorer: A [2] G. Bhalotia, A. Hulgeri, C. Nakhe, S. Chakrabarti, [3] A. Burton-Jones, V. C. Storey, V. Sugumaran, and [4] F. Crestani and P. L. Lee. WebSCSA: Web search by [5] R. Goldman, N. Shivakumar, S. Venkatasubramanian, [6] R. Guha, R. McCool, and E. Miller. Semantic search. [7] J. Heflin and J. Hendler. Searching the web with [8] V. Hristidis, L. Gravano, and Y. Papakonstantinou. [9] C. Rocha. A hybrid approach for searching in the [10] N. Stojanovic. On analysing query ambiguity for
