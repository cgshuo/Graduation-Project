 1. Introduction
Management of data in the information systems is becoming a crucial need for many organizations due to high data generation rate and the value of information embedded in the data. An individual is often required to submit personal information in order to obtain services. On the other hand, personal data of a large com-munities of users can be a valuable resource for the organizations. This clearly raises the issue of privacy. Uncontrolled access to this information may lead to misuse of private information [1 X 3] .

The number of privacy intrusions are increasing [1 X 5] and the trust of individuals is decreasing [6] .To increase the trust level, there is a need to strengthen the privacy infrastructure. Privacy policies as advocated in [3,7] put a check on such intrusions within an organization. But in real life, individual X  X  information may not remain in the first organization (organization with which a user interacts directly) but may have to be delivered to other organizations for delivery of service. As the information crosses the boundary of first organization, there will be no control of the first organization over the other organization for privacy of infor-mation. These second level organizations may require services from other organizations and consequently the chains of information flow may get formed. To put some control over usage of information along these chains, we propose PRINDA ( PRIvacy NDA ) system. The system can bind every information transfer with a NDA (non-disclosure agreement) between a provider (first organization) and a receiver (other organization) of infor-mation. If any privacy breach gets detected at any level in any chain of information flow, the responsibility can be relegated to the organization breaching the privacy.

In order to build trust, the organizations publish privacy policies stating what personal information can be used for what purposes [6 X 9] . Languages like EPAL, P3P have been introduced to specify the privacy policies [8,10] of an organization and for an individual. However, privacy policies alone are not sufficient to convince potential users to disclose their information. Agrawal et al. [7] proposed the concept of Hippocratic databases where it has been suggested that the databases should take the responsibility for the data privacy as a funda-mental tenet. Hendrik et al. [3] further extend the work in privacy by introducing the concept of contract between a user and an organization , stating that privacy policy alone will not be sufficient for building trust.
According to [3,5,11 X 14] , privacy policies are mere promises and a promise as such has no legal grounds on which to contest a privacy breach, should the data controller not keep the promise.
 Recently in [12] , the authors have advocated the need of privacy agents in their P4P paranoid framework.
Authors call it paranoid as the customer is not supposed to trust the organization to which she gives her per-sonal data. Instead, she trusts an agent which takes care of all the communications between her and the service provider organization. The agent works in a way such that the customer can control the usage of her personal information by the organizations. The authors have explained the agent behavior for different types of infor-mation. However, the authors claim that P4P paranoid framework would help in strengthening privacy of an individual and P3P specifications are mere promises, but their framework also requires P3P promises at times where the agent cannot control its information (customer has to give information to get the service).
Compliance is one of the 10 principles which have been identified in Hippocratic databases [7] . It authorizes the individual to ask for the usage details of her information. The proposed PRINDA framework can help the individual to have the usage details from every organization (to which her information has been shared), and clears the limitation of earlier systems i.e. only usage details of first organization could be provided. 1.1. Contribution
The main contributions of this work are:  X  Identification of the need for automated creation of NDAs between the organizations.  X  Structure of NDA.  X  Workflow for creation of NDAs.  X  Integration of NDA framework with privacy policy framework.  X  Forensic analysis in case any privacy violation is reported. 1.2. Paper organization
The structure of the paper is as follows. Section 2 gives the background and motivation for NDAs. In Sec-tion 3 , we introduce PRINDA in privacy policy framework. Section 3.1 describes the NDA repository struc-ture in PRINDA system and Section 3.2 defines a workflow to populate an NDA. Section 4 discusses the
PRINDA architecture in detail. Section 5 addresses the issue of policy reconciliation between two organiza-tions. In Section 6 , we describe how an NDA framework helps in forensics analysis. Finally, we give conclu-sions in Section 7 . 2. Background work
Non-disclosure agreement (NDA) is defined as an agreement between the receiver and provider of the information [15] . It has been a typical vehicle for effectively delegating responsibility for confidentiality of information in most of the situations in non-automated domains. They only impose responsibility on the part of the recipient organization without any control of the provider (of the data). In case of agreement violation at the recipient-end, the provisions of the NDA can be legally enforced (subject to confirmation of violation at that end).

Earlier work on NDA (in non-automated domains) was concerned about the legal issues [15 X 20] . Emphasis had been laid on the need and contents of NDA to make it legal and hence what to include/not-include in the agreement. Issues about the meaning of those NDAs have been discussed by focusing on the information they had and for which the NDA would be legally tenable. Obligations and responsibilities have also been discussed.

Several types of NDAs have been defined depending upon the directions of information transfer [15,16,20] , i.e. bidirectional (mutual) and one way NDAs. Mutual agreements are used when the information exchange occurs from both sides and one way agreements are used if the information flows from one side only. In this paper, we consider one way NDAs. NDA types are also defined on the basis of functional characteristics i.e. non-disclosure agreements for employment, business negotiations, visitor agreements, etc. [15,16] . The pro-posed PRINDA framework can be used in all these functional domains.

As stated earlier, emphasis had been put on legal issues and hence on contents of the agreements in non-automated domains. Therefore, many properties (generally domain specific) have been identified which should be considered while defining the NDA [15] . These properties include definition of confidential information, exclusion from confidential information, obligations of receiving party, time period for the validity of the agreement, relationship between the parties for any purpose, severability, integration and waiver [15] . Defini-tion of confidential information actually describes characteristics of the information to be protected by NDA. It segregates the confidential and non-confidential information. Exclusion from confidential information further refines the information which will not come under the category of confidential information i.e. the information which was known to the receiving party before the contract, or was public. The obligations for receiving party specify the responsibilities of the receiving party after receiving the information. Relationship points out that nothing contained in the agreement shall be deemed to constitute either party, a partner, joint venturer or employee of the other party for any purpose. Lastly, the severability defines the portion of the agreement to be valid according to the court as there may be some provisions which are not enforceable. The importance of NDA has also been discussed in [19] , where the author gives the litigated issues between the two companies and shows the value of NDA. The questions like why to use the NDA, when to use the NDA, what does the
NDA cover, what can the recipient do with information, how long does the NDA last, and what happens when the NDA terminates, are discussed in [20] . It is important to note that all these works are carried out for non-automated domain. 2.1. Motivation
To show the advantages of using NDAs, consider the example of an individual, say Judy, purchasing a commodity from an organization, say ABC. She provides personal information (i.e. name, address, credit card number, etc.) to purchase some commodity (e.g. a specific book) and expects ABC to provide the ser-vice and maintain the confidentiality of the information (and be in legal position to take action if the sit-uation so warrants). ABC has stated a privacy policy which it has deployed to satisfy its clients. It also collects user (e.g. Judy) preferences and enforces them. It has to pass data to a payment gateway and a cou-rier company for functional purposes. ABC does keep the privacy preferences of its customers, and tries to respect them, however, it neither can pass user X  X  privacy preferences, nor does it have any control of privacy at the payment gateway and the courier company. Further, these service providers would be servicing not only ABC, but would be offering their services to many organization like ABC. It may further be possible (in fact more likely) that the payment gateway or the courier company may also seek services from channel partners, to whom they will supply data, thereby effectively losing control over privacy. We may note that a customer of ABC deals only with ABC (first organization), paying for all the services of all intermediate service providers (if any) without any knowledge of their actual identities. Judy does not know which cou-rier company is going to supply the product. They also expect ABC to enforce their privacy preferences robustly. Total control of privacy (even at level 1, i.e. at ABC) is a herculean task [3,7] and is almost impossible.
Malicious attempts of intrusions can occur from inside/outside of the organization. Realizing NDA X  X  impor-tance in the privacy policy framework, the automation of NDA in privacy framework has been proposed in this paper. We also give an architecture and integration of PRINDA in privacy policy framework. The inten-tion of using PRINDA is to relegate the responsibilities of violation, wherever it occurs, subject to legal frame-work provided by NDAs. Legal issues and the actual contents of the agreements are not considered, but the need of NDA for privacy related issues in information systems is emphasized. The system, at any point in time, can assist in auditing along the whole chain of organizations, who have been provided a particular piece of information.

We propose that each service provider: (i) provide an authenticated and numbered NDA (Outward NDA) to the organization from which it receives data, (ii) seek an authenticated and numbered NDA (Inward NDA) from the organization to whom it needs to supply data (before actually supplying the data), and (iii) has effec-tive privacy control at its own end. Every organization maintains a database of NDAs (both Inward and Out-ward) which are authenticated and numbered. 3. PRINDA in privacy policy framework
The functionality of PRINDA system is to create and manage the NDAs. It is achieved by its three main components i.e. Inward NDA engine , Outward NDA engine and NDA-Coordinator . As the data transfer takes place in both the directions (for effective delivery of service) in an organization, two NDA-repositories are maintained by PRINDA in each organization. One NDA repository is maintained by the Outward NDA engine and the other is maintained by the Inward NDA engine.

An abstract view of PRINDA is shown in Fig. 1 (an expanded version is given in Fig. 4 ). It also interacts with privacy policy framework, other organization X  X  PRINDA system and the service-manager.

Privacy policy framework maintains and enforces individual (privacy preferences) and organization privacy policies. We assume the privacy policy framework design as given in [7] . The service-manager gets activated in case any service has to be provided to an individual. It finds out service provider organizations for delivery of service (if it cannot provide the service on its own), determines the data (to be transmitted to the service pro-vider organization), the purpose of data transfer and other similar details. It then interacts with its PRINDA system (first level organization) to acquire the NDAs with all the selected service providers.
Whenever data is to be transmitted, service-manager generates an NDA-request trigger with values user-id , organization-id (other service provider-id), data-id and the purpose . The NDA-Coordinator receives the NDA-request trigger and activates Inward NDA engine. Inward NDA engine communicates with other organization (data-receiver) Outward NDA engine through their NDA-Coordinators by generating the NDA-Create trig-ger. It may be noted that every communication between two PRINDA system for NDA creation will be through their NDA-Coordinator.

If an NDA can be mutually agreed between the two organizations, then the data transfer takes place. The approved, authenticated and numbered NDA is kept by both the organizations i.e. data-provider as well as the data-receiver.

The functionality of Inward NDA engine is to bind the data-receiver organization with the NDA. The data-receiver organization has to oblige (enforce) the accepted NDA to avoid itself from penalties. The contents of
NDA should reflect the semantics of privacy policies of the data-provider organization and preferences of individuals whose data is being transferred. In this binding activity, Inward NDA engine selects the particular
NDA from a set of NDA types, populates it with some contents which reflects privacy policy and user pref-erences and sends it to the data-receiver organization through NDA-Create trigger. If the data-receiver orga-nization approves this NDA, Inward NDA engine of data-provider stores the NDA in its Inward NDA repository.

The Outward NDA engine functionality is to either accept or reject the NDA. If it accepts the agreement, then it authenticates the agreement and populates it with required values. It then sends back its acceptance with the generated values to the data-provider. Finally, after receiving the data from the data-provider, it stores the agreement in Outward NDA repository and maps this agreement to privacy policies rules through its privacy framework, so that its privacy framework can control the data usage according to the signed agreement.

It may be noted that for each data transfer, two NDA records are generated, one in the data-provider side by Inward NDA engine and one in data-receiver side by Outward NDA engine. Agreement is kept in Inward
NDA repository at data-provider side and in Outward NDA repository at data-receiver side. Both of the agreements repository have similar structure as shown in Fig. 2 (described in the following subsection). 3.1. NDA repository structure
NDA repository structure is shown in Fig. 2 . The values of the fields marked P are generated by the data-provider organization and fields marked R are generated by the data-receiver organization. Fields containing
P and R both indicate that data provider and data-receiver generate their local values for these fields. Descrip-tion of the fields in the structure is as follows:  X  NDA t ID . This is an NDA sequence number which is generated by Inward NDA engine of data-provider for each data transfer to data-receiver. This sequence number value will be stored by both the data-receiver and the data-provider in their repositories.  X  NDA r ID . This is an NDA sequence number which is generated at the data-receiver side for each data received. This value will also be stored in data-receiver and data-provider NDA-repositories.  X  NDA Type ID . For each transaction, an agreement of a particular type has to be agreed upon by both data-receiver and data-provider organizations. Inward NDA engine of data-provider selects the NDA type and
Outward NDA engine of data-receiver accepts the NDA type. This set of agreement types is stored by both the organizations in their NDA type repository and uniquely identified by their type. The agreement type value is stored for this field in both the repositories for each transaction.  X  Timestamp . This field value is the actual time of data transfer. The data-provider will generate time of trans-mitting the data and the data-receiver will generate time of receiving the data in this field. vider organization for delivery of the data. This value will also be stored by both the data-receiver and the data-provider in their repositories. organization for receiving the data. This value will also be stored by both the data-receiver and the data-provider in their repositories. ver. This value is local data-id of data-provider database in case of Inward NDA repository and local data-id of data-receiver database in case of Outward NDA repository.  X  Organization-ID . This field contains the id value of the organization with which the agreement has been entered into. In case of Inward NDA repository this id refers to the data-receiver organization and in case of Outward NDA repository it refers to data-provider organization.  X  Validity . Validity specifies the time period for which the agreement is valid for the transaction data. This period value will also be stored in both the repository.  X  ACCEPT Bit . This 1/0 bit indicates the acceptance/non-acceptance of the NDA by the target recipient organization.

The workflow for a NDA population ( Fig. 3) , is described in the next subsection. 3.2. Workflow for NDA creation
Workflow for NDA creation is shown in Fig. 3 . The workflow shows sequence of activities for a data trans-fer from data-provider to data-receiver: 1. When service-manager of data-provider generates the NDA-request trigger after receiving request for some service from an individual, NDA-Coordinator receives this trigger and initiates the NDA creation process.
The NDA-Coordinator receives organization-id (organization to whom data has to be transmitted), user-id (individual, whose data is to be transmitted), purpose of usage and data type values. NDA-Coordinator activates its Inward NDA engine with these values. 2. Inward NDA engine then interacts with its organization X  X  privacy framework and gets privacy policies and preferences of the organization and individual (owner of the data), respectively. 3. Inward NDA engine validates all these inputs and checks whether the specified information can be trans-ferred (this process is not fully automated i.e. authorized signatory may have to approve data transfer, scope of automation exists). If information cannot be transferred, it sends REJECT to service-manager through its NDA-Coordinator with proper code which specifies the reason of rejection. Otherwise, it selects the NDA type from the NDA type repository on the basis of all these inputs. It then fills in NDA type code in field NDA Type ID , validity period value in field Validity Period and digital signature in field Auth sign the NDA record. It also fills external recipients, other purposes of sharing, retention period, etc. in the agreement template. It then generates and sets NDA sequence number in the field NDA ment record. Finally, it sends NDA-Create message with this partially created record to data-receiver. 4. When Outward NDA engine of data-receiver accepts NDA-Create message through its NDA-Coordinator with the partially created agreement record, generates its NDA sequence number and digital signature. It records these values in the received agreement record X  X  fields NDA lyzes the agreement record for acceptance/non-acceptance in accordance with its organization policies. If it cannot accept the NDA then it sets field ACCEPT Bit to value REJECT (0) and field Timestamp to its cur-rent time in the agreement record. It stores this record in its Outward NDA repository and sends it back to the data-provider. If it can accept the NDA then it marks ACCEPT Bit to value ACCEPT (1) and sends it back to the data-provider. 5. Inward NDA engine of the data-provider receives either ACCEPT or REJECT signal from the receiver with the agreement record. If it receives REJECT signal it stores the agreement record in the Inward
NDA repository and sends the REJECT signal to service-manager through its NDA-Coordinator. If it receives ACCEPT signal, it sets field Timestamp to its current time value, stores the agreement record in its Inward NDA repository. Finally, it initiates data transfer to the data-receiver by sending ACCEPT sig-nal to its service-manager through NDA-Coordinator. 6. Service-manager of data-provider sends a data transmission request for data transfer. 7. The data is received in the database of data recipient organization. It is saved and a local data-id is gener-ated. It is passed to NDA-Coordinator. 8. Outward NDA engine receives the data, sets field Info ID to value of locally generated data-id, field Time-stamp to its current time in the system. It then stores this record in its Outward NDA repository. It maps this NDA record to privacy policy form in its privacy framework so that it can be enforced. After this, the privacy framework of data-receiver controls the access to the data associated with data-id according to the agreement that has been created. 4. PRINDA architecture
As stated in Section 2 earlier, PRINDA system maintains the agreements for transferred data as well as for received data. Architecture of PRINDA system is shown in Fig. 4 . It has NDA-Coordinator, privacy policy of the organization, individual X  X  privacy policy, service providers information, NDA types database, Inwards X  X 
NDA database, Outward X  X  NDA database, NDA log, Info change manager, NDA updater, Inward NDA selector, Outward NDA creator, Outward NDA analyzer and Inward NDA creator. The description of these components is given below.
The first two components, namely organization privacy policies and individual X  X  privacy policies described below are defined in privacy policy framework. Privacy policies in an organization are enforced by the frame-work so that a trust level can be maintained between an individual and the organization. PRINDA system interacts with this framework to get the policies of the organization and an individual, and to map NDA to privacy policies:  X  Organization privacy policy . Privacy policies specified by the organization mention not only purpose of usage of individual X  X  private information but also specify which information can be used by whom. The policies also specify the retention period of information in the organization. Purposes for an information sharing with the collaborators are also specified in these policies.  X  Individual privacy policy . When an individual gives her information to an organization, she also describes her privacy preferences about the data disclosure in addition to the consent for mandatory policies. All these preferences are maintained in individual privacy policies repository.  X  NDA types database . A finite set of NDA types is kept in PRINDA which can be categorized, e.g. A X  X .
NDA category is chosen (by the Inward NDA selector of data-provider) for a particular data transfer of owner (may be provided by the service-manager) and privacy policy of the data-provider.  X  Digital signature agent . The PRINDA system advantage is to relegate the responsibility to the organization breaching the privacy. This requires NDA to be signed by the authorized signatory of data-provider as well as of data-receiver. It is assumed that each organization authorizes some employees in its organization to sign NDAs. This module takes care of signing the NDA by the authorized signatories. The digital signature agent is activated by the NDA creator module when needed. This module interacts with the NDA coordi-nator to get the signature of the authorized signatory. The NDA-Coordinator may use any electronic sig-nature mechanism as given in [21 X 24] for the authentication of the signatures.  X  Outwards NDA database . This database maintains a record of all NDAs that the organization has entered into for receiving the data. Its structure is same as described in the NDA repository structure section earlier.  X  Inwards NDA database . The database stores the NDA for each data transmitted from the organization. Its structure is same as described in the NDA repository structure section earlier.  X  NDA log . The NDA log holds all the accesses to the NDA system X  X  repositories e.g. Inwards NDA database accesses and Outwards NDA database accesses. NDA log maintained may help in auditing of NDA system for integrity and consistency check if required.  X  NDA-Coordinator . NDA-Coordinator functionalities are to control the functioning and communication routines of the PRINDA system. It activates Inward NDA selector, Outward NDA analyzer, NDA upd-ater, NDA information change manager, Inward NDA creator and Outward NDA creator. It provides the interface to the administrator for defining the NDA types and service providers. It listens to all the events occurring in the system and accordingly invokes the modules for handling the event. It also controls the
NDA log.  X  Inward NDA selector . The function of Inward NDA selector is to select the NDA type after receiving the user-id, service provider-id, data-id and the purpose of the access from the NDA-Coordinator. It analyzes organization policies, user-id X  X  policies and service provider id X  X  information to make this decision. This module also checks for data transmission possibility e.g. whether the individual privacy policies allow for this data transfer. If NDA cannot be created then REJECT signal is sent to service-manager through
NDA-Coordinator.  X  Outward NDA analyzer . At the time of receiving data, the Outward NDA analyzer gets the NDA type from the data-provider. It first generates its NDA sequence number. It checks whether it can accept NDA for the respective information transfer by analyzing the information received with the organization privacy poli-cies. If it can accept that agreement, it will forward that NDA type to the Outward NDA creator. Otherwise it returns the signal for non-acceptance of agreement e.g. REJECT to its NDA-Coordinator, which gets further transmitted along with the NDA sequence number to the data-provider by the data-receiver X  X 
NDA coordinator.  X  Inward NDA creator . Inward NDA creator has responsibilities of populating the Inward NDA repository.
It receives inputs from NDA-Coordinator and Inward NDA selector. It also extracts values from the pri-vacy policies into its temporary buffer. This module generates the NDA sequence number, gets authorized signature through digital signature module and sends all this data to data-receiver with NDA-Create mes-sage.Data-receiver verifies all the received information. If the information is correct, it completes the NDA (by filling up remaining values). It stores agreement in its Inward NDA repository by setting accept signal value to 1. It then returns ACCEPT/REJECT signal to service-manager through NDA-Coordinator by generating a trigger for data transfer. In case it gets REJECT signal from data-receiver with the NDA sequence number, it stores partially filled agreement in its repository by setting accept signal to 0 and sends
REJECT signal to service manager.  X  Outward NDA creator . Outward NDA creator creates the agreement records in Outward NDA reposi-tory. In case of REJECT from the Outward NDA analyzer, it generates the NDA sequence number and creates the record in Outward NDA repository with the information received from data-provider and NDA sequence number. It sets ACCEPT Bit value equal to 0 for this record. Otherwise, if it gets the ACCEPT signal from the Outward NDA analyzer, it creates the NDA sequence number, gets the authorized signature and sends all this information to data-provider through NDA-Coordinator. When finally it receives the data from the data-provider, it stores the data in the database and creates the
NDA record completely in the Outward NDA repository. Then it maps the NDA record to the privacy policy framework policy format so that privacy framework can control the access to the data according to the NDA signed by it.  X  NDA updater . NDA updater functionality is to facilitate update of information in NDA types and service providers information repositories whenever the administrator likes to make changes.  X  Info change manager . It looks after any changes in the policies or data repositories and verifies the changes to maintain the integrity and consistency in the PRINDA system.

The repositories NDA types, NDA log, service provider information, and privacy policies view are shared by both the engines i.e. Inward NDA engine and Outward NDA engine. Inward NDA database is specific to
Inward NDA engine and Outward NDA database is specific to Outward NDA engine. Even though the struc-tures of both the repositories are same as explained in the NDA repository structure subsection the contents in
Outward data repository are for each data received and contents in Inward NDA repository are for each data transmitted. The repository sharing view can be seen from the given Table 1 . 5. Policy reconciliation 5.1. Need for policy reconciliation
The participating organizations publish privacy policies stating what information can be used and for what purpose. These privacy policies differ from one organization to the other. When an individual X  X  private infor-mation needs to be transferred from one organization, say, ABC to the other organization, say, XYZ, then there arises a need to check if the privacy policies of both the organizations agree on the terms that the privacy policy of the individual advocates. We term this process as policy reconciliation. The acceptance/non-accep-tance of NDAs between two organizations depends upon privacy policy reconciliation. This can be a very complicated task as the granularity of reconciliation is cellular for a particular NDA. This would also impose overheads in terms of time and other infrastructure. 5.2. Privacy policy interaction
The privacy policies of ABC and XYZ may be compatible in certain context i.e. some correspondences may exist between their respective roles and purposes. This has been illustrated in Fig. 5 .

Fig. 5 shows the interaction of the privacy policies of the three entities. The privacy policies of these three is the information that may be transmitted (shared and transferred from ABC to XYZ safely and securely).
To find the region of intersection where the privacy policies of all three interacting entities agree we need to write down certain rules as given by Cuppens et al. [25] . Suppose ABC wants to disclose Alice X  X  information to
XYZ, then the three entities that are involved in the process are Alice, XYZ and ABC. If Alice X  X  privacy policy states that her information must be used only when it is needed in a context defined by her, for the purposes stated in her privacy policy then ABC X  X  privacy policy must be compatible with the role, context and purpose specified in Alice X  X  privacy policy. Similarly, XYZ X  X  privacy policy must also be compatible with Alice X  X  and
XYZ X  X  privacy policy in a similar way for the data transfer to take place. To formalize the notion, we consider the following: 1. View . A view is defined as the subset of the information that needs to be transferred from one company to the other. 2. Activity . An activity is the action or the purpose for the fulfillment of which the view needs to be transferred.
 3. Context . A context defines the conditions and terms under which the view may be used for a given activity. For the transfer of a view from ABC to XYZ the following rules must be satisfied: Transfer ( XYZ,ABC,View _ A ):-Activity _ compatible ( XYZ,ABC,Activity _ X,Activity _ A ), Context _ compatible ( XYZ,ABC,Context _ X,Context _ A ), Role _ compatible ( XYZ,ABC,Role _ X,Role _ A ).

This rule says that the View_A can be transferred from XYZ to ABC if and only if Activity_X in XYZ is compatible with Activity_A in ABC, Role_A in ABC is compatible with Role_X in XYZ and Context_X in
XYZ is compatible with Context_A in ABC. 5.3. Reconciliation framework
Fig. 6 illustrates a framework that can be used for the purposes of privacy policy reconciliation: 1. INPUT . The inputs to the system are the privacy policies of both the organizations and the NDA. 2. OUTPUT . The output can be in one of the following three forms: (a) YES . In this case the policies are compatible and the NDA can be accepted.
 (b) NO . In this case the policies are incompatible and the NDA cannot be accepted. (c) Further manual intervention required . In this case the system is unable to determine the compatibility of the policies and hence further manual intervention is required to determine the compatibility of the policies.

The system takes as input the privacy policies of the two organizations and the NDA and checks them for role compatibility, context compatibility and view compatibility and gives the respective output. 5.4. Implementation issues
When we come down to the actual implementation of PRINDA, the policy reconciliation requires that the two policies must be able to talk to each other i.e. if the two policies have been written using different lan-guages and platforms then we need to design an interface or translator that allows the policies to talk to each other to sort out the compatibility issues. The process of privacy policy reconciliation may be automated to a certain degree but there may be a need of manual intervention at some point in the reconciliation process. We propose that a common platform may be devised for the purposes of reconciliation. The process of reconcil-iation would be mapped onto this common platform which would enable reconciliation factoring out the plat-form dependent issues. 6. Forensic analysis In this section, we describe types of privacy violations that can occur in an Information system and how the
NDA framework can help for auditing purpose. We categorize these violations on the basis of number of vic-tims and type of information compromised in the privacy violation i.e. (i) Single victim, specific part from his information, (ii) Multiple victims, similar information, and (iii) Single victim, complete information: getting campaigning calls for a specific drug which can cure her disease of thyroid. Alice knows that the infor-mation of her disease is only with Drugpital, a health organization. Therefore, she complains to Drugpital. After getting complain from Alice, Drugpital has to provide Alice the details of each access made to her data.
Drugpital checks in its organization access records and finds out all the accesses made to her disease informa-tion directly and indirectly by using the mechanism like [26] . Then it checks in its Inward NDA repository and finds out to which organization the contact and disease information has been given (campaigning organization must have contact and disease information of Alice to campaign for a specific drug). It finds that Drugplier is mation due to the NDA it had with Drugplier. Similarly, Drugplier has to analyze like Drugpital and provide all details to Drugpital (detail of access would contain purpose of access and timestamp). An algorithm for collection of access details is given in Fig. 7 .

If Drugpital determines or comes to know that violation has occurred in another organization say Durgaotary (any level organization) then Drugpital can help to provide Alice the NDA which has been created between the two organizations. Note that the input, that Durgaotary has done violation may be an input from outside the system (social engineering) and this determination may require human intervention [27] .

In case NDA between the organization does not force the second level organization to provide access details, then first level organization (Drugpital) can provide only the information of companies with its NDAs and access details in its own organization.  X  Multiple victim, specific information . When multiple customers complain about the leakage of same type of information, the Drugpital after analyzing its own user accesses log (a log which has information of each access made to the database), can determine from Inward NDA log the organizations to which this type of data has been delivered for the service. If it is the single organization then it can complain to the respective organizations about the event and ask them to take the necessary action and provide the details of accesses.
As in previous case, if the customers want to have complete details for each access made to their data, it can be provided to the customers.
 access to each information instead of access detail to specific information. The algorithm for getting the com-plete detail of a customer is given below in Fig. 7 .

In algorithm (given in Fig. 7 ), the recursive call is the communication between the parent organization and the child organization in a hierarchy in which the child organization returns its accesses unionized with the acces-ses it gets from its child organization in the hierarchy. 7. Conclusions
In this paper, PRINDA (PRIvacy NDA) system has been proposed for incorporating the NDA in privacy policy framework. Detailed architecture of PRINDA and its integration with privacy policies framework are discussed by explaining each repository and module in PRINDA system. It is believed that by using PRINDA, the advantages like relegating the responsibility to the organization breaching the privacy policy and providing the detailed information of usage accesses can be achieved.

We leave optimization and implementation issues of PRINDA system for future work. Additionally issues like the automation of NDA acceptance/not acceptance with respect to privacy need to be addressed. Acknowledgements
We acknowledge the support of Department of Information Technology, Government of India sponsored project Design and Development of Malafide Intention based Privacy Violation Detection with thanks for this work.

References
