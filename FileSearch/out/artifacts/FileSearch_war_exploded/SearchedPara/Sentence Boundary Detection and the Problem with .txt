 Many natural language processing tasks begin by identifying sentences, but due to the semantic am-biguity of the period, the sentence boundary detec-tion (SBD) problem is non-trivial. While reported error rates are low, significant improvement is pos-sible and potentially valuable. For example, since a single error can ruin an automatically generated summary, reducing the error rate from 1% to 0.25% reduces the rate of damaged 10-sentence summaries from 1 in 10 to 1 in 40. Better SBD may improve language models and sentence alignment as well.
SBD has been addressed only a few times in the literature, and each result points to the importance of developing lists of common abbreviations and sen-tence starters. Further, most practical implementa-tions are not readily available (with one notable ex-ception). Here, we present a fully statistical system that we argue benefits from avoiding manually con-structed or tuned lists. We provide a detailed anal-ysis of features, training variations, and errors, all of which are under-explicated in the literature, and discuss the possibility of a more structured classifi-cation approach. Our implementation gives the best performance, to our knowledge, reported on a stan-dard Wall Street Journal task; it is open-source and available to the public. We briefly outline the most important existing meth-ods and cite error rates on a standard English data set, sections 03-06 of the Wall Street Journal (WSJ) corpus (Marcus et al., 1993), containing nearly 27,000 examples. Error rates are computed as ( number incorrect / total ambiguous periods ) . Am-biguous periods are assumed to be those followed by white space or punctuation. Guessing the major-ity class gives a 26% baseline error rate.

A variety of systems use lists of hand-crafted reg-ular expressions and abbreviations, notably Alem-bic (Aberdeen et al., 1995), which gives a 0.9% er-ror rate. Such systems are highly specialized to lan-guage and genre.

The Satz system (Palmer and Hearst, 1997) achieves a 1.0% error rate using part-of-speech (POS) features as input to a neural net classifier (a decision tree gives similar results), trained on held-out WSJ data. Features were generated using a 5000-word lexicon and a list of 206 abbreviations. Another statistical system, mxTerminator (Reynar and Ratnaparkhi, 1997) employs simpler lexical fea-tures of the words to the left and right of the can-didate period. Using a maximum entropy classifier trained on nearly 1 million words of additional WSJ data, they report a 1.2% error rate with an automati-cally generated abbreviation list and special corpus-specific abbreviation features.
 There are two notable unsupervised systems. Punkt (Kiss and Strunk, 2006) uses a set of log-likelihood-based heuristics to infer abbreviations and common sentence starters from a large text corpus. Deriving these lists from the WSJ test data gives an error rate of 1.65%. Punkt is eas-ily adaptable but requires a large (unlabeled) in-domain corpus for assembling statistics. An imple-mentation is bundled with NLTK (Loper and Bird, 2002). (Mikheev, 2002) describes a  X  X ocument-centered X  approach to SBD, using a set of heuris-tics to guess which words correspond to abbrevia-tions and names. Adding carefully tuned lists from an extra news corpus gives an error rate of 0.45%, though this increases to 1.41% without the abbrevi-ation list. Combining with a supervised POS-based system gives the best reported error rate on this task: 0.31%.

Our system is closest in spirit to mxTerminator, and we use the same training and test data in our experiments to aid comparison. Each example takes the general form  X  L . R  X , where L is the context on the left side of the period in question, and R is the context on the right (we use only one word token of context on each side). We are interested in the probability of the binary sen-tence boundary class s , conditional on its context: P ( s |  X  L . R  X  ) . We take a supervised learning ap-proach, extracting features from  X  L . R  X .

Table 1 lists our features and their performance, using a Support Vector Machine (SVM) with a lin-with the candidate period, gives surprisingly good performance, and the combination of 1 and 2 out-performs nearly all documented systems. While no published result uses an SVM, we note that a simple Naive Bayes classifier gives an error rate of 1.05% (also considerably better than mxTerminator), sug-gesting that the choice of classifier alone does not explain the performance gap.

There are a few possible explanations. First, proper tokenization is key. While there is not room to catalog our tokenizer rules, we note that both un-tokenized text and mismatched train-test tokeniza-tion can increase the error rate by a factor of 2.
Second, poor feature choices can hurt classifica-tion. In particular, adding a feature that matches a list of abbreviations can increase the error rate; us-ing the list ( X  X r. X ,  X  X o. X ) increases the number of errors by up to 25% in our experiments. This is be-cause some abbreviations end sentences often, and others do not. In the test data, 0 of 1866 instances of  X  X r. X  end a sentence, compared to 24 of 86 in-stances of  X  X alif. X  (see Table 2). While there may # Feature Description Error 1 L = w 2 R = w 3 len ( L )= l 9.12% 4 is cap ( R ) 12.56% 5 int ( log ( count ( L ; no period )))= c 6 int ( log ( count ( R ; is lower ))= c 7 ( L = w 8 ( L = w 1+2 0.77% 1+2+3+4 0.36% 1+2+3+4+5+6 0.32% 1+2+3+4+5+6+7+8 0.25% be meaningful abbreviation subclasses, a feature in-dicating mere presence is too coarse.

Adding features 3 and 4 better than cuts the re-maining errors in half. These can be seen as a kind of smoothing for sparser token features 1 and 2. Fea-ture 3, the length of the left token, is a reasonable proxy for the abbreviation class (mean abbreviation length is 2.6, compared to 6.1 for non-abbreviation sentence enders). The capitalization of the right to-ken, feature 4, is a proxy for a sentence starter. Ev-ery new sentence that starts with a word (as opposed to a number or punctuation) is capitalized, but 70% of words following abbreviations are also, so this feature is mostly valuable in combination.

While we train on nearly 1 million words, most of these are ignored because our features are extracted only near possible sentence boundaries. Consider the fragment  X ... the U.S. Apparently some ... X , which our system fails to split after  X  X .S. X  The word  X  X pparently X  starts only 8 sentences in the train-ing data, but since it usually appears lowercased (89 times in training), its capitalization here is meaning-ful. Feature 6 encodes this idea, indicating the log count of lowercased appearances of the word right of the candidate period. Similarly, feature 5 gives the log count of occurrences of the token left of the candidate appearing without a final period.

Another way to incorporate all of the training ten used in sentence segmentation for speech recog-nition. Without a period in the conditional, many more negative examples are included. The resulting SVM model is very good at placing periods given input text without them (0.31% error rate), but when limiting the input to examples with ambiguous peri-ods, the error rate is not competitive with our origi-nal model (1.45%).

Features 7 and 8 are added to model the nuances of abbreviations at sentence boundaries, helping to reduce errors involving the examples in Table 2. SBD has always been treated as a binary classifica-tion problem, but there are really three classes: sen-tence boundary only ( S ); abbreviation only ( A ); ab-breviation at sentence boundary ( A + S ). The label space of the test data, which has all periods anno-tated, is shown in Figure 1.

Relative to the size of the classes, A + S exam-ples are responsible for a disproportionate number of errors, pointing towards the problem with a bi-nary classifier: In the absence of A + S examples, the left context L and the right context R both help distinguish S from A . But A + S cases have L re-sembling the A class and R resembling the S class.
One possibility is to add a third class, but this does not improve results, probably because we have so few A + S examples. We also tried taking a more structured approach, depicted in Figure 2, but this too fails to improve performance, mostly because the first step, identifying abbreviations without the right context, is too hard. Certainly, the A + S cases are more difficult to identify, but perhaps some bet-ter structured approach could reduce the error rate further.
 One common objection to supervised SBD systems is an observation in (Reynar and Ratnaparkhi, 1997), that training data and test data must be a good match, limiting the applicability of a model trained from a specific genre. Table 3 shows respectable error rates for two quite different test sets: The Brown corpus includes 500 documents, distributed across 15 gen-res roughly representative of all published English; The Complete Works of Edgar Allen Poe includes an introduction, prose, and poetry.

A second issue is a lack of labeled data, espe-cially in languages besides English. Table 4 shows that results can be quite good without extensive la-beled resources, and they are likely to continue to improve if additional resources were available. At the least, (Kiss and Strunk, 2006) have labeled over 10000 sentences in each of 11 languages, though we have not experimented with this data.

We also tried to improve results using a standard bootstrapping method. Our WSJ-trained model was used to annotate 100 million words of New York Times data from the AQUAINT corpus, and we in-cluded high-confidence examples in a new training set. This did not degrade test error, nor did it im-prove it. Our system makes 67 errors out of 26977 examples on the WSJ test set; a representative few are shown in Table 5. 34% of the errors involve the word  X  X .S. X  which distinguishes itself as the most difficult of to-kens to classify: Not only does it appear frequently as a sentence boundary, but even when it does not, the next word is often capitalized ( X  X .S. Govern-ment X ;  X  X .S. Commission X ), further confusing the classifier. In fact, abbreviations for places, includ-ing  X  X .K. X ,  X  X .Y. X ,  X  X a. X  constitute 46% of all er-rors for the same reason. Most of the remaining er-rors involve abbreviations like those in Table 2, and all are quite difficult for a human to resolve without more context. Designing features to exploit addi-tional context might help, but could require parsing. We have described a simple yet powerful method for SBD. While we have not tested models in languages other than English, we are providing the code and our models, complete with tokenization, available at http://code.google.com/p/splitta . Future work in-cludes further experiments with structured classifi-cation to treat the three classes appropriately. Thanks to Benoit Favre, Dilek Hakkani-T  X  ur, Kofi Boakye, Marcel Paret, James Jacobus, and Larry Gillick for helpful discussions.

