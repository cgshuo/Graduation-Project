 H.3.4 [ Performance Evaluation ]: Efficiency and Effectiveness Experimentation, Standardization Keywords Music Information Re trieval, Evaluation This demonstration presents the Do-It-Yourself (DIY) web service of the Music Information Retrieval Evaluation eXchange (MIREX). As TREC does for te xt retrieval, MIREX provides standardized datasets and eval uation frameworks to evaluate Music Information Retrieval (MIR ) systems and algorithms [1]. However, unlike TREC where participants are given the datasets and execute their code locally, MIREX data sets cannot be distributed due to copyright restrictions. In previous years, MIREX participants submitted systems to the International Music Information Retrieval Syst ems Evaluation Laboratory (IMIRSEL), where they were manually executed, and evaluated. The MIREX DIY service (see a demo at http://music-ir.org/mirexdiy/) allows for the remote execution of black-box algorithms submitted by participants, and provides participants with real-time progress repor ts, debugging information, and evaluation results. The DIY service can be remotely controlled by the participants, allowing for co ntinuous submission, evaluation, and improvement of algorithms, mitigating the intensive debugging, execution, and validatio n efforts previously required of IMIRSEL members [1]. The MIREX DIY service extends the Data-to-Knowledge Web Service (D2KWS) [3] and Music-to-Knowledge (M2K) libraries [2] to support the remote execution of participant-submitted MIR algorithms (Figure 1). Participan ts submit algorithms via a web interface to MIREX DIY. MIREX DIY can currently support compiled C/C++ or Java binaries, as well as Matlab, Perl, and Python scripts. Using either SOAP (Simple Object Access Protocol) or a web interface, participants then specify an itinerary in which to execute their algorithm. The itinerary contains information about the dataset(s) to be evaluated, the participant-specified algorithm, and the evalua tion metric to be used. This information is passed to the D2KWS which queues the to-be-executed job. D2KWS distributes the queued jobs to a set of sandboxed and firewalled D2K servers. Participants can monitor a 
