 A 0 X 1 matrix has a banded structure if both rows and columns can be permuted so that the non-zero entries exhibit a stair-case pattern of overlapping rows. The concept of banded matrices has its origins in numerical analysis, where entries can be viewed as descriptions between the problem variables; the bandedness corresponds to variables that are coupled over short distances. Banded data occurs also in other ap-plications, for example in the physical mapping problem of the human genome, in paleontological data, in network data and in the discovery of overlapping communities without cy-cles.

We study in this paper the banded structure of binary matrices, give a formal definition of the concept and discuss its theoretical properties. We consider the algorithmic prob-lems of computing how far a matrix is from being banded, and of finding a good submatrix of the original data that exhibits approximate bandedness. Finally, we show by ex-periments on real data from ecology and other applications the usefulness of the concept. Our results reveal that bands exist in real datasets and that the final obtained ordering of rows and columns have natural interpretations.
 F.2.2 [ Analysis of Algorithms and problem complex-ity ]: Nonnumerical Algorithms and Problems; H.2.8 [ Database management ]: Database Applications X  Data mining Algorithms, Experimentation, Theory 0 X 1 data, banded matrices, consecutive ones property
Matrices with 0 X 1 values occur in many different appli-cations. A typical example is market basket data gathered by retail companies [1]. Further than this, binary matrices abound in a large variety of fields ranging from information retrieval (documents and words occurrences) [5], to bioinfor-matics and computational biology (genes and probes map-pings) [2, 16], or ecology and paleontology (sites and species occurrences) [3, 12]. Understanding the properties of such matrices is therefore important for many applications. A fundamental problem is to uncover structures that will re-veal the nature of the relations between the rows and the columns of the binary dataset.

In this paper we study the banded structure of binary ma-trices. A 0 X 1 matrix is fully banded if both rows and columns can be permuted so that the non-zero entries exhibit a stair-case pattern of overlapping rows. See Figure 1.
 Figure 1: An example of a fully banded matrix.

The concept of banded matrices has its origins in numer-ical analysis, where the matrix entries indicate connections between variables in the function to be optimized. From the computational point of view, working with banded matrices is always preferable. The work load involved in performing certain operations such as multiplication falls significantly for banded matrices [10], often leading to huge savings in terms of calculation time and complexity. There has been much research focused on minimizing the bandwidth of a matrix (broadly, the distance of non-zero entries from the main diagonal of the matrix) by applying permutations on the original matrix [4, 10, 19].

From the data analysis perspective banded structures can occur in many applications. Consider for example the phys-ical mapping problem of the human genome. Genome bi-ologists break the genome into pieces (clones) which by re-cursive breaking can be eventually sequenced together. Un-fortunately, the information about the relative positions of clones is lost during the breaking process. The physical map-ping process starts with the experimental data from which information about the clone overlaps can be derived. The biological community has invested considerable efforts in the analysis of clone X  X robe matrices, in order to determine use-ful properties of both clone and probe orderings [2]. For an-other application, consider the presence/absence data from paleontology. Rows represent sites and columns represent species. A banded structure signifies an overlapping nested pattern between a set of species occurring in a spatially cor-related set of sites. Another application where bands are potentially visible is in the discovery of overlapping commu-nities without cycles in network data [6].

Needless to say, fully banded matrices are not expected to arise in a real noisy environment. Therefore we study the problem of determining which is the minimum number of transformations one needs to do on the original binary matrix to uncover a banded structure. The number of such transformations will measure how far is a matrix from being banded. A simple example is shown in Figure 2. In its origi-nal form the matrix seems to be random, yet when permuted suitably, it exhibits a high concentration of 1s confined close to the main diagonal band. This simple example already reflects the complexity involved in this problem. Another optimization problem we consider to cope with the unavoid-able noise is finding a maximum subset of rows and columns from the original matrix that will exhibit an almost banded structure. Here we explore the combinatorial properties re-lated to bandedness and propose algorithmic solutions to solve the associated optimization problems. Figure 2: An example of a binary matrix in its origi-nal form (a), and after permuting rows and columns to uncover its banded structure (b).

The rest of this paper is organized as follows. In Section 2 we give a formal definition of the concept of bandedness and study its theoretical properties. Section 3 introduces the definition of the banded optimization problems. In Sec-tion 4 and Section 5 we propose algorithmic solutions for the banded augmentation problem; and in Section 6 for the banded submatrix problem. Finally Section 7 shows empir-ical results and Section 8 discusses related work.
This section studies the combinatorial nature of banded matrices. We introduce an incompatibility graph between the columns of the matrix that will characterize the proper permutations for obtaining a fully banded structure. On the other hand, we also define an intuitive binary relation between the rows which, under those proper column permu-tations, will lead to a banded structure. The combination of these two results drive to a polynomial test for bandedness.
Consider a n  X  m binary matrix M . In the genetic finger-printing application, rows would correspond to probes and columns to clones; in the ecological application, rows would be sites and columns would be species. We denote the i -th row of M by M i and the j -th column of M by M j . Given a permutation  X  of natural numbers { 1 , . . . , m } and a row vector M i , we denote with M  X  i the permutation of the vec-tor M i induced by  X  . In general M  X  represents the matrix resulting from applying the column permutation  X  to each one of the rows of M . Similarly, M  X   X  represents the permuta-tion of rows and columns according to  X  and  X  respectively. Sometimes it is useful to interpret the row and column vec-tors of M as sets of indices, that is a row M i is as well a set of column indices that appear in the row.

A matrix is fully banded if both rows and columns can be permuted in a way that the non-zero entries exhibit a staircase pattern of overlapping rows. See Figure 1.
Definition 1. A binary matrix M is fully banded if there exists a permutation of rows  X  and a permutation of columns  X  such that (1) for every row i in M  X   X  the entries with 1s occur in consecutive column indices { a i , a i + 1 , . . . , b (2) these indices satisfy a i  X  a i +1 and b i  X  b i +1 . If M is fully banded also its transpose, M T is fully banded. Another trivial observation is that for a matrix to be banded it has to satisfy at least the consecutive-ones property on the rows and the columns. Formally, a binary matrix M is a consecutive-ones matrix if it is possible to order the columns so that, in every row, the non-zero entries occur in consecutive positions [21]: this is exactly what we require in part (1) of the above definition. A consecutive interval of ones from a row will be denoted as [ a, b ]: all the entries between columns a and b are 1s and the rest 0s. Unless explicitly stated, when a binary matrix M is said to satisfy the consecutive-ones property we assume that it comes per-muted to exhibit this consecutive arrangement of ones in all rows. Thus we can omit permutation  X  from the notation. Testing the consecutive-ones property of a binary matrix and representing permutations  X  (if they exist) can be done inpolynomialtimeviaPQ-trees[7],andmorerecently,in linear time with a certifying algorithm [15]; unfortunately, these algorithms do not handle noise.

However, not all matrices with the consecutive-ones prop-erty are banded, i.e., part (2) in the definition is not superflu-ous. For example, the following is a consecutive-ones matrix for the rows and the columns yet none of the row/column permutations leads to a staircase pattern of ones. On the other hand, even if the matrix is fully banded, we cannot expect that all column permutations from the conse-cutive-ones property will lead to an overlapping sequence of rows. An example is the following matrix, which as shown in Equation 2 has consecutive ones for the rows but it is only banded when the last column is placed first. Next we characterize exactly the relation of banded matrice s with consecutive-ones matrices. This will be possible via t he following binary relation between rows.

Definition 2. Let M i = [ a, b ] and M j = [ a  X  , b  X  ] be two rows with the consecutive-ones property. We say that M j is properly included in M i , denoted M j  X  M i , if and only if a &lt; a  X  and b  X  &lt; b . We denote by M i  X  M j whenever M i  X  M j and M j  X  M i .

As an example, the third row in the small matrix of Equa-tion 2 is properly included in the second row. The rows of a consecutive-ones matrix M are a Sperner family of in-tervals if for any two rows M i , M j we have M i  X  M j and M j  X  M i ; that is, M i  X  M j . This Sperner property on the family of row intervals can be seen as a restricted ver-sion of the Sperner property on the family of row sets: two rows M i and M j with M i  X  M j might, or might not satisfy M i  X  M  X  j . This depends on the column permutation  X  of the consecutive-ones arrangement for M , which, at the end, determines the starting and ending points of the row inter-vals. For example, the third row in Equation 2 would not be properly included in the second row if the last column was placed first. The following characterizes this relation. Lemma 1. A 0-1 matrix M is fully banded if and only if M is a consecutive-ones matrix for a permutation of columns  X  where every two rows i and j satisfy M  X  j  X  M  X  i . Basically the proof goes as follows: if for every two rows M i = [ a i , b i ] and M  X  j = [ a j , b j ] with consecutive ones we have M  X  i  X  M  X  j , then: either a i  X  a j and b i  X  b j and b j  X  b i . Under these conditions we can easily establish a preorder of rows by sorting them in ascending value of a i while resolving ties with the ascending value of their b i This preorder will essentially define the banded structure o f Definition 1. The other direction is trivially implied from the definition of fully banded matrices.
As we have just argued with Lemma 1, the set of valid consecutive-ones orderings that preserve the banded prop-erty is simply a subset of the valid orderings for the (less restricted) consecutive-ones relation. Therefore, for fu lly banded matrices the problem lies in identifying the proper permutation of the consecutive-ones property that will pre -serve bandedness, if such permutation exists. Unfortunate ly, checking whether a matrix is fully banded would be unfea-sible if we had to go through all the permutations of the consecutive-ones property of the same matrix: there might be exponentially many such permutations. In the remain-ing of this section we will study the incompatibilities that arise under certain permutations of the columns to derive a polynomial test for bandedness.

A very convenient data structure to deal with the valid column orderings of a consecutive-ones relation is the in-compatibility graph introduced in [15]. An incompatibility graph is simply an undirected graph whose vertices are pairs of elements ( a, b ), for all column indices a 6 = b , and whose edges reflect the incompatibility relation derived from the following observations.

Suppose we want to discover the consecutive-ones ordering of a set of columns. For each pair of columns a, b of M , we have that the order ( a, b ) (column a before b ) is incompatible Figure 3: The incompatibility graph correspond-ing to the matrix from Equation 1, with row sets M 1 = { a, b, c } , M 2 = { b, c, d } , and M 3 = { c } . The up-per figure shows the incompatibilities introduced by only the first row M 1 = { a, b, c } , together with the rule ( x, y ) and ( y, x ) are incompatible. The lower figure shows the whole graph obtained by adding the incompatibilities from all rows. M has the consecutive-ones property as this graph is bipartite. with order ( b, a ). Moreover, for a triplet of columns a, b, c and a row i of M with a, c  X  M i and b /  X  M i , the pairs ( a, b ) and ( b, c ) cannot appear in the same consecutive-ones relation. Namely, they would imply that b goes between a and c in the column ordering, which would imply that M fails to be consecutively ordered in the i -th row. Therefore ( a, b ) and ( b, c ) are incompatible. The incompatibility graph G ( M ) of M is formed by adding all edges of these types. A toy example of an incompatibility graph is shown in Figure 3. It is then clear that a consecutive-ones relation must not contain incompatible pairs, thus giving the following resu lt.
Proposition 1 ([15]). A binary matrix M has the con-secutive-ones property if and only if its incompatibility g raph G ( M ) is bipartite.

Next we study further the observation given by Lemma 1 and use of the incompatibility graph to test the banded-ness property in polynomial time. The idea is to augment the graph G ( M ) with more incompatibility edges; basically, those incompatibility ordering pairs that restrict the con se-cutive-ones orderings to those preserving a Sperner family of row intervals. We call the augmented graph  X  G ( M ). Suppose we have two different rows i and j of M and M i  X  M j . Let a, b, c  X  M j be column indices such that a  X  M i but b, c /  X  M i . Then if the matrix is fully banded, the orderings ( b, a ) and ( a, c ) cannot both hold. Namely, if b is before a and a is before c , we have entries as follows.
But in this case the ordering cannot satisfy the conditions of a full band. We call these new edges added to G ( M ) to form  X  G ( M ) the set of Sperner conflicting pairs . As an exam-ple consider the matrix in Equation 1: it has the consecutive -ones property, as shown in the incompatibility graph of Fig-ure 3. However, when adding to that graph the incompat-ible pairs from M 1 \ M 3 = { a, b } and M 2 \ M 3 = { b, d } , the final graph would not be bipartite anymore. This implies that the matrix in Equation 1 is not banded in any of the consecutive-ones permutation.

The number of Sperner conflicting pairs that can be po-tentially added to the graph  X  G ( M ) is at most quadratic in n . A way of testing bandedness in linear time in the number of edges of the incompatibility graph is then the following.
Proposition 2. A matrix M is fully banded if and only if its incompatibility graph augmented with the set of Spern er conflicting pairs is bipartite.

We derive next a generalization from Proposition 2. The advantage is that it will summarize the conflicting Sperner pairs directly into an augmentation of M .

Lemma 2. Let  X  M be the binary matrix M augmented with a set of new rows M ij = M j \ M i for every two rows M i M j . Then we have that M is fully banded if and only if  X  M has the consecutive-ones property.

Briefly, the proof goes as follows: if any two rows i and j of M s.t. M i  X  M j satisfy M i  X  M j under a certain permutation  X  of the consecutive-ones, then M j \ M i will be consecutive-ones for that permutation  X  as well. On the other direction: any permutation  X  of the consecutive-ones on  X  M , preserves both the consecutive-ones property of M and the Sperner family of intervals of their rows.
The maximum number of rows that can be potentially added to the original M is at most n  X  ( n  X  1) / 2. Real world matrices are not expected to be fully banded. Therefore we introduce a measure that computes how far a matrix is from being banded. We will do so by looking at the minimum number of 0s that need to be transformed into 1s (and also bidirectional flips, from both 1s to 0s and 0s to 1s) to make a matrix banded. We name this optimization problem as the Minimum Banded Augmentation problem. Problem 1. (Minimum Banded Augmentation, Mba) Given a 0-1 matrix M , find the minimum number of 0s that need to be modified into 1s so that M becomes fully banded.
We denote with  X  ( M ) the optimal number of flips to make the matrix fully banded. Matrices that are fully banded satisfy  X  ( M ) = 0. A trivial observation following from the symmetry of our definition of fully banded matrices is that  X  ( M ) =  X  ( M T ), where M T is the transpose of M .
For ecological and paleontological data we often have the situation where the 1s are reasonably certain, but the 0s can be missing values. Thus the Mba problem is quite natural. However, for other types of applications is useful to allow changes in both directions, from 1 to 0 and from 0 to 1. We refer to the version of Mba that allows flips from both 1s to 0s and 0s to 1s as the Bidirectional Mba . We will denote with  X  B ( M ) the optimal number of such bidirectional flips to obtain a fully banded matrix. Note that  X  B ( M )  X   X  ( M ).
A variation of the Bidirectional Mba is to consider its weighted version: suppose we have a cost associated to 0-to-1 flips and a cost associated 1-to-0 flips; the weighted prob-lem becomes that of finding a transformation with the min-imum cost. This weighted variation of the Bidirectional Mba can be especially useful in ecological applications.
The algorithmic complexity of the Mba problem is ex-pected to be hard. The basis of this assumption arises from Lemma 2 and the known fact that the Consecutive-ones Matrix Augmentation problem (with flips from 0 to 1) is NP-complete [17]. The transformation is done from the Op-timal Linear Arrangement . Also symmetric banded ma-trices have an interpretation as proper interval graphs [18 ], and general banded matrices as proper interval digraphs [20 ]. Both the edition and deletion of edges to transform a general graph into an interval graph is NP-complete [8].
 A second problem we study here is the following.

Problem 2. (Maximum Banded Submatrix, Mbs) Gi-ven a 0-1 matrix M and an integer k , find the maximum submatrix M  X  of M s.t. it is banded after at most k flips.
The Mbs problem will be useful in datasets exhibiting several independent band structures, or also, when noise is too high to identify a clear band from the complete dataset. Since Mbs is only a generalization of the Mba and Bidirec-tional Mba problem, the algorithmic complexity is also expected to be hard.
Since the values of  X  ( M ) and  X  B ( M ) cannot be computed exactly for larger instances, we consider algorithms for th eir estimation in both the Mba and the Mbs problems. We denote those upper bounds with  X   X  ( M ) and  X   X  B ( M ).
We investigate a special form of the problems where we assume that the column permutation that establishes the banded structure is already known. By Lemma 1, when having a fixed column permutation the Mba problem decomposes into solving the consecutive-ones property for single rows, and after that, making some final flips to ensure that rows form a Sperner family of intervals. Algorithm 1 outlines this Fixed Permutation solution.
Assuming that the column permutation  X  is given and that Mba only allows flips from 0s to 1s, there is only one exact way of producing a consecutive-ones relation: by flip-ping all possible 0s falling between 1s for each row of M (lines 4 X 6). A second phase has to ensure that all row inter-vals will be pairwise overlapping, that is M  X  i  X  M  X  j for all rows i 6 = j (lines 7 X 13). Since only 0-to-1 flips are allowed, the solution is simply to extend the row intervals. An ex-tension of M i = [ a, b ] means to update the endpoints of the interval for a new [ a  X  , b  X  ] such that a  X   X  a  X  b  X  b
At every step the algorithm takes a row M  X  i and calculates its optimal extension (if this is needed). To do so it will sel ect all the superintervals M  X  j  X  M  X  i and check all the potential extensions for M  X  i that would resolve the Sperner conflicts that the i -th row has with those j -th rows.

An extension of M  X  i that will always resolve all Sperner conflicts for that row can either be a left-hand side exten-sion to the left most M  X  j  X  M  X  i (line 10 ( a )); a right-hand Algorithm 1 The Fixed Permutation algorithm for Mba 1: Input: A n  X  m 0 X 1 matrix M and a permutation  X  2: Output: A permutation  X  of rows 3: Fix the column permutation of M to be  X  4: for each row i in M  X  do 5: Flip all those 0s falling between 1s 6: end for 7: for each row i in M  X  s.t. M  X  i = [ a, b ] do 8: Let C = { M  X  j = [ a j , b j ] | M  X  i  X  M  X  j } 9: Extend M  X  i = [ x, y ] with the best from the following 10: ( a ) x = min { a j | [ a j , b j ]  X  X } and y = b 11: ( b ) x = a and y = max { b j | [ a j , b j ]  X  X } 12: ( c ) x = a j and y = max { b k | [ a k , b k ]  X  X  , a 13: end for 14: Sort the rows [ a, b ] of M  X  in ascending order of a s, re-side extension to the right most M  X  j  X  M  X  i (line 11 ( b )); or, finally, extending M  X  i to both left and right-hand sides with a combination of two superintervals (line 12 ( c )). This only requires checking the starting point of each M  X  j  X  M and combining it with the right-most ending point from all other superintervals M  X  k  X  M  X  i whose starting point comes before M  X  j . Eventually, for a row i the algorithm takes the extension that represents fewest transformations.
Resolving the Sperner conflicts for a row i does not change the optimal extension of other rows j 6 = i . In simple terms: there are no cascade effects. To see this suppose that i in-cludes a new interval k after its extension, and let j be the interval that previously contained i and that originated the best optimal extension of i (in lines 10 X 12). This interval j contains k by transitivity, and indeed, it also contained k even before i was extended. This implies that when process-ing k , its optimal extension cannot be changed because of a previous extension of interval i .
 That is, for a fixed permutation  X  of the columns, the Fixed Permutation algorithm computes exactly  X  ( M  X  ) in polynomial time. This will be always an upper bound of  X   X  ( M ). The number of comparisons between rows made by the algorithm will be at most n  X  ( n  X  1) / 2. Since every comparison requires at most n comparisons (line 12 ( c )), the final complexity of the algorithm is of the order O ( n 3 ).
Proposition 3. If a permutation  X  of the columns is fixed, Mba for M  X  is solvable in polynomial time. Next we study the properties of the algorithms for the Bidirectional Mba problem. Again we will use the same principle of assuming a fixed column permutation  X  . The idea here is also simple: first solving optimally the consecu tive-ones property for bidirectional flips on the M  X  and after that, resolving Sperner conflicts between rows. Still, the technical components of this bidirectional solution are to -tally different from above. Algorithm 2 gives the outline of the Bidirectional Fixed Permutation algorithm.
 The first simple observation we use is the following.
Proposition 4. If a permutation  X  of the columns is fixed, the minimum number of bidirectional flips that lead Algorithm 2 The Bidirectional Fixed Permutation al-gorithm for Bidirectional Mba 1: Input: A n  X  m 0 X 1 matrix M and a permutation  X  2: Output: A permutation  X  of rows 3: Fix the column permutation of M to be  X  4: for each row i in M  X  do 5: Let W  X  i be the weight vector for row i of M 6: Let [ a, b ] be the solution to the maximum consecutive 7: Update M  X  i = [ a, b ] 8: end for 9: for each pair of rows i, j in M  X  do 10: if M  X  i  X  M  X  j then 11: Let A = M  X  j \ M  X  i 12: Let W A be the weight vector for A 13: Let [ a, b ] be the solution of the maximum consecu-14: Update M  X  i preserving M  X  j \ M  X  i = [ a, b ] 15: end if 16: end for 17: Sort rows [ a, b ] of M  X  in an ascending order of a s, while to a consecutive-ones relation on M  X  can be solved exactly in linear time.

To see this consider a n  X  m matrix of weights W where each non-zero entry of M will be assigned a +1 in W , and each zero entry of M will be assigned a weight of  X  1. In this form, the problem of finding the optimal consecutive ones solution with bidirectional flips for M  X  i corresponds to solving the maximum subarray problem on W  X  i . The aim of the maximum subarray problem is, for a given array of numbers, to find a consecutive subarray such that the sum of the numbers in the subarray is maximum. This can be done in linear time in the size of the array by making use of a scan-line algorithm [9]. In essence, for a solution [ a, b ] of the maximum subarray algorithm over W  X  i , we should update M i with consecutive ones between the columns a and b , while setting to 0s the rest of its entries. This corresponds to lines 4 X 8 in Algorithm 2. Note that weights of the matrix W can be tuned according to the apriori knowledge of the application. The weight matrix described above assumes equal cost between the two types of flips.

In the second phase (lines 9 X 16) the algorithm proceeds by removing the Sperner conflicts between the rows of M  X  which at this stage already exhibit a consecutive-ones prop -erty. The useful technical observation comes from Lemma 2: A matrix M will be fully banded as long as the augmented  X  M is in consecutive ones. Therefore, to eliminate all possibl e Sperner conflicts between the row intervals of M  X  , the algo-rithm simply has to go through all the extra rows described in  X 
M and make them consecutive ones. When propagating the changes back to M  X  we would end up with a banded ma-trix. As above, we can make use of the maximum subarray problem on the extra rows of  X  M to solve the problem ex-actly for bidirectional flips. It only remains to update rows in M  X  so that they are kept consistent with the changes made over  X  M . The final obtained solution on M  X  will be always banded. Basically, this corresponds exactly to deci d-ing the best number of bidirectional flips that will eliminat e Sperner conflicts in a pair-wise comparison of rows in M  X  The final complexity of the algorithm is O ( n 3 ).
Notice that from the Bidirectional Fixed Permutation algorithm we cannot conclude that the obtained solution will be optimal for the Bidirectional Mba problem on M  X  . The problem resides in the second phase when rows are compared fundamentally in a pair-wise fashion, thus always deciding the best optimal flips for each couple of rows locall y. This ignores the fact that some non-optimal local updates might be better for an optimal global solution. In general, i t seems that the Bidirectional Mba problem would be still hard for a fixed permutation of the columns.

As a final step in both Algorithm 1 and Algorithm 2, it only remains to sort the rows with the preorder given by the row intervals to visually exhibit the banded structure. A different type of approach for estimating the Mba and Bidirectional Mba problems is by means of the incom-patibility graph introduced in Section 2.2. A simple greedy strategy would consist of eliminating odd cycles from the in -compatibility graph by removing edges one at a time. The criteria for selecting which edges to eliminate such that th e graph becomes bipartite can be very diverse and too far from the scope of this paper. For example, one could choose the edge that participates in the largest number of odd cycles, or simply the first edge that violates the bipartite conditio n. The advantage of this solution is that it does not depend on a permutation fixed beforehand, but it also has a strong dependency on which is the best elimination criteria for the edges in the incompatibility graph and a higher time com-plexity. We observed that the fixed permutation algorithms provide a better solution than the simplified odd cycle al-gorithms in most cases, so, due to space constraints we will focus here only on the fixed permutation algorithms. An essential component of the algorithms described in Section 4 is to be able to identify a good column permu-tation that will be fixed since the beginning. Intuition says that a good permutation will tend to put similar columns close enough to each other in the order. If the matrix ex-hibits banded structure, an order based on the similarity between columns should also preserve the band. We define here several similarity measures to compare columns and use two different methods to find a proper order.

One very simple measure of similarity between two columns is the correlation similarity . Given two columns M a and M the correlation similarity is defined as: CorrS( M a , M b (1 +  X  ab ) / 2, where  X  ab represent the Pearson coefficient be-tween the columns a and b . The measure CorrS can take values between [0 , 1], where 1 means that the two columns are identical, and 0 when they are anticorrelated.
As an alternative we will use the overlapping measure computed by the Jaccard coefficient : J( M a , M b ) = | M This similarity measure captures the particularities of ou r problem where columns should be increasingly overlapping one with the other. It takes a highest value of 1 when columns M a and M b are exactly the same. The overlapping similarity for non-intersecting columns is 0. Other straig ht-forward measures we will try to use are the dot product and the Hamming distance metric between columns.

In order to find a good permutation of the columns pre-serving the similarity or distance relationship, we consid er the graph whose nodes are the columns of the input matrix M . There is an undirected edge between all pairs of nodes { a, b } , and the weight of the edge is defined by the similarity between a and b . This similarity can be defined by any of the measures mentioned above. We will use two methods to find a good order between columns: first one is spectral ordering [3], and the second one consists of finding an ap-proximation of the minimum Hamiltonian path between the columns (by means of constructing the minimum spanning tree) [9]. Note that similarity measures will be transforme d into distances for the Hamiltonian path.
Next we turn to the banded submatrix problem Mbs . For a solution we can compute, for each row and column, the number of true positive (TP) entries as the number of 1s in the row (or column) that were not transformed into a 0. That is, they correspond to relevant 1s contained in the row (column) for bandedness. Similarly, the false positive (FP) entries of a row (or column) correspond to original 0s that were transformed into 1s by the algorithm. Finally, false negatives (FN) are represented by those original 1s that were switched into 0 by the banded algorithm.

From here many different measures for evaluating the per-formance of the banded retrieval system can be computed. For example we can consider precision =TP/(FP+TP), re-call=TP/(FP+FN) or accuracy=(TP+ TN)/ n of each one of the row and column vectors. The algorithm proposed is called Iterative row-column elimination . As the name indicates, it will eliminate rows/columns one at a time, by selecting the one with worst performance so far. Pseudocode of the algorithm is shown in Algorithm 3.
 Algorithm 3 The Iterative row-column elimination al-gorithm for Mbs 1: Input: A n  X  m 0 X 1 matrix M and an integer k 2: Output: A submatrix M  X  of M 3: repeat 4: Compute  X  , the number of flips estimated for Mba or 5: Rank columns/rows with a performance measure 6: Select the column/row i with worst performance 7: Remove i from M 8: until  X   X  k
In this section we give experimental ground of the band-edness concept. We show that our algorithms perform effi-ciently in synthetic datasets and find banded structures in a variety of real datasets from life sciences. We will shorte n the name of the algorithm Fixed Permutation to FP and Bidirectional Fixed Permutation to BFP .
Briefly, we generated synthetic data as follows. For a given n and m and a width parameter 2 w we generate a fully banded matrix by means of a random walk in the matrix grid. Starting at coordinate (0 , 0) of a n  X  m matrix initially set to all zeros, the random walk chooses to move either one band. In (a), comparative performance of the two algorithms step down (i.e. from ( i, j ) to ( i + 1 , j )) or one step to the right (i.e. from ( i, j ) to ( i, j + 1)) with equal probabilities. Whenever a step to the right is chosen, we will set to 1 all the w cells above the current position and all the w cells below the current position (or less than w if there are not as many as w cells to fill). Once the path reaches ( n, m ), each column contains at least w and at most 2 w ones (assuming w &lt; n ). The random walk is designed so that it always reaches position ( n, m ). The resulting matrix has a clear solid band of given width 2 w . Additionally we can introduce noise by flipping the original values according to given probabiliti es p (noise probability of flipping 0 to 1) and q (noise probability of flipping 1 to 0). In all the synthetic experiments shown next we generate 100 samples for each one of our parameter settings. Each sample corresponds to a matrix of size 50  X  60. The values in the figures of this section are then computed as the mean from the obtained values in those 100 samples.
Figure 4a compares the total number of flips done by the two algorithms FP and BFP . As expected BFP outperforms in all cases, so we decide to use it for the rest of the exper-iments. Discarding FP is not a problem for real datasets: the weighted version of BFP can behave similarly to FP if our apriori knowledge indicates that only flips from 0 to 1 are appropriate for the data. Observe that as we increase the noise inside the band the total number of flips tends to de-crease for both algorithms. This is just the effect of having an emptier band. Figure 4b compares the effects of fixing different permutations with the BFP algorithm. The effect of the permutation does not seem to be significant from the synthetic data, although Hamiltonian path with Jaccard be-haves slightly better. For real datasets permutations will matter and some of them clearly perform better than oth-ers. The goodness of a permutation will be always measured w.r.t. the final number of flips done by an algorithm that fixed such permutation.
The Mammal dataset consists of presence/absence records of European mammals: for 2179 cells of size 40  X  40 Km 2 we have 0 X 1 information about 124 different species. The full version of the Mammal dataset is available for research purposes upon request from the Societas Europaea Mamma-cologica ( www.european-mammals.org ).

Figure 5a shows the band obtained by allowing bidirec-tional flips. The discovered structure of sites and mammals is interesting in itself: it shows a highly nested pattern fr om sites and species so far unknown in the dataset. The order of the sites where this nestedness occurs shows a high correla-tion with the temperature variable. As the temperature rise s the number of species present in the band also increases. The band gets thinner when the temperature is lower, indicating that a few species live under extreme conditions. Nested patterns have been widely studied in ecological applicatio ns because they clearly reflect the distribution of species in t he spatial grid of locations. In this band we did not observe any dependency between the order of the rows and their spatial location; this indicates that we found a clear global struct ure in the data, not only an artifact of spatially correlated sit es. Moreover, of the 54155 total ones in the dataset, there are a majority of 35564 ones accumulated within the borders of the band retrieved by our algorithm (see Figure 5b). This means we found a heavy dense structure. A total of 27662 bidirectional flips were needed to find the structure.
The Paleontological data contains information of fossils rows correspond to sites. There are 124 sites and 139 genera. columns with at least 10 occurrences and all rows with at least 10 genera present. when reordering rows and columns according to the results of found by spectral ordering with Jaccard similarity. The banded structure found in the Paleontological dataset i s shown in Figure 5c. The result is given by spectral ordering with Jaccard similarity.

We tested here the weighted BFP for different variations of weights. This is a clear dataset exhibiting a high noise concentration inside the band, which implies that we should give more priority to transformations from 0s to 1s. In gen-eral it is difficult to decide for a real life application which are the best weights. Here we tested with variations of this weight parameter as follows. Under all the possible assump-tions of noise p and q , weights were set respecting the ratio log( p ) / log( q ). The best retrieved matrix with such weights will be a measure to the underlying noise distribution. A good selection of parameters was set under assumption of noise p = 0 . 10 and q = 0 . 43.
The DNA amplification data is available upon request from the authors in [16]. It contains information on the DNA copy number amplifications recorded in 4590 cases (rows) and 393 band specific chromosomal locations (columns). A 0 denotes no DNA copy number amplification in the corre-sponding chromosomal location, and a 1 denotes a finding in the DNA copy number amplification in the location. More than this we also have available the neoplasm labels (cancer label) coupled to the cases of the matrix. The goal is to in-vestigate DNA amplifications in different neoplasms types. This justifies a solution where different subsets of columns and rows can be evaluated separately, so we will run our It-erative row-column elimination algorithm. We use the measures of accuracy and recall as a deletion criteria of row s and columns, while allowing a maximum of 100 flips in the retrieved submatrices.

Figure 6 shows the two retrieved submatrices (from the original data) found by accuracy 6a and recall 6b. For both submatrices we observe immediately that they exhibit a very clean banded structure (almost zero noise outside the band) . They both preserve nicely the column permutation of the chromosomes, and moreover, each one of these submatrices identifies a different reduced collection of cancer types. An expert verification is still needed.
The property of consecutive ones in binary matrices is particularly important in presence/absence data of paleon -tological applications [12]. The question of determining h ow far away a given matrix is from satisfying the consecutive-ones property corresponds to counting Lazarus events. This is also known as the seriation problem. In [3] an important contribution showed an approximation given by the spectral ordering. Another important ecological concept related to the structure of 0 X 1 matrices is nestedness [14]. A dataset is nested if for all pairs of rows one row is either a superset or subset of the other. From this definition it is direct to see that all nested matrices are banded, although the revers e does not hold. Bandedness is therefore a generalization of these ecological concepts.

A fully banded binary matrix is also known in some con-texts as the monotone consecutive arrangement of ones [20]. A connection is then established between this and zero-partitionable matrices [13], which establishes the follow ing hierarchy between classes of matrices, where B are the bande d matrices, N are nested matrices, SC1P are simultaneously consecutive-ones on row and columns, C1P are consecutive-ones matrices on rows, and Z are zero-partitionable matrice s.
Finally, we cannot ignore the relation of banded matrices with the field of numerical analysis [10, 19, 4]. The solu-tions there also find good permutations to confine non-zero entries to the main diagonal band. However, those permuta-tions approach a different nature of the bandwidth problem (leaving empty corners) and are not prepared for noisy real data (corners with noise are not bad as long as 1s are highly concentrated in the diagonal).
We introduce the new concept of banded structures for 0 X 1 data and characterize exactly its combinatorial prop-erties. We first establish how row and column permuta-tions affect the structure of the band and derive a polyno-mial test for bandedness. We propose principled algorithms to approach two important combinatorial problems related to bands: minimum banded augmentation and maximum banded submatrix. Experiments show surprising results: bands potentially occur in many applications, and here we concentrate on datasets from life sciences. For two of the datasets, we discover new bands that have natural interpre-tations in the final order of rows and columns. Future work should explore algorithms that do not fix a permutation be-forehand, noise probabilities for the weighted Mba , and the study of bandedness measures. [1] R. Agrawal, T. Imieli  X nski, and A.Swami. Mining [2] F. Alizadeh, R. M. Karp, L. A. Newberg, and D. K. [3] J. Atkins, E. Boman, and B. Hendrickson. A spectral [4] C. Aykanat, A. Pinar, and U.  X Cataly  X  urek. Permuting [5] R. Baeza-Yates and B. Ribeiro-Neto. Modern [6] A. Banerjee, C. Krumpelman, J. Ghosh, S. Basu, and [7] K. S. Booth. PQ-tree algorithms. PhD thesis, 1975. [8] P. Burzyn, F. Bonomo, and G. Dur  X an.
 [9] T. Cormen, C. Leiserson, and R. Rivest. Introduction [10] E. Cuthill and J. McKee. Reducing the bandwidth of [11] M. Fortelius. Neogene of the old world database of [12] K. K. Puolam  X  aki, M. Fortelius, and H. Mannila. [13] I.-J. Lin and D. B. West. Interval digraphs that are [14] H. Mannila and E. Terzi. Nestedness and segmented [15] R. M. McConnell. A certifying algorithm for the [16] S. Myllykangas, J. Himberg, T. B  X  ohling, B. Nagy, [17] C. H. Papadimitriou. The NP-completeness of the [18] F. S. Roberts. Indifference graphs. In Proof Techniques [19] R. Rosen. Matrix bandwidth minimization. In ACM [20] M. Sen and B. K. Sanyal. Indifference digraphs: A [21] A. Tucker. A structure theorem for the consecutive 1 X  X 
