 Semantic parsing, the task of mapping natural language (NL) sentences into a formal meaning representation language (MRL), has recently re-ceived a significant amount of attention with vari-ous models proposed over the past few years. Con-sider the NL sentence paired with its correspond-ing MRL in Figure 1(a). Semantic parsing can be naturally viewed as a statistical machine transla-tion (SMT) task, which translates a sentence in NL (i.e., the source language in SMT) into its mean-ing representation in MRL (i.e., the target lan-guage in SMT). Indeed, many attempts have been made to directly apply statistical machine transla-tion (SMT) systems (or methodologies) to seman-tic parsing (Papineni et al., 1997; Macherey et al., 2001; Wong and Mooney, 2006; Andreas et al., 2013). However, although recent studies (Wong and Mooney, 2006; Andreas et al., 2013) show that semantic parsing with SCFGs, which form the ba-sis of most existing statistical syntax-based trans-lation models (Yamada and Knight, 2001; Chiang, 2007), achieves favorable results, this approach is still behind the most recent state-of-the-art. For details, please see performance comparison in An-dreas et al. (2013) and Lu (2014).

The key issues behind the limited success of ap-plying SMT systems directly to semantic parsing lie in the difference between semantic parsing and SMT: MRL is not a real natural language with different properties from natural language . First, MRL is machine-interpretable and thus strictly structured with the meaning representation in a nested structure of functions and arguments. Sec-ond, the two languages are intrinsically asymmet-ric since each token in MRL carries specific mean-iary words and some function words usually have no counterparts in MRL. Third and finally, the ex-pressions in NL are more flexible with respect to lexicon selection and token ordering. For exam-ple, since sentences in NL  X  X ould you tell me the states that utah borders X  ,  X  X hat states does utah border X  , and  X  X tah borders what states X  convey the same meaning, they should have the same expres-sion in MRL.

Motivated by the above observations, we be-lieve that semantic parsing with standard SMT components is not an ideal approach. Alterna-tively, this paper proposes an effective, yet simple way to enrich SCFG in hierarchical phrase-based SMT for better semantic parsing. Specifically, since the translation rules play a critical role in SMT, we explore to improve translation rule qual-ity and increase its coverage in three ways. First, we enrich non-terminal symbols as to capture con-textual and structured information. The enrich-ment of non-terminal symbols not only guides the translation in favor of well formed structures, but also is beneficial to translation. Second, we ex-amine the difference between word alignments for semantic parsing and SMT to better adapt word alignment in SMT to semantic parsing. Third, unlike most existing SMT systems that keep un-known words untranslated and intact in transla-tion, we exploit the translation of unknown words via synthetic translation rules. Evaluation on Geo-Query benchmark dataset shows that our approach obtains consistent improvement and achieves the state-of-the-art across various languages, includ-ing English, German and Greek. In this section, we present the framework of semantic parsing as SMT, which was proposed in Andreas et al. (2013).
 Pre-Processing Various semantic formalisms have been considered for semantic parsing. Ex-amples include the variable-free semantic repre-sentations (that is, the meaning representation for each utterance is tree-shaped), the lambda calculus expressions, and dependency-based compositional semantic representations. In this work, we specifi-cally focus on the variable-free semantic represen-tations, as shown in Figure 1. On the target side, we convert these meaning representations to series of strings similar to NL. To do so, we simply take a preorder traversal of every functional form, and la-bel every function with the number of arguments it takes. Figure 1(b) shows an example of con-verted meaning representation, where each token is in the format of A @ B where A is the symbol while B is either s indicating that the symbol is a string or a number indicating the symbol X  X  arity (constants, including strings, are treated as zero-argument functions).
 On the source side, we perform stemming (for English and German) and lowercasing to over-come data sparseness.
 Hereafter, we refer to the pre-processed NL and Translation Given a corpus of NL 0 sentences by adopting a string-to-string translation system. Typical components in such a translation system include word alignments between the source and the target languages, translation rule extraction, language model learning, parameter tuning and decoding. For more details about each component, please refer to (Chiang, 2007). In the rest of this paper, we refer to the source language (side) as Post-Processing We convert MRL 0 back into MRL by recovering parentheses and commas to reconstruct the corresponding tree structure in MRL. This can be easily done by examining each symbol X  X  arity. It eliminates any possible ambi-guity from the tree reconstruction: given any se-struct the tree structure (if one exists). For those translations that can not be successfully converted, we call them ill-formed translations. In this section, we present the details of our en-riched SCFG for semantic parsing. 3.1 Enriched SCFG In hierarchical phrase-based (HPB) translation models, synchronous rules take the form X  X   X   X , X ,  X  X  , where X is the non-terminal sym-bol,  X  and  X  are strings of lexical items and non-terminals in the source and target side re-spectively, and  X  indicates the one-to-one cor-respondence between non-terminals in  X  and  X  . From an aligned phrase pair &lt; state that border, state@1 next to 2@1 &gt; in Figure 2(a), for ex-ample, we can get a synchronous rule X  X  state X dices to indicate which nonterminal occurrences are linked by  X  . The fact that SCFGs in HPB mod-is responsible for ill-formed translation (e.g., an-swer@1 state@1 ). To this end, we enrich the non-terminals to capture the tree structure information, guiding the translation in favor of well-formed translations. The enrichment of non-terminals is two-fold: first, it can handle MRL with a nested structure to guarantee the well-formed transla-tions; second, related studies in SMT have shown that introducing multiple non-terminal symbols in SCFGs benefits translation (Zollmann and Venu-gopal, 2006; Li et al., 2012).

Given a word sequence e i j from position i to position j in MRL 0 , we enrich the non-terminal symbol X to reflect the internal structure of the word sequence of e i j . A correct translation rule selection therefore not only maps source termi-nals into target terminals, but is both constrained and guided by structure information in the non-terminals. As mentioned earlier, we regard the structure, where each function takes one or more arguments as input while its return serves as an ar-gument to the outside function. As in Figure 1, function cityid holds two arguments and returns as an argument to function area 1 . For a word se-quence e i j , we examine its completeness, which is defined as: Definition 1. For word sequence e i j , it is regarded as complete if it satisfies 1) every function (if ex-ists) meets its argument requirement; and 2) it can serve as one argument to another function.

We use symbol C to label word sequences which are complete. For an incomplete word se-quence, we examine 1) the number of arguments it requires on the right to be complete; and 2) the arity of a function it requires on the left to be complete. Then the sequence is labeled as (C \ F m ) / A n , indicating it requires n arguments on the right and a function with m arities on the left. 3 Specifically, we omit \ F m and / A n if m = 0 and n = 0 respectively. 4
Table 1(a) demonstrates examples of phrase pairs in our enriched SCFG. For instance, word sequence stateid@1 texas@s is complete, and thus labeled as C . Similarly, to be complete, word se-quence next to 2@1 requires one argument on the right side, labeled as C/A 1 accordingly.

When extracting translation rules from aligned datasets, we follow Chiang (2007) except that we use enriched non-terminal symbols rather than X . Each translation rule is associated with a set of translation model features {  X  i } , including phrase translation probability p (  X  |  X  ) and its in-verse p (  X  |  X  ) , the lexical translation probability p lex (  X  |  X  ) and its inverse p lex (  X  |  X  ) , and a rule penalty that learns the preference for longer or shorter derivations.
 Inverted Glue Rules In SMT decoding (Chiang, 2007), if no rule (e.g., a rule whose left-hand side is X ) can be applied or the length of the poten-tial source span is larger than a pre-defined length (e.g., 10 as in Chiang (2007)), a glue rule (either S  X  X be used to simply stitch two consequent translated phrases together in a monotone way. Although this will reduce computational and modeling chal-lenges, it obviously prevents some reasonable translation derivations because in certain cases, the order of phrases may be inverted on the target side. In this work, we additionally use an inverted glue rule which combines two non-terminals in a swapped way. Each glue rule, either straight or inverted , contains only two non-terminal sym-bols and is associated with two features, includ-ing phrase translation probability p (  X  |  X  ) , and a glue rule penalty. Table 1(b) shows examples of a straight and an inverted glue rules. Moreover, these glue rules can be applied to any two neigh-boring translation nodes if the non-terminal sym-bols are matched. 3.2 Word Alignment for Semantic Parsing Word alignment is an essential step for rule ex-traction in SMT, where recognizing that wo shi in Chinese is a good translation for I am in English requires establishing a correspondence between wo and I , and between shi and am . In the SMT community, researchers have developed standard, proven alignment tools such as GIZA++ (Och and Ney, 2003), which can be used to train IBM Mod-els 1-5. However, there is one fundamental prob-lem with the IBM models (Brown et al., 1993): each word on one side can be traced back to ex-actly one particular on the other word (or the null token which indicates the word aligns to no word on the other side). Figure 2(a) shows an example of GIZA++ alignment output from source side to target side, from which we can see that each source word aligns to exactly one target word. While alignment of multiple target words to one source word is common in SMT, a trick is then to run IBM model training in both directions. Then two resulting word alignments can be symmetrized, for instance, taking the intersection or the union of alignment points of each alignment. For example, Figure 2(b) shows GIZA++ alignment output from target side to source side while Figure 2(c) shows the symmetrization result with widely used grow-diag-final-and strategy.

Although symmetrization of word alignments works for SMT, can it be applied to semantic pars-ing? There are reasons to be doubtful. Word align-ment for semantic parsing differs from alignment for SMT in several important aspects, at least in-cluding: 1. It is intrinsically asymmetric: within the se-2. Little training data is available. SMT align-Consequently, the symmetrization of word align-ments may not work perfectly for semantic pars-ing. According to word alignment in Figure 2(c), a phrase extractor will generate a phrase pair  X  have the highest, largest one@1  X  , which is non-intuitive. By contrast, a more useful and general phrase pair  X  highest, largest one@1  X  is typically excluded because largest one@1 aligns to all of have , the , and highest . Similarly, another useful phrase pair  X  texas, texas@s  X  is prohibited since texas aligns to both stateid@1 and texas@s .
Ideally a new semantic parsing aligner should be able to capture the semantic equivalence. Un-fortunately we are not aware of any research on alignment for semantic parsing, possibly due to lack of a paucity of high quality, publicly avail-able data from which to learn. Instead of de-veloping new alignment algorithm for semantic parsing, we make use of all the alignments as shown in Figure 2. That is to say, we triple the training data with each sentence pair having three alignments, i.e., two alignments in both di-advantages include: first, considering more pos-sible alignments would increase the phrase cov-erage, especially when the training data is little; second, including the alignment from both direc-tions would alleviate the error propagation caused by mis-aligned stop words (e.g., be , the in NL 0 and stateid@1 in MRL 0 ). As a result, the phrase ex-tractor will include phrase pairs of both  X  highest, largest one@1  X  and  X  texas, texas@s  X  . Our exper-iment shows that using the combination of all the three alignments achieve better performance than using any one, or any combination of two. More-over, we found that we could achieve comparable performance even with manual alignment. 3.3 Synthetic Translation Rules for Unknown Most NLP tasks face the problem of unknown words, especially if only little training data is available. For example, it is estimated that 5.7% sentences in the (English) test data in our exper-iments have unknown words. Unknown words usually remain intact in the translation in most machine translation systems (Koehn et al., 2007; Dyer et al., 2010), resulting in the fact that cer-tain translations can not be converted back to tree structures. This indicates that in semantic pars-ing the translation of a word can be from two cat-egories: 1) a token in MRL; or 2) null (i.e., not translated at all), we generate synthetic translation rules for unknown word translation.

As a baseline, we simply skip unknown words as Kwiatkowski et al. (2010) by adding translation rules that translate them to null in MRL 0 . Each such rule is accompanied with one feature indicat-ing that it is a translation rule for unknown word.
Alternatively, taking advantage of publicly available resources, we generate synthetic trans-lation rules for unknown words pivoted by their semantically close words. Algorithm 1 illustrates the process to generate synthetic translation rules for unknown word translation. Given an unknown word w u , it generates its synthetic rules in two steps: 1) finding top n (e.g., 5 as in our experi-ating synthetic translation rules based on the close words. Note that it may generate a synthetic rule with null at the target side since the lexical transla-tion table derived from aligned training data con-tains translation to null . Each synthetic translation rule for unknown words is associated with three features returned from function generate rule . In this section, we test our approach on the Geo-Query dataset, which is publicly available. 4.1 Experimental Settings Data GeoQuery dataset consists of 880 questions paired with their corresponding tree structured se-mantic representations. Following the experimen-tal setup in Jones et al. (2012), we use the 600 question pairs to train and tune our SMT de-coder, and evaluated on the remaining 280. Note that there is another version of GeoQuery dataset where the semantic representation is annotated with lambda calculus expressions and which is ex-tensively studied (Zettlemoyer and Collins, 2005; Wong and Mooney, 2007; Liang et al., 2011; Kwiatkowski et al., 2013). Performance on the version of lambda calculus is higher than that on the tree structured version, however, the results ob-tained over the two versions are not directly com-parable.
 SMT Setting We use cdec (Dyer et al., 2010) as our HPB decoder. As mentioned above, 600 in-stances are used to train and tune our decoder. To get fair results, we split the 600 instances into 10 folds, each having 60 instances. Then for each fold, we use it as the tuning data while the other 540 instances and the NP list are used as train-of the training data, using modified Kneser-Ney smoothing. We use Mira (Chiang et al., 2008) to tune the parameters of the system to maximize BLEU (Papineni et al., 2002). When extracting translation rules from aligned training data, we in-clude both tight and untight phrases.
 Evaluation We use the standard evaluation crite-ria for evaluation by executing both the predicted MRL and the gold standard against the database and obtaining their respective answer. Specifi-MRL (if exists). The translation then is consid-ered correct if and only if its MRL retrieves the same answers as the gold standard MRL (Jones et al., 2012), allowing for a fair comparison between our systems and previous works. As in Jones et al. (2012), we report accuracy, i.e. the percent-age of translations with correct answers, and F1, i.e. the harmonic mean of precision (the propor-tion of correct answers out of translations with an answer) and recall (the proportion of correct an-swers out of all translations). In this section, we report our performance scores and analysis num-bers averaged on our 10 SMT models. Table 2: Performance of our (non-) enriched SCFG systems with different alignment settings. 4.2 Experimental Results Table 2 shows the results of (non-) enriched SCFG systems over different alignment settings. In Ta-ble 2, src2tgt and tgt2src indicate alignment of source to target direction and alignment of tar-get to source direction, respectively; gdfa indi-cates symmetrization of alignment with grow-diag-final-and strategy; src2tgt+tgt2src indicates doubling the training data with each sentence pair having both src2tgt and tgt2src alignments, sim-ilar for src2tgt+gdfa and tgt2src+gdfa ; all indi-cates tripling the training data with each sentence pair having three alignments. Finally, gold indi-Effect of Enriched SCFG From Table 2, we observe that enriched SCFG systems outperform non-enriched SCFG systems over all alignment settings, indicating the effect of enriching non-terminals. In particular for tgt2src alignment, it obtains improvements of 3.5% in accuracy and 2.7% in F1.

As mentioned earlier, the non-enriched SCFG system may result in ill-formed translations, which can not be converted back to tree struc-ture. One natural way to overcome this issue, as in Andreas et al. (2013), would be to simply filter n -best translation till a well-formed one is found. However, we see very limited performance changes in accuracy and F1, suggesting that the ef-fect of using n -best translation is very limited. For example, after using n -best translation, the non-enriched SCFG system with all alignment obtains 82.0 in accuracy (increased from 81.5) and 84.5 in F1 (reduced from 85.2).
 Effect of Word Alignment With respect to the performance over different alignment settings, we have the following observations from Table 2:  X  Semantic parsing is substantially sensitive  X  Thanks to the increased coverage, dou- X  Our approach of tripling the training data
In terms of the src2tgt , tgt2src and gdfa align-ments, the trend of the results is consistent over both non-enriched and enriched SCFG systems: the systems with tgt2src alignment work best while the systems with src2tgt alignment work worst. Next we look at the non-enriched SCFG systems to explore the behavior differences among the three alignments.

We examine the alignment accuracy against the gold alignment on training data (except the NP list part). As shown in Table 3, src2tgt has the high-est recall while tgt2src has the highest precision. This is partly due to: 1) In src2tgt alignment, each source word aligns to exactly one particular tar-get word (or the null token), resulting in frequent Table 4: Confusion matrices of three SMT systems on English test sentences. alignment errors for source side words that have no counterpart in target side. For example, both words of the and be on source side, which play functional roles in NL, rather than semantic roles, align to 15 different target words. 2) Except for a few words on target side, including stateid@1 , all@0 which have strong occurrence patterns (e.g., stateid@1 is always followed by a state name), each word has counterpart on source side.

As to have a clearer understanding on the individual contribution of using enriched non-terminals and multiple word alignments, Table 4 presents two confusion matrices which show num-bers of sentences that are correctly/wrongly parsed by three SMT systems on English test sentences. It shows that, for example, 211 sentences are cor-rectly parsed by both non-enriched and enriched SCFG systems with gdfa alignment. Moving from performance of the non-enriched SMT sys-tem with gdfa alignment to that of the enriched SMT system with all alignment, we observe that on average more than half of the improvement comes from using multiple word alignments, the rest from using enriched non-terminals.
 Effect of Unknown Word Translation Since each of our SMT model is actually trained on 540 instances (plus the NP list), the rate of unknown words in the test data tends to be higher than that in a system trained with the whole 600 instances. Based on the system of enriched SCFG with all alignment, Table 5 shows the results of applying unknown word translation. It shows that translat-ing all unknown words into null obtains 2.4 points in accuracy over the system without it (e.g., 85.3 vs. 82.9). However, the slight improvement in F1 (e.g., 86.3 vs. 86.1) suggests that there are many scenarios that translating unknown words into null is incorrect. Fortunately, our semantic approach is partially able to generate correct translation rules for those unknown words which have translation highly dependent on the quality of the close words found via Word2Vec. With a manual examination on the test data, we found that 11 out of all 17 unknown words should be translated into a corre-sponding token in MRL. For 8 of them, the syn-thetic translation rule set returned by Algorithm 1 contains correct translation rules.
 Effect across Different Languages We have also tested our approach on the same dataset with other three languages. Specifically, while we are not aware of public resources to looking for seman-tically close words in German, Greek and Thai, we translate unknown words into null for the three languages. Table 6 shows the performance over four different languages. It shows that our ap-proach, including enriched SCFG, tripling train-ing data with three alignments, and unknown word translation, obtains consistent improvement over the four languages.
 Decoding Time Analysis We analyze the effect on the decoding time of our approach, which is closely related to the size of phrase tables. Firstly, splitting non-terminal X into enriched ones in-surprising since a phrase with non-terminal X (e.g., the X on the source side) may be further specified as multiple phrases with various non-terminals (e.g., the C , the C/A1 , etc.). As a re-sult, the average number of phrases per sentence (in English test data, hereafter) increases from 453 to 893 while the decoding time of the SMT de-coder increases from 0.11 seconds to 0.19 seconds per sentence on average. Secondly, using multiple alignments also leads to larger phrase tables. This is illustrated by the increase of average number of phrases per sentence from 893 to 2055 while the decoding time moves from 0.19 seconds to 0.38 seconds per sentence on average. Finally, finding similar words via Word2Vec, however, is quite fast since this is bounded by the vocabulary size of our training set. Thanks to the small size of unknown words, adding unknown word translation rules has a very limited impact on the size of phrase ta-ble, consequently negligible changes on decoding time. While there has been substantial work on seman-tic parsing, we focus our discussions on several approaches (e.g., SCFG approach, hybrid tree ap-proach, and others approaches) that focus on the variable-free semantic representations.

WASP (Wong and Mooney, 2006) was strongly influenced by SMT techniques. Although WASP was also using multiple non-terminal symbols in SCFG to guarantee well-formed translations, our work differs from theirs in at least three ways. First, we use a different inventory of non-terminal symbols from theirs which was derived from MRL parses in the GeoQuery dataset. Second, to avoid the issues caused by word alignment between NL and MRL, we triple training data with each sen-tence pair having multiple alignments. However, WASP used a sequence of productions to repre-sent MRL before running GIZA++. Third, we use typical features in HPB SMT (e.g., phrase transla-tion probabilities, lexical translation probabilities, language model feature, etc.) while WASP used rule identity features. SMT-SemParse (Andreas et al., 2013) adapted standard SMT components for semantic parsing. The present work is based on theirs with all the extensions detailed in Section 3.
HYBRIDTREE+ (Lu et al., 2008) learned a synchronous generative model which simultane-ously generated a NL sentence and an MRL tree. tsVB (Jones et al., 2012) used tree transducers, which were similar to the hybrid tree structures, to learn a generative process under a Bayesian frame-work. RHT (Lu, 2014) defined distributions over relaxed hybrid tree structures that jointly repre-sented both sentences and semantics. Most re-cently, f-RHT (Lu, 2015) introduced constrained semantic forests to improve RHT model.

SCISSOR (Ge and Mooney, 2005) augmented syntactic parse tree with semantic information and then performed integrated semantic and syntac-tic parsing to NL sentences. KRISP (Mooney, 2006) used string classifiers to label substrings of an NL with entities from the meaning representa-tion. UBL (Kwiatkowski et al., 2010) performed semantic parsing with an automatically-induced CCG lexicon.

Table 7 shows the evaluation results of our sys-tem as well as those of several other compara-ble related works which share the same experi-ment setup as ours. We can observe from Table 7 that semantic parsing with SMT components gives HYBRIDTREE+, tsVB and UBL is taken from Jones et al. (2012). competitive performance when all the extensions (described in Section 3) are used. Specifically, it significantly outperforms the semantic parser with standard SMT components (Andreas et al., 2013). Our approach reports the best accuracy and F1 scores on English, German, and Greek. While we are able to obtain improvement on Thai, the performance is still lower than those of RHT and TREETRANS. This is probably because of the low quality of word alignment output between this Asian language and MRL. In this paper, we have presented an enriched SCFG approach for semantic parsing which realizes the potential of the SMT approach. The performance improvement is contributed from the extension of translation rules with informative symbols and in-creased coverage. Such an extension share a sim-ilar spirit as generalization of a CCG lexicon for CCG-based semantic parser (Kwiatkowski et al., 2011; Wang et al., 2014). Experiments on bench-mark data have shown that our model is competi-tive to previous work and achieves state-of-the-art performance across a few different languages.
Recently the research of semantic parsing in open domain with weakly (or un-) supervised se-tups, under different settings where the goal was to optimize the performance of certain downstream NLP tasks such as answering questions, has re-ceived a significant amount of attention (Poon and Domingos, 2009; Clarke et al., 2010; Berant et al., 2013; Berant and Liang, 2014). One direc-tion of our future work is to extend the current framework to support the generation of synthetic translation rules from weaker signals (e.g., from question-answer pairs), rather than from aligned parallel data.
 We also noticed recent advance in tree-based SMT. Applying such string-to-tree or tree-to-tree translation models (Yamada and Knight, 2001; Shen et al., 2008) to semantic parsing will nat-urally resolve the inconsistent semantic structure issue, though they require additional information to generate tree labels on the target side. However, due to the constraint that each target phrase needs to map to a syntactic constituent, phrase tables in tree-based translation models usually suffer from the low coverage issue, especially if the training data size is small. Therefore, another direction of our future work is to explore specific problems that will emerge when employing tree-based SMT sys-tems to semantic parsing, and provide solutions to them.
 The authors would like to thank Zhaopeng Tu, S. Matthew English and three anony-mous reviewers for providing helpful sugges-tions, and also acknowledge Jacob Andreas for help in running SMT-SemParse. Junhui Li and Guodong Zhou were supported partially by NSFC grants, No.61273320, No.61331011, No.61305088, No.61401295. Wei Lu was sup-ported by SUTD grant SRG ISTD 2013 064.
