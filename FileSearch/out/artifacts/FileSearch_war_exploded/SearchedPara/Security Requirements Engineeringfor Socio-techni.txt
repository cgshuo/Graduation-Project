 Security is a key aspect in information s ystems development. Lack of security leads to severe consequences, including loss of money, bad reputation, and vi-olation of law. The importance of considering security early in the information system engineering process X  X ince req uirements time X  X s well known [3, 6].
Security is not simply a technical issue. Information systems are part of a broader socio-technical system [1], along with humans and organizations. Unfor-tunately, security mechanisms such as a ccess control and encryption are often put in place without any explicit analysis of the socio-technical context.
The goal of this tutorial is to increase the awareness in the information sys-tems community of the importance of conducting SRE. The intended audience includes students, researchers, and pract itioners in requirements engineering and information systems engineering. We address three main objectives:  X  To justify the need of conducting security requirements engineering.  X  To show why security requirements has t o consider socio-technical aspects.  X  To illustrate a tool-supported method ( STS-ml [2, 5]) that supports security requirements for socio-technical systems.
 In order to achieve these objectives , we present the following topics: 1. Motivation and background . We motivate why securi ty requirements engi-neering is an essential activity, outline the consequences of not conducting it, and show the importance of considering security in the context of a broader socio-technical system. 2. Modeling security requirements with STS-ml . We provide an overview of our framework for security requirements en gineering. STS-ml belongs to the fam-ily of goal-oriented security requirements engineering methods [3, 6]. Com-pared to other approaches in the family, STS-ml differs for (i) providing multi-view modeling, i.e., the analyst describes the security needs in the setting under consideration using three views: social, information, and au-thorization, and (ii) supporting the representation of a variety of fine-grained security requirements, especia lly about information security. 3. Reasoning about security requirements . We show how automated reasoning (implemented in STS-Tool [4, 5], the support modeling and reasoning tool for STS-ml) can effectively support req uirements engineers in identifying inconsistencies and conflict s in security requirements. 4. Generating a security requirements document . We illustrate how an STS-ml model can be automatically proce ssed by STS-Tool to derive a security requirements document that guides re quirements engineers and system ar-chitects in the development of the information system.
 Acknowledgements. This work has been partially supported by the Euro-pean Union Seventh Framework Programme (FP7/2007-2013) under grant no 257930 (Aniketos), and by the Natural Sciences and Engineering Research Coun-cil (NSERC) of Canada through the Business Intelligence Network.
