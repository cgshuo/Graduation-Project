 1. Introduction
Metropolitan systems are expanding day by day and becoming some of the major energy consumers in the cities. It has become a global concern to reduce the energy consumption and costs in railway systems ( Feng et al., 2013b ). Different technologies, devel-opments or strategies are being researched and tested from the point of view of traf fi c management ( Jia and Zhang, 1994; Fay, 2000; Abril et al., 2008; Feng et al., 2013a; Feng et al., 2013b ), optimal use of regenerative braking in order to improve the energy ef fi ciency ( Dom X nguez et al., 2012; Falvo et al., 2011 ) and driving optimization.

The objective in ef fi cient driving (eco-driving) design is to the speed pro fi le that requires the minimum energy consumption without degrading commercial running times. With this aim, various mathematical models have been applied. However, the dif fi culties involved in the analytical resolution of the problem lead to a number of simpli fi cations in the approaches ( Albrecht et al., 2011; Franke et al., 2000, 2000; Khmelnitsky, 2000; Ko et al., 2004; Miyatake and Ko, 2010; Su et al., 2013 ) which makes their application to real cases impractical. The approaches based on simulation offer more promising alternatives. They do not require simpli fi cations in the models and enable an accurate calculation of the running times and the energy consumption. A number of optimization techniques have been used in combination with simulation  X  Genetic Algorithm ( Bocharnikov et al., 2010, 2007;
Cucala et al., 2012b; Lu et al., 2013; Sicre et al., 2012; Wong and Ho, 2003, 2004b; Yang et al., 2012 ), Arti fi cial Neural Networks (ANN) ( Chuang et al., 2009, 2008 ), a combination of both the techniques ( Acikbas and Soylemez, 2008 ) and direct searching methods ( De
Cuadra et al., 1996; Wong and Ho, 2004a ). ANN have also been used to optimize the traf fi c regulation by learning traf and Sheu, 2011 ).
 are equipped with Automatic Train Operation systems (ATO) as seen in many metropolitan trains today. The function of this equipment on board the train is to drive the train automatically according to a preprogrammed speed pro fi le ( Bocharnikov et al., 2007; Chang and Xu, 2000 ). The ATO equipment provides a control reference to the train 0 s traction equipment for observing the maximum and safe speed limits and for stopping the train at stations. The intervention of human drivers is limited just to the opening and closing of the doors and to the starting up of the train after each stop. As a result, the running times and energy consumptions are quite stable when the signalling systems do not affect the circulation of trains.

A set of preprogrammed ATO speed pro fi les are available per interstation with different running times and energy consumption.
Depending on the running time required, the centralized traf regulation system on-line selects the ATO speed pro fi le to be executed by each train between two stations ( Fernandez et al., 2006 ). Each speed pro fi le is programmed as a combination of the
ATO commands that are transmitted to the train from the track via encoded balises or antennas.

The traf fi c regulation systems performance and the total energy consumption strongly depend on the off-line design of these ATO speed pro fi les. Studies on the driving ef fi ciency in metropolitan trains with ATO can be found in Bocharnikov et al. (2007) , Chang and Xu (2000) , Khmelnitsky (2000) , Wong and Ho (2004a) and
Zhou et al. (2011 ). However, they do not satisfy realistic constraints and control capabilities of any particular ATO system or the ATO model is simpli fi ed ( De Cuadra et al., 1996 ), which makes dif their implementation in real ATO equipments. The particular features of the ATO systems, the short inter-stations in metropo-litan lines and the differences of a few seconds between the ATO speed pro fi les to be designed, make it necessary to develop accurate models that optimize the combination of the ATO commands of each speed pro fi le to be preprogrammed in the equipment.

Most of the metropolitan railways use four alternative speed pro fi les per interstation ( Fernandez et al., 2006 ). The fi rst one (number 0) is characterized by the minimum running time ( out), that is to say, applying maximum available acceleration, speed and deceleration. The remaining pro fi les are slower and correspond to lower energy consumption. The maximum time gap between the fastest and the slowest is bounded as an operational criterion ( Cucala et al., 2012a; Dom X nguez et al., 2011 ).
Typically, the con fi guration variables of the ATO systems consist of four commands: coasting speed, re-motoring speed, speed holding value and braking deceleration rate. These com-mands are transmitted to the antenna located under the train via encoded balises on the track which permit a limited amount of data bits to be transmitted due to the channel capacity ( Gill and
Goodman, 1992 ). Thus, only a few and discrete values of the commands can be sent providing each interstation with a rela-tively small solution space of speed pro fi les consisting of the combinations of these discrete values. This way, the optimal solution can be found by exhaustive search, simulating all the possible combinations as described in Dom X nguez et al. (2011 ).
Other studies have also looked for saving energy under the framework of the current fi xed-block signalling system ( Ke et al., 2009 ). However, the new state-of-the-art of signalling technolo-gies such as CBTC permit a better communication capacity (bandwidth) with high-resolution train location determination, and bidirectional train-to-wayside data communications ( IEEE, 1999 ). More command values can be sent since the increment is smaller, thus resulting in an exponential solution space.
Therefore, this calls for a new method for the optimal design of the ATO speed pro fi les without an exhaustive simulation of all the combinations. Some studies are already trying to fi nd optimal driving in CBTC systems ( Gu et al., 2011 ), however, a realistic ATO is not taken into account in these cases either. Some studies have proposed algorithms based on GA ( Bocharnikov et al., 2007; Lu et al., 2013; Wong and Ho, 2004a ), or ACO (Ant Colony Optimization) ( Lu et al., 2013 ) for the single objective optimiza-tion, but they do not consider either realistic characteristics of the ATO equipment. In this paper, the authors propose a multi-objective evolutionary algorithm that has better performance that GA, to obtain the consumption/speed Pareto front based on the detailed simulation of a train equipped with a real ATO system.
Evolutionary computation is inspired by biological processes found in nature. Genetic algorithm (GA) modeled on the Darwi-nian evolutionary paradigm is the oldest and the best known Evolutionary Algorithm (EA). It imitates the natural processes of selection, cross-over and mutation to search for optimum solu-tions in massive search spaces.

Another very recent algorithm belonging to the class of biologically inspired methods is the Particle Swarm Optimization (PSO) ( Kennedy and Eberhart, 1995, 2001, 1997 ). It has already been used in railways problems ( Jamili et al., 2012 ). PSO imitates the social behavior of insects, birds or fi sh swarming together to hunt for food. PSO is a population-based approach that maintains a set of candidate solutions, called particles, which move within the search space. During the exploration of the search space, each particle maintains a memory of two pieces of information: the best solution ( pbest ) that it has encountered so far and the best solution ( gbest ) encountered by the swarm as a whole. This information is used to direct the search. EAs are primarily used in the optimization of a single objective although they have been further extended and used in the simultaneous optimization of multiple objectives. They seem to be especially suited to multi-objective optimization problems (MOOP) due to their abilities to search simultaneously for multiple Pareto optimal solutions and to perform better global search of the search space ( Mitchell, 1996 ).
Many EAs have been developed for solving MOOP. Examples are: NSGA-II ( Deb et al., 2002 ) which is a variant of NSGA (non-dominated sorting genetic algorithm); SPEA2 ( Zitzler et al., 2002 ) which is an improved version of SPEA (Strength Pareto Evolu-tionary Algorithm) and PAES (Pareto Archived Evolution Strategy) ( Knowles and Corne, 2000 ). These EAs are population-based algorithms that possess an in-built mechanism to explore the different parts of the Pareto front simultaneously.

The PSO is also extended to solve MOOP. Among those algo-rithms that extend PSO to solve multi-objective optimization problems are Multi-objective Particle Swarm Optimization (MOPSO) ( Coello et al., 2004 ), Non-dominated Sorting Particle Swarm Optimization (NSPSO) ( Li, 2003 ) and the aggregating function for PSO ( Parsopoulos and Vrahatis, 2002 ). The perfor-mance of different multi-objective algorithms has been tested in Coello et al. (2004 ). MOPSO is found to be the best in covering the full Pareto front of all the functions used. In addition, it is found to converge with a low computational time. Therefore, the MOPSO algorithm has been selected in this paper for fi nding the Pareto front with the optimal ATO speed pro fi les of a real metropolitan line. The algorithm is based on simulation to calculate in detail the realistic characteristics of the ATO driving and the type of commands that can be sent to the train. In this paper a MOPSO algorithm is proposed for the fi rst time for solving this design problem more ef fi ciently that the previous algorithms proposed for the single objective function.
 In Section 2 , the simulation model of a train equipped with an ATO system is introduced. Then, the MOPSO algorithm for the design of ATO speed pro fi les is detailed in Section 3 . Section 4 describes fi rst some tests carried out in order to tune the MOPSO parameters and to validate it. Then, a case study of a real line is described and the results of some interstations are shown, and the proposed MOPSO algorithm is compared to the multi-objective algorithm NSGA-II (non-dominated sorting genetic algorithm II) to show the better performance of the fi rst. In addition, the comfort and operational constraints are introduced in the design of the case study in Section 4 . Finally, conclusions are presented in Section 5 . 2. Train motion simulation model
When it comes to design an energy ef fi cient driving pro decision variables are running time ( RT ) and energy consumption ( EC ), whilst the comfort criteria must be met. Simulation results of these variables must be precise in order to make a proper decision. The validity of the simulation results depends on the accurate simulation of the complete journey of a train between two stations. The authors have developed a simulation model for the accurate simulation of the train movement with an ATO system ( Dom X nguez et al., 2011 ). With the simulator it is possible to obtain every possible speed pro fi le for that ATO system and check the ful fi llment of the operational and comfort constraints speci
The simulation model is composed of three modules: train, line, and ATO modules, considering all the main variables that affect the train dynamics. All the constraints that can affect the train motion (speed limitations, maximum traction effort, etc.) are included in the simulation model.

The model of the train takes into account the length and mass of the train, running resistance, traction and braking maximum curves, variations of the motor ef fi ciency with respect to speed and effort ratio, auxiliary equipment consumption and rotary inertia. The line characteristics included in the model are speed limits, tunnels, grades, grade transitions (and the effect along the train) and bends. The ATO module interprets and executes the commands that can be prepro-grammed in real ATO equipments and always observes the speed limitations of the line and the stop points at stations applying brake effortwhennecessary.TheinputsoftheATOmodulearethesame commands that the train receives from balises (or radio) at each interstation: a braking deceleration rate ( b ), a speed holding value ( s pro fi les based on speed-holding regu lation (left) and speed pro based on coasting-remotoring cycles (right).

The train motion and the ATO modules and algorithms and the validation of them can be found in Dom X nguez et al. (2011 ). The parameter-setting and validation of the simulator to fi t the models and adjust the results is an important aim to get reliable designs since the fi nal goal is the implementation of the designed speed pro fi les and the regulation on the traf fi c operations allow only a few seconds of difference between pro fi les. With this purpose, all the real data of con fi guration of the ATO system, the train and the line such as the gradient with slope transition curves and a list of minimum speed limits along the curves are considered, as well as the distributed mass of the train (instead of a point mass train).
The time step-based simulation model calculates at each step the acceleration of the train from the balance of forces expressed in Eq. (1) .
 M
 X  where the equivalent mass M eq is the mass of the train plus the rotational inertial effect, a is the acceleration of the train, F motor force, F r is the running resistance force and F g is the force due to the track grades. Bends are modeled as equivalent grades.
The equation of the running resistance is a function of the speed ( v ) of the train as shown in Eq. (2) (Davis formula), and the force due to the grades along the track is calculated as shown in Eq. (3) F r  X  A  X  Bv  X  Cv 2  X  2  X 
F g  X  gmp  X  3  X  where m is the mass of the train, and p is the average grade of the track affecting the length of the train at each simulation step. train at each simulation step can be calculated from the uniformly accelerated motion equation. When the simulation from the departure station to the next one is fi nished, the running time RT is obtained.
 simulation step as the electrical power consumed multiplied by the time step, as shown in Eq. (4) , when motoring. Since the ATO speed pro fi les design are carried out off-line and executed on different traf fi c scenarios, the voltage is assumed to have the nominal value. The current is obtained applying the ratio between the required force calculated and the maximum traction force, affected by the ef fi ciency coef fi cient of the motor. See Dom X nguez et al. (2011 ) for a detailed description of the calculations. E  X  IU  X  t  X  4  X  interstation, the power is integrated for all the simulation steps. sured data has been carried out ( Dom X nguez et al., 2011 ). An average difference of 4.2% in traction energy and 1.0% in running times is obtained.
 associated both with the train motion (such as speed limitations, the maximum traction effort, etc.) and with the ATO driving.
Bearing in mind that the objective is to carry out a design for a possible implementation in a real line, it is important to take into account the comfort to ensure the successful implementation of suitable speed pro fi les from the passengers 0 point of view. For example, to apply coasting in a steep uphill results in an unplea-sant feeling of falling. It highlights the importance of accurate and realistic simulations. An error of a few meters in a coasting point could make the train coast in an inappropriate place.
 coasting point in a slope greater than 25 mm/m (Eq. (5) ). p o p max if F m  X  0 and F prev m 4 0  X  5  X  point of coast start, F m is the traction effort at this simulation step and F prev m is the traction effort at the previous step. meterized according to the metro operation expert 0 s criteria: minimum speed throughout the journey (20 km/h) (Eq. (6) ) and maximum number of re-motorings per interstation (Eq. (7) ). v 4 v min  X  6  X  where  X  is the speed of the train and  X  min is the minimum permitted speed. n where n remotoring is the number of re-motorings executed along an interestation and n max is the maximum number of re-motorings permitted.

Likewise, there is an operational restriction of minimum speed limits along the curves that must be observed in order to avoid an excessive wear of the wheels and track. The simulator checks this constraint together with the comfort restrictions. 3. MOPSO algorithm for the design of ATO speed pro fi les
The authors have already presented a design method based on the accurate simulation of all the possible combinations of the ATO speed commands ( Dom X nguez et al., 2011 ). The commands are listed in Table 1 . Combining the commands between the minimum and maximum with the corresponding increase and with a minimum difference of 5 km/h between the coasting and re-motoring speed, all the possible speed pro fi les per interstation (156) are obtained (the squared points in Fig. 2 ). The Pareto front which represents the minimum consumption for each running time, is also obtained for each interstation. It is a multi-criteria optimization problem where the aim is to fi nd the optimal trade-off between the energy consumption and running times. Decision theory techniques were used to solve it according to the shape of the Pareto front. The method has already been applied to real services such as the Madrid ( Dom X nguez et al., 2011 ), Barcelona and Bilbao ( Cucala et al., 2012a ) undergrounds in Spain achieving savings up to 15%.

However, the new state-of-the-art of signalling technologies such as CBTC permit a better communication capacity (bandwidth) with high-resolution train location determination, and bidirec-tional train-to-wayside data communications ( IEEE, 1999 ). More command values can be sent since the increment is smaller ( Table 2 ), thus resulting in an exponential solution space. For instance, given the commands of Table 2 , 20860 combinations are possible. In other words, there would be 20860 different speed pro fi les between two stations. Fig. 2 shows the solution space of one interstation of the Madrid Underground as an example. The computation time is more than 1 h. The fi gure also shows the current solution space using the commands of Table 1 of the same interstation. The computation time associated with Table 1 is less than 1 min in this case, which allows the exhaustive search of the Pareto front. However, the large number of unavailable solutions and the bene fi t of using more combinations are evident. For instance, a speed pro fi le with a running time between 109 s and 111 s would never be selected. Likewise, a speed pro fi le with a running time of 107 s would consume 7.6 kWh in the current solution space associated with Table 1 , and 6.1 kWh in the new solution space associated with Table 2 . Thus, 20% of savings is achievable thanks to the additional solutions.

Thus, a new MOPSO algorithm is proposed in the following for the design of ATO speed pro fi les in this framework with a low computational time.

The population-based PSO algorithm conducts a search using a population of individuals. The individual in the population is called the particle and the population is called the swarm. The perfor-mance of each particle is measured according to a prede fi fi tness function. Particles are assumed to  X  fl y  X  over the search space in order to fi nd promising regions of the landscape. In the mini-mization case, such regions possess lower functional values than other regions visited previously. Each particle is treated as a point in a d-dimensional space which adjusts its own  X  fl ying  X  according to its fl ying experience as well as the fl ying experience of the other companion particles. By making adjustments to the fl ying based on the personal best ( pbest )andtheglobalbest( gbest ) found so far, the swarm as a whole converges to the optimum point, or at least to a near-optimal point, in the search space.

The notations used in PSO and particularized to our problem are as follows: The i th particle of the swarm is a speci combination of the ATO commands and in consequence, a speci speed pro fi le. It is represented in iteration n by a 4-dimensional vector since there are four decision variables (deceleration rate, speed-holding, coasting speed and re-motoring speed), x i ( b change known as velocity, which for the i th particle in iteration n is position with the best fi tness value) of the i th particle is p ( pb i , ps hi , ps ci , ps ri ). The best combination of commands in the swarm, i.e., the speed pro fi le with the smallest function value found in all the previous iterations, is denoted by the index g .Ina given iteration n , particle 0 s new velocity, based on its previous velocity and the distances from its current position to its pbest and to the gbest positions is updated using Eq. (8) . The new velocity is then used to compute the particle 0 s new position Eq. (9) . v  X  n  X  X  wv i  X  n 1  X  X  c 1 r 1  X  p i x i  X  n 1  X  X  X  c 2 r 2  X  p
 X  x  X  n  X  X  x i  X  n 1  X  X  v i  X  n  X  X  9
 X  is the iteration limit; c 1 and c 2 are positive constants (called factors  X  ), and r 1 and r 2 are random numbers between 0 and 1; w is inertia weight that controls the impact of the previous history of the velocities on the current velocity, in fl uencing the trade-off between the global and local experiences . It decreases during a run between w 1 and w 2 ( Table 3 ) since a large inertia weight facilitates global exploration (searching new areas), while a small one tends to facilitate local exploration ( fi ne-tuning the current search area).
As explained above, the objective of the design of ATO speed pro fi les is not to fi nd a unique optimum point but a set of pro with different running time, which is a MOOP. That leads to the MOPSO, an extension of the single objective PSO ( Chakraborty et al., 2011; Samal et al., 2007 ). Thus, the objectives involved in the minimization function are now both the running time RT and the energy consumption EC (Eq. (10) ).
 Min  X  EC  X  x  X  ; RT  X  x  X  X  10
 X  where RT and EC are calculated by means of the simulation model previously described, that takes into account all the constraints associated with the train motion and the ATO equipment. The comfort and operational constraints (Eqs. (5)  X  (7) ) are included in the MOPSO algorithm by means of a fi ltering process as will be described later.

In PSO, gbest and pbest act as guides for the swarm of particles (combination of ATO commands, or associated speed pro fi le) to continue the search as the algorithm proceeds. The main dif in MOPSO is to fi nd the best way of selecting the guides for each combination of ATO commands in the swarm. This is because there are no clear concepts of pbest and gbest that can be identi when dealing with a set of multiple objective functions. Our algorithm is similar to the ones described in the works of Coello et al. (2004) , Coello and Lechuga (2002 ) and Alvarez-Benitez et al. (2005 ). It maintains an external archive A , containing the non-dominated speed pro fi les found by the algorithm so far which will make up the Pareto curve. The MOPSO algorithm has been further re fi ned by including the crowding distance mechanism (CD) found in Raquel and Naval (2005 ) and also used in Zou et al. (2013 ) with the objective of achieving a more even distribution of the speed pro fi les on the Pareto front. The crowding distance of a speed pro fi le is the average distance of its two neighboring solutions when all the speed pro fi les are sorted in ascending objective function values (the sum of both objectives). The speed pro the two extreme edges are given in fi nite crowding distance so that they are always selected to belong to the archive. In the crowding distance MOPSO, the global best guide of the speed pro fi selected with the Top select probability ( Table 3 ) from among those non-dominated speed pro fi les with the highest crowding distance values. Selecting different guides for each combination of com-mands in a speci fi ed top part ( Top select Table 3 ) of the sorted archive based on a decreasing crowding distance, allows the population to move towards those non-dominated speed pro fi in the external archive which are in the least crowded area in the objective space.
 external archive, A . A population of NP combinations of commands is randomly generated. The particle positions ( x i ) and velocities ( are initialized randomly and discretized . These are the values of the commands within their appropriate bounds, tabulated in Table 2 .
At each iteration n the velocities and the positions of the particles are updated using Eqs. (8) and (9) , respectively. The particle positions are checked if they are constraint to the bounded region after each update. Similarly, the velocities of each particle are forced into the bounds, if they have crossed them. The objective functions (energy consumption and running time) y i  X  [ EC ( x ( x i )] are then evaluated for each of the combination of commands, after performing simulation of the train drives.
 personal and the global guides. If the current position of x dominates p i , that is, if the value of x i is lower or equal in both objectives than its current pbest ,orif x i and p i are mutually non-dominating, then p i is set to the current position. However, if only one of these two objectives ( EC ( x ), RT ( x )) is improved, then p to either the previous pbest or the current position with a 50% probability. Members of A are mutually non-dominating and no member of the archive is dominated by any x i . All the members of the archive are, therefore, candidates for the global guide. However, if the members of the archive are selected as global guides based on uniform probability, the result is a Pareto front with substantial gaps in between. To fi ll up these gaps, the crowding distance MOPSO selects the global best guide from a speci fi ed top portion ( Top select Table 3 ) of the archive A sorted in descending values of the crowding distance. The algorithm used is described in Fig. 3 .

All the solutions provided by the MOPSO are feasible with respect to driving constraints. Constraints associated with the train motion (such as speed limitations along the track, the maximum traction effort and braking curves of the train, etc.) are taken into account in the simulation model of the train and the line. In addition, constrains associated with the ATO driving are included in the ATO model: the type of commands and the values that can be programmed for each type of command.

The MOPSO algorithm could be transformed into a single objective one, for instance through a weighted sum formulation, in the case the objective of the algorithm were to design a single driving for the interstation. However, as the purpose is to obtain the full Pareto front for all the possible running times, the proposed MOPSO will be more ef fi cient than just iterating the single objective algorithm repeatedly for different weighting factors, to obtain one solution every time it is executed. Instead, the MOPSO algorithm is executed once, storing at each iteration the set of non dominated solutions for different running times. 4. Case study and results
The algorithm in Fig. 3 has been compared with the Pareto front obtained by exhaustive simulation of the whole solution space in order to check the fi tness of the MOPSO solution. That way, the performance of the algorithm has been validated before applying it to a real case. Then the proposed algorithm is compared with the NSGA-II algorithm (non-dominated sorting genetic algorithm II) 4.1. Tests and validation
An interstation of 2125 m with fl at track ( Fig. 4 ) has been used for tuning the MOPSO algorithm, and testing the application of this algorithm to the ef fi cient ATO driving problem. This case example has been selected since the computation time is smaller in comparison with a real station due to the fl at track and simple pro fi le of maximum speed limits. Thus, it is suitable for the tuning of the MOPSO parameters ( Table 3 ) as well as its validation.
Table 3 shows the values selected for the MOPSO parameters which have been tuned with this case example.

The computation time to obtain the whole solution space with exhaustive searching using the commands in Table 2 is 13 min, while it is only 29 s for MOPSO algorithm with 40 particles, 20 iterations and the MOPSO parameters of Table 3 to obtain the Pareto front. More important than this is the huge difference in the increase in the computation time of the exhaustive simulation and that of the MOPSO algorithm considering the number of possible solutions or combinations of the commands. The exhaustive search increases drastically when the size of the solution space increases (due to the shorter parameters increments) while the time of the MOPSO algorithm remains approximately constant.
The solution of the MOPSO algorithm is superimposed in the graph of the exhaustive solutions ( Fig. 5 ) in order to check its fi tness. Every point (speed pro fi le) belonging to the Pareto front obtained from MOPSO solution must belong to the space solution as well. If not, it would be a speed pro fi le obtained with a combination of ATO commands not included in Table 2 . The evolution of the MOPSO solutions through the iterations is shown in Fig. 6 . 4.2. Application to a real line
According to Fig. 5 , the MOPSO algorithm seems to deal well with the problem of fi nding the Pareto front in the space solution of the possible ATO speed pro fi les between two stations. However, the interstation simulated was a simple non-real case example when the objective is to apply the method in real metropolitan lines. Therefore, the algorithm has been used to obtain the optimal solutions in a real line. The case study selected is line 3 of the Madrid Underground with 17 interstations and 13.5 km per direc-tion. The gradient pro fi les are up to 50 mm/m. The values of the commands in Table 2 have been assumed.

Fig. 7 shows the solution space of all the speed pro fi les computed in SC1 station in the Madrid Underground with all the combinations of the ATO commands in Table 2 . The computation time to obtain it was 50 min. The solution obtained by the MOPSO algorithm is superimposed in the same graph in order to check its fi tness. The MOPSO solution took almost one-fi fth of the comput-ing time, using the MOPSO parameters of Table 3 .

Once the algorithm has been checked for a real case, the objective is to fi nd the optimal speed pro fi les available for the complete interval of running times per each interstation of the case study. Fig. 8 shows the Pareto fronts of different interstations of the case study. From these solutions it is possible to choose as many pro fi les as needed to be programmed in the traf fi tion system.
 Fig. 9 shows a comparison between one of the Pareto curves in Fig. 8 (interstation AL1) and the Pareto curve obtained with the current values of the ATO speed commands ( Table 1 ). Not only the density of solutions is larger in the new Pareto curve as expected, but also the new solutions improve the currently executable ones.
Up to 18% of savings can be achieved with some of the new speed pro fi les. 4.3. Comparison of MOPSO algorithm with NSGA-II
NSGA-II algorithm (non-dominated sorting genetic algorithm II) proposed by Deb et al. (2002 ). This evolutionary algorithm applies a fast non dominated sorting approach and the elitism in order to fi nd the Pareto optimal front. NSGA-II has been programmed in the same platform as MOPSO to ensure that the computation time is comparable. The same crowding distance function, previously described, is used in NSGA-II. Furthermore the population size in the NSGA-II programmed has the same value than the number of particles in MOPSO and the maximum number of iterations is equal in both cases. The con fi guration parameters that have been used in the NSGA-II are shown in Table 4 .
 has been carried out using the metrics described in Coello et al. (2004 ) and Jim X nez et al. (2013 ) that compare the results of the algorithms with the points of the real Pareto front. Such real
Pareto front has been obtained in this paper through exhaustive simulation of the full space of possible solutions. (a) Normalized hypervolume.
 (b) Generational distance (c) Spread distance between adjacent solutions and d is the mean value of such measurements. (d) Error ratio
The error ratio indicator calculates the percentage of solutions provided by the algorithm that are not members of the real (e) Spacing where d 0 i is the distance of neighboring individuals in the front obtained with the algorithm and d 0 is the mean value for these distances.

The real case showed in Fig. 9 has been used to test the performance of both algorithms. The obtained results are measured by the foregoing indicators and are presented in Tables 5 and 6 . Fig. 10 shows graphically the comparison of the results.

It is shown in Fig. 10 that the MOPSO algorithm front is closer to the real Pareto front and it has a better distribution of the individuals in the objective space. Solutions provided by the NSGA-II algorithm can consume up to 10% more than the solutions provided by MOPSO. Furthermore, for higher running times the NSGA-II has dif fi culties to fi nd non dominated solutions.
It has to be noted that the real Pareto front, calculated by exhaustive simulation of all the po ssible combinations of ATO com-mands,isanoncontinuouscurveandthediscretesolutionsarenot uniformly distributed, as just the solutions that can be executed by the real ATO equipment belong to such real front. As a consequence, it is important to calculate the diversity measures for the real Pareto front (hypervolume, spread and spacing) in order to later compare the measures of MOPSO and NSGA-II algorithms with them.

Table 5 summarizes the previously de fi ned measures associated with the proximity to the real Pareto front and the diversity of solutions. For a computational time practically equal in both algo-rithms, the measure of the proximity to real Pareto front shows that the MOPSO provides better solutions (for example, the error ratio of MOPSOis16.95%muchlessthan77.55%oftheNSGA-II) diversity measures in percentage for both algorithms to the measures of the real Pareto front. It should be noted that the hypervolume of the solution obtained by the MOPSO is practically the hypervolume of the optimal solution (0.74% difference) while for the NSGA-II is 10% higher. The spread, spacing and number of solutions metrics of MOPSO have closer values to the real Pareto front than NSGA-II metrics.
 rithms through the normalized hypervolume indicator. It shows that the MOPSO is improving the result of the found solution until the last iteration while NSGA-II fi nds a stable solution in 24 iterations but with a higher error.
 has better performance than the NSGA-II algorithm, for diversity of solutions and proximity to the real Pareto front.
 4.4. Comfort and operational constraints in MOPSO algorithm
The solution spaces showed so far were feasible considering the line, train and ATO constraints. However they did not take into account comfort and operational constraints. As mentioned before, for a successful implementation of the designed speed pro necessary to observe the comfort criteria as well as the constraint of minimum speed along the curves. This includes a new condition in the
MOPSO algorithm to fi lter unfeasible solutions (regarding comfort and operational constraints); if the simulator identi fi es a pro unfeasible, it will be rejected as a candidate to dominant speed pro
Fig. 12 shows how the MOPSO solution is made up of different points (speed pro fi les) and all of them are comfortable and ful operational constraints. As shown in Fig. 12 , the Pareto front shows gaps. However, the gaps are not due to the bad performance of the crowding distance MOPSO algorithm. Since the comfort criteria are included in the optimization, many pro fi les are rejected and the Pareto front is made up of fewer points, providing as a result a continuous  X  Pareto front. 5. Conclusions
Previous works have already highlighted the importance of the optimal design of ATO speed pro fi les, taking into account the technical requirements, the quality of service and additionally the minimization of energy consumption. However, the design proce-dures are based on the exhaustive simulation of all the possible combinations of the speed commands, and the solutions obtained provide an average energy savings of 15%.

The new signalling technologies such as CBTC permit a better communication capacity and thus, the possible values of the ATO parameters that can be sent to the train (that is, the associated number of different possible speed pro fi les) is drastically higher. It has been shown in this paper that some of these new possible speed pro fi les are more ef fi cient from the energy point of view (up to 20%) and are located precisely in some of the Pareto front gaps. Consequently, it is important to propose a new design algorithm that can fi nd ef fi ciently the Pareto front in this new solution space.
In this paper, a new algorithm for the optimal design of the ATO speed pro fi les has been proposed based on the MOPSO search algorithm and the accurate simulation of the ATO and train motion. The MOPSO algorithm has been further re fi ned by including the crowding distance mechanism to fi ll the gaps in the Pareto front, and the comfort and operational constraints have also been modeled to discard the unfeasible solutions.
The proposed design algorithm is ef fi cient in computational time and has better performance than the NSGA-II algorithm, for metrics of diversity and proximity to the real Pareto front. The fi tness of the MOPSO solution and the performance of the algorithm have been veri fi ed with real examples, and the results for some interstations of Line 3 of the Madrid underground have been shown.
 References
