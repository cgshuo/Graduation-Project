 Matching records that refer to the same entity across data-bases is becoming an increasingly important part of many data mining projects, as often data from multiple sources needs to be matched in order to enrich data or improve its quality. Significant advances in record linkage techniques have been made in recent years. However, many new tech-niques are either implemented in research proof-of-concep t systems only, or they are hidden within expensive  X  X lack box X  commercial software. This makes it difficult for both researchers and practitioners to experiment with new recor d linkage techniques, and to compare existing techniques wit h new ones. The Febrl (Freely Extensible Biomedical Record Linkage) system aims to fill this gap. It contains many re-cently developed techniques for data cleaning, deduplicat ion and record linkage, and encapsulates them into a graphi-cal user interface (GUI). Febrl thus allows even inexperi-enced users to learn and experiment with both traditional and new record linkage techniques. Because Febrl is written in Python and its source code is available, it is fairly easy t o integrate new record linkage techniques into it. Therefore , Febrl can be seen as a tool that allows researchers to com-pare various existing record linkage techniques with their own ones, enabling the record linkage research community to conduct their work more efficiently. Additionally, Febrl is suitable as a training tool for new record linkage users, and it can also be used for practical linkage projects with data sets that contain up to several hundred thousand records. Categories and Subject Descriptors: H.2.8 [Database applications]: Data mining General Terms: Algorithms, Experimentation Keywords: Data matching, data linkage, deduplication, data cleaning, open source software, Python
Febrl has been developed since 2002 as part of a collab-orative research project conduced between the Australian National University in Canberra and the New South Wales Department of Health in Sydney, Australia. The objective of this project is to develop new techniques for improved data cleaning and standardisation, deduplication and reco rd linkage within the domain of health databases.
 The Febrl system is written in the programming language velopment, as it provides data structures such as sets, list s and dictionaries (associative arrays) that allow efficient h an-dling of very large data sets. It also includes many modules offering a large variety of functionalities. It has excellen t built-in string handling capabilities, and the large numbe r of extension modules facilitate, for example, database ac-cess and GUI development. The Febrl GUI is based on the Febrl is published under an open source software licence. Due to the availability of its source code, Febrl is suitable for the rapid development, implementation, and testing of nove l record linkage algorithms and techniques, as well as for bot h new and experienced users to learn about, and experiment with, various record linkage techniques. Since 2002 Febrl has been hosted on the Sourceforge.Net repository at: The total number of downloads of Febrl files on 14th June 2008 has reached 9,840. To the best of the author X  X  knowl-edge, Febrl is the only open source record linkage system with a GUI that allows data cleaning and standardisation, deduplication and record linkage. The current Febrl-0.4 ver-sion includes the source code, several example data sets (as available from the SecondString toolkit 4 ), and a data set generator. The documentation contains several papers that describe the techniques implemented in Febrl , and a manual that includes several step-by-step tutorials.

Compared to earlier versions, Febrl-0.4 not only contains a GUI, but also a variety of new techniques, as described below. Some of the screenshots following show an example linkage of the  X  X ensus X  data set from SecondString .
The Febrl GUI has been developed with the objective to make Febrl more accessible to non-technical record linkage users [8]. The structure of the Febrl GUI follows the Rattle open source data mining tool [17]. The basic idea is to have a window that contains one tab (similar to tabs in modern Web browsers) per major step of the record linkage process. The start-up Febrl GUI is shown in Figure 1. First, only two tabs are visibly, additional tabs will appear once the input data has been initialised. http://www.python.org http://www.pygtk.org http://glade.gnome.org http://secondstring.sourceforge.net Figure 1: Initial Febrl user interface after start-up.
On each tab, the user can select methods and their pa-rameters, and then confirm these settings by clicking the  X  X xecute X  button. Corresponding Febrl Python code will be generated and shown in the  X  X og X  tab. Once all necessary steps are set up, the generated Python code can be saved and run outside of the GUI, or a project can be started and its results can be evaluated from within the Febrl GUI. All major tabs will be described in more detail and illustrated with corresponding screenshots in the following sections.
A user first has to select the type of project to be con-ducted: (a) cleaning and standardisation of a data set, (b) deduplication of a data set, or (c) linkage of two data sets. The  X  X ata X  tab of the Febrl GUI will change accordingly and either show one or two input data set selection areas. Currently, several text based file formats are supported, in -cluding the commonly used CSV (comma separated values) format. Once a file has been selected, its first few lines will be shown, as illustrated in Figure 2. This enables the user to verify the chosen settings, or adjust them if required. When satisfied, a click on the  X  X xecute X  button will confirm the settings, and the tabs for data exploration and, depending upon the project type selected, standardisation, or indexi ng, comparison and classification will become visible.
The  X  X xplore X  tab enables the user to analyse the input data set(s) to get a better understanding of its/their conte nt and quality. After a click on the  X  X xecute X  button, the data set(s) will be read and all fields (or attributes, columns) wi ll be analysed. A report will be displayed that for each field provides information about the number of different values in it, the alphabetically smallest and largest values, the mos t and least frequent values, the quantiles distribution of th e values, the number of records with missing values, as well as a guess of the type of the field (if it contains only digits, only letters, or is of mixed type). A summary table of this analysis is then displayed, as shown in Figure 3.
Data cleaning and standardisation using the Febrl GUI is currently done separately from a linkage or deduplica-tion. A data set can be cleaned and standardised, and is Figure 2: Febrl user interface for a linkage project af-ter the  X  X ensus X  input data sets have been initialised. Figure 3: Data exploration tab showing summary analysis of record fields (or attributes, columns). then written into a new data set, which in turn can then be deduplicated or used for a linkage. Currently, Febrl con-tains standardisers for names, addresses, dates, and tele-phone numbers. The name standardiser uses a rule-based approach for simple names (such as those made of one given-and one surname only) in combination with a probabilistic hidden Markov model (HMM) approach for more complex names [11], while address standardisation is fully based on a HMM approach [9]. These HMMs currently have to be trained outside of the Febrl GUI, using separate Febrl mod-ules. Dates are standardised using a list of format strings Figure 4: Example date and telephone number stan-dardisers (for a synthetic Febrl data set).
 Figure 5: Example indexing definition using the  X  X lockingIndex X  method and two index definitions. that provide the expected date formats likely to be found in the input data set. Telephone numbers are also standardised using a rule-based approach. Once initialised and confirmed with a click on  X  X xecute X , on the  X  X utput/Run X  tab (see be-low) the file name of the standardised output file can be chosen, and a standardisation project can then be started by clicking  X  X xecute X  on the  X  X utput/Run X  tab.
Blocking or indexing is used to reduce the number of de-tailed record pair comparisons to be done [2]. On the  X  X ndex X  tab, a user can select one of seven possible indexing meth-ods. Besides the  X  X ullIndex X  (which will compare all record pairs and thus has a quadratic complexity) and the stan-dard  X  X lockingIndex X  approach [2] as implemented in many record linkage systems, Febrl contains five recently devel-oped indexing methods [4]:  X  X ortingIndex X , which is based on the sorted neighbourhood approach [15];  X  X GramIndex X , which uses sub-strings of length q to allow fuzzy blocking [2];  X  X anopyIndex X , which employs overlapping canopy cluster-Figure 6: An example of three field comparison func-tion definitions. ing using TF-IDF or Jaccard similarity [12];  X  X tringMapIn-dex X , which maps the index key values into a multi-dim-ensional space and performs canopy clustering on these mult i-dimensional objects [16]; and  X  X uffixArrayIndex X , which gen -erates all suffixes of the index key values and inserts them into a sorted array to enable efficient access to the index key values and generation of the corresponding blocks [1].
Once an index method has been chosen, the actual in-dex keys have to be selected and their various parameters have to be set. Index keys are made of one field value, or a concatenation of several field values, that are often phonet i-cally encoded to group similar sounding values into the same block. Febrl contains nine encoding methods [3], including Soundex, NYSIIS, Phonix, Phonex, and Double-Metaphone.
The similarity functions used to compare the field (at-tribute) values of record pairs can be selected on the  X  X om-parison X  tab, as shown in Figure 6. Febrl contains 26 simi-larity functions, including 20 approximate string compari son functions [3], as well as functions specialised for dates, t imes, ages, or numerical values. All these similarity functions r e-turn a numerical value between 0 (total dissimilarity) and 1 (exact match). It is possible to adjust these values by set-ting agreement and disagreement weights, as well as a specia l value that will be returned if one or both of the compared values is/are empty. The similarity weights calculated for each compared record pair will be stored in a weight vector, to be used for classifying record pairs in the next step.
Febrl contains several record pair classifiers, both super-vised and unsupervised techniques. The traditional  X  X el-legiSunter X  classifier requires manual setting of two thres h-olds [13], while with the supervised  X  X ptimalThreshold X  cl as-sifier it is assumed that the true match status for all com-pared record pairs is known, and thus an optimal thresh-old can be calculated based on the corresponding summed weight vectors. Another supervised classifier is  X  X uppVec-Machine X , which implements a support vector machine. Figure 7: Example  X  X wo-Step X  unsupervised weight vector classifier.

Both the  X  X Means X  and  X  X arthestFirst X  [14] classifiers are unsupervised clustering approaches, and group the weight vectors into a match and a non-match cluster. Various cen-troid initialisation and distance measures are implemente d in Febrl . Finally, the  X  X woStep X  classifier, shown in Figure 7, is an unsupervised approach which in a first step selects weight vectors from the compared record pairs that with high likelihood correspond to true matches and true non-matches, and in a second step uses these vectors as training examples for a binary classifier [5, 7, 6].
On this tab (not shown due to space limitation) the user can select various settings of how the match status and the matched record pairs will be saved into files. With a click on  X  X xecute X , the Febrl GUI will ask the user if the generated project should be saved as a Python file, and if the project should be started and run within the GUI. Once started, a window will pop up showing a progress bar.
On the  X  X valuation X  tab, shown in Figure 8, the results of a deduplication or linkage project are visualised as a his -togram of the summed matching weights of all compared record pairs. If the true match and non-match status of record pairs is available, the quality of the conducted link -age will be shown using the measurements of accuracy, pre-cision, recall and F-measure. Also shown are measures that allow the evaluation of the complexity of a deduplication or linkage project (i.e. the number of record pairs generated b y the indexing step and their quality), these measures are the reduction ratio, pairs completeness and pairs quality [10] .
On this tab the Febrl Python code generated throughout a project is shown, allowing experienced users to verify the correctness of the generated code. It also enables copying o f this code into a user X  X  own Febrl Python modules.
This work is supported by an Australian Research Council (ARC) Linkage Grant LP0453463 and partially funded by the New South Wales Department of Health, Sydney. Figure 8: Evaluation tab showing the matching weight histogram and quality and complexity mea-sures for a linkage.
