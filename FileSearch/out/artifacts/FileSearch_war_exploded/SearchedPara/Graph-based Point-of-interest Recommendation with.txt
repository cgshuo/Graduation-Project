 The availability of user check-in data in large volume from the rapid growing location-based social networks (LBSNs) enables a number of important location-aware services. Point-of-interest (POI) recommendation is one of such services, which is to recommend POIs that users have not visited before. It has been observed that: (i) users tend to visit nearby places, and (ii) users tend to visit dif-ferent places in di ff erent time slots, and in the same time slot, users tend to periodically visit the same places. For example, users usu-ally visit a restaurant during lunch hours, and visit a pub at night. In this paper, we focus on the problem of time-aware POI recom-mendation , which aims at recommending a list of POIs for a user to visit at a given time. To exploit both geographical and tempo-ral influences in time-aware POI recommendation, we propose the Geographical-Temporal influences Aware Graph (GTAG) to model check-in records, geographical influence and temporal influence. For e ff ective and e ffi cient recommendation based on GTAG, we de-velop a preference propagation algorithm named Breadth-first Pref-erence Propagation (BPP). The algorithm follows a relaxed breath-first search strategy, and returns recommendation results within at most 6 propagation steps. Our experimental results on two real-world datasets show that the proposed graph-based approach out-performs state-of-the-art POI recommendation methods substan-tially.
 H.3.3 [ Information Search and Retrieval ]: Information Filtering Recommendation; Point-of-interest; Location-based Social Networks; Preference Propagation; Spatio-Temporal
Location-based social networks (LBSNs), such as Foursquare and Facebook Places, have become increasingly popular recently. They provide a platform for millions of users to share their geo-graphical locations and experiences through check-ins . Each check-in represents a user X  X  visit to a point-of-interest (POI), such as a restaurant, a sightseeing site, etc., at a specific visiting time. Fig-ure 1 gives an example check-in: a user named Anon. User visited Times Square on July 18, 2011 . As of January 2014, Foursquare accumulated over 5 billion check-ins made by 45 million users.
The availability of user check-in data in large volume o ff opportunity to design appealing services to facilitate users X  travels and social interactions. POI recommendation is one of such ser-vices, which aims at recommending POIs to users who have not visited them before. Note that, it is common to have thousands of POIs even in a small city, and a user may have visited only a small portion of them. POI recommendation can help both residents and visitors to explore new interesting places in a city. On the other hand, POI recommendation certainly benefits the business owners of POIs for attracting more customers.

In this paper, we focus on the problem of time-aware POI rec-ommendation , which is to recommend POIs for a target user to visit at a specific time slot in a day (target time). The recommendation results are time-aware due to the observation that a user tends to go to di ff erent places at di ff erent time slots. For example, a person is more likely to go to a pub rather than a restaurant at midnight.
From historical check-in records obtained from Foursquare or other sources, two observations have been made in existing stud-ies related to POI recommendation. First, many users tend to visit nearby places [7, 30, 32]. We refer to this observation as the geo-graphical influence on users X  daily activities. Second, many users tend to visit di ff erent places at di ff erent time slots and periodically visit the same places in the same time slot [7,17,32]. For example, users usually go to work places in the morning and have dinner at restaurants in the early evening. We refer to this observation as the temporal influence on users X  daily activities.

The geographical influence suggests that the chance of a user visiting a POI will be higher if this POI is closer to the user X  X  pre-viously visited POIs. In other words, a POI recommendation algo-rithm should consider geographical influence and rank such POIs higher. On the other hand, the temporal influence suggests that a POI recommendation algorithm shall consider user mobility pat-tern and recommend the right types of places based on the time a user plans to visit. For example, when we recommend POIs for a user to visit during lunch hour, a restaurant should be given a higher priority than a pub.

To exploit both geographical and temporal influences for time-aware POI recommendation, we propose a graph-based approach. In our approach, a graph named Geographical-Temporal influences Aware Graph (GTAG) is constructed using all users X  check-in records. GTAG consists of three types of nodes (user node, POI node, and session node) and two types of links (check-in link and POI link). Each user is represented by a user node that connects to a set of session nodes of the user, each of which represents a time slot ( e.g., an hour in a day). A session node of a user is connected to a POI node if the user of the session node visits the POI in the corre-sponding time slot. A pair of edges (between user node and session node, and between session node and POI node, respectively) form a check-in link, which represents a check-in record of the user. Two POI nodes are connected through a POI link if they are located geographically near each other. Hence, GTAG embeds both the temporal and geographical information from the check-in records. Introducing the session nodes for each user will make the data more sparse, which is a challenge for recommendation. To alleviate the data sparsity problem, we propose to compute the importance of each session, and the sessions close to the target session are as-signed larger weights, since the behaviors of a user in two close time slots are similar.

Apart from e ff ectiveness, e ffi ciency is also an important consid-eration in designing recommendation algorithms, for the number of candidate items being always very large. Utilizing the struc-tured properties of the GTAG, we propose an e ff ective and e recommendation algorithm named Breadth-first Preference Propa-gation (BPP). The algorithm follows a relaxed breath-first search strategy, and returns recommendation results within 6 propagation steps.

In our experiments on two real-world datasets, the proposed GTAG with BPP significantly outperforms state-of-the-art algorithms in-cluding the random-walk based algorithms. To summarize, the main contributions of this paper are three-fold:
The rest of the paper is organized as follows: we review previous work in Section 2, and report the datasets and the observations on temporal influence in Section 3. In Sections 4 and 5, we introduce the GTAG and the recommendation algorithm BPP, respectively. The experimental results are presented in Section 6. Finally, we conclude this paper in Section 7. Collaborative Filtering Collaborative filtering (CF) has been widely adopted for recommender systems. CF exploits users X  historical purchase ratings or preference to make recommendations, and it can be divided into two categories, namely, memory-based CF and model-based CF. Memory-based CF methods, such as user-based CF and item-based CF [24], utilize user rating data to calculate the similarity between users or items to make recommendations. In contrast, model-based CF builds recommendation models using data mining techniques, such as matrix factorization [15] and prob-abilistic topic model [1]. Our proposed method is a graph-based CF method, which falls in in the category of model-based. Most of existing graph-based CF methods are based on random walks with restart on the user-item graph [2,13], while some recent proposals employ di ff erent preference propagation strategies on the user-item graph [3,26].
 POI Recommendation Most of POI recommendation studies ex-ploit geographical information. User-based CF and item-based CF are explored in [18, 29, 30]. Ye et al. [30] exploit social influence and geographical influence under the framework of user-based CF to make POI recommendations. The authors also study on im-proving the e ffi ciency for POI recommendations in their earlier work [29]. Levandoski et al. [18] employ item-based CF to make POI recommendations with the consideration of travel penalty, which is proportional to the distance between the target user and a POI.
Several model-based approaches have been proposed. Noulas et al. [23] find that random walk based approach significantly outper-forms MF, user-based CF and item-based CF for POI recommen-dation. Cheng et al. [5] develop a matrix factorization (MF) based model, which incorporates the geographical information by a Gaus-sian mixture model (GMM). Kurashima et al. [16] propose a topic model, in which a POI is sampled based on the topics and the dis-tance to historical POIs visited by the target user. Wang et al. [25] propose algorithms under the framework of personalized Pagerank, where the POIs far away from the visited POIs of the target user are filtered out. Yin et al. [31] consider the topic di ff erences between cities, and propose an LDA-based model to recommend POIs for a given user at a given city. Liu et al. [19] combines probabilistic model with MF to recommend POIs.

Besides the geographical information, some other information has been exploited, such as POI category (tags) [4, 11, 20, 22] and social information [5,9,25,28,30]. However, POI categories are not always available, and social information has been shown to con-tribute little to the recommendation performance [5,30]. Recommendation with Temporal Information A number of time-aware recommendation techniques have been proposed under the framework of decision-tree [33], matrix-factorization [14, 21, 27], item-based CF [8] or graph [26].

Ding et al. [8] assume that the recent ratings of users should play a bigger impact on their current preference than do the older ratings. Based on the assumption, when estimating item similarities for item-based CF, they decay the weight of older ratings.
Xiang et al. [26] assume that users X  purchase behaviors are influ-enced by their long-term and short-term preferences. They propose a bipartite Session-based Temporal Graph (STG) to model the two kinds of preferences. The STG contains three types of nodes, user node, item node and session node, where the time range is divided into bins and each user-bin pair becomes a session node. A user is connected to an item node if the user purchased the item, and the item is also connected to the corresponding session node. Based on the STG, they propose an Multi-Source Injected Preference Fu-sion (MS-IPF) algorithm to propagate the preference from the tar-get user nodes (reflecting long-term preference) and corresponding session nodes (reflecting short-term preference) to candidate item nodes. The preference that a candidate node receives via the short-est path is used as its recommendation score. The MS-IPF algo-rithm is designed for bipartite graphs, and we do not see how it can be applied to general graphs.

Although both MS-IPF [26] and our method are graph-based methods, they are greatly di ff erent in both the graph structure and the recommendation technique, which will be detailed in Section 4.3. Time-aware POI Recommendation Yuan et al. [32] propose a model named UTE-SE to make time-aware recommendations, which incorporates time dimension into user-based CF. To address the sparsity problem, they calculate the check-in similarities between di ff erent time slots, and employ various techniques to smooth the check-in matrix. They also explore the geographical influence that users tend to visit POIs that are close to their previously visited POI. The scores calculated based on the temporal influence and ge-ographical influence are linearly combined as the final recommen-dation score for a candidate POI. Di ff erent from [32], our proposed GTAG method is a graph-based method that exploits the geographi-cal and temporal influences in an integrated way. Hu et al. [12] pro-pose a topic-model based approach named Spatio-Temporal Topic (STT), which exploits the spatio-temporal aspects of user check-ins for time-aware POI recommendation. In STT, each user has distributions over topics and regions, and each time slot has dis-tributions over topics and POIs. The regions, topics and time to-gether influence users X  checkin activities. However, the authors do not provide details for parameter estimation and tuning, which makes it hard to evaluate its e ff ectiveness in the experiments. Gao et al. [10] propose location recommendation framework with tem-poral e ff ects (LRT) to explore temporal influence for POI recom-mendations. LRT is an MF-based method that factorizes the user-time-POI check-in matrix to get users X  temporal preference matrix U in time t and location characteristics matrix L . Then, the POI preference of the target user is constructed and aggregated based on L and U t in all time slots. LRT does not exploit geographical influence for recommendation. Note that LRT is not used to rec-ommend POIs for a target time in [10]. In Section 6, we tailor it for time-aware POI recommendation by removing the aggregation step, i.e., the POI preference of the target user in target time t is estimated based on L and U t only.
Since geographical influence ( i.e., users tend to visit nearby places, and the willingness of visiting a place decreases with the increase of distance) has been verified in [32], in this section we concen-trate on the temporal influence to users X  check-in behaviors on the datasets released by authors of [32]. The two datasets contain check-in records from Foursquare and Gowalla , respectively. The Foursquare dataset contains 342,850 check-ins made in Singapore between Aug. 2010 and Jul. 2011. The Gowalla dataset, originally from [7], contains 736,148 Gowalla check-ins made within California and Nevada between Feb. 2009 and Oct. 2010. Each check-in is a user , POI , time tuple and each POI has its own geographical coordinates.

For a fair comparison with the methods reported in [32], the same data preprocessing is carried on the datasets. That is, the users who checked in fewer than 5 POIs and the POIs which have fewer than 5 users checked in are removed. After preprocessing, the Foursquare dataset contains 194,108 check-ins made by 2,321 users at 5,596 POIs, and the Gowalla dataset contains 456,988 check-ins made by 10,162 users at 24,250 POIs (see Table 1). Observe that the two datasets have di ff erent scales in terms of the size of entities ( i.e., users, POIs, and check-ins) and the geographical range.
First, we examine the probabilities that users return to their firstly visited POIs after di ff erent number of hours. Specifically, if a user visits a POI multiple times, we calculate the time di ff erence be-tween her first check-in at the POI and each of her subsequent check-ins. The time di ff erences of all users at all POIs are aggre-gated and grouped into bins on hourly basis. Figure 2 plots the probability distribution obtained on the Foursquare dataset. Ob-serve that, the returning peaks occur around every 24 hours ( e.g., 24, 48, 72, etc.), suggesting that users X  check-in activities are daily periodic. That is, in close time periods of a day, users are likely to visit the same places, and in di ff erent time periods of a day, users visit di ff erent places . This observation is in accordance with the findings reported in [6].

Next, to further understand the periodicity, we discard the date information of the check-ins and compute the deviation hours of each subsequent check-in of a user from the first check-in time of the user at a POI. Figure 3 plots the returning probabilities at dif-ferent hour deviations on the Foursquare dataset. From this proba-bility distribution, it is clear that users tend to visit the same POIs at close time of day, and their behaviors in close time are similar. In addition, the curve fits exponential function well.
 Note that, similar observations are made on the Gowalla dataset. We choose not to plot the figures due to the page limitation. In this section, we detail the Geographical-Temporal influences Aware Graph (GTAG) to exploit the observations of geographical influence and temporal influence in time-aware POI recommenda-tion. The notations used in this paper are listed in Table 2.
We build the GTAG based on the following intuitions: 1. Intuition 1 : Users X  interests vary with time, and a user may 2. Intuition 2 : The check-in interests of a user in the time Figure 3: Returning probability on Foursquare dataset (hour deviation) Symbol Description
G , E , V , P i , j GTAG / TAG graph, edge set of G , node set of G , e , j , w i , j edge from node i to node j , weight of e i ,
U , L , T , S user set, POI set, time slot set, session set u , , t , s u , t user u  X  U , POI  X  L , time t  X  T , session of u , t
L u visited POI set of u
S u session node set of u .

A n adjacent node set of n . | t , t j | time di ff erence between t i and t j dis ( i , j ) geographical distance between i and j wi ( d ) the willingness a user visits a d -km far away POI r i preference value of node i  X  the parameter controlling the preference of session  X  the parameter controlling the preference of POI
H the parameter controlling the time influence k the maximum number of POI nodes that a POI  X  ,  X  the parameters of power law function 3. Intuition 3 : If two users have similar temporal interests in 4. Intuition 4 : Users tend to visit their nearby POIs [30,32].
To represent users X  interests at di ff erent time ( Intuition 1 ), we divide time into 24 hourly slots, and use hour as the time unit. Note that we can adopt di ff erent time slots, and our proposed approaches are equally applicable. For example, we can use 48 hourly time slots to di ff erentiate users X  activities in weekdays and weekends, where the two sets of 24 hourly slots correspond to the hours in weekdays and the hours in weekends, respectively. The set of time slots is denoted by T . For ease of presentation, time and time slot are used interchangeably in this paper.
 In GTAG, users and POIs are represented by user nodes u  X  and POI nodes  X  L , respectively. To represent users X  check-in in-terests at di ff erent time ( Intuition 1 ), we use a session node s to relate the POIs visited by user u i in time t j  X  T . Here U , L and S are the user node set, POI node set, and session node set, re-spectively. These three types of nodes are connected by weighted directed edges, namely, E U , S , E S , U , E S , L , E L denotes the set of edges from nodes in set X to nodes in set Y . Edges in the five sets compose two types of links, namely, check-in link and POI link, which embed the temporal and geographi-cal influences, respectively. A check-in link represents a check-in record, and it consists of edges between user node and session node, and between session node and POI node. The edges e u i , s
Figure 4: GTAG constructed using the 7 sample check-ins e which corresponds to user u i  X  X  check-in on POI k in time t the check-in interests of a user in the time closer to the target time are more relevant ( Intuition 2 ), the edges connecting to the session nodes that are close to the target time will be assigned with larger weights (to be explained in Section 4.2). The edges from POI nodes to session nodes bridge sessions of users that share similar POI in-terests, which enables us to exploit other users X  temporal interests for recommendation ( Intuition 3 ).
 To incorporate the intuition that users tend to visit their nearby POIs ( Intuition 4 ), we use a POI link e k , m  X  E L , L if m is close to k in distance. Theoretically, there are | edges that link every pair of POIs. Incorporating all of them into GTAG will greatly deteriorate the recommendation e ffi ciency. In addition, if two POIs are far from each other, users are less likely to travel from one to the other, and thus the correlation between them is small. We therefore set a threshold k to limit the number of edges starting from one POI to other POIs, i.e., for each POI, only the k nearest POIs are connected with it.

Figure 4 gives a sample set of 7 check-in records made by two users ( u 1 and u 2 ) on four POIs ( 1 to 4 ) during two time slots ( t and t 2 ). The GTAG constructed using this sample set of check-in records is illustrated on the right hand side of the figure. Since u visited POI 4 in time t 2 ( i.e., the last one in the 7 sample check-in records), there are directed edges between u 2 and s 2 , 2 s 2 and 4 in the graph. 3 is connected to 4 , since 4 is assumed to be close to 3 in distance. Note that k is set to 1 in this example.
Generally, GTAG makes recommendations as follows: given a target user u i and target time t q , we first set the weights of links from user nodes to session nodes adaptively based on the target time. We inject preference to the user node u i , and then propagate the preference to candidate POI nodes via various paths. During the propagation, both the geographical and temporal influences are exploited. In the end, the POIs that receive larger preference will be recommended. Before detailing the preference propagation, we first introduce how to set the weights for edges in GTAG. The initial weights of all edges in E S , U E S , L E L , We have also considered setting the weights of edges in E E
S based on the number of visits. However, poorer recommenda-tion results were obtained in our experiments compared with using 1 as the weights. This is consistent with the result reported for graph-based recommendation in [23].
 Next, we detail how to set the initial weights for edges in E and E L , L , and how to normalize the weights for GTAG. Weights of Edges in E U , S . Recall that our time-aware POI recom-mendation task is to recommend POIs for a target user u to visit at a target time t q . Naturally, the session node whose time is close to the target time t q is more important to the recommendation task ( Intuition 2 ). Following previous work [8], we use an exponential function to model the importance of the session node for time slot t to the target time t q : rameter controlling the extent of temporal influence. A smaller H leads to smaller weight for the sessions far from t q . Note that, if the time slot of session node t matches t q , then f ( t , t q
We use the importance values of session nodes computed above to initialize the weights of edges from user nodes to session nodes. Specifically, given a target time t q for recommendation, the weight of the edge from user u i to session node s i , j is computed by where t j is the time slot of session node s i , j .

We argue that the above weighting scheme o ff ers at least two advantages. First, the weight between a user node and a session node is adaptively set based on the target time for recommendation. That is, the GTAG adjusts the importance of session nodes based on the target time for recommendation, so that the temporal influence is considered. Second, the above weighting scheme alleviates the data sparsity problem: when we recommend POIs for target time t check-in records in all time sessions are considered with di weights. If we only consider the check-ins during the target time slot, the data will become much more sparse, and it is well known that sparsity is a major challenge in recommendation.
 Weights of Edges in E L , L . The observation on graphical influence states that users tend to visit nearby places ( Intuition 4 ). The will-ingness of visiting a place decays with the increase of distance from the current location. Here, we adopt a power-law function of dis-tance to model the willingness of a user moving from one place to another as in [32]. More specifically, the willingness of a user to visit a d -km far away POI is defined by Equation 3: where  X  and  X  are parameters of the power law function, which can be learned by maximum likelihood estimation.

We employ the willingness as the weight of edge in E L , L where dist( i , j ) is the geographical distance between POIs Edge Weight Normalization. After setting the initial weights for edges in GTAG, we normalize the edges X  weights as follows:
In these equations, A i is the set of adjacent nodes of node i , |
A i S | is the number of adjacent session nodes of node i , and |
A i L | is the number of adjacent POI nodes of node i . rameter to balance the propagation preference of a location node to its adjacent location nodes and session nodes. A larger  X  that geographical distance plays a more important role in prefer-ence propagation.  X  is another parameter that balances the impor-tance of POI nodes and user nodes to the preference propagation of a session node.
Our proposed GTAG is significantly di ff erent from the Session-based Temporal Graph (STG) [26] in at least 4 aspects:
The basic idea of the preference propagation is to first inject ini-tial preference on the target user node u , and then propagate the preference to candidates POI nodes through various paths over the graph [26]. Defined in [26], the preference propagated by each path p is the production of the initial preference r u assigned to target user node u and the weights of all edges on the path: where w i , j is the weight of the edge e i , j contained in path p .For each candidate POI , its preference value is the sum of all prefer-ence propagated to it through all paths from target user node u : where P u , is the set of paths from u to . The top-ranked POIs sorted by preference value are then recommended.

Two key elements need to be considered for e ff ective and e preference propagation: (i) the selection of the paths among all possible paths from the target user node to POI nodes, and (ii) the algorithm for e ffi cient preference propagation along the selected paths.

In this section, we first present the constraints in selecting paths for preference propagation, and then present an e ffi cient algorithm named Breadth-first Preference Propagation (BPP) for preference propagation. Finally, we analyze the time complexity of BPP in Section 5.3.
There exist many possible paths between a user node and a POI node. Enumerating all possible paths is computationally expensive, and may introduce noise that will deteriorate the recommendation accuracy [3, 26]. How to select a subset of paths from all possible ones for preference propagation is a key challenge to e ffi accurate recommendation. In our design, we select paths based on the following three criteria: 1. The path must be a simple path, i.e., there is no repeated 2. The path can contain only one visited POI node and session 3. The path terminates when an unvisited POI node is met. With-
The above three criteria determine that a valid path must be of length 3, 4 or 6, as shown in Figures 5(a), 5(b) and 5(c), respec-tively. Specifically, a preference propagation always starts from a target user node ( e.g., u 1 ), and then visits one of the user X  X  session nodes ( e.g., s 1 , 2 ), followed by a visited POI node ( e.g., that, the preference can be directly propagated to an unvisited POI ( e.g., 3 ), forming a 3-step path (illustrated in Figure 5(a)). On the other hand, after reaching a visited POI node ( e.g., 2 ), the next node to visit in a path could be a session node of another user ( e.g., s , illustrated in Figures 5(b) and 5(c)). At this point, there are two types of propagations: one is to reach an unvisited POI node ( e.g., 3 ) and stops, which forms a 4-step path as illustrated in Fig-ure 5(b); the other one is to visit the user node of that session node ( e.g., u 2 ), then to distribute the preference to the user X  X  other ses-sion node ( e.g., s 2 , 2 ), and to reach an unvisited POI node ( e.g., This propagation follows a 6-step path (see Figure 5(c)).
In fact, the 3-step path exploits the geographical influence: the target user u is likely to check-in POIs that are close to her visited POIs ( Intuition 4 ). The 4-step path considers the temporal interests of other users: if the set of visited POIs of user u in time t in the POIs visited by v in t 2 ( Intuition 3 ). Finally, the 6-step path explores the correlations between time slots: if v shares similar temporal interests with u , then v  X  X  temporal interests that are close to t q are also important for recommendation ( Intuition 2 and 3 ).
With all valid paths selected based on the three criteria, a straight-forward propagation method is to adopt the depth-first search (DFS) strategy. Specifically, based on DFS we propagate the preference from the target user node through all possible paths that satisfy the three criteria in Section 5.1. The propagation of a path stops when an unvisited POI node is reached. We name this algorithm Depth-first Preference Propagation (DPP). However, the DPP algorithm has high time complexity (See the analysis in Section 5.3) because the same edge may be visited multiple times along di ff erent paths. For example, in Figure 5(c), the edge e 1 , 4 will be visited twice by following the paths u 1  X  s 1 , 1  X  1  X  4 and u 1  X  s 1 ,
Comparing with DFS strategy, the breath-first search (BFS) strat-egy is much more e ffi cient for preference propagation. In BFS, a node n first collects preference from all of its precedent nodes, and then propagates the preference to its subsequent nodes of all paths involving n in a batch manner. For example, following BFS, received preference to 4 via edge e 1 , 4 . As a result, the edge e is visited only once, whereas is visited twice in DFS.

However, BFS cannot be directly applied for preference prop-agation, because it is designed for graph traversal and each node can be visited only once. In contrast, when propagating preference, some nodes need to be visited multiple times. For example, con-sider the two 6-step paths in Figure 5(c):
If we follow BFS exactly, p 2 is not valid as s 2 , 2 has already been visited in p 1 at the third step. As a result, it cannot be visited at the fifth step in p 2 .

To solve this problem, we relax the constraint on the times of vis-iting a node, and allow a node being visited multiple times. In fact, the multi-times-visiting problem only happens to the session nodes of users who share at least one POI with the target user ( e.g., s because these nodes will be visited at di ff erent steps in di paths.

However, after allowing a node being visited multiple times, a new problem arises: the preference a node n receives from a prece-dent node n will be propagated back to n , which violates the simple path constraint. For example, u 2 in Figure 5(c) receives preference from s 2 , 2 and s 2 , 1 , and propagates the preference to s spectively. However, if we employ BFS, a part of the preference from one node ( e.g., s 2 , 1 ) will be propagated back to itself, because at u 2 we cannot di ff erentiate the preference from s 2 , from s 2 , 2 . We could solve this problem by keeping a table at each node to record the amount of preference the node receives from each of its precedent nodes, but it will increase space cost signif-icantly and incur extra computation. In this paper, we propose a more e ffi cient solution.

Consider a node n that propagates its preference r n  X  w n adjacent node n  X  A n . After collecting the preference from its adjacent nodes, n propagates its preference r n = n  X  A to its adjacent nodes A n , one of which is n . Then, the amount of preference originally propagated from n to n needs to be excluded from the preference to be propagated from n to n , i.e., the amount of preference that n receives from n should be: where the second part is the portion of preference of n that will be propagated back to itself through n .

This inspires the following method to address the problem. We pre-subtract the amount of preference from n that will be propa-gated back to it through its neighbors to be visited ( e.g., r w , n ) after propagating the preference from it ( n ) to its neighbors. Then, the relaxed BFS can be applied for preference propagation. V V V V in black color indicate the propagation steps in each path. Algorithm 1: Breadth-first Preference Propagation (BPP) Input : user u , time t , GTAG graph G t , recommendation size k
Output : Top-k POIs as recommendation results 1 Q  X  queue of nodes to be visited; 2 N  X  visited node set; 3 push u into Q ; 4 while Q is not empty do 5 n  X  pop head node of Q ; 6if n  X  N then 7 continue ; 8if n is not a session node of those users who share at least 9 add n into N ; 10 r n  X  0; 11 foreach n  X  A n do 12 if n L u and n N and n Q then 13 Q . push ( n ); 14 r n  X  r n + r n  X  w n , n ; 15 if n  X  Q and n  X  A n then 17 r n  X  r n ; 18 return top-k POIs in L  X  L u based on recommendation scores; For example, after performing pre-subtraction for s 2 , 1 we can propagate the preference of u 2 to its neighbouring node s since the invalid preference that will be propagated back to it ( i.e., r
We name the proposed propagation approach Breadth-first Pref-erence Propagation (BPP), for it is designed based on BFS strategy. The algorithm is shown in Algorithm 2. Line 8 relaxes the con-straint on the times of visiting a node. If a node n is not in the set of candidate POI nodes ( L u ), and needs to be visited in subsequent steps (not in N ), we put it into the queue Q (lines 12-13), which contains the nodes to be visited. Line 14 propagates the preference from n to each of its neighbor nodes n , and lines 15-16 perform the pre-subtraction operation, i.e., if n  X  X  neighbor n will be visited, and n  X  preference will be propagated back to n ( n  X  A n ), we subtract this part of preference from n  X  X  preference. Time Complexity of DPP . We first look at the 6-step path for DPP. In the first step, one of target user u  X  X  session nodes is selected, which has | T | choices. Then, for each session node, we select one POI node , which has | L ( s ) | choices. Here | L ( s ) | maximum number of POIs a session node connects to. In the third step, a session node of other users X  connection with is reached, of session nodes having links with a POI node. Then, the user node is visited with the cost 1, followed by other session nodes ( |
T | X  1). Finally, a POI node is visited from the session node, where there are | L ( s ) | choices. Based on the product rule, the complexity of | S ( l ) | = | U || T | , the complexity becomes O ( | T | the complexities of 3 and 4-step propagations are much lower. Time Complexity of BPP . For the BPP method, the propagation starts from the target user node u . In the first step, all u  X  X  session nodes are visited, so the complexity is | T | . The second steps prop-agates the preference from each u  X  X  session node s u , t is transformed from u  X  X  visited POI nodes to other users X  session nodes they connect with. The cost of the third step is | L ( u ) where L ( u ) is the maximum number of POIs a user has visited. We define S ( ) as the set of the session nodes having link with POI , and | N u | as the number of users who co-visited at least one POI with u . Then the cost of the fourth step (propagating from other users X  session nodes to their corresponding user nodes) and the fifth step (propagating from the other user nodes to their session nodes) 6-step propagation is the sum of complexity of each step, which is O ( | worst case ( | L ( s ) | = | L | , | S ( ) | = | N u | = | complexity is O ( | T || U || L | ), which is much lower than that of DPP. Time Complexity of MS-IPF . The worst case time complexity of MS-IPF method proposed in [26] is O ( | T || U || L | 2 )), which is higher than that of BPP.
We systematically evaluate the proposed method and compare our method with the state-of-the-art methods on 2 real-world datasets. We first detail the experimental setting, then compare the perfor-mance of these methods, and finally study the e ff ect of the length of time slot. Dataset . We conducted our experiments on the two datasets, namely Foursquare and Gowalla (see Table 1), introduced in Section 3.1, which are the set of datasets used in the work [32]. Table 3: The 11 methods evaluated in our experiments. The mark under T or G indicates the method utilizes temporal and geographical influences.
 Method Description T G
UTE-SE UTE with geographical influence [32]
TAG-RWR Random Walk with Restart on TAG
TAG-BPP BPP on TAG.
GTAG-BPP BPP on GTAG (Section 4)
By following the setting in previous work [32], we randomly mark o ff 10% of each user X  X  visited POIs as development set to tune parameters, and mark o ff another 20% POIs as test set to evaluate the e ff ectiveness of the recommendation methods. The remaining 70% POIs form the training set . The densities of the training sets of the Foursquare and Gowalla datasets are 6 . 35  X  10  X  3 and 9 10 slots, the data becomes much sparser: 2 . 65  X  10  X  4 and 4 respectively.
 Evaluation Metrics . To evaluate the accuracy of all methods ( i.e., how well a method recovers the hold-o ff POIs in the test set for a given user at a given time), we use two metrics, namely, Precision@ N and Recall@ N (denoted by Pre@ N and Rec@ N , respectively), where N is the number of top-ranked recommendations. The Pre@ N (Rec@ N ) is estimated by averaging the precision(recall) values of all time slots, as it is in [32]. For each metric, we consider three values of N ( i.e., 5, 10, 20), where 5 is the default value.
Because both the Foursquare and Gowalla datasets have very low density, it is common that recommendation methods deliver rel-atively low precision and recall values [13, 30]. In addition, the POIs in the test set of each user may represent only a small portion of POIs that the user may be interested in. Thus, although the low precision and recall values are reasonable, in this paper, we focus on the relative improvements we achieved over baseline methods, instead of the absolute values.
 Recommendation Methods . We evaluated 11 methods as listed in Table 3. The temporal and / or geographical influences.

U is the basic CF method without utilizing temporal or geograph-ical influence. We use it to evaluate the improvement brought by considering the temporal / geographical influence. UG is the method proposed in [30], which linearly combines the results of user-based CF and bayesian geographical model to make recommendation. This method does not utilize temporal influence. UTF (user-based CF with time function) is the user-based version of the algorithm proposed in [8]. It estimates the similarity between users as the conventional user-based CF does, but weights the check-ins accord-ing to the gaps between their time slots and the target time slot by an exponential time function, which is also used in our method. We also tried the original item-based method in [8], but very poor results were obtained; hence we choose not to report the results. UTE is the time-aware user-based CF proposed in [32]. UTE-SE is the enhanced version version of UTE incorporating geographi-cal influence. MS-IPF [26] and LRT [10] are the recommendation methods using STG graph and MF, detailed in Section 2.

Methods TAG-RWR , TAG-BPP , and GTAG-BPP are all based on techniques proposed in this paper. Specifically, TAG (temporal-aware graph) is a simplified version of GTAG by removing the POI links ( i.e., E L , L ). TAG is employed to fairly compare our prefer-ence propagation methods with other methods that do not consider geographical influence. The preference is propagated with Ran-dom Walk with Restart (RWR) and BPP algorithms respectively for TAG-RWR and TAG-BPP. To study the performance of our model without temporal influence, we also use a simplified version named G-BPP , in which each user only has 1 (24-hour) session node.
Parameters in all methods are tuned to their optimal values using the development set. For RWR, we set the stop criteria to 0.0001 L-1 distance between vectors of two successive iterations, and the restart probability is 0.15.
Before comparing with the baseline methods, we tune the pa-rameters of the proposed methods using the development set and examine their impacts. There are four parameters, namely,  X  and k in the proposed GTAG-BPP method. Because TAG is a simplified version of GTAG, we first tune  X  and H for TAG-BPP on the development set. Then we apply the obtained  X  and H to GTAG-BPP, and adjust  X  and k . The default values of H and k are empirically set to 3 and 500, respectively, when tuning  X  . Figures 6 and 7 show the Pre@5 of TAG-BPP and GTAG-BPP with varying parameter settings, respectively. Due to the space lim-itation, we only plot Pre@5. Similar observations hold for Rec@5. Figure 6 shows that the optimal value of  X  for Foursquare and Gowalla datasets are 0.2 and 0.08, respectively. Recall that ances the importance of user nodes and POI nodes when propagat-ing preference from session nodes; a smaller  X  means more pref-erence will be propagated to user nodes, which will be further dis-tributed to session nodes that are close to the target time. Gowalla dataset is much sparser than Foursquare, and utilizing other ses-sion interests can help mitigate the sparsity problem. This might explain why the optimal  X  for Gowalla data is smaller than that for Foursquare data. Figure 8: Performance of methods utilizing temporal influence
Parameter H controls the importance of session nodes with re-spect to the target time. If H is small, the session nodes that are far from the target time will contribute less. The optimal H for both datasets is 3, and accuracy decreases as increasing H , showing that the session interests close to target time are more important. In ad-dition, when H is smaller than 3, poorer accuracy is observed on both datasets, because small H leads to less importance of other session nodes and worsens the sparsity problem.

In GTAG-BPP, parameter  X  controls the amount of preference in POI node that will be propagated to its nearby POI nodes. As shown in Figure 7, GTAG-BPP achieves the best accuracy when  X  = 0 . 3 and 0.01 on Foursquare and Gowalla datasets, respectively. To find out the reason for the di ff erence, we compute the average of willingness of visiting from one POI node to its nearby POIs ( i.e., the sum weight of POI edges from a POI node). The value is 95.98 and 238.37 respectively on Foursquare and Gowalla datasets. A possible reason is that, in California, users X  activities are less sensitive to geographical distance because most people drive cars. Consequently, users are more likely to visit distant POIs. Thus, a smaller  X  can weaken the geographical influence. The best k on the two datasets are 290 and 270, which are similar.
We conduct two sets of experiments. The first set of exper-iments evaluates the accuracy of the methods utilizing temporal influence (U, G-BPP, UTF, UTE, MS-IPF, LRT, TAG-RWR, and TAG-BPP). The second set of experiments evaluate the e ff ness of the methods utilizing geographical influence (UG, UTE-SE and GTAG-BPP).
 Methods Utilizing Temporal Influence . The precision and recall of the 8 methods (U, G-BPP, UTF, UTE, MS-IPF, LRT, TAG-RWR, and TAG-BPP) are reported in Figure 8, from which we observe that: Figure 9: Performance of methods with geographical influence Methods Utilizing Geographical Influence . The precision and recall of the 3 methods utilizing geographical influence (UG, UTE-SE, and GTAG-BPP) are plotted in Figure 9.

Observe that UG, which exploits geographical but not tempo-ral influence, delivers the worst results. UTE-SE, the state-of-the-art method exploiting both temporal and geographical influences, achieves much better accuracy than UG. GTAG-BPP achieved the best accuracy among the three methods, which outperforms UTE-SE by 20% and 35% in terms of Pre@5 on both datasets, respec-tively. Compared against TAG-BPP (reported in Figure 8), GTAG-BPP further improves the accuracy by 4% to 10%. The improve-ment results from the incorporation of geographical influence.
Note that all improvements reported in this sections are signifi-cant according to t-test with p-value &lt; 0.01.
In this section, we study the e ff ect of the length of time slot to recommendation accuracy. When the time slots become longer, the recommendation results will be less time-specific. As in [32], we only consider the methods utilizing temporal influence to focus on the e ff ect of time slot length. We report the Pre@5 and Rec@5 only on the Foursquare data, since the results on the Gowalla data are similar. From Figure 10, we have the following observations.
First, when increasing the length of time slots, all methods achieve better precision, but poorer recall. This is because increasing the length will bring in more groundtruth POIs for each user at each time slot, which makes it easier to capture groudtruth POIs among the top N recommendations, resulting in better precision. However, the number of correctly recommended POIs is constrained by the number of recommendations, which leads to poorer recall values. Second, for all lengths of time slots, the proposed method TAG-BPP consistently outperforms baselines including the state-of-the-art time-aware recommendation methods MS-IPF and UTE. The availability of historical check-in data in LBSNs enables POI recommendation service. In this paper, we focus on the prob-lem of time-aware POI recommendation, which considers the tem-poral influence in user activities. We propose the GTAG to model the check-in behaviors of users and a graph-based preference prop-agation algorithm for POI recommendation on the GTAG. The pro-posed solutions exploit both the geographical and temporal influ-ences in an integrated manner. We conduct extensive experiments over two real-world LBSN datasets. The experimental results show that the proposed methods beat all baselines significantly.
For the future work, it would be interesting to apply the pro-posed framework to time-aware recommendation in other tasks, e.g., product recommendation on e-commercial websites.
This work is supported in part by a grant awarded by a Sin-gapore MOE AcRF Tier 2 Grant (ARC30 / 12), a Singapore MOE AcRF Tier 1 Grant (RG66 / 12), and a grant awarded by Microsoft Research Asia. Quan Yuan would like to acknowledge the Ph.D. grant from the Institute for Media Innovation, Nanyang Technolog-ical University, Singapore.
