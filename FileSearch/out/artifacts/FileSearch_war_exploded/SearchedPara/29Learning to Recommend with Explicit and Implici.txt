 As there has been exponential growth of information generated on the World Wide Web, information filtering techniques like recommender systems have become more and more important and popular. Recommender systems form a specific type of information filtering technique that attempts to suggest information items (movies, books, music, news, Web pages, images, etc.) that are likely to interest users. Typically, recommender systems are based on collaborative filtering , which is a technique that automatically predicts the interest of an active user by collecting rating information from other similar users or items.

Although recommender systems have been widely studied in academia and deployed in industry, such as Amazon and eBay, most of these techniques suffer several inherent weaknesses. The first well-known challenge is the data sparsity problem. As reported in Sarwar et al. [2001], the density of the available ratings in commercial recommender systems is often less than 1%. Many collaborative filtering algorithms are impeded by the sparsity problem, hence cannot handle users who have rated few items. Secondly, traditional recommender systems ignore the social connections or trust relations among users. But the fact is, in the real world, we always turn to friends we trust for book, music, or restaurant recommendations, and our favors can easily be affected by the friends we trust. Therefore, traditional recommender systems, which purely mine the user-item rating matrix for recommendations, do not provide realistic output. Recently, trust-aware recommender systems have drawn lots of attention [Massa and Avesani 2004; 2007], but most of these methods are based on some ad hoc heuristics, and they still have the data sparsity and scalability problems. Moreover, the relationship between the user-item matrix and the users X  trust network are not fully understood.
In this article, aiming at solving the preceding problems and modeling recommender systems more accurately and realistically, we make three assumptions based on our observations on real-world recommendation processes.  X  X sers have their own characteristics, and they have different tastes on different items, such as movies, books, music, articles, food, etc.  X  X sers can be easily influenced by the friends they trust, and prefer their friends X  recommendations.  X  X ne user X  X  final decision is the balance between his/her own taste and his/her trusted friends X  favors.
 Based on the preceding intuitions, we endow a novel understanding to all the ratings in the user-item matrix R . We interpret the rating R ij in the user-item matrix as the representation mixed by both the user u i  X  X  taste and his/her trusted friends tastes on the item v j . This assumption naturally employs both the user-item matrix and the users X  social trust network for the recommendations.

In terms of the users X  own tastes, we factorize the user-item matrix and learn two low-dimensional matrices, which are the user-specific latent matrix and item-specific latent matrix. For the social trust graph, based on the intuition that users always prefer items recommended by friends they trust, we infer and formulate the recom-mendation problem purely based on their trusted friends X  favors. Then, by employing a probabilistic framework, we fuse the users and their trusted friends X  tastes together by an ensemble parameter. Finally, by performing a simple gradient descent on the objective function, we learn the latent low-dimensional user-specific and item-specific matrices for the prediction of users X  favors on different items.

The proposed framework in this article is quite general, and it can also be applied to pure user-item rating matrix even if we do not have explicit social connection in-formation among users. By taking advantage of some well-known similarity functions, like Vector Space Similarity (VSS) and Pearson Correlation Coefficient (PCC), we can calculate the top-k similar users for every single user in the user-item rating matrix. These users can be treated as implicit social connections between users, and the re-lationships can be plugged in our framework to improve the prediction accuracy of traditional recommender systems.

The experimental results on Epinions and MovieLens datasets show that our method outperforms state-of-the-art collaborative filtering and social trust-based recommenda-tion algorithms, especially when users have very few ratings. Moreover, the complexity analysis indicates that our approach can be applied to very large datasets, since it scales linearly with the number of observations.

The remainder of this article is organized as follows. In Section 2, we provide an overview of several major approaches for recommender systems and other related work. Section 3 presents our work on recommender systems with the social trust ensemble. In Section 4, we illustrate how to extend our work to traditional recommender systems which do not have social network information. The results of an empirical analysis are presented in Section 5, followed by the conclusions and future work in Section 6. Recommendation techniques have been widely studied in research communities of information retrieval [Canny 2002; Hofmann 2003; 2004; Jin et al. 2004; Liu and Yang 2008; Yu et al. 2009; Zhang and Koren 2007], machine learning [Rennie and Srebro 2005; Salakhutdinov and Mnih 2008a; 2008b; Si and Jin 2003; Zhu et al. 2009], and data mining [Bell et al. 2007; Koren 2008; 2009]. In this section, we review several major approaches for recommender systems, including: (1) traditional recommender systems which are mainly based on collaborative filtering techniques, and (2) trust-aware recommender systems which have drawn lots of attention recently. In this section, we review several major approaches for recommender systems, espe-cially for collaborative filtering. Two types of collaborative filtering approaches are widely studied: memory based and model based.

Among all of these methods, memory-based approaches are the most popular methods and they are widely adopted in commercial collaborative filtering systems [Linden et al. 2003; Resnick et al. 1994]. These methods employ different strategies to find similar users and items for making the predictions, which are known as user-based approaches [Breese et al. 1998; Herlocker et al. 1999; Jin et al. 2004; Ma et al. 2007] and item-based approaches [Deshpande and Karypis 2004; Linden et al. 2003; Sarwar et al. 2001], respectively. To predict a rating R ij of a given item v j for an active user u , user-based methods search for other users similar to the user u i and utilize their ratings to the item v j for prediction, while item-based methods leverage the ratings of other items similar to the item v j from the user u i instead. In order to take advantage of these two types of methods, Wang et al. [2006] and Ma et al. [2007] proposed two fusion models to combine the user-based method with the item-based method.

In addition to memory-based methods, model-based approaches, which employ sta-tistical and machine learning techniques to learn models from the data, also play an important role in collaborative filtering research. Examples of model-based approaches include the clustering model [Kohrs and Merialdo 1999], aspect models [Hofmann 2003; 2004; Si and Jin 2003], the latent factor model [Canny 2002], the Bayesian hierarchical model [Zhang and Koren 2007], and the ranking model [Liu and Yang 2008]. Kohrs and Merialdo [1999] presented an algorithm for collaborative filtering based on hierarchical clustering, which tried to balance both robustness and accuracy of predictions, espe-cially when few data were available. Hofmann [2003] proposed an algorithm based on a generalization of probabilistic latent semantic analysis to continuous-valued response variables.

Recently, several matrix factorization methods [Rennie and Srebro 2005; Salakhut-dinov and Mnih 2008a; 2008b; Srebro and Jaakkola 2003] have been proposed for collaborative filtering. These methods focus on factorizing the user-item rating matrix using low-rank representations, and then utilize them to make further predictions. The motivation behind a low-dimensional factorization model is that there is only a small number of factors that are important, and a user X  X  preference vector is determined by how each factor applies to that user.

Low-rank matrix approximations based on minimizing the sum-squared errors can be easily solved using Singular Value Decomposition (SVD), and a simple and efficient Expectation Maximization (EM) algorithm for solving weighted low-rank approxima-tion is proposed in Srebro and Jaakkola [2003]. In Srebro et al. [2004], the authors proposed a matrix factorization method to constrain the norms of U and V instead of their dimensionality. Salakhutdinov et al. presented a probabilistic linear model with Gaussian observation noise in Salakhutdinov and Mnih [2008b]. In Salakhutdi-nov and Mnih [2008a], the Gaussian-Wishart priors are placed on the user and item hyperparameters. Although low-dimensional methods are proved very effective and efficient, these methods still suffer several disadvantages that are unveiled. In the SVD method, as well as other well-known methods such as the weighted low-rank approximation method [Srebro and Jaakkola 2003], Probabilistic Principal Compo-nent Analysis (PPCA) [Tipping and Bishop 1999], Probabilistic Matrix Factorization (PMF) [Salakhutdinov and Mnih 2008b], and Constrained Probabilistic Matrix Fac-torization [Salakhutdinov and Mnih 2008b], the latent features are uninterpretable, and there is no range constraint bound on the latent features X  vectors. The lack of interpretability results in the improper modeling of the latent factors, hence down-grades the recommendation accuracy. In Zhang et al. [2006], a nonnegative constraint is imposed on both user-specific features U and item-specific features V (nonnegative matrix factorization), but this work is also unable to interpret the physical meanings of the latent factors. Furthermore, low-rank approximation methods also suffer the data sparsity problem. Hence, in this article, we propose a novel matrix factorization method to solve the analyzed problems and remedy the aforementioned deficiencies. Recall that all the previous methods for recommender systems are based on the assumption that users are independent and identically distributed, and ignore the social trust relationships between users, which is not consistent with the reality that we normally ask trusted friends for recommendations. Based on this intuition, many researchers have recently started to analyze trust-based recommender systems [Andersen et al. 2008; Bedi et al. 2007; Ma et al. 2008; Massa and Avesani 2004; 2007].
Andersen et al. [2008] developed a set of five natural axioms that a trust-based recommendation system might be expected to satisfy, and then proved that no system can simultaneously satisfy all the axioms. Apparently, this work is out of the scope of this article since we focus on how to employ both the social trust network and user-item matrix to provide more accurate and realistic recommendations. In Massa and Avesani [2004; 2007], the authors studied trust-aware recommender systems. Their work replaces the similarity finding process with the use of a trust metric which is able to propagate trust over the trust network and to estimate a trust weight. The experiments on a large real dataset show that this work increases the coverage (number of ratings that are predictable) while not reducing accuracy (the error of predictions). Bedi et al. [2007] proposed a trust-based recommender system for the semantic Web; this system runs on a server with the knowledge distributed over the network in the form of ontologies, and uses the web of trust to generate recommendations. Trust-based methods have become a popular research topic recently, however, there are several problems with previous methods. Firstly, these approaches only employ some heuristics to generate recommendations while the relationship between the trust network and the user-item matrix has not been studied systematically. Moreover, these methods are not scalable to very large datasets, since they may need to calculate the pairwise user similarities and pairwise user trust scores.

In recent work proposed in Ma et al. [2008], the authors developed a factor analysis method based on the probabilistic graphical model which fuses the user-item matrix with the users X  social trust networks by sharing a common latent low-dimensional user feature matrix. The experimental analysis shows that this method generates better recommendations than nonsocial collaborative filtering algorithms. However, the dis-advantage of this work is that although the users X  social trust network is integrated into the recommender systems by factorizing the social trust graph, real, world rec-ommendation processes are not reflected in the model. This drawback not only causes lack of interpretability in the model, but also affects the recommendation qualities. A more novel and realistic approach is needed to model the trust-aware recommendation problem. Traditional recommender system techniques, like collaborative filtering, only utilize the information of the user-item rating matrix for recommendations while ignoring the social trust relations among users. As online social networks have grown exponentially, incorporating social trust information into recommender systems is becoming more and more important. In this section, we first describe the trust-aware recommendation problem in Section 3.1, and then provide the solution in Sections 3.2, 3.3, and 3.4. In the real world, the process of the recommendation scenario includes two central elements: the trust network and the favors of these friends, which can essentially be modeled by the examples of the trust graph in Figure 1(a) and the user-item rating matrix in Figure 1(b), respectively. In the trust graph illustrated in Figure 1(a), totally, 5 users (nodes, from u 1 to u 5 ) are connected with 9 relations (edges) between users, and each relation is associated with a weight S ij in the range (0 , 1] to specify how much user u i knows or trusts user u j . Normally, the trust relations in the online trust network are explicitly stated by online users. As illustrated in Figure 1(b), each user also rated some items (from v 1 to v 6 ) on a 5-point integer scale to express the extent of the favor of each item (normally, 1, 2, 3, 4 and 5 represent  X  X ate X ,  X  X on X  X  like X ,  X  X eutral X ,  X  X ike X  and  X  X ove X , respectively). The problem we study in this article is how to predict the missing values for the users effectively and efficiently by employing the trust graph and the user-item rating matrix. In order to learn the characteristics or features of the users, we employ matrix fac-torization to factorize the user-item matrix. The idea of user-item matrix factorization is to derive a high-quality l -dimensional feature representation U of users and V of items based on analyzing the user-item matrix R . Suppose in a user-item rating ma-trix, we have m users, n items, and rating values within the range [0 , 1]. Actually, most recommender systems use integer rating values from 1 to R max to represent the users X  judgements on items. In this article, without loss of generality, we map the ratings 1 , ..., R rating of user u i for item v j ,and U  X  R l  X  m and V  X  R l  X  n be latent user and item feature matrices, with column vectors U i and V j representing the l -dimensional user-specific and item-specific latent feature vectors of user u i and item v j , respectively. Note that the solutions of U and V are not unique. In Salakhutdinov and Mnih [2008b], the conditional distribution over the observed ratings is defined as: where N ( x |  X ,  X  2 ) is the probability density function of the Gaussian distribution with mean  X  and variance  X  2 ,and I R ij is the indicator function that is equal to 1 if user u i rated item range [0 , 1]. The zero-mean spherical Gaussian priors are also placed on user and item feature vectors. Hence, through a Bayesian inference, we have The graphical model of Eq. (3) is shown in Figure 2(a). This equation represents the method on how to derive the users X  latent feature space or users X  characteristics purely based on the user-item rating matrix without considering the favors of users X  trusted friends. In the next section, we will systematically illustrate how to recommend based on the tastes of trusted friends. In this section, we analyze how our social trust networks affect our decisions or behav-iors, and propose a method to recommend only by using the tastes of trusted friends. Suppose we have a directed social trust graph G = ( U , E ), where the vertex set U ={ u represents the trust relations between users. Let S ={ S ij } denote the m  X  m matrix of G , which is also called the social trust matrix in this article. For a pair of vertices, u i and u ,let S ij  X  (0 , 1] denote the weight associated with an edge from u i to u j ,and S ij = 0, otherwise. The physical meaning of the weight S ij can be interpreted as how much a user u i trusts or knows user u j in a social network. Note that social trust matrix S is an asymmetric matrix, since in a trust-based social network, user u i trusting u j does not necessary indicate user u j trusts u i .

As analyzed in Section 1, we always turn to our friends for recommendations since we trust our friends. We also believe that most probably we will like the items (books, music, movies, etc.) that our trusted friends recommend. Even if the recommended items are not the types we like, we still have a high probability to be influenced by our trusted friends. In the real world, suppose a user wants to see the movie The Dark Knight (suppose it is the item v 1 in Figure 1(b)), which is now playing at the theaters, but he/she knows nothing about the movie, like user u 1 in Figure 1(b). What this user, normally do is to take into account his/her trusted friends X  recommendations. Among all of his/her trusted friends in Figure 1(a), u 2 and u 4 rated this movie as 4 and 5, and u 1 trusts u 4 (weight 1.0) more than u 2 (weight 0.6). Based on the information, there is a very high probability that u 1 will draw the conclusion that TheDarkKnight is a very good movie worth watching.
 From the preceding analysis, we can generalize the preceding social process as where R ik is the prediction of the rating that user u i wouldgiveitem v j , R jk is the score that user u j gave item v k , T ( i )isthefriendssetthatuser u i trusts, and | T ( i ) | is the it is the normalization term of trust scores. Hence, Eq. (4) can be simplified as Then the prediction of the ratings that user u i gives to all the items can be inferred as We can then infer that for all the users to obtain where SR can be interpreted as the recommendations purely based on trusted friends X  tastes.

From the social trust network aspect, we define the conditional distribution over the observed ratings as where S ik is normalized by | T ( i ) | , which is the number of trusted friends of user u i in the set T ( i ). I R ij is the indicator function that is equal to 1 if user i rated item j and equal to 0 otherwise.

Hence, similar to Eq. (3), through a Bayesian inference, we have In Eq. (9), we can assume that S is independent with the low-dimensional matrices U and V , then this equation can be changed to where p ( U |  X  2 U )and p ( V |  X  2 V ) are zero-mean spherical Gaussian priors on user and item feature vectors. This equation specifies the method to recommend purely based on users X  trusted friends X  tastes. The graphical model is shown in Figure 2(b). In Section 3.2, given the user-item rating matrix, the observed rating R ij is interpreted by the user u i  X  X  favor on item v j , while in Section 3.3, given the user-item rating matrix and users X  social trust network, the observed rating R ij is realized as the favors on item v j of user u i  X  X  trusted friends. Actually, both of the preceding assumptions are partially right since in the real-world situation, every user has his/her own taste and at the same time, every user may be influenced by his/her friends he/she trusts. Hence, in order to define the model more realistically, every observed rating in the user-item matrix should reflect both of these two factors. Based on this motivation, we model the conditional distribution over the observed ratings as In Eq. (11), the users X  favors and the trusted friends X  favors are smoothed by the pa-rameter  X  , which naturally fuses an appropriate amount of real-world recommendation processes into the recommender systems. The parameter  X  controls how much users trust themselves or their trusted friends. The graphical model of our method is shown in Figure 3(c).

The log of the posterior distribution for the recommendations is given by where C is a constant that does not depend on the parameters. Maximizing the log-posterior over two latent features with hyperparameters (i.e., the observation noise variance and prior variances) kept fixed is equivalent to minimizing the following sum-of-squared-errors objective functions with quadratic regularization terms where  X  U =  X  2 / X  2 U ,  X  V =  X  2 / X  2 V ,and  X  2 F denotes the Frobenius norm.
A local minimum of the objective function given by Eq. (13) can be found by perform-ing gradient descent in U i , V j , is the set that includes all the users who trust user u i . In order to reduce the model complexity, in all of the experiments we conduct in Section 5, we set  X  U =  X  V . The main computation of gradient methods is evaluating the object function L and its gradients against variables. Because of the sparsity of matrices R and S , the compu-tational complexity of evaluating the object function L is O (  X  R l +  X  R kl ), where  X  R is the number of nonzero entries in the matrix R ,and k is the average number of friends that a user trusts. Since almost all of the online social networks fit the power-law dis-tribution, a large long tail of users only have few trusted friends. This indicates that the value of k is relatively small. The computational complexities for the gradients  X  L  X  U average number of friends who trust a user, which is also a small value. Actually, in a social trust graph, the value of k is always equal to the value of p ,whichis9 . 91 in the dataset we employ in Section 5. Therefore, the total computational complexity in one iteration is O (  X  R pl +  X  R p kl ), which indicates that theoretically, the computational time of our method is linear with respect to the number of observations in the user-item matrix R . This complexity analysis shows that our proposed approach is very efficient and can scale to very large datasets.
 In Section 3, we illustrate how to improve recommender systems when both the user-item rating matrix and users X  social graph are available. However, the users X  social graph is not always available in recommender systems. Actually, our proposed frame-work is quite general and by taking advantage of some similarity calculation functions, we can find some  X  X seudo X  trusted friends for every user. Since we have the rating information of all the users, the evaluation of similarities between two users can be calculated by measuring the issued ratings of these two users. There are two very popular methods we can borrow in the literature, which are Vector Space Similarity (VSS) and Pearson Correlation Coefficient (PCC) [Breese et al. 1998]. VSS is employed to define the similarity between two users i and f based on the items they rated in common. We have where j belongs to the subset of items which user i and user f both rated. R ij is the rate user i gave item j . From the previous definition, we can see that VSS similarity in Sim ( i , f ) is within the range [0 , 1], and a larger value means users i and f are more similar.

Actually, the similarity calculation in VSS does not consider that different users may have different rating styles. Some users may potentially give a higher ratings to all the products while some other users probably tend to issue lower ratings. Hence, PCC is proposed to solve this problem where R i represents the average rate of user i . From this definition, user similarity Sim ( i , f ) is ranging from [  X  1 , 1], and a larger value means users i and f are more similar. For consistency with VSS similarities, we employ a mapping function f ( x ) = ( x + 1) / 2 to bound the range of PCC similarities into [0 , 1]. With the definition of similarity function, for every user in the user-item rating matrix, we can calculate the top-k similar users as implicit trusted friends. Then, we can use Eq. (13) to learn the latent features U and V . The weight S ik in Eq. (13) can be defined as In this section, we conduct several experiments to compare the recommendation qual-ities of our Recommendation with Social Trust Ensemble (RSTE) approach with other state-of-the-art collaborative filtering and trust-aware recommendation methods. Our experiments are intended to address the following questions. (1) How does our approach compare with published state-of-the-art collaborative fil-(2) How does the model parameter  X  affect the accuracy of prediction? (3) What is the performance comparison on users with different observed ratings? (4) Can our algorithm achieve good performance even if users have few observed rating (5) Is our algorithm efficient when training the model? We use two metrics, the Mean Absolute Error (MAE) and the Root Mean Square Error (RMSE), to measure the prediction quality of our proposed approach in comparison with other collaborative filtering and trust-aware recommendation methods.
 The metrics MAE is defined as where r i , j denotes the rating user i gave to item j , r i , j denotes the rating user i gave to item j as predicted by a method, and N denotes the number of tested ratings. The metrics RMSE is defined as 5.2.1. Dataset Description. We choose Epinions as the data source for our experiments on recommendation with explicit social trust information. Epinions.com is a well-known knowledge sharing site and review site which was established in 1999. In order to add reviews, users (contributors) need to register for free and begin submitting their own personal opinions on topics such as products, companies, movies, or reviews issued by other users. Users can also assign products or reviews integer ratings from 1 to 5. These ratings and reviews will influence future customers when they are about to decide whether a product is worth buying or a movie is worth watching. Every member of Epinions maintains a  X  X rust X  list which presents a social network of trust relationships between users. Epinions is thus an ideal source for experiments on social trust recommendation.

The dataset used in our experiments is collected by crawling the Epinions.com site on January 2009. It consists of 51,670 users who have rated a total of 83,509 different items. The total number of ratings is 631,064. The density of the user-item rating ma-trix is less than 0 . 015%. We can observe that the user-item rating matrix of Epinions is very sparse, since the densities for the two most famous collaborative filtering datasets Movielens (6,040 users, 3,900 movies, and 1,000,209 ratings) and Eachmovie (74,424 users, 1,648 movies, and 2,811,983 ratings) are 4 . 25% and 2 . 29%, respectively. More-over, an important factor for why we choose the Epinions dataset is that user social trust network information is not included in the Movielens and Eachmovie datasets. The statistics of the Epinions user-item rating matrix is summarized in Table I. As to the user social trust network, the total number of issued trust statements is 511,799. The statistics of this data source is summarized in Table II.
 5.2.2. Comparison. In this section, in order to show the performance improvement of our RSTE approach, we compare our method with the following approaches. (1) UserMean . This method uses the mean value of every user to predict the missing (2) ItemMean . This method utilizes the mean value of every item to predict the missing (3) NMF . This method is originally proposed in Lee and Seung [1999] for image anal-(4) PMF . This method is proposed by Salakhutdinov and Minh [2008b]. It only uses the (5) TCF . This method is a well-known trust-aware collaborative filtering method pro-(6) Trust . This is the method purely using trusted friends X  tastes in making recommen-(7) SoRec . This is the method proposed in Ma et al. [2008]. It is a social trust-aware
We use different amounts of training data (90%, 80%) to test the algorithms. Train-ing data 90%, for example, means we randomly select 90% of the ratings from the Epinions dataset as the training data to predict the remaining 10% of ratings. Random selection was carried out 5 times independently. The experimental results using 5 and 10 dimensions to represent the latent features are shown in Table III.

The parameter settings of our approach are  X  = 0 . 4 for both 90% training data and 80% training data,  X  U =  X  V = 0 . 001, and in all the experiments conducted in the follow-ing sections, we set all of the parameters  X  U ,  X  V equal to 0 . 001. From Table III, we can observe that our approach RSTE outperforms the other methods. In general, two social trust recommendation approaches SoRec and RSTE all perform better than the NMF and PMF methods (only using the user-item matrix for recommendations). However, the trust method performs worse than the NMF and PMF method, which indicates purely utilizing trusted friends X  tastes to recommend is not applicable. Among these three trust-aware recommendation methods, our RSTE method generally achieves bet-ter performance than the SoRec and trust methods on both MAE and RMSE. This demonstrates that our interpretation on the formation of the ratings is realistic and reasonable. 5.2.3. Performance on Different Users. One challenge of the recommender systems is that it is difficult to recommend items to users who have very few ratings. Hence, in order to compare our approach with the other methods thoroughly, we first group all users based on the number of observed ratings in the training data, and then evaluate prediction accuracies of different user groups. The experimental results are shown in Figure 3. Users are grouped into 6 classes:  X 1  X  10 X ,  X 11  X  20 X ,  X 21  X  40 X ,  X 41  X  80 X ,  X 81  X  160 X , and  X  &gt; 160 X , denoting how many ratings users have rated.

Figure 3(a) summarizes the distributions of testing data according to groups in the training data (90% as training data). For example, there are a total 3,360 user-item pairs to be predicted in the testing dataset in which the related users in the training dataset have rating numbers from 1 to 10. In Figure 3(b) and Figure 3(c), we observe that our RSTE algorithm consistently performs better than other methods, especially when few user ratings are given. When users X  rating records are ranging from 1 to 80, our RSTE method performs much better than the trust, PMF and SoRec approaches. 5.2.4. Impact of Parameter  X  . In our method proposed in this article, the parameter  X  balances the information from the users X  own characteristics and their friends X  favors. It controls how much our method should trust users themselves and their friends. If  X  = 1, we only mine the user-item rating matrix for matrix factorization, and simply employ users X  own tastes in making recommendations. If  X  = 0, we only extract information from the social trust graph to predict users X  preferences purely from the friends they trust. In other cases, we fuse information from the user-item rating matrix and the user social trust network for probabilistic matrix factorization and, furthermore, to predict ratings for the users.

Figure 4 shows the impacts of  X  on MAE and RMSE. We observe that the value of  X  impacts the recommendation results significantly, which demonstrates that fusing the users X  own tastes with their friends X  favors greatly improves the recommenda-tion accuracy. No matter whether using 90% training data or 80% training data, as  X  increases, the MAE and RMSE decrease (prediction accuracy increases) at first, but when  X  surpasses a certain threshold, the MAE and RMSE increase (prediction accu-racy decreases) with further increase of the value of  X  . This phenomenon confirms the intuition that purely using the user-item rating matrix or purely using the users X  social trust network for recommendations cannot generate better performance than fusing these two factors together.

From Figure 4(a) and Figure 4(b), when using 90% ratings as training data, we observe that our RSTE method achieves the best performance when  X  is around 0.4, while smaller values like  X  = 0 . 1 or larger values like  X  = 0 . 7 can potentially degrade the model performance. This indicates that we need to trust more about the tastes of users X  trusted friends than users X  own tastes, since the training data of the user-item matrix is very sparse, which can hardly learn accurate characteristics of the users. In Figure 4(c) and Figure 4(c), when using 80% ratings as training data, the optimal value of  X  is also around 0.4. However, less ratings for users will lead to an overall degradation of the recommendation results. 5.2.5. Training Efficiency Analysis. The complexity analysis in Section 3.5 states that the computational complexity of our approach is linear with respect to the number of ratings, which shows that our approach is scalable to very large datasets. Actually, our approach is very efficient even when using a very simple gradient descent method. In the experiments using 90% of the data as training data, our method needs less than 400 iterations for training, and each iteration only requires less than 20 seconds. All the experiments are conducted on a normal personal computer containing an Intel Pentium D CPU (3.0 GHz, Dual Core) and 1G memory.

Figure 5(a) and Figure 5(b) show the performance (MAE and RMSE) changes with the iterations. We observe that when using a large value of  X  ,suchas  X  = 1or  X  = 0 . 7, at the end of the training, the model begins to overfit (especially for the RMSE), while a relatively smaller  X  ,suchas  X  = 0or  X  = 0 . 4, does not have the overfitting problem. These experiments clearly demonstrate that in this dataset, an approach ignoring the social trust information can cause the overfitting problem, and that predictive accuracy can be improved by incorporating an appropriate amount of social trust information. In this section, we illustrate the performance of our framework on traditional user-item rating matrix. 5.3.1. Dataset Description. We evaluate our algorithms on the MovieLens dataset, which is commonly used in previous work. The MovieLens dataset contains 943 users, 1,682 movies, and 100,000 ratings in the scale of one to five. We map the ratings 1,2,3,4, and 5 to the interval [0 , 1] using the linear function t ( x ) = x / 5. 5.3.2. Comparison. We compare our method with UserMean, ItemMean, NMF, and PMF. The experimental results are shown in Table IV. In our RSTE method, we set  X  = 0 . 3and k = 80, which means we choose 80 most similar users for every user. We can observe that our method performs better than other methods, which shows that our method not only works well in trust-aware recommender systems, but can also generate very good performance in traditional recommender systems. 5.3.3. Impact of Parameter k. Basically, the parameter  X  on the MovieLens dataset shares a similar trend with the Epinions dataset. Hence, we do not analyze the details in this section. Instead, we will show the impact of parameter k . Parameter k is introduced to specify how many similar users should be selected for every user. These similar users perform as implicit social friends for targeted users. A small value of k probably is not enough for representing friends X  tastes while a large value of k will introduce some noise (some computed friends are no longer similar with the targeted user). From Figure 6, we can see that the best k value is around 80, and larger or smaller k values will hurt the recommendation performance, which confirms our intuition. affect this user X  X  online behavior. Based on the intuition that every user X  X  decisions on the Web should include both the user X  X  characteristics and the user X  X  trusted friends X  recommendations, we propose a novel, effective, and efficient probabilistic matrix fac-torization framework for recommender systems. Experimental analysis on the Epinions and MovieLens datasets shows the promising future of our proposed method. Moreover, the method introduced in this article, by using probabilistic matrix factorization, is not only working in trust-aware recommender systems, but also applicable to traditional recommender systems.

In this article, although we employ trusted friends X  opinions in the social trust net-work to make recommendations for users, we do not consider the possible diffusions of trust between various users. Under the circumstance that both the user-item rating matrix and the trust relations of a social network are very sparse, the diffusions of trust relations become inevitable, since this consideration will help to alleviate the data sparsity problem and will potentially increase prediction accuracy. We plan to employ the diffusion processes in our future work.

In many popular applications on the Web, users not only can keep a list of trust rela-tionships, but also have the rights to establish a list of distrust or block relationships. user u j  X  X  taste is totally different from him/her. Actually, this information is very useful on recommender systems. Unfortunately, to the best of our knowledge, no previous work can employ this information well in recommender systems. The understanding of distrust relations is still unclear to researchers: We cannot use diffusion methods to model it due to the reason that one person X  X  enemy X  X  enemy is not necessarily the en-emy of this person. In the future, we plan to study the formation and nature of distrust relations, and explicitly model them in recommender systems.

As the exponential growth of online social network sites continues, the research of social search is becoming more and more important. We also plan to develop similar techniques to allow users X  trusted friends to influence the users X  search results or query suggestions. The intuition behind this is that if a large number of our friends are searching for something, it X  X  likely that we may be interested in that topic too. This would be an interesting search phenomenon to explore in social networks.

