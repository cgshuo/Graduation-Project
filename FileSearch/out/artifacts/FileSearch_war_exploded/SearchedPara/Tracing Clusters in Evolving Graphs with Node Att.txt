 Data sources representing social networks with additional attribute information about the nodes are widely available in today X  X  applications. Recently, combined clustering meth-ods were introduced that consider graph information and attribute information simultaneously to detect meaningful clusters in such networks. In many cases, such attributed graphs also evolve over time. Therefore, there is a need for clustering methods that are able to trace clusters over differ-ent time steps and analyze their evolution over time. In this paper, we extend our combined clustering method DB-CSC to the analysis of evolving combined clusters.
 Categories and Subject Descriptors: H.2.8 Database management: Database applications [Data mining] Keywords: community detection, graph clustering, net-works, evolution
Detecting clusters in graphs with additional node attri-butes gained a lot of attention in recent years, and various approaches were proposed. In social network analysis, these clusters are often also called  X  X ommunities X . For example, in a co-author network the vertices of a graph usually repre-sent authors and the edges represent a co-authorship relation between them. Furthermore, in many cases additional infor-mation about the authors, like their affiliation or research topics are available, and should be used for the clustering. Recent approaches (e.g. [5, 6]) detect clusters of vertices that are densely connected in the graph and at the same time show similar attribute values in a subset of their attributes. However, the existing approaches assume that the clustered network is static. In reality, however, social networks usually evolve over time, such that at each timestep we observe a dif-ferent network. To analyze such networks, we need methods that are able not only to find clusters in attributed graphs, but also to analyze their evolution over time. In this paper, we present an extension of our DB-CSC approach [5] (which originally detects clusters in a static attributed graph), to the analysis of evolving attributed graphs.

For the analysis of cluster evolution, an important step is to trace clusters through different time steps, i.e. to decide which cluster(s) in time step i correspond to a certain clus-ter in the next time step i + 1. For example, assume that we have detected communities of authors in two states (at different time steps) of a co-author network. In this case, for each community of authors in step i + 1 we would like to determine from which communities in step i this community has possibly emerged. This specific task provides the basis for any further analysis of the cluster evolution; therefore our work concentrates on this problem.

For the tracing of clusters, we assume that each node is identified by an ID, and the ID for a single entity (e.g. a single author) does not change during the time steps, i.e. we can trace the single nodes through the time steps by their IDs. However, not all IDs have to occur in every time step, i.e. new nodes can occur and old ones can disappear. We expect that between two time steps, new clusters can occur, old ones can disappear, clusters can gain or loose members, clusters can split into several smaller clusters or several clusters can be merged into one new cluster. Thus, a cluster can be  X  X atched X  to one, several or none of the clusters in the next time step. In the context of our work, matching a cluster C 1 from step i to a cluster C 2 from step i +1 means that C 2 is assumed to have emerged from C 1 by one of the above-mentioned operations. Please note that we compare the clusters from step i + 1 only to those of step i , former steps are not considered. Therefore our method can also be applied to streams of graphs, as for each new graph we just need to store the information about the last graph.
Tracing clusters through different time steps poses an im-portant requirement for the clustering results in the single time steps: The results have to be relatively robust w.r.t. noisy data. Otherwise, already small changes in the graph could lead to highly differing clustering results in successive time steps. In our work, we tackle this problem by using the density-based DB-CSC approach for the underlying cluster-ing. Density-based clustering models have been established for vector data as well as graph data and are able to detect clusters of arbitrary shapes and sizes and at the same time exclude noise from the clustering.

Given the DB-CSC clusters from two time steps, we have to decide for each pair of clusters whether they should be matched. Just relying on the node overlap between two clusters for this decision is problematic, as this requires to specify a minimal overlap for which clusters will be matched, which can be a hard task. Furthermore, especially for at-tributed nodes, some common nodes do not necessarily mean that the two clusters C 1 and C 2 should be matched if their graph structure differs too much. In this case, it would be more probable that the two clusters are not the same, but rather just some nodes from C 1 have  X  X andered X  from C 1 to C 2 . For the node attributes, it is reasonable that the at-tributes of clustered node change X  X n the same direction X  X ver time. In this case, the clusters should be matched. However, if the clustered nodes evolve in different directions, C 2 probably not emerge from C 1 .

For vector data, statistical two-sample hypothesis tests have been established to decide whether two given samples are likely to have been generated by the same distribution. We want to transfer the idea of such statistical tests to per-form the matching of clusters. However, these tests are not directly applicable for attributed graphs. As a solution, we first project the nodes of a cluster into a vector space and are thus able to use a two-sample test for our matching.
Overall, the main contributions of this paper are: 1. We present our method TCC for tracing clusters in evolving graphs with node attributes, which provides the basis for a further analysis of the cluster evolution. 2. We perform a case study of our method using data from the European Patent Office.
Analysis of evolving networks. For the analysis of evo-lution in social networks, several methods have been devel-oped in recent years. A survey of the various methods is presented in [12]. Some of these methods analyze the evo-lution of an overall network. For example, [10] propose a method to analyze the evolution of a network over differ-ent time steps by a latent space model. Therefore, they generalize the static latent space model from [7] to fit the assumption of smooth evolution.

There also exist approaches that concentrate on the evo-lution of the clusters in the network. These approaches can be roughly divided into two categories: Methods of the first category first detect clusters in the graph for the different time steps and then analyze their changes over time (e.g. [13, 9]). Methods of the second category [8, 10] assume a priori that the clusters show a smooth evolution, i.e. the change between time steps will be rather small, and then detect clusters that preserve this assumption. Thus, the evolution of clusters in not an objective of study, but an as-sumption in this category [12]. A special problem setting is considered in [1], where a clustering algorithm is presented that detects clusters having the most significant change over time. The approach presented in this paper belongs to the first category. It is sometimes criticised that methods of the first category are problematic for noisy data, as the separate clustering for each time step can then lead to a high vari-ation of the clustering results between different time steps which is caused by noise [8]. This makes it hard to explain the evolution. In our work, this problem is tackled by using a robust density-based clustering approach.

Methods of the first category often decide whether two clusters are matched based on the node overlap between the two clusters [9]. However, this requires to define a treshold specifying the minimal overlap for which two clusters will be matched. Such a treshold can be hard to find, as a too low threshold may lead to the matching of clusters that are just incidentally similar, while a too high threshold will hinder the matching of clusters that really correspond to each other.
None of the previously mentioned approaches considers additional vertex attributes. In [14], vertex attributes are considered in a post-processing step for the description of the detected communities. However, for detecting the com-munities only the graph information is used.

Change detection for vector data. Forvectordata, various methods for analyzing evolving data have been pro-posed. [3] propose two evolutionary spectral clustering frame-works, where a temporal smoothness assumption is inte-grated into the well-known spectral clustering approach. Fur-thermore, statistical two-sample hypothesis tests can be used to compare the data from different time steps. The aim of such tests is to decide whether two datasets have been gener-ated by the same underlying distribution. E.g. [11] propose the density test for change detection in multi-dimensional data. In our approach, we use the test from [2] to compare clusters from different time steps. In this section, we introduce our method TCC (Tracing Combined Clusters) for tracing evolving clusters over dif-ferent time steps in attributed graphs. Formally, the in-put is a set G = { G 1 ,G 2 ,... } of node-labeleded graphs G =( V,E,l ) (undirected, without self-loops) with nodes V , edges E  X  V  X  V and a labeling function l : V  X  R d with aset Dim = { 1 ,...,d } of dimensions. Each G i represents the considered graph in the i  X  X h time step.

Based on the graph set G , we first detect clusters in the single time steps that are robust w.r.t. noise and we then match the clusters from successive time steps. First, we detect the clusters for each time step using the DB-CSC approach [5]. Similar to the DBSCAN approach for vector data [4], a DB-CSC cluster corresponds to a dense region. An object belongs to such a dense region if its neighborhood contains at least a minimum number minPts of objects. To comply with the attribute data as well as the graph data, a combined neighborhood is defined for each node, which is the intersection of the -neighborhood in the attribute data space (w.r.t. a given distance function dist ) and the k -neighborhood of the node in the input graph for a parameter k . The graph k -neighborhood of a node consists of all nodes that are reachable by a path of at most length k from this node: Definition 1 (Combined local neighborhood).
 The combined neighborhood of v  X  V is: with N O ( v )= { u  X  O | dist ( l ( u ) ,l ( v ))  X  } and N O k ( v )= { u  X  O | u is x -reachable from v (over
Based on this combined neighborhood, a combined cluster is defined in Definition 2. A DB-CSC cluster consists of a maximal set of nodes that all show a high local density w.r.t. O and that are connected via their neighborhoods. 1 Definition 2 (DB-CSC cluster).

A DB-CSC cluster in a graph G =( V,E,l ) w.r.t. the pa-rameters k, and minPts consists a set of nodes O  X  V such that O fulfills the following properties: (1) high local density:  X  v  X  O : | N O ( v ) | X  minPts (2) locally connected:  X  u, v  X  O :  X  w 1 ,...,w l  X  O : w u  X  w l = v  X  X  X  i  X  X  1 ,...,l  X  1 } : w i  X  N O ( w i +1 ) (3) maximality:  X  X  O  X  O : O fulfills (1) and (2)
The detection of the clusters in DB-CSC is based on a transformation to a new graph structure (without additional node attributes) that represents attribute and graph infor-mation of a node set O simultaneously: Definition 3 (Enriched subgraph).
 Given a set of nodes O  X  V and the original graph G = ( V,E,l ) , the enriched subgraph G O =( V ,E ) is defined by V = O and E = { ( u, v ) | v  X  N O ( u )  X  v = u } .
Thus, the enriched subgraph represents the  X  X imilarity structure X  of a certain subgraph w.r.t. graph and attribute information. The DB-CSC algorithm performs a fixed point iteration starting with the enriched subgraph for V ,which results in a set of enriched subgraphs whose node sets corre-spond to the DB-CSC clusters in the graph [5]. We denote the set of found clusters for a time step i by C i .Anexample is shown in Figure 1. Figure 1(a) shows the original graph for this example with three clusters and two noise nodes. (The positions of the nodes in the coordinate system cor-respond to their attribute vectors.) Figure 1(b) shows the clustering result, which consists of the enriched subgraphs of the three clusters.
Because of the above-mentioned properties, the enriched subgraph of a cluster is a good representation of the struc-ture of the cluster and robust w.r.t. noise. Furthermore, if a consistent attribute change of the clustered nodes occurs, the enriched subgraph remains stable, while if the attributes of different nodes are  X  X rifting apart X , this change will be rep-resented by the enriched subgraph. As this complies to our intuition of when two clusters should be matched, we use the concept of the enriched subgraph for the comparison of two clusters from different time steps.

For the decision if two clusters should be matched, we ap-ply a statistical two-sample hypothesis tests. Those tests have been established for vector data and decide for two given samples whether they are likely generated by the same distribution. An important requirement for our problem set-ting is that such a test has to be distribution-free, i.e. it should not depend on any assumptions about the underly-ing distributions of the clusters. Here, we consider the set of nodes of a cluster as a sample drawn from a hidden dis-tribution. Therefore, we have to project the nodes of the enriched subgraph for a cluster into a vector space. We exploit the method of [7] for projecting the nodes: This method projects the vertices of a graph into a d -dimen-sional vector space (called latent space )foragiven d such that the probability for the observed edges of the graph given the positions of the projected nodes in the vector space is maximized. In this model, the probability of an edge be-tween two nodes depends on the distance between the nodes in the latent space. We denote the projection of the enriched subgraph of a cluster O into a d -dimensional space by Figure 1: Enriched subgraphs of clusters (from [5])
Based on the resulting projection for the enriched sub-graph of each cluster, we can now decide if two clusters C 1  X  X  i and C 2  X  X  i +1 from time steps i and i +1should be matched (We denote this by C 1  X  C 2 , meaning C 2 is a successor of C 1 ). As we have represented each cluster as a sample of vectors, we can now perform a multivariate two-sample hypothesis test. In such a test, the null hypothesis is given as  X  X he two given samples were generated from the same underlying distribution X . If the null hypothesis is ac-cepted by the test, the two clusters will be matched. If the null hypothesis is rejected for a significance level of 0.05 (i.e. the probability for the null hypothesis is less than 5%), we assume that C 2 has not emerged from C 1 and do not match the two clusters. In our approach, we use the hypothesis test of Baringhaus and Franz [2], which is distribution-free under the null hypothesis.

However, as there could exist clusters that show a very similar structure, but have no nodes in common, we further require that two clusters have to have at least one common node to be matched. Else, we do not perform the hypothesis test. Formally, we define: Definition 4 (Matching of two clusters).
 For two clusters C 1  X  X  i and C 2  X  X  i +1 , we define C 1 (i.e. C 2 is a successor of C 1 ) if the following conditions hold:
We test TCC on a data set that was created from an extract of the APE-INV inventors X  database, which is based on the Patstat database of the European Patent Office. As time steps, we create a snapshot of a sample set of authors (this sample was extracted from the June dataset) for each month from January to December 2000. For the creation of each snapshot, we used the information from the past six months, older database entries are not considered. The considered graphs represent co-author networks, where two authors are connected if they published a patent publication together in the corresponding time range. The attributes of a node denote the number of separate publications and the number of separate patent applications that the author was involved in in this time range. The size of the created networks ranges from 336 (January) to 601 (June).
On these datasets, we test our method using a projection of the enriched subgraphs of the clusters to d = 2 dimen-sions. In Figure 2 we depict the resulting clusterings for each timestep and the matchings between the clusters. Each cir-cle represents a cluster in the corresponding time step, a Figure 2: Resulting clusters (with their sizes) and matchings for a period of twelve months number next to a circle denotes the number of nodes con-tained in this cluster. An arrow between two clusters means that the clusters were matched by TCC. We observe that each of the operations we assumed in the introduction also occurs in the patent dataset: New clusters evolve, clusters disappear, gain or loose members, clusters split up or several clusters are merged into one new cluster.

We show an example cluster in the time steps 8 and 9 in the Figures 3 and 4. The 3 labels for each node corre-spond to the ID of the corresponding person in the APEINV database and the attribute values for the dimensions  X  X ubli-cations X  and  X  X pplications X . The depicted edges are the edges between the clustered nodes in the original graphs G 8 and G , respectively. These two clusters were matched by TCC. Based on this matching, we can now further analyze the evolution of the cluster. E.g. between these two months the cluster lost 4 members and gained 7 more members. Further-more, for some nodes the attribute values decreased in this month, e.g. for the nodes with IDs  X 562872 X  and  X 355908 X . For other nodes, the values remained stable. However, the structure of the cluster was not affected too much by these changes, such that the clusters are still matched by TCC.
We proposed a method for tracing clusters in evolving graphs with node attributes, based on the DB-CSC cluster-ing approach [5]. By using a projection of the cluster nodes into a vector space, we are able to match clusters from dif-ferent time steps by a two-sample hypothesis test.
While this method already provides good results, in our future work we will study how using different projection methods and different dimensionalities of the latent space influences the resulting mapping and we intend to develop specialized projection methods for our problem. Further-more, we plan to extend our method to handle clusters in subspaces of the attribute space.

Finally, the tracing of clusters provides the basis for a further analysis of the evolution of clusters. In our future work, we therefore plan to enhance the TCC method to fur-ther analyze the nature of the changes between the clusters of different time steps.

Acknowledgments This work has been supported by the IMP Project House (4C-Nanonets project), the B-IT Research School and the UMIC Research Centre, RWTH Aachen University, Germany. [1] C. Aggarwal and P. Yu. Online analysis of community [2] L. Baringhaus and C. Franz. On a new multivariate [3] Y. Chi, X. Song, D. Zhou, K. Hino, and B. Tseng. [4] M. Ester, H.-P. Kriegel, J. S, and X. Xu. A [5] S. G  X  unnemann, B. Boden, and T. Seidl. DB-CSC: A [6] S. G  X  unnemann, I. F  X  arber, B. Boden, and T. Seidl. [7] P. Hoff, A. Raftery, and M. Handcock. Latent space [8] Y. Lin, Y. Chi, S. Zhu, H. Sundaram, and B. Tseng. [9] G. Palla, A. Barabasi, and T. Vicsek. Quantifying [10] P. Sarkar and A. Moore. Dynamic social network [11] X. Song, M. Wu, C. Jermaine, and S. Ranka.
 [12] M. Spiliopoulou. Evolution in social networks: A [13] J. Sun, C. Faloutsos, S. Papadimitriou, and P. Yu. [14] B. Wu, X. Pei, J. Tan, and Y. Wang. Resume mining
