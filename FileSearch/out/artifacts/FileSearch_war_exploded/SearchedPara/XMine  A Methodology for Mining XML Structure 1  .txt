 The potential benefits of the rich semantics of XML have been recognized extensively for enhancing document handling over the vast amount of documents on the Web. The XML documents are usually associated with a schema definition that describes the structure of the document. A schema clustering process improves the document handling process by organising heterogeneous XML documents into groups based on structural similarity. Similarity of correspondence elements between XML documents is conducted efficiently using relevant XML schemas. We present a methodology, XMine, that quantitatively determines the similarity between heterogeneous XML schemas by considering the linguistic and the context of the elements as well as the hierarchical structure similarity, and groups them into separate classes. 
Research on measuring the structural similarity and clustering of XML documents is gaining momentum [2,3,4]. XMine comes closer to a number of schema matching approaches based on schema only information such as XClust, Deep, Cupid, COMA, SF. However, XMine derives the structure similarity based on the maximal similar paths found by using the adapted sequential pattern mining algorithm [1]. Thus, this eliminates the element-to-element matching process, making XMine an efficient and accurate method. Lee et al. [3] also uses the sequential mining approach to quantify the structural similarity between XML documents. [3] defines the structural similarity only based on the  X  X atio X  between the maximal similar paths and the extracted paths of the base document. They do not include the element level hierarchy position, leading in erroneous match between two names occurring at two different positions or with different context. XMine overcomes this by including PNC . The XMine methodology (figure 1) starts with the Structure Analyser that transforms the structure of a schema into a suitable tree model representation. This module performs simplification analysis of the schema trees in order to deal with nesting and repetition problems. The Element Analyser calculates the linguistic similarity of each pair of element names based on the semantic and syntactic relationships. The semantic relationship (e.g. movie and film) is first measured for exploiting the similarity degree between the two token sets of names by looking up the WordNet thesaurus and user-defined library same as [4]. If there is no common elements are identified, the syntactic relationship (e.g. ctitle and title) is then measured by using the string edit distance function [5]. The lsim of two sets of name tokens is the average of the best similarity of each token with a token in the other set. 
The Maximally Similar Paths Finder identifies the paths and elements that are common between the hierarchical structures of pairs of schemas. We adapt the sequential pattern mining algorithm [1] to infer similarity between element structures. represented by a unique sequence of element nodes following the containment links from the root to the corresponding nodes as a resultant of traversing the schema tree root node and x n is a leaf node. Let the set of path expressions, PE , in a schema tree other path expression or no super path of p j is frequent. 
The overall degree of similarity based on the element and structure similarity is then computed in Schema Similarity Matrix Processor . The maximal similar paths serve the basis for the element structural similarity that emphasizes on the hierarchical information of the element, which cover the context of an element defined by its expressions is measured. The element semantic similarity that involves the linguistic and constraint similarity between elements contained in the maximal large paths is also computed. 
Let us assume two schemas: base schema (schema b ) and query schema (schema q ) and the corresponding base tree T B and query tree T Q . A unique set of path expressions are obtained by traversing both the base and query trees, denoted as PE B and PE Q respectively. A set of maximal similar paths ( MPE ) represents a number of common paths that exist in both base and query tree. The corresponding full path similarity coefficient of a particular maximal similar path ( MPE k ), maxpathSim , uses the similarity coefficient of its corresponding base and query path expressions, which refers to the path similarity coefficient, pathsim . 
Similarity between two path expressions ( pathSim ) is computed by taking into account the similarity coefficient between the linguistic names, constraints, and path name of every element in the both PE B i and PE Q j ,. This checks a one-to-one mapping of elements in the path expressions, that is an element in PE B i matches, at most, one element in PE Q j . 
The linguistic and constraints similarity of the elements is derived from the base element similarity coefficient, basesim , which obtained by weighted sum of linguistic similarity coefficient, lSim and constraint similarity coefficient, contraintSim of the elements: determined from the cardinality constraint compatible table as used in [4]. 
The path name coefficient, PNC , measures the degree of similarity of the two element names in two given paths. PNC differentiates two elements with the same name but in different level position in the common paths (e.g., book.name and book.author.name ) or in their context (e.g., a patient X  X  name and a physician name). The context of an element e is given by the path from root element to an element e, denoted as e.path(root) . Thus the path from root element to element e is an element list denoted by e.path(root) = { root , e pi ,..., e pj , e }. 
Every schema similarity value between each pair of schemas is mapped into the schema similarity matrix . This matrix becomes the input to the clustering process. XMine uses the constrained agglomerative clustering technique [6] to group schemas similar in structure and semantics to form a hierarchy of schema classes. The similarity between two schemas is computed by: 
In the final phase, the discovered schema patterns are visualized as a tree of clusters called dendogram. This visualization facilitates the generalization and specialization process of the clusters to develop an appropriate schema class hierarchy. Each cluster consisting of a set of similar schemas forms a node in the hierarchy, where all nodes are at the same conceptual level. Each cluster may be further decomposed into several schema sub clusters, forming a lower level of the hierarchy. Clusters may also be grouped together to form a higher level of the hierarchy. 
A new schema can now be generalized. First, the schema is generalized to the identifier of the lowest subclass to which the schema belongs. The identifier of this subclass can then, in turn, be generalized to a higher-level class identifier by climbing up the class hierarchy. Similarly, a class or a subclass can be generalized to its corresponding superclasses by climbing up its associated schema class hierarchy. The 180 schemas from various domains and sources with the nesting levels of 2-20 and nodes varying from 10 to 1000 are used in experiments. The validity and quality of the XMine clustering solutions are verified using two common evaluation methods: (1) FScore measure and (2) the intra-cluster and inter-cluster quality. The FScore result of the 9-clusters solution shows the best FScore (figure 2). When the process reached the 13-clusters solution, the clustering quality is stabilized. The XMine maximizes the intra-class similarity by decreasing the average scattering compactness of clusters as the number of clusters increases (figure 3). This is because the greater the number of clusters specified in the solution, clusters are further decomposed into smaller subclusters containing more highly similar schemas. The figure 4 also shows that the average external similarity between clusters decreases as the number of clusters increases. As the numbers of cluster increases, a smaller size of clusters is produced consisting of highly similar schemas and hence highly dissimilar with schemas in other clusters. Based on these observations, the 13-clusters solution provides the optimal clustering model for the input data set. 
XMine is also examined to test the sensitivity in computing the schema similarity coefficient ( schemaSim ). Figure 5 shows that the effect of the PNC on clustering is very significant. Without inclusion of PNC , the element names with the same semantics but occur in different position in the hierarchy path name (i.e. book.title and book.author.title ) cannot be identified and discriminated. Without the semantic relationship, XMine is still able to handle the linguistic similarity between element names relatively more effectively (figure 7) than without the syntactic relationship (figure 6). Therefore, for what concerns element names in many cases, syntactic similarity measure could be more reliable than semantic similarity measure. Figures 8 &amp; 9 display the clusters decomposition for 9 and 13 numbers of clusters. The shaded nodes in the hierarchy represent the actual clusters of the schemas. The unshaded nodes represent the generalization class of the low-level schema classes. Each node is labelled with the class name and the size of the class. The progression in clustering process achieves the disjoint and very specific classes of documents (i.e., lesser unclassified documents). The classes become very small in size, and may not sufficient to be considered as independent classes as they may be only holding specific schemas (as it happens in the case with 18 clusters). Generally, the clusters consist of a very small number of members called noises and outliers. This paper presented the XMine methodology that clusters the schemas by considering both linguistic and structural information of elements in the maximal similar paths, as well as the context of an element, which is defined by its level position among other elements in the path expressions. The context of elements takes into account the elements that do not locate at the same level of the hierarchies tree, but they are similar. 
The experimental evaluation shows the effectiveness of XMine in categorizing the heterogeneous schemas into relevant classes that facilitate the generalization of an appropriate schema class hierarchy. From the sensitivity evaluation, it is shown that the XMine pre-processing components highly influences the quality of clusters. 
The current implementation and experiments of XMiner uses XML DTDs as schema definition language. However, XML Schema is likely to replace DTD in the future. The shift from DTDs to XML Schema is considerable straightforward with more constraint procedures to be developed in the XMine pre-processing phase for dealing with semantic extension provided in XML Schema. XMine X  X  element analyser process can also be extended by categorizing elements into similar semantic and syntactic concepts. The purpose of element categorization is to reduce the number of element-to-element comparison. The element categorization based on their data types and linguistics content will accelerate the element comparison process by only matching elements that belong to the same element categories. 
