 In order to survive, companies depend on their capacity to generate and manage knowledge while promoting alignment among its employees. To tackle this problem , it was developed an enterprise collaboration platform named Smart Canvas , a service whose goal is to leverage companies X  knowledge and tear down silos by connecting people, teams, and content. These connections are suggested by a Recommender System, using techniques like Topic Modeling, Content-Based Filtering and Graph traversing. Smart Canvas is a multi-tenant Software as a Service, featuring a scalable cloud-based Recommender System architecture, including tools like Spark and Titan Graph Database, deployed on Google Cloud Platform. Recommender system; corporate collaboration; content-based filtering; topic modeling; recommendations explanations. Any organization with more than a couple of dozen employees will eventually and surely create silos of knowledge. By breaking those silos they can ignite innovation potential. Collaboration platforms have been available for many years, but they struggle to overcome what is known as the collaboration paradox [1]: people want all the benefits provided by such tools, but they won X  X  invest their times without some sort of immediate gain. To tackle this people to create and curate content relevant to their organization. Smart Canvas is powered by a recommender system which:  X  Suggests relevant content, explaining to the users which of Our typical data pipeline includes the ingestion millions of user events (using Google PubSub and BigQuery), the batch processing of the models (with Py Spark and Scikit-learn), and the online recommendations (with Google App Engine, Titan Graph Database and Elasticsearch). An overview of the RecSys batch processing can be seen in Figure 5, where Spark jobs run for each of our clients (tenants). Job #1 retrieves from BigQuery all published content, vectorizes them using TF-IDF, and persists the vocabulary and the sparse matrix for further usage. For each user, Job #2 process a corpus formed by the posts user has interacted more recently, using Non-Negative Matrix Factorization (NMF) to model the topics of interest , with some semantic heuristics to define the best number of topics (k). Then, topics relevance is weighted by the count of each interaction type (i.e. views, likes, comments), decayed by the age of the interactions to boost recent user interests. Job #3 makes an analogous process to discover topics of boards (content groups), based on the posts pinned on them by users. Job #4 recommends content for each of users topics using cosine similarity . With individual Bloom Filters, posts that users have already seen are efficiently ignored. Job #5 does the same for boards topics recommendations. Job #6 process related posts recommendations, calculating similarity with vectors under pivoted unique normalization [2] to balance short and long posts. All recommendations are persisted as edges in Titan Graph Database, as shown in Figure 6, where they can be efficiently retrieved and presented to the users. 
