 1. Introduction
Recommender systems are commonly employed nowadays in many domains, being specially successful in e-commerce sites. Many online businesses have found in recommender systems the perfect tool to increase sales (and benefits!) and cus-tomer satisfaction at the same time. The main reason of recommender systems success is that they can provide personalized recommendations, thus helping users to find valuable products for themselves among a wide amount of choices. In a society that generates an impressive amount of information every single day, recommender systems are an essential tool to guide users towards their needs.

The technique of Collaborative Filtering (CF) ( Goldberg, Nichols, Oki, &amp; Terry, 1992 ), that recommends items based on the opinions of other users, is very popular given its good results in many domains. In this technique, each user is represented by will recommend items rated high by these similar users. Obviously, the user profile is incomplete, that is, it only contains opinions about a reduced set of items: those the user knows about and has decided to rate. The higher the profile, the more information the system has about the user. This usually results in better recommendations. On the other hand, when there is few available information, the recommender system performs poorly. This is the well-known cold-start problem ( Schein, Popescul, Ungar, &amp; Pennock, 2002 ).

In particular, Collaborative Filtering techniques suffer the so-called new user problem, that is, how to recommend items to users that have recently joined the system and thus have an empty or very small profile. Actually, this problem does not  X  affect only new users, but also users that rate few items, despite having been using the system for a long time. For example, users that do not use the system very often, or that are reticent to rate items. In many domains where Collaborative Filtering techniques are used this is a rather common situation. For example, in movie recommendation systems a high number of users adopt this behavior. That can be seen in Fig. 1 , where we plot the percentage of users according to the percentage of ratings on two common movie recommendation datasets: Netflix and Movielens 10 M. It can be seen that 20% of the users only give a small percentage of ratings. 1 Thus, the new user problem is a critical aspect of any recommender system, and han-dling it properly can make the difference between a successful and a failed experience. A system that does not generate good recommendations to new users has very few chances of succeeding.

Traditionally, the cold start problem has been addressed with hybrid methods, that combine the collaborative informa-tion (ratings) with other sources of data. For example, demographic data such as age, genre, population, etc. can be used to provide acceptable recommendations until the system has more information about the user tastes. However, that offers a limited personalization in most cases, and still requires the user to enter that information. Moreover, due to privacy con-cerns, some users do not like to provide all the data the system requires.

In this paper we propose a set of novel techniques to address the new user problem. We call them Profile Expansion tech-niques, as they are, in fact, based on the idea of increasing the user profile to improve the recommendation. They have their foundation on Query Expansion techniques, commonly used in Information Retrieval when the search query is incomplete or ambiguous, and thus the system has not enough information to correctly answer it. This is the same problem recommender systems have with new users.
 We propose several approaches to automatically increase the profile of new users, leading to better recommendations.
Our techniques can be applied to most k -Nearest Neighbors algorithms without effort, so many real systems can take advan-tage of them without significant changes to the algorithm. Indeed, our techniques do not need the user to enter additional information, so there are not additional privacy-related issues involved in their deployment. They can also be conditionally enabled only in specific situations; for example, when the user profile size is below a predefined threshold, without modi-fying the algorithm behavior otherwise.

We have studied different but related approaches. The experiments we have performed show that many of them signif-icantly improve the quality of the recommendations.

In the next section, we discuss the related work, paying special attention to the techniques developed so far in order to alleviate the cold-start problem. We also introduce the main concepts and works regarding query expansion aspects in Infor-mation Retrieval. Then, we describe the profile expansion techniques and the different methods proposed. After that, we present the experiments carried out and we discuss the results. Finally, we show the conclusions of this work and we intro-duce future improvements. 2. Related work 2.1. kNN recommender systems
Collaborative Filtering techniques are based on user opinions. The opinions of each user comprise the user profile. A big
Collaborative Filtering algorithms have been classified in memory-based and model-based techniques, according to how they process the information in the rating matrix. Memory-based techniques work directly with the ratings, while model-based techniques first construct a model to represent the behavior of the users and, therefore, to predict their ratings.
In general, model-based algorithms are able to extract much more information from the data, and they usually compute predictions faster than memory-based techniques. However, model construction is generally quite expensive in terms of time, and the model needs to fit the real data to obtain accurate results, which is not always the case ( Cacheda, Carneiro, Fern X ndez, &amp; Formoso, 2011 ).

On the other hand, memory-based techniques, although they do not achieve as much accuracy as the best model-based they are simple and intuitive methods; it is easy to explain the recommendation decision to the user; they are efficient, not requiring a complex model construction step; and they are stable, being practically unaffected by the addition of new users or items.

The most popular memory-based approaches are known as k -Nearest Neighbors algorithms, as they work by finding a set of users similar to the user they are computing a recommendation for.
 item i . The similarity is computed according to a previously defined similarity function s : U U ! R . Pearson correlation commonly used. The utility or item rating is predicted by combining the ratings of the neighbors, usually weighted by the similarity of each neighbor. In many cases, instead of rating prediction, the system generates a recommendation list, with the top rated items that the user has not rated yet.

Alternative approaches, based on items, have also been proposed ( Sarwar, Karypis, Konstan, &amp; Reidl, 2001 ). In that case, the neighbors are items similar to the item i .

Additionally, k -Nearest Neighbors algorithms can be efficiently implemented using inverted indexes. In particular, C X ster and Svensson (2002) have studied the usage of an inverted file structure in neighbor similarity computation. Their experi-ments have shown that it reduces the neighbor formation time, significantly speeding up the total recommendation time. 2.2. The cold-start problem in recommender systems
Collaborative Filtering techniques obtain pretty good results when many ratings are available. However, in real systems, the information is usually scarce, that is, users only rate a small subset of items. For example, users only watch a few movies among the hundreds of movies that are released each year, so the data in a movie recommendation system is sparse because of its own nature. Data from other domains, such as web page recommendation, is even sparser. While state-of-the-art ap-proaches handle pretty well the common, relatively sparse, conditions, their accuracy decreases with increasing sparsity ( Cacheda et al., 2011 ).

In particular, there are three situations where the information is extremely sparse independently of the domain nature ( Park &amp; Chu, 2009 ): New item , that is, recommending an item recently introduced in the system.
 New user , that is, generating recommendations for users that have joined the system recently.
 New system , generating recommendations when the system has just been deployed.

In general, these situations cannot be properly handled by Collaborative Filtering techniques. This is the well-known cold-find different techniques to address each particular situation, many of which consider other information in addition to the user ratings. They are the so-called hybrid approaches ( Balabanovic  X  &amp; Shoham, 1997 ).

Regarding the new item problem, the ratings can be combined with content-based information, that is, information about the nature of the items. For example, in movie recommendation, information about the director, actors and actresses, genre or even the film synopsis could be useful information to work with. Content-based information about an item can be easily obtained, so hybrid approaches are very useful for new items, for which the system has few or none collaborative information.

This extra content-based information can be simply used to estimate user ratings and improve the user profile. For exam-ple, Melville, Mooney, and Nagarajan (2002) used an extended naive Bayesian text classifier to estimate unknown user rat-
Other authors have studied the utility of bots, that is, fake users that automatically rate items according to content-based information. Good et al. (1999) experimented with several bot techniques, ranging from simple approaches such as bots that rated movies according to their genre, to more complex approaches such as TF-IDF or inductive logic. They also combined several of those techniques, obtaining good results. Later, Park, Pennock, Madani, Good, and DeCoste (2006) improved both the performance and scalability of this idea, by using a reduced number of global filterbots.

Other authors have designed systems where the content information is part of the model. Schein et al. (2002) modeled the content data by means of a latent-factor aspect model that relates users with movie casts, in addition to a purely collab-orative aspect-model to relate users with movies. More recently, Gunawardana and Meek (2008) used Boltzman machines to model user-item relationships, using content information to estimate model parameters. They modeled the content as vec-tors of features, where a feature could represent term weight, presence of an actor, etc. Several other techniques have also been studied ( Leung, Chan, &amp; Chung, 2007; Park &amp; Chu, 2009 ).

The same idea (that is, to combine collaborative information with additional data) has also been proposed as a solution to the new user problem. In this case, sources of information other that content-based have been studied, such as demographic ousakis, &amp; Kutsuras, 2005 ).

Unlike the new item case, obtaining additional information for the new user case almost always requires to ask the user. It does not matter whether the user is requested to provide his or her age, sex, address, or just to rate some initial movies: contrary to the new item case, where the extra information for the item is easily available, user needs to provide this extra information. So, systems such as Movielens have chosen to directly require the user to rate some items before beginning to receive recommendations. In that case, a pure Collaborative Filtering algorithm can be used.

Actually, to require users to provide additional information is not a bad idea. As the user is expected to get a benefit in exchange for the additional information (more accurate recommendations), it is expected she will not be reluctant to it. In fact, this is how Collaborative Filtering techniques work: they expect that the users will rate the items in exchange for more accurate recommendations.

However, requiring too much information at early stages can be a problem. If the items the user is required to rate are not properly chosen, the initial profile may be useless (for example, if the user does not know about most proposed items), and the user will be soon disappointed. To avoid this, some authors have proposed techniques to optimize this information gath-ering process ( Rashid, Karypis, &amp; Riedl, 2008 ; Golbandi, Koren, &amp; Lempel, 2011 ).

In many cases, however, it is still better to take advantage of the available information even if it is scarce, than to bother the user asking for more information. If the recommendations are reasonably accurate from the beginning, the user will con-tinue to use the system, providing more and more information. For example, if a system is able to provide reasonably accu-rate recommendations for a user with a single rating, the user will be probably willing to rate the recommended movies in order to improve her profile.

Some authors realized this fact, and they attempted to improve algorithms for the new user situation, instead of requiring new users to provide additional information. For example, Ahn (2008) proposed a new similarity measure for kNN algo-rithms, based on proximity, impact and popularity of user ratings. It was designed as a replacement for traditional measures such as cosine or Pearson correlation, that improves performance on new users. Piccart, Struyf, and Blockeel (2010) proposed a probabilistic graph-based method that improves results in cold-start situations, by using information present in indirect neighbors.

The techniques presented in this paper are also based on the available user ratings only. We think that, while content-based information is very useful for new items, the new user problem can be effectively addressed without bothering the user with additional information requests. In the next section we introduce the basic concepts of query expansion tech-niques, as our techniques use a similar approach. 2.3. Relevance feedback and query expansion
In many Information Retrieval systems, it is not easy for the user to submit the right query in order to get the information she needs. Relevance feedback and query expansion techniques were developed precisely to improve the results according to the user information needs. They assume that the query is just an initial attempt that should be subsequently improved. For example, synonymous of the query terms can be used to expand the set of relevant documents retrieved.

Relevance feedback techniques are based on the reaction of the user to the set of documents initially retrieved. They thus assume an interactive process, where the query (and thus the result set) is reviewed taken into account the user feedback. In a classical feedback implementation, the initial query leads to a set of documents that is presented to the user, who then selects which ones are actually relevant. This feedback is used by the system to improve the query and return a better list of documents. For example, the Rocchio algorithm ( Rocchio, 1971 ) updates the original query with the set of terms that max-imize the vector distance between relevant documents and non-relevant documents (according to the user feedback). Prob-abilistic feedback works similarly, but it uses a Bayesian classifier instead.

Sometimes, it is not feasible to directly ask the user to select the relevant documents, so additional sources of relevance feedback should be used. In particular, clickthrough data ( Joachims, 2002 ) is known to obtain good results. In this case, in-stead of asking the user for relevance judgments, the relevance is computed from the documents the user visits. In either case, it is needed the interaction with the user after query submission.

On the other hand, query expansion techniques (also known as implicit relevance feedback) work directly with the infor-Yates &amp; Ribeiro-Neto, 2008 ).

In local analysis, the set of documents retrieved are examined in order to obtain additional relevant terms to expand the related with the query.
Global analysis, on the other hand, is based on information obtained from the whole document collection. Usually, these techniques build a thesaurus that relates a term with other similar terms. Then, the original query is expanded using such
Riesenfeld, 1998 ), human-built thesaurus, or by mining query logs ( Fitzpatrick &amp; Dent, 1997 ). 3. Profile expansion
In Collaborative Filtering algorithms, the set of ratings given by the user comprise her profile. More formally, we can de-sponding rating v ui , as shown in Eq. (1) . We denote as P item-rating pairs, being s the number of items rated by the user.
 k NN algorithms use the profile to compute the similarity between the user and each one of the other users in the system. Then, the most similar users are selected as neighbors. Finally, the neighbors are used to compute the recommendation. The process is depicted in Fig. 2 .
 similarity computation may not work properly, as there is not enough information about the user interests. As a paradig-matic case, the Pearson correlation, a similarity measure commonly used in Collaborative Filtering, always reports a perfect similarity if two users have rated only a single item in common. Thus, with a small user profile, such similarity measure should not really be used.

A mistake in similarity computation will have a great impact in the following steps. For example, let us suppose that a system that uses Pearson correlation as similarity measure needs to compute a recommendation for a user that has rated related, independently of the actual rating: one user might like the item whereas the other might not, but they will be con-sidered similar. Therefore, the neighborhood is in fact randomly chosen among the users who have rated that single item. It seems clear that k NN algorithms cannot perform well in new user situations, as the experiments have shown ( Cacheda et al., 2011 ).

To alleviate this problem, we propose the use of Profile Expansion (PE) techniques. The idea is to increase the size of the original profile with additional items, in order to improve the next steps. We thus define the expanded profile , P of the original profile with up to l additional items. That can be seen in the following equation:
We denote as P e u the set of item-rating pairs added to the profile. Thus, P tionally, we define the set of items already rated by the user as I
I \ I u  X ; .

Different techniques can be used to choose the additional items that will be part of the expanded profile. We classify PE techniques according to two criteria: 1. Local versus global. Similarly to query expansion techniques discussed before, PE approaches can be either local or global.
Local techniques are based on the current recommendation results, that is, on information obtained from the current user profile. On the other hand, global techniques use information available independently of a particular user profile. 2. Item-based versus user-based. Item-based techniques choose the items to expand the profile among a given set of items. On the other hand, user-based techniques choose the items among those rated by a given set of users.

In the following subsections, the different alternatives are further discussed. In this paper, we focus on techniques purely based on collaborative information, that take advantage on the existing user profile and do not require the user to provide extra information. However, many hybrid approaches can also be used like a PE technique. As long as their purpose is to increase the user profile, any approach can be classified in a particular PE subtype. For example, traditional hybrid ap-proaches where the content-based information about the items is used to fill up the missing ratings in the user profile can be modeled like a PE technique (in particular, an item-global one). Instead of a set of techniques, profile expansion can be seen as a framework for addressing the new user problem. 3.1. Item-global profile expansion Item-global techniques attempt to find a set of items similar to the items already present in the user profile. As shown in
Fig. 3 , the expansion takes place before any further computation. Thus, to find similar items, these techniques need to use information globally available in the system.

A purely collaborative item-global expansion is based on the similarity between item ratings. An item-item similarity function, 1 : I I ! R , needs to be defined. We have used the cosine vector similarity, computed according to Eq. (3) , but other similarity measures can also be used. the average rating, weighted according to the similarity. Actually, the process is very similar to an item-based Collaborative Filtering algorithm, such as the one described in Sarwar et al. (2001) .

To speed up the profile expansion step, an implementation may choose to pre-compute a list with the most similar items, for each one of the items.

Note that, although we are focusing on purely Collaborative Filtering approaches, alternative sources of information can be used for similarity computation. For example, methods based on item content. 3.2. Item-local profile expansion Item-local techniques choose the items to expand the profile based on the items recommended to the user, as shown in
Fig. 4 . They require an initial recommendation, that is only used for profile expansion. Then, a second recommendation, using the expanded profile, is computed and shown to the user.

A simple approach, which is what we have evaluated in this paper, is to just expand the profile with the l top-rated items in the recommendation list. 3.3. User-global profile expansion
Similarly to item-global techniques, user-global approaches use information generally available about users to expand the user profile. The idea is to add to the profile items rated by similar users. When collaborative information is used for computing neighbor similarity, this technique is very similar to user-local approaches presented next. In practice, usage of additional information, such as demographic data, naturally fits in this approach. However, in this article we have not evaluated those approaches, and user-global technique is presented here only for completeness. 3.4. User-local profile expansion
As shown in Fig. 5 , user-local techniques are based on the current user neighbors. The items chosen to expand the profile are selected among the items rated by those neighbors.
 Different techniques can be used to select the items. In particular, we have studied the following approaches:
Top-rated . The profile is expanded with the top rated l items. If a given item was rated by several neighbors, the rating is averaged according to neighbor similarity. Note that this approach is similar to the item-local technique. However, while in item-local approach the profile is only expanded with items rated good, in this technique items rated bad could be part of the expanded profile, as long as l is large enough.

Most-rated . The profile is expanded with the l items that most neighbors have rated, despite the current rating value or neighbor similarity. This approach is interesting because it will likely expand the profile with the kind of items the neigh-borhood was based on. For example, let us suppose we have a user who only likes action movies. The neighborhood will be comprised of users who also like action movies, but they may also like other kind of movies. If we take the top-rated approach, it is possible that such movies are finally used to expand the profile, although our theoretical user does not like any but action movies. If instead we choose the items most neighbors have rated, there are more chances that action mov-ies are included, as they are what all neighbors have in common.

Local item neighbors. This method is similar to item-global techniques, expanding the profile with the items most similar to the items in the user profile. However, while item-global techniques compute the neighbor similarity using generally available data, this technique only takes into account the ratings given by users in the neighborhood.

User-local clustering. This method attempts to capture the relationships between items, but taking into account only the ratings given by the local user neighborhood. It is similar to the local item neighbors method just presented, but similarity is computed using a completely different approach, inspired in the local association matrix technique ( Attar &amp; Fraenkel, 1977 ) used for query expansion. The similarity of every item in the system, j 2 I , with each item in the user profile, i 2 I is computed as the sum of the contribution of each user neighbor, n 2 N ( u ), that is computed as the product of the ratings given by the neighbor to both items. More formally, for each item i 2 I that is, 1 ( i , j ), is computed according to the following equation:
A summary of the different profile expansion techniques is shown in Table 1 . 4. Experiments 4.1. Evaluation methodology
Our experiments have been performed using two datasets: Netflix ( Bennett &amp; Lanning, 2007 ) and Movielens 10 M. The first contains over 100 million ratings from 480,189 users to 17,770 movies, collected between October 1998 and December 2005. The second contains over 10 million ratings for 10,681 movies, given by 71,567 users of the online movie recom-mender service Movielens. 2 Both datasets are commonly used for Collaborative Filtering evaluation.

First we have randomly selected 200 users on each dataset for evaluation purposes. To simulate the new user problem, we have used a Given-N strategy ( Breese et al., 1998 ): for each one of those 200 users, we have randomly chosen a small number of ratings, N . We have performed several experiments, using for each one a different value of N . In particular we have tried the training subset, that is, the information the algorithm knows. The system is then requested to generate a recommenda-the recommendation list. In particular, we have used traditional metrics such as precision, recall and Mean Average Precision (MAP). We have considered items rated above 4 as relevant, and non-relevant otherwise. Missing ratings were considered non-relevant, too.

We have paid special attention to the Precision-at-5 (P@5) measure. It measures the precision of the algorithm in the 5 items recommended on top of the recommendation list. That is, the ratio of relevant items in the first 5 positions, being rel-evant those items rated above 4 in the evaluation subset. In our opinion, if we have to use a single value to represent the quality of a recommendation algorithm from a user point of view, P@5 would be the best choice. The reason is that many recommender systems present a short list to the user, 3 so the precision in the top places of the recommendation list is highly ception of the quality, in our opinion.

We have evaluated each one of the profile expansion approaches described in the previous section. their improvement with a classical user-based technique, using the cosine vector similarity for neighbor selection and a weighted approach for rating prediction. The same algorithm was used with profile expansion. In both cases, after a preliminary in most situations.

We have also compared the performance of more recent approaches such as SVD++ ( Koren, 2008 ) and Regularized SVD (RSVD) ( Funk, 2006 ). Although they perform better than user-based approaches for rating prediction, they actually perform several orders of magnitude worse for item recommendation, so finally we have not included them in the following discussion.

Statistical testing of the results has been performed using a one-way or two-way Analysis of Variance (ANOVA), depend-ing on the particular experiment. Although ANOVA preconditions are not strictly satisfied in these kind of experiments (for example, because the metrics are bounded and thus errors do not really follow a normal distribution), slight violations of the model assumptions have little impact in the statistical test, so ANOVA is commonly used to validate IR experiments ( Hull, next section. Confidence level was set to 95%. 4.2. Item-global techniques
First, we have evaluated the performance of item-global techniques, in particular the item-global method based on cosine similarity among item ratings, as described in Section 3.1 .

We have studied the overall performance of the technique, as well as the impact of the parameter l , that determines the maximum number of ratings to add to the user profile. Figs. 6 and 7 show the P  X  R curves computed with 2 and 10 ratings per evaluation user. That is, following both a Given-2 and a Given-10 approaches. The first one is an arduous new user situation.
In general, highest improvements of item-global techniques are obtained with N = 2, which is expected as without profile expansion the algorithm has very few information to work with, and the results are modest. When N increases, the benefit of profile expansion is smaller, which is expected.

In general, it can be seen that item-global techniques significantly improve the results, especially the precision in the first greatest impact in user perception, as discussed in the previous section, so it is expected that item-global techniques will significantly improve the satisfaction of new users. In particular, in Table 2 we show the P@5 with N = 2. It can be seen that the usage of item-global profile expansion techniques offers a great improvement over traditional algorithms without profile expansion. The improvement reaches the 80% in some situations, and it is statistically significant independently of the value ment on Netflix.

The best results are obtained when l is set to a small value, especially if the Given-2 training set is used. It seems that thus leading to bad results. Best results are obtained with l example, with N = 10), we can look for items similar to several items, so slightly incrementing l does not have that negative impact. This can be seen especially on Movielens dataset, where a bigger l even improves the results with N = 10. In general, best results are obtained when l is slightly greater than the profile size.

Finally, we have also studied the impact of item-global techniques on the Mean Average Precision (MAP), that takes into account all recommended items, and not just the top 5 as in the above discussion. Results are shown in Fig. 8 . It can be seen that item-global techniques also improve the overall precision. The improvement versus not using profile expansion is sta-tistically significant, although differences among most l values are not. It should be noted that regarding MAP, results with l = 5 are modest, particularly if they are compared with P@5, where l = 5 performs specially well. With a low l , the expanded profile will still be small, so while top recommended items are properly chosen, the whole recommendation list is not that good. In any case, if we have to choose we would tend towards an algorithm with better P@5 but, of course, it depends on the particular context where the system is going to be used.

Finally, we should note that with N = 1 the algorithm without profile expansion cannot provide recommendations. The niques offers a huge improvement, offering a quite good precision with just a single rating. 4.3. Item-local techniques
Unlike item-global techniques, the item-local approach has obtained very bad results. In most cases, item-local tech-niques not only do not improve the results, but also worsen them in many situations.

For example, Fig. 9 plots the MAP results on both datasets. It can be seen that item-local profile expansion worsens the results. In particular, the bad results of profile expansion are statistically significant.

These bad results can be explained by the fact that item-local techniques expand the profile with the items initially rec-ommended. As the system has not enough information about the user, such items are not a good recommendation, so the profile is being expanded with the wrong items. Unlike query expansion in Information Retrieval, where assuming that the initially recommended items are relevant leads to good results, in Collaborative Filtering this is not a good assumption. to obtain the documents, while in CF the user profile is used to obtain the neighbors. Computing the recommendation from the neighbors is an additional step CF requires. Clearly, with a small profile that last step cannot be performed correctly. 4.4. User-local techniques
We have evaluated the four user-local methods studied in Section 3.4 : top-rated, most-rated, local item neighbors, and user-local clustering. First, we have compared the performance of each method.
 The P  X  R curves for each method are shown in Figs. 10 and 11 . We show the results for N = 2 and N = 10.
The first thing we observe is that the top-rated method does not work very well. On the Netflix dataset it is like not using local techniques that also perform bad, as shown in the previous section. With a small profile, the algorithm has not enough information to select the best items for a given user, therefore all techniques based on that idea do not perform well. On the other hand, we can see that the remaining techniques significantly improve the precision for new users. With N = 2, all methods (with the exception of top-rated, of course) obtain outstanding improvements on both datasets, especially 80% improvement on Netflix dataset, and over 100% on Movielens 10 M, even better than item-global approach. When
N = 10, the results need further discussion. First, we should note that user local approaches still improves the results, even considering that 10 ratings per user is enough information to compute precise recommendations without profile expansion.
The improvement is much better than the one obtained with item-global techniques, in that situation. Even with l = 10, user local techniques obtain good results in both Movielens and Netflix. Both user-local clustering and most-rated methods ob-tain very good results on the top elements of the recommendation list. On the other hand, with N = 10 the local item neigh-bors method does not perform very well on the top items, and tends towards a good average precision.

That is confirmed if we study the evolution of the Mean Average Precision according to the number of ratings per eval-best choice to improve precision on the first items in the recommendation list. In particular, we prefer the most rated meth-od because of its simplicity.

Finally, regarding the parameter l , that controls the number of elements added to the profile, we can see that in Netflix when the number of available user ratings is bigger seems to be a good idea. 5. Conclusions
In this work we have proposed different techniques to alleviate the new user problem that affects most recommender systems. We have grouped those techniques in a general framework we have called Profile Expansion . Many traditional ap-proaches can also be modeled following this framework.
 Additionally, we have proposed several novel techniques, that can be classified in: item-global, item-local and user-local.
The main advantage of these techniques is that they are just based on user ratings, so they do not require additional infor-mation such as demographic or content-based data. This is an important advantage over many existing approaches.
The experiments we have carried out show that both item-global and user-local approaches perform very well. Particu-larly, they significantly improve the precision on the top positions of the recommendation list, which has a great impact in user perception. The improvement observed reaches 80% for item-global techniques and 100% for user-local. On the other hand, item-local shows a bad behavior.

In general, user-local are the best approaches, specially the most rated and user-local clustering methods. The latter was inspired on a traditional query expansion technique, so it shows that this kind of techniques can be successfully adapted to profile expansion, which is a promising result. Item-global is also a good approach, and, although the raw improvement is user rating. Indeed, content-based methods can also be combined with it. 6. Future work
In the future, we plan to adapt new sources of information to our profile expansion framework. In particular, content-based data about the items is rather easy to collect and can be very useful. As said, item-global approaches can benefit from this additional data.

We will also explore the possibilities of user-global techniques. For example, demographic data, and user relationships in social networks have already been proposed and they seem to be very useful.

Expanding the framework with these additional techniques will also allow us to perform a complete evaluation of all the known approaches to the new user problem. This will be very useful for the industry, as real deployments of recommender systems have to deal with it.

We also plan to combine different profile expansion techniques. For example, item-global can be easily used together with user-local methods, and we think that this will lead to even better improvements.

Finally, it would be also interesting to study the cold-start problem in the presence of additional dimensions such as time, and the performance of profile expansion in such cases.
 Acknowledgements
This research was supported by the Ministry of Education and Science of Spain and FEDER funds of the European Union (Project TIN2009-14203).
 References
