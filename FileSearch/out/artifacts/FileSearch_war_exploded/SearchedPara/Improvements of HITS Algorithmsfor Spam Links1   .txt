 Search engines are widely used as a tool for obtaining information on a topic from the Web. Given keywords specifying a topic, search engines score Web pages containing the keywords by using several scoring algorithms, and output the pages in decending order of the score. For example, PageRank proposed by Brin and Page [3] has been used as a scoring algorithm by Google. Another scoring algorithm HITS proposed by Kleinberg [9] has the following three significant features (1)-(3). (1) The HITS algorithm gives high scores to pages related to the topic specified by given keywords even if the pages do not contain the keywords. (2) The HITS algorithm can be executed on a PC with a small amount of main memory, because it needs data of a quit e small number of pages, compared with the PageRank algorithm and most of the scoring algorithms used by search engines. (3) The HITS algorithm can be e xecuted on demand, because it needs data small enough to be collected through the network on demand. On the other hand, the PageRank algorithm takes several weeks to collect data, and hence cannot be executed on demand.

The HITS algorithm worked well in the days when it was proposed. Sev-eral HITS-based algorithms have been proposed since [1,10,11,13]. However, the original HITS algorithm and the HITS-based algorithms no longer work well on today X  X  Web due to an increase of spam links. Several methods of finding spam links have recently been developed [4,5, 6], but they require too large data of pages to be executed on demand with a PC. For example, the methods proposed by Fetterly et al. [5,6] require the data of the contents of pages, which are much larger than the data of the links of the pages used by the HITS algorithm.
In this paper, we first propose three methods to find linkfarms by using network information; a linkfarm is a set of spam links which form a densely connected sub-graph of a Web graph; a Web graph is a directed graph whose vertex set is a set of Web pages, and whose edge set is a set of links between pages. Our methods find more linkfarms than the method proposed by Wu and Davison [14]. We then pro-pose a trust-score algorithm to give high scores to pages which are not spam pages with a high probability, by extending the ideas used by the TrustRank algorithm [7]. We then construct four scoring algorithms; the first one is obtained by com-bining our trust-score algorithm with BHITS algorithm proposed by Bharat and Henzinger [1]; the remaining three are obtained by combining each of our three methods of finding linkfarms with the trust-score algorithm and BHITS. We fi-nally evaluate our algorithms and several HITS-based algorithms by experiments.
In order to evaluate various scoring algorithms, we use the  X  X uality of top ten authorities X  found by the algorithm for a given topic; the top ten authorities are pages of the top ten high score given by the algorithm, the quality of top ten au-thorities is measured by the number of pages related to the topic among the top ten authorities, and hence the quality of top ten authorities is at most ten. We examine the quality of top ten authorities by computational experiments using fourteen topics. For almost all the topics, our algorithms find top ten authorities of higher quality than those found by the existing algorithms. Particularly, one of our algorithms, called TaN+BHITS, employing the trust-score algorithm and a method of finding linkfarm by using name servers, finds top ten authorities of the best average quality 8.79, while the existing algorithms find top ten authorities of average quality at most 3.07 (see Table 1 in Section 4).

Our TaN+BHITS algorithm can be used to find pages related to a given topic on today X  X  Web; most of the pages given high score by the algorithm are truly related to a given topic for almost all the topics used in our experiments. Our four algorithms including TaN+BHITS require no data of pages other than the data collected by the original HITS algorithm, and hence can be executed on demand for a given topic on a PC with a small amount of main memory. We first present the definition of a host name and a domain name in Section 2.1, then summarize the original HITS algorithm in Section 2.2, and finally outline the BHITS algorithm proposed by Bharat and Henzinger in Section 2.3. 2.1 Terms Since a term  X  X ost name X  is sometimes confused with a term  X  X omain name, X  we use the following definitions throughout the paper.

The host name of a Web page p is the name of the host containing p .Asahost name of p ,weuseasubstringof p  X  X  URI between http:// and the next slash sym-bol. For example, if a page p has URI http://www.geocities.jp/ken/a.html , then the host name of p is www.geocities.jp .Let domlevel ( p ) be one plus the number of dot symbols in the host name of page p .Thus, domlevel ( p )=3for the page p above.

Divide a host name by dot symbols into a number domlevel ( p ) of substrings, then the i -th substring from the right is called the i -th level domain . For example, if the host name of a page p is www.geocities.jp ,then geocities is the second level domain of p . We say that two pages p and q have the same domain name if either p and q have the same host name or domlevel ( p )= domlevel ( q )  X  3and the i -th level domain of p is equal to the i -th level domain of q for each i ,1  X  i  X  domlevel ( p )  X  1. For example, if page p has URI http://news.infoseek.jp/ and page q has URI http://music.infoseek.jp/ ,then p and q have the same domain name, because domlevel ( p )= domlevel ( q )=3and p and q have the same first and second level domains, jp and infoseek , respectively. On the other hand, if page p has URI http://ask.jp and page q has URI http:// slashdot.jp ,then p and q do not have the same domain, because they do not have the same host name and domlevel ( p )= domlevel ( q )=2. 2.2 Original HITS Algorithm The HITS algorithm proposed by Kleinberg [9] finds authorities and hubs for a topic specified by given keywords. The algorithm regards a page linked from manypagesasan authority , and regards a page having links to many authorities as a hub , as outlined as follows. 1. Let the root set R be a set of top x pages of the result of some search engine 2. Construct a Web graph G =( V, E ), where the vertex set V is a union of R 3. For each vertex v i  X  V ,1  X  i  X | V | ,setan authority score a i ,to1andset 4. Repeat the following procedures (a)-(c) times, where is a given integer 5. Output vectors a and h . Kleinberg usually set = 50, because the vectors a and h almost converge after repeating (a)-(c) in Step 4 fifty times.

Throughout the paper, the  X  X op ten authorities X  found by a HITS-based al-gorithm mean the ten pages of the heighest authority score among the pages found by the algorithm, and we measure the  X  X uality X  of the top ten authorities by the number of pages related to a given topic among the top ten authorities. For example, if the top ten authorities found by a HITS-based algorithm contain seven pages related to a given topic, then the quality of the top ten authorities is seven. Similar measures have been used by several researchers on HITS-based algorithms [1,11].

The original HITS algorithm could find top ten authorities of practically good quality and could be used to find pages related to a given topic in the days when it was proposed. Subsequently, several researchers pointed out a mutual reinforcing problem and a topic drift problem of the original HITS, and pro-posed various HITS-based algorithms with effective solutions to these problems [1,2,8,10,11,12,13,15]. We will describe the mutual reinforcing problem in Section 2.3. The original HITS algorithm sometimes wrongly gives high scores to pages not related to a given topic. This is called a topic drift problem.
The number of pages on the Web has been exponentially increasing since the Web was born, and the so-called spam links have been increasing, too. On today X  X  Web, the HITS algorithm and the variants cannot find top ten authorities of good quality any more due to the increase of spam links.

Some authors [4,5,6] define a spam link as follows: a link from a page p to a page q is a spam link if the content of q is irrelevant to the content of p and the link is created to force a scoring method to give a high score to the site containing the page p . It is difficult to find spam links according to this definition, and hence the authors try to find spam links approximately by using heuristics. For example, Fetterly et al. [5,6] proposed several heuristics to find spam pages. The heuristics require the content information of pages, although the original HITS uses only the link information of pages. Costa Carvalho et al. [4] proposed several heuristics to find spam links by using characteristic graph structures of inter-host links , each between a page in a host and a page in another host. All these heuristics require data of many pages other than the pages used by the original HITS. Thus, the existing methods of finding spam links require much larger data than those required by the original HITS, and hence they are not suitable for our objective of establishing a scoring algorithm which can be executed on demand with a PC. 2.3 BHITS Algorithm The orignal HITS algorithm suffers from the following problem. If a malicious person creates a host containing a number of pages linking to the same page p in another site, then the authority score of the page p becomes unfairly high. One can easily create such a host. Thus, the top ten authorities found by the original HITS algorithm could be made unreliable by a malicious person. This problem is called a mutually reinforcing problem .

Slightly modifying the original HITS algorithm, Bharat and Henzinger [1] proposed the BHITS algorithm, which almost resolves the mutually reinforcing problem. We now introduce several notations to explain their modifications. For each vertex v i inthebaseset V used in the original HITS, let  X   X  ( v i )be { v pages corresponding to vertices in  X   X  ( v i )(or  X  + ( v i ), respectively). For each 1  X  k  X | H + ( v to those in host k . The BHITS algorithm replaces (a) and (b) in Step 4 of the original HITS algorithm by the following (a) and (b) , respectively. (a) For each v i  X  V , a i := ( v (b) For each v i  X  V , h i := ( v
Thus, even if a number of pages in a host link to the same page p , the authority score of the page p computed by the BHITS algorithm does not become unfairly high, and hence the mutually reinforcing problem is almost resolved.
For most of the topics used in their experiments, the BHITS algorithm found top ten authorities of better quality than those obtained by the original HITS algorithm [1]. We will hence construct several variants of the BHITS algorithm instead of the original HITS algorithm. 3.1 Removing Linkfarms Wu and Davison [14] define a linkfarm as a set of spam links which form a densely connected subgraph on a Web graph, and say that a page belongs to a linkfarm if the page is an end of a spam link in the linkfarm. The HITS algorithm gives high authority scores and high hub scores t o pages belonging to a densely connected subgraph, and hence pages belonging to a linkfarm would get high authority score and high hub score. Consequently, the top ten authorities obtained by the HITS algorithm would contain a number of pages belonging to the linkfarm.
Wu and Davison proposed an algorithm for finding linkfarms, and evaluated how effective their algorithm is for improving scoring algorithms. For the evalu-ation, they used a simple scoring algorit hm which gives each page a score equal to the number of links entering to the page. For most of the topics used in their experiments, the simple scoring algorithm could obtain top ten authorities of good quality if it ignores all the links in the linkfarms found by their algorithm. Thus, their algorithm is effective for improving the simple scoring algorithm. However, they did not confirm whether their algorithm is effective or not for improving the HITS-based algorithms, which are more sophisticated than the simple scoring algorithm.
We evaluate how effective the algorithm of Wu and Davison is for improving the BHITS algorithm. Let LF+BHITS be the BHITS algorithm which ignores all the links in the linkfarms found by their algorithm. We will evaluate the quality of top ten authorities found by LF+BHITS in Section 4.

We discover that a typical linkfarm consists of pages sharing some kinds of network information, such as a host name, a domain name, an IP address, and a name server. (Both the IP address of the host containing a given page and the name of the name server used by the host can be easily obtained by several methods including nslookup UNIX command.) (A domain name is defined in Section 2.)
The original HITS algorithm ignores every link between two pages belonging to the same host, but it still suffers from a number of linkfarms. Authors of References [4,5,6] mentioned that a set of spam pages created by a marlicious person frequently shares some kinds of network information even if the pages do not have the same host name. Investigating a number of pages sharing the same host name, domain name, or IP address, we found that they usually share the same name server, too.

We propose an algorithm N+BHITS , which is the BHITS algorithm with the following two modifications: (1) In Step 2 of the original HITS algorithm, remove every link between two (2) Use a name server instead of a host name in Step 4 (a) and (b) of the Let Algorithm I+BHITS be the same as Algorithm N+BHITS except that it uses an IP address instead of a name server. Similarly, let Algorithm D+BHITS be the same as N+BHITS except that it uses a domain name instead of a name server. It is not new ideas to ignore links between two pages sharing the same IP address or domain name [15], but we comp are effectiveness of these ideas with that of the method proposed by Wu and Davison. We will evaluate the quality of top ten authorities found by these algorithms in Section 4. 3.2 Trust-Score Gyongyi et al. [7] proposed the TrustRank algorithm which approximately finds reliable pages , which are not created with malicious motives. The algorithm gives a reliability score to a page on the Web. The main idea used by the algorithm is to note that  X  X  page linked from reliable pages would be reliable. X  This idea is similar to the main idea used by the PageRank [3] algorithm:  X  X  page linked from important pages would be important. X 
The TrustRank algorithm requires a huge number of pages on the Web sim-ilarly as the PageRank algorithm, and it cannot be directly used to score the pages on a small Web graph used by the HITS algorithm. Thus, we cannot directly use the TrustRank algorithm for improving the HITS algorithm.
We propose an algorithm to give a trust-score to every page contained in the base set used by HITS. Employing the ideas of the HITS algorithm and the TrustRank algorithm, we say that a page is reliable if it has links to many reliable pages related to a given topic, and that it would be a good hub page for the topic. For most of the topics used in our preliminary experiments, we found that more than half of the pages in the root set are reliable and related to the given topic. Our trust-score algorithm thus regards a page u as a reliable hub page if the page u links to many pages in the root set, and regards a page v as a reliable authority page if the page v is linked from many reliable hub pages. More precisely, if there are two or more hosts, each containing a page which belongs to the root set and is linked from a page u , then the trust-score algorithm gives u a trust hub score T hub ( u ) equal to the number of these hosts; otherwise, the algorithm gives u a trust hub score T hub ( u ) = 0. The algorithm also gives a page v a trust authority score T auth ( v ) equal to the sum of trust hub scores (divied by |
H + ( u ) | ) of the pages u linking to v .The trust-score of v is its trust authority score normalized by the sum of all trust authority scores. The trust hub score of a page u is a measure to indicate how reliable u is as a hub page, and the trust-score of a page v is a measure to indicate how reliable v is as an authority page. Thus our trust-score algorithm is as follows.

Let R , V and E be the root set, the vertex set and the edge set, respectively, used in the HITS algorithm. 1. For each page u  X  V ,let { s 1 ,s 2 , ..., s k } be the set of all pages that are 3. For each page v  X  V , output T auth ( v ) 3.3 Our Four Scoring Algorithms We propose the following four algorithms using the trust-score algorithm. Let T+BHITS be the algorithm which gives a page p ascore t ( p )+ a ( p ), where t ( p ) is the trust-score of the page p ,and a ( p ) is the authority score of p computed by BHITS. Similarly, let TaI+BHITS , TaD+BHITS ,and TaN+BHITS be the algorithms which give a page p ascore t ( p )+ a ( p ), where a ( p ) is the author-ity score of p computed by I+BHITS, D+BHITS, and N+BHITS, respectively. Using two weight factors x and y , one can construct an algorithm which gives a page p ascore x  X  t ( p )+ y  X  a ( p ). We have made some preliminary experiments varying the weights x and y , and confirmed that, for most of the used topics, top ten authorities of the best quality are obtained when x = y = 1. We will evaluate the quality of top ten authorities found by the four algorithms in Section 4. Table 1 depicts the results of our experiments. For the experiments, we use the following eleven HITS-based algorithms. The first three are existing HITS-based algorithms: HITS, BHITS, and WBHITS proposed by Li et al. [11]; they are ab-breviated as H, B and WB, respectively. The next four algorithms LF+BHITS, D+BHITS, I+BHITS and N+BHITS, abbreviated as LB, DB, IB and NB respec-tively, are presented in Section 3.1, and are variants of the BHITS algorithm us-ing methods of finding linkfarms; LF+BHITS uses Wu and Davison X  X  method, D+BHITS uses a domain name, I+BHITS uses an IP address, and N+BHITS uses a name server. The last four algorithms T+BHITS, TaD+BHITS, TaI+BHITS and TaN+BHITS, abbreviated as T, TaD, TaI and TaN respectively, are our algo-rithms using the trust-score in Section 3.2 ; T+BHITS combines the trust-score al-gorithm with BHITS, and similarly, the three algorithms TaD+BHITS, TaI+BHITS and TaN+BHITS combine the trust-score algorithm with D+BHITS, I+BHITS and N+BHITS, respectively.

Each of the given fourteen topics Topic 1, Topic 2, ..., Topic 14 is specified by one of the following fourteen keywords:  X  X anoe, X   X  X heese, X   X  X 1 (Formula One), X   X  X ardening, X   X  X riomote-Cat (one of the endangered species), X   X  X abuki (Japanese traditional performance), X   X  X onochrome-Photograph, X   X  X ovie, X   X  X lympic, X   X  X ipe-Organ, X   X  X ailway, X   X  X ock-Climbing, X   X  X ennis, X  and  X  X ine. X  For each topic, the root set used in our experiments consists of top two hundred pages of the result of Google for the topic. The results for other topics are simi-lar to those for the topics used in the experiments, and the results obtained by using other search engines are also similar to those obtained by using Google. Each cell in the rows from  X  X opic 1 X  to  X  X opic 14 X  shows the quality of the top ten authorities found by each algorithm for the given topic; as we have already described, the quality of top ten authorities is defined as the number of pages which are related to the given topic and belong to the top ten authorities found by each algorithm. It is judged by manual inspection of human subjects whether a page is truly related to a given topic. For each algorithm,  X  X verage X  row shows the average quality of the top ten authorities obtained for the fourteen topics. For each algorithm,  X  X ufficient X  row shows the number of topics for which the obtained top ten authorities has sufficient quality; we say that the quality of top ten authorities is sufficient if the top ten authorities contain only at most one page not related to the given topic. For example, HITS finds top ten authori-ties of sufficient quality for only two topics among the fourteen topics, and our TaN+BHITS finds top ten authorities of sufficient quality for twelve.
The original HITS algorithm and the BHITS algorithm find top ten authorities containing few pages related to the given topics; the top ten authorities found by HITS contain no related pages for eleven topics among the fourteen topics, and the top ten authorities found by BHITS contain no related pages for eight topics. It was reported that the WBHITS algorithm is one of the best HITS-based algorithms [11], but WBHITS finds top ten authorities containing no related pages for seven topics among the fourteen topics. These three algorithms cannot be used for finding related pages on today X  X  Web.

We say that two hosts host 1 and host 2 are mutually linked if there are both a link from a page in host 1 to a page in host 2 and a link from a page in host 2 to a page in host 1 , and say that a link from a page in a host to a page in another host is a mutual inter-host link if these hosts are mutually linked. For four topics Topic 3, 9, 10 and 12 we found a number of linkfarms, each containing few mutual inter-host links. These linkfarms cannot be found by LF+BHITS using Wu and Davi-son X  X  method of finding linkfarms, because their method can find only linkfarms containing a number of mutual inter-host links [14]. On the other hand, each of the linkfarms consists of links between pages sharing some kind of network information, and hence at least one of our algorithms D+BHITSCI+BHITS, and N+BHITS finds such linkfarms. This is the reason why our proposed algo-rithms D+BHITS, I+BHITS, and N+BHITS find top ten authorities of better quality than those found by LF+BHITS. Thus, our proposed methods of find-ing linkfarms are more effective for improving the BHITS algorithm than Wu and Davison X  X  method. For most of the fourteen topics, N+BHITS finds top ten authorities of better quality than those found by D+BHITS or I+BHITS, and hence the method of finding linkfarms by utilizing the name server is better than the other two methods for improving the BHITS algorithm.

For most of the fourteen topics, our four algorithms using the trust-score algorithm, T+BHITS, TaD+BHITS, TaI+BHITS and TaN+BHITS, find top ten authorities of much better quality than those found by the other algorithms, hence the trust-score algorithm is effective for improving the BHITS algorithm. Particularly, for most of the topics, TaN+BHITS obtains top ten authorities of better quality than those obtained by the other algorithms.
The average quality 8.79 of the top ten authorities found by TaN+BHITS is significantly better than the average quality 1.71, 2.50, and 3.07 of the top ten authorities found by HITS, BHITS, and WBHITS, respectively. TaN+BHITS also finds top ten authorities of sufficient quality for most of the topics, twelve topics among the fourteen, although the existing HITS-based algorithms, HITS, BHITS and WBHITS, find top ten authorities of sufficient quality for very few topics. For each of the following four topics Topic 6, 9, 10 and 12 the top ten results of Google contain some pages not related to the topic, but all the pages in the top ten authorities found by TaN+BHITS are related to the topic.
The HITS algorithm finds some of the related pages which cannot be found by Google, as we described in Section 1. We now evaluate how many such pages the eleven algorithms find. For each algorithm, the bottom row,  X  X on-Root, X  of Table 1 denotes the total number of pages satisfying the following three condi-tions (1)-(3): (1) they are related to the given topic; (2) they belong to the top ten authorities found by the algorithm; and (3) they do not belong to the root set. If an algorithm has a large value in the bottom row, then the algorithm finds a number of related pages which could not be found by Google, because the root set consists of the top two hundred pages obtained by Google.

One can observe the following three facts (a)-(c): (a) the algorithms using our methods of finding linkfarms, DB, IB, NB, TaD, TaI, and TaN, have larger value in the bottom row than the existing algorithms, H, B, and WB; (b) DB has larger value in the bottom row than TaD which is the algorithm obtained by combining DB with the trust-score. Similarly, IB (or NB) has larger value than TaI (or TaN) which is the algorithm combining IB (or NB, respectively) with the trust-score; and (c) TaN has larger value in the bottom row than the other algorithms using the trust-score.

The fact (a) implies that our methods of finding linkfarms are effective for finding related pages which cannot be found by Google. The fact (b) can be explained as follows: the trust-score algorithm frequently gives high scores to pages belonging to the root set, and hence all the algorithms using the trust-score frequently find top ten authorities containing a number of pages belonging to the root set; consequently these top ten authorities contain few pages which do not belong to the root set; hence TaD (or TaI, TaN) using the trust-score has smaller value in the bottom row than DB (or IB, NB, respectively) without the trust-score. As we described above, the algorithms with the trust-score find top ten authorities of better quality than those found by the algorithms without the trust-score, and thus the fact (b) implies a trade-off between the quality of top ten authorities and the value in the bottom row. The quality of top ten authorities is generally more important than the value in the bottom row, and hence the fact (c) implies that TaN+BHITS is the best choice for finding both top ten authorities of sufficient quality and a number of related pages which cannot be found by Google.
 We now discuss a remaining problem of our HITS-based algorithms. For Topic 2, all the algorithms except T+BHITS find top ten authorities containing no related pages. On the Web graph used by T+BHITS for Topic 2, there are several links emanating from pages with large trust hub scores and entering to some related pages in the top ten authorities, and hence these related pages are given high trust scores. Most of these links join pages sharing some kind of network information other than a host name. These links are ignored by DB, IB, NB, TaD, TaI, and TaN, and hence the top ten authorities found by these algorithms do not contain such related pages. In other words, these algorithms wrongly regard the links as linkfarms and remove them. It is one of the remaining problems to distinguish such links from actual linkfarms.
 For each of the fourteen topics, all the algorithms use the same vertex set. On the other hand, each of the algorithms uses an edge set slightly different from the edge sets used by other algorithms, because each algorithm ignores several links in its own manner. H, B, WB and T use the same edge set for each topic, because all of them ignores only links between pages having the same host name. Similarly, each of the following three pairs of algorithms (DB, TaD), (IB, TaI), and (NB, TaN) uses the same edge set, which excludes links between pages having the same domain name, IP address, and name server, respectively.
The amount of memory used by each of our proposed algorithms is almost equal to that used by the original HITS algorithm. Most part of the running time of the HITS-based algorithms is spent to collect data of pages through the Internet. Every algorithm uses data of the same set of pages, and hence the running times of our propsed algorithms are almost equal to that of the original HITS algorithms. In our experiments, all the algorithms outputs top ten authorities in a few seconds once the r equired data is collected through the Internet. The algorithms use about 10MB of memory for the Topic 8, which is larger than the amount of memory used for any of other topics. Our scor-ing algorithm TaN+BHITS can find top ten authorities of good quality on today X  X  Web and can be executed on demand with a PC. The algorithm par-ticularly finds top ten authorities of the best quality for most of the used topics. We have proposed several improved variants of the HITS algorithm, by proposing the trust-score algorithm and three methods of finding linkfarms. One of our algorithms, named TaN+BHITS, finds top ten authorities of much better quality than those found by the existing algorithms, and the top ten authorities found by TaN+BHITS contain a number of related pages which cannot be found by Google. We have hence succeeded in develo ping a HITS-based algorithm which can find top ten authorities of sufficiently good quality on today X  X  Web. Our algorithms take almost the same amount of memory and running time as those taken by the original HITS algorithm, and hence our algorithms can be executed on demand with a PC having a small amount of main memory.
