 It has long been recognized that search queries are often broad and ambiguous. Even when subm itting the same query, di ff erent users may have di ff erent search intents. Moreover, the intents are dynam-ically evolving. Some intents are constantly popular with users, others are more bursty. We propose a method for mining dynamic query intents from search query logs. By regarding the query logs as a data stream, we identify constant intents while quickly captur-ing new bursty intents. To evaluate the accuracy and e ffi ciency of our method, we conducted experiments using 50 topics from the NTCIR INTENT-9 data and additional fi ve popular topics, all sup-plemented with six-month query logs from a commercial search engine. Our results show that our method can accurately capture new intents with short response time.
 H.3 [ INFORMATION STORAGE AND RETRIEVAL ]: Infor-mation Search and Retrieval Intent Mining, Stream Data Mining, Search Query Log
Understanding di ff erent possible intents of a given input query is a fundamental step for e ff ective search, in particular for query suggestion, diversi fi ed search and personalized search. It has been observed that the intents of a given query may dynamically evolve [1], because: 1) New intents may emerge to represent new events that are relevant to the query. 2) An existing query term may later acquire a new meaning (e.g. many people today refer to  X  X pple X  as a company). 3) Some intents are inherently time-dependent (e.g.  X  X ady gaga tour 2013 X ). We observe that there are two types of intents: those that are constant along the timeline, and those that are bursty.

Most existing methods on query intent mining try to identify in-tents in a batch fashion. Hence, they may not be able to capture bursty intents in a timely manner, especially when the bursts occur within a very short time range. This means that applications such as query suggestion and diversi fi ed search may not be able to quickly respond to these bursts.

In this paper, we propose to dynamically mine query intents from search query logs. By regarding query logs as a constantly incom-ing stream, we dynamically capture which clicked URLs belong to existing intents (mostly constant intents) and which are associat-ed with new intents (possibly bursty intents). Our goal is to mine both types of intents accurately, with an emphasis on timely detec-tion of bursty intents. To evaluate the accuracy and e ffi ciency of our method, we conducted experiments using 50 topics from the NTCIR INTENT-9 data and additional fi ve popular topics, all sup-plemented with six-month query logs from a commercial search engine. Our results show that our method can accurately capture new intents with short response time.
As search queries are often short, ambiguous and / or underspeci-fi ed, TREC [2] and NTCIR [3] have ran tasks for intent mining and search result diversi fi cation, and released test collections for eval-uation. Existing query intent mining and query suggestion meth-ods utilize search results contents (e.g. [4]), query-URL bipartite graphs (e.g. [5]) and search sessions (e.g. [6]). However, most of these methods work in a batch, which may not be su ffi cien-t for responding to bursty intents in a timely manner. There are also time-based approaches that are related to but di ff erent from our work. For example, Mei et al. [7] proposed to discover spa-tiotemporal theme patterns from weblogs; Cao et al. [8] explored context-aware query suggestion; Shokouhi and Radinsky [9] dis-cussed time-aware query autocompletion. But their methods cannot be directly applied to our problem, where the tasks are di ff erent.
In our framework, each search intent I that lies behind a given query Q is represented as a set of URLs, i.e. I = { u 1 , u Further, we de fi ne p ( I ) as the estimated proportion of users with intent I when searching with Q . Our method takes the search log timestamp, Q is the search query and U is a set of clicked URLs.
The fi rst step of our algorithm takes the fi rst portion of the query log stream and processes it in a batch manner: the time interval for this portion is denoted by T start (See Figure 1(a)). In this step, as no previous information is available, we adopt a clustering approach to fi nd most of the constant intents, as will be described later. After Step 1, our algorithm processes the remaining query log stream iteratively as follows: Step 2. As query arrival rate di ff ers across the timeline, we dynamically divide the stream into variable-length partitions (Figure 1(a)). Step 3. From each partition obtained in the t Figure 1: The Procedure of Dynamic Intent Mining for a Par-tition ( X  X o Yan X  in this example is a Chinese writer who re-ceived the Nobel Prize in 2012) previous step, we incrementally mine a set of intents (Figure 1(b)). Some of them will be the same as those already discovered; others will be newly discovered intents. Step 4. Update existing intents in the global intent list, and add new intents to it (Figure 1(c)). Below, we will describe these four steps in more detail.
In batch intent mining , we employ a clustering based method to group URLs into clusters, in the hope that each URL cluster refers to one intent while di ff erent URL clusters refer to di ff erent intents. Most constant intents can be identi fi ed in this stage.
Given a query Q ,we fi rst construct a Query-URL bipartite after removing duplicate queries and URLs. We collect URLs that can be reached after three-hop transitions on the bipartite and treat them as relevant; within all queries that can be reached on the second hop, we only reserve queries that contain Q [10].

The fundamental problem in clustering URLs is to measure the similarity of two URLs with respect to their intents. With the Query-URL bipartite structure, we adopt three types of features: 1) Neighbor URLs: For a given clicked URL, its neighbor URLs are the clicked URLs that have common queries with it on the bi-partite graphs. 2) Query terms: For a given clicked URL, the set of all associated queries can be obtained on the bipartite graphs. Then, the set of unique query terms are obtained, excluding those from the original query Q. 3) Webpage title terms: For recently cre-ated URLs, we might obtain very few neighbors and query terms. To compensate for this, we also use the terms extracted from the URL X  X  title fi eld. (We do not use the entire webpage content in order to avoid noise and high computational cost.) We represent a URL with the above features with through Vector Space Model , namely, a vector of its neighbor URLs ( of query terms ( term in cy (IDF) 1 . With u = ( N , T , W ), the intent similarity between two URLs is computed as: According to the similarity, we adopt the agglomerative clustering method [5] to group URLs into clusters. http: // www.ldc.upenn.edu / Catalog / CatalogEntry.jsp?catalogId = LDC2010T06
The purpose of this step is to fi nd an appropriate portion of a query log stream from which we can mine intents. Algorithm 1 de-scribes how we perform dynamic partitioning of the log stream. It monitors the query arrival rate r in real-time to determine current partition length, so that we generate short partitions when the ar-rival rate is high, and long partitions when the arrival rate is low. Algorithm 1 Dynamic query log stream partitioning Input: A stream of query logs Output: Log stream partitions C 1: Initialization: the current partition C =  X  , 2: Accept the next query entry e : &lt; t , Q , U &gt; , E = E + 1 3: Set the stream rate: r = E / ( t  X  t 0 ) 4: while t  X  t 0 &lt; T start do 5: go to step 2 6: end while 7: if | C | X  r  X  T then 8: Output C 9: Set C =  X  10: else 11: C = C { e } 12: end if 13: Go to step 2
In incremental intent mining , we aim at capturing bursting in-tents and enriching existing intents. For a subsequent partition of query log entries, we fi rst organize them as a Query-URL bipar-tite, and then predict whether each URL in the bipartite belongs to existing intents or indicates the rise of new intents.

Speci fi cally, given a new URL u new and its previous detected in-tents I = { I 1 , I 2 ,..., I k } , u new indicates a new intent if u belong to any existing intent. For all such URLs indicating new intents, we adopt the clustering method used in batch intent mining to generate the new intents.

For other URLs which belong to existing intents, the intent pre-diction of u new can be modeled as a multi-classi fi cation problem: As each I i consists a set of URLs { u 1 , u 2 ,..., u m } , we propose to model an intent by the features instead of individual URLs: Since intents and URLs are modeled as a uni fi ed feature vector now, the probability that u new belongs to I i can be computed as:
In this section, we discuss how to update intents and each intent X  X  proportion when a new p artition is min ed. Suppose we have detect-( t while other URLs not included in A new are recognized as belonging to existing intents. The procedure of intent update from A is illustrated in Algorithm 2. For the example in Figure 1 (c), three update operations take place at t n : 1) the existing intent  X  X o Yan X  X  Novel X  is enriched with a new URL ( URL 3 ); 2) a new intent  X  X o Yan Nobel Prize X  is added to the intent set; 3) the proportions of all intents are recalculated.
 Algorithm 2 Intent update after incrementally mining a partition Input: A n  X  1 = { I 1 ,..., I k } Output: A n = { I 1 ,..., I k , I k + 1 ,..., I k + l } , with p ( I 1: for each u i in U old do 2: I j = arg max I 3: I j = I j { u i } 4: end for 6: for each I j in A n do 7: C ( I j ) = the total clicks of URLs in I j 9: end for
To evaluate the accuracy of our method, we used 50 queries from the NTCIR-9 INTENT Chinese query set, after eliminating  X  X lear X  queries [3] and tail queries. For each query, we obtained 100 URLs from a commercial Chinese search engine log (Sep. 2012-Mar. 2013) as follows. First, for each query X  X  search log entries, we fi rst divided them into 10 bins along the timeline, and then randomly selected 10 URLs from the top 20% most clicked URLs from each interval. We hired fi ve assessors to label each of these URLs with one of the intents from the NTCIR data set (or  X  X ew X  if none of them applied). Each assessor handled 20 queries (2000 URLs), so each of our 5000 URLs (50 queries) were labeled twice and the inter-assessor disagreements were resolved through discussions.
We have also constructed a dataset of fi ve hot topics in 2012, which are:  X  Style (Gangnam Style), (London Olympics), (Mo Yan), (A Bite of China), tention and evolved very fast in 2012, so this dataset is expected to test whether our method can accurately and e ffi ciently capture the fast changing intents. The basic information of our dataset is shown in Table 1. series on the history of food, eating, and cooking in China.  X  X he Voice of China X  is a popular Chinese reality talent show.
In our method, intents are represented as URL clusters, so we use the b-cubed F1 [11] measure to evaluate the accuracy of our method. We used both online F1 and retrospective F1 measure: Online F1 ( F 1 o ) evaluates the accuracy of new intents discovered accuracy of all intents found so far. Here, the ground truth is the set of clusters de fi ned based on our URL labels, where each URL belongs to exactly one intent. Figure 2 illustrates the F 1 o score of 50NTCIR along the timeline. mining, where T start = 20 days. As each query has di ff erent size of partitions, we show the average F 1 o of the 50 queries in each week in the following bars. It can be observed that the F 1 o for T batch intent mining) is much lower than those for the later partitions (i.e. incremental intent mining), because constant intents tend to be less speci fi c than bursty intents, and the clicked URLs represent a mixture of di ff erent sub-intents. For example, the constant intents of  X  X o Yan X  X  biography X ,  X  X o Yan X  X  blog X  and  X  X o Yan quotes X  are often mixed in one search. On the other hand, a bursty intent is often captured within an interval in which a corresponding event occurs. Bursty intents tend to be quite speci fi c and responsive to the event that occurred, and the F 1 o scores for incremental intent mining are more promising, being in the 0.8-1.0 range.
To the best of our knowledge, our work is the fi rst to have fo-cused on dynamic intent mining, so we choose a typical batch in-tent mining approach proposed by Wang and Zhai [4] as baseline. The core step of their method is to perform clustering on the clicked URLs of the query and its similar queries with the features of web-page titles and snippets. The method takes the whole data as in-put, and produces URL clusters in batch. We evaluate both their batch method and our fi nal result (after the fi nal intent update) us-ing F 1 r . The result reported in Table 2 shows that our method can signi fi cantly outperform the baseline. The reasons of the improve-ment are two-fold: 1) The useful features of  X  X eighbor URLs X  and  X  X uery terms X  is not adopted by baseline. 2) The baseline does not distinguish between constant and bursty intents. They may merge a constant intent and a bursty intent if their clicked URLs share common terms in titles and snippets.
We further evaluate our method on 5HotTopics for e ffi ciency analysis. We implement our method on a x64 PC with Intel Core i7-2600 CPU @ 3.40GHz 8 cores an d 8.00GB Memory. Setting the expected partition  X  T as one week, the performance is shown in Ta-ble 3.  X  X o Yan X  has been divided into 43 partitions, and the short-Table 2: Retrospective F1 Comparison on 50NTCIR: our method has statistically signi fi cant gain over the baseline with a two-tailed t-test (p &lt; 0.01), indicated by  X  .
 est partition is only 15 minutes on the peak day: Figure 3 shows the result of our dynamic partitioning fo r this query.  X  X angnam Style X  and  X  X  Bite of China X  receives constant attention, while  X  X ondon Olympics X  and  X  X he Voice of China X  are after the peak in our ex-perimental time period. In our experiment, each update of a parti-tion takes about 20 seconds to 10 minutes, and the total time cost is also acceptable for large-scale applications.

Figure 4 shows the intents mined for the query  X  X o Yan X  over a timeline. The y-axis shows the value of p as estimated by Algorith-m2,whichre fl ects popularity. At fi rst, users are interested in Mo Yan X  X  novels and bio. However, when he received the Nobel Prize on Oct. 11th, 2012, the  X  X ovel prize X  intent bursts. Moreover, af-ter a while, a new intent ( X  X nterview with Mo Yan X ) emerges. This example suggests that our approach of identifying constant intents fi rst and then capturing bursty intents incrementally is useful.
In this paper, we proposed a novel dynamic intent mining ap-proach, which can capture the changing intents and popularity of each intent in time. The experimental results on two data sets show promising results on both the e ff ective and e ffi ciency of the method. In the future, we consider to apply the method on more applications such as dynamic query suggestion and search result diversi fi cation. This research is supported by the National Science Foundation of China under Grant Nos. 61221063, 91118005, 91218301; Na-tional High Technology Research and Development Program of China under Grant No. 2012AA011003; Key Projects in the Na-tional Science and Technology P illar Program under Grant Nos. 2011BAK08B02; Cheung Kong Scholar X  X  Program; XJTU-360 co-operate project  X  X ersonalized Search X . [1] Anagha Kulkarni, Jaime Teevan, Krysta M Svore, and [2] Charles L. A. Clarke, Nick Craswell, and Ian Soboro ff . [3] Ruihua Song, Min Zhang, Tetsuya Sakai, Makoto P Kato, [4] Xuanhui Wang and Chengxiang Zhai. Learn from web [5] Doug Beeferman and Adam L. Berger. Agglomerative [6] Filip Radlinski, Martin Szummer, and Nick Craswell. [7] Qiaozhu Mei, Chao Liu, Hang Su, and ChengXiang Zhai. A [8] Huanhuan Cao, Daxin Jiang, Jian Pei, Qi He, Zhen Liao, [9] Milad Shokouhi and Kira Radinsky. Time-sensitive query [10] Yunhua Hu, Yanan Qian, Hang Li, Daxin Jiang, Jian Pei, and [11] Enrique Amig X , Julio Gonzalo, Javier Artiles, and Felisa
