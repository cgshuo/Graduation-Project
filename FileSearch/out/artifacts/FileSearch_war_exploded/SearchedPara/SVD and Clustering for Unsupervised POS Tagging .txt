 While supervised approaches are able to solve the part of speech (POS) tagging problem with over 97% accuracy (Collins 2002; Toutanova et al. 2003), unsupervised algorithms perform con siderably less well. These models attempt to tag text without resources such as an annotated cor pus, a dictionary, etc. The use of singular value decomposition (SVD) for this problem was in troduced in Sch X tze (1995). Subsequently, a number of methods for POS tagging without a dictionary were examined, e.g., by Clark (2000), Clark (2003), Haghighi and Klein (2006), John son (2007), Goldwater and Griffiths (2007), Gao and Johnson (2008), and Gra X a et al. (2009). The latter two, using Hidden Markov Models (HMMs), exhibit the highest performances to date for fully unsupervised POS tagging. 
The revisited SVD based approach presented here, which we call  X  X wo step SVD X  or SVD2, has four important characteristics. First, it achieves state of the art tagging accuracy. Second, it requires drastically less computational effort than the best currently available models. Third, it demonstrates that state of the art accu racy can be realized without disambiguation, i.e. , without attempting to assign different tags to dif ferent tokens of the same type. Finally, with no significant increase in computational cost, SVD2 can create much finer grained labelings than typ ically produced by other algorithms. When com bined with some minimal supervision in post processing, this makes the approach useful for tagging languages that lack the resources re quired by fully supervised models. Following the original work of Sch X tze (1995), we begin by constructing a right context matrix, R , and a left context matrix, L . R ij counts the number of times in the corpus a token of word type i is immediately followed by a token of word type j . Similarly, L ij counts the number of times a token of type i is preceded by a token of type j . We truncate these matrices, including, in the right and left contexts, only the w 1 most fre quent word types. The resulting L and R are of dimension N types  X  w 1 , where N types is the number of word types (spelling forms) in the corpus, and w is set to 1000. (The full N types  X  N types context matrices satisfy R = L T .) 
Next, both context matrices are factored using singular value decomposition: 
The diagonal matrices S L and S R (each of rank 1000) are reduced down to rank r 1 = 100 by re placing the 900 smallest singular values in each matrix with zeros, yielding S L * and S R * . We then form a pair of latent descriptor matrices defined by: 
Row i in matrix L * (resp. R * ) is the left (resp. right) latent descriptor for word type i . We next include a normalization step in which each row in each of L * and R * is scaled to unit length, yielding matrices L ** and R ** . Finally, we form a single descriptor matrix D by concatenating these matrices into D = [ L ** R ** ]. Row i in matrix D is the complete latent descriptor for word type i ; this latent descriptor sits on the Cartesian produc t of two 100 dimensional unit spheres, hereafter the 2-sphere . 
We next categorize these descriptors into k = 500 groups, using a k means clustering algo rithm. Centroid initialization is done by placing the k initial centroids on the descriptors of the k most frequent words in the corpus. As the de scriptors sit on the 2 sphere, we measure the proximity of a descriptor to a centroid by the dot product between them; this is equal to the sum of the cosines of the angles X  X omputed on the left and right parts X  X etween them. We update each cluster X  X  centroid as the weighted average of its constituents, the weight being the frequency of the word type; the centroids are then scaled, so they sit on the 2 sphere. Typically, only a few dozen iterations are required for full convergence of the clustering algorithm. We then apply a second pass of this entire SVD and clustering procedure. In this second pass, we use the k 1 = 500 clusters from the first iteration to assemble a new pair of context ma trices. Now, R ij counts all the cluster j ( j =1... k words to the right of word i , and L ij counts all the cluster j words to the left of word i . The new ma trices L and R have dimension N types  X  k 1 . As in the first pass, we perform reduced rank SVD, this time down to rank r 2 = 300, and we again normalize the descriptors to unit length, yielding a new pair of latent descriptor matrices L ** and R ** . Finally, we concatenate L ** and R ** into a single matrix of descriptors, and cluster these descriptors into k 2 groups, where k 2 is the desired number of induced tags. We use the same weighted k means algorithm as in the first pass, again placing the k initial centroids on the de scriptors of the k most frequent words in the cor pus. The final tag of any token in the corpus is the cluster number of its type. We ran the SVD2 algorithm described above on the full Wall Street Journal part of the Penn Treebank (1,173,766 tokens). Capitalization was ignored, resulting in N types = 43,766, with only a minor effect on accuracy. Evaluation was done against the POS tag annotations of the 45 tag PTB tagset (hereafter PTB45), and against the Smith and Eisner (2005) coarse version of the PTB tagset (hereafter PTB17). We selected the three evaluation criteria of Gao and Johnson (2008): M to 1, 1 to 1, and VI. M to 1 and 1 to 1 are the tagging accuracies under the best many to one map and the greedy one to one map re spectively; VI is a map free information theoretic criterion X  X ee Gao and Johnson (2008) for details. Although we find M to 1 to be the most reliable criterion of the three, we include the other two criteria for completeness. 
In addition to the best M to 1 map, we also employ here, for large values of k 2 , a prototype-based M to 1 map . To construct this map, we first find, for each induced tag t , the word type with which it co occurs most frequently; we call this word type the prototype of t . We then query the annotated data for the most common gold tag for each prototype, and we map induced tag t to this gold tag. This prototype based M to 1 map produces accuracy scores no greater X  X ypically lower X  X han the best M to 1 map. We discuss the value of this approach as a minimally supervised post processing step in Section 5. Low-k performance. Here we present the per formance of the SVD2 model when k 2 , the num ber of induced tags, is the same or roughly the same as the number of tags in the gold stan dard X  X ence small. Table 1 compares the per formance of SVD2 to other leading models. Fol lowing Gao and Johnson (2008), the number of induced tags is 17 for PTB17 evaluation and 50 for PTB45 evaluation. Thus, with the exception of Gra X a et al. (2009) who use 45 induced tags for PTB45, the number of induced tags is the same across each column of Table 1. bly to the HMM models. Note that SVD2 is a deterministic algorithm. The table shows, in pa rentheses, the standard deviations reported in Gra X a et al. (2009). For the sake of comparison with Gra X a et al. (2009), we also note that, with k = 45, SVD2 scores 0.659 on PTB45. The NVI scores (Reichart and Rappoport 2009) corres ponding to the VI scores for SVD2 are 0.938 for PTB17 and 0.885 for PTB45. To examine the sensitivity of the algorithm to its four parameters , w , r 1 , k 1 , and r 2 , we changed each of these para meters separately by a multiplicative factor of either 0.5 or 2; in neither case did M to 1 accura cy drop by more than 0.014. fact that the SVD2 tagger is mathematically much simpler than the other models. Our MAT LAB implementation of SVD2 takes only a few minutes to run on a desktop computer, in contrast to HMM training times of several hours or days (Gao and Johnson 2008; Johnson 2007). High-k performance. Not suffering from the same computational limitations as other models, SVD2 can easily accommodate high numbers of induced tags, resulting in fine grained labelings. The value of this flexibility is discussed in the next section. Figure 1 shows, as a function of k 2 , the tagging accuracy of SVD2 under both the best and the prototype based M to 1 maps (see Section 3), for both the PTB45 and the PTB17 tagsets. The horizontal one tag per word type line in each panel is the theoretical upper limit for tagging accuracy in non disambiguating models (such as SVD2). This limit is the fraction of all tokens in the corpus whose gold tag is the most frequent for their type. At the heart of the algorithm presented here is the reduced rank SVD method of Sch X tze (1995), which transforms bigram counts into la tent descriptors. In view of the present work, which achieves state of the art performance when evaluation is done with the criteria now in common use, Sch X tze's original work should rightly be praised as ahead of its time. The SVD2 model presented here differs from Sch X tze's work in many details of implementation X  X ot all of which are explicitly specified in Sch X tze (1995). In what follows, we discuss the features of SVD2 that are most critical to its performance. Failure to incorporate any one of them signifi 
Figure 1. Performance of the SVD2 algo rithm as a function of the number of induced tags. Top: PTB45; bottom: PTB17. Each plot shows the tagging accuracy under the best and the prototype based M to 1 maps, as well as the upper limit for non disambiguating taggers. cantly reduces the performance of the algorithm (M to 1 reduced by 0.04 to 0.08). 
First, the reduced rank left singular vectors (for the right and left context matrices) are scaled, i.e. , multiplied, by the singular values. While the resulting descriptors, the rows of L * and R * , live in a much lower dimensional space than the original context vectors, they are mapped by an angle preserving map (defined by the matrices of right singular vectors V L and V R ) into vectors in the original space. These mapped vectors best approximate (in the least squares sense) the original context vectors; they have the same geometric relationships as their equivalent high dimensional images, making them good candidates for the role of word type descriptors. 
A second important feature of the SVD2 algo rithm is the unit length normalization of the la tent descriptors, along with the computation of cluster centroids as the weighted averages of their constituent vectors. Thanks to this com bined device, rare words are treated equally to frequent words regarding the length of their de scriptor vectors, yet contribute less to the place ment of centroids. clustering algorithms is the dependency of the outcome on the initial X  X sually random X  placement of centroids, our initialization of the k centroids as the descriptors of the k most fre quent word types in the corpus makes the algo rithm fully deterministic, and improves its per formance substantially: M to 1 PTB45 by 0.043, M to 1 PTB17 by 0.063. 
As noted in the Results section, SVD2 is fairly robust to changes in all four parameters w 1 , r 1 , k and r 2 . The values used here were obtained by a coarse, greedy strategy, where each parameter was optimized independently. It is worth noting that dispensing with the second pass altogether, i.e. , clustering directly the latent descriptor vec tors obtained in the first pass into the desired number of induced tags, results in a drop of Many to 1 score of only 0.021 for the PTB45 tagset and 0.009 for the PTB17 tagset. Disambiguation. An obvious limitation of SVD2 is that it is a non disambiguating tagger, assigning the same label to all tokens of a type. However, this limitation per se is unlikely to be the main obstacle to the improvement of low k performance, since, as is well known, the theo retical upper limit for the tagging accuracy of non disambiguating models (shown in Fig. 1) is much higher than the current state of the art for unsupervised taggers, whether disambiguating or not. 
To further gain insight into how successful current models are at disambiguating when they have the power to do so, we examined a collec tion of HMM VB runs (Gao and Johnson 2008) and asked how the accuracy scores would change if, after training was completed, the model were forced to assign the same label to all tokens of the same type. To answer this question, we de termined, for each word type, the modal HMM state, i.e. , the state most frequently assigned by the HMM to tokens of that type. We then re labeled all words with their modal label. The ef fect of thus eliminating the disambiguation ca pacity of the model was to slightly increase the tagging accuracy under the best M to 1 map for every HMM VB run (the average increase was 0.026 for PTB17, and 0.015 for PTB45). We view this as a further indication that, in the cur rent state of the art and with regards to tagging accuracy, limiting oneself to non disambiguating models may not adversely affect performance. benefit an approach such as SVD2. Indeed, on difficult learning tasks, simpler models often be have better than more powerful ones (Geman et al. 1992). HMMs are powerful since they can, in theory, induce both a system of tags and a system of contextual patterns that allow them to disam biguate word types in terms of these tags. How ever, carrying out both of these unsupervised learning tasks at once is problematic in view of the very large number of parameters to be esti mated compared to the size of the training data set. 
The POS tagging subtask of disambiguation may then be construed as a challenge in its own right: demonstrate effective disambiguation in an unsupervised model. Specifically, show that tag ging accuracy decreases when the model's dis ambiguation capacity is removed, by re labeling all tokens with their modal label, defined above. 
We believe that the SVD2 algorithm presented here could provide a launching pad for an ap proach that would successfully address the dis ambiguation challenge. It would do so by allow ing a gradual and carefully controlled amount of ambiguity into an initially non disambiguating model. This is left for future work. Fine-grained labeling. An important feature of the SVD2 algorithm is its ability to produce a fine grained labeling of the data, using a number of clusters much larger than the number of tags in a syntax motivated POS tag system. Such fine grained labelings can capture additional lin guistic features. To achieve a fine grained labe ling, only the final clustering step in the SVD2 algorithm needs to be changed; the computation al cost this entails is negligible. A high quality fine grained labeling, such as achieved by the SVD2 approach, may be of practical interest as an input to various types of unsupervised gram mar induction algorithms (Headden et al. 2008). This application is left for future work. Prototype-based tagging. One potentially im portant practical application of a high quality fine grained labeling is its use for languages which lack any kind of annotated data. By first applying the SVD2 algorithm, word types are grouped together into a few hundred clusters. Then, a prototype word is automatically ex tracted from each cluster. This produces, in a completely unsupervised way, a list of only a few hundred words that need to be hand tagged by an expert. The results shown in Fig. 1 indicate that these prototype tags can then be used to tag the entire corpus with only a minor decrease in accuracy compared to the best M to 1 map X  X he construction of which requires a fully annotated corpus. Fig. 1 also indicates that, with only a few hundred prototypes, the gap left between the ac curacy thus achieved and the upper bound for non disambiguating models is fairly small. 
