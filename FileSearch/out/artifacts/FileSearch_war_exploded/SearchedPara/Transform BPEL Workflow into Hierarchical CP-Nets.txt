 Web services represent autonomous services with clear service definitions. Interaction with web services is possible through their service definitions, which can be made available in Web Services Description language (WSDL)[1]. Individual service definitions may represent limited business functionality. However, it is possible to compose functionality offered by different individual services, likely from different service providers, into a composite service represented as business process workflow. Accordingly, a current trend is to express the logic of a composite web service using a business process modeling language tailored for web services. A landscape of such languages such as Business Process Execution Language for Web Services (WS-BPEL, or BPEL)[2], Business Process Modeling Language (BPML)[3] and Web Service Choreography Interface (WSCI)[4] has emerged and is continuously being enriched with new proposals from different vendors and coalitions. Practical experience indicates that the definition of real world Web services composition is a complex and error-prone process. However, all these proposals still remain at the descriptive level, without providing any kind of mechanisms or tool support for verifying the composition specified in the proposed notations. 
Therefore, there is a growing interest fo r the verification techniques which enable designers to test and repair design errors even before actual running of the service, or allow designers to detect erroneous properties (such as deadlock and livelock) and formally verify whether the service process design does have certain desired properties (such as consistency with the conversation protocols of partner service). 
In this paper, we X  X e interested in how much the Colored Petri Nets (CP-nets) [5] Web services composition. As an example, to show the effectiveness of our technique, we pick up BPEL and translate a specification written in it into CP-nets in specification by the existing specialized CP -net tools such as Design/CPN[6] and CPN tools [7], which are two outstanding tools with a variety of analysis techniques and computing tools for CP-nets. So we make tool support available for and analyzing and verifying BPEL composition. In the literature, a number of approaches to verify programs have been proposed. They can be part into two basic categories: One can translate a program into the input language of an existing verification tool; one can develop a new tool that can handle the program directly. For a discussion of the advantages and the disadvantages of the two approaches, the readers can refer to [20]. Next, we will discuss verification tools for Web Services composition that are closely related to ours. 
Most of existing approaches to verify business process are based on model checking techniques [8-12]. In [8], Nakajima describes how to use the SPIN model checker to verify web service orchestration. In order to do the verification using SPIN, business processes are first translated into Promela, the specification language provided by SPIN. The language used to compose Web Services is the Web Services Flow Language (WSFL) [21] which is one of BPEL X  X  predecessors. In [9], Karamanolis and his group translate business processes into FSP processes and use the LTSA toolkit [22] for model checking. The LTSA toolkit allows the user to specify properties in terms of deterministic FSP-processes. Similarly, Foster and his group [10] describe a BPEL plug-in for the LTSA toolkit. They translate BPEL program into FSP-processes and subsequently use the LTSA toolkit to verify the FSP-processes. In [11], Koehler, Kumaran and Tirenni model business processes as nondeterministic automata with state variables and transition guards. These automata are subsequently translated into the input language of the model checker NuSMV[23]. Koehler et al show how NuSMV can be exploited to detect termination of business processes. In [12], Koshkina shows how to exploit an existing verification tool CWB[24] supporting techniques like model checking, preorder checking and equivalence checking to model and verify Web Services composition. Similarly, in [13], Schroeder presents a translation of business processes into CCS. Subsequently, the existing verification tool CWB can be used for verification. 
Using Petri nets to model and verify business processes is another choice. For the works of modeling business processes by means of Petri nets, we refer the reader to Van der Aalst [14], Martens [15], Narayanan [16] and Stahl [17]. 
In [14], workflow nets, a class of Petri nets, have been introduced for the representation and verification of workflow processes. In [15], Axel Martens translate BPEL to a Petri Net semantic. Due to the mapping into Petri nets, several analysis methods are applicable to BPEL processes models: the verification of usability of one Web service, the verification of compatibility of two Web services, the automatic generation of an abstract process model for a given Web service, and the verification of simulation and consistency. All presented algorithms are implemented within the prototype Wombat4ws [25]. In [16], Narayanan and his group take the DAML-S ontology for describing the capabilities of Web services and define the semantics for a relevant subset of DAML-S in terms of a first-order logical language. With the semantics in hand, they encode service descriptions in Petri Net formalism and provide decision procedures for Web service simulation, verification and composition. In [17], Christian Stahl and his group translate BPEL business process into a pattern-based Petri net semantic. Then they used the tool LoLA [19] for validating the semantic as well as for proving relevant properties of the particular process. In [18], Adam and his group develop a Petri net-based approach that uses several structural properties for identifying inconsistent dependency specification in a workflow, testing for its safe termination, and checking for the feasibility of its execution for a given starting time when temporal constraints are present. However, the approach is restricted to acyclic workflows. 
We believe that using the colored token of CP-nets to model different message and event type of business process are more natural. Our verification work of description written in BPEL is based on CP-nets. Table 1 shows the comparison between the existing approaches to Web services composition workflow verification. Fig.1 illustrates our verification approach. Web services composition processes are translated into CP-nets, the input of Design/CPN or CPN tools. The formalization mainly concerns with the translation of composition specification into CP-net models. This is particularly important in discussions with Web services modelers unfamiliar with CP-nets. 
CP-nets were formulated by Jensen [5] as a formally founded graphically oriented modeling language. CP-nets are useful for specifying, designing, and analyzing concurrent systems. In contrast to ordinary Petri nets, CP-nets provide a very compact way of modeling complex systems, which makes CP-nets a powerful language for modeling and analyzing industrial-sized systems. This is achieved by combining the strengths of Petri nets with the expressive power of high-level programming languages. Petri nets provide the constructions for specifying synchronization of concurrent processes, and the programming language provides the constructions for specifying and manipulating data values. Practical use of CP-nets has been facilitated by tools to support construction and analysis of systems by means of CP-nets. In this paper, we use CPN tools to illustrate our work. 
The properties of CP-nets to be checked include boundness, deadlock-freedom, liveness, fairness, home, and application specific properties. The application specific properties are expressed as reachability of CP-nets. All the properties have their specific meaning in verifying Web services composition (cf. Table 1). 
CP-net models can be structured hierarchically. This is particularly important when dealing with CP-net models of large systems. The basic idea underlying hierarchical CP-nets is to allow the modeler to construct a large model from a number of smaller CP-nets called pages. These pages are then related to each other in a well-defined way. In a hierarchical CP-net, it is possible to relate a so-called substitution transition (and its surrounding places) to a separate CP-net called a subpage. A subpage provides a more precise and detailed description of the activity represented by the transition. Each subpage has a number of port places and they constitute the interface through which the subpage communicates with its surroundings. To specify the relationship between a substitution transition and its subpage, we must describe how the port places of the subpage are related to so-called socket places of the substitution transition. This is achieved by providing a port assignment. When a port place is assigned to a socket place, the two places become identical.
 The aim of this section is to provide a tr ansformation from BPEL to hierarchical CP-nets. The overall transformation idea can be concluded as follows: 9 The whole process is represented by a hierarchical CP-net. The interaction 9 Messages are represented by tokens. Different message type can be represented 9 The BPEL activity is usually mapped to a CP-net transition. We do so for 9 The control flow relations between activities are captured with CP-nets token 
Each element of BPEL process is called an activity, which is the vital concept to verify the business process of composition. Next, we will translate activity of BPEL to hierarchical CP-nets constructs. 4.1 Activity Transformation BPEL activities may be primitive or complex. Atomic activities represent the basic unit of behavior of a Web service. The most important atomic activities include actions dealing with messages corresponding to the execution of operations defined in static service definition languages such as WSDL. They can be associated with one of the following types of WSDL operations: (1) One-way action: performed when receiving messages and no response needed. (2) Request-response action: performed when receiving a message and sending a (3) Notification action: performed when sending messages to another service (4) Solicit-response action: performed when sending a message to another service supports the definition of the following kinds of composition: (1) Sequence: this construct contains one or more activities that are performed (2) Switch: this construct supports conditional behavior. The activity consists of an (3) While: this construct supports repeated performance of a specified iterative (4) Pick: this construct awaits the occurrence of one of a set of events and then (5) Flow: this construct allows you to specify one or more activities to be performed illustrated by these examples Table 3. Fig.2 is a schematic illustration of the example from the specification document [2]. The example scenario is a process for handling a purchase order within a virtual enterprise comprising a Customer, an In voiceProvider, a ShippingProvider and a SchedulingProvider. On receiving the purchase order from a customer, the process shipper, and scheduling the production and shipment for the order. While some of the processing can proceed concurrently, there ar e control and data dependencies between the three tasks. In particular, the shipping price is required to finalize the price calculation, and the shipping date is required for the complete fulfillment schedule. When the three tasks are completed, invoice processing can proceed and the invoice is sent to the customer. The corresponding hierarchical CP-nets formalisms of Purchase Order process are illustrated as Fig.3. In this paper, we introduce an approach to verify and analyze Web services composition. We pick up BPEL, which is the de facto industry standard of Web services composition specification. We present the transformation algorithms from BPEL to CP-nets constructs in a constructive way. These generated CP-net models can be analyzed, verified and simulated as prototypes of the BPEL processed by many existing and specialized analysis and veri fication tools. As future work, the back-annotation techniques from CP-nets are being considered. 
