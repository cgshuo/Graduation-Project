 Geographical data have long been incorporated in various applications for more convenient information visualization and sharing [1]. Due to the nature of data sharing, the digital data of GIS related applications is easy to be duplicated and tampered with. Therefore, the conten t authentication methods are in need to verify data truthfulness.

Watermarking is one of the most important techniques for the security con-sideration of digital data [2]. Basically, watermarking means slightly modifying the host data and forcing it to imply certain secret information. The information (i.e., watermark) can then be detected from the watermarked data for owner-ship assertion [3], content authentication [4], etc. The watermarking scheme for content authentication is called fragile watermarking scheme. In a fragile water-marking scheme, the embedded watermark should be sensitive to modifications so as to detect and locate modifications.

In fact, fragile watermarking has been predominantly used for the content authentication of digital contents, and large amounts of fragile watermarking schemes have been proposed for various types of digital data, e.g., images [5], audios [6], videos [7] and da tabases [8]. Recently, researchers recognized the im-portance of authenticating 2D vector maps [9], the most widely used geograph-ical data [10]. By borrowing experiences from multimedia watermarking, a few fragile watermarking schemes have been proposed for vector maps. The schemes first divide the underlying map into blocks [11][12] or groups of vertices/objects [13][14][15]. Then, a fragile watermark is generated from and embedded into each block (group). During the detection, the data modifications are located by comparing the generated and detected block (group) fragile watermarks: a block (group) is considered integrated only if the gen erated and detected fragile watermarks are the same.

The above schemes for vector maps are e ffective and can properly detect and locate illegal modifications. However, those schemes share two common prob-lems. First, the authentication can only be carried out on block (group) level. Namely, if any vertices or objects in a block or a group are modified, then the whole block or group will be considered tampered. This mea ns certain (possi-bly quite a lot of) un-modified vertices and objects that can be legally used may be negatively considered tampered. This relatively rough detection granu-larity may result in extra time for reacquiring the original legal data. Second, the types of modifications (i.e., object addition, deletion and modification) can-not be characterized from the detection results. As n oted in [8], modification type characterization is important for distinguishing usable data elements from unusable ones, and can guide a more effective data recovery.

In accordance with the aforementione d problems, in this paper, for 2D vector maps, we propose a fragile watermarking scheme that can detect, locate and characterize data modifications on object level. The main idea is to embed two kinds of watermarks, i.e., group watermark and object watermark, into each ob-ject. Consequently, if the watermarked map is modified, the scheme can acquire different detection patterns based on the detection results of the two kinds of watermarks. The detection patterns are localizable and distinguishable to locate modifications and characterize modification types. Our contributions include (1) developing a fragile watermarking scheme that competes the state of art in ( a ) guaranteeing a more precise detection granularity and ( b ) having the ability of modification type characterization; (2) analyzing the fragility of the scheme the-oretically in a probabilistic way; and (3) verifying the fragility of the scheme empirically.

The remainder of this paper is organized as follows. In Section 2, we introduce some preliminaries. Then, the proposed fragile watermarking scheme is described and the fragility of the scheme is analyzed in Section 3. Finally, performance study and conclusions are given in Sections 4 and 5 respectively. This section introduces the framework (and a detail technique) that will be adopted in the paper, and discusses the data modifications a fragile watermark-ing scheme proposed for vector ma p should detect and characterize.
 2.1 Generate-and-Embed/Detect Framework Generally, almost all the existing fragile watermarking schemes are subject to generate-and-embed/detect framework [ 4]. Namely, the schemes first generate a data summary, i.e., fragile watermark, from the host data, and then embed this summary into the data. Further, during watermark detection, the fragile watermark is again generated and then compared with the fragile watermark detected from the data. If the data is integrated, then the two watermarks should be exactly the same, otherwise, they should be different.

Two important requirements should be fulfilled in the afore-process. First, there should be an obligated change on the generated watermark if any mod-ification is made to the data used for watermark generation. This is achieved by adopting cryptographic hash function for watermark generation. A crypto-graphic hash function, H (), has two important properties: (1) one-wayness, it is computationally infeasible, for a given value V to find a V such that H ( V )= V ; (2) randomness, changing even one bit of the hash input causes random changes to the output bits. The first property guarantees the overall security of a wa-termarking scheme, while the second is the foundation of fragility. Potential cryptographic hash functions include MD5 and SHA hash [16]. The second re-quirement is induced by the first one: to avoid false positive (i.e., the reporting of the data modifications caused by watermark embedding), the watermark em-bedding should not interfere the watermark generation.

In this paper, we also adopt the generate-and-embed/detect framework, in which cryptographic hash function is used for watermark generation. 2.2 Data Modifications General data modifications include data element addition, deletion and modi-fication [5][6][7][8]. The data element may be pixel block, frame, motion vector and tuple for image, audio, vedio and relational database. Since a vector map is commonly modeled as a set of objects, denoted as VM = { O 1 ,O 2 ,...,O n } , where each O i = p 0 ,p 1 ,...,p l i  X  1 is composed of a sequence of ordered vertices, and each p j =( x j ,y j ) is a vertex represented by a pair of coordinates. In this paper, we regard object as data element.

The meaning of object deletion and addition are obvious. In geographical field, object modification means altering an object with general structure preserved [2]. We adopt turning function to qualitatively model the concept. Turning function is one of the most effective ways that can be used to qualitatively describe an object X  X  geometry [17]. It measures the angle  X  of tangent as a function of arc length . From the function, an unique integral value, Area T , can always be calculated to describe an object X  X  geometry. Therefore, we link an Area T -based identity to every object (i.e., using geo metry to identify object), and regard the tampered object with identity (i.e., general structure) preserved as modified object 1 . For more information about turning function, please consult [17]. On an overview level, our watermarking scheme embeds two kinds of fragile watermarks into every object by the follo wing process: (1) extract an identity foreachobjectbasedonits Area T , and partition it into an object group; for each object in every group, (2) generate a group fragile watermark based on all the identities of the objects in the group, and embed it into the object; (3) generate an object fragile watermark based on all the vertices in the object, and embed it into the object. When the vector map need s to be verified, (4) the identities are extracted and the objects are partitio ned into groups; for every object group, (5) the two kinds of fragile watermarks are detected from the objects, and the detection grid is construct ed; (6) according to the de tection pattern revealed in the grid, the tampered objects are located and the modification types are determined.

In the following we first introduce the proposed watermark embedding and detection methods in Sections 3.1 and 3.2. Then, the tamper locating and char-acterization method is introduced in Section 3.3. Finally, the fragility analysis is given in Section 3.4. 3.1 Watermark Embedding Let bs ( a ), hb ( a,b )and bit ( a,b ) return the bit-size, the bits higher than b ,and e.g., msb (2 . 25 , 3) = 100, msb (2 . 75 , 5) = 10011.

Based on the notations, in the first step of our embedding process we calcu-late for each object O i an identity id i = hb ( Area T i , X  ), and partition the object into an object group G j = H ( id i || K ) mod g ,where g and K are two parameters given by data owner representing the number of groups and secret key. We use the higher bits of Area T as object identity so that it can remain unchanged when only small perturbation is made to the object X  X  structure -which is required by object modification defined in Section 2.2.

After group partition, for every group G i with m i objects, in the second id embed the group fragile watermark and object fragile watermark as follows. (1) Generate group fragile watermark as W g j = msb ( H ( id j || S i || K ) ,l j ), where l is the number of vertices in O j .(2)Embedthe k th (0  X  k  X  l j  X  1) bit of W g j into the k th vertex X  X  x -coordinate of O j , by replacing the  X  -th bit of ( x k ) 2 as the watermark bit, i.e., bit ( x k , X  )= bit ( W sition  X  should be determined in accordan ce with the map X  X  precision toler-ance  X  to ensure data fidelity. (3) Gener ate object fragile watermark as W o j = 1),  X  y k = hb ( y k , X  ). (4) Embed the k th bit of W o j into the k th vertex X  X  y -coordinate, i.e., bit ( y k , X  )= bit ( W o j ,k ). We only use the bits higher than  X  of ( y k ) 2 in object watermark generation to avoid the influence of watermark em-bedding (i.e., modifying bit ( y k , X  )) on the watermark generation. It is also to be noted that the group and object watermark embedding as a whole only makes negligible perturbations to objects X  structures. The embedding rarely influences object identities, group seeds or the ge nerated group watermarks (Actually, in our algorithm implementation, we avoid this influence by omitting bit ( x, X  )and bit ( y, X  ) when calculating Area T ). However, any modification made to the wa-termarked map will cause change on either the generated or the detected values of the two kinds of watermarks. 3.2 Watermark Detection During the watermark detection, all the objects in a suspicious map are di-vided into groups by the identification-and-partition method used in the water-mark embedding, and each group is verifi ed independently. Since each object covers two fragile watermarks, for every group G i with m i objects, a detec-tion grid composed of two m i -element vectors V o i = { v o 1 ,v o 2 ,...,v o m { v termarks and group fragile watermarks. Then, for every object O j  X  G i ,theob-ject fragile watermark and group fragile watermark are generated and detected. The watermark generation is the same as in the watermark embedding. While for where 0  X  k  X  l j  X  1, l j is the number of vertices in O j , W gd j and W od j are the detected group fragile watermark and object fragile watermark of O j respec-tively. At last, to get v g j , the generated and detected group fragile watermarks are compared. If the two watermarks are exactly the same, v g j is true, otherwise, v j is false. Likewise, v object fragile watermarks. Fig. 1 ( a ) shows the detection grid of an unmodified group with five objects (i.e., m i =5).
 3.3 Tamper Locating and Characterization We demonstrate how the modifications can be located and the modification types can be characteri zed in this section.
 Object Deletion. According to Fig. 1 ( b ), suppose O 1 is deleted, theoretically the group seed (see Section 3.1) will ch ange due to the randomness property of the cryptographic hash function, which will in turn cause considerable change on all the relevant generated group watermarks. However, since the remaining objects themselves in the group are unmod ified, the detected group watermarks remain unchanged, which means these detected watermarks will very likely be different from the generated ones, i.e., every v g j  X  V g i will very likely be false. We will model the expression very likely in a probabilistic way in Section 3.4. On the other hand, for object fragile watermarks that only depend on individual objects, the corresponding detection results are naively true. Consequently, we can get the detection grid shown in Fig. 1 ( b )(Someofthe X  X  X  X n V g i could probabilistically be  X  X  X ). Apparently, the locating of object deletions can only be done on group level. Let deleted-group convey the meaning that an object group has suffered at least one object deletion, then the detection pattern for an deleted-group can be defined as: The set of deleted-group(s) can be located as G del = { G i | X  O j  X  G i ,  X  O k  X  G ,v g j = False,v o k = True } .
 Object Modification. According to Fig. 1 ( c ), suppose an object O 3 is mod-ified to O 3 . By the definition of object modification, the modification does not influence the object X  X  identity. Namely, the generated group watermarks of all the objects (including O 3 ) remain unchanged. Since the objects except O 3 are exactly the original ones, their detected group watermarks, generated and de-tected object watermarks remain unchang ed. The detection results of their group watermarks and object watermarks will all be true. For O 3 , its generated object watermark changes (due to the randomness property of the cryptographic hash function). Its detected object watermark and group watermark also change due to modification. Therefore, its detectio n result of group watermark and object watermark will very likely be false. Then, the detection grid for this situation is shown in Fig. 1 ( c ). The detection pattern for a modified-group (group suffers at least one object modification) can be defined as: where G T i = { O j | O j  X  G i ,v o j = True } is the subset of objects in G i whose object watermark detection results are True . The set of modified object(s) can where argG ( O i ) signifies the group O i rests in. It is to be noted that the detection pattern does not include the group watermark detection result(s) of the modified object(s) ( O 3 in this example), since both object addition (see 3.3) and object modification can lead to the detection of  X  X alse X  of an object X  X  group watermark. Namely, this (these) result(s) does (do) not contribute to the modification type characterization.
 Object Addition. As to object addition, according to Fig. 1 ( d ), suppose an object O 6 is added into the group. For the same reason as for object deletion, all the detection results of group fragile watermarks of the originally existing objects will every likely be false, and the results of their object fragile water-marks are true. As to O 6 , since both the generated and detected values of its group and object fragile watermarks are random, the detection results of the two watermarks are very likely false. Therefore, the detection gird shown in Fig. 1( d ) can be acquired. The detection pattern for an added-group (group suffers at least one object addition) can be defined as: The set of added object(s) can be located as O add = { O i | v o i = False,G j = argG ( O i ) ,  X  O k  X  G T j ,v g k = False } .

It is to be noted that if the identity of an object is modified due to a large magnitude object modification, then, two situations may occur. The first is that the object shifts into another group, then, the original group will follow the detection pattern of object deletion, and the destination group will follow the pattern of object addition. The second is that the object remains in the original group, and the detection results of the group will follow the pattern of object addition. No matter which situation occurs, the detection results agree with the intuition that a large magnitude modification can be considered as an addition along with a deletion. 3.4 Fragility Analysis In this section, we aim to estimate how likely the modifications can be located and characterized in a probabilistic way. Since both the generation of object identity and fragile watermarks are secure-hash-based, without loss of general-ity, we take the following hypothesis during the analysis: 1) objects distribute uniformly in g object groups, every group contains m objects, and every object has l points (i.e., the length of object and group fragile watermarks are all l ); 2) a data modification has equal probability to fall on any object in any group; 3) after data modification, every pair of the corresponding bits in the corresponding detected and generated watermarks has equal probability to be either the same as or different from each other, i.e., the probability that the two watermarks are exactly the same is 1 2 l . Object Addition. During the detection, an added object can be located and characterized if: the detection result of its object fragile watermark is false ( p 1 ); while for the originally existing objects, the detection results of their group fragile watermarks have at least one false ( p 2 ). That is, the probability that single object For multiple object additions, since any object may fall into any group, suppose  X  objects are inserted into the waterma rked map, and the insertions cause k (1  X  k  X  min (  X ,g )) added-groups, with  X  i (1  X  i  X  k , inserted into group G i . Then, the probability that all these added objects can be located and characterized is Apparently, the probability depends on the value of k . For a more explicit un-derstanding, we give a lower bound of the probability in terms of m and  X  as follows. Object Deletion. As we have stated, object deletion can only be located and characterized on group level. For single object deletion, it can be located and characterized if: for all the remaining o bjects, their detection results of object fragile watermarks are true ( p 1 ), while the results of the group fragile watermarks have at least one false ( p 2 ). Since the results of the object fragile watermarks are naively true, we have p 1 = 1. The probability that single object deletion can be located and characterized is p = p 2 =1  X  ( 1 2 l ) m  X  1 . For multiple object deletions, suppose  X  objects are deleted from the watermarked map, and the deletions cause k (1  X  k  X  min (  X ,g )) deleted-groups, with w i (1  X  i  X  k ,1  X   X  i  X  m , these deleted objects can be located and characterized is p = Again, for a more explicit understanding, let us suppose every group has at least one object left after deletions, then the lower bound of the probability can be represented as Note that it is impossible to detect the del etion of a group if the entire group is deleted. However, the probability of an entire group deletion is very low [8]. This conclusion was also verified by our exper imental results pres ented in Section 4. Object Modification. A modified object can be located and characterized if: the detection result of its object fragile watermark is false ( p 1 ); while for the unmodified objects (i.e., the objects with v o i = True ), the detection results of their group fragile watermarks are true ( p 2 ). Since the detection results of those group fragile watermarks are naively true, we have p 2 = 1. The probability that single object modification can be located and characterized is p = p 1 =1  X  1 2 l . For multiple object modifications, suppose  X  objects has been modified, the probability that all the modified objects can be located and characterized is shown in Eq. 3.
According to the afore-analysis, it is easily to be noted that the larger l is, the more fragile our scheme will be. To highlight the importance of l , we give an even looser lower bound of Eq. 1, 2 and 3 as p =(1  X  1 2 l ) 2  X  . This means that the fragility of the scheme can be guaranteed if objects have sufficient points. According to our experimental results i n Section 4, most objects have adequate points. For objects whose points are inadequate, since the vertex coordinates are usually represented in 64-bit double-precision format, there are always large amount of meaningless mantissa bits in a coordinate [18]. We can embed more bits (instead of one bit) into each coordinate so that the reasonable length of fragile watermark can be fulfilled, in the expense of introducing some extra but negligible noise to the cover map.

An other fact is that, on one hand, the larger m is, the harder for an entire-group to be deleted by massive object deletions [8]. On the other hand, better locating precision for object deletions can be achieved with smaller m .Wecan make trade-offs between security an d locating precision when choosing g ,since m is roughly decided by the group number g . To evaluate the performance of the pro posed watermarking scheme, we per-formed our experiments based on 16 v ector maps provided by the National Administration of Surveying, Mapping and Geoinformation of China. The wa-termarking algorithm was implemented in C and run on a computer with Intel Core i5 CPU (2.9GHz) and 4G RAM. We focus on demonstrating the influence of watermark length l and group number g on the fragility of the proposed scheme. In the following, we take the county administrative boundary map of China as example for demonstration. The map contains 3207 objects and 1128242 vertices, with precision tolerance  X  =10  X  5 . Correspondingly, the embedding position  X  was set as  X  16 so that the embedding caused an approximately 0 . 00001 varia-tion on each coordinate. We set  X  as 7 so that for an modified object the allowed variation on Area T was approximately 1% (which is a reasonable assumption [10][17]). It is to be noted that according to our experimental results the embed-ding never influence the object identities , i.e., all the objects can be correctly authenticated if the map is not modified after watermark embedding. 4.1 Evaluation on l To show the influence of l on the fragility of the scheme, we slightly modified our scheme so that for every object O i , we generated and embedded a l -bit object and group fragile watermark. Since the numbers of vertices in objects are different, during the embedding, if the number of vertices of O i is less than l ,then the vertices were used recurrently for embedding. Otherwise, the l -bit fragile watermark was embedded repeatedly into the vertices. The detection process was also amended to generate and detect l -bit watermarks. After embedding, we applied modifications on the waterm arked maps and recorded the detection results. All the three modification types were considered in different processes. The modification magnitude (the ratio of added, modified or deleted object) was set to 50%. That is, data modification influenced approximately 1600 objects in each run (i.e.,  X  1600). The experiment showed that with fixed g (e.g., 300 and 150 in this experiment), both the objects and the modifications fall averagely into each group (i.e., m i 3207 /g ,  X  i 1600 /g ).

We varied l as 4, 8 and 16 for evaluation, and we repeated the experiment 65 times for each modification type so that more than 10 5 modifications of that type were applied to the watermarked map. The results are showed in Table 1, where the value in each cell represents the percents of modifications (out of 10 5 modifications) that were successfully ch aracterized in the experiment. Form the results, the following conclusions can be drawn: 1) When l is small, the fragility (quantitatively measured by the percen tage of successfully characterized mod-ifications) of the scheme is relatively low and it is influenceable by g .Thisis because that, according to Eq. 1, 2 and 3, whether a modification in a specific group can be characterized is related to both the watermark length and the number of modifications applied to the group. 2) The scheme is comparatively more fragile against object deletion than object addition and modification. Ac-tually, this conclusion is true only when g is relatively small, since according to Eq. 2, the more objects left in a deleted group, the larger probability is for these deletions to be characterized. 3) T he scheme gets more fragile with larger l . When l is large enough (e.g., l = 16), the influence of g on the scheme X  X  fragility decreases to a negligible level, and all the modifications can be correctly charac-terized with proper g (e.g., g = 150). This is also consistent with our analysis in Section 3.4. In real world application, an additional parameter, l , can be added to our scheme to make sure the objects w ith inadequate vertices can have long enough watermarks (by recurrent embedding).

Please pay attention to the detection results of object deletion for g = 300: (1) the percents of characterized deletions are approximately the same; (2) none of the percents reaches 100. The reason is that the objects in every group are too few. Consequently, the groups are at t he risk of being entirely deleted, which makes the deletions undetectable. Next, we demonstrate the evaluation on g . 4.2 Evaluation on g Since m is roughly determined by g , in this experiment, we fixed l as 16, and varied g as 256, 512 and 1024 for evaluation (correspondingly, m was approximately 12, 6, 3). In each run, we carried out data modifications with magnitude 10%, 20%, 30%, 40% and 50% before detection. According to our experimental results, all the object additions and object modifications were characterized . However, for object deletion, the experimental results presented in Table 2 show that, ( a ) when only a small portion of objects were d eleted, in general all delet ions can be correctly char-acterized; ( b ) the deletions can be characterized decrease with increasing deletion rate for larger g . This is because that certain groups were deleted entirely thus can not be detected. However, if g is relatively small, the probability of an entire group deletion is very low. Consequently, all deletions can still be detected even with high deletion rates, e.g., when g = 256 and deletion rate is 50%. This fact gives us a very concrete clue on how to select a proper g .
 In this paper, we investigated the pro blem of authenticating 2D vector maps on object level. We proposed a fragile watermarking scheme that can not only detect and locate modifications, but also characterize modification types. We analyzed the scheme X  X  fragility theoretically in a probabilistic way, and verified it experimentally on real data. Both the analysis and evaluation show the fragility of the scheme. Acknowledgments. This work is supported by the National Natural Science Foundations of China under g rant (No.61100019 and No. 61262021).

