 Ranking queries have been investigated extensively in the past due to their broad range of applications. In this paper, we study this problem in the context of fuzzy objects that have indeterministic boundaries. Fuzzy objects play an important role in many areas, such as biomedical image databases and GIS. To the best of our knowledge, we present the first efficient approach for similarity ranking in fuzzy object databases. The main challenge of rank-ing fuzzy objects is that these objects consist of multiple instances, each associated with a probability. We propose a framework to transform fuzzy objects into probabilistic objects which can then be ranked using existing algorithms for probabilistic objects. H.3.3 [ INFORMATION STORAGE AND RETRIEVAL ]: Infor-mation Search and Retrieval Fuzzy data, Probabilistic Data, Probabilistic Ranking
The similarity search task of distance ranking is one of the most important operations in a spatial DBMS. Recently, with the pro-liferation of mobile computing, distance ranking queries have also been extended to moving object databases [2, 15]. This work has collectively made significant advances in improving the efficiency of search algorithms and enriching the queries to support more complex data types. Efficient techniques for similarity ranking in probabilistic databases have also been studied in recent works [4, 12]. Probabilistic ranking where the query is given by a range is furthermore studied in [16]. All these works assume that objects do not have any spatial extent and are given by a set of mutually exclusive points (alternatives). However, in some real applications such as biomedical image analysis and geographical information systems, the data may have a spatial extent. Satellite imagery is a typical source of such kind of non-crisp extended data.
 Figure 1: A typical cell image in biomedical analysis. Darker pixels have higher probability of belonging to the cell [18].
Nowadays, as satellites are producing images much faster than before, the huge size of the datasets rules out the approach of iden-tifying objects and relationships manually. Instead, we must rely on automatic techniques. However, it is often impossible to interpret the objects in satellite images unequivocally due to the limitation of image resolution and due to weather effects. In order to reflect the uncertainty embedded in images and to offer subsequent analysis more information to work with, a probabilistic mask is produced on the extent of identified cells by probabilistic segmentation [13].
For example, Figure 1 shows a typical cell image in biomedical analysis. The boundary of the cell cannot be identified easily, i.e., it is not crisp. Under the model of probabilistic masks, different pixels in the image will be assigned different probabilities to indi-cate the likelihood that the pixel belongs to the cell. By this means, each object is transformed into a collection of points with proba-bilities. As such, uncertainty lies in their compositions, i.e., a point may or may not belong to the object. Therefore, they are essentially different from the uncertain databases in which the objects are as-sumed to have probabilistic locations at query time. The concept of probabilistic masks essentially represents the cells in images as fuzzy objects. Although fuzzy objects have long been studied in the GIS community [1, 14], common spatial queries such as rank-ing queries still remain uninvestigated at large. In this paper, we will address the problem of ranking objects in Euclidean space over large fuzzy datasets. This type of query has many applications in the geo-spatial field, such as  X  X ind all the houses in the database in the order of their distance from location p or object o  X  or  X  X ind the nearest city of population greater than 30,000 to Maui, Hawaii X .
Before stepping further to propose new solutions to rank objects in a fuzzy spatial database, we have to raise the question: does the fuzziness of objects change the nature of traditional probabilistic ranking of uncertain objects? Or can we adopt existing solutions into existing probabilistic ranking algorithms, an object should be represented by a single point in every possible world. Then a prob-lem arises: how to find this point? Usually it is not easy to choose a suitable representative point because the underlying object (e.g. neuron cells) has a complex shape, and not all parts of the object are equally important (kernel vs. boundary) in terms of their con-fidence. Hence, choosing arbitrary points will cause considerable information loss and even produce misleading results.

This work shows how this point, which defines the distance be-tween a query point q and a fuzzy object A can be found dynam-ically, for each world of A . This observation will allow to map each fuzzy object A (which generally consists of many points in a possible world) to a probabilistic object A (which consists of al-ternatives of which at most one holds in a possible world). The mapping is done in a way such that a fuzzy ranking performed in the fuzzy space is identical to a probabilistic ranking performed in the mapped probabilistic space. Then, we can directly apply exist-ing solutions for efficient ranking of probabilistic objects.
This section introduces the notations used in the remainder of this work. Some notions may be inconsistent with existing works, which however cannot be avoided, since this work uses notations from both the field of fuzzy data management and probabilistic data management, and disambiguation is needed for some notations. This work uses the attribute-level uncertainty model [7, 3]. is represented by a set of mutually exclusive instances a , each as-sociated with an existential probability p ( a ) , P a  X  A
To materialize a probabilistic object A into a possible world, an instance is chosen randomly, according to their respective probabil-ities. With a probability of 1  X  P a  X  A p ( a ) the object A does not exist at all. To materialize a probabilistic object database, each ob-ject is independently materialized. Clearly, the number of possible worlds is exponential in the number of probabilistic objects.
Our definition of a fuzzy object is based on fuzzy sets [17]. A fuzzy object A consists of a set of instances and a membership function  X  A : R d  X  [0 , 1] mapping each instance a  X  A to a real value  X  A ( a ) within the interval [0 , 1] . Values in between are associated with the fuzzy member instances of the object. In this work, we assume the discrete case, where each object A i of a fuzzy database D = { A 1 ,...,A n } consists of a finite number of of multi-dimensional points.
 D EFINITION 2 (F UZZY O BJECT ). A fuzzy object A = { X  a  X  R , X  A ( a )  X  X   X  A ( a ) &gt; 0 } in the d -dimensional space is represented by a set of spatial points a , each associated with a membership probability  X  A ( a ) which indicates the probability of a belonging to A . The function  X  A is called membership function of A .
Any point a  X  A with  X  A ( a ) = 1 is known to exist for certain, i.e., in every possible world. The largest set of such points is called the core of A . Any point a with  X  A ( a ) = 0 cannot possibly belong to A . Such points do not have to be stored explicitly in D , as they cannot appear in any possible world. Thus, we can assume without loss of generality that  X  A ( a ) &gt; 0 for all A  X  X  .

To materialize a probabilistic object A into a possible world, a probability threshold  X  is chosen uniformly in the interval [0 , 1] , and each point a  X  A, X  A ( a )  X   X  belongs to A in this world, while the remaining points do not exist (cf. Figure 2).
D EFINITION 3 (  X  -CUT ). Given a fuzzy object A, the sets A { a  X  A |  X  A ( a ) &gt; 0 } ,A k = { a  X  A |  X  A ( a ) = 1 and A A |  X  A ( a )  X   X  } are called the support set, the kernel set and the  X  -cut of A, respectively.

With a probability of 1  X  max a  X  A (  X  A ( a )) , object A contains no points and, thus, does not exist.

To materialize a fuzzy database into a possible world, there exist two approaches [5]. The first approach chooses a global value for  X  , which is applied to materialize all fuzzy objects in D . The local approach chooses an individual value  X  A for each object A  X  X  .
The global approach has applications in bio-medical imaging, where it can be assumed that all object images are taken by the same instruments (e.g. the same microscope). In such an applica-tion, the only unknown (and thus random) variable of the system is the intensity of any pixel required to belong to its object. The local approach has manyfold applications in geo-spatial databases, where different object images may be taken in a different environ-ment. For instance, images taken at different day times may have different light intensities, or some images may be more blurred due to clouds. Thus, the required intensity of pixels to belong to an ob-ject may differ between objects. In this work, we will focus on the local approach, as it is a generalization of the global approach. The set of possible worlds of an object A is given as Assuming that the set of points belonging to object A is finite, each possible world of A is associated with a non-negative probability P ( w A  X  pw ( A )) = argmax  X  { A  X  = w A } X  argmin  X  { A the set of possible worlds of D is given as where is possible world is associated the probability
Since, unlike a probabilistic object, a fuzzy object may consist of more than one point in space, we further need to define a distance function between point sets that will be used for ranking. Here, we use the definition of [18] to define the  X   X  distance between a query point and a fuzzy object.

D EFINITION 4 (F UZZY D ISTANCE ). For a crisp query object q and a fuzzy object A , their distance in a possible world, where A is cut at  X  , is given by: where d ( x,y ) is the Euclidean distance between d -dimensional vectors. :0.8 Figure 3: Translation from fuzzy to probabilistic distance.
In this paper, we focus on the issue of obtaining fuzzy objects in their order of distance from a given query point (termed ranking). This issue is of primary interest in a spatial database although it is also used in other database applications including multimedia indexing [9], CAD, and molecular biology [8]. The desired ranking may be full or partial (e.g., only the first k objects).
The main challenge of this work is to compute, given a query point q , a probabilistic distance ranking of all database objects. That is, for each database object o  X  D and each ranking posi-tion 1  X  k  X  k max , the task is to compute the probability that o is the k th closest fuzzy object to q according to the fuzzy distance function defined in Definition 4. Formally:
D EFINITION 5. A probabilistic ranking query ProbRank ( q ) on a fuzzy object database D returns for each object o  X  D and each ranking position 1  X  k  X  k max the probability that o is on rank k with respect to the distance to q .

This section first gives an intuition of our main idea of translating fuzzy objects into probabilistic objects, given a crisp query object. Here, we assume that the query object q is given by a single point.
Then, this intuition will be formalized into a translation algo-rithm. The result of this algorithm can then be given to a proba-bilistic ranking algorithm.
Essentially, the fuzzy distance (cf. Def. 4) corresponds to the minimal distance of all pairs of points existing in the corresponding  X  -cut. Thus, in a possible world (i.e., for some  X  -cut), the distance between the crisp query object q and a fuzzy object A is defined by the distance between q and a point a  X  A . All other points p  X  A \{ a } can be completely ignored for the distance computation.
E XAMPLE 1. Figure 3(a) illustrates this observation for the dis-tance between the query point q and a fuzzy object A . A con-sists of 3 instances a 1 , a 2 and a 3 , with membership probabilities  X  ( a 1 ) = 20% ,  X  A ( a 2 ) = 80% and  X  A ( a 3 ) = 50% . a est to q , and, thus, in any possible world where a 1 exists, a the fuzzy distance between q and A . Since a 1 exists with a proba-bility of 20% , we can conclude that a 1 defines the distance between q and A with a probability of 20% . Instance a 2 is the next-closest point to q , and exists with a probability of 80% . By Def. 3, and since  X  A ( a 1 )  X   X  A ( a 2 ) , it holds that a 1 can only exist if a Algorithm 1 Object Transformation: Fuzzy to Probabilistic Require: Point q , Fuzzy Object A = { a 1 ,...,a n } 1: A q = new ProbabilisticObject 2: FLOAT maxProb 3: for a i  X  A do 4: a q i = new ProbabilisticInstance 5: a q i .coords = a i .coords 6: p ( a q i ) = 0 7: if  X  A ( a i ) &gt; maxProb then 8: p ( a q i ) =  X  A ( a i )  X  maxProb 9: maxProb =  X  A ( a i ) 10: end if 11: A q = [ A q ,a q i ] 12: end for 13: return ( A q ) exists. Thus, the random event  X  a 2 exists and a 1 does not exist X  has a probability of 80%  X  20% = 60% . If this event holds, then a 2 defines the distance between q and A . Finally, instance a farthest away from q . Due to Def. 3, and since  X  A ( a 3 a exists only if a 2 exists. And since a 2 is closer to q than a not possible for a 3 to define the distance between q and A in any possible world. With a probability of 1  X  max i (  X  A ( a object A has no instance at all, and, thus, does not exist.
Due to the observations made above, we will now rewrite A as a probabilistic object A q , consisting of two probabilistic instances a and a q 2 having probabilities p ( a q 1 ) = 0 . 2 and p ( a spatial locations of a q 1 and a q 2 correspond to the locations of a a , respectively. Note that there is no instance a q 3 , since a defines the distance between q and A and thus, can be ignored. Now, keeping in mind that instances of a probabilistic object are mutually exclusive (cf. Definition 1), we trivially get that instance a defines the distance between q and A q with a probability of 0 . 2 , while instance a q 2 defines this distance with a probability of 0 . 6 . A q does not exist at all with a probability of 1  X  P In summary, we get a probability density function (PDF) of the distance between q and A as depicted in Figure 3(b).
 In this example, we could guarantee that by construction of the probabilistic object A q , the probability of a fuzzy instance a defining the fuzzy distance between q and A is equal to the prob-ability that the corresponding probabilistic instance a q the next section, we will formalize this approach and show that a probabilistic ranking on the translated probabilistic objects, yields the same result as a fuzzy ranking on the raw fuzzy objects.
Consider Algorithm 1, which takes as input parameters a (crisp) query point q and a fuzzy object A = { a 1 ,...,a n } . Let  X  the membership function of A . Without loss of generality, assume that the instances a i  X  A are sorted increasingly in their distance to q . 1 The algorithm iteratively creates a probabilistic instance a for each fuzzy instance a i of A . The spatial coordinates of the probabilistic instances are set to the spatial coordinates of the cor-responding fuzzy instances. The probability of each probabilistic instance is set to the difference between the corresponding fuzzy instance and the maximum membership probability of all fuzzy in-stances seen so far. All the newly created probabilistic instances are then unified into a single probabilistic object A q .
We make this assumption to ease readability by avoiding double indices. If instances a i are not sorted, we can simply sort them a priori in log-linear time.
L EMMA 1. After running Algorithm 1 with parameters A and q , it holds for each fuzzy instance a i  X  A , that the probability that a defines the fuzzy distance between q and A , equals the existential A = { a q 1 ,...,a q n } .

P ROOF . By induction: Instance a 1 exists with a probability of  X  ( a 1 ) , and in any world where a 1 exists, it must define the fuzzy distance between q and A . Thus a 1 defines the distance between q and A with a probability of  X  a ( a 1 ) , and p ( a q 1 ) =  X 
An instance a i , 2  X  i  X  n defines the distance between q and A if and only if instance a i exists, and no closer instance a ,j &lt; i exists. This is clear due to the assumption that the in-stances are sorted, and thus the set { a j } j&lt;i corresponds to the set of all instances of A which are closer to A than a i tion of an  X  -cut, a i exists if and only if  X  &lt;  X  A ( a more, no point in the set { a j } j&lt;i exists if and only if  X  j &lt; i :  X  &gt;  X  A ( a j ) , i.e., if and only if  X  &gt; max  X  is the realization of a uniformly [0 , 1] distribution, the probabil-ity of the random event max j&lt;i (  X  A ( a j ) &lt;  X  &lt;  X   X  ( a i )  X  max j&lt;i (  X  A ( a j ) if  X  A ( a i ) &gt; max otherwise. In line 8 of Algorithm 1, the value of p ( a q to this probability.

In a nutshell, Lemma 1 allows us to transform a fuzzy object A into a probabilistic object A , such that the probability of a prob-abilistic instance a q i  X  A corresponds to the probability that the instance a i  X  A defines the distance between q and A .

C OROLLARY 1. The probability density function of the fuzzy distance between q and A equals the probability density function of the probabilistic distance between q and A .

P ROOF . This corollary follows from the construction of A . Since each fuzzy instance a i  X  A has the same spatial attributes as its cor-responding probabilistic instance a q i  X  A , it also holds that their Euclidean distances are equal, i.e., d ( q,a i ) = d ( q,a more, the probability of each fuzzy instance a i  X  A of defining the distance to q , equals the probability p ( a q i ) of its corresponding probabilistic instance a q i  X  A to define the distance to q . Thus, both probability density functions, have the same probability val-ues at the same distance values, and are thus equal.
 Corollary 1 directly leads to the following observation:
C OROLLARY 2. Let D be a fuzzy database, and let q be a query point. Let D be a probabilistic database obtained by transforming all fuzzy objects in D using Algorithm 1. It holds a fuzzy distance ranking on D using query object q is equal to a probabilistic dis-tance ranking on DB using query object q .

P ROOF . The above corollary follows directly from Corollary 1, since the ranking is performed on the distance objects.

Finally, Corollary 2 allows us to plug in existing algorithms for probabilistic ranking (e.g. [4]) which run in O ( N  X  log ( N )+ N  X  k ) , where N is the total number of instances in the database, and k is the length of the requested partial ranking.

The transformation to probabilistic objects requires the instances of each object to be sorted w.r.t. their distance to the query object, which is performed in O ( |D| X  N  X  log ( N )) = O ( N  X  log ( N )) run-time. This additive component has no affect on the total asymptotic run time of O ( N  X  log ( N ) + N  X  k ) of the probabilistic ranking.
A total runtime of O ( N  X  log ( N )+ N  X  k ) is acceptable in proba-bilistic ranking settings, where the number of possible alternatives per object is usually rather small (less than a thousand).
To the best of our knowledge, this is the first approach for prob-abilistic ranking of fuzzy objects according to possible world se-mantics. The main idea is to transform each fuzzy object into a probabilistic object, such that a probabilistic ranking performed on these objects is guaranteed to be equal to a probabilistic ranking on the raw fuzzy objects.Currently, the algorithm requires a full scan of the database. Therefore, we are currently working on an im-plementation of an aggregate R -tree [10] to index all points of a fuzzy objects in order to minimize the number of points that have to be accessed at query time. Furthermore, we see a lot of potential in optimizing Algorithm 1 by adapting technique for dynamic sky-line search [6], as we note that the set of points of a fuzzy object having a probability greater zero in the transformed probabilistic space, equals the dynamic skyline of query object q in the distance-probability space. Another part of our future work is to consider fuzzy objects with continuous extent in space. Transforming such objects into the probabilistic object space will yield continuous dis-tance PDFs, which can be ranked using the approach proposed by [11]. These directions, as well as many other possible issues, will be open for discussion at this poster.
