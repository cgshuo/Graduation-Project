 In the classical theory of social choice, a set of voters is called to rank a set of alternatives and a social ranking of the alternatives is generated. In this paper, we model rec-ommendation in the context of browsing systems as a social choice problem, where the set of voters and the set of al-ternatives both coincide with the set of objects in the data collection. We then propose an importance ranking method that strongly resembles the well known PageRank ranking system, and takes into account both the browsing behavior of the users and the intrinsic features of the objects in the collection. We apply the proposed approach in the context of multimedia browsing systems and show that it can gen-erate e ective recommendations and can scale well for large data collections.
 H.3.7 [ Information Storage and Retrieval ]: Digital Li-braries; H.5.1 [ Information Interfaces and Presenta-tion ]: Multimedia Information System Algorithms, Experimentation, Theory
Recommendation is becoming the new paradigm of search: interesting items nd the user instead of the user explicitly  X 
This work has been carried out partially under the nancial support of the Programma Faro (Finanziamento per l'Avvio di Ricerche Originali) in the framework of the LATINO Project: Un sistema innovativo di LocAlizzazione e Trac-ciamento di INdividui per l'Ottimizzazione di percorsi in ambienti indoor.
 searching for them; classical approaches to recommendation can be broadly classi ed into two major categories: content based recommendation and collaborative ltering .
In content based recommender systems [6], the utility of an item o for a user is estimated from the utility assigned by the same user to other items that are similar to o . One of the main drawbacks of similar techniques is that they cannot bene t from the great amount of information that is implicit in the behavior of other users. Instead, the main idea behind collaborative ltering is to associate each user to a set of other users having similar pro les and recommend-ing items based on the similarity between users, rather than on the similarity between data items themselves [9]. These strategies usually su er from the fact that a new data item will become available for recommendation only when enough users have seen and rated it, and it will not be possible to make reliable recommendations to a user who is not similar enough to any other user.

The e ectiveness of the recommendation process can be improved by combining content based ltering and collabo-rative strategies [4] and hybrid systems can be further im-proved by modeling recommendation as a social choice prob-lem. In the classical theory of social choice, as formulated by Arrow [3], a set of voters is called to rank a set of al-ternatives . Given the agents' individual rankings, a social ranking of the alternatives is generated. The theory stud-ies desired properties of the aggregation of agents' rankings into a social ranking [1]. In particular, Arrow's impossibility theorem shows that there is no aggregation rule that satis-es some minimal requirements, while by relaxing any of these requirements appropriate social aggregation rules can be de ned. The novel feature of ranking systems is that the set of agents and the set of alternatives coincide. Therefore, in this setting one may need to consider the transitive ef-fects of voting, when aggregating individual rankings into a social ranking. For example, if agent a reports on the im-portance of (i.e., votes for) agent b then this may in uence the credibility of a report by b on the importance of agent c . The ranking of agents based on other agents' input is fundamental to multi-agent systems [7] and it has become a central element of a variety of applications, where the most famous examples are Google's PageRank [5] and eBay's rep-utation system [8]. Axiomatic foundations of trust-based recommendation systems have been studied in [2].
In our work we model recommendation in the context of browsing systems as a social choice problem, where the set of voters and the set of alternatives both coincide with the set of objects in the data collection. Di erently from most work on trust-based recommendation, we do not assume that a subset of the agents has explicitly ranked a set of items or that a (partial) trust network (i.e., who trusts who) is known a priori, as in [2]. Instead, we infer links between data items (similar to links between web pages) from the dynamic behavior of the users and the features of objects in the dataset. To this aim, we assume that (i) an item o \links" similar items, and (ii) a user accessing item o 2 after item o corresponds to a link from o 1 to o 2 . Additionally, rather than providing the users with absolute recommendations, we aim at making recommendation context-dependent, where the context is determined by the current browsing session.
The paper is organized as follows. Section 2 introduces the proposed ranking method. Section 3 reports on preliminary experiments, and concluding remarks are given in Section 4.
Building an e ective recommender to support intelligent browsing of large data collections implies the capability of identifying the objects that are most likely to satisfy the in-terests of a user at any given point of her exploration of the collection. We will use the term \browsing session" to de-note an ordered sequence of interactions of the user with the system. At each step of a browsing session, the user chooses an object, by either accepting one of the recommendations, or jumping to any object in the collection. In this scenario, we need to address two fundamental questions: (i) How can we select a set of good candidates from the collection? (ii) How can we rank the set of candidates? Similarly to how the Google search engine works, we compute a global ranking of all the objects in the collection, and then use the computed scores to rank candidate objects.

In a citation ranking system the importance of a docu-ment is in uenced by the number and importance of other documents pointing to it. In the case of a generic collec-tion of digital objects, such as a collection of paintings in a virtual museum, usually there are no explicit links between objects. However, the fact that an object o i is chosen im-mediately after an object o j in the same browsing session can be interpreted as o j \linking" o i . This implies that o must be relevant to o j . Additionally, if o i is chosen after many di erent objects, we can conclude it must be impor-tant. Similarly, the fact that an object o i is very similar to o can also be interpreted as o j \linking" o i (and vice-versa).
In conclusion, we want to determine an absolute score for each object o in the dataset { we call this score rec-ommendation grade and denote it by ( o ) { that measures the importance of o and therefore the likelihood that a user will select it. We want to use this score to rank recommen-dations from a set of candidates and present the user with the top k ranked alternatives. In the following, we focus on presenting the proposed ranking method and a strategy to eciently compute it. For reason of space, we omit a discussion of the relevant axioms and refer the reader to [1].
Given a set O = { o 1 ; : : : ; o n } of objects, we can de ne the recommendation grade as follows: where w ij is the fraction of o j 's importance that is trans-ferred to o i , and of this de nition, the vector R = [ ( o 1 ) : : : ( o n )] computed as the solution to the following equation: where C = { w ij } is a matrix de ning how the importance of each object is transferred to other objects. C must satisfy certain conditions to guarantee that Equation 2 has a solu-tion and such a solution is unique. We will discuss how to build this matrix in Section 2.1, and describe a method to eciently compute the solution to Equation 2 in Section 2.2.
Given a set U = { u 1 ; : : : ; u m } of users, we de ne a local n  X  n browsing matrix A l = { a l a global n  X  n browsing matrix A = { a ij } . The element a of a local browsing matrix A l is de ned as the ratio of the number of times an object o i has been accessed by user u immediately after o j to the number of times any object in O has been accessed by u l immediately after o j . Similarly, a ij is de ned as the ratio of the number of times o i has been accessed by any user immediately after o j to the number of times any object in O has been accessed immediately af-ter o j . It is evident that  X  i; j  X  [1 ; n ] ; anonymous users contribute to A but not to any A l . Addi-tionally, we de ne the similarity matrix B = { b ij } as follows: where f sim is a similarity function de ned over O , is a threshold, and j , for each j , is a normalization factor which guarantees that ity between two given objects is below a given threshold , we set the corresponding element of the matrix to 0, which guarantees B to be sparse. The similarity matrix can be ef-ciently computed using indexes on the image database, but we omit the details for reasons of space. In order to compute customized rankings for each user, we rewrite Equation 2 as where R l = [ l ( o 1 ) : : : l ( o n )] T is the vector of recommen-dation grades, customized for user u l . In order to take into account the browsing behavior of the individual user, the overall behavior of the community of users, and the intrin-sic similarity between objects in the collection, we de ne C as a linear combination of A l , A , and B . However, we must rst observe that solving Equation 4 corresponds to nding the stationary vector of C l , i.e., the eigenvector with eigen-value 1. The Perron-Frobenius theorem ensures that a real square matrix with positive elements has a unique largest real eigenvalue and that the corresponding eigenvector has strictly positive components. Moreover, the largest eigen-value of a stochastic matrix is always 1. It is easy to observe that the elements of each column of A l , A , and B either sum up to one or are all 0. To make them into stochastic matrices, we introduce the following auxiliary matrices: where S is a function that associates with each matrix M = { m ij } a matrix S ( M ) = { s ij } de ned as follows:
In other words, stochastic matrices A l , A , and B are de-rived from A l , A , and B respectively, by replacing elements in columns of 0's with 1 =n . We can now de ne C l as
Browsing behavior and object similarity both contribute to the overall social ranking, with weights and 1  X  respec-tively. Additionally, the contribution of browsing behavior is a weighted sum of individual and collective behaviors. It is easy to see that this formulation addresses both the cold start and the anonymous user problems. When a user logs into the system for the rst time, her browsing matrix has all 0's, but the system is still able to make recommenda-tions, based on the behavior of the community of users and object similarity. As information about the user is collected over time, A l will start to in uence the recommendation process. Similarly, an anonymous user will be considered as a user whose browsing matrix is always all 0's (alternatively we can assume = 0 for anonymous users). C l is guaran-teed to be stochastic, as it results from a weighted sum of stochastic matrices. However, C l is not yet guaranteed to be positive. We then introduce a parameter , modeling the probability that the user will choose the next object in a totally random fashion, and we rede ne C l as follows. where J n is an n  X  n matrix of ones. Equation 8 guarantees that C l is stochastic and positive. Therefore, replacing C with C l in Equations 4, we obtain which is guaranteed to have a unique solution R l . In conclu-sion, the introduction of the factor , while contributing to model the behavior of the user, makes the problem solvable.
There are many ways to nd the eigenvectors of a square matrix. However, the challenge here is that the matrix C l has one column for each object in the collection. This means that C l might potentially have millions of columns and rows. We want to be able to solve Equation 9 for very large matri-ces C l . A method known as the power method can be used for nding the stationary vector of a square matrix. The power method consists in computing a sequence of vectors R l as follows: where R 0 l is an arbitrary initial vector whose elements sum up to one. The method iterates until convergence is reached or a given number of iterations has been performed. Under certain circumstances the power method converges to the stationary vector of the matrix, as proved below.
Assume that the eigenvalues of C l are 1 ; 2 ; : : : ; n that 1 = 1 &gt; | 2 | X | 3 | X  : : :  X | n | . In addition, assume the existence of a basis v i of eigenvectors for C l , with corre-sponding eigenvalues i . We can write the initial vector R as R 0 l = c 1  X  v 1 + c 2  X  v 2 + : : : + c n  X  v n , where c are arbitrary constants. Then, we compute R k l = C l  X  R until | R k l  X  R k 1 l | X  tol  X  X  R k 1 l | X  k  X  N , where tol is a relative tolerance and N is the maximum number of allowed iterations. Since the eigenvalues j with j  X  2 have absolute value smaller than one, we can conclude that k j  X  0 for all j  X  2. Therefore R k sponding to the eigenvalue 1. The rate at which R k l  X  R determined by | 2 | . In fact, the closer | 2 | is to 0, the faster that | 2 | &lt; 1, thus ensuring the convergence of the power method. Additionally, it can be proved that convergence is faster for higher values of . However, there is a trade-o in the choice of , since higher values also imply a greater weight assigned to the random behavior.

We now discuss how to compute R k l at each step of the power method, by leveraging the speci c nature of the ma-trix C l . Using Equations 7, 8 and 10, we can write: where 1 = (1  X  )  X   X  ; 2 = (1  X  )  X   X  (1  X  ) ; 3 = (1  X  )  X  (1  X  ) ; 4 = be computed as the sum of several terms, which in turn can be computed eciently. First, matrices A l , A , and B are sparse, therefore computing the three products A l  X  R k 1 A a sparse matrix and a vector, which can be done eciently. Second, all the rows of matrices S A l , S A , and S B are equal. Therefore, all the elements of the vector ( 1  X  S A l + 2 S )  X  R k 1 l are equal and can be computed by multiplying the rst row of the matrix S = 1  X  S A l + 2  X  S A + 3  X  S B { which is also sparse { and the vector R k 1 l . Finally, the elements of matrix 4  X  J n are all equal, therefore all the elements of the vector 4  X  J n  X  R k 1 l are equal to 4  X  which needs to be computed only once. Note that rankings need to be periodically recomputed as new objects can be added to or removed from the collection at any time, and new browsing data is collected on a continuous basis.
We can nally describe how to provide a user with a ranked list of recommendations. Assume that a user u l is currently watching object o j . We can de ne the set of can-didate recommendations as
In other words, the set of candidates includes the objects that have been accessed by at least one user within k steps from o j , with k between 1 and M , and the objects that are most similar to o j . Note that a positive element a k ij indicates that o i was accessed exactly k steps after o j once. The ranked list of recommendations is then generated by ranking the objects in C j according to scores in R l .
We implemented a prototype of the proposed framework and conducted preliminary experiments, which are brie y described in the following. We applied the proposed rec-ommendation approach to the case of virtual museum , i.e., a museum that o ers a web-based access to a multimedia collection of digital reproductions of paintings, educational videos and text documents. Di erently from a real world museum, where the order in which artifacts are viewed is mainly dictated by their spatial juxtaposition, a virtual mu-seum enables its users to access artifacts in any order they consider relevant. In particular, we evaluated the impact of the proposed system on enhancing a user's experience and compared its performance to an existing system for orga-nizing and browsing large photo collection ( Picasa Web Al-bums ), which does not take into account browsing behavior of users and intrinsic features of the multimedia objects.
The dataset used in the experiments consists of 5,000 paintings of various genres, artists and subjects. In particu-lar, the dataset includes 25 genres (e.g., Cubism, Baroque), about 100 artists (e.g., Caravaggio, Rubens) and about 50 subjects (e.g., Landscapes, Portraits, Mythology).
In the rst stage of our experiments, we asked a group of 20 undergraduate students to use the system for several days, in order to collect enough browsing data to compute meaningful browsing matrices. Browsing data collected at this stage was also used to learn and tune the parameters { namely , , and { that we introduced in Section 2.1 to scale the contribution of several factors in the computation of rankings (details are omitted for reasons of space).
We then asked a di erent group of 50 people to browse the collection and complete several browsing tasks (20 tasks per user) of di erent complexity (5 tasks for each complex-ity level), using Picasa (taxonomies were implemented as albums , folders and descriptions ). After this test, we asked them to browse once again the same collection with the as-sistance of our recommender system and complete other 20 tasks of the same complexity. We subdivided browsing tasks into four broad categories, as described below: 1. Low Complexity tasks ( T 1 ) { e.g. \explore at least 10 2. Medium Complexity tasks ( T 2 ) { e.g. \explore at least 3. High Complexity tasks ( T 3 ) { e.g. \explore at least 30 4. Very High Complexity tasks ( T 4 ) { e.g. \explore at
Note that the complexity of a task depends on several factors: the number of objects to explore, the type of de-sired features (either low or high-level), and the number of constraints (genre, artist, subject). We used empirical mea-surements of access complexity in terms of (i) time spent by the users to request and access all the objects for a given class of tasks ( t a ), and (ii) number of clicks necessary to col-lect all the requested objects for a given class of tasks ( n Table 1 reports the average values of t a and n c , for both Picasa and our system, for each of the four task complexity levels de ned earlier.

It is worth noting that the smaller t a and n c are, the easier and faster is for users to browse the collection and achieve their intended goals. Thus, the preliminary results presented here imply that our system allows to complete browsing tasks faster and provides a better (less frustrating) user experience. In addition, the fact that browsing tasks can be completed faster using our system with respect to a classical browsing system is an indication that recommenda-tions are e ective, as they allow a user to explore interesting and related objects one after another, without the interfer-ence of undesired items that would necessarily slow down the process.
In this paper, we have shown that recommendation in the context of browsing systems can be modeled as a social choice problem, where the set of voters and the set of alter-natives both coincide with the set of objects in the data col-lection. We have proposed an importance ranking method that strongly resembles the well known PageRank ranking system, and takes into account both the browsing behavior of the users and the intrinsic features of the objects in the collection. We have then applied the proposed recommenda-tion approach to the case of a virtual museum , and prelimi-nary experiments have shown that the system can generate e ective recommendations, improve a user's experience, and scale well for large data collections. [1] A. Altman and M. Tennenholtz. Axiomatic foundations [2] R. Andersen, C. Borgs, J. Chayes, U. Feige, [3] K. J. Arrow. Social Choice and Individual Values . John [4] R. Burke. The Adaptive Web: Methods and Strategies of [5] L. Page, S. Brin, R. Motwani, and T. Winograd. The [6] M. J. Pazzani and D. Billsus. The Adaptive Web: [7] P. Resnick, K. Kuwabara, R. Zeckhauser, and [8] P. Resnick and R. Zeckhauser. The Economics of the [9] B. M. Sarwar, J. A. Konstan, A. Borchers, J. Herlocker,
