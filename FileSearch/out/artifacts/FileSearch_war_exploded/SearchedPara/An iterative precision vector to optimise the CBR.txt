 1. Introduction
When people are accidentally irradiated, radiation protection experts establish dosimetric repo rts so as to highlight the injuries and evaluate their gravity. Parts of these reports are based on three dimensional (3D) numerical repres entations of human bodies called phantoms. The phantom chosen f or the dosimetric report must the exposed subject. We designed a system called EquiVox which can retrieve, personalise and gener ate such numerical phantoms and which is based on the case-based reasoning (CBR) paradigm. CBR is a problem solving method ( Kolodner, 1993 )and,moreprecisely,it adapts the solutions from similar known problems in order to solve new ones. It describes a target case problem, retrieves the source cases whose problem parts most resemble those of the target case, reuses (adapts) the solutions of these most similar source cases, revises the adapted source case and capitalises this new experience in the system's knowledge base.

In a previous investigation, we presented the application domain of EquiVox, its drawbacks, its general architecture and how it meets therequirementsofthisparticulardomain( Henriet et al., 2014 ). We also described the method that takes the subject's height as an input parameter in order to adapt 3D numerical representations of the lungs, oesophagus and heart using arti fi cial neural networks (ANN) ( Minsky, 1952 ). As Butdee and Tichkiewitch (2011) , we designed and trained ANN in order to use them during the adaptation phase of our CBR system: the adaptation module of EquiVox interpolates the position of each point of the co ntours of the subject's organ phantoms. We considered the trained ANN to be the rules of the rule-based adaptation ( Melis et al., 1998 )moduleofEquiVox.Asin the differential adaptation ( Fuchs et al., 2000 ), this module uses the differences between the problem parts of target and source cases as input parameters. Craw et al. (2006) also explored many possibilities to use learning algorithms during the adaptation process and combined them to different classi fi ers. Since they had to deal with a lot of cases at their disposal, Jung et al. (2009) ,and Lofty and Mohamed (2003) as well, decided to implement ANN as adaptation tools for their CBR system. Nevertheless, ANN must be trained with a dataset before being used as inte rpolation tools, and these studies put the stress on the importance o f the ANN learningset. This has also been highlighted by Chatterjee and Campbell (1997) in another application that used ANN. Since we suspected that some of the EquiVox phantoms generated interpolation errors, a value was associated with each available phantom in our previous study ( Henriet and Chatonnay, 2013 ). If the associated value was equal to 0 then the phantom was excluded from the training and validation sets whereas it was included if equal to 1. Combining all the possible values, we generated all the possible sets to train and validate the ANN. We observed that (1) excluding phantoms could generate more accurate interpolators, (2) there was not an optimum combination vector common to all the tested target cases, and (3) furthermore, sometimes, the exclusion of the phantom most similar to the target case produces better results than when it is included in the training set.
 phantoms, it was not yet possible to use it in real situations.
Indeed, one of the method's main drawbacks is that it cannot a priori choose the most optimised dataset. The present investiga-tion therefore aims at proposing a generic method capable of constructing the best set of phantoms in order to train and validate an interpolation tool. Considering these previous results, we assume one dataset must be constructed speci fi cally for each target case. We also want to go a step further and not only include or exclude phantoms, but also introduce a kind of fuzziness which may be expressed as  X  regarding the problem part of the target case, it should be relevant to take into account a little of this phantom and a little more of this other one  X  . Thus, the values are no longer a combination of values equal to 0 or 1, but become vectors of real values between 0 and 1.
 help) the accuracy of the adapted solutions. Cordier et al. (2006) proposed the reuse in the adaptation phase of remarks made by users during revision processes. Approaches such as that of Begum et al. (2009) and Negny et al. (2010) are also interesting for the way inaccuracy is introduced during the retrieval process: fuzzy matching metrics are used to compute the similarity of the problem parts.
Liang et al. (2012) introduced vectors computed by using statistical techniques to retrieve the most similar cases in their CBR system dedicated to safety assessment of thermal power plants. For their part, Chebel-Morello et al. (2013) stress the necessity of maintaining the case base and of updating the entire knowledge base during the capitalisation phase. Lieber cons iders that adaptation consists in modifying knowledge in the sense meant by the Revision Theory ( Lieber, 2007 ) and applied this conservative adaptation to the resolution of spatial and temporal problems ( Dufour-Lussier et al., 2012 ). Nevertheless, interpolation tools are black boxes for users and proposed a tool capable of extracting rules from intelligible knowl-edge, whereas Trace-Based Reasoning systems base their knowledge on software traces and logs ( Cordier et al., 2014; Champalle et al., 2014 ). This state of the art led us to use any known inaccuracies to optimise interpolation training.
 optimise the use of interpolation tools during CBR system adapta-tion. We then present its implementation on the EquiVox plat-form, and fi nally show and discuss its performance. 2. Method of the adaptation rules. 2.1. Case model association of problem and solution parts. The problem part can be represented using a set of N descriptors. Thus, a source case case can be de fi ned as follows: and a target case case t as
In this model, we will assume that all the descriptor values are both integer and real values, as is the case in EquiVox. 2.2. Retrieval phase their similarity to the target case. We implemented a classical version of the k-Nearest Neighbour ( kNN ) algorithm ( Cover and
Hart, 1967 ) which computes the distance between each descriptor of target and source case problems.
 follows:
S i  X  where  X  k is the difference between the maximum and the minimum possible values that the descriptor d k can take. The value of S i is always between 0 and 1. The greater the similarity of case i to case t , the closer the S i value is to 1. 2.3. Adaptation phase in problem descriptors to those in solution descriptors. When a problem descriptor d i k in fl uences a solution element e  X  d k i ; e k j ;  X  I  X  e k j j d k j  X  X  X  .
 tion tools as in fl uence functions of sol t . Thus, we assume case  X  pb MS ; sol MS  X  is the source case the most similar to case means S MS Z S i , 8 i A  X  where  X  is the set of all the source cases.
We consider the function that interpolates sol t , taking the distance between pb t and pb MS , pb t , and sol MS as input parameters. For this reason, case MS is named reference case . We note Intp MS interpolation function and we simply note the interpolation of sol t by Intp MS  X  X  as sol t  X  Intp MS  X  pb t  X  .
 output values (solution elements) are linked to input parameters (problem descriptors) through pol ynomial functions. Quasi-Newton polynomes, Splines functions, Arti fi cial Neural Networks (ANN) and
Fuzzy-ANN are all of this type of functions. A preliminary learning phase is required before interpola tions for this kind of tool. In most cases, the learning step ends when the mean distance between interpolated and expected values i s inferior to a given threshold (
The learning set is composed of the source cases of the CBR system (  X  ). Actually, when interpolation tools are used as in fl tions of CBR adaptation, this learning phase produces the adaptation rules. L MS  X   X  ;  X   X  denotes the function that learns how to interpolate each solution part of the cases of  X  taking case MS as the reference parameter and  X  as the threshold. Consequently, the result of
L MS  X   X  ;  X   X  is the interpolation function Intp MS  X  X  . 2.3.1. Con fi guration of adaptation rules inaccuracy of the interpolations of known cases in an iterative manner. Hence, it is possible to quantify the accuracy of the interpolation of source cases. Indeed, if dist sol  X  sol i ; distance between the solutions of the cases case i and case possible to compute the distance between source case solutions and their interpolations using the adaptation rules. Thus, in order to optimise interpolation accuracy, we explored the possibility of replacing the learning threshold (  X  ) by a vector of thresholds, each element of this vector being the distance between the interpolated and expected solution of a single source case. Consequently, it is possible to design an iterative algorithm to create adaptation rules.
In addition, we consider the fact that it is possible to adapt the solution of a target case taking any source case case i of reference.

Thus, assuming  X   X  is the set of adaptation rules over the set of source cases  X  , each rule a i A  X   X  is de fi ned as a set of one source case, one vector and two functions.
  X   X   X  where
 X  is the learning set; case i is the source case of  X  taken as reference by a i ;
L i  X   X  ;  X  i  X  is the function which learns how to interpolate each case j of  X  with a precision of  X  i ; j and considering case reference; and Intp i  X  X  is the interpolation function computed by L
Each  X  i is an iterative vector computed from 0 to order n as follows: n  X  0  X   X  ; 8 j A f 1 ;  X  ; Card  X   X   X g Intp i  X  X   X  L i  X   X  ;  X  n i  X  while  X  J  X  n  X  1 i J o J  X  n i J  X f n  X  n  X  1
Intp i  X  X   X  L i  X   X  ;  X  n i  X  g  X   X  n 1 i ; j 8 j A f 1 ; ... ; Card  X   X   X g Intp i  X  X   X  L i  X   X  ;  X  i  X  where J  X  n i J is the euclidian norm of vector  X  i at the order n : J
In addition, the distances obtained between interpolated and expected solutions with all the rules of  X   X  are stored in the Interpolation Matrix and noted as M 2.3.2. Choice of the rule to adapt a target case
In order to adapt the solution of a target case case t , 3 steps are required: (1) considering the most similar source case case given as result by the retrieval phase of the CBR system must be taken into account to then, (2) choose the rule a opt which adapts with the greatest accuracy case MS : a opt  X  dist sol  X  sol MS ; Intp opt  X  pb MS  X  X  r dist sol  X  sol 8 i
A f 1 ; ... ; Card  X   X   X g (actually, a opt is chosen observing the column corresponding to case MS in the M I matrix; thus, at this step, case may differ from case MS since, as we observed in our previous investigation ( Henriet and Chatonnay, 2013 ), a greater accuracy was sometimes obtained through exclusion of the most similar source case from the learning set), and (3) interpolate sol sol t  X  Intp
Indeed,  X  i ; j quanti fi es the inaccuracy of the adaptation of the source case i when case i is taken as the reference case. Thus, this method proposes a way to take into account capitalised experience since the choice of the adaptation rule is guided by these known users during this revision phase and, thus, be taken into account in the adaptation rules.

Consequently, the necessary and suf fi cient condition to apply a rule is de fi ned by the accuracy of the interpolation ( Int sol
MS is interpolated with the greatest precision by Int opt which takes as reference case opt ,  X  opt and have learnt using L 3. EquiVox application
As explained in the introduction, EquiVox is a platform that retrieves, generates, personalises and capitalises phantoms used by radiation protection experts in order to establish the gravity of accidental exposure to radiation. The initial phantoms of EquiVox were designed and approved and are now used by radiation protection experts of the French National Institute for Radiological Protection and Nuclear Safety ( Farah et al., 2011 ). The phantoms generated by the fi rst version of EquiVox were approved by the same experts ( Henriet et al., 2012 ) who have since constantly veri fi ed that all the phantoms generated by the different versions of EquiVox have been of greater or equal quality.

Fig. 1 presents the technologies that were used and the data over the EquiVox architecture. The biometric data corresponding to the phantoms are stored under an ontology scheme (data fl The contours of the organs are extracted (data fl ow  X  1) and then transmitted to the learning module (data fl ow  X  2), which creates the knowledge for adaptations (data fl ow  X  3). When a new phantom is required, the target case is described (data fl ow  X  4) and then transmitted to the retrieval module (data fl ow  X  5) which determines its similarity to the source cases (data fl ow  X  6). If required by the the interpolation module (data fl ow  X  8) which loads the adaptation knowledge (data fl ow  X  9) and the coordinates of the contour of the organinquestion(data fl ow  X  10) in order to interpolate the organ contours of the target case (data fl ow  X  11). The organ contours are then revised if necessary, and the missing organs are added by the experts in order to obtain a whole and accurate phantom (data  X  12). Finally, the revised phantom is capitalised and stored in the knowledgebaseofEquiVox(data fl ow  X  13). 3.1. Case modelling
Clairand et al. (2000) have demonstrated that the volume and shape of the lungs depend only on the subject's height. The other organs of the thorax occupy the empty areas between and around the lungs. Thus, in EquiVox, the problem part of a case case described with the subject's height pb i  X  X  h i  X  . The solution part is a set of 3D Contours of Organs (3DOC): sol i  X  X  P O i  X  X  X  P P i ; P Delauney mesh: P O i  X f C i ; O 1 ; ... ; C i ; O q g where C coordinates of the point j of the organ O of the case i : C y ... g X  . This study is focused on lung adaptation since their adaptation accuracy in fl uences the accuracy of the entire phantom. Distance between two solution parts of two cases is de fi ned as 3.2. Retrieval phase The purpose of this phase is to sort the organ contours of the EquiVox case base according to their similarity to case t presented in Section 2.2 , a classical algorithm for similarity calculation was used, namely the kNN algorithm. Considering 20 cm r possible human height r 250 cm, Eq. (1) becomes
S i  X  230 j h i h t j 230 3.3. Adaptation of 3D lung contours and h t are too dissimilar, the expert may decide to adapt case even to create new organ contours which may be re-used for other problems later.
 network were examined. With 12 phantoms at our disposal, for the splines tests we proceeded as if there were only 11 source cases in EquiVox, reserving the last phantom for comparison to a possible target case.
 and, focusing on lung adaptation, Eq. (2) becomes 3.4. Example of the choice of the adaptation rule order to adapt 3D lung contours through spline interpolations when the height of the target case is equal to 167.54 cm. In this case, case 3 is retrieved by the previous phase of the CBR cycle ( MS  X  3). We then consider the corresponding column of M explained in Section 2.3.2 , this matrix contains all the mean distances between interpolated and expected positions of P permits interpolation of this phantom with the greatest accuracy (2.11 mm, whereas this distance varies from 10.38 mm to 62.46 mm with all the other rules). Consequently opt  X  3, and the adaptation rule that will be chosen for the adaptation of the target case considered is a 3  X  X  X  h 3 ; P 3  X  ;  X  3 ; L 3  X   X  ;  X  3  X  ; Intp 3  X  X  X  4. Results
Personal Computer equipped with an Intel Core i3 CPU, 2.53 GHz, and 4 GiB RAM. Prot X g X  was used to store the descriptor values. Three programming languages were used: Java, C/C  X  X  and Matlab. The retrieval phase, the GUIs, and the storage phase modules were developed in Java and Matlab (for Splines) or C/C  X  X  (for ANN) programs for the adaptation phase. All these programs were developed by our team. The phantoms were drawn using Rhino3D.

As shown in Table 1 ,forphantoms P 5 , P 6 and P 8 ,thebasic interpolation gave from 1.7 to 3.1% more accurate results than the optimised rules. For phantom P 7 , both methods gave the same mean distances between interpolated and expected point coordinates. For all the other cases, the optimised adaptation increased the accuracy of the solutions (up to 18.3% for P optimised rules increased the precision of the adapted phan-toms by an average of about 4%.

We also tested this optimisation using an arti fi cial neural network as an interpolation tool and compared the results to the best results obtained with the same interpolation tool without optimisation. In addition, we compared the accuracies obtained by using the optimised method presented in the present paper with the best ones obtained with our previous optimisation method ( Henriet and Chatonnay, 2013 ). These results are reported in Table 2 . Using the best con fi guration from the previous optimisa-tion method, we increased the accuracy of the interpolated phantom P 2 by 1.62 mm while this new method increases the accuracy by 1.60 mm. For phantom P 8 , the gain obtained with the previous method was 0.53 mm, whereas it was 0.52 mm with the new method. For phantom P 11 , the gain obtained with the previous method was 0.76 mm, whereas it was 0.77 mm with the new method. In fact, the increased accuracy obtained with the two methods was nearly identical. The main problem with the previous interpolation method was that it was impossible to predict which dataset optimises the interpolation, whereas this new optimisation method computes this optimised dataset for each target case and produces phantoms of nearly equal quality. 5. Discussion
This generic method enables physicians to systematically fi the best or nearly the best interpolation learning set needed to adapt a given solution. Indeed, even if the learning set contains noisy data, or even if it is small, a sub-learning set can be extracted and produce an optimised adaptation.

More generally, this method takes into account accuracy auto-matically quanti fi ed by the system in order to adapt solutions. Hence, accuracy computed during the revision process can be incorporated into the adaptation knowledge creation. The method helps build optimised rules due to the automatic validation of the adaptation rules applied to the known cases. The user's evalua-tions of solutions ( revision phase of the CBR cycle) can also be taken into account by the system in this process since their evaluation quanti fi cations can be the initial values set of the vectors  X  i 0 . These initial values can be stored by the system during the retain process of the CBR cycle in order to rebuild the adaptation knowledge.

This generic method has been shown to increase the accuracy of a spline interpolator. In our previous versions, we used ANN as adaptation tools in EquiVox ( Henriet et al., 2014; Henriet and Chatonnay, 2013 ). The results presented in this study show that this method optimises adaptations using ANN.

One of the drawbacks highlighted by our previous studies was the fact that interpolation tools required a lot of known data, whereas CBR systems should be used when the known cases are not numerous. With this method, even interpolation tools, whose relevance increases as the number of learning set elements rises, can be used by CBR systems having a limited number of source cases. Furthermore, the more cases the CBR system capitalises, the less necessary this method will be.

Nevertheless, one of the limitations of this method is the delay required to construct the adaptation knowledge. Though only a few seconds are necessary to retrieve and adapt solutions, several days are required to compute matrixes W and M I . Thus, when a new case must be capitalised, the updating delay for the adapta-tion knowledge is too long and may block the system's ability to provide solutions. Our ambition is now to build a distributed architecture for EquiVox that can provide solutions while the knowledge is being updated ( Henriet and Lang, 2014 ). 6. Conclusion and future work
In this paper we propose a method to optimise an interpolation tool used as an adaptation process in a CBR system. This new method enables us to automatically generate a dataset to train the interpolation tool that adapts target case solutions, and this with nearly the same accuracy as the previous method we designed. One of the drawbacks of our previous method lies in the fact that it was not possible to know beforehand which dataset was the best to train the interpolation tool that adapts target case solutions. Indeed, our previous method only emphasised the fact that there exists an optimised dataset for each target case, whereas the method described in the present investigation generates it auto-matically. The main contribution of our proposition is an iteration over the error vector matrix to obtain a minimal error vector. In most cases, three steps of iterations are suf fi cient to obtain an optimal error vector. These vectors, used to produce Splines and ANN, lead to very precise interpolations.

The optimisation we can produce with this new method is not limited to lungs. Other organs and groups of organs can be similarly subjected to interpolation. In addition, the method can be applied to other fi elds in which interpolation is possible or required. Our current proposition uses a one-criterion order which has been shown to be the relevant one: the height of the subject ( Henriet et al., 2012 ). We are now working on the integration of multi-criteria reasoning.
 Acknowledgements
The authors wish to thank the Institut National de la Sant X  et de la Recherche M X dicale , the Ligue Contre le Cancer , the Pays de Montb X liard Agglom X ration and the Soci X t X  Fran X aise de Radio-protection for their fi nancial aid and the National Institute of Radiological Protection and Nuclear Safety for their expertise. They also thank Mr. John Olsen for his help with the English language. References
