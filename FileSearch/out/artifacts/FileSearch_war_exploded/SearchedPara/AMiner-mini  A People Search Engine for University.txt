 We present a distributed academic search and mining system  X  AMiner -mini. The system offers intra -and inter -university level academic search and mining services. It integrates academic data from multiple sources and performs disambiguation for people names, which is a fundamental issue for searching people. We employ a two -phases approach that formalizes the disambiguatio n problem into a HMRF framework, which significantly improves the disambiguation performance. Based on the disambiguation results, AMiner -mini offers a people search function, which returns experts (or related researchers) for a given query b y the user. The user can also choose different metrics to rank the search results and explore the results from different dimensions. The system is designed in a distributed structure . It can be deployed in a university as a stand -alone system for finding t he right people who are working on a research topic. Multiple distributed systems can be also connected via Web services and perform search or mining in an asynchronous way and return the combination results. We have deployed the system in Tsinghua University and feedback from university academic users shows that the system worked well and achieved its primary objective.
 H.3.3 [ Information System ]: Information Search and Retrieval; H.2.8 [ Database Management ]: Database App lications Algorithms, Experimentation Name Disambiguation ; Academic Search; Distributed System With the rapid proliferation of digital academic information, it is becoming more and more challenging for mining the heterogeneous academic knowledge in order to satisfy different usage scenarios like expert finding [2,3] and academic search [ 5]. For example, in a university, students may want to find the best advisors to work with; faculties are trying to look for the be st collaborators from different research fields . Traditional keyword based document search is clearly far from sufficient to meet the se requirements.
 Traditional d igital librar y system [4] is mainly designed to manage the digital data , e.g., to to coll ect digital information, build index and offer retrieval services for users. However, the trend of Web turns to be more people -centric rather than data-centric . Vivo System is a university -oriented system led by Cornell and shares motivation s as mentioned before. However, it is also not in particular designed for searching people.
 In this work , we present AMiner -mini system, a people search engine for university. The system is derived from ArnetMiner [ 5], but with more people -centric feature and with a distributed structure . The system has two dist inct advantages : First of all, it can easily incorporate data inside a university (e.g., the librar y data and the faculty information) , which not only offers a way to seamlessly integrate with existing systems, but also be able to use those data to improve the performance of name disambiguation; Second , we design and implement AMiner -mini as distributed system so that it can easily deploy to and connect other universities, which enables the system to conduct int er-university distributed search [4] . System X  X  major contributions can be concluded as follows: l X  Name Disambiguation : System employ s a two -phases name l X  Academic Search: We consider three factors, including l X  Distributed Structure: We propose distributed structure and In the following sections, we first introduc e the system architecture and then explain the core technologies used in the system. Finally, we give the demonstration plan. AMiner -mini is a people search engine for univer sities and it is designed on a distributed platform . Figure 1 shows system architecture , with each node representing a single university. The system mainly consists of the following components: l X  Data Preparation: In this component, we pre process data l X  Core Techniques: This component is our major technical l X  System Applications: We implement system applications l X  Distributed Structure: AMiner -mini is designed with a Different faculties may share identical names . Th is results in the name ambiguity problem. Name ambiguity will greatly hurt the quality of most academic search and mining serv ices. Thus we tackle name ambiguity as the first step. Name disambiguation generally includ es two challenging subtasks : (a) how to cluster info rmation of one person together; and (b) how to determine the number of persons who have the same name [1]. In AM iner -mini, we use a two -phases approach to solve these challenges . In the approach , we leverage human labeled data as supervised constraints to help improve clustering performances.
 More specifically , we cooperated with university library and accessed official human-labeled entities of different departments, which is a strong constraint that helps clustering and assignment . Disambiguation scal e is set in a department range and we assigned entities (different kinds of information) to faculties within the department. Official labeled data is limited, but it can greatly improve algorithm performances via work ing as primarily assigned information.
 Further , w e integrate the above result into a probabilistic HMRF framework [1][5]. We first enrich academic knowledge from extern digital publisher, which do es not have department information as constrains . We heuristically define paper attributes, paper relations and author attributes from first phase result as features for HMRF objective function [5] . During assignment iterations [1], we cluster primarily assigned papers together with the unassigned. The primarily assigned information is helpful consi dering it c an  X  X ropagate  X  during iteration. Besides, the primarily assigned information could work as  X  X luster atom X  to improve clustering performances [ 1]. We employ supervised learning methods such as Na X ve Bayes , and SVM to train a classification model for improving the clustering performance [6]. Academic Search is to find expertise entities (people and other entities like courses ) given a query and the key is to measure ranking scores [3]. In AM iner -mini, we studied intra -university academic search. The ranking score is: factors,  X  are their weights and set as 0.6, 0.2, 0.2 separately. Relevance. Relevance is used to measure relevance between queries and entities. Given a query , for example  X  X ata mining X , users not only want to find entities containing those words, but also intend to search for entities on  X  X ata mining  X  topics [ 5]. Blei et al. introduces LDA , an effective topic model for text and has been applied to academic search [ 3]. However, LDA alone is usually considered as  X  X eneral X  but  X  X ot specific X , so  X  X oarse X  for search [ 3]. To balance between  X  X enerali ty X  and  X  X pecificity X , we combined LDA with LM . Importance intra. . Importance intra is used to measure intra -university entity importance. W e define  X  X rominent importance X  to distinguish the prominent in a university . We heuristically assign higher grades to an entity if it enjoys some titles defined as important such as  X  fellow of Chinese Academy of S cience X  . W e also consider the  X  network importance X . We build social network from co -authorship of faculties and use random walk with restart to rank entitie s [3]. Popularity intra . Popularity intra is used to measure intra -university entity popularity. S ystem logs user behaviors and calculate  X  X eedback popularity X  to better understand and measure their preferences [ 7]. For example, if most users click on the t hird entity in search result, we would treat the third one as more popular than the former two.
 Current system collects 10 ,000+ faculties, 40 ,000+ courses, and 90, 000+ papers in Tsinghua University . System has been put into operation since early 2014. At the beginning, Popularity initialized with the same weight for all entities. We test different weights of LDA and LM. Regarding baselines, we use the TFIDF method implemented in Lucene, popular free software for indexing and search full -text. We test 90 queries and asked 5 computer science majors ( 2 undergraduate s, 1 PhD students and 2 engineer s) to label the search result . 
Search Methods P@5 P@10 MAP 0.3 LDA + 0.7 LM 0.876 0.8 0.912 0.2 LDA + 0 .8 LM 0.864 0.81 0.89 0.0 LDA + 1.0 LM 0.872 0.77 0.79 Lucene (TFIDF ) 0.773 0.726 0.73 As shown in the table, we can see the combinati on model obviously outperforms L ucene in terms of P@5, P@10 ( Precision at top 5 and 10), and also MAP. Regarding t he weight configuration for combining LDA and LM, 0.3 for LDA and 0.7 for LM achieves the best performance . AMiner -mini is designed with a distributed architecture. It can deploy to multiple different universities and the search f unction can be connect ed each other . For Cohesion, every single university is considered as a node can work s alone. For Concurrency, every node c ould concurrently react to the system and fasten the responding speed [ 8]. With the distributed structure, the system is able to offer inter -university distributed search [4]. Users search a query and the master server sends it to all other server nodes. All nodes concurrently conduct academic search and report back the result. The controller collects all searc h results then re -ranks it. The re -ranking score is: where Importance inte r denotes the inter -university importance and Pop ularity inter denotes the inter -university popularity, which are modified based on intra -university academic search.
 Importance inter . Importance inter is used to measure inter -university entity importance. Entity importance from different universities varies . For example, users may view faculties from Tsinghua and BUPT differently. The challenge is how to quantitatively measure the  X  University importance X . We can employ public school ranking list and user log statistic to initially calculate the score. Popula rity inter . Popularity inter is used to measure inter -university entity popularity. With the distributed structure, search result s are largely enriched and simply use  X  X eedback popularity X  may cause search dilemma. For example, A is ranked before B and they are both very accurate for a search query. However, users may seldom notice B due to search page settings and increase A  X  X  popularity score unfairly , which somehow just violates the real meaning of popularity: to let the users define the most popular entit ies. W e define  X  X erendipity popularity X . Serendipity concern with the novelty of inter -university search result [9] and the challenge is how to assign  X  X erendipity popularity X  score fairly and effectively. Heuristically, we randomly set  X  X erendipity popularity X  scores. The overall Popularity inter is as follows: where Popularity intra is the intra -university popularity score and Serendipity is the random serendipity score in a reasonable range,  X  is used to normalize scores to the same scale. We will present AMiner -mini in the following aspects: l X  First, we will use a poster to give an overview of system l X  Next, we will describe system X  X  core techniques including l X  After that, we will introduce proposed distributed structure l X  Finally, we will share our thoughts on the strengths and The work is supported by the National High -tech R&amp;D Program (No. 2014AA015103), National Basic Research Program of China (No. 2014CB340500), Natural Science Foundation of China (No. 61222212), and Beijing key lab of networked multimedia. We also would like to thank Tsinghua University Library for official data and open test platform. [1] J. Tang, A.C.M. Fong, B, Wang, and J. Zhang. A Unified [2] K. Balog, Y. Fang, M. de Rijke, P. Serdyukov and L. Si. [3] J. Tang, J . Zhang, R. Jin, Z . Yang, K . Cai, L . Zhang, and Z . [4] R. Baeza -Yates and B. Ribeiro -Neto. Modern Information [5] J. Tang, J. Zhang , L. Yao, J. Li, L. Zhang and Z. Su . [6] A. Ferrreira, M. Gnocalves, and A. Laender. A Brief Survey [7] T. Joachims, L. Granka, H. Hembrooke, F. Radlinski, and G. [8] G. Coulouris, J. Dollimore, and T. Kindberg. Distributed [9] M. Ge, C. Delgado -Battenfeld, and D. Jannach. Beyond 
