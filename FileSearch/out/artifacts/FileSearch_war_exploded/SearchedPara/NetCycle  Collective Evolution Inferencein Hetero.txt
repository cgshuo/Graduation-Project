 Collective inference has attracted considerable attention in the last decade, where the response variables within a group of instances are correlated and should be inferred collective-ly, instead of independently. Previous works on collective inference mainly focus on exploiting the autocorrelation a-mong instances in a static network during the inference pro-cess. There are also approaches on time series prediction, which mainly exploit the autocorrelation within an instance at di ff erent time points during the inference process. How-ever, in many real-world applications, the response variables of related instances can co-evolve over time and their evo-lutions are not following a static correlation across time, but are following an internal life cycle . In this paper, we study the problem of collective evolution inference , where the goal is to predict the values of the response variables for a group of related instances at the end of their life cycles. This problem is extremely important for various applica-tions, e.g. , predicting fund-raising results in crowd-funding and predicting gene-expression levels in bioinformatics. This problem is also highly challenging because di ff erent instances in the network can co-evolve over time and they can be at di ff erent stages of their life cycles and thus have di ff eren-t evolving patterns. Moreover, the instances in collective evolution inference problems are usually connected through heterogeneous information networks , which involve complex relationships among the instances interconnected by multi-ple types of links. We propose an approach, called NetCy-cle , by incorporating information from both the correlation among related instances and their life cycles. We compared our approach with existing methods of collective inference and time series analysis on two real-world networks. The re-sults demonstrate that our proposed approach can improve the inference performance by considering the autocorrela-tion through networks and the life cycles of the instances. H.2.8 [ Database Management ]: Database Applications-Data Mining Collective Inference, Evolution Inference, Heterogeneous In-formation Networks, Graph Mining, Data Mining
Conventional supervised learning usually assumes that the instances are independent and identically distributed (i.i.d.), where the response variables of di ff erent instances are in-ferred independently. In many relational data, however, the response variables of di ff erent instances can be related. For example, in financial networks, the loan listings borrowed by the same individual are more likely to share similar default risks than those borrowed by di ff erent people. An e ff ective model for these relational data should be able to capture the dependencies among di ff erent instances during the in-ference process. Motivated by this challenge, collective in-ference problem [17, 15] has attracted much attention in recent years, where the response variables within a group of instances are correlated and should be inferred collectively.
In the literature, collective inference for both classifica-tion and regression problems, has been extensively studied [17, 15, 1, 10]. Previous works on collective inference main-ly focus on exploiting the autocorrelation among instances in a static network during the inference process, as shown in Figure 2(a). However, in many real-world applications, the response variables of the instances can evolve over time, and the network can involve multiple kinds of relationships among the instances. For example, in P2P Lending network-s ,suchas Prosper.com and Kickstarter.com , the financial ac-tivities of di ff erent loan listings can evolve over their entire fund-raising periods. These loan listings are interacting with di ff erent borrowers and lenders [14], as shown in Figure 1(a). In PPI networks , the expression-level of di ff erent genes can also change over time, which is regulated by their complex chemical reactions with di ff erent molecules [18]. Besides, transportation networks , such as road tra ffi c networks and public transit networks, can also involve multiple evolving attributes, representing the tra ffi c volumes of di ff erent road segments or subway stations.

There are many approaches on time series prediction, which mainly exploit the autocorrelation within an instance at d-i ff erent time points during the inference process [5, 12, 9]. However, in many real-world applications, the response vari-ables of related instances can co-evolve over time and their evolutions are not following a static correlation across time, but are following an internal life cycle . For example, in the fund-raising networks, evolution of the fund-raising activi-ties in a loan listing usually follows its fund-raising period (life cycle), which includes a predefined starting time and ending time. Activities of the loan listing may show di ff er-ent patterns at di ff erent stages of its life cycle, as shown in Figure 1(c). This problem can be called as evolution infer-ence , where each instance can evolve within its life cycle, and the response variable is associated with a series of val-ues. As shown in Figure 2(b), the goal of evolution inference is to estimate y e i i .

In this paper, we study the problem of collective evolu-tion inference , where the goal is to predict the values of the response variables for a group of related instances at the end of their life cycles. This problem is very impor-tant in various applications, e.g. , predicting fund-raising re-sults in crowd-funding and predicting gene-expression levels in bioinformatics. Formally, collective evolution inference problem corresponds to predicting the response variables of a group of related instances at the end of their life cy-cles. This problem is highly challenging because di ff erent instances in the network can co-evolve over time and they can be at di ff erent stages of their life cycles and thus have di ff erent evolving patterns. We summarize the unique chal-lenges of collective evolution inference as follows:  X  Collective Evolution with Life Cycles : One major challenge of the collective evolution inference problem lies in the fact that the response variables values (response val-ues for short) of the instances are evolving with a certain life cycle. Fortunately, the instances which have strong cor-relations are more likely to share similar evolution pattern during their life cycles. To better understand the collective evolution with life cycles, we give an example in Figures 1(b) and 1(c), which describes the evolution of the fund-raising ratio of the loan listings in P2P lending networks. As shown in Figure 1(b), the fund-raising ratio is evolving during fund-raising period. It is easy to think that the fund-raising ratio at time T depends on previous status at time T  X  1. However, the learning strategy of collective inference strictly follows the assumption that the response values of each instance will not change, which ignores the temporal information of the instances. Moreover, if we align the evolution of each loan listing by fund-raising period, as shown in Figure 1(c), the loan listings 1 and 3 which created by same borrower are more likely to obey similar fund-raising tendency during their life cycles. But collective inference problems usually (a) Collective Inference (b) Evolution Inference Figure 2: Comparison of di ff erent inference prob-lems. Y i denotes the response variable of the i -th instance. y k i denotes the value of response variable Y at time point k .Here s i / e i is the starting/ending time point of the life cycle in the i -th instance. The instances directly linked by a dotted line are related. focus on a  X  X napshot X  of dynamic networks, while the snap-shot captures the network at a certain time point. At a certain time point, the instances may be at di ff erent stages of their life cycles, which increased the di ffi culty of collective evolution inference.  X  Heterogeneous Dependencies : Another challenge of collective evolution inference is the complex correlations a-mong instances in HINs. It turns out strongly connected instances are more likely to show up with similar growth/ evolving patterns in the same stages of their life cycles. The fundamental problem is how to e ff ectively use the informa-tion provided by these multiple types of nodes and links, as well as the evolving tendency of each node. Collective infer-ence approaches usually focus on homogeneous networks[1, 16] with one type of links and nodes. It is necessary to s-tudy how to exploit the complex dependencies among nodes X  evolution in their life cycles in HINs, in order to predict the related instances more e ff ectively.

In this paper, we first present collective evolution infer-ence problem, which extends collective inference problem into dynamic networks, with the concept of life cycle. Then, we design a novel algorithm to solve the collective evolution inference problem, called NetCycle, which collectively infer the final values of a collection of nodes in a dynamic hetero-geneous network by modeling the evolution tendency of the response variable. Finally, the experiments on real-world networks indicate the e ff ectiveness of our algorithm. To our .
 y i is only observed on the first k stages of its life cycle at &amp; .
 denotes a composite relationship between instances in V 1 best knowledge, this kind of problem has not been studied in the literature until recently.
In this section, we first introduce some related concepts and notations, then define the problem.
Suppose we have a data set D = { ( x i , y i ,s i ,e i ) } n instances. Here x i  X  R d corresponds to the feature vec-tor of the i -th instance in the d -dimensional space. y i ! y for the response variable Y i of the i -th instance. Y i is evolv-ing between time s i (starting time) and e i (ending time). # t  X  [ s i ,e i ] ,y t i corresponds to the value of Y i the response variable Y i is only evolving during the period of time [ s i ,e i ], i.e. ,the life cycle of the i -th instance. s is the starting time of the life cycle for Y i , when the re-sponse variable Y i starts to evolve. e i is the ending time of the life cycle for Y i , after which the response variable Y i stops changing. Each instance in D can have a di ff er-ent life cycle, with di ff erent starting time and ending time. X = { x 1 ,  X  X  X  , x n } represents the set of features for all in-stances in D . Y = { y 1 ,  X  X  X  , y n } represents the set of target values for all instances in D .

The indices of the instances in D are then divided into a training set L  X  { 1 ,  X  X  X  ,n } and a test set U  X  { 1 ,  X  X  X  ,n } , where L  X  U = { 1 ,  X  X  X  ,n } and L  X  U =  X  . # i  X  L ,the evolution of the response variable Y i , i.e. y i , is fully ob-served. While in the test set U , # i  X  U , the evolution of the response variable Y i is only partially observed with dif-ferent fractions. Suppose the life cycle of each instance has M stages, based upon the fraction of the evolution process being observed, the test set U can be divided into M dis-joint groups, i.e. , U = process of Y i is only observed on the first k stages of its life cycle, i.e. , y k i = # i  X  U k , the task of evolution inference on the i -th in-stance is to predict the value of Y i at the end of its life cycle, i.e. , y e i i ,basedupon x i and y k i .Weuse Y e U = { y to denote all the target values for prediction. We then use Y
U = { y k i | # 1  X  k  X  M, i  X  U k } to denote all the observed evolution process in the test set and Y L = { y i | # i  X  L} to denote all the evolution process in the training set. The overall goal of evolution inference is to estimate the proba-bility distribute Pr ( Y e U |X , Y L , Y o U ).

In this work, we simplify the problem by assuming the lengths of all life cycles are equal, i.e. , each instance has the same length in its life cycle. This assumption can be easily extended to unequal-length cases by normalization.
To estimate Pr ( Y e U |X , Y L , Y o U ), conventional inference ap-proaches usually require i.i.d. assumptions, and ignore de-pendency between di ff erent instances. The inference for each instance is performed independently: Link-based Dependency
Collective inference approaches assume that the instances which directly linked in the network are related [1]. Given a network G =( V , E ), V is the set of instances (nodes), V = D . E  X  V  X  V is the set of links between instances. We use T to represent the current time. # v i  X  V , collective inference methods can model Pr( y e i i |Y T N variables Y j ( # v j  X  N i )attime T , i.e. , Y T N and N i denotes the instances set which correlated with v N i  X  V . Hence, by considering the correlation between instances, we will have: Collective Evolution with Life Cycles
Note that di ff erent instances may be at di ff erent stages of their life cycles at time T , so it is inappropriate to infer y with Y T N ent stages, which may mislead the inference result. Corre-lated instances share similar evolving pattern during their life cycles rather than during the absolute time. Suppose v i  X  U k , one better way is to replace Y T N i by using Y Here Y k N Y ( # v j  X  N i )at k -th stage of their life cycles.
Moreover, with the assumption that the network is stat-ic, collective inference methods usually ignore the evolution information. In order to utilize this information, one way is to iteratively predict the target value y s i + k i based upon Figure 3: The basic idea of collective inference and collective evolution inference. Here k represents the k -th stage of life cycle. U k is the instances set which stay in k -th stage of life cycle at current time T .The single circle means observed values of the response variable, and the double circle means predict values of the response variable. model of order one (AR(1) for short). These methods can large errors when the prediction horizon is long, because it only utilizes previous evolution process. Note that the in-stances with strong correlations may obey similar evolution tendency during their life cycles, as shown in Figure 1(c). By considering both link-based dependencies and evolution information of instances, the idea of collective evolution in-the correlations between instances during their life cycles to reduce prediction errors. The task of collective evolution inference is to estimate: Here F denotes the models which estimate response variable Y at time s i + k , e.g. ,AR(1).

Compared with collective inference, collective evolution inference avoids inferring Y e U simultaneously, by aligning the life cycle of each instance into the same position. And it also makes use of the evolution process during the life cycles of instances. We use time T to indicate s i and e i ( # v i  X  V ), as shown in Figure 3, we describe the di ff erence between collective inference and collective evolution inference based upon Eq. 1, 2. Note that # v i  X  U k ,T = s i + k  X  1, and # v i  X  L ,T  X  e i , i.e. , y T i = y e i i .
 Heterogeneous Dependencies
In many real-world applications, the networks include mul-tiple types of nodes and links, which are called heterogeneous information networks [10].

Definition 1. Heterogeneous information network is a spe-cial kind of information network, which can be represented as a directed graph G =( V , E ). V denotes the set of nodes, including K types of instances: V 1 = { v 11 ,  X  X  X  ,v 1 n Figure 4: Examples of di ff erent types of Meta-path between two loan listings in P2P Lending Network. = { v K 1 ,  X  X  X  ,v Kn K } , where v ji represents the i th instance of type j . E  X  V  X  V denotes the links between the instances in V , which involves multiple types of links.

For example, as shown in Figure 1(a), the P2P Lending network includes multiple types of nodes, e.g. , loan listing, borrower, lender, group, which are connected through mul-tiple types of links, e.g. , created, bidding, friend, joined. In this paper, we focus on studying the collective evolution in-ference problem on one type of nodes, instead of on all of them in HINs. The reason is di ff erent type of nodes have di ff erent variables in HINs, so it X  X  unreasonable to assume all types of nodes share the same set of response variables.
Without loss of generality, we define the first node type V as the target node type, i.e. , V 1 = D . By mining the linkage structure of HINs, multiple types of dependencies among instances can be extracted. In next section, we propose a method to solve the collective evolution inference in HINs. We summarized all notations in Table 1.
In this section, we first introduce a concept named meta path [11] in section 3.1, which is often used to extract com-plex relationships among the instances in HINs. Then, we discuss how to solve the collective evolution inference prob-lem in HINs based on meta path in section 3.2, and propose a simple and e ff ective algorithm for meta path-based collec-tive evolution inference in section 3.3. Finally, we discuss how to predict the node evolution process during the life cycle in section 3.4.
The meta path is defined as a sequence of relations in the network schema. The instances in HINs are inter-connected through multiple types of links. Each type of links from node type V i to node type V j corresponds to a binary relation R , where R ( v ip ,v jq ) holds if the object v ip and v jq are linked in R . For example, in Figure 1(a), the link type  X  X idding X  is a relation between lender nodes and loan listing nodes, where R ( v ip ,v jq ) holds if the lender node v ip has a link of type  X  X idding X  to the loan listing node v jq in the network. We can write the link type as  X  X ender bidding  X  X  X  X  X  X  X  X  X  loan listing X .
Ametapath P corresponds a type of path within the network, containing a certain sequence of link types. For instance, we give three types of meta path between loan list-ings in Figure 4, e.g. , a meta-path  X  X oan listing bidding lender bidding  X  X  X  X  X  X  X  X  X  loan listing X  denotes the composite relation-ship between loan listing nodes, where the semantic mean-ing of this meta-path is that the two loan listing nodes had been invested by same lender nodes. Here the link type  X  X idding  X  1  X  represents the inverted relation of  X  X idding X . Figure 5: Meta path-based collective evolution in-ference in heterogeneous networks. Figure 6: The function of constructing relational fea-tures(PathRelFeature).
In HINs, there are complex dependencies not only among instances directly linked through links, but also among in-stances indirectly linked through di ff erent meta paths. In or-der to solve the collective evolution inference problem more e ff ectively, we explicitly consider di ff erent types of meta path-based dependencies among instances.

Meta path-based dependencies refer to the dependencies among instances that are inter-connected through a meta path, e.g. , the co-borrower relation between loan listings can be represented as the meta-path  X  X oan listing created borrower created  X  X  X  X  X  X  X  X  X  loan listing X . Most relationships studied in network data can naturally be captured by di ff erent meta paths. Given a set of meta paths S = {P 1 ,  X  X  X  , P | S | denotes the nodes set where the nodes relate to node v 1 i through the meta path P l , P l ( i )= { v 1 j | ( v 1 i ,v The meta path-based dependencies can be used as follows: Pr ( Y e U |X , Y L , Y o U )  X  y Here Y k P ues set in k -th stage of life cycle, which the instances belong to P l ( i ). The basic idea of meta path-based collective evolu-tion inference as shown in Figure 5. An aggregation function ( e.g. , mean, count, etc.) is often used to extract relational features from meta paths-based correlated variables set [11], as shown in Figure 6.
In this section, we propose an algorithm, called NetCycle, to estimate Eq. 3. Inspired by the success of ICA frame-work [1] in collective inference, we designed a similar infer-ence procedure for our NetCycle method as shown in Fig-ure 7. The algorithm includes the following steps: Meta-path Construction: Given a HIN, we first extrac-t all non-redundant meta-paths for correlations of target instances type separately. A meta-path P l in S is non-redundant if P l cannot be reconstructed by combining any subset of the meta-paths in S . We only extract short meta-paths with a maximum path length p max. It has been shown in [20] that long meta-paths are not quite useful in capturing the linkage structure of HINs.
 Segmentation Training: We construct M extended train-ing sets # 1  X  k  X  M, D k = each instance x i to x  X  k i using the functions in Figure 6, and combining with previous value y s i + k  X  1 i . Here Y { y j | v 1 j  X  V 1 } , contains all response variables Y j ( # v V )at k -th stage of their life cycles in Figure 6. We use base learner to train one segment model on each stage, by using the extended training sets.
 Collective Evolution Inference: Overall, it is an ex-tension of iterative inference algorithm [1] for the inference step. During the inference, we iteratively update the re-sponse variables set predictions of the testing instances in k -th stage of life cycle, for each v 1 i  X  predicted value y T  X  j + k i as one of input attribute in predict the response values set in k +1stage,until k = M .Inthe end, we will get Y e U for the testing instances.

Suppose the complexity of base learner A is C , the time complexity of learning the NetCycle model is O ( p max  X V M  X  C ). While the time complexity of constructing meta paths is O ( p max  X V 3 1 ), which usually constructed through matrix multiplication.
During the collective evolution inference process, for each instance v 1 i in test set U , suppose v 1 i  X  U k , the NetCycle algorithm can not only infer the target value y e i i , but al-so the whole time series values of response variable Y i , i.e. , % y i ,  X  X  X  ,y the evolution tendency over the instances X  life cycle. Fur-ther, the weight of parameters learned by segment models f , can help to reflect the importance of each feature during life cycle (including inherent attributes, previous value and topology features). Greater weight means greater impact on evolution, so we can use it to find the major factor of node evolution in di ff erent stages. For example, in P2P lending network, previous studies [2] validated that the fund rais-ing process is mainly influenced by the investment rate in early stage, and mostly a ff ected by social interactions ( e.g. , herding e ff ect) in latter stage over fund-raising period.
In order to validate the collective evolution inference per-formances, we apply our methodology to three real-world HINs (Summarized in Table 2).  X  Prosper Dataset: Our first two datasets studied in this paper were extracted from Prosper P2P Lending platfor-m . Prosper.com provides abundant lending information on website, including loan information, bidding, borrower and investor information, etc . The network schema of Prosper datasets is shown in Figure 8(a). In this network, there are four types of nodes: loan listing, borrower, lender and group, connected by four types of relations/links: created , friend , bidding and joined relationship. We treat loan listings as https://www.prosper.com/ our target instances, with their funds-raising ratio as the response variables. Then the life cycle of the instances is the loan listing X  X  fund-raising period. Each loan listing has five inherent attributes: maximum rate borrower willing to accept br , debt-to-income ratio dr , total amount request-ed ta , whether or not borrower is a home owner h , and loan description length dl [2]. We extract two subsets of loan list-ings in the network from 2006  X  2011, and remove all isolated points (which did not receive any fund). The first dataset is extracted from Prosper: 2006  X  2007, and the second from Prosper: 2008  X  2009, each have 30 K loan listings, we ad-d100 K unobserved loan listings which randomly sampled from 2006  X  2011 for each dataset. The fund-raising period of each loan is divided into M stages, here M = 10 for all experiments in these two datasets.  X  DBLP Dataset: The third dataset, i.e. , DBLP four ar-eas [8], is a bibliography information network extracted from DBLP 2 , which involves three types of nodes: conference, pa-per and author, connected by two types of relations/links: conference-author links and co-author links. We treat au-thors as our target instances, with the number of published papers as the response variables. In this dataset, the life cycle is defined as the first five years since the author pub-lished his/her first paper. The inference task is to predict the numbers of papers published in the first five years of each author X  X  academic life, which we call the authors X  academic career problem, because most PhD degrees take five years, i.e. , M = 5. For each author, we extracted a bag-of-words representation of all the paper titles published by this au-thor as inherent attributes, which include 150 words (terms) as node features. In this paper, we select the authors who published more than 2 papers, and the network schema of DBLP dataset is shown in Figure 8(b). For detailed descrip-tion of the DBLP dataset, please refer to [8].
In order to demonstrate the e ff ectiveness of our method-ology, we compared with the following state-of-the-art algo-rithms (summarized in Table 3): http://dblp.uni-trier.de/db/ Table 3: Types of models, based on the kinds of features used.
  X  LIBLINEAR [4]: This method is the base learner for fol-lowing algorithms. It supposes that each instance is inde-pendent in the network.  X  Herding Para [2]: This method is only applied to Pros-per dataset. This method extracts the temporal features of bidding behavior to predict whether the loan will raise enough funds with logistic regression. However, it is a veri-fying experiment which can only be used after fund-raising period. We use a horizontal line to represent this method X  X  performance in each stage.  X  GNetMine [8]: This is a graph-based transductive classi-fication approach based on information propagation model, which makes prediction on heterogeneous networks. It only uses static network structure, and assumes each node type shared by a group of similar labels.  X  HCC [11]: This is a collective classification approach, which works on heterogeneous network by exploiting depen-dencies based on multiple meta paths in the network. The same as our method, it focuses on predicting one type of nodes in heterogeneous networks.  X  HCC (with kernel) [19]: This framework can model both temporal and relational dependencies in dynamic networks, by giving di ff erent weight with temporal-relational kernel to links in the temporal dimension. But the paper focuses on link prediction instead of collective inference problem. In order to compare with the method, we combine the idea of modeling dynamic networks with kernels and HCC method, to solve the collective inference problem in dynamic net-works.  X  NetCycle (w/o network): This is a weak version of our method without network structure. It only uses the inherent attributes of nodes and the previous values of the nodes response variables, and does not consider the dependencies between related instances.  X  NetCycle: This is our method proposed in Section 3.3, which tries to solve collective evolution inference in HINs. For a fair comparison, all above algorithms use LIBLIN-EAR [4]. We use L2 regularized logistic regression as the base classifier and support vector regression as the base re-gression model. The weight of regularized item  X  is set to be 0.001, and the maximum number of iterations Max iter is set to be 10. The evaluation metric of classification is accuracy, and the evaluation metric of regression is root mean square error (RMSE). For all experiments, we use k =0/ k = 1 rep-resents the start/end stage of nodes life cycles. 5-fold cross validations are used in all experiments.
Prosper datasets only.
Sharan et al. proposed an original way to model temporal network, however, they focus on the link prediction problem, we combined the idea with HCC as one of compared method. Figure 9: Collective evolution classification results.
In our first experiment, we evaluate the e ff ectiveness of the proposed NetCycle method on collective evolution clas-sification problem. We apply our method on two problems: one is  X  X iding detection X  problem, which attempts to pre-dict whether the loan listing will raise enough funds after fund-raising period. We binary the predicting result of fund-raising ratio to Succeed or Failed for comparison. Another is  X  X cademic career X  problem, which tries to predict whether one author will engage in academic after graduation. The task can be represented as whether the author will publish his/her paper after five years. By hiding the response vari-ables and links after stage k , we test all algorithms since di ff erent beginning stage k , and predict the final response values after their life cycles. Note that people pay more at-tention to positive instances, e.g. , investor only care about the loan listings which can receive enough funds in the end, and people care more about whether the author will con-tinue to engage in academic career after PhD. We add F  X  score as another classification evaluation metric, here we set  X  =0 . 5. The results are reported in Figure 9. Due to the accuracy and F score are too small of logistic regression and Figure 10: Collective evolution regression results. NetCycle (w/o network) in DBLP dataset (less than 55%), so we did not shown the result in Figure 9(c).

The first observation in Figure 9 is: Most collective clas-sification methods, e.g. , HCC and GNetMine, can achieve better accuracies than the baseline logistic regression. These results support that the heterogeneous dependencies among instances can improve classification performance. We also find that NetCycle (w/o network) and Herding Para are con-sistently and significantly outperforms than baseline, which support our claim that the evolution information of instances can also improve classification performance. Compared with all above algorithms, NetCycle always has best performance in each stage of life cycle, which explains that both het-erogeneous dependencies among instances and the evolution information of node response variables can improve predic-tion performance in the classification task. Finally, we find that HCC method with kernel does not perform well, al-though it utilizes both heterogeneous dependencies among instances and the temporal information of instances. One possible reason is that it is hard to choose the suitable ker-nel to model the graph. Our algorithm almost achieves the best performance in all datasets.
Compare with all above competing algorithms, NetCycle is not only able to solve the classification problem, but also able to solve the regression problem. In order to validate the e ff ectiveness of NetCycle, we made slight modifications to the competing algorithms, by referring the works of [13] in collective regression. The competing algorithms include: LIBLINEAR, HCC, HCC (with Kernel) and NetCycle (w/o network). In this experiment, we apply NetCycle in collec-tive evolution regression on two problems: predicting  X  X ow much fund of the loan will be raised after bidding period X , and predicting  X  X ow many papers one author will publish during his/her PhD X . The results are shown in Figure 10.
The first observation in Figure 10 we have is that most approaches have better performance than the baseline in each dataset, especially in latter stages of life cycle. We al-so find that although most algorithms X  RMSEs have slightly decreasing tendency as time goes on, our methods (includ-ing w/o network) have more obviously decreasing tendency during life cycle, with the help of evolution information of the response variables during life cycles. Compared with NetCycle (w/o network), NetCycle have better performance in the early stage of life cycle, which demonstrates the het-erogeneous dependencies among instances can improve per-formance in collective regression problem. In all datasets, NetCycle has outstanding performance in every stage.
In our third experiment, we validate NetCycle (including w/o network) on predicting node evolution process in Pros-per: 2006  X  2007 dataset. We record the evolution process of the nodes since stage k =0 . 1, and use following metrics to evaluate the performance in each stage during their life cy-cles, including: precision of positive nodes, recall of positive nodes, accuracy and RMSE . The results are shown in Fig-ure 11, where similar trend holds for the other two datasets which cannot be shown due to space limitation.

We can find that both NetCycle and NetCycle (w/o net-work) have high precision in early stage, and only have little descent as time goes on. The decreasing tendency of Net-Cycle is greater than NetCycle (w/o network). The recall of positive nodes is also very high in the early stage, but the decreasing tendency is more obvious than precision for both algorithms. The results show that the decreasing per-formance in dataset mostly due to the descent of recall. The last two figures are accuracy and RMSE, where the errors are monotone increasing for both algorithms, however, Net-Cycle has much slower increment speed of errors than Net-Cycle (w/o network), which demonstrates our claim that the instances are collective evolution with life cycles.
In this experiment, we study the influence of di ff erent meta paths on the collective evolution inference performance of our NetCycle model. Di ff erent types of meta paths have di ff erent semantic meanings, which correspond to di ff eren-t types of dependencies among the instances in HINs. We summarize all metapaths in Table 4, which are extracted Figure 12: Influence of meta path on NetCycle.
 Figure 13: The weights of meta paths during life cycle. from P2P lending network. In order to illustrate the influ-ence of each path, we apply NetCycle with 6 groups of meta paths in the Prosper networks, including: only borrower-s { LBL } , only lenders { LLeL } , users { LBL and LLeL } , with-friend { users , LBBL, LBLeL, LLeLeL and LLeBL } , with-group { users , LBGBL, LBGLeL, LLeGLeL and LLeGBL } and all . We test each meta-path group in 3 stages of loan X  X  life cycle in Prosper:2006  X  2007 dataset, the results as shown in Figure 12. We find that NetCycle can get better perfor-mance with the increase number of meta-path types. This support our intuition that meta path is very expressive and can represent indirect relationships that are very important for collective evolution inference tasks.
To better understand the output of our methods, we give a case study of the weights of meta paths in each stage of life cycle, to show the e ff ectiveness of NetCycle in matching the node evolution pattern. The meta paths we used are from Prosper:2006  X  2007 dataset, including: only borrowers (L-BL), only lenders (LLeLeL), and with group (LLeGLeL). In Figure 13, we display the weights of each meta path learned by segment models during the life cycle.
 As shown in Figure 13, the first observation is that al-
Figure 14: Influence of Parameters on NetCycle. l meta paths have large weights in the early stages, and the weights of meta paths have a declining tendency in the early stages. This result proves a phenomenon:  X  X nvestors prefer to invest new loan listings X , which validated by Cey-han [2]. The weights of meta paths LLeLeL and LLeGLeL have an similar increasing tendency in latter stage, it may be due to the following reason: as time goes on, the in-creased numbers of bids will attract more lenders to invest the loan, which also known as herding e ff ect in financial do-mains. Ceyhan [2] also verified the herding e ff ect in P2P Lending service. Compared with LLeLeL and LLeGLeL ,we can find that the weights of LBL did not have obvious vari-ation during loan X  X  life cycle, because the relationship be-tween borrower and loan will not change in the fund-raising period. There exists a sharp increasing tendency for all meta paths in the last stage, however, the weights of all features have a sharp variation in the last stage, because we need to normalize the results into discrete values in the last stage. These variation tendency of meta paths provides insightful knowledge for us to understand the node evolution process.
There exist two essential parameters in NetCycle, Max iter and  X  . Max iter is the maximum number of iterations # in the iterative inference part of NetCycle, and  X  is the weight of LIBLINEAR X  X  penalty item (L2 regularization). In previous experiments, we empirically set Max iter as 10, and set  X  as 0.001. To test the stability of the perfor-mances of NetCycle method, we test the accuracies of d-i ff erent values of Max iter and  X  in 3 stages of loan X  X  life cycle on Prosper:2006  X  2007 dataset, the result as shown in Figure 14. Similar trend holds for the other two datasets which cannot be shown due to space limitation.

Figure 14 illustrates that NetCycle performs quite well and stably, and it is not sensitive to the values of Max iter and  X  . In Figure 14(a), when the number of iterations is very small, e.g. , Max iter &lt; 3, the results did not perform well, because the algorithm not reached convergence yet. However, with the increase of the number of iterations, the results do not change obviously. In Figure 14(b), we can find that smaller  X  always has better performance at the early stage ( k =0.3), and the results don X  X  change obviously as time goes on ( e.g. , k =0.6 or 0.9). There does not exist obvious di ff erences at each stage.
Our work on collective evolution inference is related to both collective inference and dynamic networks analysis. We will introduce recent related works of them in this section.
Collective inference [6] of relational data, including collec-tive classification [1] and collective regression [13], have been investigated by many researchers. Basic collective classifica-tion problems focus on classification in homogeneous net-work [17]. Ji [7] studied a specialized classification problem on heterogeneous networks, where di ff erent types of nodes share a same set of label concepts. Kong [11] proposed a method called HCC based on meta-path to solve the col-lective classification problem on one-type nodes in hetero-geneous networks. Loglisci [13] studied collective regression for handling autocorrelation of network data. All of them only paid attention to static networks, instead of dynamic networks. In this work, we compare with the methods in [7, 11] as two competing algorithms.

On the other hand, in dynamic networks, Sharan [19] pro-posed a representational framework to model both tempo-ral and relational dependencies in networks, but they only tested the model on the link prediction problem. Yu [21] used cascading process to predict the propagation of infor-mation. Cho [3] presented a point process to model the Spatial-Temporal Networks. However, none of them focused on collective inference problem. Moreover, the evolution in-ference problem are very similar with autoregressive process. They both try to infer a time series values of the instances response variables in the future. But autoregressive process commonly studied the evolution pattern from previous se-quence, while the evolution inference studied from correlated instances with the restrictions of their life cycles.
In addition, there exist several works in P2P lending net-works [2, 14]. Ceyhan [2] examined a simple model to vali-date the lenders X  bidding behavior during fund-raising peri-od on bidding detection problem, which we also used as one of competing algorithms.
In this paper, we first present the collective evolution problem in dynamic networks, where the response variables of the nodes are evolving with a certain period time. Then we extend the problem into HINs, where the network in-cludes multiple types of nodes connected through multiple types of links. We propose an e ff ective algorithm, called NetCycle, to solve the collective evolution inference prob-lem in HINs. The NetCycle method can not only predict the values of node response variables for collective inference problems, but also can predict the evolution tendency of the node response variables during life cycles. Empirical stud-ies on real-world tasks demonstrate the e ff ectiveness of the proposed method. The work was supported in part by the National High Technology Research and Development Program of China No.2015AA020105, and the National Natural Science Foun-dation of China Projects No.61170096, No.71331005. The authors would like to thank Jinhong Mi and Lu Ruan for their comments.
