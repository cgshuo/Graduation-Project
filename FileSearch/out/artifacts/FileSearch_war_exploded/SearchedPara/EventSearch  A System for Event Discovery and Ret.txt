 We present EventSearch, a system for event extraction and re-trieval on four types of news-rel ated historical data, i.e., Web news articles, newspapers, TV news program, and micro-blog short messages. The system in corporates over 11 million web pages extracted from  X  X eb InfoMall X , the Chinese Web Archive since 2001. The newspaper and TV news video clips also span from 2001 to 2011. The system, upon a user query, returns a list of event snippets from multiple data sources. A novel burst model is used to discover events from time-stamped texts. In addition to offline event extraction, our system also provides online event extraction to further meet the user needs. EventSearch provides meaningful analytics that synthesize an accurate description of events. Users interact with the system by ranking the identified events using different criteria (scale, recency and relevance) and submitting their own information needs in different input fields. H.3.3 [ INFORMATION STORAGE AND RETRIEVAL ]: Information Search and Retrieval.
 Algorithms, Performance. event detection, event search. 
Along with the rapid growth of the World Wide Web, various news-related Web data is generated in a dramatic rate, and spreads throughout the Internet. Not only limited to traditional text based news, on-line news data usually contains various types of infor-mation, including news articles, news videos and micro-blog short messages. In order to facilitate the process of accessing news and revisiting retrospective events, it is essential to analyze and mine the information contained in these data. Thus, there is an emergent need of a comprehensive event extraction and retrieval system, which can help users to manage the overflow of news information and to extract valuable knowledge from on-line news sources. 
A significant number of approaches to event mining and news exploration systems have been reported recently[1,4,5]. The most prevalent way is to detect events by grouping topically similar news articles into clusters [5]. However, most of previous studies focus on a single type of textual news data, e.g., either on news articles [1,5] or tweets [4]. Due to the complex nature of news information, a single stream, which only considers textual infor-mation, may not be able to form a comprehensive view of events. News-related data often involve various types of information, and it is beneficial to combine different types of information for event discovery and visualization. In fact, mainstream newspaper web-sites, e.g., New York Times, have extended the traditional text based news by incorporating multimedia information, e.g., videos and photos. Such a mechanism significantly improves user expe-rience and utilities when readin g news. In addition, few studies consider mining events within a very long time span, e.g., ten years. In order to obtain a better global view of event evolution and understand the underlying causalities among events, it is nec-essary to analyze and mine events in a long time period. 
To address these problems and challenges using mutli-type news streams with a long time period, this paper gives an overview of our Event Discovery and Retrieval System (EventSearch oped for facilitating users with better utilities to access news in-formation. EventSearch has two ma jor functions: 1) automatically detect events from multi-type historical data; 2) maintain a two-layer index and provides flexible and efficient retrieval operations to users. Compared with previous event search engines, our sys-tem has three significant merits:  X  Multi-type data aggregation. We consider a broad aggrega- X  Very long news streams. Our system detects and traces  X  Multi-modality event visualization. Our system provides a We first introduce the system architecture of our demo EventSearch. It consists of a Back-End and a Front-End layer (Figure 1). Demo address: http://162.105.205.253/eventsearch/ *Corresponding author 
Back-End module mainly takes charge of data aggregation, data preprocessing, offline event extraction and index building. 1) Data aggregation. We employ an aggregation engine to collect various news-related data. Our input contains four important sources of news-related data: Web page based, video based, tradi-tional newspaper based and micro-blog based. The Web page based news articles come from InfoMall 2 system, which achieved billions of Chinese Web pages since 2001. Since our major focus is to mine newsworthy events, we extract 11M news articles from 2001 to 2011, by requiring that the URL field should contain the keyword  X  X ews X . Video based news articles are mainly down-loaded from CCTV 3 , which is China X  X  national daily news pro-gram. We download the videos and their corresponding textual information. For traditional newspapers, we partially downloaded the articles from RMRB 4 , which is the official newspaper of the Communist Party of China. We totally extract 59K and 0.89M articles respectively for CCTV and RMRB. Those data also range from 2001 to 2011. For micro-blogs, we use an official API au-thorized by Sina Weibo 5 , which is the largest micro-blog in China, and we can retrieve short micro-blog messages since 2009. We do not download any data from Sina Weibo but get the data by sub-mitting real-time queries when needed. Specifically, we first per-form event extraction from news articles and generate event key-words. Then we query Sina Weibo API with event keywords within the event period to generate micro-blog results when pre-senting the event. 2) Data preprocessing. After collecting data, the aggregation engine assigns a unique global document ID to each document, and extracts different fields (URL, title, body, score, ID, timestamp, etc). Note that the definition of  X  X ocument X  is very general, not limited to textual articles. For example, one document may contain both videos and text. For each article, we extract its corresponding keywords and location information. For video based documents, we adopt a non-broadcast clips extraction algorithm[6] to extract representative pictures as descriptions of documents. Then we merge all the textual news data (including the text from video based documents) into one unified stream ordered by timestamps for downstream tasks. 3) Offline event extraction. Our event algorithm consists of three major parts: a) detect bursty feature (A bursty feature comprises a bursty term together with a bursty period) fr om the unified stream; b) use these bursty features to represent documents for clustering; c) perform clustering based on our pr oposed text representation. See Section 3 for details. Note that we only perform event extraction on textual data, we map non-textual data to corresponding events by utilizing the relationship between textual data and non-textual data, i.e., they coexist in the same document.. 4) Index building. When document are clustered into events, we further generate event-dependent features, including event keywords, location and http://www.infomall.cn/ http://cctv.cntv.cn/lm/xinwenlianbo/ http://paper.people.com.cn/ http://weibo.com/ start/end time. We design a two-layer index for the whole data collection, i.e., event-level index and document-level index. See Section 4 for details. 
In the Front-End module, EventSearch provides a friendly Web based interface. To help users to flexibly explore the discovered events, we set up three kinds of query fields: keywords, time and location, and each kind of query field can be left as blanks. The search result consists of a set of event snippets. In addition to news titles, each event snippet contains rich event metadata, in-cluding event location, time, keyword clouds and photos. The search result interface also allows user to click the returned events to zoom into the event detail page. See Section 5 for details. 
One standard way for event detection is to cluster news articles as events by following a two-step approach [5]: 1) represent doc-ument as vectors and calculate similarities between documents; 2) run the clustering algorithm and determine events. Although it seems very natural and straightforward, event detection in long text streams is very challenging. Traditional Vector Space Model does not consider modeling temporal aspects of documents and it is not suitable for temporal modeling. In addition, we have to face with the scalability problem from our very big news archive for clustering these temporal documents. To effectively and efficient-ly model temporal document for clustering, we propose a novel burst-based document representation. Burst based VSM. Inspired by the work [2,3], we select bursty features as the basic representation units of documents, which contain both temporal and semantic information. We use bursty feature to denote a sudden surge of the frequency of a single term in a text stream, and represent a bursty feature by the term itself together with the time interval during which the burst takes place. For example, (Olympic, Aug-08 -2008, Aug-24-2008) can be re-garded as a bursty feature. We also call the term in a bursty fea-ture its bursty term. We merged all the text documents as one news stream, and use the two-state machine algorithm [3] to de-weights in bursty feature dimensions : We define the j th weight of d i as follows: where B j is the j th bursty feature in B , w B j term of B j and bursty interval of B j respectively, |B| is the number of bursty features in B . When the timestamp of d i is in the bursty interval of B j and contains term w Bj , we set up the weight using the common used tf-idf method. 
From the definition above, we can see that one dimension is ac-tive only when the document falls in the corresponding bursty interval. BurstVSM considers both semantic and of temporal in-formation: semantics are modeled by the weight of bursty terms while temporal dynamics are modeled by mapping one dimension to one bursty feature. Usually, BurstVSM represents one docu-ment as a vector with only a few non-zero entries. It makes com-putation of document similarities more efficient in a large dataset compared with VSM. See [7] for more details. Event detection algorithm. Based on the discussions above, each document can be represented as a burst-based vector. We use cosine function to compute document similarities. Our dataset consists of 11 million documents in a long time span (10 years), and it is infeasible to cluster all the documents together. We de-velop a heuristic clustering algorithm for event detection, denoted as split-cluster-merge . It includes three main steps, namely split, cluster and merge. The idea is that we first split the dataset into small parts, then cluster the documents of each part independently and finally merge similar clusters from two consecutive parts. It has a merit that cluster step could be executed in parallel for dif-ferent parts. In our dataset, we find that most of events last no more than one month, so we split the dataset by months. After splitting, clustering can run in parallel for different parts (we use CLUTO 6 as the clustering tool), which significantly reduces total time cost. For merge , we empirically set a threshold of 0.5. The final clusters are returned as identified events. See [7] for more details. 
For an event retrieval system, a user may submit either event-level queries (by inputting queries to retrieve relevant events) or document-level queries (by zooming into the detailed content of one specific document). To facil itate both types of queries, we build a two-layer index: document-level and event-level index. 
Our textual data are indexed in the document-level index, in-cluding keywords, bursty features and corresponding event ID (in our system, one article only belongs to one event), timestamp and relevant locations. In our system, since documents may contain non-textual information, to manage them, we set up special fields in document-level index, e.g., photo linking field and video link-ing field. These fields are filled with internal position pointers on disks where we store non-textual information. To discriminate documents from different source types, we add a source type field in document-level index. In the event-level index, we store infor-mation from offline-discovered events, including start/end time, relevant locations and event keywords. One important field in even-level index is the collection of relevant documents in one event. Given a specific event, this field records all the global IDs of relevant documents. We use this field to link event-level index with document-level index. The two-layer index can support vari-ous queries flexibly. 
Next, we describe how to perform keywords based retrieval us-ing such a two-layer index. Figure 2 shows the general flow of query processing. Firstly, we use a BM25 like retrieval model for keyword-based queries in the document-level index. We keep top ranked 10000 articles and get their corresponding event IDs. 
Secondly, we obtain corresponding detailed information of the-se events from event-level index using retrieved event IDs, and these event details are used as ranking features, including the number of relevant documents (scales), event period (recency and www-users.cs.umn.edu/~karypis/cluto/ time span), the number of different types and the number of relat-ed document in certain source. Thirdly, we compute the diver-gence of the distribution of relevant documents in different events. If the divergence is too large, in other words, relevant documents appear in quite a lot of offline-discovered events, we employ an online event extraction module to rediscover events from top ranked documents to better satisfy user needs. Otherwise we will combine relevant documents from the same event as an event result set. Finally, we use corresp onding relevance scores or other criteria, e.g., recency, to rank events. 
For non-keyword queries, we only use event-level index to re-trieve events, and rank the candidate events by considering three factors: event static quality score (offline calculated), event period and event locations. In this case, online cluster module will not be triggered. Another important problem is how to incorporate the micro-blog data in the event snippet. Since we have generated event keywords and event period, for a given event, we query Sina Weibo API with the top ranked keywords within the corre-sponding period, and micro-blog resu lts are generated in an online way. 
Our system allows the users to specify the queries by inputting three kinds of information: keywords, start/end time and location. When a user submits a query, the system will return a list of snip-pets for relevant events (shown in Figure 4). An event snippet consists of news titles, event keyword cloud, event period and relevant event locations, possibly with news photos and videos. Users can slip mouse on photos to select the corresponding videos, and our system will play the clicked video in a separate page (shown in figure 3). 
The major merit of our event visualization is that we incorpo-rate multi-modality and multi-type information. Such visualiza-tions can provide a comprehensive view of events and significant-ly improve user utilities. In addition, we have offered some basic mechanisms for mining and analyzing events. See the top two subfigures in Figure 4, respective ly the trend of the number of events and the hottest relevant locations related with the given query. Take the query  X  X lympics Games X  as one example (in Chinese), we can see that there is a significant spike in terms of the number of related events. The major reason is that the hold of  X  X eijing 2008 Summer Olympics Games X . We use Baidu map to present the hottest event locations. In the subfigure on the right, Beijing has been marked as the hottest event location and Shang-hai as second. More interestingly, users can click any points in the timeline or map to see the events that happened around that time or location. Given these returned event snippets, a user may be interested in a specific event. Our system provides a link to event detail page to help users to zoom into the details of one event. Figure 5 presents an event detail page of  X  X eijing 2008 Summer Olympics Games X . Users can browse articles by selecting different views of by clicking source type tag i.e. in a specific type of news stream. Note that the keyword clouds shown on the left in Figure 5 are source dependent, indicating the system generates different key-word clouds for multiple sources. Relevant articles are returned and presented as document snippets, and we can rank those arti-cles either by relevance or recency. Users can click the link in one document snippet to view the full information and corresponding link in InfoMall for one document (shown in figure 6). Figure 5: Event detail page for one event for query "Olympic Games". Figure 6: News article's detail page and its archived page in This work is supported by NSFC Grant (60933004, 70903008, 61073082) and HGJ Grant 2011ZX01042-001-001. [1] Fung, G.P.C., Yu, J.X., Liu, H., and Yu, P.S. Time-[2] He, Q., Chang, K., Lim, E.P., and Zhang, J. Bursty feature [3] Kleinberg, J. Bursty and hierarchical structure in streams. [4] Mathioudakis, M. and Koudas, N. TwitterMonitor: trend [5] Yang, Y., Pierce, T., and Carbon ell, J. A study of retrospec-[6] Ye, Q., Huang, Q., Gao, W., and Jiang, S. Exciting event [7] Zhao, X., Chen, R., Fan, K., Yan, H., and Li, X. A Novel .

