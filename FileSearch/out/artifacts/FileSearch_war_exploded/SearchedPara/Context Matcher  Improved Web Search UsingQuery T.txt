 A person reading a Web page or editin g a word processing document often searches the Web by using a term on the page or in the document as part of a query. The first results listed following a search using only this term will naturally reflect the most common meaning of the word. If this meaning differs from that in the document being read or edited, t he  X  X ource document X , the person can add more keywords to the query to narro w down the results. For inexperienced people, identifying appropriate keywords can be difficult. For experienced people, it can be tedious.

To make this process easier, we have developed a method that automatically adds keywords to a user X  X  query to improve the search results. It is based on the assumption that there is a correlation between the source document and the user X  X  query. It uses both the text surrounding the search term in the source document and the text surrounding the term in the initial search results. A person using our system can more easily find the desired information than by using existing Web search engines alone.

Section 2 reviews related work. Sectio n 3 describes our method, and Section 4 describes its implementation. Section 5 pr esents some of the exp erimental results, and Section 6 discusses future work. Finally, Section 7 concludes the paper with a brief summary. 2.1 Using Context in Source Document Several approaches that use the user X  X  context for information retrieval have been proposed[8]. That by Finkelstein et. al. [7] is the most relevant here. Like with our method, a user first selects a su itable term from the document being read to use as a search term. The method then extracts additional keywords from the text surrounding the selected term and adds them to the query. The modified query is then forwarded to a Web search engine. The selection of the ad-ditional keywords is done using a semantic network constructed beforehand. This network is made by collecting documents in 27 domains (computers, business, entertainment, and so on). Each candidate keyword is then represented by a 27-dimension vector. Each dimension corresponds to the frequency of a domain in the collected documents. The distance between the candidate keywords and the original search term is measured using the network. The candidate keyword clos-est to the selected text is added. While th is method requires pr eselected domains and a semantic network, ours does not. Instead, it uses the text surrounding the search term in the initial search results to select additional keywords.
The Watson Project[4][5][6] automatically modifies the user X  X  query by using text in the source document. It also searches the Web for opinions at odds with that in the source document and presents the information, such as company information and maps, that matches the user X  X  needs. To modify a query, it weights the terms in the source document based on their frequency and position in the document. The additional keywords are selected using only the information in the source document. In contrast, our method also uses the information in the initial search results. 2.2 Using Context in Search Results Xu and Croft[9] and Yu et. al. [10] modify the query by using text surrounding the search term in the initial search results. They extract candidate keywords from the text and use them to modify the query. We do this as well, plus we extract additional keywords from the source document. 2.3 Using and Matching Contexts in Both Source Document and The most difficult step in using context in source document is selection of appro-priate additional term from the surrounding text. If the selected additional term is not relevant or too specific, the search results become too biased. To solve this problem, previous methods need precomputed domain knowledge that measures the semantic similarity of terms. On the other hand, using context in search result becomes problematic when the sea rch results contain contexts different from that in source document. In such a case so called topic drift occurs and the precision of search results deteriorates significantly.

To resolve these problems simultaneously, we propose using contexts in both source document and in search results. Our method matches the two kinds of contexts and uses terms that frequently appear in both of them. Even if context in source document or search results alone is ambiguous, comparing them can reduce the ambiguity of both contexts.

Over methods that use only context in s ource document, our method has the following advantage: By using context in search results, it can select appropriate additional terms from the text surrounding the query term without prior domain knowledge. From the opposite viewpoint, the advantage of our method over methods that use only context in search r esults is as follows: By using context in source document, our method can ro bustly select relevant context terms 3.1 Overview Aflowoftheproposedmethodisasfollows. 1. User selects a term in source document for use in initial query. 2. System extracts and analyzes nouns surrounding search term in source doc-3. System searches Web with q uery and retrieves results. 4. System extracts text surrounding query term in searchresults. 5. System weights nouns extracted in step 2 based on results retrieved in step 3. 6. System identifies noun with highest weight as next keyword to add. 7. System adds keyword to query. 8. System searches Web with modified query and retrieves results. 9. System shows search results to user. 10. User indicates whether results are satisfactory. 11. If results are satisfactory, processing ends. Otherwise, processing returns to 3.2 Query Modification We explain the query modification which adds the keyword to the query when user selects the text in the reading document as the query.
 Identifying Candidate Keywords. First, the sentence in the source doc-ument containing the search term is ex tracted, as well as the preceding and following ones. These sentences are morphologically analyzed, and the nouns are extracted. These nouns are candidate keywords to be added to the query. This is shown as step 1 in Fig. 1.
 Weighting Candidate Keywords. Next, the first query is used to search the Web and obtain the initial search results. Usually the first 20 search results are used. The text surrounding the search term in each result is extracted (step 2 in Fig. 1). The candidate keywords are weighted using this extracted text (step 3 in Fig. 1), and the one with the highest weight is added to the query (step 4 in Fig. 1).
 Counting Occurrences of Candida te Keywords in Search Results. We define k i as a noun extracted from the source document and T j as the text surrounding the search term in the search results. The number of occurrences of the candidate keywords in the search results is given by The weight of k i is given by
After the nouns have been extracted from the text surrounding the search term in the source document, the number of search results containing each noun is counted.
 Weighting. If the extracted nouns were weighted based simply on the frequency of their occurrence in the text surrounding the search term in the results, the more commonly used nouns, such as  X  X nformatio X , would usually be more heavily weighted. This is because they appear in many documents in a wide variety of domains. Adding such a noun to the query would thus tend to produce search results similar to those obtained by the previous query. To better reflect the user X  X  intention, we modified Eq. (2) to lower the weight of the more commonly used nouns: where D ( k i ) is the number of search results when searching the Web using query as k i and w i is the weight of k i . The higher the number of search results, the lower the weighting. This is similar to the TF-IDF weighting scheme in which the frequency ( tf ) of a term is its frequency in the document and idf is the inverse of the document frequency ( df ), which is the number of documents con-taining the term. The result of multiplying tf by idf is the degree to which the term characterizes the document. In Eq. (3), D ( k i ) correspond to df .Usingthis weight, we can better select nouns related to the first query. 3.3 Adding More Keywords A simple way to add keywords is to add the one with the highest weighting in turn. However, we can better narrow down the search results by adding a keyword related to the search term. As illustrated in Fig. 2, we weight the candidates again using the text in the latest results. First, we search the Web using the query modified as described in Section 3.2 and get the results (step 1 in Fig. 2). We then weight the candidate keywords again using the text in the latest results (step 5 in Fig. 2). The keyword with the highest new weight is then added to the query. The search results first used to weight the keywords include not only documents related to the source document but usually also many unrelated documents. Candidate keywords that do not appear in any of the documents receive a weight of zero. There can be a lar ge number of such keywords. Weighting them again using the results obtained using the modified query reduces the number of zero-weight candi dates because there are more documents related to the source document in the second set of results. Weighting using these results increases the number of candidates, which increases the likelihood of adding an appropriate keyword to the query. 4.1 Environment We implemented our method using the Microsoft Visual Studio C# .NET, Mi-crosoft Word, and the Google API[1].
 Noun Extraction. We used the Chasen[2] system to extract the nouns from the text surrounding the search term in the source document. Chasen is a Japanese morphological analysis system developed in the Computational Linguistics Lab-oratory at the Nara Institute of Science and Technology. Users can easily change asystem Search Engine. We used Google[3] as the search e ngine. The document extracts shown on the Google results page are used as the text surrounding the search term. We first evaluated the effects of changing the parameter values. Next we com-pared the results of query modification with our method with those using other methods. 5.1 Precision We defined precision as the ratio of relevant documents in the search results. where M is the number of documents and N is the number of relevant documents. 5.2 Effect of Changing Parameter Values Number of Sentences Defined as Surrounding Text. Increasing the num-ber of sentences defined as surrounding text obviously increases the number of candidate keywords, which would increase the likelihood of adding a more appro-priate keyword to the query. However, the farther a sentence is from the search term, the less likely it is to be closely related. We thus adjusted the number of sentences used as surrounding text and counted the number of nouns extracted. We compare average number of nouns extracted when the number of sentences was zero (only the sentence containing the search term) and 1, 2, or 3 sentences before and after that sentence. The average number of nouns extracted was less than20for0and1sentence(6.6at0sent ence and 18.0 at 1 sentence). In this case, it is thought that there are fewer candidate keywords because nouns not related to the search term are included. For more than 2 sentences, the num-ber of nouns extracted was higher(33.4 at 2 sentences and 44.2 at 3 sentences), butthe execution time was longer. We thus decided that a total of five sentences was best.
 Number of Search Results Used. Changing the number of search results used to weight the candidate keywords changes the weights, which could change the noun added to the query. The fewer the number of results used, the greater the number of documents related to the source document that are not included in the search results. We estimated the appropriate number of results to use based on the number of nouns with a wei ght greater than zero. Wecompare the average number of nouns having a weight greater than zero when we used 5, 10, 20, and 30 search results. When we used 5 or 10 results, the number of nouns with a weight greater than zero was about 2(1.9 at 5pages and 2.4 at 10 pages). This is probably not enough to modify the query appropriately because there are fewer candidates. When we used 20 or 30 results(5.0 at 20 pages and 6.2 at 30pages), more time was spent. We thus decided to use 20 pages. 5.3 Comparison with Other Methods We compared our method with a method that uses only the context in the source document and with a method that uses only the context in the search results. In the first method, the most frequent nouns in the text surrounding the search term in the source document are added one by one to the query. In the second method, the most frequent nouns in the text surrounding the search term in the first results listed following the search are added one by one to the query. We used the following terms, which have multiple meanings, as the initial search terms.  X  Fuchu City (a city in Hiroshima Prefectur e; a city in Tokyo Prefecture)  X  Pitcher (a person who pitches a baseball; a container for holding and pouring  X  Mahura (clothing worn around one X  X  neck; a device to dampen exhaust noise)  X  Keyboard (a musical instrument; an input device)  X  Sanjo (a street in Kyoto; a cit y in Niigata Prefecture)  X  Jaguar (a car; an animal)
We used five text documents for each meaning and selected a term for the first query. We first evaluated the methods based on the number of results related to the source document among the first 20 results listed of the modified query with one added keyword. We then added another keyword and evaluated them again. We judge a retrieved page is relevant if the initial keyword is used in it for the same meaning as in the source document.
 One Keyword Added. Table 1 show the average precision of the three meth-ods for one added keyword. With the  X  X earch results X  method, the precision was high for one meaning and low for the other one for all search terms. This is because the query is modified to reflect the contents of the first results listed. For example, the precision of the search results was 100% when the search term was  X  Fuchu City  X  and the source document was about Fuchu City in Tokyo. It was close to 0% when the source document was about Fuchu City in Hiroshima. This is because pages about Fuchu City in Tokyo are more frequently linked to by other pages (which is how Google orders its search results) and thus com-prised most of the first 20 results listed. Because this method does not consider the context of the source document, it modifies the query based solely on the popularity of the search term, not on how it is used in the source document. Our method does not suffer this problem because it considers the context of the source document. As shown in Table 1, the precision of our method was about equal to or higher than that of the  X  X ource document X  method for  X  Fuchu City  X ,  X  Sanjo  X , and X  pitcher  X . It was particularly higher for  X  Sanjo in Kyoto  X  and  X  pitcher as a containe X .

Table 2 show the keywords added to the query by our method and the source document method and the resulting precision for  X  Sanjo in Kyoto  X  X nd X  pitcher as a container X . With the source document method, the precision was high when  X  Karasuma  X  was added for  X  Sanjo in Kyoto  X  X nd X  handle  X  was added for  X  X itcher as a container X , while in the other cases it was low. For these cases, our method added keywords related to the source document, such as  X  Kyoto  X  and  X  mizusashi  X , in spite of their low frequency in the document because it also considered the text in the search resu lts. The precision was thus very high.
In contrast, the precision with our method was very low for  X  keyboard as an instrument X  and  X  Jaguar as an animal X . Table show the keywords added by our method and the source document method and the resulting precision for  X  key-board as an instrument X . When we look the precision by the first query, the parts in which the precision by the first query is low coincide with the parts in which the precision by our method is low. This is because, if there are few documents related to the source document in the results of the first query, the weight of the keywords related to the source docum ent are reduced. As a result, unrelated keywords, such as  X  control  X  X nd X  reality  X , are added to the query, and the query is not modified appropriately. For  X  Fuchu City in Hiroshima X , the average preci-sion with our method was 86%, which is higher than with the source document method. Our method often modified this query appropriately. For example, the modified query  X  Fuchu City AND Hiroshima  X  returned results about Hiroshima Prefecture. However, when we use the document mentioned the Fuchu antenna shop of Hiroshima located in Tokyo as sorce document, our method modified the query to  X  Fuchu City AND Tokyo  X , resulting in precision of zero. If both nouns reflecting meanings of the search term appear in the text surrounding the search term in the source document, a keyword may be added that has a meaning unrelated to the source document, so the query is not modified appropriately. Two Keywords Added. We next compared our method with the source doc-ument method after two keywords had been added to the query. We do not compare our method with the search results method because the latter method modifies the query based on the text in the first results returned by the search without considering the text in the source document. Our method added two keywords as described in Section 3.3. The source document method added the keywords with the highest and second highest weights. The average precisions are shown in Table 1. Our method again had lower precision for  X  keyboard as an instrument X  and  X  Jaguar as an animal X  and higher precision for the other cases. Table 3 show the keywords added to the query by our method and the source document method and the precision for  X  Fuchu City in Tokyo X . In this case a margin of the precision between when added a keyword and when added two keywords is high. Documents 1 and 2 are about a robbery case that occurred in Fuchu City in Tokyo and documents 3 and 4 are about the Kyodo-no-mori mu-seum in Tokyo. Our method had higher precision for every case. There appears to be a small but consistent advantage for two words.
 Combined with Reranking. Another way to use query term context in source document and in search results is reranking the results according to the similar-ity between the text surrounding the search term in the source document and the text surrounding the search term in the search results. Reranking can also be combined with query modification. Table 4 shows preliminary experimental results with reranking. We reranked the top 100 results of each query and mea-sured the precision of the top 20 results after reranking. We used the cosine similarity between feature vectors of surrounding texts, where each feature rep-resents word frequency. In many cases, reranking the results of the initial query yields improved precision scores, but they are not as good as precision scores by query modification. For some queries, reranking the results of the modified query can achieve further im provement in precision. There are some limitations with our method that need to be addressed. As discussed in section 5.3, if the search results used for weighting the candidate keywords include few documents related to the source document, the keyword added to the query is likely to be unsuitable. We could alleviate this problem by increasing the number of search results used for weighting. This would lengthen the execution time, however. It is thought that the number of documents related to the source document will not increase even if we increase the number of search results used for weighting to solve this problem. We need to investigate this problem. Also in section 5.3 we mentioned the problem of  X  Fuchu City  X  X eing incorrectly change to  X  Fuchu City AND Tokyo  X  when the source documents mentioned  X  Fuchu City  X  in Hiroshima included  X  Tokyo  X . This also needs to be investigated. Users expect search result s to be presented quickly. The execution time of our method is still too long for it to be practical. One way to reduce the execution time is to store the informatio n used for query modification in cache. Although in this paper we have focused on query modification for Web search, the idea of matching contexts can be exported to other problems such as image or video retrieval. We have developed a Web query modification method that uses both the con-text of the search term in the source do cument and in the search results to better reflect the user X  X  intention. It first extracts candidate keywords from the text surrounding the search term in the source document. These keywords are weighted based on the search results of the first query, and the one with the highest weight is added to the query. Experiments showed that our method of-ten found more documents related to the source document than a method using only the source document and a method using only the search results. However, our method took longer to execute. Since we plan to increase the number of key-words added, we need to speed up execution. Our goal is to relate the Web to the source document. We will thus enhance our method so that it finds not only related documents but also documents supplemental to the source document and to the document opposite the source document. Therefore, we will address the situation in which the user also composes or edits the document.
 This work was supported in part by Grants-in-Aid for Scientific Research (Nos. 16700097 and 16016247) from MEXT of Japan, by a MEXT project titled  X  X oftware Technologies for Search and Integration across Heterogeneous-Media Archives, X  and by a 21st Century COE Program at Kyoto University titled  X  X nformatics Research Center for Development of Knowledge Society Infrastruc-ture. X 
