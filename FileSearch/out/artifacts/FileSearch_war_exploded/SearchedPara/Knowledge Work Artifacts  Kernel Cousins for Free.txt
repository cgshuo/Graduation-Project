 Most empirical studies of peer production have focused on the final products of these efforts (such as software in Free/Open Source projects), but there are also many other knowledge artifacts that improve the effectiveness of the project. This paper presents a study of an intermediate work pr oduct, or informalism, used in a Free/Open Source Software project, GNUe. A digest-like artifact called the Kernel Cousin (KC) was used extensively in the project. These KCs allowed critical coordination and memory, but at the cost of considerable effort. The paper presents two examples of and costs. H5.m. Information interfaces and presentation (e.g., HCI): Miscellaneous, H.5.3 Group a nd Organization Interfaces Knowledge management, knowledge artifacts, free/open software systems, computer-supported coope rative work, CSCW, software engineering, online discussions. Yochai Benkler in his highly infl uential paper "Coase's Penguin" [4] argued for a new kind of production, which he termed commons-based peer production. He persuasively argued that many people could together create knowledge products, enabling new forms of production. We need to know more about the kinds of new practices that lead to knowledge production in informa tion-intensive, peer-production work. A great deal of energy has been devoted to detailing and studying the finished product of this work. For example, there are numerous studies of wikis, blogs , and more. However, peer-production work also entails forms of knowledge artifacts that appear to be transitory or even unfinished, yet are necessary to the work and lead to higher effectiveness. These interstitial artifacts, or  X  X nf ormalisms," [27] are often in places that require lightweight coordination and awareness to sustain distributed work practices. These would include the coordination of work in virtual organizations [30], [21], the orientation of new members into organizations, and the social maintenance of the organization at a relatively low cost. Of particular interest, these artifacts may also serve as intermediate forms of organizational memory [2]. organization, the GNUenterprise.org (GNUe) project. GNUe's goal was to construct an ente rprise resource planning (ERP) system that was free/open source software (F/OSS). The informalisms are called Kernel Cousins (KCs), a kind of community digest for summarizing discussions that are hyperlinked to source message s of important communication exchanges in a F/OSS project. Th e GNUe project was one of about 10 F/OSS projects worldwide that adopted and publicly posted KCs as a means for summarizing weekly discussions created and evolved by F/OSS developers who communicate through online discussions. The GNUe project utilized KCs for over 2 1/2 years, producing slightly over one hundred KC summary digests in that period. This paper begins with a brief lite rature review, and then discusses the nature of F/OSS production a nd organization. The KCs are then introduced, along with a description of the GNUe project. This is followed with two examples of KC use. The paper then discusses the KCs' utility in the GNUe project, highlighting their coordination and memory function. In this study, we are interested in new ways of knowledge production and use, particularly in new or changing forms of social organization. As has often been stated (e.g., [22]), the two -knowledge production and use as well as social organization -often co-evolve and change together. As such there are two bodies of research, found across many involves knowledge production and us e, and the second considers the particular form of social organization under examination here, F/OSS projects. (One might consider F/OSS projects as a case of a peer-based production, see Benkler [4].) We will discuss each body of research in turn below. The question of knowledge production and use in organizations has gone through many cycles of st udy and investigation. In its most recent incarnation, the question has fallen under the rubric of Knowledge Management (KM). Early KM studies emphasized technically-centered studies a nd often overly rationalistic or enthusiastic studies. Indeed, mu ch of KM was a response to the introduction of new technologies (e.g., the Web and networking) to organizations. Later, KM came to examine the social and organizational issues underlying know ledge in organizations. After initial technical adoption, blind enthusiasm gave way to an appreciation of the social issues in adopting and using these new technologies (notably, Intranets). (Davenport and Prusak [6] is a useful introductory statement of the social issues.) Some KM work, such as Wenger [32] and Ackerman and Halverson [1] [2], helped foster an appraisal of knowledge management as socially situated, inherently embedded in a set of social contexts that provided the information with its value and use and also provided a social backdrop for how knowledge processes came to be and were maintained. Recent work has almost despaired for the difficulties of creating knowledge pr ocesses within conflicted or ambivalent social structures. Throughout, there have been a handful of detailed, field-based studies that saw a more complex picture. These studies painted a picture of social considerati ons driving, constraining, and occasionally enabling technical a doption and use. These studies often examined specific artifacts (or families of artifacts) and their co-evolving organizational practices. These studies included Orlikowski's study of Lotus Notes and the need for a fit between prospective uses and organizational reward systems [25], [24], Palen's investigation of shared calendars and the very diverse practices centered in very small differences in systems and deployments [26], and Dourish et al.'s examination of two calendar/information systems and, again, differing possibilities for action based in relatively small di fferences in systems [8]. Of particular interest here is Halver son, Erickson, and Ackerman [16], where members of a large corporation constructed FAQs for a number of reasons, including personal, practical, and organizational considerations. This study showed that very micro-level co-evolution existed between artifacts (or rather, artifactual forms) and organizational, group, and personal practices. (Also see [3].) All of these studies and systems, however, were created in fairly mainstream, static organizations -mainly large corporations with collocated workers working within a common management regime. These studies showed how practices and artifacts became intertwined, or failed to do so. However, what would be most interesting is to understand how new organizational forms might require new or additional practices and artifacts. In turn, we might also expect artifacts and practices to engender new organizational forms. Of particular interest currently are F/OSS communities. As mentioned, these communities are instances of a more broad phenomenon, micro-contributory communities [4]. These communities are discretionary systems where people are able to not only regulate the amount of their contribution, they can also contribute very small amounts and still be productive members. Furthermore, the efforts of orga nizing these micro-contributions can be made minimal. The next section discusses F/OSS communities as micro-contributory communities that c onstruct software systems. This section discusses a brief hist orical account of the formation of the free software movement. It also distinguishes between free software and open source software and refers to both as free/open source software (F/OSS) as is the convention with most F/OSS researchers. F/OSS development represents a relatively new approach to the development of complex soft ware systems [14]. F/OSS development generally relies on a global distributed community of software developers and users who seek faster, better, and cheaper alternatives to closed proprietary systems. In most F/OSS projects, the resulting software system and its associated Web-based documents or development artifacts are globally accessible and publicly available at little or no direct cost. The terms and conditions of  X  X opyleft X  end-user licenses associated with F/OSS typically assert the following kinds of digital civil rights or "freedoms" to anyone who seeks to employ or use the software [7] [33]:  X  Freedom to run the program for any purpose;  X  Freedom to study how the program works and adapt it to their  X  Freedom to redistribute copies of the software at will;  X  Freedom to improve the F/OSS program and to distribute the  X  Required distribution of the originating license that specifies These rights and freedoms stand in marked contrast to those offered with the selection, cust omization, and deployment of commercial software. F/OSS development projects are iteratively developed, incrementally released, reviewed and refined by F/ OSS developers working as peers in an ongoing agile manner. These methods ensure acceptable levels of quality, coherence, and security of system-wide software via conti nuous distributed peer review, testing and profiling. F/OSS efforts are hosted within decentralized communities of peers ([19] [27] [12] [28] [10] [31]) that are interconnected via Web sites a nd F/OSS repositories. Community oriented F/OSS development has given rise to new kinds of requirements for community build ing, community software, and community information sharing systems (Web site and interlinked communication channels for email, forums, and chat). One of the key issues of importance to the free software community is its ability to manage software development without a top manager monitoring activity and passing judgement on the quality and timeliness of the work [27] [12] [28]. There is no lead organization or prime contractor that brings the alliance of individuals and sponsoring firms as a network virtual organization. It is more of an emergent orga nizational form where participants have in a sense discovered each ot her, and have brought together their individual competencies and contributions in a way whereby they can be integrated or made to interoperate [5] [20]. Most F/OSS projects are managed informally by a small group of core maintainers with one or two co-mai ntainers who make sure things are running smoothly. Since there is no schedule or timeline per se, software building, testing, a nd releases happen sporadically and not on a strict schedule. Membership flucutates everyday [29] from lurkers to unpaid regulars to full-time employees. In addition, the work is accomplished in a setting where many people communicate anonymously and never meet face-to-face to organize or manage the software contributions offered to the free software project. The core maintainers attempt to m eet at conferences once or twice a year, but the bulk of the work is accomplished without direct face-to-face communication with random contributors. Thus, the participants often self-organize in a manner more like a meritocracy [15] [18] [12]. A core maintainer explains th e typical method of managing the GNUe software assignments as: 
The number one rule in free soft ware is  X  X ever do timelines or roadmaps X . This is a pr oblem in open source projects. We could use a better roadmap, not having one hinders us. 
The features we add come about by need during consulting implementations. We may need some kind of roadmap in the future as we expand with more people. (Derek, face-to-face interview, August 2002) The research site is a free software development community that (http://www.gnuenterprise.org). GNUe is a meta-project of the GNU Project (http://www.gnu.org). GNUe is designed to collect Enterprise software in one locati on on the web. The system design for GNUe consists of three items: 1. A set of tools that provide a development framework for 2. A set of packages written using the set of tools to implement 3. A general community of support and resources for developers GNUe is an international virt ual organization for software development [5] [21] based in the U.S. and Europe. This organization is centered about the GNUe Web portal and global collaboration. Developing the GNUe software occurs through the portal, which serves as a global information sharing workplace and collaborative software developm ent environment. Its paid participants are sponsored by one or more of twelve companies spread across the U.S., New Zealand, South America, and Europe. These companies provide salaried personnel, computing resources, and infrastructure that support this organization. However, most project participants support their participation through other means. In addition, there are also dozens of unpaid volunteers who make occasional contributions to the development, review, deployment, and ongoing support of this organization, and its software products and services. Finally, there are untold numbers of "free riders" who simply dow nload, browse, use, evaluate, deploy, or modify the GNUe software with little/no effort to contribute back to the GNUe community [23]. As of end of data collection in 2005, GNUe contributors consisted of 6 core developers (2 of these were listed as co-maintainers who head the project); 19 active contributors; and 19 inactive contributors. The core develope rs are responsible for major portions of the software devel opment process including decisions about what software additions a nd modifications to include in software releases. GNUe is a community-oriented project, as are many F/OSS development efforts [27] [31]. The project started in earnest in 2000 as the result of the merger of two smaller projects both seeking to develop a free software solution for business applications. (More information and the history of the GNUe project can be found on the GNUe Web site.) The target audience for the GNUe software modules is envisioned as primarily small businesses that are underserved by the industry leaders in ERP software, perhaps due to the high cost or high prices that can be commanded for commercial ERP syst em installations [28]. Many of these target companies might al so be in smaller countries that lack a major IT industry presence. Developers contributing to th e ongoing evolution of the GNUe software in general provide their own personal computing contributors, but also true of sala ried participants who are paid to work on the GNUe software, particularly for their work at home. There is no standard or common personal computer configuration that is defined as the devel opment platform, other than the requirement that a computer can run either Microsoft Windows or GNU/Linux operating systems, and th at it can access the Internet or Web as needed. Thus, all GNUe community members must provide their own way into the project, via personal resource subsidies [28]. This study is a part of a larger ongoing research project that involves a comparison of F/O SS development techniques in various F/OSS communities ([11] [10] [13] [27] [12] [28]). The results presented in this paper are the result of an ongoing 4-year ethnography [17] of the free software movement and GNUe. The initial research questions that informed the qualitative analysis were: The sources of data for the study include: IRC logs from the GNUe research site; threaded ema il discussion messages archives; other Web-based artifacts associated with the Free Software Foundation and OSI, and the GNU proj ect such as Kernel Cousins (summary digests of the IRC and mailing lists described in this paper); and books and articles on F/ OSS. During the initial phase of research, we interpreted books and documents as well as Web site descriptions of free and open source software processes. We discovered strong cultural overtone s in the readings and began searching for a site to conduct a grounded theory study of how motivations and cultural beliefs influenced the social processes of free software development. We selected the GNUe site because it represented an exemplar of an active F/OSS project and it provided archived daily IRC logs and threaded emails in addition to detailed documentation of the existing ERP software. The first author spent over 200 hours studying and perusing IRC archives and mailing list samples during the open, axial coding and analysis phases of the study. During the open coding phase of our analysis, the first case study presented in [11] was selected as representative of the strong influence of cultural beliefs on GNUe software development practices. We discovered that for some GNUe participants, the strong belief in the development a nd use of free software was an idealistic motivation for joining and perpetuating the community. During this period, we also di scovered the KCs Web site and began coding and studying the GNUe KCs as a cultural artifact and as an integral part of thei r software development practices. The KCs also provided us with categorized summaries of discussions on the IRC and email thr eads. These indices helped us find the examples presente d in this paper. During the second phase of the study, we performed axial coding on various samples of how the st rong belief in the development and use of free software influen ced software development choices and practices. Using grounded theory, we discovered that their organizational culture was instrumental in maintaining a free software community in which people volunteer hours of effort to produce free software [9]. In addition, we explored the influence of the Free Software Movement on the ideology of GNUe and its work practices. This research also includes data from email and face-to-face interviews with GNUe core maintainers and contributors, and observations at Open Source conferences. For example, we exchanged email que stion-and-answer sessions with GNUe core maintainers and conduc ted a lengthy interview with one of the GNUe core maintainers at an Open Source conference in 2002. In the later stages of the research, we chose to study the KCs in depth as an artifact that contributes to the coordination of software development in a virtual distributed community. The main GNUe KC writer, Peter Sullivan, also answered several email questionnaires giving us detailed e xplanations of the importance of the KCs and of his role as a KC writer. Specifically, this study examines Kernel Cousins (KCs), a type of knowledge artifact used as an info rmalism  X  a seemingly transitory artifact that is actually quite important in creating effective peer production --in the GNUe project. As one might expect from F/OSS communities, they were ad apted for the GNUe project from the efforts of other F/OSS pr ojects. The KC Web site (www.kernel-traffic.org) contains a set of web-based newsletters from various free software projects. The newsletters serve as a summary of the weekly activity on the software development computer-supported communicati on (CMC) tools: IRC and mailing list archives. Started in 1999 by Zack Brown, a Linux Kernel developer and editor of Linux Today, the Kernel Traffic newsletter summarizes the activity on the main Linux kernel software development mailing list. As stated by Zack Brown on the current KC Web site,  X  X n it, Linus Torvalds, Alan Cox and a lot of other amazing programmers from around the world share patches, argue about implementati on details, discuss the news of the day, and generally make history. X  By September 1999 the Kernel Tra ffic web site had expanded to include newsletters from other free software projects: Wine, Hurd, Gimp, and Debian. To distinguish these newsletters from the original Linux Kernel one, Zack Brown named these Kernel Cousins, and established a standa rd format for all KCs hosted on the www.kernel-traffic.org site. From 1999 to the present, KCs have mainly been initiated and maintained by volunteers. When a KC volunteer author is no longer available and a substitute KC writer cannot be found, then the KC goes to  X  X leep, X  listed on the newsletter site as a  X  X leeping cousin X . However, the archives of previous publications persist a nd are still publicly available for browsing, search, or download. Once someone volunteers to continue writing a KC for a specific project again, that sleeping cousin becomes active again. As of 2005, there were only two active KCs: 1) the Wine project  X  a project to create a Microsoft Windows emulator running on Unix platforms, and 2) git  X  a recently formed project to design and develop a new revision control syst em for use in the Linux Kernel project. Zack Brown wrote the summaries for Linux (which consists of as many as 3000 messa ges per week), until he stepped down in November 2005. Table 1 shows the active and sleeping KCs that were listed on the www.kernel-traffic web site and th eir status as of late 2006. Table 1  X  Statistics on Existing/Sleeping Cousins The newsletters are written in XML using a makefile and XSLT recipe files along with a few vari ed scripts made available for download from the FSF website. Using the KC makefile and scripts enforces a uniformity to the newsletter formats enabling standardized conventions such as a list of all contributors quoted in the newsletter with the number of times they were quoted. All KCs have color-coded text to represent authors, exact quotes, contributors X  names who have been quoted, and hyperlinks pointing back to the originating source of IRC and mailing lists which the KC summarizes. See Figures 1 and 2 for examples. Unfortunately, we cannot reproduce the use of color and hyperlinks here, we instead substitute boldface type. The makefiles are set up with vari ous indices which are described below. We show in the GNUe KC section how these indices help people search through the KCs for summaries related to specific technical topics. Each KC is di vided into numbered sections with titles and where appropriate, the sections link to a list of related sections from other KCs. In this way, KC readers can select a topic and read a historical account of all threads related to that topic: Topics, Contributors, Index of TOC for each KC, KC Archives, and Authors. The GNUe community used these links to group sections of the KCs into topics related to their main modules: Application Server , Forms, Reports, etc. The KCs were used by GNUe de velopers during a period of November 2001 to September 2006. One can consider the KC newsletters as  X  X eflective X  documentation since they are subjective essays written by volunteers as a weekly summary of IRC logs and mailing list threads. There is no direct supervision as to the content, number of threads to include, or quality of communication to include in the weekly KC ne wsletter. Thus, the KC entries become a cultural artifact reflecting the writer X  X  personal preferences and style of writing. As a cultural artifact, the KCs serve to reify the sensibility of contributing to free software projects and to immortalize each contributor X  X  name in a digital artifact. In addition, when active, people reading the KCs would not have to waste inordinate amounts of time reading IRCs. During the period from 2000 to 2002, we interviewed one of the GNUe co-maintainer and core developer, Derek Neighbors, several times. We asked him ge neral questions about software development and management of free software developers. Generally, he was enthusiastic about the GNUe project, and was eager to correspond with us. When asked about software development management without knowing the developers on a personal level, he responded with The KC served the purpose of summarizing the discussions in this surrogate office so that people woul d not have to waste inordinate amounts of time reading IRCs. In fact, most of the work in GNUe takes place on the IRC instead of email or phone calls: Therefore, recording the GNUe activities in a KC instantiates GNUe developers forever and pr ovides a useful chronicle of software development activity. As well, they are  X  X ainly for folks who can not devote time to reading IRC logs or can X  X  access IRC real time, but want a high level view of what is going on.... It's the only way many can see what X  X  happening" (Derek). The main author of the KCs, Peter Sullivan, also provided us with detailed information and pers onal observations regarding experience with the KC in the GNUe project. While writing the KCs, he did receive positive feedback on their usefulness to GNUe developers. For the core develope rs who were always on the IRC, the main advantage was to catch up after being out of town. For others, the KCs served to inform more  X  X ringe X  users of activities without having to read the full logs . Peter suggested that now that KCs are gone, he noticed that people use email more and IRC less of the time. He believes this either the culture of the GNUe project is changing without the KCs to more of a mailing list work environment, or the new type of GNUe contributors prefer mailing list activity to IRC. He indicated that he had to step down as author of GNUe KCs due to time constraints caused by a new job (for which he was paid, unlike the volunteer work for GNUe). Writing KCs could take anywhere from 5 minutes to confirm no activity to about 2-3 hours a day for periods of  X  X eavy X  IRC and mailing list activity. much as he wished, he chose to try and cover all activities. Peter was not a GNUe developer; however, he was able to write the KCs as though intimately involved w ith GNUe's Python code. He Project Status #K Linux Sleeping 335 1/99 11/05 1929 Wine Sleeping 315 6/99 7/06 690 GNUe Sleeping 125 10/01 9/06 257 GIMP Sleeping 44 6/99 5/01 124 Debian Sleeping 28 Samba Sleeping 40 11/99 2/01 298 SLUG Pearls claims this familiarity came from  X  X nferring things from the context of the discussion, or doing some limited research on the web, or even just asking! X  Next we present the two examples of how KCs in order to ground our analysis of them. Below, we present two examples of GNUe software development work that are summarized in sections of a KC. The first case involves a discussion of whether or not a free software community should use non-free software tools to develop GNUe documentation. The second case is more of a technical nature and includes a newcomer who engages the GNUe developers with his skill in fixing GNUe bugs rather quickly. This case illustrates the dynamics of micro-contributions since the newcomer makes a significant contribution in a short period of time without ever meeting the core maintainers face to face. There were 169 people who were quoted once or twice during the three year period, from 2001-2004, 64 who were quoted 3 to 26 times, and 4 maintainers who were quoted 1835 times in total. The bulk of the work appears to have been performed by the top four maintainers. However, dozens of other pe ople, like mc380 in our second example, donate smaller amounts of individual time and effort than the core maintainers yet make significant contributions as a whole. KC Example 1 -Saves time for developers Figure 1 shows the KC for the first example. It illustrates how the KC documents a three-day debate which occurred on both mailing lists and IRCs in which contribut ors debated the issue of using non-free tools to develop GNUe documentation. In this example, Chillywilly, a frequent contributor, balks at the need to install a non-free tool on his computer in order to edit documentation associated with a current release. Even though his colleagues attempt to dissuade him from his c oncerns by suggesting that he can use any editor  X  free or non-free  X  to read the documentation in HTML or other formats, Chillywilly refuses to back down from his stance based on a strong belief in free software. This debate lasts three days. Since the three IRC archives also include interactions among contributors on se veral other issues as well, the KC gives interested readers a clear update on an issue that would otherwise have required reading lengthy IRC archives. The KC has been excerpted for space reasons (see Figure 1 below). Note that there are there is a way to link back to other discussions; for example, the first line where there is a hyperlink back to KC Issue #3. Next we show a very small portion of the IRC log for the November 14, the first day of the debate. Chillywilly announced on the IRC that a fellow collaborator, jamest, had made documents with lyx and questions the appropriateness of using lyx since it requires the installation of non-free software. The following IRC excerpts have been changed slightly for readability: This discussion continued into November 15 and evolved into a discussion of the problems with docbook as well. A lengthy and heated discussion ensued on the IRC. Actually, the document was also available in html and text format, so Chillywilly could easily have read the documentation. Other developers with a more moderate view about the sole use of free software criticized his argument regarding lyx. Even though they agreed that Chillywilly was being unreasonable, several participants agreed with his ph ilosophy. Chillywilly continued to argue, however, that the installation of lyx did not match his philosophical orientation toward free software development. Chillywilly ended this conversation with an exclamation that the lyx is "evil" software. The conversation continued with a lengthy discussion of technical issues unrelated to the documentation problem. Meanwhile several people sent emails about the documentation fight to the distribution list. This distribution list, as mentioned, is much more public. One of the other GNUe developer's emails included: The conversation continued with and without Chillywilly regarding lyx usage. The next day, Chillywilly broached the subject of jcater X  X  response to Chillywilly X  X  email regarding lyx. As might be expected, Chillywilly stuck to his diehard view without any interest in switching to non-free software. Finally, Chillywilly was convinced to drop the issue for the present. Mr_You appealed to Chillywilly to not let his philosophy impede progress, and jcater sugge sted that constant bickering looks bad for the GNUe project. Chillywilly still insisted that needing to install non-free software is a huge impediment to developers, yet finally he dropped the issue. As mentioned, GNUe readers w ould have had to read through roughly 34 pages of the IRC logs to fully read the discussion summarized in approximately 4 para graphs of a KC. Of course, there would have been many extraneous comments and other conversations in that IRC log, which would have made using it even more difficult. One of the standard problems of IRC is rereading a log file to catch up. What may have been difficult to see in the printed version, the KC includes links to the relevant porti ons of the IRC conversation, so interested parties can review those relevant conversation fragments. Figure 2 shows the KC for the second example. It illustrates how the KC can serve as an index and summary of complex technical discussions. This particular disc ussion thread becomes linked to a larger set of mailing list threads called the Application Server. In this example, a newcomer, mcb30 or Michael Brown, joined the IRC and requested CVS (archiva l) access after pointing out bugs which he had fixed during his GNUe installation. He was a consultant who wanted to use th e GNUe software to help him run his small business in England. Th is example reflects the sporadic software development that results in substantial code fixes and design modifications from an in frequent contributor. Mcb30 was quickly accepted by frequent contributors especially because he posted significant bug fixes very rapi dly. However, his name is listed in the KC contributor list only seven times so he did not contribute to the project on a long time basis. The story of the KC here is somewhat complicated; we simplify it here for publication purposes. On November 16, mcb30 got on the IRC and asked for information regarding the use of GNUe. He had a conversation on the IRC w ith reinhard about GNUe and bug reporting: Over the course of the next three days, mcb30 made changes to the software and tested it. Each da y he sent messages to the mailing list and IRC while working offline on the GNUe software bug fixes. Some of what he did is summarized in the KC for November 16 through November 19. Throughout four days of detailed discussions on the IRC and mailing lists, mcb30 contributed code and design ideas related to the module. Finally, after testi ng these code modifications, he suggested to the core contributors on the mailing list that he should have  X  X ommit X  access so that he could submit the code for the next release. He was told that he needed to sign a copyright form with the Free Software Foundation (FSF). Accordingly, mcb30 asked for copyright assignment requireme nts on the IRC and then he was directed to the mailing list. Th e IRC exchange, with all of its noise, includes the following: This continued on the mailing lists. Mcb30 said in an email: A core developer answered sayi ng that he thought the copyright assignment process took a week, but might be speeded up. This was corrected by one of the core developers of the project: Mcb30 responded: The KC summarizes this entire exchange (which we have summarized in our account as well). After the copyright discu ssion on the mailing list, mcb30 continued to show up sporadically in IRC, but did not continue his efforts on GNUe. Nonetheless, th e KC continues to serve as a summarization of how to obtain commit access and the copyright issues involved in that access. In the above two examples, one can see that the KCs can lead to the rapid assimilation and condensation of sprawling conversations. This had three major benefits for the virtual participation to members of GNUe . People did not have to pay attention to details in many disc ussion messages, as the important conversations would be summari zed -allowing members to note that they existed as well as the gist of the discussion. It became even more useful after vacations or other periods away from the project. If necessary or important, members could follow the relevant links to recover the entire conversation. Second, people who were not central to the effort could maintain a low-level interest in the project. As mentioned, one of the central uses of the KCs was to inform ma nagers (of interested companies or of the participants themselv es) and others who needed to monitor but not fully engage the project. KCs enabled standard organizational practices to interoperate with the GNUe work practices. Third, the KCs reinforced important decisions. They were written down, and therefore they became remarkable, as well as indexible, navigable, and searchable. One could easily retrace them, making it possible to quickly go through the important design decisions on an ongoing basis. As such, they served as an important, informal design rationale or design memory. While the KCs were a form of digest, this informalism, then, enabled critical peripheral awarene ss and peripheral participation, either directly (through memory or background attending) or indirectly (through managers' being able to casually monitor). In a highly distributed, volunteer project, this is critical. KCs enabled more people to attend and engage as they could, thereby enabling the participation of a larger group of interested people. KCs were not perfect, however. One of the issues that we found most interesting was KCs' de pendency on a small number of people, and in GNUe on only one person. Attempts to turn the KC production over to others or to distribute it among a small group were not successful, revealing seve ral important issues. The KCs were time-intensive, and th ey required someone who was technically strong. One had to understand deeply the technical issues involved. In most F/ OSS projects, people with that capability are cutting code, as this is more socially and vocationally central. Therefore, the KCs required someone who was technically adept, had time, and was relatively unconcerned about the social centrality of code production. This is rare, and hard to cultivate. This may also be why the KCs, while serving as a form of design rationale, were not further distilled into formal documentation. As well, it is quite possible that KCs as well are important at a specific time in a F/OSS (or other) project. A strong possibility is that KCs are best used when the project is being intensively developed. There is great c oordination and communication need, and it is hard to stay caught up. Phone conferences are one way that handles the need for constant coordination, but KCs provide a more durable and easily retrieved/searched memory. KCs are also lighter-weight than phone conferen ces for casual participants, as they do not require the synchronous participation of phone conversation; they allow b ackground attending and peripheral awareness. When the project is more stable or slower-paced, KCs may be less valuable. We cannot know this with certainty, however, without further study. The use of KCs in the GNUe project illustrates use of seemingly transitory knowledge artifacts as informalisms to enhance coordination, help social and proj ect maintenance, and maintain a shared understanding and identity within a complex, distributed project. GNUe is a classic F/OSS project that maintained an identity centered in its code pr oduction. However, we could expect that other virtual orga nizations would require similar artifacts, able to focus the organizational participants on the important activities and their histories in a timely and efficient manner. These artifacts might have little value or use after these activities end. Nonetheless, thei r importance in organizational effectiveness, and especially in peer production, should not be underestimated. Indeed, the GNUe KCs were useful and important in the ongoing work of the project in a manner that reiterated the value of collaboration through peer production. Obviously, if the KCs were important, why were they not continued? Although we made a significant effort to determine this, the answer remains murky. We believe that a fair amount of the answer lies in the unique characteristics of the main author of the KCs, Peter Sullivan in GNUe, or Zack Brown in Linux Kernel. Peter (and Zack) was technically skilled, was able to summarize well, was willing to write, pers onable, had enough time, and was able to engage in deeply technical discussions of source code functionality or structure without engaging in source code development. These are rare skills in F/OSS projects where participants primarily contribute to the project on their own time. (One could imagine that they woul d be less rare in organizational projects; the central vocational anchor in F/OSS projects is technical expertise.) Nonethel ess, we could envision several ameliorations. Training, in places like Information or Informatics schools, may enable these conjoined skills to be more readily available. Additionally, one could imagine that if one of the major issues with KCs or other similar forms of knowledge artifacts is sheer time, technical augmentations to facilitate distillation [2] might ease the problem. Production of the KCs required laborious cutting and pasting, as well as linki ng, by hand. Clearly, this is a place where relatively straightforward tools would help. One could even imagine distributed tools that allowed project participants to mark important sections of IRC or email discussions, expediting KC authoring. The research described in this report is supported by grants #0083075, #0205679, #0205724, #0350754, #0534771, and 0325347 from the U.S. National Science Foundation. No endorsement implied. Les Gasser at UIUC; John Noll at Santa Clara University; and, Chris Jensen and others at the UCI Institute for Software Research are collaborators on the research described here. [1] Ackerman, M. S. and Halverson, C. Considering an [2] Ackerman, M. S. and Halver son, C. Organizational Memory: [3] Ackerman, M. S., Halverson, C. A., Erickson, T. and [4] Benkler, Y. Coase's Penguin, or Linux and the Nature of the [5] Crowston, K. and Scozzi, B. Open Source Software Projects [6] Davenport, T. H. and Prusak, L. Working Knowledge: How [7] DiBona, C., Ockman, S. and Stone, M. Open Sources: Voices [8] Dourish, P., Bellotti, V ., Mackay, W. and Ma, C.-Y. [9] Elliott, M. The Virtual Organizational Culture of a Free [10] Elliott, M. and Scacchi, W. Free Software Developers as an [11] Elliott, M. and Scacchi, W. Free Software: A Case Study of [12] Elliott, M. and Scacchi, W. Free Software Development: [13] Elliott, M. and Scacchi, W. Mobilization of Software [14] Feller, J. and Fitzgerald, B. Understanding Open Source [15] Fielding, R. T. Shared Leadership in the Apache Project. [16] Halverson, C. A., Ericks on, T. and Ackerman, M. S. [17] Hine, C. Virtual Ethnography . Sage Publications, Newbury [18] Jensen, C. and Scacchi, W. Role Migration and Advancement [19] Kogut, B. and Metiu, A. Op en Source Software Development [20] Ljungberg, J. Open Source Movements as a Model for [21] Noll, J. and Scacchi, W. Supporting Software Development in [22] O X  X ay, V. L., Bobrow, D. G. and Shirley, M. The Social-[23] Olson, M. The Logic of Collective Action . Harvard University [24] Orlikowski, W. J. The Duality of Technology: Rethinking [25] Orlikowski, W. J. Learni ng from Notes: Organizational [26] Palen, L. Social, indivi dual and technological issues for [27] Scacchi, W. Understanding the Requirements for Developing [28] Scacchi, W. Understanding the Development of Free E-[29] Scacchi, W. and Jensen, C. Guiding the Discovery of Open [30] Schmidt, K. and Simone, C. Coordination Mechanisms: [31] Sharma, S., Sugumaran, V. and Rajagopalan, B. A [32] Wenger, E. Communities of practice: learning, meaning, and [33] Williams, S. Free as in Freedom: Richard Stallman's 
