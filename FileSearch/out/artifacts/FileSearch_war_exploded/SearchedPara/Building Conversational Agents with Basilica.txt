 Conversational Interfaces apply t he metaphor of agent to an interface which allows the user to co n-versationally interact with the machine using nat u-ral language through speech or text . The c urrent state of the art in the area of conversational inte r-faces is largely dominated by spoken dia log sy s-tems (SDS). These SDS are most often used for the purpose of accessing information from a dat a-base over the telephone. Other common applic a-tions of conversational agents include computer aided instruction (CAI) and human -robot intera c-tion (HRI).
 CAI and HRI are designed to work within the scope of specific task domains which allows the scientists and engineers working on such systems to ensure satisfactory and relevant interaction with the user most of t he time. Within the task domain, such agents can display intelligent interactive b e-havior like helping the user use the interface, as k-ing remedial questions (Bohus and Rudnicky, 2005) , shaping the user behavior (Tomko and R o-senfeld, 2004 ) by using alternat ive phrasing of u t-ter ances , responding to user affect ( D X  X ello et al., 2008 ) through text, voice and gesture, engaging the user through the display of presence via backcha n-nels (Ward, 1996) and embodi ment (Ca s sell et al., 1999) .
 tive agents get built for many task domain s (Raux e t al., 2005; Bohus et al., 2007 ; Gockl e y et al., 2005 ; Amtra k Julie ; ... ) that surround our ever y-day life, we observe a gradual tra n sition in the use of the conversational agent technology to be a form of situated interaction. One of the characteristic requirements of this tra n sition towards ubiquity of such intera c tive agents is the capability to sense and trigger beha v ior in a context sensitive way . ly trigger used by the agents is that of initiation of conversation usually by sensing user presence through a telephone call, proximity dete c tion or user login in to a virtual environment. The initi a tion event is followed by a scripted task -oriented co n-versation with the agent. These scripts could be fairly complex depending on the represent a tional formalism underlying the script. Most of the co m-mon software architectures/ platforms used to create conversational agents like TellMe Studio, Voxeo Prophe cy, Olympus (Bohus et al., 2007 ), DIPPER ( Bos and Oka, 2003 ), etc. use one or more of these pre s ence sensing techniques and one of the many existing scripting languages in cluding VoiceXML, SALT , TuTalk (Jo r dan et al., 2007) and Ravenclaw (Bohus and Ru d nick y, 2003) task specification lan g uage among others. versational agents situated in collaborative learning e n vironments, we have discovered the need for a software architecture for creating agent s that per s-ist in a n interactive environment in which human users interact with these agents as well as with each other. In this situation, the agents need to be able to sense many kinds of tri g gers at many points of time and choose to respond to some of those trigger s throu gh a variety of modalities including conversation . This observation was the motivation for creating Basilica which is our architecture for building conversational agents. In se c tion 2, we talk more about the intricacies of Basilica and agents built on this architecture . Section 3 d e-scribes some of application scenarios in which we are using Conversational Agents based on Basilica . In order to meet the need for an architecture that e n ables development of Conversational Agents as a colle ction of behavioral components that can sense triggers and respond to those a p propriate ly , we cre ated the Basilica architecture.
 pon d ing as two ty pes of components that make up conversational agents. The sensin g comp o nents referred to as Filters observe stimuli from various kinds of input sources and other comp o nents . They can also generate stimuli for other comp o nents. On the other hand, Actor components generate respo n-sive behavior that may be observed the use r(s) and other components . Basilica provides the software element s r e quired to tie Filters and Actors together through Conne c tions that carry E vents over them. We think that many of the state of the art intell i-gent behavior s listed in section 1 can be impl e-mented as d y ads of filter and ac tor components. classes listed above can easily be extended . For e x am ple, certain agent designs may need memory components and coordination co m ponents which bridge across multiple act ors or filters that do not necessarily share events with each others . Timer components may be used to generate regulated stimuli. Besides belonging to one of these classes of components, certain components may act as wrappers to exte r nal systems. For examp le, we use wrapper components to integrate TuTalk dialog manag e ment system (Jordan et al., 2007) for some of the instructive behavior exhi b ited by our agents. Also, certain components act as wrappers to the env i ronment in which the agent is present. These wrappers help in easily integrating the same agent with multiple environments without having to change any underlying components except the wrappers to the env i ronment. agents can be built for situated int eraction applic a-tions by incrementally building a large number of behavioral components. Each of these components represent a decomposition of the agent X  X  perce p tive and cognitive capabilities. Among the agents we have built using Basilica, we observe that some of these capabilities are common across agents . Hence the corresponding behavioral co m ponents get re -used in many cases . Some instances of co m-ponent re -use are mentioned in Section 3.
 mo d eling conversat ional agents as a decomposition of components . Jaspis ( Turunen and Hak u linen, 2003) models the agent as a collection of mana g-ers , agents and evaluators which synchr o nize with each other through tran s actions . RIME (Nakano et al., 2008 ) di s tributes cognitive capabilities across a collection of experts of two types . However, ev a-luators and agents are configured as a pile of co m-ponents whereas our filters and actors are configured as a network . Hence, designing conve r-sational agents with Basilica gives the flex i bility to change the network topo l ogy . Also, while Jaspis agents are stateless, actors in our archite c ture need not be stateless. In other work on event -based mu l-ti -layered architectures (Raux and Esk e nazi, 2007), events are used for comm u nication between layers as a mean to provide higher reactive co m pared to pipeline architectures. While we share this motiv a-tion, definition of events is extended here as events are used for all kinds of communication, coordin a-tion and co n trol in Basilica. In 2008, we built three conversational agents to support learners in collaborative learning enviro n-ments. Also, we are currently using Basilica to d e-velop a cross -lingual assistive agent to support non -S panish speaking 911 dispatchers in the southern states of the US. In this section, we will discuss these four convers a tional agents briefly. helps college sophomores studying Thermodyna m-ics learn about principles of designing Steam cycles. In our recent experiment s , we have studied the effectiveness of conversational agents in this inte l ligent tutoring system (Kumar et al., 200 7 ; Chau d huri et al., 2008) . Student use the system both individually and in pairs. The conversational agent monitors stude nt interaction in a chat room as the students work on solving a design problem. The tutor provides the students with hints to help touch upon all the underlying concepts while the students work on the design exercise. Also the agent brings up reflective di alog s when it detects a relevant topic in the students convers a tion. One of the pro b lems we observed over the years with the use of instructional dialogs in collaborative env i-ronments is that the students tend to ignore the t u-tor ing agent if it interrupts the students when they are talking to each other. Basilica helped us in r e-solving this problem by implementing a comp o-nent that tells that st u dent that help is available on the topic they are talking about and they can ask for the dialog support when they are ready. Basil i-ca gives the flex i bility to change the intervention strategy used by the agent when it is speak ing with more than one student.
 agent prompted the students with some motiv a-tional prompts occas ion a lly as we observed that many of the students found the design exercise very demanding to complete in the time permi t ted for this lab exercise . We found that the use of m o-tivational prompts improved the student X  X  attitude towards the aut o mated agent.
 level mathematics students working on problem solving. This agent operates in a collaborative e n-vironment which includes a whiteboard. As in the case with the CycleTalk agent , the agent used here also helps the stud ents with hints and dialogs. The component required for those behaviors were re -used as -is with modifications only their configur a-tion files. Besides these behaviors, the agent coo r-dinates the problem solving sessions for the team by presenting the team wi th problems as i m ages placed on the whiteboard and helping the students stay on track by answering questions about the amount of time left in the problem solving se s sion. per components of our CycleTalk agent and i nt e-grated the m with a SecondLife application (Weusijana et al., 2008) . This integration helps developers of conversational agents create intera c-tive agents in the SecondLife virtual environment. building an a gent that would interpret Spanish u t-terances from a distressed 9 -1 -1 caller and work with a human dispatcher who does not know Spa n-ish to attend to the call. We model the agent in this sc e nario after a human translator who does not just translate the calle r X  X  input to English and vice ve r-sa. Instead the translator partners with the di s-patcher to provide service to the caller. Partnering conversational agents with a human user to help another human user in a different role is a novel application of i n teracti ve agents. Building conversational agents using Basilica i n-volves the process of representing the desired agent as a decomposition of components. Figure 1 above shows the compone nts that make up the CycleTalk conversational agent we mentioned in Se c tion 3. The rectangles represent Filters and the parallelograms represent Actors. Connections are shown as solid lines. In a detailed design, these lines are annotated with the event s t hey carry. required for the implementation of the agent can be either re -used from the pre -existing comp o nents of Basilica or implemented as Java objects that e x-tend the corresponding comp o nent class. Often the programming task is limited to implementing ha n-dlers and generators for the events received and sent out by the component. Theoretically, the v a-lidity of a component can be verified if it can ha n-dle and generate all the events as specified in the desi gn diagram.
 agents on this architecture, we intend to create d e-velopment tools which would easily translate a design like Figure 1 to the implementation and f a-cilitate validation and debugging of the agent. The demonstration of our architecture will give the audience an opportunity to interact with the agent s we have described in se ction 3 and discuss how we can design such agents using Basilica. We will have a poster to aid the discussion along with abil i-ty to probe into the code underlying the design of these agents. Attendees will be able to understand the process involved in building agents with Bas i-lica and a ss ess the effort required. Additionally, if we have any specialized development tools to a u-tomatically map agent design as described in Se c-tion 4 to Java code, we will demonstrate those tools. Up to date i nformation about Basilica can be found at http://basilica.rohitkumar.net/wiki/
