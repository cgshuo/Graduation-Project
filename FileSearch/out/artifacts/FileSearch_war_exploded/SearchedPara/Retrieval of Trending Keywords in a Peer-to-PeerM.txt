 We investigate the problem of identifying trending informa-tion in a peer-to-peer micro-blogging online social network. In a distributed decentralized environment, the participating nodes do not have access to global statistics such as the fre-quencies of the keywords and the information creation rate. We propose a two step solution. First, nodes make a local estimate of the frequency of keywords in the network based on their local information. At each iteration a subset of nodes collect this information from a small subset of random nodes in the network and aggregate the results. The most frequently occurring keywords are identified. In the second step, a node requests another small random subset of nodes to identify when, in the recent past, the more frequently occurring keywords were seen in micro-blogs. Once again this information is aggregated the fraction of time within a consecutive period that keywords were encountered is calcu-lated. If this fraction, referred to as the trending fraction, is close to 1, then the keyword is predicted to be trending. A simulation on a network of 10,000 nodes shows that the solution is capable of detecting multiple trending keywords with a moderate increase in bandwidth.
 H.3.3 [ Information Search and Retrieval ]: Search Pro-cess; H.3.4 [ Systems and Software ]: Distributed systems X  Peer-to-Peer Social Network Unstructured Peer-to-Peer Network; Micro-blogging; Social Network; Trending Keywords
In micro-blogging social networks such as Twitter, users generally receive updates from peers they are following . Trend-ing information offers an alternative source of information. A trending keyword is broadly defined as a keyword that is more frequently posted than other keywords over some period of time 1 . Trending keywords are posted to all users.
Identifying trending keywords in a centralized system is straightforward. However, in a P2P environment, nodes do not have have access to global statistics, which makes trend detection difficult in an unstructured P2P environment.
A number of peer-to-peer online social networks have been proposed. For example, the distributed social network, Di-aspora 2 has been designed to address the issue of ownership of user data. P2P social networks based on distributed hash tables (DHT) such as PeerSoN [3], eXO [5], Cuckoo [7], and My3 [6] have been proposed to address issues of privacy and data availability. These systems describe how a user may disseminate updates to peers who follow the user. However, they do not address how a user could perform a keyword search of all the data in the network. The DHT based sys-tems also do not address the retrieval of trending keywords in the network.
The P2P system we consider for retrieval of trending in-formation is the proposed Pac X  X Post system by Asthana and Cox [1, 2]. Pac X  X Post is based on an unstructured network and does not require a DHT. Unlike the DHT-based P2P social networks, Pac X  X Post facilitates both the retrieval of followed blog posts, as well as keyword search of all blog posts.

The Pac X  X Post system has two key components: repli-cation and retrieval. The retrieval component is based on a probabilistic search that queries a fixed number of nodes. This form of search is known as probably approximately cor-rect (PAC) search [4], and a strong theoretical framework exists to predict the probability of a successful search based on the distribution of documents in the network. Retrieval and search of micro-blog posts is then dependent on how a micro-blog is replicated in the network. To achieve rapid yet non-exhaustive replication, a modified rumour spreading algorithm is utilized, in which each micro-blog is replicated onto an average of r random nodes within an n node net-work.

A node which wishes to retrieve the posts it follows or wishes to perform a keyword search, sends its query to z randomly selected nodes. The accuracy (  X  ) of the search is http : // en . wikipedia . org / wiki / Twitter # Trending topics https://joindiaspora.com/ defined [4] as The accuracy applies to both the retrieval of followed posts ( known-item search), as well as keyword search. The key characteristics of the Pac X  X Post system are: The Pac X  X Post protocol consists of the following steps:
Each node re-constructs its transfer buffer after respond-ing to a request or processing the responses from the queried peers. Posts which are s iterations old or younger are se-lected into the buffer with an exponentially decreasing prob-ability which is a function of the age of the post: P ( sel ) = e  X  t/ X  , where t is is the number of iterations a post has been in existence and  X  is referred to as the dissemination param-eter. This process stifles old posts and allows newer ones to replicate in the network. Stifling is a feature of rumour spreading algorithms where nodes know of a rumour but do not share it when contacted by other nodes. More informa-tion on this process can be found in [2].
 Pac X  X Post assumes message latencies of a single time unit. Thus each iteration is equivalent of one second and the two are used interchangeably. The publication time of a blog post is equivalent to the iteration number at which it was created.
The retrieval of trending keywords in P2P micro-blogging network can be conceptualized as follows: Given a post cre-ation rate of  X  posts per iteration, we define a trending key-word as one which exists in a proportion of  X  for t consecu-tive iterations. Let the trending keyword appear in a frac-tion y of the post creation rate,  X  . If a node receives posts containing the trending keyword such that at least one post Figure 1: An example of the keyword storage. Keywords are extracted from posts, and stored in the set which corresponds to the iteration at which the post was published. belongs to each of the t iterations (or a large fraction of the t iterations), then the node can recognize the keyword as trending without any central coordination.

In the system described in Section 2, the restrained repli-cation allows a post to be replicated onto r/n fraction of the network. Similarly, a node is likely to receive  X r n of the posts and  X yr n of the posts containing a trending keyword at any given iteration. Over t iterations, the probability it receives i posts containing the trending keyword is simply and the probability that the node will come across the trend-ing keyword at t , t  X  1, or t  X  2 times is very low.
To facilitate the identification of trending keywords, nodes are required to implement a keyword storage area which stores keywords of the recent blog posts the node has en-countered. Nodes receive blog posts by contacting z other nodes or by being contacted by a peer making its scheduled query for micro-blogs it is following. Keywords are extracted from these posts and inserted into sets where each set in the keyword storage corresponds to one iteration (Figure 1). We can utilize the information from the keyword store alongside the scheduled exchange of transfer buffers, as described in Section 2, to determine whether a keyword is trending in the network.

One rudimentary method would be to exchange all the contents of the j most recent sets when peers contact each other as part of the scheduled query mechanism as described in Section 2. As we increase the value of j , a trending keyword gets more time to replicate onto more nodes, and within a short period of time, each node can observe the keyword occurring in t consecutive iteration. However, this method consumes a very large amount of bandwidth -10 to 15 times the size of the transfer buffer depending on the value of j . We omit the results of the rudimentary method due to space limitations.

To observe a keyword as trending in an unstructured P2P network, the keyword information is instead exchanged as follows: By summing the frequencies of the keywords, we leverage the sample index of a PAC based system. The size of the sample index is the number of non-unique documents indexed by the sample of z nodes. The size of sample index for a system designed for 95% retrieval accuracy is approximately 3 time the number of unique documents in a collection. Thus, the observed value of the total frequency should be 3 times its actual frequency. A detailed analysis of the sample index can be found in [4].

In our proposed method, at each iteration, when nodes make their scheduled request, they request the iteration numbers of the most frequent keywords in the keyword-frequency list obtained in their previous query, and receive a new keyword-frequency list which they will utilize in their next scheduled query. This process piggy-backs on the al-ready scheduled request so no new requests are made by the nodes. However the size of the requests and responses is increased, with a corresponding increase in bandwidth, as discussed shortly.

Once a node has merged and sorted the retrieved times (measured in iteration number), it records the first time the keyword is observed and then counts the number of times the keyword is observed in the subsequent t iterations. The ratio of this number to t is defined as the trending fraction ,  X  . If  X  has a high value at a node, the node can infer that the keyword has occurred in most, if not all, of the t iterations and thus can be displayed to the user as a trending keyword.
To verify our proposed method, we simulated the system described in Section 2. The network consisted of 10,000 nodes. The dissemination parameter,  X  = 5 . 9, which re-sulted in blog posts being replicated to, on average, 12% of the network. Each node made a request to z = 25 other random nodes every s = 30 iterations.

At each iteration, we created  X  = 25 micro-blog posts at random nodes in the network. We note that 25 posts per Figure 2: The frequency of occurrence of the trending keyword as observed at nodes in the network when the keyword occurs in y = 15% of the posts created between iterations 46 and 55. iteration in a network of 10,000 nodes is 100 times larger than Twitter X  X  tweets-per-second based upon 4,600 tweets per second from a user base of 200 million users 3 . All posts were sampled without replacement from the TREC Micro-blog Tweets2011 corpus 4 . For t = 10 consecutive iterations, we injected a trending hashtag into y percent of the posts created at that iteration. We set f = 10 so that nodes request the times (iterations) of keywords whose frequency is 10 times or higher than the median frequency. We ran 10 simulations for each value of y and j and experimental results report the average of the 10 simulations Table 1: The number of nodes with the associated trending fraction,  X  , and the percentage increase in bandwidth, ( Bw ), for y , the percentage of posts per iteration in which the trending keyword is inserted.
Figure 2 shows the frequency of the trending keyword with j = 3 and f = 10 where a trending keyword appeared in y = 15% of the posts created between iterations 46 and 55. Of the 250 posts created in this time period, 36 posts con-tained the trending keyword. These posts are replicated by http://techcrunch.com/2012/12/18/twitter-passes-200m-monthly-active-users-a-42-increase-over-9-months/ http://trec.nist.gov/data/tweets/ the transfer buffer mechanism. A node making its sched-uled request to z other peers will receive the top-j keyword-frequency pairs from each of the z nodes X  keyword storage. The node then accumulates all the frequencies for each key-word. Figure 2 shows, for example, a node making its sched-uled request at iteration, say, 70 would find the accumulated frequencies of the trending keyword to be 105, which is 3 times the total number of times the trending keyword has been published, as predicted by the sample index . A node making its scheduled query at iteration 58, would calculate the trending keyword frequency as less than 3 times the ac-tual value. This is due to the fact that the posts containing the trending keyword have not yet being fully replicated. The node would make another request s = 30 iterations later when it would be able to calculate the total frequency of the trending keyword correctly.

Table 1 displays the number of nodes with trending frac-tions greater than 80% and 90% for various values of y and j , the number of keyword-frequency pairs returned by queried nodes. When a trending keyword appears in y = 5% of the posts, with nodes returning the top-2 keyword-frequency pairs, i.e. j = 2, we observe that 9,379 nodes of a total of 10,000 nodes, have a trending fraction of 80% or higher. Thus, a very high fraction of nodes, 93%, can infer that the keyword is trending in the network.

Table 1 also shows the increase in bandwidth caused by j and y . In order to facilitate trending keywords, nodes transfer tokens , i.e. keywords, frequencies of keywords, and iteration numbers. We sum up the number tokens trans-ferred between nodes for each iteration of each simulation. We then take the maximum value and divide by the num-ber of nodes to give an average number of tokens that each node needs to accommodate alongside its transfer buffer. This number of tokens per node per iteration is the extra bandwidth generated for trending keywords. The percent-age increase is calculated against the expected bandwidth of 15 words per blog post 5 and an an average of 3.5 blog posts in the transfer buffer [2].

Both j and y contribute to the bandwidth generated for trending keywords. As j increases, the number of keyword-frequency pairs increase, and as y increases, the keyword is replicated onto more nodes which then return the iteration numbers.
 Table 2: The number of nodes with a trending fraction of  X   X  80% in a system with 5 trending keywords for various values of y and j . We also tested the system for multiple trending keywords. We injected 5 trending keywords for t = 10 consecutive it-erations with 1 keyword appearing in 5%, 3 keywords ap-pearing in 10%, and 1 keyword appearing in 15% of the posts respectively. Table 2 displays the number of nodes with  X   X  80% for the 5 trending keywords. When j , the http://web.resourceshelf.com/go/resourceblog/54128 number of keyword-frequency pairs, is small, the one trend-ing keyword occurring in 5% of the posts is not included in the keyword-frequency pairs due to the presence of key-words which occur in 10% and 15% of the posts. Conse-quently, with j = 2, the keywords occurring in 5% of the posts are not identified as trending by the majority of the nodes. However, Table 2 shows that with j = 3, the system can accommodate multiple trending keywords.
Trending keywords in a micro-blogging social network are useful to users as they provide information which users may not normally receive via the peers they follow. In this pa-per, we proposed a two-step algorithm for the retrieval of trending information in a peer-to-peer micro-blogging so-cial network. In the first step, nodes makes an estimate of the frequency of the keywords in the network. In the second step, they select the most frequent keywords and ensure that these keywords have occurred in posts which were published at different times within a given interval. Our analysis shows that this two-step method has a relatively small impact on the bandwidth of the system. [1] Asthana, H., and Cox, I. J. Pac X  X post: a framework [2] Asthana, H., and Cox, I. J. Retrieval of highly [3] Buchegger, S., Schi  X  oberg, D., Vu, L.-H., and [4] Cox, I. J., Fu, R., and Hansen, L. K. Probably [5] Loupasakis, A., Ntarmos, N., Triantafillou, P., [6] Narendula, R., Papaioannou, T. G., and Aberer, [7] Xu, T., Chen, Y., Fu, X., and Hui, P. Twittering by
