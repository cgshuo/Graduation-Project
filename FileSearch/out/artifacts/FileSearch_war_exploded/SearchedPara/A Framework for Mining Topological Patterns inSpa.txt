 } Mining topological patterns in spatial databases has received a lot of attention. However, existing work typically ignores the temporal aspect and suffers from certain efficiency prob-lems. They are not scalable for mining topological patterns in spatio-temporal databases. In this paper, we study the problem for mining topological patterns by incorporating the temporal aspect in the mining process. We introduce a summary-structure that records the instances X  count infor-mation of a feature in a region within a time window. Us-ing this structure, we design an algorithm, TopologyMiner, to find interesting topological patterns without the need to generate candidates. Experimental results show that Topol-ogyMiner is effective and scalable in finding topological pat-terns and outperforms Apriori-like algorithm by a few orders of magnitudes.
 Categories &amp; Subject Descriptors: H.2.8 [Database ap-plications]: Data Mining General Terms: Algorithms, Design Keywords: Data Mining, Spatio-temporal Database
Spatial data mining has received a lot of attention [9, 10, 2, 6]. Recently, some researchers have shifted their atten-tion towards mining topological patterns, also called collo-cation patterns. Mining topological patterns is an interest-ing research problem with broad applications, such as min-ing topological patterns in E-commerce company, location-based service, ecology dataset and so forth. However, most of existing work typically ignores the temporal aspect and focuses on mining the spatial patterns, such as  X  There is high probability of the occurrence of earthquake in a region if there is high atmospheric pressure in the nearby region. Currently, with the prevalence of spatio-temporal databases, mining of topological patterns with temporal information, such as There is a higher incidence of earthquake in a re-gion during or soon after a high atmospheric pressure occurs in the nearby region , will be much more useful and helpful for data analysts and decision makers to understand the underlying process that controls the changes.

Existing techniques to find topological patterns [5, 7, 11, 4, 8, 12] do not scale in spatio-temporal databases, since they follow the candidate-generation-and-test [1] methodol-ogy. These methods have to generate and store a potentially large number of candidate patterns. Further, the computa-tional cost of processing the candidate patterns and test the interestingness of the patterns is high. In spatio-temporal databases, the topological patterns should satisfy not only the spatial proximity relationships but also the temporal proximity relationships. Since the spatio-temporal database is three dimensions, compared to the spatial database which is two dimensions, the computational cost of processing can-didate patterns and computing the interestingness of these patterns will be higher than that in spatial databases. As a result, it will not be scalable to use existing techniques to find topological patterns in spatio-temporal databases. We need to explore new methods to solve the problem.

In this paper, we design and develop an efficient algo-rithm to discover topological patterns in spatio-temporal databases. Our contributions are listed as follows:
The outline of this paper is as follows. Section 2 reviews the related work. We define the problem and give the pre-liminary concepts at the Section 3. Section 4 explains the pattern growth approach. We present the TopologyMiner algorithm in Section 5, and analyze its completeness and correctness in the Section 6. Section 7 reports the experi-ment study. Finally, we conclude the paper in section 8.
Spatial data mining is an interesting area and many al-gorithms have been proposed for data analysis in spatial databases, e.g., spatial clustering [9, 10, 2], spatial charac-terization [6], and spatial association pattern mining [5, 11, 4, 7, 8, 12], etc. In this section, we review the work for mining topological patterns in spatial databases. [5] introduces an Apriori-like algorithm to find the spa-tial association rules, which can be considered as star-like topological patterns. They first convert the spatial data to transactions according to a centric reference feature model, and then use some itemsets mining method such as [1] to find the interesting rules. The major limitation of the spa-tial association rule is that it depends on the concept of explicit transactions in the databases. However, due to the continuity of the underlying space, this may not be possible or appropriate in some spatial databases. Moreover, many duplicate counts of association rules may result if we define transactions around locations of instances of the features.
Recently, research on spatial pattern mining has shifted towards mining collocation patterns (i.e., clique patterns), the feature sets with instances that are located in the same neighborhood. [11] proposes a new interesting measure, called  X  X articipation ratio X  for mining interesting colloca-tion rules, and design an Apriori-like algorithm called Co-location Miner for mining collocation patterns. Co-location Miner initially performs a spatial join to retrieve instance pairs which are close to each other. Then, they use the Apriori-based candidate generation algorithm to generate the candidates of length ( k +1)-pattern from the k -patterns, and validate the candidates by joining the instances of the k -patterns which share the first k -1 feature instances. They [4] further study the problem of mining confident co-location rules without a support threshold. The work in [7] also stud-ies the same problem to find sets of services located close to each other. They present an Apriori-like algorithm, but dif-ferent from Co-location Miner, they use a Voronoi diagram and a quaternary tree to improve the running time. How-ever, their method can only be used to do approximation. [8] demonstrates the need to find complex relationships and develops a representation and mining strategies for spa-tial data. [12] studies the techniques to find star-like and clique topological patterns by combining the discovery of spatial neighborhoods with the mining process. They extend a hash-based spatial join algorithm to operate on multiple feature sets in order to identify such neighborhoods. The al-gorithm divides the map and partitions the feature sets using a regular grid. While identifying instances X  neighborhoods in each partition, the algorithm attempts to discover preva-lent and confident patterns by counting their occurrences at production time. However, their approaches still follow the candidate-generation-and-test methodology, and have to enumerate all the combinations of the spatial features. As a result, the performance will decrease dramatically when the number of the spatial features increases. ( a ) Star-like (b) Clique (c) Star-clique
We observe that most of existing approaches follow the candidate-generation-and-test methodology and their per-formances suffer from the generation of a lot of candidates and the test of their frequency. They do not scale to mine the patterns in spatio-temporal databases.
Given a spatio-temporal database D ,let F = { f 1 ,...,f n be a set of spatial features and there is a lexicographic or-der f among the spatial features. Let I = { i 1 ,i 2 ,...,i be a set of m instances in the spatio-temporal database D where each instance is a vector instance-id, spatial feature, position, time-stamp .Thespatialfeature f , position ( x , y ) and time-stamp ts of an instance i is denoted as i.f , i.x , i.y and i.ts respectively.

Let R be a neighborhood relation over the positions of the instances in the spatio-temporal database D . Here, we define R as a distance threshold. The distance between two instances i 1 and i 2 is computed as: We said i 1 and i 2 are located close to each other if and only if sdist  X R .

Similarly, let W be a closeness relation over the time-stamps of instances in D . In the paper, W is defined as a time window threshold. The distance between the time-stamps of two instances is computed as tdist = | i 1 .ts  X  Two instances are said to be near in time if and only if tdist  X W .

To capture the concept of  X  X earby X , a neighbor set N is defined as a set of instances such that not only all pairwise positions of the instances in N are neighbors but also they are near in time.

A topological pattern S of length k or k -pattern for short, is a set of spatial features, denoted as S = { f 1 ,f 2 ,...,f All the features in S are ordered according to f . A valid instance of S is a set of instances { i 1 ,i 2 ,...,i k } the spatial feature of the instance i j is f i , i.e. i j Note that all the features X  instances in S must be near in time. A topological pattern P is called a sub-pattern of Q if  X  f i  X  P , f i  X  Q ;and Q a super-pattern of P , denoted as P Q .

A topological pattern S is a star-like pattern if in a valid instance of S ,theinstance i j of the feature f j is located close to other instances, while the instances of other features are not required to be located close to each other. A star-like pattern is written as f j : { f 1 ,...,f k } . Figure 1(a) shows an example of star-like patterns, i.e., g : { a,b,c } .
A topological pattern S is said to be a clique pattern if and only if in a valid instance of S , all pairs of the features X  instances are located close to each other . In other words, the closeness relationships of the instances form a clique graph . A clique pattern is denoted as f 1 ,f 2 ,...,f k . For example, Figure 1(b) shows a clique pattern where the instances of the features in the set b,c,d,g are close to each other.
A topological pattern S is a star-clique pattern if S con-tains a sub-clique pattern S (i.e. S  X  S ), and there is a feature f j  X  S such that the instance of f j is close to the instances of the features in S \ S and the instances of the fea-tures in S \ S are not required to be close to each other. A star-clique pattern is denoted as S | f i : S \ S . In essence, the star-clique patterns can be generated by combining the star-like patterns with the clique patterns on a common fea-ture. Figure 1(c) shows an example of star-clique patterns, i.e., b,c,d,g | g : { a } .

Two measurements, support [5] and participation ratio [11], have been introduced to measure implication strength of a spatial feature in a topological pattern.

The support of a pattern S is defined as the number of instances of S found in the database. The support of a pat-tern S also defines the confidence of the corresponding rule in the form of f i  X  X  f 1 ,...,f s } . For example, Figure 1(a) defines a rule g  X  X  a,b,c } , which means that if there is an instance of g , there is high confidence that it is close to the instances of features a,b and c , while the instances of features a,b and c do not need to be close to each other.
Different from the support, the participation ratio is used to capture the probability that whenever an instance feature f  X  S appears on the map, then it will participate in an instance of S . The participation ratio of a feature f i pattern S , denoted as pr ( f i ,S ) is defined by the following equation:
In order to characterize the strength of a topological pat-tern in implying the co-occurrence of features, the preva-lence of a pattern S [11, 12], denoted as prevalence ( S ), is further defined as the minimum probability among all the features of S ,thatis prevalence ( S )= min { pr ( f i f i  X  S } . The prevalence is monotonic ;if S S ,then prevalence ( S )  X  prevalence ( S ). Additionally, with the prevalence of S , we can define the topology rule with the form A  X  B ,where A and B are subsets of spatial fea-tures. For example, a rule g  X  X  b,c,d,g } can be obtained in Figure 1(b), which means that if there is an instance of the feature g , there is a high probability that it participates in the instances of the clique pattern b,c,d,g .Inthispa-per, we use the prevalence threshold as our interestingness measure.

We can now define the problem to find the topological patterns in a spatio-temporal database as follows: Given a spatio-temporal database D , a distance threshold R ,atime window threshold W , and the minimum prevalence threshold minprev , we aim to find all the frequent topological patterns, e.g. star-like, clique and star-clique patterns.
The pattern growth method has been shown to be one of the most effective method for frequent pattern mining and is superior to the candidate-maintenance-test approach, es-pecially on the dense database or with low minimum sup-port threshold [3]. The pattern growth method partitions the database into subsets recursively, but does not generate candidate sets. It also makes use of the Apriori property to prune the search space and counts the frequent patterns in
Figure 2: Projection sequential pattern mining order to decide whether it can assemble longer patterns. The sequential pattern mining algorithm PrefixSpan [3] provides a general framework of the pattern growth method.

Figure 2(a) shows a sample sequence database. The set of frequent items F 1 = { a,c,d,f,g } when minsup =2. Letus find the sequential patterns with prefix a . Figure 2(b) shows the a -projected database, where only the subsequence pre-fixed with the first occurrence of a is considered. Note that  X  ,c,f in s 1 a means that the last element in the prefix which is a , together with c and f form one element. By scanning a -projected database once, we get LF a = { X  c ,  X  f ,a,c,d,f , g } , and generate the corresponding 2-sequences with prefix a . Then, we can partition the set of frequent patterns pre-fixed with a into 7 subsets, and construct their projected databases, and mine them recursively.

Unfortunately, the spatio-temporal database is very dif-ferent from the conventional databases, such as sequence databases. In spatio-temporal databases, there is no ex-plicit transaction concept. It is difficult to extend existing algorithms such as [3] to discover the topological patterns. We need to explore new approaches to find the topological patterns in spatio-temporal databases.
In this section, we present the algorithm TopologyMiner to discover the topological patterns. TopologyMiner finds the frequent patterns in the depth-first manner. It divides the search space into a set of partitions. In each partition, it uses a set of locally frequent features to grow patterns. It consists of two phases:
We first introduce the summary-structure .Let D be the spatio-temporal database, R be the distance threshold, and W be the time window threshold. We divide the database D into a set of disjoint cubes { c x 1 ,y 1 ,w 1 ,..., c x 1 (a) spatio-temporal db are 2D cells with width R  X  2 ,and { w 1 ,w 2 ,...,w q } are 1D time periods with width W 2 .

For the instances in a cube c x k ,y k ,w t , we can easily de-termine their close neighbors, which should and must be the instances in one of the cubes c x i ,y i ,w s in the set N = { c x and if | x k  X  x i | =2 , | y k  X  y i | =2) } .Wecall N c the neighbor-set of the cube c x k ,y k ,w t .Notethattwoin-stances are near in the position if and only if their cubes are neighbors.
 Let L = { c x 1 ,y 1 ,w 1 ,..., c x i ,y i ,w s } be a list of cubes. The neighbor-set of L , denoted as N L ,isthejoinofthe neighbor-set of each cube in L , i.e., N L = N c x 1 ,y 1 N
Figure 3 shows an example of the spatio-temporal data-base with R =45and W =90 mins . The space is divided into 48 cells and the time is divided into 8 time periods. The neighbor-set of the cell c 3 , 3 , i.e. N c 3 , 3 ,ismarkedingrey color. The neighbor-set of the time period w 4 consists of the time periods w 2 ,w 3 ,w 4 ,w 5 ,and w 6 . Hence, the neighbor-set of the cube c 3 , 3 ,w 4 is the join of the neighbor-set N with { w 2 ,w 3 ,w 4 ,w 5 ,w 6 } .

After dividing time and space into a set of cubes, we scan the database once, and hash the instances of the features into the corresponding cubes. For each cube c x i ,y i ,w keep the instances X  count of a feature f j in the main mem-ory. Note that only those cubes that contain at least one feature instances will be stored in the summary-structure. Compared to the original database of N instances, the size of summary-structure is O ( N k ) assuming each cube contains k ( k  X  1) instances.

In order to facilitate the operations for retrieving informa-tion in the summary-structure, we construct two hash-based indices, called Cube-Feature Index (CFI) and Feature-Cube Index (FCI). Both indices are two-level structures. Specifi-cally, CF Iis built with the composite key ( c x i ,y i ,w and its first level is used to index the cube with the identi-fier c x i ,y i ,w s , and its second level is utilized to index the features with the identifier fid . With CF Istructure, we can obtain the features that occur in a cube c x i ,y i ,w s ,andre-trieve their correspondingly instances X  count in the cube in constant time.

FC Iis built using the composite key ( fid , c x i ,y i ,w The first level of FC Iis used to index the features with the identifier fid , and the second level indexes the cubes with the identifier c x i ,y i ,w s respectively. FC Istructure helps to determine the corresponding cubes in which a feature fid occurs and obtain its instances X  count in constant time.
Figure 4 gives an example of the summary-structure with the two indices, CF Iand FC I, for the database in Figure 3.
With these two indices, we can approximate the number of instances of a topological pattern. Recall, we consider two instances are near in the position if and only if their cubes are neighbors. This means that the instances of a feature f in a cube c x 1 ,y 1 ,w 1 and the instances of a feature f neighboring cube c x 2 ,y 2 ,w 2 form the valid instances of the topological pattern f i ,f j . In other words, the instances X  count of a feature in a topological pattern can be obtained from the summary-structure directly. With this in mind, we now proceed to explain the process of finding the frequent topological patterns.
Now, we discuss the steps to find topological patterns. We first define the projected database of a length-k topological pattern S , and then explain how to construct the projected database of S from the summary-structure. Finally, we illus-trate the process of mining the frequent topological patterns in the projected database of S .
We define the projected database of a topological pattern as a collection of a set of cubes in which the instances of the features occur, and a set of related features.
 Let S = { f 1 ,...,f k } be a length-k topological pattern. The projected database of S , denoted as P S , is the collection of the entries L,R p ,where L is a list of cubes and R p is a pointer pointing to a list of features that are related to the pattern S . These features are found either in L or the neighboring cubes of L . For brevity, we use P S .L and P to represent the cube-list and the feature-list respectively.
The cube-list P S .L , denoted as ( c x 1 ,y 1 ,w 1 , ..., c w k ), is used to store the cubes in which the instances of the features in S occur, and all the cubes in the cube-list must be neighbors. In other words, the i th cube c x i ,y contains the instances of the i th feature f i  X  S ,1  X  i With the cube-list, we could obtain the instances X  count of a feature participating in pattern S and approximate the number of instances of S .

The feature-list P S .R p stores the features that are re-lated to the pattern S and the cubes where the features X  instances occur. Each element in the feature-list has the format ( f r : c x m ,y m ,w m ), where f r  X  f k , f k  X  cube c x m ,y m ,w m that contains the instances of the feature f , is a neighboring cube of the cube-list P S .L . The feature-list stores the potential features that can be used to combine with S to generate longer patterns. Figure 5(a) shows an example of the projected database of f 1 .
The projected database of a topological pattern can be obtained from the summary-structure directly. Consider the construction of the projected database of pattern f i .First, we obtain the cube-lists of f i by scanning FCI. For example in Figure 5(a), we get two cube-lists of f 1 by scanning FCI in Figure 4, that is L 1 =( c 1 , 5 ,w 5 )and L 2 =( c 5 , 5 For each cube-list L in P f i , we obtain its neighbor-set N
L . Then, for each cube in the neighbor-set N L ,weget the set of related features (i.e., RF )fromCFI.Withthe related features and the neighboring cubes, we generate new entries for the feature-list R P in P f i . Figure 5(a) shows the example feature-lists in P f 1 . Initially, for the cube-list L 1 =( c 1 , 5 ,w 5 ), there is only one valid neighboring cube, i.e. neighbor-set N L 1 = { c 1 , 5 ,w 5 } .From c 1 , 5 the set of related features of f 1 , i.e., RF = { f 2 } . Finally, we add the entry ( f 2 : c 1 , 5 ,w 5 ) into the feature-list R Similarly, for the cube-list L 2 , we obtain two entries for the feature-list R p 2 ,thatis( f 2 : c 6 , 5 ,w 1 )and( f 3 : c
The projected database of a length-k pattern S k = { f 1 f , ...,f k  X  1 , f k } ( k  X  2) can be derived from the pro-jected database of its prefix ( k -1)-subpattern S k  X  1 = f ,...,f k  X  1 } . Note that the feature f k is a related feature of the pattern S k  X  1 and f k  X  f k  X  1 .Weconstruct P S P k  X  1 as follows: For each entry L,R p of P S k  X  1 where the feature-list P S k  X  1 .R p contains an element of the feature f , e.g., ( f k : c x m ,y m ,w m ), we yield a new entry L,R feature-list P S k .R p is a subset of the feature-list P that is to say every element ( f r , c x s ,y s ,w s ) in the feature-list P S k .R p ,where f r  X  f k and c x s ,y s ,w s is a neighbor of the cube c x m ,y m ,w m , is also contained in the feature-list P
Figure 6(a) shows the projected database of the pattern f 1 ,f 2 , which is derived from P f 1 . In Figure 5(a), we know that the feature f 2 iscontainedinbothentriesof P f 1 Hence, we generate two entries for P f 1 ,f 2 ,thatis L 1 ( c the feature f 3 is only contained in P f 1 .R p 2 and c 6 , 5 aneighborof c 6 , 5 ,w 1 ,weaddtheentry( f 3 : c 6 , 5 ,w into the feature-list P f 1 ,f 2 .R p 2 . Let S k be a frequent length-k topological pattern and P has been constructed. Now, let us see the process to mine the topological patterns from the projected database of S
Mining Star-like Patterns. To get the star-like pat-terns, we directly mine the projected database of the fea-tures (i.e., 1-topological patterns). For a feature f i feature f j are said to be a frequent related feature of f if and only if pr ( f j , f i ,f j )  X  minprev .Allthefrequent related features of f i form a star-like pattern S = { f i f r 1 ,...,f rm } . For example in Figure 5(a), since pr ( f f 1 , f 2 )and pr ( f 3 , f 1 , f 2 ) are greater than 0.3, we can generate a star-like pattern S 1 = f 1 : { f 2 ,f 3 } .
Mining Clique Patterns. The process to discover the clique patterns is a little complicated. Our main idea is to check whether a related feature f r of S k can be combined with S k to generate a longer clique patterns S k +1 = S k ( f r  X  f k ). To achieve this, we need to determine whether the prevalence of S k +1 , which is the minimum participation ratio among all of the features in S k +1 ,isequivalenttoor greater than minprev . In other words, we not only need to compute the participation ratio of related feature f r w.r.t. S k +1 , but also the participation ratio of the features in S w.r.t. S k +1 . This is due to the incorporation of the feature f in S k , pr ( f i ,S k +1 ) = pr ( f i ,S k )foreach f i  X  Suppose the set RF contains all the related features of S , The features in RF are ordered according to  X  f .For each feature f r in RF , we first compute the participation ratio pr ( f r ,S k +1 ) in the projected database S k .Themain step is to obtain the instances X  count of f r through FCI. Specifically, for each feature-list R p in P S k , which has an element containing the feature f r , e.g., ( f r : c x m ,y we obtain the instance X  X  count of f r in the cube by indexing FC Iwith the key ( f r , c x m ,y m , w m ). Note that for each key, we only query FC Ionce. After obtaining all the instances X  count of f r in P S k , we compute pr ( f r ,S k +1 ) according to the equation 1. If pr ( f r ,S k +1 )  X  minprev ,wecontinueto compute pr ( f i ,S k +1 )foreach f i  X  S . Otherwise, we remove f r from RF , since it cannot be combined with the pattern S k to generate any frequent topological pattern.

The process to compute the participation ratio pr ( fi,S k +1 for each feature f i  X  S k proceeds as follows. For each en-try L,R p in P S k such that the feature-list P S k .R p con-tains the feature f r ,wegetthecube c x i ,y i ,w i in L be-cause it contains the instances of feature f i  X  S k .Weob-tain the instances X  count of f i through FC Iwith the key ( f , c x i ,y i ,w i ). After scanning all the entries in P compute pr ( f i ,S k +1 ) using equation 1. Once there is a fea-ture in S k whose participation ratio with respect to S k +1 less than minprev , we stop the process because the preva-lence of S k +1 cannot be greater than minprev . Only when prevalence ( S k +1 )  X  minprev , we output the pattern S construct the projected database of S k +1 , and mine it re-cursively.

Figure 5(b) shows the process to find the topological pat-terns with minprev = 0.3 in Figure 5(a). In the projected database of f 1 , i.e., P f 1 ,twofeatures f 2 and f 3 are the re-lated features of f 1 . To determine whether f 2 is a frequent related feature of f 1 , we need to compute prevalence ( f In other words, we need to compute the participation ratio in total, six instances of f 2 in the spatio-temporal database, and only two instances of f 2 participate in the instances of f 1 ,f 2 , i.e. one instance in cube c 1 , 5 ,w 5 and one instance in cube c 6 , 5 ,w 1 .Hence, pr ( f 2 , f 1 ,f 2 ) 2 6 = 0.33. Since all the instances of f 1 participate in the instances of the pattern f 1 ,f 2 ,wehave pr ( f 1 , f 1 ,f 2 )= 2 2 = 1. Finally, is a frequent related feature of f 1 and can be combined with f to generate a longer frequent pattern f 1 ,f 2 . Similarly, we have the prevalence ( f 1 ,f 3 )=0.5 &gt; 0.33, and hence, f is also a frequent related feature of f 1 . After mining the f -projected database, we construct the projected database of the pattern f 1 ,f 2 , and mine it recursively. Figure 6(b) shows the corresponding mining process.

Mining Star-clique Patterns. Finally, let us examine the process to get the star-clique patterns. The mining of star-clique pattern is invoked after a clique pattern S k yielded. A star-clique pattern is generated by combining the clique pattern S k with the star-like pattern of the features f , f i  X  S k . Specifically, for each feature f i  X  S k , denoted as S k | f i , we first obtain the set of cubes in which the f occurs. In other words, we do the projection of P S k on the feature f i ,denoteitas P S k | f i . Following, with the cubes in P S k | f i , we recompute the participation ratio pr ( f for each related feature f r in the star-like pattern of the feature f i .If pr ( f r ,S k | f i )  X  minprev , f r is said to be a frequent related feature of S k | f i . All the frequent related features of S k | f i form a star-clique pattern with respect to S | f i . For example in Figure 6(b), we can generate two star-clique patterns, i.e., G 1 = f 1 ,f 2 | f 1 : { f 3 } f
Figure 7 shows the framework of TopologyMiner. It takes as input the spatio-temporal database D , the distance thresh-old R , the time window threshold W and the prevalence threshold minprev , and outputs the set of frequent topolog-ical patterns. Line 1 scans the database once and constructs the summary-structure. We then discover the topological patterns at lines 4-25. Line 5 constructs the projected data-base for each feature f i in D with CFI. Lines 7-17 discovers the star-like patterns with respect to f i by scanning P f each feature f i in D , lines 19-25 calls the procedure Mining-PDB to find the longer frequent topological patterns.
The procedure MiningPDB works as follows: for each re-lated feature f r of S , Line 2 computes the participation ratio pr ( f r ,S  X  X  f r } )usingFCI.Ifitisequivalenttoorgreater than minprev , lines 5-11 are executed to compute the par-ticipation ratio pr ( f i ,S  X  X  f r } ) for each feature f there is a feature f p such that pr ( f p ,S  X  X  f r } )islessthan minprev , the procedure terminates with the extension f r (lines 8-10). If the participation ratios of all the feature in S are greater than or equivalent to minprev , a new clique pattern S = S  X  X  f r } is generated. This is followed by the construction of the projected database S using CFI, invok-ing the procedure GenGenricPtn to find star-clique patterns, and then mining the projected database S recursively (lines 13-18). The process continues until there are no more fre-quent topological patterns.

We now show that Algorithm TopologyMiner is correct and complete. At the beginning, TopologyMiner initializes the length-1 topological patterns to all the spatial features in the database and obtained the corresponding projected databases. This is correct and complete as their participa-tion ratios are equivalent to 1.

Next, we assume that TopologyMiner can correctly dis-cover all the length-k topological patterns. Let  X  be a length-k topological patterns and {  X  1 , X  2 ,..., X  m } be the set of all length-( k +1) topological patterns having prefix  X  .The complete set of topological patterns with prefix  X  is divided into m disjoint subsets. The j th subset (1  X  j  X  m )isthe set of topological patterns having prefix  X  j . Each subset of topological patterns can be further divided when necessary. To mine the subsets of topological patterns, TopologyMiner constructs the corresponding projected databases. In other words, TopologyMiner can correctly discover all the frequent length-( k +1) topological patterns.

The completeness of the mining in the projected database of a topological pattern can be argued as follows. The pro-jected database of a topological pattern S k consists of the cube-lists and feature-lists. With the cube-lists, we can ob-tain the instances of the features participating in S k .With the feature-lists, we can get all the related features and the cubes containing the instances of the related features. It means we can determine the complete set of the frequent related features of the pattern using the projected database. In other words, we can find the frequent topological patterns completely.
In this section, we evaluate the effectiveness and efficiency of TopologyMiner by comparing it with the Apriori-like al-gorithm in [11], which is implemented by incorporating the temporal aspect into the mining process for finding patterns in spatio-temporal databases. The algorithms are imple-mented in C ++, and run on a Pentium 4, 3GHZ, 1G main memory PC.

Synthetic Data Generator: We extend the synthetic data generator described in [12] to spatio-temporal data-bases. Table 1 summarizes the parameters used in the data generator. The data generator generates N points with L non-noise features and n noise features. The participation ratio for the features is varied from  X  min +  X  to  X  max +  X  .We first divide the space into cubes using thresholds R and W The instances of a long pattern with length L is generated as follows: we randomly generate a point and use the point as the center and generate instances of the pattern such that these instances fall within the pattern X  X  cell bounded by the ellipsoid of radius r s (in space and r t (in time) respectively. We generate the instances repeatedly until d instances of the patterns are generated. Please refer to [12] for the details.
We first evaluate TopologyMiner by varying the preva-lence threshold. The results are shown in Figure 8. Com-pared to the Apriori-like algorithm, TopologyMiner needs less time and space to find the topological patterns. This is expected because when the prevalence threshold decreases, more topological patterns become frequent and the length of the frequent patterns tend to be longer. As a result, Apriori-like algorithm needs more time to compute the instances of the spatial topological patterns and count their frequency. In contrast, TopologyMiner uses the summary-structure to approximate the instances X  count of a topological pattern and eliminate the generation and computation of the in-stances, which is very expensive.
Next,westudytheeffectofthenumberofpoints N in a dataset. Figure 9 shows the results by varying N from 20 k to 1000 k . Figure 9(a) indicates that TopologyMiner scale linearly with the number of points. Compared to the Apriori-like algorithm, TopologyMiner requires less time to find the frequent topological patterns with the increase of N . Note that Apriori-like algorithm runs out of memory when N is greater than 600 k . This is because Apriori-like algorithm needs to generate a lot of candidates and main-tain their instances in the main memory. As N increases, Apriori-like algorithm needs much time and memory to com-pute and maintain the instances (see Figure 9(b)). Unlike Apriori-like algorithm, TopologyMiner finds frequent topo-logical patterns in a depth-first manner, and it just needs to maintain the corresponding projected database, which is reducing with the length of the patterns.
We test the performance of TopologyMiner by varying the distance threshold R and the time window threshold W . Figure 10(a) shows the results by varying the distance threshold R . A peak is reached when R = 100. This is be-cause the performance of TopologyMiner is dependent on the number of cubes, the size of frequent patterns and the length of frequent patterns. As the distance threshold R increases, the number of cubes decreases, while the size of frequent patterns becomes larger and the length of frequent patterns becomes longer. There is a tradeoff among the three factors with the maximum runtime recorded when R = 100. The figure also shows that TopologyMiner has an advantage over the Apriori-like algorithm. Note that in Figure 10(a), when R is larger than 200, the Apriori-like algorithm runs out of memory. Similar trend is also observed when we vary W (see Figure 10(b)). Here, the longest runtime is recorded when W = 20.
Finally, we study the performance of the algorithms by varying the parameters L (i.e. the number of features in the longest patterns) and m (i.e. the prevalent features in the longest patterns). Figure 11(a) shows the results by varying the parameter L with values ranging from 10 to 40. We observe that TopologyMiner scales linearly with the number of features in the longest pattern and outper-forms Apriori-like algorithm by a few orders of magnitudes. Similarly, figure 11(b) shows the results of the algorithm by varying the parameter m with values ranging from 5 to 18. As expected, the parameter m has little effect on the TopologyMiner. This is because the advantage of Topolo-gyMiner is attributed to the use of the summary-structure that not only enables TopologyMiner to count the frequency of a pattern efficiently but also allows it to find the pattern in a depth-first manner, thus eliminating the generation of a lot of candidates.
In this paper, we have introduced an algorithm, Topolo-gyMiner, for finding topological patterns in spatio-temporal databases. We utilize a summary-structure to summarize the spatio-temporal databases and approximate the instances X  count of a topological pattern. TopologyMiner finds the topological patterns in the depth-first manner and elimi-nates the generation of a lot of candidates as well as the number of frequency tests. Experimental study shows that TopologyMiner is effective and scalable in finding the topo-logical patterns and outperforms the Apriori-like algorithm by a few orders of magnitudes. [1] R. Agrawal and R. Srikant. Fast algorithms for mining [2] S. Guha, R. Rastogi, and K. Shim. Cure: An efficient [3] J. Han and J. Pei. Mining frequent patterns by [4] Y. Huang, H. Xiong, S. Shekhar, and J. Pei. Mining [5] K. Koperski and J. Han. Discovery of spatial [6] M.Ester, A. Frommelt, J. Han, and J. Sander.
 [7] Y. Morimoto. Mining frequent neighboring class sets [8] R. Munro, S. Chawla, and P. Sun. Complex spatial [9] R. Ng and J. Han. Efficient and effective clustering [10] J. Sander, M. Ester, H.P.Kriedgel, and X. Xu. [11] S. Shekhar and Y. Huang. Discovering spatial [12] X. Zhang, N. Mamoulis, D. W. Cheung, and Y. Shou.
