 1. Introduction
Fuzzy control is probably the most i mportant practical fuzzy logic interfaces of the fuzzy system to the real world, when is used in a real-world application ( Sanchez-Solano et al., 2007 ). The main operation of these two processes is to provide the numeric to linguistic conversion and vice versa ( Roychowdhury and Pedrycz, the fuzzy inference engine to common sensors and actuators.
Although there are many different de fuzzification methods, certain types of defuzzification metho ds can be properly used only for of fuzzy control however, a defuzzification method is acceptable whenever it can be used to solve a practical problem ( Roychowdhury and Pedrycz, 2001 ). The most popular defuzzification technique is applications due to some of its uniq ue features. It provides better accuracy with respect to other de fuzzification methods and also is able to track the continuous ch anges of the system inputs and provide smooth and continuous output values ( Broekhoven and
Baets, 2004 ). However, its main disadvantage is its high latency and also computational complexi ty that prevents to use it in many real world applications ( Patel and Mohan, 2002 ).

A fuzzy inference engine might be implemented in three different approaches: software-on ly, hardware-only, or any combi-nation of software and hardware ( Del Campo et al., 2008 ; Reyneri, 1995 ): software programs running on general purpose processors or 2009 ), software programs running on an application-specific inst-system using dedicated fuzzy coprocessors and processors 2009 ; Hamzeh et al., 2008; Konstantinos et al., 2009 ; Kwon et al., 2010 ; Louverdis and Andreadis, 2003 ; Melgarejo and Pena-Reyes, implement a fuzzy system based on the application type or performance requirements ( Costa et al., 1995 ; Reyneri, 2003 ), the designer should select the most app ropriate defuzzification method according to the application conte xt and also the trade-off between accuracy (i.e. defuzzified output error) and computational power demand (i.e. hardware complexit y or software execution time).
There is some work to guide the designer through choosing the most proper defuzzification method based on the application context ( Broekhoven and Baets, 2004 ) which is beyond the scope of this paper. Also there are some reports which determine the  X  X  X ccuracy-cost X  X  trade-off for different defuzzification methods in software ( Broekhoven and Baets, 2004 ; Lancaster and Wierman, 2003 ) or hardware ( Phongpensri and Sripanomwan, 2009 ). Know-ing this trade-off guides the designer to choose the best suitable defuzzification method which best suites the precision require-ments with minimum computational power demand which results in better area, delay and power consumption in hardware or less execution time in software implementations.

In this paper, three new defuzzification methods are intro-duced which preserve the same accuracy of the existing methods while providing much better implementation gains. An all-inclu-sive survey of some well-known existing defuzzification methods, as well as the description of the new methods is presented in the following section. Section 3 presents the simulation results and theoretical accuracy analysis studies to compare the accuracy of the proposed and existing defuzzification methods. The software and hardware implementation aspects of new and traditional defuzzification methods are discussed in Sections 4 and 5 . The last section concludes the paper. 2. A survey of existing and new defuzzification methods
All existing defuzzification methods might be categorized into standard or non-standard categories ( Roychowdhury and Pedrycz, 2001 ). The standard methods are mostly preferred due to their feasible implementations while on the other hand, the non-standard defuzzification methods such as BADD ( Yager and
Filev, 1991 ; Yager and Filev, 1993a ) or SLIDE ( Yager and Filev, 1993b ) are theoretically developed and are not widely used in fuzzy applications ( Roychowdhury and Pedrycz, 2001 ). As we deal with the implementation aspects of the defuzzification methods, the non-standard methods are not included in this paper. Also as there is no unique convention about the naming of different standard defuzzification methods, some of them are referenced with different names by different authors. To address this problem and clarify the paper terminology, a brief description of the most important standard defuzzification methods is pre-sented in the following and the three new defuzzification meth-ods are introduced at the end of this section. 2.1. Existing standard defuzzification methods
The standard defuzzification algorithms which are mostly used in focus on geometric area-based computations ( Roychowdhury and
Pedrycz, 2001 ). These methods provide different accuracy-computa-tional power trade-offs and might be easily implemented in hardware or software. This is the main reason for their popularity. Some of these methods such as mean of maxima are ad hoc and are not some specific applications. Some other standard methods such as center of gravity and center of sum however; should be considered as classic methods with convenient scientific reasoning. 2.1.1. True center of gravity (COG) ( Broekhoven and Baets, 2004 ; Saade and Diab, 2000 )
The center of gravity which is also named as the Center of Area (COA) in some references ( Roychowdhury and Pedrycz, 2001 ; Tao and Yao, 1996 ; Watanabe et al., 1991 ) is a simple and elegant method. To compute the COG output, all the rules should be processed first and all the fuzzy membership functions (MFs) on THEN sides of the fired rules should be combined together to form the unified output fuzzy shape ( Fig. 1 a). The final defuzzified output value is the center of gravity of this unified shape which can be computed by exploiting discretization method. In this method, the whole area is divided into narrow rectangles around ( x tion process. The Eq. (1) demonstrates the COG computation using discretization method COG  X  tion levels imply narrower rectangles which the unified shape is divided into, and so the closer value to the real center of gravity ( Broekhoven and Baets, 2004 ). This method is very accurate ( Lancaster and Wierman, 2003 ) and is most easily implemented in software ( Lees et al., 1996 ). As well, there are some hardware realizations of the COG method ( Lees et al., 1996 ; Louverdis and Andreadis, 2003 ; Reyneri, 2003 ; Watanabe et al., 1990 , 1991 ). However it has some important disadvantages. The most important drawback of this method is its high latency. Because it is necessary to completely process all fuzzy rules to then start the center of gravity computation. Its next impo rtant drawback is that increasing number of computations ( Broekhoven and Baets, 2004 )which ultimately leads to higher execution time or more hardware and memory. This prevents using the COG method for some real-time or inexpensive applications ( Patel and Mohan, 2002 ). There are some work that propose simplifications or changes on COG to enhance its computational power demand or efficiency ( Broekhoven and Baets, 2004 ; Hung, 1995 ; Mendil and Benmahammad, 2001 ; Muresan
Broekhoven and Baets, 2006 ; Gaona et al., 2003 ). These simplifica-tions sometimes lead to new defuzzification methods which are referenced with new names. 2.1.2. Center of sum (COS) ( Broekhoven and Baets, 2004 ; Patel and Mohan, 2002 )
This method which is sometimes called fast center of gravity ( Lancaster and Wierman, 2003 ) is a simplified version of the true be processed to form the unified fuzzy output shape. Instead, the center of gravity for THEN parts of each fired rule is computed separately first ( Fig. 1 b). The final defuzzified output is then computed as the weighted average of these pre-computed partial centers of gravity based on the Eq. (2): COS  X  where  X  n  X  is the number of MFs which contribute in the fuzzy output shape, and cog i and area i correspond to the center of gravity and area of the i th MF. In this method, the overlapped portions of the fuzzy THEN parts of each fired rule are considered multiple times. Although the COS performs the defuzzification operation much faster than COG, it provides lower accuracy. 2.1.3. Mean of area (MOA) ( Roychowdhury and Pedrycz, 2001 )
This method has been ambiguously referenced with the name  X  X  X enter of Area X  X  (COA) in some references ( Pham and Castellani, 2002 ). This method is also referenced with the name  X  X  X edian or
Midpoint of Area X  X  (MOA) in some other references ( Roychowdhury and Pedrycz, 2001 ; Oungdal and Hyung, 1996 ). In this method, a unified shape of the outputs of all the fired rules should be formed first, just similar to COG. The main difference between the MOA and COG is that the COG method calculates the position where the moment of the left and right areas in the unified shape is equal
In a similar way to COG computation, a simple way to find the mean of area of a fuzzy value is to divide the whole area into  X  n  X  on both sides of it are equal. Eq.(3) formulates this process. After axis is introduced as the MOA.
  X  x i  X  X 
In this equation,  X  n X  is the discretization level or total number of narrow rectangles. 2.1.4. Mean of maxima (MOM) ( Kandel and Friedman, 1998 ; Lancaster and Wierman, 2003 )
This method is a less accurate but less complex method. In this method, the final defuzzified output is computed as the plateau midpoint of the fuzzy output MF which has the maximum height and the output MFs of the all other fired rules are discarded as and fast execution time ( Pham and Castellani, 2002 ). The main disadvantages of the MOM method are that it is not a truly fuzzy operation ( Pham and Castellani, 2002 ), it has a poor steady-state performance, and also provides a less smooth response curve with respect to true COG ( Yager and Filev, 1994 ). Eq. (4) shows the
MOM computation formula while  X  n X  is the total number of MFs which contribute to the fuzzy output shape, and m i is the plateau midpoint of the i th fuzzy output MF.

MOM  X  Maximum  X  m i  X  1 r i r n  X  4  X  2.1.5. Plateau average (PA) ( Lancaster and Wierman, 2003 ) The PA should be considered as the enhanced version of the
MOM ( Fig. 1 e). The main difference between these two methods is that the PA does not ignore any fired rule output. In this method, the final defuzzified output value is computed as the average of the midpoints of all fuzzy output plateaus. If the fuzzy shape consists of  X  n  X  MFs while the m i stands for the plateau midpoint of the i th MF, the PA is computed according to the following equation: PA  X 
The PA provides better accuracy than MOM while also needs higher amount of computation. 2.1.6. Weighted plateau average (WPA) ( Lancaster and Wierman, 2003 )
This is the enhanced version of the PA method which needs more computation and also gains better accuracy than PA. In this method, the final defuzzified output value is computed as the weighted average of the midpoints of all fuzzy output plateaus: WPA  X 
As shown in Fig. 1 f, the weights ( a i ) are the degree of memberships or heights of the output MFs. As this method benefits an easy and straightforward hardware implementation with respect to other existing methods, most of the existing fuzzy processors use the WPA method or one of its instances in their defuzzification block ( Ascia and Catania, 2000 ; Falchieri et al., 2002 ; Gaona et al., 2003 ; D X  X more, 2000 ; D X  X more et al., 2001 ). 2.1.7. Sparus ( Lancaster and Wierman, 2003 ) This is an ad-hoc method which is introduced by Lancaster and
Wierman (2003) . This method has been claimed that it provides a good accuracy with respect to other methods while takes a lower processing time. In this method, the output fuzzy sets of all of the fired rules should be determined first. The plateau midpoints of these fuzzy output sets should be then connected together to form a unified shape as shown in Fig. 1 g. The center of gravity of this unified shape is the final defuzzified output value. 2.2. New standard defuzzification methods
In this section, three newly proposed defuzzification methods are described that should be classified in the category of classic standard methods. These methods provide acceptable accuracy levels with respect to existing described methods while need less implementation costs in terms of area, delay, and power con-sumption in hardware realization or execution time and instruc-tion count in software implementation.
 2.2.1. Trapezoid median average (TMA) ( Banaiyan et Al., 2005 )
This proposed method is similar to PA. Although the TMA is not a convenient method by itself, it is the base of the two other new efficient methods proposed next. Eq. (7) demonstrates the
TMA computation formula. In this method, the final defuzzified output is computed as the average of the midpoints of all the midpoints of all output trapezoid plateaus in PA.
 TMA  X 
The most important advantage of TMA over PA is that PA tries to estimate the center of gravity of a trapezoid by considering only the top corners of the two side slopes of the trapezoid ( Fig. 1 e) while the TMA is more accurate and estimates the center of gravity of a trapezoid by considering both the top and also the bottom corners of the slopes ( Fig. 1 h). Although the outputs of both TMA and PA methods are equal in the case of symmetric output MFs, the TMA provides much better center of gravity estimation in case of asymmetric MFs. 2.2.2. Weighted trapezoid median average (WTMA) family of methods ( Banaiyan et al., 2005 )
These two new methods are enhanced versions of the TMA. In both of these methods, the final defuzzified output is the weighted average of the midpoints of all trapezoid medians. The two different versions of WTMA method differ in their weights only.
For the Trapezoidal WTMA or TWTMA method, the weights are TWTMA  X 
In TWTMA, the area i is the area of the trapezoid MFs as indicated in Fig. 1 i. In a similar mnner, Eq. (9) shows the RWTMA computation method. The weights in the rectangular WTMA or
RWTMA method ( Fig. 1 j) are the areas of the rectangles which are surrounded in the trapezoids: RWTMA  X 
The synthesis and simulation results show that both versions of the WTMA method provide good accuracies while maintain the software and hardware simplicity. 3. Simulation results and accuracy analysis of standard defuzzification methods
The meaning of the accuracy in a whole fuzzy system is the ability of the system to correctly follow a predefined behavior.
This will be a function of the fuzzification and defuzzification processes, the rule-base, the inference mechanism, and even probably the tuning tools and mechanisms which were exploited to adjust the behavior of the complete fuzzy system. This paper tends to discuss only about the accuracy of different defuzzifica-tion methods not the whole fuzzy system. To do this, the COG defuzzification method is chosen as the base of the comparisons because although the COG method is not the best defuzzification for all fuzzy systems, it is certainly the most common method among the others. As discussed before, the main reason which prevents using the COG in most applications is its high latency and computational power demand. Most of the other defuzzifica-tion methods try to simulate the COG method with lower latencies and number of computations. So, with the COG as the base of the comparison, the accuracy of a defuzzification method is defined as its capability to precisely simulate the behavior of the COG method.

According to the above definition, different defuzzification methods provide a spread accuracy spectrum for the designers. To form the accuracy spectrum of different defuzzification meth-ods, the C models of all discussed defuzzification methods are developed and then comprehensively simulated to determine the relative position of different defuzzification methods on accuracy spectrum. For the true COG method, the simulations are per-formed with two discretization levels (i.e. k  X  64 and 8192). As the true COG with 8192 discretization levels (COG 8192 ) is selected as the base of the comparison, the Root Mean Square Error (RMSE) factor (Eq. (10)) is used to measure the accuracy of each method based on ( Broekhoven and Baets, 2004 ): RMSE  X  where n and i are the total number of iterations and iteration counter respectively. Also Def i is the output value of the defuzzi-fication method (which is under test) and the COG 8192, i output value of the true COG 8192 in i th iteration. To increase the reliability and generality of the results, eight different output fuzzy membership function sets from different application areas are selected as the test case to run the simulations on. The first defuzzification test case (DTC1) is a randomly generated test case to verify the operation of each defuzzification method in the cases of miscellaneous shapes of MFs. In this test case, a random generated output fuzzy MF set with 10 MFs is generated for each test iteration. The idea of random MFs is previously used in ( Broekhoven and Baets, 2004 ). The DTC2 is another randomly generated test case. This test case includes only one randomly generated output fuzzy MF set with 10 members for all test iterations as shown in Fig. 2 a X  X  demonstrates the shapes of the DTC3 to DTC8 test cases each one with different features. 3.1. Simulation results
Fig. 3 shows the RMSE curves of different defuzzification methods. The RMSE value of a defuzzification method for each test case is calculated as the average RMSE values of the method for about 10,000,000 runs on that test case. As the MOM defuzzi-fication method always provides the worst accuracy among the others, its curve is not included in the figure. Therefore, the COG 8192 and MOM methods should be placed at two end points of the accuracy spectrum as the most and least accurate methods.
Fig. 3 shows that the COG 64 provides the best accuracy, while the PA and TMA provide similar accuracy levels which are only better than MOM. It also shows that the new WPA method is almost always better than Sparus, PA and TMA methods and worse than COS and TWTMA methods. The results also show that the newly proposed TWTMA gains slightly better accuracy with respect to COS as the most accurate existing defuzzification method. The accuracy of the RWTMA method also is similar to TWTMA and COS methods for the two random test cases (DTC1 and DTC2) while it provides less accuracy for other test cases. According to the discussions, the order of the defuzzification methods in the accu-racy spectrum is determined as: COG, TWTMA, COS, RWTMA, WPA, MOA, Sparus, PA, TMA and finally MOM methods which provide higher to lower accuracies respectively. 3.2. Theoretical studies about accuracy analysis of standard defuzzification methods
The analytic studies of this section are presented to show the efficiency of new proposed defuzzification methods and support the simulation results of the previous section. These new methods as well as most of the other existing standard defuzzification methods might be considered as simplified versions of the true
COG which try to estimate the center of gravity of the unified output fuzzy shape by estimating the center of gravities of the individual output fuzzy MFs based on Eq. (11): x  X  where W i and MF _ COG i stand for the weight and center of gravity estimation of the i th output fuzzy MF respectively. Based on this definition, the defuzzification method which picks more appro-priate weights and also exploits a more realistic center of gravity estimation of the MF will provide more accuracy. Table 1 shows that how the W i and MF_COG i values are computed in different defuzzification methods. The Sparus and MOA methods cannot be directly described with Eq. (11) and so are not included in the table.

As shown in the Table 1 , the new defuzzification methods use nearly similar weighting techniques with respect to existing methods while their main advantage lies in their simple but precise center of gravity estimation technique. According to the center of gravity estimation approach, the existing defuzzification techniques are divided in two categories. The first category includes only COS method and uses Eq. (12) to exactly compute the center of gravity of a parametric fuzzy MF that is shown in
Fig. 4 . The main advantage of this category is their accuracy however; it is necessary to perform many operations (Eq. (13) additions/subtractions, 7 multiplications, and 6 divisions) to compute the exact MF center of gravity. The next category 1.00 RMSE 1.80 1.60 1.40 1.20 0.80 0.60 0.40 0.20 0.00 methods including WPA, PA, and MOM, uses Eq. (13) to provide an estimation of the MF center of gravity. Although these provide a not-so-good center of gravity value with respect to the first category methods, their main advantage lies in their simplicity and speed that compute the result with only one addition and one trivial division (that might be replaced with shift operation).
Therefore, these methods (and specially WPA) are preferred in hardware or software fuzzy applications ( Ascia and Catania, 2000 ; et al., 2001 ) due to their simplicity and ease of implementation. MF_COG i  X  p 3  X  p 4 2  X  13  X 
The new TMA, TWTMA and RWTMA methods form the third category use Eq. (14) to estimate the MF center of gravity using only three additions and one trivial division (which corresponds to two shift right operations). The main advantage of the new methods is that they exploit a better center of gravity estimation technique with respect to the second category methods while preserve the simplicity with respect to the first category mem-bers.
 MF_COG i  X  p 1  X  p 2  X  p 3  X  p 4 4  X  14  X 
Fig. 5 illustrates the absolute errors of the second and third category estimative methods (CII and CIII) with respect to the first category (that computes the precise center of gravity of the MF), when computing the center of gravity of the MF that is shown in
Fig. 4 with different parameter values. Without losing the gen-erality, the p 1 , p 2 and a parameters are fixed to 0, 100, and 1 values respectively while  X  b  X  and  X  c  X  change between 0 and 100
For example, b  X  100 and c  X  100 results in a right triangular MF, b  X  0 and c  X  100 demonstrates a rectangular MF, and b  X  20 and c  X  60 illustrates an asymmetric trapezoid MF. As shown in Fig. 5 , the third category methods always provide better center of gravity estimation regardless of the MF shape. They act much better than second category methods especially when the MF becomes more asymmetric. 4. Software implementation aspects of defuzzification methods, a comparative analysis
Different defuzzification methods provide different execution time-accuracy trade-offs in softwa re implementation. The designer picks the method which best suites his application from accuracy view point while has the lowest execution time or highest speed. In are combined with accuracy anal ysis results to form the speed X  accuracy diagram of different defuzzification methods. 4.1. Execution time analysis of different defuzzification methods
To achieve more general results, the execution times and instruction counts of each defuzzification method are measured when running on three different main platforms: a digital signal processor, an embedded processor, and a general purpose pro-cessor ( Table 2 ). To do this, the assembly models of all defuzzi-fication methods for Texas Instrument X  X  C62 VLIW DSP, IBM X  X  PowerPC PPC405 superscalar embedded processor and Intel X  X  Pentium &amp; IV general purpose processor are developed and tested. To have a fair comparison, all models are developed with special care about different types of hazards. The data and structural hazards are removed or minimized in the codes while there are some unresolved control hazards due to existing loops in the codes. Based on (1) to (8), most of defuzzification methods need a division operation to prepare their final output. We have replaced this division operation with a lookup search followed by a multi-plication operation to make it possible to run the same code on different processors which does not support the division opera-tion. The final note is that as the COG, MOA and Sparus methods need to wait for all the fired rules to be processed first to then produce an output, they result in much higher execution time with respect to others under all three platforms.

The 2nd and 3rd columns of Table 2 include the execution time and instruction count of different C62 defuzzification models. The execution times are extracted using Texas Instrument X  X  Code Composer Studio. The instruction count of different models is presented as a function of the percentage of Active Rules (AR). As shown in the Table 2 , the new TWTMA method results in 33% faster execution time while needs at least 25% less instruction Absolute Error
MF_COG i  X  a  X  p 3 p 1  X  = 2 p 1  X  2  X  p 3 p 1  X  = 3  X  a  X  p p 4  X  = 2 count (which corresponds to AR  X  100%) with respect to COS method as its main rival when running on C62 digital signal processor. The next two columns of the table (columns 4 and 5) include the execution time and instruction count of the PPC models which are extracted using XPS standard tool. The instruc-tion count of each method is expressed in terms of the percentage of Active Rules (AR) and Discretization Level (DL). The results show that TWTMA method provides 49% less execution time and 50% less instruction counts (for AR  X  100%) with respect to COS when running on PPC405. Finally, the last table column contains the execution time of different models when run on a 2.8 GHz
Pentium &amp; IV processor. These models are developed and compiled using standard gcc compiler. Because of some complex properties of Pentium &amp; IV processor (such as out of order issue and spec-ulation) and also due to its complicated structure which makes it very hard to extract cycle and instruction count, the instruction counts of the models are not included in the table. According to the table results, the TWTMA method gains 77% better execution time with respect to COS when running on a P-IV processor. 4.2.  X  X  X xecution time-accuracy X  X  co-analysis diagrams
In this section, both the accuracy analysis results and the execution time results are simultaneously taken into account to extract some useful speed X  X ccuracy diagrams. The speed X  accuracy diagrams of three models, C62 DSP, PPC405, and
Pentium &amp; IV are illustrated in Figs. 6 X 8 respectively. In each diagram, the execution time X  X ccuracy of each method is shown using an ellipse. The bold dot inside ellipse should be interpreted as the area center of mass while its RMSE value is the average of the RMSE values of the same defuzzification method for all of eight test cases. The height of each area represents the variations in the RMSE value of each method among different test cases. The width of this area also is corresponded to execution time varia-tions due to using different compilers with different optimization levels which is beyond the scope of this paper (therefore, the width of all areas for all methods is considered as a constant value). As we move towards the right side of the diagrams, the execution time increases while as we move up in the diagram, the accuracy decreases. The spectrum area of new defuzzification methods is drawn by dotted lines. According to the figures, the 2.0 4.5
RMSE 4.0 3.5 3.0 2.5 1.5 1.0 0.5 0.0 4.0 4.5
RMSE 3.5 3.0 2.5 2.0 1.5 1.0 0.5 0.0
RMSE 4.5 4.0 3.5 3.0 2.5 2.0 1.5 1.0 0.5 0.0
COS method provides a high accuracy while has the highest execution time and instruction count. All three figures show that
TWTMA method provides the same accuracy as COS method while reduces the execution time from 33% to 77% based on the underlying hardware platform. It also needs about 25% to 50% less number of instructions with respect to COS according to the hardware platform and number of active rules. 5. Hardware implementation aspects of defuzzification methods, a comparative analysis
In this section, the hardware models of different defuzzifica-tion methods are developed and synthesized ( Mahdiani et al., 2006 ) to determine and compare the area, delay and power consumption of the hardware implementation of the new and existing methods. 5.1. Hardware models, design and implementation
To implement a complex digital circuit, the designer should decide about the best area X  X elay trade-off that is suitable for his application. The two extreme points of the area X  X elay spectrum have straightforward hardware realizations. One extreme deter-mines the  X  X  X aximum area X  X inimum delay X  X  point which corre-sponds to the fully combinational realization of the circuit. The next extreme on the other side, represents the  X  X  X inimum area X  maximum delay X  X  point and corresponds to fully sequential realization of the circuit. In this case, there is only one instance of each component type and all the operations of the same type should be scheduled on the same instance.

Two hardware models are developed for each defuzzification method. The first model realizes the  X  X  X aximum area X  X inimum delay X  X  or the fully combinational implementation of each method while the second model corresponds to the  X  X  X inimum area X  maximum delay X  X  or the fully sequential implementation of the methods. As the fully combinational models of the methods are highly different, Fig. 9 demonstrates the details of the fully combinational models of TWTMA and COS methods as two instances. Fig. 10 also shows the datapath structure for the full sequential models of all methods. The full sequential implemen-tation of different methods is similar and differs only in the bussing structure and also number of the ports of the input multi-plexers. The three COG, MOA and Sparus methods are excluded from the comparison because of their totally different basics and architectures. 5.2. Synthesis results analysis of different defuzzification methods
The hardware models of all defuzzification methods are developed in VHDL and synthesized on CMOS 0.13 m m library cells. A division operation is needed at the end of the defuzzifica-tion process in all of defuzzification methods except for the MOM. As this division operation should be performed only once after the evaluation phase for all of the rules finished, we have excluded not take it into account in the synthesis results. The internal word-length of all datapaths is considered to be 8 bits that is suitable for most fuzzy applications.

Table 3 includes the synthesis results of the fully combina-tional and fully sequential models of different defuzzification methods. The 2nd and 3rd columns present the gate count and delay of the fully combinational implementation of each method respectively. The 4th and 5th columns also show the power consumption in mW per Mega rule, and the power-delay-product values for all methods respectively. The Table 3 results show that TWTMA method provides about 53% less area and 31% lower delay with respect to existing COS method. It also has about 32% less power consumption and a 53% less PDP with respect to COS. + a
The last five columns of Table 3 include the synthesis results of the fully sequential models of different defuzzification methods.
The 6th and 7th columns include the gate count and the max-imum clock frequency of the datapath for different defuzzification methods. The 8th column shows the clock cycles necessary to perform the defuzzification operation for the output of one fired rule. The 9th column includes the power consumption of each full sequential model as mV per Mega rule while the last column shows the power-delay-product (PDP) values. As shown in the
Table 3 the TWTMA method provides a clock frequency of 18% less than COS. It gains 33% less gate count and performs the same operation in 42% less clock cycles with respect to COS. It also reduces the PDP by a factor of about 78%. 5.3.  X  X  X ate count X  X ccuracy X  X ,  X  X  X elay X  X ccuracy X  X  and  X  X  X ower delay product X  X ccuracy X  X  co-analysis diagrams
In this section, both the simulation and synthesis results are simultaneously demonstrated to guide the designer to choose the best defuzzification method which provides the acceptable accu-racy level while gains smaller hardware area, delay and power consumptions. Figs. 11 and 12 show the Gate Count X  X ccuracy and also Delay X  X ccuracy diagrams of the fully combinational models. As the fully combinational models have different hard-ware architectures, they have different areas and delays. The bold dot inside each area should be interpreted as area center of mass.
The height of each Gate Count X  X ccuracy or Delay X  X ccuracy area for each method shows the variations in the RMSE value of each method among different test cases. The width of each area also corresponds to area X  X elay variations due to using different synthesis tools with different optimization efforts.

As we move toward the up side of the diagrams, the accuracy will decrease which leads to less efficient defuzzification meth-ods. Also as we move to the right side of the both diagrams, the gate counts and the delays will increase more which means less efficient hardware from area or delay viewpoints. Different defuzzification methods demonstrate different tradeoffs. To select a defuzzification method, the designer should select the method which satisfies the accuracy necessities of the application while has the minimum implementation cost. According to the figures, the designer should pay high overheads in terms of both hard-ware area and delay to implement the most accurate existing defuzzification method, COS. The new TWTMA method provides the same accuracy as COS method while reduces the hardware implementation cost by 53% and also makes the result ready with 31% less delay.

In opposite to the fully combinational models, all the fully sequential models have a nearly similar datapath and so hard-ware area and delay costs. The main difference between fully sequential implementation of different methods lies in the 4.5 RMSE 4.0 3.5 3.0 2.5 2.0 1.5 1.0 0.5 0.0 RMSE 4.5 4.0 3.5 3.0 2.5 2.0 1.5 1.0 0.5 0.0 RMSE 4.5 4.0 3.5 3.0 2.5 2.0 1.5 1.0 0.5 0.0 number of clock cycles and the amount of power consumption to perform each defuzzification algorithm. To compare the fully sequential models, Fig. 13 demonstrates the PDP X  X ccuracy spec-trum of different defuzzification methods. As we move toward up, the accuracy decreases and as we move toward right, the power delay product increases that means more clock cycles and power consumption which results in lower efficiency. According to the figure, the TWTMA method provides about 78% less PDP with respect to COS while also preserves a similar accuracy level. 6. Conclusion
A comprehensive survey of nearly all common existing defuz-zification methods is presented in this paper. Three new imple-mentation friendly defuzzification methods are introduced then, which provide good accuracies while gain lower implementation costs both in hardware and software. A wide range of simulation results are presented to compare the accuracy level of existing and new defuzzification methods. The software implementation experimental results show that three new methods can be implemented with lower instruction counts which also lead to less execution time. Based on the achieved results, some novel  X  X  X xecution Time X  X ccuracy X  X  two-dimensional diagrams are intro-duced which help the designer to simply choose the fastest defuzzi-fication method while also provides the necessary accuracy level.
The synthesis results of differe nt defuzzification hardware mod-els are also presented to demonstrate that the new methods can be implemented with less hardware c osts in terms of area, delay, and power consumption. The proposed  X  X  X ate Count X  X ccuracy X  X ,  X  X  X elay X 
Accuracy X  X , and  X  X  X ower Delay Pro duct X  X ccuracy X  X  also help the designer to pick the best defuzzification method with acceptable accuracy level and with the lowest area, delay and power consump-tion. Table 4 contains a complete summary of all experimental results.
 References
