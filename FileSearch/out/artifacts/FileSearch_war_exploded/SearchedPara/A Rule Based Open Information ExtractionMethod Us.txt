 In the past years, a large number of knowledge bases such as Freebase [ 4 ], YAGO [ 12 ], Probase [ 16 ], Knowledge Valut [ 7 ] have been constructed for purposes such as semantic search and question answering. Although a typical knowledge base may contain millions of entities and billions of relational facts, it is usually far from complete. Due to the explosive generation speed of big Web data, new knowledge is emerging rapidly everyday in the latest news and online social media. Therefore, to access that knowledge, information extraction and knowl-edge fusion methods are necessary. In this paper, we focus on the task of open information extraction, that is to automatically extract relational tuples from natural language text, which can be exploited for knowledge base population. of them do not require any background knowledge or manually labeled training data. For example, TextRunner [ 2 ], Reverb [ 9 ] and R2A2 [ 8 ] make use of natural language processing techniques, such as part-of-speech tagging and chunking. They focus on efficiency and high precision for high-confidence relations, but at low points of recall. Other techniques such as OLLIE [ 13 ], OpenIE [ 6 ]and ClausIE [ 14 ] additionally use dependency parsing to improve precision and recall but at the cost of efficiency. These methods depend on the performance of syn-tactic parsing technology, which unavoidably involves in errors caused by parsers and costs a lot of time to obtain parsing results.
 In order to overcome the limitations, in this paper, we present R-OpenIE, a rule based open information extraction method using cascaded finite-state transducer [ 11 ]. The method defines contextual constraint rules to generate rela-tion extraction templates, and uses cascaded finite-state transducer model to match the satisfied relational tuples. It is noted that R-OpenIE creates inverted index for each matched state during the matching process of cascaded finite-state transducer, which can improve the efficiency of template matching to relation extraction. In general, the main contributions of this paper are three-fold:  X  We propose R-OpenIE, a rule base open information extraction method using cascaded finite-state transducer, which can implement relations extraction without domain tuning and perform efficiently on large number of text.  X  We present a context-free grammar based declarative rule definition language, which makes the relation extraction out of context and is easy to expand new rules, therefore it can improve the adaptability and scalability of R-OpenIE.  X  We introduce cascaded finite-state transducer, which can realize complicated rules based relations extraction.
 The rest of this paper is organized as follows. In Sect. 2 , we give a review of related work. Section 3 formulates the problem and presents the R-OpenIE framework. Section 4 introduces the contextual constraint rules and relation tem-plates for information extraction. Section 5 describes our method for information extraction based on cascaded finite-state transducer. Section 6 is devoted to the experimental results. Finally, the paper is concluded in Sect. 7 . Open information extraction is aimed at automatically extracting relational tuples from natural language text. It was first introduced by the seminal work of Banko et al. [ 2 ], they proposed TextRunner system for open information extrac-tion. Following that, a large variety of extraction techniques have been developed, such as Reverb [ 9 ], R2A2 [ 8 ], OLLIE [ 13 ], OpenIE [ 6 ] and ClausIE [ 14 ]. They can be divided into two categories: The first category of open information extraction techniques only exploits shallow syntactic parsing, such as part-of-speech (POS) and chunking. TextRun-ner, Reverb and R2A2 belong to this category. TextRunner [ 2 ] first labeled a small corpus sample data as positive or negative, and used the labeled data to train a Naive Bayes classifier in an offline phase, and then applied the classifier to efficiently extract relations in an online phase, which used part-of-speech and lightweight noun phrase chunker to heuristically extracting relations. Reverb [ 9 ] was a simple method, it introduced two simple syntactic and lexical constraints on binary relations to reduce incoherent, uninformative and over-specific relation extractions. Based on Reverb, R2A2 [ 8 ] added an argument identifier, it used a number of classifiers to identify the arguments of a verbal phrase, and was able to extract relations that contain arguments that are not noun phrases. ier natural language process technology, generally they not only used POS and chunking but also used dependency parsing. OLLIE, OpenIE, ClausIE belong to this category. OLLIE [ 13 ] trained data to learn extraction patterns on the depen-dency tree. OpenIE [ 6 ] was the upgraded version of TextRunner, it handled both verb-mediated relations and noun-mediated relations. ClausIE [ 14 ] exploited a set of domain independent lexica, it firstly decomposed sentence into clauses, and then extracted relations from these clauses based on dependency parsing. tual sentence decomposition based open information extraction method CSD-IE, it first decomposed a sentence into the parts that semantically belong together, and then identified the implicit or explicit verb in each such part to extract relations based on dependency parsing technique. Augenstein et al. [ 1 ]presented a distantly supervised class-based relation extraction method, it exploited large knowledge bases to automatically label the corpus data and use the annotated text to extract features and train a classifier, and then applied the classifier to extract relation mentions across sentence boundaries.
 mation extraction methods do not need any hand-labeled data for training, and can process very large amounts of data, these methods depends on the per-formance of syntactic parsing technology, which unavoidably involves in errors caused by parsers and costs a lot of time to obtain parsing results. In addition, it has been documented that these methods often produce uninformative as well as incoherent extractions.
 to expand new rules based on declarative rule definition language. R-OpenIE generates a unified cascaded finite-state transducer for all rules, and traverses the transducer from the bottom to up which can avoid redundant sub-rules matching, and during the matching process, the inverted index created from the bottom to up can accelerate the transducer matching efficiency. In this section, we will firstly give some notations and formulate the problem of open information extraction, and then introduce the framework of R-OpenIE. predicate-object (SPO) according to the RDF model [ 15 ]. For example, consid-ering the sentence:  X  X ichael I. Jordan was born in Ponchatoula, Louisiana X , it contains one relational tuple: ( Michael I. Jordan )-( was born in )-( Ponchatoula, Louisiana ). Now we can formulate the problem of open information extraction. Open Information Extraction. Given a collection of documents of open information extraction is to automatically extract relational tuples from D in the form of SPO s without manually labeled training data.
 Based on the definition, we propose R-OpenIE, a new rule based open infor-mation extraction method using cascaded finite-state transducer. The framework of R-OpenIE contains three modules as follows:  X  Entity Recognition. To extract all the relational tuples contained in the given document d  X  D , R-OpenIE firstly exploits this module to extract all entities in the document. In this paper, this module directly adopts the most well-known tool, i.e., Stanford NER [ 10 ], to recognize entities.  X  Relation Templates Generation. In this module, we define a context-free grammar based declarative rule definition language, and present a set of contextual constraint rules to generate relation templates.  X  Relational Tuples Extraction. This module introduces cascaded finite-state transducer to model relation templates, where each constraint rule in the relation template is represented as a state in the transducer. The transducer takes the extracted entities as input, and starts to check whether the state is matched from initial states via bottom-up method. If all the states of a relation template are matched, a relational tuple is extracted.
 In the following sections, we will introduce relation templates generation module and relational tuples extraction module in details. The aim of this section is to generate proper relation templates for information extraction. Essentially, a relation template is composed of three basic types of constraint rules, i.e., entity type constraint, sign word constraint and contextual constraint. In what follows, we will discuss how the rules are defined. (1) Entity Type Constraint Rule : This rule is used to confine the range of subject (S) or object (O) in relational tuples that can be matched by a relation template. In this paper, we mainly focus on four entity type, i.e., person, organization, location and date, which is denoted as PER, ORG, LOC and DATE individually. The entity type constraint rule is defined as follows: where RULE is the constraint rule indicator; ENTITY TYPE = LOC, DATE } is the constraint type; INSTANCE is an entity mention of ENTITY TYPE . For example, considering the following sentence, which will be our running example throughout the paper: Michael I. Jordan received his MS in Mathematics in 1980 from the Arizona State University and his PhD in Cognitive Science in 1985 from the University of California, San Diego.
 constraint rules:  X  RULE:PER:[INSTANCE], the matched result is Michael I. Jordan .  X  RULE:ORG:[INSTANCE], the matched results are Arizona State University and University of California, San Diego .  X  RULE:DATE:[INSTANCE], the matched results are 1980 and 1985 . (2) Sign Word Constraint Rule : This rule is used to define the range of predicate (P). In this paper, we exploit a set of domain independent lexica derived from Wikipedia 1 for sign word rule definition. The sign word constraint rule is defined as follows: where SIGN WORD is the indicator of relation type; INSTANCE is a mention of SIGN WORD . For example, our example sentence above can be matched by the following sign word constraint rule:  X  RULE:GRADUATE:[INSTANCE], the matched result is received from .  X  RULE:DEGREE GET OF:[INSTANCE], the matched result is from .  X  RULE:DEGREE:[INSTANCE], the matched results are MS and PhD . (3) Contextual Constraint Rule : This rule defines the logical restriction between entity type or sign word constraint rules, or defines the instances restriction in context. In this paper, we define four type contextual constraint rules as illustrated in Table 1 : rule between two sign word constraint rules as follows: ( ORD , DEGREE , DEGREE GET OF ), which defines that the sign word of DEGREE must occur before DEGREE GET OF .
 relation templates generation. Relation Templates Generation. In this paper, we adopt distant supervised method to automatically generate relation templates, which is an offline phrase. A relation template is a composition of constraint rules. It is defined as follows: where name is the relation type that the relation template represents; vari-ables is the output variables list that the template can match; contextual rule , entity type rule and sign word rule are the constraints rules defined as above; variable v is one of the output variable assignment. Next, we elaborate on the generation of relation templates:  X  Label the Corpus using the Existing Knowledge Base. R-OpenIE makes use of YAGO [ 12 ] relation facts to label sentences from Wikipedia documents.  X  Determine the Sets of Clauses using Dependency Parsing. R-OpenIE firstly exploits the Stanford dependency parser [ 5 ] to analyze structure of an input sentence, and then identifies the clauses in the input sentences, based on mapping the dependency relations to relation facts constituents. Specifically, we first identify the dependency clause for subject (S) in relation facts, mean-while the dependency clause should contain a governor verb (P), and then find other constituents of the clause based on the governor verb.  X  Generate Relation Templates using Clauses Generalization. R-OpenIE firstly tries to identify the type of each clause, and finds proper entity type or sign word constraint rules to represent the clauses. After that, R-OpenIE counts the occurrence of these clauses in sentences, and then generalizes the occurrence of these clauses in terms of contextual constraint rules. R-OpenIE finally com-bines the generalized contextual constraint rules with the above entity type and sign word constraint rules to generate the relation templates.
 For example, from our sentence above, we can generate the following  X  X rad-uated and graduation time X  relation templates:  X  Template:PERSON COLLEGE1(person, graduate time, college):(SENT, per-son v { PER } ,(DIST 10, graduate time v { DATE } , GRADUATE, college v { ORG } ))  X  Template:PERSON COLLEGE2(person, graduate time, college):(SENT, per-son v { PER } , graduate time v { DATE } , college v { ORG DEGREE GET OF)) Based on the generated relation templates, in the following, we will elaborate on the process of relational tuples extraction. In this section, we will present how R-OpenIE extracts relational tuples based on relation templates. Given a relation template and a document text, R-OpenIE takes the following steps to extract relational tuples: based cascaded finite-state transducer is constructed, where:  X  State: each rule is represented as a state, where entity type and sign word con- X  Transition: if and only if the extracted instances matched with lower layer For example, from our generated  X  X raduated and graduation time X  relation tem-plate, the constructed cascaded finite-state transducer is illustrated in Fig. 1 . 1 models entity type and sign word constraint rules; Layer 2 models basic con-textual constraint rules; Layer 3 models combination constraint rules; Layer 4 models constraint rules for relation templates of interest. transducer: it takes the extracted entities from the given text as input, and takes the lower layer states in the transducer as starting points to check whether the states are matched via bottom-up methods. According to the dependency relationship between states, checking whether their parent states are reachable or not, until there is no state can be reached, the matching is terminated. If all the states corresponding a relation template are matched, then a relational tuple is extracted. During the matching process, R-OpenIE creates inverted index for each matched state, which can improve the efficiency of template matching. sentence with transducer illustrated in Fig. 1 . Based on the cascaded finite-state transducer, starting from initial states, the inverted index on matched content of PER, DEGREE, DEGREE GET OF, DATE, GRADUATE and ORG states are created. The matched initial state transducer is shown in Fig. 2 (a), and its corresponding inverted index is shown in Fig. 2 (b). It is noted that R-OpenIE only creates inverted index for the matched content of states. Specifically, in the transducer, taking an input entity instance  X  X ichael I. Jordan X  for example, if the initial state PER is matched, R-OpenIE cre-ates an index for the matched content of PER state. The inverted index for PER is shown in Fig. 2 (b). After that, R-OpenIE will check the next potential matched higher layer states: SENT(PER, DIST 10) and SENT(PER, DATE, ORG, ORD), it checks whether these transitions to these states are fired or not. For example, if the state transition to SENT(PER, DIST 10) state is fired, it requires that besides PER state, DIST 10(DATE, GRADUATE, ORG) has also been matched. R-OpenIE will search the inverted index, and it will find that DIST 10(DATE, GRADUATE, ORG) does not exist which means that this state has not been matched, so the transition to SENT(PER, DIST 10) is terminated. The checking process of SENT(PER, DATE, ORG, ORD) is similar to SENT(PER, DIST 10).
 After matching PER state, R-OpenIE starts to match DATE state from bottom-up. Similar to PER state matching, if DATE state is matched, R-OpenIE will create an inverted index for the matched content of DATE state, and it will check the next potential matched higher layer states: DIST 10(DATE, GRADUATE, ORG) and SENT(PER, DATE, ORG, ORD), and then sequen-tially checks whether the transition conditions to these states are satisfied: for state DIST 10(DATE, GRADUATE, ORG), R-OpenIE searches DATE, GRAD-UATE, ORG in the inverted index, if the matched instances of DATE, GRAD-UATE and ORG are existed, the transition conditions to state DIST 10(DATE, GRADUATE, ORG) are satisfied, and R-OpenIE will check whether the dis-tance between GRADUATE and ORG is no more than 10 words, if it holds, the state DIST 10(DATE, GRADUATE, ORG) is matched, and the created inverted index for the state is shown in Fig. 3 . R-OpenIE takes the similar way to check the matching status of state SENT(PER, DATE, ORG, ORD) based on the inverted index.
 From above, it can be seen that according to the transducer layers, the process of R-OpenIE extracting relational tuples is an iterative process. Until the states checking process of R-OpenIE can reach to a termination state, a relational tuple is extracted. In Fig. 2 (a), given a text, if R-OpenIE can reach to state PER COLLEGE1 or PERSON COLLEGE2, it identifies that a relational tuple satisfied  X  X raduated and graduation time X  relation template is extracted. After that the matching process finishes, and the output results of the matching are: person= X  X ichael I. Jordan X  (PER), graduate time= X 1980 X  (DATE), col-lege= X  X rizona State University X  (ORG). In addition, we can continue to look up the other triggered transitions. The final created inverted index structure for our sentence matching is shown in Fig. 3 . In this section, we will evaluate the performance of our method R-OpenIE for open information extraction. We will: (1) evaluate the adaptability of our method compared with four state-of-the-art baseline methods in terms of accuracy on different benchmark datasets; (2) evaluate the efficiency of our method compared with the baseline methods in terms of time on the benchmark datasets. 6.1 Experimental Settings All experiments were conducted on a server running 64-bit Linux OS, with 16 core 2GHz AMD Opteron(tm) 6128 Processors and 32GB RAM. And we com-pared our method R-OpenIE with three state-of-the-art methods described in Sect. 2 , namely, Reverb, OLLIE and ClausIE. Specifically, we evaluated the effec-tiveness using the metric of accuracy based on the number of relations correctly extracted, and we evaluated the efficiency using run time. Accuracy is computed as the rate of the number of correctly extracted relations to the total number of extracted relations.
 are used in ClausIE [ 6 ]: Wikipedia dataset, this dataset contains 200 random sentences from Wikipeda pages, these sentences are shorter and simpler; New York Times (NYT) dataset, this dataset also contains 200 random sentences from the New York Times collection, these sentences are generally very clean but tend to be long and complex; Reverb dataset, this dataset consists of 500 sentences with manually labeled extractions. All the datasets are available on ClausIE web site 2 . In order to test the adaptability of R-OpenIE on different datasets and different scale datasets, we select 200 random sentences from Reverb dataset to form a new dataset, denoted as R-200, and the whole Reverb dataset is denoted as R-500. The labels of their relation extractions of these datasets are also available. However, we manually labeled all the extractions again for the reason of consistency. 6.2 Experimental Results and Analysis Effectiveness Evaluation. In this experiment, we conducted two experiments to test the adaptability of R-OpenIE and the baseline methods. Firstly, we con-ducted experiments on Wikipedia, NYT and R-200 datasets to test these meth-ods on different datasets with same size. Secondly, we conducted experiments on R-200 and R-500 datasets to test these methods on same dataset with different size. Tables 2 and 3 show the results individually.
 From Table 2 , it can be seen that on the Wikipeida, NYT and R-200 datasets, our method R-OpenIE extracts the largest number of correct relations (see col-umn of # correct ) and obtains the highest accuracy on these datasets. In addition, comparing the results of Wikipedia dataset with the results of NYT dataset, we can see that the results of the later dataset are slightly worse than the former ones for all the methods. The most likely reason for this is that sentences from news are deeply nested and typically longer the sentences from Wikipedia, and this involves in more broken parses.
 R-OpenIE extracts the largest number of correct relations and obtains the high-est accuracy on these datasets. In addition, as the results shown in Table 3 , R-OpenIE exhibits more steady accuracy on the datasets with different scales. ter adaptability compared with the baseline methods. This is because that our method does not exploit dependency parsing, it uses patterns to match rela-tions. It demonstrates that dependency parser introduces errors which affects the accuracy of relation extraction systems.
 Efficiency Evaluation. In this section, we evaluate the efficiency of our method R-OpenIE and the baseline methods on the datasets. We took the average time per relation extraction on the Wikipedia, NYT and R-200 datasets, and took the total run time of n facts on the R-500 datasets as the metric to measure the efficiency. The results are graphically depicted in Fig. 4 .
 relation extraction of R-OpenIE is the least among these methods. And from Fig. 4 (b), we can see that R-OpenIE spends the least run time to extract the same size of relation facts. In addition, with the increasing of relation facts extraction, R-OpenIE takes minimal run time growth compared with the baseline methods. This is benefit from that R-OpenIE does not using syntactic parsing, which may cost a lot of time to obtain parsing results, and during the extraction process, R-OpenIE exploits inverted index for cascaded finite-state transducer matching to improve the extraction efficiency.
 obtain better accuracy, but also obtain better efficiency in relation extraction, which demonstrates the good adaptability and efficiency of R-OpenIE for open information extraction. Moreover, from the accuracy of knowledge engineering perspective, a slightly improvement is of great importance to applications. There-fore, our method R-OpenIE is a useful technique for open information extraction. In this paper, we presented R-OpenIE, a new rule based open information extrac-tion method using cascaded finite-state transducer. The experimental results have shown that our R-OpenIE can achieve good adaptability and efficiency for open information extraction. We will explore the following further work:  X  Relation normalization method. As relational tuples extracted by R-OpenIE may be uninformative and incoherent, they are hard to map to knowledge bases for population. In future, we may explore a semantic based method using Markov clustering for relation normalization.  X  Relation quality evaluation method. As relational tuples extracted from differ-ent data sources may exist errors and conflicts, it will bring errors to knowledge bases if these tuples are directly populated into knowledge bases. In future, we may explore a multi-layer probabilistic graphic model based method to evaluate relation quality.

