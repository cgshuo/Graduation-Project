 The key aim of Grid Computing has always been coming up with approaches to coor-requirement of large-scale computing capacity from some complex applications. Cur-rently, Grid systems mainly choose to encapsulate computing resources in the forms effectiveness in many available Grid systems, and carter to the need of many applica-tions to some extend. However, this way of resource encapsulation suffers from some critical drawbacks. Briefly they are: 1. Unable to easily provide jobs with proper executing environments. 
Clients might need some customized computing environments for their jobs X  exe-cution in many circumstances, for example the job waiting to be executed may rely on some specific software or the support from particular Operating System. For those system that can perfectly match the whole need, even though in the Grid the required resources actually exist. 2. Hard to guarantee the quality of service. the job can not utilize the resources provided exclusively, but has to share them with the host fail. 3. Hard to provide fine-grained resource management. 
The current solution cannot conf igure concretely to what extent the resource can be limit of CPU utilization for a specific job. The lack of fine-grained resource manage-ment may give rise to the waste of resources. 
Fortunately, the latest development in the field of Virtual Machine has presented us solutions for those problems listed above. By simulating the underlying hardware, the virtual machine can effectively shield the heterogeneousness of different nodes in the Gird System, and provide better means for the customization of executing environ-each job to enjoy its own executing environment exclusively with little loss in utiliza-standing features of virtual machine, the virtualization of Grid has become prevailing currently. 
Nonetheless, merely customizing the suitable and exclusive executing environment for each job is far from enough to guarantee that the outcome of each execution is of full validation and correctness. Despite no negative influence from other execution procedures in the same virtual machine, the running of a job still relies on the specific software context, which may, with high chance, contain some untrusty or tampered executable files, configuration files and development kits. Therefore, we present two mechanisms (mainly aiming at applications under Linux) to ensure the security of a virtual executing environment in Grid: 1. Remote Attestation toward Virtual Machines. 
Two methods of the attestation is discussed here, the attestation based on the se-Trust Base. In both scenarios, administrators are able to get the integrity measure-ments of the operating system and the additional running software from any virtual machine deployed in the Grid System, so that the validation and the credibility of the software environment are certifiable. And based on the integrity information, job-scheduler would be more competent for providing authentic executing environment to guarantee the correctness of the final results. 2. Trusted loading Method for Virtual Executing Environment. 
Propose a way to guarantee the reliability of a virtual computing environment by creating the customized virtual machine in certain protocol. Make sure the loading are under the complete supervision for generating the proper and secure executing environments. 2.1 Basic Concept The Remote Attestation is a solution for trusted computing proposed by TCG (Trusted Computing Group). It allows a host to verify the hardware and software running on a remote host, and the host can then used to decide whether or not it trusts that hardware and software configuration. For instance, a host may only trust a remote host running an operating system with the proper patch level or software certified for certain purposes. TCG has proposed a specification for remote attestation that allows a host to remotely prove its hardware and software while protecting its privacy. There are mainly three functions involved in the process of Remote Attestation called trusted measurement, trusted storage and trusted reporting. Trusted measurement secure hardware on the host is responsible for measuring the BIOS and boot loader to ensure the Secure Boot, then when it comes to the startup of the operating system, the integrity measurement tool, which extend the TCG trust measurement concepts to dynamically take measurement in the application layer, would take over and continue the measurement toward software environment, including some modules of the oper-ating system (in the Linux). In the process of trusted measurement, all executable content form BIOS all the way up to the application layer would be measured before they are loaded and running. 
In particular, once a piece of executable content is measured, the measurement would be extended into the secure hardware, for it possess the secure storage that can farthest protect the integrity information from being tampered. The secure storage provides a  X  X atcheting X  feature such that each new measurement hash is based on the current hash value and the one to be extended. For instance, if the hash of boot loader would be measured and the secure storage would be updated with the hash of (boot loader hash + kernel measurement). Those measurements of the executable contents are also recorded in some specific measurement lists, including the name of executa-ble contents and the values of the hashes. 
Trusted reporting is the key component for the attestation and is accomplished by exporting the integrity information and vouching for its authenticity. The host reports storage digitally signed with the private key generated by secure hardware. Together the trusted measurement (measurement lists and value from the secure storage repre-senting a specific set and sequence of values) and the signature of the key, provide the powerful assurance property that the host is functioning from a specific configuration. All a remote challenger need to do is to verify the signature on the trusted report using the public key get from the certifying authorities of the secure hardware to make sure the report is validate and then compare the measurement values against its set of trusted set, the testified host would be deemed as authentic. 2.2 Related Work There have already existed some available implementations of the secure hardware and the integrity measurement tool. For example, TCG has presented the detailed specification of TPM (Trusted Platform Module), a board-embedded chip responsible also the TPM functions can be provided by some external secure coprocessor card that provides maximum security for sensitive data, such as private keys, through a tamper-responsive environment. As for the integrity measurement tool, IBM has pre-sented an effective solution called IMA (Integrity Measurement Architecture), which is designed as the security module of the Linux kernel and can fully extend the trust measurement concepts into the application layer. 
The virtual machines are also able to take advantage of the functions of secure hardware. With the assistance of proxy, virtual machines can easily access the service provided by secure hardware, for example, IBM has presented the vTPM (virtual TPM) as a solution for virtual domains of Xen to access the TPM functions through a proxy in VMM (Virtual Machine Monitor) called vTPM manager. This proxy main-tains one vTPM instance for each virtual domain, and forward messages between TPM on the hosts and vTPM instances in VMM. So the support of secure hardware is special traits in the creation and booting process of the virtual machine, even for those authenticated based on the trusted OS kernel as the Trust Base. Remote attestation for virtual machines shares the same basic ideas as for real hosts, consisting of trusted measurement, trusted storage and trusted reporting. However, the virtual machine also enjoys many different traits from the real host, which makes the attesting process quite different from that for real machines. The virtual machine actually depends on the services provided by certain kind of virtual machine man-agement program, and both the management program and a virtual machine itself are mised, there is no way to assure the security of a virtual machine running in it. Only when the host is certified to be secure can the credibility of the virtual executing envi-maintained in the domains created by Xend, the management program of Xen which is in charge of the creation and the booting of all virtual instances. Thus, if the host is compromised, there is high possibility that the Xend has also be compromised, so under such circumstance, we can come up with no measure to guarantee the security of the virtual instances running in the host, for the compromised Xend would involve in all the fundamental processes of a virtual machine X  X  creation. On the other hand, if machine should be trusted. exists as an image file, which can be easily customized according to requirements. rately. Thereby, it is possible for us to undertake authentication against the kernel for a specific virtual machine, by comparing the measurement value of this kernel to the The Linux operating system for a virtual inst ance of Xen is composed by three parts: the root file system, the kernel, and the initrd (Initialization Ram Disk). The root file from jobs, but the kernel and initrd are nearly consistent for all computing tasks, ex-cept for the different versions in need. So we can create kernel and initrd files for all available versions in a secure server and get their trusted measurement values as their can only be selected from those available in the server. Then at the specific node, we can authenticate the validation of the kernel and initrd files before the deployment, so toward this virtual machine. 
As analyzed above, due to the special features of the virtual machine, the attesta-tion against virtual executing environment in Grid can be implemented in two differ-the Trust Base respectively. 3.1 The Attestation Based on Secure Hardware machines need to be reliable, the main purpose of secure hardware is not to guarantee the secure boot, but to take measurements of the loading process of the OS kernel for the virtual machine. As previously discussed, if the host is not compromised, we can believe that the BIOS and boot loader part is reliable, so what we seek from the secure its signature in the trusted reporting process. 
Here we suppose TPM as the underlying secure hardware of our host platform. The integrity measurement tool for the software environment is certainly integrated into module would take over the measurement work to record the integrity information of executable contents before they are loaded. The measurement values would be ex-tended into a PCR of TPM (TPM uses SHA-1 as the algorithm to get the digest from data, and the extension process is like this: PCR[n]  X  SHA-1(PCR[n] + measured sign the final digest value in the PCR for the validation later. The architecture of the attestation based on TPM is showed as Fig 1 (a). The TPM proxy works in VMM to forward TPM messages between the hardware and virtual instances. After the integ-rity measurement tool starts up, it takes measurements, records them into measure-ment lists and extends them into the TPM. 
The detailed flow of attestation goes as depicted in Fig 1(b): 1. The executable contents would be measured by the integrity measurement tool before they are loaded; 2. The integrity measurement tool keeps names of those executable contents and their measurement values in a list; 3. The extension request is sent to the TPM proxy; 4. The proxy utilizes the function of TPM to perform the extension and keeps it in the local storage of the proxy. 
The whole procedure of the attestation toward virtual executing environments based on TPM is showed as Fig 2(a), and the detailed steps are as follows. random number N; 2. The attesting agent on the aimed virtual machine collects the measurement list generated by the integrity measurement tool, sends it to the challenger and then starts the signature operation (steps 3-7), and at last sends the signature back to the challenger; 
Extend the random number N into the digest value; (4) Request the TPM to encrypt the final value; (5) TPM encrypts the value with its AIK (Attestation Identity Key); credibility of the remote virtual executing environment; set, or we can call it the fingerprint list. Then the final estimation is drawn accord-ing to the result of the comparison. 
The flow of verification going in a challenger is showed in Fig 2(b), and the de-tailed steps are as follows: 1. Decrypt the encrypted digest value received from the target virtual machine, if the decryption is not successful, the value may ha ve been tampered, so operation fails; lenger extends the hash values in the measurement list in sequence using the same method as the TPM does. After get the result, compare it with the one received. If they are not equal, the measurement list may be tampered in the transmission, and in this case, the operation fails; operation is about to start to estimate the credibility of the target virtual machine. 
The whole process of the attestation can ensure that the correct and proper estima-before scheduling it for a job submitted, and in doing so Grid System would be able to exhibit better performance in providing the quality of service. 3.2 The Attestation Based on the OS Kernel as Trust Base In the Grid System, there is a very practi cal problem occurring in the actual applica-example, the TPM chips are embedded in many newly produced computers, but there is the possibility that still a mount of nodes do not have TPM chips or the coprocessor card on them. In this circumstance, the attestation based on the OS kernel would per-fectly bridge the gap. 
As has been discussed above, the operating system can be easily customized for virtual machines, especially for Linux, which can even be prepared in three would load the initrid into the memory. And then the kernel would firstly access to root file system. Then it comes to the operations toward the root file system ---the phase two. The loading of the security module is completed in phase one, which means the integrity measurement tool can undertake its duty after the loading process in phase one. As pointed out at the beginning of this section, we are able to drag the appropriate kernel and initrid files from the server and authenticate the reliability of them to make sure that they are not compromised by comparing their measurement values with fingerprints we got in advance. So once the kernel and initrd files are proven to be reliable, the first loading phase of the operation system would be undoubtedly trusted. After the first phase, integrity measurement tool would start and take measurements of the coming up executable contents. So, this method of attestation actually heightens the Trust Base from the hardware up to the software by guaranteeing the reliability of the OS kernel. 
Compared to the attestation using secure hardware as Trust Base, the process here involved in this process, the integrity measurement tool needs to be altered to provide some similar functions of the secure hardware, such as to extend hash values, to store the extended digests in memory and to encrypt the digest at the trusted reporting part. cure hardware in this condition, but it is proper because the first phase of loading the time definitely operates without being compromised. 
The flow of the attestation based on OS kernel is depicted as Fig 3(a), and the de-tailed steps are as follows: 1. The integrity measurement tool gets the digest of each executable file by using the 
SHA-1 algorithm before it is loaded; 2. The names of those executable contents and their measurement values are recorded in a list; 3. The integrity measurement tool automatically completes the extension of the new measurement value. are as follows: random number N; 2. The attesting agent on the aimed virtual machine collects the measurement list generated by the integrity measurement tool, sends it to the challenger and then starts the signature operation (steps 3-6), and at last sends the signature back to the challenger; 3. signature operation (step 3-6): (1)The agent sends request to integrity measurement tool for the final digest kept in memory; (2) The integrity measurement tool gets the final digest; (3) Extend the digest with the random number N; (4) The integrity measurement tool encrypts the final value; credibility of the remote virtual executing environment; set. Then the final estimation is drawn according to the result of the comparison. 
The flow of verification of the received integrity information at the side of chal-lenger is the same as the attestation based on TPM. The trusted loading method is another mechanism to provide Grid System with reli-able virtual executing environments. The trusted loading method mainly consists of three significant components: the trusted OS kernel which serves as the trust base; the integrity measurement tool which is responsible for the trusted loading of the operat-ing system; and the environment building tool which is responsible for the installation of extra software that the execution of a specific job depends on. the requirements, describing the version of OS kernel in need and the extra software or configuration file, Grid System would choose the suitable Linux kernel and the smallest root file system for the job. The reliability of the chosen kernel should be verified in the same way explained previously. The Integrity measurement tool still is integrated in the contained in the root file system. The root file system also contains a list of extra soft-ware that needs to be installed and the signed trusted set for all the executable contents that will be loaded during the startup of an operating system using such a root file sys-tem. In fact, when constructing the virtual executing environment with the trusted load-ing method, the root file system for every computing task is the same, so we can make a template and get the trusted set by measuring the startup of an OS using such template as the root file system. measurement tool starts. Then the integrity measurement tool would take responsibility to guarantee the second phase of loading process. Firstly, the integrity measurement tool would try to verify the signed trusted set contained in the root file system. If the verifi-phase of startup, and compare the measurement value with the corresponding item in the trusted set, or can not find the corresponding item of this executable content, the integ-rity measurement tool would deem the root file system as being tampered and call off would be taken over by environment building tool. The environment building tool firstly would parse the list of extra software, and installs them in sequence. 
The environment building tool would generate a queue of installation tasks accord-ing to the list. For each task in its queue, the building tool would perform protocol as follows: 1. The environment building tool sends a request containing the detailed information of the software package it needs to a particular server to ask for the corresponding software package and the signature; package back to the envi ronment building tool; 3. The environment building tool verifies the authenticity of the signed software package it received, to tell whether they are trusted; 4. If the verification succeeds, the environment building tool would invoke the com-mand of the Linux to install the software package. If not, repeat this protocol. If the verification fails for three times, the environment building tool will call off the op-eration, and the loading fails. 
The trusted loading of operating system is guaranteed by the integrity measurement tool and the trusted installation of extra software is assured by the environment build-sured by creating executing environment in this way. Experiments are conducted to evaluate those two mechanisms. For the attestation, since the aim of this mechanism is to truly reveal the executable files or codes in the system that may have been compromised, in the experiment we deliberately changed the modification was clearly reflected. 
As for the trusted loading method, it involves the whole creation and booting proc-ess of a virtual machine, so in the experiments, we manually customized the configu-ration of the virtual machine to check whether the trusted loading method is capable of creating the virtual environment we wanted with desirable security. Results indi-being customized or stop the booting process when we deliberately compromise the executable file that would be loaded at the booting phase. 
Generally, the installation of extra software is usually undertaken during the proc-ess of creating the image file of the operating system. After the proper root file system Linux command  X  X hroot X . However, in order to guarantee the reliability of extra greatly increased since the communication an d transmission can cause extra time loss. Besides, the verification of each executable file would also bring additional time cost. made three experiments to gain an insight into the time cost in trusted loading machine and one with integrity measurement tool, when both are equipped with the mechanism when they both are customized with the extra software. The last one was to record the respective time consumption of installing JDK 1.5.0 through environ-ment building tool and by directly using the  X  X hroot X  command. 
For the second experiment, the basic configuration is as follows: OS Debian etch/ kernel 2.6.18/ extra software JDK 1.5.0 and SSH Server/ network DHCP . For the third experiment, the software package to be installed is sun java Development Kit (JDK) 5.0. 
The results are shown in Fig 5. As we can see from the results, when booting the pure OS (without additional software packages), the trusted loading would only cost about 2sec more than the ordinary VM. But when the installation of additional soft-bottleneck of the time efficiency lies in the installation of extra software in the trusted secure virtual executing environment for a jo b in Grid System, contrasted to the exe-So the efficiency of the trusted lo ading method can totally be acceptable. environment in Grid System, including the attestation method and the trusted loading method. The protocols and operation flows involved in the attestation and trusted fectiveness and analyze the efficiency of these two mechanisms. These two mecha-nisms discussed in this paper have already been successfully implemented in the Vir-tual Environment Deployment and Runtime Management System developed by BeiHang University, and exhibited good performance in maintaining reliability of the virtual executing environment. 
