 Online forums discussing ideological and political topics are common 1 . When people discuss a dis-puted topic they usually split into subgroups. The members of each subgroup carry the same opinion toward the discission topic. The member of a sub-group is more likely to show positive attitude to the members of the same subgroup, and negative atti-tude to the members of opposing subgroups.

For example, let us consider the following two snippets from a debate about the enforcement of a new immigration law in Arizona state in the United States: In (1), the writer is expressing positive attitude regarding the immigration law and negative attitude regarding illegal immigration. The writer of (2) is expressing negative attitude towards the writer of (1) and negative attitude regarding the immigration law. It is clear from this short dialog that the writer of (1) and the writer of (2) are members of two opposing subgroups. Discussant 1 is supporting the new law, while Discussant 2 is against it.

In this paper, we present an unsupervised ap-proach for determining the subgroup membership of each participant in a discussion. We use linguistic techniques to identify attitude expressions, their po-larities, and their targets. The target of attitude could be another discussant or an entity mentioned in the discussion. We use sentiment analysis techniques to identify opinion expressions. We use named en-tity recognition and noun phrase chunking to iden-tify the entities mentioned in the discussion. The opinion-target pairs are identified using a number of syntactic and semantic rules.

For each participant in the discussion, we con-struct a vector of attitude features. We call this vec-tor the discussant attitude profile . The attitude pro-file of a discussant contains an entry for every other discussant and an entry for every entity mentioned in the discission. We use clustering techniques to cluster the attitude vector space. We use the clus-tering results to determine the subgroup structure of the discussion group and the subgroup membership of each participant.

The rest of this paper is organized as follows. Sec-tion 2 examines the previous work. We describe the data used in the paper in Section 2.4. Section 3 presents our approach. Experiments, results and analysis are presented in Section 4. We conclude in Section 5 2.1 Sentiment Analysis Our work is related to a huge body of work on sen-timent analysis. Previous work has studied senti-ment in text at different levels of granularity. The first level is identifying the polarity of individual words. Hatzivassiloglou and McKeown (1997) pro-posed a method to identify the polarity of adjec-tives based on conjunctions linking them. Turney and Littman (2003) used pointwise mutual infor-mation (PMI) and latent semantic analysis (LSA) to compute the association between a given word and a set of positive/negative seed words. Taka-mura et al. (2005) proposed using a spin model to predict word polarity. Other studies used Word-Net to improve word polarity prediction (Hu and Liu, 2004a; Kamps et al., 2004; Kim and Hovy, 2004; Andreevskaia and Bergler, 2006). Hassan and Radev (2010) used a random walk model built on top of a word relatedness network to predict the semantic orientation of English words. Hassan et al. (2011) proposed a method to extend their random walk model to assist word polarity identification in other languages including Arabic and Hindi.

Other work focused on identifying the subjectiv-ity of words. The goal of this work is to deter-mine whether a given word is factual or subjective. We use previous work on subjectivity and polar-ity prediction to identify opinion words in discus-sions. Some of the work on this problem classi-fies words as factual or subjective regardless of their context (Wiebe, 2000; Hatzivassiloglou and Wiebe, 2000; Banea et al., 2008). Some other work no-ticed that the subjectivity of a given word depends on its context. Therefor, several studies proposed using contextual features to determine the subjec-tivity of a given word within its context (Riloff and Wiebe, 2003; Yu and Hatzivassiloglou, 2003; Na-sukawa and Yi, 2003; Popescu and Etzioni, 2005).
The second level of granularity is the sentence level. Hassan et al. (2010) presents a method for identifying sentences that display an attitude from the text writer toward the text recipient. They de-fine attitude as the mental position of one partici-pant with regard to another participant. A very de-tailed survey that covers techniques and approaches in sentiment analysis and opinion mining could be found in (Pang and Lee, 2008). 2.2 Opinion Target Extraction Several methods have been proposed to identify the target of an opinion expression. Most of the work have been done in the context of product re-views mining (Hu and Liu, 2004b; Kobayashi et al., 2007; Mei et al., 2007; Stoyanov and Cardie, 2008). In this context, opinion targets usually refer to product features (i.e. product components or at-tributes, as defined by Liu (2009)). In the work of Hu and Liu (2004b), they treat frequent nouns and noun phrases as product feature candidates. In our work, we extract as targets frequent noun phrases and named entities that are used by two or more dif-ferent discussants. Scaffidi et al. (2007) propose a language model approach to product feature extrac-tion. They assume that product features are men-tioned more often in product reviews than they ap-pear in general English text. However, such statistics may not be reliable when the corpus size is small. In another related work, Jakob and Gurevych (2010) showed that resolving the anaphoric links in the text significantly improves opinion target extraction. In our work, we use anaphora resolution to improve opinion-target pairing as shown in Section 3 below. 2.3 Community Mining Previous work also studied community mining in so-cial media sites. Somasundaran and Wiebe (2009) presents an unsupervised opinion analysis method for debate-side classification. They mine the web to learn associations that are indicative of opinion stances in debates and combine this knowledge with discourse information. Anand et al. (2011) present a supervised method for stance classification. They use a number of linguistic and structural features such as unigrams, bigrams, cue words, repeated punctuation, and opinion dependencies to build a stance classification model. This work is limited to dual sided debates and defines the problem as a clas-sification task where the two debate sides are know beforehand. Our work is characterized by handling multi-side debates and by regarding the problem as a clustering problem where the number of sides is not known by the algorithm. This work also uti-lizes only discussant-to-topic attitude predictions for debate-side classification. Out work utilizes both discussant-to-topic and discussant-to-discussant at-titude predictions.

In another work, Kim and Hovy (2007) predict the results of an election by analyzing discussion threads in online forums that discuss the elections. They use a supervised approach that uses unigrams, bigrams, and trigrams as features. In contrast, our work is unsupervised and uses different types infor-mation. Moreover, although this work is related to ours at the goal level, it does not involve any opinion analysis.

Another related work classifies the speakers side in a corpus of congressional floor debates, using the speakers final vote on the bill as a labeling for side (Thomas et al., 2006; Bansal et al., 2008; Yessenalina et al., 2010). This work infers agree-ment between speakers based on cases where one speaker mentions another by name, and a simple al-gorithm for determining the polarity of the sentence in which the mention occurs. This work shows that even with the resulting sparsely connected agree-ment structure, the MinCut algorithm can improve over stance classification based on textual informa-tion alone. This work also requires that the de-bate sides be known by the algorithm and it only identifies discussant-to-discussant attitude. In our experiments below we show that identifying both discussant-to-discussant and discussant-to-topic at-titudes achieves better results. 2.4 Data In this section, we describe the datasets used in this paper. We use three different datasets. The first dataset ( politicalforum , henceforth) consists of 5,743 posts collected from a political forum 2 . All the posts are in English. The posts cover 12 dis-puted political and ideological topics. The discus-sants of each topic were asked to participate in a poll. The poll asked them to determine their stance on the discussion topic by choosing one item from a list of possible arguments. The list of participants who voted for each argument was published with the poll results. Each poll was accompanied by a discussion thread. The people who participated in the poll were allowed to post text to that thread to justify their choices and to argue with other partic-ipants. We collected the votes and the discussion thread of each poll. We used the votes to identify the subgroup membership of each participant.
The second dataset ( createdebate , henceforth) comes from an online debating site 3 . It consists of 30 debates containing a total of 2,712 posts. Each debate is about one topic. The description of each debate states two or more positions regarding the de-bate topic. When a new participant enters the discus-sion, she explicitly picks a position and posts text to support it, support a post written by another partici-pant who took the same position, or to dispute a post written by another participant who took an opposing position. We collected the discussion thread and the participant positions for each debate.

The third dataset ( wikipedia , henceforth) comes from the Wikipedia 4 discussion section. When a topic on Wikipedia is disputed, the editors of that topic start a discussion about it. We collected 117 Wikipeida discussion threads. The threads contains a total of 1,867 posts.

The politicalforum and createdebate datasets are self labeled as described above. To annotate the Wikipedia data, we asked an expert annotator (a professor in sociolinguistics who is not one of the authors) to read each of the Wikipedia discussion threads and determine whether the discussants split into subgroups in which case he was asked to deter-mine the subgroup membership of each discussant.
Table 2 lists few example threads from our three datasets. Table 1 shows a portion of discussion thread between three participants about enforcing a new immigration law in Arizona. This thread ap-peared in the polictalforum dataset. The text posted by the three participants indicates that A X  X  position is with enforcing the law, that B agrees with A, and that C disagrees with both. This means that A and B belong to the same opinion subgroup, while belongs to an opposing subgroup.

We randomly selected 6 threads from our datasets (2 from politicalforum , 2 from createdebate , and 2 from Wikipedia ) and used them as development set. This set was used to develop our approach. In this section, we describe a system that takes a discussion thread as input and outputs the subgroup membership of each discussant. Figure 1 illustrates the processing steps performed by our system to de-tect subgroups. In the following subsections we de-scribe the different stages in the system pipeline. 3.1 Thread Parsing We start by parsing the thread to identify posts, par-ticipants, and the reply structure of the thread (i.e. who replies to whom). In the datasets described in Section 2.4, all this information was explicitly avail-able in the thread. We tokenize the text of each post and split it into sentences using CLAIRLib (Abu-Jbara and Radev, 2011). 3.2 Opinion Word Identification The next step is to identify the words that express opinion and determine their polarity (positive or negative). Lehrer (1974) defines word polarity as the direction the word deviates to from the norm. We use OpinionFinder (Wilson et al., 2005a) to identify polarized words and their polarities.

The polarity of a word is usally affected by the context in which it appears. For example, the word fine is positive when used as an adjective and negative when used as a noun. For another example, a positive word that appears in a negated context becomes negative. OpinionFinder uses a large set of features to identify the contextual polarity of a given polarized word given its isolated polarity and the sentence in which it appears (Wilson et al., 2005b). Snippet (3) below shows the result of applying this step to snippet (1) above ( O means neutral; POS means positive; NEG means negative). 3.3 Target Identification The goal of this step is to identify the possible tar-gets of opinion. A target could be another discus-sant or an entity mentioned in the discussion. When the target of opinion is another discussant, either the discussant name is mentioned explicitly or a second person pronoun is used to indicate that the opinion is targeting the recipient of the post. For example, in snippet (2) above the second person pronoun you indicates that the opinion word disagree is targeting Discussant 1 , the recipient of the post.

The target of opinion can also be an entity mentioned in the discussion. We use two methods to identify such entities. The first method uses shallow parsing to identify noun groups (NG). We use the Edinburgh Language Technology Text Tokenization Toolkit (LT-TTT) (Grover et al., 2000) for this pur-pose. We consider as an entity any noun group that is mentioned by at least two different discussants. We replace each identified entity with a unique placeholder ( ENTITY ID ). For example, the noun group Arizona immigration law is mentioned by Discussant 1 and Discussant 2 in snippets 1 and 2 above respectively. Therefore, we replace it with a placehold as illustrated in snippets (4) and (5) below. We only consider as entities noun groups that contain two words or more. We impose this require-ment because individual nouns are very common and regarding all of them as entities will introduce significant noise.

In addition to this shallow parsing method, we also use named entity recognition (NER) to identify more entities. We use the Stanford Named Entity Recognizer (Finkel et al., 2005) for this purpose. It recognizes three types of entities: person, location, and organization. We impose no restrictions on the entities identified using this method. Again, we re-place each distinct entity with a unique placeholder. The final set of entities identified in a thread is the union of the entities identified by the two aforemen-tioned methods. Table 3
Finally, a challenge that always arises when performing text mining tasks at this level of gran-ularity is that entities are usually expressed by anaphorical pronouns. Previous work has shown that For example, the following snippet contains an explicit mention of the entity Obama in the first sentence, and then uses a pronoun to refer to the same entity in the second sentence. The opinion word unbeatable appears in the second sentence and is syntactically related to the pronoun He . In the next subsection, it will become clear why knowing which entity does the pronoun He refers to is essential for opinion-target pairing. Jakob and Gurevych (2010) showed experi-mentally that resolving the anaphoric links in the text significantly improves opinion target extraction. We use the Beautiful Anaphora Resolution Toolkit (BART) (Versley et al., 2008) to resolve all the anaphoric links within the text of each post sepa-rately. The result of applying this step to snippet (6) is: Now, both mentions of Obama will be recog-nized by the Stanford NER system and will be identified as one entity. 3.4 Opinion-Target Pairing At this point, we have all the opinion words and the potential targets identified separately. The next step is to determine which opinion word is target-ing which target. We propose a rule based approach for opinion-target pairing. Our rules are based on the dependency relations that connect the words in a sentence. We use the Stanford Parser (Klein and Manning, 2003) to generate the dependency parse tree of each sentence in the thread. An opinion word and a target form a pair if they stratify at least one of our dependency rules. Table 4 illustrates some of these rules 5 . The rules basically examine the types of the dependencies on the shortest path that connect the opinion word and the target in the de-pendency parse tree. It has been shown in previous work on relation extraction that the shortest depen-dency path between any two entities captures the in-formation required to assert a relationship between them (Bunescu and Mooney, 2005).
 If a sentence S in a post written by participant P i contains an opinion word OP j and a target TR k , and if the opinion-target pair satisfies one of our de-pendency rules, we say that P i expresses an attitude towards TR k . The polarity of the attitude is deter-mined by the polarity of OP j . We represent this as P is negative.

It is likely that the same participant P i express sentiment toward the same target TR k multiple times in different sentences in different posts. We keep track of the counts of all the instances of posi-tive/negative attitude P i expresses toward TR k . We represent this as P i m +  X  X  X  X  number of times P i expressed positive (negative) at-titude toward TR k . 3.5 Discussant Attitude Profile We propose a representation of discussants  X  attitudes towards the identified targets in the discussion thread. As stated above, a target could be another discussant or an entity mentioned in the discussion. Our representation is a vector containing numeri-cal values. The values correspond to the counts of positive/negative attitudes expressed by the discus-sant toward each of the targets. We call this vector the discussant attitude profile (DAP) . We construct a DAP for every discussant. Given a discussion thread with d discussants and e entity targets, each attitude profile vector has n = ( d + e )  X  3 dimensions. In other words, each target (discussant or entity) has three corresponding values in the DAP: 1) the num-ber of times the discussant expressed positive atti-tude toward the target, 2) the number of times the discussant expressed a negative attitude towards the target, and 3) the number of times the the discussant interacted with or mentioned the target. It has to be noted that these values are not symmetric since the discussions explicitly denote the source and the tar-get of each post. 3.6 Clustering At this point, we have an attitude profile (or vec-tor) constructed for each discussant. Our goal is to use these attitude profiles to determine the subgroup membership of each discussant. We can achieve this goal by noticing that the attitude profiles of discus-sants who share the same opinion are more likely to be similar to each other than to the attitude profiles of discussants with opposing opinions. This sug-gests that clustering the attitude vector space will achieve the goal and split the discussants into sub-groups according to their opinion. In this section, we present several levels of evalu-ation of our system. First, we compare our sys-tem to baseline systems. Second, we study how the choice of the clustering algorithm impacts the re-sults. Third, we study the impact of each component in our system on the performance. All the results reported in this section that show difference in the performance are statistically significant at the 0.05 level (as indicated by a 2-tailed paired t-test). Be-fore describing the experiments and presenting the results, we first describe the evaluation metrics we use. 4.0.1 Evaluation Metrics
We use two evaluation metrics to evaluate sub-groups detection accuracy: Purity and Entropy. To compute Purity (Manning et al., 2008), each clus-ter is assigned the class of the majority vote within the cluster, and then the accuracy of this assignment is measured by dividing the number of correctly as-signed members by the total number of instances. It can be formally defined as: where  X  = {  X  1 ,  X  2 , ...,  X  k } is the set of clusters and C = { c 1 , c 2 , ..., c J } is the set of classes.  X  interpreted as the set of documents in  X  k and c j as the set of documents in c j . The purity increases as the quality of clustering improves.

The second metric is Entropy. The Entropy of a cluster reflects how the members of the k distinct subgroups are distributed within each resulting clus-ter; the global quality measure is computed by aver-aging the entropy of all clusters:
Entropy =  X  where P ( i, j ) is the probability of finding an ele-ment from the category i in the cluster j , n j is the number of items in cluster j , and n the total num-ber of items in the distribution. In contrast to purity, the entropy decreases as the quality of clustering im-proves. 4.1 Comparison to Baseline Systems We compare our system (DAPC) that was described in Section 3 to two baseline methods. The first base-line (GC) uses graph clustering to partition a net-work based on the interaction frequency between participants. We build a graph where each node represents a participant. Edges link participants if they exchange posts, and edge weights are based on the number of interactions. We tried two methods for clustering the resulting graph: spectral partition-ing (Luxburg, 2007) and a hierarchical agglomera-tion algorithm which works by greedily optimizing the modularity for graphs (Clauset et al., 2004).
The second baseline (TC) is based on the premise that the member of the same subgroup are more likely to use vocabulary drawn from the same lan-guage model. We collect all the text posted by each participant and create a tf-idf representations of the text in a high dimensional vector space. We then cluster the vector space to identify subgroups. We use k-means (MacQueen, 1967) as our clustering algorithm in this experiment (comparison of vari-ous clustering algorithms is presented in the next subsection). The distances between vectors are Eculidean distances. Table 5 shows that our sys-tem performs significantly better the baselines on the three datasets in terms of both the purity ( P ) and the entropy ( E ) (notice that lower entropy values indi-cate better clustering). The values reported are the average results of the threads of each dataset. We believe that the baselines performed poorly because the interaction frequency and the text similarity are not key factors in identifying subgroup structures. Many people would respond to people they disagree with more, while others would mainly respond to people they agree with most of the time. Also, peo-ple in opposing subgroups tend to use very similar text when discussing the same topic and hence text clustering does not work as well. 4.2 Choice of the clustering algorithm We experimented with three different clustering al-gorithms: expectation maximization (EM), and k-means (MacQueen, 1967), and FarthestFirst (FF) (Hochbaum and Shmoys, 1985; Dasgupta, 2002). As we did in the previous subsection, we use Eculidean distance to measure the distance between vectors All the system (DAP) components are in-cluded as described in Section 3. The purity and entropy values using each algorithm are shown in Table 6. Although k-means seems to be performing slightly better than other algorithms, the differences in the results are not significant. This indicates that the choice of the clustering algorithm does not have a noticeable impact on the results. We also exper-imented with using Manhattan distance and cosine similarity instead of Euclidean distance to measure the distance between attitude vectors. We noticed that the choice of the distance does not have signifi-cant impact on the results as well. 4.3 Component Evaluation In this subsection, we evaluate the impact of the dif-ferent components in the pipeline on the system per-formance. We do that by removing each component from the pipeline and measuring the change in per-formance. We perform the following experiments: 1) We run the full system with all its components included (DAPC). 2) We run the system and in-clude only discussant-to-discussant attitude features in the attitude vectors (DAPC-DD). 3) We include only discussant-to-entity attitude features in the atti-tude vectors (DAPC-DE). 4) We include only senti-ment features in the attitude vector; i.e. we exclude the interaction count features (DAPC-SE). 5) We in-clude only interaction count features to the attitude vector; i.e. we exclude sentiment features (DAPC-INT). 6) We skip the anaphora resolution step in the entity identification component (DAPC-NO AR). 7) We only use named entity recognition to identify en-tity targets; i.e. we exclude the entities identified through noun phrasing chunking (DAPC-NER). 8) Finally, we only noun phrase chunking to identify entity targets (DAPC-NP). In all these experiments k-means is used for clustering and the number of clusters is set as explained in the previous subsec-tion.

The results show that all the components in the system contribute to better performance of the sys-tem. We notice from the results that the performance of the system drops significantly if sentiment fea-tures are not included. This is result corroborates our hypothesis that interaction features are not suffi-cient factors for detecting rift in discussion groups. Including interaction features improve the perfor-mance (although not by a big difference) because they help differentiate between the case where par-ticipants A and B never interacted with each other and the case where they interact several time but never posted text that indicate difference in opin-ion between them. We also notice that the perfor-mance drops significantly in DAPC-DD and DAPC-DD which also supports our hypotheses that both the sentiment discussants show toward one another and the sentiment they show toward the aspects of the discussed topic are important for the task. Al-though using both named entity recognition (NER) and noun phrase chunking achieves better results, it can also be noted from the results that NER con-tributes more to the system performance. Finally, the results support Jakob and Gurevych (2010) find-ings that anaphora resolution aids opinion mining systems. In this paper, we presented an approach for subgroup detection in ideological discussions. Our system uses linguistic analysis techniques to identify the at-titude the participants of online discussions carry to-ward each other and toward the aspects of the discus-sion topic. Attitude prediction as well as interaction frequency to construct an attitude vector for each participant. The attitude vectors of discussants are then clustered to form subgroups. Our experiments showed that our system outperforms text clustering and interaction graph clustering. We also studied the contribution of each component in our system to the overall performance.
 This research was funded by the Office of the Di-rector of National Intelligence (ODNI), Intelligence Advanced Research Projects Activity (IARPA), through the U.S. Army Research Lab. All state-ments of fact, opinion or conclusions contained herein are those of the authors and should not be construed as representing the official views or poli-cies of IARPA, the ODNI or the U.S. Government.
