 More and more interaction is becoming code-based. Indeed, in online worlds, it is all there is. If software is providing a new basis for social interaction, then changing the infrastructure of interaction may necessarily change social interaction in important ways. As such, it is critical to understand the implications of code  X  we want to know what the use of code means for socio-technical design. In this paper, based on an ethnographic study of an online game, we examine social regulation in an online game world as a case study of socio-technical design using code. We wanted to know how changing interaction based in code conditioned use in our site. We found that code cha nged social regulation in three specific ways. First, code made some user actions that were socially unwanted to be immediatel y visible. Second, code could prevent some actions from occurri ng or punish users immediately. Finally, software was not able to see all action. Some user actions were too nuanced or subtle for code to catch; others were too ambiguous to place into code. Fo llowing Agre, we argue i that a  X  X rammar of action X  resulting fr om the use of code limits the kinds of behaviors that can be seen and dealt with. These findings suggest that there is more than just a gap between the social world and technical capabilities. There are new possibilities, tradeoffs, and limitations that must be considered in socio-technical design, and all come simultaneously. D.2.1 [Software Engineering]: requi rements/specifications, H.5.2 [User Interfaces] evaluation/met hodology, user-centered design , H.5.3 [Group and Organizati on Interfaces] collaborative computing, computer-s upported cooperative work, evaluation/ methodology, theory and models , K.4.2 [Computers and Society] social issues, K.4.m [Computers and Society] miscellaneous, K.8.0 [Personal Computing] games.
 Human Factors. Socio-technical desi gn, games, social computing, online communities, virtual communities, social regulation, social control, police, social interaction, social life, software infrastructure, code, user study, ethnography Any socio-technical approach to design must consider the how the social and technical are intertwined. As Berg and colleagues wrote: Socio-technical design, then, im plies that one cannot create systems that are fully specifiabl e and understandable in advance. However, any designer would wish for some ability to conform to the requirements of everyday work practice or life, some understanding of the adoption and adaptation likelihoods and issues, and the likely social and technical effects, before releasing the software and, indeed, before constructing the software. One must understand the implications for design decisions before any final commitments when constructi ng software, let alone putting it in place. One would like to understand as much as possible about the potential trajectories of a design in advance  X  that is, to understand code as a design medium. How possible is this? This paper is an examination of software as a design medium. Software is a relatively new mate rial for design, and the effects are much less understood than thos e materials used in physical designs or construction. As Ackerman wrote earlier: This necessarily requires considering how to design both technically and socially, in a socio-technical co-design space [3]. More importantly, one also needs to understand the tradeoffs in using code. Indeed, Lessig [18] argues that software provides an architecture and an infrastructure for social control (in the sociological sense) and social regulation. If this is the case (and it is clear from numerous studies that it is), then by analogy one might expect that interacting through software stru ctures would potentially change the nature of interaction. But Lessig largely argues at the societal level, as do most writers about social control, online privacy, cyber-crime, and the like. Changes in interaction occur not only at the large, societal level, they also occur at a more micro-social level. Most design occurs at this level. Most products mere ly change the routines of normal users as they go about making their breakfast toast, paying their bills, driving to work, playing games at home after work, and so on. Little is understood about how c ode affects interaction at the micro-scale (although see Latour X  X  seminal study [17] in how to do so). Yet, software is providing a new basis for social interaction, especially at a micro-social scale. This parallels earlier examinations of how compute r-mediated communication systems changed social interaction. Meyrowitz points out: In his book, Meyrowitz argued that new media have an extraordinary potential for creating new types of social spaces. However, Meyrowitz X  point can be extended to software with the following conjecture: Understanding any shifts in the infrastructure of interaction is likely to be the key to understanding the use of code and the design of software systems. If th e infrastructure of interaction is now shifting, what might the resulting changes look like? And more importantly, can we say anything about the design implications for these changes in the co-design of a socio-technical space? We believe that a socio-technical approach to design, and thereby socio-technical co-design, must be examined with field studies in order to fully understand the issues and tradeoffs at a micro-scale in using code. We employ a critical-realism stance [14, 16], examining the phenomena with all of its issues instead of engaging in utopian or dysutopian speculation. To do this, we examined game environments [ 23, 24], as all interaction is mediated by software. This work examined whether where code was better than humans at social regulation (or social control in the sociological meaning of that term). The goal was to understand the possibilities, limita tions, and tradeoffs in using code: when to use code to prevent actions that were not considered appropriate (leaving aside for the moment who decides those acts are appropriate), when to use it assuming it was imperfect, and when to use it to augment a human X  X  ability to police the world. This study offe rs potential design implications, and we go into those following a description of the study and the study site. This paper is based on [23], which examined two text-based MUDs (Multi-player Dungeons). While the technology is outdated, the benefit for a study is that the social world could more easily be studied, partially because it is simpler, partially because it is smaller, but mostly because of the text-orientation itself. We discuss here only one of the worlds studied by the second author, a site we call Illu sion here. Illusion was previously described in [24], primarily from the player perspective rather than the perspective in this paper. This study consisted of an approximately three-and-a-half year ethnographically-based study of Illusion by the second author. This participant-observation stud y examined the work performed by Illusion X  X  system administrators (or Immortals, to be described more fully below) to regulate beha vior within this game world. This data collection was preceded by another year or so of participant observation as a player on Illusion [24]. Additionally, the Illusion data is supplemente d by a year long participant observation study of a secondary site, Odyssey. The observational data was also supplemented with frequent open contextual interviews with both players and Immortals. Approximately 20 formal intervie ws and innumerable discussions were carried on with the Immortals; over 100 formal and informal interviews were done with players. At any given time, there were 6 to 8 Immortals (although these vari ed over time). At the time of the study, there were between 60 and 80 players online at any given time. In addition, the second author closely examined Illusions X   X  X enalty X  messages that immortals wrote as a means of reporting each regulatory situation they personally handled. During the study period, there were over 400 separate incidents. The second author had Immortals reflect on a particular incident and comment on the process of handling it. In addition, the second author had complete access to Illusion X  X  code. A range of secondary materi al, including help files, web pages, background stories for the MUD and its groups, and bulletin board messages, were also used. At a basic level, the data analysis was approached from the general approach advocated by Miles and Huberman [22] which relies on a set of initial research questions to frame the subsequent data analysis. The analysis was strongly influenced by symbolic/social intera ctionism ([8, 29, 31]) as its underlying theoretical, sociological perspective. Certain elements of Illusion must be described, in order for the discussion of its use of code to make sense, and so we turn next to its description. Illusion is an elaborate multiplayer game. While there is chat and sociable activity on Illusion, much of the social activity centers on the game. Players interact with the system and other participants through the use of personal characters they have created. A character, then, is a virtual fictional embodiment of a player. (We will generally ignore the distinction between players and characters, but a player may have many characters. This is important in some social regulation issues, as will be discussed below.) There are two basic types of characters on Illusion, Mortals and Immortals. Each type has a very different role in the game. The overwhelming majority of users have only Mortal characters. Mortals interact with one another as they play the game and explore the world of Illusion. A much smaller group serves as the game X  X  administrators; that is, they own Immortal characters. They are responsible for overseeing all aspects of the MUD. Most, if not all, users who are Immortals also have Mortal characters. While an Immortal X  X  primary responsib ility is to oversee Illusion X  X  day-to-day operation, many Immortals still enjoy playing the game with their Mortal characters as well. Illusion supports two very different forms of game play. While both forms of game play flow together within the MUD, players view them as distinct activities. The first form of game play is often known as  X  X eveling X , and involves improving one X  X  character by killing computer-c ontrolled opponents, mobs (short for  X  X obiles X ), while exploring the virtual world. Once characters reach a predefined amount of experience points, the system automatically promotes them to the next level. When a character  X  X evels X , key abilities and statistics that determine one X  X  survivability increase. In general, higher-level characters are more powerful than lower level ch aracters. Collaboration among players ( X  X rouping X ) is key as players seek to advance their characters by leveling. Nearly all players engage in this form of play. Some players may tire of constantly trying to level but at least initially most players strive to level and improve thei r character. For many players, leveling becomes the central focus of play and is the primary means of measuring their success within the game. In addition, many players engage in a second form of play. Adversarial play includes player killing ("pkilling" or  X  X K X ) and stealing from another player X  X  character ("p-stealing"). While Illusion imposes several restrictions on player killing, this activity is accepted and fairly commonplace. Death on Illusion is not a perm anent state of affairs. When characters die, they are reborn in the central town of Praxville. Characters do not lose any of their inherent abilities, but all the character X  X  equipment (swords, armor, etc) remains on the corpse at the location of the demise. In order to retrieve the equipment, the character must retrieve the items from the corpse in a timely fashion, or risk their loss. This often involves a hectic effort to retrieve the equipment before other players or even the MUD X  X  mobs take various items. Many, if not most, of the players who engage in player killing find it to be a rewarding, pleasurable and fun experience. There are numerous, varied motivations that drive players to engage in adversarial play. Many players begi n to engage in adversarial play after the experience of leveling their character(s) over and over again loses its appeal. The desire to experience novel and exciting forms of play motivates many players to explore the complexities of adversarial play. Players who engage in this style of play ( X  X Kers X ) find competition against human opponents to be more rewarding than simply trying to kill computer-controlled creatures. Unlike Mortals, Immortals ( X  X mms X ) do not play the game per se; Immortals are responsible for the management of the MUD. They create, administer, maintain, a nd organize Illu sion. Immortals have the ability to control almost every aspect of a player X  X  game experience on Illusion. This control is provided by specific Immortal-only MUD commands. Higher level Imms can modify the scores and attributes that dictate how a character interacts with the game and other players (experience points, hit points, etc.). They also have the ability to exact punitive forms of control such as removing a character X  X  ability to converse over the public chat channels, banning connections from particul ar computers, and the like. Illusion X  X  MUD code also provides Immortals with powerful control in terms of their awaren ess of Mortals a nd vice versa. They can hide their presence from Immortals ( X  X izard Invisibility X  or  X  X izi X ), or see ev erything a player types and sees without the player X  X  knowledg e or permission ( X  X noop X ). Mortals are expected to comply with the judgments of the Immortal staff. Mortals have ve ry little recourse in terms of appealing decisions and face punishment if they disobey Imms. This power is explicitly stated and reinforced in the system X  X  formal rule set. There is a loose Immortal hierarchy with specific job titles. The  X  X mps X  or Implementers are res ponsible for the overall operation of the MUD. The Imps oversee and manage the activities of the other Immortals on their staff. On most MUDs, the Implementers are also responsible for maintaining the underlying code base. For a while, the second and third authors served as the MUD X  X  two coders. Imps are responsible fo r maintaining the code, fixing bugs, and adding new features to the game. As well, Illusion has Imms who are responsible for overseeing "clans" (groups of players who have affiliated with one another), running "quests" (special mini-adventures designed to provide players with an occasional novel play experience), and handling player administration. There is also a  X  X aw X  Immortal charged specifically with the enforcement of rules and to a lesser extent the creation and revision of Illu sion's rule set. During the study period, there were eight active Immortals and three "semi-retired" Imms. In practice, Imms do not confine their activities to their particular specialization. In fact, the Immortals have very versatile and to some extent interchangeable role s. For instance, it is not unusual for a player administrator to run a quest. In addition, all Imms are expected to enforce Illusion X  X  rules. There is of course some limit to this interchangeability. Due largely to the lack of coding expertise among Illusion X  X  other Immortals, only the two coder Imms work directly with Illu sion X  X  source code. In addition, decisions about the propriety of an Imm X  X  actions are the responsibility of the Imps or head Immortals. It must be noted that Illusion X  X  Imms are all volunteers. This tends to limit the amount of time and de dication that Imms expect from one another. Coordination among Immortals is fairly limited. Efforts to improve coordination on Illusion such as the use of mailing lists and regular meetings have not been very successful. There are no pre-scheduled shifts for Immortals to be online. This can result in very sporadic Immortal presence online. At times there are many Imms online while at other times there may not be any Imm online. As mention, of particular concer n in this study are the social regulation actions of Imms. Social regulation (or social control in the micro-sociological sense of that term) concerns itself with getting people to behave in ways conformant with group or social norms and rules. 1 Deviant activity (again in the micro-sociological sense as activity that has been labeled problematic by parts of society) is to be limited, so that the actions of many people can proceed without undue disruption. Social regulation is of particular interest because it mimi cs certain "real life" work for police, watch people, system ad ministrators, and even camp counselors, this allows the comp arison between activ ities that are not code-based and activities that are. We chose to compare Imms to police in order to compare code-based worlds to  X  X eal X  worlds. We could have also examined barkeepers, club owners, and the like, as these people also engage in social regulation of their place s. However, Imms have many of the formal and informal activities as police. As well, unlike occupations that engage in informal social regulation, there is also a large literature on police activit ies (e.g.,[7, 27, 28, 33, 34]). In general, police work is characterized by very situated activity. Rubinstein, in his ethnography of police work, wrote about how police see a car, going on at some length about the nuanced observation and decision making they do: Occasionally there have been objections to this work that  X  X ocial control X  is not desired in online worlds. This is a confusion of prescriptive and descriptive stances. Social control verging on 1984 cuts against the standard lib ertarian stance of computer scientists and decency in general. However, some level of social regulation (or social control in the sociological sense of the term) is required for any collectivity engaging in social activity. We all accept the necessity of handling, in some way, people who are attempting to harm others or who keep others from engaging in their own acceptab le behavior. This is what we mean by social regulation a nd social control, and nothing more. The stated purpose of the police is to enforce laws and regulations. Our emphasis here, howeve r, is not in the specifics of code enforcement per se, but in the routine, everyday activities that constitute police work. Much of what police do is not, in fact, code enforcement. Instead, as Spradley [28] and Bittner [7] both point out, a considerable amount of police work is engaging in peace keeping and maintaining order, rather than in enforcing laws strictly or "by the book." In both code enforcement and keeping order, a critical, but often overlooked, activity is that po lice must engage in quickly comprehending unknown situations. For example, a potentially dangerous traffic stop must be quickly assessed by a police officer. Stopping lower-class youths in a new luxury car may turn problematic, and quickly understa nding a situation is critical to police work. Bittner [7] terms this routine, everyday activity  X  X ormalization, X  changing an unknow n, chaotic situation into a known situation We will see below that these two types of work, maintaining order and normalization, become difficult in a virtual world like Illusion. Much of what Imms do is similar to the police work. Imms have to determine what a situation is and whether their information is complete and correct. In the case of inter-player conflict, they may have to determine who is correct in their story, based on the players X  stories, their own observa tions, and log data. One player or groups of players may feel that they have been the unwelcome victims of a rule violation committed by one or more other players. Not surprisingly, these players often lodge complaints with the immortals seeking some form of authoritative response to the alleged rule violation. Whil e some complaints are handled almost immediately, most receive immortal attention after one or both of the parties involved has l ogged off. It is not unusual for several hours to pass before an immortal becomes aware of a complaint, typically through an asynchronous message post. Since direct observation is not possible, immortals must often take the written complaint and then proceed to try to make sense of the claim and attempt to verify whet her events did indeed unfold as claimed. They must also decide whether a particular sequence of events warrants a punishment. An example of one such situation follows. Nurb and Karn are Immortals, and they believe that Brosen may have broken a rule. In the following exchange, Karn decides to  X  X noop X  (or invisibly watch) Brosen until he sees something suspicious. Unlike "real life" police, Immortals do not have to make these decisions in real time generally  X  no one has a gun in cyberspace. In addition, the Immortals have additional information at their disposal. While they lack the f ace-to-face cues in conversation, they have log files of people's activities. In our study site, three broad cate gories of social regulation based on code exist. Some of the immortals' actions are similar to face-to-face interaction, such as community outreach, motivation, and so on, but our interest here is on those aspects of social regulation where code makes a significant difference. The three broad categories were: 1. Code that allows Imms to observe player actions. This allows 2. Code that automatically prevents certain types of interaction. 3. Code that allows specific types of interaction but As well, there was the potential for a fourth category, with code that allows interactions but flags them for later inspection. This is a mixture of the first and third cate gory. We will not deal with this separately, as it was not us ed extensively in Illusion. Code as the basis for interact ion changes everything. One can observe every person in this worl d simultaneously, all of the time. Surveillance is ubiquitous -thr ough walls, in places we would consider private in "real life." There is no doubt by the police about what is in the trunk of the car once they open it: it can be directly observed. However, the police cannot see into all car trunks . In Illusion, there would be no way to steal without be ing noticed; it can be directly (and post hoc) observed. This is the first change that providing interaction through a software infrastructu re plays in design: General awareness and subsequent detec tion of potentially problematic activities within a setting are constrained by their visibility, the extent to which information about their occurrence and other related contextual details is available for observation. One of the key aspects of visibility is cove rage, that is how much of the observable world can be viewed or monitored at the same time. In many physical settings, an individual can only observe nearby. Thus police officers in the physical world rely on a moving patrol within small well-defined areas. Th e coverage generated by this approach is limited primarily by the number of available officers. Because placing an officer at every conceivable location is both impractical and untenable, coverage is necessarily limited. As a consequence, it is quite likely that a portion of activities is not directly observed by the police. In contrast, immortals make use of both real-time event notification systems and targeted persistent logging systems to maintain awareness of specific pred efined events across the entire mud simultaneously. These system s provide pervasive coverage for supported activities; regardle ss of where an activity takes place in the world, a notification will be generated. Furthermore, once the events are defined, the information is made available without any additional manual effort by the immortals. Because this form of monitoring is not ba sed on physical observation, there is no need to move around the world or engage in a patrol in order to acquire the information provided through the notifications. These systems facilitate a level of coverage with minimal effort that is not generally achievable in physical settings. In a sense, Imms can engage in surveillance through walls and inside structures. The logging has no bounds, although there are some practical constraints (e.g., disk space). The second change is some actions and social interactions can be prevented in advance through the software. The desired activity cannot be carried through  X  there is no way to do it through the system or the system actively disallows it. An example mentioned above is that Illusion prevents certain types of players from grouping with others. As well, certain kinds of theft are just not possible. In "real life", it would be as though it were possible to arbitrarily create new physics laws that changed physical interactions. Still other rules au tomatically punish players when they act problematically. As men tioned above, it is possible, for example, to a player to kill othe r players "out of level" (OOL). Again the level of automaticity is not present in  X  X eal life. X  Immortals were observed to consider delegating rules with a high frequency of violations to coded ru les. The basic rationale for this is that coded rules would be be tter equipped to handle a large set of frequent violations as they provide continual rather than spotty detection and enforcement. Additionally, immortals are concerned about the amount of effort and time spent on regulation as it limited the amount of time they c ould spend on potentially more interesting and rewarding duties such as area building and storyline writing. The subsequent desire to reduce the effort in regulating behavior serves as a motivation to delegate rules to code. The final change that code as in teraction infrastructure introduces is more subtle. Code is, in its essence, bureaucratic, in the Weberian sense of the term [11]  X  predictable, standardized, rationalized decisions made acco rding to published regulation. Code is always fair and impartial, returning the same results for all players, given specific circumstances. Context is largely ignored, as was part of the original intension of bureaucracy. Any exceptions or any changes in circumstances (that is, bringing criteria in from the situational context to part of the decision) must be separately coded. In a ga me, interestingly, this often appreciated and indeed expected by players (perhaps because it is part of their social conception of fairness), but this is clearly not the case with police or other law enforcement. We will return below to a further examination of this third issue the key to understanding the tradeoffs when using code in a socio-technical design. As one might expect, all is not st raightforward. All of these new or changed possibilities for social regulation based on code suffer from the common problem of brittleness  X  or the lack of contextualization and nuance  X  so familiar to socio-technical researchers. Monitoring and detection can be done only through computational mechanisms, and these mechanisms lack the nuance and flexibility of  X  X eal life X  social interaction. Social inquiry has established that the details of interaction matter to people in their interactions [10, 31], and that people use this detail with considerable agility to frame their interactions and actions in social settings [10, 13, 32]. Code, of course, cannot support this completely, creating a tension between what needs to be done socially and what can be accomplished technically [1]. Below we examine where this tension becomes a problem in Illusion, illustrated by specific examples of this tension. Following, we will also examine the generalizability of these same problems to socio-t echnical design overall. In this discussion, Agre X  X   X  X ra mmar of action X  provides a useful tool for examining these problems [4, 5]. As part of what Agre calls the  X  X apture model X , an analyst decomposes a subset of human activities into  X  X  repertoire of atomic elements. ([5], p. 187) X  as one is trained to do in sy stems analysis. The analyst then goes on to  X  X evise a grammar th at can generate, and thus represent, all of the institutionall y permitted sequences of action. (p. 187) X  Thus, a grammar of action is the representation enscribed in the system that describes all of the activities allowed. As with any grammar, the expressi ons and statements that can be formed must cover the universe one wants to design and control. Although any language is inherently limited in practice (as Garfinkel so aptly points out), a gr ammar of action, as a formal representation of human action, is necessarily limiting, because it is designed to be so: It creates a reduced universe of activities that are allowed by an organization, institution, or other social world. In Illusion, the grammar of action is limited in important ways with several critical implications. First, the objects of inquiry in the grammar can include actors, entities being ac ted upon, entities in the situation (i.e., the important context), and some events. These must be created by known computational mechanisms  X  X y simple variables, patterns of variables, or classification mechanisms (such as algorithms or heuristics). This creates a simplified and discretized design space. Sometimes this is appropriate. For example, in the earlier case of players under level 15 not being a llowed to post messages, the rule easily translates into the actors and objects of Illusion X  X  grammar of action. (One may note, even in this case, Agre X  X  acute observation that the de composition by a systems analyst into a grammar of action then becomes the only acceptable manner of describing activity and thereby c ontrols and defines the activity itself: We do not normally describe people by specified, discrete levels.) Other times, the limitation becomes problematic. Sometimes this is the result of not coding particular patterns. Surveillance at a distance (as opposed to direct observation) is possible only if previously coded: Other times, the problem result s from an imprecise matching between the representation in Illusion's grammar of action (or any grammar of action) and the activity itself. In Illusion, the Imms decided to forbid posts that contained profanity. One could imagine that a set of terms, with constant updating, could serve to determine profanity, but some terms are ambiguous and the matching would be imprecise. In this case, there is not a good match between the actual activity and the objects in the grammar of action, and the resulting discrepancy requires human monitoring. More importantly, any grammar re quires composition of elements into expressions and statements. In this case, the grammar of action allows the composition of only some activities in Illusion. That is, only some sequences of actions can be represented in Illusion X  X  code. Those that ca nnot be composed properly  X  because there is no effective match with the objects of inquiry, because some objects are left out, because some sequences are not specifiable in advance, or be cause the specification does not match human activity well  X  cannot be monitored or controlled. As an example, the Imms forbade communications that were harassing to others. Players can post any text. They can also message one another through I llusion X  X   X  X ay X  command. The representations in Illusion X  X  gr ammar of action, however, cannot distinguish harassing from non-hara ssing text; they are all strings of text. Indeed, the same string of text can be harassing or not, depending on the game character involved, the assumed player, the history of the conversation, and the history of previous interactions. If this is the case, however, utterances, which are an enormous part of this social world, are not handled well by software control. In addition to compositional problems, the complexity of the design space is also a problem. Indirect PK is player-killing through indirect means. Normally, player killing is direct  X  one player attacks another in some fo rm of combat. Indirect PK is generally defined as what is not direct PK. That is, players may place spells in this game world on others, forcing another player to starve to death. Or, players ma y tele-transport others into the middle of an ocean, effectively drowning them. It turns out there are many, many ways of doing indirect PK, so many that the Immortals have not seen fit to enumerate them. Instead, the Imms weigh whether the results of a PK episode were indirect and unfair. This is not an esoteric problem. Earlier, we suggested that out-of-level (OOL) PK was relatively straightforward. There is an algorithm that determines the differ ence in levels between players, and above some threshold, it penali zes the higher-level player if he kills the lower-level. However, indirect PK complicates this enormously. OOL PK was abused by clever players so as to essentially force another player into this penalty. For example, a third player might charm a lower level character into attacking the higher-level player, or conversely , a third player might charm the higher-level player into tele-tra nsporting a low-level player into an ocean. In sum, the addition of two complex problems creates an interaction among the software features that becomes difficult, if not impossible, to adequately encode. Indirect PK highlights another pr oblem in Illusion. While social activities are not always well represented, neither is punishment or social regulation. Indirect PK is too complex and nuanced a problem; attempts to regulate it re quire human intervention. Intent of the player becomes critical, and intent is often determined by understanding the past history of that player. For Illusion X  X  Imms there are players who are  X  X robl em players, X  who cause trouble, just as there are for police [9]. There are also players who are not; those play the game without tr ouble and help other players. Problem players, who may, for exam ple, have a history of indirect PK, are punished more severely; the Imms believe that the trajectory of a player and his trustworthiness are critical to assessing the need and type of so cial regulation invoked. This cannot be done adequately with code, as it requires an understanding and categorization of a player X  X  likely social trajectory. What are the practical consequences of these limitations to the use of code? First, while it would a ppear that code makes social regulation easy, in many respects, the Imms can be unusually blind as well. In effect, these systems provide almost limitless visibility for a subset of all potentially observable activities occurring within the world and no direct visibility over the remainder [23]. Furthermore, si nce only some things can be effectively coded, this problem is not one that will go away. Second, automaticity is strongly desired for efficiency: it should make the Immortals life easier and fit the idealized views of  X  X airness X  by both Imms and players. However, automaticity is possible only if the conditions can be made explicit (e.g., in player killing) or the antecedents can be made explicit (e.g., kind of player). Both depend on what can be detailed in the representation, and we have s een the grammar of action is inadequate for important social interactions and activities. Again, this problem is inherent in the brittleness of software (rather than software X  X  brittleness being the result of carelessness or even the result of inadequate grammars of action). We believe it is an inherent limitation based in th e current nature of software mechanisms [4], [1]. Finally, the side effects and al ternative ways of doing any given problematic behavior are often not specifiable or well understood in advance. We have already seen this is a result of the poor match between social activity the grammar of action X  X  representational capabilities and of the inherent complexity of the socio-technical design space. Problem players will continue finding ways to be problems  X  whether it is indirect PK, harassing other players, or new forms of cheating. This complexity combined with the continued existence of socially problematic people leads directly to inconsistent software, side ef fects in the software, and bugs. What are the implications for socio-technically oriented design? As with any design material, it is important to consider the limitations of that material as we ll as its capabilities. We have argued here, based on our field site X  X  data, that the grammar of action possible in a code base fundamentally is limited. This is true for both the grammar of action X  X  composition and in its requirement for e xplicitedness. There are a number of counter-arguments that could be made to our analysis. First, one could argue the Illusion site is an amateur world, and professionally run wo rlds would have better code infrastructures or a better understanding of the social requirements. While it is true that Illusion was an amateur world, the underlying code base was shared among many MUDs. Regardless, if this argument were tr ue, it would be true only at the margin. The problems, we believe, result from the fundamental nature of code, as it currently ex ists. (While one might imagine a type of code or computational mechanism that had greater fidelity to social experience, our argume nt is based on what currently exists.) It is difficult to im agine a professional world with a substantially greater fidelity to what we know we have to support socially [1]. Based on what ex ists now, only mach ine learning or data mining might produce better re sults and only if the equivalent of Imms looked for the appropriate cues. Again, the issue becomes one of whether the right behaviors are visible and searchable, how any equivalent of Imms can observe players X  actions, and whether the grammar of action is a suitable, full representation. We find the a solution to the last issue to be unlikely. Whether the difference at the margin between amateur and professional worlds is impo rtant, however, remains to be investigated. Second, there is another argument that social computing will get better at this sort of thing over time, and the problem will go away. For example, one might expect rules that better mimic what players want to do. One form of this argument is that better mechanisms or a greater number of them will be possible in time, and this reduces to the previous counter-argument. An alternative form, however, is more interesting: We will gain better and better approximations to "natural" behavi or over time. It would well be (and probably will be) an interesting blend of co-evolutionary social construction where users come to expect specific types of standardized behavior, the system comes to support (and regulate) those standardized behaviors be tter and better, and so on in a continuous turn. This is a question that must be examined empirically over time. In any case, one might expect th ere to always be a gap between better notification systems that better detect problematic actions and users X  capabilities and actions. Representations are inherently limited, and users do not follow prescriptive rules blindly (i.e., they are not  X  X ultural dopes, X  as argued in [10, 13, 32]). There are two clear limitations to this study that must be acknowledged. We cannot evaluate , using ethnographic data, what might have happened without the intervention of the software infrastructure. That is, we do not know what Illusion X  X  users would have done in the absence of software. As well, as with any ethnographic study, the findings could be considered inherently ungeneralizable. However, we believe that we have theoretically abstracted suitably from this specific online community to indicate an entire range of issues with software as an infrastructure for interaction. We believe, as in other interpretivist work, we have achieved an adequate theoretical generalizability [30]. As such, the findings are generalizable, although they must be tested in other settings. I ndeed, we believe, but do not know, that they generalize to many common artifacts, such as the possibilities for social regulation of cars in traffic. We began with a claim that softwa re is providing a new basis for social interaction, and drew a parallel to Meyrowitz X  X  earlier observation: We generalized this observation to be that changing the infrastructure of interaction necessarily changes the social interaction in important ways. More and more interaction is becoming code-based. Indeed, in online worlds, it is all there is. As such, it is critical to understand the use implications of that infrastructure  X  we want to know what it means for socio-technical design. As Postman argued: In this paper, based on an ethnographic study of an online game world, we have shown that changing the infrastructure of interaction to be based in code conditioned the interaction in our site. We examined social regulation in his online game, and found:  X  The use of code changed social regulation. We are We also found that code changed social regulation in three specific ways:  X  Code made some user actions th at were socially unwanted to  X  Code could prevent actions from occurring or punish the  X  Software, however, was not able to see all actions. Some These three findings are actually the flipside of the same coin  X  they are caused by the visibility of actions in a software-based world and the nature of grammars of action. What we have seen in Illusion is that code  X  even professionally-written, well-maintained code  X  is likely to have severe limitations when considering micro-scale social interaction, and the trade-offs must be deeply considered in design. We have also seen the utility of field-based research and a stance based in critical realism [14, 16] in examining the problems of code. The popular or trade press X  utopian or dysutopian visions of the use of code are limited. We believe studies that are empirically-grounded and that examine people actually using, c onstructing, and designing code will continue to show the prof ound trade-offs in using code. These findings suggest that there is more than just a gap between the social world and technical capabilities [1]. There are new possibilities, tradeoffs, and limitations that must be considered in socio-technical design. This argues for important future work that directly follows from this study to consider the implications of using code as an interactional in frastructure over time. Do these tradeoffs and limitations become routine? How does that structuralization and enactment [ 12, 25, 26]? Do rules become more normative over time, requiring users to be self-regulated and further oriented towards even more rules? Or will users find ways to make these mechanisms of social regulation and even rules themselves into resources that th ey can appropriate to their own purposes (as was suggested in this study). What are the specifics of enscription and encoding whereby social regulation or preferred social behavior gets placed into software? As interest in socio-technical research and desi gn grows, we believe that these questions and other similar ones w ould be profitable as the next line of investigation. This paper benefited from discussi ons with Paul Dourish, Gloria Mark, Wayne Lutters, Madhu Reddy, Kjeld Schmidt, Phil Agre, Jonathan Grudin, Howard Rosenblum, Steve Sawyer, Chris Schmandt, Christine Halverson, Steve Jackson, and Ayse Buyuktur. None are responsible for any of the misunderstandings here. The work was also deeply influenced by the work of Rob Kling, John King, Wanda Orlikowski, and Leigh Star. [1] Ackerman, M. S. The Intell ectual Challenge of CSCW: The [2] Ackerman, M. S. The Politics of Desi gn: Next Generation [3] Ackerman, M. S., Darrell, T. and Weitzner, D. J. Privacy in [4] Agre, P. Computation and Human Experience . Cambridge [5] Agre, P. Changing Places : Contexts of Awareness in [6] Berg, M., Aarts, J. and van de r Lei, J. ICT in Health Care: [7] Bittner, E. Aspects of Police Work . Northeastern University [8] Blumer, H. Symbolic Interactionism: Perspective and [9] Cicourel, A. The Social Organization of Juvenile Justice . [10] Garfinkel, H. Studies in Ethnomethodology . Prentice-Hall, [11] Gerth, H. H. and Mills, C. W. From Max Weber: Essays in [12] Giddens, A. The Constitution of Society: Outline of the [13] Heritage, J. Garfinkel and Ethnomethodology . Polity, [14] Kling, R. Computerization and Social Transformations. [15] Kling, R. Value Conflicts in the Design and Organization of [16] Kling, R. Computerization and Controversy . Academic [17] Latour, B. Mixing humans and nonhumans together: The [18] Lessig, L. Code: And Other Laws of Cyberspace, Version [19] Marx, G. T. The Engineering of Social Control: The Search [20] McCreary, L. Postman's Progress. CIO , 7, 3 1993), 74-84. [21] Meyrowitz, J. No Sense of Place: The Impact of Electronic [22] Miles, M. B. and Huberman, A. M. Qualitative Data [23] Muramatsu, J. Social Regulation of Online Multiplayer [24] Muramatsu, J. and Ackerm an, M. S. Computing, Social [25] Orlikowski, W. Using Technology and Constituting [26] Orlikowski, W. J. The Duality of Technology: Rethinking [27] Rubinstein, J. City Police . Farrar, Strauss and Giroux, New [28] Spradley, J. P. You Owe Yourself a Drunk: An Ethnography [29] Strauss, A. Creating Sociological Awareness: Collective [30] Strauss, A. L. Qualitative Analysis for Social Scientists . [31] Strauss, A. L. Continual Permutations of Action . Aldine de [32] Suchman, L. A. Plans and Situated Acti ons: The Problem of [33] van Maanen, J. The Asshole . Goodyear Publishing Company, [34] van Maanen, J. Tales of the Field: On Writing Ethnography . 
