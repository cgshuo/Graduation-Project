 Axiom pinpointing plays an important role in the develop-comprehend an unwanted entailment of an ontology by pre-sponsible for the entailment (called MinAs). In this paper, we consider the problem of axiom pinpointing in descrip-the latest version of Web Ontology Language (OWL). We propose a novel method to compute all MinAs that utilizes the hierarchy information obtained from the classification of an EL + ontology. The advantage of our method over an existing labeled classification based method is that we do not attach labels to entailed subsumptions, which can be memory exhaustion for large scale ontologies. We further consider axiom pinpointing in EL + when ontologies change. An incremental algorithm is given to compute all MinAs by reusing MinAs previously computed.
 F.3.m [ Theory of Computation ]: Logic and Meanings of Program Algorithms, Management, Theory Ontologies, Description Logics, Axiom pinpointing
Ontologies play a key role in many domain, such as bio-medicine, petroleum, healthcare, and Semantic Web. How-ever, the development and maintenance of an ontology are complex and error-prone. Some unwanted entailments may be inferred from an ontology containing errors. When an unwanted entailment is inferred, it is important to provide with the user some explanation services to understand this interest in axiom pinpointing in description logics (DL for short), which underpin web ontology language OWL. Given an unwanted entailment of an ontology, axiom pinpointing computes all minimal subsets of the ontology that have the entailment (called MinAs) which can be used to explain the works (i.e., [5])
Existing methods for axiom pinpointing can be roughly classified into two categories: glass-box methods and black-box methods. Glass-box methods are based on the reasoning algorithm of a DL. The advantage of a glass-box method is that it can find all MinAs of an entailment by a single run of a modified reasoner. Most of the glass-box algorithms are obtained as extension of tableau-based algorithms for check-ing satisfiability of a DL-based ontology [7, 6]. It has been algorithms is that some important blocking techniques can-not be used. In contrast, black-box methods treat a DL reasoner as a  X  X lack-box X  or an  X  X racle X  and uses it to check reasoner-independent, in the sense that the DL reasoner is solely used as an oracle to determine concept satisfiability with respect to an ontology. The disadvantage of this ap-proach is that it needs to call the reasoner an exponential number of times in the worst case, thus cannot handle large ontologies.

In recent years, EL + , as a lightweight DL, has gained widespread concerns due to several reasons. First, many important medical ontologies can be formalized in EL such as SNOMED CT and Galen. Second, the reasoning in EL + and some of its extensions is tractable when deal-ing with terminologies. Third, EL + provides a logical un-derpinning of OWL 2 EL, which is an important profile of latest version of OWL, called OWL 2. As some works (i.e., [3]) suggest, unwanted entailments can occur in EL + tologies, such as SNOMED CT. For example, by classifying SNOMED CT, one can get the unintended subsumption re-lationship between  X  X mputation of finger X  and  X  X mputation of upper limb X . Several methods have been developed to find all MinAs of an entailment in EL + , including black-box methods [3, 8] and a glass-box method [2, 8]. The glass-box method is based on the well-known polynomial time sub-sumption algorithm given in [1] by attaching a label to each axiom in the original ontology and propagated it to inferred axioms through completion rules. As was shown in [2, 8], this method is not efficient as too much space is needed to store labels.

In this paper, we propose a novel method to compute all MinAs that utilizes the hierarchy information obtained from the classification of an EL + ontology without attaching labels to entailed subsumptions. We further consider axiom pinpointing in EL + when ontologies change. An incremental algorithm is given to compute all MinAs by reusing MinAs previously computed.
In this section, we introduce some basic notions in EL + and the notion of an MinA.
 Definition 1. [1] (Syntax and Semantics of EL + ) Let CN O and RN O be two disjoint sets of concept and role names, respectively. Then, we can define concept descrip-tions or concepts inductively by using the four constructors general concept inclusions or axioms in EL + is shown in the left lower part of Table 1.
 An interpretation I = ( 4 I ,  X  I ) consists of 4 I and  X  4
I is the domain of I which is a non-empty set, and  X  I is a function mapping each concept name A (resp. role name r ) to a subset A I (resp. a subset r I ) of 4 I (resp. 4 I  X 4 interpretation function can be extended to arbitrary concept and role descriptions as shown in right part of Table 1.
Given an EL + ontology, the subsumption algorithm given some normalization rules:  X  role inclusions are in one of the following forms:
Then, we classify the normalized ontology by using the completion rules given as follows [1].
 CR2 if A  X  S ( X ), A v X  r.B  X  O and ( X,B ) 6 X  R ( r ) CR3 if ( X,Y )  X  R ( r ) ,A  X  S ( Y ) ,  X  r.A v B  X  O and CR4 if ( X,Y )  X  R ( r ) ,  X  X  X  S ( Y ) and  X 6 X  S ( X ) CR5 if ( X,Y )  X  R ( r ) ,r v s  X  O and ( X,Y ) 6 X  R ( s ) CR6 if ( X,Y )  X  R ( r ) , ( Y,Z )  X  R ( s ) ,r  X  s v t  X  O and
Definition 2. ( MinA ) Let O be an EL + ontology, and S  X  O is a minimal axiom set (MinA) for  X  w.r.t. O , if, and only if S | =  X  , and for every S 0  X  S , S 0 2  X  .
It is easy to see that an axiom of the form C v D is added completion rule CR1, CR3 or CR4, and an axiom of the form C v  X  r.D is added to the classification of an EL ontology only by applying rule CR2, CR5 or CR6. We use C v O D to denote O | = C v D . Then, we have the following observation.  X  Suppose C v O D is obtained by applying rule CR1, CR3  X  Suppose C v O  X  r.D is obtained by applying rule CR2,CR5
Based on the above observation, we present a pinpoint-ing algorithm (see Algorithm 1) for EL + . We assume that ontology O has been classified by using the classification algorithm given in [8], so we can obtain the hierarchy infor-mation C O , C O = S
S O ( A ) = { C  X  CN O | A v O C }
S O ( A ) = { C  X  CN O | C v O A } R
O ( r ) = { ( C,D ) | C v O  X  r.D,C,D  X  CN O ,r  X  RN O }
Then, we define an operator  X  . Suppose S i ,T j are sets of axioms (1  X  i  X  m, 1  X  j  X  n ), S = { S 1 ,S 2 ,...,S m T = { T 1 ,T 2 ,...,T n } we have S  X  T  X { S 1  X  T 1 ,S 2  X  T 1 ,...,S m  X  T 1 ,
The input of our algorithm consists of an ontology O , its entailment C v D and the hierarchy information C O . The first and second for -loops of the procedure MinAs corre-procedure MinAsEdge is called by MinAs to compute all MinAs for the subsumption of the form C v X  r.D . The first and second for -loops of the procedure MinAsEdge corre-spond to (2 . 1). The third and fourth for -loops correspond to (2 . 2) and (2 . 3) respectively.

The correctness of our algorithm is clear based on our previous observation. Formally, we have:
Theorem 1. Given an ontology O and the hierarchy in-formation C O , suppose C v D is its entailment and , Algo-rithm 1 returns all the MinAs of C v D .

We also consider an optimization in Algorithm 1. In our When the procedures MinAs and MinAsEdge are called iteratively, we do not compute the MinAs of a subsumption repeatedly but return the computed all MinAs directly when a subsumption is labelled as  X  X omputed X .
 Algorithm 1 Computing All the MinAs 1: J := { X  X  2: if C v D  X  O then 3: J := {{ C v D }} 4: end if 7: end for 11: end if 12: end for 16: end if 17: end for 18: return J 1: J := { X  X  3: J := {{ C v X  r.A }} 4: end if 8: end if 9: end for 13: end if 14: end for 18: end if 19: end for 22: if C v X  s.Y then 24: end if 25: end for 26: end for 27: return J
Ontologies are typically not static entities, but they evolve over time and need to be modified. Changes to an ontology may be caused, e.g., by modifications in the application do-main, the reorganization of existing information, or the in-corporation of additional knowledge according to changes in the users X  needs. Errors can naturally occur when ontologies evolve. Axiom pinpointing during ontology evolution raises some new challenges. Instead of computing all MinAs of an entailment from scratch, it is highly desirable to reuse com-puted MinAs of the entailment if available. That is, we want to incrementally compute all MinAs when ontologies change. In this section, we propose an incremental pinpointing algo-rithm which is based on our proposed pinpointing algorithm (see Algorithm 2).
 Algorithm 2 Incremental Finding All the MinAs 3: for every set S  X  J do 5: J = J -{ S } 6: end if 7: end for 8: return J
We first consider the case when new axioms are added to an ontology. We slightly modify the duo-ontology classifica-tion algorithm in [8] to incrementally classify the new ontol-ogy (see function inc classify in Algorithm 2). That is, for every axiom which can be inferred by the original ontology O , if it is inferred again during the process of incremental have been calculated, we label it as  X  X on-computed X . Then we call MinAs( C v D , O  X 4 O + , C O  X 4 O + ) (line 2), which will reuse previously computed MinAs and continue to com-pute new MinAs. Otherwise, if C v D cannot be inferred label of its MinAs set is still  X  X omputed X . In this case, we can just return the computed MinAs for C v D directly.
When deleting axioms, we simply delete those MinAs which contain one or more deleted axiom(s) (lines 3-7).
Example 2. (Example 1 continues) We add a new axiom  X  : A v X  r.P 4 and delete the axiom  X  3 : r v s . By applying the incremental classification algorithm, axiom A v B will MinAs( A v B , O , C O ) is labelled as  X  X omputed X , so we label it as  X  X n-computed X . Then we use Algorithm 1 to compute new MinAs for A v B : = MinAs( A v P 1 , O  X  4 O + , C O  X 4 O + )  X  MinAs( P 1 O  X 4 O + , C O  X 4 O + ), and J 2 = MinAs( A v P 3 , O  X 4 O C So J 1 = {{  X  1 ,  X  6 }} . We also have  X  }} , and So J 2 = {{  X  2 ,  X  3 ,  X  4 ,  X  5 ,  X  7 }} . Since  X  8 :  X  r.P O  X 4 O + , C O  X 4 O + )  X  X {  X  8 }} . It is clear So J 3 = {{  X  8 ,  X  9 }} . Therefore, J = {{  X  1 ,  X  6 } , {  X   X  r v s , we have J = {{  X  1 ,  X  6 } , {  X  8 ,  X  9 }} .
In this paper, we proposed a novel method for axioms pinpointing in EL + by using the hierarchy information ob-tained during classification of an ontology. We also proposed an optimization technique to avoid repeated computation of MinAs in our algorithm. We then considered axiom pin-pointing when ontologies evolve. Based on our pinpointing algorithm and the incremental classification algorithm given in [8], we presented an incremental pinpointing algorithm to reuse computed MinAs of an entailment.
This work is supported by NSFC (61003157), Jiangsu Sci-ence Foundation (BK2010412), and the Key Laboratory of Computer Network and Information Integration (Southeast University). [1] F. Baader, S. Brandt, and C. Lutz. Pushing the el [2] F. Baader, R. Pe  X naloza, and B. Suntisrivaraporn. [3] F. Baader and B. Suntisrivaraporn. Debugging [4] G. Friedrich and K. M. Shchekotykhin. A general [5] A. Kalyanpur, B. Parsia, M. Horridge, and E. Sirin. [6] A. Kalyanpur, B. Parsia, E. Sirin, and J. Hendler. [7] S. Schlobach and R. Cornet. Non-standard reasoning [8] B. Suntisrivaraporn. Polynomial-Time Reasoning
