 Energy conservation has been a substantial research topic in wireless sensor networks. non-rechargeable in most cases. However, a sensor network is usually desired to last savings can be achieved by reducing the duty cycle of a sensor node. In this approach, nodes provide certain degree of coverage. 
The coverage of a sensor network, measured by the fraction of the region covered, represents how well a region of interest is monitored. The degree of coverage needed necessary to provide as much coverage to a security-sensitive region as possible. The coverage should be maintained even after some nodes have failed. Sleeping protocols sleeping protocols attempt to wake fewer sensors for certain degree coverage, and thus to extend the lifetime of sensor networks. 
The main contributions of this work are as follows. We propose a sleeping proto-col, named Area-based Collaborative Sleeping protocol or ACOS. This protocol is fully distributed, only depending on the local information. This protocol precisely controls the mode of sensors to maximize the coverage and minimize the energy con-sumption based on the net sensing area of a sensor. The net sensing area of a sensor is the area of the region exclusively covered by the sensor itself. If the net sensing area sleep. Collaboration is introduced to the protocol to balance the energy consumption among sensors. We study the parameter tuning in ACOS to guide the choice of net area threshold for diverse applications and to reduce overhead. Performance evalua-tion shows that ACOS has better coverage of the surveillance area while waking fewer nodes than other state-of-the-art sleeping protocols, and extends the lifetime of sensor networks. 
The rest of the paper is organized as follows. Section 2 discusses previous research related to the coverage problem. Section 3 presents the network model and power consumption model. Section 4 describes the design of ACOS. Section 5 provides a detailed performance evaluation and comparison with other state-of-the-art protocols. We conclude the paper in Section 6. Different coverage methods and models have been surveyed in [6, 7, 8, 9]. Three coverage measures are defined [6], which are area coverage, node coverage, and de-tectability. Area coverage represents the fraction of the region covered by sensors and node coverage represents the number of sensors that can be removed without reducing within the covered field are presented in [7]. In [8], the authors investigate the prob-lem of how well a target can be monitored over a time period while it moves along an region are k-covered, where a crossing path is any path that crosses the width of the region completely [9]. 
Power conservation protocols such as GAF [10], SPAN [11] and ASCENT [12] have been proposed for ad hoc multi-hop wireless networks. They aim at reducing the unnecessary energy consumption during the packet delivery process. In [13], a heuris-tic is proposed to select mutually exclusive sets of sensors such that each set of sen-ered by other sensors are turned off to reduce power consumption, while the fraction of the area covered by sensors is preserved. The problem of providing periodic en-ergy-efficient radio sleep cycles while minimizing the end-to-end communication delays is addressed in [15]. Target coverage problem has been studied in sensor sur-veillance networks where a set of sensors and targets are deployed in [16, 17]. In [16], watching timetable for each sensor is built to achieve maximal lifetime. 
Sleeping protocols such as RIS [3, 4], PEAS [5] and PECAS [3] have been pro-follows its own sleep schedule which is set up during network initialization. In PEAS, a sensor sends a probe message within a certain probing range when it wakes up. The active sensor replies to any received probe me ssage. The sensor goes back to sleep if it receives replies to its probes. In PEAS, an active node remains awake continuously until it dies. PECAS makes an extension to PEAS. Every sensor remains within active mode only for a duration and then goes to sleep. 3.1 Network Model We adopt the following assumptions and notations for the network model throughout the paper. 3.2 Energy Consumption Model For a sensor node, the energy consumption mainly consists of three parts: the proces-power levels corresponding to the following states: transmitting, receiving, idle listen-receiving. Each sensor on a node usually consumes quite a little energy comparing to the processor or radio. The sleeping power of a sensor node component is usually two to four orders of magnitude less than the active power. 
According to Mica2 Mote sensor nodes [1], we set up the energy consumption lev-els of different components, as shown in Table 1. Most components work between 2.2V to 3.3V. For simplicity, we assume each component works at 2.5V. As several kinds of sensors may work together to finish a task, such as sensor positioning by using sounder and microphone, we assume that the current of all active sensors on one node is 5mA. 
We also assume the battery of a sensor node can last for 100 hours when the node keeps the processor, radio and sensors all active all the time. Each sensor node has five states: Sleep state, PreWakeUp state, Awake state, Overdue PreWakeUp, Awake, Overdue and PreSleep states belong to the active mode. The while the Awake and Overdue states may last for several minutes or hours. Every diagram of ACOS is show in Fig.1. T wake_Duration when the sensor turns from the low-power mode to the active mode. The nList i . All the above timers decrease as the time progresses. 4.1 Waking Up When sensor s i wakes up, its state changes from Sleep to PreWakeUp. It broadcasts a message PreWakeUp_Msg to its neighbors within radius 2r and waits for T w seconds. When any neighboring sensor s j is in Awake state and receives this message, s j sends back a Reply_PreWakeUp_Msg including its location and T i wake_left into the message. Upon receipt of a Reply_PreWakeUp_Msg from any neighbor s j , s i extracts the loca-net area ratio a i . unnecessary for s i to work at this moment. So it re turns back to Sleep state and sleeps same time. The consequence is that not only they contend with communications, but also most of them may decide to start to work because of unawareness of each other. To avoid this situation, a random offset  X  can be added to the sleep time. If  X  i is equal or greater than  X  , s i changes to Awake state, initialize its wake timer T wake_left and broadcasts a Wake_Notification_Msg including its location and T to its neighbors. 
When s i is still in the Awake state and hears a PreWakeUp_Msg from s j , it replies s Overdue state is also in the active mode, it does not reply to PreWakeUp_Msg so that s is not counted by newly waked-up sensors and is more likely able to go to sleep in a short time. This is how energy consumption balance among sensors is achieved. 
When s i is in the Awake state and its wake timer T i wake_left has decreased to zero, it changes from Awake to Overdue state. 4.2 Going to Sleep A simple way to enable a node to go to sleep is described as following. When s i is in the Awake or Overdue state and hears a Wake_Notification_Msg, it updates its list Sleep_Notification_Msg to its neighbors. Then it changes to the Sleep state and sleep the sleep time. 
But two problems may be caused. The first problem is the unawareness of dead area ratio  X  i . The calculation of  X  i depends on information stored in the local neighbor died from physical failure or energy depletion without notification. The second problem is about sleep competition caused by a waking up sensor. neighbors may receive this message. Each of them computes their net area ratio with-sleeps . In some cases, multiple sleeps are needed to reduce overlap, but in other cases, multiple sleeps should be avoided. 4.2.1 Dealing with Dead Neighbors Updating local information can solve dead neighbors problem. When s i receives a Wake_Notification_Msg and its net area ratio  X  i is less than  X  , it changes to PreSleep Awake or Overdue state, hears this message, s j sends back a Reply_PreSleep_Msg  X   X  . If  X  i  X  is equal or greater than  X  , this indicates that some neighbors died after the last time s i woke up and that s i should not go to sleep at the moment. 4.2.2 Dealing with Multiple Sleeps Caused by a Waking Up Sensor The multiple-sleeps problem is harder than the dead-neighbor problem. In some cases, cases. Wake_Notification_Msg. The shadowed regions are net sensing regions of sensors s 1 baseline ACOS, both s 1 and s 2 in Fig.2(a) and Fig.2(b) should go to sleep, as the net becomes greater than  X  Thus, s 1 should not go to sleep. 
The protocol is enhanced by making the neighbors that are ready to sleep collabo-including  X  i  X  . Within T w seconds, it receives SleepIntent_Msg from its neighbors, who are intent to sleep too. At the end of T w seconds, it chooses the sensor s k who has the minimum value of  X  among the neighbors from whom a SleepIntent_Msg had been received.  X   X   X  &lt;  X  k  X  or  X  i  X  X  &lt;  X  . some of s j  X  X  neighbors may have different sets of neighbors. A more efficient strategy to select a set of s j  X  X  neighbors and enable them to sleep is currently studied, in order to achieve better coverage while making more neighbors of sleep. In this section, we evaluate ACOS protocol and compare it with other three protocols RIS, PEAS and PECAS. How to choose T wake_Duration and net area threshold in ACOS protocol is discussed in Section 5.1. We compare the coverage and the network life-time with other protocols in Section 5.2. 
In our simulation, the sensing range of each sensor is set as 20 meters, i.e. = , and the communication range is 40 m. The sensors are uniformly distrib-uted in a 400 m  X  400 m region, with bottom-left coordinate (0, 0) and top-right coor-spectively with density 1, 2, 4 and 8 per square of r  X  r . From now on, we will abbre-viate  X  X quare of r  X  r X  as  X  X -square. X  The energy consumption in Section 3.2 is used in the simulation. The data transmitting rate is 19.2kbps. 5.1 Parameters Tuning of ACOS Protocol 5.1.1 Wake Duration The choice of suitable wake duration T wake_Duration is important for ACOS protocol. If T sensor nodes. Shorter T wake_Duration will bring more overhead. The main overhead com-ing and communication in the PreWakeUp state cost most of all the overhead. Com-take up the rest overhead. 
Fig.3. shows the relationship of T wake_Duration and the overhead percentage, the ratio most same with equal node density. As shown in Fig.3, the overhead percentage is density is particularly high. With the same node density, the overhead percentage relatively short. When T wake_Duration = 240 minutes, the overhead percentage decreases to 0.14% with node density of 8 per r-square, while it decreases to 0.038% with node density of 2 per r-square. This result shows that as long as the wake duration is prop-erly tuned, such as 2 hours, the overhead is neglectable. 5.1.2 Net Area Threshold The net area threshold controls the degree of coverage. The energy dissipation is number of active nodes ascends sharply as the net area threshold goes smaller. When  X  = 0, all nodes are active , however, even if  X  is a small non-zero number, the num-that the maximal coverage may be approached by much fewer active sensors than the total number. For example, when the node density is 8 per r-square, i.e. 3200 sensors in total, ACOS wakes up only 361 nodes but covers 98.5% of the whole region. Fig.4(c) illustrates that the coverage percentage is approximately linear to the net area threshold  X  . The coverage percentage can roughly be described as (1-0.45  X  ) * maxC , where maxC is the maximum possible coverage of a given deployment. 5.2 Comparison In this section, we implemented other three protocols RIS, PEAS and PECAS for sensor. Each T slot is divided into two parts, the active period and the sleeping period. The duration of the active period is p* T slot , where p depends on applications, and the sleeping period takes the rest part of a time slot. In PEAS, probing range Rp is given by the application depending on the degree of robustness it needs. In PEAS, a work-ing node remains awake continuously until its physical failure or depletion of battery power. In PECAS, every sensor remains within the active mode for a duration indi-cated by parameter Work_Time_Dur each time it wakes up. 5.2.1 Coverage To compare all four protocols, ACOS, RIS, PEAS, and PECAS, we evaluate the cov-erage over the roughly equal number of active sensors in the case of 800 sensors de-ployed. 
As shown in Fig.5, for the same number of active nodes, ACOS can achieve more coverage than others. And as the number of active nodes increases, ACOS approxi protocols. RIS achieves much less coverage than other protocols, since each sensor independently follows its own sleep schedule and there is no collaboration between This is caused by temporary sensing holes when a node has worked for a given time hole. 5.2.2 Network Lifetime From Fig.5, we see that the performance of ACOS and PECAS are quite similar if the number of active sensors is small, such as less than 150 with 800 nodes deployed. The exactly, we compare the protocols when more coverage is achieved. For example, the coverage percentage is more than 90% before any node dies. In this simulation, we set net area threshold  X  = 0.025 for ACOS, and the probing range Rp=0.6*r for PECAS. At the density 2 per r-square, i.e. 800 nodes deployed, for ACOS protocol, the aver-age coverage percentage is 91.4%, and the average number of active nodes is 241 before any node dies. And for PECAS, the average coverage percentage is 91.2%, and the average number of active nodes is 405. Both the Work_Time_Dur in PECAS and T battery of a sensor node can last for 100 hours before it dies. 
From Fig.6, we see that over time with the same node density, the protected area is better covered with ACOS than with PECAS protocol in most time. For example, at density 4 per r-square, the coverage ratio with PECAS drops dramatically from the point of 300 hour, while the coverage ratio with ACOS still keeps in a relatively high level. Also, we can see that ACOS prolongs the network X  X  lifetime. From the simula-tion results, we can see the two protocols perform much the same when the nodes are few redundant sensors. As the density increases, ACOS performs better and better than PECAS. ACOS reduces redundancy than PECAS when they try to achieve nearly the same coverage. When the node density is 1 per r-square, the network life-time of ACOS and that of PECAS is about the same. When the node density increases to 8 per r-square, the ratio of the network lifetime using ACOS (about 1700 hours) to the lifetime using PECAS (about 1000 hours) is approximately 1.7:1. the protected region while minimizing energy consumption and extending the lifetime of sensor networks. We have developed a sleeping protocol ACOS, which controls the mode of sensors to optimize the usage of energy as well as to maximize the cover-age. We evaluate our protocol on a simulator and compare it with other sleeping pro-The protocol extends the lifetime of sensor networks significantly and is excellent for highly dense sensor networks. [1] MICA2 Mote Datasheet. http://www.xbow.com/Products/Product_pdf_files/ 
