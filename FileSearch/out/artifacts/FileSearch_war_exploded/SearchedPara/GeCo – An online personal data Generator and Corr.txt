 We demonstrate GeCo , an online personal data Ge nerator and Co rruptor that facilitates the creation of realistic per-sonal data ranging from names, addresses, and dates, to social security and credit card numbers, as well as numer-ical values such as salary or blood pressure. Using an in-tuitive Web interface, a user can create records containing such data according to their needs, and apply various corrup-tion functions to generate duplicates of these records. Syn-thetic personal data are increasingly required in areas such as record de-duplication, fraud detection, cloud computing, and health informatics, where data quality issues can signif-icantly affect the outcomes of data integration, processing, and mining projects. Privacy concerns, however, often make it difficult for researchers to obtain real data that contain personal details. Compared to other data generators that have to be downloaded, installed and customized, GeCo al-lows the creation of personal data with much less effort. In this demonstration we show (1) how different types of at-tributes, and dependencies between them, can be specified; (2) how the generated data can be modified using various types of corruption functions; and (3) how a user can con-tribute to GeCo by providing attribute generation functions and look-up files. We believe GeCo will be a valuable tool for researchers that require realistic personal data to evaluate their algorithms with regard to efficiency and effectiveness. H.2.4 [ Database management ]: Systems X  Textual data-bases ; H.2.6 [ Database management ]: Database Applica-tions X  Data mining Experimentation  X  This work was partially funded by the Australian Research Council (ARC) under Linkage Project LP100200079; and by Fujitsu Laboratories (Japan).
 Synthetic data, data generation, online demo, duplicates
Much of today X  X  data are being generated by people, or they refer to people. Examples include shopping and travel transactions; electronic health and financial records; taxa-tion and social security records; emails, tweets, blog posts, and so on. Researchers working in knowledge management, databases, or information retrieval increasingly require data that contain personal identifying information to properly evaluate their algorithms and techniques. The intrinsic de-tails of real data, such as phonetic variations, typographi-cal mistakes, nicknames, measurement variations, random noise, dependencies between values, and values changing over time, can crucially affect the performance of algorithms that work on data that contain personal information. How-ever, privacy concerns make it difficult for researchers to obtain real data that contain personal details [3].
An alternative to using sensitive real data is to create synthetic data which follow similar characteristics [3]. The advantages of synthetic data are that (1) they can be gener-ated with well defined characteristics; (2) it is known which records represent an individual created entity (this is often unknown in real data); and (3) the generated data can be published. Generating realistic synthetic data is however a non-trivial process, as such data should exhibit similar characteristics as real data with regard to distributions of values, errors, noise, variations, and dependencies between attributes. As a result many researchers implement their own simple ad-hoc methods for data generation and/or cor-ruption (the process of adding noise and errors to data). While several generators for personal data have been devel-oped, none of them is available as an online system, all are limited in their functionality to generate data with certain characteristics only, and they cannot be extended to novel types of data. GeCo is a first that overcomes these limita-tions.
A first generator for personal data was presented by Her-nandez and Stolfo [6]. It allowed the creation of records using lists of names, cities, states, and zipcodes, and their corruption using edit-based modifications, and swapping of values. Bertolazzi et al. [1] described an improved generator that allowed values to be randomly set to missing, and that provided a larger number of corruption functions.
The Febrl system [2] provides a data generator that al-lows inclusion of frequency information and look-up files for nicknames and misspellings, that facilitates the modeling of certain (hard-coded) attribute dependencies, and that allows the generation of groups of records that refer to families [4]. Talburt et al. [7] presented the SOG tool for generating tem-poral records that represent people X  X  occupancy. SOG can model address histories of individuals and couples by creat-ing sequences of records with realistic address changes.
Various online generators for personal data are available (for examples see http://www.fakenamegenerator.com or http://www.generatedata.com ). They are generally lim-ited with regard to the types and volume of data they can generate, and allow only limited customization. Most impor-tant is, however, that these online generators do not provide any functionality to corrupt the generated data.
The GeCo interface consists of three tabulators (tabs), with the first being a welcome page, the second allowing the specification of the data generation settings, and the third the specification of the data corruption settings, as shown in Figure 1. A description of the GeCo architecture and the format of look-up files used are provided in a comprehensive manual [5] available on the GeCo Web site.

On the Generate tab, a user specifies how to generate orig-inal records based on look-up files and attribute generation functions, and on the Corrupt tab different types of corrup-tion functions can be selected. These functions are applied on specified attributes to corrupt the original records to form new, duplicate , records. More than one duplicate record can be generated for one original record. Each generated record is given a unique identifier as can be seen in the example preview output shown in Figure 1. A user can download the generated and corrupted records as a comma separated val-ues (CSV) text file which allows easy portability and further processing. GeCo is easily extensible with new functionali-ties via Python programs and look-up files.
On the Generate tab, a user can select the attribute types to be generated, and define their names and type specific parameter settings. The values in an attribute are either generated independently from values in all other attributes, or sets of two or even three compound attributes can be created, where the generated values depend on each other. The following five attribute types can be generated: (1) Function : This type of individual attribute is based on a user defined Python function which randomly gener-ates values. Any function can be used, as long as it returns a string value each time it is called. Functions can either generate a specific type of data, such as a credit card num-ber, a date, or a social security number; or they can be more general and for example generate uniformly or normally dis-tributed values according to user parameters. (2) Frequency : This type of individual attribute is based on frequency look-up files that contain categorical values and their relative frequencies. The probability that a certain value will be generated depends upon these frequencies. (3) Categorical-Categorical : This type of compound attribute generates categorical values in two attributes, with a value in the second attribute depending upon the value generated in the first attribute. This allows for example the generation of values in an attribute state that depend upon the values in a gen der attribute, leading to different distribu-tions of males and females in different states. Values in such compound attributes are generated based on look-up files that contain the frequencies of combinations of categorical values (e.g. male and female frequencies in all states). (4) Categorical-Continuous : This type of compound attribute generates categorical values in the first attribute and continuous values in the second attribute that depend upon the categorical values. This allows for example the generation of numerical salary values that depend upon gen-der values. Compound attributes of this type are generated based on look-up files that contain categorical attribute val-ues and their frequencies, and functions and their parame-ters used to generate the continuous attribute values. (5) Categorical-Categorical-Continuous : This last type of compound attribute generates values in two categor-ical and one continuous attributes, where the values in the second categorical attribute depend upon the values in the first categorical attribute, and the values in the continuous attribute depend upon the values in the second categorical attribute (and therefore indirectly also on the first categor-ical attribute). This allows for example the generation of numerical salary values that depend upon gender and educ-tion values. Similar to the other compound attributes, look-up files are used to specify the categorical values and their frequencies, and functions to create the continuous values.
To simulate real-world  X  X irty X  data [3, 6], researchers often not only need to generate data, but also corrupt data by applying various types of modifications to their data. Such corruptions simulate data entry processes that can lead to manual typing mistakes, scanning and OCR errors, or speech recognition mistakes [4]. On the Corrupt tab, a user can specify how the following six corruption functions are to be applied on the attributes defined on the Generate tab: (1) Missing value : This function simply replaces an attribute value with an empty string. (2) Character edit : This function randomly selects a position in an attribute value (based on real-world studies more likely towards the middle or end of a value [3]) and applies one of four edits at that position: insert a new char-acter, delete the character, substitute the character with a new character, or transpose the character with one of its neighbors. Different probabilities can be set for these edits. (3) Keyboard edit : This function simulates a typing error and randomly replaces a character with a neighboring (same keyboard row or column) character according to a keyboard layout matrix. Different probabilities can be set for selecting a replacement in a row and or column. (4) Optical character recognition (OCR) edit : This function is based on a look-up file that contains pairs of character sequences that have similar shapes, such as 5  X  g  X  q , or m  X  rn . Such pairs can model OCR errors. (5) Phonetic edit : This function simulates phonetic variations (for example for names that sound similar). It is based on a look-up file that contains pairs of phonetic variations of sub-strings [4], such as ph  X  f or rie  X  ry . (6) Swap categorical value : The final corruption func-tion can be applied on categorical attributes by using a look-up file that contains categorical values and their variations (such as nicknames or misspellings). This approach allows the creation of realistic variations based on real data. Probabilities also need to be specified for which corruption function is to be selected for a given attribute, and an over-all probability distribution needs to be set to determine how likely an attribute is selected for corruption. Other parame-ters to be set are the total number of duplicated records to be generated, the maximum number of duplicated records gen-erated based on a single original record, the distribution of how duplicated records are generated from an original record (following a poisson , uniform , or zipf distribution), the max-imum number of corruptions applied on a single attribute, and the number of corruptions applied on one record.
During the demonstration session we will generate various data sets with different types of attributes and corruptions applied to them, and we help the interested user to generate their own data sets. We also have several example data generation and corruption set-ups pre-configured, and we will explain the structure of the look-up files and attribute generation functions to illustrate the extensibility of GeCo .
In this demo we showcase GeCo , an online data Ge nerator and Co rruptor for personal data. Compared to existing such tools that have to be downloaded, installed, and configured by a user, GeCo facilitates easy data generation and cor-ruption without the need for any programming. We believe GeCo will be valuable for researchers that require realistic personal data to evaluate their algorithms with regard to performance, efficiency, and effectiveness.

To expand the functionalities of GeCo , users can con-tribute their own look-up files and attribute generation func-tions (Python programs). While currently this can be done via email to the authors, we plan to allow users to upload their own look-up files and functions via a Web interface, facilitate uploading of existing data sets for corruption only, and allow files and functions with different Unicode charac-ter sets to be used. We also plan to remove the current limit on the maximum number of records that can be generated. [1] S. M. Bertolazzi P, De Santis L. Automated record [2] P. Christen. Development and user experiences of an [3] P. Christen. Data Matching . Data-Centric Systems and [4] P. Christen and A. Pudjijono. Accurate synthetic [5] P. Christen and D. Vatsalan. A flexible data generator [6] M. A. Hernandez and S. J. Stolfo. The merge/purge [7] J. Talburt, Y. Zhou, and S. Shivaiah. SOG: a synthetic
