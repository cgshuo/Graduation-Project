 Representing smoothed n-gram language models as weighted finite-state transducers (WFST) is most naturally done with a failure transition, which re-flects the semantics of the  X  X therwise X  formulation of smoothing (Allauzen et al., 2003). For example, the typical backoff formulation of the probability of a word w given a history h is as follows P( w | h ) = where P is an empirical estimate of the probabil-ity that reserves small finite probability for unseen n-grams;  X  h is a backoff weight that ensures nor-malization; and h 0 is a backoff history typically achieved by excising the earliest word in the his-tory h . The principle benefit of encoding the WFST in this way is that it only requires explicitly storing n-gram transitions for observed n-grams, i.e., count greater than zero, as opposed to all possible n-grams of the given order which would be infeasible in for example large vocabulary speech recognition. This is a massive space savings, and such an approach is also used for non-probabilistic stochastic language models, such as those trained with the perceptron algorithm (Roark et al., 2007), as the means to ac-cess all and exactly those features that should fire for a particular sequence in a deterministic automa-ton. Similar issues hold for other finite-state se-quence processing problems, e.g., tagging, bracket-ing or segmenting.

Failure transitions, however, are an implicit method for representing a much larger explicit au-tomaton  X  in the case of n-gram models, all pos-sible n-grams for that order. During composition with the model, the failure transition must be inter-preted on the fly, keeping track of those symbols that have already been found leaving the original state, and only allowing failure transition traversal for symbols that have not been found (the semantics of  X  X therwise X ). This compact implicit representa-tion cannot generally be preserved when composing with other models, e.g., when combining a language model with a pronunciation lexicon as in widely-used FST approaches to speech recognition (Mohri et al., 2002). Moving from implicit to explicit repre-sentation when performing such a composition leads to an explosion in the size of the resulting trans-ducer, frequently making the approach intractable. In practice, an off-line approximation to the model is made, typically by treating the failure transitions as epsilon transitions (Mohri et al., 2002; Allauzen et al., 2003), allowing large transducers to be com-posed and optimized off-line. These complex ap-proximate transducers are then used during first-pass decoding, and the resulting pruned search graphs (e.g., word lattices) can be rescored with exact lan-guage models encoded with failure transitions.
Similar problems arise when building, say, POS-taggers as WFST: not every pos-tag sequence will have been observed during training, hence failure transitions will achieve great savings in the size of models. Yet discriminative models may include complex features that combine both input stream (word) and output stream (tag) sequences in a single feature, yielding complicated transducer topologies for which effective use of failure transitions may not be possible. An exact encoding using other mecha-nisms is required in such cases to allow for off-line representation and optimization.

In this paper, we introduce a novel use of a semir-ing  X  the lexicographic semiring (Golan, 1999)  X  which permits an exact encoding of these sorts of models with the same compact topology as with fail-ure transitions, but using epsilon transitions. Unlike the standard epsilon approximation, this semiring al-lows for an exact representation, while also allow-ing (unlike failure transition approaches) for off-line composition with other transducers, with all the op-timizations that such representations provide.
In the next section, we introduce the semiring, fol-lowed by a proof that its use yields exact represen-tations. We then conclude with a brief evaluation of the cost of intersection relative to failure transitions in comparable situations. Weighted automata are automata in which the tran-sitions carry weight elements of a semiring (Kuich and Salomaa, 1986). A semiring is a ring that may lack negation, with two associative operations  X  and  X  and their respective identity elements 0 and 1 . A common semiring in speech and language process-ing, and one that we will be using in this paper, is the tropical semiring ( R  X  X  X  X  , min , + ,  X  , 0) , i.e., min is the  X  of the semiring (with identity  X  ) and + is the  X  of the semiring (with identity 0 ). This is appropriate for performing Viterbi search using neg-ative log probabilities  X  we add negative logs along a path and take the min between paths.

A  X  W 1 ,W 2 ...W n  X  -lexicographic weight is a tu-ple of weights where each of the weight classes W 1 ,W 2 ...W n , must observe the path property (Mohri, 2002). The path property of a semiring K is defined in terms of the natural order on K such that: a &lt; K b iff a  X  b = a . The tropical semiring mentioned above is a common example of a semir-ing that observes the path property, since:
The discussion in this paper will be restricted to lexicographic weights consisting of a pair of tropi-cal weights  X  henceforth the  X  T,T  X  -lexicographic semiring. For this semiring the operations  X  and  X  are defined as follows (Golan, 1999, pp. 223 X 224):
The term  X  X exicographic X  is an apt term for this semiring since the comparison for  X  is like the lexi-cographic comparison of strings, comparing the first elements, then the second, and so forth. 3.1 Standard encoding For language model encoding, we will differentiate between two classes of transitions: backoff arcs (la-beled with a  X  for failure, or with using our new semiring); and n-gram arcs (everything else, labeled with the word whose probability is assigned). Each state in the automaton represents an n-gram history string h and each n-gram arc is weighted with the (negative log) conditional probability of the word w labeling the arc given the history h . For a given his-tory h and n-gram arc labeled with a word w , the destination of the arc is the state associated with the longest suffix of the string hw that is a history in the model. This will depend on the Markov order of the n-gram model. For example, consider the trigram model schematic shown in Figure 1, in which only history sequences of length 2 are kept in the model. Thus, from history h i = w i  X  2 w i  X  1 , the word w transitions to h i +1 = w i  X  1 w i , which is the longest suffix of h i w i in the model.

As detailed in the  X  X therwise X  semantics of equa-tion 1, backoff arcs transition from state h to a state h , typically the suffix of h of length | h | X  1 , with weight (  X  log  X  h ). We call the destination state a backoff state. This recursive backoff topology ter-minates at the unigram state, i.e., h = , no history.
Backoff states of order k may be traversed either via  X  -arcs from the higher order n-gram of order k + 1 or via an n-gram arc from a lower order n-gram of order k  X  1 . This means that no n-gram arc can enter the zeroeth order state (final backoff), and full-order states  X  history strings of length n  X  1 for a model of order n  X  may have n-gram arcs entering from other full-order states as well as from backoff states of history size n  X  2 . 3.2 Encoding with lexicographic semiring For an LM machine M on the tropical semiring with failure transitions, which is deterministic and has the path property, we can simulate  X  -arcs in a standard LM topology by a topologically equivalent machine M 0 on the lexicographic  X  T,T  X  semiring, where  X  has been replaced with epsilon, as follows. For every n-gram arc with label w and weight c , source state s and destination state s j , construct an n-gram arc with label w , weight  X  0 ,c  X  , source state s 0 i , and des-tination state s 0 j . The exit cost of each state is con-structed as follows. If the state is non-final,  X  X  X  ,  X  X  . Otherwise if it final with exit cost c it will be  X  0 ,c  X  .
Let n be the length of the longest history string in the model. For every  X  -arc with (backoff) weight c , source state s i , and destination state s j repre-senting a history of length k , construct an -arc with source state s 0 i , destination state s 0 j , and weight the ( n  X  k ) th power with the  X  operation. In the tropical semiring,  X  is + , so  X   X  ( n  X  k ) = ( n  X  k ) X  . For example, in a trigram model, if we are backing off from a bigram state h (history length = 1) to a unigram state, n  X  k = 2  X  0 = 2 , so we set the backoff weight to  X  2 X  ,  X  log  X  h ) for some  X  &gt; 0 .
In order to combine the model with another au-tomaton or transducer, we would need to also con-vert those models to the  X  T,T  X  semiring. For these automata, we simply use a default transformation such that every transition with weight c is assigned weight  X  0 ,c  X  . For example, given a word lattice L , we convert the lattice to L 0 in the lexicographic semiring using this default transformation, and then perform the intersection L 0  X  M 0 . By removing ep-silon transitions and determinizing the result, the low cost path for any given string will be retained in the result, which will correspond to the path achieved with  X  -arcs. Finally we project the second dimension of the  X  T,T  X  weights to produce a lattice in the tropical semiring, which is equivalent to the result of L  X  M , i.e., where C 2 denotes projecting the second-dimension of the  X  T,T  X  weights, det (  X  ) denotes determiniza-tion, and eps-rem (  X  ) denotes -removal. We wish to prove that for any machine N , ShortestPath( M 0  X  N 0 ) passes through the equiv-alent states in M 0 to those passed through in M for ShortestPath( M  X  N ) . Therefore determinization of the resulting intersection after -removal yields the same topology as intersection with the equiva-lent  X  machine. Intuitively, since the first dimension of the  X  T,T  X  weights is 0 for n-gram arcs and &gt; 0 for backoff arcs, the shortest path will traverse the fewest possible backoff arcs; further, since higher-order backoff arcs cost less in the first dimension of the  X  T,T  X  weights in M 0 , the shortest path will in-clude n-gram arcs at their earliest possible point.
We prove this by induction on the state-sequence of the path p / p 0 up to a given state s i / s 0 i in the respec-tive machines M/M 0 .
 Base case: If p / p 0 is of length 0, and therefore the states s i / s 0 i are the initial states of the respective ma-chines, the proposition clearly holds.
 Inductive step: Now suppose that p / p 0 visits s ...s i / s 0 0 ...s 0 i and we have therefore reached s in the respective machines. Suppose the cumulated weights of p / p 0 are W and  X   X  ,W  X  , respectively. We wish to show that whichever s j is next visited on p (i.e., the path becomes s 0 ...s i s j ) the equivalent state s is visited on p 0 (i.e., the path becomes s 0 0 ...s 0 i s
Let w be the next symbol to be matched leaving states s i and s 0 i . There are four cases to consider: (1) there is an n-gram arc leaving states s i and s 0 i la-beled with w , but no backoff arc leaving the state; (2) there is no n-gram arc labeled with w leaving the states, but there is a backoff arc; (3) there is no n-gram arc labeled with w and no backoff arc leaving the states; and (4) there is both an n-gram arc labeled with w and a backoff arc leaving the states. In cases (1) and (2), there is only one possible transition to take in either M or M 0 , and based on the algorithm for construction of M 0 given in Section 3.2, these transitions will point to s j and s 0 j respectively. Case (3) leads to failure of intersection with either ma-chine. This leaves case (4) to consider. In M , since there is a transition leaving state s i labeled with w , the backoff arc, which is a failure transition, can-not be traversed, hence the destination of the n-gram arc s j will be the next state in p . However, in M 0 , both the n-gram transition labeled with w and the backoff transition, now labeled with , can be tra-versed. What we will now prove is that the shortest path through M 0 cannot include taking the backoff arc in this case.

In order to emit w by taking the backoff arc out of state s 0 i , one or more backoff ( ) transitions must be taken, followed by an n-gram arc labeled with w . Let k be the order of the history represented by state s 0 i , hence the cost of the first backoff arc is  X  ( n  X  k ) X  ,  X  log(  X  s 0 traverse m backoff arcs prior to emitting the w , the first dimension of our accumulated cost will be m ( n  X  k + m  X  1 2 ) X  , based on our algorithm for con-struction of M 0 given in Section 3.2. Let s 0 l be the destination state after traversing m backoff arcs fol-lowed by an n-gram arc labeled with w . Note that, by definition, m  X  k , and k  X  m + 1 is the or-der of state s 0 l . Based on the construction algo-rithm, the state s 0 l is also reachable by first emit-ting w from state s 0 i to reach state s 0 j followed by some number of backoff transitions. The order of state s 0 j is either k (if k is the highest order in the model) or k + 1 (by extending the history of state s by one word). If it is of order k , then it will re-quire m  X  1 backoff arcs to reach state s 0 l , one fewer than the path to state s 0 l that begins with a back-off arc, for a total cost of ( m  X  1)( n  X  k + m  X  1 2 ) X  which is less than m ( n  X  k + m  X  1 2 ) X  . If state s j is of order k + 1 , there will be m backoff arcs to reach state s 0 l , but with a total cost of m ( n  X  ( k + 1) + m  X  1 2 ) X  = m ( n  X  k + m  X  3 2 ) X  which is also less than m ( n  X  k + m  X  1 2 ) X  . Hence the state s 0 l can always be reached from s 0 i with a lower cost through state s 0 j than by first taking the backoff arc from s 0 i . Therefore the shortest path on M 0 must follow s 0
This completes the proof. For our experiments we used lattices derived from a very large vocabulary continuous speech recognition system, which was built for the 2007 GALE Ara-bic speech recognition task, and used in the work reported in Lehr and Shafran (2011). The lexico-graphic semiring was evaluated on the development set (2.6 hours of broadcast news and conversations; 18K words). The 888 word lattices for the develop-ment set were generated using a competitive base-line system with acoustic models trained on about 1000 hrs of Arabic broadcast data and a 4-gram lan-guage model. The language model consisting of 122M n -grams was estimated by interpolation of 14 components. The vocabulary is relatively large at 737K and the associated dictionary has only single pronunciations.

The language model was converted to the automa-ton topology described earlier, and represented in three ways: first as an approximation of a failure machine using epsilons instead of failure arcs; sec-ond as a correct failure machine; and third using the lexicographic construction derived in this paper.
The three versions of the LM were evaluated by intersecting them with the 888 lattices of the de-velopment set. The overall error rate for the sys-tems was 24.8% X  X omparable to the state-of-the-art on this task 1 . For the shortest paths, the failure and lexicographic machines always produced iden-tical lattices (as determined by FST equivalence); in contrast, 81% of the shortest paths from the ep-silon approximation are different, at least in terms of weights, from the shortest paths using the failure LM. For full lattices, 42 (4.7%) of the lexicographic outputs differ from the failure LM outputs, due to small floating point rounding issues; 863 (97%) of the epsilon approximation outputs differ.

In terms of size, the failure LM, with 5.7 mil-lion arcs requires 97 Mb. The equivalent  X  T,T  X  -lexicographic LM requires 120 Mb, due to the dou-bling of the size of the weights. 2 To measure speed, we performed the intersections 1000 times for each CPU, and took the mean times for each of our meth-ods. The 888 lattices were processed with a mean of 1.62 seconds in total (1.8 msec per lattice) us-ing the failure LM; using the  X  T,T  X  -lexicographic LM required 1.8 seconds (2.0 msec per lattice), and is thus about 11% slower. Epsilon approximation, where the failure arcs are approximated with epsilon arcs took 1.17 seconds (1.3 msec per lattice). The slightly slower speeds for the exact method using the failure LM, and  X  T,T  X  can be related to the over-head of computing the failure function at runtime, and determinization, respectively. In this paper we have introduced a novel applica-tion of the lexicographic semiring, proved that it can be used to provide an exact encoding of lan-guage model topologies with failure arcs, and pro-vided experimental results that demonstrate its ef-ficiency. Since the  X  T,T  X  -lexicographic semiring is both left-and right-distributive, other optimiza-tions such as minimization are possible. The par-ticular  X  T,T  X  -lexicographic semiring we have used here is but one of many possible lexicographic en-codings. We are currently exploring the use of a lexicographic semiring that involves different semir-ings in the various dimensions, for the integration of part-of-speech taggers into language models.

An implementation of the lexicographic semir-ing by the second author is already available as part of the OpenFst package (Allauzen et al., 2007). The methods described here are part of the NGram language-model-training toolkit, soon to be released at opengrm.org .
 This research was supported in part by NSF Grant #IIS-0811745 and DARPA grant #HR0011-09-1-0041. Any opinions, findings, conclusions or recom-mendations expressed in this publication are those of the authors and do not necessarily reflect the views of the NSF or DARPA. We thank Maider Lehr for help in preparing the test data. We also thank the ACL reviewers for valuable comments.

