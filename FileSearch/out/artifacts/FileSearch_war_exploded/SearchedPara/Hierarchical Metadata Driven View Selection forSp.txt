 A spatial data warehouse (SDW) is introduced in [1], which is defined as a subject-oriented, integrated, time-variant, and non-volatile collection of both spatial and non-spatial data in support of management X  X  decision-making pro-cesses. An SDW consists of a set of materialized views defined over the source relations, either conventional, spatial, or both combined. Some views may also be defined over other views. In order to ensure high query performance, the input queries into an SDW are answered by either complete or partial rewriting over the materialized views.
 The first one is to evaluate the dependence between views, i.e., how one view can be computed from another. Given a set of input queries, finding an appropri-ate way to represent the dependency order among them becomes a challenging task. The second issue is the cost value associated with each spatial view. In this paper, we investigate the cost issues for both storage overhead and on-line processing of spatial queries. Event ually, we develop a greedy algorithm to generate a set of views for materialization to achieve the cost optimization in an SDW, which combines the spatial view dependency and cost considerations at each view dependence level. Our work significantly extends the traditional data warehouses to spatial domains by considering the unique features of spatial data types and spatial operations, and guarantees the local cost optimality for designing an SDW.
 administrative maps with their alphanumeric counterparts, as well as three basic metadata: location , time ,and resolution . We use a multi-dimensional star model to represent the maps and their metadata in figure 1.
 A concept hierarchy for each dimension can be created by users or experts or generated automatically by the data analysis. For example, we could have a sim-ple total order as a concept hierarchy for each dimension, Day-Month-Year-None for time , County-State-Country-None for location , and 1000 m (low)-30 m (mid)-1 m (high)-None for resolution . The challenging issue is how to build a dependency framework to represent the inter-relatio nship among the spatial views. For a sin-gle dimension, this is simple as long as we have a hierarchical structure for it. However, how to measure the dependencies between spatial views built on sev-eral dimension hierarchies, how to quan tify the generality of a view, and how to deal with a partial order for a dimension hierarchy, etc, all of these issues demand a powerful data structure and corresponding techniques. We consider dimensions T (time), L (location) and R (resolution) as three basic metadata for all spatial data warehouses. Assume we have hierarchical positions ( T 1 ,...,T i ,...,T k ) for dimension T , hierarchical positions ( L 1 ,...,L j ,...,L m ) for dimension L , and hierarchical positions ( R 1 ,...,R p ,...,R n ) for dimension R . The positions in a dimension form a to tal order in specific-general way. Then the 3D dependency framework is formed by connecting three positions from three dimensions respectively, which results in k  X  m  X  n triangles with each triangle represents a spatial view associated with three dimension attr ibutes. We denote each triangle as ( T i L j R p ).
 pendency framework of the motivation example. Three axes represent three dimensions respectively, with each unit of an axis representing a position of the hierarchy on that dimension in an ascending order. For instance, we have Day ( D )  X  Month ( M )  X  Year ( Y )for T , County(C)-State(S)-Country(U) for L , and 1 m ( R 1 )  X  30 m ( R 2 )  X  1000 m ( R 3 )for R . A triangle is formed when we con-nect three hierarchy positions from thr ee dimensions respectively. There could be 3  X  3  X  3 = 27 triangles generated for three dimensions, given 3 hierarchy positions within each dimension.
 We quantify the generality of a view, i.e., the abstract level of a view, in a 3D view dependence framework by computing the perimeter of the represented tri-angle, which is the sum of Euclidean distance of each side within the triangle. We observe that the larger the value of the perimeter for a triangle, the more general the view represented by that triangle. Generally, the view represented by a triangle with larger perimeter valu e depends on the view represented by a triangle with smaller perimeter value. If two triangles have the same length of perimeter, then the two views have the same generality and there is no depen-dence relationship between them.
 pendency framework, denoted as  X  , is defined as follows. Suppose there are two views V and V ,bydenoting V  X  V ,wemeanthat V can be computed by performing certain aggregation functions, either spatial or non-spatial, only on V ,or V completely depends on V . Otherwise, there is no direct dependence relationship between V and V . We develop a proposition for identifying the di-rect dependence relationship between any pair of views in a 3D view dependence framework as follows: V  X  V if and only if V has one level higher hierarchical position than V on at least one dimension, and other two dimensions of V have either equal hierarchical position to or one level higher hierarchical position than the respective dimensions of V . The detailed proof is in [2].
 the number of dimensions increases, or (2) the hierarchy within a dimension is a partial order, or a lattice. Consider a set of dimensions D , with each dimension has hierarchy denoted as D i ( H j ), where i  X  (1 ,n ), j  X  (1 ,k ). The hierarchy on each dimension forms a total order in specific-general way, i.e., a view on H j is more general than the view on H j  X  1 .An n-dimensional dependency framework is built by connecting each hierarchical position of one dimension to all positions of any other dimensions. Thus a hyper-plane is formed to represent a view. The total number of generated view is, N = n i =1 K i . A triangle in 3 D platform is the simplest hyper-plane. Although it is difficult to envision an n-dimensional hyper-plane, we can still use the perimeter of the hyper-plane to quantify the generality of a view, which is computed as the sum of Euclidean distance of each side connecting two hierarchical positions from two dimensions respectively. It is also straightforward to extend the direct dependency relationship into an n-dimensional dependency framework.
 the view dependency lattice will be cons tructed differently. For example, figure 3(a) describes a simple lattice on Time dimension. We can see due to the partial order, we cannot represent a dimension on one axis as we normally do for a total order. We modify figure 2(a) in figure 3 (b), where the Time dimension is split into two sub-dimensions Time1 and Time2 , and the coordinate system is built accordingly. In figure 3 (b), we refer to the view represented by the triangle
UR 3 W as V 1 and the view represented by the triangle UR 3 Y as V 2 . V 1 has larger perimeter value than V 2 ,thus V 1 is more general than V 2 . However, V 1 shows no dependence on V 2 because we don X  X  compare the hierarchical position level between Y and W as they are not in the same dimension.
 A spatial query typically consists of several atomic spatial operations, which are either spatial selections or spatial joins. If we decompose the query into component queries, the component query with only one single spatial operation is denoted as a simple spatial query (SSQ). We use q to denote an SSQ and p to denote a spatial query composed of several q ,andeach q is an un-divisible unit within p . The following three factors should be considered to decide whether a q needs to be computed on-the -fly or be materialized: (1) The on-the-fly computation cost. We measure the on-the-fly computation cost of a q , denoted as P ( q ), in terms of the query response time. Most of spatial query processing methods, represented by spatial operators, fall into two categories: spatial join and spatial selection (include point or range queries). Theodoridis et al. [3] have presented analytical models to estimat e the response time for both selection and join queries using R-trees. We adopt the unified cost model proposed by them to estimate the cost of P ( q ). (2) The potential access frequency. Based on the access history one may estimate the access frequency of q , which is denoted as fr ( q ) over a certain time period. (3) Size . Basically, an image/map size is measured in Bytes or Megabytes and determined by sev eral factors, such as resolution (the number of pixels per inch) and channel (Bytes per pixel). We assumethesizeofthegeneratedviewfrom q , denoted as S ( q ), is a fixed value at the data warehouse design level, by specifying the height, width, resolution and channels of the generated view. Given the maximum space capacity of the SDW is M , obviously one must materialize a view only if S ( q )  X  M .  X  ( p m ), and the total cost of an SDW as C ( Q, V )= n i =1 C ( p i ). pute it or the less space its result takes, the larger the value of C ( q )wouldbe,and the more likely we need to materialize it. Therefore, we need a control threshold, which is denoted as  X  and used to control the cost of executing a q . The general rule is that if C ( q ) is greater than  X  , we materialize q otherwise we compute it on-the-fly. By controlling the execution cost of each q within a spatial query p , we divide p into two subsets, one is denoted as p o for materialization and the other is denoted as p m for on-the-fly computation, and C ( p ) is the total cost of a given spatial query p where  X  is a parameter between 0 and 1 indicating the relative importance of the spatial query computational cost vs. the space cost. Given the set of queries Q = { p 1 ,...,p n } and a set of materialized views V from Q , the total cost of an SDW is computed accordingly. Suppose we are given a view dependency framework for an SDW, with the to-tal cost value associated with each view. The basic idea is to take a part of queries for materialization and identify another part of spatial operations for online computation, by controlling the execution cost value less than the cost threshold. We first define a benefit function to monitor the cost savings for an SDW. Let A be an arbitrary set of SSQs. The benefit of A with respect to V ,an already selected set of mater ialized views, denoted as B ( A, V ), is defined as: (1) If C ( Q, V  X  A ) &lt;C ( Q, V ), then B ( A, V )= C ( Q, V )  X  C ( Q, V  X  A ),otherwise B ( A, V )=0.(2) B ( A,  X  ) is called the absolute benefit of A . Specifically, we compute the benefit of A by considering how it can r educe the total cost of a given SDW. For each set of SSQs we cho ose to materialize, we compare the total cost of the SDW with the one before the transformation. If A helps, i.e., the current cost is less than before, then the difference represents the benefit of selecting A for materialization, otherwise, there is no benefit. Now we define a spatial greedy algorithm (Algorithm 1) to select a set of SSQs to material-ize.
 riving a sub-optimal solution for the selective materialization of spatial views, because it commits to a local maximum cost benefit at each iteration of step 2, although not every locally maximum choice can guarantee the global maxi-mality. This approach is always fairly close to optimal and in some cases can be shown to produce the best possible selection of views to materialize given an SDW.
 Algorithm 1. The spatial greedy algorithm for view materialization View materialization is an essential query optimization strategy for decision-support applications. In this paper, we first investigated the problem of con-structing a view dependency framework based on the concept hierarchies of metadata for a spatial data warehouse. Secondly, we investigated the cost issues of spatial views, where a cost model is developed for measuring spatial queries, which considers query disk access time, frequency and space. A benefit function and spatial greedy algorithm are finally constructed to filter each simple spa-tial view within spatial queries for materialization by considering its dependence level with associated cost value. We are c urrently doing concrete implementa-tions to test the algorithm, which may l ead to certain impr ovements for the efficiency.

