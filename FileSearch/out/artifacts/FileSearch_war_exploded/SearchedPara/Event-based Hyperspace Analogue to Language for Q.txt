 Despite its intuitive appeal, the incorporation of linguistic and semantic word dependencies in IR has not been shown to significantly improve over a bigram language modeling approach (Song and Croft, 1999) that encodes word dependencies as-sumed from mere syntactic adjacency. Both the dependence language model for IR (Gao et al., 2004), which incorporates linguistic relations be-tween non-adjacent words while limiting the gen-eration of meaningless phrases, and the Markov Random Field (MRF) model, which captures short and long range term dependencies (Metzler and Croft, 2005; Metzler and Croft, 2007), con-sistently outperform a unigram language mod-elling approach but are closely approximated by a bigram language model that uses no linguis-tic knowledge. Improving retrieval performance through application of semantic and syntactic in-formation beyond proximity and co-occurrence features is a difficult task but remains a tantalising prospect.

Our approach is like that of Gao et al. (2004) in that it considers semantic-syntactically deter-mined relationships between words at the sentence level, but allows words to have more than one role, such as predicate and argument for differ-ent events, while link grammar (Sleator and Tem-perley, 1991) dictates that a word can only sat-isfy one connector in a disjunctive set. Compared to the MRF model, our approach is unsupervised where MRFs require the training of parameters us-ing relevance judgments that are often unavailable in practical conditions.

Other work incorporating syntactic and linguis-tic information into IR includes early research by (Smeaton, O X  X onnell and Kelledy, 1995), who employed tree structured analytics (TSAs) resem-bling dependency trees, the use of syntax to de-tect paraphrases for question answering (QA) (Lin and Pantel, 2001), and semantic role labelling in QA (Shen and Lapata, 2007).

Independent from IR, Pado and Lapata (2007) proposed a general framework for the construc-tion of a semantic space endowed with syntactic information. This was represented by an undi-rected graph, where nodes stood for words, de-pendency edges stood for syntactical relations, and sequences of dependency edges formed paths that were weighted for each target word. Our work is in line with Pado and Lapata (2007) in construct-ing a semantic space with syntactic information, but builds our space from events, states and attri-butions as defined linguistically by Bach (1986). We call these simply events , and extract them auto-matically from predicate-argument structures and a dependency parse. We will use this space to per-form query expansion in IR, a task that aims to find additional words related to original query terms, such that an expanded query including these words better expresses the information need. To our knowledge, the notion of events has not been ap-plied to query expansion before.

This paper will outline the original HAL al-gorithm which serves as our baseline, and the event extraction process. We then propose two methods to arm HAL with event information: di-rect construction of HAL from events (eHAL-1), and treating events as constraints on HAL con-struction from the corpus (eHAL-2). Evaluation will compare results using original HAL, eHAL-1 and eHAL-2 with a widely used unigram lan-guage model (LM) for IR and a state of the art query expansion method, namely the Relevance Model (RM) (Lavrenko and Croft, 2001). We also explore whether a complementary effect can be achieved by combining HAL-based dependency modelling with the unigram-based RM. Semantic space models aim to capture the mean-ings of words using co-occurrence information in a text corpus. Two examples are the Hyper-space Analogue to Language (HAL) (Lund and Burgess, 1996), in which a word is represented by a vector of other words co-occurring with it in a sliding window, and Latent Semantic Anal-ysis (LSA) (Deerwester, Dumais, Furnas, Lan-dauer and Harshman, 1990; Landauer, Foltz and Laham, 1998), in which a word is expressed as a vector of documents (or any other syntacti-cal units such as sentences) containing the word. In these semantic spaces, vector-based represen-tations facilitate measurement of similarities be-tween words. Semantic space models have been validated through various studies and demonstrate compatibility with human information processing. Recently, they have also been applied in IR, such as LSA for latent semantic indexing, and HAL for query expansion. For the purpose of this paper, we focus on HAL, which encodes word co-occurrence information explicitly and thus can be applied to query expansion in a straightforward way.

HAL is premised on context surrounding a word providing important information about its mean-ing (Harris, 1968). To be specific, an L -size sliding window moves across a large text corpus word-by-word. Any two words in the same win-dow are treated as co-occurring with each other with a weight that is inversely proportional to their separation distance in the text. By accumulating co-occurrence information over a corpus, a word-by-word matrix is constructed, a simple illustra-tion of which is given in Table 1. A single word is represented by a row vector and a column vector that capture the information before and after the word, respectively. In some applications, direc-tion sensitivity is ignored to obtain a single vector representation of a word by adding corresponding row and column vectors (Bai et al., 2005). Table 1: A HAL space for the text  X  w 1 w 2 w 3 w 4 w 5 w 6  X  using a 5-word sliding window ( L = 5 ).
HAL has been successfully applied to query ex-pansion and can be incorporated into this task di-rectly (Bai et al., 2005) or indirectly, as with the Information Flow method based on HAL (Bruza and Song, 2002). However, to date it has used only statistical information from co-occurrence patterns. We extend HAL to incorporate syntactic-semantic information. Prior to event extraction, predicates, arguments, part of speech (POS) information and syntac-tic dependencies are annotated using the best-performing joint syntactic-semantic parser from the CoNNL 2008 Shared Task (Johansson and Nugues, 2008), trained on PropBank and Nom-Bank data. The event extraction algorithm then instantiates the template REL [modREL] Arg0 [modArg0] ...ArgN [modArgN] , where REL is the predicate relation (or root verb if no predicates are identified), and Arg0...ArgN are its arguments. Modifiers ( mod ) are identified by tracing from predicate and argument heads along the depen-dency tree. All predicates are associated with at least one event unless both Arg0 and Arg1 are not identified, or the only argument is not a noun. The algorithm checks for modifiers based on POS tag 1 , tracing up and down the dependency tree, skipping over prepositions, coordinating con-junctions and words indicating apportionment, such as  X  X ample (of) X  . However, to constrain out-put the search is limited to a depth of one (with the exception of skipping). For example, given the phrase  X  X pples from the store nearby X  and an argument head apples , the first dependent, store , will be extracted but not nearby , which is the de-pendent of store. This can be detrimental when encountering compound nouns but does focus on core information. For verbs, modal dependents are not included in output.

Available paths up and down the dependency tree are followed until all branches are exhausted, given the rules outlined above. Tracing can re-sult in multiple extracted events for one predicate and predicates may also appear as arguments in a different event, or be part of argument phrases. For this reason, events are constrained to cover only detail appearing above subsequent predicates in the tree, which simplifies the event structure. For example, the sentence  X  X aghdad already has the facilities to continue producing massive quan-tities of its own biological and chemical weapons X  results in the event output: (1) has Baghdad al-ready facilities continue producing ; (2) continue quantities producing massive ; (3) producing quan-tities massive weapons biological ; (4) quantities weapons biological massive . 4.1 eHAL-1: Construction From Events Since events are extracted from documents, they form a reduced text corpus from which HAL can be built in a similar manner to the original HAL. We ignore the parameter of window length ( L ) and treat every event as a single window of length equal to the number of words in the event. Every pair of words in an event is considered to be co-occurrent with each other. The weight assigned to the association between each pair is simply set to one. With this scheme, all the events are traversed and the event-based HAL is constructed.

The advantage of this method is that it sub-stantially reduces the processing time during HAL construction because only events are involved and there is no need to calculate weights per occur-rence. Additional processing time is incurred in semantic role labelling (SRL) during event iden-tification. However, the naive approach to extrac-tion might be simulated with a combination of less costly chunking and dependency parsing, given that the word ordering information available with SRL is not utilised. eHAL-1 combines syntactical and statistical in-formation, but has a potential drawback in that only events are used during construction so some information existing in the co-occurrence patterns of the original text may be lost. This motivates the second method. 4.2 eHAL-2: Event-Based Filtering This method attempts to include more statistical information in eHAL construction. The key idea is to decide whether a text segment in a corpus should be used for the HAL construction, based on how much event information it covers. Given a corpus of text and the events extracted from it, the eHAL-2 method runs as follows: 1. Select the events of length M or more and 2. Set an  X  X nclusion criterion X , which decides if 3. Move across the whole corpus word-by-word 4. For the current L -size text segment, check 5. If an event is included in the current text 6. Extract the full span of consecutive segments 7. When the scanning is done, construct HAL
With the guidance of event information, the pro-cedure above keeps only those segments of text that include at least one event and discards the rest. It makes use of more statistical co-occurrence in-formation than eHAL-1 by applying weights that are proportional to word separation distance. It also alleviates the identified drawback of eHAL-1 by using the full text surrounding events. A trade-off is that not all the events are included by the selected text segments, and thus some syntactical information may be lost. In addition, the paramet-ric complexity and computational complexity are also higher than eHAL-1. We empirically test whether our event-based HALs perform better than the original HAL, and standard LM and RM, using three TREC 2 col-lections: AP89 with Topics 1-50 ( title field), AP8889 with Topics 101-150 ( title field) and WSJ9092 with Topics 201-250 ( description field). All the collections are stemmed, and stop words are removed, prior to retrieval using the Lemur Toolkit Version 4.11 3 . Initial retrieval is iden-tical for all models evaluated: KL-divergence based LM smoothed using Dirichlet prior with  X  set to 1000 as appropriate for TREC style title queries (Lavrenko, 2004). The top 50 returned documents form the basis for all pseudo-relevance feedback, with other parameters tuned separately for the RM and HAL methods.

For each dataset, the number of feedback terms for each method is selected optimally among 20, 40, 60, 80 4 and the interpolation and smoothing coefficient is set to be optimal in [0,1] with in-terval 0.1. For RM, we choose the first relevance model in Lavrenko and Croft (2001) with the doc-ument model smoothing parameter optimally set at 0.8. The number of feedback terms is fixed at 60 (for AP89 and WSJ9092) and 80 (for AP8889), and interpolation between the query and relevance models is set at 0.7 (for WSJ9092) and 0.9 (for AP89 and AP8889). The HAL-based query ex-pansion methods add the top 80 expansion terms to the query with interpolation coefficient 0.9 for WSJ9092 and 1 (that is, no interpolation) for AP89 and AP8889. The other HAL-based parameters are set as follows: shortest event length M = 5 , for eHAL-2 the  X  X nclusion criterion X  is 75% of words in an event, and for HAL and eHAL-2, win-dow size L = 8 . Top expansion terms are selected according to the formula: where HAL ( t j | X  q ) is the weight of t j in the com-bined HAL vector  X  q (Bruza and Song, 2002) of original query terms. Mean Average Precision (MAP) is the performance indicator, and t-test (at the level of 0.05) is performed to measure the sta-tistical significance of results.

Table 2 lists the experimental results 5 . It can be observed that all the three HAL-based query expansion methods improve performance over the LM and both eHALs achieve better performance than original HAL, indicating that the incorpora-tion of event information is beneficial. In addition, eHAL-2 leads to better performance than eHAL-1, suggesting that use of linguistic information as a constraint on statistical processing, rather than the focus of extraction, is a more effective strat-egy. The results are still short of those achieved Method AP89 AP8889 WSJ9092 eHAL-1 0.2364 0.2829 0.2409 eHAL-2 0.2427 0.2850 0.2460 Table 2: Performance (MAP) comparison of query expansion using different HALs with RM, but the gap is significantly reduced by incorporating event information here, suggesting this is a promising line of work. In addition, as shown in (Bai et al., 2005), the Information Flow method built upon the original HAL largely out-performed RM. We expect that eHAL would pro-vide an even better basis for Information Flow, but this possibility is yet to be explored.
 As is known, RM is a pure unigram model while HAL methods are dependency-based. They cap-ture different information, hence it is natural to consider if their strengths might complement each other in a combined model. For this purpose, we design the following two schemes: 1. Apply RM to the feedback documents (orig-2. Interpolate the expanded query model by
The MAP comparison between the original RM and these new models are demonstrated in Ta-ble 3 6 . From the first three lines (Scheme 1), we can observe that in most cases the performance generally deteriorates when RM is directly run over the events and the text segments. The event information is more effective to express the infor-mation about the term dependencies while the un-igram RM ignores this information and only takes Method AP89 AP8889 WSJ9092 eRM-1 0.2554 0.3150 0.2555 eRM-2 0.2605 0.3167 0.2626 eHAL-1 0.2600 0.3210 0.2734 eHAL-2 0.2636 0.3191 0.2735 Table 3: Performance (MAP) comparison of query expansion using the combination of RM and term dependencies the occurrence frequencies of individual words into account, which is not well-captured by the events. In contrast, the performance of Scheme 2 is more promising. The three methods outperform the original RM in most cases, but the improve-ment is not significant and it is also observed that there is little difference shown between RM with HAL and eHALs. The phenomenon implies more effective methods may be invented to complement the unigram models with the syntactical and sta-tistical dependency information. The application of original HAL to query expan-sion attempted to incorporate statistical word as-sociation information, but did not take into ac-count the syntactical dependencies and had a high processing cost. By utilising syntactic-semantic knowledge from event modelling of pseudo-relevance feedback documents prior to computing the HAL space, we showed that pro-cessing costs might be reduced through more care-ful selection of word co-occurrences and that per-formance may be enhanced by effectively improv-ing the quality of pseudo-relevance feedback doc-uments. Both methods improved over original HAL query expansion. In addition, interpolation of HAL and RM expansion improved results over those achieved by either method alone.
 This research is funded in part by the UK X  X  Engi-neering and Physical Sciences Research Council, grant number: EP/F014708/2.
