 The use of web servers located on the Internet is constantly increasing, not only for the transmission and reception of text information, but also for all kinds of multimedia applications such as audio and video. Multimedia services using the Internet are rapidly establishing themselves as important applications. In addition, the demand for real-time broadcasting and interactive video services, such as video telephony and video conferencing is also on the increase. the use of end-to-end pointers to reduce congestion during the transmission of multimedia data [1]. In addition, a useful simulator called ENDE [2], which can simulate end-to-end time delay in a single computer, by analyzing the character-istics of the time delay observed when transmitting real-time data over networks has been developed. Moreover, a network simulator called NS-2 [3][4] has also been developed and used in numerous studies. Based on these simulators, various studies have been performed concerning the transmission rate to use in real-time applications and the protection of the packet loss rate [5][6].
 the changes in the transmission rate according to the variation in the round-trip time (RTT) delay and packet loss rate (PLR), which are two important factors to consider in the transmission of multimedia data. The experiment was performed using the TCP-Friendly algorithm. Moreover, in this paper, we propose a real-time multimedia transmission rate prediction algorithm, using both the TCP-Friendly congestion control algorithm and a neural network prediction algorithm [7][8][9]. The proposed neural network prediction algorithm was trained using the data collected by means of the TCP-Friendly algorithm. The model so obtained was validated using data not used in the training process. In addition, the neural network prediction algorithm was applied to an actual system, using the data transmission rate determined by the one-step-ahead round-trip time delay and the packet loss rate. The round-trip time delay and the packet loss rate was determined with respect to a unit of round-trip. In order to confirm that this algorithm provides effective congestion control, it was applied to a real system for one week at a certain hour of the day. Through this experiment, the effectiveness of the proposed algorithm was verified. The existing methods of multimedia transmission can be classified into two dif-ferent categories. Firstly, the method in which the entire file is downloaded from a web server before being processed and, secondly, the method of streaming, in which only a part of the entire file is downloaded before processing begins and processing continues while the rest of the file is being downloaded. The method of streaming is well suited for the real-time broadcasting of audio and video data. cur, mainly because of transmission errors and congestion. In this case, the TCP protocol reduces the transmission rate by applying its own method of conges-tion control. Therefore, if a number of TCP connections having a similar RTT delay share the same channel, then these TCP connections will have to share the available bandwidth equally. The problem of bandwidth distribution has not previously been studied in detail because, in the past, almost all traffic used a TCP based protocol. However, it has now become the most important issue, due to the increasing use of real-time application services such as IP telephony, video conferencing, at the same time as Non-TCP traffic such as audio/video streaming services. The TCP protocol reduces the transmission rate when con-gestion occurs, but applications using the Non-TCP protocol will increase the overall amount of traffic by continuing to transmit at the original transmission rate, because there is no mechanism of interaction between the Non-TCP traffic and the TCP traffic. Therefore, it is necessary for Non-TCP traffic to also have a transmission rate control mechanism that is compatible with that of the TCP protocol. In addition, it is necessary to distribute the available bandwidth, by making the Non-TCP traffic conform to the TCP-Friendly protocol, in order to solve the problem known as TCP-Friendly congestion control.
 based on a TCP model [3][10], in which the average transmission rate over a given period of time can be modeled by considering the operation of the TCP protocol in the steady state. This can be expressed in various ways, depending on the operation of the TCP, but can be basically expressed as Eq. (1).
 size is s , then the transmission rate before the detection of packet loss can be expressed by R = W  X  s RT T , whereas it will become R =0 . 5  X  W  X  s RT T when the size of the window becomes W 2 following the onset of packet loss. Therefore, the average transmission rate for the entire section of the four saw tooth cycles can be expressed by R =0 . 75  X  W  X  s RT T . The loss rate, p , for a single saw tooth, can be calculated from the equations 1 p = W 2 2 + 1 2 W 2 2 and W  X  8 3 p , therefore, the effective transmission rate, R ( t ), for time t can be approximated using the expression shown in Eq. (2) [1].
 In this paper, the RTT and PLR data were collected by means of a test using Eq. (2). An experimental configuration was organized to collect the data to be used in the training and validation of the Neural Network. The server and client were built using two computers operating under the Linux operating system and which were installed at Seoul National University and Chonbuk National University in Korea, respectively.
 method. The initial transmission speed is 100kb/s, and the packet size is 625 bytes, of which 64 bytes are reserved for the probe header. The probe header is attached to the header of the transmission packet, in order to estimate the RTT and PLR. In addition, the probe header includes a storage area used to store numbers so as to keep track of the order in which the packets are transmitted from each processor, as well as the transmission time [1]. When the transmis-sion processor transmits a packet to the receiving-retransmission processor, the receiving-retransmission processor separates the probe header from the received packet and then retransmits it to the RTT-PLR estimation processor after in-serting the packet number and current time in the storage area of the probe header. involving network control in this experiment. The average RTT is about 10.3ms for the condition in which there is no traffic, and the average PLR is about 0.5%. The RTT and PLR rapidly increased when the traffic load increased. The packet transmission test was performed every 30 minutes over a period of one week. A neural network was used to predict the RTT delay and PLR. The training data used for the RTT and PLR were collected by means of a transmission experiment using the TCP-Friendly processing rate produced by the modeling of the TCP Reno congestion control algorithm.
 used. The neural network structure was constructed by applying 20 nodes for the input layer, 8 nodes for the hidden layer, and 1 node for the output layer. The actual transmission experiment was performed several times, in each case for 30 minutes. 70% of the experimental data was used for training and the remaining 30% was used for validation. 4.1 Round-Trip Time Delay for the Actual System Figure 1 shows the predicted actual round-trip time delay produced by the neural network model proposed in this study and the actual round-trip time delay observed in the actual system. As shown in this figure, those data marked by * were collected from the actual system and those marked by  X  represent the prediction data obtained from the neural network. It can be seen that the round-trip time delay was in the range of 20 to 40ms, in the case where the load was applied to the network, while the round-trip time delay in the steady state was about 10ms in the case of the actual system. Moreover, it was also verified that the neural network model has the capability to predict the round-trip time delay. 4.2 Prediction of the Packet Loss Rate Using the Neural Network Figure 2 shows the results of the test involving the packet loss rate. As presented in this figure, those data marked by * represent the packet loss rate that was observed in the actual system, while those marked by  X  represent the prediction data resulting from the neural network. It can be seen that the packet loss rate was in the range of 0 to 0.01% in the steady state and was about 5% in the case where the load was applied to the network. Moreover, it was also verified that the neural network prediction algorithm predicts the packet loss rate. 4.3 Accumulated Available Packets in the System Using the A transmission experiment was performed using the predicted data, followed by the prediction of the one step ahead round-trip time delay and the one step ahead packet loss rate using the neural network and to obtain the packet transmission rate using the predicted data. Figure 3 shows the results of the experiment involving the TCP-Friendly algorithm and of that using the neural network prediction algorithm proposed in this study. The proposed system can control the transmission rate properly according to the conditions of the network load. In addition, it was confirmed that it sends more valid packets than the TCP-Friendly system does. In this paper, we proposed a system that predicts the parameters using a pre-diction algorithm and determined the optimum transmission rate by using these predicted parameters, in order to improve the performance of real-time multime-dia data transmission over the Internet. A real-time multimedia data transmis-sion system using the TCP-Friendly algorithm was constructed to analyze the performance of the proposed system. A neural network was used as a prediction model and the LMBP method was used to train the neural network. In addition, a neural network model, which was obtained by using the collected data from the actual test, was utilized. The performance of the neural network prediction model was verified through the validation process. By using this neural network model, the one-step ahead round-trip time delay and packet loss rate can be pre-dicted, and the transmission rate of the actual system can also be determined by means of these predicted factors. Furthermore, a multimedia data transmis-sion experiment was performed using these factors. The transmission experiment conducted for the actual system shows that the proposed algorithm increases the number of available packets compared with the TCP-Friendly algorithm. Acknowledgements. The authors thank KEPCO (R-2004-B-120) and RRC (KOSEF) (R-12-1998-026-02003) for their financial support.

