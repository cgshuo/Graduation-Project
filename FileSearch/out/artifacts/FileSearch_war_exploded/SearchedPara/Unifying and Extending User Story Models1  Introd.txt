 User Stories ( US ) constitute the main key artifact serving for requirements en-gineering in agile methods; this is particularly the case in eXtreme Programming ( XP ) [6]. US are very operational documents describing user functionalities on a low-level basis. Basically, a US is made to be written in natural language even if initially a few templates have been proposed. With the years, practitioners de-veloped more templates which they used at their best convenience (e.g. [15,13] for formal sources and [10,4,14,16] for informal ones). The US template is struc-tured in the following way: As [the WHO] , I want/want to/need/can/would like [the WHAT] , so that [the WHY] . In other words, US allow inherently to address the three following fundamental elements (called the dimensions in this research) of requirement engineering: WHO wants the functionality , WHAT functionality end-users or stakeholders want the system to provide and the rea-son WHY the end-users or stakeholders need the system for . These dimensions are materialized by a syntax in a US template, like the elements between angle brackets in: As a &lt; role &gt; ,Iwant &lt; goal &gt; so that &lt; benefit &gt; .
With practically no definition (called semantics in the rest of the paper) as-sociated with the elements constituting the US templates, the interpretation is often hazardous. This leads to a need of accuracy, precision and unification. We consequently propose to build a unified model defining a set of US templates. We therefore started fr om frameworks issued of Goal-Oriented Requirements En-gineering ( GORE ). The use of GORE frameworks, inherently high-level, is a deliberate choice of the authors. Indeed, to the best of their knowledge, they include the richest sets of modeling constructs for system analysis. Alternative choices could have been made and the priority among GORE frameworks within the research could have been different leading to build a different model. The aim is, however, not to evaluate each possible unified model but to build one that could allow to associate a single (one option only) syntax/semantic to ev-ery (no lack) dimension of a US template. For this purpose, the unified model is evaluated empirically onto sets of US issued of real life projects.

Finally, we argue that a unified syntax coupled with precise semantics would allow to enhance the potential of these requirements artifacts. Indeed, the use of a well-defined set of non-redundant terms would:  X  reduce communication issues between the agile project stakeholders;  X  reduce scalability issues of US-based agile methods (see [19]). Indeed, by fur- X  ease the querying and reasoning onto US. Figure 1 illustrates the research process. First, the dataset has been built; on that basis we have defined a candidate model which has finally been validated on two real life case studies. These st eps are depicted into this section. 2.1 Building the Dataset Initially, the way of writing US was rather fuzzy; it mostly consisted of a small text of maximum 2 lines to describe some functional expectation or scenario involving the final user. Even if [9] proposed an initial way of writing US, many users of agile methods have been suffering from the lack of guidance in how to write an effective US [19]. Some of them thus proposed their own solutions and plenty of templates used in an ad-hoc manner appeared. In line with this, the research sources that have been taken into account are of two types:  X  academic: which consisted in overviewing the US templates found in  X  X ormal X   X  practice: which consisted in overviewing the US templates found in  X  X nfor-
The aim was to list and basically classify the US templates that are used in practice. No higher importance was g iven to formal sources, even if Table 1 explicitly shows the number of syntaxes issued of both types of sources.
Basic references for agile development a s well as sources found using scientific publications search engines where primarily taken into account. Then, a web search on google 1 allowed us to fill the set of US templates with others issued of the daily use of agile methods practitioners. The search included informal sources like websites, blogs, etc. (i.e. html pages); only sources considered relevant (i.e. referring to a practical use) were taken into account. The search included: (1)  X  X ser Story Template X ; (2)  X  X ser Story X   X   X  X P X ; (3)  X  X ser Story X   X   X  X Xtreme programming X ; (4)  X  X ser Story X   X   X  X gile X ; (5)  X  X gile Requirement X   X   X  X ser Story X . The first ten pages (i.e. 100 links since 10 pages multiplied must be multiplied by 10 sources by page) provided were taken into account. All pages were carefully scrutinized; relevant U S templates were included. We finally in-cluded 20 US templates issued of form al sources and 65 of informal ones 2 ;this constitutes our first research material.
Unfortunately, no semantic description associated with any of the syntax (ex-cept for the Business Value syntax for which we found a vague definition, see section 3.3) was ever found in literature, this made any direct semantic evalua-tion impossible. Nevertheless, in nearly all the cases, examples associated to the proposed US templates were provided. We collected 237 examples; this consti-tutes our second research material (see Section 2.3). 2.2 Descriptive Concepts in User Stories In order to be able to study the relevant concepts within US templates, we first decompose these to keep the syntaxes and their related dimensions only. Such an element is, for the sake of uniformity, characterized as a Descriptive Concept ( D C ) in the present study. Figure 2 shows the D C in the form of a class. When building the dataset, each element that we find in a US template and that relates to one of the 3 dimensions will be an instance of that class. As an example, for instances of the D C class, one for role ,onefor goal and one for benefit .The attribute dimension thus compulsorily takes one of the values WHO (e.g. for role ), WHAT (e.g. for goal )or WHY (e.g. for benefit ) and the attribute syntax takes the syntax found within the dimension. Finally, the attribute semantic will eventually be instantiated later through the use of GORE frameworks. 2.3 Building the Candidate Model Three sets of D C instances can be distinguished: one for the WHO, one for the WHAT and one for the WHY dimension. For each dimension, a table was built including each of the D C instances found and their number of occurrences.
Then, the syntax of each instance of the D C class was associated to a se-mantic issued of GORE, business modelin g or general requirements engineering literature. More precisely, we used the following sources:  X  the i* modeling framework [26], an agent and goal-oriented framework which  X  the KAOS framework [23], a requirements engineering framework based on  X  the Business Process Model Notation fr amework [18], a well-known and in- X  A glossary of requirements engineering terminology [12], which collects, de-
In order to build the model, each instance of the D C class leads to consult these sources in a sequential order. I ndeed, the syntax of each instance was compared to the different syntaxes pro posed in the frameworks. When a match was found between the syntax issued of a US template and one issued of the consulted framework, we proceed ed to a preliminary adoption 4 . This means that the semantic issued of the framework was associated to the D C so that we dispose of a couple syntax/semantic th at can be further evaluated later. We can take the example of the D C associated with the syntax &lt; role &gt; :thei* framework was firstly taken into account. Within this framework, the syntax role was present. A match was thus directly found and the semantic associated to the role in the i* framework was adopted for the D C attribute semantic . If it was not the case, we would have done the same process for the second framework (KAOS), and so on. If finally no match could be established in any of the evoked frameworks, it was left out of the study. This stage is referred to as Syntax Included and Semantic Association in Section 3.
 After the process depicted in the previous paragraph was performed for each D C instance of a particular dimension, each semantic was firstly compared to the other ones of the same dimension in order to evaluate possible redun-dancy/overlap/mismatch. When issues were identified, some of these instances were left out for the semantic evaluation onto US examples. This stage is referred to as Comparison of Associated Semantic in Section 3.

Each remaining D C was then compared to each of the set of US examples (known as second research material ). The goal was to find how many examples could be related to the semantics of each D C to evaluate its relative importance. This stage is referred to as Semantic Evaluation on Examples in Section 3.
The model was built by a senior resea rcher (PhD graduate). After, it was evaluated by a junior and two other senior researchers. Elements that lead to discussions were carefully evaluated and discussed until a consensus was found. 2.4 Validation Once the final model has been built, it has been evaluated onto two sets of US issued of two real-life projects. This has been done by a junior researcher then cross checked by a senior one. We started from the US sets and evaluated to what class of the unified model it belongs in order to determine coverage and completeness. Results are discussed in Section 5. Table 1 summarizes the different syntaxes that we have found for the WHO, WHAT and WHY dimensions. The reader can find between brackets next to each syntax, the respective number of occurrences found in US templates ( number of occurrences found in formal sources + number of occurrences found in informal sources ). The syntaxes in bold are the ones that were associated with a semantic; the other ones were left out of the process of building the candidate model before a semantic was associated. Full rationale for each of these dimensions is given in the rest of this section.
 3.1 The WHO Dimension Syntax Included and Semantic Association. As shown in Table 1, we found six different syntaxes into the WHO dimension. We decided to group User and Type of User into a single instance of the D C class since a User inherently refers to a Type of User through its instantiation. In the same way, we have preliminarily left out the syntaxes System Roles , Persona and  X  X  X  because the number of their instances found was not significant and only supported by informal sources.

Using the method depicted in Section 2.3, the semantics associated to the remaining syntaxes were:  X  Role: A role is an abstract characterization of the behavior of a social actor  X  User: A user is a person who uses the functionality provided by a system  X  Actor: An actor is an active entity that carries out actions to achieve goals Comparison of Associated Semantic. As explained in the research method, the semantics we have associated to the syntax of Role , User and Actor have been compared to each other. We first empha size that the semantics associated to Role and Actor are issued of the i* framework and, as such, can thus be evaluated complementarily. Concretely, i* include s both concepts because the framework distinguishes Actors at a high-level of abstraction and, as mentioned in their definition, Roles are used into a specific context. Concretely, this high-level of abstraction is not present in the WHO enti ties into the US examples that we have studied and each of them always refer to a specific context. Consequently, none instances would be qualified as an Actor but rather as a Role with respect to the semantic issued of i*. The D C with syntax Actor is thus judged non-relevant and eliminated from the candidates to be integrated in the unified model. Semantic Evaluation on Examples. The semantics associated to Role and User were further compared to the list of examples built-up as a research dataset. In every of the studied US exampl es, we found either the word User used as example (so not instance of D C ) within the WHO dimension, or a specific role played by a user of the system. At this stage, User can thus be the syntax of an instance of the D C class or the syntax of a US example. This is misleading so that we suggest to only keep the instance of the D C class associated to the syntax Role ;thesyntax User can be used in a US but only as an instance of Role . Figure 3 thus only owns one class related to the WHO dimension; the Role . 3.2 The WHAT Dimension Syntax Included and Semantic Association. Something was directly left out of the study. Indeed, even if the number of occurrences is high (3 + 10), no semantic could be found in the source frameworks and it is inherently too vague/imprecise/broad to be taken int o account. No semantic could be associ-ated to Action and Function . The only semantic we found for Action ( ... an auxiliary operation associated with a state transition [23]) is in the context of UML [17] state chart diagrams, which are design diagrams documenting the states of the object so non relevant for the present purpose. Similarly, we also only found a semantic related to Function in the context of object-oriented de-sign which was stated as non relevant for the present context. They were thus left out before evaluation. No direct semantic for Desire was found into the envisaged frameworks, we nevertheless can point to the Belief-Desire-Intention ( BDI ) model [11] for a semantic related to Desire . The BDI paradigm neverthe-less refers to the design stage of an agent paradigm and, when integrated with i* elements, the desire explicitly refers to an actor goal. So the concept is redundant with the goal concept and located specifically into a design context; we have thus decided to leave it out of the evaluation. Finally, we have preliminarily left out the syntaxes Outcome , Behavior , What and  X  X  X  because the number of their occurrences was not significant (1 or 2 informal sources only).Using the method depicted in section 2.3, the semantics asso ciated to the remaining syntaxes were:  X  Goal: we decided to include semantics of hard-and soft-goals to evaluate the  X  Feature: A feature is a delimitable characteristic of a system that provides  X  Functionality: Functionalities are the capabilities of a system as stated by its  X  Capability: A capability represents the ability of an actor to define, choose,  X  Task: A task specifies a particular way of attaining a goal [26];  X  Activity: An activity represents work that a company or organization per-Comparison of Associated Semantic. The Feature and Functionality could be compared since they both refer to properties (characteristic or capability of a system). This similarity could be problematic. We first of all decided to look for enhancements in the semantics of Feature to gain confidence with interpre-tation/identification onto the set of examples. We notably consulted literature about Feature-Oriented Development. [5] defines a feature as a unit of function-ality of a software system that satisfies a requirement, represents a design deci-sion, and provides a potential configuration option .The Feature thus is unique when compared to the other semantics b ecause it refers to part of the system that satisfies a functional or non-functional requirement [7] and thus inherently shapes part of the structure of the system-to-be. Due to the perceived similar-ity in semantic between the concepts of Feature and Functionality , we decided to only keep one. We have thus chosen to integrate the Feature as a candidate D C because of the higher presence of th e term in the US templates and in the context of agile development in general and the most precise semantics we have.
Then we can legitimately be willing to compare the Capability and Task since both semantics are issued from the i*/Tropos framework and both point, in the chosen semantic, to the achievement of a goal. When comparing them, one can notice that they differ in the way they relate to a subject. While the Task is a particular way of attaining the Goal not related to any subject, the Capability explicitly refers to an ability ( define, choose and execute a plan ) of a particular actor to fulfill a Goal . Inherently, [26] defines the Capability on a design level rather than on an analysis one. We will nevertheless keep it into the evaluation in order to consider its relevance in the use of US where elements are often expressed at the frontier between analysis and design.

Finally, the Task and Activity must be semantically compared too because the application of these semantics can be conflicting. Within the definition of an Activity , we find an explicit reference to the Task syntax. In BPMN, the Task refers to some atomic behavior which is not compulsorily the case with i*. Both the Task and the Activity refer to behavior in order to achieve a higher level element known as business process for BPMN and Goal for the i* framework. We believe that these elements can thus be seen as overlapping but do not use the same terminology since they belong to different modeling paradigms. Since we give higher priority to i*, we decide to eliminate the Activity from the candidate D C instances and only keep the Task as candidate.
 Semantic Evaluation on Examples. Empirically, we were able to find oc-currences of each of the D C instances selected within the studied examples.
Following the used semantics, there is nevertheless an over representation of the Capability (88% of the cases). Indeed, in a lot of cases, the US is expressed in its WHAT dimension as a capability of a role instance.

We distinguish the Task from the Capability through the way they are ex-pressed; the Task is expressed like a general intention constraining the system while the Capability is expressed as a direct system offering. The Task should thus be kept in order to be able to specify a way of acting to achieve a Goal ;it can, in a sense, be seen as a way of constrai ning the system-to-be for achieving a goal during the requirements stage. For example, the US As ..., I am required to log into the system so that ... represents a Task for the WHAT dimension because it is expressed in the form of a constraint on the system, while As a ..., I can start a new game represents a Capability for the same dimension because it is expressed in a more direct manner.

Instances of the Hard-goal are also present, for example As a borrower, I want to pay off my loan . It nevertheless always concer ns an  X  X pic X  US i.e. US that need to be refined. Similarly, occurrences of the Soft-goal in the WHAT dimension are also present but are even more rare; we for example find As a player, I want nice looking background art that integrates with the game boards . This shows that elements issued of GORE frameworks are envisaged in the context of US and we can make further use of it in the context of agile development. We finally discuss the Feature element. Examples such as Search for ... , Undo/redo move , ... are sometimes cons idered as instances of Feature in the studied US but we do not believe this is in line with the semantic that we have associated to the Feature . It is rather aligned with the one that we have asso-ciated to Capability .A Feature is indeed, according to our semantics, a broader aspect of the system requiring to fulfill the 3 conditions set up in [5]. The US As a salesman I want car to be equipped with GPS so that I can easily set my direction could be considered as clearly integrating a Feature into the WHAT dimension. We nevertheless point to the interpretation as a Goal and leave the Feature concept not as a D C instance but rather an element that can be used at higher level to group US around a central theme. This way of doing is in line with the use of the Feature element in the Scrum method. 3.3 The WHY Dimension Syntax Included and Semantic Association. Some information was found into informal literature about agile development related to the syntax Business Value . [1] indeed points out that business value is a concept that describes the relative worth of any development effort to the business. Business value is of-ten unquantifiable, but often relates to money ... The relative business value of stories can generally be determined by asking questions to get to the root value proposition of each . We do not really consider this as semantic for evaluation since it is more about the characteristics of Business Value than the description of how Business Value could be expressed in itself. It inherently refers to an umbrella term of a goal or objective to be attained. No Business Value syntax relating to semantics was found in the input frameworks. As we will see in the rest of this section, we do have a set of semantics directly referring to objectives to be attained that are defined in a much more precise manner. Even if the representation of the syntax is very high into the studied templates, we believe that leaving it out of the model to favor precise semantics is the best option.
No semantic associated to the syntax Benefit and Reason was found in the envisaged frameworks. For the same reason Business Value was left out, we decided not to consider them. We have also preliminarily left out the syntaxes Achievement , Rational , Desire , Outcome , Result and  X  X  X  because the number of their instances found was not significant.

Using the method depicted in section 2 .3, the semantics associated to the remaining syntax, the goal which includes both the Hard-goal and the Soft-goal , are the same as in the WHAT dimension.
 Comparison of Associated Semantic. The analysis of the WHY dimension will thus firstly be limited to the evaluation of examples with respect to i* hard-goal and soft-goal definitions.
 Semantic Evaluation on Examples. On the evaluation, most of the examples could not be considered as goals because, even if they are expressed as objectives, they are onto a too low level to be considered as (abstract) i* goals. We indeed could only find alignment with the Hard-goal and Soft-goal semantics on 53% of the cases, leaving the res t without association.

We thus need the inclusion of other D C instances to cover the WHY di-mension. Nevertheless, as evoked earlier in this Section, no satisfying instance was found among the collected syntaxes; we thus suggest relaxing the dimension characteristic of the Task element so that it can be used into the WHY dimen-sion. Indeed, we intuitively believe that the semantics associated to the Task element would fit most of the examples found into the WHY dimension because they are expressed as a requisite on a lower level basis. If we take the following example ... so that I know my recent deposit went through . We assume that it cannot be considered as a Hard-goal because it is expressed on a too low level basis, a corresponding Hard-goal could be for example Make deposits while knowing that the recent deposit went through is only a way of attaining the higher-level Hard-goal (could be to attain a soft-goal too). By including the Task element into the WHY dimension we were able to cover all of the examples. Figure 3 represents the instances of the D C class that have been selected on the basis of the previous study to be part of the unified model.

Each instance has become a class itself meant to be instantiated within the re-quirements gathering stage. The links between the classes represent the possible links between the elements into a US template issued of the model.

The link between the classes conceptua lly represents the link from one di-mension to the other. Concretely, the unidirectional association from the Role to one of the class Capability , Task or Goal implies that the target class in-stantiates an element of the WHAT dimension (always tagged as wants/wants to/needs/can/would like in the model). Then, the unidirectional association from one of these classes instantiating the WHAT dimension to one of the classes in-stantiating the WHY dimension (always tagged as so that into the model) implies that the target class eventually (0 as minimal cardinality) instantiates an ele-ment of the WHY dimension. An US template we can derive from the model is:
Let us finally note that the Goal class is represented as an interface because it cannot be instantiated as such; it is either a Hard Goal ,eithera Soft Goal . As shown within the research, the instance of Hard Goal and Soft Goal can be related to the WHAT or WHY dimensions. Also, if a Hard Goal is related to the WHAT dimension, it can be linked to a Soft Goal in the WHY dimension, not if the WHAT dimension is a Soft Goal . This because it has never been found in any of the examples so we believe it is impossible to have a Soft Goal as desired state to fulfill a Hard Goal . The unified US model has been applied to two different case studies in order to evaluate the coverage  X  i.e. Is each of the elements required?  X  and completeness  X  i.e. Are more elements required?  X  of the model.
 The first case study is the development of an application to ease carpooling. Carpooling is the sharing of car journeys so that more than one person travels into the car; it takes increasing importance to save gas, reduce traffic, save driving time and control pollution. ClubCar is a multi-channel application available as an Android application, SMS service and IVR system. Users of ClubCar are riders and/or drivers, they can register by SMS, voice or through the Android app. Roughly speaking the software allows drivers to propose rides and submit their details with dates , times , sources and destinations while riders can search for available rides [21]. The project included a total of 28 US.

The second case study is called CalCent ral has been developed by the Uni-versity of Berkeley. CalCentral ... is an online system that delivers a unified and personalized experience to students, faculty and staff, facilitating the nav-igation of campus resources, deliverin g personal notifications from key campus systems, and supporting learning and the academic experience [3]. US are used as requirement artefacts in the project; the list of 95 US that is available at [2].
Figure 4 summarizes results of the application of the conceptual model on the two case studies. It notably shows that each of the concepts included into the model has been required to characterize ea ch of the US of the cases (even if the Task con-cept has not been required in the WHY dime nsion of the carpooling case). If we consider the two case studies, we thus hav e full coverage. In other words, each of the elements included in the unified model are necessary for concrete representa-tion of the US found in these two real life projects. This means that, as far as these two projects are concerned, no element is s uperfluous. Similarly, all of the US of the case studies taken into account could be covered by using the set of elements con-sidered in our model. We thus also have full completeness. This concretely means that we are able to interpret each US of th ese projects with the set of US templates that we can derive from our unified model. As such, the US is thus associated with a well defined structure.

Finally, the reader should note that the WHY dimension was not present in each of the US; it was thus only evaluated when it was present in the US. One may argue that the choice made in the semantics was arbitrary. The choice has been made to start from GORE frameworks because these are the ones proposing the most advanced concepts fo r requirements representation and have a significant supporting community. Similarly, one may argue that each couple syntax/semantic of each of the frameworks used as source do form a whole and that we can hardly take a concept from one method and another from another. That is the reason why we proceeded sequ entially and gave priority to the best ranked source. We nevertheless admit that the choices of the used framework and their respective priority could have b een different leading to some differences in the proposed model and associated semantic.

The number of collected examples fo r each US template was unequal which could have biased the relative importance of each of the concepts found. We have always been aware of this reality but we do not consider it as an issue since we were studying the whole coverage of the model. Moreover, the validation is aimed to partially solve this issue by showing such a relative importance of the D C instances onto real life case studies.

One may question about the level of abstraction of the US expressed in agile projects and question whether i* hard-and soft-goals semantics could be suitable to characterize elements in US by nature op erationally oriented. The results that have been presented show that high-leve l elements are in a few occasions present notably in the form of Epic US. [19] highlights the difficulties of Agile practitioners to deal with a project in-volving a huge number of US for implementing the information system of an hospital. Indeed, when dealing with about 800 US, the hierarchy was rather difficult to determine and the big picture of the system while performing the planning game. Scalability is thus definitely an issue in agile projects with US as poor requirements engineering artifacts. He decided to introduce the US tem-plate  X  As [User] ,Iwant [Task] , so that [Goal]  X  in order to define a hierarchy in the form of Goal, Task and US but with no semantic associated.

Series of papers have proposed enhancements to handle the requirements en-gineering process into agile software de velopment, most of them focus on scal-ability issues and granularity of elements; however, to the best of our knowlege none has proposed a unified model with associated semantics. [15,24,22] iden-tified issues in the usage of backlog items alone. Backlog items are US or non US-based but still a text based requirements sets. It does indeed not allow to represent the business strategy (or the long-term business goals). They high-light the project should thus include not only the backlog items, but also Epics, Themes, Visions. The backlog items are t he lowest requirement items and respec-tively Epic, Themes and Vision are elements representing the software problem through higher level entities. They how ever did not provide any explanation on how to map the blacklog items to the upper levels. Various syntaxes with no associated semantics have made the use of US ad-hoc and mostly operational only. This has lead to several problems in the use of agile methods notably in large development projects. This paper has provided a set of concepts with syntax and associated semantic for a more precise use of US. The objective is to be able to address large r projects with the same requirements artifacts and to include the overall benefits of GORE into agile methods use. The use of the framework could indeed help  X  through hierarchization and stepwise refinement  X  to enhance scalability possibilities of agile methods. Refinement of Goals using Tasks and Capabilities and grouping around Features , the project can be divided easier into loosely coupl ed parts that can be developed rather independently within balanced iterations.

Future work includes the identification of representational gaps overcome by practitioners in US modeling and overviewing how our framework and GORE in general could address these issues. In parallel, the evaluation of the ability of practitioners to use the proposed framework instead of their usual templates will also be evaluated. A Computer Aided Software Engineering (CASE)-tool is currently under development and will be used to support experiments.
