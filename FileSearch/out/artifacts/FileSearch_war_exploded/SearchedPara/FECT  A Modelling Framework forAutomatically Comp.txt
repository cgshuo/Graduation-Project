 Web service is a kind of self-contained, Internet-enabled applications capable not only of performing activities on its own, but also possessing the ability to engage other Web services in order to complete higher-order activities. Seamless composition of Web services has enormous potential in streamlining business-to-business application integration [1]. But there are many inherent difficulties in this new paradigm of application develop ment. Services distributed on Internet are usually developed by different organizations and described by different terms and in different ways. That makes the understanding and communication among them be difficult. As a result, the ability to dynamically and automatically dis-cover, understand and compose heterogeneous Web services becomes a tough problem.
 first effort is about the standards of Web service description, which are trying to provide sufficient information to enable automated discovery, composition, as well as execution. WSDL [2] is an XML format for describing services as a set of endpoints or ports operating on messages containing either document-oriented or procedure-oriented information. The operations and messages are described abstractly and bound to a concrete network protocol(SOAP [3], HTTP,etc.). WSDL rests on the communication level description of the messages and pro-tocols used by a Web service. It defines and formats query interactions with a service, but doesn X  X  provide a model for the semantics of such exchanges. OWL-S [4] takes the initiative to provide an ontology markup language expressive enough to semantically represent capabilities and properties of Web services. It provides three essential types of knowledge, i.e. ServiceProfile, ServiceModel , and ServiceGrounding , for a Web service. OWL-S focuses on the representation of what the service does rather than where to find the service.
 BPEL4WS [5] models a Web service as a business process from the industrial view. It defines the interaction proto cols between a process and its partners; and also defines an inter-operable integration model that should facilitate the expansion of automated processes. As for formalization, Petri-net [6] and process algebra (e.g. CCS [7]) also contribute some tentative work to the composition of services.
 composition of Web services still face bi g challenges. All of them model the capa-bilities of Web services only by input/output transformations. However, the se-mantic meaning of an application software is in fact the effect it can cause on the environment which the software interacts with [8][9][10]. In other words, the re-quirements for the software(i.e. a Web ser vice here) are located in the reality, and in the environment. The relationship among environment( E ),requirements( R ) and software( S ) has been revealed as an entailment: That means that if a Web service( S ) is installed in the environment described by E , then the environment will exhibit the properties described in R . Although the relationship is not an implication,it captures the essence that R can be satisfied if a Web service( S ) is installed in the environment( E ). From this sense, the environment and the effect on it caused by the Web service should be two core aspects to catch the meanings of the Web service.
 posing Web services automatically. This approach is based on the rationales that the semantics of Web services can be grounded in the environment which Web services are situated in and interact with. The rest of this paper is or-ganized as follows. Section 2 introduces the architecture of our FECT (Frame-work based on Environment, Capabilities and behavior Traces) approach. The description of Web services based on environment ontology and interaction on-tology in FECT is defined in section 3. Section 4 designs the mechanism for the selection and composition of Web services and illustrates the whole pro-cess by a trial case. Section 5 reviews s ome related work and concludes this paper. The overall architecture of the FECT is shown in Figure 1. The main components are the Ontology Base, the Service Registry and the FECT Server.
 and constraints for the environments and interactions used in particular prob-lem domains. It is a sharable conceptualization to support the recognition and understanding of existing published services as well as the emergent request of new Web services.
 Web services. A service representation i n the Registry contains a pointer to the provider of the service and a port where to access the service like in UDDI[11]. Furthermore, it also includes the declar ation on the effect, i.e. the changes of the environment caused by the service, an d interaction behavior traces with the environments. Web services can be pub lished and recognized only if they fol-low the standards of the Registry. The detailed description of services will be discussed in section 3.
 service composer. The requirements extractor elicits the external requirements, models them by using the automated modelling techniques[12][13], and publishes the models on Internet as desired Web ser vices based on the domain ontologies. Once the desired service-models occur, those autonomous Web services which have the ability to complete the tasks or sub-tasks of the requirements models, volunteer to be the candidates. All of these candidates construct a standby service base. Then the service composer combines some services in the base to form short-term partnerships in order to satisfy the emergent requirements. Appropriate description of the capability is the prerequisite of understanding requirements as well as Web services. Most of the current work in this field only depend on the description in syntax level. We argue that adaptive and intelligent discovery and composition of Web services can be achieved only after the meaning of the requirements has been well understood and the semantic model of Web services has been built.
 the  X  X nvironment X  the Web services exis t in,  X  X ffects X  of the environment caused by the Web services and the  X  X nteracti ons X  of the Web services with the envi-ronment, to capture the meanings of th e Web services and the requirements. For a Web service, its environment contai ns the controllable resources which the service visits and acts on, and the incontrollable outer triggers from people, other autonomous Web services, time, etc. The published capabilities of the Web services and the desired capabilities of the requirements are designated on two ontologies, i.e. the domain environment ontology and the environment interac-tion ontology. These ontologies bring the semantic meanings into the capability description. 3.1 Environment Ontology and Interaction Ontology The incontrollable triggers are uncertain because of the reactivity of the Web services and the instability of the Internet platform. The environment ontology can be represented in a hierarchy of cont rollable resources together with the effects on them. Figure 2 shows the top level of the resources in the environment ontology of the Web sale domain.
 tributes to describe itself. These attributes are divided into two groups: the static attributes, i.e. their values are fixed once the attributes are instantiated, and the dynamic attributes, i.e. their values are changeable along different situ-ations. We call the static attributes the  X  X nformation X  of the resource( X  X nfo X  for short) and call the dynamic attributes the  X  X tates X  of the resource. We use the state transition graph to stipulate the permitted state changes. All the possible state changes by a Web service just reflect its capabilities. For example, Figure 3 is a part of resource descriptions, in which, book is a kind of resources in the Internet-based book-selling domain.
 information and managing the product X  X  state transitions. In this sense, the interaction ontology is designed to speci fy the interaction between the services and their environments. We assume that an interaction be an atomic behavior. Therefore a sequence of interactions ca n implement a macro-level or worthy to be observed behavior, denoted as  X  X unction X  in the paper. Table 1 shows a fraction of the associations among the concepts in the interaction ontology.
 3.2 Behavior Trace Besides environments, another feature of FECT is viewing each service (or each piece of requirements) as a process wit h some kind of interaction behaviors. CSP [14] expresses a process as a finite sequence of symbols recording the events in which the process has engaged up to some moment in time. The same idea is also suitable to the description of the i nteraction sequences of Web services. Definition 1. ( Behavior Trace ) A sequence &lt;x 1 ,x 2 ,  X  X  X  ,x n &gt; is called a behavior trace of a service if x 1 ,x 2 ,  X  X  X  ,x n form a behavior sequence in the in-teraction process.
 interaction  X  1 or a single interaction transferring information from the service to its environment or from its environment to the services. Formally, where P is a behavior concept in the interaction ontology and r is the resource operated by P .
 Example 1. The trace for ATM verifying the validity of credit cards can be denoted as: &lt; ask(password),  X  , get(password) &gt; .
 relations among them. These operations are a bit different from those in CSP. Definition 2. ( Catenation )Let X = &lt;x 1 ,x 2 ,  X  X  X  ,x n &gt; and Y = &lt;y 1 ,y 2 ,  X  X  X  ,y is called catenation of X and Y , which means that X takes place before Y . Definition 3. ( Trace Ordering  X  )Let X and Y be two behavior traces, X  X  Y if  X  Z = &lt;z 1 ,z 2 ,  X  X  X  ,z l &gt; , such that X Z = Y .
 and transitive.
 Definition 4. ( Behavior Ordering ) Let behaviors X = &lt;x 1 ,x 2 ,  X  X  X  ,x n &gt; y j takes place before x i .
 Definition 5. ( General Catenation )Let X = &lt;x 1 ,  X  X  X  ,x n &gt; and Y = &lt; y ,  X  X  X  ,y m &gt; be two behavior traces, there exists a group of behavior orderings in which the smallest index of x is denoted as j k 0 and corresponding index of y is i k 0 . Then the general catenation of X and Y is defined as follows: X Y = It can be used widely in composing Web services. 3.3 Description Framework It is time to give descriptions of the services as well as the requests. In order to facility the matchmaking, we adopt the following coincident description elements.  X  Resource , the controllable environment which the service interact with. It  X  Effect , the transitions of the resour ce states caused by the service.  X  Action , the interaction sequences of th e service with its environment.  X  Function , worthy to be observed capability of the service, which is imple-fects on the environment and interactions with the environment. The published services show their information by the following four-slot frame.
 tion . The requirement is modelled as a group of sub-services in terms of goals, tasks, etc. and published onto Inter net. We term these sub-services the desired services because they might be the best solution we expect for the current re-quirements. The desired services ar e described with a three-slot frame( Res, Ef-fect, Func ).
 WSDL interface and SOAP protocol in order to emphasize the semantic repre-sentation of the Web service. This section uses a meaningful example, i.e. book-selling on Internet, to illustrate the four-step procedure of discoveri ng and composing Web services in FECT. Step 1: Extract Requirements from the Real World Suppose that a request service T , to build and manage a Web-based bookstore, has been put forward in the following form. Step 2: Model the Requirements and Publish Them on Internet After getting the request, the FECT server models it as three desired sub-services by the role-based modelling techniques[13]: user-manager, book-manager and order-manager . It then publishes them as the desired services in XML style. Step 3: Select the Competent Ones from the Volunteer Services As autonomous softwares, once recognizing the newly published desired services, the Web services decide whether they can match the descriptions of the desired services and whether they are willing to join in as members according to the rules of themselves. At the same time, the FECT server has also a group of rules to evaluate whether the desired services and the volunteer services are suited. It selects those competent ones as candidates to form the Standby Services Base. is competent for s 2 ? Here we give the following three qualifications: 1. If there exist r  X  s 2 .Res and r  X  s 1 .Res such that the following statements 2. s 1 and s 2 have some effects in common, i.e. s 1 .Effect  X  s 2 .Effect =  X  3. For any interaction fp 1  X  s 1 .F unc ,thereexists fp 2  X  s 2 .F unc , such that at 4. For any trace FP 1  X  s 1 .F unc ,  X  FP 2  X  s 2 .F unc , such that FP 1 = FP 2 . According to the above judgement standa rds, the services who satisfy 1, 2 and at least one of 3,4 are regarded as candidates. FECT found the following suitable services for the book-selling example.
 Step 4: Compose the Chosen Services Now, suppose that Standby Services Base contains { WS 1 ,WS 2 ,  X  X  X  ,WS m } . Whether they can cooperate with each o ther to satisfy the requirement? The composition of services can be r egarded as a rotative process: (1) select two composable services WS i and WS j and compose them as a new (2) update the Standby Services Base by replacing WS i and WS j with WS . processes to implement the requirements together.
 duce  X  to denote the composition operators of resources, effects, actions and even Web services. are listed in the following. Let C be an arbitrary service. Tr ( C ): set of behavior traces of service C ; Beh ( Tr ( C ))): set of single behaviors of Tr ( C ); X \ x :trace after removing behavior x from X ; h ( X ): head element of trace X ; H ( Tr ( C )) =  X  h ( X ) where X  X  Tr ( C ); Re ( C ): set of resources operated by C ;( C : r.attr ): attributes of r operated by C ; P ( r ): single behavior from the interaction ontol-ogy on r , P is a set of P ; Pre ( P ( r )): state of r before being operated by P ; Post ( P ( r )): state of r after being operated by P ; PRE ( P )=  X  Pre ( P )where P  X  X  ; T ( r.state )=( v transition sequences of state s , beginning with v ( s )andwithoutanyloops;ST: set of resource states; SS ( ST )=  X  ss ( v ( s )) where v ( s )  X  ST ;+:appendasingle behavior to the behavior orderings.
 the two services A and B . It provides an automatically composition way of Web services driven by the final behavior traces( Tr ).
 Algorithm 1. (Model the composition of Web services) UserManager001 for transferring user X  X  information; OrderManager001 can be integrated with BookManager001 for transferring book.info and order.state while UserManager001 and BookManager001 cooperate concurrently and run sever-ally. Figure 4 shows the composition result of the three Web services. Apart from DAML-S and BPEL4WS, there are many other schools in the field of composing Web services. WSCI [15] provides mechanisms for describing how Web services can be assembled to partici pate in the shared business processes. EFlow [16] models a composite service by the graph that defines the order of execution among the nodes in the process. The graph is created manually and updated dynamically. Self-Serv [17] develops a relatively complete but a bit fuzzy middle-ware infrastructure for the co mposition of Web services. IRS-II [18], a framework and implemented infrastructure, bridges requirements and Web services by mapping the task models and the PSMs(Problems Solving Methods). However, all of these thoughts are absorbed in the composition at the execution level.
 based on domain ontology and behavior trace. Compared with the related work, FECT has its own significant features. It is the first try to make the services self-described by using the effect on their environments and the interaction traces. In nature, FECT introduces a bottom-up and automated composition process of Web services via the combination of behav ior traces based on domain ontologies. At this stage, many further works are needed for improving FECT, including establishing meaningful meta-ontology, formalizing the service description, and developing the verification me thod of composite services.

