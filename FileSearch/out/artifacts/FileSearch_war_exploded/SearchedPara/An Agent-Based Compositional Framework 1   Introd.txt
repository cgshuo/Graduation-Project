 The execution of distributed applications, in general, and Web services, in particular, requires coordination. In the process management approaches, this has seen the development of compositional languages for workflow management, such as BPEL4WS. The underlying models are relatively efficient and their behaviour is predictable. Interactions take place in a we ll-defined and stable environment, with clearly specified components; coordination is by workflow management. They implement a static binding policy, and operate at the syntactic level. In Semantic Web technologies, on the other hand, the aim is to go beyond mere interoperation towards increased automation. Of importance in this context is the creation of semantically rich entities that can display intelligent behaviour and engage in meaningful negotiation [1]. are complementary and can be successfully integrated by adding semantics to the composition process of Web services [2]. One key feature of this work of integration integration, wrappers were used to make Web services behave like agents [3]. The work presented in this paper is concerned with the development of a framework based on a symbiotic relationship between agents and Web services, within a BPEL4WS platform. The aim is to reconcile the two forms of coordination, so that Web services can be composed, discovered dynamically, reasoned upon and executed efficiently by workflow management. Web service composition. Section 3 gives an introduction to Semantic Web technologies and agents. Section 4 presents a conceptual view of the proposed framework. Section 5 deals with the implementation of the system. Section 6 puts the framework in context, and Section 7 concludes the paper. One consequence of the decoupling of ownership of software from its use in Web services is that the binding of services can be performed dynamically. Web services are further enhanced by the introduction of formalisms for composing them into new Web services, which can be discovered and invoked in response to user requirements [4]. BPEL4WS is a workflow-based composition language for describing interactions of Web services as business processes [5]. A new composite Web service can be generated from the aggregation of other Web services. Its interface can be described as a set of WSDL PortTypes , in the same manner as for atomic Web services. BPEL4WS has, however, some limitations, in particular its centralised workflow enactment and the fact that Web services must be known and defined a priori [6]. The main criticism levelled at these technologies is that they operate at the syntactic level, are implementation focused and require human intervention at various stages [7]. In contrast, the Semantic Web technologies underline the fact that the drive towards more automation and meaningful interaction between Web services requires greater semantic content in the descriptions. The semantic gap between XML-based constructs and agents can be bridged by use of Semantic Web technologies, such as OWL-S [8]. The aim of the Semantic Web initiative is to provide technologies that will enable heterogeneous systems to collaborate in the execution of an activity. For Web services description, the introduction of OWL-S is a significant factor in matching service providers and service requestors [9]. OWL-S is an ontology for providing richer Web service description, and has three components: 1. ServiceProfile: describes what the service does, its inputs and outputs and its preconditions and effects (IOPE); this is equivalent to UDDI content. 2. ServiceModel: describes how the service works (control and dataflow in its use). 
This is similar to BPEL4WS. 3. ServiceGrounding: describes how the service is implemented and provides a mapping from OWL-S to WSDL. environment defined by OWL-S ontologies [11]. These agents hold beliefs (B), have goals (D) and use Intentions/plans (I) to achieve their goals. An agent can be generated from an OWL-S structures. The ServiceProfile in OWL-S maps to an agent X  X  beliefs (B). The ServiceModel is mapped to a set of intentions associated with plans (I). Preconditions and effects from the ServiceProfile will translate into conditions and effects for the BDI plan. The desire (D) is specified by additional functionality in conjunction with the specification of the ServiceProfile. In essence, the ServiceProfile and the ServiceModel in OWL-S provide the semantics, while the Service Grounding is used to generate the interface signatures. The framework is defined at two levels: the specification of compositions and enactment of the process. The first leve l concerns the composition process and introduces virtual Web services (VWS) as potential partners, alongside ordinary, concrete Web services. Virtual Web services decouple the composition process from the binding of Web services. A virtual Web service specifies its input and output requirements and associates itself with a nominal PortType ; its is used in the composition in the same manner as an ordinary Web service. Composition within this framework involves incorporating concrete Web services when known and statically bound, and virtual Web services when unknown and to be dynamically bound. enactment of the BPEL4WS process. This requires a mechanism for implementing late or dynamic binding. This form of binding is performed by an agent, which operates on the high-level semantics provided by OWL-S. At design time, two stages are required in order to generate an agent. A VWS, mainly identified by its input/output (I/O), is first augmented with richer semantics provided by OWL-S; the VWS is now endowed with IOPE properties. A BDI agent is subsequently generated from the OWL-S description. The agent obtains the semantic description and combines it with its reasoning mechanism. Once the agent is created from the OWL-S structures it acts as a proxy for the VWS; the OWL-S description is kept for documentation and reasoning purposes. The role of this agent is akin to that of a broker, since it takes requests from a VWS, performs the necessary matchmaking tasks, and then invokes the corresponding Web service on behalf of the VWS. The implementation involves the provision of an appropriate structure for the VWS, a mechanism for generating an agent from an OWL-S description and a specification of the interaction between the virtual Web service and the agent. A VWS includes operators that trigger events in the agent when it receives the request from the BPWS4J engine, or forwards an input to BPWS4J when the agent relays the required input from other agents or Web services. The VWS contains only interfaces to agents. agent was designed, with two elementary functions: one for listening to events triggered by a VWS, and the other one for passing the response from other agents to the VWS. The required input and output must be explicitly described in the agent. The template agent also includes a number of generic coordination protocols such as contract net, English auction, reverse auction etc. A matchmaking mechanism is required for discovering appropriate Web services, according to syntactic signatures and semantic requirements of the composition process. The auction coordination protocol is used to coordinate the selection process. architectural framework presented above. The system, SOA (Service-Oriented Agent) 1.2 studio [12] includes a template for creating VWS and a template for creating agents ( see Figure 1). A GUI was designed so that users can describe semantics of Web services and incorporate OWL-S descriptions. JAXRPC 1.3 and Tomcat are used to support the Web services. For composition the IBM BPWS4J 2.1 engine and BPEL4WS Editor Eclipse plug-in provide an environment for creating and interpreting workflows. used for reasoning and communication, while OWL JessKB [13] provides the reasoning capability over OWL-S profiles in the agent. Once the users specify the required information, the studio allows the generation and compilation of code to take place in the same environment. Figure 1 show a GUI provided by SOA for inputting the ServiceProfile information in OWL-S. The user can also specify the ServiceGrounding profile, which can be stored as a project; essential Java code can then be generated, compiled and executed. The SOA creates agents and deploys them, as shown in Figure 2.
 agent-based Web services, usability, as a criterion for evaluation, acquires special significance. Users can take advantage of the templates that the system provides for the creation of agents and their coordination. They can easily enhance Web services with semantics through a user friendly GUI. The system combines input from users and templates and generates the necessary code. This can reduce design time and ensure consistency. In this section an attempt is made at putting the proposed framework in context, by considering two approaches to composition. In [6], the rationale is to move away from the rigidity of workflow enactment of BPEL4WS/BPWS4J to the decentralised and flexible mode of coordination of multi-agent systems. The work is aimed at producing a multi-agent enactment from BPEL4WS composition. This approach offers flexibility and can lead to the optimised use of resources. Its main drawback, however, is the added complexity entailed by a transition from one domain of execution to another. Closer to the work described in this paper is the model presented in [14] where BPEL4WS is enhanced by Semantic Web technologies as a means of overcoming the limitations of BPWS4J. BPEL4WS is extended with a Semantic Discovery Service (SDS), which acts as a proxy between BPWS4J and the potential partners to be located and selected dynamically. All requests to previously selected partners are directed to the SDS, which implements a late-binding policy. This model preserves the original BPEL4WS structure. flexibility and customisation because each virtual Web service is associated with an agent. The decentralisation of the discovery process makes the system more reliable and avoids the single point of failure of the SDS. These features may, however, be resources. The model may require a heavier human intervention than the SDS-based model, because of the semantic enrichment. Both models maintain, however, the original composition structure. The approach promoted by the framework allows for an incremental development of composition and combines the predictability of BPEL4WS enactment with the versatility of Semantic Web technologies. The requirement for the provision of mechanisms to support a two-level mode of coordination has led to the development of a hybrid system that capitalises on the efficiency afforded by compositional BPEL4WS platform and on the versatility of Semantic Web and agent technologies. This was achieved by enhancing Web services through a symbiotic relationship with agent technology. This has allowed, on one hand, for the implementation of dynamic binding of Web services and incorporation into BPWS4J, and for Web services to engage, through its manifestation as an agent, in autonomous behaviour and active negotiation. The system is operational and work is currently carried out on further enhancement and integration of agent technology. 
