 REGULAR PAPER Alexandros Kalousis  X  Julien Prados  X  Melanie Hilario Abstract With the proliferation of extremely high-dimensional data, feature se-lection algorithms have become indispensable components of the learning process. Strangely, despite extensive work on the stability of learning algorithms, the sta-bility of feature selection algorithms has been relatively neglected. This study is an attempt to fill that gap by quantifying the sensitivity of feature selection algo-rithms to variations in the training set. We assess the stability of feature selection algorithms based on the stability of the feature preferences that they express in the form of weights-scores, ranks, or a selected feature subset. We examine a number of measures to quantify the stability of feature preferences and propose an empiri-cal way to estimate them. We perform a series of experiments with several feature selection algorithms on a set of proteomics datasets. The experiments allow us to explore the merits of each stability measure and create stability profiles of the feature selection algorithms. Finally, we show how stability profiles can support the choice of a feature selection algorithm.
 Keywords Feature selection  X  High dimensionality  X  Feature stability 1 Introduction High-dimensional datasets are becoming more and more abundant in classification problems. A variety of feature selection methods have been developed to tackle the issue of high dimensionality. The major challenge in these applications is to extract a set of features, as small as possible, that accurately classifies the learning examples.
 in general in problems requiring feature selection, is the stability of the feature selection methods used. Stability, defined as the sensitivity of a method to varia-tions in the training set, has been extensively studied with respect to the learning algorithm itself. We propose to investigate how different subsamples of a training set affect a method X  X  assessment of a feature X  X  importance and consequently the final set of selected features.
 proposed a measure based on the agreement of classification models produced by an algorithm when trained on different training sets. He defined the agreement of two classification models as the probability that they will produce the same predic-tions over all possible instances drawn from a probability distribution P ( X ) .Note that instances are drawn from P ( X ) and not from P ( X , C ) , the joint probability distribution of class and training instances; the underlying reason is that the agree-ment of two concepts  X  classification models  X  should be examined in all possible input worlds. In order to estimate stability, he suggested using m  X  2-fold cross-validation. In each of the m repetitions of cross-validation, a classification model is produced from each one of the two folds. The two models are then tested on ar-tificial instances drawn by sampling from P ( X ) and their agreement is computed. The final estimation of stability is the average agreement over all m runs. ror of classification algorithms [ 2 , 3 , 6 ]. The variance term quantifies instability of the classification algorithm in terms of classification predictions. Variance mea-sures the percentage of times that the predictions of different classification mod-els, learned from different training sets, for a given instance are different from the typical (average) prediction. Bias-variance decomposition is usually done via bootstrapping, where part of the data is kept as a hold-out test set and the remain-der is used to create different training sets by using sampling with replacement. The final estimation of variance is also the average over the different bootstrap samples.
 els are crucial in quantifying the sensitivity of classification algorithms to changes in the training sets (note that both approaches can also be used for error estima-tion which is then tightly coupled with the stability analysis). However, when one wants to examine only feature selection algorithms without involving a classifi-cation algorithm, the methods mentioned earlier do not apply. Typical feature se-lection algorithms do not construct classification models and thus cannot provide classification predictions. They usually output what we call a feature preference statement (for conciseness, feature preference ); this can take the form of a subset of selected features, or alternatively of a weighting-scoring or a ranking of the fea-tures, based on which a small set of features can be selected (either by specifying a threshold or asking for a specific number of features). A classification algorithm should then be applied on the selected feature set to produce a classification model. If we used the stability estimation methods described earlier to the combined fea-ture selection and classification algorithms, we would be measuring their joint sensitivity to training set variations and have no way to delimit the (in)stability of the feature selection algorithm from that of the classification algorithm. i.e., the stability of the feature preferences produced by a feature selection algo-rithm, to quantify its sensitivity to differences in training sets drawn from the same distribution. The same approach can in fact be used to measure the preferential sta-bility of any classification algorithm that produces models from which weightings or rankings of the features can be extracted, e.g., linear discriminant algorithms. works are not able to accurately quantify preferential stability. It is possible that different training samples lead to really different feature sets, which, however, yield the same prediction patterns. This can be especially true when the initial fea-tures have a high level of redundancy, which is not handled in a principled way by the algorithms used.
 came from the need to provide application domain experts with quantified evi-dence that the selected features are relatively robust to variations in the training data. This need is particularly crucial in biological applications, e.g., genomics, DNA-micorarrays, and proteomics, mass spectrometry. These applications are typically characterized by high dimensionality, the goal is to output a small set of highly discriminatory features on which biomedical experts will subsequently invest considerable time and research effort. Domain experts tend to have less con-fidence in feature sets that change radically with slight variations in the training data. Data miners have to convince them not only of the predictive potential but also of the relative stability of the proposed features.
 of stability that can be applied to any feature selection algorithm that outputs a fea-ture preference as defined earlier; we also show how we can empirically estimate these measures. In Sect. 3 , we describe the experimental setup, the datasets used, and the feature selection algorithms included in the study; in Sect. 4 ,wepresent the results of the experiments, investigate the behavior of the different stability measures, and establish the stability profiles of the chosen feature selection algo-rithms; in Sect. 5 , we examine together classification performance and stability of feature preferences, and suggest how we can exploit the latter to support the choice of the appropriate feature selection algorithm; finally, we conclude in Sect. 6 . 2 Stability The generic model of classification comprises: a generator of random vectors x , drawn according to an unknown but fixed probability distribution P ( X ) ;a supervisor that assigns class labels c ,tothe x random vectors, according to an unknown but fixed conditional probability distribution P ( C | X ) ; a learn-ing space populated by pairs ( x , c ) drawn from the joint probability distribution P ( X , C ) = P ( C | X ) P ( X ) .
 the feature preferences it produces to differences in training sets drawn from the same generating distribution P ( X , C ) . Stability quantifies how different training sets affect the feature preferences.
 obviously depends on the representation language used by a given feature selec-tion algorithm to describe its feature preferences; different representation lan-guages call for different similarity measures. We can distinguish three types of representation languages for feature preferences. In the first type, a weight or score is assigned to each feature indicating its importance. The second type of represen-tation is a simplification of the first where instead of weights ranks are assigned to features. The third type consists of sets of selected features in which no weighting or ranking is considered. Obviously, any weighting schema can be cast as a rank-ing schema, which, in turn, can be cast as a set of features by setting a threshold on the ranks or asking for a given number of features.
 ( f  X  a weighting-scoring: w = (w 1 ,w 2 ,...,w m ), w  X  W  X  R m ,  X  a ranking: r = ( r 1 , r 2 ,..., r m ), 1  X  r i  X  m ,  X  or a subset of features: s = ( s 1 , s 2 ,..., s m ), s i  X  X  0 , 1 } , with 0 indicating In order to measure stability, we need a measure of similarity for each of the rep-resentations given earlier. To measure similarity between two weightings w, w produced by a given feature selection algorithm, we use Pearson X  X  correlation co-efficient: where S W takesvaluesin[  X  1, 1]; a value of 1 means that the weightings are perfectly correlated, a value of 0 means that there is no correlation, while a value of  X  1 means that they are anticorrelated.
 correlation coefficient: where r i and r i are the ranks of feature i in rankings r and r , respectively. Here too, the possible range of values is in [  X  1, 1]. A value of 1 means that the two rankings are identical, a value of 0 means that there is no correlation between the two ranks, and a value of  X  1 means that they have exactly inverse orders. straightforward adaptation of the Tanimoto distance between two sets [ 4 ]: The Tanimoto distance metric measures the amount of overlap between two sets of arbitrary cardinality. S S takesvaluesin [ 0 , 1 ] ,with0meaningthat identical.
 dataset, we can simulate the distribution P ( X , C ) from which the training sets are drawn by using a resampling technique like bootstrapping or cross-validation. We opted for N -fold stratified cross-validation ( N = 10). In tenfold cross-validation, the overlap of training instances among the different training folds is roughly 78%. The feature selection algorithm outputs a feature preference for each of the train-ing folds. The similarity of each pair of feature preferences, i.e., N ( N  X  1 )/ 2 pairs, is computed using the appropriate similarity measure and the final stability score is simply the average similarity over all pairs.
 in view of identifying feature selection algorithms, maximizing both stability and classification performance. To this end, we embed the procedure described earlier within an error estimation procedure, itself conducted using stratified tenfold cross-validation. In other words, at each iteration of the cross-validated error estimation loop, there is a full internal cross-validation loop aimed at mea-suring the stability of feature precedences returned by the feature selection algo-rithm. The outer loop provides a classification error estimate in the usual manner, while the inner loop provides an estimate of the stability of the feature selection algorithm. 3 Stability experiments 3.1 Datasets We have chosen to experiment with high-dimensional data from three different application domains, namely proteomics, genomics, and text mining. A short de-scription of these datasets is given in Table 1 .
 is to construct classification models that discriminate between healthy and dis-eased individuals, i.e., we have two class problems. We worked with three differ-ent datasets: ovarian cancer [ 11 ], (version 8-07-02), prostate cancer [ 12 ], and an extended version of the early stroke diagnosis dataset used in [ 14 ]. All features correspond to intensities of mass values and are continuous.
 We worked with three different datasets: leukemia [ 7 ] where the goal is to distinguish between acute myeloid leukemia (AML) and acute lymphoblastic leukemia (ALL); classification of embryonal tumors of the central nervous sys-tem [ 13 ] where the goal is to predict whether a given treatment will be effective or not (i.e., patient will or will not survive); and colon cancer [ 1 ] where the goal is to distinguish between healthy and tumor colon tissue. Features correspond to levels of expression of different genes and are continuous.
 sentence is relevant or not to a given topic: protein X  X isease relations ( disease ), protein-function and -structure ( function and structure respectively), protein sub-cellular location ( subcell ), and related protein sequences produced by alternative splicing of a gene or by the use of alternative initiation codons ( alt )[ 10 ]. Sentence features are stemmed words, each described by a continuous value representing it standard tf-idf score.
 especially in the first two types of applications. The selected features provide the basis to distinguish between different types of pathologies, a first path to hypoth-esis construction, an initial understanding of the mechanisms involved in various diseases, etc. In other words, they provide a starting point which is followed by substantial laboratory research. As such, the quality and the robustness of the se-lected features is of paramount importance. 3.2 Feature selection algorithms For feature selection, we considered the following methods: Information Gain (IG), Chi-Square (CHI) [ 4 ], Symmetrical Uncertainty (SYM), [ 9 ], ReliefF (RE-LIEF) [ 15 ], and SVMRFE [ 8 ]. IG, CHI, and SYM are all univariate feature scor-ing methods for nominal or continuous attributes which are discretized using the method of [ 5 ]. ReliefF delivers a weighting of the features while taking their in-teractions into account; it uses all features to compute distances among training instances and the K -nearest neighbors of each of the M probe instances to update feature weights. We set K to 10 and M to the size of the training set, so that all instances were used as probes. SVMRFE is based on repetitive applications of a linear support vector machine algorithm where the P % lowest ranked features are eliminated at each iteration of the linear SVM. The ranks of the features are based on the absolute values of the coefficients assigned to them by the linear SVM. In our experiments, P was set to 10% and the complexity parameter C of the linear SVM to 0.5.
 type of stability analysis can be applied to any linear classifier; here too, the com-plexity parameter was set to 0.5. Provided that all features are normalized to a common scale, the absolute values or the squares of the coefficients of the linear hyperplane can be taken to reflect the importance of the corresponding features, in effect providing a feature weighting. This is actually the assumption under which SVMRFE works; alternatively the support vector machine is equivalent to SVM-RFE with a single iteration, where the ranking of the features is simply based on the absolute values or the squares of the coefficients of the support vector ma-chine. We consider this version of support vector machines as yet another feature selection algorithm and identify it as SVMONE. The implementations of all the algorithms are those found in the WEKA machine learning environment [ 17 ]. ing fold by a nested cross-validation loop, and the final results reported are the averages, S W , S R , S S , over the ten external folds. 4 Stability results In this section, we will examine the stability results along two dimensions:  X  the behavior of the stability measures per se,  X  and the stability performance of the feature selection algorithms Ta b l e 2 gives the stability results for S W , S R ,and S S , i.e., for weightings-scorings, rankings, and selected feature sets, for the six different methods considered. The imposed cardinality of the final feature set influences the values of S S but not of S
W and S R . S S was computed on the feature sets of the best ten features selected by each method. SVMRFE does not produce a weighting-scoring of features so the computation of S W does not make sense in that case; moreover, in the case of the text mining datasets, SVMRFE produced results only for the alt dataset, in the remaining text mining datasets, its execution did not terminate within a reasonable amount of time. For SVMONE, the stability results are computed on the square values of the coefficients of the linear hyperplane found by the support vector machine. 4.1 Discussion on stability measures S
W and S R take into account the complete feature preferences produced by a method, while S S focuses on a given number of top ranked or selected features. Thus, the former two provide a global view of stability of feature preferences, while the latter focuses on a more precise picture of greater utility, since feature preferences are used to select a feature set. S W provides a finer grain picture of stability in comparison to S R , since it is based on the actual feature coefficients produced by a given method, while the S R uses the ranking of these coefficients. However, this does not mean that the information provided by S W is of greater value than that provided by S R , rather the opposite is true. First, in practice, ranks are of more direct utility in selecting the final set of features. A second disadvan-tage of S W is that since it directly operates on the actual weights-scores produced by each method, its results are not directly comparable among different methods due to possible differences in scales and intervals of the weights-scores, a problem that does not appear in the case of ranks.
 each one indicating a considerably different level of stability, e.g., the stability measurements of IG on the colon dataset (Table 2 ), where S W has a value of 0.7606, S R a value of 0.1138, and S S a value of 0.4865. These differences are a result of the way the three different measures are computed. S W operates directly on the weightings-scorings produced by the feature selection method, if it happens that a method assigns exactly the same score to a large set of features, the resulting S
W value can be quite high. In fact, this was often the case with all the univariate feature selection that we examine here, all of them assign a score of zero to a large number of features. That was a side effect of the discretization process, used in conjunction with the univariate feature selection methods, which resulted in a large number of features with a single value, thus, the corresponding score of the feature was zero. In the case of the multivariate feature selection methods, this happens much less often. S R addresses this issue by breaking ties randomly, i.e., when two features have exactly the same score which would mean assigning to both of them the same rank k then we randomly assign to one of them a rank of k and to the other a rank of k + 1. The reasoning behind the random breaking of ties is that when we ask a feature selection algorithm to select exactly k features, usually we have no way to prefer one feature over another when both have the same rank k . This explains why there can be such large discrepancies between the values of S W and S R .Table 3 shows how many zero weights-scorings each feature selection method produces; when the number of zero weights is low, then the values of S W and S R will be similar. The discrepancy between S R and S S is explained by the fact that the latter is focusing on the top k ranked features which can be extremely stable, especially when the value of k is low, as it was in the case of the results given in Table 2 ( k = 10). This observation points to possible improved versions of S R where similarities or differences on the top ranks are more heavily accounted for, while differences and similarities in the lowest ranks are less accounted for.
 surements is as follows: usually, the highest stability value will be given by S W ; depending on whether there are fewer or more features with zero weighting, the value of S R can be as high as that of S W or considerably lower. The value of S S does not correlate with that of the other two measurements, i.e., a low value of S R does not necessarily translate to a low value of S S . Overall, the most important in-formation is delivered by S S , when we are examining the stability of the methods for sets of selected features of given cardinality, followed by S R which provides an indication of stability of the complete feature preference. In the following sec-tions, we will focus on these two measures of stability. 4.2 Discussion on stability of feature selection algorithms First of all, there is no feature selection method that is consistently more stable than all the others for all the different problems that we examined. However, it seems that there are types of problems for which a given method is more stable than the others.
 RELIEF, which achieved the highest stability scores in all three problems both in terms of S R and S S . The feature preferences that RELIEF produces for the given type of problem are stable both globally, i.e., the ranking of the features does not change considerably with different training sets, and at the top, i.e., the ten top ranked features do not change considerably with changes in the training set. The global stability of RELIEF X  X  feature preferences as measured by S R is on average 0.9055 for the three proteomics datasets, considerably higher than all the other feature selection methods. For S S RELIEF scores 0.7295, 0.5529, and 0.3410 for the ovarian , prostate ,and stroke datasets, respectively. These scores correspond to an average overlap of 8.43, 7.12, and 5.08 features, out of the ten contained in the final set of selected features, among the different subsets of the training folds. 1 The rest of the methods have a considerably lower score.
 global stability of the feature preferences measured by S R , RELIEF again is the clear winner, with an average score of 0.8292. The results of all the univariate methods are catastrophic, on average around 0.126, a fact that is due to the very large number of features to which these methods assigned a score of zero resulting in random rankings for these features. SVMONE and SVMRFE have relatively stable feature preferences, around 0.7. However, the picture changes when we turn to S S .Forthe leukemia dataset, the univariate methods achieve the highest stability compared to all the other methods, the best being SYM with a score of 0.7897 (8.82 common features out of ten on average); for the nervous and for colon RELIEF datasets, SVMONE is by far the most stable algorithm.
 the clear winner, with an S R that is consistently higher than 0.7 for all datasets, followed by RELIEF. All univariate methods have a very low S R score, in the best case around 0.16, again this is due to the large number of features to which these methods assign a score of zero. The picture changes radically when we examine the stability behavior with respect to S S . This time, the most stable methods are the univariate methods with an average S S score always above 0.8 (8.88 common features).
 uated by S R , being most stable in all the proteomics and genomics datasets and second most stable in the text mining datasets. When we evaluate the stability of the top ten selected features, RELIEF is the clear winner in the proteomics datasets, and, on average, the best for the genomics datasets. The univariate fea-ture selection methods perform badly in terms of their global stability but better when we evaluate the stability of the top ten features; in fact; for the text mining applications, they are by far more stable than the other methods. The SVM-based algorithms are somewhere in the middle, getting the second place in terms of global stability in two out of the three application domains (proteomics and ge-nomics). In what concerns the stability of the top ten selected features, they do not have an application domain in which they excel.
 three groups of algorithms arise naturally, where the algorithms that belong to a given group share a very similar stability behavior. The first group consists of all the univariate feature selection algorithms, the second contains SVMONE and SVMRFE, while RELIEF is a group on its own, since it does not have a stability behavior similar to any of the other methods.
 of stability and all application domains considered. This is not a surprise, since all of them are based on a similar principle, i.e., they select individual features on the basis of how well they discriminate among the different classes.
 easily explained, since the ranking of features provided by SVMONE can be con-sidered as a less-refined version of the ranking provided by SVMRFE, the former being the result of a single execution of the SVM algorithm and the latter the re-sult of an iterative execution where each time 10% of the lower ranked features are removed. However, in terms of S S , SVMONE appears to be more stable; for the proteomics datasets, SVMONE has an average overlap of 7.47, 6.87, and 4.27 fea-tures out of ten against 6.37, 6.19, and 2.87 for SVMRFE for ovarian , prostate , and stroke , respectively. In the case of genomics datasets, the difference is even greater, SVMONE has an average feature overlap of 6.55, 6.27, and 5.19 against 4.22, 1.92, and 3.86 for SVMRFE for leukemia , nervous ,and colon , respec-tively; finally, in alt , the only text dataset in which SVMRFE terminated, the dif-ference is small: 8 and 7.9. Here too, the fact that SVMRFE is based on multiple iterations explains its higher instability on the top ten ranked features. When the differences of the coefficients of two features are rather small and a choice is to be made on which of the two to eliminate, different training sets could result in opposite rankings for these two features, thus eliminating a different feature each time.
 not only providing insight on the stability of each method but also clearly indicat-ing which features are considered important by each method. An example of such a visualization for one dataset from each application domain is given in Figs. 1  X  3 , where the cardinality of the final feature set is set to ten. In each of the graphs, the x -axis corresponds to the individual features. The y -axis is separated into ten rows, each one corresponding to one of the outer cross-validation folds. Within each row, we find ten rows (not visibly separated) corresponding to each of the inner cross-validation folds of the outer fold. A perfectly stable method, i.e., one that always chooses the same features, would have in its graph as many vertical lines as the cardinality of the final feature set. Each line would correspond to one selected feature.
 nervous dataset, with prostate being somewhere in the middle. In the case of the alt dataset, it is clear that the univariate methods are more stable than RELIEF, SVMONE, and SVMRFE. The visual inspection of the graphs allows for a clear understanding of which features are considered most important by each method. We can see that the three univariate methods select roughly the same features on each dataset. The feature patterns established by SVMONE and SVMRFE are also similar between them, albeit to a lesser extent, while RELIEF has a distinctively different pattern from all the other methods. Moreover, it is clear that the actual value of stability is affected by the dataset examined with some datasets resulting in systematically higher levels of stability for all algorithms. 4.3 Stability profiles with S S The more interesting stability estimation is provided by S S , since it focuses on a subset of features, the ones selected by each method, which is actually what inter-ests us when we are performing feature selection. Nevertheless, this estimation is specific to a given number of selected features. To get a more global picture of the stability profile of the different methods with respect to S S , we computed its values for different sizes of selected feature sets, ranging from 10 up to the cardinality of the full feature set in increments of 5, the results are given in Figs. 4  X  6 .However, as the cardinality of the selected feature set increases so does the estimated value of stability simply because with a larger number of selected features there is also a higher probability that there will be more features in common only due to chance. To quantify the increase in stability attributed to the increasing cardinality of the selected feature set, we included as a stability baseline a random feature selec-tor that outputs random feature sets of a given cardinality. We should note here that the computation of the curves does not require any extra application of the feature selection algorithms other than that described in the previous section for estimating the different stability measures, the reason is that each algorithm sim-ply outputs a complete feature preference which can be readily used to compute the values of S S for different feature set cardinalities. mance only for low cardinalities of feature sets for almost all datasets, with the exception of ovarian . After a point, their behavior converges to that of the ran-dom selector and they are dominated by the remaining three algorithms, a fact that, as already mentioned, is due to the discretization method used with them. For low feature set cardinalities, they dominate all other algorithms in all the text mining problems and have a slight advantage in the proteomics and in two of the three genomics datasets ( leukemia and colon ) over the SVM-based algorithms. RELIEF has an almost systematic advantage over the other methods for two out of the three proteomics datasets ( prostate and stroke ). For all types of problems, it appears to have a better (proteomics and genomics problems) or similar (text mining problems) stability profile with the SVM-based algorithms.
 summarized by the S R measure. For example, in the case of the leukemia dataset, RELIEF, which has the best stability profile overall the other algorithms, has also the highest S R value (0.8675). The SVM-based algorithms have the next better stability profile with an S R value around 0.754, while the univariate methods are the worst with an S R value around 0.247. While S R captures the global picture, it is not able to capture the finer details; e.g., in the same dataset, there is a range of feature set cardinalities in which the univariate methods clearly dominate the SVM-based algorithms, and they are very similar to RELIEF.
 gorithms in three groups is clearly visible. The three univariate feature selection methods have an indistinguishable stability profile for all the datasets to the point that the lines depicting their profile become one. SVMONE and SVMRFE have also a very similar profile, with SVMONE being more stable on feature sets of lower cardinality; nevertheless, as the cardinality increases, their profiles con-verge and after a point, which depends on the dataset, they become indistinguish-able. As we move to higher cardinalities, both methods add low-ranked features; these should be more or less the same for both methods, since for SVMRFE, they are determined at the earliest iterations of the algorithm, thus resembling closely the behavior of SVMONE X  X  single run. For lower cardinalities, the instability of SVMRFE increases due to the already mentioned fact that small differences in the coefficients can inverse the rank and thus remove different features. The dif-ference in instability between SVMONE and SVMRFE increases as we move to lower cardinalities where the final feature sets of SVMRFE are determined during the last iterations of the SVM algorithm.
 they reach a peak after which their stability drops dramatically and their stability profile converges to that of the random feature selector. The peak before the dra-matic drop in stability corresponds to the inclusion of all features whose score was different than zero. After this point, features are actually included randomly. The three remaining algorithms, RELIEF, SVMONE, and SVMRFE exhibit a different pattern of stability. In almost all the datasets, their S S value reaches a plateau, ei-ther starting from lower values and increasing creating an upwards looking  X  X not X  (this can be observed in all the proteomics datasets), or starting from higher val-ues and decreasing, creating a downwards looking  X  X not X  (this can be observed in all the text mining datasets). After reaching the plateau, their stability values increase very slowly. In both cases, reaching the plateau means that the stability value changes afterwards, mainly due to the increase of the feature set cardinality, i.e., the algorithms do not select anymore features in a strongly informative man-ner. In some sense, the stability of the algorithms converges at the stability value observed in the beginning of the plateau. A similar plateau is observed also for the univariate feature selection methods in the case of the ovarian dataset. Note that the beginning of the plateau does not necessarily correspond to the most sta-ble feature set size. This is true in the cases where it defines an upward looking knot; in the cases where it defines a downwards looking knot, it corresponds to the minimal stability feature set size, all feature sets with less features would have a higher stability.
 the maximum cardinality, k , of the selected feature sets. In terms of information content it would not make sense to have feature sets of higher cardinality, since the new features will not be incorporated in an strongly informative manner. This is an important observation that could guide the selection of the appropriate num-ber of features. In almost all feature selection algorithms, we have to set either a threshold or a number of selected features but usually there is no informed way this could be done and we most often rely on extensive cross-validation using ac-curacy estimations to select the appropriate values. Reaching the plateau indicates that we should stop adding new features, since selection is not done anymore in an informative manner. 5 Stability and classification performance A feature selection algorithm alone can provide an indication of which features are informative for classification, but it cannot provide an estimate of the discrim-inatory power of these features, since it does not construct classification models whose error could be estimated. In the same manner, stability results cannot pro-vide the sole basis on which to select an appropriate feature selection algorithm; nevertheless, they can support the selection of a feature selector when the latter is coupled with a classification algorithm, and increase the confidence of the users in the analysis results (provided that the feature selection is found to be stable). timation of a pair of feature selection and classification algorithms. If the feature selection algorithm selects consistently, the same features they can have more con-fidence in the importance of the selected features and a higher confidence in the error estimates. The latter because the models produced in the different folds of the resampling will be similar (at least in terms of the features they contain), a fact that means that the averaged error estimation we get corresponds to a model that remains relatively constant among different folds. One of the problems of the re-sampling based error estimations is that they evaluate algorithms and not specific classification models; nevertheless, in practice, what is going to be used is a sin-gle classification model that is the result of the learning phase of the algorithms. If the models are similar among the different resamples, then we move closer to an estimate of the performance of a given model. The simplest scenario of using the stability and error estimation to select the appropriate algorithms goes as fol-lows: couple a given classification algorithm with a number of feature selection algorithms and estimate the classification performance and the stability of the feature selector using the process described in Sect. 2 . Then calculate the sta-tistical significance of error differences. Among the feature selection algorithm X  classification algorithm combinations that are found to be better than all the others, choose the combination that contains the most stable feature selector.
 setting its complexity parameter to 0.5. We performed a series of experiments in which we paired each feature selection algorithm and the linear SVM. In the following, when we will refer to a feature selection algorithm, we will actually mean the pair of the feature selection algorithm with the linear SVM. From the univariate feature selection methods, we have chosen to report results only for IG, since the others had a very similar behavior. For every dataset, we fixed the number of selected features to N , with N ranging from 10 to 50 in steps of 10. For a given N , the four feature selection algorithms were compared with respect to their classification error and their stability. The statistical significance of error differences was computed using McNemar X  X  test with a significance level of 0.05. To rank the feature selection algorithms on a given dataset and for a given number N of selected features, we used the following approach: if two algorithms A and B had a classification performance that was not significantly different, then each was assigned 0.5 points; if A was significantly better than B ,then A was assigned one point and B zero. The rank of an algorithm is given by the sum of its points. The complete results are given in Tables 4  X  6 for the proteomics, genomics, and text mining datasets, respectively. Each entry in the tables gives the rank, classification error, and the S S stability estimate for a given feature selection algorithm, top ranked algorithms are noted in italics .
 are many cases in which there are a number of algorithms ranked on the top posi-tion in terms of classification error but whose stability values differ considerably. In the case of the proteomics datasets, this is observed often in the Stroke dataset and less often in the case of ovarian . In the Stroke dataset, the algorithms do not have a significantly different classification performance for N = 30, 40, and 50. In these cases, SVMRFE is by far the less stable algorithm with an S S which is always less than 0.20, while RELIEF has a value of stability which is more than double. Similar observations can be done in the case of ovarian dataset. In the genomics datasets, we can see that for leukemia , the algorithms have an indistin-guishable performance for any value of N but a great difference in their stability values. Again, SVMRFE has systematically a very low stability, which can be as low as one-third of the stability value of the most stable algorithm. For example, for N = 10, IG has a stability value of 0.7392, while SVMRFE has a value of 0.2678. A similar picture appears also in the colon dataset, with SVM and SVM-RFE being very far from the most stable algorithm, RELIEF ( N = 10, 20, and 30). Similar observations are in order also in the case of the text mining datasets; the most stable feature selection algorithm, for the range of N values examined here, is IG, which also appears in the top position in terms of classification performance in all datasets and almost all values of N .
 associated with a low classification performance. Among the cases examined there were many in which the best performing algorithm was the most unstable, e.g., SVMRFE in stroke , ovarian for N = 10, 20, and prostate for all values of N , or cases in which among the best performing there were also algorithms with high instability, e.g., SVM and SVMRFE in the colon dataset, N = 10, 20, and 30. One possible explanation for that is redundancy. Among the initial full feature set, there are possibly many different subsets on which classification models can be constructed that can accurately predict the target concept. Such cases of instability coupled with high classification performance, can be an indication of redundancy within the full feature set. Nevertheless, this is a hypothesis that remains to be verified.
 feature selection algorithm in the absence of any significant difference in classi-fication performance. Selecting the most stable algorithm, we have a higher con-fidence in the quality of the features that it selects but also a higher confidence in the corresponding classification performance. Moreover, coupling the selection procedure with a visual representation of stability, as the one given in Figs. 1  X  3 , we get a clear picture of the important features and how robust they are to pertur-bations of the training set. 6 Conclusions and future work To the best of our knowledge, this is the first proposal of a framework that mea-sures the stability of feature selection algorithms. We defined the stability of fea-ture selection algorithms as the robustness of the  X  X eature preferences X  they pro-duce to training set perturbations. We examined three different stability measures and proposed a resampling technique to empirically estimate them. The most in-teresting one was based on S S , a measure of the overlap of two feature sets. We exploited the framework to investigate the stability of some well-known feature selection algorithms on high-dimensional datasets from different application do-mains. We showed how we can use stability to support the selection of a feature selection algorithm among a set of equally performing algorithms.
 where the goal is to determine the most important features. If these features are consistent among models created from different training data, the confidence of the users in the analysis results is strengthened. The results of the empirical esti-mation of stability can be elegantly visualized and provide a clear picture of the relevant features, their robustness to different training sets, and the stability of the feature selection algorithm.
 ter large differences and similarities on top ranked features. Exploring the stability profile in order to perform feature selection. Exploiting the notion of similarities between feature preferences to quantify the similarities of different feature se-lection algorithms. Aggregating the different feature sets produced from subsam-ples of a given training set in what can be viewed as the analogue of ensemble learning and model combination for feature selection. To draw a parallel with bias-variance, where aggregating models of a learning algorithm with a high vari-ance can reduce classification error, we could combine feature sets of an unstable feature selection algorithm to increase stability and possibly classification perfor-mance afterwards.
 References Author Biographies
