 Range lab eling and structural joins are well-studied tech-niques for ecien tly pro cessing XP ath queries. However, when XP ath queries become long, man y times of structural joins are required. To solv e this problem, we dev elop ed a metho d to reduce the num ber of joins and nodes read from the disk using strong DataGuides. Our metho d can pro cess single paths without any joins and twig patterns with joins amongst branc hing nodes and leaves in queries. Exp erimen-tal results veri ed that our approac h outp erforms the best optimization technique for structural joins by factors of up to sev eral hundreds of times.
 H.2.4 [ Information Systems Applications ]: DATABASE MANA GEMENT| Systems, Query processing Algorithms, Design, Performance DataGuides, Databases, Structural Joins, XML, XP ath
Range lab eling and structural joins are well-studied tech-niques for ecien tly pro cessing XP ath queries. An XML tree is decomp osed into an XML node list and stored in a database. By indexing the XML nodes by their tags, XP ath queries can be pro cessed in two steps. 1. XML nodes that matc h eac h nodeT est in a query are 2. The nodes are then joined to satisfy the axis functions. Step (2) is called a structural join, and sev eral ecien t join algorithms have been prop osed [1, 3]. In this pap er, we call this XP ath pro cessing metho d the s-join metho d. However, the s-join is not ecien t when a query is long. The more the num ber of query nodes increases in a query , the more the performance decreases, because the costs of index access and s-join increase as the length of queries be-comes longer. Even though we emplo y n-ary joins, whic h cut the intermediate join results using a stac k enco ding mec ha-nism, the cost of index accesses does not decrease.
In this pap er, we prop ose an ecien t XP ath pro cessing metho d using strong DataGuides [2]. XP ath queries are pre-pro cessed against the strong DataGuides. Because strong DataGuides are generally very small compared to the source XML data, this prepro cessing can be done very quic kly. We then read the corresp onding nodes in the XML data using the results of the strong DataGuide pro cessing. An adv an-tage of our approac h is that single path queries, whic h do not include branc hes, can be pro cessed without s-joins. Twig patterns can also be pro cessed with only s-joins amongst the leaves and the branc hing point nodes in queries. Therefore we can signi can tly reduce the num ber of s-joins. Further-more, the set of XML nodes read can be reduced using the results of strong DataGuide pro cessing. To clarify this prop-erty, we introduce a dg cluster, that clusters nodes in XML data with the strong DataGuide. dg clusters divide a set of nodes in XML data into smaller parts than the so-called tag clusters, whic h divide XML nodes with their tags, thus avoiding unnecessary node reads. Figure 1: An XML tree and its strong DataGuide.

The strong DataGuide [2] of an XML tree is a tree built by merging the children XML nodes that have the same tag, until there is no child of the XML tree whic h has the tag at any position. Figure 1 sho ws the strong DataGuide of an XML tree. A strong DataGuide holds all of paren t-child tag edges in an XML tree. Therefore, parent-child and anc estor-desc endant XP ath axes can be evaluated just using strong DataGuides; that is, single paths queries can be evaluated using strong DataGuides. Furthermore, twig patterns can also be evaluated using strong DataGuides and range lab els.
An XML node set is clustered with dg nodes (Figure 2) and we call suc h clusters dg clusters. A set of XML nodes in a dg cluster is called a target set in semistructured databases [2]. Another clusters with XML tags are called tag clusters. Tag clusters and dg clusters have a re nemen t relationship. Any tag cluster can be divided into a set of dg clusters. In Figure. 2, the author tag cluster, whic h has two XML nodes, is divided into two dg clusters, l root :articl e:author and l root :Book :author .
 One pass of SAX events is enough to build a strong Data-Guide, and at the same time, range lab els can be assigned to XML nodes.
Figure 3 sho ws the owcharts of our metho d and the s-join metho d. In the s-join metho d, the XML nodes are selected Figure 3: Flowcharts of prop osal and s-join metho d. from tag clusters ( tag selection). XML nodes are sorted in preorder in adv ance. S-joins amongst these XML nodes are then executed. The result of the XP ath query is nally output.
 In the prop osed metho d, dgEval , whic h is the evaluation of XP ath query against strong DataGuides, is executed. Next, with the result of dgEval , the necessary XML nodes are se-lected from a secondary disk ( dg selection), and the sorted XML nodes are merged ( sort merge ). If the query is a twig pattern, s-joins are executed. The result is then output. The time complexit y of dgEval is O ( j DataGuide j j Q j ). The cost of selection is reduced because our metho d reads XML nodes, not from tag clusters, but from dg clusters, whic h is a re nemen t of tag clusters. Furthermore, whereas the s-join metho d reads the XML nodes that app ear in a query , our metho d reads only the XML nodes that are leaves and branc hes of a query . The cost of s-joins is estimated from the num ber of executed s-joins, and the cardinalit y of the result XML nodes of the s-joins. Because our metho d skips joins amongst middle nodes in the query , the cost is reduced.
We chec ked the eciency , scalabilit y and dominan t factors of our approac h, compared to an FP plan [4] comp osed of binary stack-tree joins. The strong DataGuide was kept in the main memory . By using the id's of the matc hing dg nodes, XML nodes are read from a secondary disk and sort merged in preorder and the results are returned. We used the XMark XML data from 1.1 to 558 MB. We tested both single path and twig pattern queries with 1 to 10 node tests.
Figure 4 sho ws the represen tativ e results, when the size of the XMark data was 111 MB. s1-s7 and t8-t10 are single paths and twig patterns, resp ectiv ely. Single paths become longer and twig patterns have more branc hing nodes as the query num ber increases.
As a summary of exp erimen tal results, our metho d that uses the strong DataGuide, signi can tly outp erformed the original metho d that uses the FP plan (s-join metho d). [1] S. Al-Khalifa, H. V. Jagadish, et al. Structural Joins: [2] R. Goldman and J. Widom. DataGuides: Enabling [3] H. Li, M. L. Lee, W. Hsu, and C. Chen. An [4] Y. Wu, J. M. Patel, and H. V. Jagadish. Structural
