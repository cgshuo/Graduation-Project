 Recommender Systems have achieved grea t success and are beco ming increasingly popular in real world applications. For example, online stores, such as Amazon and Netflix, provide customized recommendations for products or services based on a user X  X  history. Many techniques have been proposed to ma ke recommendations for the users, among which collaborative filtering is one of the most popular ap-proaches. The task of collaborative filtering is to predict the utility of items to a particular user based on the user X  X  history and other users X  ratings. With the increasing popularity of social network based applications such as Facebook, Myspace and LinkedIn, how to make recommendations with addi-tional information from a user X  X  social network has become an important re-search topic. In real life, we often turn to our friends for some recommendations. Besides, people with close relationship are likely to have similar tastes. There-fore, a user X  X  social network may have two effects in the real world: help us in-fer users X  preferences and influence users X  behaviors. Hence, social network info might be an important element that recommender algorithms can take advantage of. Recently, several researchers have star ted to tackle this problem [11][10][9].For example, Jamali et al. proposed a a model-based approach utilizing matrix fac-torization techniques and incorporating trust propagation mechanisms [3]. Kon-stas et al. adopt a Random Walk framework and focus on investigating the role of additional relationships, such as friendships and social tags [6].
However, most of prior research onl y focused on a single-domain recom-mendation and thus the solutions are less likely to work well in open domain recommenders systems. There are thre e differences between the two kinds of recommender systems: 1) Data is sparser in the open-domain systems. Open-domain systems have much more items but less user feedback. That means the user-item rating matrix is sparser in open-domain systems. Thus traditional col-laborative filtering cannot achieve as good performance as in the single-domain systems. 2) Data distribution varies according to the different domains. For example, in the Epinions data set, on line stores get more reviews(average 10 ratings/item), yet books tend to get less reviews(average 2 ratings/item). 1 3) The social network structure is more complicated than the single-domain sys-tem. Social network has been used to meas ure users X  similarities and infer users X  preferences in recommender s ystems. Most of prior research assumed that those people trusted by same user have the same influence for the user. However in the real world, people always selectively adopt others X  opinions. Some persons are good at software, some persons are good at sports. People will consult different persons due to the products they want to purchase. Each person may involve in multiple social networks, we shouldn X  X  consider them equally.

Recently, Hao et al.[8] introduced a fra mework combining social networks and collaborative filtering techniques for recommendation in an open domain data set epinions.com . However, similar to existing research on social network based recommender systems, their solution also combines the information using a static weight, without considering how to balance the weights between user-item ratings and social network information based on the context.

Motivated by early research on social network based recommender systems, this paper focuses on a problem that existing solutions have not addressed: how to differentiate the effect of social network info based on recommendation con-text. Without loss of generality, we focus on three variables that characterize the context: item category, the number of observed ratings for the user and characteristics of the neighbors. Our experiments are based on these three char-acteristics. We propose a solution to modify some existing social network based recommendation algorithms so that t he context could be considered.

Based on experimental results, we found: 1) users X  social networks influence users X  behaviors and are useful for infe rring users X  preference; 2) how to balance the weights between user-item ratings and social network information is de-pendent on the recommendation context and neighbors involved. Our proposed approaches using adaptive weights can capture the recommendation context and thus outperform the approaches using a static weight; 3) utilizing social network information can help overcome the negat ive effect of rating variance, especially in an open-domain recommender system; 4) weighted differentiation of each in-dividual in a social network can better model the influence of the social network. Our approach is to start with state-of-the-art social network recommendation al-gorithms, modify them so that product and neighborhood characteristics will be considered when we trade off t he predicted user preferences (without considering social information) and user X  X  neighbors X  preferences.

Assume there are N items, M users in a recommender s ystem. The rating of user i for item j is denoted by r i,j . All the ratings from users to items are denoted by a user-rating matrix R = { r i,j } . For some recommender systems, users are connected in a social network. For example, if user i selects user k as a trustable person or his/her friend, th ere is a directed co nnection from user i to user k . This network can be represented as a M  X  M matrix S = { s i,k } ,where s i,k denotes how well user i trust user k . In the simplest case, s i,k =1means user i trusts user k , otherwise 0. The task is to recommend a list of items to a user, and good items are those that user is likely to purchase, rate high, or click. 2.1 Singular Value Decomposition Singular Value Decomposition(SVD) is a widely used collaborative filtering algo-rithm. The central idea is factorizing the user-item rating matrix into low-rank approximation based on low-dimensional hidden representations of users and items, then utilizing them to predict the missing values in the rating matrix. Let U  X  R D  X  M and V  X  R D  X  N be latent user and item matrices, with column vectors u i and v j representing the latent/hidden vectors of user i and item j respectively. D is the dimension of latent vectors. There are various ways to find the latent representations of users and items. We can view it as a statistical modeling problem, where the observed r atings are generated as follows [12] where N ( x |  X , X  2 ) is a Gaussian distribution with mean  X  and variance  X  2 . The dot product of latent user and item vectors u T i v j is the expected mean of rating r i,j . The latent vectors are assumed to be generated independently bution for users and  X  v is the variance of the Gaussian distribution for items. I is an identity matrix. Hence, the posterior distribution over the user and item latent vectors is given by p ( U,V | R, X  2 , X  2 u , X  2 v )  X  We can find u i and v j by maximizing the above posterior likelihood. The rating for user i and item j , if not available, can be predicted as r i,j = u T i v j . 2.2 Factorization with Social Network In trust-aware recommender systems, use rs express trust for other users. When user u trusts user k , they may have similar preference to some extent, or user k may affect user u  X  X  decisions. Social Trust Ensemble is a probabilistic framework that naturally fused users X  tastes and their trusted friends X  favors [8]. In this framework, the conditional distribution over the observed ratings is modeled as: p ( R,U,V | S, X  2 , X  2 U , X  2 V )  X  The model assumes the ratings are generated from different Gaussian distri-butions. The mean of the Gaussian distribution that generates a rating r i,j is determined by the latent vectors of user u i and item v j as well as the users in user i  X  X  social network, which is denoted as  X  ( i ). The contributions from the two parts are weighted by the parameter  X  i,j .In[8],  X  i,j is fixed as the same value for different user i and item j . It ignores the recommendation context associated with ratings. We will discuss this issue and propose a new solution later. 2.3 Adaptive Weights Based on User and Product Characteristics In formula (2),  X  i,j and s i,k balance the information from users X  own character-istics and their friends X  favors.  X  i,j controls how much the model should trust the user vs. the neighbors, and s i,k controls how much one should trust user k . A straightforward way is to define a fixed value for all the  X  i,j [8]. For instance,  X  i,j =0 . 4 for all i,j pairs means whatever the situation is, a user X  X  own hidden representation contributes 40% and socia l network contributes 60%. However, in real life, how much to trust others depends on many factors. For example, if item k is a movie, user i may ask his/her friends or read reviews before watching it. If item k is a hard drive, the user i may have clear idea about his/her preferences (size, price range) and can judge the quality easily without consulting friends.
To make  X  i,j context-sensitive, we propose to set the value of  X  i,j based on the features of user i and item j using the following sigmoid function: where w  X  R P and f i,j is a P -dimensional feature vector about user i and item j . Each dimension of f i,j corresponds to one feature, and each feature value could be binary or numeric. The features could include user characteristics (gender, location, etc.) and item characteristics (price, category, etc.). The features could also include interactions between users and items. For example, a binary value indicating whether user i is familiar with products in the same category/brand of item j , or the frequency of user i visiting the web pages mentioning product j . The sigmoid function is used to restrict the value of  X  i,j between 0 and 1.
According to the formula (3), the recommendation algorithm decides how much to adopt the social networks X  opinions based on the characteristics of users and items. The rating r i,j can be estimated as follows: We further assume w follows a Gaussian distribution N (0 , X  2 w I ). Thus the max-imum likelihood estimation of the parameters can be learned by minimizing the following loss function (the negative log likelihood of the observation):
The solution can be found using conjugate gradient algorithm. The gradient of u i , v j and w can be calculated as below:  X  X oss  X  u i  X  X oss  X  v j  X  X oss  X  w function.  X  ( i ) is the set of all the users who trust user i . 2.4 Adaptive Weights Based on Individual Neighbors s i,k captures how a particular neighbor k affects the prediction. According to the definition of s i,k and  X  ( i ), we have the following three approaches: Social Trust Model. A straightforward way is adopting a commonly used social network definition of recommender systems, which is so-called social trust For example, in Epinions.com , each user can express his/her Web of Trust by marking some other users as  X  X rustable X . Then the set  X  ( i ) contains all the users who are selected by user i . There are several possible reasons that user i add user k into his/her trust list. First, they might know each other in the real life. Second, user i has read the reviews and ratings provided by user k , and found them valuable or consistent with his/her own tastes. In both cases, social trust network has much potential to be utilized for better inference of users X  preferences. It is wor th mentioning that the trust value is binary in most recommender systems. This means we do not know how much user i trusts each individual in the trust list. If we simply treat all trusted users on user i  X  X  list users by user i in the set  X  ( i ).
 Social Influence Model. The social trust model mentioned above utilizes a user X  X  social network to infer the user X  X  preference. Now we further discuss how we model the social network influencing users X  behaviors. Consider a scenario in the real world, where user i knows nothing about the movie  X  X vatar X  initially. He found more and more people around him have watched the movie, are talking about it and rate it highly. Then there is a high probability that user i will be influenced by people around and go to the theater for  X  X vatar X , even if he usually does not watch Action Sci-Fi movies or movies in general.

To model the influence from one X  X  social network, we restrict s i,k as follows: s i,k =1ifuser k purchased or rated item j ;otherwise s i,k = 0. While predicting r i,j , the social influence network being considered contains all the users who are trusted by user i and also purchased/rated the target item j .
 Neighborhood Model with Implicit Social Network . The above models treat different individual X  X  opinion in the so cial network equally. However, people adopt others X  opinions differently. For close friends that people know well, they trust them highly. In this case, we probably want to use a high value for s i,k .For people they are not familiar with, one may cautiously take the advice. In this case, we may want a low value for s i,k . Even for the same person, people will trust him/her in varying degrees in diffe rent recommendation co ntexts. Besides, social network information is not always available for a recommender system. Based on above two considerations, we propose to utilize user X  X  neighborhoods, which can be found using standard collaborative filtering algorithms, as implicit social network. In this model,  X  ( i ) is the top-N nearest neighbors of user i .To calculate the similarity between users, several similarity measures have been proposed before. Without loss of generality, we use cosine similarity in the space of items. We use U i and U k to indicate the i th and k th row of the rating matrix. Then similarity between user i and user k is defined as sim i,k = U i U k U According to the similarities between us ers, we select top N nearest neighbors for each user i as the implicit social network  X  ( i ). s i,k is defined based on the similarity sim i,k with a normalizing factor so that k  X   X  ( i ) s i,k =1: We collect evaluation data set from Epinions.com which is a consumers review website. Users can review items and prov ide integer ratings from 1 to 5. Epinions also provides the user profiles and item d escriptions, such as item category. As a trust-aware system, users can explicitly express the trust statements in Epinions. Each user maintains a  X  X rust X  list which includes some trustable users.
Researchers have used Epinions data set for various research on recommender systems, however, none of the existing data sets contain all the information we need. The data set used in this paper is a n ew collection we collected by crawling Epinions.com on Oct 2009. We first crawled the ratings and trust statements of the top reviewers and then move to the users who trust top reviewers or who are trusted by top reviewers. We crawled users X  ratings and trust statements following users X  social networks. As a resu lt, we collected a data set that contains 56,859 users, 271,365 items, and 1,154,812 ratings. There are totally 603,686 trust statements. Most of the items are assigned into one category by epinions.com . 10,994(19.3%) users only rate one item. 26,712 users(47%) rated no more than 5 items. We use two sets of binary featur es to represent reco mmendation context. The first is item categories assigned by Epinions.com . The second is the group id that characterizes the number of items the user rated. We classify users into 7 groups (1: X 1 X , 2: X 2-5 X , 3: X 6-10 X , 4: X 11-20 X , 5: X 21-40 X , 6: X 41-80 X , 7: X  &gt; 80 X ). We carry out experiments on two recommendation tasks: Rating Prediction Given a user i and an item j , the task is to predict the Top-K Recommendation In real life, a user wants the system to suggest a
We design the experiments to answer the following questions: 1) How does the setting of the factor  X  i,j affect the performance? 2) How does the selection of a user X  X  social network  X  ( i ) affect the performance? 3) Does weighting each neighbor X  opinion differently improve the performance?
To answer question 1), we compare two different settings of  X  i,j .Oneisto define a fixed value for all the  X  i,j [8]. The other is to assign adaptive weights based on characteristics of users and items (Section 2.3). To differentiate the two settings, we use  X  A  X  for the approaches with  X  i,j that is adaptive for different users and items, and  X  F  X  for the approaches with a fixed value for all  X  i,k . To answer question 2), we compare the three models in Section 2.4 to utilize social network information. The models are denoted by  X  X rust X ,  X  X nfluence X  and  X  X eighborhood X  respectively. To answer question 3), we compare two settings of s i,k when using neighborhood as an implicit social network: using the similarities measure as formula (5) vs. assigning equal weights to all the neighbors.
The algorithms compared in our experiments are summarized as follows:  X  SVD : Baseline approach as described in Section 2.1.  X  F-Trust :Socialtrustnetworkwithafixed  X  value (Section 2.4).  X  A-Trust : Social trust network with adaptive  X  values (Section 2.3).  X  F-Influence : Social influence network with a fixed  X  value (Section 2.4).  X  A-Influence : Social influence network with adaptive  X  values.  X  F-Neighborhood : This approach uses neighborhood as implicit social network  X  A-Neighborhood : This approach uses neighborhood as implicit social network  X  F-Neighborhood-E : A variation of F-Neighborhood that sets s i,k =1 / |  X  ( i ) | .  X  A-Neighborhood-E : A variation of A-Neighborhood that sets s i,k =1 / |  X  ( i ) | . All the approaches are based on the parameter setting  X  u =  X  v =  X  w =0 . 2. For the Neighborhood based approaches, we use the top 10 nearest neighbors. Based on validation set, we found the fixed  X  values (  X  =0 . 3for F-Trust ,  X  =1 . 0for F-Influence ,and  X  =0 . 2for F-Neighborhood .) 4.1 Results on Rating Prediction Table 1 summarizes the results on the whole test data. We conduct experiments on three latent vector dimensions: 5, 10, and 20. There are several things worth mentioning. First, it shows social network information is valuable. Social network based approaches outperformed baseline SVD. Second, it shows A-Neighborhood performs better than other methods. The improvement of using neighbors over SVD is not surprising. Because factorization captures global structure of the rat-ing matrix, while neighborhood captures local regularization of the data space. Combining these complementary information has the same effect as the Netflix competition winner X  X  solution, which combines nearest neighbors with factor-ization models [7]. However, it is inter esting to see that neighborhood models perform better than social influence and social trust models, since neighborhood models do not use any user identified social network info. Third, it shows the performance of every approach improves when we vary  X  based on recommen-dation context (users and items). The improvements are different when using different social network information. O ne possible reason is the sparsity of so-cial networks. In Epinions data set, almost every user has neighborhood, while only 59.5% of ratings in the test data have social trust information and only 18.2% have social influence information. Therefore, the overall performance may be dominated by the rating pairs without explicit social information. That also answers why F-Influence performs best with  X  =1 . 0.
 Performance of Different Social Networks. To focus on the effect of differ-ent social networks, we created t wo test data subsets. One subset ( Trust Subset ) consists of ratings with social trust info. Both Trust and Neighborhood based approaches can be used to predict all the test cases, while Influence based ap-proaches can not be used on part of this subset. Thus the second subset ( Influ-ence Subset ) is much smaller and consists of the ratings with all three kinds of social info available. This data set contains 6618 users and 21,599 ratings. Table 2 shows the results on the two smaller test data sets. 2 We observe that Trust based approaches are comparable with Neighborhood based approaches, although Neighborhood based approaches are clearly better than the others on the whole test data (Table 1). On the influence subset, trust based approaches outperforms Neighborhood based approaches. The results suggest that a recommender system may want to use a hybrid neighborhood-trust network model.
 Performance on Different Users. We analyze how the size of training data per user affects the performance of different algorithms. We group all the users into 7 classes based on the number of observed ratings in the training data. Figure 1 shows the macro RMSE on different user groups. The horizontal axis describes how many training ratings are available for a user in that class. It shows that A-Trust and A-Neighborhood almost consistently outperform SVD and A-Influence , especially when users have less t han 6 ratings. It X  X  surprising that RMSE increases when the number of observed ratings is more than 10. To understand this, we look at the rating variance for each user group. We find that variance and RMSE have the similar trend, both of them tend to increase after observing more than 10 ratings (Figure 1). When user has fewer ratings, those ratings usually are about one or two aspects and thus the variance is small; when the user provide more ratings, those ratings consist of user X  X  multiple interests. When we use all ratings to predict a rating in a specific aspect, products that are irrelevant to the target item may hurt the performance. Therefore, the initial decrease of RMSE is because the increa se of observed ratings makes the model know more about users while the influence of rating variance confuses the model and hurts the performance. It suggests that user ratings on one category may hurt the prediction of user ratings in another category.
 Impact of Parameter s i,k . In our approaches, the parameter s i,k indicates how much user i would trust user k . Table 3 shows the results of two settings of s i,k when using neighborhood as an implicit social network. It is clear that weighting others X  opinions based on the similarity (*-Neighborhood) can achieve better performance than treating all opinions equally (*-Neighborhood-E). 4.2 Further Analysis about Social Influence We did some further analysis by looking at the weights learned (the component values of w ) 3 for different contexts for social recommendation model, and the goal is to answer the following questions: 1) How does the number of observed ratings affect the weight of social netwo rk? 2) How does the size of a user X  X  trust list affect the weight of social network? 3) Is a user more likely to be influenced when his uncertainty about the product is high? (We assume a user may be more uncertain about the product quality if the product quality tends to be subjective, such as for books/movies, instead of objective, such as for PC/memory.)
Figure 2(a) shows that, as the number of training ratings increases, the weights learned by A-Neighborhood become smaller, while the weights learned by A-Trust increase. The weight is a tradeoff between uncertainty about neighbors X  ratings vs. uncertainty about the user X  X  own ratings. In A-Neighborhood , the neighbors found are unreliable when the user has fewer ratings, therefore, A-Neighborhood does not weight neighbors X  opinions high in these cases [1]. In A-Trust , the user X  X  own prediction is more reliable when the number of ratings is high, thus A-Trust does not weight neighbors X  opinions high.

To answer question 2), we introduce a ne w feature, the size of social trust network, for A-Trust . Figure 2(b) shows the weights learned by A-Trust increases with the size of social trust network. That means the model considers larger social trust networks less reliable than smaller ones. One possible reason is that, a large social network is more likely be selected arbitrarily by a user, while a small social network tends to be selected more seriously and hence more reliable.
Figure 2(c) shows the learned weights for different categories. It seems that categories more related to personal experiences tend to have higher weights. Instead, the categories whose rating s are more subjective tend to have lower weights, probably because a user is more uncertain about these products and is likely to be influenced by people they trust. 4.3 Results on Top-K Recommendations A more realistic task for a recommende r system is to recommend K items that users may like. In this section, we simula te the real scenario and investigate the effect of our approaches on the task of top-K recommendations.
Previous works on this task tend to adopt classic IR measures such as P@N and Recall [4][2]. However, without compl ete relevance judgements for each indi-vidual user, standard IR evaluation is almost infeasible. Thus we use a variation of the evaluation method in [7]. We randomly sample 10% from the rating data set i,j,r i,j . Then for each user in the sampled data set, we randomly choose one user-item pair with a 5-star rating. This gives 15,025 user-item testing pairs. To simulate the scenario that we only want to recommend the 5-star items to users, we treat 5-star pairs as relevant. The Epinions data is an open-domain data set with multiple categories. Intuitively, a book and a song are hard to com-pare. We assume that a user wants to purchase one specific kind of item, such as a book, and the system needs to rank items in this category. Therefore, for each testing pair i,j , we randomly sample 1000 additional items which user i has not rated from the same category as item j . For example, if user i purchased a book, we randomly select 1000 additional books as candidates to be ranked. Figure 3 compares four methods: SVD , A-Trust , A-Influence , A-Neighborhood . In real systems, only top K items might be recommended. Therefore, we focus on the top 2% ranking area (top 20 ranked items out of 1000) (Figure 3(b)). First, it shows all the social network based approaches outperform SVD . That means we can benefit from utilizing social network information in top-K recommendation task. Second, it shows A-Influence is not as good as A-Trust and A-Neighborhood due to the sparsity of social network. We investigated three ways to combine social network and matrix factoriza-tion for recommender systems. All three methods work better than the baseline method. This means social network is useful for recommendation. The three methods have different properties. When social trust information is applicable, Social Trust Model always works better than SVD, especially when a user has few ratings. Social Influence Model is not always applicable. When it is applicable, making recommendations using the influence from people a user trust can also improve the performance for two tasks. When the social network information is not available, we can find implicit N Nearest Neighbors and use the Neighbor-hood model to combine neighbors X  predictions with the SVD prediction. This is a first step to adaptively weight the info from neighbors. Future work includes adapting the influence for other social network based recommendation methods. Acknowledgement. This work is supported by the National High-Tech Re-search and Development Plan of Ch ina (863) under Grant 2006AA01Z177, the National Natural Science Foundation of China (NSFC) under Grant No. 60873027, 61021062, and the National 973 Program of China under Grant No. 2009CB320705.
