 Temporal patterns composed of symbolic intervals are com-monly formulated with Allen X  X  interval relations originating in temporal reasoning. This representation has severe disad-vantages for knowledge discovery. The Time Series Knowl-edge Representation (TSKR) is a new hierarchical language for interval patterns expressing the temporal concepts of co-incidence and partial order. We present effective and effi-cient mining algorithms for such patterns based on itemset techniques. A novel form of search space pruning effectively reduces the size of the mining result to ease interpretation and speed up the algorithms. On a real data set a concise set of TSKR patterns can explain the underlying temporal phenomena, whereas the patterns found with Allen X  X  rela-tions are far more numerous yet only explain fragments of the data.
 Categories and Subject Descriptors: I.5 Computing Methodologies: Pattern Recognition General Terms: Algorithms Keywords: knowledge discovery, time series, interval pat-terns
Symbolic interval time series are an important data for-mat for discovering temporal knowledge that can be easily communicated to human analysts [4, 6, 18, 3, 7, 5, 12]. Nu-merical time series are often converted to symbolic interval time series by segmentation [7, 5], discretization [18, 11] or clustering [4, 12]. Patterns mined from symbolic interval data can provide explanation for the underlying temporal processes or anomalous behavior.

Unsupervised pattern discovery in interval time series has largely been performed based on Allen X  X  interval relations [1], e.g. in [6, 3, 5]. The relations were originally developed in the context of temporal reasoning. The input usually con-sists of exact but incomplete data and temporal constraints. Typical problems include determining the consistency of the Copyright 2006 ACM 1-59593-339-5/06/0008 ... $ 5.00. data and answering queries about scenarios satisfying all constraints (e.g. [14]). In the data mining context, how-ever, possibly noisy and incorrect interval data is given and meaningful and understandable patterns are searched [5].
We think that Allen X  X  relations have severe disadvantages when used for pattern discovery from interval time series. As an alternative we proposed the Time Series Knowledge Representation (TSKR) [10], a new hierarchical language for the formulation of temporal knowledge based on interval times series that significantly extends the Unification-based Temporal Grammar (UTG) [16, 17]. We present efficient algorithms for mining patterns expressed with the TSKR using itemset techniques.
The most common tool for expressing temporal patterns from interval data are the 13 interval relations of [1] are: before , meets , overlaps , starts , during , finishes , the corre-sponding inverses and equals . They are commonly used for the formulation of temporal rules involving intervals [6, 3, 5, 9, 13]. Unsupervised rule mining with using Allen X  X  re-lations is commonly performed with variants of the Apriori algorithm. In [6] and [3] interval patterns are constructed combining two intervals or existing patterns with a single relation. The representation of [5] lists all pairwise inter-val relations within a pattern. Allen X  X  relations have severe disadvantages when used for pattern discovery from interval time series, as demonstrated with the following examples. For a more detailed analysis see [10]. (1) Patterns from noisy interval data expressed with Allen X  X  interval relations are not robust: Several of Allen X  X  rela-tions require the equality of two or more interval end points. Small disturbances in interval end points can create pat-terns where a very similar relationship between intervals is fragmented into different relations. Figure 1 shows several examples of almost equal intervals. Figure 1: Examples for different patterns according to Allen that are fragments of the same approximate relation almostequals . (2) Patterns expressed with Allen X  X  interval relations are ambiguous: The same relation of Allen can visually and intuitively represent very different situations. In Figure 2 three very different versions of the overlaps relation are shown as an example. Even more ambiguous is the com-pact representation of patterns from [6, 3], several different descriptions are valid for the exact same pattern (see Fig-ure 3). Figure 2: Intuitively different instances of Allen X  X  overlaps .
 Figure 3: Pattern that can be described by three different compact rules using Allen X  X  relations. (3) Patterns expressed with Allen X  X  interval relations are not easily comprehensible: The representation of patterns with Allen X  X  relations does not follow the Gricean maxims suggested for the representation of knowledge discovery re-sults to humans [15]. For example, the maxim of quantity is violated. Since the compact format is ambiguous, pat-terns need to be expressed by listing the pairwise relations of all intervals [5]. This representation grows quickly with the number of intervals.

The UTG was proposed by Ultsch in [16, 17] and real-ized in [4]. It is a hierarchical pattern language for temporal knowledge discovery. Each level of the hierarchy inhibits an increase in temporal abstraction. The central pattern elements are Events, that describe more or less simultane-ous intervals, and Sequences, that describe a total order of Events. The UTG is more robust than but not as expressible as Allen X  X  relations [10]. The hierarchical structure of the UTG and the separation of temporal concepts over several mining steps, however, offer unique possibilities in relevance feedback during the knowledge discovery process and in the analysis of the results [17]. The TSKR extends these core ideas achieving higher robustness and expressivity.
The TSKR is a hierarchical language for expressing tem-poral knowledge in interval data. The levels successively de-scribe the temporal concepts of duration, coincidence, and partial order.

Definition 1. A symbolic time interval is a triple [  X , s, e ] with  X   X   X  , [ s, e ]  X  T 2 , s  X  e . The duration of a symbolic in-s  X  s and e  X  e with equality iff s = s and e = e .Asym-bolic time interval is maximal if  X  [  X  ,s ,e ]  X  [  X , s, e ]  X  =  X  .If { s, ..., e } X  X  s , ..., e } =  X  the intervals [  X , s, e ] and [  X  ,s ,e ] overlap.

Definition 2. A symbolic interval series I is a set of non-overlapping symbolic time intervals. The duration of I is the sum of the interval durations. A symbolic interval se-quence is a finite set of symbolic time intervals. An itemset interval series is a symbolic interval series where the symbol  X  is replaces by a subset S  X   X  of symbols.

Tones are the basic primitives of the TSKR representing duration. A Tone consists of a label, a symbol, and a sym-bolic interval series indicating when it is observed. A Tone labeled temperature high could be obtained by discretizing a numerical time series with thresholds. Simultaneously oc-curring Tones form a Chord , representing coincidence.
Definition 3. A Chord pattern describes a time interval where k&gt; 0 Tones coincide. We say the Chord c i  X  c j is a super-Chord of c j if c i describes the coincidence of a superset of the Tones from c j . c i  X  c j is the Chord obtained by merging the Tones, | c | is the size of a Chords, i.e. the number of Tones that coincide. The support sup  X  ( c ) of a Chord c is the duration of all maximal observation intervals with duration of at least  X  .

Several Chords are shown in Figure 4(a) in the bottom row describing different coincidences of the Tones A , B ,and C in the top rows. The symbolic interval of AC is maxi-mal whereas that of BC is not. A Chord pattern implies all sub-Chords on the same interval. Usually, larger Chords are more interesting, because they are more specific. We therefore introduce the concept of margin-closedness, a gen-eralization of closed itemsets (e.g. [21]).

Definition 4. A Chord c i is margin-closed w.r.t. a thresh-old  X &lt; 1 if there are no super-Chords that have almost the Several Chords connected with a partial order form a Phrase .

Definition 5. A Phrase pattern is a partial order of k&gt; 1 Chords. A Phrase starts with the first Chord and ends with the last Chord. The Chords within a Phrase are not allowed to overlap. We say the Phrase p i  X  p j is a super-Phrase of p j if p i describes the partial order of a superset of of the Chords of p j and all common Chords have the same partial order. The support sup ( c ) of a Phrase p is the number of observations.
 The two similar Chord sequences in the bottom rows of Figure 4(a) and Figure 4(b) are summarized by the partial order graph of a Phrase shown in Figure 4(c). (a) Some Chords (b) Similar Chords (c) Phrase for both Figure 4: Chords summarize several overlapping Tones. Phrases summarize similar sequences of Chords.

To avoid redundancies one can again only consider margin-closed Phrases analogous to Chords.
The complete TSKM process [10] describes how TSKR patterns can be obtained from numerical time series. Here, we will concentrate on the core steps of mining coincidence and partial order from symbolic interval data.

The input for mining coincidence in form of Chords is a set of Tones with the respective symbolic interval sequence. A Chord is observed whenever at least s min different Tones coincide for a duration of at least  X  . A Chord is frequent, if the total duration of all intervals where it is observed exceeds the minimum support sup min . The mining of Chords thus consists of picking a subset of all Tones and comparing the support with all super-Chords to ensure margin-closedness. This is similar to mining closed frequent itemsets, we there-fore adapt the CHARM [21] algorithm for our purpose. We only describe the basic algorithm and refer to [21] for pos-sible performance improvements.

Algorithm 4.1 performs a depth-first search for margin-closed Chords. The function EXTEND is recursively called given a prefix Chord c p and a set of super-Chords S .The recursion is started with an empty Chord and all trivial fre-quent Chords as possible extensions in Line 1. The prefix Chord c p is extended by all combinations of super-Chords from the set S in the double loop starting in Line 3. The variable  X  c i (Line 4) stores the initial super-Chord extension by c i . The extensions with another Chords c j are filtered by the minimum support in Line 6. The core part of the algorithm is the comparison of the support of the super-Chord  X  c i  X  c j with the support of both sub-Chords  X  c c . The following four cases (Lines 7, 9, 11, and 13) are generalizations of the four properties for itemsets in [21] to margin-closed Chords and will be explained in detail below. In Line 19 the current Chord  X  c i is added to the set of margin-closed Chords if it is not subsumed by an already found margin-closed Chord. The function EXTEND is called re-cursively with the super-Chords  X  S of the current Chord  X  c in Line 22 unless the maximum Chord size is reached. The recursion stops as soon as the set of extensions S is empty.
The four different cases of the support comparison are de-picted for an example in Figure 5. Let A, B, C be some Tone patterns. Only one instance of each Tone pattern is shown for demonstration purposes, the length and over-laps of the intervals are meant to be representative for the whole data set. For our example, let the arguments to the EXTEND function be the trivial Chord c p = A and the set of super-Chords be S = { AB, AC } . For the first extension  X  c = A  X  AB = AB the support of  X  c i  X  c j = AB  X  AC = ABC needs to be compared to the support of  X  c i = AB and c = AC .

The first case in Line 7 is shown in Figure 5(a). The super-Chord ABC has almost the same support as both sub-Chords. When AB or AC are observed, so is almost al-ways ABC . We can effectively replace both sub-Chords with the super-Chord by adding c j = AC to the current exten-sion  X  c i and excluding it from further processing in the inner loop. The second case in Line 9 is shown in Figure 5(b). While AB has the same support as ABC , AC has signifi-cantly more. Again we can add AC to the current extension  X  c because whenever AB occurs, so does AC .Wecannot delete AC from S in this case, however, because combina-tions with other Chords still need to be considered. The third case in Line 11 is shown in Figure 5(c). The Chord AB has significantly more support than ABC , while AC does not. The super-Chord ABC is possibly a closed Chord, it needs to be added to the set of immediate super-Chords of  X  c i = AB for the recursive function call. The Chord AC can be excluded from further processing, because whenever Algorithm 4.1 Depth-first margin-closed Chord mining. Input: Output: 1: S := { t  X  T | sup ( t ) &gt; = sup min } 2: R := EXTEND (  X  ,S,  X  ) 3: for all c i  X  S do 4:  X  c i := c p  X  c i  X  S :=  X  5: for all c j  X  S with j&gt;i do 6: if sup  X  ( X  c i  X  c j )  X  sup min then 8:  X  c i :=  X  c i  X  c j S := S \{ c j } 10:  X  c i :=  X  c i  X  c j 12:  X  S :=  X  S  X  X   X  c i  X  c j } S := S \{ c j } 13: else 14:  X  S :=  X  S  X  X   X  c i  X  c j } 15: end if 16: end if 17: end for 18: if |  X  c i | X  s min and  X  c  X  R with  X  c i  X  c holds sup 19: R := R  X  X   X  c i } 20: end if 21: if |  X  c i | &lt;s max then 22: R := EXTEND ( X  c i ,  X  S, R ) 23: end if 24: end for it is observed, so is AB . The last case in Line 13 is shown in Figure 5(d). Both AB and AC have significantly more support than ABC . ABC is added to the set of possibly closed super-Chords for the recursion and no pruning can be performed.

In [21] the CHARM algorithm is reported to scale up linearly with the number of transactions. We observed sim-ilar behavior with Algorithm 4.1. The parameter  X  needs to be chosen according to the application domain. The minimum duration of a Chord needs to be long enough for an expert to consider the coincidence of several prop-erties meaningful. The minimum support and the threshold for margin-closedness directly control the number of Chords found. They should be set to larger values first and be made smaller if the results are too coarse.
Phrases are similar to Episodes [8] but describe a partial order of time intervals instead of time points. The mining of margin-closed Phrases can be performed in several steps Figure 5: The four cases of Algorithm 4.1 for mining margin-closed Chords. The support of the Chords AB and AC is compared to the support of the com-mon super-Chord ABC . similar to the closed partial orders of [2]. Algorithm 4.2 shows the high level overview of our proposal.
 Algorithm 4.2 High level algorithm to find margin-closed Phrases.
 Input: Output: 1: Convert C to itemset interval series I using . 2: Mine pairs ( s, T ) composed of a closed sequential pat-3: Create margin-closed maximal pairs ( S, T )where S is 4: Build partial order of Chords for each set S .
First, the interval sequence of Chords is converted to an itemset interval series in Step 1. One itemset is created for each interval of minimum duration where no Chords change. The itemset contains all symbols of the currently active Chords.

For Step 2 the single long itemset interval series needs to be implicitly converted to a set of shorter sub series by creating a sequence of intervals. Any standard algorithm for closed sequence mining, e.g., CloSpan [20], can then be used with the restriction to pick at most one item per itemset to exclude overlapping Chords. This also speeds up the mining of closed sequential patterns, because it reduces the search space to total orders of single items. As a result we obtain pairs ( s, T ) composed of a closed sequential pattern s occurring in the transaction windows T .

The mining of margin-closed partial orders (Step 3) is the largest deviation from [2] where pairs are formed consisting of a set of closed sequential patterns and the list of transac-tions in which they all occur. The pairs were required to be maximal in the sense, that there is no additional sequential pattern, that occurs in all transactions and no additional transaction in which all patterns occur. The sequential pat-terns were grouped by first considering all patterns with the same list of transactions and then adding any pattern with a superset of transactions that do not make the group re-dundant. Such groups are closed w.r.t. frequency and form a concept lattice. Each group of closed sequences can then be converted to a partial order.

When adding the constraints for margin-closed pairs, this algorithm cannot be used anymore. For each group not only sequential patterns with the same or longer transaction lists need to be considered, but also patterns with only slightly shorter lists. For a valid group of patterns, the intersec-tion of all transaction lists is allowed to be at most  X   X  percent shorter than the longest. Since all sequential pat-terns in a group influence the intersection, the search space for the groups consists of all 2 k combinations of k closed sequences. Interestingly, this corresponds to the problem of finding margin-closed itemsets, if we consider each closed sequential pattern an item and each group of sequential pat-terns an itemset. We can therefore again adapt the CHARM [21] algorithm to tackle this problem efficiently. Only minor modifications to Algorithm 4.1 are necessary, we therefore refer the interested reader to [10] for the complete listing.
For the last step of converting a set of sequences into a partial order necessary conditions are given in [2] making the construction of the final Phrase representation straightfor-ward, see [10] for a simple algorithm. The mining of margin-closed Phrases is the computationally most demanding task of the TSKM, because the number of closed sequential pat-terns used as items can be quite large. Reducing the num-ber of closed sequential patterns with constraints on mini-mum length and minimum frequency is advisable. Similar to Chord mining, using higher values of  X  will dramatically reduce the search space and the runtime.
We demonstrate the efficacy and efficiency of the TSKM on a dataset from sports medicine. More experiments with video data can be found in [10]. We compare the result-ing patterns to results obtained using Allen X  X  relations. For Allen X  X  relations we used the pattern format of [5] to avoid ambiguity. Support was measured based on counting occur-rences in windows to be comparable with the Phrase mining. We further pruned the set of Allen patterns applying the concept of margin-closedness in a brute force post-processing step.
 The data was collected from tests in professional In-Line Speed Skating. An athlete performed a standardized indoor test at a speed of 7,89m/s on a large motor driven tread-mill. EMG (Electromyography) and kinematic data were measured for 30 seconds. The 6-dimensional kinematic time series with angles and angular speeds of the hip, knee, and ankle joints was clustered into 3 states. The Tones were la-beled swing , glide+push ,and recovery . Three EMG time se-ries describe the activation of leg muscles mainly responsible for forward propulsion: Medial Gastrocnemius ( Gastroc ), Vastus Medialis ( Vastus ), and Gluteus Maximus ( Gluteus ). Each was discretized with the Persist algorithm [11] to ob-tain the Tones low , high ,and very high . One series describes the foot contact with Tones on and off obtained from a pressure sensor in the skate. Non-overlapping windows cor-responding to the 19 movement cycles of the experiment were used. The goal was to identify typical muscle acti-vation patterns during the cyclic movement with complex inter-muscular coordination patterns. The experimental re-sults were evaluated by an expert.

For the TSKR patterns we first mined Chords with a minimum duration of 50ms. Shorter phenomena related to muscle activation are physiologically not plausible. The minimum size was set to 3, the maximum size is naturally bounded by the 5 dimensions of the interval series. With a minimum support of 2% a total of 70 Chords was found. Re-stricting the patterns to closed Chords reduced the number to 60, mining margin-closed Chords with  X  =0 . 1 returned 18 patterns. At this point it is difficult to decide automati-cally whether rare large or small frequent Chords are better. The lattice of Chords was presented to the expert, who se-lected and labeled 9 as the most interesting.

Using only these Chords we found 30 closed sequences with a minimum length of 2 and a minimum frequency of 10 that were merged into 20 closed Phrases. When using  X  =0 . 1 15 margin-closed Phrases were obtained. Again we presented the lattice of Phrases to the expert who selected the most specific and the second most general patterns as the most interesting. The general Phrase present in 17 out of the 19 movement cycles is shown in Figure 6(a) with images from the skating experiments. The advantages of the hier-archical structure of the TSKR is shown by unfolding one Chord from the Phrase to show the coinciding Tones and one Tone to show the original numerical time series with the thresholds for discretization. The more detailed Phrase shown in Figure 7 was observed in 10 cycles, it describes a total order of 8 Chords and provides details on the successive activation of the three major leg muscles.

The pruning by margin-closedness largely reduced the num-ber of patterns so they could easily be analyzed manually to trade off pattern size vs. pattern frequency. We analyzed the search space of Chords in dependence of the parame-ters to quantify the pruning effects. In Figure 8 the number of Chords found is shown on the left for different values of the parameter  X  determining margin-closedness. The value of 0 . 1 as used for the analysis above, effectively prunes the size of the result down to a manageable number of patterns that can be analyzed manually. Using lower values would result in a dramatic increase of patterns, using higher val-ues results in less than five patterns for  X &gt; 0 . 18. We also measured the number of recursive calls to the EXTEND function as an estimate of the runtime of the algorithm in-dependent of implementation and hardware. As is visible on the right of Figure 8 the concept of margin-closedness does not only reduce the size of the result set, it also effectively prunes the search space during mining and speeds up the computation. This is because notion of margin-closedness more often enables the activation of the cases 1-3 in Algo-rithm 4.1 that have a pruning effect. For  X   X  0 . 2 less than 10% of the functions call of strict closed Chord mining are needed.
 We searched the same data for patterns expressed with Allen X  X  relations using a minimum frequency of 10 and a minimum size of 2 resulting in 4208 distinct patterns. Prun-ing by enforcing margin-closed patterns with  X  =0 . 1re-turned 487 patterns. There were 8 patterns of size 9 and one of size 10. The analysis was performed by the expert looking at an example of each pattern as shown for the size 10 pattern in Figure 6(b) because the listing of all 45 or Figure 8: Effects of different values of  X  determining margin-closedness on the number of Chords (left) and the complexity of the search (right). 36 pairwise relations did not offer a comprehensible descrip-tion. While the relation of the Gluteus muscle activity to the movement phases was recognized as valid, the fact that no information on the Vastus muscle was given and the Gas-troc muscle appeared only with low activity rendered the pattern useless to the expert. The fact that the three move-ment phases appear in the displayed order and the two Foot states alternate is already obvious from the input data and offers no information gain.

Because a correspondence of muscle activity to movement related information was sought we filtered the pattern set ex-plicitly for patterns containing the states high and very high for the Vastus and Gluteus muscles. None of the 5 patterns found contained useful information on the foot contact. Fur-ther analysis with less restrictive constraints suggested, that patterns with many muscle states offer only very limited in-formation on movement and foot contact and the other way around. The relation of muscle related interval series to movement related interval series, all of which are subject to noise from the recording process and the discretization pro-cedure, did not seem to be well representable with Allen X  X  relations.
The mining algorithms for Allen X  X  relations are all based on the A-priori principle from association rule mining. The patterns in [5] are build in a breadth first manner. It is well known, however, that this approach is inferior in per-formance to depth first search for long patterns [19] as per-formed by our algorithms. Nevertheless, the search for closed frequent itemsets can become infeasible for a large number of items. The novel concept of margin closedness helps to partly alleviate this complexity. It serves as a sampling of the results and a pruning of the search space to avoid re-dundancy. Coarse results can be found very fast and refined if necessary. We expect margin-closed patterns to be useful in other itemset mining tasks as well.
 Phrases are similar in structure to sequential patterns. Each time point of a symbolic interval sequence could be considered a transaction with an itemset holding one item for each symbolic interval that contains the time point. This leads to very long transactions (for the Skating about 1,500 itemsets per transaction) that are highly redundant. Apply-ing standard sequential pattern mining techniques to this data would be a large waste of computing resources. Using our novel data model conversion to itemset intervals greatly reduces this redundancy. Still, test with algorithms for se-quential pattern were extremely slow compared to the search for Phrases with our semantically motivated search space re-strictions.

In [2] it is shown how grouping of closed sequential pat-terns leads to closed partial orders. It is tempting to as-sume that margin-closed sequential patterns will also lead to margin-closed partial orders, but simple examples show that this is not the case (see [10] for details).
The Phrases were considered valid and interesting by the expert. Of particular importance is the connection of ex-ternal variables describing the movement with the internal observations on muscle activation made by the Chord pat-terns that could not be discovered with Allen X  X  relations. The graphical representation of the Phrases offered a great benefit over simply viewing the input time series, as is com-mon practice in the analysis of such data in sports medicine.
We presented efficient and effective unsupervised mining algorithms for the new temporal pattern language TSKR with algorithms adapted from itemset and sequential pat-tern mining. The pruning of the search space with margin-closedness reduced the number of patterns presented to the analyst and speeded up the mining. Mining TSKR patterns was demonstrated to be more efficient, more effective, and more meaningful than Allen X  X  relations in a real life example.
