 Advances in data collection and storage capacity have made it increasingly possible to collect highly volatile graph data for analysis. Existing graph analysis techniques are not ap-propriate for such data, especially in cases where stream-ing or near-real-time results are required. An example that has drawn significant research interest is the cyber-security domain, where internet communication traces are collected and real-time discovery of events, behaviors, patterns, and anomalies is desired. We propose M ETRIC F ORENSICS , a scal-able framework for analysis of volatile graphs. M ETRIC F SICS combines a multi-level  X  X rill down X  approach, a collec-tion of user-selected graph metrics, and a collection of anal-ysis techniques. At each successive level, more sophisticated metrics are computed and the graph is viewed at finer tem-poral resolutions. In this way, M ETRIC F ORENSICS scales to highly volatile graphs by only allocating resources for com-putationally expensive analysis when an interesting event is discovered at a coarser resolution first. We test M ETRIC F
ORENSICS on three real-world graphs: an enterprise IP trace, a trace of legitimate and malicious network traffic from a research institution, and the MIT Reality Mining proximity sensor data. Our largest graph has  X  3M vertices and  X  32M edges, spanning 4 . 5 days. The results demonstrate the scala-bility and capability of M ETRIC F ORENSICS in analyzing volatile graphs; and highlight four novel phenomena in such graphs: elbows, broken correlations, prolonged spikes, and lightweight stars.
 H.2.8 [ Database Applications ]: Data mining; E.1 [ Data Struc-tures ]: Graphs and networks Copyright 2010 ACM 978-1-4503-0055-1/10/07 ... $ 10.00. Algorithms, Design, Performance, Experimentation.
 Graph mining, temporal analysis, volatile graphs
Given a stream of duration-stamped communication-or contact-events, how can we find suspicious behaviors, pat-terns, and anomalies in real-time or near real-time? How can we do attribution? For example, in a computer communica-tion network, we would like to detect the interval that we are under attack, as well as the offending IP address (or ad-dresses).

We define a  X  X olatile graph X  to be a stream of duration-stamped edges (in its simplest form:  X  v src , v dst , start time, duration  X  ), where we assume that there are potentially infi-nite number of nodes, and that edges may appear and disap-pear. Examples of volatile graphs include IP-to-IP commu-nication graphs (either at the backbone or at the access-link) as well as physical proximity graphs (e.g., measured by blue-tooth connections).

This paper introduces M ETRIC F ORENSICS which given a volatile graph is able to characterize it and detect interest-ing events at multiple levels (both temporally and topologi-cally). At the global level, M ETRIC F ORENSICS computes and monitors a suite of graph metrics (e.g., the number of ac-tive nodes and links, the first few eigenvalues, their wavelet transforms, etc) at regular intervals. Only when a deviation from usual behavior is flagged, M ETRIC F ORENSICS follows through with a  X  X rill down X  approach, where the offending graph is studied at finer temporal and topological resolu-tions. In particular, flagged sub-graphs (community-level) and even individual nodes (local-level) are examined using more sophisticated and time-consuming metrics and anal-ysis techniques (such as ego-net analysis). Thus, M F
ORENSICS is able to do attribution of the rare event, while maintaining high processing speed.

The contributions of M ETRIC F ORENSICS are as follows:
M ETRIC F ORENSICS satisfies the six requirements of an emerg-ing application. They are: 1. Requirements for the application: M ETRIC F ORENSICS  X  2. Approach: M ETRIC F ORENSICS is a multi-level graph-3. Deployment: M ETRIC F ORENSICS has been released to 4. Evaluation: M ETRIC F ORENSICS was evaluated on three 5. Pragmatic issues: M ETRIC F ORENSICS  X  framework is de-6. Comparative evaluation: Existing approaches either fail
The outline of the paper is as follows: Section 1 provides an introduction to this work. Section 2 presents an overview of the related work. Section 3 describes our proposed frame-work, M ETRIC F ORENSICS . Section 4 presents experimental results on three real-world volatile graphs. Lastly, Section 5 provides some concluding remarks.
We divide related work into four parts: (1) mining static graphs, (2) mining time-evolving graphs, (3) anomaly detec-tion on graphs and finally (4) mining time series.

Mining Static Graphs. This work can be grouped into three levels. First, on the graph-level, there are discoveries on the statistical properties of some global metrics (e.g., de-gree distribution, diameter, first eigenvalue, etc) of the whole graph [3, 15, 8, 28]. Next, at the subgraph level, research has focused on frequent substructure discovery [35], graph par-titioning, and community detection (eg [16]. Finally, at the individual node/edge level, past work includes link predic-tion [26], ranking [17], and proximity [33]. Note that almost all of the previous work deals with only one of the three levels, while M ETRIC F ORENSICS works on all the levels in a  X  X rill down X  way.

Mining Dynamic Graphs. Most work here has focused on community evolution [4, 13] and dynamic tensor analy-sis [31]. Again, most of the above analyze only one of the three levels (graph level, subgraph level, or node/edge level), and, typically, on a single, fixed time-granularity, in contrast to M
Anomaly Detection on Graphs. Gibbons and Matias [18] proposed a fast method to compute  X  X eavy-hitters X  (that is, frequently-occurring items, like source-IP addresses). Lakhina et al. [24] suggested using entropy to characterize a connec-tivity matrix. Bunke et al. [9] use similar measures to spot dif-ferences between connectivity matrices and to report anoma-lies when these differences are too high. Additional work includes methods based on the minimum description length (MDL) principle [29, 10], classification-based methods [27], probabilistic measures [14], and spectral methods [21, 20]. In OddBall [2], they explicitly focus on the  X  X ndividual X  node-level by examining the 1-step-away ego-networks. For a com-prehensive list, see a recent survey [12]. All such methods can be folded within M ETRIC F ORENSICS framework at the appropriate topological and temporal levels.

Mining Time Series. Related work here includes click-through rate estimation [1] and outlier detection [25]. Again, M
ETRIC F ORENSICS can naturally incorporate these methods into its framework, such as BGP-Lens [30] for finding pat-terns and anomalies in Internet routing updates.
The flowchart for M ETRIC F ORENSICS is depicted in Fig-ure 1. M ETRIC F ORENSICS is comprised of three distinct com-ponents: (1) a suite of graph metrics, (2) a collection of anal-ysis techniques, and (3) a multi-level approach. We will de-scribe each of these below. But first, we will briefly discuss M
ETRIC F ORENSICS  X  data model for representing volatile graphs.
Highly volatile graphs, by definition, accumulate massive numbers of vertices and edges over time. However, during a given window of time, only a fraction of these vertices and edges are active. The M ETRIC F ORENSICS data model takes advantage of this behavior.
Entities are represented as vertices in an ever-changing graph; they can appear or disappear at any time. If a vertex does not have any relationships in the current graph, it is effec-tively discarded until it forms new relationships. We do not assume knowledge of the full set of vertices, or even the total number N of vertices at any time during analysis. Likewise, relationships are represented as edges in the graph. Edges can be weighted or unweighted. They can have duration or be instantaneous. Multiple edges can exist between a pair of vertices at a given time (i.e., we are dealing with multi-graphs). Vertices and edges can have attribute data associ-ated with them. It is assumed that in some cases these at-tributes require significant resources to access or analyze.
A snapshot graph is defined by its vertices V t and edges E which are active at time t . A snapshot graph can be viewed as an N  X  N adjacency matrix representing the graph at time t . The dynamic system is then comprised of many such matri-ces in sequence. Each time a vertex is added or deleted, or an edge appears or disappears, or an edge-weight is changed, a new snapshot graph is generated. 1
Due to the high volatility of the data, it is neither com-putationally feasible nor analytically worthwhile to consider snapshot graphs in isolation. A summary graph summarizes all snapshot graphs a during time period T . It is represented by its vertices V T and edges E T . Many strategies are avail-able for combining snapshot graphs, including:
Data containing instantaneous edges (i.e., with duration of zero) will generate trivial snapshot graphs consisting of one edge at a time.
The frequency with which summary graphs are generated and analyzed is a parameter in M ETRIC F ORENSICS , and plays an important role in the multi-level component of the frame-work (see Section 3.4). Summary graphs can be generated after a fixed number of distinct snapshot graphs or after a fixed period of time. Our experiments demonstrate that the framework works across a reasonably large set of summary graph frequencies, and as a heuristic we tend to choose the frequency so that each summary graph represents no more than 100,000 unique snapshot graphs.
At the heart of M ETRIC F ORENSICS is a suite of graph met-rics. These metrics are of varying levels of complexity and computational intensity. They are broadly classified into three groups based on their topological granularity: (1) global , (2) community , and (3) local . The framework is readily extend-able to include any graph metrics. Moreover, it is not neces-sary to run all the metrics at all times.
At the coarsest topological level, global metrics generally measure high-level properties of the graph and are largely agnostic to properties at the individual vertices. Table 1 lists a subset of M ETRIC F ORENSICS  X  global metrics. Several of the metrics have both unweighted and weighted versions; only the unweighted versions are listed here. Most are very fast to calculate, scaling linearly with the number of active vertices ( N T = | V T | ) or edges ( M T = | E T | ) in the time interval T . Currently, all of our implemented global metrics have com-plexity at most O ( N T log N T + M T ) . Table 1: A subset of M ETRIC F ORENSICS  X  suite of global graph metrics
A second collection of metrics examines the graph at its community-structure level. These algorithms are typically more computationally expensive than those for the global metrics. Many approaches to community discovery in graphs exist [19]. The results presented in Section 4 are based on Cross-Associations (XA) [11]. Regardless of the chosen com-munity discovery algorithm, the metrics are similar.
Some community metrics are static, such as the fraction of vertices in the largest community or the number of commu-nities. Others track changes in community structure, such as the variation of information [22] between successive assign-ments. If a particular vertex is of interest, then changes in its community can be easily tracked between successive sum-mary graphs. The final group of metrics focuses on individual vertices. Local metrics often run too slowly to be applied to every vertex in each summary graph. Examples of local metrics include centrality metrics, OddBall [2], and impact metrics (e.g., leaving a single vertex out of the graph and recalculat-ing other metrics to determine the impact of the vertex).
The second component of M ETRIC F ORENSICS is a collec-tion of analysis techniques. Broadly speaking, they fall into three categories: (1) single metric analysis , (2) coupled metric analysis , and (3) non-metric analysis . This component is sim-ilar to the suite of metrics in that it can easily accommodate the addition of other techniques.
Values for an individual metric across multiple summary graphs can be viewed as a time series. M ETRIC F ORENSICS leverages the multitude of time series analysis techniques to identify behaviors, events, and anomalies. For example, an Autoregressive Moving Average (ARMA) Model can be used to identify metric values that are abnormally large or small given recent values. Fourier analysis can identify periodic behavior, such as daily trends in graph properties. Wavelet analysis tools such as BGP-lens [30] identify patterns and anomalies in metric values. Other single-metric tools include lag plots, outlier detection techniques such as Local Outlier Factor [7] and fractal dimension analysis [6].
Techniques in this category consider two or more metrics in unison. The simplest such technique is correlation anal-ysis. If K metrics are computed for a series of summary graphs, a K  X  K matrix, C , can be computed where C ij is say the Pearson correlation between metrics i and j . Large values of | C ij | can identify redundant metrics. If such met-rics vary widely in runtime complexity, then the slower ones can be omitted from future calculations. However, it is often useful to retain both metrics; if the computed values of two metrics typically demonstrate high correlation, a sequence of summary graphs that shows lower correlation is identified as an interesting event.

A useful example of coupled metric analysis involves vari-ous summary-graph edge-weighing strategies (Section 3.1.3). In particular, if metrics are computed simultaneously on sum-mary graphs constructed using different strategies, such as Sum and Max , the resulting time series data are often highly correlated. In this case, a summary graph for which the metric-values do not demonstrate their typical relationship can be identified as an interesting event.

Other techniques can be applied to coupled metric data, such as outlier detection or clustering. For example, a clus-tering algorithm like k -means can be applied to two time se-ries. Small clusters are labeled as interesting events or behav-iors (see Section 4 for details).
Techniques in this category do not involve the computed metrics (as described in Section 3.2). These techniques are not applied until an interesting event is discovered using the above techniques, but they are often useful for understand-ing the events. The primary existing techniques in this cate-gory are visualization tools and attribute data inspection.
M ETRIC F ORENSICS currently includes a novel 3D visual-ization tool that can display summary graphs rapidly and in an informative layout. It highlights vertices with high connectivity, and is used to quickly characterize a sequence of summary graphs that have been identified as interesting. The tool uses position (source vs. target vertex), size, and color to differentiate between vertices according to a user-specified collection of attributes. For example, the size of a vertex can show its degree, while the color can depict the ver-tex X  betweenness centrality. See Figure 3a for a 2D snapshot of a summary graph by our visualization tool.

The second non-metric analysis technique involves inspec-tion and processing of available attribute data. Vertices and edges in volatile graphs can have attributes. In some cases, more detailed attributes may be available at an increased cost of access. These should be retrieved only when necessary. For example, IP communication traces often have at least partial packet contents, but these are usually not available for fast inspection. While it is not feasible to consider every packet in detail, M ETRIC F ORENSICS can identify periods of time and sets of edges that may be of interest based on graph metrics or community structure. A user can then apply a full packet capture (a.k.a. pcap ) analysis tool to the identified re-gions. 2
M ETRIC F ORENSICS  X  multi-level approach allows for effi-cient use of computational resources. Due to the volatile na-ture of our data (e.g., IP network traces) and the varying com-plexity of metrics and analysis techniques, it is necessary to rely on fast techniques at coarse granularities (both tempo-rally and topologically) to identify regions of interest, and then apply complex algorithms and tools only to interest-ing regions. M ETRIC F ORENSICS uses multiple levels in three distinct dimensions: (1) time , (2) topology , and (3) analysis au-tomation .
 The general approach involves performing M ETRIC F OREN -SICS  X  metrics and analysis multiple times at different levels, starting with the coarsest and becoming finer at each itera-tion. Only those time periods identified as interesting at a coarse level are passed down to be analyzed at the next finer level. We generally identify three levels, based on the topo-logical granularity levels (namely, global, community, and local). However, M ETRIC F ORENSICS supports any number of levels based on time granularity.
The temporal scale of M ETRIC F ORENSICS can be controlled in two ways. First, the period of time in which summary graphs are analyzed can be adjusted. At the coarsest level, M
ETRIC F ORENSICS operates on all available data, which in many cases can include streaming data. When an event is detected, only the relevant portion of the data is examined at finer levels. 3 Second, temporal granularity is adjusted by modifying the interval between summary graphs. At the coarsest level, summary graphs are generated less often than in finer levels. This  X  X rill-down X  approach is used to pin-point changes in behavior of specific vertices (i.e., do attribu-tion).
The axis of refinement here involves which set of graph metrics are applied. At the coarsest level, only the global topology of the graph is considered. Communities and in-dividual nodes are not generally considered, with the excep-tion of a small number of global statistics that track the iden-tities of high-degree vertices. The global metrics are scalable and can be computed efficiently on each summary graph. When an event is discovered at this level, the period of in-terest is passed to the next (finer) level.

At the finer (regional) level, community-level metrics are calculated. By identifying communities that exhibit change, M
ETRIC F ORENSICS can discard many vertices that have not changed their behavior. This information is subsequently used at the finest level of refinement, where local metrics are computed on vertices in the identified communities.
The final difference between levels in M ETRIC F ORENSICS is the selection of analysis techniques. Some techniques, such
An example of a full pcap analysis tool is Wireshark : http://www.wireshark.org/.
In a streaming setting, this is accomplished by maintaining a circular buffer that stores a fixed number of recent snapshot graphs. as ARMA, are fully automated. These can be applied at any refinement level. Other tools and techniques like visualiza-tion and attribute analysis require user interaction and should only be applied to small sets of summary graphs. We implemented M ETRIC F ORENSICS in Java (with some MATLAB modules) and ran experiments on a commodity machine Intel Core 2 Duo @2.93GHz with 4Gb of memory. Our experiments answer the following questions: (1) Can M
ETRIC F ORENSICS detect interesting events including anoma-lies? (2) Do the discovered interesting events tell us something new about the nature of volatile graphs? (3) Is M ETRIC F SICS scalable and amenable to real-time (or near real-time) execu-tion? Table 2 lists the graphs used in our experiments. ENTP is IP traffic collected at the perimeter of an enterprise network over 4.5 days in 2007. RMBT is the MIT Reality Mining X  X  blue-tooth connections collected over 12 months. 4 LBNL is IP traffic collected on an internal enterprise network during a busy hour on 2004.12.15 on port #3 (TCP and UDP compres-sion processes). 5 LBNL data includes scanning activities.
We discuss some experiments at the global-level of our volatile graphs here. For brevity, we have removed many of results (such as our Fourier and wavelet analyses).
Figure 2 depicts the two largest eigenvalues in the ENTP summary graphs. In particular, it shows the  X  1 ,  X  2 relation-ship under three different edge-weighing strategies. In the maximum connections strategy, the weight between vertices i and j is equal to the maximum number of simultaneously ac-tive connections between i and j during the summary graph X  X  time interval T . Under the number of connections strategy, the weight between i and j is equal to the number of active con-nections between i and j when T started plus the number of connections between i and j during T . In the sum of bytes strategy the weight between i and j is the normalized sum of the flow-weights (i.e., number of bytes sent and received) when T started and the weights of flows that occurred be-tween i and j during T . Regardless of the summary graphs X  edge-weighing strategy, there are special regions where  X  is stable and  X  2 is changing, or vice versa. We also observe these special regions in the LBNL trace (see Figure 3), where they are elbow-shaped.

The large eigenvalues of a weighted graph typically cor-respond to either a single heavy edge, a vertex with high weighted degree, or a component with a large total weight. Thus, when we see a period of time when  X  1 is changing but  X  2 is steady, it is a result of the currently dominant phe-nomenon changing while the secondary phenomenon is sta-ble (e.g., a single heavy edge changing weight while the struc-ture of the giant component is steady). We refer to this as the  X  X lbow X  pattern because it appears as elbow-like structures (Figure 3). A trivial example here is a pair of heavy edges, remains constant and w ( c, d ) decreases such that eventually w ( c, d ) &lt; w ( a, b ) , the corresponding eigenvalues will switch http://reality.media.mit.edu/ http://www.icir.org/enterprise-tracing/download.html events. Runtime is M ETRIC F ORENSICS  X  wall-clock time. patterns where  X  1 is stable and  X  2 is changing, or vice versa. so that  X  1 is always correlated with the larger-weight edge. Thus, during the initial period  X  1 tracks the changing w ( c, d ) ; but once w ( c, d ) &lt; w ( a, b ) ,  X  1 becomes stable and  X  the ( c, d ) edge.

Depending on the edge-weighting strategy employed, these periods may appear simply as horizontal or vertical sections (Figure 2) or they may appear as elbows (Figure 3). Regard-less, the observed behavior is one phenomenon (heavy edge, heavy vertex, or heavy component) that is changing while another phenomenon remains stable.
We computed the pairwise Pearson correlation coefficients between values of global metrics. For example, given sum-mary graphs G T 0  X  X  X  G T t we computed where max wgt is the maximum edge weight. Figure 4 de-picts the top-14 most correlated global metrics with  X  1 for the ENTP data. It shows that normally  X  1 is highly correlated with maximum edge weight; however in Region 1 of Fig-ure 2a (where  X  1 is stable but  X  2 is changing), this correlation disappears. Indeed  X  1 is not correlated with any graph met-ric in this region. We observed this behavior on other data sets and other eigenvalues. For instance,  X  2 is highly corre-lated with the fraction of vertices in the largest component, except in regions like Region 2 of Figure 2. In these special regions (where  X  1 is changing but  X  2 is stable),  X  2 is highly correlated with the number of updates (e.g., addition or dele-tion of vertices and edges). We refer to this phenomena as  X  X roken correlations X  and observe that there are meta-level correlations between broken correlations and elbow patterns described above.
Intuitively, fractal dimension [6] measures the burstiness of a collection of points. Human behavior is typically bursty [5] (e.g., disk accesses [34], email responses [23]). In our case, the points are in 1-dimensional space and correspond to com-munications at different times. For points that are uniformly distributed in time, the fractal dimension is near the dimen-sionality of a line (i.e., D  X  1 ). For points that are all on the same time-tick (creating a single burst), the fractal dimen-sion is the dimensionality of a point, D = 0 . The Cantor set (constructed by recursively deleting the middle third of a line segment) has fractal dimension D = log(2) log(3)  X  0 . 63 . Pack-ets due to human behavior typically have fractal dimension somewhere in [0.7, 0.9] (with self-similar bursts at different time scales).

We computed the fractal dimensions of several graph met-rics on our summary graphs (which can be regarded as a cloud of points on the time axis). Fractal dimensions were calculated for (disjoint) windows of width w = 3 hours on the ENTP data, w = 5 minutes on the LBNL data, and w = 10 days on the RMBT data. These parameters were selected so that each window contains  X  500 events (which is roughly the minimum size that fractal dimension analysis makes sense). The fractal dimension was stable for most time periods, around 0.9 on ENTP and LBNL and around 0.8 on RMBT data. This result suggests that RMBT data is more bursty than others. Interestingly, the fractal dimensions for some metrics (such as number of additions, number of deletions, number of up-Figure 3: (a) The LBNL graph at 2004.12.15 20:06:51.348. The vertex colors indicate the recent position of the ver-tex: source (green) vs. destination (red). The elevation represents the same role but considers the entire history of the vertex. If the vertex is quiet, it slowly moves from green or red back to black; but will not change elevation. The IPs with names either have high weight at 2004.12.15 20:06:51.348 or have had high weight within the last 50 sec-onds. High weight is defined as 50% of the current max-imum weight in the graph. (b)  X  2 versus  X  1 in the LBNL summary graphs (generated every 5 seconds with sum-of-flows strategy). x -axis is  X  1 in log-scale; y -axis is  X  scale. The elbow patterns occur when the dominant phe-nomenon and the secondary phenomenon swap roles. dates, and number of edges connecting to an IP outside the enterprise) suddenly drop to 0.6-0.8 in some periods on the ENTP data (Figure 5a). Specifically, the fractal dimension of the number of additions suddenly drops down in the early morning on 2007.11.15 (between 6 AM to 9 AM). Figure 5b shows the magnification of that interval, illustrating that the drop is due to a  X  X rolonged spike X   X  i.e., an activity that has low-volume, but persists for a long time. We also ob-served this phenomena with wavelet analysis and the BGP-lens package [30]. For brevity, we omit the details of our wavelet analysis here.
 Figure 4: The top-14 graph metrics correlated with  X  1 in the ENTP data. The sharp drop in correlation for Region 1 of Figure 2 is very interesting and depicts a broken correla-tion. Figure 5: Fractal Dimension Analysis on ENTP data. Bi-plots: Number of updates (in red) and fractal dimension D (in green) versus time-stamp. (a) The full interval of analysis -note the drop of fractal dimension around 6 AM on 2007.11.15. (b) Magnification of the suspicious re-gion, which has a  X  X rolonged spike X  (low volume, but pro-longed activity-level). Notice the prolonged spikes in the number of edge-additions to the summary graphs.
When a summary graph is flagged as interesting at the global-level, the next step is to analyze the flagged summary graph at its community-level. Figure 6a depicts the pairwise plot of  X  1 and the fraction of source nodes in the largest XA row-group (a.k.a. row-group fraction) during Region 1 from Figure 2. The points are clustered by k -means with k = 8 , which produces five singleton clusters, one cluster of size 6, one cluster of size 37, and another one of size 352. While the singleton clusters and the small cluster of 6 are detectable from  X  1 , the larger clusters have nearly identical centroids in  X  1 but are separable by their XA row-group assignments. For those summary graphs in the cluster of size 37 (dark red cluster in Figure 6a), vertices in the largest row-group are marked as suspicious and passed on for further local-level analysis. Figure 6b shows an exponential moving average of the XA row-group X  X  variation-of-information (where lower values indicate more stable community structures) in LBNL. As pointed out by the red arrow, there is a noticeable dip between 750 and 1100 seconds from the start of the hour when communities are very stable. Figure 6c illustrates the XA row-group X  X  variation of information against the same measure on column groups. We observe that they are cor-related, but there are also instances for which one is abnor-mally high or low given the other (i.e., points in the dashed red circles). These indicate that there vertices whose row-groups are changing but not their column-groups (i.e., they are changing their behavior as source vertices but not as tar-get vertices), and vice versa.
When M ETRIC F ORENSICS detects interesting events in the given stream of volatile (or summary) graphs, it can zoom into those interesting graphs and perform more rigorous anal-ysis. In such cases, the main goal is to find interesting (ex-treme, outlying, suspicious) vertices in a graph. To do so, features from the neighborhood of vertices are extracted. In particular, given a vertex, its neighbors, and the connections between them (a.k.a. the induced 1-step subgraph of the ver-tex or the egonet), M ETRIC F ORENSICS can employ a local-level analysis tool like OddBall [2]. OddBall computes the number of edges, the total weight of edges, etc and defines the vertices as points in a multi-dimensional feature space, in which it looks for anomalies.

Figure 7a shows the number of edges versus the number of vertices in the egonets of RMBT. Each point in the scat-ter plot corresponds to a particular vertex. Here, the dashed blue line with slope 2 corresponds to cliques and similarly the dashed black line corresponds to stars. We observe that most of the points lie on the blue line which indicates that a vast majority of vertices have neighborhoods that look like a clique. For RMBT, this is intuitive; all blue-tooth devices in a specific region will  X  X ee X  each other, and hence form cliques. On the other hand, we also observe a second clus-ter of nodes that are neither cliques nor stars. The outlier points here are the black and the blue triangles, which indi-cate two big  X  X ightweight X  stars. Figure 7b shows the total edge-weight versus degree in RMBT. Here, the weights de-note the number of times two devices where close enough to connect to each other. We again observe that vertices form two clusters. The two triangles shown in the circle are the same points as the ones discussed earlier in Figure 7a. These vertices not only form very big star-like structures, but also their total edge-weights are lower than expected. Hence, we refer to these as  X  X ightweight X  stars.

We performed similar analysis on the LBNL graph, where the vast majority of the vertices form star-like structures. This is intuitive since the LBNL data is a sample of the network traffic over a limited amount of time (  X  1 hour), so we have partial information about the interactions between all ver-tices. Figure 7c and 7d show the total weight versus the number of edges in the egonets of nodes in the LBNL graph without and with scanning activities, respectively. Here the weights denote the total number of packets sent between pairs of machines. On each plot, we show the top 100 anomalies we detected using a simple metric of the distance from the fitting line. Note that we were able to detect non-scanner vertices that sent much fewer packets than expected com-pared to the number of machines they connected with (point shown in square on the figures) as well as detect scanners with a similar behavior: fewer packets than the norm over links (points shown in circle on the same figures).
For the ENTP data, we observed a massive increase (of 10x) in communications around 9 AM on 2007.11.12. Look-ing at the flow data, we observed a pair of machines that opened over 10K connections in about a minute on a Bit-Torrent related port. Moreover in early morning hours of 2007.11.13, we observed an order of magnitude increase in  X  1 of the weighted summary graph but did not see a corre-sponding jump in  X  1 computed on the unweighted summary graph. This was a case where looking at traffic volume alone could not detect the single heavy edge that caused  X  1 to spike for several minutes. For brevity, we omit the plots.
Volatile graphs (such as IP-to-IP communication graphs) are becoming more ubiquitous in network science applica-tions. Challenges associated with mining of such graphs in-clude dealing with an ever-changing graph, analysis in stream-ing or real-time fashion, and analysis at multiple temporal and topological granularities. In this paper, we presented M
ETRIC F ORENSICS : a multi-level framework for mining volatile graphs that addresses the aforementioned challenges; and il-lustrated the generality and applicability of M ETRIC F OREN SICS on several large real-world volatile graphs (with up to  X  32M edges). Its strong points are the following: This work was performed under the auspices of the U.S. Department of Energy by Lawrence Livermore National Lab-oratory under contract No. DE-AC52-07NA27344. LLNL-CONF-432792. star-like neighborhoods. [1] D. Agarwal, A. Z. Broder, D. Chakrabarti, D. Diklic, [2] L. Akoglu, M. McGlohon, and C. Faloutsos. OddBall: [3] R. Albert, H. Jeong, and A.-L. Barabasi. Diameter of the [4] L. Backstrom, D. P. Huttenlocher, J. M. Kleinberg, and [5] A.-L. Barabasi. The origin of bursts and heavy tails in [6] A. Belussi and C. Faloutsos. Estimating the selectivity [7] M. M. Breunig, H.-P. Kriegel, R. T. Ng, and J. Sander. [8] A. Z. Broder, R. Kumar, F. Maghoul, P. Raghavan, [9] H. Bunke, P. J. Dickinson, A. Humm, C. Irniger, and [10] D. Chakrabarti. Autopart: Parameter-free graph [11] D. Chakrabarti, S. Papadimitriou, D. Modha, and [12] V. Chandola, A. Banerjee, and V. Kumar. Anomaly [13] Y. Chi, X. Song, D. Zhou, K. Hino, and B. L. Tseng. [14] W. Eberle and L. B. Holder. Mining for structural [15] M. Faloutsos, P. Faloutsos, and C. Faloutsos. On [16] G. Flake, S. Lawrence, C. L. Giles, and F. Coetzee. [17] F. Geerts, H. Mannila, and E. Terzi. Relational [18] P. B. Gibbons and Y. Matias. New sampling-based [19] K. Henderson, T. Eliassi-Rad, S. Papdimitriou, and [20] S. Hirose, K. Yamanishi, T. Nakata, and R. Fujimaki. [21] T. Id  X  e and H. Kashima. Eigenspace-based anomaly [22] B. Karrer, E. Levina, and M. E. J. Newman. Robustness [23] J. M. Kleinberg. Bursty and hierarchical structure in [24] A. Lakhina, M. Crovella, and C. Diot. Mining [25] J.-G. Lee, J. Han, and X. Li. Trajectory outlier detection: [26] D. Liben-Nowell and J. Kleinberg. The link prediction [27] C. Liu, X. Yan, H. Yu, J. Han, and P. S. Yu. Mining [28] M. E. J. Newman. The structure and function of [29] C. C. Noble and D. J. Cook. Graph-based anomaly [30] B. A. Prakash, N. Valler, D. Andersen, M. Faloutsos, [31] J. Sun, D. Tao, and C. Faloutsos. Beyond streams and [32] V. Syrotiuk, K. Shaukat, Y. Kwon, M. Kraetzl, and [33] H. Tong, C. Faloutsos, and J.-Y. Pan. Random walk with [34] M. Wang, N. H. Chan, S. Papadimitriou, C. Faloutsos, [35] D. Xin, J. Han, X. Yan, and H. Cheng. Mining
