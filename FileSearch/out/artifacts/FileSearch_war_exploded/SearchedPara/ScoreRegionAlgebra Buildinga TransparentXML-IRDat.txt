 A uni ed database framew ork that will enable better com-prehension of rank ed XML retriev al is still a challenge in the XML database eld. We prop ose a logical algebra, named score region algebra, that enables transparen t speci cation of information retriev al (IR) mo dels for XML databases. The transparency is achiev ed by a possibilit y to instan ti-ate various retriev al mo dels, using abstract score functions within algebra operators, while logical query plan and op-erator de nitions remain unc hanged. Our algebra opera-tors mo del three imp ortan t asp ects of XML retriev al: el-emen t relev ance score computation, elemen t score propa-gation, and elemen t score com bination. To illustrate the usefulness of our algebra we instan tiate four di eren t, well kno wn IR scoring mo dels, and com bine them with di eren t score propagation and com bination functions. We imple-men ted the algebra operators in a protot ype system on top of a low-lev el database kernel. The evaluation of the system is performed on a collection of IEEE articles in XML format pro vided by INEX. We argue that state of the art XML IR mo dels can be transparen tly implemen ted using our score region algebra framew ork on top of any low-lev el physical database engine or existing RDBMS, allo wing a more sys-tematic investigation of retriev al mo del beha vior. Categories and Subject Descriptors: H.2.3 [Languages]: Query languages; H.3.3 [Information searc h and retriev al]: Retriev al mo dels; General Terms: Performance, Design, Exp erimen tation, Veri cation, Theory .
 Keyw ords: information retriev al, databases, structured documen ts, XML, region algebra.
XML was initially dev elop ed as a standard for storing, car-rying and exc hanging data. With the rapid gro wth of data stored in XML format, rank ed information retriev al (IR) from XML collections becomes a vital requiremen t. Sev eral systems have been dev elop ed in recen t years that address this requiremen t.
An imp ortan t class of XML IR systems is based on tradi-tional ( at le) information retriev al metho ds (e.g., [21, 23, 28]) that represen t a documen t as a \bag of words" [22] and where in most cases inverted le structures pro vide the basis for implemen ting a retriev al system. Although these systems are faster and simpler than any DBMS, they have imp ortan t dra wbac ks when XML IR is being considered. Out of man y prop erties of traditional IR systems, we discuss only the fol-lowing four:
Although the concept of data indep endence was not a too big hurdle for the dev elopmen t of at-le IR [19, 36], we argue that it is imp ortan t for the dev elopmen t of XML IR. Unlik e in the vast ma jorit y of at le IR systems, where doc-uments were the only units in whic h the user would searc h for information or whic h user would obtain as answ er from the system, in XML IR the main focus is on nested XML el-ements . Furthermore, the notion of documen t is blurred as the whole collection of XML documen ts can be considered as one huge XML documen t with an arti cial root elemen t.
In XML IR, the user can specify not only his information need, but also where to searc h for information. This leads to the introduction of the speci cation of searc h elemen ts in query languages used for the rank ed retriev al on XML. Most of the XML IR query languages use the W3C query languages (XQuery [3] or XP ath [8]) as a starting point and extend them with IR-lik e searc h expressions. Typical exam-ples are full-text searc h extension of XQuery [1], Narro wed Extended XP ath (NEXI) [33], and an extension of XQL, one of the predecessors of XP ath, named XIR QL [13].

Furthermore, hierarc hical organization of XML documen ts enables the distinction between search elements and answer elements in XML IR, where both elemen t types are not pre-de ned as in at le IR (do cumen ts). Searc h elemen ts are elemen ts where the user searc hes for speci c information, while answ er elemen ts are elemen ts that the user would like to obtain as an answ er to a query . We illustrate an infor-mation retriev al searc h over XML documen ts for the user information need: "I would like to nd sections addressing language mo dels in an article that has an abstract discussing information retriev al or a probabilistic database". This in-formation need can be expressed in NEXI [33] (whic h uses a subset of XP ath and extends XP ath with an about function for rank ed retriev al and is adopted as an ocial query lan-guage in the INitiativ e for the Evaluation of XML Retriev al (INEX) [15]) as: The example above introduces sev eral additional query ca-pabilities that are not recognized in at le retriev al:
The cen tral part of any retriev al system is the retriev al mo del used. Although man y approac hes exist for XML in-formation retriev al, most of the XML IR approac hes are based on at le tf.idf-lik e approac hes [15]. For XML IR, the retriev al mo del has to incorp orate additional asp ects. We iden tify three asp ects that a exible XML retriev al sys-tem should pro vide to supp ort XML-IR queries like the one above: We use the term elemen t score to denote the value that describ es the estimated relev ance of an elemen t.
The rst two asp ects are inherited from the at le IR mo del, although the second asp ect can also denote the com-bination of scores for di eren t searc h elemen ts (see Sec-tion 2.1). The third one, sometimes called \augmen tation" is XML speci c and is recognized in the work of Fuhr and Grojohann [13] and Grabs and Shek [18], where the au-thors speci ed weigh ting factors for upwards propagation of scores in an XML tree represen tation. However, we think that the concept of downwards propagation should also be considered as, e.g., in our example we have to propagate rel-evance scores from the `article' elemen t to the `sec' answ er elemen t.
Besides numerous query languages, di eren t physical im-plemen tations for rank ed retriev al on XML have been pro-posed, ranging from mo di ed inverted le structures [17, 28] to full database implemen tations [11, 16]. For eac h indexing structure chosen for physical implemen tation, special algo-rithms need to be deriv ed to enable fast execution of XML IR primitiv es. Whatev er the primitiv es are, these algorithms will be dep enden t on XML storage structure.

Therefore, besides the adaptation of traditional IR sys-tems, we can iden tify the other class of XML IR systems based on relational database technology . XML-IR database systems use well established database operators and thirt y years' exp erience in relational database managemen t sys-tems (RDBMS). RDBMS can be either enric hed with an IR-lik e fron t end (loosely-coupled) [29] or tigh tly-coupled with IR searc h primitiv es [11, 13, 14], as recognized in [35]. Although relational systems are prev alen t in the manipula-tion of documen ts structured as relations, they have di-cult y handling nested structures suc h as XML. This is es-pecially the case with handling con tainmen t relations (i.e., con tainmen t joins [24]), whic h are one of the basic operations used in information retriev al. That is why most of XML-IR database systems have so far been loosely-coupled systems. Recen tly, numerous enhancemen ts have been prop osed for handling con tainmen t relations, suc h as the staircase join [20] and the multipredicate merge join [37], pro ving that re-lational technology can handle ecien tly queries over XML data, including the con tainmen t queries.

The main characteristic of the database approac h is a strong separation between conceptual, logical and physical levels [34]. By using di eren t data mo dels at eac h of those levels, data abstr action is pro vided. For XML-IR systems, follo wing this separation in levels gives another, additional adv antage over at le IR systems: by choosing the ap-propriate level of abstraction for eac h database level, the dev elopmen t of scoring techniques, handling structural in-formation, is simpli ed, and kept transp arent for the rest of the system design, making it exible with resp ect to the query language and physical implemen tation used. Further-more, the reasoning that can be made at the logical level can be useful for query rewriting and optimization . Using kno wledge about the size of the operands and the cost for the execution of di eren t operators at the physical level we are able to generate di eren t logical query plans, speeding up the execution and lowering the memory requiremen ts for query execution at the physical level.

Therefore, we iden tify the logical level as the cen tral level that should pro vide the transparency considering XML-IR database systems. Unlik e in the approac h of Amer-Y ahia et al. [1], we want to integrate relev ance score computa-tions within the algebra. In [1] authors aimed to supp ort a full-text searc h extension to XQuery (based on full-text query speci cation [6]), assuming that the scoring metho d is retriev al mo del implemen tation dep enden t, abstracting in that way from the problems of the XML IR database inte-gration and of elemen t score propagation and com bination. Our approac h is closer to the approac h of Fuhr et al. [13, 14], where the authors dev elop ed an XML IR path-based algebra and an XML IR query language named XIR QL. Unlik e Fuhr et al., we base our algebra on con tainmen t relations among XML elemen ts and not on the paths to XML elemen ts, fol-lowing the region algebra approac hes [2, 5, 9, 31].
The basic idea behind region algebra approac hes is the represen tation of text documen ts as a set of regions (some-times termed exten ts [5]), where eac h region is de ned by its start and end positions. The aim of the region algebra ap-proac hes is mo deling searc h in (semi-)structured documen ts using con tainmen t and set operators, The earliest region al-gebra approac hes were a PAT system presen ted in [31], and the work of Burk owski [5] and Clark e et al. [9]. These ap-proac hes were later extended to supp ort new operators, suc h as positional inclusion and direct inclusion, by Navarro and Baeza-Y ates [2] and Consens and Milo [10].

To mo del three basic XML IR asp ects, namely elemen t rel-evance score computation, elemen t score propagation, and elemen t score com bination, at the logical level of a database, we extended the original region algebra approac hes with scoring operators and termed this new algebra Score Region Algebr a (SRA) . The overall goal of the score region algebra is to transparen tly mo del di eren t asp ects of query form u-lation and searc h and answ er elemen t speci cation, and to supp ort di eren t retriev al mo dels with di eren t parameter speci cation applied to XML.
This pap er is organized as follo ws. In the next section, we specify score region algebra used to de ne a framew ork for exible and transparen t XML rank ed retriev al and il-lustrate how di eren t retriev al mo dels can be instan tiated in score region algebra based on iden ti ed retriev al asp ects. We presen t the exp erimen tal setup, including a description of our protot ype system, and the evaluation results in Sec-tion 3. The pap er is concluded with a short discussion and directions for future researc h.
In Section 2.1 we specify in more detail the three key asp ects of XML IR. Next, in Section 2.2 we presen t four re-triev al mo dels that we use. In Section 2.3 we de ne our score region algebra (SRA) for use at the logical level of databases to enable transparen t speci cation of retriev al mo dels.
In XML IR query pro cessing, three key asp ects are iden-ti ed: elemen t relev ance score computation, elemen t score com bination, and elemen t score propagation. To discuss these asp ects, we rst iden tify the three basic entities in a typical NEXI query expression. Recall our example query from Section 1: terms In our example query , we can iden tify six di eren t answ er elemen ts We can distinguish three di eren t struc-searc h elemen ts All other elemen ts whic h are not answ er
The rst task in XML rank ed retriev al is to pro duce the relev ance score for all nodes in the XML collection matc h-ing the lowest searc h elemen t in eac h about. Follo wing the NEXI speci cation, we consider eac h term in isolation per lowest searc h elemen t in the resp ectiv e about clauses. In this section, we describ e how to compute a score per searc h elemen t-term pair. The com bination of these scores is dis-cussed in the next section.

In the example query , relev ance scores have to be deter-mined for the `abs' elemen ts with resp ect to the four terms: `information', `retriev al', `probabilistic', and `database'. For the `sec' elemen t we have to compute scores for two terms: `language' and `mo del'. By emplo ying a retriev al form ula that speci es the relev ance of an XML elemen t given a query term (see, e.g., Equation 1 in Section 2.2), we can compute the `abs' and `sec' elemen t relev ance scores per term.
As about clauses can have more than one query term typ-ically and as scores are computed on a per term basis, those scores have to be com bined on a per lowest searc h elemen t basis. Dep ending on the preferred beha vior, this can be seen as an OR or an AND com bination. In our example query , the rst two about clauses con tain two terms eac h. We can interpret this either as `abs' should be about `information' AND `retriev al' or `abs' should be about `information' OR `retriev al'. It is up to the implemen ter of a speci c mo del to mak e a choice, unless the user explicitly speci ed AND or OR in the NEXI expression. Additionally , NEXI allo ws for explicit speci cation of AND and OR com bination of about path expressions, as can be seen in our example query .
In a NEXI path expression that expresses an ancestor-descendan t relationship, in case of consecutiv e searc h ele-men ts, the ancestor searc h elemen t can have multiple matc h-ing descendan t searc h elemen ts. Propagating scores between ancestors and descendan ts is called score propagation. This asp ect is discussed in the next section.
Although it migh t seem unnecessary in our example as we have used it until now, the necessit y of the propagation to the common ancestor elemen t can be seen in the case of the follo wing, di eren t NEXI query: To perform an AND-lik e com bination of `abs' (abstract) and `kwd' (keyw ord) elemen ts in this case, we need to propagate the scores to the common ancestor `article' elemen t.
We can de ne the elemen t score propagation as the trans-lation of scores to the ancestor or descendan t elemen ts where these scores can be com bined based on the type of com bi-nation explicitly speci ed in NEXI. We can distinguish be-tween two types of score propagation: upwards and down-wards score propagation. For our original example query , the score should be propagated upwards from `abs' to `arti-cle' elemen ts that matc hes the upwards score propagation. This scenario happ ens if the NEXI predicate has logically com bined multiple abouts , as in our NEXI query example from Section 1: The second scenario is when the about clause con tains at least one elemen t selection. In the example with two elemen t selections in the about : scores need to be propagated from `p' (paragraph) elemen ts to `sec' (section) elemen ts and then to `article' elemen ts.
In the case of downwards propagation scores should be propagated from searc h elemen ts to the con tained searc h or answ er elemen ts. In our example in Section 1, the scores are propagated from the searc h elemen ts `article' to the `sec' el-emen ts whic h are answ er elemen ts. If the `sec' elemen t is not the answ er elemen t, i.e., if we have //sec//p[about(., language model)] instead of //sec[about(., language model)] in our query example, the scores should be further propa-gated downwards from `sec' to `p' elemen ts.
In this section we describ e four state of the art retriev al mo dels to test the transparency of our approac h: statisti-cal language mo dels [22], where we use two types, language mo dels with and without smo othing, the Okapi (INQUER Y) mo del [7, 30], the tf.idf mo del [32], and the Garden Point XML (GPX) mo del [16] 2 .

In these approac hes, the relev ance score of a documen t is based on the fact that documen ts that con tain more oc-currences of a term, i.e., have higher term frequency , are more imp ortan t to the user. Additionally , to incorp orate the signi cance of a term for rank ed retriev al, these mo d-els also include bac kground statistics. Bac kground statistics are based on a num ber of terms in the whole collection, i.e., collection frequency , or num ber of documen ts con taining a term, i.e., document frequency .

Language model In the language mo del approac h (with smo othing), the relev ance score of the documen t ( doc ) given the query terms ( tm i , i = 1 ; 2 ; :::; n , tm i 2 q ) can be computed as: where n is the num ber of terms ( tm i ) in the query ( q ), tc ( tm i ; doc ) denote the num ber of occurrences of a term tm in the documen t doc , len ( doc ) is the length of the documen t (i.e., the num ber of terms it con tains), and is a smo othing parameter (ranging from 0 to 1) that speci es the relativ e in uence of the foreground and bac kground statistics in the nal documen t ranking score computation. The language mo del approac h without smo othing is just a special case of language mo deling approac h where = 1.

Okapi The Okapi (INQUER Y) retriev al mo del is based on the BM25 algorithm [30]: where N is the total num ber of documen ts in the collec-tion, dc ( tm i ) is the num ber of documen ts in the collection that con tain term tm i , avdl is the average documen t length, tc ( tm i ; q ) is the num ber of terms tm i in the query q , and k 1 (between 1 : 0 and 2 : 0), k 3 (between 0 and 1000), and b ( 0 : 75) are constan ts.

In the INQUER Y system, sev eral functions are imple-men ted to com bine the scores of single term relev ance score computations, suc h as sum, multiplication, probabilistic in-terpretation (see [7]). tf.idf For the tf.idf approac h, we used the basic tf.idf form ula speci ed in [32]:
The parameters of the form ula are the same as in Equa-tions 1 and 2.

GPX Finally , the basic form ula in the GPX approac h de nes the relev ance score of the documen t with resp ect to the query terms as 3 : where A is the parameter with a value between 3 and 10.
In the next section, after introducing score region algebra, we explain how these IR mo dels can be applied to SRA.
The application of the idea of text regions to XML docu-men ts is straigh tforw ard. Eac h XML documen t can be seen as a sequence of tok ens, e.g., start tags, end tags, terms, etc., where eac h tok en can be indexed to mo del the XML tree structure (see, e.g. [26]), represen ted as a set of text regions. To be able to represen t XML prop erly , the de -nition of a region in score region algebra is richer than in previous region algebra approac hes. In the speci cation of our SRA data mo del we distinguish between di eren t node types in XML documen ts in order to pro vide a uniform plat-form for de ning the region algebra operators. Furthermore, we enric h the original mo del with a region score attribute and introduce a num ber of operators for score manipulation. The logical data mo del of SRA is based on region sets , where eac h region is de ned below.

Definition 1. The SRA data model is de ne d on the do-main R which represents a set of region tuples. Region tu-ple r ( r 2 R ), r = ( s; e; n; t; p ) , is de ne d by these ve attributes: region start attribute -s , region end attribute -e , region name attribute -n , region type attribute -t , and region score attribute -p . Region start and end attributes must satisfy ordering constr aints ( e i s i ). If denotes the equivalenc e r i r j , s j &lt; s i e i &lt; e j , we can state that for two arbitr ary regions in SRA it is either r i r j , r or r j r i . Furthermor e, each region in the SRA data model is unique.

The seman tics of region start and region end attributes are the same as in other region algebra approac hes: they denote the bounds of a region. The region name attribute is used to denote node names, con ten t words, elemen t at-tribute names, elemen t attribute values, etc. To distinguish between di eren t name \roles" in XML we used the region type attribute. We use node for the elemen t node in XML, text for the text node, ter m for the term presen t in a text node, etc. Finally , the region score information item is used to specify the relev ance score of a region with resp ect to a given query .

The aim of SRA is to supp orts rank ed retriev al as a part of the algebra, and not as a side-e ect, whic h distinguishes it from other region algebra prop osals that include rank ed retriev al (e.g., [5]). The basic SRA operators are de ned in Table 1. In the speci cation of region algebra operators we use R i ( i = 1 ; 2 ; ::: ) to denote the region sets, their corre-sponding non-capitals to denote regions in these region sets ( r ), and corresp onding indexed non-capitals to denote re-of all regions in the collection and with Root we denote the (arti cial) root elemen t for the whole collection.
The operators in SRA tak e one or two region sets as operands and pro duce a region set as result. The rst four operators enable Boolean selection of regions based on their attributes or con tainmen t relations. The selection opera-tor, , has two varian ts. The rst one ( n = name;t = type speci es the selection based on name and type attributes 4 The second selection operator selects regions that con tain a term region in whic h con ten t (casted to a num ber) is equal, greater or equal, less or equal, greater or less than the num-ber speci ed ( num ). The last two operators select regions based on their con tainmen t relations, i.e., regions that con-tain other regions ( = ), or regions that are con tained in other regions ( &lt; ).

The other ve operators specify score manipulation among regions. To enable the instan tiation of di eren t retriev al mo dels, they are de ned using three abstract scoring func-tions: f = , f I , and f J , and two abstract operators: and . These abstract functions and abstract operators mo del three asp ects of XML IR. They are speci ed based on auxil-iary functions that coun t the num ber of regions in the region set R , denoted with j R j , compute the size of the region r : siz e ( r ) = e s 1, and compute the average size of the regions with the region name n in the collection, denoted with avg siz e ( n ).
Op erator = p mo dels elemen t relev ance score computation, i.e., the concept that the searc h elemen ts (regions in the rst operand) should con tain the term (region). Therefore, the function f = ( r 1 ; R 2 ), applied to a region r 1 and region set R , should result in the numeric value that speci es the rel-evance of the region (elemen t) r 1 given the term regions in R 2 that it con tains. Follo wing the speci cation of four mo d-els in the previous section, we have four speci cations of this abstract function. We assume that the default score value for elemen t and term regions in all mo dels is 1.0, except for the basic GPX mo del where elemen t regions have the default score value of 0.0.
 The language mo del ( LM ) can be instan tiated based on Equation 1 and auxiliary functions as: For a language mo del without smo othing, the relev ance score computation function is speci ed using the same equations where = 1.

In the Okapi system we simplify the Equation 2 by remo v-ing the third fraction in the sum as it is based on a size of the query and is not supp orted in other mo dels. The complex function f = is speci ed as:
For the tf.idf approac h we have :
The elemen t relev ance score computation in GPX mo del is speci ed based on Equation 4 as:
In our exp erimen ts we use two varian ts of the GPX mo del, one where op is implemen ted as `+' with the default elemen t region score 0, referred to as basic mo del (denoted with `*' in Table 2), and the other where op is implemen ted as ` ' with the default elemen t region score 1 (see Section 3.2).
The operators I and J specify propagation of scores to the con taining or con tained elemen ts, resp ectiv ely. Thus, the functions f I ( r 1 ; R 2 ) and f J ( r 1 ; R 2 ) specify whether the propagation is performed with or without normalization, if the score values of con tained or con taining elemen ts are summed, averaged or maximized, etc.

For the basic language mo deling approac h with and with-out smo othing, as well as for the basic tf.idf and Okapi mo del, we use the same approac h. We emplo y a weigh ted sum normalized by the size of regions in the rst operand for mo deling upwards elemen t score propagation. The simple sum of scores is used for downwards elemen t score propaga-tion. This choice was made because these functions sho wed good results in our exp erimen ts [27].
However, for basic GPX mo del (denoted with `*' in Ta-ble 2) we emplo y di eren t computations for elemen t score propagation: We also tried Equation 9 and Equations 10 for additional GPX runs with default elemen t region score 1, as well as sum instead of weigh ted sum for upwards score propagation in other mo dels, de ned similar to Equation 10 (see Sec-tion 3.2).
The abstract operator speci es how scores are com bined in an AND expression, denoted in SRA by u p , while the operator de nes score com bination in an OR expression, denoted in SRA with t p . In our basic retriev al mo dels for basic exp erimen tal series, we mak e di eren t choices for eac h mo del. For the basic language mo del, follo wing [22] and [27], we use the instan tiation where is implemen ted as a pro duct and is implemen ted as a sum. Based on `fuzzy' speci cation of tf.idf mo del in [25], in our basic tf.idf mo del is mo deled as min and is mo deled as max . Follo wing [7], in the Okapi (INQUER Y) mo del we de ne these two abstract operators as follo ws:
Due to a somewhat di eren t speci cation of the GPX mo del with resp ect to other mo dels (see Equations 4 and 8), we instan tiate as well as as: Although this form ula in com bination with form ula in Equa-tion 8 results in a retriev al mo del that is sligh tly di eren t than the one given in Equation 4, it follo ws the seman tics of the mo del whic h is to boost the scores for regions that con tain more query terms.

Furthermore, we exp erimen ted with di eren t implemen-tations of score com bination functions for eac h of the score computation functions as can be seen in Section 3.2. In this section, we describ e our protot ype system, the XML documen t collection, and the query set we used to demonstrate the functionalit y of our approac h (Section 3.1). Next, in Section 3.2, we sho w and discuss the results of our exp erimen tal runs.
To demonstrate the usefulness of our approac h, we have built a protot ype system and evaluated it against a well-kno wn documen t collection and query set. Follo wing good practice in database systems design, we setup our protot ype follo wing a typical three-la yered architecture [34]: Conceptual layer This layer tak es a NEXI query expres-Logical layer This layer tak es an SRA expression as in-Physical layer For the physical implemen tation we use a
Not man y XML documen t collections exist that also come with IR queries and user assessmen ts to evaluate the re-triev al e ectiv eness of a system. We use the most well kno wn collection, pro vided by the INEX initiativ e. This collection consists of IEEE journal pap ers in XML format. Eac h year a new set of so-called topics is constructed by the partici-pan ts of the INEX workshop series. Those topics con tain a NEXI query expression and a textual description of the so-called information need of the user, i.e., an explanation of what kind of answ ers should be considered as good results for that query . Every participan t runs the queries on their system.

By pooling and man ual reviewing by the participan ts the results are assessed, i.e., chec ked whether they are good an-swers or not. These assessmen ts are then aggregated by the organization and made available to the participan ts. Using a tool pro vided by the organization, eac h participan t than can compute how good their system is performing in terms of precision and recall.

We use the 30 topics and corresp onding assessmen ts of 2003 (see [33] and App endix in [15]) to test our architec-ture for eac h of the mo dels describ ed in Section 2. In Sec-tion 3.2 we presen t the results of these exp erimen ts. We per-form sev eral exp erimen ts using the settings describ ed above. First of all we ran the system for the basic mo dels and later we perform exp erimen ts with varying score propagation and com bination functions for these mo dels, as describ ed in Sec-tion 2.3.
In this section we discuss the results of the exp erimen ts describ ed above using the topics from INEX 2003. In Fig-ure 1 we sho w the comparison of recall-precision graphs for our basic retriev al mo dels (exp erimen tal series), aggregated over all 30 topics. The mean average precision for basic (I to V) and additional exp erimen tal series (denoted with a and ) is given in the last column of Table 2. The mean average precision is actually the average precision aggregated over all topics. To pro duce recall-precision graphs and compute mean average precision we use the ocial INEX tool for the evaluation (see [15] for details). The highest mean average precision for eac h score computation mo del is given in bold.
As can be seen in the table the results dep end a lot on the function used for relev ance score computation. The best runs for language mo dels with smo othing, Okapi, and GPX signi can tly outp erform language mo dels without smo oth-ing and tf.idf. However, for language mo dels with smo oth-ing, Okapi, and GPX, mean average precision is quite dif-feren t for di eren t com binations of score propagation and com bination functions. For example, the mean average pre-cision decreases with almost 50% if we compare series II and II b for language mo dels and increases for almost 100% in se-ries III and III b for Okapi. On the other hand, no matter what kind of functions for score propagation and score com-bination we use the mean average precision for tf.idf mo dels is appro ximately 0.15 (see series IV, IV a , and IV b ).
In our exp erimen ts the best results are obtained by using the GPX mo del. However, the question is whether some of the other mo dels mo dels for score computation (Ok api or language mo dels) with the righ t choice for the score com bi-nation and score propagation functions and the righ t value for parameters, , k 1 , and b , can boost the mean average precision and outp erform GPX. Additionally , the e ectiv e-ness of eac h mo del can be studied with resp ect to eac h topic in isolation, to determine whic h retriev al mo del is the most appropriate for eac h topic. This could help us to classify top-ics based on their features, suc h as num ber of query terms, existence of upwards or downwards score propagation, etc., and apply the best retriev al mo del for eac h topic type. We hop e to answ er these questions in our future researc h. Figure 1: Comparison of recall precision graphs for basic experimen tal series. Most XML-IR systems adapt and extend existing at le IR systems to supp ort the searc hing of structured XML doc-umen ts. Since these approac hes are retriev al mo del speci c and dep end on the physical implemen tation, it is dicult to adapt them to supp ort di eren t retriev al mo dels. We be-liev e that existing XML-IR database approac hes have to be made transp arent in order to satisfy complex user informa-tion needs expressed on top of XML collections. We argue that the righ t architectural level to achiev e this transparency is the logical level. In that way the system is also exible for di eren t asp ects of IR searc h over XML at the concep-tual level and distinct implemen tations of storage schemes and access algorithms at the physical level. By dev eloping a transparen t score region algebra at the logical level of a exible three-lev el database system we are able to supp ort the application of state of the art IR mo dels to rank ed XML retriev al. Also, it pro vides us with a uniform framew ork where we can compare the e ectiv eness and study prop er-ties of di eren t XML retriev al mo dels as we have sho wn in this pap er.

We are planning to further investigate the usefulness of the transparen t logical algebra by applying di eren t mo dels to XML IR and to study the prop erties of score region al-gebra operators with resp ect to their consistency in ranking and their eciency . We are also concerned with the mo d-eling of term mo di ers ('+' and ' '), explicit term and ele-men t weigh ts, and phrases in score region algebra (see, e.g., [27]). Furthermore, we aim to better understand stemming and synon yms for terms, and vague treatmen t of searc h and answ er elemen ts throughout the instan tiation of retriev al mo dels in the SRA. Finally , we aim to investigate whic h com bination of scoring functions in score region algebra op-erators is more appropriate for di eren t topic types, suc h as topics with same searc h and answ er elemen ts, queries with-out upward or downward propagation, etc. This will guide us to a more e ectiv e and ecien t, transparen t XML-IR database system.
