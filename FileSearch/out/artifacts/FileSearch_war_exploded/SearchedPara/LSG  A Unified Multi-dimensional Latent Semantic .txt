 Personal Information Retrieval, also known as Desktop Search, aims to search per-data, desktop search has become a hot topic. In order to pinpoint the resources (files), rich meaningful information is needed to be introduced to retrieval model. In Web search, linkage structure has been extensively studied to improve search performance, such as PageRank and HITS. Nevertheless, there is no direct and explicit association sively. These associations can be further used to improve traditional keyword-based search. We observe that users usually operate PC in a common pattern: Operating some resources to finish a specific task related to a certain topic , and organizing these Motivated by the upper facts, we propose an approach that exploiting the three kinds the three implicit information as {Task, T opic, Location} Relations respectively. The heart of our approach is L atent S emantic G raph (LSG), which is used to measure the three relations with associated score. Based on LSG, we develop a personalized rank schema to improve tradition keyword-based desktop search and design a creative semantic recommendation algorithm to expand the query results. Related Work. A number of researches have tried to introduce extra information into Personal Information Retrieval. Chau et al. [8] exploited the explicit metadata to build the contextual cues and designed navigation-style search. They didn X  X  build any rank-discover the contextual information from file system hierarchy. Peney et al. [9] mapped the authority and hub nodes to resources and directories respectively and then ranked results with authority score. However, this method can X  X  distinguish resources in the same directory. Recently, many researches [7, 10] put their views on user beha-sign novel algorithms to measure the relations. Sawyer et al. [3] applied physical-mary, none of above work sufficiently utilized the 3 relations mentioned and presented proper methods to measure these relations. Kim et al. [5] combined many approach was strongly dependent on resource tags contributed by users actively. Our approach can measure implicit relations without extra user involvement. Contribution. The main contribution of this paper includes:  X 
We design novel methods to measure the {Topic, Task, Location} Relations and propose LSG to integrate them into a unified score. We measure the Topic Relation using a LDA-based method, Task Relation using a Surfing Graph and Location Re-lation from three aspects as Depth, Transfer Length and Depth Difference of re-source organization.  X 
Based on LSG, we design a new personalized ranking schema, which can reflect user preference and improve keyword-based desktop search results.  X 
Based on LSG, we design a graph-based recommendation algorithm for query result expansion. We recommend 5 relevant documents for each query result to help user recover memory cues and facilitate search. The remainder of the paper is organized as follows. In section 2, we propose Latent Semantic Graph. Section 3 discusses how to search using LSG. Section 4 describes work in Section 5. Task, Location} Relations and present methods to score these relations to propose LSG.  X 
Topic Relation is used to measure the topic similarity between two resources (e.g., d 1 , d 2 ). We denote this relation as  X  X  X  X  X   X  X  X  X  X  X   X   X   X   X ,  X   X  .  X 
Task Relation is used to measure the collaborative strength between two resources in history. We denote this relation as  X  X  X  X  X   X  X  X  X  X  X   X   X   X   X ,  X   X  .  X 
Location Relation is used to measure the relation hidden in the two resources X  directory organization. We denote this relation as  X  X  X  X  X   X  X  X  X  X  X  X  X  X  X   X   X   X   X ,  X   X  . 2.1 Scoring Topic Relation that term vectors are sparse and high-dimensional. Therefore, cosine similarity be-tween term vectors is not a good way to measure the similarity between resources. In this paper we employ a LDA-based method to measure the similarity of two extracta-ble resources. LDA is a hierarchical Bayesian model which allows us to model a text document as a mixture of topics. After LDA modeling, each resource can be mapped to a latent topic distribution of N dimensions (100 by default). To measure the topic similarity between two resources, we calculate the similarity between the distributions of topics associated with each document, which can effectively resolve the problem due to data sparsity. We use the KL divergence [1], a non-symmetric measure of the difference between two probability distributions X and Y, to measure the distance between two resources. Given distributions X and Y, the KL divergence between 
Considering the non-symmetry of KL divergence, namely  X   X  X  X   X  X  X  X || X  X   X   X  X  X   X  X  X | X  X  , we use Jensen-Shannon divergence, a symmetric variant of the KL diver-formula 1 to model the Topic Relation between two resources d 1 and d 2 and obtain a normalized score. The obtained JS value can be viewed as the distance between two resources. The curve of formula 1 is steep near 0 and become flat with the growth of pairs from the high similar ones. 2.2 Scoring Task Relation In order to discover the collaborative relation between different resources, we employ a system-level API to monitor and record resource access activities. The recorded Users tend to access different resources to complete a purpose. Therefore, we define a Task as a set of resources for the same purpose. The order of access log in a task concepts used in the algorithm: Valid Duration (s) : The duration of a log must be larger than a given Valid Duration invalid one will be remove from the sequence and split the sequence naturally. larger than a given Task Interval threshold (600s by default).
 same task if the similarity between T1 and T2 is larger than a given threshold (0.5 by default). We define the task similarity as Surfing Graph (SG) : We propose a Surfing Graph (SG) to denote each task identi-fied. A surfing graph  X  is an undirected graph. The node set  X   X  corresponds to all happened on this edge regardless of direction. the weight of each edge is measured by th e number of transfer pairs corresponding to it. 
Algorithm 1 describes the process of task identification (step 1 to 8) and SG merg-ing (step 9 to 12). The identification consists of 3 major steps: (1) split the accessing sequence into clusters according to Valid Duration and Task Interval ; (2) merge simi-lar adjacent clusters (raw tasks) split by Valid Duration ; (3) remove invalid tasks (size combine them together as a Task Relation Graph (TARG) where weight of the same edges appearing in the different SG will be added. The TARG reflects the Task Rela-Algorithm 1. Construction of Task Relation Graph 
Input: A user activity log sequence R , Valid Duration VD , Task Interval TI , Task Simi-larity TS
Output: Task Relation Graph TARG(V, E) , where V is vertex set and E is edge set. 1:  X  X  X  X  X  X  X  X , X  X   X , X  X   X   X  X  X  X   X   X  2:  X  X  X  X  X  X  X  X   X  X  X  X   X  X  X , X  X , X  X  X  X  X  X  X  X  X  X  X  X  X   X  //split R according to VD and TI 3:  X  X  X  X  X  X  X  X  X   X   X  X  X  X   X 0 X  4:  X  X  X   X   X  X  X  X  X  X  X  X  X  X  X  X 1;  X   X  X  X  X   X  X  X  X  ; X  X  X  X .  X   X  X  7: t X t X  X  X  8:  X  X  X  X   X  X  X  X  X  X  X  X  to  X  add  X  X  X  X   X  X  X   X , X 2  X  X  X  X . X   X  X  //remove invalid task 9:  X  X  X  X  X  X  X  X  X   X   X  X  X  X  X  X  X   X  X  X  X   X  X  10:  X  X  X  X   X  X  X   X ,  X  X  X   X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  X  12:  X  X , X  X  X  X  X  X  X  X  X  X  X  X  two resources d 1 and d 2 , we use Eq.(3) to model Task Relation. 
For a certain resource X, we are intent to distinguish those low TF resources inte-relation strength. When the TF is high enough, the difference on relation strength with the increment of TF will become small. So those high TF resources can be nearly viewed as the same category, namely highly relevant ones to X. In our model, we use TF 2 to enlarge the difference between small TFs and log to shrink them towards steep interval. Therefore, the model can reveal the difference between small TFs. 2.3 Scoring Location Relation relationship among them, such as related content, same target, etc. In this section, we model the Location Relation between resources from 3 aspects mentioned in [12]. the parent directories. Recursively, the deeper the two resources stored in the hierarchy of file system, the tighter the relationship between them is. We use the average depth of two shortest path between two directories as their degree-of-association or transfer-length. Shorter transfer-length means two resources are more related. Thus, if transfer-length is 0, that means the two resources are organized in the same directory. We denote this common ancestor-or-self directory. Aspect (c): Depth Difference . Users usually group related directories nearby, which means the depths of these directories are close. Under prerequisite of large Depth and short Transfer Length , if the depths of directories containing the given two resources M  X   X   X   X ,  X   X   X  X  X  |  X   X  |  X  |  X   X  |  X  . 
By integrating the above aspects, we now obtain the following formula which models Location Relation of 2 resources and returns a normalized score. According to the importance of each aspect, the function penalizes Transfer Length and Depth Dif-sources at deep level, generally 4-5 level at most. So the influence of Depth is limited. 2.4 Score Aggregation with Linear Regression After measuring the three relations, we can obtain 3 Relation Graphs. We name them as Topic Relation Graph, Task Relation Graph and Location Relation Graph. The final Latent Semantic Graph (LSG) we proposed is a mixture graph to integrate the above 3 Relation Graphs. In this paper, the final association score, namely, the weight of edge in LSG is simply formulized as a linear combination: 
Therefore, the parameters  X  ,  X  ,  X  can be estimated by a linear regression. We con-selected from data set provided by participants of our experiments. We ask partici-pants to rate those pairs selected from their own data set with a grade between 0 and including 3 relation scores and  X   X  is relation score rated by user. So we estimate the parameters by solve the following optimization problem. 
With the limitation of space, we omit some detail about learning process. After a 5-imate parameters as (0.3, 0.6, 0.1) in our context. With the estimated parameters, we combine the three relation graphs and genera te the Latent Semantic Graph (LSG). When user submits keywords, the content-based search module firstly finds results from index and then feeds them to LSG module. LSG module resorts these results with a personalized ranking schema and gets recommended resources for each result. Personalized Ranking. In case of Web search, personalized PageRank has been widely used. The original PageRank can be expressed as the solution:  X   X   X   X   X  X  X   X   X   X  X   X   X   X  X  X   X   X  1 X  X   X   X  X   X   X  . Here, we design a LSG-based Personalized Ranking Schema to rank the results by rebuilding the Transition Matrix  X  and personaliza-tion vector  X   X   X  . Generally, user would like to jump to the node which is highly relevant resource  X  , we use the following formula: number of occurrences of resource  X  in the user activity log and  X   X  X  X  X  X  X  be the num- X   X  , otherwise,  X   X   X  X 1  X  X  X  X  X  X   X  . The final query score is a combination of TF-Score  X  X  X   X   X   X  is the importance score of  X  calculated by personalized ranking schema. Semantic Recommending. Based on LSG, graph-based recommendation methods can be introduced to compute the resource association from a global perspective in-stead of local pairwise computation of neighborhood. We transplant a graph-based recommendation algorithm IPF [6] into ou r scenario to recommend semantically-this paper. Given a query result  X  and a unknown resource  X  , there are many propa-as:  X   X  p  X   X   X   X  X  X   X   X  X   X  X  X   X   X  X  X   X  X  X  X  , where  X  X  X   X   X  X   X  X  X   X  is a propagation function defined in Eq.(7). Similarly with IPF, we only consider the short paths (distance &lt; 3) to measure the visited probability because the long path contributes little and is prone  X  , then the recommending score of  X  to  X  is defined as: 
The TIPF is implemented by Bread-First-Search on LSG. Finally, we sort the can-sources to  X  . Fig. 8 illustrates an example of semantic recommendation. In order to evaluate the effectiveness of LSG in enhancing result ranking and seman-tic recommendation for query result expansion, we develop a prototype, called IDSE 1 , to implement the searching process with LS G and construct a small scale user study. Because the experiment on personal data is sensitive, the scale of experiment is hard to be large. Referring to the experimental scale mentioned in references (e.g, 3 in [5], 5 in [7] and 6 in [10] etc.), we invited five volunteers in our institution to participate in our experiments. Data Size (GB) 10.27 3.08 2.38 15.26 0.81 Accessed Resources 926 830 193 508 234 Extractable Resources 2059 4765 1817 3311 349 tractable resources and 2691 resources are recorded in the user log. 4.1 Experimental Results Ranking Performance Evaluation Comparison. We compare IDSE with two of the state-of-art [11] Desktop Search tools: Copernic Desktop Search [13] and Google Desktop Search (GDS) [14]. In addi-tion, we provide two versions of prototype: IDSE-based (content-based ranking only) and IDSE_Imecho (a similar method in [7], which uses fixed relation weight). Setup. Each participant is asked to design 10 search queries related to their activities and then send each of queries to the 5 tools respectively. For each query, each partici-pants rate the top 10 results for each t ools using grades {0, 1, 2, 3, 4, 5} 2 where 0 for each tool, we can calculate the average precision and recall of 50 queries at any rank k . We use the pooling technology [7] to generate the relevant resources set. 
Fig. 5(a) and Fig. 5(b) depict the averag e precision and recall levels of the 5 tools outperforms others on both metrics at every rank level. This indicates that IDSE finds more relevant resources and ranks them higher than content-based search tools (GDS, Copernic and IDSE-based). The interpretation of this result is that the GDS, Copernic and IDSE-based are only concerned about hitting key-words and rank their results using TF-IDF models, regardless of any global importance measures for resources. Whereas with semantic links modeled in LSG, IDSE can exactly measure importance for every resource and push resources of interest towards the top of list. 
IDSE also outperforms IDSE_Imecho on both metrics. This indicates that exact approach is effective. IDSE-based is implemented by using an optimized TF-IDF curve from top 6 to 10 (depicted in Fig. 5(a)). After adding the LSG, those high rele-vant but low ranked resources will be ranked high. This results in a visible improve-ment in terms of precision and recall. Effectiveness of Semantic Recommendation Recommendation for each query result is a crea tive attempt. It can help user to recall the memory cues among resources. The performance of the recommendation mainly relies on users X  judgment. We ask each volunteer to rate the each recommended re-source for top 5 results returned by IDSE using the same grade method as above. The relevant grade reflects the user satisfaction to the recommended one. Finally, we av-method. 0.2] for  X  X ery Poor X , (0.2, 0.4] for  X  X oor X , (0.4, 0.6] for  X  X ot too Poor X , (0.6, 0.8] for mantic recommendation is  X  X cceptable X . A lthough without an acknowledged evalua-tion method, such user measure can, to some extent, demonstrate the effectiveness of this approach. Fig. 8 shows an example of Semantic Recommendation on query result  X  X AIM2014-IDSE paper.docx X . 5 resources recommended are all related to the topic  X  X esktop search X . In other examples, the recommended resources may be task-related or location-related. Scalability Querying Performance. In Fig. 9(b), the average query time of IDSE across all que-are calculated across 5 runs of each query. Fig. 9(a) shows that with the data set size increasing, the average query time appears to grow slowly, especially on big data sets. alone (0.12 on average), it is acceptable. Even though compared with GDS, the partic-ipants agree that the performance is also acceptable. Indexing Space. The IDSE X  X  index consists of reverse index and LSG. Fig. 7 shows This result indicates that the LSG is not a barrier to search. On average, the LSG size is less than 0.85% of the size of the user X  X  data size. In this paper, we attempt to exploit {Topic, Task, Location} Relations to improve traditional desktop search performance. We design novel methods to measure these 3 activities and directory hierarchy respectively and then propose LSG, a multi-With LSG, a personalized ranking schema is designed to enhance the full-text key-word desktop search and the recommending algorithm TIPF is adapted to help user the prototype embedding LSG is superior to the traditional keyword-search desktop mantic identification for those unextractable resources. Acknowledgements. We would like to thank Dr. Xianpei Han for providing valuable suggestions. This work is supported by the NSF of China (Nos. 71101138, 61202064 and 91324008), Beijing NSF (No. 4122087) and the Strategic Priority Research Pro-gram of the Chinese Academy of Sciences (No. XDA06010600). 
