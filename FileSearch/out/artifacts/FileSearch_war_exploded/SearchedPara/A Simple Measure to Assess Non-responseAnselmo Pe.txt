 There is some tendency to consider that an incorrect result is simply the absence of a correct one. This is particularly true in the evaluation of Information Re-trieval systems where, in fact, the absence of results sometimes is the worse output.

However, there are scenarios where we should consider the possibility of not responding, because this behavior has more value than responding incor-rectly. For example, during the process of introduc-ing new features in a search engine it is important to preserve users X  confidence in the system. Thus, a system must decide whether it should give or not a result in the new fashion or keep on with the old kind of output. A similar example is the decision about showing or not ads related to the query. Show-ing wrong ads harms the business model more than showing nothing. A third example more related to Natural Language Processing is the Machine Read-ing evaluation through reading comprehension tests. In this case, where multiple choices for a question are offered, choosing a wrong option should be pun-ished against leaving the question unanswered.
In the latter case, the use of utility functions is a very common option. However, utility functions give arbitrary value to not responding and ignore the system X  X  behavior showed when it responds (see Section 2). To avoid this, we present c@1 measure (Section 2.2), as an extension of accuracy (the pro-portion of correctly answered questions). In Sec-tion 3 we show that no other extension produces a sensible measure. In Section 4 we evaluate c@1 in terms of stability, discrimination power and sensibil-ity, and some real examples of its behavior are given in the context of Question Answering. Related work is discussed in Section 5. Lets take the scenario of Reading Comprehension tests to argue about the development of the measure. Our scenario assumes the following:  X  There are several questions.  X  Each question has several options.  X  One option is correct (and only one).

The first step is to consider the possibility of not responding. If the system responds, then the assess-ment will be one of two: correct or wrong. But if the system doesn X  X  respond there is no assessment. Since every question has a correct answer, non re-sponse is not correct but it is not incorrect either. This is represented in contingency Table 1, where:  X  n  X  n  X  n  X  n: number of questions (n = n
Let X  X  start studying a simple utility function able to establish the preference order we want:  X  -1 if question receives an incorrect response  X  0 if question is left unanswered  X  1 if question receives a correct response
Let U(i) be the utility function that returns one of the above values for a given question i . Thus, if we want to consider n questions in the evaluation, the measure would be:
The rationale of this utility function is intuitive: not answering adds no value and wrong answers add negative values. Positive values of UF indicate more correct answers than incorrect ones, while negative values indicate the opposite. However, the utility function is giving an arbitrary value to the prefer-ences (-1, 0, 1).

Now we want to interpret in some way the value that Formula (1) assigns to unanswered questions. For this purpose, we need to transform Formula (1) into a more meaningful measure with a parameter for the number of unanswered questions ( n u ). A monotonic transformation of (1) permit us to pre-serve the ranking produced by the measure. Let f(x)=0.5x+0.5 be the monotonic function to be used for the transformation. Applying this function to Formula (1) results in Formula (2): 0 . 5
Measure (2) provides the same ranking of sys-tems than measure (1). The first summand of For-mula (2) corresponds to accuracy , while the second is adding an arbitrary constant weight of 0.5 to the proportion of unanswered questions. In other words, unanswered questions are receiving the same value as if half of them had been answered correctly .
This does not seem correct given that not answer-ing is being rewarded in the same proportion to all the systems, without taking into account the per-formance they have shown with the answered ques-tions. We need to propose a more sensible estima-tion for the weight of unanswered questions. 2.1 A rationale for the Value of Unanswered According to the utility function suggested, unan-swered questions would have value as if half of them had been answered correctly. Why half and not other value? Even more, Why a constant value? Let X  X  gen-eralize this idea and estate more clearly our hypoth-esis:
Unanswered questions have the same value as if a proportion of them would have been answered cor-rectly.
 We can express this idea according to contingency Table 1 in the following way:
P ( C  X  A ) can be estimated by n ac /n, P (  X  A ) can be estimated by n u /n, and we have to estimate P ( C/  X  A ) . Our hypothesis is saying that P ( C/  X  A ) is different from 0. The utility measure (2) corre-sponds to P(C) in Formula (3) where P ( C/  X  A ) re-ceives a constant value of 0.5. It is assuming arbi-trarily that P ( C/  X  A ) = P ( C/A ) .

Following this, our measure must consist of two parts: The overall accuracy and a better estimation of correctness over the unanswered questions. 2.2 The Measure Proposed: c@1 From the answered questions we have already ob-served the proportion of questions that received a correct answer ( P ( C  X  A ) = n ac /n). We can use this observation as our estimation for P ( C/  X  A ) instead of the arbitrary value of 0.5.

Thus, the measure we propose is c@1 (correct-ness at one) and is formally represented as follows:
The most important features of c@1 are: 1. A system that answers all the questions will re-2. Unanswered questions will add value to c@1 3. A system that does not return any answer would
According to the reasoning above, we can inter-pret c@1 in terms of probability as P ( C ) where P ( C/  X  A ) has been estimated with P ( C  X  A ) . In the following section we will show that there is no other estimation for P ( C/  X  A ) able to provide a rea-sonable evaluation measure. In this section we study whether other estimations of P ( C/  X  A ) can provide a sensible measure for QA when unanswered questions are taken into account. They are: 1. P ( C/  X  A )  X  0 2. P ( C/  X  A )  X  1 3. P ( C/  X  A )  X  P (  X  C/  X  A )  X  0 . 5 4. P ( C/  X  A )  X  P ( C/A ) 5. P ( C/  X  A )  X  P (  X  C/A ) 3.1 P ( C/  X  A )  X  0 This estimation considers the absence of response as incorrect response and we have the traditional accu-racy (n ac /n).

Obviously, this is against our purposes. 3.2 P ( C/  X  A )  X  1 This estimation considers all unanswered questions as correctly answered. This option is not reasonable and is given for completeness: systems giving no answer would get maximum score. 3.3 P ( C/  X  A )  X  P (  X  C/  X  A )  X  0 . 5 It could be argued that since we cannot have obser-vations of correctness for unanswered questions, we should assume equiprobability between P ( C/  X  A ) and P (  X  C/  X  A ) . In this case, P(C) corresponds to the expression (2) already discussed. As previ-ously explained, in this case we are giving an arbi-trary constant value to unanswered questions inde-pendently of the system X  X  performance shown with answered ones. This seems unfair. We should be aiming at rewarding those systems not responding instead of giving wrong answers, not reward the sole fact that the system is not responding. 3.4 P ( C/  X  A )  X  P ( C/A ) An alternative is to estimate the probability of cor-rectness for the unanswered questions as the pre-cision observed over the answered ones: P(C/A)= n ac /(n ac + n aw ). In this case, our measure would be like the one shown in Formula (5):
P ( C ) = P ( C  X  A ) + P ( C/  X  A )  X  P (  X  A ) =
The resulting measure is again the observed pre-cision over the answered ones. This is not a sensible measure, as it would reward a cheating system that decides to leave all questions unanswered except one for which it is sure to have a correct answer.
Furthermore, from the idea that P ( C/  X  A ) is equal to P ( C/A ) the underlying assumption is that systems choose to answer or not to answer ran-domly, whereas we want to reward the systems that choose not responding because they are able to de-cide that their candidate options are wrong or be-cause they are unable to decide which candidate is correct. 3.5 P ( C/  X  A )  X  P (  X  C/A ) The last option to be considered explores the idea that systems fail not responding in the same propor-tion that they fail when they give an answer (i.e. pro-portion of incorrect answers).

Estimating P ( C/  X  A ) as n aw / (n ac + n aw ), the measure would be:
P ( C ) = P ( C  X  A ) + P ( C/  X  A )  X  P (  X  A ) =
This measure is very easy to cheat. It is possible to obtain almost a perfect score just by answering in-correctly only one question and leaving unanswered the rest of the questions. When a new measure is proposed, it is important to study the reliability of the results obtained us-ing that measure. For this purpose, we have cho-sen the method described by Buckley and Voorhees (2000) for assessing the stability and discrimination power, as well as the method described by Voorhees and Buckley (2002) for examining the sensitivity of our measure. These methods have been used for studying IR metrics (showing similar results with the methods based on statistics (Sakai, 2006)), as well as for evaluating the reliability of other QA measures different to the ones studied here (Sakai, 2007a; Voorhees, 2002; Voorhees, 2003).

We have compared the results over c@1 with the ones obtained using both accuracy and the utility function (UF) defined in Formula (1). This compari-son is useful to show how confident can a researcher be with the results obtained using each evaluation measure.

In the following subsections we will first show the data used for our study. Then, the experiments about stability and sensitivity will be described. 4.1 Data sets We used the test collections and runs from the Ques-tion Answering track at the Cross Language Evalu-ation Forum 2009 (CLEF) (Pe  X  nas et al., 2010). The collection has a set of 500 questions with their an-swers. The 44 runs in different languages contain the human assessments for the answers given by ac-tual participants. Systems could chose not to answer a question. In this case, they had the chance to sub-mit their best candidate in order to assess the perfor-mance of their validation module (the one that de-cides whether to give or not the answer).

This data collection allows us to compare c@1 and accuracy over the same runs. 4.2 Stability vs. Discrimination Power The more stable a measure is, the lower the probabil-ity of errors associated with the conclusion  X  X ystem A is better than system B X  is. Measures with a high error must be used more carefully performing more experiments than in the case of using a measure with lower error.

In order to study the stability of c@1 and to com-pare it with accuracy we used the method described by Buckley and Voorhees (2000). This method al-lows also to study the number of times systems are deemed to be equivalent with respect to a certain measure, which reflects the discrimination power of that measure. The less discriminative the measure is, the more ties between systems there will be. This means that longer difference in scores will be needed for concluding which system is better (Buckley and Voorhees, 2000).

The method works as follows: let S denote a set of runs. Let x and y denote a pair of runs from S . Let Q denote the entire evaluation collection. Let f represents the fuzziness value, which is the percent difference between scores such that if the difference is smaller than f then the two scores are deemed to be equivalent. We apply the algorithm of Figure 1 to obtain the information needed for computing the error rate (Formula (7)). Stability is inverse to this value, the lower the error rate is, the more stable the measure is. The same algorithm gives us the proportion of ties (Formula (8)), which we use for measuring discrimination power , that is the lower the proportion of ties is, the more discriminative the measure is. for each pair of runs x , y  X  S
We assume that for each measure the correct de-cision about whether run x is better than run y hap-pens when there are more cases where the value of x is better than the value of y . Then, the number of times y is better than x is considered as the number of times the test is misleading, while the number of times the values of x and y are equivalent is consid-ered the number of ties.

On the other hand, it is clear that larger fuzziness values decrease the error rate but also decrease the discrimination power of a measure. Since a fixed fuzziness value might imply different trade-offs for different metrics, we decided to vary the fuzziness value from 0.01 to 0.10 (following the work by Sakai (2007b)) and to draw for each measure a proportion-of-ties / error-rate curve. Figure 2 shows these curves for the c@1 , accuracy and UF measures. In the Figure we can see how there is a consistent de-crease of the error rate of all measures when the proportion of ties increases (this corresponds to the increase in the fuzziness value). Figure 2 shows that the curves of accuracy and c@1 are quite simi-lar (slightly better behavior of c@1) , which means that they have a similar stability and discrimination power.

The results suggest that the three measures are quite stable, having c@1 and accuracy a lower er-ror rate than UF when the proportion of ties grows. These curves are similar to the ones obtained for other QA evaluation measures (Sakai, 2007a). 4.3 Sensitivity The swap-rate (Voorhees and Buckley, 2002) repre-sents the chance of obtaining a discrepancy between two question sets (of the same size) as to whether a system is better than another given a certain dif-ference bin. Looking at the swap-rates of all the difference performance bins, the performance dif-ference required in order to conclude that a run is better than another for a given confidence value can be estimated. For example, if we want to know the required difference for concluding that system A is better than system B with a confidence of 95%, then we select the difference that represents the first bin where the swap-rate is lower or equal than 0.05.
The sensitivity of the measure is the number of times among all the comparisons in the experi-ment where this performance difference is obtained (Sakai, 2007b). That is, the more comparisons ac-complish the estimated performance difference, the more sensitive is the measure. The more sensitive the measure, the more useful it is for system dis-crimination.

The swap method works as follows: let S denote a set of runs, let x and y denote a pair of runs from S . Let Q denote the entire evaluation collection. And let d denote a performance difference between two runs. Then, we first define 21 performance differ-ence bins : the first bin represents performance dif-ferences between systems such that 0  X  d &lt; 0.01; the second bin represents differences such that 0.01  X  d &lt; 0.02; and the limits for the remaining bins in-crease by increments of 0.01, with the last bin con-taining all the differences equal or higher than 0.2. Let BIN(d) denote a mapping from a difference d to one of the 21 bins where it belongs. Thus, algorithm in Figure 3 is applied for calculating the swap-rate of each bin.
Given that Q i and Q  X  i must be disjoint, their size can only be up to half of the size of the original col-lection. Thus, we use the value c=250 for our exper-iment 1 . Table 2 shows the results obtained by apply-ing the swap method to accuracy , c@1 and UF , with c = 250, swap-rate  X  5, and sensitivity given a con-fidence of 95% (Column (iv)). The range of values are similar to the ones obtained for other measures according to (Sakai, 2007a).

According to Column (i), a higher absolute dif-ference is required for concluding that a system is better than another using UF . However, the relative difference is similar to the one required by c@1 . Thus, similar percentage of comparisons using c@1 and UF accomplish the required difference (Column (iv)). These results show that their sensitivity values are similar, and higher than the value for accuracy . 4.4 Qualitative evaluation In addition to the theoretical study, we undertook a study to interpret the results obtained by real sys-tems in a real scenario. The aim is to compare the results of the proposed c@1 measure with accuracy in order to compare their behavior. For this purpose we inspected the real systems runs in the data set. icia091ro 0.58 0.47 237 156 107 uaic092ro 0.47 0.47 236 264 0 loga092de 0.44 0.37 187 230 83 base092de 0.38 0.38 189 311 0
Table 3 shows a couple of examples where two systems have answered correctly a similar num-ber of questions. For example, this is the case of icia091ro and uaic092ro that, therefore, obtain al-most the same accuracy value. However, icia091ro has returned less incorrect answers by not respond-ing some questions. This is the kind of behavior we want to measure and reward. Table 3 shows how accuracy is sensitive only to the number of correct answers whereas c@1 is able to distinguish when systems keep the number of correct answers but re-duce the number of incorrect ones by not respond-ing to some. The same reasoning is applicable to loga092de compared to base092de for German. The decision of leaving a query without response is related to the system ability to measure accurately its self-confidence about the correctness of their candi-date answers. Although there have been one attempt to make the self-confidence score explicit and use it (Herrera et al., 2005), rankings are, usually, the implicit way to evaluate this self-confidence. Mean Reciprocal Rank (MRR) has traditionally been used to evaluate Question Answering systems when sev-eral answers per question were allowed and given in order (Fukumoto et al., 2002; Voorhees and Tice, 1999). However, as it occurs with Accuracy (propor-tion of questions correctly answered), the risk of giv-ing a wrong answer is always preferred better than not responding.

The QA track at TREC 2001 was the first eval-uation campaign in which systems were allowed to leave a question unanswered (Voorhees, 2001). The main evaluation measure was MRR, but perfor-mance was also measured by means of the percent-age of answered questions and the portion of them that were correctly answered. However, no combi-nation of these two values into a unique measure was proposed.

TREC 2002 discarded the idea of including unan-swered questions in the evaluation. Only one answer by question was allowed and all answers had to be ranked according to the system X  X  self-confidence in the correctness of the answer. Systems were evalu-ated by means of Confidence Weighted Score ( CWS ), rewarding those systems able to provide more cor-rect answers at the top of the ranking (Voorhees, 2002). The formulation of CWS is the following:
Where n is the number of questions, and C(i) is the number of correct answers up to the position i in the ranking. Formally: where I(j) is a function that returns 1 if answer j is correct and 0 if it is not. The formulation of CWS is inspired by the Average Precision ( AP ) over the ranking for one question: where R is the number of known relevant results for a topic, and r is a position in the ranking. Since only one answer per question is requested, R equals to n (the number of questions) in CWS . However, in AP formula the summands belong to the posi-tions of the ranking where there is a relevant result (product of I(r)), whereas in CWS every position of the ranking add value to the measure regardless of whether there is a relevant result or not in that po-sition. Therefore, CWS gives much more value to some questions over others: questions whose an-swers are at the top of the ranking are giving almost the complete value to CWS , whereas those questions whose answers are at the bottom of the ranking are almost not counting in the evaluation.

Although CWS was aimed at promoting the de-velopment of better self-confidence scores, it was discussed as a measure for evaluating QA systems performance. CWS was discarded in the following campaigns of TREC in favor of accuracy (Voorhees, 2003). Subsequently, accuracy was adopted by the QA track at the Cross-Language Evaluation Forum from the beginning (Magnini et al., 2005).

There was an attempt to consider explicitly sys-tems confidence self-score (Herrera et al., 2005): the use of the Pearson X  X  correlation coefficient and the proposal of measures K and K1 (see Formula 12). These measures are based in a utility function that returns -1 if the answer is incorrect and 1 if it is correct. This positive or negative value is weighted with the normalized confidence self-score given by the system to each answer. K is a variation of K1 for being used in evaluations where more than an answer per question is allowed.

If the self-score is 0, then the answer is ignored and thus, this measure is permitting to leave a ques-tion unanswered. A system that always returns a self-score equals to 0 (no answer) obtains a K1 value of 0. However, the final value of K1 is difficult to interpret: a positive value does not indicate neces-sarily more correct answers than incorrect ones, but that the sum of scores of correct answers is higher than the sum resulting from the scores of incorrect answers. This could explain the little success of this measure for evaluating QA systems in favor, again, of accuracy measure.

Accuracy is the simplest and most intuitive evalu-ation measure. At the same time is able to reward those systems showing good performance. How-ever, together with MRR belongs to the set of mea-sures that pushes in favor of giving always a re-sponse, even wrong, since there is no punishment for it. Thus, the development of better validation tech-nologies (systems able to decide whether the can-didate answers are correct or not) is not promoted, despite new QA architectures require them.
 In effect, most QA systems during TREC and CLEF campaigns had an upper bound of accuracy around 60%. An explanation for this was the effect of error propagation in the most extended pipeline architecture: Passage Retrieval, Answer Extraction, Answer Ranking. Even with performances higher than 80% in each step, the overall performance drops dramatically just because of the product of partial performances. Thus, a way to break the pipeline architecture is the development of a mod-ule able to decide whether the QA system must con-tinue or not its searching for new candidate answers: the Answer Validation module. This idea is behind the architecture of IBM X  X  Watson (DeepQA project) that successfully participated at Jeopardy (Ferrucci et al., 2010).

In 2006, the first Answer Validation Exercise (AVE) proposed an evaluation task to advance the state of the art in Answer Validation technologies (Pe  X  nas et al., 2007). The starting point was the re-formulation of Answer Validation as a Recognizing Textual Entailment problem, under the assumption that hypotheses can be automatically generated by combining the question with the candidate answer (Pe  X  nas et al., 2008a). Thus, validation was seen as a binary classification problem whose evaluation must deal with unbalanced collections (different propor-tion of positive and negative examples, correct and incorrect answers). For this reason, AVE 2006 used F-measure based on precision and recall for correct answers selection (Pe  X  nas et al., 2007). Other op-tion is an evaluation based on the analysis of Re-ceiver Operating Characteristic (ROC) space, some-times preferred for classification tasks with unbal-anced collections. A comparison of both approaches for Answer Validation evaluation is provided in (Ro-drigo et al., 2011).

AVE 2007 changed its evaluation methodology with two objectives: the first one was to bring sys-tems based on Textual Entailment to the Automatic Hypothesis Generation problem which is not part it-self of the Recognising Textual Entailment (RTE) task but an Answer Validation need. The second one was an attempt to quantify the gain in QA per-formance when more sophisticated validation mod-ules are introduced (Pe  X  nas et al., 2008b). With this aim, several measures were proposed to assess: the correct selection of candidate answers, the correct rejection of wrong answer and finally estimate the potential gain (in terms of accuracy) that Answer Validation modules can provide to QA (Rodrigo et al., 2008). The idea was to give value to the cor-rectly rejected answers as if they could be correctly answered with the accuracy shown selecting the cor-rect answers. This extension of accuracy in the An-swer Validation scenario inspired the initial develop-ment of c@1 considering non-response. The central idea of this work is that not respond-ing has more value than responding incorrectly. This idea is not new, but despite several attempts in TREC and CLEF there wasn X  X  a commonly accepted mea-sure to assess non-response. We have studied here an extension of accuracy measure with this feature, and with a very easy to understand rationale: Unan-swered questions have the same value as if a pro-portion of them had been answered correctly, and the value they add is related to the performance ( ac-curacy ) observed over the answered questions. We have shown that no other estimation of this value produce a sensible measure.

We have shown also that the proposed measure c@1 has a good balance of discrimination power, stability and sensitivity properties. Finally, we have shown how this measure rewards systems able to maintain the same number of correct answers and at the same time reduce the number of incorrect ones, by leaving some questions unanswered.

Among other tasks, measure c@1 is well suited for evaluating Reading Comprehension tests, where multiple choices per question are given, but only one is correct. Non-response must be assessed if we want to measure effective reading and not just the ability to rank options. This is clearly not enough for the development of reading technologies. This work has been partially supported by the Research Network MA2VICMR (S2009/TIC-1542) and Holopedia project (TIN2010-21128-C02).

