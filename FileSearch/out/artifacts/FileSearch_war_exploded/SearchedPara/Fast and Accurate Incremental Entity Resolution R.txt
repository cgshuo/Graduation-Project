 User facing topical web applications such as events or shop-ping sites rely on large collections of data records about real world entities that are updated at varying latencies ranging from days to seconds. For example, event venue details are changed relatively infrequently whereas ticket pricing and availability for an event is often updated in near-realtime. Users regard these sites as high quality if they seldom show duplicates, the URLs are stable, and their content is fresh, so it is important to resolve duplicate entity records with high quality and low latencies. High quality entity resolu-tion typically evaluates the entire record corpus for similar record clusters at the cost of latency, while low latency res-olution examines the least possible entities to keep time to a minimum, even at the cost of quality. In this paper we show how to keep low latency while achieving high quality, combining the best of both approaches: given an entity to be resolved, our incremental Fastpath system, in a matter of milliseconds, makes approximately the same decisions that the underlying batch system would have made. Our experi-ments show that the Fastpath system makes matching deci-sions for previously unseen entities with 90% precision and 98% recall relative to batch decisions, with latencies under 20ms on commodity hardware.
 H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval Entity Resolution, Knowledge Base
The problem of deduplication and linking data records that refer to real world entities arises in several contexts. For ple sources and generate a single, unified semantic graph of d eduplicated records called an entity knowledge base.
The key stage of the Batchpath system is the Builder , which deduplicates the input records in a two step process. The Builder first partitions the data set into blocks of sim-ilar records, so that instead of comparing O ( n 2 ) objects, we need only compare O ( b 2 ) objects [7], provided blocking functions separate dissimilar records. Blocking functions are data dependent, for instance using n-grams for large text fields, numeric comparisons for telephone numbers, and so on.

In the second Builder step, within each block we perform a more thorough similarity comparison between all pairs of ob-jects. This pairwise similarity measure operates on the same parcel used for blocking, though it need not use the same set of attributes. The similarity score between each pair of objects in a block creates a connected component graph with weighted edges. Pairs whose similarity score is above a certain threshold are considered similar. Subsequent stages of the Builder refine these connected components, splitting or merging them to form a final set of distinct entities. Full details of the Batchpath system can be found in another paper [2].

Fastpath uses a search engine to select matching records for a deduplication decision. We allow for two common in-cremental operations: (1) either the query object is added to an existing cluster, or (2) it forms a new cluster. This elim-inates some of the complexity seen in the full graph, such as a merge or split operation potentially cascading changes to neighboring objects, while still providing high accuracy deduplication in most cases.

Fastpath reuses several components of Batchpath, includ-ing (1) the same blocking functions to generate blocking keys for the query record, (2) the same entity blocking keys as terms in the search engine, (3) the same pairwise com-parison functions, and (4) the same matching thresholds to select the best matching entity.

We first populate a search index for the knowledge base created by Batchpath, where each object is indexed by its blocking keys. At runtime, we apply the same blocking func-tion to the incoming query record and find candidate match-ing entities in the index. We use multiple blocking functions in the Batchpath to ensure that we do not miss any entities that we should have compared [9], thus improving recall . Using these same keys as terms for a query record allows the search engine to use standard text ranking approaches to provide an initial candidate ranking.

We compute the pairwise similarity score between the query record and each of the top-k candidate entities, and se-lect the entity with the highest score S max . If S max is above a configurable threshold (typically, the same threshold value used during entity cluster refinement in the Batchpath), we consider the entity as a match and return it as the result.
In our experiments we use a subset of data which is cur-rently serving the local event listings 1 for Yahoo. Our exper-iments were performed on a dual-core 2.4 Ghz Intel Core2 machine with 4GB of memory running Linux. This ma-chine hosts both the Fastpath logic and the text retrieval
A n event may be a professional sports game, theatrical performance, a city council meeting, farmers market, etc. c luster) and a false negative match (returning no result). There are no  X  X rue negative X  results, as each query should match an entity. We expect high but not necessarily perfect precision or recall, as the Fastpath system only has a partial view of the entity graph.

Figures 1 and 2 shows how varying values of k effect pre-cision, recall, F-measure, and average query execution time of the system. We use the standard definition of precision and recall for classification tasks. As we consider additional candidate entities for deeper evaluation, the recall and query execution times increase, while the precision remains effec-tively constant. This suggests that the re-ranking applied to the retrieved entities nearly always finds the  X  X ight X  can-didate out of the available choices. Retrieving additional candidates generally improves the accuracy of the system up until approximately k = 10, above which we see only insignificant improvements in recall and F-measure. This shows the initial search engine ranking generally captures the correct result in the top 10.

When considering the top k = 10 candidate entities se-lected by term ranking, false positives, or queries where the Fastpath matches an object to the incorrect cluster, occur less than 1% of the time. The false negative rate is also low at 1 . 33%. Collectively this means customers using the Fastpath system will experience minimal overhead in their system as they process additional full knowledge bases pro-duced by the grid system.
Next, we evaluate the ability to match updates to exist-ing entities or previously unseen records to the appropriate entity cluster, as would be the case when new records are discovered by the search engine, but have not yet been seen by the Batchpath. As we have noted earlier, when exam-ined by Fastpath alone, such records cannot cause existing clusters to split or merge. We simulate this behavior by first constructing a complete knowledge base as before. We uniformly at random sample 1% of the input records into a subset S 1% . For each record O i in S 1% , we identify the cluster in the knowledge base which contains O i as a source and remove all attribute values, relations, and blocking keys provided to that entity by O i . We then create an inverted index from the modified knowledge base and use the records in S 1% to query the Fastpath. For comparison, we have the same number of entity clusters as the previous experiment, highlighting this tradeoff. In either scenario, the Fastpath a chieves approximately 90% precision while also finding over 95% of the matching entities in the knowledge base.
Developments in entity resolution have been recently sur-veyed in [7, 17, 5]. Since the early work on census [12] re-searchers have sought to reduce the number of entities that need comparison by improving blocking techniques. Im-provements include the development of effective blocking functions [6], minimizing number of comparisons [3], scal-able blocking approaches such as Canopy Clustering [11], Multiblock, a way to avoid missing any comparisons [9], and frameworks for scaling blocking [14]. We have adopted Canopy Clustering and Multiblock approaches in our batch system, and adapted the ideas of [1] for better quality.
Two papers propose algorithms that trade off execution time for quality of results to complete computations in a rea-sonable amount of time. [18] approaches the problem from a database view and introduces an anytime algorithm capa-ble of clustering massive data sets with a large number of features. Similarly, [16] uses X  X ints X  X o better guide a pay-as-you-go clustering algorithm. Both approaches generate high quality results without performing a complete comparison.
Closer to our approach, [4] proposes the combination of blocking and information retrieval techniques to first select similar entities at low latency, followed by further analysis of those entities in ways that avoid having to exhaustively com-pare all their features. A similar approach is taken in [13] for discovering co-occurences of entities (phrases) in a doc-ument collection. Word sets, called  X  X ntity chains X , in in-put documents are compared with existing clusters of entity chains using several similarity scores, and top-k clusters are returned as likely matches. New clusters are created if an existing cluster is not found. Our indexing system is sim-ilar to that of [4, 13], but we use blocking keys as terms in our search engine. Like [13], our system can also create new entities. However, to the best of our knowledge, our ap-proach of combining the indexing and batch approach, with continuity between the two systems, appears to be unique.
In this paper we presented the unique requirements and design of an entity resolution system suitable for topical Web sites. Our system began as a purely batch processing entity resolution platform, Batchpath, focused on building a high quality knowledge base. Additional requirements of topi-cal Web applications, such as latency, necessitated design-ing an alternative path which supports fast entity resolution while maintaining accuracy. The Fastpath system achieves these goals, operating as a low latency, incremental knowl-edge base, seeded by the high quality Batchpath output.
Our experiments on large scale, real-world data have demon-strated the Fastpath meets all the requirements of a topical Web site: it performs deduplication operations for entities in under 20ms while running on commodity hardware, it
