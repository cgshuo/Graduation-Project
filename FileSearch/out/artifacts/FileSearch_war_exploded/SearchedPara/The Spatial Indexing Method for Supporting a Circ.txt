 Spat i al database systems are requ i red to have h i gh memory space and process i ng t i me apply i ng a su i table i ndex structure and a query process i ng techn i que[1,2,5,6] . appl i cat i ons, such as Geograph i c Informat i on Systems, CAD and VLSI des i gn can qual i t i es .

The example of reg i on and nearest ne i ghbor quer i es occurr i ng i n the c i rcular env i ronment i s as follows: (1) f i nd all ob j ects at wh i ch X i s from 315 to 20 degrees and Y i s from 15 to 40 (2) f i nd all ob j ects that i s occurred i n the nearest t i me at 23:40, where the doma i n 
The reg i on query 1) i s the example wh i ch i s composed of a query range conta i n i ng bucket .
 the bucket ut i l i zat i on . All prev i ous spat i al i ndex i ng methods have i n common that any doma i n, space . Any doma i n range . And also the query range covered by a reg i on query can get the c i rcular range i n N -d i mens i onal search spaces .

Before proceed i ng, we need some def i n i t i ons . Let next and prev be the funct i ons These funct i ons have a locat i on value as parameters .
 and def i n i t i on 2 .
 Def i n i t i on 1: (C i rcular Doma i n) The doma i n 1) ) 1 0 ( ) ( 2) ) 1 0 ( ) ( Def i n i t i on 2: (L i near Doma i n) The doma i n 1) a locat i on attr i bute value return i ng by ) ( 2) ) 1 0 ( ) ( d i mens i onal search space: let ] , [ where i s represented by . l i near reg i on quer i es as noted i n the follow i ng def i n i t i ons . Def i n i t i on 3: (C i rcular Reg i on Query) A reg i on query Q i s called the c i rcular reg i on query, i ff more than one query range organ i z i ng a reg i on query Q i s occurr i ng i n a c i rcular doma i n &gt; .
 Def i n i t i on 4: (L i near Reg i on Query) A reg i on query Q i s called the l i near reg i on query, i ff all of query range and . reg i on quer i es can be m i n i m i zed . subsearch spaces of a bucket wh i ch i s generated by a spat i al i ndex i ng method requ i red more buckets than that of f i g . 1(a) for good spat i al local i ty . number of access to buckets i s 5 . 3.1 Index Structure 0 . If S i s 0, search spaces cons i st of l i near doma i ns that the prev i ous spat i al i ndex i ng methods have been assum i ng .

A bucket conta i ns a header and more than one ob j ect . Each ob j ect has the follow i ng form, where covered by a correspond i ng ob j ect i n the search space . Where represented as Cartes i an products : where 
A node conta i ns a header and 1-d i mens i onal array structure, and each of them has the form, where R i s a N -d i mens i onal subsearch space, flag represents whether a subsearch space has the c i rcular qual i t i es or not, and next level of the CR * -tree or an address-po i nter of bucket .
 covered by one bucket and 
In a search space w i th two c i rcular doma i ns, f i g . 2 shows an example of the nested h i erarchy of buckets and subsearch spaces and f i g . 3 the correspond i ng CR * -w i th the c i rcular qual i t i es . 3.2 Algor i thms In all algor i thms of the CR * -tree, subsearch spaces w i th a c i rcular doma i n are handled by transform i ng i nto log i cal subsearch spaces . If any closed bounded i nterval organ i z i ng a subsearch space has transformed i nto a log i cal subsearch space wh i ch i s summ i ng up a max i mum value of doma i n conta i n i ng a closed bounded i nterval to
The algor i thms of the CR * -tree are based on that of the R * -tree . In th i s sect i on, we only ment i on the d i fference between the algor i thm of the CR * -tree and that of the R * -spaces .
The search algor i thm starts w i th a root and exam i nes each branch that i ntersects the entr i es that i ntersect the query reg i on as qual i f i ed ob j ects . reg i on query by summ i ng up a max i mum value of correspond i ng doma i n to the end i ng value of a query range w i th the c i rcular qual i t i es .
 Algorithm SEARCH (node N, Region Query Q) /* Perform Region Query Q ), , , , ( 1 1 0  X  N I I I i I denotes a range { S1. [ Convert a circular region query to a logical region For all I in the region query Q If i s is more than i e then i e plus the maximum value S2. [ Search nonleaf nodes ] For every entry i N in N Invoke SEARCH ( child N i . , Q ) for every entry whose MBR S3. [ Search objects in bucket ] Output all objects that intersect the region query Q . } spat i al local i ty among ob j ects conta i ned i n subsearch spaces and buckets . Algorithm INSERT(node N, object o) /* Insert object o into a tree rooted at N */ { I1. [ Find the bucket for new object o ] Use ChooseBucket ( o , pt r ) to choose a bucket B in I2. [ Add object o to bucket B ] Insert o into B . If B is first overflow, else invoke SplitBucket( B , o ), which will return I3. [ Propagate changes upward ] Form a set S that contain B , its adjacent siblings, I4. [ Grow tree taller ] } tree, choos i ng the node at each level whose subsearch space needs the least area correspond i ng bucket whose subsearch space needs the least overlap enlargement to i nclude the new ob j ect by cons i der i ng the locat i on attr i bute value c i rcularly . Algorithm ChooseBucket(object o, pointer p) /* Return the bucket in which to place a new object o */ { C1. [ Initialize ] Set N to be the root node. C2. [ Leaf check ] If N is a leaf, return N . C3. [ Choose subtree ] C4. [ Descend until a leaf is reached ] Set N to the node pointed by p and repeat from C2. } than spl i ts i t unless re i nsert i on has been made at the same node or bucket . Otherw i se, as follows . For each d i mens i on, the ob j ects are sorted accord i ng to the i r lower bound and accord i ng to the i r upper bound, and the area of the m i n i mum bound i ng rectangles i nsert, we update the node entr i es and i nformat i on of the affected nodes along paths . 4.1 Env i ronment for Exper i ment To show the pract i cal i mpacts of our method, we performed an extens i ve exper i ment evaluat i on of the CR * -tree and compared i t to the R * -tree .
 usually overlap to a some extent .

To evaluate the performance of the CR * -tree and the R * -tree, we selected f i ve ob j ect d i str i but i on used i n the exper i ments .
 we only descr i be the exper i ment results based on the un i form and the corner where the max i mum of d i str i but i on dens i ty occurs i n the part of search space and the c i rcular qual i ty i s much reflected .

We constructed i nd i ces for these data sets and measured the number of d i sk accesses, storage space requ i rement, and bucket ut i l i zat i on .

To evaluate the performance for quer i es process i ng, we generated seven groups of 1000 quer i es are squares vary i ng i n s i ze wh i ch are 0 . 01%, 0 . 1%, 0 . 5% and 1% of the And the rate of each c i rcular reg i on query var i es from 0%, 5%, 10%, 15%, 20%, 25% to 30% relat i vely to the number of quer i es .

In order to keep the performance compar i son manageable, we have chosen the bucket ut i l i zat i on, the buffer s i ze i n th i s exper i ment i s from 1K to 32Kbytes . 4.2 Exper i mental Results accessed becomes max i mal . In th i s paper, we have descr i bed the correlat i on between env i ronment where the number of d i sk accessed i s max i mal .

In the f i rst exper i ment, we i nvest i gated the number of d i sk accesses over the rate of number of d i sk accesses . They clearly dep i ct that the CR * -tree outperforms the R * -tree search space .

Therefore, the number of buckets access i ng to the c i rcular reg i on query becomes large . From the exper i ment results, the CR * -tree cons i stently outperforms the R * -tree grew, the i ncrease i n d i sk accesses i s lower than the R * -tree relat i vely .
In the second exper i ment, we measured the storage space requ i rement needed to i nserted ob j ects when the buffer s i ze i s 4Kbyte . By extens i ve exper i ment results, the R -tree regardless of the buffer s i ze . But, the CR * -tree shows lower the storage space large .

In the th i rd exper i ment, we exam i ned the correlat i on between the i ncrease i n shows 67~73% and 68~72% bucket ut i l i zat i ons cons i stently w i thout respect to buckets, cons i der i ng the c i rcular locat i on property of ob j ects i n a search space where the c i rcular doma i n i s i ncluded . In order to i mprove the retr i eval performance i n spat i al database systems, the c i rcular locat i on property that ob j ects w i ll be taken should be cons i dered for construct i ng the ob j ects was not cons i dered .

In th i s paper, we i ntroduced the c i rcular doma i n and the c i rcular reg i on query, and property of ob j ects . We i mplemented the CR * -tree, and we reported performance l i near reg i on query are processed i n these search spaces .

Accord i ng to the exper i ment results, the number of d i sk accesses of the CR * -tree i s property of ob j ects .

In our performance evaluat i on of the CR * -tree, we found that the CR * -tree sl i ghtly property i s able to m i n i m i ze the cost of i ndex construct i on and query process i ng .
