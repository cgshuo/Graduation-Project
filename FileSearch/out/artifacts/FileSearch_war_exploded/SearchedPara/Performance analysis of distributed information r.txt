 1. Introduction In recent years, the increase in the volume of information available over the Internet has been spectacular.
For this reason, it is increasingly important to use information retrieval (IR) systems on the Web to manage, recover and filter the information available in this environment. These Web IR systems must have suitable mechanisms for indexing a large amount of information, and make it possible for users to locate the informa-tion they require in a very short time, while simultaneously dealing with a large number of queries.
IR systems based on a single centralised index suffer from a lack of scalability, which reduces their utility high user load. For this reason, it seems more appropriate to use the method based on distributed information retrieval (DIR) for information searching and storage.

A distributed IR system is made up of two components: the brokers and the query servers. The brokers interact with the users, receiving the queries, distributing them to the query servers and sending back the final results to the user. The query servers process the queries and send their partial results back to the brokers for the final merging. A replicated system is composed of one or more distributed IR systems, and each distributed system indexes the whole collection. For example, the Google web search service is based on a distributed and enhancements for distributed and replicated IR systems indexing very large collections.

The different strategies for distributing an inverted index over a collection of query servers have been studied the query terms, and they return a list of relevant documents for each term. In the local inverted file strategy, each query server is responsible for a disjoint subset of documents. To process a query, the search terms are broadcasted to all the query servers, which return a disjoint list of relevant documents. Tomasic and Garcia-Molina (1993) proved that the local inverted file organisation provides good query throughput in most cases.
This study is a continuation of our previous work on different architectures for a distributed IR system, introduced in Cacheda, Plachouras, and Ounis (2004) and extended in Cacheda, Plachouras, and Ounis (2005) . The SPIRIT collection, which consists of 94,552,870 documents and 1 terabyte (TB) of text ( Jones et al., 2002 ), was used in this previous study to simulate a basic distributed IR system using a local inverted be sorted) and the interconnection network (in a replicated system, due to the high number of query servers and the continuous data interchange with the brokers).

In this work, we continue to make use of the SPIRIT collection and the local inverted file strategy. We tion network of the distributed system. In our previous work, the simulation network model was based on a shared access network. In a shared access network the transmission media is shared out among all the hosts, which must compete to access the media and send their transmissions. The switched network is the evolution of the former and it is based on a device named switch, which centralises the communication among the hosts.
In this way, the switch will reduce the transmission conflicts because a host only has to compete with other hosts that want to communicate with the same destination, increasing the effective network speed. Therefore, in this article, the simulation network model is extended to represent a switched network and this new model is validated comparing the estimated response times against a real distributed IR system. We use the switched network model to analyse improvements in performance, compared to the shared access network, for distrib-uted and replicated IR systems. This is especially interesting when simulating a considerable number of work-stations (i.e. more than 1000) because these configurations are complex and expensive to be implemented. An analysis is also made regarding the benefits of multicast messages (multiple recipients allowed for one message) and the use of faster connections with the brokers.

Second, we focus on reducing the identified brokers X  bottleneck for the distributed IR system. We explore two different strategies. The first strategy involves reducing the number of partial results sent by the query servers. The second strategy is focused on changing from a centralised broker model to a distributed hierar-chical model.

In tackling the two main bottlenecks for a distributed and replicated IR system, the article addresses the following research questions: (a) Does the use of a switched network reduce the network bottleneck? (b) Can a reduction in the partial results sent by the query servers reduce the brokers X  bottleneck without a (c) Can a hierarchical distribution of the brokers alleviate the brokers X  bottleneck?
The focus in this article is on the use of distributed computers on an interconnection network to index and search from very large collections of data. Although the response times obtained depend on the specific system help in the design and development of new distributed IR systems.

The article is organised as follows. We start by presenting the related work in Section 2 . In Section 3 ,we describe our simulation model, focusing mainly on the changes introduced in the network model and the eval-uation of the simulation model. In Section 4 we describe the simulations performed for the network analysis and we answer the first research question. Section 5 presents the results for the experiments related with the brokers X  bottleneck: the partial results reduction and the brokers X  distribution, answering the second and third research questions. Finally, the main conclusions and some future directions are presented in Section 6 . 2. Related work
The work in this article is related to the performance analysis of different architectures for distributed IR systems, especially focused on the networking issues. We present the main articles in this area describing briefly the different networking approaches. We also provide a detailed description of our own previous work, as this article is its direct and natural continuation.

Tomasic and Garcia-Molina (1993) studied the performance of several parallel query processing strategies using various options for the organisation of the inverted index, simulating a small group of hosts intercon-nected through a local area network (LAN). They represented a shared access network using a global LAN queue and including a fixed overhead for each network transmission.

Ribeiro-Neto and Barbosa (1998) used a simple analytical model coupled with a small simulator to study how query performance is affected by different parameters (e.g. network speed) in distributed digital libraries.
In their work, the network is represented as part of the analytical model including a parameter that corre-sponds to the average time to transfer 1 byte from one host to another.

Cahoon and McKinley (1996) described the result of simulated experiments on the distributed INQUERY architecture. They used the observed behaviour of a mono-server implementation to estimate the performance figures for a distributed implementation. In their simulation experiments the network is represented as the sen-der and receiver overhead and the network latency. The sender and receiver X  X  overhead is the processing time to read and write a message on the network, and it was measured empirically. The network latency is the amount of time the message spends on the network and depends on the size of the message and the bandwidth of the network.

Lu and McKinley (2000) used the same simulator as ( Cahoon &amp; McKinley, 1996 ) to analyse the effects of partial collection replication, and to improve the performance on a collection of 1TB.
 Burkowski (1990) described a simulation study which measures the retrieval performance of a distributed
IR system, using a small collection. In his experiments, a high performance LAN is used to connect a group of user workstations with a cluster of servers, although the network times are not considered in the simulation model.

Coevreur et al. (1994) analysed the performance of searching large text collections (more than 100GB data) on parallel systems. They used simulation models to investigate three different hardware architectures (a main-frame system, a collection of RISC processors and a special purpose machine architecture) and search algo-rithms. For the second architecture, an Ethernet network interconnected the system, although the defined model did not include the simulation of the communications.

Some other articles studied the performance of different architectures for distributed IR systems operating with real implementations. Martin, Macleod, and Nordin (1986) described the design of a distributed infor-mation system for full text retrieval, developed on a network of PC X  X  interconnected by PC Network. The authors did not provide any details about the network technology used, although they described briefly the used communication protocol.

Lin and Zhou (1993) implemented a distributed IR system on a network of workstations, showing large speedup improvements due to parallelisation. The authors used an Ethernet network to interconnect a cluster of DEC5000 workstations.
Hawking (1997) designed and implemented a parallel IR system on a collection of workstations doing experiments with a maximum of 64 workstations. The base configuration consists of 10 machines connected to an Ethernet switch by a 10BaseT link, constituting a 10 Mbps switched Ethernet.

Finally, in Cacheda et al. (2004) and Cacheda, Plachouras, et al. (2005) , we studied the performance of a distributed, replicated and clustered system simulating a very large Web collection such as SPIRIT ( Jones et al., 2002 ). The simulated network represented a shared access local area network operating at 100 Mbps, following the model of Tomasic &amp; Garcia-Molina (1993) . Two main bottlenecks were identified in the distributed and replicated IR systems: the brokers and the network. The load on the brokers was mainly due to the number of local answer sets to be merged. The network bottleneck was due to the high number of query servers and the continuous data interchange with the brokers, especially in a replicated IR system.

Our ultimate objective in this article is to evaluate the performance of distributed architectures for large-scale IR systems. We focus on the network simulation model and use a more realistic network environment.
The main difference with the related works is the definition of a new network simulation model that represents a switched network with an exhaustive estimation of the communication overhead, based on the limitations identified in previous work reported in literature. 3. Simulation model
The simulation model of a distributed IR system used in this work is based on our previous work described in Cacheda et al. (2004) and Cacheda, Plachouras, et al. (2005) , where we implemented a discrete event-ori-ented simulator using the JavaSim simulation environment ( Little, 2001 ).

The defined simulation model represents a local index organisation system. All the queries are stored in a global queue, which is controlled by one or more central brokers. Each broker will take one query and will send it to all the query servers through a network ( Ribeiro-Neto &amp; Barbosa, 1998 ). Each query server then processes the whole query locally, obtains the answer set for that query, ranks the documents, selects a certain number of documents from the top of the ranking and returns them to the broker. The broker collects all the local answer sets and combines them into a global and final ranked set of documents.

In our previous work, we used an analytical model for the querying process in a distributed IR system, where the processing time for a query q i (named t i ) was divided into three phases: the processing time in the query servers ( P 1 ), the reception time of the partial results in the broker ( P results in the broker ( P 3 ). Therefore, the processing time for a query q where the following parameters are used: q i vector of keywords for the i th query t i , j total time (in milliseconds) to complete the processing of query q ra i , j time to receive the local answer set for query q i from the query server j tc time to compare two identifiers and swap them tr i , j number of documents from the top ranking in query q
The time for processing the query in a query server was divided into five phases: the reception time of the query from the broker ( P 1,1 ), the initialisation time ( P time to read the inverted list of each term from disk ( P for the query server j to process the query q i ( t i , j where the following parameters are used: rq i , j time to receive the query q i for the query server j ti initialisation time, including memory allocation and output display, if necessary k i number of keywords in query q i ts average seek time for a single disk d k , j number of documents of the inverted list for keyword k on query server j tr average time to read the information about one document in an inverted list and do its processing r i , j number of results obtained for query q i on query server j .
 The parameters ti , ts , tr and tc were calculated from the real IR system used in our previous work ( Cacheda,
Plachouras, et al., 2005 ). The time to merge and sort n results ( tc ) was computed according to the following logarithmic model: tc ( n )= tc 0 + tc 1  X  n + tc 2  X  ln( n ), where tc cients ( tc 0 is introduced as a constant coefficient for convenience).

The number of documents associated with each query term in a query server ( d results obtained in a query server ( r i , j ) were estimated through the simulated SPIRIT collection model ( Cacheda, Plachouras, et al., 2005 ). In this collection model, the size of the vocabulary was estimated through the Heaps X  law ( Heaps, 1978 ) and the distribution of terms was adjusted to a quadratic model following the Zipf X  X  law. The queries were generated as a sequence of K terms ( t and identically distributed. The skewed query model ( Jeong &amp; Omiecinski, 1995 ) was used, where the prob-ability of a term occurring in a query is proportional to that term X  X  frequency in the vocabulary. The query skewed model provided more realistic queries than the uniform query model ( Cacheda, Plachouras, et al., 2005 ).

An important issue is that the parameters that estimate the transmission times among the hosts (i.e. rq ra i , j ) cannot be estimated using an analytical model as they depend directly on the network load of each moment. Therefore, it is necessary to capture the behaviour of the network to represent accurately the response times of a distributed IR system. The network model is described in Section 3.1 , and evaluated in
Section 3.2 . 3.1. The network model
In our previous work ( Cacheda et al., 2004; Cacheda, Plachouras, et al., 2005 ), the simulated distributed IR system assumed a single LAN that was represented by a single FCFS infinite length queue. This LAN man-aged all the messages sent by the brokers to the query servers and the answers from the query servers to the brokers. The service time for a request was calculated by the following equation:
The parameters used in the simulation of the network are described in Table 1 . The RequestLength param-eter depends on the type of message sent. If a query is sent to the query servers, the value of the QuerySize parameter will be used. If the local answer set for query q the length of the packet will be: tr i , j  X  DocAnswerSetSize .
 This initial network model has certain limitations that reduce the capacities of the simulated IR systems.
The network model represents a simple shared access network, where all the hosts of our distributed IR system into account certain physical restrictions of LANs.

LANs have two physical restrictions: the number of nodes that can be connected to the network, and the maximum length of each segment. By definition, in a shared access network the maximum segment length is the maximum length for the network itself, while in a switched network, the maximum segment length is the maximum length from each node to the switch. For example, according to the IEEE 802.3 specifications for a shared network using a bus topology at 10 Mbps in 10BASE5, the maximum segment length is 500 m, with a maximum of 100 nodes per segment. In a switched network 10BASET the maximum segment length is 100 m and the maximum number of nodes is determined by the number of interfaces of the switch ( Spurgeon, 2000 ).
These limitations, especially the maximum number of nodes per segment, were not taken into account in designing the previous network model, which limits its capacity to represent a real environment.
Moreover, all network technologies have a certain overhead that is inherent to the operation of the net-work. This overhead consists of the increase in the amount of information sent via the network, through width and a subsequent increase in transmission time.

In our previously proposed network model, this overhead is represented approximately by the LANOver-head parameter, with a constant value of 0.1 ms, following the model described by Tomasic and Garcia-
Molina (1993) . Although this is a good approximation for a generic case of sending a packet via the network, it is necessary to take into account the specific sizes of the headers used in the communication protocol of the distributed IR system, and in particular to consider IP fragmentation for packets that exceed a given size.
With the aim of improving the limitations of the previously proposed network model, we have defined a new network model, equivalent to a switched network FastEthernet 100BASE-T at 100 Mbps. This new model represents a switched local area network (compared to a shared access network), where the hosts are intercon-nected via one or more switches. Depending on the number of hosts to be interconnected, one or more switches are used, assuming that each switch has a capacity for 64 hosts. Moreover, the overhead estimation is carried out exhaustively, taking into account the different headers of the communication protocols, IP frag-mentation, and even the propagation delay. The design of this new network model has also extended the capacity to represent multicast traffic, compared to the previous model that only allowed unicast messages to be used amongst the different hosts.

In more details, the design of the new network model based on a switched LAN is shown in Fig. 1 . Each host connected to the network has two FCFS infinite length queues (one for sending packets and another for receiving packets), compared to the previous model, which used a global FCFS infinite length queue for the entire network. This model makes it possible to represent a switched LAN, as two independent origin hosts may communicate with two independent destination hosts without having to have shared access to the network.

The send queue represents the output buffer at the output interface of the transmitter, while the reception queue represents the entry buffer at the receiver interface. To send a packet, this is introduced in the send queue of the origin host and then passes directly to the reception queue of the destination host.
The output of a packet from the send queue to the reception queue is carried out when the packet is the first element in the queue, if and only if the receiver is not receiving another packet. In the reception queue, each packet has an assigned service time (before being delivered to the host), equivalent to the transmission time via the network, and it is calculated as it will be shown below.

Furthermore, the ability to manage multicast traffic has been incorporated in the newly implemented net-work model. This is achieved by permitting, the direct communication from the send queue of the sender to multiple entry queues, considering the time associated with the sending of a single packet. The advantages of messages of this type will be analysed in details in the next section.

When estimating the transmission time of a packet via the network, consideration has been given to the headers of the different protocols used in the communication and the propagation delay of the signal via the transmission system.

The communication protocol used by the distributed system between the query servers and the brokers is assumed to be based on a non-connection oriented service, taking into account the volume of interconnected hosts and the characteristics of the exchange of data. Therefore, we consider that the transport layer uses the
UDP protocol (with a header size of 8 bytes), the network level uses IP (with a standard header of 20 bytes) and for the connection level, the Ethernet protocol was considered (with a header of 26 bytes).
This network model also considers IP fragmentation according to the mechanism described in RFC 791 (MTU) corresponding to the connection level (1500 bytes in the case of Ethernet), the original message is divided into fragments of acceptable size for the MTU. These fragments are only reconstructed when they reach the final destination.

Moreover, propagation delay represents the time that an electromagnetic signal takes to circulate from one end of the segment to the other. This time is usually measured in bits and mainly depends on the size of the segment and the type of used transmission method. In a FastEthernet 100BASE-T network, the maximum level for propagation delay is 512 bits (corresponding to 5.12 ns) and equivalent to a maximum segment size (approximately 200 m) ( Spurgeon, 2000 ). In the simulated model, we assume a uniform distribution of the machines, hence an intermediary value of 256 bits was chosen (corresponding to 2.56 ns), equivalent to a mean segment size (approximately 100 m).

Finally, with the aim of analysing the similarity between the proposed model for a switched LAN and a real setting, a series of experiments were developed in order to compare real transmission times compared to those estimated using our model.

In these experiments, we used two computers connected via a crossed cable representing a connection through a switch (the delay introduced by a switch is negligible). The direct connection using a switch was not possible, as the available switches had insufficient buffers which caused packet losses.
A transmitter process was installed in one computer and a receiver process in the other. The transmitter process was responsible for generating multiple consecutive packets (from 10 to 1025), which were received by the receiver process, responsible for measuring transmission times.
 In an initial experiment, communication was evaluated via an Ethernet at 10 Mbps connecting two Ultra
Sparc 1 (128MB RAM and one 167 MHz processor) with 10BASE-T network cards and sending messages of 1000, 2000, 3000 and 4000 bytes, measuring the corresponding send times.
 The equivalence between the real and the estimated times was evaluated using the non-parametric tests of
Mann X  X hitney and Kolmogorov X  X mirnov two sample tests, confirming the correspondence between both, with p -values of more than 0.889 (see Table 2  X  left). The non-parametric tests of Mann X  X hitney and Kolmogorov X  X mirnov are used in the detection of population differences when certain assumptions are not satisfied (i.e. normal distribution of the population), as this is the case for the sending times measured and estimated. The Mann X  X hitney test is used to test if two independent samples come from the same population and the Kolmogorov X  X mirnov test is used to test if two samples have the same distribution ( Gibbons &amp; Chak-raborti, 2003 ). A high p -value means that there is no statistically significant difference between the two populations.

A FastEthernet network at 100 Mbps was also evaluated, connecting two PCs (512MB RAM and one 1.5 GHz processor) with 100BASE-T network cards and repeating the previous experiment. dence between the real and the estimated transmission times was also evaluated using the Mann X  X hitney and
Kolmogorov X  X mirnov two sample tests, confirming the correspondence between both, with p -values of more than 0.898 (see Table 2  X  right). 3.2. Simulation model evaluation
When developing a complex simulation model that includes multiple sub-systems connected through a network, it is very important to test the correspondence of the estimated times in the simulation model with the times obtained in a real system, if possible. The accuracy of the response time for one query server was tested in Cacheda, Plachouras, et al. (2005) , the network simulation is improved in this article and the correspondence with a real network has been proved in the previous section. The final step will be to test the accuracy of the entire simulated distributed IR system compared to a real distributed IR system.

For this purpose we used the Terrier IR system described in Plachouras et al. (2004) , using an architecture of one broker and seven query servers, each one running on an independent computer. All the machines are
Intel Pentium 4 CPU 2.40 GHz with 512MB of RAM and connected in a 100 Mbps switched network. For this test, we indexed the GOV2 collection (426GB and 25 million documents) ( Clarke, Craswell, &amp; Soboroff, 2004 ), removing stopwords and applying a weak Porter X  X  stemming algorithm. We used the system five times (the same as the simulated system) with 100 queries each time. The first 50 queries are from the topic distil-lation task of TREC 2002 ( Craswell &amp; Hawking, 2002 ) and were used to warm up the system, initialising the buffers, main memory variables and any other dynamic component of the IR system. The 50 last queries are the queries from the TREC 2004 Terabyte track ( Clarke et al., 2004 ) and we use those for calculating the aver-age execution times for each query and comparing with the simulation results.

In order to test the accuracy of the simulation model, we adjusted the parameters to the real system, the collection index and the queries used. The values used for the analytical model are: ti = 62.335 ms, ts = 0.03 ms, tr = 1.15 l s, tc 0 = 470, tc 1 = 0.0, tc 2 as a collection of 25,205,179 documents and 648.75 terms per document, distributed randomly and uniformly in seven query servers. For the queries, we obtained the number of documents retrieved for each query term and the number of results retrieved from the experiments with the real system. We used these values to esti-mate the response times in our analytical model. We ran five different simulations and the response times were obtained as the average value for the five runs.

The results obtained from the comparison are presented in Fig. 2 and in Table 3 . For the comparison, we removed the results for queries 721 (topic title  X  X  X ensus data applications X  X ) and 749 (topic title  X  X  X uerto Rico state X  X ) as they represented clear atypical data from the response times obtained for the real system. This could be explained by the fact that, in the real system, the documents were not uniformly distributed among the query servers. The latter is due to a sequential indexing of the collection by the query servers (the first query the collection contain mainly homepages and the last ones contain mainly long documents, such as PDF or text documents). This distribution may produce high response times in some queries, as those obtained for queries 721 and 749.
 In Fig. 2 we present the graphical comparison between the response times obtained for the real distributed
IR system and the estimated times obtained through our simulation model. We can observe that the response time for the simulation model follows closely that of the real system.

Table 3 provides a summary of the results obtained in the Mann X  X hitney and Kolmogorov X  X mirnov two sample tests, in order to confirm the correspondence between the real and predicted response times. The first row (labelled  X  X  Response time (global)  X  X ) presents the results obtained for the comparison of the average response time for each query in the real and simulated distributed IR system (as showed in Fig. 2 ), clearly accepting the equivalence between both systems (with p -values of 0.820 and 0.518, respectively).
The second row (labelled  X  X  Cumulative response time (global)  X  X ) compares the average cumulative response time for all the queries, confirming the similarity between both systems with p -values of 0.803 and 0.996.
Finally, in the third row (labelled  X  X  Response time (query servers)  X  X ) we compare the average response time for the seven query servers (without considering the broker time) in all queries, also confirming the similarity between the real and the simulated systems.

The following sections describe the results of several experiments developed using our proposed simulation model. The aim is to analyse the improvements obtained by different techniques in the distribution and rep-lication of a collection using a large number of query servers.
 4. Network experiments
This section examines the first research question: Does the use of a switched network reduce the network bottleneck? In this series of experiments, we analyse different network configurations and their effects on the system X  X  throughput. We concentrate on throughput rates because these experiments examine the network bottleneck, which is especially relevant in situations with high workload. First, we examine the differences in performance between a switched network and a shared access network (both operating at 100 Mbps), both for a distributed system and a replicated system. We then study the benefits of multicast messages in the sys-tem. Second, we look at the performance of a switched FastEthernet network with 1 Gbps connections to the brokers. The results presented in the first part of this section also appeared in the short article ( Cacheda, Carneiro, Plachouras, &amp; Ounis, 2005 ).

All the simulations are based on the 1TB SPIRIT collection model ( Jones et al., 2002 ). The simulation model is configured as described in Cacheda, Plachouras, et al. (2005) , in order to facilitate a direct compar-ison with the results obtained in this article. The queries have been generated using the skewed query model and following a worst-case scenario: each query will retrieve on average approximately 8.4 million documents (9% of the whole collection). Using the skewed query model, a set of 50 queries is generated to test the per-formance. For each different configuration, five different simulations (with distinct initial seeds) are run, and the average values for the execution times are calculated for each query.

In the first experiment, the collection of documents is distributed using local inverted files over N query servers, where N = 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 768 and 1024. Initially, the number of brokers for formance is measured considering a shared network and a switched network, both operating at 100 Mbps. The results are displayed in Fig. 3 .

The results obtained using a shared network are the same as those obtained in our previous work with an optimal performance using three brokers (two brokers will produce inactivity periods with more than 512 query servers and no benefit is obtained if four or more brokers are used).

As expected, using a switched network the performance of the distributed IR system has increased, inde-pendently of the number of brokers used. Although, from a global point of view, the behaviour of the analysed switched distributed IR systems is similar to that of the shared network systems, achieving an optimal perfor-mance with three (or more) brokers.

In Table 4 we detail the throughput obtained for a distributed IR system with the optimal number of bro-kers, using both a shared and a switched network. Although the switched network improves the performance in all cases, the more query servers are added to the system the more this improvement is reduced. This is due to the fact that in a distributed system with few query servers, the main bottleneck is the network and so, the switched network will reduce this restriction and improve the performance. On the other hand, when using a massive number of query servers, the brokers become the bottleneck. This is due to the number of local answer sets, which are received from all the query servers, and which must be merged. Therefore, the network is less significant in the final performance, although some improvement is still achieved.

Next we analyse the effects of a switched network on a replicated system. A replicated system is composed of one or more distributed IR systems. Each distributed system indexes the whole collection, and all the rep-licated distributed systems have the same number of query servers.

In our previous work we have found that a replicated system using a shared LAN with R replications achieves optimal performance with 2 R + 1 brokers ( Cacheda et al., 2004; Cacheda, Plachouras, et al., 2005 ). In a replicated system using a switched LAN the optimal number of brokers may not follow the previous linear expression. To study this, a set of replicated systems was simulated, changing the number of brokers used. A summary of the results is provided in Table 5 .

For a two-replica system, it was observed that with five brokers (the optimal value for a shared LAN), an optimal performance is not achieved, as in most cases the performance improves with six brokers, especially with 1024 query servers. Furthermore, increasing the number of brokers to seven did not lead to any signif-icant improvement in performance, as the query servers are continuously processing queries.
The case of the systems with three and four replications is quite similar. With 8 and 11 brokers, respectively, the throughput is surpassed by the systems with 9 and 12 brokers, especially with 1024 query servers (except for some cases, such as with 16 X 512 query servers for a system with three replications, and with 64, 128 and 512 query servers with four replications). There are no improvements by further increasing the number of brokers.

Generally, for the simulated configurations, the number of brokers necessary to operate a replicated system using a switched LAN, with R replicas, seems to be given by: 3 R . This introduces an increase in the number of brokers necessary, compared to a replicated system with a shared LAN. With a switched network the results sent from the query servers will reach the brokers in a shorter time, and so the brokers will have to cope with the partial results more frequently, increasing their saturation. Therefore, every new broker added (until the optimal number is reached) will reduce the overall load of the system and improve the performance.
Table 6 provides a summary of the comparison between the optimal replicated systems using a shared and a switched LAN. In a system with two replicas, the percentage of improvement decreases as the number of query servers increases (following the pattern described for the distributed system), except for the maximum number of query servers where this percentage augments, due to an important reduction in the performance of the shared network system.
The same pattern is repeated in the systems with three and four replications. The improvement of the switched network decreases as the number of query servers increases, but the bottleneck of the shared network (with more than 768 and 512 query servers, respectively) will enhance the improvement of the switched network.

This is motivated by the fact that the bottleneck in a replicated system using a shared LAN is the network ( Cacheda et al., 2004; Cacheda, Plachouras, et al., 2005 ), which becomes saturated as the number of query servers increases. The switched network avoids this saturation and leads to a considerable increase in perfor-mance, especially when the shared network becomes saturated.

In the following experiment we analyse the incorporation of multicast messages into a distributed IR system, and their effect on the system performance. According to the functional scheme for a distributed
IR system based on local inverted files, as previously described in Ribeiro-Neto and Barbosa (1998) , multicast messages are only significant when the brokers have to distribute the queries to the query servers. Until now, this process has been simulated considering the sending of unicast messages, which implies the sending of as many messages as destination query servers. By incorporating multicast messages, the brokers have the capa-city of sending a single message destined to multiple query servers.

In order to evaluate the effect on the global performance of the IR system, the multicast message sup-port was incorporated into a replicated system formed by one, two, three and four replicas, using the respective optimal number of brokers (i.e. 3 R ). The results are shown in Table 7 , indicating the percent-age increase in performance with respect to a system based on a switched network, but without multicast support.

In general terms, a very marginal increase was observed in the throughput (with even some specific values where performance is reduced). This is caused by the operating method of the switched LAN, which allows
Moreover, the distribution messages of the queries are quite small (typically, a few hundred bytes), and require a very short transmission time, representing a small percentage of the total execution time. All of this means that the benefit of using multicast messages is very small.

The only benefit obtained by using multicast messages is a significant reduction in the number of exchanged messages. In a distributed IR system with 1024 query servers and without using multicast messages, 102,400 messages are needed to respond to 50 queries (each query requires 1024 messages to be sent, and the answer will be received via a further 1024 messages). Using multicast messages the number of messages required is reduced to 51,250 (each query only requires one message to be distributed, and the answer is received via 1024 messages). However, we have shown that this reduction in the number of messages does not imply a reduction in the response times.
 Finally, the last experiment in this section aimed to analyse a more realistic environment in which the switched FastEthernet network uses switches with ports at 1 Gbps for connecting the brokers with the query servers.
As with the previous cases, the performance for a replicated system with one, two, three and four replicas was obtained using the newly proposed network model. The results are shown in Table 8 , indicating the per-centage increase in performance with respect to a system based on a FastEthernet network with switches only operating at 100 Mbps.

By using connections at 1 Gbps with the brokers, there is a slight improvement in the global performance of the system (although with some exceptions). Also, this improvement becomes more important, when more query servers are used in the system. Specifically, the greatest increase is produced in a system with four rep-licas and 1024 query servers, although it is still not a particularly significant improvement in performance (only 2.58%). It is also necessary to take into account the increased cost associated with this solution, which may reduce its convenience.

The main contribution of this series of experiments, is the improvement obtained by using a switched net-work as compared to a shared network, as expected, considerably reducing the bottleneck in the network itself that is particularly apparent in replicated systems. The other alternatives explored (multicast and connections at 1 Gbps with the brokers) lead to lesser increases, as the main saturation point in the IR system is the bro-kers rather than the network.
 5. Brokers X  bottleneck experiments
In this section we investigate two methods to reduce the processing load of the brokers, using the proposed simulation model and the 1TB SPIRIT collection model ( Jones et al., 2002 ). The brokers become a bottleneck in a distributed IR system, due to the number of partial results sets received from all the query servers that must be sorted.

On one hand, increasing the number of query servers will benefit the processing time in the query servers, the number of query servers increases. This results in increasing the processing time in the brokers and, if the number of query servers is high enough, the performance will start deteriorating, reducing the scalability of the distributed IR system ( Cacheda, Plachouras, et al., 2005 ).

In these experiments, the performance is measured using the throughput and the response time. The throughput is measured considering that the system is operating in batch mode and that there is a processing queue of 50 queries. The response time is measured assuming that the queries will arrive to the IR system
The throughput will measure the maximum query processing rate of the IR system and the response time will estimate the average time to answer a query. The response time measure is included because in batch mode the full time processing of the query servers will hide the performance improvements obtained in the brokers. 5.1. Partial results sets reduction
In this section, we analyse the second research question: Can a reduction in the partial results sent by the query servers reduce the brokers X  bottleneck without a significant effect on precision and recall? We first develop a theoretical analysis of the effects on precision and recall, of the reduction of the number of partial results recovered by each query server, and then we describe the obtained improvements in performance.
Following TREC practice, queries retrieve the top 1000 results (shown as tr do so, we assume a worst-case scenario in which each query server recovers tr combined in the broker to obtain the top results presented to the user. In this way it is guaranteed that inde-pendently from the distribution of the results amongst the query servers, the top 1000 results will always be retrieved, keeping the precision and recall values equal to those obtained in a centralised system.
A reduction in the number of partial results retrieved in the query servers implies a certain probability that bility for a generic distributed system comprised of h hosts or query servers, each of which will recover p partial results to obtain the t top results.

Based on the local inverted file strategy, we may assume that the top t results will be randomly distributed amongst the h query servers. Let us consider a simple example where we have two query servers, and the num-ber of top results is 4.

The binomial distribution makes it possible to calculate the probability that there are exactly x top results in the first host (and reciprocally, t x in the second host), using the following equation: where p = 0.5, as the top results are randomly and independently distributed between the two query servers.
Using the multinomial distribution it is possible to extend this result to any number, h , of query servers using the following equation: where p 1 = p 2 = = p h = h 1 and
Therefore, a distributed IR system with h query servers, each recovering p partial results, will obtain the t top results with a probability of
The main problem is that this equation makes it extremely difficult to calculate P ( x h and t , as it is necessary to calculate all of the possible augends x systems, a total of 1024 query servers are used and 1000 top results are retrieved, making this calculation impractical. This is why simulation techniques are going to be used to obtain an approximation of these probabilities.

For this purpose, we simulate a distributed IR system with h query servers and 1000 top results randomly and 1024. In each simulated distributed system, the query server with the highest x table of frequencies. This process was repeated 100 million times for each distributed system. Table 9 shows a summary of the probabilities and the maximum partial results for all the simulated distributed systems.
Due to the high computational cost of the theoretical formula, the obtained estimated probabilities have been compared to the theoretical probabilities only for a distributed IR system with two query servers. The
Mann X  X hitney and Kolmogorov X  X mirnov two sample tests confirm the accuracy of the estimated probabil-ities with a p -value of 0.965 and 1.0, respectively.

Using the values in Table 9 , we provide the maximum partial results to be retrieved in each distributed system. The idea is to obtain the probability of missing any top result, which is displayed in the column Prob . this probability would be approximately 10%, though if we recovered 589 partial results, we would miss a relevant document once every 100 million times. Similarly, in a distributed system with 1024 query servers, the probability that a final result is lost retrieving 13 partial results is also 10
From a global point of view, these results show that it is possible to use considerably lower values for the number of partial results recovered in the query servers, with an extremely low probability of having any effect on the precision and recall parameters.

Taking this into account, the second part of this study focuses on analysing improvements in performance that can be obtained by reducing the size of the partial results. To do so we simulated a set of distributed IR systems, with 2, 4, 8, 16, 32, 64, 128, 256, 512, 768 and 1024 query servers (with the optimal number of bro-kers) from which we want to obtain the 1000 top results for each query. We analysed the obtained perfor-mance when each query server recovers p partial results, with p taking the following values: 1000 (our baseline), 750, 600, 500, 350, 200, 125, 75, 50, 35, 25, 20 and 15. Tables 10 and 11 present the obtained throughput and response time, respectively.

For each distributed IR system, we measured the performance for those configurations where the proba-bility of missing any relevant result was lower than 10 8 servers retrieving less than 589 partial results (rounded up to 600), this probability will be lower than 10 Table 9 ).
 Regarding the throughput ( Table 10 ), there is nearly no improvement in the smaller distributed systems.
For example, when the partial results are reduced from 1000 to 75 in a system with 32 query servers, there is a throughput improvement of only 0.06%. Even in the distributed system with 1024 query servers, the obtained improvement in performance is not particularly significant (approximately 2% in retrieving 15 partial results per query server).

By operating in batch mode, the bottleneck of the system is the query servers, which process queries con-tinuously. The benefits of reducing the partial results are focused on the brokers, meaning that they have less impact on the global performance of the system.

However, the response time was measured in a more realistic environment (see Table 11 ), in which queries were received according to an exponential distribution, with an average of 500 ms.

In these results, it was expected that the response time decreases as the number of partial results decreases, but this does not hold for the smaller distributed IR systems (with 2 X 32 query servers). Indeed, the response times increase slightly in some cases when the number of partial results decreases (e.g. in a system with two query servers recovering 750 and 600 partial results or in a system with four query servers retrieving 500 or 350 partial results, the response time increases). We believe that this is due to the fact that in a distributed system with few query servers, these are the bottleneck, and the processing time of the brokers is only a minor fraction of the total response time. The reduction of the brokers X  processing time is negligible compared to the processing time in the query servers.

In the remaining cases, the systems behaved as expected, decreasing the response time as the partial results were reduced. In the case of the system with 1024 query servers, the response time is reduced by more than half when retrieving 75 or fewer partial results. Furthermore, only 9% of the total response time corresponds to processing in the brokers, reflecting an important reduction in their workload.

Another interesting point is that, in the system with 1024 query servers, the response time for the baseline is equivalent to a system with 16 query servers due to the brokers X  bottleneck. However, the best response time for all the systems and configurations is obtained when 15 partial results are retrieved in a system with 1024 query servers. This shows that the brokers X  bottleneck is significantly reduced.

This improvement in performance is due to two reasons. The first reason is a reduction in the number of partial results received by the brokers (1,024,000 with p = 1000 compared to 15,360 with p = 15, in a system with 1024 query servers), which reduces the calculation times in the brokers. Secondly, the size of the messages sent via the network from the query servers to the brokers is reduced from 8000 bytes per message with p = 1000, to 120 bytes with p = 15 in a system with 1024 query servers (using on average 8 bytes per document).

To summarise, for a distributed system formed by 1024 query servers and 1000 top results, it is possible to reduce the response times by approximately 53% by retrieving only 15 partial results per query server. In this case, the probability that precision or recall are affected is less than 10 domly in the query servers. In the smaller distributed IR systems no improvement is obtained by reducing the number of partial results. 5.2. Brokers distribution
In this section, we study the third research question: Can a hierarchical distribution of the brokers alleviate the brokers X  bottleneck? In the simulated distributed IR system, the index has been distributed across multiple hosts that carry out processing in parallel; however, part of this system continues to carry out centralised pro-cessing: the brokers. For this reason, in this section a simple distribution model for the brokers in the IR sys-tem is described, and the obtained performance benefits are analysed.

In this new distributed system, we will use the term final broker for the broker represented in Fig. 1 . The queries from users that will be distributed to the query servers. After a period of time, the final broker will receive a list of final results to present to the user.

The additional processing carried out by the brokers, involving the reception, organisation and acquisition define a hierarchical distribution model, as shown in Fig. 4 for a system consisting of 16 query servers.
Firstly, we define the parameter group size , which indicates the number of query servers handled by each hierarchic broker, forming a group which will be independently handled (in Fig. 4 , a group size of 4 has been established). Within each group, a hierarchic broker is randomly selected for the following level, indepen-dently for each group and for each query. This guarantees the distribution of the load amongst all of the query servers for multiple queries.

This selection is made without any exchange of information between the query servers, by generating a ran-dom identifier from the query received and the group identifier. This process is repeated at each level to obtain the corresponding hierarchic brokers. In this way, the number of hierarchic levels is determined by log
Number of query servers (in the example of Fig. 4 , the number of levels is given by log
The hierarchic brokers firstly operate as query servers, processing the query in a normal manner, then wait-ing for the partial results from all other members of their group. These results will be sorted and the t top results will be sent to the next hierarchical level. Once the top level of the hierarchy has been reached, the t top results will be directly sent to the final broker for presentation to the user.

Based on this hierarchic model, we carried out a series of experiments using a distributed IR system formed by 1024 query servers, each recovering 1000 partial results for each query. The brokers were distributed over the group of query servers, analysing the performance for various group size values, as shown in Table 12 . The number of final brokers remains constant with regard to the optimal value calculated in Section 4 , although it does not affect the performance of the system. The baseline is constituted by an equivalent distributed system with the optimal number of centralised brokers. The Levels column represents the number of levels used in each hierarchical model and, if present, the number in brackets represents the theoretical number of levels ( log groupsize Number of query servers ).

With regard to the throughput, a slight improvement is observed, less than 3% in all cases. As in the pre-vious section, this is due to the fact that operation in batch mode involves continuous processing in the query servers, and minimises the improvement in the global performance of the system. It is also interesting to con-sider the decline produced when a group size of two query servers is defined, as this distribution requires 10 levels of hierarchic brokers, which introduces too many wait stages and slows down the operation of the system.

As in the previous section, in order to measure the response time, queries were generated according to an exponential distribution, at an average of 500 ms. In this case a reduction in response times of more than 50% is observed, except when considering groups of two query servers, derived from the problem previously described.

A more detailed analysis reveals that the best response time is obtained with a group size of 32 query serv-ers. This is not a random value, as it corresponds to a two-level balanced hierarchy: a first level with 32 hier-archic brokers and a final level with a single broker. In this case, more than 85% of the total response time corresponds just to the query servers processing the query (without taking into account the processing of the hierarchic brokers). As in the previous case, this reveals the significant reduction in the load on the brokers.

Analysing the results for group sizes of 4, 8 and 12 query servers, corresponding to 5, 4 and 3 hierarchical levels, respectively, it becomes clear how a reduction in the number of levels implies an improvement in per-formance. Similarly, in the case of a hierarchy at two levels, the use of group sizes that do not result in bal-anced trees produces slight increases in response times (i.e. group sizes 40 and 48).

In summary, the experiments described above show that it is possible to reduce the response time obtained by using a simple hierarchical distribution model for the brokers. Specifically, with the optimal hierarchical structure (a two-level balanced tree), the response time is reduced by more than 56%. 6. Conclusions
In this work, we have presented several improvements over the two main bottlenecks of a distributed IR system: the network and the brokers. We have extended the simulation network model in order to represent a switched network, due to the limitations of the simulated shared access network in our previous work. The new simulation model is validated using a real distributed IR system and comparing the response times obtained from both systems, confirming the accuracy of the estimated times.

Based on this new simulation model, the use of a switched network for a distributed system offers improved performance in all cases. This improvement in performance is more important in replicated systems, as in these cases the bottleneck is formed by the interconnection network. The switched network will prevent the satura-tion of the network, considerably increasing performance, particularly when compared with a shared network saturated with a large number of query servers.

Other alternatives, such as multicast messages or using a 1 Gbps connection between the broker and the query servers, aiming to improve the network performance, lead to marginal improvements. The main reason is the fact that the brokers replaced the network as the main bottleneck for replicated systems.
With the aim of reducing the load on the brokers, two independent solutions are presented: the reduction of improves the performance for the larger distributed systems, although no improvements are obtained in the smaller distributed IR systems. For example, in a distributed system with 1024 query servers, the response time is reduced by up to 53%, when the number of partial results is reduced from 1000 to 15. This reduction of the partial results implies a certain probability of reducing the precision and recall values. However, we have dem-onstrated that these probabilities will take extremely small values (less than 10
A simple hierarchical distribution model of the brokers is also presented, using all the query servers. In this case, with a suitable hierarchical structure (in the experiments carried out, with two hierarchical levels and a balanced tree), response times for a distributed system are reduced by more than 56%.

Another benefit of these two mechanisms is that they operate independently. Therefore, in future studies, we intend to combine these two solutions in an effort to increase the improvements in performance obtained via the brokers.
Although the obtained timings depend on the specific simulated system, i.e. Terrier, the proposed simula-tion model is generic in the sense that the conclusions of this work can be used to build large-scale search engines, independently of the used collection and the specifics of the used system.
 Acknowledgements The work of the first and second authors has been partially supported by the Comisio  X  n Interministerial de Ciencia y Tecnolog X   X  a (CICYT) of the Spanish government, under project TSI2005-07730.
 The work of the third and fourth authors is funded by a UK Engineering and Physical Sciences Research Council (EPSRC) project grant, number GR/R90543/01. The project funds the development of the Terrier Information Retrieval framework (url: http://ir.dcs.gla.ac.uk/terrier ).

We would also like to thank Mark Sanderson and Hideo Joho for giving us access to the 1TB dataset used for the SPIRIT Project and Professor Ricardo Cao from the University of A Corun  X  a for his valuable com-ments on the theoretical analysis of the partial results sets reduction.
 References
