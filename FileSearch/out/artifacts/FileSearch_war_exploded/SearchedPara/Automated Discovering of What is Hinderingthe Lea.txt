 In the usual academic education student s are viewed as passive recipients of in-formation. The new information age demands an educational concept developing students X  abilities to deal with problems that are not obvious today. University graduates are expected to posses solid knowledge of methods and competency in analysis and synthesis as well as the p rofessional competen cies needed to op-erate and manage a modern enterprise. All these requirements show a need for the development of new way of content delivery and assessment [5]. Methods of group instruction that are as effective as one-to-one tutoring are presented in [6]. Some applications of artificial intelligence in education are discussed in [4], [7], and [14].

In this paper we propose a system framework assisting each student at several levels of the knowledge acquisition process and efficiently transmits knowledge and skills.

Our idea is to develop a system that focuses on the students X  learning process by modeling an automated system preventing students from becoming over-whelmed with information, preventing students from losing track of where they are going, and permitting them to make the most of the facilities the system offers. The instruction is directed at what still needs to be mastered. A student is encouraged to work on a concept until it is well understood. A student experi-encing a misconception is advised on t hat, while others who have mastered the concept proceed with the next topic.

The system contains also an interactive theoretical part (lecture notes); prob-lems to be solved at home; tests assessing recall of facts, the ability to map the relationship between two items into a different context, and conceptual think-ing, asking students to evaluate consequences and draw conclusions; and various quizzes.

The paper is organized as follows. Rel ated work is discussed in Section 2. learning orientations are considered in Section 3. Student navigation while solv-ing problems is discussed in Section 4, and the system architecture is described in Section 5. The paper ends with a conclusion in Section 6. A Web-based tutoring tool with mining facilities to improve learning and teach-ing is described in [21]. An intelligent system for assisting a user in solving a problem was developed in [18]. An system using assessing Bayesian nets for as-sizing students X  knowledge is proposed in [20]. In addition to that the system in [9] assists the student to navigate the unknown concepts.

An ITS teaching students how to solve p roblem is presented in [11]. A person-alized intelligent computer assisted training system is presented in [22]. A model for detecting student misuse of help in intelligent tutoring systems is presented in [3].

An investigation of whether a cognitive tutor can be made more effective by extending it to help students acquire help-seeking skills can be found in [16] where the authors also found that 72% of all student actions represented unproductive help-seeking behavior.

A proliferation of hint abuse (e.g., using hints to find answers rather than trying to understand) was found in [1] and [16]. However, evidence that when used appropriately, on-demand help can have a positive impact on learning was found in [24], [25], and [27]. All these topics are both important and interesting. We focus on a different aspect of use of intelligent tutoring systems which is an attempt to first detect lack of prior kno wledge of each student and then fill in the gaps.

A tutoring system called Smithtown [26] was designed to enhance an induc-tive inquiry skills in economics. CaseBook [10] is a Web environment enabling problem-based learning to be used by diff erent educators in diff erent classrooms. While problem-based learning improves long-term retention it tends to reduce initial levels of learning [13]. While learning styles describe the influence of cognitive factors, learning ori-entations describe the influence of emotions and intentions. According to their learning orientations [19] students are divided in four groups -transforming learners, performing learners, comfor ming learners and resistant learners. Contents (lecture notes, e xamples, assessments, etc.) are saved in a predeter-mined directory structure on the server and are presented to students as Web documents and Web forms.

A subject name is followed by two hypermedia containers: information and topics.

Information contains  X  a description of the subject X  X  content, literature, evaluati on methods, etc.,  X  messages about all current changes and links to compulsory assignments,  X  a short summary of theory and examples from previous subjects helping
Topics contain  X  theory and examples presented in traditional face-to-face teaching. For stu- X  problems to be solved in tutorial hours and as home work  X  illustrations: Java applets, interactive examples, and animations.
Problems in the theory part and for home work in the current version are followed by four buttons (Fig. 1).

Intelligent agents in the theoretical part present different students with differ-ent pages according to their abilities. Intelligent agents in the problem solving part give additional explanations and examples that help to clear up current difficulties and misconceptions. 4.1 Guiding a Student While Solving Problems Student navigation in an automated tutoring system should prevent students from becoming overwhelmed with information and losing track of where they are going, while permitting them to make the most of the facilities the system offers.
In this system a new topic is recommended t o a student (Fig. 2) after assessing his/her knowledge:  X  The system first suggests a test for the student. Based on his/her answer  X  The system gives information about the amount of theory and problems to  X  The system gives information about 4.2 Subject X  X  Navigation A student will navigate from a root node (start page) to a leave node (specific topic). Only one entry point is provided, which reduces navigational confusion and increases student satisfaction. The navigational structure of the system al-lows the insertion and/or removal of elements at any time by the course builder. 4.3 Online Tests HTML Web forms are compiled by a server-side script on-the-fly by randomly choosing ten questions from a set of twelve files with ten questions each (in the current version). Questions with the same sequence number in different files are similar in content and level of difficulty. Rash Model [2] requirements have been applied while establishing similarity among questions.

In a preliminary work Rash Model and judgemental approach were compared as two different item selection methods. N o significant difference was observed between Rash Model and judgemental approach in terms of their reliability. A significant difference was observed w hile using Rash Model and judgemental approach in favor of Rash Model in terms of tests content validity. The framework is composed of three main components: base system, runtime support, and agents. Base System : Apache is used as a Web server with a Pyt hon interpreter ex tention using a mod  X  python module. PostgreSQL is used as a relational database that supports Structured Query Language (SQL).

Python is an object-oriented scripting language. Having a Python interpreter module in the Web server increases performance and reduces response time sig-nificantly. A standard Apache implementation with Common Gateway Interface (CGI) scripts can also be used. However, this will lead to a performance penalty in that the Web server needs to start a new external Python interpreter each time a CGI script is called.

A relational database management system (DBMS) is used to store tests and students X  data. PostgreSQL provides us with database support for flexible im-plementation. All data is stored in a relational database and can be queried programmatically by Python scripts using SQL. Other relational databases such as MySQL and Oracle can be used instead . We have developed contents of learn-ing materials on a Linux workstation.
 Runtime support : Dynamic HTML pages are created by server-side scripts written in Python. Python programs are also used for database integration, diagnostics, and com-munication modules. 5.1 Agents The system is supported by student profile, test, and diagnostic agents which we will discuss further in this paper.
 Diagnostic Agent. The system structure is defined by pedagogical require-ments. This structure defines dependencies among learning materials, levels and relationships between tests options, and inference rules used in a diagnostic agent . This structure is crucial in providing each student with a personalized learning work-flow for efficient learning. The system provides different students with dif-ferent pages according to their needs. The responses from each student to the suggestions from the system provide the diagnostic agent with necessary data. The diagnostic agent analyzes these data using the p rogrammed inference rules and provides the student with an imme diate recommendation on how to proceed. The student status is saved in the database.
 Student Profile Agent. In the recommendation on how to proceed, a student can choose to subscribe to one or more suggested learning materials. The stu-dent X  X  learning material subscriptions are placed in a stack-like structure in the student profile data. The student profile agent presents the student with the top most learning material in the profile stack for each new learning session.
Initially, the profile stack contains a sequential ordering of learning materials in a given subject. A student can choose t o skip any presented learning mate-rial and go to the next one at any time. A student is considered to have completed a course when his/her profile stack is empty and he/she has passed all compulsory tests assigned to the course.

All learning material names taken by the student during the course and scores of the tests are saved in the student audit-trail. Such audit-trail data is used for billing purposes while global analysis of the course and feedback data is used to improve learning materials for each subject.

The server-side script (SSS) contains student and teacher modules. The stu-dent module contains, among other things, student registration, student admin-istration, student authentication, and authorization. The teacher module pro-vides an interface for a teacher to define topics and subjects, students X  status reports/diagnostic, and messaging.

SSS modules and agents communicate with each other by a request-respond mechanism in which remote procedure calls are done among different mod-ules/agents providing students with a dynamic and personalized learning en-vironment.
 Test Agent. A pedagogically crafted scheme with a set of questions and answers provides a test agent with a programmed intelligence, in which wrong answers to a drill lead learners to appropriate hints and examples. The students can then subscribe to those learning materials suggested by the hints or try the drill again and continue with the current course. Students can jump back to the current course trail at any time while following trails suggested by the test agent . The agent calculates scores, shows result status, and keeps track of assessments taken by each student. After each assessment the test agent sends summarized information to the diagnostic agent . 5.2 Sharing Protected Web Resources Most information and communication technology (ICT) based learning systems require user authentication and authorization data to reside locally in their user database. Therefore, organizations using such a system have to export their users X  data to the system. This will involve a complicated data synchronization mechanism.

Our model does not involve the export of user authentication and authoriza-tion data across cooperating organizations, which simplifies user management as there is no duplication of data and synchronization problems associated with it. Another important advantage of this mo del is security enhancement since user authentication and authorization data never leaves its home organization.
Let us denote a domain server, which provides Web resources, by RPDS, and another domain server, which provides user authentication/authorization, by UDAS (Fig. 4). In a collaborative user/resource framework, a RPDS pro-vides a Web portal entry point for all resources and applications offered to Web clients. An UDAS maintains a domain users and groups database and provides a Web-based logon application for domain users and web services for users authen-tication and authorizati on, based on Simple Object Access Protocol (SOAP).
A RPDS will assign a Web browser with a unique portal session identifier (PSID) the first time an unauthenticat ed user is trying to access a protected Web resource controlled by the RPDS. This generated PSID is saved in the Web browser X  X  cookie by the RPDS X  X  authentication application. The user is then asked to provide her home domain name for authentication. The PSID, Web browser X  X  IP address (BIP), and the home domain name are saved in a session database in the RPDS. The PSID is associated with BIP for the session by the RPDS and is not yet associated with a valid user.
 The RPDS will then redirect the user X  X  browser to her home domain X  X  UDAS. The PSID and RPDS X  X  URI are sent as  X  X et X -parameters in the redirection. A logon Web-form is then displayed on the user X  X  Web browser by the UDAS. The user is authenticated if she provides a valid user-identifier (ID) and a valid password. The UDAS will then create a unique authentication session identifier (ASID) associated with the { PSID, BIP, ID } -triplet. The { PSID, BIP, ID } -triplet and the { ASID, timestamp } -pair are saved in the session database at UDAS. The PSID is then associated with an authenticated ID for the session by the UDAS.

The UDAS redirects the user X  X  browser back to RPDS. The ASID is sent as a  X  X et X -parameter in the r edirection. Using the given ASID as a parameter, the RPDS makes a call to an authentication service at the user home domain SOAP server (UDWS). If the ASID is still valid, the ID associated with the ASID is re-turned. The PSID is then associated with an authenticated user ID at the RPDS.
An ASID is a short-term one-time (i.e. having a limited period of validity and can be used only once) session identifier and is used between a RPDS and an UDAS for session control. At any time, the RPDS can obtain a new ASID by calling the UDWS and using a valid PSID and a BIP as parameters. The newly obtained ASID can be used to check user X  X  authorization from UDAS group data or transfer the session to another RPDS, for example.

Using a short-term ASID and a long-term PSID, a simple security mechanism for a user X  X  session can be maintained between RPDSs and UDASs. PSID is bound to BIP at the RPDS domain side and to the ID after a valid user X  X  logon at the UDAS domain side. The two initial URI-redirections (logon redirect and response redirect) are done over HTTPS. By using a peer-to-peer remote procedure call over a SOAP, an ASID is used to map the validity of an ID for user authentication and authorization.
 A user never discloses her user-ident ifier and password in a foreign domain. Both HTTPS and SOAP have to be compromised in order for a rouge user or application to gain illegal access to resources. The risk for illegal access is minimized by using two calls, first to obtain the short-term one-time ASID as-sociated with { PSID, BIP } , and second to obtain the user authentication and authorization associated with the ASID.
 Remark 1. A user can have several user accounts from different domains. This can introduce a collusion of rights in the framework. Suppose a person possesses two user accounts from two different domains. She is a student in one domain and a teaching staff member in another domain. A simple role policy was set to permit access to a resource where the user in the student role can only submit and read her own documents while the user in the teacher role can read all submitted documents. One method to solve such a problem is to assign a globally unique key (personal number) to each person. The key must be unique in all collaborating domains. A central key management is n eeded and may not be practical. Another method is to make a more detail role po licy and access audit trail to expose a collusion of rights problems.

A domain maintains its own users. The framework supports one level of  X  X hain of trust X  only. A RPDS refers only to the user X  X  home domain. An UDAS does not refer to other domains for a user authentication and authorization. The framework security mechanism can go into a loop if a multi-level chain of trust is allowed. The presented system framework is a response to the the increased demand for the necessity of developing effectiv e learning tools that can be smoothly integrated in the educational process. The potential of Web-enhanced learning to improve undergraduate engineering students X  achievements is explored.
The system uses each student X  X  diagnostic reports on miscalculations, mis-conceptions, and lack of knowledge and offers advice in the form of additional reading, hints and tests and recommends an interaction with the human tutor when needed.

We are currently working on optimizing the amount of time a student should use working with the system and the amount of knowledge obtained. An inter-esting question to work on is how effective hints are in preventing students from misusing the help functions in the system.

