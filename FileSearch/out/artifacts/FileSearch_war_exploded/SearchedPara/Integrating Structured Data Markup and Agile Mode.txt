 Structured Data Markup [1] is becoming a prominent search engine optimisation (SEO ) technique enabled by Semantic Web technologies grafted on traditional Web development practices . Its origins may be traced back to data gleaning from XML documents [2] and, later, to microformat profiles [3] for embedding easily discover a-ble data structures in HTML documents. More r ecently , the lessons learned from microformats have le d to the centralisation of promi nent description vocabularies under the Schema.org umbrella terminology [4] maintained by search engine provi d-ers such as Google and Microsoft. From a conceptual perspective, Schema.org is an ontology providing controlled terms (concepts/types and properties) that can be used to describe often searched types of resources : organi sations, persons, events, recipes etc . This terminology complements previously introduced syntaxes for extending the source code of HTML pages with arbitrary resource descriptions  X  several syntactical formats are currently available: microdata [ 5] introduced by the HTML 5 specific a-tion, JSON -LD [ 6] and RDFa [ 7] as part of the Resource Description Framework (RDF) specification [ 8], aiming for more general use (i.e., knowledge representation and data linking across t he Web) but equally applicable to the SEO use case.

In parallel developments that have been rarely converging with the Semantic Web paradigm, technologies and practices addressing semantic information systems have also emerged from the Conc eptual Modelling paradigm  X  originating in data mode l-ling [ 9], then evolving in complexity towards system modelling, business process modelling and multi -view enterprise modelling [ 10]. Although conceptual modelling is commonly perceived as being based on de facto or de jure standards (e.g., UML [11], BPMN [12 ], Petri Nets [ 13], ER [ 9]), the literature on modelling pragmatics [14] has raised awareness on the need for domain specificity or situational customisation of modelling methods, languages or tools. Methodologies an d fast prototyping ena-blers have emerged to allow method engineers to deploy modelling methods that are targeted for narrow domains or limited use cases [15][16]. Such modelling methods rely on metamodels that meaningfully integrate concepts and machine-readable s e-mantics in graphical terminologies which are comparable, to some extent, to ontologi-cal terminologies and, consequently, to Structured Data Markup vocabularies such as Schema.org. This intuitive observation inspired the work at hand, as it aims to sho w-case a streamlining proposal where conceptual descriptions made available in HTML (through semantic markup) are transferred towards a modelling language that has been tailored with the help of the Agile Modelling Method Engineering methodology [15]. T he Resource Description Framework [8] is employed as a bridging medium.
Therefore, the problem statement can be outlined as follows: assuming that an or-ganisation publishes machine -readable co nceptual descriptions in their W eb pages (either for SEO purpose s or for arbitrary client agents), how to make those semantics also available to a diagrammatic modelling environment (commonly employed for analysis and decision support) ? 
The remainder of the paper is organi sed as follows: Section 2 will discuss the tec h-nological and methodological enablers for the work at hand  X  specifically, it will pr o-vide background on Structured Data Mar kup and the typical workflow for processing it, followed bz details on the Agile Modelling Method Engineering framework and how it is employed by this proposal. Section 3 will detail the contribution in the form of a running example including details on de sign decisions and a particular instanti a-tion of the previously introduced workflow. Section 4 will comment on related works to position the contribution and will also provide several complementary references with additional details and other related use c ases . The paper ends with conclusions structured in the form of a SWOT analysis . 2.1 The Structured Data Markup processing workflow Structured Data Markup is the result of a convergence between traditional SEO pra c-tices and the Semantic Web vision [ 17]. Traditional SEO aim ed at making the co n-tents of HTML documents "attractive" to search engines in order to get improved ministrative, marketing or content -level measures  X  the latter aiming to enable search engines to assess the relevance of content relative to keyword searches. This has often been based on syntactic manipulation, guided by well -established practices of how to use and position key words in HTML markup. 
Structured Data Markup adopts lessons learned from the Semantic Web technolo g-ical space, allowing Web developers to embed machine-readable semantics (i.e., r e-source descriptions governed by some ontology) directly in the H TML source. This is expected to bring drastic changes to SEO practices, as the syntactical optimisation practices are replaced with precise ways of describing content meaning through ma-chine -readable knowledge structures . The Structured Data Markup may be "distilled" into RDF graphs  X  a data model that is amenable to knowledge representation, data linking and reasoning. Arbitrary client agents (search engines , but also any other cl i-ent agents ) can replace traditional string -based scraping with powerful sema ntic qu e-ries or reasoning over the distilled knowledge graphs . 
A centralised, extensible ontology was setup for this purpose at Schema.org [ 4], incorporating concepts and properties that were previously available in scattered and narrow-scope d microformat profiles or RDF vocabularies (e.g., hCard [ 18], FOAF [19] for describing persons and their contact info rmation , GoodRelations [20] for annotations in an e -commerce context). The techniques for embedding machine-readable resource descriptions in HTML are cu rrently available in three alternatives  X  microdata [5] ( originating in the microformats/HTML community and employed in this paper's running example ), RDFa [ 7] and JSON -LD [ 6] (both coming from the RDF standard ). 
Fig. 1 shows a minimal example of Structured Data Markup and the typical knowledge flow from a public HTML document to a client agen t (not limited to search engine crawlers ). On the client sid e, the document's information is formatted by a browser for a human visitor ( mid -left side); the same document can be distilled into the knowledge graph at the bottom , which is a machine-readable data structur e amenable to semantic queries.
 The example in the figure employs the existing standards provided by the Resource Description Framework  X  i.e., Turtle as a graph serialisation syntax [ 21] and SPARQL as a graph query language [ 22].The meta layer of the graph uses concepts (s:Person, s:GenderType) and properties (s:name, s:children, s:knows) from the above mentioned Schema.org ontology.
 The example also indicates that three categories of information can be embedded in the HTML source:  X  statements that are human -readable but not machine -readable (i.e., the last stat e-ment written in natural language);  X  statements that are only machine -readable but not human-readable in the browser (i.e., the genders of the children and the fact that JimS knows MaryJ  X  an entity that is not described in this document, but could be on a different website);  X  statements that are both machine -readable and human -readable (the fact that Jim Smi th is the father of Jane and John smith).
 The conversion from the HTML+Structured Data Markup to the "pure" knowledge quired for the work at hand is to deserialise the kno wledge graph in a modelling envi-ronment  X  this step is performed by a metamodelling plug -in governed by an RDF vocabulary and patterns to be discussed in relation to a running example in Section 3.
The work at hand repurposes this workflow by replacing the "semantics -aware cl i-ent agent" depicted in the figure with a diagrammatic modelling tool that captures the distilled knowledge graphs in structured diagrammatic representations that are am e-nable to conceptual modelling use cases. For this purpose, the next section will pr o-vide details on the key methodological enabler of this contribution  X  the Agile Mode l-ling Metho d Engineering (AMME) framework. 2.2 Agile Modelling Method Engineering Agile Modelling Method Engineering [ 15] is a framework and methodology for the conceptualisation of modelling methods and their deployment as modelling tools tailored for domain -specific use cases (or for modelling requirements emerging within approach of modelling through stable (often standard ) languages. As the name sug-gests, AMME transfers agile development principles to the practice of modelling method engineering  X  i.e., an iterative and incremental development cycle is ap plied , based on fast prototyping environments such as ADOxx [ 24] and a metamodelling approach that tracks and customises the building blocks of a "modelling method", as defined by [ 25].  X  the modelling language , which includes semantics (modelling concepts a nd their machine-readable properties), notation (graphical symbols for each concept) and abstract syntax (well -formedness rules for connecting the graphical symbols  X  e.g., relation domains, ranges, cardinalities); for the purposes of the work at hand the modelling language must be tailored for the semantics made available through 
Structured Data Markup;  X  the mechanisms/algorithms , which include model -based functionality for model evaluation, transformation or visualisation; for the purposes of the work at hand, this includes a graph import plug -in that generates diagrammatic representations by coupling the language notation with the knowledge graph semantics;  X  the modelling procedure, which prescribes the modelling steps to guide the end-user, particularly important for complex modelling languages that provide multiple types of models requiring a certain precedence in creating and managing them; this is of little relevance for the runni ng example to be discussed in this paper, since it will showcase a simplified example language  X  however, as the work is applied in a project -based context , more realistic cases may increase the relevance of this building block in the future . We have emplo yed the AMME framework in the context of the Open Models Labor a-tory (OMiLAB) [ 26] [27 ], a collaborative environment that shares infrastructure and various enablers within a research community interested in the engineering and appli-cation of modelling methods. A multitude of modelling methods developed in the OMiLAB context have been described in [ 28], some of them developed through the AMME methodology . Fig. 2 suggests the incremental nature of the AMME concept u-alisation cycle, by presenting two evolutionary stages of a "Cooking Recipe Mode l-ling Language" (to be further used as a basis for the running example) :  X  in the first stage, the language allows only simple sequenci ng of cooking steps, assuming that no branching of the cooking "workflow" should be captured; besides the CookingStep concept, only the Start and Stop elements are distinguished;  X  the second version incorporates changes in several facets of the language:  X  in semantics : a new CookingDecision concept allows branching; a Condition a t- X  in notation  X  i.e., the richer semantics reflect on notational level: the condition is  X  in syntax : the connecting arrows may also connect CookingDecisions, with mul-For this paper's contribution, this is an essential methodological enabler that allows to tailor the modelling language for the semantics acquired from semantic markup . The transfer of Structured Data Markup to the modelling environment is governed by a layered schema whose types (classes and properties) must be aligned to those i n-propert y URIs in itemprop) and are isolated on the right side in Fig. 4 : On one hand, the se are the language -specific (prefixed by lang: ) concepts, relations, model types and editable attributes that have been customised in the modelling la n-guage according to the semantics to be assimilated from markup . Depending on the direction of the schema flow, we may envision three scenarios: (i) the modelling la n-guage was already deployed and should not be changed  X  in this case the markup may adopt the language terminology; (ii) the markup schema was already deployed and should not be changed  X  in this case AMME is required to tailor the language for existing markup (e.g., to align to Schema.org terms); (iii) both markup and language are fixed  X  the transfer can be mediated by alignment ontologies (investigated in [ 29]) or, if only a direct terminolog y mapping is needed , microdata markup natively allows the same piece of content to be annotated with multiple properties and types. How ev-er, we emphasise scenario (ii) as a strong case for employing AMME as an alternative to the traditional practice of modelling with fixed (often standardised ) languages. The import plug-in is synchronised with the language customisations performed through AMME, as it takes input from the language definition of the metamodelling platform used for modelling tool implementation (ADOxx [ 24]). 
An additional layer of fixed upper classes and generic properties (prefixed by cv: ) have been assigned to a variety of structural diagrammatic constituents (connectors, nodes, visual containments, cross -model hyperlinks, simple value attributes, complex value attributes etc.). These are aligned with the metamodelling platform employ ed for implementation (ADOxx ) and may be easily transferred to other such platforms. Implementations may be guided by the inventory of generalised structural patterns published in [ 30], which is based on an analysis of an extensive corpus of modelling languages hosted by the Open Models Laborator y [ 26]  X  the already mentioned col-laborative environment hosting implementations of both standard and domain-specific modelling methods . The HTML source in Fig. 3 shows two types assigned to most content element s  X  one from the tailored modelling language (lang:) , the other from the upper layer of stru c-tural types (cv:) . This may be avoided i f a reasoning engine is also available between the distilling step and the final import step  X  i.e., an RDF schema reasoner would derive the upper types from the language -specific types due to subclass declarations (right -side of Fig. 4 ) which are fixed in the import mechanism and will not be derived from markup . 
Additional user interference, based on ontologies or rules, may be applied by a d-justing the distilled graph in a dedicated library or a graph database management sy s-tem such as GraphDB [ 31]. Examples of use cases for this are (i) exten ding model elements with additional property values not present in the markup data (but pr e-scribed by the mo delling language); (ii) exten ding the model with additional elements no present in the markup data (e.g., the Start or Stop elements are perhaps irrelevant in the markup since they don't have to be presented in the browser); (iii) overcoming certain limita tions of the current implementation, to be detailed under "Weaknesses" in the concluding section; (iv) any other mediation that may be necessary to align to the import schema (e.g., terminological mappings if either the markup or the mode l-ling language sho uld not be adapted). Conceptual redundancy often manifests between the data models driving run-time information systems and the conceptualisations governing design -time tools (e.g., modelling tools). The bridging of the se two facets tradition ally takes the form of model -driven code generation under the "modelling is programming" paradigm (see [32]) or the form of process -aware information systems [ 33] taking semantic input from some process representation. The proposal of this paper reverses t he typical "flow of semantics" by enabling the retrieval of machine-readable semantics from a run -time system (i.e., Web page) to a modelling environment in which a modelling language and model -based mechanisms (e.g., model queries, simulation) may be tai-lored to accommodate the imported knowledge graphs . The reverse flow of RDF graphs, from modelling tools to Linked Data -driven applications was previously di s-cussed in other works ([34][3 5][3 6]), where additional technical details may be co n-sulted with respect to the RDF vocabulary governing the serialisation of models . Complementing th ose work s, this paper completes a two -way interoperability channel for modelling environments, a feature traditionally limited to syntactic, XML -based interoperability (e. g., XPDL [3 7] for process models).

The work may also be positioned as a knowledge conversion step, as abstractly d e-fined in the discipline of knowledge management [ 38]. In this context, the work co n-tributes to bridging machine -oriented and human-oriented ( diagrammatic) knowledge representations, thus complementing efforts such as knowledge extraction from HTML content [ 39] or potentially supporting knowledge transfer systems [ 40] [41]. 
The interplay of Semantic Web and Conceptual Modelling has been tradition ally focused on the consistency of modelling languages, i.e., ontological commitment [ 42]. Our work pursues a descriptive purpose rather than a prescriptive one, by taking input from resource descriptions that are spreading across the Web to feed agile mod elling tools with contents that may be accumulated in a diagrammatic knowledge base . The paper advocates the integration of two streams of research dealing with semantic representations  X  the Semantic Web/SEO on one hand and Conceptual Modelling on the other hand. The proposal is supported by a description of technological and met h-odological enablers -RDF for interoperability and AMME k for tailoring a modelling language to semantic requirements. The streamlining pro posal presented in the paper is being investigated in the EnterKnow [ 43] project on more realistic use cases than the expository toy modelling language presented here  X  however, we chose to reduce the presentation to an easy -to -grasp outline as practical a pplicability in more a d-vanced use cases is under on -going investigation. In the following, we structure the conclusions in the form of a SWOT analysis (highlighting future work under the Weaknesses and Opportunities items) : Strengths: Since machine-readabl e semantics are in the focus of both the Semantic Web vision and the Conceptual Modelling paradigm, the work at hand contributes with a proposal for streamlining graph-based representations between Structured Data Markup and modelling tools customised to provide diagrammatic views on the same data (opening possibilities for further model -based functionality, e.g., simulation) . 
Weaknesses: The current implementation is not fully optimised , as it requires in-termediate rule -based processing (e.g., INSERT/CONST RUCT queries) to prepare the distilled graph before the import in the following sense : (a) To add properties that are relevant for graphical layout (e.g., a "position" property expected by ADOxx for each node on the modelling canvas ); such information cannot be expected to be avai l-able in the general case for Structured Data Markup ; and (b) To conveniently group parts of the distilled graph into named graphs (as required by the separation between diagram contents and diagram metadata in Fig. 4 ); named graphs are not supported by the current specification for microdata and conventions are therefore necessary (e.g., one graph per page , or a dedicated HTML CLASS for th e model metadata). This lim i-tation will be removed when adapting the mechanism for JSON -LD (which supports named graphs in the same document ). Opportunities: The proposal is expected to inspire opportunities of streamlining Web semantic s representations with other semantics -driven systems, thus providing a Smart Data perspective to a field which has been dominated by Big Data and text mining research. Schema.org is frequently enriched as it is expected to be a key driver for the Semantic Web  X  it has recently included the concepts /properties CookAction, Recipe, recipeIngredient, recipeInstructions which may be adopted or mapped to the modelling language terminology hereby presented. More enterprise -oriented use cases may benefit from business -oriented conc epts for describing workflows, human r e-sources, various types of tangible and intangible assets.

Threats: The usefulness of the proposed solution is heavily dependent on the up-take of the Structured Data Markup practice which is still in a n early stage of adop-tion, although its endorsement from W3C and the centralisation of vocabularies under the Schema.org terminology are encouraging. From a modelling perspective, the pr o-posal also depends on the adoption of agility principles in modelling languages (which are typically pursuing the ambition of stability and standardisation rather than being agilely tailored for specific semantic systems ). Acknowledgment: The work of Dr. Robert Buchmann and Dr. Ana -Maria Ghiran is supported by the Romanian National Research Authority through UEFISCDI, under grant agreement PN -III -P2 -2.1 -PED -2016 -1140.
