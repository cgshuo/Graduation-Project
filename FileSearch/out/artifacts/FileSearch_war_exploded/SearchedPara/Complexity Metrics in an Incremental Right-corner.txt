 Since the introduction of a parser-based calcula-tion for surprisal by Hale (2001), statistical tech-niques have been become common as models of reading difficulty and linguistic complexity. Sur-prisal has received a lot of attention in recent lit-erature due to nice mathematical properties (Levy, 2008) and predictive ability on eye-tracking move-ments (Demberg and Keller, 2008; Boston et al., 2008a). Many other complexity metrics have been suggested as mutually contributing to reading difficulty; for example, entropy reduction (Hale, 2006), bigram probabilities (McDonald and Shill-cock, 2003), and split-syntactic/lexical versions of other metrics (Roark et al., 2009).

A parser-derived complexity metric such as sur-prisal can only be as good (empirically) as the model of language from which it derives (Frank, 2009). Ideally, a psychologically-plausible lan-guage model would produce a surprisal that would correlate better with linguistic complexity. There-fore, the specification of how to encode a syntac-tic language model is of utmost importance to the quality of the metric.

However, it is difficult to quantify linguis-tic complexity and reading difficulty. The two commonly-used empirical quantifications of read-ing difficulty are eye-tracking measurements and word-by-word reading times; this paper uses read-ing times to find the predictiveness of several parser-derived complexity metrics. Various fac-tors (i.e., from syntax, semantics, discourse) are likely necessary for a full accounting of linguis-tic complexity, so current computational models (with some exceptions) narrow the scope to syn-tactic or lexical complexity.

Three complexity metrics will be calculated in a Hierarchical Hidden Markov Model (HHMM) parser that recognizes trees in right-corner form (the left-right dual of left-corner form). This type of parser performs competitively on standard pars-ing tasks (Schuler et al., 2010); also, it reflects plausible accounts of human language processing as incremental (Tanenhaus et al., 1995; Brants and Crocker, 2000), as considering hypotheses proba-bilistically in parallel (Dahan and Gaskell, 2007), as bounding memory usage to short-term mem-ory limits (Cowan, 2001), and as requiring more memory storage for center-embedding structures than for right-or left-branching ones (Chomsky and Miller, 1963; Gibson, 1998). Also, unlike most other parsers, this parser preserves the arc-eager / arc-standard ambiguity of Abney and John-son (1991). Typical parsing strategies are arc-standard, keeping all right-descendants open for subsequent attachment; but since there can be an unbounded number of such open constituents, this assumption is not compatible with simple mod-els of bounded memory. A consistently arc-eager strategy acknowledges memory bounds, but yields dead-end parses. Both analyses are considered in right-corner HHMM parsing.

The purpose of this paper is to determine whether the language model defined by the HHMM parser can also predict reading times  X  it would be strange if a psychologically plausi-ble model did not also produce viable complex-ity metrics. In the course of showing that the HHMM parser does, in fact, predict reading times, we will define surprisal and entropy reduction in the HHMM parser, and introduce a third metric called embedding difference .

Gibson (1998; 2000) hypothesized two types of syntactic processing costs: integration cost , in which incremental input is combined with exist-ing structures; and memory cost , where unfinished syntactic constructions may incur some short-term memory usage. HHMM surprisal and entropy reduction may be considered forms of integra-tion cost. Though typical PCFG surprisal has been considered a forward-looking metric (Dem-berg and Keller, 2008), the incremental nature of the right-corner transform causes surprisal and en-tropy reduction in the HHMM parser to measure the likelihood of grammatical structures that were hypothesized before evidence was observed for them. Therefore, these HHMM metrics resemble an integration cost encompassing both backward-looking and forward-looking information.

On the other hand, embedding difference is designed to model the cost of storing center-embedded structures in working memory. Chen, Gibson, and Wolf (2005) showed that sentences requiring more syntactic memory during sen-tence processing increased reading times, and it is widely understood that center-embedding incurs significant syntactic processing costs (Miller and Chomsky, 1963; Gibson, 1998). Thus, we would expect for the usage of the center-embedding memory store in an HHMM parser to correlate with reading times (and therefore linguistic com-plexity).

The HHMM parser processes syntactic con-structs using a bounded number of store states, defined to represent short-term memory elements; additional states are utilized whenever center-embedded syntactic structures are present. Simi-lar models such as Crocker and Brants (2000) im-plicitly allow an infinite memory size, but Schuler et al. (2008; 2010) showed that a right-corner HHMM parser can parse most sentences in En-glish with 4 or fewer center-embedded-depth lev-els. This behavior is similar to the hypothesized size of a human short-term memory store (Cowan, 2001). A positive result in predicting reading times will lend additional validity to the claim that the HHMM parser X  X  bounded memory cor-responds to bounded memory in human sentence processing.

The rest of this paper is organized as fol-lows: Section 2 defines the language model of the HHMM parser, including definitions of the three complexity metrics. The methodology for evalu-ating the complexity metrics is described in Sec-tion 3, with actual results in Section 4. Further dis-cussion on results, and comparisons to other work, are in Section 5. This section describes an incremental parser in which surprisal and entropy reduction are sim-ple calculations (Section 2.1). The parser uses a Hierarchical Hidden Markov Model (Section 2.2) and recognizes trees in a right-corner form (Sec-tion 2.3 and 2.4). The new complexity metric, em-bedding difference (Section 2.5), is a natural con-sequence of this HHMM definition. The model is equivalent to previous HHMM parsers (Schuler, 2009), but reorganized into 5 cases to clarify the right-corner structure of the parsed sentences. 2.1 Surprisal and Entropy in HMMs Hidden Markov Models (HMMs) probabilistically connect sequences of observed states o t and hid-den states q t at corresponding time steps t . In pars-ing, observed states are words; hidden states can be a conglomerate state of linguistic information, here taken to be syntactic.

The HMM is an incremental, time-series struc-ture, so one of its by-products is the prefix prob-ability , which will be used to calculate surprisal. This is the probability that that words o 1 ..t have been observed at time t , regardless of which syn-tactic states q 1 ..t produced them. Bayes X  Law and Markov independence assumptions allow this to be calculated from two generative probability dis-tributions. 1 Here, probabilities arise from a Transition Model (  X  A ) between hidden states and an Ob-servation Model (  X  B ) that generates an observed state from a hidden state. These models are so termed for historical reasons (Rabiner, 1990).
Surprisal (Hale, 2001) is then a straightforward calculation from the prefix probability.
 This framing of prefix probability and surprisal in a time-series model is equivalent to Hale X  X  (2001; 2006), assuming that q 1 ..t  X  D t , i.e., that the syn-tactic states we are considering form derivations D , or partial trees, consistent with the observed words. We will see that this is the case for our parser in Sections 2.2 X 2.4.
 Entropy is a measure of uncertainty, defined as H ( x ) =  X  P ( x ) log 2 P ( x ) . Now, the entropy H t of a t -word string o 1 ..t in an HMM can be written: and entropy reduction (Hale, 2003; Hale, 2006) at the t th word is then
Both of these metrics fall out naturally from the time-series representation of the language model. The third complexity metric, embedding differ-ence, will be discussed after additional back-ground in Section 2.5.

In the implementation of an HMM, candidate states at a given time q t are kept in a trel-lis, with step-by-step backpointers to the highest-probability q 1 ..t  X  1 . 2 Also, the best q t are often kept in a beam B t , discarding low-probability states. This mitigates the problems of large state spaces (e.g., that of all possible grammatical derivations). Since beams have been shown to perform well (Brants and Crocker, 2000; Roark, 2001; Boston et al., 2008b), complexity metrics in this paper are calculated on a beam rather than over all (un-bounded) possible derivations D t . The equations above, then, will replace the assumption q 1 ..t  X  D t with q t  X  X  t . 2.2 Hierarchical Hidden Markov Models Hidden states q can have internal structure; in Hi-erarchical HMMs (Fine et al., 1998; Murphy and Paskin, 2001), this internal structure will be used to represent syntax trees and looks like several HMMs stacked on top of each other. As such, q t is factored into sequences of depth-specific vari-ables  X  one for each of D levels in the HMM hi-erarchy. In addition, an intermediate variable f t is introduced to interface between the levels. Transition probabilities P  X  plex hidden states q t are calculated in two phases:  X  Reduce phase. Yields an intermediate  X  Shift phase. Yields a modeled hidden state q t ,
Each phase is factored according to level-specific reduce and shift models,  X  F and  X  Q : P with f D + 1 t and q 0 t defined as constants. Note that only q t is present at the end of the probability cal-culation. In step t , f t  X  1 will be unused, so the marginalization of Equation 9 does not lose any information. . . . . . . . . . . . . constituent and NN is the awaited .

The Observation Model  X  B is comparatively much simpler. It is only dependent on the syntac-tic state at D (or the deepest active HHMM level).
Figure 1(a) gives a schematic of the dependency structure of Equations 8 X 10 for D = 3 . Evalua-tions in this paper are done with D = 4 , following the results of Schuler, et al. (2008). 2.3 Parsing right-corner trees In this HHMM formulation, states and dependen-cies are optimized for parsing right-corner trees (Schuler et al., 2008; Schuler et al., 2010). A sam-ple transformation between CNF and right-corner trees is in Figures 1(c) X 1(d).

Figure 1(b) shows the corresponding store-element interpretation 3 of the right corner tree in 1(d). These can be used as a case study to see what kind of operations need to occur in an HHMM when parsing right-corner trees. There is one unique set of HHMM state values for each tree, so the operations can be seen on either the tree or the store elements.

At each time step t , a certain number of el-ements (maximum D ) are kept in memory, i.e., in the store. New words are observed input, and the bottom occupied element (the  X  X rontier X  of the store) is the context; together, they determine what the store will look like at t +1 . We can characterize the types of store-element changes by when they happen in Figures 1(b) and 1(d): Cross-level Expansion (CLE). Occupies a new In-level Reduction (ILR). Completes an active In-level Expansion (ILE). Starts a new active In-level Transition (ILT). Transitions the store Cross-level Reduction (CLR). Vacates a store
The in-level/cross-level ambiguity occurs in the expansion as well as the reduction, similar to Ab-ney and Johnson X  X  arc-eager/arc-standard compo-sition strategies (1991). At t =3 , another possible hypothesis would be to remain on store element 1 using an ILE instead of a CLE. The HHMM parser, unlike most other parsers, will preserve this in-level/cross-level ambiguity by considering both hypotheses in parallel. 2.4 Reduce and Shift Models With the understanding of what operations need to occur, a formal definition of the language model is in order. Let us begin with the relevant variables.
A shift variable q d t at depth d and time step t is a syntactic state that must represent the active and awaited constituents of right-corner form: a constituent from the pre-right-corner grammar, G .

Reduce variables f are then enlisted to ensure that in-level and cross-level operations are correct. First, k f d ates between ILT, CLE/CLR, and ILE/ILR. This switching is the most important aspect of f d t , so regardless of what g f d Then, g f d recognized constituent whenever a reduction oc-curs (ILR or CLR). For example, in Figure 1(b), after time step 2, an NP has been completely rec-ognized and precipitates an ILR. The NP gets stored in g f 1 of appearing in the store-elements.

This leads us to a specification of the reduce and shift probability models. The reduce step happens first at each time step. True to its name, the re-duce step handles in-level and cross-level reduc-tions (the second and third case below): P with edge cases q 0 t and f D +1 t defined as appropri-ate constants. The first case is just store-element maintenance, in which the variable is not on the  X  X rontier X  and therefore inactive.
 the produced f d t variables are also used in the  X  X f X  statement. These models can be thought of as picking out a f d t first, finding the matching case, then applying the probability models that matches. These models are actually two parts of the same model when learned from trees.

Probabilities in the shift step are also split into cases based on the reduce variables. More main-tenance operations (first case) accompany transi-tions producing new awaited constituents (second case below) and expansions producing new active constituents (third and fourth case): P A final note: the notation  X  P  X  ( | ) has been used to indicate probability models that are empirical, trained directly from frequency counts of right-corner transformed trees in a large corpus. Alter-natively, a standard PCFG could be trained on a corpus (or hand-specified), and then the grammar itself can be right-corner transformed (Schuler, 2009).

Taken together, Equations 11 X 14 define the probabilistic structure of the HHMM for parsing right-corner trees. 2.5 Embedding difference in the HHMM It should be clear from Figure 1 that at any time step while parsing depth-bounded right-corner trees, the candidate hidden state q t will have a  X  X rontier X  depth d ( q t ) . At time t , the beam of possible hidden states q t stores the syntactic state (and a backpointer) along with its probability, P ( o 1 ..t q 1 ..t ) . The average embedding depth at a time step is then where we have directly used the beam notation. The embedding difference metric is:
There is a strong computational correspondence between this definition of embedding difference and the previous definition of surprisal. To see this, we rewrite Equations 1 and 3:
Surprisal ( t ) = log 2 Pre ( o 1 ..t  X  1 )  X  log 2 Pre ( o Both surprisal and embedding difference include summations over the elements of the beam, and are calculated as a difference between previous and current beam states.

Most differences between these metrics are rel-atively inconsequential. For example, the dif-ference in order of subtraction only assures that a positive correlation with reading times is ex-pected. Also, the presence of a logarithm is rel-atively minor. Embedding difference weighs the probabilities with center-embedding depths and then normalizes the values; since the measure is a weighted average of embedding depths rather than a probability distribution,  X  EMB is not always less than 1 and the correspondence with Kullback-Leibler divergence (Levy, 2008) does not hold, so it does not make sense to take the logs.

Therefore, the inclusion of the embedding depth, d ( q t ) , is the only significant difference between the two metrics. The result is a met-ric that, despite numerical correspondence to sur-prisal, models the HHMM X  X  hypotheses about memory cost. Surprisal, entropy reduction, and embedding dif-ference from the HHMM parser were evaluated against a full array of factors (Table 1) on a cor-pus of word-by-word reading times using a linear mixed-effects model.
The corpus of reading times for 23 native En-glish speakers was collected on a set of four nar-ratives (Bachrach et al., 2009), each composed of sentences that were syntactically complex but con-structed to appear relatively natural. Using Linger 2.88, words appeared one-by-one on the screen, and required a button-press in order to advance; they were displayed in lines with 11.5 words on average.

Following Roark et al. X  X  (2009) work on the same corpus, reading times above 1500 ms (for diverted attention) or below 150 ms (for button presses planned before the word appeared) were discarded. In addition, the first and last word of each line on the screen were removed; this left 2926 words out of 3540 words in the corpus.
For some tests, a division between open-and closed-class words was made, with 1450 and 1476 words, respectively. Closed-class words (e.g., de-terminers or auxiliary verbs) usually play some kind of syntactic function in a sentence; our evalu-ations used Roark et al. X  X  list of stop words. Open class words (e.g., nouns and other verbs) more commonly include new words. Thus, one may ex-pect reading times to differ for these two types of words.

Linear mixed-effect regression analysis was used on this data; this entails a set of fixed effects and another of random effects . Reading times y were modeled as a linear combination of factors x , listed in Table 1 (fixed effects); some random variation in the corpus might also be explained by groupings according to subject i , word j , or sen-tence k (random effects). This equation is solved for each of m fixed-effect coefficients  X  with a measure of confidence ( t -value =  X   X / SE (  X   X  ) , where SE is the standard er-ror).  X  0 is the standard intercept to be estimated along with the rest of the coefficients, to adjust for affine relationships between the dependent and in-dependent variables. We report factors as statisti-cally significant contributors to reading time if the absolute value of the t -value is greater than 2.
Two more types of comparisons will be made to see the significance of factors. First, a model of data with the full list of factors can be compared to a model with a subset of those factors. This is done with a likelihood ratio test, producing (for mixed-effects models) a  X  2 1 value and correspond-ing probability that the smaller model could have produced the same estimates as the larger model. A lower probability indicates that the additional factors in the larger model are significant.
Second, models with different fixed effects can be compared to each other through various infor-mation criteria; these trade off between having a more explanatory model vs. a simpler model, and can be calculated on any model. Here, we use Akaike X  X  Information Criterion (AIC), where lower values indicate better models.

All these statistics were calculated in R, using the lme4 package (Bates et al., 2008). Using the full list of factors in Table 1, fixed-effect coefficients were estimated in Table 2. Fitting the best model by AIC would actually prune away some of the factors as relatively insignificant, but these smaller models largely accord with the sig-nificance values in the table and are therefore not presented.

The first data column shows the regression on all data; the second and third columns divide the data into open and closed classes, because an eval-uation (not reported in detail here) showed statis-tically significant interactions between word class and 3 of the predictors. Additionally, this facil-itates comparison with Roark et al. (2009), who make the same division.

Out of the non-parser-based metrics, word order and bigram probability are statistically significant regardless of the data subset; though reciprocal length and unigram frequency do not reach signif-icance here, likelihood ratio tests (not shown) con-firm that they contribute to the model as a whole. It can be seen that nearly all the slopes have been estimated with signs as expected, with the excep-tion of reciprocal length (which is not statistically significant).

Most notably, HHMM surprisal is seen here to be a standout predictive measure for reading times regardless of word class. If the HHMM parser is a good psycholinguistic model, we would expect it to at least produce a viable surprisal metric, and Table 2 attests that this is indeed the case. Though it seems to be less predictive of open classes, a surprisal-only model has the best AIC (-7804) out of any open-class model. Considering the AIC on the full data, the worst model with surprisal (AIC=-10589) outperformed the best model with-out it (AIC=-10478), indicating that the HHMM surprisal is well worth including in the model re-gardless of the presence of other significant fac-tors.

HHMM entropy reduction predicts reading times on the full dataset and on closed-class words. However, its effect on open-class words is insignificant; if we compare the model of column 2 against one without entropy reduction, a likeli-hood ratio test gives  X  2 1 = 0 . 0022 , p = 0 . 9623 (the smaller model could easily generate the same data).

The HHMM X  X  average embedding difference is also significant except in the case of open-class words  X  removing embedding difference on open-class data yields  X  2 1 = 0 . 2739 , p = 0 . 6007 . But what is remarkable is that there is any signifi-cance for this metric at all. Embedding difference and surprisal were relatively correlated compared to other predictors (see Table 3), which is expected because embedding difference is calculated like a weighted version of surprisal. Despite this, it makes an independent contribution to the full-data and closed-class models. Thus, we can conclude that the average embedding depth component af-fects reading times  X  i.e., the HHMM X  X  notion of working memory behaves as we would expect hu-man working memory to behave. As with previous work on large-scale parser-derived complexity metrics, the linear mixed-effect models suggest that sentence-level factors are effective predictors for reading difficulty  X  in these evaluations, better than commonly-used lex-ical and near-neighbor predictors (Pollatsek et al., 2006; Engbert et al., 2005). The fact that HHMM surprisal outperforms even n -gram metrics points to the importance of including a notion of sentence structure. This is particularly true when the sen-tence structure is defined in a language model that is psycholinguistically plausible (here, bounded-memory right-corner form).
 This accords with an understated result of Boston et al. X  X  eye-tracking study (2008a): a richer language model predicts eye movements during reading better than an oversimplified one. The comparison there is between phrase struc-ture surprisal (based on Hale X  X  (2001) calculation from an Earley parser), and dependency grammar surprisal (based on Nivre X  X  (2007) dependency parser). Frank (2009) similarly reports improve-ments in the reading-time predictiveness of unlexi-calized surprisal when using a language model that is more plausible than PCFGs.

The difference in predictivity due to word class is difficult to explain. One theory may be that closed-class words are less susceptible to random effects because there is a finite set of them for any language, making them overall easier to pre-dict via parser-derived metrics. Or, we could note that since closed-class words often serve grammat-ical functions in addition to their lexical content, they contribute more information to parser-derived measures than open-class words. Previous work with complexity metrics on this corpus (Roark et al., 2009) suggests that these explanations only ac-count for part of the word-class variation in the performance of predictors.
Further comparsion to Roark et al. will show other differences, such as the lesser role of word length and unigram frequency, lower overall cor-relations between factors, and the greater predic-tivity of their entropy metric. In addition, their metrics are different from ours in that they are de-signed to tease apart lexical and syntactic contri-butions to reading difficulty. Their notion of en-tropy, in particular, estimates Hale X  X  definition of entropy on whole derivations (2006) by isolating the predictive entropy; they then proceed to define separate lexical and syntactic predictive entropies. Drawing more directly from Hale, our definition is a whole-derivation metric based on the condi-tional entropy of the words, given the root. (The root constituent, though unwritten in our defini-tions, is always included in the HHMM start state, q .)
More generally, the parser used in these evalu-ations differs from other reported parsers in that it is not lexicalized. One might expect for this to be a weakness, allowing distributions of prob-abilities at each time step in places not licensed by the observed words, and therefore giving poor probability-based complexity metrics. However, we see that this language model performs well despite its lack of lexicalization. This indicates that lexicalization is not a requisite part of syntac-tic parser performance with respect to predicting linguistic complexity, corroborating the evidence of Demberg and Keller X  X  (2008)  X  X nlexicalized X  (POS-generating, not word-generating) parser.
Another difference is that previous parsers have produced useful complexity metrics without main-taining arc-eager/arc-standard ambiguity. Results show that including this ambiguity in the HHMM at least does not invalidate (and may in fact im-prove) surprisal or entropy reduction as reading-time predictors. The task at hand was to determine whether the HHMM could consistently be considered a plau-sible psycholinguistic model, producing viable complexity metrics while maintaining other char-acteristics such as bounded memory usage. The linear mixed-effects models on reading times val-idate this claim. The HHMM can straightfor-wardly produce highly-predictive, standard com-plexity metrics (surprisal and entropy reduction). HHMM surprisal performs very well in predicting reading times regardless of word class. Our for-mulation of entropy reduction is also significant except in open-class words.

The new metric, embedding difference, uses the average center-embedding depth of the HHMM to model syntactic-processing memory cost. This metric can only be calculated on parsers with an explicit representation for short-term memory el-ements like the right-corner HHMM parser. Re-sults show that embedding difference does predict reading times except in open-class words, yielding a significant contribution independent of surprisal despite the fact that its definition is similar to that of surprisal.
 Thanks to Brian Roark for help on the reading times corpus, Tim Miller for the formulation of entropy reduction, Mark Holland for statistical in-sight, and the anonymous reviewers for their input. This research was supported by National Science Foundation CAREER/PECASE award 0447685.
 The views expressed are not necessarily endorsed by the sponsors.

