 PO Box 14428, Melbourne, VIC 8001, Australia
In recent years, the phenomenal advance of technologi-cal developments in information technology enable govern-ment agencies and corporations to accumulate an enormous amount of personal data for analytical purposes. These agencies and organizations often need to release individual records (microdata) for research and other public benefit purposes. This propagation has to be in accordance with laws and regulations to avoid the propagation of confidential information. In other words, microdata should be published in such a way that preserve the privacy of the individuals. To protect personal data from individual identification, SDC is often applied before the data are released for analysis [2], [25]. The purpose of microdata SDC is to alter the original microdata in such a way that the statistical analysis from the original data and the modified data are similar and the disclosure risk of identification is low. As SDC requires suppressing or altering the original data, the quality of data and the analysis results can be damaged. Hence, SDC methods must find a balance between data utility and personal confidentiality.

Microaggregation is a family of SDC methods for pro-tecting microdata sets that have been extensively studied recently [3], [4], [6], [7], [10], [11], [19], [21]. The basic idea of microaggregation is to partition a dataset into mutually exclusive groups of at least  X  records prior to publication, and then publish the centroid over each group instead of indi-vidual records. The resulting anonymized dataset satisfies anonymity [17], requiring each record in a dataset to be iden-tical to at least (  X   X  1 ) other records in the same dataset. As releasing microdata about individuals poses privacy threat due to the privacy-related attributes, called quasi-identifiers, both  X  -anonymity and microaggregation only consider the quasi-identifiers. Microaggregation is traditionally restricted to numeric attributes in order to calculate the centroid of records, but also has been extended to handle categorical and ordinal attributes [4], [7], [18]. In this paper we propose a microaggregated method that is also applicable to numeric attributes.

The effectiveness of a microaggregation method is mea-sured by calculating its information loss. A lower infor-mation loss implies that the anonymized dataset is less distorted from the original dataset, and thus provides better data quality for analysis.  X  -anonymity [16], [17], [20], [24] provides sufficient protection of personal confidentiality of microdata, while ensuring the quality of the anonymized dataset, an effective microaggregation method should incur as little information loss as possible. In order to be useful in practice, the dataset should keep as much informative as possible. Hence, it is necessary to seriously consider the tradeoff between privacy and information loss. To minimize the information loss due to microaggregation, all records are partitioned into several groups such that each group contains at least  X  similar records, and then the records in each group are replaced by their corresponding mean such that the values of each variable are the same. Such similar groups are known as clusters. In the context of data mining, clustering is a useful technique that partitions records into groups such that records within a group are similar to each other, while records in different groups are most distinct from one another. Thus, microaggregation can be seen as a clustering problem with constraints on the size of the clusters.

Many microaggregation methods derive from traditional clustering algorithms. For example, Domingo-Ferrer and Mateo-Sanz [3] proposed univariate and multivariate  X  -Ward algorithms that extend the agglomerative hierarchical clustering method of Ward et al. [22]. Domingo-Ferrer and Torra [5], [6] proposed a microaggregation method based on the fuzzy  X  -means algorithm [1], and Laszlo and Mukherjee [12] extended the standard minimum spanning tree partitioning algorithm for microaggregation [26]. All of these microaggregation methods build all clusters gradu-ally but simultaneously. There are some other methods for microaggregation that have been proposed in the literature that build one/two cluster(s) at a time. Notable examples include Maximum Distance [14], Diameter-based Fixed-Size microaggregation and centroid-based Fixed-size microaggre-gation [12], Maximum Distance to Average Vector (MDAV) [7], MHM [8] and the Two Fixed Reference Points method [27]. Most recently, Lin et al. [28] proposed a density-based microaggregation method that forms records by the descending order of their densities, and then fine-tunes these clusters in reverse order.

The reminder of this paper is organized as follows. We introduce a problem of microaggregation in Section II. Section III introduces the basic concept of microaggregation. Section IV reviews previous microaggregation methods. We present a brief description of our proposed microaggregation method in Section V. Section VI shows experimental results of the proposed method. Finally, concluding remarks are included in Section VII.

The algorithms for microaggregation works by partition-ing the microdata into groups, where within groups the records are homogeneous but between groups the records are heterogeneous so that information loss is low. The similar groups are also called clusters. The level of privacy required is controlled by a security parameter  X  , the minimum number of records in a cluster. In essence, the parameter  X  specifies the maximum acceptable disclosure risk. Once a value for  X  has been selected by the data protector, the only job left is to maximize data utility. Maximizing utility can be achieved by microaggregating optimally, i.e. with minimum within-groups variability loss. So the main challenge in microaggregation is how to minimize the information loss during the clustering process. Although plenty of work has been done, to maximize the data utility by forming the clusters, this is not yet sufficient in terms of information loss. So more research needs to be done to form the clusters such that the information loss is as low as possible. This paper analyses the problem with a new pairwise approach such that the information loss is minimal.

Observing this challenge, this work presents a new clustering-based method for microaggregation, where two distant clusters are made simultaneously in a systematic way. According to this method, sort all records in ascending order by using a sorting function so that the first record and the last record are most distant to each other. Form a cluster with the first record and its (  X   X  1 ) nearest records and another cluster with the last record and its (  X   X  1 ) nearest records. Sort the remaining records ( (  X   X  2  X  ) , if dataset contains records) by using the same sorting function and continue to build pair clusters at the same time by using the first and the last record as seeds until some specified records remain. Finally form one/two cluster(s) depending on the remaining records. Thus all clusters produced in this way contain  X  records except the last cluster that may contain at the most (2  X   X  1) records. Performance of the proposed method is compared against the most recent widely used microaggregation methods. The experimental results show that the proposed microaggregation method outperforms the recent methods in the literature in all test situations.
Microdata protection through microaggregation has been intensively studied in recent years. Many techniques and methods have been proposed to deal with this problem. In this section we describe some fundamental concepts of microaggregation.

When we microaggregate data we should keep in mind two goals: data utility and preserving privacy of individuals. For preserving the data utility we should introduce as little noise as possible into the data and preserving privacy data should be sufficiently modified in such a way that it is difficult for an adversary to reidentify the corresponding individuals. Figure 1 shows an example of microaggregated data where the individuals in each cluster are replaced by the corresponding cluster mean. The figure shows that after ag-gregating the chosen elements, it is impossible to distinguish them, so that the probability of linking any respondent is inversely proportional to the number of aggregated elements.
Consider a microdata set  X  with  X  numeric attributes and  X  records, where each record is represented as a vector in a  X  -dimensional space. For a given positive integer  X   X   X  , a microaggregation method partitions  X  into  X  clusters, where each cluster contains at least  X  records (to satisfy anonymity), and then replaces the records in each cluster with the centroid of the cluster. Let  X   X  denote the number of records in the  X  th cluster, and  X   X  X  X  , 1  X   X   X   X   X  , denote the  X  th record in the  X  th cluster. Then,  X   X   X   X  for  X  =1 to  X  and by  X   X   X  is calculated as the average vector of all the records in the  X  th cluster.
In the same way, the centroid of  X  , denoted by  X   X  ,isthe average vector of all the records in  X  . Information loss is used to quantify the amount of information of a dataset that is lost after applying a microaggregation method. In this paper we use the most common definition of information loss by Domingo-Ferrer and Mateo-Sanz [3] as follows: where  X  X  X  X  is the within-cluster squared error, calculated by summing the Euclidean distance of each record  X   X  X  X  to the average value  X   X   X  as follows: and  X  X  X  X  is the sum of squared error within the entire dataset  X  , calculated by summing the Euclidean distance of each record  X   X  X  X  to the average value  X   X  as follows:
For a given dataset  X  ,  X  X  X  X  is fixed regardless of how  X  is partitioned. On the other hand, SSE varies of a dataset depending on the partition of the dataset. In essence, SSE measures the similarity of the records in a cluster. The lower the SSE, the higher the within-cluster homogeneity and the higher the SSE, the lower the within cluster homogeneity. If all the records in a cluster are the same, then the SSE is zero indicating no information is lost. On the other hand, if all the records in a cluster are more diverse, SSE is large indicating more information is lost. In this paper, we used SSE as a measure of similarity indicating a record will be included in a particular cluster if it causes least SSE among all other records in the dataset. Therefore, the microaggregation problem can be enumerated as a constraint optimization problem as follows:
Definition 1 (Microaggregation problem) Given a dataset  X  of  X  elements and a positive integer  X  , find a partitioning  X  = {  X  1 , X  2 ,..., X   X  } of  X  such that 1)  X   X   X   X   X  = X  , for all  X   X  =  X  =1 , 2 ,..., X  , 3)  X  X  X  X  is minimized, 4) for all  X   X   X   X  ,  X   X   X   X  X  X   X  for any  X   X   X   X  .
The microaggregation problem stated above can be solved in polynomial time for a univariate dataset [11] but has been shown to be NP hard for multivariate dataset [13]. It is a natural expectation that  X  X  X  X  is low if the number of clusters is large. Thus the number of records in each cluster should be kept close to  X  . Domingo-Ferrer and Mateo-Sanz [3] showed that no cluster should contain more than (2  X   X  1) records since such clusters can always be partitioned to further reduce information loss.

Previous microaggregation methods have been roughly divided into two categories, namely fixed-size and data-oriented microaggregation [3], [8]. For fixed-size microag-gregation, the partition is done by dividing a dataset into clusters that have size  X  , except perhaps one cluster which has a size between  X  and (2  X   X  1) , depending on the total number of records  X  and the anonymity parameter  X  .For the data-oriented microaggregation, the partition is done by allowing all clusters with sizes between  X  and (2  X   X  1) . Intuitively, fixed-size methods reduce the search space, and thus are more computationally efficient than data-oriented methods [28]. However, data-oriented methods can adapt to different values of  X  and various data distributions and thus may achieve lower information loss than fixed-size methods.
Domingo-Ferrer and Mateo-Sanz [3] proposed a multi-variate fixed-size microaggregation method, later called the Maximum Distance (MD) method [14]. The MD method repeatedly locates the two records that are most distant to each other, and forms two clusters with their respective (  X   X  1) nearest records until fewer than 2  X  records remain. If at least  X  records remain, it then forms a new cluster with all remaining records. Finally when there are fewer than  X  records not assigned to any cluster yet, this algorithm then individually assigns these records to their closest clusters. This method has a time complexity of  X  (  X  3 ) and works well for most datasets. Laszlo and Mukherjee [12] modified the last step of the MD method such that each remaining record is added to its own nearest cluster and proposed Diameter-based Fixed-size microaggregation. This method is however not a fixed size method because it allows more than one cluster to have more than  X  records.

The MDAV method is the most widely used microaggre-gation method [14]. MDAV is the same as MD except in the first step. MDAV finds the record  X  that is furthest from the current centroid of the dataset and the record  X  that is furthest from  X  instead of finding the two records that are most distant to each other, as is done in MD. Then form a cluster with  X  and its (  X   X  1 ) nearest records and form another cluster with  X  and its (  X   X  1 ) nearest records. For the remaining records, repeat this process until fewer than 2  X  records remain. If between  X  and (2  X   X  1) records remain, MDAV simply forms a new group with all of the remaining records. On the other hand, if the number of the remaining records is below  X  , it adds all of the remaining records to their nearest clusters. So MDAV is a fixed size method. Lin et al. [28] proposed a modified MDAV, called MDAV-1. The MDAV-1 is similar to MDAV except when the number of the remaining records is between  X  and (2  X   X  1) ,anew cluster is formed with the record that is the furthest from the centroid of the remaining records, and its (  X   X  1 ) nearest records. Any remaining records are then added to their respective nearest clusters. Experimental results indicate that MDAV-1 incurs slightly less information loss than MDAV [28]. Another variant of the MDAV method, called MDAV-generic, is proposed by Domingo-Ferrer and Torra [7], where by the threshold 2  X  is altered to 3  X  . If between 2  X  and (3  X   X  1) records remain, then find the record  X  that is furthest from the centroid of the remaining records and form a cluster with  X  and its (  X   X  1 ) nearest records and another cluster with the remaining records. Finally when fewer than 2  X  records remain, this algorithm then forms a new cluster with all the remaining records. Laszlo and Mukherjee [12] proposed another method, called Centroid-based Fixed-size microaggregation that is also based on a centroid but builds only one cluster during each iteration. This algorithm first find a record  X  that is furthest from the current centroid of the dataset and then find a cluster with  X  and its (  X   X  1 nearest records. For the remaining records repeat the same process until fewer than  X  records remain. Finally add each remaining record to its nearest clusters. This method is not a fixed-size method as more than one cluster has more than  X  records. Solanas et al. [15] proposed a variable-size variant of MDAV, called V-MDAV. V-MDAV first builds a new cluster of  X  records and then tries to extend this to up to ( 2  X   X  1 )records based on some criteria. V-MDAV adopts a user-defined parameter to control the threshold of adding more records to a cluster. Chang et al. [27] proposed the Two Fixed Reference Points (TFRP) method to accelerate the clustering process of  X  -anonymization. During the first phase, TFRP selects two extreme points calculated from the dataset. Let  X   X  X  X  X  and  X   X  X  X  X  be the minimum and maximum values over all attributes in the datasets, respectively, then one reference point  X  1 has  X   X  X  X  X  as its value for all attributes, and another reference point  X  2 has  X   X  X  X  X  as its value for all attributes. A cluster of  X  records is then formed with the record  X  that is the furthest from  X  1 and the ( nearest records to  X  . Similarly another cluster of  X  records is formed with the record  X  that is the furthest from  X  2 (  X   X  1 ) nearest records to  X  . These two steps are repeated until fewer than  X  records remain. Finally, these remaining records are assigned to their respective nearest clusters. This method is quite efficient as  X  1 and  X  2 are fixed throughout the iterations. When all clusters are generated, TFRP applies a enhancement step to determine whether a cluster should be retained or decomposed and added to other clusters.
Lin et al. [28] proposed a density-based algorithm (DBA) for microaggregation. The DBA has two different scenarios. The first state of DBA (DBA-1) repeatedly builds a new cluster using the  X  -neighborhood of the record with the highest  X  -density among all records that are not yet assigned to any cluster until fewer than  X  unassigned records remain. These remaining records are then assigned to their respective nearest clusters. The DBA-1 partitions the dataset into some clusters, where each cluster contains no fewer than  X  records. The second state of DBA (DBA-2) attempts to fine-tune all clusters by checking whether to decompose a cluster and merge its content with other clusters. Notably, all clusters are checked during the DBA-2 by the reverse of the order that they were added to clusters in the DBA-1. After several clusters are removed and their records are added to their nearest clusters in the DBA-2, some clusters may contain more than (2  X   X  1) records. At the end of the DBA-2, the MDAV-1 algorithm is applied to each cluster with size above ( 2  X   X  1 ) to reduce the information loss. This state is finally called MDAV-2. Experimental results show that the DBA attains a reasonable dominance over the latest microaggregation methods.

All of the microaggregation methods described above repeatedly choose one/ two records according to various heuristics and form one/two cluster(s) with the chosen records and their respective (  X   X  1 ) other records. How-ever there are other microaggregation methods that build all clusters simultaneously and work by initially forming multiple clusters of records in the form of trees, where each tree represent a cluster. The multivariate  X  -Ward algorithm [3] first finds the two records that are furthest from each other in the dataset and build two clusters from these two records and their respective (  X   X  1 ) nearest records. Each of the remaining record then forms its own cluster. These clusters are repeatedly merged until all clusters have at least  X  records. Finally the algorithm is recursively applied to each cluster containing 2  X  or more records. Domingo-Ferrer et al. [9] proposed a multivariate microaggregation method called  X  -Approx. This method first builds a forest and then decomposes the trees in the forest such that all trees have sizes between  X  and max( 2  X   X  1 , 3  X   X  5 ). Finally, for any tree with size greater than ( 2  X   X  1 ), find the node in the tree that is furthest from the centroid of the tree. Form a cluster with this node and its (  X   X  1 ) nearest records in the tree and form another cluster with the remaining records in the tree.
Hansen an Mukherjee [11] proposed a microaggrega-tion method for univariate datasets called HM. After that Domingo-Ferrer et al. [8] proposed a multivariate version of the HM method, called MHM. This method first uses various heuristics, such as nearest point next (NPN), maximum distance (MD) or MDAV to order the multivariate records. Steps similar to the HM method are then applied to generate clusters based on this ordering. Domingo-Ferrer et al. [6] proposed a microaggregation method based on fuzzy  X  -means algorithm (FCM) [1]. This method repeatedly runs FCM to adjust the two parameters of FCM (one is the number of clusters  X  and another is the exponent for the partition matrix  X  ) until each cluster contains at least records. The value of  X  is initially large (and  X  is small) and is gradually reduced (increased) during the repeated FCM runs to reduce the size of each cluster. The same process is then recursively applied to those clusters with 2  X  or more records.

This section presents the proposed pairwise systematic algorithm for microaggregation that minimizes the infor-mation loss and satisfies the  X  -anonymity requirement. The proposed approach builds and refines simultaneously two distant clusters at a time with the corresponding similar records together in a systematic way.
 A. Sorting Function
According to the proposed approach, first sort all records with respect to the attributes, so it is necessary to define a sorting function to sort all the records in the dataset. Consider a microdata set  X  with  X  numeric attributes, namely  X  1 , X  2 ,..., X   X  and  X  records. Thus each record is represented as a vector in a  X  -dimensional space. To sort all the records with respect to the numeric attributes, we define the  X  th sorted record in the dataset  X  as follows: where,  X   X  X  X  is the  X  th record of the  X  th attribute and  X   X  centroid of the  X  th attribute. The SF stated above measures the distance between the records and their corresponding centroid. In this study, the SF is arranged in ascending order indicating records are arranged in order of magnitude. The lower the values of SF, the more the records are below their respective centroid and the higher the values of SF, the more the records are above their respective centroid. Thus the records in the dataset  X  , sorted in ascending order based on the SF and the first and the last record, are most distant among all other records in the dataset  X  .
 B. Pairwise-Systematic microaggregation algorithm
Based on the information loss measure in equation (1) and the definition of the microaggregation problem, we are now ready to discuss the Pairwise-Systematic (P-S) microaggregation algorithm.

According to this method, first sort all records of  X  in the dataset  X  in ascending order by using the SF in equation (4). Thus in the sorting dataset, the first record and the last record are the most distant to each other among all other pair records in the dataset  X  . The algorithm (see Fig. 2) repeatedly builds pair clusters using the first record and the last record in the sorting dataset and their corresponding (  X   X  1) nearest records until fewer than 3  X  records remain (see steps 2-6 of Fig. 2). The nearest records in a cluster are chosen in such a way that the inclusion of these records causes less SSE than the other records in the dataset. If between 2  X  and (3  X   X  1) records remain, then sort these records in ascending order by using the same sorting function in equation (4) and find the first record  X  .Forma cluster with  X  and its (  X   X  1 ) nearest records, and another cluster with the remaining records (see step 7 of Fig. 2). Moreover, if fewer than 2  X  records remain, then form a new cluster with all remaining records (see step 9 of Fig. 2).
The P-S microaggregation algorithm stated above endeavor to repeatedly build two clusters simmultaneously in a systematic way. As the records in the dataset  X  are arranged in ascending order and the first record and the last record are most distant to each other, building clusters in this systematic way, the algorithm easily captures if there are any extreme values in the dataset.

Definition 2 (Systematic clustering-based microaggre-gation decision problem) In a given dataset  X  of  X  records, there is a clustering scheme  X  = {  X  1 , X  2 ,..., X   X  } such that 1)  X   X   X   X  X  X   X , 1 &lt; X   X   X  : the size of each cluster is 2) where each cluster  X   X  (  X  =1 , 2 ,..., X  ) contains the records that are more similar to each other such that the cluster means are close to the values of the clusters and thus cause the least information loss.

The objective of our experiment is to investigate the recital of our approach in terms of data quality. This section experimentally evaluates the effectiveness of the P-S microaggregation algorithm. The following three datasets [8], which have been used as benchmarks in previous studies to evaluate various microaggregation methods, were adopted in our experiments. 1) The  X  X arragona X  dataset contains 834 records with 13 2) The  X  X ensus X  dataset contains 1,080 records with 13 3) The  X  X IA X  dataset contains 4,092 records with 11
To accurately evaluate our approach, the performance of the proposed P-S microaggregation algorithm is compared in this section with various microaggregation methods. Tables I-III show the information losses of these microaggregation methods. The lowest information loss for each dataset and each  X  value is shown in bold face. The information losses of methods DBA-1, DBA-2, MDAV-1 and MDAV-2 are quoted from [28]; the information losses of methods MDAV-MHM, MD-MHM, CBFS-MHM, NPN-MHM and M-d (for  X  =3 , 5 , 10 ) are quoted from [8]; the information losses of methods  X  -Approx and M-d (for  X  =4 ) are quoted from [9], and the information losses of methods TFRP-1 and TFRP-2 are quoted from [27]. TFRP is a two-stage method and its two stages are denoted as TRFP-1 and TRFP-2 respectively. The TFRP-2 is similar to the DBA-2 but disallows merging a record to a group of size over (4  X   X  1) .

Tables I-III show the information loss for several values of  X  and the Tarragona, Census and for the EIA datasets respectively. The information loss is compared with the P-S microaggregation algorithm among the latest microaggrega-tion methods listed above. Information loss is measured as SSE SST the dataset. Note that the within-groups sum of squares SSE is never greater than SST so that the reported information loss measure takes values in the range [0,100]. Tables I-III illustrate that in all of the test situations, the P-S microag-gregation algorithm causes significantly less information loss than any of the microaggregation methods listed in the table. Essentially, the P-S microaggregation algorithm causes less than 50 % information loss compared to any of the previous methods listed above and for any of the datasets. This shows the utility and the effectiveness of the proposed algorithm.
Microaggregation is an effective method in SDC of pro-tecting privacy in microdata and has been extensively used world-wide. The level of privacy required is controlled by a parameter  X  , often called anonymity parameter for  X  -anonymization that is basically the minimum number of records in a cluster. Once the value of  X  has been chosen, the data protector and the data users are interested in minimizing the information loss. This work has presented a new Pairwise-Systematic (P-S) microaggregation method for numerical attributes. The new method consists of pairwise clustering individual records in microdata in a number of disjointed clusters in a systematic way, using a sorting function prior publication and then publishing the mean over each cluster instead of individual records. A comparison has been made of the proposed algorithm with the most widely used microaggregation methods through experimenting with the three benchmark datasets (Tarragona, Census and the EIA). The experimental results show that the proposed algorithm has a significant dominance over the recent mi-croaggregation methods with respect to information loss. Thus the proposed method is very effective in preserving the privacy of respondents X  contribution to microdata sets and can be used as a microaggregation method in SDC.
