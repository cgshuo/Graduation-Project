 People are more and more willing to participate in online forums to share their knowledge and experience. However, it may not be easy for them to find their desired threads in online forums due to the information overload problem. Traditional recommendation approaches can not be directly applied to online forums due to two reasons. First, unlike traditional movie or music recommendation problem, there is no rating information in online forums. Second, the spar-sity problem is more severe since the users may only read threads but take no actions. To address these limitations, in this paper we propose to make use of the reply relationships among users, as well as thread contents. A learning algo-rithm is introduced to infer a user-thread alignment mani-fold in which both users and thread contents can be well rep-resented. Thus, the relatedness between users and threads can be measured on this alignment manifold, and the closest threads which can best meet the corresponding user X  X  infor-mation needs are recommended. Experiments on a dataset crawled from digg.com have demonstrated the superiority of our algorithm over traditional recommendation algorithms. H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval Algorithms, experimentation Recommender systems, social network, manifold
With the advances in web 2.0 technology, people are more intrigued to participate in online social communities. The online discussion forum is one of these social communities that enable users to conveniently generate contents, share information, and exchange opinions through conversations.
A typical online forum includes two types of objects: users and threads. A thread ( t ) in the online forum is created by auser( u ) who submits the first post. After the thread is created, users can comment on the thread by replying to any post in this thread. Fig. 1 shows a thread example from digg.com which contains 7 posts (posted by seven users). In this thread, the second, fifth, sixth and seventh user all replied to the first user. And the third and fourth user replied to the second user. Usually, if a user u i replies to a user u j in a thread, it is likely that both of the two users are interested in the same topic.

Although the rapidly growing amount of information en-sures that flourishing knowledge is available in the online fo-rums, the so called  X  X nformation overload X  becomes a major problem that prevents people from accessing their interested contents. For this reason, personalized recommendation sys-tems are demanded in online forums, to help users find their interested threads and improve their experience. Besides, in online discussion platform, recommender systems not only help users discover their interested information, but also fa-cilitate the communication for users who have similar inter-ests in the social community.
Broadly speaking, existing technologies used for recom-mender systems fall in either of the following two categories: content based filtering versus collaborative filtering (CF). The content based filtering approach analyzes the content information associated with items and users, and discovers those items that best match users X  previous interested con-tent. The CF approach predicts the interests of an active user by collecting rating information from other similar users or items [8, 6]. However, some features of online forums ren-der the traditional recommendation techniques above ineffi-cient. Two major challenges remain to be resolved in thread recommendation in online forums. In this paper, we propose a novel approach, called User-Thread Alignment Manifold (UTAM), which makes full use of reply relationships among users. We consider the set of usersasa user manifold and the set of threads as a thread manifold . Thus, our goal is to find an alignment between these two manifolds.

First, we need to model the user manifold. In the online discussion platform, explicit user relationship such as friend-ship is often unavailable. Here, we propose to use the reply relationship in threaded discussion to construct a user net-work which provides a discrete approximation to the user manifold. Although the reply relationship is not as strong as those well-defined links such as friendship or affiliations in social network, a relatively higher frequency of replies be-tween two users often implies higher probability that the two users have common interests. Besides, by making use of reply relationship, the sparsity problem can be significantly alleviated. For example, even if there is only one thread that two users have both commented, they can still be strongly connected in the user network if there are a lot of replies between them.

Second, we construct a thread network to model the rela-tionship between threads. Conventionally, the cosine simi-larity is usually adopted to measure the similarity between two text documents. However, recent studies have shown that text documents may reside on a submanifold embed-ded in the ambient Euclidean space [16, 28]. Considering that the thread manifold is globally nonlinear but locally linear, we propose to fit a set of linear functions for the local patches. The relationships among threads are, thus, cap-tured by the coefficients which minimize the fitting errors.
Since users and threads have different representations, their relatedness can not be directly measured. In order to recommend threads a user is interested in, we need to find a mapping between the user and thread manifolds. The user-thread relationship can be naturally constructed by connect-ing the user and the thread if and only if the user partic-ipated in this thread. We further develop a learning ap-proach to obtain a user-thread alignment manifold by re-specting the user-thread relationship, as well as the user network structure and the thread network structure. Con-sequently, the relatedness between the user and the thread can be measured by their distance on this manifold. The closest threads, with respect to the intrinsic geometry of the user-thread alignment manifold, are recommended to the corresponding user.

The rest of the paper is organized as follows. In Section 2, we provide a review of related work. We introduce our algorithm for learning a user-thread alignment manifold in Section 3. The experimental results are presented in Section 4. Finally, we provide some concluding remarks in Section 5.
Traditional CF algorithms predict a user X  X  potential pref-erence on an item by integrating the preferences of his/her neighbors (similar users) on the same item. Since the simi-larity between all user-pairs are derived from their historical ratings on all the items, the performance of CF will be poor when there are not enough ratings for accurately identifying the similar users.

To provide more realistic and accurate results, recom-mender systems considering users X  connection received more and more attentions in recent years. Meanwhile, theoreti-cal studies and empirical validations of the correlation be-tween users X  action (rating, tagging) and their social affil-iation promoted the progress of the emerging trust-based recommender systems [3, 24, 32]. It shows that by lever-aging the trustworthiness between users instead of purely computing similarity by comparing users X  rating profiles can improve the recommender performance [23, 18, 21]. This is especially evident in the case when the user-item rating matrix is very sparse. Since trust information plays an es-sential and significant role in the trust-based recommender, different approaches for trust learning have also been widely studied [4, 26]. In general, when the trust statements or re-lationships are explicitly expressed by users, a trust metric model will be chosen to propagate the trustworthiness over the trust network.

However, there is a challenge to decide how far to prop-agate the trust weight in the trust network. To solve this problem, Mohsen Jamali and Martin Ester proposed a ran-dom walk method called TrustWalker that combines trust-based and item-based approach together. Their motivation is that ratings expressed by strong trust friends on similar items are more reliable than the ratings expressed by weakly trusted far neighbors on the exact target item [18]. So their algorithm considers not only the rating of the target item, but also those similar ones. The experiments on Epinions 1 demonstrate that TrustWalker outperforms CF methods and pure trust-based methods.

Also, the relationship between the user-item rating matrix and the trust network is studied systematically. In order to obtain a good balance between the influence of users X  own characteristics and of their trusted friends recommendations, in [21, 22, 31], Hao Ma et all. employed a probabilistic factor analysis framework in the model-based collaborative filtering. Their framework includes two separate learning parts, a user feature learning part to measure the users X  own characteristics, and a social trust recommendation part that formulate the users X  preference purely based on their friends X  favors. These two partially right models are finally fused together by a control parameter as the social trust ensemble.
 In addition to the research efforts on trust-based approaches, Ioannis Konstas et all. developed a collaborative recom-mender system that take into account both social annotation and friendship inherent in the social graph [19]. With user explicitly provided friendship and tags, the relation between two nodes in the graph is obtained by adopting the Random Walk with Restarts framework. Experiments on the music social network last.fm showed that explicit relationship of users and tags are really helpful to improve the performance of an item recommender system.

It is apparent to see that all the aforementioned recom-mender algorithms require explicit trust relationship or friend-ship, which is publically unavailable or inaccessible in most online forums and other social communities. Besides, both trust information and rating profile depend much on the opinion information explicitly provided by users. For these reasons, it is worthwhile to propose a recommender approach that can exploit more general information to capture users X  interests.

There is increasingly amounts of interest in online forum [14, 1, 10, 7, 20, 11]. Recent studies on threaded discussions showed that users that are linked together by online replies may share common interests [12, 31]. Statistical analysis of the social network based on user commenting behavior also presented that giant component, small average path length and high clustering are the common features of reply so-cial network and traditional social network [13]. Moreover, Xiaolin Shi et al . studied the feature factors impacting the user grouping behavior and found that two users either com-municating more frequently or having more common reply friends are more likely to be in the same community [29]. But to our knowledge, none of previous works consider to use the user reply relationship for recommendation. Also none effort has been made to represent users and threads with a unified representation.
In this section, we introduce our new approach for thread recommendation in online forum s by learning a user-thread alignment manifold. We begin with the description of the problem formulation.
Let  X  = { t 1 ,t 2 ,  X  X  X  ,t n t } denote the set containing all the threads and  X  = { u 1 ,u 2 ,  X  X  X  ,u n u } denote the set contain-ing all the users. If a user u i posts at least once in a thread t ,wesaythat u i participates in the thread t j .Therec-ommendation problem in the forum system can be defined as ranking threads in  X  for each user u i with some measure so that threads having potential attractiveness to u i will be ranked on top.
There are three kinds of relationship that the recommen-dation system can explore: user-user relationship, thread-thread relationship and user-th read relationship. The user-user relationship reflects the interest similarity between two users. It plays an important role in discovering interesting contents for a user u i by  X  X aking advises X  from users who have similar interests with u i . In online forums, the user-user relationship can be established by mining reply infor-mation in the threaded discussion. That is, if u i has ever replied to u j in a thread, there is a reply relationship be-tween them. The times that they replied to each other in all the threads can be used to measure the similarity be-tween two users. Likewise, the thread-thread relationship reflects the content similarity between two threads and is thus helpful for users to seek similar threads of their inter-ests. The user-thread relationship between u i and t j can be established by considering whether u i participated in t It reflects that the contents of t j match to u i  X  X  interests to some extent.

In our approach, we construct a user network and a thread network to preserve the user relationship and thread rela-tionship, respectively. The user-thread relationship is then used to map both users and threads into a single alignment manifold with a unified representation. After that, the rank-ing can be accomplished by computing the distance between users and threads on this alignment manifold. We illustrate this process in Fig. 2. Considering u 1 as the target user that the system wants to recommend threads to. The line between u 1 and u 2 represents their reply relationship. Be-sides, the lines between the threads indicate the content sim-ilarity and the lines between a thread and a user represent a previous participation behavior. We can see from the right part of Fig. 2 that, by mapping users and threads into the same semantic space, threads that are likely to be u 1  X  X  in-terests surround him closely. At this moment, we can get the recommendation ranking list for u i by computing the distances of threads to u i and sorting them in an ascending order. Notice that threads in which previously participated by u 1 are excluded from the ranking list. We use a user graph to model the user-user relationship. The user graph is an undirected graph G = V u ,E u ,where each node i  X  V u corresponds to a specific user u ,andeach edge  X  E u represents a user-user link in the network. An edge exists between u i and u j if either of them has replied to the other. The undirected property of the graph ensures that relations between two individuals are symmetrical. Let n ij be the total times that u i replied to u j .Tomeasurethe degree of how users in the network are linked together, we adopt the dense model [13] defined in the following: Definition 1. Dense model
The dense model takes the sum n ij + n ji as the edge X  X  weight of the user graph. This value measures the exact communication frequency between users.

However, the dense model will suffer from the problem of bias caused by different posting behaviors of different users. We need to account for the fact that some users tend to post more frequently than others. In addition, various popular-ity of different users could also introduce bias to the dense model. For example, if a user posts a thread or comment that intrigues lots of online conversations, it is possible that the influence or popularity of the post author in the commu-nity is more responsible for the widespread discussion than the interest overlap between the repliers and him. These two problems make the reply times an insufficient measure to re-flect the interest similarity between users. So we also add normalization to the weight matrix for dense model graph. Finally, we use the following weighted graph to measure the user-user relationship: In the forum, each thread is a composition of many posts. Let x i  X  R m t denote the vector representation of thread t so that the contents of the threads set  X  can be represented as X = { x 1 , x 2 ,  X  X  X  , x n t } R m t . A straightforward way to measure the relationship between two threads is using the cosine similarity of their vector representations. However, recent studies have shown that text documents may reside on a submanifold embedded in the ambient Euclidean space [16, 28]. Thus, the relationship of two threads can be cap-tured better by considering the thread manifold. Inspired from various manifold learning approaches [16, 28], we aim at finding the low dimensional embedding g i of each thread x on the thread manifold.

For each thread x i , we define the local patch N ( x i the set of k -nearest neighbors of x i including itself, with the size k + 1. Define a set A i of size k +1, where A i = { j N thread matrix and G i =[ g j ]  X  R K  X  ( k +1) ,j  X  X  i be the local embedding matrix, where K is the embedding dimension. We try to fit a local linear model f ( X i )= A T i X i + b for each local path N ( x i ) to best approximate G i .Inthis model, 1 k +1 is a ( k + 1)-dimensional vector of all ones and b i  X  R K is the intercept. For the sake of simplicity, we append a new element  X 1 X  to each x i .Thus,theintercept b can be absorbed into A i and we have f ( X i )= A T i X Fitting this model can be mathematically formulated as where  X  F is the Frobenius norm for matrices, and the penalty term  X  A i 2 F is introduced to avoid overfitting [15]. This linear model finds a mapping from document space X i to topic space G i locally.

By setting the first order derivatives of Eq. (2) with re-spective to A i to be zero, we obtain the optimal solution for A : where I is an identity matrix. Substituting A i into Eq. (2) with Eq. (3), we get the following minimization problem: +  X  X i X T i +( k +1)  X  I  X  1 X i G T i
Following some simple algebraic steps, Eq. (4) can be reduced to where Tr(  X  ) denotes the trace operator and L t i is given by By applying the Woodbury-Morrison formula [30], the above equation can be simplified as:
For each N ( x i ), we can find the best local model by min-imizing Eq. (5). By summing the costs of all local models, we get
Since each G i is a sub-matrix of G , we can use a selection matrix S i to represent each G i in a unified equation, that is, each G i can be written as a multiple of G and its selection matrix: where the selection matrix S i is defined as follows: S i [ e whose j -th element is one and all other elements are zero. Substituting G i into Eq. (7) with GS i , our optimization problem becomes as minimizing:
We call R t the locally discrimi native regularizer.
To learn the user-thread alignment manifold, we adopt a similar idea to that of graph based subspace learning [5, 17]. However, our algorithm differs from graph embedding algorithms in that we learns an alignment manifold embed-ding for two different graphs. In our work, this is achieved by taking advantage of the user-thread relationship and pre-serving the graph structures of both user network and thread network under a unified approach of manifold learning. Let K be the dimensionality of the manifold embedding. We denote F and G to be the mapping functions defined over the user graph and the thread graph, respectively, F = { f 1 , f 2 ,  X  X  X  , f n u } R K , G = { g 1 , g 2 ,  X  X  X  , g n user graph and the threads graph here are constructed as that in section 3 . 2and3 . 3. We need to find optimal func-tions F and G so that each user u i and his interested thread t will be mapped close in the learned manifold. To be more specific, the distance between f i and g j should be small.
Since we need to find a mapping between user and thread manifolds, we also construct a matrix W ut to denote the user-thread relationship. In the application, this user-thread relationship can be well captured by considering users X  pre-vious participation behavior. We set W ut ij =1ifuser u i posted at least once to thread t j ,and W ut ij =0otherwise. Then we can define another two diagonal matrices D ut and D
Given a user graph, a thread graph and a matrix W ut , the objective function for user-thread alignment manifold learning is defined as follows: where R u is used to measure the smoothness of mapping function F on the user manifold and R t is the locally dis-criminative regularizer defined in Eq. (9) in section 3 . 3. In our algorithm, we give R u as follows: where D u ii is a diagonal matrix whose entries are col-umn (or row, since W u is symmetric) sum of W u , D u ii = user graph. We define L u = D u  X  W u .

An intuitive explanation for minimizing R u is that if user u i and u j have similar interests ( W u ij is big), f i and f close to each other in the manifold.
 Substituting R u and R t into Eq. (10) by Eq. (11) and Eq. (9), respectively, the objective function becomes as:
The first term on the right-hand side of equal sign indi-cates the relationship between users and threads. An intu-itive explanation of this term is that, each user should be close to the threads in which he/she previous participated (posted at least once) on the alignment manifold. Thus, we can capture a user X  X  interests by considering his/her pre-vious participation behavior. The coefficient  X  of the first term controls the contribution o f users X  previous participa-tion behaviors to the alignment manifold learning. The sec-ond term and third term are two constraints that preserve the structure of the user network and the thread network, re-spectively. The trade-off of the g raph structure preservation between these two networks are controlled by the coefficients  X  and  X  ,where0 &lt; X , X &lt; 1and  X  +  X  =1.

After simple algebra transformation, the first term of (12) canbewrittenasfollows: = = = =Tr(
According to Euation (13), we can rewrite the objective function O ( F , G ) in the matrix-vector form: O ( F , G )=  X  Tr( FD ut F T + GD tu G T  X  G ( W ut ) T F
To make (14) a well-defined optimization problem, we add a scaling constraint to F and G , then minimizing (14) is equivalent to solve a Rayleigh quotient problem:
Define H T =[ F , G ], so (15) can be written as: where L is defined as:
Note that H T e = 0 get rid of the results that lead to the constant embedding.

The optimization problem in Eq. (16) can be solved by calculating the eigenvectors corresponding to the K smallest eigenvalues (exclude zero) of L .

Alternatively, we can maximize the global variance in the target subspace instead of maximizing ( F 2 l 2 + G 2 l 2 Recall that the variance of a random variable x is defined as where dP( x ) is the probability of observing x . Extending to the discrete case, the probability of a node on these graph can be estimated by the node X  X  degree [9]. Thus the variance of F and G is: where D is a diagram matrix that defined as:
We can derive the corresponding optimization problem for that in Eq. (16):
The optimization problem in Eq. (21) is solved by finding the general eigenvectors corresponding to the K smallest eigenvalue (exclude zero) of ( L , D ). Once the alignment manifold is obtained (i.e. the matrix H ), we can measure the similarity between a user and a thread by computing their distance on this manifold. Thus, our proposed recommendation algorithm (UTAM) are im-plemented in four steps: Firstly, we construct L u , L t W ut by exploiting the user-user relationship, the thread-thread relationship and the user-thread relationship; Sec-ondly, we use these matrices to construct L and D which are defined in Eq. (17) and Eq. (20), respectively; In the third, we compute the first K eigenvectors co rresponding to the smallest nonzero eigenvalues of L , D to form matrix H ; Finally, given a target user u i , we compute the Euclidean distance between him/her and all the threads by using the corresponding row vectors in matrix H and recommend the closest ones to u i .
The computational complexity of UTAM is dominated by two parts: (1) matrices construction for L u , L t and W and (2) solving a generalized eigenvector problem. Con-structing L u and W ut is trivial, which costs O (( n u ) However, for constructing L t , more computations are in-volved. We need to perform the k nearest neighbor search and a number of small matrix multiplication to construct L . For the k nearest neighbor search, the complexity is O (( n t + k )( m t ) 2 ). The complexity for calculating the ma-plexity of matrices construction is O (( n u ) 2 + n u n t eralized eigenvector problem A ( a )=  X  B ( a ), where A and Bare n  X  n matrices ( n = n t + n u ). To solve this gen-eralized eigenvector problem, we need first to compute the Singular Value Decomposition (SVD) of the matrix B. The complexity of SVD is O ( n 3 ). Then, we need to compute the first K smallest eigenvectors of a n  X  n matrix, whose complexity is O ( kn 2 ). Thus, the total complexity of the generalized eigenvector problem is O (( n + K ) n 2 ). There-fore, the computational complexity of the UTAM algorithm is O (( n u ) 2 + n u n t +( n t + k )( m t ) 2 + k ( k + n n + K )( n u + n t ) 2 ), where k m t , K n t and K n u .
In this section, we evaluate the performance of our pro-posed algorithm on a real dataset collected from the digg.com. We first describe the dataset in section 4 . 1, and then state experimental settings and compared algorithms in section 4 . 2. Finally, we provide discussions on the experimental re-sults in section 4 . 3.
We perform experiments on a real world dataset collected from the online discussion platform of Digg. Digg is a pop-ular social news aggregator website where people can pro-vide content from anywhere on the web. In Digg, users can submit and comment on the news stories as well as lead dis-cussion about the content of their interest. In addition, it would be important to note that, although each thread in Digg could be dug once which can be considered as a 0 / 1vote reflecting his/her attitude to the thread, and the users are able to designate other users as friends, we did not include this information in our experiments. The reason is that such kinds of information are special for this online discussion platform and are often unavailable for general forum web-sites. We crawled 10 , 429 threads commented or submitted by 300 active users in a period of 30 days to form the dataset for our experiments. The timestamp of the data is raging from November 2009 to December 2009. This dataset covers plenty of communities with topics of great diversity, includ-ing  X  X utos X ,  X  X ovie X ,  X  X oftware X ,  X  X asketball X ,  X  X box X , and  X  X eneral Science X  and so on. The content of the article of a thread were represented as term frequency vectors. Table 1 shows the statistics of the dataset. We use Precision, Mean Average Precision (MAP), and Normalized Discount Cumulative Gain to measure the per-formance of different recommendation algorithms. The pre-cision is specified as the ratio of the number of threads that meet the user X  X  interests to the number of top-ranked threads recommended to the user. By meeting the user X  X  interests, we mean that the thread is commented at least once by the user, which is a good approximation to the real ground truth of user interests. It would be important to note that, in the recommendation area, there is no perfect evaluation method. Our evaluation method above is generally acceptable in the recommendation research community at present. Average Precision (AP) is the average of precisions computed at the point of each correctly recommended threads in the recom-mendation list: where Precision@ i is the precision at ranking position i , N is the number of recommended threads, and corr i =1if the thread at position i is correctly recommended, otherwise corr i = 0. MAP is the mean of average precision scores over all users. NDCG at position n is defined as: where r i is the relevance rating of item at rank i .Inour case, r i is 1 if the user participated in this recommended thread and 0 otherwise. IDCG is chosen so that the perfect ranking has a NDCG value of 1.

To remove the ground truth from the users X  historical ac-tions for evaluation purpose, we segment the duration into two time slots. We define a split time t 0 by letting the first time slot include 75% stories of the whole thread set (10 , 429 threads), and the second time slot include the re-maining 25% stories. No user actions of comments in the second time slot will be used in training.

For evaluation, at each run, we randomly picked 30 users as the test data set and take the remaining 270 users as the training data set. For each user in the test set, we use their participation behavior in the first time slot for model con-struction (training) and use the left participation informa-tion in the second time slot as hold-out data for evaluation (ground truth). Note that, in our algorithm, reply relation-ships between all users are constructed by only using the information in the first time slot.
To demonstrate the effectiveness of our proposed recom-mendation algorithm (UTAM), we compare it with three al-gorithms: content based recommender, traditional collabo-rative filtering and a variant of c ollaborative filtering that in-corporate reply relationship. In this paper, we implement a variant of the classical Rocchio content-based recommender [2, 27]. With a similar idea to [25], we maintain the multiple profile vectors for a user to better capture the user X  X  inter-ests. To recommend threads t o a user, an interesting score is assigned to each of his previous unseen threads by cal-culating the similarity between the threads X  article and the user X  X  interests profile vectors. We call this algorithm Vec-tor based Content Similarity (CVS). The similarity between two profile vectors is computed by their cosine similarity. For the latter two CF algorithms, we choose the user based version of CF. It is because unlike traditional datasets for CF, our dataset have much more  X  X hreads X  than users. The variant of CF algorithm is implemented in this way: Rather than calculating users X  similarity by comparing their read profiles, the normalized degree of reply frequency is treated as users X  similarity. So we name this variant of CF as Re-ply based CF (RCF). For both CF algorithms, we set the nearest neighbor parameter k u to be 10. When constructing threads graph for content based algorithm and ours, we set the nearest neighbor k t to be 15.
We use precision-scope curve and NDCG-scope curve to evaluate the effectiveness of our algorithm UTAM. The scope is specified by the number N of top-ranked threads recom-mended to the user. The precision-scope curve and NDCG-scope curve describes the precision and NDCG with various Precision Figure 3: Precision-scope curves of different recom-mendation algorithms on Digg.com dataset. Our al-gorithm performs the best on the entire scope scopes and thus give the overall performance evaluation of the algorithms. In real application, it is inappropriate to recommend a user with too many threads. Generally, a user will just see the first one or two pages of the recommendation list, this makes the precision within top 50 more important to concern, especially the precision at the top 10. Therefore, we compare our algorithm UTAM with other three recom-mendation algorithms at various scopes ranging from 5 to 50. In our experiment, we empirically set parameter  X  ,  X  and  X  of our algorithm UTAM to be 0 . 4, 0 . 6 and 5 respectively. The results are presented in Fig. 3 (Precision-scope curve) and Fig. 4 (NDCG-scope curve). It is evident that our al-gorithm significantly outperforms the other three algorithms on the entire scope. The poor performance of CF could be explained for two reasons as we mentioned in Section 1: (1) The CF algorithm suffers from the sparsity problem when user similarity comparison step failed. Note that, the den-sity of the matrix W ut is only 1 . 2%. (2) Without explicit user ratings that include user opinion information, CF algo-rithm may not be able to well capture users X  interests. It can be seen in Fig. 3 and Fig. 4 that, RCF outperforms CF constantly when scope varies. This result shows that the reply relationship in forum network is more effective than the sparse relationship of CF. This can be explained by the intuitive sense that even if a small number of threads are participated in common by two users, a high frequency of replies between them could also indicate similar interest be-tween them. We can also see from Fig. 3 and Fig. 4 that by exploiting both kinds of information from user relationship and threads contents, our algorithm significantly performs better than algorithms which use only one kind of the in-formation (i.e. RCF, CVS). We also report the performance of four recommendation algorithms in terms of NDCG at various scopes in Table 2.
Since our algorithm is a manifold learning algorithm that discovers an alignment manifold embedded in the semantic NDCG Figure 4: NDCG-scope curves of different recom-mendation algorithms on Digg.com dataset. Our al-gorithm performs the best on the entire scope Table 2: Comparison of recommendation algorithms in terms of NDCG at various scopes space for both users and threads, it is important to under-stand how embedding dimensions affect to the learning pro-cess. For this reason, we fixed other parameters (  X  =0 . 4,  X  =0 . 6,  X  = 5) and use different values of dimension K to study its influence to the performance. Fig. 5 presents the performance of our algorithm UTAM measured by (a) Preci-sion at the top 10 and (b) MAP with K increasing from 1 to 200. It can be see that, when K is less than 60, performance is not good. When K increases, both precision and MAP firstly increase rapidly and then decrease gradually. This is because low dimensions are unable to well capture the man-ifold in a high space. Our algorithm works best when K is around 60 to 140. These results suggest that, by setting K to a relatively large value (about the number of topics in threads), our algorithm UTAM will achieve good and robust performance. It outperforms the best compared algorithm (RCF) with K ranging from 60 to 170.
Since we exploit both user reply relationship and seman-tic contents from threads, it is worthwhile to study whether these two kinds of information contribute to our algorithm X  X  Figure 5: Performance of UTAM measured by (a) Precision at the top 10 and (b) MAP when varying the dimension of the embedding space. The dot-ted lines represent the corresponding performance of the best compared algorithm (RCF) performance. In fact, we could view  X  and  X  to be the cor-responding parameters that control the impacts of the user network and the thread network to our algorithm, respec-tively. In order to exclude other factors that influence the algorithm X  X  performance, we fix parameter  X  to be 5, and set the embedding dimension K to be 65, and then vary  X  and  X  to investigate the relative contribution from these two information sources. Fig. 6 presents the performance of our algorithm UTAM measured by (a) Precision at the top 5, (b) Precision at the top 10 and (c) MAP with  X  ranging from 0 to 1 (Correspondingly,  X  is ranging from 1 to 0). It can be see from Fig. 6 that, our algorithm performs the best when  X  is approximately equal to  X  . This shows that both user reply relationship and thread contents will contribute to the performance of our algorithm and are thus complementary to each other.
In this paper, we propose a novel threads recommendation algorithm by learning a user-thread alignment manifold. To model the user network, we exploit the reply relationship in the threaded discussion to capture users X  similarity. We observe that, although the reply relationship is less reliable than those well defined relationship such as friendship or affiliations, it serves as a good alternative to measure the interest similarity between two users. Moreover, reply re-lationship is very useful to alleviate the sparsity problem in online forum platforms. To model the thread network, we propose a local linear model to learn the thread mani-fold. By respecting user-thread relationship, the users and threads can be mapped into an alignment manifold, which enable us to represent both of them by a unified represen-tation. Thus, we can recommend the closest thread to the corresponding user. Experiment results have demonstrated Performance MAP Figure 6: Performance of UTAM measured by (a) Precision at the top 5, (b) Precision at the top 10 and (c) MAP when varying parameters. Note that  X  +  X  =1 ,wevary  X  against  X  . Itcanbeseethatour algorithm performs best when  X  is set approximately equal to  X  that our algorithm (UTAM) outperforms traditional recom-mendation algorithms.

Since user reply relationship are generally available in a lot of websites other than online forums, a natural exten-sion of our work is to employ the manifold alignment learn-ing approach to recommend items of multimedia in social networks. However, items of multimedia are much more complicated to analyze than threads. To be specific, the pictures that are different in content may be semantically related, and hence it is inappropriate to only use the con-tent information to model the items network. In addition, the contents of users X  comments may also be useful to iden-tify the interests of them. However, since users X  generated comments usually contain a lot of noise which needs to be removed, more efforts need to be made to model a user net-work respecting the contents of users X  comments. We leave these problems in our future work. [1] L. A. Adamic, J. Zhang, E. Bakshy, and M. S.
 [2] G. Adomavicius and A. Tuzhilin. Toward the next [3] A. Anagnostopoulos, R. Kumar, and M. Mahdian. [4] R. Andersen, C. Borgs, J. Chayes, U. Feige, [5] M. Belkin and P. Niyogi. Laplacian eigenmaps and [6] R. Bell and Y. Koren. Improved neighborhood-based [7] M. Bouguessa, B. Dumoulin, and S. Wang. Identifying [8] W. Chen, D. Zhang, and E. Chang. Combinational [9] F. Chung. Spectral graph theory . 1997. [10] G. Cong, L. Wang, C.-Y. Lin, Y.-I. Song, and Y. Sun. [11] J. L. Elsas and J. G. Carbonell. It pays to be picky: [12] K. Goh, Y. Eom, H. Jeong, B. Kahng, and D. Kim. [13] V. G  X  omez, A. Kaltenbrunner, and V. L  X  opez. [14] L. Guo, E. Tan, S. Chen, X. Zhang, and Y. Zhao. [15] T. Hastie, R. Tibshirani, J. Friedman, and J. Franklin. [16] X. He, D. Cai, H. Liu, and W.-Y. Ma. Locality [17] X. He and P. Niyogi. Locality preserving projections. [18] M. Jamali and M. Ester. TrustWalker: a random walk [19] I. Konstas, V. Stathopoulos, and J. Jose. On social [20] T. Lappas, K. Liu, and E. Terzi. Finding a team of [21] H. Ma, I. King, and M. Lyu. Learning to recommend [22] H. Ma, H. Yang, M. Lyu, and I. King. Sorec: social [23] P. Massa and P. Avesani. Trust-aware recommender [24] Y. Matsuo and H. Yamamoto. Community gravity: [25] R. Pon, A. Cardenas, D. Buttler, and T. Critchlow. [26] A. Rettinger, M. Nickles, and V. Tresp. A statistical [27] J. Rocchio. Relevance feedback in information [28] S. Roweis and L. Saul. Nonlinear dimensionality [29] X. Shi, J. Zhu, R. Cai, and L. Zhang. User grouping [30] G. Strang. Introduction to linear algebra . Wellesley [31] K. Zhongbao and Z. Changshui. Reply networks on a [32] C. Ziegler and J. Golbeck. Investigating interactions of
