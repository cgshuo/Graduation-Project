 Discussion forums have become a popular knowl-edge source for finding solutions to common prob-for programmers is among the top-100 most vis-rums for almost every major product ranging from users respond. Typical response posts include so-lutions or clarification requests, whereas feedback posts form another major category of forum posts. As is the case with any community of humans, discussion forums have their share of inflamma-tory remarks too. Mining problem-solution pairs from discussion forums has attracted much atten-tion from the scholarly community in the recent past. Since the first post most usually contains the problem description, identifying its solutions from among the other posts in the thread has been the focus of many recent efforts (e.g., (Gandhe et al., 2012; Hong and Davison, 2009)). Extract-ing problem-solution pairs from forums enables the usage of such knowledge in knowledge reuse frameworks such as case-based reasoning (Kolod-ner, 1992) that use problem-solution pairs as raw material. In this paper, we address the problem discussion forums.

Among the first papers to address the solution identification problem was the unsupervised ap-proach proposed by (Cong et al., 2008). It em-ploys a graph propagation method that prioritizes posts that are (a) more similar to the problem post, (b) more similar to other posts, and (c) authored by a more authoritative user, to be labeled as so-lution posts. Though seen to be effective in iden-tifying solutions from travel forums, the first two assumptions, (a) and (b), were seen to be not very reliable in solution identification in other kinds of discussion boards. (Catherine et al., 2012) reports a study that illustrates that non-solution posts are, on an average, as similar to the problem as solution posts in technical forums. The second assump-tion (i.e., (b) above) was also not seen to be use-ful in discussion forums since posts that are highly similar to other posts were seen to be complaints, repetitive content being more pervasive among complaint posts than solutions (Catherine et al., 2013). Having exhausted the two obvious textual features for solution identification, subsequent ap-proaches have largely used the presence of lexi-cal cues signifying solution-like narrative (e.g., in-structive narratives such as  X  X heck the router for any connection issues X  ) as the primary content-based feature for solution identification.

All solution identification approaches since (Cong et al., 2008) have used super-vised methods that require training data in the form of labeled solution and non-solution posts. The techniques differ from one another mostly in the non-textual features that are employed in representing posts. A variety of high precision as-sumptions such as solution post typically follows a problem post (Qu and Liu, 2011), solution posts are likely to be within the first few posts , solution posts are likely to have been acknowledged by the problem post author (Catherine et al., 2012), users with high authoritativeness are likely to author solutions (Hong and Davison, 2009), and so on have been seen to be useful in solution identification. Being supervised methods, the above assumptions are implicitly factored in by including the appropriate feature (e.g., post position in thread) in the feature space so that the learner may learn the correlation (e.g., solution posts typically are among the first few posts) using the training data. Though such assumptions on structural features, if generic enough, may be built into unsupervised techniques to aid solution identification, the variation in availability of such features across forums limits the usage of models that rely heavily on structural features. For example, some forums employ chronological order based flattening of threads (Seo et al., 2009) making reply-to information unavailable; models that harness reply-to features would then have limited utility on identifying solutions within such flattened threads. On medical forums, privacy considerations may force forum data to be dumped without author information, making a host of author-id based features unavailable. On datasets that contain data from across forums, the model may have to be aware of the absence of certain features in subsets of the data, or be modeled using features that are available on all threads.

Our Contribution: We propose an unsuper-vised method for solution identification. The cor-nerstone of our technique is the usage of a hith-erto unexplored textual feature, lexical correla-tions between problems and solutions , that is ex-ploited along with language model based charac-terization of solution posts. We model the lexical correlation and solution post character using reg-ularized translation models and unigram language models respectively. To keep our technique appli-cable across a large variety of forums with vary-ing availability of non-textual features, we design it to be able to work with minimal availability of non-textual features . In particular, we show that by using post position as the only non-textual fea-ture, we are able to achieve accuracies compara-ble to supervision-based approaches that use many structural features (Catherine et al., 2013). In this section, we provide a brief overview of pre-vious work related to our problem. Though most of the answer/solution identification approaches proposed so far in literature are supervised meth-ods that require a labeled training corpus, there are a few that require limited or no supervision. Ta-ble 1 provides an overview of some of the more recent solution identification techniques from lit-erature, with a focus on some features that we wish to highlight. The common observation that most problem-solving discussion threads have a prob-lem description in the first post has been explic-itly factored into many techniques; knowing the problem/question is important for solution iden-tification since author relations between problem and other posts provide valuable cues for solution identification. Most techniques use a variety of such features as noted in Section 1. SVMs have been the most popular method for supervised and semi-supervised learning for the task of solution identification.

Of particular interest to us are approaches that use limited or no supervision, since we focus on unsupervised solution identification in this paper. The only unsupervised approach for the task, that from (Cong et al., 2008), uses a graph propaga-tion method on a graph modeled using posts as vertices, and relies on the assumptions that posts that bear high similarity to the problem and other posts and those authored by authoritative users are more likely to be solution posts. Some of those as-sumptions, as mentioned in Section 1, were later found to be not generalizable to beyond travel fo-rums. The semi-supervised approach presented in (Catherine et al., 2013) uses a few labeled threads to bootstrap SVM based learners which are then co-trained in an iterative fashion. In addition to various features explored in literature, they use acknowledgement modeling so that posts that have been acknowledged positively may be favored for being labeled as solutions.

We will use translation and language models in our method for solution identification. Usage of translation models for modeling the correlation between textual problems and solutions have been explored earlier starting from the answer retrieval work in (Xue et al., 2008) where new queries were conceptually expanded using the translation model to improve retrieval. Translation models were also seen to be useful in segmenting incident reports into the problem and solution parts (Deepak et al., 2012); we will use an adaptation of the generative model presented therein, for our solution extrac-tion formulation. Entity-level translation models were recently shown to be useful in modeling cor-relations in QA archives (Singh, 2012). Let a thread T from a discussion forum be made up of t posts. Since we assume, much like many other earlier papers, that the first post is the problem post, the task is to identify which among the remaining t  X  1 posts are solutions. There could be multiple (most likely, different) solutions within the same thread. We may now model the thread T as t  X  1 post pairs, each pair having the problem post as the first element, and one of the t  X  1 remaining posts (i.e., re-ply posts in T ) as the second element. Let C = problem-reply pairs from across threads in the dis-cussion forum. We are interested in finding a sub-set C 0 of C such that most of the pairs in C 0 are are not so. In short, we would like to find problem-solution pairs from C such that the F-measure 8 for solution identification is maximized. 4.1 The Correlation Assumption Central to our approach is the assumption of lex-ical correlation between the problem and solution texts. At the word level, this translates to assum-ing that there exist word pairs such that the pres-ence of the first word in the problem part pre-dicts the presence/absence of the second word in the solution part well. Though not yet harnessed for solution identification, the correlation assump-tion is not at all novel. Infact, the assumption that similar problems have similar solutions (of which the correlation assumption is an offshoot) forms the foundation of case-based reasoning sys-tems (Kolodner, 1992), a kind of knowledge reuse systems that could be the natural consumers of problem-solution pairs mined from forums. The usage of translation models in QA retrieval (Xue et al., 2008; Singh, 2012) and segmentation (Deepak et al., 2012) were also motivated by the correlation assumption. We use an IBM Model 1 translation model (Brown et al., 1990) in our technique; sim-plistically, such a model m may be thought of as a 2-d associative array where the value m [ w 1 ][ w 2 ] is directly related to the probability of w 1 occuring in the problem when w 2 occurs in the solution. 4.2 Generative model for Solution Posts Consider a unigram language model S S that mod-els the lexical characteristics of solution posts, and a translation model T S that models the lexical cor-relation between problems and solutions. Our gen-erative model models the reply part of a ( p,r ) pair (in which r is a solution) as being generated from the statistical models in {S S , T S } as follows.  X  For each word w s occuring in r , where T p tion obtained from T S conditioned over the words in the post p ; this is obtained by assigning each candidate solution word w a weight equal to avg {T S [ w 0 ][ w ] | w 0  X  p } , and normalizing such weights across all solution words. In short, each solution word is assumed to be generated from the language model or the translation model (con-ditioned on the problem words) with a probabil-ity of  X  and 1  X   X  respectively, thus accounting for the correlation assumption . The generative model above is similar to the proposal in (Deepak et al., 2012), adapted suitably for our scenario. We model non-solution posts similarly with the sole difference being that they would be sampled from the analogous models S N and T N that characterize behavior of non-solution posts.

Example: Consider the following illustrative example of a problem and solution post:  X  Problem: I am unable to surf the web on the  X  Solution: Maybe, you should try disconnect-
Of the solution words above, generic words such as try and should could probably be ex-plained by (i.e., sampled from) the solution lan-guage model, whereas disconnect and rejoin could be correlated well with surf and wifi and hence are more likely to be supported better by the transla-tion model. 4.3 Clustering-based Approach We propose a clustering based approach so as to cluster each of the ( p,r ) pairs into either the so-lution cluster or the non-solution cluster. The ob-jective function that we seek to maximize is the following:
F (( p,r ) , S , T ) indicates the conformance of the ( p,r ) pair (details in Section 4.3.1) with the generative model that uses the S and T models as the language and translation models respectively. The clustering based approach labels each ( p,r ) pair as either solution (i.e., S ) or non-solution (i.e., N ). Since we do not know the models or the la-belings to start with, we use an iterative approach modeled on the EM meta-algorithm (Dempster et al., 1977) involving iterations, each comprising of an E-step followed by the M-step. For simplicity and brevity, instead of deriving the EM formula-tion, we illustrate our approach by making an anal-ogy with the popular K-Means clustering (Mac-Queen, 1967) algorithm that also uses the EM for-mulation and crisp assignments of data points like we do. K-Means is a clustering algorithm that clusters objects represented as multi-dimensional points into k clusters where each cluster is rep-resented by the centroid of all its members. Each iteration in K-Means starts off with assigning each ) (Sec 4.3.1), and learn solution word S N and T N using pairs labeled N (Sec 4.3.3) data object to its nearest centroid, followed by re-computing the centroid vector based on the assign-ments made. The analogy with K-Means is illus-trated in Table 2.

Though the analogy in Table 2 serves to provide a high-level picture of our approach, the details re-quire further exposition. In short, our approach is a 2-way clustering algorithm that uses two pairs of models, [ S S , T S ] and [ S N , T N ] , to model solution pairs and non-solution pairs respectively. At each iteration, the post-pairs are labeled as either solu-tion ( S ) or non-solution ( N ) based on which pair of models they better conform to. Within the same iteration, the four models are then re-learnt using the labels and other side information. At the end of the iterations, the pairs labeled S are output as solution pairs. We describe the various details in separate subsections herein. 4.3.1 E-Step: Estimating Labels As outlined in Table 2, each ( p,r ) pair would be assigned to one of the classes, solution or non-solution, based on whether it conforms better with the solution models (i.e., S S &amp; T S ) or non-solution models ( S N &amp; T N ), as determined using the F (( p,r ) , S , T ) function, i.e., F ( . ) falls out of the generative model: F (( p,r ) , S , T ) = where S [ w ] denotes the probability of w from S and T p [ w ] denotes the probability of w from the multinomial distribution derived from T con-ditioned over the words in p , as in Section 4.2. 4.3.2 E-Step: Estimating Reply Word Source Since the language and translation models operate at the word level, the objective function entails that we let the models learn based on their fractional contribution of the words from the language and translation models. Thus, we estimate the propor-tional contribution of each word from the language and translation models too, in the E-step. The frac-tional contributions of the word w  X  r in the ( p,r ) pair labeled as solution (i.e., S ) is as follows:
The fractional contributions are just the actual supports for the word w , normalized by the to-tal contribution for the word from across the two models. Similar estimates, f ( p,r ) are made for reply words from pairs labeled N . In our example from Section 4.2, words such as rejoin are likely to get higher f ( p,r ) to being better correlated with problem words and consequently better supported by the translation model; those such as try may get higher f ( p,r ) scores. 4.3.3 M-Step: Learning Models We use the labels and reply-word source estimates from the E-step to re-learn the language and trans-lation models in this step. As may be obvious from the ensuing discussion, those pairs labeled as solution pairs are used to learn the S S and T S models and those labeled as non-solution pairs are used to learn the models with subscript N . We let each reply word contribute as much to the respec-tive language and translation models according to the estimates in Section 4.3.2. In our example, if the word disconnect is assigned a source proba-bility of 0 . 9 and 0 . 1 for the translation and lan-guage models respectively, the virtual document-pair from ( p,r ) that goes into the training of the respective T model would assume that disconnect occurs in r with a frequency of 0 . 9 ; similarly, the respective S would account for disconnect with a frequency of 0 . 1 . Though fractional word frequen-cies are not possible in real documents, statistical models can accomodate such fractional frequen-cies in a straightforward manner. The language models are learnt only over the r parts of the ( p,r ) pairs since they are meant to characterize reply be-havior; on the other hand, translation models learn over both p and r parts to model correlation.
Regularizing the T models: In our formula-tion, the language and translation models may be seen as competing for  X  X wnership X  of reply words. Consider the post and reply vocabularies to be of sizes A and B respectively; then, the transla-tion model would have A  X  B variables, whereas the unigram language model has only B variables. This gives the translation model an implicit edge due to having more parameters to tune to the data, putting the language models at a disadvantage. To level off the playing field, we use a regular-tion models. The IBM Model 1 learning pro-cess uses an internal EM approach where the E-step estimates the alignment vector for each prob-lem word; this vector indicates the distribution of alignments of the problem word across the solu-tion words. In our example, an example alignment vector for wifi could be: { rejoin : 0 . 4 ,network : 0 . 4 ,disconnect : 0 . 1 ,... } . Our regularization method uses a parameter  X  to discard the long tail in the alignment vector by resetting entries hav-ing a value  X   X  to 0 . 0 followed by re-normalizing the alignment vector to add up to 1.0. Such prun-ing is performed at each iteration in the learn-ing of the translation model, so that the following M-steps learn the probability matrix according to such modified alignment vectors.

The semantics of the  X  parameter may be in-Alg. 1 Clustering-based Solution Identification Input. C , a set of ( p,r ) pairs Output. C 0 , the set of identified solution pairs Initialization 1.  X  ( p,r )  X  X  2. if ( r.postpos = 2) label (( p,r )) = S 3. else label (( p,r )) = N 4. Learn S S &amp; T S using pairs labeled S 5. Learn S N &amp; T N using pairs labeled N EM Iterations 6. while ( not converged  X  # Iterations &lt; 10) 7.  X  ( p,r )  X  X  8. label (( p,r )) = arg max i F (( p,r ) , S i , T i ) 9.  X  w  X  r 11. Learn S S &amp; T S from pairs labeled S 12. Learn S N &amp; T N from pairs labeled N Output 13. Output ( p,r ) pairs from C with tuitively outlined. If we would like to allow align-ment vectors to allow a problem word to align with upto two reply words, we would need to set  X  to a value close to 0 . 5(= 1 low for the mass consumed by an almost inevitable long tail of very low values in the alignment vec-tor, we would need to set it to slightly lower than 0 . 5 , say 0 . 4 . 4.3.4 Initialization K-Means clustering mostly initializes centroid vectors randomly; however, it is non-trivial to ini-tialize the complex translation and language mod-els randomly. Moreover, an initialization such that the S S and T S models favor the solution pairs more than the non-solution pairs is critical so that they may progressively lean towards modeling so-lution behaviour better across iterations. Towards this, we make use of a structural feature; in partic-ular, adapting the hypothesis that solutions occur in the first N posts (Ref. (Catherine et al., 2012)), we label the pairs that have the the reply from the second post (note that the first post is assumed to be the problem post) in the thread as a solution post, and all others as non-solution posts . Such an initialization along with uniform reply word source probabilities is used to learn the initial es-timates of the S S , T S , S N and T N models to be used in the E-step for the first iteration. We will show that we are able to effectively perform solu-tion identification using our approach by exploit-ing just one structural feature, the post position, as above. However, we will also show that we can exploit other features as and when available, to de-liver higher accuracy clusterings. 4.3.5 Method Summary The overall method comprising the steps that have been described is presented in Algorithm 1. The initialization using the post position (Ref. Sec 4.3.4) is illustrated in Lines 1-5, whereas the EM-iterations form Steps 6 through 12. Of these, the E-step incorporates labeling (Line 8) as de-scribed in Sec 4.3.1 and reply-word source estima-tion (Line 10) detailed in Sec 4.3.2. The models are then re-learnt in the M-Step (Lines 11-12) as outlined in Sec 4.3.3. At the end of the iterations that may run up to 10 times if the labelings do not stabilize earlier, the pairs labeled S are output as identified solutions (Line 13).

Time Complexity: Let n denote |C| , and the number of unique words in each problem and re-ply post be a and b respectively. We will de-note the vocabulary size of problem posts as A and that of reply posts as B . Learning of the language and translation models in each iteration costs O ( nb + B ) and O ( k 0 ( nab + AB )) respec-tively (assuming the translation model learning runs for k 0 iterations). The E-step labeling and source estimation cost O ( nab ) each. For k iter-ations of our algorithm, this leads to an overall complexity of O ( kk 0 ( nab + AB )) . We use a crawl of 140k threads from Apple Dis-prising 1440 posts) were randomly chosen and each post was manually tagged as either solution or non-solution by the authors of (Catherine et al., 2013) (who were kind enough to share the data 0.71. On an average, 40% of replies in each thread and 77% of first replies were seen to be solutions, leading to an F-measure of 53% for our initializa-tion identification, as the primary evaluation mea-sure. While we vary the various parameters sep-arately in order to evaluate the trends, we use a dataset of 800 threads (containing the 300 labeled threads) and set  X  = 0 . 5 and  X  = 0 . 4 unless other-wise mentioned. Since we have only 300 labeled threads, accuracy measures are reported on those (like in (Catherine et al., 2013)). We pre-process the post data by stemming words (Porter, 1980). 5.1 Quality Evaluation In this study, we compare the performance of our method under varying settings of  X  against the only unsupervised approach for solution identi-fication from literature, that from (Cong et al., 2008). We use an independent implementation of the technique using Kullback-Leibler Diver-gence (Kullback, 1997) as the similarity measure between posts; KL-Divergence was seen to per-form best in the experiments reported in (Cong et al., 2008).

Table 3 illustrates the comparative performance ANS CT 40.6 % 88.0 % 55.6 % on various quality metrics, of which F-Measure is typically considered most important. Our pure-LM 13 setting (i.e.,  X  = 1 ) was seen to perform up to 6 F-Measure points better than the pure-TM 14 setting (i.e.,  X  = 0 ), whereas the uniform mix is seen to be able to harness both to give a 1 . 4 point (i.e., 2 . 2% ) improvement over the pure-LM case. The comparison with the approach from (Cong et al., 2008) illustrates that our method is very clearly the superior method for solution identification out-performing the former by large margins on all the evaluation measures, with the improvement on F-measure being more than 25 points.

Comparison wrt Methods from (Catherine et al., 2013): Table 3 also lists the performance of SVM-based methods from (Catherine et al., 2013) that use supervised information for solution iden-tification, to help put the performance of our tech-nique in perspective. Of the two methods therein, ANS CT is a more general method that uses two views (structural and lexical) of solutions which are then co-trained. ANS-ACK PCT is an en-hanced method that requires author-id informa-tion and a means of classifying posts as acknowl-edgements (which is done using additional super-vision); a post being acknowledged by the prob-lem author is then used as a signal to enhance the solution-ness of a post. In the absence of author information (such as may be common in privacy-constrained domains such as medical fo-rums) and extrinsic information to enable identify acknowledgements, ANS CT is the only technique available. Our technique is seen to outperform ANS CT by a respectable margin ( 8 . 6 F-measure points) while trailing behind the enhanced ANS-ACK PCT method with a reasonably narrow 3 . 8 F-measure point margin. Thus, our unsupervised method is seen to be a strong competitor even for techniques using supervision outlined in (Cather-ine et al., 2013), illustrating the effectiveness of LM and TM modeling of reply posts.

Across Iterations: For scenarios where com-putation is at a premium, it is useful to know how quickly the quality of solution identification sta-bilizes, so that the results can be collected after fewer iterations. Figure 1 plots the F-measure across iterations for the run with  X  = 0 . 5 , X  = 0 . 4 setting, where the F-measure is seen to stabilize in as few as 4-5 iterations. Similar trends were ob-served for other runs as well, confirming that the run may be stopped as early as after the fourth it-eration without considerable loss in quality.
Example Estimates from LMs and TMs: In order to understand the behavior of the statistical models, we took the highest 100 entries from both S
S and T S and attempted to qualitatively evalu-ate semantics of the words (or word pairs) corre-sponding to those. Though the stemming made it hard to make sense of some entries, we present some of the understandable entries from among the top-100 in Table 4. The first three entries from T
S deal with connection issues for which adaptor or guest account related solutions are proposed, whereas the remaining have something to do with the mac translator app and rebuilding libraries af-ter an update . The top words from S S include im-perative words and words from solutions to com-mon issues that include actions pertaining to the router or password . 5.2 Varying Parameter Settings We now analyse the performance of our approach against varying parameter settings. In particular, we vary  X  and  X  values and the dataset size, and experiment with some initialization variations.
Varying  X  :  X  is the weighting parameter that indicates the fraction of weight assigned to LMs (vis-a-vis TMs). As may be seen from Figure 2, the quality of the results as measured by the F-measure is seen to peak around the middle (i.e.,  X  = 0 . 5 ), and decline slowly towards either ex-treme, with a sharp decline at  X  = 0 (i.e., pure-TM setting). This indicates that a uniform mix is favorable; however, if one were to choose only one type of model, usage of LMs is seen to be prefer-able than TMs.

Varying  X  :  X  is directly related to the extent of pruning of TMs, in the regularization operation; all values in the alignment vector  X   X  are pruned. Thus, each problem word is roughly allowed to be aligned with at most  X  1 trends from Figure 3 suggests that allowing a prob-lem word to be aligned to up to 2 . 5 solution words (i.e.,  X  = 0 . 4 ) is seen to yield the best performance though the quality decline is graceful towards ei-ther side of the [0 . 1 , 0 . 5] range.

Varying Data Size: Though more data always tends to be beneficial since statistical models ben-efit from redundancy, the marginal utility of ad-ditional data drops to very small levels beyond a point; we are interested in the amount of data beyond which the quality of solution identifica-tion flattens out. Figure 4 suggests that there is a sharp improvement in quality while increasing the amount of data from 300 threads (i.e., 1440 ( p,r ) pairs) to 550 ( 2454 pairs), whereas the in-crement is smaller when adding another 250 pairs (total of 3400 pairs). Beyond 800 threads, the F-measure was seen to flatten out rapidly and stabi-lize at  X  64% .

Initialization: In Apple discussion forums, posts by Apple employees that are labeled with the Apple employees tag (approximately  X  7% of posts in our dataset) tend to be solutions. So are posts that are marked Helpful (  X  3% of posts) by other users. Being specific to Apple forums, we did not use them for initialization in experiments so far with the intent of keeping the technique generic. However, when such posts are initial-ized as solutions (in addition to first replies as we did earlier), the F-score for solution identification for our technique was seen to improve slightly, to 64 . 5% (from 64% ). Thus, our technique is able to exploit any extra solution identifying structural features that are available. We considered the problem of unsupervised so-lution post identification from discussion forum threads. Towards identifying solutions to the prob-lem posed in the initial post, we proposed the us-age of a hitherto unexplored textual feature for the solution identification problem; that of lexical correlations between problems and solutions. We model and harness lexical correlations using trans-lation models, in the company of unigram lan-guage models that are used to characterize reply posts, and formulate a clustering-based EM ap-proach for solution identification. We show that our technique is able to effectively identify solu-tions using just one non-content based feature, the post position, whereas previous techniques in liter-ature have depended heavily on structural features (that are not always available in many forums) and supervised information. Our technique is seen to outperform the sole unsupervised solution identi-fication technique in literature, by a large margin; further, our method is even seen to be competi-tive to recent methods that use supervision, beat-ing one of them comfortably, and trailing another by a narrow margin. In short, our empirical analy-sis illustrates the superior performance and estab-lishes our method as the method of choice for un-supervised solution identification.

Exploration into the usage of translation models to aid other operations in discussion forums such as proactive word suggestions for solution author-ing would be interesting direction for follow-up work. Discovery of problem-solution pairs in cases where the problem post is not known before-hand, would be a challenging problem to address.
