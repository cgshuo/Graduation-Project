 1. Introduction
By definition of Workflow Management Coalition (WfMC), workflow is an automation of a business process, in whole or parts, where documents, information or tasks are passed from one participant to another to be processed, according to a set of procedural rules ( Workflow Management Coalition, 1999 ). The migrating workflow is a new model for workflow management by adopting mobile agent technology ( Cichocki and Rusinkiewicz, 2004 ), in which the mobile agent migrates from one site of network to another in order to achieve workflow goal by using site services. The behavior of mobile agent in the migrating workflow model is similar to people working in moving manner, such as buyers move from shop to shop, information searchers move from library to library, etc.

Traditionally, the workflow management system is con-structed with one or more centralized workflow engines and relied on remote procedure call (RPC) principle ( Workflow Management Coalition, 1999 ). However, the RPC depends on the reliability of network connection and lacks the adaptability to network environment. The mobile agent computing paradigm changes RPC to local procedure call (LPC), that is, a mobile agent moves among sites of network and utilizes the local services to achieve its goal. Except for moving time, a mobile agent does not require any reliability of network connection and can alternate its workplace when the expected site is down or expected service is changed. Therefore, adopting mobile agent technology can bring more flexibility to workflow management.
 2000 ), in the migrating workflow system, the whole process of workflow can be executed by a single mobile agent. But when the size of workflow is increased, i.e., comprising many tasks and branches, the workflow completion time will be prolonged because agent. In such a case, multiple mo bile agent mechanism should be adopted to support execution of parallel tasks in order to improve the workflow system performance ( Feng et al., 2007 ). In such workflow systems, each mobile agent will be responsible for a part of workflow process and fulfill th e workflow goal by cooperating with its partners. To this end, the workflow process needs to be sub-process can be assigned to a mobile agent.
 partition is a primary step for distributed workflow management model and some methods have been obtained so far. We will introduce these approaches as the related works in Section 6 .
Considering the decentralized, loosely coupled and autonomous nature of mobile agent computing paradigm, the mechanism of process partition for migrating workflow is quite different from those methods appropriate for the WfMC model. First, there is no central workflow engine to coordinate the workflow services and mobile agents in a migrating workflow system. Instead, the dominant relations among mobile agents, such as synchroniza-tion of tasks and coordination of service conflicts, have to be handled by the mobile agents themselves. This must be taken into account in the workflow partition. Second, the looped task and logical or-relative tasks, e.g., or-Split and or-Join need not be considered, because a looped task can be executed by one mobile agent in the same workplace, it does not require mobile agent moving; a group of logical or-relative tasks can be treated as a single task with redundancy and left choice to mobile agent. In other words, the migrating workflow partition method must be mobile agent oriented. Finally, QoS objective is also a major aspect to evaluate the performance of workflow applications.
Since the price and time of service may be different among service sites even if they provide same services, thus execution time and cost are usually the main constraints to be considered.
Based on above considerations, this paper proposes an agent-oriented workflow partition approach that partitions the workflow process into a set of sub-processes; each of them consists of a sequence of tasks and will be mapped into a mobile agent. We denote the dominant relations among sub-processes as a tree structure, where nodes represent sub-processes, and upper sub-processes dominate the lower ones in cooperative semantics. After sub-processes are assigned to mobile agents, the dominant rela-tions among the sub-processes will become the cooperative relations among the mobile agents. Based on the structure parti-tion tree, we present two kinds of QoS objective partition method named as minimal cost within a deadline (MCD) and minimal time with a budget (MTB). Due to the sequential structure of sub-processes, a task execution planning method is also proposed by modeling the sequential sub-process as a Markov Decision Process (MDP). The working path for a mobile agent is constructed based on the MDP sub-process planning with QoS objective.

The remainder of this paper is organized as follows. Section 2 gives an overview of migrating workflow framework. The work-flow process partition approach and planning methods are detailed in Sections 3 and 4 , respectively. Section 5 illustrates the experimental results. In Section 6 , we introduce the related works and make some discussion. Section 7 concludes the paper and gives the directions for future work. 2. Migrating workflow framework
In a previous work ( Zeng and Dang, 2003 ), we proposed a migrating workflow framework based on the mobile agent com-puting paradigm and called a mobile agent as a migrating instance (MI). The migrating workflow framework comprises three autonomously and loosely coupled components: 1. A migrating workflow engine used by a workflow manager to define workflow, create, launch and monitor MIs but not coordinate their work. 2. A set of MIs that will fulfill the tasks on behalf of workflow goal using local services of workplace. 3. A set of workplaces that provide run time environment and local services to MIs.

In order to make the semantics of process partition and planning with an expected QoS objective more clearly, the following definitions have been improved in this paper. Definition 2.1. A migrating instance constructed with mobile agent paradigm is a movable proxy of workflow manager on WPath , Code ), where by its partners and workplaces.  X  Tlist is a sequence of tasks with QoS objective such as the limit of payment or execution period.  X  Corr is a set of cooperative relations among the MI and its partners.  X  WD is set of data used or produced by the MI during the execution period.  X  MPath is a sequence of workplaces for executing Tlist .  X  Code is a set of programmed functions to support MI to schedule tasks, cooperate with its partners, interact with its owner, guard safe itself, etc.
 Definition 2.2. A workplace is a site of network provided by a member of workflow coalitions, defined as wp  X  ( wp id , wServ , wState , wMach ), where  X  wp id is the unique identifier of the wp .  X  wServ is a set of workflow services, each service is denoted as ability represented by a number of functions with computing complexity, price and time respectively express the service cost and time spent on a unit task. The two-tuple ( price , time ) reflects the QoS of the wp .  X  wState denotes the current state of workplace while MI is expecting to arrive on it, such as normal, failure, busy or service changed.  X  wMach is the work machine of workplace to support runtime services and workflow services when MI has been arrived on it, the runtime services usually include creation of run time environment, moving in and moving out, communication, safe guard, etc.

For convenience, we use notation n . # to express # is a part of throughout the rest of this paper. For example, wp.wServ denotes the set of service of the workplace wp .

Given a task t , we call that a workplace wp is available to task t if there exists a service serv A wp.wServ that can meet the matching between task t and the service serv . That is, the workplace wp has ability to execute task t . In this paper, we denote the matched service of workplace wp for task t as S According to the definition of workplace, the cost consumed on task t by S t wp is in proportion to the size of task t and S and S t wp . time .

Let WP be the set of all workplaces in the migrating workflow which all of workplaces are available to task t but may have of service ability for task t .

The main steps for a migrating workflow execution are as follows: 1. Define a workflow process with a QoS objective. 2. Partition the workflow process into a set of sub-processes, each sub-process consists of a set of tasks. 3. Distribute the expected QoS objective over the sub-processes. 4. Plan an execution path MPath for each sub-process in terms of its sub-QoS objective. If the sub-QoS objective cannot be reached based on available services, it will be adjusted and redo steps 3 and 4 until a feasible objective is reached; or return QoS invalidation. 5. Create MIs and assign each of the sub-process with an MPath to one MI. 6. Launch and Monitor MIs. 7. Each MI works continuously through moving along MPath and using local services of workplaces, until its goal has been achieved. During work time, an MI will cooperate with its partners as needed. If the expected workplace for executing task t cannot be reached, the MI will select a candidate workplace from WP ( t ) to continue its work; 8. Once all MIs have completed their works and return to their owners, the workflow will be automatically finished. In this case, the workflow manager will gather and evaluate the workflow execution results.

In this paper, we will address the process partition and planning methods but not all of the steps as above. 3. Workflow partition in migrating workflow model
Our workflow partition method includes process structure partition and QoS objective partition. In general, workflow pro-cesses can be classified into two types: structured processes and non-structured processes. A process is structured means that it can be well defined by using sequence, branch and loop sub-structures in the same way as the structured programming languages. Otherwise, it is a non-structured process.
In this paper, we focus on structured workflow partition method and assume no loop 1 in all tasks. In addition, we treat a group of tasks with logical or-relation as one task with redun-dancy because the choice of task can be made by a single MI autonomously in the migrating workflow system. Based on the above assumptions, the structured workflow discussed in this paper consists of two kinds of basic structure: sequential struc-ture and parallel structure. 3.1. Process structure partition
The goal of process structure partition is to divide a structured workflow process into a set of sub-processes. Before discussing the process structure partition method, we give some related definitions at first.
 Definition 3.1. A task of a migrating workflow is an atomic  X  t id is the unique identifier of the task.  X  tSize is the size of the task, which is calculated by a number of execution functions with computing complexity for complet-ing this task.  X  tIn is a set of input data to start the task.  X  tOut is a set of output data produced when the task has been completed. more than one successor. A Join task has more than one precedent. A Simple task has only one precedent and one successor.

Definition 3.2. A workflow process is defined as P  X  ( T , L , Q ), where starts from a basic structure, such as Fig. 3.1 (a), and repeatedly replaces one of its tasks with a new basic structure to refine the defined structure as need, as Fig. 3.1 (b) and (c). A process generated by this method can be graphically represented as a
Directed Acyclic Graph (DAG) in which vertexes express the tasks and directed arcs express the ordered relation between the tas, where k is the number of tasks. According to Definition 3.2 , there is only one node whose in-degree equals to zero and one node whose out-degree equals to zero within the DAG.

Definition 3.3. Given a process P ,a sub-process of P is defined as ^
P  X  X  ^ P id , ST , SQ  X  , where tuple ( L , R ), where relation satisfies transitivity, that is, 8 ^ P i , ^ P j ^ P j x ^ P k , then ^ P i x ^ P k .

Definition 3.5. The granularity of a sub-process ^ P is defined as the sum of size of tasks contained in ^ P , that is G  X  ^ P  X  X  migrating workflow with multiple parallel sub-processes is mainly depended on the sub-processes that have larger execution complexity. So, assuring the timely completion of the sub-process with larger complexity is more important if there are some conflicts of service between two sub-processes.

Given a DAG of process P , the main idea of process structure of DAG (or sub-DAGs) from the start task to the end task, and then separate the obtained critical path from the remained sub-DAGs until the DAG has been completely partitioned (as Fig. 3.2 (a) and in Definition 3.1 and each critical path indicates a sub-process. The algorithm of structure partition is described as follows. Algorithm 3.1. Process Structure Partition Input: the DAG of a workflow process P .
 Output: the structure partition ( L , R ) of the process P .
Begin (1) { Initialize L  X  f , R  X  f ; (2) Let dominator  X  NULL; (3) StruPart ( P ); (4) Output ( L , R ); (5) }End (6) StruPart( cur_graph ) (7) { Generate a sub-process ^ P which is a critical path of (8) Let R  X  R [f o dominator , ^ P 4 g ; (9) Let L  X  L [f ^ P g ; (10) Separate ^ P from cur_graph , leaving a set of sub-graphs (11) For each P i in O (12) { Let dominator  X  ^ P ; (13) StruPart( P i ) ; (14) }EndFor (15) }
From Algorithm 3.1 , we can observe the following character-istics of process structure partition: 1. A process is partitioned level by level from a DAG to a group of parallel branches (sub-process), each branch consists of a sequence of tasks. Particularly, we call the first sub-process, which is a critical path of the original workflow P , the main sub-process, denoted as ^ P 1 . { ^
P t , t 5 , t 13 and t 23 in Fig. 3.2 (a). 3. The number of sub-processes in L is not less than the width of DAG, that is, the maximum number of parallel branches in
DAG. For example, the width of process P in Fig. 3.2 (a) is 4. 4. 8 ^
P task ^ P i : t q such that  X  / ^ P i : t p , ^ P j : t 1 S respectively. In this case, we say ^ P j is a synchronous branch of
P i .Asshownin Fig. 3.2 (b), since / ^ P 1 , ^ P 2 S A R ,thereis  X  / ^ P 1 : t 2 , ^ P 2 : t 12 S A P : L  X  4  X  / ^ P 2 : t synchronous branch of ^ P 1 . During workflow execution, all of synchronous relations should be handled at the point of Join task by MI autonomously.

To describe the dominant relation between the sub-processes more intuitively, we denote the two-tuple ( L , R ) as a tree structure defined as follows.
 which nodes represents the sub-processes, and arcs represents the dominant relations among the sub-processes. The set of nodes and arcs are mapped to L and R , respectively, and satisfy the following conditions: maximum granularity of all sub-processes. ( i a j ) satisfying / ^ P i , ^ P j S A R . of PTree ( P ), denoting such sub-tree as PTree  X  ^ P i  X  . 4. The level of a node ^ P in PTree ( P ), denoted as L ( the dominant rank of ^ P , which is defined as
L  X  ^ P  X  X  An example of partition tree is shown as Fig. 3.2 (c).
In a multiple MIs system, the actions of MIs must satisfy the and ^ P 2 is assigned to MI 2 ,since ^ P 1 x ^ P 2 , thus MI MI may be some competition for serving between MI 1 and MI 2 case, MI 1 will have higher priority. Before a Join task in therewillbeasynchronizationbetween MI 1 and MI 2 .Thatis,the dominant and synchronous relations between sub-processes lead to the cooperative relations between MIs.
 has the same Split precedent and Join successor in the original workflow process.

For example, in Fig. 3.2 (b), Con  X  ^ P 3 9 ^ P 1  X  X  X  t 8  X  X  t 16 , t 17 , t 18  X  . Particularly, we define Con  X  ^ fine-grain sub-process, thus fine-grain sub-processes should be avoided in the structure partition. To this end, we set a basic granularity threshold G before partitioning. When a sub-process .
 executed sequentially. However, it can greatly decrease the number of MI and improve the execution efficiency of the whole workflow. 3.2. QoS objective partition This paper focuses on two kinds of QoS objectives, namely, Minimum execution Cost within a Deadline (MCD) and Minimum execution Time with a Budget (MTB). To this end, the QoS objective the QoS objective of the whole workflow will be automatically prior step performed before sub-process planning. If an expected deadline or budget cannot be reached in the planning, e.g., the expected deadline is too short to meet, then an adjustment should be made so as to get a more feasible QoS objective. 3.2.1. Deadline partition partition is to allocate D to all of sub-processes. Let D  X 
P t t  X  P 2  X  P 3  X  P 4  X 
P t taken in terms of deadline assignment: 1. D 2. If / ^ P i , ^ P j S A R , then D sub  X  ^ P j  X  X  D sub  X  Con  X  3. If G  X  ^ P a  X  4 G  X  ^ P b  X  , then D sub  X  ^ P a  X  4 D proportional to granularity G  X  ^ P  X  .

The main idea of deadline partition method is based on the preorder traversal of the partition tree PTree ( P ). Since
D  X  ^
P 1  X  X  D , each subordinate sub-process ^ P i of ^ P 1 will be
G  X  ^ P  X  . By this means, the sub-deadline of each sub-process in Algorithm 3.2 .
 Algorithm 3.2. Deadline partition Input: PTree ( P ) and the expected deadline D of P. Output: D sub  X  ^ P i  X  , ^ P i A PTree  X  P  X  .

Begin (1) { DPart ( ^ P 1 , D ); (2) Output f D sub  X  ^ P i  X  9 ^ P i A PTree  X  P  X g ); (3) } End (4) DPart( node, deadline ) (5) { If ( node !  X  NULL) (6) { Let node 0  X  node ; (7) Let dline  X  D sub ( node ); (8) Let node  X  FirstChild( nod e) (9) If ( node  X  ^ P 1 ) (10) Let D sub ( node )  X  D ; (11) Else (12) Let D sub ( node )  X  G ( Con ( node )) deadline / G ( node (13) While( node !  X  NULL) Do (14) { DPart ( node , dline ); (15) Let node  X  NextSlibling( node ); (16) }EndDo (17) Let node  X  node 0 ; (18) Let deadline  X  dline ; (19) }EndIf (20) } 3.2.2. Budget partition
Given an expected budget B of workflow process P , the goal of the partition method to budget is different from that to deadline.
For example, the deadline of a group of parallel sub-processes should be the maximum deadline of the individual sub-processes, but the budget of a group of parallel sub-process must be the sum ^
P to be allocated. The following policies have to be adopted for budget assignment 1. P 2. If G  X  ^ P i  X  4 G  X  ^ P j  X  , then B sub  X  ^ P i  X  4 B tional to G  X  ^ P  X  .

Based on above policies, the budget B can be allocated to all of sub-processes in proportion to their granularity. That is
B  X  ^
P i  X  X  B  X  G  X  ^ P i  X  = 4. Sub-process execution planning
The goal of sub-process execution planning is to find a sequence of workplaces for all tasks in a sub-process with a partitioned sub-QoS objective, and make these sequential work-places as the working path of an MI. Because the transition probability of MI from finishing the current task to starting the next one depends only on the current state of execution, and not the history of earlier tasks and workplaces, thus we can model the execution of sub-process as a Markov Decision Process (MDP).
In this section, we will give the sub-process execution plan-ning method with MTB policy. Thanks to the sequential structure of sub-processes, the planning method with MCD policy can be treated in a similar way.
 Definition 4.1. A Markov Decision Process for sub-process planning with MTB-based QoS objective is a tuple ( SG , S , A , V , PR ), where  X  SG is a sequence of execution stages of ^ P , sg A SG expresses a time when MI completes the current task t and intends to execute the next task t 0 .  X  S is a set of possible states of the execution of ^ P . For each the remained budget for ^ P going on ( Yu, 2007 ).
MI accomplishes the current task t with RB by selecting a workplace from WP ( t ). where wp is the selected workplace for the task s.t . Considering the budget constraint, s 0 .RB 4 0 has to be assured at every stage. So we have: v  X  s : t , wp , s 0 : t  X  X   X  PR : S A -S is a state transition function, pr ( s 0 9 transition probability from state s to state s 0 by taking action a A A. According to the definitions of state and action, pr ( s 0 can be considered as the transition probability of MI from workplace from WP ( t ). Suppose that 8 t A ^ P , WP ( t ) have p  X  s 0 9 s , a  X  X 
By above definition, the goal of MTB based sub-process execution planning is to find an optimal policy mapping from tasks to workplaces with the minimal time. To achieve the optimal policy, we employ value iteration ( Richard and Andrew, 1998 ) and give the MDP based planning algorithm shown as follows.
 Algorithm 4.1. Sub-process planning with MTB objective
Input: a sub-process ^ P with ^ P : ST  X f t 1 , t 2 , ... , t budget B for ^ P , and a set of workplaces WP  X [ n i  X  1 WP  X  t  X  . Assumption: 8 t A ^ P , WP  X  t  X  a f .
 Output: an optimal planning policy P : ^ P : ST -WP .
Begin (1) { Define MAX as a large number; (2) Initialize p ( t i )  X  NULL for each t i A ^ P : ST ; (3) If ( MTBPlan ( n , B ) Z MAX) (4) Output  X  X  X he Budget cannot be met. X  X  (5) Else (6) Output p ( t i ) for each t i A ^ P : ST ; (7) }End (8) MTBPlan ( m , RB ) (9) { Let i  X  m and total_time  X  0; (10) If ( RB o 0) (11) Return MAX ; (12) Else (13) {If ( i  X  1) (14) { Let p  X  t i  X  X  argmin (15) Let total _ time  X  S t i p  X  t (16) } EndIf (17) Else (19) Return total_time ; (20) }EndElse (21) } 5. Experiments
To our knowledge, there is no comparable test bench for migrating workflow methods and a general approach is generat-ing test cases randomly ( H  X  onig and Schiffmann, 2005 ). We developed a random DAG generator to generate the structured workflow process and brought it into our migrating workflow platform ( Wu and Zeng, 2010 ), in which, 10 machines were attended and each machine armed with 10 to 10 service simula-tors. The service simulators were served as workplaces. 5.1. Test of process structure partition algorithm
The first purpose of the experiments is to evaluate the performance of Algorithm 3.1 by comparing the execution time in two situations, i.e., partition (the workflow executed by multi-ple MIs) and non-partition (the workflow executed by a single MI). To generate experimental workflow cases, three key para-meters were considered, namely:  X  Process size Ps , the number of nodes of DAG, in which, each node represents a task.  X  Process width Pw , the maximal number of parallel branches of
DAG, which implies the number of MIs used in experiments.  X  Process length Pl , the length of longest branch of DAG, which indicates the sub-process expressed by the root of the parti-tion tree PTree ( P ).
 As to the inputs of random DAG generator, the process width Pw was set to 4, the process size Ps varied from 10 to 80, the process length Pl was generated randomly within the range [ Ps /3, Ps /2]. The size of tasks and the directed edge between two nodes were randomly generated.

In the first situation, we ran the structure partition algorithm to divide each of the DAGs into 4 sub-processes and assigned them to 4 MIs. In the second situation, we directly assigned the same DAG to one MI to execute each of the parallel tasks serially. The execution time was measured from structure partition (or from assigning the DAG to an MI in the second situation) to all of the tasks completion. Each DAG was run 10 times in both situations. The average results were shown in Fig. 5.1 . There is an obvious advantage of the workflow execution time with structure partition compared to without partition, especially when the process size is getting larger. 5.2. Test of the sub-process planning algorithm with MTB and MCD policies effects of MDP-based planning algorithm with MTB (MTB  X  MDP planning) and MCD (MCD  X  MDP planning) objectives. To simu-late the sub-process partitioned by Algorithm 3.1 , we randomly created sequential-structured workflow cases with given dead-lines or budgets as the QoS objectives. We run the proposed sub-process planning algorithm and compared the performance with that of three other algorithms: Greedy-cost, Greedy-time and
Particle Swarm Optimization (PSO). The Greedy-time algorithm selects the workplace with the minimum service time at all execution stages, whereas the Greedy-cost algorithm chooses the workplace with the lowest service price. In the PSO algorithm, feasible planning solution, where x i,j represented a selected available workplace, n is the number of task. Each of the feasible solutions had to meet the given deadline or budget constraint.
The optimal solution with minimal execution time or cost was generated by iterating and updating the population.

The inputs were set as follows. The number of tasks was set to of payment, and the deadline varies from 80 to 150 unit of time.
For the PSO, the initial population size was set to 40, and the value of maximum iterations was set to 80. Each test case was run 10 times.

Fig. 5.2 shows the comparison of MTB  X  MDP planning with the other three algorithms. As shown in Fig. 5.2 (a), the Greedy-is higher and exceeds the budget requirements especially when
Greedy-time is always over 200 even though the budget is far less than 200. The execution time of MTB  X  MDP and PSO are decreased as the budget is relaxed and can both satisfy the budget constraint, but MTB  X  MDP is superior to PSO in means of execution time if the budget is same (as Fig. 5.2 (a)).
Fig. 5.3 compares the deadline constrained execution time and the cost of MCD  X  MDP planning with the other three algorithms.
As shown in Fig. 5.3 (a), the Greedy-cost is the most economical approach but it spends the maximal time and exceeds the dead-line constraint especially when the deadline is short. For example, in Fig. 5.3 (b), the execution time of Greedy-cost was always over 140 even though the deadline was far less than 140. The execu-tion costs of MCD  X  MDP and PSO are reduced as the deadline is relaxed and can both satisfy the deadline constraints. But with the same deadline, MTB is superior to PSO in means of cost. 6. Related works and discussions
Process partition is a primary step for workflow management and a number of methods have been proposed so far. We mention a few of them as follows.

Based on workflow network modeling methods, Tan and Fan (2005, 2007) proposed a Petri net-based approach to a static and a dynamic workflow fragmentations. Their static method partitions a centralized workflow model (CWF-net) into fragments by duplicating the places (sites) shared by transitions (tasks). Since there are many factors influencing the fragmentation policy and the fire rules must be updated as the place duplicates, this method is quite complication in practice. Their dynamic method partitions a workflow into fragments site by site as the workflow it is hard to assure the whole fragment to be executed at a single site. In addition, separating the fragments from the remaining process by site users is also hard to ensure the global semantic consistency of workflow.

Aimed at web service application, Nanda and Karnik (2003) and Nanda et al. (2004) treated a composite web service as a Program Dependence Graph (PDG) and proposed a PDG-based approach to partition all of the tasks into a set of workflow components. The objective of their approach is to minimize the number of inter-component messages among workflow compo-nents. With the increasing of wireless applications, Baresi et al. (2004) and Maurino and Modafferi (2005) proposed a method to partition a BPEL4WS workflow into several local workflows. The aim of this method is to adapt mobile business process to different devices in which each local workflow is governed by a controller. Their method is divided into two phases. In the first phase, the synchronization tasks of the whole BPEL4WS schema are identified and assigned to a given controller to manage the control flow delegation. In the second phase, a local process view is created for each controller to know its tasks. Both of the above approaches decentralize the process execution but limit the partition algorithm in code level. Liu et al. (2005) gave a role-based approach to partition the global process model of a composite service into local process models according to partici-pants X  roles. Their approach distributes the control logic of a composite service and corresponding execution load into multiple nodes. But they did not give the policy of the participants X  role, especially, how to handle the conflict between roles if one participant possesses multiple roles.

In the scientific Grid workflow applications, Singh et al. (2008) and Deelman (2010) employed the level-and label-based task clustering techniques to minimize the completion time of a workflow. According to their approach, the jobs of workflow with the same level in the workflow DAG or the same label given by the designer were grouped into clusters so that each cluster can be executed as a single task. But labeling tasks by designer may be laborious especially when the number of tasks is getting larger. Feng et al. (2007) proposed a DAG-based sub-job grouping method by removing indirect successors to generate spanning tree, pre-order traversing the spanning tree, grouping the visit node sequence and labeling the edges between sub-jobs with one of the three types. The advantage of this method is easy to perform. However, simply identifying the node (task) as an integer loses the task execution requirements as well as QoS constraints and thus is not suitable for business process manage-ment. In addition, dividing the visit node sequence by leaves cannot assure the uniqueness of partition and may result in alone task fragments. In general, it is inefficient for a mobile agent to fulfill only a single task. Yu et al. (2005, 2007) proposed a QoS-based approach to schedule tasks in  X  X  X ay-per-use X  X  service Grids so as to minimize execution cost while meeting the time 0 20 40 60 80 100 120 140 160 Execution Time 0 20 40 60 80 100 120 140 160 180 200 Execution Cost constraints. The main idea of this method is to identify task branches in the workflow DAG and distribute the overall deadline into every task according to a set of specific policies. Since each branch consists of several sequential tasks, a task scheduling method for branches is given by modeling the branch execution as a Markov Decision Process. The QoS concept and MDP planning method of this paper are referred to Yu X  X  work. The main differences between Yu X  X  work and this paper are as follows. First, Yu X  X  method aimed to solve the task scheduling problem by end-user or utility-provider on the Grid. End-users can use the approach to orchestrate Grid services, while utility providers can outsource computing resources to meet customers X  service-level requirements. However, Yu X  X  method is a centralized scheduling mechanism. Our work is based on decentralized mobile agent technology, paying more attention to the dominant relations among the sub-processes. Correspondingly, we proposed a con-cept of partition tree to handle the dominant relations and QoS partition constraints. Second, Yu X  X  work only considered the minimization of execution cost while meeting the time con-straints. Our work addresses not only the minimum execution cost within a deadline, but also the minimum execution time with a budget. Additionally, we give the definition of MDP based sub-process planning with MTB objective and detail the MDP based planning algorithm as well. Finally, it was not clear how Yu defined critical path in their task partition graph. Since the execution time or cost of a task is proportional to the task size, process management. 7. Conclusion and future works
As we stressed before, our work is aimed to partition the structured workflow with QoS constraints into a set of sub-processes with dominant relation so that the sub-processes can be executed by the MIs in cooperative way. Although there are still many non-structured workflow applications, structured workflow is proved to be superior in supporting flexible and dynamic workflow definition because it greatly simplifies the Additionally, structured workflow is also the most type used in practices, such as administrative workflow and production work-flow applications.
 The main contributions of this paper are as follows. (1) The DAG-based workflow partition method for migrating workflow management is proposed. The method is combined process structure partition with QoS constraints partition. The former partitions the whole workflow into a set of sub-processes and each sub-process consists of a sequence of tasks, and the latter distributes the workflow QoS objective over all of sub-processes according to the expected execution time or payment; (2) The concept of partition tree is put forward. Deferent from the spanning tree of the DAG, the partition tree is constructed with partitioned sub-processes and dominant relations among them. The partition tree is useful to perform the QoS constraints on sub-processes and coordinate the service conflict between MIs; (3) The MDP-based sub-process planning method with the MCD or MTB objective is given. The results of simulated experiments show that the feasibility and effectiveness of our partition and planning methods.

To make the migrating workflow management more flexible, in the near future, we will further enhance our research to process dynamic partition and QoS constrained planning approach. Addi-tionally, we will pay attention to the unstructured and dynami-cally-defined workflow partition and execution planning. Acknowledgment
China (Grant no. 60573169) and the Natural Science Foundation of Shandong Province of China (Grant no. ZR2009GM021). References
