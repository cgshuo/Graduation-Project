 Although pair programming is becoming more prevalent in software development, and a number of reports have been written about it [4] [6], few have addressed the manner in which pairing actually takes place [5]. Even fewer consider the met hods employed to manage issues such as role change or the communication of complex issues. Here we contribute by highlighting the way resources designed for individuals are re-appropriated and augmented to facilitate pair collaboration Programming techniques, computing methodologies.
 Keywords: Extreme programming, pair programming, collaborative software development, ethnography. commercial world and has been formalised as  X  X air programming X  where  X  X ll production code is written with two people working at one machine X  [1]. Two roles have been identified, the  X  X river X , who is currently controlling the computer, and the  X  X avigator X , who contributes verbally (and subtly in other ways, as shown). pair programming (e.g. [3] [8] [10] [11) however, none have closely considered how the roles of driver and navigator are dynamically realised and facilitated by the artifacts, environment and language used by the programming pair. highlight how pair programming is practically accomplished. It focuses on how tools are re-purposed and used alongside dialogue to facilitate role management and communication. The data were collected from four, one-week studies of experienced pair programmers (with at least six month X  X  continual commercial experience) in four companies. The studies took place in the workplace, with the programmers working on typical tasks in their usual environment. 36 one-hour sessions were observed, transcribed and analysed. using agreement protocols normally reserved for conversations (e.g.  X  X mmn X  or  X  X h huh X ). An example is: The distributed cognition afforded by this representation often led to underspecified statements, as reported elsewhere [5]. An example is: On three of the projects seen, soft toys were used as tokens. A programming pair would collect the toy and place it on top of their terminal to indicate that they were currently loading new code onto the integration machine. Essentially these tokens were an informal  X  X ocking mechanism X . Their effectiveness relied entirely on members of the project understanding and conforming to their rules of use. This is particularly interesting as some other, more formal, technology based locking mechanism might just as easily have been put in place. It is also contrary to an example in Rogers and Ellis [12], showing that software developers were inconsistent in their use of a manual whiteboard for file locking as this was extraneous to the work activities they were involved in. In keeping with a number of studies in the field of CSCW (e.g. [7] [13]), the physical presence of the toy and its manipulation may alert others to peripheral events which might be of interest (here use of the integration machine). This is consistent with studies of news rooms, police operations, traffic control centres and operating theatres [7] in which participants were seen to  X  X esign and produce actions to render features of their conduct selectively available to others X  . Robertson [13] stresses the human ability of peripheral awareness as particularly pertinent. In pair programming teams, each team member is given the opportunity to notice the change in integration machine control by the developer walking over and retrieving the developer X  X  monitor makes it continually available to the rest of the team. The re-appropriation and augmentation of solo tools suggests programming pairs have extra requirements from their workstations and environments. While this  X  X e-purposing X  shows ingenuity and flexibility on the part of the programmers, it suggests that there is scope for the design of more specialised tools for use when pair programming in a collocated manner, providing specifically tailored tools for collocated collaborative software development rather than shoe-horning existing resources into collaborative use. This work was undertaken as part of DPhil research funded by the EPSRC. The authors would also like to thank the BBC iDTV project, BNP Paribas, EGG and LogicaCMG. 
