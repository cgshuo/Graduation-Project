 Probabilistic topic models, as exemplified by prob-abilistic latent semantic indexing (Hofmann, 1999) and latent Dirichlet allocation (LDA) (Blei et al., 2003) are unsupervised statistical techniques to dis-cover the thematic topics that permeate a large cor-pus of text documents. Topic models have had con-siderable application beyond natural language pro-cessing in computer vision (Rob et al., 2005), bi-ology (Shringarpure and Xing, 2008), and psychol-ogy (Landauer et al., 2006) in addition to their canon-ical application to text.

For text, one of the few real-world applications of topic models is corpus exploration. Unannotated, noisy, and ever-growing corpora are the norm rather than the exception, and topic models offer a way to quickly get the gist a large corpus. 1
Contrary to the impression given by the tables shown in topic modeling papers, topics discovered by topic modeling don X  X  always make sense to os-tensible end users. Part of the problem is that the objective function of topic models doesn X  X  always cor-relate with human judgements (Chang et al., 2009). Another issue is that topic models  X  with their bag-of-words vision of the world  X  simply lack the nec-essary information to create the topics as end-users expect.

There has been a thriving cottage industry adding more and more information to topic models to cor-rect these shortcomings; either by modeling perspec-tive (Paul and Girju, 2010; Lin et al., 2006), syn-tax (Wallach, 2006; Gruber et al., 2007), or author-ship (Rosen-Zvi et al., 2004; Dietz et al., 2007). Sim-ilarly, there has been an effort to inject human knowl-edge into topic models (Boyd-Graber et al., 2007; Andrzejewski et al., 2009; Petterson et al., 2010).
However, these are a priori fixes. They don X  X  help a frustrated consumer of topic models staring at a collection of topics that don X  X  make sense. In this paper, we propose interactive topic modeling (ITM), an in situ method for incorporating human knowl-edge into topic models. In Section 2, we review prior work on creating probabilistic models that incorpo-rate human knowledge, which we extend in Section 3 to apply to ITM sessions. Section 4 discusses the implementation of this process during the inference process. Via a motivating example in Section 5, simu-lated ITM sessions in Section 6, and a real interactive test in Section 7, we demonstrate that our approach is able to focus a user X  X  desires in a topic model, better capture the key properties of a corpus, and capture diverse interests from users on the web. At a high level, topic models such as LDA take as input a number of topics K and a corpus. As output, a topic model discovers K distributions over words  X  the namesake topics  X  and associations between documents and topics. In LDA both of these out-puts are multinomial distributions; typically they are presented to users in summary form by listing the elements with highest probability. For an example of topics discovered from a 20-topic model of New York Times editorials, see Table 1.

When presented with poor topics learned from data, users can offer a number of complaints: 2 these documents should have similar topics but don X  X  (Daum  X  e III, 2009); this topic should have syn-tactic coherence (Gruber et al., 2007; Boyd-Graber and Blei, 2008); this topic doesn X  X  make any sense at all (Newman et al., 2010); this topic shouldn X  X  be associated with this document but is (Ramage et al., 2009); these words shouldn X  X  be the in same topic but are (Andrzejewski et al., 2009); or these words should be in the same topic but aren X  X  (Andrzejewski et al., 2009).

Many of these complaints can be addressed by using  X  X ust-link X  constraints on topics, retaining An-drzejewski et al X  X  (2009) terminology borrowed from the database literature. A  X  X ust-link X  constraint is a group of words whose probability must be correlated in the topic. For example, Figure 1 shows an example constraint: { plant, factory } . After this constraint is added, the probabilities of  X  X lant X  and  X  X actory X  in each topic are likely to both be high or both be low. It X  X  unlikely for  X  X lant X  to have high probability in a topic and  X  X actory X  to have a low probability. In the next section, we demonstrate how such constraints can be built into a model and how they can even be added while inference is underway.

In this paper, we view constraints as transitive; if  X  X lant X  is in a constraint with  X  X actory X  and  X  X actory X  is in a constraint with  X  X roduction, X  then  X  X lant X  is in a constraint with  X  X roduction. X  Making this as-sumption can simplify inference slightly, which we take advantage of in Section 3.1, but the real reason for this assumption is because not doing so would introduce ambiguity over the path associated with an observed token in the generative process. As long as a word is either in a single constraint or in the general vocabulary, there is only a single path. The details of this issue are further discussed in Section 4. As discussed above, LDA views topics as distribu-tions over words, and each document expresses an admixture of these topics. For  X  X anilla X  LDA (no con-straints), these are symmetric Dirichlet distributions. A document is composed of a number of observed words, which we call tokens to distinguish specific observations from the more abstract word (type) as-sociated with each token. Because LDA assumes a document X  X  tokens are interchangeable, it treats the document as a bag-of-words, ignoring potential relations between words.

This problem with vanilla LDA can be solved by encoding constraints, which will  X  X uide X  different words into the same topic. Constraints can be added to vanilla LDA by replacing the multinomial distri-bution over words for each topic with a collection of tree-structured multinomial distributions drawn from a prior as depicted in Figure 1. By encoding word distributions as a tree, we can preserve conjugacy and relatively simple inference while encouraging correlations between related concepts (Boyd-Graber et al., 2007; Andrzejewski et al., 2009; Boyd-Graber and Resnik, 2010). Each topic has a top-level dis-tribution over words and constraints, and each con-straint in each topic has second-level distribution over the words in the constraint. Critically, the per-constraint distribution over words is engineered to be non-sparse and close to uniform. The top level distri-bution encodes which constraints (and unconstrained words) to include; the lower-level distribution forces the probabilities to be correlated for each of the con-straints.

In LDA, a document X  X  token is produced in the generative process by choosing a topic z and sam-pling a word from the multinomial distribution  X  z of topic z . For a constrained topic, the process now can take two steps. First, a first-level node in the tree is selected from  X  z . If that is an unconstrained word, the word is emitted and the generative process for that token is done. Otherwise, if the first level node is constraint l , then choose a word to emit from the constraint X  X  distribution over words  X  z,l .
More concretely, suppose for a corpus with M documents we have a set of constraints  X  . The prior structure has B branches (one branch for each word not in a constraint and one for each constraint). Then the generative process for constrained LDA is:
In this model,  X  ,  X  , and  X  are Dirichlet hyperpa-rameters set by the user; their role is explained below. 3.1 Gibbs Sampling for Topic Models In topic modeling, collapsed Gibbs sampling (Grif-fiths and Steyvers, 2004) is a standard procedure for obtaining a Markov chain over the latent variables in the model. Given certain technical conditions, the stationary distribution of the Markov chain is the posterior (Neal, 1993). Given M documents the state of a Gibbs sampler for LDA consists of topic assignments for each token in the corpus and is rep-resented as Z = { z 1 , 1 ...z 1 ,N each iteration, every token X  X  topic assignment z d,n is resampled based on topic assignments for all the tokens except for z d,n . (This subset of the state is denoted Z  X  ( d,n ) ). The sampling equation for z d,n is where T d,k is the number of times topic k is used in document d , P k,w w d,n is assigned to topic k , and  X  ,  X  are the hyperpa-rameters of the two Dirichlet distributions, and B is the number of top-level branches (this is the vocab-ulary size for vanilla LDA). When a dot replaces a subscript of a count, it represents the marginal sum over all possible topics or words, e.g. T d,  X  = P k T d,k The count statistics P and T provide summaries of the state. Typically, these only change based on as-signments of latent variables in the sampler; in Sec-tion 4 we describe how changes in the model X  X  struc-ture (in addition to the latent state) can be reflected in these count statistics.

Contrasting with the above inference is the infer-ence for a constrained model. (For a derivation, see Boyd-Graber, Blei, and Zhu (2007) for the general case or Andrzejewski, Zhu, and Craven (2009) for the specific case of constraints.) In this case the sampling equation for z d,n is changed to p ( z d,n = where P k,w strained word w d,n appears in topic k ; P k,l is the number of times any word of constraint  X  l appears in appears in constraint  X  l in topic k ; V is the vocabu-lary size; C l is the number of words in constraint  X  l . Note the differences between these two samplers for constrained words; however, for unconstrained LDA and for unconstrained words in constrained LDA, the conditional probability is the same.

In order to make the constraints effective, we set the constraint word-distribution hyperparameter  X  to be much larger than the hyperparameter for the distribution over constraints and vocabulary  X  . This gives the constraints higher weight. Normally, esti-mating hyperparameters is important for topic mod-eling (Wallach et al., 2009). However, in ITM, sam-pling hyperparameters often (but not always) undoes the constraints (by making  X  comparable to  X  ), so we keep the hyperparameters fixed. For a static model, inference in ITM is the same as in previous models (Andrzejewski et al., 2009). In this section, we detail how interactively changing constraints can be accommodated in ITM, smoothly transitioning from unconstrained LDA (n.b. Equa-tion 1) to constrained LDA (n.b. Equation 2) with one constraint, to constrained LDA with two constraints, etc.

A central tool that we will use is the strategic unas-signment of states, which we call ablation (distinct from feature ablation in supervised learning). As described in the previous section, a sampler stores the topic assignment of each token. In the implemen-tation of a Gibbs sampler, unassignment is done by setting a token X  X  topic assignment to an invalid topic (e.g. -1, as we use here) and decrementing any counts associated with that word.

The constraints created by users implicitly signal that words in constraints don X  X  belong in a given topic. In other models, this input is sometimes used to  X  X ix, X  i.e. deterministically hold constant topic as-signments (Ramage et al., 2009). Instead, we change the underlying model, using the current topic assign-ments as a starting position for a new Markov chain with some states strategically unassigned. How much of the existing topic assignments we use leads to four different options, which are illustrated in Figure 2. All We could revoke all state assignments, essen-tially starting the sampler from scratch. This does not allow interactive refinement, as there is nothing to enforce that the new topics will be in any way consistent with the existing topics. Once the topic assignments of all states are revoked, the counts for T , P and W (as described in Section 3.1) will be zero, retaining no information about the state the user observed.
 Doc Because topic models treat the document con-text as exchangeable, a document is a natural context for partial state ablation. Thus if a user adds a set of words S to constraints, then we have reason to sus-pect that all documents containing any one of S may have incorrect topic assignments. This is reflected in the state of the sampler by performing the U NAS -SIGN (Algorithm 1) operation for each word in any document containing a word added to a constraint. Algorithm 1 U NASSIGN ( d,n,w d,n ,z d,n = k )
This is equivalent to the Gibbs2 sampler of Yao et al. (2009) for incorporating new documents in a streaming context. Viewed in this light, a user is using words to select documents that should be treated as  X  X ew X  for this refined model.
 Term Another option is to perform ablation only on the topic assignments of tokens whose words have added to a constraint. This applies the unassignment operation (Algorithm 1) only to tokens whose corre-sponding word appears in added constraints (i.e. a subset of the Doc strategy). This makes it less likely that other tokens in similar contexts will follow the words explicitly included in the constraints to new topic assignments.
 None The final option is to move words into con-straints but keep the topic assignments fixed. Thus, P and W change, but not T , as described in Algo-rithm 2. 3 This is arguably the simplest option, and in principle is sufficient, as the Markov chain should find a stationary distribution regardless of the starting position. In practice, however, this strategy is less interactive, as users don X  X  feel that their constraints are actually incorporated in the model, and inertia can keep the chain from reflecting the constraints. Algorithm 2 M OVE ( d,n,w d,n ,z d,n = k,  X  l )
Regardless of what ablation scheme is used, after the state of the Markov chain is altered, the next step is to actually run inference forward, sampling assignments for the unassigned tokens for the  X  X irst X  time and changing the topic assignment of previously assigned tokens. How many additional iterations are required after adding constraints is a delicate tradeoff between interactivity and effectiveness, which we investigate further in the next sections. To examine the viability of ITM, we begin with a qualitative demonstration that shows the potential usefulness of ITM. For this task, we used a corpus of about 2000 New York Times editorials from the years 1987 to 1996. We started by finding 20 initial topics with no constraints, as shown in Table 1 (left). Notice that topics 1 and 20 both deal with Russia. Topic 20 seems to be about the Soviet Union, with topic 1 about the post-Soviet years. We wanted to combine the two into a single topic, so we created a constraint with all of the clearly Russian or Soviet words ( boris, communist, gorbachev, mikhail, russia, russian, soviet, union, yeltsin ). Running inference forward 100 iterations with the Doc ablation strat-egy yields the topics in Table 1 (right). The two Russia topics were combined into Topic 20. This combination also pulled in other relevant words that not near the top of either topic before:  X  X oscow X  and  X  X elations. X  Topic 1 is now more about elections in countries other than Russia. The other 18 topics changed little.

While we combined the Russian topics, other re-searchers analyzing large corpora might preserve the Soviet vs. post-Soviet distinction but combine topics about American government. ITM allows tuning for specific tasks. Next, we consider a process for evaluating our ITM using automatically derived constraints. These con-straints are meant to simulate a user with a predefined list of categories (e.g. reviewers for journal submis-sions, e-mail folders, etc.). The categories grow more and more specific during the session as the simulated users add more constraint words.

To test the ability of ITM to discover relevant subdivisions in a corpus, we use a dataset with pre-defined, intrinsic labels and assess how well the dis-covered latent topic structure can reproduce the cor-pus X  X  inherent structure. Specifically, for a corpus with M classes, we use the per-document topic dis-tribution as a feature vector in a supervised classi-
Topic Words
Topic Words fier (Hall et al., 2009). The lower the classification error rate, the better the model has captured the struc-ture of the corpus. 4 6.1 Generating automatic constraints We used the 20 Newsgroups corpus, which contains 18846 documents divided into 20 constituent news-groups. We use these newsgroups as ground-truth labels. 5
We simulate a user X  X  constraints by ranking words in the training split by their information gain (IG). 6 After ranking the top 200 words for each class by IG, we delete words associated with multiple labels to prevent constraints for different labels from merging. The smallest class had 21 words remaining after removing duplicates (due to high overlaps of 125 words between  X  X alk.religion.misc X  and  X  X oc.religion.christian, X  and 110 words between  X  X alk.religion.misc X  and  X  X lt.atheism X ), so the top 21 words for each class were the ingredients for our simulated constraints. For example, for the class  X  X oc.religion.christian, X  the 21 constraint words in-clude  X  X atholic, scripture, resurrection, pope, sab-bath, spiritual, pray, divine, doctrine, orthodox. X  We simulate a user X  X  ITM session by adding a word to each of the 20 constraints until each of the constraints has 21 words. 6.2 Simulation scheme Starting with 100 base iterations, we perform suc-cessive rounds of refinement. In each round a new constraint is added corresponding to the newsgroup labels. Next, we perform one of the strategies for state ablation, add additional iterations of Gibbs sam-pling, use the newly obtained topic distribution of each document as the feature vector, and perform classification on the test / train split. We do this for 21 rounds until each label has 21 constraint words. The number of LDA topics is set to 20 to match the number of newsgroups. The hyperparameters for all experiments are  X  = 0 . 1 , X  = 0 . 01 , and  X  = 100 .
At 100 iterations, the chain is clearly not con-verged. However, we chose this number of iterations because it more closely matches the likely use case as users do not wait for convergence. Moreover, while investigations showed that the patterns shown in Fig-ure 4 were broadly consistent with larger numbers of iterations, such configurations sometimes had too much inertia to escape from local extrema. More iter-ations make it harder for the constraints to influence the topic assignment. 6.3 Investigating Ablation Strategies First, we investigate which ablation strategy best al-lows constraints to be incorporated. Figure 3 shows the classification error of six different ablation strate-gies based on the number of words in each constraint, ranging from 0 to 21. Each is averaged over five dif-ferent chains using 10 additional iterations of Gibbs sampling per round (other numbers of iterations are discussed in Section 6.4). The model runs forward 10 iterations after the first round, another 10 iterations after the second round, etc. In general, as the number of words per constraint increases, the error decreases as models gain more information about the classes.
Strategy Null is the non-interactive baseline that contains no constraints (vanilla LDA), but runs infer-ence for a comparable number of rounds. All Initial and All Full are non-interactive baselines with all constraints known a priori . All Initial runs the model for the only the initial number of iterations (100 it-erations in this experiment), while All Full runs the model for the total number of iterations added for the interactive version. (That is, if there were 21 rounds and each round of interactive modeling added 10 iter-ations, All Full would have 210 iterations more than All Initial ).

While Null sees no constraints, it serves as an upper baseline for the error rate (lower error being better) but shows the effect of additional inference. All Full is a lower baseline for the error rate since it both sees the constraints at the beginning and also runs for the maximum number of total iterations. All Initial sees the constraints before the other ablation techniques but it has fewer total iterations.
The Null strategy does not perform as well as the interactive versions, especially with larger con-straints. Both All Initial and All Full , however, show a larger variance (as denoted by error bands around the average trends) than the interactive schemes. This can be viewed as akin to simulated annealing, as the interactive search has more freedom to explore in early rounds. As more constraint words are added each round, the model is less free to explore.
The error rate of each interactive ablation strategy is (as expected) between the lower and upper base-lines. Generally, the constraints will influence not only the topics of the constraint words, but also the topics of the constraint words X  context in the same document. Doc ablation gives more freedom for the constraints to overcome the inertia of the old topic distribution and move towards a new one influenced by the constraints. 6.4 How many iterations do users have to wait? Figure 4 shows the effect of using different numbers of Gibbs sampling iterations after changing a con-straint. For each of the ablation strategies, we run { 10 , 20 , 30 , 50 , 100 } additional Gibbs sampling iter-ations. As expected, more iterations reduce error, although improvements diminish beyond 100 itera-tions. With more constraints, the impact of additional iterations is lessened, as the model has more a priori knowledge to draw upon.
 For all numbers of additional iterations, while the Null serves as the upper baseline on the error rate in all cases, the Doc ablation clearly outperforms the other ablation schemes, consistently yielding a lower error rate. Thus, there is a benefit when the model has a chance to relearn the document context when constraints are added. The difference is even larger with more iterations, suggesting Doc needs more iterations to  X  X ecover X  from unassignment.
The luxury of having hundreds or thousands of additional iterations for each constraint would be im-practical. For even moderately sized datasets, even one iteration per second can tax the patience of in-dividuals who want to use the system interactively. Based on these results and an ad hoc qualitative ex-amination of the resulting topics, we found that 30 additional iterations of inference was acceptable; this is used in later experiments. To move beyond using simulated users adding the same words regardless of what topics were discov-ered by the model, we needed to expose the model to human users. We solicited approximately 200 judgments from Mechanical Turk, a popular crowd-sourcing platform that has been used to gather lin-guistic annotations (Snow et al., 2008), measure topic quality (Chang et al., 2009), and supplement tradi-tional inference techniques for topic models (Chang, 2010). After presenting our interface for collecting judgments, we examine the results from these ITM sessions both quantitatively and qualitatively. 7.1 Interface for soliciting refinements Figure 5 shows the interface used in the Mechanical Turk tests. The left side of the screen shows the current topics in a scrollable list, with the top 30 words displayed for each topic.

Users create constraints by clicking on words from the topic word lists. The word lists use a color-coding scheme to help the users keep track of which words they are currently grouping into constraints. The right side of the screen displays the existing constraints. Users can click on icons to edit or delete each one. The constraint currently being built is also shown. Clicking on a word will remove that word from the current constraint.

As in Section 6, we can compute the classification error for these users as they add words to constraints. The best users, who seemed to understand the task well, were able to decrease classification error. (Fig-ure 6). The median user, however, had an error re-duction indistinguishable from zero. Despite this, we can examine the users X  behavior to better understand their goals and how they interact with the system. 7.2 Untrained users and ITM Most of the large (10+ word) user-created constraints corresponded to the themes of the individual news-groups, which users were able to infer from the discovered topics. Common constraint themes that matched specific newsgroups included religion, space exploration, graphics, and encryption. Other com-mon themes were broader than individual news-groups (e.g. sports, government and computers). Oth-ers matched sub-topics of a single newsgroup, such as homosexuality, Israel or computer programming.
Some users created inscrutable constraints, like ( X  X etter, people, right, take, things X ) and ( X  X bi, let, says X ). They may have just clicked random words to finish the task quickly. While subsequent users could delete poor constraints, most chose not to. Because we wanted to understand broader behavior we made no effort to squelch such responses.

The two-word constraints illustrate an interesting contrast. Some pairs are linked together in the corpus, like ( X  X esus, christ X ) and ( X  X olar, sun X ). With others, like ( X  X ven, number X ) and ( X  X ook, list X ), the users seem to be encouraging collocations to be in the same topic. However, the collocations may not be in any document in this corpus. Another user created a constraint consisting of male first names. A topic did emerge with these words, but the rest of the words in that topic seemed random, as male first names are not likely to co-occur in the same document.
Not all sensible constraints led to successful topic changes. Many users grouped  X  X ac X  and  X  X indows X  together, but they were almost never placed in the same topic. The corpus includes separate newsgroups for Macintosh and Windows hardware, and divergent contexts of  X  X ac X  and  X  X indows X  overpowered the prior distribution.

The constraint size ranged from one word to over 40. In general, the more words in the constraint, the more likely it was to noticeably affect the topic distribution. This observation makes sense given our ablation method. A constraint with more words will cause the topic assignments to be reset for more documents. In this work, we introduced a means for end-users to refine and improve the topics discovered by topic models. ITM offers a paradigm for non-specialist consumers of machine learning algorithms to refine models to better reflect their interests and needs. We demonstrated that even novice users are able to under-stand and build constraints using a simple interface and that their constraints can improve the model X  X  ability to capture the latent structure of a corpus.
As presented here, the technique for incorporating constraints is closely tied to inference with Gibbs sampling. However, most inference techniques are essentially optimization problems. As long as it is possible to define a transition on the state space that moves from one less-constrained model to another more-constrained model, other inference procedures can also be used.

We hope to engage these algorithms with more sophisticated users than those on Mechanical Turk to measure how these models can help them better explore and understand large, uncurated data sets. As we learn their needs, we can add more avenues for interacting with topic models.
 We would like to thank the anonymous reviewers, Ed-mund Talley, Jonathan Chang, and Philip Resnik for their helpful comments on drafts of this paper. This work was supported by NSF grant #0705832. Jordan Boyd-Graber is also supported by the Army Research Laboratory through ARL Cooperative Agreement W911NF-09-2-0072 and by NSF grant #1018625.
 Any opinions, findings, conclusions, or recommenda-tions expressed are the authors X  and do not necessar-ily reflect those of the sponsors.
