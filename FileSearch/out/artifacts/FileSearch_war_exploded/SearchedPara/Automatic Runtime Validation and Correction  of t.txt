 In the beginning of the World Wide Web (WWW), when web sites consisted of one well thought-out, structured design was not important: complexity was well manage-However, as the WWW aged, and web sites became large, professional applications, offering both static and dynamic, rapidly changing information and functionality, maintenance and usability problems with ad hoc designed sites became apparent [16]. Visitors failed in making a mental model of the website, experienced difficulties in locating the information they were looking for and felt  X  X ost in hyperspace X . 
Quite recently, we see that companies and organizations, in an attempt to better fa-cilitate the user in finding information relevant for him/her, use a so called Audience Driven approach [6]. In this approach, th e designer takes into account the target audi-formation and functionality required by these different target audiences. Concretely, Examples of leading companies and organizations applying an audience driven ap-proach include 1 : HP (http://www.hp.com/), Sun Microsystems (http://www.sun.com/), IBM (http://www.ibm.com/us/), AIG (http://www.aig.com/GW2001/home/), NASA (http://www.nasa.gov/), Dell (http://www.dell.com/), several universities (Oxford University: http://www.ox.ac.uk/ and others),... 
Although the audience driven design philosophy significantly reduces the amount of information the visitor needs to plough through, it also has as drawback that possi-bly some information needed is not available in the audience track chosen by the user. This is a direct result of the fact that the assessment of requirements by a designer (at assessed requirements result in information/functionality being in a wrong navigation track. More specifically, some relevant information may be missing in a certain audi-ence track but present in another, while other information present in that audience track may be superfluous. impossible to access the targeted web visitors and perform standard requirement engi-neering techniques. In this paper, we tackle this (requirement-) problem by describ-ing how to identify missing or superfluous requirements for audience classes (section 4 and 5). Based on this identification, correction of the structure and navigation of the web site can be done automatically, at runtime (section 6). Note however that the specification of when, what and how to adapt is done at design time. This effectively gives the designer the means to anticipat e possible requirement/design problems, and Preliminary results on this topic can be found in [3]. The work will be presented in the framework of the Web Site Design Method (WSDM), explained in section 3. Section 2 gives an overview of related work. media community (e.g. [18] and others). In this community, most of the work is done in the context of learning and user assistant applications. In these systems, the user is  X  X uided X  towards a certain goal (mostly a learning goal), by (adaptively) constructing the pages tailored to his knowledge (which is e.g. gathered by analyzing browsing behavior). This approach is fundamentally different from the one taken in this paper: the navigation space is conditionally specified during design and the actual navigation space for a user is generated based on the profile of the user. The navigation space is in fact personalized. Our goal is different. We do not want to personalize the naviga-tion space; we only want to improve it usi ng adaptive techniques . The adaptation is done after the (statically) designed navigation space has been used, and this usage data has been analyzed (note that the adaptation is specified during design). Web design methods that have support for adaptation include WebML[4], Hera[10], UWE[14] and OOH[11]. However, these methods focus on personalization (e.g. content personalization) or/and customization towards different devices or con-deployed), as described in this paper. 
WebML does describe a quality evaluation framework that exploits conceptual knowledge when analyzing web access logs [15]. The framework supports web usage analysis (e.g. access analysis of data schema entities at instance level) and web usage mining (e.g. finding data that is accessed together, navigation sequences). But there is no provision for (automatic) adaptation based upon this analysis. Given the fact that WSDM has been sufficiently specified in the literature [1] [2] [7] [8], we will only provide a short overview and go into deeper detail only where nec-essary for the context of this paper. 
The general design cycle for WSDM can be summarized as follows. In the mis-sion statement, the purpose and the subject of the web site is expressed and the target audience is identified. Based on the mission statement, an audience modeling phase is performed, consisting of an audience classification and an audience characteriza-tion. During audience classification, the different audience classes based upon the informational and functional requirements of the potential visitors are identified and classified into an audience class hierarch y. During audience characterization, the relevant characteristics for the different audience classes are described. 
The next phase, the Conceptual Design, consists of two sub-phases: task modeling and navigation design. During task modeling, for each requirement of the different audience classes, a task is defined. Cons equently, the task is elaborated and decom-posed in elementary tasks using ConcurTaskTree ([7] describes how). In this way, a task model is specified for each requirement. In parallel, for each elementary re-quirement, a tiny conceptual schema, called a chunk, is specified, formally describing modeled using ORM [12] with some extensions to express functionality. 
During navigational design, the conceptual navigation model for the website is constructed. It consists of a graph of nodes, connected by means of links. Every node contains information that logically belongs together, in the form of (information or functional) chunks. A node can contain zero or more chunks (a node without chunks In WSDM, the navigation model is obtained in two steps. First, the audience class hierarchy from the audience modeling phase is used to obtain the basic structure of the navigational model, by creating one navigation track (a so called audience track) for every audience class [1]. Such an audience track can be thought of as a  X  X ub-site X , where all and only the information/functionality relevant for that particular audience class can be found. Secondly, the internal structure of each audience track is derived from the task models of the task modeling phase, elaborating the requirements of each audience track. 
It is only in the next phase, the implementation design, that the conceptual nodes from the navigational model are actually mapped on pages, and that layout and pres-entation is specified. Finally, the last phase, the actual implementation, is a mapping of the previous phases onto the chosen implementation platform. 
A (simplified) example of a Navigational Model of an audience driven website is given in figure 1. The example is the NASA website (http://www.nasa.gov/) and shows the main structure of the website and the navigation structure for both the Me-dia &amp; Press User Track and the Educator User Track. The other tracks are not elabo-rated to not overload the figure. Nodes are represented by rectangles, chunks by rounded rectangles, links by arrows and the connections between chunks and nodes by lines. A double lined rectangle is used for the root of a track or the root of the web site (in this example the node  X  X isitor Track X  is the root of the web site). As already explained in the introduction, the aim in this paper is 1) to detect missing or superfluous requirements for a certain audience class by investigating the access to information offered in the corresponding audience track, and 2) to adaptively alter the structure of the site to correct for detected problems. In this section, we will describe the data necessary to be able to identify missing or superfluous requirements. In the we will give possible solutions to correct the flaw. 
From now on, the requirements originally assigned (by the designer) to an audi-foreign requirements (for that particular audience class). user leaves his audience track, to look for information elsewhere, then the information he is visiting outside of his audience track might be information that is actually miss-ing in his own audience track. If a significant amount of users of the same audience class do this, then we have a good indication that that information is actually relevant for this audience class. 
When a user does not leave his audience track, still some problems with the infor-very few times (compared to the other information), suggesting the information does not belong there in the first place. Note that identifying information that is accessed few times does not necessarily imply that information is superfluous. We will discuss this in more detail in section 5. Thus, to identify missing/superfluous information, the following steps are identified: 1. Determine the audience class of the current user 2. Track which information the user visits, both in and outside his audience track 3. Analyze the accumulated data to determine if the information within the audience Because an audience driven design has been used, the first step is simple: when a user enters the web site, he is presented with a choice of different audience tracks (i.e. sub-he is currently visiting the website, and thus reveals his/her audience class. 
In the second step, we store data about which information a user visits. As we want to keep track of which information is visited outside a particular audience track, and relate this information to the frequency of visits inside the track, we need to store the number of visits to each piece of information (chunk) relative to each audience class. This data can be conveniently stored in a matrix, which we will call the infor-mation access matrix . Rows of the matrix represent the different elementary require-ments R i (track-able in the website by their corresponding chunk C i ), while the columns represent the different audience classes. An example is given in the next section. In pseudo code, the algorithm to populate the matrix is as follows: WHEN session.start THEN Determine Audience Class A j by observing first click(s) END Note how the connection between the requirements (line 3) and their corresponding tion, we will give an example of an information access matrix, and we will describe how the matrix can be used to identify missing or superfluous information in an audi-ence track. 5.1 Identifying Missing Information To determine if the amount of accesses from a certain audience class to information outside the audience track is significant, we can use known statistical techniques. In (e.g. mean, median, ..) and standard measures of spread (e.g. variance, standard devia-tion, median absolute deviation, ..). 
As our dataset (and its distribution) is unpredictable and we do not want our calcu-lations influenced by (a few) extreme values (e.g. nodes that are highly popular), we choose median, a robust central tendency (i.e. not influenced by extremes in our data set). As a measure of spread the median ab solute deviation (MAD) is chosen, as this measure is less influenced by outliers (compared to other measures) and has robust-ness of validity (i.e. the underlying di stribution doesn X  X  influence reliability too much). The following formula is used to calculate absolute median deviation:  X  ) ( m i x x median MAD  X  = where x i is each of the values of the data set, and x m is the median of the data set. 
As the spread denotes how far, on average, the values of the dataset are removed from the middle value, we can conclude that most of the values of the dataset lie within the distance of the spread from the middle value (for more exact estimates of quently, external values fit well in the given dataset, if they lie within that range. 
Applied to the problem of finding information outside the audience track of a par-adopt the following method: For a given audience class/track: 1. Calculate median and MAD for the set of number of accesses to information 2. For all information resulting from foreign requirements, verify if the amount of foreign requirement track that is accessed more than (median + MAD) is off course also relevant for the current audience class. 
To clarify this method, let X  X  consider the (simplified) example of the NASA web site that was introduced in section 3 (see figure 1). The information access matrix for this example is shown in figure 2. In the columns we have the two audience classes explained, each cell in the matrix denotes the number of visits to some information by a certain audience class. For example, cell (1,1) shows that members of the audience track  X  X edia &amp; Press X  have accessed 52 times the information resulting from re-quirement R1  X  Press Release Archive X  . 
Note that the first six requirements in the matrix are native for the Media &amp; Press track, and the last six ones are native to the Educator track. As we were unable to obtain the real access information for the NASA website, we have used here ficti-
Lets now analyze the accesses to the native information of the Educators audience track (R7 ... R12), and determine if accesses to foreign information (R1 .. R6) were significant compared to these accesses. Calculating median and MAD we obtain: Data set (ordered): 10 15 20 30 50 56 ; Median: 25 ; MAD: 12.5 
The threshold that is the lower limit to decide if foreign information is relevant for the current audience track is median  X  MAD = 25  X  12.5 = 12.5. The information of the Media &amp; Press track with a number of accesses greater then this threshold is de-termined to be relevant for the Educator audience track. This is the case for the Press Release Archive information (40 accesses). We can thus conclude that this informa-tion should somehow be included in the Media &amp; Press track (how and where this information is added is the subject of the next section). 5.2 Identifying Superfluous Information As for identifying missing information, we al so use statistical techniques to determine are not usable here because they only work on large datasets (e.g. Rosner X  X  Test [17] and others [5], [13]), and those that were usable for small data sets gave poor results (e.g. Dixon X  X  test [9] and others). 
However, for our purposes, detecting significantly low values (but not per se out-dataset. 
To determine which value lies far from its neighbor, we take the ordered dataset, and calculate the distances between each 2 consecutive values. These distances give Calculating the interval [(mean X  X td) (mean+std)] gives us the range in which most of the distances (i.e. 50% for normally distributed data) lie. Distances above the (mean+std) are thus relatively big, compared to the other distances, and we have identified two points which are relatively far from each other. 
To determine which point lies far from the middle value, we apply the same tech-nique as in the previous section: values below the threshold (median X  X AD) can be labeled as being far from the middle value. apply the technique described above to identify possible superfluous information in the Media &amp; Press track: Data set (ordered): 16 31 38 40 49 52 Median: 39 ; MAD: 9 Lower limit: 39  X  9 = 30 
The distance between the first and the second element of the original dataset is 15, which is bigger than the threshold 11.9. Therefore, we can conclude that the first element lies significantly far from the next element. As this first element, namely 16 in the original dataset, lies below the threshold of 30, we can also conclude that it lies far from the middle. With both tests positive, we conclude that the value 16 is indeed significantly low compared to the other values: the information related to the re-quirement  X  X act Sheets X  is detected as (possibly) superfluous for the audience class Media &amp; Press. The concentrated reader will note that, in case the detected value is not the first value of the data set (as in this example), then also all smaller values are marked as superfluous, as they obviously are also significantly low compared to other values. Having identified missing or superfluous information in a certain audience track, the ciencies. To leave the control over the web site structure to the designer, we allow the designer to specify at design time how the structure of the web site should be adapted when such deficiencies are detected. For this, the Adaptation Specification Language (ASL) [2] can be used, which is defined upon the navigational model to allow speci-reflect the basic idea. 6.1 Adaptively Correcting Missing Information There are several ways to anticipate the fact that information present in some audi-ence track is apparently missing in a certain audience track. The designer might du-plicate the information in the place it is mi ssing; provide a link to the existing infor-all interested users can access the information. 
The approach taken in this paper consists of  X  X uplicating X  the information, and of-fering a link to the information at the root of the audience track. Although more suit-highest for this adaptation. Let W be a web site, with a set of Audience Classes A={A 1 , ..., A n } with associated explained above as follows: (1) Foreach AudienceClass in A (2) Foreach node not in NodesOfAudienceTrack( AudienceClass ): checked if that node contains missing information (line 3). If this is the case, the node audience class under investigation to the duplicated node is added (then-part line 3). 6.2 Adaptively Correcting Superfluous Information As mentioned in section 4, information identi fied as superfluous in a certain audience information for a research lab: only a minority of users will actually want to go to the superfluous information rather as an alert to the web master, rather than something that requires (automatic) adaptation. If th e web master indeed decides the information is not needed in that track, he can remove it. However, an (automatic) adaptation that information detected as superfluous appears last. (1) Foreach AudienceClass in A: (2) Foreach node in NodesOfAudienceTrack( AudienceClass ): (4) foreach link with target( link ) = node : reorder( link , last) In words, the rule iterates over all audience classes (line 1). For each node within the audience class (line 2), it is checked if the n ode has been detected to contain superflu-ous information (line 3). If this is the case, then each link to this node (line 4) will be re-ordered so it appears last in the originating node (end line 4). The technique, described in this paper, to validate requirements by detecting missing or superfluous information in a certain audience track, can also be applied to web sites not following the audience driven philosophy. The key requirement for the applica-cally together (in our case, the requirements for an audience class). Information in collection) can be tested to be missing. Two example applications are given below. 
In a data driven web site, where the navigation structure is determined by the avail-able data, the main navigation structure (e.g. the main navigation options from the homepage) is usually topical. The technique described in this paper could be used to determine relevant data outside a certain topic group, and possibly adaptively alter the navigation structure to cluster related topic groups or to provide a link within the topic group to the (external) relevant data. 
In e-commerce, product categories can be considered as sets of related items, and thus the technique described in this paper could be used to determine which products E.g. if a user is leaving a product category, briefly browses outside the category, and consequently returns, this may indicate th at the information visited outside the cate-gory may also be relevant for the current category. Consequently, the navigation structure could be adaptively altered to incl ude a link to the categories in question. In this paper, in the context of WSDM, we show how to validate the requirements of These flaws are 1) information put wrongly in a certain track (superfluous informa-information). The automatic detection is done using statistical techniques, performed on the web access log. Furthermore, this paper describes how the existing navigation structure can be (automatically) adapted to remedy for detected flaws: at design time, the designer can specify (using the Adap tive Specification Language) the adaptive actions that should be taken in case such situations are detected at run time. By doing so, the structure of the web site will better reflect the audience driven design classes. Finally, the paper elaborates on the use of this technique outside the scope of audience driven web design. 
