 We present T OUR V IZ , a system that helps its users to interactively visualize and make sense in large network datasets. In particu-lar, it takes as input a set of nodes the user specifies as of interest and presents the user with a visualization of connection subgraphs around these input nodes. Each connection subgraph contains good pathways that highlight succinct connections among a  X  X lose-by X  group of input nodes. T OUR V IZ combines visualization with rich user interaction to engage and help the user to further understand the relations among the nodes of interest, by exploring their neigh-borhood on demand as well as modifying the set of interest nodes.
We demonstrate T OUR V IZ  X  X  usage and benefits using the DBLP graph, consisting of authors and their co-authorship relations, while our system is designed generally to work with any kind of graph data. We will invite the audience to experiment with our system and comment on its usability, usefulness, and how our system can help with their research and improve the understanding of data in other domains.
 H.3.3 [ Information Storage and Retrieval ]; H.5.2 [ Information Interfaces and Presentation ] Algorithms, Design, Human Factors Sensemaking, Large networks, Connection subgraphs
Finding associations among a set of objects is an important prob-lem in many domains ranging from biology (gene/protein interac-tions), security (criminal/terrorist interactions), immunology (pa-tient interactions), and so on. Often, these objects are connected with certain type of relations within a large network. In such a network setting, the task of finding associations among objects can is that the system we shortly introduce is quite general and can be used in various settings independent of a specific domain.
We developed T OUR V IZ (Figure1), an interactive visualization system, for a domain analyst to explore and understand the asso-ciations among a set of objects (i.e. nodes) in a network. The analyst selects a set of nodes that s/he is interested in within the network and specifies them as  X  X arked X . Next, within T OUR V IZ an efficient algorithm finds succinct connection subgraphs among the marked nodes. Intuitively,  X  X lose-by X  (highly associated nodes) in the network can be connected by simple paths, while  X  X ar away X  (not-so-highly associated) nodes are hard to link together. There-fore, the algorithm returns possibly multiple connection subgraphs for multiple groups of  X  X lose-by X  nodes. T OUR V IZ offers visualiza-tion features to show the analyst these groups and their associated connection subgraphs found by our algorithm. Our system also embodies interaction features for the analyst to update the nodes of interest on demand.

We summarize our main contributions as follows:
We will demonstrate T OUR V IZ  X  X  usage, user interaction and al-gorithm through scenarios on understanding connections among re-searchers in various computer science fields in the DBLP 1 coau-thorship graph, which contains about 329K authors (nodes) and 1094K coauthorship relations (edges).

Scenario. Here, we illustrate one example scenario, where our user uses T OUR V IZ to explore and understand the connections be-tween several researchers in KDD (data mining, machine learning) and RECOMB (computational biology). This scenario will touch upon major features of T OUR V IZ .

Our user begins by searching for authors that he is familiar with, using T OUR V IZ  X  X  search feature (Figure 2). Authors whose names contains the search text show up as a list. They can be sorted alpha-betically, or by various metrics that T OUR V IZ has pre-computed for the graph (the first time the graph is loaded), e.g., PageRank score, degree, etc. Once a match is found, our user drags the name into the visualization, which turns into a circle, its size proportional to its coauthor count (i.e., node degree).

Our user proceeds to drag in more authors he is familiar with, in the domains of KDD and RECOMB. Although the user is fa-miliar with these researchers X  work, s/he does not recall how they have been collaborating. In particular, s/he is interested in using T
OUR V IZ to figure out the researchers who have been working at the intersection of these two domains.

To help keep track of the two groups of researchers, our user groups them into KDD and RECOMB using T OUR V IZ  X  X  grouping feature (Figure 3). Each group is assigned a color, and its nodes enclosed by a convex hull.

These are all the nodes that our user wants to create a connection subgraph for (Figure 3). To mark these nodes as inputs, our user http://dblp.uni-trier.de/
Our user can interactively add or remove nodes (marked or un-marked), and refresh the visualization with an updated connection subgraph by invoking the algorithm. Nodes that were previously in the visualization will maintain their positions, to help our user preserve his mental model about the connections.

Engaging Our Audience. We will invite our audience to try out T OUR V IZ with their own set of authors, and collect their feed-back on T OUR V IZ  X  X  usability and usefulness. Since we created T
OUR V IZ to be a general tool, we will be particularly interested in discussing with our audience how T OUR V IZ may help them with research and data visualization in their domains.
In this section, we first provide details about how the algorithm in our system works, and then give information about implementation and integration with the visualization component.
Idea of encoding. Our method addresses the problem of suc-cinctly describing a given set of marked nodes in a graph. We for-mulate this problem using an encoding scheme, which involves a sender and a receiver. In this scheme both the sender and the re-ceiver know the graph structure G = ( V, E ) , while only the sender knows the set of marked nodes. The goal of the sender, then, is to transmit to the receiver the information of which nodes are marked, using as few bits as possible .

Intuitively, the sender could use fewer bits to encode  X  X lose-by X  marked nodes; by following a (short) path from one to another. For each such path, the sender encodes the starting node using log | V | bits. The following nodes on the path are described by encoding The second method first builds the transitive closure graph of the marked nodes in which each pair of marked nodes are connected by an edge of weight equal to the minimum cost path inbetween them (no edge if the path length is greater than log | V | ). Next, it runs a minimum arborescence algorithm on this small graph of M nodes. Finally each edge in the returned tree(s) is expanded to in-clude the original nodes on the path represented by that edge. (3) The third method builds the minimum depth-1 tree(s) in which the root marked node is connected to each other marked node with the shortest path length. (4) Finally, the fourth method builds on the depth-1 tree(s) to build larger depth trees, by finding intermediate nodes that decrease the total cost. Our method returns the best tree among found by various heuristics that has the minimum cost. The visualization component of T OUR V IZ system is written in Java 1.7. built on top of the open-source JUNG network visualiza-tion library [8] and with design based on the A POLO [2] system. T
OUR V IZ stores the graph in a SQLite 2 embedded database, for its cross-platform portability. The graph database X  X  schema was designed independently from the T OUR V IZ system, so that differ-ent graphs that follow the schema can be readily used. T OUR V IZ takes advantage of built-in features from SQLite, such as its full-text search capability to quickly locate nodes whose attribute values match users X  search text (Figure 2).

When the user interactively specifies the set of marked nodes for which the connection subgraphs are to be found, the IDs of these nodes are written to a temporary file. This file as well as the directory for the network data are input to our algorithm which is implemented in Matlab 7.10. The algorithm then outputs the best connection tree(s) as well as small subgraphs around the seed nodes (candidate graph). T OUR V IZ shows the candidate graph and highlights (in bold) the edges that correspond to the best tree edges.
T OUR V IZ builds on a large body of research aimed at under-standing and supporting how people can gain insights through net-work visualization [7]. It provides several features to help people specify the nodes of interest in a network and visualize connection subgraphs in context of local neighborhoods around these nodes that are not too overwhelming [2].

Much work has been done on finding connection subgraphs, in-troduced by [4], and extended by [9] and [11]. Related work in-clude expanding communities around a given set of seed nodes [10, 12] such that the modularity or conductance of the subgraph con-taining the seed nodes is optimized. [13] finds the most  X  X entered X  node that has strong connections (good paths) to most or all of the seed nodes. [6] finds the subgraph up to a certain size which re-tains most of the proximity between seed nodes. Proximity and connection subgraphs are also exploited for visualization and sum-marization [3, 5].

Few tools have integrated connection subgraphs algorithms to interactively help people make sense of associations among nodes in a graph, and they often only support some of the sensemaking features offered by T OUR V IZ , e.g., showing (multiple) connection subgraphs only among highly associated groups of nodes, rather than a single large subgraph including all nodes at once.
We presented T OUR V IZ , an interactive system to help people understand connections between sets of nodes in large graphs. Our www.sqlite.org
