 Recommender Systems help an on-line user to tame informa-tion overload and are being used now in complex domains where it could be beneficial to exploit context-awareness, e.g., in travel recommendation. Technically, in Recommend er Systems we can interpret context as a set of constraints or preferences over the usage of items determined by the con-textual conditions (e.g., today it is raining or the user is i n a particular location). In fact, there is a lack of approache s to deal effectively with contextual data. This thesis invest i-gates some approaches to exploit context in Recommender Systems. It provides a general architecture of context-awa re Recommender Systems and analyzes separate components of this model. The main focus is to investigate new ap-proaches that can bring a real added value to users. In this paper I also describe my initial results on item selection an d item weighting for context-dependent Collaborative Filte r-ing (CF). Moreover, I shall present my ongoing research on CF hybridization using context.
 H.3.3 [ Information Storage and Retrieval ]: Information Search and Retrieval X  Information filtering ; H.3.5 [ Information Storage and Retrieval ]: Web-based services Algorithms, Design, Experimentation Recommender Systems, Context
Recommender Systems are powerful tools helping on-line users to tame information overload by providing personal-ized recommendation on various types of products and ser-vices. Recommendation is computed by exploiting histor-ical data of the users X  online behavior [2], assuming that the user X  X  behavior does not change quickly and previously recorded observations can help in predicting future behavi or. This assumption is valid only to some extent. In fact, the user X  X  general interests can be relatively stable, but, the y can also be influenced by many additional and varying factors. For example, imagine a user who spends his week-ends ac-tively. This aspect could be used to characterize the hobbie s of the person, but the activity itself depends on many other factors such as the current season, weather or companion.
In my thesis I will analyze how these additional factors, here referred as context, could be exploited to improve a Recommender System.  X  X ontext is any information that can be used to characterize the situation of an entity X  [6]. Here, entity is a person, place, or an object that is consid-ered relevant to any phase of the recommendation process. In Recommender Systems contextual information could be (e.g., in a travel planning application) the companion, the weather, the temperature or the location. Context-aware computing is becoming a wide research area and recently is gaining more and more attention [11]. In my work I want to exploit existing state of the art techniques for context rep -resentation and reasoning, and explore the benefits of using it for improving the quality of the generated recommenda-tions. Context could be used to extend a system in many ways. I want to focus on two main objectives. Firstly, con-text could be used to make more relevant recommendations. Secondly, when making a recommendation, we claim that there should be a clear and transparent effect of the various knowledge sources (on the user or the item) and contextual information.

Up to now, in the Recommender System literature context was mainly interpreted as an additional source of informa-tion to improve the accuracy of the prediction step [1, 12]. Various approaches are used to incorporate contextual info r-mation reporting better performance measures (Mean Abso-lute Error or recall). [1] extended the classical Collabora tive Filtering (CF) method by incorporating contextual informa -tion into the prediction process. Here recommendations are generated using only the ratings made in the same context of the target prediction. This approach could be seen as an application of feature/item selection, as ratings can be considered as attributes of the user or of the item [9]. The disadvantage of that method is the increase of data spar-sity, and because of the small experimental data set used, the authors report only a small improvement in the recall. Alternatively, [12] exploits a different way of incorporati ng contextual information and tries to improve prediction ac-curacy using a Content Based (CB) approach. The authors modell the context as additional descriptive features of th e user and build a Bayesian Network to make a prediction. They increase the accuracy even with noisy and incomplete contextual information. The usage of context for purposes different from increasing system accuracy is less studied. I n COMPASS [5], experiences of users with a context-aware mobile tourist advisor are analyzed. Interestingly, the us age of some contextual variables was not liked by the users, com-menting that the X  X pplication becomes too intelligent X . Th is shows that more studies to analyze additional dimensions of the usage of context a needed.

In the rest of this extended abstract I will introduce my proposed architecture for the context-aware Recommender System (Section 2). Referring to this architecture in Sec-tion 3 I will introduce my previous and ongoing work on context-aware recommendations. The future work will be described in Section 4 and in Section 5 I will draw some conclusions. The goal of the thesis is to set up a flexible/customizable Recommender System architecture to allow exploiting the benefits provided by context data. We will use this context-aware recommendation framework in order to subdivide the top problem of building context-aware recommender systems into smaller ones. The framework provides a general descrip -tion of a class of context-aware Recommender Systems. An individual system may be obtained by specializing one or more components of the framework.

In Figure 1 the proposed framework is shown. Here, the rectangular boxes represent system components and each ar-row indicates information flow. For example, the context provider is a module that tracks changes of contextual vari-ables. It contacts appropriate context services and stores all context states in a local database. When requested by the context manager, it provides information about known con-textual variables for a user or an item of a specific time point . The context manager performs all the reasoning related to the context. It determines if a contextual variable is impor -tant for a prediction, removes noisy context data and makes predictions for missing contextual variables. The User and Item components represent user and item information in the system. The user is modelled with his preferences and in CF this is a vector of item ratings. The item model captures relevant knowledge in the application domain. The model adapter is responsible for integrating contextual data into the prediction algorithm. It takes information provided by the contextual reasoner and enhances the representation of the user/item model with context. For instance, in [12] this adds relevant contextual variables to the user model. The prediction engine takes the enhanced data model and gen-erates a list of rating predictions. Note that we plan to have several model adapters and prediction engines, which gener -ate different lists of predictions. The recommender takes all the produced recommendation lists and combines them into a final recommendation list. It can use information ob-tained from the contextual manager to filter out, or change the ratings for the final list. The explanation engine takes the final list of recommendations and provides the explana-tions for each of them. It closely collaborates with the rec-ommendation engine to identify the best recommendations. In fact, a recommendation may be suggested just because it could be easy to explain and not only because it has a high predicted rating. The explanation engine could also use the contextual reasoner to find out needed information to moti-vate a recommendation because of the particular contextual conditions. A user as output gets a list of recommendations with possible explanations. The explicit feedback of the us er is recorded and is used to influence the model adapter. Note that there is also a loop between the recommender and the model adapter, which could be used to integrate different recommendation techniques via co-training [7].
During the initial stage of my thesis I have been focussing on different techniques to incorporate context information into the CF recommendation process. I investigated vari-ous item weighting and item selection techniques suitable for CF, moreover, started investigating some hybridizatio n techniques for CF. Referring to the general framework pre-sented in Section 2, both item weighting, and item selec-tion are examples of implementation of the model adapter and the prediction engine components. Additionally, CF hybridization deals with the recommendation component, where context is used to filter out irrelevant recommenda-tions. Note, that I analyzed two possibilities to use item selection in the CF. One selects predictive items, i.e., items whose ratings are used in the user model and are used to compute recommendations (see Subsection 3.1). The sec-ond refers to the selection of items suggested in the final recommendation (see Subsection 3.3).
CF can be seen as an instance-based learning approach where users are instances described by their feature vec-tors, where the item ratings play the role of feature values. Hence, the rationale for the application of feature weight-ing/selection techniques in CF is that some items may be more important than others for making a prediction. Item selection is commonly used in Machine Learning (where it is called feature selection) to filter out irrelevant or noisy i tems in classification learning tasks [10]. We would like to ident ify one set of relevant items for each target item prediction. Imagine a Recommender System in the tourism domain. Here, the context can be used to understand that some items should be more likely to be recommended than others, and also that some item ratings are more relevant than other as in [1] and in our work. For example, an open air museum is worth recommending only on a sunny day. When predicting the rating for the target item we propose to use only the rating data of the most similar items. The rationale is that context should influence the selection of the target item and the items used to generate the prediction, since their ratin gs should provide situated knowledge. For example, if we are predicting the rating of an open air museum on a sunny day, we use only the ratings of similar points of interest, i.e., o pen air theater or other open air museums, and these points of interest are all worth visiting on a sunny day. In this sense, the target item plays the role of the context descriptor and the predictive items are dynamically selected with respect to it. The similarity between items may be computed using descriptive features of items (i.e., open air attraction) o r analyzing the mutual dependencies between their ratings.
In CF, sparse data makes a straightforward selection of a small number of items not effective. Users usually co-rate a small number of items and these could be discarded by the item selection method. The scarcity of information makes user-to-user similarity imprecise or even impossible to co m-pute [4]. Additionally, finding the optimal subset of items would require to conduct an extensive search in the space of all the subsets of the items [8]. In a Recommender Sys-tem scenario, this implies that we should conduct a search procedure for every target item (the item playing the role of the class to be predicted) and for a large number of subsets of the predictive items. This is clearly extremely expensiv e, and therefore, in [3] we propose a more dynamic approach for item selection in CF which is briefly described in the following paragraphs.

Assume that we are able to compute the similarity be-tween any two items. To generate a prediction for the user u and item j first of all we find k nearest neighbors of u . Our proposed algorithm determines a user-to-user similarity b y using only f items which are most similar to j and are co-rated by both users whose similarity we want to compute. Note that this approach of item selection does not increase
Figure 2: Performance of item selection methods. data sparsity as we select a small amount of items which are rated by both users. Note that the algorithm always uses f items to compute user-to-user similarity. Hence, if there a re not enough items to select from, it could happen that these selected items are not very similar to the target item. This illustrates the tradeoff between the relevance of the items used to compute the user-to-user similarity and the need to use enough overlapping items to compute a reliable similar-ity.

In our experiments we used various methods to compute the item-to-item similarity. Most of them exploited rating statistics within data and in addition we used the overlap between item tagging as a way to measure the item-to-item similarity. In Figure 2 it is shown that the application of the item selection in CF can decrease MAE. In fact, this can be obtained by using a small subset of items in the user-to-user similarity, i.e., the items with the largest import ance as computed by various weighting methods (IPCC, mutual, genre, etc.). The reader is referred to [3] for further detai ls.
In item selection an item is either used or discarded in the rating prediction. Besides, item weighting uses all the ite ms and uses the weights to balance the contribution of each pre-dictive item. In our approach, the item weights depend on the target item, that could be selected using contextual in-formation. Items with larger weights have a higher influence in the rating prediction.

Item weighting is a well studied problem in Machine Learn-ing, and particularly in Instance-Based Learning [10], whe re it is called feature weighting. In CF we investigated variou s methods to incorporate item weights into the user-to-user similarity. In fact, we analyzed different approaches to inc or-porate weights in Pearson Correlation, and found out that the simplest one (without normalization) worked better.
Our ongoing work investigates hybridization techniques for using context in CF. Here, we describe context as addi-tional content of an item and build a naive Bayesian (NB) classifier to predict the ratings using the only the contex-tual information and some non-personalized features of the data. We are trying then to combine the two methods using either linear combination or post-processing of the recom-mendation list. Both hybridization methods provide a clear separation of data sources used for prediction. This will ea se the explanation of the influence of the context in generating the prediction (e.g.,  X  X e cannot recommend A because it is raining X ).

The linear combination of the two methods, first a rat-ing prediction is computed using CF and NB, and then the twos are merged to get a final rating prediction r  X  = (1  X   X  ) r  X  CF +(  X  ) r  X  NB . The CF system alone performs better than NB, however, it can be improved the hybrid approach using  X   X  [0 . 2 , 0 . 4]. It is an interesting result as it shows that context by itself can provide a lot of information on the rating prediction, without compromising the data sparsity .
In a second approach we are taking the recommendation list generated by CF and use the prediction information of NB to filter out the items having the largest difference in the rating predictions in the two systems. This step could be seen as an item selection, where only the most relevant items for a current context are selected for the final recom-mendation. We measured the performance of this hybrid system with respect to the filtering threshold. The following points summarize my future work.

Defining Similarity Between Contexts. Item selec-tion and item weighting methods can be extended consider-ing the context-to-context similarity. Here it is importan t to investigate and develop methods which work best with our proposed approaches.

Investigation of CF hybridization methods. Our initial experiments on CF hybridization showed that we coul d increase accuracy while combining CF with prediction meth-ods based on the context. In the proposed methods one should further investigate how contextual data is used.
Explaining the recommendations using context. It is important to explain to the user how and why the con-text was used. For example, we could offer a warning saying that we could not recommend visiting an open-air museum because of the bad weather, despite the fact that the user would like it. It is important to understand which context information should be  X  X xplained X  and the best way to do it.
 User control of influence of contextual variables. The user can disagree with the system about the importance of contextual variables for making a prediction. In additio n, the system could make an error while trying to determine the current contextual values. We want to enable an easy and understandable way for the user to control the influence of the contextual variables.

Actively learning relevant contexts. Sometimes some contextual variables are unknown or there is not enough evi-dence to understand if the context is important for a recom-mendation. We want to investigate how we could actively ask the user to provide such information, and if the user would agree to answer the questions knowing the benefit from the improved recommendation.
In this work I proposed a general architecture for context-aware recommender system. Furthermore, I summarized the work done so far and listed some directions of my future work. In conclusion I want to speculate on the impact of the thesis in the field of Recommender Systems. First of all I want to establish a general framework to incorporate contex t in the recommendation process. It should be flexible enough and application oriented that could be used by the research community and also directly applied to practice. Secondly, I want to analyze the main parts of this framework. The main goal is to understand the potential benefits of using context and to provide an in-depth analysis of various approaches. [1] G. Adomavicius, R. Sankaranarayanan, S. Sen, and [2] G. Adomavicius and A. Tuzhilin. Toward the next [3] L. Baltrunas and F. Ricci. Locally adaptive [4] D. Billsus and M. J. Pazzani. Learning collaborative [5] P. D. Bra and W. Nejdl, editors. Adaptive Hypermedia [6] A. K. Dey. Understanding and using context. Personal [7] S. Goldman and Y. Zhou. Enhancing supervised [8] R. Kohavi and G. H. John. Wrappers for feature [9] P. Langley. Selection of relevant features in machine [10] T. M. Mitchell. Machine Learning . McGraw-Hill, 1997. [11] C. Palmisano, A. Tuzhilin, and M. Gorgoglione. User [12] G.-E. Yap and H.-H. Pang. Discovering and exploiting
