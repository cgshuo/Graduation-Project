 ORIGINAL PAPER Alicia Forn X s  X  Josep Llad X s  X  Gemma S X nchez  X  Dimosthenis Karatzas Abstract One of the major difficulties of handwriting symbol recognition is the high variability among symbols because of the different writer styles. In this paper, we intro-duce a robust approach for describing and recognizing hand-drawn symbols tolerant to these writer style differences. This method, which is invariant to scale and rotation, is based on the dynamic time warping (DTW) algorithm. The symbols are described by vector sequences, a variation of the DTW distance is used for computing the matching distance, and K-Nearest Neighbor is used to classify them. Our approach has been evaluated in two benchmarking scenarios consist-ing of hand-drawn symbols. Compared with state-of-the-art methods for symbol recognition, our method shows higher tolerance to the irregular deformations induced by hand-drawn strokes.
 Keywords Document analysis  X  Graphics recognition  X  Symbol recognition  X  Handwriting recognition  X  Sequence alignment 1 Introduction Symbol recognition is one of the main topics of Graphics Recognition, which has been an intensive research work in the last decades, covering technical symbol recognition [ 37 ], handwritten symbol recognition [ 2 ], symbol indexing and spotting [ 34 ], or even the recognition of degraded symbols (e.g. [ 45 , 47 , 48 ]).

Graphical languages are expressive and synthetic tools for communicatingideasinsomedomains.Agraphicallanguage consists of an alphabet of symbols and the rules defining the valid combinations among them. Thanks to the recognition of the alphabet of symbols of these graphical languages, com-bined with domain-dependent knowledge, the whole docu-ment has a meaning, allowing its automatic processing.
Hand-drawn symbol recognition is a particular case of handwriting recognition, which is one of the most signifi-cant topics within the field of document image analysis and recognition (DIAR). Over the last years, relevant research achievements have been attained. Simultaneously, commer-cial products have become available. The progress has been noticeable in applications like bank check processing, postal sorting, historical document transcription or online recogni-tion in calligraphic interfaces. A parallel use has also been explored in writer identification for forensic sciences and writer verification in signatures. Handwriting recognition is a difficult problem due to the variability among scripts and writer styles, or even between different time periods. Due to that, commercial applications are usually constrained to controlled domains that make use of contextual or gram-matical models and dictionaries. The type of source data (handwritten separate characters vs cursive script) is also an important constraint. Focusing on cursive script recognition, the recognition approaches can roughly be classified into analytical or holistic methods. Analytical methods perform a segmentation preprocess that divides the word image in sequences of smaller units which are therefore classified in terms of associated features and lexical information. Holistic methods, which recognize words as a whole, usually describe the word image as a unidimensional signal consisting of a sequence of image features at each column. This allows to use techniques sometimes inspired by the speech recognition domain such as sequence alignment by dynamic program-ming [ 16 ] or Hidden Markov Models [ 32 ].

In this paper, we present a novel rotation invariant symbol recognition method without restricting its applicability. We choose to focus here on the case of hand-drawn graphical symbols of non-textual alphabets as a representative prob-lem. This refers to symbols that compound diagrammatic notations in graphical documents like musical scores, archi-tectural drawings, electronic and engineering diagrams, and flow charts. (see [ 21 ] for a review). In addition to the high writer style differences (see Fig. 1 ) and the inherent distor-tion of hand-drawn strokes (see Fig. 2 ), the recognition of graphical symbols has two added difficulties regarding to handwritten text recognition. First, graphical symbols are bidimensional shapes appearing in bidimensional layouts, so 1D models should be adapted to rotation, scale, and position invariance. Second, unlike text, graphical symbols can not benefit from the use of contextual and grammatical models.
To cope with the problem of hand-drawn symbol recog-nition under the conditions stated in the above paragraph, in this work we propose a method inspired by the holis-tic approaches for unconstrained handwritten word recog-nition but extended to bidimensional shapes appearing in bidimensional layouts. Our main contribution is an approach to model and classify hand-drawn symbols. The proposed method is robust against the elastic deformations typically found in handwriting and invariant to rotation and scale. The method proposed is based on the dynamic time warp-ing (DTW) algorithm [ 16 ] for signals (one-dimensional data), and it has been extended to graphical symbols (two-dimensional data). Among the two major families of meth-ods for handwriting recognition, namely sequence align-ment (e.g. DTW) and Hidden Markov Models (HMMs), our work is based on the former. The DTW algorithm has been successfullyusedforfindingthebestmatchbetweentwotime series in a noisy and complex domain. It has been already used in handwritten text recognition [ 33 ], coping with the elastic deformations and distortions in the writing style. For that reason, we maintain that the DTW algorithm can be adapted for the recognition of hand-drawn symbols. In com-parison with HMMs, the DTW approaches are more suitable for coping with the problem of hand-drawn symbol recog-nition when there is a small number of instances for each symbol (which is the case of some hand-drawn graphical dat-abases), not being enough for a successful training process. In addition, the adaptation of DTW to a rotation invariant system is easier than the adaptation of HMM, because HMM requires to train a model for each possible orientation, with the consequently increment of its time complexity.
To solve the problem of rotational invariance, classical and effective methods exist in the literature on OCR or Symbol Recognition. Methods like projections in different orienta-tions or zoning using concentric ring masks are well known. We have taken into account these ideas and extended them to a novel DTW-based algorithm. The steps of the method pro-posed are the following: First, column sequences of feature vectors from different orientations of the two input shapes to be compared must be computed. The features comprise the upper and the lower profiles and the number of pixels per region. Once we have the features for all the considered ori-entations, the DTW algorithm computes the matching cost between every orientation of the two symbols and decides in which orientation these two symbols match with the lowest cost.

The rest of the paper is organized as follows. Section 2 cor-responds to the state of the art of hand-drawn symbol recog-nition methods. In Sect. 3 , the fundamentals of the dynamic time warping (DTW) algorithm are presented. Afterward, our DTW-based method for the recognition and classifica-tion of graphical symbols is fully described, demonstrating its invariance to rotation and scale. In Sect. 4 , the exper-imental results are presented. Finally, concluding remarks are exposed in Sect. 5 . 2 State of the art of hand-drawn symbol recognition methods Hand-drawn symbol recognition has been one of the most intensive research fields of graphical symbol recognition [ 21 ]. It is close to handwritten character recognition, especially for logographic languages such as chinese char-acters [ 5 , 20 ]. In fact, some of these approaches use variants of DTW (see [ 39 ] for a survey).

In the handwriting domain, symbol recognition methods require symbol descriptors with three important properties: first,theyshouldguaranteeintra-classcompactnessandinter-class separability; second, they should be rotation and scale invariant; and third, they should cope with elastic deforma-tions and distortions caused by the high variability in hand-writting style.

Traditionally, symbol descriptors, as a particular case of shape descriptors, can be classified into statistical and struc-tural approaches. The first ones represent the image as a n-dimensional feature vector, whereas the second ones usu-ally represent the image as a set of geometric primitives and relationships among them. Statistical approaches tend to use pixels as the primitives to extract features from. The curvature scale space (CSS), Zernike moments, Generic Fourier Descriptor, Radial Angular Transform, and Shape Context descriptors are examples of these statistical approaches. The CSS [ 26 ] descriptor only takes into account the symbol silhouette and can only be used for closed curves, but it is tolerant to rotation. On the contrary, Shape Con-text [ 2 ] can work with non-closed curves and has good performance in hand-drawn symbols, because it is tolerant to deformations, but it requires point-to-point alignment of the symbols to be compared before their alignment. The generic Fourier descriptor (GFD) [ 46 ] applies a 2D Fou-rier Transform to the polar representation of the image and is rotation and scale invariant. The angular radial trans-form (ART) [ 14 ] decomposes the shape in an orthogonal basis, taking use of a radial and angular function. It has good performance for general shapes, and it is robust to noise. Zernike moments [ 13 ] are widely used for hand-drawn symbols, as well as online systems [ 10 ], because they preserve properties of the shape and are invariant to rota-tion, scale, and deformations. There are also several sta-tistical approaches for online symbol recognition, which can also use on-line information such as speed or pressure. Although they are usually more focused in human inter-faces, a few works are briefly mentioned next: In [ 30 ], a method applied to logic diagrams is proposed, which uses geometric features and template matching. In the method proposed in [ 43 ], the symbol is represented as a sequence of coordinates, and matching is based on curvature dis-tance. Miyao and Maruyama [ 25 ] present a hand-drawn music symbol recognition system, consisting of the com-bination of two classifiers: the first one uses chain codes for representing the strokes, while string-edit distance is used for matching; the second classifier is used for com-plex strokes, dividing strokes into regions, and computing the directional feature for each region. Golubitsky and Watt [ 9 ] propose the recognition of multi-stroke symbols using truncated Legendre X  X obolev expansions of the coordinate functions for creating the feature vectors and classifying using support vector machines.

In structural approaches, straight lines and arcs are usually the basic primitives. Strings, graphs, or trees represent the relations between these primitives. The similarity measure is therefore performed by string, tree, or graph matching. A few examples of structural approaches are briefly described next: the attributed graph grammars [ 3 ] can cope with partially occluded symbols, while Spectral models [ 19 ] and Region AdjacencyGraphs [ 22 ] arewell-suitedtodescribesymbols in hand-drawn documents, showing good performance in front of distortions typically found in these documents. Deform-able models [ 40 ] are invariant to distortions and rotation, but the basic primitives are lines, thus not being suitable for symbols with arcs and curves. Hidden Markov Models arealsowidelyusedinoffline[ 27 ] and online symbol rec-ognition methods [ 44 ]. Basically the structure of the sym-bol is described by the sequence of states that generate the image, and the recognition consists in finding the sequence of states with the highest probability. Concerning structural approaches for online symbol recognition, Fonseca et al. [ 6 ] propose a method for recognizing architectural symbols, using fuzzy logic and geometric features; Peng et al. [ 31 ]pro-pose a constrained partial permutation algorithm which uses binary and ternary topological spatial relationships for the recognition of symbols; and Mas et al. [ 24 ] describe a com-plete system for recognizing architectural drawings, repre-senting the data as trees and proposing adjacency grammars with distortions measures for adapting them to sketches.
Mathematical symbol recognition requires a mixed strat-egy, because it requires text recognition and graphics (sym-bols)recognition.Itisaveryactiveresearchfield(see[ 4 ]fora survey), which also includes several online systems: Shi et al. [ 36 ] propose a symbol decoding and graph generation algo-rithm; and a full mathematical expression recognizer system is defined in [ 8 ], which involves symbol recognition (using both online and offline features) and structural analysis of multi-stroke characters using context-free grammars. 3 A DTW-based approach for graphical symbol recognition Since the approach proposed in this paper is based on the DTW algorithm, we will start this section with a short intro-duction before detailing our approach. The DTW algorithm was first introduced by Kruskal and Liberman [ 16 ] for putt-ing series into correspondence. This technique was first used in the context of speech recognition, a domain in which the time series are notoriously complex and noisy. The method was used for coping with noise and variations in speech speed. Beside speech recognition, this technique has been widely used in many other applications: chemical engineer-ing, gesture recognition, signatures, robotics, bioinformatics, music, shape retrieval, or Data Mining [ 1 , 11 , 12 , 29 ]. DTW hasbeenalsoappliedtothehandwrittentextrecognitionfield, being used in both offline [ 15 , 17 , 33 ] and online approaches [ 28 , 42 ].

The basic dynamic time warping algorithm achieves good results when working with one-dimensional data and with handwritten words in documents. Concerning the hand-drawn symbol domain, the method must be adapted to cope with the variations in writing style and rotation. In the first part of this section, the fundamentals of DTW are presented. Afterward, the architecture for our DTW-based system is fully described, and its benefits for hand-drawn symbol rec-ognition are presented. Compare to the classical DTW, the proposed method introduces two main changes: first, dif-ferent features are used and second, the computation of the DTW distance has been modified, combining information at certain orientations of the symbol. 3.1 DTW for one-dimensional signals The DTW algorithm [ 16 ] is used for comparing signals by matching two one-dimensional vectors. It is a much more robust distance measure for time series than Euclidean dis-tance, allowing similar samples to match even if they are out of phase in the time axis (see Fig. 3 ). DTW can distort (or warp) the time axis, compressing it at some places and expanding it at others, finding the best matching between two samples.
 Let us define the DTW distance of two time series C = x 1 ... x M and Q = y 1 ... y N as DTWCost ( C , Q ) (see Fig. 4 a). For this purpose, a matrix D ( i , j ) (where i = 1 ... M , j = 1 ... N ) of distances is computed using dynamic programming: D ( i , j ) = min d 2 ( x
Performing backtracking along the minimum cost index pairs ( i , j ) starting from ( M , N ) yields the warping path (Fig. 4 b). Finally, the matching cost is normalized by the length Z of this warping path, otherwise longest time series should have a higher matching cost than shorter ones: DTW Cost ( C , Q ) = D ( M , N )/ Z (3)
The creation of this path is important, because it deter-mines which points match (Fig. 4 c) and are to be used to calculate the distance between the time series. In addition, DTW is able to handle samples of unequal length, allowing the comparison without resampling. 3.2 DTW for two-dimensional shapes In case of bidimensional data, the DTW computation must be adapted. Some work has been done in the adaptation of DTW to 2 dimensions [ 18 , 38 ], but these approaches are of a very high time complexity, reaching O ( N 4 N ) and O ( N 3 9 N ) respectively. For this reason, some research work has been focused on the reduction of the 2D problem. Generally, the reduction of dimensionality can be performed when 2D data can be encoded by 1D signals, such as shapes described by their external contours (silhouettes). Specifi-cally, for handwritten text methods, the 2D representation is typically reduced to 1D based on the assumption that text fol-lows a given text line [ 33 ]. In these cases, the time complexity of the 2D-DTW computation is significantly reduced. 3.3 Extraction of features The choice of features that better represent shapes is a key decision of the application of the DTW algorithm. In this work, we have been inspired by features representing series with a view to reduce the dimensionality. Let us first describe the approaches which have inspired our proposed represen-tation.
 In the handwritten text recognition system described by Rath and Manmatha [ 33 ], the following four features are computed for every column of a word image: the number of foreground pixels in every column; the upper profile (the distance of the upper pixel in the column to the upper bound-ary of the word X  X  bounding box); the lower profile (the dis-tance of the lower pixel in the column to the lower boundary of the word X  X  bounding box); and the number of transitions from background to foreground and viceversa. In this way, two word images A and B can be easily compared using DTW. If f k ( a i ) corresponds to the k -th feature of the col-umn i of the image A , and f k ( b j ) corresponds to the k-th feature of the column j of the image B , the matching dis-tance DTW Cost ( A , B ) is calculated using the same equa-tions (Eq. 1 , 3 ) as in Kruskal X  X  method, but instead of Eq. 2 , the computation of d 2 will be the sum of the squares of the differences between individual features: d 2 ( x
Another typical set of column features in the literature is the one proposed by Marti and Bunke [ 23 ] for handwritten word recognition. The following nine features are obtained per column: the number of foreground pixels, the center of gravity, the second moment order, the lower and upper pro-files, the differences between the lower and upper values with respect to the previous column, the number of gaps, and the number of pixels between the upper line and baseline of the word. Finally, the features described by Vinciarelli et al. [ 41 ] are also very common in the literature, consisting in a sliding window which moves from left to right. In this case, instead of the single column features, the window comprises several columns. After adjusting the size of the window to the area which contains pixels, it is divided into a 4x4 cell grid, and the number of pixels in every cell is used as a feature. Then, the 4x4 features are concatenated to a 16-dimensional feature vector.

Inspired by the above approaches, we propose a fea-ture set for symbol recognition. In this field, it is important to obtain some information about the external shape (pro-files), but also about the internal shape (distribution of pixels inside the silhouette). In fact, in other recognition fields (e.g. chinese character recognition), it has been demonstrated that the external profiles (e.g. the peripheral features) are not effi-cient enough for the recognition of certain characters [ 5 ]. For this reason, in addition to the upper and the lower profiles, our method divides every column in several regions, count-ing the number of foreground pixels per region (it can be seen as a column zoning). First, the image is normalized in terms of its size, and the following features are computed for every column of the image:  X  f 1 = upper profile.  X  f 2 = lower profile.  X  f 3 ... f S = number of foreground pixels in each region.
When computing the upper and lower profiles, a morpho-logical closing operation over the image is performed, so that few little gaps in the writing will not affect the final pro-file. Finally, all the features are normalized ( 0  X  f k  X  k = 1...S), and the features corresponding to the sum of pix-els ( f 3 ,..., f S ) are smoothed over the symbol X  X  columns using a gaussian filter for a better matching. Notice that due to the high variability in the writing style, the number of transitions per column (from background to foreground and viceversa) can confuse the system, thus, they are not used as features.
Figure 5 shows an example of the features extracted for the marked column of a music symbol: the pixels of the col-umn are used for extracting the upper and the lower profiles. Then, the column is divided in three equal regions (in this example, S = 5), and for every region the number of pixels is counted.

The reader should notice that the features f 3 ,..., f S provide an adequate information about the distribution of the pixels inside the shape. The number of regions is a parameter that can be set up to reflect the complexity of the symbols in the database. These measures will help to classify correctly shapes that have the same external con-tour but differences in their interior. Moreover, it will not get confused when comparing axially symmetrical symbols. In Fig. 6 b, one can see two similar images in terms of sil-houette (both are squares), but very different inside (a cross or a circle). Notice that the upper/lower profiles and the whole sum of pixels per column are very similar (Fig. 6 a), whereas the functions of the sum of the three regions (see Fig. 6 c) are very different, being able to discriminate the symbols. 3.4 Computation of the DTW distance Due to the fact that the slant and the orientation of graphi-cal symbols are frequently different between each other (see Fig. 7 ), symbols can not be directly and easily compared between them.

To cope with rotation invariance and hand-drawn distor-tion, we define a DTW-based distance in terms of different projections, covering the full range of possible orientations of the symbol.

Let us introduce the notation that will be used in this section:  X  A  X  : Symbol A oriented at  X  degrees.  X  B  X  : Symbol B oriented at  X  degrees.  X  a  X  i : Column i of the symbol A oriented at  X  degrees.  X  b  X  j : Column j of the symbol B oriented at  X  degrees.  X  D  X , X  ( i , j ) : Matrix which contains the cost of matching  X  MC ( X ,  X ) : Matrix which contains at the position ( X ,  X )  X  G ( X ,  X ) : Matrix which contains at the position ( X ,  X )
There are three steps in the procedure: the extraction of features at different orientations; the computation of the matching distance between all the possible combinations of orientations between the two symbols; and the computation of the final matching distance. In the first step, the two sym-bols A and B are oriented in certain angles (see Fig. 8 a), covering the range from 0 to 180  X  . For each orientation, the column sequence of feature vectors (see Fig. 8 b) defined in the previous section is obtained. In the second step, the DTW distance is computed for every combination of orien-tations of the two symbols. Thus, every orientation of the symbol A is compared to every orientation of the symbol B . It should be observed that it is necessary to obtain the fea-tures from every orientation of the two symbols, because we do not know a priori which orientation will give the high-est discriminatory power. Finally, the third step consists in determining the final matching cost, and the two angle ori-entations in which the two symbols match with the lowest cost. In fact, we can not trust in only one matching when working with 2D data, because false matchings could appear if only one direction is used (see Fig. 9 ). For this reason, we also take into account the perpendicular alignment in respect to the orientation we are considering. As a summary, we can define the final matching cost DTWCost A , B of the symbol A and B as the minimum of the results of summing MC ( X ,  X ) + MC ( X  + 90 , X  + 90 ) for each possible  X ,  X  angles.
 Let us define as A  X  = ( a  X  1 , a  X  2 ,..., a  X  M ) the symbol A oriented at  X  degrees, and B  X  = ( b  X  1 , b  X  2 ,..., b  X  symbol B oriented at  X  degrees. First, the column sequences of feature vectors F ( A  X  ) and F ( B  X  ) are computed as it has been explained in the above section (the upper/lower profile and the sum of pixels per region): F ( A  X  ) = F ( B  X  ) =
Notice that the length of every column sequence of feature vector depends on the number of columns (the width) of the projection and varies from one orientation to another.
Once the column sequences of feature vectors are com-puted, the matching cost MC ( A  X  , B  X  ) between them must be calculated. First, the matrix D will be filled in with the classical DTW method: D  X , X  ( i , j ) = min
The way of computing the distance d2 must take into account that both the upper/lower profile features and the set of sum of pixels features have to be weighted equally in the calculation. The goal is to avoid a reduced effect of the upper/lower profile in the computation of d2 whenever the feature number S is very high (which means a high number of regions for the zoning) For this reason, the two parts are weighted by 0.5 as following: d 2 ( a  X  P ( a  X  P ( a  X 
Then, the matching cost of A  X  and B  X  is normalized by the length Z ofthewarpingpath(obtainedperformingbacktrack-ing on D  X , X  ), and this value is stored in the corresponding cell of the matrix MC : MC ( X ,  X ) = D  X , X  ( M , N )/ Z (11)
This process must be repeated for all the orientations  X  = 1 ... 180 and  X  = 1 ... 180 (the step is decided ad-hoc), fill-ing all the cells in the matrix MC . Thus, every cell of the matrix MC ( X ,  X ) will contain the matching cost between the two symbols, the first one with an orientation angle of  X  degrees, and the second one with an orientation angle of  X  degrees. This means that if the two symbols are oriented in W different angles, the DTW distance is computed W 2 times.
 The next step is the computation of the final matching cost. It must be noticed that defining the final matching cost as the minimum of the DTW distances computed is not a good solu-tion. For example, two symbols, which belong to different classes, could reach the minimum matching cost if they are oriented in some specific  X  and  X  angles, but they could have veryhighmatchingcostsinotherorientationangles.Oneway to avoid this problem is to look at the perpendicular align-ment in respect to the orientation we are examining. Another option could be to take into account the matching cost of all the alignments, but it has been experimentally shown that it does not increase the discriminatory power, whereas the time complexity is increased. As an example of the problem of using only one matching, Fig. 9 shows the feature vectors of two different music symbols: in Fig. 9 a, one can see that despite the two symbols being extremely different, only the upper contour and the middle sum are adequately different functions in the DTW sense, whereas in Fig. 9 b all the five functions of the first symbol are very different from the ones of the second symbol. For this reason, we should claim that two symbols are correctly matched in  X  and  X  orientation angles (  X   X  X  0 ... 360 ] , X   X  X  0 ... 360 ] ), only if they have a low matching cost in  X  and  X  angles but also a low matching cost in the corresponding perpendicular alignment (  X  + 90 and  X  + 90  X  ). For this step, let us define as G the matrix which stores in position ( X ,  X ) the cell MC ( X ,  X ) plus its corresponding perpendicular angle: G ( X ,  X ) = MC ( X ,  X ) + MC ( X  + 90 , X  + 90 ) (12)
Thus, the matching cost DTWCost A , B of the symbols A and B will be defined as the minimum value of the matrix G , where the angles  X  and  X  correspond to the orientation angles in which the two symbols are matched: DTW Cost A , B = min ( G ) (13) Table 1 shows the pseudo-code of the algorithm.

Finally, it must be noted that with the proposed descriptor and matching strategy, we obtain a symbol descriptor and classifier methodology which is rotation invariant and robust against typical elastic deformations present in hand-drawn symbols. Concerning the complexity of the algorithm, if w corresponds to the number of angles in which every symbol is oriented, and N is the number of columns of the widest symbol image, then the complexity is O ( W 2 N 2 ) , because the DTW matching distance with order O ( N 2 ) is computed W 2 times. This complexity cost is remarkably lower than O ( N 4 N ) and O ( N 3 9 N ) of existing 2D-DTW approaches [ 18 , 38 ]. 4 Results For the evaluation of our approach, we first describe the dat-abases, metrics, comparisons, and experiments performed. 4.1 Benchmarking data Two benchmarking databases of hand-drawn symbols have been used, namely music symbols from musical scores and architectural symbols from a sketching interface in a CAD framework. These two databases have been chosen for differ-entpurposes.First,withtheclefsdatabase,weplantoanalyze the robustness of the proposed approach against deforma-tions. The data set is extracted from modern and old music scores, and it is used because of the high variability of the symbols, with important elastic deformations produced by the different writer styles. With the architectural database, we evaluate the scalability with an increasing number of clas-ses. The architectural data set contains an important num-ber of different classes with different appearance, while the inter-class variability is comparably lower. 4.2 Benchmarking methods Some benchmarking methods are chosen to compare our pro-posed features and our full DTW approach. The goal is to analyze the performance of our method but also the suitabil-ity of the set of features we propose.
 Zernike moments [ 13 ], Generic Fourier Descriptor [ 46 ], Angular Radial Transform [ 14 ], and a DTW-cyclic method are used for comparing our DTW approach. Zernike moments, GFD and ART are classical shape description methods in the literature. They have been used in symbol recognition methods, because they are robust to deforma-tions and invariant to scale and rotation. In our experiments, GFD has a radial frequency with value 4, and angular fre-quency with value 9; ART has a radial order with value 2, and angular order with value 11; and 7 moments are used for Zernike.

We have also implemented a variation of our own method, named cyclic DTW. The idea is to see how the performance changes when using an algorithm with a lower computational cost. It consists of taking the center of mass of the symbol, and for every orientation (from 0 to 180, with a step of 10 we only take into account the column that corresponds to the center of mass of the shape, and for this  X  X entroid column X , the features used in our approach are computed (the upper and lower profiles, the sum of pixels per region). Thus, only one feature vector describes the symbol in every orientation. Then, a DTW-cyclic approach (similar to a string matching cyclic) is used to match the matrices of the two symbols.
Concerning feature comparison, Marti X  X  [ 23 ] and Rath X  X  [ 33 ] features are compared against our features. In these experiments, our DTW approach has been applied using these features from the literature, which have been described in Sect. 3 . Thus, we compare the proposed features against the ones defined by Rath and Marti to establish the suitability of our features.

Referring the method proposed in this paper, we use the upper and lower profiles, and the sum of pixels of 3, 4, or 5 regions. The features are extracted from every orientation, from 0 to 180  X  ,alsowithastepof10  X  . 4.3 Classification For the classification of the symbols, one representative per class is usually chosen. Thus, every input symbol of the database is compared to these n representatives, and only n comparisons are computed for classifying every input symbol. Notice that with this approach, no training pro-cess is required, saving an important computational cost. The K-nearest neighbor (in our case, 1-NN) is used as the distance for the classification. The minimum distance will define the class where the input symbol belongs to. 4.4 Music clefs data set The data set of music clefs was obtained from a collection of modern and old musical scores (19th century) of the Archive of the Seminar of Barcelona. This database contains a total of 2,128 samples between the three different types of clefs from 24 different authors. These images have been obtained from original documents using a semi-supervised segmenta-tion approach [ 7 ]. The main difficulty of this database is the lack of a clear class separability because of the variation of the writer styles and the lack of a standard notation. The high variability of clefs X  appearance from different authors can be observed in the segmented clefs of Fig. 1 .

Under this scenario, the selection of the representative for each class is not easy. The printed clefs that are shown in Fig. 10 a X  X  are not similar enough to the hand-drawn ones. For this reason, we have chosen some hand-drawn representative clefs: one treble clef (Fig. 10 d), one bass clef (Fig. 10 e), and two alto clefs (Fig. 10 f,g) because of the high variability in alto clefs. The selected representatives corre-spond to the set median symbol.

Given a database consisting of a set of elements of sev-eral classes and a query class X to recognize from it, let us define Positi v es as the number of elements belonging to the class X and Negati v es as the number of elements that does not belong to X . The precision, recognition rate (recall), and fall-out (false positive rate) measures are computed using the following equations: Precision = Recognition Rate = Recall = Fall  X  out = false posit . rate =
In Table 2 , the recognition rates of the classification of this data set are shown, where the DTW approach is com-pared to the Zernike moments, GFD, ART, and DTW-cyclic, using the parameters defined above. One can see that with the proposed method, we reach a recognition rate of 96.9%, significantly improving the Zernike Moments (75.7%), ART (82.9%), GFD (78.8%), and DTW-cyclic (65.5%).

In Table 3 , we show the experimental results with some different features that can be used for describing the symbols. In this experiment, our DTW approach is always used, but making use of different features described in the literature, specifically those proposed by Rath and Marti. In Table 3 , we also show the recognition rates obtained using different numbers of regions (3, 4, and 5) in the feature extraction step of our approach. We can observe that Marti X  X  features perform very well for the trebble and bass clefs (over 97% of recognition rate), but very poor with alto clefs (90%). Contrary, Rath X  X  features achieve a good performance in alto clefs but have some problems with trebble clefs. Concern-ing our features, we can see that the division of the image in 3 regions does not provide enough discriminatory power for the high variability in alto clefs (we reach a recognition rate of 94.3%), while the recognition rate increases when the number of regions is increased, reaching a 97.1% with 5 regions. In addition, it is shown that the features we have used achieve a better overall recognition rate and precision (96.6 and 96.9%, respectively) in comparison with both of Marti X  X  (95 and 94.6%) and Rath X  X  ones (96.1 and 96.5%), with a lower fall-out (1.8% in comparison with 2.6% of Marti X  X  and 2% of Rath X  X  ones). 4.5 Architectural symbols data set The architectural symbol data set is a benchmark database [ 35 ] comprising online and off-line instances from a set of 50 symbols drawn by a total of 21 users. Each user has drawn a total of 25 symbols and over 11 instances per symbol. Thus, the database (see examples in Fig. 2 ) consists on 7,465 indi-vidual instances, consisting of 50 symbols, each class with an average of 150 samples. In this database, the represen-tative selected for each class (Fig. 11 ) corresponds to the printed symbol of the class, because both the printed and the hand-drawn symbols are quite similar.

The architectural symbol data set has been used to test the scalability of our method. In this experiment, we test the performance under an increasing number of classes. We have started the classification using the first five clas-ses. Iteratively, five classes have been added at each step, and the classification has been repeated. The higher num-ber of classes we introduce, the higher the confusion degree becomes among them. It is because of the elastic deforma-tions inherent to hand-drawn strokes and the higher num-ber of objects to distinguish. In Fig. 12 , the recognition rates are presented, showing that our approach reaches sig-nificantly higher results than Zernike moments and the DTW-cyclic approach (87% in comparison with 26 and 38%, respectively). The performance of the Zernike moments, ART, GFD, and the DTW-cyclic decreases dramatically when increasing the confusion in terms of the number of clas-ses (Zernike moments decreases from 62.5 to 26.4%, ART decreases from 67.8 to 33.9%, GFD decreases from 65.7 to 35.8%, and DTW-cyclic decreases from 61.3 to 38.4% with 50 classes), whereas our method is quite robust to the increasing of the number of different classes participating (from 97.5% with five classes decreases to 87.2% with 50 classes). 4.6 Discussions Our DTW-based method has shown to be suitable for dealing with hand-drawn symbol recognition problems, being toler-ant to elastic deformations, scale, and rotation. It has shown good performance with symbols with high variability (such as the music clefs data set), and also, shows a good scalability degree (see the results on the architectural symbols data set), outperforming the Zernike moments, ART, and GFD descrip-tors. The features proposed in our method also outperform the Rath X  X  and Marti X  X  ones.

An important point of our approach consists in the selec-tion of the number of zones and the step orientations. Con-cerning the step orientation, a low value could help in decreasing the final matching cost, because more features (for each orientation) are computed, and the matching is more precise. However, one must take into account that if the number of angles W increases, the computational cost is also increased ( O ( W 2 N 2 ). Concerning the number of zones, they are used for defining the blurring degree allowed, in other words, a low number of zones will decrease the intra-class variability (but also the inter-class variability) and vice-versa. For this reason, the optimum number of zones will depend on each data set and will be a trade-off between inter-class and intra-class variability. A common way to look for the opti-mum number of zones is to use different values on a subset of the database and selecting the value that maximizes the recognition rate. 5 Conclusions In this paper, we have presented a Dynamic Time Warping-based method for the description and classification of hand-drawn symbols. This approach is rotation and scale invariant, and robust to the deformations typical in hand-drawn sym-bols. The method proposed computes a column sequence of feature vectors for each orientation of the two symbols and computes the DTW distance, taking also into account their perpendicular alignment. Our method has been tested with two hand-drawn symbol databases (music and architec-tural) achieving high recognition rates. Comparison against some state-of-the-art descriptors shows the robustness and better performance of the proposed approach when classi-fying symbols with high variability in appearance, such as irregular deformations induced by hand-drawn strokes, low inter-class and high intra-class variabilities.

The main drawback is the high computational cost: even though the method proposed is O (w 2 N 2 ) , which is remark-ably lower than other existing 2D-DTW approaches (such as O ( N 4 N ) and O ( N 3 9 N ) ), it is still not fast enough for performing symbol recognition in large databases or even real-time symbol recognition systems. In this sense, fur-ther work can be focused on developing DTW-variations for decreasing the time complexity of the algorithm.
 References
