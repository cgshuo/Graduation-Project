 Prior studies on collaborative spam fi ltering with near-duplicate similarity matching scheme mainly represent each email by a suc-cinct abstraction derived from email content text. Since these ab-stractions of emails cannot fully catch the evolving nature of spams, we propose in this paper a novel email abstraction scheme, which considers email layout structure to represent emails. With the pro-posed abstraction, we design a ne ar-duplicate ma tching scheme to ef fi ciently match each incoming email with a huge spam database. Categories and Subject Descriptors: H.2.8 [Database Applica-tions]: Data mining General Terms: Design, Management Keywords: Email abstraction, Near-duplicate matching, Spam de-tection
The threat of unsolicited junk emails, also known as spams, be-comes more and more serious nowadays. The primary challenge of spam detection problem lies in the fact that spammers will al-ways fi nd new ways to attack spam fi lters owing to the economic bene fi ts of sending spams. Note that although the techniques used by spammers vary constantly, there is still one enduring feature: spams with identical or similar content are sent in large quantities and successively. This speci fi c feature of spams can be designated as the near-duplicate phenomenon, which is a signi fi cantkeyinthe spam detection problem.

In view of above facts, in recent years, the notion of collaborative spam fi ltering with near-duplicate similarity matching scheme has received much attention. The primary idea of the near-duplicate matching scheme for spam detection is to maintain a known spam database, formed by user feedback, to block subsequent spams with similar content. Collaborative fi ltering indicates that user knowl-edge of what spam may subsequently appear is collected to detect following spams. Although previous researchers have developed various methods on near-duplicate spam detection [1][2][3][4], these works are still subject to some drawbacks. To achieve the ob-jectives of small storage size and ef fi cient matching, prior works mainly represent each email by a succinct abstraction derived from email content text. Moreover, hash -based text representation is ap-plied extensively. One major problem of these abstractions is that they may be too brief and thus may not be robust enough to with-stand intentional attacks. A common attack to this type of repre-sentation is to insert a random normal paragraph without any sus-picious keywords into unobvious position of an email. In such a context, if the whole email content is utilized for hash-based repre-sentation, the near-duplicate par t of spams cannot be captured.
Therefore, in this paper, we explore to devise a more sophis-ticated email abstraction, which can more effectively capture the near-duplicate phenomenon of spams. Motivated by the fact that email users are capable of easily recognizing similar spams by ob-serving the layouts of emails, we attempt to represent each email based on the email layout structure . Fortunately, almost all emails nowadays are in MIME (standing for Multipurpose Internet Mail Extensions) format with the text/h tml content-type. That is, HTML content is available in an email and provides suf fi cient information about email layout structure. In view of this observation, we pro-pose in this paper the speci fi c procedure SAG (standing for Struc-ture Abstraction Generation), which generates an HTML tag se-quence to represent each email. D ifferent from prior works, SAG focuses on the email layout structure instead of detailed content text. In this regard, each paragraph of text without any HTML tag embedded will be transformed to a newly-de fi ned tag, &lt;mytext&gt; Once emails are represented by our newly-devised email abstrac-tions, two emails are viewed as n ear-duplicate if their HTML tag sequences are exactly identical to each other. Note that even when spammers insert random tags into emails, the proposed email ab-straction scheme will still retain ef fi cacy since arbitrary tag inser-tion is prone to syntax errors or ta g mismatching, meaning that the appearance of the email content will be greatly altered. The de-tailed de fi nition of near-duplicate in this paper is given as follows. De fi nition 1: Let I = { t 1 ,t 2 ,...,t i ,...,t n ,&lt;mytext&gt; } set of all valid HTML tags with one newly-created tag &lt;mytext&gt; included. An email abstraction derived from the proposed prodce-dure SAG is denoted as &lt;e 1 ,e 2 ,...,e i ,...,e m &gt; dered list of tags, where e i  X  I .Thede fi nition of near-duplicate is: "Two email abstractions  X  = &lt;a 1 , a 2 ,...,a i ,...,a b b 2 ,...,b i ,...,b n &gt; are viewed as near-duplicate if n = m ."
While a more sophisticated email abstraction is introduced, one challenging issue arises: how to ef fi ciently match each incoming email with an existing huge spam database. To resolve this is-sue, we devise an innovative tree structure, SpTrees, to store large amounts of the email abstractions of reported spams, and SpTrees contribute to substantially promoting the ef fi ciency of matching. In the design of the near-duplica te matching scheme based on Sp-Trees, we aim at reducing the number of spams and tags which are required to be compared. An HTM L tag sequence is segmented into several sub-sequences, and these sub-sequences are consecu-tively stored in the corresponding nodes from low levels to high levels. Moreover, longer sub-sequences will be put into higher lev-els, and thus the number of tags matched from root to leaf can be markedly decreased. Furthermore, we employ a hash function to map each sub-sequence to an integer. The key idea is that only sub-sequences which look like th e testing sub-sequence should be exactly matched. In such a way, most sub-sequence matching is transformed to the integer matching, and the complexity of match-ing process can hence be further reduced.
We propose the speci fi cprocedureSAGtogeneratetheemail abstraction using HTML content in email. Procedure SAG is com-posed of two major phases, Tag Extraction Phase, and Tag Reorder-ing Phase. In Tag Extraction Pha se, the name of HTML tag is ex-tracted, and tag attributes and attribute values are eliminated. In addition, each paragraph of text without any tag embedded is trans-formed to &lt;mytext&gt; . Subsequently, we rem ove certain unnec-essary tags that are often seen but contribute less to the formation of email layout structure. Moreover, this removing process also prevents arbitrary tag insertion to some degree.

On purpose of accelerating the near-duplicate matching process, we reorder the tag sequence of an email abstraction in Tag Reorder-ing Phase. Note that since the a rrangement of HTML tags is regu-lar and in pairs, various sequential patterns of tags are contained in emails. In worst case, if we consider two email abstractions which have the same tag length and differ only in their last tags, the differ-ence cannot be detected until the last tags are compared. To handle this problem, we destroy the re gularity by rearranging the order of tag sequence to lower the number of tag comparison. With the operation of the reordering proce ss, the newly-assigned serial num-bers of email abstractions with the same tag length are completely identical. Thus, the matching pr ocess can be accelerated without violating the de fi nition of near-duplicate in this paper.
One major focus of this work is to design the innovative data structure to facilitate the process of near-duplicate matching. SpT-able and SpTrees ( sp stands for spam) are proposed to store large amounts of the email abstractions of reported spams. Several Sp-Trees are the kernel of the database, and the email abstractions of collected spams are maintained in the corresponding SpTrees. Each SpTree is designed to take charge of email abstractions within a range of tag lengths, and SpTable is created to record overall in-formation of SpTrees. The i th column of SpTable links to the root of SpTree_i by a pointer, and emai l abstractions with tag lengths ranging from 2 i to 2 i +1  X  1 belong to SpTree_i.

Regarding how an email abstraction is stored in SpTree, an email abstraction is segmented into seve ral sub-sequences, and these sub-sequences are consecutively put into the corresponding nodes from low levels to high levels. In this way, an email abstraction is stored in one path from root to leaf of SpTree, and hence the matching between a testing email and known spams is processed from root to leaf. The primary goal of applying the tree data structure for storage is to reduce the number of tags required to be matched when processing from root to leaf. Since only sub-sequences along the matching path from root to leaf s hould be compared, the matching ef fi ciency can be substantially increased.

To balance the tree structure, SpTrees are designed to be binary trees. The branch direction of each SpTree is determined by a bi-nary hash function. If the fi rst tag of a sub-sequence is an opening tag (e.g., &lt;div&gt; ), this sub-sequence will be placed into the left child node. A sub-sequence whose fi rst tag is a closing tag (e.g., &lt;/div&gt; ) will be placed into the right child node. Since most HTML tags are in pairs and the proposed email abstraction is re-ordered in procedure SAG, sub-seq uences are expected to be uni-formly distributed. Moreover, on level i of each SpTree (with the root on level 0 ), each node stores sub-sequences whose tag lengths stractions with tag lengths ranging from 2 i to 2 i +1  X  1 above-mentioned arrangement, th e last sub-sequence of each email abstractioninanSpTreewillbestoredintheleafnodesonthesame level. Also note that the tag lengths of sub-sequences stored in leaf nodes of level j range from 1 to 2 j .

Overall, the advantageous features of this innovative arrange-ment are as follows. (a) The height of an SpTree is equal to where L is the tag length of the longest email abstraction in this SpTree. (b) Owing to the fact that nodes on higher level store less number of sub-sequences, we design that longer sub-sequences are put into higher levels (the tag length of the sub-sequence on level i markedly decreased. Moreover, with the hash function, the match-ing ef fi ciency is substantially increased. (c) The numbers of tags stored in the nodes of an SpTree a re expected to be similar, and hence SpTrees are balanced binary trees. Assume that there are N email abstractions in SpTree_i and sub-sequences on the same level are uniformly distributed. For each node on level j sub-sequences (the number of nodes on level j is 2 j ) whose tag the number of tags in each leaf node is less than N because not all sub-sequences in leaf nodes are with the longest allowed tag length.
In this paper, we explore a more sophisticated and robust email abstraction scheme, which conside rs email layout structure to rep-resent emails. The speci fi c procedure SAG is proposed to generate the email abstraction using HTML content in email, and this newly-devised abstraction can more effectively capture the near-duplicate phenomenon of spams. Moreover, we design the innovative data structure to facilitate the proc ess of near-duplicate matching. Acknowledgements
The work was supported in part by the National Science Council of Taiwan, R.O.C., under Contracts NSC93-2752-E-002-006-PAE. [1] E. Damiani, S. D. C. di Vimercati1, S. Paraboschi, and [2] A. Kolcz, A. Chowdhury, and J. Alspector. The impact of [3] K. YOSHIDA, F. ADACHI, T. WASHIO, H. MOTODA, [4] F.Zhou,L.Zhuang,B.Y.Zhao,L.Huang,A.D.Joseph,and
