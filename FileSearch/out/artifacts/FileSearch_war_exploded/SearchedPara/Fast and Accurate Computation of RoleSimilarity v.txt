 Nowadays, networked data, e.g. , social network and web page, is proliferating and attracting a growing interest among researchers. In sociology, individuals are often assigned  X  X ocial roles X , such as a father, a doctor, or a professor. In the past, role studies have primarily been the interest of sociologists on offline social networks [ 1 , 17 ]. Recent studies have found that roles also appear in many other type of networks, such as biological networks [ 13 ], web graphs [ 14 ], and techno-logical networks [ 15 ]. On the one hand, role discovery is indeed an important task for general graph mining and exploratory analysis since it is useful in many real applications [ 20  X  22 ]. On the other hand, measuring role-based similarity between any two vertices is also a key question in studying the roles in a network system [ 7 ]. One reason is role similarity can help to predict vertex functionality within their domains. For instance, in a protein-protein interaction network, proteins with similar roles usually serve similar metabolic functions. Thus, if the func-tion of one protein is known, all other proteins having the similar role would be predicted to have similar function [ 5 ].
 Despite its significance, the problem of role similarity has received little attention. From the viewpoint of a network, automorphic vertices have equivalent surroundings and hence share the same role. In [ 7 ], graph automorphism is encap-sulated into the role similarity measure: two automorphically equivalent vertices share the same role and have maximal role similarity . Take the network shown in Fig. 1a as an example. Clearly, vertices b and c are automorphically equiva-lent, thus they share the same role and should have the maximal role similarity. Although vertices d and e are not automorphically equivalent, they have the very similar surroundings and hence should have higher role similarity. To estimate how role-similar two vertices are, a real-valued role similarity measure, called RoleSim their similarities, i.e. , RoleSim ( b, c )=1and RoleSim ( d, e )=0 . 589. For other acceptable and reasonable. However, RoleSim assigns the same similarity score to vertex-pairs ( a, f )and ( a, g ) in Fig. 1a . That seems to be unreasonable. Furthermore, in Fig. 1b , RoleSim always thinks that vertex-pairs ( a, d ) and ( a, e 1 ) have the same role similarity regardless of the number of neighbors of vertex c . Although this situation should not be deemed as a failure of RoleSim , there is clearly room to improve its accuracy and sensitivity. In addition, the very serious problem in RoleSim is it is a time-consuming method. Its time complexity is O ( kN number of iterations, N is the number of vertices in a network, and d is the average of ( d u  X  d v )  X  log( d u  X  d v ) of all vertex-pairs ( u, v ). d vertex u .In[ 8 ], a scalable algorithm for RoleSim , namely IcebergRoleSim ,was presented to speed the computation of RoleSim while the cost is to prune the vertex-pairs whose similarities are lower than a given threshold.
 new real-valued role similarity measure to quickly and accurately compute the role similarity of any vertex-pairs. In CentSim , we employ the centralities of vertices to calculate their role similarities. When measuring two vertices X  role similarity, CentSim just compares several of their centralities, while RoleSim investigates all neighbor-pairs of the two vertices. Thus, CentSim can quickly calculate any vertex-pairs X  role similarities. Furthermore, CentSim obeys all the axiomatic role similarity properties [ 7 ] and hence is an admissible role similarity metric. To show the performance of CentSim , we review the network shown in Fig. 1a . Vertices b, c have the same role and d, e have the very similar surround-ings, CentSim can assign reasonable similarities to ( b, c ) and ( d, e ), respectively. That is CentSim ( b, c )=1and CentSim ( d, e )=0 . 756. For vertex-pairs ( a, f ) and ( a, g ), CentSim ( a, f )=0 . 376 and CentSim ( a, g )=0 . 395. For the network shown in Fig. 1b , CentSim always assigns a smaller similarity to ( a, d ) than that to ( a, e 1 ) for any value of m&gt; 1. Compared to the similarities assigned by RoleSim , these results are more reasonable.
 duction of related work, and Section 3 contains some preliminaries for this work. In Section 4 , we detail the proposed role similarity measure and prove it is an admissible role similarity metric. Section 5 demonstrates the experimental results. Finally, the conclusion of this paper is presented in Section 6 . To date, many link-based similarities have been proposed. Among them, Sim-Rank [ 6 ] is a well-known one, which is based on the intuition that two vertices are similar if they are linked by similar vertices . The computation of SimRank is iterative. In each iteration, SimRank updates the similarity score between two different vertices according to the average similarity of all their neighbor pairs in the previous iteration. The idea of SimRank seems to be solid and elegant; however, it may assign inaccurate or even counter-intuitive similarity scores [ 12 ] as well as undesirably introduces the  X  X ero-similarity X  issue [ 25 , 26 ]. With the help of maximal weighted matching of neighbor pairs, MatchSim [ 12 ] overcomes the counter-intuitive results of SimRank . In order to remedy the  X  X ero-similarity X  issue, SimRank* [ 25 ] introduces a new strategy to find more paths that are largely overlooked by SimRank . Similarly, E-Rank [ 26 ] deals with the meetings of two ver-tices that walk along any length paths and also solves the  X  X ero-similar X  issue. Motivated by the propagating mechanism of PageRank [ 19 ] and simultaneously employing the PageRank scores as vertices X  features, PageSim propagates Page-Rank score of each vertex to other vertices via links, and then represents each vertex by a feature vector. The PageSim score of one vertex-pair is derived by comparing their feature vectors.
 Role similarity, which measures the similarity of vertices based on their roles, is a special case in the link-based similarity problem. RoleSim [ 7 ], an admissible role similarity metric, was proposed to evaluate how role-similar two vertices are. Two main properties make RoleSim a role similarity metric. The first is when updating the similarity between two different vertices, RoleSim adopts the maximal weighted matching between their neighbors. And the second one is the initialization of RoleSim is admissible. In this section, we give the necessary background and notations before we discuss role similarity further. 3.1 Role Similarity Properties A social network or other complex network is defined as an undirected graph G ( V, E ) where V is the vertex set and E represents the edge set. For a given vertex u in graph G , the set of its neighbors is denoted as N ( u ) and the degree of u is the number of its neighbors, denoted as d u , d u Given a graph G ( V, E ) and two vertices u, v  X  V ,an automorphism of G is a permutation  X  of V such that ( u, v )  X  E iff (  X  ( u ) , X  ( v )) vertices u and v are automorphically equivalent , denoted as u To theoretically depict the role similarity measure, Jin et al .[ 7 ] formulated a series of axiomatic properties that all role similarity measures should obey. Definition 1 (Axiomatic Role Similarity Properties). Let G ( V, E ) be a graph and s ( u, v ) be the similarity score between any two vertices u, v axiomatic properties of role similarity are developed as follows: 1) Range: s ( u, v )  X  [0 , 1] . 2) Symmetry: s ( u, v )= s ( v, u ) . 3) Automorphism confirmation: If u  X  v , s ( u, v )=1 . 4) Transitive similarity: If u  X  v, x  X  y , then s ( u, x )= s ( u, y )= s ( v, x )= s ( v, y ) . 5) Triangle inequality: d ( u, x )  X  d ( u, v )+ d ( v, x ) ,where d ( u, v )=1 If s ( u, v ) obeys the first four properties, it is an admissible role similarity measure .If s ( u, v ) satisfies all five properties, it is called an admissible role similarity metric .
 3.2 Centrality Centrality is a general measure of vertex activity in a network and can be calculated by several metrics. The most popular ones are degree , closeness , betweenness and eigenvector centrality [ 18 ]. These measures determine the rela-tive importance of a vertex within a network, particularly a social network. In a social network, vertices with larger values of centrality measures are powerful vertices and occupy the critical positions [ 4 ].
 a vertex with higher degree is inclined to have a greater ability of local influence than others, or to be closer to the center of a network. Closeness measures the reachability of a vertex to other vertices. Formally, it is the average length of all shortest paths from a given vertex to all others in a network. Higher closeness value of a vertex indicates more vertices can be reached with shorter paths, which fits the human intuition of  X  X entrally located. X  The betweenness of a vertex can commonly be interpreted as the frequency that this vertex lies on the shortest paths between any two vertices. A vertex with high betweenness usually occupies a critical position which connects two different regions and controls the information flow between different communities. Eigenvector centrality measures the influence or importance of a vertex. The basic idea of eigenvector centrality is that the influence of a vertex is recursively defined by the influence of its neighbors. PageRank [ 19 ] can be treated as a variant of eigenvector centrality. In this section, we describe the proposed new role similarity measure, CentSim . 4.1 Definition of CentSim The basic idea of our similarity measure comes from two aspects. The first one is the role of a vertex is deeply influenced by its position in a network. And the second one is centrality is a general measure of how the position of a vertex is within a network [ 18 ]. Thus, centrality can be elected as a favorable tool to evaluate role similarity. Consequently, in CentSim , we employ vertex X  X  centralities to calculate their role similarities. The formal computation of CentSim is given in Definition 2 .
 Definition 2 (CentSim). Given a graph G(V,E) and two vertices u, v the CentSim score between u and v is defined as: where l is the number of different centralities adopted in w i &gt; 0 is the weight of centrality c i .  X  i ( u, v ) is defined as: where c i ( u ) is the value of the centrality c i of u . In Equation 2 , we define From Definition 2 , we can see that the core of the computation of CentSim score is to compare the centrality values of vertices. Suppose the centrality values of vertices are obtained in advance. Clearly, the CentSim score between any two vertices can be computed straightforwardly. In our implementation, three centralities, i.e. , PageRank, Degree and Closeness, are employed. In default, we set the weights of the three centralities equally to 1. 4.2 Admissibility of CentSim Theorem 1 (Admissibility). CentSim is an admissible role similarity metric. To prove Theorem 1 , we can separately prove that CentSim obeys each of the five axiomatic role similarity properties listed in Definition 1 . Trivially, CentSim holds true for the Range (property 1) and Symmetry (property 2). For the Tran-sitive similarity (property 4), Jin et al .[ 7 ] proved that it is implied by the Tri-angle inequality property. Therefore, in the following, we only need to prove that CentSim satisfies the Automorphism confirmation (property 3) and Trian-gle inequality (property 5).
 Lemma 2. For any two vertices u, v in graph G ,if u  X  v then c Actually, two automorphically equivalent vertices are identical with respect to all graph theoretic properties and hence have the same centrality score on every possible measure (see chapter 12 in [ 24 ]).
 Proof of Automorphism Confirmation. Since u  X  v , in the light of Lemma Proof of Triangle Inequality. Given any vertices x , y and z in G ,weget Let c i ( x )= a , c i ( z )= b and c i ( y )= c , then Inequality 3 holds true. [ 23 ]. If one or two or all of a , b and c are 0s, Inequality 3 also holds true, since we defined that 0 0 = 1 in Definition 2 . Therefore, CentSim satisfies the Triangle inequality property.
 is to say, CentSim is an admissible role similarity metric. 4.3 Complexity of CentSim Suppose the centrality values of vertices are given in advance. Obviously, the time complexity of CentSim is O ( lN 2 )( l N ) where N is the number of vertices in graph G and l is the number of centralities used in CentSim . In fact, l is a constant when CentSim is implemented, thus the time complexity of CentSim is reduced to O ( N 2 ). To obtain the similarity of all vertex-pairs, we need to compute N ( N  X  1) / 2 similarity scores and record lN centrality values. Therefore, the space complexity of CentSim is O ( lN + N 2 ). In this section, we experimentally study the performance of CentSim in terms of efficiency and effectiveness. Five baselines are SimRank [ 6 ], SimRank* [ 25 ], MatchSim [ 12 ], PageSim [ 11 ]and RoleSim [ 7 ]. 5.1 Experimental Setup and Datasets All experiments are conducted on a machine with AMD Opteron 8347 4 core CPU and 16GB DDR2 memory. The operating system is Suse Linux Enter-prise Server 10 SP2. CentSim and five baselines are implemented in C++, while the scores of PageRank, Degree and Closeness centrality are computed by the NetworkX 1 package of Python. In [ 25 ], the authors presented an algorithm for computing SimRank* by means of fine-grained memoization , namely memo-gSR* . However, in this paper, we only implement the naive algorithm of SimRank* .We set the damping factors C =0 . 8 for both SimRank and SimRank* ,and  X  =0 . 1 for RoleSim . The initialization of RoleSim is ALL-1 [ 7 ].
 datasets from varying fields as benchmarks, which are PGP [ 16 ], Yeast [ 2 ], Enron [ 9 ]andDBLP 2 . The DBLP is a co-author network derived from 7-year publica-tions (2006-2012) in conferences of SIGMOD, VLDB, ICDE, KDD, ICDM, and SDM. Each network is treated as an undirected unweighted graph and pruned into its largest connected component. The statistics are listed in Table 1 . 5.2 Comparison of Time Performance This section compares the time performance of CentSim with the five baselines. We perform each measure on the four benchmark datasets to compute the sim-ilarities of all vertex-pairs and then count the running time. The results of time are listed in Table 2 . From Table 2 , we can clearly see that CentSim outperforms the others on all benchmarks. This achievement of CentSim is due to its straight-forward computation of similarity. The last row in Table 2 gives the total time of computing the scores of PageRank, Degree and Closeness centrality. As shown in Table 2 , even counting the time of computing centralities, CentSim still costs the least time compared with the baselines. Therefore, our CentSim is more efficient than the state-of-the-art on assigning the similarity scores for vertex-pairs. 5.3 Comparison of Accuracy Performance For the time performance, it is easy to evaluate by tracking the total running time. However, evaluating the performance of accuracy is quite hard, since it is difficult to identify a benchmark in which the real roles of vertices are identified or the role similarities of vertices are known. To delineate roles, two alternatives are utilized in this work: (1) as in [ 7 ], we use K -shell [ 3 ] as a proxy; (2) we adopt the roles of vertices discovered by the method proposed in [ 27 ] as ground-truth. To quantitatively evaluate the performance of accuracy of a role similarity measure, two criteria are utilized in this paper.
 The first criterion comes from the following idea. That is, the higher role similarity score two vertices have, the more likely they are within the same shell or share the same role. To formulate this idea, we compute the fraction of top ranked vertex-pairs that are within the same shells or share the same roles. The accuracy performance evaluated by the fraction based on the two alter-natives are shown in Fig. 2 and 3 , respectively. Obviously, CentSim achieves the best performance on accuracy while RoleSim obtains the second best. In Fig. 2 , on both PGP and Yeast, all measures, except SimRank* , do well for the top 0 . 01% vertex-pairs. However, CentSim markedly outperforms the baselines when more top-ranked vertex-pairs are considered. On Enron, PageSim unexpectedly achieves the very bad results, while others do well for the top 0 . 01% and 0 . 1% vertex-pairs. And furthermore, when the range is expanded, CentSim still does well, while the performance of both SimRank and SimRank* decline significantly. In our viewpoint, two reasons cause the poor accuracy of PageSim on Enron: one is the variety of vertex X  X  degree is large, and the other is that the feature propa-gating mechanism makes PageSim to assign high similarity scores to vertex-pairs cross-shells. For the top 0 . 01% vertex-pairs ranked by PageSim , the maximum, average and variance of the difference of degree of vertex-pair are 1382, 12.118 and 1375.711, respectively. On DBLP, CentSim , RoleSim , MatchSim and PageSim do very well for the top 0 . 01% vertex-pairs; CentSim and RoleSim do well for the top 0 . 1% and 1% vertex-pairs. But CentSim shows better performance on accu-racy than RoleSim for the top 5% and 10% vertex-pairs. In Fig. 3 , the results are similar to those of Fig. 2 . Due to lack of space, the details are omitted. In one word, experimental results in Fig. 2 and 3 indicate that more similar vertex-pairs ranked by CentSim are more likely to be within the same roles. The basic opinion of the second criterion is that the role similarity of two ver-tices within-role (or shell) should be bigger than that of the other vertices cross-role (or shell). So, we group all vertex-pairs into two parts: within-role pairs, P and cross-role pairs, P c . To quantify the accuracy of similarity measures, we use the AUC statistic . It can be interpreted as the probability that a randomly cho-sen within-role pair (a pair in P w ) is given a higher role similarity score than a randomly chosen cross-role pair (a pair in P c ). In the implementation, among n independent comparisons, if there are n cases that the within-role pair has the higher score, and n cases that the within-role pair and the cross-role pair have the same score, as in the research of link prediction [ 10 ], we define AUC in Eq. 4 . tively. Generally speaking, CentSim can give overall better accuracy than the baselines. After CentSim , RoleSim performs the next best, while the others, particularly PageSim and SimRank , perform far worse. These results show that CentSim has high probability to assign large role similarity scores for vertex-pairs within-role.
 strate that CentSim is not only more efficient than the state-of-the-art but also outperforms them in accuracy. Therefore, we can conclude that the framework of measuring role similarities of vertices by comparing their centrality scores is competitive. Consequently, CentSim is competent to the task of role similarity. In this paper, we proposed a novel and qualified similarity measure, namely CentSim , to quickly and accurately assign the role similarity between any two vertices of a network. We observe that the role of a vertex is related to its position in a network and centrality generally measures the position of a vertex in a network. Motivated by these two aspects, CentSim computes the role similarity between two vertices by means of comparing their corresponding centralities. Importantly, CentSim is an admissible role similarity metric since it obeys all the axiomatic role similarity properties.
 and effectiveness compared with SimRank , SimRank* , MatchSim , PageSim and RoleSim on four real-world datasets. The experimental results demonstrate that CentSim achieved overall best performance on both time and accuracy compared with the state-of-the-art. Thus, CentSim is a qualified role similarity metric.
