
The explosion in the number of documents on the Web necessitates automated approaches that organize and summarize large document col-lections on a complex topic. Existing methods for multi-document summarization (MDS) are de-signed to produce short summaries of 10-15 doc-ten times larger and proportionately longer sum-maries: they either cannot run on large input or produce a disorganized summary that is difficult to understand.

We present a novel MDS paradigm, hierarchi-cal summarization , which operates on large doc-ument collections, creating summaries that orga-nize the information coherently. It mimics how someone with a general interest in a complex topic would learn about it from an expert  X  first, the ex-pert would provide an overview, and then more
The explosion in the number of documents over the Web necessitates automated approaches that organize and summarize large document collec-tions on a complex topic. Existing methods for multi-document summarization (MDS) can handle 10-15 documents and create a short flat summary, but are insufficient for large-scale summarization.
For large-scale summarization, we need summa-rizers that organize the information coherently and enable personalized interaction with the summary so that users can explore the various aspects of in-formation in different levels of detail based on in-dividual interest.

To this end, we present a novel MDS paradigm, hierarchical summarization . Hierarchical summa-rization is designed to operate on large document collections. It mimics how someone with a gen-eral interest in a complex topic would learn about it from an expert  X  first, the expert would give an overview, and then more specific information about various aspects. It has the following novel characteristics: specific information about various aspects. Hi-erarchical summarization has the following novel characteristics:  X  The summary is hierarchically organized  X  Each non-leaf summary is associated with a  X  A user can navigate within the hierarchical For example, given the topic,  X 1998 embassy bombings, X  the first summary (Figure 1) might mention that the US retaliated by striking Afghanistan and Sudan. The user can click on this information to learn more about these attacks. In this way, the system can present large amounts of information without overwhelming the user, and the user can tailor the output to their interests.
In this paper, we describe S UMMA , the first hierarchical summarization system for multi-of related news articles. S UMMA hierarchically clusters the sentences by time, and then summa-rizes the clusters using an objective function that optimizes salience and coherence.

We conducted an Amazon Mechanical Turk (AMT) evaluation where AMT workers compared the output of S UMMA to that of timelines and flat summaries. S UMMA output was judged superior more than three times as often as timelines, and users learned more in twice as many cases. Users overwhelmingly preferred hierarchical summaries to flat summaries (92%) and learned just as much.
Our main contributions are as follows:  X  We introduce and formalize the novel task of  X  We present S UMMA , the first hierarchical  X  We present a user study which demonstrates
In the next section, we formalize hierarchical summarization. We then describe our methodol-ogy to implement the S UMMA hierarchical sum-marization system: hierarchical clustering in Sec-tion 3 and creating summaries based on that clus-tering in Section 4. We discuss our experiments in Section 5, related work in Section 6, and conclu-sions in Section 7. We propose a new task for large-scale summariza-tion called hierarchical summarization . Input to a hierarchical summarization system is a set of re-lated documents D and a budget b for each sum-mary within the hierarchy (in bytes, words, or sen-tences). The output is the hierarchical summary H , which we define formally as follows. Definition A hierarchical summary H of a docu-ment collection D is a set of summaries X orga-nized into a hierarchy. The top of the hierarchy is a summary X 1 representing all of D , and each summary X i consists of summary units x i,j ( e.g. the j th sentence of summary i ) that point to a child summary, except at the leaf nodes of the hierarchy.
A child summary adds more detail to the infor-mation in its parent summary unit. The child sum-mary may include sub-events or background and reactions to the event or topic in the parent.
We define several metrics in Section 4 for a well-constructed hierarchical summary. Each summary should maximize coverage of salient in-formation; it should minimize redundancy ; and it should have intra-cluster coherence as well as parent-to-child coherence .

Hierarchical summarization has two important strengths in the context of large-scale summariza-tion. First, the information presented at the start is small and grows only as the user directs it, so as not to overwhelm the user. Second, each user directs his or her own experience, so a user inter-ested in one aspect need only explore that section of the data without having to view or understand the entire summary. The parent-to-child links pro-vide a means for a user to navigate, drilling down for more details on topics of interest.

There are several possible organizing principles for the hierarchy  X  by date, by entities, by loca-tions, or by events. Some organizing principles will fit the data in a document collection better than others. A system may select different orga-nization for different portions of the hierarchy, for example, organizing first by location or prominent entity and then by date for the next level. Having defined the task, we now describe the methodology behind our implementation, S
UMMA . In future work we intend to design a system that dynamically selects the best organiz-ing principle for each level of the hierarchy. In this first implementation, we have opted for tem-poral organization, since this is generally the most appropriate for news events.

The problem of hierarchical summarization as described in Section 2 has all of the requirements of MDS, and additional complexities of inducing a hierarchical structure, processing an order of mag-nitude bigger input, generating a much larger out-put, and enforcing coherence between parent and child summaries.

We simplify the problem by decomposing it into two steps: hierarchical clustering and summariz-ing over the clustering (see Figure 2 for an exam-ple). A hierarchical clustering is a tree in which if a cluster g p is the parent of cluster g c , then each sentence in g c is also in g p . This organizes the information into manageable, semantically-related sections and induces a hierarchical structure over the input.

The hierarchical clustering serves as input to the second step  X  summarizing given the hierarchy. The hierarchical summary follows the hierarchi-cal structure of the clustering. Each node in the hierarchy has an associated flat summary, which summarizes the sentences in that cluster. More-over, the number of sentences in a flat summary is exactly equal to the number of child clusters of the node, since the user will click a sentence to get to the child summary. See Figure 2 for an illustration of this correspondence.

Because we are interested in temporal hierar-chical summarization, we hierarchically cluster all the sentences in the input documents by time. Unfortunately, neither agglomerative nor divisive clustering is suitable, since both assume a binary split at each node (Berkhin, 2006). The number of clusters at each split should be what is most natural for the input data. We design a recursive clustering algorithm that automatically chooses the appropri-ate number of clusters at each split.
 Before clustering, we timestamp all sentences. We use SUTime (Chang and Manning, 2012) to normalize temporal references, and we parse the sentences with the Stanford parser (Klein and Manning, 2003) and use a set of simple heuristics to determine if the timestamps in the sentence re-fer to the root verb. If no timestamp is given, we use the article date. 3.1 Temporal Clustering After acquiring the timestamps, we must hierar-chically cluster the sentences into sets that make sense to summarize together. Since we wish to partition along the temporal dimension, our prob-lem reduces to identifying the best dates at which to split a cluster into subclusters. We identify these dates by looking for bursts of activity.

News tends to be bursty  X  many articles on a topic appear at once and then taper out (Kleinberg, 2002). For example, Figure 3 shows the number of articles per day related to the 1998 embassy bomb-ings published in the New York Times (identified using a key word search). There were two main events  X  on the 7th, the embassies were bombed and on the 20th, the US retaliated through mis-sile strikes. The figure shows a correspondence between these events and news spikes.

Ideal splits for this example would occur just before each spike in coverage. However, when there is little differentiation in news coverage, we prefer clusters evenly spaced across time. We thus choose clusters C = { c 1 ,...,c k } as follows: where C is a clustering, B ( C ) is the burstiness of the set of clusters, E ( C ) is the evenness of the clusters, and  X  is the tradeoff parameter.
 burst ( c ) is the difference in the number of sen-tences published the day before the first date in c and the average number of sentences published on the first and second date of c : where d is a date indexed over time, such that d j is a day before d j +1 , and d i is the first date in c . pub ( d i ) is the number of sentences published on d . The evenness of the split is measured by: where size ( c ) is the number of dates in cluster c .
We perform hierarchical clustering top-down, at each point solving for Equation 1.  X  was set using a grid-search over a development set. 3.2 Choosing the number of clusters We cannot know a priori the number of clusters for a given topic. However, when the number of clusters is too large for the given summary budget, the sentences will have to be too short, and when the number of clusters is too small, we will not use enough of the budget. We set the maximum num-ber of clusters k max and minimum number of clus-ters k min to be a function of the budget b and the average sentence length in the cluster s avg , such that k max  X  s avg  X  b and k min  X  s avg  X  b/ 2 .
Given a maximum and minimum number of clusters, we must determine the appropriate num-ber of clusters. At each level, we cluster the sen-tences by the method described above and choose the number of clusters k according to the gap statistic (Tibshirani et al., 2000). Specifically, for each level, the algorithm will cluster repeatedly with k varying from the minimum to the maxi-mum. The algorithm will return the k that max-imizes the gap statistic: where W k is the score for the clusters computed with Equation 1, and E  X  n is the expectation under a sample of size n from a reference distribution.
Ideally, the maximum depth of the clustering would be a function of the number of sentences in each cluster, but in our implementation, we set the maximum depth to three, which works well for the size of the datasets we use (300 articles). After the sentences are clustered, we have a struc-ture for the hierarchical summary that dictates the number of summaries and the number of sentences in each summary. We also have the set of sen-tences from which each summary is drawn.

Intuitively, each cluster summary in the hierar-chical summary should convey the most salient information in that cluster. Furthermore, the hier-archical summary should not include redundant sentences. A hierarchical summary that is only salient and nonredundant may still not be suitable if the sentences within a cluster summary are dis-connected or if the parent sentence for a summary does not relate to the child summary. Thus, a hi-erarchical summary must also have intra-cluster coherence and parent-to-child coherence . 4.1 Salience Salience is the value of each sentence to the topic from which the documents are drawn. We measure salience of a summary ( Sal ( X ) ) as the sum of the saliences of individual sentences ( Following previous research in MDS, we com-puted individual saliences using a linear regres-sion classifier trained on ROUGE scores over the DUC X 03 dataset (Lin, 2004; Christensen et al., 2013). This method finds those sentences more salient that mention nouns or verbs that occur fre-quently in the cluster.

In preliminary experiments, we noticed that many sentences that were reaction sentences were given a higher salience than action sentences. For example, the reaction sentence,  X  X resident Clinton vowed to track down the perpetrators behind the bombs that exploded outside the embassies in Tan-zania and Kenya on Friday, X  would have a higher score than the action sentence,  X  X ombs exploded outside the embassies in Tanzania and Kenya on Friday. X  This problem occurs because the first sen-tence has a higher ROUGE score (it covers more important words than the second sentence). To ad-just for this problem, we use only words identified in the main clause (heuristically identified via the parse tree) to compute our salience scores. 4.2 Redundancy We identify redundant sentences using a linear regression classifier trained on a manually la-beled subset of the DUC X 03 sentences. The fea-tures include shared noun counts, sentence length, TF*IDF cosine similarity, timestamp difference, and features drawn from information extraction such as number of shared tuples in Open IE (Mausam et al., 2012). 4.3 Summary Coherence We require two types of coherence: coherence be-tween the parent and child summaries and coher-ence within each summary X i .

We rely on the approximate discourse graph (ADG) that was proposed in (Christensen et al., 2013) as the basis for measuring coherence. Each node in the ADG is a sentence from the dataset. An edge from sentence s i to s j with positive weight indicates that s j may follow s i in a coher-ent summary, e.g. continued mention of an event or entity, or coreference link between s i and s j . A negative edge indicates an unfulfilled discourse cue or co-reference mention.
 Parent-to-Child Coherence: Users navigate the hierarchical summary from parent sentence to child summary, so if the parent sentence bears no relation to the child summary, the user will be un-derstandably confused. The parent sentence must have positive evidence of coherence with the sen-tences in its child summary.

We estimate parent to child coherence as the co-herence between a parent sentence and each sen-tence in its child summary as: where x p c is the parent sentence for cluster c and w weights from x p c to x c,i in the ADG G .
 Intra-cluster Coherence: In traditional MDS, the documents are usually quite focused, allowing for highly focused summaries. In hierarchical sum-marization, however, a cluster summary may span hundreds of documents and a wide range of infor-mation. For this reason, we may consider a sum-mary acceptable even if it has limited positive evi-dence of coherence in the ADG, as long as there is no negative evidence in the form of negative edges. For example, the following is a reasonable summary for events spanning two weeks: s 1 Bombs exploded at two US embassies. s 2 US missiles struck in Afghanistan and Sudan.
Our measure of intra-cluster coherence mini-mizes the number of missing references . These are coreference mentions or discourse cues where none of the sentences read before (either in an an-cestor summary or in the current summary) con-tain an antecedent: 4.4 Objective Function Having estimated salience, redundancy, and two forms of coherence, we can now put this informa-tion together into a single objective function that measures the quality of a candidate hierarchical summary.

Intuitively, the objective function should bal-ance salience and coherence. Furthermore, the summary should not contain redundant informa-tion and each cluster summary should honor the given budget, i.e., maximum summary length b . We treat redundancy and budget as hard con-straints and coherence and salience as soft con-straints. Lastly, we require that sentences are drawn from the cluster that they represent and that the number of sentences in the summary corre-sponding to each non-leaf cluster c is equivalent to the number of child clusters of c . We optimize:
The tradeoff parameters  X  and  X  were set based on a development set. 4.5 Algorithm Optimizing this objective function is NP-hard, so we approximate a solution by using beam search over the space of partial hierarchical summaries. Notice the contribution from a sentence depends on individual salience, coherence ( CCoh ) based on sentences visible on the user path down the hi-erarchy to this sentence, and coherence ( PCoh ) based on its parent sentence and its child sum-mary. Since most of the sentence contributions de-pend on the path from the root to the sentence, we build our partial summary by incrementally adding a sentence top-down in the hierarchy and from first sentence to last within a cluster summary.

To account for PCoh , we estimate the contribu-tion of the sentence by jointly identifying its best child summary. However, we do not fix the child summary at this time  X  we simply use it to estimate PCoh when using that sentence. Since computing the best child summary is also intractable we ap-proximate a solution by a local search algorithm over the child cluster.

Overall, our algorithm is a two level nested search algorithm  X  beam search in the outer loop to search through the space of partial summaries and local search (hill climbing with random restarts) in the inner loop to pick the best sentence to add to the existing partial summary. We use a beam of size ten in our implementation. Our experiments are designed to evaluate how ef-fective hierarchical summarization is in summa-rizing a large, complex topic and how well this helps users learn about the topic. Our evaluation addresses the following questions:  X  Do users prefer hierarchical summaries for  X  Are hierarchical summaries more effective  X  How informative are the hierarchical sum- X  How coherent is the hierarchical structure in
We compared S UMMA against two baseline sys-tems which represent the main NLP methods for large-scale summarization: an algorithm for cre-ating timelines over sentences (Chieu and Lee, the same budget (over 10 times the traditional MDS budget, which is 665 bytes).

We evaluated the questions on ten news topics, representing a range of tasks: (1) Pope John Paul II X  X  death and the 2005 Papal Conclave, (2) Bush v. Gore, (3) the Tulip Revolution, (4) Daniel Pearl X  X  kidnapping, (5) the Lockerbie bombing handover of suspects, (6) the Kargil War, (7) NATO X  X  bomb-ing of Yugoslavia in 1999, (8) Pinochet X  X  arrest in London, (9) the 2005 London bombings, and (10) the crash and investigation of SwissAir Flight 111. We chose topics containing a set of related events that unfolded over several months and were promi-nent enough to be reported in at least 300 articles.
We drew our articles from the Gigaword corpus, which contains articles from the New York Times and other major newspapers. For each topic, we used the 300 documents that best matched a key word search. We selected topics which were be-tween five and fifteen years old so that evaluators would have relatively less pre-existing knowledge about the topic. 5.1 User Preference In our first experiment, we simply wished to eval-uate which system users most prefer. We hired Amazon Mechanical Turk (AMT) workers and as-signed two topics to each worker. We paired up workers such that one worker would see output from S UMMA for the first topic and a competing system for the second and the other worker would see the reverse. For quality control, we asked workers to complete a qualification task first, in which they were required to write a short summary of a news article. We also manually removed spam from our results. Previous work has used AMT workers for summary evaluations and has shown high correlations with expert ratings (Christensen et al., 2013). Five workers were hired to view each topic-system pair.

We asked the workers to choose which format they preferred and to explain why. The results are as follows:
Users preferred the hierarchical summaries three times more often than timelines and over ten times more often than flat summaries. When we examined the reasons given by the users, we found that the people who preferred the hierar-chical summaries liked that they gave a big pic-ture overview and were then allowed to drill down deeper. Some also explained that it was eas-ier to remember information when presented with the overview first. Typical responses included,  X  X ould gather and absorb the information at my own pace, X  and,  X  X asier to follow and understand. X  When users preferred the timelines, they usually remarked that it was more familiar, i.e.  X  X  liked the familiarity of the format. I am used to these timelines and they feel comfortable. X  Users com-plained that the flat summaries were disjointed, confusing, and very frustrating to read. 5.2 Knowledge Acquisition Evaluating how much a user learned is inherently difficult, more so when the goal is to allow the user the freedom to explore information based on indi-vidual interest. For this reason, instead of asking a set of predefined questions, we assess the knowl-edge gain by following the methodology of (Sha-haf et al., 2012)  X  asking users to write a paragraph summarizing the information learned.

Using the same setup as in the previous exper-iment, for each topic, five AMT workers spent three minutes reading through a timeline or sum-mary and were then asked to write a description of what they had learned. Workers were not al-lowed to see the timeline or summary while writ-ing. We collected five descriptions for each topic-system combination. We then asked other AMT workers to read and compare the descriptions writ-ten by the first set of workers. Each evaluator was presented with a corresponding Wikipedia article and descriptions from a pair of users (timeline vs. S
UMMA or flat MDS vs. S UMMA ). The descrip-tions were randomly ordered to remove bias. The workers were asked which user appeared to have learned more and why. For each pair of descrip-tions, four workers evaluated the pair. Standard checks such as approval rating, location filtering, etc. were used for removing spam. The results of this experiment are as follows: Prefer Indiff. Prefer S UMMA 40% 22% F LAT -MDS 38%
Descriptions written by workers using S UMMA were preferred over twice as often as those from timelines. We looked more closely at those cases where the participants either preferred the time-lines or were indifferent and found that this pref-erence was most common when the topic was not dominated by a few major events, but was instead a series of similarly important events. For exam-ple, in the kidnapping and beheading of Daniel Pearl there were two or three obviously major events, whereas in the Kargil War there were many smaller important events. In latter cases, the hier-archical summaries provided little advantage over the timelines because it was more difficult to ar-range the sentences hierarchically.

Since S UMMA was judged to be so much supe-rior to flat MDS systems in Section 5.1, it is sur-prising that users descriptions from flat MDS were preferred nearly as often as those from S UMMA . While the flat summaries were disjointed, they were good at including salient information, with the most salient tending to be near the start of the summary. Thus, descriptions from both S UMMA and flat MDS generally covered the most salient information. 5.3 Informativeness In this experiment, we assess the salience of the information captured by the different systems, and the ability of S UMMA to organize the information so that more important information is placed at higher levels.
 ROUGE Evaluation: We first automatically assessed informativeness by calculating the ROUGE-1 scores of the output of each of the sys-tems. For the gold standard comparison summary, Note that there is no good translation of ROUGE for hierarchical summarization. Thus, we simply use the traditional ROUGE metric, which will not capture any of the hierarchical format. This score will essentially serve as a rough measure of coverage of the entire summary to the Wikipedia article. The scores for each of the systems are as follows:
None of the differences are significant. From this evaluation, one can gather that the systems have similar coverage of the Wikipedia articles. Manual Evaluation: While ROUGE serves as a rough measure of coverage, we were interested in gathering more fine-grained information on the in-formativeness of each system. We performed an additional manual evaluation that assesses the re-call of important events for each system.

We first identified which events were most im-portant in a news story. Because reading 300 arti-cles per topic is impractical, we asked AMT work-ers to read a Wikipedia article on the same topic and then identify the three most important events and the five most important secondary events. We aggregated responses from ten workers per topic and chose the three most common primary and five most common secondary events.

One of the authors then manually identified the presence of these events in the hierarchical sum-maries, the timelines and the flat MDS summaries. Below we show event recall (the percentage of the events that were mentioned). Prim. 96% 74% 93% The difference in recall between S UMMA and T
IMELINE was significant in both cases, and the difference between S UMMA and F LAT -MDS was not. In general, the flat summaries were quite re-dundant, which contributed to the slightly lower event recall. The timelines, on the other hand, were both incoherent and at the same time re-ported less important facts.

We also evaluated at what level in the hierar-chy the events were identified for the hierarchical summaries. The event recall shows the percentage of events mentioned at that level or above in the hierarchical summary: 81% of the primary events are present in the first or second level, and 76% of the secondary events are mentioned by the third level. While recog-nizing primary events is relatively simple because they are repeated frequently, identification of im-portant secondary events often requires external knowledge. 5.4 Parent-to-Child Coherence We next tested the hierarchical coherence. One of the authors graded how much each non-leaf sen-tence in a summary was coherent with its child summary on a scale of one to five, with one be-ing incoherent and five being perfectly coherent.
We found that for the top level of the summary, the parent sentence generally represented the most important event in the cluster and the child sum-mary usually expressed details or reactions of the event. The lower coherence scores were often the result of too few lexical connections or lack of a theme or story. While the facts of the sentences made sense together, the summaries sometimes did not read as if they were written by a human, but as a series of disparate sentences.

For the second level, the problems were more basic. The parent sentence occasionally expressed a less important fact that the child summary did not then expand on or, more commonly, the child summary was not focused enough. This result stems from two problems in our algorithm. First, summarizing sentences are rare, making good choices for parent sentences difficult to find. The second problem relates to the difficulty in identify-ing whether two sentences are on the same topic. For example, suppose the parent sentence is,  X  X  Swissair plane Wednesday night crashed off Nova Scotia, Canada. X  A very good child sentence is,  X  X he airline confirmed that all passengers died. X  However, based on their surface features, the sen-tence,  X  X  plane made an unscheduled landing after a Swissair plane crashed off the coast of Canada, X  appears to be a better choice.

Even though there is scope for improvement, we find these coherence scores encouraging for a first algorithm for the task. Traditional approaches to large-scale summariza-tion have included flat summaries and timelines. There are two primary shortcomings to these ap-proaches: first, they require the user to sort through large amounts of potentially overwhelm-ing information, and second, the output is static  X  users with different interests will see the same information. Below we describe related work on traditional MDS, structured summaries, timelines, discovering threads of documents and the uses of hierarchies in generating summaries. 6.1 Traditional MDS Traditionally, MDS systems have focused on three to six sentence summaries covering 10-15 docu-ments. Most extractive summarization research aims to maximize coverage while reducing redun-dancy (e.g. (Carbonell and Goldstein, 1998; Sag-gion and Gaizauskas, 2004; Radev et al., 2004)). Lin and Bilmes (2011) proposed a state-of-the-art system that uses submodularity in sentence selec-tion to accomplish these goals. Christensen et al. (2013) presented an algorithm for coherent MDS, but it does not scale to larger output.
 Structured Summaries: Some research has ex-plored generating structured summaries. These approaches attempt to identify major aspects of a topic, but do not compile content to describe those aspects. Rather, they rely on pre-existing, la-beled paragraphs (for example, a paragraph titled,  X  X ymptoms of Meningitis X ). Aspects are identi-fied either by a training corpus of articles in the same domain (Sauper and Barzilay, 2009), by an entity-aspect LDA model (Li et al., 2010), or by Wikipedia templates of related topics (Yao et al., 2011). These methods assume a common struc-ture for all topics in a category, and do not allow for more than two levels in the structure.
 Timeline Generation: Recent papers in timeline generation have emphasized the relationship with summarization. Yan et al. (2011b) balanced co-herence and diversity to create timelines, Yan et al. (2011a) used inter-date and intra-date sentence dependencies, and Chieu and Lee (2004) used sen-tence similarity. Others have emphasized identify-ing important dates, primarily by bursts of news (Swan and Allen, 2000; Akcora et al., 2010; Hu et al., 2011; Kessler et al., 2012). While time-lines can be useful for understanding events, they do not generalize to other domains. Additionally, long timelines can be overwhelming, short time-lines have low information content, and there is no method for personalized exploration.
 Document Threads: A related track of research investigates discovering threads of documents. While we aim to summarize collections of infor-mation, this track seeks to identify relationships between documents. This research operates on the document level, while ours operates on the sen-tence level. Shahaf and Guestrin (2010) formal-ized the characteristics of a good chain of articles and proposed an algorithm to connect two speci-fied articles. Gillenwater et al. (2012) proposed a probabilistic technique for extracting a diverse set of threads from a given collection. Shahaf et al. (2012) extended work on coherent threads to finding coherent maps of documents, where a map is set of intersecting threads representing how the threads interact and relate.
 Summarization and Hierarchies: A few papers have examined the relationship between summa-rization and hierarchies. Some focused on cre-ating a hierarchical summary of a single docu-ment (Buyukkokten et al., 2001; Otterbacher et al., 2006), relying on the structure inherent in sin-gle documents. Others investigated creating hier-archies of words or phrases to organize documents (Lawrie et al., 2001; Lawrie, 2003; Takahashi et al., 2007; Haghighi and Vanderwende, 2009).
Other research identifies the hierarchical struc-ture of the documents and generates a summary that prioritizes more general information accord-ing to the structure (Ouyang et al., 2009; Celikyil-maz and Hakkani-Tur, 2010), or gains coverage by drawing sentences from different parts of the hier-archy (Yang and Wang, 2003; Wang et al., 2006). We have introduced a new paradigm for large-scale summarization called hierarchical summa-rization, which allows a user to navigate a hier-archy of relatively short summaries. We present S
UMMA , an implemented hierarchical news sum-ness in a user study that compares S UMMA with a timeline system and a flat MDS system. When compared to timelines, users learned more with S
UMMA in twice as many cases, and S UMMA was preferred more than three times as often. When compared to flat summaries, users overwhelming preferred S UMMA and learned just as much.

This first implementation performs temporal clustering  X  in future work, we will investigate dy-namically selecting an organizing principle that is best suited to the data at each level of the hierar-chy: by entity, by location, by event, or by date. We also intend to scale the system to even larger document collections, and explore joint clustering and summarization. Lastly, we plan to research hierarchical summarization in other domains. We thank Amitabha Bagchi, Niranjan Balasubra-manian, Danish Contractor, Oren Etzioni, Tony Fader, Carlos Guestrin, Prachi Jain, Lucy Van-derwende, Luke Zettlemoyer, and the anonymous reviewers for their helpful suggestions and feed-back. We thank Hui Lin and Jeff Bilmes for providing us with their code. This research was supported in part by ARO contract W911NF-13-1-0246, DARPA Air Force Research Labora-tory (AFRL) contract FA8750-13-2-0019, UW-IITD subcontract RP02815, and the Yahoo! Fac-ulty Research and Engagement Award. This pa-per is also supported in part by the Intelligence Advanced Research Projects Activity (IARPA) via AFRL contract number FA8650-10-C-7058. The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes notwithstanding any copyright annotation thereon. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of IARPA, AFRL, or the U.S. Government.
