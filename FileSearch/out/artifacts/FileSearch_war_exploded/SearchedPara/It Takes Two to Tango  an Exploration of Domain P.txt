 As the heterogeneity of data sources are increasing on the web, and due to the sparsity of data in each of these data sources, cross-domain recommendation is becoming an emerg-ing research topic in the recent years. Cross-domain col-laborative filtering aims to transfer the user rating pattern from source (auxiliary) domains to a target domain for the purpose of alleviating the sparsity problem and providing better target recommendations. However, the studies so far have either focused on a limited number of domains that are assumed to be related to each other (such as books and movies), or a division of the same dataset (such as movies) into different domains based on an item characteristic (such as genre). In this paper, we study a broad set of domains and their characteristics to understand the factors that affect the success or failure of cross-domain collaborative filtering, the amount of improvement in cross-domain approaches, and the selection of best source domains for a specific target domain. We propose to use Canonical Correlation Analy-sis (CCA) as a significant major factor in finding the most promising source domains for a target domain, and suggest a cross-domain collaborative filtering based on CCA (CD-CCA) that proves to be successful in using the shared infor-mation between domains in the target recommendations.
In the last five years, cross-domain recommendation has emerged as a hot topic in the field of recommender systems. The idea of cross-domain recommendation is to use rating information accumulated in one domain (known as a source or auxiliary domain) to improve the quality of recommenda-tions in another domain (known as a target domain). The proponents of cross-domain recommendation argue that this technology might be especially helpful when the user has few or no ratings in the target domain or if the quality of recom-mendation in the target domain is low because of a lack of information. Modern users may have a solid user profile in a system that they have previously used, but may be required c  X  to start using a new domain or system, which would call for more research on cross-domain recommendations.

One of the important problems in cross-domain recom-mendation is the selection of source domains appropriate for a target domain. Previous work either assume that the best domain pairs can be decided by similarity of their nature (such as books and movies) [23, 17], or split the same dataset into multiple domains [1]. While the majority of early works have typically focused on one or two pairs of related domains (such as books and movies) and return quite positive results, which confirms the hopes of cross-domain enthusiasts [2, 17, 23], we argue that the success of cross-domain recommen-dations depends on domain characteristics, and specifically on shared (latent) information among domains. A recent work by Shapira et al. [19] has also delivered mixed results for cross-domain recommendations. Just as it takes two to tango, it takes two matching domains that are ready to work together (and not just a specific recommendation approach) to succeed in the context of cross-domain recommendation. This poses new questions: What makes a good auxiliary do-main? How should we choose the best auxiliary domain for a specific target domain?
In this paper, we present our attempts to examine the suc-cess and failure of cross-domain collaborative filtering across a large number of domain pairs. Our goals are to broadly explore the added value of cross-domain recommendations in comparison with traditional within-domain recommenda-tions by using two different cross-domain collaborative fil-tering approaches, and to achieve some progress in uncover-ing the main mystery of cross-domain recommendation: how can we determine whether a pair of domains is a good candi-date for applying cross-domain recommendation techniques? In order to address our later goal, we pilot a canonical corre-lation approach as a possible predictor of successful domain pairs and examine a range of features of a single domain and domain pairs in order to see how they could be used to improve predictions.

In summary, our contribution in this paper is as follows:
The rest of the paper is structured as follows. In Sec-tion 2, we overview related work in the area of cross-domain recommendations. We propose a CCA-based cross-domain collaborative filtering approach in Section 3. Then, we con-duct a detailed analysis of important factors in cross-domain collaborative filtering based on an extensive multi-domain dataset in Section 4. Finally, we summarize our findings and discuss future work in Section 5.
Although cross-domain recommendation has recently emerged, it has gained increasing attention and is a promising way to develop new methods to improve recommendations, es-pecially in a cold-start setting [17]. Cross-domain recom-mender systems aim to take advantage of information among related source (auxiliary) domains to recommend items in a target domain [6]. According to [13], domains can be cat-egorized as system, data, and temporal domains. These categories represent, respectively, different datasets that a recommender system is built upon, various representation of user preferences (explicit or implicit), and various time points in which the data is gathered.

Recent work on cross-domain recommendations has been focused on both collaborative filtering [7, 9, 10, 15, 17] and content-based approaches [2, 4, 11, 18, 21]. However, in this paper, we focus on cross-domain collaborative filtering ap-proaches. Many cross-domain algorithms assume that the source and target domains share some of the users or items. However, in some of the cross-domain approaches, the as-sumption is that no shared users or items are available in the domains [3, 14]. In this paper, we assume the existence of shared users among domains.

In this paper, we propose a cross-domain collaborative filtering method, based on CCA. CCA has been used in dif-ferent sources of the same domain recommenders or to find the correlation between the content (such as text or image) of the resources in cross-domain recommender systems. To the best of our knowledge, it has not yet been used in a pure, rating-based, cross-domain collaborative filtering set-ting. For example, in the area of recommender systems, Faridani has used CCA to predict hotel ratings from textual comments of the hotels and their sentiment analysis [5]. In [16], Ohkushi has used Kernel CCA to find the relationship between music pieces and human motion to recommend mu-sic to users. Yang et al. [24] have proposed a cross-domain feature learning algorithm that uses CCA for inferring fea-tures of semantic information in the data. However, Yang et al. have not yet used their model in recommender systems.
Canonical correlation analysis (CCA) is a multivariate statistical model that studies the interrelationships among sets of multiple dependent variables and multiple indepen-dent variables. It is the most generalized member of the fam-ily of multivariate statistical techniques [8]. It is related to factor analysis in the sense that it creates composites of vari-ables, and is related to discriminant analysis in finding in-dependent dimensions for each variable set. The goal of this analysis is to produce the maximum correlation between the dimensions. As a result, canonical correlation finds the op-timum structure or dimensionality of each variable set that maximizes the relationship between independent and depen-dent variable sets. In other words, if we have X  X  R m  X  n and Y  X  R p  X  n , CCA finds two projection vectors w x  X  R and w y  X  R p that maximize the correlation coefficient: Since Equation 1 is not affected by re-scaling of w x and w (namely, the multiplication of these vectors by a constant  X  does not change the value of  X  ), we can maximize  X  as follows. It can be shown that solving Equation 2 is equivalent to finding the eigenvectors of top eigenvalues of the general-ized eigenvalue problem in Equation 3, in which  X  is the eigenvalue that corresponds to the eigenvector w x . To compute multiple projection vectors, we can solve the optimization problem in Equation 4, in which matrix W consists of multiple projection vectors. To avoid the over-fitting of  X  and the singularity of XX T term  X I is added to Equation 3. We have the constraint  X  &gt; 0 in this regularization term. Eventually, the regularized CCA attempts to solve the generalized eigenvalue problem in Equation 5.
 Sun et al. solve the regularized CCA problem, using a least squares formulation of it, with the Least Angle Regression algorithm [20].
As explained in Section 3.1, CCA evaluates the latent lin-ear correlations between two sets of variables. To draw an analogy between CCA and cross-domain recommender, we suppose that there are n common users between the source and target domains. We consider the source (auxiliary) do-main in cross-domain recommender as the independent vari-able set X (with n users and m items), and the target do-main as the dependent variable set Y (with n users and p items). Note that here we are working on m  X  n and p  X  n item-user matrices, as opposed to the usual user-item matrices in collaborative filtering. The value  X  in Equa-tion 1 shows the maximum canonical correlation that can be achieved by rotating the X and Y spaces in direction of w x and w y , respectively. In other words, CCA calculates the components of each domain, that are consisted of sets of items from each of the domains, which are most similar to each other based on user rating behavior. Also, it deter-mines how much the two components are correlated to one another.
 As a result, if we know the ratings in the source domain X and ratings in the target domain Y , we can find the w x and w y that maximize the canonical correlation between X and Y . In other words, with the projections vectors w x w , we know how the ratings of a combination of items in the source domain affect the ratings of an item in the target domain. Consequently, after adding the user ratings of the source domain X , we can understand how all of the ratings of a user in the source domain affect the same user X  X  ratings in the target domain. Eventually, we can estimate the rat-ings of users in the target domain  X  Y by using the projection vectors, the source domain ratings, and the canonical cor-relation value [22]. The calculation of estimated rating ( is shown in Equation 6. Thus far, this approach only fo-cuses on the first canonical component (projection vectors) that maximize the correlation (  X  or R-statistic). There are other components between the domains that can indicate different projection vectors and correlations (R-Statistics) for each pair of them. In this case of multiple projections, the estimated rating matrix  X  Y is calculated as in Equation 7. Here, if we assume that c pairs of projection vectors are calculated, P is a diagonal c  X  c matrix, in which the diag-onal elements are  X  s for each canonical component; W x is a m  X  c matrix consisted of c projection vectors of size m  X  1; and W y is a p  X  c matrix of c projection vectors of size p  X  1. Eventually, if the target rating matrix (  X  Y ) is incomplete and has some missing values, we can estimate W x and W y (  X  W and  X  W y ) by calculating the canonical correlations between the source rating matrix X and incomplete target matrix  X  Then, we can use the estimated projection vectors  X  w x and  X  w to estimate a complete rating matrix  X  Y . More specifically, if we want to predict the unknown rating of user i on item j in the incomplete target domain ( X  y j,i ), we follow Equation 8 after finding  X  W x and  X  W y on matrices X and  X  Y . Here, X k,i is the rating of user i on item k ;  X  W y j,l refers to the target projection element for the item j and component l ; and  X  W X k,l is the source projection element for the item k and component l . As an abbreviation, we use the name CD-CCA for this CCA-based cross-domain recommender.
In this section, we briefly describe our dataset, explain the approach of our analysis, and present our detailed analysis for each of our research questions.
We used the Yelp Academic dataset 1 to run our exper-iments. The dataset contains user reviews on items from http://www.yelp.com/academic_dataset User Size 9 11013 1064.09 424 Item Size 8 4435 406.89 252.5
Rating Density 0.0017 0.1581 0.017 0.0084 various categories and subcategories. To obtain a better distinction between domains, we choose the 21 parent cate-gories in the dataset. We also use the star ratings of reviews within each category. Each rating can be between 1 and 5. For each pair of categories, we find out the common users (the users who have rating reviews in both of the selected domains). To obtain more reliable results, we exclude the category pairs, within which the number of common users is smaller than the number of items in any of the two cate-gories. For each pair of categories, we run the experiments twice: once with the first category as the source and the sec-ond category as the second domain, and once the other way around. Eventually, we end up with 158 category (domain) pairs. A summary of these data statistics is shown in Table 1.

We use a 5-fold user-stratified cross-validation on the tar-get domain, in which 80% of the users are used in the train-ing set and the rest is used as the test user set for each fold. We add 20% of each test user X  X  target reviews to the train-ing set, to obtain a partial profile for each user, and the rest of the reviews to the test set. We use 15% of the data as validation set for finding the best parameters. We use all of the source domain ratings of common users in the source training dataset for cross-domain recommendations.
In our analysis, we aim to gain a more detailed under-standing of cross-domain collaborative filtering and the fac-tors that affect its performance. We use three algorithms: a cross-domain collaborative approach, a single-domain ap-proach applied to the cross-domain data, and a single-domain recommendation only on the target dataset. Our dataset consists of various pairs with different data characteristics, such as number of users, items, data density, and others. The goal of our analysis is to understand the importance and scale of each of these factors on cross-domain recom-mendations, including the approach and dataset character-istics. Our first questions are: how do each of the algo-rithms perform on the data and how do they compare to each other? Are the RMSE of these approaches correlated? Is there any possibility that cross-domain recommendations harm the results that can be achieved by single-domain rec-ommendation? Does the better performance of cross-domain algorithms occur only because of merging the two source and target datasets, or does it also depend on the ability of the cross-domain recommender to understand the common in-formation among these datasets X  ratings?
After analyzing the algorithm aspect of cross-domain col-laborative filtering, we analyze its data aspect. In other words, we want to know the reason behind different results that we get for each of the approaches. The second question that we have in mind is about the data characteristics that affect the performance (RMSE) of each approach. Is there a data characteristic that significantly affects the results?
After finding the data characteristics that correlate with the results from each approach, we analyze the character-istics that affect the improvement of predictions in cross-domain collaborative filtering. Considering the domain pairs, Figure 1: RMSE of algorithms on 158 domain pairs ordered by the RMSE of the CCA-based cross-domain algorithm in which we have significantly better cross-domain recom-mendations, what can better explain this improvement? We examine the domain-pair characteristics in addition to the characteristics of each domain, and we study the correlation of the CCA X  X  results with the improvement of cross-domain recommenders over the single-domain recommender.

In the final part of our analysis, we look at the specific samples of domain pairs to get a deeper understanding of the results of previous analyses. More specifically, we look at the domain pairs with a high CCA to see if they can ob-tain a higher improvement in cross-domain recommenders versus the single-domain recommender. We examine the domain-pairs with a high CCA and low improvement in a closer look to understand the reason behind this behavior. As a reverse look at these results, we look at the domain pairs with a high improvement ratio and their characteris-tics. More specifically, we look at the domain-pairs with a high improvement in cross-domain recommenders versus the single-domain recommender, and a low CCA, to understand the other factors that affect this result.

As baseline algorithms, in addition to CD-CCA, we run the SVD++ algorithm [12] 2 in two single-domain and cross-domain modes. In the single domain SVD++ (SD-SVD), we only use the target domain ratings to predict the test user ratings in the target domain. For the cross-domain SVD++ (CD-SVD), we add the source domain item space to the tar-get domain item space, as if the two categories are coming from the same (single) domain. This is done by concatenat-ing the source and target domain rating matrices. We run the SVD++ algorithm on the joined domain matrices.
We run CD-CCA, CD-SVD, and SD-SVD on the 158 do-main pairs in the data. We evaluate the algorithms based on Root Mean Squared Error (RMSE). Figure 1 shows the RMSE of all three algorithms on the 158 domain pairs, in-cluding the 95% confidence interval. To better comprehend the difference between algorithms, we order the domain pairs based on RMSE of CD-CCA algorithm on them. Due to the visualization limitations, we cannot show the name of all domain pairs in the picture. However, it can be seen that in most of the domain pairs, CD-CCA has performed better than both CD-SVD and SD-SVD. Also, in most of the do-main pairs, CD-SVD has performed better than SD-SVD. Using GraphChi Software ( http://graphchi.org ) Table 2: Correlation of RMSE of algorithms with each other. **: significant with p  X  value &lt; 0 . 01 Correlation (R-Values) CD-CCA CD-SVD SD-SVD CD-CCA  X  0.7896** 0.7779** CD-SVD 0.7896**  X  0.9550** SD-SVD 0.7779** 0.9550**  X  CD-CCA performs significantly 3 different than SD-SVD in 77 domain pairs, and different than CD-SVD in 74 domain pairs. CD-SVD performs significantly different than SD-SVD in 9 domain pairs.

In some cases, the RMSE of cross-domain recommenders is more than the RMSE of the single-domain recommender. More specifically, the CD-CCA average RMSE is more than RMSE of SD-SVD in 8 domain pairs; the average RMSE of CD-CCA is more than the average RMSE of CD-SVD in 14 pairs; and the average RMSE of CD-SVD is more than SD-SVD in 51 domain pairs. However, these differ-ences are not statistically significant in any of these domain pairs ( p  X  value &lt; 0 . 05). As a result, the cross-domain rec-ommenders work at least as well as the single-domain recom-mender in our dataset. We can conclude that the CD-CCA works significantly better than the CD-SVD in 77 domain pairs; CD-CCA works significantly better than the CD-SVD in 74 domain pairs; and CD-SVD works better than SD-SVD in 9 domain pairs. In the rest of the domain pairs, CD-CCA and CD-SVD work similar to SD-SVD. As a result, we can see that cross-domain collaborative filtering approaches ei-ther improve the recommendation results, or will not signif-icantly change them in our dataset. However, the CD-CCA method works better than CD-SVD method in many of these domain pairs. It means that there is some common informa-tion between the mentioned domain pairs that is only being captured by CD-CCA, although CD-SVD has the same in-formation in its input data. Consequently, in addition to the improvement that we can obtain by adding the source data to the target domain, the CD-CCA approach shows an additional improvement. It means that performance of CD-CCA is not only because of the added data, but because of its ability to comprehend this additional data and use it to achieve better target recommendations.

We calculate the correlation between error rates of all al-gorithms in all of the domain pairs (Table 2). Based on these results, the RMSE of algorithms are highly and sig-nificantly correlated ( p  X  value &lt; 0 . 01). We can conclude that if the RMSE of single-domain recommender is low in the target domain, it is also most likely low for cross-domain recommenders, and vice versa.
We investigate the domain characteristics to evaluate their effect on experiment results. These characteristics include user space and items space sizes in each domain, as well as domain densities. We define domain density as the ratio of known rating reviews to all possible reviews (number of items multiplied by number of users).

Figure 2 shows the RMSE results of each pair of domains, sorted based on number of items in target domain. The lines represent the least square lines of each set of data. Based on the picture it appears that by decreasing the target do-0.05 p-value Figure 2: Results ordered by item space size of target do-main Figure 3: Results ordered by item space size of source do-main main X  X  item space size (represented in logarithm to the base 10), the error rate increases slightly in all three algorithms. However, the correlation between size of the target domain X  X  item size and the RMSE results is not statistically signifi-cant. In figure 3, we see the errors of each algorithm, sorted based on the item space size of the source domain. There is no significant correlation between this factor and the errors in any of the algorithms. Considering the common user size between the two domains, we sort the results based on this factor in Figure 4. Here, by increasing the number of users, we see a decrease in RMSE of both CD-CCA and CD-SVD. This correlation between RMSE of both algorithms on the 158 categories is significant, as shown in Table 3. Based on this finding, we can conclude that the more common users we have in the source and target domains, the better the cross-domain recommendations will be.

Looking at the error rates of algorithms ordered by target domain density (Figure 5), we see a slight increase of RMSE when the target domain density decreases. However, this correlation is not significant in any of the methods. The effect of source domain density on prediction error (Figure 6) is also insignificant.

Overall, we can see that the number of common users is the most significant factor among dataset characteristics in prediction error measured by RMSE. The more common users we have in the source and target domains, the better our prediction.
 Figure 4: Results ordered by number of common users in pairs of domains with p  X  value &lt; 0 . 05 CD-CCA -0.1782*(p=0.026) -0.1250 (p=0.121) -0.1239 (p=0.1245) CD-SVD -0.1745*(p=0.028) -0.1445 (p=0.070) -0.1274 (p=0.111) SD-SVD -0.1455 (p=0.068) -0.1225 (p=0.125)  X  -0.1525 (p=0.056)  X  Figure 7: RMSE of algorithms on 79 significant domain pairs, ordered by the RMSE of the CCA-Based cross-domain algorithm
In this section, we evaluate the improvement ratio of each pair of algorithms in each pair of domains and its correla-tion with each of the domain characteristics to understand what makes a good domain pair for a cross-domain recom-mender. Figure 7 shows the RMSE of all 79 domain pairs, in which either CD-CCA works significantly better than CD-SVD, or any of the cross-domain methods work significantly better than the single-domain method. As we can see in this picture, the RMSE improvement is different for differ-ent domain pairs. To understand this difference, we use the Improvement Ratio measure, which is defined as follows.
The improvement ratio of algorithm a 1 over algorithm a 2 with the source domain s i and target domain d j ( IR a 1 is equivalent to the improvement of RMSE of algorithm a 1 over algorithm a 2 , normalized by RMSE of algorithm a 2 in the source domain s i and target domain d j (Equation 9). In addition to the domain characteristics that we evaluated in the previous section, we evaluate the correlation of im-provement ratio with  X  X ser size to target item size ratio X ,  X  X ser size to source item size ratio X ,  X  X ource item size to tar-get item size ratio X ,  X  X ource density to target density ratio X , and  X  X ercentage of CCA correlation coefficients greater than 0 . 8, 0 . 9, and 0 . 95 X  4 . The results are reported in Table 4. As we can see in these results,  X  X ser size to target item size ratio X  is the only factor that has no significant correlation
The factor  X  X ercentage of CCA correlation coefficients greater than  X   X  is equivalent to the number of CCA canon-ical components that are correlated with each other by R  X  statistics &gt;  X  divided by the total number of com-ponents found by CCA. with the improvement ratio in any of the three algorithm pairs. The two most important and significant factors in all the algorithm pairs are  X  X ource density X  and  X  X ercent-age of CCA correlation coefficients greater than 0 . 95 X . The source-domain density has a negative correlation with the improvement ratio: the denser the auxiliary data, the less the cross-domain algorithms perform better than the single-domain algorithm. This is an interesting finding, as based on our previous findings, the source domain density does not have any significant effect on the RMSE of each algorithm. As a result, it only affects the RMSE improvement of cross-domain algorithms if they are significantly better than the single-domain algorithm.

On the other hand, the more between-domain components of CCA have a canonical correlation of more than 0 . 95, the more the IR. We can see that this factor is significant in all of the algorithm pairs. However, the two other CCA-related factors ( X  X ercentage of CCA correlation coefficients greater than 0 . 9 X  and  X  X ercentage of CCA correlation coeffi-cients greater than 0 . 8 X ) are only significant for the improve-ment of CD-CCA versus CD-SVD and SD-SVD algorithms, and do not significantly affect the improvement of CD-SVD over SD-SVD. While this result might be due to the lower number of domain pairs (9), in which we have a significant improvement of RMSE in CD-SVD over SD-SVD, it might also be because the CD-CCA algorithm captures more re-lationships between the two domains that can be explained by CCA components and cannot be captured by the other two algorithms.

The next important factor presented in Table 4 is  X  X arget density X . The same as  X  X ource density, X  this factor has a significant negative correlation with improvement factors for CD-CCA over both CD-SVD and SD-SVD. The correlation is not significant for CD-SVD over SD-SVD.

Among other factors,  X  X arget item size X ,  X  X ser size X , and  X  X ource item size X  have a positive correlation with IR for CD-CCA over both CD-SVD and SD-SVD. However, they do not have a significant correlation with IR for CD-SVD over SD-SVD. The reason might be a better performance of CD-CCA over CD-SVD (and SD-SVD) in the cases where we have more items in the target or source domain. It is interesting to see that even though  X  X ser size X  is a significant factor in decreasing RMSE in both cross-domain algorithms in all domain pairs, it does not contribute to the improvement of RMSE of CD-SVD over SD-SVD, for the domain pairs in which cross-domain algorithms perform significantly better than the single-domain one.

Correlations for  X  X ser to source item ratio X  and  X  X ource to target density ratio X  factors are only significant for the IR of CD-CCA over CD-SVD. It means that the more users we have, as compared to source items, and the denser the source domain is, as compared to the target domain, the more improvement we can achieve by CD-CCA compared to CD-SVD. The factor  X  X ource to target item size ratio X  has a negative significant correlation with IR of CD-CCA over SD-SVD. Note that the RMSE of CD-CCA is still signifi-cantly less than SD-SVD in the selected pairs of domains. However, the greater this ratio, the lesser the normalized difference of RMSEs. The reason behind this might be be-cause the source item information dominates the target item information more and more in CD-CCA.
 As we can see, the only negative significant correlations in Table 4 are source and target domain densities and ratio of source item size to target item size. Ten of all 12 factors have a significant effect on improvement ratio of CD-CCA over CD-SVD, nine of the factors are significantly correlated with improvement ratio of CD-CCA over SD-SVD, and only two of them are significantly responsible for improvement ratio of CD-SVD over SD-SVD. As mentioned before, this might be because of fewer number of domain pairs, in which the CD-SVD performs significantly better than SD-SVD.
To have a better understanding of pairs of domains that have better prediction and higher improvement ratio, we look at some samples.

First, we look at the category pairs with a higher  X  X ercent-age of CCA correlation coefficients greater than 0 . 8 X  factor to see if the domain pairs with high canonical correlation values are within the suitable cross-domain pairs. Looking at the domain pairs with higher CCA correlation (the higher ten percentile of all domain pairs), in three of these domain pairs, CD-CCA works better than both CD-SVD and SD-SVD, and CD-SVD works better than SD-SVD. It means that in these three domains, the large CCA correlation af-fects the improvement of cross-domain recommenders vs. the single-domain recommender, regardless of the method. However, the CD-CCA cross-domain recommender is bet-ter than the CD-SVD cross-domain recommender in cap-turing and using this information. These three domains are  X  X ource: Food and Target: Arts and Entertainment X ,  X  X ource: Arts and Entertainment and Target: Food X , and  X  X ource: Restaurants and Target: Food. X 
In some of the domain-pairs among the top ten CCA corre-lation percentile, only CD-CCA works better than CD-SVD and SD-SVD, and there is no significant difference between SD-SVD and CD-SVD. Some of these domains are  X  X ource: Restaurants and Target: Nightlife X  (and vice versa),  X  X ource: Event Planning and Target: Hotels &amp; Travel X  (and vice versa),  X  X ource: Shopping and Target: Arts &amp; Entertain-ments X , and  X  X ource: Pets and Target: Nightlife X . Although some of these domain pairs are inherently closer to each other (such as Restaurants and Nightlife), CD-SVD cannot express these relationships to produce better recommenda-tions over SD-SVD. However, CD-CCA represents these re-lationships and their effect on the recommendation results. Notably, CD-CCA finds a correlation between some domains that do not seem very related by nature (for example, Pets and Nightlife) and can help to improve the recommendations in these domains.

However, there are some domain pairs, in which the CCA correlation is high, but we do not achieve a significant im-provement of cross-domain recommendation over single-domain recommendation in them, neither in CD-CCA nor in CD-SVD. For example,  X  X ource: Home Services and Target: Professional Services X  (and vice versa) are two of these do-main pairs that look naturally similar to each other. Looking into more details in these cases in the Appendix A, we can see that the  X  X ome Services X  and  X  X rofessional Services X  do-main densities are in the top 25 and 15 percentile of domain densities and their item sizes are in the low 15 and 20 per-centile of items sizes. Also, the number of common users in the domains are in the low 15 percentile of the domain pairs. All of these characteristics work towards lowering the IR of CD-CCA and CD-SVD algorithms and the  X  X ser size X  factor works towards increasing the RMSE of algorithms in general. It makes sense for the difference between the algo-rithms to be less significant.
 Additionally, we look at the domain pairs with a high RMSE improvement ratio that do not have a very high CCA correlation factor, to understand other factors that affect IR. For example, CD-CCA has a high IR over CD-SVD and SD-SVD in the  X  X ource: Education and Target: Local Fla-vor X  domain pair is high (3 top percentile) while the CCA correlation factor of this domain pair is low (low 15 per-centile). However, as reported in Appendix A, the source and target domains X  item sizes and user sizes are low (10, 9, and 10 lower percentiles) and the source and target densities are high (13 and 8 high percentiles). Eventually, this result might not be reliable because of the small size of data. Also, we see a high IR for the  X  X ource: Event Planning and Target: Active Life X  domain pair in CD-CCA over SD-SVD with a low CCA (lower 28 percentile). In this pair, high user size (higher 28 percentile) and target item size (higher 25 per-centile) ; and low source to target item size ratio (lower 29 percentile) and target and source sparsity (lower 29 and 32 percentiles) contribute to the high IR achievement. Again, we can see that low CCA correlations does not mean that we cannot have a good domain pair. Sometimes two sparse domains with more common users and high target item size, as compared to the source item size, can help to improve recommendations, even though they are not very correlated by CCA.

As a result, we can conclude that neither the natural simi-larity of the domains to us, nor the CCA correlation similar-ity, are enough to provide significant improvement of cross-domain recommenders over single domain recommenders. One should consider multiple factors together, including the CCA correlation, source and target domains X  densities, and item and user space sizes, in order to pick the best possible domain pairs.
In this paper we proposed a CCA-based cros-domain col-laborative filtering (CD-CCA) method. We compared CD-CCA to an SVD++ based recommender, on the joint source and target item spaces (CD-SVD++ ), and a single domain SVD++ recommender on the target domain (SD-SVD) on 158 domain pairs. Our results showed that, in our datasets, the cross-domain recommendations can be helpful in many of the domain pairs, and that they never harm the results, as compared to the single-domain recommender. These results indicate the ability of CD-CCA to capture the common in-formation in the domain pairs and using them towards a better recommendation.

Additionally, we performed an extensive exploration of dataset characteristics and domain pair factors on the error results of each algorithm and error improvement of every pair of algorithms. Our experiments show that the number of common users in the domains is an important factor for the RMSE of cross-domain recommenders: the more com-mon users in the domains, the lower the RMSE. Also, we ex-plored the effect of canonical correlations between domains and concluded that it is a very important factor in increasing the error improvement ratio and determining suitable do-main pairs. There are also other factors, such as source and target domain densities, number of common users, and num-ber of items that affect the improvement ratio. We looked at domain pair samples in the data and their characteristics to get another viewpoint of the results and found out that although some domain pairs do not seem similar to each other by nature, they might share hidden and useful infor-mation that can be captured by CCA. We conclude that, even though CCA can be very helpful in a broad set of do-mains to determine the most suitable source domains for a given target domain, we should consider these other factors to achieve more reliable results.

In future work, we aim to consider more factors, such as each domain and domain pair X  X  data distribution. Also, we plan to perform a multiple-factor analysis on these factors. This analysis can also be used to build a classifier to deter-mine if a specific source domain can help recommendations in a specific target domain.
