 In the High Level Architecture (HLA), Data Distribution Management (DDM) services [2,3,4,5,6] are used to implement data filtering, which can reduce the amount of irrelevant data being exchanged between simulation members. DDM is based transmission. Through region matching, DDM determines the supply and demand relationship between simulation members, and then the data are exchanged effectively between the members through the multicast groups which are overcast by the on multi-level grid to overcome the shortcoming of even-grid method (difficult to fit multicast groups dynamically based on current cells in which there are update complexity of region matching and make use of multicast groups to realize the filtering of data belonging to the same object class attributes. 
However, by the restriction of multicast groups resource, a region may overcast several multicast groups and various regions binding with various object class every data sent to him to filter for the data he is subscribing. Furthermore, invalid data invalid data. 
To solve the problem of invalid data and to make the simulation system more secure, this paper proposes a dynamic data distribution method based on PS-Tree. The invalid data receiving between each pair of publisher and subscriber, (b) constructing exchange by trying to reduce the invalid data receiving. 
The rest of the paper is organized as follows: Section 2 introduces the symbols and rule mining algorithms of PS-Tree. Section 5 constructs the dynamic data distribution describes future work on PS-Tree. it is necessary to transform the publication affairs and subscription affairs of system to The symbols used in this paper are summarized in Table 1. 
In a simulation system based on HLA, a number of object instance attributes the data stream will change including direction and content. The formal description of the data stream is defined as follows: simulation members is a 5-tuple E=( P, S, M, A, R ) where (1) P ={I p } is the finite set of simulation members who publish data. (2) S={I s } is the finite set of simulation members who subscribe data. (3) M={I m }is the finite set of multicast groups who transmit data between (4) A={I a }is the finite set of object class attribute who are transmitted between I p
During the process of simulation sy stem, the set of publication&amp;subscription PubsubSetNew and PubsubSetDel respectively. attribute item; I m  X  is the forwarding multicast group item. The record describes how to records is denoted as ForwardTable = {(I p , I s , I m , I a , I m  X  )}. The dynamic data distribution strategy includes following steps: (1) gaining the PubsubSet according to region matching and region overcastting processes; (2) constructing the PS-Tree according to PubsubSet; (3) mining association rules of ForwardTable according to the PS-Tree; (5) gaining the PubsubSetAdd and PubsubSetDel between two time steps, and modifying the PS-Tree according to these record sets and reflecting the modification into ForwardTable. transmission from I p to I s , and the PubsubSet reflects the whole data stream (including direction and quantity) of simulation system. The dynamic data distribution uses PS-Tree to describe the data stream in a simulation system. Definition 3. A PS-Tree (publication and subscription tree) is a converse compressed tree with structure as follows: (1) The depth of PS-Tree is 5 and each layer describes an item set, (3) Each record of PubsubSet is reflected to a branch of PS-Tree. The branch (4) Each node of PS-Tree marks its parent link, children links, node-link, count. (I PS-Tree is then constructed in the following steps: Creating the root node of the tree firstly, and then inserting each record in order of I p  X  I s  X  I m  X  I a into the tree. I I , and increase the valid count of each node by 1. Each node X  X  node-link links to the PST-Insert (p, N, m_count, m_nullcount) Input: node p, parent node N, count of valid/invalid data m_count/m_nullcount
Output: insert node p to his parent node N and increase their related count 1: if (N has a child node p  X  such that p  X  .item-name == p.item-name) then 2: increase valid_count/null_count of p  X  by m_count/m_nullcount 3: else 4: create a new node p  X  with p  X  .item-name = p.item-name 5: set its valid_count/null_count by m_count/m_nullcount respectively 6: set its parent link by N 7: set its node-link by the node-chain with same item-name and add to chain 8: return PST-Build(PubsubSet) Input: PubsubSet = {(Ip, Is, Im, Ia:count)} 
Output: PS-Tree 1: create the root node of PS-Tree 2: for each record (item[4],count) in PubsubSet do 3: m_count = (Ia == Inull)? 0 : count 4: m_nullcount = (Ia == Inull)? count : 0 5: PST-Insert(item[0], root, m_count, m_nullcount) 6: for (i=0,i&lt;4,i++) do 7: PST-Insert(item[i+1],item[i],m_count,m_nullcount) 8: return PS-Tree PST-Delete (item[4], m_count) Input: publication &amp; subscription record (I p , I s , I m , I a :count) 
Output: modified PS-Tree 1: find the branch in PS-Tree corresponding to the record 2: if (I a == I null ) then 3: decrease the null_count of each node in the branch by m_count 4: else 5: decrease the valid_count of each node by m_count 6: if (I a .valid_count == 0) then delete node I a from branch 7: if (I m .valid_count == 0 and I m .role ==  X  Forwarding  X ) then 8: rebuild PS-Tree 9: return 10: if (I m .valid_count == 0 and I m .role !=  X  Forwarded  X ) then 11: decrease the null_count of root,I p ,I s by I m  X  X  null_count and delete I m 12: if (I s .valid_count == 0) then 13: decrease the null_count of root and I p by I s  X  X  null_count and delete I s 14: if (I p .valid_count == 0) then 15: decrease the null_count of root by I p  X  X  null_count and delete I p 16: if (root.valid_count == 0) then delete root 17: return I like the first record to construct the second branch. Because this branch would share a second branch i.e. 3. I common prefix root-I p 1 -I s 3 with the second branch. Because the data of this record is invalid, each node X  X  invalid count of this branch increases by 7. 
The PS-Tree obtained after the insertion of these five records is shown in Figure 1 and the relevant algorithms of PS-Tree are given as follows. with the item-name as the key. This takes just a step to find whether a node exists and gains its pointer of address. We can gain the PS-Tree via inserting all the records into the tree, and it needs scan the PubsubSet just once, which costs O(n) time. 4.1 Confidence Calculation of PS-Tree value equals to the sum of all the nodes I si s X  valid_count, I mi .valid_count denotes the of the chain I pi -I sj -I mk . The process of invalid data is similar to valid data. 
To mine the association rule of PS-Tree, three types of confidences are proposed. (1) C sm = confidence(I m  X  I s ) 
This confidence describes the ratio of the data I s receiving from I m to the data all I s receiving from I m . (2) C psm = confidence(I p ,I m  X  I s )=support(I p I s I m )/support(I p I m ) from I p to all I s through I m . form I p to I s compared with the efficiency of other paths I p j -I s j -I m . 4.2 Role Decision of Each Path in PS-Tree To decide the role of each path with confidence, following thresholds are proposed. (1) threshold_max, threshold_min (threshold_max (0.5, 1.0), threshold_min forward data, and all the valid data other I sj receiving from I m should be forwarded by other I mj . To reduce the invalid data, the threshold_max should be as big as possible. to find an I m for an I s if the value of thredshold_max is too big. So we can properly reduce the value of threshold_max within the permission of network bandwidth to find an I m for the I s . forwarded through other I m j . (2) threshold_tran (0.5, 1.0). can be forwarded through I m . (3) threshold_min_mix (0, 1.0). C data or the data under path I p -I s -I m should be forwarded, there are too many repeated I forward other path X  X  data. 
The path I p -I s -I m of PS-Tree is defined to take one of the roles as follows. (1) Forwarded role. I a under this path should be forwarded through other I m j ; (3) Forwarding role. This path forwards not only its own valid data I a under this Procedure MineAssociation ( ) //Association rules Mining of PS-Tree
Input: PS-Tree, threshold_max, threshold_min, threshold_min_mix, 
Output: the PS-Tree marked role and transmission path 1: for each path (I p -I s -I m ) in PS-Tree do 2: calculate C sm , C psm , C mix 3: if (C sm &gt;thredshold_max) then 4: set all the other paths I p -I s -I m including I m as Forwarded role 5: if (C psm &gt;0.5) then 6: set path as Forwarding role and I p -I s .forward_channel=I m 7: else 8: if (C mix &gt;threshold_min_mix) then set path as Retained role 9: else set path as Forwarded role 10: else 11: if (C sm &lt;threshold_min) then 12: mark the role of this path as Forwarded 13: else 14: if (C mix &gt;threshold_min_mix) then set path as Retained role 15: else set path as Forwarded role 16: return compare their C mix , the largest one is used to forward data. Based on the association rule mining, the role of each path in PS-Tree is decided. The next step is to deal with this PS-Tree and to achieve the ForwardTable. 
The ForwardTable can be built by scanning PS-Tree only once. Each branch forms a forwarding record, and the forwarding I m  X  can get just by checking the role of path and the forwarding multicast group between I p and I s . Along with the time advance of simulation system, some of the records in PubsubSet real time and modify the ForwardTable. It needn X  X  reconstruct the structure of PS-Tree because the PS-Tree has been modified real time according to PubsubSetNew and PubsubSetDel. The rebuilding of distribution strategy can be realized by simply re-mining association rules of PS-Tree and gaining the new ForwardTable. The rebuilding of distribution strategy is quick. The procedure describing the modification of ForwardTable is shown as follows. Now consider the application of dynamic data distribution. Note that (a) The increase the amount of data sent by publishers to some degree, and the whole system X  X  network traffic increases. (b) For the subscribers, the quantity of invalid data they receive can be decreased to the least degree, which can decrease their burden for data filtering and ensure the safety of simulation system too. can get the performances data of dynamic data distribution, as shown in Table 2. the dynamic data distribution to modify the publication and subscription of members to reduce the receiver of invalid data and the processing burden of subscriber. (3) We can implement the real-time adjustment of distribution strategy according to the network state by modifying the values of the weights and thresholds, which ensure the system resources. The key steps of experiment include: (a) Integrating the PS-Tree structure and environment to evaluate the data exchange between simulation members via network time step, including valid and invalid data, and (c) comparing the amount of data sent under different scale simulation members and multicast groups. environments: 50 members and 30 channels, 50 members and 60 channels, 100 members and 30 channels, and 100 members and 60 channels. 
The experiment results show that: (1) The HLA DDM, by multicast technique, greatly reduces the data processing burden of publishers and the quantity of network data and release data processing burden of su bscribers. (3) Although the dynamic data network bandwidth, when compared with the reduction of invalid data, the latter covers larger proportion. Besides, this advantage is more obvious under the condition members, and enhance the stability and security of simulation system based on HLA. Association rule-based dynamic data distribution can well handle the problem of consumption and the efficiency of system real time data exchange. 
The PS-Tree can well manifest the data exchange of the whole simulation system, implement the optimization of data distribution. Besides, we can also mine the members via PS-Tree, we can provide effective data support for the decision-making of command and control, the evaluation of campaign, etc. 
