 The goal of unsupervised word segmentation is to discover correct word boundaries in natural lan-guage corpora where explicit boundaries are absent. Often, unsupervised word segmentation algorithms rely heavily on parameterization to produce the cor-rect segmentation for a given language. The goal of fully unsupervised word segmentation, then, is to recover the correct boundaries for arbitrary natural language corpora without explicit human parameter-ization. This means that a fully unsupervised algo-rithm would have to set its own parameters based only on the corpus provided to it.

In principle, this goal can be achieved by creat-ing a function that measures the quality of a seg-mentation in a language-independent way, and ap-plying this function to all possible segmentations of the corpora to select the best one. Evidence from the word segmentation literature suggests that descrip-tion length provides a good approximation to this segmentation quality function. We discuss the Min-imum Description Length (MDL) principle in more detail in the next section. Unfortunately, evaluating all possible segmentations is intractable, since a cor-pus of length n has 2 n  X  1 possible segmentations. As a result, MDL methods have to rely on an efficient algorithm to generate a relatively small number of candidate segmentations to choose between. It is an empirical question which algorithm will generate the most effective set of candidate segmentations. In this work, we compare a variety of unsupervised word segmentation algorithms operating in conjunc-tion with MDL for fully unsupervised segmentation, and find that the Bootstrapped Voting Experts (BVE) algorithm generally achieves the best performance. At a formal level, a segmentation algorithm is a function S EGMENT ( c, X  ) that maps a corpus c and a vector of parameters  X   X   X  to one of the possible segmentations of that corpus. The goal of fully unsupervised segmentation is to reduce S
EGMENT ( c, X  ) to S EGMENT ( c ) by removing the need for a human to specify a particular  X  . One way to achieve this goal is to generate a set of candidate segmentations by evaluating the algorithm for mul-tiple values of  X  , and then choose the segmentation that minimizes some cost function. Thus, we can define S EGMENT ( c ) in terms of S EGMENT ( c, X  ) :
S EGMENT ( c ) = argmin Now, selecting the best segmentation is treated as a model selection problem, where each segmentation provides a different model of the corpus. Intuitively, a general approach is to choose the simplest model that explains the data, a principle known as Occam X  X  Razor. In information theory, this intuitive princi-ple of simplicity or parsimony has been formalized as the Minimum Description Length (MDL) princi-ple, which states that the most likely model of the data is the one that requires the fewest bits to en-code (Rissanen, 1983). The number of bits required to represent a model is called its description length . Previous work applying the MDL principle to seg-mentation (Yu, 2000; Argamon et al., 2004; Zhikov et al., 2010) is motivated by the observation that ev-ery segmentation of a corpus implicitly defines a lex-icon , or set of words.

More formally, the segmented corpus S is a list of words s 1 s 2 ...s N . L ( S ) , the lexicon implicitly defined by S , is simply the set of unique words in S . The description length of S can then be broken into two components, the description length of the lex-icon and the description length of the corpus given the lexicon. If we consider S as being generated by sampling words from a probability distribution over words in the lexicon, the number of bits re-quired to represent each word s i in S is simply its surprisal,  X  log P ( s i ) . The information cost of the corpus given the lexicon is then computed by sum-ming the surprisal of each word s i in the corpus:
To properly compute the description length of the segmentation, we must also include the cost of the lexicon. Adding in the description length of the lex-icon forces a trade-off between the lexicon size and the size of the compressed corpus. For purposes of the description length calculation, the lexicon is sim-ply treated as a separate corpus consisting of char-acters rather than words. The description length can then be computed in the usual manner, by summing the surprisal of each character in each word in the lexicon: where k  X  w refers to the characters in word w in the lexicon. As noted by Zhikov et al. (Zhikov et al., 2010), an additional term is needed for the information required to encode the parameters of the lexicon model. This quantity is normally estimated by ( k/ 2) log n , where k is the degrees of freedom in the model and n is the length of the data (Rissanen, 1983). Substituting the appropriate values for the lexicon model yields:
The full description length calculation is simply the sum of three terms shown in 2, 3, and 4. From this definition, it follows that a low description length will be achieved by a segmentation that defines a small lexicon, which nonetheless reduces the corpus to a short series of mostly high-frequency words. Recent unsupervised MDL algorithms rely on heuristic methods to generate candidate segmenta-tions. Yu (2000) makes simplifying assumptions about the nature of the lexicon, and then performs an Expectation-Maximization (EM) search over this re-duced hypothesis space. Zhikov et al. (2010) present an algorithm called EntropyMDL that generates a candidate segmentation based on branching entropy, and then iteratively refines the segmentation in an attempt to greedily minimize description length.
We selected three entropy-based algorithms for generating candidate segmentations, because such algorithms do not depend on the details of any par-ticular language. By  X  X nsupervised, X  we mean op-erating on a single unbroken sequence of characters without any boundary information; Excluded from consideration are a class of algorithms that are semi-supervised because they require sentence boundaries to be provided. Such algorithms include MBDP-1 (Brent, 1999), HDP (Goldwater et al., 2009), and WordEnds (Fleck, 2008), each of which is discussed in Section 5. 3.1 Phoneme to Morpheme Tanaka-Ishii and Jin (2006) developed Phoneme to Morpheme (PtM) to implement ideas originally de-veloped by Harris (1955). Harris noticed that if one proceeds incrementally through a sequence of phonemes and asks speakers of the language to count the letters that could appear next in the se-quence (today called the successor count ), the points where the number increases often correspond to morpheme boundaries. Tanaka-Ishii and Jin cor-rectly recognized that this idea was an early ver-sion of branching entropy, given by H B ( seq ) =  X  P c  X  S P ( c | seq ) log P ( c | seq ) , where S is the set of successors to seq . They designed their PtM algo-rithm based on branching entropy in both directions, and it was able to achieve scores near the state of the art on word segmentation in phonetically-encoded English and Chinese. PtM posits a boundary when-ever the increase in the branching entropy exceeds a threshold. This threshold provides an adjustable parameter for PtM, which we exploit to generate 41 candidate segmentations by trying every threshold in the range [0 . 0 , 2 . 0] , in steps of 0 . 05 . 3.2 Voting Experts The Voting Experts (VE) algorithm (Cohen and Adams, 2001) is based on the premise that words may be identified by an information theoretic signa-ture: Entropy within a word is relatively low, en-tropy at word boundaries is relatively high. The name Voting Experts refers to the  X  X xperts X  that vote on possible boundary locations. VE has two ex-perts: One votes to place boundaries after sequences that have low internal entropy (surprisal), given by H
I ( seq ) =  X  log P ( seq ) , the other votes after se-quences that have high branching entropy. All se-quences are evaluated locally, within a sliding win-dow, so the algorithm is very efficient. A boundary is generated whenever the vote total at a given loca-tion exceeds a threshold, and in some cases only if the vote total is a local maximum. VE thus has three parameters that can be manipulated to generate po-tential segmentations: Window size, threshold, and local maximum. Pairing VE with MDL was first ex-amined by Hewlett and Cohen (2009). We generated a set of 104 segmentations by trying every viable threshold and local max setting for each window size between 2 and 9. 3.3 Bootstrapped Voting Experts The Bootstrapped Voting Experts (BVE) algorithm (Hewlett and Cohen, 2009) is an extension to VE. BVE works by segmenting the corpus repeatedly, with each new segmentation incorporating knowl-edge gained from previous segmentations. As with many bootstrapping methods, three essential com-ponents are required: some initial seed knowledge, a way to represent knowledge, and a way to lever-age that knowledge to improve future performance. For BVE, the seed knowledge consists of a high-precision segmentation generated by VE. After this seed segmentation, BVE segments the corpus re-peatedly, lowering the vote threshold with each iter-ation. Knowledge gained from prior segmentations is represented in a data structure called the knowl-edge trie . During voting, this knowledge trie pro-vides statistics for a third expert that places votes in contexts where boundaries were most frequently ob-served during the previous iteration. Each iteration of BVE provides a candidate segmentation, and ex-ecuting BVE for window sizes 2-8 and both local max settings generated a total of 126 segmentations. There are two ways to evaluate the quality of a seg-mentation algorithm in the MDL framework. The first is to directly measure the quantity of the seg-mentation chosen by MDL. For word segmentation, this is typically done by computing the F-score, where F = (2  X  Precision  X  Recall ) / ( Precision + Recall ) , for both boundaries (BF) and words (WF) found by the algorithm. The second is to com-pare the minimal description length among the can-didates to the true description length of the corpus. 4.1 Results We chose a diverse set of natural language cor-pora, including some widely-used corpora to facil-itate comparison. For each corpus, we generated a set of candidate segmentations with PtM, VE, and BVE, as described in the previous section. From each set of candidates, results for the segmentation with minimal description length are presented in the tables below. Where possible, results for other algo-rithms are presented in italics, with semi-supervised algorithms set apart. Source code for all algorithms evaluated here, as well as data files for all corpora, are available online 1 .

One of the most commonly-used benchmark cor-pora for unsupervised word segmentation is the BR87 corpus. This corpus is a phonemic encod-ing of the Bernstein Ratner corpus (Bernstein Rat-ner, 1987) from the CHILDES database of child-directed speech (MacWhinney, 2000). The perfor-mance of the algorithms on BR87 is shown in Ta-ble 1 below. As with all experiments in this work, the input was presented as one continuous sequence of characters with no word or sentence boundaries. Published results for two unsupervised algorithms, the MDL-based algorithm of Yu (2000) and the EntropyMDL (EMDL) algorithm of Zhikov et al. (2010), on this widely-used benchmark corpus are shown in italics. Set apart in the table are pub-lished results for three semi-supervised algorithms, MBDP-1 (Brent, 1999), HDP (Goldwater, 2007), and WordEnds (Fleck, 2008), described in Section 5. These algorithms operate on a version of the cor-pus that includes sentence boundaries.

Results for one corpus, the first 50,000 charac-ters of George Orwell X  X  1984 , have been reported in nearly every VE-related paper. It thus provides a good opportunity to compare to the other VE-derived algorithms: Hierarchical Voting Experts  X  3 Experts (Miller and Stoytchev, 2008) and Markov Experts (Cheng and Mitzenmacher, 2005). Table 2 shows the results for candidate algorithms as well as the two other VE-derived algorithms, HVE-3E and ME.

Chinese and Thai are both commonly written without spaces between words, though some punc-tuation is often included. Because of this, these languages provide an excellent real-world challenge for unsupervised segmentation. The results shown in Table 3 were obtained using the first 100,000 words of the Chinese Gigaword corpus (Huang, 2007), written in Chinese characters. The word boundaries specified in the Chinese Gigaword Cor-pus were used as a gold standard. Table 4 shows results for a roughly 100,000 word subset of a cor-pus of Thai novels written in the Thai script, taken from a recent Thai word segmentation competition, InterBEST 2009. Working with a similar but much larger corpus of Thai text, Zhikov et al. were able to achieve slightly better performance (BF=0.934, WF=0.822).

The Switchboard corpus (Godfrey and Holli-man, 1993) was created by transcribing sponta-neous speech, namely telephone conversations be-tween English speakers. Results in Table 5 are for a roughly 64,000 word section of the corpus, tran-scribed orthographically.
 4.2 Description Length Table 6 shows the best description length achieved by each algorithm for each of the test corpora. In most cases, BVE compressed the corpus more than VE, which in turn achieved better compression than PtM. In Chinese, the two VE-algorithms were able to compress the corpus beyond the gold standard size, which may mean that these algorithms are sometimes finding repeated units larger than words, such as phrases.
 The algorithms described in Section 3 are all rela-tively recent algorithms based on entropy. Many al-gorithms for computational morphology make use of concepts similar to branching entropy, such as successor count. The HubMorph algorithm (John-son and Martin, 2003) adds all known words to a trie and then performs DFA minimization (Hopcroft and Ullman, 1979) to convert the trie to a finite state machine. In this DFA, it searches for sequences of states ( stretched hubs ) with low branching factor in-ternally and high branching factor at the boundaries, which is analogous to the chunk signature that drives VE and BVE, as well as the role of branching en-tropy in PtM.

MDL is analogous to Bayesian inference, where the information cost of the model C ODE ( M ) acts as the prior distribution over models P ( M ) , and C
ODE ( D | M ) , the information cost of the data given the model, acts as the likelihood function P ( D | M ) . Thus, Bayesian word segmentation methods may be considered related as well. Indeed, one of the early Bayesian methods, MBDP-1 (Brent, 1999) was adapted from an earlier MDL-based method. Venkataraman (2001) simplified MBDP-1, relaxed some of its assumptions while preserving the same level of performance. Recently, Bayesian methods with more sophisticated language models have been developed, including one that models language gen-eration as a hierarchical Dirichlet process (HDP), in order to incorporate the effects of syntax into word segmentation (Goldwater et al., 2009). An-other recent algorithm, WordEnds, generalizes in-formation about the distribution of characters near word boundaries to improve segmentation (Fleck, 2008), which is analogous to the role of the knowl-edge trie in BVE. For the five corpora tested above, BVE achieved the best performance in conjunction with MDL, and also achieved the lowest description length. We have shown that the combination of BVE and MDL pro-vides an effective approach to unsupervised word segmentation, and that it can equal or surpass semi-supervised algorithms such as MBDP-1, HDP, and WordEnds in some cases.

All of the languages tested here have relatively few morphemes per word. One area for future work is a full investigation of the performance of these al-gorithms in polysynthetic languages such as Inukti-tut, where each word contains many morphemes. It is likely that in such languages, the algorithms will find morphs rather than words.
 This work was supported by the Office of Naval Re-search under contract ONR N00141010117. Any opinions, findings, and conclusions or recommen-dations expressed in this publication are those of the authors and do not necessarily reflect the views of the ONR.

