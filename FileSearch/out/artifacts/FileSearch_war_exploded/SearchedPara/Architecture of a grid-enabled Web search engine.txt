 1. Introduction
In this age of information, search engines act as important services, providing the community with the information hidden in the Web and, due to their frequent use, stand as an integral part of our lives. The last decade has witnessed design and implementation of several state-of-the-art search engines ( Page &amp; Brin, 1998 ).
Today, there are search engines that have indexed more than four billion Web pages, processing millions of user queries per day over their local index.
 A traditional search engine is typically composed of three pipelined components ( Arasu, Cho, Garcia-
Molina, &amp; Raghavan, 2001 ): a crawler, an indexer, and a query processor. The crawler component is responsible for locating, fetching, and storing the content residing within the Web. The downloaded content is concurrently parsed by an indexer and transformed into an inverted index ( Tomasic, Garcia-Molina, &amp; Shoens, 1994 ; Zobel,
Moffat, &amp; Sacks-Davis, 2002 ), which represents the downloaded collection in a compact and efficiently query-able form. The query processor is responsible for evaluating user queries and returning to the users the pages relevant to their query. Despite the fact that many research efforts were spent, effectiveness and efficiency still remain as the two major challenges in the Web search problem.

The effectiveness problem appears in both Web crawling and query processing. In Web crawling, effective-ness is related to the freshness of the indexed pages ( Cho &amp; Garcia-Molina, 2000 ), which is highly correlated with the crawling efficiency, i.e., if pages are more frequently downloaded, it is more probable that the cached copies of the pages are fresh. In query processing, effectiveness refers to the precision and recall measures, which evaluate the accuracy and coverage of the results, respectively ( Clarke, Cormack, &amp; Tudhope, 2000; Can, Altingovde, &amp; Demir, 2004; Wilkinson, Zobel, &amp; Sacks-Davis, 1995 ).

In addition to the effectiveness problem, both Web crawling and query processing have an efficiency prob-lem. The efficiency problem in Web crawling ( Cambazoglu, Turk, &amp; Aykanat, 2004 ) is due to the large scale of the Web as well as the Web X  X  constantly evolving nature, which require pages to be downloaded and indexed frequently. According to the results reported by Google, it takes around a month to recrawl the same page again on the average. The efficiency problem in query processing is due to the need to quickly evaluate a query of many user queries being submitted concurrently. The state-of-the-art search engines attack this second problem using some algorithmic optimizations that may trade effectiveness for improved efficiency ( Moffat, gramming improvements (e.g., trying to keep the whole Web index in the volatile memory). But, in general, the primary method to cope with both problems is to employ parallel/distributed computing systems, which execute multiple crawler agents to crawl the Web ( Cho &amp; Garcia-Molina, 2002 ) and multiple query engines to evaluate queries over replicated/partitioned copies of the Web index ( Baeza-Yates &amp; Ribeiro-Neto, 1999; Ribeiro-Neto &amp; Barbosa, 1998 ), increasing both page download rates and query processing throughput. In this work, we present the design and implementation details of a grid-enabled search engine, Search
Engine for South-East Europe 1 (SE4SEE), which somewhat differs from the above-mentioned, traditional search engines in both its design philosophy and functionality. In short, SE4SEE is a personalized, on-demand, country-specific, category-based search engine running on the grid infrastructure. It provides a Web search facility which combines crawling and classification. SE4SEE primarily addresses the page freshness and effi-ciency problems in Web crawling by utilizing the computational power and high bandwidth inherently available in the grid and the grid X  X  geographically distributed nature. In this work, we conduct experiments to illustrate the performance of grid-enabled Web search and justify the features specific to SE4SEE.

The organization of the paper is as follows. In Section 2 , we provide background information on Web crawling and text classification, which are the basic building blocks of SE4SEE, while justifying the use of the grid. In Section 3 , we give a brief survey of the previous work on Web crawling, text classification, and distributed/gridified Web search. Section 4 presents the architecture of SE4SEE and its implementation details. We report the results of the conducted experiments in Section 5 . Finally, in Section 6 , we conclude and discuss some future work. 2. Preliminaries 2.1. Web crawling
Web crawling is the process of locating, fetching, and storing Web pages. A typical Web crawler, starting from a set of seed pages, locates new pages by parsing the downloaded pages and extracting the hyperlinks within. Extracted hyperlinks are stored in a FIFO fetch queue for further retrieval. Crawling continues until the fetch queue gets empty or a satisfactory number of pages are downloaded. Usually, many crawler threads execute concurrently in order to overlap network operations with CPU processing, thus increasing the throughput.

Although it seems to be a simple task, there are many challenges in Web crawling. The two important issues are coverage and freshness. The coverage refers to the size of the set of pages retrieved within a certain period of time. A successful crawler tries to maximize its coverage in order to provide a larger, searchable collection to the users. Similarly, the freshness of the collection is important in order to minimize the difference between the cached copies of pages and the originals on the Web, thus keeping the served information up-to-date.
Another important issue in Web crawling is the need for a large amount of computational resources. First, a high amount of processing power is necessary to parse the crawled pages, extract the hyperlinks, and index the pages X  content. Second, a large amount of volatile memory is required to store and manage the data struc-tures that grow quickly and continuously during the crawl. The final and most important resource requirement is a high network bandwidth. The network bandwidth determines the page download rate and affects the craw-ler X  X  coverage as well as the page freshness.

We believe that all these computational requirements make Web crawling a suitable target for grid comput-uted system that enables sharing, selection, and aggregation of geographically distributed autonomous resources dynamically at runtime depending on their availability, capability, performance, cost, and users X  quality-of-service requirements X  X . 2 The grids contain computationally powerful nodes, which have the resources necessary for running a Web crawling application. Furthermore, in cases where the spatial locality of the pages is important, the geographically distributed nature of the grid can be utilized to increase page download rates, as is the case in the design of SE4SEE. 2.2. Text classification
Informally, text classification is the problem of assigning a category to a document from a predefined set of categories. In the literature, various machine learning techniques are employed to solve this problem. Most of these techniques are based on the supervised learning approach, where the classifier is trained by a set of pre-viously labeled set of documents and then is used to predict categories for unseen test documents. The accu-racy of the classification depends on the choice of the underlying machine learning algorithm as well as the quality of the documents used for training the classifier.

Most search engines rely on keyword-based search, where a query, consisting of a number of keywords, is evaluated over an inverted index, and the top k documents are returned to the user in decreasing order of their similarity to the query ( Lee, Chuang, &amp; Seamons, 1997 ). However, there are also approaches employing text classification in querying of document collections and/or presentation of the results. The use of text classifi-cation in search engines is mainly in the form of pre-classification (e.g., engines providing topic directories manually created by human experts) or post-classification (e.g., engines providing automated classification of the query results). While the former of these increases precision, the latter enhances the presentation of the results. SE4SEE adopts the post-classification approach, where the crawled pages are classified under several topic categories before being presented to the user. 3. Related work
In this section, we survey the previous works on Web crawling, text classification, and search engines. In the literature, there are many research studies concentrating on different issues in Web crawling, such as URL ordering for retrieving high-quality pages earlier ( Baeza-Yates, Castillo, Marin, &amp; Rodriguez, 2005; Cho, Gar-( Cambazoglu et al., 2004; Teng, Lu, Eichstaedt, Ford, &amp; Lehman, 1999 ), distributed crawling ( Boldi, Code-
Ulusoy, 2004; Chakrabarti, van den Berg, &amp; Dom, 1999; Diligenti, Coetzee, Lawrence, Giles, &amp; Gori, 2000 ). Despite this large amount of effort, due to the commercial value of the developed applications, it is hard to obtain robust and customizable crawling software ( Heydon &amp; Najork, 1999; Shkapenyuk &amp; Suel, 2002 ).
For text classification ( Lam, Ruiz, &amp; Srinivasan, 1999 ), an abundance of machine learning algorithms ( Sebastiani, 2002; Yang, 1999 ) such as k -nearest neighbor ( Han, Karypis, &amp; Kumar, 2002 ), naive Bayesian 1994 ), and support vector machines ( Sun, Lim, &amp; Ng, 2002 ) are used in the literature. In Web page classifi-cation ( Kan, 2004 ), due to its performance and quality, naive Bayesian classifier is usually preferred. A num-ber of machine learning tools such as Weka ( Witten &amp; Frank, 2005 ), Grid Weka ( Khoussainov, Zuo, &amp;
Kushmerick, 2004 ), and the Harbinger machine learning toolkit ( Cambazoglu &amp; Aykanat, 2005 ) are readily available for use in text classification.

Although there are many different Web search engines, 3 the market is dominated by three major engines.
These engines have huge multi-processor computing infrastructures consisting of thousands of PCs. However, they are mostly centralized systems, not suitable for crawling geographically distributed Web sites. There are a number of information retrieval works on peer-to-peer environments ( Bender, Michel, Triantafillou, Weikum, &amp; Zimmer, 2005 ), distributed systems ( Melnik, Raghavan, Yang, &amp; Garcia-Molina, 2001 ), and the grid ( Scholze, Haya, Vigen, &amp; Prazak, 2004 ).

MINERVA ( Bender et al., 2005 ) is a peer-to-peer Web search engine, in which each peer independently executes a Web crawler. This peer-to-peer system lacks a central coordinator, and hence there is no control over the coverage of each peer. Consequently, the same pages may be crawled multiple times by different peers, resulting in an overlap of pages. This overlap is a crucial problem in peer-to-peer Web search. MINERVA offers techniques that aim to solve this overlap problem and tries to aggregate the results of independent crawls to generate a global result.

The use of the grid for information retrieval is relatively new. To the best of our knowledge, GRACE only attempt to develop a grid-enabled search engine ( Scholze et al., 2004 ). The aim of GRACE is to build a search and categorization tool over the grid. GRACE can use both local directories and the query results of other search engines as a knowledge repository. The main objective of GRACE is to analyze the search results and categorize them via linguistic analysis. In this perspective, GRACE is an unsupervised categorization tool rather than a search engine. In GRACE, the utilization of the grid resources is achieved via parallelism based on the distributed nature of the grid. A user can concurrently run multiple queries over the grid. GRACE, in turn, analyzes the query results, categorizes them, and aggregates the results of multiple queries.
Although GRACE and SE4SEE architectures both aim to utilize the grid resources, their motivations are different. While GRACE categorizes the query results that are based on the results obtained from other search engines, SE4SEE does not depend on the results of other search engines. Instead, the query results are retrieved directly from the Web utilizing geographical closeness in country-specific search. Furthermore,
GRACE does not provide a facility for category-specific search, whereas SE4SEE allows users to select and search in a specific category as well as perform a keyword-based search. 4. The SE4SEE Architecture 4.1. Features
Search Engine for South-East Europe (SE4SEE) is an attempt towards developing a grid-enabled search engine that specifically targets the countries in the South-East Europe. It is one of the two selected regional applications developed as a part of the EU-funded SEE-GRID FP6 project, for establishing a grid infrastructure in the South-East European countries. As stated in Section 1 , SE4SEE is a personalized, on-demand, country-specific, category-based, grid-enabled search engine, currently running on the grid infrastructure formed by the SEE-GRID project. Below, we briefly describe the distinguishing fea-tures of SE4SEE.

Personalized crawling: In traditional search engines, the entire Web is crawled, and the pages are indexed for public search. In SE4SEE, a different crawling approach is taken. For each user query, an individual crawl is started over the Web, and the relevant pages are selected from the fresh copies on the Web. This way, up-to-date versions of the pages are evaluated and accuracy of the resulting answer set of pages is enforced.
On-demand crawling: Unlike traditional search engines, which crawl the Web continuously, in SE4SEE, the crawling task is initiated upon the arrival of a user query. Depending on various factors, this type of on-demand crawling may be time-consuming. However, we believe that this approach is acceptable if (1) the information sought for is fresh and is not indexed yet by traditional search engines (e.g., querying the result of a sport event that finished just 5 min ago) or (2) the user initiating the crawl has no time constraints (e.g., looking for some computer graphics papers to be cited in a PhD thesis).

Category-based search: SE4SEE has support for category-based search in addition to keyword-based search. In this approach, pages downloaded by the crawler are categorized using a previously trained text classifier. At the completion of the crawl, only the set of pages relevant to the topic category selected by the user is presented.

Country-specific search: Since one of the initial motivations behind SE4SEE is to develop a socio-cultural search engine, SE4SEE provides country-specific search. In general, country-specific search can be per-formed based on the language of the page, the country domain of the page URL, or the geographical local-ity of the hosting site. Currently, in SE4SEE, the pages are resolved according to the top-level domain names, e.g., the user may request only the links in the  X  X .tr X  X  domain to be downloaded during the crawl.
Gridification: SE4SEE is fully enabled to the grid. The computational burden of Web crawling to an indi-vidual user is alleviated by the utilization of resources (computational power, storage capacity, and the net-work bandwidth) available in the grid. In particular, SE4SEE runs on the grid infrastructure established as a part of the SEE-GRID project. By submitting country-specific queries to the servers residing in the target country, SE4SEE aims to exploit the geographical locality of Web pages and grid sites, thus increasing the page crawling throughput. 4.2. Overview of query processing over the grid
Basically, there are two alternatives for parallelism in grid-enabled Web crawling: intra-query or inter-query parallelism. In intra-query parallelism, a query is submitted to multiple grid nodes, and a crawling task is started at the nodes, each crawling a portion of the Web. The crawled pages are than merged into a global answer set. Although this approach offers good performance in reducing the crawling time, issues such as avoiding overlap in local answer sets or communicating inter-node links between crawlers must be addressed ( Cho &amp; Garcia-Molina, 2002 ). Inter-query parallelism, on the other hand, is a coarse-grain parallel approach, targeting high throughput in query processing. In this approach, each computing node completes the whole crawling task on its own. Although we have an ongoing work on intra-query parallelism, the inter-query par-allelism approach is currently employed in SE4SEE.

SE4SEE uses the Globus 7 and LCG 8 middleware to interact with the grid infrastructure. As the underlying grid middleware is able to distribute the work evenly, load balancing is not an issue for the current system.
Unfortunately, this distribution is only based on the availability of computational resources in the system. Ide-ally, we also want it to take the maximum and currently available network bandwidths into consideration.
Such a distribution is not possible as the middleware is not network-aware. Unless this difficult problem has been solved, a better, bandwidth-based load distribution mechanism is not possible for our application.
The deployment diagram of the SE4SEE application is given in Fig. 1 . A user requires a computer with a browser to connect to the Web portal running on the SE4SEE server. In order to prevent the misuse of grid resources, the user is expected to have a valid SE4SEE account, which is verified by the authentication module in the server. The Web portal acts as a mediator between the user and the grid. That is, it converts the user query into a grid job and submits it through a user interface node (UI) to a worker node (WN). UI nodes in the LCG architecture are entry points to the grid; jobs are submitted and their results are received from these.
WNs, on the other hand, are responsible for executing the jobs. The crawler and the classification tasks are executed on the WN and the generated crawling/classification output is stored in the resource broker (RB), a computer which not only coordinates the jobs and handles their assignments, but is also responsible for the temporary storage of the jobs X  input and output. After a time period, the user may transfer the output from the RB to the result repository in the SE4SEE server so that the results can be visualized and permanently stored.

In Fig. 2 , we exemplify the job execution in SE4SEE. In the figure, edges show the data flow over the network between different computing systems. In our sample scenario (indicated by bold edges), a user living in Romania performs a search for the hotels located in Croatia. The user connects to the SE4SEE portal located in Ankara through her Web browser and submits the query. The portal transforms the query into an executable grid job and submits the job to an available computing node located in Zagreb, which is highly likely to be geographically close to the target Web pages. A number of hotel pages in the Croatian Web space are located, fetched, and stored in the grid node. When the crawling and classification jobs terminate, the resulting set of pages are retrieved back to the portal. At any time, the user can connect to the Web portal and access the results. 4.3. Components
SE4SEE is composed of three main components: a crawling component, a text classification component, and a Web portal. We provide the details of these components in the following sections. 4.3.1. Web crawler
Since SE4SEE is a  X  X  X ersonal X  X  search engine, which serves a large number of users each with specific, per-sonal crawling needs, an easily customizable crawler is required. Furthermore, in order to be able to adapt to the heterogeneous nature of the grid infrastructure, a platform independent crawler should be preferred. Such a crawler is capable of executing on different architectures, thus preventing the recompilation overhead and compatibility issues.

The Web crawling component of SE4SEE is implemented in Java utilizing the WebSPHINX development environment for Web crawlers. WebSPHINX is designed to enable and ease the development of personally customized, Web-site-specific, relocatable crawlers and also provides libraries for HTML pars-ing, pattern matching, and common Web transformations.

The crawler in SE4SEE retrieves the pages in a breadth-first manner ( Najork &amp; Wiener, 2001 ). This approach is more suitable for processing category-based queries, compared to depth-first traversal of pages.
Unless a seed URL is provided by the user, the crawls are started from seed pages which contain links to rel-evant pages for each topic category. Seed pages are selected by human experts from the sites that provide up-to-date links to pages specific to each topic category. The stopping conditions for the crawls are determined by the user, who may specify either the duration of the download or the maximum number of pages crawled. 4.3.2. Text classifier The Harbinger machine learning toolkit 10 ( Cambazoglu &amp; Aykanat, 2005 ) is used as the text classifier in
SE4SEE. This toolkit provides implementations for a number of machine learning algorithms, readily avail-able for use in text classification. There is also built-in support for instance selection, feature selection, and class balancing, which all help in improving the accuracy of classification. In particular, SE4SEE uses the naive Bayesian classifier in this toolkit for Web page classification.

The naive Bayesian classifier tries to capture the global properties of a dataset. It operates on input attri-probability of an input attribute being observed in each category is calculated. In the test phase, for each crawled page, the probability of the page belonging to a certain category is determined using the word distri-bution. For each page and category pair, the classifier generates a probability indicating the degree of rele-vance between the page and the category. The category with the highest probability is chosen as the category of a page. Despite its assumption that words appear independent of each other, naive Bayesian per-forms well for Web page classification ( Kan, 2004 ).

The searchable categories in SE4SEE are mostly socio-cultural in nature. The currently provided topic cat-egories are Banks, Dining, Festivals, Hotels, Politics, Sports, Transportation, and Universities. An important issue in successful classification is the selection of high quality Web pages for training. In order to train the classifier, for each category, an equal number of training pages are manually collected from the Web by human experts. Currently, the training pages are only available for Turkey and Croatia, but the training sets for several other countries are expected to be added to the system.

During the training, training pages are passed through several filters. First, whitespace, non-alphanumeric characters, and all HTML tags are eliminated from the pages. Language-specific stemmers were not available at the time of the implementation; hence, no stemming is applied. But, since stopword lists were available for each supported country, stopwords are eliminated. To further reduce the number of non-representative terms in the training pages, feature selection ( Lewis, 1992 ) based on the Chi-square technique is applied. The naive Bayesian used during the tests to predict a category for each downloaded page whose category is unknown. The pages in a category are ranked in decreasing order of the probabilities before being displayed to the user.
The execution of the classifier is pipelined with the crawler. The crawled pages are passed to the classifier for classification. The classifier is concurrently executed as a separate process, which wakes up regularly and checks if there are pages to be classified. The classifier terminates if there are no new pages after a period of time. The concurrent execution allows the network-bound operation of the crawler to be overlapped by the CPU-bound execution of the classifier, thus reducing the total query execution times. 4.3.3. Web portal
As the only interaction point between the user and the SE4SEE back-end, the Web portal is a major com-ponent of the search engine. It has to be user-friendly, even though it requires a more complex interface than classic search engines due to the application X  X  added capabilities. There are several SE4SEE-specific issues that are addressed in the design of the Web portal. The concept of multiple users and jobs has led to the implemen-tation of an authentication system. The inherent batch-like behavior of the crawling task resulted in the addi-tion of a result maintenance mechanism. Finally, the nature of the grid environment led to the introduction of error checking and logging mechanisms.

The long execution times of a typical crawling session, especially when combined with the high task initi-ation costs of the grid environment, prevent the creation of a real-time search engine. A significant amount of time passes between the submission of a query and the availability of the result, making it impractical for a user to wait for that amount of time. Furthermore, since crawling is a time-consuming task which requires a significant amount of network resources, the retrieved results should be stored for later access. To address this issues, SE4SEE implements a job management system.

There are two types of queries that can be submitted: category-and keyword-based queries. These differ in the seed page selection and page acceptance methodologies. Category-based queries aim to gather pages rel-evant to a certain topic category by starting from a set of category-specific seed pages, performing classifica-tion on all retrieved pages, and returning those whose similarity to the training pages exceed a certain threshold. Keyword-based queries are similar to those in traditional search engines; here, the crawl starts from a user-entered URL and returns the pages that contain the keywords given by the user. No classification is performed on keyword-based queries. Both query types are restricted to user-specified top-level domains to ensure that the crawler stays within a country X  X  Web space. A stopping condition is given along with the query; the procedure continues either until a specified time has passed since the beginning of the crawl or a specified number of pages have been processed.
 After a user query is submitted to the portal, the job management system creates an appropriate JDL (Job
Description Language) file and a shell script containing the statements to be executed. A copy of the query parameters are saved for future reference. Then, the system locates a computing node where the query can be processed. In country-specific queries, the closest grid nodes are tried to be selected by the system. Once a grid node is determined, the executables of the crawler and text classifier are transferred to the target node.
The crawler and text classifier binaries are executed at the target grid node until the user-specified stopping criterion is met. When the job execution completes, the crawled pages are automatically retrieved from the resource broker to the Web portal. The user can then view the results of the search. The results can be saved and recalled multiple times later on, thereby preventing the waste of grid resources by re-querying.
To prevent the extensive use of grid resources, an authorization-based system is implemented. Users need to log on to the system before any grid interaction takes place. A user, once authorized, has the ability to submit queries, manage the crawling tasks and view the results of completed crawls. Both category-and keyword-based queries result in the submission of grid jobs that can be examined and, if desired, aborted. The results for completed crawls are presented in a manner similar to common search engines, along with an option to view the page in the form it was retrieved by the crawler, effectively forming a time-stamped local cache of the results. A keyword search can also be performed in the crawled results, allowing the refinement of pre-sented results without having to resort to additional searches.

Finally, to ensure the durability and security of the system, additional considerations are made. A robust authentication mechanism is implemented, preventing the unprotected storage of passwords. All queries and database accesses are logged. We have mechanisms for intercepting and handling both the errors due to the failures in the grid infrastructure, reported by the grid middleware, and the errors generated by the application itself. Constraints are placed on certain parameters of the application to prevent misuse of resources and to make the application behave like a  X  X  X ood citizen X  X  of the grid community. Hence, the number of crawl jobs that can be performed by a user has been restricted and the stopping conditions of the crawls are capped at sane values.

The pages of the Web portal are prepared using PHP, user actions on these pages invoking external appli-cations that perform the desired tasks. All grid-interaction is over command-line utilities, relying on the robustness of these utilities in unforeseen circumstances. This method also provides a layer of abstraction between the grid and the application code, preventing any changes on grid side having an immediate effect on the application. Any data used in the invocation of these utilities is stored in a regularly backed-up MySQL database, again providing a robust solution for critical information. 5. Experiments 5.1. Platform
As the hardware platform, SE4SEE utilizes the resources available in the grid infrastructure established throughout the SEE-GRID project. These resources, in conformance with the grid philosophy, is composed of a variety of heterogeneous, geographically distributed computational resources. The SEE-GRID infrastruc-ture is essentially a large network of computers that, although located in different regions of South-East Eur-ope, work together to perform a common task. All of our experiments presented in this section are conducted utilizing this infrastructure.

Table 1 summarizes hardware/software characteristics of the grid sites available in the SEE-GRID infra-structure, used in our experiments. In general, it is hard to mention a typical configuration as the individual sites that form the grid have a variety of hardware resources, sometimes even having different configurations within a site. However, broadly speaking, we can say that experiments are conducted computers with an x86 processor clocked at 2.4 GHz or higher, and having at least 512 MB RAM. Although reported in the table, disk capacity is not much of a concern in the experiments since all nodes met the minimum requirement, which has been determined to be 2 GB. 11 Network connectivity of the grid sites was uncertain and had to be mea-sured through experiments. The grid site at the last row of the table is tagged as UI since this site provides the primary interface to the SEE-GRID infrastructure. All other sites are tagged according to their geographical locality. 5.2. Setup
The experiments were performed using the application X  X  command-line back-end. The typical approach of letting the grid infrastructure decide at which site the application runs is avoided for supervised experimenta-tion. Instead, specific sites were chosen manually and jobs are directly submitted to them. Running times for the crawler and classifier were measured by utilizing the executing system X  X  measurement mechanisms and are typically accurate to the millisecond. Scheduling times for the task were derived from the timestamps found on the execution logs provided by the grid middleware. As the nodes on the grid are synchronized using the Net-work Time Protocol, the derived times are accurate to the order of seconds. 5.3. Results
Five sets of experiments are conducted, where each experiment tries to justify or investigate one of the search features provided by SE4SEE (Section 4.1 ). First, efficiency of personalized crawling is investigated via experiments to have an understanding of the overhead that crawling introduces. Second, experiments are carried out on page freshness to justify the on-demand crawling strategy employed in SE4SEE. Third, we con-ducted experiments to reveal the benefits of geographically distributed Web crawling. Fourth, we experi-mented on the overheads introduced by grid-enabled Web search. Finally, we investigated the effectiveness of the category-based search provided by SE4SEE. The following sections present these experiments. 5.3.1. Efficiency
Personalized Web search requires a different crawling/classification task to be initiated over the Web. This is a computationally costly and time-consuming task. In this set of experiments, we try to investigate the effi-ciency of personalized Web crawling. For this purpose, we crawled and classified varying numbers of pages from the  X  X .edu.tr X  X  domain (Turkish educational sites) and The University of Split. In the experiments, the classifier is executed separately after the crawler finished downloading pages, thus enabling us to measure the relative overheads of the two components more accurately.

Fig. 3 displays the times obtained in crawling and classifying varying number of pages using the grid site denoted with tag UI. The times for archiving/compressing the resulting set of pages are relatively negligible and hence not displayed. According to the figure, although the crawling and classification components have similar overheads at low number of pages, the crawling overhead dominates as the number of pages increases. The results show that personalized search is practical for crawling a fair number of pages. Moreover, in
SE4SEE, the crawler and classifier are concurrently executed in a pipelined fashion. Hence, the classification is overlapped with network transfer; the actual total execution time is bounded from above by the sum of the reported execution times of these two components and from below by the maximum of the two values. As also illustrated by this experiment, crawling multiple sites is usually faster than crawling a single site. 5.3.2. Page freshness
Since obtaining high page freshness is the one of the motivations behind SE4SEE, we tried to figure out the importance of page freshness via experiments and observed the rate of change in the textual material found in the Web pages (ignoring the HTML content and other information). For this purpose, we first made an initial crawl over a set of Web sites to obtain an initial collection. Throughout a week, the pages in the initial col-
I formula, where I is the number of pages in the initial collection and M ( t ) is the number of pages whose con-tent is modified (i.e., updated or deleted) and hence differs from the initial download.

Fig. 4 displays the change of page freshness after t = 1 and t = 7 days. At the top of the figure, the sites or topic categories are given. The topic categories include sites picked from the training set of pages we manually created. According to Fig. 4 , a considerable portion of the pages seems to be modified frequently. Especially, in the CNN Web site, only 12.50% of the pages remain the same after a day. Similarly, after a week, almost half of the educational pages are modified. A similar behavior is not observed in the crawl made over the Bil-kent University since this crawl includes pages deep in the directory hierarchy, which have a tendency to be modified less frequently.

Page freshness also shows variation among the topic categories, i.e., while pages belonging to a category remain untouched, pages in some other category may be modified frequently. For example, according to our experiments, the festival pages remain rather static, whereas sports pages are updated more frequently.
Overall, we believe that these experiments justify the need for the on-demand crawling strategy employed in SE4SEE, but not available in the traditional search engines. 5.3.3. Geographical locality
A primary benefit of the use of the grid infrastructure in SE4SEE is the geographically distributed nature of the grid sites. Hence, experiments are conducted to investigate the effect of utilizing the grid for geographically distributed Web crawling, where pages are tried to be downloaded by geographically closer servers. Specific sites were chosen as test sites based on their location, and jobs were directly submitted to them. In the exper-iments, crawling tasks were initiated at five different grid sites, located in Bosnia-Herzegovina (BA), Bulgaria (BG), Croatia (HR), FYROM (MK), and Turkey (TR).

Fig. 5 displays the page crawling throughput (number of pages crawled per minute) achieved by the grid sites for different sets of pages. In this experiment, we first aimed to figure out the typical bandwidth of the individual sites. Note that a closer site with a low network bandwidth might perform worse than a site that is geographically far to the pages, even though the latter has a higher latency with respect to the crawled pages.
To avoid misinterpretation of the other results due to the differences in the bandwidth, an approximation of the bandwidth is required. To obtain such a value, a crawl was performed on a Website geographically distant to all sites, far enough to make any advantages due to the proximity negligible. For this purpose, the CNN site, located in US, is chosen and crawled by all grid sites. This experiment shows that the network capacity of the grid site BA is problematic, whereas the TR site performs relatively better than the rest. However, we must note that even these approximate bandwidths may be misleading since there is a possibility that some sites may have direct satellite connection to target sites, rendering geographical proximity less important.
According to Fig. 5 , as expected, each grid site performs well in downloading the pages geographically nearby. Even the BA site, which has a limited bandwidth, achieves a fair throughput in crawling pages from the Web server of the University of Sarajevo. Similarly, the BG and TR sites achieve the highest throughput in crawling pages located Bulgaria and Turkey, respectively. Note that, if the throughputs were normalized with respect to the estimated site bandwidths, in the third experiment (the University of Sofia), the throughput gap between the BG site and the others would be more significant in favor of the BG site. These experimental results indicate that the spatial proximity between the crawling sites and the target pages plays an important role in the crawling throughput, thus justifying the geographically distributed crawling approach of SE4SEE. 5.3.4. Gridification
The overhead of the grid architecture had to be determined to be able to make time-comparisons to classic search engines. To this effect, several crawls of different sizes were made from the same grid site. Execution times for four job phases were extracted from the grid logs: ready, scheduled, running, and fetching. The ready time is the time it takes for a job to be assigned to a site once it has been submitted to the system. The sched-uled time indicates how long the job waits at the grid node. The running time is the execution time of the appli-cation, and the fetching time is the time it takes for the output to be retrieved form the resource broker. Note that the time it takes for the output to be transmitted from the grid node to the resource broker could not be timed.

The results in Fig. 6 demonstrate the high start-up costs of the grid infrastructure. The startup overhead of the jobs take a dominating amount of time for smaller crawls and are still a significant source of delay even for the larger crawls sizes. Most of this overhead comes from the delays introduced at the crawling nodes. The time to fetch the results form the resource broker is negligible, but increases linearly with the number of fetched pages, as expected. 5.3.5. Effectiveness One of the benefits provided by the SE4SEE application is that it assigns categories to the retrieved pages.
Selection of good seed pages for topic categories is important, as the crawling task is started from these pages and continued in a breadth-first manner. In this set of experiments, we try to investigate the quality of seed page selection and the behavior of classification. For this purpose, 100-page and 1000-page crawls are initiated for two different topic categories (banks and sports) and the distribution of pages into categories are investigated.
Fig. 7 shows the results obtained in these experiments. As expected, as the pages are more distant in the link structure from the starting set of seed pages, the probability of classifying pages into categories other than the target category increases. This is because either the classification accuracy degrades or pages belonging to irrel-evant categories are crawled. For example, in the 100-page crawl performed over the sports pages, 72.0% of the to pages are classified as sports pages, whereas the rate of relevance is 67.7% in the 1000-page crawl case.
The behavior of the classification also depends on the characteristics of the topic category. For example, the bank pages are more easily distinguished (a similar behavior is also observed for the politics and universities categories) even though some portion of them are classified as politics pages. Accurately classifying sports pages seems to be harder, probably because textual features identifying sports pages overlap with the features identifying other categories. 6. Conclusion and future work
In the current version of SE4SEE, the usage of grid resources is via an inter-query-parallel approach. One other perspective could be to use an intra-query-parallel approach where each query is decomposed into subqueries running on multiple machines. As an improvement over the current SE4SEE architecture, the future direction of the SE4SEE infrastructure is to support intra-query parallelism to make a better use of the grid resources.

One of the assets of the SE4SEE is its socio-cultural value. Grid, by its very nature is a domain of cultural integration. As a part of the grid infrastructure, SE4SEE aims to promote the establishment of the cultural foundations of the grid infrastructure and serve as a basis for socio-cultural interaction and integration. In order to achieve its goal, SE4SEE provides the grid community with tools for country-and category-specific search options. Hence, the categories selected so far are picked according to their emphasis on the cultural variations within the grid community. We hope this to be a good opportunity to enhance the inter-cultural relations in South-East European region.
 Acknowledgements
This publication is based on the work performed in the framework of the FP6 project SEE-GRID, which is funded by the European Community. The SEE-GRID consortium consists of eleven contractors: ten repre-sentatives or incubators of National Grid Initiatives (NGIs) from SE European countries and CERN. The consortium contractors that represent NGIs are: GRNET (Greece), SZTAKI (Hungary), ICI (Romania),
CLPP (Bulgaria), TUBITAK (Turkey), ASA (Albania), BIHARNET (Bosnia Herzegovina), UKIM a(FYR-oM), UOB (Serbia-Montenegro), RBI (Croatia).

This work is also partially supported by The Scientific and Technological Research Council of Turkey un-der grant EEEAG-106E069.
 References
