 1. Introduction
Multi-Agent Systems (MAS) ( Weiss, 1999 ) are a paradigm for the development of complex, distributed, situated and knowledge intensive systems. A MAS comprises agents and resources that interact to achieve the system goals. Agents are autonomous entities, capable of proactive and flexible behaviour to satisfy their goals according to their current environment, capabilities and information. Resources are mainly passive elements used by agents, though they may originate events to announce informa-tion. For instance, the Crisis-management MAS ( Garc X   X  a-Magarin  X  o et al., 2009 ), which is used as a case study for the current work, manages a crisis situation in a city where a poisonous material is released. In that system, there are several types of agents, all of which are autonomous entities that are proactive and have a flexible behaviour. For example, some agents perform operations on behalf of the users X  interests, adapting their actions to their users X  states; other agents collect all the circulating information in order to graphically present it to the central medical services. The different agents collaborate to communicate the situations and states of citizens to the emergency services and the citizens themselves, in order to coordinate them for people surviving, which is the main goal of the whole MAS. An example of resource is the database for storing the information of the map of affected areas that is displayed to the central medical services.
Given the distributed architecture of MAS, communication between their components plays a key role in their operation ( Dignum and Greaves, 2000 ). Designers have to pay attention to different issues concerning communication, such as protocol design, information in messages, how messages affect agents X  internal status, or resources for communication. Among these issues, this work focuses on the traffic load caused by commu-nications. From this point forward, the paper uses the commu-nication pattern term to refer to each part of the communication architecture that determines an interactive behaviour between two or more agents. In addition, both the communication architecture and communication design terms denote the global organization of communications in a MAS.

There are precedents in the study of how communication influences the performance of MAS ( Lee et al., 1998; Davidsson et al., 2006 ). However, the current work differs from previous ones in the fact that it allows designers to carry out measures focused on specific scopes and interactions and analyze their results. In this way, this work provides more hints about the causes of undesirable patterns in communication architectures. For instance, the current metrics can detect a communication pattern of a specific role that is hindering the performance of the whole system, and designers only need to revise the agents playing that role instead of inspecting all the agents of the system.
There are also works that apply this kind of research to get balanced workloads in networks, trying to minimize traffic and distributing it among the different components ( Montresor, 2002;
Schoonderwoerd, 1996 ). Those works are aimed at constructing systems that redistribute the tasks among the components. In contrast, the current work detects communication patterns in existing MAS that designers should change to improve their non-functional qualities, such as the performance, without altering their functional specifications.

The work presented takes as its basis the hypothesis for distributed systems ( Coulouris et al., 2005 ) that unbalanced communications can hinder the performance and quality features of a system by overloading particular components. In the case of
MAS, these components are usually agents and the unbalanced communications denote the interactions where some agents participate considerably more than other agents with similar features. Designers use communication analysis tools to detect these kinds of undesired situations ( Helsinger et al., 2003 ), but they need additional support to make meaningful interpretations of the raw data.

The current work proposes a measurement framework that includes several metrics to detect defective communication patterns.
This work has found that a MAS with unbalanced communications can present two of these pattern s: overloader and overloaded agents, which, respectively, send and receive a number of messages that is much higher than that of similar agents. The framework uses the proposed metrics to analyze the communication activity of a
MAS and find these patterns at different scopes of the MAS organization. The three considered scopes are: the overall system, which considers the communication balance for all the agents in the system; the role scope, which is restricted to all the agents playing a given role; and the agent scope, which considers each individual agent. These scopes allow designers to identify precisely the sources of the undesired communication p atterns, so they can fix them and improve the performance of their MAS.

The metrics of the proposed measurement framework have been developed and tested with two empirical case studies. In both cases, a customer agent needs to locate a suitable agent to perform a service on its behalf, and once located, it has to ask for it. These agents have lists of agents and services available to locate the potential providers for their requests. Both cases consider two alternative versions of their MAS that differ in terms of how they choose the provider agent. These request assignment policies determine the patterns for distributing messages in their MAS.
The first policy makes that the first agents on the list pile up most requests and thus traffic; the second policy fairly distributes requests among different agents in the providers list. The empirical analysis of these case studies suggests that the proposed metrics are related to the Quality of Service (QoS), in particular with the performance of the MAS considered as its response time.

To facilitate this analysis, this work includes two tool prototypes that measure the proposed metrics. Both prototypes analyze the execution of a MAS and classify its agents according to the proposed metrics and their rules in the different scopes. The difference between these two tool prototypes is that one performs the measurement after the execution of the MAS from its logs, and the other performs the measurement during the execution using
Application Programming Interfaces (API). Each of these tools can be more suitable to a development than the other tool regarding the circumstances and needs.

The work reported in this paper extends our previous research ( Gutierrez and Garcia-Magarin  X  o, 2009 ) including a new metric, a new scope, more experimentation and new tools. Hence, it is a further step towards engineering balanced communications in
MAS by improving their protocols, strategies and communication patterns according to their actual behaviour. It is worth mentioning that this work measures the communications instead of the workload of each agent, which mainly depends on the tasks it executes. Therefore, its main goal is the measurement and improvement of communication architectures, instead of the balance of the workload of the components (i.e. agents in MAS), which is common in distributed and manufacturing systems ( Coulouris et al., 2005 ). Another contribution of this work is that the communication balance can be reached if the communication architectures are correctly designed and measured. In order to reach this goal, this work provides the necessary metrics and measurement tools for MAS.

The rest of the paper is structured as follows: Section 2 reviews the literature related to communication balancing in MAS. Section 3 describes the undesired patterns that appear in MAS with unbalanced communications. Detecting these patterns in MAS relies on the metrics described in Section 4. Section 5 contains an empirical analysis of two case studies. Each of them applies the metrics to several communication agent-oriented architectures in a given problem domain, and compares their measurement values with the QoS of these architectures concerning the performance.
Section 6 introduces the implementation of the measurement tools used in these experiments. Finally, Section 7 discusses some conclusions and future work. 2. Background
Although there are many works in the literature regarding load balance in systems, the current one differs from them in that it focuses on analysis techniques to measure communications in order to detect defective communication patterns in MAS.
In particular, existing metrics about load balance measure the workload of agents. However, those metrics may not necessarily reveal the quality of the communication design. For instance, an agent can perform a task that is more time-consuming than the tasks of other agents. This can produce an unbalance in the workloads, but this is not related with the communication design.
In the same way, an agent can exchange much more messages than the average in the system, but this can be common for all the agents playing its same roles because they are, for instance, mediators. The literature lacks of proper metrics to measure the quality of the communication design, which is the main aim of this work. Similarly to other works about metrics, this one considers three main issues: the definition of the metrics used to measure the MAS; the processes to get the metric data from the
MAS; and the analysis tools to process the raw data and get useful information for the MAS design or adjustment.

There are works focused on the study of the MAS features that can affect their performance, the description of suitable metrics for them, and the analysis of how these metrics can be used to improve MAS design. For instance, Davidsson et al. (2006 ) defines metrics for load balance and overload control of intelligent networks, and proposes several MAS architectures with different tradeoffs regarding these issues. The analysis of these quantitative results allows selecting the most appropriate MAS architecture for each situation. Lee et al. (1998 ) shows how MAS performance and scalability can be systematically analyzed. That work measures the computational time related with the number of tasks and agents. None of these works consider a specific diagnosis of the components involved in problematic communication patterns.
The metrics of the first work ( Davidsson et al., 2006 ) are not focused on analyzing the communication designs, but on measuring the balance of loads of tasks in agents. In particular, when an unbalanced load is detected in an agent, the system reassigns the tasks generating more communications to other agents, which implies sending the specifications of tasks between these agents. Thus, a defective communication pattern would not be detected, and would generate even more communication traffic. The metrics of the second work ( Lee et al., 1998 ) relate the complexity of systems with their performance, but that work does not consider the quality of the communication design. Therefore, those works cannot detect undesirable communication patterns that can hinder the MAS performance. On the contrary, the current work can detect defective communication patterns in order to prevent their negative impact in the performance of MAS.
Holonic Manufacturing Systems (HMS) are similar to MAS ( Giret and Botti, 2004 ). They are composed of several autonomous components that can be recombined to create manufacturing systems. These components are similar to autonomous agents and interact socially with each other to obtain emergent behaviours.
Covanich and McFarlane (2009 ) measures interactions among components in HMS using the Design Structure Matrix (DSM) tool. Its purpose is to evaluate the effort required to reconfigure an HMS in terms of its internal interactions. This work uses three different kinds of interactions, since some of them imply more effort than others. It adds together the weighted number of interactions and uses that metric to evaluate the effort. It also compares HMS with traditional manufacturing systems using this metric. Nevertheless, the metric does not measure the quality of the communication design; instead, it only measures the effort in constructing the system with a given design. Thus, a defective communication pattern may be measured as inexpensive to be constructed and the metric would not indicate its low quality.
This kind of metrics cannot distinguish between complex and defective communications, while the current work provides the means for effectively differentiating these situations.
The work in this paper also shares similarities with works aimed at comparing different MAS and HMS architectures/ implementations to determine the most effective ones in terms of communication, which are also probably the most efficient regarding their global behaviour. The already mentioned work in
Davidsson et al. (2006 ) appears in this line of research. The work of Covanich and McFarlane (2009 ) is another example. It presents metrics for interactions between system X  X  components and tools to make this measurement easier. This work is similar to the one presented in this paper, but the one here considers the imbalance in communications instead of the number of interactions. More-over, the current work objectively relates its metrics with the QoS measured in terms of response times, whereas the work on HMS relates its metric to the effort for reconfiguration. Finally, besides the formal definition of metrics, the work in this paper presents related rules for their study, which provide a systematic way of analyzing the system performance in the line of Lee et al. (1998 ).
Moreover, the work in this paper also allows users to configure the preferred metrics setting in order to study this performance (e.g. selecting which kinds of interactions are analyzed, and choosing between several scopes and roles).

Tools to measure and analyze the load balance in commu-nications among agents according to given metrics have also been reported in the literature. This is the case of the work in Helsinger et al. (2003 ), which describes a performance measurement system built into the Cougaar agent architecture. The system considers message transport metrics to capture statistics on the commu-nications that flow through it. It supports several abstraction levels for measurement. The results obtained are available for runtime adaptation and post-mortem analysis. Though these metrics can be used internally for agent load balancing, there is no evidence to suggest that they can accurately identify the agents that are overloaded or overloading with communications. CALExE ( Ragusa et al., 2003 ) is a dynamic resource management system specially designed for mobile services. Its objectives include reconfiguring mobile agent-based services for load-balancing and adaptation purposes. The evaluation process considers the total hop distance metric, which is the sum of all the hops or links involved in service communication between all the components. As the system evolves, the value of this metric increases and the system management has the responsibility to re-adapt the system to reduce overheads.

Conversely, the current work measures the number of received and sent messages as a means to discover the overload patterns in different scopes, and relates these patterns with high response times. Once the detection of overload patterns is achieved, it can be repaired as it detects the precise agents that generate this overloading effect. This work also provides analytical tools to process and interpret the raw data from the metrics. Moreover, it considers the different scopes where problems can arise. This idea is also present in Helsinger et al. (2003 ), though their work focuses on the host, agents and applications, and on measuring aspects like memory and CPU consumption, network traffic and number of exchanged messages. Their Message Transport Metrics level collects communication statistics for the overall system, and not for each agent. Even more, it does not provide an analysis of communication overload.

Another relevant point is that this work uses data-mining techniques to analyze its data. There have been already some works in this line of research. For instance, Bot X   X  a et al. (2007 ) uses clustering techniques to provide a directed graph that represents the communication of agents. In that graph, each node represents an agent. A node is connected to another node in the graph if the agent of the first node has successfully sent one or more messages to the agent of the other node. In Bot X   X  a et al. (2006 ), clustering algorithms and data visualization techniques have been applied to represent that graph for running MAS on the JADE platform. The main disadvantage of those works is that designers need to visually inspect the whole graph of communications in order to extract their own conclusions, that is, they do not have additional analytical tools to process the data. By contrast, the present work also uses data-mining techniques for analyzing communications, but it directly detects the agents and roles that may be responsible for a defective communication pattern. Thus, it requires less effort from designers for this task, as they directly obtain the analysis results without analyzing by themselves the graph of communications.

In summary, existing works already apply metrics to evaluate balance in MAS, but there is no evidence of the use of classification rules and the extraction of communication patterns for agents as in the current work. In contrast, this work describes some metrics for communication patterns that have empirically proved to be strongly related with time-response in MAS with intensive communications. In addition, the proposed classification rules help designers to identify the agents that cause a low QoS, which helps them to improve their communication architectures. Finally, the current work also provides measurement tools to make the analysis. 3. Communication in MAS This work measures the type of communication activity in MAS. According to the present study, there can be five main categories of agents regarding this activity: 1. Overloaders : Agents that overload communications by sending  X  X  X oo many X  X  more messages than the average of the agents in a particular scope. This amount of messages is not necessarily more than the system can work. In fact, any of the studied undesirable communication patterns usually hinders the performance of a system without crashing it. 2. Overloaded : Agents that are overloaded by receiving  X  X  X oo many X  X  more messages than the average of the agents in a specific scope. 3. Overloaded-overloader : Agents that are overloaded, but also overload others. 4. Isolated : Agents that neither send nor receive messages. Since
MAS are social systems that achieve their goals by collabora-tion among their members, an isolated agent does not probably contribute to MAS functionality. 5. Regular : Agents whose behaviour regarding communication is correct according to the design of the MAS, as they send and receive an appropriate number of messages.

A balanced MAS should contain neither overloaders, over-loaded, overloaded-overloader nor isolated agents, and all its agents should be regular. The existence of the overloader, overloaded, overloaded-overloader and isolated agents is strongly related to low QoS in the system. For instance, when an agent is occupied by a large number of requests (i.e. an overloaded agent), its response time is delayed, and consequently the system X  X  overall response time also probably gets worse. In this work, the response time is used as an indicator of the QoS for the MAS.
Agent classification into a given category depends on the comparison between its activity and that of other agents performing similar tasks in the same scope. This scope can be the overall system, the agents playing the same role or individual agents. The classification is determined by applying data-mining techniques, concretely using classification rules in the different scopes according to the metrics and thresholds defined in the following sections. 4. Definition of MAS communication metrics
This work identifies three scopes to measure the performance of an agent: the global system, the group of agents playing the same role, and each agent. These different scopes provide a more reliable and detailed diagnosis on the presence and causes of undesirable communication patterns, therefor e helping to pinpoint their origin.
For instance, if an agent is overloader in the system scope but regular in the role scope, it implies that this agent is overloading the system although it is not considerably different from the other agents playing the same role. Thus, the problem is probably related to the communication pattern of the role, instead of that of the particular agent. On the contrary, if an agent is overloader in the system, role and agent scopes, the problem may only concern to the particular agent instead of a group of agents. These kinds of diagnosis can be done thanks to the use of several scopes for the metrics, and can be useful to detect the cause of negative communication patterns. The presented work classifies agents into the categories in Section 3 within each scope by using the values from the metrics introduced in Sections 4.1 X 4.3. The classification rules consider the relative distances between the values for these metrics. These distances are infor mally discussed mentioning the  X  X  X loseness X  X  between two values or the fact that a value is  X  X  X uch higher X  X  than another. However, their precise measuring requires the use of thresholds as discussed in Section 4.4.
 The next subsections use the following notation:
A y A n are agents.

S is the set of agents in the system. n ( X ) is the cardinality of the X set. r ( A x ) is the number of messages received by the A x agent. s ( A x ) is the number of messages sent by the A x agent.
R is the subset of agents playing the same role. 4.1. Scope of the global system
The performance of the global system is obtained from the performance of all its agents. Hence, the metrics of the global system are calculated from the individual metrics for each agent. 4.1.1. Metrics for an agent X  X  performance
The metrics for each agent in the global scope have two main aims. Besides being the basis for calculating the remaining metrics of the global scope, these metrics allow detecting which agents are probable to cause defective communication patterns.
In particular, these metrics identify the agents that are sending or receiving an excessive number of messages. Table 1 defines these metrics including their names, the formula to calculate them, (1) and (2), and their limit values, (3) and (4).

OrS( A j ) is the quotient between the messages sent by the A agent, and the average of messages sent by the agents in the system. In a similar way, OdS( A j ) is the quotient of the messages that are received by the A i agent and the average of messages received by the agents in the system. When the communications of an agent are close to the system average, their metrics are close to the unit. In contrast, when agents have unbalanced commu-nications, their metric values are higher or lower than the unit.
The following classification rules interpret the values of the metrics: 1. Agents who do not receive or send any messages are classified as isolated. 2. Agents whose OrS is much higher than the unit are classified as overloaders. 3. Agents whose OdS is much higher than the unit are classified as overloaded. 4. Agents whose OrS and OdS are both much higher than the unit are classified as overloaded-overloader. 5. Agents whose OrS and OdS are close to the unit are classified as regular, because their communication is balanced. 4.1.2. Metrics for the performance of a MAS
Table 2 defines the metrics for the performance of the system following the notation already introduced at the beginning of
Section 4. For each metric, this table includes its name, its calculation formula, (5) and (6), and its limit values, (7) and (8).
OrS(S) and OdS(S) metrics are calculated from the correspond-ing metrics applied to the individual agents, i.e. OrS( A
OdS( A j ), respectively. The system metrics reflect the potential unbalance in sent and received messages among all agents in the system. The individual metrics have been squared to stress their comparatively high values compared to the average in the system.
Classification rules interpret the values for the metrics in the following ways: 1. Systems that do not receive or send any messages are classified as isolated. 2. Systems whose OrS is much higher than the unit are classified as overloaders. 3. Systems whose OdS is much higher than the unit are classified as overloaded. 4. Systems whose OrS and OdS are both much higher than the unit are classified as overloaded-overloader.
 5. Systems whose OrS and OdS are close to the unit are classified as regular because their communication is balanced. 4.2. Scope of agents playing the same role
These performance metrics are measured for each agent and then collected for all the agents playing the same role. 4.2.1. Metrics for the performance of an agent
Table 3 presents these metrics with their names, definitions with Eqs. (9) and (10), and limits with Eqs. (11) and (12).
The definition of the OrR( A i ) and OdR( A i ) metrics is similar to that of OrS( A i ) and OdS( A i ), respectively. The difference is that the denominators of the fractions for role metrics only consider the agents playing the same role. This difference changes the conceptual meaning of the metrics. In particular, OrR( A i OdR( A i ) measure the communication activity of an agent only in comparison with the agents playing the same role. In this way, these metrics can determine whether the cause of an unbalanced communication activity of an agent is specific of the agent implementation or similar for all the agents playing the same role. In the second case, the cause is probably due to the definition of the role rather than the agent.

Agents are classified regarding these metrics using the following rules: 1. Agents who do not receive or send any message will be classified as isolated. 2. Agents whose OrR is much higher than the unit will be classified as overloaders.
 3. Agents whose OdR is much higher than the unit will be classified as overloaded. 4. Agents whose OrR and OdR are both much higher than the unit will be classified as overloaded-overloader. 5. Agents whose OrR and OdR are close to the unit will be classified as regular, and their communication is considered as balanced. 4.2.2. Metrics for a role X  X  performance
Table 4 describes the metric for the role X  X  performance by giving their names with calculations (13), (14) and limits (15), (16).
OrR(R) and OdR(R) metrics are calculated from the correspond-ing metrics applied to agents, i.e. OrR( A j ) and OdR( A in this section reflect the unbalance of sent or received messages for all the agents playing the same role. Similarly to the system scope, the individual metrics have been squared to stress their comparatively high values compared to the average in the role.

Classification is performed following these heuristics: 1. Roles that do not receive or send any message will be classified as isolated. 2. Roles whose OrR is much higher than the unit will be classified as overloaders. 3. Roles whose OdR is much higher than the unit will be classified as overloaded. 4. Roles whose OrR and OdR are both much higher than the unit will be classified as overloaded-overloader. 5. Roles whose OrR and OdR are close to the unit will be classified as regular, because their communication is balanced.
 4.3. Scope of the agent
This metric only considers messages concerning each agent itself. It is shown in Table 5 , and Eq. (17) calculates it:
The CA( A i ) metric is defined as the quotient between the number of messages that are received by the A i agent and the number of messages that are either received or sent by the A agent. This metric allows designers to detect agents that hardly ever sends messages, or agents that hardly ever receives messages. In common agent interactions, an agent usually both send and receive messages. For instance, they ask for a service sending a message, and get the result of the service receiving another message. Therefore, agents that either hardly ever send messages or hardly ever receive messages usually reveal a defective communication pattern that should be inspected.
Using this metric, agents whose communications are unba-lanced can be identified and classified as follows: 1. Agents whose CA approaches 0.5 are classified as regular. 2. Agents whose CA is much lower than 0.5 will be classified as overloaders. 3. Agents whose CA is much higher than 0.5 will be classified as overloaded. 4. Agents whose performance is null (0/0) are classified as isolated. 4.4. Thresholds
As mentioned in the introduction, measuring relative distances between values implies establishing thresholds. For instance, this is required to determine the  X  X  X loseness X  X  to 0.5 for the agent scope, and the precise meaning of the expression  X  X  X uch higher X  X  than the unit for the role and system scopes. Thresholds define the boundary between values for the different types of patterns in the classification rules. Thus, they must be adjusted in such a way that they correctly distinguish those types of patterns. When observing the values for metrics, close values must be labelled with the same type of pattern, and distant values must be labelled with different patterns.

In order to select the adequate thresholds, it is necessary to understand the meaning of the metric values as well as to know the common useful agent-oriented communication patterns.
Section 4.4.1 describes the meaning of metric values that allows a designer to understand the related threshold values. In addition,
Section 4.4.2 discusses some possible useful communication patterns and the selected threshold values, as well as the reasons for these choices. 4.4.1. Meaning of metric values regarding thresholds
In the system scope, the metrics measure the communication activity in comparison to the average communication activity of all the agents of the system. When an agent obtains the unit, it means that the agent has a communication activity which is the same than the average of all the agents in the system. However, if the agent obtains a different X value, it means that an agent has an activity that is the average multiplied by X . For instance, if X is two, the agent has twice the average communication activity. In the role scope, the metrics values have a similar meaning, but the difference is that the communication activity is measured regarding only the average communication activity of those agents playing the same role than the measured agent, instead of considering all the agents of the system.

When selecting a specific threshold value T , it means that an agent classified as regular can have a communication activity at most T times the average of that of all the agents belonging to the whole system or to a particular role, regarding the scope of the measurement. For instance, if the selected threshold was five for the system scope, it would mean that an agent would be classified as regular as long as its communication activity is not greater than five times the average of the system. The same example can be applied to the role scope, but in this case the agent would be classified as regular unless its social activity is greater than five times the average of the agents in the same role.

The meaning of the metric of the agent scope is different. In particular, this metric is always within the interval [0,1], because of its mathematical definition, i.e. a /( a+b ) where a and b are positive numbers. In particular, when this metric is exactly in the middle of the [0,1] interval (i.e. its value is 0.5), it means that the number of sent and received messages is balanced. On the other hand, if the metric is near any of the two limits, it means either that the agent sends too many messages than it receives or the opposite. In particular, if an agent obtains X o 0.5, the agent sends ((1/ X ) 1) times more messages than it receives. If an agent obtains X 4 0.5, the agent receives ((1/(1 X )) 1) times more than it sends. It is worth noting that both expressions are inverses of each other and true for all values of X . However, the alternative formulation allows highlighting the ratio that is greater than the unit in each case. These expressions are obtained with several mathematical steps from the definition of CA metric of Eq. (17). These mathematical steps are omitted in this paper for the sake of brevity. For instance, if X  X  0.1 the agent sends nine times more messages than it receives. Similarly, if X  X  0.9, the agent receives nine times more messages than it sends. Thus, a T threshold means that an agent is classified as regular as long as it neither sends more than ((1/(0.5 T )) 1) multiplied by the messages that it receives, nor receives more than ((1/(1 (0.5+ T ))) 1) multiplied by the messages that it sends. The second number is the same as the first number, as one can mathematically observe. 4.4.2. Selection of the thresholds according to useful communication patterns
For determining the threshold for the classification rules, it is necessary to know most useful common communication patterns in MAS. For the sake of brevity, this paper analyzes the useful common communication pattern that requires the highest threshold value (i.e. the agent mediator pattern). In this way, most useful common communication patterns are not classified as undesirable patterns.

Some useful communication architectures, such as Montano et al. (2008 ) and Ni and Cheng (2010 ), use the agent mediator pattern, in which there are agents that are intermediaries for other agents. In these architectures, these intermediary agents can have three times more communication activity than the agents that use them to communicate. Effectively, when they communicate two agents they have twice their activity. Besides this activity, they have their own particular activity, for instance consulting the necessary data for transforming the message between the two agents. If these message exchanges are in the average of the MAS, these intermediate agents would approxi-mately obtain three for the metrics in these communication patterns.

Nevertheless, it must be noticed that the measurement is subject to the specific dynamics of each executions, which depend on its circumstances. The circumstances usually imply an increase of social activity much less than half of the average, specially in large MAS. However, a bound cannot be assured for this increase since the circumstances are unpredictable. This work assumes a limit that is much greater than usual in order to guarantee the satisfaction in most cases. In particular, this work assumes that an agent can have an increase in social activity up to half of the average because of circumstances. Considering the communication patterns with intermediate agents (whose communication activity is thrice the average) and the variability between executions (social activity up to half of the average), some agents can have up to 3.50 in the metrics in both system and role scopes. In these cases, a threshold of 2.50 is reasonable as the threshold measures the difference between the metric and the unit.

Regarding the agent scope in the communication architec-tures such as Montano et al. (2008 )and Ni and Cheng (2010 ), some agents need to use interaction protocols where they demand a service and afterwards confirm the reception of its result. In this manner, an agent sends two messages just receiving one, and the other agent receives two messages but it only sends one message. The circumstances can alter this proportion and increases the ratio. For instance, a message can be lost and resent. Considering this, an agent can send up to three times more messages (i.e. the lost message, the message that is sent again, and the message for confirming the reception) than it receives (i.e. the message of response) or has the inverse ratio in this communication pattern. Usually, only few messages are lost, and the probability of losing the same message several times is very low, and consequently this case is not considered for the selection of the threshold. Therefore, a ratio higher than three will probably point out a problem in communications.
Considering this ratio, the threshold of 0.25 would discriminate between regular patterns and others. In the formula mentioned in Section 4.4.1, the T threshold is 0.25, and consequently the ratio is (1/(0.5 0.25) 1), which is three times more messages of one type than of the other. In conclusion, a threshold of 0.25 is reasonably useful in the agent scope.

Moreover, the past experiences measuring MAS support the choice of these values for thresholds, and some of these experiences are briefly presented in the next section. A threshold of 2.50 allows distinguishing the communication patterns for both the system and role scopes, and a threshold of 0.25 correctly discriminates the different communication patterns in the agent scope.

In brief, the proposed values for thresholds in the system, role and agent scopes are supported by both theoretical reasoning with communication patterns and empirical experimentation. As an example of their use, they are applied in the case studies of the next section. 5. Experimentation: the Crisis-management and Cinema case studies
In order to test the identification of undesirable communica-tion patterns according to the metrics and classification rules defined in the previous section, two MAS have been considered.
The first case study refers to a Crisis-management setting where a small MAS supports the emergency services. The MAS tries to minimize conversations and not to overload the communication infrastructure that is stretched to the point of collapse. This case constitutes the original test-bed for the present approach and has been used in the definition of its components. The second MAS is used to buy cinema tickets. It validates our claims about the scalability of this approach, since it is a complex MAS (including several classes of agents and roles with elaborated protocols) highly demanding in terms of agent communications.

Both case studies involve real human actors interacting with the MAS. These types of systems are frequently used in the literature, e.g. Montano et al. (2008 ) and Ni and Cheng (2010 ), and consequently most engineers familiar with agent-oriented sys-tems can understand these case studies and the benefits of the proposed work. Nevertheless, other types of MAS are planned to be measured in the future in order to assure that the proposed metrics can be useful for several types of MAS, as mentioned in Section 7. Both cases have been developed using the IDK ( Go  X  mez-Sanz et al., 2008 ), a set of tools for developments following the
INGENIAS methodology ( Pavo  X  n et al., 2005 ). 5.1. Crisis-management case study
This case study is described in Garc X   X  a-Magarin  X  o et al. (2009 ). A poisonous material has been released in a city affecting part of its population. To combat the situation, the city has declared the state of emergency. However, the size of the emergency over-whelms the medical services. Citizens with medical skills and knowledge can help the people affected in their nearby areas. At the same time, citizens can be warned about the affected locations in order to avoid them.
 The use cases of the Crisis-management system are shown in
Fig. 1 with an extension of Unified Modelling Language (UML), which includes some agent-oriented concepts. For instance, the actors of the use cases are the agent roles, and these are represented by means of the UML stereotypes. The main cases are related to coordinating citizens (i.e. CoordinationForHelpingEachOtherUC use case), warning citizens of affected locations (i.e. WarnCitizensOfAf-fectedLocationsUC use case) and keeping the emergency services informed (i.e. InformCentralServicesUC use case).

In the Crisis-management system, there are four coordinator agents (beginning with the CoordA prefix) playing the CoordinatorR role and four network agents (beginning with the NetworkA prefix) playing the NetworkR role, besides an information agent playing the InformationR role. Each citizen interacts with a coordinator agent to perform certain actions, such as asking for help or offering medical assistance. In particular, each time a citizen is poisoned and needs help, the coordinator agent triggers an interaction with a network agent. After this, the network agent interacts with the information agent to notify the risk area and interacts with other coordinator agents looking for a citizen that can heal the poisoned person. Afterwards, the network agent communicates the result of the search to the coordinator agent that asked for help.
The experiment considers two versions of this system: one with a na X   X ve selection mechanism for communications, and another with a random selection mechanism. Although these versions are similar, their communication patterns are different, since the selection mechanism conditions the communication structures. In the first version, the coordinator agents use a default mechanism (referred as na X   X  ve selection mechanism) to select the network agent that will notify the risk area and look for a citizen with medical capabilities. This mechanism usually selects the same network agent, because it selects the first of the list of a particular type of agents (called yellow pages in MAS terminology). By contrast, in the second version, the coordinator agent selects randomly the network agent used to warn about the affected location and start the search of a person with medical capabilities. This selection mechanism usually selects different network agents for different interactions.

In a scenario with balanced communications, the values for the metrics should be around 1.00 for the system and role scopes and 0.50 for the agent scope, which implies that most agents follow the regular pattern. The first version of the MAS does not get these values for the metrics: it presents undesirable communication patterns because the target agent is almost always the same.
The second version gets values for the metrics that are closer to the desired ones because it chooses the target agent randomly.
The transition from the first version to the second merely consists on modifying the overloading behaviour of the communication-intensive agents, but it improves the overall efficiency of the MAS. 5.1.1. Experimental results in the Crisis-management system with na X   X  ve selection
Table 6 presents the results for the first version of the Crisis-management MAS using the metrics from previous sections (i.e. OrS( A j ), OdS( A j ), OrR( A j ), OdR( A j ) and CA( A the classification results within the three scopes considered for this implementation.

To determine the category each agent belongs to in each of the three scopes, one has to apply the classification rules instantiating the values of the metrics and thresholds. For example, consider the values of OrS ( NetworkA_1 )and OdS ( NetworkA_1 )in Table 6 , and the proposed threshold of 2.50. The categories for NetworkA_1 in the role scope are obtained as follows:
NetworkA_1 is overloader because OrS(NetworkA_1) 4 1.00+ threshold.

NetworkA_1 is overloaded because OdS(NetworkA_1) 4 1.00+ threshold.

Therefore, the agent NetworkA_1 follows an overloaded-over-loader pattern according to the classification rules in Section 4.
Regarding the results in Table 7 , there are agents with non-regular categories and, therefore, with unbalanced communications in the corresponding scopes. Note that there are 0/0 results for three network agents. The reason is that they have neither sent nor received messages. NetworkA_1 shows three categories: it is regular in the agent scope, overloader in the system and role scopes but also overloaded in the role scope. This is due to the fact that it sends and receives too many messages with respect to the rest of the agents playing the same role, but with respect to the agents in the system, it only sends too many messages. The overloaded category that appears in the role scope is neutralized by the rest of the agents in the system (within the system scope), or by the proportion of the sent messages with respect to the received messages (within the agent scope). In the agent scope, the message sending activity is neutralized by the message receiving activity, which makes the agent regular.

Metrics for the behaviour of roles have also been calculated with the classification results shown in Table 8 . These results provide hints about the behaviour of roles as integrated groups of agents. The study of the values with the thresholds shows that the values belonging to the Coordinator role are much closer to the unit than those of the Network role. Thus, the Coordinator group behaves correctly, whereas the Network group is classified as overloaded-overloader because its agents receive and send messages in a non-balanced manner.
 Finally, metrics for the system lead to the classification in
Table 9 . The system as a whole does not present a proper communication behaviour.

As a consequence of the values in Tables 8 and 9, it can be concluded that neither the Network role nor the system are behaving correctly. Its communications are non-balanced, i.e. its agents receive and send messages in a non-balanced manner. 5.1.2. Experimental results in the Crisis-management system with random selection
Once detected the agents and scopes that are related to the defective communication pattern s, the task of redesigning the communication protocol becomes easier. Non-regular agents parti-cipate in the misleading conversations that must be changed.
Designers specify conversations with the IDK using diagrams expressed with Agent Unified Modelling Language (AUML) , which is an extension of UML, and attaching code snippets to their tasks.
Changing these elements allows generating a new version of the MAS of the case study using a mo del-driven approach ( Kleppe et al., 2003 ).
The previous process was used to produce another version of the Crisis-management MAS with a different selection mechanism for the target agents of communications. This second architecture has the same number of agents playing each role as before. The difference between these versions is that in the second case the coordinator agent does not always ask for a service on behalf of the customer to the same network agent, but it randomly chooses any of the agents playing the same role. This random selection mechanism is performed by generating a random number in the interval between one and the number of network agents, by means of the predefined libraries of the Java programming language. Then, the coordinator agent selects the network agent that is in the position of the random number in the list of agents of the network type (called yellow pages in the MAS terminology).
Although the random selection mechanism can have an unbalanced distribution in short time intervals, this mechanism gets balanced distributions more frequently when the time interval is larger. In the experiments, this system is classified as regular in the three scopes. Tables 10 X 13 present the results obtained for it with the same inputs and customer workloads as in the previous implementation of the crisis system. Tables 10 and 11 contain the values of the agents X  metrics, and Tables 12 and 13 contain the values for the roles and the system ones.
Changes from the first version of the Crisis-management system, which has unbalanced communications, are as follows: 1. Isolated agents do not appear in this system, so all Network agents contribute to achieve the system goals. 2. There are no Network agents classified as overloader or overloaded within any of the three scopes, because their communication activity is correctly distributed and all
Network agents participate in the communication. 3. The Coordinator and Network roles obtain better results than in the first architecture. In particular, the activity of the Network group has been distributed among all the agents playing this role, cancelling out the previous overloading effect of this role. 4. As far as the system is concerned, results have improved for all the three metrics.
 As Tables 14 and 15 indicate, the second version of the
Crisis-management MAS provides a higher QoS than the first version, as it provides lower response times. The system response time is calculated as the average of agents X  response times. In conclusion, the measurement values for the presented metrics are strongly related with the QoS of the MAS in this case study. 5.2. Cinema case study
The other MAS works on the acquisition of cinema tickets according to different characteristics like the movie, price or extras available in the cinema (e.g. nachos or popcorn). Fig. 2 shows the main use cases of this MAS, which are related to making plans (i.e.
MakePlansUC use case), buying cinema tickets (i.e. BuyCinemaTick-etsUC use case) and buying extras (i.e. BuyExtras use case). The InterfaceAgents , BuyerAgents and SellerAgents , respectively, play the
InterfaceRole , BuyerRole and SellerRole roles. The InterfaceAgents formalize the requests of the users and ask for services on their behalf, while each SellerAgent manages the selling of tickets and extras for a cinema. The BuyerAgents are intermediaries between the other two types of agents and manage the credit cards of users.
The main workflow of the systems is as follows. The system starts its activity when a user interacts with an InterfaceAgent looking for a cinema ticket. The InterfaceAgent asks the BuyerAgent for a movie and some preferences of the user. Then, the
BuyerAgent sequentially starts and finishes an interaction with each SellerAgent , one by one. In this interaction, the SellerAgent offers a cinema ticket, and the BuyerAgent rejects the offer if it does not satisfy the mandatory requirements (e.g. above some price). When the BuyerAgent finds a SellerAgent whose offer satisfies the mandatory requirements, the BuyerAgent commu-nicates with the InterfaceAgent to present the offer. The Inter-faceAgent presents it to the user, who can finally accept or reject it. If the offer is accepted, the InterfaceAgent communicates with the
BuyerAgent who actually buys the cinema tickets with a credit card and asks for the extras to the SellerAgent . The possible extras are transmitted from the SellerAgent to the BuyerAgent , then from the BuyerAgent to the InterfaceAgent , and finally to the user. The user selects the extras, and the InterfaceAgent communicates the decision to the BuyerAgent , who actually buys the extras.
The analysis of the Cinema case study presented here only covers the transition between the InterfaceAgents and the BuyerAgents to discover overloading effects in the se communications. These effects can be due to a defective choice of BuyerAgents , by always choosing the same one in a similar way to the previous case study. The other transition, which is from the BuyerAgent to the SellerAgent ,isnot going to be studied for the sake of brevity. The number of agents playing these roles is 100 in both cases.

The differences between this and the previous case study are the following:
The Cinema case study is more complex than the Crisis-management one: the former has 100 agents for some of the involved roles, whereas the other has only 4 agents at most for each role.

The architectures and the communication protocols of the two systems are different, being more complex in the Cinema system, as they imply more interactions and types of messages.

The response times are measured for each agent in the first case study, whereas in the second one only the response time for the whole system is measured.

The tables showing the values for the metrics and classification results for the na X   X ve selection method (Tables 16 X 19) and the random selection method (Tables 20 X 23) are given below. As the overloading effect can be mainly suffered by a type of agents that play a determined role, i.e. BuyerAgents in this case, the analysis is restricted to this type of agents for the sake of brevity.
This constitutes an example in which designers decide to analyze a part of a MAS that they consider more relevant. This example shows that the proposed metrics can be easily applied to large and complex MAS, as these metrics can separately analyze different parts of MAS. This case study uses the classification methods that are proposed in Section 4.

The results of the version with na X   X ve selection reveal two undesirable categories: BuyerAgents that do not receive any request from the InterfaceAgents are classified as isolated, and the only one that receives all requests is overloaded. Tables 18 and 19 confirm these results for the Buyer role and the system, which also shows the overloaded category.

In the version of the system with a random choice of the target agent for communications, there is evidence that the policy offers a more balanced selection method for the BuyerAgent . This produces values close to the unit for the metrics and therefore regular patterns.

For response times, this work measures the time elapsed since a ticket is first requested until the cinemas are chosen for all the requests. The measurements have been repeated for different numbers of requests: 10, 20, 30, 40, 50 and 60. Table 24 shows the difference between the response times computed for the na X   X  ve method and the random selection method. It highlights evidence that the Cinema system without overloading communications performs better than the Cinema system with them, and this difference becomes greater when there are more interactions in the system. These experiments were previously performed in a reduced setting of the same MAS with fewer agents, and the QoS differences were smaller between the two versions of the selection mechanism. This can be explained by the fact that, in the case with more agents and the na X   X ve selection policy, there were more InterfaceAgents that overloaded a BuyerAgent , and therefore the response times were longer. Thus, the results in this case study suggest a new research finding over the previous case study: the more requests or agents a MAS has, the worse and more notorious the overloading effect becomes in comparison with a system with balanced communications. It is worth noting that, in this relation between the overloading effect and the response times, the first one is detected by measuring the communications instead of the workload of each agent, which makes this finding novel to the best of the authors X  knowledge even in the general case of distributed system. 6. Computerization of the measurement
In order to facilitate the extensive application of the proposed metrics, engineers need tools that automatically measure the metrics in the MAS that they are developing. For this reason, the paper presents both the metrics and the prototype tools that allow engineers to apply the presented work. These tools are two prototypes for the IDK suite ( Go  X  mez-Sanz et al., 2008 ) that can be downloaded from the GRASIA 1 research group website ( http:// grasia.fdi.ucm.es in  X  X  Research  X  X  section and  X  X  Additional Material for papers  X  X  subsection). These two IDK modules are: Module for Measuring Communication from the Programming Code (final version available).

Module for Measuring Communication by means of the analysis of the IDK logs (beta version available).

The difference between the two modules is the way they extract and show the data regarding the MAS. The first one is fitted with the communication infrastructure and outputs the measurements from the MAS in real time. The second one receives input from an event log file that is generated during
MAS execution, and outputs the measurements to two files (one for the metrics and categories, and another for the response times). Thus, engineers use the first module for runtime analysis of MAS and the second one for offline analysis.

The use of both modules implies specific tradeoffs regarding the analysis. The first module enables focusing on the analysis of certain communications, i.e. specific interactions. This facilitates further study of interaction types whose design needs to be reconsidered, perhaps because engineers suspect that they are producing overloading effects. However, this module must be incorporated into the infrastructure, so previous analysis of the interaction types is required to determine which ones to measure.
The second module releases developers from selecting interaction kinds. Developers obtain the measurements values for all the interaction types just by running the module.

Given the dependencies of the modules with the IDK, they are mainly applicable to MAS developed with the INGENIAS metho-dology ( Pavo  X  n et al., 2005 ). However, engineers can apply them to other methodologies if they provide the required data about their
MAS with the suitable format. 7. Conclusions and future work
The presented approach introduces metrics and classification rules that analyze communication architectures. These rules have led to identify several typologies of undesirable communication categories in MAS: overloader, overloaded and isolated agents. In order to distinguish the degree to which an agent or role exhibits these behaviours, this work recommends certain thresholds to be used in the classification rules. Engineers can determine precisely which agents or roles are decreasing the performance of the system because of the communication design, and fix those behaviours.
In the literature, there are not works that quantitatively measure the communications of MAS for detecting undesirable communication patterns, to the best of our knowledge. In this line of research, the main contribution of this paper is a corpus of metrics for measuring communications of MAS, which correctly detects the existence of defective communication patterns. Furthermore, these metrics are strongly related to the QoS in
MAS as shown in the current paper. In fact, this paper is also the first work that clearly and quantitatively relates the communica-tion patterns to the performance of the system. Engineers can improve the performance of the MAS by improving the commu-nication design, being guided by the presented metrics. Both the measurement of activities in MAS communications and the relation of the communication categories with the system performance are illustrated through several experiments with different MAS and configurations of these affecting their commu-nications. Moreover, this work includes two prototype tools that allow designers to perform real time and offline analysis of MAS.
Currently these tools work on the IDK suite of the INGENIAS methodology, but independent implementations will be made available in the near future.

There are additional plans to extend the presented work in several ways. These plans include several extensions of the framework, methodological issues and tests.

In order to define metrics that are more accurate, this work can be extended by including weights for different kinds of communications if necessary. For instance, calls fo r proposals to several agents have a different communication load from requests to only one individual agent. A further study can indicate whether the metrics adjusted with these weights are more accurately related to QoS.

Regarding the application of metrics in system design, existing agent-oriented software engineering methodologies do not usually include a stage for measuring the quality of communica-tions and improving their design. For this reason, a short-term goal is the extensive application of these metrics to the last stage of an agent-oriented methodology, specifically INGENIAS ( Pavo  X  n et al., 2005 ). System-tests can incorporate automated detection of agents with undesirable communication patterns.

In addition, there is a lack of a large set of case studies to determine which metrics and contexts are useful when testing the communication designs of MAS. This is a limitation of our work but also of related ones. This work plans to carry out more case studies to gather additional knowledge on the se issues. These case studies can include types of MAS that have a gents that do not simulate human behaviours, such as MAS for planning. In this manner, these metrics may be shown to be useful fo r different types of MAS.
Another limitation of the current work is that the metrics have only been applied to post-mortem analysis, even if monitoring could be made during runtime. There are plans to extend its application to adjust the runtime behaviour of MAS as proposed in Helsinger et al. (2003 ). It is worth mentioning that existent works do not adapt communication architectures in runtime according to communication metrics.

Finally, the metrics based on balance have not been applied to all the existing resources of a MAS. Thus, similar metrics can consider other kinds of resource usage beyond communications in the future, for instance, letting a MAS require access to a database resource. At low level, access is usually regulated by means of pools of connections. At high level, either each agent is responsible for not abusing this resource, or there is a single agent acting as mediator between the MAS and the resource. In the first case, the problem is that an agent may not behave as expected and abuse the resource; in the second case, an agent can try to abuse the mediator agent by insistently asking for a service. The metrics will assist engineers in achieving tradeoffs that do not suffer from overloading effects.
 References
