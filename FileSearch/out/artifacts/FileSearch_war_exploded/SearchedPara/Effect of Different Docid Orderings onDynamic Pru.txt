 Document-at-a-time (DAAT) dynamic pruning strategies for information retrieval systems such as MaxScore and Wand can increase querying efficiency without decreasing effec-tiveness. Both work on posting lists sorted by ascending document identifier (docid). The order in which docids are assigned  X  and hence the order of postings in the posting lists  X  is known to have a noticeable impact on posting list compression. However, the resulting impact on dynamic pruning strategies is not well understood. In this poster, we examine the impact on the efficiency of these strategies across different docid orderings, by experimenting using the TREC ClueWeb09 corpus. We find that while the num-ber of postings scored by dynamic pruning strategies do not markedly vary for different docid orderings, the ordering still has a marked impact on mean query response time. More-over, when docids are assigned by lexicographical URL or-dering, the benefit to response time for is more pronounced for Wand than for MaxScore .
 Categories &amp; Subject Descriptors: H.3.3 [Information Storage &amp; Retrieval]: Information Search &amp; Retrieval General Terms: Performance, Experimentation Keywords: Dynamic Pruning, Docid Ordering
MaxScore [7] and Wand [2] are two document-at-a-time (DAAT) dynamic pruning strategies that can efficiently score documents without decreasing retrieval effectiveness at rank K , nor requiring impact-sorted posting lists. Instead, the postings for every term have the same global ordering, such that they can be read in parallel.

MaxScore achieves efficient retrieval by omitting the scor-ing of postings for documents that will not make the final retrieved ranking. In contrast, Wand takes a different ap-proach, by repeatedly calculating a pivot term . The next document to contain the pivot term is called the pivot docu-ment , which will be the next document to be fully scored. A major benefit of Wand over MaxScore is that skipping [5] forward in posting lists is supported, which reduces posting list decompression overheads, and can reduce disk IO.
The ordering of index docids has been studied within the literature. In particular, as the posting lists typically record delta gaps between docids, ensuring that these gaps are as small as possible increases compression, while allowing ef-ficient memory use at retrieval time. For instance, Blel-loch and Blandford [1] argued that maximising the cluster-ing property of posting lists so that documents with similar content should have similar docids resulted in smaller delta gaps. Silvestri [6] later showed that high clustering could be cheaply approximated by ordering docids according to the lexicographical order of their URLs.

Nevertheless, while URL docid ordering can attain highly compressed indices, there has been no published work ex-amining the impact of docid orderings on the efficiency of dynamic pruning strategies. To address this, this work con-tributes a study of several dynamic pruning strategies using different docid orderings.
Our investigation is conducted using the TREC ClueWeb09 (cat. B) collection, which comprises 50 million English Web documents, aimed to represent the first tier index of a com-mercial search engine. We index this collection using the Terrier information retrieval platform 1 , with stemming and stopword removal. Each posting consists of only the Elias-Gamma encoded docid gap and the Elias-Unary encoded frequency. Skip points within the posting lists are placed in a separate file, with L = 10 , 000 [5].

For index orderings, we consider three alternatives, de-tailed below. Basically, the idea is to put documents sharing many common terms close to each other and assign identi-fiers accordingly. In this way the likelihood of having small gaps in posting lists is higher. Smaller gaps correspond to smaller (in terms of bit occupancy) codewords and, thus, smaller indexes.
 Random ordering : As a baseline, we randomise the or-dering of documents in our index, assigning identifiers to documents without any specific order.
 Doclength ordering : Longer documents are more likely to share common terms. In this paper, we assign docu-ment identifiers by decreasing length of documents (i.e. the longest document takes docid 0), which has been shown to have a positive impact on the size of the resulting index [3]. URL ordering : Docids are assigned according to the lexi-cographical ordering of the URLs 2 . URL ordering is good for compression, as it approximates the clustering property [6].
By indexing ClueWeb09 with these different variants of docid ordering, we obtain several different inverted files. Statistics of the inverted files are detailed in Table 1. We http://terrier.org We would also liked to have used crawl ordering, however URL ordering is all that is available for ClueWeb09.
T able 1: Statistics of the created inverted files. note that URL ordering gives the highest compression, fol-lowed by doclength. As expected, a random ordering in-creases the delta gaps in the posting lists, resulting in the largest inverted file size.

In the following experiments, we compare the MaxScore and Wand DAAT dynamic pruning strategies, as well as an exhaustive  X  X ull X  DAAT strategy, which scores all postings for each query term. For testing retrieval efficiency, we ex-tract streams of user queries from a real search engine log [4]. In particular, we select the first 1,000 queries of the query log, applying stemming and stopwords removal (empty and no-match queries are removed). Two experiments are per-formed ranking documents using BM25, namely to evaluate the query average response time and the number of postings fully scored by each strategy. The number of documents re-trieved for each query is set to the TREC standard value of K = 1 , 000. All experiments are made using a dual quad-core Intel Xeon 2.6GHz, with 8GB RAM and a 2TB SATA2 disk containing the index. Note that, as MaxScore and Wand do not impact on retrieval effectiveness to rank K , there is no need to compare effectiveness using measures such as NDCG.
 T able 2: Total number of postings scored in millions (top) and mean query response time in seconds (bot-tom), for 1,000 queries. Relative percentages com-pared to Full are reported. Relative percentages for URL ordered response time compared to random are reported on right.
Table 2 reports the results of our experiments in terms of both millions of postings scored and mean query response time for the 1,000 queries.

We first compare different docid orderings. In general, we note that response times are lower for URL ordering, while random and doclength are approximately the same. This is in marked contrast to Table 1, where the random baseline ordering resulted in a markedly larger inverted file than doclength, and hence a larger response time would be expected for the random ordering. In fact, the number of postings scored for the random index are actually the lowest. This suggests that even if less time is spent decoding and processing less postings, this is counter-balanced by more time spent by the operating system in managing IO opera-tions for the larger random posting lists. On the other hand, while URL ordering does not markedly decrease the number of postings scored, it markedly benefits query response time, particularly for the Wand strategy.

With respect to dynamic pruning strategies, MaxScore scores 43-47% of all postings, while Wand scores 11-15%. This difference is also reflected, although with less strength, in the mean response times, where MaxScore and Wand respectively take about 90% and 63-70% of the response time of the exhaustive Full strategy. Once again, this can be explained by the fact that larger inverted files require more IO operations, which counter-act the benefits given by the reduced decoding and processing of postings. Of all results, we note with particular interest that, while URL ordering scores more postings than random, the re-sponse time benefit is larger for Wand (87.5%) than for the other strategies. We hypothesise that by applying URL ordering, not only is the average gap between docids re-duced, but the postings for the retrieved documents are placed closer together, which benefits the skipping used by Wand . To confirm this, for the 1,000 queries, we exam-ined the mean standard deviation of the docids for the re-trieved documents. On average, the URL ordered index had a smaller mean standard deviation (245k postings) than ran-dom (382k postings) and doclength (359k postings). The lower mean standard deviation suggests that the retrieved documents are more likely to be clustered within the URL ordered posting lists. As a consequence, the response time of Wand is enhanced by this URL ordering, as more clustered results permit more skipping (with the associated benefit of avoiding unnecessary posting decompression).
This paper is the first examination of index ordering in the context of DAAT dynamic pruning strategies. Our results show that the number of postings scored does not markedly vary for different index orders when applying the MaxS-core and Wand pruning strategies. However, mean query response time does exhibit marked reductions, and compara-bly more for the dynamic pruning strategies than for an ex-haustive Full DAAT strategy. These results show the value in URL docid ordering for both increasing inverted file com-pression and enhancing the efficiency of dynamic pruning strategies. Moreover the clustering property of posting lists benefits both query processing time (particularly when us-ing skipping) and index compression. Finally, we note that, with 50 million documents, our experiments are carried out at a larger scale than previous works  X  for instance, 100 times as many documents than [1], and 10 times as many as [6].
