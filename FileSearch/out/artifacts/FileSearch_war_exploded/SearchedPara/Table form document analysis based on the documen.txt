 ORIGINAL PAPER Akira Amano  X  Naoki Asada  X  Masayuki Mukunoki  X  Masahito Aoyama Abstract Structure analysis of table form documents is an important issue because a printed document and even an electronic document do not provide logical structural information but merely geometrical layout and lexical information. To handle these documents automatically, logical structure information is necessary. In this paper, we first analyze the elements of the form documents from a communication point of view and retrieve the grammatical elements that appear in them. Then, we present a document structure grammar which governs the logical structure of the form documents. Finally, we propose a structure analysis system of the table form documents based on the grammar. By using grammar notation, we can easily modify and keep it consistent, as the rules are relatively simple. Another advantage of using grammar notation is that it can be used for generating documents only from logical structure. In our system, documents are assumed to be composed of a set of boxes and they are classified as seven box types. Then the box relations between the indication box and its associated entry box are analyzed based on the semantic and geometric knowledge defined in the document structure grammar. Experimental results have shown that the system successfully analyzed several kinds of table forms. Keywords Form processing  X  Document models  X  Document analysis systems 1 Introduction Various kinds of form documents such as research grant application sheets are in circulation around us, and one completes them by filling in the personal data, e.g. name and affiliation, together with the document specific data, e.g. re-search purpose and budget plan (Figs. 1 and 2 ). Many people desire to process such a document not on paper but on a com-puter by using a word processor that promises a high-quality finished product and provides an easy to edit document. are generated by their creators, and sometimes they are mod-ified, as the required information may change. After dis-tributing the form, users first read the form, then fill in ap-propriate information in each field. Finally, they are read or analyzed by others and sometimes stored into databases. Al-though many forms are produced electronically these days, it is difficult to process them automatically as they do not hold their structural information explicitly. Therefore, it is very important to retrieve structural information from exist-ing forms and define representation of them as well (Fig. 3 ). time [ 1 , 2 ]. For printed documents, detection of rules and ex-traction of the user filled-in data were conducted [ 3 , 4 ]. An-other type of research is the form identification based on the image features [ 5 , 6 ]. In other research, identifications are extended to use boxes or cells [ 7 , 8 ]. As the form identifica-tion method using box structure requires structure represen-tation based on the boxes, several structure representations based on the geometrical adjacency of boxes have been pro-posed [9 X 12]. Some researches have extended the adjacency analysis to the logical structure analysis, which incorporates a priori knowledge. In most research, knowledge of the form structure is represented by a set of production rules [13 X 15]. However, as table forms have much variety in their struc-ture, it is difficult to adopt these systems to each document structure as they are constructed on the production rules. To overcome this problem, in the system proposed by Rahgozar et al. [ 16 ], graph grammar is used for the representation of the knowledge. In the system proposed by Cracknell et al. [ 17 ] or the system proposed by Belaid [ 18 ], ordinary gram-mar is used and even the Unix tool bison is used for the parser in the former one. However, document structure con-sidered in these systems is quite simple compared to prior ones such as [ 13 ]. famous representation is SGML [ 19 ] and XML. Both for-mats define attributes of words or sentences and also struc-ture of documents. However, as both formats provide only the description of a basic structure, it is difficult to repre-sent complex form structures by using only these. As with other XML-based formats, we need additional formats to de-scribe complex forms. Other industrial representations such as Document Management Alliance (DMA) [ 20 ]andOpen Document Architecture (ODA) [ 21 ] also scope on document handling but do not offer the capability of complex struc-tural representation. In the research by Cracknell et al. [ 17 ], a representation format of the logical structure for the form was proposed. The aim of this format is quite similar to ours; however, the format has no consideration for the two-dimensional (2D) structure of the table part of the forms. a method to retrieve structural information from existing documents based on document structure grammar and then propose a representation of table form documents TFML. formation is to be filled-in on paper, it can be recognized as a language. Therefore, we can use the underlying grammar for recognizing the structure of form documents. The target form of this paper is table form documents. They are decom-posed into a set of fields, and those relations are analyzed based on the semantic and geometric knowledge defined in the document structure grammar. One advantage of using a grammar-based approach rather than a production system is that a number of if-then descriptions like [13 X 15] is difficult to keep consistent when the system is reconfigured. Another advantage is that it can be used for document generation, modification, and even for correction.
 documents from the communication language point of view and then present the document structure grammar. We propose a table form document analysis system based on the grammar and then present an XML-based representation of table forms. Finally, experimental results of analysis are presented. 2 Document communication model and table form document Documents have their own function, and from this point of view, they can be classified into two categories: In-formational Documents and Interactive Documents .The Informational Documents are the ones that deliver some fixed information to the readers, for example newspapers or commercial leaflets. From the communication point of view, these documents have complete information, and the communication direction is one way. Therefore, we can call them complete documents. On the other hand, the Interac-tive Documents are the forms on which we need to fill in appropriate information and send them to others for further processing.
 ments. As the Interactive Documents can be considered as some sort of sentence in a communication language using forms, we may be able to determine the underlying grammar of them. In this paper, we propose a grammatical descrip-tion of the Interactive Documents and an analysis method for them. One important aspect of this paper is to reveal the grammar which we are using when we communicate by such forms. By establishing such grammar, we can use it for analyzing, modifying, reformatting, error correcting and in many other applications. 2.1 Communication functions of each element in the interactive documents The Interactive Documents consist of communication ele-ments and their structures. Here we classify communication elements into three categories by their function. 2.1.1 Indication and explanation function In the interactive documents, document creators prompt readers to fill in appropriate information at certain places. We call the function of elements which indicate the type, place, or format of information to fill in  X  X ndication and Ex-planation function X . In Fig. 4 a, an element with thick lines indicates the fill-in information of the adjacent element. In Fig. 4 b, the element with thick lines indicates general expla-nation of the form. 2.1.2 Entry function We call the function of the elements which indicates the fill-in position  X  X ntry function X . There are four sub-categories for this function: (1) Complete fill-in: readers must write whole information (2) String insertion: readers must insert strings between the preprinted strings (3) Selection: readers must select one or more strings and write, circle or mark them (4) Paste: readers must paste pictures or images to the element. Two types of elements which have entry function are shown in Fig. 5 . Note that the elements in Fig. 5 a require fill-in indication from other elements, in this case elements with thin line, and the elements in Fig. 5 b do not need indi-cations. 2.1.3 Example function In some case, there exists ambiguity in fill-in formats. For example, format of a date can be written in Christian era or domestic era. When the form creator wants to specify these instructions, sometimes they prepare preprinted strings for an example. Here we call this kind of instructing function  X  X xample function X . format of the following elements. In Fig. 6 b, elements with thick lines provide information to the writers.
 one function but also two or more functions described ear-lier. For example, the elements shown with thick lines in Fig. 7 a have several strings inside which indicates the fill-in data. In Fig. 7 b, the strings inside the elements have a fill-in function. By filling-in the check mark or number, it indicates the fill-in data of the adjacent element.
 form document is not only restricted to the table forms, but also to general form documents. 2.2 Structure of table form documents The forms can be classified into two types: one is free for-mat form documents and the other is table form documents. The characteristic of the table form documents is that ev-ery element in the document is a rectangular field formed by horizontal and vertical rules. In this paper, we call these elements  X  X oxes X . Elements in both documents have one or more functions as described in the previous section. is indicated by one or more boxes which has the indication and explanation function. We call this structure  X  X ndication structure X .
 structure in [ 13 ]. Here, we reclassify them into recursive combinations with the following four structures. 1. Single indication (Fig. 8 a). One box which has entry 2. Multiple indication (Fig. 8 b). Multiple entry boxes are 3. Hierarchical indication (Fig. 8 c). One entry box is indi-4. Bidirectional indication (Fig. 8 d). One entry box is in-structures. 2.3 Box type Every box has at least one function described in Sect. 2.1 . From the analysis of 81 public table form documents, we were able to classify them into seven types which have a single function or combinations of two functions. We call them box types which are described as follows: Indication box (IND). This box indicates the fill-in infor-mation of other boxes and the box needs no fill-in indi-cation.
 Explanation box (EXP). This box has general explana-tions on the document in it. Therefore, it needs no fill-in information and needs no indication from other boxes. Entry box (ENT). This box is a fill-in box which needs fill-in indication from another box, and also needs fill-in information from its nature. However, it does not have indication function.
 Example box (EXM). This box has example fill-in strings in it. Therefore, it needs indication information from other boxes, but needs no fill-in information and does not have indication function.
 Indication entry box (IEN). By filling in some infor-mation, this box indicates fill-in information of other boxes.
 Self-indication entry box (SIE). This box is an entry box which has indication information written in. Thus it needs no fill-in indication from other boxes, but needs fill-in information.
 Need no entry box (NNE). This box is some kind of blank box which needs no fill-in indication information from other boxes, and needs no fill-in information.
 Fig. 9 , and box types of Fig. 2 becomes Fig. 10 . sify these box types by the aspect that the box will indicate fill-in information of other boxes and that the box needs in-dication from other boxes. The resulting classification into four categories becomes as Table 1 .
 2.4 Unification of adjacent boxes into a compound box If two adjacent boxes have the same height or same width, we define that they are  X  X nifiable X . In certain situations, unifiable boxes can be combined into one box and treated as a single box. We call this unified box a  X  X ompound box X . By unifying two adjacent boxes recursively, we can analyze the structure of table form documents. Note that there exists horizontal and vertical (Fig. 11 a, b) unifications. two types of resulting compound boxes. 1. Indication compound box (icb) 2. General compound box (gcb) 3 Document structure analysis 3.1 Overview of the table form document analysis As described in the previous section, we assume that a form is composed of multiple boxes. The goal of this table form document structure analysis is to obtain relations between two boxes which have a logical relation.
 lows. 1. Box detection 2. Box type classification 3. Grammar-based document structure analysis gular fields in the document by detecting horizontal and ver-tical rules. We first used the simple Hough transform method to detect the longest vertical line in the document, then cor-rected the rotation of the scanned document by using its an-gle. Then we used projection onto the x and y axis to de-tect vertical and horizontal rule positions. By detecting the horizontal and vertical lines at the detected positions, we de-tected rule lines forming each box.
 box type of each detected box. It is very difficult to obtain complete results of box type classification. Therefore we are currently using a semi-automatic classification tool for this purpose. We used OCR software to determine the words preprinted in each box. By providing a simple database, box types are determined by matching the preprinted words with the database. After this process, the result is shown to the user, and the user corrects the box types if it is misclassified. based document structure analysis algorithm which is de-scribed in the following section.
 tronic files such as PDF files. For these documents, box de-tection and OCR process is not necessary. However, the box type classification process is still necessary and further re-search should be done on this process. 3.2 Two-dimensional data analysis with one-dimensional grammar As the distribution of boxes in a table form document is two dimensional, data structure of a document naturally becomes 2D. Therefore, we can simply use Graph Grammar Parser to analyze each document with the grammar by extending pro-posed grammar to the graph grammar. However, such graph grammar notation becomes very large because each rule of the grammar will be a combination of our one-dimensional (1D) production rules. On the other hand, except for the bidi-rectional indication structure, unification of adjacent boxes can be written as 1D rules of a grammar. Bidirectional indi-cation structure can be recognized as a combination of two multiple indication structures which have different indica-tion directions. Therefore, we can analyze them by applying two different directional grammatical analyses. By using 1D rules, we can easily understand the whole structure of the grammar as it is much simple than graph grammar notation. 3.3 Document structure grammar We consider three indication structures; single, multi-ple and hierarchical. We denote the starting symbols as &lt;document&gt; . Seven terminal symbols are denoted as IND, IEN, EXP, ENT, EXM, SIE, NNE which corresponds to the box type in Table 1 .Wedenotetwo unifiable boxes by adding symbol  X   X   X  between them. We used the following three symbols as nonterminal symbols. scribed by the extended BNF notations where  X :: =  X ,  X  |  X  X nd  X   X   X  denote derivation, selection and null element, respec-tively.
 tion rule of two adjacent boxes which have both indication function and fill-in function. Multiple indication structure can be denoted as a recursive structure of unification of ad-jacent boxes which have both indication function and fill-in function (Fig. 13 ). Hierarchical indication structure can
IND &lt;gcb&gt; IND be denoted as a unification rule of one indication box and one general compound box which have two or more general compound boxes inside (Fig. 14 ).
 lyze the part under the second row and the part in the right of the second column as multiple indication structures. For analysis of first row and column, we prepare rules which re-duce multiple adjacent indication boxes into one &lt;gcb&gt; . ments which are constructed of four indication structures. Note that in the analysis process, the priority of reduction to &lt;icb&gt; is set higher than that of &lt;gcb&gt; . 3.4 Horizontal prior analysis and vertical prior analysis The table form documents have 2D structure, while the grammar in Fig. 12 describes the 1D box relation, hence the production rules should be applied horizontally and verti-cally. For this purpose, we prepare two kinds of box lists named Hlist and Vlist that represent the horizontally and vertically sorted box queues respectively. The Hlist ( Vlist ) is made by the following procedure. 1. Sort all boxes in the ascending order of y ( x ) coordinates 2. Insert  X   X   X  between the pair of horizontally (vertically) mar are applied twice on both box lists by switching the pri-ority between Hlist and Vlist , because both results of the horizontal and vertical reductions are necessary to ana-lyze correctly the bidirectional indications in table structure. Note that the reduction of Vlist is accompanied by that of Hlist simultaneously and vice versa to maintain the con-sistency of box adjacency. We call the parsing, which has higher priority in horizontal unification,  X  X orizontal Prior Analysis X  and vertical unification  X  X ertical Prior Analysis X . lows. 1. Select the last rule in Fig. 12 . 2. Search the box pattern in Hlist that matches the se-3. Replace the box pattern found in both Hlist and 4. Select the next rule in the preceding line in Fig. 12 and Analysis result. By changing the priority of Hlist and Vlist in Step 2, we can obtain Vertical Prior Analysis re-sult.
 rectional structure is shown in Fig. 15 . In this example, first, rule &lt;icb&gt; :: = IND  X  ENT , which has highest pri-ority, is applied to box 4 and 5, followed by applying rule &lt;icb&gt; :: = &lt;icb&gt;  X  ENT . Then, rule &lt;gcb&gt; :: to box 1 and 2, and box 3 is also unified to them. At this step, there is no applicable rule for Hlist , thus we try to apply rules to Vlist . &lt;icb&gt; is reduced to &lt;gcb&gt; ,andthenver-tically adjacent &lt;gcb&gt; s are reduced to one &lt;gcb&gt; and the analysis ends. 3.5 Indication relation analysis In this section, for an example of using the result of structure analysis, we describe how to analyze indication relations. the left of a node and the box which is indicated by that box is placed in the right. Therefore, we can search all the indicating boxes by searching the parse tree up and left for each entry box.
 struct the whole document. The indication analysis algo-rithm is described as follows. 1. Get the first element from Box list and set to root. 2. Make key list empty. 3. Call index(root). 4. Delete root from Box list. If Box list is empty, algorithm 1. If the box type of root is IND, return this box. 2. If the box type of root is ENT, print key list as indication 3. If the box type of root is SIE, print key list and itself as 4. If the box type of root is icb, add return value of in-5. If the box type of root is gcb, call index(left child of root) 3.6 Analysis of bidirectional indication with 1D grammatical analyzer Each entry box in the bidirectional indication structure is indicated by both horizontal and vertical indication boxes. These indication structures can be analyzed individually by Horizontal and Vertical Prior Analysis as shown in Sect. 3.4 . Indication boxes which indicates each box in the bidirec-tional structure can be generated by combining results of both analysis (Fig. 16 ).
 Fig. 15 by Horizontal and Vertical Prior Analysis are shown in Table 2 . By combining these results, we can obtain all the indication box lists for each entry box in the bidirectional structure as shown in Table 2 . Entry box 5 is indicated by indication boxes 2 and 4, and entry box 6 is indicated by indication boxes 3 and 4.
 4 TFML: representation of table form To support handling of table form documents in the process of generation, modification, fill in, and in many other pro-cesses, we need general representation of table form doc-uments. Here, we propose XML-based representation of a table form which can handle geometrical information, indi-cation structures, and also the meta-structure of table forms. Meta-structure means logical relation between non-adjacent boxes. One example of meta-structure is that the fill-in data of box A should be the summation of box B and box C where these boxes are not adjacent to each other.
 file is shown in Fig. 18 which is generated from the anal-ysis result of the proposed method. The basic structure of the file reflects the indication pattern of the document where geometrical information is embedded as optional informa-tion. Meta-information, such as arithmetical relations are also embedded as optional information in each box. the resulting format of document structure analysis. Fur-thermore, it can be used as the input definition of a table form generation system, and entry data format of database systems. 5 Experiments 5.1 Experimental results on real documents The proposed method is applied to the document shown in Fig. 2 . As described in Sect. 3.1 , we first applied the Hough transformation method to detect document rotation and cor-recting the image. Then, we detect each rule by detecting x and y position by making projection onto the x and y axis. Fi-nally, by tracing the lines, we detect horizontal and vertical rules and detect every box formed by these rules.
 preprinted words if the inner area of the box is not empty. By matching these words with the box classification database, we get box type candidates of each box. The box type of the box whose inner area is empty is determined as the entry box. Finally, these results are shown to the user, and the user corrects the box type if it is misclassified.
 ysis is applied. Part of the parse tree generated by the Hori-zontal Prior Analysis is shown in Fig. 19 . The result includes the analysis results of boxes 12 X 20 which are placed at the lower part of the original document. In the parse tree, mul-tiple indication structure composed by boxes 13, 14, 15 and 16, hierarchical indication structure composed by boxes 12 and 13 X 16 are analyzed properly. By the Horizontal Prior Analysis, indication boxes 12 and 13 were correctly ana-lyzed to indicate entry box 14, 15 and 16. By the Vertical Prior Analysis, indication boxes 9 and 10 were also analyzed correctly to indicate entry boxes 15 and 19.
 ments which were provided by the public office in Japan. By assigning the box type to each box in the documents semi-automatically, we successfully analyzed 154 sheets which is 93% of the documents. The main reason for the analysis failure is the shape of the element. The shape of some elements in the table form document are not rectangle but hexagon or a much more complex shape. As such shapes cannot be handled by our system, these documents could not be analyzed. The other reason for the analysis failure is the indication structure. Two documents had a hierarchical structure which did not form a rectangular area (Figs. 20 and 21 ). As the indication box of the hierarchical structure can only indicate the rectangular compound box, such structures can not be analyzed with our system.
 but the result had ambiguity and at least one of the results can be considered not correct. In the case of Fig. 22 a, one of the results of our structure analysis system tells that the left most indication box has indication relation with right most boxes although the left part and the right part have no re-lation in this case. In another case in Fig. 22 b, one of the results tells that the left most indication box has indication relation with two adjacent boxes at the right most position. This happens because the indication compound box (icb) composed of boxes at the left side of the document is re-lated to the general compound box (gcb) composed of boxes at the right side of the document. Actually, in this case, these two compound boxes do not have indication relations. Syn-tactically, these results can not be omitted without semantic information.
 applications. Here we made a simple application which gen-erates a synthesized table form document which is a filled-in document of an existing table form document. Each filled-in contents are prepared in the database which is tuples of an indication string and filled-in strings. Sample result of a synthesized document for the document shown in Fig. 1 are shown in Fig. 23 . 5.2 Discussion We have proposed a grammar-based description of the table form documents which can be used in the table form docu-ment analysis system.
 ument analysis system based on a grammar representation, and those which can be analyzed by a system based on the production system are identical. This is because a parser of grammar can be realized by a production system. However, the grammar-based system has the extremely important advantage that the knowledge of the document structure is separated from the analysis system. This means that we can easily modify the knowledge of the document struc-ture implemented in the system, and we even can use this knowledge for different purposes, such as form modification system, form correction system, or form generation system. In some cases, both a production rule based system and a grammar-based system produce incorrect results such as Fig. 24 b shows an intermediate analysis result in the analy-sis process. Both systems should reject this result and search for the correct one such as Fig. 24 c. However, in the pro-duction rule based system, we need to explicitly provide the control sequence of this search. In contrast with this, in the grammar based system, we only need to provide document structure knowledge.
 sis systems such as [16 X 18], table form documents consid-ered in this paper have a complex structure, and the impor-tant point is that the structure has good compatibility with grammatical representation. The proposed grammar in this paper is currently very simple and straightforward, derived from the basic structure of the form document. This im-plies that the documents which are constructed only with the document structure considered in Sect. 2.2 are accepted by the proposed grammar. This means that at least one of the results produced by a parser with the grammar is cor-rect. However, there still remains a problem that some re-sults of a parser may not be acceptable by the user. To re-ject such results, more discussion on the grammar itself is necessary.
 grammar which can represent 2D data. Therefore, when we use our grammar for the document analysis, we need to han-dle both Hlist and Vlist data structure, and also, the grammar is modified to accept first column and row of the bidirec-tional structure. However, we can easily extend the gram-mar to the graph grammar which can parse the document more strictly. Note that the parser of graph grammar tends to become very complex; however, there are researches on ef-ficient grammar representation [ 22 ] and parser which can be used in the document analysis [ 23 ]. When we think of using the grammar for the form correction, this strict parser should be necessary.
 one problem is the process of box type classification. As the document analysis is based on the box type, misclassifica-tion can lead to a large analysis error. From our examina-tion, we can classify most of the entry boxes ( ENT ) auto-matically. This is because half of the entry boxes are empty, i.e. they have no preprinted characters inside. The other half of the entry boxes have preprinted characters, however. In most case, these characters are located at the side of each box. Therefore, we can easily distinguish whether the box is an entry box or not. For the remainder of the boxes which have preprinted characters inside, they are indication boxes ( IND ), in most cases. Therefore, we can easily obtain a small error rate for the box type classification. However, as the system requires completely correct box type classification results, our automatic box-type classification research needs more advance for the practical use.
 is to incorporate POS tagging algorithm. As our system is based on the grammar analysis, most of the natural language processing algorithm can be applied to our system. In this sense, box type classification and POS tagging have identi-cal functions in the analysis system.
 which cannot be accepted by the grammar. As the grammar accepts all the documents which can be handled by the sys-tem proposed by Watanabe et al. [ 13 ], more than 90% of the formal documents can be handled by our grammar. From our examination, documents which cannot be accepted by our grammar are very difficult to recognize even by human recognition. Therefore, we are planning to make a system which rejects this kind of document and recommend form modification which follows the grammar. This may be use-ful for the form generation system.
 6Conclusion In this paper, we first described the functions of the elements appearing in the table form from the communication point of view, and proposed a table form description with doc-ument structure grammar. The element of the grammar is a box which is a rectangular field formed by the horizon-tal and vertical rules. The grammar describes the indication structure by the combination of the adjacent box type. documents with the grammar. As the distribution of the el-ements in the table form document is 2D, we proposed an analysis system which uses a two box adjacency list which represents horizontal and vertical adjacency of the boxes. Experimental results were described to show the effective-ness of our method.
 References
