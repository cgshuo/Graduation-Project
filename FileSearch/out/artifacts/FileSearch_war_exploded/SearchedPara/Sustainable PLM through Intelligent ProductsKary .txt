 1. Introduction Sustainable PLM is an example of Closed Loop Lifecycle Management (CL2M) ( Kiritsis, 2010 ) based on the ability to link Intelligent Products between themselves and other information systems. The purpose is to reduce environmental impacts, as in general, for the so-called Green IS (Green Information Systems) ( Watson et al., 2008 ).

The technological challenge for developing Sustainable PLM, is the high number and variety of information systems that need to communicate over organizational limits and over time. The number of potentially relevant information systems, organiza-tions, and networks is greater than in most other application domains. Indeed, it is not one application domain; it is rather a collection of application domains related to lifecycles of products, humans and  X  X  X nything with a lifecycle X  X , where information produced in different parts of the lifecycle and by different parties need to be shared with other parties. A driver for many links between systems in Sustainable PLM, is that products need to be treated as instances rather than as members of a standard type or class, due to for example mass customization and different use of after-sales services. Both in mass customization and in after-sales services, a specialization of the product occurs  X  whether it is in terms of different functionalities, different delivery paths and different usage modes  X  making it increasingly important to maintain information unique to each item.

The purpose and scope of applications of Intelligent Products ( K  X  arkk  X  ainen et al., 2003a ; McFarlane et al., 2003 ; Meyer et al., 2009 ) have over time expanded from tracking based management applications ( Holmstr  X  om et al., 2010 ) to advanced CL2M capable of collaborative diagnostics and coordinated self-control ( Kiritsis, 2010 ). For example, engine control of cars continues adapting the control system to changes in the engine during its whole lifetime ( Saab, 2002 ). However, when such cars become internet-connected it creates opportunities to gather information from fleets of vehicles to proactively optimize engine tuning based on factors such as location and time of day, as well as to presenting comparative performance measures affecting behavior of drivers.
The objective of the paper is to present an Intelligent Products based architectural model for Sustainable PLM applications. The enabling technology for the proposed architecture is messaging interfaces that link Intelligent Products and other information systems to query for and exchan ge life cycle information. The proposed architecture and the potential sustainability impact are evaluated by examples, focusing on a number of real-life applications developed using the Intelligent Products based architectural model. After this introduction, Section 2 exposes the background of Sustainable PLM and existing definitions of Intelligent Products,
Section 3 describes the information system architectural model for implementing CL2M-enabled information systems based on Intelligent Products, Section 4 presents a number of Sustainable
PLM applications with an assessment of them from a Green IS perspective, followed by conclusions. 2. Background
This section provides a definition of Sustainable PLM as related to existing concepts and explains why Intelligent Products are necessary for Sustainable PLM. Intelligent products and messaging interfaces are described as the technological basis for introducing instance based architectures for Sustainable PLM. 2.1. Sustainable PLM
Product Lifecycle Management (PLM) is a concept with multiple interpretations. The most common use of PLM seems to be about how to manage information related to the design and (possibly) manufacturing of products and their variations, which represents a rather Computer-Aided technologies (CAx) oriented view of
PLM. Managing the product lifecycle in such a CAx-oriented scope signifies the handling of product versions, document versions, etc., for the needs of future design and manufacturing, as well as for spare parts and maintenance management of products that are in use. However, collecting maintenance and service informa-tion, as well as usage information about products as individuals have not traditionally been seen as a part of PLM.
 Closed Loop Lifecycle Management (CL2M) ( Kiritsis, 2010 ;
Matsokis and Kiritsis, 2010 ) attempts to extend PLM also to the usage, refurbishing, disposal and other lifecycle phases that product instances go through. With CL2M, product information can be collected and used in a multi-organizational manner due to emerging technologies. The objective of CL2M is to be able to continually improve design, manufacturing, use and end-of-life handling of products, thereby obtaining improved quality, less breakdowns, reduced need for spare parts and ensuring an operation that is continuously maintained at the most energy-and resource-efficient level.

CL2M has partially similar objectives as the recent domain called Green Information Systems or Green IS ( Watson et al., 2008 ). Green IS studies how to reduce the production of CO other greenhouse gases through new combinations of people, processes, and technologies that enable the processing of digi-tized information ( Melville, 2010 ). The sub-domain of Green IS called Energy Informatics ( Watson et al., 2010 ) focuses on how
Green IS systems can help to reduce energy usage in different ways. Energy informatics is concerned with analyzing, designing and implementing systems to increase the efficiency of energy demand and supply systems. This requires the collection and analysis of energy data sets to support optimization of energy distribution and consumption networks. Because the scope of
Green IS extends far beyond a single organization, the required information system must also be able to reach across multiple organizations. This signifies that information systems for CL2M and for Green IS have to fulfill largely similar requirements.
Thus, Sustainable PLM can be defined as CL2M for the purpose of improving environmental sustainability during all phases of the lifecycle. A major challenge for Sustainable PLM is how to measure environmental sustainability in order to improve it.
Life Cycle Assessment (LCA), also known as Life Cycle Analysis, is a methodological framework for estimating and assessing the environmental impacts attributable to the life cycle of a product ( Rebitzer et al., 2004 ). However, conducting a full-scale LCA is often time-and resource-consuming and requires the availability of lot of information from different organizations involved in the product X  X  lifecycle. We have therefore opted for using the less formal Energy Informatics performance indicator for assessing the sustainability of different systems.

In Energy Informatics, the information system is needed for providing the flow of information between the components of the whole system ( Fig. 1 ). Information that is typical for Energy
Informatics are sensor data, alarms or other events, control commands and requests for other instance-specific information.
In addition to these, the information system must also be able to handle non instance-specific information such as orders, invoices and contracts, and link to database records of backend systems.
The other components of the Energy Informatics framework are flow networks, sensor networks, and sensitized objects. In
Watson et al. (2010) , a flow network is defined as follows: A flow network is a set of connected transport components that supports the movement of continuous matter (e.g., electricity, oil, air, and water) or discrete objects (e.g., cars, packages, containers, and people). Flow networks are at the heart of many energy distribution and consumption systems. They are in their various forms highly visible in today X  X  society as roads, transmission grids, pipelines, delivery vehicles, and cargo ships. They are also rather invisible in many buildings in the form of heating, venting, and air conditioning (HVAC) ducting that transports air.
Sensitized objects are, according to Watson et al. (2010) ,a physical good that a consumer owns or manages and has the capability to sense and report data about its use, while a sensor network is a set of spatially distributed devices that reports the status of a physical item or environmental condition. This signifies that any embedded computer or other information device associated with the physical good (such as a barcode or an RFID tag) could also be considered as belonging to the sensor network. A sensor network provides data that can be analyzed to determine the optimum use of a flow network. This way, it could be argued that such sensor networks are actually a part of the information system.

On a technical level, sensitized objects and sensor networks are complementary concepts. Sensitized objects may be parts of sensor networks and vice versa, as shown by several of the case studies presented in this paper. The main difference between these two entities is determined by who are the main users of the information generated. For sensitized objects, the information is mainly intended for consumers in the flow network. Organiza-tions may also be considered consumers in applications such as shipment tracking. Information generated by sensor networks is mainly used by suppliers of energy and services for the flow network.

Intelligent Products ( Fr  X  amling and McFarlane, 2009 ; Meyer et al., 2009 ) are an established approach for implementing information systems incorporating and organizing information from sensitized objects and sensor networks. Intelligent Products are necessary for Sustainable PLM to reduce the amount of instance-specific information being generated by various sensors and to avoid rapidly becoming overwhelmed by information quantities too large to transmit and store without any pre-processing. The closer to the instances (the sensitized objects or the sensor network) this processing takes place, the less informa-tion has to be transmitted between different parts of the system. Processing information close to the instances also makes it possible to take appropriate actions more rapidly. Finally, security, access rights, and confidentiality are easier to handle when the information does not have to be sent to other information systems for processing. Intelligent Products provide a tested model for implementing such information systems. 2.2. Intelligent Products and Sustainable PLM
Intelligent Products and messaging interfaces are the techno-logical basis for introducing instance based architectures for Sustainable PLM.

A major challenge with Intelligent Products is how to access the information that is not stored only locally in the product or at only one server but is distributed in two or more places. This is also the key technological challenge in implementing Sustainable PLM. A number of important developments in this regard are described e.g., in Fr  X  amling et al. (2007b) .

The ID@URI notation and the associated DIALOG agent based middleware developed at Helsinki University of Technology (now a part of Aalto University) make it possible to query and update product information about tangible things over the internet throughout the product lifecycle. The messaging across organiza-tional boundaries and over the lifecycle is illustrated in Fig. 2 . DIALOG was developed based on experience gained from earlier e-commerce projects where computer programs had been devel-oped based on the peer-to-peer paradigm mainly for exchanging sales forecasts between different organizations. The initial appli-cation area of messaging was a forwarder independent tracking-and-tracing system for worldwide project deliveries using RFID technology in 2002 ( Huvio et al., 2002 ; K  X  arkk  X  ainen et al., 2010 ).
Products in use have long and individual life cycles that make the identification of instances, and the tracking and handling of instances over long time-spans and many locations essential. However, according to Parsons and Wand (2000) , many informa-tion systems make an assumption of inherent classification, which often prevents information transfer between actors and between life cycle phases. The assumption leads to problems in applications such as Sustainable PLM because products can be referred to only as belonging to a particular class of products, where the class often corresponds to the stock-keeping unit used for supply chain purposes. In practice, the most suitable classifi-cation of an instance depends on the context e.g., the person doing the classification, the organization that handles the product or the purpose the product is currently being used for. The longer the life cycle is sustained, the more the uses and use situations may change, and the more different actors may potentially become involved.

To overcome this limitation, Parsons and Wand propose adopting a two-layered architecture to information modeling that is consistent with ontological and cognitive principles. The first layer represents unique instances with properties, independent of any classes to which the instances may belong. The operations with respect to instances can be generally categorized as retrieval (query) and modification (update) operations. The second layer consists of class definitions based on sets of properties defining classes of interest. The class definitions in the second layer represent different views of the instances that may be created, removed or modified at any time without affecting the instances in the first layer ( Fig. 3 ).

An architecture model enabling Sustainable PLM needs to take into account the need for multiple classifications and avoid the error of inherent classification. An architecture based on Intelli-gent Products can overcome this issue. The introduction of
Intelligent Products supports the separation of the two layers by defining a messaging interface that allows first layer information to be synchronized even if it is distributed over many information systems. The messaging interface also provides querying function-ality that allows different second layer views to be constructed in a loosely coupled manner that is based on fundamental Design
Pattern constructs ( Fr  X  amling et al., 2007a ). 2.3. Two-level architecture and interfaces
Intelligent Products have the means to communicate between themselves and with other information systems. Intelligent Pro-ducts link the Auto-ID technology to the agent paradigm and
Artificial Intelligence. Agent technology has already been consid-ered as an important approach for developing industrial distrib-uted systems (e.g., intelligent manufacturing systems) ( Jennings et al., 1995 ; Jennings and Wooldridge, 1998 ). Intelligent Products can also play an essential role in product lifecycle management by their capability of collecting usage information and reacting on it proactively e.g., estimating needs for maintenance or repair ( PROMISE, 2004 ). By using sensor technologies the conditions of products can be continuously monitored. The access to informa-tion on how products have been used could significantly improve the way that products are recycled when they arrive to their end-of-life. Sensor technologies can also contribute to improvements in manufacturing nodes and to the logistics of the entire supply chain, by giving real-time status information (e.g., identification, location, and other conditions) of the products.

In order to let Intelligent Products communicate with each other and with other information systems, an information system architecture with standardised communication interfaces needs to be created for the purpose of product tracking and product data gathering. This is what was done e.g., in the PROMISE EU project through the creation of a new messaging interface, called
PROMISE Messaging Interface (PMI). In the PROMISE world ( Fig. 4 ), the information exchange between different systems is done by passing messages between nodes over a messaging infrastructure defined by the PMI. PMI uses self-contained mes-sages that can in principle be sent over any protocol such as HTTP, SOAP, SMTP, or similar.

A defining characteristic of PMI is that nodes do not have predefined roles, as it follows the  X  X  X eer-to-peer X  X  approach to communications. That means that products can communicate directly with each other or with backend servers but PMI can also be used for server-to-server information exchange of sensor data, events, and other information. A  X  X  X ull X  X  PMI node capable of sending, as well as receiving requests does have to include both
HTTP client and server functionality, but a more limited node can just have the HTTP client functionality, if it is assumed that it will only send messages to other nodes. An example of such  X  X  X imited X  X  nodes is ones associated with RFID tag readers, or generally, nodes that are unreachable from the outside because of a firewall, which periodically send product data to a product monitoring system according to a  X  X  X ubscription X  X  that is specified when the product is installed.

PMI defines different operations such as a read or write of the value of a particular information item. The information items represent actual values such as sensor readings of a device. A PMI node is a communications end-point in a PMI network, and manages communications for one or several devices. The para-meters for the method calls are XML strings whose structure is defined by an XML schema. The XML string conveys an additional request information such as the involved device, information item, sub-type of request, etc.

In addition to reads and writes, PMI also provides callback methods for asynchronous communications. Examples of asyn-chronous communications include a  X  X  X ubscription X  X  read, a call to the read method with parameters that specify that the target node should not respond directly with an value, but rather send multiple responses at a specified interval. The callback method interface also provides a mechanism for nodes to send events to each other with or without a prior subscription, subject to the particular node implementation. Indeed, the callback method is an embodiment of the well-known Observer pattern ( Gamma et al., 1995 ) applied to messaging systems as proposed e.g., in Fr  X  amling et al. (2006 , 2007a ).

The PROMISE architecture and the PMI have been implemented by at least six different organizations. The only open-source implementation is based on the DIALOG platform. As the lessons learned from DIALOG also played an important role in the specification work of the PROMISE architecture, DIALOG is a natural implementation platform for the PROMISE architecture. The imple-mentation task mainly consisted in adding a new networking component that allowed using PMI in parallel with DIALOG X  X  existing networking capabilities. Because DIALOG had already been designed to support different protocols and interfaces, adding PMI was straightforward. Before PROMISE, DIALOG supported a Java remote method invocation (RMI) interface, a Web Service interface using the Simple Object Access Protocol (SOAP), and an interface using HTTP POST messages. Implementing PMI only required adding new PMI receiver and sender classes. The DIALOG node contains a simple and configurable mapping mechanism that defines what messages go to which agent(s) and what sender to use for which messages, as shown in Fig. 5 . We see that the components involved in sending and receiving messages are separated from agents who consume and produce messages; each has its own classes with a common interface i.e., receive and send handlers. 2.4. Information processing
DIALOG is a  X  X  X eneric X  X  software in the sense that it provides protocol-and interface-neutral message passing mechanisms with message persistence functionality, security mechanisms, etc., that is abstracted away from the  X  X  X usiness logic X  X  itself, implemented by  X  X  X gents X  X . Fig. 6 illustrate the internal architec-ture of a DIALOG node. DIALOG agents are free to process the messages as they wish. The addition of a PMI-specific agent adapted DIALOG to support PMI-specific functionality, which mainly means implementing Device Controller functionality.
Database support for instance-informed information existed from the beginning, as well as support for connecting external devices to DIALOG nodes. Due to the highly modular structure of DIALOG nodes, it is also possible to implement only parts of it in the cases of limited hardware resources. For example, usually a product embedded information device does not need the message receiv-ing components at all.

Agents can be dynamically loaded during runtime if and when needed. They are by default provided with the necessary object references for handling messaging, data persistence, user inter-faces, and device controllers. Every agent provides a list of incoming message types that the agent listens to. When a message is received, it is given to the corresponding agent(s), which can then take the necessary actions, possibly with the help of external libraries. An example of such a library that has been used is IBM X  X  Agent Building and Learning Environment (ABLE: http://www.research.ibm.com/able/ ), which provides a great number of tools for decision support, data analysis, and machine learning. Due to DIALOG X  X  generic agent-based architecture, it has been possible to use for collecting in-use and product lifecycle information in various application areas such as automotive, white goods, energy consumption monitoring, weather informa-tion collection, etc. 3. Sustainable PLM applications
How much CO 2 and other greenhouse gases are emitted by human activity are known on the aggregate level by monitoring changes in stocks in the atmosphere and seas. However, how much an individual person, specific industrial activity, or product emits is rarely known, which signifies that it is difficult to target the efforts for reducing the use of energy. For energy efficiency, solutions such as those presented in this paper are needed to help users track and improve the efficiency of individual houses, vehicles, and machines. Information systems tracking consump-tion on the level of the individual artifact are a cornerstone for achieving energy efficiency. However, it is difficult to measure and assess the actual impact that such improvements have on the energy efficiency. Therefore we will focus on case studies per-formed in the areas of reducing energy consumption during the usage phase of product instances. The two selected domains i.e., buildings and automotive, are both among the most significant ones regarding the global amount of energy consumed, as well as the emission of CO 2 .

A major purpose of Intelligent Products is to allow the collection of data and control of instances, where the word  X  X  X nstance X  X  is to be understood in a very broad sense. From the information system point of view, an instance may be e.g., a shipment, a human being, and an electronic document. In the Energy Informatics framework ( Fig. 1 ), concepts such as sensi-tized objects, sensor networks, and the information system parts are analyzed for correspondences with Intelligent Products and the IoT. Eco-goals and stakeholders are analyzed case by case in this section. 3.1. Automotive
Vehicles are unique instances already when manufactured and become even more unique when they are taken into use. In the PROMISE project a system was developed on DIALOG for con-necting to vehicle Engine Control Units (ECU) over Bluetooth on mobile phones and sending that ECU information onwards to backend systems of e.g., service companies or manufacturers using PMI ( Fr  X  amling and Nyman, 2008 ). The OBD-II standard was used for communicating with the ECU so the system was applicable to all newer cars and some other vehicle types. By using the PMI interface, it was possible to send an alarm event to the car service provider whenever the ECU signaled a problem. Then the service provider could place a PMI subscription to the ECU for retrieving the most relevant error codes, sensor readings, etc., needed for performing online error diagnostics when the actual error condition was ongoing. Such functionality improves the reliability of the error diagnostics and enables the service provider to ensure that needed spare parts and mechanics are available. From a Sustainable PLM point of view, reliable error diagnostics are crucial because most engine error conditions tend to cause the vehicle to consume much more fuel than normally and to become extremely polluting. In practice, error conditions are often wrongly diagnosed even by highly qualified service personnel, which tends to make the abnormal operation last longer than it could be with proper online diagnosis.
In another project that started in 2009, a similar system was implemented together with Finnish companies who are owners and users of big fleets of vehicles, as illustrated in Fig. 7 . One of the companies also handles service and maintenance of all vehicles. Professional-level data collection equipment from sev-eral different manufacturers (notably Aplicom, Trackunit, Ctrack, and Texa) has been installed into various vehicle types, ranging from specialized vehicles used at the Helsinki airport and trucks of various sizes used by a major Finnish logistics service provider. The data collection units have GPS and a set of different analog and digital input and output ports. They also provide mobile internet connectivity so that they can send information to back-end systems. The information to send and the sending interval are usually preconfigured into the data collection unit before installa-tion but can later be modified using GSM text messages or over-the-air updating. Aplicom is the only equipment that allowed sending information directly to our own backend server. The other data collection equipment manufacturers collected all information to their own servers, from where the information could be accessed using SOAP or HTTP. Therefore, the Aplicom was the only equipment where PMI could be used  X  X  X atively X  X , even though the use of a XML-based protocol over GPRS is not always desirable due to the great envelope overhead caused by XML compared to the actual payload transmitted. For the other data acquisition equipment it was necessary to develop specific device controllers, which could have been avoided if a suitable messaging standard such as the PMI would have been supported by manufacturers of data collection equipment.

Protocols of different data collection equipment were imple-mented in DIALOG, while the actual information handling was handled in an uniform way for all of them by dedicated agents. The agents can filter, store, detect events, etc., with the incoming information. They can also forward the needed information to other systems such as maintenance scheduling or route planning systems, using PMI. Finally, agents can also provide support for graphical user interfaces such as the one in Fig. 8 that shows the location and status in real-time of different vehicles at the Helsinki X  X antaa airport. Examples of status information are if the engine is running, if the vehicle is in use or available, as well as sensor values, alarms, and other relevant information.
The two-layered model and the support for it in the software implementation are necessary in these use cases. Data acquisition hardware manufactured by different companies tends to provide third-party access to the information through proprietary proto-cols and interfaces. When searching for suitable hardware, we encountered several hardware manufacturers who did not even propose any third-party access to their information. All hardware manufacturers who do provide third-party access, including truck manufacturers themselves, provided proprietary interfaces that were not compatible with any of the others X  interfaces. However, it was a clear requirement of the end users that the system must remain open for different hardware manufacturers. The hetero-geneity of the vehicles to be equipped signifies that no single hardware manufacturer could satisfy all the requirements.
Furthermore, the end users did not want to risk getting locked into the proprietary systems of a single hardware manufacturer.
The support for easily implementing different communication interfaces (i.e.,  X  X  X iews X  X  of the two-layered model) in DIALOG made it straightforward to support heterogeneous hardware manufacturers while maintaining a unique and manufacturer-agnostic data model for the collected information.

Selected information also needed to be transmitted into various information systems of end-user companies. PMI was proposed and adopted as the standard solution. Since PMI provides a standard interface and has been designed according to design pattern principles, it is possible to program automatic procedures for collecting information or performing actions on the whole fleet such as creating optimized maintenance sche-dules for an entire fleet, detect sub-optimal driver behavior, or perform other kinds of Energy Informatics related operations.
Intelligent Products can provide considerable fleet-level benefits from a Sustainable PLM point of view. Such benefits are e.g., improved fleet-level reliability and performance, as well as reduced spare parts usage and performance based logistics ( Kim et al., 2007 ), which are obtainable through condition-based maintenance. Solutions for automatically translating sensor read-ings and operator observations into reliable condition indicators are increasingly available. The possibility to aggregate condition information and pre-position spare parts, tools and personnel according to the condition of the fleet can also provide significant time, money, and ecological benefits. 3.2. Smart houses and appliances
A demonstrator combining the messaging infrastructure with smart appliances was created as a part of the PROMISE project. To create the demonstrator, support for data gathering from a prototype of a refrigerator X  X  statistical data collection unit was integrated to the PMI-Dialog messaging system. The data collec-tion unit prototype was provided by Indesit, a major European domestic appliance manufacturer, and has functionality similar to what can be expected of smart household appliances available in the near future. The prototype implements various technologies that are patented by Indesit.

The prototype in question is a device that is going to be integrated with ordinary household refrigerators. By integrating to the refrigerator a device capable of collecting, storing, and commu-nicating statistical data obtained from the various embedded sensors, the manufacturer plans to enhance final product testing performance at the manufacturing plant, as well as providing the possibility of offering a preventive maintenance service contract to customers. This latter business scenario is the most interesting from a distributed systems point of view.

The information system uses the PROMISE architecture and interfaces implemented on DIALOG. By using PMI subscriptions, it is possible to monitor the energy consumption and values of the various embedded sensors and parameters. It is also possible to subscribe to different kinds of events such as the door having been left open or other abnormal conditions. The subscriptions can be created so that the information can be sent to and remotely monitored by maintenance companies or queried for using e.g., the owner X  X  mobile phone.

The refrigerator-embedded information device is interfaced with the Dialog software using a purpose-built device controller agent that provides a way of reading the values of the information items that the agent provides. For supporting actual I/O with the information device, the serial communications protocol running on RS-232 and Bluetooth was implemented using the Java
Communications API. For gathering data from the product embedded information device, a product agent was created for receiving alarm events detected by the refrigerator-embedded device and for continuous measurement of the electrical power consumption of the device. From this kind of real-time data a product agent coupled with a data mining system could deduce the operating status and maintenance need of the refrigerator.
Some major Sustainable PLM benefits that can be obtained from the Intelligent Product refrigerator is that it is possible to ensure that the refrigerator is operating in a sufficiently energy-efficient way and that abnormal conditions that affect the energy efficiency (such as an open door, cooling gas leak, etc.) can be detected in near real-time. Due to the remote monitoring possi-bility provided to maintenance providers, the maintenance per-sonnel knows exactly what refrigerator instance spare parts are needed for. The maintenance personnel can even analyze error logs, sensor values, and other information in order to determine what spare parts are needed and how long the repair will take, thereby avoiding potentially repetitive visits for reasons like diagnosing the problem or fetching tools and spare parts. Continuous monitoring of the state of the refrigerator also makes it possible to estimate its residual value in order to take timely decisions on when it has reached the end of its environmentally sustainable lifetime. The re-sale value of product instances is also higher when a reliable use and maintenance record is available. Finally, the information collected on a great number of refrig-erator instances can help the manufacturer to improve the design and manufacturing of the products in a more energy-efficient and sustainable direction, assuming that the economic and social incentives make it advantageous for the manufacturers to do so.
Since the PROMISE project, a similar remote monitoring and control system as for the smart refrigerator has been implemen-ted for a major European manufacturer of Air Handling Units (AHU). AHUs are equipped with a great number of temperature, humidity, CO 2 , and other sensors whose values can be logged over time both locally and remotely. They may therefore be the most relevant information source and control point regarding the health and energy efficiency of modern houses. Inhabitants are usually not expected or even allowed to interfere with the operation of AHUs.

Remote monitoring of AHUs provides similar Sustainable PLM benefits as for the smart refrigerators regarding condition monitoring, optimization of maintenance operations, etc. In addition to these, it is possible to continuously monitor and adapt the control of the AHU for optimal heat recovery efficiency in all conditions. The optimal control parameters depend on outdoor and indoor temperatures, humidity, and other environmental factors. The dynamics of the building itself and the behavior of other systems in the building also have an influence on how to maintain the best compromise between temperature, humidity, air quality, and other factors while keeping the inhabitants satisfied and optimizing the total energy efficiency.
For the monitoring of energy and water consumption, as well as any other sensor or similar information, an Intelligent Product-based information system has been developed. A low-cost (cur-rently less than 200 h ) solution for measuring electricity con-sumption of a house or apartment was developed using consumer-level hardware, together with our own Linux-based software installed on a low-cost WiFi router. This solution has made it possible to provide a scalable, vendor-neutral, energy provider-independent, and open-source solution that is also suitable for large-scale installations, as shown by the living lab deployment of a similar solution reported in Sundramoorthy et al. (2011) . The energy consumption is measured with a 5 s sampling interval and is accessible either directly from the router installed in the home or by transferring it to a backend server as shown in Fig. 9 . The main difference compared with e.g., the former Google PowerMeter ( http://www.google.com/powermeter/about/ ) approach is that the measurement data is first available locally in the home, where it can be processed and acted upon together with other information collected from the environment such as infor-mation from the heating system, the AHU, the water consumption meter, and other sensed information.

What information is sent towards other information systems can be determined depending on what the information is intended for. For example, for comparing the electricity consump-tion between similar households it is probably enough to know the consumption on an hourly or even daily level. From a privacy point of view, it is even preferable to send and store such information with that accuracy. Another example would be sending a text message to the inhabitants when we detect that they are not present but the coffee machine has been left switched on, assuming that it cannot be switched off by the system itself. It is easy to imagine a great number of similar conditions that can be detected when combining information from many different information sources. The use of Intelligent Products in this case signifies that the instance (the smart home) itself has total visibility to the information about itself, as well as total control of what information is sent where.

An essential feature of smart homes is that they should be able to perform integrated control of different systems. This is parti-cularly important in modern houses where different sources of energy can be used depending on price, availability, etc. It is a well-known problem in building automation that different sys-tems may start counter-acting against each other if there is even a small difference for example in their temperature set point and no kind of coordinated control. In reality, it is quite common that the
AHU tries to cool down the home to a lower temperature set point while a heating system tries to keep the home at a higher temperature set point. Such a situation is challenging because it causes a situation of permanent high energy consumption by both systems. When we add peak load management for Smart Grid purposes to the integrated home control, it becomes even more challenging to do it in a way that corresponds to the inhabitants X  preferences. We intuitively assume that inhabitants will prefer having the control being performed by their own smart home, rather than having it controlled by a remote service of the electricity provider that is most probably not aware of all the environmental, social, and other factors affecting the decision on when and where to save energy.

Many equipment manufacturers and researchers are developing solutions to this problem. Such integrated control is also strongly on our research agenda, leading to the support for integration of low-price weather stations, wireless s ensor networks, and similar equip-ment. However, the main challenge is how to make the different parts of the system interoperable. Our proposed solution is to promote IoT interoperability stand ards and to use principles of the two-layered model and design patterns for implementing the corresponding information system. Those principles provide models for handling instances on their own, as well as aggregate instances such as smart houses that contain numerous Intelligent Products. We claim that the ability to manage such aggregate instances in an efficient and uniform way is a necessity for Sustainable PLM. Another important requirement is the capability to manage fleets of buildings i.e., optimize the energy usage of groups of buildings, residential areas, municipalities, etc. Tables 1 and 2 provide an assessment of the presented cases from an Energy Informatics point of view. 4. Conclusions
As illustrated by the real-life applications presented in the paper, Intelligent Products are moving rapidly into daily use both in industry and in everyday life. Current and future works on Intelligent Products are expected to focus on increasing the level of intelligence of both products and systems. The increased availability of in-use data from products will enable new possi-bilities for data analysis, machine learning, and decision making functionality. We expect that such applications will finally enable successful use of artificial intelligence and machine learning technologies in real-life applications.

Another key factor for Intelligent Products to be successful is the apparition of standardized interfaces for collecting and exchanging in-use product information. PMI is an interface that has been specified with this particular objective in mind. It is one of the technical foundations of the Quantum Lifecycle Manage-ment (QLM) work group of the Open Group ( www.opengroup.org/ qlm/ ) whose aim is to promote such interface standards. PMI is one proposal for such an interface standard but other proposals exist (see e.g., ( Fr  X  amling et al., 2009 )) and will probably be proposed in the future.

The presented uses of Intelligent Products has a bearing on what data consumers need about the usage of objects they own or manage in order to increase their energy efficiency, and how information systems can be used to achieve Sustainable PLM. Especially when it comes to reducing energy consumption, we claim that it is the consumers that need detailed information, and need to be in control of that information. Governments and other parties interested in energy efficiency need much less detailed information, but can use it to change the behavior of users by providing comparative information. Such comparative informa-tion requires a trusted aggregator such as a government, an energy producer, or some other party that consumers are pre-pared to provide with their private data.

Intelligent Products also provide a model for how an informa-tion system can integrate supply and demand data to increase energy efficiency. The two-layered design and the possibility to use tested design patterns are key enablers for interoperability stan-dards and loosely coupled information systems integration through subscription mechanisms between suppliers and consumers of information. The mutability capabilities provided by Intelligent Products enable systems built on such principles to evolve and adapt to future energy production and building technologies, new socio-economic configurations or other changes in society that are not possible to foresee in advance.

The Intelligent Product approach has already gone through a series of build-use-evaluate cycles ( Sein et al., 2011 ), and has reached an advanced implementation stage in contexts such as smart houses and appliances, and automotive applications. The action design cycles build on an existing theory and knowledge base for how to create information systems, but the different implementations have allowed us to continuously develop insights in the most appropriate and relevant combinations and uses of them for Sustainable PLM.

A managerial implication of Intelligent Products is that it is difficult to extend or adapt information systems modeled on stocks and flows such as ERP systems to fit the requirements of Sustainable PLM. It is likely that an easier, safer, and more scalable approach is to develop and increase the use of Intelligent Product-based information systems separately, and communicate with stock-based information systems using their own external interfaces. The multi-organizational, multi-manufacturer, etc., reality and requirements of Sustainable PLM can only be met in a scalable way if ad hoc, loosely coupled interoperability between devices and other information systems is technically easy and economically feasible enough. Failing to recognize the importance of loosely coupled integration can delay the speed of evolution and adoption of Sustainable PLM.
 References
