 With the improvements of geographic positioning technology and the popularity of wireless communication, it is easy to trace and record the position of mov-ing objects. New personal services are p roposed and realized, many of which serve the user with desired functionality by considering the user X  X  geo-location. This kind of service is also called as location-based service (LBS). For example, in Intelligent Transportation Systems (I TS), to find out the 3-nearest vehicles around an autonomous vehicle, continuously; or in the war field, to keep contact with the 5-nearest partners all the time and so on. To provide such kinds of ser-vices, the research on nearest neighbor sea rch (NN-search), esp ecially continuous kNN-search (CkNN) for mobile objects is arousing more and more attentions.
CkNN search under mobile environment can be defined as: given a query are moving in 2D (or 3D) space. Suppose query object q searches its k nearest neighbors every  X t time, this kind of continuous query is called CkNN under mobile environment. Beca usealltheobjectsaremoving,itismorecomplexthan continuous k nearest static objects search, i.e., search the 3 nearest gas stations for a moving car. In that situation, there are methods based on voronoi division [1,2,3] or based on the properties of the query object X  X  moving path [4,5,6,7,8]. All these methods cannot be applied to mobile environment CkNN search directly.
Up to now, there are not so much research for solving CkNN under mobile environment. Li et al. [9] discussed this problem with the condition of that all the moving functions of the mobile objects are known before starting the continuous kNN search, th erefore, they can only focus on the number k objects at all the time. Actually, there are more examples for moving functions are unknown in the real world. Jensen et al. [10] proposed method for ordered k-nearest neighbor queries for query and target objects that are moving in road networks. They employ a client-server architecture that partitions the NN search. First, a preliminary search for a Nearest Neighbor Candidate set (NNC set) is performed on the server. Then, the maintenance of the active query result is done on the client, which recomputes distances between data points in the NNC set and the query point, sorts the distances, and periodically refreshes the NNC set to avoid significant imprecision. The problem of this method is that the update interval is difficult to decide: a too short interval brings intensive computations, while a too long interval brings distrustful results.

In this paper, we propose CkNN search method for mobile objects. The focus of our research is to find out the relations between the continuous queries, in other words, we wish the current query result could help to increase the efficiency of the next query. The main contributions of our paper are as follows:  X  proposes a method for generating candidate set for continuous queries, and  X  proposes a quadrant representation method for deciding relative moving  X  proposes an algorithm for CkNN sea rch and carries experiments on three
The remainder of this paper is organized as follows. Section 2 describes our query method, including the generation method of candidate set, the decision method of relative moving trend. Sect ion 3 analyzes our method based on ex-periments and Section 4 makes a conclusion on our work. In this section, we propose a method for CkNN search under mobile environment, where the query object and the target ob jects are moving in 2D space, and the moving functions of them need not to be known before starting the query. All the query object and the target objects are moving all the time, therefore, at every query time, the query object may be at a new position and the target objects around it may be  X  X way X  or  X  X lose X  to it. A straightforward method for CkNN search is to find out kNN for the query object at every query time from all the target objects. The computing cost at e very time is decided by the efficiency of the access method for the target object s. For example, by using TPR*-tree [11] to index the target objects, and employing a priority queue for keeping the NN sequence of the tree nodes and the objects, the CkNN query under mobile environment is changed into a series of k NN search for static objects [12]. This method is effective but not efficient, becaus e if the query interval is not too long, the continuous queries may share the same or part of the results. Here, we just try to find out the relations between cont inuous queries, in or der to decrease the re-computations and limit the query into a relative small target object set. In the sequal, a generation method of kNN query candidate set and the decision method of the objects X  distribution are given. 2.1 Selection of Candidates To find out a proper candidate set based on up to now CkNN query results is an effective way for achieving an efficiency se arch. Song et al. [5] proposed methods for kNN search for a mobile object. However, their method is limited to all the data objects are static. When both the query and the data objects are moving, the decision should take the moving parameters into consideration. We give two theorems to cope with this situation.
 Theorem 1. Suppose at time t, the kNN query result set of query point at to q t .Attime t +  X t ,timeintervalis  X t ,thequerypointmovesto q t +  X t . We claim that  X  t +  X t = D t ( k )+  X  +  X  is legal (there are at least k sites are within the distance  X  t +  X t from q t +  X t ), where  X  is the distance between q t and q result set [5].
 Proof. By definition of kNN we have dist ( q t ,p i )  X  D t ( k ) , (1  X  i  X  k ). If the k ), and as v rs is the maximum speed: v pi  X   X t  X  v rs  X   X t, (1  X  i  X  k ). By Then dist ( q t +  X t ,p i )  X  D t ( k )+  X  +  X  , (1  X  i  X  k ), which means that at time t +  X t , there are at least k objects whose distances to q t +  X t are not longer than D ( k )+  X  +  X  . By definition, we know that  X  t +  X t = D t ( k )+  X  +  X  is legal. Though the kNNs for time t are still inside the candidate set for time t +  X t ,it does not mean that they  X  X re X  just the kNNs for time t +  X t . It only assures that kNNs for time t +  X t can be found inside this candidate set, and the sequence of them still needs to be computed.
 Theorem 2. Suppose at time t, the speed of query point at location q t is v q , the k nearest neighbors are { p 1 ,p 2 , ..., p k } , D t ( k ) is the maximum distance of these objects to q t ,and v rs is the maximum speed of these objects, the query interval is  X t . p is the object with the minimum distance of the objects outside that set, and D t ( p ) is the distance between p and q t . Then the update time of the candidate set is: Proof. If the expand speed of the candidate region v region : The expand speed of candidate set is calcu lated as the centripetal speed related to the query point. Its size is the same as that of kNNs X , the  X  X inus X  sign means the direction of the expand speed is in th e direction of departing the center q .
Based on the definition of p , p is the nearest object to the candidate set at time t . The candidate set and p are moving all the time. If at time t +  X t , p is just appearing on the boundary of candidate set, then the distance it traveled v region ). Considering that when p enters the candidate set, the candidate set needstobeupdated,andtheupdatetimeis:
Based on Theorem 1, the definition of  X  and  X  ,wehave v region =  X  ( v q + v rs ), and
Then:
After the first time of query, we can gener ate candidate set based on Theorem 1, calculate the update time of the candidate set based on Theorem 2. In the following search, after checking whether the candidate set need to be updated or not, the kNN search can be done inside the candidate set or an updated candidate set. The efficiency of the continuous kNN search can be assured. 2.2 Relative Moving Trend The circle region limited by the candidate set is called search region. The relative moving trend between the object and the search region decides the object inside the region will leave off or the object outside the region will come in. Though the center of the search region is the position of the query object ( q ), at the next query time, the relative moving trend between the data object and the search region is different with that between the data object and q . This is because the size of search region and its moving speed are changing all the time, for example, one object p is closing to q and p is in the search regio n, when there are more data objects come into the region with higher speed, then p will be extruded from the region; on the other hand, when there are more objects leave off the region, p will enter the region.

In this subsection, we propose a quadrant method for representing the relative moving trend in the query. First give met hod for representing the relative posi-tion between two objects, then discuss the relative moving trend between them. There are three kinds of trend: closing, leaving and relative static. To simplify the discussion, we consider  X  X tatic X  as one kind of  X  X losing X  in the follows.
Given a query object q ( x, y )andadataobject p ( x, y ) in 2D space, the relation between them can be represented by using the quadrant, depicted by Fig. 2: q is the reference point, the parallel lines of x-axis and y-axis split the space into quadrant, and use 1 or -1 to decode the positive or negative of the location related to q .

The relation p and q can be represented by quadrant method, and there are:  X  X f p x &gt;q x ,then q x  X  p x =1;  X  X f p x &lt;q x ,then q x  X  p x =  X  1;  X  X f p y &gt;q y ,then q y  X  p y =1;  X  X f p y &lt;q y ,then q y  X  p y =  X  1.

The relative moving trend is decided by the relative position and the relative speed between objects. We use a NOT(Ex clusive-OR) expression for deciding the moving trend: ( v qx  X  v px ) ( q x  X  p x ), the values of this expression is given in Table 1. Value 1 means in x-axis two objects are closing; while -1 means they are away. Therefore, there are three ki nds of relations between two objects: when two object are closing in both x-axis and y-axis, then they are closing; when they are away in both axes, they are away; otherwise, the situation of them cannot be decided.
 kNNs are selected from the candidate se t at every query time, and the candi-date set is maintained by testing the relative moving trend between the object inside the candidate set and the search region. For example, if an object leaves q with a speed faster than that of the search region, then this object will be deleted from the candidate set. By using this method, the number of objects inside the candidate set will be decreased, and t he kNN search can be more efficient. We conducted several experiments to compare our method with the original straightforward method which finds out kNN for the query object at every query time from all the target objects. There a re three data sets, A, B and C, used for the experiments: 1) in data set A, 10,000 objects are in a uniform distribution on a 100  X  100 grid, which are moving with the same speed; 2) in data set B, 10,000 objects are in a uniform distribution on a 100  X  100 grid, which are moving with random speed; 3) in data set C, 10,000 objects are in random distribution, which are moving with random speed. The experiments were performed on a PC with 1.70GHz CPU, 256MB of RAM, and Visual C++ 6.0 as the programming language. We record the executing time (seconds) of the CkNN queries for differ-ent values of query interval  X t ,querynumber num Query and different values of k . We present the average results of 10 runs of continuous k nearest neigh-bor queries, and compared them with those in the original method (in Fig. 3,  X  X riginal X  refers to the straightforward method, while  X  X ew X  refers to our method).  X  Effect of  X t . We analyze the relation of the qu ery interval and the algorithm  X  Effect of num Query . Given that the query interval  X t is 2 and the neighbor  X  Effect of k . Here the query interval  X t is 2 and the query number num Query In this paper, we proposed a search method for CkNN under mobile environment. In our method, the CkNN search can be execu tedinarelativesmallsearchregion decided by the candidate set. We proposed method for deciding the update time of the candidate set dynamically. Especially, we proposed the relative moving trend decision method for the maintenance of the candidate set, and assured the candidate set is legal and minimum. Experiments showed that our method outperforms the original straightforward method in 2D mobile environment. In our future work, we will discuss the CkNN under mobile environment for moving-constraint situations: i.e., for the cars moving on road networks.
 This research is supported by NSFC 60673141 (Research on the Index Structure of Spatial Network-based Moving Objects).

