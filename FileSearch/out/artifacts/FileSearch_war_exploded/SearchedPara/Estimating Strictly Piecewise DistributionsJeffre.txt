 Long-distance dependencies in natural language are of considerable interest. Although much at-tention has focused on long-distance dependencies which are beyond the expressive power of models with finitely many states (Chomsky, 1956; Joshi, 1985; Shieber, 1985; Kobele, 2006), there are some long-distance dependencies in natural lan-guage which permit finite-state characterizations. For example, although it is well-known that vowel and consonantal harmony applies across any ar-bitrary number of intervening segments (Ringen, 1988; Bakovi  X c, 2000; Hansson, 2001; Rose and Walker, 2004) and that phonological patterns are regular (Johnson, 1972; Kaplan and Kay, 1994), it is less well-known that harmony patterns are largely characterizable by the Strictly Piecewise languages, a subregular class of languages with independently-motivated, converging characteri-zations (see Heinz (2007, to appear) and especially Rogers et al. (2009)).
 As shown by Rogers et al. (to appear), the Strictly Piecewise (SP) languages, which make distinctions on the basis of (potentially) discon-tiguous subsequences, are precisely analogous to the Strictly Local (SL) languages (McNaughton and Papert, 1971; Rogers and Pullum, to appear), which make distinctions on the basis of contigu-ous subsequences. The Strictly Local languages are the formal-language theoretic foundation for n -gram models (Garcia et al., 1990), which are widely used in natural language processing (NLP) in part because such distributions can be estimated from positive data (i.e. a corpus) (Jurafsky and Martin, 2008). N -gram models describe prob-ability distributions over all strings on the basis of the Markov assumption (Markov, 1913): that the probability of the next symbol only depends on the previous contiguous sequence of length n  X  1 . From the perspective of formal language theory, these distributions are perhaps properly called Strictly k -Local distributions (SL k = n . It is well-known that one limitation of the Markov assumption is its inability to express any kind of long-distance dependency.

This paper defines Strictly k -Piecewise (SP distributions and shows how they too can be effi-ciently estimated from positive data. In contrast with the Markov assumption, our assumption is that the probability of the next symbol is condi-tioned on the previous set of discontiguous subse-quences of length k  X  1 in the string. While this suggests the model has too many parameters (one for each subset of all possible subsequences), in fact the model has on the order of |  X  | k +1 parame-ters because of an independence assumption: there is no interaction between different subsequences. As a result, SP distributions are efficiently com-putable even though they condition the probabil-ity of the next symbol on the occurrences of ear-lier (possibly very distant) discontiguous subse-quences. Essentially, these SP distributions reflect a kind of long-term memory.

On the other hand, SP models have no short-term memory and are unable to make distinctions on the basis of contiguous subsequences. We do not intend SP models to replace n -gram models, but instead expect them to be used alongside of them. Exactly how this is to be done is beyond the scope of this paper and is left for future research.
Since SP languages are the analogue of SL lan-guages, which are the formal-language theoretical foundation for n -gram models, which are widely used in NLP, it is expected that SP distributions and their estimation will also find wide applica-tion. Apart from their interest to problems in the-oretical phonology such as phonotactic learning (Coleman and Pierrehumbert, 1997; Hayes and Wilson, 2008; Heinz, to appear), it is expected that their use will have application, in conjunction with n -gram models, in areas that currently use them; e.g. augmentative communication (Newell et al., 1998), part of speech tagging (Brill, 1995), and speech recognition (Jelenik, 1997).  X  2 provides basic mathematical notation.  X  3 provides relevant background on the subregular hi-erarchy.  X  4 describes automata-theoretic charac-terizations of SP languages.  X  5 defines SP distri-butions.  X  6 shows how these distributions can be efficiently estimated from positive data and pro-vides a demonstration.  X  7 concludes the paper. We start with some mostly standard notation.  X  denotes a finite set of symbols and a string over  X  is a finite sequence of symbols drawn from strings over this alphabet of length k , of length less than or equal to k , of length greater than or equal to k , and of any finite length, respec-tively.  X  denotes the empty string. | w | denotes the length of string w . The prefixes of a string w are Pfx ( w ) = { v :  X  u  X   X   X  such that vu = w } . When discussing partial functions, the notation  X  and  X  indicates that the function is undefined, re-spectively is defined, for particular arguments.
A language L is a subset of  X   X  . A stochastic language D is a probability distribution over  X   X  . The probability p of word w with respect to D is written P r D must satisfy P guage then P r
A Deterministic Finite-state Automaton (DFA) is a tuple M = h Q,  X  , q state set,  X  is the alphabet, q  X  is a deterministic transition function with do-main Q  X   X  and codomain Q , F is the set of accepting states. Let  X  d : Q  X   X   X   X  Q be the (partial) path function of M , i.e.,  X  d ( q, w ) is the (unique) state reachable from state q via the sequence w , if any, or  X  d ( q, w )  X  other-wise. The language recognized by a DFA M is L ( M ) def = { w  X   X   X  |  X  d ( q 0 , w )  X   X  F } .
A state is useful iff for all q  X  Q , there exists w  X   X   X  such that  X  ( q 0 , w ) = q and there exists w  X   X   X  such that  X  ( q, w )  X  F . Useless states are not useful. DFAs without useless states are trimmed .

Two strings w and v over  X  are distinguished by a DFA M iff  X  d ( q Nerode equivalent with respect to a language L if and only if wu  X  L  X  X  X  vu  X  L for distinguish strings which are inequivalent in this sense, but no DFA recognizing L necessarily dis-tinguishes any strings which are equivalent. Hence the number of equivalence classes of strings over  X  modulo Nerode equivalence with respect to L gives a (tight) lower bound on the number of states required to recognize L .

A DFA is minimal if the size of its state set is minimal among DFAs accepting the same lan-guage. The product of n DFAs M given by the standard construction over the state space Q
A Probabilistic Deterministic Finite-state Automaton (PDFA) is a tuple M = h Q,  X  , q 0 ,  X , F, T i where Q is the state set,  X  is the alphabet, q a deterministic transition function, F and T are the final-state and transition probabilities. In particular, T : Q  X   X   X  R + and F : Q  X  R + such that Like DFAs, for all w  X   X   X  , there is at most one state reachable from q resented as labeled directed graphs as in Figure 1. A PDFA M generates a stochastic language D a 0 . . . a k sequence h ( q q to w is obtained by multiplying the transition prob-abilities with the final probability along w  X  X  path if Figure 1: A picture of a PDFA with states labeled A and B. The probabilities of T and F are located to the right of the colon. it exists, and zero otherwise.
 P r D A probability distribution is regular deterministic iff there is a PDFA which generates it.

The structural components of a PDFA M are its states Q , its alphabet  X  , its transitions  X , and its initial state q mean its structural components. Each PDFA M defines a family of distributions given by the pos-sible instantiations of T and F satisfying Equa-tion 1. These distributions have | Q | ( |  X  | + 1) in-dependent parameters (since for each state there are |  X  | possible transitions plus the possibility of finality.)
We define the product of PDFA in terms of co-emission probabilities (Vidal et al., 2005a). Definition 1 Let A be a vector of PDFAs and let |A| = n . For each 1  X  i  X  n let M i = h Q i ,  X  , q 0 i ,  X  i , F i , T i i be the i th PDFA in probability that  X  is co-emitted from q Q 1 , . . . , Q n Similarly, the probability that a word simultane-ously ends at q Then N A = h Q,  X  , q 1. Q, q 2. For all h q In other words, the numerators of T and F are de-fined to be the co-emission probabilities (Vidal et al., 2005a), and division by Z ensures that M de-fines a well-formed probability distribution. Sta-tistically speaking, the co-emission product makes an independence assumption: the probability of  X  being co-emitted from q one expects if there is no interaction between the individual factors; that is, between the probabil-ities of  X  being emitted from any q order of product is irrelevant up to renaming of the states, and so therefore we also speak of tak-ing the product of a set of PDFAs (as opposed to an ordered vector).

Estimating regular deterministic distributions is well-studied problem (Vidal et al., 2005a; Vidal et al., 2005b; de la Higuera, in press). We limit dis-cussion to cases when the structure of the PDFA is known. Let S be a finite sample of words drawn from a regular deterministic distribution D . The problem is to estimate parameters T and F of M so that D adopted maximum likelihood (ML) criterion for this estimation. It is well-known that if D is generated by some M , then optimizing the ML estimate guarantees that D infinity (Vidal et al., 2005a; Vidal et al., 2005b; de la Higuera, in press).

The optimization problem (3) is simple for de-terministic automata with known structural com-ponents. Informally, the corpus is passed through the PDFA, and the paths of each word through the corpus are tracked to obtain counts, which are then normalized by state. Let M = h Q,  X  ,  X , q be the PDFA whose parameters F and T are to be estimated. For all states q  X  Q and symbols a  X   X  , The ML estimation of the probability of T ( q, a ) is obtained by dividing the number of times this transition is used in parsing the sample S by the Figure 2: The automata shows the counts obtained by parsing M with sample S = { ab, bba,  X , cab, acb, cc } .
 number of times state q is encountered in the pars-ing of S . Similarly, the ML estimation of F ( q ) is obtained by calculating the relative frequency of state q being final with state q being encountered in the parsing of S . For both cases, the division is normalizing ; i.e. it guarantees that there is a well-formed probability distribution at each state. Fig-ure 2 illustrates the counts obtained for a machine M with sample S = { ab, bba,  X , cab, acb, cc } . 1 Figure 1 shows the PDFA obtained after normaliz-ing these counts. Within the class of regular languages there are dual hierarchies of language classes (Figure 3), one in which languages are defined in terms of their contiguous substrings (up to some length k , known as k -factors ), starting with the languages that are Locally Testable in the Strict Sense (SL), and one in which languages are defined in terms of their not necessarily contiguous subsequences , starting with the languages that are Piecewise Testable in the Strict Sense (SP). Each language class in these hierarchies has independently mo-tivated, converging characterizations and each has been claimed to correspond to specific, fundamen-tal cognitive capabilities (McNaughton and Pa-pert, 1971; Brzozowski and Simon, 1973; Simon, 1975; Thomas, 1982; Perrin and Pin, 1986; Garc  X  X a and Ruiz, 1990; Beauquier and Pin, 1991; Straub-ing, 1994; Garc  X  X a and Ruiz, 1996; Rogers and Pul-lum, to appear; Kontorovich et al., 2008; Rogers et al., to appear).

Languages in the weakest of these classes are defined only in terms of the set of factors (SL) or subsequences (SP) which are licensed to oc-cur in the string (equivalently the complement of that set with respect to  X   X  k , the forbidden fac-tors or forbidden subsequences ). For example, the set containing the forbidden 2-factors { ab, ba } de-fines a Strictly 2-Local language which includes all strings except those with contiguous substrings { ab, ba } . Similarly since the parameters of n -gram models (Jurafsky and Martin, 2008) assign probabilities to symbols given the preceding con-tiguous substrings up to length n  X  1 , we say they describe Strictly n -Local distributions.

These hierarchies have a very attractive model-theoretic characterization. The Locally Testable (LT) and Piecewise Testable languages are exactly those that are definable by propositional formulae in which the atomic formulae are blocks of sym-bols interpreted factors (LT) or subsequences (PT) of the string. The languages that are testable in the strict sense (SL and SP) are exactly those that are definable by formulae of this sort restricted to con-junctions of negative literals. Going the other way, the languages that are definable by First-Order for-mulae with adjacency (successor) but not prece-dence (less-than) are exactly the Locally Thresh-old Testable (LTT) languages. The Star-Free lan-guages are those that are First-Order definable with precedence alone (adjacency being FO defin-able from precedence). Finally, by extending to Monadic Second-Order formulae (with either sig-nature, since they are MSO definable from each other), one obtains the full class of Regular lan-guages (McNaughton and Papert, 1971; Thomas, 1982; Rogers and Pullum, to appear; Rogers et al., to appear).

The relation between strings which is funda-mental along the Piecewise branch is the subse-quence relation, which is a partial order on  X   X  : in which case we say w is a subsequence of v . For w  X   X   X  , let the set of subsequences of length k , respectively length no greater than k , of w . Let P P of strings. Note that P that P that P Similar to the Strictly Local languages, Strictly Piecewise languages are defined only in terms of the set of subsequences (up to some length k ) which are licensed to occur in the string.
 Definition 2 ( SP mar is a pair G = h  X  , G i where G  X   X  k . The language licensed by a SP A language is SP grammar G . It is SP iff it is SP
This paper is primarily concerned with estimat-ing Strictly Piecewise distributions, but first we examine in greater detail properties of SP lan-guages, in particular DFA representations. Following Sakarovitch and Simon (1983), Lothaire (1997) and Kontorovich, et al. (2008), we call the set of strings that contain w as a subsequence the principal shuffle ideal 2 of w : The shuffle ideal of a set of strings is defined as Rogers et al. (to appear) establish that the SP lan-guages have a variety of characteristic properties.
Figure 4: The DFA representation of SI ( aa ) . 1. L = T 2. L  X  SP 3. (  X  k )[ P 4. w  X  L and v  X  w  X  v  X  L ( L is subse-5. L = SI ( X ) , X  X   X   X  ( L is the complement
The DFA representation of the complement of a shuffle ideal is especially important.
 Lemma 1 Let w  X   X  k , w =  X  and M { i | 1  X  i  X  k } , q 0 = 1 , F = Q and for all q  X  Q,  X   X   X  : Then M ognizes the complement of SI ( w ) , i.e., SI ( w ) =
Figure 4 illustrates the DFA representation of the complement of SI ( aa ) with  X  = { a, b, c } . It is easy to verify that the machine in Figure 4 accepts all and only those words which do not contain an aa subsequence.

For any SP the first characterization (1) in Theorem 1 above yields a non-deterministic finite-state representa-tion of L , which is a set A of DFA representations of complements of principal shuffle ideals of the elements of G . The trimmed automata product of this set yields a DFA, with the properties below (Rogers et al., to appear).
 Lemma 2 Let M be a trimmed DFA recognizing a SP Then: 1. All states of M are accepting states: F = Q . Figure 5: The DFA representation of the of the SP language given by G = h{ a, b, c } , { aa, bc }i . Names of the states reflect subsets of subse-quences up to length 1 of prefixes of the language. Note this DFA is trimmed, but not minimal. 2. For all q
Figure 5 illustrates with the DFA representa-tion of the of the SP ify that this DFA is identical (modulo relabeling of state names) to one obtained by the trimmed prod-uct of the DFA representations of the complement of the principal shuffle ideals of aa and bc , which are the prohibited subsequences.

States in the DFA in Figure 5 correspond to the subsequences up to length 1 of the prefixes of the language. With this in mind, it follows that the DFA of  X   X  = L ( X  ,  X  k ) has states which corre-spond to the subsequences up to length k  X  1 of when k = 2 and  X  = { a, b, c } .

In fact, these DFAs reveal the differences be-tween SP languages and PT languages: they are exactly those expressed in Lemma 2. Within the state space defined by the subsequences up to length k  X  1 of the prefixes of the language, if the conditions in Lemma 2 are violated, then the DFAs describe languages that are PT but not SP. Pictori-ally, P T moving arcs, states, and the finality of states from the DFA in Figure 6, and SP non-arbitrarily removing them in accordance with Lemma 2. The same applies straightforwardly for any k (see Definition 3 below). Figure 6: A DFA representation of the of the SP language given by G = h{ a, b, c } ,  X  2 i . Names of the states reflect subsets of subsequences up to length 1 of prefixes of the language. Note this DFA is trimmed, but not minimal. In the same way that SL distributions (n-gram models) generalize SL languages, SP distributions generalize SP languages. Recall that SP languages are characterizable by the intersection of the com-plements of principal shuffle ideals. SP distribu-tions are similarly characterized.
 We begin with Piecewise-Testable distributions. Definition 3 A distribution D is k -Piecewise Testable (written D  X  PTD scribed by a PDFA M = h Q,  X  , q 1. Q = { P 2. q 3. For all w  X   X   X  and all  X   X   X  , 4. F and T satisfy Equation 1.
 In other words, a distribution is k -Piecewise Testable provided it can be represented by a PDFA whose structural components are the same (mod-ulo renaming of states) as those of the DFA dis-cussed earlier where states corresponded to the subsequences up to length k  X  1 of the prefixes of the language. The DFA in Figure 6 shows the structure of a PDFA which describes a PT bution as long as the assigned probabilities satisfy Equation 1.

The following lemma follows directly from the finite-state representation of PT Lemma 3 Let D belong to PTD h Q,  X  , q 0 ,  X , F, T i be a PDFA representing D de-fined according to Definition 3.
 PT events, i.e. transitions and finality).

Let P r (  X  | #) and P r (# | P the probability (according to some D  X  PTD that a word begins with  X  and ends after observ-ing P terms of conditional probability as
P r D (  X  1 . . .  X  n ) = P r (  X  1 | #) Thus, the probability assigned to a word depends not on the observed contiguous sequences as in a Markov model, but on observed subsequences.

Like SP languages, SP distributions can be de-fined in terms of the product of machines very sim-ilar to the complement of principal shuffle ideals. Definition 4 Let w  X   X  k  X  1 and w =  X  M w = h Q,  X  , q 0 ,  X , F, T i is a w-subsequence-distinguishing PDFA (w-SD-PDFA) iff Q = Pfx ( w ) , q 0 =  X  , for all u  X  Pfx ( w ) and each  X   X   X  , and F and T satisfy Equation 1.

Figure 7 shows the structure of M almost the same as the complement of the princi-pal shuffle ideal in Figure 4. The only difference is the additional self-loop labeled a on the right-most state labeled a . M Figure 7: The structure of PDFA M same (modulo state names) as the DFA in Figure 4 except for the self-loop labeled a on state a . strings which contain a (state a ) from those that do not (state  X  ). A set of PDFAs is a k-set of SD-actly one w -SD-PDFA.

In the same way that missing edges propagate down in DFA representations of SP languages (Lemma 2), the final and transitional probabili-ties must propagate down in PDFA representa-tions of SP nal and transitional probabilities at states further along paths beginning at the start state must be de-termined by final and transitional probabilities at earlier states non-increasingly. This is captured by defining SP distributions as a product of k -sets of SD-PDFAs (see Definition 5 below).

While the standard product based on co-emission probability could be used for this pur-pose, we adopt a modified version of it defined for k -sets of SD-PDFAs: the positive co-emission probability . The automata product based on the positive co-emission probability not only ensures that the probabilities propagate as necessary, but also that such probabilities are made on the ba-sis of observed subsequences, and not unobserved ones. This idea is familiar from n -gram models: the probability of  X  ceding sequence  X  the probability of  X  sequences which do not immediately precede it, though this is a logical possibility.

Let A be a k -set of SD-PDFAs. For each be the w -subsequence-distinguishing PDFA in A . The positive co-emission probability that  X  is si-multaneously emitted from states q the statesets Q PDFA in A is P CT ( h  X , q  X  . . . q u i ) = Y Similarly, the probability that a word simultane-ously ends at n states q
P CF ( h q  X  . . . q u i ) = Y In other words, the positive co-emission proba-bility is the product of the probabilities restricted to those assigned to the maximal states in each M w . For example, consider a 2 -set of SD-PDFAs A with  X  = { a, b, c } . A contains four PDFAs M h  X ,  X , b, c i  X  N A (this is the state labeled  X , b, c in Figure 6). Then but since in PDFA M state.

The positive co-emission product (  X  + ) is de-fined just as with co-emission probabilities, sub-stituting PCT and PCF for CT and CF, respec-tively, in Definition 1. The definition of  X  + en-sures that the probabilities propagate on the basis of observed subsequences, and not on the basis of unobserved ones.
 Lemma 4 Let k  X  1 and let A be a k -set of SD-PDFAs. Then  X  + S defines a well-formed proba-bility distribution over  X   X  .
 Proof Since M the case that PCT and PCF are defined. Well-formedness follows from the normalization term as in Definition 1.  X   X   X  Definition 5 A distribution D is k -Strictly Piece-wise (written D  X  SPD by a PDFA which is the positive co-emission product of a k -set of subsequence-distinguishing PDFAs.
 By Lemma 4, SP distributions are well-formed. Unlike PDFAs for PT distributions, which distin-set of SD-PDFAs is P  X ( |  X  | k +1 ) . Furthermore, since each SD-PDFA only has one state contributing |  X  | +1 probabilities many SD-PDFAs in a k -set, there are |  X  | k  X  1 |  X  |  X  1 parameters, which is  X ( |  X  | k ) .
 Lemma 5 Let D  X  SPD Proof Since D  X  SPD subsequence-distinguishing PDFAs. The product of this set has the same structure as the PDFA given in Definition 3.  X   X   X  Theorem 2 A distribution D  X  SPD be described by a PDFA M = h Q,  X  , q satisfying Definition 3 and the following.
 For all w  X   X   X  and all  X   X   X  , let (This is the normalization term.) Then T must sat-isfy: T ( P and F must satisfy: F ( P Proof That SPD directly from Lemma 5. Equations 8-10 follow from the definition of positive co-emission proba-bility.  X   X   X 
The way in which final and transitional proba-bilities propagate down in SP distributions is re-flected in the conditional probability as defined by Equations 9 and 10. In terms of conditional prob-ability, Equations 9 and 10 mean that the prob-ability that  X  not only a function of P subsequence in  X  In particular, P r (  X  tained by substituting P r (  X  F ( P  X  k  X  1 ( s )) in Equations 8, 9 and 10. For ex-ample, for a SP a given P normalized product of the probabilities of a given P
To summarize, SP and PT distributions are reg-ular deterministic. Unlike PT distributions, how-ever, SP distributions can be modeled with only is true even though SP distributions distinguish 2 resented by a single PDFA, computing P r ( w ) oc-curs in only  X ( | w | ) for such PDFA. While such PDFA might be too large to be practical, P r ( w ) can also be computed from the k -set of SD-PDFAs in  X ( | w | k ) (essentially building the path in the product machine on the fly using Equations 4, 8, 9 and 10). The problem of ML estimation of SP tions is reduced to estimating the parameters of the SD-PDFAs. Training (counting and normaliza-tion) occurs over each of these machines (i.e. each machine parses the entire corpus), which gives the ML estimates of the parameters of the distribution. It trivially follows that this training successfully estimates any D  X  SPD Theorem 3 For any D  X  SPD sample S . Let A be the k -set of SD-PDFAs which describes exactly D . Then optimizing the MLE of S with respect to each M  X  A guarantees that the distribution described by the positive co-emission product of N + A approaches D as | S | increases. Proof The MLE estimate of S with respect to SPD the likelihood of S . The parameters of D  X  SPD are found on the maximal states of each M  X  A . By definition, each M  X  A describes a proba-bility distribution over  X   X  , and similarly defines a family of distributions. Therefore finding the MLE of S with respect to SPD MLE estimate of S with respect to each of the fam-ily of distributions which each M  X  A defines, respectively.
 Optimizing the ML estimate of S for each M  X  A means that as | S | increases, the estimates  X  T F  X  F F
We demonstrate learning long-distance depen-dencies by estimating SP corpus from Samala (Chumash), a language with lants in Samala: [-anterior] sibilants like [s] and [ &gt; ts Samala words are subject to a phonological pro-cess wherein the last sibilant requires earlier sibi-lants to have the same value for the feature [an-terior], no matter how many sounds intervene (Applegate, 1972). As a consequence of this rule, there are generally no words in Samala where [-anterior] sibilants follow [+anterior]. E.g. [
S tojonowonowa S ]  X  X t stood upright X  (Applegate 1972:72) is licit but not *[ S tojonowonowa s ].
The results of estimating D  X  SPD the corpus is shown in Table 6. The results clearly demonstrate the effectiveness of the model: the probability of a [  X  anterior] sibilant given P less than given P Table 1: Results of SP corpus. Only sibilants are shown. SP distributions are the stochastic version of SP languages, which model long-distance dependen-cies. Although SP distributions distinguish 2 |  X  | k  X  1 states, they do so with tractably many parameters and states because of an assumption that distinct subsequences do not interact. As shown, these distributions are efficiently estimable from posi-tive data. As previously mentioned, we anticipate these models to find wide application in NLP.
