 The field of entity search using Semantic Web (RDF) data has gained more interest recently. In this paper, we propose a probabilistic entity retrieval model for RDF graphs using paths in the graph. Unlike previous work which assumes that all descriptions of an entity are directly linked to the entity node, we assume that an entity can be described with any node that can be reached from the entity node by follow-ing paths in the RDF graph. Our retrieval model simulates the generation process of query terms from an entity node by traversing the graph. We evaluate our approach using a standard evaluation framework for entity search.
 Categories and Subject Descriptors: H.3.3 [Informa-tion Search and Retrieval]: Retrieval models General Terms: Algorithms, Experimentation Keywords: Entity Search, RDF Graphs, Object Retrieval, Semantic Search, Structured Data, Semantic Web
As the amount of Semantic Web (RDF) data published in the form of Linked Data 1 has been increasing recently, many researchers have been exploiting the RDF data for retrieval tasks [1]. We address the problem of retrieving entities relevant to a keyword query by using only RDF data [8]. This area has gained popularity recently, leading to the consideration of several retrieval models [2, 6, 4, 3].
Unfortunately, existing retrieval models do not fully re-flect the characteristics of RDF data. RDF triples can be represented by a graph 2 , thus the nodes in the RDF graph are somewhat related to each other even if they are not directly linked through a single triple (distance=1). For ex-ample, given a movie entity node &lt;../movie/35&gt; , we can find the node with the name of its director by following two triples (&lt;../movie/35&gt;, &lt;../director&gt;, &lt;../person/928&gt;) and (&lt;../person/928&gt;, &lt;../name&gt;, "James Cameron") as depicted in Table 1 and Figure 1. However, most existing models do not capture this kind of case because they assume that the descriptions of an entity exist only at the nodes that are directly linked to the entity node. Therefore, the entity http://www.w3.org/standards/semanticweb/data
A triple can be thought of as a directed edge from the subject node to object node in the RDF graph.
 &lt;../movie/35&gt; cannot be described by the name of its di-rector. So, if a user issues a query  X  X ovie james cameron X  to find movies that are directed by James Cameron, they fail to retrieve relevant movies. This issue can be partially tackled by tokenizing URIs of resources itself [3, 2, 4]. However, it becomes problematic when URIs are made up of meaningless strings like &lt;../928&gt; , rather than &lt;../James_Cameron&gt; .
In this paper, we propose a probabilistic entity retrieval model that can capture indirect relationships between nodes in the RDF graph. We design the model based on the as-sumption that the descriptions of an entity exist at any lit-eral node that can be reached from the resource (entity) node by following the paths in the graph.
The RDF data consists of a set of triples , where each triple has three components: (subject, predicate, ob-ject) . Both the subject and predicate are resources , and the object is either a resource or a literal . A resource repre-sents any entity or concept (e.g. a movie), and is identified by URI (e.g. &lt;../movie/35&gt; ). A literal contains textual information (e.g. "Avatar" ). Our problem is to rank re-sources E according to their probability of being relevant given a keyword query Q , denoted by P ( E | Q ).
We propose a novel RDF resource retrieval model PathLM based on the language modeling. It simulates the generation of query Q by following paths from a resource node E to several related literal nodes L j . Using Bayes X  Rule, we have: where P ( Q | E ) is query likelihood, P ( E ) is resource prior. Assuming independence between query terms, we have:
A resource can generate terms by passing through literal nodes since only literal nodes contain textual information used to match the query terms. We have: where L j is a j -th literal node that can be reached from the resource node E . There are m literal nodes related to E , and the sum of P ( L j | E ) is 1 ( P m j =1 P ( L j | E ) = 1). Finally, we obtain: The details of three probability terms in Eq. 4 are as follows. P ( E ) : Resource Prior.

P ( E ) is the prior probability of a resource. The value can be assumed to be uniform or determined using the number of literal nodes related to the resource node.
 P ( L | E ) : Select Paths to Literals given Resource.
P ( L j | E ) is the probability of selecting a path to literal L given a resource E . It indicates the importance of the path from the resource node E to the literal node L j in the RDF graph. The value can be either assigned manually based on P ( q | L ) : Query Likelihood given Literal.

We use the language modeling approach to simulate the generation of query terms given a literal node. P ( q i | L estimated by dividing the term frequency of q i in the literal L j by the length of L j . It is smoothed using a Dirichlet prior  X  with the collection language model. We have:
We evaluate our approach using the evaluation framework used in the Semantic Search Challenge 2010 3 . The dataset is the Billion Triple Challenge 2009 collection. After de-duplication, there are about 886 million triples, 175 mil-lion resources, and 296 million literals. We index literals using Indri with the Krovetz stemmer and no stopwords. The query set has 92 queries extracted from the query logs of search engines. The relevance judgments are made with three-point scale. We add judgments if they are not avail-able. For each query, the model returns top-100 resources, and is evaluated with MAP, P@10, and NDCG. We conduct a series of two-tailed paired t-tests of 99% confidence.
We compare our path -based approach to three baseline ap-proaches: 1) Plain text , 2) Attribute with uniform weights , and 3) Attribute with different weights . First, for the Plain text approach, a pseudo-document is built for each resource by concatenating literals that are directly linked to the re-source node [4, 6]. Two standard retrieval models, BM25 and Language Model with Dirichlet smoothing (LM) , are http://km.aifb.kit.edu/ws/semsearch10/ Table 2: Retrieval performance.  X  indicates significant difference between the BM25-and LM-based models within the same approach.  X  ,  X  indicate significance over the cor-responding models of Plain and Attr(uni) , respectively. O indicates significantly worse results compared to PathLM . used. The parameters in the models, such as b and  X  , are tuned empirically. Next, the attribute -based models are de-signed by defining attributes as literal nodes whose distances from the resource node are 1. We employ BM25F [2, 3] and Mixture of Field LM (MFLM) [7, 6, 4]. We note that our PathLM can be thought of as a type of the MFLM . The weights of attributes are assigned uniformly at first, then we assign them differently by defining some important pred-icates manually [2]. Lastly, for our path -based approach, we consider several selected paths from the resource node to literal nodes where distances between them are 1 or 2.
Table 2 shows experimental results. The LM-based mod-els generally perform better than the BM25-based ones. We also observe that the MFLM outperforms the original LM . When more weights are given to some important attributes, both BM25F and MFLM perform better. The proposed path-based approach outperforms all baselines in terms of MAP and NDCG ( p &lt; 0 . 001). Moreover, it outperforms all previous work that used the same collection [6, 2, 3]. A possible explanation is that it can retrieve more relevant resources by exploiting some relations like sameAs [3].
As future work, we plan to conduct more detailed evalu-ation based on the proposed model, such as 1) determining resource prior in various ways, 2) learning which kinds of paths have greater effect on performance, and 3) applying different smoothing methods. After further research, we ex-pect to better understand the properties of our path-based retrieval model which enables us to incorporate indirect re-lationships in the RDF graph [5].
 Acknowledgments: This work was supported by the National Research Foundation of Korea(NRF) grant funded by the Korea government(MEST) (No. 20110030812).
