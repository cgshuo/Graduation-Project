 The Markov chain ( n -gram) source models, which predict each word on the basis of previous n -1 words, have been the workhorses of state-of-the-art speech recognizers and machine translators that help to resolve acoustic or foreign language ambiguities by placing higher probability on more likely original underlying word strings. Research groups (Brants et al., 2007; Zhang, 2008) have shown that using an immense distributed computing paradigm, up to 6-grams can be trained on up to billions and trillions of words, yielding consistent system improvements, but Zhang (2008) did not observe much improve-ment beyond 6-grams. Although the Markov chains are efficient at encoding local word interactions, the n -gram model clearly ignores the rich syntactic and semantic structures that constrain natural languages. As the machine translation (MT) working groups stated on page 3 of their final report (Lavie et al., 2006),  X  X hese approaches have resulted in small im-provements in MT quality, but have not fundamen-tally solved the problem. There is a dire need for de-veloping novel approaches to language modeling. X 
Wang et al. (2006) integrated n -gram, structured language model (SLM) (Chelba and Jelinek, 2000) and probabilistic latent semantic analysis (PLSA) (Hofmann, 2001) under the directed MRF frame-work (Wang et al., 2005) and studied the stochas-tic properties for the composite language model. They derived a generalized inside-outside algorithm to train the composite language model from a gen-eral EM (Dempster et al., 1977) by following Je-linek X  X  ingenious definition of the inside and outside probabilities for SLM (Jelinek, 2004) with 6th order of sentence length time complexity. Unfortunately, there are no experimental results reported.

In this paper, we study the same composite lan-guage model. Instead of using the 6th order general-ized inside-outside algorithm proposed in (Wang et al., 2006), we train this composite model by a con-vergent N-best list approximate EM algorithm that has linear time complexity and a follow-up EM al-gorithm to improve word prediction power. We con-duct comprehensive experiments on corpora with 44 million tokens, 230 million tokens, and 1.3 billion tokens and compare perplexity results with n -grams ( n =3,4,5 respectively) on these three corpora, we obtain drastic perplexity reductions. Finally, we ap-ply our language models to the task of re-ranking the N-best list from Hiero (Chiang, 2005; Chiang, 2007), a state-of-the-art parsing-based MT system, we achieve significantly better translation quality measured by the BLEU score and  X  X eadability X . The n -gram language model is essentially a word predictor that given its entire document history it predicts next word w with probability p ( w w The SLM (Chelba and Jelinek, 1998; Chelba and Jelinek, 2000) uses syntactic information beyond the regular n -gram models to capture sentence level long range dependencies. The SLM is based on sta-tistical parsing techniques that allow syntactic anal-ysis of sentences; it assigns a probability p ( W, T ) to every sentence W and every possible binary parse T . The terminals of T are the words of W with POS tags, and the nodes of T are annotated with phrase headwords and non-terminal labels. Let W be a sen-tence of length n words to which we have prepended the sentence beginning marker &lt;s&gt; and appended the sentence end marker &lt;/s&gt; so that w and w word k -prefix of the sentence  X  the words from the beginning of the sentence up to the current position k and W k -prefix has a set of exposed heads h with each head being a pair (headword, non-terminal label), or in the case of a root-only tree (word, POS tag). An m -th order SLM ( m -SLM) has three operators to generate a sentence: WORD-PREDICTOR predicts the next word w on the m left-most exposed headwords h  X  1 h ability p ( w TAGGER; the TAGGER predicts the POS tag t to the next word w and the POS tags of the m left-most exposed head-words h  X  1 ability p ( t CONSTRUCTOR builds the partial parse T T NULL, where a parse move a is made with proba-bility p ( a | h  X  1 left, NTlabel), (adjoin-right, NTlabel), null } . Once the CONSTRUCTOR hits NULL, it passes control to the WORD-PREDICTOR. See detailed descrip-tion in (Chelba and Jelinek, 2000).

A PLSA model (Hofmann, 2001) is a gener-ative probabilistic model of word-document co-occurrences using the bag-of-words assumption de-scribed as follows: (i) choose a document d with probability p ( d ) ; (ii) SEMANTIZER: select a se-mantic class g with probability p ( g | d ) ; and (iii) WORD-PREDICTOR: pick a word w with proba-bility p ( w | g ) . Since only one pair of ( d, w ) is being observed, as a result, the joint probability model is a mixture of log-linear model with the expression number of documents and vocabulary size are much larger than the size of latent semantic class variables. Thus, latent semantic class variables function as bot-tleneck variables to constrain word occurrences in documents.
 When combining n -gram, m order SLM and PLSA models together to build a composite gen-erative language model under the directed MRF paradigm (Wang et al., 2005; Wang et al., 2006), the TAGGER and CONSTRUCTOR in SLM and SEMANTIZER in PLSA remain unchanged; how-ever the WORD-PREDICTORs in n -gram, m -SLM and PLSA are combined to form a stronger WORD-PREDICTOR that generates the next word, w not only depending on the m left-most exposed headwords h  X  1 its n -gram history w k tent g in the composite n -gram/ m -SLM/PLSA language model becomes p ( w sulting composite language model has an even more complex dependency structure but with more ex-pressive power than the original SLM. Figure 1 il-lustrates the structure of a composite n -gram/ m -SLM/PLSA language model.

The composite n -gram/ m -SLM/PLSA lan-guage model can be formulated as a directed MRF model (Wang et al., 2006) with lo-cal normalization constraints for the param-eters of each model component, WORD-PREDICTOR, TAGGER, CONSTRUCTOR, SEMANTIZER, i.e., P 1 , P t  X  X  p ( t | wh  X  1  X  m . tag) = 1 , P a  X  X  p ( a | h 1 , P g  X  X  p ( g | d ) = 1 . Under the composite n -gram/ m -SLM/PLSA lan-guage model, the likelihood of a training corpus D , a collection of documents, can be written as where ( W l , T l , G l , d ) denote the joint sequence of the l th sentence W l with its parse tree structure T l and semantic annotation string G l in document d . This sequence is produced by a unique sequence of model actions: WORD-PREDICTOR, TAGGER, CONSTRUCTOR, SEMANTIZER moves, its prob-ability is obtained by chaining the probabilities of these moves where #( g, W l , G l , d ) is the count of seman-tic content g in semantic annotation string G l of the l th sentence W l in document d , of n -grams, its m most recent exposed headwords and semantic content g in parse T l and semantic annotation string G l of the l th sentence W l in document d , #( twh  X  1 of tag t predicted by word w and the tags of m most recent exposed headwords in parse tree T l of the l th sentence W l in document d , and finally move a conditioning on m exposed headwords h  X  1 in parse tree T l of the l th sentence W l in document d .

The objective of maximum likelihood estimation is to maximize the likelihood L ( D , p ) respect to model parameters. For a given sentence, its parse tree and semantic content are hidden and the num-ber of parse trees grows faster than exponential with sentence length, Wang et al. (2006) have derived a generalized inside-outside algorithm by applying the standard EM algorithm. However, the complexity of this algorithm is 6th order of sentence length, thus it is computationally too expensive to be practical for a large corpus even with the use of pruning on charts (Jelinek and Chelba, 1999; Jelinek, 2004). 3.1 N-best list approximate EM Similar to SLM (Chelba and Jelinek, 2000), we adopt an N -best list approximate EM re-estimation with modular modifications to seamlessly incorpo-rate the effect of n -gram and PLSA components. Instead of maximizing the likelihood L ( D , p ) , we maximize the N -best list likelihood, where T  X  l in document d and || X || denotes the cardinality and T corpus D .

The N-best list approximate EM involves two steps: 1. N-best list search: For each sentence W in doc-2. EM update: Perform one iteration (or several Iterate steps (1) and (2) until the convergence of the N -best-list likelihood. Due to space constraints, we omit the proof of the convergence of the N-best list approximate EM algorithm which uses Zangwill X  X  global convergence theorem (Zangwill, 1969).
N -best list search strategy: To extract the N -best parse trees, we adopt a synchronous, multi-stack search strategy that is similar to the one in (Chelba and Jelinek, 2000), which involves a set of stacks storing partial parses of the most likely ones for a given prefix W parses are purged. Each stack contains hypotheses (partial parses) that have been constructed by the same number of WORD-PREDICTOR and the same number of CONSTRUCTOR operations. The hy-potheses in each stack are ranked according to the log( P G on top, where P ability of prefix W structure T g ,  X  X  X  , g k in a document d . A stack vector consists of the ordered set of stacks containing partial parses with the same number of WORD-PREDICTOR op-erations but different number of CONSTRUCTOR operations. In WORD-PREDICTOR and TAGGER operations, some hypotheses are discarded due to the maximum number of hypotheses the stack can contain at any given time. In CONSTRUCTOR operation, the resulting hypotheses are discarded due to either finite stack size or the log-probability threshold: the maximum tolerable difference be-tween the log-probability score of the top-most hy-pothesis and the bottom-most hypothesis at any given state of the stack.

EM update: Once we have the N -best parse trees for each sentence in document d and N -best topics for document d , we derive the EM algorithm to esti-mate model parameters.

In E-step, we compute the expected count of each model parameter over sentence W l in docu-ment d in the training corpus D . For the WORD-PREDICTOR and the SEMANTIZER, the number of possible semantic annotation sequences is expo-nential, we use forward-backward recursive formu-las that are similar to those in hidden Markov mod-els to compute the expected counts. We define the forward vector  X  l ( g | d ) to be that can be recursively computed in a forward man-ner, where W l T vector  X  l ( g | d ) to be that can be computed in a backward manner, here W tence W l , T l ture after the parse structure T l prefix W l the semantic subsequence in G l relevant to W l Then, the expected count of w  X  1 WORD-PREDICTOR on sentence W l in document d is where  X  (  X  ) is an indicator function and the expected count of g for the SEMANTIZER on sentence W l in document d is
For the TAGGER and the CONSTRUCTOR, the expected count of each event of twh  X  1 document d is the real count appeared in parse tree T l of sentence W l in document d times the conditional distribution P P
In M-step, the recursive linear interpolation scheme (Jelinek and Mercer, 1981) is used to obtain a smooth probability estimate for each model component, WORD-PREDICTOR, TAGGER, and CONSTRUCTOR. The TAGGER and CONSTRUCTOR are conditional probabilis-tic models of the type p ( u | z u, z 1 ,  X  X  X  , z n belong to a mixed set of words, POS tags, NTtags, CONSTRUCTOR actions ( u only), and z cursive mixing scheme is the standard one among relative frequency estimates of different orders k = 0 ,  X  X  X  , n as explained in (Chelba and Jelinek, 2000). The WORD-PREDICTOR is, however, a condi-tional probabilistic model p ( w | w  X  1 there are three kinds of context w  X  1 each forms a linear Markov chain. The model has a combinatorial number of relative frequency esti-mates of different orders among three linear Markov chains. We generalize Jelinek and Mercer X  X  original recursive mixing scheme (Jelinek and Mercer, 1981) and form a lattice to handle the situation where the context is a mixture of Markov chains. 3.2 Follow-up EM As explained in (Chelba and Jelinek, 2000), for the SLM component, a large fraction of the partial parse trees that can be used for assigning probability to the next word do not survive in the synchronous, multi-stack search strategy, thus they are not used in the N-best approximate EM algorithm for the estima-tion of WORD-PREDICTOR to improve its predic-tive power. To remedy this weakness, we estimate WORD-PREDICTOR using the algorithm below.

The language model probability assignment for the word at position k +1 in the input sentence of document d can be computed as where P and Z at the current stage k during the synchronous multi-stack pruning strategy and it is a function of the word k -prefix W
The likelihood of a training corpus D under this language model probability assignment that uses partial parse trees generated during the process of the synchronous, multi-stack search strategy can be written as
We employ a second stage of parameter re-estimation for p ( w p ( g k +1 | d ) by using EM again to maximize Equation (3) to improve the predictive power of WORD-PREDICTOR. 3.3 Distributed architecture When using very large corpora to train our compos-ite language model, both the data and the parameters can X  X  be stored in a single machine, so we have to resort to distributed computing. The topic of large scale distributed language models is relatively new, and existing works are restricted to n -grams only (Brants et al., 2007; Emami et al., 2007; Zhang et al., 2006). Even though all use distributed archi-tectures that follow the client-server paradigm, the real implementations are in fact different. Zhang et al. (2006) and Emami et al. (2007) store train-ing corpora in suffix arrays such that one sub-corpus per server serves raw counts and test sentences are loaded in a client. This implies that when comput-ing the language model probability of a sentence in a client, all servers need to be contacted for each n -gram request. The approach by Brants et al. (2007) follows a standard MapReduce paradigm (Dean and Ghemawat, 2004): the corpus is first divided and loaded into a number of clients, and n -gram counts are collected at each client, then the n -gram counts mapped and stored in a number of servers, result-ing in exactly one server being contacted per n -gram when computing the language model probability of a sentence. We adopt a similar approach to Brants et al. and make it suitable to perform iterations of N -best list approximate EM algorithm, see Fig-ure 2. The corpus is divided and loaded into a num-ber of clients. We use a public available parser to parse the sentences in each client to get the initial counts for w  X  1 and then the counts for a particular w  X  1 at different clients are summed up and stored in one of the servers by hashing through the word w h is the initialization of the N -best list approximate EM step. Each client then calls the servers for pa-rameters to perform synchronous multi-stack search for each sentence to get the N -best list parse trees. Again, the expected count for a particular parameter we finish a Map part, then summed up and stored in one of the servers by hashing through the word w (or h part. We repeat this procedure until convergence. Similarly, we use a distributed architecture as in Figure 2 to perform the follow-up EM algorithm to re-estimate WORD-PREDICTOR. We have trained our language models using three different training sets: one has 44 million tokens, another has 230 million tokens, and the other has 1.3 billion tokens. An independent test set which has 354 k tokens is chosen. The independent check data set used to determine the linear interpolation coefficients has 1.7 million tokens for the 44 mil-lion tokens training corpus, 13.7 million tokens for both 230 million and 1.3 billion tokens training cor-pora. All these data sets are taken from the LDC English Gigaword corpus with non-verbalized punc-tuation and we remove all punctuation. Table 1 gives the detailed information on how these data sets are chosen from the LDC English Gigaword corpus.
The vocabulary sizes in all three cases are:  X  word (also WORD-PREDICTOR operation)  X  POS tag (also TAGGER operation) vocabulary:  X  non-terminal tag vocabulary: 54, closed;  X  CONSTRUCTOR operation vocabulary: 157,
Similar to SLM (Chelba and Jelinek, 2000), af-ter the parses undergo headword percolation and binarization, each model component of WORD-PREDICTOR, TAGGER, and CONSTRUCTOR is initialized from a set of parsed sentences. We use the  X  X penNLP X  software (Northedge, 2005) to parse a large amount of sentences in the LDC English Gi-gaword corpus to generate an automatic treebank, which has a slightly different word-tokenization than that of the manual treebank such as the Upenn Treebank used in (Chelba and Jelinek, 2000). For the 44 and 230 million tokens corpora, all sentences are automatically parsed and used to initialize model parameters, while for 1.3 billion tokens corpus, we parse the sentences from a portion of the corpus that contain 230 million tokens, then use them to initial-ize model parameters. The parser at  X  X penNLP X  is trained by Upenn treebank with 1 million tokens and there is a mismatch between Upenn treebank and LDC English Gigaword corpus. Nevertheless, ex-perimental results show that this approach is effec-tive to provide initial values of model parameters.
As we have explained, the proposed EM algo-rithms can be naturally cast into a MapReduce framework, see more discussion in (Lin and Dyer, 2010). If we have access to a large cluster of machines with Hadoop installed that are powerful enough to process a billion tokens level corpus, we just need to specify a map function and a re-duce function etc., Hadoop will automatically par-allelize and execute programs written in this func-tional style. Unfortunately, we don X  X  have this kind of resources available. Instead, we have access to a supercomputer at a supercomputer center with MPI installed that has more than 1000 core processors us-able. Thus we implement our algorithms using C++ under MPI on the supercomputer, where we have to write C++ codes for Map part and Reduce part, and the MPI is used to take care of massage passing, scheduling, synchronization, etc. between clients and servers. This involves a fair amount of pro-gramming work, even though our implementation under MPI is not as reliable as under Hadoop but it is more efficient. We use up to 1000 core proces-sors to train the composite language models for 1.3 billion tokens corpus where 900 core processors are used to store the parameters alone. We decide to use linearly smoothed trigram as the baseline model for 44 million token corpus, linearly smoothed 4-gram as the baseline model for 230 million token corpus, and linearly smoothed 5-gram as the baseline model for 1.3 billion token corpus. Model size is a big is-sue, we have to keep only a small set of topics due to the consideration in both computational time and re-source demand. Table 2 shows the perplexity results and computation time of composite n -gram/PLSA language models that are trained on three corpora when the pre-defined number of total topics is 200 but different numbers of most likely topics are kept for each document in PLSA, the rest are pruned. For composite 5-gram/PLSA model trained on 1.3 bil-lion tokens corpus, 400 cores have to be used to keep top 5 most likely topics. For composite tri-gram/PLSA model trained on 44M tokens corpus, the computation time increases drastically with less than 5% percent perplexity improvement. So in the following experiments, we keep top 5 topics for each document from total 200 topics and all other 195 topics are pruned.

All composite language models are first trained by performing N-best list approximate EM algo-rithm until convergence, then EM algorithm for a second stage of parameter re-estimation for WORD-PREDICTOR and SEMANTIZER until conver-gence. We fix the size of topics in PLSA to be 200 and then prune to 5 in the experiments, where the unpruned 5 topics in general account for 70% prob-ability in p ( g | d ) . Table 3 shows comprehensive per-plexity results for a variety of different models such as composite n -gram/ m -SLM, n -gram/PLSA, m -SLM/PLSA, their linear combinations, etc., where we use online EM with fixed learning rate to re-estimate the parameters of the SEMANTIZER of test document. The m -SLM performs competitively with its counterpart n -gram ( n = m +1) on large scale corpus. In Table 3, for composite n -gram/ m -SLM model ( n = 3 , m = 2 and n = 4 , m = 3 ) trained on 44 million tokens and 230 million tokens, we cut off its fractional expected counts that are less than a threshold 0.005, this significantly reduces the num-ber of predictor X  X  types by 85%. When we train the composite language on 1.3 billion tokens cor-pus, we have to both aggressively prune the param-eters of WORD-PREDICTOR and shrink the order of n -gram and m -SLM in order to store them in a supercomputer having 1000 cores. In particular, for composite 5-gram/4-SLM model, its size is too big to store, thus we use its approximation, a linear com-bination of 5-gram/2-SLM and 2-gram/4-SLM, and for 5-gram/2-SLM or 2-gram/4-SLM, again we cut off its fractional expected counts that are less than a threshold 0.005, this significantly reduces the num-ber of predictor X  X  types by 85%. For composite 4-SLM/PLSA model, we cut off its fractional expected counts that are less than a threshold 0.002, again this significantly reduces the number of predictor X  X  types by 85%. For composite 4-SLM/PLSA model or its linear combination with models, we ignore all the tags and use only the words in the 4 head words. In this table, we have three items missing (marked by  X ), since the size of corresponding model is too big to store in the supercomputer. The com-posite n -gram/ m -SLM/PLSA model gives signifi-cant perplexity reductions over baseline n -grams, n = 3 , 4 , 5 and m -SLMs, m = 2 , 3 , 4 . The major-ity of gains comes from PLSA component, but when adding SLM component into n -gram/PLSA, there is a further 10% relative perplexity reduction. We have applied our composite 5-gram/2-SLM+2-gram/4-SLM+5-gram/PLSA language model that is trained by 1.3 billion word corpus for the task of re-ranking the N -best list in statistical machine translation. We used the same 1000-best list that is used by Zhang et al. (2006). This list was generated on 919 sentences from the MT03 Chinese-English evaluation set by Hiero (Chiang, 2005; Chiang, 2007), a state-of-the-art parsing-based translation model. Its decoder uses a trigram language model trained with modified Kneser-Ney smoothing (Kneser and Ney, 1995) on a 200 million tokens corpus. Each translation has 11 features and language model is one of them. We substitute our language model and use MERT (Och, 2003) to optimize the BLEU score (Papineni et al., 2002). We partition the data into ten pieces, 9 pieces are used as training data to optimize the BLEU score (Papineni et al., 2002) by MERT (Och, 2003), a remaining single piece is used to re-rank the 1000-best list and obtain the BLEU score. The cross-validation process is then repeated 10 times (the folds), with each of the 10 pieces used exactly once as the validation data. The 10 results from the folds then can be averaged (or otherwise combined) to produce a single estimation for BLEU score. Table 4 shows the BLEU scores through 10-fold cross-validation. The composite 5-gram/2-SLM+2-gram/4-SLM+5-gram/PLSA language model gives 1.57% BLEU score improvement over the baseline and 0.79% BLEU score improvement over the 5-gram. This is because there is not much diversity on the 1000-best list, and essentially only 20  X  30 distinct sentences are there in the 1000-best list. Chiang (2007) studied the performance of machine translation on Hiero, the BLEU score is 33.31% when n -gram is used to re-rank the N -best list, how-ever, the BLEU score becomes significantly higher 37.09% when the n -gram is embedded directly into Hiero X  X  one pass decoder, this is because there is not much diversity in the N -best list. It is expected that putting the our composite language into a one pass decoder of both phrase-based (Koehn et al., 2003) and parsing-based (Chiang, 2005; Chiang, 2007) MT systems should result in much improved BLEU scores.

Besides reporting the BLEU scores, we look at the  X  X eadability X  of translations similar to the study con-ducted by Charniak et al. (2003). The translations are sorted into four groups: good/bad syntax crossed with good/bad meaning by human judges, see Ta-ble 5. We find that many more sentences are perfect, many more are grammatically correct, and many more are semantically correct. The syntactic lan-guage model (Charniak, 2001; Charniak, 2003) only improves translations to have good grammar, but does not improve translations to preserve meaning. The composite 5-gram/2-SLM+2-gram/4-SLM+5-gram/PLSA language model improves both signif-icantly. Bear in mind that Charniak et al. (2003) in-tegrated Charniak X  X  language model with the syntax-based translation model Yamada and Knight pro-posed (2001) to rescore a tree-to-string translation forest, whereas we use only our language model for N -best list re-ranking. Also, in the same study in (Charniak, 2003), they found that the outputs produced using the n -grams received higher scores from BLEU; ours did not. The difference between human judgments and BLEU scores indicate that closer agreement may be possible by incorporating syntactic structure and semantic information into the BLEU score evaluation. For example, semantically similar words like  X  X nsure X  and  X  X nsure X  in the ex-ample of BLEU paper (Papineni et al., 2002) should be substituted in the formula, and there is a weight to measure the goodness of syntactic structure. This modification will lead to a better metric and such information can be provided by our composite lan-guage models.
 As far as we know, this is the first work of building a complex large scale distributed language model with a principled approach that is more powerful than n -grams when both trained on a very large corpus with up to a billion tokens. We believe our results still hold on web scale corpora that have trillion tokens, since the composite language model effectively en-codes long range dependencies of natural language that n -gram is not viable to consider. Of course, this implies that we have to take a huge amount of resources to perform the computation, nevertheless this becomes feasible, affordable, and cheap in the era of cloud computing.
