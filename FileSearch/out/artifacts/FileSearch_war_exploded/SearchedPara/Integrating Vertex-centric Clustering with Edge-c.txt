 Meta paths are good mechanisms to improve the quality of graph analysis on heterogeneous information networks. This paper presents a meta path graph clustering framework, VEP ath C luster , that com-bines meta path vertex-centric clustering with meta path edge-centric clustering for improving the clustering quality of heterogeneous networks. First, we propose an edge-centric path graph model to capture the meta-path dependencies between pairwise path edges. We model a heterogeneous network containing M types of meta paths as M vertex-centric path graphs and M edge-centric path graphs. Second, we propose a clustering-based multigraph model to capture the fine-grained clustering-based relationships between pairwise vertices and between pairwise path edges. We perfor-m clustering analysis on both a unified vertex-centric path graph and each edge-centric path graph to generate vertex clustering and edge clusterings of the original heterogeneous network respective-ly. Third, a reinforcement algorithm is provided to tightly integrate vertex-centric clustering and edge-centric clustering by mutually enhancing each other. Finally, an iterative learning strategy is p-resented to dynamically refine both vertex-centric clustering and edge-centric clustering by continuously learning the contributions and adjusting the weights of di ff erent path graphs.
 H.2.8 [ Database Applications ]: Data Mining Meta Path Graph Clustering; Vertex / Edge-centric Path Graph / Multigraph; Edge-centric Random Walk; Vertex / Edge-centric Clustering
Heterogeneous information networks are graphs with heteroge-neous types of entities and links. A meta path is a path connect-ing multiple types of entities through a sequence of heterogeneous meta links, representing di ff erent kinds of semantic relations a-mong di ff erent types of entities. DBLP dataset has four types of entities: authors (A), publishing venues (V), papers (P) and pa-per terms (T). Figure 1 (a) gives nine example meta paths between authors in the DBLP dataset, each is composed of three types of meta links: A-P, V-P and T-P, representing di ff erent types of rela-tionships between authors. More meta paths between authors can c c (a) M eta Paths between Authors be generated through link combination and propagation. The meta path A-P-A captures the coauthor relationship, whereas the path A-P-V-P-A represents the relationship between a pair of authors through their papers published on the common venues. For each type of meta paths, we can construct a vertex-centric path graph to capture an individual type of relationships between authors. For example, Figure 1 (b) shows that we join one type of links (A-P) and its opposite form (P-A) to generate a vertex-centric A-P-A path graph, where vertices represent authors and edges denote the coau-thor relationships between authors. For each pair of coauthors, say Kun-Lung Wu and Philip S. Yu , we can represent the A-P-A path by using parallel edges, each representing one of their coauthored pa-pers ( p 1 ,  X  X  X  , p 17 ). By join composition, we obtain the total number of their coauthored papers (17). Clearly, mining heterogeneous in-formation networks through multiple path graphs can provide new insights about how ideas and opinions on di ff erent subjects propa-gate di ff erently among the same set of people.

Meta path-based social network analysis is gaining attention in recent years [1 X 6]. Existing e ff orts utilize a selection of meta paths between the same type of entities to improve the quality of simi-larity search, classification, clustering, link prediction and citation recommendation in heterogeneous networks. However, none of the existing methods have addressed all of the following challenges.  X  Vertex-centric clustering w.r.t. multiple path graphs. As shown in Figure 1, di ff erent meta paths exhibit di ff erent semantic mean-ings about the same type of entities. Thus, the vertex clustering results based on di ff erent path graphs are typically not identical.
It is critical to develop a unified clustering model that can e ffi -ciently integrate the clustering results from multiple path graphs and improve the overall clustering quality. Specifically, a dy-namic weight assignment scheme should be employed to assign di ff erent weights to di ff erent path graphs to reflect their possibly di ff erent contributions towards the clustering convergence.  X  Fine-grained vertex assignment and clustering objective. Meta-path graph analysis di ff erentiates the semantics carried by dif-ferent meta paths in a heterogeneous network. Consequently, it demands fine-grained vertex assignment and clustering objec-tive to further improve the clustering quality. However, exist-ing partitioning clustering approaches, such as K-Means and K-
Medoids [7], usually assign each vertex to its closest center . We argue that this kind of vertex assignment may not always produce an accurate clustering result. Consider Figure 2 (a), by perform-ing K-Means on the A-P-A path graph to assign Kun-Lung Wu to two centers of Bugra Gedik and Philip S. Yu , Figure 2 (b) shows a vertex assignment, i.e., by simply using the coarse path edge weight (the total number of coauthored papers) to measure vertex closeness, Kun-Lung Wu and Philip S. Yu are closer than Kun-Lung Wu and Bugra Gedik . However, in reality, Kun-Lung
Wu and Bugra Gedik are known as database researchers with no or very few data mining papers but Philip S. Yu is a well-known expert on data mining with much more data mining papers than database publications, thus the vertex assignment in Figure 2 (c) is more accurate and better quality. This is because the similarity measures used in vertex assignment and clustering objective of existing methods are too coarse to reflect the above ground truth.  X  Edge-centric clustering w.r.t. multiple path graphs. Conven-tional graph clustering models are usually based on the existence of vertex homophily. However, we argue that vertex homophily without edge clustering is insu ffi cient for meta-path graph anal-ysis on heterogeneous networks. Consider Figures 2 (b) and (c) again, there is only one of 17 coauthored papers between Kun-
Lung Wu and Philip S. Yu published on DM conference ( KDD ) but all 8 coauthored papers between Kun-Lung Wu and Bugra Gedik are published on DB conferences, indicating that Kun-
Lung Wu , Bugra Gedik and the path edge between them belong to cluster DB with very high probability. In comparison, it is highly probable that Philip S. Yu and the path edge between Kun-
Lung Wu and Philip S. Yu belong to di ff erent clusters. Without considering edge clustering, the vertex homophily alone can lead to inaccurate vertex clustering.  X  Integrating vertex-centric clustering and edge-centric clus-tering. Vertex clustering and edge clustering on heterogeneous networks may have individual clustering goals and due to the d-i ff erent semantic relationships implied by di ff erent meta paths.
Relying on either of them alone may result in incomplete and possibly inaccurate clustering results. However, none of existing methods study how to e ff ectively combine the above two tech-niques into a unified meta path graph clustering model.
To address the above challenges, we develop an e ffi cient vertex / edge-centric meta path graph clustering approach, VEPathCluster , with four original contributions.  X  We model a heterogeneous network containing multiple types of meta paths in terms of multiple vertex-centric path graphs and multiple edge-centric path graphs. Each meta path corresponds to one vertex-centric path graph and one edge-centric path graph.  X  We propose a clustering-based multigraph model to capture the fine-grained clustering-based relationships between pairwise ver-tices and between pairwise path edges about given K clusters.  X  We integrate multiple types of vertex-centric path graphs with di ff erent semantics into a unified vertex-centric path graph in terms of their contributions towards the clustering objective. We cluster both the unified vertex-centric path graph and each edge-centric path graph to generate vertex clustering and edge cluster-ings of the original heterogeneous network respectively.  X  We design a reinforcement algorithm to tightly integrate vertex-centric clustering and edge-centric clustering by mutually en-hancing each other: (1) good vertex-centric clustering promotes good edge-centric clustering and (2) good edge-centric clustering elevates good vertex-centric clustering. We devise an iterative learning method to dynamically refine both vertex-centric clus-tering and edge-centric clustering by continuously learning the contributions and adjusting the weights of di ff erent path graphs. (a) A -P-A Vertex Graph  X  Empirical evaluation over real datasets demonstrates the compet-itiveness of VEP ath C luster against the state-of-the-art methods.
We define the problem of vertex / edge-centric meta path graph clustering in terms of the following four concepts.

A heterogeneous information network is denoted as G = ( V , E ), where V is the set of heterogeneous entity vertices in G , consisting of s types of entity vertices, i.e., V = S s i = 1 V i , each V represents the i th types of entity vertices. E is the set of heteroge-neous meta links denoting the relationships between entity vertices in V . Due to heterogeneous entity vertices with s types, E can be divided into s  X  s subsets E ij (1  X  i , j  X  s ) such that E = S where E ij is the set of meta links connecting vertices of the i th type ( V ) to vertices of the j th type ( V j ). E ji is the opposite form of E specifying the set of meta links from V j to V i .

The m th meta path of length l , denoted by MP m = &lt; E , E vertex type V a 0 and destination vertex type V a l (1  X  a nected through join composition. For example, meta path A-P-A is of length 2 and comprises two meta link types: A-P and P-A.
For each meta path in G , we construct a vertex-centric path graph to capture the meta-path based relationships between vertices. For-mally, a vertex-centric path graph for MP m is denoted as VG ( V 0 , V a l , E m ), where V a 0  X  V is the set of source vertices and V l  X  V is the set of destination vertices in MP m , and E m set of path edges between V a 0 and V a l . For the path edge set E compute its adjacency matrix P m by multiplying adjacency matrix of each type of composite meta links E a 0 a 1 , E a 1 a 2 we use W AP and W PA to denote the adjacency matrices of two types of meta links A-P and P-A respectively. We calculate an adjacency matrix P AA = W AP  X  W PA to obtain the path edge between Kun-Lung Wu and Philip S. Yu with a value of 17. For presentation brevity, when the type of source vertices is the same as the type of destination vertices in VG m , i.e., V a 0 = V a l = V c  X  V , we simplify VG m = ( V a 0 , V a l , E m ) as VG m = ( V c , E m ), and path edges in E measure the pairwise closeness between vertices in V c . We denote the size of V c as N V c = | V c | and denote the size of E
In VEP ath C luster , for a specific clustering task, users can se-lect a subset of entity vertices of a certain type as the set of target vertices , denoted by V c , and a subset of M target meta paths MP We construct M vertex-centric path graphs VG m . The problem of V ertex / E dge-centric meta Path graph Cluster ing ( VEP ter ) is to simultaneously perform two clustering tasks: (1) assign all entity vertices in V c to K soft clusters with an N V membership matrix X with each row summing to 1, and (2) cluster all path edges in each E m (1  X  m  X  M ) into K soft clusters with an N m  X  K clustering membership matrix Y m with each row summing to 1. The desired clustering result should achieve the two goals: (1) both path edges and their associated vertices should belong to the same clusters, and vertices within each cluster are close to each oth-er in terms of path edges between them in the same cluster; and (2) vertices belonging to di ff erent clusters are relatively distant from each other in terms of clustered path edges between them.
Figure 3 gives an illustrative example of two vertex-centric path graphs about authors. For A-P-A path graph in Figure 3 (a), the number associated with an author vertex represents the number of coauthored papers by this author. Here, we only consider coau-thored papers on three DB conferences: SIGMOD , VLDB , ICDE and three DM conferences: KDD , ICDM , SDM . For A-P-V-P-A meta path graph in Figure 3 (b), the number associated to an author, e.g., Philip S. Yu (199), represents the total number of papers pub-lished by this author on the above six venues. Similarly, the num-ber on a path edge specifies the value of this path edge through link composition by multiplying adjacency matrices, e.g., W AP in Figure 3 (a), and W AP  X  W PV  X  W VP  X  W PA ) in Figure 3 (b).
VEP ath C luster improves the clustering quality by utilizing four novel mining strategies: (1) edge-centric random walk model; (2) clustering-based multigraph model; (3) integration of vertex-centric clustering and edge-centric clustering; and (4) dynamic weight learn-ing. VEPathCluster iteratively performs the following three tasks to achieve high quality clustering: (1) fix edge clustering and weight assignment to update vertex clustering; (2) fix vertex clustering and weight assignment to update edge clustering; and (3) fix vertex clustering and edge clustering to update weight assignment.
Given a heterogeneous network G = ( V , E ), the set of target ver-tices V c  X  V , and the M target meta paths, the number of clusters K , we first construct the M vertex-centric path graphs: VG 1 Then we initialize the weight assignment and produce the initial vertex clustering of V c on K clusters.

Let  X  (1) m (1  X  m  X  M ) be the weight for the m th vertex-centric path graph VG m at the first iteration, and P m be the adjacency ma-trix of VG m . We use the initial weights  X  ( t ) 1 ,  X  X  X  , X  vertex-centric path graphs into a unified vertex-centric path graph VG . The matrix form of VG , denoted by P (1) , is defined below.
Random weight assignment often performs poorly and results in incorrect clustering results due to the sharp di ff erence in edge val-ues from path graph to path graph, e.g., the edge values in Figure 3 (a) are between 1 and 32 but the edge values in Figure 3 (b) are between 79 and 2219. We normalize edge values in each VG m assigning an initial weight for each VG m in terms of its maximal max P m represents the maximal element in P m .

For two path graphs in Figure 3, we multiply the edge values to generate two path graphs in Figures 4 (a) and (b). Figure 4 (c) shows the combination of them with the above initial weights.
Next we employ a soft clustering method, Fuzzy C-Means (FCM) [8], on the unified vertex-centric path graph VG , to cluster each ver-tex to K clusters such that it has up to K membership probabilities. We use symbol X (1) k ( i ) to represent the membership probability of a vertex v i  X  V c (1  X  i  X  N V c ) belonging to cluster c at the first iteration. Figure 6 (a) exhibits the FCM clustering result of author vertices in Figure 4 (c), where each green number and ochre number in the bracket denotes the membership probability of an author belonging to cluster DB or DM respectively.
Edge-centric random walk model is constructed by performing two tasks: (1) for each vertex-centric path graph, construct an edge-centric path graph and define its vertex values and edge values; and (2) define the transition probability on the edge-centric path graph. meta path MP m . We build an edge-centric path graph EG m verting the edges and vertices of VG m to the vertices and edges of EG m respectively. For example, we first transform the vertex-centric graph in Figure 5 (a) into a vertex / edge bipartite graph in Figure 5 (b) where rectangle vertices and circle vertices correspond to the vertices and the edges in Figure 5 (a). The circle vertex ( W , Y ) (17) in Figure 5 (b) corresponds to the edge between Kun-Lung W u and Philip Y u with weight of 17 in Figure 5 (a).

Next we convert the bipartite graph in Figure 5 (b) to the edge-centric graph in Figure 5 (c) by shrinking each common rectangle vertex shared by any pair of circle vertices to an edge between these two circle vertices, and assign the edge value with the value of the common rectangle vertex in Figure 5 (b). For instance, a common rectangle vertex W (18) shared by two circle vertices ( W , Y ) (17) and ( W , G ) (8) in Figure 5 (b) is converted to the edge between ( W , Y ) (17) and ( W , G ) (8) in Figure 5 (c). In addition, to capture the fact that a circle vertex connects to two rectangle vertices in Figure 5 (b), we build a spin edge for each circle vertex in Figure 5 (c). The value of this spin edge is the sum of the values of two rectangle vertices linked to this circle vertex in the bipartite graph.
We define the transition probability on EG m such that the edge-centric random walk model can be employed to measure the close-ness between a pair of edge vertices in EG m .
 Definition 1. [Transition Probability on Edge-centric Path Graph] Let VG m = ( V c , E m ) be a vertex-centric path graph where V set of target vertices, E is the set of path edges between vertices in V and EG m = ( E m , E m  X  E m ) is a corresponding edge-centric path graph . The transition probability on EG m is defined below. where Q m is the adjacency matrix of EG m and T m ( e mi , e sents the transition probability from vertex e mi to vertex e
Consider Figure 5, we compute the transition probabilities from ( W , Y ) to all five circle vertices: Given that P N E m (18 + 49) + 18 + 18 + 49 + 49 = 201, the transition probability from ( W , Y ) to ( W , G ) is 18 / 201 = 0 . 09.
 We express the above transition probability in a matrix form. where D is a diagonal matrix D = diag( d 1 ,  X  X  X  , d N E m P (a) V ertex-centric Graph
The second novelty is to perform clustering analysis on vertex-centric multigraph and edge-centric multigraph to e ff ectively com-bine vertex homophily with edge homophily. Recall Figure 2 (b), assigning Kun-Lung Wu to Philip S. Yu is due to the using of aggre-gated edge weight (i.e., the total number of coauthored papers) to measure the vertex closeness. We address this problem by introduc-ing two clustering-based multigraph models, one for vertex-centric path graphs and another for edge-centric path graphs.

Given that a vertex-centric path graph VG m = ( V c , E m the clustering result on the corresponding edge-centric path graph EG m = ( E m , E m  X  E m ) obtained at the previous iteration. A vertex-centric path multigraph i.e., Y ( t  X  1) m , denoted as VMG is an edge augmented multigraph, where F m is the set of edges sat-isfying the following condition: for each edge ( v i , v j we create a set of parallel edges between v i and v j in F of edges has up to K clustered edges and each of the parallel edges corresponds to a certain cluster c k . The value of the parallel edge with label c k between v i and v j in VMG m at the t th iteration, denoted by P ( t ) mk ( v i , v j ), are computed as follow.
 where P m ( v i , v j ) represents the value of the edge between v ship probability of vertex ( v i , v j ) belonging to cluster c the last iteration. P ( t ) mk is essentially a projection of P unified vertex-centric path multigraph VMG at the current itera-tion. For each edge-centric path graph EG m = ( E m , E m we create an edge-centric path multigraph EMG m : for each edge ( e mi , e mj )  X  E m  X  E m , we create a set of up to K parallel edges. Each of parallel edges corresponds to cluster c k . The edge values on EMG m at the t th iteration are defined as follow.
 where Q m ( e mi , e mj ) specifies the edge value between two vertices e membership probability of common vertex of two edges e mi belonging to cluster c k in the unified vertex-centric path graph VG at the t th iteration. Q ( t ) mk is essentially a projection of Q c . When e mi = e mj , edge ( e mi , e mj ) is a spin edge associated to e in EG m . In this situation, e mi and e mj correspond to the same edge in VG m , and e mi and e mj will have the same two endpoints ( v v ) in VG m , e.g., the spin edge (( W , Y ) , ( W , Y )) in Figure 5 (b) and the edge between Kun-Lung Wu and Philip S. Yu in Figure 5 (a). R ( v x ) represents the value of endpoint v x in VG m , say 18 for Kun-Lung Wu in Figure 5 (a), and X ( t ) k ( v x ) denotes the probability of v belonging to c k in VG or VMG at the t th iteration.
 For ease of presentation, we omit all spin edges in Figure 6. Based on the A-P-A edge-centric path graph in Figure 6 (b) and its vertex soft clustering result in Figure 6 (a), we generate the A-P-A edge-centric path multigraph in Figure 6 (c). Using the prob-abilities of Kun-Lung Wu on clusters DB and DM : (0.96, 0.04) in Figure 6 (a) and the edge between ( W , Y ) and ( W , A ) in Figure 6 (b), we produce two parallel edges between ( W , Y ) and ( W , A ) in Figure 6 (c) as 18  X  0 . 96 = 17.28 and 18  X  0 . 04 = 0.72 respectively.
We perform edge-centric soft clustering in two steps: (1) convert each edge-centric path graph EG m to an edge-centric path multi-graph EMG m based on the vertex soft clustering X (1) on the unified vertex-centric path graph VG or X ( t ) ( t &gt; 1) on the unified vertex-centric path multigraph VMG ; and (2) compute the edge soft clus-tering Y ( t ) m on each edge-centric path multigraph EMG
Di ff erent from traditional unsupervised graph clustering meth-ods, at the first clustering iteration, we adopt a semi-supervised manner on each EG m with the geometric mean of the probabilities of two endpoints belonging to cluster c k as the initial membership probability of an edge on c k . This is motivated by the observation that if the membership probabilities of two associated endpoints of an edge belonging to c k are very large, then it is highly probable that this edge also has a large probability on c k .

Formally, we convert each EG m to an EMG m by converting the adjacency matrix of EG m to up to K independent adjacency ma-trices in terms of the cluster labels of the edges in EG m learns the cluster probabilities of edge vertices in EG m on the k th adjacency matrix. Let ( v i , v j ) be an edge vertex in EG where v i and v j are the target vertices in the corresponding VG ( V , E m ), and X (1) k ( v x ) be the cluster membership probability of v V belonging to cluster c k at the first iteration. We define the initial edge clustering membership matrix Y (0) m for EMG m below. the initial membership probability of edge vertex ( v i , v EMG m , and X (1) k ( v x ) specifies the probability of v for VG or the vertex clustering membership matrix X ( t ) ( t &gt; 1) for VMG , we transform each EG m into an edge-centric path multi-graph EMG m by Eq. (5). In the first clustering iteration, we update Y m with Y
Similar to Eq.(2), the transition probability on each EMG the current iteration is defined by normalizing each kind of parallel edges with the same cluster labels in EMG m as follow.
 (a) V ertex Clustering w.r.t.
 (e) A -P-V-P-A Edge Clustering w.r.t.
 (g) A -P-V-P-A Vertex-centric Path label c k on one of parallel edges between edge vertices e in EMG m . The transition matrix on EMG m is given below.
Thus, we produce K edge clustering kernels T ( t ) mk , each corre-sponding to cluster c k (1  X  k  X  K ). The transition operation in each edge-centric path multigraph is divided into two steps: (1) choose those parallel edges with the objective cluster label by clus-tering objective; and (2) select an edge with the largest probability from the above edges to jump.
 membership matrix for E m in EMG m (1  X  m  X  M ). For each edge clustering membership vector Y mk (1  X  k  X  K ) based on cluster c we use an individual clustering kernel T ( t ) mk to iteratively infer the membership probabilities of all edge vertices in E m on c
Based on the edge clustering membership matrix Y ( t  X  1) clustering round, VEPathCluster iteratively infers the membership probabilities of vertices in E m until Y mk converges. We then nor-malize each entry Y mk ( e mi ) (1  X  i  X  N E m ) in Y mk as follow. where e mi  X  E m represents an edge vertex in EMG m and Y fies the normalized edge clustering membership vector based on c Thus, the edge clustering membership matrix is updated below.
For example, based on the vertex clustering in Figure 6 (a) and the edge-centric path multigraph in Figure 6 (c), we produce the A-P-A edge clustering in Figure 6 (d).
The vertex clustering on the unified vertex-centric path multi-graph VMG follows the heuristic rule: if vertex v i  X  V c vertex-centric path graph VG m has many neighbors with large prob-abilities on cluster c k and the edges between v i and these neighbors have large probabilities on c k , then it is highly probable that v longs to c k with a larger probability. In each iteration, we use the edge clustering result on each edge-centric path graph EG previous iteration ( Y ( t  X  1) m ) to perform the vertex clustering on VMG (1) Based on Y ( t  X  1) m and Eq.(4), we first convert each VG an vertex-centric path multigraph VMG m by transforming the ad-jacency matrix of VG m into K independent adjacency matrices in terms of the cluster labels of parallel edges. For example, based on the edge clustering result on the edge-centric path multigraph in Figure 6 (d) (or Figure 6 (e)), we convert the vertex-centric path graph in Figure 3 (a) (or Figure 3 (b)) to the vertex-centric path multigraph in Figure 6 (f) (or Figure 6 (g)). (2) We combining M vertex-centric path multigraphs VMG m into the unified vertex-centric path multigraph VMG based on each of K edge clusters with weighting factors  X  ( t ) 1 ,  X  X  X  ,  X  weight tuning mechanism will be detailed in Section 3.6. Thus, we compute the value of the unified parallel edge between vertices v and v j in VMG about cluster c k at the t th iteration as follow. where  X  ( t ) m (1  X  m  X  M ) represents the weight for the m th vertex-centric path multigraph VMG m at the t th iteration, and P specifies the value of the parallel edge with label c k between v v in VMG m . Note that P ( t ) k ( v i , v j ) keeps changing with  X  through dynamic weight learning during each iteration.

The matrix form of VMG is defined based on K kinds of clus-tered parallel edges.

Figure 6 (h) shows the unified vertex-centric path multigraph by combining the two vertex-centric path multigraphs in Figure 6 (f) and (g) with the weights of  X  1 and  X  2 respectively such that the clustered path edges with the same labels between the same pair of vertices from two vertex-centric path multigraphs are combined. (3) We compute the vertex clustering membership matrix X = [ X below define the transition probability on VMG in terms of each of K edge clusters.
 c on one of parallel edges between vertex v i and vertex v j The transition matrix on VMG is given as follow.

Similar to edge-centric clustering, we produce K vertex cluster-ing kernels S ( t ) k , each corresponding to cluster c k operation in the unified vertex-centric path multigraph VMG is di-vided into two steps: (1) choose those parallel edges with the objec-tive cluster label; and (2) select an edge with the largest probability from the above edges to move.

For each vertex clustering membership vector X k (1  X  k  X  K ) based on c k , we utilize an individual clustering kernel S tively infer the membership probabilities of vertices in V
When the iterative vertex clustering converges, we further nor-malize each entry X k ( v i ) (1  X  i  X  N V c ) in X k (1  X  k  X  K ) below. where v i  X  V c denotes a target vertex in VMG and X ( t ) the normalized vertex clustering membership vector based on c Thus, the vertex clustering membership matrix is updated below.
The objective function of VEPathCluster is defined to maximize fuzzy intra-cluster similarity [22, 23] for both vertex clustering in the unified vertex-centric path multigraph VMG and edge cluster-ing on each edge-centric path multigraph EMG m .
 Definition 2. [VEPathCluster Clustering Objective Function] Let VMG be a unified vertex-centric path multigraph, VMG m ( m  X  { 1 ,  X  X  X  , M } ) be M vertex-centric path multigraphs, EMG { 1 ,  X  X  X  , M } ) be M edge-centric path multigraphs,  X  1 weighting factors for VMG 1 ,  X  X  X  , VMG M and EMG 1 ,  X  X  X  , EMG defined in Eqs.(12) and (13) respectively, given K vertex soft clus-ters for VMG with a membership matrix X and K path edge soft clusters for each EMG m with a membership matrix Y m , the goal of VEP ath C luster is to maximize the following objective function.
According to Eqs.(4)-(18), the objective function O is a fraction-al function of multi variables  X  1 ,  X  X  X  , X  M with non-negative real coe ffi cients. On the other hand, the numerator and the denominator of O are both polynomial functions of the above variables. Without loss of generality, we rewrite Eq.(19) as follow. where there are p polynomial terms in the numerator and q poly-nomial terms in the denominator, a i and o i are the coe ffi cients of the i th terms respectively, and b ij and r ij are the exponents of corre-sponding variables in the i th terms respectively.

For ease of presentation, we revise the original objective as the following nonlinear fractional programming problem (NFPP).
Definition 3. [Nonlinear Fractional Programming Problem] Let
Our clustering objective is equivalent to maximize a quotient of two polynomial functions of multiple variables. It is very hard to perform function trend identification and estimation to determine the existence and uniqueness of solutions. Therefore, we want to transform this sophisticated NFPP into an easily solvable problem.
Definition 4. [Nonlinear Parametric Programming Problem] Let T heorem 1. The NFPP in Definition 3 is equivalent to the NPP-P in Definition 4, i.e.,  X  = max max
Proof. If (  X  1 ,  X   X  X  ,  X  M ) is a feasible solution of  X  (  X  ) = 0 , then f (  X  1 ,  X   X  X  ,  X  M )  X   X  g (  X  1 ,  X   X  X  ,  X  M ) = 0 . Thus f (  X   X  X  X  , X  M ) 6 f (  X  1 ,  X   X  X  ,  X  M )  X   X  g (  X  1 ,  X   X  X  ,  X  f (  X  1 ,  X   X  X  ,  X  M ) / g (  X  1 ,  X   X  X  ,  X  M ) &gt; f  X  is a maximum value of NFPP and (  X  1 ,  X   X  X  ,  X  M ) is an optimal so-lution of NFPP.

Conversely, if (  X  1 ,  X  X  X  ,  X  M ) solves NFPP, then we have  X  = f (  X  1 ,  X   X  X  ,  X  M ) / g (  X  1 ,  X   X  X  ,  X  M ) &gt; f f (  X  1 ,  X  X  X  , X  M )  X   X  g (  X  1 ,  X  X  X  , X  M ) 6 f (  X  1 ,  X   X  X  ,  X  0 . We have  X  (  X  ) = 0 and the maximum is taken at (  X  1
Now the original NFPP has been successfully transformed into the straightforward NPPP. This transformation can e ffi ciently speed up the clustering convergence due to the following properties. T heorem 2.  X  (  X  ) is convex.

Proof: Suppose that (  X  1 ,  X   X  X  ,  X  M ) is an optimum of  X  ((1  X   X  )  X   X  X  2 ) with  X  1 ,  X  2 and 0 6  X  6 1 .  X  ((1  X   X  )  X  1 +  X  X  2 ( (1  X   X  )  X  1 +  X  X  2 ) g (  X  1 ,  X   X  X  ,  X  M ) =  X  ( f (  X  (1  X   X  )( f (  X  1 ,  X   X  X  ,  X  M )  X   X  1 g (  X  1 ,  X   X  X  ,  X   X  g (  X  1 ,  X  X  X  , X  M ) + (1  X   X  ) max  X   X  (  X  2 ) + (1  X   X  )  X  (  X  1 ) . Thus,  X  (  X  ) is convex. T heorem 3.  X  (  X  ) is monotonically decreasing.
 lution of  X  (  X  1 ) . Thus,  X  (  X  1 ) = f (  X  1 ,  X   X  X  ,  X  f (  X  1 ,  X   X  X  ,  X  M )  X   X  2 g (  X  1 ,  X   X  X  ,  X  M ) 6  X  X  X  , X  M ) =  X  (  X  2 ) . Algorithm 1 V ertex / E dge-centric meta PATH graph Cluster ing 3: if t = 1 5: Invoke FCM to cluster vertices V o in VG to generate X 6: else 11: if t = 1 T h eorem 4.  X  (  X  ) = 0 has a unique solution.

Proof: Based on the above-mentioned theorems, we know  X  (  X  ) is continuous as well as decreasing. In addition, lim  X   X  +  X  and lim  X   X  X  X  X   X  (  X  ) =+  X  .

The procedure of solving this NPPP includes two parts: (1) find such a reasonable parameter  X  (  X  (  X  ) = 0), making NPPP equivalent to NFPP; (2) given the parameter  X  , solve a polynomial program-ming problem about the original variables  X  1 ,  X  X  X  , X  M . Our weight adjustment mechanism is an iterative procedure to find the solution of  X  (  X  ) = 0 and the corresponding weights after each clustering iteration. We first generate an initial matrix P (1) with initial weight-s in terms of the scales of edge values in each vertex-centric path graph VG m to produce an initial vertex clustering result through FCM [8] on the unified vertex-centric path graph VG . Based on the initial vertex clustering result, we construct an edge-centric path multigraph EMG m for each edge-centric path graph EG m . We then generate an initial edge clustering result on each EMG m . Accord-ing to the initial result of both vertex clustering and edge cluster-ings, we then calculate an initial  X  (  X  ). Since  X  (  X  ) is a monotonic decreasing function and  X  (0) = max non-negative, we start with an initial  X  = 0 and solve the subprob-lem  X  (0) by using existing fast polynomial programming model to update the weights  X  1 ,  X  X  X  , X  M . The parameter  X  is gradually in-m enter the next round. The algorithm repeats the above-mentioned iterative procedure until  X  (  X  ) converges to 0.

By assembling all the pieces in Section 3 together, we provide the pseudo code of our VEPathCluster algorithm in Algorithm 1.
We have performed extensive experiments to evaluate the perfor-mance of VEPathCluster on three real graph datasets.
The first real dataset is extracted from the DBLP Bibliography 2,633 venues (V), and 45,968 terms (T). We choose three meta paths: A-P-A, A-P-V-P-A and A-P-T-P-A, to cluster authors and three kinds of path edges into soft clusters simultaneously. ment programs. We extract 48,975 actors (A), 31,188 movies (M), 4,774 directors (D), and 28 movie genres (G) from the original IMDb dataset. Three candidate meta paths: A-M-A, A-M-D-M-A and A-M-G-M-A, are used to assign each actor and three types of path edges to soft clusters.

The third real-world dataset is extracted from the Yelp X  X  academ-(R), 138,969 users (U), and 30,475 review terms (T). We select t-wo meta paths: B-R-U-R-B and B-R-T-R-B, to generate the soft clusterings of businesses and two kinds of path edges.
We compare VEPathCluster with two representative soft clus-tering algorithms, Fuzzy C-Means (FCM) [8], Gustafson-Kessel (GK) [24], and one recently developed method PathSelClus [4]. For the first two clustering methods, we add the adjacency matrices of all vertex-centric path graphs together to get one single matrix. The first two methods perform vertex-centric soft clustering on a s-ingle graph and PathSelClus performs vertex-centric soft clustering on multiple graphs based on the assumption of vertex homophily.
We also evaluate three partial versions of VEPathCluster to show the strengths of edge clustering and weight learning respectively: (1) VEPathCluster-VE with only vertex clustering and edge clus-tering; (2) VEPathCluster-VW with only vertex clustering and weight update; and (3) VEPathCluster-EW with only edge clus-tering and weight update.

Evaluation Metrics We use three measures to evaluate the qual-ity of vertex clustering by di ff erent methods. The fuzzy Dunn in-dex [25,26] is defined as the ratio between the minimal fuzzy intra-cluster similarity and the maximal fuzzy inter-cluster similarity. where X is the vertex soft clustering membership matrix and Dunn ( X ) is bounded in the range [0 , +  X  ). A larger value of Dunn ( X ) indi-cates a better clustering.

The following two metrics are often used to evaluate the hard clustering result, we thus map the soft clustering results by various methods into hard clustering results with the maximum probability of each vertex as its hard cluster labels. where { VC k } K k = 1 represents the mapped hard clustering of the target vertices V c , i.e., V c = S K k = 1 VC k and VC k T VC l K , k , l . P ( v i , v j ) is the edge value between two vertices v the unified vertex-centric path graph VG . The silhouette coe ffi cien-t [27] with the bound of [-1, 1] contrasts the average intra-cluster similarity with the average inter-cluster similarity. The larger the value, the better the quality.
 Following the same strategy used in [4], we use NMI ( X , Y ) = truth, where X and Y represent two cluster label vectors for the ground truth clustering and the calculated clustering by a cluster-ing method respectively. NMI ( X , Y ) is in the interval [0 , 1] and a larger NMI value indicates a better clustering.

Similarly, we use the same three measures to evaluate the quality of edge clustering by VEPathCluster. We report the average metric value for each measure based on M edge clustering results.
Figures 7-9 exhibit the vertex clustering quality on DBLP, IMD-b and Yelp by varying the number of clusters. We divide six soft clustering methods into three categories: (1) FCM and GK per-form the basic vertex clustering only based on the matrix of the unified vertex-centric path graph; (2) PathSelClus, VEPathCluster-VW and VEPathCluster-VE utilize partial optimization techniques to further improve the quality of vertex clustering; and (3) VEPath-Cluster makes use of both techniques of edge clustering and weight learning to achieve the promotion as much as possible.

First, PathSelClus, VEPathCluster-VW and VEPathCluster-VE significantly outperform FCM and GK on all three evaluation mea-sures. We know that the edges in di ff erent vertex-centric path graph-s usually have values with di ff erent scales. As vertex-centric clus-tering methods, both PathSelClus and VEPathCluster-VW e ffi cien-cy integrates the matrices of multiple vertex-centric path graphs through the iterative weight learning mechanism to learn the op-timal weight assignment for these matrices. Thus, the measure s-cores obtained by them are often comparable to each other. On the other hand, VEPathCluster-VE integrates vertex clustering and edge clustering to mutually enhance each other. These results demon-strate that the importance of exploiting both edge clustering and weight learning for meta path graph clustering.
 Second, it is observed that VEPathCluster-VE outperforms Path-SelClus and VEPathCluster-VW on three graph datasets, even though the dynamic weight refinement is not used in VEPathCluster-VE while both PathSelClus and VEPathCluster-VW employed some iterative weight learning method to find the optimal weight as-signment and improve the clustering quality. This is because both PathSelClus and VEPathCluster-VW are based solely on vertex ho-mophily, without incorporating and integrating edge homophily in-to the clustering analysis. These results illustrate that employing edge clustering is more important than exploit weight learning in solve the meta path graph clustering problem.

Finally, among all six clustering methods, VEPathCluster achieves the best clustering performance for all three evaluation measures in most cases. Compared to other algorithms, VEPathCluster aver-agely achieves 18.7% Dunn increase, 14.1% Silhouette boost and 22.4% NMI improvement on DBLP, 10.6% Dunn growth, 10.4% Silhouette increase and 8.7% NMI boost on IMDb, and 17.7% Dunn increase, 23.9% Silhouette boost and 11.6% NMI improve-ment on Yelp, respectively. Concretely, there are three critical reasons for high accuracy of VEPathCluster: (1) the clustering-based multigraph model integrates both vertex-centric clustering and edge-centric clustering to accurately capture the cluster-specific relationships between vertices and between edges; (2) the edge-centric random walk model provides a natural way to capture the dependencies among path edges within each vertex-centric path graph; and (3) the iterative learning algorithm help the clustering model achieve a good balance among di ff erent types of vertex-centric path graphs and edge-centric path graphs.
Given that FCM, GK, PathSelClus and VEPathCluster-VW are vertex-centric soft clustering methods, we skip the experimental e-valuation of edge clustering for these four approaches. Figures 10-11 present the edge clustering quality by three versions of VEPath-Cluster on two datasets with di ff erent K respectively. Similar trends are observed for the edge clustering quality comparison: VEPath-Cluster achieves the largest Dunn values ( &gt; 0.62), the highest Sil-houette around 0.39-0.89, and the largest NMI ( &gt; 0.58), which are obviously better than other two methods. As K increases, the mea-sure scores achieved by VEPathCluster remains relatively stable, while the measure scores of other two methods oscillate in a fair-ly large range. In addition, in terms of three evaluation measures, VEPathCluster-VE outperforms VEPathCluster-EW in some cases but VEPathCluster-EW performs better than VEPathCluster-VE in some cases. These results demonstrate that each of vertex cluster-ing, edge clustering and weight learning plays an important role in meta path clustering. Thus, we should integrate three optimization techniques to further improve the clustering quality. (a) V ertex Clustering Figure 12 (a) presents the clustering time achieved by VEPath-Cluster on DBLP, Last.fm and IMDb with the same K setups in the experiments of clustering quality in Figures 7-11 respectively. Fig-ure 12 (b) exhibits the scalability test of VEPathCluster by varying the number of target vertices on three datasets respectively. For DBLP and IMDb, we test four di ff erent setups of #Vertices, i.e., #Vertices = 15,715, 48,975, 112,483, 200,000 respectively. How-ever, we only test #Vertices = 15,715, 42,153 for Yelp since the original Yelp dataset contains up to 42,153 businesses. We observe that VEPathCluster scales well with the size of graph for di ff eren-t graph datsets and shows good performance with varying K . A careful examination reveals that the bottleneck component of the overall time complexity for VEPathCluster is the execution time of iterative vertex clustering and edge clusterings, which mainly con-sist of a series of matrix-vector multiplications. Let K be the num-ber of clusters, N V c be the number of target vertices in the unified vertex-centric path multigraph, N E k (1  X  k  X  K ) be the number of parallel edges on the k th cluster in the unified vertex-centric path multigraph, M be the number of edge-centric path multigraphs, N m (1  X  m  X  M ) be the number of vertices in the m th edge-centric path multigraph, N F mk (1  X  k  X  K ) be the number of parallel edges on the k th cluster in the m th edge-centric path multigraph, t number of inner iterations, and t o be the number of outer itera-tions in the clustering process. At the worst case, i.e., the original graph dataset is relatively dense, the complexity of performing ver-tex clustering on the unified vertex-centric path multigraph is equal to O ( t o t i KN 2 V of M edge-centric path multigraphs is equal to O ( t o P M However, when the original graph dataset is very spare, the com-plexity of matrix-vector multiplication is approximately bounded by the size of edges. In this situation, the complexity of perform-ing vertex clustering is reduced to O ( t o t i P K k = 1 performing edge clustering on all M edge-centric path multigraphs
Figure 13 (a) and (b) exhibit the convergence trend of vertex clustering and edge clustering in terms of three evaluation measures on DBLP. Both the Dunn values and the NMI scores in two figures keep increasing or relatively stable and have convex curves when we iteratively perform the tasks of vertex clustering, edge cluster-ing and weight update during the clustering process. On the other hand, the Silhouette values first fluctuate slightly within a range of Table 1: Cluster Membership Probabilities of Authors Based o n Three Meta Paths from DBLP [0.57, 0.95] and then converge very quickly. The entire clustering process converges in nine iterations for DBLP. Figure 13 (c) shows the tendency of weight update for three meta paths on DBLP. We keep the constraint of weights for three meta paths unchanged, i.e., P m = 1  X  m = 1, during the clustering process. We observe that all three weights converge as the clustering process converges. An in-teresting phenomenon is that the weight for the A-P-A meta path first increases and then decreases with the iterations, the weight for the A-P-V-P-A meta path keeps decreasing and the weight curve for the A-P-T-P-A meta path has a converse trend. A reasonable explanation is that people who have many publications on the same conferences may have di ff erent research topics but people who have many papers with the same terms usually have the same research interests. On the other hand, for a pair of coauthors, their primary research areas are not always consistent in terms of the number of their coauthored papers, as illuminated in the example in Figure 2. Another interesting finding is that the weight for the A-P-A meta path is relatively large and other two weights are fairly small. This is because that the edges in di ff erent path graphs usually have val-ues with di ff erent scales, as shown in Figure 3. In addition, the length of either of other two meta paths is larger than that of the A-P-A meta path, and there are many venues and terms in the DBLP dataset. To maintain a good balance among di ff erent meta paths, the algorithm needs to set larger weights for the path graphs with small-scale edges to maintain their contributions to clustering. We examine some details of the experiment results based on D-BLP. Table 1 exhibits the set of authors and their cluster member-ship probabilities after nine iterations based on three meta paths: A-P-A, A-P-V-P-A and A-P-T-P-A. We only present most prolific DBLP experts in the area of database (DB), data mining (DM), ar-tificial intelligence (AI) and information retrieval (IR). We observe that the predicted cluster memberships of authors are consisten-t with their actual research areas. For those researchers known to work in multiple research areas, the cluster membership distribu-tions also correspond to their current research activities. For exam-ple, both Jiawei Han and Philip S. Yu are experts on data mining and database, though their DM probabilities are slightly higher s-ince each of them and their circle of co-authors have more DM papers. Table 2 shows the set of path edges between the above authors in the A-P-A vertex-centric path graph and their cluster membership probabilities after nine clustering iterations. We have observed that most of author pairs associated to path edges usual-ly have di ff erent primary research areas, e.g., the primary research areas of W. Bruce Croft and Hector Garcia-Molina are IR and DB respectively. In this situation, the cluster favorite of the path edges between the pairwise authors are often dominated by the prima-ry research area of one associated author. For example, the path edge ( W. Bruce Croft , Hector Garcia-Molina ) has a main cluster favorite of DB . An interesting phenomenon is that although both Ming-Syan Chen and Philip S. Yu are experts on data mining, i.e., they both have more research publications in the area of data min-Table 2: Cluster Membership Probabilities of A-P-A Path E dges from DBLP ing than in any other academic area such as database. However, the path edge ( Ming-Syan Chen , Philip S. Yu ) have a large prob-ability on cluster DB . A careful examination reveals that most of coauthored publications between two experts are database specific.
Meta path-based social network analysis is gaining attention in recent years [1 X 6]. PathSim [1] presented a meta path-based simi-larity measure for heterogeneous graphs. [2] proposed a meta path-based ranking model to find entities with high similarity to a given query entity. HCC [3] is a meta-path based heterogeneous collec-tive classification method. PathSelClus [4] utilizes user guidance as seeds in some of the clusters to automatically learn the best weight-s for each meta-path in the clustering. MLI [5] is a multi-network link prediction framework by extracting useful features from mul-tiple meta paths.

Graph clustering has been extensively studied in recent years [9 X  21]. Shiga et al. [9] presented a clustering method which integrates numerical vectors with modularity into a spectral relaxation prob-lem. SCAN [10] is a structural clustering algorithm to detect clus-ters, hubs and outliers in networks. MLR-MCL [11] is a multi-level graph clustering algorithm using flows to deliver significan-t improvements in both quality and speed. TopGC [14] is a fast algorithm to probabilistically search large, edge weighted, direct-ed graphs for their best clusters in linear time. BAGC [16] con-structs a Bayesian probabilistic model to capture both structural and attribute aspects of graph. GenClus [17] proposed a model-based method for clustering heterogeneous networks with di ff er-ent link types and di ff erent attribute types. CGC [18] is a multi-domain graph clustering model to utilize cross-domain relationship as co-regularizing penalty to guide the search of consensus cluster-ing structure. FocusCO [20] solves the problem of finding focused clusters and outliers in large attributed graphs.

To the best of our knowledge, VEP ath C luster is the first one to tightly integrate vertex-centric clustering and edge-centric clus-tering by mutually enhancing each other with combining di ff erent types of meta paths over heterogeneous information network.
We have presented a meta path graph clustering framework for mining heterogeneous information networks. First, we model a het-erogeneous information network containing multiple types of meta paths as multiple vertex-centric path graphs and multiple edge-centric path graphs. Second, we cluster both vertex-centric path graph and edge-centric path graphs to generate vertex clustering and edge clusterings. Third, a reinforcement algorithm is provided to tightly integrate vertex clustering and edge clustering by mutu-ally enhancing each other. Finally, an iterative learning strategy is proposed to dynamically refine both clustering results by continu-ously learning the degree of contributions of di ff erent path graphs. Acknowledgement. The first two authors are partially supported by the NSF CISE under Grants IIS-0905493, CNS-1115375, IIP-1230740 and a grant from Intel ISTC on Cloud Computing. The third author performed this work under the auspices of the U.S. Department of Energy by Lawrence Livermore National Laborato-ry under Contract DE-AC52-07NA27344.
