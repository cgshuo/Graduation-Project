 For users, recommendations can sometimes seem odd or counterintuitive. Visualizing recommendations can remove some of this mystery, showing how a recommendation is grouped with other choices. A drawing can also lead a user X  X  eye to other options. Traditional 2D-embeddings of points can be used to create a basic layout, but these methods, by themselves, do not illustrate clusters and neighborhoods very well. In this paper, we propose the use of geographic maps to enhance the definition of clusters and neighbor-hoods, and consider the effectiveness of this approach in vi-sualizing similarities and recommendations arising from TV shows.
 G.2 [ Discrete Mathematic ]: Graph Theory; H.3 [ Information Storage and Retrieval ]: Clustering Algorithms
Information visualization techniques are often essential in helping to make sense out of large data sets. High-dimensional data can be visualized as a collection of points in 2-dimensional space using techniques such as multidimen-sional scaling [6] or force directed algorithms [2]. These em-bedding algorithms tend to put similar items next to each other and visual examination often suffices to identify clus-ters. Sometimes, however, the clusters are not as easy to see and additional visual clues are needed to highlight them. One possibility is to use cluster analysis algorithms, such as modularity clustering [7], to explicitly define clusters. The points and labels can then be colored based on the cluster-ing. While in small examples it is possible to convey the cluster information just with the use of colors and proxim-ity, this becomes difficult to do with large data. Common problems include dense clusters where labels overlap each other and clusters that lack clearly defined boundaries.
In this paper we propose the use of maps as a way to achieve this explicit visual definition of clusters. There are several reasons why such a representation can be more use-ful. First, by explicitly defining the boundary of the clusters and coloring the regions, we make the clustering information clear. Second, as most dimensionality reduction techniques lead to a 2-dimensional positioning of the data points, a map is a natural generalization. Finally, while graphs, charts, and tables often require considerable effort to comprehend, a map representation is more intuitive, as most people are very familiar with maps and even enjoy examining maps. Applying this approach to a data set containing show-show similarities between 1000 TV programs results in the map
The map metaphor becomes more powerful as a user be-comes familiar with the canonical map layout. Humans are comfortable with map-related concepts: items within a  X  X ountry X  are similar to each other; areas separated by a mountain range are difficult to connect; islands might have atypical qualities, etc. We hope through this work to ex-tend the familiar map metaphor to the world of recommen-dations.

In a user-driven mode, a personalized  X  X eat map X  is gen-erated, where regions of low interest are colored with cool colors and regions containing highly recommended shows are colored with a hot color. These maps are generated dy-namically based on user preference and the currently avail-able TV shows. The user can interactively explore the map to find related shows in the same region, or in neighbor-ing regions. Building  X  X oads X  between regions, visiting  X  X s-lands X  and  X  X raveling cross-country X  are all metaphors that can have meaning in the recommendation space. In a user-passive mode, recommendations are highlighted on the map. These maps help the user (as well the designers of the rec-ommender system) understand why certain shows are rec-ommended. By highlighting both the recommended shows research.att.com/~volinsky/maps . A full version of this paper is available at http://arxiv.org/abs/0906.5286 and shows the user has watched on the same map, the user understands the proximity of the recommended items and watched items, thus the rationale for the recommendation.
The input to our algorithm is a relational data set from which we extract a graph. The set of vertices corresponds to the objects in the data, e.g., TV programs, and the set of edges corresponds to the relationship between pairs of ob-jects, e.g., the similarity between a pair of shows. In its fu ll generality, the graph is vertex-weighted and edge-weighte d, with vertex weights corresponding to some notion of the im-portance of a vertex and edge weights corresponding to some notion of the distance between a pair of vertices.
In the next step, the graph is embedded in the plane. Pos-sible embedding algorithms include multidimensional scal -ing [6] and force directed algorithms [2]. A cluster analysi s is then performed in order to group vertices into clusters. I t is important to match the clustering algorithm to the embed-ding algorithm. For example, an embedding derived from a force directed algorithm [2] is well-matched with a modular -ity based clustering algorithm [7], as the two algorithms ar e strongly related [8].

The final map is obtained in the last step. Using the layout information, a Voronoi diagram of the vertices is cre -ated. A naive approach would be to form the Voronoi dia-gram of the vertices, together with fours points on the four corners of the bounding box; see Fig. 2(a). This would re-sult in aesthetically unappealing maps with unnatural oute r boundaries and sharp corners. A more natural appearance can be obtained by placing some random points that are suf-ficiently far away from the set of real vertices, which leads t o more rounded boundaries. The randomness of the points on the outskirt also gives rise to some randomness of the outer boundaries, thus making them more realistic and natural; see Fig. 2(b).

In most of our maps, items have different desirable sizes (e.g., in TVLand the size is determined by a show X  X  popu-larity). We accomplish this by associating larger areas wit h larger label sizes. To make areas proportional to the label size, we first generate points along the bounding boxes of the labels; see Fig. 2(c). To make the inner boundaries more realistic, we perturb these points randomly instead of run-ning strictly along the rectangle bounding boxes. Voronoi cells that belong to the same vertex are colored in the same color, and cells that correspond to the random points on the outskirts are not shown. Cells of the same color are then merged to give the final map; see Fig. 2(d). Note that in-stead of the bounding boxes of labels, we could use any 2D shapes, e.g., the outlines of real countries, in order to obt ain a desired look.

When mapping vertices that contain cluster information, in addition to merging cells that belong to the same ver-tex, we also merge cells that belong to the same cluster, thus forming regions of complicated shapes, with multiple vertices and labels in each region. At this point we can add more geographic components to strengthen the map metaphor. For instance, in places where there is signifi-cant space between vertices in neighboring clusters, we can add lakes, rivers, or mountain ranges, in order to indicate the distance. These structures can all be formed by similar insertion of random points in places where vertices are far away from each other.
Many recommender systems rely on knowledge about how items are related to each other through a similarity measure , e.g., factorization [5]. Recommendations are then made by selecting items that are most similar to those that the user has already sampled. While this provides a useful service, i t is not obvious to the user (and often the designer of the rec-ommender system) why the recommender makes these spe-cific recommendations. A visualization of all the involved items in the same map would reveal a lot of information about how items, and clusters of items, relate to each other. It would serve as the main map from which recommenda-tions can be presented to the user by zooming in to the area of interest. We apply our mapping algorithm to create the land of TV and illustrate this approach.

Figure 1 shows a visualization of the TVLand using our proposed technique. There are many ways to compute sim-ilarity, but here we use a factorization model [5]. The full similarity matrix is dense and very large (tens of thousands of rows and columns and millions of non-zero values). For the maps in this paper, we consider only the top 1000 most popular shows. For each show, we take the top 10 most sim-ilar shows, which gives us a sparse matrix. The graph rep-resented by this matrix is embedded using a scalable force directed algorithm [4]. The font size of each label is pro-portional to the popularity of the show and label overlaps are removed in a post-processing step [3]. Clusters are then computed using a modularity based clustering algorithm [7] . The map is colored using a standard scheme from Color-Brewer [1], with additional blending to obtain more colors.
There are high-level patterns that emerge upon a close inspection of Figure 1. Two cardinal directions seem to be NW-SE and SW-NE. Along the first axis, the NW corner shows are mostly kid-oriented ( Wow Wow Wubbzy and Han-nah Montana ) whereas the SE corner shows seem to cater to more mature audiences ( Good Day at 7am and The O X  X eilly Factor ). Along the second axis, the SW corner has a high concentration of entertainment and fashion shows such as What Not to Wear and E! True Hollywood Show , whereas in the NE corner, sports and news shows cater to more male audiences. The bigger fonts of the popular shows is evident in the northern part of the country and in parts of the SW.
Two islands appear off the NE coast, both due to channel-based clustering. TV viewers often stay on the same chan-nel for extended time intervals, creating strong connectio ns between shows that are not necessarily thematically con-nected. For example, the Highland Island contains many popular PBS shows, from Sesame Street and Barney and Friends to Charlie Rose and Antiques Roadshow . A similar inland cluster directly below contains a variety of popular Univision programs, almost all in Spanish.

Instead of one monolithic cluster of news shows, our map shows several distinct subclusters. In the SW of the conti-nent is the compact and well interconnected Leftbank New-sistan anchored by classic CNN shows Newsroom , The Situ-ation Room and Larry King along with MSNBC newcomers Countdown with Keith Olbermann and The Rachel Maddow Show and the off-kilter Comedy Central shows Daily Show with Jon Stewart and Colbert Report ; see Fig. 3. Diamet-rically opposite on the East is the similarly compact and well interconnected Rightbank Newsistan anchored by Fox and Friends , Hannity , and The O X  X eilly Factor ; see Fig. 4. Above are a couple of clusters of local news and below is yet another news cluster, mostly made up of morning news shows. It is worth noting that the seemingly meaningful left-right placement of the two distinct news clusters was c o-incidental. However, the diametrically opposing placemen t of these two clusters is meaningful as, although they both contain news-related shows, there are very few viewers who regularly watch shows in both clusters. Figure 5: Personalized recommendation heat map for a typical but
Once a global map of the item-item similarity is available, a personalized recommendation  X  X eat map X  can be gener-ated, where regions of low interest are colored with cool colors, and regions containing highly recommended shows are colored with a hot color. Figure 5 shows such a heat map, where shows are scored using a factorization based recommender [5], with blue color for shows that score low, and yellow for shows that score high. We generate such maps dynamically based on the viewing preference of the user, and based on what TV shows are currently available, much like a personalized weather forecast, but for TV shows. These maps uniquely capture the viewing preferences of the user/household, and evolve as the availability of TV shows, and as the user X  X  taste, change with time. We can also gen-erate a heat map profile, determined by how often the user watches certain shows over a fixed time period, say, a week or a month.

Using the map interface, recommendations can be made in several different ways. In a user-driven mode, the heat map is presented to the user for exploration. Users see the areas of concentration of recommended shows or their viewing be-havior, and can explore the map to find other shows in the same countries, or in neighboring countries. In some cases, a user might want to explore faraway lands for something new, or complete a cross-country trip over time. In a user-passiv e mode, recommendations are made by the recommender sys-tem and are highlighted on the map, along with the shows that were most similar. In this mode, the map allows the user to understand why the recommendations are made. For example, Figure 6 shows that Judge Alex is recommended because the user watched Divorce Court , Judge Judy , and Judge Mathis . In addition to the recommended show, the map shows other nearby shows that are related and which might be worth exploring.

Note that the  X  X ot X  areas on the map in Figure 5, include news shows and kids shows. This could be an indication that there are children and adults that household. Our TV data is on the household level, and a household may contain various individuals with widely varying preferences. The v i-sualization of household viewing behavior on a map could possibly separate out different elements of the household an d allow each member to get more personalized recommenda-tions, e.g., the 8-year-old boy will look for interesting sh ows in ToddlerSprawl , while the teenagers look in the Premium Peninsula and the parents in Newsistan .
 Figure 6: Explaining a recommendation. Framed labels with a
We envisage our maps as a navigational interface to inter-active media services such as video/movie/music-on-deman d, in which each title is a live link to the video/audio record-ing, and the user can zoom in and out to explore the land of TV/movies/music, much as online maps are used, except that here clicking on each  X  X own X  allows instant exploratio n. [1] C. A. Brewer. Colorbrewer -selecting good color [2] T. M. J. Fruchterman and E. M. Reingold. Graph [3] E. R. Gansner and Y. F. Hu. Efficient node overlap [4] Y. F. Hu. Efficient and high quality force-directed [5] Y. F. Hu, Y. Koren, and C. Volinsky. Collaborative [6] J. B. Kruskal and M. Wish. Multidimensional Scaling . [7] M. E. J. Newman. Modularity and community [8] A. Noack. Modularity clustering is force-directed
