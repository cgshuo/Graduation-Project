 1. Introduction warehousing system is a collection of methods, techniques, and tools used to support knowledge workers end-users ). For example, a typical fact of interest would be the business the warehouse must be structured according to the multidimensional model, so that it can be exploited by OLAP tools. overlooked on the way.
 organization.
 multidimensional design tasks. It consists of three steps:  X  multidimensional knowledge they capture (i.e., data likely to be analyzed from a multidimensional point of view).  X   X  multidimensional knowledge extracted from the sources.

Thus, we say it is a user-centered approach since the feedback of the user contained in the data sources (i.e., corresponding to the major drawbacks, which we claim to overcome with AMDO.
 render it unfeasible when large data sources are considered.

Filtering the results provided by these approaches is a must, and AMDO aims at objective evidences. Speci fi cally, we introduce the concepts of information), which fi lter and rank results obtained and eventually facilitate the analysis of AMDO's output.
Transaction Processing ) systems, assuming that a RDBMS is the most common kind of data sources we may way to represent them at the logical level is by means of clearly seen in the example shown in Fig. 1 .

There, a single relation (named rental agreement ) models data related to a represents an attribute of the relation (in italics its data type). The interesting perspectives of view of our fact  X  a detailed de
Only those concepts that would play a multidimensional role are shown in the the relation (depicted by the ellipsis at the end).
 identify potential aggregation paths (or roll-up relationships) that would give rise to dimension hierarchies . user is a key feature of OLAP tools (performed through the reengineering processes like the data warehouse conceptual design, the bene will be used as running example all over the paper) refers to a given rental agreement a car is assigned . In turn, rental agreements opened rental  X  and bookings  X  i.e., reservations . An opened rental is considered the car is returned, whereas a reservation might have booked a captured, such as pendant car models to be assigned to rental agreements the service depot associated to a branch . Moreover, a car maintenance is needed .
 instance we will be able to propose a car to be summarizable into two different aggregation paths (into but also through the branch to the country , branch type and car dimension.
 services that will facilitate the automation of our task. Speci languages (even less expressive, as discussed in Section 6 ).
 [3,5,9,14,30] ), this process can be automated.
 integrating a domain vocabulary with the data sources' vocabulary. regarding our approach, and Section 7 concludes the paper. 2. Related work and main contributions de fi ne each framework as follows:  X 
Demand-driven approaches: also known as requirement-driven or goal-driven , focus on determining the end-user
Only in the later stages, they map the output schema onto the data sources. For example, [23,34,47] .  X  fi lter results obtained. For example, [16,22,31,44] .  X  [8,15,21,29] .
 manually.
 of the art on multidimensional modeling in [12,38] .
 other hand, dimensional data is discovered by design patterns based on obtained by these methods depends on i) the decision to de lost if we do not consider a schema up to 3NF): steps can be performed semi-automatically: fi rstly, for each concept identi concept automatically. by itself). Dimension hierarchies are deployed following FK
Consequently, a post-process based on the user requirements (i.e., a demand-driven stage) is carried out to stage must be carried out manually and therefore, it would be hard, even for an expert, to
Regarding our example in Fig. 1 , the rental agreement relation would be identi dimensional concepts and each one would be considered a dimension by itself (overlooking dimension hierarchies). inclusion dependencies and key or cardinality information, which identi example, this method would not be able to identify any of the multidimensional concepts in the relation.  X  measures are overlooked as well, and no clues about how to identify them are given. [8,15,21,29] , but the degree of automation achieved is rather low. Speci thought as a complementary task to the requirements elicitation process. For example, facts are identi (i.e., its dimensional concepts).
 advice on how these entities can be identi fi ed. Thus,  X  and contain measures or quantities that can be summarized methods have various drawbacks: they propose solutions that are computationally expensive, and register drops in scenario in data warehousing systems [17] .
 degree, they use simple design patterns/heuristics to identify the multidimensional concepts. 2.1. Main contributions works already proposed to work at a conceptual level, AMDO is the analysis of the sources leads the process.
 knowledge retrieved by AMDO. Our main contribution in this issue lays on the same time, we provide mechanisms to capture mor e expressive ones. To our knowledge, this is the such mechanisms.
 not thought for querying and reasoning. To our knowledge, our approach is the thedatawarehouseandOLAPconceptstootherareasliketheSemanticWeb,whereontologiesplayakeyroleprovidinga literature as Web-Warehousing [36] ).
 elicitation and the ii) data warehouse design task.
 advances in a continuing evolving area such as the DL community. Moreover, the AMDO tool has now been devised and 3. Method foundations
Since our goal is to identify multidimensional concepts in an automated way, this section aims to concisely de attention to two main aspects; placement of data in a multidimensional space and correct summarizability of data:  X  a new perspective of analysis. Traditionally, they have been classi dimensions to analyze it give rise to a multidimensional schema.  X  instance of an analysis dimension, and every dimension instance may be related to many instances of the fact.  X  of the three necessary conditions (intuitively also suf fi kind of measure being aggregated and the aggregation function. Compatibility must be satis incompatible with some dimensions and kind of measures. For example, we cannot aggregate measure identi fi ed).
 4. Our approach likely to play multidimensional roles [C1] and therefore, likely to give rise to multidimensional schemas.
The fi rst task looks for potential subjects of analysis (i.e., facts). In the literature we can butobjectively,itwillprovidemanydifferentmea sures to analyze from many different perspectives. be shaped.
 obtained before presenting them to the user. We do so by introducing the concepts of search pattern and search patterns are implemented by their corresponding fi fi as a fact (according to the search pattern captured by this
Note the following and interesting properties of our approach:  X 
It is completely fl exible regarding search patterns and fi functions as needed and for each function provided, the ontology concepts would be ranked in a different way.  X 
Relevantly, all the previous heuristics used in the literature can be captured by AMDO (for example, the the number of measures and dimensional concepts. To compute these variables, we introduce novel design patterns  X 
Note that the designer can formulate and compute as many fi fi eld. By analyzing already existing multidimensional schemas in this provides plenty of measures and different analysis perspectives of interest for a given fact. Nevertheless, speci fi (and even give more weight to those closer to the given ontology concept). weighting the number of numerical attributes a concept has with regard to the topological distance to the search pattern can be captured in the following fi ltering function: AttrsByDistance(C) := the distance  X  i.e., the minimum number of properties between C and relevant facts for his/her decision making. For each fact identi ones semantically related).
 and according to the end-user requirements). 4.1. Discovering dimensional concepts follows: symbol stands for subsumption , the basic inference on classes in DL. Subsumption (i.e., A subsumer.  X  stands for a logic equivalence and can be de fi property composition (i.e., { a , c }  X  r  X  s iff  X  b such that { a , b } of properties).

De
For example, consider the conceptual schema in Fig. 2 . There, pickUpBranch and dropOffBranch ). Thus, { branch , pickUpBranch two different points of view from where analyze a rental agreement is provided by the combined semantics of the path and the ending concept.
Nevertheless, it is feasible to decompose this pattern as follows:  X 
First, for a given class F , we look for its direct dimensional concepts (see Section 4.1.1 ).  X  (see Section 4.1.2 ):
De {C,r  X  r1} is a dimensional concept of B as well.
 ad hoc algorithm that will also partially bene fi t from these algorithms. 4.1.1. Computing direct dimensional concepts pattern introduced in the previous section: example, Money ( basicPrice and bestPrice ) and Date ( lastModi be semantically related in the multidimensional schema (for example, by the  X  as  X  drill-across  X  and  X  pivoting  X  .
 class F we keep track of its dimensional concepts as pairs { D ,{ r functional (or inverse functional) properties, etc. Section 6 shows some statistics about the bene any ad hoc algorithm. 4.1.2. Propagating dimensional concepts by transitivity through class taxonomies, as we will show later.
 depicts a class and its potential dimensional concepts:
Where M is the N  X  N matrix, F and D are classes, r 1 , ..., r as many dimensional concepts as different paths we have from F to D .
For example, let us consider rental agreement as F . Thus, M concepts: { Branch ,{ pickUpBranch , dropOffBranch }} and { locatedAt }}, among others. Branch and country play the role of D in each pair, respectively, whereas { dropOffBranch } and { pickUpBranch  X  locatedAt, dropOffBranch agreement to branch and to country respectively.
 In this section we present how to compute this matrix, and we achieve so by means of the next algorithm: vector represents a class and its list of potential dimensional concepts (see the to section.

Step 4 computes the pattern presented in Section 4.1.1 . Each potential dimensional concept identi example, the class maintenance scheduled has a to-one relationship to Date and lastMaintenanceDate properties), service depot (through the and isResponsibleFor properties), car model (through the isOf double (through the currentMilleage and milleageFromLastService
De fi nition 1 , those classes (or datatypes) related to maintenance schedule double ), produce several dimensional concepts.
 according to the de fi nition of closed class :
De fi nition 3. We say a class C is closed or that a given class C closes in the i dimensional concept will be identi fi ed for C in a iteration j such that i iteration i iff:
General case:  X  { D ,{ r 1 ,..., r n }}  X  M b C N , D closed in a given iteration j such that j Basic case: leaf classes and datatypes are, by de fi nition, closed classes.
Steps 11(b)i and 11(c)iiB). If a given class C closes in the i the i +1 th iteration. Once propagated, it is never considered again thanks to the treated method
Knowledge from closed concepts is propagated in two different ways:  X  of D is propagated to C by transitivity according to De fi
Where M c b C N and M p b C , D N are two operators over matrix M . The list of a given class C (i.e., it is equivalent to the operator M between C and D in M b C N ). For example, regarding Fig. 4 .1, M pot }, whereas M p b branch,country N would retrieve { locatedAt
Hence, D i are the set of classes in the dimensional concepts list of D (i.e., represents the concatenation of each path in M b C , D N with each path in M each to-one path from D to D i .  X 
How our algorithm works, can be summarized, in an intuitive way, as follows:  X 
First iteration: leaf classes and datatypes 6 close in this iteration (see Step 8). By de relationships.  X  lists of dimensional concepts are empty. Now, according to our de have closed (and therefore, already propagated), closes in this step.  X 
N can now propagate C in the next iteration (see Step 11(c)iiB).

Following our example, Fig. 4 .1 shows direct dimensional concepts identi how we propagate them by transitivity. For example, rental agreement (bolded in the fi gure), and branch is related by to-one relationships to
Hence, these concepts are also considered dimensional concepts of arrow in Fig. 4 .2). Moreover, according to De fi nition 1 , the path list of these newly identi properly updated when adding them to the list of rental agreement branch by two different paths (i.e., pickUpBranch and dropOffBranch property. Therefore, from rental agreement we can get to country locatedAt , and dropOffBranch and locatedAt . Analogously for the rest of dimensional concepts. dimensional concepts lists). This situation must be noti fi typical example would be the person class with the re fl exive to-one relationship infer new semantics. For example, father _ of  X  father _ of further exploit the cycle semantics.

The most common and also easiest deadlocks to detect and break are the one-to-one and re reason, AMDO treats these two basic cases before computing the propagate (DFS) remembering previous visited nodes would fi t properly.

In our example, we only dispose of trivial deadlocks, such as the one formed by the one-to-one customer and driving license . In this case, before the propagate other) we break the deadlock. In our example, it happens in the following the cycle semantics. 4.1.3. Complexity of the algorithm previous iterations are not considered in the forthcoming ones.
 maximum to-one connectivity (i.e., c ) is 21 (raised by LateReturn would be  X  (65 X 21 5 ).
 classes with empty list of dimensional concepts), 12 classes in the propagated again. Thus, a better estimation of the answer time would be:
Where N i is the number of classes not yet closed (i.e., that still have to be considered) in that iteration, c our example, it would yield: that the value of N i is strictly decreasing. On the other hand, the value of c enough to develop an interactive tool. 4.1.4. Soundness and completeness of the algorithm rule presented in Section 4.1.2 .
 because:  X 
We detect and break deadlocks and,  X  able to propagate any other property in next iterations. 4.2. Identifying measures (i.e., a measure is related to one and just one fact). Similar to De between the fact and the datatype when producing measures. Thus:
De fi datatype values.

It is important to remark that our de fi nition of measure is wider than the de literature but identifying them is important to discover meaningful and additional factual data.
Fig. 7 shows the two kinds of relationships we look for. 1) The example, in our example the bestPrice and basicPrice datatypes related to performed, data loaded in the data warehouse will not preserve [C3]. our example the bestPrice and basicPrice per customer and branch , the bridge-class would be rental agreement and bestPrice
Depending on the aggregation function used, we can derive different aggregate measures. If we use the the best bestPrice (or basicPrice ) offered to a customer bestPrice (or basicPrice ) offered to a customer per branch
These patterns discussed above are captured and computed in the following algorithm: reasoning to compute this pattern (see Section 6 for further details):
Where r is a property and dt any OWL datatype allowing aggregation of data (for example, int ). potential measure for a class F if B is a bridge-class for F . According to De will produce a measure: one-to-one path between them). retrieves a list of classes related to F by, at least, a mandatory (i.e., list is represented as { D ,{ r ,..., r n }} where D is the class (or datatype) itself and each r composite property. Now, we can formally describe this pattern as: Fig. 5 ), we will look for direct mandatory relationships:
The rest of the algorithm (i.e., propagating this knowledge) remains the same. The addition of matrix M overall computation complexity. Indeed, the computational cost of M 4.3. User interaction
Once potential dimensional concepts and measures of analysis have been computed for each class, AMDO presents the example, consider the following search pattern for our running example: better. However, measures are considered to be more relevant, and we are not interested in factless facts capture this pattern would be the following fi ltering function: discussed in Section 4 , AMDO is completely fl exible and tunable regarding the function, the most promising concepts are ranked as follows:
Having a look at the results, in general, classes in the rental agreement and subclasses are better rated than superclasses . This result is sound, since we should expect inherit all their measures and dimensional concepts. Classes in the list that do not belong to the just three: damage cost (2nd place), prepared (3rd place) and which traditionally have been good candidates as facts (see, for example, [7,29] ). (normally, more than one). 4.4. Shaping the dimension hierarchies  X  disjointness of aggregated data, and forbidding zeros we also guarantee its completeness . (either as a level or as a descriptor) within the dimension hierarchy. Two speci descriptors:  X  notation we could formalize this pattern as:
Where C 1 and C 2 are classes and r 1 and r 2 are properties. formed by graph edges. 10 If this holds, C 3 is considered to be a level in both graphs. Importantly, if r maximal graphs, it is mandatory to semantically relate both levels (i.e., C able to exploit this relationship).  X  case, it means that the ending class provides a relevant data granularity (i.e., it was identi a descriptor of the initial concept, since they have not been identi
For example, consider that the user selected rental agreement graphs (starting from customer , lastModi fi cation , assignment car , bestPrice and basicPrice ). Consider branch to play the role of C ( C branch to play a level role. Indeed, it holds if we consider (through the hasAssigned  X  dropOffBranch path) to play the role of C the OWL equivalence constructor). Similarly, regarding the second pattern, descriptor, since it only appears in a one-to-one relationship in the differentiation should be made by the user, if he/she is interested in aggregating data at this level.
There, each arrow starting from rental agreement depicts a dimension hierarchy. Concepts identi as interesting aggregation levels some graph nodes identi maximumDuration ) or by dropping dimensions of no interest (in our case we have not draw in the
De fi nition 1 , the path provides different semantics when identifying dimensional concepts. Thus, reaching customer has different semantics from reaching it from rental agreement same class but present in different graphs are related by semantic relationships. For example, these dimensions automatically, but we allow the user to use prede explore it. 5. Additional practical considerations dimensional concepts would look like as follows: details in this issue.
 to know if we need to aggregate data through a compatible aggregation function (i.e., when B
Finally,westronglyrecommendtoenforcethetheoreticalpatternspresentedinthispaperasmuchaspossible.Relaxingthemmay 6. Discussion
AMDO's design patterns are computed in a fully automatic way, and we bene reasoners.
 properties) and subsumption 11 (given two OWL DL assertions say if one is subsumed by the other). out of 2069 were identi fi ed by our ad hoc algorithm.
 example (see Fig. 2 ), it can be fully speci fi ed in DL-Lite through DL addressed to [40] for a detailed description on how to compute AMDO's patterns in DL-Lite. 7. Conclusions performsathoroughanalysisofthedatasources.Sincesupply-drivenapproachesareknowntogeneratetoomanyresults,wepropose facilitates and gives support to the always hard and time-consuming design task of data warehouses. information about our business domain.
 Acknowledgments Departament d'Universitats, Recerca i Societat de la Informaci X  de la Generalitat de Catalunya.
References
